    public int getMaxEncodedLength(int)
    {
        kanzi.function.LZ4Codec this;
        int srcLen, $i0, $i1, $i2;

        this := @this: kanzi.function.LZ4Codec;

        srcLen := @parameter0: int;

        $i0 = srcLen / 255;

        $i1 = srcLen + $i0;

        $i2 = $i1 + 16;

        return $i2;
    }

    public boolean forward(kanzi.SliceByteArray, kanzi.SliceByteArray)
    {
        kanzi.function.LZ4Codec this;
        kanzi.SliceByteArray input, output;
        int count, srcIdx0, dstIdx0, base, hashShift, srcEnd, matchLimit, mfLimit, litLength, matchLength, $i0, $i1, $i2, $i3, srcIdx#47, dstIdx#49, anchor#51, $i5, i#61, $i6, $i7, h#73, $i8, srcIdx#79, $i9, $i10, h#87, fwdIdx#89, step#91, searchMatchNb#93, srcIdx#95, $i11, $i12, $i13, match#121, $i14, $i15, $i16, $i17, $i18, $i20, token#161, dstIdx#162, $i22, $i23, dstIdx#188, dstIdx#191, $i25, $i27, $i28, match#204, anchor#206, $i34, $i36, $i40, $i42, $i43, $i44, $i45, $i46, h#267, $i47, $i48, $i49, $i50, h#282, $i51, $i52, $i53, $i54, $i55, $i56, dstIdx#321;
        byte[] src, dst, $r0, $r1;
        byte hashLog, $b4, $b19, $b21, $b24, $b26, $b29, $b30, $b31, $b33, $b35, $b38, $b39, $b41;
        int[] table;
        boolean $z0, $z1, $z2, $z3;

        this := @this: kanzi.function.LZ4Codec;

        input := @parameter0: kanzi.SliceByteArray;

        output := @parameter1: kanzi.SliceByteArray;

        $z0 = staticinvoke <kanzi.SliceByteArray: boolean isValid(kanzi.SliceByteArray)>(input);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label01;

        $z1 = staticinvoke <kanzi.SliceByteArray: boolean isValid(kanzi.SliceByteArray)>(output);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label02;

     label01:
        return 0;

     label02:
        $r0 = input.<kanzi.SliceByteArray: byte[] array>;

        $r1 = output.<kanzi.SliceByteArray: byte[] array>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r0 != $r1 goto label03;

        return 0;

     label03:
        count = input.<kanzi.SliceByteArray: int length>;

        $i0 = output.<kanzi.SliceByteArray: int length>;

        $i1 = output.<kanzi.SliceByteArray: int index>;

        $i2 = $i0 - $i1;

        $i3 = virtualinvoke this.<kanzi.function.LZ4Codec: int getMaxEncodedLength(int)>(count);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i2 >= $i3 goto label04;

        return 0;

     label04:
        srcIdx0 = input.<kanzi.SliceByteArray: int index>;

        dstIdx0 = output.<kanzi.SliceByteArray: int index>;

        src = input.<kanzi.SliceByteArray: byte[] array>;

        dst = output.<kanzi.SliceByteArray: byte[] array>;

        base = srcIdx0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count);

        if count >= 65547 goto label05;

        $b4 = 13;

        goto label06;

     label05:
        $b4 = 12;

     label06:
        hashLog = $b4;

        hashShift = 32 - hashLog;

        srcEnd = srcIdx0 + count;

        matchLimit = srcEnd - 5;

        mfLimit = srcEnd - 12;

        srcIdx#47 = srcIdx0;

        dstIdx#49 = dstIdx0;

        anchor#51 = srcIdx0;

        table = this.<kanzi.function.LZ4Codec: int[] buffer>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count);

        if count <= 14 goto label24;

        $i5 = 1 << hashLog;

        i#61 = $i5 - 1;

     label07:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#61);

        if i#61 < 0 goto label08;

        table[i#61] = 0;

        i#61 = i#61 + -1;

        goto label07;

     label08:
        $i6 = staticinvoke <kanzi.Global: int readInt32(byte[],int)>(src, srcIdx#47);

        $i7 = $i6 * -1640531535;

        h#73 = $i7 >>> hashShift;

        $i8 = srcIdx#47 - base;

        table[h#73] = $i8;

        srcIdx#79 = srcIdx#47 + 1;

        $i9 = staticinvoke <kanzi.Global: int readInt32(byte[],int)>(src, srcIdx#79);

        $i10 = $i9 * -1640531535;

        h#87 = $i10 >>> hashShift;

     label09:
        fwdIdx#89 = srcIdx#79;

        step#91 = 1;

        searchMatchNb#93 = 64;

     label10:
        srcIdx#95 = fwdIdx#89;

        fwdIdx#89 = fwdIdx#89 + step#91;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(fwdIdx#89);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(mfLimit);

        if fwdIdx#89 <= mfLimit goto label11;

        $i11 = srcEnd - anchor#51;

        $i12 = staticinvoke <kanzi.function.LZ4Codec: int writeLastLiterals(byte[],int,byte[],int,int)>(src, anchor#51, dst, dstIdx#49, $i11);

        output.<kanzi.SliceByteArray: int index> = $i12;

        input.<kanzi.SliceByteArray: int index> = srcEnd;

        return 1;

     label11:
        step#91 = searchMatchNb#93 >> 6;

        searchMatchNb#93 = searchMatchNb#93 + 1;

        $i13 = table[h#87];

        match#121 = $i13 + base;

        $i14 = srcIdx#95 - base;

        table[h#87] = $i14;

        $i15 = staticinvoke <kanzi.Global: int readInt32(byte[],int)>(src, fwdIdx#89);

        $i16 = $i15 * -1640531535;

        h#87 = $i16 >>> hashShift;

        $z2 = staticinvoke <kanzi.function.LZ4Codec: boolean differentInts(byte[],int,int)>(src, match#121, srcIdx#95);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 1 goto label10;

        $i17 = srcIdx#95 - 65535;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(match#121);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i17);

        if match#121 <= $i17 goto label10;

     label12:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(match#121);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(srcIdx0);

        if match#121 <= srcIdx0 goto label13;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(srcIdx#95);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(anchor#51);

        if srcIdx#95 <= anchor#51 goto label13;

        $i18 = match#121 - 1;

        $b19 = src[$i18];

        $i20 = srcIdx#95 - 1;

        $b21 = src[$i20];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b19);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b21);

        if $b19 != $b21 goto label13;

        match#121 = match#121 + -1;

        srcIdx#95 = srcIdx#95 + -1;

        goto label12;

     label13:
        litLength = srcIdx#95 - anchor#51;

        token#161 = dstIdx#49;

        dstIdx#162 = dstIdx#49 + 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(litLength);

        if litLength < 15 goto label14;

        dst[token#161] = -16;

        $i22 = litLength - 15;

        dstIdx#162 = staticinvoke <kanzi.function.LZ4Codec: int writeLength(byte[],int,int)>(dst, dstIdx#162, $i22);

        goto label15;

     label14:
        $i23 = litLength << 4;

        $b24 = (byte) $i23;

        dst[token#161] = $b24;

     label15:
        staticinvoke <kanzi.function.LZ4Codec: void customArrayCopy(byte[],int,byte[],int,int)>(src, anchor#51, dst, dstIdx#162, litLength);

        dstIdx#188 = dstIdx#162 + litLength;

     label16:
        dstIdx#191 = dstIdx#188 + 1;

        $i25 = srcIdx#95 - match#121;

        $b26 = (byte) $i25;

        dst[dstIdx#188] = $b26;

        dstIdx#49 = dstIdx#191 + 1;

        $i27 = srcIdx#95 - match#121;

        $i28 = $i27 >> 8;

        $b29 = (byte) $i28;

        dst[dstIdx#191] = $b29;

        srcIdx#95 = srcIdx#95 + 4;

        match#204 = match#121 + 4;

        anchor#206 = srcIdx#95;

     label17:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(srcIdx#95);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(matchLimit);

        if srcIdx#95 >= matchLimit goto label18;

        $b30 = src[srcIdx#95];

        $b31 = src[match#204];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b30);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b31);

        if $b30 != $b31 goto label18;

        srcIdx#95 = srcIdx#95 + 1;

        match#204 = match#204 + 1;

        goto label17;

     label18:
        matchLength = srcIdx#95 - anchor#206;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(matchLength);

        if matchLength < 15 goto label19;

        $b33 = dst[token#161];

        $i34 = $b33 + 15;

        $b35 = (byte) $i34;

        dst[token#161] = $b35;

        $i36 = matchLength - 15;

        dstIdx#49 = staticinvoke <kanzi.function.LZ4Codec: int writeLength(byte[],int,int)>(dst, dstIdx#49, $i36);

        goto label20;

     label19:
        $b38 = dst[token#161];

        $b39 = (byte) matchLength;

        $i40 = $b38 + $b39;

        $b41 = (byte) $i40;

        dst[token#161] = $b41;

     label20:
        anchor#51 = srcIdx#95;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(srcIdx#95);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(mfLimit);

        if srcIdx#95 <= mfLimit goto label21;

        $i42 = srcEnd - anchor#51;

        $i43 = staticinvoke <kanzi.function.LZ4Codec: int writeLastLiterals(byte[],int,byte[],int,int)>(src, anchor#51, dst, dstIdx#49, $i42);

        output.<kanzi.SliceByteArray: int index> = $i43;

        input.<kanzi.SliceByteArray: int index> = srcEnd;

        return 1;

     label21:
        $i44 = srcIdx#95 - 2;

        $i45 = staticinvoke <kanzi.Global: int readInt32(byte[],int)>(src, $i44);

        $i46 = $i45 * -1640531535;

        h#267 = $i46 >>> hashShift;

        $i47 = srcIdx#95 - 2;

        $i48 = $i47 - base;

        table[h#267] = $i48;

        $i49 = staticinvoke <kanzi.Global: int readInt32(byte[],int)>(src, srcIdx#95);

        $i50 = $i49 * -1640531535;

        h#282 = $i50 >>> hashShift;

        $i51 = table[h#282];

        match#121 = $i51 + base;

        $i52 = srcIdx#95 - base;

        table[h#282] = $i52;

        $z3 = staticinvoke <kanzi.function.LZ4Codec: boolean differentInts(byte[],int,int)>(src, match#121, srcIdx#95);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 1 goto label23;

        $i53 = srcIdx#95 - 65535;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(match#121);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i53);

        if match#121 > $i53 goto label22;

        goto label23;

     label22:
        token#161 = dstIdx#49;

        dstIdx#188 = dstIdx#49 + 1;

        dst[token#161] = 0;

        goto label16;

     label23:
        srcIdx#79 = srcIdx#95 + 1;

        $i54 = staticinvoke <kanzi.Global: int readInt32(byte[],int)>(src, srcIdx#79);

        $i55 = $i54 * -1640531535;

        h#87 = $i55 >>> hashShift;

        goto label09;

     label24:
        $i56 = srcEnd - anchor#51;

        dstIdx#321 = staticinvoke <kanzi.function.LZ4Codec: int writeLastLiterals(byte[],int,byte[],int,int)>(src, anchor#51, dst, dstIdx#49, $i56);

        output.<kanzi.SliceByteArray: int index> = dstIdx#321;

        input.<kanzi.SliceByteArray: int index> = srcEnd;

        return 1;
    }

    private static int writeLastLiterals(byte[], int, byte[], int, int)
    {
        byte[] src, dst;
        int srcIdx, runLength, dstIdx#1, dstIdx#6, $i0, dstIdx#14, $i1, $i3;
        byte $b2;

        src := @parameter0: byte[];

        srcIdx := @parameter1: int;

        dst := @parameter2: byte[];

        dstIdx#1 := @parameter3: int;

        runLength := @parameter4: int;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(runLength);

        if runLength < 15 goto label1;

        dstIdx#6 = dstIdx#1 + 1;

        dst[dstIdx#1] = -16;

        $i0 = runLength - 15;

        dstIdx#14 = staticinvoke <kanzi.function.LZ4Codec: int writeLength(byte[],int,int)>(dst, dstIdx#6, $i0);

        goto label2;

     label1:
        dstIdx#14 = dstIdx#1 + 1;

        $i1 = runLength << 4;

        $b2 = (byte) $i1;

        dst[dstIdx#1] = $b2;

     label2:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(src, srcIdx, dst, dstIdx#14, runLength);

        $i3 = dstIdx#14 + runLength;

        return $i3;
    }

    private static boolean differentInts(byte[], int, int)
    {
        byte[] array;
        int srcIdx, dstIdx, $i2, $i4, $i6, $i8, $i10, $i12;
        byte $b0, $b1, $b3, $b5, $b7, $b9, $b11, $b13;
        boolean $z0;

        array := @parameter0: byte[];

        srcIdx := @parameter1: int;

        dstIdx := @parameter2: int;

        $b0 = array[srcIdx];

        $b1 = array[dstIdx];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b0 != $b1 goto label1;

        $i2 = srcIdx + 1;

        $b3 = array[$i2];

        $i4 = dstIdx + 1;

        $b5 = array[$i4];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b5);

        if $b3 != $b5 goto label1;

        $i6 = srcIdx + 2;

        $b7 = array[$i6];

        $i8 = dstIdx + 2;

        $b9 = array[$i8];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b9);

        if $b7 != $b9 goto label1;

        $i10 = srcIdx + 3;

        $b11 = array[$i10];

        $i12 = dstIdx + 3;

        $b13 = array[$i12];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b11);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b13);

        if $b11 == $b13 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private static int writeLength(byte[], int, int)
    {
        byte[] array;
        int idx#1, len#2, $i0, $i1, $i3;
        byte $b2;

        array := @parameter0: byte[];

        idx#1 := @parameter1: int;

        len#2 := @parameter2: int;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len#2);

        if len#2 < 510 goto label2;

        array[idx#1] = -1;

        $i0 = idx#1 + 1;

        array[$i0] = -1;

        idx#1 = idx#1 + 2;

        len#2 = len#2 + -510;

        goto label1;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len#2);

        if len#2 < 255 goto label3;

        $i1 = idx#1;

        idx#1 = idx#1 + 1;

        array[$i1] = -1;

        len#2 = len#2 + -255;

     label3:
        $b2 = (byte) len#2;

        array[idx#1] = $b2;

        $i3 = idx#1 + 1;

        return $i3;
    }

    private static void customArrayCopy(byte[], int, byte[], int, int)
    {
        byte[] src, dst;
        int srcIdx, dstIdx, len, i#2, $i0, $i1;

        src := @parameter0: byte[];

        srcIdx := @parameter1: int;

        dst := @parameter2: byte[];

        dstIdx := @parameter3: int;

        len := @parameter4: int;

        i#2 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len);

        if i#2 >= len goto label2;

        $i0 = srcIdx + i#2;

        $i1 = dstIdx + i#2;

        staticinvoke <kanzi.function.LZ4Codec: void arrayChunkCopy(byte[],int,byte[],int)>(src, $i0, dst, $i1);

        i#2 = i#2 + 8;

        goto label1;

     label2:
        return;
    }

    private static void arrayChunkCopy(byte[], int, byte[], int)
    {
        byte[] src, dst;
        int srcIdx, dstIdx, $i1, $i2, $i4, $i5, $i7, $i8, $i10, $i11, $i13, $i14, $i16, $i17, $i19, $i20;
        byte $b0, $b3, $b6, $b9, $b12, $b15, $b18, $b21;

        src := @parameter0: byte[];

        srcIdx := @parameter1: int;

        dst := @parameter2: byte[];

        dstIdx := @parameter3: int;

        $b0 = src[srcIdx];

        dst[dstIdx] = $b0;

        $i1 = dstIdx + 1;

        $i2 = srcIdx + 1;

        $b3 = src[$i2];

        dst[$i1] = $b3;

        $i4 = dstIdx + 2;

        $i5 = srcIdx + 2;

        $b6 = src[$i5];

        dst[$i4] = $b6;

        $i7 = dstIdx + 3;

        $i8 = srcIdx + 3;

        $b9 = src[$i8];

        dst[$i7] = $b9;

        $i10 = dstIdx + 4;

        $i11 = srcIdx + 4;

        $b12 = src[$i11];

        dst[$i10] = $b12;

        $i13 = dstIdx + 5;

        $i14 = srcIdx + 5;

        $b15 = src[$i14];

        dst[$i13] = $b15;

        $i16 = dstIdx + 6;

        $i17 = srcIdx + 6;

        $b18 = src[$i17];

        dst[$i16] = $b18;

        $i19 = dstIdx + 7;

        $i20 = srcIdx + 7;

        $b21 = src[$i20];

        dst[$i19] = $b21;

        return;
    }

    public void <init>()
    {
        kanzi.function.LZ4Codec this;
        int[] $r0;

        this := @this: kanzi.function.LZ4Codec;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = newarray (int)[8192];

        this.<kanzi.function.LZ4Codec: int[] buffer> = $r0;

        return;
    }


