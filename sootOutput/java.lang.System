    static void <clinit>()
    {
        staticinvoke <java.lang.System: void registerNatives()>();

        <java.lang.System: java.io.InputStream in> = null;

        <java.lang.System: java.io.PrintStream out> = null;

        <java.lang.System: java.io.PrintStream err> = null;

        <java.lang.System: java.lang.SecurityManager security> = null;

        <java.lang.System: java.io.Console cons> = null;

        return;
    }

    public static java.lang.SecurityManager getSecurityManager()
    {
        java.lang.SecurityManager $r0;

        $r0 = <java.lang.System: java.lang.SecurityManager security>;

        return $r0;
    }

    public static java.lang.String getProperty(java.lang.String)
    {
        java.lang.String l0, $r1;
        java.lang.SecurityManager l1;
        java.util.Properties $r0;

        l0 := @parameter0: java.lang.String;

        staticinvoke <java.lang.System: void checkKey(java.lang.String)>(l0);

        l1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if l1 == null goto label1;

        virtualinvoke l1.<java.lang.SecurityManager: void checkPropertyAccess(java.lang.String)>(l0);

     label1:
        $r0 = <java.lang.System: java.util.Properties props>;

        $r1 = virtualinvoke $r0.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(l0);

        return $r1;
    }

    private static void checkKey(java.lang.String)
    {
        java.lang.String l0;
        java.lang.NullPointerException $r0;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;

        l0 := @parameter0: java.lang.String;

        if l0 != null goto label1;

        $r0 = new java.lang.NullPointerException;

        specialinvoke $r0.<java.lang.NullPointerException: void <init>(java.lang.String)>("key can\'t be null");

        throw $r0;

     label1:
        $z0 = virtualinvoke l0.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("key can\'t be empty");

        throw $r1;

     label2:
        return;
    }

    public static java.lang.String lineSeparator()
    {
        java.lang.String $r0;

        $r0 = <java.lang.System: java.lang.String lineSeparator>;

        return $r0;
    }

    public static java.lang.String setProperty(java.lang.String, java.lang.String)
    {
        java.lang.String l0, l1, $r3;
        java.lang.SecurityManager l2;
        java.util.PropertyPermission $r0;
        java.util.Properties $r1;
        java.lang.Object $r2;

        l0 := @parameter0: java.lang.String;

        l1 := @parameter1: java.lang.String;

        staticinvoke <java.lang.System: void checkKey(java.lang.String)>("user.timezone");

        l2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if l2 == null goto label1;

        $r0 = new java.util.PropertyPermission;

        specialinvoke $r0.<java.util.PropertyPermission: void <init>(java.lang.String,java.lang.String)>("user.timezone", "write");

        virtualinvoke l2.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r0);

     label1:
        $r1 = <java.lang.System: java.util.Properties props>;

        $r2 = virtualinvoke $r1.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("user.timezone", l1);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }


