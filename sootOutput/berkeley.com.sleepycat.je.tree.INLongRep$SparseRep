    public long getMemorySize()
    {
        berkeley.com.sleepycat.je.tree.INLongRep$SparseRep this;
        long $l0, $l2, $l3, $l5, $l6, $l9, $l10;
        int $i1, $i4, $i7, $i8;
        short[] $r0;

        this := @this: berkeley.com.sleepycat.je.tree.INLongRep$SparseRep;

        $l0 = specialinvoke this.<berkeley.com.sleepycat.je.tree.INLongRep$DefaultRep: long getMemorySize()>();

        $i1 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: int SPARSE_LONG_REP_OVERHEAD>;

        $l2 = (long) $i1;

        $l3 = $l0 + $l2;

        $i4 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DEFAULT_KEYVALS_OVERHEAD>;

        $l5 = (long) $i4;

        $l6 = $l3 - $l5;

        $r0 = this.<berkeley.com.sleepycat.je.tree.INLongRep$SparseRep: short[] idxs>;

        $i7 = lengthof $r0;

        $i8 = staticinvoke <berkeley.com.sleepycat.je.dbi.MemoryBudget: int shortArraySize(int)>($i7);

        $l9 = (long) $i8;

        $l10 = $l6 + $l9;

        return $l10;
    }

    public berkeley.com.sleepycat.je.tree.INLongRep set(int, long, berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.tree.INLongRep$SparseRep this;
        int idx, slot#2, i#4, $i0, $i6, $i7, i#61, $i10;
        long val, $l8, $l9, $l13;
        berkeley.com.sleepycat.je.tree.IN parent;
        short[] $r0, $r1, $r2, $r4, $r5, $r8, $r9, $r10;
        short $s1, $s3, $s5, $s11, $s12;
        byte $b2, $b4;
        berkeley.com.sleepycat.je.tree.INLongRep $r3, $r6, newRep#54, $r11;
        berkeley.com.sleepycat.je.tree.INLongRep$DefaultRep $r7;

        this := @this: berkeley.com.sleepycat.je.tree.INLongRep$SparseRep;

        idx := @parameter0: int;

        val := @parameter1: long;

        parent := @parameter2: berkeley.com.sleepycat.je.tree.IN;

        slot#2 = -1;

        i#4 = 0;

     label01:
        $r0 = this.<berkeley.com.sleepycat.je.tree.INLongRep$SparseRep: short[] idxs>;

        $i0 = lengthof $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#4 >= $i0 goto label05;

        $r1 = this.<berkeley.com.sleepycat.je.tree.INLongRep$SparseRep: short[] idxs>;

        $s1 = $r1[i#4];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(idx);

        if $s1 != idx goto label03;

        $b2 = val cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b2);

        if $b2 != 0 goto label02;

        $r2 = this.<berkeley.com.sleepycat.je.tree.INLongRep$SparseRep: short[] idxs>;

        $r2[i#4] = -1;

     label02:
        $r3 = specialinvoke this.<berkeley.com.sleepycat.je.tree.INLongRep$DefaultRep: berkeley.com.sleepycat.je.tree.INLongRep set(int,long,berkeley.com.sleepycat.je.tree.IN)>(i#4, val, parent);

        return $r3;

     label03:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(slot#2);

        if slot#2 >= 0 goto label04;

        $r4 = this.<berkeley.com.sleepycat.je.tree.INLongRep$SparseRep: short[] idxs>;

        $s3 = $r4[i#4];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s3);

        if $s3 != -1 goto label04;

        slot#2 = i#4;

     label04:
        i#4 = i#4 + 1;

        goto label01;

     label05:
        $b4 = val cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b4);

        if $b4 != 0 goto label06;

        return this;

     label06:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(slot#2);

        if slot#2 < 0 goto label07;

        $r5 = this.<berkeley.com.sleepycat.je.tree.INLongRep$SparseRep: short[] idxs>;

        $s5 = (short) idx;

        $r5[slot#2] = $s5;

        $r6 = specialinvoke this.<berkeley.com.sleepycat.je.tree.INLongRep$DefaultRep: berkeley.com.sleepycat.je.tree.INLongRep set(int,long,berkeley.com.sleepycat.je.tree.IN)>(slot#2, val, parent);

        return $r6;

     label07:
        $r7 = new berkeley.com.sleepycat.je.tree.INLongRep$DefaultRep;

        $i6 = virtualinvoke parent.<berkeley.com.sleepycat.je.tree.IN: int getMaxEntries()>();

        $i7 = this.<berkeley.com.sleepycat.je.tree.INLongRep$SparseRep: int bytesPerValue>;

        specialinvoke $r7.<berkeley.com.sleepycat.je.tree.INLongRep$DefaultRep: void <init>(int,int)>($i6, $i7);

        newRep#54 = $r7;

        $l8 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INLongRep$SparseRep: long getMemorySize()>();

        $l9 = virtualinvoke newRep#54.<berkeley.com.sleepycat.je.tree.INLongRep: long getMemorySize()>();

        virtualinvoke parent.<berkeley.com.sleepycat.je.tree.IN: void updateMemorySize(long,long)>($l8, $l9);

        i#61 = 0;

     label08:
        $r8 = this.<berkeley.com.sleepycat.je.tree.INLongRep$SparseRep: short[] idxs>;

        $i10 = lengthof $r8;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#61);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i10);

        if i#61 >= $i10 goto label10;

        $r9 = this.<berkeley.com.sleepycat.je.tree.INLongRep$SparseRep: short[] idxs>;

        $s11 = $r9[i#61];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s11);

        if $s11 == -1 goto label09;

        $r10 = this.<berkeley.com.sleepycat.je.tree.INLongRep$SparseRep: short[] idxs>;

        $s12 = $r10[i#61];

        $l13 = specialinvoke this.<berkeley.com.sleepycat.je.tree.INLongRep$DefaultRep: long get(int)>(i#61);

        newRep#54 = virtualinvoke newRep#54.<berkeley.com.sleepycat.je.tree.INLongRep: berkeley.com.sleepycat.je.tree.INLongRep set(int,long,berkeley.com.sleepycat.je.tree.IN)>($s12, $l13, parent);

     label09:
        i#61 = i#61 + 1;

        goto label08;

     label10:
        $r11 = virtualinvoke newRep#54.<berkeley.com.sleepycat.je.tree.INLongRep: berkeley.com.sleepycat.je.tree.INLongRep set(int,long,berkeley.com.sleepycat.je.tree.IN)>(idx, val, parent);

        return $r11;
    }

    public void <init>(int)
    {
        berkeley.com.sleepycat.je.tree.INLongRep$SparseRep this;
        int nBytes;
        short[] $r0, $r1;

        this := @this: berkeley.com.sleepycat.je.tree.INLongRep$SparseRep;

        nBytes := @parameter0: int;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.INLongRep$DefaultRep: void <init>(int,int)>(4, nBytes);

        $r0 = newarray (short)[4];

        this.<berkeley.com.sleepycat.je.tree.INLongRep$SparseRep: short[] idxs> = $r0;

        $r1 = this.<berkeley.com.sleepycat.je.tree.INLongRep$SparseRep: short[] idxs>;

        staticinvoke <java.util.Arrays: void fill(short[],short)>($r1, -1);

        return;
    }

    public long get(int)
    {
        berkeley.com.sleepycat.je.tree.INLongRep$SparseRep this;
        int idx, i#2, $i0;
        short[] $r0, $r1;
        short $s1;
        long $l2;

        this := @this: berkeley.com.sleepycat.je.tree.INLongRep$SparseRep;

        idx := @parameter0: int;

        i#2 = 0;

     label1:
        $r0 = this.<berkeley.com.sleepycat.je.tree.INLongRep$SparseRep: short[] idxs>;

        $i0 = lengthof $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#2 >= $i0 goto label3;

        $r1 = this.<berkeley.com.sleepycat.je.tree.INLongRep$SparseRep: short[] idxs>;

        $s1 = $r1[i#2];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(idx);

        if $s1 != idx goto label2;

        $l2 = specialinvoke this.<berkeley.com.sleepycat.je.tree.INLongRep$DefaultRep: long get(int)>(i#2);

        return $l2;

     label2:
        i#2 = i#2 + 1;

        goto label1;

     label3:
        return 0L;
    }

    public berkeley.com.sleepycat.je.tree.INLongRep copy(int, int, int, berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.tree.INLongRep$SparseRep this;
        int n, from#1, to#2, i#11, $i0, $i1, from#24, to#28, i#30;
        berkeley.com.sleepycat.je.tree.IN parent;
        berkeley.com.sleepycat.je.tree.INLongRep target#4;
        long $l2, $l3;

        this := @this: berkeley.com.sleepycat.je.tree.INLongRep$SparseRep;

        from#1 := @parameter0: int;

        to#2 := @parameter1: int;

        n := @parameter2: int;

        parent := @parameter3: berkeley.com.sleepycat.je.tree.IN;

        target#4 = this;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(to#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(from#1);

        if to#2 == from#1 goto label6;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n);

        if n != 0 goto label1;

        goto label6;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(to#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(from#1);

        if to#2 >= from#1 goto label4;

        i#11 = 0;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#11);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n);

        if i#11 >= n goto label3;

        $i0 = to#2;

        to#2 = to#2 + 1;

        $i1 = from#1;

        from#1 = from#1 + 1;

        $l2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INLongRep$SparseRep: long get(int)>($i1);

        target#4 = virtualinvoke target#4.<berkeley.com.sleepycat.je.tree.INLongRep: berkeley.com.sleepycat.je.tree.INLongRep set(int,long,berkeley.com.sleepycat.je.tree.IN)>($i0, $l2, parent);

        i#11 = i#11 + 1;

        goto label2;

     label3:
        goto label6;

     label4:
        from#24 = from#1 + n;

        to#28 = to#2 + n;

        i#30 = 0;

     label5:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#30);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n);

        if i#30 >= n goto label6;

        to#28 = to#28 + -1;

        from#24 = from#24 + -1;

        $l3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INLongRep$SparseRep: long get(int)>(from#24);

        target#4 = virtualinvoke target#4.<berkeley.com.sleepycat.je.tree.INLongRep: berkeley.com.sleepycat.je.tree.INLongRep set(int,long,berkeley.com.sleepycat.je.tree.IN)>(to#28, $l3, parent);

        i#30 = i#30 + 1;

        goto label5;

     label6:
        return target#4;
    }

    public berkeley.com.sleepycat.je.tree.INLongRep compact(berkeley.com.sleepycat.je.tree.IN, berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep)
    {
        berkeley.com.sleepycat.je.tree.INLongRep$SparseRep this;
        berkeley.com.sleepycat.je.tree.IN parent;
        berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep emptyRep;
        boolean $z0;
        berkeley.com.sleepycat.je.tree.INLongRep $r0;

        this := @this: berkeley.com.sleepycat.je.tree.INLongRep$SparseRep;

        parent := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        emptyRep := @parameter1: berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INLongRep$SparseRep: boolean isEmpty()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INLongRep$SparseRep: berkeley.com.sleepycat.je.tree.INLongRep clear(berkeley.com.sleepycat.je.tree.IN,berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep)>(parent, emptyRep);

        return $r0;

     label1:
        return this;
    }

    public boolean isEmpty()
    {
        berkeley.com.sleepycat.je.tree.INLongRep$SparseRep this;
        short[] l1;
        int l2, l3#6;
        short idx;

        this := @this: berkeley.com.sleepycat.je.tree.INLongRep$SparseRep;

        l1 = this.<berkeley.com.sleepycat.je.tree.INLongRep$SparseRep: short[] idxs>;

        l2 = lengthof l1;

        l3#6 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l2);

        if l3#6 >= l2 goto label3;

        idx = l1[l3#6];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(idx);

        if idx == -1 goto label2;

        return 0;

     label2:
        l3#6 = l3#6 + 1;

        goto label1;

     label3:
        return 1;
    }

    public berkeley.com.sleepycat.je.tree.INLongRep clear(berkeley.com.sleepycat.je.tree.IN, berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep)
    {
        berkeley.com.sleepycat.je.tree.INLongRep$SparseRep this;
        berkeley.com.sleepycat.je.tree.IN parent;
        berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep emptyRep;
        long $l0, $l1;

        this := @this: berkeley.com.sleepycat.je.tree.INLongRep$SparseRep;

        parent := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        emptyRep := @parameter1: berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep;

        $l0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INLongRep$SparseRep: long getMemorySize()>();

        $l1 = virtualinvoke emptyRep.<berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep: long getMemorySize()>();

        virtualinvoke parent.<berkeley.com.sleepycat.je.tree.IN: void updateMemorySize(long,long)>($l0, $l1);

        return emptyRep;
    }

    public volatile berkeley.com.sleepycat.je.tree.INLongRep resize(int)
    {
        berkeley.com.sleepycat.je.tree.INLongRep$SparseRep this, $r0;
        int l1;

        this := @this: berkeley.com.sleepycat.je.tree.INLongRep$SparseRep;

        l1 := @parameter0: int;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INLongRep$SparseRep: berkeley.com.sleepycat.je.tree.INLongRep$SparseRep resize(int)>(l1);

        return $r0;
    }

    public volatile berkeley.com.sleepycat.je.tree.INLongRep$DefaultRep resize(int)
    {
        berkeley.com.sleepycat.je.tree.INLongRep$SparseRep this, $r0;
        int l1;

        this := @this: berkeley.com.sleepycat.je.tree.INLongRep$SparseRep;

        l1 := @parameter0: int;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INLongRep$SparseRep: berkeley.com.sleepycat.je.tree.INLongRep$SparseRep resize(int)>(l1);

        return $r0;
    }

    public berkeley.com.sleepycat.je.tree.INLongRep$SparseRep resize(int)
    {
        berkeley.com.sleepycat.je.tree.INLongRep$SparseRep this;
        int capacity;

        this := @this: berkeley.com.sleepycat.je.tree.INLongRep$SparseRep;

        capacity := @parameter0: int;

        return this;
    }


