    public void <init>()
    {
        weka.classifiers.rules.PART this;

        this := @this: weka.classifiers.rules.PART;

        specialinvoke this.<weka.classifiers.AbstractClassifier: void <init>()>();

        this.<weka.classifiers.rules.PART: float m_CF> = 0.25F;

        this.<weka.classifiers.rules.PART: int m_minNumObj> = 2;

        this.<weka.classifiers.rules.PART: boolean m_useMDLcorrection> = 1;

        this.<weka.classifiers.rules.PART: boolean m_reducedErrorPruning> = 0;

        this.<weka.classifiers.rules.PART: int m_numFolds> = 3;

        this.<weka.classifiers.rules.PART: boolean m_binarySplits> = 0;

        this.<weka.classifiers.rules.PART: boolean m_unpruned> = 0;

        this.<weka.classifiers.rules.PART: int m_Seed> = 1;

        return;
    }

    public void setBinarySplits(boolean)
    {
        weka.classifiers.rules.PART this;
        boolean v;

        this := @this: weka.classifiers.rules.PART;

        v := @parameter0: boolean;

        this.<weka.classifiers.rules.PART: boolean m_binarySplits> = v;

        return;
    }

    public void setConfidenceFactor(float)
    {
        weka.classifiers.rules.PART this;
        float v;

        this := @this: weka.classifiers.rules.PART;

        v := @parameter0: float;

        this.<weka.classifiers.rules.PART: float m_CF> = v;

        return;
    }

    public void setDoNotMakeSplitPointActualValue(boolean)
    {
        weka.classifiers.rules.PART this;
        boolean m_doNotMakeSplitPointActualValue;

        this := @this: weka.classifiers.rules.PART;

        m_doNotMakeSplitPointActualValue := @parameter0: boolean;

        this.<weka.classifiers.rules.PART: boolean m_doNotMakeSplitPointActualValue> = m_doNotMakeSplitPointActualValue;

        return;
    }

    public void setMinNumObj(int)
    {
        weka.classifiers.rules.PART this;
        int v;

        this := @this: weka.classifiers.rules.PART;

        v := @parameter0: int;

        this.<weka.classifiers.rules.PART: int m_minNumObj> = v;

        return;
    }

    public void setNumFolds(int)
    {
        weka.classifiers.rules.PART this;
        int v;

        this := @this: weka.classifiers.rules.PART;

        v := @parameter0: int;

        this.<weka.classifiers.rules.PART: int m_numFolds> = v;

        return;
    }

    public void setReducedErrorPruning(boolean)
    {
        weka.classifiers.rules.PART this;
        boolean v;

        this := @this: weka.classifiers.rules.PART;

        v := @parameter0: boolean;

        this.<weka.classifiers.rules.PART: boolean m_reducedErrorPruning> = v;

        return;
    }

    public void setSeed(int)
    {
        weka.classifiers.rules.PART this;
        int newSeed;

        this := @this: weka.classifiers.rules.PART;

        newSeed := @parameter0: int;

        this.<weka.classifiers.rules.PART: int m_Seed> = newSeed;

        return;
    }

    public void setUnpruned(boolean)
    {
        weka.classifiers.rules.PART this;
        boolean newunpruned;

        this := @this: weka.classifiers.rules.PART;

        newunpruned := @parameter0: boolean;

        this.<weka.classifiers.rules.PART: boolean m_unpruned> = newunpruned;

        return;
    }

    public void setUseMDLcorrection(boolean)
    {
        weka.classifiers.rules.PART this;
        boolean newuseMDLcorrection;

        this := @this: weka.classifiers.rules.PART;

        newuseMDLcorrection := @parameter0: boolean;

        this.<weka.classifiers.rules.PART: boolean m_useMDLcorrection> = newuseMDLcorrection;

        return;
    }

    public void buildClassifier(weka.core.Instances) throws java.lang.Exception
    {
        weka.classifiers.rules.PART this;
        weka.core.Instances instances#1, $r1, instances#8;
        weka.core.Capabilities $r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        weka.classifiers.trees.j48.BinC45ModelSelection $r2, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        weka.classifiers.trees.j48.ModelSelection modSelection#21;
        weka.classifiers.trees.j48.C45ModelSelection $r3, $r9;
        weka.classifiers.rules.part.MakeDecList $r4, $r5, $r6, $r7;
        float $f0;
        double $d0;

        this := @this: weka.classifiers.rules.PART;

        instances#1 := @parameter0: weka.core.Instances;

        $r0 = virtualinvoke this.<weka.classifiers.rules.PART: weka.core.Capabilities getCapabilities()>();

        virtualinvoke $r0.<weka.core.Capabilities: void testWithFail(weka.core.Instances)>(instances#1);

        $r1 = new weka.core.Instances;

        specialinvoke $r1.<weka.core.Instances: void <init>(weka.core.Instances)>(instances#1);

        instances#8 = $r1;

        virtualinvoke instances#8.<weka.core.Instances: void deleteWithMissingClass()>();

        $z0 = this.<weka.classifiers.rules.PART: boolean m_binarySplits>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r2 = new weka.classifiers.trees.j48.BinC45ModelSelection;

        $i0 = this.<weka.classifiers.rules.PART: int m_minNumObj>;

        $z1 = this.<weka.classifiers.rules.PART: boolean m_useMDLcorrection>;

        $z2 = this.<weka.classifiers.rules.PART: boolean m_doNotMakeSplitPointActualValue>;

        specialinvoke $r2.<weka.classifiers.trees.j48.BinC45ModelSelection: void <init>(int,weka.core.Instances,boolean,boolean)>($i0, instances#8, $z1, $z2);

        modSelection#21 = $r2;

        goto label2;

     label1:
        $r3 = new weka.classifiers.trees.j48.C45ModelSelection;

        $i1 = this.<weka.classifiers.rules.PART: int m_minNumObj>;

        $z3 = this.<weka.classifiers.rules.PART: boolean m_useMDLcorrection>;

        $z4 = this.<weka.classifiers.rules.PART: boolean m_doNotMakeSplitPointActualValue>;

        specialinvoke $r3.<weka.classifiers.trees.j48.C45ModelSelection: void <init>(int,weka.core.Instances,boolean,boolean)>($i1, instances#8, $z3, $z4);

        modSelection#21 = $r3;

     label2:
        $z5 = this.<weka.classifiers.rules.PART: boolean m_unpruned>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label3;

        $r4 = new weka.classifiers.rules.part.MakeDecList;

        $i2 = this.<weka.classifiers.rules.PART: int m_minNumObj>;

        specialinvoke $r4.<weka.classifiers.rules.part.MakeDecList: void <init>(weka.classifiers.trees.j48.ModelSelection,int)>(modSelection#21, $i2);

        this.<weka.classifiers.rules.PART: weka.classifiers.rules.part.MakeDecList m_root> = $r4;

        goto label5;

     label3:
        $z6 = this.<weka.classifiers.rules.PART: boolean m_reducedErrorPruning>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label4;

        $r5 = new weka.classifiers.rules.part.MakeDecList;

        $i3 = this.<weka.classifiers.rules.PART: int m_numFolds>;

        $i4 = this.<weka.classifiers.rules.PART: int m_minNumObj>;

        $i5 = this.<weka.classifiers.rules.PART: int m_Seed>;

        specialinvoke $r5.<weka.classifiers.rules.part.MakeDecList: void <init>(weka.classifiers.trees.j48.ModelSelection,int,int,int)>(modSelection#21, $i3, $i4, $i5);

        this.<weka.classifiers.rules.PART: weka.classifiers.rules.part.MakeDecList m_root> = $r5;

        goto label5;

     label4:
        $r6 = new weka.classifiers.rules.part.MakeDecList;

        $f0 = this.<weka.classifiers.rules.PART: float m_CF>;

        $d0 = (double) $f0;

        $i6 = this.<weka.classifiers.rules.PART: int m_minNumObj>;

        specialinvoke $r6.<weka.classifiers.rules.part.MakeDecList: void <init>(weka.classifiers.trees.j48.ModelSelection,double,int)>(modSelection#21, $d0, $i6);

        this.<weka.classifiers.rules.PART: weka.classifiers.rules.part.MakeDecList m_root> = $r6;

     label5:
        $r7 = this.<weka.classifiers.rules.PART: weka.classifiers.rules.part.MakeDecList m_root>;

        virtualinvoke $r7.<weka.classifiers.rules.part.MakeDecList: void buildClassifier(weka.core.Instances)>(instances#8);

        $z7 = this.<weka.classifiers.rules.PART: boolean m_binarySplits>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 == 0 goto label6;

        $r8 = (weka.classifiers.trees.j48.BinC45ModelSelection) modSelection#21;

        virtualinvoke $r8.<weka.classifiers.trees.j48.BinC45ModelSelection: void cleanup()>();

        goto label7;

     label6:
        $r9 = (weka.classifiers.trees.j48.C45ModelSelection) modSelection#21;

        virtualinvoke $r9.<weka.classifiers.trees.j48.C45ModelSelection: void cleanup()>();

     label7:
        return;
    }

    public java.lang.String toString()
    {
        weka.classifiers.rules.PART this;
        weka.classifiers.rules.part.MakeDecList $r0, $r3;
        java.lang.StringBuilder $r1, $r2, $r5;
        java.lang.String $r4, $r6;

        this := @this: weka.classifiers.rules.PART;

        $r0 = this.<weka.classifiers.rules.PART: weka.classifiers.rules.part.MakeDecList m_root>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label1;

        return "No classifier built";

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PART decision list\n------------------\n\n");

        $r3 = this.<weka.classifiers.rules.PART: weka.classifiers.rules.part.MakeDecList m_root>;

        $r4 = virtualinvoke $r3.<weka.classifiers.rules.part.MakeDecList: java.lang.String toString()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public weka.core.Capabilities getCapabilities()
    {
        weka.classifiers.rules.PART this;
        weka.core.Capabilities result, $r0;
        weka.core.Capabilities$Capability $r1, $r2, $r3, $r4, $r5, $r6;

        this := @this: weka.classifiers.rules.PART;

        $r0 = new weka.core.Capabilities;

        specialinvoke $r0.<weka.core.Capabilities: void <init>(weka.core.CapabilitiesHandler)>(this);

        result = $r0;

        virtualinvoke result.<weka.core.Capabilities: void disableAll()>();

        $r1 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability NOMINAL_ATTRIBUTES>;

        virtualinvoke result.<weka.core.Capabilities: void enable(weka.core.Capabilities$Capability)>($r1);

        $r2 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability NUMERIC_ATTRIBUTES>;

        virtualinvoke result.<weka.core.Capabilities: void enable(weka.core.Capabilities$Capability)>($r2);

        $r3 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability DATE_ATTRIBUTES>;

        virtualinvoke result.<weka.core.Capabilities: void enable(weka.core.Capabilities$Capability)>($r3);

        $r4 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability MISSING_VALUES>;

        virtualinvoke result.<weka.core.Capabilities: void enable(weka.core.Capabilities$Capability)>($r4);

        $r5 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability NOMINAL_CLASS>;

        virtualinvoke result.<weka.core.Capabilities: void enable(weka.core.Capabilities$Capability)>($r5);

        $r6 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability MISSING_CLASS_VALUES>;

        virtualinvoke result.<weka.core.Capabilities: void enable(weka.core.Capabilities$Capability)>($r6);

        virtualinvoke result.<weka.core.Capabilities: void setMinimumNumberInstances(int)>(0);

        return result;
    }

    public final double[] distributionForInstance(weka.core.Instance) throws java.lang.Exception
    {
        weka.classifiers.rules.PART this;
        weka.core.Instance instance;
        weka.classifiers.rules.part.MakeDecList $r0;
        double[] $r1;

        this := @this: weka.classifiers.rules.PART;

        instance := @parameter0: weka.core.Instance;

        $r0 = this.<weka.classifiers.rules.PART: weka.classifiers.rules.part.MakeDecList m_root>;

        $r1 = virtualinvoke $r0.<weka.classifiers.rules.part.MakeDecList: double[] distributionForInstance(weka.core.Instance)>(instance);

        return $r1;
    }

    public void setOptions(java.lang.String[]) throws java.lang.Exception
    {
        weka.classifiers.rules.PART this;
        java.lang.String[] options;

        this := @this: weka.classifiers.rules.PART;

        options := @parameter0: java.lang.String[];

        return;
    }

    public java.util.Enumeration listOptions()
    {
        weka.classifiers.rules.PART this;
        java.util.Vector newVector, $r0;
        weka.core.Option $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        java.util.Enumeration $r10, $r12;
        java.util.ArrayList $r11;

        this := @this: weka.classifiers.rules.PART;

        $r0 = new java.util.Vector;

        specialinvoke $r0.<java.util.Vector: void <init>(int)>(8);

        newVector = $r0;

        $r1 = new weka.core.Option;

        specialinvoke $r1.<weka.core.Option: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>("\tSet confidence threshold for pruning.\n\t(default 0.25)", "C", 1, "-C <pruning confidence>");

        virtualinvoke newVector.<java.util.Vector: void addElement(java.lang.Object)>($r1);

        $r2 = new weka.core.Option;

        specialinvoke $r2.<weka.core.Option: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>("\tSet minimum number of objects per leaf.\n\t(default 2)", "M", 1, "-M <minimum number of objects>");

        virtualinvoke newVector.<java.util.Vector: void addElement(java.lang.Object)>($r2);

        $r3 = new weka.core.Option;

        specialinvoke $r3.<weka.core.Option: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>("\tUse reduced error pruning.", "R", 0, "-R");

        virtualinvoke newVector.<java.util.Vector: void addElement(java.lang.Object)>($r3);

        $r4 = new weka.core.Option;

        specialinvoke $r4.<weka.core.Option: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>("\tSet number of folds for reduced error\n\tpruning. One fold is used as pruning set.\n\t(default 3)", "N", 1, "-N <number of folds>");

        virtualinvoke newVector.<java.util.Vector: void addElement(java.lang.Object)>($r4);

        $r5 = new weka.core.Option;

        specialinvoke $r5.<weka.core.Option: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>("\tUse binary splits only.", "B", 0, "-B");

        virtualinvoke newVector.<java.util.Vector: void addElement(java.lang.Object)>($r5);

        $r6 = new weka.core.Option;

        specialinvoke $r6.<weka.core.Option: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>("\tGenerate unpruned decision list.", "U", 0, "-U");

        virtualinvoke newVector.<java.util.Vector: void addElement(java.lang.Object)>($r6);

        $r7 = new weka.core.Option;

        specialinvoke $r7.<weka.core.Option: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>("\tDo not use MDL correction for info gain on numeric attributes.", "J", 0, "-J");

        virtualinvoke newVector.<java.util.Vector: void addElement(java.lang.Object)>($r7);

        $r8 = new weka.core.Option;

        specialinvoke $r8.<weka.core.Option: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>("\tSeed for random data shuffling (default 1).", "Q", 1, "-Q <seed>");

        virtualinvoke newVector.<java.util.Vector: void addElement(java.lang.Object)>($r8);

        $r9 = new weka.core.Option;

        specialinvoke $r9.<weka.core.Option: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>("\tDo not make split point actual value.", "-doNotMakeSplitPointActualValue", 0, "-doNotMakeSplitPointActualValue");

        virtualinvoke newVector.<java.util.Vector: void addElement(java.lang.Object)>($r9);

        $r10 = specialinvoke this.<weka.classifiers.AbstractClassifier: java.util.Enumeration listOptions()>();

        $r11 = staticinvoke <java.util.Collections: java.util.ArrayList list(java.util.Enumeration)>($r10);

        virtualinvoke newVector.<java.util.Vector: boolean addAll(java.util.Collection)>($r11);

        $r12 = virtualinvoke newVector.<java.util.Vector: java.util.Enumeration elements()>();

        return $r12;
    }


