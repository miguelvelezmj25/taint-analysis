    void <init>(kanzi.util.QuadTreeGenerator$Node, int, int, int, int, boolean, kanzi.util.QuadTreeGenerator$1)
    {
        kanzi.util.QuadTreeGenerator$Node this, x0;
        int x1, x2, x3, x4;
        boolean x5;
        kanzi.util.QuadTreeGenerator$1 x6;

        this := @this: kanzi.util.QuadTreeGenerator$Node;

        x0 := @parameter0: kanzi.util.QuadTreeGenerator$Node;

        x1 := @parameter1: int;

        x2 := @parameter2: int;

        x3 := @parameter3: int;

        x4 := @parameter4: int;

        x5 := @parameter5: boolean;

        x6 := @parameter6: kanzi.util.QuadTreeGenerator$1;

        specialinvoke this.<kanzi.util.QuadTreeGenerator$Node: void <init>(kanzi.util.QuadTreeGenerator$Node,int,int,int,int,boolean)>(x0, x1, x2, x3, x4, x5);

        return;
    }

    private void <init>(kanzi.util.QuadTreeGenerator$Node, int, int, int, int, boolean)
    {
        kanzi.util.QuadTreeGenerator$Node this, parent;
        int x, y, w, h;
        boolean isRGB;

        this := @this: kanzi.util.QuadTreeGenerator$Node;

        parent := @parameter0: kanzi.util.QuadTreeGenerator$Node;

        x := @parameter1: int;

        y := @parameter2: int;

        w := @parameter3: int;

        h := @parameter4: int;

        isRGB := @parameter5: boolean;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<kanzi.util.QuadTreeGenerator$Node: kanzi.util.QuadTreeGenerator$Node parent> = parent;

        this.<kanzi.util.QuadTreeGenerator$Node: int x> = x;

        this.<kanzi.util.QuadTreeGenerator$Node: int y> = y;

        this.<kanzi.util.QuadTreeGenerator$Node: int w> = w;

        this.<kanzi.util.QuadTreeGenerator$Node: int h> = h;

        this.<kanzi.util.QuadTreeGenerator$Node: boolean isRGB> = isRGB;

        return;
    }

    public int computeVariance(int[], int)
    {
        kanzi.util.QuadTreeGenerator$Node this;
        int[] buffer;
        int stride, $i0;
        boolean $z0;

        this := @this: kanzi.util.QuadTreeGenerator$Node;

        buffer := @parameter0: int[];

        stride := @parameter1: int;

        $z0 = this.<kanzi.util.QuadTreeGenerator$Node: boolean isRGB>;

        if $z0 != 1 goto label1;

        $i0 = specialinvoke this.<kanzi.util.QuadTreeGenerator$Node: int computeVarianceRGB(int[],int)>(buffer, stride);

        goto label2;

     label1:
        $i0 = specialinvoke this.<kanzi.util.QuadTreeGenerator$Node: int computeVarianceY(int[],int)>(buffer, stride);

     label2:
        return $i0;
    }

    private int computeVarianceRGB(int[], int)
    {
        kanzi.util.QuadTreeGenerator$Node this;
        int[] rgb;
        int stride, iend, jend, len, pixel, r, g, b, $i0, $i1, $i2, $i3, $i4, $i5, $i6, offs#32, j#35, i#40, $i7, $i8, $i9, $i13, $i15, $i17, $i30, $i33, $i34;
        long vR, vG, vB, sq_sumR#17, sq_sumB#19, sq_sumG#21, sumR#23, sumG#25, sumB#27, $l10, $l11, $l12, $l14, $l16, $l18, $l19, $l20, $l21, $l22, $l23, $l24, $l25, $l26, $l27, $l28, $l29, $l31, $l32;

        this := @this: kanzi.util.QuadTreeGenerator$Node;

        rgb := @parameter0: int[];

        stride := @parameter1: int;

        $i0 = this.<kanzi.util.QuadTreeGenerator$Node: int x>;

        $i1 = this.<kanzi.util.QuadTreeGenerator$Node: int w>;

        iend = $i0 + $i1;

        $i2 = this.<kanzi.util.QuadTreeGenerator$Node: int y>;

        $i3 = this.<kanzi.util.QuadTreeGenerator$Node: int h>;

        jend = $i2 + $i3;

        $i4 = this.<kanzi.util.QuadTreeGenerator$Node: int w>;

        $i5 = this.<kanzi.util.QuadTreeGenerator$Node: int h>;

        len = $i4 * $i5;

        sq_sumR#17 = 0L;

        sq_sumB#19 = 0L;

        sq_sumG#21 = 0L;

        sumR#23 = 0L;

        sumG#25 = 0L;

        sumB#27 = 0L;

        $i6 = this.<kanzi.util.QuadTreeGenerator$Node: int y>;

        offs#32 = $i6 * stride;

        j#35 = this.<kanzi.util.QuadTreeGenerator$Node: int y>;

     label1:
        if j#35 >= jend goto label4;

        i#40 = this.<kanzi.util.QuadTreeGenerator$Node: int x>;

     label2:
        if i#40 >= iend goto label3;

        $i7 = offs#32 + i#40;

        pixel = rgb[$i7];

        $i8 = pixel >> 16;

        r = $i8 & 255;

        $i9 = pixel >> 8;

        g = $i9 & 255;

        b = pixel & 255;

        $l10 = (long) r;

        sumR#23 = sumR#23 + $l10;

        $l11 = (long) g;

        sumG#25 = sumG#25 + $l11;

        $l12 = (long) b;

        sumB#27 = sumB#27 + $l12;

        $i13 = r * r;

        $l14 = (long) $i13;

        sq_sumR#17 = sq_sumR#17 + $l14;

        $i15 = g * g;

        $l16 = (long) $i15;

        sq_sumG#21 = sq_sumG#21 + $l16;

        $i17 = b * b;

        $l18 = (long) $i17;

        sq_sumB#19 = sq_sumB#19 + $l18;

        i#40 = i#40 + 1;

        goto label2;

     label3:
        offs#32 = offs#32 + stride;

        j#35 = j#35 + 1;

        goto label1;

     label4:
        $l19 = sumR#23 * sumR#23;

        $l20 = (long) len;

        $l21 = $l19 / $l20;

        vR = sq_sumR#17 - $l21;

        $l22 = sumG#25 * sumG#25;

        $l23 = (long) len;

        $l24 = $l22 / $l23;

        vG = sq_sumG#21 - $l24;

        $l25 = sumB#27 * sumB#27;

        $l26 = (long) len;

        $l27 = $l25 / $l26;

        vB = sq_sumB#19 - $l27;

        $l28 = vR + vG;

        $l29 = $l28 + vB;

        $i30 = 3 * len;

        $l31 = (long) $i30;

        $l32 = $l29 / $l31;

        $i33 = (int) $l32;

        this.<kanzi.util.QuadTreeGenerator$Node: int variance> = $i33;

        $i34 = this.<kanzi.util.QuadTreeGenerator$Node: int variance>;

        return $i34;
    }

    private int computeVarianceY(int[], int)
    {
        kanzi.util.QuadTreeGenerator$Node this;
        int[] yBuffer;
        int stride, iend, jend, len, pixel, $i0, $i1, $i2, $i3, $i4, $i5, $i6, offs#24, j#27, i#32, $i7, $i9, $i17, $i18;
        long sq_sum#17, sum#19, $l8, $l10, $l11, $l12, $l13, $l14, $l15, $l16;

        this := @this: kanzi.util.QuadTreeGenerator$Node;

        yBuffer := @parameter0: int[];

        stride := @parameter1: int;

        $i0 = this.<kanzi.util.QuadTreeGenerator$Node: int x>;

        $i1 = this.<kanzi.util.QuadTreeGenerator$Node: int w>;

        iend = $i0 + $i1;

        $i2 = this.<kanzi.util.QuadTreeGenerator$Node: int y>;

        $i3 = this.<kanzi.util.QuadTreeGenerator$Node: int h>;

        jend = $i2 + $i3;

        $i4 = this.<kanzi.util.QuadTreeGenerator$Node: int w>;

        $i5 = this.<kanzi.util.QuadTreeGenerator$Node: int h>;

        len = $i4 * $i5;

        sq_sum#17 = 0L;

        sum#19 = 0L;

        $i6 = this.<kanzi.util.QuadTreeGenerator$Node: int y>;

        offs#24 = $i6 * stride;

        j#27 = this.<kanzi.util.QuadTreeGenerator$Node: int y>;

     label1:
        if j#27 >= jend goto label4;

        i#32 = this.<kanzi.util.QuadTreeGenerator$Node: int x>;

     label2:
        if i#32 >= iend goto label3;

        $i7 = offs#24 + i#32;

        pixel = yBuffer[$i7];

        $l8 = (long) pixel;

        sum#19 = sum#19 + $l8;

        $i9 = pixel * pixel;

        $l10 = (long) $i9;

        sq_sum#17 = sq_sum#17 + $l10;

        i#32 = i#32 + 1;

        goto label2;

     label3:
        offs#24 = offs#24 + stride;

        j#27 = j#27 + 1;

        goto label1;

     label4:
        $l11 = sum#19 * sum#19;

        $l12 = (long) len;

        $l13 = $l11 / $l12;

        $l14 = sq_sum#17 - $l13;

        $l15 = (long) len;

        $l16 = $l14 / $l15;

        $i17 = (int) $l16;

        this.<kanzi.util.QuadTreeGenerator$Node: int variance> = $i17;

        $i18 = this.<kanzi.util.QuadTreeGenerator$Node: int variance>;

        return $i18;
    }


