    static void <clinit>()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node $r0;

        $r0 = new java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;

        specialinvoke $r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: void <init>()>();

        <java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node SHARED> = $r0;

        <java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node EXCLUSIVE> = null;

        return;
    }

    void <init>()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node l0;

        l0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        return;
    }

    final java.util.concurrent.locks.AbstractQueuedSynchronizer$Node predecessor() throws java.lang.NullPointerException
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node l0, l1;
        java.lang.NullPointerException $r0;

        l0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;

        l1 = l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node prev>;

        if l1 != null goto label1;

        $r0 = new java.lang.NullPointerException;

        specialinvoke $r0.<java.lang.NullPointerException: void <init>()>();

        throw $r0;

     label1:
        return l1;
    }

    void <init>(java.lang.Thread, java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node l0, l2;
        java.lang.Thread l1;

        l0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;

        l1 := @parameter0: java.lang.Thread;

        l2 := @parameter1: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node nextWaiter> = l2;

        l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.lang.Thread thread> = l1;

        return;
    }


