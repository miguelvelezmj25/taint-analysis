    static void <clinit>()
    {
        sun.misc.Unsafe $r0, $r1, $r3, $r5;
        java.lang.Class l0#3;
        java.lang.reflect.Field $r2, $r4, $r6;
        long $l0, $l1, $l2;
        java.lang.Exception $r7, l0#20;
        java.lang.Error $r8;

     label1:
        $r0 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE> = $r0;

        l0#3 = class "java/util/concurrent/FutureTask";

        $r1 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;

        $r2 = virtualinvoke l0#3.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("state");

        $l0 = virtualinvoke $r1.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r2);

        <java.util.concurrent.FutureTask: long stateOffset> = $l0;

        $r3 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;

        $r4 = virtualinvoke l0#3.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("runner");

        $l1 = virtualinvoke $r3.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r4);

        <java.util.concurrent.FutureTask: long runnerOffset> = $l1;

        $r5 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;

        $r6 = virtualinvoke l0#3.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("waiters");

        $l2 = virtualinvoke $r5.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r6);

        <java.util.concurrent.FutureTask: long waitersOffset> = $l2;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        l0#20 = $r7;

        $r8 = new java.lang.Error;

        specialinvoke $r8.<java.lang.Error: void <init>(java.lang.Throwable)>(l0#20);

        throw $r8;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void <init>(java.util.concurrent.Callable)
    {
        java.util.concurrent.FutureTask l0;
        java.util.concurrent.Callable l1;
        java.lang.NullPointerException $r0;

        l0 := @this: java.util.concurrent.FutureTask;

        l1 := @parameter0: java.util.concurrent.Callable;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        if l1 != null goto label1;

        $r0 = new java.lang.NullPointerException;

        specialinvoke $r0.<java.lang.NullPointerException: void <init>()>();

        throw $r0;

     label1:
        l0.<java.util.concurrent.FutureTask: java.util.concurrent.Callable callable> = l1;

        l0.<java.util.concurrent.FutureTask: int state> = 0;

        return;
    }

    public void run()
    {
        java.util.concurrent.FutureTask l0;
        long $l0;
        java.lang.Thread $r0;
        java.lang.Throwable l4, l5, $r2, $r3;
        int l6, $i1, $i2, l1#29;
        sun.misc.Unsafe $r1;
        boolean $z0, l3#16;
        java.util.concurrent.Callable l1#8;
        java.lang.Object l2#14;

        l0 := @this: java.util.concurrent.FutureTask;

        $i1 = l0.<java.util.concurrent.FutureTask: int state>;

        if $i1 != 0 goto label01;

        $r1 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.FutureTask: long runnerOffset>;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z0 = virtualinvoke $r1.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(l0, $l0, null, $r0);

        if $z0 != 0 goto label02;

     label01:
        return;

     label02:
        l1#8 = l0.<java.util.concurrent.FutureTask: java.util.concurrent.Callable callable>;

        if l1#8 == null goto label07;

        $i2 = l0.<java.util.concurrent.FutureTask: int state>;

        if $i2 != 0 goto label07;

     label03:
        l2#14 = interfaceinvoke l1#8.<java.util.concurrent.Callable: java.lang.Object call()>();

        l3#16 = 1;

     label04:
        goto label06;

     label05:
        $r2 := @caughtexception;

        l4 = $r2;

        l2#14 = null;

        l3#16 = 0;

        virtualinvoke l0.<java.util.concurrent.FutureTask: void setException(java.lang.Throwable)>(l4);

     label06:
        if l3#16 == 0 goto label07;

        virtualinvoke l0.<java.util.concurrent.FutureTask: void set(java.lang.Object)>(l2#14);

     label07:
        l0.<java.util.concurrent.FutureTask: java.lang.Thread runner> = null;

        l1#29 = l0.<java.util.concurrent.FutureTask: int state>;

        if l1#29 < 5 goto label08;

        specialinvoke l0.<java.util.concurrent.FutureTask: void handlePossibleCancellationInterrupt(int)>(l1#29);

     label08:
        goto label13;

     label09:
        $r3 := @caughtexception;

     label10:
        l5 = $r3;

     label11:
        l0.<java.util.concurrent.FutureTask: java.lang.Thread runner> = null;

        l6 = l0.<java.util.concurrent.FutureTask: int state>;

        if l6 < 5 goto label12;

        specialinvoke l0.<java.util.concurrent.FutureTask: void handlePossibleCancellationInterrupt(int)>(l6);

     label12:
        throw l5;

     label13:
        return;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label02 to label07 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    protected void setException(java.lang.Throwable)
    {
        java.util.concurrent.FutureTask l0;
        java.lang.Throwable l1;
        sun.misc.Unsafe $r0, $r1;
        long $l0, $l1;
        boolean $z0;

        l0 := @this: java.util.concurrent.FutureTask;

        l1 := @parameter0: java.lang.Throwable;

        $r0 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.FutureTask: long stateOffset>;

        $z0 = virtualinvoke $r0.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(l0, $l0, 0, 1);

        if $z0 == 0 goto label1;

        l0.<java.util.concurrent.FutureTask: java.lang.Object outcome> = l1;

        $r1 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;

        $l1 = <java.util.concurrent.FutureTask: long stateOffset>;

        virtualinvoke $r1.<sun.misc.Unsafe: void putOrderedInt(java.lang.Object,long,int)>(l0, $l1, 3);

        specialinvoke l0.<java.util.concurrent.FutureTask: void finishCompletion()>();

     label1:
        return;
    }

    protected void set(java.lang.Object)
    {
        java.util.concurrent.FutureTask l0;
        java.lang.Object l1;
        sun.misc.Unsafe $r0, $r1;
        long $l0, $l1;
        boolean $z0;

        l0 := @this: java.util.concurrent.FutureTask;

        l1 := @parameter0: java.lang.Object;

        $r0 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.FutureTask: long stateOffset>;

        $z0 = virtualinvoke $r0.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(l0, $l0, 0, 1);

        if $z0 == 0 goto label1;

        l0.<java.util.concurrent.FutureTask: java.lang.Object outcome> = l1;

        $r1 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;

        $l1 = <java.util.concurrent.FutureTask: long stateOffset>;

        virtualinvoke $r1.<sun.misc.Unsafe: void putOrderedInt(java.lang.Object,long,int)>(l0, $l1, 2);

        specialinvoke l0.<java.util.concurrent.FutureTask: void finishCompletion()>();

     label1:
        return;
    }

    private void handlePossibleCancellationInterrupt(int)
    {
        java.util.concurrent.FutureTask l0;
        int l1, $i0;

        l0 := @this: java.util.concurrent.FutureTask;

        l1 := @parameter0: int;

        if l1 != 5 goto label2;

     label1:
        $i0 = l0.<java.util.concurrent.FutureTask: int state>;

        if $i0 != 5 goto label2;

        staticinvoke <java.lang.Thread: void yield()>();

        goto label1;

     label2:
        return;
    }

    private void finishCompletion()
    {
        java.util.concurrent.FutureTask l0;
        long $l0;
        java.lang.Thread l2;
        java.util.concurrent.FutureTask$WaitNode l3, $r0, l1#4;
        sun.misc.Unsafe $r1;
        boolean $z0;

        l0 := @this: java.util.concurrent.FutureTask;

     label1:
        $r0 = l0.<java.util.concurrent.FutureTask: java.util.concurrent.FutureTask$WaitNode waiters>;

        l1#4 = $r0;

        if $r0 == null goto label5;

        $r1 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.FutureTask: long waitersOffset>;

        $z0 = virtualinvoke $r1.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(l0, $l0, l1#4, null);

        if $z0 == 0 goto label1;

     label2:
        l2 = l1#4.<java.util.concurrent.FutureTask$WaitNode: java.lang.Thread thread>;

        if l2 == null goto label3;

        l1#4.<java.util.concurrent.FutureTask$WaitNode: java.lang.Thread thread> = null;

        staticinvoke <java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>(l2);

     label3:
        l3 = l1#4.<java.util.concurrent.FutureTask$WaitNode: java.util.concurrent.FutureTask$WaitNode next>;

        if l3 != null goto label4;

        goto label5;

     label4:
        l1#4.<java.util.concurrent.FutureTask$WaitNode: java.util.concurrent.FutureTask$WaitNode next> = null;

        l1#4 = l3;

        goto label2;

     label5:
        virtualinvoke l0.<java.util.concurrent.FutureTask: void done()>();

        l0.<java.util.concurrent.FutureTask: java.util.concurrent.Callable callable> = null;

        return;
    }

    protected void done()
    {
        java.util.concurrent.FutureTask l0;

        l0 := @this: java.util.concurrent.FutureTask;

        return;
    }

    public boolean cancel(boolean)
    {
        java.util.concurrent.FutureTask l0;
        boolean l1, $z0;
        java.lang.Thread l2;
        java.lang.Throwable l3, l4, $r3, $r5;
        int $i0;
        sun.misc.Unsafe $r0, $r2, $r4;
        long $l1, $l4, $l5;
        byte $b3;

        l0 := @this: java.util.concurrent.FutureTask;

        l1 := @parameter0: boolean;

        $i0 = l0.<java.util.concurrent.FutureTask: int state>;

        if $i0 != 0 goto label03;

        $r0 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;

        $l1 = <java.util.concurrent.FutureTask: long stateOffset>;

        if l1 == 0 goto label01;

        $b3 = 5;

        goto label02;

     label01:
        $b3 = 4;

     label02:
        $z0 = virtualinvoke $r0.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(l0, $l1, 0, $b3);

        if $z0 != 0 goto label04;

     label03:
        return 0;

     label04:
        if l1 == 0 goto label08;

     label05:
        l2 = l0.<java.util.concurrent.FutureTask: java.lang.Thread runner>;

        if l2 == null goto label06;

        virtualinvoke l2.<java.lang.Thread: void interrupt()>();

     label06:
        $r2 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;

        $l4 = <java.util.concurrent.FutureTask: long stateOffset>;

        virtualinvoke $r2.<sun.misc.Unsafe: void putOrderedInt(java.lang.Object,long,int)>(l0, $l4, 6);

        goto label08;

     label07:
        $r3 := @caughtexception;

        l3 = $r3;

        $r4 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;

        $l5 = <java.util.concurrent.FutureTask: long stateOffset>;

        virtualinvoke $r4.<sun.misc.Unsafe: void putOrderedInt(java.lang.Object,long,int)>(l0, $l5, 6);

        throw l3;

     label08:
        specialinvoke l0.<java.util.concurrent.FutureTask: void finishCompletion()>();

        goto label12;

     label09:
        $r5 := @caughtexception;

     label10:
        l4 = $r5;

     label11:
        specialinvoke l0.<java.util.concurrent.FutureTask: void finishCompletion()>();

        throw l4;

     label12:
        return 1;

        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label04 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public boolean isDone()
    {
        java.util.concurrent.FutureTask l0;
        int $i0;
        boolean $z0;

        l0 := @this: java.util.concurrent.FutureTask;

        $i0 = l0.<java.util.concurrent.FutureTask: int state>;

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Object get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
    {
        java.util.concurrent.FutureTask l0;
        int l1#3;
        java.lang.Object $r0;

        l0 := @this: java.util.concurrent.FutureTask;

        l1#3 = l0.<java.util.concurrent.FutureTask: int state>;

        if l1#3 > 1 goto label1;

        l1#3 = specialinvoke l0.<java.util.concurrent.FutureTask: int awaitDone(boolean,long)>(0, 0L);

     label1:
        $r0 = specialinvoke l0.<java.util.concurrent.FutureTask: java.lang.Object report(int)>(l1#3);

        return $r0;
    }

    private int awaitDone(boolean, long) throws java.lang.InterruptedException
    {
        java.util.concurrent.FutureTask l0;
        boolean l1, l7#9, $z0;
        long l4, l2#1, $l0, $l1, $l2, $l3, l2#43;
        int l8, $i5;
        java.util.concurrent.FutureTask$WaitNode $r0, l6#7, $r2;
        java.lang.InterruptedException $r1;
        sun.misc.Unsafe $r3;
        byte $b4;

        l0 := @this: java.util.concurrent.FutureTask;

        l1 := @parameter0: boolean;

        l2#1 := @parameter1: long;

        if l1 == 0 goto label01;

        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        $l1 = $l0 + l2#1;

        goto label02;

     label01:
        $l1 = 0L;

     label02:
        l4 = $l1;

        l6#7 = null;

        l7#9 = 0;

     label03:
        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z0 == 0 goto label04;

        specialinvoke l0.<java.util.concurrent.FutureTask: void removeWaiter(java.util.concurrent.FutureTask$WaitNode)>(l6#7);

        $r1 = new java.lang.InterruptedException;

        specialinvoke $r1.<java.lang.InterruptedException: void <init>()>();

        throw $r1;

     label04:
        l8 = l0.<java.util.concurrent.FutureTask: int state>;

        if l8 <= 1 goto label06;

        if l6#7 == null goto label05;

        l6#7.<java.util.concurrent.FutureTask$WaitNode: java.lang.Thread thread> = null;

     label05:
        return l8;

     label06:
        if l8 != 1 goto label07;

        staticinvoke <java.lang.Thread: void yield()>();

        goto label12;

     label07:
        if l6#7 != null goto label08;

        $r2 = new java.util.concurrent.FutureTask$WaitNode;

        specialinvoke $r2.<java.util.concurrent.FutureTask$WaitNode: void <init>()>();

        l6#7 = $r2;

        goto label12;

     label08:
        if l7#9 != 0 goto label09;

        $r3 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;

        $l2 = <java.util.concurrent.FutureTask: long waitersOffset>;

        $r0 = l0.<java.util.concurrent.FutureTask: java.util.concurrent.FutureTask$WaitNode waiters>;

        l6#7.<java.util.concurrent.FutureTask$WaitNode: java.util.concurrent.FutureTask$WaitNode next> = $r0;

        l7#9 = virtualinvoke $r3.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(l0, $l2, $r0, l6#7);

        goto label12;

     label09:
        if l1 == 0 goto label11;

        $l3 = staticinvoke <java.lang.System: long nanoTime()>();

        l2#43 = l4 - $l3;

        $b4 = l2#43 cmp 0L;

        if $b4 > 0 goto label10;

        specialinvoke l0.<java.util.concurrent.FutureTask: void removeWaiter(java.util.concurrent.FutureTask$WaitNode)>(l6#7);

        $i5 = l0.<java.util.concurrent.FutureTask: int state>;

        return $i5;

     label10:
        staticinvoke <java.util.concurrent.locks.LockSupport: void parkNanos(java.lang.Object,long)>(l0, l2#43);

        goto label12;

     label11:
        staticinvoke <java.util.concurrent.locks.LockSupport: void park(java.lang.Object)>(l0);

     label12:
        goto label03;
    }

    private java.lang.Object report(int) throws java.util.concurrent.ExecutionException
    {
        java.util.concurrent.FutureTask l0;
        int l1;
        java.lang.Object l2;
        java.util.concurrent.CancellationException $r0;
        java.util.concurrent.ExecutionException $r1;
        java.lang.Throwable $r2;

        l0 := @this: java.util.concurrent.FutureTask;

        l1 := @parameter0: int;

        l2 = l0.<java.util.concurrent.FutureTask: java.lang.Object outcome>;

        if l1 != 2 goto label1;

        return l2;

     label1:
        if l1 < 4 goto label2;

        $r0 = new java.util.concurrent.CancellationException;

        specialinvoke $r0.<java.util.concurrent.CancellationException: void <init>()>();

        throw $r0;

     label2:
        $r1 = new java.util.concurrent.ExecutionException;

        $r2 = (java.lang.Throwable) l2;

        specialinvoke $r1.<java.util.concurrent.ExecutionException: void <init>(java.lang.Throwable)>($r2);

        throw $r1;
    }

    private void removeWaiter(java.util.concurrent.FutureTask$WaitNode)
    {
        java.util.concurrent.FutureTask l0;
        java.util.concurrent.FutureTask$WaitNode l1, l4, l2#5, l3#8;
        long $l0;
        java.lang.Thread $r0, $r1;
        sun.misc.Unsafe $r2;
        boolean $z0;

        l0 := @this: java.util.concurrent.FutureTask;

        l1 := @parameter0: java.util.concurrent.FutureTask$WaitNode;

        if l1 == null goto label7;

        l1.<java.util.concurrent.FutureTask$WaitNode: java.lang.Thread thread> = null;

     label1:
        l2#5 = null;

        l3#8 = l0.<java.util.concurrent.FutureTask: java.util.concurrent.FutureTask$WaitNode waiters>;

     label2:
        if l3#8 == null goto label6;

        l4 = l3#8.<java.util.concurrent.FutureTask$WaitNode: java.util.concurrent.FutureTask$WaitNode next>;

        $r0 = l3#8.<java.util.concurrent.FutureTask$WaitNode: java.lang.Thread thread>;

        if $r0 == null goto label3;

        l2#5 = l3#8;

        goto label5;

     label3:
        if l2#5 == null goto label4;

        l2#5.<java.util.concurrent.FutureTask$WaitNode: java.util.concurrent.FutureTask$WaitNode next> = l4;

        $r1 = l2#5.<java.util.concurrent.FutureTask$WaitNode: java.lang.Thread thread>;

        if $r1 != null goto label5;

        goto label1;

     label4:
        $r2 = <java.util.concurrent.FutureTask: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.FutureTask: long waitersOffset>;

        $z0 = virtualinvoke $r2.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(l0, $l0, l3#8, l4);

        if $z0 != 0 goto label5;

        goto label1;

     label5:
        l3#8 = l4;

        goto label2;

     label6:
        goto label7;

     label7:
        return;
    }


