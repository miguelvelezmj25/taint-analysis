    static void <clinit>()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[2];

        $r0[0] = "negative";

        $r0[1] = "positive";

        <weka.classifiers.evaluation.TwoClassStats: java.lang.String[] CATEGORY_NAMES> = $r0;

        return;
    }

    public void <init>(double, double, double, double)
    {
        weka.classifiers.evaluation.TwoClassStats this;
        double tp, fp, tn, fn;

        this := @this: weka.classifiers.evaluation.TwoClassStats;

        tp := @parameter0: double;

        fp := @parameter1: double;

        tn := @parameter2: double;

        fn := @parameter3: double;

        specialinvoke this.<java.lang.Object: void <init>()>();

        virtualinvoke this.<weka.classifiers.evaluation.TwoClassStats: void setTruePositive(double)>(tp);

        virtualinvoke this.<weka.classifiers.evaluation.TwoClassStats: void setFalsePositive(double)>(fp);

        virtualinvoke this.<weka.classifiers.evaluation.TwoClassStats: void setTrueNegative(double)>(tn);

        virtualinvoke this.<weka.classifiers.evaluation.TwoClassStats: void setFalseNegative(double)>(fn);

        return;
    }

    public void setTruePositive(double)
    {
        weka.classifiers.evaluation.TwoClassStats this;
        double tp;

        this := @this: weka.classifiers.evaluation.TwoClassStats;

        tp := @parameter0: double;

        this.<weka.classifiers.evaluation.TwoClassStats: double m_TruePos> = tp;

        return;
    }

    public void setFalsePositive(double)
    {
        weka.classifiers.evaluation.TwoClassStats this;
        double fp;

        this := @this: weka.classifiers.evaluation.TwoClassStats;

        fp := @parameter0: double;

        this.<weka.classifiers.evaluation.TwoClassStats: double m_FalsePos> = fp;

        return;
    }

    public void setTrueNegative(double)
    {
        weka.classifiers.evaluation.TwoClassStats this;
        double tn;

        this := @this: weka.classifiers.evaluation.TwoClassStats;

        tn := @parameter0: double;

        this.<weka.classifiers.evaluation.TwoClassStats: double m_TrueNeg> = tn;

        return;
    }

    public void setFalseNegative(double)
    {
        weka.classifiers.evaluation.TwoClassStats this;
        double fn;

        this := @this: weka.classifiers.evaluation.TwoClassStats;

        fn := @parameter0: double;

        this.<weka.classifiers.evaluation.TwoClassStats: double m_FalseNeg> = fn;

        return;
    }

    public double getTruePositive()
    {
        weka.classifiers.evaluation.TwoClassStats this;
        double $d0;

        this := @this: weka.classifiers.evaluation.TwoClassStats;

        $d0 = this.<weka.classifiers.evaluation.TwoClassStats: double m_TruePos>;

        return $d0;
    }

    public double getFalseNegative()
    {
        weka.classifiers.evaluation.TwoClassStats this;
        double $d0;

        this := @this: weka.classifiers.evaluation.TwoClassStats;

        $d0 = this.<weka.classifiers.evaluation.TwoClassStats: double m_FalseNeg>;

        return $d0;
    }

    public double getFalsePositive()
    {
        weka.classifiers.evaluation.TwoClassStats this;
        double $d0;

        this := @this: weka.classifiers.evaluation.TwoClassStats;

        $d0 = this.<weka.classifiers.evaluation.TwoClassStats: double m_FalsePos>;

        return $d0;
    }

    public double getTrueNegative()
    {
        weka.classifiers.evaluation.TwoClassStats this;
        double $d0;

        this := @this: weka.classifiers.evaluation.TwoClassStats;

        $d0 = this.<weka.classifiers.evaluation.TwoClassStats: double m_TrueNeg>;

        return $d0;
    }

    public double getFalsePositiveRate()
    {
        weka.classifiers.evaluation.TwoClassStats this;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        byte $b0;

        this := @this: weka.classifiers.evaluation.TwoClassStats;

        $d0 = this.<weka.classifiers.evaluation.TwoClassStats: double m_FalsePos>;

        $d1 = this.<weka.classifiers.evaluation.TwoClassStats: double m_TrueNeg>;

        $d2 = $d0 + $d1;

        $b0 = 0.0 cmpl $d2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 != 0 goto label1;

        return 0.0;

     label1:
        $d3 = this.<weka.classifiers.evaluation.TwoClassStats: double m_FalsePos>;

        $d4 = this.<weka.classifiers.evaluation.TwoClassStats: double m_FalsePos>;

        $d5 = this.<weka.classifiers.evaluation.TwoClassStats: double m_TrueNeg>;

        $d6 = $d4 + $d5;

        $d7 = $d3 / $d6;

        return $d7;
    }

    public double getTruePositiveRate()
    {
        weka.classifiers.evaluation.TwoClassStats this;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        byte $b0;

        this := @this: weka.classifiers.evaluation.TwoClassStats;

        $d0 = this.<weka.classifiers.evaluation.TwoClassStats: double m_TruePos>;

        $d1 = this.<weka.classifiers.evaluation.TwoClassStats: double m_FalseNeg>;

        $d2 = $d0 + $d1;

        $b0 = 0.0 cmpl $d2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 != 0 goto label1;

        return 0.0;

     label1:
        $d3 = this.<weka.classifiers.evaluation.TwoClassStats: double m_TruePos>;

        $d4 = this.<weka.classifiers.evaluation.TwoClassStats: double m_TruePos>;

        $d5 = this.<weka.classifiers.evaluation.TwoClassStats: double m_FalseNeg>;

        $d6 = $d4 + $d5;

        $d7 = $d3 / $d6;

        return $d7;
    }

    public double getPrecision()
    {
        weka.classifiers.evaluation.TwoClassStats this;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        byte $b0;

        this := @this: weka.classifiers.evaluation.TwoClassStats;

        $d0 = this.<weka.classifiers.evaluation.TwoClassStats: double m_TruePos>;

        $d1 = this.<weka.classifiers.evaluation.TwoClassStats: double m_FalsePos>;

        $d2 = $d0 + $d1;

        $b0 = 0.0 cmpl $d2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 != 0 goto label1;

        return 0.0;

     label1:
        $d3 = this.<weka.classifiers.evaluation.TwoClassStats: double m_TruePos>;

        $d4 = this.<weka.classifiers.evaluation.TwoClassStats: double m_TruePos>;

        $d5 = this.<weka.classifiers.evaluation.TwoClassStats: double m_FalsePos>;

        $d6 = $d4 + $d5;

        $d7 = $d3 / $d6;

        return $d7;
    }

    public double getRecall()
    {
        weka.classifiers.evaluation.TwoClassStats this;
        double $d0;

        this := @this: weka.classifiers.evaluation.TwoClassStats;

        $d0 = virtualinvoke this.<weka.classifiers.evaluation.TwoClassStats: double getTruePositiveRate()>();

        return $d0;
    }

    public double getFallout()
    {
        weka.classifiers.evaluation.TwoClassStats this;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        byte $b0;

        this := @this: weka.classifiers.evaluation.TwoClassStats;

        $d0 = this.<weka.classifiers.evaluation.TwoClassStats: double m_TruePos>;

        $d1 = this.<weka.classifiers.evaluation.TwoClassStats: double m_FalsePos>;

        $d2 = $d0 + $d1;

        $b0 = 0.0 cmpl $d2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 != 0 goto label1;

        return 0.0;

     label1:
        $d3 = this.<weka.classifiers.evaluation.TwoClassStats: double m_FalsePos>;

        $d4 = this.<weka.classifiers.evaluation.TwoClassStats: double m_TruePos>;

        $d5 = this.<weka.classifiers.evaluation.TwoClassStats: double m_FalsePos>;

        $d6 = $d4 + $d5;

        $d7 = $d3 / $d6;

        return $d7;
    }

    public double getFMeasure()
    {
        weka.classifiers.evaluation.TwoClassStats this;
        double precision, recall, $d0, $d1, $d2, $d3, $d4;
        byte $b0;

        this := @this: weka.classifiers.evaluation.TwoClassStats;

        precision = virtualinvoke this.<weka.classifiers.evaluation.TwoClassStats: double getPrecision()>();

        recall = virtualinvoke this.<weka.classifiers.evaluation.TwoClassStats: double getRecall()>();

        $d0 = precision + recall;

        $b0 = $d0 cmpl 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 != 0 goto label1;

        return 0.0;

     label1:
        $d1 = 2.0 * precision;

        $d2 = $d1 * recall;

        $d3 = precision + recall;

        $d4 = $d2 / $d3;

        return $d4;
    }


