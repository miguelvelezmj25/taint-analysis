digraph <clinit> {
"$r0 = newarray (byte)[0] {666632074}" -> "<berkeley.com.sleepycat.util.UtfOps: byte[] EMPTY_BYTES> = $r0 {442924701}";
"<berkeley.com.sleepycat.util.UtfOps: byte[] EMPTY_BYTES> = $r0 {442924701}" -> "<berkeley.com.sleepycat.util.UtfOps: java.lang.String EMPTY_STRING> = \"\" {696654582}";
"<berkeley.com.sleepycat.util.UtfOps: java.lang.String EMPTY_STRING> = \"\" {696654582}" -> "return {1362753507}";
}

digraph getByteLength {
"chars := @parameter0: char[] {325472427}" -> "$i0 = lengthof chars {1350469947}";
"$i0 = lengthof chars {1350469947}" -> "$i1 = staticinvoke <berkeley.com.sleepycat.util.UtfOps: int getByteLength(char[],int,int)>(chars, 0, $i0) {1534917068}";
"$i1 = staticinvoke <berkeley.com.sleepycat.util.UtfOps: int getByteLength(char[],int,int)>(chars, 0, $i0) {1534917068}" -> "return $i1 {1492395811}";
}

digraph getByteLength {
"chars := @parameter0: char[] {1042118087}" -> "offset := @parameter1: int {1729673434}";
"offset := @parameter1: int {1729673434}" -> "length#1 := @parameter2: int {439572252}";
"length#1 := @parameter2: int {439572252}" -> "len#3 = 0 {652644137}";
"len#3 = 0 {652644137}" -> "length#7 = length#1 + offset {2126537996}";
"length#7 = length#1 + offset {2126537996}" -> "i#9 = offset {375278935}";
"i#9 = offset {375278935}" -> "if i#9 >= length#7 goto return len#3 {1993263277}";
"if i#9 >= length#7 goto return len#3 {1993263277}" -> "c = chars[i#9] {70100633}";
"if i#9 >= length#7 goto return len#3 {1993263277}" -> "return len#3 {1905776064}";
"c = chars[i#9] {70100633}" -> "if c < 1 goto (branch) {1202508598}";
"if c < 1 goto (branch) {1202508598}" -> "if c > 127 goto (branch) {1681076242}";
"if c < 1 goto (branch) {1202508598}" -> "if c <= 2047 goto len#3 = len#3 + 2 {2076849507}";
"if c > 127 goto (branch) {1681076242}" -> "len#3 = len#3 + 1 {1160215233}";
"if c > 127 goto (branch) {1681076242}" -> "if c <= 2047 goto len#3 = len#3 + 2 {2076849507}";
"len#3 = len#3 + 1 {1160215233}" -> "goto [?= i#9 = i#9 + 1] {240243549}";
"goto [?= i#9 = i#9 + 1] {240243549}" -> "i#9 = i#9 + 1 {1550627694}";
"if c <= 2047 goto len#3 = len#3 + 2 {2076849507}" -> "len#3 = len#3 + 3 {2072103548}";
"if c <= 2047 goto len#3 = len#3 + 2 {2076849507}" -> "len#3 = len#3 + 2 {1982325220}";
"len#3 = len#3 + 3 {2072103548}" -> "goto [?= i#9 = i#9 + 1] {1585052325}";
"goto [?= i#9 = i#9 + 1] {1585052325}" -> "i#9 = i#9 + 1 {1550627694}";
"len#3 = len#3 + 2 {1982325220}" -> "i#9 = i#9 + 1 {1550627694}";
"i#9 = i#9 + 1 {1550627694}" -> "goto [?= (branch)] {692801717}";
"goto [?= (branch)] {692801717}" -> "if i#9 >= length#7 goto return len#3 {1993263277}";
}

digraph charsToBytes {
"chars := @parameter0: char[] {984441153}" -> "charOffset := @parameter1: int {182914067}";
"charOffset := @parameter1: int {182914067}" -> "bytes := @parameter2: byte[] {383712189}";
"bytes := @parameter2: byte[] {383712189}" -> "byteOffset#1 := @parameter3: int {1913987506}";
"byteOffset#1 := @parameter3: int {1913987506}" -> "charLength#2 := @parameter4: int {355618697}";
"charLength#2 := @parameter4: int {355618697}" -> "charLength#6 = charLength#2 + charOffset {943387230}";
"charLength#6 = charLength#2 + charOffset {943387230}" -> "i#8 = charOffset {1866637500}";
"i#8 = charOffset {1866637500}" -> "if i#8 >= charLength#6 goto return {1344532196}";
"if i#8 >= charLength#6 goto return {1344532196}" -> "c = chars[i#8] {599375613}";
"if i#8 >= charLength#6 goto return {1344532196}" -> "return {1930070476}";
"c = chars[i#8] {599375613}" -> "if c < 1 goto (branch) {1784679855}";
"if c < 1 goto (branch) {1784679855}" -> "if c > 127 goto (branch) {1525019486}";
"if c < 1 goto (branch) {1784679855}" -> "if c <= 2047 goto byteOffset#58 = byteOffset#1 + 1 {639548503}";
"if c > 127 goto (branch) {1525019486}" -> "$i0 = byteOffset#1 {872701144}";
"if c > 127 goto (branch) {1525019486}" -> "if c <= 2047 goto byteOffset#58 = byteOffset#1 + 1 {639548503}";
"$i0 = byteOffset#1 {872701144}" -> "byteOffset#1 = byteOffset#1 + 1 {1473360190}";
"byteOffset#1 = byteOffset#1 + 1 {1473360190}" -> "$b1 = (byte) c {277871041}";
"$b1 = (byte) c {277871041}" -> "bytes[$i0] = $b1 {1242428079}";
"bytes[$i0] = $b1 {1242428079}" -> "goto [?= i#8 = i#8 + 1] {907449208}";
"goto [?= i#8 = i#8 + 1] {907449208}" -> "i#8 = i#8 + 1 {936341808}";
"if c <= 2047 goto byteOffset#58 = byteOffset#1 + 1 {639548503}" -> "byteOffset#26 = byteOffset#1 + 1 {1044943033}";
"if c <= 2047 goto byteOffset#58 = byteOffset#1 + 1 {639548503}" -> "byteOffset#58 = byteOffset#1 + 1 {754703736}";
"byteOffset#26 = byteOffset#1 + 1 {1044943033}" -> "$c2 = c >> 12 {1155310460}";
"$c2 = c >> 12 {1155310460}" -> "$c3 = $c2 & 15 {47107307}";
"$c3 = $c2 & 15 {47107307}" -> "$c4 = 224 | $c3 {1803899116}";
"$c4 = 224 | $c3 {1803899116}" -> "$b5 = (byte) $c4 {1248053667}";
"$b5 = (byte) $c4 {1248053667}" -> "bytes[byteOffset#1] = $b5 {360527354}";
"bytes[byteOffset#1] = $b5 {360527354}" -> "byteOffset#37 = byteOffset#26 + 1 {1956237244}";
"byteOffset#37 = byteOffset#26 + 1 {1956237244}" -> "$c6 = c >> 6 {1787158812}";
"$c6 = c >> 6 {1787158812}" -> "$c7 = $c6 & 63 {170278534}";
"$c7 = $c6 & 63 {170278534}" -> "$c8 = 128 | $c7 {66084934}";
"$c8 = 128 | $c7 {66084934}" -> "$b9 = (byte) $c8 {1178139685}";
"$b9 = (byte) $c8 {1178139685}" -> "bytes[byteOffset#26] = $b9 {1058368676}";
"bytes[byteOffset#26] = $b9 {1058368676}" -> "byteOffset#1 = byteOffset#37 + 1 {97916983}";
"byteOffset#1 = byteOffset#37 + 1 {97916983}" -> "$c10 = c >> 0 {836993837}";
"$c10 = c >> 0 {836993837}" -> "$c11 = $c10 & 63 {1275361007}";
"$c11 = $c10 & 63 {1275361007}" -> "$c12 = 128 | $c11 {1105804281}";
"$c12 = 128 | $c11 {1105804281}" -> "$b13 = (byte) $c12 {1824399874}";
"$b13 = (byte) $c12 {1824399874}" -> "bytes[byteOffset#37] = $b13 {1227540133}";
"bytes[byteOffset#37] = $b13 {1227540133}" -> "goto [?= i#8 = i#8 + 1] {653681249}";
"goto [?= i#8 = i#8 + 1] {653681249}" -> "i#8 = i#8 + 1 {936341808}";
"byteOffset#58 = byteOffset#1 + 1 {754703736}" -> "$c14 = c >> 6 {1251241432}";
"$c14 = c >> 6 {1251241432}" -> "$c15 = $c14 & 31 {1400873500}";
"$c15 = $c14 & 31 {1400873500}" -> "$c16 = 192 | $c15 {1488948271}";
"$c16 = 192 | $c15 {1488948271}" -> "$b17 = (byte) $c16 {833409101}";
"$b17 = (byte) $c16 {833409101}" -> "bytes[byteOffset#1] = $b17 {132370502}";
"bytes[byteOffset#1] = $b17 {132370502}" -> "byteOffset#1 = byteOffset#58 + 1 {1520518469}";
"byteOffset#1 = byteOffset#58 + 1 {1520518469}" -> "$c18 = c >> 0 {1727195836}";
"$c18 = c >> 0 {1727195836}" -> "$c19 = $c18 & 63 {1155650259}";
"$c19 = $c18 & 63 {1155650259}" -> "$c20 = 128 | $c19 {988066700}";
"$c20 = 128 | $c19 {988066700}" -> "$b21 = (byte) $c20 {1261570406}";
"$b21 = (byte) $c20 {1261570406}" -> "bytes[byteOffset#58] = $b21 {2113032983}";
"bytes[byteOffset#58] = $b21 {2113032983}" -> "i#8 = i#8 + 1 {936341808}";
"i#8 = i#8 + 1 {936341808}" -> "goto [?= (branch)] {673762454}";
"goto [?= (branch)] {673762454}" -> "if i#8 >= charLength#6 goto return {1344532196}";
}

digraph getZeroTerminatedByteLength {
"bytes := @parameter0: byte[] {1153231945}" -> "offset#1 := @parameter1: int {2003123061}";
"offset#1 := @parameter1: int {2003123061}" -> "len#3 = 0 {228597752}";
"len#3 = 0 {228597752}" -> "$i0 = offset#1 {396349183}";
"$i0 = offset#1 {396349183}" -> "offset#1 = offset#1 + 1 {441273387}";
"offset#1 = offset#1 + 1 {441273387}" -> "$b1 = bytes[$i0] {54872700}";
"$b1 = bytes[$i0] {54872700}" -> "if $b1 == 0 goto return len#3 {819028145}";
"if $b1 == 0 goto return len#3 {819028145}" -> "len#3 = len#3 + 1 {1506850914}";
"if $b1 == 0 goto return len#3 {819028145}" -> "return len#3 {995892943}";
"len#3 = len#3 + 1 {1506850914}" -> "goto [?= $i0 = offset#1] {688692071}";
"goto [?= $i0 = offset#1] {688692071}" -> "$i0 = offset#1 {396349183}";
}

digraph bytesToString {
"bytes := @parameter0: byte[] {951132727}" -> "offset := @parameter1: int {174805120}";
"offset := @parameter1: int {174805120}" -> "length := @parameter2: int {1492181073}";
"length := @parameter2: int {1492181073}" -> "if length != 0 goto charLen = staticinvoke <berkeley.com.sleepycat.util.UtfOps: int getCharLength(byte[],int,int)>(bytes, offset, length) {1945656444}";
"if length != 0 goto charLen = staticinvoke <berkeley.com.sleepycat.util.UtfOps: int getCharLength(byte[],int,int)>(bytes, offset, length) {1945656444}" -> "$r0 = <berkeley.com.sleepycat.util.UtfOps: java.lang.String EMPTY_STRING> {752207930}";
"if length != 0 goto charLen = staticinvoke <berkeley.com.sleepycat.util.UtfOps: int getCharLength(byte[],int,int)>(bytes, offset, length) {1945656444}" -> "charLen = staticinvoke <berkeley.com.sleepycat.util.UtfOps: int getCharLength(byte[],int,int)>(bytes, offset, length) {47327940}";
"$r0 = <berkeley.com.sleepycat.util.UtfOps: java.lang.String EMPTY_STRING> {752207930}" -> "return $r0 {329034269}";
"charLen = staticinvoke <berkeley.com.sleepycat.util.UtfOps: int getCharLength(byte[],int,int)>(bytes, offset, length) {47327940}" -> "chars = newarray (char)[charLen] {1487732995}";
"chars = newarray (char)[charLen] {1487732995}" -> "staticinvoke <berkeley.com.sleepycat.util.UtfOps: int bytesToChars(byte[],int,char[],int,int,boolean)>(bytes, offset, chars, 0, length, 1) {528512366}";
"staticinvoke <berkeley.com.sleepycat.util.UtfOps: int bytesToChars(byte[],int,char[],int,int,boolean)>(bytes, offset, chars, 0, length, 1) {528512366}" -> "$r1 = new java.lang.String {1427634035}";
"$r1 = new java.lang.String {1427634035}" -> "specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>(chars, 0, charLen) {886775291}";
"specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>(chars, 0, charLen) {886775291}" -> "return $r1 {1782844667}";
}

digraph bytesToChars {
"bytes := @parameter0: byte[] {1652913359}" -> "byteOffset#1 := @parameter1: int {1474943174}";
"byteOffset#1 := @parameter1: int {1474943174}" -> "chars := @parameter2: char[] {1911003320}";
"chars := @parameter2: char[] {1911003320}" -> "charOffset#2 := @parameter3: int {1422763916}";
"charOffset#2 := @parameter3: int {1422763916}" -> "len#3 := @parameter4: int {1291401549}";
"len#3 := @parameter4: int {1291401549}" -> "isByteLen := @parameter5: boolean {1662267358}";
"isByteLen := @parameter5: boolean {1662267358}" -> "if isByteLen == 0 goto $i1 = charOffset#2 {289803792}";
"if isByteLen == 0 goto $i1 = charOffset#2 {289803792}" -> "$i1 = byteOffset#1 {453194187}";
"if isByteLen == 0 goto $i1 = charOffset#2 {289803792}" -> "$i1 = charOffset#2 {485163212}";
"$i1 = byteOffset#1 {453194187}" -> "goto [?= len#8 = len#3 + $i1] {714678541}";
"goto [?= len#8 = len#3 + $i1] {714678541}" -> "len#8 = len#3 + $i1 {1064519874}";
"$i1 = charOffset#2 {485163212}" -> "len#8 = len#3 + $i1 {1064519874}";
"len#8 = len#3 + $i1 {1064519874}" -> "if isByteLen == 0 goto $i2 = charOffset#2 {413667668}";
"if isByteLen == 0 goto $i2 = charOffset#2 {413667668}" -> "$i2 = byteOffset#1 {1079173981}";
"if isByteLen == 0 goto $i2 = charOffset#2 {413667668}" -> "$i2 = charOffset#2 {891877322}";
"$i2 = byteOffset#1 {1079173981}" -> "goto [?= (branch)] {1698862797}";
"goto [?= (branch)] {1698862797}" -> "if $i2 >= len#8 goto return byteOffset#1 {978136182}";
"$i2 = charOffset#2 {891877322}" -> "if $i2 >= len#8 goto return byteOffset#1 {978136182}";
"if $i2 >= len#8 goto return byteOffset#1 {978136182}" -> "$i3 = byteOffset#1 {967575816}";
"if $i2 >= len#8 goto return byteOffset#1 {978136182}" -> "return byteOffset#1 {573490901}";
"$i3 = byteOffset#1 {967575816}" -> "byteOffset#1 = byteOffset#1 + 1 {1192520325}";
"byteOffset#1 = byteOffset#1 + 1 {1192520325}" -> "$b4 = bytes[$i3] {342478989}";
"$b4 = bytes[$i3] {342478989}" -> "char1 = $b4 & 255 {2039293630}";
"char1 = $b4 & 255 {2039293630}" -> "$s5 = char1 & 255 {1023799919}";
"$s5 = char1 & 255 {1023799919}" -> "$s6 = $s5 >> 4 {1897796104}";
"$s6 = $s5 >> 4 {1897796104}" -> "tableswitch($s6) {     case 0: goto $i7 = charOffset#2;     case 1: goto $i7 = charOffset#2;     case 2: goto $i7 = charOffset#2;     case 3: goto $i7 = charOffset#2;     case 4: goto $i7 = charOffset#2;     case 5: goto $i7 = charOffset#2;     case 6: goto $i7 = charOffset#2;     case 7: goto $i7 = charOffset#2;     case 8: goto $r2 = new java.lang.IllegalArgumentException;     case 9: goto $r2 = new java.lang.IllegalArgumentException;     case 10: goto $r2 = new java.lang.IllegalArgumentException;     case 11: goto $r2 = new java.lang.IllegalArgumentException;     case 12: goto $i9 = byteOffset#1;     case 13: goto $i9 = byteOffset#1;     case 14: goto byteOffset#50 = byteOffset#1 + 1;     default: goto $r2 = new java.lang.IllegalArgumentException; } {997035192}";
"tableswitch($s6) {     case 0: goto $i7 = charOffset#2;     case 1: goto $i7 = charOffset#2;     case 2: goto $i7 = charOffset#2;     case 3: goto $i7 = charOffset#2;     case 4: goto $i7 = charOffset#2;     case 5: goto $i7 = charOffset#2;     case 6: goto $i7 = charOffset#2;     case 7: goto $i7 = charOffset#2;     case 8: goto $r2 = new java.lang.IllegalArgumentException;     case 9: goto $r2 = new java.lang.IllegalArgumentException;     case 10: goto $r2 = new java.lang.IllegalArgumentException;     case 11: goto $r2 = new java.lang.IllegalArgumentException;     case 12: goto $i9 = byteOffset#1;     case 13: goto $i9 = byteOffset#1;     case 14: goto byteOffset#50 = byteOffset#1 + 1;     default: goto $r2 = new java.lang.IllegalArgumentException; } {997035192}" -> "$i7 = charOffset#2 {1750614281}";
"tableswitch($s6) {     case 0: goto $i7 = charOffset#2;     case 1: goto $i7 = charOffset#2;     case 2: goto $i7 = charOffset#2;     case 3: goto $i7 = charOffset#2;     case 4: goto $i7 = charOffset#2;     case 5: goto $i7 = charOffset#2;     case 6: goto $i7 = charOffset#2;     case 7: goto $i7 = charOffset#2;     case 8: goto $r2 = new java.lang.IllegalArgumentException;     case 9: goto $r2 = new java.lang.IllegalArgumentException;     case 10: goto $r2 = new java.lang.IllegalArgumentException;     case 11: goto $r2 = new java.lang.IllegalArgumentException;     case 12: goto $i9 = byteOffset#1;     case 13: goto $i9 = byteOffset#1;     case 14: goto byteOffset#50 = byteOffset#1 + 1;     default: goto $r2 = new java.lang.IllegalArgumentException; } {997035192}" -> "$r2 = new java.lang.IllegalArgumentException {857719884}";
"tableswitch($s6) {     case 0: goto $i7 = charOffset#2;     case 1: goto $i7 = charOffset#2;     case 2: goto $i7 = charOffset#2;     case 3: goto $i7 = charOffset#2;     case 4: goto $i7 = charOffset#2;     case 5: goto $i7 = charOffset#2;     case 6: goto $i7 = charOffset#2;     case 7: goto $i7 = charOffset#2;     case 8: goto $r2 = new java.lang.IllegalArgumentException;     case 9: goto $r2 = new java.lang.IllegalArgumentException;     case 10: goto $r2 = new java.lang.IllegalArgumentException;     case 11: goto $r2 = new java.lang.IllegalArgumentException;     case 12: goto $i9 = byteOffset#1;     case 13: goto $i9 = byteOffset#1;     case 14: goto byteOffset#50 = byteOffset#1 + 1;     default: goto $r2 = new java.lang.IllegalArgumentException; } {997035192}" -> "$i9 = byteOffset#1 {619379877}";
"tableswitch($s6) {     case 0: goto $i7 = charOffset#2;     case 1: goto $i7 = charOffset#2;     case 2: goto $i7 = charOffset#2;     case 3: goto $i7 = charOffset#2;     case 4: goto $i7 = charOffset#2;     case 5: goto $i7 = charOffset#2;     case 6: goto $i7 = charOffset#2;     case 7: goto $i7 = charOffset#2;     case 8: goto $r2 = new java.lang.IllegalArgumentException;     case 9: goto $r2 = new java.lang.IllegalArgumentException;     case 10: goto $r2 = new java.lang.IllegalArgumentException;     case 11: goto $r2 = new java.lang.IllegalArgumentException;     case 12: goto $i9 = byteOffset#1;     case 13: goto $i9 = byteOffset#1;     case 14: goto byteOffset#50 = byteOffset#1 + 1;     default: goto $r2 = new java.lang.IllegalArgumentException; } {997035192}" -> "byteOffset#50 = byteOffset#1 + 1 {1796420306}";
"$i7 = charOffset#2 {1750614281}" -> "charOffset#2 = charOffset#2 + 1 {1775734872}";
"charOffset#2 = charOffset#2 + 1 {1775734872}" -> "$c8 = (char) char1 {1908923143}";
"$c8 = (char) char1 {1908923143}" -> "chars[$i7] = $c8 {608686135}";
"chars[$i7] = $c8 {608686135}" -> "goto [?= (branch)] {1551591744}";
"goto [?= (branch)] {1551591744}" -> "if isByteLen == 0 goto $i2 = charOffset#2 {413667668}";
"$i9 = byteOffset#1 {619379877}" -> "byteOffset#1 = byteOffset#1 + 1 {1052137063}";
"byteOffset#1 = byteOffset#1 + 1 {1052137063}" -> "char2#29 = bytes[$i9] {1897184015}";
"char2#29 = bytes[$i9] {1897184015}" -> "$s10 = char2#29 & 192 {96525696}";
"$s10 = char2#29 & 192 {96525696}" -> "if $s10 == 128 goto $i11 = charOffset#2 {1109875221}";
"if $s10 == 128 goto $i11 = charOffset#2 {1109875221}" -> "$r0 = new java.lang.IllegalArgumentException {1080780899}";
"if $s10 == 128 goto $i11 = charOffset#2 {1109875221}" -> "$i11 = charOffset#2 {1351234806}";
"$r0 = new java.lang.IllegalArgumentException {1080780899}" -> "specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>() {1411130589}";
"specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>() {1411130589}" -> "throw $r0 {747842489}";
"$i11 = charOffset#2 {1351234806}" -> "charOffset#2 = charOffset#2 + 1 {1694877942}";
"charOffset#2 = charOffset#2 + 1 {1694877942}" -> "$s12 = char1 & 31 {788416340}";
"$s12 = char1 & 31 {788416340}" -> "$i13 = $s12 << 6 {858406674}";
"$i13 = $s12 << 6 {858406674}" -> "$b14 = char2#29 & 63 {559272864}";
"$b14 = char2#29 & 63 {559272864}" -> "$i15 = $i13 | $b14 {139656652}";
"$i15 = $i13 | $b14 {139656652}" -> "$c16 = (char) $i15 {1017151548}";
"$c16 = (char) $i15 {1017151548}" -> "chars[$i11] = $c16 {1385721831}";
"chars[$i11] = $c16 {1385721831}" -> "goto [?= (branch)] {1574923975}";
"goto [?= (branch)] {1574923975}" -> "if isByteLen == 0 goto $i2 = charOffset#2 {413667668}";
"byteOffset#50 = byteOffset#1 + 1 {1796420306}" -> "char2#52 = bytes[byteOffset#1] {1843505283}";
"char2#52 = bytes[byteOffset#1] {1843505283}" -> "byteOffset#1 = byteOffset#50 + 1 {1652209835}";
"byteOffset#1 = byteOffset#50 + 1 {1652209835}" -> "char3 = bytes[byteOffset#50] {1233338999}";
"char3 = bytes[byteOffset#50] {1233338999}" -> "$s17 = char2#52 & 192 {1455313598}";
"$s17 = char2#52 & 192 {1455313598}" -> "if $s17 != 128 goto $r1 = new java.lang.IllegalArgumentException {594570547}";
"if $s17 != 128 goto $r1 = new java.lang.IllegalArgumentException {594570547}" -> "$s18 = char3 & 192 {1133312654}";
"if $s17 != 128 goto $r1 = new java.lang.IllegalArgumentException {594570547}" -> "$r1 = new java.lang.IllegalArgumentException {1000451670}";
"$s18 = char3 & 192 {1133312654}" -> "if $s18 == 128 goto $i19 = charOffset#2 {1156079501}";
"if $s18 == 128 goto $i19 = charOffset#2 {1156079501}" -> "$r1 = new java.lang.IllegalArgumentException {1000451670}";
"if $s18 == 128 goto $i19 = charOffset#2 {1156079501}" -> "$i19 = charOffset#2 {282445803}";
"$r1 = new java.lang.IllegalArgumentException {1000451670}" -> "specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>() {1423075890}";
"specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>() {1423075890}" -> "throw $r1 {1379943186}";
"$i19 = charOffset#2 {282445803}" -> "charOffset#2 = charOffset#2 + 1 {1469164601}";
"charOffset#2 = charOffset#2 + 1 {1469164601}" -> "$s20 = char1 & 15 {1895878769}";
"$s20 = char1 & 15 {1895878769}" -> "$i21 = $s20 << 12 {1695896350}";
"$i21 = $s20 << 12 {1695896350}" -> "$b22 = char2#52 & 63 {29044214}";
"$b22 = char2#52 & 63 {29044214}" -> "$i23 = $b22 << 6 {547030708}";
"$i23 = $b22 << 6 {547030708}" -> "$i24 = $i21 | $i23 {520775338}";
"$i24 = $i21 | $i23 {520775338}" -> "$b25 = char3 & 63 {959751521}";
"$b25 = char3 & 63 {959751521}" -> "$i26 = $b25 << 0 {64384639}";
"$i26 = $b25 << 0 {64384639}" -> "$i27 = $i24 | $i26 {1472916247}";
"$i27 = $i24 | $i26 {1472916247}" -> "$c28 = (char) $i27 {1263092514}";
"$c28 = (char) $i27 {1263092514}" -> "chars[$i19] = $c28 {51912931}";
"chars[$i19] = $c28 {51912931}" -> "goto [?= (branch)] {856494953}";
"goto [?= (branch)] {856494953}" -> "if isByteLen == 0 goto $i2 = charOffset#2 {413667668}";
"$r2 = new java.lang.IllegalArgumentException {857719884}" -> "specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>() {1888739532}";
"specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>() {1888739532}" -> "throw $r2 {735982572}";
}

digraph getCharLength {
"bytes := @parameter0: byte[] {151519593}" -> "offset#1 := @parameter1: int {1357222480}";
"offset#1 := @parameter1: int {1357222480}" -> "length#2 := @parameter2: int {630042711}";
"length#2 := @parameter2: int {630042711}" -> "charCount#4 = 0 {387679628}";
"charCount#4 = 0 {387679628}" -> "length#8 = length#2 + offset#1 {2078960990}";
"length#8 = length#2 + offset#1 {2078960990}" -> "if offset#1 >= length#8 goto return charCount#4 {146441562}";
"if offset#1 >= length#8 goto return charCount#4 {146441562}" -> "$b0 = bytes[offset#1] {1537815516}";
"if offset#1 >= length#8 goto return charCount#4 {146441562}" -> "return charCount#4 {1225027918}";
"$b0 = bytes[offset#1] {1537815516}" -> "$s1 = $b0 & 255 {856644157}";
"$s1 = $b0 & 255 {856644157}" -> "$s2 = $s1 >> 4 {1209440013}";
"$s2 = $s1 >> 4 {1209440013}" -> "tableswitch($s2) {     case 0: goto offset#1 = offset#1 + 1;     case 1: goto offset#1 = offset#1 + 1;     case 2: goto offset#1 = offset#1 + 1;     case 3: goto offset#1 = offset#1 + 1;     case 4: goto offset#1 = offset#1 + 1;     case 5: goto offset#1 = offset#1 + 1;     case 6: goto offset#1 = offset#1 + 1;     case 7: goto offset#1 = offset#1 + 1;     case 8: goto $r0 = new java.lang.IllegalArgumentException;     case 9: goto $r0 = new java.lang.IllegalArgumentException;     case 10: goto $r0 = new java.lang.IllegalArgumentException;     case 11: goto $r0 = new java.lang.IllegalArgumentException;     case 12: goto offset#1 = offset#1 + 2;     case 13: goto offset#1 = offset#1 + 2;     case 14: goto offset#1 = offset#1 + 3;     default: goto $r0 = new java.lang.IllegalArgumentException; } {1622596452}";
"tableswitch($s2) {     case 0: goto offset#1 = offset#1 + 1;     case 1: goto offset#1 = offset#1 + 1;     case 2: goto offset#1 = offset#1 + 1;     case 3: goto offset#1 = offset#1 + 1;     case 4: goto offset#1 = offset#1 + 1;     case 5: goto offset#1 = offset#1 + 1;     case 6: goto offset#1 = offset#1 + 1;     case 7: goto offset#1 = offset#1 + 1;     case 8: goto $r0 = new java.lang.IllegalArgumentException;     case 9: goto $r0 = new java.lang.IllegalArgumentException;     case 10: goto $r0 = new java.lang.IllegalArgumentException;     case 11: goto $r0 = new java.lang.IllegalArgumentException;     case 12: goto offset#1 = offset#1 + 2;     case 13: goto offset#1 = offset#1 + 2;     case 14: goto offset#1 = offset#1 + 3;     default: goto $r0 = new java.lang.IllegalArgumentException; } {1622596452}" -> "offset#1 = offset#1 + 1 {690076669}";
"tableswitch($s2) {     case 0: goto offset#1 = offset#1 + 1;     case 1: goto offset#1 = offset#1 + 1;     case 2: goto offset#1 = offset#1 + 1;     case 3: goto offset#1 = offset#1 + 1;     case 4: goto offset#1 = offset#1 + 1;     case 5: goto offset#1 = offset#1 + 1;     case 6: goto offset#1 = offset#1 + 1;     case 7: goto offset#1 = offset#1 + 1;     case 8: goto $r0 = new java.lang.IllegalArgumentException;     case 9: goto $r0 = new java.lang.IllegalArgumentException;     case 10: goto $r0 = new java.lang.IllegalArgumentException;     case 11: goto $r0 = new java.lang.IllegalArgumentException;     case 12: goto offset#1 = offset#1 + 2;     case 13: goto offset#1 = offset#1 + 2;     case 14: goto offset#1 = offset#1 + 3;     default: goto $r0 = new java.lang.IllegalArgumentException; } {1622596452}" -> "$r0 = new java.lang.IllegalArgumentException {142184438}";
"tableswitch($s2) {     case 0: goto offset#1 = offset#1 + 1;     case 1: goto offset#1 = offset#1 + 1;     case 2: goto offset#1 = offset#1 + 1;     case 3: goto offset#1 = offset#1 + 1;     case 4: goto offset#1 = offset#1 + 1;     case 5: goto offset#1 = offset#1 + 1;     case 6: goto offset#1 = offset#1 + 1;     case 7: goto offset#1 = offset#1 + 1;     case 8: goto $r0 = new java.lang.IllegalArgumentException;     case 9: goto $r0 = new java.lang.IllegalArgumentException;     case 10: goto $r0 = new java.lang.IllegalArgumentException;     case 11: goto $r0 = new java.lang.IllegalArgumentException;     case 12: goto offset#1 = offset#1 + 2;     case 13: goto offset#1 = offset#1 + 2;     case 14: goto offset#1 = offset#1 + 3;     default: goto $r0 = new java.lang.IllegalArgumentException; } {1622596452}" -> "offset#1 = offset#1 + 2 {339958581}";
"tableswitch($s2) {     case 0: goto offset#1 = offset#1 + 1;     case 1: goto offset#1 = offset#1 + 1;     case 2: goto offset#1 = offset#1 + 1;     case 3: goto offset#1 = offset#1 + 1;     case 4: goto offset#1 = offset#1 + 1;     case 5: goto offset#1 = offset#1 + 1;     case 6: goto offset#1 = offset#1 + 1;     case 7: goto offset#1 = offset#1 + 1;     case 8: goto $r0 = new java.lang.IllegalArgumentException;     case 9: goto $r0 = new java.lang.IllegalArgumentException;     case 10: goto $r0 = new java.lang.IllegalArgumentException;     case 11: goto $r0 = new java.lang.IllegalArgumentException;     case 12: goto offset#1 = offset#1 + 2;     case 13: goto offset#1 = offset#1 + 2;     case 14: goto offset#1 = offset#1 + 3;     default: goto $r0 = new java.lang.IllegalArgumentException; } {1622596452}" -> "offset#1 = offset#1 + 3 {1713535699}";
"offset#1 = offset#1 + 1 {690076669}" -> "goto [?= charCount#4 = charCount#4 + 1] {1745950661}";
"goto [?= charCount#4 = charCount#4 + 1] {1745950661}" -> "charCount#4 = charCount#4 + 1 {1410082598}";
"offset#1 = offset#1 + 2 {339958581}" -> "goto [?= charCount#4 = charCount#4 + 1] {1123602210}";
"goto [?= charCount#4 = charCount#4 + 1] {1123602210}" -> "charCount#4 = charCount#4 + 1 {1410082598}";
"offset#1 = offset#1 + 3 {1713535699}" -> "goto [?= charCount#4 = charCount#4 + 1] {116258541}";
"goto [?= charCount#4 = charCount#4 + 1] {116258541}" -> "charCount#4 = charCount#4 + 1 {1410082598}";
"$r0 = new java.lang.IllegalArgumentException {142184438}" -> "specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>() {2046674858}";
"specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>() {2046674858}" -> "throw $r0 {273550566}";
"charCount#4 = charCount#4 + 1 {1410082598}" -> "goto [?= (branch)] {1050288451}";
"goto [?= (branch)] {1050288451}" -> "if offset#1 >= length#8 goto return charCount#4 {146441562}";
}


