    public void <init>(int)
    {
        java.io.ByteArrayOutputStream l0;
        int l1;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;
        byte[] $r5;

        l0 := @this: java.io.ByteArrayOutputStream;

        l1 := @parameter0: int;

        specialinvoke l0.<java.io.OutputStream: void <init>()>();

        if l1 >= 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Negative initial size: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label1:
        $r5 = newarray (byte)[l1];

        l0.<java.io.ByteArrayOutputStream: byte[] buf> = $r5;

        return;
    }

    public synchronized void write(byte[], int, int)
    {
        java.io.ByteArrayOutputStream l0;
        byte[] l1, $r1;
        int l2, l3, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.IndexOutOfBoundsException $r0;

        l0 := @this: java.io.ByteArrayOutputStream;

        l1 := @parameter0: byte[];

        l2 := @parameter1: int;

        l3 := @parameter2: int;

        $i0 = lengthof l1;

        if 0 > $i0 goto label1;

        if l3 < 0 goto label1;

        $i1 = 0 + l3;

        $i2 = lengthof l1;

        $i3 = $i1 - $i2;

        if $i3 <= 0 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r0;

     label2:
        $i4 = l0.<java.io.ByteArrayOutputStream: int count>;

        $i5 = $i4 + l3;

        specialinvoke l0.<java.io.ByteArrayOutputStream: void ensureCapacity(int)>($i5);

        $r1 = l0.<java.io.ByteArrayOutputStream: byte[] buf>;

        $i6 = l0.<java.io.ByteArrayOutputStream: int count>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(l1, 0, $r1, $i6, l3);

        $i7 = l0.<java.io.ByteArrayOutputStream: int count>;

        $i8 = $i7 + l3;

        l0.<java.io.ByteArrayOutputStream: int count> = $i8;

        return;
    }

    public void close() throws java.io.IOException
    {
        java.io.ByteArrayOutputStream l0;

        l0 := @this: java.io.ByteArrayOutputStream;

        return;
    }

    private void ensureCapacity(int)
    {
        java.io.ByteArrayOutputStream l0;
        int l1, $i0, $i1;
        byte[] $r0;

        l0 := @this: java.io.ByteArrayOutputStream;

        l1 := @parameter0: int;

        $r0 = l0.<java.io.ByteArrayOutputStream: byte[] buf>;

        $i0 = lengthof $r0;

        $i1 = l1 - $i0;

        if $i1 <= 0 goto label1;

        specialinvoke l0.<java.io.ByteArrayOutputStream: void grow(int)>(l1);

     label1:
        return;
    }

    private void grow(int)
    {
        java.io.ByteArrayOutputStream l0;
        int l1, l2, l3#7, $i0, $i1;
        byte[] $r0, $r1, $r2;

        l0 := @this: java.io.ByteArrayOutputStream;

        l1 := @parameter0: int;

        $r0 = l0.<java.io.ByteArrayOutputStream: byte[] buf>;

        l2 = lengthof $r0;

        l3#7 = l2 << 1;

        $i0 = l3#7 - l1;

        if $i0 >= 0 goto label1;

        l3#7 = l1;

     label1:
        $i1 = l3#7 - 2147483639;

        if $i1 <= 0 goto label2;

        l3#7 = staticinvoke <java.io.ByteArrayOutputStream: int hugeCapacity(int)>(l1);

     label2:
        $r1 = l0.<java.io.ByteArrayOutputStream: byte[] buf>;

        $r2 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>($r1, l3#7);

        l0.<java.io.ByteArrayOutputStream: byte[] buf> = $r2;

        return;
    }

    private static int hugeCapacity(int)
    {
        int l0, $i0;
        java.lang.OutOfMemoryError $r0;

        l0 := @parameter0: int;

        if l0 >= 0 goto label1;

        $r0 = new java.lang.OutOfMemoryError;

        specialinvoke $r0.<java.lang.OutOfMemoryError: void <init>()>();

        throw $r0;

     label1:
        if l0 <= 2147483639 goto label2;

        $i0 = 2147483647;

        goto label3;

     label2:
        $i0 = 2147483639;

     label3:
        return $i0;
    }


