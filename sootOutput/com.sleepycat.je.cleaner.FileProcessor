    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "com/sleepycat/je/cleaner/FileProcessor";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sleepycat.je.cleaner.FileProcessor: boolean $assertionsDisabled> = $z1;

        return;
    }

    void <init>(java.lang.String, boolean, com.sleepycat.je.dbi.EnvironmentImpl, com.sleepycat.je.cleaner.Cleaner, com.sleepycat.je.cleaner.UtilizationProfile, com.sleepycat.je.cleaner.UtilizationCalculator, com.sleepycat.je.cleaner.FileSelector)
    {
        com.sleepycat.je.cleaner.FileProcessor this;
        java.lang.String name;
        boolean firstThread;
        com.sleepycat.je.dbi.EnvironmentImpl env;
        com.sleepycat.je.cleaner.Cleaner cleaner;
        com.sleepycat.je.cleaner.UtilizationProfile profile;
        com.sleepycat.je.cleaner.UtilizationCalculator calculator;
        com.sleepycat.je.cleaner.FileSelector fileSelector;

        this := @this: com.sleepycat.je.cleaner.FileProcessor;

        name := @parameter0: java.lang.String;

        firstThread := @parameter1: boolean;

        env := @parameter2: com.sleepycat.je.dbi.EnvironmentImpl;

        cleaner := @parameter3: com.sleepycat.je.cleaner.Cleaner;

        profile := @parameter4: com.sleepycat.je.cleaner.UtilizationProfile;

        calculator := @parameter5: com.sleepycat.je.cleaner.UtilizationCalculator;

        fileSelector := @parameter6: com.sleepycat.je.cleaner.FileSelector;

        specialinvoke this.<com.sleepycat.je.utilint.DaemonThread: void <init>(long,java.lang.String,com.sleepycat.je.dbi.EnvironmentImpl)>(0L, name, env);

        this.<com.sleepycat.je.cleaner.FileProcessor: boolean activate> = 0;

        this.<com.sleepycat.je.cleaner.FileProcessor: long lastWakeupLsn> = 0L;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nINsObsoleteThisRun> = 0;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nINsCleanedThisRun> = 0;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nINsDeadThisRun> = 0;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nINsMigratedThisRun> = 0;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nBINDeltasObsoleteThisRun> = 0;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nBINDeltasCleanedThisRun> = 0;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nBINDeltasDeadThisRun> = 0;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nBINDeltasMigratedThisRun> = 0;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nLNsObsoleteThisRun> = 0;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nLNsExpiredThisRun> = 0;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nLNsCleanedThisRun> = 0;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nLNQueueHitsThisRun> = 0;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nLNsDeadThisRun> = 0;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nLNsLockedThisRun> = 0;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nLNsMigratedThisRun> = 0;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nLNsMarkedThisRun> = 0;

        this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.cleaner.Cleaner cleaner> = cleaner;

        this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.cleaner.FileSelector fileSelector> = fileSelector;

        this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.cleaner.UtilizationProfile profile> = profile;

        this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.cleaner.UtilizationCalculator calculator> = calculator;

        this.<com.sleepycat.je.cleaner.FileProcessor: boolean firstThread> = firstThread;

        return;
    }

    void activateOnWakeup()
    {
        com.sleepycat.je.cleaner.FileProcessor this;

        this := @this: com.sleepycat.je.cleaner.FileProcessor;

        this.<com.sleepycat.je.cleaner.FileProcessor: boolean activate> = 1;

        return;
    }

    public com.sleepycat.je.cleaner.ExpirationTracker countExpiration(long)
    {
        com.sleepycat.je.cleaner.FileProcessor this;
        long fileNum;
        com.sleepycat.je.cleaner.ExpirationTracker tracker, $r0;
        boolean result, $z0;
        java.io.IOException e, $r5;
        java.lang.Long $r1;
        com.sleepycat.je.cleaner.FileSummary $r2;
        com.sleepycat.je.cleaner.INSummary $r3;
        java.lang.AssertionError $r4;
        com.sleepycat.je.dbi.EnvironmentImpl $r6, $r8;
        com.sleepycat.je.EnvironmentFailureException $r7;
        com.sleepycat.je.dbi.EnvironmentFailureReason $r9;

        this := @this: com.sleepycat.je.cleaner.FileProcessor;

        fileNum := @parameter0: long;

        $r0 = new com.sleepycat.je.cleaner.ExpirationTracker;

        specialinvoke $r0.<com.sleepycat.je.cleaner.ExpirationTracker: void <init>(long)>(fileNum);

        tracker = $r0;

     label1:
        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(fileNum);

        $r2 = new com.sleepycat.je.cleaner.FileSummary;

        specialinvoke $r2.<com.sleepycat.je.cleaner.FileSummary: void <init>()>();

        $r3 = new com.sleepycat.je.cleaner.INSummary;

        specialinvoke $r3.<com.sleepycat.je.cleaner.INSummary: void <init>()>();

        result = specialinvoke this.<com.sleepycat.je.cleaner.FileProcessor: boolean processFile(java.lang.Long,com.sleepycat.je.cleaner.FileSummary,com.sleepycat.je.cleaner.INSummary,com.sleepycat.je.cleaner.ExpirationTracker)>($r1, $r2, $r3, tracker);

        $z0 = <com.sleepycat.je.cleaner.FileProcessor: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if result != 0 goto label2;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        e = $r5;

        $r6 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        staticinvoke <com.sleepycat.je.utilint.LoggerUtils: void traceAndLogException(com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Cleaner", "countExpiration", "", e);

        $r7 = new com.sleepycat.je.EnvironmentFailureException;

        $r8 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r9 = <com.sleepycat.je.dbi.EnvironmentFailureReason: com.sleepycat.je.dbi.EnvironmentFailureReason LOG_INTEGRITY>;

        specialinvoke $r7.<com.sleepycat.je.EnvironmentFailureException: void <init>(com.sleepycat.je.dbi.EnvironmentImpl,com.sleepycat.je.dbi.EnvironmentFailureReason,java.lang.Throwable)>($r8, $r9, e);

        throw $r7;

     label4:
        return tracker;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private boolean processFile(java.lang.Long, com.sleepycat.je.cleaner.FileSummary, com.sleepycat.je.cleaner.INSummary, com.sleepycat.je.cleaner.ExpirationTracker) throws java.io.IOException
    {
        com.sleepycat.je.cleaner.FileProcessor this;
        java.lang.Long fileNum, $r30, $r42;
        com.sleepycat.je.cleaner.FileSummary fileSummary;
        com.sleepycat.je.cleaner.INSummary inSummary;
        com.sleepycat.je.cleaner.ExpirationTracker expTracker;
        boolean countOnly, isLN, isIN, isBINDelta, isOldBINDelta, isDbTree, $z0, $z1, $z2, isObsolete#108, $z3, l38#122, $z4, l38#136, $z5, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z17, $z18, $z19, $z20, l25#385, $z21, $z22;
        com.sleepycat.je.txn.LockManager lockManager;
        com.sleepycat.je.cleaner.PackedOffsets obsoleteOffsets;
        com.sleepycat.je.cleaner.PackedOffsets$Iterator obsoleteIter;
        int readBufferSize, lookAheadCacheSize, adjustMem, nReads, $i0, $i1, $i2, $i3, nProcessedLNs#77, nProcessedEntries#79, $i8, $i9, $i10, $i12, $i16, $i17, $i18, $i20, $i21, $i22, $i23, $i24, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i38, $i39, $i42, $i44, $i46;
        com.sleepycat.je.dbi.MemoryBudget budget;
        com.sleepycat.je.cleaner.FileProcessor$LookAheadCache lookAheadCache, $r8;
        java.util.HashSet checkPendingDbSet, databases, $r9, $r14;
        java.util.HashMap dbCache, $r10;
        com.sleepycat.je.dbi.DbTree dbMapTree;
        com.sleepycat.je.cleaner.LocalUtilizationTracker localTracker, $r12;
        com.sleepycat.je.log.CleanerFileReader reader, $r15;
        com.sleepycat.je.tree.TreeLocation location, $r17;
        long logLsn, fileOffset, nextObsolete#16, $l4, $l5, $l6, $l7, expirationTime#110, $l11, $l13, $l19, $l25, $l37, $l40, $l41, $l43, $l45, $l47;
        com.sleepycat.je.dbi.DatabaseId dbId, pendingDbId;
        com.sleepycat.je.tree.LN targetLN;
        byte[] key, $r33;
        com.sleepycat.je.tree.IN targetIN;
        com.sleepycat.je.dbi.DatabaseImpl db, db#197;
        com.sleepycat.je.log.ChecksumException e, $r54;
        java.lang.Throwable l43, $r58;
        com.sleepycat.je.dbi.EnvironmentImpl $r0, $r6, $r7, $r11, $r13, $r16, $r23, $r24, $r25, $r28, $r29, $r39, $r45, $r47, $r48, $r52, $r56;
        com.sleepycat.je.txn.TxnManager $r1;
        com.sleepycat.je.cleaner.UtilizationProfile $r2, $r53;
        com.sleepycat.je.cleaner.Cleaner $r4, $r5, $r18, $r20, $r26, $r27, $r44, $r50, $r51;
        com.sleepycat.je.utilint.LongStat $r19, $r21;
        com.sleepycat.je.log.FileHeader $r22;
        byte $b14, $b15;
        com.sleepycat.je.log.entry.LNLogEntry lnEntry#215, lnEntry#320;
        com.sleepycat.je.cleaner.FileSelector $r31, $r59;
        com.sleepycat.je.cleaner.LNInfo $r32, $r43;
        java.lang.AssertionError $r40, $r41, $r46;
        com.sleepycat.je.tree.OldBINDelta delta#363;
        com.sleepycat.je.tree.BIN delta#371;
        java.util.Iterator l25#409;
        java.lang.Object $r49;
        com.sleepycat.je.EnvironmentFailureException $r55;
        com.sleepycat.je.dbi.EnvironmentFailureReason $r57;
        com.sleepycat.je.utilint.VLSN $r60, $r61;

        this := @this: com.sleepycat.je.cleaner.FileProcessor;

        fileNum := @parameter0: java.lang.Long;

        fileSummary := @parameter1: com.sleepycat.je.cleaner.FileSummary;

        inSummary := @parameter2: com.sleepycat.je.cleaner.INSummary;

        expTracker := @parameter3: com.sleepycat.je.cleaner.ExpirationTracker;

        if expTracker == null goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        countOnly = $z0;

        $r0 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r1 = virtualinvoke $r0.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.txn.TxnManager getTxnManager()>();

        lockManager = virtualinvoke $r1.<com.sleepycat.je.txn.TxnManager: com.sleepycat.je.txn.LockManager getLockManager()>();

        $r2 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.cleaner.UtilizationProfile profile>;

        if countOnly != 0 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        obsoleteOffsets = virtualinvoke $r2.<com.sleepycat.je.cleaner.UtilizationProfile: com.sleepycat.je.cleaner.PackedOffsets getObsoleteDetail(java.lang.Long,boolean)>(fileNum, $z1);

        obsoleteIter = virtualinvoke obsoleteOffsets.<com.sleepycat.je.cleaner.PackedOffsets: com.sleepycat.je.cleaner.PackedOffsets$Iterator iterator()>();

        nextObsolete#16 = -1L;

        $r4 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.cleaner.Cleaner cleaner>;

        readBufferSize = $r4.<com.sleepycat.je.cleaner.Cleaner: int readBufferSize>;

        if countOnly == 0 goto label05;

        $i0 = 0;

        goto label06;

     label05:
        $r5 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.cleaner.Cleaner cleaner>;

        $i0 = $r5.<com.sleepycat.je.cleaner.Cleaner: int lookAheadCacheSize>;

     label06:
        lookAheadCacheSize = $i0;

        $i1 = 2 * readBufferSize;

        $i2 = virtualinvoke obsoleteOffsets.<com.sleepycat.je.cleaner.PackedOffsets: int getLogSize()>();

        $i3 = $i1 + $i2;

        adjustMem = $i3 + lookAheadCacheSize;

        $r6 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        budget = virtualinvoke $r6.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.MemoryBudget getMemoryBudget()>();

        $l4 = (long) adjustMem;

        virtualinvoke budget.<com.sleepycat.je.dbi.MemoryBudget: void updateAdminMemoryUsage(long)>($l4);

        $r7 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r7.<com.sleepycat.je.dbi.EnvironmentImpl: void daemonEviction(boolean)>(1);

        if countOnly == 0 goto label07;

        $r8 = null;

        goto label08;

     label07:
        $r8 = new com.sleepycat.je.cleaner.FileProcessor$LookAheadCache;

        specialinvoke $r8.<com.sleepycat.je.cleaner.FileProcessor$LookAheadCache: void <init>(int)>(lookAheadCacheSize);

     label08:
        lookAheadCache = $r8;

        if countOnly == 0 goto label09;

        $r9 = null;

        goto label10;

     label09:
        $r9 = new java.util.HashSet;

        specialinvoke $r9.<java.util.HashSet: void <init>()>();

     label10:
        checkPendingDbSet = $r9;

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        dbCache = $r10;

        $r11 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        dbMapTree = virtualinvoke $r11.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.DbTree getDbTree()>();

        if countOnly == 0 goto label11;

        $r12 = null;

        goto label12;

     label11:
        $r12 = new com.sleepycat.je.cleaner.LocalUtilizationTracker;

        $r13 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        specialinvoke $r12.<com.sleepycat.je.cleaner.LocalUtilizationTracker: void <init>(com.sleepycat.je.dbi.EnvironmentImpl)>($r13);

     label12:
        localTracker = $r12;

        $r14 = new java.util.HashSet;

        specialinvoke $r14.<java.util.HashSet: void <init>()>();

        databases = $r14;

        $r15 = new com.sleepycat.je.log.CleanerFileReader;

        $r16 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $l5 = virtualinvoke fileNum.<java.lang.Long: long longValue()>();

        $l6 = staticinvoke <com.sleepycat.je.utilint.DbLsn: long makeLsn(long,int)>($l5, 0);

        specialinvoke $r15.<com.sleepycat.je.log.CleanerFileReader: void <init>(com.sleepycat.je.dbi.EnvironmentImpl,int,long,java.lang.Long,com.sleepycat.je.cleaner.FileSummary,com.sleepycat.je.cleaner.INSummary,com.sleepycat.je.cleaner.ExpirationTracker)>($r16, readBufferSize, $l6, fileNum, fileSummary, inSummary, expTracker);

        reader = $r15;

        virtualinvoke reader.<com.sleepycat.je.log.CleanerFileReader: void setAlwaysValidateChecksum(boolean)>(1);

     label13:
        $r17 = new com.sleepycat.je.tree.TreeLocation;

        specialinvoke $r17.<com.sleepycat.je.tree.TreeLocation: void <init>()>();

        location = $r17;

        nProcessedLNs#77 = 0;

        nProcessedEntries#79 = 0;

     label14:
        $z2 = virtualinvoke reader.<com.sleepycat.je.log.CleanerFileReader: boolean readNextEntryAllowExceptions()>();

        if $z2 == 0 goto label53;

        nProcessedEntries#79 = nProcessedEntries#79 + 1;

        $r18 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.cleaner.Cleaner cleaner>;

        $r19 = $r18.<com.sleepycat.je.cleaner.Cleaner: com.sleepycat.je.utilint.LongStat nEntriesRead>;

        virtualinvoke $r19.<com.sleepycat.je.utilint.LongStat: void increment()>();

        nReads = virtualinvoke reader.<com.sleepycat.je.log.CleanerFileReader: int getAndResetNReads()>();

        if nReads <= 0 goto label15;

        $r20 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.cleaner.Cleaner cleaner>;

        $r21 = $r20.<com.sleepycat.je.cleaner.Cleaner: com.sleepycat.je.utilint.LongStat nDiskReads>;

        $l7 = (long) nReads;

        virtualinvoke $r21.<com.sleepycat.je.utilint.LongStat: void add(long)>($l7);

     label15:
        logLsn = virtualinvoke reader.<com.sleepycat.je.log.CleanerFileReader: long getLastLsn()>();

        fileOffset = staticinvoke <com.sleepycat.je.utilint.DbLsn: long getFileOffset(long)>(logLsn);

        isLN = virtualinvoke reader.<com.sleepycat.je.log.CleanerFileReader: boolean isLN()>();

        isIN = virtualinvoke reader.<com.sleepycat.je.log.CleanerFileReader: boolean isIN()>();

        isBINDelta = virtualinvoke reader.<com.sleepycat.je.log.CleanerFileReader: boolean isBINDelta()>();

        isOldBINDelta = virtualinvoke reader.<com.sleepycat.je.log.CleanerFileReader: boolean isOldBINDelta()>();

        isDbTree = virtualinvoke reader.<com.sleepycat.je.log.CleanerFileReader: boolean isDbTree()>();

        isObsolete#108 = 0;

        expirationTime#110 = 0L;

        $z3 = virtualinvoke reader.<com.sleepycat.je.log.CleanerFileReader: boolean isFileHeader()>();

        if $z3 == 0 goto label17;

        $r22 = virtualinvoke reader.<com.sleepycat.je.log.CleanerFileReader: com.sleepycat.je.log.FileHeader getFileHeader()>();

        $i8 = virtualinvoke $r22.<com.sleepycat.je.log.FileHeader: int getLogVersion()>();

        this.<com.sleepycat.je.cleaner.FileProcessor: int fileLogVersion> = $i8;

        if countOnly == 0 goto label17;

        $i9 = this.<com.sleepycat.je.cleaner.FileProcessor: int fileLogVersion>;

        if $i9 >= 12 goto label17;

        l38#122 = 1;

     label16:
        $i10 = 0 - adjustMem;

        $l11 = (long) $i10;

        virtualinvoke budget.<com.sleepycat.je.dbi.MemoryBudget: void updateAdminMemoryUsage(long)>($l11);

        virtualinvoke dbMapTree.<com.sleepycat.je.dbi.DbTree: void releaseDbs(java.util.Map)>(dbCache);

        return l38#122;

     label17:
        if countOnly != 0 goto label19;

        $r23 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $z4 = virtualinvoke $r23.<com.sleepycat.je.dbi.EnvironmentImpl: boolean isClosing()>();

        if $z4 == 0 goto label19;

        l38#136 = 0;

     label18:
        $i12 = 0 - adjustMem;

        $l13 = (long) $i12;

        virtualinvoke budget.<com.sleepycat.je.dbi.MemoryBudget: void updateAdminMemoryUsage(long)>($l13);

        virtualinvoke dbMapTree.<com.sleepycat.je.dbi.DbTree: void releaseDbs(java.util.Map)>(dbCache);

        return l38#136;

     label19:
        if nReads <= 0 goto label20;

        $r24 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r24.<com.sleepycat.je.dbi.EnvironmentImpl: void updateBackgroundReads(int)>(nReads);

     label20:
        $r25 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r25.<com.sleepycat.je.dbi.EnvironmentImpl: void sleepAfterBackgroundIO()>();

     label21:
        $b14 = nextObsolete#16 cmp fileOffset;

        if $b14 >= 0 goto label22;

        $z5 = virtualinvoke obsoleteIter.<com.sleepycat.je.cleaner.PackedOffsets$Iterator: boolean hasNext()>();

        if $z5 == 0 goto label22;

        nextObsolete#16 = virtualinvoke obsoleteIter.<com.sleepycat.je.cleaner.PackedOffsets$Iterator: long next()>();

        goto label21;

     label22:
        $b15 = nextObsolete#16 cmp fileOffset;

        if $b15 != 0 goto label23;

        isObsolete#108 = 1;

     label23:
        if isObsolete#108 != 0 goto label24;

        if isLN != 0 goto label24;

        if isIN != 0 goto label24;

        if isBINDelta != 0 goto label24;

        if isOldBINDelta != 0 goto label24;

        if isDbTree != 0 goto label24;

        isObsolete#108 = 1;

     label24:
        if isObsolete#108 != 0 goto label25;

        if isOldBINDelta == 0 goto label25;

        $i16 = this.<com.sleepycat.je.cleaner.FileProcessor: int fileLogVersion>;

        if $i16 >= 8 goto label25;

        isObsolete#108 = 1;

     label25:
        dbId = virtualinvoke reader.<com.sleepycat.je.log.CleanerFileReader: com.sleepycat.je.dbi.DatabaseId getDatabaseId()>();

        if isObsolete#108 != 0 goto label28;

        if dbId == null goto label28;

        interfaceinvoke databases.<java.util.Set: boolean add(java.lang.Object)>(dbId);

        $r26 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.cleaner.Cleaner cleaner>;

        $i17 = $r26.<com.sleepycat.je.cleaner.Cleaner: int dbCacheClearCount>;

        $i18 = nProcessedEntries#79 % $i17;

        if $i18 != 0 goto label26;

        virtualinvoke dbMapTree.<com.sleepycat.je.dbi.DbTree: void releaseDbs(java.util.Map)>(dbCache);

        interfaceinvoke dbCache.<java.util.Map: void clear()>();

     label26:
        $r27 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.cleaner.Cleaner cleaner>;

        $l19 = $r27.<com.sleepycat.je.cleaner.Cleaner: long lockTimeout>;

        db#197 = virtualinvoke dbMapTree.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl getDb(com.sleepycat.je.dbi.DatabaseId,long,java.util.Map)>(dbId, $l19, dbCache);

        if db#197 == null goto label27;

        $z7 = virtualinvoke db#197.<com.sleepycat.je.dbi.DatabaseImpl: boolean isDeleted()>();

        if $z7 == 0 goto label29;

     label27:
        isObsolete#108 = 1;

        goto label29;

     label28:
        db#197 = null;

     label29:
        if isObsolete#108 != 0 goto label30;

        if isIN == 0 goto label30;

        $z8 = virtualinvoke db#197.<com.sleepycat.je.dbi.DatabaseImpl: boolean getSortedDuplicates()>();

        if $z8 == 0 goto label30;

        $i20 = this.<com.sleepycat.je.cleaner.FileProcessor: int fileLogVersion>;

        if $i20 >= 8 goto label30;

        isObsolete#108 = 1;

     label30:
        if isObsolete#108 != 0 goto label35;

        if isLN == 0 goto label35;

        lnEntry#215 = virtualinvoke reader.<com.sleepycat.je.log.CleanerFileReader: com.sleepycat.je.log.entry.LNLogEntry getLNLogEntry()>();

        $z9 = virtualinvoke lnEntry#215.<com.sleepycat.je.log.entry.LNLogEntry: boolean isDeleted()>();

        if $z9 == 0 goto label31;

        $i21 = this.<com.sleepycat.je.cleaner.FileProcessor: int fileLogVersion>;

        if $i21 <= 2 goto label31;

        isObsolete#108 = 1;

     label31:
        if isObsolete#108 != 0 goto label33;

        $z10 = virtualinvoke db#197.<com.sleepycat.je.dbi.DatabaseImpl: boolean isLNImmediatelyObsolete()>();

        if $z10 != 0 goto label32;

        $z11 = virtualinvoke lnEntry#215.<com.sleepycat.je.log.entry.LNLogEntry: boolean isEmbeddedLN()>();

        if $z11 == 0 goto label33;

     label32:
        isObsolete#108 = 1;

     label33:
        if isObsolete#108 != 0 goto label35;

        if countOnly != 0 goto label35;

        $i22 = virtualinvoke lnEntry#215.<com.sleepycat.je.log.entry.LNLogEntry: int getExpiration()>();

        $z12 = virtualinvoke lnEntry#215.<com.sleepycat.je.log.entry.LNLogEntry: boolean isExpirationInHours()>();

        expirationTime#110 = staticinvoke <com.sleepycat.je.dbi.TTL: long expirationToSystemTime(int,boolean)>($i22, $z12);

        $r28 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r29 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $i23 = virtualinvoke $r29.<com.sleepycat.je.dbi.EnvironmentImpl: int getTtlLnPurgeDelay()>();

        $i24 = 0 - $i23;

        $l25 = (long) $i24;

        $z13 = virtualinvoke $r28.<com.sleepycat.je.dbi.EnvironmentImpl: boolean expiresWithin(long,long)>(expirationTime#110, $l25);

        if $z13 == 0 goto label35;

        $r30 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(logLsn);

        $z14 = virtualinvoke lockManager.<com.sleepycat.je.txn.LockManager: boolean isLockUncontended(java.lang.Long)>($r30);

        if $z14 != 0 goto label34;

        $r31 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.cleaner.FileSelector fileSelector>;

        $r32 = new com.sleepycat.je.cleaner.LNInfo;

        $r33 = virtualinvoke lnEntry#215.<com.sleepycat.je.log.entry.LNLogEntry: byte[] getKey()>();

        specialinvoke $r32.<com.sleepycat.je.cleaner.LNInfo: void <init>(com.sleepycat.je.tree.LN,com.sleepycat.je.dbi.DatabaseId,byte[],long)>(null, dbId, $r33, expirationTime#110);

        virtualinvoke $r31.<com.sleepycat.je.cleaner.FileSelector: boolean addPendingLN(long,com.sleepycat.je.cleaner.LNInfo)>(logLsn, $r32);

        $i26 = this.<com.sleepycat.je.cleaner.FileProcessor: int nLNsLockedThisRun>;

        $i27 = $i26 + 1;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nLNsLockedThisRun> = $i27;

        goto label14;

     label34:
        isObsolete#108 = 1;

        $i28 = this.<com.sleepycat.je.cleaner.FileProcessor: int nLNsExpiredThisRun>;

        $i29 = $i28 + 1;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nLNsExpiredThisRun> = $i29;

        $i30 = virtualinvoke reader.<com.sleepycat.je.log.CleanerFileReader: int getLastEntrySize()>();

        virtualinvoke localTracker.<com.sleepycat.je.cleaner.LocalUtilizationTracker: void countObsoleteNodeInexact(long,com.sleepycat.je.log.LogEntryType,int,com.sleepycat.je.dbi.DatabaseImpl)>(logLsn, null, $i30, db#197);

     label35:
        if isObsolete#108 == 0 goto label41;

        if countOnly != 0 goto label39;

        if isLN == 0 goto label36;

        $i31 = this.<com.sleepycat.je.cleaner.FileProcessor: int nLNsObsoleteThisRun>;

        $i32 = $i31 + 1;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nLNsObsoleteThisRun> = $i32;

        goto label39;

     label36:
        if isBINDelta != 0 goto label37;

        if isOldBINDelta == 0 goto label38;

     label37:
        $i33 = this.<com.sleepycat.je.cleaner.FileProcessor: int nBINDeltasObsoleteThisRun>;

        $i34 = $i33 + 1;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nBINDeltasObsoleteThisRun> = $i34;

        goto label39;

     label38:
        if isIN == 0 goto label39;

        $i35 = this.<com.sleepycat.je.cleaner.FileProcessor: int nINsObsoleteThisRun>;

        $i36 = $i35 + 1;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nINsObsoleteThisRun> = $i36;

     label39:
        if checkPendingDbSet == null goto label40;

        if dbId == null goto label40;

        interfaceinvoke checkPendingDbSet.<java.util.Set: boolean add(java.lang.Object)>(dbId);

     label40:
        virtualinvoke reader.<com.sleepycat.je.log.CleanerFileReader: void countObsolete()>();

        goto label14;

     label41:
        virtualinvoke reader.<com.sleepycat.je.log.CleanerFileReader: void countExpired()>();

        if countOnly == 0 goto label42;

        goto label14;

     label42:
        $r39 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r39.<com.sleepycat.je.dbi.EnvironmentImpl: void daemonEviction(boolean)>(1);

        $z17 = <com.sleepycat.je.cleaner.FileProcessor: boolean $assertionsDisabled>;

        if $z17 != 0 goto label43;

        if lookAheadCache != null goto label43;

        $r40 = new java.lang.AssertionError;

        specialinvoke $r40.<java.lang.AssertionError: void <init>()>();

        throw $r40;

     label43:
        $z18 = <com.sleepycat.je.cleaner.FileProcessor: boolean $assertionsDisabled>;

        if $z18 != 0 goto label44;

        if checkPendingDbSet != null goto label44;

        $r41 = new java.lang.AssertionError;

        specialinvoke $r41.<java.lang.AssertionError: void <init>()>();

        throw $r41;

     label44:
        if isLN == 0 goto label47;

        lnEntry#320 = virtualinvoke reader.<com.sleepycat.je.log.CleanerFileReader: com.sleepycat.je.log.entry.LNLogEntry getLNLogEntry()>();

        virtualinvoke lnEntry#320.<com.sleepycat.je.log.entry.LNLogEntry: void postFetchInit(com.sleepycat.je.dbi.DatabaseImpl)>(db#197);

        targetLN = virtualinvoke lnEntry#320.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.tree.LN getLN()>();

        key = virtualinvoke lnEntry#320.<com.sleepycat.je.log.entry.LNLogEntry: byte[] getKey()>();

        $l37 = staticinvoke <com.sleepycat.je.utilint.DbLsn: long getFileOffset(long)>(logLsn);

        $r42 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l37);

        $r43 = new com.sleepycat.je.cleaner.LNInfo;

        specialinvoke $r43.<com.sleepycat.je.cleaner.LNInfo: void <init>(com.sleepycat.je.tree.LN,com.sleepycat.je.dbi.DatabaseId,byte[],long)>(targetLN, dbId, key, expirationTime#110);

        virtualinvoke lookAheadCache.<com.sleepycat.je.cleaner.FileProcessor$LookAheadCache: void add(java.lang.Long,com.sleepycat.je.cleaner.LNInfo)>($r42, $r43);

        $z19 = virtualinvoke lookAheadCache.<com.sleepycat.je.cleaner.FileProcessor$LookAheadCache: boolean isFull()>();

        if $z19 == 0 goto label45;

        specialinvoke this.<com.sleepycat.je.cleaner.FileProcessor: void processLN(java.lang.Long,com.sleepycat.je.tree.TreeLocation,com.sleepycat.je.cleaner.FileProcessor$LookAheadCache,java.util.Map,java.util.Set)>(fileNum, location, lookAheadCache, dbCache, checkPendingDbSet);

     label45:
        nProcessedLNs#77 = nProcessedLNs#77 + 1;

        $i38 = nProcessedLNs#77 % 100;

        if $i38 != 0 goto label46;

        $r44 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.cleaner.Cleaner cleaner>;

        virtualinvoke $r44.<com.sleepycat.je.cleaner.Cleaner: void processPending()>();

     label46:
        goto label52;

     label47:
        if isIN == 0 goto label48;

        targetIN = virtualinvoke reader.<com.sleepycat.je.log.CleanerFileReader: com.sleepycat.je.tree.IN getIN(com.sleepycat.je.dbi.DatabaseImpl)>(db#197);

        virtualinvoke targetIN.<com.sleepycat.je.tree.IN: void setDatabase(com.sleepycat.je.dbi.DatabaseImpl)>(db#197);

        specialinvoke this.<com.sleepycat.je.cleaner.FileProcessor: void processIN(com.sleepycat.je.tree.IN,com.sleepycat.je.dbi.DatabaseImpl,long)>(targetIN, db#197, logLsn);

        goto label52;

     label48:
        if isOldBINDelta == 0 goto label49;

        delta#363 = virtualinvoke reader.<com.sleepycat.je.log.CleanerFileReader: com.sleepycat.je.tree.OldBINDelta getOldBINDelta()>();

        specialinvoke this.<com.sleepycat.je.cleaner.FileProcessor: void processOldBINDelta(com.sleepycat.je.tree.OldBINDelta,com.sleepycat.je.dbi.DatabaseImpl,long)>(delta#363, db#197, logLsn);

        goto label52;

     label49:
        if isBINDelta == 0 goto label50;

        delta#371 = virtualinvoke reader.<com.sleepycat.je.log.CleanerFileReader: com.sleepycat.je.tree.BIN getBINDelta()>();

        specialinvoke this.<com.sleepycat.je.cleaner.FileProcessor: void processBINDelta(com.sleepycat.je.tree.BIN,com.sleepycat.je.dbi.DatabaseImpl,long)>(delta#371, db#197, logLsn);

        goto label52;

     label50:
        if isDbTree == 0 goto label51;

        $r45 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r45.<com.sleepycat.je.dbi.EnvironmentImpl: void rewriteMapTreeRoot(long)>(logLsn);

        goto label52;

     label51:
        $z20 = <com.sleepycat.je.cleaner.FileProcessor: boolean $assertionsDisabled>;

        if $z20 != 0 goto label52;

        $r46 = new java.lang.AssertionError;

        specialinvoke $r46.<java.lang.AssertionError: void <init>()>();

        throw $r46;

     label52:
        goto label14;

     label53:
        if countOnly == 0 goto label55;

        l25#385 = 1;

     label54:
        $i39 = 0 - adjustMem;

        $l40 = (long) $i39;

        virtualinvoke budget.<com.sleepycat.je.dbi.MemoryBudget: void updateAdminMemoryUsage(long)>($l40);

        virtualinvoke dbMapTree.<com.sleepycat.je.dbi.DbTree: void releaseDbs(java.util.Map)>(dbCache);

        return l25#385;

     label55:
        $z21 = virtualinvoke lookAheadCache.<com.sleepycat.je.cleaner.FileProcessor$LookAheadCache: boolean isEmpty()>();

        if $z21 != 0 goto label56;

        $r47 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r47.<com.sleepycat.je.dbi.EnvironmentImpl: void daemonEviction(boolean)>(1);

        specialinvoke this.<com.sleepycat.je.cleaner.FileProcessor: void processLN(java.lang.Long,com.sleepycat.je.tree.TreeLocation,com.sleepycat.je.cleaner.FileProcessor$LookAheadCache,java.util.Map,java.util.Set)>(fileNum, location, lookAheadCache, dbCache, checkPendingDbSet);

        $r48 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r48.<com.sleepycat.je.dbi.EnvironmentImpl: void sleepAfterBackgroundIO()>();

        goto label55;

     label56:
        l25#409 = interfaceinvoke checkPendingDbSet.<java.util.Set: java.util.Iterator iterator()>();

     label57:
        $z22 = interfaceinvoke l25#409.<java.util.Iterator: boolean hasNext()>();

        if $z22 == 0 goto label58;

        $r49 = interfaceinvoke l25#409.<java.util.Iterator: java.lang.Object next()>();

        pendingDbId = (com.sleepycat.je.dbi.DatabaseId) $r49;

        $r50 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.cleaner.Cleaner cleaner>;

        $l41 = $r50.<com.sleepycat.je.cleaner.Cleaner: long lockTimeout>;

        db = virtualinvoke dbMapTree.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl getDb(com.sleepycat.je.dbi.DatabaseId,long,java.util.Map)>(pendingDbId, $l41, dbCache);

        $r51 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.cleaner.Cleaner cleaner>;

        virtualinvoke $r51.<com.sleepycat.je.cleaner.Cleaner: void addPendingDB(com.sleepycat.je.dbi.DatabaseImpl)>(db);

        goto label57;

     label58:
        $i42 = virtualinvoke reader.<com.sleepycat.je.log.CleanerFileReader: int getNumRead()>();

        this.<com.sleepycat.je.cleaner.FileProcessor: int nEntriesReadThisRun> = $i42;

        $l43 = virtualinvoke reader.<com.sleepycat.je.log.CleanerFileReader: long getNRepeatIteratorReads()>();

        this.<com.sleepycat.je.cleaner.FileProcessor: long nRepeatIteratorReadsThisRun> = $l43;

        $r52 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r53 = virtualinvoke $r52.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.cleaner.UtilizationProfile getUtilizationProfile()>();

        virtualinvoke $r53.<com.sleepycat.je.cleaner.UtilizationProfile: void flushLocalTracker(com.sleepycat.je.cleaner.LocalUtilizationTracker)>(localTracker);

     label59:
        $i44 = 0 - adjustMem;

        $l45 = (long) $i44;

        virtualinvoke budget.<com.sleepycat.je.dbi.MemoryBudget: void updateAdminMemoryUsage(long)>($l45);

        virtualinvoke dbMapTree.<com.sleepycat.je.dbi.DbTree: void releaseDbs(java.util.Map)>(dbCache);

        goto label64;

     label60:
        $r54 := @caughtexception;

     label61:
        e = $r54;

        $r55 = new com.sleepycat.je.EnvironmentFailureException;

        $r56 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r57 = <com.sleepycat.je.dbi.EnvironmentFailureReason: com.sleepycat.je.dbi.EnvironmentFailureReason LOG_CHECKSUM>;

        specialinvoke $r55.<com.sleepycat.je.EnvironmentFailureException: void <init>(com.sleepycat.je.dbi.EnvironmentImpl,com.sleepycat.je.dbi.EnvironmentFailureReason,java.lang.Throwable)>($r56, $r57, e);

        throw $r55;

     label62:
        $r58 := @caughtexception;

        l43 = $r58;

     label63:
        $i46 = 0 - adjustMem;

        $l47 = (long) $i46;

        virtualinvoke budget.<com.sleepycat.je.dbi.MemoryBudget: void updateAdminMemoryUsage(long)>($l47);

        virtualinvoke dbMapTree.<com.sleepycat.je.dbi.DbTree: void releaseDbs(java.util.Map)>(dbCache);

        throw l43;

     label64:
        $r59 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.cleaner.FileSelector fileSelector>;

        $r60 = virtualinvoke reader.<com.sleepycat.je.log.CleanerFileReader: com.sleepycat.je.utilint.VLSN getFirstVLSN()>();

        $r61 = virtualinvoke reader.<com.sleepycat.je.log.CleanerFileReader: com.sleepycat.je.utilint.VLSN getLastVLSN()>();

        virtualinvoke $r59.<com.sleepycat.je.cleaner.FileSelector: void addCleanedFile(java.lang.Long,java.util.Set,com.sleepycat.je.utilint.VLSN,com.sleepycat.je.utilint.VLSN,com.sleepycat.je.dbi.MemoryBudget)>(fileNum, databases, $r60, $r61, budget);

        return 1;

        catch com.sleepycat.je.log.ChecksumException from label13 to label16 with label60;
        catch com.sleepycat.je.log.ChecksumException from label17 to label18 with label60;
        catch com.sleepycat.je.log.ChecksumException from label19 to label54 with label60;
        catch com.sleepycat.je.log.ChecksumException from label55 to label59 with label60;
        catch java.lang.Throwable from label13 to label16 with label62;
        catch java.lang.Throwable from label17 to label18 with label62;
        catch java.lang.Throwable from label19 to label54 with label62;
        catch java.lang.Throwable from label55 to label59 with label62;
        catch java.lang.Throwable from label61 to label63 with label62;
    }

    private void processLN(java.lang.Long, com.sleepycat.je.tree.TreeLocation, com.sleepycat.je.cleaner.FileProcessor$LookAheadCache, java.util.Map, java.util.Set)
    {
        com.sleepycat.je.cleaner.FileProcessor this;
        java.lang.Long fileNum, offset, myOffset, $r12, $r21, $r26, $r31, $r37, $r46;
        com.sleepycat.je.tree.TreeLocation location;
        com.sleepycat.je.cleaner.FileProcessor$LookAheadCache lookAheadCache;
        java.util.Map dbCache;
        java.util.Set checkPendingDbSet, $r8, $r17, $r33, $r42;
        com.sleepycat.je.cleaner.LNInfo info, myInfo, $r14, $r23, pendingLN#164, pendingLN#219, $r39, $r48;
        com.sleepycat.je.tree.LN lnFromLog;
        byte[] keyFromLog;
        long logLsn, binLsn, $l0, $l1, $l2, $l9, $l12, $l13, $l15, $l16, $l18, $l23, $l24;
        com.sleepycat.je.dbi.DatabaseId dbId;
        com.sleepycat.je.dbi.DatabaseImpl db;
        com.sleepycat.je.tree.Tree tree;
        boolean parentFound, $z0, processedHere#44, obsolete#46, completed#48, $z2, completed#78, $z3, $z5, completed#121, $z6, $z8, $z9, $z10, $z12;
        int index, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, i#175, $i14, $i19, $i20, $i21, $i22;
        java.util.Iterator l19, l29, l22#85, l22#128;
        java.util.Map$Entry entry, entry, entry#91, entry#134;
        java.lang.Throwable l28, $r41;
        com.sleepycat.je.dbi.EnvironmentImpl $r0;
        com.sleepycat.je.dbi.DbTree $r1;
        com.sleepycat.je.cleaner.Cleaner $r2, $r15, $r24, $r40, $r49;
        com.sleepycat.je.tree.BIN bin#50;
        java.util.HashMap pendingLNs#52, $r25, $r30;
        java.lang.AssertionError $r5;
        com.sleepycat.je.CacheMode $r6;
        java.lang.Object $r9, $r11, $r13, $r18, $r20, $r22, $r34, $r36, $r38, $r43, $r45, $r47;
        com.sleepycat.je.cleaner.FileSelector $r10, $r19, $r35, $r44;
        byte $b17;

        this := @this: com.sleepycat.je.cleaner.FileProcessor;

        fileNum := @parameter0: java.lang.Long;

        location := @parameter1: com.sleepycat.je.tree.TreeLocation;

        lookAheadCache := @parameter2: com.sleepycat.je.cleaner.FileProcessor$LookAheadCache;

        dbCache := @parameter3: java.util.Map;

        checkPendingDbSet := @parameter4: java.util.Set;

        offset = virtualinvoke lookAheadCache.<com.sleepycat.je.cleaner.FileProcessor$LookAheadCache: java.lang.Long nextOffset()>();

        info = virtualinvoke lookAheadCache.<com.sleepycat.je.cleaner.FileProcessor$LookAheadCache: com.sleepycat.je.cleaner.LNInfo remove(java.lang.Long)>(offset);

        lnFromLog = virtualinvoke info.<com.sleepycat.je.cleaner.LNInfo: com.sleepycat.je.tree.LN getLN()>();

        keyFromLog = virtualinvoke info.<com.sleepycat.je.cleaner.LNInfo: byte[] getKey()>();

        $l0 = virtualinvoke fileNum.<java.lang.Long: long longValue()>();

        $l1 = virtualinvoke offset.<java.lang.Long: long longValue()>();

        logLsn = staticinvoke <com.sleepycat.je.utilint.DbLsn: long makeLsn(long,long)>($l0, $l1);

        dbId = virtualinvoke info.<com.sleepycat.je.cleaner.LNInfo: com.sleepycat.je.dbi.DatabaseId getDbId()>();

        $r0 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r1 = virtualinvoke $r0.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.DbTree getDbTree()>();

        $r2 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.cleaner.Cleaner cleaner>;

        $l2 = $r2.<com.sleepycat.je.cleaner.Cleaner: long lockTimeout>;

        db = virtualinvoke $r1.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl getDb(com.sleepycat.je.dbi.DatabaseId,long,java.util.Map)>(dbId, $l2, dbCache);

        if db == null goto label01;

        $z0 = virtualinvoke db.<com.sleepycat.je.dbi.DatabaseImpl: boolean isDeleted()>();

        if $z0 == 0 goto label03;

     label01:
        $i3 = this.<com.sleepycat.je.cleaner.FileProcessor: int nLNsObsoleteThisRun>;

        $i4 = $i3 + 1;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nLNsObsoleteThisRun> = $i4;

        if checkPendingDbSet == null goto label02;

        interfaceinvoke checkPendingDbSet.<java.util.Set: boolean add(java.lang.Object)>(dbId);

     label02:
        return;

     label03:
        $i5 = this.<com.sleepycat.je.cleaner.FileProcessor: int nLNsCleanedThisRun>;

        $i6 = $i5 + 1;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nLNsCleanedThisRun> = $i6;

        processedHere#44 = 1;

        obsolete#46 = 0;

        completed#48 = 0;

        bin#50 = null;

        pendingLNs#52 = null;

     label04:
        tree = virtualinvoke db.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.tree.Tree getTree()>();

        $z2 = <com.sleepycat.je.cleaner.FileProcessor: boolean $assertionsDisabled>;

        if $z2 != 0 goto label05;

        if tree != null goto label05;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label05:
        $r6 = <com.sleepycat.je.cleaner.Cleaner: com.sleepycat.je.CacheMode UPDATE_GENERATION>;

        parentFound = virtualinvoke tree.<com.sleepycat.je.tree.Tree: boolean getParentBINForChildLN(com.sleepycat.je.tree.TreeLocation,byte[],boolean,boolean,com.sleepycat.je.CacheMode)>(location, keyFromLog, 0, 0, $r6);

        bin#50 = location.<com.sleepycat.je.tree.TreeLocation: com.sleepycat.je.tree.BIN bin>;

        index = location.<com.sleepycat.je.tree.TreeLocation: int index>;

        if parentFound != 0 goto label11;

        $i7 = this.<com.sleepycat.je.cleaner.FileProcessor: int nLNsDeadThisRun>;

        $i8 = $i7 + 1;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nLNsDeadThisRun> = $i8;

        obsolete#46 = 1;

        completed#78 = 1;

     label06:
        if bin#50 == null goto label07;

        virtualinvoke bin#50.<com.sleepycat.je.tree.BIN: void releaseLatch()>();

     label07:
        if pendingLNs#52 == null goto label09;

        $r8 = interfaceinvoke pendingLNs#52.<java.util.Map: java.util.Set entrySet()>();

        l22#85 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label08:
        $z3 = interfaceinvoke l22#85.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label09;

        $r9 = interfaceinvoke l22#85.<java.util.Iterator: java.lang.Object next()>();

        entry#91 = (java.util.Map$Entry) $r9;

        $r10 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.cleaner.FileSelector fileSelector>;

        $r11 = interfaceinvoke entry#91.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r12 = (java.lang.Long) $r11;

        $l9 = virtualinvoke $r12.<java.lang.Long: long longValue()>();

        $r13 = interfaceinvoke entry#91.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r14 = (com.sleepycat.je.cleaner.LNInfo) $r13;

        virtualinvoke $r10.<com.sleepycat.je.cleaner.FileSelector: boolean addPendingLN(long,com.sleepycat.je.cleaner.LNInfo)>($l9, $r14);

        goto label08;

     label09:
        if processedHere#44 == 0 goto label10;

        $r15 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.cleaner.Cleaner cleaner>;

        virtualinvoke $r15.<com.sleepycat.je.cleaner.Cleaner: void logFine(java.lang.String,com.sleepycat.je.tree.Node,long,boolean,boolean,boolean)>("CleanLN:", lnFromLog, logLsn, completed#78, obsolete#46, 0);

     label10:
        return;

     label11:
        $z5 = virtualinvoke bin#50.<com.sleepycat.je.tree.BIN: boolean isEntryKnownDeleted(int)>(index);

        if $z5 == 0 goto label17;

        $i10 = this.<com.sleepycat.je.cleaner.FileProcessor: int nLNsDeadThisRun>;

        $i11 = $i10 + 1;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nLNsDeadThisRun> = $i11;

        obsolete#46 = 1;

        completed#121 = 1;

     label12:
        if bin#50 == null goto label13;

        virtualinvoke bin#50.<com.sleepycat.je.tree.BIN: void releaseLatch()>();

     label13:
        if pendingLNs#52 == null goto label15;

        $r17 = interfaceinvoke pendingLNs#52.<java.util.Map: java.util.Set entrySet()>();

        l22#128 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label14:
        $z6 = interfaceinvoke l22#128.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label15;

        $r18 = interfaceinvoke l22#128.<java.util.Iterator: java.lang.Object next()>();

        entry#134 = (java.util.Map$Entry) $r18;

        $r19 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.cleaner.FileSelector fileSelector>;

        $r20 = interfaceinvoke entry#134.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r21 = (java.lang.Long) $r20;

        $l12 = virtualinvoke $r21.<java.lang.Long: long longValue()>();

        $r22 = interfaceinvoke entry#134.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r23 = (com.sleepycat.je.cleaner.LNInfo) $r22;

        virtualinvoke $r19.<com.sleepycat.je.cleaner.FileSelector: boolean addPendingLN(long,com.sleepycat.je.cleaner.LNInfo)>($l12, $r23);

        goto label14;

     label15:
        if processedHere#44 == 0 goto label16;

        $r24 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.cleaner.Cleaner cleaner>;

        virtualinvoke $r24.<com.sleepycat.je.cleaner.Cleaner: void logFine(java.lang.String,com.sleepycat.je.tree.Node,long,boolean,boolean,boolean)>("CleanLN:", lnFromLog, logLsn, completed#121, obsolete#46, 0);

     label16:
        return;

     label17:
        processedHere#44 = 0;

        $l13 = virtualinvoke bin#50.<com.sleepycat.je.tree.BIN: long getLsn(int)>(index);

        pendingLN#164 = specialinvoke this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.cleaner.LNInfo processFoundLN(com.sleepycat.je.cleaner.LNInfo,long,long,com.sleepycat.je.tree.BIN,int)>(info, logLsn, $l13, bin#50, index);

        if pendingLN#164 == null goto label18;

        $r25 = new java.util.HashMap;

        specialinvoke $r25.<java.util.HashMap: void <init>()>();

        pendingLNs#52 = $r25;

        $r26 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(logLsn);

        interfaceinvoke pendingLNs#52.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r26, pendingLN#164);

     label18:
        completed#48 = 1;

        i#175 = 0;

     label19:
        $i14 = virtualinvoke bin#50.<com.sleepycat.je.tree.BIN: int getNEntries()>();

        if i#175 >= $i14 goto label22;

        binLsn = virtualinvoke bin#50.<com.sleepycat.je.tree.BIN: long getLsn(int)>(i#175);

        if i#175 == index goto label21;

        $z8 = virtualinvoke bin#50.<com.sleepycat.je.tree.BIN: boolean isEntryKnownDeleted(int)>(i#175);

        if $z8 != 0 goto label21;

        $z9 = virtualinvoke bin#50.<com.sleepycat.je.tree.BIN: boolean isEntryPendingDeleted(int)>(i#175);

        if $z9 != 0 goto label21;

        $l15 = staticinvoke <com.sleepycat.je.utilint.DbLsn: long getFileNumber(long)>(binLsn);

        $l16 = virtualinvoke fileNum.<java.lang.Long: long longValue()>();

        $b17 = $l15 cmp $l16;

        if $b17 != 0 goto label21;

        $l18 = staticinvoke <com.sleepycat.je.utilint.DbLsn: long getFileOffset(long)>(binLsn);

        myOffset = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l18);

        myInfo = virtualinvoke lookAheadCache.<com.sleepycat.je.cleaner.FileProcessor$LookAheadCache: com.sleepycat.je.cleaner.LNInfo remove(java.lang.Long)>(myOffset);

        if myInfo == null goto label21;

        $i19 = this.<com.sleepycat.je.cleaner.FileProcessor: int nLNQueueHitsThisRun>;

        $i20 = $i19 + 1;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nLNQueueHitsThisRun> = $i20;

        $i21 = this.<com.sleepycat.je.cleaner.FileProcessor: int nLNsCleanedThisRun>;

        $i22 = $i21 + 1;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nLNsCleanedThisRun> = $i22;

        pendingLN#219 = specialinvoke this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.cleaner.LNInfo processFoundLN(com.sleepycat.je.cleaner.LNInfo,long,long,com.sleepycat.je.tree.BIN,int)>(myInfo, binLsn, binLsn, bin#50, i#175);

        if pendingLN#219 == null goto label21;

        if pendingLNs#52 != null goto label20;

        $r30 = new java.util.HashMap;

        specialinvoke $r30.<java.util.HashMap: void <init>()>();

        pendingLNs#52 = $r30;

     label20:
        $r31 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(binLsn);

        interfaceinvoke pendingLNs#52.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r31, pendingLN#219);

     label21:
        i#175 = i#175 + 1;

        goto label19;

     label22:
        if bin#50 == null goto label23;

        virtualinvoke bin#50.<com.sleepycat.je.tree.BIN: void releaseLatch()>();

     label23:
        if pendingLNs#52 == null goto label25;

        $r33 = interfaceinvoke pendingLNs#52.<java.util.Map: java.util.Set entrySet()>();

        l19 = interfaceinvoke $r33.<java.util.Set: java.util.Iterator iterator()>();

     label24:
        $z10 = interfaceinvoke l19.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label25;

        $r34 = interfaceinvoke l19.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $r34;

        $r35 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.cleaner.FileSelector fileSelector>;

        $r36 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r37 = (java.lang.Long) $r36;

        $l23 = virtualinvoke $r37.<java.lang.Long: long longValue()>();

        $r38 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r39 = (com.sleepycat.je.cleaner.LNInfo) $r38;

        virtualinvoke $r35.<com.sleepycat.je.cleaner.FileSelector: boolean addPendingLN(long,com.sleepycat.je.cleaner.LNInfo)>($l23, $r39);

        goto label24;

     label25:
        if processedHere#44 == 0 goto label33;

        $r40 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.cleaner.Cleaner cleaner>;

        virtualinvoke $r40.<com.sleepycat.je.cleaner.Cleaner: void logFine(java.lang.String,com.sleepycat.je.tree.Node,long,boolean,boolean,boolean)>("CleanLN:", lnFromLog, logLsn, completed#48, obsolete#46, 0);

        goto label33;

     label26:
        $r41 := @caughtexception;

     label27:
        l28 = $r41;

     label28:
        if bin#50 == null goto label29;

        virtualinvoke bin#50.<com.sleepycat.je.tree.BIN: void releaseLatch()>();

     label29:
        if pendingLNs#52 == null goto label31;

        $r42 = interfaceinvoke pendingLNs#52.<java.util.Map: java.util.Set entrySet()>();

        l29 = interfaceinvoke $r42.<java.util.Set: java.util.Iterator iterator()>();

     label30:
        $z12 = interfaceinvoke l29.<java.util.Iterator: boolean hasNext()>();

        if $z12 == 0 goto label31;

        $r43 = interfaceinvoke l29.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $r43;

        $r44 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.cleaner.FileSelector fileSelector>;

        $r45 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r46 = (java.lang.Long) $r45;

        $l24 = virtualinvoke $r46.<java.lang.Long: long longValue()>();

        $r47 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r48 = (com.sleepycat.je.cleaner.LNInfo) $r47;

        virtualinvoke $r44.<com.sleepycat.je.cleaner.FileSelector: boolean addPendingLN(long,com.sleepycat.je.cleaner.LNInfo)>($l24, $r48);

        goto label30;

     label31:
        if processedHere#44 == 0 goto label32;

        $r49 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.cleaner.Cleaner cleaner>;

        virtualinvoke $r49.<com.sleepycat.je.cleaner.Cleaner: void logFine(java.lang.String,com.sleepycat.je.tree.Node,long,boolean,boolean,boolean)>("CleanLN:", lnFromLog, logLsn, completed#48, obsolete#46, 0);

     label32:
        throw l28;

     label33:
        return;

        catch java.lang.Throwable from label04 to label06 with label26;
        catch java.lang.Throwable from label11 to label12 with label26;
        catch java.lang.Throwable from label17 to label22 with label26;
        catch java.lang.Throwable from label27 to label28 with label26;
    }

    private void processIN(com.sleepycat.je.tree.IN, com.sleepycat.je.dbi.DatabaseImpl, long)
    {
        com.sleepycat.je.cleaner.FileProcessor this;
        com.sleepycat.je.tree.IN inClone, inInTree;
        com.sleepycat.je.dbi.DatabaseImpl db;
        long logLsn;
        com.sleepycat.je.tree.Tree tree;
        java.lang.Throwable l10, $r6;
        boolean obsolete#2, dirtied#4, completed#6, $z0, completed#46;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.AssertionError $r1;
        com.sleepycat.je.dbi.EnvironmentImpl $r4;
        com.sleepycat.je.cleaner.Cleaner $r5, $r7;

        this := @this: com.sleepycat.je.cleaner.FileProcessor;

        inClone := @parameter0: com.sleepycat.je.tree.IN;

        db := @parameter1: com.sleepycat.je.dbi.DatabaseImpl;

        logLsn := @parameter2: long;

        obsolete#2 = 0;

        dirtied#4 = 0;

        completed#6 = 0;

     label1:
        $i0 = this.<com.sleepycat.je.cleaner.FileProcessor: int nINsCleanedThisRun>;

        $i1 = $i0 + 1;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nINsCleanedThisRun> = $i1;

        tree = virtualinvoke db.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.tree.Tree getTree()>();

        $z0 = <com.sleepycat.je.cleaner.FileProcessor: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if tree != null goto label2;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label2:
        inInTree = specialinvoke this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.tree.IN findINInTree(com.sleepycat.je.tree.Tree,com.sleepycat.je.dbi.DatabaseImpl,com.sleepycat.je.tree.IN,long)>(tree, db, inClone, logLsn);

        if inInTree != null goto label3;

        $i2 = this.<com.sleepycat.je.cleaner.FileProcessor: int nINsDeadThisRun>;

        $i3 = $i2 + 1;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nINsDeadThisRun> = $i3;

        obsolete#2 = 1;

        goto label4;

     label3:
        $i4 = this.<com.sleepycat.je.cleaner.FileProcessor: int nINsMigratedThisRun>;

        $i5 = $i4 + 1;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nINsMigratedThisRun> = $i5;

        virtualinvoke inInTree.<com.sleepycat.je.tree.IN: void setDirty(boolean)>(1);

        virtualinvoke inInTree.<com.sleepycat.je.tree.IN: void setProhibitNextDelta(boolean)>(1);

        $r4 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r4.<com.sleepycat.je.dbi.EnvironmentImpl: void lazyCompress(com.sleepycat.je.tree.IN,boolean)>(inInTree, 1);

        virtualinvoke inInTree.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        dirtied#4 = 1;

     label4:
        completed#46 = 1;

     label5:
        $r5 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.cleaner.Cleaner cleaner>;

        virtualinvoke $r5.<com.sleepycat.je.cleaner.Cleaner: void logFine(java.lang.String,com.sleepycat.je.tree.Node,long,boolean,boolean,boolean)>("CleanIN:", inClone, logLsn, completed#46, obsolete#2, dirtied#4);

        goto label9;

     label6:
        $r6 := @caughtexception;

     label7:
        l10 = $r6;

     label8:
        $r7 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.cleaner.Cleaner cleaner>;

        virtualinvoke $r7.<com.sleepycat.je.cleaner.Cleaner: void logFine(java.lang.String,com.sleepycat.je.tree.Node,long,boolean,boolean,boolean)>("CleanIN:", inClone, logLsn, completed#6, obsolete#2, dirtied#4);

        throw l10;

     label9:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void processOldBINDelta(com.sleepycat.je.tree.OldBINDelta, com.sleepycat.je.dbi.DatabaseImpl, long)
    {
        com.sleepycat.je.cleaner.FileProcessor this;
        com.sleepycat.je.tree.OldBINDelta deltaClone;
        com.sleepycat.je.dbi.DatabaseImpl db;
        long logLsn, treeLsn;
        byte[] searchKey;
        com.sleepycat.je.tree.BIN treeBin;
        int 'cmp', $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.Throwable l10, $r7;
        com.sleepycat.je.tree.Tree $r1;
        com.sleepycat.je.CacheMode $r2;
        byte $b4;

        this := @this: com.sleepycat.je.cleaner.FileProcessor;

        deltaClone := @parameter0: com.sleepycat.je.tree.OldBINDelta;

        db := @parameter1: com.sleepycat.je.dbi.DatabaseImpl;

        logLsn := @parameter2: long;

        $i0 = this.<com.sleepycat.je.cleaner.FileProcessor: int nBINDeltasCleanedThisRun>;

        $i1 = $i0 + 1;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nBINDeltasCleanedThisRun> = $i1;

        searchKey = virtualinvoke deltaClone.<com.sleepycat.je.tree.OldBINDelta: byte[] getSearchKey()>();

        $r1 = virtualinvoke db.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.tree.Tree getTree()>();

        $r2 = <com.sleepycat.je.cleaner.Cleaner: com.sleepycat.je.CacheMode UPDATE_GENERATION>;

        treeBin = virtualinvoke $r1.<com.sleepycat.je.tree.Tree: com.sleepycat.je.tree.BIN search(byte[],com.sleepycat.je.CacheMode)>(searchKey, $r2);

        if treeBin != null goto label01;

        $i2 = this.<com.sleepycat.je.cleaner.FileProcessor: int nBINDeltasDeadThisRun>;

        $i3 = $i2 + 1;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nBINDeltasDeadThisRun> = $i3;

        return;

     label01:
        treeLsn = virtualinvoke treeBin.<com.sleepycat.je.tree.BIN: long getLastLoggedLsn()>();

        $b4 = treeLsn cmp -1L;

        if $b4 != 0 goto label03;

        $i5 = this.<com.sleepycat.je.cleaner.FileProcessor: int nBINDeltasDeadThisRun>;

        $i6 = $i5 + 1;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nBINDeltasDeadThisRun> = $i6;

     label02:
        virtualinvoke treeBin.<com.sleepycat.je.tree.BIN: void releaseLatch()>();

        return;

     label03:
        'cmp' = staticinvoke <com.sleepycat.je.utilint.DbLsn: int compareTo(long,long)>(treeLsn, logLsn);

        if 'cmp' <= 0 goto label05;

        $i7 = this.<com.sleepycat.je.cleaner.FileProcessor: int nBINDeltasDeadThisRun>;

        $i8 = $i7 + 1;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nBINDeltasDeadThisRun> = $i8;

     label04:
        virtualinvoke treeBin.<com.sleepycat.je.tree.BIN: void releaseLatch()>();

        return;

     label05:
        virtualinvoke treeBin.<com.sleepycat.je.tree.BIN: void setDirty(boolean)>(1);

        $i9 = this.<com.sleepycat.je.cleaner.FileProcessor: int nBINDeltasMigratedThisRun>;

        $i10 = $i9 + 1;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nBINDeltasMigratedThisRun> = $i10;

     label06:
        virtualinvoke treeBin.<com.sleepycat.je.tree.BIN: void releaseLatch()>();

        goto label10;

     label07:
        $r7 := @caughtexception;

     label08:
        l10 = $r7;

     label09:
        virtualinvoke treeBin.<com.sleepycat.je.tree.BIN: void releaseLatch()>();

        throw l10;

     label10:
        return;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    private void processBINDelta(com.sleepycat.je.tree.BIN, com.sleepycat.je.dbi.DatabaseImpl, long)
    {
        com.sleepycat.je.cleaner.FileProcessor this;
        com.sleepycat.je.tree.BIN deltaClone, treeBin#64;
        com.sleepycat.je.dbi.DatabaseImpl db;
        long logLsn, treeLsn;
        com.sleepycat.je.CacheMode $r0, $r2, $r15, $r18;
        com.sleepycat.je.tree.SearchResult result;
        int 'cmp', $i0, $i1, $i2, $i3, $i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        java.lang.Throwable l10, $r23;
        com.sleepycat.je.tree.Tree $r3;
        boolean $z0;
        com.sleepycat.je.tree.IN $r5, $r6, $r7, $r9, $r10, $r12, $r13, $r14, $r16, $r17, $r21, $r22, $r24, $r25;
        byte $b5;
        com.sleepycat.je.dbi.EnvironmentImpl $r19;

        this := @this: com.sleepycat.je.cleaner.FileProcessor;

        deltaClone := @parameter0: com.sleepycat.je.tree.BIN;

        db := @parameter1: com.sleepycat.je.dbi.DatabaseImpl;

        logLsn := @parameter2: long;

        $i0 = this.<com.sleepycat.je.cleaner.FileProcessor: int nBINDeltasCleanedThisRun>;

        $i1 = $i0 + 1;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nBINDeltasCleanedThisRun> = $i1;

        virtualinvoke deltaClone.<com.sleepycat.je.tree.BIN: void setDatabase(com.sleepycat.je.dbi.DatabaseImpl)>(db);

        $r2 = <com.sleepycat.je.CacheMode: com.sleepycat.je.CacheMode UNCHANGED>;

        virtualinvoke deltaClone.<com.sleepycat.je.tree.BIN: void latch(com.sleepycat.je.CacheMode)>($r2);

        $r3 = virtualinvoke db.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.tree.Tree getTree()>();

        $r0 = <com.sleepycat.je.CacheMode: com.sleepycat.je.CacheMode UNCHANGED>;

        result = virtualinvoke $r3.<com.sleepycat.je.tree.Tree: com.sleepycat.je.tree.SearchResult getParentINForChildIN(com.sleepycat.je.tree.IN,boolean,boolean,com.sleepycat.je.CacheMode)>(deltaClone, 1, 1, $r0);

     label01:
        $z0 = result.<com.sleepycat.je.tree.SearchResult: boolean exactParentFound>;

        if $z0 != 0 goto label04;

        $i2 = this.<com.sleepycat.je.cleaner.FileProcessor: int nBINDeltasDeadThisRun>;

        $i3 = $i2 + 1;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nBINDeltasDeadThisRun> = $i3;

     label02:
        $r5 = result.<com.sleepycat.je.tree.SearchResult: com.sleepycat.je.tree.IN parent>;

        if $r5 == null goto label03;

        $r6 = result.<com.sleepycat.je.tree.SearchResult: com.sleepycat.je.tree.IN parent>;

        virtualinvoke $r6.<com.sleepycat.je.tree.IN: void releaseLatch()>();

     label03:
        return;

     label04:
        $r7 = result.<com.sleepycat.je.tree.SearchResult: com.sleepycat.je.tree.IN parent>;

        $i4 = result.<com.sleepycat.je.tree.SearchResult: int index>;

        treeLsn = virtualinvoke $r7.<com.sleepycat.je.tree.IN: long getLsn(int)>($i4);

        $b5 = treeLsn cmp -1L;

        if $b5 != 0 goto label07;

        $i6 = this.<com.sleepycat.je.cleaner.FileProcessor: int nBINDeltasDeadThisRun>;

        $i7 = $i6 + 1;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nBINDeltasDeadThisRun> = $i7;

     label05:
        $r9 = result.<com.sleepycat.je.tree.SearchResult: com.sleepycat.je.tree.IN parent>;

        if $r9 == null goto label06;

        $r10 = result.<com.sleepycat.je.tree.SearchResult: com.sleepycat.je.tree.IN parent>;

        virtualinvoke $r10.<com.sleepycat.je.tree.IN: void releaseLatch()>();

     label06:
        return;

     label07:
        'cmp' = staticinvoke <com.sleepycat.je.utilint.DbLsn: int compareTo(long,long)>(treeLsn, logLsn);

        if 'cmp' == 0 goto label10;

        $i8 = this.<com.sleepycat.je.cleaner.FileProcessor: int nBINDeltasDeadThisRun>;

        $i9 = $i8 + 1;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nBINDeltasDeadThisRun> = $i9;

     label08:
        $r12 = result.<com.sleepycat.je.tree.SearchResult: com.sleepycat.je.tree.IN parent>;

        if $r12 == null goto label09;

        $r13 = result.<com.sleepycat.je.tree.SearchResult: com.sleepycat.je.tree.IN parent>;

        virtualinvoke $r13.<com.sleepycat.je.tree.IN: void releaseLatch()>();

     label09:
        return;

     label10:
        $r14 = result.<com.sleepycat.je.tree.SearchResult: com.sleepycat.je.tree.IN parent>;

        $i10 = result.<com.sleepycat.je.tree.SearchResult: int index>;

        $r15 = <com.sleepycat.je.CacheMode: com.sleepycat.je.CacheMode UNCHANGED>;

        $r16 = virtualinvoke $r14.<com.sleepycat.je.tree.IN: com.sleepycat.je.tree.IN loadIN(int,com.sleepycat.je.CacheMode)>($i10, $r15);

        treeBin#64 = (com.sleepycat.je.tree.BIN) $r16;

        if treeBin#64 != null goto label11;

        treeBin#64 = deltaClone;

        virtualinvoke treeBin#64.<com.sleepycat.je.tree.BIN: void latchNoUpdateLRU(com.sleepycat.je.dbi.DatabaseImpl)>(db);

        virtualinvoke treeBin#64.<com.sleepycat.je.tree.BIN: void postFetchInit(com.sleepycat.je.dbi.DatabaseImpl,long)>(db, logLsn);

        $r17 = result.<com.sleepycat.je.tree.SearchResult: com.sleepycat.je.tree.IN parent>;

        $i11 = result.<com.sleepycat.je.tree.SearchResult: int index>;

        virtualinvoke $r17.<com.sleepycat.je.tree.IN: void attachNode(int,com.sleepycat.je.tree.Node,byte[])>($i11, treeBin#64, null);

        goto label12;

     label11:
        $r18 = <com.sleepycat.je.CacheMode: com.sleepycat.je.CacheMode UNCHANGED>;

        virtualinvoke treeBin#64.<com.sleepycat.je.tree.BIN: void latch(com.sleepycat.je.CacheMode)>($r18);

     label12:
        $r19 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r19.<com.sleepycat.je.dbi.EnvironmentImpl: void lazyCompress(com.sleepycat.je.tree.IN,boolean)>(treeBin#64, 1);

        virtualinvoke treeBin#64.<com.sleepycat.je.tree.BIN: void setDirty(boolean)>(1);

        virtualinvoke treeBin#64.<com.sleepycat.je.tree.BIN: void releaseLatch()>();

        $i12 = this.<com.sleepycat.je.cleaner.FileProcessor: int nBINDeltasMigratedThisRun>;

        $i13 = $i12 + 1;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nBINDeltasMigratedThisRun> = $i13;

     label13:
        $r21 = result.<com.sleepycat.je.tree.SearchResult: com.sleepycat.je.tree.IN parent>;

        if $r21 == null goto label18;

        $r22 = result.<com.sleepycat.je.tree.SearchResult: com.sleepycat.je.tree.IN parent>;

        virtualinvoke $r22.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        goto label18;

     label14:
        $r23 := @caughtexception;

     label15:
        l10 = $r23;

     label16:
        $r24 = result.<com.sleepycat.je.tree.SearchResult: com.sleepycat.je.tree.IN parent>;

        if $r24 == null goto label17;

        $r25 = result.<com.sleepycat.je.tree.SearchResult: com.sleepycat.je.tree.IN parent>;

        virtualinvoke $r25.<com.sleepycat.je.tree.IN: void releaseLatch()>();

     label17:
        throw l10;

     label18:
        return;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label10 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    private com.sleepycat.je.tree.IN findINInTree(com.sleepycat.je.tree.Tree, com.sleepycat.je.dbi.DatabaseImpl, com.sleepycat.je.tree.IN, long)
    {
        com.sleepycat.je.cleaner.FileProcessor this;
        com.sleepycat.je.tree.Tree tree;
        com.sleepycat.je.dbi.DatabaseImpl db;
        com.sleepycat.je.tree.IN inClone, rootIN, parent, l11, $r2, $r3, in#57, $r8, $r9, $r11, $r12, $r15, $r17;
        long logLsn, treeLsn#37, treeLsn#110;
        com.sleepycat.je.tree.BIN bin, bin, $r7, $r14, l12#132;
        int compareVal, $i0, $i3, $i4, $i5;
        java.lang.Throwable l13, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        com.sleepycat.je.CacheMode $r0, $r1, $r4, $r5, $r10, $r13;
        com.sleepycat.je.tree.SearchResult result#15;
        byte $b1, $b2;
        java.lang.AssertionError $r6;

        this := @this: com.sleepycat.je.cleaner.FileProcessor;

        tree := @parameter0: com.sleepycat.je.tree.Tree;

        db := @parameter1: com.sleepycat.je.dbi.DatabaseImpl;

        inClone := @parameter2: com.sleepycat.je.tree.IN;

        logLsn := @parameter3: long;

        $z0 = virtualinvoke inClone.<com.sleepycat.je.tree.IN: boolean isRoot()>();

        if $z0 == 0 goto label02;

        rootIN = specialinvoke this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.tree.IN isRoot(com.sleepycat.je.tree.Tree,com.sleepycat.je.dbi.DatabaseImpl,com.sleepycat.je.tree.IN,long)>(tree, db, inClone, logLsn);

        if rootIN != null goto label01;

        return null;

     label01:
        return rootIN;

     label02:
        $r0 = <com.sleepycat.je.cleaner.Cleaner: com.sleepycat.je.CacheMode UPDATE_GENERATION>;

        virtualinvoke inClone.<com.sleepycat.je.tree.IN: void latch(com.sleepycat.je.CacheMode)>($r0);

        result#15 = null;

     label03:
        $r1 = <com.sleepycat.je.cleaner.Cleaner: com.sleepycat.je.CacheMode UPDATE_GENERATION>;

        result#15 = virtualinvoke tree.<com.sleepycat.je.tree.Tree: com.sleepycat.je.tree.SearchResult getParentINForChildIN(com.sleepycat.je.tree.IN,boolean,boolean,com.sleepycat.je.CacheMode)>(inClone, 1, 1, $r1);

        $z1 = result#15.<com.sleepycat.je.tree.SearchResult: boolean exactParentFound>;

        if $z1 != 0 goto label06;

     label04:
        if result#15 == null goto label05;

        $z2 = result#15.<com.sleepycat.je.tree.SearchResult: boolean exactParentFound>;

        if $z2 == 0 goto label05;

        $r2 = result#15.<com.sleepycat.je.tree.SearchResult: com.sleepycat.je.tree.IN parent>;

        virtualinvoke $r2.<com.sleepycat.je.tree.IN: void releaseLatch()>();

     label05:
        return null;

     label06:
        parent = result#15.<com.sleepycat.je.tree.SearchResult: com.sleepycat.je.tree.IN parent>;

        $i0 = result#15.<com.sleepycat.je.tree.SearchResult: int index>;

        treeLsn#37 = virtualinvoke parent.<com.sleepycat.je.tree.IN: long getLsn(int)>($i0);

        $b1 = treeLsn#37 cmp -1L;

        if $b1 != 0 goto label09;

     label07:
        if result#15 == null goto label08;

        $z3 = result#15.<com.sleepycat.je.tree.SearchResult: boolean exactParentFound>;

        if $z3 == 0 goto label08;

        $r3 = result#15.<com.sleepycat.je.tree.SearchResult: com.sleepycat.je.tree.IN parent>;

        virtualinvoke $r3.<com.sleepycat.je.tree.IN: void releaseLatch()>();

     label08:
        return null;

     label09:
        $b2 = treeLsn#37 cmp logLsn;

        if $b2 != 0 goto label15;

        $i3 = result#15.<com.sleepycat.je.tree.SearchResult: int index>;

        $r4 = <com.sleepycat.je.cleaner.Cleaner: com.sleepycat.je.CacheMode UPDATE_GENERATION>;

        in#57 = virtualinvoke parent.<com.sleepycat.je.tree.IN: com.sleepycat.je.tree.IN loadIN(int,com.sleepycat.je.CacheMode)>($i3, $r4);

        if in#57 == null goto label11;

        $r5 = <com.sleepycat.je.cleaner.Cleaner: com.sleepycat.je.CacheMode UPDATE_GENERATION>;

        virtualinvoke in#57.<com.sleepycat.je.tree.IN: void latch(com.sleepycat.je.CacheMode)>($r5);

        $z4 = virtualinvoke in#57.<com.sleepycat.je.tree.IN: boolean isBINDelta()>();

        if $z4 == 0 goto label12;

        $z5 = <com.sleepycat.je.cleaner.FileProcessor: boolean $assertionsDisabled>;

        if $z5 != 0 goto label10;

        $z6 = virtualinvoke in#57.<com.sleepycat.je.tree.IN: boolean getDirty()>();

        if $z6 != 0 goto label10;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label10:
        bin = (com.sleepycat.je.tree.BIN) in#57;

        $r7 = (com.sleepycat.je.tree.BIN) inClone;

        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void mutateToFullBIN(com.sleepycat.je.tree.BIN,boolean)>($r7, 0);

        goto label12;

     label11:
        in#57 = inClone;

        virtualinvoke in#57.<com.sleepycat.je.tree.IN: void latchNoUpdateLRU(com.sleepycat.je.dbi.DatabaseImpl)>(db);

        virtualinvoke in#57.<com.sleepycat.je.tree.IN: void postFetchInit(com.sleepycat.je.dbi.DatabaseImpl,long)>(db, logLsn);

        $i4 = result#15.<com.sleepycat.je.tree.SearchResult: int index>;

        virtualinvoke parent.<com.sleepycat.je.tree.IN: void attachNode(int,com.sleepycat.je.tree.Node,byte[])>($i4, in#57, null);

     label12:
        l11 = in#57;

     label13:
        if result#15 == null goto label14;

        $z7 = result#15.<com.sleepycat.je.tree.SearchResult: boolean exactParentFound>;

        if $z7 == 0 goto label14;

        $r8 = result#15.<com.sleepycat.je.tree.SearchResult: com.sleepycat.je.tree.IN parent>;

        virtualinvoke $r8.<com.sleepycat.je.tree.IN: void releaseLatch()>();

     label14:
        return l11;

     label15:
        $z8 = virtualinvoke inClone.<com.sleepycat.je.tree.IN: boolean isUpperIN()>();

        if $z8 == 0 goto label18;

     label16:
        if result#15 == null goto label17;

        $z9 = result#15.<com.sleepycat.je.tree.SearchResult: boolean exactParentFound>;

        if $z9 == 0 goto label17;

        $r9 = result#15.<com.sleepycat.je.tree.SearchResult: com.sleepycat.je.tree.IN parent>;

        virtualinvoke $r9.<com.sleepycat.je.tree.IN: void releaseLatch()>();

     label17:
        return null;

     label18:
        $i5 = result#15.<com.sleepycat.je.tree.SearchResult: int index>;

        $r10 = <com.sleepycat.je.cleaner.Cleaner: com.sleepycat.je.CacheMode UPDATE_GENERATION>;

        $r11 = virtualinvoke parent.<com.sleepycat.je.tree.IN: com.sleepycat.je.tree.IN fetchIN(int,com.sleepycat.je.CacheMode)>($i5, $r10);

        bin = (com.sleepycat.je.tree.BIN) $r11;

        treeLsn#110 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: long getLastFullLsn()>();

        compareVal = staticinvoke <com.sleepycat.je.utilint.DbLsn: int compareTo(long,long)>(treeLsn#110, logLsn);

        if compareVal == 0 goto label21;

     label19:
        if result#15 == null goto label20;

        $z10 = result#15.<com.sleepycat.je.tree.SearchResult: boolean exactParentFound>;

        if $z10 == 0 goto label20;

        $r12 = result#15.<com.sleepycat.je.tree.SearchResult: com.sleepycat.je.tree.IN parent>;

        virtualinvoke $r12.<com.sleepycat.je.tree.IN: void releaseLatch()>();

     label20:
        return null;

     label21:
        $r13 = <com.sleepycat.je.cleaner.Cleaner: com.sleepycat.je.CacheMode UPDATE_GENERATION>;

        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void latch(com.sleepycat.je.CacheMode)>($r13);

        $z11 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        if $z11 == 0 goto label22;

        $r14 = (com.sleepycat.je.tree.BIN) inClone;

        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void mutateToFullBIN(com.sleepycat.je.tree.BIN,boolean)>($r14, 0);

     label22:
        l12#132 = bin;

     label23:
        if result#15 == null goto label24;

        $z12 = result#15.<com.sleepycat.je.tree.SearchResult: boolean exactParentFound>;

        if $z12 == 0 goto label24;

        $r15 = result#15.<com.sleepycat.je.tree.SearchResult: com.sleepycat.je.tree.IN parent>;

        virtualinvoke $r15.<com.sleepycat.je.tree.IN: void releaseLatch()>();

     label24:
        return l12#132;

     label25:
        $r16 := @caughtexception;

     label26:
        l13 = $r16;

     label27:
        if result#15 == null goto label28;

        $z13 = result#15.<com.sleepycat.je.tree.SearchResult: boolean exactParentFound>;

        if $z13 == 0 goto label28;

        $r17 = result#15.<com.sleepycat.je.tree.SearchResult: com.sleepycat.je.tree.IN parent>;

        virtualinvoke $r17.<com.sleepycat.je.tree.IN: void releaseLatch()>();

     label28:
        throw l13;

        catch java.lang.Throwable from label03 to label04 with label25;
        catch java.lang.Throwable from label06 to label07 with label25;
        catch java.lang.Throwable from label09 to label13 with label25;
        catch java.lang.Throwable from label15 to label16 with label25;
        catch java.lang.Throwable from label18 to label19 with label25;
        catch java.lang.Throwable from label21 to label23 with label25;
        catch java.lang.Throwable from label26 to label27 with label25;
    }

    private com.sleepycat.je.tree.IN isRoot(com.sleepycat.je.tree.Tree, com.sleepycat.je.dbi.DatabaseImpl, com.sleepycat.je.tree.IN, long)
    {
        com.sleepycat.je.cleaner.FileProcessor this;
        com.sleepycat.je.tree.Tree tree;
        com.sleepycat.je.dbi.DatabaseImpl db;
        com.sleepycat.je.tree.IN inClone, $r1;
        long lsn;
        com.sleepycat.je.cleaner.FileProcessor$RootDoWork rdw, $r0;

        this := @this: com.sleepycat.je.cleaner.FileProcessor;

        tree := @parameter0: com.sleepycat.je.tree.Tree;

        db := @parameter1: com.sleepycat.je.dbi.DatabaseImpl;

        inClone := @parameter2: com.sleepycat.je.tree.IN;

        lsn := @parameter3: long;

        $r0 = new com.sleepycat.je.cleaner.FileProcessor$RootDoWork;

        specialinvoke $r0.<com.sleepycat.je.cleaner.FileProcessor$RootDoWork: void <init>(com.sleepycat.je.dbi.DatabaseImpl,com.sleepycat.je.tree.IN,long)>(db, inClone, lsn);

        rdw = $r0;

        $r1 = virtualinvoke tree.<com.sleepycat.je.tree.Tree: com.sleepycat.je.tree.IN withRootLatchedShared(com.sleepycat.je.tree.WithRootLatched)>(rdw);

        return $r1;
    }

    private com.sleepycat.je.cleaner.LNInfo processFoundLN(com.sleepycat.je.cleaner.LNInfo, long, long, com.sleepycat.je.tree.BIN, int)
    {
        com.sleepycat.je.cleaner.FileProcessor this;
        com.sleepycat.je.cleaner.LNInfo info, $r12, l18#130;
        long logLsn, treeLsn, $l12, $l21, $l22, $l24;
        com.sleepycat.je.tree.BIN bin;
        int index, $i1, $i2, $i3, $i5, $i6, $i8, $i9, $i10, $i11, $i14, $i15, $i17, $i18, $i19, $i20, $i23, $i25, $i26;
        com.sleepycat.je.tree.LN lnFromLog, $r33, targetLn#231;
        byte[] key, $r38;
        com.sleepycat.je.dbi.DatabaseImpl db, $r31;
        boolean isTemporary, obsolete#10, migrated#12, completed#14, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        com.sleepycat.je.tree.Tree tree;
        com.sleepycat.je.txn.LockResult lockRet;
        com.sleepycat.je.log.LogItem logItem;
        java.lang.Throwable l19, $r42;
        com.sleepycat.je.txn.BasicLocker locker#16;
        java.lang.AssertionError $r0, $r17, $r18, $r30, $r36;
        byte $b0, $b4, $b7, $b13, $b16;
        com.sleepycat.je.cleaner.Cleaner $r2, $r4, $r6, $r14, $r16, $r41, $r43;
        com.sleepycat.je.dbi.EnvironmentImpl $r7, $r19, $r37;
        com.sleepycat.je.txn.LockType $r8;
        com.sleepycat.je.txn.LockGrantType $r9, $r10;
        com.sleepycat.je.dbi.DatabaseId $r13, $r27, $r28;
        java.lang.StringBuilder $r20, $r21, $r22, $r23;
        java.lang.String $r24;
        com.sleepycat.je.EnvironmentFailureException $r25;
        com.sleepycat.je.tree.Node $r26, $r29, $r32, $r35;
        com.sleepycat.je.tree.MapLN targetLn#208;
        com.sleepycat.je.log.ReplicationContext $r39;

        this := @this: com.sleepycat.je.cleaner.FileProcessor;

        info := @parameter0: com.sleepycat.je.cleaner.LNInfo;

        logLsn := @parameter1: long;

        treeLsn := @parameter2: long;

        bin := @parameter3: com.sleepycat.je.tree.BIN;

        index := @parameter4: int;

        lnFromLog = virtualinvoke info.<com.sleepycat.je.cleaner.LNInfo: com.sleepycat.je.tree.LN getLN()>();

        key = virtualinvoke info.<com.sleepycat.je.cleaner.LNInfo: byte[] getKey()>();

        db = virtualinvoke bin.<com.sleepycat.je.tree.BIN: com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        isTemporary = virtualinvoke db.<com.sleepycat.je.dbi.DatabaseImpl: boolean isTemporary()>();

        obsolete#10 = 0;

        migrated#12 = 0;

        completed#14 = 0;

        locker#16 = null;

     label01:
        tree = virtualinvoke db.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.tree.Tree getTree()>();

        $z0 = <com.sleepycat.je.cleaner.FileProcessor: boolean $assertionsDisabled>;

        if $z0 != 0 goto label02;

        if tree != null goto label02;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label02:
        $z1 = virtualinvoke lnFromLog.<com.sleepycat.je.tree.LN: boolean isDeleted()>();

        if $z1 == 0 goto label05;

        $b0 = treeLsn cmp logLsn;

        if $b0 != 0 goto label05;

        $i1 = this.<com.sleepycat.je.cleaner.FileProcessor: int fileLogVersion>;

        if $i1 > 2 goto label05;

        obsolete#10 = 1;

        $i2 = this.<com.sleepycat.je.cleaner.FileProcessor: int nLNsDeadThisRun>;

        $i3 = $i2 + 1;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nLNsDeadThisRun> = $i3;

        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void setPendingDeleted(int)>(index);

        completed#14 = 1;

     label03:
        if null == null goto label04;

        virtualinvoke locker#16.<com.sleepycat.je.txn.BasicLocker: void operationEnd()>();

     label04:
        $r2 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.cleaner.Cleaner cleaner>;

        virtualinvoke $r2.<com.sleepycat.je.cleaner.Cleaner: void logFine(java.lang.String,com.sleepycat.je.tree.Node,long,boolean,boolean,boolean)>("CleanLN:", lnFromLog, logLsn, 1, 1, 0);

        return null;

     label05:
        $b4 = treeLsn cmp -1L;

        if $b4 != 0 goto label08;

        $i5 = this.<com.sleepycat.je.cleaner.FileProcessor: int nLNsDeadThisRun>;

        $i6 = $i5 + 1;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nLNsDeadThisRun> = $i6;

        obsolete#10 = 1;

        completed#14 = 1;

     label06:
        if null == null goto label07;

        virtualinvoke locker#16.<com.sleepycat.je.txn.BasicLocker: void operationEnd()>();

     label07:
        $r4 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.cleaner.Cleaner cleaner>;

        virtualinvoke $r4.<com.sleepycat.je.cleaner.Cleaner: void logFine(java.lang.String,com.sleepycat.je.tree.Node,long,boolean,boolean,boolean)>("CleanLN:", lnFromLog, logLsn, 1, 1, 0);

        return null;

     label08:
        $b7 = treeLsn cmp logLsn;

        if $b7 == 0 goto label11;

        if isTemporary == 0 goto label11;

        $i8 = this.<com.sleepycat.je.cleaner.FileProcessor: int nLNsDeadThisRun>;

        $i9 = $i8 + 1;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nLNsDeadThisRun> = $i9;

        obsolete#10 = 1;

        completed#14 = 1;

     label09:
        if null == null goto label10;

        virtualinvoke locker#16.<com.sleepycat.je.txn.BasicLocker: void operationEnd()>();

     label10:
        $r6 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.cleaner.Cleaner cleaner>;

        virtualinvoke $r6.<com.sleepycat.je.cleaner.Cleaner: void logFine(java.lang.String,com.sleepycat.je.tree.Node,long,boolean,boolean,boolean)>("CleanLN:", lnFromLog, logLsn, 1, 1, 0);

        return null;

     label11:
        if isTemporary != 0 goto label17;

        $r7 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        locker#16 = staticinvoke <com.sleepycat.je.txn.BasicLocker: com.sleepycat.je.txn.BasicLocker createBasicLocker(com.sleepycat.je.dbi.EnvironmentImpl,boolean)>($r7, 0);

        virtualinvoke locker#16.<com.sleepycat.je.txn.BasicLocker: void setPreemptable(boolean)>(0);

        $r8 = <com.sleepycat.je.txn.LockType: com.sleepycat.je.txn.LockType READ>;

        lockRet = virtualinvoke locker#16.<com.sleepycat.je.txn.BasicLocker: com.sleepycat.je.txn.LockResult nonBlockingLock(long,com.sleepycat.je.txn.LockType,boolean,com.sleepycat.je.dbi.DatabaseImpl)>(treeLsn, $r8, 0, db);

        $r9 = virtualinvoke lockRet.<com.sleepycat.je.txn.LockResult: com.sleepycat.je.txn.LockGrantType getLockGrant()>();

        $r10 = <com.sleepycat.je.txn.LockGrantType: com.sleepycat.je.txn.LockGrantType DENIED>;

        if $r9 != $r10 goto label14;

        $i10 = this.<com.sleepycat.je.cleaner.FileProcessor: int nLNsLockedThisRun>;

        $i11 = $i10 + 1;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nLNsLockedThisRun> = $i11;

        completed#14 = 1;

        $r12 = new com.sleepycat.je.cleaner.LNInfo;

        $r13 = virtualinvoke db.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.DatabaseId getId()>();

        $l12 = virtualinvoke info.<com.sleepycat.je.cleaner.LNInfo: long getExpirationTime()>();

        specialinvoke $r12.<com.sleepycat.je.cleaner.LNInfo: void <init>(com.sleepycat.je.tree.LN,com.sleepycat.je.dbi.DatabaseId,byte[],long)>(null, $r13, key, $l12);

        l18#130 = $r12;

     label12:
        if locker#16 == null goto label13;

        virtualinvoke locker#16.<com.sleepycat.je.txn.BasicLocker: void operationEnd()>();

     label13:
        $r14 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.cleaner.Cleaner cleaner>;

        virtualinvoke $r14.<com.sleepycat.je.cleaner.Cleaner: void logFine(java.lang.String,com.sleepycat.je.tree.Node,long,boolean,boolean,boolean)>("CleanLN:", lnFromLog, logLsn, 1, 0, 0);

        return l18#130;

     label14:
        $b13 = treeLsn cmp logLsn;

        if $b13 == 0 goto label17;

        $i14 = this.<com.sleepycat.je.cleaner.FileProcessor: int nLNsDeadThisRun>;

        $i15 = $i14 + 1;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nLNsDeadThisRun> = $i15;

        obsolete#10 = 1;

        completed#14 = 1;

     label15:
        if locker#16 == null goto label16;

        virtualinvoke locker#16.<com.sleepycat.je.txn.BasicLocker: void operationEnd()>();

     label16:
        $r16 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.cleaner.Cleaner cleaner>;

        virtualinvoke $r16.<com.sleepycat.je.cleaner.Cleaner: void logFine(java.lang.String,com.sleepycat.je.tree.Node,long,boolean,boolean,boolean)>("CleanLN:", lnFromLog, logLsn, 1, 1, 0);

        return null;

     label17:
        $z2 = <com.sleepycat.je.cleaner.FileProcessor: boolean $assertionsDisabled>;

        if $z2 != 0 goto label18;

        if 0 == 0 goto label18;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();

        throw $r17;

     label18:
        $z3 = <com.sleepycat.je.cleaner.FileProcessor: boolean $assertionsDisabled>;

        if $z3 != 0 goto label19;

        $b16 = treeLsn cmp logLsn;

        if $b16 == 0 goto label19;

        $r18 = new java.lang.AssertionError;

        specialinvoke $r18.<java.lang.AssertionError: void <init>()>();

        throw $r18;

     label19:
        $z4 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean isEmbeddedLN(int)>(index);

        if $z4 == 0 goto label20;

        $r19 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LN is embedded although its associated logrec (at ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(logLsn);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not have the embedded flag on");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        $r25 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedState(com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String)>($r19, $r24);

        throw $r25;

     label20:
        $r26 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: com.sleepycat.je.tree.Node getTarget(int)>(index);

        if $r26 != null goto label21;

        virtualinvoke lnFromLog.<com.sleepycat.je.tree.LN: void postFetchInit(com.sleepycat.je.dbi.DatabaseImpl,long)>(db, logLsn);

        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void attachNode(int,com.sleepycat.je.tree.Node,byte[])>(index, lnFromLog, key);

     label21:
        $r27 = virtualinvoke db.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.DatabaseId getId()>();

        $r28 = <com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseId ID_DB_ID>;

        $z5 = virtualinvoke $r27.<com.sleepycat.je.dbi.DatabaseId: boolean equals(java.lang.Object)>($r28);

        if $z5 == 0 goto label23;

        $r29 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: com.sleepycat.je.tree.Node getTarget(int)>(index);

        targetLn#208 = (com.sleepycat.je.tree.MapLN) $r29;

        $z6 = <com.sleepycat.je.cleaner.FileProcessor: boolean $assertionsDisabled>;

        if $z6 != 0 goto label22;

        if targetLn#208 != null goto label22;

        $r30 = new java.lang.AssertionError;

        specialinvoke $r30.<java.lang.AssertionError: void <init>()>();

        throw $r30;

     label22:
        $r31 = virtualinvoke targetLn#208.<com.sleepycat.je.tree.MapLN: com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        virtualinvoke $r31.<com.sleepycat.je.dbi.DatabaseImpl: void setDirty()>();

        goto label27;

     label23:
        if isTemporary == 0 goto label24;

        $r32 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: com.sleepycat.je.tree.Node getTarget(int)>(index);

        $r33 = (com.sleepycat.je.tree.LN) $r32;

        virtualinvoke $r33.<com.sleepycat.je.tree.LN: void setDirty()>();

        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void setDirty(boolean)>(1);

        $i17 = this.<com.sleepycat.je.cleaner.FileProcessor: int nLNsMarkedThisRun>;

        $i18 = $i17 + 1;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nLNsMarkedThisRun> = $i18;

        goto label27;

     label24:
        $r35 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: com.sleepycat.je.tree.Node getTarget(int)>(index);

        targetLn#231 = (com.sleepycat.je.tree.LN) $r35;

        $z7 = <com.sleepycat.je.cleaner.FileProcessor: boolean $assertionsDisabled>;

        if $z7 != 0 goto label25;

        if targetLn#231 != null goto label25;

        $r36 = new java.lang.AssertionError;

        specialinvoke $r36.<java.lang.AssertionError: void <init>()>();

        throw $r36;

     label25:
        $r37 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r38 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: byte[] getKey(int)>(index);

        $i19 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: int getExpiration(int)>(index);

        $z8 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean isExpirationInHours()>();

        $i20 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: int getLastLoggedSize(int)>(index);

        $r39 = staticinvoke <com.sleepycat.je.cleaner.Cleaner: com.sleepycat.je.log.ReplicationContext getMigrationRepContext(com.sleepycat.je.tree.LN)>(targetLn#231);

        logItem = virtualinvoke targetLn#231.<com.sleepycat.je.tree.LN: com.sleepycat.je.log.LogItem log(com.sleepycat.je.dbi.EnvironmentImpl,com.sleepycat.je.dbi.DatabaseImpl,com.sleepycat.je.txn.Locker,com.sleepycat.je.txn.WriteLockInfo,boolean,byte[],int,boolean,boolean,long,int,boolean,boolean,com.sleepycat.je.log.ReplicationContext)>($r37, db, null, null, 0, $r38, $i19, $z8, 0, logLsn, $i20, 0, 1, $r39);

        $l21 = logItem.<com.sleepycat.je.log.LogItem: long lsn>;

        $l22 = virtualinvoke targetLn#231.<com.sleepycat.je.tree.LN: long getVLSNSequence()>();

        $i23 = logItem.<com.sleepycat.je.log.LogItem: int size>;

        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void updateEntry(int,long,long,int)>(index, $l21, $l22, $i23);

        if lnFromLog != targetLn#231 goto label26;

        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void evictLN(int)>(index);

     label26:
        $l24 = logItem.<com.sleepycat.je.log.LogItem: long lsn>;

        staticinvoke <com.sleepycat.je.dbi.CursorImpl: void lockAfterLsnChange(com.sleepycat.je.dbi.DatabaseImpl,long,long,com.sleepycat.je.txn.Locker)>(db, logLsn, $l24, locker#16);

        $i25 = this.<com.sleepycat.je.cleaner.FileProcessor: int nLNsMigratedThisRun>;

        $i26 = $i25 + 1;

        this.<com.sleepycat.je.cleaner.FileProcessor: int nLNsMigratedThisRun> = $i26;

     label27:
        migrated#12 = 1;

        completed#14 = 1;

     label28:
        if locker#16 == null goto label29;

        virtualinvoke locker#16.<com.sleepycat.je.txn.BasicLocker: void operationEnd()>();

     label29:
        $r41 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.cleaner.Cleaner cleaner>;

        virtualinvoke $r41.<com.sleepycat.je.cleaner.Cleaner: void logFine(java.lang.String,com.sleepycat.je.tree.Node,long,boolean,boolean,boolean)>("CleanLN:", lnFromLog, logLsn, 1, 0, 1);

        return null;

     label30:
        $r42 := @caughtexception;

     label31:
        l19 = $r42;

     label32:
        if locker#16 == null goto label33;

        virtualinvoke locker#16.<com.sleepycat.je.txn.BasicLocker: void operationEnd()>();

     label33:
        $r43 = this.<com.sleepycat.je.cleaner.FileProcessor: com.sleepycat.je.cleaner.Cleaner cleaner>;

        virtualinvoke $r43.<com.sleepycat.je.cleaner.Cleaner: void logFine(java.lang.String,com.sleepycat.je.tree.Node,long,boolean,boolean,boolean)>("CleanLN:", lnFromLog, logLsn, completed#14, obsolete#10, migrated#12);

        throw l19;

        catch java.lang.Throwable from label01 to label03 with label30;
        catch java.lang.Throwable from label05 to label06 with label30;
        catch java.lang.Throwable from label08 to label09 with label30;
        catch java.lang.Throwable from label11 to label12 with label30;
        catch java.lang.Throwable from label14 to label15 with label30;
        catch java.lang.Throwable from label17 to label28 with label30;
        catch java.lang.Throwable from label31 to label32 with label30;
    }


