    static void <clinit>()
    {
        byte[] $r0;
        java.util.regex.Pattern $r1, $r2;

        $r0 = newarray (byte)[2];

        $r0[0] = 13;

        $r0[1] = 10;

        <org.prevayler.foundation.Chunking: byte[] CRLF> = $r0;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[^\u0000- ()<>@,;:\\\\\"/\\[\\]?={}\u007f-\uffff]+");

        <org.prevayler.foundation.Chunking: java.util.regex.Pattern TOKEN_PATTERN> = $r1;

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(0|[1-9A-F][0-9A-F]{0,6}|[1-7][0-9A-F]{7})(;[^\u0000- ()<>@,;:\\\\\"/\\[\\]?={}\u007f-\uffff]+=[^\u0000- ()<>@,;:\\\\\"/\\[\\]?={}\u007f-\uffff]+)*\r\n");

        <org.prevayler.foundation.Chunking: java.util.regex.Pattern HEADER_PATTERN> = $r2;

        return;
    }

    public static void writeChunk(java.io.OutputStream, org.prevayler.foundation.Chunk) throws java.io.IOException
    {
        java.io.OutputStream stream;
        org.prevayler.foundation.Chunk chunk;
        java.util.Iterator iterator;
        java.util.Map$Entry entry;
        java.lang.String name, value, $r1, $r2, $r14, $r20;
        byte[] $r0, $r3, $r21, $r22, $r23, $r24, $r25;
        int $i0;
        java.util.Map $r4;
        java.util.Set $r5;
        boolean $z0, $z1, $z2;
        java.lang.Object $r6, $r7, $r8;
        java.io.IOException $r9, $r15;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r16, $r17, $r18, $r19;

        stream := @parameter0: java.io.OutputStream;

        chunk := @parameter1: org.prevayler.foundation.Chunk;

        $r0 = virtualinvoke chunk.<org.prevayler.foundation.Chunk: byte[] getBytes()>();

        $i0 = lengthof $r0;

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toUpperCase()>();

        $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>("US-ASCII");

        virtualinvoke stream.<java.io.OutputStream: void write(byte[])>($r3);

        $r4 = virtualinvoke chunk.<org.prevayler.foundation.Chunk: java.util.Map getParameters()>();

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>();

        iterator = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke iterator.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke iterator.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $r6;

        $r7 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        name = (java.lang.String) $r7;

        $r8 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        value = (java.lang.String) $r8;

        $z1 = staticinvoke <org.prevayler.foundation.Chunking: boolean validToken(java.lang.String)>(name);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

        $r9 = new java.io.IOException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid parameter name \'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r14);

        throw $r9;

     label2:
        $z2 = staticinvoke <org.prevayler.foundation.Chunking: boolean validToken(java.lang.String)>(value);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label3;

        $r15 = new java.io.IOException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid parameter value \'");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(value);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.io.IOException: void <init>(java.lang.String)>($r20);

        throw $r15;

     label3:
        virtualinvoke stream.<java.io.OutputStream: void write(int)>(59);

        $r21 = virtualinvoke name.<java.lang.String: byte[] getBytes(java.lang.String)>("US-ASCII");

        virtualinvoke stream.<java.io.OutputStream: void write(byte[])>($r21);

        virtualinvoke stream.<java.io.OutputStream: void write(int)>(61);

        $r22 = virtualinvoke value.<java.lang.String: byte[] getBytes(java.lang.String)>("US-ASCII");

        virtualinvoke stream.<java.io.OutputStream: void write(byte[])>($r22);

        goto label1;

     label4:
        $r23 = <org.prevayler.foundation.Chunking: byte[] CRLF>;

        virtualinvoke stream.<java.io.OutputStream: void write(byte[])>($r23);

        $r24 = virtualinvoke chunk.<org.prevayler.foundation.Chunk: byte[] getBytes()>();

        virtualinvoke stream.<java.io.OutputStream: void write(byte[])>($r24);

        $r25 = <org.prevayler.foundation.Chunking: byte[] CRLF>;

        virtualinvoke stream.<java.io.OutputStream: void write(byte[])>($r25);

        return;
    }

    private static boolean validToken(java.lang.String)
    {
        java.lang.String token;
        java.util.regex.Pattern $r0;
        java.util.regex.Matcher $r1;
        boolean $z0;

        token := @parameter0: java.lang.String;

        $r0 = <org.prevayler.foundation.Chunking: java.util.regex.Pattern TOKEN_PATTERN>;

        $r1 = virtualinvoke $r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(token);

        $z0 = virtualinvoke $r1.<java.util.regex.Matcher: boolean matches()>();

        return $z0;
    }

    public static org.prevayler.foundation.Chunk readChunk(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream stream;
        java.lang.String header, name, value, $r4;
        java.util.StringTokenizer tokenizer, $r3;
        int size, read, cr, lf, total#35, $i0;
        java.util.LinkedHashMap parameters, $r5;
        byte[] bytes;
        java.util.regex.Pattern $r0;
        java.util.regex.Matcher $r1;
        boolean $z0, $z1;
        java.io.IOException $r2, $r9;
        java.io.EOFException $r7, $r8;
        org.prevayler.foundation.Chunk $r10;

        stream := @parameter0: java.io.InputStream;

        header = staticinvoke <org.prevayler.foundation.Chunking: java.lang.String readLine(java.io.InputStream)>(stream);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(header);

        if header != null goto label01;

        return null;

     label01:
        $r0 = <org.prevayler.foundation.Chunking: java.util.regex.Pattern HEADER_PATTERN>;

        $r1 = virtualinvoke $r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(header);

        $z0 = virtualinvoke $r1.<java.util.regex.Matcher: boolean matches()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label02;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Chunk header corrupted");

        throw $r2;

     label02:
        $r3 = new java.util.StringTokenizer;

        specialinvoke $r3.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(header, ";=\r\n");

        tokenizer = $r3;

        $r4 = virtualinvoke tokenizer.<java.util.StringTokenizer: java.lang.String nextToken()>();

        size = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r4, 16);

        $r5 = new java.util.LinkedHashMap;

        specialinvoke $r5.<java.util.LinkedHashMap: void <init>()>();

        parameters = $r5;

     label03:
        $z1 = virtualinvoke tokenizer.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label04;

        name = virtualinvoke tokenizer.<java.util.StringTokenizer: java.lang.String nextToken()>();

        value = virtualinvoke tokenizer.<java.util.StringTokenizer: java.lang.String nextToken()>();

        interfaceinvoke parameters.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(name, value);

        goto label03;

     label04:
        bytes = newarray (byte)[size];

        total#35 = 0;

     label05:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(total#35);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(size);

        if total#35 >= size goto label07;

        $i0 = size - total#35;

        read = virtualinvoke stream.<java.io.InputStream: int read(byte[],int,int)>(bytes, total#35, $i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(read);

        if read != -1 goto label06;

        $r7 = new java.io.EOFException;

        specialinvoke $r7.<java.io.EOFException: void <init>(java.lang.String)>("Unexpected end of stream in chunk data");

        throw $r7;

     label06:
        total#35 = total#35 + read;

        goto label05;

     label07:
        cr = virtualinvoke stream.<java.io.InputStream: int read()>();

        lf = virtualinvoke stream.<java.io.InputStream: int read()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(cr);

        if cr == -1 goto label08;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(cr);

        if cr != 13 goto label09;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lf);

        if lf != -1 goto label09;

     label08:
        $r8 = new java.io.EOFException;

        specialinvoke $r8.<java.io.EOFException: void <init>(java.lang.String)>("Unexpected end of stream in chunk trailer");

        throw $r8;

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(cr);

        if cr != 13 goto label10;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lf);

        if lf == 10 goto label11;

     label10:
        $r9 = new java.io.IOException;

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("Chunk trailer corrupted");

        throw $r9;

     label11:
        $r10 = new org.prevayler.foundation.Chunk;

        specialinvoke $r10.<org.prevayler.foundation.Chunk: void <init>(byte[],java.util.Map)>(bytes, parameters);

        return $r10;
    }

    private static java.lang.String readLine(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream stream;
        java.io.ByteArrayOutputStream header, $r0;
        int b, $i0;
        java.io.EOFException $r1;
        java.lang.String $r2;

        stream := @parameter0: java.io.InputStream;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        header = $r0;

     label1:
        b = virtualinvoke stream.<java.io.InputStream: int read()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b);

        if b != -1 goto label3;

        $i0 = virtualinvoke header.<java.io.ByteArrayOutputStream: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 0 goto label2;

        return null;

     label2:
        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>(java.lang.String)>("Unexpected end of stream in chunk header");

        throw $r1;

     label3:
        virtualinvoke header.<java.io.ByteArrayOutputStream: void write(int)>(b);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b);

        if b != 10 goto label4;

        $r2 = virtualinvoke header.<java.io.ByteArrayOutputStream: java.lang.String toString(java.lang.String)>("US-ASCII");

        return $r2;

     label4:
        goto label1;
    }


