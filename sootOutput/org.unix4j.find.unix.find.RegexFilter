    public void <init>(java.lang.String, boolean)
    {
        org.unix4j.find.unix.find.RegexFilter this;
        java.lang.String namePattern;
        boolean ignoreCase;
        java.util.regex.Pattern $r0, $r1;

        this := @this: org.unix4j.find.unix.find.RegexFilter;

        namePattern := @parameter0: java.lang.String;

        ignoreCase := @parameter1: boolean;

        specialinvoke this.<java.lang.Object: void <init>()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(ignoreCase);

        if ignoreCase == 0 goto label1;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>(namePattern, 2);

        this.<org.unix4j.find.unix.find.RegexFilter: java.util.regex.Pattern namePattern> = $r0;

        goto label2;

     label1:
        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(namePattern);

        this.<org.unix4j.find.unix.find.RegexFilter: java.util.regex.Pattern namePattern> = $r1;

     label2:
        return;
    }

    public java.io.FileFilter getRelativePathFilterForBase(org.unix4j.find.util.RelativePathBase)
    {
        org.unix4j.find.unix.find.RegexFilter this;
        org.unix4j.find.util.RelativePathBase relativePathBase;
        org.unix4j.find.unix.find.RegexFilter$1 $r0;

        this := @this: org.unix4j.find.unix.find.RegexFilter;

        relativePathBase := @parameter0: org.unix4j.find.util.RelativePathBase;

        $r0 = new org.unix4j.find.unix.find.RegexFilter$1;

        specialinvoke $r0.<org.unix4j.find.unix.find.RegexFilter$1: void <init>(org.unix4j.find.unix.find.RegexFilter,org.unix4j.find.util.RelativePathBase)>(this, relativePathBase);

        return $r0;
    }


