    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "berkeley/com/sleepycat/je/dbi/NodeSequence";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <berkeley.com.sleepycat.je.dbi.NodeSequence: boolean $assertionsDisabled> = $z1;

        return;
    }

    public void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl)
    {
        berkeley.com.sleepycat.je.dbi.NodeSequence this;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        java.util.concurrent.atomic.AtomicLong $r0;

        this := @this: berkeley.com.sleepycat.je.dbi.NodeSequence;

        envImpl := @parameter0: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<berkeley.com.sleepycat.je.dbi.NodeSequence: java.util.concurrent.atomic.AtomicLong lastAllocatedLocalNodeId> = null;

        this.<berkeley.com.sleepycat.je.dbi.NodeSequence: java.util.concurrent.atomic.AtomicLong lastAllocatedReplicatedNodeId> = null;

        $r0 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        this.<berkeley.com.sleepycat.je.dbi.NodeSequence: java.util.concurrent.atomic.AtomicLong lastAllocatedTransientLsnOffset> = $r0;

        this.<berkeley.com.sleepycat.je.dbi.NodeSequence: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl> = envImpl;

        return;
    }

    void initRealNodeId()
    {
        berkeley.com.sleepycat.je.dbi.NodeSequence this;
        java.util.concurrent.atomic.AtomicLong $r0, $r1;

        this := @this: berkeley.com.sleepycat.je.dbi.NodeSequence;

        $r0 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        this.<berkeley.com.sleepycat.je.dbi.NodeSequence: java.util.concurrent.atomic.AtomicLong lastAllocatedLocalNodeId> = $r0;

        $r1 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(-9L);

        this.<berkeley.com.sleepycat.je.dbi.NodeSequence: java.util.concurrent.atomic.AtomicLong lastAllocatedReplicatedNodeId> = $r1;

        return;
    }

    public long getLastReplicatedNodeId()
    {
        berkeley.com.sleepycat.je.dbi.NodeSequence this;
        java.util.concurrent.atomic.AtomicLong $r0;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.dbi.NodeSequence;

        $r0 = this.<berkeley.com.sleepycat.je.dbi.NodeSequence: java.util.concurrent.atomic.AtomicLong lastAllocatedReplicatedNodeId>;

        $l0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: long get()>();

        return $l0;
    }

    public long getLastLocalNodeId()
    {
        berkeley.com.sleepycat.je.dbi.NodeSequence this;
        java.util.concurrent.atomic.AtomicLong $r0;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.dbi.NodeSequence;

        $r0 = this.<berkeley.com.sleepycat.je.dbi.NodeSequence: java.util.concurrent.atomic.AtomicLong lastAllocatedLocalNodeId>;

        $l0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: long get()>();

        return $l0;
    }

    public void setLastNodeId(long, long)
    {
        berkeley.com.sleepycat.je.dbi.NodeSequence this;
        long lastReplicatedNodeId, lastLocalNodeId;
        java.util.concurrent.atomic.AtomicLong $r0, $r1;

        this := @this: berkeley.com.sleepycat.je.dbi.NodeSequence;

        lastReplicatedNodeId := @parameter0: long;

        lastLocalNodeId := @parameter1: long;

        $r0 = this.<berkeley.com.sleepycat.je.dbi.NodeSequence: java.util.concurrent.atomic.AtomicLong lastAllocatedReplicatedNodeId>;

        virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: void set(long)>(lastReplicatedNodeId);

        $r1 = this.<berkeley.com.sleepycat.je.dbi.NodeSequence: java.util.concurrent.atomic.AtomicLong lastAllocatedLocalNodeId>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void set(long)>(lastLocalNodeId);

        return;
    }

    public long getNextLocalNodeId()
    {
        berkeley.com.sleepycat.je.dbi.NodeSequence this;
        java.util.concurrent.atomic.AtomicLong $r0;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.dbi.NodeSequence;

        $r0 = this.<berkeley.com.sleepycat.je.dbi.NodeSequence: java.util.concurrent.atomic.AtomicLong lastAllocatedLocalNodeId>;

        $l0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        return $l0;
    }

    public long getNextTransientLsn()
    {
        berkeley.com.sleepycat.je.dbi.NodeSequence this;
        java.util.concurrent.atomic.AtomicLong $r0;
        long $l0, $l1;

        this := @this: berkeley.com.sleepycat.je.dbi.NodeSequence;

        $r0 = this.<berkeley.com.sleepycat.je.dbi.NodeSequence: java.util.concurrent.atomic.AtomicLong lastAllocatedTransientLsnOffset>;

        $l0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();

        $l1 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long makeTransientLsn(long)>($l0);

        return $l1;
    }


