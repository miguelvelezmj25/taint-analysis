    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "com/sleepycat/je/incomp/INCompressor";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sleepycat.je.incomp.INCompressor: boolean $assertionsDisabled> = $z1;

        return;
    }

    public void <init>(com.sleepycat.je.dbi.EnvironmentImpl, long, java.lang.String)
    {
        com.sleepycat.je.incomp.INCompressor this;
        com.sleepycat.je.dbi.EnvironmentImpl env;
        long waitTime, $l1;
        java.lang.String name;
        com.sleepycat.je.dbi.DbConfigManager $r0;
        com.sleepycat.je.config.DurationConfigParam $r1;
        int $i0;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        com.sleepycat.je.utilint.StatGroup $r4, $r6, $r9, $r12, $r15, $r18, $r21;
        com.sleepycat.je.utilint.LongStat $r5, $r8, $r11, $r14, $r17, $r20;
        com.sleepycat.je.utilint.StatDefinition $r7, $r10, $r13, $r16, $r19, $r22;

        this := @this: com.sleepycat.je.incomp.INCompressor;

        env := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        waitTime := @parameter1: long;

        name := @parameter2: java.lang.String;

        specialinvoke this.<com.sleepycat.je.utilint.DaemonThread: void <init>(long,java.lang.String,com.sleepycat.je.dbi.EnvironmentImpl)>(waitTime, name, env);

        this.<com.sleepycat.je.incomp.INCompressor: int splitBinsThisRun> = 0;

        this.<com.sleepycat.je.incomp.INCompressor: int dbClosedBinsThisRun> = 0;

        this.<com.sleepycat.je.incomp.INCompressor: int cursorsBinsThisRun> = 0;

        this.<com.sleepycat.je.incomp.INCompressor: int nonEmptyBinsThisRun> = 0;

        this.<com.sleepycat.je.incomp.INCompressor: int processedBinsThisRun> = 0;

        this.<com.sleepycat.je.incomp.INCompressor: int lazyProcessed> = 0;

        this.<com.sleepycat.je.incomp.INCompressor: int wokenUp> = 0;

        $r0 = virtualinvoke env.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.DbConfigManager getConfigManager()>();

        $r1 = <com.sleepycat.je.config.EnvironmentParams: com.sleepycat.je.config.DurationConfigParam COMPRESSOR_LOCK_TIMEOUT>;

        $i0 = virtualinvoke $r0.<com.sleepycat.je.dbi.DbConfigManager: int getDuration(com.sleepycat.je.config.DurationConfigParam)>($r1);

        $l1 = (long) $i0;

        this.<com.sleepycat.je.incomp.INCompressor: long lockTimeout> = $l1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        this.<com.sleepycat.je.incomp.INCompressor: java.util.Map binRefQueue> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        this.<com.sleepycat.je.incomp.INCompressor: java.lang.Object binRefQueueSync> = $r3;

        $r4 = new com.sleepycat.je.utilint.StatGroup;

        specialinvoke $r4.<com.sleepycat.je.utilint.StatGroup: void <init>(java.lang.String,java.lang.String)>("Node Compression", "Removal and compression of internal btree nodes.");

        this.<com.sleepycat.je.incomp.INCompressor: com.sleepycat.je.utilint.StatGroup stats> = $r4;

        $r5 = new com.sleepycat.je.utilint.LongStat;

        $r6 = this.<com.sleepycat.je.incomp.INCompressor: com.sleepycat.je.utilint.StatGroup stats>;

        $r7 = <com.sleepycat.je.incomp.INCompStatDefinition: com.sleepycat.je.utilint.StatDefinition INCOMP_SPLIT_BINS>;

        specialinvoke $r5.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition)>($r6, $r7);

        this.<com.sleepycat.je.incomp.INCompressor: com.sleepycat.je.utilint.LongStat splitBins> = $r5;

        $r8 = new com.sleepycat.je.utilint.LongStat;

        $r9 = this.<com.sleepycat.je.incomp.INCompressor: com.sleepycat.je.utilint.StatGroup stats>;

        $r10 = <com.sleepycat.je.incomp.INCompStatDefinition: com.sleepycat.je.utilint.StatDefinition INCOMP_DBCLOSED_BINS>;

        specialinvoke $r8.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition)>($r9, $r10);

        this.<com.sleepycat.je.incomp.INCompressor: com.sleepycat.je.utilint.LongStat dbClosedBins> = $r8;

        $r11 = new com.sleepycat.je.utilint.LongStat;

        $r12 = this.<com.sleepycat.je.incomp.INCompressor: com.sleepycat.je.utilint.StatGroup stats>;

        $r13 = <com.sleepycat.je.incomp.INCompStatDefinition: com.sleepycat.je.utilint.StatDefinition INCOMP_CURSORS_BINS>;

        specialinvoke $r11.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition)>($r12, $r13);

        this.<com.sleepycat.je.incomp.INCompressor: com.sleepycat.je.utilint.LongStat cursorsBins> = $r11;

        $r14 = new com.sleepycat.je.utilint.LongStat;

        $r15 = this.<com.sleepycat.je.incomp.INCompressor: com.sleepycat.je.utilint.StatGroup stats>;

        $r16 = <com.sleepycat.je.incomp.INCompStatDefinition: com.sleepycat.je.utilint.StatDefinition INCOMP_NON_EMPTY_BINS>;

        specialinvoke $r14.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition)>($r15, $r16);

        this.<com.sleepycat.je.incomp.INCompressor: com.sleepycat.je.utilint.LongStat nonEmptyBins> = $r14;

        $r17 = new com.sleepycat.je.utilint.LongStat;

        $r18 = this.<com.sleepycat.je.incomp.INCompressor: com.sleepycat.je.utilint.StatGroup stats>;

        $r19 = <com.sleepycat.je.incomp.INCompStatDefinition: com.sleepycat.je.utilint.StatDefinition INCOMP_PROCESSED_BINS>;

        specialinvoke $r17.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition)>($r18, $r19);

        this.<com.sleepycat.je.incomp.INCompressor: com.sleepycat.je.utilint.LongStat processedBins> = $r17;

        $r20 = new com.sleepycat.je.utilint.LongStat;

        $r21 = this.<com.sleepycat.je.incomp.INCompressor: com.sleepycat.je.utilint.StatGroup stats>;

        $r22 = <com.sleepycat.je.incomp.INCompStatDefinition: com.sleepycat.je.utilint.StatDefinition INCOMP_QUEUE_SIZE>;

        specialinvoke $r20.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition)>($r21, $r22);

        this.<com.sleepycat.je.incomp.INCompressor: com.sleepycat.je.utilint.LongStat compQueueSize> = $r20;

        return;
    }

    public com.sleepycat.je.utilint.StatGroup loadStats(com.sleepycat.je.StatsConfig)
    {
        com.sleepycat.je.incomp.INCompressor this;
        com.sleepycat.je.StatsConfig config;
        com.sleepycat.je.utilint.LongStat $r0;
        int $i0;
        long $l1;
        java.lang.Long $r1;
        boolean $z0, $z1;
        com.sleepycat.je.utilint.StatGroup $r2, $r3;

        this := @this: com.sleepycat.je.incomp.INCompressor;

        config := @parameter0: com.sleepycat.je.StatsConfig;

        $r0 = this.<com.sleepycat.je.incomp.INCompressor: com.sleepycat.je.utilint.LongStat compQueueSize>;

        $i0 = virtualinvoke this.<com.sleepycat.je.incomp.INCompressor: int getBinRefQueueSize()>();

        $l1 = (long) $i0;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        virtualinvoke $r0.<com.sleepycat.je.utilint.LongStat: void set(java.lang.Long)>($r1);

        $z0 = virtualinvoke config.<com.sleepycat.je.StatsConfig: boolean getClear()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        this.<com.sleepycat.je.incomp.INCompressor: int lazyProcessed> = 0;

        this.<com.sleepycat.je.incomp.INCompressor: int wokenUp> = 0;

     label1:
        $r2 = this.<com.sleepycat.je.incomp.INCompressor: com.sleepycat.je.utilint.StatGroup stats>;

        $z1 = virtualinvoke config.<com.sleepycat.je.StatsConfig: boolean getClear()>();

        $r3 = virtualinvoke $r2.<com.sleepycat.je.utilint.StatGroup: com.sleepycat.je.utilint.StatGroup cloneGroup(boolean)>($z1);

        return $r3;
    }

    public int getBinRefQueueSize()
    {
        com.sleepycat.je.incomp.INCompressor this;
        java.lang.Object l1, $r0;
        java.lang.Throwable l2, $r2;
        java.util.Map $r1;
        int $i0;

        this := @this: com.sleepycat.je.incomp.INCompressor;

        $r0 = this.<com.sleepycat.je.incomp.INCompressor: java.lang.Object binRefQueueSync>;

        l1 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.sleepycat.je.incomp.INCompressor: java.util.Map binRefQueue>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        exitmonitor l1;

     label2:
        return $i0;

     label3:
        $r2 := @caughtexception;

     label4:
        l2 = $r2;

        exitmonitor l1;

     label5:
        throw l2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void addMultipleBinRefsToQueue(java.util.Collection)
    {
        com.sleepycat.je.incomp.INCompressor this;
        java.util.Collection binRefs;
        java.lang.Object l2, $r0, $r1;
        java.util.Iterator l3;
        com.sleepycat.je.tree.BINReference binRef;
        java.lang.Throwable l5, $r2;
        boolean $z0;

        this := @this: com.sleepycat.je.incomp.INCompressor;

        binRefs := @parameter0: java.util.Collection;

        $r0 = this.<com.sleepycat.je.incomp.INCompressor: java.lang.Object binRefQueueSync>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        l3 = interfaceinvoke binRefs.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        $r1 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        binRef = (com.sleepycat.je.tree.BINReference) $r1;

        specialinvoke this.<com.sleepycat.je.incomp.INCompressor: void addBinRefToQueueAlreadyLatched(com.sleepycat.je.tree.BINReference)>(binRef);

        goto label2;

     label3:
        exitmonitor l2;

     label4:
        goto label8;

     label5:
        $r2 := @caughtexception;

     label6:
        l5 = $r2;

        exitmonitor l2;

     label7:
        throw l5;

     label8:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void addBinRefToQueueAlreadyLatched(com.sleepycat.je.tree.BINReference)
    {
        com.sleepycat.je.incomp.INCompressor this;
        com.sleepycat.je.tree.BINReference binRef;
        java.lang.Long node;
        long $l0;
        java.util.Map $r0, $r1;
        boolean $z0;

        this := @this: com.sleepycat.je.incomp.INCompressor;

        binRef := @parameter0: com.sleepycat.je.tree.BINReference;

        $l0 = virtualinvoke binRef.<com.sleepycat.je.tree.BINReference: long getNodeId()>();

        node = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r0 = this.<com.sleepycat.je.incomp.INCompressor: java.util.Map binRefQueue>;

        $z0 = interfaceinvoke $r0.<java.util.Map: boolean containsKey(java.lang.Object)>(node);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = this.<com.sleepycat.je.incomp.INCompressor: java.util.Map binRefQueue>;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(node, binRef);

        return;
    }

    public void lazyCompress(com.sleepycat.je.tree.IN, boolean)
    {
        com.sleepycat.je.incomp.INCompressor this;
        com.sleepycat.je.tree.IN in;
        boolean compressDirtySlots, $z0, $z1, $z2, $z3, $z4, $z5;
        com.sleepycat.je.tree.BIN bin;
        java.lang.AssertionError $r0;
        int $i0, i#15, $i1, $i2, $i3, $i4;

        this := @this: com.sleepycat.je.incomp.INCompressor;

        in := @parameter0: com.sleepycat.je.tree.IN;

        compressDirtySlots := @parameter1: boolean;

        $z0 = <com.sleepycat.je.incomp.INCompressor: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke in.<com.sleepycat.je.tree.IN: boolean isLatchOwner()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $z2 = virtualinvoke in.<com.sleepycat.je.tree.IN: boolean isBIN()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label2;

        $z3 = virtualinvoke in.<com.sleepycat.je.tree.IN: boolean isBINDelta()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label3;

     label2:
        return;

     label3:
        bin = (com.sleepycat.je.tree.BIN) in;

        $i0 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: int nCursors()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label7;

        i#15 = 0;

     label4:
        $i1 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: int getNEntries()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#15);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#15 >= $i1 goto label6;

        $z4 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean isDefunct(int)>(i#15);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label5;

        virtualinvoke this.<com.sleepycat.je.incomp.INCompressor: void addBinToQueue(com.sleepycat.je.tree.BIN)>(bin);

        goto label6;

     label5:
        i#15 = i#15 + 1;

        goto label4;

     label6:
        return;

     label7:
        $z5 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean compress(boolean,com.sleepycat.je.cleaner.LocalUtilizationTracker)>(compressDirtySlots, null);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label8;

        $i2 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: int getNEntries()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 != 0 goto label9;

        virtualinvoke this.<com.sleepycat.je.incomp.INCompressor: void addBinToQueue(com.sleepycat.je.tree.BIN)>(bin);

        goto label9;

     label8:
        virtualinvoke this.<com.sleepycat.je.incomp.INCompressor: void addBinToQueue(com.sleepycat.je.tree.BIN)>(bin);

     label9:
        $i3 = this.<com.sleepycat.je.incomp.INCompressor: int lazyProcessed>;

        $i4 = $i3 + 1;

        this.<com.sleepycat.je.incomp.INCompressor: int lazyProcessed> = $i4;

        return;
    }

    public void addBinToQueue(com.sleepycat.je.tree.BIN)
    {
        com.sleepycat.je.incomp.INCompressor this;
        com.sleepycat.je.tree.BIN bin;
        java.lang.Object l2, $r0;
        java.lang.Throwable l3, $r1;

        this := @this: com.sleepycat.je.incomp.INCompressor;

        bin := @parameter0: com.sleepycat.je.tree.BIN;

        $r0 = this.<com.sleepycat.je.incomp.INCompressor: java.lang.Object binRefQueueSync>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        specialinvoke this.<com.sleepycat.je.incomp.INCompressor: void addBinToQueueAlreadyLatched(com.sleepycat.je.tree.BIN)>(bin);

        exitmonitor l2;

     label2:
        goto label6;

     label3:
        $r1 := @caughtexception;

     label4:
        l3 = $r1;

        exitmonitor l2;

     label5:
        throw l3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void addBinToQueueAlreadyLatched(com.sleepycat.je.tree.BIN)
    {
        com.sleepycat.je.incomp.INCompressor this;
        com.sleepycat.je.tree.BIN bin;
        java.lang.Long node;
        long $l0;
        java.util.Map $r0, $r1;
        boolean $z0;
        com.sleepycat.je.tree.BINReference $r2;

        this := @this: com.sleepycat.je.incomp.INCompressor;

        bin := @parameter0: com.sleepycat.je.tree.BIN;

        $l0 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: long getNodeId()>();

        node = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r0 = this.<com.sleepycat.je.incomp.INCompressor: java.util.Map binRefQueue>;

        $z0 = interfaceinvoke $r0.<java.util.Map: boolean containsKey(java.lang.Object)>(node);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = this.<com.sleepycat.je.incomp.INCompressor: java.util.Map binRefQueue>;

        $r2 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: com.sleepycat.je.tree.BINReference createReference()>();

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(node, $r2);

        return;
    }


