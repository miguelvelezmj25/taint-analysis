    public static at.favre.tools.dconvert.converters.Result runImageOptimizer(java.io.File, at.favre.tools.dconvert.arg.ImageType, java.lang.String[], boolean, java.lang.String) throws java.io.IOException
    {
        java.io.File rawFile, outFile, copy, origFile, outFileNew, outFileNew;
        at.favre.tools.dconvert.arg.ImageType processedType, $r0;
        java.lang.String[] args;
        boolean keepOriginal, $z0, $z1, $z2, $z3, r1#90, r2#92, r3#94, $z5, $z6, $z7, $z9, $z11, $z12;
        java.lang.String outExtension, id, $r2, $r6, $r10, $r17, $r20, $r23, $r24, $r27, $r30, $r31, log#138;
        at.favre.tools.dconvert.converters.Result result, tmp$1715442140;
        java.util.UUID $r1;
        java.lang.StringBuilder $r4, $r5, $r8, $r9, $r19, $r21, $r22, $r26, $r28, $r29, $r33, $r34, tmp$345441601, tmp$1179196716, tmp$1735576656, tmp$1070317395, tmp$515003593;
        java.nio.file.Path $r11, $r12;
        java.lang.Object[] $r13;
        java.nio.file.StandardCopyOption $r14, $r15;
        int i#47, $i0;
        java.lang.Exception $r36;
        java.util.List $r37;
        java.nio.file.CopyOption[] tmp$2099247509;

        rawFile := @parameter0: java.io.File;

        processedType := @parameter1: at.favre.tools.dconvert.arg.ImageType;

        args := @parameter2: java.lang.String[];

        keepOriginal := @parameter3: boolean;

        outExtension := @parameter4: java.lang.String;

        $r0 = staticinvoke <at.favre.tools.dconvert.arg.Arguments: at.favre.tools.dconvert.arg.ImageType getImageType(java.io.File)>(rawFile);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(processedType);

        if $r0 != processedType goto label12;

        $z0 = virtualinvoke rawFile.<java.io.File: boolean exists()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label12;

        $z1 = virtualinvoke rawFile.<java.io.File: boolean isFile()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label12;

        $r1 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        $r2 = virtualinvoke $r1.<java.util.UUID: java.lang.String toString()>();

        id = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, 8);

        tmp$345441601 = new java.lang.StringBuilder;

        specialinvoke tmp$345441601.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke tmp$345441601.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_optimized_");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(id);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        outFile = staticinvoke <at.favre.tools.dconvert.util.PostProcessorUtil: java.io.File getFileWithPostFix(java.io.File,java.lang.String,java.lang.String)>(rawFile, $r6, outExtension);

        tmp$1179196716 = new java.lang.StringBuilder;

        specialinvoke tmp$1179196716.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke tmp$1179196716.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_copy_");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(id);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        copy = staticinvoke <at.favre.tools.dconvert.util.PostProcessorUtil: java.io.File getFileWithPostFix(java.io.File,java.lang.String,java.lang.String)>(rawFile, $r10, outExtension);

        $r11 = virtualinvoke rawFile.<java.io.File: java.nio.file.Path toPath()>();

        $r12 = virtualinvoke copy.<java.io.File: java.nio.file.Path toPath()>();

        $r13 = newarray (java.nio.file.CopyOption)[2];

        $r14 = <java.nio.file.StandardCopyOption: java.nio.file.StandardCopyOption COPY_ATTRIBUTES>;

        $r13[0] = $r14;

        $r15 = <java.nio.file.StandardCopyOption: java.nio.file.StandardCopyOption REPLACE_EXISTING>;

        $r13[1] = $r15;

        tmp$2099247509 = (java.nio.file.CopyOption[]) $r13;

        staticinvoke <java.nio.file.Files: java.nio.file.Path copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>($r11, $r12, tmp$2099247509);

        i#47 = 0;

     label01:
        $i0 = lengthof args;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#47);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#47 >= $i0 goto label04;

        $r17 = args[i#47];

        $z2 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>("%%outFilePath%%");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label02;

        tmp$1735576656 = new java.lang.StringBuilder;

        specialinvoke tmp$1735576656.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke tmp$1735576656.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r20 = virtualinvoke outFile.<java.io.File: java.lang.String getAbsolutePath()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        args[i#47] = $r23;

     label02:
        $r24 = args[i#47];

        $z3 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>("%%sourceFilePath%%");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label03;

        tmp$1070317395 = new java.lang.StringBuilder;

        specialinvoke tmp$1070317395.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke tmp$1070317395.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r27 = virtualinvoke copy.<java.io.File: java.lang.String getAbsolutePath()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        args[i#47] = $r30;

     label03:
        i#47 = i#47 + 1;

        goto label01;

     label04:
        result = staticinvoke <at.favre.tools.dconvert.util.PostProcessorUtil: at.favre.tools.dconvert.converters.Result runCmd(java.lang.String[])>(args);

        virtualinvoke copy.<java.io.File: boolean delete()>();

        r1#90 = 1;

        r2#92 = 1;

        r3#94 = 1;

        $z5 = virtualinvoke outFile.<java.io.File: boolean exists()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label09;

        $z6 = virtualinvoke outFile.<java.io.File: boolean isFile()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label09;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(keepOriginal);

        if keepOriginal == 0 goto label07;

        $r31 = staticinvoke <at.favre.tools.dconvert.util.MiscUtil: java.lang.String getFileExtension(java.io.File)>(rawFile);

        origFile = staticinvoke <at.favre.tools.dconvert.util.PostProcessorUtil: java.io.File getFileWithPostFix(java.io.File,java.lang.String,java.lang.String)>(rawFile, "_orig", $r31);

        $z7 = virtualinvoke origFile.<java.io.File: boolean exists()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 == 0 goto label05;

        virtualinvoke origFile.<java.io.File: boolean delete()>();

     label05:
        r1#90 = virtualinvoke rawFile.<java.io.File: boolean renameTo(java.io.File)>(origFile);

        outFileNew = staticinvoke <at.favre.tools.dconvert.util.PostProcessorUtil: java.io.File getFileWithPostFix(java.io.File,java.lang.String,java.lang.String)>(rawFile, "", outExtension);

        $z9 = virtualinvoke outFileNew.<java.io.File: boolean exists()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 == 0 goto label06;

        virtualinvoke outFileNew.<java.io.File: boolean delete()>();

     label06:
        r2#92 = virtualinvoke outFile.<java.io.File: boolean renameTo(java.io.File)>(outFileNew);

        goto label09;

     label07:
        $z11 = virtualinvoke rawFile.<java.io.File: boolean delete()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z11);

        if $z11 == 0 goto label09;

        outFileNew = staticinvoke <at.favre.tools.dconvert.util.PostProcessorUtil: java.io.File getFileWithPostFix(java.io.File,java.lang.String,java.lang.String)>(rawFile, "", outExtension);

        $z12 = virtualinvoke outFileNew.<java.io.File: boolean exists()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z12);

        if $z12 == 0 goto label08;

        virtualinvoke outFileNew.<java.io.File: boolean delete()>();

     label08:
        r3#94 = virtualinvoke outFile.<java.io.File: boolean renameTo(java.io.File)>(outFileNew);

     label09:
        log#138 = result.<at.favre.tools.dconvert.converters.Result: java.lang.String log>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(r1#90);

        if r1#90 == 0 goto label10;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(r2#92);

        if r2#92 == 0 goto label10;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(r3#94);

        if r3#94 != 0 goto label11;

     label10:
        tmp$515003593 = new java.lang.StringBuilder;

        specialinvoke tmp$515003593.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke tmp$515003593.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(log#138);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not rename all files correctly\n");

        log#138 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

     label11:
        tmp$1715442140 = new at.favre.tools.dconvert.converters.Result;

        $r36 = result.<at.favre.tools.dconvert.converters.Result: java.lang.Exception exception>;

        $r37 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(rawFile);

        specialinvoke tmp$1715442140.<at.favre.tools.dconvert.converters.Result: void <init>(java.lang.String,java.lang.Exception,java.util.List)>(log#138, $r36, $r37);

        return tmp$1715442140;

     label12:
        return null;
    }

    static void <clinit>()
    {
        java.util.concurrent.locks.ReentrantLock $r0;

        $r0 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r0.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        <at.favre.tools.dconvert.util.PostProcessorUtil: java.util.concurrent.locks.ReentrantLock lock> = $r0;

        return;
    }

    private static java.io.File getFileWithPostFix(java.io.File, java.lang.String, java.lang.String)
    {
        java.io.File src, $r0, $r1;
        java.lang.String postfix, extension, $r3, $r8;
        java.lang.StringBuilder $r2, $r4, $r5, $r6, $r7;

        src := @parameter0: java.io.File;

        postfix := @parameter1: java.lang.String;

        extension := @parameter2: java.lang.String;

        $r0 = new java.io.File;

        $r1 = virtualinvoke src.<java.io.File: java.io.File getParentFile()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = staticinvoke <at.favre.tools.dconvert.util.MiscUtil: java.lang.String getFileNameWithoutExtension(java.io.File)>(src);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(postfix);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(extension);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, $r8);

        return $r0;
    }

    private static at.favre.tools.dconvert.converters.Result runCmd(java.lang.String[])
    {
        java.lang.String[] cmdArray;
        java.lang.StringBuilder logStringBuilder, $r0, $r1, $r3, $r11, $r12, $r19, $r21, $r22, $r24;
        java.lang.ProcessBuilder pb, $r5;
        java.lang.Process process;
        java.io.BufferedReader inStreamReader, $r7;
        java.lang.String s, $r2, $r10, $r20, $r23, $r27;
        java.lang.Throwable l8, l9, l6#28, $r14, l7#45, $r15, l7#50, $r16, $r17;
        java.lang.Exception e, exception#4, $r18;
        java.io.InputStreamReader $r8;
        java.io.InputStream $r9;
        boolean $z0;
        at.favre.tools.dconvert.converters.Result $r26;
        java.util.List $r28;

        cmdArray := @parameter0: java.lang.String[];

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        logStringBuilder = $r0;

        exception#4 = null;

     label01:
        $r1 = virtualinvoke logStringBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("execute: ");

        $r2 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(cmdArray);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r5 = new java.lang.ProcessBuilder;

        specialinvoke $r5.<java.lang.ProcessBuilder: void <init>(java.lang.String[])>(cmdArray);

        pb = $r5;

        virtualinvoke pb.<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectErrorStream(boolean)>(1);

        process = virtualinvoke pb.<java.lang.ProcessBuilder: java.lang.Process start()>();

        $r7 = new java.io.BufferedReader;

        $r8 = new java.io.InputStreamReader;

        $r9 = virtualinvoke process.<java.lang.Process: java.io.InputStream getInputStream()>();

        specialinvoke $r8.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r9);

        specialinvoke $r7.<java.io.BufferedReader: void <init>(java.io.Reader)>($r8);

        inStreamReader = $r7;

        l6#28 = null;

     label02:
        $r10 = virtualinvoke inStreamReader.<java.io.BufferedReader: java.lang.String readLine()>();

        s = $r10;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r10);

        if $r10 == null goto label03;

        $z0 = virtualinvoke s.<java.lang.String: boolean isEmpty()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label02;

        $r11 = virtualinvoke logStringBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(s);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        goto label02;

     label03:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(inStreamReader);

        if inStreamReader == null goto label17;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l6#28);

        if l6#28 == null goto label07;

     label04:
        virtualinvoke inStreamReader.<java.io.BufferedReader: void close()>();

     label05:
        goto label17;

     label06:
        $r14 := @caughtexception;

        l7#45 = $r14;

        virtualinvoke l6#28.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l7#45);

        goto label17;

     label07:
        virtualinvoke inStreamReader.<java.io.BufferedReader: void close()>();

        goto label17;

     label08:
        $r15 := @caughtexception;

     label09:
        l7#50 = $r15;

        l6#28 = l7#50;

        throw l7#50;

     label10:
        $r16 := @caughtexception;

        l8 = $r16;

     label11:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(inStreamReader);

        if inStreamReader == null goto label16;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l6#28);

        if l6#28 == null goto label15;

     label12:
        virtualinvoke inStreamReader.<java.io.BufferedReader: void close()>();

     label13:
        goto label16;

     label14:
        $r17 := @caughtexception;

        l9 = $r17;

        virtualinvoke l6#28.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l9);

        goto label16;

     label15:
        virtualinvoke inStreamReader.<java.io.BufferedReader: void close()>();

     label16:
        throw l8;

     label17:
        virtualinvoke process.<java.lang.Process: int waitFor()>();

     label18:
        goto label20;

     label19:
        $r18 := @caughtexception;

        e = $r18;

        exception#4 = e;

        $r19 = virtualinvoke logStringBuilder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("error: could not run command - ");

        $r20 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(cmdArray);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

        $r23 = virtualinvoke e.<java.lang.Exception: java.lang.String getMessage()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - is it set in PATH?\n");

     label20:
        $r26 = new at.favre.tools.dconvert.converters.Result;

        $r27 = virtualinvoke logStringBuilder.<java.lang.StringBuilder: java.lang.String toString()>();

        $r28 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke $r26.<at.favre.tools.dconvert.converters.Result: void <init>(java.lang.String,java.lang.Exception,java.util.List)>($r27, exception#4, $r28);

        return $r26;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label09 to label11 with label10;
        catch java.lang.Exception from label01 to label18 with label19;
    }

    public static at.favre.tools.dconvert.converters.Result runImageOptimizer(java.io.File, at.favre.tools.dconvert.arg.ImageType, java.lang.String[], boolean) throws java.io.IOException
    {
        java.io.File rawFile;
        at.favre.tools.dconvert.arg.ImageType processedType;
        java.lang.String[] args;
        boolean keepOriginal;
        java.lang.String $r0;
        at.favre.tools.dconvert.converters.Result $r1;

        rawFile := @parameter0: java.io.File;

        processedType := @parameter1: at.favre.tools.dconvert.arg.ImageType;

        args := @parameter2: java.lang.String[];

        keepOriginal := @parameter3: boolean;

        $r0 = staticinvoke <at.favre.tools.dconvert.util.MiscUtil: java.lang.String getFileExtension(java.io.File)>(rawFile);

        $r1 = staticinvoke <at.favre.tools.dconvert.util.PostProcessorUtil: at.favre.tools.dconvert.converters.Result runImageOptimizer(java.io.File,at.favre.tools.dconvert.arg.ImageType,java.lang.String[],boolean,java.lang.String)>(rawFile, processedType, args, keepOriginal, $r0);

        return $r1;
    }

    public static boolean canRunCmd(java.lang.String[])
    {
        java.lang.String[] cmdArray;
        java.lang.ProcessBuilder pb, $r0;
        java.lang.Process process;
        java.io.BufferedReader inStreamReader, $r2;
        java.lang.Throwable l6, l7, l4#15, $r6, l5#22, $r7, l5#27, $r8, $r9;
        java.lang.Exception e, $r10;
        java.io.InputStreamReader $r3;
        java.io.InputStream $r4;
        java.lang.String $r5;

        cmdArray := @parameter0: java.lang.String[];

     label01:
        $r0 = new java.lang.ProcessBuilder;

        specialinvoke $r0.<java.lang.ProcessBuilder: void <init>(java.lang.String[])>(cmdArray);

        pb = $r0;

        virtualinvoke pb.<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectErrorStream(boolean)>(1);

        process = virtualinvoke pb.<java.lang.ProcessBuilder: java.lang.Process start()>();

        $r2 = new java.io.BufferedReader;

        $r3 = new java.io.InputStreamReader;

        $r4 = virtualinvoke process.<java.lang.Process: java.io.InputStream getInputStream()>();

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r4);

        specialinvoke $r2.<java.io.BufferedReader: void <init>(java.io.Reader)>($r3);

        inStreamReader = $r2;

        l4#15 = null;

     label02:
        $r5 = virtualinvoke inStreamReader.<java.io.BufferedReader: java.lang.String readLine()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r5);

        if $r5 == null goto label03;

        goto label02;

     label03:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(inStreamReader);

        if inStreamReader == null goto label17;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l4#15);

        if l4#15 == null goto label07;

     label04:
        virtualinvoke inStreamReader.<java.io.BufferedReader: void close()>();

     label05:
        goto label17;

     label06:
        $r6 := @caughtexception;

        l5#22 = $r6;

        virtualinvoke l4#15.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l5#22);

        goto label17;

     label07:
        virtualinvoke inStreamReader.<java.io.BufferedReader: void close()>();

        goto label17;

     label08:
        $r7 := @caughtexception;

     label09:
        l5#27 = $r7;

        l4#15 = l5#27;

        throw l5#27;

     label10:
        $r8 := @caughtexception;

        l6 = $r8;

     label11:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(inStreamReader);

        if inStreamReader == null goto label16;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l4#15);

        if l4#15 == null goto label15;

     label12:
        virtualinvoke inStreamReader.<java.io.BufferedReader: void close()>();

     label13:
        goto label16;

     label14:
        $r9 := @caughtexception;

        l7 = $r9;

        virtualinvoke l4#15.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l7);

        goto label16;

     label15:
        virtualinvoke inStreamReader.<java.io.BufferedReader: void close()>();

     label16:
        throw l6;

     label17:
        virtualinvoke process.<java.lang.Process: int waitFor()>();

     label18:
        goto label20;

     label19:
        $r10 := @caughtexception;

        e = $r10;

        return 0;

     label20:
        return 1;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label09 to label11 with label10;
        catch java.lang.Exception from label01 to label18 with label19;
    }


