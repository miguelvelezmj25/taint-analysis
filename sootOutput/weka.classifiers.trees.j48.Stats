    public static double addErrs(double, double, float)
    {
        double N, e, base, z, f, r, $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34;
        float CF, $f0;
        byte $b0, $b1, $b2, $b3;
        java.io.PrintStream $r0;

        N := @parameter0: double;

        e := @parameter1: double;

        CF := @parameter2: float;

        $d0 = (double) CF;

        $b0 = $d0 cmpl 0.5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 <= 0 goto label1;

        $r0 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("WARNING: confidence value for pruning  too high. Error estimate not modified.");

        return 0.0;

     label1:
        $b1 = e cmpg 1.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 >= 0 goto label3;

        $d1 = (double) CF;

        $d2 = 1.0 / N;

        $d3 = staticinvoke <java.lang.Math: double pow(double,double)>($d1, $d2);

        $d4 = 1.0 - $d3;

        base = N * $d4;

        $b2 = e cmpl 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b2);

        if $b2 != 0 goto label2;

        return base;

     label2:
        $d5 = staticinvoke <weka.classifiers.trees.j48.Stats: double addErrs(double,double,float)>(N, 1.0, CF);

        $d6 = $d5 - base;

        $d7 = e * $d6;

        $d8 = base + $d7;

        return $d8;

     label3:
        $d9 = e + 0.5;

        $b3 = $d9 cmpl N;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b3);

        if $b3 < 0 goto label4;

        $d10 = N - e;

        $d11 = staticinvoke <java.lang.Math: double max(double,double)>($d10, 0.0);

        return $d11;

     label4:
        $f0 = 1.0F - CF;

        $d12 = (double) $f0;

        z = staticinvoke <weka.core.Statistics: double normalInverse(double)>($d12);

        $d13 = e + 0.5;

        f = $d13 / N;

        $d14 = z * z;

        $d15 = 2.0 * N;

        $d16 = $d14 / $d15;

        $d17 = f + $d16;

        $d18 = f / N;

        $d19 = f * f;

        $d20 = $d19 / N;

        $d21 = $d18 - $d20;

        $d22 = z * z;

        $d23 = 4.0 * N;

        $d24 = $d23 * N;

        $d25 = $d22 / $d24;

        $d26 = $d21 + $d25;

        $d27 = staticinvoke <java.lang.Math: double sqrt(double)>($d26);

        $d28 = z * $d27;

        $d29 = $d17 + $d28;

        $d30 = z * z;

        $d31 = $d30 / N;

        $d32 = 1.0 + $d31;

        r = $d29 / $d32;

        $d33 = r * N;

        $d34 = $d33 - e;

        return $d34;
    }


