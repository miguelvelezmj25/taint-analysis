    public void setMinimumNumberInstances(int)
    {
        weka.core.Capabilities this;
        int value;

        this := @this: weka.core.Capabilities;

        value := @parameter0: int;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(value);

        if value < 0 goto label1;

        this.<weka.core.Capabilities: int m_MinimumNumberInstances> = value;

     label1:
        return;
    }

    public void <init>(weka.core.CapabilitiesHandler)
    {
        weka.core.Capabilities this;
        weka.core.CapabilitiesHandler owner;
        java.lang.Exception e, $r4;
        java.util.HashSet $r0, $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        java.util.Properties $r2, $r3, $r5, $r6, $r9, $r12, $r15, $r18, $r21;
        java.lang.String $r7, $r10, $r13, $r16, $r19, $r22;

        this := @this: weka.core.Capabilities;

        owner := @parameter0: weka.core.CapabilitiesHandler;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<weka.core.Capabilities: java.lang.Exception m_FailReason> = null;

        this.<weka.core.Capabilities: int m_MinimumNumberInstances> = 1;

        virtualinvoke this.<weka.core.Capabilities: void setOwner(weka.core.CapabilitiesHandler)>(owner);

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        this.<weka.core.Capabilities: java.util.HashSet m_Capabilities> = $r0;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        this.<weka.core.Capabilities: java.util.HashSet m_Dependencies> = $r1;

        $z0 = virtualinvoke this.<weka.core.Capabilities: boolean doNotCheckCapabilities()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label01;

        return;

     label01:
        $r2 = <weka.core.Capabilities: java.util.Properties PROPERTIES>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        if $r2 != null goto label05;

     label02:
        $r3 = staticinvoke <weka.core.Utils: java.util.Properties readProperties(java.lang.String)>("weka/core/Capabilities.props");

        <weka.core.Capabilities: java.util.Properties PROPERTIES> = $r3;

     label03:
        goto label05;

     label04:
        $r4 := @caughtexception;

        e = $r4;

        virtualinvoke e.<java.lang.Exception: void printStackTrace()>();

        $r5 = new java.util.Properties;

        specialinvoke $r5.<java.util.Properties: void <init>()>();

        <weka.core.Capabilities: java.util.Properties PROPERTIES> = $r5;

     label05:
        $r6 = <weka.core.Capabilities: java.util.Properties PROPERTIES>;

        $r7 = virtualinvoke $r6.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("Test", "true");

        $z1 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r7);

        this.<weka.core.Capabilities: boolean m_Test> = $z1;

        $r9 = <weka.core.Capabilities: java.util.Properties PROPERTIES>;

        $r10 = virtualinvoke $r9.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("InstancesTest", "true");

        $z2 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r10);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label06;

        $z3 = this.<weka.core.Capabilities: boolean m_Test>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label06;

        $z4 = 1;

        goto label07;

     label06:
        $z4 = 0;

     label07:
        this.<weka.core.Capabilities: boolean m_InstancesTest> = $z4;

        $r12 = <weka.core.Capabilities: java.util.Properties PROPERTIES>;

        $r13 = virtualinvoke $r12.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("AttributeTest", "true");

        $z5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r13);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label08;

        $z6 = this.<weka.core.Capabilities: boolean m_Test>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label08;

        $z7 = 1;

        goto label09;

     label08:
        $z7 = 0;

     label09:
        this.<weka.core.Capabilities: boolean m_AttributeTest> = $z7;

        $r15 = <weka.core.Capabilities: java.util.Properties PROPERTIES>;

        $r16 = virtualinvoke $r15.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("MissingValuesTest", "true");

        $z8 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r16);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 == 0 goto label10;

        $z9 = this.<weka.core.Capabilities: boolean m_Test>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 == 0 goto label10;

        $z10 = 1;

        goto label11;

     label10:
        $z10 = 0;

     label11:
        this.<weka.core.Capabilities: boolean m_MissingValuesTest> = $z10;

        $r18 = <weka.core.Capabilities: java.util.Properties PROPERTIES>;

        $r19 = virtualinvoke $r18.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("MissingClassValuesTest", "true");

        $z11 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r19);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z11);

        if $z11 == 0 goto label12;

        $z12 = this.<weka.core.Capabilities: boolean m_Test>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z12);

        if $z12 == 0 goto label12;

        $z13 = 1;

        goto label13;

     label12:
        $z13 = 0;

     label13:
        this.<weka.core.Capabilities: boolean m_MissingClassValuesTest> = $z13;

        $r21 = <weka.core.Capabilities: java.util.Properties PROPERTIES>;

        $r22 = virtualinvoke $r21.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("MinimumNumberInstancesTest", "true");

        $z14 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r22);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z14);

        if $z14 == 0 goto label14;

        $z15 = this.<weka.core.Capabilities: boolean m_Test>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z15);

        if $z15 == 0 goto label14;

        $z16 = 1;

        goto label15;

     label14:
        $z16 = 0;

     label15:
        this.<weka.core.Capabilities: boolean m_MinimumNumberInstancesTest> = $z16;

        $z17 = owner instanceof weka.classifiers.UpdateableClassifier;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z17);

        if $z17 != 0 goto label16;

        $z18 = owner instanceof weka.clusterers.UpdateableClusterer;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z18);

        if $z18 == 0 goto label17;

     label16:
        virtualinvoke this.<weka.core.Capabilities: void setMinimumNumberInstances(int)>(0);

     label17:
        return;

        catch java.lang.Exception from label02 to label03 with label04;
    }

    public void setOwner(weka.core.CapabilitiesHandler)
    {
        weka.core.Capabilities this;
        weka.core.CapabilitiesHandler value;

        this := @this: weka.core.Capabilities;

        value := @parameter0: weka.core.CapabilitiesHandler;

        this.<weka.core.Capabilities: weka.core.CapabilitiesHandler m_Owner> = value;

        return;
    }

    public boolean doNotCheckCapabilities()
    {
        weka.core.Capabilities this;
        weka.core.CapabilitiesHandler $r0, $r1, $r2;
        boolean $z0, $z1;
        weka.core.CapabilitiesIgnorer $r3;

        this := @this: weka.core.Capabilities;

        $r0 = virtualinvoke this.<weka.core.Capabilities: weka.core.CapabilitiesHandler getOwner()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label1;

        $r1 = virtualinvoke this.<weka.core.Capabilities: weka.core.CapabilitiesHandler getOwner()>();

        $z0 = $r1 instanceof weka.core.CapabilitiesIgnorer;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke this.<weka.core.Capabilities: weka.core.CapabilitiesHandler getOwner()>();

        $r3 = (weka.core.CapabilitiesIgnorer) $r2;

        $z1 = interfaceinvoke $r3.<weka.core.CapabilitiesIgnorer: boolean getDoNotCheckCapabilities()>();

        return $z1;

     label1:
        return 0;
    }

    public weka.core.CapabilitiesHandler getOwner()
    {
        weka.core.Capabilities this;
        weka.core.CapabilitiesHandler $r0;

        this := @this: weka.core.Capabilities;

        $r0 = this.<weka.core.Capabilities: weka.core.CapabilitiesHandler m_Owner>;

        return $r0;
    }

    public void enableAllAttributes()
    {
        weka.core.Capabilities this;
        weka.core.Capabilities$Capability[] l1;
        int l2, l3#7;
        weka.core.Capabilities$Capability cap;
        boolean $z0, $z1;

        this := @this: weka.core.Capabilities;

        $z0 = virtualinvoke this.<weka.core.Capabilities: boolean doNotCheckCapabilities()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        return;

     label1:
        l1 = staticinvoke <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability[] values()>();

        l2 = lengthof l1;

        l3#7 = 0;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3#7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l2);

        if l3#7 >= l2 goto label4;

        cap = l1[l3#7];

        $z1 = virtualinvoke cap.<weka.core.Capabilities$Capability: boolean isAttribute()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label3;

        virtualinvoke this.<weka.core.Capabilities: void enable(weka.core.Capabilities$Capability)>(cap);

     label3:
        l3#7 = l3#7 + 1;

        goto label2;

     label4:
        return;
    }

    public void enable(weka.core.Capabilities$Capability)
    {
        weka.core.Capabilities this;
        weka.core.Capabilities$Capability c, $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        boolean $z0;
        java.util.HashSet $r8;

        this := @this: weka.core.Capabilities;

        c := @parameter0: weka.core.Capabilities$Capability;

        $z0 = virtualinvoke this.<weka.core.Capabilities: boolean doNotCheckCapabilities()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r0 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability NOMINAL_ATTRIBUTES>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if c != $r0 goto label2;

        $r1 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability BINARY_ATTRIBUTES>;

        virtualinvoke this.<weka.core.Capabilities: void enable(weka.core.Capabilities$Capability)>($r1);

        goto label5;

     label2:
        $r2 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability BINARY_ATTRIBUTES>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        if c != $r2 goto label3;

        $r3 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability UNARY_ATTRIBUTES>;

        virtualinvoke this.<weka.core.Capabilities: void enable(weka.core.Capabilities$Capability)>($r3);

        goto label5;

     label3:
        $r4 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability UNARY_ATTRIBUTES>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        if c != $r4 goto label4;

        $r5 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability EMPTY_NOMINAL_ATTRIBUTES>;

        virtualinvoke this.<weka.core.Capabilities: void enable(weka.core.Capabilities$Capability)>($r5);

        goto label5;

     label4:
        $r6 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability NOMINAL_CLASS>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r6);

        if c != $r6 goto label5;

        $r7 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability BINARY_CLASS>;

        virtualinvoke this.<weka.core.Capabilities: void enable(weka.core.Capabilities$Capability)>($r7);

     label5:
        $r8 = this.<weka.core.Capabilities: java.util.HashSet m_Capabilities>;

        virtualinvoke $r8.<java.util.HashSet: boolean add(java.lang.Object)>(c);

        return;
    }

    public void enableAllClasses()
    {
        weka.core.Capabilities this;
        weka.core.Capabilities$Capability[] l1;
        int l2, l3#7;
        weka.core.Capabilities$Capability cap;
        boolean $z0, $z1;

        this := @this: weka.core.Capabilities;

        $z0 = virtualinvoke this.<weka.core.Capabilities: boolean doNotCheckCapabilities()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        return;

     label1:
        l1 = staticinvoke <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability[] values()>();

        l2 = lengthof l1;

        l3#7 = 0;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3#7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l2);

        if l3#7 >= l2 goto label4;

        cap = l1[l3#7];

        $z1 = virtualinvoke cap.<weka.core.Capabilities$Capability: boolean isClass()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label3;

        virtualinvoke this.<weka.core.Capabilities: void enable(weka.core.Capabilities$Capability)>(cap);

     label3:
        l3#7 = l3#7 + 1;

        goto label2;

     label4:
        return;
    }

    public boolean test(weka.core.Instances)
    {
        weka.core.Capabilities this;
        weka.core.Instances data;
        int $i0, $i1;
        boolean $z0;

        this := @this: weka.core.Capabilities;

        data := @parameter0: weka.core.Instances;

        $i0 = virtualinvoke data.<weka.core.Instances: int numAttributes()>();

        $i1 = $i0 - 1;

        $z0 = virtualinvoke this.<weka.core.Capabilities: boolean test(weka.core.Instances,int,int)>(data, 0, $i1);

        return $z0;
    }

    public java.lang.Exception getFailReason()
    {
        weka.core.Capabilities this;
        boolean $z0;
        java.lang.Exception $r0;

        this := @this: weka.core.Capabilities;

        $z0 = virtualinvoke this.<weka.core.Capabilities: boolean doNotCheckCapabilities()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r0 = this.<weka.core.Capabilities: java.lang.Exception m_FailReason>;

        return $r0;
    }

    public boolean test(weka.core.Instances, int, int)
    {
        weka.core.Capabilities this, cap#77, cap#285;
        weka.core.Instances data, $r52, $r54;
        int fromIndex, toIndex, $i0, $i1, $i2, $i3, $i4, $i5, i#42, $i6, $i7, $i8, i#109, $i9, hasClass#127, i#129, $i10, $i11, $i12, i#168, $i13, m#178, $i14, n#185, $i15, n#198, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26;
        boolean testClass, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, missing#166, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, result#299;
        java.util.Iterator iter;
        weka.core.Instance inst, $r16, $r19;
        weka.core.MultiInstanceCapabilitiesHandler handler;
        java.util.HashSet $r0, $r1;
        weka.core.Capabilities$Capability $r2, $r7, $r10, $r11, $r14, $r15, $r29, $r41;
        java.io.PrintStream $r3;
        java.lang.String $r4, $r6, $r9, $r13, $r18, $r27, $r28, $r31, $r39, $r40, $r43, $r47;
        weka.core.WekaException $r5, $r12, $r17, $r20, $r32, $r42, $r46;
        weka.core.Attribute att#48, att#97, $r44, $r45, $r50, $r51, $r53;
        weka.core.UnassignedClassException $r8;
        java.lang.StringBuilder $r21, $r22, $r23, $r24, $r25, $r26, $r33, $r34, $r35, $r36, $r37, $r38;
        weka.core.NoSupportForMissingValuesException $r30;
        weka.core.CapabilitiesHandler $r48, $r49;
        java.lang.Exception $r55;

        this := @this: weka.core.Capabilities;

        data := @parameter0: weka.core.Instances;

        fromIndex := @parameter1: int;

        toIndex := @parameter2: int;

        $z0 = virtualinvoke this.<weka.core.Capabilities: boolean doNotCheckCapabilities()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label01;

        return 1;

     label01:
        $z1 = this.<weka.core.Capabilities: boolean m_InstancesTest>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label02;

        return 1;

     label02:
        $r0 = this.<weka.core.Capabilities: java.util.HashSet m_Capabilities>;

        $i0 = virtualinvoke $r0.<java.util.HashSet: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 == 0 goto label03;

        $r1 = this.<weka.core.Capabilities: java.util.HashSet m_Capabilities>;

        $i1 = virtualinvoke $r1.<java.util.HashSet: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 != 1 goto label04;

        $r2 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability NO_CLASS>;

        $z2 = virtualinvoke this.<weka.core.Capabilities: boolean handles(weka.core.Capabilities$Capability)>($r2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label04;

     label03:
        $r3 = <java.lang.System: java.io.PrintStream err>;

        $r4 = virtualinvoke this.<weka.core.Capabilities: java.lang.String createMessage(java.lang.String)>("No capabilities set!");

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r4);

     label04:
        $i2 = toIndex - fromIndex;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 >= 0 goto label05;

        $r5 = new weka.core.WekaException;

        $r6 = virtualinvoke this.<weka.core.Capabilities: java.lang.String createMessage(java.lang.String)>("No attributes!");

        specialinvoke $r5.<weka.core.WekaException: void <init>(java.lang.String)>($r6);

        this.<weka.core.Capabilities: java.lang.Exception m_FailReason> = $r5;

        return 0;

     label05:
        $i3 = virtualinvoke data.<weka.core.Instances: int classIndex()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 <= -1 goto label06;

        $i4 = virtualinvoke data.<weka.core.Instances: int classIndex()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(fromIndex);

        if $i4 < fromIndex goto label06;

        $i5 = virtualinvoke data.<weka.core.Instances: int classIndex()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(toIndex);

        if $i5 > toIndex goto label06;

        $z3 = 1;

        goto label07;

     label06:
        $z3 = 0;

     label07:
        testClass = $z3;

        i#42 = fromIndex;

     label08:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#42);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(toIndex);

        if i#42 > toIndex goto label11;

        att#48 = virtualinvoke data.<weka.core.Instances: weka.core.Attribute attribute(int)>(i#42);

        $i6 = virtualinvoke data.<weka.core.Instances: int classIndex()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#42);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if i#42 != $i6 goto label09;

        goto label10;

     label09:
        $z4 = virtualinvoke this.<weka.core.Capabilities: boolean test(weka.core.Attribute)>(att#48);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label10;

        return 0;

     label10:
        i#42 = i#42 + 1;

        goto label08;

     label11:
        $r7 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability NO_CLASS>;

        $z5 = virtualinvoke this.<weka.core.Capabilities: boolean handles(weka.core.Capabilities$Capability)>($r7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 != 0 goto label12;

        $i7 = virtualinvoke data.<weka.core.Instances: int classIndex()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if $i7 != -1 goto label12;

        $r8 = new weka.core.UnassignedClassException;

        $r9 = virtualinvoke this.<weka.core.Capabilities: java.lang.String createMessage(java.lang.String)>("Class attribute not set!");

        specialinvoke $r8.<weka.core.UnassignedClassException: void <init>(java.lang.String)>($r9);

        this.<weka.core.Capabilities: java.lang.Exception m_FailReason> = $r8;

        return 0;

     label12:
        $r10 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability NO_CLASS>;

        $z6 = virtualinvoke this.<weka.core.Capabilities: boolean handles(weka.core.Capabilities$Capability)>($r10);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label13;

        $i8 = virtualinvoke data.<weka.core.Instances: int classIndex()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if $i8 <= -1 goto label13;

        cap#77 = virtualinvoke this.<weka.core.Capabilities: weka.core.Capabilities getClassCapabilities()>();

        $r11 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability NO_CLASS>;

        virtualinvoke cap#77.<weka.core.Capabilities: void disable(weka.core.Capabilities$Capability)>($r11);

        iter = virtualinvoke cap#77.<weka.core.Capabilities: java.util.Iterator capabilities()>();

        $z7 = interfaceinvoke iter.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 != 0 goto label13;

        $r12 = new weka.core.WekaException;

        $r13 = virtualinvoke this.<weka.core.Capabilities: java.lang.String createMessage(java.lang.String)>("Cannot handle any class attribute!");

        specialinvoke $r12.<weka.core.WekaException: void <init>(java.lang.String)>($r13);

        this.<weka.core.Capabilities: java.lang.Exception m_FailReason> = $r12;

        return 0;

     label13:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(testClass);

        if testClass == 0 goto label21;

        $r14 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability NO_CLASS>;

        $z8 = virtualinvoke this.<weka.core.Capabilities: boolean handles(weka.core.Capabilities$Capability)>($r14);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 != 0 goto label21;

        att#97 = virtualinvoke data.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z9 = virtualinvoke this.<weka.core.Capabilities: boolean test(weka.core.Attribute,boolean)>(att#97, 1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 != 0 goto label14;

        return 0;

     label14:
        $z10 = this.<weka.core.Capabilities: boolean m_MissingClassValuesTest>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z10);

        if $z10 == 0 goto label21;

        $r15 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability MISSING_CLASS_VALUES>;

        $z11 = virtualinvoke this.<weka.core.Capabilities: boolean handles(weka.core.Capabilities$Capability)>($r15);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z11);

        if $z11 != 0 goto label17;

        i#109 = 0;

     label15:
        $i9 = virtualinvoke data.<weka.core.Instances: int numInstances()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#109);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        if i#109 >= $i9 goto label21;

        $r16 = virtualinvoke data.<weka.core.Instances: weka.core.Instance instance(int)>(i#109);

        $z12 = interfaceinvoke $r16.<weka.core.Instance: boolean classIsMissing()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z12);

        if $z12 == 0 goto label16;

        $r17 = new weka.core.WekaException;

        $r18 = virtualinvoke this.<weka.core.Capabilities: java.lang.String createMessage(java.lang.String)>("Cannot handle missing class values!");

        specialinvoke $r17.<weka.core.WekaException: void <init>(java.lang.String)>($r18);

        this.<weka.core.Capabilities: java.lang.Exception m_FailReason> = $r17;

        return 0;

     label16:
        i#109 = i#109 + 1;

        goto label15;

     label17:
        $z13 = this.<weka.core.Capabilities: boolean m_MinimumNumberInstancesTest>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z13);

        if $z13 == 0 goto label21;

        hasClass#127 = 0;

        i#129 = 0;

     label18:
        $i10 = virtualinvoke data.<weka.core.Instances: int numInstances()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#129);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i10);

        if i#129 >= $i10 goto label20;

        $r19 = virtualinvoke data.<weka.core.Instances: weka.core.Instance instance(int)>(i#129);

        $z14 = interfaceinvoke $r19.<weka.core.Instance: boolean classIsMissing()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z14);

        if $z14 != 0 goto label19;

        hasClass#127 = hasClass#127 + 1;

     label19:
        i#129 = i#129 + 1;

        goto label18;

     label20:
        $i11 = virtualinvoke this.<weka.core.Capabilities: int getMinimumNumberInstances()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(hasClass#127);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i11);

        if hasClass#127 >= $i11 goto label21;

        $r20 = new weka.core.WekaException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not enough training instances with class labels (required: ");

        $i12 = virtualinvoke this.<weka.core.Capabilities: int getMinimumNumberInstances()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", provided: ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(hasClass#127);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")!");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        $r28 = virtualinvoke this.<weka.core.Capabilities: java.lang.String createMessage(java.lang.String)>($r27);

        specialinvoke $r20.<weka.core.WekaException: void <init>(java.lang.String)>($r28);

        this.<weka.core.Capabilities: java.lang.Exception m_FailReason> = $r20;

        return 0;

     label21:
        $z15 = this.<weka.core.Capabilities: boolean m_MissingValuesTest>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z15);

        if $z15 == 0 goto label34;

        $r29 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability MISSING_VALUES>;

        $z16 = virtualinvoke this.<weka.core.Capabilities: boolean handles(weka.core.Capabilities$Capability)>($r29);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z16);

        if $z16 != 0 goto label34;

        missing#166 = 0;

        i#168 = 0;

     label22:
        $i13 = virtualinvoke data.<weka.core.Instances: int numInstances()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#168);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i13);

        if i#168 >= $i13 goto label34;

        inst = virtualinvoke data.<weka.core.Instances: weka.core.Instance instance(int)>(i#168);

        $z17 = inst instanceof weka.core.SparseInstance;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z17);

        if $z17 == 0 goto label28;

        m#178 = 0;

     label23:
        $i14 = interfaceinvoke inst.<weka.core.Instance: int numValues()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(m#178);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i14);

        if m#178 >= $i14 goto label32;

        n#185 = interfaceinvoke inst.<weka.core.Instance: int index(int)>(m#178);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n#185);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(fromIndex);

        if n#185 >= fromIndex goto label24;

        goto label27;

     label24:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n#185);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(toIndex);

        if n#185 <= toIndex goto label25;

        goto label32;

     label25:
        $i15 = interfaceinvoke inst.<weka.core.Instance: int classIndex()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n#185);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i15);

        if n#185 != $i15 goto label26;

        goto label27;

     label26:
        $z18 = interfaceinvoke inst.<weka.core.Instance: boolean isMissing(int)>(n#185);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z18);

        if $z18 == 0 goto label27;

        missing#166 = 1;

        goto label32;

     label27:
        m#178 = m#178 + 1;

        goto label23;

     label28:
        n#198 = fromIndex;

     label29:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n#198);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(toIndex);

        if n#198 > toIndex goto label32;

        $i16 = interfaceinvoke inst.<weka.core.Instance: int classIndex()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n#198);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i16);

        if n#198 != $i16 goto label30;

        goto label31;

     label30:
        $z19 = interfaceinvoke inst.<weka.core.Instance: boolean isMissing(int)>(n#198);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z19);

        if $z19 == 0 goto label31;

        missing#166 = 1;

        goto label32;

     label31:
        n#198 = n#198 + 1;

        goto label29;

     label32:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(missing#166);

        if missing#166 == 0 goto label33;

        $r30 = new weka.core.NoSupportForMissingValuesException;

        $r31 = virtualinvoke this.<weka.core.Capabilities: java.lang.String createMessage(java.lang.String)>("Cannot handle missing values!");

        specialinvoke $r30.<weka.core.NoSupportForMissingValuesException: void <init>(java.lang.String)>($r31);

        this.<weka.core.Capabilities: java.lang.Exception m_FailReason> = $r30;

        return 0;

     label33:
        i#168 = i#168 + 1;

        goto label22;

     label34:
        $z20 = this.<weka.core.Capabilities: boolean m_MinimumNumberInstancesTest>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z20);

        if $z20 == 0 goto label35;

        $i17 = virtualinvoke data.<weka.core.Instances: int numInstances()>();

        $i18 = virtualinvoke this.<weka.core.Capabilities: int getMinimumNumberInstances()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i17);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i18);

        if $i17 >= $i18 goto label35;

        $r32 = new weka.core.WekaException;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not enough training instances (required: ");

        $i19 = virtualinvoke this.<weka.core.Capabilities: int getMinimumNumberInstances()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i19);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", provided: ");

        $i20 = virtualinvoke data.<weka.core.Instances: int numInstances()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i20);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")!");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        $r40 = virtualinvoke this.<weka.core.Capabilities: java.lang.String createMessage(java.lang.String)>($r39);

        specialinvoke $r32.<weka.core.WekaException: void <init>(java.lang.String)>($r40);

        this.<weka.core.Capabilities: java.lang.Exception m_FailReason> = $r32;

        return 0;

     label35:
        $r41 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability ONLY_MULTIINSTANCE>;

        $z21 = virtualinvoke this.<weka.core.Capabilities: boolean handles(weka.core.Capabilities$Capability)>($r41);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z21);

        if $z21 == 0 goto label41;

        $i21 = virtualinvoke data.<weka.core.Instances: int numAttributes()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i21);

        if $i21 == 3 goto label36;

        $r42 = new weka.core.WekaException;

        $r43 = virtualinvoke this.<weka.core.Capabilities: java.lang.String createMessage(java.lang.String)>("Incorrect Multi-Instance format, must be \'bag-id, bag, class\'!");

        specialinvoke $r42.<weka.core.WekaException: void <init>(java.lang.String)>($r43);

        this.<weka.core.Capabilities: java.lang.Exception m_FailReason> = $r42;

        return 0;

     label36:
        $r44 = virtualinvoke data.<weka.core.Instances: weka.core.Attribute attribute(int)>(0);

        $z22 = virtualinvoke $r44.<weka.core.Attribute: boolean isNominal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z22);

        if $z22 == 0 goto label37;

        $r45 = virtualinvoke data.<weka.core.Instances: weka.core.Attribute attribute(int)>(1);

        $z23 = virtualinvoke $r45.<weka.core.Attribute: boolean isRelationValued()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z23);

        if $z23 == 0 goto label37;

        $i22 = virtualinvoke data.<weka.core.Instances: int classIndex()>();

        $i23 = virtualinvoke data.<weka.core.Instances: int numAttributes()>();

        $i24 = $i23 - 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i22);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i24);

        if $i22 == $i24 goto label38;

     label37:
        $r46 = new weka.core.WekaException;

        $r47 = virtualinvoke this.<weka.core.Capabilities: java.lang.String createMessage(java.lang.String)>("Incorrect Multi-Instance format, must be \'NOMINAL att, RELATIONAL att, CLASS att\'!");

        specialinvoke $r46.<weka.core.WekaException: void <init>(java.lang.String)>($r47);

        this.<weka.core.Capabilities: java.lang.Exception m_FailReason> = $r46;

        return 0;

     label38:
        $r48 = virtualinvoke this.<weka.core.Capabilities: weka.core.CapabilitiesHandler getOwner()>();

        $z24 = $r48 instanceof weka.core.MultiInstanceCapabilitiesHandler;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z24);

        if $z24 == 0 goto label41;

        $r49 = virtualinvoke this.<weka.core.Capabilities: weka.core.CapabilitiesHandler getOwner()>();

        handler = (weka.core.MultiInstanceCapabilitiesHandler) $r49;

        cap#285 = interfaceinvoke handler.<weka.core.MultiInstanceCapabilitiesHandler: weka.core.Capabilities getMultiInstanceCapabilities()>();

        $i25 = virtualinvoke data.<weka.core.Instances: int numInstances()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i25);

        if $i25 <= 0 goto label39;

        $r50 = virtualinvoke data.<weka.core.Instances: weka.core.Attribute attribute(int)>(1);

        $i26 = virtualinvoke $r50.<weka.core.Attribute: int numValues()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i26);

        if $i26 <= 0 goto label39;

        $r51 = virtualinvoke data.<weka.core.Instances: weka.core.Attribute attribute(int)>(1);

        $r52 = virtualinvoke $r51.<weka.core.Attribute: weka.core.Instances relation(int)>(0);

        result#299 = virtualinvoke cap#285.<weka.core.Capabilities: boolean test(weka.core.Instances)>($r52);

        goto label40;

     label39:
        $r53 = virtualinvoke data.<weka.core.Instances: weka.core.Attribute attribute(int)>(1);

        $r54 = virtualinvoke $r53.<weka.core.Attribute: weka.core.Instances relation()>();

        result#299 = virtualinvoke cap#285.<weka.core.Capabilities: boolean test(weka.core.Instances)>($r54);

     label40:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(result#299);

        if result#299 != 0 goto label41;

        $r55 = cap#285.<weka.core.Capabilities: java.lang.Exception m_FailReason>;

        this.<weka.core.Capabilities: java.lang.Exception m_FailReason> = $r55;

        return 0;

     label41:
        return 1;
    }

    public boolean handles(weka.core.Capabilities$Capability)
    {
        weka.core.Capabilities this;
        weka.core.Capabilities$Capability c;
        boolean $z0, $z1;
        java.util.HashSet $r0;

        this := @this: weka.core.Capabilities;

        c := @parameter0: weka.core.Capabilities$Capability;

        $z0 = virtualinvoke this.<weka.core.Capabilities: boolean doNotCheckCapabilities()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r0 = this.<weka.core.Capabilities: java.util.HashSet m_Capabilities>;

        $z1 = virtualinvoke $r0.<java.util.HashSet: boolean contains(java.lang.Object)>(c);

        return $z1;
    }

    protected java.lang.String createMessage(java.lang.String)
    {
        weka.core.Capabilities this;
        java.lang.String msg, result#2, result#9, result#20;
        weka.core.CapabilitiesHandler $r0, $r1;
        java.lang.Class $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;

        this := @this: weka.core.Capabilities;

        msg := @parameter0: java.lang.String;

        result#2 = "";

        $r0 = virtualinvoke this.<weka.core.Capabilities: weka.core.CapabilitiesHandler getOwner()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label1;

        $r1 = virtualinvoke this.<weka.core.Capabilities: weka.core.CapabilitiesHandler getOwner()>();

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        result#9 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        goto label2;

     label1:
        result#9 = "<anonymous>";

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(result#9);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(msg);

        result#20 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return result#20;
    }

    public boolean test(weka.core.Attribute)
    {
        weka.core.Capabilities this;
        weka.core.Attribute att;
        boolean $z0;

        this := @this: weka.core.Capabilities;

        att := @parameter0: weka.core.Attribute;

        $z0 = virtualinvoke this.<weka.core.Capabilities: boolean test(weka.core.Attribute,boolean)>(att, 0);

        return $z0;
    }

    public weka.core.Capabilities getClassCapabilities()
    {
        weka.core.Capabilities this, result, $r0;
        weka.core.Capabilities$Capability[] l2;
        int l3, l4#9;
        weka.core.Capabilities$Capability cap;
        weka.core.CapabilitiesHandler $r1;
        boolean $z0, $z1;
        java.util.HashSet $r2;

        this := @this: weka.core.Capabilities;

        $r0 = new weka.core.Capabilities;

        $r1 = virtualinvoke this.<weka.core.Capabilities: weka.core.CapabilitiesHandler getOwner()>();

        specialinvoke $r0.<weka.core.Capabilities: void <init>(weka.core.CapabilitiesHandler)>($r1);

        result = $r0;

        l2 = staticinvoke <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability[] values()>();

        l3 = lengthof l2;

        l4#9 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l4#9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3);

        if l4#9 >= l3 goto label3;

        cap = l2[l4#9];

        $z0 = virtualinvoke cap.<weka.core.Capabilities$Capability: boolean isClassCapability()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke this.<weka.core.Capabilities: boolean handles(weka.core.Capabilities$Capability)>(cap);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        $r2 = result.<weka.core.Capabilities: java.util.HashSet m_Capabilities>;

        virtualinvoke $r2.<java.util.HashSet: boolean add(java.lang.Object)>(cap);

     label2:
        l4#9 = l4#9 + 1;

        goto label1;

     label3:
        return result;
    }

    public boolean test(weka.core.Attribute, boolean)
    {
        weka.core.Capabilities this;
        weka.core.Attribute att;
        boolean isClass, $z0, result#5, $z1, $z2, $z3, $z4, $z5, result#68, $z6, $z7, $z8, $z9;
        java.lang.String errorStr#11, $r5, $r6, $r12, $r13, $r19, $r20, $r26, $r27, $r33, $r34, $r40, $r41, $r47, $r48, $r54, $r55, $r61, $r62;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        weka.core.Capabilities$Capability cap#17, capBinary#19, capUnary#21, capEmpty#23, cap#122, cap#144, cap#166, cap#188;
        weka.core.UnsupportedAttributeTypeException $r0, $r7, $r14, $r21, $r28, $r35, $r42, $r49, $r56;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r8, $r9, $r10, $r11, $r15, $r16, $r17, $r18, $r22, $r23, $r24, $r25, $r29, $r30, $r31, $r32, $r36, $r37, $r38, $r39, $r43, $r44, $r45, $r46, $r50, $r51, $r52, $r53, $r57, $r58, $r59, $r60;

        this := @this: weka.core.Capabilities;

        att := @parameter0: weka.core.Attribute;

        isClass := @parameter1: boolean;

        $z0 = virtualinvoke this.<weka.core.Capabilities: boolean doNotCheckCapabilities()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label01;

        return 1;

     label01:
        result#5 = 1;

        $z1 = this.<weka.core.Capabilities: boolean m_AttributeTest>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label02;

        return result#5;

     label02:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isClass);

        if isClass == 0 goto label03;

        errorStr#11 = "class";

        goto label04;

     label03:
        errorStr#11 = "attributes";

     label04:
        $i0 = virtualinvoke att.<weka.core.Attribute: int type()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        tableswitch($i0)
        {
            case 0: goto label15;
            case 1: goto label05;
            case 2: goto label21;
            case 3: goto label18;
            case 4: goto label24;
            default: goto label27;
        };

     label05:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isClass);

        if isClass == 0 goto label06;

        cap#17 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability NOMINAL_CLASS>;

        capBinary#19 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability BINARY_CLASS>;

        capUnary#21 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability UNARY_CLASS>;

        capEmpty#23 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability EMPTY_NOMINAL_CLASS>;

        goto label07;

     label06:
        cap#17 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability NOMINAL_ATTRIBUTES>;

        capBinary#19 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability BINARY_ATTRIBUTES>;

        capUnary#21 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability UNARY_ATTRIBUTES>;

        capEmpty#23 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability EMPTY_NOMINAL_ATTRIBUTES>;

     label07:
        $z2 = virtualinvoke this.<weka.core.Capabilities: boolean handles(weka.core.Capabilities$Capability)>(cap#17);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label08;

        $i1 = virtualinvoke att.<weka.core.Attribute: int numValues()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 2 goto label08;

        goto label28;

     label08:
        $z3 = virtualinvoke this.<weka.core.Capabilities: boolean handles(weka.core.Capabilities$Capability)>(capBinary#19);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label09;

        $i2 = virtualinvoke att.<weka.core.Attribute: int numValues()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 != 2 goto label09;

        goto label28;

     label09:
        $z4 = virtualinvoke this.<weka.core.Capabilities: boolean handles(weka.core.Capabilities$Capability)>(capUnary#21);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label10;

        $i3 = virtualinvoke att.<weka.core.Attribute: int numValues()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 != 1 goto label10;

        goto label28;

     label10:
        $z5 = virtualinvoke this.<weka.core.Capabilities: boolean handles(weka.core.Capabilities$Capability)>(capEmpty#23);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label11;

        $i4 = virtualinvoke att.<weka.core.Attribute: int numValues()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 != 0 goto label11;

        goto label28;

     label11:
        $i5 = virtualinvoke att.<weka.core.Attribute: int numValues()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i5 != 0 goto label12;

        $r0 = new weka.core.UnsupportedAttributeTypeException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot handle empty nominal ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(errorStr#11);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke this.<weka.core.Capabilities: java.lang.String createMessage(java.lang.String)>($r5);

        specialinvoke $r0.<weka.core.UnsupportedAttributeTypeException: void <init>(java.lang.String)>($r6);

        this.<weka.core.Capabilities: java.lang.Exception m_FailReason> = $r0;

        result#68 = 0;

     label12:
        $i6 = virtualinvoke att.<weka.core.Attribute: int numValues()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if $i6 != 1 goto label13;

        $r7 = new weka.core.UnsupportedAttributeTypeException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot handle unary ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(errorStr#11);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = virtualinvoke this.<weka.core.Capabilities: java.lang.String createMessage(java.lang.String)>($r12);

        specialinvoke $r7.<weka.core.UnsupportedAttributeTypeException: void <init>(java.lang.String)>($r13);

        this.<weka.core.Capabilities: java.lang.Exception m_FailReason> = $r7;

        result#5 = 0;

        goto label28;

     label13:
        $i7 = virtualinvoke att.<weka.core.Attribute: int numValues()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if $i7 != 2 goto label14;

        $r14 = new weka.core.UnsupportedAttributeTypeException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot handle binary ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(errorStr#11);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = virtualinvoke this.<weka.core.Capabilities: java.lang.String createMessage(java.lang.String)>($r19);

        specialinvoke $r14.<weka.core.UnsupportedAttributeTypeException: void <init>(java.lang.String)>($r20);

        this.<weka.core.Capabilities: java.lang.Exception m_FailReason> = $r14;

        result#5 = 0;

        goto label28;

     label14:
        $r21 = new weka.core.UnsupportedAttributeTypeException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot handle multi-valued nominal ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(errorStr#11);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        $r27 = virtualinvoke this.<weka.core.Capabilities: java.lang.String createMessage(java.lang.String)>($r26);

        specialinvoke $r21.<weka.core.UnsupportedAttributeTypeException: void <init>(java.lang.String)>($r27);

        this.<weka.core.Capabilities: java.lang.Exception m_FailReason> = $r21;

        result#5 = 0;

        goto label28;

     label15:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isClass);

        if isClass == 0 goto label16;

        cap#122 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability NUMERIC_CLASS>;

        goto label17;

     label16:
        cap#122 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability NUMERIC_ATTRIBUTES>;

     label17:
        $z6 = virtualinvoke this.<weka.core.Capabilities: boolean handles(weka.core.Capabilities$Capability)>(cap#122);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 != 0 goto label28;

        $r28 = new weka.core.UnsupportedAttributeTypeException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot handle numeric ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(errorStr#11);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        $r34 = virtualinvoke this.<weka.core.Capabilities: java.lang.String createMessage(java.lang.String)>($r33);

        specialinvoke $r28.<weka.core.UnsupportedAttributeTypeException: void <init>(java.lang.String)>($r34);

        this.<weka.core.Capabilities: java.lang.Exception m_FailReason> = $r28;

        result#5 = 0;

        goto label28;

     label18:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isClass);

        if isClass == 0 goto label19;

        cap#144 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability DATE_CLASS>;

        goto label20;

     label19:
        cap#144 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability DATE_ATTRIBUTES>;

     label20:
        $z7 = virtualinvoke this.<weka.core.Capabilities: boolean handles(weka.core.Capabilities$Capability)>(cap#144);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 != 0 goto label28;

        $r35 = new weka.core.UnsupportedAttributeTypeException;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot handle date ");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(errorStr#11);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        $r41 = virtualinvoke this.<weka.core.Capabilities: java.lang.String createMessage(java.lang.String)>($r40);

        specialinvoke $r35.<weka.core.UnsupportedAttributeTypeException: void <init>(java.lang.String)>($r41);

        this.<weka.core.Capabilities: java.lang.Exception m_FailReason> = $r35;

        result#5 = 0;

        goto label28;

     label21:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isClass);

        if isClass == 0 goto label22;

        cap#166 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability STRING_CLASS>;

        goto label23;

     label22:
        cap#166 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability STRING_ATTRIBUTES>;

     label23:
        $z8 = virtualinvoke this.<weka.core.Capabilities: boolean handles(weka.core.Capabilities$Capability)>(cap#166);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 != 0 goto label28;

        $r42 = new weka.core.UnsupportedAttributeTypeException;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot handle string ");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(errorStr#11);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        $r48 = virtualinvoke this.<weka.core.Capabilities: java.lang.String createMessage(java.lang.String)>($r47);

        specialinvoke $r42.<weka.core.UnsupportedAttributeTypeException: void <init>(java.lang.String)>($r48);

        this.<weka.core.Capabilities: java.lang.Exception m_FailReason> = $r42;

        result#5 = 0;

        goto label28;

     label24:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isClass);

        if isClass == 0 goto label25;

        cap#188 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability RELATIONAL_CLASS>;

        goto label26;

     label25:
        cap#188 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability RELATIONAL_ATTRIBUTES>;

     label26:
        $z9 = virtualinvoke this.<weka.core.Capabilities: boolean handles(weka.core.Capabilities$Capability)>(cap#188);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 != 0 goto label28;

        $r49 = new weka.core.UnsupportedAttributeTypeException;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot handle relational ");

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(errorStr#11);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        $r55 = virtualinvoke this.<weka.core.Capabilities: java.lang.String createMessage(java.lang.String)>($r54);

        specialinvoke $r49.<weka.core.UnsupportedAttributeTypeException: void <init>(java.lang.String)>($r55);

        this.<weka.core.Capabilities: java.lang.Exception m_FailReason> = $r49;

        result#5 = 0;

        goto label28;

     label27:
        $r56 = new weka.core.UnsupportedAttributeTypeException;

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot handle unknown attribute type \'");

        $i8 = virtualinvoke att.<weka.core.Attribute: int type()>();

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'!");

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        $r62 = virtualinvoke this.<weka.core.Capabilities: java.lang.String createMessage(java.lang.String)>($r61);

        specialinvoke $r56.<weka.core.UnsupportedAttributeTypeException: void <init>(java.lang.String)>($r62);

        this.<weka.core.Capabilities: java.lang.Exception m_FailReason> = $r56;

        result#5 = 0;

     label28:
        return result#5;
    }

    public int getMinimumNumberInstances()
    {
        weka.core.Capabilities this;
        int $i0;

        this := @this: weka.core.Capabilities;

        $i0 = this.<weka.core.Capabilities: int m_MinimumNumberInstances>;

        return $i0;
    }

    public void disable(weka.core.Capabilities$Capability)
    {
        weka.core.Capabilities this;
        weka.core.Capabilities$Capability c, $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        boolean $z0;
        java.util.HashSet $r12;

        this := @this: weka.core.Capabilities;

        c := @parameter0: weka.core.Capabilities$Capability;

        $z0 = virtualinvoke this.<weka.core.Capabilities: boolean doNotCheckCapabilities()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r0 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability NOMINAL_ATTRIBUTES>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if c != $r0 goto label2;

        $r1 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability BINARY_ATTRIBUTES>;

        virtualinvoke this.<weka.core.Capabilities: void disable(weka.core.Capabilities$Capability)>($r1);

        goto label7;

     label2:
        $r2 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability BINARY_ATTRIBUTES>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        if c != $r2 goto label3;

        $r3 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability UNARY_ATTRIBUTES>;

        virtualinvoke this.<weka.core.Capabilities: void disable(weka.core.Capabilities$Capability)>($r3);

        goto label7;

     label3:
        $r4 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability UNARY_ATTRIBUTES>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        if c != $r4 goto label4;

        $r5 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability EMPTY_NOMINAL_ATTRIBUTES>;

        virtualinvoke this.<weka.core.Capabilities: void disable(weka.core.Capabilities$Capability)>($r5);

        goto label7;

     label4:
        $r6 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability NOMINAL_CLASS>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r6);

        if c != $r6 goto label5;

        $r7 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability BINARY_CLASS>;

        virtualinvoke this.<weka.core.Capabilities: void disable(weka.core.Capabilities$Capability)>($r7);

        goto label7;

     label5:
        $r8 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability BINARY_CLASS>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r8);

        if c != $r8 goto label6;

        $r9 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability UNARY_CLASS>;

        virtualinvoke this.<weka.core.Capabilities: void disable(weka.core.Capabilities$Capability)>($r9);

        goto label7;

     label6:
        $r10 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability UNARY_CLASS>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r10);

        if c != $r10 goto label7;

        $r11 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability EMPTY_NOMINAL_CLASS>;

        virtualinvoke this.<weka.core.Capabilities: void disable(weka.core.Capabilities$Capability)>($r11);

     label7:
        $r12 = this.<weka.core.Capabilities: java.util.HashSet m_Capabilities>;

        virtualinvoke $r12.<java.util.HashSet: boolean remove(java.lang.Object)>(c);

        return;
    }

    public java.util.Iterator capabilities()
    {
        weka.core.Capabilities this;
        java.util.HashSet $r0;
        java.util.Iterator $r1;

        this := @this: weka.core.Capabilities;

        $r0 = this.<weka.core.Capabilities: java.util.HashSet m_Capabilities>;

        $r1 = virtualinvoke $r0.<java.util.HashSet: java.util.Iterator iterator()>();

        return $r1;
    }

    public void enableAll()
    {
        weka.core.Capabilities this;
        boolean $z0;
        weka.core.Capabilities$Capability $r0, $r1;

        this := @this: weka.core.Capabilities;

        $z0 = virtualinvoke this.<weka.core.Capabilities: boolean doNotCheckCapabilities()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        return;

     label1:
        virtualinvoke this.<weka.core.Capabilities: void enableAllAttributes()>();

        virtualinvoke this.<weka.core.Capabilities: void enableAllAttributeDependencies()>();

        virtualinvoke this.<weka.core.Capabilities: void enableAllClasses()>();

        virtualinvoke this.<weka.core.Capabilities: void enableAllClassDependencies()>();

        $r0 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability MISSING_VALUES>;

        virtualinvoke this.<weka.core.Capabilities: void enable(weka.core.Capabilities$Capability)>($r0);

        $r1 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability MISSING_CLASS_VALUES>;

        virtualinvoke this.<weka.core.Capabilities: void enable(weka.core.Capabilities$Capability)>($r1);

        return;
    }

    public void enableAllAttributeDependencies()
    {
        weka.core.Capabilities this;
        weka.core.Capabilities$Capability[] l1;
        int l2, l3#7;
        weka.core.Capabilities$Capability cap;
        boolean $z0, $z1;

        this := @this: weka.core.Capabilities;

        $z0 = virtualinvoke this.<weka.core.Capabilities: boolean doNotCheckCapabilities()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        return;

     label1:
        l1 = staticinvoke <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability[] values()>();

        l2 = lengthof l1;

        l3#7 = 0;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3#7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l2);

        if l3#7 >= l2 goto label4;

        cap = l1[l3#7];

        $z1 = virtualinvoke cap.<weka.core.Capabilities$Capability: boolean isAttribute()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label3;

        virtualinvoke this.<weka.core.Capabilities: void enableDependency(weka.core.Capabilities$Capability)>(cap);

     label3:
        l3#7 = l3#7 + 1;

        goto label2;

     label4:
        return;
    }

    public void enableAllClassDependencies()
    {
        weka.core.Capabilities this;
        weka.core.Capabilities$Capability[] l1;
        int l2, l3#7;
        weka.core.Capabilities$Capability cap;
        boolean $z0, $z1;

        this := @this: weka.core.Capabilities;

        $z0 = virtualinvoke this.<weka.core.Capabilities: boolean doNotCheckCapabilities()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        return;

     label1:
        l1 = staticinvoke <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability[] values()>();

        l2 = lengthof l1;

        l3#7 = 0;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3#7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l2);

        if l3#7 >= l2 goto label4;

        cap = l1[l3#7];

        $z1 = virtualinvoke cap.<weka.core.Capabilities$Capability: boolean isClass()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label3;

        virtualinvoke this.<weka.core.Capabilities: void enableDependency(weka.core.Capabilities$Capability)>(cap);

     label3:
        l3#7 = l3#7 + 1;

        goto label2;

     label4:
        return;
    }

    public void enableDependency(weka.core.Capabilities$Capability)
    {
        weka.core.Capabilities this;
        weka.core.Capabilities$Capability c, $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        boolean $z0;
        java.util.HashSet $r8;

        this := @this: weka.core.Capabilities;

        c := @parameter0: weka.core.Capabilities$Capability;

        $z0 = virtualinvoke this.<weka.core.Capabilities: boolean doNotCheckCapabilities()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r0 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability NOMINAL_ATTRIBUTES>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if c != $r0 goto label2;

        $r1 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability BINARY_ATTRIBUTES>;

        virtualinvoke this.<weka.core.Capabilities: void enableDependency(weka.core.Capabilities$Capability)>($r1);

        goto label5;

     label2:
        $r2 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability BINARY_ATTRIBUTES>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        if c != $r2 goto label3;

        $r3 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability UNARY_ATTRIBUTES>;

        virtualinvoke this.<weka.core.Capabilities: void enableDependency(weka.core.Capabilities$Capability)>($r3);

        goto label5;

     label3:
        $r4 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability UNARY_ATTRIBUTES>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        if c != $r4 goto label4;

        $r5 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability EMPTY_NOMINAL_ATTRIBUTES>;

        virtualinvoke this.<weka.core.Capabilities: void enableDependency(weka.core.Capabilities$Capability)>($r5);

        goto label5;

     label4:
        $r6 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability NOMINAL_CLASS>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r6);

        if c != $r6 goto label5;

        $r7 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability BINARY_CLASS>;

        virtualinvoke this.<weka.core.Capabilities: void enableDependency(weka.core.Capabilities$Capability)>($r7);

     label5:
        $r8 = this.<weka.core.Capabilities: java.util.HashSet m_Dependencies>;

        virtualinvoke $r8.<java.util.HashSet: boolean add(java.lang.Object)>(c);

        return;
    }

    public void disableAll()
    {
        weka.core.Capabilities this;
        boolean $z0;
        weka.core.Capabilities$Capability $r0, $r1, $r2;

        this := @this: weka.core.Capabilities;

        $z0 = virtualinvoke this.<weka.core.Capabilities: boolean doNotCheckCapabilities()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        return;

     label1:
        virtualinvoke this.<weka.core.Capabilities: void disableAllAttributes()>();

        virtualinvoke this.<weka.core.Capabilities: void disableAllAttributeDependencies()>();

        virtualinvoke this.<weka.core.Capabilities: void disableAllClasses()>();

        virtualinvoke this.<weka.core.Capabilities: void disableAllClassDependencies()>();

        $r0 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability MISSING_VALUES>;

        virtualinvoke this.<weka.core.Capabilities: void disable(weka.core.Capabilities$Capability)>($r0);

        $r1 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability MISSING_CLASS_VALUES>;

        virtualinvoke this.<weka.core.Capabilities: void disable(weka.core.Capabilities$Capability)>($r1);

        $r2 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability NO_CLASS>;

        virtualinvoke this.<weka.core.Capabilities: void disable(weka.core.Capabilities$Capability)>($r2);

        return;
    }

    public void disableAllAttributes()
    {
        weka.core.Capabilities this;
        weka.core.Capabilities$Capability[] l1;
        int l2, l3#7;
        weka.core.Capabilities$Capability cap;
        boolean $z0, $z1;

        this := @this: weka.core.Capabilities;

        $z0 = virtualinvoke this.<weka.core.Capabilities: boolean doNotCheckCapabilities()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        return;

     label1:
        l1 = staticinvoke <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability[] values()>();

        l2 = lengthof l1;

        l3#7 = 0;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3#7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l2);

        if l3#7 >= l2 goto label4;

        cap = l1[l3#7];

        $z1 = virtualinvoke cap.<weka.core.Capabilities$Capability: boolean isAttribute()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label3;

        virtualinvoke this.<weka.core.Capabilities: void disable(weka.core.Capabilities$Capability)>(cap);

     label3:
        l3#7 = l3#7 + 1;

        goto label2;

     label4:
        return;
    }

    public void disableAllAttributeDependencies()
    {
        weka.core.Capabilities this;
        weka.core.Capabilities$Capability[] l1;
        int l2, l3#7;
        weka.core.Capabilities$Capability cap;
        boolean $z0, $z1;

        this := @this: weka.core.Capabilities;

        $z0 = virtualinvoke this.<weka.core.Capabilities: boolean doNotCheckCapabilities()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        return;

     label1:
        l1 = staticinvoke <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability[] values()>();

        l2 = lengthof l1;

        l3#7 = 0;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3#7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l2);

        if l3#7 >= l2 goto label4;

        cap = l1[l3#7];

        $z1 = virtualinvoke cap.<weka.core.Capabilities$Capability: boolean isAttribute()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label3;

        virtualinvoke this.<weka.core.Capabilities: void disableDependency(weka.core.Capabilities$Capability)>(cap);

     label3:
        l3#7 = l3#7 + 1;

        goto label2;

     label4:
        return;
    }

    public void disableAllClasses()
    {
        weka.core.Capabilities this;
        weka.core.Capabilities$Capability[] l1;
        int l2, l3#7;
        weka.core.Capabilities$Capability cap;
        boolean $z0, $z1;

        this := @this: weka.core.Capabilities;

        $z0 = virtualinvoke this.<weka.core.Capabilities: boolean doNotCheckCapabilities()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        return;

     label1:
        l1 = staticinvoke <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability[] values()>();

        l2 = lengthof l1;

        l3#7 = 0;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3#7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l2);

        if l3#7 >= l2 goto label4;

        cap = l1[l3#7];

        $z1 = virtualinvoke cap.<weka.core.Capabilities$Capability: boolean isClass()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label3;

        virtualinvoke this.<weka.core.Capabilities: void disable(weka.core.Capabilities$Capability)>(cap);

     label3:
        l3#7 = l3#7 + 1;

        goto label2;

     label4:
        return;
    }

    public void disableAllClassDependencies()
    {
        weka.core.Capabilities this;
        weka.core.Capabilities$Capability[] l1;
        int l2, l3#7;
        weka.core.Capabilities$Capability cap;
        boolean $z0, $z1;

        this := @this: weka.core.Capabilities;

        $z0 = virtualinvoke this.<weka.core.Capabilities: boolean doNotCheckCapabilities()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        return;

     label1:
        l1 = staticinvoke <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability[] values()>();

        l2 = lengthof l1;

        l3#7 = 0;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3#7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l2);

        if l3#7 >= l2 goto label4;

        cap = l1[l3#7];

        $z1 = virtualinvoke cap.<weka.core.Capabilities$Capability: boolean isClass()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label3;

        virtualinvoke this.<weka.core.Capabilities: void disableDependency(weka.core.Capabilities$Capability)>(cap);

     label3:
        l3#7 = l3#7 + 1;

        goto label2;

     label4:
        return;
    }

    public void disableDependency(weka.core.Capabilities$Capability)
    {
        weka.core.Capabilities this;
        weka.core.Capabilities$Capability c, $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        boolean $z0;
        java.util.HashSet $r12;

        this := @this: weka.core.Capabilities;

        c := @parameter0: weka.core.Capabilities$Capability;

        $z0 = virtualinvoke this.<weka.core.Capabilities: boolean doNotCheckCapabilities()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r0 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability NOMINAL_ATTRIBUTES>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if c != $r0 goto label2;

        $r1 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability BINARY_ATTRIBUTES>;

        virtualinvoke this.<weka.core.Capabilities: void disableDependency(weka.core.Capabilities$Capability)>($r1);

        goto label7;

     label2:
        $r2 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability BINARY_ATTRIBUTES>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        if c != $r2 goto label3;

        $r3 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability UNARY_ATTRIBUTES>;

        virtualinvoke this.<weka.core.Capabilities: void disableDependency(weka.core.Capabilities$Capability)>($r3);

        goto label7;

     label3:
        $r4 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability UNARY_ATTRIBUTES>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        if c != $r4 goto label4;

        $r5 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability EMPTY_NOMINAL_ATTRIBUTES>;

        virtualinvoke this.<weka.core.Capabilities: void disableDependency(weka.core.Capabilities$Capability)>($r5);

        goto label7;

     label4:
        $r6 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability NOMINAL_CLASS>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r6);

        if c != $r6 goto label5;

        $r7 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability BINARY_CLASS>;

        virtualinvoke this.<weka.core.Capabilities: void disableDependency(weka.core.Capabilities$Capability)>($r7);

        goto label7;

     label5:
        $r8 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability BINARY_CLASS>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r8);

        if c != $r8 goto label6;

        $r9 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability UNARY_CLASS>;

        virtualinvoke this.<weka.core.Capabilities: void disableDependency(weka.core.Capabilities$Capability)>($r9);

        goto label7;

     label6:
        $r10 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability UNARY_CLASS>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r10);

        if c != $r10 goto label7;

        $r11 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability EMPTY_NOMINAL_CLASS>;

        virtualinvoke this.<weka.core.Capabilities: void disableDependency(weka.core.Capabilities$Capability)>($r11);

     label7:
        $r12 = this.<weka.core.Capabilities: java.util.HashSet m_Dependencies>;

        virtualinvoke $r12.<java.util.HashSet: boolean remove(java.lang.Object)>(c);

        return;
    }

    public void testWithFail(weka.core.Instances) throws java.lang.Exception
    {
        weka.core.Capabilities this;
        weka.core.Instances data;
        boolean $z0;
        java.lang.Exception $r0;

        this := @this: weka.core.Capabilities;

        data := @parameter0: weka.core.Instances;

        $z0 = virtualinvoke this.<weka.core.Capabilities: boolean test(weka.core.Instances)>(data);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r0 = this.<weka.core.Capabilities: java.lang.Exception m_FailReason>;

        throw $r0;

     label1:
        return;
    }


