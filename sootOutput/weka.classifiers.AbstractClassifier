    public static void runClassifier(weka.classifiers.Classifier, java.lang.String[])
    {
        weka.classifiers.Classifier classifier;
        java.lang.String[] options;
        java.lang.Exception e, ex, $r3, $r10;
        boolean $z0, $z1;
        weka.core.CommandlineRunnable $r0, $r9;
        java.io.PrintStream $r1, $r7;
        java.lang.String $r2, $r4, $r5, $r6, $r8;
        int $i0;

        classifier := @parameter0: weka.classifiers.Classifier;

        options := @parameter1: java.lang.String[];

     label01:
        $z0 = classifier instanceof weka.core.CommandlineRunnable;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label02;

        $r0 = (weka.core.CommandlineRunnable) classifier;

        interfaceinvoke $r0.<weka.core.CommandlineRunnable: void preExecution()>();

     label02:
        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r2 = staticinvoke <weka.classifiers.Evaluation: java.lang.String evaluateModel(weka.classifiers.Classifier,java.lang.String[])>(classifier, options);

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r2);

     label03:
        goto label08;

     label04:
        $r3 := @caughtexception;

        e = $r3;

        $r4 = virtualinvoke e.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        if $r4 == null goto label05;

        $r5 = virtualinvoke e.<java.lang.Exception: java.lang.String getMessage()>();

        $i0 = virtualinvoke $r5.<java.lang.String: int indexOf(java.lang.String)>("General options");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 == -1 goto label06;

     label05:
        $r6 = virtualinvoke e.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r6);

        if $r6 != null goto label07;

     label06:
        virtualinvoke e.<java.lang.Exception: void printStackTrace()>();

        goto label08;

     label07:
        $r7 = <java.lang.System: java.io.PrintStream err>;

        $r8 = virtualinvoke e.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r8);

     label08:
        $z1 = classifier instanceof weka.core.CommandlineRunnable;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label12;

     label09:
        $r9 = (weka.core.CommandlineRunnable) classifier;

        interfaceinvoke $r9.<weka.core.CommandlineRunnable: void postExecution()>();

     label10:
        goto label12;

     label11:
        $r10 := @caughtexception;

        ex = $r10;

        virtualinvoke ex.<java.lang.Exception: void printStackTrace()>();

     label12:
        return;

        catch java.lang.Exception from label01 to label03 with label04;
        catch java.lang.Exception from label09 to label10 with label11;
    }

    static void <clinit>()
    {
        <weka.classifiers.AbstractClassifier: int NUM_DECIMAL_PLACES_DEFAULT> = 2;

        <weka.classifiers.AbstractClassifier: java.lang.String BATCH_SIZE_DEFAULT> = "100";

        return;
    }

    public static weka.classifiers.Classifier makeCopy(weka.classifiers.Classifier) throws java.lang.Exception
    {
        weka.classifiers.Classifier model, $r2;
        weka.core.SerializedObject $r0;
        java.lang.Object $r1;

        model := @parameter0: weka.classifiers.Classifier;

        $r0 = new weka.core.SerializedObject;

        specialinvoke $r0.<weka.core.SerializedObject: void <init>(java.lang.Object)>(model);

        $r1 = virtualinvoke $r0.<weka.core.SerializedObject: java.lang.Object getObject()>();

        $r2 = (weka.classifiers.Classifier) $r1;

        return $r2;
    }

    public void <init>()
    {
        weka.classifiers.AbstractClassifier this;
        int $i0;
        java.lang.String $r0;

        this := @this: weka.classifiers.AbstractClassifier;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<weka.classifiers.AbstractClassifier: boolean m_Debug> = 0;

        this.<weka.classifiers.AbstractClassifier: boolean m_DoNotCheckCapabilities> = 0;

        $i0 = <weka.classifiers.AbstractClassifier: int NUM_DECIMAL_PLACES_DEFAULT>;

        this.<weka.classifiers.AbstractClassifier: int m_numDecimalPlaces> = $i0;

        $r0 = <weka.classifiers.AbstractClassifier: java.lang.String BATCH_SIZE_DEFAULT>;

        this.<weka.classifiers.AbstractClassifier: java.lang.String m_BatchSize> = $r0;

        return;
    }

    public double[][] distributionsForInstances(weka.core.Instances) throws java.lang.Exception
    {
        weka.classifiers.AbstractClassifier this;
        weka.core.Instances batch;
        double[][] batchPreds;
        int $i0, i#5, $i1;
        weka.core.Instance $r0;
        double[] $r1;

        this := @this: weka.classifiers.AbstractClassifier;

        batch := @parameter0: weka.core.Instances;

        $i0 = virtualinvoke batch.<weka.core.Instances: int numInstances()>();

        batchPreds = newarray (double[])[$i0];

        i#5 = 0;

     label1:
        $i1 = virtualinvoke batch.<weka.core.Instances: int numInstances()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#5 >= $i1 goto label2;

        $r0 = virtualinvoke batch.<weka.core.Instances: weka.core.Instance instance(int)>(i#5);

        $r1 = virtualinvoke this.<weka.classifiers.AbstractClassifier: double[] distributionForInstance(weka.core.Instance)>($r0);

        batchPreds[i#5] = $r1;

        i#5 = i#5 + 1;

        goto label1;

     label2:
        return batchPreds;
    }

    public boolean implementsMoreEfficientBatchPrediction()
    {
        weka.classifiers.AbstractClassifier this;

        this := @this: weka.classifiers.AbstractClassifier;

        return 0;
    }

    public void setBatchSize(java.lang.String)
    {
        weka.classifiers.AbstractClassifier this;
        java.lang.String size;

        this := @this: weka.classifiers.AbstractClassifier;

        size := @parameter0: java.lang.String;

        this.<weka.classifiers.AbstractClassifier: java.lang.String m_BatchSize> = size;

        return;
    }

    public void setDoNotCheckCapabilities(boolean)
    {
        weka.classifiers.AbstractClassifier this;
        boolean doNotCheckCapabilities;

        this := @this: weka.classifiers.AbstractClassifier;

        doNotCheckCapabilities := @parameter0: boolean;

        this.<weka.classifiers.AbstractClassifier: boolean m_DoNotCheckCapabilities> = doNotCheckCapabilities;

        return;
    }

    public void setNumDecimalPlaces(int)
    {
        weka.classifiers.AbstractClassifier this;
        int num;

        this := @this: weka.classifiers.AbstractClassifier;

        num := @parameter0: int;

        this.<weka.classifiers.AbstractClassifier: int m_numDecimalPlaces> = num;

        return;
    }

    public void postExecution() throws java.lang.Exception
    {
        weka.classifiers.AbstractClassifier this;

        this := @this: weka.classifiers.AbstractClassifier;

        return;
    }

    public void preExecution() throws java.lang.Exception
    {
        weka.classifiers.AbstractClassifier this;

        this := @this: weka.classifiers.AbstractClassifier;

        return;
    }

    public void setOptions(java.lang.String[]) throws java.lang.Exception
    {
        weka.classifiers.AbstractClassifier this;
        java.lang.String[] options;

        this := @this: weka.classifiers.AbstractClassifier;

        options := @parameter0: java.lang.String[];

        return;
    }

    public java.util.Enumeration listOptions()
    {
        weka.classifiers.AbstractClassifier this;
        java.util.Vector newVector;
        java.lang.Class $r0;
        weka.core.Option $r1, $r2, $r3, $r9;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r10, $r11, $r13, $r14;
        int $i0;
        java.lang.String $r8, $r12, $r15;
        java.util.Enumeration $r16;

        this := @this: weka.classifiers.AbstractClassifier;

        $r0 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        newVector = staticinvoke <weka.core.Option: java.util.Vector listOptionsForClassHierarchy(java.lang.Class,java.lang.Class)>($r0, class "weka/classifiers/AbstractClassifier");

        $r1 = new weka.core.Option;

        specialinvoke $r1.<weka.core.Option: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>("\tIf set, classifier is run in debug mode and\n\tmay output additional info to the console", "output-debug-info", 0, "-output-debug-info");

        virtualinvoke newVector.<java.util.Vector: void addElement(java.lang.Object)>($r1);

        $r2 = new weka.core.Option;

        specialinvoke $r2.<weka.core.Option: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>("\tIf set, classifier capabilities are not checked before classifier is built\n\t(use with caution).", "-do-not-check-capabilities", 0, "-do-not-check-capabilities");

        virtualinvoke newVector.<java.util.Vector: void addElement(java.lang.Object)>($r2);

        $r3 = new weka.core.Option;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tThe number of decimal places for the output of numbers in the model (default ");

        $i0 = this.<weka.classifiers.AbstractClassifier: int m_numDecimalPlaces>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<weka.core.Option: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>($r8, "num-decimal-places", 1, "-num-decimal-places");

        virtualinvoke newVector.<java.util.Vector: void addElement(java.lang.Object)>($r3);

        $r9 = new weka.core.Option;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tThe desired batch size for batch prediction  (default ");

        $r12 = this.<weka.classifiers.AbstractClassifier: java.lang.String m_BatchSize>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<weka.core.Option: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>($r15, "batch-size", 1, "-batch-size");

        virtualinvoke newVector.<java.util.Vector: void addElement(java.lang.Object)>($r9);

        $r16 = virtualinvoke newVector.<java.util.Vector: java.util.Enumeration elements()>();

        return $r16;
    }

    public boolean getDoNotCheckCapabilities()
    {
        weka.classifiers.AbstractClassifier this;
        boolean $z0;

        this := @this: weka.classifiers.AbstractClassifier;

        $z0 = this.<weka.classifiers.AbstractClassifier: boolean m_DoNotCheckCapabilities>;

        return $z0;
    }


