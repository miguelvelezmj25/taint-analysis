    public boolean apply(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.util.image.DeblockingFilter this;
        kanzi.SliceIntArray input, output;
        int x0, y0, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, y#34, $i9, x#39, $i10, $i11, $i12, $i13, $i14, $i15;
        boolean $z0, $z1;
        int[] $r0, $r1, $r2, $r3, $r4;

        this := @this: kanzi.util.image.DeblockingFilter;

        input := @parameter0: kanzi.SliceIntArray;

        output := @parameter1: kanzi.SliceIntArray;

        $z0 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(input);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(output);

        if $z1 != 0 goto label2;

     label1:
        return 0;

     label2:
        $r0 = input.<kanzi.SliceIntArray: int[] array>;

        $r1 = output.<kanzi.SliceIntArray: int[] array>;

        if $r0 == $r1 goto label3;

        $r2 = input.<kanzi.SliceIntArray: int[] array>;

        $i0 = input.<kanzi.SliceIntArray: int index>;

        $r3 = output.<kanzi.SliceIntArray: int[] array>;

        $i1 = output.<kanzi.SliceIntArray: int index>;

        $i2 = this.<kanzi.util.image.DeblockingFilter: int stride>;

        $i3 = this.<kanzi.util.image.DeblockingFilter: int width>;

        $i4 = $i2 * $i3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i0, $r3, $i1, $i4);

     label3:
        $i5 = output.<kanzi.SliceIntArray: int index>;

        $i6 = this.<kanzi.util.image.DeblockingFilter: int stride>;

        x0 = $i5 % $i6;

        $i7 = output.<kanzi.SliceIntArray: int index>;

        $i8 = this.<kanzi.util.image.DeblockingFilter: int stride>;

        y0 = $i7 / $i8;

        y#34 = 0;

     label4:
        $i9 = this.<kanzi.util.image.DeblockingFilter: int height>;

        if y#34 >= $i9 goto label7;

        x#39 = 0;

     label5:
        $i10 = this.<kanzi.util.image.DeblockingFilter: int width>;

        if x#39 >= $i10 goto label6;

        $r4 = output.<kanzi.SliceIntArray: int[] array>;

        $i11 = x#39 + x0;

        $i12 = y#34 + y0;

        $i13 = this.<kanzi.util.image.DeblockingFilter: int step>;

        virtualinvoke this.<kanzi.util.image.DeblockingFilter: void apply(int[],int,int,int,int,int,boolean)>($r4, $i11, $i12, $i13, 1, 50, 1);

        $i14 = this.<kanzi.util.image.DeblockingFilter: int step>;

        x#39 = x#39 + $i14;

        goto label5;

     label6:
        $i15 = this.<kanzi.util.image.DeblockingFilter: int step>;

        y#34 = y#34 + $i15;

        goto label4;

     label7:
        return 1;
    }

    public void apply(int[], int, int, int, int, int, boolean)
    {
        kanzi.util.image.DeblockingFilter this;
        int[] frame;
        int x, y, blockDim, predictionType, q;
        boolean strong;

        this := @this: kanzi.util.image.DeblockingFilter;

        frame := @parameter0: int[];

        x := @parameter1: int;

        y := @parameter2: int;

        blockDim := @parameter3: int;

        predictionType := @parameter4: int;

        q := @parameter5: int;

        strong := @parameter6: boolean;

        virtualinvoke this.<kanzi.util.image.DeblockingFilter: void applyVertical(int[],int,int,int,int,int,boolean)>(frame, x, y, blockDim, predictionType, q, strong);

        virtualinvoke this.<kanzi.util.image.DeblockingFilter: void applyHorizontal(int[],int,int,int,int,int,boolean)>(frame, x, y, blockDim, predictionType, q, strong);

        return;
    }

    public void applyVertical(int[], int, int, int, int, int, boolean)
    {
        kanzi.util.image.DeblockingFilter this;
        int[] frame;
        int x, y, blockDim, predictionType, q, st, w, h, inc, threshold, endj, start, end, q0, p0, q1, p1, q2, p2, q3, p3, k, q0, p0, q1, p1, q2, p2, q3, p3, $i0, line#19, $i1, $i2, $i3, $i4, $i5, $i6, j#42, $i7, $i8, deltaPQ#61, $i9, $i10, $i11, deltaPQ#71, $i12, $i13, deltaQQ#84, $i14, $i15, $i16, deltaQQ#94, $i17, $i18, deltaPP#107, $i19, $i20, $i21, deltaPP#117, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, deltaPQ#315, $i90, $i91, $i92, deltaPQ#325, $i93, $i94, deltaQQ#338, $i95, $i96, $i97, deltaQQ#348, $i98, $i99, deltaPP#361, $i100, $i101, $i102, deltaPP#371, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166;
        boolean strong;

        this := @this: kanzi.util.image.DeblockingFilter;

        frame := @parameter0: int[];

        x := @parameter1: int;

        y := @parameter2: int;

        blockDim := @parameter3: int;

        predictionType := @parameter4: int;

        q := @parameter5: int;

        strong := @parameter6: boolean;

        if frame != null goto label01;

        return;

     label01:
        st = this.<kanzi.util.image.DeblockingFilter: int stride>;

        w = this.<kanzi.util.image.DeblockingFilter: int width>;

        h = this.<kanzi.util.image.DeblockingFilter: int height>;

        inc = this.<kanzi.util.image.DeblockingFilter: int step>;

        threshold = specialinvoke this.<kanzi.util.image.DeblockingFilter: int getFilterStrength(int,boolean)>(q, strong);

        $i0 = y * st;

        line#19 = $i0 + x;

        $i1 = blockDim * st;

        endj = line#19 + $i1;

        if y < inc goto label02;

        $i2 = line#19;

        goto label03;

     label02:
        $i3 = inc * st;

        $i2 = line#19 + $i3;

     label03:
        start = $i2;

        $i4 = h - inc;

        if y >= $i4 goto label04;

        $i5 = endj;

        goto label05;

     label04:
        $i6 = inc * st;

        $i5 = endj - $i6;

     label05:
        end = $i5;

        j#42 = start;

     label06:
        if j#42 >= end goto label19;

        $i7 = predictionType & 1;

        if $i7 == 0 goto label12;

        if x < inc goto label12;

        q0 = frame[j#42];

        $i8 = j#42 - 1;

        p0 = frame[$i8];

        deltaPQ#61 = q0 - p0;

        $i9 = deltaPQ#61 >> 31;

        $i10 = deltaPQ#61 + $i9;

        $i11 = deltaPQ#61 >> 31;

        deltaPQ#71 = $i10 ^ $i11;

        if deltaPQ#71 < threshold goto label07;

        goto label18;

     label07:
        $i12 = j#42 + 1;

        q1 = frame[$i12];

        $i13 = q0 - q1;

        deltaQQ#84 = $i13 << 2;

        $i14 = deltaQQ#84 >> 31;

        $i15 = deltaQQ#84 + $i14;

        $i16 = deltaQQ#84 >> 31;

        deltaQQ#94 = $i15 ^ $i16;

        if deltaQQ#94 < threshold goto label08;

        goto label18;

     label08:
        $i17 = j#42 - 2;

        p1 = frame[$i17];

        $i18 = p0 - p1;

        deltaPP#107 = $i18 << 2;

        $i19 = deltaPP#107 >> 31;

        $i20 = deltaPP#107 + $i19;

        $i21 = deltaPP#107 >> 31;

        deltaPP#117 = $i20 ^ $i21;

        if deltaPP#117 < threshold goto label09;

        goto label18;

     label09:
        if deltaPQ#71 > 1 goto label10;

        if deltaPP#117 > 1 goto label10;

        if deltaQQ#94 > 1 goto label10;

        goto label18;

     label10:
        if strong != 1 goto label11;

        $i22 = j#42 + 2;

        q2 = frame[$i22];

        $i23 = j#42 - 3;

        p2 = frame[$i23];

        $i24 = j#42 + 3;

        q3 = frame[$i24];

        $i25 = j#42 - 4;

        p3 = frame[$i25];

        $i26 = q1 << 1;

        $i27 = q2 + $i26;

        $i28 = q0 << 1;

        $i29 = $i27 + $i28;

        $i30 = p0 << 1;

        $i31 = $i29 + $i30;

        $i32 = $i31 + p1;

        $i33 = $i32 + 4;

        $i34 = $i33 >> 3;

        frame[j#42] = $i34;

        $i35 = j#42 - 1;

        $i36 = p1 << 1;

        $i37 = p2 + $i36;

        $i38 = p0 << 1;

        $i39 = $i37 + $i38;

        $i40 = q0 << 1;

        $i41 = $i39 + $i40;

        $i42 = $i41 + q1;

        $i43 = $i42 + 4;

        $i44 = $i43 >> 3;

        frame[$i35] = $i44;

        $i45 = j#42 + 1;

        $i46 = q2 + q1;

        $i47 = $i46 + q0;

        $i48 = $i47 + p0;

        $i49 = $i48 + 2;

        $i50 = $i49 >> 2;

        frame[$i45] = $i50;

        $i51 = j#42 - 2;

        $i52 = p2 + p1;

        $i53 = $i52 + p0;

        $i54 = $i53 + q0;

        $i55 = $i54 + 2;

        $i56 = $i55 >> 2;

        frame[$i51] = $i56;

        $i57 = j#42 + 2;

        $i58 = q3 << 1;

        $i59 = q2 * 3;

        $i60 = $i58 + $i59;

        $i61 = $i60 + q1;

        $i62 = $i61 + q0;

        $i63 = $i62 + p0;

        $i64 = $i63 + 4;

        $i65 = $i64 >> 3;

        frame[$i57] = $i65;

        $i66 = j#42 - 3;

        $i67 = p3 << 1;

        $i68 = p2 * 3;

        $i69 = $i67 + $i68;

        $i70 = $i69 + p1;

        $i71 = $i70 + p0;

        $i72 = $i71 + q0;

        $i73 = $i72 + 4;

        $i74 = $i73 >> 3;

        frame[$i66] = $i74;

        goto label12;

     label11:
        $i75 = q1 << 1;

        $i76 = $i75 + q0;

        $i77 = $i76 + p1;

        $i78 = $i77 + 2;

        $i79 = $i78 >> 2;

        frame[j#42] = $i79;

        $i80 = j#42 - 1;

        $i81 = p1 << 1;

        $i82 = $i81 + p0;

        $i83 = $i82 + q1;

        $i84 = $i83 + 2;

        $i85 = $i84 >> 2;

        frame[$i80] = $i85;

     label12:
        $i86 = predictionType & 2;

        if $i86 == 0 goto label17;

        $i87 = w - blockDim;

        $i88 = $i87 - inc;

        if x >= $i88 goto label17;

        k = j#42 + blockDim;

        q0 = frame[k];

        $i89 = k + 1;

        p0 = frame[$i89];

        deltaPQ#315 = q0 - p0;

        $i90 = deltaPQ#315 >> 31;

        $i91 = deltaPQ#315 + $i90;

        $i92 = deltaPQ#315 >> 31;

        deltaPQ#325 = $i91 ^ $i92;

        if deltaPQ#325 < threshold goto label13;

        goto label18;

     label13:
        $i93 = k - 1;

        q1 = frame[$i93];

        $i94 = q0 - q1;

        deltaQQ#338 = $i94 << 2;

        $i95 = deltaQQ#338 >> 31;

        $i96 = deltaQQ#338 + $i95;

        $i97 = deltaQQ#338 >> 31;

        deltaQQ#348 = $i96 ^ $i97;

        if deltaQQ#348 < threshold goto label14;

        goto label18;

     label14:
        $i98 = k + 2;

        p1 = frame[$i98];

        $i99 = p0 - p1;

        deltaPP#361 = $i99 << 2;

        $i100 = deltaPP#361 >> 31;

        $i101 = deltaPP#361 + $i100;

        $i102 = deltaPP#361 >> 31;

        deltaPP#371 = $i101 ^ $i102;

        if deltaPP#371 < threshold goto label15;

        goto label18;

     label15:
        if strong != 1 goto label16;

        $i103 = k - 2;

        q2 = frame[$i103];

        $i104 = k + 3;

        p2 = frame[$i104];

        $i105 = k - 3;

        q3 = frame[$i105];

        $i106 = k + 4;

        p3 = frame[$i106];

        $i107 = q1 << 1;

        $i108 = q2 + $i107;

        $i109 = q0 << 1;

        $i110 = $i108 + $i109;

        $i111 = p0 << 1;

        $i112 = $i110 + $i111;

        $i113 = $i112 + p1;

        $i114 = $i113 + 4;

        $i115 = $i114 >> 3;

        frame[k] = $i115;

        $i116 = k + 1;

        $i117 = p1 << 1;

        $i118 = p2 + $i117;

        $i119 = p0 << 1;

        $i120 = $i118 + $i119;

        $i121 = q0 << 1;

        $i122 = $i120 + $i121;

        $i123 = $i122 + q1;

        $i124 = $i123 + 4;

        $i125 = $i124 >> 3;

        frame[$i116] = $i125;

        $i126 = k - 1;

        $i127 = q2 + q1;

        $i128 = $i127 + q0;

        $i129 = $i128 + p0;

        $i130 = $i129 + 2;

        $i131 = $i130 >> 2;

        frame[$i126] = $i131;

        $i132 = k + 2;

        $i133 = p2 + p1;

        $i134 = $i133 + p0;

        $i135 = $i134 + q0;

        $i136 = $i135 + 2;

        $i137 = $i136 >> 2;

        frame[$i132] = $i137;

        $i138 = k - 2;

        $i139 = q3 << 1;

        $i140 = q2 * 3;

        $i141 = $i139 + $i140;

        $i142 = $i141 + q1;

        $i143 = $i142 + q0;

        $i144 = $i143 + p0;

        $i145 = $i144 + 4;

        $i146 = $i145 >> 3;

        frame[$i138] = $i146;

        $i147 = k + 3;

        $i148 = p3 << 1;

        $i149 = p2 * 3;

        $i150 = $i148 + $i149;

        $i151 = $i150 + p1;

        $i152 = $i151 + p0;

        $i153 = $i152 + q0;

        $i154 = $i153 + 4;

        $i155 = $i154 >> 3;

        frame[$i147] = $i155;

        goto label17;

     label16:
        $i156 = q1 << 1;

        $i157 = $i156 + q0;

        $i158 = $i157 + p1;

        $i159 = $i158 + 2;

        $i160 = $i159 >> 2;

        frame[k] = $i160;

        $i161 = k + 1;

        $i162 = p1 << 1;

        $i163 = $i162 + p0;

        $i164 = $i163 + q1;

        $i165 = $i164 + 2;

        $i166 = $i165 >> 2;

        frame[$i161] = $i166;

     label17:
        line#19 = line#19 + st;

     label18:
        j#42 = j#42 + st;

        goto label06;

     label19:
        return;
    }

    private int getFilterStrength(int, boolean)
    {
        kanzi.util.image.DeblockingFilter this;
        int q;
        boolean strong;

        this := @this: kanzi.util.image.DeblockingFilter;

        q := @parameter0: int;

        strong := @parameter1: boolean;

        return 12;
    }

    public void applyHorizontal(int[], int, int, int, int, int, boolean)
    {
        kanzi.util.image.DeblockingFilter this;
        int[] frame;
        int x, y, blockDim, predictionType, q, st, w, h, inc, threshold, line, start, endi, end, st2, st3, st4, q0, p0, q1, p1, q2, p2, q3, p3, $i0, $i1, $i2, $i3, $i4, i#50, $i5, deltaPQ#64, $i6, $i7, $i8, deltaPQ#74, $i9, $i10, deltaQQ#87, $i11, $i12, $i13, deltaQQ#97, $i14, $i15, deltaPP#110, $i16, $i17, $i18, deltaPP#120, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82;
        boolean strong;

        this := @this: kanzi.util.image.DeblockingFilter;

        frame := @parameter0: int[];

        x := @parameter1: int;

        y := @parameter2: int;

        blockDim := @parameter3: int;

        predictionType := @parameter4: int;

        q := @parameter5: int;

        strong := @parameter6: boolean;

        if frame != null goto label01;

        return;

     label01:
        st = this.<kanzi.util.image.DeblockingFilter: int stride>;

        w = this.<kanzi.util.image.DeblockingFilter: int width>;

        h = this.<kanzi.util.image.DeblockingFilter: int height>;

        inc = this.<kanzi.util.image.DeblockingFilter: int step>;

        if y < inc goto label02;

        $i0 = h - inc;

        if y < $i0 goto label03;

     label02:
        return;

     label03:
        threshold = specialinvoke this.<kanzi.util.image.DeblockingFilter: int getFilterStrength(int,boolean)>(q, strong);

        $i1 = y * st;

        line = $i1 + x;

        if x < inc goto label04;

        $i2 = line;

        goto label05;

     label04:
        $i2 = line + inc;

     label05:
        start = $i2;

        endi = start + blockDim;

        $i3 = w - inc;

        if x >= $i3 goto label06;

        $i4 = endi;

        goto label07;

     label06:
        $i4 = endi - inc;

     label07:
        end = $i4;

        st2 = st + st;

        st3 = st2 + st;

        st4 = st3 + st;

        i#50 = start;

     label08:
        if i#50 >= end goto label14;

        q0 = frame[i#50];

        $i5 = i#50 - st;

        p0 = frame[$i5];

        deltaPQ#64 = q0 - p0;

        $i6 = deltaPQ#64 >> 31;

        $i7 = deltaPQ#64 + $i6;

        $i8 = deltaPQ#64 >> 31;

        deltaPQ#74 = $i7 ^ $i8;

        if deltaPQ#74 < threshold goto label09;

        goto label13;

     label09:
        $i9 = i#50 + st;

        q1 = frame[$i9];

        $i10 = q0 - q1;

        deltaQQ#87 = $i10 << 2;

        $i11 = deltaQQ#87 >> 31;

        $i12 = deltaQQ#87 + $i11;

        $i13 = deltaQQ#87 >> 31;

        deltaQQ#97 = $i12 ^ $i13;

        if deltaQQ#97 < threshold goto label10;

        goto label13;

     label10:
        $i14 = i#50 - st2;

        p1 = frame[$i14];

        $i15 = p0 - p1;

        deltaPP#110 = $i15 << 2;

        $i16 = deltaPP#110 >> 31;

        $i17 = deltaPP#110 + $i16;

        $i18 = deltaPP#110 >> 31;

        deltaPP#120 = $i17 ^ $i18;

        if deltaPP#120 < threshold goto label11;

        goto label13;

     label11:
        if strong != 1 goto label12;

        $i19 = i#50 + st2;

        q2 = frame[$i19];

        $i20 = i#50 - st3;

        p2 = frame[$i20];

        $i21 = i#50 + st3;

        q3 = frame[$i21];

        $i22 = i#50 - st4;

        p3 = frame[$i22];

        $i23 = q1 << 1;

        $i24 = q2 + $i23;

        $i25 = q0 << 1;

        $i26 = $i24 + $i25;

        $i27 = p0 << 1;

        $i28 = $i26 + $i27;

        $i29 = $i28 + p1;

        $i30 = $i29 + 4;

        $i31 = $i30 >> 3;

        frame[i#50] = $i31;

        $i32 = i#50 - st;

        $i33 = p1 << 1;

        $i34 = p2 + $i33;

        $i35 = p0 << 1;

        $i36 = $i34 + $i35;

        $i37 = q0 << 1;

        $i38 = $i36 + $i37;

        $i39 = $i38 + q1;

        $i40 = $i39 + 4;

        $i41 = $i40 >> 3;

        frame[$i32] = $i41;

        $i42 = i#50 + st;

        $i43 = q2 + q1;

        $i44 = $i43 + q0;

        $i45 = $i44 + p0;

        $i46 = $i45 + 2;

        $i47 = $i46 >> 2;

        frame[$i42] = $i47;

        $i48 = i#50 - st2;

        $i49 = p2 + p1;

        $i50 = $i49 + p0;

        $i51 = $i50 + q0;

        $i52 = $i51 + 2;

        $i53 = $i52 >> 2;

        frame[$i48] = $i53;

        $i54 = i#50 + st2;

        $i55 = q3 << 1;

        $i56 = q2 * 3;

        $i57 = $i55 + $i56;

        $i58 = $i57 + q1;

        $i59 = $i58 + q0;

        $i60 = $i59 + p0;

        $i61 = $i60 + 4;

        $i62 = $i61 >> 3;

        frame[$i54] = $i62;

        $i63 = i#50 - st3;

        $i64 = p3 << 1;

        $i65 = p2 * 3;

        $i66 = $i64 + $i65;

        $i67 = $i66 + p1;

        $i68 = $i67 + p0;

        $i69 = $i68 + q0;

        $i70 = $i69 + 4;

        $i71 = $i70 >> 3;

        frame[$i63] = $i71;

        goto label13;

     label12:
        $i72 = q1 << 1;

        $i73 = $i72 + q0;

        $i74 = $i73 + p1;

        $i75 = $i74 + 2;

        $i76 = $i75 >> 2;

        frame[i#50] = $i76;

        $i77 = i#50 - st;

        $i78 = p1 << 1;

        $i79 = $i78 + p0;

        $i80 = $i79 + q1;

        $i81 = $i80 + 2;

        $i82 = $i81 >> 2;

        frame[$i77] = $i82;

     label13:
        i#50 = i#50 + 1;

        goto label08;

     label14:
        return;
    }


