    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "berkeley/com/sleepycat/je/Environment";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <berkeley.com.sleepycat.je.Environment: boolean $assertionsDisabled> = $z1;

        return;
    }

    public void <init>(java.io.File, berkeley.com.sleepycat.je.EnvironmentConfig) throws berkeley.com.sleepycat.je.EnvironmentNotFoundException, berkeley.com.sleepycat.je.EnvironmentLockedException, berkeley.com.sleepycat.je.VersionMismatchException, berkeley.com.sleepycat.je.DatabaseException, java.lang.IllegalArgumentException
    {
        berkeley.com.sleepycat.je.Environment this;
        java.io.File envHome;
        berkeley.com.sleepycat.je.EnvironmentConfig configuration;

        this := @this: berkeley.com.sleepycat.je.Environment;

        envHome := @parameter0: java.io.File;

        configuration := @parameter1: berkeley.com.sleepycat.je.EnvironmentConfig;

        specialinvoke this.<berkeley.com.sleepycat.je.Environment: void <init>(java.io.File,berkeley.com.sleepycat.je.EnvironmentConfig,berkeley.com.sleepycat.je.dbi.RepConfigProxy,berkeley.com.sleepycat.je.dbi.EnvironmentImpl)>(envHome, configuration, null, null);

        return;
    }

    protected void <init>(java.io.File, berkeley.com.sleepycat.je.EnvironmentConfig, berkeley.com.sleepycat.je.dbi.RepConfigProxy, berkeley.com.sleepycat.je.dbi.EnvironmentImpl)
    {
        berkeley.com.sleepycat.je.Environment this;
        java.io.File envHome;
        berkeley.com.sleepycat.je.EnvironmentConfig envConfig, $r2;
        berkeley.com.sleepycat.je.dbi.RepConfigProxy repConfigProxy;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl, $r3;
        java.util.concurrent.ConcurrentHashMap $r0, $r1;

        this := @this: berkeley.com.sleepycat.je.Environment;

        envHome := @parameter0: java.io.File;

        envConfig := @parameter1: berkeley.com.sleepycat.je.EnvironmentConfig;

        repConfigProxy := @parameter2: berkeley.com.sleepycat.je.dbi.RepConfigProxy;

        envImpl := @parameter3: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        this.<berkeley.com.sleepycat.je.Environment: java.util.Map referringDbs> = $r0;

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        this.<berkeley.com.sleepycat.je.Environment: java.util.Map referringDbTxns> = $r1;

        staticinvoke <berkeley.com.sleepycat.je.utilint.DatabaseUtil: void checkForNullParam(java.lang.Object,java.lang.String)>(envHome, "envHome");

        $r2 = specialinvoke this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.EnvironmentConfig setupHandleConfig(java.io.File,berkeley.com.sleepycat.je.EnvironmentConfig,berkeley.com.sleepycat.je.dbi.RepConfigProxy)>(envHome, envConfig, repConfigProxy);

        this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.EnvironmentConfig appliedFinalConfig> = $r2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(envImpl);

        if envImpl == null goto label1;

        this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.dbi.EnvironmentImpl environmentImpl> = envImpl;

        goto label2;

     label1:
        $r3 = virtualinvoke this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.dbi.EnvironmentImpl makeEnvironmentImpl(java.io.File,berkeley.com.sleepycat.je.EnvironmentConfig,berkeley.com.sleepycat.je.dbi.RepConfigProxy)>(envHome, envConfig, repConfigProxy);

        this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.dbi.EnvironmentImpl environmentImpl> = $r3;

     label2:
        return;
    }

    private berkeley.com.sleepycat.je.EnvironmentConfig setupHandleConfig(java.io.File, berkeley.com.sleepycat.je.EnvironmentConfig, berkeley.com.sleepycat.je.dbi.RepConfigProxy) throws java.lang.IllegalArgumentException
    {
        berkeley.com.sleepycat.je.Environment this;
        java.io.File envHome;
        berkeley.com.sleepycat.je.EnvironmentConfig envConfig, baseConfig, useConfig, $r0;
        berkeley.com.sleepycat.je.dbi.RepConfigProxy repConfig;
        boolean $z0;
        java.util.Properties $r1;

        this := @this: berkeley.com.sleepycat.je.Environment;

        envHome := @parameter0: java.io.File;

        envConfig := @parameter1: berkeley.com.sleepycat.je.EnvironmentConfig;

        repConfig := @parameter2: berkeley.com.sleepycat.je.dbi.RepConfigProxy;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(envConfig);

        if envConfig != null goto label1;

        $r0 = <berkeley.com.sleepycat.je.EnvironmentConfig: berkeley.com.sleepycat.je.EnvironmentConfig DEFAULT>;

        goto label2;

     label1:
        $r0 = envConfig;

     label2:
        baseConfig = $r0;

        useConfig = virtualinvoke baseConfig.<berkeley.com.sleepycat.je.EnvironmentConfig: berkeley.com.sleepycat.je.EnvironmentConfig clone()>();

        $z0 = virtualinvoke useConfig.<berkeley.com.sleepycat.je.EnvironmentConfig: boolean getLoadPropertyFile()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        $r1 = staticinvoke <berkeley.com.sleepycat.je.DbInternal: java.util.Properties getProps(berkeley.com.sleepycat.je.EnvironmentMutableConfig)>(useConfig);

        staticinvoke <berkeley.com.sleepycat.je.dbi.DbConfigManager: void applyFileConfig(java.io.File,java.util.Properties,boolean)>(envHome, $r1, 0);

     label3:
        specialinvoke this.<berkeley.com.sleepycat.je.Environment: void copyToHandleConfig(berkeley.com.sleepycat.je.EnvironmentMutableConfig,berkeley.com.sleepycat.je.EnvironmentConfig,berkeley.com.sleepycat.je.dbi.RepConfigProxy)>(useConfig, useConfig, repConfig);

        return useConfig;
    }

    protected berkeley.com.sleepycat.je.dbi.EnvironmentImpl makeEnvironmentImpl(java.io.File, berkeley.com.sleepycat.je.EnvironmentConfig, berkeley.com.sleepycat.je.dbi.RepConfigProxy)
    {
        berkeley.com.sleepycat.je.Environment this;
        java.io.File envHome;
        berkeley.com.sleepycat.je.EnvironmentConfig envConfig, $r3;
        berkeley.com.sleepycat.je.dbi.RepConfigProxy repConfigProxy, $r4;
        berkeley.com.sleepycat.je.dbi.DbEnvPool $r2;
        boolean $z0;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r5, $r6, $r7, $r9;
        java.util.concurrent.atomic.AtomicReference $r8;

        this := @this: berkeley.com.sleepycat.je.Environment;

        envHome := @parameter0: java.io.File;

        envConfig := @parameter1: berkeley.com.sleepycat.je.EnvironmentConfig;

        repConfigProxy := @parameter2: berkeley.com.sleepycat.je.dbi.RepConfigProxy;

        $r2 = staticinvoke <berkeley.com.sleepycat.je.dbi.DbEnvPool: berkeley.com.sleepycat.je.dbi.DbEnvPool getInstance()>();

        $r3 = this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.EnvironmentConfig appliedFinalConfig>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(envConfig);

        if envConfig == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r4 = virtualinvoke this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.dbi.RepConfigProxy setupRepConfig(java.io.File,berkeley.com.sleepycat.je.dbi.RepConfigProxy,berkeley.com.sleepycat.je.EnvironmentConfig)>(envHome, repConfigProxy, envConfig);

        $r5 = virtualinvoke $r2.<berkeley.com.sleepycat.je.dbi.DbEnvPool: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnvironment(java.io.File,berkeley.com.sleepycat.je.EnvironmentConfig,boolean,berkeley.com.sleepycat.je.dbi.RepConfigProxy)>(envHome, $r3, $z0, $r4);

        this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.dbi.EnvironmentImpl environmentImpl> = $r5;

        $r6 = this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.dbi.EnvironmentImpl environmentImpl>;

        virtualinvoke $r6.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void registerMBean(berkeley.com.sleepycat.je.Environment)>(this);

        $r7 = this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.dbi.EnvironmentImpl environmentImpl>;

        $r8 = virtualinvoke $r7.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: java.util.concurrent.atomic.AtomicReference getInvalidatingExceptionReference()>();

        this.<berkeley.com.sleepycat.je.Environment: java.util.concurrent.atomic.AtomicReference invalidatingEFE> = $r8;

        $r9 = this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.dbi.EnvironmentImpl environmentImpl>;

        return $r9;
    }

    protected berkeley.com.sleepycat.je.dbi.RepConfigProxy setupRepConfig(java.io.File, berkeley.com.sleepycat.je.dbi.RepConfigProxy, berkeley.com.sleepycat.je.EnvironmentConfig)
    {
        berkeley.com.sleepycat.je.Environment this;
        java.io.File envHome;
        berkeley.com.sleepycat.je.dbi.RepConfigProxy repConfigProxy;
        berkeley.com.sleepycat.je.EnvironmentConfig envConfig;

        this := @this: berkeley.com.sleepycat.je.Environment;

        envHome := @parameter0: java.io.File;

        repConfigProxy := @parameter1: berkeley.com.sleepycat.je.dbi.RepConfigProxy;

        envConfig := @parameter2: berkeley.com.sleepycat.je.EnvironmentConfig;

        return null;
    }

    private void copyToHandleConfig(berkeley.com.sleepycat.je.EnvironmentMutableConfig, berkeley.com.sleepycat.je.EnvironmentConfig, berkeley.com.sleepycat.je.dbi.RepConfigProxy)
    {
        berkeley.com.sleepycat.je.Environment this;
        berkeley.com.sleepycat.je.EnvironmentMutableConfig useConfig, newHandleConfig, $r0, $r2, $r4, $r6;
        berkeley.com.sleepycat.je.EnvironmentConfig initStaticConfig;
        berkeley.com.sleepycat.je.dbi.RepConfigProxy initRepConfig;
        berkeley.com.sleepycat.je.TransactionConfig newTxnConfig, $r1, $r11, $r13, $r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        berkeley.com.sleepycat.je.Durability $r7;
        berkeley.com.sleepycat.je.ReplicaConsistencyPolicy $r16, $r18;

        this := @this: berkeley.com.sleepycat.je.Environment;

        useConfig := @parameter0: berkeley.com.sleepycat.je.EnvironmentMutableConfig;

        initStaticConfig := @parameter1: berkeley.com.sleepycat.je.EnvironmentConfig;

        initRepConfig := @parameter2: berkeley.com.sleepycat.je.dbi.RepConfigProxy;

        $r0 = new berkeley.com.sleepycat.je.EnvironmentMutableConfig;

        specialinvoke $r0.<berkeley.com.sleepycat.je.EnvironmentMutableConfig: void <init>()>();

        newHandleConfig = $r0;

        virtualinvoke useConfig.<berkeley.com.sleepycat.je.EnvironmentMutableConfig: void copyHandlePropsTo(berkeley.com.sleepycat.je.EnvironmentMutableConfig)>(newHandleConfig);

        this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.EnvironmentMutableConfig handleConfig> = newHandleConfig;

        $r1 = <berkeley.com.sleepycat.je.TransactionConfig: berkeley.com.sleepycat.je.TransactionConfig DEFAULT>;

        newTxnConfig = virtualinvoke $r1.<berkeley.com.sleepycat.je.TransactionConfig: berkeley.com.sleepycat.je.TransactionConfig clone()>();

        $r2 = this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.EnvironmentMutableConfig handleConfig>;

        $z0 = virtualinvoke $r2.<berkeley.com.sleepycat.je.EnvironmentMutableConfig: boolean getTxnNoSync()>();

        virtualinvoke newTxnConfig.<berkeley.com.sleepycat.je.TransactionConfig: berkeley.com.sleepycat.je.TransactionConfig setNoSync(boolean)>($z0);

        $r4 = this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.EnvironmentMutableConfig handleConfig>;

        $z1 = virtualinvoke $r4.<berkeley.com.sleepycat.je.EnvironmentMutableConfig: boolean getTxnWriteNoSync()>();

        virtualinvoke newTxnConfig.<berkeley.com.sleepycat.je.TransactionConfig: berkeley.com.sleepycat.je.TransactionConfig setWriteNoSync(boolean)>($z1);

        $r6 = this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.EnvironmentMutableConfig handleConfig>;

        $r7 = virtualinvoke $r6.<berkeley.com.sleepycat.je.EnvironmentMutableConfig: berkeley.com.sleepycat.je.Durability getDurability()>();

        virtualinvoke newTxnConfig.<berkeley.com.sleepycat.je.TransactionConfig: berkeley.com.sleepycat.je.TransactionConfig setDurability(berkeley.com.sleepycat.je.Durability)>($r7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(initStaticConfig);

        if initStaticConfig == null goto label1;

        $z2 = virtualinvoke initStaticConfig.<berkeley.com.sleepycat.je.EnvironmentConfig: boolean getTxnSerializableIsolation()>();

        virtualinvoke newTxnConfig.<berkeley.com.sleepycat.je.TransactionConfig: berkeley.com.sleepycat.je.TransactionConfig setSerializableIsolation(boolean)>($z2);

        $z3 = virtualinvoke initStaticConfig.<berkeley.com.sleepycat.je.EnvironmentConfig: boolean getTxnReadCommitted()>();

        virtualinvoke newTxnConfig.<berkeley.com.sleepycat.je.TransactionConfig: berkeley.com.sleepycat.je.TransactionConfig setReadCommitted(boolean)>($z3);

        goto label2;

     label1:
        $r11 = this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.TransactionConfig defaultTxnConfig>;

        $z4 = virtualinvoke $r11.<berkeley.com.sleepycat.je.TransactionConfig: boolean getSerializableIsolation()>();

        virtualinvoke newTxnConfig.<berkeley.com.sleepycat.je.TransactionConfig: berkeley.com.sleepycat.je.TransactionConfig setSerializableIsolation(boolean)>($z4);

        $r13 = this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.TransactionConfig defaultTxnConfig>;

        $z5 = virtualinvoke $r13.<berkeley.com.sleepycat.je.TransactionConfig: boolean getReadCommitted()>();

        virtualinvoke newTxnConfig.<berkeley.com.sleepycat.je.TransactionConfig: berkeley.com.sleepycat.je.TransactionConfig setReadCommitted(boolean)>($z5);

        $r15 = this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.TransactionConfig defaultTxnConfig>;

        $r16 = virtualinvoke $r15.<berkeley.com.sleepycat.je.TransactionConfig: berkeley.com.sleepycat.je.ReplicaConsistencyPolicy getConsistencyPolicy()>();

        virtualinvoke newTxnConfig.<berkeley.com.sleepycat.je.TransactionConfig: berkeley.com.sleepycat.je.TransactionConfig setConsistencyPolicy(berkeley.com.sleepycat.je.ReplicaConsistencyPolicy)>($r16);

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(initRepConfig);

        if initRepConfig == null goto label3;

        $r18 = interfaceinvoke initRepConfig.<berkeley.com.sleepycat.je.dbi.RepConfigProxy: berkeley.com.sleepycat.je.ReplicaConsistencyPolicy getConsistencyPolicy()>();

        virtualinvoke newTxnConfig.<berkeley.com.sleepycat.je.TransactionConfig: berkeley.com.sleepycat.je.TransactionConfig setConsistencyPolicy(berkeley.com.sleepycat.je.ReplicaConsistencyPolicy)>($r18);

     label3:
        this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.TransactionConfig defaultTxnConfig> = newTxnConfig;

        return;
    }

    berkeley.com.sleepycat.je.dbi.EnvironmentImpl getNonNullEnvImpl()
    {
        berkeley.com.sleepycat.je.Environment this;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        java.lang.IllegalStateException $r0;

        this := @this: berkeley.com.sleepycat.je.Environment;

        envImpl = this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.dbi.EnvironmentImpl environmentImpl>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(envImpl);

        if envImpl != null goto label1;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Environment is closed.");

        throw $r0;

     label1:
        return envImpl;
    }

    public berkeley.com.sleepycat.je.EnvironmentConfig getConfig() throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.Environment this;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        berkeley.com.sleepycat.je.EnvironmentConfig config;
        java.lang.Error E, $r2;
        berkeley.com.sleepycat.je.EnvironmentMutableConfig $r0;

        this := @this: berkeley.com.sleepycat.je.Environment;

        envImpl = virtualinvoke this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getNonNullEnvImpl()>();

     label1:
        config = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.EnvironmentConfig cloneConfig()>();

        $r0 = this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.EnvironmentMutableConfig handleConfig>;

        virtualinvoke $r0.<berkeley.com.sleepycat.je.EnvironmentMutableConfig: void copyHandlePropsTo(berkeley.com.sleepycat.je.EnvironmentMutableConfig)>(config);

        virtualinvoke config.<berkeley.com.sleepycat.je.EnvironmentConfig: void fillInEnvironmentGeneratedProps(berkeley.com.sleepycat.je.dbi.EnvironmentImpl)>(envImpl);

     label2:
        return config;

     label3:
        $r2 := @caughtexception;

        E = $r2;

        virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void invalidate(java.lang.Error)>(E);

        throw E;

        catch java.lang.Error from label1 to label2 with label3;
    }

    public synchronized berkeley.com.sleepycat.je.Database openDatabase(berkeley.com.sleepycat.je.Transaction, java.lang.String, berkeley.com.sleepycat.je.DatabaseConfig) throws berkeley.com.sleepycat.je.DatabaseNotFoundException, berkeley.com.sleepycat.je.DatabaseExistsException, java.lang.IllegalArgumentException, java.lang.IllegalStateException
    {
        berkeley.com.sleepycat.je.Environment this;
        berkeley.com.sleepycat.je.Transaction txn;
        java.lang.String databaseName;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        berkeley.com.sleepycat.je.Database db, $r0;
        java.lang.Error E, $r2;
        berkeley.com.sleepycat.je.DatabaseConfig dbConfig#1;

        this := @this: berkeley.com.sleepycat.je.Environment;

        txn := @parameter0: berkeley.com.sleepycat.je.Transaction;

        databaseName := @parameter1: java.lang.String;

        dbConfig#1 := @parameter2: berkeley.com.sleepycat.je.DatabaseConfig;

        envImpl = virtualinvoke this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.dbi.EnvironmentImpl checkOpen()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dbConfig#1);

        if dbConfig#1 != null goto label1;

        dbConfig#1 = <berkeley.com.sleepycat.je.DatabaseConfig: berkeley.com.sleepycat.je.DatabaseConfig DEFAULT>;

     label1:
        $r0 = new berkeley.com.sleepycat.je.Database;

        specialinvoke $r0.<berkeley.com.sleepycat.je.Database: void <init>(berkeley.com.sleepycat.je.Environment)>(this);

        db = $r0;

        specialinvoke this.<berkeley.com.sleepycat.je.Environment: void setupDatabase(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.Transaction,berkeley.com.sleepycat.je.Database,java.lang.String,berkeley.com.sleepycat.je.DatabaseConfig,boolean)>(envImpl, txn, db, databaseName, dbConfig#1, 0);

     label2:
        return db;

     label3:
        $r2 := @caughtexception;

        E = $r2;

        virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void invalidate(java.lang.Error)>(E);

        throw E;

        catch java.lang.Error from label1 to label2 with label3;
    }

    berkeley.com.sleepycat.je.dbi.EnvironmentImpl checkOpen()
    {
        berkeley.com.sleepycat.je.Environment this;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;

        this := @this: berkeley.com.sleepycat.je.Environment;

        envImpl = virtualinvoke this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getNonNullEnvImpl()>();

        virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void checkOpen()>();

        return envImpl;
    }

    private void setupDatabase(berkeley.com.sleepycat.je.dbi.EnvironmentImpl, berkeley.com.sleepycat.je.Transaction, berkeley.com.sleepycat.je.Database, java.lang.String, berkeley.com.sleepycat.je.DatabaseConfig, boolean) throws berkeley.com.sleepycat.je.DatabaseNotFoundException, berkeley.com.sleepycat.je.DatabaseExistsException
    {
        berkeley.com.sleepycat.je.Environment this;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        berkeley.com.sleepycat.je.Transaction txn;
        berkeley.com.sleepycat.je.Database newDb;
        java.lang.String databaseName, $r6, $r13, $r19, $r25;
        berkeley.com.sleepycat.je.DatabaseConfig dbConfig;
        boolean isInternalDb, autoTxnIsReplicated, databaseExists, firstWriteHandle, $z0, $z1, $z2, operationOk#34, $z3, dbCreated#57, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        berkeley.com.sleepycat.je.txn.Locker locker;
        java.lang.Throwable l15, $r28;
        java.util.logging.Level $r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r9, $r10, $r11, $r12, $r16, $r17, $r18, $r21, $r22, $r23, $r24;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl database#32, $r26;
        berkeley.com.sleepycat.je.txn.HandleLocker handleLocker#36;
        berkeley.com.sleepycat.je.dbi.DbTree $r7, $r14, $r27, $r29;
        berkeley.com.sleepycat.je.DatabaseExistsException $r8;
        java.lang.IllegalArgumentException $r15;
        berkeley.com.sleepycat.je.DatabaseNotFoundException $r20;
        int $i0;

        this := @this: berkeley.com.sleepycat.je.Environment;

        envImpl := @parameter0: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        txn := @parameter1: berkeley.com.sleepycat.je.Transaction;

        newDb := @parameter2: berkeley.com.sleepycat.je.Database;

        databaseName := @parameter3: java.lang.String;

        dbConfig := @parameter4: berkeley.com.sleepycat.je.DatabaseConfig;

        isInternalDb := @parameter5: boolean;

        staticinvoke <berkeley.com.sleepycat.je.utilint.DatabaseUtil: void checkForNullParam(java.lang.Object,java.lang.String)>(databaseName, "databaseName");

        $r0 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Environment.open:  name=");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(databaseName);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" dbConfig=");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(dbConfig);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: void envLogMsg(java.util.logging.Level,berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String)>($r0, envImpl, $r6);

        $z0 = virtualinvoke dbConfig.<berkeley.com.sleepycat.je.DatabaseConfig: boolean getReplicated()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label01;

        $z1 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean isReplicated()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        autoTxnIsReplicated = $z2;

        virtualinvoke dbConfig.<berkeley.com.sleepycat.je.DatabaseConfig: void validateOnDbOpen(java.lang.String,boolean)>(databaseName, autoTxnIsReplicated);

        specialinvoke this.<berkeley.com.sleepycat.je.Environment: void validateDbConfigAgainstEnv(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.DatabaseConfig,java.lang.String,boolean)>(envImpl, dbConfig, databaseName, isInternalDb);

        virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void criticalEviction(boolean)>(0);

        database#32 = null;

        operationOk#34 = 0;

        handleLocker#36 = null;

        $z3 = virtualinvoke dbConfig.<berkeley.com.sleepycat.je.DatabaseConfig: boolean getTransactional()>();

        locker = staticinvoke <berkeley.com.sleepycat.je.txn.LockerFactory: berkeley.com.sleepycat.je.txn.Locker getWritableLocker(berkeley.com.sleepycat.je.Environment,berkeley.com.sleepycat.je.Transaction,boolean,boolean,boolean,berkeley.com.sleepycat.je.TransactionConfig)>(this, txn, isInternalDb, $z3, autoTxnIsReplicated, null);

     label03:
        handleLocker#36 = virtualinvoke newDb.<berkeley.com.sleepycat.je.Database: berkeley.com.sleepycat.je.txn.HandleLocker initHandleLocker(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.txn.Locker)>(envImpl, locker);

        $r7 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.DbTree getDbTree()>();

        database#32 = virtualinvoke $r7.<berkeley.com.sleepycat.je.dbi.DbTree: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDb(berkeley.com.sleepycat.je.txn.Locker,java.lang.String,berkeley.com.sleepycat.je.txn.HandleLocker,boolean)>(locker, databaseName, handleLocker#36, 0);

        dbCreated#57 = 0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(database#32);

        if database#32 == null goto label04;

        $z4 = virtualinvoke database#32.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isDeleted()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label04;

        $z5 = 1;

        goto label05;

     label04:
        $z5 = 0;

     label05:
        databaseExists = $z5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(databaseExists);

        if databaseExists == 0 goto label07;

        $z6 = virtualinvoke dbConfig.<berkeley.com.sleepycat.je.DatabaseConfig: boolean getAllowCreate()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label06;

        $z7 = virtualinvoke dbConfig.<berkeley.com.sleepycat.je.DatabaseConfig: boolean getExclusiveCreate()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 == 0 goto label06;

        $r8 = new berkeley.com.sleepycat.je.DatabaseExistsException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Database ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(databaseName);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already exists");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<berkeley.com.sleepycat.je.DatabaseExistsException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label06:
        virtualinvoke newDb.<berkeley.com.sleepycat.je.Database: void initExisting(berkeley.com.sleepycat.je.Environment,berkeley.com.sleepycat.je.txn.Locker,berkeley.com.sleepycat.je.dbi.DatabaseImpl,java.lang.String,berkeley.com.sleepycat.je.DatabaseConfig)>(this, locker, database#32, databaseName, dbConfig);

        goto label10;

     label07:
        $r14 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.DbTree getDbTree()>();

        virtualinvoke $r14.<berkeley.com.sleepycat.je.dbi.DbTree: void releaseDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(database#32);

        database#32 = null;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isInternalDb);

        if isInternalDb != 0 goto label08;

        $z8 = staticinvoke <berkeley.com.sleepycat.je.dbi.DbTree: boolean isReservedDbName(java.lang.String)>(databaseName);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 == 0 goto label08;

        $r15 = new java.lang.IllegalArgumentException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(databaseName);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is a reserved database name.");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r15;

     label08:
        $z9 = virtualinvoke dbConfig.<berkeley.com.sleepycat.je.DatabaseConfig: boolean getAllowCreate()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 != 0 goto label09;

        $r20 = new berkeley.com.sleepycat.je.DatabaseNotFoundException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Database ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(databaseName);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found.");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<berkeley.com.sleepycat.je.DatabaseNotFoundException: void <init>(java.lang.String)>($r25);

        throw $r20;

     label09:
        database#32 = virtualinvoke newDb.<berkeley.com.sleepycat.je.Database: berkeley.com.sleepycat.je.dbi.DatabaseImpl initNew(berkeley.com.sleepycat.je.Environment,berkeley.com.sleepycat.je.txn.Locker,java.lang.String,berkeley.com.sleepycat.je.DatabaseConfig)>(this, locker, databaseName, dbConfig);

        dbCreated#57 = 1;

     label10:
        operationOk#34 = 1;

        specialinvoke this.<berkeley.com.sleepycat.je.Environment: void addReferringHandle(berkeley.com.sleepycat.je.Database)>(newDb);

        virtualinvoke locker.<berkeley.com.sleepycat.je.txn.Locker: void addOpenedDatabase(berkeley.com.sleepycat.je.Database)>(newDb);

        $z10 = virtualinvoke newDb.<berkeley.com.sleepycat.je.Database: boolean isWritable()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z10);

        if $z10 == 0 goto label11;

        $r26 = virtualinvoke newDb.<berkeley.com.sleepycat.je.Database: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDbImpl()>();

        $i0 = virtualinvoke $r26.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: int noteWriteHandleOpen()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 1 goto label11;

        $z11 = 1;

        goto label12;

     label11:
        $z11 = 0;

     label12:
        firstWriteHandle = $z11;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dbCreated#57);

        if dbCreated#57 != 0 goto label13;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(firstWriteHandle);

        if firstWriteHandle == 0 goto label14;

     label13:
        staticinvoke <berkeley.com.sleepycat.je.dbi.TriggerManager: void runOpenTriggers(berkeley.com.sleepycat.je.txn.Locker,berkeley.com.sleepycat.je.Database,boolean)>(locker, newDb, dbCreated#57);

     label14:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(operationOk#34);

        if operationOk#34 != 0 goto label16;

        $r27 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.DbTree getDbTree()>();

        virtualinvoke $r27.<berkeley.com.sleepycat.je.dbi.DbTree: void releaseDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(database#32);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(handleLocker#36);

        if handleLocker#36 == null goto label15;

        virtualinvoke handleLocker#36.<berkeley.com.sleepycat.je.txn.HandleLocker: void operationEnd(boolean)>(0);

     label15:
        virtualinvoke newDb.<berkeley.com.sleepycat.je.Database: void removeReferringAssociations()>();

     label16:
        virtualinvoke locker.<berkeley.com.sleepycat.je.txn.Locker: void operationEnd(boolean)>(operationOk#34);

        goto label22;

     label17:
        $r28 := @caughtexception;

     label18:
        l15 = $r28;

     label19:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(operationOk#34);

        if operationOk#34 != 0 goto label21;

        $r29 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.DbTree getDbTree()>();

        virtualinvoke $r29.<berkeley.com.sleepycat.je.dbi.DbTree: void releaseDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(database#32);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(handleLocker#36);

        if handleLocker#36 == null goto label20;

        virtualinvoke handleLocker#36.<berkeley.com.sleepycat.je.txn.HandleLocker: void operationEnd(boolean)>(0);

     label20:
        virtualinvoke newDb.<berkeley.com.sleepycat.je.Database: void removeReferringAssociations()>();

     label21:
        virtualinvoke locker.<berkeley.com.sleepycat.je.txn.Locker: void operationEnd(boolean)>(operationOk#34);

        throw l15;

     label22:
        return;

        catch java.lang.Throwable from label03 to label14 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    private void validateDbConfigAgainstEnv(berkeley.com.sleepycat.je.dbi.EnvironmentImpl, berkeley.com.sleepycat.je.DatabaseConfig, java.lang.String, boolean) throws java.lang.IllegalArgumentException
    {
        berkeley.com.sleepycat.je.Environment this;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        berkeley.com.sleepycat.je.DatabaseConfig dbConfig;
        java.lang.String databaseName, $r5, $r11, $r17;
        boolean isInternalDb, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.IllegalArgumentException $r0, $r6, $r12;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r7, $r8, $r9, $r10, $r13, $r14, $r15, $r16;

        this := @this: berkeley.com.sleepycat.je.Environment;

        envImpl := @parameter0: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        dbConfig := @parameter1: berkeley.com.sleepycat.je.DatabaseConfig;

        databaseName := @parameter2: java.lang.String;

        isInternalDb := @parameter3: boolean;

        $z0 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean isReplicated()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke dbConfig.<berkeley.com.sleepycat.je.DatabaseConfig: boolean getReplicated()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label1;

        $z2 = virtualinvoke dbConfig.<berkeley.com.sleepycat.je.DatabaseConfig: boolean getReadOnly()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke dbConfig.<berkeley.com.sleepycat.je.DatabaseConfig: boolean getTransactional()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Read/Write Database instances for replicated database ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(databaseName);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be transactional.");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isInternalDb);

        if isInternalDb != 0 goto label2;

        $z4 = virtualinvoke dbConfig.<berkeley.com.sleepycat.je.DatabaseConfig: boolean getTransactional()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label2;

        $z5 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean isTransactional()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 != 0 goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to open Database ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(databaseName);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" transactionally, but parent Environment is not transactional");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label2:
        $z6 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean isReadOnly()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label3;

        $z7 = virtualinvoke dbConfig.<berkeley.com.sleepycat.je.DatabaseConfig: boolean getReadOnly()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 != 0 goto label3;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to open Database ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(databaseName);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as writable but parent Environment is read only ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r12;

     label3:
        return;
    }

    private void addReferringHandle(berkeley.com.sleepycat.je.Database)
    {
        berkeley.com.sleepycat.je.Environment this;
        berkeley.com.sleepycat.je.Database db;
        java.util.Map $r0;

        this := @this: berkeley.com.sleepycat.je.Environment;

        db := @parameter0: berkeley.com.sleepycat.je.Database;

        $r0 = this.<berkeley.com.sleepycat.je.Environment: java.util.Map referringDbs>;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(db, db);

        return;
    }

    public berkeley.com.sleepycat.je.Transaction getThreadTransaction() throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.Environment this;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        java.lang.Error E, $r2;
        berkeley.com.sleepycat.je.txn.TxnManager $r0;
        berkeley.com.sleepycat.je.Transaction $r1;

        this := @this: berkeley.com.sleepycat.je.Environment;

        envImpl = virtualinvoke this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.dbi.EnvironmentImpl checkOpen()>();

     label1:
        $r0 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.txn.TxnManager getTxnManager()>();

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.Transaction getTxnForThread()>();

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        E = $r2;

        virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void invalidate(java.lang.Error)>(E);

        throw E;

        catch java.lang.Error from label1 to label2 with label3;
    }

    berkeley.com.sleepycat.je.TransactionConfig getDefaultTxnConfig()
    {
        berkeley.com.sleepycat.je.Environment this;
        berkeley.com.sleepycat.je.TransactionConfig $r0;

        this := @this: berkeley.com.sleepycat.je.Environment;

        $r0 = this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.TransactionConfig defaultTxnConfig>;

        return $r0;
    }

    void removeReferringHandle(berkeley.com.sleepycat.je.Database)
    {
        berkeley.com.sleepycat.je.Environment this;
        berkeley.com.sleepycat.je.Database db;
        java.util.Map $r0;

        this := @this: berkeley.com.sleepycat.je.Environment;

        db := @parameter0: berkeley.com.sleepycat.je.Database;

        $r0 = this.<berkeley.com.sleepycat.je.Environment: java.util.Map referringDbs>;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>(db);

        return;
    }

    void invalidate(java.lang.Error)
    {
        berkeley.com.sleepycat.je.Environment this;
        java.lang.Error e;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;

        this := @this: berkeley.com.sleepycat.je.Environment;

        e := @parameter0: java.lang.Error;

        envImpl = this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.dbi.EnvironmentImpl environmentImpl>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(envImpl);

        if envImpl != null goto label1;

        return;

     label1:
        virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void invalidate(java.lang.Error)>(e);

        return;
    }

    public void removeDatabase(berkeley.com.sleepycat.je.Transaction, java.lang.String) throws berkeley.com.sleepycat.je.DatabaseNotFoundException
    {
        berkeley.com.sleepycat.je.Environment this;
        berkeley.com.sleepycat.je.Transaction txn;
        java.lang.String databaseName;
        berkeley.com.sleepycat.je.Environment$1 $r0;

        this := @this: berkeley.com.sleepycat.je.Environment;

        txn := @parameter0: berkeley.com.sleepycat.je.Transaction;

        databaseName := @parameter1: java.lang.String;

        staticinvoke <berkeley.com.sleepycat.je.utilint.DatabaseUtil: void checkForNullParam(java.lang.Object,java.lang.String)>(databaseName, "databaseName");

        $r0 = new berkeley.com.sleepycat.je.Environment$1;

        specialinvoke $r0.<berkeley.com.sleepycat.je.Environment$1: void <init>(berkeley.com.sleepycat.je.Environment,berkeley.com.sleepycat.je.Transaction,java.lang.String)>(this, txn, databaseName);

        virtualinvoke $r0.<berkeley.com.sleepycat.je.Environment$1: java.lang.Object run()>();

        return;
    }

    static void access$000(berkeley.com.sleepycat.je.Environment, berkeley.com.sleepycat.je.dbi.EnvironmentImpl)
    {
        berkeley.com.sleepycat.je.Environment x0;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl x1;

        x0 := @parameter0: berkeley.com.sleepycat.je.Environment;

        x1 := @parameter1: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        specialinvoke x0.<berkeley.com.sleepycat.je.Environment: void checkWritable(berkeley.com.sleepycat.je.dbi.EnvironmentImpl)>(x1);

        return;
    }

    private void checkWritable(berkeley.com.sleepycat.je.dbi.EnvironmentImpl)
    {
        berkeley.com.sleepycat.je.Environment this;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        boolean $z0;
        java.lang.UnsupportedOperationException $r0;

        this := @this: berkeley.com.sleepycat.je.Environment;

        envImpl := @parameter0: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        $z0 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean isReadOnly()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Environment is Read-Only.");

        throw $r0;

     label1:
        return;
    }

    public void renameDatabase(berkeley.com.sleepycat.je.Transaction, java.lang.String, java.lang.String) throws berkeley.com.sleepycat.je.DatabaseNotFoundException
    {
        berkeley.com.sleepycat.je.Environment this;
        berkeley.com.sleepycat.je.Transaction txn;
        java.lang.String databaseName, newName;
        berkeley.com.sleepycat.je.Environment$2 $r0;

        this := @this: berkeley.com.sleepycat.je.Environment;

        txn := @parameter0: berkeley.com.sleepycat.je.Transaction;

        databaseName := @parameter1: java.lang.String;

        newName := @parameter2: java.lang.String;

        staticinvoke <berkeley.com.sleepycat.je.utilint.DatabaseUtil: void checkForNullParam(java.lang.Object,java.lang.String)>(databaseName, "databaseName");

        staticinvoke <berkeley.com.sleepycat.je.utilint.DatabaseUtil: void checkForNullParam(java.lang.Object,java.lang.String)>(newName, "newName");

        $r0 = new berkeley.com.sleepycat.je.Environment$2;

        specialinvoke $r0.<berkeley.com.sleepycat.je.Environment$2: void <init>(berkeley.com.sleepycat.je.Environment,berkeley.com.sleepycat.je.Transaction,java.lang.String,java.lang.String)>(this, txn, databaseName, newName);

        virtualinvoke $r0.<berkeley.com.sleepycat.je.Environment$2: java.lang.Object run()>();

        return;
    }

    public berkeley.com.sleepycat.je.Transaction beginTransaction(berkeley.com.sleepycat.je.Transaction, berkeley.com.sleepycat.je.TransactionConfig) throws berkeley.com.sleepycat.je.DatabaseException, java.lang.IllegalArgumentException
    {
        berkeley.com.sleepycat.je.Environment this;
        berkeley.com.sleepycat.je.Transaction parent, $r0;
        berkeley.com.sleepycat.je.TransactionConfig txnConfig;
        java.lang.Error E, $r1;

        this := @this: berkeley.com.sleepycat.je.Environment;

        parent := @parameter0: berkeley.com.sleepycat.je.Transaction;

        txnConfig := @parameter1: berkeley.com.sleepycat.je.TransactionConfig;

     label1:
        $r0 = specialinvoke this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.Transaction beginTransactionInternal(berkeley.com.sleepycat.je.Transaction,berkeley.com.sleepycat.je.TransactionConfig,boolean)>(parent, txnConfig, 0);

     label2:
        return $r0;

     label3:
        $r1 := @caughtexception;

        E = $r1;

        virtualinvoke this.<berkeley.com.sleepycat.je.Environment: void invalidate(java.lang.Error)>(E);

        throw E;

        catch java.lang.Error from label1 to label2 with label3;
    }

    private berkeley.com.sleepycat.je.Transaction beginTransactionInternal(berkeley.com.sleepycat.je.Transaction, berkeley.com.sleepycat.je.TransactionConfig, boolean) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.Environment this;
        berkeley.com.sleepycat.je.Transaction parent, txn, $r23;
        berkeley.com.sleepycat.je.TransactionConfig txnConfig, useConfig#16, $r2, $r3, $r4, $r7, $r10, $r13, $r16, $r19, $r21;
        boolean isInternalTxn, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        berkeley.com.sleepycat.je.txn.Txn internalTxn;
        java.lang.IllegalArgumentException $r0;
        java.lang.UnsupportedOperationException $r1;
        berkeley.com.sleepycat.je.Durability $r8, $r9, $r11;
        berkeley.com.sleepycat.je.ReplicaConsistencyPolicy $r14, $r15, $r17;

        this := @this: berkeley.com.sleepycat.je.Environment;

        parent := @parameter0: berkeley.com.sleepycat.je.Transaction;

        txnConfig := @parameter1: berkeley.com.sleepycat.je.TransactionConfig;

        isInternalTxn := @parameter2: boolean;

        envImpl = virtualinvoke this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.dbi.EnvironmentImpl checkOpen()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(parent);

        if parent == null goto label01;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parent txn is non-null. Nested transactions are not supported.");

        throw $r0;

     label01:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isInternalTxn);

        if isInternalTxn != 0 goto label02;

        $z0 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean isTransactional()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label02;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Transactions can not be used in a non-transactional environment");

        throw $r1;

     label02:
        specialinvoke this.<berkeley.com.sleepycat.je.Environment: void checkTxnConfig(berkeley.com.sleepycat.je.TransactionConfig)>(txnConfig);

        useConfig#16 = null;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(txnConfig);

        if txnConfig != null goto label03;

        useConfig#16 = this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.TransactionConfig defaultTxnConfig>;

        goto label15;

     label03:
        $r2 = this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.TransactionConfig defaultTxnConfig>;

        $z1 = virtualinvoke $r2.<berkeley.com.sleepycat.je.TransactionConfig: boolean getNoSync()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label04;

        $r3 = this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.TransactionConfig defaultTxnConfig>;

        $z2 = virtualinvoke $r3.<berkeley.com.sleepycat.je.TransactionConfig: boolean getWriteNoSync()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label06;

     label04:
        $z3 = virtualinvoke txnConfig.<berkeley.com.sleepycat.je.TransactionConfig: boolean getNoSync()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label06;

        $z4 = virtualinvoke txnConfig.<berkeley.com.sleepycat.je.TransactionConfig: boolean getSync()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label06;

        $z5 = virtualinvoke txnConfig.<berkeley.com.sleepycat.je.TransactionConfig: boolean getWriteNoSync()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 != 0 goto label06;

        useConfig#16 = virtualinvoke txnConfig.<berkeley.com.sleepycat.je.TransactionConfig: berkeley.com.sleepycat.je.TransactionConfig clone()>();

        $r4 = this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.TransactionConfig defaultTxnConfig>;

        $z6 = virtualinvoke $r4.<berkeley.com.sleepycat.je.TransactionConfig: boolean getWriteNoSync()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label05;

        virtualinvoke useConfig#16.<berkeley.com.sleepycat.je.TransactionConfig: berkeley.com.sleepycat.je.TransactionConfig setWriteNoSync(boolean)>(1);

        goto label06;

     label05:
        virtualinvoke useConfig#16.<berkeley.com.sleepycat.je.TransactionConfig: berkeley.com.sleepycat.je.TransactionConfig setNoSync(boolean)>(1);

     label06:
        $r7 = this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.TransactionConfig defaultTxnConfig>;

        $r8 = virtualinvoke $r7.<berkeley.com.sleepycat.je.TransactionConfig: berkeley.com.sleepycat.je.Durability getDurability()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r8);

        if $r8 == null goto label08;

        $r9 = virtualinvoke txnConfig.<berkeley.com.sleepycat.je.TransactionConfig: berkeley.com.sleepycat.je.Durability getDurability()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r9);

        if $r9 != null goto label08;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(useConfig#16);

        if useConfig#16 != null goto label07;

        useConfig#16 = virtualinvoke txnConfig.<berkeley.com.sleepycat.je.TransactionConfig: berkeley.com.sleepycat.je.TransactionConfig clone()>();

     label07:
        $r10 = this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.TransactionConfig defaultTxnConfig>;

        $r11 = virtualinvoke $r10.<berkeley.com.sleepycat.je.TransactionConfig: berkeley.com.sleepycat.je.Durability getDurability()>();

        virtualinvoke useConfig#16.<berkeley.com.sleepycat.je.TransactionConfig: berkeley.com.sleepycat.je.TransactionConfig setDurability(berkeley.com.sleepycat.je.Durability)>($r11);

     label08:
        $r13 = this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.TransactionConfig defaultTxnConfig>;

        $r14 = virtualinvoke $r13.<berkeley.com.sleepycat.je.TransactionConfig: berkeley.com.sleepycat.je.ReplicaConsistencyPolicy getConsistencyPolicy()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r14);

        if $r14 == null goto label10;

        $r15 = virtualinvoke txnConfig.<berkeley.com.sleepycat.je.TransactionConfig: berkeley.com.sleepycat.je.ReplicaConsistencyPolicy getConsistencyPolicy()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r15);

        if $r15 != null goto label10;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(useConfig#16);

        if useConfig#16 != null goto label09;

        useConfig#16 = virtualinvoke txnConfig.<berkeley.com.sleepycat.je.TransactionConfig: berkeley.com.sleepycat.je.TransactionConfig clone()>();

     label09:
        $r16 = this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.TransactionConfig defaultTxnConfig>;

        $r17 = virtualinvoke $r16.<berkeley.com.sleepycat.je.TransactionConfig: berkeley.com.sleepycat.je.ReplicaConsistencyPolicy getConsistencyPolicy()>();

        virtualinvoke useConfig#16.<berkeley.com.sleepycat.je.TransactionConfig: berkeley.com.sleepycat.je.TransactionConfig setConsistencyPolicy(berkeley.com.sleepycat.je.ReplicaConsistencyPolicy)>($r17);

     label10:
        $z7 = virtualinvoke txnConfig.<berkeley.com.sleepycat.je.TransactionConfig: boolean getSerializableIsolation()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 != 0 goto label14;

        $z8 = virtualinvoke txnConfig.<berkeley.com.sleepycat.je.TransactionConfig: boolean getReadCommitted()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 != 0 goto label14;

        $z9 = virtualinvoke txnConfig.<berkeley.com.sleepycat.je.TransactionConfig: boolean getReadUncommitted()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 != 0 goto label14;

        $r19 = this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.TransactionConfig defaultTxnConfig>;

        $z10 = virtualinvoke $r19.<berkeley.com.sleepycat.je.TransactionConfig: boolean getSerializableIsolation()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z10);

        if $z10 == 0 goto label12;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(useConfig#16);

        if useConfig#16 != null goto label11;

        useConfig#16 = virtualinvoke txnConfig.<berkeley.com.sleepycat.je.TransactionConfig: berkeley.com.sleepycat.je.TransactionConfig clone()>();

     label11:
        virtualinvoke useConfig#16.<berkeley.com.sleepycat.je.TransactionConfig: berkeley.com.sleepycat.je.TransactionConfig setSerializableIsolation(boolean)>(1);

        goto label14;

     label12:
        $r21 = this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.TransactionConfig defaultTxnConfig>;

        $z11 = virtualinvoke $r21.<berkeley.com.sleepycat.je.TransactionConfig: boolean getReadCommitted()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z11);

        if $z11 == 0 goto label14;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(useConfig#16);

        if useConfig#16 != null goto label13;

        useConfig#16 = virtualinvoke txnConfig.<berkeley.com.sleepycat.je.TransactionConfig: berkeley.com.sleepycat.je.TransactionConfig clone()>();

     label13:
        virtualinvoke useConfig#16.<berkeley.com.sleepycat.je.TransactionConfig: berkeley.com.sleepycat.je.TransactionConfig setReadCommitted(boolean)>(1);

     label14:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(useConfig#16);

        if useConfig#16 != null goto label15;

        useConfig#16 = txnConfig;

     label15:
        internalTxn = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.txn.Txn txnBegin(berkeley.com.sleepycat.je.Transaction,berkeley.com.sleepycat.je.TransactionConfig)>(parent, useConfig#16);

        $r23 = new berkeley.com.sleepycat.je.Transaction;

        specialinvoke $r23.<berkeley.com.sleepycat.je.Transaction: void <init>(berkeley.com.sleepycat.je.Environment,berkeley.com.sleepycat.je.txn.Txn)>(this, internalTxn);

        txn = $r23;

        specialinvoke this.<berkeley.com.sleepycat.je.Environment: void addReferringHandle(berkeley.com.sleepycat.je.Transaction)>(txn);

        return txn;
    }

    private void checkTxnConfig(berkeley.com.sleepycat.je.TransactionConfig) throws java.lang.IllegalArgumentException
    {
        berkeley.com.sleepycat.je.Environment this;
        berkeley.com.sleepycat.je.TransactionConfig txnConfig, $r2, $r3, $r4, $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.lang.IllegalArgumentException $r0, $r5, $r8;
        berkeley.com.sleepycat.je.Durability $r1, $r7;

        this := @this: berkeley.com.sleepycat.je.Environment;

        txnConfig := @parameter0: berkeley.com.sleepycat.je.TransactionConfig;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(txnConfig);

        if txnConfig != null goto label1;

        return;

     label1:
        $z0 = virtualinvoke txnConfig.<berkeley.com.sleepycat.je.TransactionConfig: boolean getSerializableIsolation()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke txnConfig.<berkeley.com.sleepycat.je.TransactionConfig: boolean getReadUncommitted()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label4;

     label2:
        $z2 = virtualinvoke txnConfig.<berkeley.com.sleepycat.je.TransactionConfig: boolean getSerializableIsolation()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label3;

        $z3 = virtualinvoke txnConfig.<berkeley.com.sleepycat.je.TransactionConfig: boolean getReadCommitted()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label4;

     label3:
        $z4 = virtualinvoke txnConfig.<berkeley.com.sleepycat.je.TransactionConfig: boolean getReadUncommitted()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label5;

        $z5 = virtualinvoke txnConfig.<berkeley.com.sleepycat.je.TransactionConfig: boolean getReadCommitted()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label5;

     label4:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Only one may be specified: SerializableIsolation, ReadCommitted or ReadUncommitted");

        throw $r0;

     label5:
        $r1 = virtualinvoke txnConfig.<berkeley.com.sleepycat.je.TransactionConfig: berkeley.com.sleepycat.je.Durability getDurability()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 == null goto label7;

        $r2 = this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.TransactionConfig defaultTxnConfig>;

        $z6 = virtualinvoke $r2.<berkeley.com.sleepycat.je.TransactionConfig: boolean getSync()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 != 0 goto label6;

        $r3 = this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.TransactionConfig defaultTxnConfig>;

        $z7 = virtualinvoke $r3.<berkeley.com.sleepycat.je.TransactionConfig: boolean getNoSync()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 != 0 goto label6;

        $r4 = this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.TransactionConfig defaultTxnConfig>;

        $z8 = virtualinvoke $r4.<berkeley.com.sleepycat.je.TransactionConfig: boolean getWriteNoSync()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 == 0 goto label7;

     label6:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Mixed use of deprecated durability API for the Environment with the new durability API for TransactionConfig.setDurability()");

        throw $r5;

     label7:
        $r6 = this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.TransactionConfig defaultTxnConfig>;

        $r7 = virtualinvoke $r6.<berkeley.com.sleepycat.je.TransactionConfig: berkeley.com.sleepycat.je.Durability getDurability()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r7);

        if $r7 == null goto label9;

        $z9 = virtualinvoke txnConfig.<berkeley.com.sleepycat.je.TransactionConfig: boolean getSync()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 != 0 goto label8;

        $z10 = virtualinvoke txnConfig.<berkeley.com.sleepycat.je.TransactionConfig: boolean getNoSync()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z10);

        if $z10 != 0 goto label8;

        $z11 = virtualinvoke txnConfig.<berkeley.com.sleepycat.je.TransactionConfig: boolean getWriteNoSync()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z11);

        if $z11 == 0 goto label9;

     label8:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Mixed use of new durability API for the Environment with the deprecated durability API for TransactionConfig.");

        throw $r8;

     label9:
        return;
    }

    private void addReferringHandle(berkeley.com.sleepycat.je.Transaction)
    {
        berkeley.com.sleepycat.je.Environment this;
        berkeley.com.sleepycat.je.Transaction txn;
        java.util.Map $r0;

        this := @this: berkeley.com.sleepycat.je.Environment;

        txn := @parameter0: berkeley.com.sleepycat.je.Transaction;

        $r0 = this.<berkeley.com.sleepycat.je.Environment: java.util.Map referringDbTxns>;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(txn, txn);

        return;
    }

    void removeReferringHandle(berkeley.com.sleepycat.je.Transaction)
    {
        berkeley.com.sleepycat.je.Environment this;
        berkeley.com.sleepycat.je.Transaction txn;
        java.util.Map $r0;

        this := @this: berkeley.com.sleepycat.je.Environment;

        txn := @parameter0: berkeley.com.sleepycat.je.Transaction;

        $r0 = this.<berkeley.com.sleepycat.je.Environment: java.util.Map referringDbTxns>;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>(txn);

        return;
    }

    public synchronized berkeley.com.sleepycat.je.SecondaryDatabase openSecondaryDatabase(berkeley.com.sleepycat.je.Transaction, java.lang.String, berkeley.com.sleepycat.je.Database, berkeley.com.sleepycat.je.SecondaryConfig) throws berkeley.com.sleepycat.je.DatabaseNotFoundException, berkeley.com.sleepycat.je.DatabaseExistsException, berkeley.com.sleepycat.je.DatabaseException, java.lang.IllegalArgumentException, java.lang.IllegalStateException
    {
        berkeley.com.sleepycat.je.Environment this;
        berkeley.com.sleepycat.je.Transaction txn;
        java.lang.String databaseName;
        berkeley.com.sleepycat.je.Database primaryDatabase;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        java.lang.InterruptedException e, $r2;
        berkeley.com.sleepycat.je.SecondaryDatabase db, l7, $r4;
        java.lang.Error E, $r7;
        java.lang.Throwable l8, $r8;
        berkeley.com.sleepycat.je.SecondaryConfig dbConfig#1;
        java.util.concurrent.locks.ReentrantReadWriteLock $r0, $r5, $r9;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r1, $r6, $r10;
        berkeley.com.sleepycat.je.ThreadInterruptedException $r3;

        this := @this: berkeley.com.sleepycat.je.Environment;

        txn := @parameter0: berkeley.com.sleepycat.je.Transaction;

        databaseName := @parameter1: java.lang.String;

        primaryDatabase := @parameter2: berkeley.com.sleepycat.je.Database;

        dbConfig#1 := @parameter3: berkeley.com.sleepycat.je.SecondaryConfig;

        envImpl = virtualinvoke this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.dbi.EnvironmentImpl checkOpen()>();

     label01:
        $r0 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: java.util.concurrent.locks.ReentrantReadWriteLock getSecondaryAssociationLock()>();

        $r1 = virtualinvoke $r0.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lockInterruptibly()>();

     label02:
        goto label04;

     label03:
        $r2 := @caughtexception;

        e = $r2;

        $r3 = new berkeley.com.sleepycat.je.ThreadInterruptedException;

        specialinvoke $r3.<berkeley.com.sleepycat.je.ThreadInterruptedException: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.Throwable)>(envImpl, e);

        throw $r3;

     label04:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dbConfig#1);

        if dbConfig#1 != null goto label05;

        dbConfig#1 = <berkeley.com.sleepycat.je.SecondaryConfig: berkeley.com.sleepycat.je.SecondaryConfig DEFAULT>;

     label05:
        $r4 = new berkeley.com.sleepycat.je.SecondaryDatabase;

        specialinvoke $r4.<berkeley.com.sleepycat.je.SecondaryDatabase: void <init>(berkeley.com.sleepycat.je.Environment,berkeley.com.sleepycat.je.SecondaryConfig,berkeley.com.sleepycat.je.Database)>(this, dbConfig#1, primaryDatabase);

        db = $r4;

        specialinvoke this.<berkeley.com.sleepycat.je.Environment: void setupDatabase(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.Transaction,berkeley.com.sleepycat.je.Database,java.lang.String,berkeley.com.sleepycat.je.DatabaseConfig,boolean)>(envImpl, txn, db, databaseName, dbConfig#1, 0);

        l7 = db;

     label06:
        $r5 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: java.util.concurrent.locks.ReentrantReadWriteLock getSecondaryAssociationLock()>();

        $r6 = virtualinvoke $r5.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r6.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        return l7;

     label07:
        $r7 := @caughtexception;

     label08:
        E = $r7;

        virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void invalidate(java.lang.Error)>(E);

        throw E;

     label09:
        $r8 := @caughtexception;

        l8 = $r8;

     label10:
        $r9 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: java.util.concurrent.locks.ReentrantReadWriteLock getSecondaryAssociationLock()>();

        $r10 = virtualinvoke $r9.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r10.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        throw l8;

        catch java.lang.InterruptedException from label01 to label02 with label03;
        catch java.lang.Error from label04 to label06 with label07;
        catch java.lang.Throwable from label04 to label06 with label09;
        catch java.lang.Throwable from label08 to label10 with label09;
    }

    public synchronized void close() throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.Environment this;
        java.util.Iterator l1, l4;
        berkeley.com.sleepycat.je.Database db, db;
        java.lang.Throwable l3, l6, $r7, $r21;
        java.lang.StringBuilder errors, $r12;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0, $r1, $r2, $r13;
        boolean $z0, $z1, $z2;
        java.util.Map $r3, $r8;
        java.util.Set $r4, $r9;
        java.lang.Object $r5, $r10;
        berkeley.com.sleepycat.je.Database$DbState $r6, $r11;
        berkeley.com.sleepycat.je.DatabaseException $r14, e#43;
        java.lang.String $r15, $r18, $r20;
        java.lang.RuntimeException $r16, e#49;
        int $i0, $i1;
        java.lang.IllegalStateException $r17, $r19;

        this := @this: berkeley.com.sleepycat.je.Environment;

        $r0 = this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.dbi.EnvironmentImpl environmentImpl>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label01;

        return;

     label01:
        $r1 = this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.dbi.EnvironmentImpl environmentImpl>;

        $z0 = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean isValid()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label10;

     label02:
        $r2 = this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.dbi.EnvironmentImpl environmentImpl>;

        virtualinvoke $r2.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void closeAfterInvalid()>();

     label03:
        virtualinvoke this.<berkeley.com.sleepycat.je.Environment: void clearEnvImpl()>();

        $r3 = this.<berkeley.com.sleepycat.je.Environment: java.util.Map referringDbs>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        l1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z1 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label05;

        $r5 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>();

        db = (berkeley.com.sleepycat.je.Database) $r5;

        $r6 = <berkeley.com.sleepycat.je.Database$DbState: berkeley.com.sleepycat.je.Database$DbState CLOSED>;

        virtualinvoke db.<berkeley.com.sleepycat.je.Database: void minimalClose(berkeley.com.sleepycat.je.Database$DbState,berkeley.com.sleepycat.je.OperationFailureException)>($r6, null);

        goto label04;

     label05:
        goto label09;

     label06:
        $r7 := @caughtexception;

        l3 = $r7;

        virtualinvoke this.<berkeley.com.sleepycat.je.Environment: void clearEnvImpl()>();

        $r8 = this.<berkeley.com.sleepycat.je.Environment: java.util.Map referringDbs>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set keySet()>();

        l4 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $z2 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label08;

        $r10 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        db = (berkeley.com.sleepycat.je.Database) $r10;

        $r11 = <berkeley.com.sleepycat.je.Database$DbState: berkeley.com.sleepycat.je.Database$DbState CLOSED>;

        virtualinvoke db.<berkeley.com.sleepycat.je.Database: void minimalClose(berkeley.com.sleepycat.je.Database$DbState,berkeley.com.sleepycat.je.OperationFailureException)>($r11, null);

        goto label07;

     label08:
        throw l3;

     label09:
        return;

     label10:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        errors = $r12;

     label11:
        specialinvoke this.<berkeley.com.sleepycat.je.Environment: void checkForCloseErrors(java.lang.StringBuilder)>(errors);

     label12:
        $r13 = this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.dbi.EnvironmentImpl environmentImpl>;

        virtualinvoke $r13.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void close()>();

     label13:
        goto label17;

     label14:
        $r14 := @caughtexception;

        e#43 = $r14;

        $r15 = virtualinvoke errors.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke e#43.<berkeley.com.sleepycat.je.DatabaseException: void addErrorMessage(java.lang.String)>($r15);

        throw e#43;

     label15:
        $r16 := @caughtexception;

        e#49 = $r16;

        $i0 = virtualinvoke errors.<java.lang.StringBuilder: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label16;

        $r17 = new java.lang.IllegalStateException;

        $r18 = virtualinvoke errors.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r18, e#49);

        throw $r17;

     label16:
        throw e#49;

     label17:
        $i1 = virtualinvoke errors.<java.lang.StringBuilder: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 0 goto label18;

        $r19 = new java.lang.IllegalStateException;

        $r20 = virtualinvoke errors.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r20);

        throw $r19;

     label18:
        virtualinvoke this.<berkeley.com.sleepycat.je.Environment: void clearEnvImpl()>();

        goto label22;

     label19:
        $r21 := @caughtexception;

     label20:
        l6 = $r21;

     label21:
        virtualinvoke this.<berkeley.com.sleepycat.je.Environment: void clearEnvImpl()>();

        throw l6;

     label22:
        return;

        catch java.lang.Throwable from label02 to label03 with label06;
        catch berkeley.com.sleepycat.je.DatabaseException from label12 to label13 with label14;
        catch java.lang.RuntimeException from label12 to label13 with label15;
        catch java.lang.Throwable from label11 to label18 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
    }

    void clearEnvImpl()
    {
        berkeley.com.sleepycat.je.Environment this;

        this := @this: berkeley.com.sleepycat.je.Environment;

        this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.dbi.EnvironmentImpl environmentImpl> = null;

        return;
    }

    private void checkForCloseErrors(java.lang.StringBuilder)
    {
        berkeley.com.sleepycat.je.Environment this;
        java.lang.StringBuilder errors;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.Environment;

        errors := @parameter0: java.lang.StringBuilder;

        specialinvoke this.<berkeley.com.sleepycat.je.Environment: void checkOpenDbs(java.lang.StringBuilder)>(errors);

        specialinvoke this.<berkeley.com.sleepycat.je.Environment: void checkOpenTxns(java.lang.StringBuilder)>(errors);

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.Environment: boolean isInternalHandle()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        specialinvoke this.<berkeley.com.sleepycat.je.Environment: void checkOpenXATransactions(java.lang.StringBuilder)>(errors);

     label1:
        return;
    }

    private void checkOpenDbs(java.lang.StringBuilder)
    {
        berkeley.com.sleepycat.je.Environment this;
        java.lang.StringBuilder errors, $r6, $r14, $r17;
        java.util.Iterator l3;
        berkeley.com.sleepycat.je.Database db;
        java.lang.RuntimeException e, $r8;
        java.util.Map $r0, $r1;
        boolean $z0, $z1, $z2, $z3;
        int nOpenUserDbs#5;
        java.util.Set $r2;
        java.lang.Object $r3;
        java.lang.String dbName#16, $r13;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r4;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r9;

        this := @this: berkeley.com.sleepycat.je.Environment;

        errors := @parameter0: java.lang.StringBuilder;

        $r0 = this.<berkeley.com.sleepycat.je.Environment: java.util.Map referringDbs>;

        $z0 = interfaceinvoke $r0.<java.util.Map: boolean isEmpty()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label01;

        return;

     label01:
        nOpenUserDbs#5 = 0;

        $r1 = this.<berkeley.com.sleepycat.je.Environment: java.util.Map referringDbs>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        l3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label09;

        $r3 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        db = (berkeley.com.sleepycat.je.Database) $r3;

        dbName#16 = "";

     label03:
        dbName#16 = virtualinvoke db.<berkeley.com.sleepycat.je.Database: java.lang.String getDebugName()>();

        $r4 = virtualinvoke db.<berkeley.com.sleepycat.je.Database: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDbImpl()>();

        $z2 = virtualinvoke $r4.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isInternalDb()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label04;

        nOpenUserDbs#5 = nOpenUserDbs#5 + 1;

        virtualinvoke errors.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unclosed Database: ");

        $r6 = virtualinvoke errors.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(dbName#16);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label04:
        virtualinvoke db.<berkeley.com.sleepycat.je.Database: void close()>();

     label05:
        goto label08;

     label06:
        $r8 := @caughtexception;

        e = $r8;

        $r9 = this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.dbi.EnvironmentImpl environmentImpl>;

        $z3 = virtualinvoke $r9.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean isValid()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label07;

        throw e;

     label07:
        virtualinvoke errors.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nWhile closing Database ");

        virtualinvoke errors.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(dbName#16);

        virtualinvoke errors.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" encountered exception: ");

        $r13 = staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: java.lang.String getStackTrace(java.lang.Throwable)>(e);

        $r14 = virtualinvoke errors.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label08:
        goto label02;

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(nOpenUserDbs#5);

        if nOpenUserDbs#5 <= 0 goto label10;

        virtualinvoke errors.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Databases left open: ");

        $r17 = virtualinvoke errors.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(nOpenUserDbs#5);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label10:
        return;

        catch java.lang.RuntimeException from label03 to label05 with label06;
    }

    private void checkOpenTxns(java.lang.StringBuilder)
    {
        berkeley.com.sleepycat.je.Environment this;
        java.lang.StringBuilder errors, $r13, $r14, $r15, $r23;
        int nTxns, $i0;
        java.util.Iterator l3;
        berkeley.com.sleepycat.je.Transaction txn;
        java.lang.RuntimeException e, $r18;
        java.util.Map $r0, $r1, $r10;
        java.util.Set $r11;
        boolean $z0, $z1;
        java.lang.Object $r12;
        java.lang.String $r16;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r19;
        long $l1;

        this := @this: berkeley.com.sleepycat.je.Environment;

        errors := @parameter0: java.lang.StringBuilder;

        $r0 = this.<berkeley.com.sleepycat.je.Environment: java.util.Map referringDbTxns>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label01;

        $i0 = 0;

        goto label02;

     label01:
        $r1 = this.<berkeley.com.sleepycat.je.Environment: java.util.Map referringDbTxns>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

     label02:
        nTxns = $i0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(nTxns);

        if nTxns != 0 goto label03;

        return;

     label03:
        virtualinvoke errors.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("There ");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(nTxns);

        if nTxns != 1 goto label04;

        virtualinvoke errors.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("is 1 existing transaction opened");

        virtualinvoke errors.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" against the Environment.\n");

        goto label05;

     label04:
        virtualinvoke errors.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("are ");

        virtualinvoke errors.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(nTxns);

        virtualinvoke errors.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" existing transactions opened against");

        virtualinvoke errors.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" the Environment.\n");

     label05:
        virtualinvoke errors.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Aborting open transactions ...\n");

        $r10 = this.<berkeley.com.sleepycat.je.Environment: java.util.Map referringDbTxns>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.util.Set keySet()>();

        l3 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label12;

        $r12 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        txn = (berkeley.com.sleepycat.je.Transaction) $r12;

     label07:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("aborting ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(txn);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke errors.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        virtualinvoke txn.<berkeley.com.sleepycat.je.Transaction: void abort()>();

     label08:
        goto label11;

     label09:
        $r18 := @caughtexception;

        e = $r18;

        $r19 = this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.dbi.EnvironmentImpl environmentImpl>;

        $z1 = virtualinvoke $r19.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean isValid()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label10;

        throw e;

     label10:
        virtualinvoke errors.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nWhile aborting transaction ");

        $l1 = virtualinvoke txn.<berkeley.com.sleepycat.je.Transaction: long getId()>();

        virtualinvoke errors.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        virtualinvoke errors.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" encountered exception: ");

        $r23 = virtualinvoke errors.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(e);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label11:
        goto label06;

     label12:
        return;

        catch java.lang.RuntimeException from label07 to label08 with label09;
    }

    protected boolean isInternalHandle()
    {
        berkeley.com.sleepycat.je.Environment this;

        this := @this: berkeley.com.sleepycat.je.Environment;

        return 0;
    }

    private void checkOpenXATransactions(java.lang.StringBuilder)
    {
        berkeley.com.sleepycat.je.Environment this;
        java.lang.StringBuilder errors;
        javax.transaction.xa.Xid[] openXids;
        int nXATxns, $i0;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0;
        berkeley.com.sleepycat.je.txn.TxnManager $r1;

        this := @this: berkeley.com.sleepycat.je.Environment;

        errors := @parameter0: java.lang.StringBuilder;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getNonNullEnvImpl()>();

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.txn.TxnManager getTxnManager()>();

        openXids = virtualinvoke $r1.<berkeley.com.sleepycat.je.txn.TxnManager: javax.transaction.xa.Xid[] XARecover()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(openXids);

        if openXids == null goto label3;

        $i0 = lengthof openXids;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label3;

        virtualinvoke errors.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("There ");

        nXATxns = lengthof openXids;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(nXATxns);

        if nXATxns != 1 goto label1;

        virtualinvoke errors.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("is 1 existing XA transaction opened");

        virtualinvoke errors.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in the Environment.\n");

        virtualinvoke errors.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("It");

        goto label2;

     label1:
        virtualinvoke errors.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("are ");

        virtualinvoke errors.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(nXATxns);

        virtualinvoke errors.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" existing transactions opened in");

        virtualinvoke errors.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" the Environment.\n");

        virtualinvoke errors.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("They");

     label2:
        virtualinvoke errors.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" will be left open ...\n");

     label3:
        return;
    }

    synchronized void closeInternalHandle()
    {
        berkeley.com.sleepycat.je.Environment this;
        java.lang.StringBuilder errors, $r0;
        int $i0;
        java.lang.IllegalStateException $r1;
        java.lang.String $r2;

        this := @this: berkeley.com.sleepycat.je.Environment;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        errors = $r0;

        specialinvoke this.<berkeley.com.sleepycat.je.Environment: void checkForCloseErrors(java.lang.StringBuilder)>(errors);

        $i0 = virtualinvoke errors.<java.lang.StringBuilder: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        $r2 = virtualinvoke errors.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label1:
        return;
    }


