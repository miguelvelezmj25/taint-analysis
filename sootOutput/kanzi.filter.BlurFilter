    public boolean apply(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.filter.BlurFilter this;
        kanzi.SliceIntArray input, output;
        boolean $z0, $z1;
        int i#15, $i0;

        this := @this: kanzi.filter.BlurFilter;

        input := @parameter0: kanzi.SliceIntArray;

        output := @parameter1: kanzi.SliceIntArray;

        $z0 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(input);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(output);

        if $z1 != 0 goto label2;

     label1:
        return 0;

     label2:
        specialinvoke this.<kanzi.filter.BlurFilter: boolean blurHorizontal(kanzi.SliceIntArray,kanzi.SliceIntArray)>(input, output);

        specialinvoke this.<kanzi.filter.BlurFilter: boolean blurVertical(kanzi.SliceIntArray,kanzi.SliceIntArray)>(output, output);

        i#15 = 1;

     label3:
        $i0 = this.<kanzi.filter.BlurFilter: int iterations>;

        if i#15 >= $i0 goto label4;

        specialinvoke this.<kanzi.filter.BlurFilter: boolean blurHorizontal(kanzi.SliceIntArray,kanzi.SliceIntArray)>(output, output);

        specialinvoke this.<kanzi.filter.BlurFilter: boolean blurVertical(kanzi.SliceIntArray,kanzi.SliceIntArray)>(output, output);

        i#15 = i#15 + 1;

        goto label3;

     label4:
        return 1;
    }

    private boolean blurHorizontal(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.filter.BlurFilter this;
        kanzi.SliceIntArray source, destination;
        int[] src, dst, $r0, $r1;
        int srcIdx, dstIdx, rd, w, h, st, boxSize, invBoxSize, mask, enteringPixel, leavingPixel, $i0, srcStart#26, dstStart#28, j#30, pixel#36, $i1, $i2, totalR#44, $i3, $i4, totalG#52, $i5, totalB#58, i#60, n#62, $i6, pixel#70, $i7, $i8, $i9, $i10, $i11, $i12, i#95, $i13, $i14, val#105, $i15, $i16, $i17, val#115, $i18, $i19, val#123, lastIdx#131, $i20, $i21, lastIdx#138, $i22, newIdx#144, $i23, $i24, $i25, $i26, $i27, $i28, newIdx#162, $i29, $i30, $i31, $i32, totalR#180, $i33, $i34, totalG#188, $i35, totalB#194, $i36, $i37, $i38, $i39, $i40, i#215, n#217, $i41;

        this := @this: kanzi.filter.BlurFilter;

        source := @parameter0: kanzi.SliceIntArray;

        destination := @parameter1: kanzi.SliceIntArray;

        src = source.<kanzi.SliceIntArray: int[] array>;

        dst = destination.<kanzi.SliceIntArray: int[] array>;

        srcIdx = source.<kanzi.SliceIntArray: int index>;

        dstIdx = destination.<kanzi.SliceIntArray: int index>;

        rd = this.<kanzi.filter.BlurFilter: int radius>;

        w = this.<kanzi.filter.BlurFilter: int width>;

        h = this.<kanzi.filter.BlurFilter: int height>;

        st = this.<kanzi.filter.BlurFilter: int stride>;

        $i0 = 2 * rd;

        boxSize = $i0 + 1;

        invBoxSize = 65536 / boxSize;

        srcStart#26 = srcIdx;

        dstStart#28 = dstIdx;

        j#30 = 0;

     label1:
        if j#30 >= h goto label9;

        pixel#36 = src[srcStart#26];

        $i1 = pixel#36 >> 16;

        $i2 = $i1 & 255;

        totalR#44 = rd * $i2;

        $i3 = pixel#36 >> 8;

        $i4 = $i3 & 255;

        totalG#52 = rd * $i4;

        $i5 = pixel#36 & 255;

        totalB#58 = rd * $i5;

        i#60 = 0;

        n#62 = 0;

     label2:
        if i#60 > rd goto label4;

        $i6 = srcStart#26 + n#62;

        pixel#70 = src[$i6];

        $i7 = pixel#70 >> 16;

        $i8 = $i7 & 255;

        totalR#44 = totalR#44 + $i8;

        $i9 = pixel#70 >> 8;

        $i10 = $i9 & 255;

        totalG#52 = totalG#52 + $i10;

        $i11 = pixel#70 & 255;

        totalB#58 = totalB#58 + $i11;

        $i12 = w - 1;

        if n#62 >= $i12 goto label3;

        n#62 = n#62 + 1;

     label3:
        i#60 = i#60 + 1;

        goto label2;

     label4:
        i#95 = 0;

     label5:
        if i#95 >= w goto label6;

        $i13 = totalR#44 * invBoxSize;

        $i14 = $i13 >>> 16;

        val#105 = $i14 << 16;

        $i15 = totalG#52 * invBoxSize;

        $i16 = $i15 >>> 16;

        $i17 = $i16 << 8;

        val#115 = val#105 | $i17;

        $i18 = totalB#58 * invBoxSize;

        $i19 = $i18 >>> 16;

        val#123 = val#115 | $i19;

        $r0 = this.<kanzi.filter.BlurFilter: int[] line>;

        $r0[i#95] = val#123;

        lastIdx#131 = i#95 - rd;

        $i20 = neg lastIdx#131;

        $i21 = $i20 >> 31;

        lastIdx#138 = lastIdx#131 & $i21;

        $i22 = i#95 + rd;

        newIdx#144 = $i22 + 1;

        $i23 = newIdx#144 - w;

        mask = $i23 >>> 31;

        $i24 = neg mask;

        $i25 = newIdx#144 & $i24;

        $i26 = w - 1;

        $i27 = mask - 1;

        $i28 = $i26 & $i27;

        newIdx#162 = $i25 | $i28;

        $i29 = srcStart#26 + newIdx#162;

        enteringPixel = src[$i29];

        $i30 = srcStart#26 + lastIdx#138;

        leavingPixel = src[$i30];

        $i31 = enteringPixel >> 16;

        $i32 = $i31 & 255;

        totalR#180 = totalR#44 + $i32;

        $i33 = enteringPixel >> 8;

        $i34 = $i33 & 255;

        totalG#188 = totalG#52 + $i34;

        $i35 = enteringPixel & 255;

        totalB#194 = totalB#58 + $i35;

        $i36 = leavingPixel >> 16;

        $i37 = $i36 & 255;

        totalR#44 = totalR#180 - $i37;

        $i38 = leavingPixel >> 8;

        $i39 = $i38 & 255;

        totalG#52 = totalG#188 - $i39;

        $i40 = leavingPixel & 255;

        totalB#58 = totalB#194 - $i40;

        i#95 = i#95 + 1;

        goto label5;

     label6:
        i#215 = 0;

        n#217 = dstStart#28;

     label7:
        if i#215 >= w goto label8;

        $r1 = this.<kanzi.filter.BlurFilter: int[] line>;

        $i41 = $r1[i#215];

        dst[n#217] = $i41;

        i#215 = i#215 + 1;

        n#217 = n#217 + 1;

        goto label7;

     label8:
        srcStart#26 = srcStart#26 + st;

        dstStart#28 = dstStart#28 + st;

        j#30 = j#30 + 1;

        goto label1;

     label9:
        return 1;
    }

    private boolean blurVertical(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.filter.BlurFilter this;
        kanzi.SliceIntArray source, destination;
        int[] src, dst, $r0, $r1;
        int srcIdx, dstIdx, rd, w, h, st, len, boxSize, mask, enteringPixel, leavingPixel, $i0, srcStart#26, dstStart#28, j#30, pixel#36, $i1, $i2, totalR#44, $i3, $i4, totalG#52, $i5, totalB#58, i#60, n#62, $i6, pixel#70, $i7, $i8, $i9, $i10, $i11, $i12, i#98, $i13, val#106, $i14, $i15, val#114, $i16, val#120, lastIdx#128, $i17, $i18, lastIdx#135, lastIdx#139, $i19, newIdx#145, $i20, $i21, $i22, $i23, $i24, $i25, newIdx#163, newIdx#167, $i26, $i27, $i28, $i29, totalR#185, $i30, $i31, totalG#193, $i32, totalB#199, $i33, $i34, $i35, $i36, $i37, i#220, n#222, $i38;

        this := @this: kanzi.filter.BlurFilter;

        source := @parameter0: kanzi.SliceIntArray;

        destination := @parameter1: kanzi.SliceIntArray;

        src = source.<kanzi.SliceIntArray: int[] array>;

        dst = destination.<kanzi.SliceIntArray: int[] array>;

        srcIdx = source.<kanzi.SliceIntArray: int index>;

        dstIdx = destination.<kanzi.SliceIntArray: int index>;

        rd = this.<kanzi.filter.BlurFilter: int radius>;

        w = this.<kanzi.filter.BlurFilter: int width>;

        h = this.<kanzi.filter.BlurFilter: int height>;

        st = this.<kanzi.filter.BlurFilter: int stride>;

        len = st * h;

        $i0 = 2 * rd;

        boxSize = $i0 + 1;

        srcStart#26 = srcIdx;

        dstStart#28 = dstIdx;

        j#30 = 0;

     label1:
        if j#30 >= w goto label9;

        pixel#36 = src[srcStart#26];

        $i1 = pixel#36 >> 16;

        $i2 = $i1 & 255;

        totalR#44 = rd * $i2;

        $i3 = pixel#36 >> 8;

        $i4 = $i3 & 255;

        totalG#52 = rd * $i4;

        $i5 = pixel#36 & 255;

        totalB#58 = rd * $i5;

        i#60 = 0;

        n#62 = 0;

     label2:
        if i#60 > rd goto label4;

        $i6 = srcStart#26 + n#62;

        pixel#70 = src[$i6];

        $i7 = pixel#70 >> 16;

        $i8 = $i7 & 255;

        totalR#44 = totalR#44 + $i8;

        $i9 = pixel#70 >> 8;

        $i10 = $i9 & 255;

        totalG#52 = totalG#52 + $i10;

        $i11 = pixel#70 & 255;

        totalB#58 = totalB#58 + $i11;

        $i12 = n#62 + st;

        if $i12 >= len goto label3;

        n#62 = n#62 + st;

     label3:
        i#60 = i#60 + 1;

        goto label2;

     label4:
        i#98 = 0;

     label5:
        if i#98 >= h goto label6;

        $i13 = totalR#44 / boxSize;

        val#106 = $i13 << 16;

        $i14 = totalG#52 / boxSize;

        $i15 = $i14 << 8;

        val#114 = val#106 | $i15;

        $i16 = totalB#58 / boxSize;

        val#120 = val#114 | $i16;

        $r0 = this.<kanzi.filter.BlurFilter: int[] line>;

        $r0[i#98] = val#120;

        lastIdx#128 = i#98 - rd;

        $i17 = neg lastIdx#128;

        $i18 = $i17 >> 31;

        lastIdx#135 = lastIdx#128 & $i18;

        lastIdx#139 = lastIdx#135 * st;

        $i19 = i#98 + rd;

        newIdx#145 = $i19 + 1;

        $i20 = newIdx#145 - h;

        mask = $i20 >>> 31;

        $i21 = neg mask;

        $i22 = newIdx#145 & $i21;

        $i23 = h - 1;

        $i24 = mask - 1;

        $i25 = $i23 & $i24;

        newIdx#163 = $i22 | $i25;

        newIdx#167 = newIdx#163 * st;

        $i26 = srcStart#26 + newIdx#167;

        enteringPixel = src[$i26];

        $i27 = srcStart#26 + lastIdx#139;

        leavingPixel = src[$i27];

        $i28 = enteringPixel >> 16;

        $i29 = $i28 & 255;

        totalR#185 = totalR#44 + $i29;

        $i30 = enteringPixel >> 8;

        $i31 = $i30 & 255;

        totalG#193 = totalG#52 + $i31;

        $i32 = enteringPixel & 255;

        totalB#199 = totalB#58 + $i32;

        $i33 = leavingPixel >> 16;

        $i34 = $i33 & 255;

        totalR#44 = totalR#185 - $i34;

        $i35 = leavingPixel >> 8;

        $i36 = $i35 & 255;

        totalG#52 = totalG#193 - $i36;

        $i37 = leavingPixel & 255;

        totalB#58 = totalB#199 - $i37;

        i#98 = i#98 + 1;

        goto label5;

     label6:
        i#220 = 0;

        n#222 = dstStart#28;

     label7:
        if i#220 >= h goto label8;

        $r1 = this.<kanzi.filter.BlurFilter: int[] line>;

        $i38 = $r1[i#220];

        dst[n#222] = $i38;

        i#220 = i#220 + 1;

        n#222 = n#222 + st;

        goto label7;

     label8:
        srcStart#26 = srcStart#26 + 1;

        dstStart#28 = dstStart#28 + 1;

        j#30 = j#30 + 1;

        goto label1;

     label9:
        return 1;
    }


