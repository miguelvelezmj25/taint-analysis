    void <init>(at.favre.tools.dconvert.arg.Arguments)
    {
        at.favre.tools.dconvert.Main$1 this;
        at.favre.tools.dconvert.arg.Arguments l1;

        this := @this: at.favre.tools.dconvert.Main$1;

        l1 := @parameter0: at.favre.tools.dconvert.arg.Arguments;

        this.<at.favre.tools.dconvert.Main$1: at.favre.tools.dconvert.arg.Arguments val$args> = l1;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void onFinished(int, java.util.List, long, boolean, java.lang.String)
    {
        at.favre.tools.dconvert.Main$1 this;
        int finishedJobs, $i0, $i1, $i2;
        java.util.List exceptions;
        long time;
        boolean haltedDuringProcess, $z0, $z1, $z2;
        java.lang.String log, $r1, $r12, $r18, $r20, $r30;
        java.util.Iterator l7;
        java.lang.Exception exception;
        java.io.PrintStream $r0, $r2, $r4, $r5, $r6, $r7, $r15, $r21;
        at.favre.tools.dconvert.arg.Arguments $r3, $r13;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r16, $r17, $r19, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29;
        java.lang.Object $r14;

        this := @this: at.favre.tools.dconvert.Main$1;

        finishedJobs := @parameter0: int;

        exceptions := @parameter1: java.util.List;

        time := @parameter2: long;

        haltedDuringProcess := @parameter3: boolean;

        log := @parameter4: java.lang.String;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        $r1 = staticinvoke <at.favre.tools.dconvert.util.MiscUtil: java.lang.String getCmdProgressBar(float)>(1.0F);

        virtualinvoke $r0.<java.io.PrintStream: void print(java.lang.String)>($r1);

        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("");

        $r3 = this.<at.favre.tools.dconvert.Main$1: at.favre.tools.dconvert.arg.Arguments val$args>;

        $z0 = $r3.<at.favre.tools.dconvert.arg.Arguments: boolean verboseLog>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("Log:");

        $r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>(log);

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(haltedDuringProcess);

        if haltedDuringProcess == 0 goto label2;

        $r6 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("abort due to error");

     label2:
        $i0 = interfaceinvoke exceptions.<java.util.List: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label4;

        $r7 = <java.lang.System: java.io.PrintStream err>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("found ");

        $i1 = interfaceinvoke exceptions.<java.util.List: int size()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" errors during execution");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r12);

        $r13 = this.<at.favre.tools.dconvert.Main$1: at.favre.tools.dconvert.arg.Arguments val$args>;

        $z1 = $r13.<at.favre.tools.dconvert.arg.Arguments: boolean verboseLog>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label4;

        l7 = interfaceinvoke exceptions.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke l7.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label4;

        $r14 = interfaceinvoke l7.<java.util.Iterator: java.lang.Object next()>();

        exception = (java.lang.Exception) $r14;

        $r15 = <java.lang.System: java.io.PrintStream err>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\terror: ");

        $r18 = virtualinvoke exception.<java.lang.Exception: java.lang.String getMessage()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r20);

        virtualinvoke exception.<java.lang.Exception: void printStackTrace()>();

        goto label3;

     label4:
        $r21 = <java.lang.System: java.io.PrintStream out>;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("execution finished (");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(time);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms) with ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(finishedJobs);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" finsihed jobs and ");

        $i2 = interfaceinvoke exceptions.<java.util.List: int size()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" errors");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>($r30);

        return;
    }

    public void onProgress(float)
    {
        at.favre.tools.dconvert.Main$1 this;
        float progress;
        java.io.IOException e, $r3;
        java.io.PrintStream $r0;
        java.lang.String $r1;
        byte[] $r2;

        this := @this: at.favre.tools.dconvert.Main$1;

        progress := @parameter0: float;

     label1:
        $r0 = <java.lang.System: java.io.PrintStream out>;

        $r1 = staticinvoke <at.favre.tools.dconvert.util.MiscUtil: java.lang.String getCmdProgressBar(float)>(progress);

        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r0.<java.io.PrintStream: void write(byte[])>($r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        e = $r3;

        virtualinvoke e.<java.io.IOException: void printStackTrace()>();

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }


