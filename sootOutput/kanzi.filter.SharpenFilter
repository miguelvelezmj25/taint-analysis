    public boolean apply(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.filter.SharpenFilter this;
        kanzi.SliceIntArray input, output;
        boolean $z0, $z1, $z2, $z3;
        int $i0;

        this := @this: kanzi.filter.SharpenFilter;

        input := @parameter0: kanzi.SliceIntArray;

        output := @parameter1: kanzi.SliceIntArray;

        $z0 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(input);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(output);

        if $z1 != 0 goto label2;

     label1:
        return 0;

     label2:
        $i0 = this.<kanzi.filter.SharpenFilter: int channels>;

        if $i0 != 784 goto label3;

        $z2 = specialinvoke this.<kanzi.filter.SharpenFilter: boolean applyThreeChannels(kanzi.SliceIntArray,kanzi.SliceIntArray)>(input, output);

        return $z2;

     label3:
        $z3 = specialinvoke this.<kanzi.filter.SharpenFilter: boolean applyOneChannel(kanzi.SliceIntArray,kanzi.SliceIntArray)>(input, output);

        return $z3;
    }

    private boolean applyThreeChannels(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.filter.SharpenFilter this;
        kanzi.SliceIntArray input, output;
        int[] src, dst;
        int h, w, st, srcLine, endLine, dstLine, pixel01, pixel10, pixel11, pixel21, pixel02, pixel12, pixel22, r02, g02, b02, r12, g12, b12, r22, g22, b22, firstLine, lastLine, srcStart#13, dstStart#16, y#20, $i0, $i1, $i2, $i3, r01#54, $i4, g01#60, b01#64, $i5, r10#70, $i6, g10#76, b10#80, $i7, r11#86, $i8, g11#92, b11#96, $i9, r21#102, $i10, g21#108, b21#112, x#114, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, r#183, r#187, $i25, $i26, $i27, $i28, $i29, $i30, $i31, g#207, g#211, $i32, $i33, $i34, $i35, $i36, $i37, $i38, b#231, b#235, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58;
        boolean $z0, $z1;

        this := @this: kanzi.filter.SharpenFilter;

        input := @parameter0: kanzi.SliceIntArray;

        output := @parameter1: kanzi.SliceIntArray;

        src = input.<kanzi.SliceIntArray: int[] array>;

        dst = output.<kanzi.SliceIntArray: int[] array>;

        h = this.<kanzi.filter.SharpenFilter: int height>;

        w = this.<kanzi.filter.SharpenFilter: int width>;

        st = this.<kanzi.filter.SharpenFilter: int stride>;

        srcStart#13 = input.<kanzi.SliceIntArray: int index>;

        dstStart#16 = output.<kanzi.SliceIntArray: int index>;

        y#20 = h - 2;

     label01:
        if y#20 <= 0 goto label11;

        srcLine = srcStart#13 + st;

        endLine = srcLine + st;

        dstLine = dstStart#16 + st;

        $i0 = srcStart#13 + 1;

        pixel01 = src[$i0];

        pixel10 = src[srcLine];

        $i1 = srcLine + 1;

        pixel11 = src[$i1];

        $i2 = endLine + 1;

        pixel21 = src[$i2];

        $i3 = pixel01 >> 16;

        r01#54 = $i3 & 255;

        $i4 = pixel01 >> 8;

        g01#60 = $i4 & 255;

        b01#64 = pixel01 & 255;

        $i5 = pixel10 >> 16;

        r10#70 = $i5 & 255;

        $i6 = pixel10 >> 8;

        g10#76 = $i6 & 255;

        b10#80 = pixel10 & 255;

        $i7 = pixel11 >> 16;

        r11#86 = $i7 & 255;

        $i8 = pixel11 >> 8;

        g11#92 = $i8 & 255;

        b11#96 = pixel11 & 255;

        $i9 = pixel21 >> 16;

        r21#102 = $i9 & 255;

        $i10 = pixel21 >> 8;

        g21#108 = $i10 & 255;

        b21#112 = pixel21 & 255;

        x#114 = 2;

     label02:
        if x#114 >= w goto label09;

        $i11 = srcStart#13 + x#114;

        pixel02 = src[$i11];

        $i12 = srcLine + x#114;

        pixel12 = src[$i12];

        $i13 = endLine + x#114;

        pixel22 = src[$i13];

        $i14 = pixel02 >> 16;

        r02 = $i14 & 255;

        $i15 = pixel02 >> 8;

        g02 = $i15 & 255;

        b02 = pixel02 & 255;

        $i16 = pixel12 >> 16;

        r12 = $i16 & 255;

        $i17 = pixel12 >> 8;

        g12 = $i17 & 255;

        b12 = pixel12 & 255;

        $i18 = pixel22 >> 16;

        r22 = $i18 & 255;

        $i19 = pixel22 >> 8;

        g22 = $i19 & 255;

        b22 = pixel22 & 255;

        $i20 = neg r01#54;

        $i21 = $i20 - r10#70;

        $i22 = 5 * r11#86;

        $i23 = $i21 + $i22;

        $i24 = $i23 - r21#102;

        r#183 = $i24 - r12;

        if r#183 < 255 goto label03;

        r#187 = 255;

        goto label04;

     label03:
        $i25 = r#183 >> 31;

        $i26 = $i25 ^ -1;

        r#187 = r#183 & $i26;

     label04:
        $i27 = neg g01#60;

        $i28 = $i27 - g10#76;

        $i29 = 5 * g11#92;

        $i30 = $i28 + $i29;

        $i31 = $i30 - g21#108;

        g#207 = $i31 - g12;

        if g#207 < 255 goto label05;

        g#211 = 255;

        goto label06;

     label05:
        $i32 = g#207 >> 31;

        $i33 = $i32 ^ -1;

        g#211 = g#207 & $i33;

     label06:
        $i34 = neg b01#64;

        $i35 = $i34 - b10#80;

        $i36 = 5 * b11#96;

        $i37 = $i35 + $i36;

        $i38 = $i37 - b21#112;

        b#231 = $i38 - b12;

        if b#231 < 255 goto label07;

        b#235 = 255;

        goto label08;

     label07:
        $i39 = b#231 >> 31;

        $i40 = $i39 ^ -1;

        b#235 = b#231 & $i40;

     label08:
        $i41 = dstLine + x#114;

        $i42 = $i41 - 1;

        $i43 = r#187 << 16;

        $i44 = g#211 << 8;

        $i45 = $i43 | $i44;

        $i46 = $i45 | b#235;

        dst[$i42] = $i46;

        r01#54 = r02;

        g01#60 = g02;

        b01#64 = b02;

        r10#70 = r11#86;

        g10#76 = g11#92;

        b10#80 = b11#96;

        r11#86 = r12;

        g11#92 = g12;

        b11#96 = b12;

        r21#102 = r22;

        g21#108 = g22;

        b21#112 = b22;

        x#114 = x#114 + 1;

        goto label02;

     label09:
        $z0 = this.<kanzi.filter.SharpenFilter: boolean processBoundaries>;

        if $z0 != 1 goto label10;

        $i47 = dstLine + 1;

        $i48 = dst[$i47];

        dst[dstLine] = $i48;

        $i49 = dstLine + w;

        $i50 = $i49 - 1;

        $i51 = dstLine + w;

        $i52 = $i51 - 2;

        $i53 = dst[$i52];

        dst[$i50] = $i53;

     label10:
        srcStart#13 = srcLine;

        dstStart#16 = dstLine;

        y#20 = y#20 + -1;

        goto label01;

     label11:
        firstLine = output.<kanzi.SliceIntArray: int index>;

        $i54 = output.<kanzi.SliceIntArray: int index>;

        $i55 = h - 1;

        $i56 = st * $i55;

        lastLine = $i54 + $i56;

        $z1 = this.<kanzi.filter.SharpenFilter: boolean processBoundaries>;

        if $z1 != 1 goto label12;

        $i57 = firstLine + st;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(dst, $i57, dst, firstLine, w);

        $i58 = lastLine - st;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(dst, $i58, dst, lastLine, w);

     label12:
        return 1;
    }

    private boolean applyOneChannel(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.filter.SharpenFilter this;
        kanzi.SliceIntArray input, output;
        int[] src, dst;
        int h, w, st, shift, srcLine, endLine, dstLine, pixel01, pixel10, pixel11, pixel21, pixel02, pixel12, pixel22, val02, val12, val22, firstLine, lastLine, srcStart#13, dstStart#16, $i0, y#24, $i1, $i2, $i3, $i4, val01#58, $i5, val10#64, $i6, val11#70, $i7, val21#76, x#78, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, val#123, $i19, $i20, val#131, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43;
        boolean $z0, $z1;

        this := @this: kanzi.filter.SharpenFilter;

        input := @parameter0: kanzi.SliceIntArray;

        output := @parameter1: kanzi.SliceIntArray;

        src = input.<kanzi.SliceIntArray: int[] array>;

        dst = output.<kanzi.SliceIntArray: int[] array>;

        h = this.<kanzi.filter.SharpenFilter: int height>;

        w = this.<kanzi.filter.SharpenFilter: int width>;

        st = this.<kanzi.filter.SharpenFilter: int stride>;

        srcStart#13 = input.<kanzi.SliceIntArray: int index>;

        dstStart#16 = output.<kanzi.SliceIntArray: int index>;

        $i0 = this.<kanzi.filter.SharpenFilter: int channels>;

        shift = $i0 & 255;

        y#24 = h - 2;

     label1:
        if y#24 <= 0 goto label7;

        srcLine = srcStart#13 + st;

        endLine = srcLine + st;

        dstLine = dstStart#16 + st;

        $i1 = srcStart#13 + 1;

        pixel01 = src[$i1];

        pixel10 = src[srcLine];

        $i2 = srcLine + 1;

        pixel11 = src[$i2];

        $i3 = endLine + 1;

        pixel21 = src[$i3];

        $i4 = pixel01 >> shift;

        val01#58 = $i4 & 255;

        $i5 = pixel10 >> shift;

        val10#64 = $i5 & 255;

        $i6 = pixel11 >> shift;

        val11#70 = $i6 & 255;

        $i7 = pixel21 >> shift;

        val21#76 = $i7 & 255;

        x#78 = 2;

     label2:
        if x#78 >= w goto label5;

        $i8 = srcStart#13 + x#78;

        pixel02 = src[$i8];

        $i9 = srcLine + x#78;

        pixel12 = src[$i9];

        $i10 = endLine + x#78;

        pixel22 = src[$i10];

        $i11 = pixel02 >> shift;

        val02 = $i11 & 255;

        $i12 = pixel12 >> shift;

        val12 = $i12 & 255;

        $i13 = pixel22 >> shift;

        val22 = $i13 & 255;

        $i14 = neg val01#58;

        $i15 = $i14 - val10#64;

        $i16 = 5 * val11#70;

        $i17 = $i15 + $i16;

        $i18 = $i17 - val21#76;

        val#123 = $i18 - val12;

        $i19 = val#123 >> 31;

        $i20 = $i19 ^ -1;

        val#131 = val#123 & $i20;

        $i21 = dstLine + x#78;

        $i22 = $i21 - 1;

        $i23 = dst[$i22];

        $i24 = 255 << shift;

        $i25 = $i24 ^ -1;

        $i26 = $i23 & $i25;

        dst[$i22] = $i26;

        $i27 = dstLine + x#78;

        $i28 = $i27 - 1;

        $i29 = dst[$i28];

        if val#131 < 255 goto label3;

        $i30 = 255 << shift;

        goto label4;

     label3:
        $i30 = val#131 << shift;

     label4:
        $i31 = $i29 | $i30;

        dst[$i28] = $i31;

        val01#58 = val02;

        val10#64 = val11#70;

        val11#70 = val12;

        val21#76 = val22;

        x#78 = x#78 + 1;

        goto label2;

     label5:
        $z0 = this.<kanzi.filter.SharpenFilter: boolean processBoundaries>;

        if $z0 != 1 goto label6;

        $i32 = dstLine + 1;

        $i33 = dst[$i32];

        dst[dstLine] = $i33;

        $i34 = dstLine + w;

        $i35 = $i34 - 1;

        $i36 = dstLine + w;

        $i37 = $i36 - 2;

        $i38 = dst[$i37];

        dst[$i35] = $i38;

     label6:
        srcStart#13 = srcLine;

        dstStart#16 = dstLine;

        y#24 = y#24 + -1;

        goto label1;

     label7:
        firstLine = output.<kanzi.SliceIntArray: int index>;

        $i39 = output.<kanzi.SliceIntArray: int index>;

        $i40 = h - 1;

        $i41 = st * $i40;

        lastLine = $i39 + $i41;

        $z1 = this.<kanzi.filter.SharpenFilter: boolean processBoundaries>;

        if $z1 != 1 goto label8;

        $i42 = firstLine + st;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(dst, $i42, dst, firstLine, w);

        $i43 = lastLine - st;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(dst, $i43, dst, lastLine, w);

     label8:
        return 1;
    }


