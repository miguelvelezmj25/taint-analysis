    public void <init>(weka.core.ProtectedProperties, weka.core.Attribute)
    {
        weka.core.AttributeMetaInfo this;
        weka.core.ProtectedProperties metadata;
        weka.core.Attribute att;

        this := @this: weka.core.AttributeMetaInfo;

        metadata := @parameter0: weka.core.ProtectedProperties;

        att := @parameter1: weka.core.Attribute;

        specialinvoke this.<java.lang.Object: void <init>()>();

        specialinvoke this.<weka.core.AttributeMetaInfo: void setMetadata(weka.core.ProtectedProperties,weka.core.Attribute)>(metadata, att);

        return;
    }

    private void setMetadata(weka.core.ProtectedProperties, weka.core.Attribute)
    {
        weka.core.AttributeMetaInfo this;
        weka.core.ProtectedProperties metadata, $r0, $r2, $r5, $r8, $r15, $r24;
        weka.core.Attribute att;
        java.lang.String orderString, weightString, def#28, $r3, $r6, $r9, $r23, $r25;
        java.lang.NumberFormatException e, $r17;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        java.lang.IllegalArgumentException $r10, $r11, $r12, $r13, $r14, $r18;
        java.lang.Double $r16;
        double $d0;
        java.lang.StringBuilder $r19, $r20, $r21, $r22;

        this := @this: weka.core.AttributeMetaInfo;

        metadata := @parameter0: weka.core.ProtectedProperties;

        att := @parameter1: weka.core.Attribute;

        this.<weka.core.AttributeMetaInfo: weka.core.ProtectedProperties m_Metadata> = metadata;

        $i0 = att.<weka.core.Attribute: int m_Type>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 3 goto label01;

        this.<weka.core.AttributeMetaInfo: int m_Ordering> = 1;

        this.<weka.core.AttributeMetaInfo: boolean m_IsRegular> = 1;

        this.<weka.core.AttributeMetaInfo: boolean m_IsAveragable> = 0;

        this.<weka.core.AttributeMetaInfo: boolean m_HasZeropoint> = 0;

        goto label17;

     label01:
        $r0 = this.<weka.core.AttributeMetaInfo: weka.core.ProtectedProperties m_Metadata>;

        orderString = virtualinvoke $r0.<weka.core.ProtectedProperties: java.lang.String getProperty(java.lang.String,java.lang.String)>("ordering", "");

        $i1 = att.<weka.core.Attribute: int m_Type>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 != 0 goto label02;

        $i2 = virtualinvoke orderString.<java.lang.String: int compareTo(java.lang.String)>("modulo");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 == 0 goto label02;

        $i3 = virtualinvoke orderString.<java.lang.String: int compareTo(java.lang.String)>("symbolic");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 == 0 goto label02;

        def#28 = "true";

        goto label03;

     label02:
        def#28 = "false";

     label03:
        $r2 = this.<weka.core.AttributeMetaInfo: weka.core.ProtectedProperties m_Metadata>;

        $r3 = virtualinvoke $r2.<weka.core.ProtectedProperties: java.lang.String getProperty(java.lang.String,java.lang.String)>("averageable", def#28);

        $i4 = virtualinvoke $r3.<java.lang.String: int compareTo(java.lang.String)>("true");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 != 0 goto label04;

        $z0 = 1;

        goto label05;

     label04:
        $z0 = 0;

     label05:
        this.<weka.core.AttributeMetaInfo: boolean m_IsAveragable> = $z0;

        $r5 = this.<weka.core.AttributeMetaInfo: weka.core.ProtectedProperties m_Metadata>;

        $r6 = virtualinvoke $r5.<weka.core.ProtectedProperties: java.lang.String getProperty(java.lang.String,java.lang.String)>("zeropoint", def#28);

        $i5 = virtualinvoke $r6.<java.lang.String: int compareTo(java.lang.String)>("true");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i5 != 0 goto label06;

        $z1 = 1;

        goto label07;

     label06:
        $z1 = 0;

     label07:
        this.<weka.core.AttributeMetaInfo: boolean m_HasZeropoint> = $z1;

        $z2 = this.<weka.core.AttributeMetaInfo: boolean m_IsAveragable>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label08;

        $z3 = this.<weka.core.AttributeMetaInfo: boolean m_HasZeropoint>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label09;

     label08:
        def#28 = "true";

     label09:
        $r8 = this.<weka.core.AttributeMetaInfo: weka.core.ProtectedProperties m_Metadata>;

        $r9 = virtualinvoke $r8.<weka.core.ProtectedProperties: java.lang.String getProperty(java.lang.String,java.lang.String)>("regular", def#28);

        $i6 = virtualinvoke $r9.<java.lang.String: int compareTo(java.lang.String)>("true");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if $i6 != 0 goto label10;

        $z4 = 1;

        goto label11;

     label10:
        $z4 = 0;

     label11:
        this.<weka.core.AttributeMetaInfo: boolean m_IsRegular> = $z4;

        $i7 = virtualinvoke orderString.<java.lang.String: int compareTo(java.lang.String)>("symbolic");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if $i7 != 0 goto label12;

        this.<weka.core.AttributeMetaInfo: int m_Ordering> = 0;

        goto label17;

     label12:
        $i8 = virtualinvoke orderString.<java.lang.String: int compareTo(java.lang.String)>("ordered");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if $i8 != 0 goto label13;

        this.<weka.core.AttributeMetaInfo: int m_Ordering> = 1;

        goto label17;

     label13:
        $i9 = virtualinvoke orderString.<java.lang.String: int compareTo(java.lang.String)>("modulo");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        if $i9 != 0 goto label14;

        this.<weka.core.AttributeMetaInfo: int m_Ordering> = 2;

        goto label17;

     label14:
        $i10 = att.<weka.core.Attribute: int m_Type>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i10);

        if $i10 == 0 goto label15;

        $z5 = this.<weka.core.AttributeMetaInfo: boolean m_IsAveragable>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 != 0 goto label15;

        $z6 = this.<weka.core.AttributeMetaInfo: boolean m_HasZeropoint>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label16;

     label15:
        this.<weka.core.AttributeMetaInfo: int m_Ordering> = 1;

        goto label17;

     label16:
        this.<weka.core.AttributeMetaInfo: int m_Ordering> = 0;

     label17:
        $z7 = this.<weka.core.AttributeMetaInfo: boolean m_IsAveragable>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 == 0 goto label18;

        $z8 = this.<weka.core.AttributeMetaInfo: boolean m_IsRegular>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 != 0 goto label18;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("An averagable attribute must be regular");

        throw $r10;

     label18:
        $z9 = this.<weka.core.AttributeMetaInfo: boolean m_HasZeropoint>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 == 0 goto label19;

        $z10 = this.<weka.core.AttributeMetaInfo: boolean m_IsRegular>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z10);

        if $z10 != 0 goto label19;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("A zeropoint attribute must be regular");

        throw $r11;

     label19:
        $z11 = this.<weka.core.AttributeMetaInfo: boolean m_IsRegular>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z11);

        if $z11 == 0 goto label20;

        $i11 = this.<weka.core.AttributeMetaInfo: int m_Ordering>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i11);

        if $i11 != 0 goto label20;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("A symbolic attribute cannot be regular");

        throw $r12;

     label20:
        $z12 = this.<weka.core.AttributeMetaInfo: boolean m_IsAveragable>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z12);

        if $z12 == 0 goto label21;

        $i12 = this.<weka.core.AttributeMetaInfo: int m_Ordering>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i12);

        if $i12 == 1 goto label21;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("An averagable attribute must be ordered");

        throw $r13;

     label21:
        $z13 = this.<weka.core.AttributeMetaInfo: boolean m_HasZeropoint>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z13);

        if $z13 == 0 goto label22;

        $i13 = this.<weka.core.AttributeMetaInfo: int m_Ordering>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i13);

        if $i13 == 1 goto label22;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("A zeropoint attribute must be ordered");

        throw $r14;

     label22:
        att.<weka.core.Attribute: double m_Weight> = 1.0;

        $r15 = this.<weka.core.AttributeMetaInfo: weka.core.ProtectedProperties m_Metadata>;

        weightString = virtualinvoke $r15.<weka.core.ProtectedProperties: java.lang.String getProperty(java.lang.String)>("weight");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(weightString);

        if weightString == null goto label26;

     label23:
        $r16 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(weightString);

        $d0 = virtualinvoke $r16.<java.lang.Double: double doubleValue()>();

        att.<weka.core.Attribute: double m_Weight> = $d0;

     label24:
        goto label26;

     label25:
        $r17 := @caughtexception;

        e = $r17;

        $r18 = new java.lang.IllegalArgumentException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a valid attribute weight: \'");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(weightString);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r23);

        throw $r18;

     label26:
        $i14 = att.<weka.core.Attribute: int m_Type>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i14);

        if $i14 != 0 goto label27;

        $r24 = this.<weka.core.AttributeMetaInfo: weka.core.ProtectedProperties m_Metadata>;

        $r25 = virtualinvoke $r24.<weka.core.ProtectedProperties: java.lang.String getProperty(java.lang.String)>("range");

        specialinvoke this.<weka.core.AttributeMetaInfo: void setNumericRange(java.lang.String)>($r25);

     label27:
        return;

        catch java.lang.NumberFormatException from label23 to label24 with label25;
    }

    private void setNumericRange(java.lang.String)
    {
        weka.core.AttributeMetaInfo this;
        java.lang.String rangeString, $r5, $r7, $r11, $r13, $r14, $r15, $r16, $r17, $r23, $r26, $r30, $r32, $r36, $r38, $r39, $r40, $r41, $r42, $r48, $r51, $r55, $r57, $r61, $r63, $r68, $r70, $r78;
        java.io.StreamTokenizer tokenizer, $r0;
        java.io.StringReader $r1;
        int $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i12, $i13, $i15, $i16, $i17;
        java.lang.IllegalArgumentException $r2, $r8, $r20, $r27, $r33, $r45, $r52, $r58, $r65, $r71;
        java.lang.StringBuilder $r3, $r4, $r6, $r9, $r10, $r12, $r21, $r22, $r24, $r25, $r28, $r29, $r31, $r34, $r35, $r37, $r46, $r47, $r49, $r50, $r53, $r54, $r56, $r59, $r60, $r62, $r66, $r67, $r69, $r72, $r73, $r74, $r75, $r76, $r77;
        java.lang.Double $r18, $r43;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        java.lang.NumberFormatException $r19, e#92, $r44, e#157;
        java.io.IOException $r64, e#206;
        byte $b18;

        this := @this: weka.core.AttributeMetaInfo;

        rangeString := @parameter0: java.lang.String;

        this.<weka.core.AttributeMetaInfo: double m_LowerBound> = #-Infinity;

        this.<weka.core.AttributeMetaInfo: boolean m_LowerBoundIsOpen> = 0;

        this.<weka.core.AttributeMetaInfo: double m_UpperBound> = #Infinity;

        this.<weka.core.AttributeMetaInfo: boolean m_UpperBoundIsOpen> = 0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(rangeString);

        if rangeString != null goto label01;

        return;

     label01:
        $r0 = new java.io.StreamTokenizer;

        $r1 = new java.io.StringReader;

        specialinvoke $r1.<java.io.StringReader: void <init>(java.lang.String)>(rangeString);

        specialinvoke $r0.<java.io.StreamTokenizer: void <init>(java.io.Reader)>($r1);

        tokenizer = $r0;

        virtualinvoke tokenizer.<java.io.StreamTokenizer: void resetSyntax()>();

        virtualinvoke tokenizer.<java.io.StreamTokenizer: void whitespaceChars(int,int)>(0, 32);

        virtualinvoke tokenizer.<java.io.StreamTokenizer: void wordChars(int,int)>(33, 255);

        virtualinvoke tokenizer.<java.io.StreamTokenizer: void ordinaryChar(int)>(91);

        virtualinvoke tokenizer.<java.io.StreamTokenizer: void ordinaryChar(int)>(40);

        virtualinvoke tokenizer.<java.io.StreamTokenizer: void ordinaryChar(int)>(44);

        virtualinvoke tokenizer.<java.io.StreamTokenizer: void ordinaryChar(int)>(93);

        virtualinvoke tokenizer.<java.io.StreamTokenizer: void ordinaryChar(int)>(41);

     label02:
        virtualinvoke tokenizer.<java.io.StreamTokenizer: int nextToken()>();

        $i1 = tokenizer.<java.io.StreamTokenizer: int ttype>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 != 91 goto label03;

        this.<weka.core.AttributeMetaInfo: boolean m_LowerBoundIsOpen> = 0;

        goto label05;

     label03:
        $i2 = tokenizer.<java.io.StreamTokenizer: int ttype>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 != 40 goto label04;

        this.<weka.core.AttributeMetaInfo: boolean m_LowerBoundIsOpen> = 1;

        goto label05;

     label04:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected opening brace on range, found: ");

        $r5 = virtualinvoke tokenizer.<java.io.StreamTokenizer: java.lang.String toString()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label05:
        virtualinvoke tokenizer.<java.io.StreamTokenizer: int nextToken()>();

        $i4 = tokenizer.<java.io.StreamTokenizer: int ttype>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 == -3 goto label06;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected lower bound in range, found: ");

        $r11 = virtualinvoke tokenizer.<java.io.StreamTokenizer: java.lang.String toString()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label06:
        $r14 = tokenizer.<java.io.StreamTokenizer: java.lang.String sval>;

        $i5 = virtualinvoke $r14.<java.lang.String: int compareToIgnoreCase(java.lang.String)>("-inf");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i5 != 0 goto label07;

        this.<weka.core.AttributeMetaInfo: double m_LowerBound> = #-Infinity;

        goto label12;

     label07:
        $r15 = tokenizer.<java.io.StreamTokenizer: java.lang.String sval>;

        $i6 = virtualinvoke $r15.<java.lang.String: int compareToIgnoreCase(java.lang.String)>("+inf");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if $i6 != 0 goto label08;

        this.<weka.core.AttributeMetaInfo: double m_LowerBound> = #Infinity;

        goto label12;

     label08:
        $r16 = tokenizer.<java.io.StreamTokenizer: java.lang.String sval>;

        $i7 = virtualinvoke $r16.<java.lang.String: int compareToIgnoreCase(java.lang.String)>("inf");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if $i7 != 0 goto label09;

        this.<weka.core.AttributeMetaInfo: double m_LowerBound> = #-Infinity;

        goto label12;

     label09:
        $r17 = tokenizer.<java.io.StreamTokenizer: java.lang.String sval>;

        $r18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>($r17);

        $d0 = virtualinvoke $r18.<java.lang.Double: double doubleValue()>();

        this.<weka.core.AttributeMetaInfo: double m_LowerBound> = $d0;

     label10:
        goto label12;

     label11:
        $r19 := @caughtexception;

        e#92 = $r19;

        $r20 = new java.lang.IllegalArgumentException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected lower bound in range, found: \'");

        $r23 = tokenizer.<java.io.StreamTokenizer: java.lang.String sval>;

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r26);

        throw $r20;

     label12:
        $i8 = virtualinvoke tokenizer.<java.io.StreamTokenizer: int nextToken()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if $i8 == 44 goto label13;

        $r27 = new java.lang.IllegalArgumentException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected comma in range, found: ");

        $r30 = virtualinvoke tokenizer.<java.io.StreamTokenizer: java.lang.String toString()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r32);

        throw $r27;

     label13:
        virtualinvoke tokenizer.<java.io.StreamTokenizer: int nextToken()>();

        $i10 = tokenizer.<java.io.StreamTokenizer: int ttype>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i10);

        if $i10 == -3 goto label14;

        $r33 = new java.lang.IllegalArgumentException;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected upper bound in range, found: ");

        $r36 = virtualinvoke tokenizer.<java.io.StreamTokenizer: java.lang.String toString()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r38);

        throw $r33;

     label14:
        $r39 = tokenizer.<java.io.StreamTokenizer: java.lang.String sval>;

        $i11 = virtualinvoke $r39.<java.lang.String: int compareToIgnoreCase(java.lang.String)>("-inf");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i11);

        if $i11 != 0 goto label15;

        this.<weka.core.AttributeMetaInfo: double m_UpperBound> = #-Infinity;

        goto label20;

     label15:
        $r40 = tokenizer.<java.io.StreamTokenizer: java.lang.String sval>;

        $i12 = virtualinvoke $r40.<java.lang.String: int compareToIgnoreCase(java.lang.String)>("+inf");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i12);

        if $i12 != 0 goto label16;

        this.<weka.core.AttributeMetaInfo: double m_UpperBound> = #Infinity;

        goto label20;

     label16:
        $r41 = tokenizer.<java.io.StreamTokenizer: java.lang.String sval>;

        $i13 = virtualinvoke $r41.<java.lang.String: int compareToIgnoreCase(java.lang.String)>("inf");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i13);

        if $i13 != 0 goto label17;

        this.<weka.core.AttributeMetaInfo: double m_UpperBound> = #Infinity;

        goto label20;

     label17:
        $r42 = tokenizer.<java.io.StreamTokenizer: java.lang.String sval>;

        $r43 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>($r42);

        $d1 = virtualinvoke $r43.<java.lang.Double: double doubleValue()>();

        this.<weka.core.AttributeMetaInfo: double m_UpperBound> = $d1;

     label18:
        goto label20;

     label19:
        $r44 := @caughtexception;

        e#157 = $r44;

        $r45 = new java.lang.IllegalArgumentException;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected upper bound in range, found: \'");

        $r48 = tokenizer.<java.io.StreamTokenizer: java.lang.String sval>;

        $r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r45.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r51);

        throw $r45;

     label20:
        virtualinvoke tokenizer.<java.io.StreamTokenizer: int nextToken()>();

        $i15 = tokenizer.<java.io.StreamTokenizer: int ttype>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i15);

        if $i15 != 93 goto label21;

        this.<weka.core.AttributeMetaInfo: boolean m_UpperBoundIsOpen> = 0;

        goto label23;

     label21:
        $i16 = tokenizer.<java.io.StreamTokenizer: int ttype>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i16);

        if $i16 != 41 goto label22;

        this.<weka.core.AttributeMetaInfo: boolean m_UpperBoundIsOpen> = 1;

        goto label23;

     label22:
        $r52 = new java.lang.IllegalArgumentException;

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected closing brace on range, found: ");

        $r55 = virtualinvoke tokenizer.<java.io.StreamTokenizer: java.lang.String toString()>();

        $r56 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r55);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r52.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r57);

        throw $r52;

     label23:
        $i17 = virtualinvoke tokenizer.<java.io.StreamTokenizer: int nextToken()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i17);

        if $i17 == -1 goto label24;

        $r58 = new java.lang.IllegalArgumentException;

        $r59 = new java.lang.StringBuilder;

        specialinvoke $r59.<java.lang.StringBuilder: void <init>()>();

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected end of range string, found: ");

        $r61 = virtualinvoke tokenizer.<java.io.StreamTokenizer: java.lang.String toString()>();

        $r62 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r61);

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r58.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r63);

        throw $r58;

     label24:
        goto label26;

     label25:
        $r64 := @caughtexception;

        e#206 = $r64;

        $r65 = new java.lang.IllegalArgumentException;

        $r66 = new java.lang.StringBuilder;

        specialinvoke $r66.<java.lang.StringBuilder: void <init>()>();

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IOException reading attribute range string: ");

        $r68 = virtualinvoke e#206.<java.io.IOException: java.lang.String getMessage()>();

        $r69 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r68);

        $r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r65.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r70);

        throw $r65;

     label26:
        $d2 = this.<weka.core.AttributeMetaInfo: double m_UpperBound>;

        $d3 = this.<weka.core.AttributeMetaInfo: double m_LowerBound>;

        $b18 = $d2 cmpg $d3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b18);

        if $b18 >= 0 goto label27;

        $r71 = new java.lang.IllegalArgumentException;

        $r72 = new java.lang.StringBuilder;

        specialinvoke $r72.<java.lang.StringBuilder: void <init>()>();

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Upper bound (");

        $d4 = this.<weka.core.AttributeMetaInfo: double m_UpperBound>;

        $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d4);

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") on numeric range is less than lower bound (");

        $d5 = this.<weka.core.AttributeMetaInfo: double m_LowerBound>;

        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d5);

        $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")!");

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r71.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r78);

        throw $r71;

     label27:
        return;

        catch java.lang.NumberFormatException from label09 to label10 with label11;
        catch java.lang.NumberFormatException from label17 to label18 with label19;
        catch java.io.IOException from label02 to label24 with label25;
    }


