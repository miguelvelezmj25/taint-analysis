    public boolean forward(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.transform.WHT8 this;
        kanzi.SliceIntArray src, dst;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3, $i4;
        int[] $r0, $r1;

        this := @this: kanzi.transform.WHT8;

        src := @parameter0: kanzi.SliceIntArray;

        dst := @parameter1: kanzi.SliceIntArray;

        $z0 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(src);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i0 = src.<kanzi.SliceIntArray: int length>;

        if $i0 == 64 goto label2;

        return 0;

     label2:
        if src == dst goto label4;

        $z1 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(dst);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $i1 = dst.<kanzi.SliceIntArray: int index>;

        $i2 = $i1 + 64;

        $r0 = dst.<kanzi.SliceIntArray: int[] array>;

        $i3 = lengthof $r0;

        if $i2 <= $i3 goto label4;

        return 0;

     label4:
        $r1 = this.<kanzi.transform.WHT8: int[] data>;

        $i4 = this.<kanzi.transform.WHT8: int fScale>;

        $z2 = staticinvoke <kanzi.transform.WHT8: boolean compute(kanzi.SliceIntArray,kanzi.SliceIntArray,int[],int)>(src, dst, $r1, $i4);

        return $z2;
    }

    private static boolean compute(kanzi.SliceIntArray, kanzi.SliceIntArray, int[], int)
    {
        kanzi.SliceIntArray src, dst;
        int[] buffer, input, output;
        int shift, srcIdx, dstIdx, si, adjust, di, dataptr#10, i#12, x0#21, $i0, x1#27, $i1, x2#33, $i2, x3#39, $i3, x4#45, $i4, x5#51, $i5, x6#57, $i6, x7#63, a0#67, a1#71, a2#75, a3#79, a4#83, a5#87, a6#91, a7#95, b0#99, b1#103, b2#107, b3#111, b4#115, b5#119, b6#123, b7#127, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, dataptr#183, $i22, i#190, x0#196, $i23, x1#202, $i24, x2#208, $i25, x3#214, $i26, x4#220, $i27, x5#226, $i28, x6#232, $i29, x7#238, a0#242, a1#246, a2#250, a3#254, a4#258, a5#262, a6#266, a7#270, b0#274, b1#278, b2#282, b3#286, b4#290, b5#294, b6#298, b7#302, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64;

        src := @parameter0: kanzi.SliceIntArray;

        dst := @parameter1: kanzi.SliceIntArray;

        buffer := @parameter2: int[];

        shift := @parameter3: int;

        input = src.<kanzi.SliceIntArray: int[] array>;

        output = dst.<kanzi.SliceIntArray: int[] array>;

        srcIdx = src.<kanzi.SliceIntArray: int index>;

        dstIdx = dst.<kanzi.SliceIntArray: int index>;

        dataptr#10 = 0;

        i#12 = 0;

     label1:
        if i#12 >= 64 goto label2;

        si = srcIdx + i#12;

        x0#21 = input[si];

        $i0 = si + 1;

        x1#27 = input[$i0];

        $i1 = si + 2;

        x2#33 = input[$i1];

        $i2 = si + 3;

        x3#39 = input[$i2];

        $i3 = si + 4;

        x4#45 = input[$i3];

        $i4 = si + 5;

        x5#51 = input[$i4];

        $i5 = si + 6;

        x6#57 = input[$i5];

        $i6 = si + 7;

        x7#63 = input[$i6];

        a0#67 = x0#21 + x1#27;

        a1#71 = x2#33 + x3#39;

        a2#75 = x4#45 + x5#51;

        a3#79 = x6#57 + x7#63;

        a4#83 = x0#21 - x1#27;

        a5#87 = x2#33 - x3#39;

        a6#91 = x4#45 - x5#51;

        a7#95 = x6#57 - x7#63;

        b0#99 = a0#67 + a1#71;

        b1#103 = a2#75 + a3#79;

        b2#107 = a4#83 + a5#87;

        b3#111 = a6#91 + a7#95;

        b4#115 = a0#67 - a1#71;

        b5#119 = a2#75 - a3#79;

        b6#123 = a4#83 - a5#87;

        b7#127 = a6#91 - a7#95;

        $i7 = b0#99 + b1#103;

        buffer[dataptr#10] = $i7;

        $i8 = dataptr#10 + 1;

        $i9 = b2#107 + b3#111;

        buffer[$i8] = $i9;

        $i10 = dataptr#10 + 2;

        $i11 = b4#115 + b5#119;

        buffer[$i10] = $i11;

        $i12 = dataptr#10 + 3;

        $i13 = b6#123 + b7#127;

        buffer[$i12] = $i13;

        $i14 = dataptr#10 + 4;

        $i15 = b0#99 - b1#103;

        buffer[$i14] = $i15;

        $i16 = dataptr#10 + 5;

        $i17 = b2#107 - b3#111;

        buffer[$i16] = $i17;

        $i18 = dataptr#10 + 6;

        $i19 = b4#115 - b5#119;

        buffer[$i18] = $i19;

        $i20 = dataptr#10 + 7;

        $i21 = b6#123 - b7#127;

        buffer[$i20] = $i21;

        dataptr#10 = dataptr#10 + 8;

        i#12 = i#12 + 8;

        goto label1;

     label2:
        dataptr#183 = 0;

        $i22 = 1 << shift;

        adjust = $i22 >> 1;

        i#190 = 0;

     label3:
        if i#190 >= 8 goto label4;

        x0#196 = buffer[dataptr#183];

        $i23 = dataptr#183 + 8;

        x1#202 = buffer[$i23];

        $i24 = dataptr#183 + 16;

        x2#208 = buffer[$i24];

        $i25 = dataptr#183 + 24;

        x3#214 = buffer[$i25];

        $i26 = dataptr#183 + 32;

        x4#220 = buffer[$i26];

        $i27 = dataptr#183 + 40;

        x5#226 = buffer[$i27];

        $i28 = dataptr#183 + 48;

        x6#232 = buffer[$i28];

        $i29 = dataptr#183 + 56;

        x7#238 = buffer[$i29];

        a0#242 = x0#196 + x1#202;

        a1#246 = x2#208 + x3#214;

        a2#250 = x4#220 + x5#226;

        a3#254 = x6#232 + x7#238;

        a4#258 = x0#196 - x1#202;

        a5#262 = x2#208 - x3#214;

        a6#266 = x4#220 - x5#226;

        a7#270 = x6#232 - x7#238;

        b0#274 = a0#242 + a1#246;

        b1#278 = a2#250 + a3#254;

        b2#282 = a4#258 + a5#262;

        b3#286 = a6#266 + a7#270;

        b4#290 = a0#242 - a1#246;

        b5#294 = a2#250 - a3#254;

        b6#298 = a4#258 - a5#262;

        b7#302 = a6#266 - a7#270;

        di = dstIdx + i#190;

        $i30 = b0#274 + b1#278;

        $i31 = $i30 + adjust;

        $i32 = $i31 >> shift;

        output[di] = $i32;

        $i33 = di + 8;

        $i34 = b2#282 + b3#286;

        $i35 = $i34 + adjust;

        $i36 = $i35 >> shift;

        output[$i33] = $i36;

        $i37 = di + 16;

        $i38 = b4#290 + b5#294;

        $i39 = $i38 + adjust;

        $i40 = $i39 >> shift;

        output[$i37] = $i40;

        $i41 = di + 24;

        $i42 = b6#298 + b7#302;

        $i43 = $i42 + adjust;

        $i44 = $i43 >> shift;

        output[$i41] = $i44;

        $i45 = di + 32;

        $i46 = b0#274 - b1#278;

        $i47 = $i46 + adjust;

        $i48 = $i47 >> shift;

        output[$i45] = $i48;

        $i49 = di + 40;

        $i50 = b2#282 - b3#286;

        $i51 = $i50 + adjust;

        $i52 = $i51 >> shift;

        output[$i49] = $i52;

        $i53 = di + 48;

        $i54 = b4#290 - b5#294;

        $i55 = $i54 + adjust;

        $i56 = $i55 >> shift;

        output[$i53] = $i56;

        $i57 = di + 56;

        $i58 = b6#298 - b7#302;

        $i59 = $i58 + adjust;

        $i60 = $i59 >> shift;

        output[$i57] = $i60;

        dataptr#183 = dataptr#183 + 1;

        i#190 = i#190 + 1;

        goto label3;

     label4:
        $i61 = src.<kanzi.SliceIntArray: int index>;

        $i62 = $i61 + 64;

        src.<kanzi.SliceIntArray: int index> = $i62;

        $i63 = dst.<kanzi.SliceIntArray: int index>;

        $i64 = $i63 + 64;

        dst.<kanzi.SliceIntArray: int index> = $i64;

        return 1;
    }

    public boolean inverse(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.transform.WHT8 this;
        kanzi.SliceIntArray src, dst;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3, $i4;
        int[] $r0, $r1;

        this := @this: kanzi.transform.WHT8;

        src := @parameter0: kanzi.SliceIntArray;

        dst := @parameter1: kanzi.SliceIntArray;

        $z0 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(src);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i0 = src.<kanzi.SliceIntArray: int length>;

        if $i0 == 64 goto label2;

        return 0;

     label2:
        if src == dst goto label4;

        $z1 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(dst);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $i1 = dst.<kanzi.SliceIntArray: int index>;

        $i2 = $i1 + 64;

        $r0 = dst.<kanzi.SliceIntArray: int[] array>;

        $i3 = lengthof $r0;

        if $i2 <= $i3 goto label4;

        return 0;

     label4:
        $r1 = this.<kanzi.transform.WHT8: int[] data>;

        $i4 = this.<kanzi.transform.WHT8: int iScale>;

        $z2 = staticinvoke <kanzi.transform.WHT8: boolean compute(kanzi.SliceIntArray,kanzi.SliceIntArray,int[],int)>(src, dst, $r1, $i4);

        return $z2;
    }


