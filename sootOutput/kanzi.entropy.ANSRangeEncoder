    public void dispose()
    {
        kanzi.entropy.ANSRangeEncoder this;

        this := @this: kanzi.entropy.ANSRangeEncoder;

        return;
    }

    public int encode(byte[], int, int)
    {
        kanzi.entropy.ANSRangeEncoder this;
        byte[] block, $r2, $r3;
        int blkptr, len, end, sz, endk, endChunk, $i0, $i1, $i2, $i3, startChunk#20, $i4, $i5, k#28, i#36, $i6, $i7, $i8, $i9, $i10, lr#65, $i11, $i12;
        kanzi.entropy.ANSRangeEncoder$Symbol[] syms;
        kanzi.entropy.ANSRangeEncoder$Symbol[][] $r0;
        kanzi.entropy.ANSRangeEncoder$Symbol $r1;

        this := @this: kanzi.entropy.ANSRangeEncoder;

        block := @parameter0: byte[];

        blkptr := @parameter1: int;

        len := @parameter2: int;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(block);

        if block == null goto label01;

        $i0 = blkptr + len;

        $i1 = lengthof block;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i0 > $i1 goto label01;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(blkptr);

        if blkptr < 0 goto label01;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len);

        if len >= 0 goto label02;

     label01:
        return -1;

     label02:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len);

        if len != 0 goto label03;

        return 0;

     label03:
        end = blkptr + len;

        $i2 = this.<kanzi.entropy.ANSRangeEncoder: int chunkSize>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 != 0 goto label04;

        $i3 = len;

        goto label05;

     label04:
        $i3 = this.<kanzi.entropy.ANSRangeEncoder: int chunkSize>;

     label05:
        sz = $i3;

        startChunk#20 = blkptr;

        $i4 = this.<kanzi.entropy.ANSRangeEncoder: int order>;

        $i5 = 255 * $i4;

        endk = $i5 + 1;

        k#28 = 0;

     label06:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(k#28);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(endk);

        if k#28 >= endk goto label09;

        $r0 = this.<kanzi.entropy.ANSRangeEncoder: kanzi.entropy.ANSRangeEncoder$Symbol[][] symbols>;

        syms = $r0[k#28];

        i#36 = 0;

     label07:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#36);

        if i#36 >= 256 goto label08;

        $r1 = new kanzi.entropy.ANSRangeEncoder$Symbol;

        specialinvoke $r1.<kanzi.entropy.ANSRangeEncoder$Symbol: void <init>()>();

        syms[i#36] = $r1;

        i#36 = i#36 + 1;

        goto label07;

     label08:
        k#28 = k#28 + 1;

        goto label06;

     label09:
        $r2 = this.<kanzi.entropy.ANSRangeEncoder: byte[] buffer>;

        $i6 = lengthof $r2;

        $i7 = 2 * sz;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if $i6 >= $i7 goto label10;

        $i8 = 2 * sz;

        $r3 = newarray (byte)[$i8];

        this.<kanzi.entropy.ANSRangeEncoder: byte[] buffer> = $r3;

     label10:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(startChunk#20);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(end);

        if startChunk#20 >= end goto label15;

        $i9 = startChunk#20 + sz;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(end);

        if $i9 >= end goto label11;

        $i10 = startChunk#20 + sz;

        goto label12;

     label11:
        $i10 = end;

     label12:
        endChunk = $i10;

        lr#65 = this.<kanzi.entropy.ANSRangeEncoder: int logRange>;

     label13:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lr#65);

        if lr#65 <= 8 goto label14;

        $i11 = 1 << lr#65;

        $i12 = endChunk - startChunk#20;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i11);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i12);

        if $i11 <= $i12 goto label14;

        lr#65 = lr#65 + -1;

        goto label13;

     label14:
        specialinvoke this.<kanzi.entropy.ANSRangeEncoder: void rebuildStatistics(byte[],int,int,int)>(block, startChunk#20, endChunk, lr#65);

        specialinvoke this.<kanzi.entropy.ANSRangeEncoder: void encodeChunk(byte[],int,int)>(block, startChunk#20, endChunk);

        startChunk#20 = endChunk;

        goto label10;

     label15:
        return len;
    }

    private void rebuildStatistics(byte[], int, int, int)
    {
        kanzi.entropy.ANSRangeEncoder this;
        byte[] block;
        int start, end, lr, endj, $i0, $i1, j#8, $i2, i#19, $i3, $i4, i#36, $i7, $i8, i#53, $i11, $i12, $i14, $i15;
        int[] f, f, $r4, $r6;
        short cur, $s6, prv#51;
        int[][] $r0, $r1, $r3, $r5, $r7;
        byte $b5, $b9;

        this := @this: kanzi.entropy.ANSRangeEncoder;

        block := @parameter0: byte[];

        start := @parameter1: int;

        end := @parameter2: int;

        lr := @parameter3: int;

        $i0 = this.<kanzi.entropy.ANSRangeEncoder: int order>;

        $i1 = 255 * $i0;

        endj = $i1 + 1;

        j#8 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(endj);

        if j#8 >= endj goto label4;

        $r0 = this.<kanzi.entropy.ANSRangeEncoder: int[][] freqs>;

        f = $r0[j#8];

        $i2 = lengthof f;

        i#19 = $i2 - 1;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#19);

        if i#19 < 0 goto label3;

        f[i#19] = 0;

        i#19 = i#19 + -1;

        goto label2;

     label3:
        j#8 = j#8 + 1;

        goto label1;

     label4:
        $i3 = this.<kanzi.entropy.ANSRangeEncoder: int order>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 != 0 goto label7;

        $r1 = this.<kanzi.entropy.ANSRangeEncoder: int[][] freqs>;

        f = $r1[0];

        $i4 = end - start;

        f[256] = $i4;

        i#36 = start;

     label5:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#36);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(end);

        if i#36 >= end goto label6;

        $b5 = block[i#36];

        $s6 = $b5 & 255;

        $i7 = f[$s6];

        $i8 = $i7 + 1;

        f[$s6] = $i8;

        i#36 = i#36 + 1;

        goto label5;

     label6:
        goto label9;

     label7:
        prv#51 = 0;

        i#53 = start;

     label8:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#53);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(end);

        if i#53 >= end goto label9;

        $b9 = block[i#53];

        cur = $b9 & 255;

        $r3 = this.<kanzi.entropy.ANSRangeEncoder: int[][] freqs>;

        $r4 = $r3[prv#51];

        $i11 = $r4[cur];

        $i12 = $i11 + 1;

        $r4[cur] = $i12;

        $r5 = this.<kanzi.entropy.ANSRangeEncoder: int[][] freqs>;

        $r6 = $r5[prv#51];

        $i14 = $r6[256];

        $i15 = $i14 + 1;

        $r6[256] = $i15;

        prv#51 = cur;

        i#53 = i#53 + 1;

        goto label8;

     label9:
        $r7 = this.<kanzi.entropy.ANSRangeEncoder: int[][] freqs>;

        specialinvoke this.<kanzi.entropy.ANSRangeEncoder: int updateFrequencies(int[][],int)>($r7, lr);

        return;
    }

    private void encodeChunk(byte[], int, int)
    {
        kanzi.entropy.ANSRangeEncoder this;
        byte[] block, $r1, $r4, $r7, $r10;
        int start, end, st#2, n#4, $i0, i#14, $i2, $i3, $i8, $i9, $i10, $i12, $i16, i#70, $i19, $i20, $i25, $i26, $i27, $i29, $i33, $i34, $i39, $i40, $i41, $i43, n#162;
        kanzi.entropy.ANSRangeEncoder$Symbol[] symb, $r3, $r6;
        kanzi.entropy.ANSRangeEncoder$Symbol sym, sym#26, sym#85;
        long q, $l5, $l6, $l7, q#46, $l11, $l13, $l14, $l15, $l22, $l23, $l24, q#105, $l28, $l30, $l31, $l32, $l36, $l37, $l38, $l42, $l44, $l45, $l46, $l47, $l50;
        kanzi.entropy.ANSRangeEncoder$Symbol[][] $r0, $r2, $r5;
        byte $b1, $b4, $b17, $b18, $b21, $b35, $b49;
        short cur#22, prv#66, cur#78;
        kanzi.OutputBitStream $r8, $r9;

        this := @this: kanzi.entropy.ANSRangeEncoder;

        block := @parameter0: byte[];

        start := @parameter1: int;

        end := @parameter2: int;

        st#2 = 8388608;

        n#4 = 0;

        $i0 = this.<kanzi.entropy.ANSRangeEncoder: int order>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 0 goto label05;

        $r0 = this.<kanzi.entropy.ANSRangeEncoder: kanzi.entropy.ANSRangeEncoder$Symbol[][] symbols>;

        symb = $r0[0];

        i#14 = end - 1;

     label01:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#14);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(start);

        if i#14 < start goto label04;

        $b1 = block[i#14];

        cur#22 = $b1 & 255;

        sym#26 = symb[cur#22];

     label02:
        $i2 = sym#26.<kanzi.entropy.ANSRangeEncoder$Symbol: int xMax>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(st#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if st#2 < $i2 goto label03;

        $r1 = this.<kanzi.entropy.ANSRangeEncoder: byte[] buffer>;

        $i3 = n#4;

        n#4 = n#4 + 1;

        $b4 = (byte) st#2;

        $r1[$i3] = $b4;

        st#2 = st#2 >>> 8;

        goto label02;

     label03:
        $l5 = (long) st#2;

        $l6 = sym#26.<kanzi.entropy.ANSRangeEncoder$Symbol: long invFreq>;

        $l7 = $l5 * $l6;

        $i8 = sym#26.<kanzi.entropy.ANSRangeEncoder$Symbol: int invShift>;

        q#46 = $l7 >>> $i8;

        $i9 = sym#26.<kanzi.entropy.ANSRangeEncoder$Symbol: int bias>;

        $i10 = st#2 + $i9;

        $l11 = (long) $i10;

        $i12 = sym#26.<kanzi.entropy.ANSRangeEncoder$Symbol: int cmplFreq>;

        $l13 = (long) $i12;

        $l14 = q#46 * $l13;

        $l15 = $l11 + $l14;

        st#2 = (int) $l15;

        i#14 = i#14 + -1;

        goto label01;

     label04:
        goto label12;

     label05:
        $i16 = end - 1;

        $b17 = block[$i16];

        prv#66 = $b17 & 255;

        i#70 = end - 2;

     label06:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#70);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(start);

        if i#70 < start goto label09;

        $b18 = block[i#70];

        cur#78 = $b18 & 255;

        $r2 = this.<kanzi.entropy.ANSRangeEncoder: kanzi.entropy.ANSRangeEncoder$Symbol[][] symbols>;

        $r3 = $r2[cur#78];

        sym#85 = $r3[prv#66];

     label07:
        $i19 = sym#85.<kanzi.entropy.ANSRangeEncoder$Symbol: int xMax>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(st#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i19);

        if st#2 < $i19 goto label08;

        $r4 = this.<kanzi.entropy.ANSRangeEncoder: byte[] buffer>;

        $i20 = n#4;

        n#4 = n#4 + 1;

        $b21 = (byte) st#2;

        $r4[$i20] = $b21;

        st#2 = st#2 >>> 8;

        goto label07;

     label08:
        $l22 = (long) st#2;

        $l23 = sym#85.<kanzi.entropy.ANSRangeEncoder$Symbol: long invFreq>;

        $l24 = $l22 * $l23;

        $i25 = sym#85.<kanzi.entropy.ANSRangeEncoder$Symbol: int invShift>;

        q#105 = $l24 >>> $i25;

        $i26 = sym#85.<kanzi.entropy.ANSRangeEncoder$Symbol: int bias>;

        $i27 = st#2 + $i26;

        $l28 = (long) $i27;

        $i29 = sym#85.<kanzi.entropy.ANSRangeEncoder$Symbol: int cmplFreq>;

        $l30 = (long) $i29;

        $l31 = q#105 * $l30;

        $l32 = $l28 + $l31;

        st#2 = (int) $l32;

        prv#66 = cur#78;

        i#70 = i#70 + -1;

        goto label06;

     label09:
        $r5 = this.<kanzi.entropy.ANSRangeEncoder: kanzi.entropy.ANSRangeEncoder$Symbol[][] symbols>;

        $r6 = $r5[0];

        sym = $r6[prv#66];

     label10:
        $i33 = sym.<kanzi.entropy.ANSRangeEncoder$Symbol: int xMax>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(st#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i33);

        if st#2 < $i33 goto label11;

        $r7 = this.<kanzi.entropy.ANSRangeEncoder: byte[] buffer>;

        $i34 = n#4;

        n#4 = n#4 + 1;

        $b35 = (byte) st#2;

        $r7[$i34] = $b35;

        st#2 = st#2 >>> 8;

        goto label10;

     label11:
        $l36 = (long) st#2;

        $l37 = sym.<kanzi.entropy.ANSRangeEncoder$Symbol: long invFreq>;

        $l38 = $l36 * $l37;

        $i39 = sym.<kanzi.entropy.ANSRangeEncoder$Symbol: int invShift>;

        q = $l38 >>> $i39;

        $i40 = sym.<kanzi.entropy.ANSRangeEncoder$Symbol: int bias>;

        $i41 = st#2 + $i40;

        $l42 = (long) $i41;

        $i43 = sym.<kanzi.entropy.ANSRangeEncoder$Symbol: int cmplFreq>;

        $l44 = (long) $i43;

        $l45 = q * $l44;

        $l46 = $l42 + $l45;

        st#2 = (int) $l46;

     label12:
        $r8 = this.<kanzi.entropy.ANSRangeEncoder: kanzi.OutputBitStream bitstream>;

        $l47 = (long) st#2;

        interfaceinvoke $r8.<kanzi.OutputBitStream: int writeBits(long,int)>($l47, 32);

        n#162 = n#4 + -1;

     label13:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n#162);

        if n#162 < 0 goto label14;

        $r9 = this.<kanzi.entropy.ANSRangeEncoder: kanzi.OutputBitStream bitstream>;

        $r10 = this.<kanzi.entropy.ANSRangeEncoder: byte[] buffer>;

        $b49 = $r10[n#162];

        $l50 = (long) $b49;

        interfaceinvoke $r9.<kanzi.OutputBitStream: int writeBits(long,int)>($l50, 8);

        n#162 = n#162 + -1;

        goto label13;

     label14:
        return;
    }

    public void <init>(kanzi.OutputBitStream, int)
    {
        kanzi.entropy.ANSRangeEncoder this;
        kanzi.OutputBitStream bs;
        int order, $i0, $i1, $i2;

        this := @this: kanzi.entropy.ANSRangeEncoder;

        bs := @parameter0: kanzi.OutputBitStream;

        order := @parameter1: int;

        $i0 = order & 1;

        $i1 = 8 * $i0;

        $i2 = 32768 << $i1;

        specialinvoke this.<kanzi.entropy.ANSRangeEncoder: void <init>(kanzi.OutputBitStream,int,int,int)>(bs, order, $i2, 13);

        return;
    }

    private int updateFrequencies(int[][], int)
    {
        kanzi.entropy.ANSRangeEncoder this;
        int[][] frequencies, $r2;
        int lr, endk, alphabetSize, res#2, $i0, $i1, $i2, k#18, $i5, $i6, sum#44, i#46, $i7, $i8, $i9;
        int[] f, alphabet_;
        kanzi.entropy.ANSRangeEncoder$Symbol[] symb;
        kanzi.OutputBitStream $r0;
        long $l3;
        kanzi.entropy.ANSRangeEncoder$Symbol[][] $r1;
        kanzi.entropy.EntropyUtils $r3;
        kanzi.entropy.ANSRangeEncoder$Symbol $r4;

        this := @this: kanzi.entropy.ANSRangeEncoder;

        frequencies := @parameter0: int[][];

        lr := @parameter1: int;

        res#2 = 0;

        $i0 = this.<kanzi.entropy.ANSRangeEncoder: int order>;

        $i1 = 255 * $i0;

        endk = $i1 + 1;

        $r0 = this.<kanzi.entropy.ANSRangeEncoder: kanzi.OutputBitStream bitstream>;

        $i2 = lr - 8;

        $l3 = (long) $i2;

        interfaceinvoke $r0.<kanzi.OutputBitStream: int writeBits(long,int)>($l3, 3);

        k#18 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(k#18);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(endk);

        if k#18 >= endk goto label6;

        f = frequencies[k#18];

        $r1 = this.<kanzi.entropy.ANSRangeEncoder: kanzi.entropy.ANSRangeEncoder$Symbol[][] symbols>;

        symb = $r1[k#18];

        $r2 = this.<kanzi.entropy.ANSRangeEncoder: int[][] alphabet>;

        alphabet_ = $r2[k#18];

        $r3 = this.<kanzi.entropy.ANSRangeEncoder: kanzi.entropy.EntropyUtils eu>;

        $i5 = f[256];

        $i6 = 1 << lr;

        alphabetSize = virtualinvoke $r3.<kanzi.entropy.EntropyUtils: int normalizeFrequencies(int[],int[],int,int)>(f, alphabet_, $i5, $i6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(alphabetSize);

        if alphabetSize <= 0 goto label5;

        sum#44 = 0;

        i#46 = 0;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#46);

        if i#46 >= 256 goto label5;

        $i7 = f[i#46];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if $i7 != 0 goto label3;

        goto label4;

     label3:
        $r4 = symb[i#46];

        $i8 = f[i#46];

        virtualinvoke $r4.<kanzi.entropy.ANSRangeEncoder$Symbol: void reset(int,int,int)>(sum#44, $i8, lr);

        $i9 = f[i#46];

        sum#44 = sum#44 + $i9;

     label4:
        i#46 = i#46 + 1;

        goto label2;

     label5:
        virtualinvoke this.<kanzi.entropy.ANSRangeEncoder: boolean encodeHeader(int,int[],int[],int)>(alphabetSize, alphabet_, f, lr);

        res#2 = res#2 + alphabetSize;

        k#18 = k#18 + 1;

        goto label1;

     label6:
        return res#2;
    }

    public void <init>(kanzi.OutputBitStream, int, int, int)
    {
        kanzi.entropy.ANSRangeEncoder this;
        kanzi.OutputBitStream bs;
        int order, chunkSize, logRange, dim, $i0, i#70;
        java.lang.NullPointerException $r0;
        java.lang.IllegalArgumentException $r1, $r2, $r3, $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String $r9;
        int[][] $r10, $r11, $r15, $r17;
        kanzi.entropy.ANSRangeEncoder$Symbol[][] $r12, $r19;
        byte[] $r13;
        kanzi.entropy.EntropyUtils $r14;
        int[] $r16, $r18;
        kanzi.entropy.ANSRangeEncoder$Symbol[] $r20;

        this := @this: kanzi.entropy.ANSRangeEncoder;

        bs := @parameter0: kanzi.OutputBitStream;

        order := @parameter1: int;

        chunkSize := @parameter2: int;

        logRange := @parameter3: int;

        specialinvoke this.<java.lang.Object: void <init>()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(bs);

        if bs != null goto label1;

        $r0 = new java.lang.NullPointerException;

        specialinvoke $r0.<java.lang.NullPointerException: void <init>(java.lang.String)>("Invalid null bitstream parameter");

        throw $r0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(order);

        if order == 0 goto label2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(order);

        if order == 1 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The order must be 0 or 1");

        throw $r1;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(chunkSize);

        if chunkSize == 0 goto label3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(chunkSize);

        if chunkSize >= 1024 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The chunk size must be at least 1024");

        throw $r2;

     label3:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(chunkSize);

        if chunkSize <= 1073741824 goto label4;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The chunk size must be at most 2^30");

        throw $r3;

     label4:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(logRange);

        if logRange < 8 goto label5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(logRange);

        if logRange <= 16 goto label6;

     label5:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid range: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(logRange);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (must be in [8..16])");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label6:
        this.<kanzi.entropy.ANSRangeEncoder: kanzi.OutputBitStream bitstream> = bs;

        this.<kanzi.entropy.ANSRangeEncoder: int order> = order;

        $i0 = 255 * order;

        dim = $i0 + 1;

        $r10 = newmultiarray (int)[dim][256];

        this.<kanzi.entropy.ANSRangeEncoder: int[][] alphabet> = $r10;

        $r11 = newmultiarray (int)[dim][257];

        this.<kanzi.entropy.ANSRangeEncoder: int[][] freqs> = $r11;

        $r12 = newmultiarray (kanzi.entropy.ANSRangeEncoder$Symbol)[dim][256];

        this.<kanzi.entropy.ANSRangeEncoder: kanzi.entropy.ANSRangeEncoder$Symbol[][] symbols> = $r12;

        $r13 = newarray (byte)[0];

        this.<kanzi.entropy.ANSRangeEncoder: byte[] buffer> = $r13;

        this.<kanzi.entropy.ANSRangeEncoder: int logRange> = logRange;

        this.<kanzi.entropy.ANSRangeEncoder: int chunkSize> = chunkSize;

        $r14 = new kanzi.entropy.EntropyUtils;

        specialinvoke $r14.<kanzi.entropy.EntropyUtils: void <init>()>();

        this.<kanzi.entropy.ANSRangeEncoder: kanzi.entropy.EntropyUtils eu> = $r14;

        i#70 = 0;

     label7:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#70);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dim);

        if i#70 >= dim goto label8;

        $r15 = this.<kanzi.entropy.ANSRangeEncoder: int[][] alphabet>;

        $r16 = newarray (int)[256];

        $r15[i#70] = $r16;

        $r17 = this.<kanzi.entropy.ANSRangeEncoder: int[][] freqs>;

        $r18 = newarray (int)[257];

        $r17[i#70] = $r18;

        $r19 = this.<kanzi.entropy.ANSRangeEncoder: kanzi.entropy.ANSRangeEncoder$Symbol[][] symbols>;

        $r20 = newarray (kanzi.entropy.ANSRangeEncoder$Symbol)[256];

        $r19[i#70] = $r20;

        i#70 = i#70 + 1;

        goto label7;

     label8:
        return;
    }

    protected boolean encodeHeader(int, int[], int[], int)
    {
        kanzi.entropy.ANSRangeEncoder this;
        int alphabetSize, lr, endj, llr#12, $i2, i#18, max#22, logMax#24, $i3, $i4, j#33, $i5, $i6, $i7, $i8, $i9, j#60, $i12, $i13;
        int[] alphabet, frequencies;
        byte chkSize, $b1;
        kanzi.OutputBitStream $r0, $r1, $r2;
        long $l10, $l14;

        this := @this: kanzi.entropy.ANSRangeEncoder;

        alphabetSize := @parameter0: int;

        alphabet := @parameter1: int[];

        frequencies := @parameter2: int[];

        lr := @parameter3: int;

        $r0 = this.<kanzi.entropy.ANSRangeEncoder: kanzi.OutputBitStream bitstream>;

        staticinvoke <kanzi.entropy.EntropyUtils: int encodeAlphabet(kanzi.OutputBitStream,int[],int)>($r0, alphabet, alphabetSize);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(alphabetSize);

        if alphabetSize != 0 goto label01;

        return 1;

     label01:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(alphabetSize);

        if alphabetSize <= 64 goto label02;

        $b1 = 16;

        goto label03;

     label02:
        $b1 = 8;

     label03:
        chkSize = $b1;

        llr#12 = 3;

     label04:
        $i2 = 1 << llr#12;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lr);

        if $i2 > lr goto label05;

        llr#12 = llr#12 + 1;

        goto label04;

     label05:
        i#18 = 1;

     label06:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#18);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(alphabetSize);

        if i#18 >= alphabetSize goto label15;

        max#22 = 0;

        logMax#24 = 1;

        $i3 = i#18 + chkSize;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(alphabetSize);

        if $i3 >= alphabetSize goto label07;

        $i4 = i#18 + chkSize;

        goto label08;

     label07:
        $i4 = alphabetSize;

     label08:
        endj = $i4;

        j#33 = i#18;

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#33);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(endj);

        if j#33 >= endj goto label11;

        $i5 = alphabet[j#33];

        $i6 = frequencies[$i5];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(max#22);

        if $i6 <= max#22 goto label10;

        $i7 = alphabet[j#33];

        max#22 = frequencies[$i7];

     label10:
        j#33 = j#33 + 1;

        goto label09;

     label11:
        $i8 = 1 << logMax#24;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(max#22);

        if $i8 > max#22 goto label12;

        logMax#24 = logMax#24 + 1;

        goto label11;

     label12:
        $r1 = this.<kanzi.entropy.ANSRangeEncoder: kanzi.OutputBitStream bitstream>;

        $i9 = logMax#24 - 1;

        $l10 = (long) $i9;

        interfaceinvoke $r1.<kanzi.OutputBitStream: int writeBits(long,int)>($l10, llr#12);

        j#60 = i#18;

     label13:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#60);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(endj);

        if j#60 >= endj goto label14;

        $r2 = this.<kanzi.entropy.ANSRangeEncoder: kanzi.OutputBitStream bitstream>;

        $i12 = alphabet[j#60];

        $i13 = frequencies[$i12];

        $l14 = (long) $i13;

        interfaceinvoke $r2.<kanzi.OutputBitStream: int writeBits(long,int)>($l14, logMax#24);

        j#60 = j#60 + 1;

        goto label13;

     label14:
        i#18 = i#18 + chkSize;

        goto label06;

     label15:
        return 1;
    }


