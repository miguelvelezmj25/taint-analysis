    public void <init>(boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean)
    {
        org.unix4j.find.unix.find.FindArguments this;
        boolean isTypeDirectory, isTypeFile, isTypeSymlink, isTypeOther, isRegex, isIgnoreCase, isTimeNewer, isTimeOlder, isTimeCreate, isTimeAccess, isTimeModified, isPrint0;

        this := @this: org.unix4j.find.unix.find.FindArguments;

        isTypeDirectory := @parameter0: boolean;

        isTypeFile := @parameter1: boolean;

        isTypeSymlink := @parameter2: boolean;

        isTypeOther := @parameter3: boolean;

        isRegex := @parameter4: boolean;

        isIgnoreCase := @parameter5: boolean;

        isTimeNewer := @parameter6: boolean;

        isTimeOlder := @parameter7: boolean;

        isTimeCreate := @parameter8: boolean;

        isTimeAccess := @parameter9: boolean;

        isTimeModified := @parameter10: boolean;

        isPrint0 := @parameter11: boolean;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<org.unix4j.find.unix.find.FindArguments: boolean pathIsSet> = 0;

        this.<org.unix4j.find.unix.find.FindArguments: boolean nameIsSet> = 0;

        this.<org.unix4j.find.unix.find.FindArguments: boolean sizeIsSet> = 0;

        this.<org.unix4j.find.unix.find.FindArguments: boolean timeIsSet> = 0;

        this.<org.unix4j.find.unix.find.FindArguments: boolean argsIsSet> = 0;

        this.<org.unix4j.find.unix.find.FindArguments: boolean isTypeDirectory> = isTypeDirectory;

        this.<org.unix4j.find.unix.find.FindArguments: boolean isTypeFile> = isTypeFile;

        this.<org.unix4j.find.unix.find.FindArguments: boolean isTypeSymlink> = isTypeSymlink;

        this.<org.unix4j.find.unix.find.FindArguments: boolean isTypeOther> = isTypeOther;

        this.<org.unix4j.find.unix.find.FindArguments: boolean isRegex> = isRegex;

        this.<org.unix4j.find.unix.find.FindArguments: boolean isIgnoreCase> = isIgnoreCase;

        this.<org.unix4j.find.unix.find.FindArguments: boolean isTimeNewer> = isTimeNewer;

        this.<org.unix4j.find.unix.find.FindArguments: boolean isTimeOlder> = isTimeOlder;

        this.<org.unix4j.find.unix.find.FindArguments: boolean isTimeCreate> = isTimeCreate;

        this.<org.unix4j.find.unix.find.FindArguments: boolean isTimeAccess> = isTimeAccess;

        this.<org.unix4j.find.unix.find.FindArguments: boolean isTimeModified> = isTimeModified;

        this.<org.unix4j.find.unix.find.FindArguments: boolean isPrint0> = isPrint0;

        return;
    }

    public void setPath(java.lang.String)
    {
        org.unix4j.find.unix.find.FindArguments this;
        java.lang.String path;

        this := @this: org.unix4j.find.unix.find.FindArguments;

        path := @parameter0: java.lang.String;

        this.<org.unix4j.find.unix.find.FindArguments: java.lang.String path> = path;

        this.<org.unix4j.find.unix.find.FindArguments: boolean pathIsSet> = 1;

        return;
    }

    public boolean isPrint0()
    {
        org.unix4j.find.unix.find.FindArguments this;
        boolean $z0;

        this := @this: org.unix4j.find.unix.find.FindArguments;

        $z0 = this.<org.unix4j.find.unix.find.FindArguments: boolean isPrint0>;

        return $z0;
    }

    public boolean isNameSet()
    {
        org.unix4j.find.unix.find.FindArguments this;
        boolean $z0;

        this := @this: org.unix4j.find.unix.find.FindArguments;

        $z0 = this.<org.unix4j.find.unix.find.FindArguments: boolean nameIsSet>;

        return $z0;
    }

    public java.lang.String getName()
    {
        org.unix4j.find.unix.find.FindArguments this;
        boolean $z0;
        java.lang.String $r0, $r4, $r6;
        java.lang.IllegalStateException $r1;
        java.lang.StringBuilder $r2, $r3, $r5;

        this := @this: org.unix4j.find.unix.find.FindArguments;

        $z0 = this.<org.unix4j.find.unix.find.FindArguments: boolean nameIsSet>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r0 = this.<org.unix4j.find.unix.find.FindArguments: java.lang.String name>;

        return $r0;

     label1:
        $r1 = new java.lang.IllegalStateException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("operand has not been set: ");

        $r4 = this.<org.unix4j.find.unix.find.FindArguments: java.lang.String name>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r1;
    }

    public boolean isRegex()
    {
        org.unix4j.find.unix.find.FindArguments this;
        boolean $z0;

        this := @this: org.unix4j.find.unix.find.FindArguments;

        $z0 = this.<org.unix4j.find.unix.find.FindArguments: boolean isRegex>;

        return $z0;
    }

    public boolean isIgnoreCase()
    {
        org.unix4j.find.unix.find.FindArguments this;
        boolean $z0;

        this := @this: org.unix4j.find.unix.find.FindArguments;

        $z0 = this.<org.unix4j.find.unix.find.FindArguments: boolean isIgnoreCase>;

        return $z0;
    }

    public boolean isSizeSet()
    {
        org.unix4j.find.unix.find.FindArguments this;
        boolean $z0;

        this := @this: org.unix4j.find.unix.find.FindArguments;

        $z0 = this.<org.unix4j.find.unix.find.FindArguments: boolean sizeIsSet>;

        return $z0;
    }

    public long getSize()
    {
        org.unix4j.find.unix.find.FindArguments this;
        boolean $z0;
        long $l0, $l1;
        java.lang.IllegalStateException $r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        this := @this: org.unix4j.find.unix.find.FindArguments;

        $z0 = this.<org.unix4j.find.unix.find.FindArguments: boolean sizeIsSet>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $l0 = this.<org.unix4j.find.unix.find.FindArguments: long size>;

        return $l0;

     label1:
        $r0 = new java.lang.IllegalStateException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("operand has not been set: ");

        $l1 = this.<org.unix4j.find.unix.find.FindArguments: long size>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r0;
    }

    public boolean isTimeSet()
    {
        org.unix4j.find.unix.find.FindArguments this;
        boolean $z0;

        this := @this: org.unix4j.find.unix.find.FindArguments;

        $z0 = this.<org.unix4j.find.unix.find.FindArguments: boolean timeIsSet>;

        return $z0;
    }

    public java.util.Date getTime()
    {
        org.unix4j.find.unix.find.FindArguments this;
        boolean $z0;
        java.util.Date $r0, $r4;
        java.lang.IllegalStateException $r1;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r6;

        this := @this: org.unix4j.find.unix.find.FindArguments;

        $z0 = this.<org.unix4j.find.unix.find.FindArguments: boolean timeIsSet>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r0 = this.<org.unix4j.find.unix.find.FindArguments: java.util.Date time>;

        return $r0;

     label1:
        $r1 = new java.lang.IllegalStateException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("operand has not been set: ");

        $r4 = this.<org.unix4j.find.unix.find.FindArguments: java.util.Date time>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r1;
    }

    public boolean isTimeAccess()
    {
        org.unix4j.find.unix.find.FindArguments this;
        boolean $z0;

        this := @this: org.unix4j.find.unix.find.FindArguments;

        $z0 = this.<org.unix4j.find.unix.find.FindArguments: boolean isTimeAccess>;

        return $z0;
    }

    public boolean isTimeCreate()
    {
        org.unix4j.find.unix.find.FindArguments this;
        boolean $z0;

        this := @this: org.unix4j.find.unix.find.FindArguments;

        $z0 = this.<org.unix4j.find.unix.find.FindArguments: boolean isTimeCreate>;

        return $z0;
    }

    public boolean isTimeOlder()
    {
        org.unix4j.find.unix.find.FindArguments this;
        boolean $z0;

        this := @this: org.unix4j.find.unix.find.FindArguments;

        $z0 = this.<org.unix4j.find.unix.find.FindArguments: boolean isTimeOlder>;

        return $z0;
    }

    public boolean isTypeDirectory()
    {
        org.unix4j.find.unix.find.FindArguments this;
        boolean $z0;

        this := @this: org.unix4j.find.unix.find.FindArguments;

        $z0 = this.<org.unix4j.find.unix.find.FindArguments: boolean isTypeDirectory>;

        return $z0;
    }

    public boolean isTypeFile()
    {
        org.unix4j.find.unix.find.FindArguments this;
        boolean $z0;

        this := @this: org.unix4j.find.unix.find.FindArguments;

        $z0 = this.<org.unix4j.find.unix.find.FindArguments: boolean isTypeFile>;

        return $z0;
    }

    public boolean isTypeOther()
    {
        org.unix4j.find.unix.find.FindArguments this;
        boolean $z0;

        this := @this: org.unix4j.find.unix.find.FindArguments;

        $z0 = this.<org.unix4j.find.unix.find.FindArguments: boolean isTypeOther>;

        return $z0;
    }

    public boolean isTypeSymlink()
    {
        org.unix4j.find.unix.find.FindArguments this;
        boolean $z0;

        this := @this: org.unix4j.find.unix.find.FindArguments;

        $z0 = this.<org.unix4j.find.unix.find.FindArguments: boolean isTypeSymlink>;

        return $z0;
    }

    public boolean isPathSet()
    {
        org.unix4j.find.unix.find.FindArguments this;
        boolean $z0;

        this := @this: org.unix4j.find.unix.find.FindArguments;

        $z0 = this.<org.unix4j.find.unix.find.FindArguments: boolean pathIsSet>;

        return $z0;
    }

    public java.lang.String getPath()
    {
        org.unix4j.find.unix.find.FindArguments this;
        boolean $z0;
        java.lang.String $r0, $r4, $r6;
        java.lang.IllegalStateException $r1;
        java.lang.StringBuilder $r2, $r3, $r5;

        this := @this: org.unix4j.find.unix.find.FindArguments;

        $z0 = this.<org.unix4j.find.unix.find.FindArguments: boolean pathIsSet>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r0 = this.<org.unix4j.find.unix.find.FindArguments: java.lang.String path>;

        return $r0;

     label1:
        $r1 = new java.lang.IllegalStateException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("operand has not been set: ");

        $r4 = this.<org.unix4j.find.unix.find.FindArguments: java.lang.String path>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r1;
    }


