digraph <init> {
"this := @this: berkeley.com.sleepycat.je.dbi.DupKeyData$TwoPartKeyComparator {1987219863}" -> "btreeComparator := @parameter0: java.util.Comparator {508613009}";
"btreeComparator := @parameter0: java.util.Comparator {508613009}" -> "dupComparator := @parameter1: java.util.Comparator {467595890}";
"dupComparator := @parameter1: java.util.Comparator {467595890}" -> "specialinvoke this.<java.lang.Object: void <init>()>() {1971770106}";
"specialinvoke this.<java.lang.Object: void <init>()>() {1971770106}" -> "this.<berkeley.com.sleepycat.je.dbi.DupKeyData$TwoPartKeyComparator: java.util.Comparator btreeComparator> = btreeComparator {1722214909}";
"this.<berkeley.com.sleepycat.je.dbi.DupKeyData$TwoPartKeyComparator: java.util.Comparator btreeComparator> = btreeComparator {1722214909}" -> "this.<berkeley.com.sleepycat.je.dbi.DupKeyData$TwoPartKeyComparator: java.util.Comparator duplicateComparator> = dupComparator {1272726738}";
"this.<berkeley.com.sleepycat.je.dbi.DupKeyData$TwoPartKeyComparator: java.util.Comparator duplicateComparator> = dupComparator {1272726738}" -> "return {442803541}";
}

digraph compare {
"this := @this: berkeley.com.sleepycat.je.dbi.DupKeyData$TwoPartKeyComparator {1258806890}" -> "l1 := @parameter0: java.lang.Object {331080059}";
"l1 := @parameter0: java.lang.Object {331080059}" -> "l2 := @parameter1: java.lang.Object {1926381717}";
"l2 := @parameter1: java.lang.Object {1926381717}" -> "$r0 = (byte[]) l1 {873868984}";
"$r0 = (byte[]) l1 {873868984}" -> "$r1 = (byte[]) l2 {829129247}";
"$r1 = (byte[]) l2 {829129247}" -> "$i0 = virtualinvoke this.<berkeley.com.sleepycat.je.dbi.DupKeyData$TwoPartKeyComparator: int compare(byte[],byte[])>($r0, $r1) {881662308}";
"$i0 = virtualinvoke this.<berkeley.com.sleepycat.je.dbi.DupKeyData$TwoPartKeyComparator: int compare(byte[],byte[])>($r0, $r1) {881662308}" -> "return $i0 {1835468882}";
}

digraph compare {
"this := @this: berkeley.com.sleepycat.je.dbi.DupKeyData$TwoPartKeyComparator {1321683235}" -> "twoPartKey1 := @parameter0: byte[] {444782997}";
"twoPartKey1 := @parameter0: byte[] {444782997}" -> "twoPartKey2 := @parameter1: byte[] {10050077}";
"twoPartKey2 := @parameter1: byte[] {10050077}" -> "$i0 = lengthof twoPartKey1 {302090948}";
"$i0 = lengthof twoPartKey1 {302090948}" -> "$i1 = $i0 - 1 {1882062457}";
"$i1 = $i0 - 1 {1882062457}" -> "origKeySize1 = staticinvoke <berkeley.com.sleepycat.util.PackedInteger: int readReverseInt(byte[],int)>(twoPartKey1, $i1) {2029403291}";
"origKeySize1 = staticinvoke <berkeley.com.sleepycat.util.PackedInteger: int readReverseInt(byte[],int)>(twoPartKey1, $i1) {2029403291}" -> "staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize1) {1051527885}";
"staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize1) {1051527885}" -> "if origKeySize1 != -1 goto $i3 = origKeySize1 {1219194176}";
"if origKeySize1 != -1 goto $i3 = origKeySize1 {1219194176}" -> "$i2 = lengthof twoPartKey1 {1480613957}";
"if origKeySize1 != -1 goto $i3 = origKeySize1 {1219194176}" -> "$i3 = origKeySize1 {313027508}";
"$i2 = lengthof twoPartKey1 {1480613957}" -> "$i3 = $i2 - 1 {1280688893}";
"$i3 = $i2 - 1 {1280688893}" -> "goto [?= keySize1 = $i3] {1236367503}";
"goto [?= keySize1 = $i3] {1236367503}" -> "keySize1 = $i3 {339887151}";
"$i3 = origKeySize1 {313027508}" -> "keySize1 = $i3 {339887151}";
"keySize1 = $i3 {339887151}" -> "$i4 = lengthof twoPartKey2 {1623586389}";
"$i4 = lengthof twoPartKey2 {1623586389}" -> "$i5 = $i4 - 1 {422819537}";
"$i5 = $i4 - 1 {422819537}" -> "origKeySize2 = staticinvoke <berkeley.com.sleepycat.util.PackedInteger: int readReverseInt(byte[],int)>(twoPartKey2, $i5) {973109318}";
"origKeySize2 = staticinvoke <berkeley.com.sleepycat.util.PackedInteger: int readReverseInt(byte[],int)>(twoPartKey2, $i5) {973109318}" -> "staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize2) {1525362285}";
"staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize2) {1525362285}" -> "if origKeySize2 != -1 goto $i7 = origKeySize2 {812188245}";
"if origKeySize2 != -1 goto $i7 = origKeySize2 {812188245}" -> "$i6 = lengthof twoPartKey2 {964961537}";
"if origKeySize2 != -1 goto $i7 = origKeySize2 {812188245}" -> "$i7 = origKeySize2 {2097172531}";
"$i6 = lengthof twoPartKey2 {964961537}" -> "$i7 = $i6 - 1 {2026474712}";
"$i7 = $i6 - 1 {2026474712}" -> "goto [?= keySize2 = $i7] {1706347945}";
"goto [?= keySize2 = $i7] {1706347945}" -> "keySize2 = $i7 {459978602}";
"$i7 = origKeySize2 {2097172531}" -> "keySize2 = $i7 {459978602}";
"keySize2 = $i7 {459978602}" -> "$r0 = this.<berkeley.com.sleepycat.je.dbi.DupKeyData$TwoPartKeyComparator: java.util.Comparator btreeComparator> {663661262}";
"$r0 = this.<berkeley.com.sleepycat.je.dbi.DupKeyData$TwoPartKeyComparator: java.util.Comparator btreeComparator> {663661262}" -> "staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0) {648823031}";
"staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0) {648823031}" -> "if $r0 != null goto key1 = newarray (byte)[keySize1] {47351550}";
"if $r0 != null goto key1 = newarray (byte)[keySize1] {47351550}" -> "keyCmp#34 = staticinvoke <berkeley.com.sleepycat.je.tree.Key: int compareUnsignedBytes(byte[],int,int,byte[],int,int)>(twoPartKey1, 0, keySize1, twoPartKey2, 0, keySize2) {75855362}";
"if $r0 != null goto key1 = newarray (byte)[keySize1] {47351550}" -> "key1 = newarray (byte)[keySize1] {1243331362}";
"keyCmp#34 = staticinvoke <berkeley.com.sleepycat.je.tree.Key: int compareUnsignedBytes(byte[],int,int,byte[],int,int)>(twoPartKey1, 0, keySize1, twoPartKey2, 0, keySize2) {75855362}" -> "goto [?= staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(keyCmp#34)] {2066332384}";
"goto [?= staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(keyCmp#34)] {2066332384}" -> "staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(keyCmp#34) {604706329}";
"key1 = newarray (byte)[keySize1] {1243331362}" -> "key2 = newarray (byte)[keySize2] {801115981}";
"key2 = newarray (byte)[keySize2] {801115981}" -> "staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(twoPartKey1, 0, key1, 0, keySize1) {1983319870}";
"staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(twoPartKey1, 0, key1, 0, keySize1) {1983319870}" -> "staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(twoPartKey2, 0, key2, 0, keySize2) {962823611}";
"staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(twoPartKey2, 0, key2, 0, keySize2) {962823611}" -> "$r1 = this.<berkeley.com.sleepycat.je.dbi.DupKeyData$TwoPartKeyComparator: java.util.Comparator btreeComparator> {1926537602}";
"$r1 = this.<berkeley.com.sleepycat.je.dbi.DupKeyData$TwoPartKeyComparator: java.util.Comparator btreeComparator> {1926537602}" -> "keyCmp#34 = interfaceinvoke $r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(key1, key2) {1358167723}";
"keyCmp#34 = interfaceinvoke $r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(key1, key2) {1358167723}" -> "staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(keyCmp#34) {604706329}";
"staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(keyCmp#34) {604706329}" -> "if keyCmp#34 == 0 goto staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize1) {768137229}";
"if keyCmp#34 == 0 goto staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize1) {768137229}" -> "return keyCmp#34 {19238076}";
"if keyCmp#34 == 0 goto staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize1) {768137229}" -> "staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize1) {1585074173}";
"staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize1) {1585074173}" -> "if origKeySize1 == -1 goto staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize1) {1195553471}";
"if origKeySize1 == -1 goto staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize1) {1195553471}" -> "staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize2) {153989604}";
"if origKeySize1 == -1 goto staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize1) {1195553471}" -> "staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize1) {95345256}";
"staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize2) {153989604}" -> "if origKeySize2 != -1 goto $i9 = lengthof twoPartKey1 {477901374}";
"if origKeySize2 != -1 goto $i9 = lengthof twoPartKey1 {477901374}" -> "staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize1) {95345256}";
"if origKeySize2 != -1 goto $i9 = lengthof twoPartKey1 {477901374}" -> "$i9 = lengthof twoPartKey1 {2112065419}";
"staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize1) {95345256}" -> "staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize2) {2082651251}";
"staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize2) {2082651251}" -> "if origKeySize1 != origKeySize2 goto staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize1) {1673854997}";
"if origKeySize1 != origKeySize2 goto staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize1) {1673854997}" -> "return 0 {500017027}";
"if origKeySize1 != origKeySize2 goto staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize1) {1673854997}" -> "staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize1) {139971997}";
"staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize1) {139971997}" -> "if origKeySize1 != -1 goto $b8 = 1 {489706366}";
"if origKeySize1 != -1 goto $b8 = 1 {489706366}" -> "$b8 = -1 {1840324324}";
"if origKeySize1 != -1 goto $b8 = 1 {489706366}" -> "$b8 = 1 {1426807241}";
"$b8 = -1 {1840324324}" -> "goto [?= return $b8] {180021839}";
"goto [?= return $b8] {180021839}" -> "return $b8 {1245662133}";
"$b8 = 1 {1426807241}" -> "return $b8 {1245662133}";
"$i9 = lengthof twoPartKey1 {2112065419}" -> "$i10 = $i9 - 1 {53620629}";
"$i10 = $i9 - 1 {53620629}" -> "keySizeLen1 = staticinvoke <berkeley.com.sleepycat.util.PackedInteger: int getReadIntLength(byte[],int)>(twoPartKey1, $i10) {520797339}";
"keySizeLen1 = staticinvoke <berkeley.com.sleepycat.util.PackedInteger: int getReadIntLength(byte[],int)>(twoPartKey1, $i10) {520797339}" -> "$i11 = lengthof twoPartKey2 {516086484}";
"$i11 = lengthof twoPartKey2 {516086484}" -> "$i12 = $i11 - 1 {1782385185}";
"$i12 = $i11 - 1 {1782385185}" -> "keySizeLen2 = staticinvoke <berkeley.com.sleepycat.util.PackedInteger: int getReadIntLength(byte[],int)>(twoPartKey2, $i12) {1877558729}";
"keySizeLen2 = staticinvoke <berkeley.com.sleepycat.util.PackedInteger: int getReadIntLength(byte[],int)>(twoPartKey2, $i12) {1877558729}" -> "$i13 = lengthof twoPartKey1 {955939715}";
"$i13 = lengthof twoPartKey1 {955939715}" -> "$i14 = $i13 - keySize1 {602339545}";
"$i14 = $i13 - keySize1 {602339545}" -> "dataSize1 = $i14 - keySizeLen1 {793362996}";
"dataSize1 = $i14 - keySizeLen1 {793362996}" -> "$i15 = lengthof twoPartKey2 {777852737}";
"$i15 = lengthof twoPartKey2 {777852737}" -> "$i16 = $i15 - keySize2 {450962000}";
"$i16 = $i15 - keySize2 {450962000}" -> "dataSize2 = $i16 - keySizeLen2 {1680220724}";
"dataSize2 = $i16 - keySizeLen2 {1680220724}" -> "$r2 = this.<berkeley.com.sleepycat.je.dbi.DupKeyData$TwoPartKeyComparator: java.util.Comparator duplicateComparator> {763782228}";
"$r2 = this.<berkeley.com.sleepycat.je.dbi.DupKeyData$TwoPartKeyComparator: java.util.Comparator duplicateComparator> {763782228}" -> "staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2) {1468392810}";
"staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2) {1468392810}" -> "if $r2 != null goto data1 = newarray (byte)[dataSize1] {1768768471}";
"if $r2 != null goto data1 = newarray (byte)[dataSize1] {1768768471}" -> "dataCmp#99 = staticinvoke <berkeley.com.sleepycat.je.tree.Key: int compareUnsignedBytes(byte[],int,int,byte[],int,int)>(twoPartKey1, keySize1, dataSize1, twoPartKey2, keySize2, dataSize2) {2097169654}";
"if $r2 != null goto data1 = newarray (byte)[dataSize1] {1768768471}" -> "data1 = newarray (byte)[dataSize1] {455476565}";
"dataCmp#99 = staticinvoke <berkeley.com.sleepycat.je.tree.Key: int compareUnsignedBytes(byte[],int,int,byte[],int,int)>(twoPartKey1, keySize1, dataSize1, twoPartKey2, keySize2, dataSize2) {2097169654}" -> "goto [?= return dataCmp#99] {1652228055}";
"goto [?= return dataCmp#99] {1652228055}" -> "return dataCmp#99 {2065550956}";
"data1 = newarray (byte)[dataSize1] {455476565}" -> "data2 = newarray (byte)[dataSize2] {1453407979}";
"data2 = newarray (byte)[dataSize2] {1453407979}" -> "staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(twoPartKey1, keySize1, data1, 0, dataSize1) {1390936847}";
"staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(twoPartKey1, keySize1, data1, 0, dataSize1) {1390936847}" -> "staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(twoPartKey2, keySize2, data2, 0, dataSize2) {253666212}";
"staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(twoPartKey2, keySize2, data2, 0, dataSize2) {253666212}" -> "$r3 = this.<berkeley.com.sleepycat.je.dbi.DupKeyData$TwoPartKeyComparator: java.util.Comparator duplicateComparator> {165754312}";
"$r3 = this.<berkeley.com.sleepycat.je.dbi.DupKeyData$TwoPartKeyComparator: java.util.Comparator duplicateComparator> {165754312}" -> "dataCmp#99 = interfaceinvoke $r3.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(data1, data2) {1300274930}";
"dataCmp#99 = interfaceinvoke $r3.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(data1, data2) {1300274930}" -> "return dataCmp#99 {2065550956}";
"staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize1) {1051527885}"[fontcolor="blue", penwidth=3, color="blue"];
"staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize2) {1525362285}"[fontcolor="blue", penwidth=3, color="blue"];
"staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0) {648823031}"[fontcolor="blue", penwidth=3, color="blue"];
"staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize1) {1585074173}"[fontcolor="blue", penwidth=3, color="blue"];
"staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2) {1468392810}"[fontcolor="blue", penwidth=3, color="blue"];
"staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(keyCmp#34) {604706329}"[fontcolor="blue", penwidth=3, color="blue"];
"staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize2) {2082651251}"[fontcolor="blue", penwidth=3, color="blue"];
"staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize2) {153989604}"[fontcolor="blue", penwidth=3, color="blue"];
"staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize1) {139971997}"[fontcolor="blue", penwidth=3, color="blue"];
"staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize1) {95345256}"[fontcolor="blue", penwidth=3, color="blue"];
}


