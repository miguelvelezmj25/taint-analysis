    public java.util.Set getPackageJarEntries()
    {
        weka.core.WekaPackageLibIsolatingClassLoader this;
        java.util.Set $r0;

        this := @this: weka.core.WekaPackageLibIsolatingClassLoader;

        $r0 = this.<weka.core.WekaPackageLibIsolatingClassLoader: java.util.Set m_packageJarEntries>;

        return $r0;
    }

    public void <init>(weka.core.WekaPackageClassLoaderManager, java.io.File) throws java.lang.Exception
    {
        weka.core.WekaPackageLibIsolatingClassLoader this;
        weka.core.WekaPackageClassLoaderManager repo;
        java.io.File packageDir;
        java.lang.String debug;
        java.net.URL[] $r0;
        java.util.HashSet $r1, $r2, $r3, $r4;
        boolean $z0;

        this := @this: weka.core.WekaPackageLibIsolatingClassLoader;

        repo := @parameter0: weka.core.WekaPackageClassLoaderManager;

        packageDir := @parameter1: java.io.File;

        $r0 = newarray (java.net.URL)[0];

        specialinvoke this.<java.net.URLClassLoader: void <init>(java.net.URL[])>($r0);

        this.<weka.core.WekaPackageLibIsolatingClassLoader: java.lang.String m_packageName> = "";

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        this.<weka.core.WekaPackageLibIsolatingClassLoader: java.util.Set m_packageJarEntries> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        this.<weka.core.WekaPackageLibIsolatingClassLoader: java.util.Set m_packageJarResources> = $r2;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        this.<weka.core.WekaPackageLibIsolatingClassLoader: java.util.Set m_libJarEntries> = $r3;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        this.<weka.core.WekaPackageLibIsolatingClassLoader: java.util.Set m_packageDependencies> = $r4;

        debug = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("weka.core.classloader.debug", "false");

        $z0 = virtualinvoke debug.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        this.<weka.core.WekaPackageLibIsolatingClassLoader: boolean m_debug> = $z0;

        this.<weka.core.WekaPackageLibIsolatingClassLoader: weka.core.WekaPackageClassLoaderManager m_classloaderRepo> = repo;

        virtualinvoke this.<weka.core.WekaPackageLibIsolatingClassLoader: void init(java.io.File)>(packageDir);

        return;
    }

    protected void init(java.io.File) throws java.lang.Exception
    {
        weka.core.WekaPackageLibIsolatingClassLoader this;
        java.io.File packageDir;
        weka.core.packageManagement.Package toLoad, $r4;
        java.util.List jarsToBeIgnoredWhenLoadingClasses, deps;
        weka.core.packageManagement.Dependency d;
        weka.core.packageManagement.PackageConstraint target;
        java.lang.String dep, r, $r0, $r1, $r5, $r9, $r11, $r19, c#76, $r28, $r36, c#115, $r44;
        java.util.Iterator l5#15, l5#45, l5#70, l5#90, l5#109;
        boolean $z0, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.Object $r2, $r14, $r23, $r31, $r39;
        java.util.Set $r3, $r13, $r22, $r30, $r38;
        java.io.PrintStream $r6, $r12, $r15, $r20, $r21, $r24, $r29, $r32, $r37, $r40;
        java.lang.StringBuilder $r7, $r8, $r10, $r16, $r17, $r18, $r25, $r26, $r27, $r33, $r34, $r35, $r41, $r42, $r43;

        this := @this: weka.core.WekaPackageLibIsolatingClassLoader;

        packageDir := @parameter0: java.io.File;

        $r0 = virtualinvoke packageDir.<java.io.File: java.lang.String getName()>();

        this.<weka.core.WekaPackageLibIsolatingClassLoader: java.lang.String m_packageName> = $r0;

        $r1 = this.<weka.core.WekaPackageLibIsolatingClassLoader: java.lang.String m_packageName>;

        toLoad = staticinvoke <weka.core.WekaPackageManager: weka.core.packageManagement.Package getInstalledPackageInfo(java.lang.String)>($r1);

        jarsToBeIgnoredWhenLoadingClasses = virtualinvoke this.<weka.core.WekaPackageLibIsolatingClassLoader: java.util.List checkForNativeLibs(weka.core.packageManagement.Package,java.io.File)>(toLoad, packageDir);

        deps = virtualinvoke toLoad.<weka.core.packageManagement.Package: java.util.List getDependencies()>();

        l5#15 = interfaceinvoke deps.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke l5#15.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label02;

        $r2 = interfaceinvoke l5#15.<java.util.Iterator: java.lang.Object next()>();

        d = (weka.core.packageManagement.Dependency) $r2;

        target = virtualinvoke d.<weka.core.packageManagement.Dependency: weka.core.packageManagement.PackageConstraint getTarget()>();

        $r3 = this.<weka.core.WekaPackageLibIsolatingClassLoader: java.util.Set m_packageDependencies>;

        $r4 = virtualinvoke target.<weka.core.packageManagement.PackageConstraint: weka.core.packageManagement.Package getPackage()>();

        $r5 = virtualinvoke $r4.<weka.core.packageManagement.Package: java.lang.String getName()>();

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r5);

        goto label01;

     label02:
        $z2 = this.<weka.core.WekaPackageLibIsolatingClassLoader: boolean m_debug>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label05;

        $r6 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WekaPackageLibIsolatingClassLoader for: ");

        $r9 = this.<weka.core.WekaPackageLibIsolatingClassLoader: java.lang.String m_packageName>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r11);

        $r12 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r12.<java.io.PrintStream: void print(java.lang.String)>("\tDependencies:");

        $r13 = this.<weka.core.WekaPackageLibIsolatingClassLoader: java.util.Set m_packageDependencies>;

        l5#45 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        $z3 = interfaceinvoke l5#45.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label04;

        $r14 = interfaceinvoke l5#45.<java.util.Iterator: java.lang.Object next()>();

        dep = (java.lang.String) $r14;

        $r15 = <java.lang.System: java.io.PrintStream out>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(dep);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<java.io.PrintStream: void print(java.lang.String)>($r19);

        goto label03;

     label04:
        $r20 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r20.<java.io.PrintStream: void println()>();

     label05:
        virtualinvoke this.<weka.core.WekaPackageLibIsolatingClassLoader: void processDir(java.io.File,java.util.List,boolean)>(packageDir, jarsToBeIgnoredWhenLoadingClasses, 1);

        $z4 = this.<weka.core.WekaPackageLibIsolatingClassLoader: boolean m_debug>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label11;

        $r21 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>("\nPackage jar(s) classes:");

        $r22 = this.<weka.core.WekaPackageLibIsolatingClassLoader: java.util.Set m_packageJarEntries>;

        l5#70 = interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $z5 = interfaceinvoke l5#70.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label07;

        $r23 = interfaceinvoke l5#70.<java.util.Iterator: java.lang.Object next()>();

        c#76 = (java.lang.String) $r23;

        $r24 = <java.lang.System: java.io.PrintStream out>;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(c#76);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r24.<java.io.PrintStream: void println(java.lang.String)>($r28);

        goto label06;

     label07:
        $r29 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r29.<java.io.PrintStream: void println(java.lang.String)>("\nPackage jar(s) resources:");

        $r30 = this.<weka.core.WekaPackageLibIsolatingClassLoader: java.util.Set m_packageJarResources>;

        l5#90 = interfaceinvoke $r30.<java.util.Set: java.util.Iterator iterator()>();

     label08:
        $z6 = interfaceinvoke l5#90.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label09;

        $r31 = interfaceinvoke l5#90.<java.util.Iterator: java.lang.Object next()>();

        r = (java.lang.String) $r31;

        $r32 = <java.lang.System: java.io.PrintStream out>;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r32.<java.io.PrintStream: void println(java.lang.String)>($r36);

        goto label08;

     label09:
        $r37 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r37.<java.io.PrintStream: void println(java.lang.String)>("\nLib jar(s) classes:");

        $r38 = this.<weka.core.WekaPackageLibIsolatingClassLoader: java.util.Set m_libJarEntries>;

        l5#109 = interfaceinvoke $r38.<java.util.Set: java.util.Iterator iterator()>();

     label10:
        $z7 = interfaceinvoke l5#109.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 == 0 goto label11;

        $r39 = interfaceinvoke l5#109.<java.util.Iterator: java.lang.Object next()>();

        c#115 = (java.lang.String) $r39;

        $r40 = <java.lang.System: java.io.PrintStream out>;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(c#115);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r40.<java.io.PrintStream: void println(java.lang.String)>($r44);

        goto label10;

     label11:
        return;
    }

    protected java.util.List checkForNativeLibs(weka.core.packageManagement.Package, java.io.File)
    {
        weka.core.WekaPackageLibIsolatingClassLoader this;
        weka.core.packageManagement.Package toLoad;
        java.io.File packageDir, $r13;
        java.util.ArrayList jarsForClassloaderToIgnore, libsToInstall, $r0, $r6;
        java.lang.String nativeLibs, jarPath, lib, libName, injectDetails, entry#27, $r4, $r5, $r7, $r8, $r9, entry#114, jarPath#117, ignoreJar#133, ignoreJar#141, $r15, $r17, $r19, $r21;
        java.lang.String[] jarsWithLibs, jarAndEntries, libPathsInJar, l14, entries, l6#16, l6#103;
        int l15, $i0, l7#19, l8#21, $i1, l16#51, $i2, $i3, $i4, $i5, $i6, $i7, $i8, l7#106, l8#108, $i9, $i10;
        java.io.IOException e, $r10;
        java.lang.Exception e, $r22;
        java.lang.Object $r1, $r2, $r11, $r12;
        java.io.PrintStream $r3;
        boolean $z0, rootClassLoader#119, $z2, rootClassLoader#128;
        java.lang.StringBuilder $r14, $r16, $r18, $r20;

        this := @this: weka.core.WekaPackageLibIsolatingClassLoader;

        toLoad := @parameter0: weka.core.packageManagement.Package;

        packageDir := @parameter1: java.io.File;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        jarsForClassloaderToIgnore = $r0;

        $r1 = virtualinvoke toLoad.<weka.core.packageManagement.Package: java.lang.Object getPackageMetaDataElement(java.lang.Object)>("NativeLibs");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 == null goto label10;

        $r2 = virtualinvoke toLoad.<weka.core.packageManagement.Package: java.lang.Object getPackageMetaDataElement(java.lang.Object)>("NativeLibs");

        nativeLibs = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $i0 = virtualinvoke nativeLibs.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label10;

        jarsWithLibs = virtualinvoke nativeLibs.<java.lang.String: java.lang.String[] split(java.lang.String)>(";");

        l6#16 = jarsWithLibs;

        l7#19 = lengthof l6#16;

        l8#21 = 0;

     label01:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l8#21);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l7#19);

        if l8#21 >= l7#19 goto label10;

        entry#27 = l6#16[l8#21];

        jarAndEntries = virtualinvoke entry#27.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        $i1 = lengthof jarAndEntries;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 == 2 goto label02;

        $r3 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("Was expecting two entries for native lib spec - jar:comma-separated lib paths");

        goto label09;

     label02:
        $r4 = jarAndEntries[0];

        jarPath = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        $r5 = jarAndEntries[1];

        libPathsInJar = virtualinvoke $r5.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        libsToInstall = $r6;

        l14 = libPathsInJar;

        l15 = lengthof l14;

        l16#51 = 0;

     label03:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l16#51);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l15);

        if l16#51 >= l15 goto label05;

        lib = l14[l16#51];

        $r7 = virtualinvoke lib.<java.lang.String: java.lang.String trim()>();

        libName = virtualinvoke $r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\\", "/");

        $i2 = virtualinvoke libName.<java.lang.String: int lastIndexOf(java.lang.String)>("/");

        $i3 = $i2 + 1;

        $i4 = virtualinvoke libName.<java.lang.String: int length()>();

        $r8 = virtualinvoke libName.<java.lang.String: java.lang.String substring(int,int)>($i3, $i4);

        $z0 = virtualinvoke this.<weka.core.WekaPackageLibIsolatingClassLoader: boolean nativeLibInstalled(java.lang.String)>($r8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label04;

        $i5 = virtualinvoke libName.<java.lang.String: int lastIndexOf(java.lang.String)>("/");

        $i6 = $i5 + 1;

        $i7 = virtualinvoke libName.<java.lang.String: int length()>();

        $r9 = virtualinvoke libName.<java.lang.String: java.lang.String substring(int,int)>($i6, $i7);

        interfaceinvoke libsToInstall.<java.util.List: boolean add(java.lang.Object)>($r9);

     label04:
        l16#51 = l16#51 + 1;

        goto label03;

     label05:
        $i8 = interfaceinvoke libsToInstall.<java.util.List: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if $i8 <= 0 goto label09;

     label06:
        virtualinvoke this.<weka.core.WekaPackageLibIsolatingClassLoader: void installNativeLibs(java.io.File,java.lang.String,java.util.List)>(packageDir, jarPath, libsToInstall);

     label07:
        goto label09;

     label08:
        $r10 := @caughtexception;

        e = $r10;

        virtualinvoke e.<java.io.IOException: void printStackTrace()>();

     label09:
        l8#21 = l8#21 + 1;

        goto label01;

     label10:
        $r11 = virtualinvoke toLoad.<weka.core.packageManagement.Package: java.lang.Object getPackageMetaDataElement(java.lang.Object)>("InjectLoader");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r11);

        if $r11 == null goto label17;

        $r12 = virtualinvoke toLoad.<weka.core.packageManagement.Package: java.lang.Object getPackageMetaDataElement(java.lang.Object)>("InjectLoader");

        injectDetails = virtualinvoke $r12.<java.lang.Object: java.lang.String toString()>();

        entries = virtualinvoke injectDetails.<java.lang.String: java.lang.String[] split(java.lang.String)>(";");

        l6#103 = entries;

        l7#106 = lengthof l6#103;

        l8#108 = 0;

     label11:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l8#108);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l7#106);

        if l8#108 >= l7#106 goto label17;

        entry#114 = l6#103[l8#108];

        jarPath#117 = virtualinvoke entry#114.<java.lang.String: java.lang.String trim()>();

        rootClassLoader#119 = 0;

        $z2 = virtualinvoke jarPath#117.<java.lang.String: boolean startsWith(java.lang.String)>("root|");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label12;

        jarPath#117 = virtualinvoke jarPath#117.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("root|", "");

        rootClassLoader#128 = 1;

     label12:
        ignoreJar#133 = virtualinvoke jarPath#117.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\\", "/");

        $i9 = virtualinvoke ignoreJar#133.<java.lang.String: int lastIndexOf(java.lang.String)>("/");

        $i10 = $i9 + 1;

        ignoreJar#141 = virtualinvoke ignoreJar#133.<java.lang.String: java.lang.String substring(int)>($i10);

        interfaceinvoke jarsForClassloaderToIgnore.<java.util.List: boolean add(java.lang.Object)>(ignoreJar#141);

     label13:
        $r13 = new java.io.File;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke packageDir.<java.io.File: java.lang.String toString()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = <java.io.File: java.lang.String separator>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke jarPath#117.<java.lang.String: java.lang.String trim()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.io.File: void <init>(java.lang.String)>($r21);

        staticinvoke <weka.core.WekaPackageClassLoaderManager: void injectAllClassesInJar(java.io.File)>($r13);

     label14:
        goto label16;

     label15:
        $r22 := @caughtexception;

        e = $r22;

        virtualinvoke e.<java.lang.Exception: void printStackTrace()>();

     label16:
        l8#108 = l8#108 + 1;

        goto label11;

     label17:
        return jarsForClassloaderToIgnore;

        catch java.io.IOException from label06 to label07 with label08;
        catch java.lang.Exception from label13 to label14 with label15;
    }

    protected void processDir(java.io.File, java.util.List, boolean) throws java.net.MalformedURLException
    {
        weka.core.WekaPackageLibIsolatingClassLoader this;
        java.io.File dir, content;
        java.util.List jarsToIgnore;
        boolean topLevel, $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.io.File[] contents, l5;
        int l6, l7#8;
        java.net.URL url;
        java.lang.String $r0, $r1, $r2, $r8, $r10, $r14, $r16, $r18;
        java.net.URI $r3;
        java.util.Set $r4, $r17;
        java.io.PrintStream $r5, $r11;
        java.lang.StringBuilder $r6, $r7, $r9, $r12, $r13, $r15;

        this := @this: weka.core.WekaPackageLibIsolatingClassLoader;

        dir := @parameter0: java.io.File;

        jarsToIgnore := @parameter1: java.util.List;

        topLevel := @parameter2: boolean;

        contents = virtualinvoke dir.<java.io.File: java.io.File[] listFiles()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(contents);

        if contents == null goto label8;

        l5 = contents;

        l6 = lengthof l5;

        l7#8 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l7#8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l6);

        if l7#8 >= l6 goto label8;

        content = l5[l7#8];

        $z0 = virtualinvoke content.<java.io.File: boolean isFile()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label6;

        $r0 = virtualinvoke content.<java.io.File: java.lang.String getPath()>();

        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>(".jar");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label6;

        $r2 = virtualinvoke content.<java.io.File: java.lang.String getName()>();

        $z2 = interfaceinvoke jarsToIgnore.<java.util.List: boolean contains(java.lang.Object)>($r2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label2;

        goto label7;

     label2:
        $r3 = virtualinvoke content.<java.io.File: java.net.URI toURI()>();

        url = virtualinvoke $r3.<java.net.URI: java.net.URL toURL()>();

        virtualinvoke this.<weka.core.WekaPackageLibIsolatingClassLoader: void addURL(java.net.URL)>(url);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(topLevel);

        if topLevel == 0 goto label3;

        $r4 = this.<weka.core.WekaPackageLibIsolatingClassLoader: java.util.Set m_packageJarEntries>;

        virtualinvoke this.<weka.core.WekaPackageLibIsolatingClassLoader: void storeJarContents(java.io.File,java.util.Set,boolean)>(content, $r4, 1);

        $z3 = this.<weka.core.WekaPackageLibIsolatingClassLoader: boolean m_debug>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label5;

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package jar: ");

        $r8 = virtualinvoke content.<java.io.File: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r10);

        goto label5;

     label3:
        $z4 = this.<weka.core.WekaPackageLibIsolatingClassLoader: boolean m_debug>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label4;

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Lib jar: ");

        $r14 = virtualinvoke content.<java.io.File: java.lang.String toString()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r16);

     label4:
        $r17 = this.<weka.core.WekaPackageLibIsolatingClassLoader: java.util.Set m_libJarEntries>;

        virtualinvoke this.<weka.core.WekaPackageLibIsolatingClassLoader: void storeJarContents(java.io.File,java.util.Set,boolean)>(content, $r17, 0);

     label5:
        goto label7;

     label6:
        $z5 = virtualinvoke content.<java.io.File: boolean isDirectory()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label7;

        $r18 = virtualinvoke content.<java.io.File: java.lang.String getName()>();

        $z6 = virtualinvoke $r18.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("lib");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label7;

        virtualinvoke this.<weka.core.WekaPackageLibIsolatingClassLoader: void processDir(java.io.File,java.util.List,boolean)>(content, jarsToIgnore, 0);

     label7:
        l7#8 = l7#8 + 1;

        goto label1;

     label8:
        return;
    }

    protected void storeJarContents(java.io.File, java.util.Set, boolean)
    {
        weka.core.WekaPackageLibIsolatingClassLoader this;
        java.io.File jarFile;
        java.util.Set repo, $r5;
        boolean isTopLevelPackageJar, $z0, $z1, $z2, $z4, $z5;
        java.util.jar.JarFile jar, $r0;
        java.util.Enumeration enm;
        java.util.jar.JarEntry entry;
        java.lang.String cleanedUp, $r2, $r3, $r4, resource#32, $r6;
        java.io.IOException e, $r7;
        java.lang.Object $r1;

        this := @this: weka.core.WekaPackageLibIsolatingClassLoader;

        jarFile := @parameter0: java.io.File;

        repo := @parameter1: java.util.Set;

        isTopLevelPackageJar := @parameter2: boolean;

        $z0 = virtualinvoke jarFile.<java.io.File: boolean exists()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label7;

     label1:
        $r0 = new java.util.jar.JarFile;

        specialinvoke $r0.<java.util.jar.JarFile: void <init>(java.io.File)>(jarFile);

        jar = $r0;

        enm = virtualinvoke jar.<java.util.jar.JarFile: java.util.Enumeration entries()>();

     label2:
        $z1 = interfaceinvoke enm.<java.util.Enumeration: boolean hasMoreElements()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label5;

        $r1 = interfaceinvoke enm.<java.util.Enumeration: java.lang.Object nextElement()>();

        entry = (java.util.jar.JarEntry) $r1;

        $r2 = virtualinvoke entry.<java.util.jar.JarEntry: java.lang.String getName()>();

        $z2 = virtualinvoke $r2.<java.lang.String: boolean endsWith(java.lang.String)>(".class");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label3;

        $r3 = virtualinvoke entry.<java.util.jar.JarEntry: java.lang.String getName()>();

        cleanedUp = staticinvoke <weka.core.ClassCache: java.lang.String cleanUp(java.lang.String)>($r3);

        interfaceinvoke repo.<java.util.Set: boolean add(java.lang.Object)>(cleanedUp);

        goto label4;

     label3:
        $z4 = virtualinvoke entry.<java.util.jar.JarEntry: boolean isDirectory()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label4;

        $r4 = virtualinvoke entry.<java.util.jar.JarEntry: java.lang.String getName()>();

        $z5 = virtualinvoke $r4.<java.lang.String: boolean contains(java.lang.CharSequence)>("META-INF");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 != 0 goto label4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isTopLevelPackageJar);

        if isTopLevelPackageJar == 0 goto label4;

        resource#32 = virtualinvoke entry.<java.util.jar.JarEntry: java.lang.String getName()>();

        virtualinvoke resource#32.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\\", "/");

        $r5 = this.<weka.core.WekaPackageLibIsolatingClassLoader: java.util.Set m_packageJarResources>;

        $r6 = virtualinvoke entry.<java.util.jar.JarEntry: java.lang.String getName()>();

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>($r6);

     label4:
        goto label2;

     label5:
        goto label7;

     label6:
        $r7 := @caughtexception;

        e = $r7;

        virtualinvoke e.<java.io.IOException: void printStackTrace()>();

     label7:
        return;

        catch java.io.IOException from label1 to label5 with label6;
    }

    protected boolean nativeLibInstalled(java.lang.String)
    {
        weka.core.WekaPackageLibIsolatingClassLoader this;
        java.lang.String libName, $r1;
        java.io.File[] contents, l4;
        int l5, l6#10;
        java.io.File f, $r0;
        boolean result#2, $z0;

        this := @this: weka.core.WekaPackageLibIsolatingClassLoader;

        libName := @parameter0: java.lang.String;

        result#2 = 0;

        $r0 = <weka.core.WekaPackageManager: java.io.File NATIVE_LIBS_DIR>;

        contents = virtualinvoke $r0.<java.io.File: java.io.File[] listFiles()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(contents);

        if contents == null goto label3;

        l4 = contents;

        l5 = lengthof l4;

        l6#10 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l6#10);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l5);

        if l6#10 >= l5 goto label3;

        f = l4[l6#10];

        $r1 = virtualinvoke f.<java.io.File: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(libName);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        result#2 = 1;

        goto label3;

     label2:
        l6#10 = l6#10 + 1;

        goto label1;

     label3:
        return result#2;
    }

    protected void installNativeLibs(java.io.File, java.lang.String, java.util.List) throws java.io.IOException
    {
        weka.core.WekaPackageLibIsolatingClassLoader this;
        java.io.File packageDir, libJarFile, installPath, $r0, $r20, $r21;
        java.lang.String libJar, $r2, $r4, $r6, $r8, $r12, $r15, $r19, lastPart#46, lastPart#54;
        java.util.List libJarPaths;
        java.util.zip.ZipFile libZip, $r16;
        java.util.Enumeration enumeration;
        java.util.ArrayList libNames, $r17;
        java.util.zip.ZipEntry zipEntry;
        java.io.BufferedInputStream inS, $r22;
        java.io.BufferedOutputStream bos, $r24;
        java.lang.Throwable l13, $r26;
        java.lang.StringBuilder $r1, $r3, $r5, $r7, $r10, $r11, $r13, $r14;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.io.PrintStream $r9;
        java.lang.Object $r18;
        int $i0, $i1, $i2, $i3;
        java.io.InputStream $r23;
        java.io.FileOutputStream $r25;

        this := @this: weka.core.WekaPackageLibIsolatingClassLoader;

        packageDir := @parameter0: java.io.File;

        libJar := @parameter1: java.lang.String;

        libJarPaths := @parameter2: java.util.List;

        $r0 = new java.io.File;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke packageDir.<java.io.File: java.lang.String toString()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = <java.io.File: java.lang.String separator>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke libJar.<java.lang.String: java.lang.String trim()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r8);

        libJarFile = $r0;

        $z0 = virtualinvoke libJarFile.<java.io.File: boolean exists()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label01;

        $r9 = <java.lang.System: java.io.PrintStream err>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Native lib jar file \'");

        $r12 = virtualinvoke libJarFile.<java.io.File: java.lang.String toString()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not seem to exist - skipping");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r15);

        return;

     label01:
        $r16 = new java.util.zip.ZipFile;

        specialinvoke $r16.<java.util.zip.ZipFile: void <init>(java.io.File)>(libJarFile);

        libZip = $r16;

        enumeration = virtualinvoke libZip.<java.util.zip.ZipFile: java.util.Enumeration entries()>();

        $r17 = new java.util.ArrayList;

        specialinvoke $r17.<java.util.ArrayList: void <init>()>();

        libNames = $r17;

     label02:
        $z1 = interfaceinvoke enumeration.<java.util.Enumeration: boolean hasMoreElements()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label11;

        $r18 = interfaceinvoke enumeration.<java.util.Enumeration: java.lang.Object nextElement()>();

        zipEntry = (java.util.zip.ZipEntry) $r18;

        $z2 = virtualinvoke zipEntry.<java.util.zip.ZipEntry: boolean isDirectory()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label09;

        $r19 = virtualinvoke zipEntry.<java.util.zip.ZipEntry: java.lang.String getName()>();

        lastPart#46 = virtualinvoke $r19.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\\", "/");

        $i0 = virtualinvoke lastPart#46.<java.lang.String: int lastIndexOf(java.lang.String)>("/");

        $i1 = $i0 + 1;

        lastPart#54 = virtualinvoke lastPart#46.<java.lang.String: java.lang.String substring(int)>($i1);

        $z3 = interfaceinvoke libJarPaths.<java.util.List: boolean contains(java.lang.Object)>(lastPart#54);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label09;

        $r20 = new java.io.File;

        $r21 = <weka.core.WekaPackageManager: java.io.File NATIVE_LIBS_DIR>;

        specialinvoke $r20.<java.io.File: void <init>(java.io.File,java.lang.String)>($r21, lastPart#54);

        installPath = $r20;

        $z4 = virtualinvoke installPath.<java.io.File: boolean exists()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label08;

        $r22 = new java.io.BufferedInputStream;

        $r23 = virtualinvoke libZip.<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>(zipEntry);

        specialinvoke $r22.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r23);

        inS = $r22;

        $r24 = new java.io.BufferedOutputStream;

        $r25 = new java.io.FileOutputStream;

        specialinvoke $r25.<java.io.FileOutputStream: void <init>(java.io.File)>(installPath);

        specialinvoke $r24.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r25);

        bos = $r24;

     label03:
        staticinvoke <weka.core.WekaPackageLibIsolatingClassLoader: void copyStreams(java.io.InputStream,java.io.OutputStream)>(inS, bos);

     label04:
        virtualinvoke inS.<java.io.InputStream: void close()>();

        virtualinvoke bos.<java.io.BufferedOutputStream: void flush()>();

        virtualinvoke bos.<java.io.BufferedOutputStream: void close()>();

        goto label08;

     label05:
        $r26 := @caughtexception;

     label06:
        l13 = $r26;

     label07:
        virtualinvoke inS.<java.io.InputStream: void close()>();

        virtualinvoke bos.<java.io.BufferedOutputStream: void flush()>();

        virtualinvoke bos.<java.io.BufferedOutputStream: void close()>();

        throw l13;

     label08:
        interfaceinvoke libNames.<java.util.List: boolean add(java.lang.Object)>(lastPart#54);

     label09:
        $i2 = interfaceinvoke libNames.<java.util.List: int size()>();

        $i3 = interfaceinvoke libJarPaths.<java.util.List: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i2 != $i3 goto label10;

        goto label11;

     label10:
        goto label02;

     label11:
        virtualinvoke libZip.<java.util.zip.ZipFile: void close()>();

        return;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
    }

    private static void copyStreams(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.InputStream input;
        java.io.OutputStream output;
        byte[] data;
        int count, $i0;

        input := @parameter0: java.io.InputStream;

        output := @parameter1: java.io.OutputStream;

        data = newarray (byte)[1024];

     label1:
        $i0 = virtualinvoke input.<java.io.InputStream: int read(byte[],int,int)>(data, 0, 1024);

        count = $i0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 == -1 goto label2;

        virtualinvoke output.<java.io.OutputStream: void write(byte[],int,int)>(data, 0, count);

        goto label1;

     label2:
        return;
    }


