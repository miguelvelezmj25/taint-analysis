    void <init>(java.util.concurrent.ThreadPoolExecutor, java.lang.Runnable)
    {
        java.util.concurrent.ThreadPoolExecutor$Worker l0;
        java.util.concurrent.ThreadPoolExecutor l1;
        java.lang.Runnable l2;
        java.util.concurrent.ThreadFactory $r0;
        java.lang.Thread $r1;

        l0 := @this: java.util.concurrent.ThreadPoolExecutor$Worker;

        l1 := @parameter0: java.util.concurrent.ThreadPoolExecutor;

        l2 := @parameter1: java.lang.Runnable;

        l0.<java.util.concurrent.ThreadPoolExecutor$Worker: java.util.concurrent.ThreadPoolExecutor this$0> = l1;

        specialinvoke l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer: void <init>()>();

        virtualinvoke l0.<java.util.concurrent.ThreadPoolExecutor$Worker: void setState(int)>(-1);

        l0.<java.util.concurrent.ThreadPoolExecutor$Worker: java.lang.Runnable firstTask> = l2;

        $r0 = virtualinvoke l1.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.ThreadFactory getThreadFactory()>();

        $r1 = interfaceinvoke $r0.<java.util.concurrent.ThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>(l0);

        l0.<java.util.concurrent.ThreadPoolExecutor$Worker: java.lang.Thread thread> = $r1;

        return;
    }

    public boolean isLocked()
    {
        java.util.concurrent.ThreadPoolExecutor$Worker l0;
        boolean $z0;

        l0 := @this: java.util.concurrent.ThreadPoolExecutor$Worker;

        $z0 = virtualinvoke l0.<java.util.concurrent.ThreadPoolExecutor$Worker: boolean isHeldExclusively()>();

        return $z0;
    }

    protected boolean isHeldExclusively()
    {
        java.util.concurrent.ThreadPoolExecutor$Worker l0;
        int $i0;
        boolean $z0;

        l0 := @this: java.util.concurrent.ThreadPoolExecutor$Worker;

        $i0 = virtualinvoke l0.<java.util.concurrent.ThreadPoolExecutor$Worker: int getState()>();

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean tryLock()
    {
        java.util.concurrent.ThreadPoolExecutor$Worker l0;
        boolean $z0;

        l0 := @this: java.util.concurrent.ThreadPoolExecutor$Worker;

        $z0 = virtualinvoke l0.<java.util.concurrent.ThreadPoolExecutor$Worker: boolean tryAcquire(int)>(1);

        return $z0;
    }

    public void unlock()
    {
        java.util.concurrent.ThreadPoolExecutor$Worker l0;

        l0 := @this: java.util.concurrent.ThreadPoolExecutor$Worker;

        virtualinvoke l0.<java.util.concurrent.ThreadPoolExecutor$Worker: boolean release(int)>(1);

        return;
    }

    protected boolean tryAcquire(int)
    {
        java.util.concurrent.ThreadPoolExecutor$Worker l0;
        int l1;
        boolean $z0;
        java.lang.Thread $r0;

        l0 := @this: java.util.concurrent.ThreadPoolExecutor$Worker;

        l1 := @parameter0: int;

        $z0 = virtualinvoke l0.<java.util.concurrent.ThreadPoolExecutor$Worker: boolean compareAndSetState(int,int)>(0, 1);

        if $z0 == 0 goto label1;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke l0.<java.util.concurrent.ThreadPoolExecutor$Worker: void setExclusiveOwnerThread(java.lang.Thread)>($r0);

        return 1;

     label1:
        return 0;
    }

    protected boolean tryRelease(int)
    {
        java.util.concurrent.ThreadPoolExecutor$Worker l0;
        int l1;

        l0 := @this: java.util.concurrent.ThreadPoolExecutor$Worker;

        l1 := @parameter0: int;

        virtualinvoke l0.<java.util.concurrent.ThreadPoolExecutor$Worker: void setExclusiveOwnerThread(java.lang.Thread)>(null);

        virtualinvoke l0.<java.util.concurrent.ThreadPoolExecutor$Worker: void setState(int)>(0);

        return 1;
    }


