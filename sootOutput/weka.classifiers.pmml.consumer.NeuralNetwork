    public void <init>(org.w3c.dom.Element, weka.core.Instances, weka.core.pmml.MiningSchema) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.NeuralNetwork this;
        org.w3c.dom.Element model, $r10, $r15, $r20;
        weka.core.Instances dataDictionary;
        weka.core.pmml.MiningSchema miningSchema, $r11, $r21;
        java.lang.String fn, act, norm, thresh, width, alt, $r6, $r7;
        weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction[] l6;
        weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction a, $r1;
        weka.classifiers.pmml.consumer.NeuralNetwork$Normalization n, $r2;
        org.w3c.dom.NodeList inputL, layerL, outputL;
        org.w3c.dom.Node inputN, layerN, $r19;
        weka.classifiers.pmml.consumer.NeuralNetwork$NeuralInput nI, $r9;
        weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer nL, $r14;
        weka.classifiers.pmml.consumer.NeuralNetwork$MiningFunction $r0, $r4;
        java.util.HashMap $r3;
        boolean $z0, $z1, $z2;
        int $i0, l7#49, l8#51, $i1, l8#73, l9#75, $i2, $i3, $i4, $i5, $i6, i#125, $i7, $i9, $i10, i#156, $i11, $i13;
        java.lang.Exception $r5, $r17;
        weka.classifiers.pmml.consumer.NeuralNetwork$Normalization[] l7#70;
        double $d0, $d1, $d2;
        weka.classifiers.pmml.consumer.NeuralNetwork$NeuralInput[] $r8, $r12;
        short $s8, $s12;
        weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer[] $r13, $r16;
        weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs $r18;

        this := @this: weka.classifiers.pmml.consumer.NeuralNetwork;

        model := @parameter0: org.w3c.dom.Element;

        dataDictionary := @parameter1: weka.core.Instances;

        miningSchema := @parameter2: weka.core.pmml.MiningSchema;

        specialinvoke this.<weka.classifiers.pmml.consumer.PMMLClassifier: void <init>(weka.core.Instances,weka.core.pmml.MiningSchema)>(dataDictionary, miningSchema);

        $r0 = <weka.classifiers.pmml.consumer.NeuralNetwork$MiningFunction: weka.classifiers.pmml.consumer.NeuralNetwork$MiningFunction CLASSIFICATION>;

        this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.classifiers.pmml.consumer.NeuralNetwork$MiningFunction m_functionType> = $r0;

        $r1 = <weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction ARCTAN>;

        this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction m_activationFunction> = $r1;

        $r2 = <weka.classifiers.pmml.consumer.NeuralNetwork$Normalization: weka.classifiers.pmml.consumer.NeuralNetwork$Normalization NONE>;

        this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.classifiers.pmml.consumer.NeuralNetwork$Normalization m_normalizationMethod> = $r2;

        this.<weka.classifiers.pmml.consumer.NeuralNetwork: double m_threshold> = 0.0;

        this.<weka.classifiers.pmml.consumer.NeuralNetwork: double m_width> = #NaN;

        this.<weka.classifiers.pmml.consumer.NeuralNetwork: double m_altitude> = 1.0;

        this.<weka.classifiers.pmml.consumer.NeuralNetwork: int m_numberOfInputs> = 0;

        this.<weka.classifiers.pmml.consumer.NeuralNetwork: int m_numberOfLayers> = 0;

        this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.classifiers.pmml.consumer.NeuralNetwork$NeuralInput[] m_inputs> = null;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        this.<weka.classifiers.pmml.consumer.NeuralNetwork: java.util.HashMap m_inputMap> = $r3;

        this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer[] m_layers> = null;

        this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs m_outputs> = null;

        fn = interfaceinvoke model.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("functionName");

        $z0 = virtualinvoke fn.<java.lang.String: boolean equals(java.lang.Object)>("regression");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label01;

        $r4 = <weka.classifiers.pmml.consumer.NeuralNetwork$MiningFunction: weka.classifiers.pmml.consumer.NeuralNetwork$MiningFunction REGRESSION>;

        this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.classifiers.pmml.consumer.NeuralNetwork$MiningFunction m_functionType> = $r4;

     label01:
        act = interfaceinvoke model.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("activationFunction");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(act);

        if act == null goto label02;

        $i0 = virtualinvoke act.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 0 goto label03;

     label02:
        $r5 = new java.lang.Exception;

        specialinvoke $r5.<java.lang.Exception: void <init>(java.lang.String)>("[NeuralNetwork] no activation functon defined");

        throw $r5;

     label03:
        l6 = staticinvoke <weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction[] values()>();

        l7#49 = lengthof l6;

        l8#51 = 0;

     label04:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l8#51);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l7#49);

        if l8#51 >= l7#49 goto label06;

        a = l6[l8#51];

        $r6 = virtualinvoke a.<weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: java.lang.String toString()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(act);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label05;

        this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction m_activationFunction> = a;

        goto label06;

     label05:
        l8#51 = l8#51 + 1;

        goto label04;

     label06:
        norm = interfaceinvoke model.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("normalizationMethod");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(norm);

        if norm == null goto label09;

        $i1 = virtualinvoke norm.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 0 goto label09;

        l7#70 = staticinvoke <weka.classifiers.pmml.consumer.NeuralNetwork$Normalization: weka.classifiers.pmml.consumer.NeuralNetwork$Normalization[] values()>();

        l8#73 = lengthof l7#70;

        l9#75 = 0;

     label07:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l9#75);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l8#73);

        if l9#75 >= l8#73 goto label09;

        n = l7#70[l9#75];

        $r7 = virtualinvoke n.<weka.classifiers.pmml.consumer.NeuralNetwork$Normalization: java.lang.String toString()>();

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(norm);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label08;

        this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.classifiers.pmml.consumer.NeuralNetwork$Normalization m_normalizationMethod> = n;

        goto label09;

     label08:
        l9#75 = l9#75 + 1;

        goto label07;

     label09:
        thresh = interfaceinvoke model.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("threshold");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(thresh);

        if thresh == null goto label10;

        $i2 = virtualinvoke thresh.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 <= 0 goto label10;

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(thresh);

        this.<weka.classifiers.pmml.consumer.NeuralNetwork: double m_threshold> = $d0;

     label10:
        width = interfaceinvoke model.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("width");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(width);

        if width == null goto label11;

        $i3 = virtualinvoke width.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 <= 0 goto label11;

        $d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(width);

        this.<weka.classifiers.pmml.consumer.NeuralNetwork: double m_width> = $d1;

     label11:
        alt = interfaceinvoke model.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("altitude");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(alt);

        if alt == null goto label12;

        $i4 = virtualinvoke alt.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 <= 0 goto label12;

        $d2 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(alt);

        this.<weka.classifiers.pmml.consumer.NeuralNetwork: double m_altitude> = $d2;

     label12:
        inputL = interfaceinvoke model.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("NeuralInput");

        $i5 = interfaceinvoke inputL.<org.w3c.dom.NodeList: int getLength()>();

        this.<weka.classifiers.pmml.consumer.NeuralNetwork: int m_numberOfInputs> = $i5;

        $i6 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: int m_numberOfInputs>;

        $r8 = newarray (weka.classifiers.pmml.consumer.NeuralNetwork$NeuralInput)[$i6];

        this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.classifiers.pmml.consumer.NeuralNetwork$NeuralInput[] m_inputs> = $r8;

        i#125 = 0;

     label13:
        $i7 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: int m_numberOfInputs>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#125);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if i#125 >= $i7 goto label15;

        inputN = interfaceinvoke inputL.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i#125);

        $s8 = interfaceinvoke inputN.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s8);

        if $s8 != 1 goto label14;

        $r9 = new weka.classifiers.pmml.consumer.NeuralNetwork$NeuralInput;

        $r10 = (org.w3c.dom.Element) inputN;

        $r11 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.core.pmml.MiningSchema m_miningSchema>;

        specialinvoke $r9.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralInput: void <init>(org.w3c.dom.Element,weka.core.pmml.MiningSchema)>($r10, $r11);

        nI = $r9;

        $r12 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.classifiers.pmml.consumer.NeuralNetwork$NeuralInput[] m_inputs>;

        $r12[i#125] = nI;

     label14:
        i#125 = i#125 + 1;

        goto label13;

     label15:
        layerL = interfaceinvoke model.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("NeuralLayer");

        $i9 = interfaceinvoke layerL.<org.w3c.dom.NodeList: int getLength()>();

        this.<weka.classifiers.pmml.consumer.NeuralNetwork: int m_numberOfLayers> = $i9;

        $i10 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: int m_numberOfLayers>;

        $r13 = newarray (weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer)[$i10];

        this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer[] m_layers> = $r13;

        i#156 = 0;

     label16:
        $i11 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: int m_numberOfLayers>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#156);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i11);

        if i#156 >= $i11 goto label18;

        layerN = interfaceinvoke layerL.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i#156);

        $s12 = interfaceinvoke layerN.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s12);

        if $s12 != 1 goto label17;

        $r14 = new weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer;

        $r15 = (org.w3c.dom.Element) layerN;

        specialinvoke $r14.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: void <init>(weka.classifiers.pmml.consumer.NeuralNetwork,org.w3c.dom.Element)>(this, $r15);

        nL = $r14;

        $r16 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer[] m_layers>;

        $r16[i#156] = nL;

     label17:
        i#156 = i#156 + 1;

        goto label16;

     label18:
        outputL = interfaceinvoke model.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("NeuralOutputs");

        $i13 = interfaceinvoke outputL.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i13);

        if $i13 == 1 goto label19;

        $r17 = new java.lang.Exception;

        specialinvoke $r17.<java.lang.Exception: void <init>(java.lang.String)>("[NeuralNetwork] Should be just one NeuralOutputs element defined!");

        throw $r17;

     label19:
        $r18 = new weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs;

        $r19 = interfaceinvoke outputL.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        $r20 = (org.w3c.dom.Element) $r19;

        $r21 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.core.pmml.MiningSchema m_miningSchema>;

        specialinvoke $r18.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs: void <init>(org.w3c.dom.Element,weka.core.pmml.MiningSchema)>($r20, $r21);

        this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs m_outputs> = $r18;

        return;
    }

    public double[] distributionForInstance(weka.core.Instance) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.NeuralNetwork this;
        weka.core.Instance inst;
        double[] incoming, preds#15;
        java.lang.String message, ID, $r20, $r35;
        weka.core.pmml.TargetMetaInfo targetData;
        weka.core.Instances miningSchemaI, $r0, $r2, $r5, $r10, $r15, $r18, $r26, $r30;
        double networkInVal, $d0, $d1, $d2, $d3;
        boolean $z0, $z1, hasMissing#29, $z2, $z3, $z4, $z5, $z6, $z7;
        weka.core.pmml.MiningSchema $r1, $r4, $r8, $r9, $r11, $r14, $r17, $r25, $r28, $r29, $r32;
        weka.core.Attribute $r3, $r6, $r16, $r19, $r27, $r31, $r33, $r34;
        int $i0, i#31, $i1, $i2, i#98, $i3, i#114, $i4, i#145, $i5;
        weka.core.pmml.MappingInfo $r7;
        java.lang.StringBuilder $r12, $r13, $r21;
        weka.gui.Logger $r22, $r24;
        java.io.PrintStream $r23;
        java.util.HashMap $r36, $r42, $r46, layerOut#143;
        weka.classifiers.pmml.consumer.NeuralNetwork$NeuralInput[] $r37, $r38, $r40;
        weka.classifiers.pmml.consumer.NeuralNetwork$NeuralInput $r39, $r41;
        java.lang.Double $r43;
        weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer[] $r44, $r47, $r48;
        weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer $r45, $r49;
        weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs $r50;

        this := @this: weka.classifiers.pmml.consumer.NeuralNetwork;

        inst := @parameter0: weka.core.Instance;

        $z0 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: boolean m_initialized>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label01;

        $r0 = interfaceinvoke inst.<weka.core.Instance: weka.core.Instances dataset()>();

        virtualinvoke this.<weka.classifiers.pmml.consumer.NeuralNetwork: void mapToMiningSchema(weka.core.Instances)>($r0);

     label01:
        $r1 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.core.pmml.MiningSchema m_miningSchema>;

        $r2 = virtualinvoke $r1.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r3 = virtualinvoke $r2.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z1 = virtualinvoke $r3.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label02;

        preds#15 = newarray (double)[1];

        goto label03;

     label02:
        $r4 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.core.pmml.MiningSchema m_miningSchema>;

        $r5 = virtualinvoke $r4.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r6 = virtualinvoke $r5.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $i0 = virtualinvoke $r6.<weka.core.Attribute: int numValues()>();

        preds#15 = newarray (double)[$i0];

     label03:
        $r7 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.core.pmml.MappingInfo m_fieldsMap>;

        $r8 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.core.pmml.MiningSchema m_miningSchema>;

        incoming = virtualinvoke $r7.<weka.core.pmml.MappingInfo: double[] instanceToSchema(weka.core.Instance,weka.core.pmml.MiningSchema)>(inst, $r8);

        hasMissing#29 = 0;

        i#31 = 0;

     label04:
        $i1 = lengthof incoming;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#31);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#31 >= $i1 goto label06;

        $r9 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.core.pmml.MiningSchema m_miningSchema>;

        $r10 = virtualinvoke $r9.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $i2 = virtualinvoke $r10.<weka.core.Instances: int classIndex()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#31);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#31 == $i2 goto label05;

        $d0 = incoming[i#31];

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label05;

        hasMissing#29 = 1;

        goto label06;

     label05:
        i#31 = i#31 + 1;

        goto label04;

     label06:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(hasMissing#29);

        if hasMissing#29 == 0 goto label17;

        $r11 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.core.pmml.MiningSchema m_miningSchema>;

        $z3 = virtualinvoke $r11.<weka.core.pmml.MiningSchema: boolean hasTargetMetaData()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label13;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[NeuralNetwork] WARNING: Instance to predict has missing value(s) but there is no missing value handling meta data and no prior probabilities/default value to fall back to. No prediction will be made (");

        $r14 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.core.pmml.MiningSchema m_miningSchema>;

        $r15 = virtualinvoke $r14.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r16 = virtualinvoke $r15.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z4 = virtualinvoke $r16.<weka.core.Attribute: boolean isNominal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label07;

        $r17 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.core.pmml.MiningSchema m_miningSchema>;

        $r18 = virtualinvoke $r17.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r19 = virtualinvoke $r18.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z5 = virtualinvoke $r19.<weka.core.Attribute: boolean isString()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label08;

     label07:
        $r20 = "zero probabilities output).";

        goto label09;

     label08:
        $r20 = "NaN output).";

     label09:
        $r21 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        message = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.gui.Logger m_log>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r22);

        if $r22 != null goto label10;

        $r23 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>(message);

        goto label11;

     label10:
        $r24 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.gui.Logger m_log>;

        interfaceinvoke $r24.<weka.gui.Logger: void logMessage(java.lang.String)>(message);

     label11:
        $r25 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.core.pmml.MiningSchema m_miningSchema>;

        $r26 = virtualinvoke $r25.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r27 = virtualinvoke $r26.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z6 = virtualinvoke $r27.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label12;

        $d1 = staticinvoke <weka.core.Utils: double missingValue()>();

        preds#15[0] = $d1;

     label12:
        return preds#15;

     label13:
        $r28 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.core.pmml.MiningSchema m_miningSchema>;

        targetData = virtualinvoke $r28.<weka.core.pmml.MiningSchema: weka.core.pmml.TargetMetaInfo getTargetMetaData()>();

        $r29 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.core.pmml.MiningSchema m_miningSchema>;

        $r30 = virtualinvoke $r29.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r31 = virtualinvoke $r30.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z7 = virtualinvoke $r31.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 == 0 goto label14;

        $d2 = virtualinvoke targetData.<weka.core.pmml.TargetMetaInfo: double getDefaultValue()>();

        preds#15[0] = $d2;

        goto label16;

     label14:
        $r32 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.core.pmml.MiningSchema m_miningSchema>;

        miningSchemaI = virtualinvoke $r32.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        i#98 = 0;

     label15:
        $r33 = virtualinvoke miningSchemaI.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $i3 = virtualinvoke $r33.<weka.core.Attribute: int numValues()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#98);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if i#98 >= $i3 goto label16;

        $r34 = virtualinvoke miningSchemaI.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $r35 = virtualinvoke $r34.<weka.core.Attribute: java.lang.String value(int)>(i#98);

        $d3 = virtualinvoke targetData.<weka.core.pmml.TargetMetaInfo: double getPriorProbability(java.lang.String)>($r35);

        preds#15[i#98] = $d3;

        i#98 = i#98 + 1;

        goto label15;

     label16:
        return preds#15;

     label17:
        $r36 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: java.util.HashMap m_inputMap>;

        virtualinvoke $r36.<java.util.HashMap: void clear()>();

        i#114 = 0;

     label18:
        $r37 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.classifiers.pmml.consumer.NeuralNetwork$NeuralInput[] m_inputs>;

        $i4 = lengthof $r37;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#114);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if i#114 >= $i4 goto label19;

        $r38 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.classifiers.pmml.consumer.NeuralNetwork$NeuralInput[] m_inputs>;

        $r39 = $r38[i#114];

        networkInVal = virtualinvoke $r39.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralInput: double getValue(double[])>(incoming);

        $r40 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.classifiers.pmml.consumer.NeuralNetwork$NeuralInput[] m_inputs>;

        $r41 = $r40[i#114];

        ID = staticinvoke <weka.classifiers.pmml.consumer.NeuralNetwork$NeuralInput: java.lang.String access$100(weka.classifiers.pmml.consumer.NeuralNetwork$NeuralInput)>($r41);

        $r42 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: java.util.HashMap m_inputMap>;

        $r43 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(networkInVal);

        virtualinvoke $r42.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(ID, $r43);

        i#114 = i#114 + 1;

        goto label18;

     label19:
        $r44 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer[] m_layers>;

        $r45 = $r44[0];

        $r46 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: java.util.HashMap m_inputMap>;

        layerOut#143 = virtualinvoke $r45.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: java.util.HashMap computeOutput(java.util.HashMap)>($r46);

        i#145 = 1;

     label20:
        $r47 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer[] m_layers>;

        $i5 = lengthof $r47;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#145);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if i#145 >= $i5 goto label21;

        $r48 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer[] m_layers>;

        $r49 = $r48[i#145];

        layerOut#143 = virtualinvoke $r49.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: java.util.HashMap computeOutput(java.util.HashMap)>(layerOut#143);

        i#145 = i#145 + 1;

        goto label20;

     label21:
        $r50 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs m_outputs>;

        virtualinvoke $r50.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs: void getOuput(java.util.HashMap,double[])>(layerOut#143, preds#15);

        return preds#15;
    }

    public java.lang.String toString()
    {
        weka.classifiers.pmml.consumer.NeuralNetwork this;
        java.lang.StringBuffer temp, $r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r8, $r9, $r11, $r20, $r23, $r24, $r28, $r29, $r30, $r31, $r34, $r37, $r38;
        java.lang.String $r3, $r5, $r7, $r10, $r12, $r25, $r32, $r39, $r44;
        boolean $z0;
        weka.core.pmml.MiningSchema $r16;
        int i#41, $i0, i#59, $i1, $i2;
        weka.classifiers.pmml.consumer.NeuralNetwork$NeuralInput[] $r19, $r21;
        weka.classifiers.pmml.consumer.NeuralNetwork$NeuralInput $r22;
        weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer[] $r27, $r35;
        weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer $r36;
        weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs $r42;

        this := @this: weka.classifiers.pmml.consumer.NeuralNetwork;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        temp = $r0;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PMML version ");

        $r3 = virtualinvoke this.<weka.classifiers.pmml.consumer.NeuralNetwork: java.lang.String getPMMLVersion()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke this.<weka.classifiers.pmml.consumer.NeuralNetwork: java.lang.String getCreatorApplication()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("?");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nApplication: ");

        $r10 = virtualinvoke this.<weka.classifiers.pmml.consumer.NeuralNetwork: java.lang.String getCreatorApplication()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

     label1:
        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\nPMML Model: Neural network");

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\n");

        $r16 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.core.pmml.MiningSchema m_miningSchema>;

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r16);

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Inputs:\n");

        i#41 = 0;

     label2:
        $r19 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.classifiers.pmml.consumer.NeuralNetwork$NeuralInput[] m_inputs>;

        $i0 = lengthof $r19;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#41);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#41 >= $i0 goto label3;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.classifiers.pmml.consumer.NeuralNetwork$NeuralInput[] m_inputs>;

        $r22 = $r21[i#41];

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

        i#41 = i#41 + 1;

        goto label2;

     label3:
        i#59 = 0;

     label4:
        $r27 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer[] m_layers>;

        $i1 = lengthof $r27;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#59);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#59 >= $i1 goto label5;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Layer: ");

        $i2 = i#59 + 1;

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r32);

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer[] m_layers>;

        $r36 = $r35[i#59];

        $r37 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r39);

        i#59 = i#59 + 1;

        goto label4;

     label5:
        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Outputs:\n");

        $r42 = this.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs m_outputs>;

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r42);

        $r44 = virtualinvoke temp.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r44;
    }


