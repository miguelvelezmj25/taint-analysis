    public boolean forward(kanzi.SliceByteArray, kanzi.SliceByteArray)
    {
        kanzi.transform.BWTS this;
        kanzi.SliceByteArray src, dst;
        int count, srcIdx, dstIdx, startRank, nextRankStart, srcIdx2, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, i#86, $i11, min#97, idxMin#99, i#101, $i12, $i13, refRank#121, j#125, testRank#131, $i14, $i15, $i16, $i18, $i20, $i21, min#180, i#185, $i22, $i23, $i24, $i25, $i27, $i28, $i30, $i32, $i33, $i34, $i35;
        byte[] input, output, $r0, $r1, $r2;
        int[] sa, isa, $r7, $r8, $r9, $r10;
        boolean $z0, $z1;
        byte $b8, $b17, $b19, $b26, $b29, $b31;
        kanzi.transform.DivSufSort $r5, $r6, $r11;

        this := @this: kanzi.transform.BWTS;

        src := @parameter0: kanzi.SliceByteArray;

        dst := @parameter1: kanzi.SliceByteArray;

        $z0 = staticinvoke <kanzi.SliceByteArray: boolean isValid(kanzi.SliceByteArray)>(src);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label01;

        $z1 = staticinvoke <kanzi.SliceByteArray: boolean isValid(kanzi.SliceByteArray)>(dst);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label02;

     label01:
        return 0;

     label02:
        $r0 = src.<kanzi.SliceByteArray: byte[] array>;

        $r1 = dst.<kanzi.SliceByteArray: byte[] array>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r0 != $r1 goto label03;

        return 0;

     label03:
        count = src.<kanzi.SliceByteArray: int length>;

        $i0 = staticinvoke <kanzi.transform.BWTS: int maxBlockSize()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if count <= $i0 goto label04;

        return 0;

     label04:
        $i1 = dst.<kanzi.SliceByteArray: int index>;

        $i2 = $i1 + count;

        $r2 = dst.<kanzi.SliceByteArray: byte[] array>;

        $i3 = lengthof $r2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i2 <= $i3 goto label05;

        return 0;

     label05:
        input = src.<kanzi.SliceByteArray: byte[] array>;

        output = dst.<kanzi.SliceByteArray: byte[] array>;

        srcIdx = src.<kanzi.SliceByteArray: int index>;

        dstIdx = dst.<kanzi.SliceByteArray: int index>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count);

        if count >= 2 goto label07;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count);

        if count != 1 goto label06;

        $i4 = dst.<kanzi.SliceByteArray: int index>;

        $i5 = $i4 + 1;

        dst.<kanzi.SliceByteArray: int index> = $i5;

        $i6 = src.<kanzi.SliceByteArray: int index>;

        $i7 = $i6 + 1;

        src.<kanzi.SliceByteArray: int index> = $i7;

        $b8 = input[$i6];

        output[$i4] = $b8;

     label06:
        return 1;

     label07:
        $r5 = this.<kanzi.transform.BWTS: kanzi.transform.DivSufSort saAlgo>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r5);

        if $r5 != null goto label08;

        $r6 = new kanzi.transform.DivSufSort;

        specialinvoke $r6.<kanzi.transform.DivSufSort: void <init>()>();

        this.<kanzi.transform.BWTS: kanzi.transform.DivSufSort saAlgo> = $r6;

     label08:
        $r7 = this.<kanzi.transform.BWTS: int[] buffer1>;

        $i9 = lengthof $r7;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count);

        if $i9 >= count goto label09;

        $r8 = newarray (int)[count];

        this.<kanzi.transform.BWTS: int[] buffer1> = $r8;

     label09:
        $r9 = this.<kanzi.transform.BWTS: int[] buffer2>;

        $i10 = lengthof $r9;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i10);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count);

        if $i10 >= count goto label10;

        $r10 = newarray (int)[count];

        this.<kanzi.transform.BWTS: int[] buffer2> = $r10;

     label10:
        sa = this.<kanzi.transform.BWTS: int[] buffer1>;

        isa = this.<kanzi.transform.BWTS: int[] buffer2>;

        $r11 = this.<kanzi.transform.BWTS: kanzi.transform.DivSufSort saAlgo>;

        virtualinvoke $r11.<kanzi.transform.DivSufSort: void computeSuffixArray(byte[],int[],int,int)>(input, sa, srcIdx, count);

        i#86 = 0;

     label11:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#86);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count);

        if i#86 >= count goto label12;

        $i11 = sa[i#86];

        isa[$i11] = i#86;

        i#86 = i#86 + 1;

        goto label11;

     label12:
        min#97 = isa[0];

        idxMin#99 = 0;

        i#101 = 1;

     label13:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#101);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count);

        if i#101 >= count goto label22;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(min#97);

        if min#97 <= 0 goto label22;

        $i12 = isa[i#101];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(min#97);

        if $i12 < min#97 goto label14;

        goto label21;

     label14:
        $i13 = i#101 - idxMin#99;

        refRank#121 = specialinvoke this.<kanzi.transform.BWTS: int moveLyndonWordHead(int[],int[],byte[],int,int,int,int,int)>(sa, isa, input, count, srcIdx, idxMin#99, $i13, min#97);

        j#125 = i#101 - 1;

     label15:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#125);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(idxMin#99);

        if j#125 <= idxMin#99 goto label20;

        testRank#131 = isa[j#125];

        startRank = testRank#131;

     label16:
        $i14 = count - 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(testRank#131);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i14);

        if testRank#131 >= $i14 goto label18;

        $i15 = testRank#131 + 1;

        nextRankStart = sa[$i15];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#125);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(nextRankStart);

        if j#125 > nextRankStart goto label18;

        $i16 = srcIdx + j#125;

        $b17 = input[$i16];

        $i18 = srcIdx + nextRankStart;

        $b19 = input[$i18];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b17);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b19);

        if $b17 != $b19 goto label18;

        $i20 = nextRankStart + 1;

        $i21 = isa[$i20];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(refRank#121);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i21);

        if refRank#121 >= $i21 goto label17;

        goto label18;

     label17:
        sa[testRank#131] = nextRankStart;

        isa[nextRankStart] = testRank#131;

        testRank#131 = testRank#131 + 1;

        goto label16;

     label18:
        sa[testRank#131] = j#125;

        isa[j#125] = testRank#131;

        refRank#121 = testRank#131;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(startRank);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(testRank#131);

        if startRank != testRank#131 goto label19;

        goto label20;

     label19:
        j#125 = j#125 + -1;

        goto label15;

     label20:
        min#97 = isa[i#101];

        idxMin#99 = i#101;

     label21:
        i#101 = i#101 + 1;

        goto label13;

     label22:
        min#180 = count;

        srcIdx2 = srcIdx - 1;

        i#185 = 0;

     label23:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#185);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count);

        if i#185 >= count goto label27;

        $i22 = isa[i#185];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i22);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(min#180);

        if $i22 < min#180 goto label24;

        $i23 = isa[i#185];

        $i24 = dstIdx + $i23;

        $i25 = srcIdx2 + i#185;

        $b26 = input[$i25];

        output[$i24] = $b26;

        goto label26;

     label24:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(min#180);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count);

        if min#180 >= count goto label25;

        $i27 = dstIdx + min#180;

        $i28 = srcIdx2 + i#185;

        $b29 = input[$i28];

        output[$i27] = $b29;

     label25:
        min#180 = isa[i#185];

     label26:
        i#185 = i#185 + 1;

        goto label23;

     label27:
        $i30 = srcIdx2 + count;

        $b31 = input[$i30];

        output[dstIdx] = $b31;

        $i32 = src.<kanzi.SliceByteArray: int index>;

        $i33 = $i32 + count;

        src.<kanzi.SliceByteArray: int index> = $i33;

        $i34 = dst.<kanzi.SliceByteArray: int index>;

        $i35 = $i34 + count;

        dst.<kanzi.SliceByteArray: int index> = $i35;

        return 1;
    }

    private static int maxBlockSize()
    {
        return 1073741824;
    }

    public void <init>()
    {
        kanzi.transform.BWTS this;
        int[] $r0, $r1, $r2;

        this := @this: kanzi.transform.BWTS;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = newarray (int)[0];

        this.<kanzi.transform.BWTS: int[] buffer1> = $r0;

        $r1 = newarray (int)[0];

        this.<kanzi.transform.BWTS: int[] buffer2> = $r1;

        $r2 = newarray (int)[256];

        this.<kanzi.transform.BWTS: int[] buckets> = $r2;

        return;
    }

    private int moveLyndonWordHead(int[], int[], byte[], int, int, int, int, int)
    {
        kanzi.transform.BWTS this;
        int[] sa, isa;
        byte[] data;
        int count, srcIdx, start, size, end, startIdx, nextStart0, rank#1, $i0, $i1, nextStart#20, k#22, $i2, $i4, $i6, $i7, $i10;
        byte $b3, $b5, $b8, $b11;
        short $s9, $s12;

        this := @this: kanzi.transform.BWTS;

        sa := @parameter0: int[];

        isa := @parameter1: int[];

        data := @parameter2: byte[];

        count := @parameter3: int;

        srcIdx := @parameter4: int;

        start := @parameter5: int;

        size := @parameter6: int;

        rank#1 := @parameter7: int;

        end = start + size;

        startIdx = srcIdx + start;

     label1:
        $i0 = rank#1 + 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count);

        if $i0 >= count goto label7;

        $i1 = rank#1 + 1;

        nextStart0 = sa[$i1];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(nextStart0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(end);

        if nextStart0 > end goto label2;

        goto label7;

     label2:
        nextStart#20 = nextStart0;

        k#22 = 0;

     label3:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(k#22);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(size);

        if k#22 >= size goto label4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(nextStart#20);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count);

        if nextStart#20 >= count goto label4;

        $i2 = startIdx + k#22;

        $b3 = data[$i2];

        $i4 = srcIdx + nextStart#20;

        $b5 = data[$i4];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b5);

        if $b3 != $b5 goto label4;

        k#22 = k#22 + 1;

        nextStart#20 = nextStart#20 + 1;

        goto label3;

     label4:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(k#22);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(size);

        if k#22 != size goto label5;

        $i6 = isa[nextStart#20];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(rank#1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if rank#1 >= $i6 goto label5;

        goto label7;

     label5:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(k#22);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(size);

        if k#22 >= size goto label6;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(nextStart#20);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count);

        if nextStart#20 >= count goto label6;

        $i7 = startIdx + k#22;

        $b8 = data[$i7];

        $s9 = $b8 & 255;

        $i10 = srcIdx + nextStart#20;

        $b11 = data[$i10];

        $s12 = $b11 & 255;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s12);

        if $s9 >= $s12 goto label6;

        goto label7;

     label6:
        sa[rank#1] = nextStart0;

        isa[nextStart0] = rank#1;

        rank#1 = rank#1 + 1;

        goto label1;

     label7:
        sa[rank#1] = start;

        isa[start] = rank#1;

        return rank#1;
    }


