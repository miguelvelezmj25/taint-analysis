    static void compress(com.googlecode.pngtastic.core.processing.zopfli.Cookie, com.googlecode.pngtastic.core.processing.zopfli.Options, byte[], com.googlecode.pngtastic.core.processing.zopfli.Buffer)
    {
        com.googlecode.pngtastic.core.processing.zopfli.Cookie cookie;
        com.googlecode.pngtastic.core.processing.zopfli.Options options;
        byte[] input;
        com.googlecode.pngtastic.core.processing.zopfli.Buffer output;
        int j, $i0, $i1, $i2, $i3, $i4, $i5, i#1;
        boolean $z0;

        cookie := @parameter0: com.googlecode.pngtastic.core.processing.zopfli.Cookie;

        options := @parameter1: com.googlecode.pngtastic.core.processing.zopfli.Options;

        input := @parameter2: byte[];

        output := @parameter3: com.googlecode.pngtastic.core.processing.zopfli.Buffer;

        i#1 = 0;

     label1:
        $i0 = lengthof input;

        if i#1 >= $i0 goto label4;

        $i1 = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int masterBlockSize>;

        $i3 = i#1 + $i1;

        $i2 = lengthof input;

        j = staticinvoke <java.lang.Math: int min(int,int)>($i3, $i2);

        $i5 = i#1;

        $i4 = lengthof input;

        if j != $i4 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Deflate: void deflatePart(com.googlecode.pngtastic.core.processing.zopfli.Cookie,com.googlecode.pngtastic.core.processing.zopfli.Options,byte[],int,int,boolean,com.googlecode.pngtastic.core.processing.zopfli.Buffer)>(cookie, options, input, $i5, j, $z0, output);

        i#1 = j;

        goto label1;

     label4:
        return;
    }

    private static void deflatePart(com.googlecode.pngtastic.core.processing.zopfli.Cookie, com.googlecode.pngtastic.core.processing.zopfli.Options, byte[], int, int, boolean, com.googlecode.pngtastic.core.processing.zopfli.Buffer)
    {
        com.googlecode.pngtastic.core.processing.zopfli.Cookie cookie;
        com.googlecode.pngtastic.core.processing.zopfli.Options options;
        byte[] input;
        int 'from', 'to', $i0, $i1;
        boolean flush;
        com.googlecode.pngtastic.core.processing.zopfli.Buffer output;
        com.googlecode.pngtastic.core.processing.zopfli.Options$BlockSplitting $r0;
        int[] $r1;

        cookie := @parameter0: com.googlecode.pngtastic.core.processing.zopfli.Cookie;

        options := @parameter1: com.googlecode.pngtastic.core.processing.zopfli.Options;

        input := @parameter2: byte[];

        'from' := @parameter3: int;

        'to' := @parameter4: int;

        flush := @parameter5: boolean;

        output := @parameter6: com.googlecode.pngtastic.core.processing.zopfli.Buffer;

        $r1 = <com.googlecode.pngtastic.core.processing.zopfli.Deflate$1: int[] $SwitchMap$com$googlecode$pngtastic$core$processing$zopfli$Options$BlockSplitting>;

        $r0 = options.<com.googlecode.pngtastic.core.processing.zopfli.Options: com.googlecode.pngtastic.core.processing.zopfli.Options$BlockSplitting blockSplitting>;

        $i0 = virtualinvoke $r0.<com.googlecode.pngtastic.core.processing.zopfli.Options$BlockSplitting: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            default: goto label4;
        };

     label1:
        staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Deflate: void deflateSplittingFirst(com.googlecode.pngtastic.core.processing.zopfli.Cookie,com.googlecode.pngtastic.core.processing.zopfli.Options,boolean,byte[],int,int,com.googlecode.pngtastic.core.processing.zopfli.Buffer)>(cookie, options, flush, input, 'from', 'to', output);

        goto label4;

     label2:
        staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Deflate: void deflateSplittingLast(com.googlecode.pngtastic.core.processing.zopfli.Cookie,com.googlecode.pngtastic.core.processing.zopfli.Options,boolean,byte[],int,int,com.googlecode.pngtastic.core.processing.zopfli.Buffer)>(cookie, options, flush, input, 'from', 'to', output);

        goto label4;

     label3:
        staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Deflate: void deflateDynamicBlock(com.googlecode.pngtastic.core.processing.zopfli.Cookie,com.googlecode.pngtastic.core.processing.zopfli.Options,boolean,byte[],int,int,com.googlecode.pngtastic.core.processing.zopfli.Buffer)>(cookie, options, flush, input, 'from', 'to', output);

     label4:
        return;
    }

    private static void deflateDynamicBlock(com.googlecode.pngtastic.core.processing.zopfli.Cookie, com.googlecode.pngtastic.core.processing.zopfli.Options, boolean, byte[], int, int, com.googlecode.pngtastic.core.processing.zopfli.Buffer)
    {
        com.googlecode.pngtastic.core.processing.zopfli.Cookie cookie;
        com.googlecode.pngtastic.core.processing.zopfli.Options options;
        boolean flush;
        byte[] input;
        int 'from', 'to', dynCost, fixedCost, $i0, $i1, $i2, $i3, $i4, $i5;
        com.googlecode.pngtastic.core.processing.zopfli.Buffer output;
        com.googlecode.pngtastic.core.processing.zopfli.LongestMatchCache lmc;
        com.googlecode.pngtastic.core.processing.zopfli.LzStore fixedStore, store#2;
        long[] $r0;
        char[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        com.googlecode.pngtastic.core.processing.zopfli.Deflate$BlockType type#1;

        cookie := @parameter0: com.googlecode.pngtastic.core.processing.zopfli.Cookie;

        options := @parameter1: com.googlecode.pngtastic.core.processing.zopfli.Options;

        flush := @parameter2: boolean;

        input := @parameter3: byte[];

        'from' := @parameter4: int;

        'to' := @parameter5: int;

        output := @parameter6: com.googlecode.pngtastic.core.processing.zopfli.Buffer;

        lmc = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: com.googlecode.pngtastic.core.processing.zopfli.LongestMatchCache lmc>;

        $i0 = 'to' - 'from';

        virtualinvoke lmc.<com.googlecode.pngtastic.core.processing.zopfli.LongestMatchCache: void init(int)>($i0);

        type#1 = <com.googlecode.pngtastic.core.processing.zopfli.Deflate$BlockType: com.googlecode.pngtastic.core.processing.zopfli.Deflate$BlockType DYNAMIC>;

        $i1 = options.<com.googlecode.pngtastic.core.processing.zopfli.Options: int numIterations>;

        store#2 = staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Squeeze: com.googlecode.pngtastic.core.processing.zopfli.LzStore optimal(com.googlecode.pngtastic.core.processing.zopfli.Cookie,int,com.googlecode.pngtastic.core.processing.zopfli.LongestMatchCache,byte[],int,int)>(cookie, $i1, lmc, input, 'from', 'to');

        $i2 = store#2.<com.googlecode.pngtastic.core.processing.zopfli.LzStore: int size>;

        if $i2 >= 1000 goto label1;

        fixedStore = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: com.googlecode.pngtastic.core.processing.zopfli.LzStore store1>;

        virtualinvoke fixedStore.<com.googlecode.pngtastic.core.processing.zopfli.LzStore: void reset()>();

        $r1 = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: char[] lengthArray>;

        $r0 = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: long[] costs>;

        staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Squeeze: void bestFixedLengths(com.googlecode.pngtastic.core.processing.zopfli.Cookie,com.googlecode.pngtastic.core.processing.zopfli.LongestMatchCache,byte[],int,int,char[],long[])>(cookie, lmc, input, 'from', 'to', $r1, $r0);

        $r2 = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: char[] lengthArray>;

        staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Squeeze: void optimalRun(com.googlecode.pngtastic.core.processing.zopfli.Cookie,com.googlecode.pngtastic.core.processing.zopfli.LongestMatchCache,byte[],int,int,char[],com.googlecode.pngtastic.core.processing.zopfli.LzStore)>(cookie, lmc, input, 'from', 'to', $r2, fixedStore);

        $r4 = store#2.<com.googlecode.pngtastic.core.processing.zopfli.LzStore: char[] litLens>;

        $r3 = store#2.<com.googlecode.pngtastic.core.processing.zopfli.LzStore: char[] dists>;

        $i3 = store#2.<com.googlecode.pngtastic.core.processing.zopfli.LzStore: int size>;

        dynCost = staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Deflate: int calculateBlockSize(com.googlecode.pngtastic.core.processing.zopfli.Cookie,char[],char[],int,int)>(cookie, $r4, $r3, 0, $i3);

        $r6 = fixedStore.<com.googlecode.pngtastic.core.processing.zopfli.LzStore: char[] litLens>;

        $r5 = fixedStore.<com.googlecode.pngtastic.core.processing.zopfli.LzStore: char[] dists>;

        $i4 = fixedStore.<com.googlecode.pngtastic.core.processing.zopfli.LzStore: int size>;

        fixedCost = staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Deflate: int calculateFixedBlockSize(com.googlecode.pngtastic.core.processing.zopfli.Cookie,char[],char[],int)>(cookie, $r6, $r5, $i4);

        if fixedCost >= dynCost goto label1;

        type#1 = <com.googlecode.pngtastic.core.processing.zopfli.Deflate$BlockType: com.googlecode.pngtastic.core.processing.zopfli.Deflate$BlockType FIXED>;

        store#2 = fixedStore;

     label1:
        $r7 = store#2.<com.googlecode.pngtastic.core.processing.zopfli.LzStore: char[] litLens>;

        $r8 = store#2.<com.googlecode.pngtastic.core.processing.zopfli.LzStore: char[] dists>;

        $i5 = store#2.<com.googlecode.pngtastic.core.processing.zopfli.LzStore: int size>;

        staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Deflate: void addLzBlock(com.googlecode.pngtastic.core.processing.zopfli.Cookie,com.googlecode.pngtastic.core.processing.zopfli.Deflate$BlockType,boolean,char[],char[],int,int,com.googlecode.pngtastic.core.processing.zopfli.Buffer)>(cookie, type#1, flush, $r7, $r8, 0, $i5, output);

        return;
    }

    private static void deflateSplittingLast(com.googlecode.pngtastic.core.processing.zopfli.Cookie, com.googlecode.pngtastic.core.processing.zopfli.Options, boolean, byte[], int, int, com.googlecode.pngtastic.core.processing.zopfli.Buffer)
    {
        com.googlecode.pngtastic.core.processing.zopfli.Cookie cookie;
        com.googlecode.pngtastic.core.processing.zopfli.Options options;
        boolean flush, $z0;
        byte[] input;
        int 'from', 'to', nPoints, start, end, $i0, $i1, $i2, $i3, i#1;
        com.googlecode.pngtastic.core.processing.zopfli.Buffer output;
        com.googlecode.pngtastic.core.processing.zopfli.LongestMatchCache lmc;
        com.googlecode.pngtastic.core.processing.zopfli.LzStore store;
        int[] splitPoints;
        char[] $r0, $r1, $r4, $r5;
        com.googlecode.pngtastic.core.processing.zopfli.Deflate$BlockType $r3;

        cookie := @parameter0: com.googlecode.pngtastic.core.processing.zopfli.Cookie;

        options := @parameter1: com.googlecode.pngtastic.core.processing.zopfli.Options;

        flush := @parameter2: boolean;

        input := @parameter3: byte[];

        'from' := @parameter4: int;

        'to' := @parameter5: int;

        output := @parameter6: com.googlecode.pngtastic.core.processing.zopfli.Buffer;

        lmc = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: com.googlecode.pngtastic.core.processing.zopfli.LongestMatchCache lmc>;

        $i0 = 'to' - 'from';

        virtualinvoke lmc.<com.googlecode.pngtastic.core.processing.zopfli.LongestMatchCache: void init(int)>($i0);

        $i1 = options.<com.googlecode.pngtastic.core.processing.zopfli.Options: int numIterations>;

        store = staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Squeeze: com.googlecode.pngtastic.core.processing.zopfli.LzStore optimal(com.googlecode.pngtastic.core.processing.zopfli.Cookie,int,com.googlecode.pngtastic.core.processing.zopfli.LongestMatchCache,byte[],int,int)>(cookie, $i1, lmc, input, 'from', 'to');

        $r1 = store.<com.googlecode.pngtastic.core.processing.zopfli.LzStore: char[] litLens>;

        $r0 = store.<com.googlecode.pngtastic.core.processing.zopfli.LzStore: char[] dists>;

        $i2 = store.<com.googlecode.pngtastic.core.processing.zopfli.LzStore: int size>;

        nPoints = staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.BlockSplitter: int splitLz(com.googlecode.pngtastic.core.processing.zopfli.Cookie,char[],char[],int)>(cookie, $r1, $r0, $i2);

        splitPoints = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] splitPoints>;

        i#1 = 1;

     label1:
        if i#1 > nPoints goto label4;

        $i3 = i#1 - 1;

        start = splitPoints[$i3];

        end = splitPoints[i#1];

        $r3 = <com.googlecode.pngtastic.core.processing.zopfli.Deflate$BlockType: com.googlecode.pngtastic.core.processing.zopfli.Deflate$BlockType DYNAMIC>;

        if i#1 != nPoints goto label2;

        if flush == 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        $r4 = store.<com.googlecode.pngtastic.core.processing.zopfli.LzStore: char[] litLens>;

        $r5 = store.<com.googlecode.pngtastic.core.processing.zopfli.LzStore: char[] dists>;

        staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Deflate: void addLzBlock(com.googlecode.pngtastic.core.processing.zopfli.Cookie,com.googlecode.pngtastic.core.processing.zopfli.Deflate$BlockType,boolean,char[],char[],int,int,com.googlecode.pngtastic.core.processing.zopfli.Buffer)>(cookie, $r3, $z0, $r4, $r5, start, end, output);

        i#1 = i#1 + 1;

        goto label1;

     label4:
        return;
    }

    private static void deflateSplittingFirst(com.googlecode.pngtastic.core.processing.zopfli.Cookie, com.googlecode.pngtastic.core.processing.zopfli.Options, boolean, byte[], int, int, com.googlecode.pngtastic.core.processing.zopfli.Buffer)
    {
        com.googlecode.pngtastic.core.processing.zopfli.Cookie cookie;
        com.googlecode.pngtastic.core.processing.zopfli.Options options;
        boolean flush, $z0;
        byte[] input;
        int 'from', 'to', nPoints, i#1, $i0, $i1, $i2;
        com.googlecode.pngtastic.core.processing.zopfli.Buffer output;
        int[] splitPoints;

        cookie := @parameter0: com.googlecode.pngtastic.core.processing.zopfli.Cookie;

        options := @parameter1: com.googlecode.pngtastic.core.processing.zopfli.Options;

        flush := @parameter2: boolean;

        input := @parameter3: byte[];

        'from' := @parameter4: int;

        'to' := @parameter5: int;

        output := @parameter6: com.googlecode.pngtastic.core.processing.zopfli.Buffer;

        nPoints = staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.BlockSplitter: int split(com.googlecode.pngtastic.core.processing.zopfli.Cookie,byte[],int,int)>(cookie, input, 'from', 'to');

        splitPoints = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] splitPoints>;

        i#1 = 1;

     label1:
        if i#1 > nPoints goto label4;

        if i#1 != nPoints goto label2;

        if flush == 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        $i0 = i#1 - 1;

        $i1 = splitPoints[$i0];

        $i2 = splitPoints[i#1];

        staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Deflate: void deflateDynamicBlock(com.googlecode.pngtastic.core.processing.zopfli.Cookie,com.googlecode.pngtastic.core.processing.zopfli.Options,boolean,byte[],int,int,com.googlecode.pngtastic.core.processing.zopfli.Buffer)>(cookie, options, $z0, input, $i1, $i2, output);

        i#1 = i#1 + 1;

        goto label1;

     label4:
        return;
    }

    private static void addLzBlock(com.googlecode.pngtastic.core.processing.zopfli.Cookie, com.googlecode.pngtastic.core.processing.zopfli.Deflate$BlockType, boolean, char[], char[], int, int, com.googlecode.pngtastic.core.processing.zopfli.Buffer)
    {
        com.googlecode.pngtastic.core.processing.zopfli.Cookie cookie;
        com.googlecode.pngtastic.core.processing.zopfli.Deflate$BlockType type, $r4, $r5;
        boolean last;
        char[] litLens, dists;
        int lStart, lEnd, $i0, $i1;
        com.googlecode.pngtastic.core.processing.zopfli.Buffer output;
        int[] llLengths, dLengths, llCounts, dCounts, llSymbols, dSymbols, $r0, $r1, $r2, $r3, $r6, $r7, $r8, $r9, $r10, $r11;
        byte $b2;

        cookie := @parameter0: com.googlecode.pngtastic.core.processing.zopfli.Cookie;

        type := @parameter1: com.googlecode.pngtastic.core.processing.zopfli.Deflate$BlockType;

        last := @parameter2: boolean;

        litLens := @parameter3: char[];

        dists := @parameter4: char[];

        lStart := @parameter5: int;

        lEnd := @parameter6: int;

        output := @parameter7: com.googlecode.pngtastic.core.processing.zopfli.Buffer;

        llLengths = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] i288a>;

        $r0 = <com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] intZeroes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, llLengths, 0, 288);

        dLengths = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] i32a>;

        $r1 = <com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] intZeroes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, dLengths, 0, 32);

        llCounts = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] i288b>;

        $r2 = <com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] intZeroes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, llCounts, 0, 288);

        dCounts = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] i32b>;

        $r3 = <com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] intZeroes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, dCounts, 0, 32);

        if last == 0 goto label1;

        $b2 = 1;

        goto label2;

     label1:
        $b2 = 0;

     label2:
        virtualinvoke output.<com.googlecode.pngtastic.core.processing.zopfli.Buffer: void addHuffmanBits(int,int)>($b2, 1);

        $r4 = <com.googlecode.pngtastic.core.processing.zopfli.Deflate$BlockType: com.googlecode.pngtastic.core.processing.zopfli.Deflate$BlockType FIXED>;

        if type != $r4 goto label3;

        virtualinvoke output.<com.googlecode.pngtastic.core.processing.zopfli.Buffer: void addHuffmanBits(int,int)>(2, 2);

        goto label4;

     label3:
        virtualinvoke output.<com.googlecode.pngtastic.core.processing.zopfli.Buffer: void addHuffmanBits(int,int)>(1, 2);

     label4:
        $r5 = <com.googlecode.pngtastic.core.processing.zopfli.Deflate$BlockType: com.googlecode.pngtastic.core.processing.zopfli.Deflate$BlockType FIXED>;

        if type != $r5 goto label5;

        staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Deflate: void getFixedTree(int[],int[])>(llLengths, dLengths);

        goto label6;

     label5:
        staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Deflate: void lzCounts(char[],char[],int,int,int[],int[])>(litLens, dists, lStart, lEnd, llCounts, dCounts);

        staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Deflate: void optimizeHuffmanForRle(com.googlecode.pngtastic.core.processing.zopfli.Cookie,int[])>(cookie, llCounts);

        staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Katajainen: void lengthLimitedCodeLengths(com.googlecode.pngtastic.core.processing.zopfli.Cookie,int[],int,int[])>(cookie, llCounts, 15, llLengths);

        staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Deflate: void optimizeHuffmanForRle(com.googlecode.pngtastic.core.processing.zopfli.Cookie,int[])>(cookie, dCounts);

        staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Katajainen: void lengthLimitedCodeLengths(com.googlecode.pngtastic.core.processing.zopfli.Cookie,int[],int,int[])>(cookie, dCounts, 15, dLengths);

        staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Deflate: void patchDistanceCodesForBuggyDecoders(int[])>(dLengths);

        staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Deflate: void addDynamicTree(com.googlecode.pngtastic.core.processing.zopfli.Cookie,int[],int[],com.googlecode.pngtastic.core.processing.zopfli.Buffer)>(cookie, llLengths, dLengths, output);

     label6:
        llSymbols = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] i288c>;

        $r6 = <com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] intZeroes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, llSymbols, 0, 288);

        $r8 = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] i16a>;

        $r7 = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] i16b>;

        staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Deflate: void lengthsToSymbols(int[],int,int,int[],int[],int[])>(llLengths, 288, 15, llSymbols, $r8, $r7);

        dSymbols = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] i32b>;

        $r9 = <com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] intZeroes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, dSymbols, 0, 32);

        $r11 = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] i16a>;

        $r10 = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] i16b>;

        staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Deflate: void lengthsToSymbols(int[],int,int,int[],int[],int[])>(dLengths, 32, 15, dSymbols, $r11, $r10);

        staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Deflate: void addLzData(char[],char[],int,int,int[],int[],int[],int[],com.googlecode.pngtastic.core.processing.zopfli.Buffer)>(litLens, dists, lStart, lEnd, llSymbols, llLengths, dSymbols, dLengths, output);

        $i1 = llSymbols[256];

        $i0 = llLengths[256];

        virtualinvoke output.<com.googlecode.pngtastic.core.processing.zopfli.Buffer: void addHuffmanBits(int,int)>($i1, $i0);

        return;
    }

    private static int calculateFixedBlockSize(com.googlecode.pngtastic.core.processing.zopfli.Cookie, char[], char[], int)
    {
        com.googlecode.pngtastic.core.processing.zopfli.Cookie cookie;
        char[] litLens, dists;
        int size, $i0, $i1, $i2, $i3, $i4, result#1, i#2, result#3, result#4, result#5, $i6, result#13;
        int[] llLengths, dLengths, cachedDistExtraBits, lengthExtraBits, lengthSymbol;
        char d, l;

        cookie := @parameter0: com.googlecode.pngtastic.core.processing.zopfli.Cookie;

        litLens := @parameter1: char[];

        dists := @parameter2: char[];

        size := @parameter3: int;

        llLengths = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] i288a>;

        dLengths = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] i32a>;

        staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Deflate: void getFixedTree(int[],int[])>(llLengths, dLengths);

        result#1 = 3;

        cachedDistExtraBits = <com.googlecode.pngtastic.core.processing.zopfli.Util: int[] CACHED_DIST_EXTRA_BITS>;

        lengthExtraBits = <com.googlecode.pngtastic.core.processing.zopfli.Util: int[] LENGTH_EXTRA_BITS>;

        lengthSymbol = <com.googlecode.pngtastic.core.processing.zopfli.Util: int[] LENGTH_SYMBOL>;

        i#2 = 0;

     label1:
        if i#2 >= size goto label8;

        d = dists[i#2];

        l = litLens[i#2];

        if d != 0 goto label2;

        $i4 = llLengths[l];

        result#1 = result#1 + $i4;

        goto label7;

     label2:
        $i1 = lengthSymbol[l];

        $i2 = llLengths[$i1];

        result#3 = result#1 + $i2;

        $i3 = lengthExtraBits[l];

        result#4 = result#3 + $i3;

        result#5 = result#4 + 5;

        if d >= 4097 goto label3;

        $i6 = cachedDistExtraBits[d];

        goto label6;

     label3:
        if d >= 16385 goto label5;

        if d >= 8193 goto label4;

        $i6 = 11;

        goto label6;

     label4:
        $i6 = 12;

        goto label6;

     label5:
        $i6 = 13;

     label6:
        result#1 = result#5 + $i6;

     label7:
        i#2 = i#2 + 1;

        goto label1;

     label8:
        $i0 = llLengths[256];

        result#13 = result#1 + $i0;

        return result#13;
    }

    static int calculateBlockSize(com.googlecode.pngtastic.core.processing.zopfli.Cookie, char[], char[], int, int)
    {
        com.googlecode.pngtastic.core.processing.zopfli.Cookie cookie;
        char[] litLens, dists;
        int lStart, lEnd, distSymbol, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, result#1, i#2, result#7, l#8, l#9;
        int[] llLengths, dLengths, llCounts, dCounts, lengthSymbol, cachedDistSymbol, lengthExtraBits, $r0, $r1, $r2, $r3, i#5, d#6;
        char d#3, l#4;

        cookie := @parameter0: com.googlecode.pngtastic.core.processing.zopfli.Cookie;

        litLens := @parameter1: char[];

        dists := @parameter2: char[];

        lStart := @parameter3: int;

        lEnd := @parameter4: int;

        llLengths = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] i288a>;

        $r0 = <com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] intZeroes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, llLengths, 0, 288);

        dLengths = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] i32a>;

        $r1 = <com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] intZeroes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, dLengths, 0, 32);

        result#1 = 3;

        llCounts = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] i288b>;

        $r2 = <com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] intZeroes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, llCounts, 0, 288);

        dCounts = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] i32b>;

        $r3 = <com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] intZeroes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, dCounts, 0, 32);

        lengthSymbol = <com.googlecode.pngtastic.core.processing.zopfli.Util: int[] LENGTH_SYMBOL>;

        cachedDistSymbol = <com.googlecode.pngtastic.core.processing.zopfli.Util: int[] CACHED_DIST_SYMBOL>;

        lengthExtraBits = <com.googlecode.pngtastic.core.processing.zopfli.Util: int[] LENGTH_EXTRA_BITS>;

        i#2 = lStart;

     label1:
        if i#2 >= lEnd goto label4;

        d#3 = dists[i#2];

        l#4 = litLens[i#2];

        if d#3 != 0 goto label2;

        $i15 = llCounts[l#4];

        $i16 = $i15 + 1;

        llCounts[l#4] = $i16;

        goto label3;

     label2:
        $i7 = lengthSymbol[l#4];

        $i8 = llCounts[$i7];

        $i9 = $i8 + 1;

        llCounts[$i7] = $i9;

        distSymbol = cachedDistSymbol[d#3];

        $i10 = dCounts[distSymbol];

        $i11 = $i10 + 1;

        dCounts[distSymbol] = $i11;

        $i12 = lengthExtraBits[l#4];

        result#1 = result#1 + $i12;

        if distSymbol <= 3 goto label3;

        $i13 = distSymbol / 2;

        $i14 = $i13 - 1;

        result#1 = result#1 + $i14;

     label3:
        i#2 = i#2 + 1;

        goto label1;

     label4:
        llCounts[256] = 1;

        i#5 = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] i288c>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(llCounts, 0, i#5, 0, 288);

        staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Deflate: void optimizeHuffmanForRle(com.googlecode.pngtastic.core.processing.zopfli.Cookie,int[])>(cookie, i#5);

        staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Katajainen: void lengthLimitedCodeLengths(com.googlecode.pngtastic.core.processing.zopfli.Cookie,int[],int,int[])>(cookie, i#5, 15, llLengths);

        d#6 = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] i32c>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(dCounts, 0, d#6, 0, 32);

        staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Deflate: void optimizeHuffmanForRle(com.googlecode.pngtastic.core.processing.zopfli.Cookie,int[])>(cookie, d#6);

        staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Katajainen: void lengthLimitedCodeLengths(com.googlecode.pngtastic.core.processing.zopfli.Cookie,int[],int,int[])>(cookie, d#6, 15, dLengths);

        staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Deflate: void patchDistanceCodesForBuggyDecoders(int[])>(dLengths);

        $i0 = staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Deflate: int simulateAddDynamicTree(com.googlecode.pngtastic.core.processing.zopfli.Cookie,int[],int[])>(cookie, llLengths, dLengths);

        result#7 = result#1 + $i0;

        l#8 = 0;

     label5:
        if l#8 >= 288 goto label6;

        $i5 = llCounts[l#8];

        $i4 = llLengths[l#8];

        $i6 = $i5 * $i4;

        result#7 = result#7 + $i6;

        l#8 = l#8 + 1;

        goto label5;

     label6:
        l#9 = 0;

     label7:
        if l#9 >= 32 goto label8;

        $i2 = dCounts[l#9];

        $i1 = dLengths[l#9];

        $i3 = $i2 * $i1;

        result#7 = result#7 + $i3;

        l#9 = l#9 + 1;

        goto label7;

     label8:
        return result#7;
    }

    private static void addLzData(char[], char[], int, int, int[], int[], int[], int[], com.googlecode.pngtastic.core.processing.zopfli.Buffer)
    {
        char[] litLens, dists;
        int lStart, lEnd, lls, ds, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i#1, $i8, $i9;
        int[] llSymbols, llLengths, dSymbols, dLengths, cachedDistExtraBits, lengthExtraBits, lengthExtraBitsValue, lengthSymbol, cachedDistSymbol;
        com.googlecode.pngtastic.core.processing.zopfli.Buffer output;
        char dist, litLen;

        litLens := @parameter0: char[];

        dists := @parameter1: char[];

        lStart := @parameter2: int;

        lEnd := @parameter3: int;

        llSymbols := @parameter4: int[];

        llLengths := @parameter5: int[];

        dSymbols := @parameter6: int[];

        dLengths := @parameter7: int[];

        output := @parameter8: com.googlecode.pngtastic.core.processing.zopfli.Buffer;

        cachedDistExtraBits = <com.googlecode.pngtastic.core.processing.zopfli.Util: int[] CACHED_DIST_EXTRA_BITS>;

        lengthExtraBits = <com.googlecode.pngtastic.core.processing.zopfli.Util: int[] LENGTH_EXTRA_BITS>;

        lengthExtraBitsValue = <com.googlecode.pngtastic.core.processing.zopfli.Util: int[] LENGTH_EXTRA_BITS_VALUE>;

        lengthSymbol = <com.googlecode.pngtastic.core.processing.zopfli.Util: int[] LENGTH_SYMBOL>;

        cachedDistSymbol = <com.googlecode.pngtastic.core.processing.zopfli.Util: int[] CACHED_DIST_SYMBOL>;

        i#1 = lStart;

     label1:
        if i#1 >= lEnd goto label8;

        dist = dists[i#1];

        litLen = litLens[i#1];

        if dist != 0 goto label2;

        $i7 = llSymbols[litLen];

        $i6 = llLengths[litLen];

        virtualinvoke output.<com.googlecode.pngtastic.core.processing.zopfli.Buffer: void addHuffmanBits(int,int)>($i7, $i6);

        goto label7;

     label2:
        lls = lengthSymbol[litLen];

        ds = cachedDistSymbol[dist];

        $i1 = llSymbols[lls];

        $i0 = llLengths[lls];

        virtualinvoke output.<com.googlecode.pngtastic.core.processing.zopfli.Buffer: void addHuffmanBits(int,int)>($i1, $i0);

        $i3 = lengthExtraBitsValue[litLen];

        $i2 = lengthExtraBits[litLen];

        virtualinvoke output.<com.googlecode.pngtastic.core.processing.zopfli.Buffer: void addBits(int,int)>($i3, $i2);

        $i5 = dSymbols[ds];

        $i4 = dLengths[ds];

        virtualinvoke output.<com.googlecode.pngtastic.core.processing.zopfli.Buffer: void addHuffmanBits(int,int)>($i5, $i4);

        $i8 = staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Util: int distExtraBitsValue(int)>(dist);

        if dist >= 4097 goto label3;

        $i9 = cachedDistExtraBits[dist];

        goto label6;

     label3:
        if dist >= 16385 goto label5;

        if dist >= 8193 goto label4;

        $i9 = 11;

        goto label6;

     label4:
        $i9 = 12;

        goto label6;

     label5:
        $i9 = 13;

     label6:
        virtualinvoke output.<com.googlecode.pngtastic.core.processing.zopfli.Buffer: void addBits(int,int)>($i8, $i9);

     label7:
        i#1 = i#1 + 1;

        goto label1;

     label8:
        return;
    }

    private static void lengthsToSymbols(int[], int, int, int[], int[], int[])
    {
        int[] lengths, symbols, blCount, nextCode, $r0, $r1;
        int n, maxBits, len, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i#1, i#2, bits#3, bits#4;

        lengths := @parameter0: int[];

        n := @parameter1: int;

        maxBits := @parameter2: int;

        symbols := @parameter3: int[];

        blCount := @parameter4: int[];

        nextCode := @parameter5: int[];

        $r0 = <com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] intZeroes>;

        $i0 = maxBits + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, blCount, 0, $i0);

        $r1 = <com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] intZeroes>;

        $i1 = maxBits + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, nextCode, 0, $i1);

        i#1 = 0;

     label1:
        if i#1 >= n goto label2;

        $i8 = lengths[i#1];

        $i9 = blCount[$i8];

        $i10 = $i9 + 1;

        blCount[$i8] = $i10;

        i#1 = i#1 + 1;

        goto label1;

     label2:
        i#2 = 0;

        blCount[0] = 0;

        bits#3 = 1;

     label3:
        if bits#3 > maxBits goto label4;

        $i5 = bits#3 - 1;

        $i6 = blCount[$i5];

        $i7 = i#2 + $i6;

        i#2 = $i7 << 1;

        nextCode[bits#3] = i#2;

        bits#3 = bits#3 + 1;

        goto label3;

     label4:
        bits#4 = 0;

     label5:
        if bits#4 >= n goto label7;

        len = lengths[bits#4];

        if len == 0 goto label6;

        $i2 = nextCode[len];

        symbols[bits#4] = $i2;

        $i3 = nextCode[len];

        $i4 = $i3 + 1;

        nextCode[len] = $i4;

     label6:
        bits#4 = bits#4 + 1;

        goto label5;

     label7:
        return;
    }

    private static void addDynamicTree(com.googlecode.pngtastic.core.processing.zopfli.Cookie, int[], int[], com.googlecode.pngtastic.core.processing.zopfli.Buffer)
    {
        com.googlecode.pngtastic.core.processing.zopfli.Cookie cookie;
        int[] llLengths, dLengths;
        com.googlecode.pngtastic.core.processing.zopfli.Buffer output;
        int size, $i0, $i1, $i2, $i3, best#1, bestSize#2, i#3, $i4, $i5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        cookie := @parameter0: com.googlecode.pngtastic.core.processing.zopfli.Cookie;

        llLengths := @parameter1: int[];

        dLengths := @parameter2: int[];

        output := @parameter3: com.googlecode.pngtastic.core.processing.zopfli.Buffer;

        best#1 = 0;

        bestSize#2 = 2147483647;

        i#3 = 0;

     label01:
        if i#3 >= 8 goto label09;

        $i2 = i#3 & 1;

        if $i2 == 0 goto label02;

        $z0 = 1;

        goto label03;

     label02:
        $z0 = 0;

     label03:
        $i3 = i#3 & 2;

        if $i3 == 0 goto label04;

        $z1 = 1;

        goto label05;

     label04:
        $z1 = 0;

     label05:
        $i4 = i#3 & 4;

        if $i4 == 0 goto label06;

        $z2 = 1;

        goto label07;

     label06:
        $z2 = 0;

     label07:
        size = staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Deflate: int simulateEncodeTree(com.googlecode.pngtastic.core.processing.zopfli.Cookie,int[],int[],boolean,boolean,boolean)>(cookie, llLengths, dLengths, $z0, $z1, $z2);

        if size >= bestSize#2 goto label08;

        bestSize#2 = size;

        best#1 = i#3;

     label08:
        i#3 = i#3 + 1;

        goto label01;

     label09:
        $i0 = best#1 & 1;

        if $i0 == 0 goto label10;

        $z3 = 1;

        goto label11;

     label10:
        $z3 = 0;

     label11:
        $i1 = best#1 & 2;

        if $i1 == 0 goto label12;

        $z4 = 1;

        goto label13;

     label12:
        $z4 = 0;

     label13:
        $i5 = best#1 & 4;

        if $i5 == 0 goto label14;

        $z5 = 1;

        goto label15;

     label14:
        $z5 = 0;

     label15:
        staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Deflate: void encodeTree(com.googlecode.pngtastic.core.processing.zopfli.Cookie,int[],int[],boolean,boolean,boolean,com.googlecode.pngtastic.core.processing.zopfli.Buffer)>(cookie, llLengths, dLengths, $z3, $z4, $z5, output);

        return;
    }

    private static void patchDistanceCodesForBuggyDecoders(int[])
    {
        int[] dLengths;
        int $i0, $i1, numDistCodes#1, i#2;
        byte $b2;

        dLengths := @parameter0: int[];

        numDistCodes#1 = 0;

        i#2 = 0;

     label1:
        if i#2 >= 30 goto label3;

        $i1 = dLengths[i#2];

        if $i1 == 0 goto label2;

        numDistCodes#1 = numDistCodes#1 + 1;

        if numDistCodes#1 != 2 goto label2;

        return;

     label2:
        i#2 = i#2 + 1;

        goto label1;

     label3:
        if numDistCodes#1 != 0 goto label4;

        dLengths[0] = 1;

        dLengths[1] = 1;

        goto label7;

     label4:
        if numDistCodes#1 != 1 goto label7;

        $i0 = dLengths[0];

        if $i0 == 0 goto label5;

        $b2 = 1;

        goto label6;

     label5:
        $b2 = 0;

     label6:
        dLengths[$b2] = 1;

     label7:
        return;
    }

    private static void optimizeHuffmanForRle(com.googlecode.pngtastic.core.processing.zopfli.Cookie, int[])
    {
        com.googlecode.pngtastic.core.processing.zopfli.Cookie cookie;
        int[] counts, goodForRle, $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, length#1, symbol#2, stride#3, i#4, $i28, k#13, stride#24, i#25, k#26, i#27, count#34, k#35, $i29;

        cookie := @parameter0: com.googlecode.pngtastic.core.processing.zopfli.Cookie;

        counts := @parameter1: int[];

        goodForRle = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] i289a>;

        length#1 = lengthof counts;

     label01:
        if length#1 < 0 goto label04;

        if length#1 != 0 goto label02;

        return;

     label02:
        $i26 = length#1 - 1;

        $i27 = counts[$i26];

        if $i27 == 0 goto label03;

        goto label04;

     label03:
        length#1 = length#1 + -1;

        goto label01;

     label04:
        $r0 = <com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] intZeroes>;

        $i0 = length#1 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, goodForRle, 0, $i0);

        symbol#2 = counts[0];

        stride#3 = 0;

        i#4 = 0;

     label05:
        $i28 = length#1 + 1;

        if i#4 >= $i28 goto label13;

        if i#4 == length#1 goto label06;

        $i25 = counts[i#4];

        if $i25 == symbol#2 goto label11;

     label06:
        if symbol#2 != 0 goto label07;

        if stride#3 >= 5 goto label08;

     label07:
        if symbol#2 == 0 goto label10;

        if stride#3 < 7 goto label10;

     label08:
        k#13 = 0;

     label09:
        if k#13 >= stride#3 goto label10;

        $i23 = i#4 - k#13;

        $i24 = $i23 - 1;

        goodForRle[$i24] = 1;

        k#13 = k#13 + 1;

        goto label09;

     label10:
        stride#3 = 1;

        if i#4 == length#1 goto label12;

        symbol#2 = counts[i#4];

        goto label12;

     label11:
        stride#3 = stride#3 + 1;

     label12:
        i#4 = i#4 + 1;

        goto label05;

     label13:
        stride#24 = 0;

        i#25 = counts[0];

        k#26 = 0;

        i#27 = 0;

     label14:
        $i1 = length#1 + 1;

        if i#27 >= $i1 goto label25;

        if i#27 == length#1 goto label15;

        $i18 = goodForRle[i#27];

        if $i18 != 0 goto label15;

        $i19 = counts[i#27];

        $i20 = $i19 - i#25;

        if $i20 >= 4 goto label15;

        $i21 = counts[i#27];

        $i22 = i#25 - $i21;

        if $i22 < 4 goto label23;

     label15:
        if stride#24 >= 4 goto label16;

        if stride#24 < 3 goto label20;

        if k#26 != 0 goto label20;

     label16:
        $i2 = stride#24 / 2;

        $i3 = k#26 + $i2;

        count#34 = $i3 / stride#24;

        if count#34 >= 1 goto label17;

        count#34 = 1;

     label17:
        if k#26 != 0 goto label18;

        count#34 = 0;

     label18:
        k#35 = 0;

     label19:
        if k#35 >= stride#24 goto label20;

        $i16 = i#27 - k#35;

        $i17 = $i16 - 1;

        counts[$i17] = count#34;

        k#35 = k#35 + 1;

        goto label19;

     label20:
        stride#24 = 0;

        k#26 = 0;

        $i29 = length#1 - 3;

        if i#27 >= $i29 goto label21;

        $i7 = counts[i#27];

        $i5 = i#27 + 1;

        $i6 = counts[$i5];

        $i10 = $i7 + $i6;

        $i8 = i#27 + 2;

        $i9 = counts[$i8];

        $i13 = $i10 + $i9;

        $i11 = i#27 + 3;

        $i12 = counts[$i11];

        $i14 = $i13 + $i12;

        $i15 = $i14 + 2;

        i#25 = $i15 / 4;

        goto label23;

     label21:
        if i#27 >= length#1 goto label22;

        i#25 = counts[i#27];

        goto label23;

     label22:
        i#25 = 0;

     label23:
        stride#24 = stride#24 + 1;

        if i#27 == length#1 goto label24;

        $i4 = counts[i#27];

        k#26 = k#26 + $i4;

     label24:
        i#27 = i#27 + 1;

        goto label14;

     label25:
        return;
    }

    private static void lzCounts(char[], char[], int, int, int[], int[])
    {
        char[] litLens, dists;
        int start, end, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i#1;
        int[] llCount, dCount, lengthSymbol, cachedDistSymbol;
        char d, l;

        litLens := @parameter0: char[];

        dists := @parameter1: char[];

        start := @parameter2: int;

        end := @parameter3: int;

        llCount := @parameter4: int[];

        dCount := @parameter5: int[];

        lengthSymbol = <com.googlecode.pngtastic.core.processing.zopfli.Util: int[] LENGTH_SYMBOL>;

        cachedDistSymbol = <com.googlecode.pngtastic.core.processing.zopfli.Util: int[] CACHED_DIST_SYMBOL>;

        i#1 = start;

     label1:
        if i#1 >= end goto label4;

        d = dists[i#1];

        l = litLens[i#1];

        if d != 0 goto label2;

        $i6 = llCount[l];

        $i7 = $i6 + 1;

        llCount[l] = $i7;

        goto label3;

     label2:
        $i0 = lengthSymbol[l];

        $i1 = llCount[$i0];

        $i2 = $i1 + 1;

        llCount[$i0] = $i2;

        $i3 = cachedDistSymbol[d];

        $i4 = dCount[$i3];

        $i5 = $i4 + 1;

        dCount[$i3] = $i5;

     label3:
        i#1 = i#1 + 1;

        goto label1;

     label4:
        llCount[256] = 1;

        return;
    }

    private static void getFixedTree(int[], int[])
    {
        int[] llLengths, dLengths;
        int i#1, i#2, i#3, i#4, i#5;

        llLengths := @parameter0: int[];

        dLengths := @parameter1: int[];

        i#1 = 0;

     label01:
        if i#1 >= 144 goto label02;

        llLengths[i#1] = 8;

        i#1 = i#1 + 1;

        goto label01;

     label02:
        i#2 = 144;

     label03:
        if i#2 >= 256 goto label04;

        llLengths[i#2] = 9;

        i#2 = i#2 + 1;

        goto label03;

     label04:
        i#3 = 256;

     label05:
        if i#3 >= 280 goto label06;

        llLengths[i#3] = 7;

        i#3 = i#3 + 1;

        goto label05;

     label06:
        i#4 = 280;

     label07:
        if i#4 >= 288 goto label08;

        llLengths[i#4] = 8;

        i#4 = i#4 + 1;

        goto label07;

     label08:
        i#5 = 0;

     label09:
        if i#5 >= 32 goto label10;

        dLengths[i#5] = 5;

        i#5 = i#5 + 1;

        goto label09;

     label10:
        return;
    }

    private static int simulateAddDynamicTree(com.googlecode.pngtastic.core.processing.zopfli.Cookie, int[], int[])
    {
        com.googlecode.pngtastic.core.processing.zopfli.Cookie cookie;
        int[] llLengths, dLengths;
        int size, $i0, $i1, bestSize#1, i#2, $i2;
        boolean $z0, $z1, $z2;

        cookie := @parameter0: com.googlecode.pngtastic.core.processing.zopfli.Cookie;

        llLengths := @parameter1: int[];

        dLengths := @parameter2: int[];

        bestSize#1 = 2147483647;

        i#2 = 0;

     label1:
        if i#2 >= 8 goto label9;

        $i0 = i#2 & 1;

        if $i0 == 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        $i1 = i#2 & 2;

        if $i1 == 0 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        $i2 = i#2 & 4;

        if $i2 == 0 goto label6;

        $z2 = 1;

        goto label7;

     label6:
        $z2 = 0;

     label7:
        size = staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Deflate: int simulateEncodeTree(com.googlecode.pngtastic.core.processing.zopfli.Cookie,int[],int[],boolean,boolean,boolean)>(cookie, llLengths, dLengths, $z0, $z1, $z2);

        if size >= bestSize#1 goto label8;

        bestSize#1 = size;

     label8:
        i#2 = i#2 + 1;

        goto label1;

     label9:
        return bestSize#1;
    }

    static void findLongestMatch(com.googlecode.pngtastic.core.processing.zopfli.Cookie, com.googlecode.pngtastic.core.processing.zopfli.LongestMatchCache, int, com.googlecode.pngtastic.core.processing.zopfli.Hash, byte[], int, int, int, char[])
    {
        com.googlecode.pngtastic.core.processing.zopfli.Cookie cookie;
        com.googlecode.pngtastic.core.processing.zopfli.LongestMatchCache lmc;
        int blockStart, pos, size, offset, arrayEnd, threshold, marker, same0, $i0, $i1, $i6, $i7, $i10, $i11, $i12, $i18, $i21, $i23, $i24, $i27, $i29, limit#1, $i31, bestDist#21, bestLength#22, chainCounter#23, pp#25, p#26, pp#27, $i32, dist#29, scan#34, match#35, same1#36, $i33, same#38, scan#47, same1#48, pp#56, pp#72, $i34;
        com.googlecode.pngtastic.core.processing.zopfli.Hash h;
        byte[] array;
        char[] subLen, lmcLength, $r2, $r3, $r4, $r7, $r8, $r9;
        int[] hPrev2, hashVal2, $r0, $r1, $r5, $r6, hPrev#24;
        char $c2, $c3, $c4, $c5, $c13, $c19, $c20, $c22, $c25, $c26, $c28, $c30;
        byte $b8, $b9, $b14, $b15, $b16, $b17;

        cookie := @parameter0: com.googlecode.pngtastic.core.processing.zopfli.Cookie;

        lmc := @parameter1: com.googlecode.pngtastic.core.processing.zopfli.LongestMatchCache;

        blockStart := @parameter2: int;

        h := @parameter3: com.googlecode.pngtastic.core.processing.zopfli.Hash;

        array := @parameter4: byte[];

        pos := @parameter5: int;

        size := @parameter6: int;

        limit#1 := @parameter7: int;

        subLen := @parameter8: char[];

        offset = pos - blockStart;

        if lmc == null goto label01;

        $r9 = lmc.<com.googlecode.pngtastic.core.processing.zopfli.LongestMatchCache: char[] length>;

        goto label02;

     label01:
        $r9 = null;

     label02:
        lmcLength = $r9;

        if lmc == null goto label10;

        $c19 = lmcLength[offset];

        if $c19 == 0 goto label03;

        $r8 = lmc.<com.googlecode.pngtastic.core.processing.zopfli.LongestMatchCache: char[] dist>;

        $c30 = $r8[offset];

        if $c30 == 0 goto label10;

     label03:
        if limit#1 == 258 goto label04;

        $c28 = lmcLength[offset];

        if $c28 <= limit#1 goto label04;

        if subLen == null goto label10;

        $i29 = virtualinvoke lmc.<com.googlecode.pngtastic.core.processing.zopfli.LongestMatchCache: int maxCachedSubLen(int)>(offset);

        if $i29 < limit#1 goto label10;

     label04:
        if subLen == null goto label05;

        $c26 = lmcLength[offset];

        $i27 = virtualinvoke lmc.<com.googlecode.pngtastic.core.processing.zopfli.LongestMatchCache: int maxCachedSubLen(int)>(offset);

        if $c26 > $i27 goto label09;

     label05:
        $c20 = lmcLength[offset];

        cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int lenVal> = $c20;

        $i21 = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int lenVal>;

        if $i21 <= limit#1 goto label06;

        cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int lenVal> = limit#1;

     label06:
        if subLen == null goto label07;

        $i23 = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int lenVal>;

        virtualinvoke lmc.<com.googlecode.pngtastic.core.processing.zopfli.LongestMatchCache: void cacheToSubLen(int,int,char[])>(offset, $i23, subLen);

        $i24 = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int lenVal>;

        $c25 = subLen[$i24];

        cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int distVal> = $c25;

        goto label08;

     label07:
        $r7 = lmc.<com.googlecode.pngtastic.core.processing.zopfli.LongestMatchCache: char[] dist>;

        $c22 = $r7[offset];

        cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int distVal> = $c22;

     label08:
        return;

     label09:
        limit#1 = lmcLength[offset];

     label10:
        $i31 = size - pos;

        if $i31 >= 3 goto label11;

        cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int lenVal> = 0;

        cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int distVal> = 0;

        return;

     label11:
        $i0 = pos + limit#1;

        if $i0 <= size goto label12;

        limit#1 = size - pos;

     label12:
        bestDist#21 = 0;

        bestLength#22 = 1;

        arrayEnd = pos + limit#1;

        chainCounter#23 = 8192;

        hPrev#24 = h.<com.googlecode.pngtastic.core.processing.zopfli.Hash: int[] prev>;

        hPrev2 = h.<com.googlecode.pngtastic.core.processing.zopfli.Hash: int[] prev2>;

        $r0 = h.<com.googlecode.pngtastic.core.processing.zopfli.Hash: int[] head>;

        $i1 = h.<com.googlecode.pngtastic.core.processing.zopfli.Hash: int val>;

        pp#25 = $r0[$i1];

        $r1 = h.<com.googlecode.pngtastic.core.processing.zopfli.Hash: int[] same>;

        threshold = $r1[pp#25];

        hashVal2 = h.<com.googlecode.pngtastic.core.processing.zopfli.Hash: int[] hashVal2>;

        marker = hashVal2[pp#25];

        p#26 = hPrev#24[pp#25];

        pp#27 = pp#25 - p#26;

        if pp#27 <= 0 goto label13;

        $i32 = pp#27;

        goto label14;

     label13:
        $i32 = pp#27 + 32768;

     label14:
        dist#29 = $i32;

     label15:
        if dist#29 >= 32768 goto label28;

        if chainCounter#23 <= 0 goto label28;

        scan#34 = pos;

        match#35 = pos - dist#29;

        $i6 = scan#34 + bestLength#22;

        $b9 = array[$i6];

        $i7 = match#35 + bestLength#22;

        $b8 = array[$i7];

        if $b9 != $b8 goto label23;

        $r5 = h.<com.googlecode.pngtastic.core.processing.zopfli.Hash: int[] same>;

        $i12 = pos & 32767;

        same0 = $r5[$i12];

        if same0 <= 2 goto label19;

        $b17 = array[scan#34];

        $b16 = array[match#35];

        if $b17 != $b16 goto label19;

        $r6 = h.<com.googlecode.pngtastic.core.processing.zopfli.Hash: int[] same>;

        $i18 = match#35 & 32767;

        same1#36 = $r6[$i18];

        if same0 >= same1#36 goto label16;

        $i33 = same0;

        goto label17;

     label16:
        $i33 = same1#36;

     label17:
        same#38 = $i33;

        if same#38 <= limit#1 goto label18;

        same#38 = limit#1;

     label18:
        scan#34 = scan#34 + same#38;

        match#35 = match#35 + same#38;

     label19:
        if scan#34 == arrayEnd goto label20;

        $b15 = array[scan#34];

        $b14 = array[match#35];

        if $b15 != $b14 goto label20;

        scan#34 = scan#34 + 1;

        match#35 = match#35 + 1;

        goto label19;

     label20:
        scan#47 = scan#34 - pos;

        if scan#47 <= bestLength#22 goto label23;

        if subLen == null goto label22;

        same1#48 = bestLength#22 + 1;

     label21:
        if same1#48 > scan#47 goto label22;

        $c13 = (char) dist#29;

        subLen[same1#48] = $c13;

        same1#48 = same1#48 + 1;

        goto label21;

     label22:
        bestDist#21 = dist#29;

        bestLength#22 = scan#47;

        if scan#47 < limit#1 goto label23;

        goto label28;

     label23:
        if hPrev#24 == hPrev2 goto label24;

        if bestLength#22 < threshold goto label24;

        $i11 = hashVal2[p#26];

        if marker != $i11 goto label24;

        hPrev#24 = hPrev2;

     label24:
        pp#56 = p#26;

        p#26 = hPrev#24[p#26];

        if p#26 != pp#56 goto label25;

        goto label28;

     label25:
        pp#72 = pp#56 - p#26;

        $i10 = dist#29;

        if pp#72 <= 0 goto label26;

        $i34 = pp#72;

        goto label27;

     label26:
        $i34 = 32768 + pp#72;

     label27:
        dist#29 = $i10 + $i34;

        chainCounter#23 = chainCounter#23 + -1;

        goto label15;

     label28:
        if lmc == null goto label31;

        if limit#1 != 258 goto label31;

        if subLen == null goto label31;

        $c2 = lmcLength[offset];

        if $c2 == 0 goto label31;

        $r2 = lmc.<com.googlecode.pngtastic.core.processing.zopfli.LongestMatchCache: char[] dist>;

        $c3 = $r2[offset];

        if $c3 != 0 goto label31;

        if bestLength#22 >= 3 goto label29;

        $r4 = lmc.<com.googlecode.pngtastic.core.processing.zopfli.LongestMatchCache: char[] dist>;

        $r4[offset] = 0;

        lmcLength[offset] = 0;

        goto label30;

     label29:
        $r3 = lmc.<com.googlecode.pngtastic.core.processing.zopfli.LongestMatchCache: char[] dist>;

        $c4 = (char) bestDist#21;

        $r3[offset] = $c4;

        $c5 = (char) bestLength#22;

        lmcLength[offset] = $c5;

     label30:
        virtualinvoke lmc.<com.googlecode.pngtastic.core.processing.zopfli.LongestMatchCache: void subLenToCache(char[],int,int)>(subLen, offset, bestLength#22);

     label31:
        cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int distVal> = bestDist#21;

        cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int lenVal> = bestLength#22;

        return;
    }

    static void greedy(com.googlecode.pngtastic.core.processing.zopfli.Cookie, com.googlecode.pngtastic.core.processing.zopfli.LongestMatchCache, byte[], int, int, com.googlecode.pngtastic.core.processing.zopfli.LzStore)
    {
        com.googlecode.pngtastic.core.processing.zopfli.Cookie cookie;
        com.googlecode.pngtastic.core.processing.zopfli.LongestMatchCache lmc;
        byte[] input;
        int 'from', 'to', dist, lengthScore, prevLengthScore, $i0, $i1, $i7, $i10, prevLength#1, prevMatch#2, i#4, len#5, $i14, $i15, j#8, j#15;
        com.googlecode.pngtastic.core.processing.zopfli.LzStore store;
        com.googlecode.pngtastic.core.processing.zopfli.Hash h;
        char[] dummySubLen;
        byte $b2, $b11;
        short $s3, $s12;
        char $c4, $c5, $c6, $c8, $c9, $c13;
        boolean matchAvailable#3;

        cookie := @parameter0: com.googlecode.pngtastic.core.processing.zopfli.Cookie;

        lmc := @parameter1: com.googlecode.pngtastic.core.processing.zopfli.LongestMatchCache;

        input := @parameter2: byte[];

        'from' := @parameter3: int;

        'to' := @parameter4: int;

        store := @parameter5: com.googlecode.pngtastic.core.processing.zopfli.LzStore;

        h = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: com.googlecode.pngtastic.core.processing.zopfli.Hash h>;

        $i0 = 'from' - 32768;

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>($i0, 0);

        virtualinvoke h.<com.googlecode.pngtastic.core.processing.zopfli.Hash: void init(byte[],int,int,int)>(input, $i1, 'from', 'to');

        prevLength#1 = 0;

        prevMatch#2 = 0;

        dummySubLen = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: char[] c259a>;

        matchAvailable#3 = 0;

        i#4 = 'from';

     label01:
        if i#4 >= 'to' goto label15;

        virtualinvoke h.<com.googlecode.pngtastic.core.processing.zopfli.Hash: void updateHash(byte[],int,int)>(input, i#4, 'to');

        staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Deflate: void findLongestMatch(com.googlecode.pngtastic.core.processing.zopfli.Cookie,com.googlecode.pngtastic.core.processing.zopfli.LongestMatchCache,int,com.googlecode.pngtastic.core.processing.zopfli.Hash,byte[],int,int,int,char[])>(cookie, lmc, 'from', h, input, i#4, 'to', 258, dummySubLen);

        len#5 = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int lenVal>;

        dist = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int distVal>;

        if dist <= 1024 goto label02;

        $i14 = len#5 - 1;

        goto label03;

     label02:
        $i14 = len#5;

     label03:
        lengthScore = $i14;

        if prevMatch#2 <= 1024 goto label04;

        $i15 = prevLength#1 - 1;

        goto label05;

     label04:
        $i15 = prevLength#1;

     label05:
        prevLengthScore = $i15;

        if matchAvailable#3 == 0 goto label09;

        matchAvailable#3 = 0;

        $i7 = prevLengthScore + 1;

        if lengthScore <= $i7 goto label06;

        $i10 = i#4 - 1;

        $b11 = input[$i10];

        $s12 = $b11 & 255;

        $c13 = (char) $s12;

        virtualinvoke store.<com.googlecode.pngtastic.core.processing.zopfli.LzStore: void append(char,char)>($c13, 0);

        if lengthScore < 3 goto label10;

        if len#5 >= 258 goto label10;

        matchAvailable#3 = 1;

        prevLength#1 = len#5;

        prevMatch#2 = dist;

        goto label14;

     label06:
        $c9 = (char) prevLength#1;

        $c8 = (char) prevMatch#2;

        virtualinvoke store.<com.googlecode.pngtastic.core.processing.zopfli.LzStore: void append(char,char)>($c9, $c8);

        j#8 = 2;

     label07:
        if j#8 >= prevLength#1 goto label08;

        i#4 = i#4 + 1;

        virtualinvoke h.<com.googlecode.pngtastic.core.processing.zopfli.Hash: void updateHash(byte[],int,int)>(input, i#4, 'to');

        j#8 = j#8 + 1;

        goto label07;

     label08:
        goto label14;

     label09:
        if lengthScore < 3 goto label10;

        if len#5 >= 258 goto label10;

        matchAvailable#3 = 1;

        prevLength#1 = len#5;

        prevMatch#2 = dist;

        goto label14;

     label10:
        if lengthScore < 3 goto label11;

        $c6 = (char) len#5;

        $c5 = (char) dist;

        virtualinvoke store.<com.googlecode.pngtastic.core.processing.zopfli.LzStore: void append(char,char)>($c6, $c5);

        goto label12;

     label11:
        len#5 = 1;

        $b2 = input[i#4];

        $s3 = $b2 & 255;

        $c4 = (char) $s3;

        virtualinvoke store.<com.googlecode.pngtastic.core.processing.zopfli.LzStore: void append(char,char)>($c4, 0);

     label12:
        j#15 = 1;

     label13:
        if j#15 >= len#5 goto label14;

        i#4 = i#4 + 1;

        virtualinvoke h.<com.googlecode.pngtastic.core.processing.zopfli.Hash: void updateHash(byte[],int,int)>(input, i#4, 'to');

        j#15 = j#15 + 1;

        goto label13;

     label14:
        i#4 = i#4 + 1;

        goto label01;

     label15:
        return;
    }

    private static void encodeTree(com.googlecode.pngtastic.core.processing.zopfli.Cookie, int[], int[], boolean, boolean, boolean, com.googlecode.pngtastic.core.processing.zopfli.Buffer)
    {
        com.googlecode.pngtastic.core.processing.zopfli.Cookie cookie;
        int[] llLengths, dLengths, lldLengths, rle, rleBits, $r0, $r1, $r2, $r3, i#57, count#59, symbol#60, j#61;
        boolean use16, use17, use18;
        com.googlecode.pngtastic.core.processing.zopfli.Buffer output;
        int lldTotal, symbol, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, hLit#1, hDist#2, rleSize#5, i#6, count#11, symbol#12, j#19, $i33, i#41, $i34, j#46, $i35, j#48, $i36, j#53, count#58, hcLen#62, i#63, $i37, i#72;

        cookie := @parameter0: com.googlecode.pngtastic.core.processing.zopfli.Cookie;

        llLengths := @parameter1: int[];

        dLengths := @parameter2: int[];

        use16 := @parameter3: boolean;

        use17 := @parameter4: boolean;

        use18 := @parameter5: boolean;

        output := @parameter6: com.googlecode.pngtastic.core.processing.zopfli.Buffer;

        hLit#1 = 29;

        hDist#2 = 29;

     label01:
        if hLit#1 <= 0 goto label02;

        $i31 = 256 + hLit#1;

        $i32 = llLengths[$i31];

        if $i32 != 0 goto label02;

        hLit#1 = hLit#1 + -1;

        goto label01;

     label02:
        if hDist#2 <= 0 goto label03;

        $i30 = dLengths[hDist#2];

        if $i30 != 0 goto label03;

        hDist#2 = hDist#2 + -1;

        goto label02;

     label03:
        $i0 = hLit#1 + 258;

        lldTotal = $i0 + hDist#2;

        lldLengths = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] i320b>;

        $i1 = 257 + hLit#1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(llLengths, 0, lldLengths, 0, $i1);

        $i3 = 257 + hLit#1;

        $i2 = hDist#2 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(dLengths, 0, lldLengths, $i3, $i2);

        rleSize#5 = 0;

        rle = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] i320a>;

        rleBits = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] i320c>;

        i#6 = 0;

     label04:
        if i#6 >= lldTotal goto label21;

        count#11 = 1;

        symbol#12 = lldLengths[i#6];

        if use16 != 0 goto label05;

        if symbol#12 != 0 goto label07;

        if use17 != 0 goto label05;

        if use18 == 0 goto label07;

     label05:
        j#19 = i#6 + 1;

     label06:
        if j#19 >= lldTotal goto label07;

        $i29 = lldLengths[j#19];

        if symbol#12 != $i29 goto label07;

        count#11 = count#11 + 1;

        j#19 = j#19 + 1;

        goto label06;

     label07:
        $i33 = count#11 - 1;

        i#41 = i#6 + $i33;

        if symbol#12 != 0 goto label15;

        if count#11 <= 2 goto label15;

        if use18 == 0 goto label11;

     label08:
        if count#11 <= 10 goto label11;

        if count#11 <= 138 goto label09;

        $i34 = 138;

        goto label10;

     label09:
        $i34 = count#11;

     label10:
        j#46 = $i34;

        rle[rleSize#5] = 18;

        $i27 = rleSize#5;

        rleSize#5 = rleSize#5 + 1;

        $i28 = j#46 - 11;

        rleBits[$i27] = $i28;

        count#11 = count#11 - j#46;

        goto label08;

     label11:
        if use17 == 0 goto label15;

     label12:
        if count#11 <= 2 goto label15;

        if count#11 <= 10 goto label13;

        $i35 = 10;

        goto label14;

     label13:
        $i35 = count#11;

     label14:
        j#48 = $i35;

        rle[rleSize#5] = 17;

        $i25 = rleSize#5;

        rleSize#5 = rleSize#5 + 1;

        $i26 = j#48 - 3;

        rleBits[$i25] = $i26;

        count#11 = count#11 - j#48;

        goto label12;

     label15:
        if use16 == 0 goto label19;

        if count#11 <= 3 goto label19;

        count#11 = count#11 + -1;

        rle[rleSize#5] = symbol#12;

        $i22 = rleSize#5;

        rleSize#5 = rleSize#5 + 1;

        rleBits[$i22] = 0;

     label16:
        if count#11 <= 2 goto label19;

        if count#11 <= 6 goto label17;

        $i36 = 6;

        goto label18;

     label17:
        $i36 = count#11;

     label18:
        j#53 = $i36;

        rle[rleSize#5] = 16;

        $i23 = rleSize#5;

        rleSize#5 = rleSize#5 + 1;

        $i24 = j#53 - 3;

        rleBits[$i23] = $i24;

        count#11 = count#11 - j#53;

        goto label16;

     label19:
        if count#11 == 0 goto label20;

        rle[rleSize#5] = symbol#12;

        $i21 = rleSize#5;

        rleSize#5 = rleSize#5 + 1;

        rleBits[$i21] = 0;

        count#11 = count#11 + -1;

        goto label19;

     label20:
        i#6 = i#41 + 1;

        goto label04;

     label21:
        i#57 = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] i19a>;

        $r0 = <com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] intZeroes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, i#57, 0, 19);

        count#58 = 0;

     label22:
        if count#58 >= rleSize#5 goto label23;

        $i18 = rle[count#58];

        $i19 = i#57[$i18];

        $i20 = $i19 + 1;

        i#57[$i18] = $i20;

        count#58 = count#58 + 1;

        goto label22;

     label23:
        count#59 = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] i19b>;

        $r1 = <com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] intZeroes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, count#59, 0, 19);

        staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Katajainen: void lengthLimitedCodeLengths(com.googlecode.pngtastic.core.processing.zopfli.Cookie,int[],int,int[])>(cookie, i#57, 7, count#59);

        symbol#60 = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] i19c>;

        $r3 = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] i16a>;

        $r2 = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] i16b>;

        staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Deflate: void lengthsToSymbols(int[],int,int,int[],int[],int[])>(count#59, 19, 7, symbol#60, $r3, $r2);

        j#61 = <com.googlecode.pngtastic.core.processing.zopfli.Util: int[] ORDER>;

        hcLen#62 = 15;

     label24:
        if hcLen#62 <= 0 goto label25;

        $i15 = hcLen#62 + 3;

        $i16 = j#61[$i15];

        $i17 = i#57[$i16];

        if $i17 != 0 goto label25;

        hcLen#62 = hcLen#62 + -1;

        goto label24;

     label25:
        virtualinvoke output.<com.googlecode.pngtastic.core.processing.zopfli.Buffer: void addBits(int,int)>(hLit#1, 5);

        virtualinvoke output.<com.googlecode.pngtastic.core.processing.zopfli.Buffer: void addBits(int,int)>(hDist#2, 5);

        virtualinvoke output.<com.googlecode.pngtastic.core.processing.zopfli.Buffer: void addBits(int,int)>(hcLen#62, 4);

        i#63 = 0;

     label26:
        $i37 = hcLen#62 + 4;

        if i#63 >= $i37 goto label27;

        $i13 = j#61[i#63];

        $i14 = count#59[$i13];

        virtualinvoke output.<com.googlecode.pngtastic.core.processing.zopfli.Buffer: void addBits(int,int)>($i14, 3);

        i#63 = i#63 + 1;

        goto label26;

     label27:
        i#72 = 0;

     label28:
        if i#72 >= rleSize#5 goto label32;

        $i4 = rle[i#72];

        symbol = symbol#60[$i4];

        $i5 = rle[i#72];

        $i6 = count#59[$i5];

        virtualinvoke output.<com.googlecode.pngtastic.core.processing.zopfli.Buffer: void addHuffmanBits(int,int)>(symbol, $i6);

        $i7 = rle[i#72];

        if $i7 != 16 goto label29;

        $i12 = rleBits[i#72];

        virtualinvoke output.<com.googlecode.pngtastic.core.processing.zopfli.Buffer: void addBits(int,int)>($i12, 2);

        goto label31;

     label29:
        $i8 = rle[i#72];

        if $i8 != 17 goto label30;

        $i11 = rleBits[i#72];

        virtualinvoke output.<com.googlecode.pngtastic.core.processing.zopfli.Buffer: void addBits(int,int)>($i11, 3);

        goto label31;

     label30:
        $i9 = rle[i#72];

        if $i9 != 18 goto label31;

        $i10 = rleBits[i#72];

        virtualinvoke output.<com.googlecode.pngtastic.core.processing.zopfli.Buffer: void addBits(int,int)>($i10, 7);

     label31:
        i#72 = i#72 + 1;

        goto label28;

     label32:
        return;
    }

    private static int simulateEncodeTree(com.googlecode.pngtastic.core.processing.zopfli.Cookie, int[], int[], boolean, boolean, boolean)
    {
        com.googlecode.pngtastic.core.processing.zopfli.Cookie cookie;
        int[] llLengths, dLengths, lldLengths, rle, $r0, $r1, i#54, count#56, symbol#57;
        boolean use16, use17, use18;
        int lldTotal, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, hLit#1, hDist#2, rleSize#5, i#6, count#11, symbol#12, j#19, $i33, i#41, $i34, $i35, $i36, count#55, j#58, result#59, i#60;

        cookie := @parameter0: com.googlecode.pngtastic.core.processing.zopfli.Cookie;

        llLengths := @parameter1: int[];

        dLengths := @parameter2: int[];

        use16 := @parameter3: boolean;

        use17 := @parameter4: boolean;

        use18 := @parameter5: boolean;

        hLit#1 = 29;

        hDist#2 = 29;

     label01:
        if hLit#1 <= 0 goto label02;

        $i31 = 256 + hLit#1;

        $i32 = llLengths[$i31];

        if $i32 != 0 goto label02;

        hLit#1 = hLit#1 + -1;

        goto label01;

     label02:
        if hDist#2 <= 0 goto label03;

        $i30 = dLengths[hDist#2];

        if $i30 != 0 goto label03;

        hDist#2 = hDist#2 + -1;

        goto label02;

     label03:
        $i0 = hLit#1 + 258;

        lldTotal = $i0 + hDist#2;

        lldLengths = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] i320b>;

        $i1 = 257 + hLit#1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(llLengths, 0, lldLengths, 0, $i1);

        $i3 = 257 + hLit#1;

        $i2 = hDist#2 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(dLengths, 0, lldLengths, $i3, $i2);

        rle = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] i320a>;

        rleSize#5 = 0;

        i#6 = 0;

     label04:
        if i#6 >= lldTotal goto label21;

        count#11 = 1;

        symbol#12 = lldLengths[i#6];

        if use16 != 0 goto label05;

        if symbol#12 != 0 goto label07;

        if use17 != 0 goto label05;

        if use18 == 0 goto label07;

     label05:
        j#19 = i#6 + 1;

     label06:
        if j#19 >= lldTotal goto label07;

        $i29 = lldLengths[j#19];

        if symbol#12 != $i29 goto label07;

        count#11 = count#11 + 1;

        j#19 = j#19 + 1;

        goto label06;

     label07:
        $i33 = count#11 - 1;

        i#41 = i#6 + $i33;

        if symbol#12 != 0 goto label15;

        if count#11 <= 2 goto label15;

        if use18 == 0 goto label11;

     label08:
        if count#11 <= 10 goto label11;

        $i27 = rleSize#5;

        rleSize#5 = rleSize#5 + 1;

        rle[$i27] = 18;

        $i28 = count#11;

        if count#11 <= 138 goto label09;

        $i34 = 138;

        goto label10;

     label09:
        $i34 = count#11;

     label10:
        count#11 = $i28 - $i34;

        goto label08;

     label11:
        if use17 == 0 goto label15;

     label12:
        if count#11 <= 2 goto label15;

        $i25 = rleSize#5;

        rleSize#5 = rleSize#5 + 1;

        rle[$i25] = 17;

        $i26 = count#11;

        if count#11 <= 10 goto label13;

        $i35 = 10;

        goto label14;

     label13:
        $i35 = count#11;

     label14:
        count#11 = $i26 - $i35;

        goto label12;

     label15:
        if use16 == 0 goto label19;

        if count#11 <= 3 goto label19;

        count#11 = count#11 + -1;

        $i22 = rleSize#5;

        rleSize#5 = rleSize#5 + 1;

        rle[$i22] = symbol#12;

     label16:
        if count#11 <= 2 goto label19;

        $i23 = rleSize#5;

        rleSize#5 = rleSize#5 + 1;

        rle[$i23] = 16;

        $i24 = count#11;

        if count#11 <= 6 goto label17;

        $i36 = 6;

        goto label18;

     label17:
        $i36 = count#11;

     label18:
        count#11 = $i24 - $i36;

        goto label16;

     label19:
        if count#11 == 0 goto label20;

        $i21 = rleSize#5;

        rleSize#5 = rleSize#5 + 1;

        rle[$i21] = symbol#12;

        count#11 = count#11 + -1;

        goto label19;

     label20:
        i#6 = i#41 + 1;

        goto label04;

     label21:
        i#54 = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] i19a>;

        $r0 = <com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] intZeroes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, i#54, 0, 19);

        count#55 = 0;

     label22:
        if count#55 >= rleSize#5 goto label23;

        $i18 = rle[count#55];

        $i19 = i#54[$i18];

        $i20 = $i19 + 1;

        i#54[$i18] = $i20;

        count#55 = count#55 + 1;

        goto label22;

     label23:
        count#56 = cookie.<com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] i19b>;

        $r1 = <com.googlecode.pngtastic.core.processing.zopfli.Cookie: int[] intZeroes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, count#56, 0, 19);

        staticinvoke <com.googlecode.pngtastic.core.processing.zopfli.Katajainen: void lengthLimitedCodeLengths(com.googlecode.pngtastic.core.processing.zopfli.Cookie,int[],int,int[])>(cookie, i#54, 7, count#56);

        $i4 = count#56[16];

        $i5 = $i4 + 2;

        count#56[16] = $i5;

        $i6 = count#56[17];

        $i7 = $i6 + 3;

        count#56[17] = $i7;

        $i8 = count#56[18];

        $i9 = $i8 + 7;

        count#56[18] = $i9;

        symbol#57 = <com.googlecode.pngtastic.core.processing.zopfli.Util: int[] ORDER>;

        j#58 = 15;

     label24:
        if j#58 <= 0 goto label25;

        $i15 = j#58 + 3;

        $i16 = symbol#57[$i15];

        $i17 = i#54[$i16];

        if $i17 != 0 goto label25;

        j#58 = j#58 + -1;

        goto label24;

     label25:
        $i10 = j#58 + 4;

        $i11 = $i10 * 3;

        result#59 = 14 + $i11;

        i#60 = 0;

     label26:
        if i#60 >= 19 goto label27;

        $i13 = count#56[i#60];

        $i12 = i#54[i#60];

        $i14 = $i13 * $i12;

        result#59 = result#59 + $i14;

        i#60 = i#60 + 1;

        goto label26;

     label27:
        return result#59;
    }


