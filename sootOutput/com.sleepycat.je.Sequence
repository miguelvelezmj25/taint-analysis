    void <init>(com.sleepycat.je.Database, com.sleepycat.je.Transaction, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.SequenceConfig) throws com.sleepycat.je.SequenceNotFoundException, com.sleepycat.je.SequenceExistsException
    {
        com.sleepycat.je.Sequence this;
        com.sleepycat.je.Database db;
        com.sleepycat.je.Transaction txn;
        com.sleepycat.je.DatabaseEntry key, $r11, $r27;
        com.sleepycat.je.SequenceConfig config, useConfig, $r2;
        boolean sequenceExists, isWritableLocker, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        java.lang.Throwable l11, $r30;
        com.sleepycat.je.dbi.DatabaseImpl $r0, $r22, $r23;
        java.lang.UnsupportedOperationException $r1;
        long $l0, $l1, $l3, $l4, $l6, $l7, $l9, $l10, $l12, $l13, $l15, $l16, $l17, $l19, $l20, $l21, $l22;
        byte $b2, $b5, $b8, $b14;
        java.lang.IllegalArgumentException $r3, $r4, $r5;
        int $i11, $i18;
        com.sleepycat.je.Environment $r6, $r12, $r17, $r21;
        com.sleepycat.je.TransactionConfig $r7, $r8, $r9, $r24;
        com.sleepycat.je.Durability $r10;
        com.sleepycat.je.dbi.EnvironmentImpl $r13, $r18;
        java.util.logging.Logger $r14;
        com.sleepycat.je.txn.Locker locker#67;
        com.sleepycat.je.Cursor cursor#69, $r15, $r25;
        com.sleepycat.je.OperationStatus status#71, $r20;
        com.sleepycat.je.DatabaseConfig $r16;
        com.sleepycat.je.SequenceExistsException $r19;
        java.lang.IllegalStateException $r28;
        com.sleepycat.je.SequenceNotFoundException $r29;

        this := @this: com.sleepycat.je.Sequence;

        db := @parameter0: com.sleepycat.je.Database;

        txn := @parameter1: com.sleepycat.je.Transaction;

        key := @parameter2: com.sleepycat.je.DatabaseEntry;

        config := @parameter3: com.sleepycat.je.SequenceConfig;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = virtualinvoke db.<com.sleepycat.je.Database: com.sleepycat.je.dbi.DatabaseImpl getDbImpl()>();

        $z0 = virtualinvoke $r0.<com.sleepycat.je.dbi.DatabaseImpl: boolean getSortedDuplicates()>();

        if $z0 == 0 goto label01;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Sequences not supported in databases configured for duplicates");

        throw $r1;

     label01:
        if config == null goto label02;

        $r2 = config;

        goto label03;

     label02:
        $r2 = <com.sleepycat.je.SequenceConfig: com.sleepycat.je.SequenceConfig DEFAULT>;

     label03:
        useConfig = $r2;

        $l0 = virtualinvoke useConfig.<com.sleepycat.je.SequenceConfig: long getRangeMin()>();

        $l1 = virtualinvoke useConfig.<com.sleepycat.je.SequenceConfig: long getRangeMax()>();

        $b2 = $l0 cmp $l1;

        if $b2 < 0 goto label04;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Minimum sequence value must be less than the maximum");

        throw $r3;

     label04:
        $l3 = virtualinvoke useConfig.<com.sleepycat.je.SequenceConfig: long getInitialValue()>();

        $l4 = virtualinvoke useConfig.<com.sleepycat.je.SequenceConfig: long getRangeMax()>();

        $b5 = $l3 cmp $l4;

        if $b5 > 0 goto label05;

        $l6 = virtualinvoke useConfig.<com.sleepycat.je.SequenceConfig: long getInitialValue()>();

        $l7 = virtualinvoke useConfig.<com.sleepycat.je.SequenceConfig: long getRangeMin()>();

        $b8 = $l6 cmp $l7;

        if $b8 >= 0 goto label06;

     label05:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Initial sequence value is out of range");

        throw $r4;

     label06:
        $l9 = virtualinvoke useConfig.<com.sleepycat.je.SequenceConfig: long getRangeMin()>();

        $l10 = virtualinvoke useConfig.<com.sleepycat.je.SequenceConfig: long getRangeMax()>();

        $i11 = virtualinvoke useConfig.<com.sleepycat.je.SequenceConfig: int getCacheSize()>();

        $l12 = (long) $i11;

        $l13 = $l10 - $l12;

        $b14 = $l9 cmp $l13;

        if $b14 <= 0 goto label07;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The cache size is larger than the sequence range");

        throw $r5;

     label07:
        $z1 = virtualinvoke useConfig.<com.sleepycat.je.SequenceConfig: boolean getAutoCommitNoSync()>();

        if $z1 == 0 goto label08;

        $r6 = virtualinvoke db.<com.sleepycat.je.Database: com.sleepycat.je.Environment getEnvironment()>();

        $r7 = staticinvoke <com.sleepycat.je.DbInternal: com.sleepycat.je.TransactionConfig getDefaultTxnConfig(com.sleepycat.je.Environment)>($r6);

        $r8 = virtualinvoke $r7.<com.sleepycat.je.TransactionConfig: com.sleepycat.je.TransactionConfig clone()>();

        this.<com.sleepycat.je.Sequence: com.sleepycat.je.TransactionConfig autoCommitConfig> = $r8;

        $r9 = this.<com.sleepycat.je.Sequence: com.sleepycat.je.TransactionConfig autoCommitConfig>;

        $r10 = <com.sleepycat.je.Durability: com.sleepycat.je.Durability COMMIT_NO_SYNC>;

        virtualinvoke $r9.<com.sleepycat.je.TransactionConfig: void overrideDurability(com.sleepycat.je.Durability)>($r10);

        goto label09;

     label08:
        this.<com.sleepycat.je.Sequence: com.sleepycat.je.TransactionConfig autoCommitConfig> = null;

     label09:
        this.<com.sleepycat.je.Sequence: com.sleepycat.je.Database db> = db;

        $r11 = specialinvoke this.<com.sleepycat.je.Sequence: com.sleepycat.je.DatabaseEntry copyEntry(com.sleepycat.je.DatabaseEntry)>(key);

        this.<com.sleepycat.je.Sequence: com.sleepycat.je.DatabaseEntry key> = $r11;

        $r12 = virtualinvoke db.<com.sleepycat.je.Database: com.sleepycat.je.Environment getEnvironment()>();

        $r13 = virtualinvoke $r12.<com.sleepycat.je.Environment: com.sleepycat.je.dbi.EnvironmentImpl getNonNullEnvImpl()>();

        $r14 = virtualinvoke $r13.<com.sleepycat.je.dbi.EnvironmentImpl: java.util.logging.Logger getLogger()>();

        this.<com.sleepycat.je.Sequence: java.util.logging.Logger logger> = $r14;

        locker#67 = null;

        cursor#69 = null;

        status#71 = <com.sleepycat.je.OperationStatus: com.sleepycat.je.OperationStatus NOTFOUND>;

     label10:
        locker#67 = staticinvoke <com.sleepycat.je.txn.LockerFactory: com.sleepycat.je.txn.Locker getReadableLocker(com.sleepycat.je.Database,com.sleepycat.je.Transaction,boolean)>(db, txn, 0);

        $r15 = new com.sleepycat.je.Cursor;

        specialinvoke $r15.<com.sleepycat.je.Cursor: void <init>(com.sleepycat.je.Database,com.sleepycat.je.txn.Locker,com.sleepycat.je.CursorConfig)>(db, locker#67, null);

        cursor#69 = $r15;

        sequenceExists = specialinvoke this.<com.sleepycat.je.Sequence: boolean readData(com.sleepycat.je.Cursor,com.sleepycat.je.LockMode)>(cursor#69, null);

        $r16 = virtualinvoke db.<com.sleepycat.je.Database: com.sleepycat.je.DatabaseConfig getConfig()>();

        $z2 = virtualinvoke $r16.<com.sleepycat.je.DatabaseConfig: boolean getTransactional()>();

        if $z2 == 0 goto label11;

        $z3 = virtualinvoke locker#67.<com.sleepycat.je.txn.Locker: boolean isTransactional()>();

        if $z3 == 0 goto label12;

        $r17 = virtualinvoke db.<com.sleepycat.je.Database: com.sleepycat.je.Environment getEnvironment()>();

        $r18 = staticinvoke <com.sleepycat.je.DbInternal: com.sleepycat.je.dbi.EnvironmentImpl getNonNullEnvImpl(com.sleepycat.je.Environment)>($r17);

        $z4 = virtualinvoke $r18.<com.sleepycat.je.dbi.EnvironmentImpl: boolean isReplicated()>();

        if $z4 != 0 goto label12;

     label11:
        $z5 = 1;

        goto label13;

     label12:
        $z5 = 0;

     label13:
        isWritableLocker = $z5;

        if sequenceExists == 0 goto label14;

        $z6 = virtualinvoke useConfig.<com.sleepycat.je.SequenceConfig: boolean getAllowCreate()>();

        if $z6 == 0 goto label21;

        $z7 = virtualinvoke useConfig.<com.sleepycat.je.SequenceConfig: boolean getExclusiveCreate()>();

        if $z7 == 0 goto label21;

        $r19 = new com.sleepycat.je.SequenceExistsException;

        specialinvoke $r19.<com.sleepycat.je.SequenceExistsException: void <init>(java.lang.String)>("ExclusiveCreate=true and the sequence record already exists.");

        throw $r19;

     label14:
        $z8 = virtualinvoke useConfig.<com.sleepycat.je.SequenceConfig: boolean getAllowCreate()>();

        if $z8 == 0 goto label20;

        if isWritableLocker != 0 goto label16;

        if cursor#69 == null goto label15;

        virtualinvoke cursor#69.<com.sleepycat.je.Cursor: void close()>();

     label15:
        $r20 = <com.sleepycat.je.OperationStatus: com.sleepycat.je.OperationStatus SUCCESS>;

        virtualinvoke locker#67.<com.sleepycat.je.txn.Locker: void operationEnd(com.sleepycat.je.OperationStatus)>($r20);

        $r21 = virtualinvoke db.<com.sleepycat.je.Database: com.sleepycat.je.Environment getEnvironment()>();

        $r22 = virtualinvoke db.<com.sleepycat.je.Database: com.sleepycat.je.dbi.DatabaseImpl getDbImpl()>();

        $z9 = virtualinvoke $r22.<com.sleepycat.je.dbi.DatabaseImpl: boolean isInternalDb()>();

        $z10 = virtualinvoke db.<com.sleepycat.je.Database: boolean isTransactional()>();

        $r23 = virtualinvoke db.<com.sleepycat.je.Database: com.sleepycat.je.dbi.DatabaseImpl getDbImpl()>();

        $z11 = virtualinvoke $r23.<com.sleepycat.je.dbi.DatabaseImpl: boolean isReplicated()>();

        $r24 = this.<com.sleepycat.je.Sequence: com.sleepycat.je.TransactionConfig autoCommitConfig>;

        locker#67 = staticinvoke <com.sleepycat.je.txn.LockerFactory: com.sleepycat.je.txn.Locker getWritableLocker(com.sleepycat.je.Environment,com.sleepycat.je.Transaction,boolean,boolean,boolean,com.sleepycat.je.TransactionConfig)>($r21, txn, $z9, $z10, $z11, $r24);

        $r25 = new com.sleepycat.je.Cursor;

        specialinvoke $r25.<com.sleepycat.je.Cursor: void <init>(com.sleepycat.je.Database,com.sleepycat.je.txn.Locker,com.sleepycat.je.CursorConfig)>(db, locker#67, null);

        cursor#69 = $r25;

     label16:
        $l15 = virtualinvoke useConfig.<com.sleepycat.je.SequenceConfig: long getRangeMin()>();

        this.<com.sleepycat.je.Sequence: long rangeMin> = $l15;

        $l16 = virtualinvoke useConfig.<com.sleepycat.je.SequenceConfig: long getRangeMax()>();

        this.<com.sleepycat.je.Sequence: long rangeMax> = $l16;

        $z12 = virtualinvoke useConfig.<com.sleepycat.je.SequenceConfig: boolean getDecrement()>();

        if $z12 != 0 goto label17;

        $z13 = 1;

        goto label18;

     label17:
        $z13 = 0;

     label18:
        this.<com.sleepycat.je.Sequence: boolean increment> = $z13;

        $z14 = virtualinvoke useConfig.<com.sleepycat.je.SequenceConfig: boolean getWrap()>();

        this.<com.sleepycat.je.Sequence: boolean wrapAllowed> = $z14;

        $l17 = virtualinvoke useConfig.<com.sleepycat.je.SequenceConfig: long getInitialValue()>();

        this.<com.sleepycat.je.Sequence: long storedValue> = $l17;

        $r27 = specialinvoke this.<com.sleepycat.je.Sequence: com.sleepycat.je.DatabaseEntry makeData()>();

        status#71 = virtualinvoke cursor#69.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationStatus putNoOverwrite(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry)>(key, $r27);

        $z15 = specialinvoke this.<com.sleepycat.je.Sequence: boolean readData(com.sleepycat.je.Cursor,com.sleepycat.je.LockMode)>(cursor#69, null);

        if $z15 != 0 goto label19;

        $r28 = new java.lang.IllegalStateException;

        specialinvoke $r28.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Sequence record removed during openSequence.");

        throw $r28;

     label19:
        status#71 = <com.sleepycat.je.OperationStatus: com.sleepycat.je.OperationStatus SUCCESS>;

        goto label21;

     label20:
        $r29 = new com.sleepycat.je.SequenceNotFoundException;

        specialinvoke $r29.<com.sleepycat.je.SequenceNotFoundException: void <init>(java.lang.String)>("AllowCreate=false and the sequence record does not exist.");

        throw $r29;

     label21:
        if cursor#69 == null goto label22;

        virtualinvoke cursor#69.<com.sleepycat.je.Cursor: void close()>();

     label22:
        if locker#67 == null goto label28;

        virtualinvoke locker#67.<com.sleepycat.je.txn.Locker: void operationEnd(com.sleepycat.je.OperationStatus)>(status#71);

        goto label28;

     label23:
        $r30 := @caughtexception;

     label24:
        l11 = $r30;

     label25:
        if cursor#69 == null goto label26;

        virtualinvoke cursor#69.<com.sleepycat.je.Cursor: void close()>();

     label26:
        if locker#67 == null goto label27;

        virtualinvoke locker#67.<com.sleepycat.je.txn.Locker: void operationEnd(com.sleepycat.je.OperationStatus)>(status#71);

     label27:
        throw l11;

     label28:
        $i18 = virtualinvoke useConfig.<com.sleepycat.je.SequenceConfig: int getCacheSize()>();

        this.<com.sleepycat.je.Sequence: int cacheSize> = $i18;

        $l19 = this.<com.sleepycat.je.Sequence: long storedValue>;

        this.<com.sleepycat.je.Sequence: long cacheValue> = $l19;

        $z16 = this.<com.sleepycat.je.Sequence: boolean increment>;

        if $z16 == 0 goto label29;

        $l20 = this.<com.sleepycat.je.Sequence: long storedValue>;

        $l21 = $l20 - 1L;

        goto label30;

     label29:
        $l22 = this.<com.sleepycat.je.Sequence: long storedValue>;

        $l21 = $l22 + 1L;

     label30:
        this.<com.sleepycat.je.Sequence: long cacheLast> = $l21;

        return;

        catch java.lang.Throwable from label10 to label21 with label23;
        catch java.lang.Throwable from label24 to label25 with label23;
    }

    private com.sleepycat.je.DatabaseEntry copyEntry(com.sleepycat.je.DatabaseEntry)
    {
        com.sleepycat.je.Sequence this;
        com.sleepycat.je.DatabaseEntry entry, $r1;
        int len, $i0, $i1;
        byte[] data#5, $r0;

        this := @this: com.sleepycat.je.Sequence;

        entry := @parameter0: com.sleepycat.je.DatabaseEntry;

        len = virtualinvoke entry.<com.sleepycat.je.DatabaseEntry: int getSize()>();

        if len != 0 goto label1;

        data#5 = <com.sleepycat.je.log.LogUtils: byte[] ZERO_LENGTH_BYTE_ARRAY>;

        goto label2;

     label1:
        data#5 = newarray (byte)[len];

        $r0 = virtualinvoke entry.<com.sleepycat.je.DatabaseEntry: byte[] getData()>();

        $i0 = virtualinvoke entry.<com.sleepycat.je.DatabaseEntry: int getOffset()>();

        $i1 = lengthof data#5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i0, data#5, 0, $i1);

     label2:
        $r1 = new com.sleepycat.je.DatabaseEntry;

        specialinvoke $r1.<com.sleepycat.je.DatabaseEntry: void <init>(byte[])>(data#5);

        return $r1;
    }

    private boolean readData(com.sleepycat.je.Cursor, com.sleepycat.je.LockMode) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.Sequence this;
        com.sleepycat.je.Cursor cursor;
        com.sleepycat.je.LockMode lockMode;
        com.sleepycat.je.DatabaseEntry data, $r0, $r1;
        com.sleepycat.je.OperationStatus status, $r2;
        java.nio.ByteBuffer buf;
        byte version, flags, $b3, $b4, $b5;
        boolean unpacked, $z0, $z1, $z2, $z3;
        byte[] $r3;
        long $l0, $l1, $l2;

        this := @this: com.sleepycat.je.Sequence;

        cursor := @parameter0: com.sleepycat.je.Cursor;

        lockMode := @parameter1: com.sleepycat.je.LockMode;

        $r0 = new com.sleepycat.je.DatabaseEntry;

        specialinvoke $r0.<com.sleepycat.je.DatabaseEntry: void <init>()>();

        data = $r0;

        $r1 = this.<com.sleepycat.je.Sequence: com.sleepycat.je.DatabaseEntry key>;

        status = virtualinvoke cursor.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationStatus getSearchKey(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode)>($r1, data, lockMode);

        $r2 = <com.sleepycat.je.OperationStatus: com.sleepycat.je.OperationStatus SUCCESS>;

        if status == $r2 goto label1;

        return 0;

     label1:
        $r3 = virtualinvoke data.<com.sleepycat.je.DatabaseEntry: byte[] getData()>();

        buf = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r3);

        version = virtualinvoke buf.<java.nio.ByteBuffer: byte get()>();

        flags = virtualinvoke buf.<java.nio.ByteBuffer: byte get()>();

        if version >= 1 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        unpacked = $z0;

        $l0 = staticinvoke <com.sleepycat.je.log.LogUtils: long readLong(java.nio.ByteBuffer,boolean)>(buf, unpacked);

        this.<com.sleepycat.je.Sequence: long rangeMin> = $l0;

        $l1 = staticinvoke <com.sleepycat.je.log.LogUtils: long readLong(java.nio.ByteBuffer,boolean)>(buf, unpacked);

        this.<com.sleepycat.je.Sequence: long rangeMax> = $l1;

        $l2 = staticinvoke <com.sleepycat.je.log.LogUtils: long readLong(java.nio.ByteBuffer,boolean)>(buf, unpacked);

        this.<com.sleepycat.je.Sequence: long storedValue> = $l2;

        $b3 = flags & 1;

        if $b3 == 0 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        this.<com.sleepycat.je.Sequence: boolean increment> = $z1;

        $b4 = flags & 2;

        if $b4 == 0 goto label6;

        $z2 = 1;

        goto label7;

     label6:
        $z2 = 0;

     label7:
        this.<com.sleepycat.je.Sequence: boolean wrapAllowed> = $z2;

        $b5 = flags & 4;

        if $b5 == 0 goto label8;

        $z3 = 1;

        goto label9;

     label8:
        $z3 = 0;

     label9:
        this.<com.sleepycat.je.Sequence: boolean overflow> = $z3;

        return 1;
    }

    private com.sleepycat.je.DatabaseEntry makeData()
    {
        com.sleepycat.je.Sequence this;
        byte[] data;
        java.nio.ByteBuffer buf;
        byte flags#6, $b0, $b1, $b2;
        boolean $z0, $z1, $z2;
        long $l3, $l4, $l5;
        com.sleepycat.je.DatabaseEntry $r2;
        int $i6;

        this := @this: com.sleepycat.je.Sequence;

        data = newarray (byte)[50];

        buf = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(data);

        flags#6 = 0;

        $z0 = this.<com.sleepycat.je.Sequence: boolean increment>;

        if $z0 == 0 goto label1;

        $b0 = flags#6 | 1;

        flags#6 = (byte) $b0;

     label1:
        $z1 = this.<com.sleepycat.je.Sequence: boolean wrapAllowed>;

        if $z1 == 0 goto label2;

        $b1 = flags#6 | 2;

        flags#6 = (byte) $b1;

     label2:
        $z2 = this.<com.sleepycat.je.Sequence: boolean overflow>;

        if $z2 == 0 goto label3;

        $b2 = flags#6 | 4;

        flags#6 = (byte) $b2;

     label3:
        virtualinvoke buf.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(1);

        virtualinvoke buf.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(flags#6);

        $l3 = this.<com.sleepycat.je.Sequence: long rangeMin>;

        staticinvoke <com.sleepycat.je.log.LogUtils: void writePackedLong(java.nio.ByteBuffer,long)>(buf, $l3);

        $l4 = this.<com.sleepycat.je.Sequence: long rangeMax>;

        staticinvoke <com.sleepycat.je.log.LogUtils: void writePackedLong(java.nio.ByteBuffer,long)>(buf, $l4);

        $l5 = this.<com.sleepycat.je.Sequence: long storedValue>;

        staticinvoke <com.sleepycat.je.log.LogUtils: void writePackedLong(java.nio.ByteBuffer,long)>(buf, $l5);

        $r2 = new com.sleepycat.je.DatabaseEntry;

        $i6 = virtualinvoke buf.<java.nio.ByteBuffer: int position()>();

        specialinvoke $r2.<com.sleepycat.je.DatabaseEntry: void <init>(byte[],int,int)>(data, 0, $i6);

        return $r2;
    }


