    public void <init>(java.lang.String) throws java.lang.Exception
    {
        weka.core.xml.XMLOptions this;
        java.lang.String xml;
        weka.core.xml.XMLDocument $r0;

        this := @this: weka.core.xml.XMLOptions;

        xml := @parameter0: java.lang.String;

        specialinvoke this.<weka.core.xml.XMLOptions: void <init>()>();

        $r0 = virtualinvoke this.<weka.core.xml.XMLOptions: weka.core.xml.XMLDocument getXMLDocument()>();

        virtualinvoke $r0.<weka.core.xml.XMLDocument: org.w3c.dom.Document read(java.lang.String)>(xml);

        return;
    }

    public java.lang.String[] toArray() throws java.lang.Exception
    {
        weka.core.xml.XMLOptions this;
        java.lang.String $r0;
        java.lang.String[] $r1;

        this := @this: weka.core.xml.XMLOptions;

        $r0 = virtualinvoke this.<weka.core.xml.XMLOptions: java.lang.String toCommandLine()>();

        $r1 = staticinvoke <weka.core.Utils: java.lang.String[] splitOptions(java.lang.String)>($r0);

        return $r1;
    }

    public java.lang.String toCommandLine() throws java.lang.Exception
    {
        weka.core.xml.XMLOptions this;
        org.w3c.dom.Document $r0;
        org.w3c.dom.Element $r1;
        java.lang.String $r2;

        this := @this: weka.core.xml.XMLOptions;

        $r0 = virtualinvoke this.<weka.core.xml.XMLOptions: org.w3c.dom.Document getDocument()>();

        $r1 = interfaceinvoke $r0.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        $r2 = virtualinvoke this.<weka.core.xml.XMLOptions: java.lang.String toCommandLine(org.w3c.dom.Element)>($r1);

        return $r2;
    }

    public org.w3c.dom.Document getDocument()
    {
        weka.core.xml.XMLOptions this;
        weka.core.xml.XMLDocument $r0;
        org.w3c.dom.Document $r1;

        this := @this: weka.core.xml.XMLOptions;

        virtualinvoke this.<weka.core.xml.XMLOptions: void fixHyphens()>();

        $r0 = this.<weka.core.xml.XMLOptions: weka.core.xml.XMLDocument m_XMLDocument>;

        $r1 = virtualinvoke $r0.<weka.core.xml.XMLDocument: org.w3c.dom.Document getDocument()>();

        return $r1;
    }

    protected java.lang.String toCommandLine(org.w3c.dom.Element)
    {
        weka.core.xml.XMLOptions this;
        org.w3c.dom.Element parent, $r9, $r12, $r15, $r37, $r41;
        java.util.Vector result, list, subList, $r0;
        org.w3c.dom.NodeList subNodeList;
        java.lang.String $r1, $r2, $r4, $r5, $r10, $r13, tmpStr#63, $r16, $r22, $r23, $r26, $r28, $r29, $r31, $r32, $r34, $r35, $r38, $r39, tmpStr#150, $r42, $r48, $r52, $r55, $r59;
        boolean $z0, $z1, $z2, $z4, $z5, $z6, $z9, $z11, $z13, $z15;
        java.io.PrintStream $r3, $r18, $r44, $r49;
        int $i0, i#53, $i1, n#68, $i2, $i3, $i4, n#155, $i5, $i6;
        org.w3c.dom.Node $r6, $r7, $r8, $r11, $r30, $r33;
        java.lang.Object $r14, $r36, $r40;
        java.lang.String[] params#66, params#153, $r56, $r58;
        java.lang.Exception $r17, e#78, $r43, e#165;
        java.lang.StringBuilder $r19, $r20, $r21, $r24, $r25, $r27, $r45, $r46, $r47, $r50, $r51, $r53, $r54;
        java.lang.Object[] $r57;

        this := @this: weka.core.xml.XMLOptions;

        parent := @parameter0: org.w3c.dom.Element;

        $r0 = new java.util.Vector;

        specialinvoke $r0.<java.util.Vector: void <init>()>();

        result = $r0;

        $r1 = interfaceinvoke parent.<org.w3c.dom.Element: java.lang.String getNodeName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("options");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label09;

        list = staticinvoke <weka.core.xml.XMLDocument: java.util.Vector getChildTags(org.w3c.dom.Node)>(parent);

        $r2 = interfaceinvoke parent.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("type");

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("classifier");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label01;

        $r3 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("Type \'classifier\' is deprecated, use \'optionhandler\' instead!");

        interfaceinvoke parent.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("type", "optionhandler");

     label01:
        $r4 = interfaceinvoke parent.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("type");

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("optionhandler");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label02;

        $r5 = interfaceinvoke parent.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("value");

        virtualinvoke result.<java.util.Vector: boolean add(java.lang.Object)>($r5);

        $i0 = virtualinvoke list.<java.util.Vector: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label02;

        $r6 = interfaceinvoke parent.<org.w3c.dom.Element: org.w3c.dom.Node getParentNode()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r6);

        if $r6 == null goto label02;

        $r7 = interfaceinvoke parent.<org.w3c.dom.Element: org.w3c.dom.Node getParentNode()>();

        $z4 = $r7 instanceof org.w3c.dom.Element;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label02;

        $r8 = interfaceinvoke parent.<org.w3c.dom.Element: org.w3c.dom.Node getParentNode()>();

        $r9 = (org.w3c.dom.Element) $r8;

        $r10 = interfaceinvoke $r9.<org.w3c.dom.Element: java.lang.String getNodeName()>();

        $z5 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("option");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label02;

        $r11 = interfaceinvoke parent.<org.w3c.dom.Element: org.w3c.dom.Node getParentNode()>();

        $r12 = (org.w3c.dom.Element) $r11;

        $r13 = interfaceinvoke $r12.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("type");

        $z6 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>("hyphens");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label02;

        virtualinvoke result.<java.util.Vector: boolean add(java.lang.Object)>("--");

     label02:
        i#53 = 0;

     label03:
        $i1 = virtualinvoke list.<java.util.Vector: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#53);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#53 >= $i1 goto label17;

        $r14 = virtualinvoke list.<java.util.Vector: java.lang.Object get(int)>(i#53);

        $r15 = (org.w3c.dom.Element) $r14;

        tmpStr#63 = virtualinvoke this.<weka.core.xml.XMLOptions: java.lang.String toCommandLine(org.w3c.dom.Element)>($r15);

     label04:
        params#66 = staticinvoke <weka.core.Utils: java.lang.String[] splitOptions(java.lang.String)>(tmpStr#63);

        n#68 = 0;

     label05:
        $i2 = lengthof params#66;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n#68);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if n#68 >= $i2 goto label06;

        $r16 = params#66[n#68];

        virtualinvoke result.<java.util.Vector: boolean add(java.lang.Object)>($r16);

        n#68 = n#68 + 1;

        goto label05;

     label06:
        goto label08;

     label07:
        $r17 := @caughtexception;

        e#78 = $r17;

        $r18 = <java.lang.System: java.io.PrintStream err>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error splitting: ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(tmpStr#63);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>($r22);

        virtualinvoke e#78.<java.lang.Exception: void printStackTrace()>();

     label08:
        i#53 = i#53 + 1;

        goto label03;

     label09:
        $r23 = interfaceinvoke parent.<org.w3c.dom.Element: java.lang.String getNodeName()>();

        $z9 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>("option");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 == 0 goto label16;

        subList = staticinvoke <weka.core.xml.XMLDocument: java.util.Vector getChildTags(org.w3c.dom.Node)>(parent);

        subNodeList = interfaceinvoke parent.<org.w3c.dom.Element: org.w3c.dom.NodeList getChildNodes()>();

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r26 = interfaceinvoke parent.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("name");

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke result.<java.util.Vector: boolean add(java.lang.Object)>($r28);

        $r29 = interfaceinvoke parent.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("type");

        $z11 = virtualinvoke $r29.<java.lang.String: boolean equals(java.lang.Object)>("single");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z11);

        if $z11 == 0 goto label10;

        $i3 = interfaceinvoke subNodeList.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 <= 0 goto label17;

        $r30 = interfaceinvoke subNodeList.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        $r31 = interfaceinvoke $r30.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $r32 = virtualinvoke $r31.<java.lang.String: java.lang.String trim()>();

        $i4 = virtualinvoke $r32.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 <= 0 goto label17;

        $r33 = interfaceinvoke subNodeList.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        $r34 = interfaceinvoke $r33.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        virtualinvoke result.<java.util.Vector: boolean add(java.lang.Object)>($r34);

        goto label17;

     label10:
        $r35 = interfaceinvoke parent.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("type");

        $z13 = virtualinvoke $r35.<java.lang.String: boolean equals(java.lang.Object)>("quotes");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z13);

        if $z13 == 0 goto label11;

        $r36 = virtualinvoke subList.<java.util.Vector: java.lang.Object get(int)>(0);

        $r37 = (org.w3c.dom.Element) $r36;

        $r38 = virtualinvoke this.<weka.core.xml.XMLOptions: java.lang.String toCommandLine(org.w3c.dom.Element)>($r37);

        virtualinvoke result.<java.util.Vector: boolean add(java.lang.Object)>($r38);

        goto label17;

     label11:
        $r39 = interfaceinvoke parent.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("type");

        $z15 = virtualinvoke $r39.<java.lang.String: boolean equals(java.lang.Object)>("hyphens");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z15);

        if $z15 == 0 goto label17;

        $r40 = virtualinvoke subList.<java.util.Vector: java.lang.Object get(int)>(0);

        $r41 = (org.w3c.dom.Element) $r40;

        tmpStr#150 = virtualinvoke this.<weka.core.xml.XMLOptions: java.lang.String toCommandLine(org.w3c.dom.Element)>($r41);

     label12:
        params#153 = staticinvoke <weka.core.Utils: java.lang.String[] splitOptions(java.lang.String)>(tmpStr#150);

        n#155 = 0;

     label13:
        $i5 = lengthof params#153;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n#155);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if n#155 >= $i5 goto label14;

        $r42 = params#153[n#155];

        virtualinvoke result.<java.util.Vector: boolean add(java.lang.Object)>($r42);

        n#155 = n#155 + 1;

        goto label13;

     label14:
        goto label17;

     label15:
        $r43 := @caughtexception;

        e#165 = $r43;

        $r44 = <java.lang.System: java.io.PrintStream err>;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error splitting: ");

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(tmpStr#150);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r44.<java.io.PrintStream: void println(java.lang.String)>($r48);

        virtualinvoke e#165.<java.lang.Exception: void printStackTrace()>();

        goto label17;

     label16:
        $r49 = <java.lang.System: java.io.PrintStream err>;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported tag \'");

        $r52 = interfaceinvoke parent.<org.w3c.dom.Element: java.lang.String getNodeName()>();

        $r53 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r52);

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' - skipped!");

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r49.<java.io.PrintStream: void println(java.lang.String)>($r55);

     label17:
        $i6 = virtualinvoke result.<java.util.Vector: int size()>();

        $r56 = newarray (java.lang.String)[$i6];

        $r57 = virtualinvoke result.<java.util.Vector: java.lang.Object[] toArray(java.lang.Object[])>($r56);

        $r58 = (java.lang.String[]) $r57;

        $r59 = staticinvoke <weka.core.Utils: java.lang.String joinOptions(java.lang.String[])>($r58);

        return $r59;

        catch java.lang.Exception from label04 to label06 with label07;
        catch java.lang.Exception from label12 to label14 with label15;
    }

    protected void fixHyphens()
    {
        weka.core.xml.XMLOptions this;
        org.w3c.dom.NodeList list;
        java.util.Vector hyphens, $r1;
        org.w3c.dom.Node node, $r2, $r5, tmpNode#37, $r8, $r9, tmpNode#50;
        weka.core.xml.XMLDocument $r0;
        int i#8, $i0, i#26, $i1;
        org.w3c.dom.Element $r3, $r6;
        java.lang.String $r4;
        boolean $z0, isLast#35;
        java.lang.Object $r7;
        short $s2;

        this := @this: weka.core.xml.XMLOptions;

        $r0 = this.<weka.core.xml.XMLOptions: weka.core.xml.XMLDocument m_XMLDocument>;

        list = virtualinvoke $r0.<weka.core.xml.XMLDocument: org.w3c.dom.NodeList findNodes(java.lang.String)>("//option");

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>()>();

        hyphens = $r1;

        i#8 = 0;

     label1:
        $i0 = interfaceinvoke list.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#8 >= $i0 goto label3;

        $r2 = interfaceinvoke list.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i#8);

        $r3 = (org.w3c.dom.Element) $r2;

        $r4 = interfaceinvoke $r3.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("type");

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("hyphens");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke list.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i#8);

        $r6 = (org.w3c.dom.Element) $r5;

        virtualinvoke hyphens.<java.util.Vector: boolean add(java.lang.Object)>($r6);

     label2:
        i#8 = i#8 + 1;

        goto label1;

     label3:
        i#26 = 0;

     label4:
        $i1 = virtualinvoke hyphens.<java.util.Vector: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#26);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#26 >= $i1 goto label9;

        $r7 = virtualinvoke hyphens.<java.util.Vector: java.lang.Object get(int)>(i#26);

        node = (org.w3c.dom.Node) $r7;

        isLast#35 = 1;

        tmpNode#37 = node;

     label5:
        $r8 = interfaceinvoke tmpNode#37.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r8);

        if $r8 == null goto label7;

        $r9 = interfaceinvoke tmpNode#37.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        $s2 = interfaceinvoke $r9.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s2);

        if $s2 != 1 goto label6;

        isLast#35 = 0;

        goto label7;

     label6:
        tmpNode#37 = interfaceinvoke tmpNode#37.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        goto label5;

     label7:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isLast#35);

        if isLast#35 != 0 goto label8;

        tmpNode#50 = interfaceinvoke node.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        interfaceinvoke tmpNode#50.<org.w3c.dom.Node: org.w3c.dom.Node removeChild(org.w3c.dom.Node)>(node);

        interfaceinvoke tmpNode#50.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(node);

     label8:
        i#26 = i#26 + 1;

        goto label4;

     label9:
        return;
    }

    public void <init>() throws java.lang.Exception
    {
        weka.core.xml.XMLOptions this;
        weka.core.xml.XMLDocument $r0, $r1, $r2;

        this := @this: weka.core.xml.XMLOptions;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<weka.core.xml.XMLOptions: weka.core.xml.XMLDocument m_XMLDocument> = null;

        $r0 = new weka.core.xml.XMLDocument;

        specialinvoke $r0.<weka.core.xml.XMLDocument: void <init>()>();

        this.<weka.core.xml.XMLOptions: weka.core.xml.XMLDocument m_XMLDocument> = $r0;

        $r1 = this.<weka.core.xml.XMLOptions: weka.core.xml.XMLDocument m_XMLDocument>;

        virtualinvoke $r1.<weka.core.xml.XMLDocument: void setRootNode(java.lang.String)>("options");

        $r2 = this.<weka.core.xml.XMLOptions: weka.core.xml.XMLDocument m_XMLDocument>;

        virtualinvoke $r2.<weka.core.xml.XMLDocument: void setDocType(java.lang.String)>("<!DOCTYPE options\n[\n   <!ELEMENT options (option)*>\n   <!ATTLIST options type CDATA \"optionhandler\">\n   <!ATTLIST options value CDATA \"\">\n   <!ELEMENT option (#PCDATA | options)*>\n   <!ATTLIST option name CDATA #REQUIRED>\n   <!ATTLIST option type (flag | single | hyphens | quotes) \"single\">\n]\n>");

        virtualinvoke this.<weka.core.xml.XMLOptions: void setValidating(boolean)>(1);

        return;
    }

    public weka.core.xml.XMLDocument getXMLDocument()
    {
        weka.core.xml.XMLOptions this;
        weka.core.xml.XMLDocument $r0;

        this := @this: weka.core.xml.XMLOptions;

        virtualinvoke this.<weka.core.xml.XMLOptions: void fixHyphens()>();

        $r0 = this.<weka.core.xml.XMLOptions: weka.core.xml.XMLDocument m_XMLDocument>;

        return $r0;
    }

    public void setValidating(boolean) throws java.lang.Exception
    {
        weka.core.xml.XMLOptions this;
        boolean validating;
        weka.core.xml.XMLDocument $r0;

        this := @this: weka.core.xml.XMLOptions;

        validating := @parameter0: boolean;

        $r0 = this.<weka.core.xml.XMLOptions: weka.core.xml.XMLDocument m_XMLDocument>;

        virtualinvoke $r0.<weka.core.xml.XMLDocument: void setValidating(boolean)>(validating);

        return;
    }


