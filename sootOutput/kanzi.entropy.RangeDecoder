    public void dispose()
    {
        kanzi.entropy.RangeDecoder this;

        this := @this: kanzi.entropy.RangeDecoder;

        return;
    }

    public void <init>(kanzi.InputBitStream)
    {
        kanzi.entropy.RangeDecoder this;
        kanzi.InputBitStream bitstream;

        this := @this: kanzi.entropy.RangeDecoder;

        bitstream := @parameter0: kanzi.InputBitStream;

        specialinvoke this.<kanzi.entropy.RangeDecoder: void <init>(kanzi.InputBitStream,int)>(bitstream, 65536);

        return;
    }

    public void <init>(kanzi.InputBitStream, int)
    {
        kanzi.entropy.RangeDecoder this;
        kanzi.InputBitStream bitstream;
        int chunkSize;
        java.lang.NullPointerException $r0;
        java.lang.IllegalArgumentException $r1, $r2;
        long[] $r3;
        int[] $r4, $r5;
        short[] $r6;

        this := @this: kanzi.entropy.RangeDecoder;

        bitstream := @parameter0: kanzi.InputBitStream;

        chunkSize := @parameter1: int;

        specialinvoke this.<java.lang.Object: void <init>()>();

        if bitstream != null goto label1;

        $r0 = new java.lang.NullPointerException;

        specialinvoke $r0.<java.lang.NullPointerException: void <init>(java.lang.String)>("Invalid null bitstream parameter");

        throw $r0;

     label1:
        if chunkSize == 0 goto label2;

        if chunkSize >= 1024 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The chunk size must be at least 1024");

        throw $r1;

     label2:
        if chunkSize <= 1073741824 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The chunk size must be at most 2^30");

        throw $r2;

     label3:
        this.<kanzi.entropy.RangeDecoder: long range> = 1152921504606846975L;

        this.<kanzi.entropy.RangeDecoder: kanzi.InputBitStream bitstream> = bitstream;

        this.<kanzi.entropy.RangeDecoder: int chunkSize> = chunkSize;

        $r3 = newarray (long)[257];

        this.<kanzi.entropy.RangeDecoder: long[] cumFreqs> = $r3;

        $r4 = newarray (int)[256];

        this.<kanzi.entropy.RangeDecoder: int[] freqs> = $r4;

        $r5 = newarray (int)[256];

        this.<kanzi.entropy.RangeDecoder: int[] alphabet> = $r5;

        $r6 = newarray (short)[0];

        this.<kanzi.entropy.RangeDecoder: short[] f2s> = $r6;

        return;
    }

    public int decode(byte[], int, int)
    {
        kanzi.entropy.RangeDecoder this;
        byte[] block;
        int blkptr, len, end, sz, endChunk, $i0, $i1, $i2, $i3, startChunk#20, $i4, $i5, $i7, $i8, i#47;
        int[] $r0;
        kanzi.InputBitStream $r1;
        long $l6;
        byte $b9;

        this := @this: kanzi.entropy.RangeDecoder;

        block := @parameter0: byte[];

        blkptr := @parameter1: int;

        len := @parameter2: int;

        if block == null goto label01;

        $i0 = blkptr + len;

        $i1 = lengthof block;

        if $i0 > $i1 goto label01;

        if blkptr < 0 goto label01;

        if len >= 0 goto label02;

     label01:
        return -1;

     label02:
        if len != 0 goto label03;

        return 0;

     label03:
        end = blkptr + len;

        $i2 = this.<kanzi.entropy.RangeDecoder: int chunkSize>;

        if $i2 != 0 goto label04;

        $i3 = len;

        goto label05;

     label04:
        $i3 = this.<kanzi.entropy.RangeDecoder: int chunkSize>;

     label05:
        sz = $i3;

        startChunk#20 = blkptr;

     label06:
        if startChunk#20 >= end goto label12;

        $r0 = this.<kanzi.entropy.RangeDecoder: int[] freqs>;

        $i4 = virtualinvoke this.<kanzi.entropy.RangeDecoder: int decodeHeader(int[])>($r0);

        if $i4 != 0 goto label07;

        $i5 = startChunk#20 - blkptr;

        return $i5;

     label07:
        this.<kanzi.entropy.RangeDecoder: long range> = 1152921504606846975L;

        this.<kanzi.entropy.RangeDecoder: long low> = 0L;

        $r1 = this.<kanzi.entropy.RangeDecoder: kanzi.InputBitStream bitstream>;

        $l6 = interfaceinvoke $r1.<kanzi.InputBitStream: long readBits(int)>(60);

        this.<kanzi.entropy.RangeDecoder: long code> = $l6;

        $i7 = startChunk#20 + sz;

        if $i7 >= end goto label08;

        $i8 = startChunk#20 + sz;

        goto label09;

     label08:
        $i8 = end;

     label09:
        endChunk = $i8;

        i#47 = startChunk#20;

     label10:
        if i#47 >= endChunk goto label11;

        $b9 = virtualinvoke this.<kanzi.entropy.RangeDecoder: byte decodeByte()>();

        block[i#47] = $b9;

        i#47 = i#47 + 1;

        goto label10;

     label11:
        startChunk#20 = endChunk;

        goto label06;

     label12:
        return len;
    }

    protected int decodeHeader(int[])
    {
        kanzi.entropy.RangeDecoder this;
        int[] frequencies, $r1, $r10, $r14, $r18, $r21, $r25;
        int alphabetSize, logRange, scale, logMax, endj, val, base, i#11, sum#30, llr#35, $i3, i#41, $i6, $i7, j#59, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i#147, $i17, $i19, $i23, j#174, $i24;
        byte inc, $b2;
        kanzi.InputBitStream $r0, $r2, $r3, $r4;
        long $l0, $l1, $l4, $l5, $l8, $l18, $l20, $l21, $l22;
        kanzi.BitStreamException $r5, $r15;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r11, $r12, $r16, $r17, $r19, $r20, $r22, $r23;
        java.lang.String $r13, $r24;
        long[] $r26, $r29, $r30, $r31;
        short[] $r27, $r28, $r32;
        short $s25;

        this := @this: kanzi.entropy.RangeDecoder;

        frequencies := @parameter0: int[];

        $r0 = this.<kanzi.entropy.RangeDecoder: kanzi.InputBitStream bitstream>;

        $r1 = this.<kanzi.entropy.RangeDecoder: int[] alphabet>;

        alphabetSize = staticinvoke <kanzi.entropy.EntropyUtils: int decodeAlphabet(kanzi.InputBitStream,int[])>($r0, $r1);

        if alphabetSize != 0 goto label01;

        return 0;

     label01:
        if alphabetSize == 256 goto label03;

        i#11 = 0;

     label02:
        if i#11 >= 256 goto label03;

        frequencies[i#11] = 0;

        i#11 = i#11 + 1;

        goto label02;

     label03:
        $r2 = this.<kanzi.entropy.RangeDecoder: kanzi.InputBitStream bitstream>;

        $l0 = interfaceinvoke $r2.<kanzi.InputBitStream: long readBits(int)>(3);

        $l1 = 8L + $l0;

        logRange = (int) $l1;

        scale = 1 << logRange;

        this.<kanzi.entropy.RangeDecoder: int shift> = logRange;

        sum#30 = 0;

        if alphabetSize <= 64 goto label04;

        $b2 = 16;

        goto label05;

     label04:
        $b2 = 8;

     label05:
        inc = $b2;

        llr#35 = 3;

     label06:
        $i3 = 1 << llr#35;

        if $i3 > logRange goto label07;

        llr#35 = llr#35 + 1;

        goto label06;

     label07:
        i#41 = 1;

     label08:
        if i#41 >= alphabetSize goto label15;

        $r3 = this.<kanzi.entropy.RangeDecoder: kanzi.InputBitStream bitstream>;

        $l4 = interfaceinvoke $r3.<kanzi.InputBitStream: long readBits(int)>(llr#35);

        $l5 = 1L + $l4;

        logMax = (int) $l5;

        $i6 = i#41 + inc;

        if $i6 >= alphabetSize goto label09;

        $i7 = i#41 + inc;

        goto label10;

     label09:
        $i7 = alphabetSize;

     label10:
        endj = $i7;

        j#59 = i#41;

     label11:
        if j#59 >= endj goto label14;

        $r4 = this.<kanzi.entropy.RangeDecoder: kanzi.InputBitStream bitstream>;

        $l8 = interfaceinvoke $r4.<kanzi.InputBitStream: long readBits(int)>(logMax);

        val = (int) $l8;

        if val <= 0 goto label12;

        if val < scale goto label13;

     label12:
        $r5 = new kanzi.BitStreamException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid bitstream: incorrect frequency ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(val);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for symbol \'");

        $r10 = this.<kanzi.entropy.RangeDecoder: int[] alphabet>;

        $i9 = $r10[j#59];

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in range decoder");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<kanzi.BitStreamException: void <init>(java.lang.String,int)>($r13, 3);

        throw $r5;

     label13:
        $r14 = this.<kanzi.entropy.RangeDecoder: int[] alphabet>;

        $i10 = $r14[j#59];

        frequencies[$i10] = val;

        sum#30 = sum#30 + val;

        j#59 = j#59 + 1;

        goto label11;

     label14:
        i#41 = i#41 + inc;

        goto label08;

     label15:
        if scale > sum#30 goto label16;

        $r15 = new kanzi.BitStreamException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid bitstream: incorrect frequency ");

        $r18 = this.<kanzi.entropy.RangeDecoder: int[] alphabet>;

        $i11 = $r18[0];

        $i12 = frequencies[$i11];

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for symbol \'");

        $r21 = this.<kanzi.entropy.RangeDecoder: int[] alphabet>;

        $i13 = $r21[0];

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in range decoder");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<kanzi.BitStreamException: void <init>(java.lang.String,int)>($r24, 3);

        throw $r15;

     label16:
        $r25 = this.<kanzi.entropy.RangeDecoder: int[] alphabet>;

        $i14 = $r25[0];

        $i15 = scale - sum#30;

        frequencies[$i14] = $i15;

        $r26 = this.<kanzi.entropy.RangeDecoder: long[] cumFreqs>;

        $r26[0] = 0L;

        $r27 = this.<kanzi.entropy.RangeDecoder: short[] f2s>;

        $i16 = lengthof $r27;

        if $i16 >= scale goto label17;

        $r28 = newarray (short)[scale];

        this.<kanzi.entropy.RangeDecoder: short[] f2s> = $r28;

     label17:
        i#147 = 0;

     label18:
        if i#147 >= 256 goto label21;

        $r29 = this.<kanzi.entropy.RangeDecoder: long[] cumFreqs>;

        $i17 = i#147 + 1;

        $r30 = this.<kanzi.entropy.RangeDecoder: long[] cumFreqs>;

        $l18 = $r30[i#147];

        $i19 = frequencies[i#147];

        $l20 = (long) $i19;

        $l21 = $l18 + $l20;

        $r29[$i17] = $l21;

        $r31 = this.<kanzi.entropy.RangeDecoder: long[] cumFreqs>;

        $l22 = $r31[i#147];

        base = (int) $l22;

        $i23 = frequencies[i#147];

        j#174 = $i23 - 1;

     label19:
        if j#174 < 0 goto label20;

        $r32 = this.<kanzi.entropy.RangeDecoder: short[] f2s>;

        $i24 = base + j#174;

        $s25 = (short) i#147;

        $r32[$i24] = $s25;

        j#174 = j#174 + -1;

        goto label19;

     label20:
        i#147 = i#147 + 1;

        goto label18;

     label21:
        return alphabetSize;
    }

    protected byte decodeByte()
    {
        kanzi.entropy.RangeDecoder this;
        int count, $i1, $i8;
        short symbol;
        long cumFreq, freq, $l0, $l2, $l3, $l4, $l5, $l6, $l7, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16, $l17, $l18, $l19, $l20, $l21, $l23, $l25, $l26, $l27, $l28, $l29, $l30, $l31, $l32, $l33, $l34, $l35;
        short[] $r1;
        long[] $r2, $r3;
        byte $b22, $b24, $b36;
        kanzi.InputBitStream $r6;

        this := @this: kanzi.entropy.RangeDecoder;

        $l0 = this.<kanzi.entropy.RangeDecoder: long range>;

        $i1 = this.<kanzi.entropy.RangeDecoder: int shift>;

        $l2 = $l0 >>> $i1;

        this.<kanzi.entropy.RangeDecoder: long range> = $l2;

        $l3 = this.<kanzi.entropy.RangeDecoder: long code>;

        $l4 = this.<kanzi.entropy.RangeDecoder: long low>;

        $l5 = $l3 - $l4;

        $l6 = this.<kanzi.entropy.RangeDecoder: long range>;

        $l7 = $l5 / $l6;

        count = (int) $l7;

        $r1 = this.<kanzi.entropy.RangeDecoder: short[] f2s>;

        symbol = $r1[count];

        $r2 = this.<kanzi.entropy.RangeDecoder: long[] cumFreqs>;

        cumFreq = $r2[symbol];

        $r3 = this.<kanzi.entropy.RangeDecoder: long[] cumFreqs>;

        $i8 = symbol + 1;

        $l9 = $r3[$i8];

        freq = $l9 - cumFreq;

        $l10 = this.<kanzi.entropy.RangeDecoder: long low>;

        $l11 = this.<kanzi.entropy.RangeDecoder: long range>;

        $l12 = cumFreq * $l11;

        $l13 = $l10 + $l12;

        this.<kanzi.entropy.RangeDecoder: long low> = $l13;

        $l14 = this.<kanzi.entropy.RangeDecoder: long range>;

        $l15 = $l14 * freq;

        this.<kanzi.entropy.RangeDecoder: long range> = $l15;

     label1:
        $l16 = this.<kanzi.entropy.RangeDecoder: long low>;

        $l17 = this.<kanzi.entropy.RangeDecoder: long low>;

        $l18 = this.<kanzi.entropy.RangeDecoder: long range>;

        $l19 = $l17 + $l18;

        $l20 = $l16 ^ $l19;

        $l21 = $l20 & 1152921500311879680L;

        $b22 = $l21 cmp 0L;

        if $b22 == 0 goto label3;

        $l23 = this.<kanzi.entropy.RangeDecoder: long range>;

        $b24 = $l23 cmp 65535L;

        if $b24 <= 0 goto label2;

        goto label4;

     label2:
        $l25 = this.<kanzi.entropy.RangeDecoder: long low>;

        $l26 = neg $l25;

        $l27 = $l26 & 65535L;

        this.<kanzi.entropy.RangeDecoder: long range> = $l27;

     label3:
        $l28 = this.<kanzi.entropy.RangeDecoder: long code>;

        $l29 = $l28 << 28;

        $r6 = this.<kanzi.entropy.RangeDecoder: kanzi.InputBitStream bitstream>;

        $l30 = interfaceinvoke $r6.<kanzi.InputBitStream: long readBits(int)>(28);

        $l31 = $l29 | $l30;

        this.<kanzi.entropy.RangeDecoder: long code> = $l31;

        $l32 = this.<kanzi.entropy.RangeDecoder: long range>;

        $l33 = $l32 << 28;

        this.<kanzi.entropy.RangeDecoder: long range> = $l33;

        $l34 = this.<kanzi.entropy.RangeDecoder: long low>;

        $l35 = $l34 << 28;

        this.<kanzi.entropy.RangeDecoder: long low> = $l35;

        goto label1;

     label4:
        $b36 = (byte) symbol;

        return $b36;
    }


