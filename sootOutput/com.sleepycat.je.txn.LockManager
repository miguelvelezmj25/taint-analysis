    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7, $i8, $i9, $i10, $i16, $i17, $i18, $i19, $i20;
        long $l5, $l11, $l12, $l13, $l14, $l15, $l21;
        java.util.List $r1;
        com.sleepycat.je.dbi.RangeRestartException $r2;

        $r0 = class "com/sleepycat/je/txn/LockManager";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sleepycat.je.txn.LockManager: boolean $assertionsDisabled> = $z1;

        $i0 = <com.sleepycat.je.dbi.MemoryBudget: int LOCKIMPL_OVERHEAD>;

        $i1 = <com.sleepycat.je.dbi.MemoryBudget: int HASHMAP_ENTRY_OVERHEAD>;

        $i2 = $i0 + $i1;

        $i3 = <com.sleepycat.je.dbi.MemoryBudget: int LONG_OVERHEAD>;

        $i4 = $i2 + $i3;

        $l5 = (long) $i4;

        <com.sleepycat.je.txn.LockManager: long TOTAL_LOCKIMPL_OVERHEAD> = $l5;

        $i6 = <com.sleepycat.je.dbi.MemoryBudget: int THINLOCKIMPL_OVERHEAD>;

        $i7 = <com.sleepycat.je.dbi.MemoryBudget: int HASHMAP_ENTRY_OVERHEAD>;

        $i8 = $i6 + $i7;

        $i9 = <com.sleepycat.je.dbi.MemoryBudget: int LONG_OVERHEAD>;

        $i10 = $i8 + $i9;

        $l11 = (long) $i10;

        <com.sleepycat.je.txn.LockManager: long TOTAL_THINLOCKIMPL_OVERHEAD> = $l11;

        $l12 = <com.sleepycat.je.txn.LockManager: long TOTAL_LOCKIMPL_OVERHEAD>;

        $l13 = 0L - $l12;

        <com.sleepycat.je.txn.LockManager: long REMOVE_TOTAL_LOCKIMPL_OVERHEAD> = $l13;

        $l14 = <com.sleepycat.je.txn.LockManager: long TOTAL_THINLOCKIMPL_OVERHEAD>;

        $l15 = 0L - $l14;

        <com.sleepycat.je.txn.LockManager: long REMOVE_TOTAL_THINLOCKIMPL_OVERHEAD> = $l15;

        $i16 = <com.sleepycat.je.dbi.MemoryBudget: int LOCKIMPL_OVERHEAD>;

        $i17 = <com.sleepycat.je.dbi.MemoryBudget: int THINLOCKIMPL_OVERHEAD>;

        $i18 = $i16 - $i17;

        $i19 = <com.sleepycat.je.dbi.MemoryBudget: int LOCKINFO_OVERHEAD>;

        $i20 = $i18 + $i19;

        $l21 = (long) $i20;

        <com.sleepycat.je.txn.LockManager: long THINLOCK_MUTATE_OVERHEAD> = $l21;

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        <com.sleepycat.je.txn.LockManager: java.util.List EMPTY_THREAD_LOCKERS> = $r1;

        $r2 = new com.sleepycat.je.dbi.RangeRestartException;

        specialinvoke $r2.<com.sleepycat.je.dbi.RangeRestartException: void <init>()>();

        <com.sleepycat.je.txn.LockManager: com.sleepycat.je.dbi.RangeRestartException rangeRestartException> = $r2;

        <com.sleepycat.je.txn.LockManager: boolean lockTableDump> = 0;

        return;
    }

    public void <init>(com.sleepycat.je.dbi.EnvironmentImpl)
    {
        com.sleepycat.je.txn.LockManager this;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        com.sleepycat.je.dbi.DbConfigManager configMgr;
        com.sleepycat.je.config.IntConfigParam $r0;
        int $i0, $i1, $i2, i#17, $i3;
        java.util.Map[] $r1;
        com.sleepycat.je.latch.Latch[] $r2, $r5;
        java.lang.Object[] $r3;
        java.util.HashMap $r4;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;
        com.sleepycat.je.latch.Latch $r10;
        com.sleepycat.je.dbi.MemoryBudget $r11;
        com.sleepycat.je.utilint.StatGroup $r12, $r14, $r17;
        com.sleepycat.je.utilint.LongStat $r13, $r16;
        com.sleepycat.je.utilint.StatDefinition $r15, $r18;
        boolean $z0;
        java.util.concurrent.ConcurrentHashMap $r19;

        this := @this: com.sleepycat.je.txn.LockManager;

        envImpl := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        specialinvoke this.<java.lang.Object: void <init>()>();

        configMgr = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.DbConfigManager getConfigManager()>();

        $r0 = <com.sleepycat.je.config.EnvironmentParams: com.sleepycat.je.config.IntConfigParam N_LOCK_TABLES>;

        $i0 = virtualinvoke configMgr.<com.sleepycat.je.dbi.DbConfigManager: int getInt(com.sleepycat.je.config.IntConfigParam)>($r0);

        this.<com.sleepycat.je.txn.LockManager: int nLockTables> = $i0;

        $i1 = this.<com.sleepycat.je.txn.LockManager: int nLockTables>;

        $r1 = newarray (java.util.Map)[$i1];

        this.<com.sleepycat.je.txn.LockManager: java.util.Map[] lockTables> = $r1;

        $i2 = this.<com.sleepycat.je.txn.LockManager: int nLockTables>;

        $r2 = newarray (com.sleepycat.je.latch.Latch)[$i2];

        this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.latch.Latch[] lockTableLatches> = $r2;

        i#17 = 0;

     label1:
        $i3 = this.<com.sleepycat.je.txn.LockManager: int nLockTables>;

        if i#17 >= $i3 goto label2;

        $r3 = this.<com.sleepycat.je.txn.LockManager: java.util.Map[] lockTables>;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        $r3[i#17] = $r4;

        $r5 = this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.latch.Latch[] lockTableLatches>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Lock Table ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i#17);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = staticinvoke <com.sleepycat.je.latch.LatchFactory: com.sleepycat.je.latch.Latch createExclusiveLatch(com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String,boolean)>(envImpl, $r9, 1);

        $r5[i#17] = $r10;

        i#17 = i#17 + 1;

        goto label1;

     label2:
        this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.dbi.EnvironmentImpl envImpl> = envImpl;

        $r11 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.MemoryBudget getMemoryBudget()>();

        this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.dbi.MemoryBudget memoryBudget> = $r11;

        $r12 = new com.sleepycat.je.utilint.StatGroup;

        specialinvoke $r12.<com.sleepycat.je.utilint.StatGroup: void <init>(java.lang.String,java.lang.String)>("Locks", "Locks held by data operations, latching contention on lock table.");

        this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.utilint.StatGroup stats> = $r12;

        $r13 = new com.sleepycat.je.utilint.LongStat;

        $r14 = this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.utilint.StatGroup stats>;

        $r15 = <com.sleepycat.je.txn.LockStatDefinition: com.sleepycat.je.utilint.StatDefinition LOCK_REQUESTS>;

        specialinvoke $r13.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition)>($r14, $r15);

        this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.utilint.LongStat nRequests> = $r13;

        $r16 = new com.sleepycat.je.utilint.LongStat;

        $r17 = this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.utilint.StatGroup stats>;

        $r18 = <com.sleepycat.je.txn.LockStatDefinition: com.sleepycat.je.utilint.StatDefinition LOCK_WAITS>;

        specialinvoke $r16.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition)>($r17, $r18);

        this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.utilint.LongStat nWaits> = $r16;

        virtualinvoke this.<com.sleepycat.je.txn.LockManager: void envConfigUpdate(com.sleepycat.je.dbi.DbConfigManager,com.sleepycat.je.EnvironmentMutableConfig)>(configMgr, null);

        virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: void addConfigObserver(com.sleepycat.je.dbi.EnvConfigObserver)>(this);

        $z0 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: boolean isReplicated()>();

        if $z0 == 0 goto label3;

        $r19 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r19.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        this.<com.sleepycat.je.txn.LockManager: java.util.Map threadLockers> = $r19;

        goto label4;

     label3:
        this.<com.sleepycat.je.txn.LockManager: java.util.Map threadLockers> = null;

     label4:
        return;
    }

    public void envConfigUpdate(com.sleepycat.je.dbi.DbConfigManager, com.sleepycat.je.EnvironmentMutableConfig)
    {
        com.sleepycat.je.txn.LockManager this;
        com.sleepycat.je.dbi.DbConfigManager configMgr;
        com.sleepycat.je.EnvironmentMutableConfig ignore;
        com.sleepycat.je.config.BooleanConfigParam $r0, $r1;
        boolean $z0, $z1;

        this := @this: com.sleepycat.je.txn.LockManager;

        configMgr := @parameter0: com.sleepycat.je.dbi.DbConfigManager;

        ignore := @parameter1: com.sleepycat.je.EnvironmentMutableConfig;

        $r0 = <com.sleepycat.je.config.EnvironmentParams: com.sleepycat.je.config.BooleanConfigParam TXN_DEADLOCK_STACK_TRACE>;

        $z0 = virtualinvoke configMgr.<com.sleepycat.je.dbi.DbConfigManager: boolean getBoolean(com.sleepycat.je.config.BooleanConfigParam)>($r0);

        staticinvoke <com.sleepycat.je.txn.LockInfo: void setDeadlockStackTrace(boolean)>($z0);

        $r1 = <com.sleepycat.je.config.EnvironmentParams: com.sleepycat.je.config.BooleanConfigParam TXN_DUMPLOCKS>;

        $z1 = virtualinvoke configMgr.<com.sleepycat.je.dbi.DbConfigManager: boolean getBoolean(com.sleepycat.je.config.BooleanConfigParam)>($r1);

        staticinvoke <com.sleepycat.je.txn.LockManager: void setLockTableDump(boolean)>($z1);

        return;
    }

    private static void setLockTableDump(boolean)
    {
        boolean enable;

        enable := @parameter0: boolean;

        <com.sleepycat.je.txn.LockManager: boolean lockTableDump> = enable;

        return;
    }

    public com.sleepycat.je.utilint.StatGroup loadStats(com.sleepycat.je.StatsConfig)
    {
        com.sleepycat.je.txn.LockManager this;
        com.sleepycat.je.StatsConfig config;
        com.sleepycat.je.utilint.StatGroup copyStats, latchStats, tableStats, $r0, $r1, $r4, $r7;
        boolean $z0, $z1, $z2, $z3;
        int i#11, $i0;
        com.sleepycat.je.latch.Latch[] $r2, $r5;
        com.sleepycat.je.latch.Latch $r3, $r6;

        this := @this: com.sleepycat.je.txn.LockManager;

        config := @parameter0: com.sleepycat.je.StatsConfig;

        $r0 = this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.utilint.StatGroup stats>;

        $z0 = virtualinvoke config.<com.sleepycat.je.StatsConfig: boolean getClear()>();

        copyStats = virtualinvoke $r0.<com.sleepycat.je.utilint.StatGroup: com.sleepycat.je.utilint.StatGroup cloneGroup(boolean)>($z0);

        $r1 = new com.sleepycat.je.utilint.StatGroup;

        specialinvoke $r1.<com.sleepycat.je.utilint.StatGroup: void <init>(java.lang.String,java.lang.String)>("Locktable latches", "Shows lock table contention");

        latchStats = $r1;

        i#11 = 0;

     label1:
        $i0 = this.<com.sleepycat.je.txn.LockManager: int nLockTables>;

        if i#11 >= $i0 goto label3;

        $r2 = this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.latch.Latch[] lockTableLatches>;

        $r3 = $r2[i#11];

        $r4 = interfaceinvoke $r3.<com.sleepycat.je.latch.Latch: com.sleepycat.je.utilint.StatGroup getStats()>();

        virtualinvoke latchStats.<com.sleepycat.je.utilint.StatGroup: void addAll(com.sleepycat.je.utilint.StatGroup)>($r4);

        $z1 = virtualinvoke config.<com.sleepycat.je.StatsConfig: boolean getClear()>();

        if $z1 == 0 goto label2;

        $r5 = this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.latch.Latch[] lockTableLatches>;

        $r6 = $r5[i#11];

        interfaceinvoke $r6.<com.sleepycat.je.latch.Latch: void clearStats()>();

     label2:
        i#11 = i#11 + 1;

        goto label1;

     label3:
        virtualinvoke copyStats.<com.sleepycat.je.utilint.StatGroup: void addAll(com.sleepycat.je.utilint.StatGroup)>(latchStats);

        $r7 = new com.sleepycat.je.utilint.StatGroup;

        specialinvoke $r7.<com.sleepycat.je.utilint.StatGroup: void <init>(java.lang.String,java.lang.String)>("Locktable", "The types of locks held in the lock table");

        tableStats = $r7;

        $z2 = virtualinvoke config.<com.sleepycat.je.StatsConfig: boolean getFast()>();

        if $z2 != 0 goto label4;

        $z3 = virtualinvoke config.<com.sleepycat.je.StatsConfig: boolean getClear()>();

        virtualinvoke this.<com.sleepycat.je.txn.LockManager: void dumpLockTable(com.sleepycat.je.utilint.StatGroup,boolean)>(tableStats, $z3);

     label4:
        virtualinvoke copyStats.<com.sleepycat.je.utilint.StatGroup: void addAll(com.sleepycat.je.utilint.StatGroup)>(tableStats);

        return copyStats;
    }

    void dumpLockTableInternal(com.sleepycat.je.utilint.StatGroup, int, boolean)
    {
        com.sleepycat.je.txn.LockManager this;
        com.sleepycat.je.utilint.StatGroup tableStats, oneTable, $r0;
        int i, $i0, $i1, $i2;
        boolean clear, $z0, $z1, $z2;
        com.sleepycat.je.utilint.IntStat totalLocks, waiters, owners, readLocks, writeLocks, $r1, $r3, $r5, $r7, $r9;
        java.util.Map lockTable;
        java.util.Iterator l11, l13;
        com.sleepycat.je.txn.Lock lock;
        com.sleepycat.je.txn.LockInfo info;
        com.sleepycat.je.utilint.StatDefinition $r2, $r4, $r6, $r8, $r10;
        java.util.Map[] $r11;
        java.util.Collection $r12;
        java.lang.Object $r13, $r15;
        java.util.Set $r14;
        com.sleepycat.je.txn.LockType $r16;

        this := @this: com.sleepycat.je.txn.LockManager;

        tableStats := @parameter0: com.sleepycat.je.utilint.StatGroup;

        i := @parameter1: int;

        clear := @parameter2: boolean;

        $r0 = new com.sleepycat.je.utilint.StatGroup;

        specialinvoke $r0.<com.sleepycat.je.utilint.StatGroup: void <init>(java.lang.String,java.lang.String)>("Single lock table", "Temporary stat group");

        oneTable = $r0;

        $r1 = new com.sleepycat.je.utilint.IntStat;

        $r2 = <com.sleepycat.je.txn.LockStatDefinition: com.sleepycat.je.utilint.StatDefinition LOCK_TOTAL>;

        specialinvoke $r1.<com.sleepycat.je.utilint.IntStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition)>(oneTable, $r2);

        totalLocks = $r1;

        $r3 = new com.sleepycat.je.utilint.IntStat;

        $r4 = <com.sleepycat.je.txn.LockStatDefinition: com.sleepycat.je.utilint.StatDefinition LOCK_WAITERS>;

        specialinvoke $r3.<com.sleepycat.je.utilint.IntStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition)>(oneTable, $r4);

        waiters = $r3;

        $r5 = new com.sleepycat.je.utilint.IntStat;

        $r6 = <com.sleepycat.je.txn.LockStatDefinition: com.sleepycat.je.utilint.StatDefinition LOCK_OWNERS>;

        specialinvoke $r5.<com.sleepycat.je.utilint.IntStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition)>(oneTable, $r6);

        owners = $r5;

        $r7 = new com.sleepycat.je.utilint.IntStat;

        $r8 = <com.sleepycat.je.txn.LockStatDefinition: com.sleepycat.je.utilint.StatDefinition LOCK_READ_LOCKS>;

        specialinvoke $r7.<com.sleepycat.je.utilint.IntStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition)>(oneTable, $r8);

        readLocks = $r7;

        $r9 = new com.sleepycat.je.utilint.IntStat;

        $r10 = <com.sleepycat.je.txn.LockStatDefinition: com.sleepycat.je.utilint.StatDefinition LOCK_WRITE_LOCKS>;

        specialinvoke $r9.<com.sleepycat.je.utilint.IntStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition)>(oneTable, $r10);

        writeLocks = $r9;

        $r11 = this.<com.sleepycat.je.txn.LockManager: java.util.Map[] lockTables>;

        lockTable = $r11[i];

        $i0 = interfaceinvoke lockTable.<java.util.Map: int size()>();

        virtualinvoke totalLocks.<com.sleepycat.je.utilint.IntStat: void add(int)>($i0);

        $r12 = interfaceinvoke lockTable.<java.util.Map: java.util.Collection values()>();

        l11 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r13 = interfaceinvoke l11.<java.util.Iterator: java.lang.Object next()>();

        lock = (com.sleepycat.je.txn.Lock) $r13;

        $i1 = interfaceinvoke lock.<com.sleepycat.je.txn.Lock: int nWaiters()>();

        virtualinvoke waiters.<com.sleepycat.je.utilint.IntStat: void add(int)>($i1);

        $i2 = interfaceinvoke lock.<com.sleepycat.je.txn.Lock: int nOwners()>();

        virtualinvoke owners.<com.sleepycat.je.utilint.IntStat: void add(int)>($i2);

        $r14 = interfaceinvoke lock.<com.sleepycat.je.txn.Lock: java.util.Set getOwnersClone()>();

        l13 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke l13.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r15 = interfaceinvoke l13.<java.util.Iterator: java.lang.Object next()>();

        info = (com.sleepycat.je.txn.LockInfo) $r15;

        $r16 = virtualinvoke info.<com.sleepycat.je.txn.LockInfo: com.sleepycat.je.txn.LockType getLockType()>();

        $z2 = virtualinvoke $r16.<com.sleepycat.je.txn.LockType: boolean isWriteLock()>();

        if $z2 == 0 goto label3;

        virtualinvoke writeLocks.<com.sleepycat.je.utilint.IntStat: void increment()>();

        goto label4;

     label3:
        virtualinvoke readLocks.<com.sleepycat.je.utilint.IntStat: void increment()>();

     label4:
        goto label2;

     label5:
        goto label1;

     label6:
        virtualinvoke tableStats.<com.sleepycat.je.utilint.StatGroup: void addAll(com.sleepycat.je.utilint.StatGroup)>(oneTable);

        return;
    }

    void unregisterThreadLocker(com.sleepycat.je.txn.ThreadLocker)
    {
        com.sleepycat.je.txn.LockManager this;
        com.sleepycat.je.txn.ThreadLocker locker;
        java.lang.Thread thread;
        com.sleepycat.je.utilint.TinyHashSet set;
        boolean removed, $z0, $z1;
        java.util.Map $r0, $r1, $r5, $r6;
        java.lang.Object $r2;
        java.lang.AssertionError $r3, $r4;
        int $i0;

        this := @this: com.sleepycat.je.txn.LockManager;

        locker := @parameter0: com.sleepycat.je.txn.ThreadLocker;

        $r0 = this.<com.sleepycat.je.txn.LockManager: java.util.Map threadLockers>;

        if $r0 != null goto label1;

        return;

     label1:
        thread = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r1 = this.<com.sleepycat.je.txn.LockManager: java.util.Map threadLockers>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(thread);

        set = (com.sleepycat.je.utilint.TinyHashSet) $r2;

        $z0 = <com.sleepycat.je.txn.LockManager: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if set != null goto label2;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        removed = virtualinvoke set.<com.sleepycat.je.utilint.TinyHashSet: boolean remove(java.lang.Object)>(locker);

        $z1 = <com.sleepycat.je.txn.LockManager: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        if removed != 0 goto label3;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label3:
        $r5 = this.<com.sleepycat.je.txn.LockManager: java.util.Map threadLockers>;

        $i0 = interfaceinvoke $r5.<java.util.Map: int size()>();

        if $i0 != 0 goto label4;

        $r6 = this.<com.sleepycat.je.txn.LockManager: java.util.Map threadLockers>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object remove(java.lang.Object)>(thread);

     label4:
        return;
    }

    public boolean release(long, com.sleepycat.je.txn.Locker) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.txn.LockManager this;
        long lsn;
        com.sleepycat.je.txn.Locker locker, newOwner, l7;
        java.util.Set newOwners;
        java.util.Iterator l5;
        java.lang.Throwable l8, $r2;
        int $i0;
        boolean $z0, $z1, $z2;
        java.lang.Object $r0;
        java.lang.AssertionError $r3;

        this := @this: com.sleepycat.je.txn.LockManager;

        lsn := @parameter0: long;

        locker := @parameter1: com.sleepycat.je.txn.Locker;

        newOwners = virtualinvoke this.<com.sleepycat.je.txn.LockManager: java.util.Set releaseAndFindNotifyTargets(long,com.sleepycat.je.txn.Locker)>(lsn, locker);

        if newOwners != null goto label01;

        return 0;

     label01:
        $i0 = interfaceinvoke newOwners.<java.util.Set: int size()>();

        if $i0 <= 0 goto label10;

        l5 = interfaceinvoke newOwners.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r0 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        newOwner = (com.sleepycat.je.txn.Locker) $r0;

        l7 = newOwner;

        entermonitor newOwner;

     label03:
        virtualinvoke newOwner.<java.lang.Object: void notifyAll()>();

        exitmonitor l7;

     label04:
        goto label08;

     label05:
        $r2 := @caughtexception;

     label06:
        l8 = $r2;

        exitmonitor l7;

     label07:
        throw l8;

     label08:
        $z1 = <com.sleepycat.je.txn.LockManager: boolean $assertionsDisabled>;

        if $z1 != 0 goto label09;

        $z2 = staticinvoke <com.sleepycat.je.dbi.EnvironmentImpl: boolean maybeForceYield()>();

        if $z2 != 0 goto label09;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label09:
        goto label02;

     label10:
        return 1;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
    }

    int getLockTableIndex(long)
    {
        com.sleepycat.je.txn.LockManager this;
        long lsn;
        int $i0, $i1, $i2, $i3;

        this := @this: com.sleepycat.je.txn.LockManager;

        lsn := @parameter0: long;

        $i0 = (int) lsn;

        $i1 = $i0 & 2147483647;

        $i2 = this.<com.sleepycat.je.txn.LockManager: int nLockTables>;

        $i3 = $i1 % $i2;

        return $i3;
    }

    java.util.Set releaseAndFindNotifyTargetsInternal(long, com.sleepycat.je.txn.Locker, int)
    {
        com.sleepycat.je.txn.LockManager this;
        long lsn, $l2, $l3;
        com.sleepycat.je.txn.Locker locker;
        int lockTableIndex, $i0, $i1;
        java.util.Map lockTable;
        java.util.Set newOwners;
        java.util.Map[] $r0;
        java.lang.Long $r1, $r3, $r6, $r14;
        java.lang.Object $r2, $r4;
        com.sleepycat.je.txn.Lock lock#10, lock#51;
        com.sleepycat.je.dbi.MemoryBudget $r5, $r8, $r9;
        boolean $z0, $z1;
        com.sleepycat.je.txn.ThinLockImpl $r10, $r11;
        com.sleepycat.je.txn.LockImpl $r12, $r13;

        this := @this: com.sleepycat.je.txn.LockManager;

        lsn := @parameter0: long;

        locker := @parameter1: com.sleepycat.je.txn.Locker;

        lockTableIndex := @parameter2: int;

        $r0 = this.<com.sleepycat.je.txn.LockManager: java.util.Map[] lockTables>;

        lockTable = $r0[lockTableIndex];

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(lsn);

        $r2 = interfaceinvoke lockTable.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        lock#10 = (com.sleepycat.je.txn.Lock) $r2;

        if lock#10 != null goto label1;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(lsn);

        $r4 = interfaceinvoke lockTable.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        lock#10 = (com.sleepycat.je.txn.Lock) $r4;

     label1:
        if lock#10 != null goto label2;

        return null;

     label2:
        $r5 = this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.dbi.MemoryBudget memoryBudget>;

        newOwners = interfaceinvoke lock#10.<com.sleepycat.je.txn.Lock: java.util.Set release(com.sleepycat.je.txn.Locker,com.sleepycat.je.dbi.MemoryBudget,int)>(locker, $r5, lockTableIndex);

        if newOwners != null goto label3;

        return null;

     label3:
        $i0 = interfaceinvoke lock#10.<com.sleepycat.je.txn.Lock: int nWaiters()>();

        if $i0 != 0 goto label5;

        $i1 = interfaceinvoke lock#10.<com.sleepycat.je.txn.Lock: int nOwners()>();

        if $i1 != 0 goto label5;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(lsn);

        interfaceinvoke lockTable.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r6);

        $z0 = interfaceinvoke lock#10.<com.sleepycat.je.txn.Lock: boolean isThin()>();

        if $z0 == 0 goto label4;

        $r8 = this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.dbi.MemoryBudget memoryBudget>;

        $l2 = <com.sleepycat.je.txn.LockManager: long REMOVE_TOTAL_THINLOCKIMPL_OVERHEAD>;

        virtualinvoke $r8.<com.sleepycat.je.dbi.MemoryBudget: void updateLockMemoryUsage(long,int)>($l2, lockTableIndex);

        goto label8;

     label4:
        $r9 = this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.dbi.MemoryBudget memoryBudget>;

        $l3 = <com.sleepycat.je.txn.LockManager: long REMOVE_TOTAL_LOCKIMPL_OVERHEAD>;

        virtualinvoke $r9.<com.sleepycat.je.dbi.MemoryBudget: void updateLockMemoryUsage(long,int)>($l3, lockTableIndex);

        goto label8;

     label5:
        $z1 = interfaceinvoke lock#10.<com.sleepycat.je.txn.Lock: boolean isThin()>();

        if $z1 == 0 goto label6;

        $r10 = new com.sleepycat.je.txn.ThinLockImpl;

        $r11 = (com.sleepycat.je.txn.ThinLockImpl) lock#10;

        specialinvoke $r10.<com.sleepycat.je.txn.ThinLockImpl: void <init>(com.sleepycat.je.txn.ThinLockImpl)>($r11);

        lock#51 = $r10;

        goto label7;

     label6:
        $r12 = new com.sleepycat.je.txn.LockImpl;

        $r13 = (com.sleepycat.je.txn.LockImpl) lock#10;

        specialinvoke $r12.<com.sleepycat.je.txn.LockImpl: void <init>(com.sleepycat.je.txn.LockImpl)>($r13);

        lock#51 = $r12;

     label7:
        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(lsn);

        interfaceinvoke lockTable.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, lock#51);

     label8:
        return newOwners;
    }

    com.sleepycat.je.LockStats lockStat(com.sleepycat.je.StatsConfig) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.txn.LockManager this;
        com.sleepycat.je.StatsConfig config;
        com.sleepycat.je.utilint.StatGroup latchStats, tableStats, $r0, $r3, $r4, $r6, $r7, $r8, $r9;
        int i#6, $i0;
        com.sleepycat.je.latch.Latch[] $r1;
        com.sleepycat.je.latch.Latch $r2;
        boolean $z0, $z1, $z2, $z3;
        com.sleepycat.je.LockStats $r5;

        this := @this: com.sleepycat.je.txn.LockManager;

        config := @parameter0: com.sleepycat.je.StatsConfig;

        $r0 = new com.sleepycat.je.utilint.StatGroup;

        specialinvoke $r0.<com.sleepycat.je.utilint.StatGroup: void <init>(java.lang.String,java.lang.String)>("Locktable latches", "Shows lock table contention");

        latchStats = $r0;

        i#6 = 0;

     label1:
        $i0 = this.<com.sleepycat.je.txn.LockManager: int nLockTables>;

        if i#6 >= $i0 goto label2;

        $r1 = this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.latch.Latch[] lockTableLatches>;

        $r2 = $r1[i#6];

        $r3 = interfaceinvoke $r2.<com.sleepycat.je.latch.Latch: com.sleepycat.je.utilint.StatGroup getStats()>();

        virtualinvoke latchStats.<com.sleepycat.je.utilint.StatGroup: void addAll(com.sleepycat.je.utilint.StatGroup)>($r3);

        i#6 = i#6 + 1;

        goto label1;

     label2:
        $r4 = new com.sleepycat.je.utilint.StatGroup;

        specialinvoke $r4.<com.sleepycat.je.utilint.StatGroup: void <init>(java.lang.String,java.lang.String)>("Locktable", "The types of locks held in the lock table");

        tableStats = $r4;

        $z0 = virtualinvoke config.<com.sleepycat.je.StatsConfig: boolean getFast()>();

        if $z0 != 0 goto label3;

        virtualinvoke this.<com.sleepycat.je.txn.LockManager: void dumpLockTable(com.sleepycat.je.utilint.StatGroup,boolean)>(tableStats, 0);

     label3:
        $r5 = new com.sleepycat.je.LockStats;

        $r6 = this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.utilint.StatGroup stats>;

        $z1 = virtualinvoke config.<com.sleepycat.je.StatsConfig: boolean getClear()>();

        $r7 = virtualinvoke $r6.<com.sleepycat.je.utilint.StatGroup: com.sleepycat.je.utilint.StatGroup cloneGroup(boolean)>($z1);

        $z2 = virtualinvoke config.<com.sleepycat.je.StatsConfig: boolean getClear()>();

        $r8 = virtualinvoke latchStats.<com.sleepycat.je.utilint.StatGroup: com.sleepycat.je.utilint.StatGroup cloneGroup(boolean)>($z2);

        $z3 = virtualinvoke config.<com.sleepycat.je.StatsConfig: boolean getClear()>();

        $r9 = virtualinvoke tableStats.<com.sleepycat.je.utilint.StatGroup: com.sleepycat.je.utilint.StatGroup cloneGroup(boolean)>($z3);

        specialinvoke $r5.<com.sleepycat.je.LockStats: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatGroup)>($r7, $r8, $r9);

        return $r5;
    }

    public void dump() throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.txn.LockManager this;
        java.io.PrintStream $r0;
        java.lang.String $r1;

        this := @this: com.sleepycat.je.txn.LockManager;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        $r1 = specialinvoke this.<com.sleepycat.je.txn.LockManager: java.lang.String dumpToString()>();

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>($r1);

        return;
    }

    private java.lang.String dumpToString() throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.txn.LockManager this;
        java.lang.StringBuilder sb, $r0;
        java.lang.Throwable l3, $r5;
        int i#4, $i0;
        com.sleepycat.je.latch.Latch[] $r1, $r3, $r6;
        com.sleepycat.je.latch.Latch $r2, $r4, $r7;
        java.lang.String $r8;

        this := @this: com.sleepycat.je.txn.LockManager;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        sb = $r0;

        i#4 = 0;

     label1:
        $i0 = this.<com.sleepycat.je.txn.LockManager: int nLockTables>;

        if i#4 >= $i0 goto label6;

        $r1 = this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.latch.Latch[] lockTableLatches>;

        $r2 = $r1[i#4];

        interfaceinvoke $r2.<com.sleepycat.je.latch.Latch: void acquireExclusive()>();

     label2:
        specialinvoke this.<com.sleepycat.je.txn.LockManager: void dumpToStringNoLatch(java.lang.StringBuilder,int)>(sb, i#4);

     label3:
        $r3 = this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.latch.Latch[] lockTableLatches>;

        $r4 = $r3[i#4];

        interfaceinvoke $r4.<com.sleepycat.je.latch.Latch: void release()>();

        goto label5;

     label4:
        $r5 := @caughtexception;

        l3 = $r5;

        $r6 = this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.latch.Latch[] lockTableLatches>;

        $r7 = $r6[i#4];

        interfaceinvoke $r7.<com.sleepycat.je.latch.Latch: void release()>();

        throw l3;

     label5:
        i#4 = i#4 + 1;

        goto label1;

     label6:
        $r8 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private void dumpToStringNoLatch(java.lang.StringBuilder, int)
    {
        com.sleepycat.je.txn.LockManager this;
        java.lang.StringBuilder sb, $r5, $r7;
        int whichTable;
        java.util.Map lockTable;
        java.util.Iterator l4;
        java.util.Map$Entry entry;
        java.lang.Long lsn;
        com.sleepycat.je.txn.Lock lock;
        java.util.Map[] $r0;
        java.util.Set $r1;
        boolean $z0;
        java.lang.Object $r2, $r3, $r4;
        long $l0;
        java.lang.String $r6;

        this := @this: com.sleepycat.je.txn.LockManager;

        sb := @parameter0: java.lang.StringBuilder;

        whichTable := @parameter1: int;

        $r0 = this.<com.sleepycat.je.txn.LockManager: java.util.Map[] lockTables>;

        lockTable = $r0[whichTable];

        $r1 = interfaceinvoke lockTable.<java.util.Map: java.util.Set entrySet()>();

        l4 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $r2;

        $r3 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        lsn = (java.lang.Long) $r3;

        $r4 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        lock = (com.sleepycat.je.txn.Lock) $r4;

        $r5 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("---- LSN: ");

        $l0 = virtualinvoke lsn.<java.lang.Long: long longValue()>();

        $r6 = staticinvoke <com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>($l0);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("----\n");

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(lock);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        goto label1;

     label2:
        return;
    }

    int getLockTableIndex(java.lang.Long)
    {
        com.sleepycat.je.txn.LockManager this;
        java.lang.Long lsn;
        long $l0;
        int $i1, $i2, $i3, $i4;

        this := @this: com.sleepycat.je.txn.LockManager;

        lsn := @parameter0: java.lang.Long;

        $l0 = virtualinvoke lsn.<java.lang.Long: long longValue()>();

        $i1 = (int) $l0;

        $i2 = $i1 & 2147483647;

        $i3 = this.<com.sleepycat.je.txn.LockManager: int nLockTables>;

        $i4 = $i2 % $i3;

        return $i4;
    }

    boolean isLockUncontendedInternal(java.lang.Long, int)
    {
        com.sleepycat.je.txn.LockManager this;
        java.lang.Long lsn;
        int lockTableIndex, $i0, $i1;
        java.util.Map lockTable;
        com.sleepycat.je.txn.Lock useLock;
        java.util.Map[] $r0;
        java.lang.Object $r1;
        boolean $z0;

        this := @this: com.sleepycat.je.txn.LockManager;

        lsn := @parameter0: java.lang.Long;

        lockTableIndex := @parameter1: int;

        $r0 = this.<com.sleepycat.je.txn.LockManager: java.util.Map[] lockTables>;

        lockTable = $r0[lockTableIndex];

        $r1 = interfaceinvoke lockTable.<java.util.Map: java.lang.Object get(java.lang.Object)>(lsn);

        useLock = (com.sleepycat.je.txn.Lock) $r1;

        if useLock != null goto label1;

        return 1;

     label1:
        $i0 = interfaceinvoke useLock.<com.sleepycat.je.txn.Lock: int nWaiters()>();

        if $i0 != 0 goto label2;

        $i1 = interfaceinvoke useLock.<com.sleepycat.je.txn.Lock: int nOwners()>();

        if $i1 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public com.sleepycat.je.txn.LockGrantType lock(long, com.sleepycat.je.txn.Locker, com.sleepycat.je.txn.LockType, long, boolean, boolean, com.sleepycat.je.dbi.DatabaseImpl) throws com.sleepycat.je.LockConflictException, com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.txn.LockManager this;
        long lsn, startTime, txnTimeout, txnTimeRemaining, timeout#1, $l2;
        com.sleepycat.je.txn.Locker locker, l14, l16, victim, l18;
        com.sleepycat.je.txn.LockType type, $r1;
        boolean nonBlockingRequest, jumpAheadOfWaiters, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        com.sleepycat.je.dbi.DatabaseImpl database;
        java.lang.Throwable l19, l20, l21, $r14, $r17, $r23;
        com.sleepycat.je.txn.LockManager$WaitForLockResult waitResult;
        com.sleepycat.je.utilint.Pair nvResult;
        byte $b0, $b1, $b3, $b4;
        java.lang.AssertionError $r0, $r6, $r10;
        com.sleepycat.je.txn.LockGrantType $r2, grant#24, $r5, grant#106;
        java.lang.Long $r4, $r11, $r12, $r16, $r18, $r22;
        com.sleepycat.je.txn.LockAttemptResult result#21;
        com.sleepycat.je.utilint.TestHook $r7, $r8;
        com.sleepycat.je.txn.LockManager$DeadlockChecker lastDC#84, lastDC#109;
        java.lang.Object $r19, $r24;
        java.lang.Boolean $r20;

        this := @this: com.sleepycat.je.txn.LockManager;

        lsn := @parameter0: long;

        locker := @parameter1: com.sleepycat.je.txn.Locker;

        type := @parameter2: com.sleepycat.je.txn.LockType;

        timeout#1 := @parameter3: long;

        nonBlockingRequest := @parameter4: boolean;

        jumpAheadOfWaiters := @parameter5: boolean;

        database := @parameter6: com.sleepycat.je.dbi.DatabaseImpl;

        $z0 = <com.sleepycat.je.txn.LockManager: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $b0 = timeout#1 cmp 0L;

        if $b0 >= 0 goto label01;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label01:
        $r1 = <com.sleepycat.je.txn.LockType: com.sleepycat.je.txn.LockType NONE>;

        if type != $r1 goto label02;

        $r2 = <com.sleepycat.je.txn.LockGrantType: com.sleepycat.je.txn.LockGrantType NONE_NEEDED>;

        return $r2;

     label02:
        l14 = locker;

        entermonitor locker;

     label03:
        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(lsn);

        result#21 = virtualinvoke this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.txn.LockAttemptResult attemptLock(java.lang.Long,com.sleepycat.je.txn.Locker,com.sleepycat.je.txn.LockType,boolean,boolean)>($r4, locker, type, nonBlockingRequest, jumpAheadOfWaiters);

        grant#24 = result#21.<com.sleepycat.je.txn.LockAttemptResult: com.sleepycat.je.txn.LockGrantType lockGrant>;

        $z1 = result#21.<com.sleepycat.je.txn.LockAttemptResult: boolean success>;

        if $z1 != 0 goto label04;

        $r5 = <com.sleepycat.je.txn.LockGrantType: com.sleepycat.je.txn.LockGrantType DENIED>;

        if grant#24 != $r5 goto label08;

     label04:
        $z2 = <com.sleepycat.je.txn.LockManager: boolean $assertionsDisabled>;

        if $z2 != 0 goto label05;

        if nonBlockingRequest != 0 goto label05;

        $z3 = result#21.<com.sleepycat.je.txn.LockAttemptResult: boolean success>;

        if $z3 != 0 goto label05;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label05:
        $r7 = <com.sleepycat.je.txn.LockManager: com.sleepycat.je.utilint.TestHook afterLockHook>;

        if $r7 == null goto label06;

        $r8 = <com.sleepycat.je.txn.LockManager: com.sleepycat.je.utilint.TestHook afterLockHook>;

        interfaceinvoke $r8.<com.sleepycat.je.utilint.TestHook: void doHook()>();

     label06:
        exitmonitor l14;

     label07:
        return grant#24;

     label08:
        $z4 = <com.sleepycat.je.latch.LatchSupport: boolean TRACK_LATCHES>;

        if $z4 == 0 goto label09;

        if nonBlockingRequest != 0 goto label09;

        staticinvoke <com.sleepycat.je.latch.LatchSupport: void expectBtreeLatchesHeld(int)>(0);

     label09:
        $z5 = <com.sleepycat.je.txn.LockManager: boolean $assertionsDisabled>;

        if $z5 != 0 goto label10;

        if nonBlockingRequest == 0 goto label10;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label10:
        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(lsn);

        virtualinvoke locker.<com.sleepycat.je.txn.Locker: void setWaitingFor(java.lang.Long,com.sleepycat.je.txn.LockType)>($r11, type);

        startTime = staticinvoke <java.lang.System: long currentTimeMillis()>();

        txnTimeout = virtualinvoke locker.<com.sleepycat.je.txn.Locker: long getTxnTimeout()>();

        $b1 = txnTimeout cmp 0L;

        if $b1 <= 0 goto label12;

        $l2 = virtualinvoke locker.<com.sleepycat.je.txn.Locker: long getTxnStartMillis()>();

        txnTimeRemaining = staticinvoke <com.sleepycat.je.txn.LockManager: long timeRemain(long,long)>(txnTimeout, $l2);

        $b3 = timeout#1 cmp 0L;

        if $b3 == 0 goto label11;

        $b4 = txnTimeRemaining cmp timeout#1;

        if $b4 >= 0 goto label12;

     label11:
        timeout#1 = staticinvoke <java.lang.Math: long max(long,long)>(1L, txnTimeRemaining);

     label12:
        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(lsn);

        $z6 = specialinvoke this.<com.sleepycat.je.txn.LockManager: boolean performDeadlockDetectionDelay(java.lang.Long,com.sleepycat.je.txn.Locker,com.sleepycat.je.txn.LockType,com.sleepycat.je.txn.LockGrantType,long,long)>($r12, locker, type, grant#24, timeout#1, startTime);

        if $z6 == 0 goto label14;

        exitmonitor l14;

     label13:
        return grant#24;

     label14:
        exitmonitor l14;

     label15:
        goto label19;

     label16:
        $r14 := @caughtexception;

     label17:
        l19 = $r14;

        exitmonitor l14;

     label18:
        throw l19;

     label19:
        lastDC#84 = null;

     label20:
        l16 = locker;

        entermonitor locker;

     label21:
        $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(lsn);

        waitResult = specialinvoke this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.txn.LockManager$WaitForLockResult waitForLock(com.sleepycat.je.txn.LockAttemptResult,java.lang.Long,com.sleepycat.je.txn.Locker,com.sleepycat.je.txn.LockType,com.sleepycat.je.txn.LockManager$DeadlockChecker,long,long,com.sleepycat.je.dbi.DatabaseImpl)>(result#21, $r16, locker, type, lastDC#84, timeout#1, startTime, database);

        exitmonitor l16;

     label22:
        goto label26;

     label23:
        $r17 := @caughtexception;

     label24:
        l20 = $r17;

        exitmonitor l16;

     label25:
        throw l20;

     label26:
        result#21 = virtualinvoke waitResult.<com.sleepycat.je.txn.LockManager$WaitForLockResult: com.sleepycat.je.txn.LockAttemptResult getResult()>();

        grant#106 = result#21.<com.sleepycat.je.txn.LockAttemptResult: com.sleepycat.je.txn.LockGrantType lockGrant>;

        lastDC#109 = virtualinvoke waitResult.<com.sleepycat.je.txn.LockManager$WaitForLockResult: com.sleepycat.je.txn.LockManager$DeadlockChecker getDeadLockChecker()>();

        victim = virtualinvoke waitResult.<com.sleepycat.je.txn.LockManager$WaitForLockResult: com.sleepycat.je.txn.Locker getVictim()>();

        if victim != null goto label27;

        return grant#106;

     label27:
        $r18 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(lsn);

        nvResult = specialinvoke this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.utilint.Pair notifyVictim(com.sleepycat.je.txn.Locker,com.sleepycat.je.txn.Locker,java.lang.Long,com.sleepycat.je.txn.LockType,com.sleepycat.je.txn.LockManager$DeadlockChecker,long,long,com.sleepycat.je.dbi.DatabaseImpl)>(victim, locker, $r18, type, lastDC#109, timeout#1, startTime, database);

        $r19 = virtualinvoke nvResult.<com.sleepycat.je.utilint.Pair: java.lang.Object first()>();

        $r20 = (java.lang.Boolean) $r19;

        $z7 = virtualinvoke $r20.<java.lang.Boolean: boolean booleanValue()>();

        if $z7 == 0 goto label34;

        l18 = locker;

        entermonitor locker;

     label28:
        $r22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(lsn);

        specialinvoke this.<com.sleepycat.je.txn.LockManager: void finishLock(com.sleepycat.je.txn.Locker,java.lang.Long,com.sleepycat.je.txn.LockType,com.sleepycat.je.txn.LockGrantType)>(locker, $r22, type, grant#106);

        exitmonitor l18;

     label29:
        goto label33;

     label30:
        $r23 := @caughtexception;

     label31:
        l21 = $r23;

        exitmonitor l18;

     label32:
        throw l21;

     label33:
        return grant#106;

     label34:
        $r24 = virtualinvoke nvResult.<com.sleepycat.je.utilint.Pair: java.lang.Object second()>();

        lastDC#84 = (com.sleepycat.je.txn.LockManager$DeadlockChecker) $r24;

        goto label20;

        catch java.lang.Throwable from label03 to label07 with label16;
        catch java.lang.Throwable from label08 to label13 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label24 to label25 with label23;
        catch java.lang.Throwable from label28 to label29 with label30;
        catch java.lang.Throwable from label31 to label32 with label30;
    }

    private static long timeRemain(long, long)
    {
        long timeout, startTime, $l0, $l1, $l2;

        timeout := @parameter0: long;

        startTime := @parameter1: long;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l1 = $l0 - startTime;

        $l2 = timeout - $l1;

        return $l2;
    }

    private boolean performDeadlockDetectionDelay(java.lang.Long, com.sleepycat.je.txn.Locker, com.sleepycat.je.txn.LockType, com.sleepycat.je.txn.LockGrantType, long, long)
    {
        com.sleepycat.je.txn.LockManager this;
        java.lang.Long lsn;
        com.sleepycat.je.txn.Locker locker;
        com.sleepycat.je.txn.LockType type;
        com.sleepycat.je.txn.LockGrantType grant;
        long timeout, startTime, ddDelay#4, $l2, $l3;
        boolean waitForever, $z0, $z1, $z2, $z3;
        java.lang.InterruptedException IE, $r2;
        com.sleepycat.je.dbi.EnvironmentImpl $r0, $r1, $r4;
        byte $b0, $b1;
        com.sleepycat.je.ThreadInterruptedException $r3;

        this := @this: com.sleepycat.je.txn.LockManager;

        lsn := @parameter0: java.lang.Long;

        locker := @parameter1: com.sleepycat.je.txn.Locker;

        type := @parameter2: com.sleepycat.je.txn.LockType;

        grant := @parameter3: com.sleepycat.je.txn.LockGrantType;

        timeout := @parameter4: long;

        startTime := @parameter5: long;

        $r0 = this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        ddDelay#4 = virtualinvoke $r0.<com.sleepycat.je.dbi.EnvironmentImpl: long getDeadlockDetectionDelay()>();

        $r1 = this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $z0 = virtualinvoke $r1.<com.sleepycat.je.dbi.EnvironmentImpl: boolean getDeadlockDetection()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke locker.<com.sleepycat.je.txn.Locker: boolean getImportunate()>();

        if $z1 != 0 goto label1;

        $b0 = ddDelay#4 cmp 0L;

        if $b0 != 0 goto label2;

     label1:
        return 0;

     label2:
        $b1 = timeout cmp 0L;

        if $b1 != 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        waitForever = $z2;

        if waitForever != 0 goto label5;

        $l2 = staticinvoke <com.sleepycat.je.txn.LockManager: long timeRemain(long,long)>(timeout, startTime);

        ddDelay#4 = staticinvoke <java.lang.Math: long min(long,long)>(ddDelay#4, $l2);

     label5:
        $l3 = staticinvoke <java.lang.Math: long max(long,long)>(1L, ddDelay#4);

        virtualinvoke locker.<java.lang.Object: void wait(long)>($l3);

     label6:
        goto label8;

     label7:
        $r2 := @caughtexception;

        IE = $r2;

        $r3 = new com.sleepycat.je.ThreadInterruptedException;

        $r4 = this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        specialinvoke $r3.<com.sleepycat.je.ThreadInterruptedException: void <init>(com.sleepycat.je.dbi.EnvironmentImpl,java.lang.Throwable)>($r4, IE);

        throw $r3;

     label8:
        $z3 = virtualinvoke this.<com.sleepycat.je.txn.LockManager: boolean isOwner(java.lang.Long,com.sleepycat.je.txn.Locker,com.sleepycat.je.txn.LockType)>(lsn, locker, type);

        if $z3 == 0 goto label9;

        specialinvoke this.<com.sleepycat.je.txn.LockManager: void finishLock(com.sleepycat.je.txn.Locker,java.lang.Long,com.sleepycat.je.txn.LockType,com.sleepycat.je.txn.LockGrantType)>(locker, lsn, type, grant);

        return 1;

     label9:
        return 0;

        catch java.lang.InterruptedException from label5 to label6 with label7;
    }

    private com.sleepycat.je.txn.LockManager$WaitForLockResult waitForLock(com.sleepycat.je.txn.LockAttemptResult, java.lang.Long, com.sleepycat.je.txn.Locker, com.sleepycat.je.txn.LockType, com.sleepycat.je.txn.LockManager$DeadlockChecker, long, long, com.sleepycat.je.dbi.DatabaseImpl)
    {
        com.sleepycat.je.txn.LockManager this;
        java.lang.Long lsn;
        com.sleepycat.je.txn.Locker locker, victim#10;
        com.sleepycat.je.txn.LockType type;
        long timeout, startTime, now, $l1, $l2, $l3, $l5, $l6, $l7, $l8;
        com.sleepycat.je.dbi.DatabaseImpl database;
        boolean isImportunate, waitForever, lockerTimedOut, thisLockTimedOut, isRestart, getOwnersAndWaiters, flushFromWaiters, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15;
        com.sleepycat.je.txn.LockManager$DeadlockResult dlr, dlr;
        java.lang.InterruptedException IE, $r3;
        java.util.HashSet owners, $r8;
        java.util.ArrayList waiters, $r9;
        com.sleepycat.je.txn.LockAttemptResult result#1;
        com.sleepycat.je.txn.LockManager$DeadlockChecker lastDC#2;
        byte $b0, $b4;
        com.sleepycat.je.utilint.TestHook $r0, $r1;
        com.sleepycat.je.dbi.EnvironmentImpl $r2, $r5;
        com.sleepycat.je.ThreadInterruptedException $r4;
        com.sleepycat.je.txn.LockGrantType $r6, $r7, $r12, $r15, $r19;
        com.sleepycat.je.dbi.RangeRestartException $r10;
        com.sleepycat.je.LockConflictException $r11, $r14, $r17;
        com.sleepycat.je.txn.Lock $r13, $r16;
        java.lang.AssertionError $r18;
        com.sleepycat.je.txn.LockManager$WaitForLockResult $r20;

        this := @this: com.sleepycat.je.txn.LockManager;

        result#1 := @parameter0: com.sleepycat.je.txn.LockAttemptResult;

        lsn := @parameter1: java.lang.Long;

        locker := @parameter2: com.sleepycat.je.txn.Locker;

        type := @parameter3: com.sleepycat.je.txn.LockType;

        lastDC#2 := @parameter4: com.sleepycat.je.txn.LockManager$DeadlockChecker;

        timeout := @parameter5: long;

        startTime := @parameter6: long;

        database := @parameter7: com.sleepycat.je.dbi.DatabaseImpl;

        isImportunate = virtualinvoke locker.<com.sleepycat.je.txn.Locker: boolean getImportunate()>();

        $b0 = timeout cmp 0L;

        if $b0 != 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        waitForever = $z0;

        victim#10 = null;

        $r0 = <com.sleepycat.je.txn.LockManager: com.sleepycat.je.utilint.TestHook simulatePartialDeadlockHook>;

        if $r0 == null goto label03;

        $r1 = <com.sleepycat.je.txn.LockManager: com.sleepycat.je.utilint.TestHook simulatePartialDeadlockHook>;

        interfaceinvoke $r1.<com.sleepycat.je.utilint.TestHook: void doHook()>();

     label03:
        $r2 = this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $z1 = virtualinvoke $r2.<com.sleepycat.je.dbi.EnvironmentImpl: boolean getDeadlockDetection()>();

        if $z1 == 0 goto label06;

        if isImportunate != 0 goto label06;

        dlr = specialinvoke this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.txn.LockManager$DeadlockResult checkAndHandleDeadlock(com.sleepycat.je.txn.Locker,java.lang.Long,com.sleepycat.je.txn.LockType,long,com.sleepycat.je.dbi.DatabaseImpl)>(locker, lsn, type, timeout, database);

        $z2 = staticinvoke <com.sleepycat.je.txn.LockManager$DeadlockResult: boolean access$000(com.sleepycat.je.txn.LockManager$DeadlockResult)>(dlr);

        if $z2 == 0 goto label04;

        goto label30;

     label04:
        $z3 = staticinvoke <com.sleepycat.je.txn.LockManager$DeadlockResult: boolean access$100(com.sleepycat.je.txn.LockManager$DeadlockResult)>(dlr);

        if $z3 == 0 goto label05;

        victim#10 = staticinvoke <com.sleepycat.je.txn.LockManager$DeadlockResult: com.sleepycat.je.txn.Locker access$200(com.sleepycat.je.txn.LockManager$DeadlockResult)>(dlr);

        lastDC#2 = staticinvoke <com.sleepycat.je.txn.LockManager$DeadlockResult: com.sleepycat.je.txn.LockManager$DeadlockChecker access$300(com.sleepycat.je.txn.LockManager$DeadlockResult)>(dlr);

        goto label30;

     label05:
        goto label07;

     label06:
        $z4 = virtualinvoke this.<com.sleepycat.je.txn.LockManager: boolean isOwner(java.lang.Long,com.sleepycat.je.txn.Locker,com.sleepycat.je.txn.LockType)>(lsn, locker, type);

        if $z4 == 0 goto label07;

        goto label30;

     label07:
        if waitForever == 0 goto label08;

        virtualinvoke locker.<java.lang.Object: void wait(long)>(0L);

        goto label09;

     label08:
        $l1 = staticinvoke <com.sleepycat.je.txn.LockManager: long timeRemain(long,long)>(timeout, startTime);

        $l2 = staticinvoke <java.lang.Math: long max(long,long)>(1L, $l1);

        virtualinvoke locker.<java.lang.Object: void wait(long)>($l2);

     label09:
        goto label11;

     label10:
        $r3 := @caughtexception;

        IE = $r3;

        $r4 = new com.sleepycat.je.ThreadInterruptedException;

        $r5 = this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        specialinvoke $r4.<com.sleepycat.je.ThreadInterruptedException: void <init>(com.sleepycat.je.dbi.EnvironmentImpl,java.lang.Throwable)>($r5, IE);

        throw $r4;

     label11:
        lockerTimedOut = virtualinvoke locker.<com.sleepycat.je.txn.Locker: boolean isTimedOut()>();

        now = staticinvoke <java.lang.System: long currentTimeMillis()>();

        if waitForever != 0 goto label12;

        $l3 = now - startTime;

        $b4 = $l3 cmp timeout;

        if $b4 < 0 goto label12;

        $z5 = 1;

        goto label13;

     label12:
        $z5 = 0;

     label13:
        thisLockTimedOut = $z5;

        $r6 = result#1.<com.sleepycat.je.txn.LockAttemptResult: com.sleepycat.je.txn.LockGrantType lockGrant>;

        $r7 = <com.sleepycat.je.txn.LockGrantType: com.sleepycat.je.txn.LockGrantType WAIT_RESTART>;

        if $r6 != $r7 goto label14;

        $z6 = 1;

        goto label15;

     label14:
        $z6 = 0;

     label15:
        isRestart = $z6;

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        owners = $r8;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        waiters = $r9;

        if lockerTimedOut != 0 goto label16;

        if thisLockTimedOut == 0 goto label17;

     label16:
        if isImportunate != 0 goto label17;

        $z7 = 1;

        goto label18;

     label17:
        $z7 = 0;

     label18:
        getOwnersAndWaiters = $z7;

        if isRestart == 0 goto label19;

        if isImportunate != 0 goto label19;

        $z8 = 1;

        goto label20;

     label19:
        $z8 = 0;

     label20:
        flushFromWaiters = $z8;

        $z9 = virtualinvoke this.<com.sleepycat.je.txn.LockManager: boolean validateOwnership(java.lang.Long,com.sleepycat.je.txn.Locker,com.sleepycat.je.txn.LockType,boolean,boolean,java.util.Set,java.util.List)>(lsn, locker, type, getOwnersAndWaiters, flushFromWaiters, owners, waiters);

        if $z9 == 0 goto label21;

        goto label30;

     label21:
        if isImportunate == 0 goto label22;

        result#1 = virtualinvoke this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.txn.LockAttemptResult stealLock(java.lang.Long,com.sleepycat.je.txn.Locker,com.sleepycat.je.txn.LockType)>(lsn, locker, type);

        $z10 = result#1.<com.sleepycat.je.txn.LockAttemptResult: boolean success>;

        if $z10 == 0 goto label03;

        goto label30;

     label22:
        if isRestart == 0 goto label23;

        $r10 = <com.sleepycat.je.txn.LockManager: com.sleepycat.je.dbi.RangeRestartException rangeRestartException>;

        throw $r10;

     label23:
        if thisLockTimedOut != 0 goto label24;

        if lockerTimedOut != 0 goto label24;

        goto label03;

     label24:
        dlr = specialinvoke this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.txn.LockManager$DeadlockResult checkAndHandleDeadlock(com.sleepycat.je.txn.Locker,java.lang.Long,com.sleepycat.je.txn.LockType,long,com.sleepycat.je.dbi.DatabaseImpl)>(locker, lsn, type, timeout, database);

        $z11 = staticinvoke <com.sleepycat.je.txn.LockManager$DeadlockResult: boolean access$000(com.sleepycat.je.txn.LockManager$DeadlockResult)>(dlr);

        if $z11 == 0 goto label25;

        goto label30;

     label25:
        $z12 = staticinvoke <com.sleepycat.je.txn.LockManager$DeadlockResult: boolean access$100(com.sleepycat.je.txn.LockManager$DeadlockResult)>(dlr);

        if $z12 == 0 goto label26;

        lastDC#2 = staticinvoke <com.sleepycat.je.txn.LockManager$DeadlockResult: com.sleepycat.je.txn.LockManager$DeadlockChecker access$300(com.sleepycat.je.txn.LockManager$DeadlockResult)>(dlr);

     label26:
        $z13 = virtualinvoke this.<com.sleepycat.je.txn.LockManager: boolean validateOwnership(java.lang.Long,com.sleepycat.je.txn.Locker,com.sleepycat.je.txn.LockType,boolean,boolean,java.util.Set,java.util.List)>(lsn, locker, type, 0, 1, null, null);

        if $z13 == 0 goto label27;

        goto label30;

     label27:
        if lastDC#2 == null goto label28;

        $r11 = specialinvoke this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.LockConflictException makeDeadlockException(com.sleepycat.je.txn.LockManager$DeadlockChecker,com.sleepycat.je.txn.Locker,long,boolean,com.sleepycat.je.dbi.DatabaseImpl)>(lastDC#2, locker, timeout, 0, database);

        throw $r11;

     label28:
        if lockerTimedOut == 0 goto label29;

        $l5 = virtualinvoke lsn.<java.lang.Long: long longValue()>();

        $r12 = result#1.<com.sleepycat.je.txn.LockAttemptResult: com.sleepycat.je.txn.LockGrantType lockGrant>;

        $r13 = result#1.<com.sleepycat.je.txn.LockAttemptResult: com.sleepycat.je.txn.Lock useLock>;

        $l6 = virtualinvoke locker.<com.sleepycat.je.txn.Locker: long getTxnTimeout()>();

        $l7 = virtualinvoke locker.<com.sleepycat.je.txn.Locker: long getTxnStartMillis()>();

        $r14 = specialinvoke this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.LockConflictException makeTimeoutException(boolean,com.sleepycat.je.txn.Locker,long,com.sleepycat.je.txn.LockType,com.sleepycat.je.txn.LockGrantType,com.sleepycat.je.txn.Lock,long,long,long,com.sleepycat.je.dbi.DatabaseImpl,java.util.Set,java.util.List)>(0, locker, $l5, type, $r12, $r13, $l6, $l7, now, database, owners, waiters);

        throw $r14;

     label29:
        $l8 = virtualinvoke lsn.<java.lang.Long: long longValue()>();

        $r15 = result#1.<com.sleepycat.je.txn.LockAttemptResult: com.sleepycat.je.txn.LockGrantType lockGrant>;

        $r16 = result#1.<com.sleepycat.je.txn.LockAttemptResult: com.sleepycat.je.txn.Lock useLock>;

        $r17 = specialinvoke this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.LockConflictException makeTimeoutException(boolean,com.sleepycat.je.txn.Locker,long,com.sleepycat.je.txn.LockType,com.sleepycat.je.txn.LockGrantType,com.sleepycat.je.txn.Lock,long,long,long,com.sleepycat.je.dbi.DatabaseImpl,java.util.Set,java.util.List)>(1, locker, $l8, type, $r15, $r16, timeout, startTime, now, database, owners, waiters);

        throw $r17;

     label30:
        if victim#10 != null goto label32;

        $z14 = <com.sleepycat.je.txn.LockManager: boolean $assertionsDisabled>;

        if $z14 != 0 goto label31;

        $z15 = virtualinvoke this.<com.sleepycat.je.txn.LockManager: boolean isOwner(java.lang.Long,com.sleepycat.je.txn.Locker,com.sleepycat.je.txn.LockType)>(lsn, locker, type);

        if $z15 != 0 goto label31;

        $r18 = new java.lang.AssertionError;

        specialinvoke $r18.<java.lang.AssertionError: void <init>()>();

        throw $r18;

     label31:
        $r19 = result#1.<com.sleepycat.je.txn.LockAttemptResult: com.sleepycat.je.txn.LockGrantType lockGrant>;

        specialinvoke this.<com.sleepycat.je.txn.LockManager: void finishLock(com.sleepycat.je.txn.Locker,java.lang.Long,com.sleepycat.je.txn.LockType,com.sleepycat.je.txn.LockGrantType)>(locker, lsn, type, $r19);

     label32:
        $r20 = new com.sleepycat.je.txn.LockManager$WaitForLockResult;

        specialinvoke $r20.<com.sleepycat.je.txn.LockManager$WaitForLockResult: void <init>(com.sleepycat.je.txn.Locker,com.sleepycat.je.txn.LockManager$DeadlockChecker,com.sleepycat.je.txn.LockAttemptResult)>(victim#10, lastDC#2, result#1);

        return $r20;

        catch java.lang.InterruptedException from label07 to label09 with label10;
    }

    private com.sleepycat.je.utilint.Pair notifyVictim(com.sleepycat.je.txn.Locker, com.sleepycat.je.txn.Locker, java.lang.Long, com.sleepycat.je.txn.LockType, com.sleepycat.je.txn.LockManager$DeadlockChecker, long, long, com.sleepycat.je.dbi.DatabaseImpl)
    {
        com.sleepycat.je.txn.LockManager this;
        com.sleepycat.je.txn.Locker targetedVictim, currentLocker, l12, $r13;
        java.lang.Long lsn;
        com.sleepycat.je.txn.LockType type;
        long timeout, startTime, $l1;
        com.sleepycat.je.dbi.DatabaseImpl database;
        boolean waitForever, $z0, $z1, $z2, $z3, $z4;
        java.lang.Throwable l13, $r4;
        java.lang.InterruptedException e, $r5;
        com.sleepycat.je.txn.LockManager$DeadlockChecker dc, lastDC#1, $r10;
        byte $b0, $b2;
        com.sleepycat.je.utilint.Pair $r0, $r8, $r11, $r14;
        java.lang.Boolean $r1, $r9, $r12, $r15;
        com.sleepycat.je.LockConflictException $r2;
        com.sleepycat.je.ThreadInterruptedException $r6;
        com.sleepycat.je.dbi.EnvironmentImpl $r7;

        this := @this: com.sleepycat.je.txn.LockManager;

        targetedVictim := @parameter0: com.sleepycat.je.txn.Locker;

        currentLocker := @parameter1: com.sleepycat.je.txn.Locker;

        lsn := @parameter2: java.lang.Long;

        type := @parameter3: com.sleepycat.je.txn.LockType;

        lastDC#1 := @parameter4: com.sleepycat.je.txn.LockManager$DeadlockChecker;

        timeout := @parameter5: long;

        startTime := @parameter6: long;

        database := @parameter7: com.sleepycat.je.dbi.DatabaseImpl;

        $b0 = timeout cmp 0L;

        if $b0 != 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        waitForever = $z0;

     label03:
        if waitForever != 0 goto label05;

        $l1 = staticinvoke <com.sleepycat.je.txn.LockManager: long timeRemain(long,long)>(timeout, startTime);

        $b2 = $l1 cmp 0L;

        if $b2 > 0 goto label05;

        $z1 = virtualinvoke this.<com.sleepycat.je.txn.LockManager: boolean validateOwnership(java.lang.Long,com.sleepycat.je.txn.Locker,com.sleepycat.je.txn.LockType,boolean,boolean,java.util.Set,java.util.List)>(lsn, currentLocker, type, 0, 1, null, null);

        if $z1 == 0 goto label04;

        $r0 = new com.sleepycat.je.utilint.Pair;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        specialinvoke $r0.<com.sleepycat.je.utilint.Pair: void <init>(java.lang.Object,java.lang.Object)>($r1, lastDC#1);

        return $r0;

     label04:
        $r2 = specialinvoke this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.LockConflictException makeDeadlockException(com.sleepycat.je.txn.LockManager$DeadlockChecker,com.sleepycat.je.txn.Locker,long,boolean,com.sleepycat.je.dbi.DatabaseImpl)>(lastDC#1, currentLocker, timeout, 0, database);

        throw $r2;

     label05:
        l12 = targetedVictim;

        entermonitor targetedVictim;

     label06:
        virtualinvoke targetedVictim.<java.lang.Object: void notify()>();

        exitmonitor l12;

     label07:
        goto label11;

     label08:
        $r4 := @caughtexception;

     label09:
        l13 = $r4;

        exitmonitor l12;

     label10:
        throw l13;

     label11:
        staticinvoke <java.lang.Thread: void sleep(long)>(1L);

     label12:
        goto label14;

     label13:
        $r5 := @caughtexception;

        e = $r5;

        $r6 = new com.sleepycat.je.ThreadInterruptedException;

        $r7 = this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        specialinvoke $r6.<com.sleepycat.je.ThreadInterruptedException: void <init>(com.sleepycat.je.dbi.EnvironmentImpl,java.lang.Throwable)>($r7, e);

        throw $r6;

     label14:
        $z2 = virtualinvoke this.<com.sleepycat.je.txn.LockManager: boolean isOwner(java.lang.Long,com.sleepycat.je.txn.Locker,com.sleepycat.je.txn.LockType)>(lsn, currentLocker, type);

        if $z2 == 0 goto label15;

        $r8 = new com.sleepycat.je.utilint.Pair;

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        specialinvoke $r8.<com.sleepycat.je.utilint.Pair: void <init>(java.lang.Object,java.lang.Object)>($r9, lastDC#1);

        return $r8;

     label15:
        $r10 = new com.sleepycat.je.txn.LockManager$DeadlockChecker;

        specialinvoke $r10.<com.sleepycat.je.txn.LockManager$DeadlockChecker: void <init>(com.sleepycat.je.txn.LockManager,com.sleepycat.je.txn.Locker,java.lang.Long,com.sleepycat.je.txn.LockType)>(this, currentLocker, lsn, type);

        dc = $r10;

        $z3 = virtualinvoke dc.<com.sleepycat.je.txn.LockManager$DeadlockChecker: boolean hasCycle()>();

        if $z3 == 0 goto label16;

        $z4 = virtualinvoke dc.<com.sleepycat.je.txn.LockManager$DeadlockChecker: boolean hasTrueDeadlock()>();

        if $z4 != 0 goto label17;

     label16:
        $r11 = new com.sleepycat.je.utilint.Pair;

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        specialinvoke $r11.<com.sleepycat.je.utilint.Pair: void <init>(java.lang.Object,java.lang.Object)>($r12, lastDC#1);

        return $r11;

     label17:
        lastDC#1 = dc;

        $r13 = virtualinvoke dc.<com.sleepycat.je.txn.LockManager$DeadlockChecker: com.sleepycat.je.txn.Locker chooseTargetedLocker()>();

        if $r13 == targetedVictim goto label18;

        $r14 = new com.sleepycat.je.utilint.Pair;

        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        specialinvoke $r14.<com.sleepycat.je.utilint.Pair: void <init>(java.lang.Object,java.lang.Object)>($r15, lastDC#1);

        return $r14;

     label18:
        goto label03;

        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.InterruptedException from label11 to label12 with label13;
    }

    private void finishLock(com.sleepycat.je.txn.Locker, java.lang.Long, com.sleepycat.je.txn.LockType, com.sleepycat.je.txn.LockGrantType)
    {
        com.sleepycat.je.txn.LockManager this;
        com.sleepycat.je.txn.Locker locker;
        java.lang.Long nid;
        com.sleepycat.je.txn.LockType type;
        com.sleepycat.je.txn.LockGrantType grant;
        boolean $z0, $z1;
        java.lang.AssertionError $r0;
        com.sleepycat.je.utilint.TestHook $r1, $r2;

        this := @this: com.sleepycat.je.txn.LockManager;

        locker := @parameter0: com.sleepycat.je.txn.Locker;

        nid := @parameter1: java.lang.Long;

        type := @parameter2: com.sleepycat.je.txn.LockType;

        grant := @parameter3: com.sleepycat.je.txn.LockGrantType;

        virtualinvoke locker.<com.sleepycat.je.txn.Locker: void clearWaitingFor()>();

        $z0 = <com.sleepycat.je.txn.LockManager: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <com.sleepycat.je.dbi.EnvironmentImpl: boolean maybeForceYield()>();

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        virtualinvoke locker.<com.sleepycat.je.txn.Locker: void addLock(java.lang.Long,com.sleepycat.je.txn.LockType,com.sleepycat.je.txn.LockGrantType)>(nid, type, grant);

        $r1 = <com.sleepycat.je.txn.LockManager: com.sleepycat.je.utilint.TestHook afterLockHook>;

        if $r1 == null goto label2;

        $r2 = <com.sleepycat.je.txn.LockManager: com.sleepycat.je.utilint.TestHook afterLockHook>;

        interfaceinvoke $r2.<com.sleepycat.je.utilint.TestHook: void doHook()>();

     label2:
        return;
    }

    static java.util.Map[] access$600(com.sleepycat.je.txn.LockManager)
    {
        com.sleepycat.je.txn.LockManager x0;
        java.util.Map[] $r0;

        x0 := @parameter0: com.sleepycat.je.txn.LockManager;

        $r0 = x0.<com.sleepycat.je.txn.LockManager: java.util.Map[] lockTables>;

        return $r0;
    }

    private com.sleepycat.je.LockConflictException makeDeadlockException(com.sleepycat.je.txn.LockManager$DeadlockChecker, com.sleepycat.je.txn.Locker, long, boolean, com.sleepycat.je.dbi.DatabaseImpl)
    {
        com.sleepycat.je.txn.LockManager this;
        com.sleepycat.je.txn.LockManager$DeadlockChecker dc;
        com.sleepycat.je.txn.Locker locker;
        long timeout;
        boolean isVictim;
        com.sleepycat.je.dbi.DatabaseImpl database;
        java.lang.StringBuilder msg, $r0, $r2, $r7, $r10, $r12, $r16;
        com.sleepycat.je.DeadlockException ex, $r19;
        java.lang.String $r11, $r20;
        byte $b0;
        java.util.Set $r21;
        long[] $r22, $r24;
        java.util.List $r23;

        this := @this: com.sleepycat.je.txn.LockManager;

        dc := @parameter0: com.sleepycat.je.txn.LockManager$DeadlockChecker;

        locker := @parameter1: com.sleepycat.je.txn.Locker;

        timeout := @parameter2: long;

        isVictim := @parameter3: boolean;

        database := @parameter4: com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        msg = $r0;

        virtualinvoke msg.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Deadlock was detected. ");

        if isVictim == 0 goto label1;

        $r2 = virtualinvoke msg.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Locker: \"");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(locker);

        virtualinvoke msg.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" was chosen randomly as the victim.\n");

        goto label2;

     label1:
        virtualinvoke msg.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to break deadlock using random victim ");

        virtualinvoke msg.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("selection within the timeout interval. ");

        $r7 = virtualinvoke msg.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current locker: \"");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(locker);

        virtualinvoke msg.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" must be aborted.\n");

     label2:
        if database == null goto label3;

        $r10 = virtualinvoke msg.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DB: ");

        $r11 = virtualinvoke database.<com.sleepycat.je.dbi.DatabaseImpl: java.lang.String getDebugName()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". ");

     label3:
        virtualinvoke msg.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Timeout: ");

        $b0 = timeout cmp 0L;

        if $b0 != 0 goto label4;

        virtualinvoke msg.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("none.\n");

        goto label5;

     label4:
        $r16 = virtualinvoke msg.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(timeout);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms.\n");

     label5:
        virtualinvoke msg.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(dc);

        $r19 = new com.sleepycat.je.DeadlockException;

        $r20 = virtualinvoke msg.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<com.sleepycat.je.DeadlockException: void <init>(com.sleepycat.je.txn.Locker,java.lang.String)>(locker, $r20);

        ex = $r19;

        $r21 = virtualinvoke dc.<com.sleepycat.je.txn.LockManager$DeadlockChecker: java.util.Set getOwnersForRootLock()>();

        $r22 = specialinvoke this.<com.sleepycat.je.txn.LockManager: long[] getTxnIds(java.util.Collection)>($r21);

        virtualinvoke ex.<com.sleepycat.je.LockConflictException: void setOwnerTxnIds(long[])>($r22);

        $r23 = virtualinvoke dc.<com.sleepycat.je.txn.LockManager$DeadlockChecker: java.util.List getWaitersForRootLock()>();

        $r24 = specialinvoke this.<com.sleepycat.je.txn.LockManager: long[] getTxnIds(java.util.Collection)>($r23);

        virtualinvoke ex.<com.sleepycat.je.LockConflictException: void setWaiterTxnIds(long[])>($r24);

        virtualinvoke ex.<com.sleepycat.je.LockConflictException: void setTimeoutMillis(long)>(timeout);

        return ex;
    }

    boolean isOwnerInternal(java.lang.Long, com.sleepycat.je.txn.Locker, com.sleepycat.je.txn.LockType, int)
    {
        com.sleepycat.je.txn.LockManager this;
        java.lang.Long lsn;
        com.sleepycat.je.txn.Locker locker;
        com.sleepycat.je.txn.LockType type;
        int lockTableIndex;
        java.util.Map lockTable;
        com.sleepycat.je.txn.Lock entry;
        java.util.Map[] $r0;
        java.lang.Object $r1;
        boolean $z0, $z1;

        this := @this: com.sleepycat.je.txn.LockManager;

        lsn := @parameter0: java.lang.Long;

        locker := @parameter1: com.sleepycat.je.txn.Locker;

        type := @parameter2: com.sleepycat.je.txn.LockType;

        lockTableIndex := @parameter3: int;

        $r0 = this.<com.sleepycat.je.txn.LockManager: java.util.Map[] lockTables>;

        lockTable = $r0[lockTableIndex];

        $r1 = interfaceinvoke lockTable.<java.util.Map: java.lang.Object get(java.lang.Object)>(lsn);

        entry = (com.sleepycat.je.txn.Lock) $r1;

        if entry == null goto label1;

        $z0 = interfaceinvoke entry.<com.sleepycat.je.txn.Lock: boolean isOwner(com.sleepycat.je.txn.Locker,com.sleepycat.je.txn.LockType)>(locker, type);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private long[] getTxnIds(java.util.Collection)
    {
        com.sleepycat.je.txn.LockManager this;
        java.util.Collection c;
        long[] 'ret';
        java.util.Iterator iter;
        com.sleepycat.je.txn.LockInfo info;
        int $i0, $i1, i#7;
        boolean $z0;
        java.lang.Object $r0;
        com.sleepycat.je.txn.Locker $r1;
        long $l2;

        this := @this: com.sleepycat.je.txn.LockManager;

        c := @parameter0: java.util.Collection;

        $i1 = interfaceinvoke c.<java.util.Collection: int size()>();

        'ret' = newarray (long)[$i1];

        iter = interfaceinvoke c.<java.util.Collection: java.util.Iterator iterator()>();

        i#7 = 0;

     label1:
        $z0 = interfaceinvoke iter.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r0 = interfaceinvoke iter.<java.util.Iterator: java.lang.Object next()>();

        info = (com.sleepycat.je.txn.LockInfo) $r0;

        $i0 = i#7;

        i#7 = i#7 + 1;

        $r1 = virtualinvoke info.<com.sleepycat.je.txn.LockInfo: com.sleepycat.je.txn.Locker getLocker()>();

        $l2 = virtualinvoke $r1.<com.sleepycat.je.txn.Locker: long getId()>();

        'ret'[$i0] = $l2;

        goto label1;

     label2:
        return 'ret';
    }

    boolean validateOwnershipInternal(java.lang.Long, com.sleepycat.je.txn.Locker, com.sleepycat.je.txn.LockType, boolean, boolean, int, java.util.Set, java.util.List)
    {
        com.sleepycat.je.txn.LockManager this;
        java.lang.Long lsn;
        com.sleepycat.je.txn.Locker locker;
        com.sleepycat.je.txn.LockType type;
        boolean getOwnersAndWaiters, flushFromWaiters, $z0;
        int lockTableIndex;
        java.util.Set owners, localOwners;
        java.util.List waiters, localWaiters;
        com.sleepycat.je.txn.Lock entry;
        java.util.Map[] $r0;
        java.util.Map $r1;
        java.lang.Object $r2;
        com.sleepycat.je.dbi.MemoryBudget $r3;

        this := @this: com.sleepycat.je.txn.LockManager;

        lsn := @parameter0: java.lang.Long;

        locker := @parameter1: com.sleepycat.je.txn.Locker;

        type := @parameter2: com.sleepycat.je.txn.LockType;

        getOwnersAndWaiters := @parameter3: boolean;

        flushFromWaiters := @parameter4: boolean;

        lockTableIndex := @parameter5: int;

        owners := @parameter6: java.util.Set;

        waiters := @parameter7: java.util.List;

        $z0 = virtualinvoke this.<com.sleepycat.je.txn.LockManager: boolean isOwnerInternal(java.lang.Long,com.sleepycat.je.txn.Locker,com.sleepycat.je.txn.LockType,int)>(lsn, locker, type, lockTableIndex);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        if getOwnersAndWaiters == 0 goto label3;

        if owners == null goto label2;

        localOwners = virtualinvoke this.<com.sleepycat.je.txn.LockManager: java.util.Set getOwnersInternal(java.lang.Long,int)>(lsn, lockTableIndex);

        if localOwners == null goto label2;

        interfaceinvoke owners.<java.util.Set: boolean addAll(java.util.Collection)>(localOwners);

     label2:
        if waiters == null goto label3;

        localWaiters = virtualinvoke this.<com.sleepycat.je.txn.LockManager: java.util.List getWaitersInternal(java.lang.Long,int)>(lsn, lockTableIndex);

        if localWaiters == null goto label3;

        interfaceinvoke waiters.<java.util.List: boolean addAll(java.util.Collection)>(localWaiters);

     label3:
        if flushFromWaiters == 0 goto label4;

        $r0 = this.<com.sleepycat.je.txn.LockManager: java.util.Map[] lockTables>;

        $r1 = $r0[lockTableIndex];

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(lsn);

        entry = (com.sleepycat.je.txn.Lock) $r2;

        if entry == null goto label4;

        $r3 = this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.dbi.MemoryBudget memoryBudget>;

        interfaceinvoke entry.<com.sleepycat.je.txn.Lock: void flushWaiter(com.sleepycat.je.txn.Locker,com.sleepycat.je.dbi.MemoryBudget,int)>(locker, $r3, lockTableIndex);

     label4:
        return 0;
    }

    java.util.Set getOwnersInternal(java.lang.Long, int)
    {
        com.sleepycat.je.txn.LockManager this;
        java.lang.Long lsn;
        int lockTableIndex;
        java.util.Map lockTable;
        com.sleepycat.je.txn.Lock useLock;
        java.util.Map[] $r0;
        java.lang.Object $r1;
        java.util.Set $r2;

        this := @this: com.sleepycat.je.txn.LockManager;

        lsn := @parameter0: java.lang.Long;

        lockTableIndex := @parameter1: int;

        $r0 = this.<com.sleepycat.je.txn.LockManager: java.util.Map[] lockTables>;

        lockTable = $r0[lockTableIndex];

        $r1 = interfaceinvoke lockTable.<java.util.Map: java.lang.Object get(java.lang.Object)>(lsn);

        useLock = (com.sleepycat.je.txn.Lock) $r1;

        if useLock != null goto label1;

        return null;

     label1:
        $r2 = interfaceinvoke useLock.<com.sleepycat.je.txn.Lock: java.util.Set getOwnersClone()>();

        return $r2;
    }

    java.util.List getWaitersInternal(java.lang.Long, int)
    {
        com.sleepycat.je.txn.LockManager this;
        java.lang.Long lsn;
        int lockTableIndex;
        java.util.Map lockTable;
        com.sleepycat.je.txn.Lock useLock;
        java.util.Map[] $r0;
        java.lang.Object $r1;
        java.util.List $r2;

        this := @this: com.sleepycat.je.txn.LockManager;

        lsn := @parameter0: java.lang.Long;

        lockTableIndex := @parameter1: int;

        $r0 = this.<com.sleepycat.je.txn.LockManager: java.util.Map[] lockTables>;

        lockTable = $r0[lockTableIndex];

        $r1 = interfaceinvoke lockTable.<java.util.Map: java.lang.Object get(java.lang.Object)>(lsn);

        useLock = (com.sleepycat.je.txn.Lock) $r1;

        if useLock != null goto label1;

        return null;

     label1:
        $r2 = interfaceinvoke useLock.<com.sleepycat.je.txn.Lock: java.util.List getWaitersListClone()>();

        return $r2;
    }

    private com.sleepycat.je.txn.LockManager$DeadlockResult checkAndHandleDeadlock(com.sleepycat.je.txn.Locker, java.lang.Long, com.sleepycat.je.txn.LockType, long, com.sleepycat.je.dbi.DatabaseImpl)
    {
        com.sleepycat.je.txn.LockManager this;
        com.sleepycat.je.txn.Locker locker, targetedVictim#6;
        java.lang.Long lsn;
        com.sleepycat.je.txn.LockType type;
        long timeout;
        com.sleepycat.je.dbi.DatabaseImpl database;
        com.sleepycat.je.txn.LockManager$DeadlockChecker dc, $r0;
        boolean isOwner#2, hasTrueDeadlock#4, $z0, $z1, $z2, $z3, $z4, $z5;
        int round#8;
        com.sleepycat.je.LockConflictException $r1;
        com.sleepycat.je.txn.LockManager$DeadlockResult $r2;

        this := @this: com.sleepycat.je.txn.LockManager;

        locker := @parameter0: com.sleepycat.je.txn.Locker;

        lsn := @parameter1: java.lang.Long;

        type := @parameter2: com.sleepycat.je.txn.LockType;

        timeout := @parameter3: long;

        database := @parameter4: com.sleepycat.je.dbi.DatabaseImpl;

        isOwner#2 = 0;

        hasTrueDeadlock#4 = 0;

        targetedVictim#6 = null;

        round#8 = 0;

     label1:
        $r0 = new com.sleepycat.je.txn.LockManager$DeadlockChecker;

        specialinvoke $r0.<com.sleepycat.je.txn.LockManager$DeadlockChecker: void <init>(com.sleepycat.je.txn.LockManager,com.sleepycat.je.txn.Locker,java.lang.Long,com.sleepycat.je.txn.LockType)>(this, locker, lsn, type);

        dc = $r0;

        $z0 = virtualinvoke dc.<com.sleepycat.je.txn.LockManager$DeadlockChecker: boolean hasCycle()>();

        if $z0 == 0 goto label7;

        $z1 = virtualinvoke dc.<com.sleepycat.je.txn.LockManager$DeadlockChecker: boolean hasTrueDeadlock()>();

        if $z1 == 0 goto label5;

        targetedVictim#6 = virtualinvoke dc.<com.sleepycat.je.txn.LockManager$DeadlockChecker: com.sleepycat.je.txn.Locker chooseTargetedLocker()>();

        if targetedVictim#6 == locker goto label3;

        $z2 = virtualinvoke this.<com.sleepycat.je.txn.LockManager: boolean isOwner(java.lang.Long,com.sleepycat.je.txn.Locker,com.sleepycat.je.txn.LockType)>(lsn, locker, type);

        if $z2 == 0 goto label2;

        isOwner#2 = 1;

        targetedVictim#6 = null;

        goto label9;

     label2:
        hasTrueDeadlock#4 = 1;

        goto label9;

     label3:
        $z3 = virtualinvoke this.<com.sleepycat.je.txn.LockManager: boolean validateOwnership(java.lang.Long,com.sleepycat.je.txn.Locker,com.sleepycat.je.txn.LockType,boolean,boolean,java.util.Set,java.util.List)>(lsn, locker, type, 0, 1, null, null);

        if $z3 == 0 goto label4;

        isOwner#2 = 1;

        targetedVictim#6 = null;

        goto label9;

     label4:
        $r1 = specialinvoke this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.LockConflictException makeDeadlockException(com.sleepycat.je.txn.LockManager$DeadlockChecker,com.sleepycat.je.txn.Locker,long,boolean,com.sleepycat.je.dbi.DatabaseImpl)>(dc, locker, timeout, 1, database);

        throw $r1;

     label5:
        $z4 = virtualinvoke this.<com.sleepycat.je.txn.LockManager: boolean isOwner(java.lang.Long,com.sleepycat.je.txn.Locker,com.sleepycat.je.txn.LockType)>(lsn, locker, type);

        if $z4 == 0 goto label6;

        isOwner#2 = 1;

        goto label9;

     label6:
        if round#8 < 10 goto label8;

        goto label9;

     label7:
        $z5 = virtualinvoke this.<com.sleepycat.je.txn.LockManager: boolean isOwner(java.lang.Long,com.sleepycat.je.txn.Locker,com.sleepycat.je.txn.LockType)>(lsn, locker, type);

        if $z5 == 0 goto label9;

        isOwner#2 = 1;

        goto label9;

     label8:
        round#8 = round#8 + 1;

        goto label1;

     label9:
        $r2 = new com.sleepycat.je.txn.LockManager$DeadlockResult;

        specialinvoke $r2.<com.sleepycat.je.txn.LockManager$DeadlockResult: void <init>(boolean,boolean,com.sleepycat.je.txn.Locker,com.sleepycat.je.txn.LockManager$DeadlockChecker)>(isOwner#2, hasTrueDeadlock#4, targetedVictim#6, dc);

        return $r2;
    }

    private com.sleepycat.je.LockConflictException makeTimeoutException(boolean, com.sleepycat.je.txn.Locker, long, com.sleepycat.je.txn.LockType, com.sleepycat.je.txn.LockGrantType, com.sleepycat.je.txn.Lock, long, long, long, com.sleepycat.je.dbi.DatabaseImpl, java.util.Set, java.util.List)
    {
        com.sleepycat.je.txn.LockManager this;
        boolean isLockNotTxnTimeout;
        com.sleepycat.je.txn.Locker locker;
        long lsn, timeout, start, now;
        com.sleepycat.je.txn.LockType type;
        com.sleepycat.je.txn.LockGrantType grantType;
        com.sleepycat.je.txn.Lock useLock;
        com.sleepycat.je.dbi.DatabaseImpl database;
        java.util.Set owners, $r3;
        java.util.List waiters, $r5;
        com.sleepycat.je.txn.LockManager$TimeoutInfo info;
        java.lang.Object ex, $r0;
        java.lang.String $r1, $r2;
        long[] $r4, $r6;
        com.sleepycat.je.LockTimeoutException tmp$205769822;
        com.sleepycat.je.TransactionTimeoutException tmp$632490118;
        com.sleepycat.je.LockConflictException tmp$1082309405, tmp$2117464723, tmp$572006958, tmp$1308305218;

        this := @this: com.sleepycat.je.txn.LockManager;

        isLockNotTxnTimeout := @parameter0: boolean;

        locker := @parameter1: com.sleepycat.je.txn.Locker;

        lsn := @parameter2: long;

        type := @parameter3: com.sleepycat.je.txn.LockType;

        grantType := @parameter4: com.sleepycat.je.txn.LockGrantType;

        useLock := @parameter5: com.sleepycat.je.txn.Lock;

        timeout := @parameter6: long;

        start := @parameter7: long;

        now := @parameter8: long;

        database := @parameter9: com.sleepycat.je.dbi.DatabaseImpl;

        owners := @parameter10: java.util.Set;

        waiters := @parameter11: java.util.List;

        info = virtualinvoke this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.txn.LockManager$TimeoutInfo getTimeoutInfo(boolean,com.sleepycat.je.txn.Locker,long,com.sleepycat.je.txn.LockType,com.sleepycat.je.txn.LockGrantType,com.sleepycat.je.txn.Lock,long,long,long,com.sleepycat.je.dbi.DatabaseImpl,java.util.Set,java.util.List)>(isLockNotTxnTimeout, locker, lsn, type, grantType, useLock, timeout, start, now, database, owners, waiters);

        if isLockNotTxnTimeout == 0 goto label1;

        tmp$205769822 = new com.sleepycat.je.LockTimeoutException;

        $r0 = tmp$205769822;

        $r1 = info.<com.sleepycat.je.txn.LockManager$TimeoutInfo: java.lang.String message>;

        specialinvoke tmp$205769822.<com.sleepycat.je.LockTimeoutException: void <init>(com.sleepycat.je.txn.Locker,java.lang.String)>(locker, $r1);

        goto label2;

     label1:
        tmp$632490118 = new com.sleepycat.je.TransactionTimeoutException;

        $r0 = tmp$632490118;

        $r2 = info.<com.sleepycat.je.txn.LockManager$TimeoutInfo: java.lang.String message>;

        specialinvoke tmp$632490118.<com.sleepycat.je.TransactionTimeoutException: void <init>(com.sleepycat.je.txn.Locker,java.lang.String)>(locker, $r2);

     label2:
        ex = $r0;

        $r3 = info.<com.sleepycat.je.txn.LockManager$TimeoutInfo: java.util.Set owners>;

        $r4 = specialinvoke this.<com.sleepycat.je.txn.LockManager: long[] getTxnIds(java.util.Collection)>($r3);

        tmp$1082309405 = (com.sleepycat.je.LockConflictException) ex;

        virtualinvoke tmp$1082309405.<com.sleepycat.je.LockConflictException: void setOwnerTxnIds(long[])>($r4);

        $r5 = info.<com.sleepycat.je.txn.LockManager$TimeoutInfo: java.util.List waiters>;

        $r6 = specialinvoke this.<com.sleepycat.je.txn.LockManager: long[] getTxnIds(java.util.Collection)>($r5);

        tmp$2117464723 = (com.sleepycat.je.LockConflictException) ex;

        virtualinvoke tmp$2117464723.<com.sleepycat.je.LockConflictException: void setWaiterTxnIds(long[])>($r6);

        tmp$572006958 = (com.sleepycat.je.LockConflictException) ex;

        virtualinvoke tmp$572006958.<com.sleepycat.je.LockConflictException: void setTimeoutMillis(long)>(timeout);

        tmp$1308305218 = (com.sleepycat.je.LockConflictException) ex;

        return tmp$1308305218;
    }

    com.sleepycat.je.txn.LockManager$TimeoutInfo getTimeoutInfoInternal(boolean, com.sleepycat.je.txn.Locker, long, com.sleepycat.je.txn.LockType, com.sleepycat.je.txn.LockGrantType, com.sleepycat.je.txn.Lock, long, long, long, com.sleepycat.je.dbi.DatabaseImpl, java.util.Set, java.util.List)
    {
        com.sleepycat.je.txn.LockManager this;
        boolean isLockNotTxnTimeout, $z0, success#10;
        com.sleepycat.je.txn.Locker locker;
        long lsn, timeout, start, now;
        com.sleepycat.je.txn.LockType type;
        com.sleepycat.je.txn.LockGrantType grantType;
        com.sleepycat.je.txn.Lock useLock;
        com.sleepycat.je.dbi.DatabaseImpl database;
        java.util.Set owners;
        java.util.List waiters;
        java.lang.StringBuilder sb, sb, $r1, $r6, $r7, $r8, $r11, $r15, $r18, $r21, $r23, $r26, $r28, $r30, $r32, $r34, $r36, $r38, $r39;
        java.util.ConcurrentModificationException l20, $r4;
        java.io.PrintStream $r0, $r2, $r5, $r10;
        int i#5, $i0, j#12, $i1;
        java.lang.String $r3, $r9, $r13, $r19, $r24, $r42;
        com.sleepycat.je.txn.LockManager$TimeoutInfo $r41;

        this := @this: com.sleepycat.je.txn.LockManager;

        isLockNotTxnTimeout := @parameter0: boolean;

        locker := @parameter1: com.sleepycat.je.txn.Locker;

        lsn := @parameter2: long;

        type := @parameter3: com.sleepycat.je.txn.LockType;

        grantType := @parameter4: com.sleepycat.je.txn.LockGrantType;

        useLock := @parameter5: com.sleepycat.je.txn.Lock;

        timeout := @parameter6: long;

        start := @parameter7: long;

        now := @parameter8: long;

        database := @parameter9: com.sleepycat.je.dbi.DatabaseImpl;

        owners := @parameter10: java.util.Set;

        waiters := @parameter11: java.util.List;

        $z0 = <com.sleepycat.je.txn.LockManager: boolean lockTableDump>;

        if $z0 == 0 goto label09;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("++++++++++ begin lock table dump ++++++++++");

        i#5 = 0;

     label01:
        $i0 = this.<com.sleepycat.je.txn.LockManager: int nLockTables>;

        if i#5 >= $i0 goto label08;

        success#10 = 0;

        j#12 = 0;

     label02:
        if j#12 >= 3 goto label06;

     label03:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        sb = $r1;

        specialinvoke this.<com.sleepycat.je.txn.LockManager: void dumpToStringNoLatch(java.lang.StringBuilder,int)>(sb, i#5);

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r3 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r3);

        success#10 = 1;

     label04:
        goto label06;

     label05:
        $r4 := @caughtexception;

        l20 = $r4;

        j#12 = j#12 + 1;

        goto label02;

     label06:
        if success#10 != 0 goto label07;

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t dump locktable ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i#5);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r9);

     label07:
        i#5 = i#5 + 1;

        goto label01;

     label08:
        $r10 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("++++++++++ end lock table dump ++++++++++");

     label09:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        sb = $r11;

        if isLockNotTxnTimeout == 0 goto label10;

        $r13 = "Lock";

        goto label11;

     label10:
        $r13 = "Transaction";

     label11:
        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" expired. Locker ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(locker);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": waited for lock");

        if database == null goto label12;

        $r18 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on database=");

        $r19 = virtualinvoke database.<com.sleepycat.je.dbi.DatabaseImpl: java.lang.String getDebugName()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

     label12:
        $r21 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" LockAddr:");

        $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(useLock);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r23 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" LSN=");

        $r24 = staticinvoke <com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(lsn);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" type=");

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(type);

        $r28 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" grant=");

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(grantType);

        $r30 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" timeoutMillis=");

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(timeout);

        $r32 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" startTime=");

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(start);

        $r34 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" endTime=");

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(now);

        $r36 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nOwners: ");

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(owners);

        $r38 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nWaiters: ");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(waiters);

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r41 = new com.sleepycat.je.txn.LockManager$TimeoutInfo;

        $r42 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r41.<com.sleepycat.je.txn.LockManager$TimeoutInfo: void <init>(java.lang.String,java.util.Set,java.util.List)>($r42, owners, waiters);

        return $r41;

        catch java.util.ConcurrentModificationException from label03 to label04 with label05;
    }

    com.sleepycat.je.txn.LockAttemptResult stealLockInternal(java.lang.Long, com.sleepycat.je.txn.Locker, com.sleepycat.je.txn.LockType, int) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.txn.LockManager this;
        java.lang.Long lsn;
        com.sleepycat.je.txn.Locker locker;
        com.sleepycat.je.txn.LockType lockType;
        int lockTableIndex;
        com.sleepycat.je.txn.Lock entry;
        java.util.Map[] $r0;
        java.util.Map $r1;
        java.lang.Object $r2;
        boolean $z0;
        java.lang.AssertionError $r3;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r9, $r10;
        long $l0, $l1;
        java.lang.String $r6, $r11;
        com.sleepycat.je.dbi.MemoryBudget $r12, $r13;
        com.sleepycat.je.txn.LockAttemptResult $r14;

        this := @this: com.sleepycat.je.txn.LockManager;

        lsn := @parameter0: java.lang.Long;

        locker := @parameter1: com.sleepycat.je.txn.Locker;

        lockType := @parameter2: com.sleepycat.je.txn.LockType;

        lockTableIndex := @parameter3: int;

        $r0 = this.<com.sleepycat.je.txn.LockManager: java.util.Map[] lockTables>;

        $r1 = $r0[lockTableIndex];

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(lsn);

        entry = (com.sleepycat.je.txn.Lock) $r2;

        $z0 = <com.sleepycat.je.txn.LockManager: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if entry != null goto label1;

        $r3 = new java.lang.AssertionError;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Lock ");

        $l0 = virtualinvoke lsn.<java.lang.Long: long longValue()>();

        $r6 = staticinvoke <com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>($l0);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for txn ");

        $l1 = virtualinvoke locker.<com.sleepycat.je.txn.Locker: long getId()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>($r11);

        throw $r3;

     label1:
        $r12 = this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.dbi.MemoryBudget memoryBudget>;

        interfaceinvoke entry.<com.sleepycat.je.txn.Lock: void flushWaiter(com.sleepycat.je.txn.Locker,com.sleepycat.je.dbi.MemoryBudget,int)>(locker, $r12, lockTableIndex);

        $r13 = this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.dbi.MemoryBudget memoryBudget>;

        interfaceinvoke entry.<com.sleepycat.je.txn.Lock: void stealLock(com.sleepycat.je.txn.Locker,com.sleepycat.je.dbi.MemoryBudget,int)>(locker, $r13, lockTableIndex);

        $r14 = virtualinvoke this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.txn.LockAttemptResult attemptLockInternal(java.lang.Long,com.sleepycat.je.txn.Locker,com.sleepycat.je.txn.LockType,boolean,boolean,int)>(lsn, locker, lockType, 0, 0, lockTableIndex);

        return $r14;
    }

    com.sleepycat.je.txn.LockAttemptResult attemptLockInternal(java.lang.Long, com.sleepycat.je.txn.Locker, com.sleepycat.je.txn.LockType, boolean, boolean, int) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.txn.LockManager this;
        java.lang.Long lsn;
        com.sleepycat.je.txn.Locker locker;
        com.sleepycat.je.txn.LockType type;
        boolean nonBlockingRequest, jumpAheadOfWaiters, success#47;
        int lockTableIndex;
        java.util.Map lockTable;
        com.sleepycat.je.txn.LockAttemptResult lar, $r15;
        com.sleepycat.je.txn.LockGrantType lockGrant, $r10, $r11, $r12, $r13;
        com.sleepycat.je.utilint.LongStat $r0, $r14;
        java.util.Map[] $r1;
        java.lang.Object $r2;
        com.sleepycat.je.txn.Lock useLock#11, $r7;
        com.sleepycat.je.txn.ThinLockImpl $r3;
        com.sleepycat.je.dbi.MemoryBudget $r5, $r6, $r9;
        long $l0, $l1;

        this := @this: com.sleepycat.je.txn.LockManager;

        lsn := @parameter0: java.lang.Long;

        locker := @parameter1: com.sleepycat.je.txn.Locker;

        type := @parameter2: com.sleepycat.je.txn.LockType;

        nonBlockingRequest := @parameter3: boolean;

        jumpAheadOfWaiters := @parameter4: boolean;

        lockTableIndex := @parameter5: int;

        $r0 = this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.utilint.LongStat nRequests>;

        virtualinvoke $r0.<com.sleepycat.je.utilint.LongStat: void increment()>();

        $r1 = this.<com.sleepycat.je.txn.LockManager: java.util.Map[] lockTables>;

        lockTable = $r1[lockTableIndex];

        $r2 = interfaceinvoke lockTable.<java.util.Map: java.lang.Object get(java.lang.Object)>(lsn);

        useLock#11 = (com.sleepycat.je.txn.Lock) $r2;

        if useLock#11 != null goto label1;

        $r3 = new com.sleepycat.je.txn.ThinLockImpl;

        specialinvoke $r3.<com.sleepycat.je.txn.ThinLockImpl: void <init>()>();

        useLock#11 = $r3;

        interfaceinvoke lockTable.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(lsn, useLock#11);

        $r5 = this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.dbi.MemoryBudget memoryBudget>;

        $l0 = <com.sleepycat.je.txn.LockManager: long TOTAL_THINLOCKIMPL_OVERHEAD>;

        virtualinvoke $r5.<com.sleepycat.je.dbi.MemoryBudget: void updateLockMemoryUsage(long,int)>($l0, lockTableIndex);

     label1:
        $r6 = this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.dbi.MemoryBudget memoryBudget>;

        lar = interfaceinvoke useLock#11.<com.sleepycat.je.txn.Lock: com.sleepycat.je.txn.LockAttemptResult lock(com.sleepycat.je.txn.LockType,com.sleepycat.je.txn.Locker,boolean,boolean,com.sleepycat.je.dbi.MemoryBudget,int)>(type, locker, nonBlockingRequest, jumpAheadOfWaiters, $r6, lockTableIndex);

        $r7 = lar.<com.sleepycat.je.txn.LockAttemptResult: com.sleepycat.je.txn.Lock useLock>;

        if $r7 == useLock#11 goto label2;

        useLock#11 = lar.<com.sleepycat.je.txn.LockAttemptResult: com.sleepycat.je.txn.Lock useLock>;

        interfaceinvoke lockTable.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(lsn, useLock#11);

        $r9 = this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.dbi.MemoryBudget memoryBudget>;

        $l1 = <com.sleepycat.je.txn.LockManager: long THINLOCK_MUTATE_OVERHEAD>;

        virtualinvoke $r9.<com.sleepycat.je.dbi.MemoryBudget: void updateLockMemoryUsage(long,int)>($l1, lockTableIndex);

     label2:
        lockGrant = lar.<com.sleepycat.je.txn.LockAttemptResult: com.sleepycat.je.txn.LockGrantType lockGrant>;

        success#47 = 0;

        $r10 = <com.sleepycat.je.txn.LockGrantType: com.sleepycat.je.txn.LockGrantType NEW>;

        if lockGrant == $r10 goto label3;

        $r11 = <com.sleepycat.je.txn.LockGrantType: com.sleepycat.je.txn.LockGrantType PROMOTION>;

        if lockGrant != $r11 goto label4;

     label3:
        virtualinvoke locker.<com.sleepycat.je.txn.Locker: void addLock(java.lang.Long,com.sleepycat.je.txn.LockType,com.sleepycat.je.txn.LockGrantType)>(lsn, type, lockGrant);

        success#47 = 1;

        goto label7;

     label4:
        $r12 = <com.sleepycat.je.txn.LockGrantType: com.sleepycat.je.txn.LockGrantType EXISTING>;

        if lockGrant != $r12 goto label5;

        success#47 = 1;

        goto label7;

     label5:
        $r13 = <com.sleepycat.je.txn.LockGrantType: com.sleepycat.je.txn.LockGrantType DENIED>;

        if lockGrant != $r13 goto label6;

        goto label7;

     label6:
        $r14 = this.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.utilint.LongStat nWaits>;

        virtualinvoke $r14.<com.sleepycat.je.utilint.LongStat: void increment()>();

     label7:
        $r15 = new com.sleepycat.je.txn.LockAttemptResult;

        specialinvoke $r15.<com.sleepycat.je.txn.LockAttemptResult: void <init>(com.sleepycat.je.txn.Lock,com.sleepycat.je.txn.LockGrantType,boolean)>(useLock#11, lockGrant, success#47);

        return $r15;
    }

    java.util.Iterator getThreadLockers(java.lang.Thread)
    {
        com.sleepycat.je.txn.LockManager this;
        java.lang.Thread thread;
        com.sleepycat.je.utilint.TinyHashSet set;
        java.util.Map $r0, $r3;
        java.util.List $r1, $r5;
        java.util.Iterator $r2, $r6, $r7;
        java.lang.Object $r4;

        this := @this: com.sleepycat.je.txn.LockManager;

        thread := @parameter0: java.lang.Thread;

        $r0 = this.<com.sleepycat.je.txn.LockManager: java.util.Map threadLockers>;

        if $r0 != null goto label1;

        $r1 = <com.sleepycat.je.txn.LockManager: java.util.List EMPTY_THREAD_LOCKERS>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        return $r2;

     label1:
        $r3 = this.<com.sleepycat.je.txn.LockManager: java.util.Map threadLockers>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(thread);

        set = (com.sleepycat.je.utilint.TinyHashSet) $r4;

        if set != null goto label2;

        $r5 = <com.sleepycat.je.txn.LockManager: java.util.List EMPTY_THREAD_LOCKERS>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

        return $r6;

     label2:
        $r7 = virtualinvoke set.<com.sleepycat.je.utilint.TinyHashSet: java.util.Iterator iterator()>();

        return $r7;
    }

    void demoteInternal(long, com.sleepycat.je.txn.Locker, int)
    {
        com.sleepycat.je.txn.LockManager this;
        long lsn;
        com.sleepycat.je.txn.Locker locker;
        int lockTableIndex;
        java.util.Map lockTable;
        com.sleepycat.je.txn.Lock useLock;
        java.util.Map[] $r0;
        java.lang.Long $r1;
        java.lang.Object $r2;

        this := @this: com.sleepycat.je.txn.LockManager;

        lsn := @parameter0: long;

        locker := @parameter1: com.sleepycat.je.txn.Locker;

        lockTableIndex := @parameter2: int;

        $r0 = this.<com.sleepycat.je.txn.LockManager: java.util.Map[] lockTables>;

        lockTable = $r0[lockTableIndex];

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(lsn);

        $r2 = interfaceinvoke lockTable.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        useLock = (com.sleepycat.je.txn.Lock) $r2;

        if useLock == null goto label1;

        interfaceinvoke useLock.<com.sleepycat.je.txn.Lock: void demote(com.sleepycat.je.txn.Locker)>(locker);

        virtualinvoke locker.<com.sleepycat.je.txn.Locker: void moveWriteToReadLock(long,com.sleepycat.je.txn.Lock)>(lsn, useLock);

     label1:
        return;
    }

    void registerThreadLocker(com.sleepycat.je.txn.ThreadLocker)
    {
        com.sleepycat.je.txn.LockManager this;
        com.sleepycat.je.txn.ThreadLocker locker;
        java.lang.Thread thread;
        com.sleepycat.je.utilint.TinyHashSet set, $r0;
        boolean added, $z0;
        java.util.Map $r1, $r2, $r5;
        java.lang.Object $r3;
        java.lang.AssertionError $r4;

        this := @this: com.sleepycat.je.txn.LockManager;

        locker := @parameter0: com.sleepycat.je.txn.ThreadLocker;

        $r1 = this.<com.sleepycat.je.txn.LockManager: java.util.Map threadLockers>;

        if $r1 != null goto label1;

        return;

     label1:
        thread = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r2 = this.<com.sleepycat.je.txn.LockManager: java.util.Map threadLockers>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(thread);

        set = (com.sleepycat.je.utilint.TinyHashSet) $r3;

        if set == null goto label3;

        added = virtualinvoke set.<com.sleepycat.je.utilint.TinyHashSet: boolean add(java.lang.Object)>(locker);

        $z0 = <com.sleepycat.je.txn.LockManager: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if added != 0 goto label2;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        goto label4;

     label3:
        $r5 = this.<com.sleepycat.je.txn.LockManager: java.util.Map threadLockers>;

        $r0 = new com.sleepycat.je.utilint.TinyHashSet;

        specialinvoke $r0.<com.sleepycat.je.utilint.TinyHashSet: void <init>(java.lang.Object)>(locker);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(thread, $r0);

     label4:
        return;
    }

    boolean ownsOrSharesLockInternal(com.sleepycat.je.txn.Locker, java.lang.Long, int)
    {
        com.sleepycat.je.txn.LockManager this;
        com.sleepycat.je.txn.Locker locker, owner;
        java.lang.Long lsn;
        int lockTableIndex;
        java.util.Map lockTable;
        com.sleepycat.je.txn.Lock useLock;
        java.util.Iterator l6;
        com.sleepycat.je.txn.LockInfo info;
        java.util.Map[] $r0;
        java.lang.Object $r1, $r3;
        java.util.Set $r2;
        boolean $z0, $z1, $z2;

        this := @this: com.sleepycat.je.txn.LockManager;

        locker := @parameter0: com.sleepycat.je.txn.Locker;

        lsn := @parameter1: java.lang.Long;

        lockTableIndex := @parameter2: int;

        $r0 = this.<com.sleepycat.je.txn.LockManager: java.util.Map[] lockTables>;

        lockTable = $r0[lockTableIndex];

        $r1 = interfaceinvoke lockTable.<java.util.Map: java.lang.Object get(java.lang.Object)>(lsn);

        useLock = (com.sleepycat.je.txn.Lock) $r1;

        if useLock != null goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke this.<com.sleepycat.je.txn.LockManager: java.util.Set getOwnersInternal(java.lang.Long,int)>(lsn, lockTableIndex);

        l6 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>();

        info = (com.sleepycat.je.txn.LockInfo) $r3;

        owner = virtualinvoke info.<com.sleepycat.je.txn.LockInfo: com.sleepycat.je.txn.Locker getLocker()>();

        if owner == locker goto label3;

        $z1 = virtualinvoke owner.<com.sleepycat.je.txn.Locker: boolean sharesLocksWith(com.sleepycat.je.txn.Locker)>(locker);

        if $z1 != 0 goto label3;

        $z2 = virtualinvoke locker.<com.sleepycat.je.txn.Locker: boolean sharesLocksWith(com.sleepycat.je.txn.Locker)>(owner);

        if $z2 == 0 goto label4;

     label3:
        return 1;

     label4:
        goto label2;

     label5:
        return 0;
    }


