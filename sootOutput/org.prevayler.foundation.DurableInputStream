    public void <init>(java.io.File, org.prevayler.foundation.monitor.Monitor) throws java.io.IOException
    {
        org.prevayler.foundation.DurableInputStream this;
        java.io.File file;
        org.prevayler.foundation.monitor.Monitor monitor;
        java.io.FileInputStream $r0;
        java.io.BufferedInputStream $r1;

        this := @this: org.prevayler.foundation.DurableInputStream;

        file := @parameter0: java.io.File;

        monitor := @parameter1: org.prevayler.foundation.monitor.Monitor;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<org.prevayler.foundation.DurableInputStream: boolean _EOF> = 0;

        this.<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.monitor.Monitor _monitor> = monitor;

        this.<org.prevayler.foundation.DurableInputStream: java.io.File _file> = file;

        $r1 = new java.io.BufferedInputStream;

        $r0 = new java.io.FileInputStream;

        specialinvoke $r0.<java.io.FileInputStream: void <init>(java.io.File)>(file);

        specialinvoke $r1.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r0);

        this.<org.prevayler.foundation.DurableInputStream: java.io.InputStream _fileStream> = $r1;

        return;
    }

    public org.prevayler.foundation.Chunk readChunk() throws java.io.IOException
    {
        org.prevayler.foundation.DurableInputStream this;
        org.prevayler.foundation.Chunk chunk;
        java.io.EOFException l1, $r0, $r3, $r8;
        java.io.ObjectStreamException scx, $r4;
        java.io.UTFDataFormatException utfx, $r5;
        java.lang.RuntimeException rx, $r6;
        boolean $z0;
        java.io.InputStream $r1, $r7;

        this := @this: org.prevayler.foundation.DurableInputStream;

        $z0 = this.<org.prevayler.foundation.DurableInputStream: boolean _EOF>;

        if $z0 == 0 goto label1;

        $r0 = new java.io.EOFException;

        specialinvoke $r0.<java.io.EOFException: void <init>()>();

        throw $r0;

     label1:
        $r1 = this.<org.prevayler.foundation.DurableInputStream: java.io.InputStream _fileStream>;

        chunk = staticinvoke <org.prevayler.foundation.Chunking: org.prevayler.foundation.Chunk readChunk(java.io.InputStream)>($r1);

        if chunk == null goto label3;

     label2:
        return chunk;

     label3:
        goto label8;

     label4:
        $r3 := @caughtexception;

        l1 = $r3;

        goto label8;

     label5:
        $r4 := @caughtexception;

        scx = $r4;

        specialinvoke this.<org.prevayler.foundation.DurableInputStream: void ignoreStreamCorruption(java.lang.Exception)>(scx);

        goto label8;

     label6:
        $r5 := @caughtexception;

        utfx = $r5;

        specialinvoke this.<org.prevayler.foundation.DurableInputStream: void ignoreStreamCorruption(java.lang.Exception)>(utfx);

        goto label8;

     label7:
        $r6 := @caughtexception;

        rx = $r6;

        specialinvoke this.<org.prevayler.foundation.DurableInputStream: void ignoreStreamCorruption(java.lang.Exception)>(rx);

     label8:
        $r7 = this.<org.prevayler.foundation.DurableInputStream: java.io.InputStream _fileStream>;

        virtualinvoke $r7.<java.io.InputStream: void close()>();

        this.<org.prevayler.foundation.DurableInputStream: boolean _EOF> = 1;

        $r8 = new java.io.EOFException;

        specialinvoke $r8.<java.io.EOFException: void <init>()>();

        throw $r8;

        catch java.io.EOFException from label1 to label2 with label4;
        catch java.io.ObjectStreamException from label1 to label2 with label5;
        catch java.io.UTFDataFormatException from label1 to label2 with label6;
        catch java.lang.RuntimeException from label1 to label2 with label7;
    }

    private void ignoreStreamCorruption(java.lang.Exception)
    {
        org.prevayler.foundation.DurableInputStream this;
        java.lang.Exception ex;
        java.lang.String message;
        org.prevayler.foundation.monitor.Monitor $r0;
        java.lang.Class $r1;
        java.io.File $r2;

        this := @this: org.prevayler.foundation.DurableInputStream;

        ex := @parameter0: java.lang.Exception;

        message = "Stream corruption found while reading a transaction from the journal. If this is a transaction that was being written when a system crash occurred, there is no problem because it was never executed on the Prevalent System. Before executing each transaction, Prevayler writes it to the journal and calls the java.io.FileDescritor.sync() method to instruct the Java API to physically sync all operating system RAM buffers to disk.";

        $r0 = this.<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.monitor.Monitor _monitor>;

        $r1 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = this.<org.prevayler.foundation.DurableInputStream: java.io.File _file>;

        interfaceinvoke $r0.<org.prevayler.foundation.monitor.Monitor: void notify(java.lang.Class,java.lang.String,java.io.File,java.lang.Exception)>($r1, message, $r2, ex);

        return;
    }


