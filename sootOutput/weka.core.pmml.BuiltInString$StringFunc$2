    void <init>(java.lang.String, int, java.lang.String)
    {
        weka.core.pmml.BuiltInString$StringFunc$2 this;
        java.lang.String l1, funcName;
        int l2;

        this := @this: weka.core.pmml.BuiltInString$StringFunc$2;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: int;

        funcName := @parameter2: java.lang.String;

        specialinvoke this.<weka.core.pmml.BuiltInString$StringFunc: void <init>(java.lang.String,int,java.lang.String,weka.core.pmml.BuiltInString$1)>(l1, l2, funcName, null);

        return;
    }

    java.lang.String eval(java.lang.Object[])
    {
        weka.core.pmml.BuiltInString$StringFunc$2 this;
        java.lang.Object[] args;
        java.lang.String input, $r5;
        int startPos, length, $i0, $i1;
        java.lang.Object $r0, $r1, $r3;
        java.lang.Integer $r2, $r4;

        this := @this: weka.core.pmml.BuiltInString$StringFunc$2;

        args := @parameter0: java.lang.Object[];

        $r0 = args[0];

        input = (java.lang.String) $r0;

        $r1 = args[1];

        $r2 = (java.lang.Integer) $r1;

        startPos = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        $r3 = args[2];

        $r4 = (java.lang.Integer) $r3;

        length = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $i0 = startPos - 1;

        $i1 = startPos + length;

        $r5 = virtualinvoke input.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        return $r5;
    }

    boolean legalNumParams(int)
    {
        weka.core.pmml.BuiltInString$StringFunc$2 this;
        int num;
        boolean $z0;

        this := @this: weka.core.pmml.BuiltInString$StringFunc$2;

        num := @parameter0: int;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(num);

        if num != 3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }


