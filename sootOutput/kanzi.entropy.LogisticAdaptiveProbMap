    void <init>(int, int)
    {
        kanzi.entropy.LogisticAdaptiveProbMap this;
        int n, rate, $i0, j#10, $i1, $i2, $i3, $i4, i#25, $i5;
        int[] $r0, $r1, $r2, $r3;

        this := @this: kanzi.entropy.LogisticAdaptiveProbMap;

        n := @parameter0: int;

        rate := @parameter1: int;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $i0 = n * 33;

        $r0 = newarray (int)[$i0];

        this.<kanzi.entropy.LogisticAdaptiveProbMap: int[] data> = $r0;

        this.<kanzi.entropy.LogisticAdaptiveProbMap: int rate> = rate;

        j#10 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#10);

        if j#10 > 32 goto label2;

        $r1 = this.<kanzi.entropy.LogisticAdaptiveProbMap: int[] data>;

        $i1 = j#10 - 16;

        $i2 = $i1 << 7;

        $i3 = staticinvoke <kanzi.Global: int squash(int)>($i2);

        $i4 = $i3 << 4;

        $r1[j#10] = $i4;

        j#10 = j#10 + 1;

        goto label1;

     label2:
        i#25 = 1;

     label3:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#25);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n);

        if i#25 >= n goto label4;

        $r2 = this.<kanzi.entropy.LogisticAdaptiveProbMap: int[] data>;

        $r3 = this.<kanzi.entropy.LogisticAdaptiveProbMap: int[] data>;

        $i5 = i#25 * 33;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r3, $i5, 33);

        i#25 = i#25 + 1;

        goto label3;

     label4:
        return;
    }

    int get(int, int, int)
    {
        kanzi.entropy.LogisticAdaptiveProbMap this;
        int bit, ctx, g, w, pr#1, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, pr#56, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37;
        int[] $r0, $r1, $r2, $r3, $r4, $r5, $r6;

        this := @this: kanzi.entropy.LogisticAdaptiveProbMap;

        bit := @parameter0: int;

        pr#1 := @parameter1: int;

        ctx := @parameter2: int;

        $i0 = bit << 16;

        $i1 = this.<kanzi.entropy.LogisticAdaptiveProbMap: int rate>;

        $i2 = bit << $i1;

        $i3 = $i0 + $i2;

        $i4 = bit << 1;

        g = $i3 - $i4;

        $r0 = this.<kanzi.entropy.LogisticAdaptiveProbMap: int[] data>;

        $i5 = this.<kanzi.entropy.LogisticAdaptiveProbMap: int index>;

        $i6 = $r0[$i5];

        $r1 = this.<kanzi.entropy.LogisticAdaptiveProbMap: int[] data>;

        $i7 = this.<kanzi.entropy.LogisticAdaptiveProbMap: int index>;

        $i8 = $r1[$i7];

        $i9 = g - $i8;

        $i10 = this.<kanzi.entropy.LogisticAdaptiveProbMap: int rate>;

        $i11 = $i9 >> $i10;

        $i12 = $i6 + $i11;

        $r0[$i5] = $i12;

        $r2 = this.<kanzi.entropy.LogisticAdaptiveProbMap: int[] data>;

        $i13 = this.<kanzi.entropy.LogisticAdaptiveProbMap: int index>;

        $i14 = $i13 + 1;

        $i15 = $r2[$i14];

        $r3 = this.<kanzi.entropy.LogisticAdaptiveProbMap: int[] data>;

        $i16 = this.<kanzi.entropy.LogisticAdaptiveProbMap: int index>;

        $i17 = $i16 + 1;

        $i18 = $r3[$i17];

        $i19 = g - $i18;

        $i20 = this.<kanzi.entropy.LogisticAdaptiveProbMap: int rate>;

        $i21 = $i19 >> $i20;

        $i22 = $i15 + $i21;

        $r2[$i14] = $i22;

        $r4 = <kanzi.Global: int[] STRETCH>;

        pr#56 = $r4[pr#1];

        $i23 = pr#56 + 2048;

        $i24 = $i23 >> 7;

        $i25 = ctx << 5;

        $i26 = $i24 + $i25;

        $i27 = $i26 + ctx;

        this.<kanzi.entropy.LogisticAdaptiveProbMap: int index> = $i27;

        w = pr#56 & 127;

        $r5 = this.<kanzi.entropy.LogisticAdaptiveProbMap: int[] data>;

        $i28 = this.<kanzi.entropy.LogisticAdaptiveProbMap: int index>;

        $i29 = $r5[$i28];

        $i30 = 128 - w;

        $i31 = $i29 * $i30;

        $r6 = this.<kanzi.entropy.LogisticAdaptiveProbMap: int[] data>;

        $i32 = this.<kanzi.entropy.LogisticAdaptiveProbMap: int index>;

        $i33 = $i32 + 1;

        $i34 = $r6[$i33];

        $i35 = $i34 * w;

        $i36 = $i31 + $i35;

        $i37 = $i36 >> 11;

        return $i37;
    }


