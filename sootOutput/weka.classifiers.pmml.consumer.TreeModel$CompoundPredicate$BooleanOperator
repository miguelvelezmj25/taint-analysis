    public static weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator[] values()
    {
        weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator: weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator[]) $r1;

        return $r2;
    }

    static void <clinit>()
    {
        weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator$1 $r0;
        weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator$2 $r1;
        weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator$3 $r2;
        weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator$4 $r3;
        weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator[] $r4;
        weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator $r5, $r6, $r7, $r8;

        $r0 = new weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator$1;

        specialinvoke $r0.<weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator$1: void <init>(java.lang.String,int,java.lang.String)>("OR", 0, "or");

        <weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator: weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator OR> = $r0;

        $r1 = new weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator$2;

        specialinvoke $r1.<weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator$2: void <init>(java.lang.String,int,java.lang.String)>("AND", 1, "and");

        <weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator: weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator AND> = $r1;

        $r2 = new weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator$3;

        specialinvoke $r2.<weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator$3: void <init>(java.lang.String,int,java.lang.String)>("XOR", 2, "xor");

        <weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator: weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator XOR> = $r2;

        $r3 = new weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator$4;

        specialinvoke $r3.<weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator$4: void <init>(java.lang.String,int,java.lang.String)>("SURROGATE", 3, "surrogate");

        <weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator: weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator SURROGATE> = $r3;

        $r4 = newarray (weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator)[4];

        $r5 = <weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator: weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator OR>;

        $r4[0] = $r5;

        $r6 = <weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator: weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator AND>;

        $r4[1] = $r6;

        $r7 = <weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator: weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator XOR>;

        $r4[2] = $r7;

        $r8 = <weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator: weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator SURROGATE>;

        $r4[3] = $r8;

        <weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator: weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator[] $VALUES> = $r4;

        return;
    }

    void <init>(java.lang.String, int, java.lang.String, weka.classifiers.pmml.consumer.TreeModel$1)
    {
        weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator this;
        java.lang.String x0, x2;
        int x1;
        weka.classifiers.pmml.consumer.TreeModel$1 x3;

        this := @this: weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator;

        x0 := @parameter0: java.lang.String;

        x1 := @parameter1: int;

        x2 := @parameter2: java.lang.String;

        x3 := @parameter3: weka.classifiers.pmml.consumer.TreeModel$1;

        specialinvoke this.<weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator: void <init>(java.lang.String,int,java.lang.String)>(x0, x1, x2);

        return;
    }

    private void <init>(java.lang.String, int, java.lang.String)
    {
        weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator this;
        java.lang.String l1, name;
        int l2;

        this := @this: weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: int;

        name := @parameter2: java.lang.String;

        specialinvoke this.<java.lang.Enum: void <init>(java.lang.String,int)>(l1, l2);

        this.<weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator: java.lang.String m_stringVal> = name;

        return;
    }

    public java.lang.String toString()
    {
        weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator this;
        java.lang.String $r0;

        this := @this: weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator;

        $r0 = this.<weka.classifiers.pmml.consumer.TreeModel$CompoundPredicate$BooleanOperator: java.lang.String m_stringVal>;

        return $r0;
    }


