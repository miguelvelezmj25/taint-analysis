    public boolean forward(kanzi.SliceByteArray, kanzi.SliceByteArray)
    {
        kanzi.transform.BWT this;
        kanzi.SliceByteArray src, dst;
        int count, srcIdx, dstIdx, srcIdx2, chunks, step, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, n#79, $i10, $i11, $i12, $i13, $i15, $i16, n#117, $i18, $i19, $i20, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i31, $i32, n#174, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i42, $i43, $i44, $i45;
        byte[] input, output, $r0, $r1, $r2;
        int[] sa, $r7, $r8;
        boolean $z0, $z1, res#83, $z2, $z3, $z4;
        byte $b8, $b14, $b17, $b21, $b30, $b33, $b41;
        kanzi.transform.DivSufSort $r5, $r6, $r9;

        this := @this: kanzi.transform.BWT;

        src := @parameter0: kanzi.SliceByteArray;

        dst := @parameter1: kanzi.SliceByteArray;

        $z0 = staticinvoke <kanzi.SliceByteArray: boolean isValid(kanzi.SliceByteArray)>(src);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label01;

        $z1 = staticinvoke <kanzi.SliceByteArray: boolean isValid(kanzi.SliceByteArray)>(dst);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label02;

     label01:
        return 0;

     label02:
        $r0 = src.<kanzi.SliceByteArray: byte[] array>;

        $r1 = dst.<kanzi.SliceByteArray: byte[] array>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r0 != $r1 goto label03;

        return 0;

     label03:
        count = src.<kanzi.SliceByteArray: int length>;

        $i0 = staticinvoke <kanzi.transform.BWT: int maxBlockSize()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if count <= $i0 goto label04;

        return 0;

     label04:
        $i1 = dst.<kanzi.SliceByteArray: int index>;

        $i2 = $i1 + count;

        $r2 = dst.<kanzi.SliceByteArray: byte[] array>;

        $i3 = lengthof $r2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i2 <= $i3 goto label05;

        return 0;

     label05:
        input = src.<kanzi.SliceByteArray: byte[] array>;

        output = dst.<kanzi.SliceByteArray: byte[] array>;

        srcIdx = src.<kanzi.SliceByteArray: int index>;

        dstIdx = dst.<kanzi.SliceByteArray: int index>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count);

        if count >= 2 goto label07;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count);

        if count != 1 goto label06;

        $i4 = dst.<kanzi.SliceByteArray: int index>;

        $i5 = $i4 + 1;

        dst.<kanzi.SliceByteArray: int index> = $i5;

        $i6 = src.<kanzi.SliceByteArray: int index>;

        $i7 = $i6 + 1;

        src.<kanzi.SliceByteArray: int index> = $i7;

        $b8 = input[$i6];

        output[$i4] = $b8;

     label06:
        return 1;

     label07:
        $r5 = this.<kanzi.transform.BWT: kanzi.transform.DivSufSort saAlgo>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r5);

        if $r5 != null goto label08;

        $r6 = new kanzi.transform.DivSufSort;

        specialinvoke $r6.<kanzi.transform.DivSufSort: void <init>()>();

        this.<kanzi.transform.BWT: kanzi.transform.DivSufSort saAlgo> = $r6;

     label08:
        $r7 = this.<kanzi.transform.BWT: int[] buffer1>;

        $i9 = lengthof $r7;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count);

        if $i9 >= count goto label09;

        $r8 = newarray (int)[count];

        this.<kanzi.transform.BWT: int[] buffer1> = $r8;

     label09:
        sa = this.<kanzi.transform.BWT: int[] buffer1>;

        $r9 = this.<kanzi.transform.BWT: kanzi.transform.DivSufSort saAlgo>;

        virtualinvoke $r9.<kanzi.transform.DivSufSort: void computeSuffixArray(byte[],int[],int,int)>(input, sa, srcIdx, count);

        srcIdx2 = srcIdx - 1;

        n#79 = 0;

        chunks = staticinvoke <kanzi.transform.BWT: int getBWTChunks(int)>(count);

        res#83 = 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(chunks);

        if chunks != 1 goto label14;

     label10:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n#79);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count);

        if n#79 >= count goto label12;

        $i10 = sa[n#79];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i10);

        if $i10 != 0 goto label11;

        $z2 = virtualinvoke this.<kanzi.transform.BWT: boolean setPrimaryIndex(int,int)>(0, n#79);

        res#83 = res#83 & $z2;

        goto label12;

     label11:
        $i11 = dstIdx + n#79;

        $i12 = sa[n#79];

        $i13 = srcIdx2 + $i12;

        $b14 = input[$i13];

        output[$i11] = $b14;

        n#79 = n#79 + 1;

        goto label10;

     label12:
        $i15 = dstIdx + n#79;

        $i16 = srcIdx2 + count;

        $b17 = input[$i16];

        output[$i15] = $b17;

        n#117 = n#79 + 1;

     label13:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n#117);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count);

        if n#117 >= count goto label20;

        $i18 = dstIdx + n#117;

        $i19 = sa[n#117];

        $i20 = srcIdx2 + $i19;

        $b21 = input[$i20];

        output[$i18] = $b21;

        n#117 = n#117 + 1;

        goto label13;

     label14:
        step = count / chunks;

     label15:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n#79);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count);

        if n#79 >= count goto label17;

        $i22 = sa[n#79];

        $i23 = $i22 % step;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i23);

        if $i23 != 0 goto label16;

        $i24 = sa[n#79];

        $i25 = $i24 / step;

        $z3 = virtualinvoke this.<kanzi.transform.BWT: boolean setPrimaryIndex(int,int)>($i25, n#79);

        res#83 = res#83 & $z3;

        $i26 = sa[n#79];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i26);

        if $i26 != 0 goto label16;

        goto label17;

     label16:
        $i27 = dstIdx + n#79;

        $i28 = sa[n#79];

        $i29 = srcIdx2 + $i28;

        $b30 = input[$i29];

        output[$i27] = $b30;

        n#79 = n#79 + 1;

        goto label15;

     label17:
        $i31 = dstIdx + n#79;

        $i32 = srcIdx2 + count;

        $b33 = input[$i32];

        output[$i31] = $b33;

        n#174 = n#79 + 1;

     label18:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n#174);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count);

        if n#174 >= count goto label20;

        $i34 = sa[n#174];

        $i35 = $i34 % step;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i35);

        if $i35 != 0 goto label19;

        $i36 = sa[n#174];

        $i37 = $i36 / step;

        $z4 = virtualinvoke this.<kanzi.transform.BWT: boolean setPrimaryIndex(int,int)>($i37, n#174);

        res#83 = res#83 & $z4;

     label19:
        $i38 = dstIdx + n#174;

        $i39 = sa[n#174];

        $i40 = srcIdx2 + $i39;

        $b41 = input[$i40];

        output[$i38] = $b41;

        n#174 = n#174 + 1;

        goto label18;

     label20:
        $i42 = src.<kanzi.SliceByteArray: int index>;

        $i43 = $i42 + count;

        src.<kanzi.SliceByteArray: int index> = $i43;

        $i44 = dst.<kanzi.SliceByteArray: int index>;

        $i45 = $i44 + count;

        dst.<kanzi.SliceByteArray: int index> = $i45;

        return res#83;
    }

    public static int getBWTChunks(int)
    {
        int size;

        size := @parameter0: int;

        return 1;
    }

    private static int maxBlockSize()
    {
        return 1073741820;
    }

    public boolean setPrimaryIndex(int, int)
    {
        kanzi.transform.BWT this;
        int n, primaryIndex, $i0;
        int[] $r0, $r1;

        this := @this: kanzi.transform.BWT;

        n := @parameter0: int;

        primaryIndex := @parameter1: int;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(primaryIndex);

        if primaryIndex < 0 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n);

        if n < 0 goto label1;

        $r0 = this.<kanzi.transform.BWT: int[] primaryIndexes>;

        $i0 = lengthof $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if n < $i0 goto label2;

     label1:
        return 0;

     label2:
        $r1 = this.<kanzi.transform.BWT: int[] primaryIndexes>;

        $r1[n] = primaryIndex;

        return 1;
    }

    public int getPrimaryIndex(int)
    {
        kanzi.transform.BWT this;
        int n, $i0;
        int[] $r0;

        this := @this: kanzi.transform.BWT;

        n := @parameter0: int;

        $r0 = this.<kanzi.transform.BWT: int[] primaryIndexes>;

        $i0 = $r0[n];

        return $i0;
    }

    public void <init>()
    {
        kanzi.transform.BWT this;
        int[] $r0, $r2, $r3;
        byte[] $r1;

        this := @this: kanzi.transform.BWT;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = newarray (int)[0];

        this.<kanzi.transform.BWT: int[] buffer1> = $r0;

        $r1 = newarray (byte)[0];

        this.<kanzi.transform.BWT: byte[] buffer2> = $r1;

        $r2 = newarray (int)[256];

        this.<kanzi.transform.BWT: int[] buckets> = $r2;

        $r3 = newarray (int)[9];

        this.<kanzi.transform.BWT: int[] primaryIndexes> = $r3;

        return;
    }


