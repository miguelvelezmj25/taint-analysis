    public static int encodeAlphabet(kanzi.OutputBitStream, int[], int)
    {
        kanzi.OutputBitStream obs;
        int[] alphabet, diffs;
        long[] masks;
        byte ckSize, $b52;
        int count#1, $i0, $i1, $i2, $i3, $i4, $i5, $i6, log#26, $i7, $i8, $i13, i#60, $i14, $i15, $i17, $i18, i#81, $i21, $i24, $i25, $i26, log#106, $i27, $i28, log#128, $i33, $i34, $i35, symbol#142, previous#144, n#146, i#148, $i38, $i39, $i40, $i41, $i42, log#169, $i43, $i44, previous#191, i#193, $i49, $i50, $i51, i#212, max#216, j#218, $i53, $i54, log#233, $i55, $i56, j#246, $i59, $i60;
        long $l9, $l11, $l16, $l19, $l20, $l22, $l29, $l31, $l36, $l45, $l47, $l57;

        obs := @parameter0: kanzi.OutputBitStream;

        alphabet := @parameter1: int[];

        count#1 := @parameter2: int;

        $i0 = lengthof alphabet;

        $i1 = lengthof alphabet;

        $i2 = $i1 - 1;

        $i3 = $i0 & $i2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 == 0 goto label01;

        return -1;

     label01:
        $i4 = lengthof alphabet;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count#1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if count#1 <= $i4 goto label02;

        return -1;

     label02:
        $i5 = lengthof alphabet;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i5 <= 0 goto label07;

        $i6 = lengthof alphabet;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count#1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if count#1 != $i6 goto label07;

        interfaceinvoke obs.<kanzi.OutputBitStream: void writeBit(int)>(0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count#1);

        if count#1 != 256 goto label03;

        interfaceinvoke obs.<kanzi.OutputBitStream: void writeBit(int)>(0);

        goto label06;

     label03:
        log#26 = 1;

     label04:
        $i7 = 1 << log#26;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count#1);

        if $i7 > count#1 goto label05;

        log#26 = log#26 + 1;

        goto label04;

     label05:
        interfaceinvoke obs.<kanzi.OutputBitStream: void writeBit(int)>(1);

        $i8 = log#26 - 1;

        $l9 = (long) $i8;

        interfaceinvoke obs.<kanzi.OutputBitStream: int writeBits(long,int)>($l9, 5);

        $l11 = (long) count#1;

        interfaceinvoke obs.<kanzi.OutputBitStream: int writeBits(long,int)>($l11, log#26);

     label06:
        return count#1;

     label07:
        interfaceinvoke obs.<kanzi.OutputBitStream: void writeBit(int)>(1);

        $i13 = lengthof alphabet;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i13);

        if $i13 != 256 goto label12;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count#1);

        if count#1 < 32 goto label12;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count#1);

        if count#1 > 224 goto label12;

        interfaceinvoke obs.<kanzi.OutputBitStream: void writeBit(int)>(1);

        masks = newarray (long)[4];

        i#60 = 0;

     label08:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#60);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count#1);

        if i#60 >= count#1 goto label09;

        $i14 = alphabet[i#60];

        $i15 = $i14 >> 6;

        $l16 = masks[$i15];

        $i17 = alphabet[i#60];

        $i18 = $i17 & 63;

        $l19 = 1L << $i18;

        $l20 = $l16 | $l19;

        masks[$i15] = $l20;

        i#60 = i#60 + 1;

        goto label08;

     label09:
        i#81 = 0;

     label10:
        $i21 = lengthof masks;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#81);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i21);

        if i#81 >= $i21 goto label11;

        $l22 = masks[i#81];

        interfaceinvoke obs.<kanzi.OutputBitStream: int writeBits(long,int)>($l22, 64);

        i#81 = i#81 + 1;

        goto label10;

     label11:
        return count#1;

     label12:
        interfaceinvoke obs.<kanzi.OutputBitStream: void writeBit(int)>(0);

        diffs = newarray (int)[count#1];

        $i24 = lengthof alphabet;

        $i25 = $i24 - count#1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i25);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count#1);

        if $i25 >= count#1 goto label22;

        $i26 = lengthof alphabet;

        count#1 = $i26 - count#1;

        log#106 = 1;

     label13:
        $i27 = 1 << log#106;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i27);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count#1);

        if $i27 > count#1 goto label14;

        log#106 = log#106 + 1;

        goto label13;

     label14:
        $i28 = log#106 - 1;

        $l29 = (long) $i28;

        interfaceinvoke obs.<kanzi.OutputBitStream: int writeBits(long,int)>($l29, 4);

        $l31 = (long) count#1;

        interfaceinvoke obs.<kanzi.OutputBitStream: int writeBits(long,int)>($l31, log#106);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count#1);

        if count#1 != 0 goto label15;

        return 0;

     label15:
        interfaceinvoke obs.<kanzi.OutputBitStream: void writeBit(int)>(1);

        log#128 = 1;

     label16:
        $i33 = 1 << log#128;

        $i34 = lengthof alphabet;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i33);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i34);

        if $i33 > $i34 goto label17;

        log#128 = log#128 + 1;

        goto label16;

     label17:
        $i35 = log#128 - 1;

        $l36 = (long) $i35;

        interfaceinvoke obs.<kanzi.OutputBitStream: int writeBits(long,int)>($l36, 5);

        symbol#142 = 0;

        previous#144 = 0;

        n#146 = 0;

        i#148 = 0;

     label18:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n#146);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count#1);

        if n#146 >= count#1 goto label21;

        $i38 = alphabet[i#148];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(symbol#142);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i38);

        if symbol#142 != $i38 goto label20;

        $i39 = lengthof alphabet;

        $i40 = $i39 - 1;

        $i41 = $i40 - count#1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#148);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i41);

        if i#148 >= $i41 goto label19;

        i#148 = i#148 + 1;

     label19:
        symbol#142 = symbol#142 + 1;

        goto label18;

     label20:
        $i42 = symbol#142 - previous#144;

        diffs[n#146] = $i42;

        symbol#142 = symbol#142 + 1;

        previous#144 = symbol#142;

        n#146 = n#146 + 1;

        goto label18;

     label21:
        goto label27;

     label22:
        log#169 = 1;

     label23:
        $i43 = 1 << log#169;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i43);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count#1);

        if $i43 > count#1 goto label24;

        log#169 = log#169 + 1;

        goto label23;

     label24:
        $i44 = log#169 - 1;

        $l45 = (long) $i44;

        interfaceinvoke obs.<kanzi.OutputBitStream: int writeBits(long,int)>($l45, 4);

        $l47 = (long) count#1;

        interfaceinvoke obs.<kanzi.OutputBitStream: int writeBits(long,int)>($l47, log#169);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count#1);

        if count#1 != 0 goto label25;

        return 0;

     label25:
        interfaceinvoke obs.<kanzi.OutputBitStream: void writeBit(int)>(0);

        previous#191 = 0;

        i#193 = 0;

     label26:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#193);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count#1);

        if i#193 >= count#1 goto label27;

        $i49 = alphabet[i#193];

        $i50 = $i49 - previous#191;

        diffs[i#193] = $i50;

        $i51 = alphabet[i#193];

        previous#191 = $i51 + 1;

        i#193 = i#193 + 1;

        goto label26;

     label27:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count#1);

        if count#1 > 64 goto label28;

        $b52 = 8;

        goto label29;

     label28:
        $b52 = 16;

     label29:
        ckSize = $b52;

        i#212 = 0;

     label30:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#212);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count#1);

        if i#212 >= count#1 goto label38;

        max#216 = 0;

        j#218 = i#212;

     label31:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#218);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count#1);

        if j#218 >= count#1 goto label33;

        $i53 = i#212 + ckSize;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#218);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i53);

        if j#218 >= $i53 goto label33;

        $i54 = diffs[j#218];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(max#216);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i54);

        if max#216 >= $i54 goto label32;

        max#216 = diffs[j#218];

     label32:
        j#218 = j#218 + 1;

        goto label31;

     label33:
        log#233 = 1;

     label34:
        $i55 = 1 << log#233;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i55);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(max#216);

        if $i55 > max#216 goto label35;

        log#233 = log#233 + 1;

        goto label34;

     label35:
        $i56 = log#233 - 1;

        $l57 = (long) $i56;

        interfaceinvoke obs.<kanzi.OutputBitStream: int writeBits(long,int)>($l57, 4);

        j#246 = i#212;

     label36:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#246);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count#1);

        if j#246 >= count#1 goto label37;

        $i59 = i#212 + ckSize;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#246);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i59);

        if j#246 >= $i59 goto label37;

        $i60 = diffs[j#246];

        staticinvoke <kanzi.entropy.EntropyUtils: void encodeSize(kanzi.OutputBitStream,int,int)>(obs, log#233, $i60);

        j#246 = j#246 + 1;

        goto label36;

     label37:
        i#212 = i#212 + ckSize;

        goto label30;

     label38:
        return count#1;
    }

    private static void encodeSize(kanzi.OutputBitStream, int, int)
    {
        kanzi.OutputBitStream obs;
        int log, val;
        long $l0;

        obs := @parameter0: kanzi.OutputBitStream;

        log := @parameter1: int;

        val := @parameter2: int;

        $l0 = (long) val;

        interfaceinvoke obs.<kanzi.OutputBitStream: int writeBits(long,int)>($l0, log);

        return;
    }

    public int normalizeFrequencies(int[], int[], int, int)
    {
        kanzi.entropy.EntropyUtils this;
        int[] freqs, alphabet, $r12, $r13, $r14, $r15, $r16, $r19, $r21, $r24;
        int totalFreq, scale, f, $i0, $i1, $i2, alphabetSize#36, i#40, $i3, $i4, $i5, $i6, $i7, sumScaledFreq#60, freqMax#62, idxMax#64, i#66, $i8, $i9, scaledFreq#97, $i16, $i24, $i25, $i26, $i27, $i28, $i29, $i31, $i32, $i33, i#174, $i35, $i36, $i37, $i38, $i40, $i41, $i42, $i43, $i45, $i46, $i47, $i48, $i49, $i50;
        long sf, errCeiling, errFloor, $l10, $l11, $l12, $l14, $l15, $l17, $l18, $l19, $l20, $l21, $l22;
        byte inc, $b13, $b23, $b34, $b39, $b44;
        java.util.PriorityQueue queue, $r18;
        kanzi.entropy.EntropyUtils$FreqSortData fsd, $r20;
        java.lang.IllegalArgumentException $r0, $r6;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r7, $r8, $r9, $r10;
        java.lang.String $r5, $r11;
        java.lang.Object $r22;

        this := @this: kanzi.entropy.EntropyUtils;

        freqs := @parameter0: int[];

        alphabet := @parameter1: int[];

        totalFreq := @parameter2: int;

        scale := @parameter3: int;

        $i0 = lengthof alphabet;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 256 goto label01;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid alphabet size parameter: ");

        $i1 = lengthof alphabet;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (must be less than or equal to 256)");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r0;

     label01:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(scale);

        if scale < 256 goto label02;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(scale);

        if scale <= 65536 goto label03;

     label02:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid scale parameter: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(scale);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (must be in [256..65536])");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label03:
        $i2 = lengthof alphabet;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 == 0 goto label04;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(totalFreq);

        if totalFreq != 0 goto label05;

     label04:
        return 0;

     label05:
        alphabetSize#36 = 0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(totalFreq);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(scale);

        if totalFreq != scale goto label09;

        i#40 = 0;

     label06:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#40);

        if i#40 >= 256 goto label08;

        $i3 = freqs[i#40];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 == 0 goto label07;

        $i4 = alphabetSize#36;

        alphabetSize#36 = alphabetSize#36 + 1;

        alphabet[$i4] = i#40;

     label07:
        i#40 = i#40 + 1;

        goto label06;

     label08:
        return alphabetSize#36;

     label09:
        $r12 = this.<kanzi.entropy.EntropyUtils: int[] errors>;

        $i5 = lengthof $r12;

        $i6 = lengthof alphabet;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if $i5 >= $i6 goto label10;

        $i7 = lengthof alphabet;

        $r13 = newarray (int)[$i7];

        this.<kanzi.entropy.EntropyUtils: int[] errors> = $r13;

     label10:
        sumScaledFreq#60 = 0;

        freqMax#62 = 0;

        idxMax#64 = -1;

        i#66 = 0;

     label11:
        $i8 = lengthof alphabet;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#66);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if i#66 >= $i8 goto label18;

        alphabet[i#66] = 0;

        $r14 = this.<kanzi.entropy.EntropyUtils: int[] errors>;

        $r14[i#66] = 0;

        f = freqs[i#66];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(f);

        if f != 0 goto label12;

        goto label17;

     label12:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(f);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(freqMax#62);

        if f <= freqMax#62 goto label13;

        freqMax#62 = f;

        idxMax#64 = i#66;

     label13:
        $i9 = freqs[i#66];

        $l10 = (long) $i9;

        $l11 = (long) scale;

        sf = $l10 * $l11;

        $l12 = (long) totalFreq;

        $b13 = sf cmp $l12;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b13);

        if $b13 > 0 goto label14;

        scaledFreq#97 = 1;

        goto label16;

     label14:
        $l14 = (long) totalFreq;

        $l15 = sf / $l14;

        scaledFreq#97 = (int) $l15;

        $i16 = scaledFreq#97 + 1;

        $l17 = (long) $i16;

        $l18 = (long) totalFreq;

        $l19 = $l17 * $l18;

        errCeiling = $l19 - sf;

        $l20 = (long) scaledFreq#97;

        $l21 = (long) totalFreq;

        $l22 = $l20 * $l21;

        errFloor = sf - $l22;

        $b23 = errCeiling cmp errFloor;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b23);

        if $b23 >= 0 goto label15;

        scaledFreq#97 = scaledFreq#97 + 1;

        $r15 = this.<kanzi.entropy.EntropyUtils: int[] errors>;

        $i24 = (int) errCeiling;

        $r15[i#66] = $i24;

        goto label16;

     label15:
        $r16 = this.<kanzi.entropy.EntropyUtils: int[] errors>;

        $i25 = (int) errFloor;

        $r16[i#66] = $i25;

     label16:
        $i26 = alphabetSize#36;

        alphabetSize#36 = alphabetSize#36 + 1;

        alphabet[$i26] = i#66;

        sumScaledFreq#60 = sumScaledFreq#60 + scaledFreq#97;

        freqs[i#66] = scaledFreq#97;

     label17:
        i#66 = i#66 + 1;

        goto label11;

     label18:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(alphabetSize#36);

        if alphabetSize#36 != 0 goto label19;

        return 0;

     label19:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(alphabetSize#36);

        if alphabetSize#36 != 1 goto label20;

        $i27 = alphabet[0];

        freqs[$i27] = scale;

        return 1;

     label20:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(sumScaledFreq#60);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(scale);

        if sumScaledFreq#60 == scale goto label28;

        $i28 = freqs[idxMax#64];

        $i29 = sumScaledFreq#60 - scale;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i28);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i29);

        if $i28 <= $i29 goto label21;

        $i31 = freqs[idxMax#64];

        $i32 = scale - sumScaledFreq#60;

        $i33 = $i31 + $i32;

        freqs[idxMax#64] = $i33;

        goto label28;

     label21:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(sumScaledFreq#60);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(scale);

        if sumScaledFreq#60 <= scale goto label22;

        $b34 = -1;

        goto label23;

     label22:
        $b34 = 1;

     label23:
        inc = $b34;

        $r18 = new java.util.PriorityQueue;

        specialinvoke $r18.<java.util.PriorityQueue: void <init>()>();

        queue = $r18;

        i#174 = 0;

     label24:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#174);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(alphabetSize#36);

        if i#174 >= alphabetSize#36 goto label26;

        $r19 = this.<kanzi.entropy.EntropyUtils: int[] errors>;

        $i35 = alphabet[i#174];

        $i36 = $r19[$i35];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i36);

        if $i36 < 0 goto label25;

        $i37 = alphabet[i#174];

        $i38 = freqs[$i37];

        $b39 = neg inc;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i38);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b39);

        if $i38 == $b39 goto label25;

        $r20 = new kanzi.entropy.EntropyUtils$FreqSortData;

        $r21 = this.<kanzi.entropy.EntropyUtils: int[] errors>;

        $i40 = alphabet[i#174];

        specialinvoke $r20.<kanzi.entropy.EntropyUtils$FreqSortData: void <init>(int[],int[],int)>($r21, freqs, $i40);

        virtualinvoke queue.<java.util.PriorityQueue: boolean add(java.lang.Object)>($r20);

     label25:
        i#174 = i#174 + 1;

        goto label24;

     label26:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(sumScaledFreq#60);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(scale);

        if sumScaledFreq#60 == scale goto label28;

        $i41 = virtualinvoke queue.<java.util.PriorityQueue: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i41);

        if $i41 <= 0 goto label28;

        $r22 = virtualinvoke queue.<java.util.PriorityQueue: java.lang.Object poll()>();

        fsd = (kanzi.entropy.EntropyUtils$FreqSortData) $r22;

        $i42 = fsd.<kanzi.entropy.EntropyUtils$FreqSortData: int symbol>;

        $i43 = freqs[$i42];

        $b44 = neg inc;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i43);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b44);

        if $i43 != $b44 goto label27;

        goto label26;

     label27:
        $i45 = fsd.<kanzi.entropy.EntropyUtils$FreqSortData: int symbol>;

        $i46 = freqs[$i45];

        $i47 = $i46 + inc;

        freqs[$i45] = $i47;

        $r24 = this.<kanzi.entropy.EntropyUtils: int[] errors>;

        $i48 = fsd.<kanzi.entropy.EntropyUtils$FreqSortData: int symbol>;

        $i49 = $r24[$i48];

        $i50 = $i49 - scale;

        $r24[$i48] = $i50;

        sumScaledFreq#60 = sumScaledFreq#60 + inc;

        virtualinvoke queue.<java.util.PriorityQueue: boolean add(java.lang.Object)>(fsd);

        goto label26;

     label28:
        return alphabetSize#36;
    }

    public void <init>()
    {
        kanzi.entropy.EntropyUtils this;
        int[] $r0;

        this := @this: kanzi.entropy.EntropyUtils;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = newarray (int)[0];

        this.<kanzi.entropy.EntropyUtils: int[] errors> = $r0;

        return;
    }


