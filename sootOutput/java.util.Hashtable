    public synchronized java.lang.Object get(java.lang.Object)
    {
        java.util.Hashtable l0;
        java.lang.Object l1, $r0, $r1;
        java.util.Hashtable$Entry[] l2;
        int l3, l4, $i0, $i1, $i2;
        java.util.Hashtable$Entry l5#14;
        boolean $z0;

        l0 := @this: java.util.Hashtable;

        l1 := @parameter0: java.lang.Object;

        l2 = l0.<java.util.Hashtable: java.util.Hashtable$Entry[] table>;

        l3 = virtualinvoke l1.<java.lang.Object: int hashCode()>();

        $i0 = l3 & 2147483647;

        $i1 = lengthof l2;

        l4 = $i0 % $i1;

        l5#14 = l2[l4];

     label1:
        if l5#14 == null goto label3;

        $i2 = l5#14.<java.util.Hashtable$Entry: int hash>;

        if $i2 != l3 goto label2;

        $r0 = l5#14.<java.util.Hashtable$Entry: java.lang.Object key>;

        $z0 = virtualinvoke $r0.<java.lang.Object: boolean equals(java.lang.Object)>(l1);

        if $z0 == 0 goto label2;

        $r1 = l5#14.<java.util.Hashtable$Entry: java.lang.Object value>;

        return $r1;

     label2:
        l5#14 = l5#14.<java.util.Hashtable$Entry: java.util.Hashtable$Entry next>;

        goto label1;

     label3:
        return null;
    }

    public synchronized java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.util.Hashtable l0;
        java.lang.Object l1, l2, l7, $r1;
        java.util.Hashtable$Entry[] l3;
        int l4, l5, $i0, $i1, $i2;
        java.lang.NullPointerException $r0;
        java.util.Hashtable$Entry l6#17;
        boolean $z0;

        l0 := @this: java.util.Hashtable;

        l1 := @parameter0: java.lang.Object;

        l2 := @parameter1: java.lang.Object;

        if l2 != null goto label1;

        $r0 = new java.lang.NullPointerException;

        specialinvoke $r0.<java.lang.NullPointerException: void <init>()>();

        throw $r0;

     label1:
        l3 = l0.<java.util.Hashtable: java.util.Hashtable$Entry[] table>;

        l4 = virtualinvoke l1.<java.lang.Object: int hashCode()>();

        $i0 = l4 & 2147483647;

        $i1 = lengthof l3;

        l5 = $i0 % $i1;

        l6#17 = l3[l5];

     label2:
        if l6#17 == null goto label4;

        $i2 = l6#17.<java.util.Hashtable$Entry: int hash>;

        if $i2 != l4 goto label3;

        $r1 = l6#17.<java.util.Hashtable$Entry: java.lang.Object key>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>(l1);

        if $z0 == 0 goto label3;

        l7 = l6#17.<java.util.Hashtable$Entry: java.lang.Object value>;

        l6#17.<java.util.Hashtable$Entry: java.lang.Object value> = l2;

        return l7;

     label3:
        l6#17 = l6#17.<java.util.Hashtable$Entry: java.util.Hashtable$Entry next>;

        goto label2;

     label4:
        specialinvoke l0.<java.util.Hashtable: void addEntry(int,java.lang.Object,java.lang.Object,int)>(l4, l1, l2, l5);

        return null;
    }

    private void addEntry(int, java.lang.Object, java.lang.Object, int)
    {
        java.util.Hashtable l0;
        java.lang.Object l2, l3;
        java.util.Hashtable$Entry l6, $r1;
        int l1#1, l4#2, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.util.Hashtable$Entry[] l5#10;

        l0 := @this: java.util.Hashtable;

        l1#1 := @parameter0: int;

        l2 := @parameter1: java.lang.Object;

        l3 := @parameter2: java.lang.Object;

        l4#2 := @parameter3: int;

        $i0 = l0.<java.util.Hashtable: int modCount>;

        $i1 = $i0 + 1;

        l0.<java.util.Hashtable: int modCount> = $i1;

        l5#10 = l0.<java.util.Hashtable: java.util.Hashtable$Entry[] table>;

        $i2 = l0.<java.util.Hashtable: int count>;

        $i3 = l0.<java.util.Hashtable: int threshold>;

        if $i2 < $i3 goto label1;

        virtualinvoke l0.<java.util.Hashtable: void rehash()>();

        l5#10 = l0.<java.util.Hashtable: java.util.Hashtable$Entry[] table>;

        l1#1 = virtualinvoke l2.<java.lang.Object: int hashCode()>();

        $i4 = l1#1 & 2147483647;

        $i5 = lengthof l5#10;

        l4#2 = $i4 % $i5;

     label1:
        l6 = l5#10[l4#2];

        $r1 = new java.util.Hashtable$Entry;

        specialinvoke $r1.<java.util.Hashtable$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.util.Hashtable$Entry)>(l1#1, l2, l3, l6);

        l5#10[l4#2] = $r1;

        $i6 = l0.<java.util.Hashtable: int count>;

        $i7 = $i6 + 1;

        l0.<java.util.Hashtable: int count> = $i7;

        return;
    }

    protected void rehash()
    {
        java.util.Hashtable l0;
        int l1, l8, $i0, l3#11, $i1, $i2, $i3, $i4, l5#37, $i5, $i6, $i7;
        java.util.Hashtable$Entry[] l2, l4, $r0;
        java.util.Hashtable$Entry l7, l6#42, $r2;
        float $f0, $f1, $f2, $f3;

        l0 := @this: java.util.Hashtable;

        $r0 = l0.<java.util.Hashtable: java.util.Hashtable$Entry[] table>;

        l1 = lengthof $r0;

        l2 = l0.<java.util.Hashtable: java.util.Hashtable$Entry[] table>;

        $i0 = l1 << 1;

        l3#11 = $i0 + 1;

        $i1 = l3#11 - 2147483639;

        if $i1 <= 0 goto label2;

        if l1 != 2147483639 goto label1;

        return;

     label1:
        l3#11 = 2147483639;

     label2:
        l4 = newarray (java.util.Hashtable$Entry)[l3#11];

        $i2 = l0.<java.util.Hashtable: int modCount>;

        $i3 = $i2 + 1;

        l0.<java.util.Hashtable: int modCount> = $i3;

        $f0 = (float) l3#11;

        $f1 = l0.<java.util.Hashtable: float loadFactor>;

        $f2 = $f0 * $f1;

        $f3 = staticinvoke <java.lang.Math: float min(float,float)>($f2, 2.14748365E9F);

        $i4 = (int) $f3;

        l0.<java.util.Hashtable: int threshold> = $i4;

        l0.<java.util.Hashtable: java.util.Hashtable$Entry[] table> = l4;

        l5#37 = l1;

     label3:
        $i5 = l5#37;

        l5#37 = l5#37 + -1;

        if $i5 <= 0 goto label6;

        l6#42 = l2[l5#37];

     label4:
        if l6#42 == null goto label5;

        l7 = l6#42;

        l6#42 = l6#42.<java.util.Hashtable$Entry: java.util.Hashtable$Entry next>;

        $i6 = l7.<java.util.Hashtable$Entry: int hash>;

        $i7 = $i6 & 2147483647;

        l8 = $i7 % l3#11;

        $r2 = l4[l8];

        l7.<java.util.Hashtable$Entry: java.util.Hashtable$Entry next> = $r2;

        l4[l8] = l7;

        goto label4;

     label5:
        goto label3;

     label6:
        return;
    }

    public void <init>()
    {
        java.util.Hashtable l0;

        l0 := @this: java.util.Hashtable;

        specialinvoke l0.<java.util.Hashtable: void <init>(int,float)>(11, 0.75F);

        return;
    }

    public void <init>(int, float)
    {
        java.util.Hashtable l0;
        float l2, $f0, $f1, $f2;
        int l1#1, $i1;
        java.lang.IllegalArgumentException $r0, $r5;
        java.lang.StringBuilder $r1, $r2, $r3, $r6, $r7, $r8;
        java.lang.String $r4, $r9;
        byte $b0;
        boolean $z0;
        java.util.Hashtable$Entry[] $r10;

        l0 := @this: java.util.Hashtable;

        l1#1 := @parameter0: int;

        l2 := @parameter1: float;

        specialinvoke l0.<java.util.Dictionary: void <init>()>();

        l0.<java.util.Hashtable: int modCount> = 0;

        if l1#1 >= 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal Capacity: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l1#1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label1:
        $b0 = l2 cmpg 0.0F;

        if $b0 <= 0 goto label2;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(l2);

        if $z0 == 0 goto label3;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal Load: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(l2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label3:
        if l1#1 != 0 goto label4;

        l1#1 = 1;

     label4:
        l0.<java.util.Hashtable: float loadFactor> = l2;

        $r10 = newarray (java.util.Hashtable$Entry)[l1#1];

        l0.<java.util.Hashtable: java.util.Hashtable$Entry[] table> = $r10;

        $f0 = (float) l1#1;

        $f1 = $f0 * l2;

        $f2 = staticinvoke <java.lang.Math: float min(float,float)>($f1, 2.14748365E9F);

        $i1 = (int) $f2;

        l0.<java.util.Hashtable: int threshold> = $i1;

        return;
    }


