    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "com/sleepycat/je/log/FileHandle";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sleepycat.je.log.FileHandle: boolean $assertionsDisabled> = $z1;

        return;
    }

    void <init>(com.sleepycat.je.dbi.EnvironmentImpl, long, java.lang.String)
    {
        com.sleepycat.je.log.FileHandle this;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        long fileNum;
        java.lang.String label, $r4;
        java.lang.StringBuilder $r0, $r1, $r2, $r3;
        com.sleepycat.je.latch.Latch $r5;

        this := @this: com.sleepycat.je.log.FileHandle;

        envImpl := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        fileNum := @parameter1: long;

        label := @parameter2: java.lang.String;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file_");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(label);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_fileHandle");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = staticinvoke <com.sleepycat.je.latch.LatchFactory: com.sleepycat.je.latch.Latch createExclusiveLatch(com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String,boolean)>(envImpl, $r4, 0);

        this.<com.sleepycat.je.log.FileHandle: com.sleepycat.je.latch.Latch fileLatch> = $r5;

        this.<com.sleepycat.je.log.FileHandle: long fileNum> = fileNum;

        return;
    }

    long getFileNum()
    {
        com.sleepycat.je.log.FileHandle this;
        long $l0;

        this := @this: com.sleepycat.je.log.FileHandle;

        $l0 = this.<com.sleepycat.je.log.FileHandle: long fileNum>;

        return $l0;
    }

    void init(java.io.RandomAccessFile, int)
    {
        com.sleepycat.je.log.FileHandle this;
        java.io.RandomAccessFile file, $r0;
        int logVersion;
        boolean $z0;
        java.lang.AssertionError $r1;

        this := @this: com.sleepycat.je.log.FileHandle;

        file := @parameter0: java.io.RandomAccessFile;

        logVersion := @parameter1: int;

        $z0 = <com.sleepycat.je.log.FileHandle: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r0 = this.<com.sleepycat.je.log.FileHandle: java.io.RandomAccessFile file>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        this.<com.sleepycat.je.log.FileHandle: java.io.RandomAccessFile file> = file;

        this.<com.sleepycat.je.log.FileHandle: int logVersion> = logVersion;

        return;
    }

    java.io.RandomAccessFile getFile()
    {
        com.sleepycat.je.log.FileHandle this;
        java.io.RandomAccessFile $r0;

        this := @this: com.sleepycat.je.log.FileHandle;

        $r0 = this.<com.sleepycat.je.log.FileHandle: java.io.RandomAccessFile file>;

        return $r0;
    }

    boolean latchNoWait() throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.log.FileHandle this;
        com.sleepycat.je.latch.Latch $r0;
        boolean $z0;

        this := @this: com.sleepycat.je.log.FileHandle;

        $r0 = this.<com.sleepycat.je.log.FileHandle: com.sleepycat.je.latch.Latch fileLatch>;

        $z0 = interfaceinvoke $r0.<com.sleepycat.je.latch.Latch: boolean acquireExclusiveNoWait()>();

        return $z0;
    }

    void close() throws java.io.IOException
    {
        com.sleepycat.je.log.FileHandle this;
        java.lang.Throwable l1, $r2;
        java.io.RandomAccessFile $r0, $r1;

        this := @this: com.sleepycat.je.log.FileHandle;

        $r0 = this.<com.sleepycat.je.log.FileHandle: java.io.RandomAccessFile file>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label4;

     label1:
        $r1 = this.<com.sleepycat.je.log.FileHandle: java.io.RandomAccessFile file>;

        virtualinvoke $r1.<java.io.RandomAccessFile: void close()>();

     label2:
        this.<com.sleepycat.je.log.FileHandle: java.io.RandomAccessFile file> = null;

        goto label4;

     label3:
        $r2 := @caughtexception;

        l1 = $r2;

        this.<com.sleepycat.je.log.FileHandle: java.io.RandomAccessFile file> = null;

        throw l1;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    void latch() throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.log.FileHandle this;
        com.sleepycat.je.latch.Latch $r0;

        this := @this: com.sleepycat.je.log.FileHandle;

        $r0 = this.<com.sleepycat.je.log.FileHandle: com.sleepycat.je.latch.Latch fileLatch>;

        interfaceinvoke $r0.<com.sleepycat.je.latch.Latch: void acquireExclusive()>();

        return;
    }

    public void release() throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.log.FileHandle this;
        com.sleepycat.je.latch.Latch $r0;

        this := @this: com.sleepycat.je.log.FileHandle;

        $r0 = this.<com.sleepycat.je.log.FileHandle: com.sleepycat.je.latch.Latch fileLatch>;

        interfaceinvoke $r0.<com.sleepycat.je.latch.Latch: void release()>();

        return;
    }

    public int getLogVersion()
    {
        com.sleepycat.je.log.FileHandle this;
        int $i0;

        this := @this: com.sleepycat.je.log.FileHandle;

        $i0 = this.<com.sleepycat.je.log.FileHandle: int logVersion>;

        return $i0;
    }

    boolean isOldHeaderVersion()
    {
        com.sleepycat.je.log.FileHandle this;
        int $i0;
        boolean $z0;

        this := @this: com.sleepycat.je.log.FileHandle;

        $i0 = this.<com.sleepycat.je.log.FileHandle: int logVersion>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 >= 14 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }


