    public static void main(java.lang.String[])
    {
        java.lang.String[] args;
        family.PL_Interface_impl impl, $r1;
        java.lang.Throwable e, $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.io.PrintStream $r0, $r2, $r4;
        java.lang.StringBuilder $r5, $r6, $r8, $r9, $r11;
        java.lang.Class $r7;
        java.lang.String $r10, $r12;

        args := @parameter0: java.lang.String[];

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void init()>();

        $z0 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getBASE(boolean)>(1);

        <family.PL_Interface_impl: boolean BASE> = $z0;

        $z1 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getKEYS(boolean)>(0);

        <family.PL_Interface_impl: boolean KEYS> = $z1;

        $z2 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getENCRYPT(boolean)>(0);

        <family.PL_Interface_impl: boolean ENCRYPT> = $z2;

        $z3 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getAUTORESPONDER(boolean)>(0);

        <family.PL_Interface_impl: boolean AUTORESPONDER> = $z3;

        $z4 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getADDRESSBOOK(boolean)>(0);

        <family.PL_Interface_impl: boolean ADDRESSBOOK> = $z4;

        $z5 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getSIGN(boolean)>(0);

        <family.PL_Interface_impl: boolean SIGN> = $z5;

        $z6 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getFORWARD(boolean)>(1);

        <family.PL_Interface_impl: boolean FORWARD> = $z6;

        $z7 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getVERIFY(boolean)>(0);

        <family.PL_Interface_impl: boolean VERIFY> = $z7;

        $z8 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getDECRYPT(boolean)>(0);

        <family.PL_Interface_impl: boolean DECRYPT> = $z8;

        $z9 = staticinvoke <family.verificationClasses.FeatureSwitches: boolean valid_product()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 != 0 goto label3;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("invalid");

     label2:
        return;

     label3:
        $r1 = new family.PL_Interface_impl;

        specialinvoke $r1.<family.PL_Interface_impl: void <init>()>();

        impl = $r1;

        staticinvoke <family.TestSpecifications.SpecificationManager: void checkOnlySpecification(int)>(-2);

        virtualinvoke impl.<family.PL_Interface_impl: void start(int,int)>(3, -1);

        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("no Exception");

     label4:
        goto label6;

     label5:
        $r3 := @caughtexception;

        e = $r3;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caught Exception: ");

        $r7 = virtualinvoke e.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r10 = virtualinvoke e.<java.lang.Throwable: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r12);

        virtualinvoke e.<java.lang.Throwable: void printStackTrace()>();

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void <init>()
    {
        family.PL_Interface_impl this;

        this := @this: family.PL_Interface_impl;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void start(int, int)
    {
        family.PL_Interface_impl this;
        int specification, variation, i#4;

        this := @this: family.PL_Interface_impl;

        specification := @parameter0: int;

        variation := @parameter1: int;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(variation);

        if variation != -1 goto label2;

        i#4 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#4);

        if i#4 >= 10 goto label2;

        staticinvoke <family.PL_Interface_impl: void test_1_addressBook_encrypt()>();

        staticinvoke <family.PL_Interface_impl: void test_3_sign_verify()>();

        staticinvoke <family.PL_Interface_impl: void test_4_sign_forward()>();

        staticinvoke <family.PL_Interface_impl: void test_6_encrypt_decrypt()>();

        staticinvoke <family.PL_Interface_impl: void test_7_encrypt_verify()>();

        staticinvoke <family.PL_Interface_impl: void test_8_Encrypt_Autoresponder()>();

        staticinvoke <family.PL_Interface_impl: void test_9_Encrypt_Forward()>();

        staticinvoke <family.PL_Interface_impl: void test_11_decrypt_autoresponder()>();

        staticinvoke <family.PL_Interface_impl: void test_27_verify_forward()>();

        i#4 = i#4 + 1;

        goto label1;

     label2:
        return;
    }

    static void test_27_verify_forward()
    {
        staticinvoke <family.Test_Actions: void setup()>();

        staticinvoke <family.Test_Actions: void rjhDeletePrivateKey()>();

        staticinvoke <family.Test_Actions: void rjhKeyAdd()>();

        staticinvoke <family.Test_Actions: void rjhEnableForwarding()>();

        staticinvoke <family.Test_Actions: void bobToRjh()>();

        return;
    }

    static void test_11_decrypt_autoresponder()
    {
        staticinvoke <family.Test_Actions: void setup()>();

        staticinvoke <family.Test_Actions: void bobKeyAdd()>();

        staticinvoke <family.Test_Actions: void rjhSetAutoRespond()>();

        staticinvoke <family.Test_Actions: void rjhKeyChange()>();

        staticinvoke <family.Test_Actions: void bobToRjh()>();

        return;
    }

    static void test_9_Encrypt_Forward()
    {
        staticinvoke <family.Test_Actions: void setup()>();

        staticinvoke <family.Test_Actions: void bobKeyAdd()>();

        staticinvoke <family.Test_Actions: void rjhEnableForwarding()>();

        staticinvoke <family.Test_Actions: void bobToRjh()>();

        return;
    }

    static void test_8_Encrypt_Autoresponder()
    {
        staticinvoke <family.Test_Actions: void setup()>();

        staticinvoke <family.Test_Actions: void bobKeyAdd()>();

        staticinvoke <family.Test_Actions: void rjhSetAutoRespond()>();

        staticinvoke <family.Test_Actions: void bobToRjh()>();

        return;
    }

    static void test_7_encrypt_verify()
    {
        staticinvoke <family.Test_Actions: void setup()>();

        staticinvoke <family.Test_Actions: void bobKeyAdd()>();

        staticinvoke <family.Test_Actions: void rjhKeyChange()>();

        staticinvoke <family.Test_Actions: void bobToRjh()>();

        return;
    }

    static void test_6_encrypt_decrypt()
    {
        staticinvoke <family.Test_Actions: void setup()>();

        staticinvoke <family.Test_Actions: void bobKeyAdd()>();

        staticinvoke <family.Test_Actions: void rjhKeyChange()>();

        staticinvoke <family.Test_Actions: void bobToRjh()>();

        return;
    }

    static void test_4_sign_forward()
    {
        staticinvoke <family.Test_Actions: void setup()>();

        staticinvoke <family.Test_Actions: void rjhDeletePrivateKey()>();

        staticinvoke <family.Test_Actions: void rjhKeyAdd()>();

        staticinvoke <family.Test_Actions: void chuckKeyAdd()>();

        staticinvoke <family.Test_Actions: void rjhEnableForwarding()>();

        staticinvoke <family.Test_Actions: void bobToRjh()>();

        return;
    }

    static void test_3_sign_verify()
    {
        staticinvoke <family.Test_Actions: void setup()>();

        staticinvoke <family.Test_Actions: void rjhKeyAdd()>();

        staticinvoke <family.Test_Actions: void bobKeyChange()>();

        staticinvoke <family.Test_Actions: void bobToRjh()>();

        return;
    }

    static void test_1_addressBook_encrypt()
    {
        staticinvoke <family.Test_Actions: void setup()>();

        staticinvoke <family.Test_Actions: void bobKeyAdd()>();

        staticinvoke <family.Test_Actions: void bobSetAddressBook()>();

        staticinvoke <family.Test_Actions: void bobToAlias()>();

        return;
    }


