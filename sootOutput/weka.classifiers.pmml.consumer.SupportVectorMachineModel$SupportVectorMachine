    public void <init>(org.w3c.dom.Element, weka.core.pmml.MiningSchema, weka.core.pmml.VectorDictionary, weka.classifiers.pmml.consumer.SupportVectorMachineModel$SVM_representation, int, weka.gui.Logger) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.SupportVectorMachineModel$SupportVectorMachine this;
        org.w3c.dom.Element machineElement, vectors, cL, coeff, $r29;
        weka.core.pmml.MiningSchema miningSchema, $r1, $r18;
        weka.core.pmml.VectorDictionary dictionary;
        weka.classifiers.pmml.consumer.SupportVectorMachineModel$SVM_representation svmRep, $r27;
        int altCategoryInd, $i0, index#39, $i1, index#64, $i3, $i4, i#118, $i5, $i6, $i7, $i8, $i9, i#185, $i10;
        weka.gui.Logger log;
        java.lang.String targetCat, altTargetCat, vecId, intercept, val, $r3, $r7, $r10, $r16, $r26, $r35;
        weka.core.Attribute classAtt, $r20;
        org.w3c.dom.NodeList vectorsL, allTheVectorsL, coefficientsL, coeffL;
        org.w3c.dom.Node vec, $r28, $r38, $r41;
        weka.core.pmml.VectorInstance suppV;
        java.util.ArrayList $r0;
        weka.core.Instances $r2, $r19;
        boolean $z0, $z1;
        java.lang.Exception $r4, $r11, $r17, $r30, $r37, $r39;
        java.lang.StringBuilder $r5, $r6, $r8, $r9, $r12, $r13, $r14, $r15, $r23, $r24, $r25, $r31, $r32, $r33, $r34;
        byte $b2;
        java.io.PrintStream $r22;
        java.util.List $r36;
        double $d0, $d1;
        double[] $r40, $r42;

        this := @this: weka.classifiers.pmml.consumer.SupportVectorMachineModel$SupportVectorMachine;

        machineElement := @parameter0: org.w3c.dom.Element;

        miningSchema := @parameter1: weka.core.pmml.MiningSchema;

        dictionary := @parameter2: weka.core.pmml.VectorDictionary;

        svmRep := @parameter3: weka.classifiers.pmml.consumer.SupportVectorMachineModel$SVM_representation;

        altCategoryInd := @parameter4: int;

        log := @parameter5: weka.gui.Logger;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$SupportVectorMachine: int m_globalAlternateTargetCategoryIndex> = -1;

        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$SupportVectorMachine: int m_targetCategoryIndex> = -1;

        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$SupportVectorMachine: int m_localAlternateTargetCategoryIndex> = -1;

        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$SupportVectorMachine: double m_localThreshold> = 1.7976931348623157E308;

        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$SupportVectorMachine: boolean m_coeffsOnly> = 0;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$SupportVectorMachine: java.util.List m_supportVectors> = $r0;

        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$SupportVectorMachine: double m_intercept> = 0.0;

        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$SupportVectorMachine: weka.core.pmml.MiningSchema m_miningSchema> = miningSchema;

        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$SupportVectorMachine: weka.gui.Logger m_log> = log;

        targetCat = interfaceinvoke machineElement.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("targetCategory");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(targetCat);

        if targetCat == null goto label07;

        $i0 = virtualinvoke targetCat.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label07;

        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$SupportVectorMachine: java.lang.String m_targetCategory> = targetCat;

        $r1 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$SupportVectorMachine: weka.core.pmml.MiningSchema m_miningSchema>;

        $r2 = virtualinvoke $r1.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        classAtt = virtualinvoke $r2.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z0 = virtualinvoke classAtt.<weka.core.Attribute: boolean isNominal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label05;

        $r3 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$SupportVectorMachine: java.lang.String m_targetCategory>;

        index#39 = virtualinvoke classAtt.<weka.core.Attribute: int indexOfValue(java.lang.String)>($r3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(index#39);

        if index#39 >= 0 goto label01;

        $r4 = new java.lang.Exception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[SupportVectorMachine] : can\'t find target category: ");

        $r7 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$SupportVectorMachine: java.lang.String m_targetCategory>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in the class attribute!");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.Exception: void <init>(java.lang.String)>($r10);

        throw $r4;

     label01:
        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$SupportVectorMachine: int m_targetCategoryIndex> = index#39;

        altTargetCat = interfaceinvoke machineElement.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("alternateTargetCategory");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(altTargetCat);

        if altTargetCat == null goto label03;

        $i1 = virtualinvoke altTargetCat.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 0 goto label03;

        index#64 = virtualinvoke classAtt.<weka.core.Attribute: int indexOfValue(java.lang.String)>(altTargetCat);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(index#64);

        if index#64 >= 0 goto label02;

        $r11 = new java.lang.Exception;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[SupportVectorMachine] : can\'t find alternate target category: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(altTargetCat);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in the class attribute!");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.Exception: void <init>(java.lang.String)>($r16);

        throw $r11;

     label02:
        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$SupportVectorMachine: int m_localAlternateTargetCategoryIndex> = index#64;

        goto label04;

     label03:
        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$SupportVectorMachine: int m_globalAlternateTargetCategoryIndex> = altCategoryInd;

     label04:
        goto label06;

     label05:
        $r17 = new java.lang.Exception;

        specialinvoke $r17.<java.lang.Exception: void <init>(java.lang.String)>("[SupportVectorMachine] : target category supplied but class attribute is numeric!");

        throw $r17;

     label06:
        goto label10;

     label07:
        $r18 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$SupportVectorMachine: weka.core.pmml.MiningSchema m_miningSchema>;

        $r19 = virtualinvoke $r18.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r20 = virtualinvoke $r19.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z1 = virtualinvoke $r20.<weka.core.Attribute: boolean isNominal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label10;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(altCategoryInd);

        if altCategoryInd != 0 goto label08;

        $b2 = 1;

        goto label09;

     label08:
        $b2 = 0;

     label09:
        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$SupportVectorMachine: int m_targetCategoryIndex> = $b2;

        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$SupportVectorMachine: int m_globalAlternateTargetCategoryIndex> = altCategoryInd;

        $r22 = <java.lang.System: java.io.PrintStream err>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting target index for machine to ");

        $i3 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$SupportVectorMachine: int m_targetCategoryIndex>;

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>($r26);

     label10:
        $r27 = <weka.classifiers.pmml.consumer.SupportVectorMachineModel$SVM_representation: weka.classifiers.pmml.consumer.SupportVectorMachineModel$SVM_representation SUPPORT_VECTORS>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(svmRep);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r27);

        if svmRep != $r27 goto label14;

        vectorsL = interfaceinvoke machineElement.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("SupportVectors");

        $i4 = interfaceinvoke vectorsL.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 <= 0 goto label13;

        $r28 = interfaceinvoke vectorsL.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        vectors = (org.w3c.dom.Element) $r28;

        allTheVectorsL = interfaceinvoke vectors.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("SupportVector");

        i#118 = 0;

     label11:
        $i5 = interfaceinvoke allTheVectorsL.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#118);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if i#118 >= $i5 goto label13;

        vec = interfaceinvoke allTheVectorsL.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i#118);

        $r29 = (org.w3c.dom.Element) vec;

        vecId = interfaceinvoke $r29.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("vectorId");

        suppV = virtualinvoke dictionary.<weka.core.pmml.VectorDictionary: weka.core.pmml.VectorInstance getVector(java.lang.String)>(vecId);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(suppV);

        if suppV != null goto label12;

        $r30 = new java.lang.Exception;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[SupportVectorMachine] : can\'t find vector with ID: ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(vecId);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in the vector dictionary!");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<java.lang.Exception: void <init>(java.lang.String)>($r35);

        throw $r30;

     label12:
        $r36 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$SupportVectorMachine: java.util.List m_supportVectors>;

        interfaceinvoke $r36.<java.util.List: boolean add(java.lang.Object)>(suppV);

        i#118 = i#118 + 1;

        goto label11;

     label13:
        goto label15;

     label14:
        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$SupportVectorMachine: boolean m_coeffsOnly> = 1;

     label15:
        coefficientsL = interfaceinvoke machineElement.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("Coefficients");

        $i6 = interfaceinvoke coefficientsL.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if $i6 == 1 goto label16;

        $r37 = new java.lang.Exception;

        specialinvoke $r37.<java.lang.Exception: void <init>(java.lang.String)>("[SupportVectorMachine] Should be just one list of coefficients per binary SVM!");

        throw $r37;

     label16:
        $r38 = interfaceinvoke coefficientsL.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        cL = (org.w3c.dom.Element) $r38;

        intercept = interfaceinvoke cL.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("absoluteValue");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(intercept);

        if intercept == null goto label17;

        $i7 = virtualinvoke intercept.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if $i7 <= 0 goto label17;

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(intercept);

        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$SupportVectorMachine: double m_intercept> = $d0;

     label17:
        coeffL = interfaceinvoke cL.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("Coefficient");

        $i8 = interfaceinvoke coeffL.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if $i8 != 0 goto label18;

        $r39 = new java.lang.Exception;

        specialinvoke $r39.<java.lang.Exception: void <init>(java.lang.String)>("[SupportVectorMachine] No coefficients defined!");

        throw $r39;

     label18:
        $i9 = interfaceinvoke coeffL.<org.w3c.dom.NodeList: int getLength()>();

        $r40 = newarray (double)[$i9];

        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$SupportVectorMachine: double[] m_coefficients> = $r40;

        i#185 = 0;

     label19:
        $i10 = interfaceinvoke coeffL.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#185);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i10);

        if i#185 >= $i10 goto label20;

        $r41 = interfaceinvoke coeffL.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i#185);

        coeff = (org.w3c.dom.Element) $r41;

        val = interfaceinvoke coeff.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("value");

        $r42 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$SupportVectorMachine: double[] m_coefficients>;

        $d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(val);

        $r42[i#185] = $d1;

        i#185 = i#185 + 1;

        goto label19;

     label20:
        return;
    }


