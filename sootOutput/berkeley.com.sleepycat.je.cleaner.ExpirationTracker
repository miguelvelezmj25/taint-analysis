    public void <init>(long)
    {
        berkeley.com.sleepycat.je.cleaner.ExpirationTracker this;
        long fileNum;
        java.util.HashMap $r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        this := @this: berkeley.com.sleepycat.je.cleaner.ExpirationTracker;

        fileNum := @parameter0: long;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        this.<berkeley.com.sleepycat.je.cleaner.ExpirationTracker: java.util.Map map> = $r0;

        $r1 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        this.<berkeley.com.sleepycat.je.cleaner.ExpirationTracker: java.util.concurrent.atomic.AtomicInteger pendingTrackCalls> = $r1;

        this.<berkeley.com.sleepycat.je.cleaner.ExpirationTracker: long fileNum> = fileNum;

        return;
    }

    public void incrementPendingTrackCalls()
    {
        berkeley.com.sleepycat.je.cleaner.ExpirationTracker this;
        java.util.concurrent.atomic.AtomicInteger $r0;

        this := @this: berkeley.com.sleepycat.je.cleaner.ExpirationTracker;

        $r0 = this.<berkeley.com.sleepycat.je.cleaner.ExpirationTracker: java.util.concurrent.atomic.AtomicInteger pendingTrackCalls>;

        virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        return;
    }

    public long getFileNum()
    {
        berkeley.com.sleepycat.je.cleaner.ExpirationTracker this;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.cleaner.ExpirationTracker;

        $l0 = this.<berkeley.com.sleepycat.je.cleaner.ExpirationTracker: long fileNum>;

        return $l0;
    }

    public void track(berkeley.com.sleepycat.je.log.entry.LogEntry, int)
    {
        berkeley.com.sleepycat.je.cleaner.ExpirationTracker this;
        berkeley.com.sleepycat.je.log.entry.LogEntry entry;
        int size, expiration, entrySize, expiration, $i1, i#36, $i2;
        berkeley.com.sleepycat.je.log.LogEntryType type, $r1, $r2;
        berkeley.com.sleepycat.je.log.entry.LNLogEntry lnEntry;
        berkeley.com.sleepycat.je.log.entry.INLogEntry inEntry;
        berkeley.com.sleepycat.je.tree.BIN bin;
        boolean inHours, $z0, $z1, $z2, $z3;
        java.util.concurrent.atomic.AtomicInteger $r0;

        this := @this: berkeley.com.sleepycat.je.cleaner.ExpirationTracker;

        entry := @parameter0: berkeley.com.sleepycat.je.log.entry.LogEntry;

        size := @parameter1: int;

        $r0 = this.<berkeley.com.sleepycat.je.cleaner.ExpirationTracker: java.util.concurrent.atomic.AtomicInteger pendingTrackCalls>;

        virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        type = interfaceinvoke entry.<berkeley.com.sleepycat.je.log.entry.LogEntry: berkeley.com.sleepycat.je.log.LogEntryType getLogType()>();

        $z0 = virtualinvoke type.<berkeley.com.sleepycat.je.log.LogEntryType: boolean isUserLNType()>();

        if $z0 == 0 goto label2;

        lnEntry = (berkeley.com.sleepycat.je.log.entry.LNLogEntry) entry;

        expiration = virtualinvoke lnEntry.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: int getExpiration()>();

        if expiration != 0 goto label1;

        return;

     label1:
        $z1 = virtualinvoke lnEntry.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: boolean isExpirationInHours()>();

        specialinvoke this.<berkeley.com.sleepycat.je.cleaner.ExpirationTracker: void track(int,boolean,int)>(expiration, $z1, size);

        return;

     label2:
        $r1 = <berkeley.com.sleepycat.je.log.LogEntryType: berkeley.com.sleepycat.je.log.LogEntryType LOG_BIN>;

        $z2 = virtualinvoke type.<berkeley.com.sleepycat.je.log.LogEntryType: boolean equals(java.lang.Object)>($r1);

        if $z2 != 0 goto label3;

        $r2 = <berkeley.com.sleepycat.je.log.LogEntryType: berkeley.com.sleepycat.je.log.LogEntryType LOG_BIN_DELTA>;

        $z3 = virtualinvoke type.<berkeley.com.sleepycat.je.log.LogEntryType: boolean equals(java.lang.Object)>($r2);

        if $z3 != 0 goto label3;

        return;

     label3:
        inEntry = (berkeley.com.sleepycat.je.log.entry.INLogEntry) entry;

        bin = virtualinvoke inEntry.<berkeley.com.sleepycat.je.log.entry.INLogEntry: berkeley.com.sleepycat.je.tree.BIN getBINWithExpiration()>();

        if bin != null goto label4;

        return;

     label4:
        inHours = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: boolean isExpirationInHours()>();

        $i1 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: int getNEntries()>();

        entrySize = size / $i1;

        i#36 = 0;

     label5:
        $i2 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: int getNEntries()>();

        if i#36 >= $i2 goto label8;

        expiration = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: int getExpiration(int)>(i#36);

        if expiration != 0 goto label6;

        goto label7;

     label6:
        specialinvoke this.<berkeley.com.sleepycat.je.cleaner.ExpirationTracker: void track(int,boolean,int)>(expiration, inHours, entrySize);

     label7:
        i#36 = i#36 + 1;

        goto label5;

     label8:
        return;
    }

    private void track(int, boolean, int)
    {
        berkeley.com.sleepycat.je.cleaner.ExpirationTracker this, l6;
        int expiration, size, $i0;
        boolean expirationInHours;
        java.lang.Integer expInHours;
        java.util.HashMap newMap, $r5;
        java.lang.Throwable l8, $r9;
        java.util.Map $r0, $r3, $r6;
        java.lang.Object $r1, $r4;
        java.util.concurrent.atomic.AtomicInteger counter#11, $r7;

        this := @this: berkeley.com.sleepycat.je.cleaner.ExpirationTracker;

        expiration := @parameter0: int;

        expirationInHours := @parameter1: boolean;

        size := @parameter2: int;

        if expirationInHours == 0 goto label1;

        $i0 = expiration;

        goto label2;

     label1:
        $i0 = 24 * expiration;

     label2:
        expInHours = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r0 = this.<berkeley.com.sleepycat.je.cleaner.ExpirationTracker: java.util.Map map>;

        $r1 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(expInHours);

        counter#11 = (java.util.concurrent.atomic.AtomicInteger) $r1;

        if counter#11 != null goto label9;

        l6 = this;

        entermonitor this;

     label3:
        $r3 = this.<berkeley.com.sleepycat.je.cleaner.ExpirationTracker: java.util.Map map>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(expInHours);

        counter#11 = (java.util.concurrent.atomic.AtomicInteger) $r4;

        if counter#11 != null goto label4;

        $r5 = new java.util.HashMap;

        $r6 = this.<berkeley.com.sleepycat.je.cleaner.ExpirationTracker: java.util.Map map>;

        specialinvoke $r5.<java.util.HashMap: void <init>(java.util.Map)>($r6);

        newMap = $r5;

        $r7 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        counter#11 = $r7;

        interfaceinvoke newMap.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(expInHours, counter#11);

        this.<berkeley.com.sleepycat.je.cleaner.ExpirationTracker: java.util.Map map> = newMap;

     label4:
        exitmonitor l6;

     label5:
        goto label9;

     label6:
        $r9 := @caughtexception;

     label7:
        l8 = $r9;

        exitmonitor l6;

     label8:
        throw l8;

     label9:
        virtualinvoke counter#11.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(size);

        return;

        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    byte[] serialize()
    {
        berkeley.com.sleepycat.je.cleaner.ExpirationTracker this;
        java.util.Map myMap;
        java.util.ArrayList expList, $r1;
        java.util.Iterator l4, l6;
        int exp, $i0, $i1, prevExp#35, exp#44, $i3, $i4;
        berkeley.com.sleepycat.bind.tuple.TupleOutput out, $r5;
        java.util.concurrent.atomic.AtomicInteger counter;
        boolean $z0, hours#16, $z2, $z3;
        byte[] $r0, $r13;
        java.util.Set $r2;
        java.lang.Object $r3, $r7, $r10;
        java.lang.Integer $r4, $r8, $r9;
        byte $b2;

        this := @this: berkeley.com.sleepycat.je.cleaner.ExpirationTracker;

        myMap = this.<berkeley.com.sleepycat.je.cleaner.ExpirationTracker: java.util.Map map>;

        $z0 = interfaceinvoke myMap.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r0 = <berkeley.com.sleepycat.je.tree.Key: byte[] EMPTY_KEY>;

        return $r0;

     label1:
        $r1 = new java.util.ArrayList;

        $i0 = interfaceinvoke myMap.<java.util.Map: int size()>();

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i0);

        expList = $r1;

        $r2 = interfaceinvoke myMap.<java.util.Map: java.util.Set keySet()>();

        interfaceinvoke expList.<java.util.List: boolean addAll(java.util.Collection)>($r2);

        staticinvoke <java.util.Collections: void sort(java.util.List)>(expList);

        hours#16 = 0;

        l4 = interfaceinvoke expList.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r3 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.Integer) $r3;

        exp = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $i1 = exp % 24;

        if $i1 == 0 goto label3;

        hours#16 = 1;

        goto label4;

     label3:
        goto label2;

     label4:
        $r5 = new berkeley.com.sleepycat.bind.tuple.TupleOutput;

        specialinvoke $r5.<berkeley.com.sleepycat.bind.tuple.TupleOutput: void <init>()>();

        out = $r5;

        if hours#16 == 0 goto label5;

        $b2 = 1;

        goto label6;

     label5:
        $b2 = 0;

     label6:
        virtualinvoke out.<berkeley.com.sleepycat.bind.tuple.TupleOutput: void write(int)>($b2);

        prevExp#35 = 0;

        l6 = interfaceinvoke expList.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $z3 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label9;

        $r7 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.Integer) $r7;

        exp#44 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(exp#44);

        $r10 = interfaceinvoke myMap.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        counter = (java.util.concurrent.atomic.AtomicInteger) $r10;

        if hours#16 != 0 goto label8;

        exp#44 = exp#44 / 24;

     label8:
        $i3 = exp#44 - prevExp#35;

        virtualinvoke out.<berkeley.com.sleepycat.bind.tuple.TupleOutput: berkeley.com.sleepycat.bind.tuple.TupleOutput writePackedInt(int)>($i3);

        $i4 = virtualinvoke counter.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        virtualinvoke out.<berkeley.com.sleepycat.bind.tuple.TupleOutput: berkeley.com.sleepycat.bind.tuple.TupleOutput writePackedInt(int)>($i4);

        prevExp#35 = exp#44;

        goto label7;

     label9:
        $r13 = virtualinvoke out.<berkeley.com.sleepycat.bind.tuple.TupleOutput: byte[] toByteArray()>();

        return $r13;
    }


