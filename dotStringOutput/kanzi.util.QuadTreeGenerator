digraph <init> {
"this := @this: kanzi.util.QuadTreeGenerator {1681705834}" -> "minNodeDim := @parameter0: int {1788673129}";
"minNodeDim := @parameter0: int {1788673129}" -> "isRGB := @parameter1: boolean {965896010}";
"isRGB := @parameter1: boolean {965896010}" -> "specialinvoke this.<java.lang.Object: void <init>()>() {1498652355}";
"specialinvoke this.<java.lang.Object: void <init>()>() {1498652355}" -> "this.<kanzi.util.QuadTreeGenerator: int minNodeDim> = minNodeDim {760569727}";
"this.<kanzi.util.QuadTreeGenerator: int minNodeDim> = minNodeDim {760569727}" -> "this.<kanzi.util.QuadTreeGenerator: boolean isRGB> = isRGB {743414087}";
"this.<kanzi.util.QuadTreeGenerator: boolean isRGB> = isRGB {743414087}" -> "return {736527638}";
}

digraph getNode {
"parent := @parameter0: kanzi.util.QuadTreeGenerator$Node {1600162398}" -> "x := @parameter1: int {236750200}";
"x := @parameter1: int {236750200}" -> "y := @parameter2: int {469043790}";
"y := @parameter2: int {469043790}" -> "w := @parameter3: int {132077700}";
"w := @parameter3: int {132077700}" -> "h := @parameter4: int {380034054}";
"h := @parameter4: int {380034054}" -> "isRGB := @parameter5: boolean {394683780}";
"isRGB := @parameter5: boolean {394683780}" -> "$r0 = new kanzi.util.QuadTreeGenerator$Node {38494826}";
"$r0 = new kanzi.util.QuadTreeGenerator$Node {38494826}" -> "specialinvoke $r0.<kanzi.util.QuadTreeGenerator$Node: void <init>(kanzi.util.QuadTreeGenerator$Node,int,int,int,int,boolean,kanzi.util.QuadTreeGenerator$1)>(parent, x, y, w, h, isRGB, null) {1183014886}";
"specialinvoke $r0.<kanzi.util.QuadTreeGenerator$Node: void <init>(kanzi.util.QuadTreeGenerator$Node,int,int,int,int,boolean,kanzi.util.QuadTreeGenerator$1)>(parent, x, y, w, h, isRGB, null) {1183014886}" -> "return $r0 {382517934}";
}

digraph decomposeNodes {
"this := @this: kanzi.util.QuadTreeGenerator {1637887870}" -> "list := @parameter0: java.util.Collection {1452197332}";
"list := @parameter0: java.util.Collection {1452197332}" -> "input := @parameter1: int[] {1680912922}";
"input := @parameter1: int[] {1680912922}" -> "nbNodes := @parameter2: int {1873562153}";
"nbNodes := @parameter2: int {1873562153}" -> "stride := @parameter3: int {1460592545}";
"stride := @parameter3: int {1460592545}" -> "$i0 = interfaceinvoke list.<java.util.Collection: int size()>() {930108142}";
"$i0 = interfaceinvoke list.<java.util.Collection: int size()>() {930108142}" -> "if nbNodes >= $i0 goto $i1 = interfaceinvoke list.<java.util.Collection: int size()>() {348030291}";
"if nbNodes >= $i0 goto $i1 = interfaceinvoke list.<java.util.Collection: int size()>() {348030291}" -> "$r0 = new java.lang.IllegalArgumentException {893000887}";
"if nbNodes >= $i0 goto $i1 = interfaceinvoke list.<java.util.Collection: int size()>() {348030291}" -> "$i1 = interfaceinvoke list.<java.util.Collection: int size()>() {25319574}";
"$r0 = new java.lang.IllegalArgumentException {893000887}" -> "specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"The target number of nodes must be at least list.size()\") {350024675}";
"specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(\"The target number of nodes must be at least list.size()\") {350024675}" -> "throw $r0 {920205920}";
"$i1 = interfaceinvoke list.<java.util.Collection: int size()>() {25319574}" -> "if nbNodes != $i1 goto $r1 = virtualinvoke this.<kanzi.util.QuadTreeGenerator: java.util.Collection decompose(java.util.Collection,int[],int,int,int)>(list, input, nbNodes, -1, stride) {2130147580}";
"if nbNodes != $i1 goto $r1 = virtualinvoke this.<kanzi.util.QuadTreeGenerator: java.util.Collection decompose(java.util.Collection,int[],int,int,int)>(list, input, nbNodes, -1, stride) {2130147580}" -> "return list {378027593}";
"if nbNodes != $i1 goto $r1 = virtualinvoke this.<kanzi.util.QuadTreeGenerator: java.util.Collection decompose(java.util.Collection,int[],int,int,int)>(list, input, nbNodes, -1, stride) {2130147580}" -> "$r1 = virtualinvoke this.<kanzi.util.QuadTreeGenerator: java.util.Collection decompose(java.util.Collection,int[],int,int,int)>(list, input, nbNodes, -1, stride) {951209854}";
"$r1 = virtualinvoke this.<kanzi.util.QuadTreeGenerator: java.util.Collection decompose(java.util.Collection,int[],int,int,int)>(list, input, nbNodes, -1, stride) {951209854}" -> "return $r1 {1644990493}";
}

digraph decompose {
"this := @this: kanzi.util.QuadTreeGenerator {1124536379}" -> "list := @parameter0: java.util.Collection {836863067}";
"list := @parameter0: java.util.Collection {836863067}" -> "input := @parameter1: int[] {315448128}";
"input := @parameter1: int[] {315448128}" -> "nbNodes := @parameter2: int {2112156074}";
"nbNodes := @parameter2: int {2112156074}" -> "variance := @parameter3: int {1821828279}";
"variance := @parameter3: int {1821828279}" -> "stride := @parameter4: int {622397427}";
"stride := @parameter4: int {622397427}" -> "if list != null goto $r0 = new java.util.TreeSet {243531618}";
"if list != null goto $r0 = new java.util.TreeSet {243531618}" -> "return null {1532160247}";
"if list != null goto $r0 = new java.util.TreeSet {243531618}" -> "$r0 = new java.util.TreeSet {2134862715}";
"$r0 = new java.util.TreeSet {2134862715}" -> "specialinvoke $r0.<java.util.TreeSet: void <init>()>() {56161269}";
"specialinvoke $r0.<java.util.TreeSet: void <init>()>() {56161269}" -> "processed = $r0 {1580171723}";
"processed = $r0 {1580171723}" -> "$r1 = new java.util.TreeSet {479283603}";
"$r1 = new java.util.TreeSet {479283603}" -> "specialinvoke $r1.<java.util.TreeSet: void <init>()>() {508445567}";
"specialinvoke $r1.<java.util.TreeSet: void <init>()>() {508445567}" -> "nodes = $r1 {705078143}";
"nodes = $r1 {705078143}" -> "l8 = interfaceinvoke list.<java.util.Collection: java.util.Iterator iterator()>() {1175257428}";
"l8 = interfaceinvoke list.<java.util.Collection: java.util.Iterator iterator()>() {1175257428}" -> "$z0 = interfaceinvoke l8.<java.util.Iterator: boolean hasNext()>() {1694860166}";
"$z0 = interfaceinvoke l8.<java.util.Iterator: boolean hasNext()>() {1694860166}" -> "if $z0 == 0 goto $i4 = virtualinvoke nodes.<java.util.TreeSet: int size()>() {1179330227}";
"if $z0 == 0 goto $i4 = virtualinvoke nodes.<java.util.TreeSet: int size()>() {1179330227}" -> "$r2 = interfaceinvoke l8.<java.util.Iterator: java.lang.Object next()>() {623834119}";
"if $z0 == 0 goto $i4 = virtualinvoke nodes.<java.util.TreeSet: int size()>() {1179330227}" -> "$i4 = virtualinvoke nodes.<java.util.TreeSet: int size()>() {1755325917}";
"$r2 = interfaceinvoke l8.<java.util.Iterator: java.lang.Object next()>() {623834119}" -> "node = (kanzi.util.QuadTreeGenerator$Node) $r2 {256204553}";
"node = (kanzi.util.QuadTreeGenerator$Node) $r2 {256204553}" -> "$i0 = node.<kanzi.util.QuadTreeGenerator$Node: int w> {1127079916}";
"$i0 = node.<kanzi.util.QuadTreeGenerator$Node: int w> {1127079916}" -> "$i1 = this.<kanzi.util.QuadTreeGenerator: int minNodeDim> {1771957293}";
"$i1 = this.<kanzi.util.QuadTreeGenerator: int minNodeDim> {1771957293}" -> "if $i0 <= $i1 goto virtualinvoke processed.<java.util.TreeSet: boolean add(java.lang.Object)>(node) {2087769448}";
"if $i0 <= $i1 goto virtualinvoke processed.<java.util.TreeSet: boolean add(java.lang.Object)>(node) {2087769448}" -> "$i2 = node.<kanzi.util.QuadTreeGenerator$Node: int h> {923865712}";
"if $i0 <= $i1 goto virtualinvoke processed.<java.util.TreeSet: boolean add(java.lang.Object)>(node) {2087769448}" -> "virtualinvoke processed.<java.util.TreeSet: boolean add(java.lang.Object)>(node) {1578058070}";
"$i2 = node.<kanzi.util.QuadTreeGenerator$Node: int h> {923865712}" -> "$i3 = this.<kanzi.util.QuadTreeGenerator: int minNodeDim> {1271538939}";
"$i3 = this.<kanzi.util.QuadTreeGenerator: int minNodeDim> {1271538939}" -> "if $i2 > $i3 goto virtualinvoke nodes.<java.util.TreeSet: boolean add(java.lang.Object)>(node) {1741951016}";
"if $i2 > $i3 goto virtualinvoke nodes.<java.util.TreeSet: boolean add(java.lang.Object)>(node) {1741951016}" -> "virtualinvoke processed.<java.util.TreeSet: boolean add(java.lang.Object)>(node) {1578058070}";
"if $i2 > $i3 goto virtualinvoke nodes.<java.util.TreeSet: boolean add(java.lang.Object)>(node) {1741951016}" -> "virtualinvoke nodes.<java.util.TreeSet: boolean add(java.lang.Object)>(node) {1802870631}";
"virtualinvoke processed.<java.util.TreeSet: boolean add(java.lang.Object)>(node) {1578058070}" -> "goto [?= (branch)] {2138351570}";
"goto [?= (branch)] {2138351570}" -> "goto [?= $z0 = interfaceinvoke l8.<java.util.Iterator: boolean hasNext()>()] {1403067071}";
"virtualinvoke nodes.<java.util.TreeSet: boolean add(java.lang.Object)>(node) {1802870631}" -> "goto [?= $z0 = interfaceinvoke l8.<java.util.Iterator: boolean hasNext()>()] {1403067071}";
"goto [?= $z0 = interfaceinvoke l8.<java.util.Iterator: boolean hasNext()>()] {1403067071}" -> "$z0 = interfaceinvoke l8.<java.util.Iterator: boolean hasNext()>() {1694860166}";
"$i4 = virtualinvoke nodes.<java.util.TreeSet: int size()>() {1755325917}" -> "if $i4 <= 0 goto virtualinvoke nodes.<java.util.TreeSet: boolean addAll(java.util.Collection)>(processed) {224302015}";
"if $i4 <= 0 goto virtualinvoke nodes.<java.util.TreeSet: boolean addAll(java.util.Collection)>(processed) {224302015}" -> "if nbNodes < 0 goto $r3 = virtualinvoke nodes.<java.util.TreeSet: java.lang.Object pollFirst()>() {1495977453}";
"if $i4 <= 0 goto virtualinvoke nodes.<java.util.TreeSet: boolean addAll(java.util.Collection)>(processed) {224302015}" -> "virtualinvoke nodes.<java.util.TreeSet: boolean addAll(java.util.Collection)>(processed) {657333313}";
"if nbNodes < 0 goto $r3 = virtualinvoke nodes.<java.util.TreeSet: java.lang.Object pollFirst()>() {1495977453}" -> "$i5 = virtualinvoke processed.<java.util.TreeSet: int size()>() {1232550661}";
"if nbNodes < 0 goto $r3 = virtualinvoke nodes.<java.util.TreeSet: java.lang.Object pollFirst()>() {1495977453}" -> "$r3 = virtualinvoke nodes.<java.util.TreeSet: java.lang.Object pollFirst()>() {1404533568}";
"$i5 = virtualinvoke processed.<java.util.TreeSet: int size()>() {1232550661}" -> "$i6 = virtualinvoke nodes.<java.util.TreeSet: int size()>() {414207897}";
"$i6 = virtualinvoke nodes.<java.util.TreeSet: int size()>() {414207897}" -> "$i7 = $i5 + $i6 {1141860882}";
"$i7 = $i5 + $i6 {1141860882}" -> "if $i7 >= nbNodes goto virtualinvoke nodes.<java.util.TreeSet: boolean addAll(java.util.Collection)>(processed) {1979811580}";
"if $i7 >= nbNodes goto virtualinvoke nodes.<java.util.TreeSet: boolean addAll(java.util.Collection)>(processed) {1979811580}" -> "$r3 = virtualinvoke nodes.<java.util.TreeSet: java.lang.Object pollFirst()>() {1404533568}";
"if $i7 >= nbNodes goto virtualinvoke nodes.<java.util.TreeSet: boolean addAll(java.util.Collection)>(processed) {1979811580}" -> "virtualinvoke nodes.<java.util.TreeSet: boolean addAll(java.util.Collection)>(processed) {657333313}";
"$r3 = virtualinvoke nodes.<java.util.TreeSet: java.lang.Object pollFirst()>() {1404533568}" -> "parent = (kanzi.util.QuadTreeGenerator$Node) $r3 {1240588663}";
"parent = (kanzi.util.QuadTreeGenerator$Node) $r3 {1240588663}" -> "$i8 = parent.<kanzi.util.QuadTreeGenerator$Node: int w> {1302579730}";
"$i8 = parent.<kanzi.util.QuadTreeGenerator$Node: int w> {1302579730}" -> "$i9 = this.<kanzi.util.QuadTreeGenerator: int minNodeDim> {2138686188}";
"$i9 = this.<kanzi.util.QuadTreeGenerator: int minNodeDim> {2138686188}" -> "if $i8 <= $i9 goto virtualinvoke processed.<java.util.TreeSet: boolean add(java.lang.Object)>(parent) {2046338079}";
"if $i8 <= $i9 goto virtualinvoke processed.<java.util.TreeSet: boolean add(java.lang.Object)>(parent) {2046338079}" -> "$i10 = parent.<kanzi.util.QuadTreeGenerator$Node: int h> {943248367}";
"if $i8 <= $i9 goto virtualinvoke processed.<java.util.TreeSet: boolean add(java.lang.Object)>(parent) {2046338079}" -> "virtualinvoke processed.<java.util.TreeSet: boolean add(java.lang.Object)>(parent) {1889942483}";
"$i10 = parent.<kanzi.util.QuadTreeGenerator$Node: int h> {943248367}" -> "$i11 = this.<kanzi.util.QuadTreeGenerator: int minNodeDim> {889425369}";
"$i11 = this.<kanzi.util.QuadTreeGenerator: int minNodeDim> {889425369}" -> "if $i10 > $i11 goto (branch) {1604452931}";
"if $i10 > $i11 goto (branch) {1604452931}" -> "virtualinvoke processed.<java.util.TreeSet: boolean add(java.lang.Object)>(parent) {1889942483}";
"if $i10 > $i11 goto (branch) {1604452931}" -> "if variance < 0 goto pw = parent.<kanzi.util.QuadTreeGenerator$Node: int w> {132576052}";
"virtualinvoke processed.<java.util.TreeSet: boolean add(java.lang.Object)>(parent) {1889942483}" -> "goto [?= $i4 = virtualinvoke nodes.<java.util.TreeSet: int size()>()] {259935003}";
"goto [?= $i4 = virtualinvoke nodes.<java.util.TreeSet: int size()>()] {259935003}" -> "$i4 = virtualinvoke nodes.<java.util.TreeSet: int size()>() {1755325917}";
"if variance < 0 goto pw = parent.<kanzi.util.QuadTreeGenerator$Node: int w> {132576052}" -> "$i12 = parent.<kanzi.util.QuadTreeGenerator$Node: int variance> {283216172}";
"if variance < 0 goto pw = parent.<kanzi.util.QuadTreeGenerator$Node: int w> {132576052}" -> "pw = parent.<kanzi.util.QuadTreeGenerator$Node: int w> {1806755546}";
"$i12 = parent.<kanzi.util.QuadTreeGenerator$Node: int variance> {283216172}" -> "if $i12 > variance goto pw = parent.<kanzi.util.QuadTreeGenerator$Node: int w> {412563706}";
"if $i12 > variance goto pw = parent.<kanzi.util.QuadTreeGenerator$Node: int w> {412563706}" -> "virtualinvoke processed.<java.util.TreeSet: boolean add(java.lang.Object)>(parent) {989764936}";
"if $i12 > variance goto pw = parent.<kanzi.util.QuadTreeGenerator$Node: int w> {412563706}" -> "pw = parent.<kanzi.util.QuadTreeGenerator$Node: int w> {1806755546}";
"virtualinvoke processed.<java.util.TreeSet: boolean add(java.lang.Object)>(parent) {989764936}" -> "goto [?= $i4 = virtualinvoke nodes.<java.util.TreeSet: int size()>()] {479364328}";
"goto [?= $i4 = virtualinvoke nodes.<java.util.TreeSet: int size()>()] {479364328}" -> "$i4 = virtualinvoke nodes.<java.util.TreeSet: int size()>() {1755325917}";
"pw = parent.<kanzi.util.QuadTreeGenerator$Node: int w> {1806755546}" -> "ph = parent.<kanzi.util.QuadTreeGenerator$Node: int h> {1889469944}";
"ph = parent.<kanzi.util.QuadTreeGenerator$Node: int h> {1889469944}" -> "px = parent.<kanzi.util.QuadTreeGenerator$Node: int x> {602424302}";
"px = parent.<kanzi.util.QuadTreeGenerator$Node: int x> {602424302}" -> "py = parent.<kanzi.util.QuadTreeGenerator$Node: int y> {90830505}";
"py = parent.<kanzi.util.QuadTreeGenerator$Node: int y> {90830505}" -> "$i13 = pw + 1 {370677426}";
"$i13 = pw + 1 {370677426}" -> "cw = $i13 >> 1 {1788366148}";
"cw = $i13 >> 1 {1788366148}" -> "$i14 = ph + 1 {998052978}";
"$i14 = ph + 1 {998052978}" -> "ch = $i14 >> 1 {2133115344}";
"ch = $i14 >> 1 {2133115344}" -> "$z5 = this.<kanzi.util.QuadTreeGenerator: boolean isRGB> {1434972520}";
"$z5 = this.<kanzi.util.QuadTreeGenerator: boolean isRGB> {1434972520}" -> "node1 = staticinvoke <kanzi.util.QuadTreeGenerator: kanzi.util.QuadTreeGenerator$Node getNode(kanzi.util.QuadTreeGenerator$Node,int,int,int,int,boolean)>(parent, px, py, cw, ch, $z5) {2060319495}";
"node1 = staticinvoke <kanzi.util.QuadTreeGenerator: kanzi.util.QuadTreeGenerator$Node getNode(kanzi.util.QuadTreeGenerator$Node,int,int,int,int,boolean)>(parent, px, py, cw, ch, $z5) {2060319495}" -> "$i15 = px + pw {1031513347}";
"$i15 = px + pw {1031513347}" -> "$i16 = $i15 - cw {1960985569}";
"$i16 = $i15 - cw {1960985569}" -> "$z6 = this.<kanzi.util.QuadTreeGenerator: boolean isRGB> {625780817}";
"$z6 = this.<kanzi.util.QuadTreeGenerator: boolean isRGB> {625780817}" -> "node2 = staticinvoke <kanzi.util.QuadTreeGenerator: kanzi.util.QuadTreeGenerator$Node getNode(kanzi.util.QuadTreeGenerator$Node,int,int,int,int,boolean)>(parent, $i16, py, cw, ch, $z6) {130863519}";
"node2 = staticinvoke <kanzi.util.QuadTreeGenerator: kanzi.util.QuadTreeGenerator$Node getNode(kanzi.util.QuadTreeGenerator$Node,int,int,int,int,boolean)>(parent, $i16, py, cw, ch, $z6) {130863519}" -> "$i17 = py + ph {768806904}";
"$i17 = py + ph {768806904}" -> "$i18 = $i17 - ch {914425176}";
"$i18 = $i17 - ch {914425176}" -> "$z7 = this.<kanzi.util.QuadTreeGenerator: boolean isRGB> {920272534}";
"$z7 = this.<kanzi.util.QuadTreeGenerator: boolean isRGB> {920272534}" -> "node3 = staticinvoke <kanzi.util.QuadTreeGenerator: kanzi.util.QuadTreeGenerator$Node getNode(kanzi.util.QuadTreeGenerator$Node,int,int,int,int,boolean)>(parent, px, $i18, cw, ch, $z7) {974642330}";
"node3 = staticinvoke <kanzi.util.QuadTreeGenerator: kanzi.util.QuadTreeGenerator$Node getNode(kanzi.util.QuadTreeGenerator$Node,int,int,int,int,boolean)>(parent, px, $i18, cw, ch, $z7) {974642330}" -> "$i19 = px + pw {813960240}";
"$i19 = px + pw {813960240}" -> "$i20 = $i19 - cw {1537389641}";
"$i20 = $i19 - cw {1537389641}" -> "$i21 = py + ph {701084704}";
"$i21 = py + ph {701084704}" -> "$i22 = $i21 - ch {230381356}";
"$i22 = $i21 - ch {230381356}" -> "$z8 = this.<kanzi.util.QuadTreeGenerator: boolean isRGB> {840622380}";
"$z8 = this.<kanzi.util.QuadTreeGenerator: boolean isRGB> {840622380}" -> "node4 = staticinvoke <kanzi.util.QuadTreeGenerator: kanzi.util.QuadTreeGenerator$Node getNode(kanzi.util.QuadTreeGenerator$Node,int,int,int,int,boolean)>(parent, $i20, $i22, cw, ch, $z8) {725411916}";
"node4 = staticinvoke <kanzi.util.QuadTreeGenerator: kanzi.util.QuadTreeGenerator$Node getNode(kanzi.util.QuadTreeGenerator$Node,int,int,int,int,boolean)>(parent, $i20, $i22, cw, ch, $z8) {725411916}" -> "virtualinvoke node1.<kanzi.util.QuadTreeGenerator$Node: int computeVariance(int[],int)>(input, stride) {509570736}";
"virtualinvoke node1.<kanzi.util.QuadTreeGenerator$Node: int computeVariance(int[],int)>(input, stride) {509570736}" -> "virtualinvoke node2.<kanzi.util.QuadTreeGenerator$Node: int computeVariance(int[],int)>(input, stride) {1494635707}";
"virtualinvoke node2.<kanzi.util.QuadTreeGenerator$Node: int computeVariance(int[],int)>(input, stride) {1494635707}" -> "virtualinvoke node3.<kanzi.util.QuadTreeGenerator$Node: int computeVariance(int[],int)>(input, stride) {405767401}";
"virtualinvoke node3.<kanzi.util.QuadTreeGenerator$Node: int computeVariance(int[],int)>(input, stride) {405767401}" -> "virtualinvoke node4.<kanzi.util.QuadTreeGenerator$Node: int computeVariance(int[],int)>(input, stride) {1458916985}";
"virtualinvoke node4.<kanzi.util.QuadTreeGenerator$Node: int computeVariance(int[],int)>(input, stride) {1458916985}" -> "virtualinvoke nodes.<java.util.TreeSet: boolean add(java.lang.Object)>(node1) {867864825}";
"virtualinvoke nodes.<java.util.TreeSet: boolean add(java.lang.Object)>(node1) {867864825}" -> "virtualinvoke nodes.<java.util.TreeSet: boolean add(java.lang.Object)>(node2) {1491253689}";
"virtualinvoke nodes.<java.util.TreeSet: boolean add(java.lang.Object)>(node2) {1491253689}" -> "virtualinvoke nodes.<java.util.TreeSet: boolean add(java.lang.Object)>(node3) {1015969408}";
"virtualinvoke nodes.<java.util.TreeSet: boolean add(java.lang.Object)>(node3) {1015969408}" -> "virtualinvoke nodes.<java.util.TreeSet: boolean add(java.lang.Object)>(node4) {1081373166}";
"virtualinvoke nodes.<java.util.TreeSet: boolean add(java.lang.Object)>(node4) {1081373166}" -> "goto [?= $i4 = virtualinvoke nodes.<java.util.TreeSet: int size()>()] {1801180367}";
"goto [?= $i4 = virtualinvoke nodes.<java.util.TreeSet: int size()>()] {1801180367}" -> "$i4 = virtualinvoke nodes.<java.util.TreeSet: int size()>() {1755325917}";
"virtualinvoke nodes.<java.util.TreeSet: boolean addAll(java.util.Collection)>(processed) {657333313}" -> "interfaceinvoke list.<java.util.Collection: void clear()>() {987602114}";
"interfaceinvoke list.<java.util.Collection: void clear()>() {987602114}" -> "interfaceinvoke list.<java.util.Collection: boolean addAll(java.util.Collection)>(nodes) {1783383660}";
"interfaceinvoke list.<java.util.Collection: boolean addAll(java.util.Collection)>(nodes) {1783383660}" -> "return list {17750411}";
}


