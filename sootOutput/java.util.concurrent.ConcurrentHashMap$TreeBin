    static void <clinit>()
    {
        java.lang.Class $r0, l0#6;
        boolean $z0, $z1;
        sun.misc.Unsafe $r1, $r2;
        java.lang.reflect.Field $r3;
        long $l0;
        java.lang.Exception $r4, l0#13;
        java.lang.Error $r5;

        $r0 = class "java/util/concurrent/ConcurrentHashMap";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <java.util.concurrent.ConcurrentHashMap$TreeBin: boolean $assertionsDisabled> = $z1;

     label3:
        $r1 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.ConcurrentHashMap$TreeBin: sun.misc.Unsafe U> = $r1;

        l0#6 = class "java/util/concurrent/ConcurrentHashMap$TreeBin";

        $r2 = <java.util.concurrent.ConcurrentHashMap$TreeBin: sun.misc.Unsafe U>;

        $r3 = virtualinvoke l0#6.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("lockState");

        $l0 = virtualinvoke $r2.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r3);

        <java.util.concurrent.ConcurrentHashMap$TreeBin: long LOCKSTATE> = $l0;

     label4:
        goto label6;

     label5:
        $r4 := @caughtexception;

        l0#13 = $r4;

        $r5 = new java.lang.Error;

        specialinvoke $r5.<java.lang.Error: void <init>(java.lang.Throwable)>(l0#13);

        throw $r5;

     label6:
        return;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    void <init>(java.util.concurrent.ConcurrentHashMap$TreeNode)
    {
        java.util.concurrent.ConcurrentHashMap$TreeBin l0;
        java.util.concurrent.ConcurrentHashMap$TreeNode l1, l4, l12, l2#8, l3#10, l8#34, $r2, $r3;
        java.lang.Object l5, l11;
        int l6, l10, $i0, l9#42, $i1;
        java.util.concurrent.ConcurrentHashMap$Node $r0;
        java.lang.Class l7#32, $r1;
        boolean $z0, $z1;
        java.lang.AssertionError $r4;

        l0 := @this: java.util.concurrent.ConcurrentHashMap$TreeBin;

        l1 := @parameter0: java.util.concurrent.ConcurrentHashMap$TreeNode;

        specialinvoke l0.<java.util.concurrent.ConcurrentHashMap$Node: void <init>(int,java.lang.Object,java.lang.Object,java.util.concurrent.ConcurrentHashMap$Node)>(-2, null, null, null);

        l0.<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode first> = l1;

        l2#8 = null;

        l3#10 = l1;

     label01:
        if l3#10 == null goto label15;

        $r0 = l3#10.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$Node next>;

        l4 = (java.util.concurrent.ConcurrentHashMap$TreeNode) $r0;

        l3#10.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right> = null;

        l3#10.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left> = null;

        if l2#8 != null goto label02;

        l3#10.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent> = null;

        l3#10.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 0;

        l2#8 = l3#10;

        goto label14;

     label02:
        l5 = l3#10.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.lang.Object key>;

        l6 = l3#10.<java.util.concurrent.ConcurrentHashMap$TreeNode: int hash>;

        l7#32 = null;

        l8#34 = l2#8;

     label03:
        l11 = l8#34.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.lang.Object key>;

        $i0 = l8#34.<java.util.concurrent.ConcurrentHashMap$TreeNode: int hash>;

        l10 = $i0;

        if $i0 <= l6 goto label04;

        l9#42 = -1;

        goto label08;

     label04:
        if l10 >= l6 goto label05;

        l9#42 = 1;

        goto label08;

     label05:
        if l7#32 != null goto label06;

        $r1 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.lang.Class comparableClassFor(java.lang.Object)>(l5);

        l7#32 = $r1;

        if $r1 == null goto label07;

     label06:
        $i1 = staticinvoke <java.util.concurrent.ConcurrentHashMap: int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)>(l7#32, l5, l11);

        l9#42 = $i1;

        if $i1 != 0 goto label08;

     label07:
        l9#42 = staticinvoke <java.util.concurrent.ConcurrentHashMap$TreeBin: int tieBreakOrder(java.lang.Object,java.lang.Object)>(l5, l11);

     label08:
        l12 = l8#34;

        if l9#42 > 0 goto label09;

        $r2 = l8#34.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left>;

        goto label10;

     label09:
        $r2 = l8#34.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right>;

     label10:
        l8#34 = $r2;

        if $r2 != null goto label13;

        l3#10.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent> = l12;

        if l9#42 > 0 goto label11;

        l12.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left> = l3#10;

        goto label12;

     label11:
        l12.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right> = l3#10;

     label12:
        l2#8 = staticinvoke <java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode balanceInsertion(java.util.concurrent.ConcurrentHashMap$TreeNode,java.util.concurrent.ConcurrentHashMap$TreeNode)>(l2#8, l3#10);

        goto label14;

     label13:
        goto label03;

     label14:
        l3#10 = l4;

        goto label01;

     label15:
        l0.<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode root> = l2#8;

        $z0 = <java.util.concurrent.ConcurrentHashMap$TreeBin: boolean $assertionsDisabled>;

        if $z0 != 0 goto label16;

        $r3 = l0.<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode root>;

        $z1 = staticinvoke <java.util.concurrent.ConcurrentHashMap$TreeBin: boolean checkInvariants(java.util.concurrent.ConcurrentHashMap$TreeNode)>($r3);

        if $z1 != 0 goto label16;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label16:
        return;
    }

    static boolean checkInvariants(java.util.concurrent.ConcurrentHashMap$TreeNode)
    {
        java.util.concurrent.ConcurrentHashMap$TreeNode l0, l1, l2, l3, l4, l5, $r2, $r3, $r4, $r5, $r6;
        java.util.concurrent.ConcurrentHashMap$Node $r0, $r1;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1, $z2, $z3, $z4;

        l0 := @parameter0: java.util.concurrent.ConcurrentHashMap$TreeNode;

        l1 = l0.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent>;

        l2 = l0.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left>;

        l3 = l0.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right>;

        l4 = l0.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode prev>;

        $r0 = l0.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$Node next>;

        l5 = (java.util.concurrent.ConcurrentHashMap$TreeNode) $r0;

        if l4 == null goto label01;

        $r1 = l4.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$Node next>;

        if $r1 == l0 goto label01;

        return 0;

     label01:
        if l5 == null goto label02;

        $r2 = l5.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode prev>;

        if $r2 == l0 goto label02;

        return 0;

     label02:
        if l1 == null goto label03;

        $r3 = l1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left>;

        if l0 == $r3 goto label03;

        $r4 = l1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right>;

        if l0 == $r4 goto label03;

        return 0;

     label03:
        if l2 == null goto label05;

        $r5 = l2.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent>;

        if $r5 != l0 goto label04;

        $i0 = l2.<java.util.concurrent.ConcurrentHashMap$TreeNode: int hash>;

        $i1 = l0.<java.util.concurrent.ConcurrentHashMap$TreeNode: int hash>;

        if $i0 <= $i1 goto label05;

     label04:
        return 0;

     label05:
        if l3 == null goto label07;

        $r6 = l3.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent>;

        if $r6 != l0 goto label06;

        $i2 = l3.<java.util.concurrent.ConcurrentHashMap$TreeNode: int hash>;

        $i3 = l0.<java.util.concurrent.ConcurrentHashMap$TreeNode: int hash>;

        if $i2 >= $i3 goto label07;

     label06:
        return 0;

     label07:
        $z0 = l0.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red>;

        if $z0 == 0 goto label08;

        if l2 == null goto label08;

        $z1 = l2.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red>;

        if $z1 == 0 goto label08;

        if l3 == null goto label08;

        $z2 = l3.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red>;

        if $z2 == 0 goto label08;

        return 0;

     label08:
        if l2 == null goto label09;

        $z3 = staticinvoke <java.util.concurrent.ConcurrentHashMap$TreeBin: boolean checkInvariants(java.util.concurrent.ConcurrentHashMap$TreeNode)>(l2);

        if $z3 != 0 goto label09;

        return 0;

     label09:
        if l3 == null goto label10;

        $z4 = staticinvoke <java.util.concurrent.ConcurrentHashMap$TreeBin: boolean checkInvariants(java.util.concurrent.ConcurrentHashMap$TreeNode)>(l3);

        if $z4 != 0 goto label10;

        return 0;

     label10:
        return 1;
    }

    static java.util.concurrent.ConcurrentHashMap$TreeNode balanceInsertion(java.util.concurrent.ConcurrentHashMap$TreeNode, java.util.concurrent.ConcurrentHashMap$TreeNode)
    {
        java.util.concurrent.ConcurrentHashMap$TreeNode l4, l5, l0#1, l1#2, $r0, l2#8, $r1, l3#17, $r2, $r3, $r4, $r6, $r7, $r8, $r10, $r11;
        boolean $z0, $z1, $z2;

        l0#1 := @parameter0: java.util.concurrent.ConcurrentHashMap$TreeNode;

        l1#2 := @parameter1: java.util.concurrent.ConcurrentHashMap$TreeNode;

        l1#2.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 1;

     label01:
        $r0 = l1#2.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent>;

        l2#8 = $r0;

        if $r0 != null goto label02;

        l1#2.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 0;

        return l1#2;

     label02:
        $z0 = l2#8.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red>;

        if $z0 == 0 goto label03;

        $r1 = l2#8.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent>;

        l3#17 = $r1;

        if $r1 != null goto label04;

     label03:
        return l0#1;

     label04:
        $r2 = l3#17.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left>;

        l4 = $r2;

        if l2#8 != $r2 goto label09;

        $r3 = l3#17.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right>;

        l5 = $r3;

        if $r3 == null goto label05;

        $z1 = l5.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red>;

        if $z1 == 0 goto label05;

        l5.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 0;

        l2#8.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 0;

        l3#17.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 1;

        l1#2 = l3#17;

        goto label01;

     label05:
        $r4 = l2#8.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right>;

        if l1#2 != $r4 goto label08;

        l1#2 = l2#8;

        l0#1 = staticinvoke <java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode rotateLeft(java.util.concurrent.ConcurrentHashMap$TreeNode,java.util.concurrent.ConcurrentHashMap$TreeNode)>(l0#1, l2#8);

        $r6 = l1#2.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent>;

        l2#8 = $r6;

        if $r6 != null goto label06;

        $r7 = null;

        goto label07;

     label06:
        $r7 = l2#8.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent>;

     label07:
        l3#17 = $r7;

     label08:
        if l2#8 == null goto label01;

        l2#8.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 0;

        if l3#17 == null goto label01;

        l3#17.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 1;

        l0#1 = staticinvoke <java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode rotateRight(java.util.concurrent.ConcurrentHashMap$TreeNode,java.util.concurrent.ConcurrentHashMap$TreeNode)>(l0#1, l3#17);

        goto label01;

     label09:
        if l4 == null goto label10;

        $z2 = l4.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red>;

        if $z2 == 0 goto label10;

        l4.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 0;

        l2#8.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 0;

        l3#17.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 1;

        l1#2 = l3#17;

        goto label01;

     label10:
        $r8 = l2#8.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left>;

        if l1#2 != $r8 goto label13;

        l1#2 = l2#8;

        l0#1 = staticinvoke <java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode rotateRight(java.util.concurrent.ConcurrentHashMap$TreeNode,java.util.concurrent.ConcurrentHashMap$TreeNode)>(l0#1, l2#8);

        $r10 = l1#2.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent>;

        l2#8 = $r10;

        if $r10 != null goto label11;

        $r11 = null;

        goto label12;

     label11:
        $r11 = l2#8.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent>;

     label12:
        l3#17 = $r11;

     label13:
        if l2#8 == null goto label01;

        l2#8.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 0;

        if l3#17 == null goto label01;

        l3#17.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 1;

        l0#1 = staticinvoke <java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode rotateLeft(java.util.concurrent.ConcurrentHashMap$TreeNode,java.util.concurrent.ConcurrentHashMap$TreeNode)>(l0#1, l3#17);

        goto label01;
    }

    static int tieBreakOrder(java.lang.Object, java.lang.Object)
    {
        java.lang.Object l0, l1;
        java.lang.Class $r0, $r2;
        java.lang.String $r1, $r3;
        int $i0, l2#11, $i1, $i2;
        byte $b3;

        l0 := @parameter0: java.lang.Object;

        l1 := @parameter1: java.lang.Object;

        if l0 == null goto label1;

        if l1 == null goto label1;

        $r0 = virtualinvoke l0.<java.lang.Object: java.lang.Class getClass()>();

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = virtualinvoke l1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int compareTo(java.lang.String)>($r3);

        l2#11 = $i0;

        if $i0 != 0 goto label4;

     label1:
        $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(l0);

        $i2 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(l1);

        if $i1 > $i2 goto label2;

        $b3 = -1;

        goto label3;

     label2:
        $b3 = 1;

     label3:
        l2#11 = $b3;

     label4:
        return l2#11;
    }

    static java.util.concurrent.ConcurrentHashMap$TreeNode rotateLeft(java.util.concurrent.ConcurrentHashMap$TreeNode, java.util.concurrent.ConcurrentHashMap$TreeNode)
    {
        java.util.concurrent.ConcurrentHashMap$TreeNode l1, l2, l4, l3, l0#1, $r0, $r1, $r3, $r6;

        l0#1 := @parameter0: java.util.concurrent.ConcurrentHashMap$TreeNode;

        l1 := @parameter1: java.util.concurrent.ConcurrentHashMap$TreeNode;

        if l1 == null goto label5;

        $r0 = l1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right>;

        l2 = $r0;

        if $r0 == null goto label5;

        $r1 = l2.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left>;

        l1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right> = $r1;

        l4 = $r1;

        if $r1 == null goto label1;

        l4.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent> = l1;

     label1:
        $r3 = l1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent>;

        l2.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent> = $r3;

        l3 = $r3;

        if $r3 != null goto label2;

        l0#1 = l2;

        l2.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 0;

        goto label4;

     label2:
        $r6 = l3.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left>;

        if $r6 != l1 goto label3;

        l3.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left> = l2;

        goto label4;

     label3:
        l3.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right> = l2;

     label4:
        l2.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left> = l1;

        l1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent> = l2;

     label5:
        return l0#1;
    }

    static java.util.concurrent.ConcurrentHashMap$TreeNode rotateRight(java.util.concurrent.ConcurrentHashMap$TreeNode, java.util.concurrent.ConcurrentHashMap$TreeNode)
    {
        java.util.concurrent.ConcurrentHashMap$TreeNode l1, l2, l4, l3, l0#1, $r0, $r1, $r3, $r6;

        l0#1 := @parameter0: java.util.concurrent.ConcurrentHashMap$TreeNode;

        l1 := @parameter1: java.util.concurrent.ConcurrentHashMap$TreeNode;

        if l1 == null goto label5;

        $r0 = l1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left>;

        l2 = $r0;

        if $r0 == null goto label5;

        $r1 = l2.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right>;

        l1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left> = $r1;

        l4 = $r1;

        if $r1 == null goto label1;

        l4.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent> = l1;

     label1:
        $r3 = l1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent>;

        l2.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent> = $r3;

        l3 = $r3;

        if $r3 != null goto label2;

        l0#1 = l2;

        l2.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 0;

        goto label4;

     label2:
        $r6 = l3.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right>;

        if $r6 != l1 goto label3;

        l3.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right> = l2;

        goto label4;

     label3:
        l3.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left> = l2;

     label4:
        l2.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right> = l1;

        l1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent> = l2;

     label5:
        return l0#1;
    }


