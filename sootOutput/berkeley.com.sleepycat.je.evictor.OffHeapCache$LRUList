    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "berkeley/com/sleepycat/je/evictor/OffHeapCache";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: boolean $assertionsDisabled> = $z1;

        return;
    }

    void <init>(berkeley.com.sleepycat.je.evictor.OffHeapCache, berkeley.com.sleepycat.je.evictor.OffHeapCache$1)
    {
        berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList this;
        berkeley.com.sleepycat.je.evictor.OffHeapCache x0;
        berkeley.com.sleepycat.je.evictor.OffHeapCache$1 x1;

        this := @this: berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList;

        x0 := @parameter0: berkeley.com.sleepycat.je.evictor.OffHeapCache;

        x1 := @parameter1: berkeley.com.sleepycat.je.evictor.OffHeapCache$1;

        specialinvoke this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: void <init>(berkeley.com.sleepycat.je.evictor.OffHeapCache)>(x0);

        return;
    }

    private void <init>(berkeley.com.sleepycat.je.evictor.OffHeapCache)
    {
        berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList this;
        berkeley.com.sleepycat.je.evictor.OffHeapCache l1;

        this := @this: berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList;

        l1 := @parameter0: berkeley.com.sleepycat.je.evictor.OffHeapCache;

        this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: berkeley.com.sleepycat.je.evictor.OffHeapCache this$0> = l1;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: int front> = -1;

        this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: int back> = -1;

        this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: int size> = 0;

        return;
    }

    void remove(int)
    {
        berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList this, l4;
        int entry, chunkIdx, $i0;
        berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk chunk;
        java.lang.Throwable l5, $r3;
        berkeley.com.sleepycat.je.evictor.OffHeapCache $r0;
        berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk[] $r1;

        this := @this: berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList;

        entry := @parameter0: int;

        $r0 = this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: berkeley.com.sleepycat.je.evictor.OffHeapCache this$0>;

        $r1 = staticinvoke <berkeley.com.sleepycat.je.evictor.OffHeapCache: berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk[] access$000(berkeley.com.sleepycat.je.evictor.OffHeapCache)>($r0);

        $i0 = entry / 102400;

        chunk = $r1[$i0];

        chunkIdx = entry % 102400;

        l4 = this;

        entermonitor this;

     label1:
        specialinvoke this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: void removeInternal(int,berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk,int)>(entry, chunk, chunkIdx);

        exitmonitor l4;

     label2:
        goto label6;

     label3:
        $r3 := @caughtexception;

     label4:
        l5 = $r3;

        exitmonitor l4;

     label5:
        throw l5;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void removeInternal(int, berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk, int)
    {
        berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList this;
        int entry, chunkIdx, prev, next, prevIdx, nextIdx, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk chunk, prevChunk, nextChunk;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        berkeley.com.sleepycat.je.tree.IN[] $r0;
        berkeley.com.sleepycat.je.tree.IN $r1;
        java.lang.AssertionError $r2, $r4, $r5, $r8, $r9, $r10, $r14, $r16, $r17, $r18, $r22;
        int[] $r3, $r6, $r7, $r13, $r15, $r21, $r23, $r24;
        berkeley.com.sleepycat.je.evictor.OffHeapCache $r11, $r19;
        berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk[] $r12, $r20;

        this := @this: berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList;

        entry := @parameter0: int;

        chunk := @parameter1: berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk;

        chunkIdx := @parameter2: int;

        $z0 = <berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label01;

        $r0 = chunk.<berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk: berkeley.com.sleepycat.je.tree.IN[] owners>;

        $r1 = $r0[chunkIdx];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 != null goto label01;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label01:
        $r3 = chunk.<berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk: int[] next>;

        $i0 = $r3[chunkIdx];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != -2 goto label02;

        return;

     label02:
        $z1 = <berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label03;

        $i1 = this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: int front>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 >= 0 goto label03;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label03:
        $z2 = <berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label04;

        $i2 = this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: int back>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 >= 0 goto label04;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label04:
        $r6 = chunk.<berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk: int[] prev>;

        prev = $r6[chunkIdx];

        $r7 = chunk.<berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk: int[] next>;

        next = $r7[chunkIdx];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(prev);

        if prev >= 0 goto label07;

        $z3 = <berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label05;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(prev);

        if prev == -1 goto label05;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label05:
        $z4 = <berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label06;

        $i3 = this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: int back>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(entry);

        if $i3 == entry goto label06;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label06:
        this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: int back> = next;

        goto label10;

     label07:
        $z5 = <berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 != 0 goto label08;

        $i4 = this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: int back>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(entry);

        if $i4 != entry goto label08;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label08:
        $r11 = this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: berkeley.com.sleepycat.je.evictor.OffHeapCache this$0>;

        $r12 = staticinvoke <berkeley.com.sleepycat.je.evictor.OffHeapCache: berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk[] access$000(berkeley.com.sleepycat.je.evictor.OffHeapCache)>($r11);

        $i5 = prev / 102400;

        prevChunk = $r12[$i5];

        prevIdx = prev % 102400;

        $z6 = <berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 != 0 goto label09;

        $r13 = prevChunk.<berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk: int[] next>;

        $i6 = $r13[prevIdx];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(entry);

        if $i6 == entry goto label09;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label09:
        $r15 = prevChunk.<berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk: int[] next>;

        $r15[prevIdx] = next;

     label10:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(next);

        if next >= 0 goto label13;

        $z7 = <berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 != 0 goto label11;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(next);

        if next == -1 goto label11;

        $r16 = new java.lang.AssertionError;

        specialinvoke $r16.<java.lang.AssertionError: void <init>()>();

        throw $r16;

     label11:
        $z8 = <berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 != 0 goto label12;

        $i7 = this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: int front>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(entry);

        if $i7 == entry goto label12;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();

        throw $r17;

     label12:
        this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: int front> = prev;

        goto label16;

     label13:
        $z9 = <berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 != 0 goto label14;

        $i8 = this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: int front>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(entry);

        if $i8 != entry goto label14;

        $r18 = new java.lang.AssertionError;

        specialinvoke $r18.<java.lang.AssertionError: void <init>()>();

        throw $r18;

     label14:
        $r19 = this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: berkeley.com.sleepycat.je.evictor.OffHeapCache this$0>;

        $r20 = staticinvoke <berkeley.com.sleepycat.je.evictor.OffHeapCache: berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk[] access$000(berkeley.com.sleepycat.je.evictor.OffHeapCache)>($r19);

        $i9 = next / 102400;

        nextChunk = $r20[$i9];

        nextIdx = next % 102400;

        $z10 = <berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z10);

        if $z10 != 0 goto label15;

        $r21 = nextChunk.<berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk: int[] prev>;

        $i10 = $r21[nextIdx];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i10);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(entry);

        if $i10 == entry goto label15;

        $r22 = new java.lang.AssertionError;

        specialinvoke $r22.<java.lang.AssertionError: void <init>()>();

        throw $r22;

     label15:
        $r23 = nextChunk.<berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk: int[] prev>;

        $r23[nextIdx] = prev;

     label16:
        $r24 = chunk.<berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk: int[] next>;

        $r24[chunkIdx] = -2;

        $i11 = this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: int size>;

        $i12 = $i11 - 1;

        this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: int size> = $i12;

        return;
    }

    void moveBack(int)
    {
        berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList this, l4;
        int entry, chunkIdx, $i0, $i1;
        berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk chunk;
        java.lang.Throwable l5, $r3;
        berkeley.com.sleepycat.je.evictor.OffHeapCache $r0;
        berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk[] $r1;

        this := @this: berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList;

        entry := @parameter0: int;

        $r0 = this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: berkeley.com.sleepycat.je.evictor.OffHeapCache this$0>;

        $r1 = staticinvoke <berkeley.com.sleepycat.je.evictor.OffHeapCache: berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk[] access$000(berkeley.com.sleepycat.je.evictor.OffHeapCache)>($r0);

        $i0 = entry / 102400;

        chunk = $r1[$i0];

        chunkIdx = entry % 102400;

        l4 = this;

        entermonitor this;

     label1:
        $i1 = this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: int back>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(entry);

        if $i1 != entry goto label3;

        exitmonitor l4;

     label2:
        return;

     label3:
        specialinvoke this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: void removeInternal(int,berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk,int)>(entry, chunk, chunkIdx);

        specialinvoke this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: void addBackInternal(int,berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk,int)>(entry, chunk, chunkIdx);

        exitmonitor l4;

     label4:
        goto label8;

     label5:
        $r3 := @caughtexception;

     label6:
        l5 = $r3;

        exitmonitor l4;

     label7:
        throw l5;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void addBackInternal(int, berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk, int)
    {
        berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList this;
        int entry, chunkIdx, nextIdx, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk chunk, nextChunk;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        berkeley.com.sleepycat.je.tree.IN[] $r0;
        berkeley.com.sleepycat.je.tree.IN $r1;
        java.lang.AssertionError $r2, $r4, $r5, $r6, $r9, $r13;
        int[] $r3, $r7, $r8, $r12, $r14, $r15, $r16;
        berkeley.com.sleepycat.je.evictor.OffHeapCache $r10;
        berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk[] $r11;

        this := @this: berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList;

        entry := @parameter0: int;

        chunk := @parameter1: berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk;

        chunkIdx := @parameter2: int;

        $z0 = <berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r0 = chunk.<berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk: berkeley.com.sleepycat.je.tree.IN[] owners>;

        $r1 = $r0[chunkIdx];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 != null goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $z1 = <berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

        $r3 = chunk.<berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk: int[] next>;

        $i0 = $r3[chunkIdx];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 == -2 goto label2;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        $i1 = this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: int back>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 >= 0 goto label5;

        $z2 = <berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label3;

        $i2 = this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: int back>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 == -1 goto label3;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label3:
        $z3 = <berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label4;

        $i3 = this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: int front>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 == -1 goto label4;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label4:
        $r7 = chunk.<berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk: int[] prev>;

        $r7[chunkIdx] = -1;

        $r8 = chunk.<berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk: int[] next>;

        $r8[chunkIdx] = -1;

        this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: int back> = entry;

        this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: int front> = entry;

        goto label8;

     label5:
        $z4 = <berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label6;

        $i4 = this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: int front>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 >= 0 goto label6;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label6:
        $r10 = this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: berkeley.com.sleepycat.je.evictor.OffHeapCache this$0>;

        $r11 = staticinvoke <berkeley.com.sleepycat.je.evictor.OffHeapCache: berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk[] access$000(berkeley.com.sleepycat.je.evictor.OffHeapCache)>($r10);

        $i5 = this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: int back>;

        $i6 = $i5 / 102400;

        nextChunk = $r11[$i6];

        $i7 = this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: int back>;

        nextIdx = $i7 % 102400;

        $z5 = <berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 != 0 goto label7;

        $r12 = nextChunk.<berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk: int[] prev>;

        $i8 = $r12[nextIdx];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if $i8 < 0 goto label7;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label7:
        $r14 = nextChunk.<berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk: int[] prev>;

        $r14[nextIdx] = entry;

        $r15 = chunk.<berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk: int[] next>;

        $i9 = this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: int back>;

        $r15[chunkIdx] = $i9;

        $r16 = chunk.<berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk: int[] prev>;

        $r16[chunkIdx] = -1;

        this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: int back> = entry;

     label8:
        $i10 = this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: int size>;

        $i11 = $i10 + 1;

        this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: int size> = $i11;

        return;
    }

    int removeFront()
    {
        berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList this, l1;
        int entry, chunkIdx, $i1;
        berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk chunk;
        java.lang.Throwable l5, $r3;
        berkeley.com.sleepycat.je.evictor.OffHeapCache $r1;
        berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk[] $r2;

        this := @this: berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList;

        l1 = this;

        entermonitor this;

     label1:
        entry = this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: int front>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(entry);

        if entry >= 0 goto label3;

        exitmonitor l1;

     label2:
        return -1;

     label3:
        $r1 = this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: berkeley.com.sleepycat.je.evictor.OffHeapCache this$0>;

        $r2 = staticinvoke <berkeley.com.sleepycat.je.evictor.OffHeapCache: berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk[] access$000(berkeley.com.sleepycat.je.evictor.OffHeapCache)>($r1);

        $i1 = entry / 102400;

        chunk = $r2[$i1];

        chunkIdx = entry % 102400;

        specialinvoke this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: void removeInternal(int,berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk,int)>(entry, chunk, chunkIdx);

        exitmonitor l1;

     label4:
        return entry;

     label5:
        $r3 := @caughtexception;

     label6:
        l5 = $r3;

        exitmonitor l1;

     label7:
        throw l5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    boolean contains(berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk, int)
    {
        berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList this, l3;
        berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk chunk;
        int chunkIdx, $i0, $i1;
        java.lang.Throwable l4, $r6;
        boolean $z0, $z1;
        int[] $r1, $r3;
        java.lang.AssertionError $r2;
        berkeley.com.sleepycat.je.tree.IN[] $r4;
        berkeley.com.sleepycat.je.tree.IN $r5;

        this := @this: berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList;

        chunk := @parameter0: berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk;

        chunkIdx := @parameter1: int;

        l3 = this;

        entermonitor this;

     label1:
        $z0 = <berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label2;

        $r1 = chunk.<berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk: int[] next>;

        $i0 = $r1[chunkIdx];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 >= -2 goto label2;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label2:
        $r3 = chunk.<berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk: int[] next>;

        $i1 = $r3[chunkIdx];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 == -2 goto label3;

        $r4 = chunk.<berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk: berkeley.com.sleepycat.je.tree.IN[] owners>;

        $r5 = $r4[chunkIdx];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r5);

        if $r5 == null goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        exitmonitor l3;

     label5:
        return $z1;

     label6:
        $r6 := @caughtexception;

     label7:
        l4 = $r6;

        exitmonitor l3;

     label8:
        throw l4;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    int getSize()
    {
        berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList this;
        int $i0;

        this := @this: berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList;

        $i0 = this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: int size>;

        return $i0;
    }

    void addBack(int, berkeley.com.sleepycat.je.tree.IN, long)
    {
        berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList this, l7;
        int entry, chunkIdx, $i0;
        berkeley.com.sleepycat.je.tree.IN owner;
        long memId;
        berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk chunk;
        java.lang.Throwable l8, $r5;
        berkeley.com.sleepycat.je.evictor.OffHeapCache $r0;
        berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk[] $r1;
        berkeley.com.sleepycat.je.tree.IN[] $r2;
        long[] $r3;

        this := @this: berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList;

        entry := @parameter0: int;

        owner := @parameter1: berkeley.com.sleepycat.je.tree.IN;

        memId := @parameter2: long;

        $r0 = this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: berkeley.com.sleepycat.je.evictor.OffHeapCache this$0>;

        $r1 = staticinvoke <berkeley.com.sleepycat.je.evictor.OffHeapCache: berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk[] access$000(berkeley.com.sleepycat.je.evictor.OffHeapCache)>($r0);

        $i0 = entry / 102400;

        chunk = $r1[$i0];

        chunkIdx = entry % 102400;

        $r2 = chunk.<berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk: berkeley.com.sleepycat.je.tree.IN[] owners>;

        $r2[chunkIdx] = owner;

        $r3 = chunk.<berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk: long[] memIds>;

        $r3[chunkIdx] = memId;

        l7 = this;

        entermonitor this;

     label1:
        specialinvoke this.<berkeley.com.sleepycat.je.evictor.OffHeapCache$LRUList: void addBackInternal(int,berkeley.com.sleepycat.je.evictor.OffHeapCache$Chunk,int)>(entry, chunk, chunkIdx);

        exitmonitor l7;

     label2:
        goto label6;

     label3:
        $r5 := @caughtexception;

     label4:
        l8 = $r5;

        exitmonitor l7;

     label5:
        throw l8;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }


