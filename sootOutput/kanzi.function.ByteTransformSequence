    public int getMaxEncodedLength(int)
    {
        kanzi.function.ByteTransformSequence this;
        int srcLength, l4, reqSize, requiredSize#2, l5#8;
        kanzi.ByteTransform[] l3;
        kanzi.ByteTransform transform;
        boolean $z0;
        kanzi.ByteFunction $r0;

        this := @this: kanzi.function.ByteTransformSequence;

        srcLength := @parameter0: int;

        requiredSize#2 = srcLength;

        l3 = this.<kanzi.function.ByteTransformSequence: kanzi.ByteTransform[] transforms>;

        l4 = lengthof l3;

        l5#8 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l5#8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l4);

        if l5#8 >= l4 goto label3;

        transform = l3[l5#8];

        $z0 = transform instanceof kanzi.ByteFunction;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $r0 = (kanzi.ByteFunction) transform;

        reqSize = interfaceinvoke $r0.<kanzi.ByteFunction: int getMaxEncodedLength(int)>(srcLength);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(reqSize);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(requiredSize#2);

        if reqSize <= requiredSize#2 goto label2;

        requiredSize#2 = reqSize;

     label2:
        l5#8 = l5#8 + 1;

        goto label1;

     label3:
        return requiredSize#2;
    }

    public boolean forward(kanzi.SliceByteArray, kanzi.SliceByteArray)
    {
        kanzi.function.ByteTransformSequence this;
        kanzi.SliceByteArray src, dst, sa1, sa2, $r4, $r6, $r19, $r21, $r22, $r24;
        int blockSize, requiredSize, savedIIdx, savedOIdx, count#11, $i0, $i1, $i2, $i3, $i4, $i5, $i6, i#54, $i7, $i9, $i10, $i11, $i12, $i13, $i15, $i16, $i17, $i19, i#134, $i21, $i22, $i23, $i25, $i26, $i27, $i28, $i29, $i30;
        kanzi.SliceByteArray[] sa, $r3;
        kanzi.ByteTransform transform;
        byte[] $r0, $r1, $r2, $r5, $r7, $r9, $r10, $r12, $r13, $r14, $r15, $r20, $r23;
        byte saIdx#47, $b8, $b14, $b18, $b20, $b24, $b31;
        kanzi.ByteTransform[] $r8, $r11, $r17;
        boolean $z0, $z1;

        this := @this: kanzi.function.ByteTransformSequence;

        src := @parameter0: kanzi.SliceByteArray;

        dst := @parameter1: kanzi.SliceByteArray;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(src);

        if src == null goto label01;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dst);

        if dst != null goto label02;

     label01:
        return 0;

     label02:
        $r0 = src.<kanzi.SliceByteArray: byte[] array>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label03;

        $r1 = dst.<kanzi.SliceByteArray: byte[] array>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 != null goto label04;

     label03:
        return 0;

     label04:
        count#11 = src.<kanzi.SliceByteArray: int length>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count#11);

        if count#11 != 0 goto label05;

        return 1;

     label05:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count#11);

        if count#11 < 0 goto label06;

        $i0 = src.<kanzi.SliceByteArray: int index>;

        $i1 = count#11 + $i0;

        $r2 = src.<kanzi.SliceByteArray: byte[] array>;

        $i2 = lengthof $r2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i1 <= $i2 goto label07;

     label06:
        return 0;

     label07:
        blockSize = count#11;

        $r3 = newarray (kanzi.SliceByteArray)[2];

        $r4 = new kanzi.SliceByteArray;

        $r5 = src.<kanzi.SliceByteArray: byte[] array>;

        $i3 = src.<kanzi.SliceByteArray: int length>;

        $i4 = src.<kanzi.SliceByteArray: int index>;

        specialinvoke $r4.<kanzi.SliceByteArray: void <init>(byte[],int,int)>($r5, $i3, $i4);

        $r3[0] = $r4;

        $r6 = new kanzi.SliceByteArray;

        $r7 = dst.<kanzi.SliceByteArray: byte[] array>;

        $i5 = dst.<kanzi.SliceByteArray: int length>;

        $i6 = dst.<kanzi.SliceByteArray: int index>;

        specialinvoke $r6.<kanzi.SliceByteArray: void <init>(byte[],int,int)>($r7, $i5, $i6);

        $r3[1] = $r6;

        sa = $r3;

        saIdx#47 = 0;

        requiredSize = virtualinvoke this.<kanzi.function.ByteTransformSequence: int getMaxEncodedLength(int)>(count#11);

        this.<kanzi.function.ByteTransformSequence: byte skipFlags> = 0;

        i#54 = 0;

     label08:
        $r8 = this.<kanzi.function.ByteTransformSequence: kanzi.ByteTransform[] transforms>;

        $i7 = lengthof $r8;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#54);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if i#54 >= $i7 goto label12;

        sa1 = sa[saIdx#47];

        $b8 = saIdx#47 ^ 1;

        sa2 = sa[$b8];

        $i9 = sa2.<kanzi.SliceByteArray: int length>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(requiredSize);

        if $i9 >= requiredSize goto label09;

        sa2.<kanzi.SliceByteArray: int length> = requiredSize;

        $r9 = sa2.<kanzi.SliceByteArray: byte[] array>;

        $i10 = lengthof $r9;

        $i11 = sa2.<kanzi.SliceByteArray: int length>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i10);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i11);

        if $i10 >= $i11 goto label09;

        $i12 = sa2.<kanzi.SliceByteArray: int length>;

        $r10 = newarray (byte)[$i12];

        sa2.<kanzi.SliceByteArray: byte[] array> = $r10;

     label09:
        savedIIdx = sa1.<kanzi.SliceByteArray: int index>;

        savedOIdx = sa2.<kanzi.SliceByteArray: int index>;

        $r11 = this.<kanzi.function.ByteTransformSequence: kanzi.ByteTransform[] transforms>;

        transform = $r11[i#54];

        sa1.<kanzi.SliceByteArray: int length> = count#11;

        $z0 = interfaceinvoke transform.<kanzi.ByteTransform: boolean forward(kanzi.SliceByteArray,kanzi.SliceByteArray)>(sa1, sa2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label11;

        $r12 = sa1.<kanzi.SliceByteArray: byte[] array>;

        $r13 = sa2.<kanzi.SliceByteArray: byte[] array>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r13);

        if $r12 == $r13 goto label10;

        $r14 = sa1.<kanzi.SliceByteArray: byte[] array>;

        $r15 = sa2.<kanzi.SliceByteArray: byte[] array>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r14, savedIIdx, $r15, savedOIdx, count#11);

     label10:
        $i13 = savedOIdx + count#11;

        sa2.<kanzi.SliceByteArray: int index> = $i13;

        $b14 = this.<kanzi.function.ByteTransformSequence: byte skipFlags>;

        $i15 = 3 - i#54;

        $i16 = 1 << $i15;

        $i17 = $b14 | $i16;

        $b18 = (byte) $i17;

        this.<kanzi.function.ByteTransformSequence: byte skipFlags> = $b18;

     label11:
        $i19 = sa2.<kanzi.SliceByteArray: int index>;

        count#11 = $i19 - savedOIdx;

        sa1.<kanzi.SliceByteArray: int index> = savedIIdx;

        sa2.<kanzi.SliceByteArray: int index> = savedOIdx;

        saIdx#47 = saIdx#47 ^ 1;

        i#54 = i#54 + 1;

        goto label08;

     label12:
        $r17 = this.<kanzi.function.ByteTransformSequence: kanzi.ByteTransform[] transforms>;

        i#134 = lengthof $r17;

     label13:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#134);

        if i#134 >= 4 goto label14;

        $b20 = this.<kanzi.function.ByteTransformSequence: byte skipFlags>;

        $i21 = 3 - i#134;

        $i22 = 1 << $i21;

        $i23 = $b20 | $i22;

        $b24 = (byte) $i23;

        this.<kanzi.function.ByteTransformSequence: byte skipFlags> = $b24;

        i#134 = i#134 + 1;

        goto label13;

     label14:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(saIdx#47);

        if saIdx#47 == 1 goto label15;

        $r19 = sa[0];

        $r20 = $r19.<kanzi.SliceByteArray: byte[] array>;

        $r21 = sa[0];

        $i25 = $r21.<kanzi.SliceByteArray: int index>;

        $r22 = sa[1];

        $r23 = $r22.<kanzi.SliceByteArray: byte[] array>;

        $r24 = sa[1];

        $i26 = $r24.<kanzi.SliceByteArray: int index>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r20, $i25, $r23, $i26, count#11);

     label15:
        $i27 = src.<kanzi.SliceByteArray: int index>;

        $i28 = $i27 + blockSize;

        src.<kanzi.SliceByteArray: int index> = $i28;

        $i29 = dst.<kanzi.SliceByteArray: int index>;

        $i30 = $i29 + count#11;

        dst.<kanzi.SliceByteArray: int index> = $i30;

        $b31 = this.<kanzi.function.ByteTransformSequence: byte skipFlags>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b31);

        if $b31 == 15 goto label16;

        $z1 = 1;

        goto label17;

     label16:
        $z1 = 0;

     label17:
        return $z1;
    }

    public byte getSkipFlags()
    {
        kanzi.function.ByteTransformSequence this;
        byte $b0;

        this := @this: kanzi.function.ByteTransformSequence;

        $b0 = this.<kanzi.function.ByteTransformSequence: byte skipFlags>;

        return $b0;
    }

    public void <init>(kanzi.ByteTransform[])
    {
        kanzi.function.ByteTransformSequence this;
        kanzi.ByteTransform[] transforms;
        java.lang.NullPointerException $r0, $r1;
        int $i0, $i1;

        this := @this: kanzi.function.ByteTransformSequence;

        transforms := @parameter0: kanzi.ByteTransform[];

        specialinvoke this.<java.lang.Object: void <init>()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(transforms);

        if transforms != null goto label1;

        $r0 = new java.lang.NullPointerException;

        specialinvoke $r0.<java.lang.NullPointerException: void <init>(java.lang.String)>("Invalid null transforms parameter");

        throw $r0;

     label1:
        $i0 = lengthof transforms;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 == 0 goto label2;

        $i1 = lengthof transforms;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 4 goto label3;

     label2:
        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("Only 1 to 4 transforms allowed");

        throw $r1;

     label3:
        this.<kanzi.function.ByteTransformSequence: kanzi.ByteTransform[] transforms> = transforms;

        return;
    }


