    static void <clinit>()
    {
        tool.dconvert.arg.ImageType$ECompression $r0, $r1, $r2, $r3, $r4, $r6, $r7, $r8, $r9, $r10;
        tool.dconvert.arg.ImageType$ECompression[] $r5;

        $r0 = new tool.dconvert.arg.ImageType$ECompression;

        specialinvoke $r0.<tool.dconvert.arg.ImageType$ECompression: void <init>(java.lang.String,int,boolean,java.lang.String)>("JPG", 0, 0, "jpg");

        <tool.dconvert.arg.ImageType$ECompression: tool.dconvert.arg.ImageType$ECompression JPG> = $r0;

        $r1 = new tool.dconvert.arg.ImageType$ECompression;

        specialinvoke $r1.<tool.dconvert.arg.ImageType$ECompression: void <init>(java.lang.String,int,boolean,java.lang.String)>("PNG", 1, 1, "png");

        <tool.dconvert.arg.ImageType$ECompression: tool.dconvert.arg.ImageType$ECompression PNG> = $r1;

        $r2 = new tool.dconvert.arg.ImageType$ECompression;

        specialinvoke $r2.<tool.dconvert.arg.ImageType$ECompression: void <init>(java.lang.String,int,boolean,java.lang.String)>("GIF", 2, 1, "gif");

        <tool.dconvert.arg.ImageType$ECompression: tool.dconvert.arg.ImageType$ECompression GIF> = $r2;

        $r3 = new tool.dconvert.arg.ImageType$ECompression;

        specialinvoke $r3.<tool.dconvert.arg.ImageType$ECompression: void <init>(java.lang.String,int,boolean,java.lang.String)>("TIFF", 3, 0, "tif");

        <tool.dconvert.arg.ImageType$ECompression: tool.dconvert.arg.ImageType$ECompression TIFF> = $r3;

        $r4 = new tool.dconvert.arg.ImageType$ECompression;

        specialinvoke $r4.<tool.dconvert.arg.ImageType$ECompression: void <init>(java.lang.String,int,boolean,java.lang.String)>("BMP", 4, 0, "bmp");

        <tool.dconvert.arg.ImageType$ECompression: tool.dconvert.arg.ImageType$ECompression BMP> = $r4;

        $r5 = newarray (tool.dconvert.arg.ImageType$ECompression)[5];

        $r6 = <tool.dconvert.arg.ImageType$ECompression: tool.dconvert.arg.ImageType$ECompression JPG>;

        $r5[0] = $r6;

        $r7 = <tool.dconvert.arg.ImageType$ECompression: tool.dconvert.arg.ImageType$ECompression PNG>;

        $r5[1] = $r7;

        $r8 = <tool.dconvert.arg.ImageType$ECompression: tool.dconvert.arg.ImageType$ECompression GIF>;

        $r5[2] = $r8;

        $r9 = <tool.dconvert.arg.ImageType$ECompression: tool.dconvert.arg.ImageType$ECompression TIFF>;

        $r5[3] = $r9;

        $r10 = <tool.dconvert.arg.ImageType$ECompression: tool.dconvert.arg.ImageType$ECompression BMP>;

        $r5[4] = $r10;

        <tool.dconvert.arg.ImageType$ECompression: tool.dconvert.arg.ImageType$ECompression[] $VALUES> = $r5;

        return;
    }

    private void <init>(java.lang.String, int, boolean, java.lang.String)
    {
        tool.dconvert.arg.ImageType$ECompression this;
        java.lang.String l1, extension;
        int l2;
        boolean hasTransparency;

        this := @this: tool.dconvert.arg.ImageType$ECompression;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: int;

        hasTransparency := @parameter2: boolean;

        extension := @parameter3: java.lang.String;

        specialinvoke this.<java.lang.Enum: void <init>(java.lang.String,int)>(l1, l2);

        this.<tool.dconvert.arg.ImageType$ECompression: boolean hasTransparency> = hasTransparency;

        this.<tool.dconvert.arg.ImageType$ECompression: java.lang.String extension> = extension;

        return;
    }


