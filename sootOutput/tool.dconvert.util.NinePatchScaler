    public void <init>()
    {
        tool.dconvert.util.NinePatchScaler this;
        tool.dconvert.converters.scaling.ThumbnailnatorProgressiveAlgorithm $r0;
        java.lang.Object $r1;

        this := @this: tool.dconvert.util.NinePatchScaler;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = new tool.dconvert.converters.scaling.ThumbnailnatorProgressiveAlgorithm;

        $r1 = <java.awt.RenderingHints: java.lang.Object VALUE_INTERPOLATION_BILINEAR>;

        specialinvoke $r0.<tool.dconvert.converters.scaling.ThumbnailnatorProgressiveAlgorithm: void <init>(java.lang.Object)>($r1);

        this.<tool.dconvert.util.NinePatchScaler: tool.dconvert.converters.scaling.ScaleAlgorithm borderScalerAlgorithm> = $r0;

        return;
    }

    public java.awt.image.BufferedImage scale(java.awt.image.BufferedImage, java.awt.Dimension, tool.dconvert.converters.scaling.ScaleAlgorithm) throws tool.dconvert.exceptions.NinePatchException
    {
        tool.dconvert.util.NinePatchScaler this;
        java.awt.image.BufferedImage inputImage, borderImage, trimmedImage#6, trimmedImage#14;
        java.awt.Dimension dimensions;
        tool.dconvert.converters.scaling.ScaleAlgorithm algorithm;
        int w, h, $i0, $i1, $i2;
        int[] rgbArray#28;

        this := @this: tool.dconvert.util.NinePatchScaler;

        inputImage := @parameter0: java.awt.image.BufferedImage;

        dimensions := @parameter1: java.awt.Dimension;

        algorithm := @parameter2: tool.dconvert.converters.scaling.ScaleAlgorithm;

        this.<tool.dconvert.util.NinePatchScaler: tool.dconvert.converters.scaling.ScaleAlgorithm algorithm> = algorithm;

        trimmedImage#6 = specialinvoke this.<tool.dconvert.util.NinePatchScaler: java.awt.image.BufferedImage trim9PBorder(java.awt.image.BufferedImage)>(inputImage);

        $i0 = dimensions.<java.awt.Dimension: int width>;

        $i1 = dimensions.<java.awt.Dimension: int height>;

        trimmedImage#14 = interfaceinvoke algorithm.<tool.dconvert.converters.scaling.ScaleAlgorithm: java.awt.image.BufferedImage scale(java.awt.image.BufferedImage,int,int)>(trimmedImage#6, $i0, $i1);

        w = virtualinvoke trimmedImage#14.<java.awt.image.BufferedImage: int getWidth()>();

        h = virtualinvoke trimmedImage#14.<java.awt.image.BufferedImage: int getHeight()>();

        borderImage = specialinvoke this.<tool.dconvert.util.NinePatchScaler: java.awt.image.BufferedImage generateBordersImage(java.awt.image.BufferedImage,int,int)>(inputImage, w, h);

        $i2 = w * h;

        rgbArray#28 = newarray (int)[$i2];

        virtualinvoke trimmedImage#14.<java.awt.image.BufferedImage: int[] getRGB(int,int,int,int,int[],int,int)>(0, 0, w, h, rgbArray#28, 0, w);

        virtualinvoke borderImage.<java.awt.image.BufferedImage: void setRGB(int,int,int,int,int[],int,int)>(1, 1, w, h, rgbArray#28, 0, w);

        return borderImage;
    }

    private java.awt.image.BufferedImage trim9PBorder(java.awt.image.BufferedImage)
    {
        tool.dconvert.util.NinePatchScaler this;
        java.awt.image.BufferedImage inputImage, trimedImage, $r0;
        java.awt.Graphics2D g;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;

        this := @this: tool.dconvert.util.NinePatchScaler;

        inputImage := @parameter0: java.awt.image.BufferedImage;

        $r0 = new java.awt.image.BufferedImage;

        $i0 = virtualinvoke inputImage.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = $i0 - 2;

        $i2 = virtualinvoke inputImage.<java.awt.image.BufferedImage: int getHeight()>();

        $i3 = $i2 - 2;

        specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i1, $i3, 2);

        trimedImage = $r0;

        g = virtualinvoke trimedImage.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        $i4 = virtualinvoke trimedImage.<java.awt.image.BufferedImage: int getWidth()>();

        $i5 = virtualinvoke trimedImage.<java.awt.image.BufferedImage: int getHeight()>();

        $i6 = virtualinvoke inputImage.<java.awt.image.BufferedImage: int getWidth()>();

        $i7 = $i6 - 1;

        $i8 = virtualinvoke inputImage.<java.awt.image.BufferedImage: int getHeight()>();

        $i9 = $i8 - 1;

        virtualinvoke g.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)>(inputImage, 0, 0, $i4, $i5, 1, 1, $i7, $i9, null);

        virtualinvoke g.<java.awt.Graphics2D: void dispose()>();

        return trimedImage;
    }

    private java.awt.image.BufferedImage generateBordersImage(java.awt.image.BufferedImage, int, int) throws tool.dconvert.exceptions.NinePatchException
    {
        tool.dconvert.util.NinePatchScaler this;
        java.awt.image.BufferedImage source, finalBorder, $r0, $r1, leftBorder#23, leftBorder#47, $r4, rightBorder#69, rightBorder#95, $r7, topBorder#119, topBorder#143, $r10, bottomBorder#165, bottomBorder#191;
        int trimedWidth, trimedHeight, cutW, cutH, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        int[] $r2, $r3, $r5, $r6, $r8, $r9, $r11, $r12;

        this := @this: tool.dconvert.util.NinePatchScaler;

        source := @parameter0: java.awt.image.BufferedImage;

        trimedWidth := @parameter1: int;

        trimedHeight := @parameter2: int;

        $r0 = new java.awt.image.BufferedImage;

        $i0 = trimedWidth + 2;

        $i1 = trimedHeight + 2;

        specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i0, $i1, 2);

        finalBorder = $r0;

        $i2 = virtualinvoke source.<java.awt.image.BufferedImage: int getWidth()>();

        cutW = $i2 - 2;

        $i3 = virtualinvoke source.<java.awt.image.BufferedImage: int getHeight()>();

        cutH = $i3 - 2;

        $r1 = new java.awt.image.BufferedImage;

        specialinvoke $r1.<java.awt.image.BufferedImage: void <init>(int,int,int)>(1, cutH, 2);

        leftBorder#23 = $r1;

        $r2 = virtualinvoke source.<java.awt.image.BufferedImage: int[] getRGB(int,int,int,int,int[],int,int)>(0, 1, 1, cutH, null, 0, 1);

        virtualinvoke leftBorder#23.<java.awt.image.BufferedImage: void setRGB(int,int,int,int,int[],int,int)>(0, 0, 1, cutH, $r2, 0, 1);

        specialinvoke this.<tool.dconvert.util.NinePatchScaler: void verifyBorderImage(java.awt.image.BufferedImage)>(leftBorder#23);

        leftBorder#47 = specialinvoke this.<tool.dconvert.util.NinePatchScaler: java.awt.image.BufferedImage resizeBorder(java.awt.image.BufferedImage,int,int)>(leftBorder#23, 1, trimedHeight);

        $r3 = virtualinvoke leftBorder#47.<java.awt.image.BufferedImage: int[] getRGB(int,int,int,int,int[],int,int)>(0, 0, 1, trimedHeight, null, 0, 1);

        virtualinvoke finalBorder.<java.awt.image.BufferedImage: void setRGB(int,int,int,int,int[],int,int)>(0, 1, 1, trimedHeight, $r3, 0, 1);

        $r4 = new java.awt.image.BufferedImage;

        specialinvoke $r4.<java.awt.image.BufferedImage: void <init>(int,int,int)>(1, cutH, 2);

        rightBorder#69 = $r4;

        $i4 = cutW + 1;

        $r5 = virtualinvoke source.<java.awt.image.BufferedImage: int[] getRGB(int,int,int,int,int[],int,int)>($i4, 1, 1, cutH, null, 0, 1);

        virtualinvoke rightBorder#69.<java.awt.image.BufferedImage: void setRGB(int,int,int,int,int[],int,int)>(0, 0, 1, cutH, $r5, 0, 1);

        specialinvoke this.<tool.dconvert.util.NinePatchScaler: void verifyBorderImage(java.awt.image.BufferedImage)>(rightBorder#69);

        rightBorder#95 = specialinvoke this.<tool.dconvert.util.NinePatchScaler: java.awt.image.BufferedImage resizeBorder(java.awt.image.BufferedImage,int,int)>(rightBorder#69, 1, trimedHeight);

        $i5 = trimedWidth + 1;

        $r6 = virtualinvoke rightBorder#95.<java.awt.image.BufferedImage: int[] getRGB(int,int,int,int,int[],int,int)>(0, 0, 1, trimedHeight, null, 0, 1);

        virtualinvoke finalBorder.<java.awt.image.BufferedImage: void setRGB(int,int,int,int,int[],int,int)>($i5, 1, 1, trimedHeight, $r6, 0, 1);

        $r7 = new java.awt.image.BufferedImage;

        specialinvoke $r7.<java.awt.image.BufferedImage: void <init>(int,int,int)>(cutW, 1, 2);

        topBorder#119 = $r7;

        $r8 = virtualinvoke source.<java.awt.image.BufferedImage: int[] getRGB(int,int,int,int,int[],int,int)>(1, 0, cutW, 1, null, 0, cutW);

        virtualinvoke topBorder#119.<java.awt.image.BufferedImage: void setRGB(int,int,int,int,int[],int,int)>(0, 0, cutW, 1, $r8, 0, cutW);

        specialinvoke this.<tool.dconvert.util.NinePatchScaler: void verifyBorderImage(java.awt.image.BufferedImage)>(topBorder#119);

        topBorder#143 = specialinvoke this.<tool.dconvert.util.NinePatchScaler: java.awt.image.BufferedImage resizeBorder(java.awt.image.BufferedImage,int,int)>(topBorder#119, trimedWidth, 1);

        $r9 = virtualinvoke topBorder#143.<java.awt.image.BufferedImage: int[] getRGB(int,int,int,int,int[],int,int)>(0, 0, trimedWidth, 1, null, 0, trimedWidth);

        virtualinvoke finalBorder.<java.awt.image.BufferedImage: void setRGB(int,int,int,int,int[],int,int)>(1, 0, trimedWidth, 1, $r9, 0, trimedWidth);

        $r10 = new java.awt.image.BufferedImage;

        specialinvoke $r10.<java.awt.image.BufferedImage: void <init>(int,int,int)>(cutW, 1, 2);

        bottomBorder#165 = $r10;

        $i6 = cutH + 1;

        $r11 = virtualinvoke source.<java.awt.image.BufferedImage: int[] getRGB(int,int,int,int,int[],int,int)>(1, $i6, cutW, 1, null, 0, cutW);

        virtualinvoke bottomBorder#165.<java.awt.image.BufferedImage: void setRGB(int,int,int,int,int[],int,int)>(0, 0, cutW, 1, $r11, 0, cutW);

        specialinvoke this.<tool.dconvert.util.NinePatchScaler: void verifyBorderImage(java.awt.image.BufferedImage)>(bottomBorder#165);

        bottomBorder#191 = specialinvoke this.<tool.dconvert.util.NinePatchScaler: java.awt.image.BufferedImage resizeBorder(java.awt.image.BufferedImage,int,int)>(bottomBorder#165, trimedWidth, 1);

        $i7 = trimedHeight + 1;

        $r12 = virtualinvoke bottomBorder#191.<java.awt.image.BufferedImage: int[] getRGB(int,int,int,int,int[],int,int)>(0, 0, trimedWidth, 1, null, 0, trimedWidth);

        virtualinvoke finalBorder.<java.awt.image.BufferedImage: void setRGB(int,int,int,int,int[],int,int)>(1, $i7, trimedWidth, 1, $r12, 0, trimedWidth);

        return finalBorder;
    }

    private void verifyBorderImage(java.awt.image.BufferedImage) throws tool.dconvert.exceptions.NinePatchException
    {
        tool.dconvert.util.NinePatchScaler this;
        java.awt.image.BufferedImage border;
        int[] rgb;
        int $i0, $i1, $i2, i#12, $i3, $i4, $i5, $i6, $i7;
        tool.dconvert.exceptions.NinePatchException $r0;

        this := @this: tool.dconvert.util.NinePatchScaler;

        border := @parameter0: java.awt.image.BufferedImage;

        $i0 = virtualinvoke border.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke border.<java.awt.image.BufferedImage: int getHeight()>();

        $i2 = virtualinvoke border.<java.awt.image.BufferedImage: int getWidth()>();

        rgb = virtualinvoke border.<java.awt.image.BufferedImage: int[] getRGB(int,int,int,int,int[],int,int)>(0, 0, $i0, $i1, null, 0, $i2);

        i#12 = 0;

     label1:
        $i3 = lengthof rgb;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if i#12 >= $i3 goto label3;

        $i4 = rgb[i#12];

        $i5 = -16777216 & $i4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i5 == 0 goto label2;

        $i6 = rgb[i#12];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if $i6 == -16777216 goto label2;

        $i7 = rgb[i#12];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if $i7 == -65536 goto label2;

        $r0 = new tool.dconvert.exceptions.NinePatchException;

        specialinvoke $r0.<tool.dconvert.exceptions.NinePatchException: void <init>()>();

        throw $r0;

     label2:
        i#12 = i#12 + 1;

        goto label1;

     label3:
        return;
    }

    private java.awt.image.BufferedImage resizeBorder(java.awt.image.BufferedImage, int, int)
    {
        tool.dconvert.util.NinePatchScaler this;
        java.awt.image.BufferedImage border, endImage, img, $r1;
        int targetWidth, targetHeight, w, h, newX, newY, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, y#60, x#64, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23;
        int[] data, newData;
        float widthRatio, heightRatio, $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        tool.dconvert.converters.scaling.ScaleAlgorithm $r0;

        this := @this: tool.dconvert.util.NinePatchScaler;

        border := @parameter0: java.awt.image.BufferedImage;

        targetWidth := @parameter1: int;

        targetHeight := @parameter2: int;

        $i0 = virtualinvoke border.<java.awt.image.BufferedImage: int getWidth()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(targetWidth);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if targetWidth > $i0 goto label1;

        $i1 = virtualinvoke border.<java.awt.image.BufferedImage: int getHeight()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(targetHeight);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if targetHeight <= $i1 goto label2;

     label1:
        $r0 = this.<tool.dconvert.util.NinePatchScaler: tool.dconvert.converters.scaling.ScaleAlgorithm borderScalerAlgorithm>;

        endImage = interfaceinvoke $r0.<tool.dconvert.converters.scaling.ScaleAlgorithm: java.awt.image.BufferedImage scale(java.awt.image.BufferedImage,int,int)>(border, targetWidth, targetHeight);

        specialinvoke this.<tool.dconvert.util.NinePatchScaler: void enforceBorderColors(java.awt.image.BufferedImage)>(endImage);

        return endImage;

     label2:
        w = virtualinvoke border.<java.awt.image.BufferedImage: int getWidth()>();

        h = virtualinvoke border.<java.awt.image.BufferedImage: int getHeight()>();

        data = virtualinvoke border.<java.awt.image.BufferedImage: int[] getRGB(int,int,int,int,int[],int,int)>(0, 0, w, h, null, 0, w);

        $i2 = targetWidth * targetHeight;

        newData = newarray (int)[$i2];

        $i3 = targetWidth - 1;

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>($i3, 1);

        $f0 = (float) $i4;

        $i5 = w - 1;

        $i6 = staticinvoke <java.lang.Math: int max(int,int)>($i5, 1);

        $f1 = (float) $i6;

        widthRatio = $f0 / $f1;

        $i7 = targetHeight - 1;

        $i8 = staticinvoke <java.lang.Math: int max(int,int)>($i7, 1);

        $f2 = (float) $i8;

        $i9 = h - 1;

        $i10 = staticinvoke <java.lang.Math: int max(int,int)>($i9, 1);

        $f3 = (float) $i10;

        heightRatio = $f2 / $f3;

        y#60 = 0;

     label3:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(y#60);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(h);

        if y#60 >= h goto label7;

        x#64 = 0;

     label4:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(x#64);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(w);

        if x#64 >= w goto label6;

        $i11 = y#60 * w;

        $i12 = $i11 + x#64;

        $i13 = data[$i12];

        $i14 = -16777216 & $i13;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i14);

        if $i14 == 0 goto label5;

        $f4 = (float) x#64;

        $f5 = $f4 * widthRatio;

        $i15 = staticinvoke <java.lang.Math: int round(float)>($f5);

        $i16 = targetWidth - 1;

        newX = staticinvoke <java.lang.Math: int min(int,int)>($i15, $i16);

        $f6 = (float) y#60;

        $f7 = $f6 * heightRatio;

        $i17 = staticinvoke <java.lang.Math: int round(float)>($f7);

        $i18 = targetHeight - 1;

        newY = staticinvoke <java.lang.Math: int min(int,int)>($i17, $i18);

        $i19 = newY * targetWidth;

        $i20 = $i19 + newX;

        $i21 = y#60 * w;

        $i22 = $i21 + x#64;

        $i23 = data[$i22];

        newData[$i20] = $i23;

     label5:
        x#64 = x#64 + 1;

        goto label4;

     label6:
        y#60 = y#60 + 1;

        goto label3;

     label7:
        $r1 = new java.awt.image.BufferedImage;

        specialinvoke $r1.<java.awt.image.BufferedImage: void <init>(int,int,int)>(targetWidth, targetHeight, 2);

        img = $r1;

        virtualinvoke img.<java.awt.image.BufferedImage: void setRGB(int,int,int,int,int[],int,int)>(0, 0, targetWidth, targetHeight, newData, 0, targetWidth);

        return img;
    }

    private void enforceBorderColors(java.awt.image.BufferedImage)
    {
        tool.dconvert.util.NinePatchScaler this;
        java.awt.image.BufferedImage inputImage;
        java.awt.Graphics2D g;
        int w, h, $i0, $i1, $i2, $i3, $i4, i#40, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        int[] rgb;
        java.awt.Color $r0;

        this := @this: tool.dconvert.util.NinePatchScaler;

        inputImage := @parameter0: java.awt.image.BufferedImage;

        g = virtualinvoke inputImage.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        $r0 = new java.awt.Color;

        specialinvoke $r0.<java.awt.Color: void <init>(int,int,int,int)>(0, 0, 0, 0);

        virtualinvoke g.<java.awt.Graphics2D: void setBackground(java.awt.Color)>($r0);

        $i0 = virtualinvoke inputImage.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = $i0 - 2;

        $i2 = virtualinvoke inputImage.<java.awt.image.BufferedImage: int getHeight()>();

        $i3 = $i2 - 2;

        virtualinvoke g.<java.awt.Graphics2D: void clearRect(int,int,int,int)>(1, 1, $i1, $i3);

        virtualinvoke g.<java.awt.Graphics2D: void dispose()>();

        w = virtualinvoke inputImage.<java.awt.image.BufferedImage: int getWidth()>();

        h = virtualinvoke inputImage.<java.awt.image.BufferedImage: int getHeight()>();

        $i4 = w * h;

        rgb = newarray (int)[$i4];

        virtualinvoke inputImage.<java.awt.image.BufferedImage: int[] getRGB(int,int,int,int,int[],int,int)>(0, 0, w, h, rgb, 0, w);

        i#40 = 0;

     label1:
        $i5 = lengthof rgb;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#40);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if i#40 >= $i5 goto label3;

        $i6 = rgb[i#40];

        $i7 = -16777216 & $i6;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if $i7 == 0 goto label2;

        rgb[i#40] = -16777216;

     label2:
        i#40 = i#40 + 1;

        goto label1;

     label3:
        virtualinvoke inputImage.<java.awt.image.BufferedImage: void setRGB(int,int,int,int,int[],int,int)>(0, 0, w, h, rgb, 0, w);

        virtualinvoke inputImage.<java.awt.image.BufferedImage: void setRGB(int,int,int)>(0, 0, 0);

        $i8 = h - 1;

        virtualinvoke inputImage.<java.awt.image.BufferedImage: void setRGB(int,int,int)>(0, $i8, 0);

        $i9 = w - 1;

        $i10 = h - 1;

        virtualinvoke inputImage.<java.awt.image.BufferedImage: void setRGB(int,int,int)>($i9, $i10, 0);

        $i11 = w - 1;

        virtualinvoke inputImage.<java.awt.image.BufferedImage: void setRGB(int,int,int)>($i11, 0, 0);

        return;
    }


