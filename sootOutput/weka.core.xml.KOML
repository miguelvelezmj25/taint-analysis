    public static boolean write(java.io.OutputStream, java.lang.Object) throws java.lang.Exception
    {
        java.io.OutputStream stream;
        java.lang.Object o, koml;
        java.lang.Class komlClass, $r0;
        java.lang.Class[] komlClassArgs, addArgsClasses, closeArgsClasses;
        java.lang.Object[] komlArgs, addArgs, closeArgs;
        java.lang.reflect.Constructor constructor;
        java.lang.reflect.Method methodAdd, methodClose;
        java.lang.Exception e, $r4;
        java.lang.Throwable l15, $r6;
        boolean result#2, result#54;
        java.lang.Boolean $r1;

        stream := @parameter0: java.io.OutputStream;

        o := @parameter1: java.lang.Object;

        result#2 = 0;

        komlClass = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("fr.dyade.koala.xml.koml.KOMLSerializer");

        komlClassArgs = newarray (java.lang.Class)[2];

        komlClassArgs[0] = class "java/io/OutputStream";

        $r0 = <java.lang.Boolean: java.lang.Class TYPE>;

        komlClassArgs[1] = $r0;

        komlArgs = newarray (java.lang.Object)[2];

        komlArgs[0] = stream;

        $r1 = new java.lang.Boolean;

        specialinvoke $r1.<java.lang.Boolean: void <init>(boolean)>(0);

        komlArgs[1] = $r1;

        constructor = virtualinvoke komlClass.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(komlClassArgs);

        koml = virtualinvoke constructor.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(komlArgs);

        addArgsClasses = newarray (java.lang.Class)[1];

        addArgsClasses[0] = class "java/lang/Object";

        methodAdd = virtualinvoke komlClass.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("addObject", addArgsClasses);

        addArgs = newarray (java.lang.Object)[1];

        addArgs[0] = o;

        closeArgsClasses = newarray (java.lang.Class)[0];

        methodClose = virtualinvoke komlClass.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("close", closeArgsClasses);

        closeArgs = newarray (java.lang.Object)[0];

     label1:
        virtualinvoke methodAdd.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(koml, addArgs);

        result#54 = 1;

     label2:
        virtualinvoke methodClose.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(koml, closeArgs);

        goto label9;

     label3:
        $r4 := @caughtexception;

     label4:
        e = $r4;

        result#54 = 0;

     label5:
        virtualinvoke methodClose.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(koml, closeArgs);

        goto label9;

     label6:
        $r6 := @caughtexception;

     label7:
        l15 = $r6;

     label8:
        virtualinvoke methodClose.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(koml, closeArgs);

        throw l15;

     label9:
        return result#54;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public static boolean isPresent()
    {
        boolean $z0;

        $z0 = <weka.core.xml.KOML: boolean m_Present>;

        return $z0;
    }

    public static java.lang.Object read(java.io.InputStream) throws java.lang.Exception
    {
        java.io.InputStream stream;
        java.lang.Class komlClass, $r0;
        java.lang.Class[] komlClassArgs, readArgsClasses, closeArgsClasses;
        java.lang.Object[] komlArgs, readArgs, closeArgs;
        java.lang.reflect.Constructor constructor;
        java.lang.Object koml, result#47;
        java.lang.reflect.Method methodRead, methodClose;
        java.lang.Throwable l14, $r3;
        java.lang.Boolean $r1;
        java.lang.Exception $r2;

        stream := @parameter0: java.io.InputStream;

        komlClass = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("fr.dyade.koala.xml.koml.KOMLDeserializer");

        komlClassArgs = newarray (java.lang.Class)[2];

        komlClassArgs[0] = class "java/io/InputStream";

        $r0 = <java.lang.Boolean: java.lang.Class TYPE>;

        komlClassArgs[1] = $r0;

        komlArgs = newarray (java.lang.Object)[2];

        komlArgs[0] = stream;

        $r1 = new java.lang.Boolean;

        specialinvoke $r1.<java.lang.Boolean: void <init>(boolean)>(0);

        komlArgs[1] = $r1;

        constructor = virtualinvoke komlClass.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(komlClassArgs);

        koml = virtualinvoke constructor.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(komlArgs);

        readArgsClasses = newarray (java.lang.Class)[0];

        methodRead = virtualinvoke komlClass.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("readObject", readArgsClasses);

        readArgs = newarray (java.lang.Object)[0];

        closeArgsClasses = newarray (java.lang.Class)[0];

        methodClose = virtualinvoke komlClass.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("close", closeArgsClasses);

        closeArgs = newarray (java.lang.Object)[0];

     label1:
        result#47 = virtualinvoke methodRead.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(koml, readArgs);

     label2:
        virtualinvoke methodClose.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(koml, closeArgs);

        goto label9;

     label3:
        $r2 := @caughtexception;

     label4:
        result#47 = null;

     label5:
        virtualinvoke methodClose.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(koml, closeArgs);

        goto label9;

     label6:
        $r3 := @caughtexception;

     label7:
        l14 = $r3;

     label8:
        virtualinvoke methodClose.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(koml, closeArgs);

        throw l14;

     label9:
        return result#47;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    static void <clinit>()
    {
        <weka.core.xml.KOML: boolean m_Present> = 0;

        staticinvoke <weka.core.xml.KOML: void checkForKOML()>();

        return;
    }

    private static void checkForKOML()
    {
        java.lang.Exception e, $r1;

     label1:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("fr.dyade.koala.xml.koml.KOMLSerializer");

        <weka.core.xml.KOML: boolean m_Present> = 1;

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        e = $r1;

        <weka.core.xml.KOML: boolean m_Present> = 0;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }


