    static void <clinit>()
    {
        java.io.InputStream inR;
        java.io.LineNumberReader lnr, $r3;
        java.lang.String line, $r9, $r12, $r22, $r24, $r26;
        int[] maj, min, rev, point;
        java.lang.Exception e, $r5;
        weka.core.Version $r0;
        java.lang.Class $r1, $r8;
        java.lang.ClassLoader $r2;
        java.io.InputStreamReader $r4;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.io.PrintStream $r6;
        java.lang.StringBuilder $r7, $r10, $r11, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r23, $r25;

        <weka.core.Version: int MAJOR> = 3;

        <weka.core.Version: int MINOR> = 4;

        <weka.core.Version: int REVISION> = 3;

        <weka.core.Version: int POINT> = 0;

        <weka.core.Version: boolean SNAPSHOT> = 0;

     label1:
        $r0 = new weka.core.Version;

        specialinvoke $r0.<weka.core.Version: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        inR = virtualinvoke $r2.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("weka/core/version.txt");

        $r3 = new java.io.LineNumberReader;

        $r4 = new java.io.InputStreamReader;

        specialinvoke $r4.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(inR);

        specialinvoke $r3.<java.io.LineNumberReader: void <init>(java.io.Reader)>($r4);

        lnr = $r3;

        line = virtualinvoke lnr.<java.io.LineNumberReader: java.lang.String readLine()>();

        maj = newarray (int)[1];

        min = newarray (int)[1];

        rev = newarray (int)[1];

        point = newarray (int)[1];

        $z0 = staticinvoke <weka.core.Version: boolean parseVersion(java.lang.String,int[],int[],int[],int[])>(line, maj, min, rev, point);

        <weka.core.Version: boolean SNAPSHOT> = $z0;

        $i0 = maj[0];

        <weka.core.Version: int MAJOR> = $i0;

        $i1 = min[0];

        <weka.core.Version: int MINOR> = $i1;

        $i2 = rev[0];

        <weka.core.Version: int REVISION> = $i2;

        $i3 = point[0];

        <weka.core.Version: int POINT> = $i3;

        virtualinvoke lnr.<java.io.LineNumberReader: void close()>();

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        e = $r5;

        $r6 = <java.lang.System: java.io.PrintStream err>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = class "weka/core/Version";

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Unable to load version information!");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r12);

     label4:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $i4 = <weka.core.Version: int MAJOR>;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $i5 = <weka.core.Version: int MINOR>;

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $i6 = <weka.core.Version: int REVISION>;

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $i7 = <weka.core.Version: int POINT>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if $i7 <= 0 goto label5;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $i8 = <weka.core.Version: int POINT>;

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label6;

     label5:
        $r22 = "";

     label6:
        $r23 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $z1 = <weka.core.Version: boolean SNAPSHOT>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label7;

        $r24 = "-SNAPSHOT";

        goto label8;

     label7:
        $r24 = "";

     label8:
        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        <weka.core.Version: java.lang.String VERSION> = $r26;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static boolean parseVersion(java.lang.String, int[], int[], int[], int[])
    {
        java.lang.String version, tmpStr#12, $r0, $r1, tmpStr#29, $r2, tmpStr#48, $r3, tmpStr#67, $r4, tmpStr#85;
        int[] maj, min, rev, point;
        java.lang.Exception e, $r5;
        java.lang.Throwable l11, $r6;
        int major#2, minor#4, revision#6, pnt#8, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        boolean isSnapshot#10, $z0, $z1, $z2, $z3, $z4;
        byte revision#127;

        version := @parameter0: java.lang.String;

        maj := @parameter1: int[];

        min := @parameter2: int[];

        rev := @parameter3: int[];

        point := @parameter4: int[];

        major#2 = 0;

        minor#4 = 0;

        revision#6 = 0;

        pnt#8 = 0;

        isSnapshot#10 = 0;

     label01:
        tmpStr#12 = version;

        $r0 = virtualinvoke tmpStr#12.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r0.<java.lang.String: boolean endsWith(java.lang.String)>("-snapshot");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label02;

        $r1 = virtualinvoke tmpStr#12.<java.lang.String: java.lang.String toLowerCase()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>("-snapshot");

        tmpStr#12 = virtualinvoke tmpStr#12.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        isSnapshot#10 = 1;

     label02:
        tmpStr#29 = virtualinvoke tmpStr#12.<java.lang.String: java.lang.String replace(char,char)>(45, 46);

        $i1 = virtualinvoke tmpStr#29.<java.lang.String: int indexOf(java.lang.String)>(".");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= -1 goto label08;

        $i2 = virtualinvoke tmpStr#29.<java.lang.String: int indexOf(java.lang.String)>(".");

        $r2 = virtualinvoke tmpStr#29.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        major#2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        $i3 = virtualinvoke tmpStr#29.<java.lang.String: int indexOf(java.lang.String)>(".");

        $i4 = $i3 + 1;

        tmpStr#48 = virtualinvoke tmpStr#29.<java.lang.String: java.lang.String substring(int)>($i4);

        $i5 = virtualinvoke tmpStr#48.<java.lang.String: int indexOf(java.lang.String)>(".");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i5 <= -1 goto label06;

        $i6 = virtualinvoke tmpStr#48.<java.lang.String: int indexOf(java.lang.String)>(".");

        $r3 = virtualinvoke tmpStr#48.<java.lang.String: java.lang.String substring(int,int)>(0, $i6);

        minor#4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        $i7 = virtualinvoke tmpStr#48.<java.lang.String: int indexOf(java.lang.String)>(".");

        $i8 = $i7 + 1;

        tmpStr#67 = virtualinvoke tmpStr#48.<java.lang.String: java.lang.String substring(int)>($i8);

        $i9 = virtualinvoke tmpStr#67.<java.lang.String: int indexOf(java.lang.String)>(".");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        if $i9 <= 0 goto label04;

        $i10 = virtualinvoke tmpStr#67.<java.lang.String: int indexOf(java.lang.String)>(".");

        $r4 = virtualinvoke tmpStr#67.<java.lang.String: java.lang.String substring(int,int)>(0, $i10);

        revision#6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

        $i11 = virtualinvoke tmpStr#67.<java.lang.String: int indexOf(java.lang.String)>(".");

        $i12 = $i11 + 1;

        tmpStr#85 = virtualinvoke tmpStr#67.<java.lang.String: java.lang.String substring(int)>($i12);

        $z1 = virtualinvoke tmpStr#85.<java.lang.String: boolean equals(java.lang.Object)>("");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label03;

        pnt#8 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(tmpStr#85);

        goto label10;

     label03:
        pnt#8 = 0;

        goto label10;

     label04:
        $z2 = virtualinvoke tmpStr#67.<java.lang.String: boolean equals(java.lang.Object)>("");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label05;

        revision#6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(tmpStr#67);

        goto label10;

     label05:
        revision#6 = 0;

        goto label10;

     label06:
        $z3 = virtualinvoke tmpStr#48.<java.lang.String: boolean equals(java.lang.Object)>("");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label07;

        minor#4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(tmpStr#48);

        goto label10;

     label07:
        minor#4 = 0;

        goto label10;

     label08:
        $z4 = virtualinvoke tmpStr#29.<java.lang.String: boolean equals(java.lang.Object)>("");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label09;

        major#2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(tmpStr#29);

        goto label10;

     label09:
        major#2 = 0;

     label10:
        maj[0] = major#2;

        min[0] = minor#4;

        rev[0] = revision#6;

        point[0] = pnt#8;

        goto label17;

     label11:
        $r5 := @caughtexception;

     label12:
        e = $r5;

        virtualinvoke e.<java.lang.Exception: void printStackTrace()>();

        major#2 = -1;

        minor#4 = -1;

        revision#127 = -1;

     label13:
        maj[0] = major#2;

        min[0] = minor#4;

        rev[0] = revision#127;

        point[0] = pnt#8;

        goto label17;

     label14:
        $r6 := @caughtexception;

     label15:
        l11 = $r6;

     label16:
        maj[0] = major#2;

        min[0] = minor#4;

        rev[0] = revision#6;

        point[0] = pnt#8;

        throw l11;

     label17:
        return isSnapshot#10;

        catch java.lang.Exception from label01 to label10 with label11;
        catch java.lang.Throwable from label01 to label10 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public void <init>()
    {
        weka.core.Version this;

        this := @this: weka.core.Version;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean isOlder(java.lang.String)
    {
        weka.core.Version this;
        java.lang.String o;
        int $i0;
        boolean $z0;

        this := @this: weka.core.Version;

        o := @parameter0: java.lang.String;

        $i0 = virtualinvoke this.<weka.core.Version: int compareTo(java.lang.String)>(o);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isNewer(java.lang.String)
    {
        weka.core.Version this;
        java.lang.String o;
        int $i0;
        boolean $z0;

        this := @this: weka.core.Version;

        o := @parameter0: java.lang.String;

        $i0 = virtualinvoke this.<weka.core.Version: int compareTo(java.lang.String)>(o);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int compareTo(java.lang.String)
    {
        weka.core.Version this;
        java.lang.String o;
        int[] maj, min, rev, point;
        int major, minor, revision, pnt, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        byte result#27;

        this := @this: weka.core.Version;

        o := @parameter0: java.lang.String;

        maj = newarray (int)[1];

        min = newarray (int)[1];

        rev = newarray (int)[1];

        point = newarray (int)[1];

        staticinvoke <weka.core.Version: boolean parseVersion(java.lang.String,int[],int[],int[],int[])>(o, maj, min, rev, point);

        major = maj[0];

        minor = min[0];

        revision = rev[0];

        pnt = point[0];

        $i0 = <weka.core.Version: int MAJOR>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(major);

        if $i0 >= major goto label1;

        result#27 = -1;

        goto label9;

     label1:
        $i1 = <weka.core.Version: int MAJOR>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(major);

        if $i1 != major goto label8;

        $i2 = <weka.core.Version: int MINOR>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(minor);

        if $i2 >= minor goto label2;

        result#27 = -1;

        goto label9;

     label2:
        $i3 = <weka.core.Version: int MINOR>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(minor);

        if $i3 != minor goto label7;

        $i4 = <weka.core.Version: int REVISION>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(revision);

        if $i4 >= revision goto label3;

        result#27 = -1;

        goto label9;

     label3:
        $i5 = <weka.core.Version: int REVISION>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(revision);

        if $i5 != revision goto label6;

        $i6 = <weka.core.Version: int POINT>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(pnt);

        if $i6 >= pnt goto label4;

        result#27 = -1;

        goto label9;

     label4:
        $i7 = <weka.core.Version: int POINT>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(pnt);

        if $i7 != pnt goto label5;

        result#27 = 0;

        goto label9;

     label5:
        result#27 = 1;

        goto label9;

     label6:
        result#27 = 1;

        goto label9;

     label7:
        result#27 = 1;

        goto label9;

     label8:
        result#27 = 1;

     label9:
        return result#27;
    }


