    public void <init>()
    {
        java.util.LinkedHashMap l0;

        l0 := @this: java.util.LinkedHashMap;

        specialinvoke l0.<java.util.HashMap: void <init>()>();

        l0.<java.util.LinkedHashMap: boolean accessOrder> = 0;

        return;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.util.LinkedHashMap l0;
        java.lang.Object l1, $r1;
        java.util.HashMap$Node l2, $r0;
        int $i0;
        boolean $z0;

        l0 := @this: java.util.LinkedHashMap;

        l1 := @parameter0: java.lang.Object;

        $i0 = staticinvoke <java.util.LinkedHashMap: int hash(java.lang.Object)>(l1);

        $r0 = virtualinvoke l0.<java.util.LinkedHashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>($i0, l1);

        l2 = $r0;

        if $r0 != null goto label1;

        return null;

     label1:
        $z0 = l0.<java.util.LinkedHashMap: boolean accessOrder>;

        if $z0 == 0 goto label2;

        virtualinvoke l0.<java.util.LinkedHashMap: void afterNodeAccess(java.util.HashMap$Node)>(l2);

     label2:
        $r1 = l2.<java.util.HashMap$Node: java.lang.Object value>;

        return $r1;
    }

    public java.util.Set entrySet()
    {
        java.util.LinkedHashMap l0;
        java.util.Set l1, $r0, $r3;
        java.util.LinkedHashMap$LinkedEntrySet $r1;

        l0 := @this: java.util.LinkedHashMap;

        $r0 = l0.<java.util.LinkedHashMap: java.util.Set entrySet>;

        l1 = $r0;

        if $r0 != null goto label1;

        $r1 = new java.util.LinkedHashMap$LinkedEntrySet;

        specialinvoke $r1.<java.util.LinkedHashMap$LinkedEntrySet: void <init>(java.util.LinkedHashMap)>(l0);

        $r3 = $r1;

        l0.<java.util.LinkedHashMap: java.util.Set entrySet> = $r1;

        goto label2;

     label1:
        $r3 = l1;

     label2:
        return $r3;
    }

    public java.util.Set keySet()
    {
        java.util.LinkedHashMap l0;
        java.util.Set l1#3;
        java.util.LinkedHashMap$LinkedKeySet $r0;

        l0 := @this: java.util.LinkedHashMap;

        l1#3 = l0.<java.util.LinkedHashMap: java.util.Set keySet>;

        if l1#3 != null goto label1;

        $r0 = new java.util.LinkedHashMap$LinkedKeySet;

        specialinvoke $r0.<java.util.LinkedHashMap$LinkedKeySet: void <init>(java.util.LinkedHashMap)>(l0);

        l1#3 = $r0;

        l0.<java.util.LinkedHashMap: java.util.Set keySet> = l1#3;

     label1:
        return l1#3;
    }

    java.util.HashMap$Node newNode(int, java.lang.Object, java.lang.Object, java.util.HashMap$Node)
    {
        java.util.LinkedHashMap l0;
        int l1;
        java.lang.Object l2, l3;
        java.util.HashMap$Node l4;
        java.util.LinkedHashMap$Entry l5, $r0;

        l0 := @this: java.util.LinkedHashMap;

        l1 := @parameter0: int;

        l2 := @parameter1: java.lang.Object;

        l3 := @parameter2: java.lang.Object;

        l4 := @parameter3: java.util.HashMap$Node;

        $r0 = new java.util.LinkedHashMap$Entry;

        specialinvoke $r0.<java.util.LinkedHashMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>(l1, l2, l3, l4);

        l5 = $r0;

        specialinvoke l0.<java.util.LinkedHashMap: void linkNodeLast(java.util.LinkedHashMap$Entry)>(l5);

        return l5;
    }

    void afterNodeAccess(java.util.HashMap$Node)
    {
        java.util.LinkedHashMap l0;
        java.util.HashMap$Node l1;
        java.util.LinkedHashMap$Entry l3, l4, l5, $r0, l2#6;
        boolean $z0;
        int $i0, $i1;

        l0 := @this: java.util.LinkedHashMap;

        l1 := @parameter0: java.util.HashMap$Node;

        $z0 = l0.<java.util.LinkedHashMap: boolean accessOrder>;

        if $z0 == 0 goto label7;

        $r0 = l0.<java.util.LinkedHashMap: java.util.LinkedHashMap$Entry tail>;

        l2#6 = $r0;

        if $r0 == l1 goto label7;

        l3 = (java.util.LinkedHashMap$Entry) l1;

        l4 = l3.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry before>;

        l5 = l3.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry after>;

        l3.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry after> = null;

        if l4 != null goto label1;

        l0.<java.util.LinkedHashMap: java.util.LinkedHashMap$Entry head> = l5;

        goto label2;

     label1:
        l4.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry after> = l5;

     label2:
        if l5 == null goto label3;

        l5.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry before> = l4;

        goto label4;

     label3:
        l2#6 = l4;

     label4:
        if l2#6 != null goto label5;

        l0.<java.util.LinkedHashMap: java.util.LinkedHashMap$Entry head> = l3;

        goto label6;

     label5:
        l3.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry before> = l2#6;

        l2#6.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry after> = l3;

     label6:
        l0.<java.util.LinkedHashMap: java.util.LinkedHashMap$Entry tail> = l3;

        $i0 = l0.<java.util.LinkedHashMap: int modCount>;

        $i1 = $i0 + 1;

        l0.<java.util.LinkedHashMap: int modCount> = $i1;

     label7:
        return;
    }

    void afterNodeInsertion(boolean)
    {
        java.util.LinkedHashMap l0;
        boolean l1, $z0;
        java.util.LinkedHashMap$Entry l2, $r0;
        java.lang.Object l3;
        int $i0;

        l0 := @this: java.util.LinkedHashMap;

        l1 := @parameter0: boolean;

        if l1 == 0 goto label1;

        $r0 = l0.<java.util.LinkedHashMap: java.util.LinkedHashMap$Entry head>;

        l2 = $r0;

        if $r0 == null goto label1;

        $z0 = virtualinvoke l0.<java.util.LinkedHashMap: boolean removeEldestEntry(java.util.Map$Entry)>(l2);

        if $z0 == 0 goto label1;

        l3 = l2.<java.util.LinkedHashMap$Entry: java.lang.Object key>;

        $i0 = staticinvoke <java.util.LinkedHashMap: int hash(java.lang.Object)>(l3);

        virtualinvoke l0.<java.util.LinkedHashMap: java.util.HashMap$Node removeNode(int,java.lang.Object,java.lang.Object,boolean,boolean)>($i0, l3, null, 0, 1);

     label1:
        return;
    }

    protected boolean removeEldestEntry(java.util.Map$Entry)
    {
        java.util.LinkedHashMap l0;
        java.util.Map$Entry l1;

        l0 := @this: java.util.LinkedHashMap;

        l1 := @parameter0: java.util.Map$Entry;

        return 0;
    }

    void afterNodeRemoval(java.util.HashMap$Node)
    {
        java.util.LinkedHashMap l0;
        java.util.HashMap$Node l1;
        java.util.LinkedHashMap$Entry l2, l3, l4;

        l0 := @this: java.util.LinkedHashMap;

        l1 := @parameter0: java.util.HashMap$Node;

        l2 = (java.util.LinkedHashMap$Entry) l1;

        l3 = l2.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry before>;

        l4 = l2.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry after>;

        l2.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry after> = null;

        l2.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry before> = null;

        if l3 != null goto label1;

        l0.<java.util.LinkedHashMap: java.util.LinkedHashMap$Entry head> = l4;

        goto label2;

     label1:
        l3.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry after> = l4;

     label2:
        if l4 != null goto label3;

        l0.<java.util.LinkedHashMap: java.util.LinkedHashMap$Entry tail> = l3;

        goto label4;

     label3:
        l4.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry before> = l3;

     label4:
        return;
    }

    java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node, java.util.HashMap$Node)
    {
        java.util.LinkedHashMap l0;
        java.util.HashMap$Node l1, l2;
        java.util.LinkedHashMap$Entry l3;
        java.util.HashMap$TreeNode l4, $r0;
        int $i0;
        java.lang.Object $r1, $r2;

        l0 := @this: java.util.LinkedHashMap;

        l1 := @parameter0: java.util.HashMap$Node;

        l2 := @parameter1: java.util.HashMap$Node;

        l3 = (java.util.LinkedHashMap$Entry) l1;

        $r0 = new java.util.HashMap$TreeNode;

        $i0 = l3.<java.util.LinkedHashMap$Entry: int hash>;

        $r1 = l3.<java.util.LinkedHashMap$Entry: java.lang.Object key>;

        $r2 = l3.<java.util.LinkedHashMap$Entry: java.lang.Object value>;

        specialinvoke $r0.<java.util.HashMap$TreeNode: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>($i0, $r1, $r2, l2);

        l4 = $r0;

        specialinvoke l0.<java.util.LinkedHashMap: void transferLinks(java.util.LinkedHashMap$Entry,java.util.LinkedHashMap$Entry)>(l3, l4);

        return l4;
    }

    private void transferLinks(java.util.LinkedHashMap$Entry, java.util.LinkedHashMap$Entry)
    {
        java.util.LinkedHashMap l0;
        java.util.LinkedHashMap$Entry l1, l2, l3, l4, $r0, $r1;

        l0 := @this: java.util.LinkedHashMap;

        l1 := @parameter0: java.util.LinkedHashMap$Entry;

        l2 := @parameter1: java.util.LinkedHashMap$Entry;

        $r0 = l1.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry before>;

        l2.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry before> = $r0;

        l3 = $r0;

        $r1 = l1.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry after>;

        l2.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry after> = $r1;

        l4 = $r1;

        if l3 != null goto label1;

        l0.<java.util.LinkedHashMap: java.util.LinkedHashMap$Entry head> = l2;

        goto label2;

     label1:
        l3.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry after> = l2;

     label2:
        if l4 != null goto label3;

        l0.<java.util.LinkedHashMap: java.util.LinkedHashMap$Entry tail> = l2;

        goto label4;

     label3:
        l4.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry before> = l2;

     label4:
        return;
    }

    private void linkNodeLast(java.util.LinkedHashMap$Entry)
    {
        java.util.LinkedHashMap l0;
        java.util.LinkedHashMap$Entry l1, l2;

        l0 := @this: java.util.LinkedHashMap;

        l1 := @parameter0: java.util.LinkedHashMap$Entry;

        l2 = l0.<java.util.LinkedHashMap: java.util.LinkedHashMap$Entry tail>;

        l0.<java.util.LinkedHashMap: java.util.LinkedHashMap$Entry tail> = l1;

        if l2 != null goto label1;

        l0.<java.util.LinkedHashMap: java.util.LinkedHashMap$Entry head> = l1;

        goto label2;

     label1:
        l1.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry before> = l2;

        l2.<java.util.LinkedHashMap$Entry: java.util.LinkedHashMap$Entry after> = l1;

     label2:
        return;
    }

    java.util.HashMap$Node replacementNode(java.util.HashMap$Node, java.util.HashMap$Node)
    {
        java.util.LinkedHashMap l0;
        java.util.HashMap$Node l1, l2;
        java.util.LinkedHashMap$Entry l3, l4, $r0;
        int $i0;
        java.lang.Object $r1, $r2;

        l0 := @this: java.util.LinkedHashMap;

        l1 := @parameter0: java.util.HashMap$Node;

        l2 := @parameter1: java.util.HashMap$Node;

        l3 = (java.util.LinkedHashMap$Entry) l1;

        $r0 = new java.util.LinkedHashMap$Entry;

        $i0 = l3.<java.util.LinkedHashMap$Entry: int hash>;

        $r1 = l3.<java.util.LinkedHashMap$Entry: java.lang.Object key>;

        $r2 = l3.<java.util.LinkedHashMap$Entry: java.lang.Object value>;

        specialinvoke $r0.<java.util.LinkedHashMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>($i0, $r1, $r2, l2);

        l4 = $r0;

        specialinvoke l0.<java.util.LinkedHashMap: void transferLinks(java.util.LinkedHashMap$Entry,java.util.LinkedHashMap$Entry)>(l3, l4);

        return l4;
    }

    java.util.HashMap$TreeNode newTreeNode(int, java.lang.Object, java.lang.Object, java.util.HashMap$Node)
    {
        java.util.LinkedHashMap l0;
        int l1;
        java.lang.Object l2, l3;
        java.util.HashMap$Node l4;
        java.util.HashMap$TreeNode l5, $r0;

        l0 := @this: java.util.LinkedHashMap;

        l1 := @parameter0: int;

        l2 := @parameter1: java.lang.Object;

        l3 := @parameter2: java.lang.Object;

        l4 := @parameter3: java.util.HashMap$Node;

        $r0 = new java.util.HashMap$TreeNode;

        specialinvoke $r0.<java.util.HashMap$TreeNode: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>(l1, l2, l3, l4);

        l5 = $r0;

        specialinvoke l0.<java.util.LinkedHashMap: void linkNodeLast(java.util.LinkedHashMap$Entry)>(l5);

        return l5;
    }


