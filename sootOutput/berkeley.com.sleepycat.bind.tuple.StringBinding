    public void <init>()
    {
        berkeley.com.sleepycat.bind.tuple.StringBinding this;

        this := @this: berkeley.com.sleepycat.bind.tuple.StringBinding;

        specialinvoke this.<berkeley.com.sleepycat.bind.tuple.TupleBinding: void <init>()>();

        return;
    }

    public static void stringToEntry(java.lang.String, berkeley.com.sleepycat.je.DatabaseEntry)
    {
        java.lang.String val;
        berkeley.com.sleepycat.je.DatabaseEntry entry;
        berkeley.com.sleepycat.bind.tuple.TupleOutput $r0, $r1;

        val := @parameter0: java.lang.String;

        entry := @parameter1: berkeley.com.sleepycat.je.DatabaseEntry;

        $r0 = staticinvoke <berkeley.com.sleepycat.bind.tuple.StringBinding: berkeley.com.sleepycat.bind.tuple.TupleOutput sizedOutput(java.lang.String)>(val);

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.bind.tuple.TupleOutput: berkeley.com.sleepycat.bind.tuple.TupleOutput writeString(java.lang.String)>(val);

        staticinvoke <berkeley.com.sleepycat.bind.tuple.StringBinding: void outputToEntry(berkeley.com.sleepycat.bind.tuple.TupleOutput,berkeley.com.sleepycat.je.DatabaseEntry)>($r1, entry);

        return;
    }

    private static berkeley.com.sleepycat.bind.tuple.TupleOutput sizedOutput(java.lang.String)
    {
        java.lang.String val;
        int $i0, stringLength#5, stringLength#6;
        char[] $r0;
        berkeley.com.sleepycat.bind.tuple.TupleOutput $r1;
        byte[] $r2;

        val := @parameter0: java.lang.String;

        if val != null goto label1;

        $i0 = 1;

        goto label2;

     label1:
        $r0 = virtualinvoke val.<java.lang.String: char[] toCharArray()>();

        $i0 = staticinvoke <berkeley.com.sleepycat.util.UtfOps: int getByteLength(char[])>($r0);

     label2:
        stringLength#5 = $i0;

        stringLength#6 = stringLength#5 + 1;

        $r1 = new berkeley.com.sleepycat.bind.tuple.TupleOutput;

        $r2 = newarray (byte)[stringLength#6];

        specialinvoke $r1.<berkeley.com.sleepycat.bind.tuple.TupleOutput: void <init>(byte[])>($r2);

        return $r1;
    }


