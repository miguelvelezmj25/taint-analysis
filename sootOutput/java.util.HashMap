    public void <init>()
    {
        java.util.HashMap l0;

        l0 := @this: java.util.HashMap;

        specialinvoke l0.<java.util.AbstractMap: void <init>()>();

        l0.<java.util.HashMap: float loadFactor> = 0.75F;

        return;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.util.HashMap l0;
        java.lang.Object l1, l2, $r0;
        int $i0;

        l0 := @this: java.util.HashMap;

        l1 := @parameter0: java.lang.Object;

        l2 := @parameter1: java.lang.Object;

        $i0 = staticinvoke <java.util.HashMap: int hash(java.lang.Object)>(l1);

        $r0 = virtualinvoke l0.<java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)>($i0, l1, l2, 0, 1);

        return $r0;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.util.HashMap l0;
        java.lang.Object l1, $r1;
        java.util.HashMap$Node l2, $r0;
        int $i0;

        l0 := @this: java.util.HashMap;

        l1 := @parameter0: java.lang.Object;

        $i0 = staticinvoke <java.util.HashMap: int hash(java.lang.Object)>(l1);

        $r0 = virtualinvoke l0.<java.util.HashMap: java.util.HashMap$Node getNode(int,java.lang.Object)>($i0, l1);

        l2 = $r0;

        if $r0 != null goto label1;

        $r1 = null;

        goto label2;

     label1:
        $r1 = l2.<java.util.HashMap$Node: java.lang.Object value>;

     label2:
        return $r1;
    }

    static final int hash(java.lang.Object)
    {
        java.lang.Object l0;
        int l1, $i0, $i1, $i2;

        l0 := @parameter0: java.lang.Object;

        if l0 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $i1 = virtualinvoke l0.<java.lang.Object: int hashCode()>();

        l1 = $i1;

        $i2 = l1 >>> 16;

        $i0 = $i1 ^ $i2;

     label2:
        return $i0;
    }

    final java.util.HashMap$Node getNode(int, java.lang.Object)
    {
        java.util.HashMap l0;
        int l1, l6, $i0, $i1, $i2, $i3, $i4;
        java.lang.Object l2, $r2, l7#21, $r6, l7#45;
        java.util.HashMap$Node[] l3, $r0;
        java.util.HashMap$Node l4, $r1, $r3, l5#31, $r7;
        boolean $z0, $z1, $z2;
        java.util.HashMap$TreeNode $r4, $r5;

        l0 := @this: java.util.HashMap;

        l1 := @parameter0: int;

        l2 := @parameter1: java.lang.Object;

        $r0 = l0.<java.util.HashMap: java.util.HashMap$Node[] table>;

        l3 = $r0;

        if $r0 == null goto label6;

        $i0 = lengthof l3;

        l6 = $i0;

        if $i0 <= 0 goto label6;

        $i1 = l6 - 1;

        $i2 = $i1 & l1;

        $r1 = l3[$i2];

        l4 = $r1;

        if $r1 == null goto label6;

        $i3 = l4.<java.util.HashMap$Node: int hash>;

        if $i3 != l1 goto label2;

        $r2 = l4.<java.util.HashMap$Node: java.lang.Object key>;

        l7#21 = $r2;

        if $r2 == l2 goto label1;

        if l2 == null goto label2;

        $z0 = virtualinvoke l2.<java.lang.Object: boolean equals(java.lang.Object)>(l7#21);

        if $z0 == 0 goto label2;

     label1:
        return l4;

     label2:
        $r3 = l4.<java.util.HashMap$Node: java.util.HashMap$Node next>;

        l5#31 = $r3;

        if $r3 == null goto label6;

        $z1 = l4 instanceof java.util.HashMap$TreeNode;

        if $z1 == 0 goto label3;

        $r4 = (java.util.HashMap$TreeNode) l4;

        $r5 = virtualinvoke $r4.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode getTreeNode(int,java.lang.Object)>(l1, l2);

        return $r5;

     label3:
        $i4 = l5#31.<java.util.HashMap$Node: int hash>;

        if $i4 != l1 goto label5;

        $r6 = l5#31.<java.util.HashMap$Node: java.lang.Object key>;

        l7#45 = $r6;

        if $r6 == l2 goto label4;

        if l2 == null goto label5;

        $z2 = virtualinvoke l2.<java.lang.Object: boolean equals(java.lang.Object)>(l7#45);

        if $z2 == 0 goto label5;

     label4:
        return l5#31;

     label5:
        $r7 = l5#31.<java.util.HashMap$Node: java.util.HashMap$Node next>;

        l5#31 = $r7;

        if $r7 != null goto label3;

     label6:
        return null;
    }

    final java.lang.Object putVal(int, java.lang.Object, java.lang.Object, boolean, boolean)
    {
        java.util.HashMap l0;
        int l1, l9, $i0, l8#8, $i1, $i2, $i3, l12#55, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.Object l2, l3, l7#22, $r4, l11#36, l10#43, $r8, l11#77, l12#87;
        boolean l4, l5, $z0, $z1, $z2;
        java.util.HashMap$Node[] $r0, l6#4, $r1;
        java.util.HashMap$Node $r2, $r3, $r6, $r7, tmp$955979034, tmp$459330340, tmp$2023610047, tmp$59320794, tmp$2145942542, tmp$1123649342, tmp$620506240, tmp$128654041, tmp$465257140;
        java.util.HashMap$TreeNode $r5;

        l0 := @this: java.util.HashMap;

        l1 := @parameter0: int;

        l2 := @parameter1: java.lang.Object;

        l3 := @parameter2: java.lang.Object;

        l4 := @parameter3: boolean;

        l5 := @parameter4: boolean;

        $r0 = l0.<java.util.HashMap: java.util.HashMap$Node[] table>;

        l6#4 = $r0;

        if $r0 == null goto label01;

        $i0 = lengthof l6#4;

        l8#8 = $i0;

        if $i0 != 0 goto label02;

     label01:
        $r1 = virtualinvoke l0.<java.util.HashMap: java.util.HashMap$Node[] resize()>();

        l6#4 = $r1;

        l8#8 = lengthof $r1;

     label02:
        $i1 = l8#8 - 1;

        $i2 = $i1 & l1;

        l9 = $i2;

        $r2 = l6#4[$i2];

        l7#22 = $r2;

        if $r2 != null goto label03;

        $r3 = virtualinvoke l0.<java.util.HashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>(l1, l2, l3, null);

        l6#4[l9] = $r3;

        goto label13;

     label03:
        tmp$955979034 = (java.util.HashMap$Node) l7#22;

        $i3 = tmp$955979034.<java.util.HashMap$Node: int hash>;

        if $i3 != l1 goto label05;

        tmp$459330340 = (java.util.HashMap$Node) l7#22;

        $r4 = tmp$459330340.<java.util.HashMap$Node: java.lang.Object key>;

        l11#36 = $r4;

        if $r4 == l2 goto label04;

        if l2 == null goto label05;

        $z0 = virtualinvoke l2.<java.lang.Object: boolean equals(java.lang.Object)>(l11#36);

        if $z0 == 0 goto label05;

     label04:
        l10#43 = l7#22;

        goto label10;

     label05:
        $z1 = l7#22 instanceof java.util.HashMap$TreeNode;

        if $z1 == 0 goto label06;

        $r5 = (java.util.HashMap$TreeNode) l7#22;

        l10#43 = virtualinvoke $r5.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)>(l0, l6#4, l1, l2, l3);

        goto label10;

     label06:
        l12#55 = 0;

     label07:
        tmp$2023610047 = (java.util.HashMap$Node) l7#22;

        $r6 = tmp$2023610047.<java.util.HashMap$Node: java.util.HashMap$Node next>;

        l10#43 = $r6;

        if $r6 != null goto label08;

        $r7 = virtualinvoke l0.<java.util.HashMap: java.util.HashMap$Node newNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>(l1, l2, l3, null);

        tmp$59320794 = (java.util.HashMap$Node) l7#22;

        tmp$59320794.<java.util.HashMap$Node: java.util.HashMap$Node next> = $r7;

        if l12#55 < 7 goto label10;

        virtualinvoke l0.<java.util.HashMap: void treeifyBin(java.util.HashMap$Node[],int)>(l6#4, l1);

        goto label10;

     label08:
        tmp$2145942542 = (java.util.HashMap$Node) l10#43;

        $i4 = tmp$2145942542.<java.util.HashMap$Node: int hash>;

        if $i4 != l1 goto label09;

        tmp$1123649342 = (java.util.HashMap$Node) l10#43;

        $r8 = tmp$1123649342.<java.util.HashMap$Node: java.lang.Object key>;

        l11#77 = $r8;

        if $r8 == l2 goto label10;

        if l2 == null goto label09;

        $z2 = virtualinvoke l2.<java.lang.Object: boolean equals(java.lang.Object)>(l11#77);

        if $z2 == 0 goto label09;

        goto label10;

     label09:
        l7#22 = l10#43;

        l12#55 = l12#55 + 1;

        goto label07;

     label10:
        if l10#43 == null goto label13;

        tmp$620506240 = (java.util.HashMap$Node) l10#43;

        l12#87 = tmp$620506240.<java.util.HashMap$Node: java.lang.Object value>;

        if l4 == 0 goto label11;

        if l12#87 != null goto label12;

     label11:
        tmp$128654041 = (java.util.HashMap$Node) l10#43;

        tmp$128654041.<java.util.HashMap$Node: java.lang.Object value> = l3;

     label12:
        tmp$465257140 = (java.util.HashMap$Node) l10#43;

        virtualinvoke l0.<java.util.HashMap: void afterNodeAccess(java.util.HashMap$Node)>(tmp$465257140);

        return l12#87;

     label13:
        $i5 = l0.<java.util.HashMap: int modCount>;

        $i6 = $i5 + 1;

        l0.<java.util.HashMap: int modCount> = $i6;

        $i7 = l0.<java.util.HashMap: int size>;

        $i8 = $i7 + 1;

        l0.<java.util.HashMap: int size> = $i8;

        $i9 = l0.<java.util.HashMap: int threshold>;

        if $i8 <= $i9 goto label14;

        virtualinvoke l0.<java.util.HashMap: java.util.HashMap$Node[] resize()>();

     label14:
        virtualinvoke l0.<java.util.HashMap: void afterNodeInsertion(boolean)>(l5);

        return null;
    }

    final java.util.HashMap$Node[] resize()
    {
        java.util.HashMap l0;
        java.util.HashMap$Node[] l1, $r0, l6#50;
        int l2, l3, $i0, l5#9, $i1, l4#20, $i3, l7#55, $i4, $i5, $i6, $i7, $i8, $i9;
        java.util.HashMap$Node l13, $r1, l8#62, $r2, l9#84, l10#86, l11#88, l12#90;
        float $f0, $f1, l6#37;
        byte $b2;
        boolean $z0;
        java.util.HashMap$TreeNode $r3;

        l0 := @this: java.util.HashMap;

        l1 = l0.<java.util.HashMap: java.util.HashMap$Node[] table>;

        if l1 != null goto label01;

        $i0 = 0;

        goto label02;

     label01:
        $i0 = lengthof l1;

     label02:
        l2 = $i0;

        l3 = l0.<java.util.HashMap: int threshold>;

        l5#9 = 0;

        if l2 <= 0 goto label04;

        if l2 < 1073741824 goto label03;

        l0.<java.util.HashMap: int threshold> = 2147483647;

        return l1;

     label03:
        $i1 = l2 << 1;

        l4#20 = $i1;

        if $i1 >= 1073741824 goto label06;

        if l2 < 16 goto label06;

        l5#9 = l3 << 1;

        goto label06;

     label04:
        if l3 <= 0 goto label05;

        l4#20 = l3;

        goto label06;

     label05:
        l4#20 = 16;

        l5#9 = 12;

     label06:
        if l5#9 != 0 goto label09;

        $f0 = (float) l4#20;

        $f1 = l0.<java.util.HashMap: float loadFactor>;

        l6#37 = $f0 * $f1;

        if l4#20 >= 1073741824 goto label07;

        $b2 = l6#37 cmpg 1.07374182E9F;

        if $b2 >= 0 goto label07;

        $i3 = (int) l6#37;

        goto label08;

     label07:
        $i3 = 2147483647;

     label08:
        l5#9 = $i3;

     label09:
        l0.<java.util.HashMap: int threshold> = l5#9;

        $r0 = newarray (java.util.HashMap$Node)[l4#20];

        l6#50 = (java.util.HashMap$Node[]) $r0;

        l0.<java.util.HashMap: java.util.HashMap$Node[] table> = l6#50;

        if l1 == null goto label22;

        l7#55 = 0;

     label10:
        if l7#55 >= l2 goto label22;

        $r1 = l1[l7#55];

        l8#62 = $r1;

        if $r1 == null goto label21;

        l1[l7#55] = null;

        $r2 = l8#62.<java.util.HashMap$Node: java.util.HashMap$Node next>;

        if $r2 != null goto label11;

        $i4 = l8#62.<java.util.HashMap$Node: int hash>;

        $i5 = l4#20 - 1;

        $i6 = $i4 & $i5;

        l6#50[$i6] = l8#62;

        goto label21;

     label11:
        $z0 = l8#62 instanceof java.util.HashMap$TreeNode;

        if $z0 == 0 goto label12;

        $r3 = (java.util.HashMap$TreeNode) l8#62;

        virtualinvoke $r3.<java.util.HashMap$TreeNode: void split(java.util.HashMap,java.util.HashMap$Node[],int,int)>(l0, l6#50, l7#55, l2);

        goto label21;

     label12:
        l9#84 = null;

        l10#86 = null;

        l11#88 = null;

        l12#90 = null;

     label13:
        l13 = l8#62.<java.util.HashMap$Node: java.util.HashMap$Node next>;

        $i7 = l8#62.<java.util.HashMap$Node: int hash>;

        $i8 = $i7 & l2;

        if $i8 != 0 goto label16;

        if l10#86 != null goto label14;

        l9#84 = l8#62;

        goto label15;

     label14:
        l10#86.<java.util.HashMap$Node: java.util.HashMap$Node next> = l8#62;

     label15:
        l10#86 = l8#62;

        goto label19;

     label16:
        if l12#90 != null goto label17;

        l11#88 = l8#62;

        goto label18;

     label17:
        l12#90.<java.util.HashMap$Node: java.util.HashMap$Node next> = l8#62;

     label18:
        l12#90 = l8#62;

     label19:
        l8#62 = l13;

        if l13 != null goto label13;

        if l10#86 == null goto label20;

        l10#86.<java.util.HashMap$Node: java.util.HashMap$Node next> = null;

        l6#50[l7#55] = l9#84;

     label20:
        if l12#90 == null goto label21;

        l12#90.<java.util.HashMap$Node: java.util.HashMap$Node next> = null;

        $i9 = l7#55 + l2;

        l6#50[$i9] = l11#88;

     label21:
        l7#55 = l7#55 + 1;

        goto label10;

     label22:
        return l6#50;
    }

    java.util.HashMap$Node newNode(int, java.lang.Object, java.lang.Object, java.util.HashMap$Node)
    {
        java.util.HashMap l0;
        int l1;
        java.lang.Object l2, l3;
        java.util.HashMap$Node l4, $r0;

        l0 := @this: java.util.HashMap;

        l1 := @parameter0: int;

        l2 := @parameter1: java.lang.Object;

        l3 := @parameter2: java.lang.Object;

        l4 := @parameter3: java.util.HashMap$Node;

        $r0 = new java.util.HashMap$Node;

        specialinvoke $r0.<java.util.HashMap$Node: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>(l1, l2, l3, l4);

        return $r0;
    }

    final void treeifyBin(java.util.HashMap$Node[], int)
    {
        java.util.HashMap l0;
        java.lang.Object[] l1;
        int l2, l3, l4, $i0, $i1, $i2;
        java.util.HashMap$TreeNode l8, l6#19, l7#21;
        java.lang.Object $r2, l5#17;
        java.util.HashMap$Node $r3, tmp$1223572525, tmp$981517620;
        java.util.HashMap$Node[] tmp$920859166;

        l0 := @this: java.util.HashMap;

        l1 := @parameter0: java.util.HashMap$Node[];

        l2 := @parameter1: int;

        if l1 == null goto label1;

        $i0 = lengthof l1;

        l3 = $i0;

        if $i0 >= 64 goto label2;

     label1:
        virtualinvoke l0.<java.util.HashMap: java.util.HashMap$Node[] resize()>();

        goto label6;

     label2:
        $i1 = l3 - 1;

        $i2 = $i1 & l2;

        l4 = $i2;

        $r2 = l1[$i2];

        l5#17 = $r2;

        if $r2 == null goto label6;

        l6#19 = null;

        l7#21 = null;

     label3:
        tmp$1223572525 = (java.util.HashMap$Node) l5#17;

        l8 = virtualinvoke l0.<java.util.HashMap: java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node,java.util.HashMap$Node)>(tmp$1223572525, null);

        if l7#21 != null goto label4;

        l6#19 = l8;

        goto label5;

     label4:
        l8.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode prev> = l7#21;

        l7#21.<java.util.HashMap$TreeNode: java.util.HashMap$Node next> = l8;

     label5:
        l7#21 = l8;

        tmp$981517620 = (java.util.HashMap$Node) l5#17;

        $r3 = tmp$981517620.<java.util.HashMap$Node: java.util.HashMap$Node next>;

        l5#17 = $r3;

        if $r3 != null goto label3;

        l1[l4] = l6#19;

        if l6#19 == null goto label6;

        tmp$920859166 = (java.util.HashMap$Node[]) l1;

        virtualinvoke l6#19.<java.util.HashMap$TreeNode: void treeify(java.util.HashMap$Node[])>(tmp$920859166);

     label6:
        return;
    }

    void afterNodeAccess(java.util.HashMap$Node)
    {
        java.util.HashMap l0;
        java.util.HashMap$Node l1;

        l0 := @this: java.util.HashMap;

        l1 := @parameter0: java.util.HashMap$Node;

        return;
    }

    void afterNodeInsertion(boolean)
    {
        java.util.HashMap l0;
        boolean l1;

        l0 := @this: java.util.HashMap;

        l1 := @parameter0: boolean;

        return;
    }

    java.util.HashMap$TreeNode replacementTreeNode(java.util.HashMap$Node, java.util.HashMap$Node)
    {
        java.util.HashMap l0;
        java.util.HashMap$Node l1, l2;
        java.util.HashMap$TreeNode $r0;
        int $i0;
        java.lang.Object $r1, $r2;

        l0 := @this: java.util.HashMap;

        l1 := @parameter0: java.util.HashMap$Node;

        l2 := @parameter1: java.util.HashMap$Node;

        $r0 = new java.util.HashMap$TreeNode;

        $i0 = l1.<java.util.HashMap$Node: int hash>;

        $r1 = l1.<java.util.HashMap$Node: java.lang.Object key>;

        $r2 = l1.<java.util.HashMap$Node: java.lang.Object value>;

        specialinvoke $r0.<java.util.HashMap$TreeNode: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>($i0, $r1, $r2, l2);

        return $r0;
    }


