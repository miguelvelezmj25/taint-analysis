    public static long copy(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.InputStream input;
        java.io.OutputStream output;
        long $l0;

        input := @parameter0: java.io.InputStream;

        output := @parameter1: java.io.OutputStream;

        $l0 = staticinvoke <org.apache.commons.compress.utils.IOUtils: long copy(java.io.InputStream,java.io.OutputStream,int)>(input, output, 8024);

        return $l0;
    }

    static void <clinit>()
    {
        byte[] $r0;

        $r0 = newarray (byte)[4096];

        <org.apache.commons.compress.utils.IOUtils: byte[] SKIP_BUF> = $r0;

        return;
    }

    public static long copy(java.io.InputStream, java.io.OutputStream, int) throws java.io.IOException
    {
        java.io.InputStream input;
        java.io.OutputStream output;
        int buffersize, $i0, n#12;
        byte[] buffer;
        boolean n#4;
        long count#6, $l1;

        input := @parameter0: java.io.InputStream;

        output := @parameter1: java.io.OutputStream;

        buffersize := @parameter2: int;

        buffer = newarray (byte)[buffersize];

        n#4 = 0;

        count#6 = 0L;

     label1:
        $i0 = virtualinvoke input.<java.io.InputStream: int read(byte[])>(buffer);

        n#12 = $i0;

        if -1 == $i0 goto label2;

        virtualinvoke output.<java.io.OutputStream: void write(byte[],int,int)>(buffer, 0, n#12);

        $l1 = (long) n#12;

        count#6 = count#6 + $l1;

        goto label1;

     label2:
        return count#6;
    }


