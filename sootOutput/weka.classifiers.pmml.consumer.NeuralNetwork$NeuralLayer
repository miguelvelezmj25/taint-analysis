    protected void <init>(weka.classifiers.pmml.consumer.NeuralNetwork, org.w3c.dom.Element)
    {
        weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer this;
        weka.classifiers.pmml.consumer.NeuralNetwork this$0;
        org.w3c.dom.Element layerE, $r8;
        java.lang.String activationFunction, threshold, width, altitude, normMethod, $r1, $r3;
        weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction[] l4;
        int l5, l9, $i0, l6#31, $i1, $i2, $i3, $i4, l10#92, $i5, $i6, i#118, $i7;
        weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction a, $r2;
        weka.classifiers.pmml.consumer.NeuralNetwork$Normalization[] l8;
        weka.classifiers.pmml.consumer.NeuralNetwork$Normalization n, $r4;
        org.w3c.dom.NodeList neuronL;
        org.w3c.dom.Node neuronN;
        java.util.HashMap $r0;
        boolean $z0, $z1;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        weka.classifiers.pmml.consumer.NeuralNetwork$Neuron[] $r5, $r6;
        short $s8;
        weka.classifiers.pmml.consumer.NeuralNetwork$Neuron $r7;

        this := @this: weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer;

        this$0 := @parameter0: weka.classifiers.pmml.consumer.NeuralNetwork;

        layerE := @parameter1: org.w3c.dom.Element;

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: weka.classifiers.pmml.consumer.NeuralNetwork this$0> = this$0;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: int m_numNeurons> = 0;

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction m_layerActivationFunction> = null;

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: double m_layerThreshold> = #NaN;

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: double m_layerWidth> = #NaN;

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: double m_layerAltitude> = #NaN;

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: weka.classifiers.pmml.consumer.NeuralNetwork$Normalization m_layerNormalization> = null;

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: weka.classifiers.pmml.consumer.NeuralNetwork$Neuron[] m_layerNeurons> = null;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: java.util.HashMap m_layerOutput> = $r0;

        activationFunction = interfaceinvoke layerE.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("activationFunction");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(activationFunction);

        if activationFunction == null goto label04;

        $i0 = virtualinvoke activationFunction.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label04;

        l4 = staticinvoke <weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction[] values()>();

        l5 = lengthof l4;

        l6#31 = 0;

     label01:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l6#31);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l5);

        if l6#31 >= l5 goto label03;

        a = l4[l6#31];

        $r1 = virtualinvoke a.<weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: java.lang.String toString()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(activationFunction);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label02;

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction m_layerActivationFunction> = a;

        goto label03;

     label02:
        l6#31 = l6#31 + 1;

        goto label01;

     label03:
        goto label05;

     label04:
        $r2 = this$0.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction m_activationFunction>;

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction m_layerActivationFunction> = $r2;

     label05:
        threshold = interfaceinvoke layerE.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("threshold");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(threshold);

        if threshold == null goto label06;

        $i1 = virtualinvoke threshold.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 0 goto label06;

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(threshold);

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: double m_layerThreshold> = $d0;

        goto label07;

     label06:
        $d1 = this$0.<weka.classifiers.pmml.consumer.NeuralNetwork: double m_threshold>;

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: double m_layerThreshold> = $d1;

     label07:
        width = interfaceinvoke layerE.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("width");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(width);

        if width == null goto label08;

        $i2 = virtualinvoke width.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 <= 0 goto label08;

        $d2 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(width);

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: double m_layerWidth> = $d2;

        goto label09;

     label08:
        $d3 = this$0.<weka.classifiers.pmml.consumer.NeuralNetwork: double m_width>;

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: double m_layerWidth> = $d3;

     label09:
        altitude = interfaceinvoke layerE.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("altitude");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(altitude);

        if altitude == null goto label10;

        $i3 = virtualinvoke altitude.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 <= 0 goto label10;

        $d4 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(altitude);

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: double m_layerAltitude> = $d4;

        goto label11;

     label10:
        $d5 = this$0.<weka.classifiers.pmml.consumer.NeuralNetwork: double m_altitude>;

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: double m_layerAltitude> = $d5;

     label11:
        normMethod = interfaceinvoke layerE.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("normalizationMethod");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(normMethod);

        if normMethod == null goto label15;

        $i4 = virtualinvoke normMethod.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 <= 0 goto label15;

        l8 = staticinvoke <weka.classifiers.pmml.consumer.NeuralNetwork$Normalization: weka.classifiers.pmml.consumer.NeuralNetwork$Normalization[] values()>();

        l9 = lengthof l8;

        l10#92 = 0;

     label12:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l10#92);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l9);

        if l10#92 >= l9 goto label14;

        n = l8[l10#92];

        $r3 = virtualinvoke n.<weka.classifiers.pmml.consumer.NeuralNetwork$Normalization: java.lang.String toString()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(normMethod);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label13;

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: weka.classifiers.pmml.consumer.NeuralNetwork$Normalization m_layerNormalization> = n;

        goto label14;

     label13:
        l10#92 = l10#92 + 1;

        goto label12;

     label14:
        goto label16;

     label15:
        $r4 = this$0.<weka.classifiers.pmml.consumer.NeuralNetwork: weka.classifiers.pmml.consumer.NeuralNetwork$Normalization m_normalizationMethod>;

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: weka.classifiers.pmml.consumer.NeuralNetwork$Normalization m_layerNormalization> = $r4;

     label16:
        neuronL = interfaceinvoke layerE.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("Neuron");

        $i5 = interfaceinvoke neuronL.<org.w3c.dom.NodeList: int getLength()>();

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: int m_numNeurons> = $i5;

        $i6 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: int m_numNeurons>;

        $r5 = newarray (weka.classifiers.pmml.consumer.NeuralNetwork$Neuron)[$i6];

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: weka.classifiers.pmml.consumer.NeuralNetwork$Neuron[] m_layerNeurons> = $r5;

        i#118 = 0;

     label17:
        $i7 = interfaceinvoke neuronL.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#118);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if i#118 >= $i7 goto label19;

        neuronN = interfaceinvoke neuronL.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i#118);

        $s8 = interfaceinvoke neuronN.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s8);

        if $s8 != 1 goto label18;

        $r6 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: weka.classifiers.pmml.consumer.NeuralNetwork$Neuron[] m_layerNeurons>;

        $r7 = new weka.classifiers.pmml.consumer.NeuralNetwork$Neuron;

        $r8 = (org.w3c.dom.Element) neuronN;

        specialinvoke $r7.<weka.classifiers.pmml.consumer.NeuralNetwork$Neuron: void <init>(org.w3c.dom.Element,weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer)>($r8, this);

        $r6[i#118] = $r7;

     label18:
        i#118 = i#118 + 1;

        goto label17;

     label19:
        return;
    }

    protected java.util.HashMap computeOutput(java.util.HashMap) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer this;
        java.util.HashMap incoming, $r0, $r10, $r16, $r24, $r30;
        double neuronOut, normSum#4, $d0, val#60, $d1, val#68;
        java.lang.String neuronID, $r19, $r27;
        int i#6, $i0, i#45, $i1;
        weka.classifiers.pmml.consumer.NeuralNetwork$Neuron[] $r1, $r2, $r4, $r15, $r17, $r25;
        weka.classifiers.pmml.consumer.NeuralNetwork$Neuron $r3, $r5, $r18, $r26;
        weka.classifiers.pmml.consumer.NeuralNetwork$Normalization $r6, $r7, $r8, $r9, $r13, $r14, $r22, $r23;
        java.lang.Double $r11, $r21, $r28;
        java.lang.Object $r20;

        this := @this: weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer;

        incoming := @parameter0: java.util.HashMap;

        $r0 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: java.util.HashMap m_layerOutput>;

        virtualinvoke $r0.<java.util.HashMap: void clear()>();

        normSum#4 = 0.0;

        i#6 = 0;

     label1:
        $r1 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: weka.classifiers.pmml.consumer.NeuralNetwork$Neuron[] m_layerNeurons>;

        $i0 = lengthof $r1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#6 >= $i0 goto label4;

        $r2 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: weka.classifiers.pmml.consumer.NeuralNetwork$Neuron[] m_layerNeurons>;

        $r3 = $r2[i#6];

        neuronOut = virtualinvoke $r3.<weka.classifiers.pmml.consumer.NeuralNetwork$Neuron: double getValue(java.util.HashMap)>(incoming);

        $r4 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: weka.classifiers.pmml.consumer.NeuralNetwork$Neuron[] m_layerNeurons>;

        $r5 = $r4[i#6];

        neuronID = virtualinvoke $r5.<weka.classifiers.pmml.consumer.NeuralNetwork$Neuron: java.lang.String getID()>();

        $r6 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: weka.classifiers.pmml.consumer.NeuralNetwork$Normalization m_layerNormalization>;

        $r7 = <weka.classifiers.pmml.consumer.NeuralNetwork$Normalization: weka.classifiers.pmml.consumer.NeuralNetwork$Normalization SOFTMAX>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r7);

        if $r6 != $r7 goto label2;

        $d0 = staticinvoke <java.lang.Math: double exp(double)>(neuronOut);

        normSum#4 = normSum#4 + $d0;

        goto label3;

     label2:
        $r8 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: weka.classifiers.pmml.consumer.NeuralNetwork$Normalization m_layerNormalization>;

        $r9 = <weka.classifiers.pmml.consumer.NeuralNetwork$Normalization: weka.classifiers.pmml.consumer.NeuralNetwork$Normalization SIMPLEMAX>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r9);

        if $r8 != $r9 goto label3;

        normSum#4 = normSum#4 + neuronOut;

     label3:
        $r10 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: java.util.HashMap m_layerOutput>;

        $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(neuronOut);

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(neuronID, $r11);

        i#6 = i#6 + 1;

        goto label1;

     label4:
        $r13 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: weka.classifiers.pmml.consumer.NeuralNetwork$Normalization m_layerNormalization>;

        $r14 = <weka.classifiers.pmml.consumer.NeuralNetwork$Normalization: weka.classifiers.pmml.consumer.NeuralNetwork$Normalization NONE>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r13);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r14);

        if $r13 == $r14 goto label8;

        i#45 = 0;

     label5:
        $r15 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: weka.classifiers.pmml.consumer.NeuralNetwork$Neuron[] m_layerNeurons>;

        $i1 = lengthof $r15;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#45);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#45 >= $i1 goto label8;

        $r16 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: java.util.HashMap m_layerOutput>;

        $r17 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: weka.classifiers.pmml.consumer.NeuralNetwork$Neuron[] m_layerNeurons>;

        $r18 = $r17[i#45];

        $r19 = virtualinvoke $r18.<weka.classifiers.pmml.consumer.NeuralNetwork$Neuron: java.lang.String getID()>();

        $r20 = virtualinvoke $r16.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r19);

        $r21 = (java.lang.Double) $r20;

        val#60 = virtualinvoke $r21.<java.lang.Double: double doubleValue()>();

        $r22 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: weka.classifiers.pmml.consumer.NeuralNetwork$Normalization m_layerNormalization>;

        $r23 = <weka.classifiers.pmml.consumer.NeuralNetwork$Normalization: weka.classifiers.pmml.consumer.NeuralNetwork$Normalization SOFTMAX>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r22);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r23);

        if $r22 != $r23 goto label6;

        $d1 = staticinvoke <java.lang.Math: double exp(double)>(val#60);

        val#68 = $d1 / normSum#4;

        goto label7;

     label6:
        val#68 = val#60 / normSum#4;

     label7:
        $r24 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: java.util.HashMap m_layerOutput>;

        $r25 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: weka.classifiers.pmml.consumer.NeuralNetwork$Neuron[] m_layerNeurons>;

        $r26 = $r25[i#45];

        $r27 = virtualinvoke $r26.<weka.classifiers.pmml.consumer.NeuralNetwork$Neuron: java.lang.String getID()>();

        $r28 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(val#68);

        virtualinvoke $r24.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r27, $r28);

        i#45 = i#45 + 1;

        goto label5;

     label8:
        $r30 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: java.util.HashMap m_layerOutput>;

        return $r30;
    }

    protected weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction getActivationFunction()
    {
        weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer this;
        weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction $r0;

        this := @this: weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer;

        $r0 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction m_layerActivationFunction>;

        return $r0;
    }

    protected double getAltitude()
    {
        weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer this;
        double $d0;

        this := @this: weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer;

        $d0 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: double m_layerAltitude>;

        return $d0;
    }

    protected double getThreshold()
    {
        weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer this;
        double $d0;

        this := @this: weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer;

        $d0 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: double m_layerThreshold>;

        return $d0;
    }

    protected double getWidth()
    {
        weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer this;
        double $d0;

        this := @this: weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer;

        $d0 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: double m_layerWidth>;

        return $d0;
    }


