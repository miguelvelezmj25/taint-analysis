    protected void <init>(weka.classifiers.pmml.consumer.Regression$RegressionTable, org.w3c.dom.Element, weka.core.Instances) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.Regression$RegressionTable$PredictorTerm this;
        weka.classifiers.pmml.consumer.Regression$RegressionTable this$0;
        org.w3c.dom.Element predictorTerm, $r4;
        weka.core.Instances miningSchema;
        java.lang.String coeff, fieldName, $r6, $r12, $r20;
        java.lang.IllegalArgumentException ex, $r0;
        org.w3c.dom.NodeList fields;
        org.w3c.dom.Node fieldRef;
        int $i0, $i1, $i2, $i3, i#33, $i4, $i6, j#53, $i7;
        double $d0;
        java.lang.Exception $r1, $r8, $r15;
        int[] $r2, $r13;
        java.lang.String[] $r3, $r14;
        short $s5;
        boolean found#51, $z0, $z1;
        weka.core.Attribute $r5, $r7;
        java.lang.StringBuilder $r9, $r10, $r11, $r16, $r17, $r18, $r19;

        this := @this: weka.classifiers.pmml.consumer.Regression$RegressionTable$PredictorTerm;

        this$0 := @parameter0: weka.classifiers.pmml.consumer.Regression$RegressionTable;

        predictorTerm := @parameter1: org.w3c.dom.Element;

        miningSchema := @parameter2: weka.core.Instances;

        this.<weka.classifiers.pmml.consumer.Regression$RegressionTable$PredictorTerm: weka.classifiers.pmml.consumer.Regression$RegressionTable this$0> = this$0;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<weka.classifiers.pmml.consumer.Regression$RegressionTable$PredictorTerm: double m_coefficient> = 1.0;

        coeff = interfaceinvoke predictorTerm.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("coefficient");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(coeff);

        if coeff == null goto label04;

        $i0 = virtualinvoke coeff.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label04;

     label01:
        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(coeff);

        this.<weka.classifiers.pmml.consumer.Regression$RegressionTable$PredictorTerm: double m_coefficient> = $d0;

     label02:
        goto label04;

     label03:
        $r0 := @caughtexception;

        ex = $r0;

        $r1 = new java.lang.Exception;

        specialinvoke $r1.<java.lang.Exception: void <init>(java.lang.String)>("[PredictorTerm] unable to parse coefficient");

        throw $r1;

     label04:
        fields = interfaceinvoke predictorTerm.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("FieldRef");

        $i1 = interfaceinvoke fields.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 0 goto label11;

        $i2 = interfaceinvoke fields.<org.w3c.dom.NodeList: int getLength()>();

        $r2 = newarray (int)[$i2];

        this.<weka.classifiers.pmml.consumer.Regression$RegressionTable$PredictorTerm: int[] m_indexes> = $r2;

        $i3 = interfaceinvoke fields.<org.w3c.dom.NodeList: int getLength()>();

        $r3 = newarray (java.lang.String)[$i3];

        this.<weka.classifiers.pmml.consumer.Regression$RegressionTable$PredictorTerm: java.lang.String[] m_fieldNames> = $r3;

        i#33 = 0;

     label05:
        $i4 = interfaceinvoke fields.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#33);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if i#33 >= $i4 goto label11;

        fieldRef = interfaceinvoke fields.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i#33);

        $s5 = interfaceinvoke fieldRef.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s5);

        if $s5 != 1 goto label10;

        $r4 = (org.w3c.dom.Element) fieldRef;

        fieldName = interfaceinvoke $r4.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("field");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(fieldName);

        if fieldName == null goto label10;

        $i6 = virtualinvoke fieldName.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if $i6 <= 0 goto label10;

        found#51 = 0;

        j#53 = 0;

     label06:
        $i7 = virtualinvoke miningSchema.<weka.core.Instances: int numAttributes()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#53);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if j#53 >= $i7 goto label09;

        $r5 = virtualinvoke miningSchema.<weka.core.Instances: weka.core.Attribute attribute(int)>(j#53);

        $r6 = virtualinvoke $r5.<weka.core.Attribute: java.lang.String name()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(fieldName);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label08;

        $r7 = virtualinvoke miningSchema.<weka.core.Instances: weka.core.Attribute attribute(int)>(j#53);

        $z1 = virtualinvoke $r7.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label07;

        $r8 = new java.lang.Exception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[PredictorTerm] field is not continuous: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(fieldName);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.Exception: void <init>(java.lang.String)>($r12);

        throw $r8;

     label07:
        found#51 = 1;

        $r13 = this.<weka.classifiers.pmml.consumer.Regression$RegressionTable$PredictorTerm: int[] m_indexes>;

        $r13[i#33] = j#53;

        $r14 = this.<weka.classifiers.pmml.consumer.Regression$RegressionTable$PredictorTerm: java.lang.String[] m_fieldNames>;

        $r14[i#33] = fieldName;

        goto label09;

     label08:
        j#53 = j#53 + 1;

        goto label06;

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(found#51);

        if found#51 != 0 goto label10;

        $r15 = new java.lang.Exception;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[PredictorTerm] Unable to find field ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(fieldName);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in mining schema!");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.Exception: void <init>(java.lang.String)>($r20);

        throw $r15;

     label10:
        i#33 = i#33 + 1;

        goto label05;

     label11:
        return;

        catch java.lang.IllegalArgumentException from label01 to label02 with label03;
    }


