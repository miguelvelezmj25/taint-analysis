    public weka.core.pmml.MiningFieldMetaInfo$Usage getUsageType()
    {
        weka.core.pmml.MiningFieldMetaInfo this;
        weka.core.pmml.MiningFieldMetaInfo$Usage $r0;

        this := @this: weka.core.pmml.MiningFieldMetaInfo;

        $r0 = this.<weka.core.pmml.MiningFieldMetaInfo: weka.core.pmml.MiningFieldMetaInfo$Usage m_usageType>;

        return $r0;
    }

    public java.lang.String getName()
    {
        weka.core.pmml.MiningFieldMetaInfo this;
        java.lang.String $r0;

        this := @this: weka.core.pmml.MiningFieldMetaInfo;

        $r0 = this.<weka.core.pmml.MiningFieldMetaInfo: java.lang.String m_fieldName>;

        return $r0;
    }

    public void setIndex(int)
    {
        weka.core.pmml.MiningFieldMetaInfo this;
        int index;

        this := @this: weka.core.pmml.MiningFieldMetaInfo;

        index := @parameter0: int;

        this.<weka.core.pmml.MiningFieldMetaInfo: int m_index> = index;

        return;
    }

    public void <init>(org.w3c.dom.Element) throws java.lang.Exception
    {
        weka.core.pmml.MiningFieldMetaInfo this;
        org.w3c.dom.Element field;
        java.lang.String usage, importance, outliers, lowValue, highValue, missingReplacement, missingTreatment, $r4, $r5, $r11;
        weka.core.pmml.MiningFieldMetaInfo$Usage[] l3;
        int l4, l6, l8, l5#20, $i0, l7#48, $i1, $i2, $i3, $i4, l9#106;
        weka.core.pmml.MiningFieldMetaInfo$Usage u, $r0;
        weka.core.pmml.MiningFieldMetaInfo$Outlier o, $r1, $r6, $r7;
        java.lang.IllegalArgumentException ex, $r10;
        weka.core.pmml.MiningFieldMetaInfo$Missing m, $r2;
        weka.core.pmml.FieldMetaInfo$Optype $r3;
        boolean $z0, $z1, $z2;
        double $d0, $d1, $d2, $d3;
        weka.core.pmml.MiningFieldMetaInfo$Outlier[] l5#44;
        java.lang.Exception $r8, $r9;
        weka.core.pmml.MiningFieldMetaInfo$Missing[] l7#102;

        this := @this: weka.core.pmml.MiningFieldMetaInfo;

        field := @parameter0: org.w3c.dom.Element;

        specialinvoke this.<weka.core.pmml.FieldMetaInfo: void <init>(org.w3c.dom.Element)>(field);

        $r0 = <weka.core.pmml.MiningFieldMetaInfo$Usage: weka.core.pmml.MiningFieldMetaInfo$Usage ACTIVE>;

        this.<weka.core.pmml.MiningFieldMetaInfo: weka.core.pmml.MiningFieldMetaInfo$Usage m_usageType> = $r0;

        $r1 = <weka.core.pmml.MiningFieldMetaInfo$Outlier: weka.core.pmml.MiningFieldMetaInfo$Outlier ASIS>;

        this.<weka.core.pmml.MiningFieldMetaInfo: weka.core.pmml.MiningFieldMetaInfo$Outlier m_outlierTreatmentMethod> = $r1;

        $r2 = <weka.core.pmml.MiningFieldMetaInfo$Missing: weka.core.pmml.MiningFieldMetaInfo$Missing ASIS>;

        this.<weka.core.pmml.MiningFieldMetaInfo: weka.core.pmml.MiningFieldMetaInfo$Missing m_missingValueTreatmentMethod> = $r2;

        $r3 = <weka.core.pmml.FieldMetaInfo$Optype: weka.core.pmml.FieldMetaInfo$Optype NONE>;

        this.<weka.core.pmml.MiningFieldMetaInfo: weka.core.pmml.FieldMetaInfo$Optype m_optypeOverride> = $r3;

        this.<weka.core.pmml.MiningFieldMetaInfo: weka.core.Instances m_miningSchemaI> = null;

        usage = interfaceinvoke field.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("usageType");

        l3 = staticinvoke <weka.core.pmml.MiningFieldMetaInfo$Usage: weka.core.pmml.MiningFieldMetaInfo$Usage[] values()>();

        l4 = lengthof l3;

        l5#20 = 0;

     label01:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l5#20);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l4);

        if l5#20 >= l4 goto label03;

        u = l3[l5#20];

        $r4 = virtualinvoke u.<weka.core.pmml.MiningFieldMetaInfo$Usage: java.lang.String toString()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(usage);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label02;

        this.<weka.core.pmml.MiningFieldMetaInfo: weka.core.pmml.MiningFieldMetaInfo$Usage m_usageType> = u;

        goto label03;

     label02:
        l5#20 = l5#20 + 1;

        goto label01;

     label03:
        importance = interfaceinvoke field.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("importance");

        $i0 = virtualinvoke importance.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label04;

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(importance);

        this.<weka.core.pmml.MiningFieldMetaInfo: double m_importance> = $d0;

     label04:
        outliers = interfaceinvoke field.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("outliers");

        l5#44 = staticinvoke <weka.core.pmml.MiningFieldMetaInfo$Outlier: weka.core.pmml.MiningFieldMetaInfo$Outlier[] values()>();

        l6 = lengthof l5#44;

        l7#48 = 0;

     label05:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l7#48);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l6);

        if l7#48 >= l6 goto label07;

        o = l5#44[l7#48];

        $r5 = virtualinvoke o.<weka.core.pmml.MiningFieldMetaInfo$Outlier: java.lang.String toString()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(outliers);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label06;

        this.<weka.core.pmml.MiningFieldMetaInfo: weka.core.pmml.MiningFieldMetaInfo$Outlier m_outlierTreatmentMethod> = o;

        goto label07;

     label06:
        l7#48 = l7#48 + 1;

        goto label05;

     label07:
        $i1 = virtualinvoke outliers.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 0 goto label11;

        $r6 = this.<weka.core.pmml.MiningFieldMetaInfo: weka.core.pmml.MiningFieldMetaInfo$Outlier m_outlierTreatmentMethod>;

        $r7 = <weka.core.pmml.MiningFieldMetaInfo$Outlier: weka.core.pmml.MiningFieldMetaInfo$Outlier ASEXTREMEVALUES>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r7);

        if $r6 != $r7 goto label11;

        lowValue = interfaceinvoke field.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("lowValue");

        $i2 = virtualinvoke lowValue.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 <= 0 goto label08;

        $d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(lowValue);

        this.<weka.core.pmml.MiningFieldMetaInfo: double m_lowValue> = $d1;

        goto label09;

     label08:
        $r8 = new java.lang.Exception;

        specialinvoke $r8.<java.lang.Exception: void <init>(java.lang.String)>("[MiningFieldMetaInfo] as extreme values outlier treatment specified, but no low value defined!");

        throw $r8;

     label09:
        highValue = interfaceinvoke field.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("highValue");

        $i3 = virtualinvoke highValue.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 <= 0 goto label10;

        $d2 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(highValue);

        this.<weka.core.pmml.MiningFieldMetaInfo: double m_highValue> = $d2;

        goto label11;

     label10:
        $r9 = new java.lang.Exception;

        specialinvoke $r9.<java.lang.Exception: void <init>(java.lang.String)>("[MiningFieldMetaInfo] as extreme values outlier treatment specified, but no high value defined!");

        throw $r9;

     label11:
        missingReplacement = interfaceinvoke field.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("missingValueReplacement");

        $i4 = virtualinvoke missingReplacement.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 <= 0 goto label18;

     label12:
        $d3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(missingReplacement);

        this.<weka.core.pmml.MiningFieldMetaInfo: double m_missingValueReplacementNumeric> = $d3;

     label13:
        goto label15;

     label14:
        $r10 := @caughtexception;

        ex = $r10;

        this.<weka.core.pmml.MiningFieldMetaInfo: java.lang.String m_missingValueReplacementNominal> = missingReplacement;

     label15:
        missingTreatment = interfaceinvoke field.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("missingValueTreatment");

        l7#102 = staticinvoke <weka.core.pmml.MiningFieldMetaInfo$Missing: weka.core.pmml.MiningFieldMetaInfo$Missing[] values()>();

        l8 = lengthof l7#102;

        l9#106 = 0;

     label16:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l9#106);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l8);

        if l9#106 >= l8 goto label18;

        m = l7#102[l9#106];

        $r11 = virtualinvoke m.<weka.core.pmml.MiningFieldMetaInfo$Missing: java.lang.String toString()>();

        $z2 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(missingTreatment);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label17;

        this.<weka.core.pmml.MiningFieldMetaInfo: weka.core.pmml.MiningFieldMetaInfo$Missing m_missingValueTreatmentMethod> = m;

        goto label18;

     label17:
        l9#106 = l9#106 + 1;

        goto label16;

     label18:
        return;

        catch java.lang.IllegalArgumentException from label12 to label13 with label14;
    }


