    public family.ElevatorSystem.Person bobCall()
    {
        family.Actions this;
        family.ElevatorSystem.Person $r0;
        family.ElevatorSystem.Environment $r1;

        this := @this: family.Actions;

        $r0 = new family.ElevatorSystem.Person;

        $r1 = this.<family.Actions: family.ElevatorSystem.Environment env>;

        specialinvoke $r0.<family.ElevatorSystem.Person: void <init>(java.lang.String,int,int,int,family.ElevatorSystem.Environment)>("bob", 40, 4, 0, $r1);

        return $r0;
    }

    public void <init>(family.ElevatorSystem.Environment, family.ElevatorSystem.Elevator)
    {
        family.Actions this;
        family.ElevatorSystem.Environment env;
        family.ElevatorSystem.Elevator e;
        family.ElevatorSystem.Floor[] $r0;
        int $i0;
        java.lang.IllegalArgumentException $r1;

        this := @this: family.Actions;

        env := @parameter0: family.ElevatorSystem.Environment;

        e := @parameter1: family.ElevatorSystem.Elevator;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = virtualinvoke env.<family.ElevatorSystem.Environment: family.ElevatorSystem.Floor[] getFloors()>();

        $i0 = lengthof $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 >= 5 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("These Actions assume at least 5 Floors!");

        throw $r1;

     label1:
        this.<family.Actions: family.ElevatorSystem.Environment env> = env;

        this.<family.Actions: family.ElevatorSystem.Elevator e> = e;

        return;
    }


