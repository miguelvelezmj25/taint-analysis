    static final int getProbe()
    {
        java.lang.Thread $r0;
        long $l0;
        sun.misc.Unsafe $r1;
        int $i1;

        $r1 = <java.util.concurrent.ThreadLocalRandom: sun.misc.Unsafe UNSAFE>;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $l0 = <java.util.concurrent.ThreadLocalRandom: long PROBE>;

        $i1 = virtualinvoke $r1.<sun.misc.Unsafe: int getInt(java.lang.Object,long)>($r0, $l0);

        return $i1;
    }

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicInteger $r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        long $l0, $l1, $l2, $l3;
        java.lang.ThreadLocal $r2;
        java.util.concurrent.ThreadLocalRandom $r3;
        java.io.ObjectStreamField[] $r4;
        java.io.ObjectStreamField $r5, $r7;
        java.lang.Class $r6, $r8, l0#26;
        sun.misc.Unsafe $r9, $r10, $r12, $r14;
        java.lang.reflect.Field $r11, $r13, $r15;
        java.lang.Exception $r16, l0#43;
        java.lang.Error $r17;

        $r0 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        <java.util.concurrent.ThreadLocalRandom: java.util.concurrent.atomic.AtomicInteger probeGenerator> = $r0;

        $r1 = new java.util.concurrent.atomic.AtomicLong;

        $l0 = staticinvoke <java.util.concurrent.ThreadLocalRandom: long initialSeed()>();

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>($l0);

        <java.util.concurrent.ThreadLocalRandom: java.util.concurrent.atomic.AtomicLong seeder> = $r1;

        $r2 = new java.lang.ThreadLocal;

        specialinvoke $r2.<java.lang.ThreadLocal: void <init>()>();

        <java.util.concurrent.ThreadLocalRandom: java.lang.ThreadLocal nextLocalGaussian> = $r2;

        $r3 = new java.util.concurrent.ThreadLocalRandom;

        specialinvoke $r3.<java.util.concurrent.ThreadLocalRandom: void <init>()>();

        <java.util.concurrent.ThreadLocalRandom: java.util.concurrent.ThreadLocalRandom instance> = $r3;

        $r4 = newarray (java.io.ObjectStreamField)[2];

        $r5 = new java.io.ObjectStreamField;

        $r6 = <java.lang.Long: java.lang.Class TYPE>;

        specialinvoke $r5.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("rnd", $r6);

        $r4[0] = $r5;

        $r7 = new java.io.ObjectStreamField;

        $r8 = <java.lang.Boolean: java.lang.Class TYPE>;

        specialinvoke $r7.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("initialized", $r8);

        $r4[1] = $r7;

        <java.util.concurrent.ThreadLocalRandom: java.io.ObjectStreamField[] serialPersistentFields> = $r4;

     label1:
        $r9 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.ThreadLocalRandom: sun.misc.Unsafe UNSAFE> = $r9;

        l0#26 = class "java/lang/Thread";

        $r10 = <java.util.concurrent.ThreadLocalRandom: sun.misc.Unsafe UNSAFE>;

        $r11 = virtualinvoke l0#26.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("threadLocalRandomSeed");

        $l1 = virtualinvoke $r10.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r11);

        <java.util.concurrent.ThreadLocalRandom: long SEED> = $l1;

        $r12 = <java.util.concurrent.ThreadLocalRandom: sun.misc.Unsafe UNSAFE>;

        $r13 = virtualinvoke l0#26.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("threadLocalRandomProbe");

        $l2 = virtualinvoke $r12.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r13);

        <java.util.concurrent.ThreadLocalRandom: long PROBE> = $l2;

        $r14 = <java.util.concurrent.ThreadLocalRandom: sun.misc.Unsafe UNSAFE>;

        $r15 = virtualinvoke l0#26.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("threadLocalRandomSecondarySeed");

        $l3 = virtualinvoke $r14.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r15);

        <java.util.concurrent.ThreadLocalRandom: long SECONDARY> = $l3;

     label2:
        goto label4;

     label3:
        $r16 := @caughtexception;

        l0#43 = $r16;

        $r17 = new java.lang.Error;

        specialinvoke $r17.<java.lang.Error: void <init>(java.lang.Throwable)>(l0#43);

        throw $r17;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static long initialSeed()
    {
        java.lang.String l0;
        byte[] l1;
        sun.security.action.GetPropertyAction $r0;
        java.lang.Object $r1;
        boolean $z0;
        byte $b0, $b3;
        long $l1, l2#18, $l2, $l4, $l5, $l6, $l7, $l8, $l9, $l10;
        int l4#20;

        $r0 = new sun.security.action.GetPropertyAction;

        specialinvoke $r0.<sun.security.action.GetPropertyAction: void <init>(java.lang.String)>("java.util.secureRandomSeed");

        $r1 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);

        l0 = (java.lang.String) $r1;

        if l0 == null goto label3;

        $z0 = virtualinvoke l0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        if $z0 == 0 goto label3;

        l1 = staticinvoke <java.security.SecureRandom: byte[] getSeed(int)>(8);

        $b0 = l1[0];

        $l1 = (long) $b0;

        l2#18 = $l1 & 255L;

        l4#20 = 1;

     label1:
        if l4#20 >= 8 goto label2;

        $l2 = l2#18 << 8;

        $b3 = l1[l4#20];

        $l4 = (long) $b3;

        $l5 = $l4 & 255L;

        l2#18 = $l2 | $l5;

        l4#20 = l4#20 + 1;

        goto label1;

     label2:
        return l2#18;

     label3:
        $l6 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l7 = staticinvoke <java.util.concurrent.ThreadLocalRandom: long mix64(long)>($l6);

        $l8 = staticinvoke <java.lang.System: long nanoTime()>();

        $l9 = staticinvoke <java.util.concurrent.ThreadLocalRandom: long mix64(long)>($l8);

        $l10 = $l7 ^ $l9;

        return $l10;
    }

    private static long mix64(long)
    {
        long l0#1, $l0, $l1, l0#9, $l2, $l3, l0#17, $l4, $l5;

        l0#1 := @parameter0: long;

        $l0 = l0#1 >>> 33;

        $l1 = l0#1 ^ $l0;

        l0#9 = $l1 * -49064778989728563L;

        $l2 = l0#9 >>> 33;

        $l3 = l0#9 ^ $l2;

        l0#17 = $l3 * -4265267296055464877L;

        $l4 = l0#17 >>> 33;

        $l5 = l0#17 ^ $l4;

        return $l5;
    }

    private void <init>()
    {
        java.util.concurrent.ThreadLocalRandom l0;

        l0 := @this: java.util.concurrent.ThreadLocalRandom;

        specialinvoke l0.<java.util.Random: void <init>()>();

        l0.<java.util.concurrent.ThreadLocalRandom: boolean initialized> = 1;

        return;
    }

    public void setSeed(long)
    {
        java.util.concurrent.ThreadLocalRandom l0;
        long l1;
        boolean $z0;
        java.lang.UnsupportedOperationException $r0;

        l0 := @this: java.util.concurrent.ThreadLocalRandom;

        l1 := @parameter0: long;

        $z0 = l0.<java.util.concurrent.ThreadLocalRandom: boolean initialized>;

        if $z0 == 0 goto label1;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;

     label1:
        return;
    }

    static final int advanceProbe(int)
    {
        int l0#1, $i0, l0#7, $i1, l0#13, $i2, l0#19;
        sun.misc.Unsafe $r0;
        java.lang.Thread $r1;
        long $l3;

        l0#1 := @parameter0: int;

        $i0 = l0#1 << 13;

        l0#7 = l0#1 ^ $i0;

        $i1 = l0#7 >>> 17;

        l0#13 = l0#7 ^ $i1;

        $i2 = l0#13 << 5;

        l0#19 = l0#13 ^ $i2;

        $r0 = <java.util.concurrent.ThreadLocalRandom: sun.misc.Unsafe UNSAFE>;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $l3 = <java.util.concurrent.ThreadLocalRandom: long PROBE>;

        virtualinvoke $r0.<sun.misc.Unsafe: void putInt(java.lang.Object,long,int)>($r1, $l3, l0#19);

        return l0#19;
    }

    static final void localInit()
    {
        int l0, l1, $i0;
        long l2, $l1, $l2, $l3;
        java.lang.Thread l4;
        java.util.concurrent.atomic.AtomicInteger $r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        sun.misc.Unsafe $r2, $r3;

        $r0 = <java.util.concurrent.ThreadLocalRandom: java.util.concurrent.atomic.AtomicInteger probeGenerator>;

        l0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(-1640531527);

        if l0 != 0 goto label1;

        $i0 = 1;

        goto label2;

     label1:
        $i0 = l0;

     label2:
        l1 = $i0;

        $r1 = <java.util.concurrent.ThreadLocalRandom: java.util.concurrent.atomic.AtomicLong seeder>;

        $l1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long getAndAdd(long)>(-4942790177534073029L);

        l2 = staticinvoke <java.util.concurrent.ThreadLocalRandom: long mix64(long)>($l1);

        l4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r2 = <java.util.concurrent.ThreadLocalRandom: sun.misc.Unsafe UNSAFE>;

        $l2 = <java.util.concurrent.ThreadLocalRandom: long SEED>;

        virtualinvoke $r2.<sun.misc.Unsafe: void putLong(java.lang.Object,long,long)>(l4, $l2, l2);

        $r3 = <java.util.concurrent.ThreadLocalRandom: sun.misc.Unsafe UNSAFE>;

        $l3 = <java.util.concurrent.ThreadLocalRandom: long PROBE>;

        virtualinvoke $r3.<sun.misc.Unsafe: void putInt(java.lang.Object,long,int)>(l4, $l3, l1);

        return;
    }


