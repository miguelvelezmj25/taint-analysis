    public boolean hasNext()
    {
        java.util.ArrayList$Itr l0;
        int $i0, $i1;
        java.util.ArrayList $r0;
        boolean $z0;

        l0 := @this: java.util.ArrayList$Itr;

        $i0 = l0.<java.util.ArrayList$Itr: int cursor>;

        $r0 = l0.<java.util.ArrayList$Itr: java.util.ArrayList this$0>;

        $i1 = staticinvoke <java.util.ArrayList: int access$100(java.util.ArrayList)>($r0);

        if $i0 == $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Object next()
    {
        java.util.ArrayList$Itr l0;
        int l1, $i1, $i2, $i3;
        java.lang.Object[] l2;
        java.util.ArrayList $r0, $r2;
        java.util.NoSuchElementException $r1;
        java.util.ConcurrentModificationException $r3;
        java.lang.Object $r4;

        l0 := @this: java.util.ArrayList$Itr;

        virtualinvoke l0.<java.util.ArrayList$Itr: void checkForComodification()>();

        l1 = l0.<java.util.ArrayList$Itr: int cursor>;

        $r0 = l0.<java.util.ArrayList$Itr: java.util.ArrayList this$0>;

        $i1 = staticinvoke <java.util.ArrayList: int access$100(java.util.ArrayList)>($r0);

        if l1 < $i1 goto label1;

        $r1 = new java.util.NoSuchElementException;

        specialinvoke $r1.<java.util.NoSuchElementException: void <init>()>();

        throw $r1;

     label1:
        $r2 = l0.<java.util.ArrayList$Itr: java.util.ArrayList this$0>;

        l2 = $r2.<java.util.ArrayList: java.lang.Object[] elementData>;

        $i2 = lengthof l2;

        if l1 < $i2 goto label2;

        $r3 = new java.util.ConcurrentModificationException;

        specialinvoke $r3.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r3;

     label2:
        $i3 = l1 + 1;

        l0.<java.util.ArrayList$Itr: int cursor> = $i3;

        l0.<java.util.ArrayList$Itr: int lastRet> = l1;

        $r4 = l2[l1];

        return $r4;
    }

    final void checkForComodification()
    {
        java.util.ArrayList$Itr l0;
        java.util.ArrayList $r0;
        int $i0, $i1;
        java.util.ConcurrentModificationException $r1;

        l0 := @this: java.util.ArrayList$Itr;

        $r0 = l0.<java.util.ArrayList$Itr: java.util.ArrayList this$0>;

        $i0 = $r0.<java.util.ArrayList: int modCount>;

        $i1 = l0.<java.util.ArrayList$Itr: int expectedModCount>;

        if $i0 == $i1 goto label1;

        $r1 = new java.util.ConcurrentModificationException;

        specialinvoke $r1.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    void <init>(java.util.ArrayList, java.util.ArrayList$1)
    {
        java.util.ArrayList$Itr l0;
        java.util.ArrayList l1;
        java.util.ArrayList$1 l2;

        l0 := @this: java.util.ArrayList$Itr;

        l1 := @parameter0: java.util.ArrayList;

        l2 := @parameter1: java.util.ArrayList$1;

        specialinvoke l0.<java.util.ArrayList$Itr: void <init>(java.util.ArrayList)>(l1);

        return;
    }

    private void <init>(java.util.ArrayList)
    {
        java.util.ArrayList$Itr l0;
        java.util.ArrayList l1, $r0;
        int $i0;

        l0 := @this: java.util.ArrayList$Itr;

        l1 := @parameter0: java.util.ArrayList;

        l0.<java.util.ArrayList$Itr: java.util.ArrayList this$0> = l1;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        l0.<java.util.ArrayList$Itr: int lastRet> = -1;

        $r0 = l0.<java.util.ArrayList$Itr: java.util.ArrayList this$0>;

        $i0 = $r0.<java.util.ArrayList: int modCount>;

        l0.<java.util.ArrayList$Itr: int expectedModCount> = $i0;

        return;
    }


