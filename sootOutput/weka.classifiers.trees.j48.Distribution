    public void <init>(weka.core.Instances) throws java.lang.Exception
    {
        weka.classifiers.trees.j48.Distribution this;
        weka.core.Instances source;
        java.util.Enumeration enu;
        double[][] $r0, $r3;
        double[] $r1, $r2, $r4;
        int $i0, $i1;
        boolean $z0;
        java.lang.Object $r5;
        weka.core.Instance $r6;

        this := @this: weka.classifiers.trees.j48.Distribution;

        source := @parameter0: weka.core.Instances;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = newmultiarray (double)[1][0];

        this.<weka.classifiers.trees.j48.Distribution: double[][] m_perClassPerBag> = $r0;

        $r1 = newarray (double)[1];

        this.<weka.classifiers.trees.j48.Distribution: double[] m_perBag> = $r1;

        this.<weka.classifiers.trees.j48.Distribution: double totaL> = 0.0;

        $i0 = virtualinvoke source.<weka.core.Instances: int numClasses()>();

        $r2 = newarray (double)[$i0];

        this.<weka.classifiers.trees.j48.Distribution: double[] m_perClass> = $r2;

        $r3 = this.<weka.classifiers.trees.j48.Distribution: double[][] m_perClassPerBag>;

        $i1 = virtualinvoke source.<weka.core.Instances: int numClasses()>();

        $r4 = newarray (double)[$i1];

        $r3[0] = $r4;

        enu = virtualinvoke source.<weka.core.Instances: java.util.Enumeration enumerateInstances()>();

     label1:
        $z0 = interfaceinvoke enu.<java.util.Enumeration: boolean hasMoreElements()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke enu.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r6 = (weka.core.Instance) $r5;

        virtualinvoke this.<weka.classifiers.trees.j48.Distribution: void add(int,weka.core.Instance)>(0, $r6);

        goto label1;

     label2:
        return;
    }

    public final void add(int, weka.core.Instance) throws java.lang.Exception
    {
        weka.classifiers.trees.j48.Distribution this;
        int bagIndex, classIndex;
        weka.core.Instance instance;
        double weight, $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        double[][] $r0, $r2;
        double[] $r1, $r3, $r4, $r5, $r6, $r7;

        this := @this: weka.classifiers.trees.j48.Distribution;

        bagIndex := @parameter0: int;

        instance := @parameter1: weka.core.Instance;

        $d0 = interfaceinvoke instance.<weka.core.Instance: double classValue()>();

        classIndex = (int) $d0;

        weight = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        $r0 = this.<weka.classifiers.trees.j48.Distribution: double[][] m_perClassPerBag>;

        $r1 = $r0[bagIndex];

        $r2 = this.<weka.classifiers.trees.j48.Distribution: double[][] m_perClassPerBag>;

        $r3 = $r2[bagIndex];

        $d1 = $r3[classIndex];

        $d2 = $d1 + weight;

        $r1[classIndex] = $d2;

        $r4 = this.<weka.classifiers.trees.j48.Distribution: double[] m_perBag>;

        $r5 = this.<weka.classifiers.trees.j48.Distribution: double[] m_perBag>;

        $d3 = $r5[bagIndex];

        $d4 = $d3 + weight;

        $r4[bagIndex] = $d4;

        $r6 = this.<weka.classifiers.trees.j48.Distribution: double[] m_perClass>;

        $r7 = this.<weka.classifiers.trees.j48.Distribution: double[] m_perClass>;

        $d5 = $r7[classIndex];

        $d6 = $d5 + weight;

        $r6[classIndex] = $d6;

        $d7 = this.<weka.classifiers.trees.j48.Distribution: double totaL>;

        $d8 = $d7 + weight;

        this.<weka.classifiers.trees.j48.Distribution: double totaL> = $d8;

        return;
    }

    public void <init>(weka.classifiers.trees.j48.Distribution)
    {
        weka.classifiers.trees.j48.Distribution this, toMerge;
        double $d0, $d1;
        int $i0, $i1, $i2, $i3;
        double[] $r0, $r1, $r2, $r5, $r6, $r8, $r9, $r10;
        double[][] $r3, $r4, $r7;

        this := @this: weka.classifiers.trees.j48.Distribution;

        toMerge := @parameter0: weka.classifiers.trees.j48.Distribution;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $d0 = toMerge.<weka.classifiers.trees.j48.Distribution: double totaL>;

        this.<weka.classifiers.trees.j48.Distribution: double totaL> = $d0;

        $i0 = virtualinvoke toMerge.<weka.classifiers.trees.j48.Distribution: int numClasses()>();

        $r0 = newarray (double)[$i0];

        this.<weka.classifiers.trees.j48.Distribution: double[] m_perClass> = $r0;

        $r1 = toMerge.<weka.classifiers.trees.j48.Distribution: double[] m_perClass>;

        $r2 = this.<weka.classifiers.trees.j48.Distribution: double[] m_perClass>;

        $i1 = virtualinvoke toMerge.<weka.classifiers.trees.j48.Distribution: int numClasses()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, 0, $i1);

        $r3 = newmultiarray (double)[1][0];

        this.<weka.classifiers.trees.j48.Distribution: double[][] m_perClassPerBag> = $r3;

        $r4 = this.<weka.classifiers.trees.j48.Distribution: double[][] m_perClassPerBag>;

        $i2 = virtualinvoke toMerge.<weka.classifiers.trees.j48.Distribution: int numClasses()>();

        $r5 = newarray (double)[$i2];

        $r4[0] = $r5;

        $r6 = toMerge.<weka.classifiers.trees.j48.Distribution: double[] m_perClass>;

        $r7 = this.<weka.classifiers.trees.j48.Distribution: double[][] m_perClassPerBag>;

        $r8 = $r7[0];

        $i3 = virtualinvoke toMerge.<weka.classifiers.trees.j48.Distribution: int numClasses()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r8, 0, $i3);

        $r9 = newarray (double)[1];

        this.<weka.classifiers.trees.j48.Distribution: double[] m_perBag> = $r9;

        $r10 = this.<weka.classifiers.trees.j48.Distribution: double[] m_perBag>;

        $d1 = this.<weka.classifiers.trees.j48.Distribution: double totaL>;

        $r10[0] = $d1;

        return;
    }

    public final int numClasses()
    {
        weka.classifiers.trees.j48.Distribution this;
        double[] $r0;
        int $i0;

        this := @this: weka.classifiers.trees.j48.Distribution;

        $r0 = this.<weka.classifiers.trees.j48.Distribution: double[] m_perClass>;

        $i0 = lengthof $r0;

        return $i0;
    }

    public final double perBag(int)
    {
        weka.classifiers.trees.j48.Distribution this;
        int bagIndex;
        double[] $r0;
        double $d0;

        this := @this: weka.classifiers.trees.j48.Distribution;

        bagIndex := @parameter0: int;

        $r0 = this.<weka.classifiers.trees.j48.Distribution: double[] m_perBag>;

        $d0 = $r0[bagIndex];

        return $d0;
    }

    public final double total()
    {
        weka.classifiers.trees.j48.Distribution this;
        double $d0;

        this := @this: weka.classifiers.trees.j48.Distribution;

        $d0 = this.<weka.classifiers.trees.j48.Distribution: double totaL>;

        return $d0;
    }

    public final double numIncorrect()
    {
        weka.classifiers.trees.j48.Distribution this;
        double $d0, $d1, $d2;

        this := @this: weka.classifiers.trees.j48.Distribution;

        $d0 = this.<weka.classifiers.trees.j48.Distribution: double totaL>;

        $d1 = virtualinvoke this.<weka.classifiers.trees.j48.Distribution: double numCorrect()>();

        $d2 = $d0 - $d1;

        return $d2;
    }

    public final double numCorrect()
    {
        weka.classifiers.trees.j48.Distribution this;
        double[] $r0;
        int $i0;
        double $d0;

        this := @this: weka.classifiers.trees.j48.Distribution;

        $r0 = this.<weka.classifiers.trees.j48.Distribution: double[] m_perClass>;

        $i0 = virtualinvoke this.<weka.classifiers.trees.j48.Distribution: int maxClass()>();

        $d0 = $r0[$i0];

        return $d0;
    }

    public final int maxClass()
    {
        weka.classifiers.trees.j48.Distribution this;
        double maxCount#2, $d0;
        int maxIndex#4, i#6, $i0;
        double[] $r0, $r1, $r2;
        boolean $z0;

        this := @this: weka.classifiers.trees.j48.Distribution;

        maxCount#2 = 0.0;

        maxIndex#4 = 0;

        i#6 = 0;

     label1:
        $r0 = this.<weka.classifiers.trees.j48.Distribution: double[] m_perClass>;

        $i0 = lengthof $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#6 >= $i0 goto label3;

        $r1 = this.<weka.classifiers.trees.j48.Distribution: double[] m_perClass>;

        $d0 = $r1[i#6];

        $z0 = staticinvoke <weka.core.Utils: boolean gr(double,double)>($d0, maxCount#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $r2 = this.<weka.classifiers.trees.j48.Distribution: double[] m_perClass>;

        maxCount#2 = $r2[i#6];

        maxIndex#4 = i#6;

     label2:
        i#6 = i#6 + 1;

        goto label1;

     label3:
        return maxIndex#4;
    }

    public final double perClassPerBag(int, int)
    {
        weka.classifiers.trees.j48.Distribution this;
        int bagIndex, classIndex;
        double[][] $r0;
        double[] $r1;
        double $d0;

        this := @this: weka.classifiers.trees.j48.Distribution;

        bagIndex := @parameter0: int;

        classIndex := @parameter1: int;

        $r0 = this.<weka.classifiers.trees.j48.Distribution: double[][] m_perClassPerBag>;

        $r1 = $r0[bagIndex];

        $d0 = $r1[classIndex];

        return $d0;
    }

    public void <init>(weka.core.Instances, weka.classifiers.trees.j48.ClassifierSplitModel) throws java.lang.Exception
    {
        weka.classifiers.trees.j48.Distribution this;
        weka.core.Instances source;
        weka.classifiers.trees.j48.ClassifierSplitModel modelToUse;
        java.util.Enumeration enu;
        weka.core.Instance instance;
        int index, $i0, $i1, $i2, i#18, $i3, $i4;
        double[] weights, $r1, $r2, $r4;
        double[][] $r0, $r3;
        boolean $z0;
        java.lang.Object $r5;

        this := @this: weka.classifiers.trees.j48.Distribution;

        source := @parameter0: weka.core.Instances;

        modelToUse := @parameter1: weka.classifiers.trees.j48.ClassifierSplitModel;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $i0 = virtualinvoke modelToUse.<weka.classifiers.trees.j48.ClassifierSplitModel: int numSubsets()>();

        $r0 = newmultiarray (double)[$i0][0];

        this.<weka.classifiers.trees.j48.Distribution: double[][] m_perClassPerBag> = $r0;

        $i1 = virtualinvoke modelToUse.<weka.classifiers.trees.j48.ClassifierSplitModel: int numSubsets()>();

        $r1 = newarray (double)[$i1];

        this.<weka.classifiers.trees.j48.Distribution: double[] m_perBag> = $r1;

        this.<weka.classifiers.trees.j48.Distribution: double totaL> = 0.0;

        $i2 = virtualinvoke source.<weka.core.Instances: int numClasses()>();

        $r2 = newarray (double)[$i2];

        this.<weka.classifiers.trees.j48.Distribution: double[] m_perClass> = $r2;

        i#18 = 0;

     label1:
        $i3 = virtualinvoke modelToUse.<weka.classifiers.trees.j48.ClassifierSplitModel: int numSubsets()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#18);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if i#18 >= $i3 goto label2;

        $r3 = this.<weka.classifiers.trees.j48.Distribution: double[][] m_perClassPerBag>;

        $i4 = virtualinvoke source.<weka.core.Instances: int numClasses()>();

        $r4 = newarray (double)[$i4];

        $r3[i#18] = $r4;

        i#18 = i#18 + 1;

        goto label1;

     label2:
        enu = virtualinvoke source.<weka.core.Instances: java.util.Enumeration enumerateInstances()>();

     label3:
        $z0 = interfaceinvoke enu.<java.util.Enumeration: boolean hasMoreElements()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke enu.<java.util.Enumeration: java.lang.Object nextElement()>();

        instance = (weka.core.Instance) $r5;

        index = virtualinvoke modelToUse.<weka.classifiers.trees.j48.ClassifierSplitModel: int whichSubset(weka.core.Instance)>(instance);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(index);

        if index == -1 goto label4;

        virtualinvoke this.<weka.classifiers.trees.j48.Distribution: void add(int,weka.core.Instance)>(index, instance);

        goto label3;

     label4:
        weights = virtualinvoke modelToUse.<weka.classifiers.trees.j48.ClassifierSplitModel: double[] weights(weka.core.Instance)>(instance);

        virtualinvoke this.<weka.classifiers.trees.j48.Distribution: void addWeights(weka.core.Instance,double[])>(instance, weights);

        goto label3;

     label5:
        return;
    }

    public final void addWeights(weka.core.Instance, double[]) throws java.lang.Exception
    {
        weka.classifiers.trees.j48.Distribution this;
        weka.core.Instance instance;
        double[] weights, $r0, $r2, $r4, $r5, $r6, $r7, $r8;
        int classIndex, i#5, $i0;
        double weight, $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        double[][] $r1, $r3;

        this := @this: weka.classifiers.trees.j48.Distribution;

        instance := @parameter0: weka.core.Instance;

        weights := @parameter1: double[];

        $d0 = interfaceinvoke instance.<weka.core.Instance: double classValue()>();

        classIndex = (int) $d0;

        i#5 = 0;

     label1:
        $r0 = this.<weka.classifiers.trees.j48.Distribution: double[] m_perBag>;

        $i0 = lengthof $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#5 >= $i0 goto label2;

        $d1 = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        $d2 = weights[i#5];

        weight = $d1 * $d2;

        $r1 = this.<weka.classifiers.trees.j48.Distribution: double[][] m_perClassPerBag>;

        $r2 = $r1[i#5];

        $r3 = this.<weka.classifiers.trees.j48.Distribution: double[][] m_perClassPerBag>;

        $r4 = $r3[i#5];

        $d3 = $r4[classIndex];

        $d4 = $d3 + weight;

        $r2[classIndex] = $d4;

        $r5 = this.<weka.classifiers.trees.j48.Distribution: double[] m_perBag>;

        $r6 = this.<weka.classifiers.trees.j48.Distribution: double[] m_perBag>;

        $d5 = $r6[i#5];

        $d6 = $d5 + weight;

        $r5[i#5] = $d6;

        $r7 = this.<weka.classifiers.trees.j48.Distribution: double[] m_perClass>;

        $r8 = this.<weka.classifiers.trees.j48.Distribution: double[] m_perClass>;

        $d7 = $r8[classIndex];

        $d8 = $d7 + weight;

        $r7[classIndex] = $d8;

        $d9 = this.<weka.classifiers.trees.j48.Distribution: double totaL>;

        $d10 = $d9 + weight;

        this.<weka.classifiers.trees.j48.Distribution: double totaL> = $d10;

        i#5 = i#5 + 1;

        goto label1;

     label2:
        return;
    }

    public final double perClass(int)
    {
        weka.classifiers.trees.j48.Distribution this;
        int classIndex;
        double[] $r0;
        double $d0;

        this := @this: weka.classifiers.trees.j48.Distribution;

        classIndex := @parameter0: int;

        $r0 = this.<weka.classifiers.trees.j48.Distribution: double[] m_perClass>;

        $d0 = $r0[classIndex];

        return $d0;
    }

    public void <init>(int, int)
    {
        weka.classifiers.trees.j48.Distribution this;
        int numBags, numClasses, i#13;
        double[][] $r0, $r3;
        double[] $r1, $r2, $r4;

        this := @this: weka.classifiers.trees.j48.Distribution;

        numBags := @parameter0: int;

        numClasses := @parameter1: int;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = newmultiarray (double)[numBags][0];

        this.<weka.classifiers.trees.j48.Distribution: double[][] m_perClassPerBag> = $r0;

        $r1 = newarray (double)[numBags];

        this.<weka.classifiers.trees.j48.Distribution: double[] m_perBag> = $r1;

        $r2 = newarray (double)[numClasses];

        this.<weka.classifiers.trees.j48.Distribution: double[] m_perClass> = $r2;

        i#13 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#13);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(numBags);

        if i#13 >= numBags goto label2;

        $r3 = this.<weka.classifiers.trees.j48.Distribution: double[][] m_perClassPerBag>;

        $r4 = newarray (double)[numClasses];

        $r3[i#13] = $r4;

        i#13 = i#13 + 1;

        goto label1;

     label2:
        this.<weka.classifiers.trees.j48.Distribution: double totaL> = 0.0;

        return;
    }

    public final int numBags()
    {
        weka.classifiers.trees.j48.Distribution this;
        double[] $r0;
        int $i0;

        this := @this: weka.classifiers.trees.j48.Distribution;

        $r0 = this.<weka.classifiers.trees.j48.Distribution: double[] m_perBag>;

        $i0 = lengthof $r0;

        return $i0;
    }

    public final void addRange(int, weka.core.Instances, int, int) throws java.lang.Exception
    {
        weka.classifiers.trees.j48.Distribution this;
        int bagIndex, startIndex, lastPlusOne, classIndex, i#4;
        weka.core.Instances source;
        weka.core.Instance instance;
        double sumOfWeights#2, $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;
        double[][] $r0;
        double[] $r1, $r2, $r3;

        this := @this: weka.classifiers.trees.j48.Distribution;

        bagIndex := @parameter0: int;

        source := @parameter1: weka.core.Instances;

        startIndex := @parameter2: int;

        lastPlusOne := @parameter3: int;

        sumOfWeights#2 = 0.0;

        i#4 = startIndex;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lastPlusOne);

        if i#4 >= lastPlusOne goto label2;

        instance = virtualinvoke source.<weka.core.Instances: weka.core.Instance instance(int)>(i#4);

        $d0 = interfaceinvoke instance.<weka.core.Instance: double classValue()>();

        classIndex = (int) $d0;

        $d1 = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        sumOfWeights#2 = sumOfWeights#2 + $d1;

        $r0 = this.<weka.classifiers.trees.j48.Distribution: double[][] m_perClassPerBag>;

        $r1 = $r0[bagIndex];

        $d2 = $r1[classIndex];

        $d3 = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        $d4 = $d2 + $d3;

        $r1[classIndex] = $d4;

        $r2 = this.<weka.classifiers.trees.j48.Distribution: double[] m_perClass>;

        $d5 = $r2[classIndex];

        $d6 = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        $d7 = $d5 + $d6;

        $r2[classIndex] = $d7;

        i#4 = i#4 + 1;

        goto label1;

     label2:
        $r3 = this.<weka.classifiers.trees.j48.Distribution: double[] m_perBag>;

        $d8 = $r3[bagIndex];

        $d9 = $d8 + sumOfWeights#2;

        $r3[bagIndex] = $d9;

        $d10 = this.<weka.classifiers.trees.j48.Distribution: double totaL>;

        $d11 = $d10 + sumOfWeights#2;

        this.<weka.classifiers.trees.j48.Distribution: double totaL> = $d11;

        return;
    }

    public final void shiftRange(int, int, weka.core.Instances, int, int) throws java.lang.Exception
    {
        weka.classifiers.trees.j48.Distribution this;
        int 'from', 'to', startIndex, lastPlusOne, classIndex, i#2;
        weka.core.Instances source;
        weka.core.Instance instance;
        double weight, $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        double[][] $r0, $r2;
        double[] $r1, $r3, $r4, $r5;

        this := @this: weka.classifiers.trees.j48.Distribution;

        'from' := @parameter0: int;

        'to' := @parameter1: int;

        source := @parameter2: weka.core.Instances;

        startIndex := @parameter3: int;

        lastPlusOne := @parameter4: int;

        i#2 = startIndex;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lastPlusOne);

        if i#2 >= lastPlusOne goto label2;

        instance = virtualinvoke source.<weka.core.Instances: weka.core.Instance instance(int)>(i#2);

        $d0 = interfaceinvoke instance.<weka.core.Instance: double classValue()>();

        classIndex = (int) $d0;

        weight = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        $r0 = this.<weka.classifiers.trees.j48.Distribution: double[][] m_perClassPerBag>;

        $r1 = $r0['from'];

        $d1 = $r1[classIndex];

        $d2 = $d1 - weight;

        $r1[classIndex] = $d2;

        $r2 = this.<weka.classifiers.trees.j48.Distribution: double[][] m_perClassPerBag>;

        $r3 = $r2['to'];

        $d3 = $r3[classIndex];

        $d4 = $d3 + weight;

        $r3[classIndex] = $d4;

        $r4 = this.<weka.classifiers.trees.j48.Distribution: double[] m_perBag>;

        $d5 = $r4['from'];

        $d6 = $d5 - weight;

        $r4['from'] = $d6;

        $r5 = this.<weka.classifiers.trees.j48.Distribution: double[] m_perBag>;

        $d7 = $r5['to'];

        $d8 = $d7 + weight;

        $r5['to'] = $d8;

        i#2 = i#2 + 1;

        goto label1;

     label2:
        return;
    }

    public final boolean check(double)
    {
        weka.classifiers.trees.j48.Distribution this;
        double minNoObj, $d0;
        int counter#2, i#4, $i0;
        double[] $r0, $r1;
        boolean $z0;

        this := @this: weka.classifiers.trees.j48.Distribution;

        minNoObj := @parameter0: double;

        counter#2 = 0;

        i#4 = 0;

     label1:
        $r0 = this.<weka.classifiers.trees.j48.Distribution: double[] m_perBag>;

        $i0 = lengthof $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#4 >= $i0 goto label3;

        $r1 = this.<weka.classifiers.trees.j48.Distribution: double[] m_perBag>;

        $d0 = $r1[i#4];

        $z0 = staticinvoke <weka.core.Utils: boolean grOrEq(double,double)>($d0, minNoObj);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        counter#2 = counter#2 + 1;

     label2:
        i#4 = i#4 + 1;

        goto label1;

     label3:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(counter#2);

        if counter#2 <= 1 goto label4;

        return 1;

     label4:
        return 0;
    }

    public final void addInstWithUnknown(weka.core.Instances, int) throws java.lang.Exception
    {
        weka.classifiers.trees.j48.Distribution this;
        weka.core.Instances source;
        int attIndex, classIndex, $i0, j#6, $i1, $i2, j#61, $i3;
        double[] probs, $r0, $r1, $r2, $r4, $r5, $r6, $r8, $r10, $r11, $r12;
        java.util.Enumeration enu;
        weka.core.Instance instance;
        double weight, newWeight, $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15;
        boolean $z0, $z1, $z2;
        java.lang.Object $r3;
        double[][] $r7, $r9;

        this := @this: weka.classifiers.trees.j48.Distribution;

        source := @parameter0: weka.core.Instances;

        attIndex := @parameter1: int;

        $r0 = this.<weka.classifiers.trees.j48.Distribution: double[] m_perBag>;

        $i0 = lengthof $r0;

        probs = newarray (double)[$i0];

        j#6 = 0;

     label1:
        $r1 = this.<weka.classifiers.trees.j48.Distribution: double[] m_perBag>;

        $i1 = lengthof $r1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if j#6 >= $i1 goto label4;

        $d0 = this.<weka.classifiers.trees.j48.Distribution: double totaL>;

        $z0 = staticinvoke <weka.core.Utils: boolean eq(double,double)>($d0, 0.0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $i2 = lengthof probs;

        $d1 = (double) $i2;

        $d2 = 1.0 / $d1;

        probs[j#6] = $d2;

        goto label3;

     label2:
        $r2 = this.<weka.classifiers.trees.j48.Distribution: double[] m_perBag>;

        $d3 = $r2[j#6];

        $d4 = this.<weka.classifiers.trees.j48.Distribution: double totaL>;

        $d5 = $d3 / $d4;

        probs[j#6] = $d5;

     label3:
        j#6 = j#6 + 1;

        goto label1;

     label4:
        enu = virtualinvoke source.<weka.core.Instances: java.util.Enumeration enumerateInstances()>();

     label5:
        $z1 = interfaceinvoke enu.<java.util.Enumeration: boolean hasMoreElements()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label7;

        $r3 = interfaceinvoke enu.<java.util.Enumeration: java.lang.Object nextElement()>();

        instance = (weka.core.Instance) $r3;

        $z2 = interfaceinvoke instance.<weka.core.Instance: boolean isMissing(int)>(attIndex);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label5;

        $d6 = interfaceinvoke instance.<weka.core.Instance: double classValue()>();

        classIndex = (int) $d6;

        weight = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        $r4 = this.<weka.classifiers.trees.j48.Distribution: double[] m_perClass>;

        $r5 = this.<weka.classifiers.trees.j48.Distribution: double[] m_perClass>;

        $d7 = $r5[classIndex];

        $d8 = $d7 + weight;

        $r4[classIndex] = $d8;

        $d9 = this.<weka.classifiers.trees.j48.Distribution: double totaL>;

        $d10 = $d9 + weight;

        this.<weka.classifiers.trees.j48.Distribution: double totaL> = $d10;

        j#61 = 0;

     label6:
        $r6 = this.<weka.classifiers.trees.j48.Distribution: double[] m_perBag>;

        $i3 = lengthof $r6;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#61);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if j#61 >= $i3 goto label5;

        $d11 = probs[j#61];

        newWeight = $d11 * weight;

        $r7 = this.<weka.classifiers.trees.j48.Distribution: double[][] m_perClassPerBag>;

        $r8 = $r7[j#61];

        $r9 = this.<weka.classifiers.trees.j48.Distribution: double[][] m_perClassPerBag>;

        $r10 = $r9[j#61];

        $d12 = $r10[classIndex];

        $d13 = $d12 + newWeight;

        $r8[classIndex] = $d13;

        $r11 = this.<weka.classifiers.trees.j48.Distribution: double[] m_perBag>;

        $r12 = this.<weka.classifiers.trees.j48.Distribution: double[] m_perBag>;

        $d14 = $r12[j#61];

        $d15 = $d14 + newWeight;

        $r11[j#61] = $d15;

        j#61 = j#61 + 1;

        goto label6;

     label7:
        return;
    }

    public void <init>(weka.classifiers.trees.j48.Distribution, int)
    {
        weka.classifiers.trees.j48.Distribution this, toMerge;
        int index, $i0, $i1, $i2, $i3, $i4, i#46, $i5;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        double[] $r0, $r1, $r2, $r5, $r7, $r9, $r11, $r13, $r14, $r16, $r17, $r18, $r19, $r20, $r21;
        double[][] $r3, $r4, $r6, $r8, $r10, $r12, $r15;

        this := @this: weka.classifiers.trees.j48.Distribution;

        toMerge := @parameter0: weka.classifiers.trees.j48.Distribution;

        index := @parameter1: int;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $d0 = toMerge.<weka.classifiers.trees.j48.Distribution: double totaL>;

        this.<weka.classifiers.trees.j48.Distribution: double totaL> = $d0;

        $i0 = virtualinvoke toMerge.<weka.classifiers.trees.j48.Distribution: int numClasses()>();

        $r0 = newarray (double)[$i0];

        this.<weka.classifiers.trees.j48.Distribution: double[] m_perClass> = $r0;

        $r1 = toMerge.<weka.classifiers.trees.j48.Distribution: double[] m_perClass>;

        $r2 = this.<weka.classifiers.trees.j48.Distribution: double[] m_perClass>;

        $i1 = virtualinvoke toMerge.<weka.classifiers.trees.j48.Distribution: int numClasses()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, 0, $i1);

        $r3 = newmultiarray (double)[2][0];

        this.<weka.classifiers.trees.j48.Distribution: double[][] m_perClassPerBag> = $r3;

        $r4 = this.<weka.classifiers.trees.j48.Distribution: double[][] m_perClassPerBag>;

        $i2 = virtualinvoke toMerge.<weka.classifiers.trees.j48.Distribution: int numClasses()>();

        $r5 = newarray (double)[$i2];

        $r4[0] = $r5;

        $r6 = toMerge.<weka.classifiers.trees.j48.Distribution: double[][] m_perClassPerBag>;

        $r7 = $r6[index];

        $r8 = this.<weka.classifiers.trees.j48.Distribution: double[][] m_perClassPerBag>;

        $r9 = $r8[0];

        $i3 = virtualinvoke toMerge.<weka.classifiers.trees.j48.Distribution: int numClasses()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, $r9, 0, $i3);

        $r10 = this.<weka.classifiers.trees.j48.Distribution: double[][] m_perClassPerBag>;

        $i4 = virtualinvoke toMerge.<weka.classifiers.trees.j48.Distribution: int numClasses()>();

        $r11 = newarray (double)[$i4];

        $r10[1] = $r11;

        i#46 = 0;

     label1:
        $i5 = virtualinvoke toMerge.<weka.classifiers.trees.j48.Distribution: int numClasses()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#46);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if i#46 >= $i5 goto label2;

        $r12 = this.<weka.classifiers.trees.j48.Distribution: double[][] m_perClassPerBag>;

        $r13 = $r12[1];

        $r14 = toMerge.<weka.classifiers.trees.j48.Distribution: double[] m_perClass>;

        $d1 = $r14[i#46];

        $r15 = this.<weka.classifiers.trees.j48.Distribution: double[][] m_perClassPerBag>;

        $r16 = $r15[0];

        $d2 = $r16[i#46];

        $d3 = $d1 - $d2;

        $r13[i#46] = $d3;

        i#46 = i#46 + 1;

        goto label1;

     label2:
        $r17 = newarray (double)[2];

        this.<weka.classifiers.trees.j48.Distribution: double[] m_perBag> = $r17;

        $r18 = this.<weka.classifiers.trees.j48.Distribution: double[] m_perBag>;

        $r19 = toMerge.<weka.classifiers.trees.j48.Distribution: double[] m_perBag>;

        $d4 = $r19[index];

        $r18[0] = $d4;

        $r20 = this.<weka.classifiers.trees.j48.Distribution: double[] m_perBag>;

        $d5 = this.<weka.classifiers.trees.j48.Distribution: double totaL>;

        $r21 = this.<weka.classifiers.trees.j48.Distribution: double[] m_perBag>;

        $d6 = $r21[0];

        $d7 = $d5 - $d6;

        $r20[1] = $d7;

        return;
    }


