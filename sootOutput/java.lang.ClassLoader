    static void checkClassLoaderPermission(java.lang.ClassLoader, java.lang.Class)
    {
        java.lang.ClassLoader l0, l3;
        java.lang.Class l1;
        java.lang.SecurityManager l2;
        boolean $z0;
        java.lang.RuntimePermission $r0;

        l0 := @parameter0: java.lang.ClassLoader;

        l1 := @parameter1: java.lang.Class;

        l2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l2);

        if l2 == null goto label1;

        l3 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getClassLoader(java.lang.Class)>(l1);

        $z0 = staticinvoke <java.lang.ClassLoader: boolean needsClassLoaderPermissionCheck(java.lang.ClassLoader,java.lang.ClassLoader)>(l3, l0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r0 = <sun.security.util.SecurityConstants: java.lang.RuntimePermission GET_CLASSLOADER_PERMISSION>;

        virtualinvoke l2.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r0);

     label1:
        return;
    }

    static void <clinit>()
    {
        java.security.cert.Certificate[] $r0;
        java.util.Vector $r1, $r2;
        java.util.Stack $r3;

        staticinvoke <java.lang.ClassLoader: void registerNatives()>();

        $r0 = newarray (java.security.cert.Certificate)[0];

        <java.lang.ClassLoader: java.security.cert.Certificate[] nocerts> = $r0;

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>()>();

        <java.lang.ClassLoader: java.util.Vector loadedLibraryNames> = $r1;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        <java.lang.ClassLoader: java.util.Vector systemNativeLibraries> = $r2;

        $r3 = new java.util.Stack;

        specialinvoke $r3.<java.util.Stack: void <init>()>();

        <java.lang.ClassLoader: java.util.Stack nativeLibraryContext> = $r3;

        return;
    }

    private static boolean needsClassLoaderPermissionCheck(java.lang.ClassLoader, java.lang.ClassLoader)
    {
        java.lang.ClassLoader l0, l1;
        boolean $z0, $z1;

        l0 := @parameter0: java.lang.ClassLoader;

        l1 := @parameter1: java.lang.ClassLoader;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l1);

        if l0 != l1 goto label1;

        return 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l0);

        if l0 != null goto label2;

        return 0;

     label2:
        $z0 = virtualinvoke l1.<java.lang.ClassLoader: boolean isAncestor(java.lang.ClassLoader)>(l0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    static java.lang.ClassLoader getClassLoader(java.lang.Class)
    {
        java.lang.Class l0;
        java.lang.ClassLoader $r0;

        l0 := @parameter0: java.lang.Class;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l0);

        if l0 != null goto label1;

        return null;

     label1:
        $r0 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>();

        return $r0;
    }

    public static java.lang.ClassLoader getSystemClassLoader()
    {
        java.lang.SecurityManager l0;
        java.lang.Class $r0;
        java.lang.ClassLoader $r1, $r2, $r3;

        staticinvoke <java.lang.ClassLoader: void initSystemClassLoader()>();

        $r1 = <java.lang.ClassLoader: java.lang.ClassLoader scl>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 != null goto label1;

        return null;

     label1:
        l0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l0);

        if l0 == null goto label2;

        $r2 = <java.lang.ClassLoader: java.lang.ClassLoader scl>;

        $r0 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();

        staticinvoke <java.lang.ClassLoader: void checkClassLoaderPermission(java.lang.ClassLoader,java.lang.Class)>($r2, $r0);

     label2:
        $r3 = <java.lang.ClassLoader: java.lang.ClassLoader scl>;

        return $r3;
    }

    private static synchronized void initSystemClassLoader()
    {
        sun.misc.Launcher l0;
        java.security.PrivilegedActionException l2, $r7;
        boolean $z0, $z1, $z2;
        java.lang.ClassLoader $r0, $r2, $r4, $r6;
        java.lang.IllegalStateException $r1;
        java.lang.Throwable l1#9;
        java.lang.SystemClassLoaderAction $r3;
        java.lang.Object $r5;
        java.lang.Error $r8, $r9;

        $z0 = <java.lang.ClassLoader: boolean sclSet>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label8;

        $r0 = <java.lang.ClassLoader: java.lang.ClassLoader scl>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("recursive invocation");

        throw $r1;

     label1:
        l0 = staticinvoke <sun.misc.Launcher: sun.misc.Launcher getLauncher()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l0);

        if l0 == null goto label7;

        l1#9 = null;

        $r2 = virtualinvoke l0.<sun.misc.Launcher: java.lang.ClassLoader getClassLoader()>();

        <java.lang.ClassLoader: java.lang.ClassLoader scl> = $r2;

     label2:
        $r3 = new java.lang.SystemClassLoaderAction;

        $r4 = <java.lang.ClassLoader: java.lang.ClassLoader scl>;

        specialinvoke $r3.<java.lang.SystemClassLoaderAction: void <init>(java.lang.ClassLoader)>($r4);

        $r5 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>($r3);

        $r6 = (java.lang.ClassLoader) $r5;

        <java.lang.ClassLoader: java.lang.ClassLoader scl> = $r6;

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        l2 = $r7;

        l1#9 = virtualinvoke l2.<java.security.PrivilegedActionException: java.lang.Throwable getCause()>();

        $z1 = l1#9 instanceof java.lang.reflect.InvocationTargetException;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label5;

        l1#9 = virtualinvoke l1#9.<java.lang.Throwable: java.lang.Throwable getCause()>();

     label5:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l1#9);

        if l1#9 == null goto label7;

        $z2 = l1#9 instanceof java.lang.Error;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label6;

        $r8 = (java.lang.Error) l1#9;

        throw $r8;

     label6:
        $r9 = new java.lang.Error;

        specialinvoke $r9.<java.lang.Error: void <init>(java.lang.Throwable)>(l1#9);

        throw $r9;

     label7:
        <java.lang.ClassLoader: boolean sclSet> = 1;

     label8:
        return;

        catch java.security.PrivilegedActionException from label2 to label3 with label4;
    }


