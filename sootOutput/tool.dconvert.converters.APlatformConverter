    public void <init>()
    {
        tool.dconvert.converters.APlatformConverter this;

        this := @this: tool.dconvert.converters.APlatformConverter;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public tool.dconvert.converters.Result convert(java.io.File, tool.dconvert.arg.Arguments)
    {
        tool.dconvert.converters.APlatformConverter this;
        java.io.File srcImage, destinationFolder, mainSubFolder, dstFolder, imageFile, file, $r32;
        tool.dconvert.arg.Arguments args;
        tool.dconvert.util.LoadedImage imageData;
        java.lang.String targetImageFileName, $r3, $r17, $r37, $r53, $r66, $r74, $r77;
        tool.dconvert.arg.ImageType imageType;
        boolean isNinePatch, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z9, $z10;
        java.lang.StringBuilder log, $r2, $r4, $r5, $r6, $r7, $r9, $r10, $r12, $r13, $r14, $r18, $r38, $r39, $r40, $r43, $r44, $r47, $r48, $r51, $r52, $r54, $r60, $r61, $r62, $r67, $r71, $r72, $r73;
        java.util.Map densityMap;
        java.util.ArrayList allResultingFiles, $r25;
        java.util.Iterator l12, l17;
        java.util.Map$Entry entry;
        java.util.List files, $r20, $r24, $r80;
        java.lang.Exception e, $r78;
        java.lang.Boolean $r0;
        java.lang.Class $r1;
        java.awt.image.BufferedImage $r8, $r11, $r22, $r23, $r75;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        float $f0, $f1, $f2, $f3, $f4;
        tool.dconvert.arg.EScaleMode $r15, $r16;
        java.awt.Dimension $r21, $r31, $r36, $r42, $r46, $r58;
        java.util.Set $r26;
        java.lang.Object $r27, $r28, $r30, $r33, $r35, $r41, $r45, $r49, $r57, $r59;
        tool.dconvert.converters.descriptors.DensityDescriptor $r29, $r34, $r50;
        tool.dconvert.converters.scaling.ImageHandler $r56;
        java.util.Locale $r63;
        java.lang.Object[] $r64;
        long $l6;
        java.lang.Float $r65;
        java.lang.IllegalStateException $r70;
        tool.dconvert.converters.Result $r76, $r79;

        this := @this: tool.dconvert.converters.APlatformConverter;

        srcImage := @parameter0: java.io.File;

        args := @parameter1: tool.dconvert.arg.Arguments;

        $z0 = args.<tool.dconvert.arg.Arguments: boolean dryRun>;

        $r0 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

     label01:
        destinationFolder = args.<tool.dconvert.arg.Arguments: java.io.File dst>;

        imageData = staticinvoke <tool.dconvert.util.ImageUtil: tool.dconvert.util.LoadedImage loadImage(java.io.File)>(srcImage);

        targetImageFileName = staticinvoke <tool.dconvert.util.MiscUtil: java.lang.String getFileNameWithoutExtension(java.io.File)>(srcImage);

        imageType = staticinvoke <tool.dconvert.arg.Arguments: tool.dconvert.arg.ImageType getImageType(java.io.File)>(srcImage);

        $z1 = staticinvoke <tool.dconvert.converters.AndroidConverter: boolean isNinePatch(java.io.File)>(srcImage);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label02;

        $r1 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 != class "tool/dconvert/converters/AndroidConverter" goto label02;

        $z2 = 1;

        goto label03;

     label02:
        $z2 = 0;

     label03:
        isNinePatch = $z2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        log = $r2;

        $r3 = virtualinvoke this.<tool.dconvert.converters.APlatformConverter: java.lang.String getConverterName()>();

        $r4 = virtualinvoke log.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(targetImageFileName);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r8 = virtualinvoke imageData.<tool.dconvert.util.LoadedImage: java.awt.image.BufferedImage getImage()>();

        $i0 = virtualinvoke $r8.<java.awt.image.BufferedImage: int getWidth()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        $r11 = virtualinvoke imageData.<tool.dconvert.util.LoadedImage: java.awt.image.BufferedImage getImage()>();

        $i1 = virtualinvoke $r11.<java.awt.image.BufferedImage: int getHeight()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $f0 = args.<tool.dconvert.arg.Arguments: float scale>;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r15 = args.<tool.dconvert.arg.Arguments: tool.dconvert.arg.EScaleMode scaleMode>;

        $r16 = <tool.dconvert.arg.EScaleMode: tool.dconvert.arg.EScaleMode FACTOR>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r15);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r16);

        if $r15 != $r16 goto label04;

        $r17 = "x";

        goto label05;

     label04:
        $r17 = "dp";

     label05:
        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")\n");

        $r20 = virtualinvoke this.<tool.dconvert.converters.APlatformConverter: java.util.List usedOutputDensities(tool.dconvert.arg.Arguments)>(args);

        $r21 = new java.awt.Dimension;

        $r22 = virtualinvoke imageData.<tool.dconvert.util.LoadedImage: java.awt.image.BufferedImage getImage()>();

        $i2 = virtualinvoke $r22.<java.awt.image.BufferedImage: int getWidth()>();

        $r23 = virtualinvoke imageData.<tool.dconvert.util.LoadedImage: java.awt.image.BufferedImage getImage()>();

        $i3 = virtualinvoke $r23.<java.awt.image.BufferedImage: int getHeight()>();

        specialinvoke $r21.<java.awt.Dimension: void <init>(int,int)>($i2, $i3);

        $f1 = args.<tool.dconvert.arg.Arguments: float scale>;

        densityMap = staticinvoke <tool.dconvert.util.DensityBucketUtil: java.util.Map getDensityBuckets(java.util.List,java.awt.Dimension,tool.dconvert.arg.Arguments,float,boolean)>($r20, $r21, args, $f1, isNinePatch);

        mainSubFolder = virtualinvoke this.<tool.dconvert.converters.APlatformConverter: java.io.File createMainSubFolder(java.io.File,java.lang.String,tool.dconvert.arg.Arguments)>(destinationFolder, targetImageFileName, args);

        $r24 = virtualinvoke this.<tool.dconvert.converters.APlatformConverter: java.util.List usedOutputDensities(tool.dconvert.arg.Arguments)>(args);

        virtualinvoke this.<tool.dconvert.converters.APlatformConverter: void onPreExecute(java.io.File,java.lang.String,java.util.List,tool.dconvert.arg.ImageType,tool.dconvert.arg.Arguments)>(mainSubFolder, targetImageFileName, $r24, imageType, args);

        $r25 = new java.util.ArrayList;

        specialinvoke $r25.<java.util.ArrayList: void <init>()>();

        allResultingFiles = $r25;

        $r26 = interfaceinvoke densityMap.<java.util.Map: java.util.Set entrySet()>();

        l12 = interfaceinvoke $r26.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $z3 = interfaceinvoke l12.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label16;

        $r27 = interfaceinvoke l12.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $r27;

        $r28 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r29 = (tool.dconvert.converters.descriptors.DensityDescriptor) $r28;

        $r30 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r31 = (java.awt.Dimension) $r30;

        dstFolder = virtualinvoke this.<tool.dconvert.converters.APlatformConverter: java.io.File createFolderForOutputFile(java.io.File,tool.dconvert.converters.descriptors.DensityDescriptor,java.awt.Dimension,java.lang.String,tool.dconvert.arg.Arguments)>(mainSubFolder, $r29, $r31, targetImageFileName, args);

        $z4 = virtualinvoke dstFolder.<java.io.File: boolean isDirectory()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label07;

        $z5 = virtualinvoke dstFolder.<java.io.File: boolean exists()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 != 0 goto label08;

     label07:
        $z6 = args.<tool.dconvert.arg.Arguments: boolean dryRun>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label14;

     label08:
        $r32 = new java.io.File;

        $r33 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r34 = (tool.dconvert.converters.descriptors.DensityDescriptor) $r33;

        $r35 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r36 = (java.awt.Dimension) $r35;

        $r37 = virtualinvoke this.<tool.dconvert.converters.APlatformConverter: java.lang.String createDestinationFileNameWithoutExtension(tool.dconvert.converters.descriptors.DensityDescriptor,java.awt.Dimension,java.lang.String,tool.dconvert.arg.Arguments)>($r34, $r36, targetImageFileName, args);

        specialinvoke $r32.<java.io.File: void <init>(java.io.File,java.lang.String)>(dstFolder, $r37);

        imageFile = $r32;

        $r38 = virtualinvoke log.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("process ");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(imageFile);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with ");

        $r41 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r42 = (java.awt.Dimension) $r41;

        $i4 = $r42.<java.awt.Dimension: int width>;

        $r43 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        $r45 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r46 = (java.awt.Dimension) $r45;

        $i5 = $r46.<java.awt.Dimension: int height>;

        $r47 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (x");

        $r49 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r50 = (tool.dconvert.converters.descriptors.DensityDescriptor) $r49;

        $f2 = $r50.<tool.dconvert.converters.descriptors.DensityDescriptor: float scale>;

        $r51 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f2);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isNinePatch);

        if isNinePatch == 0 goto label09;

        $r53 = "(9-patch)";

        goto label10;

     label09:
        $r53 = "";

     label10:
        $r54 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);

        virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $z7 = args.<tool.dconvert.arg.Arguments: boolean dryRun>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 != 0 goto label13;

        $r56 = new tool.dconvert.converters.scaling.ImageHandler;

        specialinvoke $r56.<tool.dconvert.converters.scaling.ImageHandler: void <init>(tool.dconvert.arg.Arguments)>(args);

        $r57 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r58 = (java.awt.Dimension) $r57;

        files = virtualinvoke $r56.<tool.dconvert.converters.scaling.ImageHandler: java.util.List saveToFile(java.io.File,tool.dconvert.util.LoadedImage,java.awt.Dimension,boolean)>(imageFile, imageData, $r58, isNinePatch);

        interfaceinvoke allResultingFiles.<java.util.List: boolean addAll(java.util.Collection)>(files);

        l17 = interfaceinvoke files.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z9 = interfaceinvoke l17.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 == 0 goto label12;

        $r59 = interfaceinvoke l17.<java.util.Iterator: java.lang.Object next()>();

        file = (java.io.File) $r59;

        $r60 = virtualinvoke log.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("compressed to disk: ");

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(file);

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r63 = <java.util.Locale: java.util.Locale US>;

        $r64 = newarray (java.lang.Object)[1];

        $l6 = virtualinvoke file.<java.io.File: long length()>();

        $f3 = (float) $l6;

        $f4 = $f3 / 1024.0F;

        $r65 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f4);

        $r64[0] = $r65;

        $r66 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r63, "%.2f", $r64);

        $r67 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r66);

        virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("kB)\n");

        goto label11;

     label12:
        $z10 = interfaceinvoke files.<java.util.List: boolean isEmpty()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z10);

        if $z10 == 0 goto label13;

        virtualinvoke log.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("files skipped\n");

     label13:
        goto label15;

     label14:
        $r70 = new java.lang.IllegalStateException;

        $r71 = new java.lang.StringBuilder;

        specialinvoke $r71.<java.lang.StringBuilder: void <init>()>();

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("could not create ");

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(dstFolder);

        $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r70.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r74);

        throw $r70;

     label15:
        goto label06;

     label16:
        virtualinvoke this.<tool.dconvert.converters.APlatformConverter: void onPostExecute(tool.dconvert.arg.Arguments)>(args);

        $r75 = virtualinvoke imageData.<tool.dconvert.util.LoadedImage: java.awt.image.BufferedImage getImage()>();

        virtualinvoke $r75.<java.awt.image.BufferedImage: void flush()>();

        $r76 = new tool.dconvert.converters.Result;

        $r77 = virtualinvoke log.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r76.<tool.dconvert.converters.Result: void <init>(java.lang.String,java.util.List)>($r77, allResultingFiles);

     label17:
        return $r76;

     label18:
        $r78 := @caughtexception;

        e = $r78;

        virtualinvoke e.<java.lang.Exception: void printStackTrace()>();

        $r79 = new tool.dconvert.converters.Result;

        $r80 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke $r79.<tool.dconvert.converters.Result: void <init>(java.lang.String,java.lang.Exception,java.util.List)>(null, e, $r80);

        return $r79;

        catch java.lang.Exception from label01 to label17 with label18;
    }


