    public void <init>(org.w3c.dom.Element, weka.core.pmml.FieldMetaInfo$Optype, java.util.ArrayList) throws java.lang.Exception
    {
        weka.core.pmml.FieldRef this;
        org.w3c.dom.Element fieldRef;
        weka.core.pmml.FieldMetaInfo$Optype opType;
        java.util.ArrayList fieldDefs;
        java.lang.String $r0;

        this := @this: weka.core.pmml.FieldRef;

        fieldRef := @parameter0: org.w3c.dom.Element;

        opType := @parameter1: weka.core.pmml.FieldMetaInfo$Optype;

        fieldDefs := @parameter2: java.util.ArrayList;

        specialinvoke this.<weka.core.pmml.Expression: void <init>(weka.core.pmml.FieldMetaInfo$Optype,java.util.ArrayList)>(opType, fieldDefs);

        this.<weka.core.pmml.FieldRef: java.lang.String m_fieldName> = null;

        $r0 = interfaceinvoke fieldRef.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("field");

        this.<weka.core.pmml.FieldRef: java.lang.String m_fieldName> = $r0;

        return;
    }

    public double getResult(double[]) throws java.lang.Exception
    {
        weka.core.pmml.FieldRef this;
        double[] incoming;
        weka.core.Attribute a;
        double result#2;
        boolean found#4, $z0, $z1, $z2;
        int i#6, $i0;
        java.util.ArrayList $r0, $r1;
        java.lang.Object $r2;
        java.lang.String $r3, $r4, $r17, $r20;
        weka.core.pmml.FieldMetaInfo$Optype $r5, $r6, $r7, $r8, $r10, $r11;
        java.lang.IllegalArgumentException $r9, $r12, $r13;
        java.lang.Exception $r14;
        java.lang.StringBuilder $r15, $r16, $r18, $r19;

        this := @this: weka.core.pmml.FieldRef;

        incoming := @parameter0: double[];

        result#2 = #NaN;

        found#4 = 0;

        i#6 = 0;

     label1:
        $r0 = this.<weka.core.pmml.FieldRef: java.util.ArrayList m_fieldDefs>;

        $i0 = virtualinvoke $r0.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#6 >= $i0 goto label7;

        $r1 = this.<weka.core.pmml.FieldRef: java.util.ArrayList m_fieldDefs>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>(i#6);

        a = (weka.core.Attribute) $r2;

        $r3 = virtualinvoke a.<weka.core.Attribute: java.lang.String name()>();

        $r4 = this.<weka.core.pmml.FieldRef: java.lang.String m_fieldName>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label6;

        $z1 = virtualinvoke a.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label3;

        $r5 = this.<weka.core.pmml.FieldRef: weka.core.pmml.FieldMetaInfo$Optype m_opType>;

        $r6 = <weka.core.pmml.FieldMetaInfo$Optype: weka.core.pmml.FieldMetaInfo$Optype CATEGORICAL>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r6);

        if $r5 == $r6 goto label2;

        $r7 = this.<weka.core.pmml.FieldRef: weka.core.pmml.FieldMetaInfo$Optype m_opType>;

        $r8 = <weka.core.pmml.FieldMetaInfo$Optype: weka.core.pmml.FieldMetaInfo$Optype ORDINAL>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r8);

        if $r7 != $r8 goto label5;

     label2:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("[FieldRef] Optype is categorical/ordinal but matching parameter is not!");

        throw $r9;

     label3:
        $z2 = virtualinvoke a.<weka.core.Attribute: boolean isNominal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label4;

        $r10 = this.<weka.core.pmml.FieldRef: weka.core.pmml.FieldMetaInfo$Optype m_opType>;

        $r11 = <weka.core.pmml.FieldMetaInfo$Optype: weka.core.pmml.FieldMetaInfo$Optype CONTINUOUS>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r10);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r11);

        if $r10 != $r11 goto label5;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("[FieldRef] Optype is continuous but matching parameter is not!");

        throw $r12;

     label4:
        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("[FieldRef] Unhandled attribute type");

        throw $r13;

     label5:
        result#2 = incoming[i#6];

        found#4 = 1;

        goto label7;

     label6:
        i#6 = i#6 + 1;

        goto label1;

     label7:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(found#4);

        if found#4 != 0 goto label8;

        $r14 = new java.lang.Exception;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[FieldRef] this field: ");

        $r17 = this.<weka.core.pmml.FieldRef: java.lang.String m_fieldName>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not in the supplied list of parameters!");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.Exception: void <init>(java.lang.String)>($r20);

        throw $r14;

     label8:
        return result#2;
    }


