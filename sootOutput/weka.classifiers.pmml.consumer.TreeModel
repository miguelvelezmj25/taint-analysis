    public void <init>(org.w3c.dom.Element, weka.core.Instances, weka.core.pmml.MiningSchema) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.TreeModel this;
        org.w3c.dom.Element model, $r10, $r12;
        weka.core.Instances dataDictionary;
        weka.core.pmml.MiningSchema miningSchema;
        java.lang.String fn, missingVS, missingP, splitC, tagName, $r4, $r6, $r9;
        weka.classifiers.pmml.consumer.TreeModel$MissingValueStrategy[] l6;
        int l7, l9, $i0, l8#36, $i1, $i2, l10#71, i#86, $i3;
        weka.classifiers.pmml.consumer.TreeModel$MissingValueStrategy m, $r1;
        java.lang.NumberFormatException ex, $r7;
        weka.classifiers.pmml.consumer.TreeModel$SplitCharacteristic s, $r3;
        org.w3c.dom.NodeList children;
        org.w3c.dom.Node child;
        weka.classifiers.pmml.consumer.TreeModel$MiningFunction $r0, $r5;
        double $d0, $d1;
        weka.classifiers.pmml.consumer.TreeModel$NoTrueChildStrategy $r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.io.PrintStream $r8;
        weka.classifiers.pmml.consumer.TreeModel$SplitCharacteristic[] l8#67;
        short $s4;
        weka.classifiers.pmml.consumer.TreeModel$TreeNode $r11;

        this := @this: weka.classifiers.pmml.consumer.TreeModel;

        model := @parameter0: org.w3c.dom.Element;

        dataDictionary := @parameter1: weka.core.Instances;

        miningSchema := @parameter2: weka.core.pmml.MiningSchema;

        specialinvoke this.<weka.classifiers.pmml.consumer.PMMLClassifier: void <init>(weka.core.Instances,weka.core.pmml.MiningSchema)>(dataDictionary, miningSchema);

        $r0 = <weka.classifiers.pmml.consumer.TreeModel$MiningFunction: weka.classifiers.pmml.consumer.TreeModel$MiningFunction CLASSIFICATION>;

        this.<weka.classifiers.pmml.consumer.TreeModel: weka.classifiers.pmml.consumer.TreeModel$MiningFunction m_functionType> = $r0;

        $r1 = <weka.classifiers.pmml.consumer.TreeModel$MissingValueStrategy: weka.classifiers.pmml.consumer.TreeModel$MissingValueStrategy NONE>;

        this.<weka.classifiers.pmml.consumer.TreeModel: weka.classifiers.pmml.consumer.TreeModel$MissingValueStrategy m_missingValueStrategy> = $r1;

        $d0 = staticinvoke <weka.core.Utils: double missingValue()>();

        this.<weka.classifiers.pmml.consumer.TreeModel: double m_missingValuePenalty> = $d0;

        $r2 = <weka.classifiers.pmml.consumer.TreeModel$NoTrueChildStrategy: weka.classifiers.pmml.consumer.TreeModel$NoTrueChildStrategy RETURNNULLPREDICTION>;

        this.<weka.classifiers.pmml.consumer.TreeModel: weka.classifiers.pmml.consumer.TreeModel$NoTrueChildStrategy m_noTrueChildStrategy> = $r2;

        $r3 = <weka.classifiers.pmml.consumer.TreeModel$SplitCharacteristic: weka.classifiers.pmml.consumer.TreeModel$SplitCharacteristic MULTISPLIT>;

        this.<weka.classifiers.pmml.consumer.TreeModel: weka.classifiers.pmml.consumer.TreeModel$SplitCharacteristic m_splitCharacteristic> = $r3;

        $r4 = virtualinvoke this.<weka.classifiers.pmml.consumer.TreeModel: java.lang.String getPMMLVersion()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("3.2");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label01;

     label01:
        fn = interfaceinvoke model.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("functionName");

        $z1 = virtualinvoke fn.<java.lang.String: boolean equals(java.lang.Object)>("regression");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label02;

        $r5 = <weka.classifiers.pmml.consumer.TreeModel$MiningFunction: weka.classifiers.pmml.consumer.TreeModel$MiningFunction REGRESSION>;

        this.<weka.classifiers.pmml.consumer.TreeModel: weka.classifiers.pmml.consumer.TreeModel$MiningFunction m_functionType> = $r5;

     label02:
        missingVS = interfaceinvoke model.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("missingValueStrategy");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(missingVS);

        if missingVS == null goto label05;

        $i0 = virtualinvoke missingVS.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label05;

        l6 = staticinvoke <weka.classifiers.pmml.consumer.TreeModel$MissingValueStrategy: weka.classifiers.pmml.consumer.TreeModel$MissingValueStrategy[] values()>();

        l7 = lengthof l6;

        l8#36 = 0;

     label03:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l8#36);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l7);

        if l8#36 >= l7 goto label05;

        m = l6[l8#36];

        $r6 = virtualinvoke m.<weka.classifiers.pmml.consumer.TreeModel$MissingValueStrategy: java.lang.String toString()>();

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(missingVS);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label04;

        this.<weka.classifiers.pmml.consumer.TreeModel: weka.classifiers.pmml.consumer.TreeModel$MissingValueStrategy m_missingValueStrategy> = m;

        goto label05;

     label04:
        l8#36 = l8#36 + 1;

        goto label03;

     label05:
        missingP = interfaceinvoke model.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("missingValuePenalty");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(missingP);

        if missingP == null goto label09;

        $i1 = virtualinvoke missingP.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 0 goto label09;

     label06:
        $d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(missingP);

        this.<weka.classifiers.pmml.consumer.TreeModel: double m_missingValuePenalty> = $d1;

     label07:
        goto label09;

     label08:
        $r7 := @caughtexception;

        ex = $r7;

        $r8 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("[TreeModel] WARNING: couldn\'t parse supplied missingValuePenalty as a number");

     label09:
        splitC = interfaceinvoke model.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("splitCharacteristic");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(splitC);

        if splitC == null goto label12;

        $i2 = virtualinvoke splitC.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 <= 0 goto label12;

        l8#67 = staticinvoke <weka.classifiers.pmml.consumer.TreeModel$SplitCharacteristic: weka.classifiers.pmml.consumer.TreeModel$SplitCharacteristic[] values()>();

        l9 = lengthof l8#67;

        l10#71 = 0;

     label10:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l10#71);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l9);

        if l10#71 >= l9 goto label12;

        s = l8#67[l10#71];

        $r9 = virtualinvoke s.<weka.classifiers.pmml.consumer.TreeModel$SplitCharacteristic: java.lang.String toString()>();

        $z3 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(splitC);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label11;

        this.<weka.classifiers.pmml.consumer.TreeModel: weka.classifiers.pmml.consumer.TreeModel$SplitCharacteristic m_splitCharacteristic> = s;

        goto label12;

     label11:
        l10#71 = l10#71 + 1;

        goto label10;

     label12:
        children = interfaceinvoke model.<org.w3c.dom.Element: org.w3c.dom.NodeList getChildNodes()>();

        i#86 = 0;

     label13:
        $i3 = interfaceinvoke children.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#86);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if i#86 >= $i3 goto label15;

        child = interfaceinvoke children.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i#86);

        $s4 = interfaceinvoke child.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s4);

        if $s4 != 1 goto label14;

        $r10 = (org.w3c.dom.Element) child;

        tagName = interfaceinvoke $r10.<org.w3c.dom.Element: java.lang.String getTagName()>();

        $z4 = virtualinvoke tagName.<java.lang.String: boolean equals(java.lang.Object)>("Node");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label14;

        $r11 = new weka.classifiers.pmml.consumer.TreeModel$TreeNode;

        $r12 = (org.w3c.dom.Element) child;

        specialinvoke $r11.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: void <init>(weka.classifiers.pmml.consumer.TreeModel,org.w3c.dom.Element,weka.core.pmml.MiningSchema)>(this, $r12, miningSchema);

        this.<weka.classifiers.pmml.consumer.TreeModel: weka.classifiers.pmml.consumer.TreeModel$TreeNode m_root> = $r11;

        goto label15;

     label14:
        i#86 = i#86 + 1;

        goto label13;

     label15:
        return;

        catch java.lang.NumberFormatException from label06 to label07 with label08;
    }

    public double[] distributionForInstance(weka.core.Instance) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.TreeModel this;
        weka.core.Instance inst;
        double[] incoming, preds#15, preds#22, preds#37;
        boolean $z0, $z1;
        weka.core.Instances $r0, $r2, $r5, $r11;
        weka.core.pmml.MiningSchema $r1, $r4, $r8, $r10;
        weka.core.Attribute $r3, $r6, $r12;
        int $i0;
        weka.core.pmml.MappingInfo $r7;
        weka.classifiers.pmml.consumer.TreeModel$TreeNode $r9;

        this := @this: weka.classifiers.pmml.consumer.TreeModel;

        inst := @parameter0: weka.core.Instance;

        $z0 = this.<weka.classifiers.pmml.consumer.TreeModel: boolean m_initialized>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r0 = interfaceinvoke inst.<weka.core.Instance: weka.core.Instances dataset()>();

        virtualinvoke this.<weka.classifiers.pmml.consumer.TreeModel: void mapToMiningSchema(weka.core.Instances)>($r0);

     label1:
        $r1 = this.<weka.classifiers.pmml.consumer.TreeModel: weka.core.pmml.MiningSchema m_miningSchema>;

        $r2 = virtualinvoke $r1.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r3 = virtualinvoke $r2.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z1 = virtualinvoke $r3.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        preds#15 = newarray (double)[1];

        goto label3;

     label2:
        $r4 = this.<weka.classifiers.pmml.consumer.TreeModel: weka.core.pmml.MiningSchema m_miningSchema>;

        $r5 = virtualinvoke $r4.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r6 = virtualinvoke $r5.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $i0 = virtualinvoke $r6.<weka.core.Attribute: int numValues()>();

        preds#22 = newarray (double)[$i0];

     label3:
        $r7 = this.<weka.classifiers.pmml.consumer.TreeModel: weka.core.pmml.MappingInfo m_fieldsMap>;

        $r8 = this.<weka.classifiers.pmml.consumer.TreeModel: weka.core.pmml.MiningSchema m_miningSchema>;

        incoming = virtualinvoke $r7.<weka.core.pmml.MappingInfo: double[] instanceToSchema(weka.core.Instance,weka.core.pmml.MiningSchema)>(inst, $r8);

        $r9 = this.<weka.classifiers.pmml.consumer.TreeModel: weka.classifiers.pmml.consumer.TreeModel$TreeNode m_root>;

        $r10 = this.<weka.classifiers.pmml.consumer.TreeModel: weka.core.pmml.MiningSchema m_miningSchema>;

        $r11 = virtualinvoke $r10.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r12 = virtualinvoke $r11.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        preds#37 = virtualinvoke $r9.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: double[] score(double[],weka.core.Attribute)>(incoming, $r12);

        return preds#37;
    }

    public java.lang.String toString()
    {
        weka.classifiers.pmml.consumer.TreeModel this;
        java.lang.StringBuffer temp, $r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r8, $r9, $r11, $r18, $r19, $r21, $r22, $r25, $r26, $r28, $r29, $r32, $r33, $r35, $r36;
        java.lang.String $r3, $r5, $r7, $r10, $r12, $r23, $r30, $r37, $r40, $r42;
        boolean $z0;
        weka.core.pmml.MiningSchema $r16;
        weka.classifiers.pmml.consumer.TreeModel$SplitCharacteristic $r20;
        weka.classifiers.pmml.consumer.TreeModel$NoTrueChildStrategy $r27;
        weka.classifiers.pmml.consumer.TreeModel$MissingValueStrategy $r34;
        weka.classifiers.pmml.consumer.TreeModel$TreeNode $r39;

        this := @this: weka.classifiers.pmml.consumer.TreeModel;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        temp = $r0;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PMML version ");

        $r3 = virtualinvoke this.<weka.classifiers.pmml.consumer.TreeModel: java.lang.String getPMMLVersion()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke this.<weka.classifiers.pmml.consumer.TreeModel: java.lang.String getCreatorApplication()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("?");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nApplication: ");

        $r10 = virtualinvoke this.<weka.classifiers.pmml.consumer.TreeModel: java.lang.String getCreatorApplication()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

     label1:
        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\nPMML Model: TreeModel");

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\n");

        $r16 = this.<weka.classifiers.pmml.consumer.TreeModel: weka.core.pmml.MiningSchema m_miningSchema>;

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r16);

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Split-type: ");

        $r20 = this.<weka.classifiers.pmml.consumer.TreeModel: weka.classifiers.pmml.consumer.TreeModel$SplitCharacteristic m_splitCharacteristic>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No true child strategy: ");

        $r27 = this.<weka.classifiers.pmml.consumer.TreeModel: weka.classifiers.pmml.consumer.TreeModel$NoTrueChildStrategy m_noTrueChildStrategy>;

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30);

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing value strategy: ");

        $r34 = this.<weka.classifiers.pmml.consumer.TreeModel: weka.classifiers.pmml.consumer.TreeModel$MissingValueStrategy m_missingValueStrategy>;

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r37);

        $r39 = this.<weka.classifiers.pmml.consumer.TreeModel: weka.classifiers.pmml.consumer.TreeModel$TreeNode m_root>;

        $r40 = virtualinvoke $r39.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r40);

        $r42 = virtualinvoke temp.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r42;
    }

    public java.lang.String graph() throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.TreeModel this;
        java.lang.StringBuffer text, $r0;
        weka.classifiers.pmml.consumer.TreeModel$TreeNode $r2;
        java.lang.String $r4;

        this := @this: weka.classifiers.pmml.consumer.TreeModel;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        text = $r0;

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("digraph PMMTree {\n");

        $r2 = this.<weka.classifiers.pmml.consumer.TreeModel: weka.classifiers.pmml.consumer.TreeModel$TreeNode m_root>;

        virtualinvoke $r2.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: void dumpGraph(java.lang.StringBuffer)>(text);

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}\n");

        $r4 = virtualinvoke text.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }


