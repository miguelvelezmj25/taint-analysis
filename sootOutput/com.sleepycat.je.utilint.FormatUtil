    public static java.lang.String asString(java.util.SortedSet)
    {
        java.util.SortedSet set;
        java.lang.StringBuilder sb, $r0;
        java.util.Iterator i;
        long f, rstart#12, rend#14, $l0;
        boolean $z0, $z1;
        java.lang.Object $r1, $r3;
        java.lang.Long $r2, $r4;
        byte $b1;
        java.lang.String $r5;

        set := @parameter0: java.util.SortedSet;

        $z0 = interfaceinvoke set.<java.util.SortedSet: boolean isEmpty()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        return "";

     label1:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        sb = $r0;

        i = interfaceinvoke set.<java.util.SortedSet: java.util.Iterator iterator()>();

        $r1 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (java.lang.Long) $r1;

        rstart#12 = virtualinvoke $r2.<java.lang.Long: long longValue()>();

        rend#14 = rstart#12;

     label2:
        $z1 = interfaceinvoke i.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label4;

        $r3 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.Long) $r3;

        f = virtualinvoke $r4.<java.lang.Long: long longValue()>();

        $l0 = rend#14 + 1L;

        $b1 = f cmp $l0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 != 0 goto label3;

        rend#14 = rend#14 + 1L;

        goto label2;

     label3:
        staticinvoke <com.sleepycat.je.utilint.FormatUtil: void flushRange(java.lang.StringBuilder,long,long)>(sb, rstart#12, rend#14);

        rend#14 = f;

        rstart#12 = f;

        goto label2;

     label4:
        staticinvoke <com.sleepycat.je.utilint.FormatUtil: void flushRange(java.lang.StringBuilder,long,long)>(sb, rstart#12, rend#14);

        $r5 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    private static void flushRange(java.lang.StringBuilder, long, long)
    {
        java.lang.StringBuilder sb, $r0, $r3, $r5, $r6, $r7;
        long rstart, rend;
        byte $b0, $b1;
        java.lang.String $r1, $r4, $r8;

        sb := @parameter0: java.lang.StringBuilder;

        rstart := @parameter1: long;

        rend := @parameter2: long;

        $b0 = rstart cmp -1L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 != 0 goto label1;

        return;

     label1:
        $b1 = rstart cmp rend;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 != 0 goto label2;

        $r0 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" 0x");

        $r1 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>(rstart);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        goto label3;

     label2:
        $r3 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" 0x");

        $r4 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>(rstart);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0x");

        $r8 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>(rend);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

     label3:
        return;
    }


