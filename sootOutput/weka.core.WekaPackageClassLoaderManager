    public static java.lang.Class forName(java.lang.String) throws java.lang.ClassNotFoundException
    {
        java.lang.String className;
        java.lang.Class $r0;

        className := @parameter0: java.lang.String;

        $r0 = staticinvoke <weka.core.WekaPackageClassLoaderManager: java.lang.Class forName(java.lang.String,boolean)>(className, 1);

        return $r0;
    }

    static void <clinit>()
    {
        weka.core.WekaPackageClassLoaderManager $r0;

        $r0 = new weka.core.WekaPackageClassLoaderManager;

        specialinvoke $r0.<weka.core.WekaPackageClassLoaderManager: void <init>()>();

        <weka.core.WekaPackageClassLoaderManager: weka.core.WekaPackageClassLoaderManager s_singletonLoader> = $r0;

        return;
    }

    public static java.lang.Class forName(java.lang.String, boolean) throws java.lang.ClassNotFoundException
    {
        java.lang.String className;
        boolean initialize;
        weka.core.WekaPackageClassLoaderManager cl;
        java.lang.ClassLoader toUse;
        java.lang.Class $r0;

        className := @parameter0: java.lang.String;

        initialize := @parameter1: boolean;

        cl = staticinvoke <weka.core.WekaPackageClassLoaderManager: weka.core.WekaPackageClassLoaderManager getWekaPackageClassLoaderManager()>();

        toUse = virtualinvoke cl.<weka.core.WekaPackageClassLoaderManager: java.lang.ClassLoader getLoaderForClass(java.lang.String)>(className);

        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(className, initialize, toUse);

        return $r0;
    }

    public static java.lang.Object objectForName(java.lang.String) throws java.lang.Exception
    {
        java.lang.String className;
        java.lang.Class $r0;
        java.lang.Object $r1;

        className := @parameter0: java.lang.String;

        $r0 = staticinvoke <weka.core.WekaPackageClassLoaderManager: java.lang.Class forName(java.lang.String)>(className);

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Object newInstance()>();

        return $r1;
    }

    public static weka.core.WekaPackageClassLoaderManager getWekaPackageClassLoaderManager()
    {
        weka.core.WekaPackageClassLoaderManager $r0;

        $r0 = <weka.core.WekaPackageClassLoaderManager: weka.core.WekaPackageClassLoaderManager s_singletonLoader>;

        return $r0;
    }

    private void <init>()
    {
        weka.core.WekaPackageClassLoaderManager this;
        java.util.HashMap $r0, $r1;

        this := @this: weka.core.WekaPackageClassLoaderManager;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        this.<weka.core.WekaPackageClassLoaderManager: java.util.Map m_packageJarClassLoaders> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        this.<weka.core.WekaPackageClassLoaderManager: java.util.Map m_classBasedClassLoaderLookup> = $r1;

        return;
    }

    public java.net.URL[] getWekaClassloaderClasspathEntries()
    {
        weka.core.WekaPackageClassLoaderManager this;
        java.lang.ClassLoader parent, $r6, $r8;
        java.net.URL[] result, l3, $r9, $r10;
        int l4, l5#13;
        java.net.URL u;
        java.net.URISyntaxException e, $r5;
        java.lang.Class $r0, $r7;
        boolean $z0, $z1, $z2;
        java.net.URLClassLoader $r1;
        java.lang.String $r2;
        java.io.File $r3;
        java.net.URI $r4;

        this := @this: weka.core.WekaPackageClassLoaderManager;

        $r0 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        parent = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $z0 = parent instanceof java.net.URLClassLoader;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label7;

        $r1 = (java.net.URLClassLoader) parent;

        result = virtualinvoke $r1.<java.net.URLClassLoader: java.net.URL[] getURLs()>();

        l3 = result;

        l4 = lengthof l3;

        l5#13 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l5#13);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l4);

        if l5#13 >= l4 goto label6;

        u = l3[l5#13];

        $r2 = virtualinvoke u.<java.net.URL: java.lang.String toString()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean endsWith(java.lang.String)>("weka.jar");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label5;

     label2:
        $r3 = new java.io.File;

        $r4 = virtualinvoke u.<java.net.URL: java.net.URI toURI()>();

        specialinvoke $r3.<java.io.File: void <init>(java.net.URI)>($r4);

        this.<weka.core.WekaPackageClassLoaderManager: java.io.File m_pathToWekaJarFile> = $r3;

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        e = $r5;

        virtualinvoke e.<java.net.URISyntaxException: void printStackTrace()>();

     label5:
        l5#13 = l5#13 + 1;

        goto label1;

     label6:
        return result;

     label7:
        $r6 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        $r7 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $z2 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label8;

        $r9 = specialinvoke this.<weka.core.WekaPackageClassLoaderManager: java.net.URL[] getSystemClasspathEntries()>();

        return $r9;

     label8:
        $r10 = specialinvoke this.<weka.core.WekaPackageClassLoaderManager: java.net.URL[] getWekaClasspathEntries()>();

        return $r10;

        catch java.net.URISyntaxException from label2 to label3 with label4;
    }

    public java.util.Set getPackageJarFileClasses()
    {
        weka.core.WekaPackageClassLoaderManager this;
        java.util.Map $r0;
        java.util.Set $r1;

        this := @this: weka.core.WekaPackageClassLoaderManager;

        $r0 = this.<weka.core.WekaPackageClassLoaderManager: java.util.Map m_classBasedClassLoaderLookup>;

        $r1 = interfaceinvoke $r0.<java.util.Map: java.util.Set keySet()>();

        return $r1;
    }

    private java.net.URL[] getSystemClasspathEntries()
    {
        weka.core.WekaPackageClassLoaderManager this;
        java.lang.String cp, sep;
        java.net.URL[] $r0;

        this := @this: weka.core.WekaPackageClassLoaderManager;

        cp = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("java.class.path", "");

        sep = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("path.separator", ":");

        $r0 = specialinvoke this.<weka.core.WekaPackageClassLoaderManager: java.net.URL[] getParts(java.lang.String,java.lang.String)>(cp, sep);

        return $r0;
    }

    private java.net.URL[] getWekaClasspathEntries()
    {
        weka.core.WekaPackageClassLoaderManager this;
        java.lang.String wekaCp, sep;
        weka.core.Environment $r0;
        java.net.URL[] $r1, $r2;

        this := @this: weka.core.WekaPackageClassLoaderManager;

        $r0 = staticinvoke <weka.core.Environment: weka.core.Environment getSystemWide()>();

        wekaCp = virtualinvoke $r0.<weka.core.Environment: java.lang.String getVariableValue(java.lang.String)>("WEKA_CLASSPATH");

        sep = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("path.separator", ":");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(wekaCp);

        if wekaCp == null goto label1;

        $r1 = specialinvoke this.<weka.core.WekaPackageClassLoaderManager: java.net.URL[] getParts(java.lang.String,java.lang.String)>(wekaCp, sep);

        return $r1;

     label1:
        $r2 = newarray (java.net.URL)[0];

        return $r2;
    }

    private java.net.URL[] getParts(java.lang.String, java.lang.String)
    {
        weka.core.WekaPackageClassLoaderManager this;
        java.lang.String cp, sep, part#16;
        java.lang.String[] cpParts, l5;
        java.util.ArrayList uList, $r0;
        int l6, l7#10, $i0;
        boolean $z0, $z2;
        java.net.URI $r1, $r3, $r5;
        java.net.URL url#28;
        java.io.File $r2, $r4;
        java.net.MalformedURLException $r6, e#46;
        java.net.URISyntaxException $r7, e#49;
        java.net.URL[] $r8, $r10;
        java.lang.Object[] $r9;

        this := @this: weka.core.WekaPackageClassLoaderManager;

        cp := @parameter0: java.lang.String;

        sep := @parameter1: java.lang.String;

        cpParts = virtualinvoke cp.<java.lang.String: java.lang.String[] split(java.lang.String)>(sep);

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        uList = $r0;

        l5 = cpParts;

        l6 = lengthof l5;

        l7#10 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l7#10);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l6);

        if l7#10 >= l6 goto label9;

        part#16 = l5[l7#10];

     label2:
        $z0 = virtualinvoke part#16.<java.lang.String: boolean startsWith(java.lang.String)>("file:");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        part#16 = virtualinvoke part#16.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(" ", "%20");

        $r1 = new java.net.URI;

        specialinvoke $r1.<java.net.URI: void <init>(java.lang.String)>(part#16);

        url#28 = virtualinvoke $r1.<java.net.URI: java.net.URL toURL()>();

        goto label4;

     label3:
        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(part#16);

        $r3 = virtualinvoke $r2.<java.io.File: java.net.URI toURI()>();

        url#28 = virtualinvoke $r3.<java.net.URI: java.net.URL toURL()>();

        interfaceinvoke uList.<java.util.List: boolean add(java.lang.Object)>(url#28);

     label4:
        $z2 = virtualinvoke part#16.<java.lang.String: boolean endsWith(java.lang.String)>("weka.jar");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label5;

        $r4 = new java.io.File;

        $r5 = virtualinvoke url#28.<java.net.URL: java.net.URI toURI()>();

        specialinvoke $r4.<java.io.File: void <init>(java.net.URI)>($r5);

        this.<weka.core.WekaPackageClassLoaderManager: java.io.File m_pathToWekaJarFile> = $r4;

     label5:
        goto label8;

     label6:
        $r6 := @caughtexception;

        e#46 = $r6;

        virtualinvoke e#46.<java.net.MalformedURLException: void printStackTrace()>();

        goto label8;

     label7:
        $r7 := @caughtexception;

        e#49 = $r7;

        virtualinvoke e#49.<java.net.URISyntaxException: void printStackTrace()>();

     label8:
        l7#10 = l7#10 + 1;

        goto label1;

     label9:
        $i0 = interfaceinvoke uList.<java.util.List: int size()>();

        $r8 = newarray (java.net.URL)[$i0];

        $r9 = interfaceinvoke uList.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        $r10 = (java.net.URL[]) $r9;

        return $r10;

        catch java.net.MalformedURLException from label2 to label5 with label6;
        catch java.net.URISyntaxException from label2 to label5 with label7;
    }

    public java.lang.ClassLoader getLoaderForClass(java.lang.String)
    {
        weka.core.WekaPackageClassLoaderManager this;
        java.lang.Class cl, $r2, $r7;
        java.lang.Exception l3, $r4;
        java.lang.String className#1, $r0, $r1, className#12;
        java.lang.ClassLoader $r3, result#28;
        java.util.Map $r5;
        java.lang.Object $r6;

        this := @this: weka.core.WekaPackageClassLoaderManager;

        className#1 := @parameter0: java.lang.String;

        $r0 = virtualinvoke className#1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("[L", "");

        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("[", "");

        className#12 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(";", "");

        $r2 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label1:
        cl = virtualinvoke this.<weka.core.WekaPackageClassLoaderManager: java.lang.Class findClass(java.lang.String)>(className#12);

        $r3 = virtualinvoke cl.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        l3 = $r4;

        $r5 = this.<weka.core.WekaPackageClassLoaderManager: java.util.Map m_classBasedClassLoaderLookup>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(className#12);

        result#28 = (java.lang.ClassLoader) $r6;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(result#28);

        if result#28 != null goto label4;

        $r7 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        result#28 = virtualinvoke $r7.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label4:
        return result#28;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected java.lang.Class findClass(java.lang.String) throws java.lang.ClassNotFoundException
    {
        weka.core.WekaPackageClassLoaderManager this;
        java.lang.String name, $r13;
        java.util.Map$Entry e;
        java.lang.Class result#2, $r0;
        java.lang.ClassLoader $r1;
        java.lang.ClassNotFoundException $r2, l3#9, $r8;
        java.util.Map $r3;
        java.util.Set $r4;
        java.util.Iterator l3#15;
        boolean $z0;
        java.lang.Object $r5, $r6;
        weka.core.WekaPackageLibIsolatingClassLoader $r7;
        java.lang.StringBuilder $r9, $r10, $r11, $r12;

        this := @this: weka.core.WekaPackageClassLoaderManager;

        name := @parameter0: java.lang.String;

        result#2 = null;

     label1:
        $r0 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        result#2 = virtualinvoke $r1.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(name);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        l3#9 = $r2;

     label4:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(result#2);

        if result#2 != null goto label7;

        $r3 = this.<weka.core.WekaPackageClassLoaderManager: java.util.Map m_packageJarClassLoaders>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        l3#15 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke l3#15.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label7;

        $r5 = interfaceinvoke l3#15.<java.util.Iterator: java.lang.Object next()>();

        e = (java.util.Map$Entry) $r5;

        $r6 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r7 = (weka.core.WekaPackageLibIsolatingClassLoader) $r6;

        result#2 = virtualinvoke $r7.<weka.core.WekaPackageLibIsolatingClassLoader: java.lang.Class findGloballyVisiblePackageClass(java.lang.String)>(name);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(result#2);

        if result#2 == null goto label6;

        goto label7;

     label6:
        goto label5;

     label7:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(result#2);

        if result#2 != null goto label8;

        $r8 = new java.lang.ClassNotFoundException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to find class \'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.ClassNotFoundException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label8:
        return result#2;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public weka.core.WekaPackageLibIsolatingClassLoader getPackageClassLoader(java.lang.String)
    {
        weka.core.WekaPackageClassLoaderManager this;
        java.lang.String packageName;
        java.util.Map $r0;
        java.lang.Object $r1;
        weka.core.WekaPackageLibIsolatingClassLoader $r2;

        this := @this: weka.core.WekaPackageClassLoaderManager;

        packageName := @parameter0: java.lang.String;

        $r0 = this.<weka.core.WekaPackageClassLoaderManager: java.util.Map m_packageJarClassLoaders>;

        $r1 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(packageName);

        $r2 = (weka.core.WekaPackageLibIsolatingClassLoader) $r1;

        return $r2;
    }

    public synchronized java.lang.ClassLoader addPackageToClassLoader(java.io.File) throws java.lang.Exception
    {
        weka.core.WekaPackageClassLoaderManager this;
        java.io.File packageDir;
        weka.core.WekaPackageLibIsolatingClassLoader packageLoader, $r5, $r6;
        java.util.Set classes;
        java.util.Iterator l4;
        java.lang.String c, $r1, $r3, $r8;
        java.util.Map $r0, $r2, $r7, $r11;
        boolean $z0, $z1;
        java.lang.Object $r4, $r10;

        this := @this: weka.core.WekaPackageClassLoaderManager;

        packageDir := @parameter0: java.io.File;

        $r0 = this.<weka.core.WekaPackageClassLoaderManager: java.util.Map m_packageJarClassLoaders>;

        $r1 = virtualinvoke packageDir.<java.io.File: java.lang.String getName()>();

        $z0 = interfaceinvoke $r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r2 = this.<weka.core.WekaPackageClassLoaderManager: java.util.Map m_packageJarClassLoaders>;

        $r3 = virtualinvoke packageDir.<java.io.File: java.lang.String getName()>();

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (weka.core.WekaPackageLibIsolatingClassLoader) $r4;

        virtualinvoke $r5.<weka.core.WekaPackageLibIsolatingClassLoader: void closeClassLoader()>();

     label1:
        $r6 = new weka.core.WekaPackageLibIsolatingClassLoader;

        specialinvoke $r6.<weka.core.WekaPackageLibIsolatingClassLoader: void <init>(weka.core.WekaPackageClassLoaderManager,java.io.File)>(this, packageDir);

        packageLoader = $r6;

        $r7 = this.<weka.core.WekaPackageClassLoaderManager: java.util.Map m_packageJarClassLoaders>;

        $r8 = virtualinvoke packageDir.<java.io.File: java.lang.String getName()>();

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, packageLoader);

        classes = virtualinvoke packageLoader.<weka.core.WekaPackageLibIsolatingClassLoader: java.util.Set getPackageJarEntries()>();

        l4 = interfaceinvoke classes.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label3;

        $r10 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        c = (java.lang.String) $r10;

        $r11 = this.<weka.core.WekaPackageClassLoaderManager: java.util.Map m_classBasedClassLoaderLookup>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(c, packageLoader);

        goto label2;

     label3:
        return packageLoader;
    }

    protected static void injectAllClassesInJar(java.io.File) throws java.lang.Exception
    {
        java.io.File jarPath;

        jarPath := @parameter0: java.io.File;

        staticinvoke <weka.core.WekaPackageClassLoaderManager: void injectAllClassesInJar(java.io.File,boolean)>(jarPath, 1);

        return;
    }

    protected static void injectAllClassesInJar(java.io.File, boolean) throws java.lang.Exception
    {
        java.io.File jarPath;
        boolean injectToRootClassLoader;

        jarPath := @parameter0: java.io.File;

        injectToRootClassLoader := @parameter1: boolean;

        staticinvoke <weka.core.WekaPackageClassLoaderManager: void injectClasses(java.io.File,java.util.List,java.util.List,boolean)>(jarPath, null, null, injectToRootClassLoader);

        return;
    }

    protected static void injectClasses(java.io.File, java.util.List, java.util.List, boolean) throws java.lang.Exception
    {
        java.io.File jarPath;
        java.util.List classJarPaths, classes;
        boolean injectToRootClassLoader, $z0;
        java.io.FileInputStream inStream, $r7;
        java.io.PrintStream $r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5;
        java.lang.String $r3, $r6;

        jarPath := @parameter0: java.io.File;

        classJarPaths := @parameter1: java.util.List;

        classes := @parameter2: java.util.List;

        injectToRootClassLoader := @parameter3: boolean;

        $z0 = virtualinvoke jarPath.<java.io.File: boolean exists()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r0 = <java.lang.System: java.io.PrintStream err>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Path for jar file to inject \'");

        $r3 = virtualinvoke jarPath.<java.io.File: java.lang.String toString()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not seem to exist - skipping");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>($r6);

        return;

     label1:
        $r7 = new java.io.FileInputStream;

        specialinvoke $r7.<java.io.FileInputStream: void <init>(java.io.File)>(jarPath);

        inStream = $r7;

        staticinvoke <weka.core.WekaPackageClassLoaderManager: void injectClasses(java.io.InputStream,java.util.List,java.util.List,boolean)>(inStream, classJarPaths, classes, injectToRootClassLoader);

        return;
    }

    protected static void injectClasses(java.io.InputStream, java.util.List, java.util.List, boolean) throws java.lang.Exception
    {
        java.io.InputStream jarStream;
        boolean injectToRootClassLoader, debug, processAllClasses, $z0, $z1, $z2, $z3, $z4, $z5, cont#202;
        java.lang.String debugS, zipPart, $r5, $r6, $r8, $r9, $r10, $r11, $r15, $r28, $r30, $r35, $r37;
        java.util.zip.ZipInputStream zi, tmp$553555870;
        java.util.ArrayList okBytes, okClasses, preloadClassByteCode#19, preloadClassByteCode#90, classes#92, failedToInject#125, classesF#128, tmp$1619098033, tmp$2057746658, tmp$394022548, tmp$1989761228, tmp$1328253468, tmp$1442583818, tmp$809238295, tmp$2035206363, tmp$1918955312;
        java.lang.ClassLoader rootClassloader, $r18;
        java.lang.Class classLoader, $r20, $r21, $r22;
        java.lang.reflect.Method defineClass;
        java.security.ProtectionDomain pd;
        byte[] b, $r7;
        java.lang.Throwable l23, $r47;
        java.lang.Object classJarPaths#1, classes#2, $r14, $r16, $r17, $r34, $r38, $r40, $r44;
        java.util.zip.ZipEntry $r4, zipEntry#28;
        int i#70, $i0, $i1, numLeft#133, i#145, $i2, $i3, $i4, $i5;
        java.lang.Class[] $r19;
        java.io.PrintStream $r25, $r31;
        java.lang.StringBuilder $r27, $r29, $r33, $r36, tmp$396954188, tmp$1153083554;
        java.lang.Object[] $r39;
        java.lang.Integer $r41, $r42;
        java.lang.Exception $r43;
        java.util.List tmp$522909197, tmp$1368838745, tmp$358882337, tmp$738355502, tmp$1961982084;

        jarStream := @parameter0: java.io.InputStream;

        classJarPaths#1 := @parameter1: java.util.List;

        classes#2 := @parameter2: java.util.List;

        injectToRootClassLoader := @parameter3: boolean;

        debugS = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("weka.core.classloader.debug", "false");

        debug = virtualinvoke debugS.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classes#2);

        if classes#2 == null goto label01;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classJarPaths#1);

        if classJarPaths#1 != null goto label02;

     label01:
        $z0 = 1;

        goto label03;

     label02:
        $z0 = 0;

     label03:
        processAllClasses = $z0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(processAllClasses);

        if processAllClasses == 0 goto label04;

        tmp$1619098033 = new java.util.ArrayList;

        specialinvoke tmp$1619098033.<java.util.ArrayList: void <init>()>();

        classes#2 = tmp$1619098033;

        tmp$2057746658 = new java.util.ArrayList;

        specialinvoke tmp$2057746658.<java.util.ArrayList: void <init>()>();

        classJarPaths#1 = tmp$2057746658;

     label04:
        tmp$394022548 = new java.util.ArrayList;

        specialinvoke tmp$394022548.<java.util.ArrayList: void <init>()>();

        preloadClassByteCode#19 = tmp$394022548;

        tmp$553555870 = new java.util.zip.ZipInputStream;

        specialinvoke tmp$553555870.<java.util.zip.ZipInputStream: void <init>(java.io.InputStream)>(jarStream);

        zi = tmp$553555870;

     label05:
        $r4 = virtualinvoke zi.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>();

        zipEntry#28 = $r4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        if $r4 == null goto label08;

        $z1 = virtualinvoke zipEntry#28.<java.util.zip.ZipEntry: boolean isDirectory()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label05;

        $r5 = virtualinvoke zipEntry#28.<java.util.zip.ZipEntry: java.lang.String getName()>();

        $z2 = virtualinvoke $r5.<java.lang.String: boolean endsWith(java.lang.String)>(".class");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label05;

        $r6 = virtualinvoke zipEntry#28.<java.util.zip.ZipEntry: java.lang.String getName()>();

        zipPart = virtualinvoke $r6.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\\", "/");

        tmp$522909197 = (java.util.List) classJarPaths#1;

        $z3 = interfaceinvoke tmp$522909197.<java.util.List: boolean contains(java.lang.Object)>(zipPart);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label06;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(processAllClasses);

        if processAllClasses == 0 goto label07;

     label06:
        $r7 = staticinvoke <weka.core.WekaPackageClassLoaderManager: byte[] getByteCode(java.io.InputStream,boolean)>(zi, 0);

        interfaceinvoke preloadClassByteCode#19.<java.util.List: boolean add(java.lang.Object)>($r7);

        virtualinvoke zi.<java.util.zip.ZipInputStream: void closeEntry()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(processAllClasses);

        if processAllClasses == 0 goto label07;

        $r8 = virtualinvoke zipEntry#28.<java.util.zip.ZipEntry: java.lang.String getName()>();

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(".class", "");

        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\\", "/");

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("/", ".");

        tmp$1368838745 = (java.util.List) classes#2;

        interfaceinvoke tmp$1368838745.<java.util.List: boolean add(java.lang.Object)>($r11);

     label07:
        goto label05;

     label08:
        virtualinvoke zi.<java.util.zip.ZipInputStream: void close()>();

        tmp$1989761228 = new java.util.ArrayList;

        specialinvoke tmp$1989761228.<java.util.ArrayList: void <init>()>();

        okBytes = tmp$1989761228;

        tmp$1328253468 = new java.util.ArrayList;

        specialinvoke tmp$1328253468.<java.util.ArrayList: void <init>()>();

        okClasses = tmp$1328253468;

        i#70 = 0;

     label09:
        tmp$358882337 = (java.util.List) classes#2;

        $i0 = interfaceinvoke tmp$358882337.<java.util.List: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#70);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#70 >= $i0 goto label11;

        tmp$738355502 = (java.util.List) classes#2;

        $r14 = interfaceinvoke tmp$738355502.<java.util.List: java.lang.Object get(int)>(i#70);

        $r15 = (java.lang.String) $r14;

        $z4 = staticinvoke <weka.core.WekaPackageClassLoaderManager: boolean classExists(java.lang.String)>($r15);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label10;

        tmp$1961982084 = (java.util.List) classes#2;

        $r16 = interfaceinvoke tmp$1961982084.<java.util.List: java.lang.Object get(int)>(i#70);

        interfaceinvoke okClasses.<java.util.List: boolean add(java.lang.Object)>($r16);

        $r17 = interfaceinvoke preloadClassByteCode#19.<java.util.List: java.lang.Object get(int)>(i#70);

        interfaceinvoke okBytes.<java.util.List: boolean add(java.lang.Object)>($r17);

     label10:
        i#70 = i#70 + 1;

        goto label09;

     label11:
        preloadClassByteCode#90 = okBytes;

        classes#92 = okClasses;

        $i1 = interfaceinvoke preloadClassByteCode#90.<java.util.List: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 0 goto label31;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(injectToRootClassLoader);

        if injectToRootClassLoader == 0 goto label12;

        $r18 = staticinvoke <weka.core.WekaPackageClassLoaderManager: java.lang.ClassLoader getRootClassLoader()>();

        goto label13;

     label12:
        $r18 = staticinvoke <weka.core.WekaPackageClassLoaderManager: java.lang.ClassLoader getWekaLevelClassloader()>();

     label13:
        rootClassloader = $r18;

        classLoader = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.lang.ClassLoader");

        $r19 = newarray (java.lang.Class)[5];

        $r19[0] = class "java/lang/String";

        $r19[1] = class "[B";

        $r20 = <java.lang.Integer: java.lang.Class TYPE>;

        $r19[2] = $r20;

        $r21 = <java.lang.Integer: java.lang.Class TYPE>;

        $r19[3] = $r21;

        $r19[4] = class "java/security/ProtectionDomain";

        defineClass = virtualinvoke classLoader.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("defineClass", $r19);

        $r22 = class "java/lang/System";

        pd = virtualinvoke $r22.<java.lang.Class: java.security.ProtectionDomain getProtectionDomain()>();

        virtualinvoke defineClass.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        tmp$1442583818 = new java.util.ArrayList;

        specialinvoke tmp$1442583818.<java.util.ArrayList: void <init>()>();

        failedToInject#125 = tmp$1442583818;

        tmp$809238295 = new java.util.ArrayList;

        specialinvoke tmp$809238295.<java.util.ArrayList: void <init>()>();

        classesF#128 = tmp$809238295;

        numLeft#133 = interfaceinvoke classes#92.<java.util.List: int size()>();

     label14:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(debug);

        if debug == 0 goto label17;

        $r25 = <java.lang.System: java.io.PrintStream out>;

        tmp$396954188 = new java.lang.StringBuilder;

        specialinvoke tmp$396954188.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke tmp$396954188.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[WekaPackageClassLoaderManager] Injecting classes into the ");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(injectToRootClassLoader);

        if injectToRootClassLoader == 0 goto label15;

        $r28 = "root classloader...";

        goto label16;

     label15:
        $r28 = "weka-level classloader...";

     label16:
        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r25.<java.io.PrintStream: void println(java.lang.String)>($r30);

     label17:
        i#145 = 0;

     label18:
        $i2 = interfaceinvoke classes#92.<java.util.List: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#145);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#145 >= $i2 goto label24;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(debug);

        if debug == 0 goto label19;

        $r31 = <java.lang.System: java.io.PrintStream out>;

        tmp$1153083554 = new java.lang.StringBuilder;

        specialinvoke tmp$1153083554.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke tmp$1153083554.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("** Injecting ");

        $r34 = interfaceinvoke classes#92.<java.util.List: java.lang.Object get(int)>(i#145);

        $r35 = (java.lang.String) $r34;

        $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r31.<java.io.PrintStream: void println(java.lang.String)>($r37);

     label19:
        $r38 = interfaceinvoke preloadClassByteCode#90.<java.util.List: java.lang.Object get(int)>(i#145);

        b = (byte[]) $r38;

     label20:
        $r39 = newarray (java.lang.Object)[5];

        $r40 = interfaceinvoke classes#92.<java.util.List: java.lang.Object get(int)>(i#145);

        $r39[0] = $r40;

        $r39[1] = b;

        $r41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r39[2] = $r41;

        $i3 = lengthof b;

        $r42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r39[3] = $r42;

        $r39[4] = pd;

        virtualinvoke defineClass.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(rootClassloader, $r39);

     label21:
        goto label23;

     label22:
        $r43 := @caughtexception;

        interfaceinvoke failedToInject#125.<java.util.List: boolean add(java.lang.Object)>(b);

        $r44 = interfaceinvoke classes#92.<java.util.List: java.lang.Object get(int)>(i#145);

        interfaceinvoke classesF#128.<java.util.List: boolean add(java.lang.Object)>($r44);

     label23:
        i#145 = i#145 + 1;

        goto label18;

     label24:
        $i4 = interfaceinvoke failedToInject#125.<java.util.List: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(numLeft#133);

        if $i4 >= numLeft#133 goto label25;

        $z5 = 1;

        goto label26;

     label25:
        $z5 = 0;

     label26:
        cont#202 = $z5;

        preloadClassByteCode#90 = failedToInject#125;

        classes#92 = classesF#128;

        numLeft#133 = interfaceinvoke failedToInject#125.<java.util.List: int size()>();

        tmp$2035206363 = new java.util.ArrayList;

        specialinvoke tmp$2035206363.<java.util.ArrayList: void <init>()>();

        failedToInject#125 = tmp$2035206363;

        tmp$1918955312 = new java.util.ArrayList;

        specialinvoke tmp$1918955312.<java.util.ArrayList: void <init>()>();

        classesF#128 = tmp$1918955312;

        $i5 = interfaceinvoke classes#92.<java.util.List: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i5 <= 0 goto label27;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(cont#202);

        if cont#202 != 0 goto label14;

     label27:
        virtualinvoke defineClass.<java.lang.reflect.Method: void setAccessible(boolean)>(0);

        goto label31;

     label28:
        $r47 := @caughtexception;

     label29:
        l23 = $r47;

     label30:
        virtualinvoke defineClass.<java.lang.reflect.Method: void setAccessible(boolean)>(0);

        throw l23;

     label31:
        return;

        catch java.lang.Exception from label20 to label21 with label22;
        catch java.lang.Throwable from label14 to label27 with label28;
        catch java.lang.Throwable from label29 to label30 with label28;
    }

    private static java.lang.ClassLoader getWekaLevelClassloader()
    {
        java.lang.Class $r0;
        java.lang.ClassLoader $r1;

        $r0 = class "weka/core/Version";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        return $r1;
    }

    private static java.lang.ClassLoader getRootClassLoader()
    {
        java.lang.Thread $r0;
        java.lang.ClassLoader cl#3, $r1;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        cl#3 = virtualinvoke $r0.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

     label1:
        $r1 = virtualinvoke cl#3.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 == null goto label2;

        cl#3 = virtualinvoke cl#3.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

        goto label1;

     label2:
        return cl#3;
    }

    protected static boolean classExists(java.lang.String)
    {
        java.lang.String className;
        java.lang.Class 'cls';
        java.lang.ClassNotFoundException l2, $r0;
        boolean result#2;

        className := @parameter0: java.lang.String;

        result#2 = 0;

     label1:
        'cls' = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(className);

        result#2 = 1;

     label2:
        goto label4;

     label3:
        $r0 := @caughtexception;

        l2 = $r0;

     label4:
        return result#2;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    private static byte[] getByteCode(java.io.InputStream, boolean) throws java.io.IOException
    {
        java.io.InputStream in;
        boolean closeInput;
        byte[] buf, $r1;
        java.io.ByteArrayOutputStream byteCodeBuf, $r0;
        int readLength, $i0;

        in := @parameter0: java.io.InputStream;

        closeInput := @parameter1: boolean;

        buf = newarray (byte)[1024];

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        byteCodeBuf = $r0;

     label1:
        $i0 = virtualinvoke in.<java.io.InputStream: int read(byte[])>(buf);

        readLength = $i0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 == -1 goto label2;

        virtualinvoke byteCodeBuf.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(buf, 0, readLength);

        goto label1;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(closeInput);

        if closeInput == 0 goto label3;

        virtualinvoke in.<java.io.InputStream: void close()>();

     label3:
        $r1 = virtualinvoke byteCodeBuf.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r1;
    }

    protected void performIntegrityCheck()
    {
        weka.core.WekaPackageClassLoaderManager this;
        java.util.ArrayList problems, classKeys, $r0, $r7;
        java.util.Iterator l2, l3, l5#52, l5#70;
        java.util.Map$Entry e, e;
        java.lang.String packageName, p, k, $r13, $r21;
        weka.core.WekaPackageLibIsolatingClassLoader child, $r20;
        java.lang.Exception ex, $r6;
        java.util.Map $r1, $r14, $r16, $r24;
        java.util.Set $r2, $r17;
        boolean $z0, $z1, $z4, $z5, $z6, $z8;
        java.lang.Object $r3, $r4, $r5, $r8, $r18, $r19, $r22, $r23;
        java.io.PrintStream $r9;
        java.lang.StringBuilder $r10, $r11, $r12;

        this := @this: weka.core.WekaPackageClassLoaderManager;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        problems = $r0;

        $r1 = this.<weka.core.WekaPackageClassLoaderManager: java.util.Map m_packageJarClassLoaders>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        l2 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label06;

        $r3 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        e = (java.util.Map$Entry) $r3;

        $r4 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>();

        packageName = (java.lang.String) $r4;

        $r5 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>();

        child = (weka.core.WekaPackageLibIsolatingClassLoader) $r5;

     label02:
        $z1 = virtualinvoke child.<weka.core.WekaPackageLibIsolatingClassLoader: boolean integrityCheck()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label03;

        interfaceinvoke problems.<java.util.List: boolean add(java.lang.Object)>(packageName);

     label03:
        goto label05;

     label04:
        $r6 := @caughtexception;

        ex = $r6;

        interfaceinvoke problems.<java.util.List: boolean add(java.lang.Object)>(packageName);

     label05:
        goto label01;

     label06:
        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        classKeys = $r7;

        l3 = interfaceinvoke problems.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z4 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label13;

        $r8 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        p = (java.lang.String) $r8;

        $r9 = <java.lang.System: java.io.PrintStream err>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[Weka] Integrity: removing classloader for: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(p);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r13);

        $r14 = this.<weka.core.WekaPackageClassLoaderManager: java.util.Map m_packageJarClassLoaders>;

        interfaceinvoke $r14.<java.util.Map: java.lang.Object remove(java.lang.Object)>(p);

        $r16 = this.<weka.core.WekaPackageClassLoaderManager: java.util.Map m_classBasedClassLoaderLookup>;

        $r17 = interfaceinvoke $r16.<java.util.Map: java.util.Set entrySet()>();

        l5#52 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label08:
        $z5 = interfaceinvoke l5#52.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label10;

        $r18 = interfaceinvoke l5#52.<java.util.Iterator: java.lang.Object next()>();

        e = (java.util.Map$Entry) $r18;

        $r19 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r20 = (weka.core.WekaPackageLibIsolatingClassLoader) $r19;

        $r21 = virtualinvoke $r20.<weka.core.WekaPackageLibIsolatingClassLoader: java.lang.String getPackageName()>();

        $z6 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>(p);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label09;

        $r22 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke classKeys.<java.util.List: boolean add(java.lang.Object)>($r22);

     label09:
        goto label08;

     label10:
        l5#70 = interfaceinvoke classKeys.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z8 = interfaceinvoke l5#70.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 == 0 goto label12;

        $r23 = interfaceinvoke l5#70.<java.util.Iterator: java.lang.Object next()>();

        k = (java.lang.String) $r23;

        $r24 = this.<weka.core.WekaPackageClassLoaderManager: java.util.Map m_classBasedClassLoaderLookup>;

        interfaceinvoke $r24.<java.util.Map: java.lang.Object remove(java.lang.Object)>(k);

        goto label11;

     label12:
        goto label07;

     label13:
        return;

        catch java.lang.Exception from label02 to label03 with label04;
    }

    protected void injectMTJCoreClasses()
    {
        weka.core.WekaPackageClassLoaderManager this, $r14;
        java.lang.String debugS, $r19;
        boolean debug, $z0;
        java.io.InputStream mtjCoreInputStream, arpackAllInputStream, mtjInputStream;
        java.lang.Exception ex, $r10;
        java.lang.Class $r0, $r2, $r4, $r15;
        java.lang.ClassLoader $r1, $r3, $r5, $r16;
        java.io.PrintStream $r6, $r7, $r8, $r9, $r11;
        java.lang.StringBuilder $r12, $r13, $r17, $r18;

        this := @this: weka.core.WekaPackageClassLoaderManager;

        $z0 = staticinvoke <weka.core.WekaPackageClassLoaderManager: boolean classExists(java.lang.String)>("com.github.fommil.netlib.ARPACK");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label8;

        debugS = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("weka.core.classloader.debug", "false");

        debug = virtualinvoke debugS.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        $r0 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        mtjCoreInputStream = virtualinvoke $r1.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("core.jar");

        $r2 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        arpackAllInputStream = virtualinvoke $r3.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("arpack_combined_all.jar");

        $r4 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        mtjInputStream = virtualinvoke $r5.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("mtj.jar");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(mtjCoreInputStream);

        if mtjCoreInputStream == null goto label7;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(arpackAllInputStream);

        if arpackAllInputStream == null goto label7;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(mtjInputStream);

        if mtjInputStream == null goto label7;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(debug);

        if debug == 0 goto label1;

        $r6 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("[WekaPackageClassLoaderManager] injecting mtj-related core classes into root classloader");

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(debug);

        if debug == 0 goto label2;

        $r7 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("[WekaPackageClassLoaderManager] Injecting arpack");

     label2:
        staticinvoke <weka.core.WekaPackageClassLoaderManager: void injectAllClassesInFromStream(java.io.InputStream)>(arpackAllInputStream);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(debug);

        if debug == 0 goto label3;

        $r8 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("[WekaPackageClassLoaderManager] Injecting mtj core");

     label3:
        staticinvoke <weka.core.WekaPackageClassLoaderManager: void injectAllClassesInFromStream(java.io.InputStream)>(mtjCoreInputStream);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(debug);

        if debug == 0 goto label4;

        $r9 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("[WekaPackageClassLoaderManager] Injecting mtj");

     label4:
        staticinvoke <weka.core.WekaPackageClassLoaderManager: void injectAllClassesInFromStream(java.io.InputStream)>(mtjInputStream);

     label5:
        goto label8;

     label6:
        $r10 := @caughtexception;

        ex = $r10;

        virtualinvoke ex.<java.lang.Exception: void printStackTrace()>();

        goto label8;

     label7:
        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WARNING: core mtj jar files are not available as resources to this classloader (");

        $r14 = staticinvoke <weka.core.WekaPackageClassLoaderManager: weka.core.WekaPackageClassLoaderManager getWekaPackageClassLoaderManager()>();

        $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.Class getClass()>();

        $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r19);

     label8:
        return;

        catch java.lang.Exception from label1 to label5 with label6;
    }

    protected static void injectAllClassesInFromStream(java.io.InputStream) throws java.lang.Exception
    {
        java.io.InputStream inStream;
        java.io.BufferedInputStream $r0;

        inStream := @parameter0: java.io.InputStream;

        $r0 = new java.io.BufferedInputStream;

        specialinvoke $r0.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(inStream);

        staticinvoke <weka.core.WekaPackageClassLoaderManager: void injectClasses(java.io.InputStream,java.util.List,java.util.List,boolean)>($r0, null, null, 1);

        return;
    }


