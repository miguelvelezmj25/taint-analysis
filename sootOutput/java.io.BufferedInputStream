    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r0;

        <java.io.BufferedInputStream: int DEFAULT_BUFFER_SIZE> = 8192;

        <java.io.BufferedInputStream: int MAX_BUFFER_SIZE> = 2147483639;

        $r0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "java/io/BufferedInputStream", class "[B", "buf");

        <java.io.BufferedInputStream: java.util.concurrent.atomic.AtomicReferenceFieldUpdater bufUpdater> = $r0;

        return;
    }

    public void <init>(java.io.InputStream)
    {
        java.io.BufferedInputStream l0;
        java.io.InputStream l1;
        int $i0;

        l0 := @this: java.io.BufferedInputStream;

        l1 := @parameter0: java.io.InputStream;

        $i0 = <java.io.BufferedInputStream: int DEFAULT_BUFFER_SIZE>;

        specialinvoke l0.<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>(l1, $i0);

        return;
    }

    public void <init>(java.io.InputStream, int)
    {
        java.io.BufferedInputStream l0;
        java.io.InputStream l1;
        int l2;
        java.lang.IllegalArgumentException $r0;
        byte[] $r1;

        l0 := @this: java.io.BufferedInputStream;

        l1 := @parameter0: java.io.InputStream;

        l2 := @parameter1: int;

        specialinvoke l0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>(l1);

        l0.<java.io.BufferedInputStream: int markpos> = -1;

        if l2 > 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Buffer size <= 0");

        throw $r0;

     label1:
        $r1 = newarray (byte)[l2];

        l0.<java.io.BufferedInputStream: byte[] buf> = $r1;

        return;
    }

    public synchronized int read(byte[], int, int) throws java.io.IOException
    {
        java.io.BufferedInputStream l0;
        byte[] l1;
        int l2, l3, l5, $i0, $i1, $i2, $i3, $i4, $i5, $i6, l4#22, $i7, $i8, $i9, $i10;
        java.io.InputStream l6;
        java.lang.IndexOutOfBoundsException $r1;

        l0 := @this: java.io.BufferedInputStream;

        l1 := @parameter0: byte[];

        l2 := @parameter1: int;

        l3 := @parameter2: int;

        specialinvoke l0.<java.io.BufferedInputStream: byte[] getBufIfOpen()>();

        $i0 = l2 | l3;

        $i1 = l2 + l3;

        $i2 = $i0 | $i1;

        $i3 = lengthof l1;

        $i4 = l2 + l3;

        $i5 = $i3 - $i4;

        $i6 = $i2 | $i5;

        if $i6 >= 0 goto label1;

        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;

     label1:
        if l3 != 0 goto label2;

        return 0;

     label2:
        l4#22 = 0;

     label3:
        $i7 = l2 + l4#22;

        $i8 = l3 - l4#22;

        l5 = specialinvoke l0.<java.io.BufferedInputStream: int read1(byte[],int,int)>(l1, $i7, $i8);

        if l5 > 0 goto label6;

        if l4#22 != 0 goto label4;

        $i9 = l5;

        goto label5;

     label4:
        $i9 = l4#22;

     label5:
        return $i9;

     label6:
        l4#22 = l4#22 + l5;

        if l4#22 < l3 goto label7;

        return l4#22;

     label7:
        l6 = l0.<java.io.BufferedInputStream: java.io.InputStream in>;

        if l6 == null goto label8;

        $i10 = virtualinvoke l6.<java.io.InputStream: int available()>();

        if $i10 > 0 goto label8;

        return l4#22;

     label8:
        goto label3;
    }

    private byte[] getBufIfOpen() throws java.io.IOException
    {
        java.io.BufferedInputStream l0;
        byte[] l1;
        java.io.IOException $r0;

        l0 := @this: java.io.BufferedInputStream;

        l1 = l0.<java.io.BufferedInputStream: byte[] buf>;

        if l1 != null goto label1;

        $r0 = new java.io.IOException;

        specialinvoke $r0.<java.io.IOException: void <init>(java.lang.String)>("Stream closed");

        throw $r0;

     label1:
        return l1;
    }

    private int read1(byte[], int, int) throws java.io.IOException
    {
        java.io.BufferedInputStream l0;
        byte[] l1, $r0, $r2;
        int l2, l3, l5, $i0, $i1, l4#6, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.io.InputStream $r1;

        l0 := @this: java.io.BufferedInputStream;

        l1 := @parameter0: byte[];

        l2 := @parameter1: int;

        l3 := @parameter2: int;

        $i0 = l0.<java.io.BufferedInputStream: int count>;

        $i1 = l0.<java.io.BufferedInputStream: int pos>;

        l4#6 = $i0 - $i1;

        if l4#6 > 0 goto label2;

        $r0 = specialinvoke l0.<java.io.BufferedInputStream: byte[] getBufIfOpen()>();

        $i2 = lengthof $r0;

        if l3 < $i2 goto label1;

        $i3 = l0.<java.io.BufferedInputStream: int markpos>;

        if $i3 >= 0 goto label1;

        $r1 = specialinvoke l0.<java.io.BufferedInputStream: java.io.InputStream getInIfOpen()>();

        $i4 = virtualinvoke $r1.<java.io.InputStream: int read(byte[],int,int)>(l1, l2, l3);

        return $i4;

     label1:
        specialinvoke l0.<java.io.BufferedInputStream: void fill()>();

        $i5 = l0.<java.io.BufferedInputStream: int count>;

        $i6 = l0.<java.io.BufferedInputStream: int pos>;

        l4#6 = $i5 - $i6;

        if l4#6 > 0 goto label2;

        return -1;

     label2:
        if l4#6 >= l3 goto label3;

        $i7 = l4#6;

        goto label4;

     label3:
        $i7 = l3;

     label4:
        l5 = $i7;

        $r2 = specialinvoke l0.<java.io.BufferedInputStream: byte[] getBufIfOpen()>();

        $i8 = l0.<java.io.BufferedInputStream: int pos>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i8, l1, l2, l5);

        $i9 = l0.<java.io.BufferedInputStream: int pos>;

        $i10 = $i9 + l5;

        l0.<java.io.BufferedInputStream: int pos> = $i10;

        return l5;
    }

    private java.io.InputStream getInIfOpen() throws java.io.IOException
    {
        java.io.BufferedInputStream l0;
        java.io.InputStream l1;
        java.io.IOException $r0;

        l0 := @this: java.io.BufferedInputStream;

        l1 = l0.<java.io.BufferedInputStream: java.io.InputStream in>;

        if l1 != null goto label1;

        $r0 = new java.io.IOException;

        specialinvoke $r0.<java.io.IOException: void <init>(java.lang.String)>("Stream closed");

        throw $r0;

     label1:
        return l1;
    }

    private void fill() throws java.io.IOException
    {
        java.io.BufferedInputStream l0;
        byte[] l3, l1#3;
        int $i0, $i1, $i2, $i3, $i4, $i5, l2#19, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, l2#54, $i17, $i18, $i19, $i20, $i21, $i22, $i23, l2#91, $i24, $i25;
        java.lang.OutOfMemoryError $r0;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r1;
        boolean $z0;
        java.io.IOException $r2;
        java.io.InputStream $r3;

        l0 := @this: java.io.BufferedInputStream;

        l1#3 = specialinvoke l0.<java.io.BufferedInputStream: byte[] getBufIfOpen()>();

        $i0 = l0.<java.io.BufferedInputStream: int markpos>;

        if $i0 >= 0 goto label01;

        l0.<java.io.BufferedInputStream: int pos> = 0;

        goto label09;

     label01:
        $i1 = l0.<java.io.BufferedInputStream: int pos>;

        $i2 = lengthof l1#3;

        if $i1 < $i2 goto label09;

        $i3 = l0.<java.io.BufferedInputStream: int markpos>;

        if $i3 <= 0 goto label02;

        $i4 = l0.<java.io.BufferedInputStream: int pos>;

        $i5 = l0.<java.io.BufferedInputStream: int markpos>;

        l2#19 = $i4 - $i5;

        $i6 = l0.<java.io.BufferedInputStream: int markpos>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(l1#3, $i6, l1#3, 0, l2#19);

        l0.<java.io.BufferedInputStream: int pos> = l2#19;

        l0.<java.io.BufferedInputStream: int markpos> = 0;

        goto label09;

     label02:
        $i7 = lengthof l1#3;

        $i8 = l0.<java.io.BufferedInputStream: int marklimit>;

        if $i7 < $i8 goto label03;

        l0.<java.io.BufferedInputStream: int markpos> = -1;

        l0.<java.io.BufferedInputStream: int pos> = 0;

        goto label09;

     label03:
        $i9 = lengthof l1#3;

        $i10 = <java.io.BufferedInputStream: int MAX_BUFFER_SIZE>;

        if $i9 < $i10 goto label04;

        $r0 = new java.lang.OutOfMemoryError;

        specialinvoke $r0.<java.lang.OutOfMemoryError: void <init>(java.lang.String)>("Required array size too large");

        throw $r0;

     label04:
        $i11 = l0.<java.io.BufferedInputStream: int pos>;

        $i12 = <java.io.BufferedInputStream: int MAX_BUFFER_SIZE>;

        $i13 = l0.<java.io.BufferedInputStream: int pos>;

        $i14 = $i12 - $i13;

        if $i11 > $i14 goto label05;

        $i15 = l0.<java.io.BufferedInputStream: int pos>;

        $i16 = $i15 * 2;

        goto label06;

     label05:
        $i16 = <java.io.BufferedInputStream: int MAX_BUFFER_SIZE>;

     label06:
        l2#54 = $i16;

        $i17 = l0.<java.io.BufferedInputStream: int marklimit>;

        if l2#54 <= $i17 goto label07;

        l2#54 = l0.<java.io.BufferedInputStream: int marklimit>;

     label07:
        l3 = newarray (byte)[l2#54];

        $i18 = l0.<java.io.BufferedInputStream: int pos>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(l1#3, 0, l3, 0, $i18);

        $r1 = <java.io.BufferedInputStream: java.util.concurrent.atomic.AtomicReferenceFieldUpdater bufUpdater>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(l0, l1#3, l3);

        if $z0 != 0 goto label08;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Stream closed");

        throw $r2;

     label08:
        l1#3 = l3;

     label09:
        $i19 = l0.<java.io.BufferedInputStream: int pos>;

        l0.<java.io.BufferedInputStream: int count> = $i19;

        $r3 = specialinvoke l0.<java.io.BufferedInputStream: java.io.InputStream getInIfOpen()>();

        $i20 = l0.<java.io.BufferedInputStream: int pos>;

        $i21 = lengthof l1#3;

        $i22 = l0.<java.io.BufferedInputStream: int pos>;

        $i23 = $i21 - $i22;

        l2#91 = virtualinvoke $r3.<java.io.InputStream: int read(byte[],int,int)>(l1#3, $i20, $i23);

        if l2#91 <= 0 goto label10;

        $i24 = l0.<java.io.BufferedInputStream: int pos>;

        $i25 = l2#91 + $i24;

        l0.<java.io.BufferedInputStream: int count> = $i25;

     label10:
        return;
    }

    public synchronized int available() throws java.io.IOException
    {
        java.io.BufferedInputStream l0;
        int l1, l2, $i0, $i1, $i2, $i3;
        java.io.InputStream $r0;

        l0 := @this: java.io.BufferedInputStream;

        $i0 = l0.<java.io.BufferedInputStream: int count>;

        $i1 = l0.<java.io.BufferedInputStream: int pos>;

        l1 = $i0 - $i1;

        $r0 = specialinvoke l0.<java.io.BufferedInputStream: java.io.InputStream getInIfOpen()>();

        l2 = virtualinvoke $r0.<java.io.InputStream: int available()>();

        $i2 = 2147483647 - l2;

        if l1 <= $i2 goto label1;

        $i3 = 2147483647;

        goto label2;

     label1:
        $i3 = l1 + l2;

     label2:
        return $i3;
    }

    public void close() throws java.io.IOException
    {
        java.io.BufferedInputStream l0;
        byte[] l1, $r0;
        java.io.InputStream l2;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r1;
        boolean $z0;

        l0 := @this: java.io.BufferedInputStream;

     label1:
        $r0 = l0.<java.io.BufferedInputStream: byte[] buf>;

        l1 = $r0;

        if $r0 == null goto label3;

        $r1 = <java.io.BufferedInputStream: java.util.concurrent.atomic.AtomicReferenceFieldUpdater bufUpdater>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(l0, l1, null);

        if $z0 == 0 goto label1;

        l2 = l0.<java.io.BufferedInputStream: java.io.InputStream in>;

        l0.<java.io.BufferedInputStream: java.io.InputStream in> = null;

        if l2 == null goto label2;

        virtualinvoke l2.<java.io.InputStream: void close()>();

     label2:
        return;

     label3:
        return;
    }

    public synchronized int read() throws java.io.IOException
    {
        java.io.BufferedInputStream l0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        byte[] $r0;
        byte $b6;
        short $s7;

        l0 := @this: java.io.BufferedInputStream;

        $i0 = l0.<java.io.BufferedInputStream: int pos>;

        $i1 = l0.<java.io.BufferedInputStream: int count>;

        if $i0 < $i1 goto label1;

        specialinvoke l0.<java.io.BufferedInputStream: void fill()>();

        $i2 = l0.<java.io.BufferedInputStream: int pos>;

        $i3 = l0.<java.io.BufferedInputStream: int count>;

        if $i2 < $i3 goto label1;

        return -1;

     label1:
        $r0 = specialinvoke l0.<java.io.BufferedInputStream: byte[] getBufIfOpen()>();

        $i4 = l0.<java.io.BufferedInputStream: int pos>;

        $i5 = $i4 + 1;

        l0.<java.io.BufferedInputStream: int pos> = $i5;

        $b6 = $r0[$i4];

        $s7 = $b6 & 255;

        return $s7;
    }


