    public void <init>()
    {
        java.util.concurrent.LinkedBlockingQueue l0;

        l0 := @this: java.util.concurrent.LinkedBlockingQueue;

        specialinvoke l0.<java.util.concurrent.LinkedBlockingQueue: void <init>(int)>(2147483647);

        return;
    }

    public void <init>(int)
    {
        java.util.concurrent.LinkedBlockingQueue l0;
        int l1;
        java.util.concurrent.atomic.AtomicInteger $r0;
        java.util.concurrent.locks.ReentrantLock $r1, $r2, $r4, $r5;
        java.util.concurrent.locks.Condition $r3, $r6;
        java.lang.IllegalArgumentException $r7;
        java.util.concurrent.LinkedBlockingQueue$Node $r8;

        l0 := @this: java.util.concurrent.LinkedBlockingQueue;

        l1 := @parameter0: int;

        specialinvoke l0.<java.util.AbstractQueue: void <init>()>();

        $r0 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        l0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.atomic.AtomicInteger count> = $r0;

        $r1 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        l0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.ReentrantLock takeLock> = $r1;

        $r2 = l0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.ReentrantLock takeLock>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>();

        l0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.Condition notEmpty> = $r3;

        $r4 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r4.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        l0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.ReentrantLock putLock> = $r4;

        $r5 = l0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.ReentrantLock putLock>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>();

        l0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.Condition notFull> = $r6;

        if l1 > 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r7;

     label1:
        l0.<java.util.concurrent.LinkedBlockingQueue: int capacity> = l1;

        $r8 = new java.util.concurrent.LinkedBlockingQueue$Node;

        specialinvoke $r8.<java.util.concurrent.LinkedBlockingQueue$Node: void <init>(java.lang.Object)>(null);

        l0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.LinkedBlockingQueue$Node head> = $r8;

        l0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.LinkedBlockingQueue$Node last> = $r8;

        return;
    }

    public int size()
    {
        java.util.concurrent.LinkedBlockingQueue l0;
        java.util.concurrent.atomic.AtomicInteger $r0;
        int $i0;

        l0 := @this: java.util.concurrent.LinkedBlockingQueue;

        $r0 = l0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.atomic.AtomicInteger count>;

        $i0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        return $i0;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.concurrent.LinkedBlockingQueue l0;
        java.lang.Object l1, $r0;
        boolean l4, $z0, l2#24;
        java.lang.Throwable l5, $r1;
        java.util.concurrent.LinkedBlockingQueue$Node l2#6, l3#9;

        l0 := @this: java.util.concurrent.LinkedBlockingQueue;

        l1 := @parameter0: java.lang.Object;

        if l1 != null goto label01;

        return 0;

     label01:
        virtualinvoke l0.<java.util.concurrent.LinkedBlockingQueue: void fullyLock()>();

     label02:
        l2#6 = l0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.LinkedBlockingQueue$Node head>;

        l3#9 = l2#6.<java.util.concurrent.LinkedBlockingQueue$Node: java.util.concurrent.LinkedBlockingQueue$Node next>;

     label03:
        if l3#9 == null goto label06;

        $r0 = l3#9.<java.util.concurrent.LinkedBlockingQueue$Node: java.lang.Object item>;

        $z0 = virtualinvoke l1.<java.lang.Object: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label05;

        virtualinvoke l0.<java.util.concurrent.LinkedBlockingQueue: void unlink(java.util.concurrent.LinkedBlockingQueue$Node,java.util.concurrent.LinkedBlockingQueue$Node)>(l3#9, l2#6);

        l4 = 1;

     label04:
        virtualinvoke l0.<java.util.concurrent.LinkedBlockingQueue: void fullyUnlock()>();

        return l4;

     label05:
        l2#6 = l3#9;

        l3#9 = l3#9.<java.util.concurrent.LinkedBlockingQueue$Node: java.util.concurrent.LinkedBlockingQueue$Node next>;

        goto label03;

     label06:
        l2#24 = 0;

     label07:
        virtualinvoke l0.<java.util.concurrent.LinkedBlockingQueue: void fullyUnlock()>();

        return l2#24;

     label08:
        $r1 := @caughtexception;

     label09:
        l5 = $r1;

     label10:
        virtualinvoke l0.<java.util.concurrent.LinkedBlockingQueue: void fullyUnlock()>();

        throw l5;

        catch java.lang.Throwable from label02 to label04 with label08;
        catch java.lang.Throwable from label05 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    void fullyLock()
    {
        java.util.concurrent.LinkedBlockingQueue l0;
        java.util.concurrent.locks.ReentrantLock $r0, $r1;

        l0 := @this: java.util.concurrent.LinkedBlockingQueue;

        $r0 = l0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.ReentrantLock putLock>;

        virtualinvoke $r0.<java.util.concurrent.locks.ReentrantLock: void lock()>();

        $r1 = l0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.ReentrantLock takeLock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

        return;
    }

    void unlink(java.util.concurrent.LinkedBlockingQueue$Node, java.util.concurrent.LinkedBlockingQueue$Node)
    {
        java.util.concurrent.LinkedBlockingQueue l0;
        java.util.concurrent.LinkedBlockingQueue$Node l1, l2, $r0, $r1;
        java.util.concurrent.atomic.AtomicInteger $r2;
        int $i0, $i1;
        java.util.concurrent.locks.Condition $r3;

        l0 := @this: java.util.concurrent.LinkedBlockingQueue;

        l1 := @parameter0: java.util.concurrent.LinkedBlockingQueue$Node;

        l2 := @parameter1: java.util.concurrent.LinkedBlockingQueue$Node;

        l1.<java.util.concurrent.LinkedBlockingQueue$Node: java.lang.Object item> = null;

        $r0 = l1.<java.util.concurrent.LinkedBlockingQueue$Node: java.util.concurrent.LinkedBlockingQueue$Node next>;

        l2.<java.util.concurrent.LinkedBlockingQueue$Node: java.util.concurrent.LinkedBlockingQueue$Node next> = $r0;

        $r1 = l0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.LinkedBlockingQueue$Node last>;

        if $r1 != l1 goto label1;

        l0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.LinkedBlockingQueue$Node last> = l2;

     label1:
        $r2 = l0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.atomic.AtomicInteger count>;

        $i0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int getAndDecrement()>();

        $i1 = l0.<java.util.concurrent.LinkedBlockingQueue: int capacity>;

        if $i0 != $i1 goto label2;

        $r3 = l0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.Condition notFull>;

        interfaceinvoke $r3.<java.util.concurrent.locks.Condition: void signal()>();

     label2:
        return;
    }

    void fullyUnlock()
    {
        java.util.concurrent.LinkedBlockingQueue l0;
        java.util.concurrent.locks.ReentrantLock $r0, $r1;

        l0 := @this: java.util.concurrent.LinkedBlockingQueue;

        $r0 = l0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.ReentrantLock takeLock>;

        virtualinvoke $r0.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        $r1 = l0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.ReentrantLock putLock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return;
    }

    public boolean offer(java.lang.Object)
    {
        java.util.concurrent.LinkedBlockingQueue l0;
        java.lang.Object l1;
        java.util.concurrent.atomic.AtomicInteger l2;
        java.util.concurrent.LinkedBlockingQueue$Node l4, $r1;
        java.util.concurrent.locks.ReentrantLock l5;
        java.lang.Throwable l6, $r3;
        java.lang.NullPointerException $r0;
        int $i0, $i1, l3#12, $i2, $i3, $i4, $i5;
        java.util.concurrent.locks.Condition $r2;
        boolean $z0;

        l0 := @this: java.util.concurrent.LinkedBlockingQueue;

        l1 := @parameter0: java.lang.Object;

        if l1 != null goto label01;

        $r0 = new java.lang.NullPointerException;

        specialinvoke $r0.<java.lang.NullPointerException: void <init>()>();

        throw $r0;

     label01:
        l2 = l0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.atomic.AtomicInteger count>;

        $i0 = virtualinvoke l2.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i1 = l0.<java.util.concurrent.LinkedBlockingQueue: int capacity>;

        if $i0 != $i1 goto label02;

        return 0;

     label02:
        l3#12 = -1;

        $r1 = new java.util.concurrent.LinkedBlockingQueue$Node;

        specialinvoke $r1.<java.util.concurrent.LinkedBlockingQueue$Node: void <init>(java.lang.Object)>(l1);

        l4 = $r1;

        l5 = l0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.ReentrantLock putLock>;

        virtualinvoke l5.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label03:
        $i2 = virtualinvoke l2.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i3 = l0.<java.util.concurrent.LinkedBlockingQueue: int capacity>;

        if $i2 >= $i3 goto label04;

        specialinvoke l0.<java.util.concurrent.LinkedBlockingQueue: void enqueue(java.util.concurrent.LinkedBlockingQueue$Node)>(l4);

        l3#12 = virtualinvoke l2.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        $i4 = l3#12 + 1;

        $i5 = l0.<java.util.concurrent.LinkedBlockingQueue: int capacity>;

        if $i4 >= $i5 goto label04;

        $r2 = l0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.Condition notFull>;

        interfaceinvoke $r2.<java.util.concurrent.locks.Condition: void signal()>();

     label04:
        virtualinvoke l5.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label08;

     label05:
        $r3 := @caughtexception;

     label06:
        l6 = $r3;

     label07:
        virtualinvoke l5.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw l6;

     label08:
        if l3#12 != 0 goto label09;

        specialinvoke l0.<java.util.concurrent.LinkedBlockingQueue: void signalNotEmpty()>();

     label09:
        if l3#12 < 0 goto label10;

        $z0 = 1;

        goto label11;

     label10:
        $z0 = 0;

     label11:
        return $z0;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
    }

    private void enqueue(java.util.concurrent.LinkedBlockingQueue$Node)
    {
        java.util.concurrent.LinkedBlockingQueue l0;
        java.util.concurrent.LinkedBlockingQueue$Node l1, $r1;

        l0 := @this: java.util.concurrent.LinkedBlockingQueue;

        l1 := @parameter0: java.util.concurrent.LinkedBlockingQueue$Node;

        $r1 = l0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.LinkedBlockingQueue$Node last>;

        $r1.<java.util.concurrent.LinkedBlockingQueue$Node: java.util.concurrent.LinkedBlockingQueue$Node next> = l1;

        l0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.LinkedBlockingQueue$Node last> = l1;

        return;
    }

    private void signalNotEmpty()
    {
        java.util.concurrent.LinkedBlockingQueue l0;
        java.util.concurrent.locks.ReentrantLock l1;
        java.lang.Throwable l2, $r1;
        java.util.concurrent.locks.Condition $r0;

        l0 := @this: java.util.concurrent.LinkedBlockingQueue;

        l1 = l0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.ReentrantLock takeLock>;

        virtualinvoke l1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r0 = l0.<java.util.concurrent.LinkedBlockingQueue: java.util.concurrent.locks.Condition notEmpty>;

        interfaceinvoke $r0.<java.util.concurrent.locks.Condition: void signal()>();

     label2:
        virtualinvoke l1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label4;

     label3:
        $r1 := @caughtexception;

        l2 = $r1;

        virtualinvoke l1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw l2;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }


