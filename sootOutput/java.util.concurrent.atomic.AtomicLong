    static void <clinit>()
    {
        java.lang.Exception l0, $r4;
        sun.misc.Unsafe $r0, $r1;
        boolean $z0;
        java.lang.Class $r2;
        java.lang.reflect.Field $r3;
        long $l0;
        java.lang.Error $r5;

        $r0 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.atomic.AtomicLong: sun.misc.Unsafe unsafe> = $r0;

        $z0 = staticinvoke <java.util.concurrent.atomic.AtomicLong: boolean VMSupportsCS8()>();

        <java.util.concurrent.atomic.AtomicLong: boolean VM_SUPPORTS_LONG_CAS> = $z0;

     label1:
        $r1 = <java.util.concurrent.atomic.AtomicLong: sun.misc.Unsafe unsafe>;

        $r2 = class "java/util/concurrent/atomic/AtomicLong";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("value");

        $l0 = virtualinvoke $r1.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r3);

        <java.util.concurrent.atomic.AtomicLong: long valueOffset> = $l0;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        l0 = $r4;

        $r5 = new java.lang.Error;

        specialinvoke $r5.<java.lang.Error: void <init>(java.lang.Throwable)>(l0);

        throw $r5;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public final boolean compareAndSet(long, long)
    {
        java.util.concurrent.atomic.AtomicLong l0;
        long l1, l3, $l0;
        sun.misc.Unsafe $r0;
        boolean $z0;

        l0 := @this: java.util.concurrent.atomic.AtomicLong;

        l1 := @parameter0: long;

        l3 := @parameter1: long;

        $r0 = <java.util.concurrent.atomic.AtomicLong: sun.misc.Unsafe unsafe>;

        $l0 = <java.util.concurrent.atomic.AtomicLong: long valueOffset>;

        $z0 = virtualinvoke $r0.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(l0, $l0, l1, l3);

        return $z0;
    }

    public final long get()
    {
        java.util.concurrent.atomic.AtomicLong l0;
        long $l0;

        l0 := @this: java.util.concurrent.atomic.AtomicLong;

        $l0 = l0.<java.util.concurrent.atomic.AtomicLong: long value>;

        return $l0;
    }

    public void <init>()
    {
        java.util.concurrent.atomic.AtomicLong l0;

        l0 := @this: java.util.concurrent.atomic.AtomicLong;

        specialinvoke l0.<java.lang.Number: void <init>()>();

        return;
    }

    public void <init>(long)
    {
        java.util.concurrent.atomic.AtomicLong l0;
        long l1;

        l0 := @this: java.util.concurrent.atomic.AtomicLong;

        l1 := @parameter0: long;

        specialinvoke l0.<java.lang.Number: void <init>()>();

        l0.<java.util.concurrent.atomic.AtomicLong: long value> = l1;

        return;
    }

    public final long getAndAdd(long)
    {
        java.util.concurrent.atomic.AtomicLong l0;
        long l1, $l0, $l1;
        sun.misc.Unsafe $r0;

        l0 := @this: java.util.concurrent.atomic.AtomicLong;

        l1 := @parameter0: long;

        $r0 = <java.util.concurrent.atomic.AtomicLong: sun.misc.Unsafe unsafe>;

        $l0 = <java.util.concurrent.atomic.AtomicLong: long valueOffset>;

        $l1 = virtualinvoke $r0.<sun.misc.Unsafe: long getAndAddLong(java.lang.Object,long,long)>(l0, $l0, l1);

        return $l1;
    }


