    public static byte[] getSeed(int)
    {
        int l0;
        java.security.SecureRandom $r0, $r1, $r2;
        byte[] $r3;

        l0 := @parameter0: int;

        $r0 = <java.security.SecureRandom: java.security.SecureRandom seedGenerator>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label1;

        $r1 = new java.security.SecureRandom;

        specialinvoke $r1.<java.security.SecureRandom: void <init>()>();

        <java.security.SecureRandom: java.security.SecureRandom seedGenerator> = $r1;

     label1:
        $r2 = <java.security.SecureRandom: java.security.SecureRandom seedGenerator>;

        $r3 = virtualinvoke $r2.<java.security.SecureRandom: byte[] generateSeed(int)>(l0);

        return $r3;
    }

    static void <clinit>()
    {
        sun.security.util.Debug $r0;
        boolean $z0, $z1, $z2;

        $r0 = staticinvoke <sun.security.util.Debug: sun.security.util.Debug getInstance(java.lang.String,java.lang.String)>("provider", "Provider");

        <java.security.SecureRandom: sun.security.util.Debug pdebug> = $r0;

        $z0 = staticinvoke <sun.security.util.Debug: boolean isOn(java.lang.String)>("engine=");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <sun.security.util.Debug: boolean isOn(java.lang.String)>("securerandom");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        <java.security.SecureRandom: boolean skipDebug> = $z2;

        <java.security.SecureRandom: java.security.SecureRandom seedGenerator> = null;

        return;
    }

    public byte[] generateSeed(int)
    {
        java.security.SecureRandom l0;
        int l1;
        java.security.SecureRandomSpi $r0;
        byte[] $r1;

        l0 := @this: java.security.SecureRandom;

        l1 := @parameter0: int;

        $r0 = l0.<java.security.SecureRandom: java.security.SecureRandomSpi secureRandomSpi>;

        $r1 = virtualinvoke $r0.<java.security.SecureRandomSpi: byte[] engineGenerateSeed(int)>(l1);

        return $r1;
    }

    public void <init>()
    {
        java.security.SecureRandom l0;

        l0 := @this: java.security.SecureRandom;

        specialinvoke l0.<java.util.Random: void <init>(long)>(0L);

        l0.<java.security.SecureRandom: java.security.Provider provider> = null;

        l0.<java.security.SecureRandom: java.security.SecureRandomSpi secureRandomSpi> = null;

        l0.<java.security.SecureRandom: java.security.MessageDigest digest> = null;

        specialinvoke l0.<java.security.SecureRandom: void getDefaultPRNG(boolean,byte[])>(0, null);

        return;
    }

    private void getDefaultPRNG(boolean, byte[])
    {
        java.security.SecureRandom l0, l4#16;
        boolean l1;
        byte[] l2;
        java.lang.String l3#2;
        sun.security.provider.SecureRandom $r0;
        java.security.Provider $r1, $r4;
        java.security.SecureRandomSpi $r2, $r3, $r5;
        java.security.NoSuchAlgorithmException $r6, l4#28;
        java.lang.RuntimeException $r7;
        java.lang.Class $r8;

        l0 := @this: java.security.SecureRandom;

        l1 := @parameter0: boolean;

        l2 := @parameter1: byte[];

        l3#2 = staticinvoke <java.security.SecureRandom: java.lang.String getPrngAlgorithm()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3#2);

        if l3#2 != null goto label1;

        l3#2 = "SHA1PRNG";

        $r0 = new sun.security.provider.SecureRandom;

        specialinvoke $r0.<sun.security.provider.SecureRandom: void <init>()>();

        l0.<java.security.SecureRandom: java.security.SecureRandomSpi secureRandomSpi> = $r0;

        $r1 = staticinvoke <sun.security.jca.Providers: java.security.Provider getSunProvider()>();

        l0.<java.security.SecureRandom: java.security.Provider provider> = $r1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l1);

        if l1 == 0 goto label4;

        $r2 = l0.<java.security.SecureRandom: java.security.SecureRandomSpi secureRandomSpi>;

        virtualinvoke $r2.<java.security.SecureRandomSpi: void engineSetSeed(byte[])>(l2);

        goto label4;

     label1:
        l4#16 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>(l3#2);

        $r3 = virtualinvoke l4#16.<java.security.SecureRandom: java.security.SecureRandomSpi getSecureRandomSpi()>();

        l0.<java.security.SecureRandom: java.security.SecureRandomSpi secureRandomSpi> = $r3;

        $r4 = virtualinvoke l4#16.<java.security.SecureRandom: java.security.Provider getProvider()>();

        l0.<java.security.SecureRandom: java.security.Provider provider> = $r4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l1);

        if l1 == 0 goto label2;

        $r5 = l0.<java.security.SecureRandom: java.security.SecureRandomSpi secureRandomSpi>;

        virtualinvoke $r5.<java.security.SecureRandomSpi: void engineSetSeed(byte[])>(l2);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        l4#28 = $r6;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(l4#28);

        throw $r7;

     label4:
        $r8 = virtualinvoke l0.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r8);

        if $r8 != class "java/security/SecureRandom" goto label5;

        l0.<java.security.SecureRandom: java.lang.String algorithm> = l3#2;

     label5:
        return;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    public static java.security.SecureRandom getInstance(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String l0;
        sun.security.jca.GetInstance$Instance l1;
        java.security.SecureRandom $r0;
        java.lang.Object $r1;
        java.security.SecureRandomSpi $r2;
        java.security.Provider $r3;

        l0 := @parameter0: java.lang.String;

        l1 = staticinvoke <sun.security.jca.GetInstance: sun.security.jca.GetInstance$Instance getInstance(java.lang.String,java.lang.Class,java.lang.String)>("SecureRandom", class "java/security/SecureRandomSpi", l0);

        $r0 = new java.security.SecureRandom;

        $r1 = l1.<sun.security.jca.GetInstance$Instance: java.lang.Object impl>;

        $r2 = (java.security.SecureRandomSpi) $r1;

        $r3 = l1.<sun.security.jca.GetInstance$Instance: java.security.Provider provider>;

        specialinvoke $r0.<java.security.SecureRandom: void <init>(java.security.SecureRandomSpi,java.security.Provider,java.lang.String)>($r2, $r3, l0);

        return $r0;
    }

    private static java.lang.String getPrngAlgorithm()
    {
        java.util.Iterator l0, l2;
        java.security.Provider l1;
        java.security.Provider$Service l3;
        sun.security.jca.ProviderList $r0;
        java.util.List $r1;
        boolean $z0, $z1, $z2;
        java.lang.Object $r2, $r4;
        java.util.Set $r3;
        java.lang.String $r5, $r6;

        $r0 = staticinvoke <sun.security.jca.Providers: sun.security.jca.ProviderList getProviderList()>();

        $r1 = virtualinvoke $r0.<sun.security.jca.ProviderList: java.util.List providers()>();

        l0 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l0.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label5;

        $r2 = interfaceinvoke l0.<java.util.Iterator: java.lang.Object next()>();

        l1 = (java.security.Provider) $r2;

        $r3 = virtualinvoke l1.<java.security.Provider: java.util.Set getServices()>();

        l2 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label4;

        $r4 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        l3 = (java.security.Provider$Service) $r4;

        $r5 = virtualinvoke l3.<java.security.Provider$Service: java.lang.String getType()>();

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("SecureRandom");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label3;

        $r6 = virtualinvoke l3.<java.security.Provider$Service: java.lang.String getAlgorithm()>();

        return $r6;

     label3:
        goto label2;

     label4:
        goto label1;

     label5:
        return null;
    }

    java.security.SecureRandomSpi getSecureRandomSpi()
    {
        java.security.SecureRandom l0;
        java.security.SecureRandomSpi $r0;

        l0 := @this: java.security.SecureRandom;

        $r0 = l0.<java.security.SecureRandom: java.security.SecureRandomSpi secureRandomSpi>;

        return $r0;
    }

    public final java.security.Provider getProvider()
    {
        java.security.SecureRandom l0;
        java.security.Provider $r0;

        l0 := @this: java.security.SecureRandom;

        $r0 = l0.<java.security.SecureRandom: java.security.Provider provider>;

        return $r0;
    }

    private void <init>(java.security.SecureRandomSpi, java.security.Provider, java.lang.String)
    {
        java.security.SecureRandom l0;
        java.security.SecureRandomSpi l1;
        java.security.Provider l2, $r6;
        java.lang.String l3, $r7, $r9;
        boolean $z0;
        sun.security.util.Debug $r0, $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r8;

        l0 := @this: java.security.SecureRandom;

        l1 := @parameter0: java.security.SecureRandomSpi;

        l2 := @parameter1: java.security.Provider;

        l3 := @parameter2: java.lang.String;

        specialinvoke l0.<java.util.Random: void <init>(long)>(0L);

        l0.<java.security.SecureRandom: java.security.Provider provider> = null;

        l0.<java.security.SecureRandom: java.security.SecureRandomSpi secureRandomSpi> = null;

        l0.<java.security.SecureRandom: java.security.MessageDigest digest> = null;

        l0.<java.security.SecureRandom: java.security.SecureRandomSpi secureRandomSpi> = l1;

        l0.<java.security.SecureRandom: java.security.Provider provider> = l2;

        l0.<java.security.SecureRandom: java.lang.String algorithm> = l3;

        $z0 = <java.security.SecureRandom: boolean skipDebug>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r0 = <java.security.SecureRandom: sun.security.util.Debug pdebug>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label1;

        $r1 = <java.security.SecureRandom: sun.security.util.Debug pdebug>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SecureRandom.");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(l3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" algorithm from: ");

        $r6 = l0.<java.security.SecureRandom: java.security.Provider provider>;

        $r7 = virtualinvoke $r6.<java.security.Provider: java.lang.String getName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<sun.security.util.Debug: void println(java.lang.String)>($r9);

     label1:
        return;
    }

    public void setSeed(long)
    {
        java.security.SecureRandom l0;
        long l1;
        byte $b0;
        java.security.SecureRandomSpi $r0;
        byte[] $r1;

        l0 := @this: java.security.SecureRandom;

        l1 := @parameter0: long;

        $b0 = l1 cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 == 0 goto label1;

        $r0 = l0.<java.security.SecureRandom: java.security.SecureRandomSpi secureRandomSpi>;

        $r1 = staticinvoke <java.security.SecureRandom: byte[] longToByteArray(long)>(l1);

        virtualinvoke $r0.<java.security.SecureRandomSpi: void engineSetSeed(byte[])>($r1);

     label1:
        return;
    }

    private static byte[] longToByteArray(long)
    {
        byte[] l2;
        long l0#1;
        int l3#5, $i0;
        byte $b1;

        l0#1 := @parameter0: long;

        l2 = newarray (byte)[8];

        l3#5 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3#5);

        if l3#5 >= 8 goto label2;

        $i0 = (int) l0#1;

        $b1 = (byte) $i0;

        l2[l3#5] = $b1;

        l0#1 = l0#1 >> 8;

        l3#5 = l3#5 + 1;

        goto label1;

     label2:
        return l2;
    }


