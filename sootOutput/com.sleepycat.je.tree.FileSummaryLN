    public static long getFileNumber(byte[])
    {
        byte[] bytes;
        java.nio.ByteBuffer buf;
        boolean $z0;
        java.lang.String $r0;
        java.lang.Long $r1;
        long $l0, $l2, $l3;
        int $i1;

        bytes := @parameter0: byte[];

        $z0 = staticinvoke <com.sleepycat.je.tree.FileSummaryLN: boolean hasStringKey(byte[])>(bytes);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r0 = staticinvoke <com.sleepycat.utilint.StringUtils: java.lang.String fromUTF8(byte[])>(bytes);

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>($r0);

        $l0 = virtualinvoke $r1.<java.lang.Long: long longValue()>();

        return $l0;

     label1:
        buf = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(bytes);

        $i1 = staticinvoke <com.sleepycat.je.log.LogUtils: int readIntMSB(java.nio.ByteBuffer)>(buf);

        $l2 = (long) $i1;

        $l3 = $l2 & 4294967295L;

        return $l3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "com/sleepycat/je/tree/FileSummaryLN";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sleepycat.je.tree.FileSummaryLN: boolean $assertionsDisabled> = $z1;

        return;
    }

    public static boolean hasStringKey(byte[])
    {
        byte[] bytes;
        int $i0;
        byte $b1, $b2;
        boolean $z0;

        bytes := @parameter0: byte[];

        $i0 = lengthof bytes;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 == 8 goto label1;

        return 1;

     label1:
        $b1 = bytes[4];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 < 48 goto label2;

        $b2 = bytes[4];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b2);

        if $b2 > 57 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public void setTrackedSummary(com.sleepycat.je.cleaner.TrackedFileSummary)
    {
        com.sleepycat.je.tree.FileSummaryLN this;
        com.sleepycat.je.cleaner.TrackedFileSummary trackedSummary;

        this := @this: com.sleepycat.je.tree.FileSummaryLN;

        trackedSummary := @parameter0: com.sleepycat.je.cleaner.TrackedFileSummary;

        this.<com.sleepycat.je.tree.FileSummaryLN: com.sleepycat.je.cleaner.TrackedFileSummary trackedSummary> = trackedSummary;

        this.<com.sleepycat.je.tree.FileSummaryLN: boolean needOffsets> = 1;

        return;
    }

    public com.sleepycat.je.cleaner.FileSummary getBaseSummary()
    {
        com.sleepycat.je.tree.FileSummaryLN this;
        com.sleepycat.je.cleaner.FileSummary $r0;

        this := @this: com.sleepycat.je.tree.FileSummaryLN;

        $r0 = this.<com.sleepycat.je.tree.FileSummaryLN: com.sleepycat.je.cleaner.FileSummary baseSummary>;

        return $r0;
    }

    public com.sleepycat.je.cleaner.PackedOffsets getObsoleteOffsets()
    {
        com.sleepycat.je.tree.FileSummaryLN this;
        com.sleepycat.je.cleaner.PackedOffsets $r0;

        this := @this: com.sleepycat.je.tree.FileSummaryLN;

        $r0 = this.<com.sleepycat.je.tree.FileSummaryLN: com.sleepycat.je.cleaner.PackedOffsets obsoleteOffsets>;

        return $r0;
    }

    public void <init>(com.sleepycat.je.cleaner.FileSummary)
    {
        com.sleepycat.je.tree.FileSummaryLN this;
        com.sleepycat.je.cleaner.FileSummary baseSummary;
        byte[] $r0;
        boolean $z0;
        java.lang.AssertionError $r1;
        com.sleepycat.je.cleaner.PackedOffsets $r2;

        this := @this: com.sleepycat.je.tree.FileSummaryLN;

        baseSummary := @parameter0: com.sleepycat.je.cleaner.FileSummary;

        $r0 = newarray (byte)[0];

        specialinvoke this.<com.sleepycat.je.tree.LN: void <init>(byte[])>($r0);

        $z0 = <com.sleepycat.je.tree.FileSummaryLN: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(baseSummary);

        if baseSummary != null goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        this.<com.sleepycat.je.tree.FileSummaryLN: com.sleepycat.je.cleaner.FileSummary baseSummary> = baseSummary;

        $r2 = new com.sleepycat.je.cleaner.PackedOffsets;

        specialinvoke $r2.<com.sleepycat.je.cleaner.PackedOffsets: void <init>()>();

        this.<com.sleepycat.je.tree.FileSummaryLN: com.sleepycat.je.cleaner.PackedOffsets obsoleteOffsets> = $r2;

        this.<com.sleepycat.je.tree.FileSummaryLN: int entryVersion> = -1;

        return;
    }

    public static byte[] makeFullKey(long, int)
    {
        long fileNum;
        int sequence, $i0, $i1;
        byte[] bytes;
        java.nio.ByteBuffer buf;
        boolean $z0;
        java.lang.AssertionError $r0;

        fileNum := @parameter0: long;

        sequence := @parameter1: int;

        $z0 = <com.sleepycat.je.tree.FileSummaryLN: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(sequence);

        if sequence >= 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        bytes = newarray (byte)[8];

        buf = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(bytes);

        $i0 = (int) fileNum;

        staticinvoke <com.sleepycat.je.log.LogUtils: void writeIntMSB(java.nio.ByteBuffer,int)>(buf, $i0);

        $i1 = 2147483647 - sequence;

        staticinvoke <com.sleepycat.je.log.LogUtils: void writeIntMSB(java.nio.ByteBuffer,int)>(buf, $i1);

        return bytes;
    }

    public void addExtraMarshaledMemorySize(com.sleepycat.je.tree.BIN)
    {
        com.sleepycat.je.tree.FileSummaryLN this;
        com.sleepycat.je.tree.BIN parentBIN;
        int $i0, $i1;
        boolean $z0, $z1, $z2;
        com.sleepycat.je.cleaner.TrackedFileSummary $r0;
        java.lang.AssertionError $r1, $r2;
        long $l2;

        this := @this: com.sleepycat.je.tree.FileSummaryLN;

        parentBIN := @parameter0: com.sleepycat.je.tree.BIN;

        $i0 = this.<com.sleepycat.je.tree.FileSummaryLN: int extraMarshaledMemorySize>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 == 0 goto label3;

        $z0 = <com.sleepycat.je.tree.FileSummaryLN: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r0 = this.<com.sleepycat.je.tree.FileSummaryLN: com.sleepycat.je.cleaner.TrackedFileSummary trackedSummary>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $z1 = <com.sleepycat.je.tree.FileSummaryLN: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke parentBIN.<com.sleepycat.je.tree.BIN: boolean isLatchExclusiveOwner()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label2;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label2:
        $i1 = this.<com.sleepycat.je.tree.FileSummaryLN: int extraMarshaledMemorySize>;

        $l2 = (long) $i1;

        virtualinvoke parentBIN.<com.sleepycat.je.tree.BIN: void updateMemorySize(long,long)>(0L, $l2);

        this.<com.sleepycat.je.tree.FileSummaryLN: int extraMarshaledMemorySize> = 0;

     label3:
        return;
    }

    protected com.sleepycat.je.log.LogEntryType getLogType(boolean, boolean)
    {
        com.sleepycat.je.tree.FileSummaryLN this;
        boolean isInsert, isTransactional, $z0;
        java.lang.AssertionError $r0;
        com.sleepycat.je.log.LogEntryType $r1;

        this := @this: com.sleepycat.je.tree.FileSummaryLN;

        isInsert := @parameter0: boolean;

        isTransactional := @parameter1: boolean;

        $z0 = <com.sleepycat.je.tree.FileSummaryLN: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isTransactional);

        if isTransactional == 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>(java.lang.Object)>("Txnl access to UP db not allowed");

        throw $r0;

     label1:
        $r1 = <com.sleepycat.je.log.LogEntryType: com.sleepycat.je.log.LogEntryType LOG_FILESUMMARYLN>;

        return $r1;
    }

    public static byte[] makePartialKey(long)
    {
        long fileNum;
        byte[] bytes;
        java.nio.ByteBuffer buf;
        int $i0;

        fileNum := @parameter0: long;

        bytes = newarray (byte)[4];

        buf = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(bytes);

        $i0 = (int) fileNum;

        staticinvoke <com.sleepycat.je.log.LogUtils: void writeIntMSB(java.nio.ByteBuffer,int)>(buf, $i0);

        return bytes;
    }

    public void writeToLog(java.nio.ByteBuffer, int, boolean)
    {
        com.sleepycat.je.tree.FileSummaryLN this;
        java.nio.ByteBuffer logBuffer;
        int logVersion;
        boolean forReplication, $z0, $z1;
        com.sleepycat.je.cleaner.TrackedFileSummary $r0, $r2, $r3;
        com.sleepycat.je.cleaner.FileSummary $r1, $r4;
        com.sleepycat.je.cleaner.PackedOffsets $r5;

        this := @this: com.sleepycat.je.tree.FileSummaryLN;

        logBuffer := @parameter0: java.nio.ByteBuffer;

        logVersion := @parameter1: int;

        forReplication := @parameter2: boolean;

        $r0 = this.<com.sleepycat.je.tree.FileSummaryLN: com.sleepycat.je.cleaner.TrackedFileSummary trackedSummary>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label1;

        $z0 = virtualinvoke this.<com.sleepycat.je.tree.FileSummaryLN: boolean isDeleted()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r1 = this.<com.sleepycat.je.tree.FileSummaryLN: com.sleepycat.je.cleaner.FileSummary baseSummary>;

        $r2 = this.<com.sleepycat.je.tree.FileSummaryLN: com.sleepycat.je.cleaner.TrackedFileSummary trackedSummary>;

        virtualinvoke $r1.<com.sleepycat.je.cleaner.FileSummary: void add(com.sleepycat.je.cleaner.FileSummary)>($r2);

        specialinvoke this.<com.sleepycat.je.tree.FileSummaryLN: void getOffsets()>();

        $r3 = this.<com.sleepycat.je.tree.FileSummaryLN: com.sleepycat.je.cleaner.TrackedFileSummary trackedSummary>;

        virtualinvoke $r3.<com.sleepycat.je.cleaner.TrackedFileSummary: void reset()>();

     label1:
        specialinvoke this.<com.sleepycat.je.tree.LN: void writeToLog(java.nio.ByteBuffer,int,boolean)>(logBuffer, logVersion, forReplication);

        $z1 = virtualinvoke this.<com.sleepycat.je.tree.FileSummaryLN: boolean isDeleted()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

        $r4 = this.<com.sleepycat.je.tree.FileSummaryLN: com.sleepycat.je.cleaner.FileSummary baseSummary>;

        virtualinvoke $r4.<com.sleepycat.je.cleaner.FileSummary: void writeToLog(java.nio.ByteBuffer)>(logBuffer);

        $r5 = this.<com.sleepycat.je.tree.FileSummaryLN: com.sleepycat.je.cleaner.PackedOffsets obsoleteOffsets>;

        virtualinvoke $r5.<com.sleepycat.je.cleaner.PackedOffsets: void writeToLog(java.nio.ByteBuffer)>(logBuffer);

     label2:
        return;
    }

    private void getOffsets()
    {
        com.sleepycat.je.tree.FileSummaryLN this;
        long[] offsets;
        int oldSize, newSize, $i0;
        boolean $z0, $z1, $z2;
        java.lang.AssertionError $r0;
        com.sleepycat.je.cleaner.TrackedFileSummary $r1;
        com.sleepycat.je.cleaner.PackedOffsets $r2, $r3, $r4;

        this := @this: com.sleepycat.je.tree.FileSummaryLN;

        $z0 = <com.sleepycat.je.tree.FileSummaryLN: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<com.sleepycat.je.tree.FileSummaryLN: boolean isDeleted()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $z2 = this.<com.sleepycat.je.tree.FileSummaryLN: boolean needOffsets>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label3;

        $r1 = this.<com.sleepycat.je.tree.FileSummaryLN: com.sleepycat.je.cleaner.TrackedFileSummary trackedSummary>;

        offsets = virtualinvoke $r1.<com.sleepycat.je.cleaner.TrackedFileSummary: long[] getObsoleteOffsets()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(offsets);

        if offsets == null goto label2;

        $r2 = this.<com.sleepycat.je.tree.FileSummaryLN: com.sleepycat.je.cleaner.PackedOffsets obsoleteOffsets>;

        oldSize = virtualinvoke $r2.<com.sleepycat.je.cleaner.PackedOffsets: int getExtraMemorySize()>();

        $r3 = this.<com.sleepycat.je.tree.FileSummaryLN: com.sleepycat.je.cleaner.PackedOffsets obsoleteOffsets>;

        virtualinvoke $r3.<com.sleepycat.je.cleaner.PackedOffsets: void pack(long[])>(offsets);

        $r4 = this.<com.sleepycat.je.tree.FileSummaryLN: com.sleepycat.je.cleaner.PackedOffsets obsoleteOffsets>;

        newSize = virtualinvoke $r4.<com.sleepycat.je.cleaner.PackedOffsets: int getExtraMemorySize()>();

        $i0 = newSize - oldSize;

        this.<com.sleepycat.je.tree.FileSummaryLN: int extraMarshaledMemorySize> = $i0;

     label2:
        this.<com.sleepycat.je.tree.FileSummaryLN: boolean needOffsets> = 0;

     label3:
        return;
    }

    public int getLogSize(int, boolean)
    {
        com.sleepycat.je.tree.FileSummaryLN this;
        int logVersion, size#4, $i0, size#12, $i1;
        boolean forReplication, $z0;
        com.sleepycat.je.cleaner.FileSummary $r0;
        com.sleepycat.je.cleaner.PackedOffsets $r1;

        this := @this: com.sleepycat.je.tree.FileSummaryLN;

        logVersion := @parameter0: int;

        forReplication := @parameter1: boolean;

        size#4 = specialinvoke this.<com.sleepycat.je.tree.LN: int getLogSize(int,boolean)>(logVersion, forReplication);

        $z0 = virtualinvoke this.<com.sleepycat.je.tree.FileSummaryLN: boolean isDeleted()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r0 = this.<com.sleepycat.je.tree.FileSummaryLN: com.sleepycat.je.cleaner.FileSummary baseSummary>;

        $i0 = virtualinvoke $r0.<com.sleepycat.je.cleaner.FileSummary: int getLogSize()>();

        size#12 = size#4 + $i0;

        specialinvoke this.<com.sleepycat.je.tree.FileSummaryLN: void getOffsets()>();

        $r1 = this.<com.sleepycat.je.tree.FileSummaryLN: com.sleepycat.je.cleaner.PackedOffsets obsoleteOffsets>;

        $i1 = virtualinvoke $r1.<com.sleepycat.je.cleaner.PackedOffsets: int getLogSize()>();

        size#4 = size#12 + $i1;

     label1:
        return size#4;
    }

    public long getMemorySizeIncludedByParent()
    {
        com.sleepycat.je.tree.FileSummaryLN this;
        int $i0, $i2, $i3, $i6;
        long $l1, $l4, $l5, $l7, $l8;
        com.sleepycat.je.cleaner.PackedOffsets $r0;

        this := @this: com.sleepycat.je.tree.FileSummaryLN;

        $l1 = specialinvoke this.<com.sleepycat.je.tree.LN: long getMemorySizeIncludedByParent()>();

        $i2 = <com.sleepycat.je.dbi.MemoryBudget: int FILESUMMARYLN_OVERHEAD>;

        $i0 = <com.sleepycat.je.dbi.MemoryBudget: int LN_OVERHEAD>;

        $i3 = $i2 - $i0;

        $l4 = (long) $i3;

        $l5 = $l1 + $l4;

        $r0 = this.<com.sleepycat.je.tree.FileSummaryLN: com.sleepycat.je.cleaner.PackedOffsets obsoleteOffsets>;

        $i6 = virtualinvoke $r0.<com.sleepycat.je.cleaner.PackedOffsets: int getExtraMemorySize()>();

        $l7 = (long) $i6;

        $l8 = $l5 + $l7;

        return $l8;
    }

    void makeDeleted()
    {
        com.sleepycat.je.tree.FileSummaryLN this;
        com.sleepycat.je.cleaner.PackedOffsets $r0;

        this := @this: com.sleepycat.je.tree.FileSummaryLN;

        specialinvoke this.<com.sleepycat.je.tree.LN: void makeDeleted()>();

        $r0 = new com.sleepycat.je.cleaner.PackedOffsets;

        specialinvoke $r0.<com.sleepycat.je.cleaner.PackedOffsets: void <init>()>();

        this.<com.sleepycat.je.tree.FileSummaryLN: com.sleepycat.je.cleaner.PackedOffsets obsoleteOffsets> = $r0;

        return;
    }

    public void postFetchInit(com.sleepycat.je.dbi.DatabaseImpl, long) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.tree.FileSummaryLN this;
        com.sleepycat.je.dbi.DatabaseImpl db;
        long sourceLsn;
        int $i0;
        com.sleepycat.je.dbi.EnvironmentImpl $r0;
        com.sleepycat.je.cleaner.Cleaner $r1;
        boolean $z0;
        com.sleepycat.je.cleaner.PackedOffsets $r2;

        this := @this: com.sleepycat.je.tree.FileSummaryLN;

        db := @parameter0: com.sleepycat.je.dbi.DatabaseImpl;

        sourceLsn := @parameter1: long;

        specialinvoke this.<com.sleepycat.je.tree.LN: void postFetchInit(com.sleepycat.je.dbi.DatabaseImpl,long)>(db, sourceLsn);

        $i0 = this.<com.sleepycat.je.tree.FileSummaryLN: int entryVersion>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 1 goto label1;

        $r0 = virtualinvoke db.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r1 = virtualinvoke $r0.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.cleaner.Cleaner getCleaner()>();

        $z0 = virtualinvoke $r1.<com.sleepycat.je.cleaner.Cleaner: boolean isRMWFixEnabled()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r2 = new com.sleepycat.je.cleaner.PackedOffsets;

        specialinvoke $r2.<com.sleepycat.je.cleaner.PackedOffsets: void <init>()>();

        this.<com.sleepycat.je.tree.FileSummaryLN: com.sleepycat.je.cleaner.PackedOffsets obsoleteOffsets> = $r2;

     label1:
        return;
    }

    public java.lang.String dumpString(int, boolean)
    {
        com.sleepycat.je.tree.FileSummaryLN this;
        int nSpaces;
        boolean dumpTags, $z0;
        java.lang.StringBuilder sb, $r0;
        java.lang.String $r1, $r5, $r8, $r10;
        com.sleepycat.je.cleaner.FileSummary $r4;
        com.sleepycat.je.cleaner.PackedOffsets $r7;

        this := @this: com.sleepycat.je.tree.FileSummaryLN;

        nSpaces := @parameter0: int;

        dumpTags := @parameter1: boolean;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        sb = $r0;

        $r1 = specialinvoke this.<com.sleepycat.je.tree.LN: java.lang.String dumpString(int,boolean)>(nSpaces, dumpTags);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $z0 = virtualinvoke this.<com.sleepycat.je.tree.FileSummaryLN: boolean isDeleted()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r4 = this.<com.sleepycat.je.tree.FileSummaryLN: com.sleepycat.je.cleaner.FileSummary baseSummary>;

        $r5 = virtualinvoke $r4.<com.sleepycat.je.cleaner.FileSummary: java.lang.String toString()>();

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = this.<com.sleepycat.je.tree.FileSummaryLN: com.sleepycat.je.cleaner.PackedOffsets obsoleteOffsets>;

        $r8 = virtualinvoke $r7.<com.sleepycat.je.cleaner.PackedOffsets: java.lang.String toString()>();

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

     label1:
        $r10 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public java.lang.String beginTag()
    {
        com.sleepycat.je.tree.FileSummaryLN this;

        this := @this: com.sleepycat.je.tree.FileSummaryLN;

        return "<fileSummaryLN>";
    }

    public java.lang.String endTag()
    {
        com.sleepycat.je.tree.FileSummaryLN this;

        this := @this: com.sleepycat.je.tree.FileSummaryLN;

        return "</fileSummaryLN>";
    }


