    public static long logEntry(berkeley.com.sleepycat.je.log.entry.INLogEntry, berkeley.com.sleepycat.je.log.Provisional, boolean, berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.log.entry.INLogEntry logEntry;
        berkeley.com.sleepycat.je.log.Provisional provisional;
        boolean backgroundIO;
        berkeley.com.sleepycat.je.tree.IN parent;
        long $l0;

        logEntry := @parameter0: berkeley.com.sleepycat.je.log.entry.INLogEntry;

        provisional := @parameter1: berkeley.com.sleepycat.je.log.Provisional;

        backgroundIO := @parameter2: boolean;

        parent := @parameter3: berkeley.com.sleepycat.je.tree.IN;

        $l0 = staticinvoke <berkeley.com.sleepycat.je.tree.IN: long logInternal(berkeley.com.sleepycat.je.tree.IN,berkeley.com.sleepycat.je.log.entry.INLogEntry,boolean,boolean,berkeley.com.sleepycat.je.log.Provisional,boolean,berkeley.com.sleepycat.je.tree.IN)>(null, logEntry, 1, 0, provisional, backgroundIO, parent);

        return $l0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep $r1;
        java.util.logging.Level $r2;

        $r0 = class "berkeley/com/sleepycat/je/tree/IN";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled> = $z1;

        $r1 = new berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep;

        specialinvoke $r1.<berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep: void <init>(int,boolean)>(3, 1);

        <berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep EMPTY_OFFHEAP_BIN_IDS> = $r1;

        $r2 = <java.util.logging.Level: java.util.logging.Level INFO>;

        <berkeley.com.sleepycat.je.tree.IN: java.util.logging.Level traceLevel> = $r2;

        <berkeley.com.sleepycat.je.tree.IN: int ACCUMULATED_LIMIT> = 1000;

        return;
    }

    private static long logInternal(berkeley.com.sleepycat.je.tree.IN, berkeley.com.sleepycat.je.log.entry.INLogEntry, boolean, boolean, berkeley.com.sleepycat.je.log.Provisional, boolean, berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.tree.IN node, parent;
        boolean allowDeltas, allowCompress, backgroundIO, countObsoleteNow, isBin, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, isDelta#51, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        berkeley.com.sleepycat.je.log.Provisional provisional, $r5;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl dbImpl, $r4;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        berkeley.com.sleepycat.je.tree.BIN bin, $r6;
        berkeley.com.sleepycat.je.log.LogParams params, tmp$1275373423;
        long oldLsn, auxOldLsn, $l1, $l2, $l3, $l4, $l5;
        berkeley.com.sleepycat.je.log.LogItem item;
        berkeley.com.sleepycat.je.evictor.Evictor evictor;
        berkeley.com.sleepycat.je.log.entry.INLogEntry logEntry#1, $r8, tmp$856278732, tmp$1774769572;
        int $i0;
        berkeley.com.sleepycat.je.log.ReplicationContext $r12;
        berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo $r14;
        berkeley.com.sleepycat.je.log.LogManager $r15;
        java.lang.AssertionError tmp$23826942, tmp$903580297, tmp$397560391, tmp$1353713806, tmp$1098787257, tmp$1207228264;
        berkeley.com.sleepycat.je.log.entry.BINDeltaLogEntry tmp$437276659;

        node := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        logEntry#1 := @parameter1: berkeley.com.sleepycat.je.log.entry.INLogEntry;

        allowDeltas := @parameter2: boolean;

        allowCompress := @parameter3: boolean;

        provisional := @parameter4: berkeley.com.sleepycat.je.log.Provisional;

        backgroundIO := @parameter5: boolean;

        parent := @parameter6: berkeley.com.sleepycat.je.tree.IN;

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        if node == null goto label01;

        $z1 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: boolean isLatchExclusiveOwner()>();

        if $z1 != 0 goto label01;

        tmp$23826942 = new java.lang.AssertionError;

        specialinvoke tmp$23826942.<java.lang.AssertionError: void <init>()>();

        throw tmp$23826942;

     label01:
        $z2 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z2 != 0 goto label02;

        if parent == null goto label02;

        $z3 = virtualinvoke parent.<berkeley.com.sleepycat.je.tree.IN: boolean isLatchExclusiveOwner()>();

        if $z3 != 0 goto label02;

        tmp$903580297 = new java.lang.AssertionError;

        specialinvoke tmp$903580297.<java.lang.AssertionError: void <init>()>();

        throw tmp$903580297;

     label02:
        $z4 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z4 != 0 goto label03;

        if node != null goto label03;

        if parent != null goto label03;

        tmp$397560391 = new java.lang.AssertionError;

        specialinvoke tmp$397560391.<java.lang.AssertionError: void <init>()>();

        throw tmp$397560391;

     label03:
        $z5 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z5 != 0 goto label08;

        if node != null goto label04;

        $z6 = 1;

        goto label05;

     label04:
        $z6 = 0;

     label05:
        if logEntry#1 != null goto label06;

        $z7 = 1;

        goto label07;

     label06:
        $z7 = 0;

     label07:
        if $z6 != $z7 goto label08;

        tmp$1353713806 = new java.lang.AssertionError;

        specialinvoke tmp$1353713806.<java.lang.AssertionError: void <init>()>();

        throw tmp$1353713806;

     label08:
        if node == null goto label09;

        $r4 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        goto label10;

     label09:
        $r4 = virtualinvoke parent.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

     label10:
        dbImpl = $r4;

        envImpl = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r5 = <berkeley.com.sleepycat.je.log.Provisional: berkeley.com.sleepycat.je.log.Provisional YES>;

        if provisional != $r5 goto label11;

        $z8 = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isTemporary()>();

        if $z8 == 0 goto label12;

     label11:
        $z9 = 1;

        goto label13;

     label12:
        $z9 = 0;

     label13:
        countObsoleteNow = $z9;

        if node == null goto label14;

        $z10 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        goto label16;

     label14:
        $i0 = virtualinvoke parent.<berkeley.com.sleepycat.je.tree.IN: int getNormalizedLevel()>();

        if $i0 != 2 goto label15;

        $z10 = 1;

        goto label16;

     label15:
        $z10 = 0;

     label16:
        isBin = $z10;

        if node == null goto label17;

        if isBin == 0 goto label17;

        $r6 = (berkeley.com.sleepycat.je.tree.BIN) node;

        goto label18;

     label17:
        $r6 = null;

     label18:
        bin = $r6;

        if isBin == 0 goto label29;

        if logEntry#1 == null goto label19;

        isDelta#51 = virtualinvoke logEntry#1.<berkeley.com.sleepycat.je.log.entry.INLogEntry: boolean isBINDelta()>();

        goto label31;

     label19:
        if allowCompress == 0 goto label20;

        virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void lazyCompress(berkeley.com.sleepycat.je.tree.IN,boolean)>(bin, 0);

     label20:
        $z11 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        if $z11 != 0 goto label21;

        if allowDeltas == 0 goto label22;

        $z12 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: boolean shouldLogDelta()>();

        if $z12 == 0 goto label22;

     label21:
        $z13 = 1;

        goto label23;

     label22:
        $z13 = 0;

     label23:
        isDelta#51 = $z13;

        $z14 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z14 != 0 goto label24;

        if isDelta#51 == 0 goto label24;

        $z15 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: boolean isDeltaProhibited()>();

        if $z15 == 0 goto label24;

        tmp$1098787257 = new java.lang.AssertionError;

        specialinvoke tmp$1098787257.<java.lang.AssertionError: void <init>()>();

        throw tmp$1098787257;

     label24:
        if allowCompress == 0 goto label25;

        if isDelta#51 != 0 goto label25;

        virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void lazyCompress(berkeley.com.sleepycat.je.tree.IN,boolean)>(bin, 1);

     label25:
        $z16 = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isDeferredWriteMode()>();

        if $z16 == 0 goto label26;

        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void logDirtyChildren()>();

     label26:
        if isDelta#51 == 0 goto label27;

        tmp$437276659 = new berkeley.com.sleepycat.je.log.entry.BINDeltaLogEntry;

        $r8 = tmp$437276659;

        specialinvoke tmp$437276659.<berkeley.com.sleepycat.je.log.entry.BINDeltaLogEntry: void <init>(berkeley.com.sleepycat.je.tree.BIN)>(bin);

        goto label28;

     label27:
        tmp$856278732 = new berkeley.com.sleepycat.je.log.entry.INLogEntry;

        $r8 = tmp$856278732;

        specialinvoke tmp$856278732.<berkeley.com.sleepycat.je.log.entry.INLogEntry: void <init>(berkeley.com.sleepycat.je.tree.IN)>(bin);

     label28:
        logEntry#1 = $r8;

        goto label31;

     label29:
        $z17 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z17 != 0 goto label30;

        if node != null goto label30;

        tmp$1207228264 = new java.lang.AssertionError;

        specialinvoke tmp$1207228264.<java.lang.AssertionError: void <init>()>();

        throw tmp$1207228264;

     label30:
        isDelta#51 = 0;

        tmp$1774769572 = new berkeley.com.sleepycat.je.log.entry.INLogEntry;

        specialinvoke tmp$1774769572.<berkeley.com.sleepycat.je.log.entry.INLogEntry: void <init>(berkeley.com.sleepycat.je.tree.IN)>(node);

        logEntry#1 = tmp$1774769572;

     label31:
        tmp$1275373423 = new berkeley.com.sleepycat.je.log.LogParams;

        specialinvoke tmp$1275373423.<berkeley.com.sleepycat.je.log.LogParams: void <init>()>();

        params = tmp$1275373423;

        params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.log.entry.LogEntry entry> = logEntry#1;

        params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.log.Provisional provisional> = provisional;

        $r12 = <berkeley.com.sleepycat.je.log.ReplicationContext: berkeley.com.sleepycat.je.log.ReplicationContext NO_REPLICATE>;

        params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.log.ReplicationContext repContext> = $r12;

        params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.dbi.DatabaseImpl nodeDb> = dbImpl;

        params.<berkeley.com.sleepycat.je.log.LogParams: boolean backgroundIO> = backgroundIO;

        if isDelta#51 == 0 goto label32;

        $l1 = -1L;

        goto label33;

     label32:
        $l1 = virtualinvoke logEntry#1.<berkeley.com.sleepycat.je.log.entry.INLogEntry: long getPrevFullLsn()>();

     label33:
        oldLsn = $l1;

        auxOldLsn = virtualinvoke logEntry#1.<berkeley.com.sleepycat.je.log.entry.INLogEntry: long getPrevDeltaLsn()>();

        if countObsoleteNow == 0 goto label36;

        params.<berkeley.com.sleepycat.je.log.LogParams: long oldLsn> = oldLsn;

        params.<berkeley.com.sleepycat.je.log.LogParams: long auxOldLsn> = auxOldLsn;

        if node == null goto label34;

        $r14 = node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo provisionalObsolete>;

        goto label35;

     label34:
        $r14 = null;

     label35:
        params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo packedObsoleteInfo> = $r14;

     label36:
        $r15 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.log.LogManager getLogManager()>();

        item = virtualinvoke $r15.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.LogItem log(berkeley.com.sleepycat.je.log.LogParams)>(params);

        if node == null goto label37;

        virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: void setDirty(boolean)>(0);

     label37:
        if countObsoleteNow == 0 goto label38;

        if node == null goto label39;

        specialinvoke node.<berkeley.com.sleepycat.je.tree.IN: void discardProvisionalObsolete()>();

        goto label39;

     label38:
        if parent == null goto label39;

        virtualinvoke parent.<berkeley.com.sleepycat.je.tree.IN: void trackProvisionalObsolete(berkeley.com.sleepycat.je.tree.IN,long)>(node, oldLsn);

        virtualinvoke parent.<berkeley.com.sleepycat.je.tree.IN: void trackProvisionalObsolete(berkeley.com.sleepycat.je.tree.IN,long)>(node, auxOldLsn);

     label39:
        if bin == null goto label42;

        if isDelta#51 == 0 goto label40;

        $l2 = item.<berkeley.com.sleepycat.je.log.LogItem: long lsn>;

        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void setLastDeltaLsn(long)>($l2);

        goto label41;

     label40:
        $l3 = item.<berkeley.com.sleepycat.je.log.LogItem: long lsn>;

        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void setLastFullLsn(long)>($l3);

        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void setLastDeltaLsn(long)>(-1L);

     label41:
        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void setProhibitNextDelta(boolean)>(0);

        goto label43;

     label42:
        if node == null goto label43;

        $l4 = item.<berkeley.com.sleepycat.je.log.LogItem: long lsn>;

        virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: void setLastFullLsn(long)>($l4);

     label43:
        evictor = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.evictor.Evictor getEvictor()>();

        if node == null goto label44;

        $z18 = virtualinvoke evictor.<berkeley.com.sleepycat.je.evictor.Evictor: boolean getUseDirtyLRUSet()>();

        if $z18 == 0 goto label44;

        virtualinvoke evictor.<berkeley.com.sleepycat.je.evictor.Evictor: void moveToPri1LRU(berkeley.com.sleepycat.je.tree.IN)>(node);

     label44:
        $l5 = item.<berkeley.com.sleepycat.je.log.LogItem: long lsn>;

        return $l5;
    }

    public boolean hasCachedChildren()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        boolean $z0, $z1;
        java.lang.AssertionError $r0;
        int i#7, $i0;
        berkeley.com.sleepycat.je.tree.INTargetRep $r1;
        java.lang.Object $r2;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isLatchOwner()>();

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        i#7 = 0;

     label2:
        $i0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: int getNEntries()>();

        if i#7 >= $i0 goto label4;

        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets>;

        $r2 = virtualinvoke $r1.<berkeley.com.sleepycat.je.tree.INTargetRep: java.lang.Object get(int)>(i#7);

        if $r2 == null goto label3;

        return 1;

     label3:
        i#7 = i#7 + 1;

        goto label2;

     label4:
        return 0;
    }

    public final boolean isBINDelta()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        boolean $z0, $z1, $z2, $z3;
        java.lang.AssertionError $r0;
        int $i0, $i1;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isUpperIN()>();

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isLatchOwner()>();

        if $z2 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int flags>;

        $i1 = $i0 & 32;

        if $i1 == 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public final berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r0;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r1;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        return $r1;
    }

    public boolean getProhibitNextDelta()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int $i0, $i1;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int flags>;

        $i1 = $i0 & 512;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final int getLogSize(boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        boolean deltasOnly, haveVLSNCache, compactLsnsRep, $z0, $z1, $z2, haveExpiration#12, $z3, $z4, $z5, $z6, $z7;
        berkeley.com.sleepycat.je.tree.BIN bin, $r0;
        int base, nEntriesToWrite, maxEntriesToWrite, size#10, $i0, $i2, size#28, $i3, size#34, $i4, size#42, $i5, $i6, size#55, $i7, $i8, size#61, $i9, size#66, $i10, size#73, i#76, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i20, $i21, $i22, $i23, $i24, size#129, $i25, $i26, size#135, $i27;
        long $l1, $l19;
        byte[] $r1, $r2, $r3, $r7;
        long[] $r4;
        berkeley.com.sleepycat.je.tree.INKeyRep $r5;
        java.lang.Object $r6;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        deltasOnly := @parameter0: boolean;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z0 == 0 goto label01;

        $r0 = (berkeley.com.sleepycat.je.tree.BIN) this;

        goto label02;

     label01:
        $r0 = null;

     label02:
        bin = $r0;

        if bin == null goto label03;

        $z1 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: boolean isVLSNCachingEnabled()>();

        if $z1 == 0 goto label03;

        $z2 = 1;

        goto label04;

     label03:
        $z2 = 0;

     label04:
        haveVLSNCache = $z2;

        size#10 = 0;

        haveExpiration#12 = 0;

        if bin == null goto label07;

        base = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: int getExpirationBase()>();

        if base == -1 goto label05;

        $z3 = 1;

        goto label06;

     label05:
        $z3 = 0;

     label06:
        haveExpiration#12 = $z3;

        $i0 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int getPackedIntLogSize(int)>(base);

        size#10 = size#10 + $i0;

     label07:
        $l1 = this.<berkeley.com.sleepycat.je.tree.IN: long nodeId>;

        $i2 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int getPackedLongLogSize(long)>($l1);

        size#28 = size#10 + $i2;

        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] identifierKey>;

        $i3 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int getByteArrayLogSize(byte[])>($r1);

        size#34 = size#28 + $i3;

        $r2 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] keyPrefix>;

        if $r2 == null goto label08;

        $r3 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] keyPrefix>;

        $i4 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int getByteArrayLogSize(byte[])>($r3);

        size#34 = size#34 + $i4;

     label08:
        size#42 = size#34 + 1;

        nEntriesToWrite = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: int getNEntriesToWrite(boolean)>(deltasOnly);

        if deltasOnly != 0 goto label09;

        $i5 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: int getMaxEntries()>();

        goto label10;

     label09:
        $i5 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: int getDeltaCapacity(int)>(nEntriesToWrite);

     label10:
        maxEntriesToWrite = $i5;

        $i6 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int getPackedIntLogSize(int)>(nEntriesToWrite);

        size#55 = size#42 + $i6;

        $i7 = this.<berkeley.com.sleepycat.je.tree.IN: int level>;

        $i8 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int getPackedIntLogSize(int)>($i7);

        size#61 = size#55 + $i8;

        $i9 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int getPackedIntLogSize(int)>(maxEntriesToWrite);

        size#66 = size#61 + $i9;

        $r4 = this.<berkeley.com.sleepycat.je.tree.IN: long[] entryLsnLongArray>;

        if $r4 != null goto label11;

        $z4 = 1;

        goto label12;

     label11:
        $z4 = 0;

     label12:
        compactLsnsRep = $z4;

        $i10 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int getBooleanLogSize()>();

        size#73 = size#66 + $i10;

        if compactLsnsRep == 0 goto label13;

        size#73 = size#73 + 4;

     label13:
        i#76 = 0;

     label14:
        $i11 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        if i#76 >= $i11 goto label21;

        if deltasOnly == 0 goto label15;

        $z5 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isDirty(int)>(i#76);

        if $z5 != 0 goto label15;

        goto label20;

     label15:
        $i12 = size#73;

        $r5 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $r6 = virtualinvoke $r5.<berkeley.com.sleepycat.je.tree.INKeyRep: java.lang.Object get(int)>(i#76);

        $r7 = (byte[]) $r6;

        $i13 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int getByteArrayLogSize(byte[])>($r7);

        if compactLsnsRep == 0 goto label16;

        $i14 = 4;

        goto label17;

     label16:
        $i14 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int getLongLogSize()>();

     label17:
        $i15 = $i13 + $i14;

        $i16 = $i15 + 1;

        size#73 = $i12 + $i16;

        $z6 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isLastLoggedSizeStored(int)>(i#76);

        if $z6 == 0 goto label18;

        $i17 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: int getLastLoggedSize(int)>(i#76);

        $i18 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int getPackedIntLogSize(int)>($i17);

        size#73 = size#73 + $i18;

     label18:
        if haveVLSNCache == 0 goto label19;

        $z7 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isEmbeddedLN(int)>(i#76);

        if $z7 == 0 goto label19;

        $l19 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: long getCachedVLSN(int)>(i#76);

        $i20 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int getPackedLongLogSize(long)>($l19);

        size#73 = size#73 + $i20;

     label19:
        if haveExpiration#12 == 0 goto label20;

        $i21 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: int getExpirationOffset(int)>(i#76);

        $i22 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int getPackedIntLogSize(int)>($i21);

        size#73 = size#73 + $i22;

     label20:
        i#76 = i#76 + 1;

        goto label14;

     label21:
        if deltasOnly == 0 goto label22;

        $i23 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: int getFullBinNEntries()>();

        $i24 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int getPackedIntLogSize(int)>($i23);

        size#129 = size#73 + $i24;

        $i25 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: int getFullBinMaxEntries()>();

        $i26 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int getPackedIntLogSize(int)>($i25);

        size#135 = size#129 + $i26;

        $i27 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: int getBloomFilterLogSize()>();

        size#73 = size#135 + $i27;

     label22:
        return size#73;
    }

    public final long getLastFullLsn()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $l0 = this.<berkeley.com.sleepycat.je.tree.IN: long lastFullVersion>;

        return $l0;
    }

    public final void serialize(java.nio.ByteBuffer, boolean, boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        java.nio.ByteBuffer logBuffer;
        boolean deltasOnly, clearDirtyBits, hasKeyPrefix, mayHaveLastLoggedSize, haveVLSNCache, compactLsnsRep, $z0, $z1, $z2, haveExpiration#15, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17;
        berkeley.com.sleepycat.je.tree.BIN bin, $r1;
        byte[] bloomFilter, $r2, $r3, $r4, $r6, $r10, $r31, $r33;
        int base, nEntriesToWrite, maxEntriesToWrite, offset, fileOffset, $i16, $i17, $i19, i#108, $i20, $i23, $i25, $i26, $i28, $i29, $i39, $i41, $i42, $i43;
        java.lang.AssertionError $r0, $r11;
        long $l0, $l18, $l21, $l31, $l40;
        byte booleans#43, $b2, $b3, booleans#49, $b5, $b6, booleans#55, $b8, $b9, booleans#61, $b11, $b12, booleans#67, $b14, $b15, booleans#74, $b22, $b24, $b27, $b30, $b32, $b33, $b34, $b36, $b37, $b38;
        long[] $r7, $r30;
        berkeley.com.sleepycat.je.tree.INKeyRep $r8;
        java.lang.Object $r9;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r18, $r19, $r21, $r22, $r24;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r16, $r20, $r23;
        java.lang.String $r17, $r25;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        logBuffer := @parameter0: java.nio.ByteBuffer;

        deltasOnly := @parameter1: boolean;

        clearDirtyBits := @parameter2: boolean;

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        if deltasOnly == 0 goto label01;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z1 != 0 goto label01;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label01:
        $z2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z2 == 0 goto label02;

        $r1 = (berkeley.com.sleepycat.je.tree.BIN) this;

        goto label03;

     label02:
        $r1 = null;

     label03:
        bin = $r1;

        if deltasOnly == 0 goto label04;

        $r2 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: byte[] createBloomFilter()>();

        goto label05;

     label04:
        $r2 = null;

     label05:
        bloomFilter = $r2;

        haveExpiration#15 = 0;

        if bin == null goto label08;

        base = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: int getExpirationBase()>();

        if base == -1 goto label06;

        $z3 = 1;

        goto label07;

     label06:
        $z3 = 0;

     label07:
        haveExpiration#15 = $z3;

        staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: void writePackedInt(java.nio.ByteBuffer,int)>(logBuffer, base);

     label08:
        $l0 = this.<berkeley.com.sleepycat.je.tree.IN: long nodeId>;

        staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: void writePackedLong(java.nio.ByteBuffer,long)>(logBuffer, $l0);

        $r3 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] identifierKey>;

        staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: void writeByteArray(java.nio.ByteBuffer,byte[])>(logBuffer, $r3);

        $r4 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] keyPrefix>;

        if $r4 == null goto label09;

        $z4 = 1;

        goto label10;

     label09:
        $z4 = 0;

     label10:
        hasKeyPrefix = $z4;

        mayHaveLastLoggedSize = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean mayHaveLastLoggedSizeStored()>();

        if bin == null goto label11;

        $z5 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: boolean isVLSNCachingEnabled()>();

        if $z5 == 0 goto label11;

        $z6 = 1;

        goto label12;

     label11:
        $z6 = 0;

     label12:
        haveVLSNCache = $z6;

        $z7 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isRoot()>();

        if $z7 == 0 goto label13;

        $z8 = 1;

        goto label14;

     label13:
        $z8 = 0;

     label14:
        booleans#43 = (byte) $z8;

        if hasKeyPrefix == 0 goto label15;

        $b2 = 2;

        goto label16;

     label15:
        $b2 = 0;

     label16:
        $b3 = booleans#43 | $b2;

        booleans#49 = (byte) $b3;

        if mayHaveLastLoggedSize == 0 goto label17;

        $b5 = 4;

        goto label18;

     label17:
        $b5 = 0;

     label18:
        $b6 = booleans#49 | $b5;

        booleans#55 = (byte) $b6;

        if bloomFilter == null goto label19;

        $b8 = 8;

        goto label20;

     label19:
        $b8 = 0;

     label20:
        $b9 = booleans#55 | $b8;

        booleans#61 = (byte) $b9;

        if haveVLSNCache == 0 goto label21;

        $b11 = 16;

        goto label22;

     label21:
        $b11 = 0;

     label22:
        $b12 = booleans#61 | $b11;

        booleans#67 = (byte) $b12;

        $z9 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isExpirationInHours()>();

        if $z9 == 0 goto label23;

        $b14 = 32;

        goto label24;

     label23:
        $b14 = 0;

     label24:
        $b15 = booleans#67 | $b14;

        booleans#74 = (byte) $b15;

        virtualinvoke logBuffer.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(booleans#74);

        if hasKeyPrefix == 0 goto label25;

        $r6 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] keyPrefix>;

        staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: void writeByteArray(java.nio.ByteBuffer,byte[])>(logBuffer, $r6);

     label25:
        nEntriesToWrite = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: int getNEntriesToWrite(boolean)>(deltasOnly);

        if deltasOnly != 0 goto label26;

        $i16 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: int getMaxEntries()>();

        goto label27;

     label26:
        $i16 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: int getDeltaCapacity(int)>(nEntriesToWrite);

     label27:
        maxEntriesToWrite = $i16;

        staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: void writePackedInt(java.nio.ByteBuffer,int)>(logBuffer, nEntriesToWrite);

        $i17 = this.<berkeley.com.sleepycat.je.tree.IN: int level>;

        staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: void writePackedInt(java.nio.ByteBuffer,int)>(logBuffer, $i17);

        staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: void writePackedInt(java.nio.ByteBuffer,int)>(logBuffer, maxEntriesToWrite);

        $r7 = this.<berkeley.com.sleepycat.je.tree.IN: long[] entryLsnLongArray>;

        if $r7 != null goto label28;

        $z10 = 1;

        goto label29;

     label28:
        $z10 = 0;

     label29:
        compactLsnsRep = $z10;

        staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: void writeBoolean(java.nio.ByteBuffer,boolean)>(logBuffer, compactLsnsRep);

        if compactLsnsRep == 0 goto label30;

        $l18 = this.<berkeley.com.sleepycat.je.tree.IN: long baseFileNumber>;

        $i19 = (int) $l18;

        staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: void writeInt(java.nio.ByteBuffer,int)>(logBuffer, $i19);

     label30:
        i#108 = 0;

     label31:
        $i20 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        if i#108 >= $i20 goto label40;

        if deltasOnly == 0 goto label32;

        $z11 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isDirty(int)>(i#108);

        if $z11 != 0 goto label32;

        goto label39;

     label32:
        $r8 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $r9 = virtualinvoke $r8.<berkeley.com.sleepycat.je.tree.INKeyRep: java.lang.Object get(int)>(i#108);

        $r10 = (byte[]) $r9;

        staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: void writeByteArray(java.nio.ByteBuffer,byte[])>(logBuffer, $r10);

        $z12 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z12 != 0 goto label33;

        $z13 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean checkForNullLSN(int)>(i#108);

        if $z13 != 0 goto label33;

        $r11 = new java.lang.AssertionError;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("logging IN ");

        $l21 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getNodeId()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l21);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with null lsn child  db=");

        $r16 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $r17 = virtualinvoke $r16.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: java.lang.String getDebugName()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isDeferredWriteMode=");

        $r20 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $z14 = virtualinvoke $r20.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isDeferredWriteMode()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z14);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isTemporary=");

        $r23 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $z15 = virtualinvoke $r23.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isTemporary()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z15);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>($r25);

        throw $r11;

     label33:
        if compactLsnsRep == 0 goto label34;

        offset = i#108 << 2;

        fileOffset = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: int getFileOffset(int)>(offset);

        $b22 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: byte getFileNumberOffset(int)>(offset);

        virtualinvoke logBuffer.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b22);

        $i23 = fileOffset & 255;

        $b24 = (byte) $i23;

        virtualinvoke logBuffer.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b24);

        $i25 = fileOffset >>> 8;

        $i26 = $i25 & 255;

        $b27 = (byte) $i26;

        virtualinvoke logBuffer.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b27);

        $i28 = fileOffset >>> 16;

        $i29 = $i28 & 255;

        $b30 = (byte) $i29;

        virtualinvoke logBuffer.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b30);

        goto label35;

     label34:
        $r30 = this.<berkeley.com.sleepycat.je.tree.IN: long[] entryLsnLongArray>;

        $l31 = $r30[i#108];

        staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: void writeLong(java.nio.ByteBuffer,long)>(logBuffer, $l31);

     label35:
        $r31 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $b32 = $r31[i#108];

        $b33 = $b32 & -69;

        $b34 = (byte) $b33;

        virtualinvoke logBuffer.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b34);

        if clearDirtyBits == 0 goto label36;

        $r33 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $b36 = $r33[i#108];

        $b37 = $b36 & -3;

        $b38 = (byte) $b37;

        $r33[i#108] = $b38;

     label36:
        $z16 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isLastLoggedSizeStored(int)>(i#108);

        if $z16 == 0 goto label37;

        $i39 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: int getLastLoggedSize(int)>(i#108);

        staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: void writePackedInt(java.nio.ByteBuffer,int)>(logBuffer, $i39);

     label37:
        if haveVLSNCache == 0 goto label38;

        $z17 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isEmbeddedLN(int)>(i#108);

        if $z17 == 0 goto label38;

        $l40 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: long getCachedVLSN(int)>(i#108);

        staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: void writePackedLong(java.nio.ByteBuffer,long)>(logBuffer, $l40);

     label38:
        if haveExpiration#15 == 0 goto label39;

        $i41 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: int getExpirationOffset(int)>(i#108);

        staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: void writePackedInt(java.nio.ByteBuffer,int)>(logBuffer, $i41);

     label39:
        i#108 = i#108 + 1;

        goto label31;

     label40:
        if deltasOnly == 0 goto label41;

        $i42 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: int getFullBinNEntries()>();

        staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: void writePackedInt(java.nio.ByteBuffer,int)>(logBuffer, $i42);

        $i43 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: int getFullBinMaxEntries()>();

        staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: void writePackedInt(java.nio.ByteBuffer,int)>(logBuffer, $i43);

        if bloomFilter == null goto label41;

        staticinvoke <berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter: void writeToLog(byte[],java.nio.ByteBuffer)>(bloomFilter, logBuffer);

     label41:
        return;
    }

    public final boolean isRoot()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int $i0, $i1;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int flags>;

        $i1 = $i0 & 4;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isExpirationInHours()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int $i0, $i1;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int flags>;

        $i1 = $i0 & 1024;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private int getNEntriesToWrite(boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        boolean deltasOnly;
        int $i0, $i1;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        deltasOnly := @parameter0: boolean;

        if deltasOnly != 0 goto label1;

        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        return $i0;

     label1:
        $i1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: int getNDeltas()>();

        return $i1;
    }

    public int getMaxEntries()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        byte[] $r0;
        int $i0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $i0 = lengthof $r0;

        return $i0;
    }

    final boolean isDirty(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx;
        byte[] $r0;
        byte $b0, $b1;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $b0 = $r0[idx];

        $b1 = $b0 & 2;

        if $b1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private boolean checkForNullLSN(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int index;
        boolean $z0, $z1, ok#15, $z2;
        long $l0, $l4;
        byte $b1, $b2, $b3, $b5;
        byte[] $r0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        index := @parameter0: int;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z0 == 0 goto label4;

        $l0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getLsn(int)>(index);

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label1;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $b2 = $r0[index];

        $b3 = $b2 & 1;

        if $b3 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        ok#15 = $z1;

        goto label7;

     label4:
        $l4 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getLsn(int)>(index);

        $b5 = $l4 cmp -1L;

        if $b5 == 0 goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        ok#15 = $z2;

     label7:
        return ok#15;
    }

    public final long getNodeId()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $l0 = this.<berkeley.com.sleepycat.je.tree.IN: long nodeId>;

        return $l0;
    }

    private int getFileOffset(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int offset, $i0, $i1;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        offset := @parameter0: int;

        $i0 = offset + 1;

        $i1 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: int get3ByteInt(int)>($i0);

        return $i1;
    }

    private byte getFileNumberOffset(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int offset;
        byte[] $r0;
        byte $b0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        offset := @parameter0: int;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryLsnByteArray>;

        $b0 = $r0[offset];

        return $b0;
    }

    public final boolean isEmbeddedLN(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx;
        byte[] $r0;
        byte $b0, $b1;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $b0 = $r0[idx];

        $b1 = $b0 & 16;

        if $b1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private int get3ByteInt(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int offset#1, offset#5, offset#14, $i3, ret#21, $i6, ret#32;
        byte[] $r0, $r1, $r2;
        byte $b0, $b1, $b4;
        short ret#9, $s2, $s5;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        offset#1 := @parameter0: int;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryLsnByteArray>;

        offset#5 = offset#1 + 1;

        $b0 = $r0[offset#1];

        ret#9 = $b0 & 255;

        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryLsnByteArray>;

        offset#14 = offset#5 + 1;

        $b1 = $r1[offset#5];

        $s2 = $b1 & 255;

        $i3 = $s2 << 8;

        ret#21 = ret#9 + $i3;

        $r2 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryLsnByteArray>;

        $b4 = $r2[offset#14];

        $s5 = $b4 & 255;

        $i6 = $s5 << 16;

        ret#32 = ret#21 + $i6;

        if ret#32 != 16777215 goto label1;

        ret#32 = -1;

     label1:
        return ret#32;
    }

    public final long getLsn(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx, offset, fileOffset;
        long[] $r0, $r1;
        long $l0, $l2, $l3, $l4, $l5;
        byte $b1;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: long[] entryLsnLongArray>;

        if $r0 != null goto label2;

        offset = idx << 2;

        fileOffset = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: int getFileOffset(int)>(offset);

        if fileOffset != -1 goto label1;

        return -1L;

     label1:
        $l0 = this.<berkeley.com.sleepycat.je.tree.IN: long baseFileNumber>;

        $b1 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: byte getFileNumberOffset(int)>(offset);

        $l2 = (long) $b1;

        $l3 = $l0 + $l2;

        $l4 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long makeLsn(long,int)>($l3, fileOffset);

        return $l4;

     label2:
        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: long[] entryLsnLongArray>;

        $l5 = $r1[idx];

        return $l5;
    }

    public final int getNDeltas()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int n#2, i#4, $i0;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        n#2 = 0;

        i#4 = 0;

     label1:
        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        if i#4 >= $i0 goto label4;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isDirty(int)>(i#4);

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        n#2 = n#2 + 1;

     label3:
        i#4 = i#4 + 1;

        goto label1;

     label4:
        return n#2;
    }

    public final int getNEntries()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int $i0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        return $i0;
    }

    public final boolean haveEmbeddedData(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx;
        boolean $z0, $z1, $z2;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isEmbeddedLN(int)>(idx);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isNoDataLN(int)>(idx);

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public final boolean isNoDataLN(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx;
        byte[] $r0;
        byte $b0, $b1;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $b0 = $r0[idx];

        $b1 = $b0 & 32;

        if $b1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final berkeley.com.sleepycat.je.dbi.DatabaseImpl getDatabase()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        return $r0;
    }

    public final boolean isUpperIN()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        boolean $z0, $z1;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public final boolean isLatchOwner()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.latch.SharedLatch $r0;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.latch.SharedLatch latch>;

        $z0 = interfaceinvoke $r0.<berkeley.com.sleepycat.je.latch.SharedLatch: boolean isOwner()>();

        return $z0;
    }

    public final void materialize(java.nio.ByteBuffer, int, boolean, boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        java.nio.ByteBuffer itemBuffer;
        int entryVersion, base, length, $i7, $i8, $i9, $i10, i#135, $i12, $i16, fileOffset#165, $i19, fileOffset#174, $i26, $i28, $i29, $i30;
        boolean deltasOnly, clearDirtyBits, unpacked, mayHaveLastLoggedSize, hasBloomFilter, haveVLSNCache, $z0, $z1, $z2, $z3, haveExpiration#15, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, compactLsnsRep#122, $z14, $z15, $z16;
        berkeley.com.sleepycat.je.tree.BIN bin, $r1;
        byte booleans, fileNumberOffset, $b1, $b2, $b3, $b4, $b5, $b6, $b13, $b14, $b17, entryState#192, $b22, $b23, $b24, $b25;
        java.lang.AssertionError $r0, $r5, $r6, $r7;
        long $l0, storedBaseFileNumber#104, $l11, lsn#178, $l20, $l21, $l27;
        byte[] $r2, $r4, $r12, $r13, $r15, $r18, $r19;
        berkeley.com.sleepycat.je.tree.INTargetRep$None $r9;
        berkeley.com.sleepycat.je.tree.INKeyRep$Default $r10;
        long[] $r11;
        berkeley.com.sleepycat.je.tree.INKeyRep $r14, $r17;
        java.lang.Object $r16;
        short fileOffset#156, $s15, $s18;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        itemBuffer := @parameter0: java.nio.ByteBuffer;

        entryVersion := @parameter1: int;

        deltasOnly := @parameter2: boolean;

        clearDirtyBits := @parameter3: boolean;

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        if deltasOnly == 0 goto label01;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z1 != 0 goto label01;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label01:
        $z2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z2 == 0 goto label02;

        $r1 = (berkeley.com.sleepycat.je.tree.BIN) this;

        goto label03;

     label02:
        $r1 = null;

     label03:
        bin = $r1;

        if entryVersion >= 6 goto label04;

        $z3 = 1;

        goto label05;

     label04:
        $z3 = 0;

     label05:
        unpacked = $z3;

        haveExpiration#15 = 0;

        if bin == null goto label08;

        if entryVersion < 12 goto label08;

        base = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int readPackedInt(java.nio.ByteBuffer)>(itemBuffer);

        if base == -1 goto label06;

        $z4 = 1;

        goto label07;

     label06:
        $z4 = 0;

     label07:
        haveExpiration#15 = $z4;

        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void setExpirationBase(int)>(base);

     label08:
        $l0 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: long readLong(java.nio.ByteBuffer,boolean)>(itemBuffer, unpacked);

        this.<berkeley.com.sleepycat.je.tree.IN: long nodeId> = $l0;

        $r2 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: byte[] readByteArray(java.nio.ByteBuffer,boolean)>(itemBuffer, unpacked);

        this.<berkeley.com.sleepycat.je.tree.IN: byte[] identifierKey> = $r2;

        booleans = virtualinvoke itemBuffer.<java.nio.ByteBuffer: byte get()>();

        $b1 = booleans & 1;

        if $b1 == 0 goto label09;

        $z5 = 1;

        goto label10;

     label09:
        $z5 = 0;

     label10:
        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setIsRootFlag(boolean)>($z5);

        $b2 = booleans & 2;

        if $b2 == 0 goto label11;

        $r4 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: byte[] readByteArray(java.nio.ByteBuffer,boolean)>(itemBuffer, unpacked);

        this.<berkeley.com.sleepycat.je.tree.IN: byte[] keyPrefix> = $r4;

     label11:
        $b3 = booleans & 4;

        if $b3 == 0 goto label12;

        $z6 = 1;

        goto label13;

     label12:
        $z6 = 0;

     label13:
        mayHaveLastLoggedSize = $z6;

        $z7 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z7 != 0 goto label14;

        if mayHaveLastLoggedSize == 0 goto label14;

        if entryVersion >= 9 goto label14;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label14:
        $b4 = booleans & 8;

        if $b4 == 0 goto label15;

        $z8 = 1;

        goto label16;

     label15:
        $z8 = 0;

     label16:
        hasBloomFilter = $z8;

        $z9 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z9 != 0 goto label18;

        if hasBloomFilter == 0 goto label18;

        if entryVersion < 10 goto label17;

        if deltasOnly != 0 goto label18;

     label17:
        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label18:
        $b5 = booleans & 16;

        if $b5 == 0 goto label19;

        $z10 = 1;

        goto label20;

     label19:
        $z10 = 0;

     label20:
        haveVLSNCache = $z10;

        $z11 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z11 != 0 goto label21;

        if haveVLSNCache == 0 goto label21;

        if entryVersion >= 11 goto label21;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label21:
        $b6 = booleans & 32;

        if $b6 == 0 goto label22;

        $z12 = 1;

        goto label23;

     label22:
        $z12 = 0;

     label23:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setExpirationInHours(boolean)>($z12);

        $i7 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int readInt(java.nio.ByteBuffer,boolean)>(itemBuffer, unpacked);

        this.<berkeley.com.sleepycat.je.tree.IN: int nEntries> = $i7;

        $i8 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int readInt(java.nio.ByteBuffer,boolean)>(itemBuffer, unpacked);

        this.<berkeley.com.sleepycat.je.tree.IN: int level> = $i8;

        length = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int readInt(java.nio.ByteBuffer,boolean)>(itemBuffer, unpacked);

        $r9 = <berkeley.com.sleepycat.je.tree.INTargetRep: berkeley.com.sleepycat.je.tree.INTargetRep$None NONE>;

        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets> = $r9;

        $r10 = new berkeley.com.sleepycat.je.tree.INKeyRep$Default;

        specialinvoke $r10.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: void <init>(int)>(length);

        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys> = $r10;

        this.<berkeley.com.sleepycat.je.tree.IN: long baseFileNumber> = -1L;

        storedBaseFileNumber#104 = -1L;

        $z13 = <berkeley.com.sleepycat.je.tree.IN: boolean disableCompactLsns>;

        if $z13 == 0 goto label24;

        this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryLsnByteArray> = null;

        $r11 = newarray (long)[length];

        this.<berkeley.com.sleepycat.je.tree.IN: long[] entryLsnLongArray> = $r11;

        goto label25;

     label24:
        $i9 = length << 2;

        $r12 = newarray (byte)[$i9];

        this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryLsnByteArray> = $r12;

        this.<berkeley.com.sleepycat.je.tree.IN: long[] entryLsnLongArray> = null;

     label25:
        $r13 = newarray (byte)[length];

        this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates> = $r13;

        compactLsnsRep#122 = 0;

        if entryVersion <= 1 goto label26;

        compactLsnsRep#122 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: boolean readBoolean(java.nio.ByteBuffer)>(itemBuffer);

        if compactLsnsRep#122 == 0 goto label26;

        $i10 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int readInt(java.nio.ByteBuffer)>(itemBuffer);

        $l11 = (long) $i10;

        this.<berkeley.com.sleepycat.je.tree.IN: long baseFileNumber> = $l11;

        storedBaseFileNumber#104 = this.<berkeley.com.sleepycat.je.tree.IN: long baseFileNumber>;

     label26:
        i#135 = 0;

     label27:
        $i12 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        if i#135 >= $i12 goto label38;

        $r14 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $r15 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: byte[] readByteArray(java.nio.ByteBuffer,boolean)>(itemBuffer, unpacked);

        $r16 = virtualinvoke $r14.<berkeley.com.sleepycat.je.tree.INKeyRep: java.lang.Object set(int,java.lang.Object,berkeley.com.sleepycat.je.tree.IN)>(i#135, $r15, this);

        $r17 = (berkeley.com.sleepycat.je.tree.INKeyRep) $r16;

        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys> = $r17;

        if compactLsnsRep#122 == 0 goto label30;

        fileNumberOffset = virtualinvoke itemBuffer.<java.nio.ByteBuffer: byte get()>();

        $b13 = virtualinvoke itemBuffer.<java.nio.ByteBuffer: byte get()>();

        fileOffset#156 = $b13 & 255;

        $b14 = virtualinvoke itemBuffer.<java.nio.ByteBuffer: byte get()>();

        $s15 = $b14 & 255;

        $i16 = $s15 << 8;

        fileOffset#165 = fileOffset#156 | $i16;

        $b17 = virtualinvoke itemBuffer.<java.nio.ByteBuffer: byte get()>();

        $s18 = $b17 & 255;

        $i19 = $s18 << 16;

        fileOffset#174 = fileOffset#165 | $i19;

        if fileOffset#174 != 16777215 goto label28;

        lsn#178 = -1L;

        goto label29;

     label28:
        $l20 = (long) fileNumberOffset;

        $l21 = storedBaseFileNumber#104 + $l20;

        lsn#178 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long makeLsn(long,int)>($l21, fileOffset#174);

     label29:
        goto label31;

     label30:
        lsn#178 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: long readLong(java.nio.ByteBuffer)>(itemBuffer);

     label31:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setLsnInternal(int,long)>(i#135, lsn#178);

        entryState#192 = virtualinvoke itemBuffer.<java.nio.ByteBuffer: byte get()>();

        if clearDirtyBits == 0 goto label32;

        $b22 = entryState#192 & -3;

        entryState#192 = (byte) $b22;

     label32:
        if entryVersion >= 9 goto label33;

        $b23 = entryState#192 & -69;

        entryState#192 = (byte) $b23;

     label33:
        if entryVersion >= 9 goto label34;

        $b24 = lsn#178 cmp -1L;

        if $b24 != 0 goto label34;

        $b25 = entryState#192 | 1;

        entryState#192 = (byte) $b25;

     label34:
        $r18 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $r18[i#135] = entryState#192;

        if mayHaveLastLoggedSize == 0 goto label35;

        $z14 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isEmbeddedLN(int)>(i#135);

        if $z14 != 0 goto label35;

        $i26 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int readPackedInt(java.nio.ByteBuffer)>(itemBuffer);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setLastLoggedSizeUnconditional(int,int)>(i#135, $i26);

     label35:
        if haveVLSNCache == 0 goto label36;

        $z15 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isEmbeddedLN(int)>(i#135);

        if $z15 == 0 goto label36;

        $l27 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: long readPackedLong(java.nio.ByteBuffer)>(itemBuffer);

        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void setCachedVLSNUnconditional(int,long)>(i#135, $l27);

     label36:
        if haveExpiration#15 == 0 goto label37;

        $i28 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int readPackedInt(java.nio.ByteBuffer)>(itemBuffer);

        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void setExpirationOffset(int,int)>(i#135, $i28);

     label37:
        i#135 = i#135 + 1;

        goto label27;

     label38:
        if deltasOnly == 0 goto label39;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setBINDelta(boolean)>(1);

        if entryVersion < 10 goto label39;

        $i29 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int readPackedInt(java.nio.ByteBuffer)>(itemBuffer);

        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void setFullBinNEntries(int)>($i29);

        $i30 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int readPackedInt(java.nio.ByteBuffer)>(itemBuffer);

        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void setFullBinMaxEntries(int)>($i30);

        if hasBloomFilter == 0 goto label39;

        $r19 = staticinvoke <berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter: byte[] readFromLog(java.nio.ByteBuffer,int)>(itemBuffer, entryVersion);

        bin.<berkeley.com.sleepycat.je.tree.BIN: byte[] bloomFilter> = $r19;

     label39:
        if entryVersion >= 8 goto label40;

        $z16 = 1;

        goto label41;

     label40:
        $z16 = 0;

     label41:
        this.<berkeley.com.sleepycat.je.tree.IN: boolean needDupKeyConversion> = $z16;

        return;
    }

    public final void setLastFullLsn(long)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        long lsn;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        lsn := @parameter0: long;

        this.<berkeley.com.sleepycat.je.tree.IN: long lastFullVersion> = lsn;

        return;
    }

    public void setProhibitNextDelta(boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        boolean val, $z0;
        int $i0, $i1, $i2, $i3;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        val := @parameter0: boolean;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        if val == 0 goto label2;

        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int flags>;

        $i1 = $i0 | 512;

        this.<berkeley.com.sleepycat.je.tree.IN: int flags> = $i1;

        goto label3;

     label2:
        $i2 = this.<berkeley.com.sleepycat.je.tree.IN: int flags>;

        $i3 = $i2 & -513;

        this.<berkeley.com.sleepycat.je.tree.IN: int flags> = $i3;

     label3:
        return;
    }

    private void setIsRootFlag(boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        boolean isRoot;
        int $i0, $i1, $i2, $i3;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        isRoot := @parameter0: boolean;

        if isRoot == 0 goto label1;

        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int flags>;

        $i1 = $i0 | 4;

        this.<berkeley.com.sleepycat.je.tree.IN: int flags> = $i1;

        goto label2;

     label1:
        $i2 = this.<berkeley.com.sleepycat.je.tree.IN: int flags>;

        $i3 = $i2 & -5;

        this.<berkeley.com.sleepycat.je.tree.IN: int flags> = $i3;

     label2:
        return;
    }

    void setExpirationInHours(boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        boolean value;
        int $i0, $i1, $i2, $i3;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        value := @parameter0: boolean;

        if value == 0 goto label1;

        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int flags>;

        $i1 = $i0 | 1024;

        this.<berkeley.com.sleepycat.je.tree.IN: int flags> = $i1;

        goto label2;

     label1:
        $i2 = this.<berkeley.com.sleepycat.je.tree.IN: int flags>;

        $i3 = $i2 & -1025;

        this.<berkeley.com.sleepycat.je.tree.IN: int flags> = $i3;

     label2:
        return;
    }

    final void setLsnInternal(int, long)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx, offset, fileOffset, $i9;
        long value, thisFileNumber, fileNumberDifference, $l1, $l3, $l5, $l7, $l8, $l11;
        long[] $r0, $r1;
        byte $b0, $b2, $b4, $b6, $b10;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        value := @parameter1: long;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: long[] entryLsnLongArray>;

        if $r0 == null goto label1;

        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: long[] entryLsnLongArray>;

        $r1[idx] = value;

        return;

     label1:
        offset = idx << 2;

        $b0 = value cmp -1L;

        if $b0 != 0 goto label2;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setFileNumberOffset(int,byte)>(offset, 0);

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setFileOffset(int,int)>(offset, -1);

        return;

     label2:
        thisFileNumber = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long getFileNumber(long)>(value);

        $l1 = this.<berkeley.com.sleepycat.je.tree.IN: long baseFileNumber>;

        $b2 = $l1 cmp -1L;

        if $b2 != 0 goto label3;

        this.<berkeley.com.sleepycat.je.tree.IN: long baseFileNumber> = thisFileNumber;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setFileNumberOffset(int,byte)>(offset, 0);

        goto label7;

     label3:
        $l3 = this.<berkeley.com.sleepycat.je.tree.IN: long baseFileNumber>;

        $b4 = thisFileNumber cmp $l3;

        if $b4 >= 0 goto label5;

        $z0 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean adjustFileNumbers(long)>(thisFileNumber);

        if $z0 != 0 goto label4;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void mutateToLongArray(int,long)>(idx, value);

        return;

     label4:
        this.<berkeley.com.sleepycat.je.tree.IN: long baseFileNumber> = thisFileNumber;

     label5:
        $l5 = this.<berkeley.com.sleepycat.je.tree.IN: long baseFileNumber>;

        fileNumberDifference = thisFileNumber - $l5;

        $b6 = fileNumberDifference cmp 127L;

        if $b6 <= 0 goto label6;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void mutateToLongArray(int,long)>(idx, value);

        return;

     label6:
        $l7 = this.<berkeley.com.sleepycat.je.tree.IN: long baseFileNumber>;

        $l8 = thisFileNumber - $l7;

        $i9 = (int) $l8;

        $b10 = (byte) $i9;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setFileNumberOffset(int,byte)>(offset, $b10);

     label7:
        $l11 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long getFileOffset(long)>(value);

        fileOffset = (int) $l11;

        if fileOffset <= 16777214 goto label8;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void mutateToLongArray(int,long)>(idx, value);

        return;

     label8:
        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setFileOffset(int,int)>(offset, fileOffset);

        return;
    }

    final void setBINDelta(boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        boolean delta;
        int $i0, $i1, $i2, $i3;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        delta := @parameter0: boolean;

        if delta == 0 goto label1;

        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int flags>;

        $i1 = $i0 | 32;

        this.<berkeley.com.sleepycat.je.tree.IN: int flags> = $i1;

        goto label2;

     label1:
        $i2 = this.<berkeley.com.sleepycat.je.tree.IN: int flags>;

        $i3 = $i2 & -33;

        this.<berkeley.com.sleepycat.je.tree.IN: int flags> = $i3;

     label2:
        return;
    }

    private void setFileNumberOffset(int, byte)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int offset;
        byte fileNumberOffset;
        byte[] $r0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        offset := @parameter0: int;

        fileNumberOffset := @parameter1: byte;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryLsnByteArray>;

        $r0[offset] = fileNumberOffset;

        return;
    }

    private void setFileOffset(int, int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int offset, fileOffset, $i0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        offset := @parameter0: int;

        fileOffset := @parameter1: int;

        $i0 = offset + 1;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void put3ByteInt(int,int)>($i0, fileOffset);

        return;
    }

    private boolean adjustFileNumbers(long)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        long newBaseFileNumber, oldBaseFileNumber, curEntryFileNumber, newCurEntryFileNumberOffset, undoOffset, $l3, $l7, $l8;
        int i#4, $i0, $i1, j#31, $i5, $i9, $i11;
        byte[] $r0;
        byte $b2, $b4, $b6, $b10, $b12;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        newBaseFileNumber := @parameter0: long;

        oldBaseFileNumber = this.<berkeley.com.sleepycat.je.tree.IN: long baseFileNumber>;

        i#4 = 0;

     label1:
        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryLsnByteArray>;

        $i0 = lengthof $r0;

        if i#4 >= $i0 goto label9;

        $i1 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: int getFileOffset(int)>(i#4);

        if $i1 != -1 goto label2;

        goto label8;

     label2:
        $b2 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: byte getFileNumberOffset(int)>(i#4);

        $l3 = (long) $b2;

        curEntryFileNumber = oldBaseFileNumber + $l3;

        newCurEntryFileNumberOffset = curEntryFileNumber - newBaseFileNumber;

        $b4 = newCurEntryFileNumberOffset cmp 127L;

        if $b4 <= 0 goto label7;

        undoOffset = oldBaseFileNumber - newBaseFileNumber;

        j#31 = i#4 - 4;

     label3:
        if j#31 < 0 goto label6;

        $i5 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: int getFileOffset(int)>(j#31);

        if $i5 != -1 goto label4;

        goto label5;

     label4:
        $b6 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: byte getFileNumberOffset(int)>(j#31);

        $l7 = (long) $b6;

        $l8 = $l7 - undoOffset;

        $i9 = (int) $l8;

        $b10 = (byte) $i9;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setFileNumberOffset(int,byte)>(j#31, $b10);

     label5:
        j#31 = j#31 + -4;

        goto label3;

     label6:
        return 0;

     label7:
        $i11 = (int) newCurEntryFileNumberOffset;

        $b12 = (byte) $i11;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setFileNumberOffset(int,byte)>(i#4, $b12);

     label8:
        i#4 = i#4 + 4;

        goto label1;

     label9:
        return 1;
    }

    private void mutateToLongArray(int, long)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx, nElts, $i0, i#9;
        long value, $l1;
        long[] newArr;
        byte[] $r0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        value := @parameter1: long;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryLsnByteArray>;

        $i0 = lengthof $r0;

        nElts = $i0 >> 2;

        newArr = newarray (long)[nElts];

        i#9 = 0;

     label1:
        if i#9 >= nElts goto label2;

        $l1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getLsn(int)>(i#9);

        newArr[i#9] = $l1;

        i#9 = i#9 + 1;

        goto label1;

     label2:
        newArr[idx] = value;

        this.<berkeley.com.sleepycat.je.tree.IN: long[] entryLsnLongArray> = newArr;

        this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryLsnByteArray> = null;

        return;
    }

    private void put3ByteInt(int, int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int value, offset#1, offset#5, offset#11, $i1, $i3;
        byte[] $r0, $r1, $r2;
        byte $b0, $b2, $b4;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        offset#1 := @parameter0: int;

        value := @parameter1: int;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryLsnByteArray>;

        offset#5 = offset#1 + 1;

        $b0 = (byte) value;

        $r0[offset#1] = $b0;

        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryLsnByteArray>;

        offset#11 = offset#5 + 1;

        $i1 = value >>> 8;

        $b2 = (byte) $i1;

        $r1[offset#5] = $b2;

        $r2 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryLsnByteArray>;

        $i3 = value >>> 16;

        $b4 = (byte) $i3;

        $r2[offset#11] = $b4;

        return;
    }

    public final boolean isBINDelta(boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        boolean checkLatched, $z0, $z1, $z2, $z3;
        java.lang.AssertionError $r0;
        int $i0, $i1;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        checkLatched := @parameter0: boolean;

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if checkLatched == 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isUpperIN()>();

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isLatchOwner()>();

        if $z2 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int flags>;

        $i1 = $i0 & 32;

        if $i1 == 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public void <init>()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        byte[] $r0;
        berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep $r1;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.Node: void <init>()>();

        $r1 = <berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep EMPTY_OFFHEAP_BIN_IDS>;

        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INLongRep offHeapBINIds> = $r1;

        this.<berkeley.com.sleepycat.je.tree.IN: int accumulatedDelta> = 0;

        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN nextLRUNode> = null;

        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN prevLRUNode> = null;

        this.<berkeley.com.sleepycat.je.tree.IN: long lastFullVersion> = -1L;

        this.<berkeley.com.sleepycat.je.tree.IN: int pinCount> = 0;

        $r0 = <berkeley.com.sleepycat.je.tree.Key: byte[] EMPTY_KEY>;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void init(berkeley.com.sleepycat.je.dbi.DatabaseImpl,byte[],int,int)>(null, $r0, 0, 0);

        return;
    }

    protected void init(berkeley.com.sleepycat.je.dbi.DatabaseImpl, byte[], int, int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;
        byte[] identifierKey, $r4, $r5;
        int initialCapacity, level, $i0;
        boolean $z0, $z1;
        berkeley.com.sleepycat.je.latch.SharedLatch $r0;
        berkeley.com.sleepycat.je.tree.INTargetRep$None $r1;
        berkeley.com.sleepycat.je.tree.INKeyRep$Default $r2;
        long[] $r3;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        db := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        identifierKey := @parameter1: byte[];

        initialCapacity := @parameter2: int;

        level := @parameter3: int;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setDatabase(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(db);

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isAlwaysLatchedExclusively()>();

        $r0 = staticinvoke <berkeley.com.sleepycat.je.latch.LatchFactory: berkeley.com.sleepycat.je.latch.SharedLatch createSharedLatch(berkeley.com.sleepycat.je.latch.LatchContext,boolean)>(this, $z0);

        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.latch.SharedLatch latch> = $r0;

        this.<berkeley.com.sleepycat.je.tree.IN: int flags> = 0;

        this.<berkeley.com.sleepycat.je.tree.IN: int nEntries> = 0;

        this.<berkeley.com.sleepycat.je.tree.IN: byte[] identifierKey> = identifierKey;

        $r1 = <berkeley.com.sleepycat.je.tree.INTargetRep: berkeley.com.sleepycat.je.tree.INTargetRep$None NONE>;

        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets> = $r1;

        $r2 = new berkeley.com.sleepycat.je.tree.INKeyRep$Default;

        specialinvoke $r2.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: void <init>(int)>(initialCapacity);

        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys> = $r2;

        this.<berkeley.com.sleepycat.je.tree.IN: byte[] keyPrefix> = null;

        this.<berkeley.com.sleepycat.je.tree.IN: long baseFileNumber> = -1L;

        $z1 = <berkeley.com.sleepycat.je.tree.IN: boolean disableCompactLsns>;

        if $z1 == 0 goto label1;

        this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryLsnByteArray> = null;

        $r3 = newarray (long)[initialCapacity];

        this.<berkeley.com.sleepycat.je.tree.IN: long[] entryLsnLongArray> = $r3;

        goto label2;

     label1:
        $i0 = initialCapacity << 2;

        $r4 = newarray (byte)[$i0];

        this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryLsnByteArray> = $r4;

        this.<berkeley.com.sleepycat.je.tree.IN: long[] entryLsnLongArray> = null;

     label2:
        $r5 = newarray (byte)[initialCapacity];

        this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates> = $r5;

        this.<berkeley.com.sleepycat.je.tree.IN: int level> = level;

        return;
    }

    public final void setDatabase(berkeley.com.sleepycat.je.dbi.DatabaseImpl)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        db := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl> = db;

        return;
    }

    public final void latchNoUpdateLRU(berkeley.com.sleepycat.je.dbi.DatabaseImpl)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db, $r0;
        berkeley.com.sleepycat.je.latch.SharedLatch $r1;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        db := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        if $r0 != null goto label1;

        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl> = db;

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.latch.SharedLatch latch>;

        interfaceinvoke $r1.<berkeley.com.sleepycat.je.latch.SharedLatch: void acquireExclusive()>();

        return;
    }

    public final byte[] getIdentifierKey()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        byte[] $r0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] identifierKey>;

        return $r0;
    }

    public final java.util.Comparator getKeyComparator()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r0;
        java.util.Comparator $r1;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator getKeyComparator()>();

        return $r1;
    }

    public final berkeley.com.sleepycat.je.tree.Node getTarget(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx;
        berkeley.com.sleepycat.je.tree.INTargetRep $r0;
        java.lang.Object $r1;
        berkeley.com.sleepycat.je.tree.Node $r2;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets>;

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.tree.INTargetRep: java.lang.Object get(int)>(idx);

        $r2 = (berkeley.com.sleepycat.je.tree.Node) $r1;

        return $r2;
    }

    void deleteEntry(int, boolean, boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this, childIN;
        int index, level, oldLSNArraySize, $i0, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12;
        boolean makeDirty, validate, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        berkeley.com.sleepycat.je.tree.Node child;
        berkeley.com.sleepycat.je.evictor.OffHeapCache ohCache;
        java.lang.AssertionError $r0, $r1, $r2, $r9;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r3, $r6;
        berkeley.com.sleepycat.je.tree.BIN $r4, $r5;
        berkeley.com.sleepycat.je.dbi.INList $r7;
        long $l3, $l11, $l13;
        java.util.logging.Level $r10;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        index := @parameter0: int;

        makeDirty := @parameter1: boolean;

        validate := @parameter2: boolean;

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBINDelta()>();

        if $z1 == 0 goto label01;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label01:
        $z2 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z2 != 0 goto label03;

        if index < 0 goto label02;

        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        if index < $i0 goto label03;

     label02:
        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label03:
        $z3 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z3 != 0 goto label04;

        if validate == 0 goto label04;

        $z4 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean validateSubtreeBeforeDelete(int)>(index);

        if $z4 != 0 goto label04;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label04:
        if makeDirty == 0 goto label05;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setDirty(boolean)>(1);

     label05:
        $z5 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isDirty(int)>(index);

        if $z5 == 0 goto label06;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setProhibitNextDelta(boolean)>(1);

     label06:
        child = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.Node getTarget(int)>(index);

        $r3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        ohCache = virtualinvoke $r3.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.evictor.OffHeapCache getOffHeapCache()>();

        level = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: int getNormalizedLevel()>();

        if level != 1 goto label07;

        $r4 = (berkeley.com.sleepycat.je.tree.BIN) this;

        virtualinvoke ohCache.<berkeley.com.sleepycat.je.evictor.OffHeapCache: int freeLN(berkeley.com.sleepycat.je.tree.BIN,int)>($r4, index);

        goto label08;

     label07:
        if level != 2 goto label08;

        $r5 = (berkeley.com.sleepycat.je.tree.BIN) child;

        virtualinvoke ohCache.<berkeley.com.sleepycat.je.evictor.OffHeapCache: long freeBIN(berkeley.com.sleepycat.je.tree.BIN,berkeley.com.sleepycat.je.tree.IN,int)>($r5, this, index);

     label08:
        if child == null goto label09;

        $z6 = virtualinvoke child.<berkeley.com.sleepycat.je.tree.Node: boolean isIN()>();

        if $z6 == 0 goto label09;

        childIN = (berkeley.com.sleepycat.je.tree.IN) child;

        $r6 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r7 = virtualinvoke $r6.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.INList getInMemoryINs()>();

        virtualinvoke $r7.<berkeley.com.sleepycat.je.dbi.INList: void remove(berkeley.com.sleepycat.je.tree.IN)>(childIN);

     label09:
        $l3 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getEntryInMemorySize(int)>(index);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void updateMemorySize(long,long)>($l3, 0L);

        oldLSNArraySize = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: int computeLsnOverhead()>();

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setTarget(int,berkeley.com.sleepycat.je.tree.Node)>(index, null);

        $i4 = index + 1;

        $i5 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        $i6 = $i5 - index;

        $i7 = $i6 - 1;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void copyEntries(int,int,int)>($i4, index, $i7);

        $i8 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        $i9 = $i8 - 1;

        this.<berkeley.com.sleepycat.je.tree.IN: int nEntries> = $i9;

        $i10 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void clearEntry(int)>($i10);

        $l11 = (long) oldLSNArraySize;

        $i12 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: int computeLsnOverhead()>();

        $l13 = (long) $i12;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void updateMemorySize(long,long)>($l11, $l13);

        $z7 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z7 != 0 goto label10;

        $z8 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z8 != 0 goto label10;

        $z9 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean hasCachedChildrenFlag()>();

        $z10 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean hasCachedChildren()>();

        if $z9 == $z10 goto label10;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label10:
        $r10 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void traceDelete(java.util.logging.Level,int)>($r10, index);

        return;
    }

    public final byte[] getKey(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx, $i0;
        byte[] key, $r2;
        boolean $z0, $z1, $z2;
        java.lang.AssertionError $r0, $r3;
        berkeley.com.sleepycat.je.tree.INKeyRep $r1;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        if idx < $i0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $r2 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] keyPrefix>;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean haveEmbeddedData(int)>(idx);

        key = virtualinvoke $r1.<berkeley.com.sleepycat.je.tree.INKeyRep: byte[] getFullKey(byte[],int,boolean)>($r2, idx, $z1);

        $z2 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z2 != 0 goto label2;

        if key != null goto label2;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        return key;
    }

    public final void setIdentifierKey(byte[], boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        byte[] key;
        boolean makeDirty, $z0, $z1;
        java.lang.AssertionError $r0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        key := @parameter0: byte[];

        makeDirty := @parameter1: boolean;

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBINDelta()>();

        if $z1 == 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        this.<berkeley.com.sleepycat.je.tree.IN: byte[] identifierKey> = key;

        if makeDirty == 0 goto label2;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setDirty(boolean)>(1);

     label2:
        return;
    }

    public final void updateLRU(berkeley.com.sleepycat.je.CacheMode)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.CacheMode cacheMode;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        int[] $r0;
        int $i0, $i1;
        java.lang.AssertionError $r1, $r3;
        berkeley.com.sleepycat.je.evictor.Evictor $r2;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        cacheMode := @parameter0: berkeley.com.sleepycat.je.CacheMode;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean getInListResident()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r0 = <berkeley.com.sleepycat.je.tree.IN$1: int[] $SwitchMap$berkeley$com$sleepycat$je$CacheMode>;

        $i0 = virtualinvoke cacheMode.<berkeley.com.sleepycat.je.CacheMode: int ordinal()>();

        $i1 = $r0[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label3;
            case 5: goto label3;
            case 6: goto label3;
            default: goto label6;
        };

     label2:
        goto label7;

     label3:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setFetchedCold(boolean)>(0);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setFetchedColdOffHeap(boolean)>(0);

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z1 != 0 goto label4;

        $z2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean hasCachedChildrenFlag()>();

        if $z2 != 0 goto label7;

     label4:
        $z3 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z3 != 0 goto label5;

        $z4 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z4 != 0 goto label5;

        $z5 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean hasCachedChildren()>();

        if $z5 == 0 goto label5;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label5:
        $r2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.evictor.Evictor getEvictor()>();

        virtualinvoke $r2.<berkeley.com.sleepycat.je.evictor.Evictor: void moveBack(berkeley.com.sleepycat.je.tree.IN)>(this);

        goto label7;

     label6:
        $z6 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z6 != 0 goto label7;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label7:
        return;
    }

    protected void updateRepCacheStats(boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        boolean increment, $z0, $z1;
        java.lang.AssertionError $r0;
        berkeley.com.sleepycat.je.tree.INKeyRep $r1;
        berkeley.com.sleepycat.je.tree.INTargetRep $r2;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        increment := @parameter0: boolean;

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        virtualinvoke $r1.<berkeley.com.sleepycat.je.tree.INKeyRep: void updateCacheStats(boolean,berkeley.com.sleepycat.je.tree.IN)>(increment, this);

        $r2 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets>;

        virtualinvoke $r2.<berkeley.com.sleepycat.je.tree.INTargetRep: void updateCacheStats(boolean,berkeley.com.sleepycat.je.tree.IN)>(increment, this);

        return;
    }

    protected void updateMemorySize(long, long)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        long oldSize, newSize, delta;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        oldSize := @parameter0: long;

        newSize := @parameter1: long;

        delta = newSize - oldSize;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void updateMemorySize(long)>(delta);

        return;
    }

    void updateMemorySize(long)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        long delta, $l1, $l2, $l3, $l4, $l6, $l7, $l8, $l10, $l11;
        byte $b0, $b5;
        boolean $z0, $z1, $z2, $z3;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r1;
        java.lang.AssertionError $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r14, $r15;
        java.lang.String $r13, $r16;
        int $i9, $i12, $i13, $i14, $i15, $i16, $i17;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        delta := @parameter0: long;

        $b0 = delta cmp 0L;

        if $b0 != 0 goto label1;

        return;

     label1:
        $l1 = this.<berkeley.com.sleepycat.je.tree.IN: long inMemorySize>;

        $l2 = $l1 + delta;

        this.<berkeley.com.sleepycat.je.tree.IN: long inMemorySize> = $l2;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean getInListResident()>();

        if $z0 == 0 goto label4;

        $z1 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $l3 = this.<berkeley.com.sleepycat.je.tree.IN: long inMemorySize>;

        $l4 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getFixedMemoryOverhead()>();

        $b5 = $l3 cmp $l4;

        if $b5 >= 0 goto label2;

        $r1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $z2 = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean isValid()>();

        if $z2 == 0 goto label2;

        $r2 = new java.lang.AssertionError;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("delta: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(delta);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" inMemorySize: ");

        $l6 = this.<berkeley.com.sleepycat.je.tree.IN: long inMemorySize>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" overhead: ");

        $l7 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getFixedMemoryOverhead()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l7);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" computed: ");

        $l8 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long computeMemorySize()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" dump: ");

        $r13 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: java.lang.String toString()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $z3 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean assertPrintMemorySize()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r16);

        throw $r2;

     label2:
        $i9 = this.<berkeley.com.sleepycat.je.tree.IN: int accumulatedDelta>;

        $l10 = (long) $i9;

        $l11 = $l10 + delta;

        $i12 = (int) $l11;

        this.<berkeley.com.sleepycat.je.tree.IN: int accumulatedDelta> = $i12;

        $i13 = this.<berkeley.com.sleepycat.je.tree.IN: int accumulatedDelta>;

        $i14 = <berkeley.com.sleepycat.je.tree.IN: int ACCUMULATED_LIMIT>;

        if $i13 > $i14 goto label3;

        $i15 = this.<berkeley.com.sleepycat.je.tree.IN: int accumulatedDelta>;

        $i16 = <berkeley.com.sleepycat.je.tree.IN: int ACCUMULATED_LIMIT>;

        $i17 = neg $i16;

        if $i15 >= $i17 goto label4;

     label3:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void updateMemoryBudget()>();

     label4:
        return;
    }

    public boolean getInListResident()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int $i0, $i1;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int flags>;

        $i1 = $i0 & 256;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String toString()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        java.lang.String $r0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: java.lang.String dumpString(int,boolean)>(0, 1);

        return $r0;
    }

    private boolean assertPrintMemorySize()
    {
        berkeley.com.sleepycat.je.tree.IN this;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long printMemorySize()>();

        return 1;
    }

    public void updateMemoryBudget()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl env;
        berkeley.com.sleepycat.je.dbi.INList $r0;
        int $i0, $i2;
        long $l1, $l3;
        berkeley.com.sleepycat.je.dbi.MemoryBudget $r1;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        env = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r0 = virtualinvoke env.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.INList getInMemoryINs()>();

        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int accumulatedDelta>;

        $l1 = (long) $i0;

        virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.INList: void memRecalcUpdate(berkeley.com.sleepycat.je.tree.IN,long)>(this, $l1);

        $r1 = virtualinvoke env.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.MemoryBudget getMemoryBudget()>();

        $i2 = this.<berkeley.com.sleepycat.je.tree.IN: int accumulatedDelta>;

        $l3 = (long) $i2;

        virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.MemoryBudget: void updateTreeMemoryUsage(long)>($l3);

        this.<berkeley.com.sleepycat.je.tree.IN: int accumulatedDelta> = 0;

        return;
    }

    protected long printMemorySize()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        long inOverhead, statesOverhead, targetRepOverhead, keyRepOverhead, total, offHeapBINIdOverhead, $l3, $l4, $l5, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16, $l17, $l18, $l21;
        int lsnOverhead, keyPrefixOverhead, provisionalOverhead, $i0, $i1, entryOverhead#11, i#13, $i2, $i6, $i7, $i8, $i19, $i20;
        byte[] $r0, $r1, $r2, $r13;
        berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo $r3, $r4;
        berkeley.com.sleepycat.je.tree.INTargetRep $r5, $r28;
        berkeley.com.sleepycat.je.tree.INKeyRep $r6, $r34;
        berkeley.com.sleepycat.je.tree.INLongRep $r7;
        java.io.PrintStream $r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r30, $r31, $r32, $r33, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44;
        java.lang.Object $r29, $r35;
        java.lang.String $r45;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        inOverhead = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getFixedMemoryOverhead()>();

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $i0 = lengthof $r0;

        $i1 = staticinvoke <berkeley.com.sleepycat.je.dbi.MemoryBudget: int byteArraySize(int)>($i0);

        statesOverhead = (long) $i1;

        lsnOverhead = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: int computeLsnOverhead()>();

        entryOverhead#11 = 0;

        i#13 = 0;

     label1:
        $i2 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        if i#13 >= $i2 goto label2;

        $l3 = (long) entryOverhead#11;

        $l4 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getEntryInMemorySize(int)>(i#13);

        $l5 = $l3 + $l4;

        entryOverhead#11 = (int) $l5;

        i#13 = i#13 + 1;

        goto label1;

     label2:
        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] keyPrefix>;

        if $r1 == null goto label3;

        $r2 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] keyPrefix>;

        $i6 = lengthof $r2;

        $i7 = staticinvoke <berkeley.com.sleepycat.je.dbi.MemoryBudget: int byteArraySize(int)>($i6);

        goto label4;

     label3:
        $i7 = 0;

     label4:
        keyPrefixOverhead = $i7;

        $r3 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo provisionalObsolete>;

        if $r3 == null goto label5;

        $r4 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo provisionalObsolete>;

        $i8 = virtualinvoke $r4.<berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo: int getMemorySize()>();

        goto label6;

     label5:
        $i8 = 0;

     label6:
        provisionalOverhead = $i8;

        $r5 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets>;

        targetRepOverhead = virtualinvoke $r5.<berkeley.com.sleepycat.je.tree.INTargetRep: long calculateMemorySize()>();

        $r6 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        keyRepOverhead = virtualinvoke $r6.<berkeley.com.sleepycat.je.tree.INKeyRep: long calculateMemorySize()>();

        $l9 = inOverhead + statesOverhead;

        $l10 = (long) lsnOverhead;

        $l11 = $l9 + $l10;

        $l12 = (long) entryOverhead#11;

        $l13 = $l11 + $l12;

        $l14 = (long) keyPrefixOverhead;

        $l15 = $l13 + $l14;

        $l16 = (long) provisionalOverhead;

        $l17 = $l15 + $l16;

        $l18 = $l17 + targetRepOverhead;

        total = $l18 + keyRepOverhead;

        $r7 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INLongRep offHeapBINIds>;

        offHeapBINIdOverhead = virtualinvoke $r7.<berkeley.com.sleepycat.je.tree.INLongRep: long getMemorySize()>();

        $r8 = <java.lang.System: java.io.PrintStream out>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" nEntries:");

        $i19 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i19);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r13 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $i20 = lengthof $r13;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i20);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(inOverhead);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" states: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(statesOverhead);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" entry: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(entryOverhead#11);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lsn: ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(lsnOverhead);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" keyPrefix: ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(keyPrefixOverhead);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" provisional: ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(provisionalOverhead);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" targetRep(");

        $r28 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets>;

        $r29 = virtualinvoke $r28.<berkeley.com.sleepycat.je.tree.INTargetRep: java.lang.Object getType()>();

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(targetRepOverhead);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" keyRep(");

        $r34 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $r35 = virtualinvoke $r34.<berkeley.com.sleepycat.je.tree.INKeyRep: java.lang.Object getType()>();

        $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(keyRepOverhead);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" offHeapBINIds: ");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(offHeapBINIdOverhead);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Total: ");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(total);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" inMemorySize: ");

        $l21 = this.<berkeley.com.sleepycat.je.tree.IN: long inMemorySize>;

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l21);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r45);

        return total;
    }

    private int computeLsnOverhead()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        long[] $r0, $r2;
        byte[] $r1;
        int $i0, $i1, $i2, $i3, $i4;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: long[] entryLsnLongArray>;

        if $r0 != null goto label1;

        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryLsnByteArray>;

        $i0 = lengthof $r1;

        $i1 = staticinvoke <berkeley.com.sleepycat.je.dbi.MemoryBudget: int byteArraySize(int)>($i0);

        goto label2;

     label1:
        $i2 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: int ARRAY_OVERHEAD>;

        $r2 = this.<berkeley.com.sleepycat.je.tree.IN: long[] entryLsnLongArray>;

        $i3 = lengthof $r2;

        $i4 = $i3 * 8;

        $i1 = $i2 + $i4;

     label2:
        return $i1;
    }

    private long getEntryInMemorySize(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx, $i0, $i1;
        byte[] key;
        berkeley.com.sleepycat.je.tree.Node target;
        long ret#2, $l2, $l3;
        berkeley.com.sleepycat.je.tree.INKeyRep $r0, $r1;
        boolean $z0;
        java.lang.Object $r2, $r4;
        berkeley.com.sleepycat.je.tree.INTargetRep $r3;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        ret#2 = 0L;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $z0 = virtualinvoke $r0.<berkeley.com.sleepycat.je.tree.INKeyRep: boolean accountsForKeyByteMemUsage()>();

        if $z0 != 0 goto label1;

        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $r2 = virtualinvoke $r1.<berkeley.com.sleepycat.je.tree.INKeyRep: java.lang.Object get(int)>(idx);

        key = (byte[]) $r2;

        if key == null goto label1;

        $i0 = lengthof key;

        $i1 = staticinvoke <berkeley.com.sleepycat.je.dbi.MemoryBudget: int byteArraySize(int)>($i0);

        $l2 = (long) $i1;

        ret#2 = ret#2 + $l2;

     label1:
        $r3 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets>;

        $r4 = virtualinvoke $r3.<berkeley.com.sleepycat.je.tree.INTargetRep: java.lang.Object get(int)>(idx);

        target = (berkeley.com.sleepycat.je.tree.Node) $r4;

        if target == null goto label2;

        $l3 = virtualinvoke target.<berkeley.com.sleepycat.je.tree.Node: long getMemorySizeIncludedByParent()>();

        ret#2 = ret#2 + $l3;

     label2:
        return ret#2;
    }

    public java.lang.String dumpString(int, boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int nSpaces, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i#220, $i16, $i17, $i20, $i22, $i23, $i24, $i25, $i26, $i30, $i31, $i32, $i33;
        boolean dumpTags, $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder sb, $r0, $r34, $r35, $r42, $r47, $r48, $r53, $r54, $r58, $r59, $r63, $r64, $r68, $r69, $r80, $r81, $r101, $r102, $r104, $r106, $r107, $r109;
        java.lang.String $r1, $r3, $r6, $r13, $r18, $r23, $r28, $r32, $r38, $r41, $r45, $r51, $r56, $r61, $r66, $r72, $r78, $r84, $r87, $r92, $r98, $r113, $r119, $r122, $r126, $r130, $r132, $r134;
        long $l0, $l1, $l18, $l21, $l27, $l29;
        berkeley.com.sleepycat.je.tree.BIN bin#38;
        byte[] $r17, $r19, $r27, $r29, $r97;
        byte $b19, $b28;
        berkeley.com.sleepycat.je.tree.INKeyRep $r90, $r95;
        java.lang.Object $r91, $r96, $r112, $r117;
        berkeley.com.sleepycat.je.tree.INTargetRep $r111, $r116;
        berkeley.com.sleepycat.je.tree.Node $r118;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        nSpaces := @parameter0: int;

        dumpTags := @parameter1: boolean;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        sb = $r0;

        if dumpTags == 0 goto label01;

        $r1 = staticinvoke <berkeley.com.sleepycat.je.tree.TreeUtils: java.lang.String indent(int)>(nSpaces);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: java.lang.String beginTag()>();

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

     label01:
        if dumpTags == 0 goto label02;

        $r6 = staticinvoke <berkeley.com.sleepycat.je.tree.TreeUtils: java.lang.String indent(int)>(nSpaces);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<nodeId val=\"");

        $l0 = this.<berkeley.com.sleepycat.je.tree.IN: long nodeId>;

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"/>");

        goto label03;

     label02:
        $l1 = this.<berkeley.com.sleepycat.je.tree.IN: long nodeId>;

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

     label03:
        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        bin#38 = null;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z0 == 0 goto label04;

        bin#38 = (berkeley.com.sleepycat.je.tree.BIN) this;

     label04:
        $i2 = nSpaces + 2;

        $r13 = staticinvoke <berkeley.com.sleepycat.je.tree.TreeUtils: java.lang.String indent(int)>($i2);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<idkey>");

        $r17 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] identifierKey>;

        if $r17 != null goto label05;

        $r18 = "";

        goto label06;

     label05:
        $r19 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] identifierKey>;

        $r18 = staticinvoke <berkeley.com.sleepycat.je.tree.Key: java.lang.String dumpString(byte[],int)>($r19, 0);

     label06:
        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</idkey>");

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $i3 = nSpaces + 2;

        $r23 = staticinvoke <berkeley.com.sleepycat.je.tree.TreeUtils: java.lang.String indent(int)>($i3);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<prefix>");

        $r27 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] keyPrefix>;

        if $r27 != null goto label07;

        $r28 = "";

        goto label08;

     label07:
        $r29 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] keyPrefix>;

        $r28 = staticinvoke <berkeley.com.sleepycat.je.tree.Key: java.lang.String dumpString(byte[],int)>($r29, 0);

     label08:
        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</prefix>\n");

        $i4 = nSpaces + 2;

        $r32 = staticinvoke <berkeley.com.sleepycat.je.tree.TreeUtils: java.lang.String indent(int)>($i4);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<dirty val=\"");

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean getDirty()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"/>");

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $i5 = nSpaces + 2;

        $r38 = staticinvoke <berkeley.com.sleepycat.je.tree.TreeUtils: java.lang.String indent(int)>($i5);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<level val=\"");

        $i6 = this.<berkeley.com.sleepycat.je.tree.IN: int level>;

        $r41 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i6);

        $r42 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"/>");

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $i7 = nSpaces + 2;

        $r45 = staticinvoke <berkeley.com.sleepycat.je.tree.TreeUtils: java.lang.String indent(int)>($i7);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r47 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<isRoot val=\"");

        $z2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isRoot()>();

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"/>");

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $i8 = nSpaces + 2;

        $r51 = staticinvoke <berkeley.com.sleepycat.je.tree.TreeUtils: java.lang.String indent(int)>($i8);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51);

        $r53 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<isBINDelta val=\"");

        $z3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBINDelta(boolean)>(0);

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"/>");

        $i9 = nSpaces + 2;

        $r56 = staticinvoke <berkeley.com.sleepycat.je.tree.TreeUtils: java.lang.String indent(int)>($i9);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r56);

        $r58 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<prohibitNextDelta val=\"");

        $z4 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean getProhibitNextDelta()>();

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"/>");

        if bin#38 == null goto label09;

        $i10 = nSpaces + 2;

        $r61 = staticinvoke <berkeley.com.sleepycat.je.tree.TreeUtils: java.lang.String indent(int)>($i10);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r61);

        $r63 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<cursors val=\"");

        $i11 = virtualinvoke bin#38.<berkeley.com.sleepycat.je.tree.BIN: int nCursors()>();

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"/>");

        $i12 = nSpaces + 2;

        $r66 = staticinvoke <berkeley.com.sleepycat.je.tree.TreeUtils: java.lang.String indent(int)>($i12);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r66);

        $r68 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<deltas val=\"");

        $i13 = virtualinvoke bin#38.<berkeley.com.sleepycat.je.tree.BIN: int getNDeltas()>();

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"/>");

     label09:
        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $i14 = nSpaces + 2;

        $r72 = staticinvoke <berkeley.com.sleepycat.je.tree.TreeUtils: java.lang.String indent(int)>($i14);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r72);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<entries nEntries=\"");

        $i15 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\">");

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        i#220 = 0;

     label10:
        $i16 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        if i#220 >= $i16 goto label19;

        $i17 = nSpaces + 4;

        $r78 = staticinvoke <berkeley.com.sleepycat.je.tree.TreeUtils: java.lang.String indent(int)>($i17);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r78);

        $r80 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<entry id=\"");

        $r81 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i#220);

        virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void dumpSlotState(java.lang.StringBuilder,int,berkeley.com.sleepycat.je.tree.BIN)>(sb, i#220, bin#38);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">\n");

        $l18 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getLsn(int)>(i#220);

        $b19 = $l18 cmp -1L;

        if $b19 != 0 goto label11;

        $i20 = nSpaces + 6;

        $r84 = staticinvoke <berkeley.com.sleepycat.je.tree.TreeUtils: java.lang.String indent(int)>($i20);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r84);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<lsn/>");

        goto label12;

     label11:
        $l21 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getLsn(int)>(i#220);

        $i22 = nSpaces + 6;

        $r87 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String dumpString(long,int)>($l21, $i22);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r87);

     label12:
        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r90 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $r91 = virtualinvoke $r90.<berkeley.com.sleepycat.je.tree.INKeyRep: java.lang.Object get(int)>(i#220);

        if $r91 != null goto label13;

        $i23 = nSpaces + 6;

        $r92 = staticinvoke <berkeley.com.sleepycat.je.tree.TreeUtils: java.lang.String indent(int)>($i23);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r92);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<key/>");

        goto label14;

     label13:
        $r95 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $r96 = virtualinvoke $r95.<berkeley.com.sleepycat.je.tree.INKeyRep: java.lang.Object get(int)>(i#220);

        $r97 = (byte[]) $r96;

        $i24 = nSpaces + 6;

        $r98 = staticinvoke <berkeley.com.sleepycat.je.tree.Key: java.lang.String dumpString(byte[],int)>($r97, $i24);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r98);

     label14:
        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $i25 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: int getOffHeapBINId(int)>(i#220);

        if $i25 < 0 goto label15;

        $r101 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<ohBIN id=\"");

        $r102 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i#220);

        virtualinvoke $r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $i26 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: int getOffHeapBINId(int)>(i#220);

        $r104 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i26);

        virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">\n");

     label15:
        if bin#38 == null goto label16;

        $l27 = virtualinvoke bin#38.<berkeley.com.sleepycat.je.tree.BIN: long getOffHeapLNId(int)>(i#220);

        $b28 = $l27 cmp 0L;

        if $b28 == 0 goto label16;

        $r106 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<ohLN id=\"");

        $r107 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i#220);

        virtualinvoke $r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $l29 = virtualinvoke bin#38.<berkeley.com.sleepycat.je.tree.BIN: long getOffHeapLNId(int)>(i#220);

        $r109 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l29);

        virtualinvoke $r109.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">\n");

     label16:
        $r111 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets>;

        $r112 = virtualinvoke $r111.<berkeley.com.sleepycat.je.tree.INTargetRep: java.lang.Object get(int)>(i#220);

        if $r112 != null goto label17;

        $i30 = nSpaces + 6;

        $r113 = staticinvoke <berkeley.com.sleepycat.je.tree.TreeUtils: java.lang.String indent(int)>($i30);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r113);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<target/>");

        goto label18;

     label17:
        $r116 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets>;

        $r117 = virtualinvoke $r116.<berkeley.com.sleepycat.je.tree.INTargetRep: java.lang.Object get(int)>(i#220);

        $r118 = (berkeley.com.sleepycat.je.tree.Node) $r117;

        $i31 = nSpaces + 6;

        $r119 = virtualinvoke $r118.<berkeley.com.sleepycat.je.tree.Node: java.lang.String dumpString(int,boolean)>($i31, 1);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r119);

     label18:
        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $i32 = nSpaces + 4;

        $r122 = staticinvoke <berkeley.com.sleepycat.je.tree.TreeUtils: java.lang.String indent(int)>($i32);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r122);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</entry>");

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        i#220 = i#220 + 1;

        goto label10;

     label19:
        $i33 = nSpaces + 2;

        $r126 = staticinvoke <berkeley.com.sleepycat.je.tree.TreeUtils: java.lang.String indent(int)>($i33);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r126);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</entries>");

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        if dumpTags == 0 goto label20;

        $r130 = staticinvoke <berkeley.com.sleepycat.je.tree.TreeUtils: java.lang.String indent(int)>(nSpaces);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r130);

        $r132 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: java.lang.String endTag()>();

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r132);

     label20:
        $r134 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r134;
    }

    public final boolean getDirty()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int $i0, $i1;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int flags>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void dumpSlotState(java.lang.StringBuilder, int, berkeley.com.sleepycat.je.tree.BIN)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        java.lang.StringBuilder sb, $r0, $r2, $r4, $r6, $r8, $r12;
        int i, $i0, $i1, $i2;
        berkeley.com.sleepycat.je.tree.BIN bin;
        long vlsn;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.String $r15;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        sb := @parameter0: java.lang.StringBuilder;

        i := @parameter1: int;

        bin := @parameter2: berkeley.com.sleepycat.je.tree.BIN;

        $r0 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" kd=\"");

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isEntryKnownDeleted(int)>(i);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r2 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" pd=\"");

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isEntryPendingDeleted(int)>(i);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r4 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" dirty=\"");

        $z2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isDirty(int)>(i);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r6 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" embedded=\"");

        $z3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isEmbeddedLN(int)>(i);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r8 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" noData=\"");

        $z4 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isNoDataLN(int)>(i);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        if bin == null goto label1;

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" logSize=\"");

        $i0 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: int getLastLoggedSizeUnconditional(int)>(i);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        vlsn = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: long getCachedVLSN(int)>(i);

        $z5 = staticinvoke <berkeley.com.sleepycat.je.utilint.VLSN: boolean isNull(long)>(vlsn);

        if $z5 != 0 goto label1;

        $r12 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" vlsn=\"");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(vlsn);

     label1:
        if bin == null goto label2;

        $i1 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: int getExpiration(int)>(i);

        if $i1 == 0 goto label2;

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" expires=\"");

        $i2 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: int getExpiration(int)>(i);

        $z6 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: boolean isExpirationInHours()>();

        $r15 = staticinvoke <berkeley.com.sleepycat.je.dbi.TTL: java.lang.String formatExpiration(int,boolean)>($i2, $z6);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

     label2:
        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        return;
    }

    public int getOffHeapBINId(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx, $i1, $i2;
        berkeley.com.sleepycat.je.tree.INLongRep $r0;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INLongRep offHeapBINIds>;

        $l0 = virtualinvoke $r0.<berkeley.com.sleepycat.je.tree.INLongRep: long get(int)>(idx);

        $i1 = (int) $l0;

        $i2 = $i1 - 1;

        return $i2;
    }

    public final boolean isEntryKnownDeleted(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx;
        byte[] $r0;
        byte $b0, $b1;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $b0 = $r0[idx];

        $b1 = $b0 & 1;

        if $b1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean isEntryPendingDeleted(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx;
        byte[] $r0;
        byte $b0, $b1;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $b0 = $r0[idx];

        $b1 = $b0 & 8;

        if $b1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public long computeMemorySize()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        long calcMemorySize#3, $l2, calcMemorySize#11, $l4, calcMemorySize#17, $l6, $l9, $l11, $l12, calcMemorySize#49, $l13, calcMemorySize#55, $l14;
        byte[] $r0, $r1, $r2;
        int $i0, $i1, $i3, i#19, $i5, $i7, $i8, $i10;
        berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo $r3, $r4;
        berkeley.com.sleepycat.je.tree.INTargetRep $r5;
        berkeley.com.sleepycat.je.tree.INKeyRep $r6;
        berkeley.com.sleepycat.je.tree.INLongRep $r7, $r8;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        calcMemorySize#3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getFixedMemoryOverhead()>();

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $i0 = lengthof $r0;

        $i1 = staticinvoke <berkeley.com.sleepycat.je.dbi.MemoryBudget: int byteArraySize(int)>($i0);

        $l2 = (long) $i1;

        calcMemorySize#11 = calcMemorySize#3 + $l2;

        $i3 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: int computeLsnOverhead()>();

        $l4 = (long) $i3;

        calcMemorySize#17 = calcMemorySize#11 + $l4;

        i#19 = 0;

     label1:
        $i5 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        if i#19 >= $i5 goto label2;

        $l6 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getEntryInMemorySize(int)>(i#19);

        calcMemorySize#17 = calcMemorySize#17 + $l6;

        i#19 = i#19 + 1;

        goto label1;

     label2:
        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] keyPrefix>;

        if $r1 == null goto label3;

        $r2 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] keyPrefix>;

        $i7 = lengthof $r2;

        $i8 = staticinvoke <berkeley.com.sleepycat.je.dbi.MemoryBudget: int byteArraySize(int)>($i7);

        $l9 = (long) $i8;

        calcMemorySize#17 = calcMemorySize#17 + $l9;

     label3:
        $r3 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo provisionalObsolete>;

        if $r3 == null goto label4;

        $r4 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo provisionalObsolete>;

        $i10 = virtualinvoke $r4.<berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo: int getMemorySize()>();

        $l11 = (long) $i10;

        calcMemorySize#17 = calcMemorySize#17 + $l11;

     label4:
        $r5 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets>;

        $l12 = virtualinvoke $r5.<berkeley.com.sleepycat.je.tree.INTargetRep: long calculateMemorySize()>();

        calcMemorySize#49 = calcMemorySize#17 + $l12;

        $r6 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $l13 = virtualinvoke $r6.<berkeley.com.sleepycat.je.tree.INKeyRep: long calculateMemorySize()>();

        calcMemorySize#55 = calcMemorySize#49 + $l13;

        $r7 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INLongRep offHeapBINIds>;

        if $r7 == null goto label5;

        $r8 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INLongRep offHeapBINIds>;

        $l14 = virtualinvoke $r8.<berkeley.com.sleepycat.je.tree.INLongRep: long getMemorySize()>();

        calcMemorySize#55 = calcMemorySize#55 + $l14;

     label5:
        return calcMemorySize#55;
    }

    public final void setFetchedCold(boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        boolean val;
        int $i0, $i1, $i2, $i3;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        val := @parameter0: boolean;

        if val == 0 goto label1;

        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int flags>;

        $i1 = $i0 | 64;

        this.<berkeley.com.sleepycat.je.tree.IN: int flags> = $i1;

        goto label2;

     label1:
        $i2 = this.<berkeley.com.sleepycat.je.tree.IN: int flags>;

        $i3 = $i2 & -65;

        this.<berkeley.com.sleepycat.je.tree.IN: int flags> = $i3;

     label2:
        return;
    }

    public final void setFetchedColdOffHeap(boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        boolean val;
        int $i0, $i1, $i2, $i3;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        val := @parameter0: boolean;

        if val == 0 goto label1;

        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int flags>;

        $i1 = $i0 | 128;

        this.<berkeley.com.sleepycat.je.tree.IN: int flags> = $i1;

        goto label2;

     label1:
        $i2 = this.<berkeley.com.sleepycat.je.tree.IN: int flags>;

        $i3 = $i2 & -129;

        this.<berkeley.com.sleepycat.je.tree.IN: int flags> = $i3;

     label2:
        return;
    }

    public final boolean hasCachedChildrenFlag()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int $i0, $i1;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int flags>;

        $i1 = $i0 & 8;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    final berkeley.com.sleepycat.je.evictor.Evictor getEvictor()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r0;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r1;
        berkeley.com.sleepycat.je.evictor.Evictor $r2;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r2 = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.evictor.Evictor getEvictor()>();

        return $r2;
    }

    public final void setDirty(boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        boolean dirty;
        int $i0, $i1, $i2, $i3;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        dirty := @parameter0: boolean;

        if dirty == 0 goto label1;

        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int flags>;

        $i1 = $i0 | 1;

        this.<berkeley.com.sleepycat.je.tree.IN: int flags> = $i1;

        goto label2;

     label1:
        $i2 = this.<berkeley.com.sleepycat.je.tree.IN: int flags>;

        $i3 = $i2 & -2;

        this.<berkeley.com.sleepycat.je.tree.IN: int flags> = $i3;

     label2:
        return;
    }

    public final int getNormalizedLevel()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int $i0, $i1;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int level>;

        $i1 = $i0 & 65535;

        return $i1;
    }

    private void traceDelete(java.util.logging.Level, int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        java.util.logging.Level level;
        int index;
        java.util.logging.Logger logger;
        java.lang.StringBuilder sb, $r2, $r4;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r0, $r8;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r1, $r9;
        boolean $z0;
        long $l0;
        java.lang.String $r10;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        level := @parameter0: java.util.logging.Level;

        index := @parameter1: int;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        logger = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: java.util.logging.Logger getLogger()>();

        $z0 = virtualinvoke logger.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>(level);

        if $z0 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        sb = $r2;

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delete:");

        $r4 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in=");

        $l0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getNodeId()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" index=");

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(index);

        $r8 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $r9 = virtualinvoke $r8.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r10 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: void logMsg(java.util.logging.Logger,berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.util.logging.Level,java.lang.String)>(logger, $r9, level, $r10);

     label1:
        return;
    }

    void clearEntry(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx;
        berkeley.com.sleepycat.je.tree.INTargetRep $r0, $r2;
        java.lang.Object $r1, $r4;
        berkeley.com.sleepycat.je.tree.INKeyRep $r3, $r5;
        berkeley.com.sleepycat.je.tree.INLongRep $r6, $r7;
        byte[] $r8;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets>;

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.tree.INTargetRep: java.lang.Object set(int,java.lang.Object,berkeley.com.sleepycat.je.tree.IN)>(idx, null, this);

        $r2 = (berkeley.com.sleepycat.je.tree.INTargetRep) $r1;

        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets> = $r2;

        $r3 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $r4 = virtualinvoke $r3.<berkeley.com.sleepycat.je.tree.INKeyRep: java.lang.Object set(int,java.lang.Object,berkeley.com.sleepycat.je.tree.IN)>(idx, null, this);

        $r5 = (berkeley.com.sleepycat.je.tree.INKeyRep) $r4;

        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys> = $r5;

        $r6 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INLongRep offHeapBINIds>;

        $r7 = virtualinvoke $r6.<berkeley.com.sleepycat.je.tree.INLongRep: berkeley.com.sleepycat.je.tree.INLongRep set(int,long,berkeley.com.sleepycat.je.tree.IN)>(idx, 0L, this);

        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INLongRep offHeapBINIds> = $r7;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setLsnInternal(int,long)>(idx, -1L);

        $r8 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $r8[idx] = 0;

        return;
    }

    void copyEntries(int, int, int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int 'from', 'to', n, fromOff, toOff, nBytes;
        berkeley.com.sleepycat.je.tree.INTargetRep $r0, $r2;
        java.lang.Object $r1, $r4;
        berkeley.com.sleepycat.je.tree.INKeyRep $r3, $r5;
        berkeley.com.sleepycat.je.tree.INLongRep $r6, $r7;
        byte[] $r8, $r9, $r11, $r12;
        long[] $r10, $r13, $r14;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        'from' := @parameter0: int;

        'to' := @parameter1: int;

        n := @parameter2: int;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets>;

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.tree.INTargetRep: java.lang.Object copy(int,int,int,berkeley.com.sleepycat.je.tree.IN)>('from', 'to', n, this);

        $r2 = (berkeley.com.sleepycat.je.tree.INTargetRep) $r1;

        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets> = $r2;

        $r3 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $r4 = virtualinvoke $r3.<berkeley.com.sleepycat.je.tree.INKeyRep: java.lang.Object copy(int,int,int,berkeley.com.sleepycat.je.tree.IN)>('from', 'to', n, this);

        $r5 = (berkeley.com.sleepycat.je.tree.INKeyRep) $r4;

        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys> = $r5;

        $r6 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INLongRep offHeapBINIds>;

        $r7 = virtualinvoke $r6.<berkeley.com.sleepycat.je.tree.INLongRep: berkeley.com.sleepycat.je.tree.INLongRep copy(int,int,int,berkeley.com.sleepycat.je.tree.IN)>('from', 'to', n, this);

        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INLongRep offHeapBINIds> = $r7;

        $r8 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $r9 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 'from', $r9, 'to', n);

        $r10 = this.<berkeley.com.sleepycat.je.tree.IN: long[] entryLsnLongArray>;

        if $r10 != null goto label1;

        fromOff = 'from' << 2;

        toOff = 'to' << 2;

        nBytes = n << 2;

        $r11 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryLsnByteArray>;

        $r12 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryLsnByteArray>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, fromOff, $r12, toOff, nBytes);

        goto label2;

     label1:
        $r13 = this.<berkeley.com.sleepycat.je.tree.IN: long[] entryLsnLongArray>;

        $r14 = this.<berkeley.com.sleepycat.je.tree.IN: long[] entryLsnLongArray>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r13, 'from', $r14, 'to', n);

     label2:
        return;
    }

    void setTarget(int, berkeley.com.sleepycat.je.tree.Node)
    {
        berkeley.com.sleepycat.je.tree.IN this, $r14;
        int idx;
        berkeley.com.sleepycat.je.tree.Node target, curChild;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.AssertionError $r0;
        java.lang.StringBuilder $r1, $r2, $r5, $r6, $r7;
        java.lang.Class $r3;
        java.lang.String $r4, $r8;
        long $l0;
        berkeley.com.sleepycat.je.tree.INTargetRep $r9, $r11, $r13;
        java.lang.Object $r10, $r12;
        berkeley.com.sleepycat.je.evictor.Evictor $r15, $r16;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        target := @parameter1: berkeley.com.sleepycat.je.tree.Node;

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isLatchExclusiveOwner()>();

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not latched for write ");

        $r3 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" id=");

        $l0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getNodeId()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.AssertionError: void <init>(java.lang.Object)>($r8);

        throw $r0;

     label1:
        $r9 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets>;

        $r10 = virtualinvoke $r9.<berkeley.com.sleepycat.je.tree.INTargetRep: java.lang.Object get(int)>(idx);

        curChild = (berkeley.com.sleepycat.je.tree.Node) $r10;

        $r11 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets>;

        $r12 = virtualinvoke $r11.<berkeley.com.sleepycat.je.tree.INTargetRep: java.lang.Object set(int,java.lang.Object,berkeley.com.sleepycat.je.tree.IN)>(idx, target, this);

        $r13 = (berkeley.com.sleepycat.je.tree.INTargetRep) $r12;

        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets> = $r13;

        if target == null goto label2;

        $z2 = virtualinvoke target.<berkeley.com.sleepycat.je.tree.Node: boolean isIN()>();

        if $z2 == 0 goto label2;

        $r14 = (berkeley.com.sleepycat.je.tree.IN) target;

        virtualinvoke $r14.<berkeley.com.sleepycat.je.tree.IN: void setParent(berkeley.com.sleepycat.je.tree.IN)>(this);

     label2:
        $z3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isUpperIN()>();

        if $z3 == 0 goto label4;

        if target != null goto label3;

        if curChild == null goto label4;

        $z4 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean hasCachedChildrenFlag()>();

        if $z4 == 0 goto label4;

        $z5 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean hasCachedChildren()>();

        if $z5 != 0 goto label4;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setHasCachedChildrenFlag(boolean)>(0);

        $z6 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isDIN()>();

        if $z6 != 0 goto label4;

        $r15 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.evictor.Evictor getEvictor()>();

        virtualinvoke $r15.<berkeley.com.sleepycat.je.evictor.Evictor: void addBack(berkeley.com.sleepycat.je.tree.IN)>(this);

        goto label4;

     label3:
        if curChild != null goto label4;

        $z7 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean hasCachedChildrenFlag()>();

        if $z7 != 0 goto label4;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setHasCachedChildrenFlag(boolean)>(1);

        $r16 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.evictor.Evictor getEvictor()>();

        virtualinvoke $r16.<berkeley.com.sleepycat.je.evictor.Evictor: void remove(berkeley.com.sleepycat.je.tree.IN)>(this);

     label4:
        return;
    }

    public final boolean isLatchExclusiveOwner()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.latch.SharedLatch $r0;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.latch.SharedLatch latch>;

        $z0 = interfaceinvoke $r0.<berkeley.com.sleepycat.je.latch.SharedLatch: boolean isExclusiveOwner()>();

        return $z0;
    }

    private void setHasCachedChildrenFlag(boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        boolean value;
        int $i0, $i1, $i2, $i3;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        value := @parameter0: boolean;

        if value == 0 goto label1;

        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int flags>;

        $i1 = $i0 | 8;

        this.<berkeley.com.sleepycat.je.tree.IN: int flags> = $i1;

        goto label2;

     label1:
        $i2 = this.<berkeley.com.sleepycat.je.tree.IN: int flags>;

        $i3 = $i2 & -9;

        this.<berkeley.com.sleepycat.je.tree.IN: int flags> = $i3;

     label2:
        return;
    }

    public final void updateEntry(int, long, long, int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx, newSize;
        long newLSN, newVLSN;
        boolean $z0, $z1;
        berkeley.com.sleepycat.je.tree.BIN $r0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        newLSN := @parameter1: long;

        newVLSN := @parameter2: long;

        newSize := @parameter3: int;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setLsn(int,long)>(idx, newLSN);

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isEmbeddedLN(int)>(idx);

        if $z1 == 0 goto label1;

        $r0 = (berkeley.com.sleepycat.je.tree.BIN) this;

        virtualinvoke $r0.<berkeley.com.sleepycat.je.tree.BIN: void setCachedVLSN(int,long)>(idx, newVLSN);

        goto label2;

     label1:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setLastLoggedSize(int,int)>(idx, newSize);

     label2:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setDirty(boolean)>(1);

        return;
    }

    public long compactMemory()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        long oldSize, $l0, $l1, $l2, $l3;
        berkeley.com.sleepycat.je.tree.INKeyRep oldKeyRep, $r3, $r5, $r9;
        berkeley.com.sleepycat.je.tree.INTargetRep $r0, $r2;
        java.lang.Object $r1, $r4;
        berkeley.com.sleepycat.je.tree.INLongRep $r6, $r8;
        berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep $r7;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        oldSize = this.<berkeley.com.sleepycat.je.tree.IN: long inMemorySize>;

        oldKeyRep = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets>;

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.tree.INTargetRep: java.lang.Object compact(berkeley.com.sleepycat.je.tree.IN)>(this);

        $r2 = (berkeley.com.sleepycat.je.tree.INTargetRep) $r1;

        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets> = $r2;

        $r3 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $r4 = virtualinvoke $r3.<berkeley.com.sleepycat.je.tree.INKeyRep: java.lang.Object compact(berkeley.com.sleepycat.je.tree.IN)>(this);

        $r5 = (berkeley.com.sleepycat.je.tree.INKeyRep) $r4;

        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys> = $r5;

        $r6 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INLongRep offHeapBINIds>;

        $r7 = <berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep EMPTY_OFFHEAP_BIN_IDS>;

        $r8 = virtualinvoke $r6.<berkeley.com.sleepycat.je.tree.INLongRep: berkeley.com.sleepycat.je.tree.INLongRep compact(berkeley.com.sleepycat.je.tree.IN,berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep)>(this, $r7);

        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INLongRep offHeapBINIds> = $r8;

        $r9 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        if $r9 == oldKeyRep goto label1;

        $l0 = this.<berkeley.com.sleepycat.je.tree.IN: long inMemorySize>;

        $l1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long computeMemorySize()>();

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void updateMemorySize(long,long)>($l0, $l1);

     label1:
        $l2 = this.<berkeley.com.sleepycat.je.tree.IN: long inMemorySize>;

        $l3 = oldSize - $l2;

        return $l3;
    }

    protected int getCompactMaxKeyLength()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0;
        int $i0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $i0 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: int getCompactMaxKeyLength()>();

        return $i0;
    }

    final berkeley.com.sleepycat.je.evictor.OffHeapCache getOffHeapCache()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r0;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r1;
        berkeley.com.sleepycat.je.evictor.OffHeapCache $r2;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r2 = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.evictor.OffHeapCache getOffHeapCache()>();

        return $r2;
    }

    final void setLsn(int, long)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx;
        long lsn;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        lsn := @parameter1: long;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setLsn(int,long,boolean)>(idx, lsn, 1);

        return;
    }

    private void setLsn(int, long, boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx, oldSize, $i1, $i2;
        long lsn, $l0, $l3;
        boolean check, $z0;
        byte[] $r0;
        byte $b5, $b6, $b7;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        lsn := @parameter1: long;

        check := @parameter2: boolean;

        if check == 0 goto label1;

        $l0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getLsn(int)>(idx);

        $z0 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean shouldUpdateLsn(long,long)>($l0, lsn);

        if $z0 == 0 goto label2;

     label1:
        oldSize = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: int computeLsnOverhead()>();

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setLsnInternal(int,long)>(idx, lsn);

        $i1 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: int computeLsnOverhead()>();

        $i2 = $i1 - oldSize;

        $l3 = (long) $i2;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void updateMemorySize(long)>($l3);

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $b5 = $r0[idx];

        $b6 = $b5 | 2;

        $b7 = (byte) $b6;

        $r0[idx] = $b7;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setDirty(boolean)>(1);

     label2:
        return;
    }

    private final boolean shouldUpdateLsn(long, long)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        long oldLsn, newLsn;
        byte $b0, $b1, $b2;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0;
        boolean $z0, $z1, $z2, $z3;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r8, $r11, $r12, $r14, $r15, $r17;
        java.lang.String $r4, $r7, $r9, $r13, $r16, $r18;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r10, $r19;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        oldLsn := @parameter0: long;

        newLsn := @parameter1: long;

        $b0 = oldLsn cmp newLsn;

        if $b0 != 0 goto label1;

        return 0;

     label1:
        $b1 = newLsn cmp -1L;

        if $b1 != 0 goto label2;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $z0 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean isReadOnly()>();

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $z1 = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isDeferredWriteMode()>();

        if $z1 == 0 goto label3;

        $b2 = oldLsn cmp -1L;

        if $b2 == 0 goto label4;

        $z2 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: boolean isTransientOrNull(long)>(newLsn);

        if $z2 == 0 goto label4;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DeferredWrite LSN update not allowed oldLsn = ");

        $r4 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(oldLsn);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" newLsn = ");

        $r7 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(newLsn);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>($r9);

        throw $r10;

     label3:
        $z3 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: boolean isTransientOrNull(long)>(newLsn);

        if $z3 == 0 goto label4;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LSN update not allowed oldLsn = ");

        $r13 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(oldLsn);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" newLsn = ");

        $r16 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(newLsn);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r19 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>($r18);

        throw $r19;

     label4:
        return 1;
    }

    public final void releaseLatch()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.latch.SharedLatch $r0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.latch.SharedLatch latch>;

        interfaceinvoke $r0.<berkeley.com.sleepycat.je.latch.SharedLatch: void release()>();

        return;
    }

    public void <init>(berkeley.com.sleepycat.je.dbi.DatabaseImpl, byte[], int, int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        byte[] identifierKey;
        int capacity, level, $i1;
        berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep $r0;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r1;
        berkeley.com.sleepycat.je.dbi.NodeSequence $r2;
        long $l0;
        berkeley.com.sleepycat.je.dbi.DatabaseId $r3;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        dbImpl := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        identifierKey := @parameter1: byte[];

        capacity := @parameter2: int;

        level := @parameter3: int;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.Node: void <init>()>();

        $r0 = <berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep EMPTY_OFFHEAP_BIN_IDS>;

        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INLongRep offHeapBINIds> = $r0;

        this.<berkeley.com.sleepycat.je.tree.IN: int accumulatedDelta> = 0;

        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN nextLRUNode> = null;

        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN prevLRUNode> = null;

        this.<berkeley.com.sleepycat.je.tree.IN: long lastFullVersion> = -1L;

        this.<berkeley.com.sleepycat.je.tree.IN: int pinCount> = 0;

        $r1 = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r2 = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.NodeSequence getNodeSequence()>();

        $l0 = virtualinvoke $r2.<berkeley.com.sleepycat.je.dbi.NodeSequence: long getNextLocalNodeId()>();

        this.<berkeley.com.sleepycat.je.tree.IN: long nodeId> = $l0;

        $r3 = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.DatabaseId getId()>();

        $i1 = staticinvoke <berkeley.com.sleepycat.je.tree.IN: int generateLevel(berkeley.com.sleepycat.je.dbi.DatabaseId,int)>($r3, level);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void init(berkeley.com.sleepycat.je.dbi.DatabaseImpl,byte[],int,int)>(dbImpl, identifierKey, capacity, $i1);

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void initMemorySize()>();

        return;
    }

    private static int generateLevel(berkeley.com.sleepycat.je.dbi.DatabaseId, int)
    {
        berkeley.com.sleepycat.je.dbi.DatabaseId dbId, $r0;
        int newLevel, $i0, $i1;
        boolean $z0;

        dbId := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseId;

        newLevel := @parameter1: int;

        $r0 = <berkeley.com.sleepycat.je.dbi.DbTree: berkeley.com.sleepycat.je.dbi.DatabaseId ID_DB_ID>;

        $z0 = virtualinvoke dbId.<berkeley.com.sleepycat.je.dbi.DatabaseId: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label1;

        $i0 = newLevel | 131072;

        return $i0;

     label1:
        $i1 = newLevel | 65536;

        return $i1;
    }

    private void initMemorySize()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.tree.INKeyRep $r0, $r2;
        java.lang.Object $r1;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.tree.INKeyRep: java.lang.Object compact(berkeley.com.sleepycat.je.tree.IN)>(this);

        $r2 = (berkeley.com.sleepycat.je.tree.INKeyRep) $r1;

        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys> = $r2;

        $l0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long computeMemorySize()>();

        this.<berkeley.com.sleepycat.je.tree.IN: long inMemorySize> = $l0;

        return;
    }

    public void latch(berkeley.com.sleepycat.je.CacheMode)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.CacheMode cacheMode;
        berkeley.com.sleepycat.je.latch.SharedLatch $r0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        cacheMode := @parameter0: berkeley.com.sleepycat.je.CacheMode;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.latch.SharedLatch latch>;

        interfaceinvoke $r0.<berkeley.com.sleepycat.je.latch.SharedLatch: void acquireExclusive()>();

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void updateLRU(berkeley.com.sleepycat.je.CacheMode)>(cacheMode);

        return;
    }

    final void setIsRoot(boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        boolean isRoot;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        isRoot := @parameter0: boolean;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setIsRootFlag(boolean)>(isRoot);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setDirty(boolean)>(1);

        return;
    }

    public final boolean insertEntry(berkeley.com.sleepycat.je.tree.Node, byte[], long) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.tree.Node child;
        byte[] key;
        long childLsn;
        int res, $i0;
        boolean $z0, $z1, $z2;
        java.lang.AssertionError $r0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        child := @parameter0: berkeley.com.sleepycat.je.tree.Node;

        key := @parameter1: byte[];

        childLsn := @parameter2: long;

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBINDelta()>();

        if $z1 == 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        res = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: int insertEntry1(berkeley.com.sleepycat.je.tree.Node,byte[],byte[],long,byte,boolean)>(child, key, null, childLsn, 2, 0);

        $i0 = res & 131072;

        if $i0 == 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public final long optionalLog()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.log.Provisional $r0;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r1;
        boolean $z0;
        long $l0, $l1;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $z0 = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isDeferredWriteMode()>();

        if $z0 == 0 goto label1;

        $l0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getLastLoggedLsn()>();

        return $l0;

     label1:
        $r0 = <berkeley.com.sleepycat.je.log.Provisional: berkeley.com.sleepycat.je.log.Provisional NO>;

        $l1 = staticinvoke <berkeley.com.sleepycat.je.tree.IN: long logInternal(berkeley.com.sleepycat.je.tree.IN,berkeley.com.sleepycat.je.log.entry.INLogEntry,boolean,boolean,berkeley.com.sleepycat.je.log.Provisional,boolean,berkeley.com.sleepycat.je.tree.IN)>(this, null, 0, 1, $r0, 0, null);

        return $l1;
    }

    public final long getLastLoggedLsn()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        boolean $z0;
        long $l0, $l2, $l3;
        byte $b1;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z0 == 0 goto label3;

        $l0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getLastDeltaLsn()>();

        $b1 = $l0 cmp -1L;

        if $b1 == 0 goto label1;

        $l2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getLastDeltaLsn()>();

        goto label2;

     label1:
        $l2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getLastFullLsn()>();

     label2:
        return $l2;

     label3:
        $l3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getLastFullLsn()>();

        return $l3;
    }

    public long getLastDeltaLsn()
    {
        berkeley.com.sleepycat.je.tree.IN this;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        return -1L;
    }

    public final int insertEntry1(berkeley.com.sleepycat.je.tree.Node, byte[], byte[], long, byte, boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.tree.Node child;
        byte[] key, data, $r16;
        long childLsn, $l8, $l14, $l18, $l19, $l21, $l22, $l23, $l24;
        byte state;
        boolean blindInsertion, multiSlotChange, $z0, $z1, doBlindInsertion#23, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        berkeley.com.sleepycat.je.tree.BIN bin, $r14;
        int index#6, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, index#77, $i11, oldSize#83, $i12, $i13, $i15, $i16, oldSize#103, $i17, $i20, $i25;
        berkeley.com.sleepycat.je.evictor.Evictor $r0;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        java.lang.String $r11;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r12;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r15;
        java.lang.AssertionError $r17;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        child := @parameter0: berkeley.com.sleepycat.je.tree.Node;

        key := @parameter1: byte[];

        data := @parameter2: byte[];

        childLsn := @parameter3: long;

        state := @parameter4: byte;

        blindInsertion := @parameter5: boolean;

        index#6 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: int findEntry(byte[],boolean,boolean)>(key, 1, 0);

        if index#6 < 0 goto label01;

        $i0 = index#6 & 65536;

        if $i0 == 0 goto label01;

        $i1 = index#6 & -65537;

        return $i1;

     label01:
        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBINDelta()>();

        if $z0 == 0 goto label06;

        bin = (berkeley.com.sleepycat.je.tree.BIN) this;

        $i2 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        $i3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: int getMaxEntries()>();

        if $i2 >= $i3 goto label02;

        $z1 = 1;

        goto label03;

     label02:
        $z1 = 0;

     label03:
        doBlindInsertion#23 = $z1;

        if doBlindInsertion#23 == 0 goto label04;

        if blindInsertion != 0 goto label04;

        $z2 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: boolean mayHaveKeyInFullBin(byte[])>(key);

        if $z2 == 0 goto label04;

        doBlindInsertion#23 = 0;

     label04:
        if doBlindInsertion#23 != 0 goto label05;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void mutateToFullBIN(boolean)>(1);

        index#6 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: int findEntry(byte[],boolean,boolean)>(key, 1, 0);

        if index#6 < 0 goto label06;

        $i4 = index#6 & 65536;

        if $i4 == 0 goto label06;

        $i5 = index#6 & -65537;

        return $i5;

     label05:
        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.evictor.Evictor getEvictor()>();

        virtualinvoke $r0.<berkeley.com.sleepycat.je.evictor.Evictor: void incBinDeltaBlindOps()>();

     label06:
        $i6 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        $i7 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: int getMaxEntries()>();

        if $i6 < $i7 goto label07;

        $r1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Node ");

        $l8 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getNodeId()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should have been split before calling insertEntry is BIN-delta: ");

        $z3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBINDelta()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" num entries: ");

        $i9 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" max entries: ");

        $i10 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: int getMaxEntries()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String)>($r1, $r11);

        throw $r12;

     label07:
        index#77 = index#6 + 1;

        $i11 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        if index#77 >= $i11 goto label08;

        oldSize#83 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: int computeLsnOverhead()>();

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void shiftEntriesRight(int)>(index#77);

        $i12 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: int computeLsnOverhead()>();

        $i13 = $i12 - oldSize#83;

        $l14 = (long) $i13;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void updateMemorySize(long)>($l14);

        goto label09;

     label08:
        $i15 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        $i16 = $i15 + 1;

        this.<berkeley.com.sleepycat.je.tree.IN: int nEntries> = $i16;

     label09:
        $z4 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBINDelta()>();

        if $z4 == 0 goto label10;

        $r14 = (berkeley.com.sleepycat.je.tree.BIN) this;

        virtualinvoke $r14.<berkeley.com.sleepycat.je.tree.BIN: void incFullBinNEntries()>();

     label10:
        oldSize#103 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: int computeLsnOverhead()>();

        if data == null goto label11;

        $r15 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $z5 = virtualinvoke $r15.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isDeferredWriteMode()>();

        if $z5 == 0 goto label12;

     label11:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setTarget(int,berkeley.com.sleepycat.je.tree.Node)>(index#77, child);

     label12:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setLsnInternal(int,long)>(index#77, childLsn);

        multiSlotChange = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean insertKey(int,byte[],byte[])>(index#77, key, data);

        $r16 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $r16[index#77] = state;

        if data == null goto label13;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setEmbeddedLN(int)>(index#77);

        $i17 = lengthof data;

        if $i17 != 0 goto label13;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setNoDataLN(int)>(index#77);

     label13:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void adjustCursorsForInsert(int)>(index#77);

        $l18 = (long) oldSize#103;

        $l19 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getEntryInMemorySize(int)>(index#77);

        $i20 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: int computeLsnOverhead()>();

        $l21 = (long) $i20;

        $l22 = $l19 + $l21;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void updateMemorySize(long,long)>($l18, $l22);

        if multiSlotChange == 0 goto label14;

        $l23 = this.<berkeley.com.sleepycat.je.tree.IN: long inMemorySize>;

        $l24 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long computeMemorySize()>();

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void updateMemorySize(long,long)>($l23, $l24);

     label14:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setDirty(boolean)>(1);

        $z6 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z6 != 0 goto label15;

        $z7 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z7 != 0 goto label15;

        $z8 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean hasCachedChildren()>();

        $z9 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean hasCachedChildrenFlag()>();

        if $z8 == $z9 goto label15;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();

        throw $r17;

     label15:
        $i25 = index#77 | 131072;

        return $i25;
    }

    public final int findEntry(byte[], boolean, boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        byte[] key;
        boolean indicateIfDuplicate, exact;
        int $i0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        key := @parameter0: byte[];

        indicateIfDuplicate := @parameter1: boolean;

        exact := @parameter2: boolean;

        $i0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: int findEntry(byte[],boolean,boolean,java.util.Comparator)>(key, indicateIfDuplicate, exact, null);

        return $i0;
    }

    public void mutateToFullBIN(boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        boolean leaveFreeSlot;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        leaveFreeSlot := @parameter0: boolean;

        return;
    }

    private void shiftEntriesRight(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int index, $i0, $i1, $i2, $i3, $i4;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        index := @parameter0: int;

        $i0 = index + 1;

        $i1 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        $i2 = $i1 - index;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void copyEntries(int,int,int)>(index, $i0, $i2);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void clearEntry(int)>(index);

        $i3 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        $i4 = $i3 + 1;

        this.<berkeley.com.sleepycat.je.tree.IN: int nEntries> = $i4;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setDirty(boolean)>(1);

        return;
    }

    private boolean insertKey(int, byte[], byte[])
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx, $i0;
        byte[] key, data;
        boolean $z0, $z1;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        key := @parameter1: byte[];

        data := @parameter2: byte[];

        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        if $i0 != 1 goto label1;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBINDelta()>();

        if $z0 != 0 goto label1;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setIdentifierKey(byte[],boolean)>(key, 1);

     label1:
        $z1 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean setKey(int,byte[],byte[],boolean)>(idx, key, data, 1);

        return $z1;
    }

    private void setEmbeddedLN(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx;
        byte[] $r0, $r1;
        byte $b1, $b2, $b3, $b5, $b6, $b7;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $b1 = $r0[idx];

        $b2 = $b1 | 16;

        $b3 = (byte) $b2;

        $r0[idx] = $b3;

        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $b5 = $r1[idx];

        $b6 = $b5 | 2;

        $b7 = (byte) $b6;

        $r1[idx] = $b7;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setDirty(boolean)>(1);

        return;
    }

    void setNoDataLN(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx;
        byte[] $r0, $r1;
        byte $b1, $b2, $b3, $b5, $b6, $b7;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $b1 = $r0[idx];

        $b2 = $b1 | 32;

        $b3 = (byte) $b2;

        $r0[idx] = $b3;

        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $b5 = $r1[idx];

        $b6 = $b5 | 2;

        $b7 = (byte) $b6;

        $r1[idx] = $b7;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setDirty(boolean)>(1);

        return;
    }

    void adjustCursorsForInsert(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int insertIndex;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        insertIndex := @parameter0: int;

        return;
    }

    private boolean setKey(int, byte[], byte[], boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx, newPrefixLen, $i4, $i5;
        byte[] key, data, suffix, $r0, $r2, $r3, $r4, $r5, $r6, $r7, newPrefix#35, $r10, $r15;
        boolean isInsertion, $z0, $z1, $z2;
        berkeley.com.sleepycat.je.tree.INKeyRep$Type prevRepType, oldRepType;
        byte $b1, $b2, $b3;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r1;
        berkeley.com.sleepycat.je.tree.INKeyRep $r8, $r11, $r12, $r13, $r16, $r18, $r19, $r20;
        java.lang.Object $r9, $r14, $r17, $r21;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        key := @parameter1: byte[];

        data := @parameter2: byte[];

        isInsertion := @parameter3: boolean;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $b1 = $r0[idx];

        $b2 = $b1 | 2;

        $b3 = (byte) $b2;

        $r0[idx] = $b3;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setDirty(boolean)>(1);

        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $z0 = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean getKeyPrefixing()>();

        if $z0 == 0 goto label07;

        $r2 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] keyPrefix>;

        if $r2 == null goto label07;

        $r3 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] keyPrefix>;

        $r4 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] keyPrefix>;

        $i4 = lengthof $r4;

        newPrefixLen = staticinvoke <berkeley.com.sleepycat.je.tree.Key: int getKeyPrefixLength(byte[],int,byte[])>($r3, $i4, key);

        $r5 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] keyPrefix>;

        $i5 = lengthof $r5;

        if newPrefixLen >= $i5 goto label04;

        if isInsertion == 0 goto label01;

        $r6 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] keyPrefix>;

        $r7 = staticinvoke <berkeley.com.sleepycat.je.tree.Key: byte[] createKeyPrefix(byte[],byte[])>($r6, key);

        goto label02;

     label01:
        $r7 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: byte[] computeKeyPrefix(int)>(idx);

     label02:
        newPrefix#35 = $r7;

        if newPrefix#35 == null goto label03;

        newPrefix#35 = staticinvoke <berkeley.com.sleepycat.je.tree.Key: byte[] createKeyPrefix(byte[],byte[])>(newPrefix#35, key);

     label03:
        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void recalcSuffixes(byte[],byte[],byte[],int)>(newPrefix#35, key, data, idx);

        return 1;

     label04:
        $r8 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $r9 = virtualinvoke $r8.<berkeley.com.sleepycat.je.tree.INKeyRep: java.lang.Object getType()>();

        prevRepType = (berkeley.com.sleepycat.je.tree.INKeyRep$Type) $r9;

        $r10 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] keyPrefix>;

        suffix = staticinvoke <berkeley.com.sleepycat.je.tree.IN: byte[] computeKeySuffix(byte[],byte[])>($r10, key);

        $r11 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $r12 = virtualinvoke $r11.<berkeley.com.sleepycat.je.tree.INKeyRep: berkeley.com.sleepycat.je.tree.INKeyRep set(int,byte[],byte[],berkeley.com.sleepycat.je.tree.IN)>(idx, suffix, data, this);

        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys> = $r12;

        $r13 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $r14 = virtualinvoke $r13.<berkeley.com.sleepycat.je.tree.INKeyRep: java.lang.Object getType()>();

        if prevRepType == $r14 goto label05;

        $z1 = 1;

        goto label06;

     label05:
        $z1 = 0;

     label06:
        return $z1;

     label07:
        $r15 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] keyPrefix>;

        if $r15 == null goto label08;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void recalcSuffixes(byte[],byte[],byte[],int)>(null, key, data, idx);

        return 1;

     label08:
        $r16 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $r17 = virtualinvoke $r16.<berkeley.com.sleepycat.je.tree.INKeyRep: java.lang.Object getType()>();

        oldRepType = (berkeley.com.sleepycat.je.tree.INKeyRep$Type) $r17;

        $r18 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $r19 = virtualinvoke $r18.<berkeley.com.sleepycat.je.tree.INKeyRep: berkeley.com.sleepycat.je.tree.INKeyRep set(int,byte[],byte[],berkeley.com.sleepycat.je.tree.IN)>(idx, key, data, this);

        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys> = $r19;

        $r20 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $r21 = virtualinvoke $r20.<berkeley.com.sleepycat.je.tree.INKeyRep: java.lang.Object getType()>();

        if oldRepType == $r21 goto label09;

        $z2 = 1;

        goto label10;

     label09:
        $z2 = 0;

     label10:
        return $z2;
    }

    private static byte[] computeKeySuffix(byte[], byte[])
    {
        byte[] prefix, key, 'ret';
        int prefixLen, suffixLen, $i0, $i1;

        prefix := @parameter0: byte[];

        key := @parameter1: byte[];

        if prefix != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $i0 = lengthof prefix;

     label2:
        prefixLen = $i0;

        if prefixLen != 0 goto label3;

        return key;

     label3:
        $i1 = lengthof key;

        suffixLen = $i1 - prefixLen;

        'ret' = newarray (byte)[suffixLen];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(key, prefixLen, 'ret', 0, suffixLen);

        return 'ret';
    }

    private byte[] computeKeyPrefix(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int excludeIdx, $i0, prefixLen#16, $i2, lastIdx#23, newPrefixLen#35, i#43, $i3, newPrefixLen#56;
        byte firstIdx, $b1;
        boolean byteOrdered, $z0;
        byte[] lastKey, curKey, 'ret', curPrefixKey#13;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        excludeIdx := @parameter0: int;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $z0 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean getKeyPrefixing()>();

        if $z0 == 0 goto label01;

        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        if $i0 > 1 goto label02;

     label01:
        return null;

     label02:
        if excludeIdx != 0 goto label03;

        $b1 = 1;

        goto label04;

     label03:
        $b1 = 0;

     label04:
        firstIdx = $b1;

        curPrefixKey#13 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: byte[] getKey(int)>(firstIdx);

        prefixLen#16 = lengthof curPrefixKey#13;

        byteOrdered = 0;

        if byteOrdered == 0 goto label07;

        $i2 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        lastIdx#23 = $i2 - 1;

        if lastIdx#23 != excludeIdx goto label05;

        lastIdx#23 = lastIdx#23 + -1;

     label05:
        if lastIdx#23 <= firstIdx goto label06;

        lastKey = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: byte[] getKey(int)>(lastIdx#23);

        newPrefixLen#35 = staticinvoke <berkeley.com.sleepycat.je.tree.Key: int getKeyPrefixLength(byte[],int,byte[])>(curPrefixKey#13, prefixLen#16, lastKey);

        if newPrefixLen#35 >= prefixLen#16 goto label06;

        curPrefixKey#13 = lastKey;

        prefixLen#16 = newPrefixLen#35;

     label06:
        goto label11;

     label07:
        i#43 = firstIdx + 1;

     label08:
        $i3 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        if i#43 >= $i3 goto label11;

        if i#43 != excludeIdx goto label09;

        goto label10;

     label09:
        curKey = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: byte[] getKey(int)>(i#43);

        newPrefixLen#56 = staticinvoke <berkeley.com.sleepycat.je.tree.Key: int getKeyPrefixLength(byte[],int,byte[])>(curPrefixKey#13, prefixLen#16, curKey);

        if newPrefixLen#56 >= prefixLen#16 goto label10;

        curPrefixKey#13 = curKey;

        prefixLen#16 = newPrefixLen#56;

     label10:
        i#43 = i#43 + 1;

        goto label08;

     label11:
        'ret' = newarray (byte)[prefixLen#16];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(curPrefixKey#13, 0, 'ret', 0, prefixLen#16);

        return 'ret';
    }

    private void recalcSuffixes(byte[], byte[], byte[], int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        byte[] newPrefix, key, data, curKey, suffix, $r0, curData#12;
        int idx, i#2, $i0;
        boolean $z0;
        berkeley.com.sleepycat.je.tree.INKeyRep $r1, $r2, $r3;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        newPrefix := @parameter0: byte[];

        key := @parameter1: byte[];

        data := @parameter2: byte[];

        idx := @parameter3: int;

        i#2 = 0;

     label1:
        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        if i#2 >= $i0 goto label6;

        if i#2 != idx goto label2;

        $r0 = key;

        goto label3;

     label2:
        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: byte[] getKey(int)>(i#2);

     label3:
        curKey = $r0;

        curData#12 = null;

        if i#2 != idx goto label4;

        curData#12 = data;

        goto label5;

     label4:
        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean haveEmbeddedData(int)>(i#2);

        if $z0 == 0 goto label5;

        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        curData#12 = virtualinvoke $r1.<berkeley.com.sleepycat.je.tree.INKeyRep: byte[] getData(int)>(i#2);

     label5:
        suffix = staticinvoke <berkeley.com.sleepycat.je.tree.IN: byte[] computeKeySuffix(byte[],byte[])>(newPrefix, curKey);

        $r2 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $r3 = virtualinvoke $r2.<berkeley.com.sleepycat.je.tree.INKeyRep: berkeley.com.sleepycat.je.tree.INKeyRep set(int,byte[],byte[],berkeley.com.sleepycat.je.tree.IN)>(i#2, suffix, curData#12, this);

        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys> = $r3;

        i#2 = i#2 + 1;

        goto label1;

     label6:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setKeyPrefix(byte[])>(newPrefix);

        return;
    }

    final void setKeyPrefix(byte[])
    {
        berkeley.com.sleepycat.je.tree.IN this;
        byte[] keyPrefix, $r2, $r3;
        int prevLength, currLength, $i0, $i1;
        boolean $z0;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r0;
        java.lang.AssertionError $r1;
        long $l2, $l3;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        keyPrefix := @parameter0: byte[];

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        if $r0 != null goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $r2 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] keyPrefix>;

        if $r2 != null goto label2;

        $i0 = 0;

        goto label3;

     label2:
        $r3 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] keyPrefix>;

        $i0 = lengthof $r3;

     label3:
        prevLength = $i0;

        this.<berkeley.com.sleepycat.je.tree.IN: byte[] keyPrefix> = keyPrefix;

        if keyPrefix != null goto label4;

        $i1 = 0;

        goto label5;

     label4:
        $i1 = lengthof keyPrefix;

     label5:
        currLength = $i1;

        $l2 = (long) prevLength;

        $l3 = (long) currLength;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void updateMemorySize(long,long)>($l2, $l3);

        return;
    }

    public final int findEntry(byte[], boolean, boolean, java.util.Comparator)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        byte[] key, $r4;
        boolean indicateIfDuplicate, exact, entryZeroSpecialCompare, $z0, $z1, middle#15, $z2, $z3, $z4, $z5, $z6;
        java.util.Comparator comparator#1;
        java.lang.AssertionError $r0, $r2;
        int $i0, high#11, low#13, $i1, $i2, middle#37, s#41, ret#64, $i3;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r1;
        berkeley.com.sleepycat.je.tree.INKeyRep $r3;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        key := @parameter0: byte[];

        indicateIfDuplicate := @parameter1: boolean;

        exact := @parameter2: boolean;

        comparator#1 := @parameter3: java.util.Comparator;

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $z1 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean idKeyIsSlotKey()>();

        if $z1 != 0 goto label01;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label01:
        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        high#11 = $i0 - 1;

        low#13 = 0;

        middle#15 = 0;

        if comparator#1 != null goto label02;

        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        comparator#1 = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator getKeyComparator()>();

     label02:
        $z2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isUpperIN()>();

        if $z2 == 0 goto label03;

        if exact != 0 goto label03;

        if indicateIfDuplicate != 0 goto label03;

        $z3 = 1;

        goto label04;

     label03:
        $z3 = 0;

     label04:
        entryZeroSpecialCompare = $z3;

        $z4 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z4 != 0 goto label05;

        $i1 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        if $i1 >= 0 goto label05;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label05:
        if low#13 > high#11 goto label14;

        $i2 = high#11 + low#13;

        middle#37 = $i2 / 2;

        if middle#37 != 0 goto label06;

        if entryZeroSpecialCompare == 0 goto label06;

        s#41 = 1;

        goto label07;

     label06:
        $r3 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $r4 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] keyPrefix>;

        $z5 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean haveEmbeddedData(int)>(middle#37);

        s#41 = virtualinvoke $r3.<berkeley.com.sleepycat.je.tree.INKeyRep: int compareKeys(byte[],byte[],int,boolean,java.util.Comparator)>(key, $r4, middle#37, $z5, comparator#1);

     label07:
        if s#41 >= 0 goto label08;

        high#11 = middle#37 - 1;

        goto label13;

     label08:
        if s#41 <= 0 goto label09;

        low#13 = middle#37 + 1;

        goto label13;

     label09:
        if indicateIfDuplicate == 0 goto label10;

        ret#64 = middle#37 | 65536;

        goto label11;

     label10:
        ret#64 = middle#37;

     label11:
        if ret#64 < 0 goto label12;

        if exact == 0 goto label12;

        $i3 = ret#64 & 65535;

        $z6 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isEntryKnownDeleted(int)>($i3);

        if $z6 == 0 goto label12;

        return -1;

     label12:
        return ret#64;

     label13:
        goto label05;

     label14:
        if exact == 0 goto label15;

        return -1;

     label15:
        return high#11;
    }

    private boolean idKeyIsSlotKey()
    {
        berkeley.com.sleepycat.je.tree.IN this;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        return 1;
    }

    public final berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnvImplForFatalException()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r0;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r1;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        return $r1;
    }

    public final int getLatchTimeoutMs()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r0;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r1;
        int $i0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $i0 = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: int getLatchTimeoutMs()>();

        return $i0;
    }

    protected long getFixedMemoryOverhead()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int $i0;
        long $l1;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $i0 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: int IN_FIXED_OVERHEAD>;

        $l1 = (long) $i0;

        return $l1;
    }

    public java.lang.String beginTag()
    {
        berkeley.com.sleepycat.je.tree.IN this;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        return "<in>";
    }

    public java.lang.String endTag()
    {
        berkeley.com.sleepycat.je.tree.IN this;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        return "</in>";
    }

    boolean isAlwaysLatchedExclusively()
    {
        berkeley.com.sleepycat.je.tree.IN this;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        return 0;
    }

    private void discardProvisionalObsolete() throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo $r0, $r1;
        int $i0, $i1;
        long $l2;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo provisionalObsolete>;

        if $r0 == null goto label1;

        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo provisionalObsolete>;

        $i0 = virtualinvoke $r1.<berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo: int getMemorySize()>();

        $i1 = 0 - $i0;

        $l2 = (long) $i1;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void updateMemorySize(long)>($l2);

        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo provisionalObsolete> = null;

     label1:
        return;
    }

    public berkeley.com.sleepycat.je.log.LogEntryType getLogType()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.log.LogEntryType $r0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $r0 = <berkeley.com.sleepycat.je.log.LogEntryType: berkeley.com.sleepycat.je.log.LogEntryType LOG_IN>;

        return $r0;
    }

    public final java.lang.String getLatchName()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        java.lang.StringBuilder $r0, $r2, $r3;
        java.lang.String $r1, $r4;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: java.lang.String shortClassName()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $l0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getNodeId()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public final berkeley.com.sleepycat.je.latch.LatchTable getLatchTable()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.latch.LatchTable $r0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $r0 = <berkeley.com.sleepycat.je.latch.LatchSupport: berkeley.com.sleepycat.je.latch.LatchTable btreeLatchTable>;

        return $r0;
    }

    long optionalLogProvisionalNoCompress(berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.tree.IN this, parent;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        parent := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        $l0 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: long optionalLogProvisional(berkeley.com.sleepycat.je.tree.IN,boolean)>(parent, 0);

        return $l0;
    }

    private long optionalLogProvisional(berkeley.com.sleepycat.je.tree.IN, boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this, parent;
        boolean allowCompress, $z0;
        berkeley.com.sleepycat.je.log.Provisional $r0;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r1;
        long $l0, $l1;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        parent := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        allowCompress := @parameter1: boolean;

        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $z0 = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isDeferredWriteMode()>();

        if $z0 == 0 goto label1;

        $l0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getLastLoggedLsn()>();

        return $l0;

     label1:
        $r0 = <berkeley.com.sleepycat.je.log.Provisional: berkeley.com.sleepycat.je.log.Provisional YES>;

        $l1 = staticinvoke <berkeley.com.sleepycat.je.tree.IN: long logInternal(berkeley.com.sleepycat.je.tree.IN,berkeley.com.sleepycat.je.log.entry.INLogEntry,boolean,boolean,berkeley.com.sleepycat.je.log.Provisional,boolean,berkeley.com.sleepycat.je.tree.IN)>(this, null, 0, allowCompress, $r0, 0, parent);

        return $l1;
    }

    public final void insertRecord(int, berkeley.com.sleepycat.je.tree.LN, long, int, byte[], byte[], int, boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx, newSize, expiration;
        berkeley.com.sleepycat.je.tree.LN newLN;
        long newLSN, oldSlotSize, newSlotSize, $l0, $l1, $l2;
        byte[] newKey, newData;
        boolean expirationInHours, multiSlotChange, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        berkeley.com.sleepycat.je.tree.BIN bin;
        java.lang.AssertionError $r0, $r2;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r1;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        newLN := @parameter1: berkeley.com.sleepycat.je.tree.LN;

        newLSN := @parameter2: long;

        newSize := @parameter3: int;

        newKey := @parameter4: byte[];

        newData := @parameter5: byte[];

        expiration := @parameter6: int;

        expirationInHours := @parameter7: boolean;

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        bin = (berkeley.com.sleepycat.je.tree.BIN) this;

        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void freeOffHeapLN(int)>(idx);

        oldSlotSize = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getEntryInMemorySize(int)>(idx);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setLsn(int,long)>(idx, newLSN);

        multiSlotChange = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean updateLNSlotKey(int,byte[],byte[])>(idx, newKey, newData);

        $z2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isEmbeddedLN(int)>(idx);

        if $z2 == 0 goto label2;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void clearLastLoggedSize(int)>(idx);

        $l0 = virtualinvoke newLN.<berkeley.com.sleepycat.je.tree.LN: long getVLSNSequence()>();

        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void setCachedVLSN(int,long)>(idx, $l0);

        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $z3 = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isDeferredWriteMode()>();

        if $z3 == 0 goto label3;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setTarget(int,berkeley.com.sleepycat.je.tree.Node)>(idx, newLN);

        goto label3;

     label2:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setTarget(int,berkeley.com.sleepycat.je.tree.Node)>(idx, newLN);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setLastLoggedSize(int,int)>(idx, newSize);

     label3:
        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void setExpiration(int,int,boolean)>(idx, expiration, expirationInHours);

        if multiSlotChange == 0 goto label4;

        $l1 = this.<berkeley.com.sleepycat.je.tree.IN: long inMemorySize>;

        $l2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long computeMemorySize()>();

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void updateMemorySize(long,long)>($l1, $l2);

        goto label5;

     label4:
        newSlotSize = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getEntryInMemorySize(int)>(idx);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void updateMemorySize(long,long)>(oldSlotSize, newSlotSize);

     label5:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void clearKnownDeleted(int)>(idx);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void clearPendingDeleted(int)>(idx);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setDirty(boolean)>(1);

        $z4 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z4 != 0 goto label6;

        $z5 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z5 != 0 goto label6;

        $z6 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean hasCachedChildren()>();

        $z7 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean hasCachedChildrenFlag()>();

        if $z6 == $z7 goto label6;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label6:
        return;
    }

    private boolean updateLNSlotKey(int, byte[], byte[])
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx, $i0, $i5;
        byte[] data, key#1, $r3, $r4, $r11, key#97;
        boolean haveEmbeddedData, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.AssertionError $r0;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r1, $r2;
        byte $b2, $b3, $b4, $b7, $b8, $b9;
        berkeley.com.sleepycat.je.tree.INKeyRep $r5, $r7, $r8, $r9, $r12, $r13, $r15, $r16, $r17;
        java.lang.Object $r6, $r10, $r14, $r18;
        berkeley.com.sleepycat.je.tree.INKeyRep$Type oldRepType#65, oldRepType#102;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        key#1 := @parameter1: byte[];

        data := @parameter2: byte[];

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z1 != 0 goto label01;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label01:
        haveEmbeddedData = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean haveEmbeddedData(int)>(idx);

        if data != null goto label02;

        $z2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isEmbeddedLN(int)>(idx);

        if $z2 == 0 goto label05;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void clearEmbeddedLN(int)>(idx);

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void clearNoDataLN(int)>(idx);

        goto label05;

     label02:
        $z3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isEmbeddedLN(int)>(idx);

        if $z3 != 0 goto label03;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setEmbeddedLN(int)>(idx);

     label03:
        $i0 = lengthof data;

        if $i0 != 0 goto label04;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setNoDataLN(int)>(idx);

        goto label05;

     label04:
        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void clearNoDataLN(int)>(idx);

     label05:
        if key#1 == null goto label07;

        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $z4 = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean allowsKeyUpdates()>();

        if $z4 != 0 goto label06;

        $r2 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $z5 = staticinvoke <berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: boolean needsConversion(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>($r2);

        if $z5 == 0 goto label07;

     label06:
        $r3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: byte[] getKey(int)>(idx);

        $z6 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(key#1, $r3);

        if $z6 != 0 goto label07;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setDirty(boolean)>(1);

        $z7 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean setKey(int,byte[],byte[],boolean)>(idx, key#1, data, 0);

        return $z7;

     label07:
        if haveEmbeddedData == 0 goto label10;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setDirty(boolean)>(1);

        $r4 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $b2 = $r4[idx];

        $b3 = $b2 | 2;

        $b4 = (byte) $b3;

        $r4[idx] = $b4;

        $r5 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $r6 = virtualinvoke $r5.<berkeley.com.sleepycat.je.tree.INKeyRep: java.lang.Object getType()>();

        oldRepType#65 = (berkeley.com.sleepycat.je.tree.INKeyRep$Type) $r6;

        $r7 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $r8 = virtualinvoke $r7.<berkeley.com.sleepycat.je.tree.INKeyRep: berkeley.com.sleepycat.je.tree.INKeyRep setData(int,byte[],berkeley.com.sleepycat.je.tree.IN)>(idx, data, this);

        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys> = $r8;

        $r9 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $r10 = virtualinvoke $r9.<berkeley.com.sleepycat.je.tree.INKeyRep: java.lang.Object getType()>();

        if oldRepType#65 == $r10 goto label08;

        $z8 = 1;

        goto label09;

     label08:
        $z8 = 0;

     label09:
        return $z8;

     label10:
        if data == null goto label13;

        $i5 = lengthof data;

        if $i5 == 0 goto label13;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setDirty(boolean)>(1);

        $r11 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $b7 = $r11[idx];

        $b8 = $b7 | 2;

        $b9 = (byte) $b8;

        $r11[idx] = $b9;

        $r12 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        key#97 = virtualinvoke $r12.<berkeley.com.sleepycat.je.tree.INKeyRep: byte[] getKey(int,boolean)>(idx, 0);

        $r13 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $r14 = virtualinvoke $r13.<berkeley.com.sleepycat.je.tree.INKeyRep: java.lang.Object getType()>();

        oldRepType#102 = (berkeley.com.sleepycat.je.tree.INKeyRep$Type) $r14;

        $r15 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $r16 = virtualinvoke $r15.<berkeley.com.sleepycat.je.tree.INKeyRep: berkeley.com.sleepycat.je.tree.INKeyRep set(int,byte[],byte[],berkeley.com.sleepycat.je.tree.IN)>(idx, key#97, data, this);

        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys> = $r16;

        $r17 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $r18 = virtualinvoke $r17.<berkeley.com.sleepycat.je.tree.INKeyRep: java.lang.Object getType()>();

        if oldRepType#102 == $r18 goto label11;

        $z9 = 1;

        goto label12;

     label11:
        $z9 = 0;

     label12:
        return $z9;

     label13:
        return 0;
    }

    final void clearKnownDeleted(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx;
        boolean $z0, $z1;
        java.lang.AssertionError $r0;
        byte[] $r1, $r2;
        byte $b1, $b2, $b3, $b5, $b6, $b7;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $b1 = $r1[idx];

        $b2 = $b1 & -2;

        $b3 = (byte) $b2;

        $r1[idx] = $b3;

        $r2 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $b5 = $r2[idx];

        $b6 = $b5 | 2;

        $b7 = (byte) $b6;

        $r2[idx] = $b7;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setDirty(boolean)>(1);

        return;
    }

    final void clearPendingDeleted(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx;
        byte[] $r0, $r1;
        byte $b1, $b2, $b3, $b5, $b6, $b7;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $b1 = $r0[idx];

        $b2 = $b1 & -9;

        $b3 = (byte) $b2;

        $r0[idx] = $b3;

        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $b5 = $r1[idx];

        $b6 = $b5 | 2;

        $b7 = (byte) $b6;

        $r1[idx] = $b7;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setDirty(boolean)>(1);

        return;
    }

    private void clearEmbeddedLN(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx;
        byte[] $r0, $r1;
        byte $b1, $b2, $b3, $b5, $b6, $b7;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $b1 = $r0[idx];

        $b2 = $b1 & -17;

        $b3 = (byte) $b2;

        $r0[idx] = $b3;

        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $b5 = $r1[idx];

        $b6 = $b5 | 2;

        $b7 = (byte) $b6;

        $r1[idx] = $b7;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setDirty(boolean)>(1);

        return;
    }

    private void clearNoDataLN(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx;
        byte[] $r0, $r1;
        byte $b1, $b2, $b3, $b5, $b6, $b7;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $b1 = $r0[idx];

        $b2 = $b1 & -33;

        $b3 = (byte) $b2;

        $r0[idx] = $b3;

        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $b5 = $r1[idx];

        $b6 = $b5 | 2;

        $b7 = (byte) $b6;

        $r1[idx] = $b7;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setDirty(boolean)>(1);

        return;
    }

    public final void setKnownDeletedAndEvictLN(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int index;
        berkeley.com.sleepycat.je.tree.LN oldLN;
        boolean $z0, $z1;
        java.lang.AssertionError $r0;
        berkeley.com.sleepycat.je.tree.Node $r1;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        index := @parameter0: int;

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setKnownDeleted(int)>(index);

        $r1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.Node getTarget(int)>(index);

        oldLN = (berkeley.com.sleepycat.je.tree.LN) $r1;

        if oldLN == null goto label2;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void updateMemorySize(berkeley.com.sleepycat.je.tree.Node,berkeley.com.sleepycat.je.tree.Node)>(oldLN, null);

        virtualinvoke oldLN.<berkeley.com.sleepycat.je.tree.LN: void releaseMemoryBudget()>();

     label2:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setTarget(int,berkeley.com.sleepycat.je.tree.Node)>(index, null);

        return;
    }

    public final void setKnownDeleted(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx;
        boolean $z0, $z1;
        java.lang.AssertionError $r0;
        byte[] $r1, $r2, $r3;
        byte $b1, $b2, $b3, $b5, $b6, $b7, $b9, $b10, $b11;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $b1 = $r1[idx];

        $b2 = $b1 | 1;

        $b3 = (byte) $b2;

        $r1[idx] = $b3;

        $r2 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $b5 = $r2[idx];

        $b6 = $b5 & -9;

        $b7 = (byte) $b6;

        $r2[idx] = $b7;

        $r3 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $b9 = $r3[idx];

        $b10 = $b9 | 2;

        $b11 = (byte) $b10;

        $r3[idx] = $b11;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setDirty(boolean)>(1);

        return;
    }

    void updateMemorySize(berkeley.com.sleepycat.je.tree.Node, berkeley.com.sleepycat.je.tree.Node)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.tree.Node oldNode, newNode;
        long delta#2, $l0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        oldNode := @parameter0: berkeley.com.sleepycat.je.tree.Node;

        newNode := @parameter1: berkeley.com.sleepycat.je.tree.Node;

        delta#2 = 0L;

        if newNode == null goto label1;

        delta#2 = virtualinvoke newNode.<berkeley.com.sleepycat.je.tree.Node: long getMemorySizeIncludedByParent()>();

     label1:
        if oldNode == null goto label2;

        $l0 = virtualinvoke oldNode.<berkeley.com.sleepycat.je.tree.Node: long getMemorySizeIncludedByParent()>();

        delta#2 = delta#2 - $l0;

     label2:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void updateMemorySize(long)>(delta#2);

        return;
    }

    public final byte[] getData(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx;
        boolean $z0, $z1;
        berkeley.com.sleepycat.je.tree.INKeyRep $r0;
        byte[] $r1, $r2;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean haveEmbeddedData(int)>(idx);

        if $z0 == 0 goto label1;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.tree.INKeyRep: byte[] getData(int)>(idx);

        return $r1;

     label1:
        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isNoDataLN(int)>(idx);

        if $z1 == 0 goto label2;

        $r2 = <berkeley.com.sleepycat.je.tree.Key: byte[] EMPTY_KEY>;

        return $r2;

     label2:
        return null;
    }

    public final berkeley.com.sleepycat.je.tree.LN fetchLN(int, berkeley.com.sleepycat.je.CacheMode)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx;
        berkeley.com.sleepycat.je.CacheMode cacheMode;
        berkeley.com.sleepycat.je.tree.Node $r0;
        berkeley.com.sleepycat.je.tree.LN $r1;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        cacheMode := @parameter1: berkeley.com.sleepycat.je.CacheMode;

        $r0 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.Node fetchLN(int,berkeley.com.sleepycat.je.CacheMode,boolean)>(idx, cacheMode, 0);

        $r1 = (berkeley.com.sleepycat.je.tree.LN) $r0;

        return $r1;
    }

    private berkeley.com.sleepycat.je.tree.Node fetchLN(int, berkeley.com.sleepycat.je.CacheMode, boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx, $i1, $i2;
        berkeley.com.sleepycat.je.CacheMode cacheMode, $r12, $r13, $r14, $r15, $r31, $r32;
        boolean dupConvert, $z0, $z1, $z2, $z3, isMiss#21, $z4, $z5, $z6, $z7, $z8, $z9;
        berkeley.com.sleepycat.je.tree.BIN bin;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        berkeley.com.sleepycat.je.evictor.OffHeapCache ohCache;
        long lsn;
        berkeley.com.sleepycat.je.log.WholeEntry wholeEntry;
        berkeley.com.sleepycat.je.log.entry.LogEntry logEntry, $r10;
        berkeley.com.sleepycat.je.log.entry.LNLogEntry lnEntry;
        berkeley.com.sleepycat.je.tree.LN ln;
        java.lang.AssertionError $r0;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r1, $r5, $r7, $r21, $r24, e#127, $r27;
        berkeley.com.sleepycat.je.tree.INTargetRep $r2;
        java.lang.Object $r3, $r18;
        berkeley.com.sleepycat.je.tree.Node child#27;
        byte $b0;
        java.lang.String $r4, $r23, $r25, $r29, $r30;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r6, $r11, $r17, $r19;
        byte[] lnSlotKey#51;
        berkeley.com.sleepycat.je.log.LogManager $r8;
        berkeley.com.sleepycat.je.log.LogEntryHeader $r9;
        berkeley.com.sleepycat.je.evictor.Evictor $r16;
        java.io.FileNotFoundException $r20, e#108;
        berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason $r22, $r28;
        java.lang.RuntimeException $r26, e#136;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        cacheMode := @parameter1: berkeley.com.sleepycat.je.CacheMode;

        dupConvert := @parameter2: boolean;

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z1 != 0 goto label01;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label01:
        $z2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isLatchExclusiveOwner()>();

        if $z2 != 0 goto label02;

        $r1 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>("EX-latch not held before fetch");

        throw $r1;

     label02:
        $z3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isEntryKnownDeleted(int)>(idx);

        if $z3 == 0 goto label03;

        return null;

     label03:
        bin = (berkeley.com.sleepycat.je.tree.BIN) this;

        envImpl = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        ohCache = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.evictor.OffHeapCache getOffHeapCache()>();

        isMiss#21 = 0;

        $r2 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets>;

        $r3 = virtualinvoke $r2.<berkeley.com.sleepycat.je.tree.INTargetRep: java.lang.Object get(int)>(idx);

        child#27 = (berkeley.com.sleepycat.je.tree.Node) $r3;

        if child#27 != null goto label14;

        lsn = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getLsn(int)>(idx);

        $b0 = lsn cmp -1L;

        if $b0 != 0 goto label04;

        $r4 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: java.lang.String makeFetchErrorMsg(java.lang.String,long,int)>("NULL_LSN without KnownDeleted", lsn, idx);

        $r5 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>($r4);

        throw $r5;

     label04:
        $z4 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isEmbeddedLN(int)>(idx);

        if $z4 != 0 goto label05;

        $r6 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $z5 = virtualinvoke $r6.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isLNImmediatelyObsolete()>();

        if $z5 == 0 goto label06;

        if dupConvert != 0 goto label06;

     label05:
        $r7 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>("May not fetch immediately obsolete LN");

        throw $r7;

     label06:
        lnSlotKey#51 = null;

        child#27 = virtualinvoke ohCache.<berkeley.com.sleepycat.je.evictor.OffHeapCache: berkeley.com.sleepycat.je.tree.LN loadLN(berkeley.com.sleepycat.je.tree.BIN,int,berkeley.com.sleepycat.je.CacheMode)>(bin, idx, cacheMode);

        if child#27 != null goto label08;

        $r8 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.log.LogManager getLogManager()>();

        $i1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: int getLastLoggedSize(int)>(idx);

        wholeEntry = virtualinvoke $r8.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.WholeEntry getLogEntryAllowInvisibleAtRecovery(long,int)>(lsn, $i1);

        $r9 = virtualinvoke wholeEntry.<berkeley.com.sleepycat.je.log.WholeEntry: berkeley.com.sleepycat.je.log.LogEntryHeader getHeader()>();

        $i2 = virtualinvoke $r9.<berkeley.com.sleepycat.je.log.LogEntryHeader: int getEntrySize()>();

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setLastLoggedSize(int,int)>(idx, $i2);

        logEntry = virtualinvoke wholeEntry.<berkeley.com.sleepycat.je.log.WholeEntry: berkeley.com.sleepycat.je.log.entry.LogEntry getEntry()>();

        $z6 = logEntry instanceof berkeley.com.sleepycat.je.log.entry.LNLogEntry;

        if $z6 == 0 goto label07;

        $r10 = virtualinvoke wholeEntry.<berkeley.com.sleepycat.je.log.WholeEntry: berkeley.com.sleepycat.je.log.entry.LogEntry getEntry()>();

        lnEntry = (berkeley.com.sleepycat.je.log.entry.LNLogEntry) $r10;

        $r11 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        virtualinvoke lnEntry.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: void postFetchInit(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>($r11);

        lnSlotKey#51 = virtualinvoke lnEntry.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: byte[] getKey()>();

        $r12 = <berkeley.com.sleepycat.je.CacheMode: berkeley.com.sleepycat.je.CacheMode EVICT_LN>;

        if cacheMode == $r12 goto label07;

        $r13 = <berkeley.com.sleepycat.je.CacheMode: berkeley.com.sleepycat.je.CacheMode EVICT_BIN>;

        if cacheMode == $r13 goto label07;

        $r14 = <berkeley.com.sleepycat.je.CacheMode: berkeley.com.sleepycat.je.CacheMode UNCHANGED>;

        if cacheMode == $r14 goto label07;

        $r15 = <berkeley.com.sleepycat.je.CacheMode: berkeley.com.sleepycat.je.CacheMode MAKE_COLD>;

        if cacheMode == $r15 goto label07;

        $r16 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.evictor.Evictor getEvictor()>();

        virtualinvoke $r16.<berkeley.com.sleepycat.je.evictor.Evictor: void moveToPri1LRU(berkeley.com.sleepycat.je.tree.IN)>(this);

     label07:
        $r17 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $r18 = interfaceinvoke logEntry.<berkeley.com.sleepycat.je.log.entry.LogEntry: java.lang.Object getResolvedItem(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>($r17);

        child#27 = (berkeley.com.sleepycat.je.tree.Node) $r18;

        isMiss#21 = 1;

     label08:
        $r19 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        virtualinvoke child#27.<berkeley.com.sleepycat.je.tree.Node: void postFetchInit(berkeley.com.sleepycat.je.dbi.DatabaseImpl,long)>($r19, lsn);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void attachNode(int,berkeley.com.sleepycat.je.tree.Node,byte[])>(idx, child#27, lnSlotKey#51);

     label09:
        goto label14;

     label10:
        $r20 := @caughtexception;

        e#108 = $r20;

        $z7 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: boolean isDeleted(int)>(idx);

        if $z7 != 0 goto label11;

        $z8 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: boolean isProbablyExpired(int)>(idx);

        if $z8 != 0 goto label11;

        $r21 = new berkeley.com.sleepycat.je.EnvironmentFailureException;

        $r22 = <berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason: berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason LOG_FILE_NOT_FOUND>;

        $r23 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: java.lang.String makeFetchErrorMsg(java.lang.String,long,int)>(null, lsn, idx);

        specialinvoke $r21.<berkeley.com.sleepycat.je.EnvironmentFailureException: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason,java.lang.String,java.lang.Throwable)>(envImpl, $r22, $r23, e#108);

        throw $r21;

     label11:
        return null;

     label12:
        $r24 := @caughtexception;

        e#127 = $r24;

        $r25 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: java.lang.String makeFetchErrorMsg(java.lang.String,long,int)>(null, lsn, idx);

        virtualinvoke e#127.<berkeley.com.sleepycat.je.EnvironmentFailureException: void addErrorMessage(java.lang.String)>($r25);

        throw e#127;

     label13:
        $r26 := @caughtexception;

        e#136 = $r26;

        $r27 = new berkeley.com.sleepycat.je.EnvironmentFailureException;

        $r28 = <berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason: berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason LOG_INTEGRITY>;

        $r29 = virtualinvoke e#136.<java.lang.RuntimeException: java.lang.String toString()>();

        $r30 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: java.lang.String makeFetchErrorMsg(java.lang.String,long,int)>($r29, lsn, idx);

        specialinvoke $r27.<berkeley.com.sleepycat.je.EnvironmentFailureException: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason,java.lang.String,java.lang.Throwable)>(envImpl, $r28, $r30, e#136);

        throw $r27;

     label14:
        $z9 = virtualinvoke child#27.<berkeley.com.sleepycat.je.tree.Node: boolean isLN()>();

        if $z9 == 0 goto label16;

        ln = (berkeley.com.sleepycat.je.tree.LN) child#27;

        $r31 = <berkeley.com.sleepycat.je.CacheMode: berkeley.com.sleepycat.je.CacheMode UNCHANGED>;

        if cacheMode == $r31 goto label15;

        $r32 = <berkeley.com.sleepycat.je.CacheMode: berkeley.com.sleepycat.je.CacheMode MAKE_COLD>;

        if cacheMode == $r32 goto label15;

        virtualinvoke ln.<berkeley.com.sleepycat.je.tree.LN: void setFetchedCold(boolean)>(0);

     label15:
        virtualinvoke ohCache.<berkeley.com.sleepycat.je.evictor.OffHeapCache: void freeRedundantLN(berkeley.com.sleepycat.je.tree.BIN,int,berkeley.com.sleepycat.je.tree.LN,berkeley.com.sleepycat.je.CacheMode)>(bin, idx, ln, cacheMode);

     label16:
        virtualinvoke child#27.<berkeley.com.sleepycat.je.tree.Node: void incFetchStats(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,boolean)>(envImpl, isMiss#21);

        return child#27;

        catch java.io.FileNotFoundException from label06 to label09 with label10;
        catch berkeley.com.sleepycat.je.EnvironmentFailureException from label06 to label09 with label12;
        catch java.lang.RuntimeException from label06 to label09 with label13;
    }

    public java.lang.String makeFetchErrorMsg(java.lang.String, long, int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        java.lang.String msg, $r1;
        long lsn, expirationTime#17;
        int idx, $i1;
        byte state, $b0;
        berkeley.com.sleepycat.je.tree.BIN bin;
        byte[] $r0;
        boolean $z0, $z1;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        msg := @parameter0: java.lang.String;

        lsn := @parameter1: long;

        idx := @parameter2: int;

        if idx < 0 goto label1;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $b0 = $r0[idx];

        goto label2;

     label1:
        $b0 = 0;

     label2:
        state = $b0;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z0 == 0 goto label3;

        if idx < 0 goto label3;

        bin = (berkeley.com.sleepycat.je.tree.BIN) this;

        $i1 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: int getExpiration(int)>(idx);

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isExpirationInHours()>();

        expirationTime#17 = staticinvoke <berkeley.com.sleepycat.je.dbi.TTL: long expirationToSystemTime(int,boolean)>($i1, $z1);

        goto label4;

     label3:
        expirationTime#17 = 0L;

     label4:
        $r1 = staticinvoke <berkeley.com.sleepycat.je.tree.IN: java.lang.String makeFetchErrorMsg(java.lang.String,berkeley.com.sleepycat.je.tree.IN,long,byte,long)>(msg, this, lsn, state, expirationTime#17);

        return $r1;
    }

    public final void attachNode(int, berkeley.com.sleepycat.je.tree.Node, byte[])
    {
        berkeley.com.sleepycat.je.tree.IN this, $r0;
        int idx;
        berkeley.com.sleepycat.je.tree.Node node, $r2;
        byte[] newKey;
        long oldSlotSize, newSlotSize, $l0, $l1;
        boolean $z0, $z1, $z2, $z3, multiSlotChange#22, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.lang.AssertionError $r1, $r3, $r4, $r5;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        node := @parameter1: berkeley.com.sleepycat.je.tree.Node;

        newKey := @parameter2: byte[];

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = node instanceof berkeley.com.sleepycat.je.tree.IN;

        if $z1 == 0 goto label1;

        $r0 = (berkeley.com.sleepycat.je.tree.IN) node;

        $z2 = virtualinvoke $r0.<berkeley.com.sleepycat.je.tree.IN: boolean isLatchExclusiveOwner()>();

        if $z2 != 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        oldSlotSize = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getEntryInMemorySize(int)>(idx);

        $z3 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z3 != 0 goto label2;

        $r2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.Node getTarget(int)>(idx);

        if $r2 == null goto label2;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setTarget(int,berkeley.com.sleepycat.je.tree.Node)>(idx, node);

        multiSlotChange#22 = 0;

        $z4 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z4 == 0 goto label4;

        if newKey == null goto label4;

        $z5 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z5 != 0 goto label3;

        $z6 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean haveEmbeddedData(int)>(idx);

        if $z6 == 0 goto label3;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label3:
        multiSlotChange#22 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean updateLNSlotKey(int,byte[],byte[])>(idx, newKey, null);

     label4:
        if multiSlotChange#22 == 0 goto label5;

        $l0 = this.<berkeley.com.sleepycat.je.tree.IN: long inMemorySize>;

        $l1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long computeMemorySize()>();

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void updateMemorySize(long,long)>($l0, $l1);

        goto label6;

     label5:
        newSlotSize = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getEntryInMemorySize(int)>(idx);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void updateMemorySize(long,long)>(oldSlotSize, newSlotSize);

     label6:
        $z7 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z7 != 0 goto label7;

        $z8 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z8 != 0 goto label7;

        $z9 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean hasCachedChildren()>();

        $z10 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean hasCachedChildrenFlag()>();

        if $z9 == $z10 goto label7;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label7:
        return;
    }

    static java.lang.String makeFetchErrorMsg(java.lang.String, berkeley.com.sleepycat.je.tree.IN, long, byte, long)
    {
        java.lang.String msg, $r5, $r11, $r14, $r17, $r24, $r29;
        berkeley.com.sleepycat.je.tree.IN in;
        long lsn, expirationTime, $l1, $l2, $l3;
        byte state, $b0, $b4;
        java.lang.StringBuilder sb, $r0, $r7, $r9, $r19, $r21, $r27;
        boolean $z0, $z1;
        java.lang.Class $r10;

        msg := @parameter0: java.lang.String;

        in := @parameter1: berkeley.com.sleepycat.je.tree.IN;

        lsn := @parameter2: long;

        state := @parameter3: byte;

        expirationTime := @parameter4: long;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        sb = $r0;

        if in != null goto label1;

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fetchRoot of ");

        goto label3;

     label1:
        $z0 = virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z0 == 0 goto label2;

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fetchLN of ");

        goto label3;

     label2:
        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fetchIN of ");

     label3:
        $b0 = lsn cmp -1L;

        if $b0 != 0 goto label4;

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null lsn");

        goto label5;

     label4:
        $r5 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(lsn);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

     label5:
        if in == null goto label6;

        $r7 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" parent IN=");

        $l1 = virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: long getNodeId()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r9 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IN class=");

        $r10 = virtualinvoke in.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lastFullLsn=");

        $l2 = virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: long getLastFullLsn()>();

        $r14 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>($l2);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lastLoggedLsn=");

        $l3 = virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: long getLastLoggedLsn()>();

        $r17 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>($l3);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" parent.getDirty()=");

        $z1 = virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: boolean getDirty()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

     label6:
        $r21 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" state=");

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(state);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" expires=");

        $b4 = expirationTime cmp 0L;

        if $b4 == 0 goto label7;

        $r24 = staticinvoke <berkeley.com.sleepycat.je.dbi.TTL: java.lang.String formatExpirationTime(long)>(expirationTime);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        goto label8;

     label7:
        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("never");

     label8:
        if msg == null goto label9;

        $r27 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(msg);

     label9:
        $r29 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r29;
    }

    public final int insertEntry1(berkeley.com.sleepycat.je.tree.Node, byte[], byte[], long, boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.tree.Node child;
        byte[] key, data;
        long childLsn;
        boolean blindInsertion;
        int $i0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        child := @parameter0: berkeley.com.sleepycat.je.tree.Node;

        key := @parameter1: byte[];

        data := @parameter2: byte[];

        childLsn := @parameter3: long;

        blindInsertion := @parameter4: boolean;

        $i0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: int insertEntry1(berkeley.com.sleepycat.je.tree.Node,byte[],byte[],long,byte,boolean)>(child, key, data, childLsn, 2, blindInsertion);

        return $i0;
    }

    public final byte getState(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx;
        byte[] $r0;
        byte $b0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $b0 = $r0[idx];

        return $b0;
    }

    public final boolean isIN()
    {
        berkeley.com.sleepycat.je.tree.IN this;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        return 1;
    }

    public void setParent(berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.tree.IN this, in, $r1;
        boolean $z0, $z1;
        java.lang.AssertionError $r0;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r2;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        in := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if in != null goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN parent>;

        if $r1 == null goto label2;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isLatchExclusiveOwner()>();

        if $z1 != 0 goto label2;

        $r2 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState()>();

        throw $r2;

     label2:
        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN parent> = in;

        return;
    }

    void trackProvisionalObsolete(berkeley.com.sleepycat.je.tree.IN, long)
    {
        berkeley.com.sleepycat.je.tree.IN this, childIN;
        long obsoleteLsn, $l4, $l5, $l7;
        boolean moveChildInfo, addChildLsn, $z0, $z1;
        int oldMemSize, $i1, $i2, $i3, $i6;
        berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r12, $r13;
        byte $b0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        childIN := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        obsoleteLsn := @parameter1: long;

        if childIN == null goto label01;

        $r0 = childIN.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo provisionalObsolete>;

        if $r0 == null goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        moveChildInfo = $z0;

        $b0 = obsoleteLsn cmp -1L;

        if $b0 == 0 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        addChildLsn = $z1;

        if moveChildInfo != 0 goto label05;

        if addChildLsn != 0 goto label05;

        return;

     label05:
        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo provisionalObsolete>;

        if $r1 == null goto label06;

        $r2 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo provisionalObsolete>;

        $i1 = virtualinvoke $r2.<berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo: int getMemorySize()>();

        goto label07;

     label06:
        $i1 = 0;

     label07:
        oldMemSize = $i1;

        if moveChildInfo == 0 goto label10;

        $r3 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo provisionalObsolete>;

        if $r3 == null goto label08;

        $r4 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo provisionalObsolete>;

        $r5 = childIN.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo provisionalObsolete>;

        virtualinvoke $r4.<berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo: void copyObsoleteInfo(berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo)>($r5);

        goto label09;

     label08:
        $r6 = childIN.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo provisionalObsolete>;

        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo provisionalObsolete> = $r6;

     label09:
        $r7 = childIN.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo provisionalObsolete>;

        $i2 = virtualinvoke $r7.<berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo: int getMemorySize()>();

        $i3 = 0 - $i2;

        $l4 = (long) $i3;

        virtualinvoke childIN.<berkeley.com.sleepycat.je.tree.IN: void updateMemorySize(long)>($l4);

        childIN.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo provisionalObsolete> = null;

     label10:
        if addChildLsn == 0 goto label12;

        $r8 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo provisionalObsolete>;

        if $r8 != null goto label11;

        $r9 = new berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo;

        specialinvoke $r9.<berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo: void <init>()>();

        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo provisionalObsolete> = $r9;

     label11:
        $r10 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo provisionalObsolete>;

        virtualinvoke $r10.<berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo: void addObsoleteInfo(long)>(obsoleteLsn);

     label12:
        $l5 = (long) oldMemSize;

        $r12 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo provisionalObsolete>;

        if $r12 == null goto label13;

        $r13 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo provisionalObsolete>;

        $i6 = virtualinvoke $r13.<berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo: int getMemorySize()>();

        $l7 = (long) $i6;

        goto label14;

     label13:
        $l7 = 0L;

     label14:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void updateMemorySize(long,long)>($l5, $l7);

        return;
    }

    public final synchronized void pin()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        boolean $z0, $z1, $z2;
        java.lang.AssertionError $r0, $r1;
        int $i0, $i1, $i2;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isLatchOwner()>();

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $z2 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z2 != 0 goto label2;

        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int pinCount>;

        if $i0 >= 0 goto label2;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label2:
        $i1 = this.<berkeley.com.sleepycat.je.tree.IN: int pinCount>;

        $i2 = $i1 + 1;

        this.<berkeley.com.sleepycat.je.tree.IN: int pinCount> = $i2;

        return;
    }

    public final synchronized void unpin()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        boolean $z0;
        int $i0, $i1, $i2;
        java.lang.AssertionError $r0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int pinCount>;

        if $i0 > 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $i1 = this.<berkeley.com.sleepycat.je.tree.IN: int pinCount>;

        $i2 = $i1 - 1;

        this.<berkeley.com.sleepycat.je.tree.IN: int pinCount> = $i2;

        return;
    }

    public final int getLevel()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int $i0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int level>;

        return $i0;
    }

    public final boolean getFetchedCold()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int $i0, $i1;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int flags>;

        $i1 = $i0 & 64;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    int getStoredKeySize(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx, $i0;
        berkeley.com.sleepycat.je.tree.INKeyRep $r0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $i0 = virtualinvoke $r0.<berkeley.com.sleepycat.je.tree.INKeyRep: int size(int)>(idx);

        return $i0;
    }

    public final void releaseLatchIfOwner()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.latch.SharedLatch $r0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.latch.SharedLatch latch>;

        interfaceinvoke $r0.<berkeley.com.sleepycat.je.latch.SharedLatch: void releaseIfOwner()>();

        return;
    }

    final void rebuildINList(berkeley.com.sleepycat.je.dbi.INList) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.dbi.INList inList;
        berkeley.com.sleepycat.je.tree.Node n;
        boolean hasCachedChildren#5, $z0, $z1, $z2, $z3;
        int i#7, $i0, $i1;
        berkeley.com.sleepycat.je.evictor.Evictor $r0, $r1;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        inList := @parameter0: berkeley.com.sleepycat.je.dbi.INList;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void initMemorySize()>();

        virtualinvoke inList.<berkeley.com.sleepycat.je.dbi.INList: void add(berkeley.com.sleepycat.je.tree.IN)>(this);

        hasCachedChildren#5 = 0;

        i#7 = 0;

     label1:
        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        if i#7 >= $i0 goto label4;

        n = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.Node getTarget(int)>(i#7);

        if n == null goto label2;

        virtualinvoke n.<berkeley.com.sleepycat.je.tree.Node: void rebuildINList(berkeley.com.sleepycat.je.dbi.INList)>(inList);

        hasCachedChildren#5 = 1;

     label2:
        $i1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: int getOffHeapBINId(int)>(i#7);

        if $i1 < 0 goto label3;

        hasCachedChildren#5 = 1;

     label3:
        i#7 = i#7 + 1;

        goto label1;

     label4:
        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isUpperIN()>();

        if $z0 == 0 goto label6;

        if hasCachedChildren#5 == 0 goto label5;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setHasCachedChildrenFlag(boolean)>(1);

        goto label7;

     label5:
        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setHasCachedChildrenFlag(boolean)>(0);

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isDIN()>();

        if $z1 != 0 goto label7;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.evictor.Evictor getEvictor()>();

        virtualinvoke $r0.<berkeley.com.sleepycat.je.evictor.Evictor: void addBack(berkeley.com.sleepycat.je.tree.IN)>(this);

        goto label7;

     label6:
        $z2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z2 == 0 goto label7;

        $z3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isDBIN()>();

        if $z3 != 0 goto label7;

        $r1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.evictor.Evictor getEvictor()>();

        virtualinvoke $r1.<berkeley.com.sleepycat.je.evictor.Evictor: void addBack(berkeley.com.sleepycat.je.tree.IN)>(this);

     label7:
        return;
    }

    public void latchShared(berkeley.com.sleepycat.je.CacheMode)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.CacheMode cacheMode;
        berkeley.com.sleepycat.je.latch.SharedLatch $r0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        cacheMode := @parameter0: berkeley.com.sleepycat.je.CacheMode;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.latch.SharedLatch latch>;

        interfaceinvoke $r0.<berkeley.com.sleepycat.je.latch.SharedLatch: void acquireShared()>();

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void updateLRU(berkeley.com.sleepycat.je.CacheMode)>(cacheMode);

        return;
    }

    public final void latchShared()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.CacheMode $r0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $r0 = <berkeley.com.sleepycat.je.CacheMode: berkeley.com.sleepycat.je.CacheMode DEFAULT>;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void latchShared(berkeley.com.sleepycat.je.CacheMode)>($r0);

        return;
    }

    public int getLastLoggedSize(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        return 0;
    }

    public java.lang.String shortClassName()
    {
        berkeley.com.sleepycat.je.tree.IN this;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        return "IN";
    }

    public long getBudgetedMemorySize()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        long $l0, $l2, $l3;
        int $i1;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $l0 = this.<berkeley.com.sleepycat.je.tree.IN: long inMemorySize>;

        $i1 = this.<berkeley.com.sleepycat.je.tree.IN: int accumulatedDelta>;

        $l2 = (long) $i1;

        $l3 = $l0 - $l2;

        return $l3;
    }

    public void setInListResident(boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        boolean resident;
        berkeley.com.sleepycat.je.tree.INTargetRep $r0, $r4;
        berkeley.com.sleepycat.je.tree.INKeyRep $r1, $r5;
        int $i0, $i1, $i2, $i3;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        resident := @parameter0: boolean;

        if resident != 0 goto label1;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets>;

        virtualinvoke $r0.<berkeley.com.sleepycat.je.tree.INTargetRep: void updateCacheStats(boolean,berkeley.com.sleepycat.je.tree.IN)>(0, this);

        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        virtualinvoke $r1.<berkeley.com.sleepycat.je.tree.INKeyRep: void updateCacheStats(boolean,berkeley.com.sleepycat.je.tree.IN)>(0, this);

     label1:
        if resident == 0 goto label2;

        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int flags>;

        $i1 = $i0 | 256;

        this.<berkeley.com.sleepycat.je.tree.IN: int flags> = $i1;

        goto label3;

     label2:
        $i2 = this.<berkeley.com.sleepycat.je.tree.IN: int flags>;

        $i3 = $i2 & -257;

        this.<berkeley.com.sleepycat.je.tree.IN: int flags> = $i3;

     label3:
        if resident == 0 goto label4;

        $r4 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets>;

        virtualinvoke $r4.<berkeley.com.sleepycat.je.tree.INTargetRep: void updateCacheStats(boolean,berkeley.com.sleepycat.je.tree.IN)>(1, this);

        $r5 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        virtualinvoke $r5.<berkeley.com.sleepycat.je.tree.INKeyRep: void updateCacheStats(boolean,berkeley.com.sleepycat.je.tree.IN)>(1, this);

     label4:
        return;
    }

    public final void setRecalcToggle(boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        boolean toggle;
        int $i0, $i1, $i2, $i3;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        toggle := @parameter0: boolean;

        if toggle == 0 goto label1;

        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int flags>;

        $i1 = $i0 | 2;

        this.<berkeley.com.sleepycat.je.tree.IN: int flags> = $i1;

        goto label2;

     label1:
        $i2 = this.<berkeley.com.sleepycat.je.tree.IN: int flags>;

        $i3 = $i2 & -3;

        this.<berkeley.com.sleepycat.je.tree.IN: int flags> = $i3;

     label2:
        return;
    }

    public final boolean isInPri2LRU()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int $i0, $i1;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int flags>;

        $i1 = $i0 & 16;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final void setInPri2LRU(boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        boolean value;
        int $i0, $i1, $i2, $i3;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        value := @parameter0: boolean;

        if value == 0 goto label1;

        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int flags>;

        $i1 = $i0 | 16;

        this.<berkeley.com.sleepycat.je.tree.IN: int flags> = $i1;

        goto label2;

     label1:
        $i2 = this.<berkeley.com.sleepycat.je.tree.IN: int flags>;

        $i3 = $i2 & -17;

        this.<berkeley.com.sleepycat.je.tree.IN: int flags> = $i3;

     label2:
        return;
    }

    public berkeley.com.sleepycat.je.tree.IN getNextLRUNode()
    {
        berkeley.com.sleepycat.je.tree.IN this, $r0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN nextLRUNode>;

        return $r0;
    }

    public berkeley.com.sleepycat.je.tree.IN getPrevLRUNode()
    {
        berkeley.com.sleepycat.je.tree.IN this, $r0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN prevLRUNode>;

        return $r0;
    }

    public void setNextLRUNode(berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.tree.IN this, node;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        node := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN nextLRUNode> = node;

        return;
    }

    public void setPrevLRUNode(berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.tree.IN this, node;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        node := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN prevLRUNode> = node;

        return;
    }

    public final void latchNoUpdateLRU()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        boolean $z0;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r0;
        java.lang.AssertionError $r1;
        berkeley.com.sleepycat.je.latch.SharedLatch $r2;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        if $r0 != null goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $r2 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.latch.SharedLatch latch>;

        interfaceinvoke $r2.<berkeley.com.sleepycat.je.latch.SharedLatch: void acquireExclusive()>();

        return;
    }

    public final synchronized boolean isPinned()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        boolean $z0, $z1, $z2, $z3;
        java.lang.AssertionError $r0, $r1;
        int $i0, $i1;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isLatchExclusiveOwner()>();

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $z2 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z2 != 0 goto label2;

        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int pinCount>;

        if $i0 >= 0 goto label2;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label2:
        $i1 = this.<berkeley.com.sleepycat.je.tree.IN: int pinCount>;

        if $i1 <= 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }

    public boolean hasOffHeapBINIds()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.tree.INLongRep $r0;
        boolean $z0, $z1;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INLongRep offHeapBINIds>;

        $z0 = virtualinvoke $r0.<berkeley.com.sleepycat.je.tree.INLongRep: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public final boolean getRecalcToggle()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int $i0, $i1;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int flags>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isOffHeapBINPri2(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx;
        byte[] $r0;
        byte $b0, $b1;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $b0 = $r0[idx];

        $b1 = $b0 & 64;

        if $b1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void clearOffHeapBINId(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx, $i0, $i2;
        long oldVal;
        boolean $z0, $z1, $z2;
        java.lang.AssertionError $r0;
        berkeley.com.sleepycat.je.tree.INLongRep $r1, $r2, $r3, $r4;
        byte $b1;
        berkeley.com.sleepycat.je.evictor.Evictor $r5;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: int getNormalizedLevel()>();

        if $i0 == 2 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setOffHeapBINPri2(int,boolean)>(idx, 0);

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setOffHeapBINDirty(int,boolean)>(idx, 0);

        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INLongRep offHeapBINIds>;

        oldVal = virtualinvoke $r1.<berkeley.com.sleepycat.je.tree.INLongRep: long get(int)>(idx);

        $b1 = oldVal cmp 0L;

        if $b1 != 0 goto label2;

        return;

     label2:
        $r2 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INLongRep offHeapBINIds>;

        $r3 = virtualinvoke $r2.<berkeley.com.sleepycat.je.tree.INLongRep: berkeley.com.sleepycat.je.tree.INLongRep set(int,long,berkeley.com.sleepycat.je.tree.IN)>(idx, 0L, this);

        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INLongRep offHeapBINIds> = $r3;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean getInListResident()>();

        if $z1 == 0 goto label3;

        $i2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: int getNormalizedLevel()>();

        if $i2 != 2 goto label3;

        $r4 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INLongRep offHeapBINIds>;

        $z2 = virtualinvoke $r4.<berkeley.com.sleepycat.je.tree.INLongRep: boolean isEmpty()>();

        if $z2 == 0 goto label3;

        $r5 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.evictor.Evictor getEvictor()>();

        virtualinvoke $r5.<berkeley.com.sleepycat.je.evictor.Evictor: void moveToPri1LRU(berkeley.com.sleepycat.je.tree.IN)>(this);

     label3:
        return;
    }

    private void setOffHeapBINPri2(int, boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx;
        boolean val;
        byte[] $r0, $r1;
        byte $b1, $b2, $b3, $b5, $b6, $b7;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        val := @parameter1: boolean;

        if val == 0 goto label1;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $b1 = $r0[idx];

        $b2 = $b1 | 64;

        $b3 = (byte) $b2;

        $r0[idx] = $b3;

        goto label2;

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $b5 = $r1[idx];

        $b6 = $b5 & -65;

        $b7 = (byte) $b6;

        $r1[idx] = $b7;

     label2:
        return;
    }

    private void setOffHeapBINDirty(int, boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx;
        boolean val;
        byte[] $r0, $r1;
        byte $b1, $b2, $b3, $b5, $b6, $b7;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        val := @parameter1: boolean;

        if val == 0 goto label1;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $b1 = $r0[idx];

        $b2 = $b1 | 4;

        $b3 = (byte) $b2;

        $r0[idx] = $b3;

        goto label2;

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $b5 = $r1[idx];

        $b6 = $b5 & -5;

        $b7 = (byte) $b6;

        $r1[idx] = $b7;

     label2:
        return;
    }

    public final long log(boolean, berkeley.com.sleepycat.je.log.Provisional, boolean, berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.tree.IN this, parent;
        boolean allowDeltas, backgroundIO;
        berkeley.com.sleepycat.je.log.Provisional provisional;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        allowDeltas := @parameter0: boolean;

        provisional := @parameter1: berkeley.com.sleepycat.je.log.Provisional;

        backgroundIO := @parameter2: boolean;

        parent := @parameter3: berkeley.com.sleepycat.je.tree.IN;

        $l0 = staticinvoke <berkeley.com.sleepycat.je.tree.IN: long logInternal(berkeley.com.sleepycat.je.tree.IN,berkeley.com.sleepycat.je.log.entry.INLogEntry,boolean,boolean,berkeley.com.sleepycat.je.log.Provisional,boolean,berkeley.com.sleepycat.je.tree.IN)>(this, null, allowDeltas, 1, provisional, backgroundIO, parent);

        return $l0;
    }

    public boolean isOffHeapBINDirty(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx;
        byte[] $r0;
        byte $b0, $b1;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $b0 = $r0[idx];

        $b1 = $b0 & 4;

        if $b1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean getFetchedColdOffHeap()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int $i0, $i1;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int flags>;

        $i1 = $i0 & 128;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public long getInMemorySize()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $l0 = this.<berkeley.com.sleepycat.je.tree.IN: long inMemorySize>;

        return $l0;
    }

    public final void postFetchInit(berkeley.com.sleepycat.je.dbi.DatabaseImpl, long)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;
        long fetchedLsn;
        boolean $z0, $z1, $z2, $z3;
        java.lang.AssertionError $r0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        db := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        fetchedLsn := @parameter1: long;

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isLatchExclusiveOwner()>();

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void commonInit(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(db);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setLastLoggedLsn(long)>(fetchedLsn);

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void convertDupKeys()>();

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void addToMainCache()>();

        $z2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z2 == 0 goto label2;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setFetchedCold(boolean)>(1);

     label2:
        $z3 = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isDeferredWriteMode()>();

        if $z3 == 0 goto label3;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void mutateToFullBIN(boolean)>(0);

     label3:
        return;
    }

    final void incFetchStats(berkeley.com.sleepycat.je.dbi.EnvironmentImpl, boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        boolean isMiss, $z0, $z1;
        berkeley.com.sleepycat.je.evictor.Evictor e;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        envImpl := @parameter0: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        isMiss := @parameter1: boolean;

        e = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.evictor.Evictor getEvictor()>();

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBINDelta(boolean)>(0);

        virtualinvoke e.<berkeley.com.sleepycat.je.evictor.Evictor: void incBINFetchStats(boolean,boolean)>(isMiss, $z1);

        goto label2;

     label1:
        virtualinvoke e.<berkeley.com.sleepycat.je.evictor.Evictor: void incUINFetchStats(boolean)>(isMiss);

     label2:
        return;
    }

    private void commonInit(berkeley.com.sleepycat.je.dbi.DatabaseImpl)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        db := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setDatabase(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(db);

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void initMemorySize()>();

        return;
    }

    public void setLastLoggedLsn(long)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        long lsn, $l0;
        boolean $z0;
        byte $b1;
        berkeley.com.sleepycat.je.tree.BIN $r0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        lsn := @parameter0: long;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z0 == 0 goto label2;

        $l0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getLastFullLsn()>();

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label1;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setLastFullLsn(long)>(lsn);

        goto label3;

     label1:
        $r0 = (berkeley.com.sleepycat.je.tree.BIN) this;

        virtualinvoke $r0.<berkeley.com.sleepycat.je.tree.BIN: void setLastDeltaLsn(long)>(lsn);

        goto label3;

     label2:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setLastFullLsn(long)>(lsn);

     label3:
        return;
    }

    private void convertDupKeys()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        boolean $z0;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $z0 = this.<berkeley.com.sleepycat.je.tree.IN: boolean needDupKeyConversion>;

        if $z0 != 0 goto label1;

        return;

     label1:
        this.<berkeley.com.sleepycat.je.tree.IN: boolean needDupKeyConversion> = 0;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        staticinvoke <berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: void convertInKeys(berkeley.com.sleepycat.je.dbi.DatabaseImpl,berkeley.com.sleepycat.je.tree.IN)>($r0, this);

        return;
    }

    private void addToMainCache()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0, $r3;
        berkeley.com.sleepycat.je.dbi.INList $r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        berkeley.com.sleepycat.je.evictor.Evictor $r2;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.INList getInMemoryINs()>();

        virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.INList: void add(berkeley.com.sleepycat.je.tree.IN)>(this);

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isDIN()>();

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isDBIN()>();

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isUpperIN()>();

        if $z2 == 0 goto label1;

     label1:
        $r2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.evictor.Evictor getEvictor()>();

        virtualinvoke $r2.<berkeley.com.sleepycat.je.evictor.Evictor: void addBack(berkeley.com.sleepycat.je.tree.IN)>(this);

     label2:
        $z3 = this instanceof berkeley.com.sleepycat.je.tree.dupConvert.DBIN;

        if $z3 != 0 goto label3;

        $z4 = this instanceof berkeley.com.sleepycat.je.tree.dupConvert.DIN;

        if $z4 != 0 goto label3;

        $r3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r3.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void lazyCompress(berkeley.com.sleepycat.je.tree.IN)>(this);

     label3:
        return;
    }

    public final void convertKey(int, byte[])
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx;
        byte[] newKey;
        long oldSlotSize, newSlotSize, $l0, $l1;
        boolean multiSlotChange, $z0, $z1, $z2, $z3;
        java.lang.AssertionError $r0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        newKey := @parameter1: byte[];

        oldSlotSize = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getEntryInMemorySize(int)>(idx);

        multiSlotChange = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean updateKey(int,byte[],byte[])>(idx, newKey, null);

        if multiSlotChange == 0 goto label1;

        $l0 = this.<berkeley.com.sleepycat.je.tree.IN: long inMemorySize>;

        $l1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long computeMemorySize()>();

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void updateMemorySize(long,long)>($l0, $l1);

        goto label2;

     label1:
        newSlotSize = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getEntryInMemorySize(int)>(idx);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void updateMemorySize(long,long)>(oldSlotSize, newSlotSize);

     label2:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setDirty(boolean)>(1);

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z1 != 0 goto label3;

        $z2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean hasCachedChildren()>();

        $z3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean hasCachedChildrenFlag()>();

        if $z2 == $z3 goto label3;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label3:
        return;
    }

    public boolean verifyMemorySize()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        long calcMemorySize, $l0, $l2, $l3;
        java.lang.String msg;
        byte $b1;
        java.lang.StringBuilder $r0, $r1, $r2, $r3, $r4, $r5, $r6;
        java.util.logging.Level $r7;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r8;
        java.io.PrintStream $r9;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        calcMemorySize = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long computeMemorySize()>();

        $l0 = this.<berkeley.com.sleepycat.je.tree.IN: long inMemorySize>;

        $b1 = calcMemorySize cmp $l0;

        if $b1 == 0 goto label1;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-Warning: Out of sync. Should be ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(calcMemorySize);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" / actual: ");

        $l2 = this.<berkeley.com.sleepycat.je.tree.IN: long inMemorySize>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" node: ");

        $l3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getNodeId()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        msg = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $r8 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: void envLogMsg(java.util.logging.Level,berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String)>($r7, $r8, msg);

        $r9 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>(msg);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long printMemorySize()>();

        return 0;

     label1:
        return 1;
    }

    private boolean updateKey(int, byte[], byte[])
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx;
        byte[] key, data;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        key := @parameter1: byte[];

        data := @parameter2: byte[];

        $z0 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean setKey(int,byte[],byte[],boolean)>(idx, key, data, 0);

        return $z0;
    }

    final void applyDeltaSlot(int, berkeley.com.sleepycat.je.tree.Node, long, int, byte, byte[], byte[])
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx, lastLoggedSize;
        berkeley.com.sleepycat.je.tree.Node node;
        long lsn;
        byte state, $b0, $b1;
        byte[] key, data, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z9, $z10, $z11, $z12, $z13, $z14;
        java.lang.AssertionError $r0, $r1, $r2, $r3, $r4, $r6, $r7;
        berkeley.com.sleepycat.je.tree.BIN $r5;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        node := @parameter1: berkeley.com.sleepycat.je.tree.Node;

        lsn := @parameter2: long;

        lastLoggedSize := @parameter3: int;

        state := @parameter4: byte;

        key := @parameter5: byte[];

        data := @parameter6: byte[];

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $z2 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z2 != 0 goto label2;

        $z3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBINDelta()>();

        if $z3 == 0 goto label2;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label2:
        $z4 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z4 != 0 goto label3;

        $b0 = lsn cmp -1L;

        if $b0 != 0 goto label3;

        $b1 = state & 1;

        if $b1 != 0 goto label3;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label3:
        $z5 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z5 != 0 goto label4;

        if node == null goto label4;

        if data == null goto label4;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label4:
        $z6 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z6 != 0 goto label5;

        $z7 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean getInListResident()>();

        if $z7 == 0 goto label5;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label5:
        $r5 = (berkeley.com.sleepycat.je.tree.BIN) this;

        virtualinvoke $r5.<berkeley.com.sleepycat.je.tree.BIN: void freeOffHeapLN(int)>(idx);

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setLsn(int,long,boolean)>(idx, lsn, 0);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setLastLoggedSize(int,int)>(idx, lastLoggedSize);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setTarget(int,berkeley.com.sleepycat.je.tree.Node)>(idx, node);

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean updateLNSlotKey(int,byte[],byte[])>(idx, key, data);

        $z9 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z9 != 0 goto label6;

        $z10 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isEmbeddedLN(int)>(idx);

        $z11 = staticinvoke <berkeley.com.sleepycat.je.tree.IN: boolean isEmbeddedLN(byte)>(state);

        if $z10 == $z11 goto label6;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label6:
        $z12 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z12 != 0 goto label7;

        $z13 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isNoDataLN(int)>(idx);

        $z14 = staticinvoke <berkeley.com.sleepycat.je.tree.IN: boolean isNoDataLN(byte)>(state);

        if $z13 == $z14 goto label7;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label7:
        $r8 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $r8[idx] = state;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setDirty(boolean)>(1);

        return;
    }

    public static boolean isNoDataLN(byte)
    {
        byte state, $b0;
        boolean $z0;

        state := @parameter0: byte;

        $b0 = state & 32;

        if $b0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isEmbeddedLN(byte)
    {
        byte state, $b0;
        boolean $z0;

        state := @parameter0: byte;

        $b0 = state & 16;

        if $b0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void writeToLog(java.nio.ByteBuffer, boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        java.nio.ByteBuffer logBuffer;
        boolean deltasOnly, $z1;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        logBuffer := @parameter0: java.nio.ByteBuffer;

        deltasOnly := @parameter1: boolean;

        if deltasOnly != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void serialize(java.nio.ByteBuffer,boolean,boolean)>(logBuffer, deltasOnly, $z1);

        return;
    }

    boolean mayHaveLastLoggedSizeStored()
    {
        berkeley.com.sleepycat.je.tree.IN this;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        return 0;
    }

    boolean isLastLoggedSizeStored(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        return 0;
    }

    public boolean mayHaveExpirationValues(java.nio.ByteBuffer, int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        java.nio.ByteBuffer itemBuffer;
        int entryVersion, expirationBase;
        boolean $z0, $z1;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        itemBuffer := @parameter0: java.nio.ByteBuffer;

        entryVersion := @parameter1: int;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z0 == 0 goto label1;

        if entryVersion >= 12 goto label2;

     label1:
        return 0;

     label2:
        virtualinvoke itemBuffer.<java.nio.ByteBuffer: java.nio.Buffer mark()>();

        expirationBase = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int readPackedInt(java.nio.ByteBuffer)>(itemBuffer);

        virtualinvoke itemBuffer.<java.nio.ByteBuffer: java.nio.Buffer reset()>();

        if expirationBase == -1 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public void readFromLog(java.nio.ByteBuffer, int, boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        java.nio.ByteBuffer itemBuffer;
        int entryVersion;
        boolean deltasOnly, $z1;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        itemBuffer := @parameter0: java.nio.ByteBuffer;

        entryVersion := @parameter1: int;

        deltasOnly := @parameter2: boolean;

        if deltasOnly != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void materialize(java.nio.ByteBuffer,int,boolean,boolean)>(itemBuffer, entryVersion, deltasOnly, $z1);

        return;
    }

    public void readFromLog(java.nio.ByteBuffer, int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        java.nio.ByteBuffer itemBuffer;
        int entryVersion;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        itemBuffer := @parameter0: java.nio.ByteBuffer;

        entryVersion := @parameter1: int;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void materialize(java.nio.ByteBuffer,int,boolean,boolean)>(itemBuffer, entryVersion, 0, 1);

        return;
    }

    public final void latch()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.CacheMode $r0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $r0 = <berkeley.com.sleepycat.je.CacheMode: berkeley.com.sleepycat.je.CacheMode DEFAULT>;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void latch(berkeley.com.sleepycat.je.CacheMode)>($r0);

        return;
    }

    public void setOffHeapBINId(int, int, boolean, boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx, val, $i0, $i1;
        boolean pri2, dirty, $z0, $z1, $z2;
        long newVal, oldVal;
        java.lang.AssertionError $r0, $r1, $r3;
        berkeley.com.sleepycat.je.tree.INLongRep $r2, $r4, $r5;
        byte $b2, $b3;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        val := @parameter1: int;

        pri2 := @parameter2: boolean;

        dirty := @parameter3: boolean;

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: int getNormalizedLevel()>();

        if $i0 == 2 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $z1 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if val >= 0 goto label2;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label2:
        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setOffHeapBINPri2(int,boolean)>(idx, pri2);

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setOffHeapBINDirty(int,boolean)>(idx, dirty);

        $i1 = val + 1;

        newVal = (long) $i1;

        $r2 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INLongRep offHeapBINIds>;

        oldVal = virtualinvoke $r2.<berkeley.com.sleepycat.je.tree.INLongRep: long get(int)>(idx);

        $b2 = oldVal cmp newVal;

        if $b2 != 0 goto label3;

        return;

     label3:
        $z2 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z2 != 0 goto label4;

        $b3 = oldVal cmp 0L;

        if $b3 == 0 goto label4;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label4:
        $r4 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INLongRep offHeapBINIds>;

        $r5 = virtualinvoke $r4.<berkeley.com.sleepycat.je.tree.INLongRep: berkeley.com.sleepycat.je.tree.INLongRep set(int,long,berkeley.com.sleepycat.je.tree.IN)>(idx, newVal, this);

        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INLongRep offHeapBINIds> = $r5;

        return;
    }

    public final berkeley.com.sleepycat.je.log.LogEntryType getGenericLogType()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.log.LogEntryType $r0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.log.LogEntryType getLogType()>();

        return $r0;
    }

    public final boolean needsSplitting()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.tree.BIN bin;
        int fullBinNEntries, fullBinMaxEntries, $i0, $i1, $i2, $i3;
        boolean $z0, $z1, $z2, $z3;
        java.lang.AssertionError $r0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBINDelta()>();

        if $z0 == 0 goto label5;

        bin = (berkeley.com.sleepycat.je.tree.BIN) this;

        fullBinNEntries = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: int getFullBinNEntries()>();

        fullBinMaxEntries = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: int getFullBinMaxEntries()>();

        if fullBinNEntries >= 0 goto label1;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void mutateToFullBIN(boolean)>(0);

        goto label5;

     label1:
        $z1 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if fullBinNEntries > 0 goto label2;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label2:
        $i0 = fullBinMaxEntries - fullBinNEntries;

        if $i0 >= 1 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;

     label5:
        $i1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: int getMaxEntries()>();

        $i2 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        $i3 = $i1 - $i2;

        if $i3 >= 1 goto label6;

        $z3 = 1;

        goto label7;

     label6:
        $z3 = 0;

     label7:
        return $z3;
    }

    public berkeley.com.sleepycat.je.tree.IN loadIN(int, berkeley.com.sleepycat.je.CacheMode)
    {
        berkeley.com.sleepycat.je.tree.IN this, child#15;
        int idx, $i0;
        berkeley.com.sleepycat.je.CacheMode cacheMode;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        berkeley.com.sleepycat.je.evictor.OffHeapCache ohCache;
        long lsn;
        byte[] ohBytes;
        java.lang.RuntimeException e, $r6;
        boolean $z0, $z1, $z2;
        java.lang.AssertionError $r0;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r1, $r7;
        berkeley.com.sleepycat.je.tree.INTargetRep $r2;
        java.lang.Object $r3;
        berkeley.com.sleepycat.je.tree.BIN child#39;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r4;
        berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason $r8;
        java.lang.String $r9, $r10;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        cacheMode := @parameter1: berkeley.com.sleepycat.je.CacheMode;

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isUpperIN()>();

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $z2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isLatchExclusiveOwner()>();

        if $z2 != 0 goto label2;

        $r1 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>("EX-latch not held before load");

        throw $r1;

     label2:
        $r2 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets>;

        $r3 = virtualinvoke $r2.<berkeley.com.sleepycat.je.tree.INTargetRep: java.lang.Object get(int)>(idx);

        child#15 = (berkeley.com.sleepycat.je.tree.IN) $r3;

        if child#15 == null goto label3;

        return child#15;

     label3:
        $i0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: int getNormalizedLevel()>();

        if $i0 == 2 goto label4;

        return null;

     label4:
        envImpl = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        ohCache = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.evictor.OffHeapCache getOffHeapCache()>();

        lsn = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getLsn(int)>(idx);

     label5:
        ohBytes = virtualinvoke ohCache.<berkeley.com.sleepycat.je.evictor.OffHeapCache: byte[] getBINBytes(berkeley.com.sleepycat.je.tree.IN,int)>(this, idx);

        if ohBytes != null goto label7;

     label6:
        return null;

     label7:
        child#39 = virtualinvoke ohCache.<berkeley.com.sleepycat.je.evictor.OffHeapCache: berkeley.com.sleepycat.je.tree.BIN materializeBIN(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,byte[])>(envImpl, ohBytes);

        $r4 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        virtualinvoke child#39.<berkeley.com.sleepycat.je.tree.IN: void latchNoUpdateLRU(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>($r4);

        specialinvoke child#39.<berkeley.com.sleepycat.je.tree.IN: void postLoadInit(berkeley.com.sleepycat.je.tree.IN,int)>(this, idx);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void attachNode(int,berkeley.com.sleepycat.je.tree.Node,byte[])>(idx, child#39, null);

        virtualinvoke child#39.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label8:
        return child#39;

     label9:
        $r6 := @caughtexception;

        e = $r6;

        $r7 = new berkeley.com.sleepycat.je.EnvironmentFailureException;

        $r8 = <berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason: berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason LOG_INTEGRITY>;

        $r9 = virtualinvoke e.<java.lang.RuntimeException: java.lang.String toString()>();

        $r10 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: java.lang.String makeFetchErrorMsg(java.lang.String,long,int)>($r9, lsn, idx);

        specialinvoke $r7.<berkeley.com.sleepycat.je.EnvironmentFailureException: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason,java.lang.String,java.lang.Throwable)>(envImpl, $r8, $r10, e);

        throw $r7;

        catch java.lang.RuntimeException from label5 to label6 with label9;
        catch java.lang.RuntimeException from label7 to label8 with label9;
    }

    private void postLoadInit(berkeley.com.sleepycat.je.tree.IN, int)
    {
        berkeley.com.sleepycat.je.tree.IN this, parent;
        int idx;
        boolean $z0, $z1, $z2;
        java.lang.AssertionError $r0;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r1;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r2;
        berkeley.com.sleepycat.je.evictor.OffHeapCache $r3;
        berkeley.com.sleepycat.je.tree.BIN $r4;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        parent := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter1: int;

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isLatchExclusiveOwner()>();

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $r1 = parent.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void commonInit(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>($r1);

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void addToMainCache()>();

        $z2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z2 == 0 goto label2;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setFetchedCold(boolean)>(1);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setFetchedColdOffHeap(boolean)>(1);

     label2:
        $r2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r3 = virtualinvoke $r2.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.evictor.OffHeapCache getOffHeapCache()>();

        $r4 = (berkeley.com.sleepycat.je.tree.BIN) this;

        virtualinvoke $r3.<berkeley.com.sleepycat.je.evictor.OffHeapCache: void postBINLoad(berkeley.com.sleepycat.je.tree.IN,int,berkeley.com.sleepycat.je.tree.BIN)>(parent, idx, $r4);

        return;
    }

    public final berkeley.com.sleepycat.je.tree.IN split(berkeley.com.sleepycat.je.tree.IN, int, berkeley.com.sleepycat.je.tree.IN, int)
    {
        berkeley.com.sleepycat.je.tree.IN this, parent, grandParent, $r0;
        int childIndex, maxEntries;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        parent := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        childIndex := @parameter1: int;

        grandParent := @parameter2: berkeley.com.sleepycat.je.tree.IN;

        maxEntries := @parameter3: int;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN splitInternal(berkeley.com.sleepycat.je.tree.IN,int,berkeley.com.sleepycat.je.tree.IN,int,int)>(parent, childIndex, grandParent, maxEntries, -1);

        return $r0;
    }

    public long optionalLogProvisional(berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.tree.IN this, parent;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        parent := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        $l0 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: long optionalLogProvisional(berkeley.com.sleepycat.je.tree.IN,boolean)>(parent, 1);

        return $l0;
    }

    final berkeley.com.sleepycat.je.tree.IN splitInternal(berkeley.com.sleepycat.je.tree.IN, int, berkeley.com.sleepycat.je.tree.IN, int, int) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.tree.IN this, parent, grandParent, newSibling;
        int childIndex, maxEntries, idKeyIndex, newSiblingNEntries, splitIndex#1, $i0, low#24, high#27, $i1, $i2, $i3, $i4, i#67, $i5, $i6, $i7, $i8;
        byte[] newIdKey, newKeyPrefix, newSiblingPrefix, $r1, $r3, $r18, $r20;
        boolean haveCachedChildren, $z0, $z1, addedNewSiblingToCompressorQueue#48, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, inserted#196, $z22, inserted#213, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32;
        berkeley.com.sleepycat.je.tree.BIN bin, $r6, $r8;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl env, $r7;
        berkeley.com.sleepycat.je.dbi.INList inMemoryINs;
        long oldMemorySize, newSize, newSiblingLsn, myNewLsn, parentLsn#224;
        java.lang.Throwable l29, $r27;
        java.lang.AssertionError $r0, $r5, $r10, $r11, $r15, $r16, $r17, $r19, $r21, $r23;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r2;
        berkeley.com.sleepycat.je.CacheMode $r4;
        berkeley.com.sleepycat.je.tree.INKeyRep $r12, $r14;
        java.lang.Object $r13;
        berkeley.com.sleepycat.je.recovery.Checkpointer $r22;
        berkeley.com.sleepycat.je.evictor.Evictor $r24, $r25;
        java.util.logging.Level $r26;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        parent := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        childIndex := @parameter1: int;

        grandParent := @parameter2: berkeley.com.sleepycat.je.tree.IN;

        maxEntries := @parameter3: int;

        splitIndex#1 := @parameter4: int;

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBINDelta()>();

        if $z1 == 0 goto label01;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label01:
        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] identifierKey>;

        if $r1 != null goto label02;

        $r2 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState()>();

        throw $r2;

     label02:
        $r3 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] identifierKey>;

        idKeyIndex = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: int findEntry(byte[],boolean,boolean)>($r3, 0, 0);

        if splitIndex#1 >= 0 goto label03;

        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        splitIndex#1 = $i0 / 2;

     label03:
        if idKeyIndex >= splitIndex#1 goto label04;

        low#24 = splitIndex#1;

        high#27 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        goto label05;

     label04:
        low#24 = 0;

        high#27 = splitIndex#1;

     label05:
        newIdKey = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: byte[] getKey(int)>(low#24);

        $i1 = high#27 - low#24;

        $i2 = $i1 + 1;

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>(maxEntries, $i2);

        $i4 = this.<berkeley.com.sleepycat.je.tree.IN: int level>;

        newSibling = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN createNewInstance(byte[],int,int)>(newIdKey, $i3, $i4);

        $r4 = <berkeley.com.sleepycat.je.CacheMode: berkeley.com.sleepycat.je.CacheMode UNCHANGED>;

        virtualinvoke newSibling.<berkeley.com.sleepycat.je.tree.IN: void latch(berkeley.com.sleepycat.je.CacheMode)>($r4);

     label06:
        addedNewSiblingToCompressorQueue#48 = 0;

        newSiblingNEntries = high#27 - low#24;

        haveCachedChildren = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean hasCachedChildrenFlag()>();

        $z2 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z2 != 0 goto label07;

        $z3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z3 != 0 goto label07;

        $z4 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean hasCachedChildren()>();

        if haveCachedChildren == $z4 goto label07;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label07:
        $z5 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z5 == 0 goto label08;

        $r6 = (berkeley.com.sleepycat.je.tree.BIN) this;

        goto label09;

     label08:
        $r6 = null;

     label09:
        bin = $r6;

        i#67 = low#24;

     label10:
        if i#67 >= high#27 goto label12;

        if addedNewSiblingToCompressorQueue#48 != 0 goto label11;

        if bin == null goto label11;

        $z6 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: boolean isDefunct(int)>(i#67);

        if $z6 == 0 goto label11;

        addedNewSiblingToCompressorQueue#48 = 1;

        $r7 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r8 = (berkeley.com.sleepycat.je.tree.BIN) newSibling;

        virtualinvoke $r7.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void addToCompressorQueue(berkeley.com.sleepycat.je.tree.BIN)>($r8);

     label11:
        virtualinvoke newSibling.<berkeley.com.sleepycat.je.tree.IN: void appendEntryFromOtherNode(berkeley.com.sleepycat.je.tree.IN,int)>(this, i#67);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void clearEntry(int)>(i#67);

        i#67 = i#67 + 1;

        goto label10;

     label12:
        if low#24 != 0 goto label13;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void shiftEntriesLeft(int)>(newSiblingNEntries);

     label13:
        $i5 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        $i6 = $i5 - newSiblingNEntries;

        this.<berkeley.com.sleepycat.je.tree.IN: int nEntries> = $i6;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setDirty(boolean)>(1);

        $z7 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isUpperIN()>();

        if $z7 == 0 goto label14;

        if haveCachedChildren == 0 goto label14;

        $z8 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean hasCachedChildren()>();

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setHasCachedChildrenFlag(boolean)>($z8);

     label14:
        $z9 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z9 != 0 goto label15;

        $z10 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z10 != 0 goto label15;

        $z11 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean hasCachedChildrenFlag()>();

        $z12 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean hasCachedChildren()>();

        if $z11 == $z12 goto label15;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label15:
        $z13 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z13 != 0 goto label16;

        $z14 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z14 != 0 goto label16;

        $z15 = virtualinvoke newSibling.<berkeley.com.sleepycat.je.tree.IN: boolean hasCachedChildrenFlag()>();

        $z16 = virtualinvoke newSibling.<berkeley.com.sleepycat.je.tree.IN: boolean hasCachedChildren()>();

        if $z15 == $z16 goto label16;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label16:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void adjustCursors(berkeley.com.sleepycat.je.tree.IN,int,int)>(newSibling, low#24, high#27);

        newKeyPrefix = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: byte[] computeKeyPrefix(int)>(-1);

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void recalcSuffixes(byte[],byte[],byte[],int)>(newKeyPrefix, null, null, -1);

        $r12 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $r13 = virtualinvoke $r12.<berkeley.com.sleepycat.je.tree.INKeyRep: java.lang.Object compact(berkeley.com.sleepycat.je.tree.IN)>(this);

        $r14 = (berkeley.com.sleepycat.je.tree.INKeyRep) $r13;

        this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys> = $r14;

        $i7 = virtualinvoke newSibling.<berkeley.com.sleepycat.je.tree.IN: int getNEntries()>();

        if $i7 <= 1 goto label17;

        newSiblingPrefix = specialinvoke newSibling.<berkeley.com.sleepycat.je.tree.IN: byte[] computeKeyPrefix(int)>(-1);

        specialinvoke newSibling.<berkeley.com.sleepycat.je.tree.IN: void recalcSuffixes(byte[],byte[],byte[],int)>(newSiblingPrefix, null, null, -1);

        specialinvoke newSibling.<berkeley.com.sleepycat.je.tree.IN: void initMemorySize()>();

     label17:
        $z17 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z17 != 0 goto label18;

        $z18 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean idKeyIsSlotKey()>();

        if $z18 != 0 goto label18;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label18:
        $z19 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z19 != 0 goto label19;

        $z20 = specialinvoke newSibling.<berkeley.com.sleepycat.je.tree.IN: boolean idKeyIsSlotKey()>();

        if $z20 != 0 goto label19;

        $r16 = new java.lang.AssertionError;

        specialinvoke $r16.<java.lang.AssertionError: void <init>()>();

        throw $r16;

     label19:
        env = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        inMemoryINs = virtualinvoke env.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.INList getInMemoryINs()>();

        oldMemorySize = this.<berkeley.com.sleepycat.je.tree.IN: long inMemorySize>;

        newSize = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long computeMemorySize()>();

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void updateMemorySize(long,long)>(oldMemorySize, newSize);

        newSiblingLsn = virtualinvoke newSibling.<berkeley.com.sleepycat.je.tree.IN: long optionalLogProvisionalNoCompress(berkeley.com.sleepycat.je.tree.IN)>(parent);

        myNewLsn = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long optionalLogProvisionalNoCompress(berkeley.com.sleepycat.je.tree.IN)>(parent);

        $z21 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z21 != 0 goto label20;

        $i8 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        if $i8 > 0 goto label20;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();

        throw $r17;

     label20:
        if low#24 != 0 goto label22;

        virtualinvoke parent.<berkeley.com.sleepycat.je.tree.IN: void prepareForSlotReuse(int)>(childIndex);

        specialinvoke parent.<berkeley.com.sleepycat.je.tree.IN: void updateSplitSlot(int,berkeley.com.sleepycat.je.tree.IN,long,byte[])>(childIndex, newSibling, newSiblingLsn, newIdKey);

        $r18 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: byte[] getKey(int)>(0);

        inserted#196 = virtualinvoke parent.<berkeley.com.sleepycat.je.tree.IN: boolean insertEntry(berkeley.com.sleepycat.je.tree.Node,byte[],long)>(this, $r18, myNewLsn);

        $z22 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z22 != 0 goto label21;

        if inserted#196 != 0 goto label21;

        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();

        throw $r19;

     label21:
        goto label23;

     label22:
        $r20 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: byte[] getKey(int)>(0);

        specialinvoke parent.<berkeley.com.sleepycat.je.tree.IN: void updateSplitSlot(int,berkeley.com.sleepycat.je.tree.IN,long,byte[])>(childIndex, this, myNewLsn, $r20);

        inserted#213 = virtualinvoke parent.<berkeley.com.sleepycat.je.tree.IN: boolean insertEntry(berkeley.com.sleepycat.je.tree.Node,byte[],long)>(newSibling, newIdKey, newSiblingLsn);

        $z23 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z23 != 0 goto label23;

        if inserted#213 != 0 goto label23;

        $r21 = new java.lang.AssertionError;

        specialinvoke $r21.<java.lang.AssertionError: void <init>()>();

        throw $r21;

     label23:
        virtualinvoke inMemoryINs.<berkeley.com.sleepycat.je.dbi.INList: void add(berkeley.com.sleepycat.je.tree.IN)>(newSibling);

        $z24 = virtualinvoke parent.<berkeley.com.sleepycat.je.tree.IN: boolean isRoot()>();

        if $z24 == 0 goto label24;

        parentLsn#224 = virtualinvoke parent.<berkeley.com.sleepycat.je.tree.IN: long optionalLog()>();

        goto label25;

     label24:
        parentLsn#224 = virtualinvoke parent.<berkeley.com.sleepycat.je.tree.IN: long optionalLogProvisional(berkeley.com.sleepycat.je.tree.IN)>(grandParent);

     label25:
        $r22 = virtualinvoke env.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.recovery.Checkpointer getCheckpointer()>();

        virtualinvoke $r22.<berkeley.com.sleepycat.je.recovery.Checkpointer: void coordinateSplitWithCheckpoint(berkeley.com.sleepycat.je.tree.IN)>(newSibling);

        $z25 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z25 != 0 goto label27;

        $z26 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isDIN()>();

        if $z26 != 0 goto label26;

        $z27 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isDBIN()>();

        if $z27 == 0 goto label27;

     label26:
        $r23 = new java.lang.AssertionError;

        specialinvoke $r23.<java.lang.AssertionError: void <init>()>();

        throw $r23;

     label27:
        $z28 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z28 != 0 goto label28;

        $z29 = virtualinvoke newSibling.<berkeley.com.sleepycat.je.tree.IN: boolean hasCachedChildrenFlag()>();

        if $z29 != 0 goto label30;

     label28:
        $z30 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isUpperIN()>();

        if $z30 == 0 goto label29;

     label29:
        $r24 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.evictor.Evictor getEvictor()>();

        virtualinvoke $r24.<berkeley.com.sleepycat.je.evictor.Evictor: void addBack(berkeley.com.sleepycat.je.tree.IN)>(newSibling);

     label30:
        $z31 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isUpperIN()>();

        if $z31 == 0 goto label31;

        if haveCachedChildren == 0 goto label31;

        $z32 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean hasCachedChildrenFlag()>();

        if $z32 != 0 goto label31;

        $r25 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.evictor.Evictor getEvictor()>();

        virtualinvoke $r25.<berkeley.com.sleepycat.je.evictor.Evictor: void addBack(berkeley.com.sleepycat.je.tree.IN)>(this);

     label31:
        $r26 = <java.util.logging.Level: java.util.logging.Level FINE>;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void traceSplit(java.util.logging.Level,berkeley.com.sleepycat.je.tree.IN,berkeley.com.sleepycat.je.tree.IN,long,long,long,int,int,int)>($r26, parent, newSibling, parentLsn#224, myNewLsn, newSiblingLsn, splitIndex#1, idKeyIndex, childIndex);

     label32:
        virtualinvoke newSibling.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        goto label36;

     label33:
        $r27 := @caughtexception;

     label34:
        l29 = $r27;

     label35:
        virtualinvoke newSibling.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        throw l29;

     label36:
        return newSibling;

        catch java.lang.Throwable from label06 to label32 with label33;
        catch java.lang.Throwable from label34 to label35 with label33;
    }

    private void shiftEntriesLeft(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int byHowMuch, $i0, $i1, $i2, i#10, $i3;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        byHowMuch := @parameter0: int;

        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        $i1 = $i0 - byHowMuch;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void copyEntries(int,int,int)>(byHowMuch, 0, $i1);

        $i2 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        i#10 = $i2 - byHowMuch;

     label1:
        $i3 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        if i#10 >= $i3 goto label2;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void clearEntry(int)>(i#10);

        i#10 = i#10 + 1;

        goto label1;

     label2:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setDirty(boolean)>(1);

        return;
    }

    private void traceSplit(java.util.logging.Level, berkeley.com.sleepycat.je.tree.IN, berkeley.com.sleepycat.je.tree.IN, long, long, long, int, int, int)
    {
        berkeley.com.sleepycat.je.tree.IN this, parent, newSibling;
        java.util.logging.Level level;
        long parentLsn, myNewLsn, newSiblingLsn, $l0, $l1, $l2;
        int splitIndex, idKeyIndex, childIndex;
        java.util.logging.Logger logger;
        java.lang.StringBuilder sb, $r1;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0, $r25;
        boolean $z0;
        java.lang.String $r10, $r13, $r16, $r26;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r24;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        level := @parameter0: java.util.logging.Level;

        parent := @parameter1: berkeley.com.sleepycat.je.tree.IN;

        newSibling := @parameter2: berkeley.com.sleepycat.je.tree.IN;

        parentLsn := @parameter3: long;

        myNewLsn := @parameter4: long;

        newSiblingLsn := @parameter5: long;

        splitIndex := @parameter6: int;

        idKeyIndex := @parameter7: int;

        childIndex := @parameter8: int;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        logger = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: java.util.logging.Logger getLogger()>();

        $z0 = virtualinvoke logger.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>(level);

        if $z0 == 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        sb = $r1;

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Split:");

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" parent=");

        $l0 = virtualinvoke parent.<berkeley.com.sleepycat.je.tree.IN: long getNodeId()>();

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" child=");

        $l1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getNodeId()>();

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" newSibling=");

        $l2 = virtualinvoke newSibling.<berkeley.com.sleepycat.je.tree.IN: long getNodeId()>();

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" parentLsn = ");

        $r10 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(parentLsn);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" childLsn = ");

        $r13 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(myNewLsn);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" newSiblingLsn = ");

        $r16 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(newSiblingLsn);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" splitIdx=");

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(splitIndex);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" idKeyIdx=");

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(idKeyIndex);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" childIdx=");

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(childIndex);

        $r24 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $r25 = virtualinvoke $r24.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r26 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: void logMsg(java.util.logging.Logger,berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.util.logging.Level,java.lang.String)>(logger, $r25, level, $r26);

     label1:
        return;
    }

    void appendEntryFromOtherNode(berkeley.com.sleepycat.je.tree.IN, int)
    {
        berkeley.com.sleepycat.je.tree.IN this, 'from', in;
        int fromIdx, ohBinId, idx, $i0, $i1, $i2, $i3, $i7;
        berkeley.com.sleepycat.je.tree.Node target;
        boolean ohBinPri2, ohBinDirty, multiSlotChange, $z0, $z1, $z2, $z3;
        long lsn, oldSize, newSize, $l4, $l5, $l6, $l8;
        byte state;
        byte[] key, data, $r3, $r4, $r7;
        java.lang.AssertionError $r0;
        berkeley.com.sleepycat.je.tree.INTargetRep $r1;
        java.lang.Object $r2;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r6;
        berkeley.com.sleepycat.je.evictor.OffHeapCache $r8;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        'from' := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        fromIdx := @parameter1: int;

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBINDelta()>();

        if $z1 == 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $r1 = 'from'.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets>;

        $r2 = virtualinvoke $r1.<berkeley.com.sleepycat.je.tree.INTargetRep: java.lang.Object get(int)>(fromIdx);

        target = (berkeley.com.sleepycat.je.tree.Node) $r2;

        ohBinId = virtualinvoke 'from'.<berkeley.com.sleepycat.je.tree.IN: int getOffHeapBINId(int)>(fromIdx);

        ohBinPri2 = virtualinvoke 'from'.<berkeley.com.sleepycat.je.tree.IN: boolean isOffHeapBINPri2(int)>(fromIdx);

        ohBinDirty = virtualinvoke 'from'.<berkeley.com.sleepycat.je.tree.IN: boolean isOffHeapBINDirty(int)>(fromIdx);

        lsn = virtualinvoke 'from'.<berkeley.com.sleepycat.je.tree.IN: long getLsn(int)>(fromIdx);

        $r3 = 'from'.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        state = $r3[fromIdx];

        key = virtualinvoke 'from'.<berkeley.com.sleepycat.je.tree.IN: byte[] getKey(int)>(fromIdx);

        $z2 = virtualinvoke 'from'.<berkeley.com.sleepycat.je.tree.IN: boolean haveEmbeddedData(int)>(fromIdx);

        if $z2 == 0 goto label2;

        $r4 = virtualinvoke 'from'.<berkeley.com.sleepycat.je.tree.IN: byte[] getData(int)>(fromIdx);

        goto label3;

     label2:
        $r4 = null;

     label3:
        data = $r4;

        $i0 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: int computeLsnOverhead()>();

        oldSize = (long) $i0;

        $i1 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        $i2 = $i1 + 1;

        this.<berkeley.com.sleepycat.je.tree.IN: int nEntries> = $i2;

        $i3 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        idx = $i3 - 1;

        if target == null goto label4;

        $z3 = virtualinvoke target.<berkeley.com.sleepycat.je.tree.Node: boolean isIN()>();

        if $z3 == 0 goto label4;

        in = (berkeley.com.sleepycat.je.tree.IN) target;

        $r6 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: void latchNoUpdateLRU(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>($r6);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setTarget(int,berkeley.com.sleepycat.je.tree.Node)>(idx, target);

        virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        goto label5;

     label4:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setTarget(int,berkeley.com.sleepycat.je.tree.Node)>(idx, target);

     label5:
        multiSlotChange = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean insertKey(int,byte[],byte[])>(idx, key, data);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setLsnInternal(int,long)>(idx, lsn);

        $r7 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $r7[idx] = state;

        if ohBinId < 0 goto label6;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setOffHeapBINId(int,int,boolean,boolean)>(idx, ohBinId, ohBinPri2, ohBinDirty);

        $r8 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.evictor.OffHeapCache getOffHeapCache()>();

        virtualinvoke $r8.<berkeley.com.sleepycat.je.evictor.OffHeapCache: void setOwner(int,berkeley.com.sleepycat.je.tree.IN)>(ohBinId, this);

     label6:
        if multiSlotChange == 0 goto label7;

        $l4 = this.<berkeley.com.sleepycat.je.tree.IN: long inMemorySize>;

        $l5 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long computeMemorySize()>();

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void updateMemorySize(long,long)>($l4, $l5);

        goto label8;

     label7:
        $l6 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getEntryInMemorySize(int)>(idx);

        $i7 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: int computeLsnOverhead()>();

        $l8 = (long) $i7;

        newSize = $l6 + $l8;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void updateMemorySize(long,long)>(oldSize, newSize);

     label8:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setDirty(boolean)>(1);

        return;
    }

    final berkeley.com.sleepycat.je.tree.IN fetchINWithNoLatch(int, byte[], berkeley.com.sleepycat.je.CacheMode)
    {
        berkeley.com.sleepycat.je.tree.IN this, $r0;
        int idx;
        byte[] searchKey;
        berkeley.com.sleepycat.je.CacheMode cacheMode;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        searchKey := @parameter1: byte[];

        cacheMode := @parameter2: berkeley.com.sleepycat.je.CacheMode;

        $r0 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN fetchINWithNoLatch(int,byte[],berkeley.com.sleepycat.je.tree.SearchResult,berkeley.com.sleepycat.je.CacheMode)>(idx, searchKey, null, cacheMode);

        return $r0;
    }

    private berkeley.com.sleepycat.je.tree.IN fetchINWithNoLatch(int, byte[], berkeley.com.sleepycat.je.tree.SearchResult, berkeley.com.sleepycat.je.CacheMode)
    {
        berkeley.com.sleepycat.je.tree.IN this, child#25;
        byte[] searchKey, ohBytes#40;
        berkeley.com.sleepycat.je.tree.SearchResult result;
        berkeley.com.sleepycat.je.CacheMode cacheMode, $r10;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        berkeley.com.sleepycat.je.evictor.OffHeapCache ohCache;
        long lsn, $l4, $l8;
        berkeley.com.sleepycat.je.log.WholeEntry wholeEntry;
        berkeley.com.sleepycat.je.log.entry.LogEntry logEntry;
        java.lang.Throwable l15, $r20, e#208, $r31;
        int idx#1, $i1, $i2, $i3, $i6, $i7, $i10;
        boolean $z0, $z1, $z2, $z3, isMiss#17, $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.AssertionError $r0, $r1, $r32;
        berkeley.com.sleepycat.je.tree.INTargetRep $r2, $r12, $r14, $r16;
        java.lang.Object $r3, $r9, $r13, $r15, $r17;
        byte $b0, $b5, $b9;
        java.lang.String $r4, $r23, $r25, $r29, $r30;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r5, $r21, $r24, e#220, $r27;
        berkeley.com.sleepycat.je.utilint.TestHook $r6;
        berkeley.com.sleepycat.je.log.LogManager $r7;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r8, $r11, $r18, $r19;
        berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason $r22, $r28;
        java.lang.RuntimeException $r26, e#229;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx#1 := @parameter0: int;

        searchKey := @parameter1: byte[];

        result := @parameter2: berkeley.com.sleepycat.je.tree.SearchResult;

        cacheMode := @parameter3: berkeley.com.sleepycat.je.CacheMode;

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isUpperIN()>();

        if $z1 != 0 goto label01;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label01:
        $z2 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z2 != 0 goto label02;

        $z3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isLatchOwner()>();

        if $z3 != 0 goto label02;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label02:
        envImpl = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        ohCache = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.evictor.OffHeapCache getOffHeapCache()>();

        isMiss#17 = 0;

        $r2 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets>;

        $r3 = virtualinvoke $r2.<berkeley.com.sleepycat.je.tree.INTargetRep: java.lang.Object get(int)>(idx#1);

        child#25 = (berkeley.com.sleepycat.je.tree.IN) $r3;

        if child#25 != null goto label45;

        lsn = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getLsn(int)>(idx#1);

        $b0 = lsn cmp -1L;

        if $b0 != 0 goto label03;

        $r4 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: java.lang.String makeFetchErrorMsg(java.lang.String,long,int)>("NULL_LSN in upper IN", lsn, idx#1);

        $r5 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>($r4);

        throw $r5;

     label03:
        ohBytes#40 = null;

        $i1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: int getNormalizedLevel()>();

        if $i1 != 2 goto label04;

        ohBytes#40 = virtualinvoke ohCache.<berkeley.com.sleepycat.je.evictor.OffHeapCache: byte[] getBINBytes(berkeley.com.sleepycat.je.tree.IN,int)>(this, idx#1);

     label04:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void pin()>();

     label05:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        $r6 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.utilint.TestHook fetchINHook>;

        staticinvoke <berkeley.com.sleepycat.je.utilint.TestHookExecute: boolean doHookIfSet(berkeley.com.sleepycat.je.utilint.TestHook)>($r6);

        if ohBytes#40 == null goto label06;

        child#25 = virtualinvoke ohCache.<berkeley.com.sleepycat.je.evictor.OffHeapCache: berkeley.com.sleepycat.je.tree.BIN materializeBIN(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,byte[])>(envImpl, ohBytes#40);

        goto label07;

     label06:
        $r7 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.log.LogManager getLogManager()>();

        $i2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: int getLastLoggedSize(int)>(idx#1);

        wholeEntry = virtualinvoke $r7.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.WholeEntry getLogEntryAllowInvisibleAtRecovery(long,int)>(lsn, $i2);

        logEntry = virtualinvoke wholeEntry.<berkeley.com.sleepycat.je.log.WholeEntry: berkeley.com.sleepycat.je.log.entry.LogEntry getEntry()>();

        $r8 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $r9 = interfaceinvoke logEntry.<berkeley.com.sleepycat.je.log.entry.LogEntry: java.lang.Object getResolvedItem(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>($r8);

        child#25 = (berkeley.com.sleepycat.je.tree.IN) $r9;

        isMiss#17 = 1;

     label07:
        $r10 = <berkeley.com.sleepycat.je.CacheMode: berkeley.com.sleepycat.je.CacheMode UNCHANGED>;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void latch(berkeley.com.sleepycat.je.CacheMode)>($r10);

        $i3 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        if idx#1 >= $i3 goto label08;

        $l4 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getLsn(int)>(idx#1);

        $b5 = $l4 cmp lsn;

        if $b5 != 0 goto label08;

        $r11 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $z4 = virtualinvoke $r11.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isDeferredWriteMode()>();

        if $z4 == 0 goto label17;

        $r12 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets>;

        $r13 = virtualinvoke $r12.<berkeley.com.sleepycat.je.tree.INTargetRep: java.lang.Object get(int)>(idx#1);

        if $r13 == null goto label17;

     label08:
        if searchKey != null goto label12;

     label09:
        if 0 != 0 goto label11;

        if child#25 == null goto label10;

        virtualinvoke child#25.<berkeley.com.sleepycat.je.tree.IN: void incFetchStats(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,boolean)>(envImpl, isMiss#17);

     label10:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void releaseLatchIfOwner()>();

     label11:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void unpin()>();

        return null;

     label12:
        idx#1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: int findEntry(byte[],boolean,boolean)>(searchKey, 0, 0);

        if idx#1 == 0 goto label13;

        $i6 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        $i7 = $i6 - 1;

        if idx#1 != $i7 goto label17;

     label13:
        $z5 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isKeyInBounds(byte[])>(searchKey);

        if $z5 != 0 goto label17;

     label14:
        if 0 != 0 goto label16;

        if child#25 == null goto label15;

        virtualinvoke child#25.<berkeley.com.sleepycat.je.tree.IN: void incFetchStats(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,boolean)>(envImpl, isMiss#17);

     label15:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void releaseLatchIfOwner()>();

     label16:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void unpin()>();

        return null;

     label17:
        if result == null goto label18;

        result.<berkeley.com.sleepycat.je.tree.SearchResult: int index> = idx#1;

     label18:
        $r14 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets>;

        $r15 = virtualinvoke $r14.<berkeley.com.sleepycat.je.tree.INTargetRep: java.lang.Object get(int)>(idx#1);

        if $r15 == null goto label19;

        $r16 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets>;

        $r17 = virtualinvoke $r16.<berkeley.com.sleepycat.je.tree.INTargetRep: java.lang.Object get(int)>(idx#1);

        child#25 = (berkeley.com.sleepycat.je.tree.IN) $r17;

        goto label34;

     label19:
        $l8 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getLsn(int)>(idx#1);

        $b9 = $l8 cmp lsn;

        if $b9 == 0 goto label23;

     label20:
        if 0 != 0 goto label22;

        if child#25 == null goto label21;

        virtualinvoke child#25.<berkeley.com.sleepycat.je.tree.IN: void incFetchStats(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,boolean)>(envImpl, isMiss#17);

     label21:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void releaseLatchIfOwner()>();

     label22:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void unpin()>();

        return null;

     label23:
        if ohBytes#40 == null goto label27;

        $z6 = virtualinvoke ohCache.<berkeley.com.sleepycat.je.evictor.OffHeapCache: boolean haveBINBytesChanged(berkeley.com.sleepycat.je.tree.IN,int,byte[])>(this, idx#1, ohBytes#40);

        if $z6 == 0 goto label27;

     label24:
        if 0 != 0 goto label26;

        if child#25 == null goto label25;

        virtualinvoke child#25.<berkeley.com.sleepycat.je.tree.IN: void incFetchStats(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,boolean)>(envImpl, isMiss#17);

     label25:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void releaseLatchIfOwner()>();

     label26:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void unpin()>();

        return null;

     label27:
        if ohBytes#40 != null goto label31;

        $i10 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: int getOffHeapBINId(int)>(idx#1);

        if $i10 < 0 goto label31;

     label28:
        if 0 != 0 goto label30;

        if child#25 == null goto label29;

        virtualinvoke child#25.<berkeley.com.sleepycat.je.tree.IN: void incFetchStats(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,boolean)>(envImpl, isMiss#17);

     label29:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void releaseLatchIfOwner()>();

     label30:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void unpin()>();

        return null;

     label31:
        $r18 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        virtualinvoke child#25.<berkeley.com.sleepycat.je.tree.IN: void latchNoUpdateLRU(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>($r18);

        if ohBytes#40 == null goto label32;

        specialinvoke child#25.<berkeley.com.sleepycat.je.tree.IN: void postLoadInit(berkeley.com.sleepycat.je.tree.IN,int)>(this, idx#1);

        goto label33;

     label32:
        $r19 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        virtualinvoke child#25.<berkeley.com.sleepycat.je.tree.IN: void postFetchInit(berkeley.com.sleepycat.je.dbi.DatabaseImpl,long)>($r19, lsn);

     label33:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void attachNode(int,berkeley.com.sleepycat.je.tree.Node,byte[])>(idx#1, child#25, null);

        virtualinvoke child#25.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label34:
        if 1 != 0 goto label36;

        if child#25 == null goto label35;

        virtualinvoke child#25.<berkeley.com.sleepycat.je.tree.IN: void incFetchStats(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,boolean)>(envImpl, isMiss#17);

     label35:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void releaseLatchIfOwner()>();

     label36:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void unpin()>();

        goto label45;

     label37:
        $r20 := @caughtexception;

     label38:
        e#208 = $r20;

        $r21 = new berkeley.com.sleepycat.je.EnvironmentFailureException;

        $r22 = <berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason: berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason LOG_FILE_NOT_FOUND>;

        $r23 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: java.lang.String makeFetchErrorMsg(java.lang.String,long,int)>(null, lsn, idx#1);

        specialinvoke $r21.<berkeley.com.sleepycat.je.EnvironmentFailureException: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason,java.lang.String,java.lang.Throwable)>(envImpl, $r22, $r23, e#208);

        throw $r21;

     label39:
        $r24 := @caughtexception;

        e#220 = $r24;

        $r25 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: java.lang.String makeFetchErrorMsg(java.lang.String,long,int)>(null, lsn, idx#1);

        virtualinvoke e#220.<berkeley.com.sleepycat.je.EnvironmentFailureException: void addErrorMessage(java.lang.String)>($r25);

        throw e#220;

     label40:
        $r26 := @caughtexception;

        e#229 = $r26;

        $r27 = new berkeley.com.sleepycat.je.EnvironmentFailureException;

        $r28 = <berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason: berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason LOG_INTEGRITY>;

        $r29 = virtualinvoke e#229.<java.lang.RuntimeException: java.lang.String toString()>();

        $r30 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: java.lang.String makeFetchErrorMsg(java.lang.String,long,int)>($r29, lsn, idx#1);

        specialinvoke $r27.<berkeley.com.sleepycat.je.EnvironmentFailureException: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason,java.lang.String,java.lang.Throwable)>(envImpl, $r28, $r30, e#229);

        throw $r27;

     label41:
        $r31 := @caughtexception;

        l15 = $r31;

     label42:
        if 0 != 0 goto label44;

        if child#25 == null goto label43;

        virtualinvoke child#25.<berkeley.com.sleepycat.je.tree.IN: void incFetchStats(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,boolean)>(envImpl, isMiss#17);

     label43:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void releaseLatchIfOwner()>();

     label44:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void unpin()>();

        throw l15;

     label45:
        $z7 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z7 != 0 goto label46;

        $z8 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean hasCachedChildren()>();

        $z9 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean hasCachedChildrenFlag()>();

        if $z8 == $z9 goto label46;

        $r32 = new java.lang.AssertionError;

        specialinvoke $r32.<java.lang.AssertionError: void <init>()>();

        throw $r32;

     label46:
        virtualinvoke child#25.<berkeley.com.sleepycat.je.tree.IN: void incFetchStats(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,boolean)>(envImpl, isMiss#17);

        return child#25;

        catch java.io.FileNotFoundException from label05 to label09 with label37;
        catch java.io.FileNotFoundException from label12 to label14 with label37;
        catch java.io.FileNotFoundException from label17 to label20 with label37;
        catch java.io.FileNotFoundException from label23 to label24 with label37;
        catch java.io.FileNotFoundException from label27 to label28 with label37;
        catch java.io.FileNotFoundException from label31 to label34 with label37;
        catch berkeley.com.sleepycat.je.EnvironmentFailureException from label05 to label09 with label39;
        catch berkeley.com.sleepycat.je.EnvironmentFailureException from label12 to label14 with label39;
        catch berkeley.com.sleepycat.je.EnvironmentFailureException from label17 to label20 with label39;
        catch berkeley.com.sleepycat.je.EnvironmentFailureException from label23 to label24 with label39;
        catch berkeley.com.sleepycat.je.EnvironmentFailureException from label27 to label28 with label39;
        catch berkeley.com.sleepycat.je.EnvironmentFailureException from label31 to label34 with label39;
        catch java.lang.RuntimeException from label05 to label09 with label40;
        catch java.lang.RuntimeException from label12 to label14 with label40;
        catch java.lang.RuntimeException from label17 to label20 with label40;
        catch java.lang.RuntimeException from label23 to label24 with label40;
        catch java.lang.RuntimeException from label27 to label28 with label40;
        catch java.lang.RuntimeException from label31 to label34 with label40;
        catch java.lang.Throwable from label05 to label09 with label41;
        catch java.lang.Throwable from label12 to label14 with label41;
        catch java.lang.Throwable from label17 to label20 with label41;
        catch java.lang.Throwable from label23 to label24 with label41;
        catch java.lang.Throwable from label27 to label28 with label41;
        catch java.lang.Throwable from label31 to label34 with label41;
        catch java.lang.Throwable from label38 to label42 with label41;
    }

    public final boolean isKeyInBounds(byte[])
    {
        berkeley.com.sleepycat.je.tree.IN this;
        byte[] key, $r2, $r4;
        java.util.Comparator comparator;
        int idx, $i0, cmp#23, $i1, cmp#41;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.AssertionError $r0;
        berkeley.com.sleepycat.je.tree.INKeyRep $r1, $r3;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        key := @parameter0: byte[];

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBINDelta()>();

        if $z1 == 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        if $i0 >= 2 goto label2;

        return 0;

     label2:
        comparator = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: java.util.Comparator getKeyComparator()>();

        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $r2 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] keyPrefix>;

        $z2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean haveEmbeddedData(int)>(0);

        cmp#23 = virtualinvoke $r1.<berkeley.com.sleepycat.je.tree.INKeyRep: int compareKeys(byte[],byte[],int,boolean,java.util.Comparator)>(key, $r2, 0, $z2, comparator);

        if cmp#23 >= 0 goto label3;

        return 0;

     label3:
        $i1 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        idx = $i1 - 1;

        $r3 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $r4 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] keyPrefix>;

        $z3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean haveEmbeddedData(int)>(idx);

        cmp#41 = virtualinvoke $r3.<berkeley.com.sleepycat.je.tree.INKeyRep: int compareKeys(byte[],byte[],int,boolean,java.util.Comparator)>(key, $r4, idx, $z3, comparator);

        if cmp#41 > 0 goto label4;

        $z4 = 1;

        goto label5;

     label4:
        $z4 = 0;

     label5:
        return $z4;
    }

    public void prepareForSlotReuse(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx, $i0;
        berkeley.com.sleepycat.je.evictor.OffHeapCache ohCache;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r0;
        boolean $z0, $z1;
        berkeley.com.sleepycat.je.tree.Node $r1;
        berkeley.com.sleepycat.je.tree.BIN $r2;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $z0 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isDeferredWriteMode()>();

        if $z0 == 0 goto label1;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setLsn(int,long,boolean)>(idx, -1L, 0);

     label1:
        ohCache = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.evictor.OffHeapCache getOffHeapCache()>();

        $z1 = virtualinvoke ohCache.<berkeley.com.sleepycat.je.evictor.OffHeapCache: boolean isEnabled()>();

        if $z1 == 0 goto label2;

        $i0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: int getNormalizedLevel()>();

        if $i0 != 2 goto label2;

        $r1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.Node getTarget(int)>(idx);

        $r2 = (berkeley.com.sleepycat.je.tree.BIN) $r1;

        virtualinvoke ohCache.<berkeley.com.sleepycat.je.evictor.OffHeapCache: long freeBIN(berkeley.com.sleepycat.je.tree.BIN,berkeley.com.sleepycat.je.tree.IN,int)>($r2, this, idx);

     label2:
        return;
    }

    private void updateSplitSlot(int, berkeley.com.sleepycat.je.tree.IN, long, byte[])
    {
        berkeley.com.sleepycat.je.tree.IN this, child;
        int idx, s;
        long lsn, oldSize, newSize, newSize, $l0, $l1;
        byte[] key, $r2;
        boolean $z0, $z1, $z2, multiSlotChange#29, $z3, $z4, $z5;
        java.lang.AssertionError $r0, $r4;
        berkeley.com.sleepycat.je.tree.INKeyRep $r1;
        java.util.Comparator $r3;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        child := @parameter1: berkeley.com.sleepycat.je.tree.IN;

        lsn := @parameter2: long;

        key := @parameter3: byte[];

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isUpperIN()>();

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        oldSize = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getEntryInMemorySize(int)>(idx);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setLsn(int,long)>(idx, lsn);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setTarget(int,berkeley.com.sleepycat.je.tree.Node)>(idx, child);

        if idx != 0 goto label5;

        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $r2 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] keyPrefix>;

        $z2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean haveEmbeddedData(int)>(idx);

        $r3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: java.util.Comparator getKeyComparator()>();

        s = virtualinvoke $r1.<berkeley.com.sleepycat.je.tree.INKeyRep: int compareKeys(byte[],byte[],int,boolean,java.util.Comparator)>(key, $r2, idx, $z2, $r3);

        multiSlotChange#29 = 0;

        if s >= 0 goto label2;

        multiSlotChange#29 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean updateKey(int,byte[],byte[])>(idx, key, null);

     label2:
        if multiSlotChange#29 == 0 goto label3;

        $l0 = this.<berkeley.com.sleepycat.je.tree.IN: long inMemorySize>;

        $l1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long computeMemorySize()>();

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void updateMemorySize(long,long)>($l0, $l1);

        goto label4;

     label3:
        newSize = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getEntryInMemorySize(int)>(idx);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void updateMemorySize(long,long)>(oldSize, newSize);

     label4:
        goto label6;

     label5:
        newSize = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getEntryInMemorySize(int)>(idx);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void updateMemorySize(long,long)>(oldSize, newSize);

     label6:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setDirty(boolean)>(1);

        $z3 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z3 != 0 goto label7;

        $z4 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean hasCachedChildren()>();

        $z5 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean hasCachedChildrenFlag()>();

        if $z4 == $z5 goto label7;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label7:
        return;
    }

    berkeley.com.sleepycat.je.tree.IN createNewInstance(byte[], int, int)
    {
        berkeley.com.sleepycat.je.tree.IN this, $r0;
        byte[] identifierKey;
        int maxEntries, level;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r1;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        identifierKey := @parameter0: byte[];

        maxEntries := @parameter1: int;

        level := @parameter2: int;

        $r0 = new berkeley.com.sleepycat.je.tree.IN;

        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        specialinvoke $r0.<berkeley.com.sleepycat.je.tree.IN: void <init>(berkeley.com.sleepycat.je.dbi.DatabaseImpl,byte[],int,int)>($r1, identifierKey, maxEntries, level);

        return $r0;
    }

    void adjustCursors(berkeley.com.sleepycat.je.tree.IN, int, int)
    {
        berkeley.com.sleepycat.je.tree.IN this, newSibling;
        int newSiblingLow, newSiblingHigh;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        newSibling := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        newSiblingLow := @parameter1: int;

        newSiblingHigh := @parameter2: int;

        return;
    }

    public final void updateRecord(int, long, long, long, int, byte[], byte[], int, boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx, newSize, expiration;
        long oldMemSize, newLSN, newVLSN, oldSlotSize, newSlotSize, newMemSize, $l0, $l1, $l2;
        byte[] newKey, newData;
        boolean expirationInHours, multiSlotChange, $z0, $z1, $z2;
        berkeley.com.sleepycat.je.tree.BIN bin, $r1;
        berkeley.com.sleepycat.je.tree.Node newLN;
        java.lang.AssertionError $r0;
        berkeley.com.sleepycat.je.tree.INTargetRep $r2;
        java.lang.Object $r3;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        oldMemSize := @parameter1: long;

        newLSN := @parameter2: long;

        newVLSN := @parameter3: long;

        newSize := @parameter4: int;

        newKey := @parameter5: byte[];

        newData := @parameter6: byte[];

        expiration := @parameter7: int;

        expirationInHours := @parameter8: boolean;

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        bin = (berkeley.com.sleepycat.je.tree.BIN) this;

        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void freeOffHeapLN(int)>(idx);

        oldSlotSize = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getEntryInMemorySize(int)>(idx);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setLsn(int,long)>(idx, newLSN);

        multiSlotChange = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean updateLNSlotKey(int,byte[],byte[])>(idx, newKey, newData);

        $z2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isEmbeddedLN(int)>(idx);

        if $z2 == 0 goto label2;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void clearLastLoggedSize(int)>(idx);

        $r1 = (berkeley.com.sleepycat.je.tree.BIN) this;

        virtualinvoke $r1.<berkeley.com.sleepycat.je.tree.BIN: void setCachedVLSN(int,long)>(idx, newVLSN);

        goto label3;

     label2:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setLastLoggedSize(int,int)>(idx, newSize);

     label3:
        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void setExpiration(int,int,boolean)>(idx, expiration, expirationInHours);

        if multiSlotChange == 0 goto label4;

        $l0 = this.<berkeley.com.sleepycat.je.tree.IN: long inMemorySize>;

        $l1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long computeMemorySize()>();

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void updateMemorySize(long,long)>($l0, $l1);

        goto label7;

     label4:
        newSlotSize = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getEntryInMemorySize(int)>(idx);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void updateMemorySize(long,long)>(oldSlotSize, newSlotSize);

        $r2 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets>;

        $r3 = virtualinvoke $r2.<berkeley.com.sleepycat.je.tree.INTargetRep: java.lang.Object get(int)>(idx);

        newLN = (berkeley.com.sleepycat.je.tree.Node) $r3;

        if newLN == null goto label5;

        $l2 = virtualinvoke newLN.<berkeley.com.sleepycat.je.tree.Node: long getMemorySizeIncludedByParent()>();

        goto label6;

     label5:
        $l2 = 0L;

     label6:
        newMemSize = $l2;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void updateMemorySize(long,long)>(oldMemSize, newMemSize);

     label7:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setDirty(boolean)>(1);

        return;
    }

    public final berkeley.com.sleepycat.je.tree.LN getLN(int, berkeley.com.sleepycat.je.CacheMode)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx;
        berkeley.com.sleepycat.je.CacheMode cacheMode, $r3, $r4;
        berkeley.com.sleepycat.je.tree.LN ln;
        berkeley.com.sleepycat.je.evictor.OffHeapCache ohCache;
        boolean $z0, $z1, $z2;
        java.lang.AssertionError $r0;
        berkeley.com.sleepycat.je.tree.INTargetRep $r1;
        java.lang.Object $r2;
        berkeley.com.sleepycat.je.tree.BIN $r5;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        cacheMode := @parameter1: berkeley.com.sleepycat.je.CacheMode;

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets>;

        $r2 = virtualinvoke $r1.<berkeley.com.sleepycat.je.tree.INTargetRep: java.lang.Object get(int)>(idx);

        ln = (berkeley.com.sleepycat.je.tree.LN) $r2;

        if ln != null goto label2;

        return null;

     label2:
        $r3 = <berkeley.com.sleepycat.je.CacheMode: berkeley.com.sleepycat.je.CacheMode UNCHANGED>;

        if cacheMode == $r3 goto label3;

        $r4 = <berkeley.com.sleepycat.je.CacheMode: berkeley.com.sleepycat.je.CacheMode MAKE_COLD>;

        if cacheMode == $r4 goto label3;

        virtualinvoke ln.<berkeley.com.sleepycat.je.tree.LN: void setFetchedCold(boolean)>(0);

     label3:
        ohCache = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.evictor.OffHeapCache getOffHeapCache()>();

        $z2 = virtualinvoke ohCache.<berkeley.com.sleepycat.je.evictor.OffHeapCache: boolean isEnabled()>();

        if $z2 == 0 goto label4;

        $r5 = (berkeley.com.sleepycat.je.tree.BIN) this;

        virtualinvoke ohCache.<berkeley.com.sleepycat.je.evictor.OffHeapCache: void freeRedundantLN(berkeley.com.sleepycat.je.tree.BIN,int,berkeley.com.sleepycat.je.tree.LN,berkeley.com.sleepycat.je.CacheMode)>($r5, idx, ln, cacheMode);

     label4:
        return ln;
    }

    public final void deleteRecord(int, long, long, long, int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx, newSize;
        long oldMemSize, newLSN, newVLSN, newMemSize;
        berkeley.com.sleepycat.je.tree.BIN bin;
        berkeley.com.sleepycat.je.tree.Node newLN;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.AssertionError $r0, $r3, $r6;
        berkeley.com.sleepycat.je.tree.INTargetRep $r1, $r4;
        java.lang.Object $r2, $r5;
        byte $b0, $b1;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        oldMemSize := @parameter1: long;

        newLSN := @parameter2: long;

        newVLSN := @parameter3: long;

        newSize := @parameter4: int;

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        bin = (berkeley.com.sleepycat.je.tree.BIN) this;

        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void freeOffHeapLN(int)>(idx);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setLsn(int,long)>(idx, newLSN);

        $z2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isEmbeddedLN(int)>(idx);

        if $z2 == 0 goto label2;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void clearLastLoggedSize(int)>(idx);

        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void setCachedVLSN(int,long)>(idx, newVLSN);

        goto label3;

     label2:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setLastLoggedSize(int,int)>(idx, newSize);

     label3:
        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets>;

        $r2 = virtualinvoke $r1.<berkeley.com.sleepycat.je.tree.INTargetRep: java.lang.Object get(int)>(idx);

        if $r2 == null goto label5;

        $z3 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z3 != 0 goto label4;

        $b0 = oldMemSize cmp 0L;

        if $b0 != 0 goto label4;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label4:
        $r4 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets>;

        $r5 = virtualinvoke $r4.<berkeley.com.sleepycat.je.tree.INTargetRep: java.lang.Object get(int)>(idx);

        newLN = (berkeley.com.sleepycat.je.tree.Node) $r5;

        newMemSize = virtualinvoke newLN.<berkeley.com.sleepycat.je.tree.Node: long getMemorySizeIncludedByParent()>();

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void updateMemorySize(long,long)>(oldMemSize, newMemSize);

        goto label6;

     label5:
        $z4 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z4 != 0 goto label6;

        $b1 = oldMemSize cmp 0L;

        if $b1 == 0 goto label6;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label6:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setPendingDeleted(int)>(idx);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setDirty(boolean)>(1);

        return;
    }

    public final void setPendingDeleted(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx;
        byte[] $r0, $r1;
        byte $b1, $b2, $b3, $b5, $b6, $b7;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $b1 = $r0[idx];

        $b2 = $b1 | 8;

        $b3 = (byte) $b2;

        $r0[idx] = $b3;

        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: byte[] entryStates>;

        $b5 = $r1[idx];

        $b6 = $b5 | 2;

        $b7 = (byte) $b6;

        $r1[idx] = $b7;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setDirty(boolean)>(1);

        return;
    }

    public berkeley.com.sleepycat.je.tree.IN fetchIN(int, berkeley.com.sleepycat.je.CacheMode)
    {
        berkeley.com.sleepycat.je.tree.IN this, child#21;
        int idx, $i1, $i2;
        berkeley.com.sleepycat.je.CacheMode cacheMode;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        berkeley.com.sleepycat.je.evictor.OffHeapCache ohCache;
        long lsn;
        berkeley.com.sleepycat.je.log.WholeEntry wholeEntry;
        berkeley.com.sleepycat.je.log.entry.LogEntry logEntry;
        boolean $z0, $z1, $z2, isMiss#15, $z3, $z4, $z5;
        java.lang.AssertionError $r0, $r22;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r1, $r5, $r12, $r15, e#94, $r18;
        berkeley.com.sleepycat.je.tree.INTargetRep $r2;
        java.lang.Object $r3, $r8;
        byte $b0;
        java.lang.String $r4, $r14, $r16, $r20, $r21;
        byte[] ohBytes#36;
        berkeley.com.sleepycat.je.log.LogManager $r6;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r7, $r9, $r10;
        java.io.FileNotFoundException $r11, e#82;
        berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason $r13, $r19;
        java.lang.RuntimeException $r17, e#103;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        cacheMode := @parameter1: berkeley.com.sleepycat.je.CacheMode;

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isUpperIN()>();

        if $z1 != 0 goto label01;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label01:
        $z2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isLatchExclusiveOwner()>();

        if $z2 != 0 goto label02;

        $r1 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>("EX-latch not held before fetch");

        throw $r1;

     label02:
        envImpl = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        ohCache = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.evictor.OffHeapCache getOffHeapCache()>();

        isMiss#15 = 0;

        $r2 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets>;

        $r3 = virtualinvoke $r2.<berkeley.com.sleepycat.je.tree.INTargetRep: java.lang.Object get(int)>(idx);

        child#21 = (berkeley.com.sleepycat.je.tree.IN) $r3;

        if child#21 != null goto label12;

        lsn = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getLsn(int)>(idx);

        $b0 = lsn cmp -1L;

        if $b0 != 0 goto label03;

        $r4 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: java.lang.String makeFetchErrorMsg(java.lang.String,long,int)>("NULL_LSN in upper IN", lsn, idx);

        $r5 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>($r4);

        throw $r5;

     label03:
        ohBytes#36 = null;

        $i1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: int getNormalizedLevel()>();

        if $i1 != 2 goto label04;

        ohBytes#36 = virtualinvoke ohCache.<berkeley.com.sleepycat.je.evictor.OffHeapCache: byte[] getBINBytes(berkeley.com.sleepycat.je.tree.IN,int)>(this, idx);

        if ohBytes#36 == null goto label04;

        child#21 = virtualinvoke ohCache.<berkeley.com.sleepycat.je.evictor.OffHeapCache: berkeley.com.sleepycat.je.tree.BIN materializeBIN(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,byte[])>(envImpl, ohBytes#36);

     label04:
        if child#21 != null goto label05;

        $r6 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.log.LogManager getLogManager()>();

        $i2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: int getLastLoggedSize(int)>(idx);

        wholeEntry = virtualinvoke $r6.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.WholeEntry getLogEntryAllowInvisibleAtRecovery(long,int)>(lsn, $i2);

        logEntry = virtualinvoke wholeEntry.<berkeley.com.sleepycat.je.log.WholeEntry: berkeley.com.sleepycat.je.log.entry.LogEntry getEntry()>();

        $r7 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $r8 = interfaceinvoke logEntry.<berkeley.com.sleepycat.je.log.entry.LogEntry: java.lang.Object getResolvedItem(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>($r7);

        child#21 = (berkeley.com.sleepycat.je.tree.IN) $r8;

        isMiss#15 = 1;

     label05:
        $r9 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        virtualinvoke child#21.<berkeley.com.sleepycat.je.tree.IN: void latchNoUpdateLRU(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>($r9);

        if ohBytes#36 == null goto label06;

        specialinvoke child#21.<berkeley.com.sleepycat.je.tree.IN: void postLoadInit(berkeley.com.sleepycat.je.tree.IN,int)>(this, idx);

        goto label07;

     label06:
        $r10 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        virtualinvoke child#21.<berkeley.com.sleepycat.je.tree.IN: void postFetchInit(berkeley.com.sleepycat.je.dbi.DatabaseImpl,long)>($r10, lsn);

     label07:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void attachNode(int,berkeley.com.sleepycat.je.tree.Node,byte[])>(idx, child#21, null);

        virtualinvoke child#21.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label08:
        goto label12;

     label09:
        $r11 := @caughtexception;

        e#82 = $r11;

        $r12 = new berkeley.com.sleepycat.je.EnvironmentFailureException;

        $r13 = <berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason: berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason LOG_FILE_NOT_FOUND>;

        $r14 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: java.lang.String makeFetchErrorMsg(java.lang.String,long,int)>(null, lsn, idx);

        specialinvoke $r12.<berkeley.com.sleepycat.je.EnvironmentFailureException: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason,java.lang.String,java.lang.Throwable)>(envImpl, $r13, $r14, e#82);

        throw $r12;

     label10:
        $r15 := @caughtexception;

        e#94 = $r15;

        $r16 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: java.lang.String makeFetchErrorMsg(java.lang.String,long,int)>(null, lsn, idx);

        virtualinvoke e#94.<berkeley.com.sleepycat.je.EnvironmentFailureException: void addErrorMessage(java.lang.String)>($r16);

        throw e#94;

     label11:
        $r17 := @caughtexception;

        e#103 = $r17;

        $r18 = new berkeley.com.sleepycat.je.EnvironmentFailureException;

        $r19 = <berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason: berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason LOG_INTEGRITY>;

        $r20 = virtualinvoke e#103.<java.lang.RuntimeException: java.lang.String toString()>();

        $r21 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: java.lang.String makeFetchErrorMsg(java.lang.String,long,int)>($r20, lsn, idx);

        specialinvoke $r18.<berkeley.com.sleepycat.je.EnvironmentFailureException: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason,java.lang.String,java.lang.Throwable)>(envImpl, $r19, $r21, e#103);

        throw $r18;

     label12:
        $z3 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z3 != 0 goto label13;

        $z4 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean hasCachedChildren()>();

        $z5 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean hasCachedChildrenFlag()>();

        if $z4 == $z5 goto label13;

        $r22 = new java.lang.AssertionError;

        specialinvoke $r22.<java.lang.AssertionError: void <init>()>();

        throw $r22;

     label13:
        virtualinvoke child#21.<berkeley.com.sleepycat.je.tree.IN: void incFetchStats(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,boolean)>(envImpl, isMiss#15);

        return child#21;

        catch java.io.FileNotFoundException from label03 to label08 with label09;
        catch berkeley.com.sleepycat.je.EnvironmentFailureException from label03 to label08 with label10;
        catch java.lang.RuntimeException from label03 to label08 with label11;
    }

    void accumulateStats(berkeley.com.sleepycat.je.tree.TreeWalkerStatsAccumulator)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.tree.TreeWalkerStatsAccumulator acc;
        long $l0;
        java.lang.Long $r0;
        int $i1;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        acc := @parameter0: berkeley.com.sleepycat.je.tree.TreeWalkerStatsAccumulator;

        $l0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getNodeId()>();

        $r0 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $i1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: int getLevel()>();

        interfaceinvoke acc.<berkeley.com.sleepycat.je.tree.TreeWalkerStatsAccumulator: void processIN(berkeley.com.sleepycat.je.tree.IN,java.lang.Long,int)>(this, $r0, $i1);

        return;
    }

    public berkeley.com.sleepycat.je.tree.IN getParent()
    {
        berkeley.com.sleepycat.je.tree.IN this, $r0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $r0 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN parent>;

        return $r0;
    }

    final berkeley.com.sleepycat.je.tree.IN fetchINWithNoLatch(berkeley.com.sleepycat.je.tree.SearchResult, byte[], berkeley.com.sleepycat.je.CacheMode)
    {
        berkeley.com.sleepycat.je.tree.IN this, $r0;
        berkeley.com.sleepycat.je.tree.SearchResult result;
        byte[] searchKey;
        berkeley.com.sleepycat.je.CacheMode cacheMode;
        int $i0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        result := @parameter0: berkeley.com.sleepycat.je.tree.SearchResult;

        searchKey := @parameter1: byte[];

        cacheMode := @parameter2: berkeley.com.sleepycat.je.CacheMode;

        $i0 = result.<berkeley.com.sleepycat.je.tree.SearchResult: int index>;

        $r0 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN fetchINWithNoLatch(int,byte[],berkeley.com.sleepycat.je.tree.SearchResult,berkeley.com.sleepycat.je.CacheMode)>($i0, searchKey, result, cacheMode);

        return $r0;
    }

    public final long log()
    {
        berkeley.com.sleepycat.je.tree.IN this;
        berkeley.com.sleepycat.je.log.Provisional $r0;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $r0 = <berkeley.com.sleepycat.je.log.Provisional: berkeley.com.sleepycat.je.log.Provisional NO>;

        $l0 = staticinvoke <berkeley.com.sleepycat.je.tree.IN: long logInternal(berkeley.com.sleepycat.je.tree.IN,berkeley.com.sleepycat.je.log.entry.INLogEntry,boolean,boolean,berkeley.com.sleepycat.je.log.Provisional,boolean,berkeley.com.sleepycat.je.tree.IN)>(this, null, 0, 1, $r0, 0, null);

        return $l0;
    }

    public void logDirtyChildren() throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.tree.IN this, child;
        long childLsn;
        java.lang.Throwable l6, $r4;
        boolean $z0, $z1, $z2;
        java.lang.AssertionError $r0;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r1;
        int i#10, $i0;
        berkeley.com.sleepycat.je.tree.Node $r2;
        berkeley.com.sleepycat.je.CacheMode $r3;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBINDelta()>();

        if $z1 == 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $r1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        i#10 = 0;

     label2:
        $i0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: int getNEntries()>();

        if i#10 >= $i0 goto label9;

        $r2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.Node getTarget(int)>(i#10);

        child = (berkeley.com.sleepycat.je.tree.IN) $r2;

        if child == null goto label8;

        $r3 = <berkeley.com.sleepycat.je.CacheMode: berkeley.com.sleepycat.je.CacheMode UNCHANGED>;

        virtualinvoke child.<berkeley.com.sleepycat.je.tree.IN: void latch(berkeley.com.sleepycat.je.CacheMode)>($r3);

     label3:
        $z2 = virtualinvoke child.<berkeley.com.sleepycat.je.tree.IN: boolean getDirty()>();

        if $z2 == 0 goto label4;

        virtualinvoke child.<berkeley.com.sleepycat.je.tree.IN: void logDirtyChildren()>();

        childLsn = virtualinvoke child.<berkeley.com.sleepycat.je.tree.IN: long log(boolean,boolean,boolean,berkeley.com.sleepycat.je.tree.IN)>(0, 1, 1, this);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void updateEntry(int,long,long,int)>(i#10, childLsn, -1L, 0);

     label4:
        virtualinvoke child.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        goto label8;

     label5:
        $r4 := @caughtexception;

     label6:
        l6 = $r4;

     label7:
        virtualinvoke child.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        throw l6;

     label8:
        i#10 = i#10 + 1;

        goto label2;

     label9:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public long partialEviction()
    {
        berkeley.com.sleepycat.je.tree.IN this;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        return 0L;
    }

    public void setLastLoggedSize(int, int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx, lastLoggedSize;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        lastLoggedSize := @parameter1: int;

        return;
    }

    berkeley.com.sleepycat.je.tree.IN splitSpecial(berkeley.com.sleepycat.je.tree.IN, int, berkeley.com.sleepycat.je.tree.IN, int, byte[], boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this, parent, grandParent, $r0, $r1, $r2;
        int parentIndex, maxEntriesPerNode, index, $i0, $i1, $i2, $i3;
        byte[] key;
        boolean leftSide;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        parent := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        parentIndex := @parameter1: int;

        grandParent := @parameter2: berkeley.com.sleepycat.je.tree.IN;

        maxEntriesPerNode := @parameter3: int;

        key := @parameter4: byte[];

        leftSide := @parameter5: boolean;

        index = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: int findEntry(byte[],boolean,boolean)>(key, 0, 0);

        if leftSide == 0 goto label1;

        if index != 0 goto label1;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN splitInternal(berkeley.com.sleepycat.je.tree.IN,int,berkeley.com.sleepycat.je.tree.IN,int,int)>(parent, parentIndex, grandParent, maxEntriesPerNode, 1);

        return $r0;

     label1:
        if leftSide != 0 goto label2;

        $i0 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        $i1 = $i0 - 1;

        if index != $i1 goto label2;

        $i2 = this.<berkeley.com.sleepycat.je.tree.IN: int nEntries>;

        $i3 = $i2 - 1;

        $r1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN splitInternal(berkeley.com.sleepycat.je.tree.IN,int,berkeley.com.sleepycat.je.tree.IN,int,int)>(parent, parentIndex, grandParent, maxEntriesPerNode, $i3);

        return $r1;

     label2:
        $r2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN split(berkeley.com.sleepycat.je.tree.IN,int,berkeley.com.sleepycat.je.tree.IN,int)>(parent, parentIndex, grandParent, maxEntriesPerNode);

        return $r2;
    }

    public final long log(boolean, boolean, boolean, berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.tree.IN this, parent;
        boolean allowDeltas, isProvisional, backgroundIO;
        berkeley.com.sleepycat.je.log.Provisional $r1;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        allowDeltas := @parameter0: boolean;

        isProvisional := @parameter1: boolean;

        backgroundIO := @parameter2: boolean;

        parent := @parameter3: berkeley.com.sleepycat.je.tree.IN;

        if isProvisional == 0 goto label1;

        $r1 = <berkeley.com.sleepycat.je.log.Provisional: berkeley.com.sleepycat.je.log.Provisional YES>;

        goto label2;

     label1:
        $r1 = <berkeley.com.sleepycat.je.log.Provisional: berkeley.com.sleepycat.je.log.Provisional NO>;

     label2:
        $l0 = staticinvoke <berkeley.com.sleepycat.je.tree.IN: long logInternal(berkeley.com.sleepycat.je.tree.IN,berkeley.com.sleepycat.je.log.entry.INLogEntry,boolean,boolean,berkeley.com.sleepycat.je.log.Provisional,boolean,berkeley.com.sleepycat.je.tree.IN)>(this, null, allowDeltas, 1, $r1, backgroundIO, parent);

        return $l0;
    }

    public final void detachNode(int, boolean, long)
    {
        berkeley.com.sleepycat.je.tree.IN this, $r2;
        int idx;
        boolean updateLsn, $z0, $z1, $z2, $z3, $z4;
        long newLsn, oldSlotSize, newSlotSize;
        berkeley.com.sleepycat.je.tree.Node child;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0;
        berkeley.com.sleepycat.je.dbi.INList $r1;
        java.lang.AssertionError $r3;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        updateLsn := @parameter1: boolean;

        newLsn := @parameter2: long;

        oldSlotSize = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getEntryInMemorySize(int)>(idx);

        child = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.Node getTarget(int)>(idx);

        if updateLsn == 0 goto label1;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setLsn(int,long)>(idx, newLsn);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setDirty(boolean)>(1);

     label1:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setTarget(int,berkeley.com.sleepycat.je.tree.Node)>(idx, null);

        newSlotSize = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getEntryInMemorySize(int)>(idx);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void updateMemorySize(long,long)>(oldSlotSize, newSlotSize);

        if child == null goto label2;

        $z0 = virtualinvoke child.<berkeley.com.sleepycat.je.tree.Node: boolean isIN()>();

        if $z0 == 0 goto label2;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.INList getInMemoryINs()>();

        $r2 = (berkeley.com.sleepycat.je.tree.IN) child;

        virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.INList: void remove(berkeley.com.sleepycat.je.tree.IN)>($r2);

     label2:
        $z1 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        $z2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z2 != 0 goto label3;

        $z3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean hasCachedChildren()>();

        $z4 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean hasCachedChildrenFlag()>();

        if $z3 == $z4 goto label3;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label3:
        return;
    }

    public void deleteEntry(int)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int index;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        index := @parameter0: int;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void deleteEntry(int,boolean,boolean)>(index, 1, 1);

        return;
    }

    public final berkeley.com.sleepycat.je.tree.Node fetchLNOrDIN(int, berkeley.com.sleepycat.je.CacheMode)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx;
        berkeley.com.sleepycat.je.CacheMode cacheMode;
        berkeley.com.sleepycat.je.tree.Node $r0;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        cacheMode := @parameter1: berkeley.com.sleepycat.je.CacheMode;

        $r0 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.Node fetchLN(int,berkeley.com.sleepycat.je.CacheMode,boolean)>(idx, cacheMode, 1);

        return $r0;
    }

    public final void recoverIN(int, berkeley.com.sleepycat.je.tree.Node, long, int)
    {
        berkeley.com.sleepycat.je.tree.IN this, $r0;
        int idx, lastLoggedSize;
        berkeley.com.sleepycat.je.tree.Node node, child;
        long lsn, oldSlotSize, newSlotSize;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.AssertionError $r1, $r2;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        node := @parameter1: berkeley.com.sleepycat.je.tree.Node;

        lsn := @parameter2: long;

        lastLoggedSize := @parameter3: int;

        oldSlotSize = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getEntryInMemorySize(int)>(idx);

        child = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.Node getTarget(int)>(idx);

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if child == null goto label1;

        $r0 = (berkeley.com.sleepycat.je.tree.IN) child;

        $z1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.tree.IN: boolean getInListResident()>();

        if $z1 == 0 goto label1;

        if child == node goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setLsn(int,long)>(idx, lsn);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setLastLoggedSize(int,int)>(idx, lastLoggedSize);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setTarget(int,berkeley.com.sleepycat.je.tree.Node)>(idx, node);

        newSlotSize = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getEntryInMemorySize(int)>(idx);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void updateMemorySize(long,long)>(oldSlotSize, newSlotSize);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setDirty(boolean)>(1);

        $z2 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z2 != 0 goto label2;

        $z3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z3 != 0 goto label2;

        $z4 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean hasCachedChildren()>();

        $z5 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean hasCachedChildrenFlag()>();

        if $z4 == $z5 goto label2;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label2:
        return;
    }

    public final void recoverRecord(int, long, boolean, boolean, byte[], byte[], long, int, int, boolean)
    {
        berkeley.com.sleepycat.je.tree.IN this;
        int idx, expiration, logrecSize#2, $i1;
        long lsn, vlsn, oldSlotSize, newSlotSize, $l2, $l3;
        boolean knownDeleted, pendingDeleted, expirationInHours, multiSlotChange, $z0, $z1, $z2, $z3, $z4;
        byte[] data, key#1;
        berkeley.com.sleepycat.je.tree.BIN bin;
        berkeley.com.sleepycat.je.log.WholeEntry wholeEntry;
        berkeley.com.sleepycat.je.log.entry.LNLogEntry logrec;
        java.io.FileNotFoundException e, $r7;
        java.lang.AssertionError $r0, $r12;
        byte $b0;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r1, $r5;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r2, $r9;
        berkeley.com.sleepycat.je.log.LogManager $r3;
        berkeley.com.sleepycat.je.log.entry.LogEntry $r4;
        berkeley.com.sleepycat.je.log.LogEntryHeader $r6;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r8;
        berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason $r10;
        java.lang.String $r11;

        this := @this: berkeley.com.sleepycat.je.tree.IN;

        idx := @parameter0: int;

        lsn := @parameter1: long;

        knownDeleted := @parameter2: boolean;

        pendingDeleted := @parameter3: boolean;

        key#1 := @parameter4: byte[];

        data := @parameter5: byte[];

        vlsn := @parameter6: long;

        logrecSize#2 := @parameter7: int;

        expiration := @parameter8: int;

        expirationInHours := @parameter9: boolean;

        $z0 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z1 != 0 goto label01;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label01:
        bin = (berkeley.com.sleepycat.je.tree.BIN) this;

        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void freeOffHeapLN(int)>(idx);

        $b0 = lsn cmp -1L;

        if $b0 != 0 goto label02;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setKnownDeletedAndEvictLN(int)>(idx);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setLsnInternal(int,long)>(idx, -1L);

        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void queueSlotDeletion(int)>(idx);

        return;

     label02:
        if key#1 != null goto label06;

        $r1 = this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $z2 = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean allowsKeyUpdates()>();

        if $z2 == 0 goto label06;

        if knownDeleted != 0 goto label06;

     label03:
        $r2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r3 = virtualinvoke $r2.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.log.LogManager getLogManager()>();

        $i1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: int getLastLoggedSize(int)>(idx);

        wholeEntry = virtualinvoke $r3.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.WholeEntry getLogEntryAllowInvisibleAtRecovery(long,int)>(lsn, $i1);

        $r4 = virtualinvoke wholeEntry.<berkeley.com.sleepycat.je.log.WholeEntry: berkeley.com.sleepycat.je.log.entry.LogEntry getEntry()>();

        logrec = (berkeley.com.sleepycat.je.log.entry.LNLogEntry) $r4;

        $r5 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        virtualinvoke logrec.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: void postFetchInit(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>($r5);

        key#1 = virtualinvoke logrec.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: byte[] getKey()>();

        $r6 = virtualinvoke wholeEntry.<berkeley.com.sleepycat.je.log.WholeEntry: berkeley.com.sleepycat.je.log.LogEntryHeader getHeader()>();

        logrecSize#2 = virtualinvoke $r6.<berkeley.com.sleepycat.je.log.LogEntryHeader: int getEntrySize()>();

     label04:
        goto label06;

     label05:
        $r7 := @caughtexception;

        e = $r7;

        $r8 = new berkeley.com.sleepycat.je.EnvironmentFailureException;

        $r9 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r10 = <berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason: berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason LOG_FILE_NOT_FOUND>;

        $r11 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: java.lang.String makeFetchErrorMsg(java.lang.String,long,int)>(null, lsn, idx);

        specialinvoke $r8.<berkeley.com.sleepycat.je.EnvironmentFailureException: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason,java.lang.String,java.lang.Throwable)>($r9, $r10, $r11, e);

        throw $r8;

     label06:
        oldSlotSize = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getEntryInMemorySize(int)>(idx);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setLsn(int,long)>(idx, lsn);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setTarget(int,berkeley.com.sleepycat.je.tree.Node)>(idx, null);

        multiSlotChange = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean updateLNSlotKey(int,byte[],byte[])>(idx, key#1, data);

        $z3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: boolean isEmbeddedLN(int)>(idx);

        if $z3 == 0 goto label07;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void clearLastLoggedSize(int)>(idx);

        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void setCachedVLSN(int,long)>(idx, vlsn);

        goto label08;

     label07:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setLastLoggedSize(int,int)>(idx, logrecSize#2);

     label08:
        if knownDeleted == 0 goto label10;

        $z4 = <berkeley.com.sleepycat.je.tree.IN: boolean $assertionsDisabled>;

        if $z4 != 0 goto label09;

        if pendingDeleted == 0 goto label09;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label09:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setKnownDeleted(int)>(idx);

        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void queueSlotDeletion(int)>(idx);

        goto label12;

     label10:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void clearKnownDeleted(int)>(idx);

        if pendingDeleted == 0 goto label11;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setPendingDeleted(int)>(idx);

        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void queueSlotDeletion(int)>(idx);

        goto label12;

     label11:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void clearPendingDeleted(int)>(idx);

     label12:
        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void setExpiration(int,int,boolean)>(idx, expiration, expirationInHours);

        if multiSlotChange == 0 goto label13;

        $l2 = this.<berkeley.com.sleepycat.je.tree.IN: long inMemorySize>;

        $l3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: long computeMemorySize()>();

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void updateMemorySize(long,long)>($l2, $l3);

        goto label14;

     label13:
        newSlotSize = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: long getEntryInMemorySize(int)>(idx);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void updateMemorySize(long,long)>(oldSlotSize, newSlotSize);

     label14:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setDirty(boolean)>(1);

        return;

        catch java.io.FileNotFoundException from label03 to label04 with label05;
    }


