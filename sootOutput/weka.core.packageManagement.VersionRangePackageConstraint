    public void setRangeConstraint(java.lang.String, weka.core.packageManagement.VersionPackageConstraint$VersionComparison, java.lang.String, weka.core.packageManagement.VersionPackageConstraint$VersionComparison) throws java.lang.Exception
    {
        weka.core.packageManagement.VersionRangePackageConstraint this;
        java.lang.String bound1, bound2;
        weka.core.packageManagement.VersionPackageConstraint$VersionComparison comp1, comp2, boundsComp, $r0, $r1, $r4, $r6, $r7, $r8, $r9, $r10;
        java.lang.Exception $r2, $r3, $r5;
        boolean $z0;

        this := @this: weka.core.packageManagement.VersionRangePackageConstraint;

        bound1 := @parameter0: java.lang.String;

        comp1 := @parameter1: weka.core.packageManagement.VersionPackageConstraint$VersionComparison;

        bound2 := @parameter2: java.lang.String;

        comp2 := @parameter3: weka.core.packageManagement.VersionPackageConstraint$VersionComparison;

        $r0 = <weka.core.packageManagement.VersionPackageConstraint$VersionComparison: weka.core.packageManagement.VersionPackageConstraint$VersionComparison EQUAL>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(comp1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if comp1 == $r0 goto label1;

        $r1 = <weka.core.packageManagement.VersionPackageConstraint$VersionComparison: weka.core.packageManagement.VersionPackageConstraint$VersionComparison EQUAL>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(comp2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if comp2 != $r1 goto label2;

     label1:
        $r2 = new java.lang.Exception;

        specialinvoke $r2.<java.lang.Exception: void <init>(java.lang.String)>("[VersionRangePackageConstraint] malformed version range constraint (= not allowed)!");

        throw $r2;

     label2:
        $z0 = virtualinvoke comp1.<weka.core.packageManagement.VersionPackageConstraint$VersionComparison: boolean compatibleWith(weka.core.packageManagement.VersionPackageConstraint$VersionComparison)>(comp2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        $r3 = new java.lang.Exception;

        specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String)>("[VersionRangePackageConstraint] malformed version range constraint!");

        throw $r3;

     label3:
        boundsComp = staticinvoke <weka.core.packageManagement.VersionPackageConstraint: weka.core.packageManagement.VersionPackageConstraint$VersionComparison compare(java.lang.String,java.lang.String)>(bound1, bound2);

        $r4 = <weka.core.packageManagement.VersionPackageConstraint$VersionComparison: weka.core.packageManagement.VersionPackageConstraint$VersionComparison EQUAL>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(boundsComp);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        if boundsComp != $r4 goto label4;

        $r5 = new java.lang.Exception;

        specialinvoke $r5.<java.lang.Exception: void <init>(java.lang.String)>("[VersionRangePackageConstraint] malformed version range - both bounds are equal!");

        throw $r5;

     label4:
        $r6 = <weka.core.packageManagement.VersionPackageConstraint$VersionComparison: weka.core.packageManagement.VersionPackageConstraint$VersionComparison GREATERTHAN>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(comp1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r6);

        if comp1 == $r6 goto label5;

        $r7 = <weka.core.packageManagement.VersionPackageConstraint$VersionComparison: weka.core.packageManagement.VersionPackageConstraint$VersionComparison GREATERTHANOREQUAL>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(comp1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r7);

        if comp1 != $r7 goto label6;

     label5:
        $r8 = <weka.core.packageManagement.VersionPackageConstraint$VersionComparison: weka.core.packageManagement.VersionPackageConstraint$VersionComparison GREATERTHAN>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(boundsComp);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r8);

        if boundsComp != $r8 goto label7;

        this.<weka.core.packageManagement.VersionRangePackageConstraint: boolean m_boundOr> = 1;

        goto label7;

     label6:
        $r9 = <weka.core.packageManagement.VersionPackageConstraint$VersionComparison: weka.core.packageManagement.VersionPackageConstraint$VersionComparison LESSTHAN>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(boundsComp);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r9);

        if boundsComp != $r9 goto label7;

        this.<weka.core.packageManagement.VersionRangePackageConstraint: boolean m_boundOr> = 1;

     label7:
        $r10 = <weka.core.packageManagement.VersionPackageConstraint$VersionComparison: weka.core.packageManagement.VersionPackageConstraint$VersionComparison LESSTHAN>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(boundsComp);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r10);

        if boundsComp != $r10 goto label8;

        this.<weka.core.packageManagement.VersionRangePackageConstraint: java.lang.String m_lowerBound> = bound1;

        this.<weka.core.packageManagement.VersionRangePackageConstraint: weka.core.packageManagement.VersionPackageConstraint$VersionComparison m_lowerConstraint> = comp1;

        this.<weka.core.packageManagement.VersionRangePackageConstraint: java.lang.String m_upperBound> = bound2;

        this.<weka.core.packageManagement.VersionRangePackageConstraint: weka.core.packageManagement.VersionPackageConstraint$VersionComparison m_upperConstraint> = comp2;

        goto label9;

     label8:
        this.<weka.core.packageManagement.VersionRangePackageConstraint: java.lang.String m_lowerBound> = bound2;

        this.<weka.core.packageManagement.VersionRangePackageConstraint: weka.core.packageManagement.VersionPackageConstraint$VersionComparison m_lowerConstraint> = comp2;

        this.<weka.core.packageManagement.VersionRangePackageConstraint: java.lang.String m_upperBound> = bound1;

        this.<weka.core.packageManagement.VersionRangePackageConstraint: weka.core.packageManagement.VersionPackageConstraint$VersionComparison m_upperConstraint> = comp1;

     label9:
        return;
    }

    public void <init>(weka.core.packageManagement.Package)
    {
        weka.core.packageManagement.VersionRangePackageConstraint this;
        weka.core.packageManagement.Package p;

        this := @this: weka.core.packageManagement.VersionRangePackageConstraint;

        p := @parameter0: weka.core.packageManagement.Package;

        specialinvoke this.<weka.core.packageManagement.PackageConstraint: void <init>()>();

        virtualinvoke this.<weka.core.packageManagement.VersionRangePackageConstraint: void setPackage(weka.core.packageManagement.Package)>(p);

        return;
    }

    public boolean checkConstraint(weka.core.packageManagement.Package) throws java.lang.Exception
    {
        weka.core.packageManagement.VersionRangePackageConstraint this;
        weka.core.packageManagement.Package target;
        java.lang.String targetVersion, $r3, $r6, $r8;
        weka.core.packageManagement.VersionPackageConstraint$VersionComparison $r0, $r1, $r5, $r7;
        java.lang.Exception $r2;
        java.lang.Object $r4;
        boolean $z0, $z1;

        this := @this: weka.core.packageManagement.VersionRangePackageConstraint;

        target := @parameter0: weka.core.packageManagement.Package;

        $r0 = this.<weka.core.packageManagement.VersionRangePackageConstraint: weka.core.packageManagement.VersionPackageConstraint$VersionComparison m_lowerConstraint>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label1;

        $r1 = this.<weka.core.packageManagement.VersionRangePackageConstraint: weka.core.packageManagement.VersionPackageConstraint$VersionComparison m_upperConstraint>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 != null goto label2;

     label1:
        $r2 = new java.lang.Exception;

        specialinvoke $r2.<java.lang.Exception: void <init>(java.lang.String)>("[VersionRangePackageConstraint] No constraint has been set!");

        throw $r2;

     label2:
        $r3 = <weka.core.packageManagement.VersionPackageConstraint: java.lang.String VERSION_KEY>;

        $r4 = virtualinvoke target.<weka.core.packageManagement.Package: java.lang.Object getPackageMetaDataElement(java.lang.Object)>($r3);

        targetVersion = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        $r5 = this.<weka.core.packageManagement.VersionRangePackageConstraint: weka.core.packageManagement.VersionPackageConstraint$VersionComparison m_lowerConstraint>;

        $r6 = this.<weka.core.packageManagement.VersionRangePackageConstraint: java.lang.String m_lowerBound>;

        $r7 = this.<weka.core.packageManagement.VersionRangePackageConstraint: weka.core.packageManagement.VersionPackageConstraint$VersionComparison m_upperConstraint>;

        $r8 = this.<weka.core.packageManagement.VersionRangePackageConstraint: java.lang.String m_upperBound>;

        $z0 = this.<weka.core.packageManagement.VersionRangePackageConstraint: boolean m_boundOr>;

        $z1 = staticinvoke <weka.core.packageManagement.VersionRangePackageConstraint: boolean checkConstraint(java.lang.String,weka.core.packageManagement.VersionPackageConstraint$VersionComparison,java.lang.String,weka.core.packageManagement.VersionPackageConstraint$VersionComparison,java.lang.String,boolean)>(targetVersion, $r5, $r6, $r7, $r8, $z0);

        return $z1;
    }

    protected static boolean checkConstraint(java.lang.String, weka.core.packageManagement.VersionPackageConstraint$VersionComparison, java.lang.String, weka.core.packageManagement.VersionPackageConstraint$VersionComparison, java.lang.String, boolean)
    {
        java.lang.String toCheck, bound1, bound2;
        weka.core.packageManagement.VersionPackageConstraint$VersionComparison comp1, comp2;
        boolean boundOr, result1, result2, $z0, $z1;

        toCheck := @parameter0: java.lang.String;

        comp1 := @parameter1: weka.core.packageManagement.VersionPackageConstraint$VersionComparison;

        bound1 := @parameter2: java.lang.String;

        comp2 := @parameter3: weka.core.packageManagement.VersionPackageConstraint$VersionComparison;

        bound2 := @parameter4: java.lang.String;

        boundOr := @parameter5: boolean;

        result1 = staticinvoke <weka.core.packageManagement.VersionPackageConstraint: boolean checkConstraint(java.lang.String,weka.core.packageManagement.VersionPackageConstraint$VersionComparison,java.lang.String)>(toCheck, comp1, bound1);

        result2 = staticinvoke <weka.core.packageManagement.VersionPackageConstraint: boolean checkConstraint(java.lang.String,weka.core.packageManagement.VersionPackageConstraint$VersionComparison,java.lang.String)>(toCheck, comp2, bound2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(boundOr);

        if boundOr == 0 goto label4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(result1);

        if result1 != 0 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(result2);

        if result2 == 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;

     label4:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(result1);

        if result1 == 0 goto label5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(result2);

        if result2 == 0 goto label5;

        $z1 = 1;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        return $z1;
    }


