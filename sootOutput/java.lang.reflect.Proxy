    public static boolean isProxyClass(java.lang.Class)
    {
        java.lang.Class l0, $r0;
        boolean $z0, $z1, $z2;
        java.lang.reflect.WeakCache $r1;

        l0 := @parameter0: java.lang.Class;

        $r0 = class "java/lang/reflect/Proxy";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(l0);

        if $z0 == 0 goto label1;

        $r1 = <java.lang.reflect.Proxy: java.lang.reflect.WeakCache proxyClassCache>;

        $z1 = virtualinvoke $r1.<java.lang.reflect.WeakCache: boolean containsValue(java.lang.Object)>(l0);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    static void <clinit>()
    {
        java.lang.Class[] $r0;
        java.lang.reflect.WeakCache $r1;
        java.lang.reflect.Proxy$KeyFactory $r2;
        java.lang.reflect.Proxy$ProxyClassFactory $r3;
        java.lang.Object $r4;

        $r0 = newarray (java.lang.Class)[1];

        $r0[0] = class "java/lang/reflect/InvocationHandler";

        <java.lang.reflect.Proxy: java.lang.Class[] constructorParams> = $r0;

        $r1 = new java.lang.reflect.WeakCache;

        $r2 = new java.lang.reflect.Proxy$KeyFactory;

        specialinvoke $r2.<java.lang.reflect.Proxy$KeyFactory: void <init>(java.lang.reflect.Proxy$1)>(null);

        $r3 = new java.lang.reflect.Proxy$ProxyClassFactory;

        specialinvoke $r3.<java.lang.reflect.Proxy$ProxyClassFactory: void <init>(java.lang.reflect.Proxy$1)>(null);

        specialinvoke $r1.<java.lang.reflect.WeakCache: void <init>(java.util.function.BiFunction,java.util.function.BiFunction)>($r2, $r3);

        <java.lang.reflect.Proxy: java.lang.reflect.WeakCache proxyClassCache> = $r1;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        <java.lang.reflect.Proxy: java.lang.Object key0> = $r4;

        return;
    }


