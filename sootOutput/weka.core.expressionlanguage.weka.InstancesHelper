    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        java.util.regex.Pattern $r1, $r2;

        $r0 = class "weka/core/expressionlanguage/weka/InstancesHelper";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <weka.core.expressionlanguage.weka.InstancesHelper: boolean $assertionsDisabled> = $z1;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[aA][0-9]+");

        <weka.core.expressionlanguage.weka.InstancesHelper: java.util.regex.Pattern ATTRIBUTE1> = $r1;

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("ATT[0-9]+");

        <weka.core.expressionlanguage.weka.InstancesHelper: java.util.regex.Pattern ATTRIBUTE2> = $r2;

        return;
    }

    public void <init>(weka.core.Instances)
    {
        weka.core.expressionlanguage.weka.InstancesHelper this;
        weka.core.Instances dataset;
        boolean $z0;
        java.lang.AssertionError $r0;

        this := @this: weka.core.expressionlanguage.weka.InstancesHelper;

        dataset := @parameter0: weka.core.Instances;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<weka.core.expressionlanguage.weka.InstancesHelper: boolean missingAccessed> = 0;

        $z0 = <weka.core.expressionlanguage.weka.InstancesHelper: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dataset);

        if dataset != null goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        this.<weka.core.expressionlanguage.weka.InstancesHelper: weka.core.Instances dataset> = dataset;

        return;
    }

    public void setInstance(weka.core.Instance)
    {
        weka.core.expressionlanguage.weka.InstancesHelper this;
        weka.core.Instance instance;
        boolean $z0, $z1;
        weka.core.Instances $r0, $r1;
        java.lang.AssertionError $r2;

        this := @this: weka.core.expressionlanguage.weka.InstancesHelper;

        instance := @parameter0: weka.core.Instance;

        $z0 = <weka.core.expressionlanguage.weka.InstancesHelper: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r0 = this.<weka.core.expressionlanguage.weka.InstancesHelper: weka.core.Instances dataset>;

        $r1 = interfaceinvoke instance.<weka.core.Instance: weka.core.Instances dataset()>();

        $z1 = virtualinvoke $r0.<weka.core.Instances: boolean equalHeaders(weka.core.Instances)>($r1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        this.<weka.core.expressionlanguage.weka.InstancesHelper: weka.core.Instance instance> = instance;

        this.<weka.core.expressionlanguage.weka.InstancesHelper: boolean missingAccessed> = 0;

        return;
    }


