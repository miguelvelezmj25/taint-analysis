    public boolean apply(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.filter.GaussianFilter this;
        kanzi.SliceIntArray input, output;
        int[] src, dst, buf1, buf2, $r0, $r1, $r2, $r3;
        int srcIdx, dstIdx, maxIdx, count, shift, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, channel#62, $i10, offs#70, $i11, j#75, $i12, end#81, i#83, $i13, $i14, $i15, $i16, $i17, offs#108, $i18, j#113, $i19, end#119, i#121, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31;
        boolean $z0, $z1;

        this := @this: kanzi.filter.GaussianFilter;

        input := @parameter0: kanzi.SliceIntArray;

        output := @parameter1: kanzi.SliceIntArray;

        $z0 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(input);

        if $z0 == 0 goto label01;

        $z1 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(output);

        if $z1 != 0 goto label02;

     label01:
        return 0;

     label02:
        src = input.<kanzi.SliceIntArray: int[] array>;

        dst = output.<kanzi.SliceIntArray: int[] array>;

        srcIdx = input.<kanzi.SliceIntArray: int index>;

        dstIdx = output.<kanzi.SliceIntArray: int index>;

        maxIdx = staticinvoke <java.lang.Math: int max(int,int)>(srcIdx, dstIdx);

        $i0 = this.<kanzi.filter.GaussianFilter: int stride>;

        $i1 = this.<kanzi.filter.GaussianFilter: int height>;

        count = $i0 * $i1;

        $i2 = this.<kanzi.filter.GaussianFilter: int sigma16>;

        if $i2 != 0 goto label05;

        if src != dst goto label03;

        if srcIdx == dstIdx goto label04;

     label03:
        $i3 = count + maxIdx;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(src, srcIdx, dst, dstIdx, $i3);

     label04:
        return 1;

     label05:
        $r0 = this.<kanzi.filter.GaussianFilter: int[] buffer1>;

        $i4 = lengthof $r0;

        $i5 = count + maxIdx;

        if $i4 >= $i5 goto label06;

        $i6 = count + maxIdx;

        $r1 = newarray (int)[$i6];

        this.<kanzi.filter.GaussianFilter: int[] buffer1> = $r1;

     label06:
        $r2 = this.<kanzi.filter.GaussianFilter: int[] buffer2>;

        $i7 = lengthof $r2;

        $i8 = count + maxIdx;

        if $i7 >= $i8 goto label07;

        $i9 = count + maxIdx;

        $r3 = newarray (int)[$i9];

        this.<kanzi.filter.GaussianFilter: int[] buffer2> = $r3;

     label07:
        buf1 = this.<kanzi.filter.GaussianFilter: int[] buffer1>;

        buf2 = this.<kanzi.filter.GaussianFilter: int[] buffer2>;

        channel#62 = 0;

     label08:
        $i10 = this.<kanzi.filter.GaussianFilter: int channels>;

        if channel#62 >= $i10 goto label17;

        shift = channel#62 << 3;

        offs#70 = 0;

        $i11 = this.<kanzi.filter.GaussianFilter: int height>;

        j#75 = $i11 - 1;

     label09:
        if j#75 < 0 goto label12;

        $i12 = this.<kanzi.filter.GaussianFilter: int width>;

        end#81 = offs#70 + $i12;

        i#83 = offs#70;

     label10:
        if i#83 >= end#81 goto label11;

        $i13 = srcIdx + i#83;

        $i14 = src[$i13];

        $i15 = $i14 >> shift;

        $i16 = $i15 & 255;

        buf1[i#83] = $i16;

        i#83 = i#83 + 1;

        goto label10;

     label11:
        $i17 = this.<kanzi.filter.GaussianFilter: int stride>;

        offs#70 = offs#70 + $i17;

        j#75 = j#75 + -1;

        goto label09;

     label12:
        specialinvoke this.<kanzi.filter.GaussianFilter: void gaussianRecursiveX(int[],int[])>(buf1, buf2);

        specialinvoke this.<kanzi.filter.GaussianFilter: void gaussianRecursiveY(int[],int[])>(buf2, buf1);

        offs#108 = 0;

        $i18 = this.<kanzi.filter.GaussianFilter: int height>;

        j#113 = $i18 - 1;

     label13:
        if j#113 < 0 goto label16;

        $i19 = this.<kanzi.filter.GaussianFilter: int width>;

        end#119 = offs#108 + $i19;

        i#121 = offs#108;

     label14:
        if i#121 >= end#119 goto label15;

        $i20 = dstIdx + i#121;

        $i21 = dst[$i20];

        $i22 = 255 << shift;

        $i23 = $i22 ^ -1;

        $i24 = $i21 & $i23;

        dst[$i20] = $i24;

        $i25 = dstIdx + i#121;

        $i26 = dst[$i25];

        $i27 = buf1[i#121];

        $i28 = $i27 & 255;

        $i29 = $i28 << shift;

        $i30 = $i26 | $i29;

        dst[$i25] = $i30;

        i#121 = i#121 + 1;

        goto label14;

     label15:
        $i31 = this.<kanzi.filter.GaussianFilter: int stride>;

        offs#108 = offs#108 + $i31;

        j#113 = j#113 + -1;

        goto label13;

     label16:
        channel#62 = channel#62 + 1;

        goto label08;

     label17:
        return 1;
    }

    private void gaussianRecursiveX(int[], int[])
    {
        kanzi.filter.GaussianFilter this;
        int[] input, output;
        int w, h, offs#6, y#8, $i0, x#24, $i1, $i2, $i3, $i4, $i5, $i6, $i7, x#82, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        float xc, yc, xc, yc, xp#15, $f0, yb#20, yp#22, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, xn#69, xa#71, $f11, yn#76, ya#78, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21;

        this := @this: kanzi.filter.GaussianFilter;

        input := @parameter0: int[];

        output := @parameter1: int[];

        w = this.<kanzi.filter.GaussianFilter: int width>;

        h = this.<kanzi.filter.GaussianFilter: int height>;

        offs#6 = 0;

        y#8 = 0;

     label1:
        if y#8 >= h goto label6;

        $i0 = input[offs#6];

        xp#15 = (float) $i0;

        $f0 = this.<kanzi.filter.GaussianFilter: float coefp>;

        yb#20 = $f0 * xp#15;

        yp#22 = yb#20;

        x#24 = 0;

     label2:
        if x#24 >= w goto label3;

        $i1 = offs#6 + x#24;

        $i2 = input[$i1];

        xc = (float) $i2;

        $f1 = this.<kanzi.filter.GaussianFilter: float a0>;

        $f2 = $f1 * xc;

        $f3 = this.<kanzi.filter.GaussianFilter: float a1>;

        $f4 = $f3 * xp#15;

        $f5 = $f2 + $f4;

        $f6 = this.<kanzi.filter.GaussianFilter: float b1>;

        $f7 = $f6 * yp#22;

        $f8 = $f5 - $f7;

        $f9 = this.<kanzi.filter.GaussianFilter: float b2>;

        $f10 = $f9 * yb#20;

        yc = $f8 - $f10;

        $i3 = offs#6 + x#24;

        $i4 = staticinvoke <java.lang.Math: int round(float)>(yc);

        output[$i3] = $i4;

        xp#15 = xc;

        yb#20 = yp#22;

        yp#22 = yc;

        x#24 = x#24 + 1;

        goto label2;

     label3:
        $i5 = offs#6 + w;

        $i6 = $i5 - 1;

        $i7 = input[$i6];

        xn#69 = (float) $i7;

        xa#71 = xn#69;

        $f11 = this.<kanzi.filter.GaussianFilter: float coefn>;

        yn#76 = $f11 * xn#69;

        ya#78 = yn#76;

        x#82 = w - 1;

     label4:
        if x#82 < 0 goto label5;

        $i8 = offs#6 + x#82;

        $i9 = input[$i8];

        xc = (float) $i9;

        $f12 = this.<kanzi.filter.GaussianFilter: float a2>;

        $f13 = $f12 * xn#69;

        $f14 = this.<kanzi.filter.GaussianFilter: float a3>;

        $f15 = $f14 * xa#71;

        $f16 = $f13 + $f15;

        $f17 = this.<kanzi.filter.GaussianFilter: float b1>;

        $f18 = $f17 * yn#76;

        $f19 = $f16 - $f18;

        $f20 = this.<kanzi.filter.GaussianFilter: float b2>;

        $f21 = $f20 * ya#78;

        yc = $f19 - $f21;

        $i10 = offs#6 + x#82;

        $i11 = output[$i10];

        $i12 = staticinvoke <java.lang.Math: int round(float)>(yc);

        $i13 = $i11 + $i12;

        output[$i10] = $i13;

        xa#71 = xn#69;

        xn#69 = xc;

        ya#78 = yn#76;

        yn#76 = yc;

        x#82 = x#82 + -1;

        goto label4;

     label5:
        $i14 = this.<kanzi.filter.GaussianFilter: int stride>;

        offs#6 = offs#6 + $i14;

        y#8 = y#8 + 1;

        goto label1;

     label6:
        return;
    }

    private void gaussianRecursiveY(int[], int[])
    {
        kanzi.filter.GaussianFilter this;
        int[] input, output;
        int w, h, x#6, offs#10, $i0, y#24, $i1, $i2, $i3, $i4, $i5, $i6, $i7, offs#71, $i8, $i9, y#91, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        float xc, yc, xc, yc, xp#15, $f0, yb#20, yp#22, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, xn#78, xa#80, $f11, yn#85, ya#87, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21;

        this := @this: kanzi.filter.GaussianFilter;

        input := @parameter0: int[];

        output := @parameter1: int[];

        w = this.<kanzi.filter.GaussianFilter: int width>;

        h = this.<kanzi.filter.GaussianFilter: int height>;

        x#6 = 0;

     label1:
        if x#6 >= w goto label6;

        offs#10 = 0;

        $i0 = input[x#6];

        xp#15 = (float) $i0;

        $f0 = this.<kanzi.filter.GaussianFilter: float coefp>;

        yb#20 = $f0 * xp#15;

        yp#22 = yb#20;

        y#24 = 0;

     label2:
        if y#24 >= h goto label3;

        $i1 = offs#10 + x#6;

        $i2 = input[$i1];

        xc = (float) $i2;

        $f1 = this.<kanzi.filter.GaussianFilter: float a0>;

        $f2 = $f1 * xc;

        $f3 = this.<kanzi.filter.GaussianFilter: float a1>;

        $f4 = $f3 * xp#15;

        $f5 = $f2 + $f4;

        $f6 = this.<kanzi.filter.GaussianFilter: float b1>;

        $f7 = $f6 * yp#22;

        $f8 = $f5 - $f7;

        $f9 = this.<kanzi.filter.GaussianFilter: float b2>;

        $f10 = $f9 * yb#20;

        yc = $f8 - $f10;

        $i3 = offs#10 + x#6;

        $i4 = staticinvoke <java.lang.Math: int round(float)>(yc);

        output[$i3] = $i4;

        xp#15 = xc;

        yb#20 = yp#22;

        yp#22 = yc;

        $i5 = this.<kanzi.filter.GaussianFilter: int stride>;

        offs#10 = offs#10 + $i5;

        y#24 = y#24 + 1;

        goto label2;

     label3:
        $i6 = h - 1;

        $i7 = this.<kanzi.filter.GaussianFilter: int stride>;

        offs#71 = $i6 * $i7;

        $i8 = offs#71 + x#6;

        $i9 = input[$i8];

        xn#78 = (float) $i9;

        xa#80 = xn#78;

        $f11 = this.<kanzi.filter.GaussianFilter: float coefn>;

        yn#85 = $f11 * xn#78;

        ya#87 = yn#85;

        y#91 = h - 1;

     label4:
        if y#91 < 0 goto label5;

        $i10 = offs#71 + x#6;

        $i11 = input[$i10];

        xc = (float) $i11;

        $f12 = this.<kanzi.filter.GaussianFilter: float a2>;

        $f13 = $f12 * xn#78;

        $f14 = this.<kanzi.filter.GaussianFilter: float a3>;

        $f15 = $f14 * xa#80;

        $f16 = $f13 + $f15;

        $f17 = this.<kanzi.filter.GaussianFilter: float b1>;

        $f18 = $f17 * yn#85;

        $f19 = $f16 - $f18;

        $f20 = this.<kanzi.filter.GaussianFilter: float b2>;

        $f21 = $f20 * ya#87;

        yc = $f19 - $f21;

        $i12 = offs#71 + x#6;

        $i13 = output[$i12];

        $i14 = staticinvoke <java.lang.Math: int round(float)>(yc);

        $i15 = $i13 + $i14;

        output[$i12] = $i15;

        xa#80 = xn#78;

        xn#78 = xc;

        ya#87 = yn#85;

        yn#85 = yc;

        $i16 = this.<kanzi.filter.GaussianFilter: int stride>;

        offs#71 = offs#71 - $i16;

        y#91 = y#91 + -1;

        goto label4;

     label5:
        x#6 = x#6 + 1;

        goto label1;

     label6:
        return;
    }


