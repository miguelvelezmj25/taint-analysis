    public void <init>()
    {
        weka.filters.supervised.attribute.ClassOrder this;

        this := @this: weka.filters.supervised.attribute.ClassOrder;

        specialinvoke this.<weka.filters.Filter: void <init>()>();

        this.<weka.filters.supervised.attribute.ClassOrder: long m_Seed> = 1L;

        this.<weka.filters.supervised.attribute.ClassOrder: java.util.Random m_Random> = null;

        this.<weka.filters.supervised.attribute.ClassOrder: int[] m_Converter> = null;

        this.<weka.filters.supervised.attribute.ClassOrder: weka.core.Attribute m_ClassAttribute> = null;

        this.<weka.filters.supervised.attribute.ClassOrder: int m_ClassOrder> = 0;

        this.<weka.filters.supervised.attribute.ClassOrder: double[] m_ClassCounts> = null;

        return;
    }

    public double[] distributionsByOriginalIndex(double[])
    {
        weka.filters.supervised.attribute.ClassOrder this;
        double[] before, after;
        int[] $r0, $r1, $r2;
        int $i0, i#6, $i1, $i2;
        double $d0;

        this := @this: weka.filters.supervised.attribute.ClassOrder;

        before := @parameter0: double[];

        $r0 = this.<weka.filters.supervised.attribute.ClassOrder: int[] m_Converter>;

        $i0 = lengthof $r0;

        after = newarray (double)[$i0];

        i#6 = 0;

     label1:
        $r1 = this.<weka.filters.supervised.attribute.ClassOrder: int[] m_Converter>;

        $i1 = lengthof $r1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#6 >= $i1 goto label2;

        $r2 = this.<weka.filters.supervised.attribute.ClassOrder: int[] m_Converter>;

        $i2 = $r2[i#6];

        $d0 = before[$i2];

        after[i#6] = $d0;

        i#6 = i#6 + 1;

        goto label1;

     label2:
        return after;
    }

    public double[] getClassCounts()
    {
        weka.filters.supervised.attribute.ClassOrder this;
        weka.core.Attribute $r0;
        boolean $z0;
        double[] $r1;

        this := @this: weka.filters.supervised.attribute.ClassOrder;

        $r0 = this.<weka.filters.supervised.attribute.ClassOrder: weka.core.Attribute m_ClassAttribute>;

        $z0 = virtualinvoke $r0.<weka.core.Attribute: boolean isNominal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r1 = this.<weka.filters.supervised.attribute.ClassOrder: double[] m_ClassCounts>;

        return $r1;

     label1:
        return null;
    }

    public boolean input(weka.core.Instance)
    {
        weka.filters.supervised.attribute.ClassOrder this;
        weka.core.Instance instance, datum;
        weka.core.Instances $r0;
        java.lang.IllegalStateException $r1;
        boolean $z0, $z1, $z2;
        int[] $r2, $r5;
        java.lang.Object $r3;
        weka.core.Attribute $r4, $r6;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        int $i0, $i1, $i2;
        double[] $r7;

        this := @this: weka.filters.supervised.attribute.ClassOrder;

        instance := @parameter0: weka.core.Instance;

        $r0 = virtualinvoke this.<weka.filters.supervised.attribute.ClassOrder: weka.core.Instances getInputFormat()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No input instance format defined");

        throw $r1;

     label1:
        $z0 = this.<weka.filters.supervised.attribute.ClassOrder: boolean m_NewBatch>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        virtualinvoke this.<weka.filters.supervised.attribute.ClassOrder: void resetQueue()>();

        this.<weka.filters.supervised.attribute.ClassOrder: boolean m_NewBatch> = 0;

     label2:
        $r2 = this.<weka.filters.supervised.attribute.ClassOrder: int[] m_Converter>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        if $r2 == null goto label4;

        $r3 = interfaceinvoke instance.<weka.core.Instance: java.lang.Object copy()>();

        datum = (weka.core.Instance) $r3;

        $r4 = this.<weka.filters.supervised.attribute.ClassOrder: weka.core.Attribute m_ClassAttribute>;

        $z1 = interfaceinvoke datum.<weka.core.Instance: boolean isMissing(weka.core.Attribute)>($r4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label3;

        $r5 = this.<weka.filters.supervised.attribute.ClassOrder: int[] m_Converter>;

        $d0 = interfaceinvoke datum.<weka.core.Instance: double classValue()>();

        $i0 = (int) $d0;

        $i1 = $r5[$i0];

        $d1 = (double) $i1;

        interfaceinvoke datum.<weka.core.Instance: void setClassValue(double)>($d1);

     label3:
        virtualinvoke this.<weka.filters.supervised.attribute.ClassOrder: void push(weka.core.Instance,boolean)>(datum, 0);

        return 1;

     label4:
        $r6 = this.<weka.filters.supervised.attribute.ClassOrder: weka.core.Attribute m_ClassAttribute>;

        $z2 = interfaceinvoke instance.<weka.core.Instance: boolean isMissing(weka.core.Attribute)>($r6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label5;

        $r7 = this.<weka.filters.supervised.attribute.ClassOrder: double[] m_ClassCounts>;

        $d2 = interfaceinvoke instance.<weka.core.Instance: double classValue()>();

        $i2 = (int) $d2;

        $d3 = $r7[$i2];

        $d4 = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        $d5 = $d3 + $d4;

        $r7[$i2] = $d5;

     label5:
        virtualinvoke this.<weka.filters.supervised.attribute.ClassOrder: void bufferInput(weka.core.Instance)>(instance);

        return 0;
    }

    public boolean batchFinished() throws java.lang.Exception
    {
        weka.filters.supervised.attribute.ClassOrder this;
        weka.core.Instances data, newInsts, $r26;
        int[] randomIndices, sorted, temp, $r1, $r6, $r7, $r8, $r11, $r13, $r17, $r28, $r29, $r30;
        int toSwap, tmpIndex, $i0, i#14, $i1, $i2, j#25, $i3, $i4, $i5, i#49, $i6, $i7, $i8, $i9, $i10, i#77, $i11, $i12, $i13, $i14, i#93, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i#118, $i22, $i23, $i24, i#140, $i25, $i26, $i27, i#158, $i28, $i29, $i30, $i31, i#197, $i32, $i33, xyz#210, $i34, $i35, $i36, $i37, $i38;
        double[] randomizedCounts, tmp2, $r2, $r4, $r5, $r10, $r12;
        java.util.ArrayList values, newVec, $r14, $r19;
        weka.core.Instance datum;
        java.lang.IllegalStateException $r0;
        java.util.Random $r3;
        double $d0, $d1, $d2, $d3;
        java.lang.IllegalArgumentException $r9;
        weka.core.Attribute $r15, $r16, $r20, $r21, $r23, $r25;
        java.lang.String $r18, $r22, $r27;
        weka.core.ProtectedProperties $r24;
        boolean $z3, $z4;

        this := @this: weka.filters.supervised.attribute.ClassOrder;

        data = virtualinvoke this.<weka.filters.supervised.attribute.ClassOrder: weka.core.Instances getInputFormat()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(data);

        if data != null goto label01;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No input instance format defined");

        throw $r0;

     label01:
        $r1 = this.<weka.filters.supervised.attribute.ClassOrder: int[] m_Converter>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 != null goto label29;

        $r2 = this.<weka.filters.supervised.attribute.ClassOrder: double[] m_ClassCounts>;

        $i0 = lengthof $r2;

        randomIndices = newarray (int)[$i0];

        i#14 = 0;

     label02:
        $i1 = lengthof randomIndices;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#14);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#14 >= $i1 goto label03;

        randomIndices[i#14] = i#14;

        i#14 = i#14 + 1;

        goto label02;

     label03:
        $i2 = lengthof randomIndices;

        j#25 = $i2 - 1;

     label04:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#25);

        if j#25 <= 0 goto label05;

        $r3 = this.<weka.filters.supervised.attribute.ClassOrder: java.util.Random m_Random>;

        $i3 = j#25 + 1;

        toSwap = virtualinvoke $r3.<java.util.Random: int nextInt(int)>($i3);

        tmpIndex = randomIndices[j#25];

        $i4 = randomIndices[toSwap];

        randomIndices[j#25] = $i4;

        randomIndices[toSwap] = tmpIndex;

        j#25 = j#25 + -1;

        goto label04;

     label05:
        $r4 = this.<weka.filters.supervised.attribute.ClassOrder: double[] m_ClassCounts>;

        $i5 = lengthof $r4;

        randomizedCounts = newarray (double)[$i5];

        i#49 = 0;

     label06:
        $i6 = lengthof randomizedCounts;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#49);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if i#49 >= $i6 goto label07;

        $r5 = this.<weka.filters.supervised.attribute.ClassOrder: double[] m_ClassCounts>;

        $i7 = randomIndices[i#49];

        $d0 = $r5[$i7];

        randomizedCounts[i#49] = $d0;

        i#49 = i#49 + 1;

        goto label06;

     label07:
        $i8 = this.<weka.filters.supervised.attribute.ClassOrder: int m_ClassOrder>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if $i8 != 2 goto label08;

        this.<weka.filters.supervised.attribute.ClassOrder: int[] m_Converter> = randomIndices;

        this.<weka.filters.supervised.attribute.ClassOrder: double[] m_ClassCounts> = randomizedCounts;

        goto label18;

     label08:
        sorted = staticinvoke <weka.core.Utils: int[] sort(double[])>(randomizedCounts);

        $i9 = lengthof sorted;

        $r6 = newarray (int)[$i9];

        this.<weka.filters.supervised.attribute.ClassOrder: int[] m_Converter> = $r6;

        $i10 = this.<weka.filters.supervised.attribute.ClassOrder: int m_ClassOrder>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i10);

        if $i10 != 0 goto label11;

        i#77 = 0;

     label09:
        $i11 = lengthof sorted;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#77);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i11);

        if i#77 >= $i11 goto label10;

        $r7 = this.<weka.filters.supervised.attribute.ClassOrder: int[] m_Converter>;

        $i12 = sorted[i#77];

        $i13 = randomIndices[$i12];

        $r7[i#77] = $i13;

        i#77 = i#77 + 1;

        goto label09;

     label10:
        goto label15;

     label11:
        $i14 = this.<weka.filters.supervised.attribute.ClassOrder: int m_ClassOrder>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i14);

        if $i14 != 1 goto label14;

        i#93 = 0;

     label12:
        $i15 = lengthof sorted;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#93);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i15);

        if i#93 >= $i15 goto label13;

        $r8 = this.<weka.filters.supervised.attribute.ClassOrder: int[] m_Converter>;

        $i16 = lengthof sorted;

        $i17 = $i16 - i#93;

        $i18 = $i17 - 1;

        $i19 = sorted[$i18];

        $i20 = randomIndices[$i19];

        $r8[i#93] = $i20;

        i#93 = i#93 + 1;

        goto label12;

     label13:
        goto label15;

     label14:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Class order not defined!");

        throw $r9;

     label15:
        $r10 = this.<weka.filters.supervised.attribute.ClassOrder: double[] m_ClassCounts>;

        $i21 = lengthof $r10;

        tmp2 = newarray (double)[$i21];

        i#118 = 0;

     label16:
        $r11 = this.<weka.filters.supervised.attribute.ClassOrder: int[] m_Converter>;

        $i22 = lengthof $r11;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#118);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i22);

        if i#118 >= $i22 goto label17;

        $r12 = this.<weka.filters.supervised.attribute.ClassOrder: double[] m_ClassCounts>;

        $r13 = this.<weka.filters.supervised.attribute.ClassOrder: int[] m_Converter>;

        $i23 = $r13[i#118];

        $d1 = $r12[$i23];

        tmp2[i#118] = $d1;

        i#118 = i#118 + 1;

        goto label16;

     label17:
        this.<weka.filters.supervised.attribute.ClassOrder: double[] m_ClassCounts> = tmp2;

     label18:
        $r14 = new java.util.ArrayList;

        $r15 = virtualinvoke data.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $i24 = virtualinvoke $r15.<weka.core.Attribute: int numValues()>();

        specialinvoke $r14.<java.util.ArrayList: void <init>(int)>($i24);

        values = $r14;

        i#140 = 0;

     label19:
        $i25 = virtualinvoke data.<weka.core.Instances: int numClasses()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#140);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i25);

        if i#140 >= $i25 goto label20;

        $r16 = virtualinvoke data.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $r17 = this.<weka.filters.supervised.attribute.ClassOrder: int[] m_Converter>;

        $i26 = $r17[i#140];

        $r18 = virtualinvoke $r16.<weka.core.Attribute: java.lang.String value(int)>($i26);

        virtualinvoke values.<java.util.ArrayList: boolean add(java.lang.Object)>($r18);

        i#140 = i#140 + 1;

        goto label19;

     label20:
        $r19 = new java.util.ArrayList;

        $i27 = virtualinvoke data.<weka.core.Instances: int numAttributes()>();

        specialinvoke $r19.<java.util.ArrayList: void <init>(int)>($i27);

        newVec = $r19;

        i#158 = 0;

     label21:
        $i28 = virtualinvoke data.<weka.core.Instances: int numAttributes()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#158);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i28);

        if i#158 >= $i28 goto label24;

        $i29 = virtualinvoke data.<weka.core.Instances: int classIndex()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#158);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i29);

        if i#158 != $i29 goto label22;

        $r20 = new weka.core.Attribute;

        $r21 = virtualinvoke data.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $r22 = virtualinvoke $r21.<weka.core.Attribute: java.lang.String name()>();

        $r23 = virtualinvoke data.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $r24 = virtualinvoke $r23.<weka.core.Attribute: weka.core.ProtectedProperties getMetadata()>();

        specialinvoke $r20.<weka.core.Attribute: void <init>(java.lang.String,java.util.List,weka.core.ProtectedProperties)>($r22, values, $r24);

        virtualinvoke newVec.<java.util.ArrayList: boolean add(java.lang.Object)>($r20);

        goto label23;

     label22:
        $r25 = virtualinvoke data.<weka.core.Instances: weka.core.Attribute attribute(int)>(i#158);

        virtualinvoke newVec.<java.util.ArrayList: boolean add(java.lang.Object)>($r25);

     label23:
        i#158 = i#158 + 1;

        goto label21;

     label24:
        $r26 = new weka.core.Instances;

        $r27 = virtualinvoke data.<weka.core.Instances: java.lang.String relationName()>();

        specialinvoke $r26.<weka.core.Instances: void <init>(java.lang.String,java.util.ArrayList,int)>($r27, newVec, 0);

        newInsts = $r26;

        $i30 = virtualinvoke data.<weka.core.Instances: int classIndex()>();

        virtualinvoke newInsts.<weka.core.Instances: void setClassIndex(int)>($i30);

        virtualinvoke this.<weka.filters.supervised.attribute.ClassOrder: void setOutputFormat(weka.core.Instances)>(newInsts);

        $r28 = this.<weka.filters.supervised.attribute.ClassOrder: int[] m_Converter>;

        $i31 = lengthof $r28;

        temp = newarray (int)[$i31];

        i#197 = 0;

     label25:
        $i32 = lengthof temp;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#197);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i32);

        if i#197 >= $i32 goto label26;

        $r29 = this.<weka.filters.supervised.attribute.ClassOrder: int[] m_Converter>;

        $i33 = $r29[i#197];

        temp[$i33] = i#197;

        i#197 = i#197 + 1;

        goto label25;

     label26:
        this.<weka.filters.supervised.attribute.ClassOrder: int[] m_Converter> = temp;

        xyz#210 = 0;

     label27:
        $i34 = virtualinvoke data.<weka.core.Instances: int numInstances()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(xyz#210);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i34);

        if xyz#210 >= $i34 goto label29;

        datum = virtualinvoke data.<weka.core.Instances: weka.core.Instance instance(int)>(xyz#210);

        $i35 = interfaceinvoke datum.<weka.core.Instance: int classIndex()>();

        $z3 = interfaceinvoke datum.<weka.core.Instance: boolean isMissing(int)>($i35);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label28;

        $r30 = this.<weka.filters.supervised.attribute.ClassOrder: int[] m_Converter>;

        $d2 = interfaceinvoke datum.<weka.core.Instance: double classValue()>();

        $i36 = (int) $d2;

        $i37 = $r30[$i36];

        $d3 = (double) $i37;

        interfaceinvoke datum.<weka.core.Instance: void setClassValue(double)>($d3);

     label28:
        virtualinvoke this.<weka.filters.supervised.attribute.ClassOrder: void push(weka.core.Instance,boolean)>(datum, 0);

        xyz#210 = xyz#210 + 1;

        goto label27;

     label29:
        virtualinvoke this.<weka.filters.supervised.attribute.ClassOrder: void flushInput()>();

        this.<weka.filters.supervised.attribute.ClassOrder: boolean m_NewBatch> = 1;

        $i38 = virtualinvoke this.<weka.filters.supervised.attribute.ClassOrder: int numPendingOutput()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i38);

        if $i38 == 0 goto label30;

        $z4 = 1;

        goto label31;

     label30:
        $z4 = 0;

     label31:
        return $z4;
    }

    public java.lang.String[] getOptions()
    {
        weka.filters.supervised.attribute.ClassOrder this;
        java.util.Vector options, $r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r5, $r6, $r7;
        long $l0;
        java.lang.String $r4, $r8;
        int $i1;
        java.lang.String[] $r9, $r11;
        java.lang.Object[] $r10;

        this := @this: weka.filters.supervised.attribute.ClassOrder;

        $r0 = new java.util.Vector;

        specialinvoke $r0.<java.util.Vector: void <init>()>();

        options = $r0;

        virtualinvoke options.<java.util.Vector: boolean add(java.lang.Object)>("-R");

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $l0 = this.<weka.filters.supervised.attribute.ClassOrder: long m_Seed>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke options.<java.util.Vector: boolean add(java.lang.Object)>($r4);

        virtualinvoke options.<java.util.Vector: boolean add(java.lang.Object)>("-C");

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $i1 = this.<weka.filters.supervised.attribute.ClassOrder: int m_ClassOrder>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke options.<java.util.Vector: boolean add(java.lang.Object)>($r8);

        $r9 = newarray (java.lang.String)[0];

        $r10 = virtualinvoke options.<java.util.Vector: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r11 = (java.lang.String[]) $r10;

        return $r11;
    }

    public boolean setInputFormat(weka.core.Instances) throws java.lang.Exception
    {
        weka.filters.supervised.attribute.ClassOrder this;
        weka.core.Instances instanceInfo, $r0;
        int numClasses;
        weka.core.Attribute $r1;
        java.util.Random $r2;
        long $l0;
        double[] $r3;

        this := @this: weka.filters.supervised.attribute.ClassOrder;

        instanceInfo := @parameter0: weka.core.Instances;

        $r0 = new weka.core.Instances;

        specialinvoke $r0.<weka.core.Instances: void <init>(weka.core.Instances,int)>(instanceInfo, 0);

        specialinvoke this.<weka.filters.Filter: boolean setInputFormat(weka.core.Instances)>($r0);

        $r1 = virtualinvoke instanceInfo.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        this.<weka.filters.supervised.attribute.ClassOrder: weka.core.Attribute m_ClassAttribute> = $r1;

        $r2 = new java.util.Random;

        $l0 = this.<weka.filters.supervised.attribute.ClassOrder: long m_Seed>;

        specialinvoke $r2.<java.util.Random: void <init>(long)>($l0);

        this.<weka.filters.supervised.attribute.ClassOrder: java.util.Random m_Random> = $r2;

        this.<weka.filters.supervised.attribute.ClassOrder: int[] m_Converter> = null;

        numClasses = virtualinvoke instanceInfo.<weka.core.Instances: int numClasses()>();

        $r3 = newarray (double)[numClasses];

        this.<weka.filters.supervised.attribute.ClassOrder: double[] m_ClassCounts> = $r3;

        return 0;
    }

    public weka.core.Capabilities getCapabilities()
    {
        weka.filters.supervised.attribute.ClassOrder this;
        weka.core.Capabilities result;
        weka.core.Capabilities$Capability $r0, $r1;

        this := @this: weka.filters.supervised.attribute.ClassOrder;

        result = specialinvoke this.<weka.filters.Filter: weka.core.Capabilities getCapabilities()>();

        virtualinvoke result.<weka.core.Capabilities: void disableAll()>();

        virtualinvoke result.<weka.core.Capabilities: void enableAllAttributes()>();

        $r0 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability MISSING_VALUES>;

        virtualinvoke result.<weka.core.Capabilities: void enable(weka.core.Capabilities$Capability)>($r0);

        $r1 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability NOMINAL_CLASS>;

        virtualinvoke result.<weka.core.Capabilities: void enable(weka.core.Capabilities$Capability)>($r1);

        return result;
    }

    public void setClassOrder(int)
    {
        weka.filters.supervised.attribute.ClassOrder this;
        int order;

        this := @this: weka.filters.supervised.attribute.ClassOrder;

        order := @parameter0: int;

        this.<weka.filters.supervised.attribute.ClassOrder: int m_ClassOrder> = order;

        return;
    }

    public void setSeed(long)
    {
        weka.filters.supervised.attribute.ClassOrder this;
        long seed;

        this := @this: weka.filters.supervised.attribute.ClassOrder;

        seed := @parameter0: long;

        this.<weka.filters.supervised.attribute.ClassOrder: long m_Seed> = seed;

        this.<weka.filters.supervised.attribute.ClassOrder: java.util.Random m_Random> = null;

        return;
    }


