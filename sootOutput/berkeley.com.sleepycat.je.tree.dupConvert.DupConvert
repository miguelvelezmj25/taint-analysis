    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "berkeley/com/sleepycat/je/tree/dupConvert/DupConvert";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: boolean $assertionsDisabled> = $z1;

        return;
    }

    public void convertDatabases()
    {
        berkeley.com.sleepycat.je.tree.dupConvert.DupConvert this;
        java.util.Iterator l1;
        berkeley.com.sleepycat.je.dbi.DatabaseId dbId;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        java.lang.Throwable l4, $r7;
        boolean $z0, $z1, $z2, $z3, $z4;
        berkeley.com.sleepycat.je.dbi.DbTree $r0, $r4, $r5, $r6, $r8;
        java.util.Map $r1;
        java.util.Set $r2;
        java.lang.Object $r3;
        java.lang.AssertionError $r9;

        this := @this: berkeley.com.sleepycat.je.tree.dupConvert.DupConvert;

        $z0 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: boolean preloadAll>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label01;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: void preloadAllDatabases()>();

     label01:
        $r0 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.dbi.DbTree dbTree>;

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.DbTree: java.util.Map getDbNamesAndIds()>();

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        l1 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label11;

        $r3 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>();

        dbId = (berkeley.com.sleepycat.je.dbi.DatabaseId) $r3;

        $r4 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.dbi.DbTree dbTree>;

        dbImpl = virtualinvoke $r4.<berkeley.com.sleepycat.je.dbi.DbTree: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDb(berkeley.com.sleepycat.je.dbi.DatabaseId)>(dbId);

     label03:
        $z2 = staticinvoke <berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: boolean needsConversion(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(dbImpl);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label05;

     label04:
        $r5 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.dbi.DbTree dbTree>;

        virtualinvoke $r5.<berkeley.com.sleepycat.je.dbi.DbTree: void releaseDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(dbImpl);

        goto label02;

     label05:
        specialinvoke this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: void convertDatabase(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(dbImpl);

     label06:
        $r6 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.dbi.DbTree dbTree>;

        virtualinvoke $r6.<berkeley.com.sleepycat.je.dbi.DbTree: void releaseDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(dbImpl);

        goto label10;

     label07:
        $r7 := @caughtexception;

     label08:
        l4 = $r7;

     label09:
        $r8 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.dbi.DbTree dbTree>;

        virtualinvoke $r8.<berkeley.com.sleepycat.je.dbi.DbTree: void releaseDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(dbImpl);

        throw l4;

     label10:
        goto label02;

     label11:
        $z3 = <berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label12;

        $z4 = specialinvoke this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: boolean noDupNodesPresent()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label12;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label12:
        return;

        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    public static boolean needsConversion(berkeley.com.sleepycat.je.dbi.DatabaseImpl)
    {
        berkeley.com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        boolean $z0, $z1, $z2, $z3;

        dbImpl := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        $z0 = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean getSortedDuplicates()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean getDupsConverted()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isDeleted()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    private void preloadAllDatabases()
    {
        berkeley.com.sleepycat.je.tree.dupConvert.DupConvert this;
        java.util.ArrayList dbsToConvert, $r0;
        berkeley.com.sleepycat.je.dbi.DatabaseId dbId;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl dbImpl, dbImpl, dbImpl#51, dbImpl#75;
        java.lang.Throwable l6, l7, $r8, $r18;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl[] dbArray;
        java.util.Iterator l8, l2#8, l2#45, l2#69;
        berkeley.com.sleepycat.je.dbi.DbTree $r1, $r5, $r6, $r7, $r9, $r11, $r17, $r20;
        java.util.Map $r2;
        java.util.Set $r3;
        boolean $z0, releaseDbImpl#19, $z1, releaseDbImpl#30, $z3, $z4, $z5;
        java.lang.Object $r4, $r10, $r16, $r19;
        int $i0, $i1;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r13;
        berkeley.com.sleepycat.je.PreloadConfig $r14;

        this := @this: berkeley.com.sleepycat.je.tree.dupConvert.DupConvert;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        dbsToConvert = $r0;

     label01:
        $r1 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.dbi.DbTree dbTree>;

        $r2 = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.DbTree: java.util.Map getDbNamesAndIds()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        l2#8 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke l2#8.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label12;

        $r4 = interfaceinvoke l2#8.<java.util.Iterator: java.lang.Object next()>();

        dbId = (berkeley.com.sleepycat.je.dbi.DatabaseId) $r4;

        $r5 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.dbi.DbTree dbTree>;

        dbImpl = virtualinvoke $r5.<berkeley.com.sleepycat.je.dbi.DbTree: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDb(berkeley.com.sleepycat.je.dbi.DatabaseId)>(dbId);

        releaseDbImpl#19 = 1;

     label03:
        $z1 = staticinvoke <berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: boolean needsConversion(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(dbImpl);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label05;

     label04:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(releaseDbImpl#19);

        if releaseDbImpl#19 == 0 goto label02;

        $r6 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.dbi.DbTree dbTree>;

        virtualinvoke $r6.<berkeley.com.sleepycat.je.dbi.DbTree: void releaseDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(dbImpl);

        goto label02;

     label05:
        virtualinvoke dbsToConvert.<java.util.ArrayList: boolean add(java.lang.Object)>(dbImpl);

        releaseDbImpl#30 = 0;

     label06:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(releaseDbImpl#30);

        if releaseDbImpl#30 == 0 goto label11;

        $r7 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.dbi.DbTree dbTree>;

        virtualinvoke $r7.<berkeley.com.sleepycat.je.dbi.DbTree: void releaseDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(dbImpl);

        goto label11;

     label07:
        $r8 := @caughtexception;

     label08:
        l6 = $r8;

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(releaseDbImpl#19);

        if releaseDbImpl#19 == 0 goto label10;

        $r9 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.dbi.DbTree dbTree>;

        virtualinvoke $r9.<berkeley.com.sleepycat.je.dbi.DbTree: void releaseDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(dbImpl);

     label10:
        throw l6;

     label11:
        goto label02;

     label12:
        $i0 = virtualinvoke dbsToConvert.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 0 goto label16;

     label13:
        l2#45 = virtualinvoke dbsToConvert.<java.util.ArrayList: java.util.Iterator iterator()>();

     label14:
        $z3 = interfaceinvoke l2#45.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label15;

        $r10 = interfaceinvoke l2#45.<java.util.Iterator: java.lang.Object next()>();

        dbImpl#51 = (berkeley.com.sleepycat.je.dbi.DatabaseImpl) $r10;

        $r11 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.dbi.DbTree dbTree>;

        virtualinvoke $r11.<berkeley.com.sleepycat.je.dbi.DbTree: void releaseDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(dbImpl#51);

        goto label14;

     label15:
        return;

     label16:
        $i1 = virtualinvoke dbsToConvert.<java.util.ArrayList: int size()>();

        dbArray = newarray (berkeley.com.sleepycat.je.dbi.DatabaseImpl)[$i1];

        virtualinvoke dbsToConvert.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(dbArray);

        $r13 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r14 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.PreloadConfig preloadConfig>;

        virtualinvoke $r13.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.PreloadStats preload(berkeley.com.sleepycat.je.dbi.DatabaseImpl[],berkeley.com.sleepycat.je.PreloadConfig)>(dbArray, $r14);

     label17:
        l2#69 = virtualinvoke dbsToConvert.<java.util.ArrayList: java.util.Iterator iterator()>();

     label18:
        $z4 = interfaceinvoke l2#69.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label19;

        $r16 = interfaceinvoke l2#69.<java.util.Iterator: java.lang.Object next()>();

        dbImpl#75 = (berkeley.com.sleepycat.je.dbi.DatabaseImpl) $r16;

        $r17 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.dbi.DbTree dbTree>;

        virtualinvoke $r17.<berkeley.com.sleepycat.je.dbi.DbTree: void releaseDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(dbImpl#75);

        goto label18;

     label19:
        goto label25;

     label20:
        $r18 := @caughtexception;

     label21:
        l7 = $r18;

     label22:
        l8 = virtualinvoke dbsToConvert.<java.util.ArrayList: java.util.Iterator iterator()>();

     label23:
        $z5 = interfaceinvoke l8.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label24;

        $r19 = interfaceinvoke l8.<java.util.Iterator: java.lang.Object next()>();

        dbImpl = (berkeley.com.sleepycat.je.dbi.DatabaseImpl) $r19;

        $r20 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.dbi.DbTree dbTree>;

        virtualinvoke $r20.<berkeley.com.sleepycat.je.dbi.DbTree: void releaseDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(dbImpl);

        goto label23;

     label24:
        throw l7;

     label25:
        return;

        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label01 to label13 with label20;
        catch java.lang.Throwable from label16 to label17 with label20;
        catch java.lang.Throwable from label21 to label22 with label20;
    }

    private void convertDatabase(berkeley.com.sleepycat.je.dbi.DatabaseImpl)
    {
        berkeley.com.sleepycat.je.tree.dupConvert.DupConvert this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        boolean saveDeferredWrite, $z0, $z1;
        java.lang.Throwable l3, $r11;
        berkeley.com.sleepycat.je.cleaner.LocalUtilizationTracker $r0, $r10;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r1, $r8;
        berkeley.com.sleepycat.je.PreloadConfig $r2;
        berkeley.com.sleepycat.je.tree.Tree $r4;
        berkeley.com.sleepycat.je.CacheMode $r5;
        berkeley.com.sleepycat.je.tree.BIN $r6, $r7;
        berkeley.com.sleepycat.je.cleaner.UtilizationProfile $r9;

        this := @this: berkeley.com.sleepycat.je.tree.dupConvert.DupConvert;

        dbImpl := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        saveDeferredWrite = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isDurableDeferredWrite()>();

     label1:
        $r0 = new berkeley.com.sleepycat.je.cleaner.LocalUtilizationTracker;

        $r1 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        specialinvoke $r0.<berkeley.com.sleepycat.je.cleaner.LocalUtilizationTracker: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl)>($r1);

        this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.cleaner.LocalUtilizationTracker localTracker> = $r0;

        virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: void setDeferredWrite(boolean)>(1);

        virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: void setKeyPrefixing()>();

        $z0 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: boolean preloadAll>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label2;

        $r2 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.PreloadConfig preloadConfig>;

        virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.PreloadStats preload(berkeley.com.sleepycat.je.PreloadConfig)>($r2);

     label2:
        $r4 = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.tree.Tree getTree()>();

        $r5 = <berkeley.com.sleepycat.je.CacheMode: berkeley.com.sleepycat.je.CacheMode UNCHANGED>;

        $r6 = virtualinvoke $r4.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.BIN getFirstNode(berkeley.com.sleepycat.je.CacheMode)>($r5);

        this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.tree.BIN bin> = $r6;

        $r7 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.tree.BIN bin>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r7);

        if $r7 != null goto label4;

     label3:
        virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: void setDeferredWrite(boolean)>(saveDeferredWrite);

        return;

     label4:
        this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: int index> = -1;

     label5:
        $z1 = specialinvoke this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: boolean getNextBinSlot()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label6;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: void convertBinSlot()>();

        goto label5;

     label6:
        virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: void setDupsConverted()>();

        virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: void sync(boolean)>(0);

        $r8 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r9 = virtualinvoke $r8.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.cleaner.UtilizationProfile getUtilizationProfile()>();

        $r10 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.cleaner.LocalUtilizationTracker localTracker>;

        virtualinvoke $r9.<berkeley.com.sleepycat.je.cleaner.UtilizationProfile: void flushLocalTracker(berkeley.com.sleepycat.je.cleaner.LocalUtilizationTracker)>($r10);

     label7:
        virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: void setDeferredWrite(boolean)>(saveDeferredWrite);

        goto label9;

     label8:
        $r11 := @caughtexception;

        l3 = $r11;

        virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: void setDeferredWrite(boolean)>(saveDeferredWrite);

        throw l3;

     label9:
        return;

        catch java.lang.Throwable from label1 to label3 with label8;
        catch java.lang.Throwable from label4 to label7 with label8;
    }

    private boolean noDupNodesPresent()
    {
        berkeley.com.sleepycat.je.tree.dupConvert.DupConvert this;
        java.util.Iterator l1;
        berkeley.com.sleepycat.je.tree.IN in;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0;
        berkeley.com.sleepycat.je.dbi.INList $r1;
        boolean $z0, $z1, $z2;
        java.lang.Object $r2;
        java.io.PrintStream $r3;
        java.lang.String $r4;

        this := @this: berkeley.com.sleepycat.je.tree.dupConvert.DupConvert;

        $r0 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.INList getInMemoryINs()>();

        l1 = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.INList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>();

        in = (berkeley.com.sleepycat.je.tree.IN) $r2;

        $z1 = in instanceof berkeley.com.sleepycat.je.tree.dupConvert.DIN;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

        $z2 = in instanceof berkeley.com.sleepycat.je.tree.dupConvert.DBIN;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label3;

     label2:
        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r4 = virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r4);

        return 0;

     label3:
        goto label1;

     label4:
        return 1;
    }

    private boolean getNextBinSlot()
    {
        berkeley.com.sleepycat.je.tree.dupConvert.DupConvert this;
        berkeley.com.sleepycat.je.CacheMode $r0;
        int $i0, $i1, $i2, $i3;
        berkeley.com.sleepycat.je.tree.BIN $r2, $r3, $r4, $r6, $r9, $r10, $r11;
        boolean $z0, $z1;
        java.lang.AssertionError $r5;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r7;
        berkeley.com.sleepycat.je.tree.Tree $r8;

        this := @this: berkeley.com.sleepycat.je.tree.dupConvert.DupConvert;

        $i0 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: int index>;

        $i1 = $i0 + 1;

        this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: int index> = $i1;

        $i2 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: int index>;

        $r2 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.tree.BIN bin>;

        $i3 = virtualinvoke $r2.<berkeley.com.sleepycat.je.tree.BIN: int getNEntries()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i2 >= $i3 goto label1;

        return 1;

     label1:
        $r3 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.tree.BIN bin>;

        virtualinvoke $r3.<berkeley.com.sleepycat.je.tree.BIN: long compactMemory()>();

        $z0 = <berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label2;

        $r4 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.tree.BIN bin>;

        $z1 = virtualinvoke $r4.<berkeley.com.sleepycat.je.tree.BIN: boolean verifyMemorySize()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label2:
        $r6 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.tree.BIN bin>;

        $r7 = virtualinvoke $r6.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        $r8 = virtualinvoke $r7.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.tree.Tree getTree()>();

        $r9 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.tree.BIN bin>;

        $r0 = <berkeley.com.sleepycat.je.CacheMode: berkeley.com.sleepycat.je.CacheMode UNCHANGED>;

        $r10 = virtualinvoke $r8.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.BIN getNextBin(berkeley.com.sleepycat.je.tree.BIN,berkeley.com.sleepycat.je.CacheMode)>($r9, $r0);

        this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.tree.BIN bin> = $r10;

        $r11 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.tree.BIN bin>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r11);

        if $r11 != null goto label3;

        return 0;

     label3:
        this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: int index> = 0;

        return 1;
    }

    private void convertBinSlot()
    {
        berkeley.com.sleepycat.je.tree.dupConvert.DupConvert this;
        berkeley.com.sleepycat.je.tree.Node node;
        byte[] binKey;
        berkeley.com.sleepycat.je.tree.dupConvert.DIN din;
        berkeley.com.sleepycat.je.tree.BIN $r0, $r1, $r5;
        int $i0, $i1, $i4;
        boolean $z0, $z1, $z2, $z3;
        berkeley.com.sleepycat.je.CacheMode $r2;
        java.lang.AssertionError $r3;
        long $l2, $l3;

        this := @this: berkeley.com.sleepycat.je.tree.dupConvert.DupConvert;

        $r0 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.tree.BIN bin>;

        $i0 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: int index>;

        $z0 = specialinvoke this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: boolean isLNDeleted(berkeley.com.sleepycat.je.tree.BIN,int)>($r0, $i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: void deleteSlot()>();

        return;

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.tree.BIN bin>;

        $i1 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: int index>;

        $r2 = <berkeley.com.sleepycat.je.CacheMode: berkeley.com.sleepycat.je.CacheMode DEFAULT>;

        node = virtualinvoke $r1.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.Node fetchLNOrDIN(int,berkeley.com.sleepycat.je.CacheMode)>($i1, $r2);

        $z1 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.Node: boolean containsDuplicates()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label3;

        $z2 = <berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label2;

        $z3 = node instanceof berkeley.com.sleepycat.je.tree.LN;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label2;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        $l2 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: long nConverted>;

        $l3 = $l2 + 1L;

        this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: long nConverted> = $l3;

        return;

     label3:
        $r5 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.tree.BIN bin>;

        $i4 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: int index>;

        binKey = virtualinvoke $r5.<berkeley.com.sleepycat.je.tree.BIN: byte[] getKey(int)>($i4);

        din = (berkeley.com.sleepycat.je.tree.dupConvert.DIN) node;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: void deleteSlot()>();

        specialinvoke this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: void convertDin(berkeley.com.sleepycat.je.tree.dupConvert.DIN,byte[])>(din, binKey);

        return;
    }

    private boolean isLNDeleted(berkeley.com.sleepycat.je.tree.BIN, int)
    {
        berkeley.com.sleepycat.je.tree.dupConvert.DupConvert this;
        berkeley.com.sleepycat.je.tree.BIN checkBin;
        int checkIndex;
        long lsn;
        berkeley.com.sleepycat.je.txn.BasicLocker lockingTxn;
        berkeley.com.sleepycat.je.txn.LockType $r0;
        berkeley.com.sleepycat.je.txn.LockResult lockRet;
        java.lang.Throwable l8, $r5;
        boolean $z0, $z1, l7#28, l7#32;
        byte $b0;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r1;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r2;
        berkeley.com.sleepycat.je.txn.LockGrantType $r3, $r4;

        this := @this: berkeley.com.sleepycat.je.tree.dupConvert.DupConvert;

        checkBin := @parameter0: berkeley.com.sleepycat.je.tree.BIN;

        checkIndex := @parameter1: int;

        $z0 = virtualinvoke checkBin.<berkeley.com.sleepycat.je.tree.BIN: boolean isEntryKnownDeleted(int)>(checkIndex);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke checkBin.<berkeley.com.sleepycat.je.tree.BIN: boolean isEntryPendingDeleted(int)>(checkIndex);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        lsn = virtualinvoke checkBin.<berkeley.com.sleepycat.je.tree.BIN: long getLsn(int)>(checkIndex);

        $b0 = lsn cmp -1L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 != 0 goto label2;

        return 1;

     label2:
        $r1 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        lockingTxn = staticinvoke <berkeley.com.sleepycat.je.txn.BasicLocker: berkeley.com.sleepycat.je.txn.BasicLocker createBasicLocker(berkeley.com.sleepycat.je.dbi.EnvironmentImpl)>($r1);

        virtualinvoke lockingTxn.<berkeley.com.sleepycat.je.txn.BasicLocker: void setPreemptable(boolean)>(0);

     label3:
        $r0 = <berkeley.com.sleepycat.je.txn.LockType: berkeley.com.sleepycat.je.txn.LockType READ>;

        $r2 = virtualinvoke checkBin.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        lockRet = virtualinvoke lockingTxn.<berkeley.com.sleepycat.je.txn.BasicLocker: berkeley.com.sleepycat.je.txn.LockResult nonBlockingLock(long,berkeley.com.sleepycat.je.txn.LockType,boolean,berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(lsn, $r0, 0, $r2);

        $r3 = virtualinvoke lockRet.<berkeley.com.sleepycat.je.txn.LockResult: berkeley.com.sleepycat.je.txn.LockGrantType getLockGrant()>();

        $r4 = <berkeley.com.sleepycat.je.txn.LockGrantType: berkeley.com.sleepycat.je.txn.LockGrantType DENIED>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        if $r3 != $r4 goto label5;

        l7#28 = 0;

     label4:
        virtualinvoke lockingTxn.<berkeley.com.sleepycat.je.txn.BasicLocker: void operationEnd()>();

        return l7#28;

     label5:
        l7#32 = 1;

     label6:
        virtualinvoke lockingTxn.<berkeley.com.sleepycat.je.txn.BasicLocker: void operationEnd()>();

        return l7#32;

     label7:
        $r5 := @caughtexception;

     label8:
        l8 = $r5;

     label9:
        virtualinvoke lockingTxn.<berkeley.com.sleepycat.je.txn.BasicLocker: void operationEnd()>();

        throw l8;

        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void deleteSlot()
    {
        berkeley.com.sleepycat.je.tree.dupConvert.DupConvert this;
        berkeley.com.sleepycat.je.tree.BIN $r0, $r1, $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4;
        byte[] $r4;

        this := @this: berkeley.com.sleepycat.je.tree.dupConvert.DupConvert;

        $r0 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.tree.BIN bin>;

        $i0 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: int index>;

        virtualinvoke $r0.<berkeley.com.sleepycat.je.tree.BIN: void deleteEntry(int)>($i0);

        $i1 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: int index>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 != 0 goto label1;

        $r1 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.tree.BIN bin>;

        $i2 = virtualinvoke $r1.<berkeley.com.sleepycat.je.tree.BIN: int getNEntries()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 == 0 goto label1;

        $r2 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.tree.BIN bin>;

        $r3 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.tree.BIN bin>;

        $r4 = virtualinvoke $r3.<berkeley.com.sleepycat.je.tree.BIN: byte[] getKey(int)>(0);

        virtualinvoke $r2.<berkeley.com.sleepycat.je.tree.BIN: void setIdentifierKey(byte[],boolean)>($r4, 1);

     label1:
        $i3 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: int index>;

        $i4 = $i3 - 1;

        this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: int index> = $i4;

        return;
    }

    private void convertDin(berkeley.com.sleepycat.je.tree.dupConvert.DIN, byte[])
    {
        berkeley.com.sleepycat.je.tree.dupConvert.DupConvert this;
        berkeley.com.sleepycat.je.tree.dupConvert.DIN din, $r7;
        byte[] binKey;
        berkeley.com.sleepycat.je.tree.IN child;
        berkeley.com.sleepycat.je.tree.dupConvert.DBIN dbin;
        java.lang.Throwable l7, l8, $r6, $r15;
        berkeley.com.sleepycat.je.tree.ChildReference dupCountRef;
        int i#3, $i0, j#23, $i1;
        berkeley.com.sleepycat.je.CacheMode $r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.AssertionError $r1, $r2, $r8;
        long $l2, $l4, $l5, $l7, $l8, $l10;
        byte $b3, $b6, $b9;
        berkeley.com.sleepycat.je.cleaner.LocalUtilizationTracker $r3, $r9, $r12;
        berkeley.com.sleepycat.je.log.LogEntryType $r4, $r10, $r13;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r5, $r11, $r14;

        this := @this: berkeley.com.sleepycat.je.tree.dupConvert.DupConvert;

        din := @parameter0: berkeley.com.sleepycat.je.tree.dupConvert.DIN;

        binKey := @parameter1: byte[];

        virtualinvoke din.<berkeley.com.sleepycat.je.tree.dupConvert.DIN: void latch()>();

     label01:
        i#3 = 0;

     label02:
        $i0 = virtualinvoke din.<berkeley.com.sleepycat.je.tree.dupConvert.DIN: int getNEntries()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#3 >= $i0 goto label16;

        $r0 = <berkeley.com.sleepycat.je.CacheMode: berkeley.com.sleepycat.je.CacheMode DEFAULT>;

        child = virtualinvoke din.<berkeley.com.sleepycat.je.tree.dupConvert.DIN: berkeley.com.sleepycat.je.tree.IN fetchIN(int,berkeley.com.sleepycat.je.CacheMode)>(i#3, $r0);

        $z0 = <berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label03;

        $z1 = virtualinvoke child.<berkeley.com.sleepycat.je.tree.IN: boolean isBINDelta(boolean)>(0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label03;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label03:
        $z2 = child instanceof berkeley.com.sleepycat.je.tree.dupConvert.DBIN;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label14;

        dbin = (berkeley.com.sleepycat.je.tree.dupConvert.DBIN) child;

        virtualinvoke dbin.<berkeley.com.sleepycat.je.tree.dupConvert.DBIN: void latch()>();

     label04:
        j#23 = 0;

     label05:
        $i1 = virtualinvoke dbin.<berkeley.com.sleepycat.je.tree.dupConvert.DBIN: int getNEntries()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#23);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if j#23 >= $i1 goto label07;

        $z3 = specialinvoke this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: boolean isLNDeleted(berkeley.com.sleepycat.je.tree.BIN,int)>(dbin, j#23);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label06;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: void convertDbinSlot(berkeley.com.sleepycat.je.tree.dupConvert.DBIN,int,byte[])>(dbin, j#23, binKey);

     label06:
        j#23 = j#23 + 1;

        goto label05;

     label07:
        $z4 = <berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label08;

        $z5 = virtualinvoke dbin.<berkeley.com.sleepycat.je.tree.dupConvert.DBIN: boolean verifyMemorySize()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 != 0 goto label08;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label08:
        $l2 = virtualinvoke dbin.<berkeley.com.sleepycat.je.tree.dupConvert.DBIN: long getLastLoggedLsn()>();

        $b3 = $l2 cmp -1L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b3);

        if $b3 == 0 goto label09;

        $r3 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.cleaner.LocalUtilizationTracker localTracker>;

        $l4 = virtualinvoke dbin.<berkeley.com.sleepycat.je.tree.dupConvert.DBIN: long getLastLoggedLsn()>();

        $r4 = virtualinvoke dbin.<berkeley.com.sleepycat.je.tree.dupConvert.DBIN: berkeley.com.sleepycat.je.log.LogEntryType getLogType()>();

        $r5 = virtualinvoke dbin.<berkeley.com.sleepycat.je.tree.dupConvert.DBIN: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        virtualinvoke $r3.<berkeley.com.sleepycat.je.cleaner.LocalUtilizationTracker: void countObsoleteNodeInexact(long,berkeley.com.sleepycat.je.log.LogEntryType,int,berkeley.com.sleepycat.je.dbi.DatabaseImpl)>($l4, $r4, 0, $r5);

     label09:
        virtualinvoke dbin.<berkeley.com.sleepycat.je.tree.dupConvert.DBIN: void releaseLatch()>();

        goto label13;

     label10:
        $r6 := @caughtexception;

     label11:
        l7 = $r6;

     label12:
        virtualinvoke dbin.<berkeley.com.sleepycat.je.tree.dupConvert.DBIN: void releaseLatch()>();

        throw l7;

     label13:
        goto label15;

     label14:
        $r7 = (berkeley.com.sleepycat.je.tree.dupConvert.DIN) child;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: void convertDin(berkeley.com.sleepycat.je.tree.dupConvert.DIN,byte[])>($r7, binKey);

     label15:
        virtualinvoke din.<berkeley.com.sleepycat.je.tree.dupConvert.DIN: void detachNode(int,boolean,long)>(i#3, 0, -1L);

        i#3 = i#3 + 1;

        goto label02;

     label16:
        $z6 = <berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 != 0 goto label17;

        $z7 = virtualinvoke din.<berkeley.com.sleepycat.je.tree.dupConvert.DIN: boolean verifyMemorySize()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 != 0 goto label17;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label17:
        $l5 = virtualinvoke din.<berkeley.com.sleepycat.je.tree.dupConvert.DIN: long getLastLoggedLsn()>();

        $b6 = $l5 cmp -1L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b6);

        if $b6 == 0 goto label18;

        $r9 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.cleaner.LocalUtilizationTracker localTracker>;

        $l7 = virtualinvoke din.<berkeley.com.sleepycat.je.tree.dupConvert.DIN: long getLastLoggedLsn()>();

        $r10 = virtualinvoke din.<berkeley.com.sleepycat.je.tree.dupConvert.DIN: berkeley.com.sleepycat.je.log.LogEntryType getLogType()>();

        $r11 = virtualinvoke din.<berkeley.com.sleepycat.je.tree.dupConvert.DIN: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        virtualinvoke $r9.<berkeley.com.sleepycat.je.cleaner.LocalUtilizationTracker: void countObsoleteNodeInexact(long,berkeley.com.sleepycat.je.log.LogEntryType,int,berkeley.com.sleepycat.je.dbi.DatabaseImpl)>($l7, $r10, 0, $r11);

     label18:
        dupCountRef = virtualinvoke din.<berkeley.com.sleepycat.je.tree.dupConvert.DIN: berkeley.com.sleepycat.je.tree.ChildReference getDupCountLNRef()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dupCountRef);

        if dupCountRef == null goto label19;

        $l8 = virtualinvoke dupCountRef.<berkeley.com.sleepycat.je.tree.ChildReference: long getLsn()>();

        $b9 = $l8 cmp -1L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b9);

        if $b9 == 0 goto label19;

        $r12 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.cleaner.LocalUtilizationTracker localTracker>;

        $l10 = virtualinvoke dupCountRef.<berkeley.com.sleepycat.je.tree.ChildReference: long getLsn()>();

        $r13 = <berkeley.com.sleepycat.je.log.LogEntryType: berkeley.com.sleepycat.je.log.LogEntryType LOG_DUPCOUNTLN>;

        $r14 = virtualinvoke din.<berkeley.com.sleepycat.je.tree.dupConvert.DIN: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        virtualinvoke $r12.<berkeley.com.sleepycat.je.cleaner.LocalUtilizationTracker: void countObsoleteNodeInexact(long,berkeley.com.sleepycat.je.log.LogEntryType,int,berkeley.com.sleepycat.je.dbi.DatabaseImpl)>($l10, $r13, 0, $r14);

     label19:
        virtualinvoke din.<berkeley.com.sleepycat.je.tree.dupConvert.DIN: void releaseLatch()>();

        goto label23;

     label20:
        $r15 := @caughtexception;

     label21:
        l8 = $r15;

     label22:
        virtualinvoke din.<berkeley.com.sleepycat.je.tree.dupConvert.DIN: void releaseLatch()>();

        throw l8;

     label23:
        return;

        catch java.lang.Throwable from label04 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.lang.Throwable from label01 to label19 with label20;
        catch java.lang.Throwable from label21 to label22 with label20;
    }

    private void convertDbinSlot(berkeley.com.sleepycat.je.tree.dupConvert.DBIN, int, byte[])
    {
        berkeley.com.sleepycat.je.tree.dupConvert.DupConvert this;
        berkeley.com.sleepycat.je.tree.dupConvert.DBIN dbin;
        int dbinIndex, newIndex, $i3, $i4;
        byte[] binKey, newKey, $r0;
        berkeley.com.sleepycat.je.tree.BIN $r1, $r2, $r3, $r4, $r9, $r10;
        boolean $z0, $z1;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r5;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r6, $r16;
        berkeley.com.sleepycat.je.tree.Tree $r7;
        berkeley.com.sleepycat.je.CacheMode $r8;
        long $l1, $l5, $l6;
        byte $b2;
        java.lang.StringBuilder $r11, $r12, $r14, $r15, $r18;
        java.lang.String $r13, $r19;
        berkeley.com.sleepycat.je.dbi.DatabaseId $r17;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r20;

        this := @this: berkeley.com.sleepycat.je.tree.dupConvert.DupConvert;

        dbin := @parameter0: berkeley.com.sleepycat.je.tree.dupConvert.DBIN;

        dbinIndex := @parameter1: int;

        binKey := @parameter2: byte[];

        $r0 = virtualinvoke dbin.<berkeley.com.sleepycat.je.tree.dupConvert.DBIN: byte[] getKey(int)>(dbinIndex);

        newKey = staticinvoke <berkeley.com.sleepycat.je.dbi.DupKeyData: byte[] replaceData(byte[],byte[])>(binKey, $r0);

        $r1 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.tree.BIN bin>;

        $z0 = virtualinvoke $r1.<berkeley.com.sleepycat.je.tree.BIN: boolean needsSplitting()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r2 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.tree.BIN bin>;

        $z1 = virtualinvoke $r2.<berkeley.com.sleepycat.je.tree.BIN: boolean isKeyInBounds(byte[])>(newKey);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

     label1:
        $r3 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.tree.BIN bin>;

        virtualinvoke $r3.<berkeley.com.sleepycat.je.tree.BIN: long compactMemory()>();

        $r4 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.tree.BIN bin>;

        virtualinvoke $r4.<berkeley.com.sleepycat.je.tree.BIN: void releaseLatch()>();

        $r5 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r5.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void daemonEviction(boolean)>(0);

        $r6 = virtualinvoke dbin.<berkeley.com.sleepycat.je.tree.dupConvert.DBIN: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        $r7 = virtualinvoke $r6.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.tree.Tree getTree()>();

        $r8 = <berkeley.com.sleepycat.je.CacheMode: berkeley.com.sleepycat.je.CacheMode UNCHANGED>;

        $r9 = virtualinvoke $r7.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.BIN searchSplitsAllowed(byte[],berkeley.com.sleepycat.je.CacheMode)>(newKey, $r8);

        this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.tree.BIN bin> = $r9;

     label2:
        $r10 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.tree.BIN bin>;

        $l1 = virtualinvoke dbin.<berkeley.com.sleepycat.je.tree.dupConvert.DBIN: long getLsn(int)>(dbinIndex);

        $b2 = virtualinvoke dbin.<berkeley.com.sleepycat.je.tree.dupConvert.DBIN: byte getState(int)>(dbinIndex);

        newIndex = virtualinvoke $r10.<berkeley.com.sleepycat.je.tree.BIN: int insertEntry1(berkeley.com.sleepycat.je.tree.Node,byte[],byte[],long,byte,boolean)>(null, newKey, null, $l1, $b2, 0);

        $i3 = newIndex & 131072;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 != 0 goto label3;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Key not inserted: ");

        $r13 = staticinvoke <berkeley.com.sleepycat.je.tree.Key: java.lang.String dumpString(byte[],int)>(newKey, 0);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" DB: ");

        $r16 = virtualinvoke dbin.<berkeley.com.sleepycat.je.tree.dupConvert.DBIN: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        $r17 = virtualinvoke $r16.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.DatabaseId getId()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>($r19);

        throw $r20;

     label3:
        $i4 = newIndex & -131073;

        this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: int index> = $i4;

        virtualinvoke dbin.<berkeley.com.sleepycat.je.tree.dupConvert.DBIN: void detachNode(int,boolean,long)>(dbinIndex, 0, -1L);

        $l5 = this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: long nConverted>;

        $l6 = $l5 + 1L;

        this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: long nConverted> = $l6;

        return;
    }

    public void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl, berkeley.com.sleepycat.je.dbi.DbTree)
    {
        berkeley.com.sleepycat.je.tree.dupConvert.DupConvert this;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        berkeley.com.sleepycat.je.dbi.DbTree dbTree;
        berkeley.com.sleepycat.je.dbi.DbConfigManager $r0;
        berkeley.com.sleepycat.je.config.BooleanConfigParam $r1;
        boolean $z0;
        berkeley.com.sleepycat.je.PreloadConfig $r3, $r4;

        this := @this: berkeley.com.sleepycat.je.tree.dupConvert.DupConvert;

        envImpl := @parameter0: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        dbTree := @parameter1: berkeley.com.sleepycat.je.dbi.DbTree;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl> = envImpl;

        this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.dbi.DbTree dbTree> = dbTree;

        $r0 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.DbConfigManager getConfigManager()>();

        $r1 = <berkeley.com.sleepycat.je.config.EnvironmentParams: berkeley.com.sleepycat.je.config.BooleanConfigParam ENV_DUP_CONVERT_PRELOAD_ALL>;

        $z0 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.DbConfigManager: boolean getBoolean(berkeley.com.sleepycat.je.config.BooleanConfigParam)>($r1);

        this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: boolean preloadAll> = $z0;

        $r3 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.PreloadConfig getDupConvertPreloadConfig()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r3);

        if $r3 == null goto label1;

        $r4 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.PreloadConfig getDupConvertPreloadConfig()>();

        goto label2;

     label1:
        $r4 = new berkeley.com.sleepycat.je.PreloadConfig;

        specialinvoke $r4.<berkeley.com.sleepycat.je.PreloadConfig: void <init>()>();

     label2:
        this.<berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: berkeley.com.sleepycat.je.PreloadConfig preloadConfig> = $r4;

        return;
    }

    public static void convertInKeys(berkeley.com.sleepycat.je.dbi.DatabaseImpl, berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        berkeley.com.sleepycat.je.tree.IN in;
        byte[] oldKey, newKey, oldKey, newKey;
        boolean $z0, $z1, $z2, $z3, $z4;
        int i#8, $i0, $i1, $i2;
        java.lang.AssertionError $r0;

        dbImpl := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        in := @parameter1: berkeley.com.sleepycat.je.tree.IN;

        $z0 = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean getSortedDuplicates()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        return;

     label1:
        $z1 = in instanceof berkeley.com.sleepycat.je.tree.dupConvert.DIN;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

        $z2 = in instanceof berkeley.com.sleepycat.je.tree.dupConvert.DBIN;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label3;

     label2:
        return;

     label3:
        i#8 = 0;

     label4:
        $i0 = virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: int getNEntries()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#8 >= $i0 goto label5;

        oldKey = virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: byte[] getKey(int)>(i#8);

        $i1 = lengthof oldKey;

        newKey = staticinvoke <berkeley.com.sleepycat.je.dbi.DupKeyData: byte[] makePrefixKey(byte[],int,int)>(oldKey, 0, $i1);

        virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: void convertKey(int,byte[])>(i#8, newKey);

        i#8 = i#8 + 1;

        goto label4;

     label5:
        oldKey = virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: byte[] getIdentifierKey()>();

        $i2 = lengthof oldKey;

        newKey = staticinvoke <berkeley.com.sleepycat.je.dbi.DupKeyData: byte[] makePrefixKey(byte[],int,int)>(oldKey, 0, $i2);

        virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: void setIdentifierKey(byte[],boolean)>(newKey, 1);

        $z3 = <berkeley.com.sleepycat.je.tree.dupConvert.DupConvert: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label6;

        $z4 = virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: boolean verifyMemorySize()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label6;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label6:
        return;
    }


