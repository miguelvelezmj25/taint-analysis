    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "berkeley/com/sleepycat/je/txn/TxnManager";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <berkeley.com.sleepycat.je.txn.TxnManager: boolean $assertionsDisabled> = $z1;

        return;
    }

    public void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl)
    {
        berkeley.com.sleepycat.je.txn.TxnManager this;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        berkeley.com.sleepycat.je.txn.SyncedLockManager $r0;
        boolean $z0;
        berkeley.com.sleepycat.je.txn.DummyLockManager $r1;
        berkeley.com.sleepycat.je.txn.LockManager $r2;
        berkeley.com.sleepycat.je.latch.SharedLatch $r3;
        java.util.concurrent.ConcurrentHashMap $r4, $r7;
        java.util.HashMap $r5;
        java.util.Map $r6;
        java.util.concurrent.atomic.AtomicLong $r8, $r9;
        java.util.concurrent.atomic.AtomicInteger $r10;
        berkeley.com.sleepycat.je.utilint.StatGroup $r11, $r13, $r16, $r19, $r22, $r25, $r28, $r31, $r34;
        berkeley.com.sleepycat.je.utilint.IntStat $r12;
        berkeley.com.sleepycat.je.utilint.StatDefinition $r14, $r17, $r20, $r23, $r26, $r29, $r32, $r35;
        berkeley.com.sleepycat.je.utilint.LongStat $r15, $r18, $r21, $r24, $r27, $r30;
        berkeley.com.sleepycat.je.utilint.ActiveTxnArrayStat $r33;

        this := @this: berkeley.com.sleepycat.je.txn.TxnManager;

        envImpl := @parameter0: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<berkeley.com.sleepycat.je.txn.TxnManager: long nTotalCommits> = 0L;

        $r0 = new berkeley.com.sleepycat.je.txn.SyncedLockManager;

        specialinvoke $r0.<berkeley.com.sleepycat.je.txn.SyncedLockManager: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl)>(envImpl);

        this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.txn.LockManager lockManager> = $r0;

        $z0 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean isNoLocking()>();

        if $z0 == 0 goto label1;

        $r1 = new berkeley.com.sleepycat.je.txn.DummyLockManager;

        $r2 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.txn.LockManager lockManager>;

        specialinvoke $r1.<berkeley.com.sleepycat.je.txn.DummyLockManager: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.txn.LockManager)>(envImpl, $r2);

        this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.txn.LockManager lockManager> = $r1;

     label1:
        this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl> = envImpl;

        $r3 = staticinvoke <berkeley.com.sleepycat.je.latch.LatchFactory: berkeley.com.sleepycat.je.latch.SharedLatch createSharedLatch(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String,boolean)>(envImpl, "TxnManager.allTxns", 0);

        this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.latch.SharedLatch allTxnsLatch> = $r3;

        $r4 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r4.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        this.<berkeley.com.sleepycat.je.txn.TxnManager: java.util.Map allTxns> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        $r6 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r5);

        this.<berkeley.com.sleepycat.je.txn.TxnManager: java.util.Map allXATxns> = $r6;

        $r7 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r7.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        this.<berkeley.com.sleepycat.je.txn.TxnManager: java.util.Map thread2Txn> = $r7;

        $r8 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r8.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        this.<berkeley.com.sleepycat.je.txn.TxnManager: java.util.concurrent.atomic.AtomicLong lastUsedLocalTxnId> = $r8;

        $r9 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r9.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(-10L);

        this.<berkeley.com.sleepycat.je.txn.TxnManager: java.util.concurrent.atomic.AtomicLong lastUsedReplicatedTxnId> = $r9;

        $r10 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r10.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        this.<berkeley.com.sleepycat.je.txn.TxnManager: java.util.concurrent.atomic.AtomicInteger nActiveSerializable> = $r10;

        $r11 = new berkeley.com.sleepycat.je.utilint.StatGroup;

        specialinvoke $r11.<berkeley.com.sleepycat.je.utilint.StatGroup: void <init>(java.lang.String,java.lang.String)>("Transaction", "Transaction statistics");

        this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.utilint.StatGroup stats> = $r11;

        $r12 = new berkeley.com.sleepycat.je.utilint.IntStat;

        $r13 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.utilint.StatGroup stats>;

        $r14 = <berkeley.com.sleepycat.je.dbi.TxnStatDefinition: berkeley.com.sleepycat.je.utilint.StatDefinition TXN_ACTIVE>;

        specialinvoke $r12.<berkeley.com.sleepycat.je.utilint.IntStat: void <init>(berkeley.com.sleepycat.je.utilint.StatGroup,berkeley.com.sleepycat.je.utilint.StatDefinition)>($r13, $r14);

        this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.utilint.IntStat nActive> = $r12;

        $r15 = new berkeley.com.sleepycat.je.utilint.LongStat;

        $r16 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.utilint.StatGroup stats>;

        $r17 = <berkeley.com.sleepycat.je.dbi.TxnStatDefinition: berkeley.com.sleepycat.je.utilint.StatDefinition TXN_BEGINS>;

        specialinvoke $r15.<berkeley.com.sleepycat.je.utilint.LongStat: void <init>(berkeley.com.sleepycat.je.utilint.StatGroup,berkeley.com.sleepycat.je.utilint.StatDefinition)>($r16, $r17);

        this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.utilint.LongStat numBegins> = $r15;

        $r18 = new berkeley.com.sleepycat.je.utilint.LongStat;

        $r19 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.utilint.StatGroup stats>;

        $r20 = <berkeley.com.sleepycat.je.dbi.TxnStatDefinition: berkeley.com.sleepycat.je.utilint.StatDefinition TXN_COMMITS>;

        specialinvoke $r18.<berkeley.com.sleepycat.je.utilint.LongStat: void <init>(berkeley.com.sleepycat.je.utilint.StatGroup,berkeley.com.sleepycat.je.utilint.StatDefinition)>($r19, $r20);

        this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.utilint.LongStat numCommits> = $r18;

        $r21 = new berkeley.com.sleepycat.je.utilint.LongStat;

        $r22 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.utilint.StatGroup stats>;

        $r23 = <berkeley.com.sleepycat.je.dbi.TxnStatDefinition: berkeley.com.sleepycat.je.utilint.StatDefinition TXN_ABORTS>;

        specialinvoke $r21.<berkeley.com.sleepycat.je.utilint.LongStat: void <init>(berkeley.com.sleepycat.je.utilint.StatGroup,berkeley.com.sleepycat.je.utilint.StatDefinition)>($r22, $r23);

        this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.utilint.LongStat numAborts> = $r21;

        $r24 = new berkeley.com.sleepycat.je.utilint.LongStat;

        $r25 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.utilint.StatGroup stats>;

        $r26 = <berkeley.com.sleepycat.je.dbi.TxnStatDefinition: berkeley.com.sleepycat.je.utilint.StatDefinition TXN_XAPREPARES>;

        specialinvoke $r24.<berkeley.com.sleepycat.je.utilint.LongStat: void <init>(berkeley.com.sleepycat.je.utilint.StatGroup,berkeley.com.sleepycat.je.utilint.StatDefinition)>($r25, $r26);

        this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.utilint.LongStat numXAPrepares> = $r24;

        $r27 = new berkeley.com.sleepycat.je.utilint.LongStat;

        $r28 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.utilint.StatGroup stats>;

        $r29 = <berkeley.com.sleepycat.je.dbi.TxnStatDefinition: berkeley.com.sleepycat.je.utilint.StatDefinition TXN_XACOMMITS>;

        specialinvoke $r27.<berkeley.com.sleepycat.je.utilint.LongStat: void <init>(berkeley.com.sleepycat.je.utilint.StatGroup,berkeley.com.sleepycat.je.utilint.StatDefinition)>($r28, $r29);

        this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.utilint.LongStat numXACommits> = $r27;

        $r30 = new berkeley.com.sleepycat.je.utilint.LongStat;

        $r31 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.utilint.StatGroup stats>;

        $r32 = <berkeley.com.sleepycat.je.dbi.TxnStatDefinition: berkeley.com.sleepycat.je.utilint.StatDefinition TXN_XAABORTS>;

        specialinvoke $r30.<berkeley.com.sleepycat.je.utilint.LongStat: void <init>(berkeley.com.sleepycat.je.utilint.StatGroup,berkeley.com.sleepycat.je.utilint.StatDefinition)>($r31, $r32);

        this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.utilint.LongStat numXAAborts> = $r30;

        $r33 = new berkeley.com.sleepycat.je.utilint.ActiveTxnArrayStat;

        $r34 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.utilint.StatGroup stats>;

        $r35 = <berkeley.com.sleepycat.je.dbi.TxnStatDefinition: berkeley.com.sleepycat.je.utilint.StatDefinition TXN_ACTIVE_TXNS>;

        specialinvoke $r33.<berkeley.com.sleepycat.je.utilint.ActiveTxnArrayStat: void <init>(berkeley.com.sleepycat.je.utilint.StatGroup,berkeley.com.sleepycat.je.utilint.StatDefinition)>($r34, $r35);

        this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.utilint.ActiveTxnArrayStat activeTxns> = $r33;

        return;
    }

    public long getNTotalCommits()
    {
        berkeley.com.sleepycat.je.txn.TxnManager this;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.txn.TxnManager;

        $l0 = this.<berkeley.com.sleepycat.je.txn.TxnManager: long nTotalCommits>;

        return $l0;
    }

    public berkeley.com.sleepycat.je.utilint.StatGroup loadStats(berkeley.com.sleepycat.je.StatsConfig)
    {
        berkeley.com.sleepycat.je.txn.TxnManager this;
        berkeley.com.sleepycat.je.StatsConfig config;
        berkeley.com.sleepycat.je.txn.LockManager $r0;
        berkeley.com.sleepycat.je.utilint.StatGroup $r1;

        this := @this: berkeley.com.sleepycat.je.txn.TxnManager;

        config := @parameter0: berkeley.com.sleepycat.je.StatsConfig;

        $r0 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.txn.LockManager lockManager>;

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.txn.LockManager: berkeley.com.sleepycat.je.utilint.StatGroup loadStats(berkeley.com.sleepycat.je.StatsConfig)>(config);

        return $r1;
    }

    public static boolean isReplicatedTxn(long)
    {
        long txnId;
        byte $b0;
        boolean $z0;

        txnId := @parameter0: long;

        $b0 = txnId cmp -10L;

        if $b0 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public berkeley.com.sleepycat.je.Transaction getTxnForThread()
    {
        berkeley.com.sleepycat.je.txn.TxnManager this;
        java.lang.Thread $r0;
        java.util.Map $r1;
        java.lang.Object $r2;
        berkeley.com.sleepycat.je.Transaction $r3;

        this := @this: berkeley.com.sleepycat.je.txn.TxnManager;

        $r1 = this.<berkeley.com.sleepycat.je.txn.TxnManager: java.util.Map thread2Txn>;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        $r3 = (berkeley.com.sleepycat.je.Transaction) $r2;

        return $r3;
    }

    public berkeley.com.sleepycat.je.txn.LockManager getLockManager()
    {
        berkeley.com.sleepycat.je.txn.TxnManager this;
        berkeley.com.sleepycat.je.txn.LockManager $r0;

        this := @this: berkeley.com.sleepycat.je.txn.TxnManager;

        $r0 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.txn.LockManager lockManager>;

        return $r0;
    }

    long getNextTxnId()
    {
        berkeley.com.sleepycat.je.txn.TxnManager this;
        java.util.concurrent.atomic.AtomicLong $r0;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.txn.TxnManager;

        $r0 = this.<berkeley.com.sleepycat.je.txn.TxnManager: java.util.concurrent.atomic.AtomicLong lastUsedLocalTxnId>;

        $l0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        return $l0;
    }

    public javax.transaction.xa.Xid[] XARecover()
    {
        berkeley.com.sleepycat.je.txn.TxnManager this;
        java.util.Set xidSet;
        java.util.Map $r0;
        int $i0;
        javax.transaction.xa.Xid[] ret#7, ret#11;
        java.lang.Object[] $r1;

        this := @this: berkeley.com.sleepycat.je.txn.TxnManager;

        $r0 = this.<berkeley.com.sleepycat.je.txn.TxnManager: java.util.Map allXATxns>;

        xidSet = interfaceinvoke $r0.<java.util.Map: java.util.Set keySet()>();

        $i0 = interfaceinvoke xidSet.<java.util.Set: int size()>();

        ret#7 = newarray (javax.transaction.xa.Xid)[$i0];

        $r1 = interfaceinvoke xidSet.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(ret#7);

        ret#11 = (javax.transaction.xa.Xid[]) $r1;

        return ret#11;
    }

    public berkeley.com.sleepycat.je.TransactionStats txnStat(berkeley.com.sleepycat.je.StatsConfig)
    {
        berkeley.com.sleepycat.je.txn.TxnManager this;
        berkeley.com.sleepycat.je.StatsConfig config;
        berkeley.com.sleepycat.je.TransactionStats$Active[] activeSet;
        java.util.Iterator iter;
        berkeley.com.sleepycat.je.txn.Locker txn;
        java.lang.Throwable l7, $r20;
        berkeley.com.sleepycat.je.latch.SharedLatch $r0, $r19, $r21;
        berkeley.com.sleepycat.je.utilint.IntStat $r1, $r4;
        java.util.Map $r2, $r6;
        int $i0, $i1, i#21, $i2;
        java.lang.Integer $r3, $r5;
        java.util.Set $r7;
        boolean $z0, $z1;
        java.lang.Object $r8;
        berkeley.com.sleepycat.je.TransactionStats$Active $r9;
        java.lang.String $r10;
        long $l3;
        berkeley.com.sleepycat.je.utilint.ActiveTxnArrayStat $r11;
        berkeley.com.sleepycat.je.TransactionStats $r12, txnStats#47;
        berkeley.com.sleepycat.je.utilint.StatGroup $r13, $r14;
        berkeley.com.sleepycat.je.utilint.LongStat $r15, $r16, $r17, $r18;

        this := @this: berkeley.com.sleepycat.je.txn.TxnManager;

        config := @parameter0: berkeley.com.sleepycat.je.StatsConfig;

        $r0 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.latch.SharedLatch allTxnsLatch>;

        interfaceinvoke $r0.<berkeley.com.sleepycat.je.latch.SharedLatch: void acquireShared()>();

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.utilint.IntStat nActive>;

        $r2 = this.<berkeley.com.sleepycat.je.txn.TxnManager: java.util.Map allTxns>;

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke $r1.<berkeley.com.sleepycat.je.utilint.IntStat: void set(java.lang.Integer)>($r3);

        $r4 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.utilint.IntStat nActive>;

        $r5 = virtualinvoke $r4.<berkeley.com.sleepycat.je.utilint.IntStat: java.lang.Integer get()>();

        $i1 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        activeSet = newarray (berkeley.com.sleepycat.je.TransactionStats$Active)[$i1];

        $r6 = this.<berkeley.com.sleepycat.je.txn.TxnManager: java.util.Map allTxns>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set keySet()>();

        iter = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

        i#21 = 0;

     label2:
        $z0 = interfaceinvoke iter.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $i2 = lengthof activeSet;

        if i#21 >= $i2 goto label3;

        $r8 = interfaceinvoke iter.<java.util.Iterator: java.lang.Object next()>();

        txn = (berkeley.com.sleepycat.je.txn.Locker) $r8;

        $r9 = new berkeley.com.sleepycat.je.TransactionStats$Active;

        $r10 = virtualinvoke txn.<berkeley.com.sleepycat.je.txn.Locker: java.lang.String toString()>();

        $l3 = virtualinvoke txn.<berkeley.com.sleepycat.je.txn.Locker: long getId()>();

        specialinvoke $r9.<berkeley.com.sleepycat.je.TransactionStats$Active: void <init>(java.lang.String,long,long)>($r10, $l3, 0L);

        activeSet[i#21] = $r9;

        i#21 = i#21 + 1;

        goto label2;

     label3:
        $r11 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.utilint.ActiveTxnArrayStat activeTxns>;

        virtualinvoke $r11.<berkeley.com.sleepycat.je.utilint.ActiveTxnArrayStat: void set(berkeley.com.sleepycat.je.TransactionStats$Active[])>(activeSet);

        $r12 = new berkeley.com.sleepycat.je.TransactionStats;

        $r13 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.utilint.StatGroup stats>;

        $r14 = virtualinvoke $r13.<berkeley.com.sleepycat.je.utilint.StatGroup: berkeley.com.sleepycat.je.utilint.StatGroup cloneGroup(boolean)>(0);

        specialinvoke $r12.<berkeley.com.sleepycat.je.TransactionStats: void <init>(berkeley.com.sleepycat.je.utilint.StatGroup)>($r14);

        txnStats#47 = $r12;

        $z1 = virtualinvoke config.<berkeley.com.sleepycat.je.StatsConfig: boolean getClear()>();

        if $z1 == 0 goto label4;

        $r15 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.utilint.LongStat numCommits>;

        virtualinvoke $r15.<berkeley.com.sleepycat.je.utilint.LongStat: void clear()>();

        $r16 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.utilint.LongStat numAborts>;

        virtualinvoke $r16.<berkeley.com.sleepycat.je.utilint.LongStat: void clear()>();

        $r17 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.utilint.LongStat numXACommits>;

        virtualinvoke $r17.<berkeley.com.sleepycat.je.utilint.LongStat: void clear()>();

        $r18 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.utilint.LongStat numXAAborts>;

        virtualinvoke $r18.<berkeley.com.sleepycat.je.utilint.LongStat: void clear()>();

     label4:
        $r19 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.latch.SharedLatch allTxnsLatch>;

        interfaceinvoke $r19.<berkeley.com.sleepycat.je.latch.SharedLatch: void release()>();

        goto label8;

     label5:
        $r20 := @caughtexception;

     label6:
        l7 = $r20;

     label7:
        $r21 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.latch.SharedLatch allTxnsLatch>;

        interfaceinvoke $r21.<berkeley.com.sleepycat.je.latch.SharedLatch: void release()>();

        throw l7;

     label8:
        return txnStats#47;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public berkeley.com.sleepycat.je.LockStats lockStat(berkeley.com.sleepycat.je.StatsConfig) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.txn.TxnManager this;
        berkeley.com.sleepycat.je.StatsConfig config;
        berkeley.com.sleepycat.je.txn.LockManager $r0;
        berkeley.com.sleepycat.je.LockStats $r1;

        this := @this: berkeley.com.sleepycat.je.txn.TxnManager;

        config := @parameter0: berkeley.com.sleepycat.je.StatsConfig;

        $r0 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.txn.LockManager lockManager>;

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.txn.LockManager: berkeley.com.sleepycat.je.LockStats lockStat(berkeley.com.sleepycat.je.StatsConfig)>(config);

        return $r1;
    }

    public long getLastReplicatedTxnId()
    {
        berkeley.com.sleepycat.je.txn.TxnManager this;
        java.util.concurrent.atomic.AtomicLong $r0;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.txn.TxnManager;

        $r0 = this.<berkeley.com.sleepycat.je.txn.TxnManager: java.util.concurrent.atomic.AtomicLong lastUsedReplicatedTxnId>;

        $l0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: long get()>();

        return $l0;
    }

    public long getLastLocalTxnId()
    {
        berkeley.com.sleepycat.je.txn.TxnManager this;
        java.util.concurrent.atomic.AtomicLong $r0;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.txn.TxnManager;

        $r0 = this.<berkeley.com.sleepycat.je.txn.TxnManager: java.util.concurrent.atomic.AtomicLong lastUsedLocalTxnId>;

        $l0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: long get()>();

        return $l0;
    }

    public long getFirstActiveLsn()
    {
        berkeley.com.sleepycat.je.txn.TxnManager this;
        java.util.Iterator iter;
        long txnFirstActive, firstActive#2;
        java.lang.Throwable l6, $r6;
        berkeley.com.sleepycat.je.latch.SharedLatch $r0, $r5, $r7;
        java.util.Map $r1;
        java.util.Set $r2;
        boolean $z0;
        java.lang.Object $r3;
        berkeley.com.sleepycat.je.txn.Txn $r4;
        byte $b0, $b1;
        int $i2;

        this := @this: berkeley.com.sleepycat.je.txn.TxnManager;

        firstActive#2 = -1L;

        $r0 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.latch.SharedLatch allTxnsLatch>;

        interfaceinvoke $r0.<berkeley.com.sleepycat.je.latch.SharedLatch: void acquireExclusive()>();

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.txn.TxnManager: java.util.Map allTxns>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        iter = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke iter.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke iter.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (berkeley.com.sleepycat.je.txn.Txn) $r3;

        txnFirstActive = virtualinvoke $r4.<berkeley.com.sleepycat.je.txn.Txn: long getFirstActiveLsn()>();

        $b0 = firstActive#2 cmp -1L;

        if $b0 != 0 goto label3;

        firstActive#2 = txnFirstActive;

        goto label4;

     label3:
        $b1 = txnFirstActive cmp -1L;

        if $b1 == 0 goto label4;

        $i2 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: int compareTo(long,long)>(txnFirstActive, firstActive#2);

        if $i2 >= 0 goto label4;

        firstActive#2 = txnFirstActive;

     label4:
        goto label2;

     label5:
        $r5 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.latch.SharedLatch allTxnsLatch>;

        interfaceinvoke $r5.<berkeley.com.sleepycat.je.latch.SharedLatch: void release()>();

        goto label9;

     label6:
        $r6 := @caughtexception;

     label7:
        l6 = $r6;

     label8:
        $r7 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.latch.SharedLatch allTxnsLatch>;

        interfaceinvoke $r7.<berkeley.com.sleepycat.je.latch.SharedLatch: void release()>();

        throw l6;

     label9:
        return firstActive#2;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    void unRegisterTxn(berkeley.com.sleepycat.je.txn.Txn, boolean)
    {
        berkeley.com.sleepycat.je.txn.TxnManager this;
        berkeley.com.sleepycat.je.txn.Txn txn;
        boolean isCommit, $z0;
        java.lang.Throwable l3, $r10;
        berkeley.com.sleepycat.je.latch.SharedLatch $r0, $r9, $r11;
        java.util.Map $r1;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r3;
        berkeley.com.sleepycat.je.dbi.MemoryBudget $r4;
        int $i0, $i1;
        long $l2, $l3, $l4;
        berkeley.com.sleepycat.je.utilint.LongStat $r5, $r7;
        java.util.concurrent.atomic.AtomicInteger $r8;

        this := @this: berkeley.com.sleepycat.je.txn.TxnManager;

        txn := @parameter0: berkeley.com.sleepycat.je.txn.Txn;

        isCommit := @parameter1: boolean;

        $r0 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.latch.SharedLatch allTxnsLatch>;

        interfaceinvoke $r0.<berkeley.com.sleepycat.je.latch.SharedLatch: void acquireShared()>();

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.txn.TxnManager: java.util.Map allTxns>;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>(txn);

        $r3 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r4 = virtualinvoke $r3.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.MemoryBudget getMemoryBudget()>();

        $i0 = virtualinvoke txn.<berkeley.com.sleepycat.je.txn.Txn: int getBudgetedMemorySize()>();

        $i1 = 0 - $i0;

        $l2 = (long) $i1;

        virtualinvoke $r4.<berkeley.com.sleepycat.je.dbi.MemoryBudget: void updateTxnMemoryUsage(long)>($l2);

        if isCommit == 0 goto label2;

        $r5 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.utilint.LongStat numCommits>;

        virtualinvoke $r5.<berkeley.com.sleepycat.je.utilint.LongStat: void increment()>();

        $l3 = this.<berkeley.com.sleepycat.je.txn.TxnManager: long nTotalCommits>;

        $l4 = $l3 + 1L;

        this.<berkeley.com.sleepycat.je.txn.TxnManager: long nTotalCommits> = $l4;

        goto label3;

     label2:
        $r7 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.utilint.LongStat numAborts>;

        virtualinvoke $r7.<berkeley.com.sleepycat.je.utilint.LongStat: void increment()>();

     label3:
        $z0 = virtualinvoke txn.<berkeley.com.sleepycat.je.txn.Txn: boolean isSerializableIsolation()>();

        if $z0 == 0 goto label4;

        $r8 = this.<berkeley.com.sleepycat.je.txn.TxnManager: java.util.concurrent.atomic.AtomicInteger nActiveSerializable>;

        virtualinvoke $r8.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

     label4:
        $r9 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.latch.SharedLatch allTxnsLatch>;

        interfaceinvoke $r9.<berkeley.com.sleepycat.je.latch.SharedLatch: void release()>();

        goto label6;

     label5:
        $r10 := @caughtexception;

        l3 = $r10;

        $r11 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.latch.SharedLatch allTxnsLatch>;

        interfaceinvoke $r11.<berkeley.com.sleepycat.je.latch.SharedLatch: void release()>();

        throw l3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
    }

    public void setLastTxnId(long, long)
    {
        berkeley.com.sleepycat.je.txn.TxnManager this;
        long lastReplicatedTxnId, lastLocalId;
        java.util.concurrent.atomic.AtomicLong $r0, $r1;

        this := @this: berkeley.com.sleepycat.je.txn.TxnManager;

        lastReplicatedTxnId := @parameter0: long;

        lastLocalId := @parameter1: long;

        $r0 = this.<berkeley.com.sleepycat.je.txn.TxnManager: java.util.concurrent.atomic.AtomicLong lastUsedReplicatedTxnId>;

        virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: void set(long)>(lastReplicatedTxnId);

        $r1 = this.<berkeley.com.sleepycat.je.txn.TxnManager: java.util.concurrent.atomic.AtomicLong lastUsedLocalTxnId>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void set(long)>(lastLocalId);

        return;
    }

    public void registerTxn(berkeley.com.sleepycat.je.txn.Txn)
    {
        berkeley.com.sleepycat.je.txn.TxnManager this;
        berkeley.com.sleepycat.je.txn.Txn txn;
        java.lang.Throwable l2, $r6;
        berkeley.com.sleepycat.je.latch.SharedLatch $r0, $r5, $r7;
        java.util.Map $r1;
        boolean $z0;
        java.util.concurrent.atomic.AtomicInteger $r3;
        berkeley.com.sleepycat.je.utilint.LongStat $r4;

        this := @this: berkeley.com.sleepycat.je.txn.TxnManager;

        txn := @parameter0: berkeley.com.sleepycat.je.txn.Txn;

        $r0 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.latch.SharedLatch allTxnsLatch>;

        interfaceinvoke $r0.<berkeley.com.sleepycat.je.latch.SharedLatch: void acquireShared()>();

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.txn.TxnManager: java.util.Map allTxns>;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(txn, txn);

        $z0 = virtualinvoke txn.<berkeley.com.sleepycat.je.txn.Txn: boolean isSerializableIsolation()>();

        if $z0 == 0 goto label2;

        $r3 = this.<berkeley.com.sleepycat.je.txn.TxnManager: java.util.concurrent.atomic.AtomicInteger nActiveSerializable>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

     label2:
        $r4 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.utilint.LongStat numBegins>;

        virtualinvoke $r4.<berkeley.com.sleepycat.je.utilint.LongStat: void increment()>();

     label3:
        $r5 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.latch.SharedLatch allTxnsLatch>;

        interfaceinvoke $r5.<berkeley.com.sleepycat.je.latch.SharedLatch: void release()>();

        goto label5;

     label4:
        $r6 := @caughtexception;

        l2 = $r6;

        $r7 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.latch.SharedLatch allTxnsLatch>;

        interfaceinvoke $r7.<berkeley.com.sleepycat.je.latch.SharedLatch: void release()>();

        throw l2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    public void registerXATxn(javax.transaction.xa.Xid, berkeley.com.sleepycat.je.txn.Txn, boolean)
    {
        berkeley.com.sleepycat.je.txn.TxnManager this;
        javax.transaction.xa.Xid xid;
        berkeley.com.sleepycat.je.txn.Txn txn;
        boolean isPrepare, $z0;
        java.util.Map $r0, $r1;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r3;
        berkeley.com.sleepycat.je.dbi.MemoryBudget $r4;
        int $i0;
        long $l1;
        berkeley.com.sleepycat.je.utilint.LongStat $r5;

        this := @this: berkeley.com.sleepycat.je.txn.TxnManager;

        xid := @parameter0: javax.transaction.xa.Xid;

        txn := @parameter1: berkeley.com.sleepycat.je.txn.Txn;

        isPrepare := @parameter2: boolean;

        $r0 = this.<berkeley.com.sleepycat.je.txn.TxnManager: java.util.Map allXATxns>;

        $z0 = interfaceinvoke $r0.<java.util.Map: boolean containsKey(java.lang.Object)>(xid);

        if $z0 != 0 goto label1;

        $r1 = this.<berkeley.com.sleepycat.je.txn.TxnManager: java.util.Map allXATxns>;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(xid, txn);

        $r3 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r4 = virtualinvoke $r3.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.MemoryBudget getMemoryBudget()>();

        $i0 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: int HASHMAP_ENTRY_OVERHEAD>;

        $l1 = (long) $i0;

        virtualinvoke $r4.<berkeley.com.sleepycat.je.dbi.MemoryBudget: void updateTxnMemoryUsage(long)>($l1);

     label1:
        if isPrepare == 0 goto label2;

        $r5 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.utilint.LongStat numXAPrepares>;

        virtualinvoke $r5.<berkeley.com.sleepycat.je.utilint.LongStat: void increment()>();

     label2:
        return;
    }

    public berkeley.com.sleepycat.je.txn.Txn txnBegin(berkeley.com.sleepycat.je.Transaction, berkeley.com.sleepycat.je.TransactionConfig) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.txn.TxnManager this;
        berkeley.com.sleepycat.je.Transaction parent;
        berkeley.com.sleepycat.je.TransactionConfig txnConfig;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0;
        berkeley.com.sleepycat.je.txn.Txn $r1;

        this := @this: berkeley.com.sleepycat.je.txn.TxnManager;

        parent := @parameter0: berkeley.com.sleepycat.je.Transaction;

        txnConfig := @parameter1: berkeley.com.sleepycat.je.TransactionConfig;

        $r0 = this.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r1 = staticinvoke <berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.txn.Txn createUserTxn(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.TransactionConfig)>($r0, txnConfig);

        return $r1;
    }

    public boolean areOtherSerializableTransactionsActive(berkeley.com.sleepycat.je.txn.Locker)
    {
        berkeley.com.sleepycat.je.txn.TxnManager this;
        berkeley.com.sleepycat.je.txn.Locker excludeLocker;
        byte exclude, $b0;
        boolean $z0, $z1;
        java.util.concurrent.atomic.AtomicInteger $r0;
        int $i1, $i2;

        this := @this: berkeley.com.sleepycat.je.txn.TxnManager;

        excludeLocker := @parameter0: berkeley.com.sleepycat.je.txn.Locker;

        if excludeLocker == null goto label1;

        $z0 = virtualinvoke excludeLocker.<berkeley.com.sleepycat.je.txn.Locker: boolean isSerializableIsolation()>();

        if $z0 == 0 goto label1;

        $b0 = 1;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        exclude = $b0;

        $r0 = this.<berkeley.com.sleepycat.je.txn.TxnManager: java.util.concurrent.atomic.AtomicInteger nActiveSerializable>;

        $i1 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i2 = $i1 - exclude;

        if $i2 <= 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }


