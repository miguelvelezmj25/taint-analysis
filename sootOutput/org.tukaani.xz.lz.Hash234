    void <init>(int)
    {
        org.tukaani.xz.lz.Hash234 this;
        int dictSize, $i0, $i1, $i2;
        int[] $r0, $r1, $r2, $r3;

        this := @this: org.tukaani.xz.lz.Hash234;

        dictSize := @parameter0: int;

        specialinvoke this.<org.tukaani.xz.lz.CRC32Hash: void <init>()>();

        $r0 = newarray (int)[1024];

        this.<org.tukaani.xz.lz.Hash234: int[] hash2Table> = $r0;

        $r1 = newarray (int)[65536];

        this.<org.tukaani.xz.lz.Hash234: int[] hash3Table> = $r1;

        this.<org.tukaani.xz.lz.Hash234: int hash2Value> = 0;

        this.<org.tukaani.xz.lz.Hash234: int hash3Value> = 0;

        this.<org.tukaani.xz.lz.Hash234: int hash4Value> = 0;

        $i0 = staticinvoke <org.tukaani.xz.lz.Hash234: int getHash4Size(int)>(dictSize);

        $r2 = newarray (int)[$i0];

        this.<org.tukaani.xz.lz.Hash234: int[] hash4Table> = $r2;

        $r3 = this.<org.tukaani.xz.lz.Hash234: int[] hash4Table>;

        $i1 = lengthof $r3;

        $i2 = $i1 - 1;

        this.<org.tukaani.xz.lz.Hash234: int hash4Mask> = $i2;

        return;
    }

    static int getHash4Size(int)
    {
        int dictSize, h#4, $i0, h#10, $i1, h#16, $i2, h#22, $i3, h#28, h#32, h#36, $i4;

        dictSize := @parameter0: int;

        h#4 = dictSize - 1;

        $i0 = h#4 >>> 1;

        h#10 = h#4 | $i0;

        $i1 = h#10 >>> 2;

        h#16 = h#10 | $i1;

        $i2 = h#16 >>> 4;

        h#22 = h#16 | $i2;

        $i3 = h#22 >>> 8;

        h#28 = h#22 | $i3;

        h#32 = h#28 >>> 1;

        h#36 = h#32 | 65535;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(h#36);

        if h#36 <= 16777216 goto label1;

        h#36 = h#36 >>> 1;

     label1:
        $i4 = h#36 + 1;

        return $i4;
    }

    void normalize(int)
    {
        org.tukaani.xz.lz.Hash234 this;
        int normalizeOffset;
        int[] $r0, $r1, $r2;

        this := @this: org.tukaani.xz.lz.Hash234;

        normalizeOffset := @parameter0: int;

        $r0 = this.<org.tukaani.xz.lz.Hash234: int[] hash2Table>;

        staticinvoke <org.tukaani.xz.lz.LZEncoder: void normalize(int[],int)>($r0, normalizeOffset);

        $r1 = this.<org.tukaani.xz.lz.Hash234: int[] hash3Table>;

        staticinvoke <org.tukaani.xz.lz.LZEncoder: void normalize(int[],int)>($r1, normalizeOffset);

        $r2 = this.<org.tukaani.xz.lz.Hash234: int[] hash4Table>;

        staticinvoke <org.tukaani.xz.lz.LZEncoder: void normalize(int[],int)>($r2, normalizeOffset);

        return;
    }

    void updateTables(int)
    {
        org.tukaani.xz.lz.Hash234 this;
        int pos, $i0, $i1, $i2;
        int[] $r0, $r1, $r2;

        this := @this: org.tukaani.xz.lz.Hash234;

        pos := @parameter0: int;

        $r0 = this.<org.tukaani.xz.lz.Hash234: int[] hash2Table>;

        $i0 = this.<org.tukaani.xz.lz.Hash234: int hash2Value>;

        $r0[$i0] = pos;

        $r1 = this.<org.tukaani.xz.lz.Hash234: int[] hash3Table>;

        $i1 = this.<org.tukaani.xz.lz.Hash234: int hash3Value>;

        $r1[$i1] = pos;

        $r2 = this.<org.tukaani.xz.lz.Hash234: int[] hash4Table>;

        $i2 = this.<org.tukaani.xz.lz.Hash234: int hash4Value>;

        $r2[$i2] = pos;

        return;
    }

    int getHash4Pos()
    {
        org.tukaani.xz.lz.Hash234 this;
        int[] $r0;
        int $i0, $i1;

        this := @this: org.tukaani.xz.lz.Hash234;

        $r0 = this.<org.tukaani.xz.lz.Hash234: int[] hash4Table>;

        $i0 = this.<org.tukaani.xz.lz.Hash234: int hash4Value>;

        $i1 = $r0[$i0];

        return $i1;
    }

    void calcHashes(byte[], int)
    {
        org.tukaani.xz.lz.Hash234 this;
        byte[] buf;
        int off, $i2, $i3, temp#16, $i6, $i7, $i10, temp#32, $i11, $i12, $i15, $i16, temp#49, $i17, $i18;
        int[] $r0, $r1;
        byte $b0, $b4, $b8, $b13;
        short $s1, $s5, $s9, $s14;

        this := @this: org.tukaani.xz.lz.Hash234;

        buf := @parameter0: byte[];

        off := @parameter1: int;

        $r0 = <org.tukaani.xz.lz.Hash234: int[] crcTable>;

        $b0 = buf[off];

        $s1 = $b0 & 255;

        $i2 = $r0[$s1];

        $i3 = off + 1;

        $b4 = buf[$i3];

        $s5 = $b4 & 255;

        temp#16 = $i2 ^ $s5;

        $i6 = temp#16 & 1023;

        this.<org.tukaani.xz.lz.Hash234: int hash2Value> = $i6;

        $i7 = off + 2;

        $b8 = buf[$i7];

        $s9 = $b8 & 255;

        $i10 = $s9 << 8;

        temp#32 = temp#16 ^ $i10;

        $i11 = temp#32 & 65535;

        this.<org.tukaani.xz.lz.Hash234: int hash3Value> = $i11;

        $r1 = <org.tukaani.xz.lz.Hash234: int[] crcTable>;

        $i12 = off + 3;

        $b13 = buf[$i12];

        $s14 = $b13 & 255;

        $i15 = $r1[$s14];

        $i16 = $i15 << 5;

        temp#49 = temp#32 ^ $i16;

        $i17 = this.<org.tukaani.xz.lz.Hash234: int hash4Mask>;

        $i18 = temp#49 & $i17;

        this.<org.tukaani.xz.lz.Hash234: int hash4Value> = $i18;

        return;
    }

    int getHash3Pos()
    {
        org.tukaani.xz.lz.Hash234 this;
        int[] $r0;
        int $i0, $i1;

        this := @this: org.tukaani.xz.lz.Hash234;

        $r0 = this.<org.tukaani.xz.lz.Hash234: int[] hash3Table>;

        $i0 = this.<org.tukaani.xz.lz.Hash234: int hash3Value>;

        $i1 = $r0[$i0];

        return $i1;
    }

    int getHash2Pos()
    {
        org.tukaani.xz.lz.Hash234 this;
        int[] $r0;
        int $i0, $i1;

        this := @this: org.tukaani.xz.lz.Hash234;

        $r0 = this.<org.tukaani.xz.lz.Hash234: int[] hash2Table>;

        $i0 = this.<org.tukaani.xz.lz.Hash234: int hash2Value>;

        $i1 = $r0[$i0];

        return $i1;
    }


