    public void <init>()
    {
        kanzi.util.sort.FlashSort this;
        int[] $r0;

        this := @this: kanzi.util.sort.FlashSort;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = newarray (int)[0];

        this.<kanzi.util.sort.FlashSort: int[] buffer> = $r0;

        return;
    }

    public boolean sort(int[], int, int)
    {
        kanzi.util.sort.FlashSort this;
        int[] input, $r0, $r2;
        int blkptr, len, m, $i0, $i1, $i2, $i3, $i4, $i5;
        kanzi.util.sort.InsertionSort $r3;
        boolean $z0;

        this := @this: kanzi.util.sort.FlashSort;

        input := @parameter0: int[];

        blkptr := @parameter1: int;

        len := @parameter2: int;

        if blkptr < 0 goto label1;

        if len <= 0 goto label1;

        $i0 = blkptr + len;

        $i1 = lengthof input;

        if $i0 <= $i1 goto label2;

     label1:
        return 0;

     label2:
        if len != 1 goto label3;

        return 1;

     label3:
        $i2 = len * 215;

        m = $i2 >> 9;

        $r0 = this.<kanzi.util.sort.FlashSort: int[] buffer>;

        $i3 = lengthof $r0;

        if $i3 >= m goto label6;

        if m >= 32 goto label4;

        $i4 = 32;

        goto label5;

     label4:
        $i5 = m + 7;

        $i4 = $i5 & -8;

     label5:
        $r2 = newarray (int)[$i4];

        this.<kanzi.util.sort.FlashSort: int[] buffer> = $r2;

     label6:
        specialinvoke this.<kanzi.util.sort.FlashSort: void partialFlashSort(int[],int,int)>(input, blkptr, len);

        $r3 = new kanzi.util.sort.InsertionSort;

        specialinvoke $r3.<kanzi.util.sort.InsertionSort: void <init>()>();

        $z0 = virtualinvoke $r3.<kanzi.util.sort.InsertionSort: boolean sort(int[],int,int)>(input, blkptr, len);

        return $z0;
    }

    private void partialFlashSort(int[], int, int)
    {
        kanzi.util.sort.FlashSort this;
        int[] input, buf;
        int blkptr, count, end, val, len8, threshold, offs, idx, hold, min#4, max#6, idxMax#8, i#15, $i0, i#42, $i1, $i2, $i3, $i4, $i5, $i6, $i7, shiftL#84, shiftR#104, $i12, i#117, $i13, $i14, $i17, $i18, $i19, i#140, $i21, $i22, $i23, $i24, $i25, j#162, k#166, nmove#168, $i26, $i27, $i28, $i29, $i32, flash#197, $i33, $i34, $i37, $i39, $i40;
        long delta, delta1, denum, kl, kl, c1#87, num#89, $l10, $l15, $l16, k#130, $l30, $l31, $l35, $l36;
        byte $b8, $b9, $b11;

        this := @this: kanzi.util.sort.FlashSort;

        input := @parameter0: int[];

        blkptr := @parameter1: int;

        count := @parameter2: int;

        min#4 = input[blkptr];

        max#6 = min#4;

        idxMax#8 = blkptr;

        end = blkptr + count;

        i#15 = blkptr + 1;

     label01:
        if i#15 >= end goto label04;

        val = input[i#15];

        if val >= min#4 goto label02;

        min#4 = val;

     label02:
        if val <= max#6 goto label03;

        max#6 = val;

        idxMax#8 = i#15;

     label03:
        i#15 = i#15 + 1;

        goto label01;

     label04:
        if min#4 != max#6 goto label05;

        return;

     label05:
        buf = this.<kanzi.util.sort.FlashSort: int[] buffer>;

        len8 = lengthof buf;

        $i0 = max#6 - min#4;

        delta = (long) $i0;

        delta1 = delta + 1L;

        i#42 = 0;

     label06:
        if i#42 >= len8 goto label07;

        buf[i#42] = 0;

        $i1 = i#42 + 1;

        buf[$i1] = 0;

        $i2 = i#42 + 2;

        buf[$i2] = 0;

        $i3 = i#42 + 3;

        buf[$i3] = 0;

        $i4 = i#42 + 4;

        buf[$i4] = 0;

        $i5 = i#42 + 5;

        buf[$i5] = 0;

        $i6 = i#42 + 6;

        buf[$i6] = 0;

        $i7 = i#42 + 7;

        buf[$i7] = 0;

        i#42 = i#42 + 8;

        goto label06;

     label07:
        shiftL#84 = 15;

        threshold = 1073741823;

        c1#87 = 0L;

        num#89 = 0L;

     label08:
        $b8 = c1#87 cmp 0L;

        if $b8 != 0 goto label09;

        $b9 = num#89 cmp 1073741823L;

        if $b9 >= 0 goto label09;

        shiftL#84 = shiftL#84 + 1;

        $l10 = (long) len8;

        num#89 = $l10 << shiftL#84;

        c1#87 = num#89 / delta1;

        goto label08;

     label09:
        shiftR#104 = shiftL#84;

     label10:
        $b11 = c1#87 cmp 0L;

        if $b11 != 0 goto label11;

        $i12 = shiftR#104 - shiftL#84;

        denum = delta >>> $i12;

        c1#87 = num#89 / denum;

        shiftR#104 = shiftR#104 + 1;

        goto label10;

     label11:
        i#117 = blkptr;

     label12:
        if i#117 >= end goto label13;

        $i13 = input[i#117];

        $i14 = $i13 - min#4;

        $l15 = (long) $i14;

        $l16 = c1#87 * $l15;

        k#130 = $l16 >>> shiftR#104;

        $i17 = (int) k#130;

        $i18 = buf[$i17];

        $i19 = $i18 + 1;

        buf[$i17] = $i19;

        i#117 = i#117 + 1;

        goto label12;

     label13:
        i#140 = 1;

     label14:
        if i#140 >= len8 goto label15;

        $i21 = buf[i#140];

        $i22 = i#140 - 1;

        $i23 = buf[$i22];

        $i24 = $i21 + $i23;

        buf[i#140] = $i24;

        i#140 = i#140 + 1;

        goto label14;

     label15:
        $i25 = input[blkptr];

        input[idxMax#8] = $i25;

        input[blkptr] = max#6;

        j#162 = 0;

        k#166 = len8 - 1;

        nmove#168 = 1;

        offs = blkptr - 1;

     label16:
        if nmove#168 >= count goto label21;

     label17:
        $i26 = buf[k#166];

        if j#162 < $i26 goto label18;

        j#162 = j#162 + 1;

        $i27 = blkptr + j#162;

        $i28 = input[$i27];

        $i29 = $i28 - min#4;

        $l30 = (long) $i29;

        $l31 = c1#87 * $l30;

        kl = $l31 >>> shiftR#104;

        k#166 = (int) kl;

        goto label17;

     label18:
        $i32 = blkptr + j#162;

        flash#197 = input[$i32];

     label19:
        $i33 = buf[k#166];

        if $i33 == j#162 goto label20;

        $i34 = flash#197 - min#4;

        $l35 = (long) $i34;

        $l36 = c1#87 * $l35;

        kl = $l36 >>> shiftR#104;

        k#166 = (int) kl;

        $i37 = buf[k#166];

        idx = offs + $i37;

        hold = input[idx];

        input[idx] = flash#197;

        flash#197 = hold;

        $i39 = buf[k#166];

        $i40 = $i39 - 1;

        buf[k#166] = $i40;

        nmove#168 = nmove#168 + 1;

        goto label19;

     label20:
        goto label16;

     label21:
        return;
    }


