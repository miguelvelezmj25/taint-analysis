    public static java.util.Map getDensityBuckets(java.util.List, java.awt.Dimension, tool.dconvert.arg.Arguments, float, boolean) throws java.io.IOException
    {
        java.util.List densities;
        java.awt.Dimension srcDimension;
        tool.dconvert.arg.Arguments args;
        float scale;
        boolean isNinePatch;
        double $d0, $d1, $d2, $d3;
        int[] $r0;
        tool.dconvert.arg.EScaleMode $r1;
        int $i0, $i1;
        java.util.Map $r2, $r3, $r4;

        densities := @parameter0: java.util.List;

        srcDimension := @parameter1: java.awt.Dimension;

        args := @parameter2: tool.dconvert.arg.Arguments;

        scale := @parameter3: float;

        isNinePatch := @parameter4: boolean;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isNinePatch);

        if isNinePatch == 0 goto label1;

        $d0 = virtualinvoke srcDimension.<java.awt.Dimension: double getWidth()>();

        $d1 = $d0 - 2.0;

        $d2 = virtualinvoke srcDimension.<java.awt.Dimension: double getHeight()>();

        $d3 = $d2 - 2.0;

        virtualinvoke srcDimension.<java.awt.Dimension: void setSize(double,double)>($d1, $d3);

     label1:
        $r0 = <tool.dconvert.util.DensityBucketUtil$7: int[] $SwitchMap$tool$dconvert$arg$EScaleMode>;

        $r1 = args.<tool.dconvert.arg.Arguments: tool.dconvert.arg.EScaleMode scaleMode>;

        $i0 = virtualinvoke $r1.<tool.dconvert.arg.EScaleMode: int ordinal()>();

        $i1 = $r0[$i0];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            default: goto label4;
        };

     label2:
        $r2 = staticinvoke <tool.dconvert.util.DensityBucketUtil: java.util.Map getDensityBucketsWithDpScale(java.util.List,java.awt.Dimension,tool.dconvert.arg.Arguments,float)>(densities, srcDimension, args, scale);

        return $r2;

     label3:
        $r3 = staticinvoke <tool.dconvert.util.DensityBucketUtil: java.util.Map getDensityBucketsHeightDpScale(java.util.List,java.awt.Dimension,tool.dconvert.arg.Arguments,float)>(densities, srcDimension, args, scale);

        return $r3;

     label4:
        $r4 = staticinvoke <tool.dconvert.util.DensityBucketUtil: java.util.Map getDensityBucketsWithFactorScale(java.util.List,java.awt.Dimension,tool.dconvert.arg.Arguments,float)>(densities, srcDimension, args, scale);

        return $r4;
    }

    private static java.util.Map getDensityBucketsWithFactorScale(java.util.List, java.awt.Dimension, tool.dconvert.arg.Arguments, float)
    {
        java.util.List densities;
        java.awt.Dimension srcDimension;
        tool.dconvert.arg.Arguments args;
        float scale;
        double baseWidth, baseHeight, $d0, $d1, $d2, $d3;
        java.util.TreeMap bucketMap, $r0;
        int $i0, $i1;
        java.util.stream.Stream $r1, $r3;
        tool.dconvert.util.DensityBucketUtil$6 $r2;
        tool.dconvert.util.DensityBucketUtil$5 $r4;

        densities := @parameter0: java.util.List;

        srcDimension := @parameter1: java.awt.Dimension;

        args := @parameter2: tool.dconvert.arg.Arguments;

        scale := @parameter3: float;

        $i0 = srcDimension.<java.awt.Dimension: int width>;

        $d0 = (double) $i0;

        $d1 = (double) scale;

        baseWidth = $d0 / $d1;

        $i1 = srcDimension.<java.awt.Dimension: int height>;

        $d2 = (double) $i1;

        $d3 = (double) scale;

        baseHeight = $d2 / $d3;

        $r0 = new java.util.TreeMap;

        specialinvoke $r0.<java.util.TreeMap: void <init>()>();

        bucketMap = $r0;

        $r1 = interfaceinvoke densities.<java.util.List: java.util.stream.Stream stream()>();

        $r2 = new tool.dconvert.util.DensityBucketUtil$6;

        specialinvoke $r2.<tool.dconvert.util.DensityBucketUtil$6: void <init>(float,tool.dconvert.arg.Arguments)>(scale, args);

        $r3 = interfaceinvoke $r1.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r2);

        $r4 = new tool.dconvert.util.DensityBucketUtil$5;

        specialinvoke $r4.<tool.dconvert.util.DensityBucketUtil$5: void <init>(java.util.Map,tool.dconvert.arg.Arguments,double,double)>(bucketMap, args, baseWidth, baseHeight);

        interfaceinvoke $r3.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>($r4);

        return bucketMap;
    }

    private static java.util.Map getDensityBucketsHeightDpScale(java.util.List, java.awt.Dimension, tool.dconvert.arg.Arguments, float) throws java.io.IOException
    {
        java.util.List densities;
        java.awt.Dimension srcDimension;
        tool.dconvert.arg.Arguments args;
        float scale, scaleFactor, $f0, $f1, $f2;
        int baseWidth, baseHeight, $i0, $i1;
        java.util.TreeMap bucketMap, $r0;
        double $d0, $d1, $d2, $d3;
        java.util.stream.Stream $r1, $r3;
        tool.dconvert.util.DensityBucketUtil$4 $r2;
        tool.dconvert.util.DensityBucketUtil$3 $r4;

        densities := @parameter0: java.util.List;

        srcDimension := @parameter1: java.awt.Dimension;

        args := @parameter2: tool.dconvert.arg.Arguments;

        scale := @parameter3: float;

        $i0 = srcDimension.<java.awt.Dimension: int height>;

        $f0 = (float) $i0;

        scaleFactor = scale / $f0;

        $i1 = srcDimension.<java.awt.Dimension: int width>;

        $f1 = (float) $i1;

        $f2 = scaleFactor * $f1;

        $d0 = (double) $f2;

        $d1 = virtualinvoke args.<tool.dconvert.arg.Arguments: double round(double)>($d0);

        baseWidth = (int) $d1;

        $d2 = (double) scale;

        $d3 = virtualinvoke args.<tool.dconvert.arg.Arguments: double round(double)>($d2);

        baseHeight = (int) $d3;

        $r0 = new java.util.TreeMap;

        specialinvoke $r0.<java.util.TreeMap: void <init>()>();

        bucketMap = $r0;

        $r1 = interfaceinvoke densities.<java.util.List: java.util.stream.Stream stream()>();

        $r2 = new tool.dconvert.util.DensityBucketUtil$4;

        specialinvoke $r2.<tool.dconvert.util.DensityBucketUtil$4: void <init>(tool.dconvert.arg.Arguments,int,java.awt.Dimension)>(args, baseHeight, srcDimension);

        $r3 = interfaceinvoke $r1.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r2);

        $r4 = new tool.dconvert.util.DensityBucketUtil$3;

        specialinvoke $r4.<tool.dconvert.util.DensityBucketUtil$3: void <init>(java.util.Map,tool.dconvert.arg.Arguments,int,int)>(bucketMap, args, baseWidth, baseHeight);

        interfaceinvoke $r3.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>($r4);

        return bucketMap;
    }

    private static java.util.Map getDensityBucketsWithDpScale(java.util.List, java.awt.Dimension, tool.dconvert.arg.Arguments, float) throws java.io.IOException
    {
        java.util.List densities;
        java.awt.Dimension srcDimension;
        tool.dconvert.arg.Arguments args;
        float scale, scaleFactor, $f0, $f1, $f2;
        int baseWidth, baseHeight, $i0, $i1;
        java.util.TreeMap bucketMap, $r0;
        double $d0, $d1, $d2, $d3;
        java.util.stream.Stream $r1, $r3;
        tool.dconvert.util.DensityBucketUtil$2 $r2;
        tool.dconvert.util.DensityBucketUtil$1 $r4;

        densities := @parameter0: java.util.List;

        srcDimension := @parameter1: java.awt.Dimension;

        args := @parameter2: tool.dconvert.arg.Arguments;

        scale := @parameter3: float;

        $i0 = srcDimension.<java.awt.Dimension: int width>;

        $f0 = (float) $i0;

        scaleFactor = scale / $f0;

        $d0 = (double) scale;

        $d1 = virtualinvoke args.<tool.dconvert.arg.Arguments: double round(double)>($d0);

        baseWidth = (int) $d1;

        $i1 = srcDimension.<java.awt.Dimension: int height>;

        $f1 = (float) $i1;

        $f2 = scaleFactor * $f1;

        $d2 = (double) $f2;

        $d3 = virtualinvoke args.<tool.dconvert.arg.Arguments: double round(double)>($d2);

        baseHeight = (int) $d3;

        $r0 = new java.util.TreeMap;

        specialinvoke $r0.<java.util.TreeMap: void <init>()>();

        bucketMap = $r0;

        $r1 = interfaceinvoke densities.<java.util.List: java.util.stream.Stream stream()>();

        $r2 = new tool.dconvert.util.DensityBucketUtil$2;

        specialinvoke $r2.<tool.dconvert.util.DensityBucketUtil$2: void <init>(tool.dconvert.arg.Arguments,int,java.awt.Dimension)>(args, baseWidth, srcDimension);

        $r3 = interfaceinvoke $r1.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r2);

        $r4 = new tool.dconvert.util.DensityBucketUtil$1;

        specialinvoke $r4.<tool.dconvert.util.DensityBucketUtil$1: void <init>(java.util.Map,tool.dconvert.arg.Arguments,int,int)>(bucketMap, args, baseWidth, baseHeight);

        interfaceinvoke $r3.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>($r4);

        return bucketMap;
    }


