    public long readBits(int) throws kanzi.BitStreamException
    {
        kanzi.bitstream.DefaultInputBitStream this;
        int count, $i0, $i1, $i2, $i3, remaining#23, $i4, $i5, $i6, $i8, $i10, $i12, $i13, $i14, $i16, $i17, $i19, $i20, $i22, $i23;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        java.lang.String $r5;
        long $l7, $l9, $l11, res#45, $l15, $l18, res#62, res#67, $l21, $l24;

        this := @this: kanzi.bitstream.DefaultInputBitStream;

        count := @parameter0: int;

        $i0 = count - 1;

        $i1 = $i0 & -64;

        if $i1 == 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid length: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(count);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (must be in [1..64])");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r0;

     label1:
        $i2 = this.<kanzi.bitstream.DefaultInputBitStream: int bitIndex>;

        $i3 = count - $i2;

        remaining#23 = $i3 - 1;

        if remaining#23 > 0 goto label3;

        $i4 = this.<kanzi.bitstream.DefaultInputBitStream: int bitIndex>;

        if $i4 != 63 goto label2;

        specialinvoke this.<kanzi.bitstream.DefaultInputBitStream: void pullCurrent()>();

        $i5 = this.<kanzi.bitstream.DefaultInputBitStream: int bitIndex>;

        $i6 = $i5 - 63;

        remaining#23 = remaining#23 - $i6;

     label2:
        $l7 = this.<kanzi.bitstream.DefaultInputBitStream: long current>;

        $i8 = neg remaining#23;

        $l9 = $l7 >>> $i8;

        $i10 = neg count;

        $l11 = -1L >>> $i10;

        res#45 = $l9 & $l11;

        $i12 = this.<kanzi.bitstream.DefaultInputBitStream: int bitIndex>;

        $i13 = $i12 - count;

        $i14 = $i13 & 63;

        this.<kanzi.bitstream.DefaultInputBitStream: int bitIndex> = $i14;

        goto label4;

     label3:
        $l15 = this.<kanzi.bitstream.DefaultInputBitStream: long current>;

        $i16 = this.<kanzi.bitstream.DefaultInputBitStream: int bitIndex>;

        $i17 = 63 - $i16;

        $l18 = -1L >>> $i17;

        res#62 = $l15 & $l18;

        specialinvoke this.<kanzi.bitstream.DefaultInputBitStream: void pullCurrent()>();

        res#67 = res#62 << remaining#23;

        $i19 = this.<kanzi.bitstream.DefaultInputBitStream: int bitIndex>;

        $i20 = $i19 - remaining#23;

        this.<kanzi.bitstream.DefaultInputBitStream: int bitIndex> = $i20;

        $l21 = this.<kanzi.bitstream.DefaultInputBitStream: long current>;

        $i22 = this.<kanzi.bitstream.DefaultInputBitStream: int bitIndex>;

        $i23 = $i22 + 1;

        $l24 = $l21 >>> $i23;

        res#45 = res#67 | $l24;

     label4:
        return res#45;
    }

    private void pullCurrent()
    {
        kanzi.bitstream.DefaultInputBitStream this;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, shift#23, $i10, $i11, $i12, $i13, $i14, $i19, $i23, $i24, $i29, $i30, $i35, $i36, $i41, $i42, $i47, $i48, $i53, $i54, $i59, $i60, $i64, $i65;
        byte[] $r0, $r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        long val#29, $l17, $l18, $l22, val#61, $l27, $l28, val#76, $l33, $l34, val#91, $l39, $l40, val#106, $l45, $l46, val#121, $l51, $l52, val#136, $l57, $l58, val#151, $l63;
        byte $b15, $b20, $b25, $b31, $b37, $b43, $b49, $b55, $b61;
        short $s16, $s21, $s26, $s32, $s38, $s44, $s50, $s56, $s62;

        this := @this: kanzi.bitstream.DefaultInputBitStream;

        $i0 = this.<kanzi.bitstream.DefaultInputBitStream: int position>;

        $i1 = this.<kanzi.bitstream.DefaultInputBitStream: int maxPosition>;

        if $i0 <= $i1 goto label1;

        $r0 = this.<kanzi.bitstream.DefaultInputBitStream: byte[] buffer>;

        $i2 = lengthof $r0;

        specialinvoke this.<kanzi.bitstream.DefaultInputBitStream: int readFromInputStream(int)>($i2);

     label1:
        $i4 = this.<kanzi.bitstream.DefaultInputBitStream: int position>;

        $i5 = $i4 + 7;

        $i6 = this.<kanzi.bitstream.DefaultInputBitStream: int maxPosition>;

        if $i5 <= $i6 goto label4;

        $i7 = this.<kanzi.bitstream.DefaultInputBitStream: int maxPosition>;

        $i8 = this.<kanzi.bitstream.DefaultInputBitStream: int position>;

        $i9 = $i7 - $i8;

        shift#23 = $i9 << 3;

        $i10 = shift#23 + 7;

        this.<kanzi.bitstream.DefaultInputBitStream: int bitIndex> = $i10;

        val#29 = 0L;

     label2:
        $i11 = this.<kanzi.bitstream.DefaultInputBitStream: int position>;

        $i12 = this.<kanzi.bitstream.DefaultInputBitStream: int maxPosition>;

        if $i11 > $i12 goto label3;

        $r1 = this.<kanzi.bitstream.DefaultInputBitStream: byte[] buffer>;

        $i13 = this.<kanzi.bitstream.DefaultInputBitStream: int position>;

        $i14 = $i13 + 1;

        this.<kanzi.bitstream.DefaultInputBitStream: int position> = $i14;

        $b15 = $r1[$i13];

        $s16 = $b15 & 255;

        $l17 = (long) $s16;

        $l18 = $l17 << shift#23;

        val#29 = val#29 | $l18;

        shift#23 = shift#23 + -8;

        goto label2;

     label3:
        goto label5;

     label4:
        $r3 = this.<kanzi.bitstream.DefaultInputBitStream: byte[] buffer>;

        $i19 = this.<kanzi.bitstream.DefaultInputBitStream: int position>;

        $b20 = $r3[$i19];

        $s21 = $b20 & 255;

        $l22 = (long) $s21;

        val#61 = $l22 << 56;

        $r4 = this.<kanzi.bitstream.DefaultInputBitStream: byte[] buffer>;

        $i23 = this.<kanzi.bitstream.DefaultInputBitStream: int position>;

        $i24 = $i23 + 1;

        $b25 = $r4[$i24];

        $s26 = $b25 & 255;

        $l27 = (long) $s26;

        $l28 = $l27 << 48;

        val#76 = val#61 | $l28;

        $r5 = this.<kanzi.bitstream.DefaultInputBitStream: byte[] buffer>;

        $i29 = this.<kanzi.bitstream.DefaultInputBitStream: int position>;

        $i30 = $i29 + 2;

        $b31 = $r5[$i30];

        $s32 = $b31 & 255;

        $l33 = (long) $s32;

        $l34 = $l33 << 40;

        val#91 = val#76 | $l34;

        $r6 = this.<kanzi.bitstream.DefaultInputBitStream: byte[] buffer>;

        $i35 = this.<kanzi.bitstream.DefaultInputBitStream: int position>;

        $i36 = $i35 + 3;

        $b37 = $r6[$i36];

        $s38 = $b37 & 255;

        $l39 = (long) $s38;

        $l40 = $l39 << 32;

        val#106 = val#91 | $l40;

        $r7 = this.<kanzi.bitstream.DefaultInputBitStream: byte[] buffer>;

        $i41 = this.<kanzi.bitstream.DefaultInputBitStream: int position>;

        $i42 = $i41 + 4;

        $b43 = $r7[$i42];

        $s44 = $b43 & 255;

        $l45 = (long) $s44;

        $l46 = $l45 << 24;

        val#121 = val#106 | $l46;

        $r8 = this.<kanzi.bitstream.DefaultInputBitStream: byte[] buffer>;

        $i47 = this.<kanzi.bitstream.DefaultInputBitStream: int position>;

        $i48 = $i47 + 5;

        $b49 = $r8[$i48];

        $s50 = $b49 & 255;

        $l51 = (long) $s50;

        $l52 = $l51 << 16;

        val#136 = val#121 | $l52;

        $r9 = this.<kanzi.bitstream.DefaultInputBitStream: byte[] buffer>;

        $i53 = this.<kanzi.bitstream.DefaultInputBitStream: int position>;

        $i54 = $i53 + 6;

        $b55 = $r9[$i54];

        $s56 = $b55 & 255;

        $l57 = (long) $s56;

        $l58 = $l57 << 8;

        val#151 = val#136 | $l58;

        $r10 = this.<kanzi.bitstream.DefaultInputBitStream: byte[] buffer>;

        $i59 = this.<kanzi.bitstream.DefaultInputBitStream: int position>;

        $i60 = $i59 + 7;

        $b61 = $r10[$i60];

        $s62 = $b61 & 255;

        $l63 = (long) $s62;

        val#29 = val#151 | $l63;

        this.<kanzi.bitstream.DefaultInputBitStream: int bitIndex> = 63;

        $i64 = this.<kanzi.bitstream.DefaultInputBitStream: int position>;

        $i65 = $i64 + 8;

        this.<kanzi.bitstream.DefaultInputBitStream: int position> = $i65;

     label5:
        this.<kanzi.bitstream.DefaultInputBitStream: long current> = val#29;

        return;
    }

    private int readFromInputStream(int) throws kanzi.BitStreamException
    {
        kanzi.bitstream.DefaultInputBitStream this;
        int count, l3, size#9, $i1, $i6, $i7;
        java.io.IOException e, $r6;
        java.lang.Throwable l4, $r9;
        boolean $z0;
        kanzi.BitStreamException $r0, $r4, $r7;
        long $l0, $l2, $l3, $l4, $l5;
        java.io.InputStream $r2;
        byte[] $r3;
        java.lang.String $r8;

        this := @this: kanzi.bitstream.DefaultInputBitStream;

        count := @parameter0: int;

        $z0 = virtualinvoke this.<kanzi.bitstream.DefaultInputBitStream: boolean isClosed()>();

        if $z0 != 1 goto label01;

        $r0 = new kanzi.BitStreamException;

        specialinvoke $r0.<kanzi.BitStreamException: void <init>(java.lang.String,int)>("Stream closed", 4);

        throw $r0;

     label01:
        size#9 = -1;

     label02:
        $l0 = this.<kanzi.bitstream.DefaultInputBitStream: long read>;

        $i1 = this.<kanzi.bitstream.DefaultInputBitStream: int maxPosition>;

        $l2 = (long) $i1;

        $l3 = $l2 + 1L;

        $l4 = $l3 << 3;

        $l5 = $l0 + $l4;

        this.<kanzi.bitstream.DefaultInputBitStream: long read> = $l5;

        $r2 = this.<kanzi.bitstream.DefaultInputBitStream: java.io.InputStream is>;

        $r3 = this.<kanzi.bitstream.DefaultInputBitStream: byte[] buffer>;

        size#9 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>($r3, 0, count);

        if size#9 > 0 goto label03;

        $r4 = new kanzi.BitStreamException;

        specialinvoke $r4.<kanzi.BitStreamException: void <init>(java.lang.String,int)>("No more data to read in the bitstream", 2);

        throw $r4;

     label03:
        l3 = size#9;

     label04:
        this.<kanzi.bitstream.DefaultInputBitStream: int position> = 0;

        if size#9 > 0 goto label05;

        $i6 = -1;

        goto label06;

     label05:
        $i6 = size#9 - 1;

     label06:
        this.<kanzi.bitstream.DefaultInputBitStream: int maxPosition> = $i6;

        return l3;

     label07:
        $r6 := @caughtexception;

     label08:
        e = $r6;

        $r7 = new kanzi.BitStreamException;

        $r8 = virtualinvoke e.<java.io.IOException: java.lang.String getMessage()>();

        specialinvoke $r7.<kanzi.BitStreamException: void <init>(java.lang.String,int)>($r8, 1);

        throw $r7;

     label09:
        $r9 := @caughtexception;

        l4 = $r9;

     label10:
        this.<kanzi.bitstream.DefaultInputBitStream: int position> = 0;

        if size#9 > 0 goto label11;

        $i7 = -1;

        goto label12;

     label11:
        $i7 = size#9 - 1;

     label12:
        this.<kanzi.bitstream.DefaultInputBitStream: int maxPosition> = $i7;

        throw l4;

        catch java.io.IOException from label02 to label04 with label07;
        catch java.lang.Throwable from label02 to label04 with label09;
        catch java.lang.Throwable from label08 to label10 with label09;
    }

    public boolean isClosed()
    {
        kanzi.bitstream.DefaultInputBitStream this;
        boolean $z0;

        this := @this: kanzi.bitstream.DefaultInputBitStream;

        $z0 = this.<kanzi.bitstream.DefaultInputBitStream: boolean closed>;

        return $z0;
    }

    public int readBit() throws kanzi.BitStreamException
    {
        kanzi.bitstream.DefaultInputBitStream this;
        int bit, $i0, $i2, $i5, $i6, $i7;
        long $l1, $l3, $l4;

        this := @this: kanzi.bitstream.DefaultInputBitStream;

        $i0 = this.<kanzi.bitstream.DefaultInputBitStream: int bitIndex>;

        if $i0 != 63 goto label1;

        specialinvoke this.<kanzi.bitstream.DefaultInputBitStream: void pullCurrent()>();

     label1:
        $l1 = this.<kanzi.bitstream.DefaultInputBitStream: long current>;

        $i2 = this.<kanzi.bitstream.DefaultInputBitStream: int bitIndex>;

        $l3 = $l1 >> $i2;

        $l4 = $l3 & 1L;

        bit = (int) $l4;

        $i5 = this.<kanzi.bitstream.DefaultInputBitStream: int bitIndex>;

        $i6 = $i5 - 1;

        $i7 = $i6 & 63;

        this.<kanzi.bitstream.DefaultInputBitStream: int bitIndex> = $i7;

        return bit;
    }

    public long read()
    {
        kanzi.bitstream.DefaultInputBitStream this;
        long $l0, $l3, $l4, $l6, $l7;
        int $i1, $i2, $i5;

        this := @this: kanzi.bitstream.DefaultInputBitStream;

        $l0 = this.<kanzi.bitstream.DefaultInputBitStream: long read>;

        $i1 = this.<kanzi.bitstream.DefaultInputBitStream: int position>;

        $i2 = $i1 << 3;

        $l3 = (long) $i2;

        $l4 = $l0 + $l3;

        $i5 = this.<kanzi.bitstream.DefaultInputBitStream: int bitIndex>;

        $l6 = (long) $i5;

        $l7 = $l4 - $l6;

        return $l7;
    }

    public void <init>(java.io.InputStream, int)
    {
        kanzi.bitstream.DefaultInputBitStream this;
        java.io.InputStream is;
        int bufferSize, $i0;
        java.lang.NullPointerException $r0;
        java.lang.IllegalArgumentException $r1, $r2, $r3;
        byte[] $r4;

        this := @this: kanzi.bitstream.DefaultInputBitStream;

        is := @parameter0: java.io.InputStream;

        bufferSize := @parameter1: int;

        specialinvoke this.<java.lang.Object: void <init>()>();

        if is != null goto label1;

        $r0 = new java.lang.NullPointerException;

        specialinvoke $r0.<java.lang.NullPointerException: void <init>(java.lang.String)>("Invalid null input stream parameter");

        throw $r0;

     label1:
        if bufferSize >= 1024 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid buffer size (must be at least 1024)");

        throw $r1;

     label2:
        if bufferSize <= 268435456 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid buffer size (must be at most 268435456)");

        throw $r2;

     label3:
        $i0 = bufferSize & 7;

        if $i0 == 0 goto label4;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid buffer size (must be a multiple of 8)");

        throw $r3;

     label4:
        this.<kanzi.bitstream.DefaultInputBitStream: java.io.InputStream is> = is;

        $r4 = newarray (byte)[bufferSize];

        this.<kanzi.bitstream.DefaultInputBitStream: byte[] buffer> = $r4;

        this.<kanzi.bitstream.DefaultInputBitStream: int bitIndex> = 63;

        this.<kanzi.bitstream.DefaultInputBitStream: int maxPosition> = -1;

        return;
    }

    public void close()
    {
        kanzi.bitstream.DefaultInputBitStream this;
        boolean $z0;
        long $l0, $l1;

        this := @this: kanzi.bitstream.DefaultInputBitStream;

        $z0 = virtualinvoke this.<kanzi.bitstream.DefaultInputBitStream: boolean isClosed()>();

        if $z0 != 1 goto label1;

        return;

     label1:
        this.<kanzi.bitstream.DefaultInputBitStream: boolean closed> = 1;

        $l0 = this.<kanzi.bitstream.DefaultInputBitStream: long read>;

        $l1 = $l0 + 63L;

        this.<kanzi.bitstream.DefaultInputBitStream: long read> = $l1;

        this.<kanzi.bitstream.DefaultInputBitStream: int bitIndex> = 63;

        this.<kanzi.bitstream.DefaultInputBitStream: int maxPosition> = -1;

        return;
    }


