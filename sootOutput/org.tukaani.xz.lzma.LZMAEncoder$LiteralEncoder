    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "org/tukaani/xz/lzma/LZMAEncoder";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: boolean $assertionsDisabled> = $z1;

        return;
    }

    void <init>(org.tukaani.xz.lzma.LZMAEncoder, int, int)
    {
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder this;
        org.tukaani.xz.lzma.LZMAEncoder this$0;
        int lc, lp, $i0, $i1, i#15, $i2;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder[] $r0, $r1, $r2;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder $r3;

        this := @this: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder;

        this$0 := @parameter0: org.tukaani.xz.lzma.LZMAEncoder;

        lc := @parameter1: int;

        lp := @parameter2: int;

        this.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0> = this$0;

        specialinvoke this.<org.tukaani.xz.lzma.LZMACoder$LiteralCoder: void <init>(org.tukaani.xz.lzma.LZMACoder,int,int)>(this$0, lc, lp);

        $i0 = lc + lp;

        $i1 = 1 << $i0;

        $r0 = newarray (org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder)[$i1];

        this.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder[] subencoders> = $r0;

        i#15 = 0;

     label1:
        $r1 = this.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder[] subencoders>;

        $i2 = lengthof $r1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#15);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#15 >= $i2 goto label2;

        $r2 = this.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder[] subencoders>;

        $r3 = new org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder;

        specialinvoke $r3.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: void <init>(org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder,org.tukaani.xz.lzma.LZMAEncoder$1)>(this, null);

        $r2[i#15] = $r3;

        i#15 = i#15 + 1;

        goto label1;

     label2:
        return;
    }

    void reset()
    {
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder this;
        int i#2, $i0;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder[] $r0, $r1;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder $r2;

        this := @this: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder;

        i#2 = 0;

     label1:
        $r0 = this.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder[] subencoders>;

        $i0 = lengthof $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#2 >= $i0 goto label2;

        $r1 = this.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder[] subencoders>;

        $r2 = $r1[i#2];

        virtualinvoke $r2.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: void reset()>();

        i#2 = i#2 + 1;

        goto label1;

     label2:
        return;
    }

    int getPrice(int, int, int, int, org.tukaani.xz.lzma.State)
    {
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder this;
        int curByte, matchByte, prevByte, pos, i, $i0, $i1, $i2, price#15, $i5, price#35;
        org.tukaani.xz.lzma.State state;
        org.tukaani.xz.lzma.LZMAEncoder $r0, $r3;
        short[][] $r1;
        short[] $r2;
        short $s3;
        boolean $z0;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder[] $r4, $r6;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder $r5, $r7;

        this := @this: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder;

        curByte := @parameter0: int;

        matchByte := @parameter1: int;

        prevByte := @parameter2: int;

        pos := @parameter3: int;

        state := @parameter4: org.tukaani.xz.lzma.State;

        $r0 = this.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $r1 = $r0.<org.tukaani.xz.lzma.LZMAEncoder: short[][] isMatch>;

        $i0 = virtualinvoke state.<org.tukaani.xz.lzma.State: int get()>();

        $r2 = $r1[$i0];

        $r3 = this.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $i1 = $r3.<org.tukaani.xz.lzma.LZMAEncoder: int posMask>;

        $i2 = pos & $i1;

        $s3 = $r2[$i2];

        price#15 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitPrice(int,int)>($s3, 0);

        i = virtualinvoke this.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: int getSubcoderIndex(int,int)>(prevByte, pos);

        $z0 = virtualinvoke state.<org.tukaani.xz.lzma.State: boolean isLiteral()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r4 = this.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder[] subencoders>;

        $r5 = $r4[i];

        $i5 = virtualinvoke $r5.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: int getNormalPrice(int)>(curByte);

        goto label2;

     label1:
        $r6 = this.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder[] subencoders>;

        $r7 = $r6[i];

        $i5 = virtualinvoke $r7.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: int getMatchedPrice(int,int)>(curByte, matchByte);

     label2:
        price#35 = price#15 + $i5;

        return price#35;
    }

    void encode() throws java.io.IOException
    {
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder this;
        int i, $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0;
        org.tukaani.xz.lzma.LZMAEncoder $r0, $r2, $r4, $r5, $r7;
        java.lang.AssertionError $r1;
        org.tukaani.xz.lz.LZEncoder $r3, $r6;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder[] $r8;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder $r9;

        this := @this: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder;

        $z0 = <org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r0 = this.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $i0 = $r0.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 >= 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $r2 = this.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $r3 = $r2.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lz.LZEncoder lz>;

        $r4 = this.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $i1 = $r4.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead>;

        $i2 = 1 + $i1;

        $i3 = virtualinvoke $r3.<org.tukaani.xz.lz.LZEncoder: int getByte(int)>($i2);

        $r5 = this.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $r6 = $r5.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lz.LZEncoder lz>;

        $i4 = virtualinvoke $r6.<org.tukaani.xz.lz.LZEncoder: int getPos()>();

        $r7 = this.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $i5 = $r7.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead>;

        $i6 = $i4 - $i5;

        i = virtualinvoke this.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: int getSubcoderIndex(int,int)>($i3, $i6);

        $r8 = this.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder[] subencoders>;

        $r9 = $r8[i];

        virtualinvoke $r9.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: void encode()>();

        return;
    }

    void encodeInit() throws java.io.IOException
    {
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder this;
        boolean $z0;
        org.tukaani.xz.lzma.LZMAEncoder $r0;
        int $i0;
        java.lang.AssertionError $r1;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder[] $r2;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder $r3;

        this := @this: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder;

        $z0 = <org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r0 = this.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $i0 = $r0.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 >= 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $r2 = this.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder[] subencoders>;

        $r3 = $r2[0];

        virtualinvoke $r3.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: void encode()>();

        return;
    }


