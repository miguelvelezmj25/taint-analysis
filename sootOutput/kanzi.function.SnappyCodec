    public int getMaxEncodedLength(int)
    {
        kanzi.function.SnappyCodec this;
        int srcLen, $i0, $i1, $i2;

        this := @this: kanzi.function.SnappyCodec;

        srcLen := @parameter0: int;

        $i0 = 32 + srcLen;

        $i1 = srcLen / 6;

        $i2 = $i0 + $i1;

        return $i2;
    }

    public boolean forward(kanzi.SliceByteArray, kanzi.SliceByteArray)
    {
        kanzi.function.SnappyCodec this;
        kanzi.SliceByteArray input, output;
        int count, max, srcIdx0, ends1, ends2, h, s0, $i0, $i1, $i2, $i3, $i4, $i6, dstIdx#31, $i7, $i8, $i9, shift#52, tableSize#54, $i10, i#66, srcIdx#75, lit#77, $i11, $i12, t#96, $i13, $i14, $i15, t#125, $i18, $i19, $i20, $i21, $i22;
        byte[] src, $r0, $r1;
        int[] table;
        boolean $z0, $z1, $z2;
        long $l5;
        byte $b16, $b17;

        this := @this: kanzi.function.SnappyCodec;

        input := @parameter0: kanzi.SliceByteArray;

        output := @parameter1: kanzi.SliceByteArray;

        $z0 = staticinvoke <kanzi.SliceByteArray: boolean isValid(kanzi.SliceByteArray)>(input);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label01;

        $z1 = staticinvoke <kanzi.SliceByteArray: boolean isValid(kanzi.SliceByteArray)>(output);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label02;

     label01:
        return 0;

     label02:
        $r0 = input.<kanzi.SliceByteArray: byte[] array>;

        $r1 = output.<kanzi.SliceByteArray: byte[] array>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r0 != $r1 goto label03;

        return 0;

     label03:
        count = input.<kanzi.SliceByteArray: int length>;

        $i0 = output.<kanzi.SliceByteArray: int length>;

        $i1 = output.<kanzi.SliceByteArray: int index>;

        $i2 = $i0 - $i1;

        $i3 = virtualinvoke this.<kanzi.function.SnappyCodec: int getMaxEncodedLength(int)>(count);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i2 >= $i3 goto label04;

        return 0;

     label04:
        src = input.<kanzi.SliceByteArray: byte[] array>;

        $i4 = output.<kanzi.SliceByteArray: int index>;

        $l5 = (long) count;

        $i6 = staticinvoke <kanzi.function.SnappyCodec: int putUvarint(kanzi.SliceByteArray,long)>(output, $l5);

        dstIdx#31 = $i4 + $i6;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count);

        if count > 4 goto label06;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count);

        if count <= 0 goto label05;

        output.<kanzi.SliceByteArray: int index> = dstIdx#31;

        $i7 = staticinvoke <kanzi.function.SnappyCodec: int emitLiteral(kanzi.SliceByteArray,kanzi.SliceByteArray,int)>(input, output, count);

        dstIdx#31 = dstIdx#31 + $i7;

     label05:
        $i8 = input.<kanzi.SliceByteArray: int index>;

        $i9 = $i8 + count;

        input.<kanzi.SliceByteArray: int index> = $i9;

        output.<kanzi.SliceByteArray: int index> = dstIdx#31;

        return 1;

     label06:
        shift#52 = 24;

        tableSize#54 = 256;

        table = this.<kanzi.function.SnappyCodec: int[] buffer>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count);

        if count >= 16384 goto label07;

        $i10 = count;

        goto label08;

     label07:
        $i10 = 16384;

     label08:
        max = $i10;

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(tableSize#54);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(max);

        if tableSize#54 >= max goto label10;

        shift#52 = shift#52 + -1;

        tableSize#54 = tableSize#54 << 1;

        goto label09;

     label10:
        i#66 = 0;

     label11:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#66);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(tableSize#54);

        if i#66 >= tableSize#54 goto label12;

        table[i#66] = -1;

        i#66 = i#66 + 1;

        goto label11;

     label12:
        srcIdx0 = input.<kanzi.SliceByteArray: int index>;

        srcIdx#75 = srcIdx0;

        lit#77 = srcIdx0;

        ends1 = srcIdx0 + count;

        ends2 = ends1 - 3;

     label13:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(srcIdx#75);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(ends2);

        if srcIdx#75 >= ends2 goto label19;

        $i11 = staticinvoke <kanzi.Global: int readInt32(byte[],int)>(src, srcIdx#75);

        $i12 = $i11 * 506832829;

        h = $i12 >>> shift#52;

        t#96 = table[h];

        table[h] = srcIdx#75;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(t#96);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(srcIdx0);

        if t#96 < srcIdx0 goto label14;

        $i13 = srcIdx#75 - t#96;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i13);

        if $i13 >= 32768 goto label14;

        $z2 = staticinvoke <kanzi.function.SnappyCodec: boolean differentInts(byte[],int,int)>(src, srcIdx#75, t#96);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label15;

     label14:
        srcIdx#75 = srcIdx#75 + 1;

        goto label13;

     label15:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lit#77);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(srcIdx#75);

        if lit#77 == srcIdx#75 goto label16;

        input.<kanzi.SliceByteArray: int index> = lit#77;

        output.<kanzi.SliceByteArray: int index> = dstIdx#31;

        $i14 = srcIdx#75 - lit#77;

        $i15 = staticinvoke <kanzi.function.SnappyCodec: int emitLiteral(kanzi.SliceByteArray,kanzi.SliceByteArray,int)>(input, output, $i14);

        dstIdx#31 = dstIdx#31 + $i15;

     label16:
        s0 = srcIdx#75;

        srcIdx#75 = srcIdx#75 + 4;

        t#125 = t#96 + 4;

     label17:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(srcIdx#75);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(ends1);

        if srcIdx#75 >= ends1 goto label18;

        $b16 = src[srcIdx#75];

        $b17 = src[t#125];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b16);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b17);

        if $b16 != $b17 goto label18;

        srcIdx#75 = srcIdx#75 + 1;

        t#125 = t#125 + 1;

        goto label17;

     label18:
        output.<kanzi.SliceByteArray: int index> = dstIdx#31;

        $i18 = srcIdx#75 - t#125;

        $i19 = srcIdx#75 - s0;

        $i20 = staticinvoke <kanzi.function.SnappyCodec: int emitCopy(kanzi.SliceByteArray,int,int)>(output, $i18, $i19);

        dstIdx#31 = dstIdx#31 + $i20;

        lit#77 = srcIdx#75;

        goto label13;

     label19:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lit#77);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(ends1);

        if lit#77 == ends1 goto label20;

        input.<kanzi.SliceByteArray: int index> = lit#77;

        output.<kanzi.SliceByteArray: int index> = dstIdx#31;

        $i21 = ends1 - lit#77;

        $i22 = staticinvoke <kanzi.function.SnappyCodec: int emitLiteral(kanzi.SliceByteArray,kanzi.SliceByteArray,int)>(input, output, $i21);

        dstIdx#31 = dstIdx#31 + $i22;

     label20:
        input.<kanzi.SliceByteArray: int index> = ends1;

        output.<kanzi.SliceByteArray: int index> = dstIdx#31;

        return 1;
    }

    private static int emitLiteral(kanzi.SliceByteArray, kanzi.SliceByteArray, int)
    {
        kanzi.SliceByteArray input, output;
        int len, srcIdx, n, dstIdx#5, $i0, $i1, dstIdx#23, res#27, $i4, $i5, $i7, $i8, $i10, $i11, $i13, $i14, $i16, $i17, $i19, $i20, $i22, $i23, i#104, $i25, $i26, $i28, $i30, $i32, $i33, $i35, $i37, $i38, $i40, $i41, $i43, $i45, $i46, $i48, $i49, $i51, $i52;
        byte[] src, dst;
        byte $b2, i0#31, $b3, $b6, $b9, $b12, $b15, $b18, $b21, $b24, $b27, $b29, $b31, $b34, $b36, $b39, $b42, $b44, $b47, $b50, $b53;

        input := @parameter0: kanzi.SliceByteArray;

        output := @parameter1: kanzi.SliceByteArray;

        len := @parameter2: int;

        srcIdx = input.<kanzi.SliceByteArray: int index>;

        dstIdx#5 = output.<kanzi.SliceByteArray: int index>;

        src = input.<kanzi.SliceByteArray: byte[] array>;

        dst = output.<kanzi.SliceByteArray: byte[] array>;

        n = len - 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n);

        if n >= 60 goto label4;

        $i0 = n << 2;

        $i1 = $i0 | 0;

        $b2 = (byte) $i1;

        dst[dstIdx#5] = $b2;

        dstIdx#23 = dstIdx#5 + 1;

        res#27 = len + 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len);

        if len > 16 goto label8;

        i0#31 = 0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len);

        if len < 8 goto label1;

        $b3 = src[srcIdx];

        dst[dstIdx#23] = $b3;

        $i4 = dstIdx#23 + 1;

        $i5 = srcIdx + 1;

        $b6 = src[$i5];

        dst[$i4] = $b6;

        $i7 = dstIdx#23 + 2;

        $i8 = srcIdx + 2;

        $b9 = src[$i8];

        dst[$i7] = $b9;

        $i10 = dstIdx#23 + 3;

        $i11 = srcIdx + 3;

        $b12 = src[$i11];

        dst[$i10] = $b12;

        $i13 = dstIdx#23 + 4;

        $i14 = srcIdx + 4;

        $b15 = src[$i14];

        dst[$i13] = $b15;

        $i16 = dstIdx#23 + 5;

        $i17 = srcIdx + 5;

        $b18 = src[$i17];

        dst[$i16] = $b18;

        $i19 = dstIdx#23 + 6;

        $i20 = srcIdx + 6;

        $b21 = src[$i20];

        dst[$i19] = $b21;

        $i22 = dstIdx#23 + 7;

        $i23 = srcIdx + 7;

        $b24 = src[$i23];

        dst[$i22] = $b24;

        i0#31 = 8;

     label1:
        i#104 = i0#31;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#104);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len);

        if i#104 >= len goto label3;

        $i25 = dstIdx#23 + i#104;

        $i26 = srcIdx + i#104;

        $b27 = src[$i26];

        dst[$i25] = $b27;

        i#104 = i#104 + 1;

        goto label2;

     label3:
        return res#27;

     label4:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n);

        if n >= 256 goto label5;

        dst[dstIdx#5] = -16;

        $i28 = dstIdx#5 + 1;

        $b29 = (byte) n;

        dst[$i28] = $b29;

        dstIdx#23 = dstIdx#5 + 2;

        res#27 = len + 2;

        goto label8;

     label5:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n);

        if n >= 65536 goto label6;

        dst[dstIdx#5] = -12;

        $i30 = dstIdx#5 + 1;

        $b31 = (byte) n;

        dst[$i30] = $b31;

        $i32 = dstIdx#5 + 2;

        $i33 = n >> 8;

        $b34 = (byte) $i33;

        dst[$i32] = $b34;

        dstIdx#23 = dstIdx#5 + 3;

        res#27 = len + 3;

        goto label8;

     label6:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n);

        if n >= 16777216 goto label7;

        dst[dstIdx#5] = -8;

        $i35 = dstIdx#5 + 1;

        $b36 = (byte) n;

        dst[$i35] = $b36;

        $i37 = dstIdx#5 + 2;

        $i38 = n >> 8;

        $b39 = (byte) $i38;

        dst[$i37] = $b39;

        $i40 = dstIdx#5 + 3;

        $i41 = n >> 16;

        $b42 = (byte) $i41;

        dst[$i40] = $b42;

        dstIdx#23 = dstIdx#5 + 4;

        res#27 = len + 4;

        goto label8;

     label7:
        dst[dstIdx#5] = -4;

        $i43 = dstIdx#5 + 1;

        $b44 = (byte) n;

        dst[$i43] = $b44;

        $i45 = dstIdx#5 + 2;

        $i46 = n >> 8;

        $b47 = (byte) $i46;

        dst[$i45] = $b47;

        $i48 = dstIdx#5 + 3;

        $i49 = n >> 16;

        $b50 = (byte) $i49;

        dst[$i48] = $b50;

        $i51 = dstIdx#5 + 4;

        $i52 = n >> 24;

        $b53 = (byte) $i52;

        dst[$i51] = $b53;

        dstIdx#23 = dstIdx#5 + 5;

        res#27 = len + 5;

     label8:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(src, srcIdx, dst, dstIdx#23, len);

        return res#27;
    }

    private static int emitCopy(kanzi.SliceByteArray, int, int)
    {
        kanzi.SliceByteArray output;
        int offset, len#1, idx#6, $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i12, $i13, $i15, $i16, $i17, $i18;
        byte[] dst;
        byte b1, b2, $b3, $b9, $b14;

        output := @parameter0: kanzi.SliceByteArray;

        offset := @parameter1: int;

        len#1 := @parameter2: int;

        dst = output.<kanzi.SliceByteArray: byte[] array>;

        idx#6 = output.<kanzi.SliceByteArray: int index>;

        b1 = (byte) offset;

        $i0 = offset >> 8;

        b2 = (byte) $i0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len#1);

        if len#1 < 64 goto label2;

        dst[idx#6] = -2;

        $i1 = idx#6 + 1;

        dst[$i1] = b1;

        $i2 = idx#6 + 2;

        dst[$i2] = b2;

        idx#6 = idx#6 + 3;

        len#1 = len#1 + -64;

        goto label1;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len#1);

        if len#1 <= 0 goto label4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(offset);

        if offset >= 2048 goto label3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len#1);

        if len#1 >= 12 goto label3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len#1);

        if len#1 < 4 goto label3;

        $b3 = b2 & 7;

        $i4 = $b3 << 5;

        $i5 = len#1 - 4;

        $i6 = $i5 << 2;

        $i7 = $i4 | $i6;

        $i8 = $i7 | 1;

        $b9 = (byte) $i8;

        dst[idx#6] = $b9;

        $i10 = idx#6 + 1;

        dst[$i10] = b1;

        idx#6 = idx#6 + 2;

        goto label4;

     label3:
        $i11 = len#1 - 1;

        $i12 = $i11 << 2;

        $i13 = $i12 | 2;

        $b14 = (byte) $i13;

        dst[idx#6] = $b14;

        $i15 = idx#6 + 1;

        dst[$i15] = b1;

        $i16 = idx#6 + 2;

        dst[$i16] = b2;

        idx#6 = idx#6 + 3;

     label4:
        $i17 = output.<kanzi.SliceByteArray: int index>;

        $i18 = idx#6 - $i17;

        return $i18;
    }

    private static boolean differentInts(byte[], int, int)
    {
        byte[] array;
        int srcIdx, dstIdx, $i2, $i4, $i6, $i8, $i10, $i12;
        byte $b0, $b1, $b3, $b5, $b7, $b9, $b11, $b13;
        boolean $z0;

        array := @parameter0: byte[];

        srcIdx := @parameter1: int;

        dstIdx := @parameter2: int;

        $b0 = array[srcIdx];

        $b1 = array[dstIdx];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b0 != $b1 goto label1;

        $i2 = srcIdx + 1;

        $b3 = array[$i2];

        $i4 = dstIdx + 1;

        $b5 = array[$i4];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b5);

        if $b3 != $b5 goto label1;

        $i6 = srcIdx + 2;

        $b7 = array[$i6];

        $i8 = dstIdx + 2;

        $b9 = array[$i8];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b9);

        if $b7 != $b9 goto label1;

        $i10 = srcIdx + 3;

        $b11 = array[$i10];

        $i12 = dstIdx + 3;

        $b13 = array[$i12];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b11);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b13);

        if $b11 == $b13 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private static int putUvarint(kanzi.SliceByteArray, long)
    {
        kanzi.SliceByteArray iba;
        byte[] array;
        long x#1, $l2;
        int idx#4, $i1, $i3, idx#21, $i5, $i7, $i8;
        byte $b0, $b4, $b6;

        iba := @parameter0: kanzi.SliceByteArray;

        x#1 := @parameter1: long;

        idx#4 = iba.<kanzi.SliceByteArray: int index>;

        array = iba.<kanzi.SliceByteArray: byte[] array>;

     label1:
        $b0 = x#1 cmp 128L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 < 0 goto label2;

        $i1 = idx#4;

        idx#4 = idx#4 + 1;

        $l2 = x#1 | 128L;

        $i3 = (int) $l2;

        $b4 = (byte) $i3;

        array[$i1] = $b4;

        x#1 = x#1 >> 7;

        goto label1;

     label2:
        idx#21 = idx#4 + 1;

        $i5 = (int) x#1;

        $b6 = (byte) $i5;

        array[idx#4] = $b6;

        $i7 = iba.<kanzi.SliceByteArray: int index>;

        $i8 = idx#21 - $i7;

        return $i8;
    }

    public void <init>()
    {
        kanzi.function.SnappyCodec this;
        int[] $r0;

        this := @this: kanzi.function.SnappyCodec;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = newarray (int)[16384];

        this.<kanzi.function.SnappyCodec: int[] buffer> = $r0;

        return;
    }


