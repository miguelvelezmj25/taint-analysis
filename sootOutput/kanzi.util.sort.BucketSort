    public boolean sort(int[], int, int)
    {
        kanzi.util.sort.BucketSort this;
        int[] input, c;
        int blkptr, len, len8, end8, length, val, $i0, $i1, i#23, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, i#113, $i33, $i34, $i35, $i36, i#128, j#130, val8#143, k#145, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44;

        this := @this: kanzi.util.sort.BucketSort;

        input := @parameter0: int[];

        blkptr := @parameter1: int;

        len := @parameter2: int;

        if blkptr < 0 goto label01;

        if len <= 0 goto label01;

        $i0 = blkptr + len;

        $i1 = lengthof input;

        if $i0 <= $i1 goto label02;

     label01:
        return 0;

     label02:
        if len != 1 goto label03;

        return 1;

     label03:
        len8 = len & -8;

        end8 = blkptr + len8;

        c = this.<kanzi.util.sort.BucketSort: int[] count>;

        length = lengthof c;

        i#23 = blkptr;

     label04:
        if i#23 >= end8 goto label05;

        $i2 = input[i#23];

        $i3 = c[$i2];

        $i4 = $i3 + 1;

        c[$i2] = $i4;

        $i5 = i#23 + 1;

        $i6 = input[$i5];

        $i7 = c[$i6];

        $i8 = $i7 + 1;

        c[$i6] = $i8;

        $i9 = i#23 + 2;

        $i10 = input[$i9];

        $i11 = c[$i10];

        $i12 = $i11 + 1;

        c[$i10] = $i12;

        $i13 = i#23 + 3;

        $i14 = input[$i13];

        $i15 = c[$i14];

        $i16 = $i15 + 1;

        c[$i14] = $i16;

        $i17 = i#23 + 4;

        $i18 = input[$i17];

        $i19 = c[$i18];

        $i20 = $i19 + 1;

        c[$i18] = $i20;

        $i21 = i#23 + 5;

        $i22 = input[$i21];

        $i23 = c[$i22];

        $i24 = $i23 + 1;

        c[$i22] = $i24;

        $i25 = i#23 + 6;

        $i26 = input[$i25];

        $i27 = c[$i26];

        $i28 = $i27 + 1;

        c[$i26] = $i28;

        $i29 = i#23 + 7;

        $i30 = input[$i29];

        $i31 = c[$i30];

        $i32 = $i31 + 1;

        c[$i30] = $i32;

        i#23 = i#23 + 8;

        goto label04;

     label05:
        i#113 = len8;

     label06:
        if i#113 >= len goto label07;

        $i33 = blkptr + i#113;

        $i34 = input[$i33];

        $i35 = c[$i34];

        $i36 = $i35 + 1;

        c[$i34] = $i36;

        i#113 = i#113 + 1;

        goto label06;

     label07:
        i#128 = 0;

        j#130 = blkptr;

     label08:
        if i#128 >= length goto label13;

        val = c[i#128];

        if val != 0 goto label09;

        goto label12;

     label09:
        c[i#128] = 0;

        val8#143 = val & -8;

        k#145 = val;

     label10:
        if k#145 <= val8#143 goto label11;

        $i37 = j#130;

        j#130 = j#130 + 1;

        input[$i37] = i#128;

        k#145 = k#145 + -1;

        goto label10;

     label11:
        if val8#143 <= 0 goto label12;

        input[j#130] = i#128;

        $i38 = j#130 + 1;

        input[$i38] = i#128;

        $i39 = j#130 + 2;

        input[$i39] = i#128;

        $i40 = j#130 + 3;

        input[$i40] = i#128;

        $i41 = j#130 + 4;

        input[$i41] = i#128;

        $i42 = j#130 + 5;

        input[$i42] = i#128;

        $i43 = j#130 + 6;

        input[$i43] = i#128;

        $i44 = j#130 + 7;

        input[$i44] = i#128;

        j#130 = j#130 + 8;

        val8#143 = val8#143 + -8;

        goto label11;

     label12:
        i#128 = i#128 + 1;

        goto label08;

     label13:
        return 1;
    }


