    public void <init>()
    {
        weka.classifiers.evaluation.ThresholdCurve this;

        this := @this: weka.classifiers.evaluation.ThresholdCurve;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public weka.core.Instances getCurve(java.util.ArrayList, int)
    {
        weka.classifiers.evaluation.ThresholdCurve this;
        java.util.ArrayList predictions;
        int classIndex, $i0, $i1, i#20, $i2, i#87, $i6, $i7, $i9, $i10, $i11, $i12, $i18, $i19, $i20;
        double[] probs, $r2;
        weka.classifiers.evaluation.NominalPrediction pred, pred, $r1;
        weka.core.Instances insts;
        int[] sorted;
        java.lang.Object $r0, $r3, $r20;
        double totPos#12, totNeg#14, $d0, $d1, $d2, $d3, $d4, $d5, $d6, threshold#81, cumulativePos#83, cumulativeNeg#85, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, threshold#209;
        byte $b3, $b4, $b5, $b8, $b13, $b14, $b15, $b16, $b17;
        java.io.PrintStream $r4, $r11, $r21, $r28;
        java.lang.StringBuilder $r5, $r8, $r9, $r12, $r15, $r16, $r22, $r25, $r26, $r29, $r32, $r33;
        java.lang.Class $r6, $r13, $r23, $r30;
        java.lang.String $r7, $r10, $r14, $r17, $r24, $r27, $r31, $r34;
        weka.classifiers.evaluation.TwoClassStats $r18, tc#79, $r35, tc#198;
        weka.core.Instance $r19, $r36;

        this := @this: weka.classifiers.evaluation.ThresholdCurve;

        predictions := @parameter0: java.util.ArrayList;

        classIndex := @parameter1: int;

        $i0 = virtualinvoke predictions.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 == 0 goto label01;

        $r0 = virtualinvoke predictions.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r1 = (weka.classifiers.evaluation.NominalPrediction) $r0;

        $r2 = virtualinvoke $r1.<weka.classifiers.evaluation.NominalPrediction: double[] distribution()>();

        $i1 = lengthof $r2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classIndex);

        if $i1 > classIndex goto label02;

     label01:
        return null;

     label02:
        totPos#12 = 0.0;

        totNeg#14 = 0.0;

        probs = specialinvoke this.<weka.classifiers.evaluation.ThresholdCurve: double[] getProbabilities(java.util.ArrayList,int)>(predictions, classIndex);

        i#20 = 0;

     label03:
        $i2 = lengthof probs;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#20);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#20 >= $i2 goto label08;

        $r3 = virtualinvoke predictions.<java.util.ArrayList: java.lang.Object get(int)>(i#20);

        pred = (weka.classifiers.evaluation.NominalPrediction) $r3;

        $d0 = virtualinvoke pred.<weka.classifiers.evaluation.NominalPrediction: double actual()>();

        $d1 = <weka.classifiers.evaluation.Prediction: double MISSING_VALUE>;

        $b3 = $d0 cmpl $d1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b3);

        if $b3 != 0 goto label04;

        $r4 = <java.lang.System: java.io.PrintStream err>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Skipping prediction with missing class value");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r10);

        goto label07;

     label04:
        $d2 = virtualinvoke pred.<weka.classifiers.evaluation.NominalPrediction: double weight()>();

        $b4 = $d2 cmpg 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b4);

        if $b4 >= 0 goto label05;

        $r11 = <java.lang.System: java.io.PrintStream err>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Skipping prediction with negative weight");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r17);

        goto label07;

     label05:
        $d3 = virtualinvoke pred.<weka.classifiers.evaluation.NominalPrediction: double actual()>();

        $d4 = (double) classIndex;

        $b5 = $d3 cmpl $d4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b5);

        if $b5 != 0 goto label06;

        $d5 = virtualinvoke pred.<weka.classifiers.evaluation.NominalPrediction: double weight()>();

        totPos#12 = totPos#12 + $d5;

        goto label07;

     label06:
        $d6 = virtualinvoke pred.<weka.classifiers.evaluation.NominalPrediction: double weight()>();

        totNeg#14 = totNeg#14 + $d6;

     label07:
        i#20 = i#20 + 1;

        goto label03;

     label08:
        insts = specialinvoke this.<weka.classifiers.evaluation.ThresholdCurve: weka.core.Instances makeHeader()>();

        sorted = staticinvoke <weka.core.Utils: int[] sort(double[])>(probs);

        $r18 = new weka.classifiers.evaluation.TwoClassStats;

        specialinvoke $r18.<weka.classifiers.evaluation.TwoClassStats: void <init>(double,double,double,double)>(totPos#12, totNeg#14, 0.0, 0.0);

        tc#79 = $r18;

        threshold#81 = 0.0;

        cumulativePos#83 = 0.0;

        cumulativeNeg#85 = 0.0;

        i#87 = 0;

     label09:
        $i6 = lengthof sorted;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#87);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if i#87 >= $i6 goto label16;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#87);

        if i#87 == 0 goto label10;

        $i7 = sorted[i#87];

        $d7 = probs[$i7];

        $b8 = $d7 cmpl threshold#81;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b8);

        if $b8 <= 0 goto label11;

     label10:
        $d8 = virtualinvoke tc#79.<weka.classifiers.evaluation.TwoClassStats: double getTruePositive()>();

        $d9 = $d8 - cumulativePos#83;

        virtualinvoke tc#79.<weka.classifiers.evaluation.TwoClassStats: void setTruePositive(double)>($d9);

        $d10 = virtualinvoke tc#79.<weka.classifiers.evaluation.TwoClassStats: double getFalseNegative()>();

        $d11 = $d10 + cumulativePos#83;

        virtualinvoke tc#79.<weka.classifiers.evaluation.TwoClassStats: void setFalseNegative(double)>($d11);

        $d12 = virtualinvoke tc#79.<weka.classifiers.evaluation.TwoClassStats: double getFalsePositive()>();

        $d13 = $d12 - cumulativeNeg#85;

        virtualinvoke tc#79.<weka.classifiers.evaluation.TwoClassStats: void setFalsePositive(double)>($d13);

        $d14 = virtualinvoke tc#79.<weka.classifiers.evaluation.TwoClassStats: double getTrueNegative()>();

        $d15 = $d14 + cumulativeNeg#85;

        virtualinvoke tc#79.<weka.classifiers.evaluation.TwoClassStats: void setTrueNegative(double)>($d15);

        $i9 = sorted[i#87];

        threshold#81 = probs[$i9];

        $r19 = specialinvoke this.<weka.classifiers.evaluation.ThresholdCurve: weka.core.Instance makeInstance(weka.classifiers.evaluation.TwoClassStats,double)>(tc#79, threshold#81);

        virtualinvoke insts.<weka.core.Instances: boolean add(weka.core.Instance)>($r19);

        cumulativePos#83 = 0.0;

        cumulativeNeg#85 = 0.0;

        $i10 = lengthof sorted;

        $i11 = $i10 - 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#87);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i11);

        if i#87 != $i11 goto label11;

        goto label16;

     label11:
        $i12 = sorted[i#87];

        $r20 = virtualinvoke predictions.<java.util.ArrayList: java.lang.Object get(int)>($i12);

        pred = (weka.classifiers.evaluation.NominalPrediction) $r20;

        $d16 = virtualinvoke pred.<weka.classifiers.evaluation.NominalPrediction: double actual()>();

        $d17 = <weka.classifiers.evaluation.Prediction: double MISSING_VALUE>;

        $b13 = $d16 cmpl $d17;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b13);

        if $b13 != 0 goto label12;

        $r21 = <java.lang.System: java.io.PrintStream err>;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $r24 = virtualinvoke $r23.<java.lang.Class: java.lang.String getName()>();

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Skipping prediction with missing class value");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>($r27);

        goto label15;

     label12:
        $d18 = virtualinvoke pred.<weka.classifiers.evaluation.NominalPrediction: double weight()>();

        $b14 = $d18 cmpg 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b14);

        if $b14 >= 0 goto label13;

        $r28 = <java.lang.System: java.io.PrintStream err>;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $r31 = virtualinvoke $r30.<java.lang.Class: java.lang.String getName()>();

        $r32 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Skipping prediction with negative weight");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r28.<java.io.PrintStream: void println(java.lang.String)>($r34);

        goto label15;

     label13:
        $d19 = virtualinvoke pred.<weka.classifiers.evaluation.NominalPrediction: double actual()>();

        $d20 = (double) classIndex;

        $b15 = $d19 cmpl $d20;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b15);

        if $b15 != 0 goto label14;

        $d21 = virtualinvoke pred.<weka.classifiers.evaluation.NominalPrediction: double weight()>();

        cumulativePos#83 = cumulativePos#83 + $d21;

        goto label15;

     label14:
        $d22 = virtualinvoke pred.<weka.classifiers.evaluation.NominalPrediction: double weight()>();

        cumulativeNeg#85 = cumulativeNeg#85 + $d22;

     label15:
        i#87 = i#87 + 1;

        goto label09;

     label16:
        $d23 = virtualinvoke tc#79.<weka.classifiers.evaluation.TwoClassStats: double getFalseNegative()>();

        $b16 = $d23 cmpl totPos#12;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b16);

        if $b16 != 0 goto label17;

        $d24 = virtualinvoke tc#79.<weka.classifiers.evaluation.TwoClassStats: double getTrueNegative()>();

        $b17 = $d24 cmpl totNeg#14;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b17);

        if $b17 == 0 goto label18;

     label17:
        $r35 = new weka.classifiers.evaluation.TwoClassStats;

        specialinvoke $r35.<weka.classifiers.evaluation.TwoClassStats: void <init>(double,double,double,double)>(0.0, 0.0, totNeg#14, totPos#12);

        tc#198 = $r35;

        $i18 = lengthof sorted;

        $i19 = $i18 - 1;

        $i20 = sorted[$i19];

        $d25 = probs[$i20];

        threshold#209 = $d25 + 1.0E-5;

        $r36 = specialinvoke this.<weka.classifiers.evaluation.ThresholdCurve: weka.core.Instance makeInstance(weka.classifiers.evaluation.TwoClassStats,double)>(tc#198, threshold#209);

        virtualinvoke insts.<weka.core.Instances: boolean add(weka.core.Instance)>($r36);

     label18:
        return insts;
    }

    private double[] getProbabilities(java.util.ArrayList, int)
    {
        weka.classifiers.evaluation.ThresholdCurve this;
        java.util.ArrayList predictions;
        int classIndex, $i0, i#5, $i1;
        double[] probs, $r1;
        weka.classifiers.evaluation.NominalPrediction pred;
        java.lang.Object $r0;
        double $d0;

        this := @this: weka.classifiers.evaluation.ThresholdCurve;

        predictions := @parameter0: java.util.ArrayList;

        classIndex := @parameter1: int;

        $i0 = virtualinvoke predictions.<java.util.ArrayList: int size()>();

        probs = newarray (double)[$i0];

        i#5 = 0;

     label1:
        $i1 = lengthof probs;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#5 >= $i1 goto label2;

        $r0 = virtualinvoke predictions.<java.util.ArrayList: java.lang.Object get(int)>(i#5);

        pred = (weka.classifiers.evaluation.NominalPrediction) $r0;

        $r1 = virtualinvoke pred.<weka.classifiers.evaluation.NominalPrediction: double[] distribution()>();

        $d0 = $r1[classIndex];

        probs[i#5] = $d0;

        i#5 = i#5 + 1;

        goto label1;

     label2:
        return probs;
    }

    private weka.core.Instances makeHeader()
    {
        weka.classifiers.evaluation.ThresholdCurve this;
        java.util.ArrayList fv, $r0;
        weka.core.Attribute $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        weka.core.Instances $r14;

        this := @this: weka.classifiers.evaluation.ThresholdCurve;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        fv = $r0;

        $r1 = new weka.core.Attribute;

        specialinvoke $r1.<weka.core.Attribute: void <init>(java.lang.String)>("True Positives");

        virtualinvoke fv.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        $r2 = new weka.core.Attribute;

        specialinvoke $r2.<weka.core.Attribute: void <init>(java.lang.String)>("False Negatives");

        virtualinvoke fv.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        $r3 = new weka.core.Attribute;

        specialinvoke $r3.<weka.core.Attribute: void <init>(java.lang.String)>("False Positives");

        virtualinvoke fv.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $r4 = new weka.core.Attribute;

        specialinvoke $r4.<weka.core.Attribute: void <init>(java.lang.String)>("True Negatives");

        virtualinvoke fv.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $r5 = new weka.core.Attribute;

        specialinvoke $r5.<weka.core.Attribute: void <init>(java.lang.String)>("False Positive Rate");

        virtualinvoke fv.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        $r6 = new weka.core.Attribute;

        specialinvoke $r6.<weka.core.Attribute: void <init>(java.lang.String)>("True Positive Rate");

        virtualinvoke fv.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        $r7 = new weka.core.Attribute;

        specialinvoke $r7.<weka.core.Attribute: void <init>(java.lang.String)>("Precision");

        virtualinvoke fv.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        $r8 = new weka.core.Attribute;

        specialinvoke $r8.<weka.core.Attribute: void <init>(java.lang.String)>("Recall");

        virtualinvoke fv.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

        $r9 = new weka.core.Attribute;

        specialinvoke $r9.<weka.core.Attribute: void <init>(java.lang.String)>("Fallout");

        virtualinvoke fv.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

        $r10 = new weka.core.Attribute;

        specialinvoke $r10.<weka.core.Attribute: void <init>(java.lang.String)>("FMeasure");

        virtualinvoke fv.<java.util.ArrayList: boolean add(java.lang.Object)>($r10);

        $r11 = new weka.core.Attribute;

        specialinvoke $r11.<weka.core.Attribute: void <init>(java.lang.String)>("Sample Size");

        virtualinvoke fv.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

        $r12 = new weka.core.Attribute;

        specialinvoke $r12.<weka.core.Attribute: void <init>(java.lang.String)>("Lift");

        virtualinvoke fv.<java.util.ArrayList: boolean add(java.lang.Object)>($r12);

        $r13 = new weka.core.Attribute;

        specialinvoke $r13.<weka.core.Attribute: void <init>(java.lang.String)>("Threshold");

        virtualinvoke fv.<java.util.ArrayList: boolean add(java.lang.Object)>($r13);

        $r14 = new weka.core.Instances;

        specialinvoke $r14.<weka.core.Instances: void <init>(java.lang.String,java.util.ArrayList,int)>("ThresholdCurve", fv, 100);

        return $r14;
    }

    private weka.core.Instance makeInstance(weka.classifiers.evaluation.TwoClassStats, double)
    {
        weka.classifiers.evaluation.ThresholdCurve this;
        weka.classifiers.evaluation.TwoClassStats tc;
        double prob, ss, expectedByChance, $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25;
        double[] vals;
        byte count#2, $b0;
        int count#7, count#12, count#17, count#22, count#27, count#32, count#37, count#42, count#47, count#52, count#74, count#88, count#98;
        weka.core.DenseInstance $r0;

        this := @this: weka.classifiers.evaluation.ThresholdCurve;

        tc := @parameter0: weka.classifiers.evaluation.TwoClassStats;

        prob := @parameter1: double;

        count#2 = 0;

        vals = newarray (double)[13];

        count#7 = count#2 + 1;

        $d0 = virtualinvoke tc.<weka.classifiers.evaluation.TwoClassStats: double getTruePositive()>();

        vals[count#2] = $d0;

        count#12 = count#7 + 1;

        $d1 = virtualinvoke tc.<weka.classifiers.evaluation.TwoClassStats: double getFalseNegative()>();

        vals[count#7] = $d1;

        count#17 = count#12 + 1;

        $d2 = virtualinvoke tc.<weka.classifiers.evaluation.TwoClassStats: double getFalsePositive()>();

        vals[count#12] = $d2;

        count#22 = count#17 + 1;

        $d3 = virtualinvoke tc.<weka.classifiers.evaluation.TwoClassStats: double getTrueNegative()>();

        vals[count#17] = $d3;

        count#27 = count#22 + 1;

        $d4 = virtualinvoke tc.<weka.classifiers.evaluation.TwoClassStats: double getFalsePositiveRate()>();

        vals[count#22] = $d4;

        count#32 = count#27 + 1;

        $d5 = virtualinvoke tc.<weka.classifiers.evaluation.TwoClassStats: double getTruePositiveRate()>();

        vals[count#27] = $d5;

        count#37 = count#32 + 1;

        $d6 = virtualinvoke tc.<weka.classifiers.evaluation.TwoClassStats: double getPrecision()>();

        vals[count#32] = $d6;

        count#42 = count#37 + 1;

        $d7 = virtualinvoke tc.<weka.classifiers.evaluation.TwoClassStats: double getRecall()>();

        vals[count#37] = $d7;

        count#47 = count#42 + 1;

        $d8 = virtualinvoke tc.<weka.classifiers.evaluation.TwoClassStats: double getFallout()>();

        vals[count#42] = $d8;

        count#52 = count#47 + 1;

        $d9 = virtualinvoke tc.<weka.classifiers.evaluation.TwoClassStats: double getFMeasure()>();

        vals[count#47] = $d9;

        $d10 = virtualinvoke tc.<weka.classifiers.evaluation.TwoClassStats: double getTruePositive()>();

        $d11 = virtualinvoke tc.<weka.classifiers.evaluation.TwoClassStats: double getFalsePositive()>();

        $d12 = $d10 + $d11;

        $d13 = virtualinvoke tc.<weka.classifiers.evaluation.TwoClassStats: double getTruePositive()>();

        $d14 = virtualinvoke tc.<weka.classifiers.evaluation.TwoClassStats: double getFalsePositive()>();

        $d15 = $d13 + $d14;

        $d16 = virtualinvoke tc.<weka.classifiers.evaluation.TwoClassStats: double getTrueNegative()>();

        $d17 = $d15 + $d16;

        $d18 = virtualinvoke tc.<weka.classifiers.evaluation.TwoClassStats: double getFalseNegative()>();

        $d19 = $d17 + $d18;

        ss = $d12 / $d19;

        count#74 = count#52 + 1;

        vals[count#52] = ss;

        $d20 = virtualinvoke tc.<weka.classifiers.evaluation.TwoClassStats: double getTruePositive()>();

        $d21 = virtualinvoke tc.<weka.classifiers.evaluation.TwoClassStats: double getFalseNegative()>();

        $d22 = $d20 + $d21;

        expectedByChance = ss * $d22;

        $b0 = expectedByChance cmpg 1.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 >= 0 goto label1;

        count#88 = count#74 + 1;

        $d23 = staticinvoke <weka.core.Utils: double missingValue()>();

        vals[count#74] = $d23;

        goto label2;

     label1:
        count#88 = count#74 + 1;

        $d24 = virtualinvoke tc.<weka.classifiers.evaluation.TwoClassStats: double getTruePositive()>();

        $d25 = $d24 / expectedByChance;

        vals[count#74] = $d25;

     label2:
        count#98 = count#88 + 1;

        vals[count#88] = prob;

        $r0 = new weka.core.DenseInstance;

        specialinvoke $r0.<weka.core.DenseInstance: void <init>(double,double[])>(1.0, vals);

        return $r0;
    }

    public static double getROCArea(weka.core.Instances)
    {
        weka.core.Instances tcurve;
        int n, tpInd, fpInd, i#34, $i0, $i1, $i2, $i3, $i4;
        double[] tpVals, fpVals;
        double totalPos, totalNeg, area#24, cumNeg#26, $d0, $d1, cip#50, $d2, $d3, cin#60, $d4, $d5, $d6, $d7, area#87;
        java.lang.String $r0, $r1;
        boolean $z0;
        weka.core.Attribute $r2, $r3;

        tcurve := @parameter0: weka.core.Instances;

        n = virtualinvoke tcurve.<weka.core.Instances: int numInstances()>();

        $r0 = "ThresholdCurve";

        $r1 = virtualinvoke tcurve.<weka.core.Instances: java.lang.String relationName()>();

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n);

        if n != 0 goto label2;

     label1:
        return #NaN;

     label2:
        $r2 = virtualinvoke tcurve.<weka.core.Instances: weka.core.Attribute attribute(java.lang.String)>("True Positives");

        tpInd = virtualinvoke $r2.<weka.core.Attribute: int index()>();

        $r3 = virtualinvoke tcurve.<weka.core.Instances: weka.core.Attribute attribute(java.lang.String)>("False Positives");

        fpInd = virtualinvoke $r3.<weka.core.Attribute: int index()>();

        tpVals = virtualinvoke tcurve.<weka.core.Instances: double[] attributeToDoubleArray(int)>(tpInd);

        fpVals = virtualinvoke tcurve.<weka.core.Instances: double[] attributeToDoubleArray(int)>(fpInd);

        area#24 = 0.0;

        cumNeg#26 = 0.0;

        totalPos = tpVals[0];

        totalNeg = fpVals[0];

        i#34 = 0;

     label3:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#34);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n);

        if i#34 >= n goto label6;

        $i0 = n - 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#34);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#34 >= $i0 goto label4;

        $d0 = tpVals[i#34];

        $i1 = i#34 + 1;

        $d1 = tpVals[$i1];

        cip#50 = $d0 - $d1;

        $d2 = fpVals[i#34];

        $i2 = i#34 + 1;

        $d3 = fpVals[$i2];

        cin#60 = $d2 - $d3;

        goto label5;

     label4:
        $i3 = n - 1;

        cip#50 = tpVals[$i3];

        $i4 = n - 1;

        cin#60 = fpVals[$i4];

     label5:
        $d4 = 0.5 * cin#60;

        $d5 = cumNeg#26 + $d4;

        $d6 = cip#50 * $d5;

        area#24 = area#24 + $d6;

        cumNeg#26 = cumNeg#26 + cin#60;

        i#34 = i#34 + 1;

        goto label3;

     label6:
        $d7 = totalNeg * totalPos;

        area#87 = area#24 / $d7;

        return area#87;
    }

    public static double getPRCArea(weka.core.Instances)
    {
        weka.core.Instances tcurve;
        int n, pInd, rInd, $i0, i#34;
        double[] pVals, rVals;
        double recallDelta, area#24, xlast#30, $d0, $d1, $d2, $d3;
        java.lang.String $r0, $r1;
        boolean $z0;
        weka.core.Attribute $r2, $r3;
        byte $b1;

        tcurve := @parameter0: weka.core.Instances;

        n = virtualinvoke tcurve.<weka.core.Instances: int numInstances()>();

        $r0 = "ThresholdCurve";

        $r1 = virtualinvoke tcurve.<weka.core.Instances: java.lang.String relationName()>();

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n);

        if n != 0 goto label2;

     label1:
        return #NaN;

     label2:
        $r2 = virtualinvoke tcurve.<weka.core.Instances: weka.core.Attribute attribute(java.lang.String)>("Precision");

        pInd = virtualinvoke $r2.<weka.core.Attribute: int index()>();

        $r3 = virtualinvoke tcurve.<weka.core.Instances: weka.core.Attribute attribute(java.lang.String)>("Recall");

        rInd = virtualinvoke $r3.<weka.core.Attribute: int index()>();

        pVals = virtualinvoke tcurve.<weka.core.Instances: double[] attributeToDoubleArray(int)>(pInd);

        rVals = virtualinvoke tcurve.<weka.core.Instances: double[] attributeToDoubleArray(int)>(rInd);

        area#24 = 0.0;

        $i0 = n - 1;

        xlast#30 = rVals[$i0];

        i#34 = n - 2;

     label3:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#34);

        if i#34 < 0 goto label4;

        $d0 = rVals[i#34];

        recallDelta = $d0 - xlast#30;

        $d1 = pVals[i#34];

        $d2 = $d1 * recallDelta;

        area#24 = area#24 + $d2;

        xlast#30 = rVals[i#34];

        i#34 = i#34 + -1;

        goto label3;

     label4:
        $b1 = area#24 cmpl 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 != 0 goto label5;

        $d3 = staticinvoke <weka.core.Utils: double missingValue()>();

        return $d3;

     label5:
        return area#24;
    }


