    public void <init>(java.io.OutputStream, int)
    {
        kanzi.bitstream.DefaultOutputBitStream this;
        java.io.OutputStream os;
        int bufferSize, $i0;
        java.lang.NullPointerException $r0;
        java.lang.IllegalArgumentException $r1, $r2, $r3;
        byte[] $r4;

        this := @this: kanzi.bitstream.DefaultOutputBitStream;

        os := @parameter0: java.io.OutputStream;

        bufferSize := @parameter1: int;

        specialinvoke this.<java.lang.Object: void <init>()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(os);

        if os != null goto label1;

        $r0 = new java.lang.NullPointerException;

        specialinvoke $r0.<java.lang.NullPointerException: void <init>(java.lang.String)>("Invalid null output stream parameter");

        throw $r0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(bufferSize);

        if bufferSize >= 1024 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid buffer size (must be at least 1024)");

        throw $r1;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(bufferSize);

        if bufferSize <= 268435456 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid buffer size (must be at most 268435456)");

        throw $r2;

     label3:
        $i0 = bufferSize & 7;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 == 0 goto label4;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid buffer size (must be a multiple of 8)");

        throw $r3;

     label4:
        this.<kanzi.bitstream.DefaultOutputBitStream: java.io.OutputStream os> = os;

        $r4 = newarray (byte)[bufferSize];

        this.<kanzi.bitstream.DefaultOutputBitStream: byte[] buffer> = $r4;

        this.<kanzi.bitstream.DefaultOutputBitStream: int bitIndex> = 63;

        return;
    }

    public long written()
    {
        kanzi.bitstream.DefaultOutputBitStream this;
        long $l0, $l3, $l4, $l7, $l8;
        int $i1, $i2, $i5, $i6;

        this := @this: kanzi.bitstream.DefaultOutputBitStream;

        $l0 = this.<kanzi.bitstream.DefaultOutputBitStream: long written>;

        $i1 = this.<kanzi.bitstream.DefaultOutputBitStream: int position>;

        $i2 = $i1 << 3;

        $l3 = (long) $i2;

        $l4 = $l0 + $l3;

        $i5 = this.<kanzi.bitstream.DefaultOutputBitStream: int bitIndex>;

        $i6 = 63 - $i5;

        $l7 = (long) $i6;

        $l8 = $l4 + $l7;

        return $l8;
    }

    public int writeBits(long, int)
    {
        kanzi.bitstream.DefaultOutputBitStream this;
        int count, remaining, $i0, $i2, $i3, $i7, $i8, $i10, $i14, $i15;
        long value#1, $l1, value#23, $l4, $l5, $l6, $l9, $l11, $l12, $l13;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        java.lang.String $r5;

        this := @this: kanzi.bitstream.DefaultOutputBitStream;

        value#1 := @parameter0: long;

        count := @parameter1: int;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count);

        if count != 0 goto label1;

        return 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count);

        if count <= 64 goto label2;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid length: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(count);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (must be in [1..64])");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r0;

     label2:
        $i0 = neg count;

        $l1 = -1L >>> $i0;

        value#23 = value#1 & $l1;

        $i2 = this.<kanzi.bitstream.DefaultOutputBitStream: int bitIndex>;

        $i3 = $i2 + 1;

        remaining = $i3 - count;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(remaining);

        if remaining <= 0 goto label3;

        $l4 = this.<kanzi.bitstream.DefaultOutputBitStream: long current>;

        $l5 = value#23 << remaining;

        $l6 = $l4 | $l5;

        this.<kanzi.bitstream.DefaultOutputBitStream: long current> = $l6;

        $i7 = this.<kanzi.bitstream.DefaultOutputBitStream: int bitIndex>;

        $i8 = $i7 - count;

        this.<kanzi.bitstream.DefaultOutputBitStream: int bitIndex> = $i8;

        goto label4;

     label3:
        $l9 = this.<kanzi.bitstream.DefaultOutputBitStream: long current>;

        $i10 = neg remaining;

        $l11 = value#23 >>> $i10;

        $l12 = $l9 | $l11;

        this.<kanzi.bitstream.DefaultOutputBitStream: long current> = $l12;

        specialinvoke this.<kanzi.bitstream.DefaultOutputBitStream: void pushCurrent()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(remaining);

        if remaining == 0 goto label4;

        $l13 = value#23 << remaining;

        this.<kanzi.bitstream.DefaultOutputBitStream: long current> = $l13;

        $i14 = this.<kanzi.bitstream.DefaultOutputBitStream: int bitIndex>;

        $i15 = $i14 + remaining;

        this.<kanzi.bitstream.DefaultOutputBitStream: int bitIndex> = $i15;

     label4:
        return count;
    }

    private void pushCurrent()
    {
        kanzi.bitstream.DefaultOutputBitStream this;
        byte[] $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r9;
        int $i0, $i3, $i5, $i6, $i9, $i11, $i12, $i15, $i17, $i18, $i21, $i23, $i24, $i27, $i29, $i30, $i33, $i35, $i36, $i39, $i41, $i42, $i44, $i46, $i47, $i48, $i49;
        long $l1, $l2, $l7, $l8, $l13, $l14, $l19, $l20, $l25, $l26, $l31, $l32, $l37, $l38, $l43;
        byte $b4, $b10, $b16, $b22, $b28, $b34, $b40, $b45;

        this := @this: kanzi.bitstream.DefaultOutputBitStream;

        $r0 = this.<kanzi.bitstream.DefaultOutputBitStream: byte[] buffer>;

        $i0 = this.<kanzi.bitstream.DefaultOutputBitStream: int position>;

        $l1 = this.<kanzi.bitstream.DefaultOutputBitStream: long current>;

        $l2 = $l1 >>> 56;

        $i3 = (int) $l2;

        $b4 = (byte) $i3;

        $r0[$i0] = $b4;

        $r1 = this.<kanzi.bitstream.DefaultOutputBitStream: byte[] buffer>;

        $i5 = this.<kanzi.bitstream.DefaultOutputBitStream: int position>;

        $i6 = $i5 + 1;

        $l7 = this.<kanzi.bitstream.DefaultOutputBitStream: long current>;

        $l8 = $l7 >>> 48;

        $i9 = (int) $l8;

        $b10 = (byte) $i9;

        $r1[$i6] = $b10;

        $r2 = this.<kanzi.bitstream.DefaultOutputBitStream: byte[] buffer>;

        $i11 = this.<kanzi.bitstream.DefaultOutputBitStream: int position>;

        $i12 = $i11 + 2;

        $l13 = this.<kanzi.bitstream.DefaultOutputBitStream: long current>;

        $l14 = $l13 >>> 40;

        $i15 = (int) $l14;

        $b16 = (byte) $i15;

        $r2[$i12] = $b16;

        $r3 = this.<kanzi.bitstream.DefaultOutputBitStream: byte[] buffer>;

        $i17 = this.<kanzi.bitstream.DefaultOutputBitStream: int position>;

        $i18 = $i17 + 3;

        $l19 = this.<kanzi.bitstream.DefaultOutputBitStream: long current>;

        $l20 = $l19 >>> 32;

        $i21 = (int) $l20;

        $b22 = (byte) $i21;

        $r3[$i18] = $b22;

        $r4 = this.<kanzi.bitstream.DefaultOutputBitStream: byte[] buffer>;

        $i23 = this.<kanzi.bitstream.DefaultOutputBitStream: int position>;

        $i24 = $i23 + 4;

        $l25 = this.<kanzi.bitstream.DefaultOutputBitStream: long current>;

        $l26 = $l25 >>> 24;

        $i27 = (int) $l26;

        $b28 = (byte) $i27;

        $r4[$i24] = $b28;

        $r5 = this.<kanzi.bitstream.DefaultOutputBitStream: byte[] buffer>;

        $i29 = this.<kanzi.bitstream.DefaultOutputBitStream: int position>;

        $i30 = $i29 + 5;

        $l31 = this.<kanzi.bitstream.DefaultOutputBitStream: long current>;

        $l32 = $l31 >>> 16;

        $i33 = (int) $l32;

        $b34 = (byte) $i33;

        $r5[$i30] = $b34;

        $r6 = this.<kanzi.bitstream.DefaultOutputBitStream: byte[] buffer>;

        $i35 = this.<kanzi.bitstream.DefaultOutputBitStream: int position>;

        $i36 = $i35 + 6;

        $l37 = this.<kanzi.bitstream.DefaultOutputBitStream: long current>;

        $l38 = $l37 >>> 8;

        $i39 = (int) $l38;

        $b40 = (byte) $i39;

        $r6[$i36] = $b40;

        $r7 = this.<kanzi.bitstream.DefaultOutputBitStream: byte[] buffer>;

        $i41 = this.<kanzi.bitstream.DefaultOutputBitStream: int position>;

        $i42 = $i41 + 7;

        $l43 = this.<kanzi.bitstream.DefaultOutputBitStream: long current>;

        $i44 = (int) $l43;

        $b45 = (byte) $i44;

        $r7[$i42] = $b45;

        this.<kanzi.bitstream.DefaultOutputBitStream: int bitIndex> = 63;

        this.<kanzi.bitstream.DefaultOutputBitStream: long current> = 0L;

        $i46 = this.<kanzi.bitstream.DefaultOutputBitStream: int position>;

        $i47 = $i46 + 8;

        this.<kanzi.bitstream.DefaultOutputBitStream: int position> = $i47;

        $i48 = this.<kanzi.bitstream.DefaultOutputBitStream: int position>;

        $r9 = this.<kanzi.bitstream.DefaultOutputBitStream: byte[] buffer>;

        $i49 = lengthof $r9;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i48);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i49);

        if $i48 < $i49 goto label1;

        specialinvoke this.<kanzi.bitstream.DefaultOutputBitStream: void flush()>();

     label1:
        return;
    }

    private void flush() throws kanzi.BitStreamException
    {
        kanzi.bitstream.DefaultOutputBitStream this;
        java.io.IOException e, $r4;
        boolean $z0;
        kanzi.BitStreamException $r0, $r5;
        int $i0, $i1, $i3, $i4;
        java.io.OutputStream $r1;
        byte[] $r2;
        long $l2, $l5, $l6;
        java.lang.String $r6;

        this := @this: kanzi.bitstream.DefaultOutputBitStream;

        $z0 = virtualinvoke this.<kanzi.bitstream.DefaultOutputBitStream: boolean isClosed()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 1 goto label1;

        $r0 = new kanzi.BitStreamException;

        specialinvoke $r0.<kanzi.BitStreamException: void <init>(java.lang.String,int)>("Stream closed", 4);

        throw $r0;

     label1:
        $i0 = this.<kanzi.bitstream.DefaultOutputBitStream: int position>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label2;

        $r1 = this.<kanzi.bitstream.DefaultOutputBitStream: java.io.OutputStream os>;

        $r2 = this.<kanzi.bitstream.DefaultOutputBitStream: byte[] buffer>;

        $i1 = this.<kanzi.bitstream.DefaultOutputBitStream: int position>;

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r2, 0, $i1);

        $l2 = this.<kanzi.bitstream.DefaultOutputBitStream: long written>;

        $i3 = this.<kanzi.bitstream.DefaultOutputBitStream: int position>;

        $i4 = $i3 << 3;

        $l5 = (long) $i4;

        $l6 = $l2 + $l5;

        this.<kanzi.bitstream.DefaultOutputBitStream: long written> = $l6;

        this.<kanzi.bitstream.DefaultOutputBitStream: int position> = 0;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        e = $r4;

        $r5 = new kanzi.BitStreamException;

        $r6 = virtualinvoke e.<java.io.IOException: java.lang.String getMessage()>();

        specialinvoke $r5.<kanzi.BitStreamException: void <init>(java.lang.String,int)>($r6, 1);

        throw $r5;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public boolean isClosed()
    {
        kanzi.bitstream.DefaultOutputBitStream this;
        boolean $z0;

        this := @this: kanzi.bitstream.DefaultOutputBitStream;

        $z0 = this.<kanzi.bitstream.DefaultOutputBitStream: boolean closed>;

        return $z0;
    }

    public void close()
    {
        kanzi.bitstream.DefaultOutputBitStream this;
        int savedBitIndex, savedPosition, size, $i0, $i1, $i2, $i3, $i4, $i5;
        long savedCurrent, $l6, $l7;
        boolean $z0;
        kanzi.BitStreamException $r1, e#28, $r4;
        java.io.OutputStream $r2;
        java.io.IOException $r3, e#39;
        byte[] $r5;

        this := @this: kanzi.bitstream.DefaultOutputBitStream;

        $z0 = virtualinvoke this.<kanzi.bitstream.DefaultOutputBitStream: boolean isClosed()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 1 goto label1;

        return;

     label1:
        savedBitIndex = this.<kanzi.bitstream.DefaultOutputBitStream: int bitIndex>;

        savedPosition = this.<kanzi.bitstream.DefaultOutputBitStream: int position>;

        savedCurrent = this.<kanzi.bitstream.DefaultOutputBitStream: long current>;

     label2:
        $i0 = this.<kanzi.bitstream.DefaultOutputBitStream: int bitIndex>;

        $i1 = 63 - $i0;

        $i2 = $i1 + 7;

        size = $i2 >> 3;

        specialinvoke this.<kanzi.bitstream.DefaultOutputBitStream: void pushCurrent()>();

        $i3 = this.<kanzi.bitstream.DefaultOutputBitStream: int position>;

        $i4 = 8 - size;

        $i5 = $i3 - $i4;

        this.<kanzi.bitstream.DefaultOutputBitStream: int position> = $i5;

        specialinvoke this.<kanzi.bitstream.DefaultOutputBitStream: void flush()>();

     label3:
        goto label5;

     label4:
        $r1 := @caughtexception;

        e#28 = $r1;

        this.<kanzi.bitstream.DefaultOutputBitStream: int position> = savedPosition;

        this.<kanzi.bitstream.DefaultOutputBitStream: int bitIndex> = savedBitIndex;

        this.<kanzi.bitstream.DefaultOutputBitStream: long current> = savedCurrent;

        throw e#28;

     label5:
        $r2 = this.<kanzi.bitstream.DefaultOutputBitStream: java.io.OutputStream os>;

        virtualinvoke $r2.<java.io.OutputStream: void flush()>();

     label6:
        goto label8;

     label7:
        $r3 := @caughtexception;

        e#39 = $r3;

        $r4 = new kanzi.BitStreamException;

        specialinvoke $r4.<kanzi.BitStreamException: void <init>(java.lang.Throwable,int)>(e#39, 1);

        throw $r4;

     label8:
        this.<kanzi.bitstream.DefaultOutputBitStream: boolean closed> = 1;

        this.<kanzi.bitstream.DefaultOutputBitStream: int position> = 0;

        this.<kanzi.bitstream.DefaultOutputBitStream: int bitIndex> = -1;

        $r5 = newarray (byte)[8];

        this.<kanzi.bitstream.DefaultOutputBitStream: byte[] buffer> = $r5;

        $l6 = this.<kanzi.bitstream.DefaultOutputBitStream: long written>;

        $l7 = $l6 - 64L;

        this.<kanzi.bitstream.DefaultOutputBitStream: long written> = $l7;

        return;

        catch kanzi.BitStreamException from label2 to label3 with label4;
        catch java.io.IOException from label5 to label6 with label7;
    }


