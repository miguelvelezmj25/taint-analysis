    public void <init>(int, int, int, int)
    {
        kanzi.function.wavelet.WaveletBandScanner this;
        int width, height, bandType, levels, x0, y0, $i0, $i1, $i2, sz#38, subtreeSize#40, $i3, $i4, $i5, $i6, x#52, y#54, i#56, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        java.lang.IllegalArgumentException $r0, $r1, $r2, $r3;

        this := @this: kanzi.function.wavelet.WaveletBandScanner;

        width := @parameter0: int;

        height := @parameter1: int;

        bandType := @parameter2: int;

        levels := @parameter3: int;

        specialinvoke this.<java.lang.Object: void <init>()>();

        if height >= 2 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid height parameter (must be at least 8)");

        throw $r0;

     label1:
        if width >= 8 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid width parameter (must be at least 8)");

        throw $r1;

     label2:
        $i0 = bandType & 1;

        if $i0 != 0 goto label3;

        $i1 = bandType & 2;

        if $i1 != 0 goto label3;

        $i2 = bandType & 4;

        if $i2 != 0 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid bandType parameter");

        throw $r2;

     label3:
        if levels >= 1 goto label4;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid levels parameter (must be at least 1)");

        throw $r3;

     label4:
        this.<kanzi.function.wavelet.WaveletBandScanner: int width> = width;

        this.<kanzi.function.wavelet.WaveletBandScanner: int height> = height;

        this.<kanzi.function.wavelet.WaveletBandScanner: int bandType> = bandType;

        this.<kanzi.function.wavelet.WaveletBandScanner: int levels> = levels;

        sz#38 = 0;

        subtreeSize#40 = 0;

        $i3 = this.<kanzi.function.wavelet.WaveletBandScanner: int width>;

        $i4 = this.<kanzi.function.wavelet.WaveletBandScanner: int levels>;

        x0 = $i3 >> $i4;

        $i5 = this.<kanzi.function.wavelet.WaveletBandScanner: int height>;

        $i6 = this.<kanzi.function.wavelet.WaveletBandScanner: int levels>;

        y0 = $i5 >> $i6;

        x#52 = x0;

        y#54 = y0;

        i#56 = 0;

     label5:
        if i#56 >= levels goto label6;

        $i7 = x#52 * y#54;

        subtreeSize#40 = subtreeSize#40 + $i7;

        x#52 = x#52 << 1;

        y#54 = y#54 << 1;

        i#56 = i#56 + 1;

        goto label5;

     label6:
        $i8 = this.<kanzi.function.wavelet.WaveletBandScanner: int bandType>;

        $i9 = $i8 & 1;

        if $i9 == 0 goto label7;

        sz#38 = sz#38 + subtreeSize#40;

     label7:
        $i10 = this.<kanzi.function.wavelet.WaveletBandScanner: int bandType>;

        $i11 = $i10 & 2;

        if $i11 == 0 goto label8;

        sz#38 = sz#38 + subtreeSize#40;

     label8:
        $i12 = this.<kanzi.function.wavelet.WaveletBandScanner: int bandType>;

        $i13 = $i12 & 4;

        if $i13 == 0 goto label9;

        sz#38 = sz#38 + subtreeSize#40;

     label9:
        this.<kanzi.function.wavelet.WaveletBandScanner: int size> = sz#38;

        return;
    }

    public int getSize()
    {
        kanzi.function.wavelet.WaveletBandScanner this;
        int $i0;

        this := @this: kanzi.function.wavelet.WaveletBandScanner;

        $i0 = this.<kanzi.function.wavelet.WaveletBandScanner: int size>;

        return $i0;
    }

    public int getIndexes(int[], int, int)
    {
        kanzi.function.wavelet.WaveletBandScanner this;
        int[] block;
        int offset, initialW, initialH, length#1, $i0, $i1, $i2, $i3, $i4, $i5, w#22, h#24, offsetInBand#26, level#28, count#31, previousCount#33, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, count#78, $i16, $i17;

        this := @this: kanzi.function.wavelet.WaveletBandScanner;

        block := @parameter0: int[];

        length#1 := @parameter1: int;

        offset := @parameter2: int;

        $i0 = this.<kanzi.function.wavelet.WaveletBandScanner: int size>;

        if offset < $i0 goto label01;

        return 0;

     label01:
        $i1 = lengthof block;

        if length#1 <= $i1 goto label02;

        length#1 = lengthof block;

     label02:
        $i2 = this.<kanzi.function.wavelet.WaveletBandScanner: int width>;

        $i3 = this.<kanzi.function.wavelet.WaveletBandScanner: int levels>;

        initialW = $i2 >> $i3;

        $i4 = this.<kanzi.function.wavelet.WaveletBandScanner: int height>;

        $i5 = this.<kanzi.function.wavelet.WaveletBandScanner: int levels>;

        initialH = $i4 >> $i5;

        w#22 = initialW;

        h#24 = initialH;

        offsetInBand#26 = 0;

        level#28 = 0;

        if offset <= 0 goto label09;

        count#31 = 0;

        previousCount#33 = 0;

        level#28 = 0;

     label03:
        $i6 = this.<kanzi.function.wavelet.WaveletBandScanner: int levels>;

        if level#28 >= $i6 goto label08;

        $i7 = this.<kanzi.function.wavelet.WaveletBandScanner: int bandType>;

        $i8 = $i7 & 1;

        if $i8 == 0 goto label04;

        $i9 = w#22 * h#24;

        count#31 = count#31 + $i9;

     label04:
        $i10 = this.<kanzi.function.wavelet.WaveletBandScanner: int bandType>;

        $i11 = $i10 & 4;

        if $i11 == 0 goto label05;

        $i12 = w#22 * h#24;

        count#31 = count#31 + $i12;

     label05:
        $i13 = this.<kanzi.function.wavelet.WaveletBandScanner: int bandType>;

        $i14 = $i13 & 2;

        if $i14 == 0 goto label06;

        $i15 = w#22 * h#24;

        count#31 = count#31 + $i15;

     label06:
        if count#31 <= offset goto label07;

        goto label08;

     label07:
        w#22 = w#22 << 1;

        h#24 = h#24 << 1;

        previousCount#33 = count#31;

        level#28 = level#28 + 1;

        goto label03;

     label08:
        offsetInBand#26 = offset - previousCount#33;

     label09:
        count#78 = 0;

     label10:
        $i16 = this.<kanzi.function.wavelet.WaveletBandScanner: int levels>;

        if level#28 >= $i16 goto label12;

        $i17 = virtualinvoke this.<kanzi.function.wavelet.WaveletBandScanner: int getBandIndexes(int[],int,int,int,int)>(block, w#22, h#24, count#78, offsetInBand#26);

        count#78 = count#78 + $i17;

        offsetInBand#26 = 0;

        if count#78 < length#1 goto label11;

        goto label12;

     label11:
        w#22 = w#22 << 1;

        h#24 = h#24 << 1;

        level#28 = level#28 + 1;

        goto label10;

     label12:
        return count#78;
    }

    protected int getBandIndexes(int[], int, int, int, int)
    {
        kanzi.function.wavelet.WaveletBandScanner this;
        int[] block;
        int w, h, blockIdx, offsetInBand, mult, min, $i0, $i1, idx#9, $i2, count#15, $i3, $i4, $i5, end#26, offs#28, $i6, endStep#41, i#43, $i7, $i8, $i9, $i10, $i11, $i12, $i13, end#71, offs#73, $i14, endStep#86, i#88, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, offset#119, j#121, offs#125, i#127, $i23, $i24, $i25, $i26, $i27, $i28, $i29, j#156, offs#160, i#162, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, offset#200, i#202, offs#206, j#208, $i41, $i42, $i43, $i44, $i45, $i46, $i47, i#235, offs#239, j#241, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56;

        this := @this: kanzi.function.wavelet.WaveletBandScanner;

        block := @parameter0: int[];

        w := @parameter1: int;

        h := @parameter2: int;

        blockIdx := @parameter3: int;

        offsetInBand := @parameter4: int;

        $i0 = this.<kanzi.function.wavelet.WaveletBandScanner: int width>;

        if w >= $i0 goto label01;

        $i1 = this.<kanzi.function.wavelet.WaveletBandScanner: int height>;

        if h < $i1 goto label02;

     label01:
        return 0;

     label02:
        idx#9 = blockIdx;

        $i2 = this.<kanzi.function.wavelet.WaveletBandScanner: int width>;

        mult = h * $i2;

        count#15 = 0;

        $i3 = this.<kanzi.function.wavelet.WaveletBandScanner: int bandType>;

        $i4 = $i3 & 1;

        if $i4 == 0 goto label10;

        $i5 = lengthof block;

        if idx#9 >= $i5 goto label10;

        end#26 = w + mult;

        offs#28 = w;

     label03:
        if offs#28 >= end#26 goto label10;

        $i6 = count#15 + w;

        if $i6 >= offsetInBand goto label04;

        count#15 = count#15 + w;

        goto label09;

     label04:
        endStep#41 = offs#28 + w;

        i#43 = offs#28;

     label05:
        if i#43 >= endStep#41 goto label09;

        if count#15 >= offsetInBand goto label06;

        goto label08;

     label06:
        $i7 = lengthof block;

        if idx#9 != $i7 goto label07;

        $i8 = idx#9 - blockIdx;

        return $i8;

     label07:
        $i9 = idx#9;

        idx#9 = idx#9 + 1;

        block[$i9] = i#43;

     label08:
        i#43 = i#43 + 1;

        count#15 = count#15 + 1;

        goto label05;

     label09:
        $i10 = this.<kanzi.function.wavelet.WaveletBandScanner: int width>;

        offs#28 = offs#28 + $i10;

        goto label03;

     label10:
        $i11 = this.<kanzi.function.wavelet.WaveletBandScanner: int bandType>;

        $i12 = $i11 & 2;

        if $i12 == 0 goto label18;

        $i13 = lengthof block;

        if idx#9 >= $i13 goto label18;

        end#71 = w + mult;

        offs#73 = mult;

     label11:
        if offs#73 >= end#71 goto label18;

        $i14 = count#15 + h;

        if $i14 >= offsetInBand goto label12;

        count#15 = count#15 + h;

        goto label17;

     label12:
        endStep#86 = offs#73 + mult;

        i#88 = offs#73;

     label13:
        if i#88 >= endStep#86 goto label17;

        if count#15 >= offsetInBand goto label14;

        goto label16;

     label14:
        $i15 = lengthof block;

        if idx#9 != $i15 goto label15;

        $i16 = idx#9 - blockIdx;

        return $i16;

     label15:
        $i17 = idx#9;

        idx#9 = idx#9 + 1;

        block[$i17] = i#88;

     label16:
        $i18 = this.<kanzi.function.wavelet.WaveletBandScanner: int width>;

        i#88 = i#88 + $i18;

        count#15 = count#15 + 1;

        goto label13;

     label17:
        offs#73 = offs#73 + 1;

        goto label11;

     label18:
        $i19 = this.<kanzi.function.wavelet.WaveletBandScanner: int bandType>;

        $i20 = $i19 & 4;

        if $i20 == 0 goto label48;

        $i21 = lengthof block;

        if idx#9 >= $i21 goto label48;

        if w >= h goto label19;

        $i22 = w;

        goto label20;

     label19:
        $i22 = h;

     label20:
        min = $i22;

        offset#119 = w + mult;

        j#121 = 0;

     label21:
        if j#121 >= min goto label27;

        offs#125 = offset#119;

        i#127 = 0;

     label22:
        if i#127 > j#121 goto label26;

        if count#15 >= offsetInBand goto label23;

        $i23 = this.<kanzi.function.wavelet.WaveletBandScanner: int width>;

        offs#125 = offs#125 - $i23;

        goto label25;

     label23:
        $i24 = lengthof block;

        if idx#9 != $i24 goto label24;

        $i25 = idx#9 - blockIdx;

        return $i25;

     label24:
        $i26 = idx#9;

        idx#9 = idx#9 + 1;

        $i27 = offs#125 + i#127;

        block[$i26] = $i27;

        $i28 = this.<kanzi.function.wavelet.WaveletBandScanner: int width>;

        offs#125 = offs#125 - $i28;

     label25:
        i#127 = i#127 + 1;

        count#15 = count#15 + 1;

        goto label22;

     label26:
        $i29 = this.<kanzi.function.wavelet.WaveletBandScanner: int width>;

        offset#119 = offset#119 + $i29;

        j#121 = j#121 + 1;

        goto label21;

     label27:
        j#156 = min;

     label28:
        if j#156 >= h goto label34;

        offs#160 = offset#119;

        i#162 = 0;

     label29:
        if i#162 >= w goto label33;

        if count#15 >= offsetInBand goto label30;

        $i30 = this.<kanzi.function.wavelet.WaveletBandScanner: int width>;

        offs#160 = offs#160 - $i30;

        goto label32;

     label30:
        $i31 = lengthof block;

        if idx#9 != $i31 goto label31;

        $i32 = idx#9 - blockIdx;

        return $i32;

     label31:
        $i33 = idx#9;

        idx#9 = idx#9 + 1;

        $i34 = offs#160 + i#162;

        block[$i33] = $i34;

        $i35 = this.<kanzi.function.wavelet.WaveletBandScanner: int width>;

        offs#160 = offs#160 - $i35;

     label32:
        i#162 = i#162 + 1;

        count#15 = count#15 + 1;

        goto label29;

     label33:
        $i36 = this.<kanzi.function.wavelet.WaveletBandScanner: int width>;

        offset#119 = offset#119 + $i36;

        j#156 = j#156 + 1;

        goto label28;

     label34:
        $i37 = w + mult;

        $i38 = $i37 + mult;

        $i39 = this.<kanzi.function.wavelet.WaveletBandScanner: int width>;

        $i40 = $i38 - $i39;

        offset#200 = $i40 + 1;

        i#202 = min;

     label35:
        if i#202 >= w goto label41;

        offs#206 = offset#200;

        j#208 = 0;

     label36:
        if j#208 >= h goto label40;

        if count#15 >= offsetInBand goto label37;

        $i41 = this.<kanzi.function.wavelet.WaveletBandScanner: int width>;

        $i42 = $i41 - 1;

        offs#206 = offs#206 - $i42;

        goto label39;

     label37:
        $i43 = lengthof block;

        if idx#9 != $i43 goto label38;

        $i44 = idx#9 - blockIdx;

        return $i44;

     label38:
        $i45 = idx#9;

        idx#9 = idx#9 + 1;

        block[$i45] = offs#206;

        $i46 = this.<kanzi.function.wavelet.WaveletBandScanner: int width>;

        $i47 = $i46 - 1;

        offs#206 = offs#206 - $i47;

     label39:
        j#208 = j#208 + 1;

        count#15 = count#15 + 1;

        goto label36;

     label40:
        offset#200 = offset#200 + 1;

        i#202 = i#202 + 1;

        goto label35;

     label41:
        i#235 = 1;

     label42:
        if i#235 >= min goto label48;

        offs#239 = offset#200;

        j#241 = 0;

     label43:
        $i48 = min - i#235;

        if j#241 >= $i48 goto label47;

        if count#15 >= offsetInBand goto label44;

        $i49 = this.<kanzi.function.wavelet.WaveletBandScanner: int width>;

        $i50 = $i49 - 1;

        offs#239 = offs#239 - $i50;

        goto label46;

     label44:
        $i51 = lengthof block;

        if idx#9 != $i51 goto label45;

        $i52 = idx#9 - blockIdx;

        return $i52;

     label45:
        $i53 = idx#9;

        idx#9 = idx#9 + 1;

        block[$i53] = offs#239;

        $i54 = this.<kanzi.function.wavelet.WaveletBandScanner: int width>;

        $i55 = $i54 - 1;

        offs#239 = offs#239 - $i55;

     label46:
        j#241 = j#241 + 1;

        count#15 = count#15 + 1;

        goto label43;

     label47:
        offset#200 = offset#200 + 1;

        i#235 = i#235 + 1;

        goto label42;

     label48:
        $i56 = idx#9 - blockIdx;

        return $i56;
    }

    public int getBandIndexes(int[], int, int, int)
    {
        kanzi.function.wavelet.WaveletBandScanner this;
        int[] block;
        int w, h, blockIdx, $i0;

        this := @this: kanzi.function.wavelet.WaveletBandScanner;

        block := @parameter0: int[];

        w := @parameter1: int;

        h := @parameter2: int;

        blockIdx := @parameter3: int;

        $i0 = virtualinvoke this.<kanzi.function.wavelet.WaveletBandScanner: int getBandIndexes(int[],int,int,int,int)>(block, w, h, blockIdx, 0);

        return $i0;
    }


