    public void timeShift()
    {
        family.ElevatorSystem.Elevator this;
        boolean $z0;

        this := @this: family.ElevatorSystem.Elevator;

        $z0 = <family.PL_Interface_impl: boolean OVERLOADED>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        virtualinvoke this.<family.ElevatorSystem.Elevator: void timeShift__role__overloaded()>();

        goto label2;

     label1:
        virtualinvoke this.<family.ElevatorSystem.Elevator: void timeShift__before__overloaded()>();

     label2:
        return;
    }

    public boolean isEmpty()
    {
        family.ElevatorSystem.Elevator this;
        java.util.List $r0;
        boolean $z0;

        this := @this: family.ElevatorSystem.Elevator;

        $r0 = this.<family.ElevatorSystem.Elevator: java.util.List persons>;

        $z0 = interfaceinvoke $r0.<java.util.List: boolean isEmpty()>();

        return $z0;
    }

    public boolean isBlocked()
    {
        family.ElevatorSystem.Elevator this;
        boolean $z0, $z1, $z2;

        this := @this: family.ElevatorSystem.Elevator;

        $z0 = <family.PL_Interface_impl: boolean OVERLOADED>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke this.<family.ElevatorSystem.Elevator: boolean isBlocked__role__overloaded()>();

        return $z1;

     label1:
        $z2 = virtualinvoke this.<family.ElevatorSystem.Elevator: boolean isBlocked__before__overloaded()>();

        return $z2;
    }

    public boolean isBlocked__role__overloaded()
    {
        family.ElevatorSystem.Elevator this;
        java.lang.InterruptedException e, $r0;
        boolean $z0;

        this := @this: family.ElevatorSystem.Elevator;

     label1:
        staticinvoke <java.lang.Thread: void sleep(long)>(100L);

     label2:
        goto label4;

     label3:
        $r0 := @caughtexception;

        e = $r0;

        virtualinvoke e.<java.lang.InterruptedException: void printStackTrace()>();

     label4:
        $z0 = this.<family.ElevatorSystem.Elevator: boolean blocked>;

        return $z0;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public boolean isBlocked__before__overloaded()
    {
        family.ElevatorSystem.Elevator this;

        this := @this: family.ElevatorSystem.Elevator;

        return 0;
    }

    public void timeShift__role__overloaded()
    {
        family.ElevatorSystem.Elevator this;
        boolean $z0, $z1;
        int $i0, $i1;
        java.io.PrintStream $r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        this := @this: family.ElevatorSystem.Elevator;

        $z0 = virtualinvoke this.<family.ElevatorSystem.Elevator: boolean areDoorsOpen()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $i0 = this.<family.ElevatorSystem.Elevator: int weight>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 100 goto label1;

        this.<family.ElevatorSystem.Elevator: boolean blocked> = 1;

        $z1 = this.<family.ElevatorSystem.Elevator: boolean verbose>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Elevator blocked due to overloading (weight:");

        $i1 = this.<family.ElevatorSystem.Elevator: int weight>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > maximumWeight:");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(100);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>($r7);

        goto label2;

     label1:
        this.<family.ElevatorSystem.Elevator: boolean blocked> = 0;

        virtualinvoke this.<family.ElevatorSystem.Elevator: void timeShift__before__overloaded()>();

     label2:
        return;
    }

    public void timeShift__before__overloaded()
    {
        family.ElevatorSystem.Elevator this;
        java.util.Iterator l1;
        family.ElevatorSystem.Person p;
        boolean $z0, $z1, $z3, $z4;
        family.ElevatorSystem.Elevator$DoorState $r0, $r6, $r7, $r8;
        java.util.ArrayList $r1;
        java.util.List $r2;
        java.lang.Object $r3;
        int $i0, $i1, $i2, $i3;
        family.ElevatorSystem.Environment $r4;
        family.ElevatorSystem.Floor $r5;
        family.ElevatorSystem.Elevator$Direction $r9, $r10, $r11, $r12, $r13, $r14, $r15;

        this := @this: family.ElevatorSystem.Elevator;

        $z0 = specialinvoke this.<family.ElevatorSystem.Elevator: boolean stopRequestedAtCurrentFloor()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label4;

        $r0 = <family.ElevatorSystem.Elevator$DoorState: family.ElevatorSystem.Elevator$DoorState open>;

        this.<family.ElevatorSystem.Elevator: family.ElevatorSystem.Elevator$DoorState doors> = $r0;

        $r1 = new java.util.ArrayList;

        $r2 = this.<family.ElevatorSystem.Elevator: java.util.List persons>;

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        l1 = virtualinvoke $r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label3;

        $r3 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>();

        p = (family.ElevatorSystem.Person) $r3;

        $i0 = virtualinvoke p.<family.ElevatorSystem.Person: int getDestination()>();

        $i1 = this.<family.ElevatorSystem.Elevator: int currentFloorID>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i0 != $i1 goto label2;

        virtualinvoke this.<family.ElevatorSystem.Elevator: boolean leaveElevator(family.ElevatorSystem.Person)>(p);

     label2:
        goto label1;

     label3:
        $r4 = this.<family.ElevatorSystem.Elevator: family.ElevatorSystem.Environment env>;

        $i2 = this.<family.ElevatorSystem.Elevator: int currentFloorID>;

        $r5 = virtualinvoke $r4.<family.ElevatorSystem.Environment: family.ElevatorSystem.Floor getFloor(int)>($i2);

        virtualinvoke $r5.<family.ElevatorSystem.Floor: void processWaitingPersons(family.ElevatorSystem.Elevator)>(this);

        $i3 = this.<family.ElevatorSystem.Elevator: int currentFloorID>;

        specialinvoke this.<family.ElevatorSystem.Elevator: void resetFloorButton(int)>($i3);

        goto label8;

     label4:
        $r6 = this.<family.ElevatorSystem.Elevator: family.ElevatorSystem.Elevator$DoorState doors>;

        $r7 = <family.ElevatorSystem.Elevator$DoorState: family.ElevatorSystem.Elevator$DoorState open>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r7);

        if $r6 != $r7 goto label5;

        $r8 = <family.ElevatorSystem.Elevator$DoorState: family.ElevatorSystem.Elevator$DoorState close>;

        this.<family.ElevatorSystem.Elevator: family.ElevatorSystem.Elevator$DoorState doors> = $r8;

     label5:
        $r9 = this.<family.ElevatorSystem.Elevator: family.ElevatorSystem.Elevator$Direction currentHeading>;

        $z3 = specialinvoke this.<family.ElevatorSystem.Elevator: boolean stopRequestedInDirection(family.ElevatorSystem.Elevator$Direction,boolean,boolean)>($r9, 1, 1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label6;

        $r10 = this.<family.ElevatorSystem.Elevator: family.ElevatorSystem.Elevator$Direction currentHeading>;

        specialinvoke this.<family.ElevatorSystem.Elevator: void continueInDirection(family.ElevatorSystem.Elevator$Direction)>($r10);

        goto label8;

     label6:
        $r11 = this.<family.ElevatorSystem.Elevator: family.ElevatorSystem.Elevator$Direction currentHeading>;

        $r12 = virtualinvoke $r11.<family.ElevatorSystem.Elevator$Direction: family.ElevatorSystem.Elevator$Direction reverse()>();

        $z4 = specialinvoke this.<family.ElevatorSystem.Elevator: boolean stopRequestedInDirection(family.ElevatorSystem.Elevator$Direction,boolean,boolean)>($r12, 1, 1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label7;

        $r13 = this.<family.ElevatorSystem.Elevator: family.ElevatorSystem.Elevator$Direction currentHeading>;

        $r14 = virtualinvoke $r13.<family.ElevatorSystem.Elevator$Direction: family.ElevatorSystem.Elevator$Direction reverse()>();

        specialinvoke this.<family.ElevatorSystem.Elevator: void continueInDirection(family.ElevatorSystem.Elevator$Direction)>($r14);

        goto label8;

     label7:
        $r15 = this.<family.ElevatorSystem.Elevator: family.ElevatorSystem.Elevator$Direction currentHeading>;

        specialinvoke this.<family.ElevatorSystem.Elevator: void continueInDirection(family.ElevatorSystem.Elevator$Direction)>($r15);

     label8:
        return;
    }

    private boolean stopRequestedAtCurrentFloor()
    {
        family.ElevatorSystem.Elevator this;
        boolean $z0, $z1, $z2;

        this := @this: family.ElevatorSystem.Elevator;

        $z0 = <family.PL_Interface_impl: boolean EXECUTIVEFLOOR>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $z1 = specialinvoke this.<family.ElevatorSystem.Elevator: boolean stopRequestedAtCurrentFloor__role__executivefloor()>();

        return $z1;

     label1:
        $z2 = specialinvoke this.<family.ElevatorSystem.Elevator: boolean stopRequestedAtCurrentFloor__before__executivefloor()>();

        return $z2;
    }

    public boolean leaveElevator(family.ElevatorSystem.Person)
    {
        family.ElevatorSystem.Elevator this;
        family.ElevatorSystem.Person p;
        boolean $z0, $z1, $z2;

        this := @this: family.ElevatorSystem.Elevator;

        p := @parameter0: family.ElevatorSystem.Person;

        $z0 = <family.PL_Interface_impl: boolean EMPTY>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke this.<family.ElevatorSystem.Elevator: boolean leaveElevator__role__empty(family.ElevatorSystem.Person)>(p);

        return $z1;

     label1:
        $z2 = virtualinvoke this.<family.ElevatorSystem.Elevator: boolean leaveElevator__before__empty(family.ElevatorSystem.Person)>(p);

        return $z2;
    }

    private void resetFloorButton(int)
    {
        family.ElevatorSystem.Elevator this;
        int floorID;
        boolean[] $r0;

        this := @this: family.ElevatorSystem.Elevator;

        floorID := @parameter0: int;

        $r0 = this.<family.ElevatorSystem.Elevator: boolean[] floorButtons>;

        $r0[floorID] = 0;

        return;
    }

    private boolean stopRequestedInDirection(family.ElevatorSystem.Elevator$Direction, boolean, boolean)
    {
        family.ElevatorSystem.Elevator this;
        family.ElevatorSystem.Elevator$Direction dir;
        boolean respectFloorCalls, respectInLiftCalls, $z0, $z1, $z2;

        this := @this: family.ElevatorSystem.Elevator;

        dir := @parameter0: family.ElevatorSystem.Elevator$Direction;

        respectFloorCalls := @parameter1: boolean;

        respectInLiftCalls := @parameter2: boolean;

        $z0 = <family.PL_Interface_impl: boolean EXECUTIVEFLOOR>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $z1 = specialinvoke this.<family.ElevatorSystem.Elevator: boolean stopRequestedInDirection__role__executivefloor(family.ElevatorSystem.Elevator$Direction,boolean,boolean)>(dir, respectFloorCalls, respectInLiftCalls);

        return $z1;

     label1:
        $z2 = specialinvoke this.<family.ElevatorSystem.Elevator: boolean stopRequestedInDirection__before__executivefloor(family.ElevatorSystem.Elevator$Direction,boolean,boolean)>(dir, respectFloorCalls, respectInLiftCalls);

        return $z2;
    }

    private void continueInDirection(family.ElevatorSystem.Elevator$Direction)
    {
        family.ElevatorSystem.Elevator this;
        family.ElevatorSystem.Elevator$Direction dir, $r0, $r1, $r3, $r4, $r5, $r6, $r7, $r8;
        family.ElevatorSystem.Environment $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0;

        this := @this: family.ElevatorSystem.Elevator;

        dir := @parameter0: family.ElevatorSystem.Elevator$Direction;

        this.<family.ElevatorSystem.Elevator: family.ElevatorSystem.Elevator$Direction currentHeading> = dir;

        $r0 = this.<family.ElevatorSystem.Elevator: family.ElevatorSystem.Elevator$Direction currentHeading>;

        $r1 = <family.ElevatorSystem.Elevator$Direction: family.ElevatorSystem.Elevator$Direction up>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r0 != $r1 goto label1;

        $r2 = this.<family.ElevatorSystem.Elevator: family.ElevatorSystem.Environment env>;

        $i0 = this.<family.ElevatorSystem.Elevator: int currentFloorID>;

        $z0 = virtualinvoke $r2.<family.ElevatorSystem.Environment: boolean isTopFloor(int)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $r3 = this.<family.ElevatorSystem.Elevator: family.ElevatorSystem.Elevator$Direction currentHeading>;

        $r4 = virtualinvoke $r3.<family.ElevatorSystem.Elevator$Direction: family.ElevatorSystem.Elevator$Direction reverse()>();

        this.<family.ElevatorSystem.Elevator: family.ElevatorSystem.Elevator$Direction currentHeading> = $r4;

        goto label2;

     label1:
        $i1 = this.<family.ElevatorSystem.Elevator: int currentFloorID>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 != 0 goto label2;

        $r5 = this.<family.ElevatorSystem.Elevator: family.ElevatorSystem.Elevator$Direction currentHeading>;

        $r6 = virtualinvoke $r5.<family.ElevatorSystem.Elevator$Direction: family.ElevatorSystem.Elevator$Direction reverse()>();

        this.<family.ElevatorSystem.Elevator: family.ElevatorSystem.Elevator$Direction currentHeading> = $r6;

     label2:
        $r7 = this.<family.ElevatorSystem.Elevator: family.ElevatorSystem.Elevator$Direction currentHeading>;

        $r8 = <family.ElevatorSystem.Elevator$Direction: family.ElevatorSystem.Elevator$Direction up>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r8);

        if $r7 != $r8 goto label3;

        $i2 = this.<family.ElevatorSystem.Elevator: int currentFloorID>;

        $i3 = $i2 + 1;

        this.<family.ElevatorSystem.Elevator: int currentFloorID> = $i3;

        goto label4;

     label3:
        $i4 = this.<family.ElevatorSystem.Elevator: int currentFloorID>;

        $i5 = $i4 - 1;

        this.<family.ElevatorSystem.Elevator: int currentFloorID> = $i5;

     label4:
        return;
    }

    private boolean stopRequestedInDirection__role__executivefloor(family.ElevatorSystem.Elevator$Direction, boolean, boolean)
    {
        family.ElevatorSystem.Elevator this;
        family.ElevatorSystem.Elevator$Direction dir, $r1;
        boolean respectFloorCalls, respectInLiftCalls, $z0, $z1, $z2, $z3, $z4, $z5;
        java.io.PrintStream $r0;
        int $i0, $i1;

        this := @this: family.ElevatorSystem.Elevator;

        dir := @parameter0: family.ElevatorSystem.Elevator$Direction;

        respectFloorCalls := @parameter1: boolean;

        respectInLiftCalls := @parameter2: boolean;

        $z0 = virtualinvoke this.<family.ElevatorSystem.Elevator: boolean isExecutiveFloorCalling()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label8;

        $z1 = this.<family.ElevatorSystem.Elevator: boolean verbose>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label1;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Giving Priority to Executive Floor");

     label1:
        $i0 = this.<family.ElevatorSystem.Elevator: int currentFloorID>;

        $i1 = this.<family.ElevatorSystem.Elevator: int executiveFloor>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i0 >= $i1 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        $r1 = <family.ElevatorSystem.Elevator$Direction: family.ElevatorSystem.Elevator$Direction up>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dir);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if dir != $r1 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z2 != $z3 goto label6;

        $z4 = 1;

        goto label7;

     label6:
        $z4 = 0;

     label7:
        return $z4;

     label8:
        $z5 = specialinvoke this.<family.ElevatorSystem.Elevator: boolean stopRequestedInDirection__before__executivefloor(family.ElevatorSystem.Elevator$Direction,boolean,boolean)>(dir, respectFloorCalls, respectInLiftCalls);

        return $z5;
    }

    private boolean stopRequestedInDirection__before__executivefloor(family.ElevatorSystem.Elevator$Direction, boolean, boolean)
    {
        family.ElevatorSystem.Elevator this;
        family.ElevatorSystem.Elevator$Direction dir;
        boolean respectFloorCalls, respectInLiftCalls, $z0, $z1, $z2;

        this := @this: family.ElevatorSystem.Elevator;

        dir := @parameter0: family.ElevatorSystem.Elevator$Direction;

        respectFloorCalls := @parameter1: boolean;

        respectInLiftCalls := @parameter2: boolean;

        $z0 = <family.PL_Interface_impl: boolean TWOTHIRDSFULL>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $z1 = specialinvoke this.<family.ElevatorSystem.Elevator: boolean stopRequestedInDirection__role__twothirdsfull(family.ElevatorSystem.Elevator$Direction,boolean,boolean)>(dir, respectFloorCalls, respectInLiftCalls);

        return $z1;

     label1:
        $z2 = specialinvoke this.<family.ElevatorSystem.Elevator: boolean stopRequestedInDirection__before__twothirdsfull(family.ElevatorSystem.Elevator$Direction,boolean,boolean)>(dir, respectFloorCalls, respectInLiftCalls);

        return $z2;
    }

    private boolean stopRequestedInDirection__role__twothirdsfull(family.ElevatorSystem.Elevator$Direction, boolean, boolean)
    {
        family.ElevatorSystem.Elevator this;
        family.ElevatorSystem.Elevator$Direction dir;
        boolean respectFloorCalls, respectInLiftCalls, $z0, $z1, $z2, $z3;
        int $i0;
        java.io.PrintStream $r0;

        this := @this: family.ElevatorSystem.Elevator;

        dir := @parameter0: family.ElevatorSystem.Elevator$Direction;

        respectFloorCalls := @parameter1: boolean;

        respectInLiftCalls := @parameter2: boolean;

        $i0 = this.<family.ElevatorSystem.Elevator: int weight>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 66 goto label2;

        $z0 = specialinvoke this.<family.ElevatorSystem.Elevator: boolean isAnyLiftButtonPressed()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $z1 = this.<family.ElevatorSystem.Elevator: boolean verbose>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label1;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("over 2/3 threshold, ignoring calls from FloorButtons until weight is below 2/3*threshold");

     label1:
        $z2 = specialinvoke this.<family.ElevatorSystem.Elevator: boolean stopRequestedInDirection__before__twothirdsfull(family.ElevatorSystem.Elevator$Direction,boolean,boolean)>(dir, 0, respectInLiftCalls);

        return $z2;

     label2:
        $z3 = specialinvoke this.<family.ElevatorSystem.Elevator: boolean stopRequestedInDirection__before__twothirdsfull(family.ElevatorSystem.Elevator$Direction,boolean,boolean)>(dir, respectFloorCalls, respectInLiftCalls);

        return $z3;
    }

    private boolean stopRequestedInDirection__before__twothirdsfull(family.ElevatorSystem.Elevator$Direction, boolean, boolean)
    {
        family.ElevatorSystem.Elevator this;
        family.ElevatorSystem.Elevator$Direction dir, $r1;
        boolean respectFloorCalls, respectInLiftCalls, $z0, $z1, $z2, $z3, $z4;
        family.ElevatorSystem.Floor[] floors;
        family.ElevatorSystem.Environment $r0, $r2;
        int $i0, $i1, i#16, $i2, $i3, $i4, i#40;
        family.ElevatorSystem.Floor $r3, $r5;
        boolean[] $r4, $r6;

        this := @this: family.ElevatorSystem.Elevator;

        dir := @parameter0: family.ElevatorSystem.Elevator$Direction;

        respectFloorCalls := @parameter1: boolean;

        respectInLiftCalls := @parameter2: boolean;

        $r0 = this.<family.ElevatorSystem.Elevator: family.ElevatorSystem.Environment env>;

        floors = virtualinvoke $r0.<family.ElevatorSystem.Environment: family.ElevatorSystem.Floor[] getFloors()>();

        $r1 = <family.ElevatorSystem.Elevator$Direction: family.ElevatorSystem.Elevator$Direction up>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dir);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if dir != $r1 goto label06;

        $r2 = this.<family.ElevatorSystem.Elevator: family.ElevatorSystem.Environment env>;

        $i0 = this.<family.ElevatorSystem.Elevator: int currentFloorID>;

        $z0 = virtualinvoke $r2.<family.ElevatorSystem.Environment: boolean isTopFloor(int)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label01;

        return 0;

     label01:
        $i1 = this.<family.ElevatorSystem.Elevator: int currentFloorID>;

        i#16 = $i1 + 1;

     label02:
        $i2 = lengthof floors;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#16);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#16 >= $i2 goto label05;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(respectFloorCalls);

        if respectFloorCalls == 0 goto label03;

        $r3 = floors[i#16];

        $z1 = virtualinvoke $r3.<family.ElevatorSystem.Floor: boolean hasCall()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label03;

        return 1;

     label03:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(respectInLiftCalls);

        if respectInLiftCalls == 0 goto label04;

        $r4 = this.<family.ElevatorSystem.Elevator: boolean[] floorButtons>;

        $z2 = $r4[i#16];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label04;

        return 1;

     label04:
        i#16 = i#16 + 1;

        goto label02;

     label05:
        return 0;

     label06:
        $i3 = this.<family.ElevatorSystem.Elevator: int currentFloorID>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 != 0 goto label07;

        return 0;

     label07:
        $i4 = this.<family.ElevatorSystem.Elevator: int currentFloorID>;

        i#40 = $i4 - 1;

     label08:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#40);

        if i#40 < 0 goto label11;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(respectFloorCalls);

        if respectFloorCalls == 0 goto label09;

        $r5 = floors[i#40];

        $z3 = virtualinvoke $r5.<family.ElevatorSystem.Floor: boolean hasCall()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label09;

        return 1;

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(respectInLiftCalls);

        if respectInLiftCalls == 0 goto label10;

        $r6 = this.<family.ElevatorSystem.Elevator: boolean[] floorButtons>;

        $z4 = $r6[i#40];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label10;

        return 1;

     label10:
        i#40 = i#40 + -1;

        goto label08;

     label11:
        return 0;
    }

    private boolean isAnyLiftButtonPressed()
    {
        family.ElevatorSystem.Elevator this;
        int i#2, $i0;
        boolean[] $r0, $r1;
        boolean $z0;

        this := @this: family.ElevatorSystem.Elevator;

        i#2 = 0;

     label1:
        $r0 = this.<family.ElevatorSystem.Elevator: boolean[] floorButtons>;

        $i0 = lengthof $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#2 >= $i0 goto label3;

        $r1 = this.<family.ElevatorSystem.Elevator: boolean[] floorButtons>;

        $z0 = $r1[i#2];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i#2 = i#2 + 1;

        goto label1;

     label3:
        return 0;
    }

    public boolean isExecutiveFloorCalling()
    {
        family.ElevatorSystem.Elevator this;
        family.ElevatorSystem.Floor[] l1;
        int l2, l3#7, $i0, $i1;
        family.ElevatorSystem.Floor f;
        family.ElevatorSystem.Environment $r0;
        boolean $z0;

        this := @this: family.ElevatorSystem.Elevator;

        $r0 = this.<family.ElevatorSystem.Elevator: family.ElevatorSystem.Environment env>;

        l1 = $r0.<family.ElevatorSystem.Environment: family.ElevatorSystem.Floor[] floors>;

        l2 = lengthof l1;

        l3#7 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3#7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l2);

        if l3#7 >= l2 goto label3;

        f = l1[l3#7];

        $i0 = virtualinvoke f.<family.ElevatorSystem.Floor: int getFloorID()>();

        $i1 = this.<family.ElevatorSystem.Elevator: int executiveFloor>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i0 != $i1 goto label2;

        $z0 = virtualinvoke f.<family.ElevatorSystem.Floor: boolean hasCall()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        l3#7 = l3#7 + 1;

        goto label1;

     label3:
        return 0;
    }

    public boolean leaveElevator__role__empty(family.ElevatorSystem.Person)
    {
        family.ElevatorSystem.Elevator this;
        family.ElevatorSystem.Person p;
        java.lang.InterruptedException e, $r0;
        boolean $z0, $z1;
        java.util.List $r1;
        boolean[] $r2;

        this := @this: family.ElevatorSystem.Elevator;

        p := @parameter0: family.ElevatorSystem.Person;

     label1:
        staticinvoke <java.lang.Thread: void sleep(long)>(50L);

     label2:
        goto label4;

     label3:
        $r0 := @caughtexception;

        e = $r0;

        virtualinvoke e.<java.lang.InterruptedException: void printStackTrace()>();

     label4:
        $z0 = virtualinvoke this.<family.ElevatorSystem.Elevator: boolean leaveElevator__before__empty(family.ElevatorSystem.Person)>(p);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label6;

        $r1 = this.<family.ElevatorSystem.Elevator: java.util.List persons>;

        $z1 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label5;

        $r2 = this.<family.ElevatorSystem.Elevator: boolean[] floorButtons>;

        staticinvoke <java.util.Arrays: void fill(boolean[],boolean)>($r2, 0);

     label5:
        return 1;

     label6:
        return 0;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public boolean leaveElevator__before__empty(family.ElevatorSystem.Person)
    {
        family.ElevatorSystem.Elevator this;
        family.ElevatorSystem.Person p;
        boolean $z0, $z1, $z2;

        this := @this: family.ElevatorSystem.Elevator;

        p := @parameter0: family.ElevatorSystem.Person;

        $z0 = <family.PL_Interface_impl: boolean WEIGHT>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke this.<family.ElevatorSystem.Elevator: boolean leaveElevator__role__weight(family.ElevatorSystem.Person)>(p);

        return $z1;

     label1:
        $z2 = virtualinvoke this.<family.ElevatorSystem.Elevator: boolean leaveElevator__before__weight(family.ElevatorSystem.Person)>(p);

        return $z2;
    }

    public boolean leaveElevator__role__weight(family.ElevatorSystem.Person)
    {
        family.ElevatorSystem.Elevator this;
        family.ElevatorSystem.Person p;
        boolean $z0;
        int $i0, $i1, $i2;

        this := @this: family.ElevatorSystem.Elevator;

        p := @parameter0: family.ElevatorSystem.Person;

        $z0 = virtualinvoke this.<family.ElevatorSystem.Elevator: boolean leaveElevator__before__weight(family.ElevatorSystem.Person)>(p);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $i0 = this.<family.ElevatorSystem.Elevator: int weight>;

        $i1 = virtualinvoke p.<family.ElevatorSystem.Person: int getWeight()>();

        $i2 = $i0 - $i1;

        this.<family.ElevatorSystem.Elevator: int weight> = $i2;

        return 1;

     label1:
        return 0;
    }

    public boolean leaveElevator__before__weight(family.ElevatorSystem.Person)
    {
        family.ElevatorSystem.Elevator this;
        family.ElevatorSystem.Person p;
        java.util.List $r0, $r1;
        boolean $z0, $z2;
        java.io.PrintStream $r2;
        java.lang.StringBuilder $r3, $r5, $r6, $r7;
        java.lang.String $r4, $r8;
        int $i0;

        this := @this: family.ElevatorSystem.Elevator;

        p := @parameter0: family.ElevatorSystem.Person;

        $r0 = this.<family.ElevatorSystem.Elevator: java.util.List persons>;

        $z0 = interfaceinvoke $r0.<java.util.List: boolean contains(java.lang.Object)>(p);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $r1 = this.<family.ElevatorSystem.Elevator: java.util.List persons>;

        interfaceinvoke $r1.<java.util.List: boolean remove(java.lang.Object)>(p);

        virtualinvoke p.<family.ElevatorSystem.Person: void leaveElevator()>();

        $z2 = this.<family.ElevatorSystem.Elevator: boolean verbose>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke p.<family.ElevatorSystem.Person: java.lang.String getName()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" left the Elevator at Landing ");

        $i0 = this.<family.ElevatorSystem.Elevator: int currentFloorID>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r8);

     label1:
        return 1;

     label2:
        return 0;
    }

    private boolean stopRequestedAtCurrentFloor__role__executivefloor()
    {
        family.ElevatorSystem.Elevator this;
        java.lang.InterruptedException e, $r0;
        boolean $z0, $z1, $z2;
        int $i0;

        this := @this: family.ElevatorSystem.Elevator;

     label1:
        staticinvoke <java.lang.Thread: void sleep(long)>(10L);

     label2:
        goto label4;

     label3:
        $r0 := @caughtexception;

        e = $r0;

        virtualinvoke e.<java.lang.InterruptedException: void printStackTrace()>();

     label4:
        $z0 = virtualinvoke this.<family.ElevatorSystem.Elevator: boolean isExecutiveFloorCalling()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label5;

        $i0 = this.<family.ElevatorSystem.Elevator: int currentFloorID>;

        $z1 = virtualinvoke this.<family.ElevatorSystem.Elevator: boolean isExecutiveFloor(int)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label5;

        return 0;

     label5:
        $z2 = specialinvoke this.<family.ElevatorSystem.Elevator: boolean stopRequestedAtCurrentFloor__before__executivefloor()>();

        return $z2;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    private boolean stopRequestedAtCurrentFloor__before__executivefloor()
    {
        family.ElevatorSystem.Elevator this;
        boolean $z0, $z1, $z2;

        this := @this: family.ElevatorSystem.Elevator;

        $z0 = <family.PL_Interface_impl: boolean TWOTHIRDSFULL>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $z1 = specialinvoke this.<family.ElevatorSystem.Elevator: boolean stopRequestedAtCurrentFloor__role__twothirdsfull()>();

        return $z1;

     label1:
        $z2 = specialinvoke this.<family.ElevatorSystem.Elevator: boolean stopRequestedAtCurrentFloor__before__twothirdsfull()>();

        return $z2;
    }

    private boolean stopRequestedAtCurrentFloor__role__twothirdsfull()
    {
        family.ElevatorSystem.Elevator this;
        int $i0, $i1;
        boolean[] $r0;
        boolean $z0, $z1, $z2;

        this := @this: family.ElevatorSystem.Elevator;

        $i0 = this.<family.ElevatorSystem.Elevator: int weight>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 66 goto label3;

        $r0 = this.<family.ElevatorSystem.Elevator: boolean[] floorButtons>;

        $i1 = this.<family.ElevatorSystem.Elevator: int currentFloorID>;

        $z0 = $r0[$i1];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        $z2 = specialinvoke this.<family.ElevatorSystem.Elevator: boolean stopRequestedAtCurrentFloor__before__twothirdsfull()>();

        return $z2;
    }

    private boolean stopRequestedAtCurrentFloor__before__twothirdsfull()
    {
        family.ElevatorSystem.Elevator this;
        family.ElevatorSystem.Environment $r0;
        int $i0, $i1;
        family.ElevatorSystem.Floor $r1;
        boolean $z0, $z1, $z2;
        boolean[] $r2;

        this := @this: family.ElevatorSystem.Elevator;

        $r0 = this.<family.ElevatorSystem.Elevator: family.ElevatorSystem.Environment env>;

        $i0 = this.<family.ElevatorSystem.Elevator: int currentFloorID>;

        $r1 = virtualinvoke $r0.<family.ElevatorSystem.Environment: family.ElevatorSystem.Floor getFloor(int)>($i0);

        $z0 = virtualinvoke $r1.<family.ElevatorSystem.Floor: boolean hasCall()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r2 = this.<family.ElevatorSystem.Elevator: boolean[] floorButtons>;

        $i1 = this.<family.ElevatorSystem.Elevator: int currentFloorID>;

        $z1 = $r2[$i1];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 1 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public boolean isExecutiveFloor(int)
    {
        family.ElevatorSystem.Elevator this;
        int floorID, $i0;
        boolean $z0;

        this := @this: family.ElevatorSystem.Elevator;

        floorID := @parameter0: int;

        $i0 = this.<family.ElevatorSystem.Elevator: int executiveFloor>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(floorID);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if floorID != $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean areDoorsOpen()
    {
        family.ElevatorSystem.Elevator this;
        family.ElevatorSystem.Elevator$DoorState $r0, $r1;
        boolean $z0;

        this := @this: family.ElevatorSystem.Elevator;

        $r1 = this.<family.ElevatorSystem.Elevator: family.ElevatorSystem.Elevator$DoorState doors>;

        $r0 = <family.ElevatorSystem.Elevator$DoorState: family.ElevatorSystem.Elevator$DoorState open>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r1 != $r0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void <init>(family.ElevatorSystem.Environment, boolean, int, boolean)
    {
        family.ElevatorSystem.Elevator this;
        family.ElevatorSystem.Environment env;
        boolean verbose, headingUp;
        int floor, $i0;
        java.util.ArrayList $r0;
        family.ElevatorSystem.Elevator$Direction $r2;
        family.ElevatorSystem.Elevator$DoorState $r3;
        family.ElevatorSystem.Floor[] $r4;
        boolean[] $r5;

        this := @this: family.ElevatorSystem.Elevator;

        env := @parameter0: family.ElevatorSystem.Environment;

        verbose := @parameter1: boolean;

        floor := @parameter2: int;

        headingUp := @parameter3: boolean;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<family.ElevatorSystem.Elevator: int executiveFloor> = 4;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        this.<family.ElevatorSystem.Elevator: java.util.List persons> = $r0;

        this.<family.ElevatorSystem.Elevator: boolean blocked> = 0;

        this.<family.ElevatorSystem.Elevator: boolean verbose> = verbose;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(headingUp);

        if headingUp == 0 goto label1;

        $r2 = <family.ElevatorSystem.Elevator$Direction: family.ElevatorSystem.Elevator$Direction up>;

        goto label2;

     label1:
        $r2 = <family.ElevatorSystem.Elevator$Direction: family.ElevatorSystem.Elevator$Direction down>;

     label2:
        this.<family.ElevatorSystem.Elevator: family.ElevatorSystem.Elevator$Direction currentHeading> = $r2;

        this.<family.ElevatorSystem.Elevator: int currentFloorID> = floor;

        $r3 = <family.ElevatorSystem.Elevator$DoorState: family.ElevatorSystem.Elevator$DoorState open>;

        this.<family.ElevatorSystem.Elevator: family.ElevatorSystem.Elevator$DoorState doors> = $r3;

        this.<family.ElevatorSystem.Elevator: family.ElevatorSystem.Environment env> = env;

        $r4 = env.<family.ElevatorSystem.Environment: family.ElevatorSystem.Floor[] floors>;

        $i0 = lengthof $r4;

        $r5 = newarray (boolean)[$i0];

        this.<family.ElevatorSystem.Elevator: boolean[] floorButtons> = $r5;

        return;
    }

    public void enterElevator(family.ElevatorSystem.Person)
    {
        family.ElevatorSystem.Elevator this;
        family.ElevatorSystem.Person p;
        boolean $z0;

        this := @this: family.ElevatorSystem.Elevator;

        p := @parameter0: family.ElevatorSystem.Person;

        $z0 = <family.PL_Interface_impl: boolean WEIGHT>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        virtualinvoke this.<family.ElevatorSystem.Elevator: void enterElevator__role__weight(family.ElevatorSystem.Person)>(p);

        goto label2;

     label1:
        virtualinvoke this.<family.ElevatorSystem.Elevator: void enterElevator__before__weight(family.ElevatorSystem.Person)>(p);

     label2:
        return;
    }

    public void enterElevator__role__weight(family.ElevatorSystem.Person)
    {
        family.ElevatorSystem.Elevator this;
        family.ElevatorSystem.Person p;
        java.lang.InterruptedException e, $r0;
        int $i0, $i1, $i2;

        this := @this: family.ElevatorSystem.Elevator;

        p := @parameter0: family.ElevatorSystem.Person;

     label1:
        staticinvoke <java.lang.Thread: void sleep(long)>(100L);

     label2:
        goto label4;

     label3:
        $r0 := @caughtexception;

        e = $r0;

        virtualinvoke e.<java.lang.InterruptedException: void printStackTrace()>();

     label4:
        virtualinvoke this.<family.ElevatorSystem.Elevator: void enterElevator__before__weight(family.ElevatorSystem.Person)>(p);

        $i0 = this.<family.ElevatorSystem.Elevator: int weight>;

        $i1 = virtualinvoke p.<family.ElevatorSystem.Person: int getWeight()>();

        $i2 = $i0 + $i1;

        this.<family.ElevatorSystem.Elevator: int weight> = $i2;

        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public void enterElevator__before__weight(family.ElevatorSystem.Person)
    {
        family.ElevatorSystem.Elevator this;
        family.ElevatorSystem.Person p;
        java.util.List $r0;
        boolean $z1;
        java.io.PrintStream $r1;
        java.lang.StringBuilder $r2, $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r3, $r9;
        int $i0, $i1;

        this := @this: family.ElevatorSystem.Elevator;

        p := @parameter0: family.ElevatorSystem.Person;

        $r0 = this.<family.ElevatorSystem.Elevator: java.util.List persons>;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(p);

        virtualinvoke p.<family.ElevatorSystem.Person: void enterElevator(family.ElevatorSystem.Elevator)>(this);

        $z1 = this.<family.ElevatorSystem.Elevator: boolean verbose>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke p.<family.ElevatorSystem.Person: java.lang.String getName()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" entered the Elevator at Landing ");

        $i0 = virtualinvoke this.<family.ElevatorSystem.Elevator: int getCurrentFloorID()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", going to ");

        $i1 = virtualinvoke p.<family.ElevatorSystem.Person: int getDestination()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r9);

     label1:
        return;
    }

    public int getCurrentFloorID()
    {
        family.ElevatorSystem.Elevator this;
        int $i0;

        this := @this: family.ElevatorSystem.Elevator;

        $i0 = this.<family.ElevatorSystem.Elevator: int currentFloorID>;

        return $i0;
    }


