    protected void <init>(org.w3c.dom.Element, int, weka.core.pmml.MiningSchema) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.Regression$RegressionTable this;
        org.w3c.dom.Element table, $r6, $r9, $r12;
        int functionType, $i0, $i1, $i2, i#40, $i3, $i4, i#61, $i5, i#85, $i7, i#109, $i9;
        weka.core.pmml.MiningSchema mSchema, $r2;
        weka.core.Instances miningSchema;
        java.lang.String intercept, targetCat, $r3;
        weka.core.Attribute classA;
        org.w3c.dom.NodeList numericPs, categoricalPs, predictorTerms;
        org.w3c.dom.Node nP, cP, pT;
        weka.classifiers.pmml.consumer.Regression$RegressionTable$NumericPredictor numP, $r5;
        weka.classifiers.pmml.consumer.Regression$RegressionTable$CategoricalPredictor catP, $r8;
        weka.classifiers.pmml.consumer.Regression$RegressionTable$PredictorTerm predT, $r11;
        java.util.ArrayList $r0, $r1, $r7, $r10, $r13;
        double $d0;
        boolean $z0;
        java.lang.Exception $r4;
        short $s6, $s8;

        this := @this: weka.classifiers.pmml.consumer.Regression$RegressionTable;

        table := @parameter0: org.w3c.dom.Element;

        functionType := @parameter1: int;

        mSchema := @parameter2: weka.core.pmml.MiningSchema;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<weka.classifiers.pmml.consumer.Regression$RegressionTable: int m_functionType> = 0;

        this.<weka.classifiers.pmml.consumer.Regression$RegressionTable: double m_intercept> = 0.0;

        this.<weka.classifiers.pmml.consumer.Regression$RegressionTable: int m_targetCategory> = -1;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        this.<weka.classifiers.pmml.consumer.Regression$RegressionTable: java.util.ArrayList m_predictors> = $r0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        this.<weka.classifiers.pmml.consumer.Regression$RegressionTable: java.util.ArrayList m_predictorTerms> = $r1;

        this.<weka.classifiers.pmml.consumer.Regression$RegressionTable: weka.core.pmml.MiningSchema m_miningSchema> = mSchema;

        this.<weka.classifiers.pmml.consumer.Regression$RegressionTable: int m_functionType> = functionType;

        $r2 = this.<weka.classifiers.pmml.consumer.Regression$RegressionTable: weka.core.pmml.MiningSchema m_miningSchema>;

        miningSchema = virtualinvoke $r2.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        intercept = interfaceinvoke table.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("intercept");

        $i0 = virtualinvoke intercept.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label01;

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(intercept);

        this.<weka.classifiers.pmml.consumer.Regression$RegressionTable: double m_intercept> = $d0;

     label01:
        $i1 = this.<weka.classifiers.pmml.consumer.Regression$RegressionTable: int m_functionType>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 != 1 goto label05;

        targetCat = interfaceinvoke table.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("targetCategory");

        $i2 = virtualinvoke targetCat.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 <= 0 goto label04;

        classA = virtualinvoke miningSchema.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        i#40 = 0;

     label02:
        $i3 = virtualinvoke classA.<weka.core.Attribute: int numValues()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#40);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if i#40 >= $i3 goto label04;

        $r3 = virtualinvoke classA.<weka.core.Attribute: java.lang.String value(int)>(i#40);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(targetCat);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label03;

        this.<weka.classifiers.pmml.consumer.Regression$RegressionTable: int m_targetCategory> = i#40;

     label03:
        i#40 = i#40 + 1;

        goto label02;

     label04:
        $i4 = this.<weka.classifiers.pmml.consumer.Regression$RegressionTable: int m_targetCategory>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 != -1 goto label05;

        $r4 = new java.lang.Exception;

        specialinvoke $r4.<java.lang.Exception: void <init>(java.lang.String)>("[RegressionTable] No target categories defined for classification");

        throw $r4;

     label05:
        numericPs = interfaceinvoke table.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("NumericPredictor");

        i#61 = 0;

     label06:
        $i5 = interfaceinvoke numericPs.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#61);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if i#61 >= $i5 goto label08;

        nP = interfaceinvoke numericPs.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i#61);

        $s6 = interfaceinvoke nP.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s6);

        if $s6 != 1 goto label07;

        $r5 = new weka.classifiers.pmml.consumer.Regression$RegressionTable$NumericPredictor;

        $r6 = (org.w3c.dom.Element) nP;

        specialinvoke $r5.<weka.classifiers.pmml.consumer.Regression$RegressionTable$NumericPredictor: void <init>(weka.classifiers.pmml.consumer.Regression$RegressionTable,org.w3c.dom.Element,weka.core.Instances)>(this, $r6, miningSchema);

        numP = $r5;

        $r7 = this.<weka.classifiers.pmml.consumer.Regression$RegressionTable: java.util.ArrayList m_predictors>;

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(numP);

     label07:
        i#61 = i#61 + 1;

        goto label06;

     label08:
        categoricalPs = interfaceinvoke table.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("CategoricalPredictor");

        i#85 = 0;

     label09:
        $i7 = interfaceinvoke categoricalPs.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#85);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if i#85 >= $i7 goto label11;

        cP = interfaceinvoke categoricalPs.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i#85);

        $s8 = interfaceinvoke cP.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s8);

        if $s8 != 1 goto label10;

        $r8 = new weka.classifiers.pmml.consumer.Regression$RegressionTable$CategoricalPredictor;

        $r9 = (org.w3c.dom.Element) cP;

        specialinvoke $r8.<weka.classifiers.pmml.consumer.Regression$RegressionTable$CategoricalPredictor: void <init>(weka.classifiers.pmml.consumer.Regression$RegressionTable,org.w3c.dom.Element,weka.core.Instances)>(this, $r9, miningSchema);

        catP = $r8;

        $r10 = this.<weka.classifiers.pmml.consumer.Regression$RegressionTable: java.util.ArrayList m_predictors>;

        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>(catP);

     label10:
        i#85 = i#85 + 1;

        goto label09;

     label11:
        predictorTerms = interfaceinvoke table.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("PredictorTerm");

        i#109 = 0;

     label12:
        $i9 = interfaceinvoke predictorTerms.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#109);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        if i#109 >= $i9 goto label13;

        pT = interfaceinvoke predictorTerms.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i#109);

        $r11 = new weka.classifiers.pmml.consumer.Regression$RegressionTable$PredictorTerm;

        $r12 = (org.w3c.dom.Element) pT;

        specialinvoke $r11.<weka.classifiers.pmml.consumer.Regression$RegressionTable$PredictorTerm: void <init>(weka.classifiers.pmml.consumer.Regression$RegressionTable,org.w3c.dom.Element,weka.core.Instances)>(this, $r12, miningSchema);

        predT = $r11;

        $r13 = this.<weka.classifiers.pmml.consumer.Regression$RegressionTable: java.util.ArrayList m_predictorTerms>;

        virtualinvoke $r13.<java.util.ArrayList: boolean add(java.lang.Object)>(predT);

        i#109 = i#109 + 1;

        goto label12;

     label13:
        return;
    }

    public void predict(double[], double[])
    {
        weka.classifiers.pmml.consumer.Regression$RegressionTable this;
        double[] preds, input;
        weka.classifiers.pmml.consumer.Regression$RegressionTable$Predictor p;
        weka.classifiers.pmml.consumer.Regression$RegressionTable$PredictorTerm pt;
        int $i0, $i1, i#14, $i2, i#28, $i3;
        double $d0, $d1;
        java.util.ArrayList $r0, $r1, $r3, $r4;
        java.lang.Object $r2, $r5;

        this := @this: weka.classifiers.pmml.consumer.Regression$RegressionTable;

        preds := @parameter0: double[];

        input := @parameter1: double[];

        $i0 = this.<weka.classifiers.pmml.consumer.Regression$RegressionTable: int m_targetCategory>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != -1 goto label1;

        $d0 = this.<weka.classifiers.pmml.consumer.Regression$RegressionTable: double m_intercept>;

        preds[0] = $d0;

        goto label2;

     label1:
        $i1 = this.<weka.classifiers.pmml.consumer.Regression$RegressionTable: int m_targetCategory>;

        $d1 = this.<weka.classifiers.pmml.consumer.Regression$RegressionTable: double m_intercept>;

        preds[$i1] = $d1;

     label2:
        i#14 = 0;

     label3:
        $r0 = this.<weka.classifiers.pmml.consumer.Regression$RegressionTable: java.util.ArrayList m_predictors>;

        $i2 = virtualinvoke $r0.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#14);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#14 >= $i2 goto label4;

        $r1 = this.<weka.classifiers.pmml.consumer.Regression$RegressionTable: java.util.ArrayList m_predictors>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>(i#14);

        p = (weka.classifiers.pmml.consumer.Regression$RegressionTable$Predictor) $r2;

        virtualinvoke p.<weka.classifiers.pmml.consumer.Regression$RegressionTable$Predictor: void add(double[],double[])>(preds, input);

        i#14 = i#14 + 1;

        goto label3;

     label4:
        i#28 = 0;

     label5:
        $r3 = this.<weka.classifiers.pmml.consumer.Regression$RegressionTable: java.util.ArrayList m_predictorTerms>;

        $i3 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#28);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if i#28 >= $i3 goto label6;

        $r4 = this.<weka.classifiers.pmml.consumer.Regression$RegressionTable: java.util.ArrayList m_predictorTerms>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i#28);

        pt = (weka.classifiers.pmml.consumer.Regression$RegressionTable$PredictorTerm) $r5;

        virtualinvoke pt.<weka.classifiers.pmml.consumer.Regression$RegressionTable$PredictorTerm: void add(double[],double[])>(preds, input);

        i#28 = i#28 + 1;

        goto label5;

     label6:
        return;
    }

    public java.lang.String toString()
    {
        weka.classifiers.pmml.consumer.Regression$RegressionTable this;
        weka.core.Instances miningSchema;
        java.lang.StringBuffer temp, $r1;
        weka.core.pmml.MiningSchema $r0;
        weka.core.Attribute $r3, $r8;
        java.lang.String $r4, $r9, $r11, $r19, $r22, $r29, $r32, $r34, $r37;
        int $i0, $i1, i#34, $i2, i#54, $i3;
        java.lang.StringBuilder $r6, $r7, $r10, $r15, $r20, $r21, $r25, $r30, $r31;
        java.util.ArrayList $r14, $r16, $r24, $r26;
        java.lang.Object $r17, $r27;
        weka.classifiers.pmml.consumer.Regression$RegressionTable$Predictor $r18;
        weka.classifiers.pmml.consumer.Regression$RegressionTable$PredictorTerm $r28;
        double $d0;

        this := @this: weka.classifiers.pmml.consumer.Regression$RegressionTable;

        $r0 = this.<weka.classifiers.pmml.consumer.Regression$RegressionTable: weka.core.pmml.MiningSchema m_miningSchema>;

        miningSchema = virtualinvoke $r0.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        temp = $r1;

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Regression table:\n");

        $r3 = virtualinvoke miningSchema.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $r4 = virtualinvoke $r3.<weka.core.Attribute: java.lang.String name()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $i0 = this.<weka.classifiers.pmml.consumer.Regression$RegressionTable: int m_functionType>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 1 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r8 = virtualinvoke miningSchema.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $i1 = this.<weka.classifiers.pmml.consumer.Regression$RegressionTable: int m_targetCategory>;

        $r9 = virtualinvoke $r8.<weka.core.Attribute: java.lang.String value(int)>($i1);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

     label1:
        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" =\n\n");

        i#34 = 0;

     label2:
        $r14 = this.<weka.classifiers.pmml.consumer.Regression$RegressionTable: java.util.ArrayList m_predictors>;

        $i2 = virtualinvoke $r14.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#34);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#34 >= $i2 goto label3;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = this.<weka.classifiers.pmml.consumer.Regression$RegressionTable: java.util.ArrayList m_predictors>;

        $r17 = virtualinvoke $r16.<java.util.ArrayList: java.lang.Object get(int)>(i#34);

        $r18 = (weka.classifiers.pmml.consumer.Regression$RegressionTable$Predictor) $r17;

        $r19 = virtualinvoke $r18.<weka.classifiers.pmml.consumer.Regression$RegressionTable$Predictor: java.lang.String toString()>();

        $r20 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" +\n");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        i#34 = i#34 + 1;

        goto label2;

     label3:
        i#54 = 0;

     label4:
        $r24 = this.<weka.classifiers.pmml.consumer.Regression$RegressionTable: java.util.ArrayList m_predictorTerms>;

        $i3 = virtualinvoke $r24.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#54);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if i#54 >= $i3 goto label5;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = this.<weka.classifiers.pmml.consumer.Regression$RegressionTable: java.util.ArrayList m_predictorTerms>;

        $r27 = virtualinvoke $r26.<java.util.ArrayList: java.lang.Object get(int)>(i#54);

        $r28 = (weka.classifiers.pmml.consumer.Regression$RegressionTable$PredictorTerm) $r27;

        $r29 = virtualinvoke $r28.<weka.classifiers.pmml.consumer.Regression$RegressionTable$PredictorTerm: java.lang.String toString()>();

        $r30 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" +\n");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r32);

        i#54 = i#54 + 1;

        goto label4;

     label5:
        $d0 = this.<weka.classifiers.pmml.consumer.Regression$RegressionTable: double m_intercept>;

        $r34 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>($d0, 12, 4);

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r34);

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\n");

        $r37 = virtualinvoke temp.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r37;
    }


