    static void <clinit>()
    {
        double d, $d0, $d1, $d2, $d3;
        double[] $r0, $r1;
        int i#6;
        byte $b0;

        $d0 = staticinvoke <java.lang.Math: double log(double)>(2.0);

        <weka.core.ContingencyTables: double log2> = $d0;

        $r0 = newarray (double)[10000];

        <weka.core.ContingencyTables: double[] INT_N_LOG_N_CACHE> = $r0;

        i#6 = 1;

     label1:
        $d1 = (double) i#6;

        $b0 = $d1 cmpg 10000.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 >= 0 goto label2;

        d = (double) i#6;

        $r1 = <weka.core.ContingencyTables: double[] INT_N_LOG_N_CACHE>;

        $d2 = staticinvoke <java.lang.Math: double log(double)>(d);

        $d3 = d * $d2;

        $r1[i#6] = $d3;

        i#6 = i#6 + 1;

        goto label1;

     label2:
        return;
    }

    public static double lnFunc(double)
    {
        double num, $d0, $d1, $d2, $d3;
        int n;
        byte $b0, $b1, $b2;
        double[] $r0;

        num := @parameter0: double;

        $b0 = num cmpg 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 > 0 goto label1;

        return 0.0;

     label1:
        $b1 = num cmpg 10000.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 >= 0 goto label2;

        n = (int) num;

        $d0 = (double) n;

        $b2 = $d0 cmpl num;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b2);

        if $b2 != 0 goto label2;

        $r0 = <weka.core.ContingencyTables: double[] INT_N_LOG_N_CACHE>;

        $d1 = $r0[n];

        return $d1;

     label2:
        $d2 = staticinvoke <java.lang.Math: double log(double)>(num);

        $d3 = num * $d2;

        return $d3;
    }


