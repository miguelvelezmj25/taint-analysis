    public boolean forward(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.transform.DWT_DCT this;
        kanzi.SliceIntArray src, dst, sa, $r2;
        int count, d2, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, j#47, $i9, $i10, $i11, j#69, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;
        boolean $z0, $z1, $z2, $z3;
        int[] $r0, $r1, $r3, $r5, $r6, $r8, $r9;
        kanzi.IntTransform $r4, $r7;

        this := @this: kanzi.transform.DWT_DCT;

        src := @parameter0: kanzi.SliceIntArray;

        dst := @parameter1: kanzi.SliceIntArray;

        $z0 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(src);

        if $z0 == 0 goto label01;

        $z1 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(dst);

        if $z1 != 0 goto label02;

     label01:
        return 0;

     label02:
        $i0 = this.<kanzi.transform.DWT_DCT: int dim>;

        $i1 = this.<kanzi.transform.DWT_DCT: int dim>;

        count = $i0 * $i1;

        $i2 = src.<kanzi.SliceIntArray: int length>;

        if $i2 == count goto label03;

        return 0;

     label03:
        $r0 = dst.<kanzi.SliceIntArray: int[] array>;

        $i3 = lengthof $r0;

        if $i3 >= count goto label04;

        return 0;

     label04:
        $i4 = dst.<kanzi.SliceIntArray: int index>;

        $i5 = $i4 + count;

        $r1 = dst.<kanzi.SliceIntArray: int[] array>;

        $i6 = lengthof $r1;

        if $i5 <= $i6 goto label05;

        return 0;

     label05:
        $i7 = this.<kanzi.transform.DWT_DCT: int dim>;

        d2 = $i7 >> 1;

        $r2 = new kanzi.SliceIntArray;

        $r3 = this.<kanzi.transform.DWT_DCT: int[] buffer>;

        $i8 = d2 * d2;

        specialinvoke $r2.<kanzi.SliceIntArray: void <init>(int[],int,int)>($r3, $i8, 0);

        sa = $r2;

        $r4 = this.<kanzi.transform.DWT_DCT: kanzi.IntTransform dwt>;

        $z2 = interfaceinvoke $r4.<kanzi.IntTransform: boolean forward(kanzi.SliceIntArray,kanzi.SliceIntArray)>(src, dst);

        if $z2 != 0 goto label06;

        return 0;

     label06:
        j#47 = 0;

     label07:
        if j#47 >= d2 goto label08;

        $r5 = dst.<kanzi.SliceIntArray: int[] array>;

        $i9 = this.<kanzi.transform.DWT_DCT: int dim>;

        $i10 = j#47 * $i9;

        $r6 = this.<kanzi.transform.DWT_DCT: int[] buffer>;

        $i11 = j#47 * d2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i10, $r6, $i11, d2);

        j#47 = j#47 + 1;

        goto label07;

     label08:
        $r7 = this.<kanzi.transform.DWT_DCT: kanzi.IntTransform dct>;

        $z3 = interfaceinvoke $r7.<kanzi.IntTransform: boolean forward(kanzi.SliceIntArray,kanzi.SliceIntArray)>(sa, sa);

        if $z3 != 0 goto label09;

        return 0;

     label09:
        j#69 = 0;

     label10:
        if j#69 >= d2 goto label11;

        $r8 = this.<kanzi.transform.DWT_DCT: int[] buffer>;

        $i12 = j#69 * d2;

        $r9 = dst.<kanzi.SliceIntArray: int[] array>;

        $i13 = this.<kanzi.transform.DWT_DCT: int dim>;

        $i14 = j#69 * $i13;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, $i12, $r9, $i14, d2);

        j#69 = j#69 + 1;

        goto label10;

     label11:
        $i15 = src.<kanzi.SliceIntArray: int index>;

        $i16 = $i15 + count;

        $i17 = src.<kanzi.SliceIntArray: int length>;

        if $i16 <= $i17 goto label12;

        return 0;

     label12:
        $i18 = dst.<kanzi.SliceIntArray: int index>;

        $i19 = $i18 + count;

        $i20 = dst.<kanzi.SliceIntArray: int length>;

        if $i19 <= $i20 goto label13;

        return 0;

     label13:
        return 1;
    }

    public boolean inverse(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.transform.DWT_DCT this;
        kanzi.SliceIntArray src, dst, sa, $r2;
        int count, d2, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, j#41, $i9, $i10, $i11, j#63, $i12, $i13, $i14;
        boolean $z0, $z1, $z2, $z3;
        int[] $r0, $r1, $r3, $r4, $r5, $r7, $r8;
        kanzi.IntTransform $r6, $r9;

        this := @this: kanzi.transform.DWT_DCT;

        src := @parameter0: kanzi.SliceIntArray;

        dst := @parameter1: kanzi.SliceIntArray;

        $z0 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(src);

        if $z0 == 0 goto label01;

        $z1 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(dst);

        if $z1 != 0 goto label02;

     label01:
        return 0;

     label02:
        $i0 = this.<kanzi.transform.DWT_DCT: int dim>;

        $i1 = this.<kanzi.transform.DWT_DCT: int dim>;

        count = $i0 * $i1;

        $i2 = src.<kanzi.SliceIntArray: int length>;

        if $i2 == count goto label03;

        return 0;

     label03:
        $r0 = dst.<kanzi.SliceIntArray: int[] array>;

        $i3 = lengthof $r0;

        if $i3 >= count goto label04;

        return 0;

     label04:
        $i4 = dst.<kanzi.SliceIntArray: int index>;

        $i5 = $i4 + count;

        $r1 = dst.<kanzi.SliceIntArray: int[] array>;

        $i6 = lengthof $r1;

        if $i5 <= $i6 goto label05;

        return 0;

     label05:
        $i7 = this.<kanzi.transform.DWT_DCT: int dim>;

        d2 = $i7 >> 1;

        $r2 = new kanzi.SliceIntArray;

        $r3 = this.<kanzi.transform.DWT_DCT: int[] buffer>;

        $i8 = d2 * d2;

        specialinvoke $r2.<kanzi.SliceIntArray: void <init>(int[],int,int)>($r3, $i8, 0);

        sa = $r2;

        j#41 = 0;

     label06:
        if j#41 >= d2 goto label07;

        $r4 = src.<kanzi.SliceIntArray: int[] array>;

        $i9 = this.<kanzi.transform.DWT_DCT: int dim>;

        $i10 = j#41 * $i9;

        $r5 = this.<kanzi.transform.DWT_DCT: int[] buffer>;

        $i11 = j#41 * d2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i10, $r5, $i11, d2);

        j#41 = j#41 + 1;

        goto label06;

     label07:
        $r6 = this.<kanzi.transform.DWT_DCT: kanzi.IntTransform dct>;

        $z2 = interfaceinvoke $r6.<kanzi.IntTransform: boolean inverse(kanzi.SliceIntArray,kanzi.SliceIntArray)>(sa, sa);

        if $z2 != 0 goto label08;

        return 0;

     label08:
        j#63 = 0;

     label09:
        if j#63 >= d2 goto label10;

        $r7 = this.<kanzi.transform.DWT_DCT: int[] buffer>;

        $i12 = j#63 * d2;

        $r8 = src.<kanzi.SliceIntArray: int[] array>;

        $i13 = this.<kanzi.transform.DWT_DCT: int dim>;

        $i14 = j#63 * $i13;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, $i12, $r8, $i14, d2);

        j#63 = j#63 + 1;

        goto label09;

     label10:
        $r9 = this.<kanzi.transform.DWT_DCT: kanzi.IntTransform dwt>;

        $z3 = interfaceinvoke $r9.<kanzi.IntTransform: boolean inverse(kanzi.SliceIntArray,kanzi.SliceIntArray)>(src, dst);

        return $z3;
    }


