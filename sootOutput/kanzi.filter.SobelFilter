    public void <init>(int, int, int, int, int, int, boolean)
    {
        kanzi.filter.SobelFilter this;
        int width, height, stride, direction, channels, filterType, $i0, $i1;
        boolean processBoundaries;
        java.lang.IllegalArgumentException $r0, $r1, $r2, $r3, $r4, $r5, $r6;

        this := @this: kanzi.filter.SobelFilter;

        width := @parameter0: int;

        height := @parameter1: int;

        stride := @parameter2: int;

        direction := @parameter3: int;

        channels := @parameter4: int;

        filterType := @parameter5: int;

        processBoundaries := @parameter6: boolean;

        specialinvoke this.<java.lang.Object: void <init>()>();

        if height >= 8 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The height must be at least 8");

        throw $r0;

     label1:
        if width >= 8 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The width must be at least 8");

        throw $r1;

     label2:
        if stride >= 8 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The stride must be at least 8");

        throw $r2;

     label3:
        $i0 = direction & 3;

        if $i0 != 0 goto label4;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid direction parameter (must be VERTICAL or HORIZONTAL or both)");

        throw $r3;

     label4:
        $i1 = direction & -4;

        if $i1 == 0 goto label5;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid direction parameter (must be VERTICAL or HORIZONTAL or both)");

        throw $r4;

     label5:
        if filterType == 1 goto label6;

        if filterType == 0 goto label6;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid filter type parameter (must be IMAGE or COST)");

        throw $r5;

     label6:
        if channels == 3 goto label7;

        if channels == 0 goto label7;

        if channels == 1 goto label7;

        if channels == 2 goto label7;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid input channel parameter (must be RGB or R or G or B)");

        throw $r6;

     label7:
        this.<kanzi.filter.SobelFilter: int height> = height;

        this.<kanzi.filter.SobelFilter: int width> = width;

        this.<kanzi.filter.SobelFilter: int stride> = stride;

        this.<kanzi.filter.SobelFilter: int direction> = direction;

        this.<kanzi.filter.SobelFilter: int filterType> = filterType;

        this.<kanzi.filter.SobelFilter: int channels> = channels;

        this.<kanzi.filter.SobelFilter: boolean processBoundaries> = processBoundaries;

        return;
    }

    public boolean apply(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.filter.SobelFilter this;
        kanzi.SliceIntArray input, output;
        int[] src, dst;
        boolean isVertical, isHorizontal, isPacked, $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        byte shiftChannel, $b6;
        short mask, $s9;
        int h, w, st, srcLine, endLine, dstLine, pixel00, pixel01, pixel10, pixel11, pixel20, pixel21, pixel02, pixel12, pixel22, firstLine, lastLine, srcStart#12, dstStart#15, $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8, y#49, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, val00#103, $i20, $i21, $i22, $i23, $i24, $i25, $i26, val01#121, $i27, $i28, $i29, $i30, $i31, $i32, $i33, val10#139, $i34, $i35, $i36, $i37, $i38, $i39, $i40, val11#157, $i41, $i42, $i43, $i44, $i45, $i46, $i47, val20#175, $i48, $i49, $i50, $i51, $i52, $i53, $i54, val21#193, $i55, $i56, $i57, $i58, $i59, $i60, x#225, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, val02#262, $i71, $i72, $i73, $i74, $i75, $i76, $i77, val12#280, $i78, $i79, $i80, $i81, $i82, $i83, $i84, val22#298, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, val#332, $i95, $i96, $i97, val#342, $i98, $i99, $i100, $i101, $i102, $i103, valV#360, $i104, $i105, $i106, valV#370, $i107, $i108, $i109, $i110, $i111, $i112, $i113, val#391, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136;

        this := @this: kanzi.filter.SobelFilter;

        input := @parameter0: kanzi.SliceIntArray;

        output := @parameter1: kanzi.SliceIntArray;

        $z0 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(input);

        if $z0 == 0 goto label01;

        $z1 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(output);

        if $z1 != 0 goto label02;

     label01:
        return 0;

     label02:
        src = input.<kanzi.SliceIntArray: int[] array>;

        dst = output.<kanzi.SliceIntArray: int[] array>;

        srcStart#12 = input.<kanzi.SliceIntArray: int index>;

        dstStart#15 = output.<kanzi.SliceIntArray: int index>;

        $i0 = this.<kanzi.filter.SobelFilter: int direction>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label03;

        $z2 = 1;

        goto label04;

     label03:
        $z2 = 0;

     label04:
        isVertical = $z2;

        $i2 = this.<kanzi.filter.SobelFilter: int direction>;

        $i3 = $i2 & 1;

        if $i3 == 0 goto label05;

        $z3 = 1;

        goto label06;

     label05:
        $z3 = 0;

     label06:
        isHorizontal = $z3;

        $i4 = this.<kanzi.filter.SobelFilter: int channels>;

        if $i4 != 3 goto label07;

        $z4 = 1;

        goto label08;

     label07:
        $z4 = 0;

     label08:
        isPacked = $z4;

        $i5 = this.<kanzi.filter.SobelFilter: int channels>;

        if $i5 != 0 goto label09;

        $b6 = 16;

        goto label11;

     label09:
        $i7 = this.<kanzi.filter.SobelFilter: int channels>;

        if $i7 != 1 goto label10;

        $b6 = 8;

        goto label11;

     label10:
        $b6 = 0;

     label11:
        shiftChannel = $b6;

        $i8 = this.<kanzi.filter.SobelFilter: int filterType>;

        if $i8 != 1 goto label12;

        $s9 = 255;

        goto label13;

     label12:
        $s9 = -1;

     label13:
        mask = $s9;

        h = this.<kanzi.filter.SobelFilter: int height>;

        w = this.<kanzi.filter.SobelFilter: int width>;

        st = this.<kanzi.filter.SobelFilter: int stride>;

        y#49 = h - 2;

     label14:
        if y#49 <= 0 goto label26;

        srcLine = srcStart#12 + st;

        endLine = srcLine + st;

        dstLine = dstStart#15 + st;

        pixel00 = src[srcStart#12];

        $i10 = srcStart#12 + 1;

        pixel01 = src[$i10];

        pixel10 = src[srcLine];

        $i11 = srcLine + 1;

        pixel11 = src[$i11];

        pixel20 = src[endLine];

        $i12 = endLine + 1;

        pixel21 = src[$i12];

        if isPacked != 1 goto label15;

        $i13 = pixel00 >> 16;

        $i14 = $i13 & 255;

        $i15 = pixel00 >> 7;

        $i16 = $i15 & 510;

        $i17 = $i14 + $i16;

        $i18 = pixel00 & 255;

        $i19 = $i17 + $i18;

        val00#103 = $i19 >> 2;

        $i20 = pixel01 >> 16;

        $i21 = $i20 & 255;

        $i22 = pixel01 >> 7;

        $i23 = $i22 & 510;

        $i24 = $i21 + $i23;

        $i25 = pixel01 & 255;

        $i26 = $i24 + $i25;

        val01#121 = $i26 >> 2;

        $i27 = pixel10 >> 16;

        $i28 = $i27 & 255;

        $i29 = pixel10 >> 7;

        $i30 = $i29 & 510;

        $i31 = $i28 + $i30;

        $i32 = pixel10 & 255;

        $i33 = $i31 + $i32;

        val10#139 = $i33 >> 2;

        $i34 = pixel11 >> 16;

        $i35 = $i34 & 255;

        $i36 = pixel11 >> 7;

        $i37 = $i36 & 510;

        $i38 = $i35 + $i37;

        $i39 = pixel11 & 255;

        $i40 = $i38 + $i39;

        val11#157 = $i40 >> 2;

        $i41 = pixel20 >> 16;

        $i42 = $i41 & 255;

        $i43 = pixel20 >> 7;

        $i44 = $i43 & 510;

        $i45 = $i42 + $i44;

        $i46 = pixel20 & 255;

        $i47 = $i45 + $i46;

        val20#175 = $i47 >> 2;

        $i48 = pixel21 >> 16;

        $i49 = $i48 & 255;

        $i50 = pixel21 >> 7;

        $i51 = $i50 & 510;

        $i52 = $i49 + $i51;

        $i53 = pixel21 & 255;

        $i54 = $i52 + $i53;

        val21#193 = $i54 >> 2;

        goto label16;

     label15:
        $i55 = pixel00 >> shiftChannel;

        val00#103 = $i55 & 255;

        $i56 = pixel01 >> shiftChannel;

        val01#121 = $i56 & 255;

        $i57 = pixel10 >> shiftChannel;

        val10#139 = $i57 & 255;

        $i58 = pixel11 >> shiftChannel;

        val11#157 = $i58 & 255;

        $i59 = pixel20 >> shiftChannel;

        val20#175 = $i59 & 255;

        $i60 = pixel21 >> shiftChannel;

        val21#193 = $i60 & 255;

     label16:
        x#225 = 2;

     label17:
        if x#225 >= w goto label24;

        $i61 = srcStart#12 + x#225;

        pixel02 = src[$i61];

        $i62 = srcLine + x#225;

        pixel12 = src[$i62];

        $i63 = endLine + x#225;

        pixel22 = src[$i63];

        if isPacked != 1 goto label18;

        $i64 = pixel02 >> 16;

        $i65 = $i64 & 255;

        $i66 = pixel02 >> 7;

        $i67 = $i66 & 510;

        $i68 = $i65 + $i67;

        $i69 = pixel02 & 255;

        $i70 = $i68 + $i69;

        val02#262 = $i70 >> 2;

        $i71 = pixel12 >> 16;

        $i72 = $i71 & 255;

        $i73 = pixel12 >> 7;

        $i74 = $i73 & 510;

        $i75 = $i72 + $i74;

        $i76 = pixel12 & 255;

        $i77 = $i75 + $i76;

        val12#280 = $i77 >> 2;

        $i78 = pixel22 >> 16;

        $i79 = $i78 & 255;

        $i80 = pixel22 >> 7;

        $i81 = $i80 & 510;

        $i82 = $i79 + $i81;

        $i83 = pixel22 & 255;

        $i84 = $i82 + $i83;

        val22#298 = $i84 >> 2;

        goto label19;

     label18:
        $i85 = pixel02 >> shiftChannel;

        val02#262 = $i85 & 255;

        $i86 = pixel12 >> shiftChannel;

        val12#280 = $i86 & 255;

        $i87 = pixel22 >> shiftChannel;

        val22#298 = $i87 & 255;

     label19:
        if isHorizontal != 1 goto label20;

        $i88 = neg val00#103;

        $i89 = $i88 + val02#262;

        $i90 = $i89 - val10#139;

        $i91 = $i90 - val10#139;

        $i92 = $i91 + val12#280;

        $i93 = $i92 + val12#280;

        $i94 = $i93 - val20#175;

        val#332 = $i94 + val22#298;

        $i95 = val#332 >> 31;

        $i96 = val#332 + $i95;

        $i97 = val#332 >> 31;

        val#342 = $i96 ^ $i97;

        if isVertical != 1 goto label21;

        $i98 = val00#103 + val01#121;

        $i99 = $i98 + val01#121;

        $i100 = $i99 + val02#262;

        $i101 = $i100 - val20#175;

        $i102 = $i101 - val21#193;

        $i103 = $i102 - val21#193;

        valV#360 = $i103 - val22#298;

        $i104 = valV#360 >> 31;

        $i105 = valV#360 + $i104;

        $i106 = valV#360 >> 31;

        valV#370 = $i105 ^ $i106;

        $i107 = val#342 + valV#370;

        val#342 = $i107 >> 1;

        goto label21;

     label20:
        $i108 = val00#103 + val01#121;

        $i109 = $i108 + val01#121;

        $i110 = $i109 + val02#262;

        $i111 = $i110 - val20#175;

        $i112 = $i111 - val21#193;

        $i113 = $i112 - val21#193;

        val#391 = $i113 - val22#298;

        $i114 = val#391 >> 31;

        $i115 = val#391 + $i114;

        $i116 = val#391 >> 31;

        val#342 = $i115 ^ $i116;

     label21:
        $i117 = dstLine + x#225;

        $i118 = $i117 - 1;

        if val#342 <= 255 goto label22;

        $i119 = mask;

        goto label23;

     label22:
        $i120 = val#342 << 16;

        $i121 = -16777216 | $i120;

        $i122 = val#342 << 8;

        $i123 = $i121 | $i122;

        $i124 = $i123 | val#342;

        $i119 = $i124 & mask;

     label23:
        dst[$i118] = $i119;

        val00#103 = val01#121;

        val01#121 = val02#262;

        val10#139 = val11#157;

        val11#157 = val12#280;

        val20#175 = val21#193;

        val21#193 = val22#298;

        x#225 = x#225 + 1;

        goto label17;

     label24:
        $z5 = this.<kanzi.filter.SobelFilter: boolean processBoundaries>;

        if $z5 != 1 goto label25;

        $i125 = dstLine + 1;

        $i126 = dst[$i125];

        dst[dstLine] = $i126;

        $i127 = dstLine + w;

        $i128 = $i127 - 1;

        $i129 = dstLine + w;

        $i130 = $i129 - 2;

        $i131 = dst[$i130];

        dst[$i128] = $i131;

     label25:
        srcStart#12 = srcLine;

        dstStart#15 = dstLine;

        y#49 = y#49 + -1;

        goto label14;

     label26:
        firstLine = output.<kanzi.SliceIntArray: int index>;

        $i132 = output.<kanzi.SliceIntArray: int index>;

        $i133 = h - 1;

        $i134 = st * $i133;

        lastLine = $i132 + $i134;

        $z6 = this.<kanzi.filter.SobelFilter: boolean processBoundaries>;

        if $z6 != 1 goto label27;

        $i135 = firstLine + st;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(dst, $i135, dst, firstLine, w);

        $i136 = lastLine - st;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(dst, $i136, dst, lastLine, w);

     label27:
        return 1;
    }


