    public void dispose()
    {
        kanzi.entropy.ANSRangeDecoder this;

        this := @this: kanzi.entropy.ANSRangeDecoder;

        return;
    }

    public void <init>(kanzi.InputBitStream, int)
    {
        kanzi.entropy.ANSRangeDecoder this;
        kanzi.InputBitStream bs;
        int order, $i0, $i1, $i2;

        this := @this: kanzi.entropy.ANSRangeDecoder;

        bs := @parameter0: kanzi.InputBitStream;

        order := @parameter1: int;

        $i0 = order & 1;

        $i1 = 8 * $i0;

        $i2 = 32768 << $i1;

        specialinvoke this.<kanzi.entropy.ANSRangeDecoder: void <init>(kanzi.InputBitStream,int,int)>(bs, order, $i2);

        return;
    }

    public void <init>(kanzi.InputBitStream, int, int)
    {
        kanzi.entropy.ANSRangeDecoder this;
        kanzi.InputBitStream bs;
        int order, chunkSize, dim, $i0, i#51;
        java.lang.NullPointerException $r0;
        java.lang.IllegalArgumentException $r1, $r2, $r3;
        int[][] $r4, $r5, $r8, $r10;
        byte[][] $r6, $r12;
        kanzi.entropy.ANSRangeDecoder$Symbol[][] $r7, $r14;
        int[] $r9, $r11;
        byte[] $r13;
        kanzi.entropy.ANSRangeDecoder$Symbol[] $r15;

        this := @this: kanzi.entropy.ANSRangeDecoder;

        bs := @parameter0: kanzi.InputBitStream;

        order := @parameter1: int;

        chunkSize := @parameter2: int;

        specialinvoke this.<java.lang.Object: void <init>()>();

        if bs != null goto label1;

        $r0 = new java.lang.NullPointerException;

        specialinvoke $r0.<java.lang.NullPointerException: void <init>(java.lang.String)>("Invalid null bitstream parameter");

        throw $r0;

     label1:
        if order == 0 goto label2;

        if order == 1 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The order must be 0 or 1");

        throw $r1;

     label2:
        if chunkSize == 0 goto label3;

        if chunkSize >= 1024 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The chunk size must be at least 1024");

        throw $r2;

     label3:
        if chunkSize <= 1073741824 goto label4;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The chunk size must be at most 2^30");

        throw $r3;

     label4:
        this.<kanzi.entropy.ANSRangeDecoder: kanzi.InputBitStream bitstream> = bs;

        this.<kanzi.entropy.ANSRangeDecoder: int chunkSize> = chunkSize;

        this.<kanzi.entropy.ANSRangeDecoder: int order> = order;

        $i0 = 255 * order;

        dim = $i0 + 1;

        $r4 = newmultiarray (int)[dim][256];

        this.<kanzi.entropy.ANSRangeDecoder: int[][] alphabet> = $r4;

        $r5 = newmultiarray (int)[dim][256];

        this.<kanzi.entropy.ANSRangeDecoder: int[][] freqs> = $r5;

        $r6 = newmultiarray (byte)[dim][256];

        this.<kanzi.entropy.ANSRangeDecoder: byte[][] f2s> = $r6;

        $r7 = newmultiarray (kanzi.entropy.ANSRangeDecoder$Symbol)[dim][256];

        this.<kanzi.entropy.ANSRangeDecoder: kanzi.entropy.ANSRangeDecoder$Symbol[][] symbols> = $r7;

        i#51 = 0;

     label5:
        if i#51 >= dim goto label6;

        $r8 = this.<kanzi.entropy.ANSRangeDecoder: int[][] alphabet>;

        $r9 = newarray (int)[256];

        $r8[i#51] = $r9;

        $r10 = this.<kanzi.entropy.ANSRangeDecoder: int[][] freqs>;

        $r11 = newarray (int)[256];

        $r10[i#51] = $r11;

        $r12 = this.<kanzi.entropy.ANSRangeDecoder: byte[][] f2s>;

        $r13 = newarray (byte)[0];

        $r12[i#51] = $r13;

        $r14 = this.<kanzi.entropy.ANSRangeDecoder: kanzi.entropy.ANSRangeDecoder$Symbol[][] symbols>;

        $r15 = newarray (kanzi.entropy.ANSRangeDecoder$Symbol)[256];

        $r14[i#51] = $r15;

        i#51 = i#51 + 1;

        goto label5;

     label6:
        return;
    }

    public int decode(byte[], int, int)
    {
        kanzi.entropy.ANSRangeDecoder this;
        byte[] block;
        int blkptr, len, end, sz, endk, endChunk, $i0, $i1, $i2, $i3, startChunk#20, $i4, $i5, k#28, i#36, $i6, $i7, $i8, $i9;
        kanzi.entropy.ANSRangeDecoder$Symbol[] syms;
        kanzi.entropy.ANSRangeDecoder$Symbol[][] $r0;
        kanzi.entropy.ANSRangeDecoder$Symbol $r1;
        int[][] $r2;

        this := @this: kanzi.entropy.ANSRangeDecoder;

        block := @parameter0: byte[];

        blkptr := @parameter1: int;

        len := @parameter2: int;

        if block == null goto label01;

        $i0 = blkptr + len;

        $i1 = lengthof block;

        if $i0 > $i1 goto label01;

        if blkptr < 0 goto label01;

        if len >= 0 goto label02;

     label01:
        return -1;

     label02:
        if len != 0 goto label03;

        return 0;

     label03:
        end = blkptr + len;

        $i2 = this.<kanzi.entropy.ANSRangeDecoder: int chunkSize>;

        if $i2 != 0 goto label04;

        $i3 = len;

        goto label05;

     label04:
        $i3 = this.<kanzi.entropy.ANSRangeDecoder: int chunkSize>;

     label05:
        sz = $i3;

        startChunk#20 = blkptr;

        $i4 = this.<kanzi.entropy.ANSRangeDecoder: int order>;

        $i5 = 255 * $i4;

        endk = $i5 + 1;

        k#28 = 0;

     label06:
        if k#28 >= endk goto label09;

        $r0 = this.<kanzi.entropy.ANSRangeDecoder: kanzi.entropy.ANSRangeDecoder$Symbol[][] symbols>;

        syms = $r0[k#28];

        i#36 = 0;

     label07:
        if i#36 >= 256 goto label08;

        $r1 = new kanzi.entropy.ANSRangeDecoder$Symbol;

        specialinvoke $r1.<kanzi.entropy.ANSRangeDecoder$Symbol: void <init>()>();

        syms[i#36] = $r1;

        i#36 = i#36 + 1;

        goto label07;

     label08:
        k#28 = k#28 + 1;

        goto label06;

     label09:
        if startChunk#20 >= end goto label13;

        $r2 = this.<kanzi.entropy.ANSRangeDecoder: int[][] freqs>;

        $i6 = virtualinvoke this.<kanzi.entropy.ANSRangeDecoder: int decodeHeader(int[][])>($r2);

        if $i6 != 0 goto label10;

        $i7 = startChunk#20 - blkptr;

        return $i7;

     label10:
        $i8 = startChunk#20 + sz;

        if $i8 >= end goto label11;

        $i9 = startChunk#20 + sz;

        goto label12;

     label11:
        $i9 = end;

     label12:
        endChunk = $i9;

        virtualinvoke this.<kanzi.entropy.ANSRangeDecoder: void decodeChunk(byte[],int,int)>(block, startChunk#20, endChunk);

        startChunk#20 = endChunk;

        goto label09;

     label13:
        return len;
    }

    protected int decodeHeader(int[][])
    {
        kanzi.entropy.ANSRangeDecoder this;
        int[][] frequencies, $r1;
        int dim, scale, alphabetSize, logMax, endj, freq, res#2, $i0, $i1, $i4, $i5, k#22, $i6, $i7, i#44, $i8, sum#64, llr#66, $i10, $i11, i#73, $i14, $i15, $i16, j#107, $i18, $i19, $i20, $i21, $i22, $i23, $i24, sum#178, i#188, $i25, $i26, $i27, j#200, $i28, $i30, $i31, $i32;
        int[] f, alphabet_;
        byte chkSize, $b9, $b29;
        kanzi.entropy.ANSRangeDecoder$Symbol[] symb;
        byte[] freq2sym, $r4, $r6;
        kanzi.InputBitStream $r0, $r2, $r7, $r14;
        long $l2, $l3, $l12, $l13, $l17;
        byte[][] $r3, $r5, $r32;
        kanzi.BitStreamException $r8, $r15, $r23;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r16, $r17, $r18, $r19, $r20, $r21, $r24, $r25, $r26, $r27, $r28, $r29;
        java.lang.String $r13, $r22, $r30;
        kanzi.entropy.ANSRangeDecoder$Symbol[][] $r31;
        kanzi.entropy.ANSRangeDecoder$Symbol $r33;

        this := @this: kanzi.entropy.ANSRangeDecoder;

        frequencies := @parameter0: int[][];

        res#2 = 0;

        $i0 = this.<kanzi.entropy.ANSRangeDecoder: int order>;

        $i1 = 255 * $i0;

        dim = $i1 + 1;

        $r0 = this.<kanzi.entropy.ANSRangeDecoder: kanzi.InputBitStream bitstream>;

        $l2 = interfaceinvoke $r0.<kanzi.InputBitStream: long readBits(int)>(3);

        $l3 = 8L + $l2;

        $i4 = (int) $l3;

        this.<kanzi.entropy.ANSRangeDecoder: int logRange> = $i4;

        $i5 = this.<kanzi.entropy.ANSRangeDecoder: int logRange>;

        scale = 1 << $i5;

        k#22 = 0;

     label01:
        if k#22 >= dim goto label27;

        f = frequencies[k#22];

        $r1 = this.<kanzi.entropy.ANSRangeDecoder: int[][] alphabet>;

        alphabet_ = $r1[k#22];

        $r2 = this.<kanzi.entropy.ANSRangeDecoder: kanzi.InputBitStream bitstream>;

        alphabetSize = staticinvoke <kanzi.entropy.EntropyUtils: int decodeAlphabet(kanzi.InputBitStream,int[])>($r2, alphabet_);

        if alphabetSize != 0 goto label02;

        goto label26;

     label02:
        $i6 = lengthof f;

        if alphabetSize == $i6 goto label04;

        $i7 = lengthof f;

        i#44 = $i7 - 1;

     label03:
        if i#44 < 0 goto label04;

        f[i#44] = 0;

        i#44 = i#44 + -1;

        goto label03;

     label04:
        $r3 = this.<kanzi.entropy.ANSRangeDecoder: byte[][] f2s>;

        $r4 = $r3[k#22];

        $i8 = lengthof $r4;

        if $i8 >= scale goto label05;

        $r5 = this.<kanzi.entropy.ANSRangeDecoder: byte[][] f2s>;

        $r6 = newarray (byte)[scale];

        $r5[k#22] = $r6;

     label05:
        if alphabetSize <= 64 goto label06;

        $b9 = 16;

        goto label07;

     label06:
        $b9 = 8;

     label07:
        chkSize = $b9;

        sum#64 = 0;

        llr#66 = 3;

     label08:
        $i10 = 1 << llr#66;

        $i11 = this.<kanzi.entropy.ANSRangeDecoder: int logRange>;

        if $i10 > $i11 goto label09;

        llr#66 = llr#66 + 1;

        goto label08;

     label09:
        i#73 = 1;

     label10:
        if i#73 >= alphabetSize goto label18;

        $r7 = this.<kanzi.entropy.ANSRangeDecoder: kanzi.InputBitStream bitstream>;

        $l12 = interfaceinvoke $r7.<kanzi.InputBitStream: long readBits(int)>(llr#66);

        $l13 = 1L + $l12;

        logMax = (int) $l13;

        $i14 = 1 << logMax;

        if $i14 <= scale goto label11;

        $r8 = new kanzi.BitStreamException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid bitstream: incorrect frequency size ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(logMax);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ANS range decoder");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<kanzi.BitStreamException: void <init>(java.lang.String,int)>($r13, 3);

        throw $r8;

     label11:
        $i15 = i#73 + chkSize;

        if $i15 >= alphabetSize goto label12;

        $i16 = i#73 + chkSize;

        goto label13;

     label12:
        $i16 = alphabetSize;

     label13:
        endj = $i16;

        j#107 = i#73;

     label14:
        if j#107 >= endj goto label17;

        $r14 = this.<kanzi.entropy.ANSRangeDecoder: kanzi.InputBitStream bitstream>;

        $l17 = interfaceinvoke $r14.<kanzi.InputBitStream: long readBits(int)>(logMax);

        freq = (int) $l17;

        if freq <= 0 goto label15;

        if freq < scale goto label16;

     label15:
        $r15 = new kanzi.BitStreamException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid bitstream: incorrect frequency ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(freq);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for symbol \'");

        $i18 = alphabet_[j#107];

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i18);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in ANS range decoder");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<kanzi.BitStreamException: void <init>(java.lang.String,int)>($r22, 3);

        throw $r15;

     label16:
        $i19 = alphabet_[j#107];

        f[$i19] = freq;

        sum#64 = sum#64 + freq;

        j#107 = j#107 + 1;

        goto label14;

     label17:
        i#73 = i#73 + chkSize;

        goto label10;

     label18:
        if scale > sum#64 goto label19;

        $r23 = new kanzi.BitStreamException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid bitstream: incorrect frequency ");

        $i20 = alphabet_[0];

        $i21 = f[$i20];

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i21);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for symbol \'");

        $i22 = alphabet_[0];

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i22);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in ANS range decoder");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<kanzi.BitStreamException: void <init>(java.lang.String,int)>($r30, 3);

        throw $r23;

     label19:
        $i23 = alphabet_[0];

        $i24 = scale - sum#64;

        f[$i23] = $i24;

        sum#178 = 0;

        $r31 = this.<kanzi.entropy.ANSRangeDecoder: kanzi.entropy.ANSRangeDecoder$Symbol[][] symbols>;

        symb = $r31[k#22];

        $r32 = this.<kanzi.entropy.ANSRangeDecoder: byte[][] f2s>;

        freq2sym = $r32[k#22];

        i#188 = 0;

     label20:
        $i25 = lengthof f;

        if i#188 >= $i25 goto label25;

        $i26 = f[i#188];

        if $i26 != 0 goto label21;

        goto label24;

     label21:
        $i27 = f[i#188];

        j#200 = $i27 - 1;

     label22:
        if j#200 < 0 goto label23;

        $i28 = sum#178 + j#200;

        $b29 = (byte) i#188;

        freq2sym[$i28] = $b29;

        j#200 = j#200 + -1;

        goto label22;

     label23:
        $r33 = symb[i#188];

        $i30 = f[i#188];

        $i31 = this.<kanzi.entropy.ANSRangeDecoder: int logRange>;

        virtualinvoke $r33.<kanzi.entropy.ANSRangeDecoder$Symbol: void reset(int,int,int)>(sum#178, $i30, $i31);

        $i32 = f[i#188];

        sum#178 = sum#178 + $i32;

     label24:
        i#188 = i#188 + 1;

        goto label20;

     label25:
        res#2 = res#2 + alphabetSize;

     label26:
        k#22 = k#22 + 1;

        goto label01;

     label27:
        return res#2;
    }

    protected void decodeChunk(byte[], int, int)
    {
        kanzi.entropy.ANSRangeDecoder this;
        byte[] block, freq2sym, $r5;
        int start, end, mask, st#6, $i1, $i2, $i3, i#24, $i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i15, i#68, $i16, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i28;
        kanzi.entropy.ANSRangeDecoder$Symbol[] symb, $r7;
        byte cur, $b17, $b18;
        kanzi.entropy.ANSRangeDecoder$Symbol sym, sym;
        short cur, $s5, prv#66;
        kanzi.InputBitStream $r0, $r3, $r8;
        long $l0, $l14, $l27;
        byte[][] $r1, $r4;
        kanzi.entropy.ANSRangeDecoder$Symbol[][] $r2, $r6;

        this := @this: kanzi.entropy.ANSRangeDecoder;

        block := @parameter0: byte[];

        start := @parameter1: int;

        end := @parameter2: int;

        $r0 = this.<kanzi.entropy.ANSRangeDecoder: kanzi.InputBitStream bitstream>;

        $l0 = interfaceinvoke $r0.<kanzi.InputBitStream: long readBits(int)>(32);

        st#6 = (int) $l0;

        $i1 = this.<kanzi.entropy.ANSRangeDecoder: int logRange>;

        $i2 = 1 << $i1;

        mask = $i2 - 1;

        $i3 = this.<kanzi.entropy.ANSRangeDecoder: int order>;

        if $i3 != 0 goto label5;

        $r1 = this.<kanzi.entropy.ANSRangeDecoder: byte[][] f2s>;

        freq2sym = $r1[0];

        $r2 = this.<kanzi.entropy.ANSRangeDecoder: kanzi.entropy.ANSRangeDecoder$Symbol[][] symbols>;

        symb = $r2[0];

        i#24 = start;

     label1:
        if i#24 >= end goto label4;

        $i4 = st#6 & mask;

        cur = freq2sym[$i4];

        block[i#24] = cur;

        $s5 = cur & 255;

        sym = symb[$s5];

        $i6 = sym.<kanzi.entropy.ANSRangeDecoder$Symbol: int freq>;

        $i7 = this.<kanzi.entropy.ANSRangeDecoder: int logRange>;

        $i8 = st#6 >>> $i7;

        $i9 = $i6 * $i8;

        $i10 = st#6 & mask;

        $i11 = $i9 + $i10;

        $i12 = sym.<kanzi.entropy.ANSRangeDecoder$Symbol: int cumFreq>;

        st#6 = $i11 - $i12;

     label2:
        if st#6 >= 8388608 goto label3;

        $i13 = st#6 << 8;

        $r3 = this.<kanzi.entropy.ANSRangeDecoder: kanzi.InputBitStream bitstream>;

        $l14 = interfaceinvoke $r3.<kanzi.InputBitStream: long readBits(int)>(8);

        $i15 = (int) $l14;

        st#6 = $i13 | $i15;

        goto label2;

     label3:
        i#24 = i#24 + 1;

        goto label1;

     label4:
        goto label9;

     label5:
        prv#66 = 0;

        i#68 = start;

     label6:
        if i#68 >= end goto label9;

        $r4 = this.<kanzi.entropy.ANSRangeDecoder: byte[][] f2s>;

        $r5 = $r4[prv#66];

        $i16 = st#6 & mask;

        $b17 = $r5[$i16];

        cur = $b17 & 255;

        $b18 = (byte) cur;

        block[i#68] = $b18;

        $r6 = this.<kanzi.entropy.ANSRangeDecoder: kanzi.entropy.ANSRangeDecoder$Symbol[][] symbols>;

        $r7 = $r6[prv#66];

        sym = $r7[cur];

        $i19 = sym.<kanzi.entropy.ANSRangeDecoder$Symbol: int freq>;

        $i20 = this.<kanzi.entropy.ANSRangeDecoder: int logRange>;

        $i21 = st#6 >>> $i20;

        $i22 = $i19 * $i21;

        $i23 = st#6 & mask;

        $i24 = $i22 + $i23;

        $i25 = sym.<kanzi.entropy.ANSRangeDecoder$Symbol: int cumFreq>;

        st#6 = $i24 - $i25;

     label7:
        if st#6 >= 8388608 goto label8;

        $i26 = st#6 << 8;

        $r8 = this.<kanzi.entropy.ANSRangeDecoder: kanzi.InputBitStream bitstream>;

        $l27 = interfaceinvoke $r8.<kanzi.InputBitStream: long readBits(int)>(8);

        $i28 = (int) $l27;

        st#6 = $i26 | $i28;

        goto label7;

     label8:
        prv#66 = cur;

        i#68 = i#68 + 1;

        goto label6;

     label9:
        return;
    }


