    static void <clinit>()
    {
        return;
    }

    public static java.util.ArrayList find(java.lang.String)
    {
        java.lang.String matchText;
        weka.core.ClassCache $r0;
        java.util.ArrayList $r1;

        matchText := @parameter0: java.lang.String;

        $r0 = <weka.core.ClassDiscovery: weka.core.ClassCache m_ClassCache>;

        $r1 = virtualinvoke $r0.<weka.core.ClassCache: java.util.ArrayList find(java.lang.String)>(matchText);

        return $r1;
    }

    public static void clearCache()
    {
        java.util.Hashtable $r0;

        staticinvoke <weka.core.ClassDiscovery: void initCache()>();

        $r0 = <weka.core.ClassDiscovery: java.util.Hashtable m_Cache>;

        virtualinvoke $r0.<java.util.Hashtable: void clear()>();

        return;
    }

    protected static void initCache()
    {
        java.util.Hashtable $r0, $r1;
        weka.core.ClassCache $r2, $r3;

        $r0 = <weka.core.ClassDiscovery: java.util.Hashtable m_Cache>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label1;

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        <weka.core.ClassDiscovery: java.util.Hashtable m_Cache> = $r1;

     label1:
        $r2 = <weka.core.ClassDiscovery: weka.core.ClassCache m_ClassCache>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        if $r2 != null goto label2;

        $r3 = new weka.core.ClassCache;

        specialinvoke $r3.<weka.core.ClassCache: void <init>()>();

        <weka.core.ClassDiscovery: weka.core.ClassCache m_ClassCache> = $r3;

     label2:
        return;
    }

    public static boolean hasInterface(java.lang.String, java.lang.String)
    {
        java.lang.String intf, 'cls';
        java.lang.Exception e, $r2;
        java.lang.Class $r0, $r1;
        boolean $z0;

        intf := @parameter0: java.lang.String;

        'cls' := @parameter1: java.lang.String;

     label1:
        $r0 = staticinvoke <weka.core.WekaPackageClassLoaderManager: java.lang.Class forName(java.lang.String)>(intf);

        $r1 = staticinvoke <weka.core.WekaPackageClassLoaderManager: java.lang.Class forName(java.lang.String)>('cls');

        $z0 = staticinvoke <weka.core.ClassDiscovery: boolean hasInterface(java.lang.Class,java.lang.Class)>($r0, $r1);

     label2:
        return $z0;

     label3:
        $r2 := @caughtexception;

        e = $r2;

        return 0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static boolean hasInterface(java.lang.Class, java.lang.Class)
    {
        java.lang.Class intf, 'cls', currentclass#4, $r0;
        java.lang.Class[] intfs;
        boolean result#2, $z0, $z1;
        int i#8, $i0;

        intf := @parameter0: java.lang.Class;

        'cls' := @parameter1: java.lang.Class;

        result#2 = 0;

        currentclass#4 = 'cls';

     label1:
        intfs = virtualinvoke currentclass#4.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i#8 = 0;

     label2:
        $i0 = lengthof intfs;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#8 >= $i0 goto label4;

        $r0 = intfs[i#8];

        $z0 = virtualinvoke $r0.<java.lang.Object: boolean equals(java.lang.Object)>(intf);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        result#2 = 1;

        goto label4;

     label3:
        i#8 = i#8 + 1;

        goto label2;

     label4:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(result#2);

        if result#2 != 0 goto label5;

        currentclass#4 = virtualinvoke currentclass#4.<java.lang.Class: java.lang.Class getSuperclass()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(currentclass#4);

        if currentclass#4 == null goto label6;

        $z1 = virtualinvoke currentclass#4.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/Object");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label5;

        goto label6;

     label5:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(result#2);

        if result#2 == 0 goto label1;

     label6:
        return result#2;
    }

    public static void clearClassCache()
    {
        weka.core.ClassCache $r0;

        staticinvoke <weka.core.ClassDiscovery: void clearCache()>();

        $r0 = new weka.core.ClassCache;

        specialinvoke $r0.<weka.core.ClassCache: void <init>()>();

        <weka.core.ClassDiscovery: weka.core.ClassCache m_ClassCache> = $r0;

        return;
    }

    public static java.util.Vector find(java.lang.Class, java.lang.String)
    {
        java.lang.Class 'cls', clsNew;
        java.lang.String pkgname, $r6, $r9, $r18, $r21;
        java.lang.Exception e, $r13;
        java.util.Vector result#4, $r0;
        weka.core.ClassCache $r1, $r3, $r7;
        java.util.HashSet $r2, $r4;
        int i#17, $i0, $i1;
        java.lang.Object $r5, $r8, $r17;
        boolean $z1, $z3, $z4, $z5, $z6;
        java.io.PrintStream $r14;
        java.lang.StringBuilder $r15, $r16, $r19, $r20;
        weka.core.ClassDiscovery$StringCompare $r22;

        'cls' := @parameter0: java.lang.Class;

        pkgname := @parameter1: java.lang.String;

        result#4 = staticinvoke <weka.core.ClassDiscovery: java.util.Vector getCache(java.lang.Class,java.lang.String)>('cls', pkgname);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(result#4);

        if result#4 != null goto label10;

        $r0 = new java.util.Vector;

        specialinvoke $r0.<java.util.Vector: void <init>()>();

        result#4 = $r0;

        $r1 = <weka.core.ClassDiscovery: weka.core.ClassCache m_ClassCache>;

        $r2 = virtualinvoke $r1.<weka.core.ClassCache: java.util.HashSet getClassnames(java.lang.String)>(pkgname);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        if $r2 == null goto label01;

        $r3 = <weka.core.ClassDiscovery: weka.core.ClassCache m_ClassCache>;

        $r4 = virtualinvoke $r3.<weka.core.ClassCache: java.util.HashSet getClassnames(java.lang.String)>(pkgname);

        virtualinvoke result#4.<java.util.Vector: boolean addAll(java.util.Collection)>($r4);

     label01:
        i#17 = 0;

     label02:
        $i0 = virtualinvoke result#4.<java.util.Vector: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#17);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#17 >= $i0 goto label09;

     label03:
        $r5 = virtualinvoke result#4.<java.util.Vector: java.lang.Object get(int)>(i#17);

        $r6 = (java.lang.String) $r5;

        clsNew = staticinvoke <weka.core.WekaPackageClassLoaderManager: java.lang.Class forName(java.lang.String)>($r6);

        $i1 = virtualinvoke clsNew.<java.lang.Class: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>($i1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label04;

        $r7 = <weka.core.ClassDiscovery: weka.core.ClassCache m_ClassCache>;

        $r8 = virtualinvoke result#4.<java.util.Vector: java.lang.Object get(int)>(i#17);

        $r9 = (java.lang.String) $r8;

        virtualinvoke $r7.<weka.core.ClassCache: boolean remove(java.lang.String)>($r9);

        virtualinvoke result#4.<java.util.Vector: java.lang.Object remove(int)>(i#17);

        goto label07;

     label04:
        $z3 = virtualinvoke 'cls'.<java.lang.Class: boolean isInterface()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label05;

        $z4 = staticinvoke <weka.core.ClassDiscovery: boolean hasInterface(java.lang.Class,java.lang.Class)>('cls', clsNew);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label05;

        virtualinvoke result#4.<java.util.Vector: java.lang.Object remove(int)>(i#17);

        goto label07;

     label05:
        $z5 = virtualinvoke 'cls'.<java.lang.Class: boolean isInterface()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 != 0 goto label06;

        $z6 = staticinvoke <weka.core.ClassDiscovery: boolean isSubclass(java.lang.Class,java.lang.Class)>('cls', clsNew);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 != 0 goto label06;

        virtualinvoke result#4.<java.util.Vector: java.lang.Object remove(int)>(i#17);

        goto label07;

     label06:
        i#17 = i#17 + 1;

     label07:
        goto label02;

     label08:
        $r13 := @caughtexception;

        e = $r13;

        $r14 = <java.lang.System: java.io.PrintStream out>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Accessing class \'");

        $r17 = virtualinvoke result#4.<java.util.Vector: java.lang.Object get(int)>(i#17);

        $r18 = (java.lang.String) $r17;

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' resulted in error:");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>($r21);

        virtualinvoke e.<java.lang.Exception: void printStackTrace()>();

        goto label02;

     label09:
        $r22 = new weka.core.ClassDiscovery$StringCompare;

        specialinvoke $r22.<weka.core.ClassDiscovery$StringCompare: void <init>()>();

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(result#4, $r22);

        staticinvoke <weka.core.ClassDiscovery: void addCache(java.lang.Class,java.lang.String,java.util.Vector)>('cls', pkgname, result#4);

     label10:
        return result#4;

        catch java.lang.Exception from label03 to label07 with label08;
    }

    protected static void addCache(java.lang.Class, java.lang.String, java.util.Vector)
    {
        java.lang.Class 'cls';
        java.lang.String pkgname, $r2, $r6;
        java.util.Vector classnames;
        java.util.Hashtable $r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r5;

        'cls' := @parameter0: java.lang.Class;

        pkgname := @parameter1: java.lang.String;

        classnames := @parameter2: java.util.Vector;

        staticinvoke <weka.core.ClassDiscovery: void initCache()>();

        $r0 = <weka.core.ClassDiscovery: java.util.Hashtable m_Cache>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke 'cls'.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(pkgname);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, classnames);

        return;
    }

    public static boolean isSubclass(java.lang.Class, java.lang.Class)
    {
        java.lang.Class superclass, otherclass, currentclass#4;
        boolean result#2, result#8, $z0;

        superclass := @parameter0: java.lang.Class;

        otherclass := @parameter1: java.lang.Class;

        result#2 = 0;

        currentclass#4 = otherclass;

     label1:
        result#8 = virtualinvoke currentclass#4.<java.lang.Object: boolean equals(java.lang.Object)>(superclass);

        $z0 = virtualinvoke currentclass#4.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/Object");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        goto label4;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(result#8);

        if result#8 != 0 goto label3;

        currentclass#4 = virtualinvoke currentclass#4.<java.lang.Class: java.lang.Class getSuperclass()>();

     label3:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(result#8);

        if result#8 == 0 goto label1;

     label4:
        return result#8;
    }

    protected static java.util.Vector getCache(java.lang.Class, java.lang.String)
    {
        java.lang.Class 'cls';
        java.lang.String pkgname, $r2, $r6;
        java.util.Hashtable $r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r5;
        java.lang.Object $r7;
        java.util.Vector $r8;

        'cls' := @parameter0: java.lang.Class;

        pkgname := @parameter1: java.lang.String;

        staticinvoke <weka.core.ClassDiscovery: void initCache()>();

        $r0 = <weka.core.ClassDiscovery: java.util.Hashtable m_Cache>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke 'cls'.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(pkgname);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke $r0.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r6);

        $r8 = (java.util.Vector) $r7;

        return $r8;
    }


