    public void <init>(org.unix4j.find.unix.find.FindArguments)
    {
        org.unix4j.find.unix.find.FindCommand this;
        org.unix4j.find.unix.find.FindArguments args;
        org.unix4j.find.unix.find.RegexFilter $r0;
        java.io.FileFilter $r1;
        boolean $z0;
        java.lang.String $r3;

        this := @this: org.unix4j.find.unix.find.FindCommand;

        args := @parameter0: org.unix4j.find.unix.find.FindArguments;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<org.unix4j.find.unix.find.FindCommand: org.unix4j.find.unix.find.FindArguments arguments> = args;

        $r0 = specialinvoke this.<org.unix4j.find.unix.find.FindCommand: org.unix4j.find.unix.find.RegexFilter createRegexFilterFromArgs(org.unix4j.find.unix.find.FindArguments)>(args);

        this.<org.unix4j.find.unix.find.FindCommand: org.unix4j.find.unix.find.RegexFilter regexFilter> = $r0;

        $r1 = specialinvoke this.<org.unix4j.find.unix.find.FindCommand: java.io.FileFilter createFileFilterFromArgs(org.unix4j.find.unix.find.FindArguments)>(args);

        this.<org.unix4j.find.unix.find.FindCommand: java.io.FileFilter staticFileFilter> = $r1;

        $z0 = virtualinvoke args.<org.unix4j.find.unix.find.FindArguments: boolean isPrint0()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(0);

        goto label2;

     label1:
        $r3 = <org.unix4j.find.line.Line: java.lang.String LINE_ENDING>;

     label2:
        this.<org.unix4j.find.unix.find.FindCommand: java.lang.String lineEnding> = $r3;

        return;
    }

    private org.unix4j.find.unix.find.RegexFilter createRegexFilterFromArgs(org.unix4j.find.unix.find.FindArguments)
    {
        org.unix4j.find.unix.find.FindCommand this;
        org.unix4j.find.unix.find.FindArguments args;
        boolean $z0, $z1, $z2;
        org.unix4j.find.unix.find.RegexFilter $r0;
        java.lang.String $r1;

        this := @this: org.unix4j.find.unix.find.FindCommand;

        args := @parameter0: org.unix4j.find.unix.find.FindArguments;

        $z0 = virtualinvoke args.<org.unix4j.find.unix.find.FindArguments: boolean isNameSet()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke args.<org.unix4j.find.unix.find.FindArguments: boolean isRegex()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label1;

        $r0 = new org.unix4j.find.unix.find.RegexFilter;

        $r1 = virtualinvoke args.<org.unix4j.find.unix.find.FindArguments: java.lang.String getName()>();

        $z2 = virtualinvoke args.<org.unix4j.find.unix.find.FindArguments: boolean isIgnoreCase()>();

        specialinvoke $r0.<org.unix4j.find.unix.find.RegexFilter: void <init>(java.lang.String,boolean)>($r1, $z2);

        return $r0;

     label1:
        return null;
    }

    private java.io.FileFilter createFileFilterFromArgs(org.unix4j.find.unix.find.FindArguments)
    {
        org.unix4j.find.unix.find.FindCommand this;
        org.unix4j.find.unix.find.FindArguments args;
        org.unix4j.find.unix.find.CompositeFileFilter filter, $r0;
        java.lang.String name, pattern, $r1, $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.unix4j.find.unix.find.RegexFilter $r3;
        org.unix4j.find.unix.find.NameFilter $r4;
        org.unix4j.find.unix.find.SizeFilter $r5;
        long $l0;
        org.unix4j.find.unix.find.TimeFilter $r6;
        java.util.Date $r7;
        org.unix4j.find.unix.find.TypeFilter $r8;
        java.io.FileFilter $r9;

        this := @this: org.unix4j.find.unix.find.FindCommand;

        args := @parameter0: org.unix4j.find.unix.find.FindArguments;

        $r0 = new org.unix4j.find.unix.find.CompositeFileFilter;

        specialinvoke $r0.<org.unix4j.find.unix.find.CompositeFileFilter: void <init>()>();

        filter = $r0;

        $z0 = virtualinvoke args.<org.unix4j.find.unix.find.FindArguments: boolean isNameSet()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        name = virtualinvoke args.<org.unix4j.find.unix.find.FindArguments: java.lang.String getName()>();

        $z1 = virtualinvoke args.<org.unix4j.find.unix.find.FindArguments: boolean isRegex()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label3;

        $z2 = virtualinvoke name.<java.lang.String: boolean contains(java.lang.CharSequence)>("*");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke name.<java.lang.String: boolean contains(java.lang.CharSequence)>("?");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label2;

     label1:
        $r1 = virtualinvoke name.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(".", "\\.");

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(char,char)>(63, 46);

        pattern = virtualinvoke $r2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("*", ".*");

        $r3 = new org.unix4j.find.unix.find.RegexFilter;

        $z4 = virtualinvoke args.<org.unix4j.find.unix.find.FindArguments: boolean isIgnoreCase()>();

        specialinvoke $r3.<org.unix4j.find.unix.find.RegexFilter: void <init>(java.lang.String,boolean)>(pattern, $z4);

        virtualinvoke filter.<org.unix4j.find.unix.find.CompositeFileFilter: void add(java.io.FileFilter)>($r3);

        goto label3;

     label2:
        $r4 = new org.unix4j.find.unix.find.NameFilter;

        $z5 = virtualinvoke args.<org.unix4j.find.unix.find.FindArguments: boolean isIgnoreCase()>();

        specialinvoke $r4.<org.unix4j.find.unix.find.NameFilter: void <init>(java.lang.String,boolean)>(name, $z5);

        virtualinvoke filter.<org.unix4j.find.unix.find.CompositeFileFilter: void add(java.io.FileFilter)>($r4);

     label3:
        $z6 = virtualinvoke args.<org.unix4j.find.unix.find.FindArguments: boolean isSizeSet()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label4;

        $r5 = new org.unix4j.find.unix.find.SizeFilter;

        $l0 = virtualinvoke args.<org.unix4j.find.unix.find.FindArguments: long getSize()>();

        specialinvoke $r5.<org.unix4j.find.unix.find.SizeFilter: void <init>(long)>($l0);

        virtualinvoke filter.<org.unix4j.find.unix.find.CompositeFileFilter: void add(java.io.FileFilter)>($r5);

     label4:
        $z7 = virtualinvoke args.<org.unix4j.find.unix.find.FindArguments: boolean isTimeSet()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 == 0 goto label5;

        $r6 = new org.unix4j.find.unix.find.TimeFilter;

        $r7 = virtualinvoke args.<org.unix4j.find.unix.find.FindArguments: java.util.Date getTime()>();

        specialinvoke $r6.<org.unix4j.find.unix.find.TimeFilter: void <init>(java.util.Date,org.unix4j.find.unix.find.FindArguments)>($r7, args);

        virtualinvoke filter.<org.unix4j.find.unix.find.CompositeFileFilter: void add(java.io.FileFilter)>($r6);

     label5:
        $r8 = staticinvoke <org.unix4j.find.unix.find.TypeFilter: org.unix4j.find.unix.find.TypeFilter valueOf(org.unix4j.find.unix.find.FindArguments)>(args);

        virtualinvoke filter.<org.unix4j.find.unix.find.CompositeFileFilter: void addIfNotNull(java.io.FileFilter)>($r8);

        $r9 = virtualinvoke filter.<org.unix4j.find.unix.find.CompositeFileFilter: java.io.FileFilter simplify()>();

        return $r9;
    }

    public org.unix4j.find.processor.LineProcessor execute(org.unix4j.find.context.ExecutionContext, org.unix4j.find.processor.LineProcessor)
    {
        org.unix4j.find.unix.find.FindCommand this;
        org.unix4j.find.context.ExecutionContext context;
        org.unix4j.find.processor.LineProcessor output;
        org.unix4j.find.unix.find.FindArguments args;
        java.util.List paths;
        org.unix4j.find.unix.find.FindCommand$1 $r0;

        this := @this: org.unix4j.find.unix.find.FindCommand;

        context := @parameter0: org.unix4j.find.context.ExecutionContext;

        output := @parameter1: org.unix4j.find.processor.LineProcessor;

        args = this.<org.unix4j.find.unix.find.FindCommand: org.unix4j.find.unix.find.FindArguments arguments>;

        paths = specialinvoke this.<org.unix4j.find.unix.find.FindCommand: java.util.List getArgumentPaths(org.unix4j.find.context.ExecutionContext,org.unix4j.find.unix.find.FindArguments)>(context, args);

        $r0 = new org.unix4j.find.unix.find.FindCommand$1;

        specialinvoke $r0.<org.unix4j.find.unix.find.FindCommand$1: void <init>(org.unix4j.find.unix.find.FindCommand,org.unix4j.find.context.ExecutionContext,java.util.List,org.unix4j.find.processor.LineProcessor,org.unix4j.find.unix.find.FindArguments)>(this, context, paths, output, args);

        return $r0;
    }

    static boolean access$200(org.unix4j.find.unix.find.FindCommand, java.io.FileFilter, org.unix4j.find.processor.LineProcessor, org.unix4j.find.util.RelativePathBase, java.io.File)
    {
        org.unix4j.find.unix.find.FindCommand x0;
        java.io.FileFilter x1;
        org.unix4j.find.processor.LineProcessor x2;
        org.unix4j.find.util.RelativePathBase x3;
        java.io.File x4;
        boolean $z0;

        x0 := @parameter0: org.unix4j.find.unix.find.FindCommand;

        x1 := @parameter1: java.io.FileFilter;

        x2 := @parameter2: org.unix4j.find.processor.LineProcessor;

        x3 := @parameter3: org.unix4j.find.util.RelativePathBase;

        x4 := @parameter4: java.io.File;

        $z0 = specialinvoke x0.<org.unix4j.find.unix.find.FindCommand: boolean outputFileLine(java.io.FileFilter,org.unix4j.find.processor.LineProcessor,org.unix4j.find.util.RelativePathBase,java.io.File)>(x1, x2, x3, x4);

        return $z0;
    }

    static boolean access$100(org.unix4j.find.unix.find.FindCommand, java.io.FileFilter, org.unix4j.find.util.RelativePathBase, java.io.File, org.unix4j.find.processor.LineProcessor, org.unix4j.find.unix.find.FindArguments)
    {
        org.unix4j.find.unix.find.FindCommand x0;
        java.io.FileFilter x1;
        org.unix4j.find.util.RelativePathBase x2;
        java.io.File x3;
        org.unix4j.find.processor.LineProcessor x4;
        org.unix4j.find.unix.find.FindArguments x5;
        boolean $z0;

        x0 := @parameter0: org.unix4j.find.unix.find.FindCommand;

        x1 := @parameter1: java.io.FileFilter;

        x2 := @parameter2: org.unix4j.find.util.RelativePathBase;

        x3 := @parameter3: java.io.File;

        x4 := @parameter4: org.unix4j.find.processor.LineProcessor;

        x5 := @parameter5: org.unix4j.find.unix.find.FindArguments;

        $z0 = specialinvoke x0.<org.unix4j.find.unix.find.FindCommand: boolean listFiles(java.io.FileFilter,org.unix4j.find.util.RelativePathBase,java.io.File,org.unix4j.find.processor.LineProcessor,org.unix4j.find.unix.find.FindArguments)>(x1, x2, x3, x4, x5);

        return $z0;
    }

    static java.lang.String access$000(org.unix4j.find.unix.find.FindCommand)
    {
        org.unix4j.find.unix.find.FindCommand x0;
        java.lang.String $r0;

        x0 := @parameter0: org.unix4j.find.unix.find.FindCommand;

        $r0 = x0.<org.unix4j.find.unix.find.FindCommand: java.lang.String lineEnding>;

        return $r0;
    }

    static org.unix4j.find.unix.find.RegexFilter access$300(org.unix4j.find.unix.find.FindCommand)
    {
        org.unix4j.find.unix.find.FindCommand x0;
        org.unix4j.find.unix.find.RegexFilter $r0;

        x0 := @parameter0: org.unix4j.find.unix.find.FindCommand;

        $r0 = x0.<org.unix4j.find.unix.find.FindCommand: org.unix4j.find.unix.find.RegexFilter regexFilter>;

        return $r0;
    }

    static java.io.FileFilter access$400(org.unix4j.find.unix.find.FindCommand)
    {
        org.unix4j.find.unix.find.FindCommand x0;
        java.io.FileFilter $r0;

        x0 := @parameter0: org.unix4j.find.unix.find.FindCommand;

        $r0 = x0.<org.unix4j.find.unix.find.FindCommand: java.io.FileFilter staticFileFilter>;

        return $r0;
    }

    private java.util.List getArgumentPaths(org.unix4j.find.context.ExecutionContext, org.unix4j.find.unix.find.FindArguments)
    {
        org.unix4j.find.unix.find.FindCommand this;
        org.unix4j.find.context.ExecutionContext context;
        org.unix4j.find.unix.find.FindArguments args;
        java.util.ArrayList list, $r4;
        boolean $z0;
        java.io.File $r0, $r5;
        java.lang.String[] $r1;
        java.lang.String $r2;
        java.util.List $r3;

        this := @this: org.unix4j.find.unix.find.FindCommand;

        context := @parameter0: org.unix4j.find.context.ExecutionContext;

        args := @parameter1: org.unix4j.find.unix.find.FindArguments;

        $z0 = virtualinvoke args.<org.unix4j.find.unix.find.FindArguments: boolean isPathSet()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r0 = interfaceinvoke context.<org.unix4j.find.context.ExecutionContext: java.io.File getCurrentDirectory()>();

        $r1 = newarray (java.lang.String)[1];

        $r2 = virtualinvoke args.<org.unix4j.find.unix.find.FindArguments: java.lang.String getPath()>();

        $r1[0] = $r2;

        $r3 = staticinvoke <org.unix4j.find.util.FileUtil: java.util.List expandFiles(java.io.File,java.lang.String[])>($r0, $r1);

        return $r3;

     label1:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(1);

        list = $r4;

        $r5 = interfaceinvoke context.<org.unix4j.find.context.ExecutionContext: java.io.File getCurrentDirectory()>();

        virtualinvoke list.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        return list;
    }

    private boolean outputFileLine(java.io.FileFilter, org.unix4j.find.processor.LineProcessor, org.unix4j.find.util.RelativePathBase, java.io.File)
    {
        org.unix4j.find.unix.find.FindCommand this;
        java.io.FileFilter fileFilter;
        org.unix4j.find.processor.LineProcessor output;
        org.unix4j.find.util.RelativePathBase relativeTo;
        java.io.File file;
        java.lang.String filePath, $r1;
        boolean $z0, $z1;
        org.unix4j.find.line.SimpleLine $r0;

        this := @this: org.unix4j.find.unix.find.FindCommand;

        fileFilter := @parameter0: java.io.FileFilter;

        output := @parameter1: org.unix4j.find.processor.LineProcessor;

        relativeTo := @parameter2: org.unix4j.find.util.RelativePathBase;

        file := @parameter3: java.io.File;

        $z0 = interfaceinvoke fileFilter.<java.io.FileFilter: boolean accept(java.io.File)>(file);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        filePath = virtualinvoke relativeTo.<org.unix4j.find.util.RelativePathBase: java.lang.String getRelativePathFor(java.io.File)>(file);

        $r0 = new org.unix4j.find.line.SimpleLine;

        $r1 = this.<org.unix4j.find.unix.find.FindCommand: java.lang.String lineEnding>;

        specialinvoke $r0.<org.unix4j.find.line.SimpleLine: void <init>(java.lang.CharSequence,java.lang.CharSequence)>(filePath, $r1);

        $z1 = interfaceinvoke output.<org.unix4j.find.processor.LineProcessor: boolean processLine(org.unix4j.find.line.Line)>($r0);

        return $z1;

     label1:
        return 1;
    }

    private boolean listFiles(java.io.FileFilter, org.unix4j.find.util.RelativePathBase, java.io.File, org.unix4j.find.processor.LineProcessor, org.unix4j.find.unix.find.FindArguments)
    {
        org.unix4j.find.unix.find.FindCommand this;
        java.io.FileFilter fileFilter;
        org.unix4j.find.util.RelativePathBase relativeTo;
        java.io.File parent, file;
        org.unix4j.find.processor.LineProcessor output;
        org.unix4j.find.unix.find.FindArguments args;
        java.util.List files;
        java.util.Iterator l7;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.io.File[] $r0;
        java.lang.Object $r1;

        this := @this: org.unix4j.find.unix.find.FindCommand;

        fileFilter := @parameter0: java.io.FileFilter;

        relativeTo := @parameter1: org.unix4j.find.util.RelativePathBase;

        parent := @parameter2: java.io.File;

        output := @parameter3: org.unix4j.find.processor.LineProcessor;

        args := @parameter4: org.unix4j.find.unix.find.FindArguments;

        $z0 = specialinvoke this.<org.unix4j.find.unix.find.FindCommand: boolean outputFileLine(java.io.FileFilter,org.unix4j.find.processor.LineProcessor,org.unix4j.find.util.RelativePathBase,java.io.File)>(fileFilter, output, relativeTo, parent);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label4;

        $r0 = virtualinvoke parent.<java.io.File: java.io.File[] listFiles()>();

        files = staticinvoke <org.unix4j.find.util.FileUtil: java.util.List toList(java.io.File[])>($r0);

        l7 = interfaceinvoke files.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke l7.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label4;

        $r1 = interfaceinvoke l7.<java.util.Iterator: java.lang.Object next()>();

        file = (java.io.File) $r1;

        $z2 = virtualinvoke file.<java.io.File: boolean isDirectory()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label2;

        $z3 = specialinvoke this.<org.unix4j.find.unix.find.FindCommand: boolean listFiles(java.io.FileFilter,org.unix4j.find.util.RelativePathBase,java.io.File,org.unix4j.find.processor.LineProcessor,org.unix4j.find.unix.find.FindArguments)>(fileFilter, relativeTo, file, output, args);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label3;

        return 0;

     label2:
        $z4 = specialinvoke this.<org.unix4j.find.unix.find.FindCommand: boolean outputFileLine(java.io.FileFilter,org.unix4j.find.processor.LineProcessor,org.unix4j.find.util.RelativePathBase,java.io.File)>(fileFilter, output, relativeTo, file);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label3;

        return 0;

     label3:
        goto label1;

     label4:
        return 1;
    }


