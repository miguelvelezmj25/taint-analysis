    public boolean sort(int[], int, int)
    {
        kanzi.util.sort.SpreadSort this;
        int[] array;
        int idx, count;
        boolean $z0;

        this := @this: kanzi.util.sort.SpreadSort;

        array := @parameter0: int[];

        idx := @parameter1: int;

        count := @parameter2: int;

        $z0 = staticinvoke <kanzi.util.sort.SpreadSort: boolean _sort(int[],int,int)>(array, idx, count);

        return $z0;
    }

    private static boolean _sort(int[], int, int)
    {
        int[] array, minMaxCount;
        int idx, count, maxCount, $i0, $i1, $i2, $i3;
        kanzi.SliceIntArray sia, $r0;
        kanzi.util.sort.SpreadSort$Bin[] bins;

        array := @parameter0: int[];

        idx := @parameter1: int;

        count := @parameter2: int;

        if count >= 2 goto label1;

        return 1;

     label1:
        minMaxCount = newarray (int)[3];

        $r0 = new kanzi.SliceIntArray;

        specialinvoke $r0.<kanzi.SliceIntArray: void <init>(int[],int)>(array, idx);

        sia = $r0;

        bins = staticinvoke <kanzi.util.sort.SpreadSort: kanzi.util.sort.SpreadSort$Bin[] spreadSortCore(kanzi.SliceIntArray,int,int[])>(sia, count, minMaxCount);

        if bins != null goto label2;

        return 0;

     label2:
        $i0 = minMaxCount[1];

        $i1 = minMaxCount[0];

        $i2 = $i0 - $i1;

        $i3 = staticinvoke <kanzi.util.sort.SpreadSort: int roughLog2(int)>($i2);

        maxCount = staticinvoke <kanzi.util.sort.SpreadSort: int getMaxCount(int,int)>($i3, count);

        staticinvoke <kanzi.util.sort.SpreadSort: void spreadSortBins(kanzi.SliceIntArray,int[],kanzi.util.sort.SpreadSort$Bin[],int)>(sia, minMaxCount, bins, maxCount);

        return 1;
    }

    private static kanzi.util.sort.SpreadSort$Bin[] spreadSortCore(kanzi.SliceIntArray, int, int[])
    {
        kanzi.SliceIntArray sia;
        int count, max, min, logRange, divMin, divMax, binCount, count8, end8, idx, tmp, $i0, $i1, $i2, logDivisor#23, $i3, $i4, i#47, $i5, i#65, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, i#187, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, i#212, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, i#256, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89;
        int[] minMaxCount, array;
        kanzi.util.sort.SpreadSort$Bin[] bins;
        kanzi.util.sort.SpreadSort$Bin $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, currBin#272;

        sia := @parameter0: kanzi.SliceIntArray;

        count := @parameter1: int;

        minMaxCount := @parameter2: int[];

        staticinvoke <kanzi.util.sort.SpreadSort: void findExtremes(kanzi.SliceIntArray,int,int[])>(sia, count, minMaxCount);

        max = minMaxCount[1];

        min = minMaxCount[0];

        if max != min goto label01;

        return null;

     label01:
        $i0 = max - min;

        logRange = staticinvoke <kanzi.util.sort.SpreadSort: int roughLog2(int)>($i0);

        $i1 = staticinvoke <kanzi.util.sort.SpreadSort: int roughLog2(int)>(count);

        $i2 = logRange - $i1;

        logDivisor#23 = $i2 + 2;

        if logDivisor#23 >= 0 goto label02;

        logDivisor#23 = 0;

     label02:
        $i3 = logRange - logDivisor#23;

        if $i3 <= 11 goto label03;

        logDivisor#23 = logRange - 11;

     label03:
        divMin = min >> logDivisor#23;

        divMax = max >> logDivisor#23;

        $i4 = divMax - divMin;

        binCount = $i4 + 1;

        bins = newarray (kanzi.util.sort.SpreadSort$Bin)[binCount];

        i#47 = 0;

     label04:
        if i#47 >= binCount goto label05;

        $r0 = new kanzi.util.sort.SpreadSort$Bin;

        specialinvoke $r0.<kanzi.util.sort.SpreadSort$Bin: void <init>(kanzi.util.sort.SpreadSort$1)>(null);

        bins[i#47] = $r0;

        i#47 = i#47 + 1;

        goto label04;

     label05:
        array = sia.<kanzi.SliceIntArray: int[] array>;

        count8 = count & -8;

        $i5 = sia.<kanzi.SliceIntArray: int index>;

        end8 = $i5 + count8;

        i#65 = sia.<kanzi.SliceIntArray: int index>;

     label06:
        if i#65 >= end8 goto label07;

        $i6 = array[i#65];

        $i7 = $i6 >> logDivisor#23;

        $i8 = $i7 - divMin;

        $r1 = bins[$i8];

        $i9 = $r1.<kanzi.util.sort.SpreadSort$Bin: int count>;

        $i10 = $i9 + 1;

        $r1.<kanzi.util.sort.SpreadSort$Bin: int count> = $i10;

        $i11 = i#65 + 1;

        $i12 = array[$i11];

        $i13 = $i12 >> logDivisor#23;

        $i14 = $i13 - divMin;

        $r2 = bins[$i14];

        $i15 = $r2.<kanzi.util.sort.SpreadSort$Bin: int count>;

        $i16 = $i15 + 1;

        $r2.<kanzi.util.sort.SpreadSort$Bin: int count> = $i16;

        $i17 = i#65 + 2;

        $i18 = array[$i17];

        $i19 = $i18 >> logDivisor#23;

        $i20 = $i19 - divMin;

        $r3 = bins[$i20];

        $i21 = $r3.<kanzi.util.sort.SpreadSort$Bin: int count>;

        $i22 = $i21 + 1;

        $r3.<kanzi.util.sort.SpreadSort$Bin: int count> = $i22;

        $i23 = i#65 + 3;

        $i24 = array[$i23];

        $i25 = $i24 >> logDivisor#23;

        $i26 = $i25 - divMin;

        $r4 = bins[$i26];

        $i27 = $r4.<kanzi.util.sort.SpreadSort$Bin: int count>;

        $i28 = $i27 + 1;

        $r4.<kanzi.util.sort.SpreadSort$Bin: int count> = $i28;

        $i29 = i#65 + 4;

        $i30 = array[$i29];

        $i31 = $i30 >> logDivisor#23;

        $i32 = $i31 - divMin;

        $r5 = bins[$i32];

        $i33 = $r5.<kanzi.util.sort.SpreadSort$Bin: int count>;

        $i34 = $i33 + 1;

        $r5.<kanzi.util.sort.SpreadSort$Bin: int count> = $i34;

        $i35 = i#65 + 5;

        $i36 = array[$i35];

        $i37 = $i36 >> logDivisor#23;

        $i38 = $i37 - divMin;

        $r6 = bins[$i38];

        $i39 = $r6.<kanzi.util.sort.SpreadSort$Bin: int count>;

        $i40 = $i39 + 1;

        $r6.<kanzi.util.sort.SpreadSort$Bin: int count> = $i40;

        $i41 = i#65 + 6;

        $i42 = array[$i41];

        $i43 = $i42 >> logDivisor#23;

        $i44 = $i43 - divMin;

        $r7 = bins[$i44];

        $i45 = $r7.<kanzi.util.sort.SpreadSort$Bin: int count>;

        $i46 = $i45 + 1;

        $r7.<kanzi.util.sort.SpreadSort$Bin: int count> = $i46;

        $i47 = i#65 + 7;

        $i48 = array[$i47];

        $i49 = $i48 >> logDivisor#23;

        $i50 = $i49 - divMin;

        $r8 = bins[$i50];

        $i51 = $r8.<kanzi.util.sort.SpreadSort$Bin: int count>;

        $i52 = $i51 + 1;

        $r8.<kanzi.util.sort.SpreadSort$Bin: int count> = $i52;

        i#65 = i#65 + 8;

        goto label06;

     label07:
        i#187 = count8;

     label08:
        if i#187 >= count goto label09;

        $i53 = sia.<kanzi.SliceIntArray: int index>;

        $i54 = $i53 + i#187;

        $i55 = array[$i54];

        $i56 = $i55 >> logDivisor#23;

        $i57 = $i56 - divMin;

        $r9 = bins[$i57];

        $i58 = $r9.<kanzi.util.sort.SpreadSort$Bin: int count>;

        $i59 = $i58 + 1;

        $r9.<kanzi.util.sort.SpreadSort$Bin: int count> = $i59;

        i#187 = i#187 + 1;

        goto label08;

     label09:
        $r10 = bins[0];

        $i60 = sia.<kanzi.SliceIntArray: int index>;

        $r10.<kanzi.util.sort.SpreadSort$Bin: int position> = $i60;

        i#212 = 0;

     label10:
        $i61 = binCount - 1;

        if i#212 >= $i61 goto label11;

        $i62 = i#212 + 1;

        $r11 = bins[$i62];

        $r12 = bins[i#212];

        $i63 = $r12.<kanzi.util.sort.SpreadSort$Bin: int position>;

        $r13 = bins[i#212];

        $i64 = $r13.<kanzi.util.sort.SpreadSort$Bin: int count>;

        $i65 = $i63 + $i64;

        $r11.<kanzi.util.sort.SpreadSort$Bin: int position> = $i65;

        $r14 = bins[i#212];

        $r15 = bins[i#212];

        $i66 = $r15.<kanzi.util.sort.SpreadSort$Bin: int position>;

        $i67 = sia.<kanzi.SliceIntArray: int index>;

        $i68 = $i66 - $i67;

        $r14.<kanzi.util.sort.SpreadSort$Bin: int count> = $i68;

        i#212 = i#212 + 1;

        goto label10;

     label11:
        $i69 = binCount - 1;

        $r16 = bins[$i69];

        $i70 = binCount - 1;

        $r17 = bins[$i70];

        $i71 = $r17.<kanzi.util.sort.SpreadSort$Bin: int position>;

        $i72 = sia.<kanzi.SliceIntArray: int index>;

        $i73 = $i71 - $i72;

        $r16.<kanzi.util.sort.SpreadSort$Bin: int count> = $i73;

        i#256 = 0;

     label12:
        if i#256 >= count goto label16;

        $i74 = sia.<kanzi.SliceIntArray: int index>;

        idx = $i74 + i#256;

        $i75 = array[idx];

        $i76 = $i75 >> logDivisor#23;

        $i77 = $i76 - divMin;

        currBin#272 = bins[$i77];

     label13:
        $i78 = currBin#272.<kanzi.util.sort.SpreadSort$Bin: int count>;

        if $i78 <= i#256 goto label14;

        $i79 = currBin#272.<kanzi.util.sort.SpreadSort$Bin: int position>;

        tmp = array[$i79];

        $i80 = currBin#272.<kanzi.util.sort.SpreadSort$Bin: int position>;

        $i81 = array[idx];

        array[$i80] = $i81;

        array[idx] = tmp;

        $i82 = currBin#272.<kanzi.util.sort.SpreadSort$Bin: int position>;

        $i83 = $i82 + 1;

        currBin#272.<kanzi.util.sort.SpreadSort$Bin: int position> = $i83;

        $i84 = array[idx];

        $i85 = $i84 >> logDivisor#23;

        $i86 = $i85 - divMin;

        currBin#272 = bins[$i86];

        goto label13;

     label14:
        $i87 = currBin#272.<kanzi.util.sort.SpreadSort$Bin: int position>;

        if $i87 != idx goto label15;

        $i88 = currBin#272.<kanzi.util.sort.SpreadSort$Bin: int position>;

        $i89 = $i88 + 1;

        currBin#272.<kanzi.util.sort.SpreadSort$Bin: int position> = $i89;

     label15:
        i#256 = i#256 + 1;

        goto label12;

     label16:
        minMaxCount[0] = min;

        minMaxCount[1] = max;

        minMaxCount[2] = binCount;

        if logDivisor#23 != 0 goto label17;

        return null;

     label17:
        return bins;
    }

    private static void findExtremes(kanzi.SliceIntArray, int, int[])
    {
        kanzi.SliceIntArray sia;
        int count, end, val, $i0, $i1, min#11, max#13, i#16;
        int[] minMax, input;

        sia := @parameter0: kanzi.SliceIntArray;

        count := @parameter1: int;

        minMax := @parameter2: int[];

        input = sia.<kanzi.SliceIntArray: int[] array>;

        $i0 = sia.<kanzi.SliceIntArray: int index>;

        end = $i0 + count;

        $i1 = sia.<kanzi.SliceIntArray: int index>;

        min#11 = input[$i1];

        max#13 = min#11;

        i#16 = sia.<kanzi.SliceIntArray: int index>;

     label1:
        if i#16 >= end goto label4;

        val = input[i#16];

        if val <= max#13 goto label2;

        max#13 = val;

        goto label3;

     label2:
        if val >= min#11 goto label3;

        min#11 = val;

     label3:
        i#16 = i#16 + 1;

        goto label1;

     label4:
        minMax[0] = min#11;

        minMax[1] = max#13;

        return;
    }

    private static int roughLog2(int)
    {
        int x#1, shift#3, $i0, $i1, $i2, x#13, $i3;

        x#1 := @parameter0: int;

        shift#3 = 0;

        $i0 = x#1 >> 31;

        $i1 = x#1 + $i0;

        $i2 = x#1 >> 31;

        x#13 = $i1 ^ $i2;

     label1:
        $i3 = x#13 >> shift#3;

        if $i3 == 0 goto label2;

        shift#3 = shift#3 + 1;

        goto label1;

     label2:
        return shift#3;
    }

    private static int getMaxCount(int, int)
    {
        int logRange, count, shift, logSize#3, $i0, relativeWidth#12, $i1, $i2;

        logRange := @parameter0: int;

        count := @parameter1: int;

        logSize#3 = staticinvoke <kanzi.util.sort.SpreadSort: int roughLog2(int)>(count);

        if logSize#3 <= 11 goto label1;

        logSize#3 = 11;

     label1:
        $i0 = 4 * logRange;

        relativeWidth#12 = $i0 / logSize#3;

        if relativeWidth#12 < 4 goto label2;

        relativeWidth#12 = 3;

     label2:
        if relativeWidth#12 >= 11 goto label3;

        $i1 = 11;

        goto label4;

     label3:
        $i1 = relativeWidth#12;

     label4:
        shift = $i1;

        $i2 = 1 << shift;

        return $i2;
    }

    private static void spreadSortBins(kanzi.SliceIntArray, int[], kanzi.util.sort.SpreadSort$Bin[], int)
    {
        kanzi.SliceIntArray sia;
        int[] minMaxCount, $r2, $r5;
        kanzi.util.sort.SpreadSort$Bin[] bins;
        int maxCount, binCount, n, i#5, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        kanzi.util.sort.SpreadSort$Bin $r0, $r1, $r3, $r4, $r6;

        sia := @parameter0: kanzi.SliceIntArray;

        minMaxCount := @parameter1: int[];

        bins := @parameter2: kanzi.util.sort.SpreadSort$Bin[];

        maxCount := @parameter3: int;

        binCount = minMaxCount[2];

        i#5 = 0;

     label1:
        if i#5 >= binCount goto label5;

        $r0 = bins[i#5];

        $i0 = $r0.<kanzi.util.sort.SpreadSort$Bin: int position>;

        $i1 = sia.<kanzi.SliceIntArray: int index>;

        $i2 = $i0 - $i1;

        $r1 = bins[i#5];

        $i3 = $r1.<kanzi.util.sort.SpreadSort$Bin: int count>;

        n = $i2 - $i3;

        if n >= 2 goto label2;

        goto label4;

     label2:
        if n >= maxCount goto label3;

        $r2 = sia.<kanzi.SliceIntArray: int[] array>;

        $i4 = sia.<kanzi.SliceIntArray: int index>;

        $r3 = bins[i#5];

        $i5 = $r3.<kanzi.util.sort.SpreadSort$Bin: int count>;

        $i6 = $i4 + $i5;

        $r4 = bins[i#5];

        $i7 = $r4.<kanzi.util.sort.SpreadSort$Bin: int position>;

        staticinvoke <java.util.Arrays: void sort(int[],int,int)>($r2, $i6, $i7);

        goto label4;

     label3:
        $r5 = sia.<kanzi.SliceIntArray: int[] array>;

        $i8 = sia.<kanzi.SliceIntArray: int index>;

        $r6 = bins[i#5];

        $i9 = $r6.<kanzi.util.sort.SpreadSort$Bin: int count>;

        $i10 = $i8 + $i9;

        staticinvoke <kanzi.util.sort.SpreadSort: boolean _sort(int[],int,int)>($r5, $i10, n);

     label4:
        i#5 = i#5 + 1;

        goto label1;

     label5:
        return;
    }


