    public void <init>()
    {
        weka.classifiers.evaluation.output.prediction.PlainText this;

        this := @this: weka.classifiers.evaluation.output.prediction.PlainText;

        specialinvoke this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: void <init>()>();

        return;
    }

    protected void doPrintFooter()
    {
        weka.classifiers.evaluation.output.prediction.PlainText this;

        this := @this: weka.classifiers.evaluation.output.prediction.PlainText;

        return;
    }

    protected void doPrintClassification(weka.classifiers.Classifier, weka.core.Instance, int) throws java.lang.Exception
    {
        weka.classifiers.evaluation.output.prediction.PlainText this;
        weka.classifiers.Classifier classifier;
        weka.core.Instance inst;
        int index;
        double[] d;

        this := @this: weka.classifiers.evaluation.output.prediction.PlainText;

        classifier := @parameter0: weka.classifiers.Classifier;

        inst := @parameter1: weka.core.Instance;

        index := @parameter2: int;

        d = interfaceinvoke classifier.<weka.classifiers.Classifier: double[] distributionForInstance(weka.core.Instance)>(inst);

        virtualinvoke this.<weka.classifiers.evaluation.output.prediction.PlainText: void doPrintClassification(double[],weka.core.Instance,int)>(d, inst, index);

        return;
    }

    protected void doPrintClassification(double[], weka.core.Instance, int) throws java.lang.Exception
    {
        weka.classifiers.evaluation.output.prediction.PlainText this;
        double[] dist;
        weka.core.Instance inst, withMissing;
        int index, width, prec, $i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, n#210, $i14, $i15, $i16;
        java.lang.Object $r0;
        weka.core.Instances $r1, $r8, $r61;
        double predValue#14, $d0, predValue#20, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        byte $b1;
        weka.core.Attribute $r2, $r9, $r62;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.lang.StringBuilder $r3, $r4, $r5, $r10, $r11, $r13, $r15, $r16, $r18, $r20, $r21, $r23, $r25, $r26, $r28, $r30, $r31, $r33, $r35, $r36, $r38, $r40, $r41, $r42, $r43, $r44, $r46, $r49, $r51, $r52, $r54, $r56, $r57, $r58, $r59, $r60, $r64, $r67, $r70, $r71, $r73, $r75, $r76, $r78, $r79;
        java.lang.String $r6, $r7, $r12, $r14, $r17, $r19, $r22, $r24, $r27, $r29, $r32, $r34, $r37, $r39, $r45, $r47, $r48, $r50, $r53, $r55, $r63, $r65, $r66, $r68, $r69, $r72, $r74, $r77, $r80;

        this := @this: weka.classifiers.evaluation.output.prediction.PlainText;

        dist := @parameter0: double[];

        inst := @parameter1: weka.core.Instance;

        index := @parameter2: int;

        $i0 = this.<weka.classifiers.evaluation.output.prediction.PlainText: int m_NumDecimals>;

        width = 7 + $i0;

        prec = this.<weka.classifiers.evaluation.output.prediction.PlainText: int m_NumDecimals>;

        $r0 = interfaceinvoke inst.<weka.core.Instance: java.lang.Object copy()>();

        withMissing = (weka.core.Instance) $r0;

        $r1 = interfaceinvoke inst.<weka.core.Instance: weka.core.Instances dataset()>();

        interfaceinvoke withMissing.<weka.core.Instance: void setDataset(weka.core.Instances)>($r1);

        predValue#14 = 0.0;

        $d0 = staticinvoke <weka.core.Utils: double sum(double[])>(dist);

        $b1 = $d0 cmpl 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 != 0 goto label01;

        predValue#20 = staticinvoke <weka.core.Utils: double missingValue()>();

        goto label03;

     label01:
        $r2 = interfaceinvoke inst.<weka.core.Instance: weka.core.Attribute classAttribute()>();

        $z0 = virtualinvoke $r2.<weka.core.Attribute: boolean isNominal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label02;

        $i2 = staticinvoke <weka.core.Utils: int maxIndex(double[])>(dist);

        predValue#20 = (double) $i2;

        goto label03;

     label02:
        predValue#20 = dist[0];

     label03:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $i3 = index + 1;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = staticinvoke <weka.core.Utils: java.lang.String padLeftAndAllowOverflow(java.lang.String,int)>($r6, 9);

        virtualinvoke this.<weka.classifiers.evaluation.output.prediction.PlainText: void append(java.lang.String)>($r7);

        $r8 = interfaceinvoke inst.<weka.core.Instance: weka.core.Instances dataset()>();

        $r9 = virtualinvoke $r8.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z1 = virtualinvoke $r9.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label10;

        $z2 = interfaceinvoke inst.<weka.core.Instance: boolean classIsMissing()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label04;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r12 = staticinvoke <weka.core.Utils: java.lang.String padLeft(java.lang.String,int)>("?", width);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke this.<weka.classifiers.evaluation.output.prediction.PlainText: void append(java.lang.String)>($r14);

        goto label05;

     label04:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $d1 = interfaceinvoke inst.<weka.core.Instance: double classValue()>();

        $r17 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>($d1, width, prec);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke this.<weka.classifiers.evaluation.output.prediction.PlainText: void append(java.lang.String)>($r19);

     label05:
        $z3 = staticinvoke <weka.core.Utils: boolean isMissingValue(double)>(predValue#20);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label06;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r22 = staticinvoke <weka.core.Utils: java.lang.String padLeft(java.lang.String,int)>("?", width);

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke this.<weka.classifiers.evaluation.output.prediction.PlainText: void append(java.lang.String)>($r24);

        goto label07;

     label06:
        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r27 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>(predValue#20, width, prec);

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke this.<weka.classifiers.evaluation.output.prediction.PlainText: void append(java.lang.String)>($r29);

     label07:
        $z4 = staticinvoke <weka.core.Utils: boolean isMissingValue(double)>(predValue#20);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label08;

        $z5 = interfaceinvoke inst.<weka.core.Instance: boolean classIsMissing()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label09;

     label08:
        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r32 = staticinvoke <weka.core.Utils: java.lang.String padLeft(java.lang.String,int)>("?", width);

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke this.<weka.classifiers.evaluation.output.prediction.PlainText: void append(java.lang.String)>($r34);

        goto label22;

     label09:
        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $d2 = interfaceinvoke inst.<weka.core.Instance: double classValue()>();

        $d3 = predValue#20 - $d2;

        $r37 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>($d3, width, prec);

        $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke this.<weka.classifiers.evaluation.output.prediction.PlainText: void append(java.lang.String)>($r39);

        goto label22;

     label10:
        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $d4 = interfaceinvoke inst.<weka.core.Instance: double classValue()>();

        $i4 = (int) $d4;

        $i5 = $i4 + 1;

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $i6 = interfaceinvoke inst.<weka.core.Instance: int classIndex()>();

        $r45 = interfaceinvoke inst.<weka.core.Instance: java.lang.String toString(int)>($i6);

        $r46 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        $r48 = staticinvoke <weka.core.Utils: java.lang.String padLeftAndAllowOverflow(java.lang.String,int)>($r47, width);

        $r49 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke this.<weka.classifiers.evaluation.output.prediction.PlainText: void append(java.lang.String)>($r50);

        $z6 = staticinvoke <weka.core.Utils: boolean isMissingValue(double)>(predValue#20);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label11;

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r53 = staticinvoke <weka.core.Utils: java.lang.String padLeft(java.lang.String,int)>("?", width);

        $r54 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke this.<weka.classifiers.evaluation.output.prediction.PlainText: void append(java.lang.String)>($r55);

        goto label12;

     label11:
        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r58 = new java.lang.StringBuilder;

        specialinvoke $r58.<java.lang.StringBuilder: void <init>()>();

        $i7 = (int) predValue#20;

        $i8 = $i7 + 1;

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r61 = interfaceinvoke inst.<weka.core.Instance: weka.core.Instances dataset()>();

        $r62 = virtualinvoke $r61.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $i9 = (int) predValue#20;

        $r63 = virtualinvoke $r62.<weka.core.Attribute: java.lang.String value(int)>($i9);

        $r64 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r63);

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        $r66 = staticinvoke <weka.core.Utils: java.lang.String padLeftAndAllowOverflow(java.lang.String,int)>($r65, width);

        $r67 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r66);

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke this.<weka.classifiers.evaluation.output.prediction.PlainText: void append(java.lang.String)>($r68);

     label12:
        $z7 = staticinvoke <weka.core.Utils: boolean isMissingValue(double)>(predValue#20);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 != 0 goto label13;

        $z8 = interfaceinvoke inst.<weka.core.Instance: boolean classIsMissing()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 != 0 goto label13;

        $i10 = (int) predValue#20;

        $i11 = $i10 + 1;

        $d5 = interfaceinvoke inst.<weka.core.Instance: double classValue()>();

        $i12 = (int) $d5;

        $i13 = $i12 + 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i11);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i13);

        if $i11 == $i13 goto label13;

        virtualinvoke this.<weka.classifiers.evaluation.output.prediction.PlainText: void append(java.lang.String)>("   +  ");

        goto label14;

     label13:
        virtualinvoke this.<weka.classifiers.evaluation.output.prediction.PlainText: void append(java.lang.String)>("      ");

     label14:
        $z9 = this.<weka.classifiers.evaluation.output.prediction.PlainText: boolean m_OutputDistribution>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 == 0 goto label20;

        $z10 = staticinvoke <weka.core.Utils: boolean isMissingValue(double)>(predValue#20);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z10);

        if $z10 == 0 goto label15;

        virtualinvoke this.<weka.classifiers.evaluation.output.prediction.PlainText: void append(java.lang.String)>(" ?");

        goto label22;

     label15:
        virtualinvoke this.<weka.classifiers.evaluation.output.prediction.PlainText: void append(java.lang.String)>(" ");

        n#210 = 0;

     label16:
        $i14 = lengthof dist;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n#210);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i14);

        if n#210 >= $i14 goto label19;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n#210);

        if n#210 <= 0 goto label17;

        virtualinvoke this.<weka.classifiers.evaluation.output.prediction.PlainText: void append(java.lang.String)>(",");

     label17:
        $i15 = (int) predValue#20;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n#210);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i15);

        if n#210 != $i15 goto label18;

        virtualinvoke this.<weka.classifiers.evaluation.output.prediction.PlainText: void append(java.lang.String)>("*");

     label18:
        $d6 = dist[n#210];

        $r69 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int)>($d6, prec);

        virtualinvoke this.<weka.classifiers.evaluation.output.prediction.PlainText: void append(java.lang.String)>($r69);

        n#210 = n#210 + 1;

        goto label16;

     label19:
        goto label22;

     label20:
        $z11 = staticinvoke <weka.core.Utils: boolean isMissingValue(double)>(predValue#20);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z11);

        if $z11 == 0 goto label21;

        virtualinvoke this.<weka.classifiers.evaluation.output.prediction.PlainText: void append(java.lang.String)>(" ?");

        goto label22;

     label21:
        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>()>();

        $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $i16 = (int) predValue#20;

        $d7 = dist[$i16];

        $r72 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int)>($d7, prec);

        $r73 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r72);

        $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke this.<weka.classifiers.evaluation.output.prediction.PlainText: void append(java.lang.String)>($r74);

     label22:
        $r75 = new java.lang.StringBuilder;

        specialinvoke $r75.<java.lang.StringBuilder: void <init>()>();

        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r77 = virtualinvoke this.<weka.classifiers.evaluation.output.prediction.PlainText: java.lang.String attributeValuesString(weka.core.Instance)>(withMissing);

        $r78 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r77);

        $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke this.<weka.classifiers.evaluation.output.prediction.PlainText: void append(java.lang.String)>($r80);

        return;
    }

    protected java.lang.String attributeValuesString(weka.core.Instance)
    {
        weka.classifiers.evaluation.output.prediction.PlainText this;
        weka.core.Instance instance;
        java.lang.StringBuffer text, $r0;
        weka.core.Range $r1, $r2, $r3;
        boolean firstOutput#6, $z0;
        int $i0, $i1, i#14, $i2, $i3;
        java.lang.String $r6, $r9;

        this := @this: weka.classifiers.evaluation.output.prediction.PlainText;

        instance := @parameter0: weka.core.Instance;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        text = $r0;

        $r1 = this.<weka.classifiers.evaluation.output.prediction.PlainText: weka.core.Range m_Attributes>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 == null goto label6;

        firstOutput#6 = 1;

        $r2 = this.<weka.classifiers.evaluation.output.prediction.PlainText: weka.core.Range m_Attributes>;

        $i0 = interfaceinvoke instance.<weka.core.Instance: int numAttributes()>();

        $i1 = $i0 - 1;

        virtualinvoke $r2.<weka.core.Range: void setUpper(int)>($i1);

        i#14 = 0;

     label1:
        $i2 = interfaceinvoke instance.<weka.core.Instance: int numAttributes()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#14);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#14 >= $i2 goto label5;

        $r3 = this.<weka.classifiers.evaluation.output.prediction.PlainText: weka.core.Range m_Attributes>;

        $z0 = virtualinvoke $r3.<weka.core.Range: boolean isInRange(int)>(i#14);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label4;

        $i3 = interfaceinvoke instance.<weka.core.Instance: int classIndex()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#14);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if i#14 == $i3 goto label4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(firstOutput#6);

        if firstOutput#6 == 0 goto label2;

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        goto label3;

     label2:
        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

     label3:
        $r6 = interfaceinvoke instance.<weka.core.Instance: java.lang.String toString(int)>(i#14);

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        firstOutput#6 = 0;

     label4:
        i#14 = i#14 + 1;

        goto label1;

     label5:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(firstOutput#6);

        if firstOutput#6 != 0 goto label6;

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

     label6:
        $r9 = virtualinvoke text.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r9;
    }

    protected void doPrintHeader()
    {
        weka.classifiers.evaluation.output.prediction.PlainText this;
        weka.core.Instances $r0, $r3, $r4, $r6;
        weka.core.Attribute $r1, $r7;
        boolean $z0, $z1, first#18, $z2;
        weka.core.Range $r2, $r5;
        int i#20, $i0, $i1;
        java.lang.String $r8;

        this := @this: weka.classifiers.evaluation.output.prediction.PlainText;

        $r0 = this.<weka.classifiers.evaluation.output.prediction.PlainText: weka.core.Instances m_Header>;

        $r1 = virtualinvoke $r0.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z0 = virtualinvoke $r1.<weka.core.Attribute: boolean isNominal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $z1 = this.<weka.classifiers.evaluation.output.prediction.PlainText: boolean m_OutputDistribution>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label1;

        virtualinvoke this.<weka.classifiers.evaluation.output.prediction.PlainText: void append(java.lang.String)>("    inst#     actual  predicted error distribution");

        goto label3;

     label1:
        virtualinvoke this.<weka.classifiers.evaluation.output.prediction.PlainText: void append(java.lang.String)>("    inst#     actual  predicted error prediction");

        goto label3;

     label2:
        virtualinvoke this.<weka.classifiers.evaluation.output.prediction.PlainText: void append(java.lang.String)>("    inst#     actual  predicted      error");

     label3:
        $r2 = this.<weka.classifiers.evaluation.output.prediction.PlainText: weka.core.Range m_Attributes>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        if $r2 == null goto label9;

        virtualinvoke this.<weka.classifiers.evaluation.output.prediction.PlainText: void append(java.lang.String)>(" (");

        first#18 = 1;

        i#20 = 0;

     label4:
        $r3 = this.<weka.classifiers.evaluation.output.prediction.PlainText: weka.core.Instances m_Header>;

        $i0 = virtualinvoke $r3.<weka.core.Instances: int numAttributes()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#20);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#20 >= $i0 goto label8;

        $r4 = this.<weka.classifiers.evaluation.output.prediction.PlainText: weka.core.Instances m_Header>;

        $i1 = virtualinvoke $r4.<weka.core.Instances: int classIndex()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#20);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#20 != $i1 goto label5;

        goto label7;

     label5:
        $r5 = this.<weka.classifiers.evaluation.output.prediction.PlainText: weka.core.Range m_Attributes>;

        $z2 = virtualinvoke $r5.<weka.core.Range: boolean isInRange(int)>(i#20);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label7;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(first#18);

        if first#18 != 0 goto label6;

        virtualinvoke this.<weka.classifiers.evaluation.output.prediction.PlainText: void append(java.lang.String)>(",");

     label6:
        $r6 = this.<weka.classifiers.evaluation.output.prediction.PlainText: weka.core.Instances m_Header>;

        $r7 = virtualinvoke $r6.<weka.core.Instances: weka.core.Attribute attribute(int)>(i#20);

        $r8 = virtualinvoke $r7.<weka.core.Attribute: java.lang.String name()>();

        virtualinvoke this.<weka.classifiers.evaluation.output.prediction.PlainText: void append(java.lang.String)>($r8);

        first#18 = 0;

     label7:
        i#20 = i#20 + 1;

        goto label4;

     label8:
        virtualinvoke this.<weka.classifiers.evaluation.output.prediction.PlainText: void append(java.lang.String)>(")");

     label9:
        virtualinvoke this.<weka.classifiers.evaluation.output.prediction.PlainText: void append(java.lang.String)>("\n");

        return;
    }


