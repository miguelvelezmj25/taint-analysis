    public static java.lang.String dumpString(byte[], int)
    {
        byte[] key;
        int nspaces;
        java.lang.String $r0;

        key := @parameter0: byte[];

        nspaces := @parameter1: int;

        $r0 = staticinvoke <com.sleepycat.je.tree.Key: java.lang.String dumpString(byte[],java.lang.String,int)>(key, "key", nspaces);

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        com.sleepycat.je.tree.Key$DumpType $r1;
        byte[] $r2;

        $r0 = class "com/sleepycat/je/tree/Key";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sleepycat.je.tree.Key: boolean $assertionsDisabled> = $z1;

        $r1 = <com.sleepycat.je.tree.Key$DumpType: com.sleepycat.je.tree.Key$DumpType BINARY>;

        <com.sleepycat.je.tree.Key: com.sleepycat.je.tree.Key$DumpType DUMP_TYPE> = $r1;

        $r2 = newarray (byte)[0];

        <com.sleepycat.je.tree.Key: byte[] EMPTY_KEY> = $r2;

        return;
    }

    public static java.lang.String dumpString(byte[], java.lang.String, int)
    {
        byte[] key;
        java.lang.String xmltag, $r1, $r6, $r9;
        int nspaces;
        java.lang.StringBuilder sb, $r0, $r3, $r4;

        key := @parameter0: byte[];

        xmltag := @parameter1: java.lang.String;

        nspaces := @parameter2: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        sb = $r0;

        $r1 = staticinvoke <com.sleepycat.je.tree.TreeUtils: java.lang.String indent(int)>(nspaces);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(xmltag);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" v=\"");

        $r6 = staticinvoke <com.sleepycat.je.tree.Key: java.lang.String getNoFormatString(byte[])>(key);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"/>");

        $r9 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public static java.lang.String getNoFormatString(byte[])
    {
        byte[] key;
        java.lang.StringBuilder sb, $r0, $r17;
        int len;
        com.sleepycat.je.tree.Key$DumpType $r1, $r2, $r3, $r4, $r6, $r9, $r10, $r14, $r15;
        java.lang.String $r7, $r12, $r20, $r22;

        key := @parameter0: byte[];

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        sb = $r0;

        $r1 = <com.sleepycat.je.tree.Key: com.sleepycat.je.tree.Key$DumpType DUMP_TYPE>;

        $r2 = <com.sleepycat.je.tree.Key$DumpType: com.sleepycat.je.tree.Key$DumpType BINARY>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        if $r1 == $r2 goto label01;

        $r3 = <com.sleepycat.je.tree.Key: com.sleepycat.je.tree.Key$DumpType DUMP_TYPE>;

        $r4 = <com.sleepycat.je.tree.Key$DumpType: com.sleepycat.je.tree.Key$DumpType HEX>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        if $r3 != $r4 goto label03;

     label01:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(key);

        if key != null goto label02;

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<null>");

        goto label10;

     label02:
        $r6 = <com.sleepycat.je.tree.Key: com.sleepycat.je.tree.Key$DumpType DUMP_TYPE>;

        $r7 = virtualinvoke $r6.<com.sleepycat.je.tree.Key$DumpType: java.lang.String dumpByteArray(byte[])>(key);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        goto label10;

     label03:
        $r9 = <com.sleepycat.je.tree.Key: com.sleepycat.je.tree.Key$DumpType DUMP_TYPE>;

        $r10 = <com.sleepycat.je.tree.Key$DumpType: com.sleepycat.je.tree.Key$DumpType TEXT>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r10);

        if $r9 != $r10 goto label06;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(key);

        if key != null goto label04;

        $r12 = "";

        goto label05;

     label04:
        $r12 = staticinvoke <com.sleepycat.utilint.StringUtils: java.lang.String fromUTF8(byte[])>(key);

     label05:
        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        goto label10;

     label06:
        $r14 = <com.sleepycat.je.tree.Key: com.sleepycat.je.tree.Key$DumpType DUMP_TYPE>;

        $r15 = <com.sleepycat.je.tree.Key$DumpType: com.sleepycat.je.tree.Key$DumpType OBFUSCATE>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r14);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r15);

        if $r14 != $r15 goto label10;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(key);

        if key != null goto label07;

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<null>");

        goto label10;

     label07:
        len = lengthof key;

        $r17 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(len);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len);

        if len != 1 goto label08;

        $r20 = " byte]";

        goto label09;

     label08:
        $r20 = " bytes]";

     label09:
        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

     label10:
        $r22 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r22;
    }

    public static byte[] makeKey(com.sleepycat.je.DatabaseEntry)
    {
        com.sleepycat.je.DatabaseEntry dbt;
        byte[] entryKey, newKey, $r0;
        int $i0, $i1, $i2;

        dbt := @parameter0: com.sleepycat.je.DatabaseEntry;

        entryKey = virtualinvoke dbt.<com.sleepycat.je.DatabaseEntry: byte[] getData()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(entryKey);

        if entryKey != null goto label1;

        $r0 = <com.sleepycat.je.tree.Key: byte[] EMPTY_KEY>;

        return $r0;

     label1:
        $i0 = virtualinvoke dbt.<com.sleepycat.je.DatabaseEntry: int getSize()>();

        newKey = newarray (byte)[$i0];

        $i1 = virtualinvoke dbt.<com.sleepycat.je.DatabaseEntry: int getOffset()>();

        $i2 = virtualinvoke dbt.<com.sleepycat.je.DatabaseEntry: int getSize()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(entryKey, $i1, newKey, 0, $i2);

        return newKey;
    }

    public static int compareUnsignedBytes(byte[], int, int, byte[], int, int)
    {
        byte[] key1, key2;
        int off1, len1, off2, len2, limit, i#5, $i0, $i1, $i4, $i5;
        byte b1, b2;
        short $s2, $s3;

        key1 := @parameter0: byte[];

        off1 := @parameter1: int;

        len1 := @parameter2: int;

        key2 := @parameter3: byte[];

        off2 := @parameter4: int;

        len2 := @parameter5: int;

        limit = staticinvoke <java.lang.Math: int min(int,int)>(len1, len2);

        i#5 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(limit);

        if i#5 >= limit goto label4;

        $i0 = i#5 + off1;

        b1 = key1[$i0];

        $i1 = i#5 + off2;

        b2 = key2[$i1];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b2);

        if b1 != b2 goto label2;

        goto label3;

     label2:
        $s2 = b1 & 255;

        $s3 = b2 & 255;

        $i4 = $s2 - $s3;

        return $i4;

     label3:
        i#5 = i#5 + 1;

        goto label1;

     label4:
        $i5 = len1 - len2;

        return $i5;
    }

    public static int compareKeys(byte[], byte[], java.util.Comparator)
    {
        byte[] key1, key2;
        java.util.Comparator comparator;
        int $i0, $i1;

        key1 := @parameter0: byte[];

        key2 := @parameter1: byte[];

        comparator := @parameter2: java.util.Comparator;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(comparator);

        if comparator == null goto label1;

        $i0 = interfaceinvoke comparator.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(key1, key2);

        return $i0;

     label1:
        $i1 = staticinvoke <com.sleepycat.je.tree.Key: int compareUnsignedBytes(byte[],byte[])>(key1, key2);

        return $i1;
    }

    private static int compareUnsignedBytes(byte[], byte[])
    {
        byte[] key1, key2;
        int $i0, $i1, $i2;

        key1 := @parameter0: byte[];

        key2 := @parameter1: byte[];

        $i0 = lengthof key1;

        $i1 = lengthof key2;

        $i2 = staticinvoke <com.sleepycat.je.tree.Key: int compareUnsignedBytes(byte[],int,int,byte[],int,int)>(key1, 0, $i0, key2, 0, $i1);

        return $i2;
    }

    public static int compareKeys(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, java.util.Comparator)
    {
        com.sleepycat.je.DatabaseEntry entry1, entry2;
        java.util.Comparator comparator;
        byte[] key1, key2;
        int $i0, $i1;

        entry1 := @parameter0: com.sleepycat.je.DatabaseEntry;

        entry2 := @parameter1: com.sleepycat.je.DatabaseEntry;

        comparator := @parameter2: java.util.Comparator;

        key1 = staticinvoke <com.sleepycat.je.tree.Key: byte[] makeKey(com.sleepycat.je.DatabaseEntry)>(entry1);

        key2 = staticinvoke <com.sleepycat.je.tree.Key: byte[] makeKey(com.sleepycat.je.DatabaseEntry)>(entry2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(comparator);

        if comparator == null goto label1;

        $i0 = interfaceinvoke comparator.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(key1, key2);

        return $i0;

     label1:
        $i1 = staticinvoke <com.sleepycat.je.tree.Key: int compareUnsignedBytes(byte[],byte[])>(key1, key2);

        return $i1;
    }

    public static byte[] createKeyPrefix(byte[], byte[])
    {
        byte[] key1, key2, 'ret';
        int len, $i0;

        key1 := @parameter0: byte[];

        key2 := @parameter1: byte[];

        $i0 = lengthof key1;

        len = staticinvoke <com.sleepycat.je.tree.Key: int getKeyPrefixLength(byte[],int,byte[])>(key1, $i0, key2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len);

        if len != 0 goto label1;

        return null;

     label1:
        'ret' = newarray (byte)[len];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(key1, 0, 'ret', 0, len);

        return 'ret';
    }

    public static int getKeyPrefixLength(byte[], int, byte[])
    {
        byte[] key1, key2;
        int a1Len, a2Len, limit, i#12;
        byte b1, b2;
        boolean $z0;
        java.lang.AssertionError $r0;

        key1 := @parameter0: byte[];

        a1Len := @parameter1: int;

        key2 := @parameter2: byte[];

        $z0 = <com.sleepycat.je.tree.Key: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(key1);

        if key1 == null goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(key2);

        if key2 != null goto label2;

     label1:
        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label2:
        a2Len = lengthof key2;

        limit = staticinvoke <java.lang.Math: int min(int,int)>(a1Len, a2Len);

        i#12 = 0;

     label3:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(limit);

        if i#12 >= limit goto label5;

        b1 = key1[i#12];

        b2 = key2[i#12];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b2);

        if b1 == b2 goto label4;

        return i#12;

     label4:
        i#12 = i#12 + 1;

        goto label3;

     label5:
        return limit;
    }


