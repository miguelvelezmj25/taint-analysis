    public static java.util.logging.Logger getLogger(java.lang.Class)
    {
        java.lang.Class cl;
        java.util.logging.Logger logger;
        java.util.logging.Handler[] handlers, l6;
        int l7, l8#17;
        java.util.logging.Handler h;
        java.lang.String $r0;
        boolean hasConsoleHandler#5, hasFileHandler#7, hasConfiguredHandler#9, $z0, $z1, $z2;
        berkeley.com.sleepycat.je.utilint.ConsoleRedirectHandler $r1;
        berkeley.com.sleepycat.je.utilint.FileRedirectHandler $r2;
        berkeley.com.sleepycat.je.utilint.ConfiguredRedirectHandler $r3;

        cl := @parameter0: java.lang.Class;

        $r0 = virtualinvoke cl.<java.lang.Class: java.lang.String getName()>();

        logger = staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: java.util.logging.Logger createLogger(java.lang.String)>($r0);

        hasConsoleHandler#5 = 0;

        hasFileHandler#7 = 0;

        hasConfiguredHandler#9 = 0;

        handlers = virtualinvoke logger.<java.util.logging.Logger: java.util.logging.Handler[] getHandlers()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(handlers);

        if handlers == null goto label5;

        l6 = handlers;

        l7 = lengthof l6;

        l8#17 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l8#17);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l7);

        if l8#17 >= l7 goto label5;

        h = l6[l8#17];

        $z0 = h instanceof java.util.logging.ConsoleHandler;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        hasConsoleHandler#5 = 1;

     label2:
        $z1 = h instanceof berkeley.com.sleepycat.je.utilint.FileRedirectHandler;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label3;

        hasFileHandler#7 = 1;

     label3:
        $z2 = h instanceof berkeley.com.sleepycat.je.utilint.ConfiguredRedirectHandler;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label4;

        hasConfiguredHandler#9 = 1;

     label4:
        l8#17 = l8#17 + 1;

        goto label1;

     label5:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(hasConsoleHandler#5);

        if hasConsoleHandler#5 != 0 goto label6;

        $r1 = new berkeley.com.sleepycat.je.utilint.ConsoleRedirectHandler;

        specialinvoke $r1.<berkeley.com.sleepycat.je.utilint.ConsoleRedirectHandler: void <init>()>();

        virtualinvoke logger.<java.util.logging.Logger: void addHandler(java.util.logging.Handler)>($r1);

     label6:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(hasFileHandler#7);

        if hasFileHandler#7 != 0 goto label7;

        $r2 = new berkeley.com.sleepycat.je.utilint.FileRedirectHandler;

        specialinvoke $r2.<berkeley.com.sleepycat.je.utilint.FileRedirectHandler: void <init>()>();

        virtualinvoke logger.<java.util.logging.Logger: void addHandler(java.util.logging.Handler)>($r2);

     label7:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(hasConfiguredHandler#9);

        if hasConfiguredHandler#9 != 0 goto label8;

        $r3 = new berkeley.com.sleepycat.je.utilint.ConfiguredRedirectHandler;

        specialinvoke $r3.<berkeley.com.sleepycat.je.utilint.ConfiguredRedirectHandler: void <init>()>();

        virtualinvoke logger.<java.util.logging.Logger: void addHandler(java.util.logging.Handler)>($r3);

     label8:
        return logger;
    }

    static void <clinit>()
    {
        java.util.concurrent.ConcurrentHashMap $r0, $r1;
        java.lang.Object $r2;

        $r0 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        <berkeley.com.sleepycat.je.utilint.LoggerUtils: java.util.Map envMap> = $r0;

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        <berkeley.com.sleepycat.je.utilint.LoggerUtils: java.util.Map formatterMap> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        <berkeley.com.sleepycat.je.utilint.LoggerUtils: java.lang.Object fullThreadDumpMutex> = $r2;

        return;
    }

    private static java.util.logging.Logger createLogger(java.lang.String)
    {
        java.lang.String className;
        java.util.logging.Logger logger;

        className := @parameter0: java.lang.String;

        logger = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>(className);

        virtualinvoke logger.<java.util.logging.Logger: void setUseParentHandlers(boolean)>(0);

        return logger;
    }

    public static void fullThreadDump(java.util.logging.Logger, berkeley.com.sleepycat.je.dbi.EnvironmentImpl, java.util.logging.Level)
    {
        java.util.logging.Logger logger;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        java.util.logging.Level level;
        java.lang.Object l3, $r0, $r2, $r3, $r6;
        java.util.Map stackTraces;
        java.util.Iterator l5;
        java.util.Map$Entry stme;
        java.lang.StackTraceElement[] l7;
        int l8, l9#34;
        java.lang.StackTraceElement ste;
        java.lang.Throwable l11, $r11;
        boolean $z0, $z1, $z2;
        java.util.Set $r1;
        java.lang.Thread $r4;
        java.lang.String $r5, $r10;
        java.lang.StringBuilder $r7, $r8, $r9;

        logger := @parameter0: java.util.logging.Logger;

        envImpl := @parameter1: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        level := @parameter2: java.util.logging.Level;

        $z0 = virtualinvoke logger.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>(level);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label01;

        return;

     label01:
        $r0 = <berkeley.com.sleepycat.je.utilint.LoggerUtils: java.lang.Object fullThreadDumpMutex>;

        l3 = $r0;

        entermonitor $r0;

     label02:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(envImpl);

        if envImpl == null goto label05;

        $z1 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean getDidFullThreadDump()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label04;

        exitmonitor l3;

     label03:
        return;

     label04:
        virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void setDidFullThreadDump(boolean)>(1);

     label05:
        stackTraces = staticinvoke <java.lang.Thread: java.util.Map getAllStackTraces()>();

        $r1 = interfaceinvoke stackTraces.<java.util.Map: java.util.Set entrySet()>();

        l5 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $z2 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label09;

        $r2 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        stme = (java.util.Map$Entry) $r2;

        $r3 = interfaceinvoke stme.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r4 = (java.lang.Thread) $r3;

        $r5 = virtualinvoke $r4.<java.lang.Thread: java.lang.String toString()>();

        staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: void logMsg(java.util.logging.Logger,berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.util.logging.Level,java.lang.String)>(logger, envImpl, level, $r5);

        $r6 = interfaceinvoke stme.<java.util.Map$Entry: java.lang.Object getValue()>();

        l7 = (java.lang.StackTraceElement[]) $r6;

        l8 = lengthof l7;

        l9#34 = 0;

     label07:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l9#34);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l8);

        if l9#34 >= l8 goto label08;

        ste = l7[l9#34];

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("     ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(ste);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: void logMsg(java.util.logging.Logger,berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.util.logging.Level,java.lang.String)>(logger, envImpl, level, $r10);

        l9#34 = l9#34 + 1;

        goto label07;

     label08:
        goto label06;

     label09:
        exitmonitor l3;

     label10:
        goto label14;

     label11:
        $r11 := @caughtexception;

     label12:
        l11 = $r11;

        exitmonitor l3;

     label13:
        throw l11;

     label14:
        return;

        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public static void logMsg(java.util.logging.Logger, berkeley.com.sleepycat.je.dbi.EnvironmentImpl, java.util.logging.Level, java.lang.String)
    {
        java.util.logging.Logger useLogger;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        java.util.logging.Level logLevel;
        java.lang.String msg;
        java.lang.Throwable l4, $r6;
        java.util.Map $r0, $r3, $r7;
        java.lang.Thread $r1, $r4, $r8;

        useLogger := @parameter0: java.util.logging.Logger;

        envImpl := @parameter1: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        logLevel := @parameter2: java.util.logging.Level;

        msg := @parameter3: java.lang.String;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(envImpl);

        if envImpl == null goto label1;

        $r0 = <berkeley.com.sleepycat.je.utilint.LoggerUtils: java.util.Map envMap>;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, envImpl);

     label1:
        virtualinvoke useLogger.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>(logLevel, msg);

     label2:
        $r3 = <berkeley.com.sleepycat.je.utilint.LoggerUtils: java.util.Map envMap>;

        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r4);

        goto label6;

     label3:
        $r6 := @caughtexception;

     label4:
        l4 = $r6;

     label5:
        $r7 = <berkeley.com.sleepycat.je.utilint.LoggerUtils: java.util.Map envMap>;

        $r8 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        interfaceinvoke $r7.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r8);

        throw l4;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static void severe(java.util.logging.Logger, berkeley.com.sleepycat.je.dbi.EnvironmentImpl, java.lang.String)
    {
        java.util.logging.Logger useLogger;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        java.lang.String msg;
        java.util.logging.Level $r0;

        useLogger := @parameter0: java.util.logging.Logger;

        envImpl := @parameter1: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        msg := @parameter2: java.lang.String;

        $r0 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: void logMsg(java.util.logging.Logger,berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.util.logging.Level,java.lang.String)>(useLogger, envImpl, $r0, msg);

        return;
    }

    public static java.lang.String getStackTrace(java.lang.Throwable)
    {
        java.lang.Throwable t;
        java.io.StringWriter sw, $r0;
        java.io.PrintWriter $r1;
        java.lang.String stackTrace#8, stackTrace#13, stackTrace#18;

        t := @parameter0: java.lang.Throwable;

        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>()>();

        sw = $r0;

        $r1 = new java.io.PrintWriter;

        specialinvoke $r1.<java.io.PrintWriter: void <init>(java.io.Writer)>(sw);

        virtualinvoke t.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>($r1);

        stackTrace#8 = virtualinvoke sw.<java.io.StringWriter: java.lang.String toString()>();

        stackTrace#13 = virtualinvoke stackTrace#8.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("&lt", "<");

        stackTrace#18 = virtualinvoke stackTrace#13.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("&gt", ">");

        return stackTrace#18;
    }

    public static java.lang.String getLoggerProperty(java.lang.String)
    {
        java.lang.String property, $r0;
        java.util.logging.LogManager mgr;

        property := @parameter0: java.lang.String;

        mgr = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();

        $r0 = virtualinvoke mgr.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>(property);

        return $r0;
    }

    public static java.util.logging.Level getHandlerLevel(berkeley.com.sleepycat.je.dbi.DbConfigManager, berkeley.com.sleepycat.je.config.ConfigParam, java.lang.String)
    {
        berkeley.com.sleepycat.je.dbi.DbConfigManager configManager;
        berkeley.com.sleepycat.je.config.ConfigParam param;
        java.lang.String levelName, propertyLevel, level#6, $r0;
        boolean changed#2, $z0;
        java.util.logging.Level $r1;

        configManager := @parameter0: berkeley.com.sleepycat.je.dbi.DbConfigManager;

        param := @parameter1: berkeley.com.sleepycat.je.config.ConfigParam;

        levelName := @parameter2: java.lang.String;

        changed#2 = 0;

        level#6 = virtualinvoke configManager.<berkeley.com.sleepycat.je.dbi.DbConfigManager: java.lang.String get(berkeley.com.sleepycat.je.config.ConfigParam)>(param);

        $r0 = virtualinvoke param.<berkeley.com.sleepycat.je.config.ConfigParam: java.lang.String getDefault()>();

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>(level#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        changed#2 = 1;

     label1:
        propertyLevel = staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: java.lang.String getLoggerProperty(java.lang.String)>(levelName);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(changed#2);

        if changed#2 != 0 goto label2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(propertyLevel);

        if propertyLevel == null goto label2;

        level#6 = propertyLevel;

     label2:
        $r1 = staticinvoke <java.util.logging.Level: java.util.logging.Level parse(java.lang.String)>(level#6);

        return $r1;
    }

    public static void warning(java.util.logging.Logger, berkeley.com.sleepycat.je.dbi.EnvironmentImpl, java.lang.String)
    {
        java.util.logging.Logger useLogger;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        java.lang.String msg;
        java.util.logging.Level $r0;

        useLogger := @parameter0: java.util.logging.Logger;

        envImpl := @parameter1: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        msg := @parameter2: java.lang.String;

        $r0 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: void logMsg(java.util.logging.Logger,berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.util.logging.Level,java.lang.String)>(useLogger, envImpl, $r0, msg);

        return;
    }

    public static void traceAndLogException(berkeley.com.sleepycat.je.dbi.EnvironmentImpl, java.lang.String, java.lang.String, java.lang.String, java.lang.Throwable)
    {
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        java.lang.String sourceClass, sourceMethod, msg, traceMsg, $r3;
        java.lang.Throwable t, l6, $r13;
        java.lang.StringBuilder $r0, $r1, $r2, $r4;
        java.util.Map $r5, $r10, $r14;
        java.lang.Thread $r6, $r11, $r15;
        java.util.logging.Logger $r8;
        java.util.logging.Level $r9;

        envImpl := @parameter0: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        sourceClass := @parameter1: java.lang.String;

        sourceMethod := @parameter2: java.lang.String;

        msg := @parameter3: java.lang.String;

        t := @parameter4: java.lang.Throwable;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(msg);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r3 = staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: java.lang.String getStackTrace(java.lang.Throwable)>(t);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        traceMsg = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = <berkeley.com.sleepycat.je.utilint.LoggerUtils: java.util.Map envMap>;

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, envImpl);

     label1:
        $r8 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: java.util.logging.Logger getLogger()>();

        $r9 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r8.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>($r9, sourceClass, sourceMethod, traceMsg);

     label2:
        $r10 = <berkeley.com.sleepycat.je.utilint.LoggerUtils: java.util.Map envMap>;

        $r11 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        interfaceinvoke $r10.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r11);

        goto label6;

     label3:
        $r13 := @caughtexception;

     label4:
        l6 = $r13;

     label5:
        $r14 = <berkeley.com.sleepycat.je.utilint.LoggerUtils: java.util.Map envMap>;

        $r15 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        interfaceinvoke $r14.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r15);

        throw l6;

     label6:
        staticinvoke <berkeley.com.sleepycat.je.log.Trace: void trace(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String)>(envImpl, traceMsg);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static void traceAndLog(java.util.logging.Logger, berkeley.com.sleepycat.je.dbi.EnvironmentImpl, java.util.logging.Level, java.lang.String)
    {
        java.util.logging.Logger logger;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        java.util.logging.Level logLevel;
        java.lang.String msg;

        logger := @parameter0: java.util.logging.Logger;

        envImpl := @parameter1: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        logLevel := @parameter2: java.util.logging.Level;

        msg := @parameter3: java.lang.String;

        staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: void logMsg(java.util.logging.Logger,berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.util.logging.Level,java.lang.String)>(logger, envImpl, logLevel, msg);

        staticinvoke <berkeley.com.sleepycat.je.log.Trace: void trace(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String)>(envImpl, msg);

        return;
    }

    public static void fine(java.util.logging.Logger, berkeley.com.sleepycat.je.dbi.EnvironmentImpl, java.lang.String)
    {
        java.util.logging.Logger useLogger;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        java.lang.String msg;
        java.util.logging.Level $r0;

        useLogger := @parameter0: java.util.logging.Logger;

        envImpl := @parameter1: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        msg := @parameter2: java.lang.String;

        $r0 = <java.util.logging.Level: java.util.logging.Level FINE>;

        staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: void logMsg(java.util.logging.Logger,berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.util.logging.Level,java.lang.String)>(useLogger, envImpl, $r0, msg);

        return;
    }

    public static void envLogMsg(java.util.logging.Level, berkeley.com.sleepycat.je.dbi.EnvironmentImpl, java.lang.String)
    {
        java.util.logging.Level logLevel;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        java.lang.String msg;
        java.util.logging.Logger $r0;

        logLevel := @parameter0: java.util.logging.Level;

        envImpl := @parameter1: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        msg := @parameter2: java.lang.String;

        $r0 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: java.util.logging.Logger getLogger()>();

        staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: void logMsg(java.util.logging.Logger,berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.util.logging.Level,java.lang.String)>($r0, envImpl, logLevel, msg);

        return;
    }

    public static void finest(java.util.logging.Logger, berkeley.com.sleepycat.je.dbi.EnvironmentImpl, java.lang.String)
    {
        java.util.logging.Logger useLogger;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        java.lang.String msg;
        java.util.logging.Level $r0;

        useLogger := @parameter0: java.util.logging.Logger;

        envImpl := @parameter1: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        msg := @parameter2: java.lang.String;

        $r0 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: void logMsg(java.util.logging.Logger,berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.util.logging.Level,java.lang.String)>(useLogger, envImpl, $r0, msg);

        return;
    }

    public static java.lang.String getStackTrace()
    {
        java.lang.Exception e, $r0;
        java.lang.String $r1;

        $r0 = new java.lang.Exception;

        specialinvoke $r0.<java.lang.Exception: void <init>()>();

        e = $r0;

        $r1 = staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: java.lang.String getStackTrace(java.lang.Throwable)>(e);

        return $r1;
    }

    public static void info(java.util.logging.Logger, berkeley.com.sleepycat.je.dbi.EnvironmentImpl, java.lang.String)
    {
        java.util.logging.Logger useLogger;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        java.lang.String msg;
        java.util.logging.Level $r0;

        useLogger := @parameter0: java.util.logging.Logger;

        envImpl := @parameter1: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        msg := @parameter2: java.lang.String;

        $r0 = <java.util.logging.Level: java.util.logging.Level INFO>;

        staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: void logMsg(java.util.logging.Logger,berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.util.logging.Level,java.lang.String)>(useLogger, envImpl, $r0, msg);

        return;
    }


