    public void <init>(int)
    {
        berkeley.com.sleepycat.je.utilint.Adler32$ChunkingAdler32 this;
        int adler32ChunkSize;

        this := @this: berkeley.com.sleepycat.je.utilint.Adler32$ChunkingAdler32;

        adler32ChunkSize := @parameter0: int;

        specialinvoke this.<java.util.zip.Adler32: void <init>()>();

        this.<berkeley.com.sleepycat.je.utilint.Adler32$ChunkingAdler32: int adler32ChunkSize> = 0;

        this.<berkeley.com.sleepycat.je.utilint.Adler32$ChunkingAdler32: int adler32ChunkSize> = adler32ChunkSize;

        return;
    }

    public void update(byte[], int, int)
    {
        berkeley.com.sleepycat.je.utilint.Adler32$ChunkingAdler32 this;
        byte[] b;
        int off, len, bytesRemaining, nBytesThisChunk, $i0, i#9, $i1, $i2;

        this := @this: berkeley.com.sleepycat.je.utilint.Adler32$ChunkingAdler32;

        b := @parameter0: byte[];

        off := @parameter1: int;

        len := @parameter2: int;

        $i0 = this.<berkeley.com.sleepycat.je.utilint.Adler32$ChunkingAdler32: int adler32ChunkSize>;

        if len >= $i0 goto label1;

        specialinvoke this.<java.util.zip.Adler32: void update(byte[],int,int)>(b, off, len);

        return;

     label1:
        i#9 = 0;

     label2:
        if i#9 >= len goto label3;

        bytesRemaining = len - i#9;

        $i1 = this.<berkeley.com.sleepycat.je.utilint.Adler32$ChunkingAdler32: int adler32ChunkSize>;

        nBytesThisChunk = staticinvoke <java.lang.Math: int min(int,int)>(bytesRemaining, $i1);

        $i2 = off + i#9;

        specialinvoke this.<java.util.zip.Adler32: void update(byte[],int,int)>(b, $i2, nBytesThisChunk);

        i#9 = i#9 + nBytesThisChunk;

        goto label2;

     label3:
        return;
    }


