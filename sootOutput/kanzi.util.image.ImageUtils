    public void <init>(int, int)
    {
        kanzi.util.image.ImageUtils this;
        int width, height;

        this := @this: kanzi.util.image.ImageUtils;

        width := @parameter0: int;

        height := @parameter1: int;

        specialinvoke this.<kanzi.util.image.ImageUtils: void <init>(int,int,int)>(width, height, width);

        return;
    }

    public void <init>(int, int, int)
    {
        kanzi.util.image.ImageUtils this;
        int width, height, stride;
        java.lang.IllegalArgumentException $r0, $r1, $r2;
        int[] $r3;
        byte[] $r4;

        this := @this: kanzi.util.image.ImageUtils;

        width := @parameter0: int;

        height := @parameter1: int;

        stride := @parameter2: int;

        specialinvoke this.<java.lang.Object: void <init>()>();

        if height >= 8 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The height must be at least 8");

        throw $r0;

     label1:
        if width >= 8 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The width must be at least 8");

        throw $r1;

     label2:
        if stride >= 8 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The stride must be at least 8");

        throw $r2;

     label3:
        $r3 = newarray (int)[0];

        this.<kanzi.util.image.ImageUtils: int[] iBuf> = $r3;

        $r4 = newarray (byte)[0];

        this.<kanzi.util.image.ImageUtils: byte[] bBuf> = $r4;

        this.<kanzi.util.image.ImageUtils: int width> = width;

        this.<kanzi.util.image.ImageUtils: int height> = height;

        this.<kanzi.util.image.ImageUtils: int stride> = stride;

        return;
    }

    public kanzi.util.image.ImageUtils$Direction computeDirection(int[], int, int, int)
    {
        kanzi.util.image.ImageUtils this;
        int[] input, $r2, $r3, $r4, $r5;
        int x, y, blockDim, st, start, endj, l11, dXEven, dXOdd, dYEven, dYOdd, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, minSAD#36, l12#41, sad#48, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, j#84, i#88, offs#94, $i21, $i22, $i23, $i24, $i25, $i26, val#110, $i27, $i28, $i29, $i30, sad#122, i#123, offs#127, $i31, $i32, $i33, $i34, $i35, $i36, val#143, $i37, $i38, $i39, $i40;
        kanzi.util.image.ImageUtils$Direction[] l10;
        kanzi.util.image.ImageUtils$Direction dir, $r0, $r1, res#34;

        this := @this: kanzi.util.image.ImageUtils;

        input := @parameter0: int[];

        x := @parameter1: int;

        y := @parameter2: int;

        blockDim := @parameter3: int;

        if x < 3 goto label01;

        $i0 = x + blockDim;

        $i1 = $i0 + 3;

        $i2 = this.<kanzi.util.image.ImageUtils: int width>;

        if $i1 < $i2 goto label02;

     label01:
        $r0 = <kanzi.util.image.ImageUtils$Direction: kanzi.util.image.ImageUtils$Direction VERTICAL>;

        return $r0;

     label02:
        if y < 3 goto label03;

        $i3 = y + blockDim;

        $i4 = $i3 + 3;

        $i5 = this.<kanzi.util.image.ImageUtils: int height>;

        if $i4 < $i5 goto label04;

     label03:
        $r1 = <kanzi.util.image.ImageUtils$Direction: kanzi.util.image.ImageUtils$Direction HORIZONTAL>;

        return $r1;

     label04:
        st = this.<kanzi.util.image.ImageUtils: int stride>;

        $i6 = y * st;

        start = $i6 + x;

        $i7 = st * blockDim;

        endj = start + $i7;

        res#34 = <kanzi.util.image.ImageUtils$Direction: kanzi.util.image.ImageUtils$Direction HORIZONTAL>;

        minSAD#36 = 2147483647;

        l10 = staticinvoke <kanzi.util.image.ImageUtils$Direction: kanzi.util.image.ImageUtils$Direction[] values()>();

        l11 = lengthof l10;

        l12#41 = 0;

     label05:
        if l12#41 >= l11 goto label11;

        dir = l10[l12#41];

        sad#48 = 0;

        $r2 = <kanzi.util.image.ImageUtils: int[] DIR_INC_XY>;

        $i8 = virtualinvoke dir.<kanzi.util.image.ImageUtils$Direction: int ordinal()>();

        $i9 = $i8 << 2;

        dXEven = $r2[$i9];

        $r3 = <kanzi.util.image.ImageUtils: int[] DIR_INC_XY>;

        $i10 = virtualinvoke dir.<kanzi.util.image.ImageUtils$Direction: int ordinal()>();

        $i11 = $i10 << 2;

        $i12 = $i11 + 2;

        dXOdd = $r3[$i12];

        $r4 = <kanzi.util.image.ImageUtils: int[] DIR_INC_XY>;

        $i13 = virtualinvoke dir.<kanzi.util.image.ImageUtils$Direction: int ordinal()>();

        $i14 = $i13 << 2;

        $i15 = $i14 + 1;

        $i16 = $r4[$i15];

        dYEven = $i16 * st;

        $r5 = <kanzi.util.image.ImageUtils: int[] DIR_INC_XY>;

        $i17 = virtualinvoke dir.<kanzi.util.image.ImageUtils$Direction: int ordinal()>();

        $i18 = $i17 << 2;

        $i19 = $i18 + 3;

        $i20 = $r5[$i19];

        dYOdd = $i20 * st;

        j#84 = start;

     label06:
        if j#84 >= endj goto label09;

        i#88 = 0;

     label07:
        if i#88 >= blockDim goto label08;

        offs#94 = j#84 + i#88;

        $i21 = input[offs#94];

        $i22 = $i21 & 255;

        $i23 = offs#94 - dXEven;

        $i24 = $i23 - dYEven;

        $i25 = input[$i24];

        $i26 = $i25 & 255;

        val#110 = $i22 - $i26;

        $i27 = val#110 >> 31;

        $i28 = val#110 + $i27;

        $i29 = val#110 >> 31;

        $i30 = $i28 ^ $i29;

        sad#122 = sad#48 + $i30;

        i#123 = i#88 + 1;

        offs#127 = j#84 + i#123;

        $i31 = input[offs#127];

        $i32 = $i31 & 255;

        $i33 = offs#127 - dXOdd;

        $i34 = $i33 - dYOdd;

        $i35 = input[$i34];

        $i36 = $i35 & 255;

        val#143 = $i32 - $i36;

        $i37 = val#143 >> 31;

        $i38 = val#143 + $i37;

        $i39 = val#143 >> 31;

        $i40 = $i38 ^ $i39;

        sad#48 = sad#122 + $i40;

        i#88 = i#123 + 1;

        goto label07;

     label08:
        j#84 = j#84 + st;

        goto label06;

     label09:
        if sad#48 >= minSAD#36 goto label10;

        minSAD#36 = sad#48;

        res#34 = dir;

        if minSAD#36 != 0 goto label10;

        goto label11;

     label10:
        l12#41 = l12#41 + 1;

        goto label05;

     label11:
        return res#34;
    }


