    public void <init>(java.lang.String)
    {
        weka.core.Range this;
        java.lang.String rangeList;
        java.util.ArrayList $r0;

        this := @this: weka.core.Range;

        rangeList := @parameter0: java.lang.String;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        this.<weka.core.Range: java.util.ArrayList m_RangeStrings> = $r0;

        this.<weka.core.Range: int m_Upper> = -1;

        virtualinvoke this.<weka.core.Range: void setRanges(java.lang.String)>(rangeList);

        return;
    }

    public void setRanges(java.lang.String)
    {
        weka.core.Range this;
        java.util.ArrayList ranges, $r0;
        int commaLoc, $i0;
        java.lang.String rangeList#1, range#10, $r1, $r2;
        boolean $z0, $z1;

        this := @this: weka.core.Range;

        rangeList#1 := @parameter0: java.lang.String;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(10);

        ranges = $r0;

     label1:
        $z0 = virtualinvoke rangeList#1.<java.lang.String: boolean equals(java.lang.Object)>("");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label5;

        range#10 = virtualinvoke rangeList#1.<java.lang.String: java.lang.String trim()>();

        commaLoc = virtualinvoke rangeList#1.<java.lang.String: int indexOf(int)>(44);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(commaLoc);

        if commaLoc == -1 goto label2;

        $r1 = virtualinvoke rangeList#1.<java.lang.String: java.lang.String substring(int,int)>(0, commaLoc);

        range#10 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        $i0 = commaLoc + 1;

        $r2 = virtualinvoke rangeList#1.<java.lang.String: java.lang.String substring(int)>($i0);

        rangeList#1 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        goto label3;

     label2:
        rangeList#1 = "";

     label3:
        $z1 = virtualinvoke range#10.<java.lang.String: boolean equals(java.lang.Object)>("");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label4;

        virtualinvoke ranges.<java.util.ArrayList: boolean add(java.lang.Object)>(range#10);

     label4:
        goto label1;

     label5:
        this.<weka.core.Range: java.util.ArrayList m_RangeStrings> = ranges;

        this.<weka.core.Range: boolean[] m_SelectFlags> = null;

        return;
    }

    public boolean isInRange(int)
    {
        weka.core.Range this;
        int index, $i0;
        java.lang.RuntimeException $r0;
        boolean $z0, $z1, $z2, $z3;
        boolean[] $r1, $r2;

        this := @this: weka.core.Range;

        index := @parameter0: int;

        $i0 = this.<weka.core.Range: int m_Upper>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != -1 goto label1;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("No upper limit has been specified for range");

        throw $r0;

     label1:
        $z0 = this.<weka.core.Range: boolean m_Invert>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label4;

        $r1 = this.<weka.core.Range: boolean[] m_SelectFlags>;

        $z1 = $r1[index];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;

     label4:
        $r2 = this.<weka.core.Range: boolean[] m_SelectFlags>;

        $z3 = $r2[index];

        return $z3;
    }

    public void setUpper(int)
    {
        weka.core.Range this;
        int newUpper;

        this := @this: weka.core.Range;

        newUpper := @parameter0: int;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(newUpper);

        if newUpper < 0 goto label1;

        this.<weka.core.Range: int m_Upper> = newUpper;

        virtualinvoke this.<weka.core.Range: void setFlags()>();

     label1:
        return;
    }

    protected void setFlags()
    {
        weka.core.Range this;
        java.util.Iterator enu;
        java.lang.String currentRange, $r7;
        int start, end, $i0, $i1, i#34, $i2;
        boolean[] $r0, $r8;
        java.util.ArrayList $r1;
        boolean $z0, $z1;
        java.lang.Object $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;

        this := @this: weka.core.Range;

        $i0 = this.<weka.core.Range: int m_Upper>;

        $i1 = $i0 + 1;

        $r0 = newarray (boolean)[$i1];

        this.<weka.core.Range: boolean[] m_SelectFlags> = $r0;

        $r1 = this.<weka.core.Range: java.util.ArrayList m_RangeStrings>;

        enu = virtualinvoke $r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke enu.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label5;

        $r2 = interfaceinvoke enu.<java.util.Iterator: java.lang.Object next()>();

        currentRange = (java.lang.String) $r2;

        $z1 = virtualinvoke this.<weka.core.Range: boolean isValidRange(java.lang.String)>(currentRange);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid range list at ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(currentRange);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label2:
        start = virtualinvoke this.<weka.core.Range: int rangeLower(java.lang.String)>(currentRange);

        end = virtualinvoke this.<weka.core.Range: int rangeUpper(java.lang.String)>(currentRange);

        i#34 = start;

     label3:
        $i2 = this.<weka.core.Range: int m_Upper>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#34);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#34 > $i2 goto label4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#34);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(end);

        if i#34 > end goto label4;

        $r8 = this.<weka.core.Range: boolean[] m_SelectFlags>;

        $r8[i#34] = 1;

        i#34 = i#34 + 1;

        goto label3;

     label4:
        goto label1;

     label5:
        return;
    }

    protected boolean isValidRange(java.lang.String)
    {
        weka.core.Range this;
        java.lang.String range, $r0, $r1, $r2, $r3;
        int hyphenIndex, index, $i0, $i1, $i2, $i3;
        java.lang.Throwable ex, $r4;
        boolean $z0, $z1, $z2, $z3;

        this := @this: weka.core.Range;

        range := @parameter0: java.lang.String;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(range);

        if range != null goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke range.<java.lang.String: int indexOf(int)>(45);

        hyphenIndex = $i0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 < 0 goto label3;

        $r0 = virtualinvoke range.<java.lang.String: java.lang.String substring(int,int)>(0, hyphenIndex);

        $z0 = virtualinvoke this.<weka.core.Range: boolean isValidRange(java.lang.String)>($r0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $i1 = hyphenIndex + 1;

        $r1 = virtualinvoke range.<java.lang.String: java.lang.String substring(int)>($i1);

        $z1 = virtualinvoke this.<weka.core.Range: boolean isValidRange(java.lang.String)>($r1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;

     label3:
        $r2 = virtualinvoke range.<java.lang.String: java.lang.String toLowerCase()>();

        $z2 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("first");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label4;

        return 1;

     label4:
        $r3 = virtualinvoke range.<java.lang.String: java.lang.String toLowerCase()>();

        $z3 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("last");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label5;

        return 1;

     label5:
        index = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(range);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(index);

        if index <= 0 goto label7;

        $i2 = this.<weka.core.Range: int m_Upper>;

        $i3 = $i2 + 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(index);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if index > $i3 goto label7;

     label6:
        return 1;

     label7:
        return 0;

     label8:
        $r4 := @caughtexception;

        ex = $r4;

        return 0;

        catch java.lang.NumberFormatException from label5 to label6 with label8;
    }

    protected int rangeLower(java.lang.String)
    {
        weka.core.Range this;
        java.lang.String range, $r0, $r1;
        int hyphenIndex, $i0, $i1, $i2, $i3, $i4, $i5;

        this := @this: weka.core.Range;

        range := @parameter0: java.lang.String;

        $i0 = virtualinvoke range.<java.lang.String: int indexOf(int)>(45);

        hyphenIndex = $i0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 < 0 goto label1;

        $r0 = virtualinvoke range.<java.lang.String: java.lang.String substring(int,int)>(0, hyphenIndex);

        $i1 = virtualinvoke this.<weka.core.Range: int rangeLower(java.lang.String)>($r0);

        $i2 = hyphenIndex + 1;

        $r1 = virtualinvoke range.<java.lang.String: java.lang.String substring(int)>($i2);

        $i3 = virtualinvoke this.<weka.core.Range: int rangeLower(java.lang.String)>($r1);

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i3);

        return $i4;

     label1:
        $i5 = virtualinvoke this.<weka.core.Range: int rangeSingle(java.lang.String)>(range);

        return $i5;
    }

    protected int rangeUpper(java.lang.String)
    {
        weka.core.Range this;
        java.lang.String range, $r0, $r1;
        int hyphenIndex, $i0, $i1, $i2, $i3, $i4, $i5;

        this := @this: weka.core.Range;

        range := @parameter0: java.lang.String;

        $i0 = virtualinvoke range.<java.lang.String: int indexOf(int)>(45);

        hyphenIndex = $i0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 < 0 goto label1;

        $r0 = virtualinvoke range.<java.lang.String: java.lang.String substring(int,int)>(0, hyphenIndex);

        $i1 = virtualinvoke this.<weka.core.Range: int rangeUpper(java.lang.String)>($r0);

        $i2 = hyphenIndex + 1;

        $r1 = virtualinvoke range.<java.lang.String: java.lang.String substring(int)>($i2);

        $i3 = virtualinvoke this.<weka.core.Range: int rangeUpper(java.lang.String)>($r1);

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i3);

        return $i4;

     label1:
        $i5 = virtualinvoke this.<weka.core.Range: int rangeSingle(java.lang.String)>(range);

        return $i5;
    }

    protected int rangeSingle(java.lang.String)
    {
        weka.core.Range this;
        java.lang.String single, $r0, $r1;
        boolean $z0, $z1;
        int $i0, $i1, index#16, $i2;

        this := @this: weka.core.Range;

        single := @parameter0: java.lang.String;

        $r0 = virtualinvoke single.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("first");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r1 = virtualinvoke single.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("last");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        $i0 = this.<weka.core.Range: int m_Upper>;

        return $i0;

     label2:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(single);

        index#16 = $i1 - 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(index#16);

        if index#16 >= 0 goto label3;

        index#16 = 0;

     label3:
        $i2 = this.<weka.core.Range: int m_Upper>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(index#16);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if index#16 <= $i2 goto label4;

        index#16 = this.<weka.core.Range: int m_Upper>;

     label4:
        return index#16;
    }


