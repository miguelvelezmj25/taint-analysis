    void <init>(kanzi.SliceByteArray, kanzi.SliceByteArray, int, short, short, int, kanzi.OutputBitStream, kanzi.util.hash.XXHash32, java.util.concurrent.atomic.AtomicInteger, kanzi.Listener[], java.util.Map)
    {
        kanzi.io.CompressedOutputStream$EncodingTask this;
        kanzi.SliceByteArray iBuffer, oBuffer;
        int length, blockId;
        short transformType, entropyType;
        kanzi.OutputBitStream obs;
        kanzi.util.hash.XXHash32 hasher;
        java.util.concurrent.atomic.AtomicInteger processedBlockId;
        kanzi.Listener[] listeners;
        java.util.Map ctx;

        this := @this: kanzi.io.CompressedOutputStream$EncodingTask;

        iBuffer := @parameter0: kanzi.SliceByteArray;

        oBuffer := @parameter1: kanzi.SliceByteArray;

        length := @parameter2: int;

        transformType := @parameter3: short;

        entropyType := @parameter4: short;

        blockId := @parameter5: int;

        obs := @parameter6: kanzi.OutputBitStream;

        hasher := @parameter7: kanzi.util.hash.XXHash32;

        processedBlockId := @parameter8: java.util.concurrent.atomic.AtomicInteger;

        listeners := @parameter9: kanzi.Listener[];

        ctx := @parameter10: java.util.Map;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<kanzi.io.CompressedOutputStream$EncodingTask: kanzi.SliceByteArray data> = iBuffer;

        this.<kanzi.io.CompressedOutputStream$EncodingTask: kanzi.SliceByteArray buffer> = oBuffer;

        this.<kanzi.io.CompressedOutputStream$EncodingTask: int length> = length;

        this.<kanzi.io.CompressedOutputStream$EncodingTask: short transformType> = transformType;

        this.<kanzi.io.CompressedOutputStream$EncodingTask: short entropyType> = entropyType;

        this.<kanzi.io.CompressedOutputStream$EncodingTask: int blockId> = blockId;

        this.<kanzi.io.CompressedOutputStream$EncodingTask: kanzi.OutputBitStream obs> = obs;

        this.<kanzi.io.CompressedOutputStream$EncodingTask: kanzi.util.hash.XXHash32 hasher> = hasher;

        this.<kanzi.io.CompressedOutputStream$EncodingTask: java.util.concurrent.atomic.AtomicInteger processedBlockId> = processedBlockId;

        this.<kanzi.io.CompressedOutputStream$EncodingTask: kanzi.Listener[] listeners> = listeners;

        this.<kanzi.io.CompressedOutputStream$EncodingTask: java.util.Map ctx> = ctx;

        return;
    }


