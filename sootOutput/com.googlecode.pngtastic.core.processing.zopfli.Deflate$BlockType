    static void <clinit>()
    {
        com.googlecode.pngtastic.core.processing.zopfli.Deflate$BlockType $r0, $r1, $r3, $r4;
        com.googlecode.pngtastic.core.processing.zopfli.Deflate$BlockType[] $r2;

        $r0 = new com.googlecode.pngtastic.core.processing.zopfli.Deflate$BlockType;

        specialinvoke $r0.<com.googlecode.pngtastic.core.processing.zopfli.Deflate$BlockType: void <init>(java.lang.String,int)>("DYNAMIC", 0);

        <com.googlecode.pngtastic.core.processing.zopfli.Deflate$BlockType: com.googlecode.pngtastic.core.processing.zopfli.Deflate$BlockType DYNAMIC> = $r0;

        $r1 = new com.googlecode.pngtastic.core.processing.zopfli.Deflate$BlockType;

        specialinvoke $r1.<com.googlecode.pngtastic.core.processing.zopfli.Deflate$BlockType: void <init>(java.lang.String,int)>("FIXED", 1);

        <com.googlecode.pngtastic.core.processing.zopfli.Deflate$BlockType: com.googlecode.pngtastic.core.processing.zopfli.Deflate$BlockType FIXED> = $r1;

        $r2 = newarray (com.googlecode.pngtastic.core.processing.zopfli.Deflate$BlockType)[2];

        $r3 = <com.googlecode.pngtastic.core.processing.zopfli.Deflate$BlockType: com.googlecode.pngtastic.core.processing.zopfli.Deflate$BlockType DYNAMIC>;

        $r2[0] = $r3;

        $r4 = <com.googlecode.pngtastic.core.processing.zopfli.Deflate$BlockType: com.googlecode.pngtastic.core.processing.zopfli.Deflate$BlockType FIXED>;

        $r2[1] = $r4;

        <com.googlecode.pngtastic.core.processing.zopfli.Deflate$BlockType: com.googlecode.pngtastic.core.processing.zopfli.Deflate$BlockType[] $VALUES> = $r2;

        return;
    }

    private void <init>(java.lang.String, int)
    {
        com.googlecode.pngtastic.core.processing.zopfli.Deflate$BlockType this;
        java.lang.String l1;
        int l2;

        this := @this: com.googlecode.pngtastic.core.processing.zopfli.Deflate$BlockType;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: int;

        specialinvoke this.<java.lang.Enum: void <init>(java.lang.String,int)>(l1, l2);

        return;
    }


