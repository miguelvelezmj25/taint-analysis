    void <init>(int, int, int, int, int, int)
    {
        org.tukaani.xz.lz.BT4 this;
        int dictSize, beforeSizeMin, readAheadMax, niceLen, matchLenMax, depthLimit, $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.tukaani.xz.lz.Hash234 $r0;
        int[] $r1;
        org.tukaani.xz.lz.Matches $r2;

        this := @this: org.tukaani.xz.lz.BT4;

        dictSize := @parameter0: int;

        beforeSizeMin := @parameter1: int;

        readAheadMax := @parameter2: int;

        niceLen := @parameter3: int;

        matchLenMax := @parameter4: int;

        depthLimit := @parameter5: int;

        specialinvoke this.<org.tukaani.xz.lz.LZEncoder: void <init>(int,int,int,int,int)>(dictSize, beforeSizeMin, readAheadMax, niceLen, matchLenMax);

        this.<org.tukaani.xz.lz.BT4: int cyclicPos> = -1;

        $i0 = dictSize + 1;

        this.<org.tukaani.xz.lz.BT4: int cyclicSize> = $i0;

        $i1 = this.<org.tukaani.xz.lz.BT4: int cyclicSize>;

        this.<org.tukaani.xz.lz.BT4: int lzPos> = $i1;

        $r0 = new org.tukaani.xz.lz.Hash234;

        specialinvoke $r0.<org.tukaani.xz.lz.Hash234: void <init>(int)>(dictSize);

        this.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Hash234 hash> = $r0;

        $i2 = this.<org.tukaani.xz.lz.BT4: int cyclicSize>;

        $i3 = $i2 * 2;

        $r1 = newarray (int)[$i3];

        this.<org.tukaani.xz.lz.BT4: int[] tree> = $r1;

        $r2 = new org.tukaani.xz.lz.Matches;

        $i4 = niceLen - 1;

        specialinvoke $r2.<org.tukaani.xz.lz.Matches: void <init>(int)>($i4);

        this.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Matches matches> = $r2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(depthLimit);

        if depthLimit <= 0 goto label1;

        $i5 = depthLimit;

        goto label2;

     label1:
        $i6 = niceLen / 2;

        $i5 = 16 + $i6;

     label2:
        this.<org.tukaani.xz.lz.BT4: int depthLimit> = $i5;

        return;
    }

    public void skip(int)
    {
        org.tukaani.xz.lz.BT4 this;
        int avail, currentMatch, len#1, $i0, niceLenLimit#5, $i1, $i2;
        org.tukaani.xz.lz.Hash234 $r0, $r2, $r3;
        byte[] $r1;

        this := @this: org.tukaani.xz.lz.BT4;

        len#1 := @parameter0: int;

     label1:
        $i0 = len#1;

        len#1 = len#1 + -1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label4;

        niceLenLimit#5 = this.<org.tukaani.xz.lz.BT4: int niceLen>;

        avail = specialinvoke this.<org.tukaani.xz.lz.BT4: int movePos()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(avail);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(niceLenLimit#5);

        if avail >= niceLenLimit#5 goto label3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(avail);

        if avail != 0 goto label2;

        goto label1;

     label2:
        niceLenLimit#5 = avail;

     label3:
        $r0 = this.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Hash234 hash>;

        $r1 = this.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i1 = this.<org.tukaani.xz.lz.BT4: int readPos>;

        virtualinvoke $r0.<org.tukaani.xz.lz.Hash234: void calcHashes(byte[],int)>($r1, $i1);

        $r2 = this.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Hash234 hash>;

        currentMatch = virtualinvoke $r2.<org.tukaani.xz.lz.Hash234: int getHash4Pos()>();

        $r3 = this.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Hash234 hash>;

        $i2 = this.<org.tukaani.xz.lz.BT4: int lzPos>;

        virtualinvoke $r3.<org.tukaani.xz.lz.Hash234: void updateTables(int)>($i2);

        specialinvoke this.<org.tukaani.xz.lz.BT4: void skip(int,int)>(niceLenLimit#5, currentMatch);

        goto label1;

     label4:
        return;
    }

    private int movePos()
    {
        org.tukaani.xz.lz.BT4 this;
        int avail, normalizationOffset, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        org.tukaani.xz.lz.Hash234 $r1;
        int[] $r2;

        this := @this: org.tukaani.xz.lz.BT4;

        $i0 = this.<org.tukaani.xz.lz.BT4: int niceLen>;

        avail = virtualinvoke this.<org.tukaani.xz.lz.BT4: int movePos(int,int)>($i0, 4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(avail);

        if avail == 0 goto label2;

        $i1 = this.<org.tukaani.xz.lz.BT4: int lzPos>;

        $i2 = $i1 + 1;

        this.<org.tukaani.xz.lz.BT4: int lzPos> = $i2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 != 2147483647 goto label1;

        $i3 = this.<org.tukaani.xz.lz.BT4: int cyclicSize>;

        normalizationOffset = 2147483647 - $i3;

        $r1 = this.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Hash234 hash>;

        virtualinvoke $r1.<org.tukaani.xz.lz.Hash234: void normalize(int)>(normalizationOffset);

        $r2 = this.<org.tukaani.xz.lz.BT4: int[] tree>;

        staticinvoke <org.tukaani.xz.lz.BT4: void normalize(int[],int)>($r2, normalizationOffset);

        $i4 = this.<org.tukaani.xz.lz.BT4: int lzPos>;

        $i5 = $i4 - normalizationOffset;

        this.<org.tukaani.xz.lz.BT4: int lzPos> = $i5;

     label1:
        $i6 = this.<org.tukaani.xz.lz.BT4: int cyclicPos>;

        $i7 = $i6 + 1;

        this.<org.tukaani.xz.lz.BT4: int cyclicPos> = $i7;

        $i8 = this.<org.tukaani.xz.lz.BT4: int cyclicSize>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if $i7 != $i8 goto label2;

        this.<org.tukaani.xz.lz.BT4: int cyclicPos> = 0;

     label2:
        return avail;
    }

    private void skip(int, int)
    {
        org.tukaani.xz.lz.BT4 this;
        int niceLenLimit, delta, pair, currentMatch#1, depth#4, $i0, $i1, ptr0#11, $i2, ptr1#16, len0#18, len1#20, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, len#52, $i11, $i12, $i13, $i15, $i16, $i18, $i19, $i20, $i21, $i22, $i23, $i25, $i26, $i28, $i29, $i30, $i33, $i34;
        int[] $r0, $r1, $r4, $r5, $r6, $r7, $r12, $r13, $r14, $r15;
        byte[] $r2, $r3, $r8, $r9, $r10, $r11;
        byte $b14, $b17, $b24, $b27, $b31, $b35;
        short $s32, $s36;

        this := @this: org.tukaani.xz.lz.BT4;

        niceLenLimit := @parameter0: int;

        currentMatch#1 := @parameter1: int;

        depth#4 = this.<org.tukaani.xz.lz.BT4: int depthLimit>;

        $i0 = this.<org.tukaani.xz.lz.BT4: int cyclicPos>;

        $i1 = $i0 << 1;

        ptr0#11 = $i1 + 1;

        $i2 = this.<org.tukaani.xz.lz.BT4: int cyclicPos>;

        ptr1#16 = $i2 << 1;

        len0#18 = 0;

        len1#20 = 0;

     label01:
        $i3 = this.<org.tukaani.xz.lz.BT4: int lzPos>;

        delta = $i3 - currentMatch#1;

        $i4 = depth#4;

        depth#4 = depth#4 + -1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 == 0 goto label02;

        $i5 = this.<org.tukaani.xz.lz.BT4: int cyclicSize>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(delta);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if delta < $i5 goto label03;

     label02:
        $r0 = this.<org.tukaani.xz.lz.BT4: int[] tree>;

        $r0[ptr0#11] = 0;

        $r1 = this.<org.tukaani.xz.lz.BT4: int[] tree>;

        $r1[ptr1#16] = 0;

        return;

     label03:
        $i6 = this.<org.tukaani.xz.lz.BT4: int cyclicPos>;

        $i7 = $i6 - delta;

        $i8 = this.<org.tukaani.xz.lz.BT4: int cyclicPos>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(delta);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if delta <= $i8 goto label04;

        $i9 = this.<org.tukaani.xz.lz.BT4: int cyclicSize>;

        goto label05;

     label04:
        $i9 = 0;

     label05:
        $i10 = $i7 + $i9;

        pair = $i10 << 1;

        len#52 = staticinvoke <java.lang.Math: int min(int,int)>(len0#18, len1#20);

        $r2 = this.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i11 = this.<org.tukaani.xz.lz.BT4: int readPos>;

        $i12 = $i11 + len#52;

        $i13 = $i12 - delta;

        $b14 = $r2[$i13];

        $r3 = this.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i15 = this.<org.tukaani.xz.lz.BT4: int readPos>;

        $i16 = $i15 + len#52;

        $b17 = $r3[$i16];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b14);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b17);

        if $b14 != $b17 goto label08;

     label06:
        len#52 = len#52 + 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len#52);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(niceLenLimit);

        if len#52 != niceLenLimit goto label07;

        $r4 = this.<org.tukaani.xz.lz.BT4: int[] tree>;

        $r5 = this.<org.tukaani.xz.lz.BT4: int[] tree>;

        $i18 = $r5[pair];

        $r4[ptr1#16] = $i18;

        $r6 = this.<org.tukaani.xz.lz.BT4: int[] tree>;

        $r7 = this.<org.tukaani.xz.lz.BT4: int[] tree>;

        $i19 = pair + 1;

        $i20 = $r7[$i19];

        $r6[ptr0#11] = $i20;

        return;

     label07:
        $r8 = this.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i21 = this.<org.tukaani.xz.lz.BT4: int readPos>;

        $i22 = $i21 + len#52;

        $i23 = $i22 - delta;

        $b24 = $r8[$i23];

        $r9 = this.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i25 = this.<org.tukaani.xz.lz.BT4: int readPos>;

        $i26 = $i25 + len#52;

        $b27 = $r9[$i26];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b24);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b27);

        if $b24 == $b27 goto label06;

     label08:
        $r10 = this.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i28 = this.<org.tukaani.xz.lz.BT4: int readPos>;

        $i29 = $i28 + len#52;

        $i30 = $i29 - delta;

        $b31 = $r10[$i30];

        $s32 = $b31 & 255;

        $r11 = this.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i33 = this.<org.tukaani.xz.lz.BT4: int readPos>;

        $i34 = $i33 + len#52;

        $b35 = $r11[$i34];

        $s36 = $b35 & 255;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s32);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s36);

        if $s32 >= $s36 goto label09;

        $r12 = this.<org.tukaani.xz.lz.BT4: int[] tree>;

        $r12[ptr1#16] = currentMatch#1;

        ptr1#16 = pair + 1;

        $r13 = this.<org.tukaani.xz.lz.BT4: int[] tree>;

        currentMatch#1 = $r13[ptr1#16];

        len1#20 = len#52;

        goto label10;

     label09:
        $r14 = this.<org.tukaani.xz.lz.BT4: int[] tree>;

        $r14[ptr0#11] = currentMatch#1;

        ptr0#11 = pair;

        $r15 = this.<org.tukaani.xz.lz.BT4: int[] tree>;

        currentMatch#1 = $r15[ptr0#11];

        len0#18 = len#52;

     label10:
        goto label01;
    }

    public org.tukaani.xz.lz.Matches getMatches()
    {
        org.tukaani.xz.lz.BT4 this;
        int avail, delta3, delta, pair, matchLenLimit#6, niceLenLimit#9, $i0, $i1, $i2, delta2#33, $i3, $i4, currentMatch#43, $i5, lenBest#49, $i6, $i7, $i8, $i10, $i12, $i13, $i14, $i15, $i17, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i27, $i28, $i30, $i31, depth#157, $i32, $i33, ptr0#164, $i34, ptr1#169, len0#171, len1#173, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, len#207, $i43, $i44, $i45, $i47, $i48, $i50, $i51, $i52, $i54, $i55, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i70, $i71;
        org.tukaani.xz.lz.Matches $r0, $r1, $r10, $r12, $r14, $r17, $r19, $r20, $r23, $r25, $r26, $r29, $r34, $r36, $r37, $r39, $r40, $r45;
        org.tukaani.xz.lz.Hash234 $r2, $r4, $r5, $r6, $r7;
        byte[] $r3, $r8, $r9, $r15, $r16, $r21, $r22, $r30, $r31, $r32, $r33, $r46, $r47;
        byte $b9, $b11, $b16, $b18, $b26, $b29, $b46, $b49, $b53, $b56, $b68, $b72;
        int[] $r11, $r13, $r18, $r24, $r27, $r28, $r35, $r38, $r41, $r42, $r43, $r44, $r48, $r49, $r50, $r51;
        short $s69, $s73;

        this := @this: org.tukaani.xz.lz.BT4;

        $r0 = this.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Matches matches>;

        $r0.<org.tukaani.xz.lz.Matches: int count> = 0;

        matchLenLimit#6 = this.<org.tukaani.xz.lz.BT4: int matchLenMax>;

        niceLenLimit#9 = this.<org.tukaani.xz.lz.BT4: int niceLen>;

        avail = specialinvoke this.<org.tukaani.xz.lz.BT4: int movePos()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(avail);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(matchLenLimit#6);

        if avail >= matchLenLimit#6 goto label02;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(avail);

        if avail != 0 goto label01;

        $r1 = this.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Matches matches>;

        return $r1;

     label01:
        matchLenLimit#6 = avail;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(niceLenLimit#9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(avail);

        if niceLenLimit#9 <= avail goto label02;

        niceLenLimit#9 = avail;

     label02:
        $r2 = this.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Hash234 hash>;

        $r3 = this.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i0 = this.<org.tukaani.xz.lz.BT4: int readPos>;

        virtualinvoke $r2.<org.tukaani.xz.lz.Hash234: void calcHashes(byte[],int)>($r3, $i0);

        $i1 = this.<org.tukaani.xz.lz.BT4: int lzPos>;

        $r4 = this.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Hash234 hash>;

        $i2 = virtualinvoke $r4.<org.tukaani.xz.lz.Hash234: int getHash2Pos()>();

        delta2#33 = $i1 - $i2;

        $i3 = this.<org.tukaani.xz.lz.BT4: int lzPos>;

        $r5 = this.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Hash234 hash>;

        $i4 = virtualinvoke $r5.<org.tukaani.xz.lz.Hash234: int getHash3Pos()>();

        delta3 = $i3 - $i4;

        $r6 = this.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Hash234 hash>;

        currentMatch#43 = virtualinvoke $r6.<org.tukaani.xz.lz.Hash234: int getHash4Pos()>();

        $r7 = this.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Hash234 hash>;

        $i5 = this.<org.tukaani.xz.lz.BT4: int lzPos>;

        virtualinvoke $r7.<org.tukaani.xz.lz.Hash234: void updateTables(int)>($i5);

        lenBest#49 = 0;

        $i6 = this.<org.tukaani.xz.lz.BT4: int cyclicSize>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(delta2#33);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if delta2#33 >= $i6 goto label03;

        $r8 = this.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i7 = this.<org.tukaani.xz.lz.BT4: int readPos>;

        $i8 = $i7 - delta2#33;

        $b9 = $r8[$i8];

        $r9 = this.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i10 = this.<org.tukaani.xz.lz.BT4: int readPos>;

        $b11 = $r9[$i10];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b11);

        if $b9 != $b11 goto label03;

        lenBest#49 = 2;

        $r10 = this.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Matches matches>;

        $r11 = $r10.<org.tukaani.xz.lz.Matches: int[] len>;

        $r11[0] = 2;

        $r12 = this.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Matches matches>;

        $r13 = $r12.<org.tukaani.xz.lz.Matches: int[] dist>;

        $i12 = delta2#33 - 1;

        $r13[0] = $i12;

        $r14 = this.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Matches matches>;

        $r14.<org.tukaani.xz.lz.Matches: int count> = 1;

     label03:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(delta2#33);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(delta3);

        if delta2#33 == delta3 goto label04;

        $i13 = this.<org.tukaani.xz.lz.BT4: int cyclicSize>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(delta3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i13);

        if delta3 >= $i13 goto label04;

        $r15 = this.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i14 = this.<org.tukaani.xz.lz.BT4: int readPos>;

        $i15 = $i14 - delta3;

        $b16 = $r15[$i15];

        $r16 = this.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i17 = this.<org.tukaani.xz.lz.BT4: int readPos>;

        $b18 = $r16[$i17];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b16);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b18);

        if $b16 != $b18 goto label04;

        lenBest#49 = 3;

        $r17 = this.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Matches matches>;

        $r18 = $r17.<org.tukaani.xz.lz.Matches: int[] dist>;

        $r19 = this.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Matches matches>;

        $i19 = $r19.<org.tukaani.xz.lz.Matches: int count>;

        $i20 = $i19 + 1;

        $r19.<org.tukaani.xz.lz.Matches: int count> = $i20;

        $i21 = delta3 - 1;

        $r18[$i19] = $i21;

        delta2#33 = delta3;

     label04:
        $r20 = this.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Matches matches>;

        $i22 = $r20.<org.tukaani.xz.lz.Matches: int count>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i22);

        if $i22 <= 0 goto label07;

     label05:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lenBest#49);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(matchLenLimit#6);

        if lenBest#49 >= matchLenLimit#6 goto label06;

        $r21 = this.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i23 = this.<org.tukaani.xz.lz.BT4: int readPos>;

        $i24 = $i23 + lenBest#49;

        $i25 = $i24 - delta2#33;

        $b26 = $r21[$i25];

        $r22 = this.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i27 = this.<org.tukaani.xz.lz.BT4: int readPos>;

        $i28 = $i27 + lenBest#49;

        $b29 = $r22[$i28];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b26);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b29);

        if $b26 != $b29 goto label06;

        lenBest#49 = lenBest#49 + 1;

        goto label05;

     label06:
        $r23 = this.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Matches matches>;

        $r24 = $r23.<org.tukaani.xz.lz.Matches: int[] len>;

        $r25 = this.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Matches matches>;

        $i30 = $r25.<org.tukaani.xz.lz.Matches: int count>;

        $i31 = $i30 - 1;

        $r24[$i31] = lenBest#49;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lenBest#49);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(niceLenLimit#9);

        if lenBest#49 < niceLenLimit#9 goto label07;

        specialinvoke this.<org.tukaani.xz.lz.BT4: void skip(int,int)>(niceLenLimit#9, currentMatch#43);

        $r26 = this.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Matches matches>;

        return $r26;

     label07:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lenBest#49);

        if lenBest#49 >= 3 goto label08;

        lenBest#49 = 3;

     label08:
        depth#157 = this.<org.tukaani.xz.lz.BT4: int depthLimit>;

        $i32 = this.<org.tukaani.xz.lz.BT4: int cyclicPos>;

        $i33 = $i32 << 1;

        ptr0#164 = $i33 + 1;

        $i34 = this.<org.tukaani.xz.lz.BT4: int cyclicPos>;

        ptr1#169 = $i34 << 1;

        len0#171 = 0;

        len1#173 = 0;

     label09:
        $i35 = this.<org.tukaani.xz.lz.BT4: int lzPos>;

        delta = $i35 - currentMatch#43;

        $i36 = depth#157;

        depth#157 = depth#157 + -1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i36);

        if $i36 == 0 goto label10;

        $i37 = this.<org.tukaani.xz.lz.BT4: int cyclicSize>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(delta);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i37);

        if delta < $i37 goto label11;

     label10:
        $r27 = this.<org.tukaani.xz.lz.BT4: int[] tree>;

        $r27[ptr0#164] = 0;

        $r28 = this.<org.tukaani.xz.lz.BT4: int[] tree>;

        $r28[ptr1#169] = 0;

        $r29 = this.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Matches matches>;

        return $r29;

     label11:
        $i38 = this.<org.tukaani.xz.lz.BT4: int cyclicPos>;

        $i39 = $i38 - delta;

        $i40 = this.<org.tukaani.xz.lz.BT4: int cyclicPos>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(delta);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i40);

        if delta <= $i40 goto label12;

        $i41 = this.<org.tukaani.xz.lz.BT4: int cyclicSize>;

        goto label13;

     label12:
        $i41 = 0;

     label13:
        $i42 = $i39 + $i41;

        pair = $i42 << 1;

        len#207 = staticinvoke <java.lang.Math: int min(int,int)>(len0#171, len1#173);

        $r30 = this.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i43 = this.<org.tukaani.xz.lz.BT4: int readPos>;

        $i44 = $i43 + len#207;

        $i45 = $i44 - delta;

        $b46 = $r30[$i45];

        $r31 = this.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i47 = this.<org.tukaani.xz.lz.BT4: int readPos>;

        $i48 = $i47 + len#207;

        $b49 = $r31[$i48];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b46);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b49);

        if $b46 != $b49 goto label16;

     label14:
        len#207 = len#207 + 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len#207);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(matchLenLimit#6);

        if len#207 >= matchLenLimit#6 goto label15;

        $r32 = this.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i50 = this.<org.tukaani.xz.lz.BT4: int readPos>;

        $i51 = $i50 + len#207;

        $i52 = $i51 - delta;

        $b53 = $r32[$i52];

        $r33 = this.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i54 = this.<org.tukaani.xz.lz.BT4: int readPos>;

        $i55 = $i54 + len#207;

        $b56 = $r33[$i55];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b53);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b56);

        if $b53 == $b56 goto label14;

        goto label15;

     label15:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len#207);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lenBest#49);

        if len#207 <= lenBest#49 goto label16;

        lenBest#49 = len#207;

        $r34 = this.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Matches matches>;

        $r35 = $r34.<org.tukaani.xz.lz.Matches: int[] len>;

        $r36 = this.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Matches matches>;

        $i57 = $r36.<org.tukaani.xz.lz.Matches: int count>;

        $r35[$i57] = len#207;

        $r37 = this.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Matches matches>;

        $r38 = $r37.<org.tukaani.xz.lz.Matches: int[] dist>;

        $r39 = this.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Matches matches>;

        $i58 = $r39.<org.tukaani.xz.lz.Matches: int count>;

        $i59 = delta - 1;

        $r38[$i58] = $i59;

        $r40 = this.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Matches matches>;

        $i60 = $r40.<org.tukaani.xz.lz.Matches: int count>;

        $i61 = $i60 + 1;

        $r40.<org.tukaani.xz.lz.Matches: int count> = $i61;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len#207);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(niceLenLimit#9);

        if len#207 < niceLenLimit#9 goto label16;

        $r41 = this.<org.tukaani.xz.lz.BT4: int[] tree>;

        $r42 = this.<org.tukaani.xz.lz.BT4: int[] tree>;

        $i62 = $r42[pair];

        $r41[ptr1#169] = $i62;

        $r43 = this.<org.tukaani.xz.lz.BT4: int[] tree>;

        $r44 = this.<org.tukaani.xz.lz.BT4: int[] tree>;

        $i63 = pair + 1;

        $i64 = $r44[$i63];

        $r43[ptr0#164] = $i64;

        $r45 = this.<org.tukaani.xz.lz.BT4: org.tukaani.xz.lz.Matches matches>;

        return $r45;

     label16:
        $r46 = this.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i65 = this.<org.tukaani.xz.lz.BT4: int readPos>;

        $i66 = $i65 + len#207;

        $i67 = $i66 - delta;

        $b68 = $r46[$i67];

        $s69 = $b68 & 255;

        $r47 = this.<org.tukaani.xz.lz.BT4: byte[] buf>;

        $i70 = this.<org.tukaani.xz.lz.BT4: int readPos>;

        $i71 = $i70 + len#207;

        $b72 = $r47[$i71];

        $s73 = $b72 & 255;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s69);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s73);

        if $s69 >= $s73 goto label17;

        $r48 = this.<org.tukaani.xz.lz.BT4: int[] tree>;

        $r48[ptr1#169] = currentMatch#43;

        ptr1#169 = pair + 1;

        $r49 = this.<org.tukaani.xz.lz.BT4: int[] tree>;

        currentMatch#43 = $r49[ptr1#169];

        len1#173 = len#207;

        goto label18;

     label17:
        $r50 = this.<org.tukaani.xz.lz.BT4: int[] tree>;

        $r50[ptr0#164] = currentMatch#43;

        ptr0#164 = pair;

        $r51 = this.<org.tukaani.xz.lz.BT4: int[] tree>;

        currentMatch#43 = $r51[ptr0#164];

        len0#171 = len#207;

     label18:
        goto label09;
    }


