    static void <clinit>()
    {
        weka.classifiers.trees.j48.EntropySplitCrit $r0;

        $r0 = new weka.classifiers.trees.j48.EntropySplitCrit;

        specialinvoke $r0.<weka.classifiers.trees.j48.EntropySplitCrit: void <init>()>();

        <weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.trees.j48.EntropySplitCrit m_splitCrit> = $r0;

        return;
    }

    public void buildRule(weka.core.Instances) throws java.lang.Exception
    {
        weka.classifiers.rules.part.ClassifierDecList this;
        weka.core.Instances data, $r0;

        this := @this: weka.classifiers.rules.part.ClassifierDecList;

        data := @parameter0: weka.core.Instances;

        virtualinvoke this.<weka.classifiers.rules.part.ClassifierDecList: void buildDecList(weka.core.Instances,boolean)>(data, 0);

        $r0 = new weka.core.Instances;

        specialinvoke $r0.<weka.core.Instances: void <init>(weka.core.Instances,int)>(data, 0);

        virtualinvoke this.<weka.classifiers.rules.part.ClassifierDecList: void cleanup(weka.core.Instances)>($r0);

        return;
    }

    public final void cleanup(weka.core.Instances)
    {
        weka.classifiers.rules.part.ClassifierDecList this, m_son;
        weka.core.Instances justHeaderInfo;
        weka.classifiers.rules.part.ClassifierDecList[] l2;
        int l3, l4#12;
        boolean $z0;

        this := @this: weka.classifiers.rules.part.ClassifierDecList;

        justHeaderInfo := @parameter0: weka.core.Instances;

        this.<weka.classifiers.rules.part.ClassifierDecList: weka.core.Instances m_train> = justHeaderInfo;

        this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.trees.j48.Distribution m_test> = null;

        $z0 = this.<weka.classifiers.rules.part.ClassifierDecList: boolean m_isLeaf>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label3;

        l2 = this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons>;

        l3 = lengthof l2;

        l4#12 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l4#12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3);

        if l4#12 >= l3 goto label3;

        m_son = l2[l4#12];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(m_son);

        if m_son == null goto label2;

        virtualinvoke m_son.<weka.classifiers.rules.part.ClassifierDecList: void cleanup(weka.core.Instances)>(justHeaderInfo);

     label2:
        l4#12 = l4#12 + 1;

        goto label1;

     label3:
        return;
    }

    public final int chooseIndex()
    {
        weka.classifiers.rules.part.ClassifierDecList this, $r1;
        int minIndex#2, i#6, $i0, $i1, j#28, $i2;
        double min#4, $d0, $d1, estimated#24, estimated#26, $d2, $d3, $d4, $d5, estimated#52, $d6, $d7, $d8;
        weka.classifiers.rules.part.ClassifierDecList[] $r0;
        weka.classifiers.trees.j48.ClassifierSplitModel $r2, $r4, $r7, $r10, $r12;
        weka.classifiers.trees.j48.Distribution $r3, $r5, $r8, $r11, $r13;
        boolean $z0, $z1, $z2;
        weka.classifiers.trees.j48.EntropySplitCrit $r6, $r9;

        this := @this: weka.classifiers.rules.part.ClassifierDecList;

        minIndex#2 = -1;

        min#4 = 1.7976931348623157E308;

        i#6 = 0;

     label1:
        $r0 = this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons>;

        $i0 = lengthof $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#6 >= $i0 goto label8;

        $r1 = virtualinvoke this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.rules.part.ClassifierDecList son(int)>(i#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 != null goto label7;

        $r2 = virtualinvoke this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.trees.j48.ClassifierSplitModel localModel()>();

        $r3 = virtualinvoke $r2.<weka.classifiers.trees.j48.ClassifierSplitModel: weka.classifiers.trees.j48.Distribution distribution()>();

        $d0 = virtualinvoke $r3.<weka.classifiers.trees.j48.Distribution: double perBag(int)>(i#6);

        $i1 = this.<weka.classifiers.rules.part.ClassifierDecList: int m_minNumObj>;

        $d1 = (double) $i1;

        $z0 = staticinvoke <weka.core.Utils: boolean sm(double,double)>($d0, $d1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        estimated#24 = 1.7976931348623157E308;

        goto label5;

     label2:
        estimated#26 = 0.0;

        j#28 = 0;

     label3:
        $r4 = virtualinvoke this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.trees.j48.ClassifierSplitModel localModel()>();

        $r5 = virtualinvoke $r4.<weka.classifiers.trees.j48.ClassifierSplitModel: weka.classifiers.trees.j48.Distribution distribution()>();

        $i2 = virtualinvoke $r5.<weka.classifiers.trees.j48.Distribution: int numClasses()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#28);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if j#28 >= $i2 goto label4;

        $r6 = <weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.trees.j48.EntropySplitCrit m_splitCrit>;

        $r7 = virtualinvoke this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.trees.j48.ClassifierSplitModel localModel()>();

        $r8 = virtualinvoke $r7.<weka.classifiers.trees.j48.ClassifierSplitModel: weka.classifiers.trees.j48.Distribution distribution()>();

        $d2 = virtualinvoke $r8.<weka.classifiers.trees.j48.Distribution: double perClassPerBag(int,int)>(i#6, j#28);

        $d3 = virtualinvoke $r6.<weka.classifiers.trees.j48.EntropySplitCrit: double lnFunc(double)>($d2);

        estimated#26 = estimated#26 - $d3;

        j#28 = j#28 + 1;

        goto label3;

     label4:
        $r9 = <weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.trees.j48.EntropySplitCrit m_splitCrit>;

        $r10 = virtualinvoke this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.trees.j48.ClassifierSplitModel localModel()>();

        $r11 = virtualinvoke $r10.<weka.classifiers.trees.j48.ClassifierSplitModel: weka.classifiers.trees.j48.Distribution distribution()>();

        $d4 = virtualinvoke $r11.<weka.classifiers.trees.j48.Distribution: double perBag(int)>(i#6);

        $d5 = virtualinvoke $r9.<weka.classifiers.trees.j48.EntropySplitCrit: double lnFunc(double)>($d4);

        estimated#52 = estimated#26 + $d5;

        $r12 = virtualinvoke this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.trees.j48.ClassifierSplitModel localModel()>();

        $r13 = virtualinvoke $r12.<weka.classifiers.trees.j48.ClassifierSplitModel: weka.classifiers.trees.j48.Distribution distribution()>();

        $d6 = virtualinvoke $r13.<weka.classifiers.trees.j48.Distribution: double perBag(int)>(i#6);

        $d7 = <weka.core.ContingencyTables: double log2>;

        $d8 = $d6 * $d7;

        estimated#24 = estimated#52 / $d8;

     label5:
        $z1 = staticinvoke <weka.core.Utils: boolean smOrEq(double,double)>(estimated#24, 0.0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label6;

        return i#6;

     label6:
        $z2 = staticinvoke <weka.core.Utils: boolean sm(double,double)>(estimated#24, min#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label7;

        min#4 = estimated#24;

        minIndex#2 = i#6;

     label7:
        i#6 = i#6 + 1;

        goto label1;

     label8:
        return minIndex#2;
    }

    public final int chooseLastIndex()
    {
        weka.classifiers.rules.part.ClassifierDecList this, $r1, $r4;
        double estimated, min#4, $d0, $d1;
        int minIndex#2, i#8, $i0, $i1;
        boolean $z0, $z1, $z2;
        weka.classifiers.rules.part.ClassifierDecList[] $r0;
        weka.classifiers.trees.j48.ClassifierSplitModel $r2;
        weka.classifiers.trees.j48.Distribution $r3;

        this := @this: weka.classifiers.rules.part.ClassifierDecList;

        minIndex#2 = 0;

        min#4 = 1.7976931348623157E308;

        $z0 = this.<weka.classifiers.rules.part.ClassifierDecList: boolean m_isLeaf>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label3;

        i#8 = 0;

     label1:
        $r0 = this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons>;

        $i0 = lengthof $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#8 >= $i0 goto label3;

        $r1 = virtualinvoke this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.rules.part.ClassifierDecList son(int)>(i#8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 == null goto label2;

        $r2 = virtualinvoke this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.trees.j48.ClassifierSplitModel localModel()>();

        $r3 = virtualinvoke $r2.<weka.classifiers.trees.j48.ClassifierSplitModel: weka.classifiers.trees.j48.Distribution distribution()>();

        $d0 = virtualinvoke $r3.<weka.classifiers.trees.j48.Distribution: double perBag(int)>(i#8);

        $i1 = this.<weka.classifiers.rules.part.ClassifierDecList: int m_minNumObj>;

        $d1 = (double) $i1;

        $z1 = staticinvoke <weka.core.Utils: boolean grOrEq(double,double)>($d0, $d1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        $r4 = virtualinvoke this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.rules.part.ClassifierDecList son(int)>(i#8);

        estimated = virtualinvoke $r4.<weka.classifiers.rules.part.ClassifierDecList: double getSizeOfBranch()>();

        $z2 = staticinvoke <weka.core.Utils: boolean sm(double,double)>(estimated, min#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label2;

        min#4 = estimated;

        minIndex#2 = i#8;

     label2:
        i#8 = i#8 + 1;

        goto label1;

     label3:
        return minIndex#2;
    }

    protected weka.classifiers.rules.part.ClassifierDecList son(int)
    {
        weka.classifiers.rules.part.ClassifierDecList this, $r1;
        int index;
        weka.classifiers.rules.part.ClassifierDecList[] $r0;

        this := @this: weka.classifiers.rules.part.ClassifierDecList;

        index := @parameter0: int;

        $r0 = this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons>;

        $r1 = $r0[index];

        return $r1;
    }

    protected weka.classifiers.trees.j48.ClassifierSplitModel localModel()
    {
        weka.classifiers.rules.part.ClassifierDecList this;
        weka.classifiers.trees.j48.ClassifierSplitModel $r0;

        this := @this: weka.classifiers.rules.part.ClassifierDecList;

        $r0 = this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.trees.j48.ClassifierSplitModel m_localModel>;

        return $r0;
    }

    public void <init>(weka.classifiers.trees.j48.ModelSelection, int)
    {
        weka.classifiers.rules.part.ClassifierDecList this;
        weka.classifiers.trees.j48.ModelSelection toSelectLocModel;
        int minNum;

        this := @this: weka.classifiers.rules.part.ClassifierDecList;

        toSelectLocModel := @parameter0: weka.classifiers.trees.j48.ModelSelection;

        minNum := @parameter1: int;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.trees.j48.ModelSelection m_toSelectModel> = toSelectLocModel;

        this.<weka.classifiers.rules.part.ClassifierDecList: int m_minNumObj> = minNum;

        return;
    }

    protected double getSizeOfBranch()
    {
        weka.classifiers.rules.part.ClassifierDecList this, $r2;
        boolean $z0;
        weka.classifiers.trees.j48.ClassifierSplitModel $r0;
        weka.classifiers.trees.j48.Distribution $r1;
        double $d0, $d1, $d2;
        int $i0;

        this := @this: weka.classifiers.rules.part.ClassifierDecList;

        $z0 = this.<weka.classifiers.rules.part.ClassifierDecList: boolean m_isLeaf>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r0 = virtualinvoke this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.trees.j48.ClassifierSplitModel localModel()>();

        $r1 = virtualinvoke $r0.<weka.classifiers.trees.j48.ClassifierSplitModel: weka.classifiers.trees.j48.Distribution distribution()>();

        $d0 = virtualinvoke $r1.<weka.classifiers.trees.j48.Distribution: double total()>();

        $d1 = neg $d0;

        return $d1;

     label1:
        $i0 = this.<weka.classifiers.rules.part.ClassifierDecList: int indeX>;

        $r2 = virtualinvoke this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.rules.part.ClassifierDecList son(int)>($i0);

        $d2 = virtualinvoke $r2.<weka.classifiers.rules.part.ClassifierDecList: double getSizeOfBranch()>();

        return $d2;
    }

    public double weight(weka.core.Instance) throws java.lang.Exception
    {
        weka.classifiers.rules.part.ClassifierDecList this, $r4, $r6;
        weka.core.Instance instance;
        int subset, $i0, $i1, $i2, $i3;
        boolean $z0;
        weka.classifiers.trees.j48.ClassifierSplitModel $r0, $r1;
        double[] $r2;
        double $d0, $d1, $d2, $d3;
        weka.classifiers.rules.part.ClassifierDecList[] $r3, $r5;

        this := @this: weka.classifiers.rules.part.ClassifierDecList;

        instance := @parameter0: weka.core.Instance;

        $z0 = this.<weka.classifiers.rules.part.ClassifierDecList: boolean m_isLeaf>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        return 1.0;

     label1:
        $r0 = this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.trees.j48.ClassifierSplitModel m_localModel>;

        subset = virtualinvoke $r0.<weka.classifiers.trees.j48.ClassifierSplitModel: int whichSubset(weka.core.Instance)>(instance);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(subset);

        if subset != -1 goto label2;

        $r1 = this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.trees.j48.ClassifierSplitModel m_localModel>;

        $r2 = virtualinvoke $r1.<weka.classifiers.trees.j48.ClassifierSplitModel: double[] weights(weka.core.Instance)>(instance);

        $i0 = this.<weka.classifiers.rules.part.ClassifierDecList: int indeX>;

        $d0 = $r2[$i0];

        $r3 = this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons>;

        $i1 = this.<weka.classifiers.rules.part.ClassifierDecList: int indeX>;

        $r4 = $r3[$i1];

        $d1 = virtualinvoke $r4.<weka.classifiers.rules.part.ClassifierDecList: double weight(weka.core.Instance)>(instance);

        $d2 = $d0 * $d1;

        return $d2;

     label2:
        $i2 = this.<weka.classifiers.rules.part.ClassifierDecList: int indeX>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(subset);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if subset != $i2 goto label3;

        $r5 = this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons>;

        $i3 = this.<weka.classifiers.rules.part.ClassifierDecList: int indeX>;

        $r6 = $r5[$i3];

        $d3 = virtualinvoke $r6.<weka.classifiers.rules.part.ClassifierDecList: double weight(weka.core.Instance)>(instance);

        return $d3;

     label3:
        return 0.0;
    }

    public void buildDecList(weka.core.Instances, boolean) throws java.lang.Exception
    {
        weka.classifiers.rules.part.ClassifierDecList this, $r10, $r13, $r16, $r19;
        boolean leaf, $z0, $z1, $z2;
        double sumOfWeights;
        weka.classifiers.trees.j48.NoSplit noSplit, $r0;
        weka.core.Instances[] localInstances;
        weka.core.Instances data#1, $r12, $r15;
        weka.classifiers.trees.j48.Distribution $r1;
        weka.classifiers.trees.j48.ModelSelection $r2;
        weka.classifiers.trees.j48.ClassifierSplitModel $r3, $r4, $r5, $r6;
        int $i0, $i1, i#45, ind#48, j#52, $i2, $i3, $i4;
        weka.classifiers.rules.part.ClassifierDecList[] $r7, $r8, $r9, $r11, $r14, $r17, $r18;

        this := @this: weka.classifiers.rules.part.ClassifierDecList;

        data#1 := @parameter0: weka.core.Instances;

        leaf := @parameter1: boolean;

        this.<weka.classifiers.rules.part.ClassifierDecList: weka.core.Instances m_train> = null;

        this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.trees.j48.Distribution m_test> = null;

        this.<weka.classifiers.rules.part.ClassifierDecList: boolean m_isLeaf> = 0;

        this.<weka.classifiers.rules.part.ClassifierDecList: boolean m_isEmpty> = 0;

        this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons> = null;

        this.<weka.classifiers.rules.part.ClassifierDecList: int indeX> = 0;

        sumOfWeights = virtualinvoke data#1.<weka.core.Instances: double sumOfWeights()>();

        $r0 = new weka.classifiers.trees.j48.NoSplit;

        $r1 = new weka.classifiers.trees.j48.Distribution;

        specialinvoke $r1.<weka.classifiers.trees.j48.Distribution: void <init>(weka.core.Instances)>(data#1);

        specialinvoke $r0.<weka.classifiers.trees.j48.NoSplit: void <init>(weka.classifiers.trees.j48.Distribution)>($r1);

        noSplit = $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(leaf);

        if leaf == 0 goto label01;

        this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.trees.j48.ClassifierSplitModel m_localModel> = noSplit;

        goto label02;

     label01:
        $r2 = this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.trees.j48.ModelSelection m_toSelectModel>;

        $r3 = virtualinvoke $r2.<weka.classifiers.trees.j48.ModelSelection: weka.classifiers.trees.j48.ClassifierSplitModel selectModel(weka.core.Instances)>(data#1);

        this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.trees.j48.ClassifierSplitModel m_localModel> = $r3;

     label02:
        $r4 = this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.trees.j48.ClassifierSplitModel m_localModel>;

        $i0 = virtualinvoke $r4.<weka.classifiers.trees.j48.ClassifierSplitModel: int numSubsets()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 1 goto label11;

        $r5 = this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.trees.j48.ClassifierSplitModel m_localModel>;

        localInstances = virtualinvoke $r5.<weka.classifiers.trees.j48.ClassifierSplitModel: weka.core.Instances[] split(weka.core.Instances)>(data#1);

        $r6 = this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.trees.j48.ClassifierSplitModel m_localModel>;

        $i1 = virtualinvoke $r6.<weka.classifiers.trees.j48.ClassifierSplitModel: int numSubsets()>();

        $r7 = newarray (weka.classifiers.rules.part.ClassifierDecList)[$i1];

        this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons> = $r7;

        i#45 = 0;

     label03:
        i#45 = i#45 + 1;

        ind#48 = virtualinvoke this.<weka.classifiers.rules.part.ClassifierDecList: int chooseIndex()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(ind#48);

        if ind#48 != -1 goto label09;

        j#52 = 0;

     label04:
        $r8 = this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons>;

        $i2 = lengthof $r8;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#52);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if j#52 >= $i2 goto label06;

        $r9 = this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons>;

        $r10 = $r9[j#52];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r10);

        if $r10 != null goto label05;

        $r11 = this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons>;

        $r12 = localInstances[j#52];

        $r13 = virtualinvoke this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.rules.part.ClassifierDecList getNewDecList(weka.core.Instances,boolean)>($r12, 1);

        $r11[j#52] = $r13;

     label05:
        j#52 = j#52 + 1;

        goto label04;

     label06:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#45);

        if i#45 >= 2 goto label08;

        this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.trees.j48.ClassifierSplitModel m_localModel> = noSplit;

        this.<weka.classifiers.rules.part.ClassifierDecList: boolean m_isLeaf> = 1;

        this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons> = null;

        $z0 = staticinvoke <weka.core.Utils: boolean eq(double,double)>(sumOfWeights, 0.0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label07;

        this.<weka.classifiers.rules.part.ClassifierDecList: boolean m_isEmpty> = 1;

     label07:
        return;

     label08:
        goto label10;

     label09:
        $r14 = this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons>;

        $r15 = localInstances[ind#48];

        $r16 = virtualinvoke this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.rules.part.ClassifierDecList getNewDecList(weka.core.Instances,boolean)>($r15, 0);

        $r14[ind#48] = $r16;

        $r17 = this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons>;

        $i3 = lengthof $r17;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#45);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if i#45 >= $i3 goto label10;

        $r18 = this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons>;

        $r19 = $r18[ind#48];

        $z1 = $r19.<weka.classifiers.rules.part.ClassifierDecList: boolean m_isLeaf>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label03;

     label10:
        $i4 = virtualinvoke this.<weka.classifiers.rules.part.ClassifierDecList: int chooseLastIndex()>();

        this.<weka.classifiers.rules.part.ClassifierDecList: int indeX> = $i4;

        goto label12;

     label11:
        this.<weka.classifiers.rules.part.ClassifierDecList: boolean m_isLeaf> = 1;

        $z2 = staticinvoke <weka.core.Utils: boolean eq(double,double)>(sumOfWeights, 0.0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label12;

        this.<weka.classifiers.rules.part.ClassifierDecList: boolean m_isEmpty> = 1;

     label12:
        return;
    }

    protected weka.classifiers.rules.part.ClassifierDecList getNewDecList(weka.core.Instances, boolean) throws java.lang.Exception
    {
        weka.classifiers.rules.part.ClassifierDecList this, newDecList, $r0;
        weka.core.Instances train;
        boolean leaf;
        weka.classifiers.trees.j48.ModelSelection $r1;
        int $i0;

        this := @this: weka.classifiers.rules.part.ClassifierDecList;

        train := @parameter0: weka.core.Instances;

        leaf := @parameter1: boolean;

        $r0 = new weka.classifiers.rules.part.ClassifierDecList;

        $r1 = this.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.trees.j48.ModelSelection m_toSelectModel>;

        $i0 = this.<weka.classifiers.rules.part.ClassifierDecList: int m_minNumObj>;

        specialinvoke $r0.<weka.classifiers.rules.part.ClassifierDecList: void <init>(weka.classifiers.trees.j48.ModelSelection,int)>($r1, $i0);

        newDecList = $r0;

        virtualinvoke newDecList.<weka.classifiers.rules.part.ClassifierDecList: void buildDecList(weka.core.Instances,boolean)>(train, leaf);

        return newDecList;
    }


