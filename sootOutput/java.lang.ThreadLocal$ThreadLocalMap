    void <init>(java.lang.ThreadLocal$ThreadLocalMap, java.lang.ThreadLocal$1)
    {
        java.lang.ThreadLocal$ThreadLocalMap l0, l1;
        java.lang.ThreadLocal$1 l2;

        l0 := @this: java.lang.ThreadLocal$ThreadLocalMap;

        l1 := @parameter0: java.lang.ThreadLocal$ThreadLocalMap;

        l2 := @parameter1: java.lang.ThreadLocal$1;

        specialinvoke l0.<java.lang.ThreadLocal$ThreadLocalMap: void <init>(java.lang.ThreadLocal$ThreadLocalMap)>(l1);

        return;
    }

    private void <init>(java.lang.ThreadLocal$ThreadLocalMap)
    {
        java.lang.ThreadLocal$ThreadLocalMap l0, l1;
        java.lang.ThreadLocal$ThreadLocalMap$Entry[] l2, $r0, $r4, $r6;
        int l3, l4#14, $i0, $i1, l9#38, $i2, $i3;
        java.lang.ThreadLocal$ThreadLocalMap$Entry l5, l8, $r3, $r5;
        java.lang.ThreadLocal l6;
        java.lang.Object l7, $r1, $r2;

        l0 := @this: java.lang.ThreadLocal$ThreadLocalMap;

        l1 := @parameter0: java.lang.ThreadLocal$ThreadLocalMap;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        l0.<java.lang.ThreadLocal$ThreadLocalMap: int size> = 0;

        l2 = l1.<java.lang.ThreadLocal$ThreadLocalMap: java.lang.ThreadLocal$ThreadLocalMap$Entry[] table>;

        l3 = lengthof l2;

        specialinvoke l0.<java.lang.ThreadLocal$ThreadLocalMap: void setThreshold(int)>(l3);

        $r0 = newarray (java.lang.ThreadLocal$ThreadLocalMap$Entry)[l3];

        l0.<java.lang.ThreadLocal$ThreadLocalMap: java.lang.ThreadLocal$ThreadLocalMap$Entry[] table> = $r0;

        l4#14 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l4#14);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3);

        if l4#14 >= l3 goto label5;

        l5 = l2[l4#14];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l5);

        if l5 == null goto label4;

        $r1 = virtualinvoke l5.<java.lang.ThreadLocal$ThreadLocalMap$Entry: java.lang.Object get()>();

        l6 = (java.lang.ThreadLocal) $r1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l6);

        if l6 == null goto label4;

        $r2 = l5.<java.lang.ThreadLocal$ThreadLocalMap$Entry: java.lang.Object value>;

        l7 = virtualinvoke l6.<java.lang.ThreadLocal: java.lang.Object childValue(java.lang.Object)>($r2);

        $r3 = new java.lang.ThreadLocal$ThreadLocalMap$Entry;

        specialinvoke $r3.<java.lang.ThreadLocal$ThreadLocalMap$Entry: void <init>(java.lang.ThreadLocal,java.lang.Object)>(l6, l7);

        l8 = $r3;

        $i0 = staticinvoke <java.lang.ThreadLocal: int access$400(java.lang.ThreadLocal)>(l6);

        $i1 = l3 - 1;

        l9#38 = $i0 & $i1;

     label2:
        $r4 = l0.<java.lang.ThreadLocal$ThreadLocalMap: java.lang.ThreadLocal$ThreadLocalMap$Entry[] table>;

        $r5 = $r4[l9#38];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r5);

        if $r5 == null goto label3;

        l9#38 = staticinvoke <java.lang.ThreadLocal$ThreadLocalMap: int nextIndex(int,int)>(l9#38, l3);

        goto label2;

     label3:
        $r6 = l0.<java.lang.ThreadLocal$ThreadLocalMap: java.lang.ThreadLocal$ThreadLocalMap$Entry[] table>;

        $r6[l9#38] = l8;

        $i2 = l0.<java.lang.ThreadLocal$ThreadLocalMap: int size>;

        $i3 = $i2 + 1;

        l0.<java.lang.ThreadLocal$ThreadLocalMap: int size> = $i3;

     label4:
        l4#14 = l4#14 + 1;

        goto label1;

     label5:
        return;
    }

    private static int nextIndex(int, int)
    {
        int l0, l1, $i0, $i1;

        l0 := @parameter0: int;

        l1 := @parameter1: int;

        $i0 = l0 + 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l1);

        if $i0 >= l1 goto label1;

        $i1 = l0 + 1;

        goto label2;

     label1:
        $i1 = 0;

     label2:
        return $i1;
    }

    private void setThreshold(int)
    {
        java.lang.ThreadLocal$ThreadLocalMap l0;
        int l1, $i0, $i1;

        l0 := @this: java.lang.ThreadLocal$ThreadLocalMap;

        l1 := @parameter0: int;

        $i0 = l1 * 2;

        $i1 = $i0 / 3;

        l0.<java.lang.ThreadLocal$ThreadLocalMap: int threshold> = $i1;

        return;
    }


