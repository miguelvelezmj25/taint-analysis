    static void <clinit>()
    {
        weka.core.pmml.BuiltInArithmetic$Operator$1 $r0;
        weka.core.pmml.BuiltInArithmetic$Operator$2 $r1;
        weka.core.pmml.BuiltInArithmetic$Operator$3 $r2;
        weka.core.pmml.BuiltInArithmetic$Operator$4 $r3;
        weka.core.pmml.BuiltInArithmetic$Operator[] $r4;
        weka.core.pmml.BuiltInArithmetic$Operator $r5, $r6, $r7, $r8;

        $r0 = new weka.core.pmml.BuiltInArithmetic$Operator$1;

        specialinvoke $r0.<weka.core.pmml.BuiltInArithmetic$Operator$1: void <init>(java.lang.String,int,java.lang.String)>("ADDITION", 0, " + ");

        <weka.core.pmml.BuiltInArithmetic$Operator: weka.core.pmml.BuiltInArithmetic$Operator ADDITION> = $r0;

        $r1 = new weka.core.pmml.BuiltInArithmetic$Operator$2;

        specialinvoke $r1.<weka.core.pmml.BuiltInArithmetic$Operator$2: void <init>(java.lang.String,int,java.lang.String)>("SUBTRACTION", 1, " - ");

        <weka.core.pmml.BuiltInArithmetic$Operator: weka.core.pmml.BuiltInArithmetic$Operator SUBTRACTION> = $r1;

        $r2 = new weka.core.pmml.BuiltInArithmetic$Operator$3;

        specialinvoke $r2.<weka.core.pmml.BuiltInArithmetic$Operator$3: void <init>(java.lang.String,int,java.lang.String)>("MULTIPLICATION", 2, " * ");

        <weka.core.pmml.BuiltInArithmetic$Operator: weka.core.pmml.BuiltInArithmetic$Operator MULTIPLICATION> = $r2;

        $r3 = new weka.core.pmml.BuiltInArithmetic$Operator$4;

        specialinvoke $r3.<weka.core.pmml.BuiltInArithmetic$Operator$4: void <init>(java.lang.String,int,java.lang.String)>("DIVISION", 3, " / ");

        <weka.core.pmml.BuiltInArithmetic$Operator: weka.core.pmml.BuiltInArithmetic$Operator DIVISION> = $r3;

        $r4 = newarray (weka.core.pmml.BuiltInArithmetic$Operator)[4];

        $r5 = <weka.core.pmml.BuiltInArithmetic$Operator: weka.core.pmml.BuiltInArithmetic$Operator ADDITION>;

        $r4[0] = $r5;

        $r6 = <weka.core.pmml.BuiltInArithmetic$Operator: weka.core.pmml.BuiltInArithmetic$Operator SUBTRACTION>;

        $r4[1] = $r6;

        $r7 = <weka.core.pmml.BuiltInArithmetic$Operator: weka.core.pmml.BuiltInArithmetic$Operator MULTIPLICATION>;

        $r4[2] = $r7;

        $r8 = <weka.core.pmml.BuiltInArithmetic$Operator: weka.core.pmml.BuiltInArithmetic$Operator DIVISION>;

        $r4[3] = $r8;

        <weka.core.pmml.BuiltInArithmetic$Operator: weka.core.pmml.BuiltInArithmetic$Operator[] $VALUES> = $r4;

        return;
    }

    void <init>(java.lang.String, int, java.lang.String, weka.core.pmml.BuiltInArithmetic$1)
    {
        weka.core.pmml.BuiltInArithmetic$Operator this;
        java.lang.String x0, x2;
        int x1;
        weka.core.pmml.BuiltInArithmetic$1 x3;

        this := @this: weka.core.pmml.BuiltInArithmetic$Operator;

        x0 := @parameter0: java.lang.String;

        x1 := @parameter1: int;

        x2 := @parameter2: java.lang.String;

        x3 := @parameter3: weka.core.pmml.BuiltInArithmetic$1;

        specialinvoke this.<weka.core.pmml.BuiltInArithmetic$Operator: void <init>(java.lang.String,int,java.lang.String)>(x0, x1, x2);

        return;
    }

    private void <init>(java.lang.String, int, java.lang.String)
    {
        weka.core.pmml.BuiltInArithmetic$Operator this;
        java.lang.String l1, opName;
        int l2;

        this := @this: weka.core.pmml.BuiltInArithmetic$Operator;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: int;

        opName := @parameter2: java.lang.String;

        specialinvoke this.<java.lang.Enum: void <init>(java.lang.String,int)>(l1, l2);

        this.<weka.core.pmml.BuiltInArithmetic$Operator: java.lang.String m_stringVal> = opName;

        return;
    }

    public java.lang.String toString()
    {
        weka.core.pmml.BuiltInArithmetic$Operator this;
        java.lang.String $r0;

        this := @this: weka.core.pmml.BuiltInArithmetic$Operator;

        $r0 = this.<weka.core.pmml.BuiltInArithmetic$Operator: java.lang.String m_stringVal>;

        return $r0;
    }


