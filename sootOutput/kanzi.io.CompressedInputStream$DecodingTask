    void <init>(kanzi.SliceByteArray, kanzi.SliceByteArray, int, short, short, int, kanzi.InputBitStream, kanzi.util.hash.XXHash32, java.util.concurrent.atomic.AtomicInteger, kanzi.Listener[], java.util.Map)
    {
        kanzi.io.CompressedInputStream$DecodingTask this;
        kanzi.SliceByteArray iBuffer, oBuffer;
        int blockSize, blockId;
        short transformType, entropyType;
        kanzi.InputBitStream ibs;
        kanzi.util.hash.XXHash32 hasher;
        java.util.concurrent.atomic.AtomicInteger processedBlockId;
        kanzi.Listener[] listeners;
        java.util.Map ctx;

        this := @this: kanzi.io.CompressedInputStream$DecodingTask;

        iBuffer := @parameter0: kanzi.SliceByteArray;

        oBuffer := @parameter1: kanzi.SliceByteArray;

        blockSize := @parameter2: int;

        transformType := @parameter3: short;

        entropyType := @parameter4: short;

        blockId := @parameter5: int;

        ibs := @parameter6: kanzi.InputBitStream;

        hasher := @parameter7: kanzi.util.hash.XXHash32;

        processedBlockId := @parameter8: java.util.concurrent.atomic.AtomicInteger;

        listeners := @parameter9: kanzi.Listener[];

        ctx := @parameter10: java.util.Map;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<kanzi.io.CompressedInputStream$DecodingTask: kanzi.SliceByteArray data> = iBuffer;

        this.<kanzi.io.CompressedInputStream$DecodingTask: kanzi.SliceByteArray buffer> = oBuffer;

        this.<kanzi.io.CompressedInputStream$DecodingTask: int blockSize> = blockSize;

        this.<kanzi.io.CompressedInputStream$DecodingTask: short transformType> = transformType;

        this.<kanzi.io.CompressedInputStream$DecodingTask: short entropyType> = entropyType;

        this.<kanzi.io.CompressedInputStream$DecodingTask: int blockId> = blockId;

        this.<kanzi.io.CompressedInputStream$DecodingTask: kanzi.InputBitStream ibs> = ibs;

        this.<kanzi.io.CompressedInputStream$DecodingTask: kanzi.util.hash.XXHash32 hasher> = hasher;

        this.<kanzi.io.CompressedInputStream$DecodingTask: java.util.concurrent.atomic.AtomicInteger processedBlockId> = processedBlockId;

        this.<kanzi.io.CompressedInputStream$DecodingTask: kanzi.Listener[] listeners> = listeners;

        this.<kanzi.io.CompressedInputStream$DecodingTask: java.util.Map ctx> = ctx;

        return;
    }

    public volatile java.lang.Object call() throws java.lang.Exception
    {
        kanzi.io.CompressedInputStream$DecodingTask this;
        kanzi.io.CompressedInputStream$Status $r0;

        this := @this: kanzi.io.CompressedInputStream$DecodingTask;

        $r0 = virtualinvoke this.<kanzi.io.CompressedInputStream$DecodingTask: kanzi.io.CompressedInputStream$Status call()>();

        return $r0;
    }

    public kanzi.io.CompressedInputStream$Status call() throws java.lang.Exception
    {
        kanzi.io.CompressedInputStream$DecodingTask this;
        kanzi.SliceByteArray $r0, $r1;
        short $s0, $s1;
        int $i2;
        kanzi.io.CompressedInputStream$Status $r2;

        this := @this: kanzi.io.CompressedInputStream$DecodingTask;

        $r0 = this.<kanzi.io.CompressedInputStream$DecodingTask: kanzi.SliceByteArray data>;

        $r1 = this.<kanzi.io.CompressedInputStream$DecodingTask: kanzi.SliceByteArray buffer>;

        $s0 = this.<kanzi.io.CompressedInputStream$DecodingTask: short transformType>;

        $s1 = this.<kanzi.io.CompressedInputStream$DecodingTask: short entropyType>;

        $i2 = this.<kanzi.io.CompressedInputStream$DecodingTask: int blockId>;

        $r2 = specialinvoke this.<kanzi.io.CompressedInputStream$DecodingTask: kanzi.io.CompressedInputStream$Status decodeBlock(kanzi.SliceByteArray,kanzi.SliceByteArray,short,short,int)>($r0, $r1, $s0, $s1, $i2);

        return $r2;
    }

    private kanzi.io.CompressedInputStream$Status decodeBlock(kanzi.SliceByteArray, kanzi.SliceByteArray, short, short, int)
    {
        kanzi.io.CompressedInputStream$DecodingTask this;
        kanzi.SliceByteArray data, buffer;
        short typeOfTransform, typeOfEntropy, $s3, $s46;
        int currentBlockId, dataSize, length, bufferSize, savedIdx, decoded, checksum2, taskId#4, $i0, checksum1#16, $i2, preTransformLength#44, $i8, $i9, $i10, $i12, $i13, $i14, $i17, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i33, $i38, $i40, $i42, $i45, $i47, $i51, $i52, $i53, $i55, $i56, $i57, $i58, $i60, $i61, $i62, $i64, $i65, $i66, $i68, $i69, $i70;
        long read, mask, $l1, $l5, $l6, $l7, $l16, $l35, $l36, $l37, $l39, $l44;
        byte mode, $b4, $b48, $b49, $b50;
        kanzi.Event evt, $r21, $r37, evt#231, $r45, evt#251;
        kanzi.io.CompressedInputStream$Status l15, l17, l10, $r2, $r7, l13#77, $r11, l13#111, $r33, $r59, l16#311, $r65, $r76, l16#381, $r80;
        kanzi.function.ByteTransformSequence transform;
        java.lang.Exception e, $r79;
        java.lang.Throwable l18, $r84;
        java.util.concurrent.atomic.AtomicInteger $r0, $r1, $r6, $r8, $r9, $r10, $r16, $r17, $r32, $r34, $r35, $r43, $r60, $r61, $r74, $r75, $r77, $r78, $r82, $r83, $r85, $r86;
        kanzi.EntropyDecoder ed#28;
        kanzi.InputBitStream $r3, $r4, $r5, $r19, $r29, $r40;
        java.lang.StringBuilder $r12, $r13, $r14, $r66, $r67, $r69, $r70, $r72;
        java.lang.String $r15, $r68, $r71, $r73, $r81;
        kanzi.util.hash.XXHash32 $r18, $r24, $r41, $r48, $r62, $r63;
        kanzi.Listener[] $r20, $r25, $r36, $r42, $r44, $r49;
        kanzi.Event$Type $r23, $r39, $r47;
        boolean $z0, $z1, $z2, $z4;
        byte[] $r26, $r27, $r31, $r50, $r51, $r52, $r53, $r64;
        kanzi.entropy.EntropyCodecFactory $r28;
        java.util.Map $r30, $r54, $r58;
        java.lang.Integer $r55;
        kanzi.io.ByteFunctionFactory $r57;

        this := @this: kanzi.io.CompressedInputStream$DecodingTask;

        data := @parameter0: kanzi.SliceByteArray;

        buffer := @parameter1: kanzi.SliceByteArray;

        typeOfTransform := @parameter2: short;

        typeOfEntropy := @parameter3: short;

        currentBlockId := @parameter4: int;

        $r0 = this.<kanzi.io.CompressedInputStream$DecodingTask: java.util.concurrent.atomic.AtomicInteger processedBlockId>;

        taskId#4 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int get()>();

     label01:
        if taskId#4 == -1 goto label02;

        $i0 = currentBlockId - 1;

        if taskId#4 == $i0 goto label02;

        staticinvoke <java.util.concurrent.locks.LockSupport: void parkNanos(long)>(10L);

        $r1 = this.<kanzi.io.CompressedInputStream$DecodingTask: java.util.concurrent.atomic.AtomicInteger processedBlockId>;

        taskId#4 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        goto label01;

     label02:
        checksum1#16 = 0;

        if taskId#4 != -1 goto label03;

        $r2 = new kanzi.io.CompressedInputStream$Status;

        specialinvoke $r2.<kanzi.io.CompressedInputStream$Status: void <init>(kanzi.SliceByteArray,int,int,int,int,java.lang.String)>(data, currentBlockId, checksum1#16, 0, 0, null);

        return $r2;

     label03:
        ed#28 = null;

     label04:
        $r3 = this.<kanzi.io.CompressedInputStream$DecodingTask: kanzi.InputBitStream ibs>;

        read = interfaceinvoke $r3.<kanzi.InputBitStream: long read()>();

        $r4 = this.<kanzi.io.CompressedInputStream$DecodingTask: kanzi.InputBitStream ibs>;

        $l1 = interfaceinvoke $r4.<kanzi.InputBitStream: long readBits(int)>(8);

        $i2 = (int) $l1;

        mode = (byte) $i2;

        $s3 = mode & 128;

        if $s3 == 0 goto label05;

        preTransformLength#44 = mode & 15;

        goto label06;

     label05:
        $b4 = mode & 3;

        dataSize = 1 + $b4;

        length = dataSize << 3;

        $l5 = 1L << length;

        mask = $l5 - 1L;

        $r5 = this.<kanzi.io.CompressedInputStream$DecodingTask: kanzi.InputBitStream ibs>;

        $l6 = interfaceinvoke $r5.<kanzi.InputBitStream: long readBits(int)>(length);

        $l7 = $l6 & mask;

        preTransformLength#44 = (int) $l7;

     label06:
        if preTransformLength#44 != 0 goto label10;

        $r6 = this.<kanzi.io.CompressedInputStream$DecodingTask: java.util.concurrent.atomic.AtomicInteger processedBlockId>;

        virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: void set(int)>(-1);

        $r7 = new kanzi.io.CompressedInputStream$Status;

        specialinvoke $r7.<kanzi.io.CompressedInputStream$Status: void <init>(kanzi.SliceByteArray,int,int,int,int,java.lang.String)>(data, currentBlockId, 0, checksum1#16, 0, null);

        l13#77 = $r7;

     label07:
        $r8 = this.<kanzi.io.CompressedInputStream$DecodingTask: java.util.concurrent.atomic.AtomicInteger processedBlockId>;

        $i8 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i9 = this.<kanzi.io.CompressedInputStream$DecodingTask: int blockId>;

        $i10 = $i9 - 1;

        if $i8 != $i10 goto label08;

        $r9 = this.<kanzi.io.CompressedInputStream$DecodingTask: java.util.concurrent.atomic.AtomicInteger processedBlockId>;

        virtualinvoke $r9.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

     label08:
        if ed#28 == null goto label09;

        interfaceinvoke ed#28.<kanzi.EntropyDecoder: void dispose()>();

     label09:
        return l13#77;

     label10:
        if preTransformLength#44 < 0 goto label11;

        if preTransformLength#44 <= 1073741824 goto label15;

     label11:
        $r10 = this.<kanzi.io.CompressedInputStream$DecodingTask: java.util.concurrent.atomic.AtomicInteger processedBlockId>;

        virtualinvoke $r10.<java.util.concurrent.atomic.AtomicInteger: void set(int)>(-1);

        $r11 = new kanzi.io.CompressedInputStream$Status;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid compressed block length: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(preTransformLength#44);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<kanzi.io.CompressedInputStream$Status: void <init>(kanzi.SliceByteArray,int,int,int,int,java.lang.String)>(data, currentBlockId, 0, checksum1#16, -11, $r15);

        l13#111 = $r11;

     label12:
        $r16 = this.<kanzi.io.CompressedInputStream$DecodingTask: java.util.concurrent.atomic.AtomicInteger processedBlockId>;

        $i12 = virtualinvoke $r16.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i13 = this.<kanzi.io.CompressedInputStream$DecodingTask: int blockId>;

        $i14 = $i13 - 1;

        if $i12 != $i14 goto label13;

        $r17 = this.<kanzi.io.CompressedInputStream$DecodingTask: java.util.concurrent.atomic.AtomicInteger processedBlockId>;

        virtualinvoke $r17.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

     label13:
        if ed#28 == null goto label14;

        interfaceinvoke ed#28.<kanzi.EntropyDecoder: void dispose()>();

     label14:
        return l13#111;

     label15:
        $r18 = this.<kanzi.io.CompressedInputStream$DecodingTask: kanzi.util.hash.XXHash32 hasher>;

        if $r18 == null goto label16;

        $r19 = this.<kanzi.io.CompressedInputStream$DecodingTask: kanzi.InputBitStream ibs>;

        $l16 = interfaceinvoke $r19.<kanzi.InputBitStream: long readBits(int)>(32);

        checksum1#16 = (int) $l16;

     label16:
        $r20 = this.<kanzi.io.CompressedInputStream$DecodingTask: kanzi.Listener[] listeners>;

        $i17 = lengthof $r20;

        if $i17 <= 0 goto label19;

        $r21 = new kanzi.Event;

        $r23 = <kanzi.Event$Type: kanzi.Event$Type BEFORE_ENTROPY>;

        $i20 = checksum1#16;

        $r24 = this.<kanzi.io.CompressedInputStream$DecodingTask: kanzi.util.hash.XXHash32 hasher>;

        if $r24 == null goto label17;

        $z0 = 1;

        goto label18;

     label17:
        $z0 = 0;

     label18:
        specialinvoke $r21.<kanzi.Event: void <init>(kanzi.Event$Type,int,long,int,boolean)>($r23, currentBlockId, -1L, $i20, $z0);

        evt = $r21;

        $r25 = this.<kanzi.io.CompressedInputStream$DecodingTask: kanzi.Listener[] listeners>;

        staticinvoke <kanzi.io.CompressedInputStream: void notifyListeners(kanzi.Listener[],kanzi.Event)>($r25, evt);

     label19:
        $i21 = this.<kanzi.io.CompressedInputStream$DecodingTask: int blockSize>;

        $i22 = preTransformLength#44 + 256;

        if $i21 < $i22 goto label20;

        $i23 = this.<kanzi.io.CompressedInputStream$DecodingTask: int blockSize>;

        goto label21;

     label20:
        $i23 = preTransformLength#44 + 256;

     label21:
        bufferSize = $i23;

        $i24 = buffer.<kanzi.SliceByteArray: int length>;

        if $i24 >= bufferSize goto label22;

        buffer.<kanzi.SliceByteArray: int length> = bufferSize;

        $r26 = buffer.<kanzi.SliceByteArray: byte[] array>;

        $i25 = lengthof $r26;

        $i26 = buffer.<kanzi.SliceByteArray: int length>;

        if $i25 >= $i26 goto label22;

        $i27 = buffer.<kanzi.SliceByteArray: int length>;

        $r27 = newarray (byte)[$i27];

        buffer.<kanzi.SliceByteArray: byte[] array> = $r27;

     label22:
        savedIdx = data.<kanzi.SliceByteArray: int index>;

        $r28 = new kanzi.entropy.EntropyCodecFactory;

        specialinvoke $r28.<kanzi.entropy.EntropyCodecFactory: void <init>()>();

        $r29 = this.<kanzi.io.CompressedInputStream$DecodingTask: kanzi.InputBitStream ibs>;

        $r30 = this.<kanzi.io.CompressedInputStream$DecodingTask: java.util.Map ctx>;

        ed#28 = virtualinvoke $r28.<kanzi.entropy.EntropyCodecFactory: kanzi.EntropyDecoder newDecoder(kanzi.InputBitStream,java.util.Map,short)>($r29, $r30, typeOfEntropy);

        $r31 = buffer.<kanzi.SliceByteArray: byte[] array>;

        $i28 = interfaceinvoke ed#28.<kanzi.EntropyDecoder: int decode(byte[],int,int)>($r31, 0, preTransformLength#44);

        if $i28 == preTransformLength#44 goto label26;

        $r32 = this.<kanzi.io.CompressedInputStream$DecodingTask: java.util.concurrent.atomic.AtomicInteger processedBlockId>;

        virtualinvoke $r32.<java.util.concurrent.atomic.AtomicInteger: void set(int)>(-1);

        $r33 = new kanzi.io.CompressedInputStream$Status;

        specialinvoke $r33.<kanzi.io.CompressedInputStream$Status: void <init>(kanzi.SliceByteArray,int,int,int,int,java.lang.String)>(data, currentBlockId, 0, checksum1#16, -13, "Entropy decoding failed");

        l15 = $r33;

     label23:
        $r34 = this.<kanzi.io.CompressedInputStream$DecodingTask: java.util.concurrent.atomic.AtomicInteger processedBlockId>;

        $i29 = virtualinvoke $r34.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i30 = this.<kanzi.io.CompressedInputStream$DecodingTask: int blockId>;

        $i31 = $i30 - 1;

        if $i29 != $i31 goto label24;

        $r35 = this.<kanzi.io.CompressedInputStream$DecodingTask: java.util.concurrent.atomic.AtomicInteger processedBlockId>;

        virtualinvoke $r35.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

     label24:
        if ed#28 == null goto label25;

        interfaceinvoke ed#28.<kanzi.EntropyDecoder: void dispose()>();

     label25:
        return l15;

     label26:
        $r36 = this.<kanzi.io.CompressedInputStream$DecodingTask: kanzi.Listener[] listeners>;

        $i33 = lengthof $r36;

        if $i33 <= 0 goto label29;

        $r37 = new kanzi.Event;

        $r39 = <kanzi.Event$Type: kanzi.Event$Type AFTER_ENTROPY>;

        $r40 = this.<kanzi.io.CompressedInputStream$DecodingTask: kanzi.InputBitStream ibs>;

        $l35 = interfaceinvoke $r40.<kanzi.InputBitStream: long read()>();

        $l36 = $l35 - read;

        $l37 = $l36 / 8L;

        $i38 = (int) $l37;

        $l39 = (long) $i38;

        $i40 = checksum1#16;

        $r41 = this.<kanzi.io.CompressedInputStream$DecodingTask: kanzi.util.hash.XXHash32 hasher>;

        if $r41 == null goto label27;

        $z1 = 1;

        goto label28;

     label27:
        $z1 = 0;

     label28:
        specialinvoke $r37.<kanzi.Event: void <init>(kanzi.Event$Type,int,long,int,boolean)>($r39, currentBlockId, $l39, $i40, $z1);

        evt#231 = $r37;

        $r42 = this.<kanzi.io.CompressedInputStream$DecodingTask: kanzi.Listener[] listeners>;

        staticinvoke <kanzi.io.CompressedInputStream: void notifyListeners(kanzi.Listener[],kanzi.Event)>($r42, evt#231);

     label29:
        $r43 = this.<kanzi.io.CompressedInputStream$DecodingTask: java.util.concurrent.atomic.AtomicInteger processedBlockId>;

        virtualinvoke $r43.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        $r44 = this.<kanzi.io.CompressedInputStream$DecodingTask: kanzi.Listener[] listeners>;

        $i42 = lengthof $r44;

        if $i42 <= 0 goto label32;

        $r45 = new kanzi.Event;

        $r47 = <kanzi.Event$Type: kanzi.Event$Type BEFORE_TRANSFORM>;

        $l44 = (long) preTransformLength#44;

        $i45 = checksum1#16;

        $r48 = this.<kanzi.io.CompressedInputStream$DecodingTask: kanzi.util.hash.XXHash32 hasher>;

        if $r48 == null goto label30;

        $z2 = 1;

        goto label31;

     label30:
        $z2 = 0;

     label31:
        specialinvoke $r45.<kanzi.Event: void <init>(kanzi.Event$Type,int,long,int,boolean)>($r47, currentBlockId, $l44, $i45, $z2);

        evt#251 = $r45;

        $r49 = this.<kanzi.io.CompressedInputStream$DecodingTask: kanzi.Listener[] listeners>;

        staticinvoke <kanzi.io.CompressedInputStream: void notifyListeners(kanzi.Listener[],kanzi.Event)>($r49, evt#251);

     label32:
        $s46 = mode & 128;

        if $s46 == 0 goto label34;

        $r50 = buffer.<kanzi.SliceByteArray: byte[] array>;

        $r51 = data.<kanzi.SliceByteArray: byte[] array>;

        if $r50 == $r51 goto label33;

        $r52 = buffer.<kanzi.SliceByteArray: byte[] array>;

        $r53 = data.<kanzi.SliceByteArray: byte[] array>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r52, 0, $r53, savedIdx, preTransformLength#44);

     label33:
        buffer.<kanzi.SliceByteArray: int index> = preTransformLength#44;

        $i47 = savedIdx + preTransformLength#44;

        data.<kanzi.SliceByteArray: int index> = $i47;

        goto label38;

     label34:
        $r54 = this.<kanzi.io.CompressedInputStream$DecodingTask: java.util.Map ctx>;

        $r55 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(preTransformLength#44);

        interfaceinvoke $r54.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("size", $r55);

        $r57 = new kanzi.io.ByteFunctionFactory;

        specialinvoke $r57.<kanzi.io.ByteFunctionFactory: void <init>()>();

        $r58 = this.<kanzi.io.CompressedInputStream$DecodingTask: java.util.Map ctx>;

        transform = virtualinvoke $r57.<kanzi.io.ByteFunctionFactory: kanzi.function.ByteTransformSequence newFunction(java.util.Map,short)>($r58, typeOfTransform);

        $b48 = mode >> 2;

        $b49 = $b48 & 15;

        $b50 = (byte) $b49;

        virtualinvoke transform.<kanzi.function.ByteTransformSequence: boolean setSkipFlags(byte)>($b50);

        buffer.<kanzi.SliceByteArray: int index> = 0;

        buffer.<kanzi.SliceByteArray: int length> = preTransformLength#44;

        $z4 = virtualinvoke transform.<kanzi.function.ByteTransformSequence: boolean inverse(kanzi.SliceByteArray,kanzi.SliceByteArray)>(buffer, data);

        if $z4 != 0 goto label38;

        $r59 = new kanzi.io.CompressedInputStream$Status;

        specialinvoke $r59.<kanzi.io.CompressedInputStream$Status: void <init>(kanzi.SliceByteArray,int,int,int,int,java.lang.String)>(data, currentBlockId, 0, checksum1#16, -13, "Transform inverse failed");

        l16#311 = $r59;

     label35:
        $r60 = this.<kanzi.io.CompressedInputStream$DecodingTask: java.util.concurrent.atomic.AtomicInteger processedBlockId>;

        $i51 = virtualinvoke $r60.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i52 = this.<kanzi.io.CompressedInputStream$DecodingTask: int blockId>;

        $i53 = $i52 - 1;

        if $i51 != $i53 goto label36;

        $r61 = this.<kanzi.io.CompressedInputStream$DecodingTask: java.util.concurrent.atomic.AtomicInteger processedBlockId>;

        virtualinvoke $r61.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

     label36:
        if ed#28 == null goto label37;

        interfaceinvoke ed#28.<kanzi.EntropyDecoder: void dispose()>();

     label37:
        return l16#311;

     label38:
        $i55 = data.<kanzi.SliceByteArray: int index>;

        decoded = $i55 - savedIdx;

        $r62 = this.<kanzi.io.CompressedInputStream$DecodingTask: kanzi.util.hash.XXHash32 hasher>;

        if $r62 == null goto label42;

        $r63 = this.<kanzi.io.CompressedInputStream$DecodingTask: kanzi.util.hash.XXHash32 hasher>;

        $r64 = data.<kanzi.SliceByteArray: byte[] array>;

        checksum2 = virtualinvoke $r63.<kanzi.util.hash.XXHash32: int hash(byte[],int,int)>($r64, savedIdx, decoded);

        if checksum2 == checksum1#16 goto label42;

        $r65 = new kanzi.io.CompressedInputStream$Status;

        $r66 = new java.lang.StringBuilder;

        specialinvoke $r66.<java.lang.StringBuilder: void <init>()>();

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Corrupted bitstream: expected checksum ");

        $r68 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(checksum1#16);

        $r69 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r68);

        $r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", found ");

        $r71 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(checksum2);

        $r72 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r71);

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r65.<kanzi.io.CompressedInputStream$Status: void <init>(kanzi.SliceByteArray,int,int,int,int,java.lang.String)>(data, currentBlockId, decoded, checksum1#16, -13, $r73);

        l17 = $r65;

     label39:
        $r74 = this.<kanzi.io.CompressedInputStream$DecodingTask: java.util.concurrent.atomic.AtomicInteger processedBlockId>;

        $i56 = virtualinvoke $r74.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i57 = this.<kanzi.io.CompressedInputStream$DecodingTask: int blockId>;

        $i58 = $i57 - 1;

        if $i56 != $i58 goto label40;

        $r75 = this.<kanzi.io.CompressedInputStream$DecodingTask: java.util.concurrent.atomic.AtomicInteger processedBlockId>;

        virtualinvoke $r75.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

     label40:
        if ed#28 == null goto label41;

        interfaceinvoke ed#28.<kanzi.EntropyDecoder: void dispose()>();

     label41:
        return l17;

     label42:
        $r76 = new kanzi.io.CompressedInputStream$Status;

        specialinvoke $r76.<kanzi.io.CompressedInputStream$Status: void <init>(kanzi.SliceByteArray,int,int,int,int,java.lang.String)>(data, currentBlockId, decoded, checksum1#16, 0, null);

        l16#381 = $r76;

     label43:
        $r77 = this.<kanzi.io.CompressedInputStream$DecodingTask: java.util.concurrent.atomic.AtomicInteger processedBlockId>;

        $i60 = virtualinvoke $r77.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i61 = this.<kanzi.io.CompressedInputStream$DecodingTask: int blockId>;

        $i62 = $i61 - 1;

        if $i60 != $i62 goto label44;

        $r78 = this.<kanzi.io.CompressedInputStream$DecodingTask: java.util.concurrent.atomic.AtomicInteger processedBlockId>;

        virtualinvoke $r78.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

     label44:
        if ed#28 == null goto label45;

        interfaceinvoke ed#28.<kanzi.EntropyDecoder: void dispose()>();

     label45:
        return l16#381;

     label46:
        $r79 := @caughtexception;

     label47:
        e = $r79;

        $r80 = new kanzi.io.CompressedInputStream$Status;

        $r81 = virtualinvoke e.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r80.<kanzi.io.CompressedInputStream$Status: void <init>(kanzi.SliceByteArray,int,int,int,int,java.lang.String)>(data, currentBlockId, 0, checksum1#16, -13, $r81);

        l10 = $r80;

     label48:
        $r82 = this.<kanzi.io.CompressedInputStream$DecodingTask: java.util.concurrent.atomic.AtomicInteger processedBlockId>;

        $i64 = virtualinvoke $r82.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i65 = this.<kanzi.io.CompressedInputStream$DecodingTask: int blockId>;

        $i66 = $i65 - 1;

        if $i64 != $i66 goto label49;

        $r83 = this.<kanzi.io.CompressedInputStream$DecodingTask: java.util.concurrent.atomic.AtomicInteger processedBlockId>;

        virtualinvoke $r83.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

     label49:
        if ed#28 == null goto label50;

        interfaceinvoke ed#28.<kanzi.EntropyDecoder: void dispose()>();

     label50:
        return l10;

     label51:
        $r84 := @caughtexception;

     label52:
        l18 = $r84;

     label53:
        $r85 = this.<kanzi.io.CompressedInputStream$DecodingTask: java.util.concurrent.atomic.AtomicInteger processedBlockId>;

        $i68 = virtualinvoke $r85.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i69 = this.<kanzi.io.CompressedInputStream$DecodingTask: int blockId>;

        $i70 = $i69 - 1;

        if $i68 != $i70 goto label54;

        $r86 = this.<kanzi.io.CompressedInputStream$DecodingTask: java.util.concurrent.atomic.AtomicInteger processedBlockId>;

        virtualinvoke $r86.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

     label54:
        if ed#28 == null goto label55;

        interfaceinvoke ed#28.<kanzi.EntropyDecoder: void dispose()>();

     label55:
        throw l18;

        catch java.lang.Exception from label04 to label07 with label46;
        catch java.lang.Exception from label10 to label12 with label46;
        catch java.lang.Exception from label15 to label23 with label46;
        catch java.lang.Exception from label26 to label35 with label46;
        catch java.lang.Exception from label38 to label39 with label46;
        catch java.lang.Exception from label42 to label43 with label46;
        catch java.lang.Throwable from label04 to label07 with label51;
        catch java.lang.Throwable from label10 to label12 with label51;
        catch java.lang.Throwable from label15 to label23 with label51;
        catch java.lang.Throwable from label26 to label35 with label51;
        catch java.lang.Throwable from label38 to label39 with label51;
        catch java.lang.Throwable from label42 to label43 with label51;
        catch java.lang.Throwable from label47 to label48 with label51;
        catch java.lang.Throwable from label52 to label53 with label51;
    }


