    public boolean apply(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.filter.LightingEffect this;
        kanzi.SliceIntArray input, output;
        int[] src, dst, normals, intensities;
        int rd, w, h, lx, ly, st, x0, x1, y0, y1, maxVal, normal, dy, yy, intensity, pixel, dy, yy, srcIdx#12, dstIdx#15, $i0, $i1, $i2, $i3, $i4, $i5, $i6, yy#63, offs#65, end#71, xx#73, $i7, offs#89, yy#91, end#100, xx#102, $i8, srcIdx#113, $i9, dstIdx#119, $i10, y#128, offs#134, $i11, xx#141, x#148, $i12, $i13, $i14, $i15, $i16, $i18, dx#174, $i19, dx#180, $i20, $i21, $i22, $i23, $i25, $i26, $i27, $i28, $i29, r#219, $i30, g#225, b#229, $i31, r#235, $i32, g#241, $i33, b#247, $i34, $i35, $i36, $i37, $i38, xx#264, $i39, y#279, $i40, xx#288, $i41, $i42, x#307, $i43, $i44, dx#319, $i45, intensity#325, $i46, pixel#331, $i47, r#337, $i48, g#343, b#347, $i49, r#353, $i50, g#359, $i51, b#365, $i52, $i53, $i54, $i55, $i56, x#380, $i57, $i58, dx#392, $i59, intensity#398, $i60, pixel#404, $i61, r#410, $i62, g#416, b#420, $i63, r#426, $i64, g#432, $i65, b#438, $i66, $i67, $i68, $i69, $i70, xx#455, $i71;
        short nx, ny, $s17, $s24;
        boolean $z0, $z1, $z2;

        this := @this: kanzi.filter.LightingEffect;

        input := @parameter0: kanzi.SliceIntArray;

        output := @parameter1: kanzi.SliceIntArray;

        $z0 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(input);

        if $z0 == 0 goto label01;

        $z1 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(output);

        if $z1 != 0 goto label02;

     label01:
        return 0;

     label02:
        src = input.<kanzi.SliceIntArray: int[] array>;

        dst = output.<kanzi.SliceIntArray: int[] array>;

        srcIdx#12 = input.<kanzi.SliceIntArray: int index>;

        dstIdx#15 = output.<kanzi.SliceIntArray: int index>;

        rd = this.<kanzi.filter.LightingEffect: int radius>;

        w = this.<kanzi.filter.LightingEffect: int width>;

        h = this.<kanzi.filter.LightingEffect: int height>;

        lx = this.<kanzi.filter.LightingEffect: int lightX>;

        ly = this.<kanzi.filter.LightingEffect: int lightY>;

        st = this.<kanzi.filter.LightingEffect: int stride>;

        if lx < rd goto label03;

        $i0 = lx - rd;

        goto label04;

     label03:
        $i0 = 0;

     label04:
        x0 = $i0;

        $i1 = lx + rd;

        if $i1 >= w goto label05;

        $i2 = lx + rd;

        goto label06;

     label05:
        $i2 = w;

     label06:
        x1 = $i2;

        if ly < rd goto label07;

        $i3 = ly - rd;

        goto label08;

     label07:
        $i3 = 0;

     label08:
        y0 = $i3;

        $i4 = ly + rd;

        if $i4 >= h goto label09;

        $i5 = ly + rd;

        goto label10;

     label09:
        $i5 = h;

     label10:
        y1 = $i5;

        normals = this.<kanzi.filter.LightingEffect: int[] normalXY>;

        intensities = this.<kanzi.filter.LightingEffect: int[] distanceMap>;

        $i6 = rd - 1;

        maxVal = $i6 * rd;

        if y0 <= 0 goto label14;

        yy#63 = 0;

        offs#65 = dstIdx#15;

     label11:
        if yy#63 >= y0 goto label14;

        end#71 = offs#65 + w;

        xx#73 = offs#65;

     label12:
        if xx#73 >= end#71 goto label13;

        dst[xx#73] = 0;

        xx#73 = xx#73 + 1;

        goto label12;

     label13:
        offs#65 = offs#65 + st;

        yy#63 = yy#63 + 1;

        goto label11;

     label14:
        if y1 >= h goto label18;

        $i7 = st * h;

        offs#89 = dstIdx#15 + $i7;

        yy#91 = h;

     label15:
        if yy#91 < y1 goto label18;

        offs#89 = offs#89 - st;

        end#100 = offs#89 + w;

        xx#102 = offs#89;

     label16:
        if xx#102 >= end#100 goto label17;

        dst[xx#102] = 0;

        xx#102 = xx#102 + 1;

        goto label16;

     label17:
        yy#91 = yy#91 + -1;

        goto label15;

     label18:
        $i8 = st * y0;

        srcIdx#113 = srcIdx#12 + $i8;

        $i9 = st * y0;

        dstIdx#119 = dstIdx#15 + $i9;

        $z2 = this.<kanzi.filter.LightingEffect: boolean bumpMapping>;

        if $z2 != 1 goto label35;

        $i10 = input.<kanzi.SliceIntArray: int index>;

        specialinvoke this.<kanzi.filter.LightingEffect: void calculateNormalMap(int[],int)>(src, $i10);

        y#128 = y0;

     label19:
        if y#128 >= y1 goto label34;

        offs#134 = y#128 * w;

        if x0 <= 0 goto label21;

        $i11 = dstIdx#119 + x0;

        xx#141 = $i11 - 1;

     label20:
        if xx#141 < dstIdx#119 goto label21;

        dst[xx#141] = 0;

        xx#141 = xx#141 + -1;

        goto label20;

     label21:
        x#148 = x0;

     label22:
        if x#148 >= x1 goto label31;

        $i12 = offs#134 + x#148;

        normal = normals[$i12];

        $i13 = normal >> 16;

        nx = (short) $i13;

        $i14 = x#148 - lx;

        if nx <= $i14 goto label23;

        $i15 = nx - x#148;

        $i16 = $i15 + lx;

        goto label24;

     label23:
        $s17 = neg nx;

        $i18 = $s17 + x#148;

        $i16 = $i18 - lx;

     label24:
        dx#174 = $i16;

        if dx#174 >= rd goto label25;

        $i19 = dx#174;

        goto label26;

     label25:
        $i19 = rd - 1;

     label26:
        dx#180 = $i19;

        $i20 = normal & 65535;

        ny = (short) $i20;

        $i21 = y#128 - ly;

        if ny <= $i21 goto label27;

        $i22 = ny - y#128;

        $i23 = $i22 + ly;

        goto label28;

     label27:
        $s24 = neg ny;

        $i25 = $s24 + y#128;

        $i23 = $i25 - ly;

     label28:
        dy = $i23;

        if dy >= rd goto label29;

        $i26 = dy * rd;

        goto label30;

     label29:
        $i26 = maxVal;

     label30:
        yy = $i26;

        $i27 = yy + dx#180;

        intensity = intensities[$i27];

        $i28 = srcIdx#113 + x#148;

        pixel = src[$i28];

        $i29 = pixel >> 16;

        r#219 = $i29 & 255;

        $i30 = pixel >> 8;

        g#225 = $i30 & 255;

        b#229 = pixel & 255;

        $i31 = intensity * r#219;

        r#235 = $i31 >> 8;

        $i32 = intensity * g#225;

        g#241 = $i32 >> 8;

        $i33 = intensity * b#229;

        b#247 = $i33 >> 8;

        $i34 = dstIdx#119 + x#148;

        $i35 = r#235 << 16;

        $i36 = g#241 << 8;

        $i37 = $i35 | $i36;

        $i38 = $i37 | b#247;

        dst[$i34] = $i38;

        x#148 = x#148 + 1;

        goto label22;

     label31:
        if x1 >= w goto label33;

        xx#264 = x1;

     label32:
        if xx#264 >= w goto label33;

        $i39 = dstIdx#119 + xx#264;

        dst[$i39] = 0;

        xx#264 = xx#264 + 1;

        goto label32;

     label33:
        srcIdx#113 = srcIdx#113 + st;

        dstIdx#119 = dstIdx#119 + st;

        y#128 = y#128 + 1;

        goto label19;

     label34:
        goto label53;

     label35:
        y#279 = y0;

     label36:
        if y#279 >= y1 goto label53;

        if x0 <= 0 goto label38;

        $i40 = dstIdx#119 + x0;

        xx#288 = $i40 - 1;

     label37:
        if xx#288 < dstIdx#119 goto label38;

        dst[xx#288] = 0;

        xx#288 = xx#288 + -1;

        goto label37;

     label38:
        if y#279 <= ly goto label39;

        $i41 = y#279 - ly;

        goto label40;

     label39:
        $i41 = ly - y#279;

     label40:
        dy = $i41;

        if dy >= rd goto label41;

        $i42 = dy * rd;

        goto label42;

     label41:
        $i42 = maxVal;

     label42:
        yy = $i42;

        x#307 = x0;

     label43:
        if x#307 >= lx goto label46;

        $i43 = lx - x#307;

        if $i43 >= rd goto label44;

        $i44 = lx - x#307;

        goto label45;

     label44:
        $i44 = rd - 1;

     label45:
        dx#319 = $i44;

        $i45 = yy + dx#319;

        intensity#325 = intensities[$i45];

        $i46 = srcIdx#113 + x#307;

        pixel#331 = src[$i46];

        $i47 = pixel#331 >> 16;

        r#337 = $i47 & 255;

        $i48 = pixel#331 >> 8;

        g#343 = $i48 & 255;

        b#347 = pixel#331 & 255;

        $i49 = intensity#325 * r#337;

        r#353 = $i49 >> 8;

        $i50 = intensity#325 * g#343;

        g#359 = $i50 >> 8;

        $i51 = intensity#325 * b#347;

        b#365 = $i51 >> 8;

        $i52 = dstIdx#119 + x#307;

        $i53 = r#353 << 16;

        $i54 = g#359 << 8;

        $i55 = $i53 | $i54;

        $i56 = $i55 | b#365;

        dst[$i52] = $i56;

        x#307 = x#307 + 1;

        goto label43;

     label46:
        x#380 = lx;

     label47:
        if x#380 >= x1 goto label50;

        $i57 = x#380 - lx;

        if $i57 >= rd goto label48;

        $i58 = x#380 - lx;

        goto label49;

     label48:
        $i58 = rd - 1;

     label49:
        dx#392 = $i58;

        $i59 = yy + dx#392;

        intensity#398 = intensities[$i59];

        $i60 = srcIdx#113 + x#380;

        pixel#404 = src[$i60];

        $i61 = pixel#404 >> 16;

        r#410 = $i61 & 255;

        $i62 = pixel#404 >> 8;

        g#416 = $i62 & 255;

        b#420 = pixel#404 & 255;

        $i63 = intensity#398 * r#410;

        r#426 = $i63 >> 8;

        $i64 = intensity#398 * g#416;

        g#432 = $i64 >> 8;

        $i65 = intensity#398 * b#420;

        b#438 = $i65 >> 8;

        $i66 = dstIdx#119 + x#380;

        $i67 = r#426 << 16;

        $i68 = g#432 << 8;

        $i69 = $i67 | $i68;

        $i70 = $i69 | b#438;

        dst[$i66] = $i70;

        x#380 = x#380 + 1;

        goto label47;

     label50:
        if x1 >= w goto label52;

        xx#455 = x1;

     label51:
        if xx#455 >= w goto label52;

        $i71 = dstIdx#119 + xx#455;

        dst[$i71] = 0;

        xx#455 = xx#455 + 1;

        goto label51;

     label52:
        srcIdx#113 = srcIdx#113 + st;

        dstIdx#119 = dstIdx#119 + st;

        y#279 = y#279 + 1;

        goto label36;

     label53:
        return 1;
    }

    private void calculateNormalMap(int[], int)
    {
        kanzi.filter.LightingEffect this;
        int[] rgb, map, normals, $r0, $r1;
        int offset, length, w, len, end, pixel, r, g, b, hh, ww, tmp, $i0, $i1, idx#7, startLine#9, j#24, $i2, i#32, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i#70, $i11, $i12, $i13, $i14, offs#93, y#95, $i15, $i16, $i17, $i18, delta#109, $i19, offs#115, x#117, $i20, $i21, $i22, $i23, delta#131, $i24, $i25, $i26, $i27, $i28, delta#148, $i29, $i30, $i31, $i32, $i33, $i34, delta#166, $i35;

        this := @this: kanzi.filter.LightingEffect;

        rgb := @parameter0: int[];

        offset := @parameter1: int;

        $i0 = this.<kanzi.filter.LightingEffect: int width>;

        $i1 = this.<kanzi.filter.LightingEffect: int height>;

        length = $i0 * $i1;

        idx#7 = 0;

        startLine#9 = offset;

        $r0 = this.<kanzi.filter.LightingEffect: int[] heightMap>;

        if $r0 != null goto label01;

        $r1 = newarray (int)[length];

        this.<kanzi.filter.LightingEffect: int[] heightMap> = $r1;

     label01:
        map = this.<kanzi.filter.LightingEffect: int[] heightMap>;

        w = this.<kanzi.filter.LightingEffect: int width>;

        normals = this.<kanzi.filter.LightingEffect: int[] normalXY>;

        len = lengthof rgb;

        j#24 = 0;

     label02:
        $i2 = this.<kanzi.filter.LightingEffect: int height>;

        if j#24 >= $i2 goto label07;

        end = startLine#9 + w;

        i#32 = startLine#9;

     label03:
        if i#32 >= end goto label06;

        if i#32 < len goto label04;

        $i3 = idx#7;

        idx#7 = idx#7 + 1;

        map[$i3] = 0;

        goto label05;

     label04:
        pixel = rgb[i#32];

        $i4 = pixel >> 16;

        r = $i4 & 255;

        $i5 = pixel >> 8;

        g = $i5 & 255;

        b = pixel & 255;

        $i6 = idx#7;

        idx#7 = idx#7 + 1;

        $i7 = r + g;

        $i8 = $i7 + b;

        $i9 = $i8 / 3;

        map[$i6] = $i9;

     label05:
        i#32 = i#32 + 1;

        goto label03;

     label06:
        $i10 = this.<kanzi.filter.LightingEffect: int stride>;

        startLine#9 = startLine#9 + $i10;

        j#24 = j#24 + 1;

        goto label02;

     label07:
        i#70 = 0;

     label08:
        if i#70 >= w goto label09;

        normals[i#70] = 0;

        $i11 = length - 1;

        $i12 = $i11 - i#70;

        normals[$i12] = 0;

        i#70 = i#70 + 1;

        goto label08;

     label09:
        $i13 = this.<kanzi.filter.LightingEffect: int height>;

        hh = $i13 - 1;

        $i14 = this.<kanzi.filter.LightingEffect: int width>;

        ww = $i14 - 1;

        offs#93 = this.<kanzi.filter.LightingEffect: int width>;

        y#95 = 1;

     label10:
        if y#95 >= hh goto label13;

        $i15 = offs#93 + w;

        $i16 = map[$i15];

        $i17 = offs#93 - w;

        $i18 = map[$i17];

        delta#109 = $i16 - $i18;

        $i19 = delta#109 & 65535;

        normals[offs#93] = $i19;

        offs#115 = offs#93 + 1;

        x#117 = 1;

     label11:
        if x#117 >= ww goto label12;

        $i20 = offs#115 + 1;

        $i21 = map[$i20];

        $i22 = offs#115 - 1;

        $i23 = map[$i22];

        delta#131 = $i21 - $i23;

        $i24 = delta#131 & 65535;

        tmp = $i24 << 16;

        $i25 = offs#115 + w;

        $i26 = map[$i25];

        $i27 = offs#115 - w;

        $i28 = map[$i27];

        delta#148 = $i26 - $i28;

        $i29 = delta#148 & 65535;

        $i30 = tmp | $i29;

        normals[offs#115] = $i30;

        x#117 = x#117 + 1;

        offs#115 = offs#115 + 1;

        goto label11;

     label12:
        $i31 = offs#115 + w;

        $i32 = map[$i31];

        $i33 = offs#115 - w;

        $i34 = map[$i33];

        delta#166 = $i32 - $i34;

        $i35 = delta#166 & 65535;

        normals[offs#115] = $i35;

        offs#93 = offs#115 + 1;

        y#95 = y#95 + 1;

        goto label10;

     label13:
        return;
    }


