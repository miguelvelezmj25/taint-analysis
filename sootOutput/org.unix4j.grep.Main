    public static void main(java.lang.String[])
    {
        java.lang.String[] args, $r1;
        boolean isIgnoreCase, isInvertMatch, isFixedStrings, isLineNumber, isCount, isMatchingFiles, isWholeLine;
        java.lang.String regexp, anna, bible, big, don, shak, war;
        org.unix4j.grep.unix.grep.GrepArguments grepArgs, $r0;
        org.unix4j.grep.unix.grep.GrepCommand grep, $r2;
        org.unix4j.grep.context.DefaultExecutionContext executionContext, $r3;
        org.unix4j.grep.io.StdOutput out, $r4;
        org.unix4j.grep.processor.LineProcessor exec;

        args := @parameter0: java.lang.String[];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void init()>();

        isIgnoreCase = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getIsIgnoreCase(boolean)>(1);

        isInvertMatch = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getIsInvertMatch(boolean)>(0);

        isFixedStrings = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getIsFixedStrings(boolean)>(0);

        isLineNumber = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getIsLineNumber(boolean)>(0);

        isCount = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getIsCount(boolean)>(1);

        isMatchingFiles = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getIsMatchingFiles(boolean)>(0);

        isWholeLine = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getIsWholeLine(boolean)>(0);

        regexp = "heaven";

        anna = "anna.txt";

        bible = "bible.txt";

        big = "big.txt";

        don = "don.txt";

        shak = "shak.txt";

        war = "war.txt";

        $r0 = new org.unix4j.grep.unix.grep.GrepArguments;

        specialinvoke $r0.<org.unix4j.grep.unix.grep.GrepArguments: void <init>(boolean,boolean,boolean,boolean,boolean,boolean,boolean)>(isIgnoreCase, isInvertMatch, isFixedStrings, isLineNumber, isCount, isMatchingFiles, isWholeLine);

        grepArgs = $r0;

        virtualinvoke grepArgs.<org.unix4j.grep.unix.grep.GrepArguments: void setRegexp(java.lang.String)>(regexp);

        $r1 = newarray (java.lang.String)[6];

        $r1[0] = anna;

        $r1[1] = bible;

        $r1[2] = big;

        $r1[3] = don;

        $r1[4] = shak;

        $r1[5] = war;

        virtualinvoke grepArgs.<org.unix4j.grep.unix.grep.GrepArguments: void setPaths(java.lang.String[])>($r1);

        $r2 = new org.unix4j.grep.unix.grep.GrepCommand;

        specialinvoke $r2.<org.unix4j.grep.unix.grep.GrepCommand: void <init>(org.unix4j.grep.unix.grep.GrepArguments)>(grepArgs);

        grep = $r2;

        $r3 = new org.unix4j.grep.context.DefaultExecutionContext;

        specialinvoke $r3.<org.unix4j.grep.context.DefaultExecutionContext: void <init>()>();

        executionContext = $r3;

        $r4 = new org.unix4j.grep.io.StdOutput;

        specialinvoke $r4.<org.unix4j.grep.io.StdOutput: void <init>()>();

        out = $r4;

        exec = virtualinvoke grep.<org.unix4j.grep.unix.grep.GrepCommand: org.unix4j.grep.processor.LineProcessor execute(org.unix4j.grep.context.ExecutionContext,org.unix4j.grep.processor.LineProcessor)>(executionContext, out);

        interfaceinvoke exec.<org.unix4j.grep.processor.LineProcessor: void finish()>();

        return;
    }

    public void <init>()
    {
        org.unix4j.grep.Main this;

        this := @this: org.unix4j.grep.Main;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }


