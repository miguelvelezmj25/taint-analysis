    public at.favre.tools.dconvert.converters.Result synchronizedProcess(java.io.File, boolean)
    {
        at.favre.tools.dconvert.converters.postprocessing.WebpProcessor this;
        java.io.File rawFile;
        boolean keepOriginal;
        at.favre.tools.dconvert.arg.ImageType compression, $r0, $r1, $r3;
        java.lang.String[] finalArg, $r2, additionalArgs#24, $r4, $r5, $r7;
        java.lang.Throwable e, $r10;
        java.lang.Object[] $r6, $r8;
        at.favre.tools.dconvert.converters.Result $r9, tmp$2076845235;
        java.lang.StringBuilder $r13, $r16, tmp$980139271;
        java.lang.Class $r14;
        java.lang.String $r15, $r17;
        java.util.List $r18;
        java.lang.Exception tmp$1528263132;

        this := @this: at.favre.tools.dconvert.converters.postprocessing.WebpProcessor;

        rawFile := @parameter0: java.io.File;

        keepOriginal := @parameter1: boolean;

     label1:
        compression = staticinvoke <at.favre.tools.dconvert.arg.Arguments: at.favre.tools.dconvert.arg.ImageType getImageType(java.io.File)>(rawFile);

        $r0 = <at.favre.tools.dconvert.arg.ImageType: at.favre.tools.dconvert.arg.ImageType PNG>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(compression);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if compression == $r0 goto label2;

        $r1 = <at.favre.tools.dconvert.arg.ImageType: at.favre.tools.dconvert.arg.ImageType GIF>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(compression);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if compression != $r1 goto label3;

     label2:
        $r2 = newarray (java.lang.String)[5];

        $r2[0] = "-lossless";

        $r2[1] = "-alpha_filter";

        $r2[2] = "best";

        $r2[3] = "-m";

        $r2[4] = "6";

        additionalArgs#24 = $r2;

        goto label5;

     label3:
        $r3 = <at.favre.tools.dconvert.arg.ImageType: at.favre.tools.dconvert.arg.ImageType JPG>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(compression);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r3);

        if compression != $r3 goto label4;

        $r4 = newarray (java.lang.String)[4];

        $r4[0] = "-m";

        $r4[1] = "6";

        $r4[2] = "-q";

        $r4[3] = "90";

        additionalArgs#24 = $r4;

        goto label5;

     label4:
        return null;

     label5:
        $r5 = newarray (java.lang.String)[1];

        $r5[0] = "cwebp";

        $r6 = staticinvoke <at.favre.tools.dconvert.util.MiscUtil: java.lang.Object[] concat(java.lang.Object[],java.lang.Object[])>($r5, additionalArgs#24);

        $r7 = newarray (java.lang.String)[3];

        $r7[0] = "%%sourceFilePath%%";

        $r7[1] = "-o";

        $r7[2] = "%%outFilePath%%";

        $r8 = staticinvoke <at.favre.tools.dconvert.util.MiscUtil: java.lang.Object[] concat(java.lang.Object[],java.lang.Object[])>($r6, $r7);

        finalArg = (java.lang.String[]) $r8;

        $r9 = staticinvoke <at.favre.tools.dconvert.util.PostProcessorUtil: at.favre.tools.dconvert.converters.Result runImageOptimizer(java.io.File,at.favre.tools.dconvert.arg.ImageType,java.lang.String[],boolean,java.lang.String)>(rawFile, compression, finalArg, keepOriginal, "webp");

     label6:
        return $r9;

     label7:
        $r10 := @caughtexception;

        e = $r10;

        tmp$2076845235 = new at.favre.tools.dconvert.converters.Result;

        tmp$980139271 = new java.lang.StringBuilder;

        specialinvoke tmp$980139271.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke tmp$980139271.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("could not execute post processor ");

        $r14 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $r15 = virtualinvoke $r14.<java.lang.Class: java.lang.String getSimpleName()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(rawFile);

        tmp$1528263132 = (java.lang.Exception) e;

        specialinvoke tmp$2076845235.<at.favre.tools.dconvert.converters.Result: void <init>(java.lang.String,java.lang.Exception,java.util.List)>($r17, tmp$1528263132, $r18);

        return tmp$2076845235;

        catch java.lang.Exception from label1 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public void <init>()
    {
        at.favre.tools.dconvert.converters.postprocessing.WebpProcessor this;

        this := @this: at.favre.tools.dconvert.converters.postprocessing.WebpProcessor;

        specialinvoke this.<at.favre.tools.dconvert.converters.postprocessing.APostProcessor: void <init>()>();

        return;
    }

    public boolean isSupported()
    {
        at.favre.tools.dconvert.converters.postprocessing.WebpProcessor this;
        java.lang.String[] $r0;
        boolean $z0;

        this := @this: at.favre.tools.dconvert.converters.postprocessing.WebpProcessor;

        $r0 = newarray (java.lang.String)[2];

        $r0[0] = "cwebp";

        $r0[1] = "-h";

        $z0 = staticinvoke <at.favre.tools.dconvert.util.PostProcessorUtil: boolean canRunCmd(java.lang.String[])>($r0);

        return $z0;
    }


