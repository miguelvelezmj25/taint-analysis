    void <init>(weka.core.pmml.BuiltInString$StringFunc)
    {
        weka.core.pmml.BuiltInString this;
        weka.core.pmml.BuiltInString$StringFunc func, $r0;
        java.lang.String $r1;

        this := @this: weka.core.pmml.BuiltInString;

        func := @parameter0: weka.core.pmml.BuiltInString$StringFunc;

        specialinvoke this.<weka.core.pmml.Function: void <init>()>();

        this.<weka.core.pmml.BuiltInString: weka.core.Attribute m_outputDef> = null;

        this.<weka.core.pmml.BuiltInString: weka.core.pmml.BuiltInString$StringFunc m_func> = func;

        $r0 = this.<weka.core.pmml.BuiltInString: weka.core.pmml.BuiltInString$StringFunc m_func>;

        $r1 = virtualinvoke $r0.<weka.core.pmml.BuiltInString$StringFunc: java.lang.String toString()>();

        this.<weka.core.pmml.BuiltInString: java.lang.String m_functionName> = $r1;

        return;
    }

    public weka.core.Attribute getOutputDef()
    {
        weka.core.pmml.BuiltInString this;
        weka.core.Attribute inputVals, $r0, $r3, $r11, $r18;
        java.util.ArrayList newVals, $r4, $r5, $r7;
        java.lang.String inVal, $r10, $r15, $r17;
        weka.core.pmml.BuiltInString$StringFunc $r1, $r2, $r8, $r14;
        java.lang.Object $r6;
        int i#20, $i0;
        java.lang.Object[] $r9;
        java.lang.StringBuilder $r12, $r13, $r16;

        this := @this: weka.core.pmml.BuiltInString;

        $r0 = this.<weka.core.pmml.BuiltInString: weka.core.Attribute m_outputDef>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label4;

        $r1 = this.<weka.core.pmml.BuiltInString: weka.core.pmml.BuiltInString$StringFunc m_func>;

        $r2 = <weka.core.pmml.BuiltInString$StringFunc: weka.core.pmml.BuiltInString$StringFunc SUBSTRING>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        if $r1 != $r2 goto label1;

        $r3 = new weka.core.Attribute;

        $r4 = (java.util.ArrayList) null;

        specialinvoke $r3.<weka.core.Attribute: void <init>(java.lang.String,java.util.List)>("BuiltInStringResult:substring", $r4);

        this.<weka.core.pmml.BuiltInString: weka.core.Attribute m_outputDef> = $r3;

     label1:
        $r5 = this.<weka.core.pmml.BuiltInString: java.util.ArrayList m_parameterDefs>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(0);

        inputVals = (weka.core.Attribute) $r6;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        newVals = $r7;

        i#20 = 0;

     label2:
        $i0 = virtualinvoke inputVals.<weka.core.Attribute: int numValues()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#20);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#20 >= $i0 goto label3;

        inVal = virtualinvoke inputVals.<weka.core.Attribute: java.lang.String value(int)>(i#20);

        $r8 = this.<weka.core.pmml.BuiltInString: weka.core.pmml.BuiltInString$StringFunc m_func>;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = inVal;

        $r10 = virtualinvoke $r8.<weka.core.pmml.BuiltInString$StringFunc: java.lang.String eval(java.lang.Object[])>($r9);

        virtualinvoke newVals.<java.util.ArrayList: boolean add(java.lang.Object)>($r10);

        i#20 = i#20 + 1;

        goto label2;

     label3:
        $r11 = new weka.core.Attribute;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BuiltInStringResult:");

        $r14 = this.<weka.core.pmml.BuiltInString: weka.core.pmml.BuiltInString$StringFunc m_func>;

        $r15 = virtualinvoke $r14.<weka.core.pmml.BuiltInString$StringFunc: java.lang.String toString()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<weka.core.Attribute: void <init>(java.lang.String,java.util.List)>($r17, newVals);

        this.<weka.core.pmml.BuiltInString: weka.core.Attribute m_outputDef> = $r11;

     label4:
        $r18 = this.<weka.core.pmml.BuiltInString: weka.core.Attribute m_outputDef>;

        return $r18;
    }

    public void setParameterDefs(java.util.ArrayList) throws java.lang.Exception
    {
        weka.core.pmml.BuiltInString this;
        java.util.ArrayList paramDefs, $r1;
        weka.core.pmml.BuiltInString$StringFunc $r0;
        int $i0;
        boolean $z0;
        java.lang.Exception $r2;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.String $r5, $r7;

        this := @this: weka.core.pmml.BuiltInString;

        paramDefs := @parameter0: java.util.ArrayList;

        this.<weka.core.pmml.BuiltInString: java.util.ArrayList m_parameterDefs> = paramDefs;

        $r0 = this.<weka.core.pmml.BuiltInString: weka.core.pmml.BuiltInString$StringFunc m_func>;

        $r1 = this.<weka.core.pmml.BuiltInString: java.util.ArrayList m_parameterDefs>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $z0 = virtualinvoke $r0.<weka.core.pmml.BuiltInString$StringFunc: boolean legalNumParams(int)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.Exception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[BuiltInMath] illegal number of parameters for function: ");

        $r5 = this.<weka.core.pmml.BuiltInString: java.lang.String m_functionName>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.Exception: void <init>(java.lang.String)>($r7);

        throw $r2;

     label1:
        return;
    }

    public double getResult(double[]) throws java.lang.Exception
    {
        weka.core.pmml.BuiltInString this;
        double[] incoming;
        java.lang.Object[] args;
        java.lang.String result, $r13;
        java.util.ArrayList $r0;
        java.lang.Exception $r1, $r3, $r8;
        weka.core.pmml.BuiltInString$StringFunc $r2, $r4;
        int $i0, resultI#25;
        boolean $z0, $z1;
        weka.core.Attribute $r5, $r6, $r7;
        java.lang.StringBuilder $r9, $r10, $r11, $r12;
        double $d0;

        this := @this: weka.core.pmml.BuiltInString;

        incoming := @parameter0: double[];

        $r0 = this.<weka.core.pmml.BuiltInString: java.util.ArrayList m_parameterDefs>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label1;

        $r1 = new java.lang.Exception;

        specialinvoke $r1.<java.lang.Exception: void <init>(java.lang.String)>("[BuiltInString] incoming parameter structure has not been set");

        throw $r1;

     label1:
        $r2 = this.<weka.core.pmml.BuiltInString: weka.core.pmml.BuiltInString$StringFunc m_func>;

        $i0 = lengthof incoming;

        $z0 = virtualinvoke $r2.<weka.core.pmml.BuiltInString$StringFunc: boolean legalNumParams(int)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label2;

        $r3 = new java.lang.Exception;

        specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String)>("[BuiltInString] wrong number of parameters!");

        throw $r3;

     label2:
        args = specialinvoke this.<weka.core.pmml.BuiltInString: java.lang.Object[] setUpArgs(double[])>(incoming);

        $r4 = this.<weka.core.pmml.BuiltInString: weka.core.pmml.BuiltInString$StringFunc m_func>;

        result = virtualinvoke $r4.<weka.core.pmml.BuiltInString$StringFunc: java.lang.String eval(java.lang.Object[])>(args);

        $r5 = this.<weka.core.pmml.BuiltInString: weka.core.Attribute m_outputDef>;

        resultI#25 = virtualinvoke $r5.<weka.core.Attribute: int indexOfValue(java.lang.String)>(result);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(resultI#25);

        if resultI#25 >= 0 goto label4;

        $r6 = this.<weka.core.pmml.BuiltInString: weka.core.Attribute m_outputDef>;

        $z1 = virtualinvoke $r6.<weka.core.Attribute: boolean isString()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label3;

        $r7 = this.<weka.core.pmml.BuiltInString: weka.core.Attribute m_outputDef>;

        resultI#25 = virtualinvoke $r7.<weka.core.Attribute: int addStringValue(java.lang.String)>(result);

        goto label4;

     label3:
        $r8 = new java.lang.Exception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[BuiltInString] unable to find value ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(result);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in nominal result type!");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.Exception: void <init>(java.lang.String)>($r13);

        throw $r8;

     label4:
        $d0 = (double) resultI#25;

        return $d0;
    }

    private java.lang.Object[] setUpArgs(double[])
    {
        weka.core.pmml.BuiltInString this;
        double[] incoming;
        java.lang.Object[] args;
        weka.core.Attribute input;
        int $i0, $i1, i#18, $i2, $i3;
        java.util.ArrayList $r0;
        java.lang.Object $r1;
        double $d0, $d1;
        java.lang.String $r2;
        java.lang.Integer $r3;

        this := @this: weka.core.pmml.BuiltInString;

        incoming := @parameter0: double[];

        $i0 = lengthof incoming;

        args = newarray (java.lang.Object)[$i0];

        $r0 = this.<weka.core.pmml.BuiltInString: java.util.ArrayList m_parameterDefs>;

        $r1 = virtualinvoke $r0.<java.util.ArrayList: java.lang.Object get(int)>(0);

        input = (weka.core.Attribute) $r1;

        $d0 = incoming[0];

        $i1 = (int) $d0;

        $r2 = virtualinvoke input.<weka.core.Attribute: java.lang.String value(int)>($i1);

        args[0] = $r2;

        i#18 = 1;

     label1:
        $i2 = lengthof incoming;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#18);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#18 >= $i2 goto label2;

        $r3 = new java.lang.Integer;

        $d1 = incoming[i#18];

        $i3 = (int) $d1;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>($i3);

        args[i#18] = $r3;

        i#18 = i#18 + 1;

        goto label1;

     label2:
        return args;
    }


