    public boolean sort(int[], int, int)
    {
        kanzi.util.sort.InsertionSort this;
        int[] input;
        int blkptr, len, $i0, $i1, $i2, $i3;
        kanzi.ArrayComparator $r0, $r1;

        this := @this: kanzi.util.sort.InsertionSort;

        input := @parameter0: int[];

        blkptr := @parameter1: int;

        len := @parameter2: int;

        if blkptr < 0 goto label1;

        if len <= 0 goto label1;

        $i0 = blkptr + len;

        $i1 = lengthof input;

        if $i0 <= $i1 goto label2;

     label1:
        return 0;

     label2:
        if len != 1 goto label3;

        return 1;

     label3:
        $r0 = this.<kanzi.util.sort.InsertionSort: kanzi.ArrayComparator 'cmp'>;

        if $r0 != null goto label4;

        $i2 = blkptr + len;

        staticinvoke <kanzi.util.sort.InsertionSort: void sortNoComparator(int[],int,int)>(input, blkptr, $i2);

        goto label5;

     label4:
        $i3 = blkptr + len;

        $r1 = this.<kanzi.util.sort.InsertionSort: kanzi.ArrayComparator 'cmp'>;

        staticinvoke <kanzi.util.sort.InsertionSort: void sortWithComparator(int[],int,int,kanzi.ArrayComparator)>(input, blkptr, $i3, $r1);

     label5:
        return 1;
    }

    private static void sortNoComparator(int[], int, int)
    {
        int[] array;
        int blkptr, end, tmp, a1, a2, a3, val, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i#92, j#99, $i10, $i11, $i12, $i13;

        array := @parameter0: int[];

        blkptr := @parameter1: int;

        end := @parameter2: int;

        $i0 = blkptr + 1;

        if end != $i0 goto label02;

        $i1 = array[blkptr];

        $i2 = array[end];

        if $i1 <= $i2 goto label01;

        tmp = array[blkptr];

        $i3 = array[end];

        array[blkptr] = $i3;

        array[end] = tmp;

     label01:
        return;

     label02:
        $i4 = blkptr + 2;

        if end != $i4 goto label09;

        a1 = array[blkptr];

        $i5 = blkptr + 1;

        a2 = array[$i5];

        a3 = array[end];

        if a1 > a2 goto label05;

        if a2 > a3 goto label03;

        return;

     label03:
        if a3 > a1 goto label04;

        array[blkptr] = a3;

        $i6 = blkptr + 1;

        array[$i6] = a1;

        array[end] = a2;

        return;

     label04:
        $i7 = blkptr + 1;

        array[$i7] = a3;

        array[end] = a2;

        goto label08;

     label05:
        if a1 > a3 goto label06;

        array[blkptr] = a2;

        $i8 = blkptr + 1;

        array[$i8] = a1;

        return;

     label06:
        if a3 > a2 goto label07;

        array[blkptr] = a3;

        array[end] = a1;

        return;

     label07:
        array[blkptr] = a2;

        $i9 = blkptr + 1;

        array[$i9] = a3;

        array[end] = a1;

     label08:
        return;

     label09:
        i#92 = blkptr;

     label10:
        if i#92 >= end goto label13;

        val = array[i#92];

        j#99 = i#92;

     label11:
        if j#99 <= blkptr goto label12;

        $i10 = j#99 - 1;

        $i11 = array[$i10];

        if $i11 <= val goto label12;

        $i12 = j#99 - 1;

        $i13 = array[$i12];

        array[j#99] = $i13;

        j#99 = j#99 + -1;

        goto label11;

     label12:
        array[j#99] = val;

        i#92 = i#92 + 1;

        goto label10;

     label13:
        return;
    }

    private static void sortWithComparator(int[], int, int, kanzi.ArrayComparator)
    {
        int[] array;
        int blkptr, end, tmp, a1, a2, a3, val, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i#104, j#111, $i16, $i17, $i18, $i19, $i20;
        kanzi.ArrayComparator comp;

        array := @parameter0: int[];

        blkptr := @parameter1: int;

        end := @parameter2: int;

        comp := @parameter3: kanzi.ArrayComparator;

        $i0 = blkptr + 1;

        if end != $i0 goto label02;

        $i1 = array[blkptr];

        $i2 = array[end];

        $i3 = interfaceinvoke comp.<kanzi.ArrayComparator: int compare(int,int)>($i1, $i2);

        if $i3 <= 0 goto label01;

        tmp = array[blkptr];

        $i4 = array[end];

        array[blkptr] = $i4;

        array[end] = tmp;

     label01:
        return;

     label02:
        $i5 = blkptr + 2;

        if end != $i5 goto label09;

        a1 = array[blkptr];

        $i6 = blkptr + 1;

        a2 = array[$i6];

        a3 = array[end];

        $i7 = interfaceinvoke comp.<kanzi.ArrayComparator: int compare(int,int)>(a1, a2);

        if $i7 > 0 goto label05;

        $i8 = interfaceinvoke comp.<kanzi.ArrayComparator: int compare(int,int)>(a2, a3);

        if $i8 > 0 goto label03;

        return;

     label03:
        $i9 = interfaceinvoke comp.<kanzi.ArrayComparator: int compare(int,int)>(a3, a1);

        if $i9 > 0 goto label04;

        array[blkptr] = a3;

        $i10 = blkptr + 1;

        array[$i10] = a1;

        array[end] = a2;

        return;

     label04:
        $i11 = blkptr + 1;

        array[$i11] = a3;

        array[end] = a2;

        goto label08;

     label05:
        $i12 = interfaceinvoke comp.<kanzi.ArrayComparator: int compare(int,int)>(a1, a3);

        if $i12 > 0 goto label06;

        array[blkptr] = a2;

        $i13 = blkptr + 1;

        array[$i13] = a1;

        return;

     label06:
        $i14 = interfaceinvoke comp.<kanzi.ArrayComparator: int compare(int,int)>(a3, a2);

        if $i14 > 0 goto label07;

        array[blkptr] = a3;

        array[end] = a1;

        return;

     label07:
        array[blkptr] = a2;

        $i15 = blkptr + 1;

        array[$i15] = a3;

        array[end] = a1;

     label08:
        return;

     label09:
        i#104 = blkptr;

     label10:
        if i#104 >= end goto label13;

        val = array[i#104];

        j#111 = i#104;

     label11:
        if j#111 <= blkptr goto label12;

        $i16 = j#111 - 1;

        $i17 = array[$i16];

        $i18 = interfaceinvoke comp.<kanzi.ArrayComparator: int compare(int,int)>($i17, val);

        if $i18 <= 0 goto label12;

        $i19 = j#111 - 1;

        $i20 = array[$i19];

        array[j#111] = $i20;

        j#111 = j#111 + -1;

        goto label11;

     label12:
        array[j#111] = val;

        i#104 = i#104 + 1;

        goto label10;

     label13:
        return;
    }

    public void <init>()
    {
        kanzi.util.sort.InsertionSort this;

        this := @this: kanzi.util.sort.InsertionSort;

        specialinvoke this.<kanzi.util.sort.InsertionSort: void <init>(kanzi.ArrayComparator)>(null);

        return;
    }

    public void <init>(kanzi.ArrayComparator)
    {
        kanzi.util.sort.InsertionSort this;
        kanzi.ArrayComparator 'cmp';

        this := @this: kanzi.util.sort.InsertionSort;

        'cmp' := @parameter0: kanzi.ArrayComparator;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<kanzi.util.sort.InsertionSort: kanzi.ArrayComparator 'cmp'> = 'cmp';

        return;
    }


