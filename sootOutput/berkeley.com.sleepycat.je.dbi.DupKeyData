    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "berkeley/com/sleepycat/je/dbi/DupKeyData";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <berkeley.com.sleepycat.je.dbi.DupKeyData: boolean $assertionsDisabled> = $z1;

        return;
    }

    public static byte[] replaceData(byte[], byte[])
    {
        byte[] twoPartKey, newData, $r0;
        int origKeySize, keySize, $i0, $i1, $i2, $i3, $i4;

        twoPartKey := @parameter0: byte[];

        newData := @parameter1: byte[];

        $i0 = lengthof twoPartKey;

        $i1 = $i0 - 1;

        origKeySize = staticinvoke <berkeley.com.sleepycat.util.PackedInteger: int readReverseInt(byte[],int)>(twoPartKey, $i1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize);

        if origKeySize != -1 goto label1;

        $i2 = lengthof twoPartKey;

        $i3 = $i2 - 1;

        goto label2;

     label1:
        $i3 = origKeySize;

     label2:
        keySize = $i3;

        $i4 = lengthof newData;

        $r0 = staticinvoke <berkeley.com.sleepycat.je.dbi.DupKeyData: byte[] combine(byte[],int,int,byte[],int,int)>(twoPartKey, 0, keySize, newData, 0, $i4);

        return $r0;
    }

    public static byte[] combine(byte[], int, int, byte[], int, int)
    {
        byte[] key, data, buf;
        int keyOff, keySize, dataOff, dataSize, keySizeLen, nextOff, $i0, $i1, $i2, $i3;
        boolean $z0;
        java.lang.AssertionError $r0;

        key := @parameter0: byte[];

        keyOff := @parameter1: int;

        keySize := @parameter2: int;

        data := @parameter3: byte[];

        dataOff := @parameter4: int;

        dataSize := @parameter5: int;

        keySizeLen = staticinvoke <berkeley.com.sleepycat.util.PackedInteger: int getWriteIntLength(int)>(keySize);

        $i0 = keySizeLen + keySize;

        $i1 = $i0 + dataSize;

        buf = newarray (byte)[$i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(key, keyOff, buf, 0, keySize);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(data, dataOff, buf, keySize, dataSize);

        $i2 = keySize + dataSize;

        nextOff = staticinvoke <berkeley.com.sleepycat.util.PackedInteger: int writeReverseInt(byte[],int,int)>(buf, $i2, keySize);

        $z0 = <berkeley.com.sleepycat.je.dbi.DupKeyData: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $i3 = lengthof buf;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(nextOff);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if nextOff == $i3 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        return buf;
    }

    public static int getKeyLength(byte[], int, int)
    {
        byte[] buf;
        int off, len, keyLen, $i0, $i1, $i2, $i3;
        boolean $z0, $z1, $z2;
        java.lang.AssertionError $r0, $r1, $r2;

        buf := @parameter0: byte[];

        off := @parameter1: int;

        len := @parameter2: int;

        $z0 = <berkeley.com.sleepycat.je.dbi.DupKeyData: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $i0 = lengthof buf;

        $i1 = off + len;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i0 >= $i1 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $i2 = off + len;

        $i3 = $i2 - 1;

        keyLen = staticinvoke <berkeley.com.sleepycat.util.PackedInteger: int readReverseInt(byte[],int)>(buf, $i3);

        $z1 = <berkeley.com.sleepycat.je.dbi.DupKeyData: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(keyLen);

        if keyLen != -1 goto label2;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label2:
        $z2 = <berkeley.com.sleepycat.je.dbi.DupKeyData: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(keyLen);

        if keyLen < 0 goto label3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(keyLen);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len);

        if keyLen <= len goto label4;

     label3:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label4:
        return keyLen;
    }

    public static byte[] getKey(byte[], int, int)
    {
        byte[] buf, key;
        int off, len, keyLen, $i0, $i1, $i2, $i3;
        boolean $z0, $z1, $z2;
        java.lang.AssertionError $r0, $r1, $r2;

        buf := @parameter0: byte[];

        off := @parameter1: int;

        len := @parameter2: int;

        $z0 = <berkeley.com.sleepycat.je.dbi.DupKeyData: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $i0 = lengthof buf;

        $i1 = off + len;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i0 >= $i1 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $i2 = off + len;

        $i3 = $i2 - 1;

        keyLen = staticinvoke <berkeley.com.sleepycat.util.PackedInteger: int readReverseInt(byte[],int)>(buf, $i3);

        $z1 = <berkeley.com.sleepycat.je.dbi.DupKeyData: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(keyLen);

        if keyLen != -1 goto label2;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label2:
        $z2 = <berkeley.com.sleepycat.je.dbi.DupKeyData: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(keyLen);

        if keyLen < 0 goto label3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(keyLen);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len);

        if keyLen <= len goto label4;

     label3:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label4:
        key = newarray (byte)[keyLen];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(buf, off, key, 0, keyLen);

        return key;
    }

    public static byte[] combine(byte[], byte[])
    {
        byte[] key, data, $r0;
        int $i0, $i1;

        key := @parameter0: byte[];

        data := @parameter1: byte[];

        $i0 = lengthof key;

        $i1 = lengthof data;

        $r0 = staticinvoke <berkeley.com.sleepycat.je.dbi.DupKeyData: byte[] combine(byte[],int,int,byte[],int,int)>(key, 0, $i0, data, 0, $i1);

        return $r0;
    }

    public static byte[] getData(byte[], int, int)
    {
        byte[] buf, data;
        int off, len, keyLen, keyLenSize, dataLen, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.AssertionError $r0, $r1, $r2, $r3, $r4;

        buf := @parameter0: byte[];

        off := @parameter1: int;

        len := @parameter2: int;

        $z0 = <berkeley.com.sleepycat.je.dbi.DupKeyData: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $i0 = lengthof buf;

        $i1 = off + len;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i0 >= $i1 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $i2 = off + len;

        $i3 = $i2 - 1;

        keyLen = staticinvoke <berkeley.com.sleepycat.util.PackedInteger: int readReverseInt(byte[],int)>(buf, $i3);

        $z1 = <berkeley.com.sleepycat.je.dbi.DupKeyData: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(keyLen);

        if keyLen != -1 goto label2;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label2:
        $z2 = <berkeley.com.sleepycat.je.dbi.DupKeyData: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(keyLen);

        if keyLen < 0 goto label3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(keyLen);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len);

        if keyLen <= len goto label4;

     label3:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label4:
        $i4 = off + len;

        $i5 = $i4 - 1;

        keyLenSize = staticinvoke <berkeley.com.sleepycat.util.PackedInteger: int getReadIntLength(byte[],int)>(buf, $i5);

        $i6 = len - keyLen;

        dataLen = $i6 - keyLenSize;

        $z3 = <berkeley.com.sleepycat.je.dbi.DupKeyData: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dataLen);

        if dataLen > 0 goto label5;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label5:
        $z4 = <berkeley.com.sleepycat.je.dbi.DupKeyData: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label6;

        $i7 = keyLen + dataLen;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len);

        if $i7 <= len goto label6;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label6:
        data = newarray (byte)[dataLen];

        $i8 = off + keyLen;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(buf, $i8, data, 0, dataLen);

        return data;
    }

    public static void split(berkeley.com.sleepycat.je.DatabaseEntry, berkeley.com.sleepycat.je.DatabaseEntry, berkeley.com.sleepycat.je.DatabaseEntry)
    {
        berkeley.com.sleepycat.je.DatabaseEntry twoPartKey, paramKey, paramData;
        boolean $z0;
        int $i0, $i1;
        java.lang.AssertionError $r0;
        byte[] $r1;

        twoPartKey := @parameter0: berkeley.com.sleepycat.je.DatabaseEntry;

        paramKey := @parameter1: berkeley.com.sleepycat.je.DatabaseEntry;

        paramData := @parameter2: berkeley.com.sleepycat.je.DatabaseEntry;

        $z0 = <berkeley.com.sleepycat.je.dbi.DupKeyData: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $i0 = virtualinvoke twoPartKey.<berkeley.com.sleepycat.je.DatabaseEntry: int getOffset()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 == 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $r1 = virtualinvoke twoPartKey.<berkeley.com.sleepycat.je.DatabaseEntry: byte[] getData()>();

        $i1 = virtualinvoke twoPartKey.<berkeley.com.sleepycat.je.DatabaseEntry: int getSize()>();

        staticinvoke <berkeley.com.sleepycat.je.dbi.DupKeyData: void split(byte[],int,berkeley.com.sleepycat.je.DatabaseEntry,berkeley.com.sleepycat.je.DatabaseEntry)>($r1, $i1, paramKey, paramData);

        return;
    }

    public static void split(byte[], int, berkeley.com.sleepycat.je.DatabaseEntry, berkeley.com.sleepycat.je.DatabaseEntry)
    {
        byte[] twoPartKey, keyBuf, dataBuf;
        int twoPartKeySize, keySize, keySizeLen, dataSize, $i0, $i1, $i2;
        berkeley.com.sleepycat.je.DatabaseEntry paramKey, paramData;
        boolean $z0, $z1, $z2;
        java.lang.AssertionError $r0;

        twoPartKey := @parameter0: byte[];

        twoPartKeySize := @parameter1: int;

        paramKey := @parameter2: berkeley.com.sleepycat.je.DatabaseEntry;

        paramData := @parameter3: berkeley.com.sleepycat.je.DatabaseEntry;

        $i0 = twoPartKeySize - 1;

        keySize = staticinvoke <berkeley.com.sleepycat.util.PackedInteger: int readReverseInt(byte[],int)>(twoPartKey, $i0);

        $z0 = <berkeley.com.sleepycat.je.dbi.DupKeyData: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(keySize);

        if keySize != -1 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(paramKey);

        if paramKey == null goto label4;

        keyBuf = newarray (byte)[keySize];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(twoPartKey, 0, keyBuf, 0, keySize);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(keySize);

        if keySize == 0 goto label2;

        $z1 = virtualinvoke paramKey.<berkeley.com.sleepycat.je.DatabaseEntry: boolean getPartial()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label3;

     label2:
        staticinvoke <berkeley.com.sleepycat.je.tree.LN: void setEntry(berkeley.com.sleepycat.je.DatabaseEntry,byte[])>(paramKey, keyBuf);

        goto label4;

     label3:
        virtualinvoke paramKey.<berkeley.com.sleepycat.je.DatabaseEntry: void setData(byte[],int,int)>(keyBuf, 0, keySize);

     label4:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(paramData);

        if paramData == null goto label7;

        $i1 = twoPartKeySize - 1;

        keySizeLen = staticinvoke <berkeley.com.sleepycat.util.PackedInteger: int getReadIntLength(byte[],int)>(twoPartKey, $i1);

        $i2 = twoPartKeySize - keySize;

        dataSize = $i2 - keySizeLen;

        dataBuf = newarray (byte)[dataSize];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(twoPartKey, keySize, dataBuf, 0, dataSize);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dataSize);

        if dataSize == 0 goto label5;

        $z2 = virtualinvoke paramData.<berkeley.com.sleepycat.je.DatabaseEntry: boolean getPartial()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label6;

     label5:
        staticinvoke <berkeley.com.sleepycat.je.tree.LN: void setEntry(berkeley.com.sleepycat.je.DatabaseEntry,byte[])>(paramData, dataBuf);

        goto label7;

     label6:
        virtualinvoke paramData.<berkeley.com.sleepycat.je.DatabaseEntry: void setData(byte[],int,int)>(dataBuf, 0, dataSize);

     label7:
        return;
    }

    public static berkeley.com.sleepycat.je.DatabaseEntry removeData(byte[])
    {
        byte[] twoPartKey, $r2;
        int keySize, $i0, $i1;
        boolean $z0;
        java.lang.AssertionError $r0;
        berkeley.com.sleepycat.je.DatabaseEntry $r1;

        twoPartKey := @parameter0: byte[];

        $i0 = lengthof twoPartKey;

        $i1 = $i0 - 1;

        keySize = staticinvoke <berkeley.com.sleepycat.util.PackedInteger: int readReverseInt(byte[],int)>(twoPartKey, $i1);

        $z0 = <berkeley.com.sleepycat.je.dbi.DupKeyData: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(keySize);

        if keySize != -1 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $r1 = new berkeley.com.sleepycat.je.DatabaseEntry;

        $r2 = staticinvoke <berkeley.com.sleepycat.je.dbi.DupKeyData: byte[] makePrefixKey(byte[],int,int)>(twoPartKey, 0, keySize);

        specialinvoke $r1.<berkeley.com.sleepycat.je.DatabaseEntry: void <init>(byte[])>($r2);

        return $r1;
    }

    public static byte[] makePrefixKey(byte[], int, int)
    {
        byte[] key, buf;
        int keyOff, keySize, $i0;

        key := @parameter0: byte[];

        keyOff := @parameter1: int;

        keySize := @parameter2: int;

        $i0 = keySize + 1;

        buf = newarray (byte)[$i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(key, 0, buf, 0, keySize);

        buf[keySize] = -1;

        return buf;
    }

    public static int compareMainKey(byte[], byte[], java.util.Comparator)
    {
        byte[] keyBytes1, keyBytes2;
        java.util.Comparator btreeComparator;
        int origKeySize2, keySize2, $i0, $i1, $i2, $i3, $i4;

        keyBytes1 := @parameter0: byte[];

        keyBytes2 := @parameter1: byte[];

        btreeComparator := @parameter2: java.util.Comparator;

        $i0 = lengthof keyBytes2;

        $i1 = $i0 - 1;

        origKeySize2 = staticinvoke <berkeley.com.sleepycat.util.PackedInteger: int readReverseInt(byte[],int)>(keyBytes2, $i1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize2);

        if origKeySize2 != -1 goto label1;

        $i2 = lengthof keyBytes2;

        $i3 = $i2 - 1;

        goto label2;

     label1:
        $i3 = origKeySize2;

     label2:
        keySize2 = $i3;

        $i4 = staticinvoke <berkeley.com.sleepycat.je.dbi.DupKeyData: int compareMainKey(byte[],byte[],int,int,java.util.Comparator)>(keyBytes1, keyBytes2, 0, keySize2, btreeComparator);

        return $i4;
    }

    public static int compareMainKey(byte[], byte[], int, int, java.util.Comparator)
    {
        byte[] keyBytes1, keyBytes2, key1, key2;
        int keyOff2, keySize2, origKeySize1, keySize1, $i0, $i1, $i2, $i3, keyCmp#20;
        java.util.Comparator btreeComparator;

        keyBytes1 := @parameter0: byte[];

        keyBytes2 := @parameter1: byte[];

        keyOff2 := @parameter2: int;

        keySize2 := @parameter3: int;

        btreeComparator := @parameter4: java.util.Comparator;

        $i0 = lengthof keyBytes1;

        $i1 = $i0 - 1;

        origKeySize1 = staticinvoke <berkeley.com.sleepycat.util.PackedInteger: int readReverseInt(byte[],int)>(keyBytes1, $i1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize1);

        if origKeySize1 != -1 goto label1;

        $i2 = lengthof keyBytes1;

        $i3 = $i2 - 1;

        goto label2;

     label1:
        $i3 = origKeySize1;

     label2:
        keySize1 = $i3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(btreeComparator);

        if btreeComparator != null goto label3;

        keyCmp#20 = staticinvoke <berkeley.com.sleepycat.je.tree.Key: int compareUnsignedBytes(byte[],int,int,byte[],int,int)>(keyBytes1, 0, keySize1, keyBytes2, keyOff2, keySize2);

        goto label4;

     label3:
        key1 = newarray (byte)[keySize1];

        key2 = newarray (byte)[keySize2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(keyBytes1, 0, key1, 0, keySize1);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(keyBytes2, keyOff2, key2, 0, keySize2);

        keyCmp#20 = interfaceinvoke btreeComparator.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(key1, key2);

     label4:
        return keyCmp#20;
    }

    public static berkeley.com.sleepycat.je.DatabaseEntry combine(berkeley.com.sleepycat.je.DatabaseEntry, berkeley.com.sleepycat.je.DatabaseEntry)
    {
        berkeley.com.sleepycat.je.DatabaseEntry paramKey, paramData, $r2;
        byte[] buf, $r0, $r1;
        int $i0, $i1, $i2, $i3;

        paramKey := @parameter0: berkeley.com.sleepycat.je.DatabaseEntry;

        paramData := @parameter1: berkeley.com.sleepycat.je.DatabaseEntry;

        $r0 = virtualinvoke paramKey.<berkeley.com.sleepycat.je.DatabaseEntry: byte[] getData()>();

        $i0 = virtualinvoke paramKey.<berkeley.com.sleepycat.je.DatabaseEntry: int getOffset()>();

        $i1 = virtualinvoke paramKey.<berkeley.com.sleepycat.je.DatabaseEntry: int getSize()>();

        $r1 = virtualinvoke paramData.<berkeley.com.sleepycat.je.DatabaseEntry: byte[] getData()>();

        $i2 = virtualinvoke paramData.<berkeley.com.sleepycat.je.DatabaseEntry: int getOffset()>();

        $i3 = virtualinvoke paramData.<berkeley.com.sleepycat.je.DatabaseEntry: int getSize()>();

        buf = staticinvoke <berkeley.com.sleepycat.je.dbi.DupKeyData: byte[] combine(byte[],int,int,byte[],int,int)>($r0, $i0, $i1, $r1, $i2, $i3);

        $r2 = new berkeley.com.sleepycat.je.DatabaseEntry;

        specialinvoke $r2.<berkeley.com.sleepycat.je.DatabaseEntry: void <init>(byte[])>(buf);

        return $r2;
    }


