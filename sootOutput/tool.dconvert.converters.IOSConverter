    public void <init>()
    {
        tool.dconvert.converters.IOSConverter this;

        this := @this: tool.dconvert.converters.IOSConverter;

        specialinvoke this.<tool.dconvert.converters.APlatformConverter: void <init>()>();

        return;
    }

    public java.lang.String getConverterName()
    {
        tool.dconvert.converters.IOSConverter this;

        this := @this: tool.dconvert.converters.IOSConverter;

        return "ios-converter";
    }

    public java.util.List usedOutputDensities(tool.dconvert.arg.Arguments)
    {
        tool.dconvert.converters.IOSConverter this;
        tool.dconvert.arg.Arguments arguments;
        java.util.List $r0;

        this := @this: tool.dconvert.converters.IOSConverter;

        arguments := @parameter0: tool.dconvert.arg.Arguments;

        $r0 = staticinvoke <tool.dconvert.converters.IOSConverter: java.util.List getIosDescriptors()>();

        return $r0;
    }

    public java.io.File createMainSubFolder(java.io.File, java.lang.String, tool.dconvert.arg.Arguments)
    {
        tool.dconvert.converters.IOSConverter this;
        java.lang.String targetImageFileName, $r2, $r7, $r8, $r11;
        tool.dconvert.arg.Arguments arguments;
        java.io.File destinationFolder#1, $r1, $r3, $r9, $r10, $r12;
        java.util.Set $r0;
        int $i0;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r4, $r5, $r6;

        this := @this: tool.dconvert.converters.IOSConverter;

        destinationFolder#1 := @parameter0: java.io.File;

        targetImageFileName := @parameter1: java.lang.String;

        arguments := @parameter2: tool.dconvert.arg.Arguments;

        $r0 = arguments.<tool.dconvert.arg.Arguments: java.util.Set platform>;

        $i0 = interfaceinvoke $r0.<java.util.Set: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 1 goto label1;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>(destinationFolder#1, "ios");

        $r2 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $z0 = arguments.<tool.dconvert.arg.Arguments: boolean dryRun>;

        destinationFolder#1 = staticinvoke <tool.dconvert.util.MiscUtil: java.io.File createAndCheckFolder(java.lang.String,boolean)>($r2, $z0);

     label1:
        $z1 = arguments.<tool.dconvert.arg.Arguments: boolean iosCreateImagesetFolders>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        $r3 = new java.io.File;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(targetImageFileName);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".imageset");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>(destinationFolder#1, $r7);

        $r8 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>();

        $z2 = arguments.<tool.dconvert.arg.Arguments: boolean dryRun>;

        $r9 = staticinvoke <tool.dconvert.util.MiscUtil: java.io.File createAndCheckFolder(java.lang.String,boolean)>($r8, $z2);

        return $r9;

     label2:
        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>(destinationFolder#1, "AssetCatalog");

        $r11 = virtualinvoke $r10.<java.io.File: java.lang.String getAbsolutePath()>();

        $z3 = arguments.<tool.dconvert.arg.Arguments: boolean dryRun>;

        $r12 = staticinvoke <tool.dconvert.util.MiscUtil: java.io.File createAndCheckFolder(java.lang.String,boolean)>($r11, $z3);

        return $r12;
    }

    public void onPreExecute(java.io.File, java.lang.String, java.util.List, tool.dconvert.arg.ImageType, tool.dconvert.arg.Arguments) throws java.lang.Exception
    {
        tool.dconvert.converters.IOSConverter this;
        java.io.File dstFolder;
        java.lang.String targetFileName;
        java.util.List densityDescriptions, $r1;
        tool.dconvert.arg.ImageType imageType;
        tool.dconvert.arg.Arguments arguments;
        boolean $z0, $z1;
        tool.dconvert.arg.EOutputCompressionMode $r0;

        this := @this: tool.dconvert.converters.IOSConverter;

        dstFolder := @parameter0: java.io.File;

        targetFileName := @parameter1: java.lang.String;

        densityDescriptions := @parameter2: java.util.List;

        imageType := @parameter3: tool.dconvert.arg.ImageType;

        arguments := @parameter4: tool.dconvert.arg.Arguments;

        $z0 = arguments.<tool.dconvert.arg.Arguments: boolean dryRun>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = arguments.<tool.dconvert.arg.Arguments: boolean iosCreateImagesetFolders>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label1;

        $r0 = arguments.<tool.dconvert.arg.Arguments: tool.dconvert.arg.EOutputCompressionMode outputCompressionMode>;

        $r1 = staticinvoke <tool.dconvert.arg.Arguments: java.util.List getOutCompressionForType(tool.dconvert.arg.EOutputCompressionMode,tool.dconvert.arg.ImageType)>($r0, imageType);

        specialinvoke this.<tool.dconvert.converters.IOSConverter: void writeContentsJson(java.io.File,java.lang.String,java.util.List,java.util.List)>(dstFolder, targetFileName, densityDescriptions, $r1);

     label1:
        return;
    }

    public volatile java.io.File createFolderForOutputFile(java.io.File, tool.dconvert.converters.descriptors.DensityDescriptor, java.awt.Dimension, java.lang.String, tool.dconvert.arg.Arguments)
    {
        tool.dconvert.converters.IOSConverter this;
        java.io.File l1, $r1;
        tool.dconvert.converters.descriptors.DensityDescriptor l2;
        java.awt.Dimension l3;
        java.lang.String l4;
        tool.dconvert.arg.Arguments l5;
        tool.dconvert.converters.descriptors.PostfixDescriptor $r0;

        this := @this: tool.dconvert.converters.IOSConverter;

        l1 := @parameter0: java.io.File;

        l2 := @parameter1: tool.dconvert.converters.descriptors.DensityDescriptor;

        l3 := @parameter2: java.awt.Dimension;

        l4 := @parameter3: java.lang.String;

        l5 := @parameter4: tool.dconvert.arg.Arguments;

        $r0 = (tool.dconvert.converters.descriptors.PostfixDescriptor) l2;

        $r1 = virtualinvoke this.<tool.dconvert.converters.IOSConverter: java.io.File createFolderForOutputFile(java.io.File,tool.dconvert.converters.descriptors.PostfixDescriptor,java.awt.Dimension,java.lang.String,tool.dconvert.arg.Arguments)>(l1, $r0, l3, l4, l5);

        return $r1;
    }

    public volatile java.lang.String createDestinationFileNameWithoutExtension(tool.dconvert.converters.descriptors.DensityDescriptor, java.awt.Dimension, java.lang.String, tool.dconvert.arg.Arguments)
    {
        tool.dconvert.converters.IOSConverter this;
        tool.dconvert.converters.descriptors.DensityDescriptor l1;
        java.awt.Dimension l2;
        java.lang.String l3, $r1;
        tool.dconvert.arg.Arguments l4;
        tool.dconvert.converters.descriptors.PostfixDescriptor $r0;

        this := @this: tool.dconvert.converters.IOSConverter;

        l1 := @parameter0: tool.dconvert.converters.descriptors.DensityDescriptor;

        l2 := @parameter1: java.awt.Dimension;

        l3 := @parameter2: java.lang.String;

        l4 := @parameter3: tool.dconvert.arg.Arguments;

        $r0 = (tool.dconvert.converters.descriptors.PostfixDescriptor) l1;

        $r1 = virtualinvoke this.<tool.dconvert.converters.IOSConverter: java.lang.String createDestinationFileNameWithoutExtension(tool.dconvert.converters.descriptors.PostfixDescriptor,java.awt.Dimension,java.lang.String,tool.dconvert.arg.Arguments)>($r0, l2, l3, l4);

        return $r1;
    }

    public void onPostExecute(tool.dconvert.arg.Arguments)
    {
        tool.dconvert.converters.IOSConverter this;
        tool.dconvert.arg.Arguments arguments;

        this := @this: tool.dconvert.converters.IOSConverter;

        arguments := @parameter0: tool.dconvert.arg.Arguments;

        return;
    }

    public static java.util.List getIosDescriptors()
    {
        java.util.ArrayList list, $r0;
        tool.dconvert.converters.descriptors.PostfixDescriptor $r1, $r2, $r3;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        list = $r0;

        $r1 = new tool.dconvert.converters.descriptors.PostfixDescriptor;

        specialinvoke $r1.<tool.dconvert.converters.descriptors.PostfixDescriptor: void <init>(float,java.lang.String,java.lang.String)>(1.0F, "1x", "");

        interfaceinvoke list.<java.util.List: boolean add(java.lang.Object)>($r1);

        $r2 = new tool.dconvert.converters.descriptors.PostfixDescriptor;

        specialinvoke $r2.<tool.dconvert.converters.descriptors.PostfixDescriptor: void <init>(float,java.lang.String,java.lang.String)>(2.0F, "2x", "@2x");

        interfaceinvoke list.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r3 = new tool.dconvert.converters.descriptors.PostfixDescriptor;

        specialinvoke $r3.<tool.dconvert.converters.descriptors.PostfixDescriptor: void <init>(float,java.lang.String,java.lang.String)>(3.0F, "3x", "@3x");

        interfaceinvoke list.<java.util.List: boolean add(java.lang.Object)>($r3);

        return list;
    }

    public java.lang.String createDestinationFileNameWithoutExtension(tool.dconvert.converters.descriptors.PostfixDescriptor, java.awt.Dimension, java.lang.String, tool.dconvert.arg.Arguments)
    {
        tool.dconvert.converters.IOSConverter this;
        tool.dconvert.converters.descriptors.PostfixDescriptor density;
        java.awt.Dimension dimension;
        java.lang.String targetFileName, $r2, $r4;
        tool.dconvert.arg.Arguments arguments;
        java.lang.StringBuilder $r0, $r1, $r3;

        this := @this: tool.dconvert.converters.IOSConverter;

        density := @parameter0: tool.dconvert.converters.descriptors.PostfixDescriptor;

        dimension := @parameter1: java.awt.Dimension;

        targetFileName := @parameter2: java.lang.String;

        arguments := @parameter3: tool.dconvert.arg.Arguments;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(targetFileName);

        $r2 = density.<tool.dconvert.converters.descriptors.PostfixDescriptor: java.lang.String postFix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public java.io.File createFolderForOutputFile(java.io.File, tool.dconvert.converters.descriptors.PostfixDescriptor, java.awt.Dimension, java.lang.String, tool.dconvert.arg.Arguments)
    {
        tool.dconvert.converters.IOSConverter this;
        java.io.File mainSubFolder;
        tool.dconvert.converters.descriptors.PostfixDescriptor density;
        java.awt.Dimension dimension;
        java.lang.String targetFileName;
        tool.dconvert.arg.Arguments arguments;

        this := @this: tool.dconvert.converters.IOSConverter;

        mainSubFolder := @parameter0: java.io.File;

        density := @parameter1: tool.dconvert.converters.descriptors.PostfixDescriptor;

        dimension := @parameter2: java.awt.Dimension;

        targetFileName := @parameter3: java.lang.String;

        arguments := @parameter4: tool.dconvert.arg.Arguments;

        return mainSubFolder;
    }

    private void writeContentsJson(java.io.File, java.lang.String, java.util.List, java.util.List) throws java.io.IOException
    {
        tool.dconvert.converters.IOSConverter this;
        java.io.File dstFolder, contentJson, $r0;
        java.lang.String targetFileName, $r2;
        java.util.List iosDensityDescriptions, compressions;
        java.io.PrintWriter out, $r1;
        java.lang.Throwable l9, l10, l7#15, $r3, l8#25, $r4, l8#30, $r5, $r6;
        boolean $z0;

        this := @this: tool.dconvert.converters.IOSConverter;

        dstFolder := @parameter0: java.io.File;

        targetFileName := @parameter1: java.lang.String;

        iosDensityDescriptions := @parameter2: java.util.List;

        compressions := @parameter3: java.util.List;

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>(dstFolder, "Contents.json");

        contentJson = $r0;

        $z0 = virtualinvoke contentJson.<java.io.File: boolean exists()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label01;

        virtualinvoke contentJson.<java.io.File: boolean delete()>();

     label01:
        virtualinvoke contentJson.<java.io.File: boolean createNewFile()>();

        $r1 = new java.io.PrintWriter;

        specialinvoke $r1.<java.io.PrintWriter: void <init>(java.io.File)>(contentJson);

        out = $r1;

        l7#15 = null;

     label02:
        $r2 = specialinvoke this.<tool.dconvert.converters.IOSConverter: java.lang.String createContentsJson(java.lang.String,java.util.List,java.util.List)>(targetFileName, iosDensityDescriptions, compressions);

        virtualinvoke out.<java.io.PrintWriter: void println(java.lang.String)>($r2);

     label03:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(out);

        if out == null goto label17;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l7#15);

        if l7#15 == null goto label07;

     label04:
        virtualinvoke out.<java.io.PrintWriter: void close()>();

     label05:
        goto label17;

     label06:
        $r3 := @caughtexception;

        l8#25 = $r3;

        virtualinvoke l7#15.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l8#25);

        goto label17;

     label07:
        virtualinvoke out.<java.io.PrintWriter: void close()>();

        goto label17;

     label08:
        $r4 := @caughtexception;

     label09:
        l8#30 = $r4;

        l7#15 = l8#30;

        throw l8#30;

     label10:
        $r5 := @caughtexception;

        l9 = $r5;

     label11:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(out);

        if out == null goto label16;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l7#15);

        if l7#15 == null goto label15;

     label12:
        virtualinvoke out.<java.io.PrintWriter: void close()>();

     label13:
        goto label16;

     label14:
        $r6 := @caughtexception;

        l10 = $r6;

        virtualinvoke l7#15.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l10);

        goto label16;

     label15:
        virtualinvoke out.<java.io.PrintWriter: void close()>();

     label16:
        throw l9;

     label17:
        return;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label09 to label11 with label10;
    }

    private java.lang.String createContentsJson(java.lang.String, java.util.List, java.util.List)
    {
        tool.dconvert.converters.IOSConverter this;
        java.lang.String targetFileName, $r6, $r9, $r10, $r13, $r16, $r19;
        java.util.List iosDensityDescriptions, compressions;
        java.lang.StringBuilder sb, $r0, $r3, $r4, $r5, $r7, $r8, $r11, $r12, $r14, $r15;
        java.util.Iterator l5, l7;
        tool.dconvert.arg.ImageType$ECompression compression;
        tool.dconvert.converters.descriptors.PostfixDescriptor densityDescription;
        boolean $z0, $z1;
        java.lang.Object $r1, $r2;
        int $i0, $i1;

        this := @this: tool.dconvert.converters.IOSConverter;

        targetFileName := @parameter0: java.lang.String;

        iosDensityDescriptions := @parameter1: java.util.List;

        compressions := @parameter2: java.util.List;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("{\n\t\"images\": [");

        sb = $r0;

        l5 = interfaceinvoke compressions.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label4;

        $r1 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        compression = (tool.dconvert.arg.ImageType$ECompression) $r1;

        l7 = interfaceinvoke iosDensityDescriptions.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke l7.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label3;

        $r2 = interfaceinvoke l7.<java.util.Iterator: java.lang.Object next()>();

        densityDescription = (tool.dconvert.converters.descriptors.PostfixDescriptor) $r2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\t\t{\n\t\t\t\"filename\": \"");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(targetFileName);

        $r6 = densityDescription.<tool.dconvert.converters.descriptors.PostfixDescriptor: java.lang.String postFix>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r9 = virtualinvoke compression.<tool.dconvert.arg.ImageType$ECompression: java.lang.String name()>();

        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String toLowerCase()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\",\n\t\t\t\"idiom\": \"universal\",\n\t\t\t\"scale\": \"");

        $r13 = densityDescription.<tool.dconvert.converters.descriptors.PostfixDescriptor: java.lang.String name>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"\n\t\t},");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        goto label2;

     label3:
        goto label1;

     label4:
        $i0 = virtualinvoke sb.<java.lang.StringBuilder: int length()>();

        $i1 = $i0 - 1;

        virtualinvoke sb.<java.lang.StringBuilder: void setLength(int)>($i1);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\t],\n\t\"info\": {\n\t\t\"author\": \"xcode\",\n\t\t\"version\": 1\n\t}\n}");

        $r19 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r19;
    }


