    public static int compare(double, double)
    {
        double l0, l2;
        long l4, l6;
        byte $b0, $b1, $b2, $b3, $b4;

        l0 := @parameter0: double;

        l2 := @parameter1: double;

        $b0 = l0 cmpg l2;

        if $b0 >= 0 goto label1;

        return -1;

     label1:
        $b1 = l0 cmpl l2;

        if $b1 <= 0 goto label2;

        return 1;

     label2:
        l4 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(l0);

        l6 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(l2);

        $b2 = l4 cmp l6;

        if $b2 != 0 goto label3;

        $b3 = 0;

        goto label5;

     label3:
        $b4 = l4 cmp l6;

        if $b4 >= 0 goto label4;

        $b3 = -1;

        goto label5;

     label4:
        $b3 = 1;

     label5:
        return $b3;
    }

    public static boolean isNaN(double)
    {
        double l0;
        byte $b0;
        boolean $z0;

        l0 := @parameter0: double;

        $b0 = l0 cmpl l0;

        if $b0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;

        $r0 = staticinvoke <java.lang.Class: java.lang.Class getPrimitiveClass(java.lang.String)>("double");

        <java.lang.Double: java.lang.Class TYPE> = $r0;

        return;
    }

    public static long doubleToLongBits(double)
    {
        double l0;
        long l2#3, $l0, $l2;
        byte $b1, $b3;

        l0 := @parameter0: double;

        l2#3 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(l0);

        $l0 = l2#3 & 9218868437227405312L;

        $b1 = $l0 cmp 9218868437227405312L;

        if $b1 != 0 goto label1;

        $l2 = l2#3 & 4503599627370495L;

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label1;

        l2#3 = 9221120237041090560L;

     label1:
        return l2#3;
    }

    public static double parseDouble(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String l0;
        double $d0;

        l0 := @parameter0: java.lang.String;

        $d0 = staticinvoke <sun.misc.FloatingDecimal: double parseDouble(java.lang.String)>(l0);

        return $d0;
    }


