    public void printStackTrace()
    {
        java.lang.Throwable l0;
        java.io.PrintStream $r0;

        l0 := @this: java.lang.Throwable;

        $r0 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke l0.<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>($r0);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        java.lang.StackTraceElement[] $r1;
        java.util.ArrayList $r2;
        java.util.List $r3;
        java.lang.Throwable[] $r4;

        $r0 = class "Ljava/lang/Throwable;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <java.lang.Throwable: boolean $assertionsDisabled> = $z1;

        $r1 = newarray (java.lang.StackTraceElement)[0];

        <java.lang.Throwable: java.lang.StackTraceElement[] UNASSIGNED_STACK> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>(0);

        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2);

        <java.lang.Throwable: java.util.List SUPPRESSED_SENTINEL> = $r3;

        $r4 = newarray (java.lang.Throwable)[0];

        <java.lang.Throwable: java.lang.Throwable[] EMPTY_THROWABLE_ARRAY> = $r4;

        return;
    }

    public void printStackTrace(java.io.PrintStream)
    {
        java.lang.Throwable l0;
        java.io.PrintStream l1;
        java.lang.Throwable$WrappedPrintStream $r0;

        l0 := @this: java.lang.Throwable;

        l1 := @parameter0: java.io.PrintStream;

        $r0 = new java.lang.Throwable$WrappedPrintStream;

        specialinvoke $r0.<java.lang.Throwable$WrappedPrintStream: void <init>(java.io.PrintStream)>(l1);

        specialinvoke l0.<java.lang.Throwable: void printStackTrace(java.lang.Throwable$PrintStreamOrWriter)>($r0);

        return;
    }

    public java.lang.String getMessage()
    {
        java.lang.Throwable l0;
        java.lang.String $r0;

        l0 := @this: java.lang.Throwable;

        $r0 = l0.<java.lang.Throwable: java.lang.String detailMessage>;

        return $r0;
    }

    public final synchronized void addSuppressed(java.lang.Throwable)
    {
        java.lang.Throwable l0, l1;
        java.util.List $r0, $r1, $r2, $r3;
        java.util.ArrayList $r4;
        java.lang.NullPointerException $r5;
        java.lang.IllegalArgumentException $r6;

        l0 := @this: java.lang.Throwable;

        l1 := @parameter0: java.lang.Throwable;

        if l1 != l0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Self-suppression not permitted", l1);

        throw $r6;

     label1:
        if l1 != null goto label2;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("Cannot suppress a null exception.");

        throw $r5;

     label2:
        $r0 = l0.<java.lang.Throwable: java.util.List suppressedExceptions>;

        if $r0 != null goto label3;

        return;

     label3:
        $r2 = l0.<java.lang.Throwable: java.util.List suppressedExceptions>;

        $r1 = <java.lang.Throwable: java.util.List SUPPRESSED_SENTINEL>;

        if $r2 != $r1 goto label4;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(1);

        l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $r4;

     label4:
        $r3 = l0.<java.lang.Throwable: java.util.List suppressedExceptions>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(l1);

        return;
    }

    private void printStackTrace(java.lang.Throwable$PrintStreamOrWriter)
    {
        java.lang.Throwable l0, l9, $r6, l8#8, l5#9;
        java.lang.Throwable$PrintStreamOrWriter l1;
        java.util.Set l2;
        java.lang.Object l3, $r1;
        java.lang.StackTraceElement[] l4, l5#1;
        java.util.IdentityHashMap $r0;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        int l6#2, l7#3, l6#6, l7#7;
        java.lang.StackTraceElement l8#4;
        java.lang.Throwable[] l5#5;

        l0 := @this: java.lang.Throwable;

        l1 := @parameter0: java.lang.Throwable$PrintStreamOrWriter;

        $r0 = new java.util.IdentityHashMap;

        specialinvoke $r0.<java.util.IdentityHashMap: void <init>()>();

        l2 = staticinvoke <java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>($r0);

        interfaceinvoke l2.<java.util.Set: boolean add(java.lang.Object)>(l0);

        $r1 = virtualinvoke l1.<java.lang.Throwable$PrintStreamOrWriter: java.lang.Object lock()>();

        l3 = $r1;

        entermonitor $r1;

     label01:
        virtualinvoke l1.<java.lang.Throwable$PrintStreamOrWriter: void println(java.lang.Object)>(l0);

        l4 = specialinvoke l0.<java.lang.Throwable: java.lang.StackTraceElement[] getOurStackTrace()>();

        l5#1 = l4;

        l6#2 = lengthof l5#1;

        l7#3 = 0;

     label02:
        if l7#3 >= l6#2 goto label03;

        l8#4 = l5#1[l7#3];

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tat ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(l8#4);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke l1.<java.lang.Throwable$PrintStreamOrWriter: void println(java.lang.Object)>($r5);

        l7#3 = l7#3 + 1;

        goto label02;

     label03:
        l5#5 = virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable[] getSuppressed()>();

        l6#6 = lengthof l5#5;

        l7#7 = 0;

     label04:
        if l7#7 >= l6#6 goto label05;

        l8#8 = l5#5[l7#7];

        specialinvoke l8#8.<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>(l1, l4, "Suppressed: ", "\t", l2);

        l7#7 = l7#7 + 1;

        goto label04;

     label05:
        l5#9 = virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if l5#9 == null goto label06;

        specialinvoke l5#9.<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>(l1, l4, "Caused by: ", "", l2);

     label06:
        exitmonitor l3;

     label07:
        goto label10;

     label08:
        $r6 := @caughtexception;

        l9 = $r6;

        exitmonitor l3;

     label09:
        throw l9;

     label10:
        return;

        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private synchronized java.lang.StackTraceElement[] getOurStackTrace()
    {
        java.lang.Throwable l0;
        int l1, l2#1;
        java.lang.StackTraceElement[] $r0, $r1, $r2, $r3, $r4, $r6, $r7, $r8;
        java.lang.StackTraceElement $r5;
        java.lang.Object $r9;

        l0 := @this: java.lang.Throwable;

        $r1 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>;

        $r0 = <java.lang.Throwable: java.lang.StackTraceElement[] UNASSIGNED_STACK>;

        if $r1 == $r0 goto label1;

        $r6 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>;

        if $r6 != null goto label4;

        $r9 = l0.<java.lang.Throwable: java.lang.Object backtrace>;

        if $r9 == null goto label4;

     label1:
        l1 = virtualinvoke l0.<java.lang.Throwable: int getStackTraceDepth()>();

        $r2 = newarray (java.lang.StackTraceElement)[l1];

        l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $r2;

        l2#1 = 0;

     label2:
        if l2#1 >= l1 goto label3;

        $r4 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>;

        $r5 = virtualinvoke l0.<java.lang.Throwable: java.lang.StackTraceElement getStackTraceElement(int)>(l2#1);

        $r4[l2#1] = $r5;

        l2#1 = l2#1 + 1;

        goto label2;

     label3:
        goto label5;

     label4:
        $r7 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>;

        if $r7 != null goto label5;

        $r8 = <java.lang.Throwable: java.lang.StackTraceElement[] UNASSIGNED_STACK>;

        return $r8;

     label5:
        $r3 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>;

        return $r3;
    }

    public final synchronized java.lang.Throwable[] getSuppressed()
    {
        java.lang.Throwable l0;
        java.util.List $r0, $r1, $r3, $r5;
        java.lang.Throwable[] $r2, $r4, $r7;
        java.lang.Object[] $r6;

        l0 := @this: java.lang.Throwable;

        $r1 = l0.<java.lang.Throwable: java.util.List suppressedExceptions>;

        $r0 = <java.lang.Throwable: java.util.List SUPPRESSED_SENTINEL>;

        if $r1 == $r0 goto label1;

        $r3 = l0.<java.lang.Throwable: java.util.List suppressedExceptions>;

        if $r3 != null goto label2;

     label1:
        $r2 = <java.lang.Throwable: java.lang.Throwable[] EMPTY_THROWABLE_ARRAY>;

        return $r2;

     label2:
        $r5 = l0.<java.lang.Throwable: java.util.List suppressedExceptions>;

        $r4 = <java.lang.Throwable: java.lang.Throwable[] EMPTY_THROWABLE_ARRAY>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r7 = (java.lang.Throwable[]) $r6;

        return $r7;
    }

    public synchronized java.lang.Throwable getCause()
    {
        java.lang.Throwable l0, $r0, $r1;

        l0 := @this: java.lang.Throwable;

        $r0 = l0.<java.lang.Throwable: java.lang.Throwable cause>;

        if $r0 != l0 goto label1;

        $r1 = null;

        goto label2;

     label1:
        $r1 = l0.<java.lang.Throwable: java.lang.Throwable cause>;

     label2:
        return $r1;
    }

    private void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter, java.lang.StackTraceElement[], java.lang.String, java.lang.String, java.util.Set)
    {
        java.lang.Throwable l0, l13, l10#49;
        java.lang.Throwable$PrintStreamOrWriter l1;
        java.lang.StackTraceElement[] l2, l6;
        java.lang.String l3, l4, $r3, $r9, $r15, $r22, $r29;
        java.util.Set l5;
        int l9, l11, $i0, $i1, l7#1, l8#2, $i2, $i3, l10#36, l12#44;
        boolean $z0, $z1, $z3, $z4;
        java.lang.StringBuilder $r0, $r1, $r2, $r4, $r5, $r6, $r7, $r8, $r10, $r11, $r12, $r14, $r18, $r19, $r20, $r21, $r25, $r26, $r27, $r28;
        java.lang.StackTraceElement $r13, $r16, $r17;
        java.lang.Object $r23;
        java.lang.AssertionError $r24;
        java.lang.Throwable[] l10#43;

        l0 := @this: java.lang.Throwable;

        l1 := @parameter0: java.lang.Throwable$PrintStreamOrWriter;

        l2 := @parameter1: java.lang.StackTraceElement[];

        l3 := @parameter2: java.lang.String;

        l4 := @parameter3: java.lang.String;

        l5 := @parameter4: java.util.Set;

        $z0 = <java.lang.Throwable: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $r23 = virtualinvoke l1.<java.lang.Throwable$PrintStreamOrWriter: java.lang.Object lock()>();

        $z4 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r23);

        if $z4 != 0 goto label01;

        $r24 = new java.lang.AssertionError;

        specialinvoke $r24.<java.lang.AssertionError: void <init>()>();

        throw $r24;

     label01:
        $z1 = interfaceinvoke l5.<java.util.Set: boolean contains(java.lang.Object)>(l0);

        if $z1 == 0 goto label02;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t[CIRCULAR REFERENCE:");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(l0);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke l1.<java.lang.Throwable$PrintStreamOrWriter: void println(java.lang.Object)>($r22);

        goto label10;

     label02:
        interfaceinvoke l5.<java.util.Set: boolean add(java.lang.Object)>(l0);

        l6 = specialinvoke l0.<java.lang.Throwable: java.lang.StackTraceElement[] getOurStackTrace()>();

        $i0 = lengthof l6;

        l7#1 = $i0 - 1;

        $i1 = lengthof l2;

        l8#2 = $i1 - 1;

     label03:
        if l7#1 < 0 goto label04;

        if l8#2 < 0 goto label04;

        $r17 = l6[l7#1];

        $r16 = l2[l8#2];

        $z3 = virtualinvoke $r17.<java.lang.StackTraceElement: boolean equals(java.lang.Object)>($r16);

        if $z3 == 0 goto label04;

        l7#1 = l7#1 + -1;

        l8#2 = l8#2 + -1;

        goto label03;

     label04:
        $i2 = lengthof l6;

        $i3 = $i2 - 1;

        l9 = $i3 - l7#1;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(l4);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(l3);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(l0);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke l1.<java.lang.Throwable$PrintStreamOrWriter: void println(java.lang.Object)>($r29);

        l10#36 = 0;

     label05:
        if l10#36 > l7#1 goto label06;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(l4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tat ");

        $r13 = l6[l10#36];

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke l1.<java.lang.Throwable$PrintStreamOrWriter: void println(java.lang.Object)>($r15);

        l10#36 = l10#36 + 1;

        goto label05;

     label06:
        if l9 == 0 goto label07;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(l4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t... ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l9);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" more");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke l1.<java.lang.Throwable$PrintStreamOrWriter: void println(java.lang.Object)>($r9);

     label07:
        l10#43 = virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable[] getSuppressed()>();

        l11 = lengthof l10#43;

        l12#44 = 0;

     label08:
        if l12#44 >= l11 goto label09;

        l13 = l10#43[l12#44];

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(l4);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke l13.<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>(l1, l6, "Suppressed: ", $r3, l5);

        l12#44 = l12#44 + 1;

        goto label08;

     label09:
        l10#49 = virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if l10#49 == null goto label10;

        specialinvoke l10#49.<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>(l1, l6, "Caused by: ", l4, l5);

     label10:
        return;
    }

    public void <init>()
    {
        java.lang.Throwable l0;
        java.lang.StackTraceElement[] $r0;
        java.util.List $r1;

        l0 := @this: java.lang.Throwable;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        l0.<java.lang.Throwable: java.lang.Throwable cause> = l0;

        $r0 = <java.lang.Throwable: java.lang.StackTraceElement[] UNASSIGNED_STACK>;

        l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $r0;

        $r1 = <java.lang.Throwable: java.util.List SUPPRESSED_SENTINEL>;

        l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $r1;

        virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>();

        return;
    }

    public synchronized java.lang.Throwable fillInStackTrace()
    {
        java.lang.Throwable l0;
        java.lang.StackTraceElement[] $r0, $r2;
        java.lang.Object $r3;

        l0 := @this: java.lang.Throwable;

        $r0 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>;

        if $r0 != null goto label1;

        $r3 = l0.<java.lang.Throwable: java.lang.Object backtrace>;

        if $r3 == null goto label2;

     label1:
        specialinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>(0);

        $r2 = <java.lang.Throwable: java.lang.StackTraceElement[] UNASSIGNED_STACK>;

        l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $r2;

     label2:
        return l0;
    }


