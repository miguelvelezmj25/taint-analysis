    static void <clinit>()
    {
        <weka.core.AbstractInstance: int s_numericAfterDecimalPoint> = 6;

        return;
    }

    public void <init>()
    {
        weka.core.AbstractInstance this;

        this := @this: weka.core.AbstractInstance;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public final double weight()
    {
        weka.core.AbstractInstance this;
        double $d0;

        this := @this: weka.core.AbstractInstance;

        $d0 = this.<weka.core.AbstractInstance: double m_Weight>;

        return $d0;
    }

    public final void setDataset(weka.core.Instances)
    {
        weka.core.AbstractInstance this;
        weka.core.Instances instances;

        this := @this: weka.core.AbstractInstance;

        instances := @parameter0: weka.core.Instances;

        this.<weka.core.AbstractInstance: weka.core.Instances m_Dataset> = instances;

        return;
    }

    public weka.core.Instances dataset()
    {
        weka.core.AbstractInstance this;
        weka.core.Instances $r0;

        this := @this: weka.core.AbstractInstance;

        $r0 = this.<weka.core.AbstractInstance: weka.core.Instances m_Dataset>;

        return $r0;
    }

    public boolean classIsMissing()
    {
        weka.core.AbstractInstance this;
        int classIndex;
        weka.core.UnassignedClassException $r0;
        boolean $z0;

        this := @this: weka.core.AbstractInstance;

        classIndex = virtualinvoke this.<weka.core.AbstractInstance: int classIndex()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classIndex);

        if classIndex >= 0 goto label1;

        $r0 = new weka.core.UnassignedClassException;

        specialinvoke $r0.<weka.core.UnassignedClassException: void <init>(java.lang.String)>("Class is not set!");

        throw $r0;

     label1:
        $z0 = virtualinvoke this.<weka.core.AbstractInstance: boolean isMissing(int)>(classIndex);

        return $z0;
    }

    public double classValue()
    {
        weka.core.AbstractInstance this;
        int classIndex;
        weka.core.UnassignedClassException $r0;
        double $d0;

        this := @this: weka.core.AbstractInstance;

        classIndex = virtualinvoke this.<weka.core.AbstractInstance: int classIndex()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classIndex);

        if classIndex >= 0 goto label1;

        $r0 = new weka.core.UnassignedClassException;

        specialinvoke $r0.<weka.core.UnassignedClassException: void <init>(java.lang.String)>("Class is not set!");

        throw $r0;

     label1:
        $d0 = virtualinvoke this.<weka.core.AbstractInstance: double value(int)>(classIndex);

        return $d0;
    }

    public int classIndex()
    {
        weka.core.AbstractInstance this;
        weka.core.Instances $r0, $r2;
        weka.core.UnassignedDatasetException $r1;
        int $i0;

        this := @this: weka.core.AbstractInstance;

        $r0 = this.<weka.core.AbstractInstance: weka.core.Instances m_Dataset>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label1;

        $r1 = new weka.core.UnassignedDatasetException;

        specialinvoke $r1.<weka.core.UnassignedDatasetException: void <init>(java.lang.String)>("Instance doesn\'t have access to a dataset!");

        throw $r1;

     label1:
        $r2 = this.<weka.core.AbstractInstance: weka.core.Instances m_Dataset>;

        $i0 = virtualinvoke $r2.<weka.core.Instances: int classIndex()>();

        return $i0;
    }

    public boolean isMissing(int)
    {
        weka.core.AbstractInstance this;
        int attIndex;
        double $d0;
        boolean $z0;

        this := @this: weka.core.AbstractInstance;

        attIndex := @parameter0: int;

        $d0 = virtualinvoke this.<weka.core.AbstractInstance: double value(int)>(attIndex);

        $z0 = staticinvoke <weka.core.Utils: boolean isMissingValue(double)>($d0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final void setMissing(int)
    {
        weka.core.AbstractInstance this;
        int attIndex;
        double $d0;

        this := @this: weka.core.AbstractInstance;

        attIndex := @parameter0: int;

        $d0 = staticinvoke <weka.core.Utils: double missingValue()>();

        virtualinvoke this.<weka.core.AbstractInstance: void setValue(int,double)>(attIndex, $d0);

        return;
    }

    public void setClassMissing()
    {
        weka.core.AbstractInstance this;
        int classIndex;
        weka.core.UnassignedClassException $r0;

        this := @this: weka.core.AbstractInstance;

        classIndex = virtualinvoke this.<weka.core.AbstractInstance: int classIndex()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classIndex);

        if classIndex >= 0 goto label1;

        $r0 = new weka.core.UnassignedClassException;

        specialinvoke $r0.<weka.core.UnassignedClassException: void <init>(java.lang.String)>("Class is not set!");

        throw $r0;

     label1:
        virtualinvoke this.<weka.core.AbstractInstance: void setMissing(int)>(classIndex);

        return;
    }

    public weka.core.Attribute classAttribute()
    {
        weka.core.AbstractInstance this;
        weka.core.Instances $r0, $r2;
        weka.core.UnassignedDatasetException $r1;
        weka.core.Attribute $r3;

        this := @this: weka.core.AbstractInstance;

        $r0 = this.<weka.core.AbstractInstance: weka.core.Instances m_Dataset>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label1;

        $r1 = new weka.core.UnassignedDatasetException;

        specialinvoke $r1.<weka.core.UnassignedDatasetException: void <init>(java.lang.String)>("Instance doesn\'t have access to a dataset!");

        throw $r1;

     label1:
        $r2 = this.<weka.core.AbstractInstance: weka.core.Instances m_Dataset>;

        $r3 = virtualinvoke $r2.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        return $r3;
    }

    public final java.lang.String toString(int)
    {
        weka.core.AbstractInstance this;
        int attIndex, $i0;
        java.lang.String $r0;

        this := @this: weka.core.AbstractInstance;

        attIndex := @parameter0: int;

        $i0 = <weka.core.AbstractInstance: int s_numericAfterDecimalPoint>;

        $r0 = virtualinvoke this.<weka.core.AbstractInstance: java.lang.String toString(int,int)>(attIndex, $i0);

        return $r0;
    }

    public final java.lang.String toString(int, int)
    {
        weka.core.AbstractInstance this;
        int attIndex, afterDecimalPoint, $i0;
        java.lang.StringBuffer text, $r0;
        boolean $z0;
        weka.core.Instances $r2, $r5;
        double $d0, $d1;
        java.lang.String $r3, $r7, $r8, $r10, $r13;
        weka.core.Attribute $r6;
        java.lang.IllegalStateException $r12;

        this := @this: weka.core.AbstractInstance;

        attIndex := @parameter0: int;

        afterDecimalPoint := @parameter1: int;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        text = $r0;

        $z0 = virtualinvoke this.<weka.core.AbstractInstance: boolean isMissing(int)>(attIndex);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("?");

        goto label6;

     label1:
        $r2 = this.<weka.core.AbstractInstance: weka.core.Instances m_Dataset>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        if $r2 != null goto label2;

        $d0 = virtualinvoke this.<weka.core.AbstractInstance: double value(int)>(attIndex);

        $r3 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int)>($d0, afterDecimalPoint);

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        goto label6;

     label2:
        $r5 = this.<weka.core.AbstractInstance: weka.core.Instances m_Dataset>;

        $r6 = virtualinvoke $r5.<weka.core.Instances: weka.core.Attribute attribute(int)>(attIndex);

        $i0 = virtualinvoke $r6.<weka.core.Attribute: int type()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        tableswitch($i0)
        {
            case 0: goto label4;
            case 1: goto label3;
            case 2: goto label3;
            case 3: goto label3;
            case 4: goto label3;
            default: goto label5;
        };

     label3:
        $r7 = virtualinvoke this.<weka.core.AbstractInstance: java.lang.String stringValue(int)>(attIndex);

        $r8 = staticinvoke <weka.core.Utils: java.lang.String quote(java.lang.String)>($r7);

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        goto label6;

     label4:
        $d1 = virtualinvoke this.<weka.core.AbstractInstance: double value(int)>(attIndex);

        $r10 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int)>($d1, afterDecimalPoint);

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        goto label6;

     label5:
        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unknown attribute type");

        throw $r12;

     label6:
        $r13 = virtualinvoke text.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r13;
    }

    public final java.lang.String stringValue(int)
    {
        weka.core.AbstractInstance this;
        int attIndex;
        weka.core.Instances $r0, $r2;
        weka.core.UnassignedDatasetException $r1;
        weka.core.Attribute $r3;
        java.lang.String $r4;

        this := @this: weka.core.AbstractInstance;

        attIndex := @parameter0: int;

        $r0 = this.<weka.core.AbstractInstance: weka.core.Instances m_Dataset>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label1;

        $r1 = new weka.core.UnassignedDatasetException;

        specialinvoke $r1.<weka.core.UnassignedDatasetException: void <init>(java.lang.String)>("Instance doesn\'t have access to a dataset!");

        throw $r1;

     label1:
        $r2 = this.<weka.core.AbstractInstance: weka.core.Instances m_Dataset>;

        $r3 = virtualinvoke $r2.<weka.core.Instances: weka.core.Attribute attribute(int)>(attIndex);

        $r4 = virtualinvoke this.<weka.core.AbstractInstance: java.lang.String stringValue(weka.core.Attribute)>($r3);

        return $r4;
    }

    public final java.lang.String stringValue(weka.core.Attribute)
    {
        weka.core.AbstractInstance this;
        weka.core.Attribute att;
        int attIndex, $i0, $i1, $i2;
        boolean $z0;
        double $d0, $d1, $d2;
        java.lang.String $r0, $r1, $r3;
        weka.core.Instances $r2;
        java.lang.IllegalArgumentException $r4;

        this := @this: weka.core.AbstractInstance;

        att := @parameter0: weka.core.Attribute;

        attIndex = virtualinvoke att.<weka.core.Attribute: int index()>();

        $z0 = virtualinvoke this.<weka.core.AbstractInstance: boolean isMissing(int)>(attIndex);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        return "?";

     label1:
        $i0 = virtualinvoke att.<weka.core.Attribute: int type()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        tableswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label5;
        };

     label2:
        $d0 = virtualinvoke this.<weka.core.AbstractInstance: double value(int)>(attIndex);

        $i1 = (int) $d0;

        $r0 = virtualinvoke att.<weka.core.Attribute: java.lang.String value(int)>($i1);

        return $r0;

     label3:
        $d1 = virtualinvoke this.<weka.core.AbstractInstance: double value(int)>(attIndex);

        $r1 = virtualinvoke att.<weka.core.Attribute: java.lang.String formatDate(double)>($d1);

        return $r1;

     label4:
        $d2 = virtualinvoke this.<weka.core.AbstractInstance: double value(int)>(attIndex);

        $i2 = (int) $d2;

        $r2 = virtualinvoke att.<weka.core.Attribute: weka.core.Instances relation(int)>($i2);

        $r3 = virtualinvoke $r2.<weka.core.Instances: java.lang.String stringWithoutHeader()>();

        return $r3;

     label5:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Attribute isn\'t nominal, string or date!");

        throw $r4;
    }

    public int numClasses()
    {
        weka.core.AbstractInstance this;
        weka.core.Instances $r0, $r2;
        weka.core.UnassignedDatasetException $r1;
        int $i0;

        this := @this: weka.core.AbstractInstance;

        $r0 = this.<weka.core.AbstractInstance: weka.core.Instances m_Dataset>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label1;

        $r1 = new weka.core.UnassignedDatasetException;

        specialinvoke $r1.<weka.core.UnassignedDatasetException: void <init>(java.lang.String)>("Instance doesn\'t have access to a dataset!");

        throw $r1;

     label1:
        $r2 = this.<weka.core.AbstractInstance: weka.core.Instances m_Dataset>;

        $i0 = virtualinvoke $r2.<weka.core.Instances: int numClasses()>();

        return $i0;
    }

    public weka.core.Attribute attribute(int)
    {
        weka.core.AbstractInstance this;
        int index;
        weka.core.Instances $r0, $r2;
        weka.core.UnassignedDatasetException $r1;
        weka.core.Attribute $r3;

        this := @this: weka.core.AbstractInstance;

        index := @parameter0: int;

        $r0 = this.<weka.core.AbstractInstance: weka.core.Instances m_Dataset>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label1;

        $r1 = new weka.core.UnassignedDatasetException;

        specialinvoke $r1.<weka.core.UnassignedDatasetException: void <init>(java.lang.String)>("Instance doesn\'t have access to a dataset!");

        throw $r1;

     label1:
        $r2 = this.<weka.core.AbstractInstance: weka.core.Instances m_Dataset>;

        $r3 = virtualinvoke $r2.<weka.core.Instances: weka.core.Attribute attribute(int)>(index);

        return $r3;
    }


