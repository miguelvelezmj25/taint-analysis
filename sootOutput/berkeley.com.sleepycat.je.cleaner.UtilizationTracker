    void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl, berkeley.com.sleepycat.je.cleaner.Cleaner)
    {
        berkeley.com.sleepycat.je.cleaner.UtilizationTracker this;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl env;
        berkeley.com.sleepycat.je.cleaner.Cleaner cleaner;

        this := @this: berkeley.com.sleepycat.je.cleaner.UtilizationTracker;

        env := @parameter0: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        cleaner := @parameter1: berkeley.com.sleepycat.je.cleaner.Cleaner;

        specialinvoke this.<berkeley.com.sleepycat.je.cleaner.BaseUtilizationTracker: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.cleaner.Cleaner)>(env, cleaner);

        return;
    }

    public void countObsoleteNode(long, berkeley.com.sleepycat.je.log.LogEntryType, int, berkeley.com.sleepycat.je.dbi.DatabaseImpl)
    {
        berkeley.com.sleepycat.je.cleaner.UtilizationTracker this;
        long lsn;
        berkeley.com.sleepycat.je.log.LogEntryType type;
        int size;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;

        this := @this: berkeley.com.sleepycat.je.cleaner.UtilizationTracker;

        lsn := @parameter0: long;

        type := @parameter1: berkeley.com.sleepycat.je.log.LogEntryType;

        size := @parameter2: int;

        db := @parameter3: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        virtualinvoke this.<berkeley.com.sleepycat.je.cleaner.UtilizationTracker: void countObsolete(long,java.lang.Object,berkeley.com.sleepycat.je.log.LogEntryType,int,boolean,boolean,boolean,boolean)>(lsn, db, type, size, 1, 1, 1, 1);

        return;
    }

    public void countObsoleteNodeDupsAllowed(long, berkeley.com.sleepycat.je.log.LogEntryType, int, berkeley.com.sleepycat.je.dbi.DatabaseImpl)
    {
        berkeley.com.sleepycat.je.cleaner.UtilizationTracker this;
        long lsn;
        berkeley.com.sleepycat.je.log.LogEntryType type;
        int size;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;

        this := @this: berkeley.com.sleepycat.je.cleaner.UtilizationTracker;

        lsn := @parameter0: long;

        type := @parameter1: berkeley.com.sleepycat.je.log.LogEntryType;

        size := @parameter2: int;

        db := @parameter3: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        virtualinvoke this.<berkeley.com.sleepycat.je.cleaner.UtilizationTracker: void countObsolete(long,java.lang.Object,berkeley.com.sleepycat.je.log.LogEntryType,int,boolean,boolean,boolean,boolean)>(lsn, db, type, size, 1, 1, 1, 0);

        return;
    }

    public void countNewLogEntry(long, berkeley.com.sleepycat.je.log.LogEntryType, int, berkeley.com.sleepycat.je.dbi.DatabaseImpl)
    {
        berkeley.com.sleepycat.je.cleaner.UtilizationTracker this;
        long lsn;
        berkeley.com.sleepycat.je.log.LogEntryType type;
        int size;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;

        this := @this: berkeley.com.sleepycat.je.cleaner.UtilizationTracker;

        lsn := @parameter0: long;

        type := @parameter1: berkeley.com.sleepycat.je.log.LogEntryType;

        size := @parameter2: int;

        db := @parameter3: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        virtualinvoke this.<berkeley.com.sleepycat.je.cleaner.UtilizationTracker: void countNew(long,java.lang.Object,berkeley.com.sleepycat.je.log.LogEntryType,int)>(lsn, db, type, size);

        return;
    }

    public void countObsoleteNodeInexact(long, berkeley.com.sleepycat.je.log.LogEntryType, int, berkeley.com.sleepycat.je.dbi.DatabaseImpl)
    {
        berkeley.com.sleepycat.je.cleaner.UtilizationTracker this;
        long lsn;
        berkeley.com.sleepycat.je.log.LogEntryType type;
        int size;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;

        this := @this: berkeley.com.sleepycat.je.cleaner.UtilizationTracker;

        lsn := @parameter0: long;

        type := @parameter1: berkeley.com.sleepycat.je.log.LogEntryType;

        size := @parameter2: int;

        db := @parameter3: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        virtualinvoke this.<berkeley.com.sleepycat.je.cleaner.UtilizationTracker: void countObsolete(long,java.lang.Object,berkeley.com.sleepycat.je.log.LogEntryType,int,boolean,boolean,boolean,boolean)>(lsn, db, type, size, 1, 1, 0, 0);

        return;
    }

    berkeley.com.sleepycat.je.cleaner.DbFileSummary getDbFileSummary(java.lang.Object, long)
    {
        berkeley.com.sleepycat.je.cleaner.UtilizationTracker this;
        java.lang.Object databaseKey;
        long fileNum;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;
        java.lang.Long $r0;
        berkeley.com.sleepycat.je.cleaner.DbFileSummary $r1;

        this := @this: berkeley.com.sleepycat.je.cleaner.UtilizationTracker;

        databaseKey := @parameter0: java.lang.Object;

        fileNum := @parameter1: long;

        db = (berkeley.com.sleepycat.je.dbi.DatabaseImpl) databaseKey;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(db);

        if db == null goto label1;

        $r0 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(fileNum);

        $r1 = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.cleaner.DbFileSummary getDbFileSummary(java.lang.Long,boolean)>($r0, 1);

        return $r1;

     label1:
        return null;
    }

    public long evictMemory() throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.cleaner.UtilizationTracker this;
        berkeley.com.sleepycat.je.dbi.MemoryBudget mb;
        int ONE_MB, mem, largestBytes#21;
        java.util.Iterator l9;
        berkeley.com.sleepycat.je.cleaner.TrackedFileSummary tfs, bestFile#23;
        berkeley.com.sleepycat.je.cleaner.Cleaner $r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r1, $r2, $r3, $r6, $r8;
        long totalEvicted#17, totalBytes#19, $l0, $l1, $l2, $l4;
        java.util.Collection $r4;
        java.lang.Object $r5;
        berkeley.com.sleepycat.je.cleaner.UtilizationProfile $r7, $r9;
        byte $b3;

        this := @this: berkeley.com.sleepycat.je.cleaner.UtilizationTracker;

        $r0 = this.<berkeley.com.sleepycat.je.cleaner.UtilizationTracker: berkeley.com.sleepycat.je.cleaner.Cleaner cleaner>;

        $z0 = $r0.<berkeley.com.sleepycat.je.cleaner.Cleaner: boolean trackDetail>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        return 0L;

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.cleaner.UtilizationTracker: berkeley.com.sleepycat.je.dbi.EnvironmentImpl env>;

        $z1 = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean isValid()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

        return 0L;

     label2:
        $r2 = this.<berkeley.com.sleepycat.je.cleaner.UtilizationTracker: berkeley.com.sleepycat.je.dbi.EnvironmentImpl env>;

        $z2 = virtualinvoke $r2.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean isReadOnly()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label3;

        return 0L;

     label3:
        $r3 = this.<berkeley.com.sleepycat.je.cleaner.UtilizationTracker: berkeley.com.sleepycat.je.dbi.EnvironmentImpl env>;

        mb = virtualinvoke $r3.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.MemoryBudget getMemoryBudget()>();

        totalEvicted#17 = 0L;

        totalBytes#19 = 0L;

        largestBytes#21 = 0;

        bestFile#23 = null;

        ONE_MB = 1048576;

        $r4 = virtualinvoke this.<berkeley.com.sleepycat.je.cleaner.UtilizationTracker: java.util.Collection getTrackedFiles()>();

        l9 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z3 = interfaceinvoke l9.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label7;

        $r5 = interfaceinvoke l9.<java.util.Iterator: java.lang.Object next()>();

        tfs = (berkeley.com.sleepycat.je.cleaner.TrackedFileSummary) $r5;

        mem = virtualinvoke tfs.<berkeley.com.sleepycat.je.cleaner.TrackedFileSummary: int getMemorySize()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(mem);

        if mem < 1048576 goto label5;

        $r6 = this.<berkeley.com.sleepycat.je.cleaner.UtilizationTracker: berkeley.com.sleepycat.je.dbi.EnvironmentImpl env>;

        $r7 = virtualinvoke $r6.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.cleaner.UtilizationProfile getUtilizationProfile()>();

        virtualinvoke $r7.<berkeley.com.sleepycat.je.cleaner.UtilizationProfile: void flushFileSummary(berkeley.com.sleepycat.je.cleaner.TrackedFileSummary)>(tfs);

        $l0 = (long) mem;

        totalEvicted#17 = totalEvicted#17 + $l0;

        goto label4;

     label5:
        $l1 = (long) mem;

        totalBytes#19 = totalBytes#19 + $l1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(mem);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(largestBytes#21);

        if mem <= largestBytes#21 goto label6;

        $z4 = virtualinvoke tfs.<berkeley.com.sleepycat.je.cleaner.TrackedFileSummary: boolean getAllowFlush()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label6;

        largestBytes#21 = mem;

        bestFile#23 = tfs;

     label6:
        goto label4;

     label7:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(bestFile#23);

        if bestFile#23 == null goto label8;

        $l2 = virtualinvoke mb.<berkeley.com.sleepycat.je.dbi.MemoryBudget: long getTrackerBudget()>();

        $b3 = totalBytes#19 cmp $l2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b3);

        if $b3 <= 0 goto label8;

        $r8 = this.<berkeley.com.sleepycat.je.cleaner.UtilizationTracker: berkeley.com.sleepycat.je.dbi.EnvironmentImpl env>;

        $r9 = virtualinvoke $r8.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.cleaner.UtilizationProfile getUtilizationProfile()>();

        virtualinvoke $r9.<berkeley.com.sleepycat.je.cleaner.UtilizationProfile: void flushFileSummary(berkeley.com.sleepycat.je.cleaner.TrackedFileSummary)>(bestFile#23);

        $l4 = (long) largestBytes#21;

        totalEvicted#17 = totalEvicted#17 + $l4;

     label8:
        return totalEvicted#17;
    }

    public berkeley.com.sleepycat.je.cleaner.TrackedFileSummary getUnflushableTrackedSummary(long)
    {
        berkeley.com.sleepycat.je.cleaner.UtilizationTracker this;
        long fileNum;
        berkeley.com.sleepycat.je.cleaner.TrackedFileSummary file;

        this := @this: berkeley.com.sleepycat.je.cleaner.UtilizationTracker;

        fileNum := @parameter0: long;

        file = virtualinvoke this.<berkeley.com.sleepycat.je.cleaner.UtilizationTracker: berkeley.com.sleepycat.je.cleaner.TrackedFileSummary getFileSummary(long)>(fileNum);

        virtualinvoke file.<berkeley.com.sleepycat.je.cleaner.TrackedFileSummary: void setAllowFlush(boolean)>(0);

        return file;
    }


