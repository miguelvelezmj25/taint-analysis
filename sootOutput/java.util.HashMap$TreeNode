    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "java/util/HashMap";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <java.util.HashMap$TreeNode: boolean $assertionsDisabled> = $z1;

        return;
    }

    void <init>(int, java.lang.Object, java.lang.Object, java.util.HashMap$Node)
    {
        java.util.HashMap$TreeNode l0;
        int l1;
        java.lang.Object l2, l3;
        java.util.HashMap$Node l4;

        l0 := @this: java.util.HashMap$TreeNode;

        l1 := @parameter0: int;

        l2 := @parameter1: java.lang.Object;

        l3 := @parameter2: java.lang.Object;

        l4 := @parameter3: java.util.HashMap$Node;

        specialinvoke l0.<java.util.LinkedHashMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>(l1, l2, l3, l4);

        return;
    }

    final void treeify(java.util.HashMap$Node[])
    {
        java.util.HashMap$TreeNode l0, l4, l12, l2#2, l3#4, l8#27, $r2;
        java.util.HashMap$Node[] l1;
        java.lang.Object l5, l11;
        int l6, l10, $i0, l9#35, $i1;
        java.util.HashMap$Node $r0;
        java.lang.Class l7#25, $r1;

        l0 := @this: java.util.HashMap$TreeNode;

        l1 := @parameter0: java.util.HashMap$Node[];

        l2#2 = null;

        l3#4 = l0;

     label01:
        if l3#4 == null goto label15;

        $r0 = l3#4.<java.util.HashMap$TreeNode: java.util.HashMap$Node next>;

        l4 = (java.util.HashMap$TreeNode) $r0;

        l3#4.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode right> = null;

        l3#4.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left> = null;

        if l2#2 != null goto label02;

        l3#4.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent> = null;

        l3#4.<java.util.HashMap$TreeNode: boolean red> = 0;

        l2#2 = l3#4;

        goto label14;

     label02:
        l5 = l3#4.<java.util.HashMap$TreeNode: java.lang.Object key>;

        l6 = l3#4.<java.util.HashMap$TreeNode: int hash>;

        l7#25 = null;

        l8#27 = l2#2;

     label03:
        l11 = l8#27.<java.util.HashMap$TreeNode: java.lang.Object key>;

        $i0 = l8#27.<java.util.HashMap$TreeNode: int hash>;

        l10 = $i0;

        if $i0 <= l6 goto label04;

        l9#35 = -1;

        goto label08;

     label04:
        if l10 >= l6 goto label05;

        l9#35 = 1;

        goto label08;

     label05:
        if l7#25 != null goto label06;

        $r1 = staticinvoke <java.util.HashMap: java.lang.Class comparableClassFor(java.lang.Object)>(l5);

        l7#25 = $r1;

        if $r1 == null goto label07;

     label06:
        $i1 = staticinvoke <java.util.HashMap: int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)>(l7#25, l5, l11);

        l9#35 = $i1;

        if $i1 != 0 goto label08;

     label07:
        l9#35 = staticinvoke <java.util.HashMap$TreeNode: int tieBreakOrder(java.lang.Object,java.lang.Object)>(l5, l11);

     label08:
        l12 = l8#27;

        if l9#35 > 0 goto label09;

        $r2 = l8#27.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left>;

        goto label10;

     label09:
        $r2 = l8#27.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode right>;

     label10:
        l8#27 = $r2;

        if $r2 != null goto label13;

        l3#4.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent> = l12;

        if l9#35 > 0 goto label11;

        l12.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left> = l3#4;

        goto label12;

     label11:
        l12.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode right> = l3#4;

     label12:
        l2#2 = staticinvoke <java.util.HashMap$TreeNode: java.util.HashMap$TreeNode balanceInsertion(java.util.HashMap$TreeNode,java.util.HashMap$TreeNode)>(l2#2, l3#4);

        goto label14;

     label13:
        goto label03;

     label14:
        l3#4 = l4;

        goto label01;

     label15:
        staticinvoke <java.util.HashMap$TreeNode: void moveRootToFront(java.util.HashMap$Node[],java.util.HashMap$TreeNode)>(l1, l2#2);

        return;
    }

    static void moveRootToFront(java.util.HashMap$Node[], java.util.HashMap$TreeNode)
    {
        java.util.HashMap$Node[] l0;
        java.util.HashMap$TreeNode l1, l4, l6, $r2;
        int l2, l3, $i0, $i1, $i2;
        java.util.HashMap$Node l5, $r0, $r1;
        boolean $z0, $z1;
        java.lang.AssertionError $r3;

        l0 := @parameter0: java.util.HashMap$Node[];

        l1 := @parameter1: java.util.HashMap$TreeNode;

        if l1 == null goto label5;

        if l0 == null goto label5;

        $i0 = lengthof l0;

        l2 = $i0;

        if $i0 <= 0 goto label5;

        $i1 = l2 - 1;

        $i2 = l1.<java.util.HashMap$TreeNode: int hash>;

        l3 = $i1 & $i2;

        $r0 = l0[l3];

        l4 = (java.util.HashMap$TreeNode) $r0;

        if l1 == l4 goto label4;

        l0[l3] = l1;

        l6 = l1.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode prev>;

        $r1 = l1.<java.util.HashMap$TreeNode: java.util.HashMap$Node next>;

        l5 = $r1;

        if $r1 == null goto label1;

        $r2 = (java.util.HashMap$TreeNode) l5;

        $r2.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode prev> = l6;

     label1:
        if l6 == null goto label2;

        l6.<java.util.HashMap$TreeNode: java.util.HashMap$Node next> = l5;

     label2:
        if l4 == null goto label3;

        l4.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode prev> = l1;

     label3:
        l1.<java.util.HashMap$TreeNode: java.util.HashMap$Node next> = l4;

        l1.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode prev> = null;

     label4:
        $z0 = <java.util.HashMap$TreeNode: boolean $assertionsDisabled>;

        if $z0 != 0 goto label5;

        $z1 = staticinvoke <java.util.HashMap$TreeNode: boolean checkInvariants(java.util.HashMap$TreeNode)>(l1);

        if $z1 != 0 goto label5;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label5:
        return;
    }

    static java.util.HashMap$TreeNode balanceInsertion(java.util.HashMap$TreeNode, java.util.HashMap$TreeNode)
    {
        java.util.HashMap$TreeNode l4, l5, l0#1, l1#2, $r0, l2#8, $r1, l3#17, $r2, $r3, $r4, $r6, $r7, $r8, $r10, $r11;
        boolean $z0, $z1, $z2;

        l0#1 := @parameter0: java.util.HashMap$TreeNode;

        l1#2 := @parameter1: java.util.HashMap$TreeNode;

        l1#2.<java.util.HashMap$TreeNode: boolean red> = 1;

     label01:
        $r0 = l1#2.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent>;

        l2#8 = $r0;

        if $r0 != null goto label02;

        l1#2.<java.util.HashMap$TreeNode: boolean red> = 0;

        return l1#2;

     label02:
        $z0 = l2#8.<java.util.HashMap$TreeNode: boolean red>;

        if $z0 == 0 goto label03;

        $r1 = l2#8.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent>;

        l3#17 = $r1;

        if $r1 != null goto label04;

     label03:
        return l0#1;

     label04:
        $r2 = l3#17.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left>;

        l4 = $r2;

        if l2#8 != $r2 goto label09;

        $r3 = l3#17.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode right>;

        l5 = $r3;

        if $r3 == null goto label05;

        $z1 = l5.<java.util.HashMap$TreeNode: boolean red>;

        if $z1 == 0 goto label05;

        l5.<java.util.HashMap$TreeNode: boolean red> = 0;

        l2#8.<java.util.HashMap$TreeNode: boolean red> = 0;

        l3#17.<java.util.HashMap$TreeNode: boolean red> = 1;

        l1#2 = l3#17;

        goto label01;

     label05:
        $r4 = l2#8.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode right>;

        if l1#2 != $r4 goto label08;

        l1#2 = l2#8;

        l0#1 = staticinvoke <java.util.HashMap$TreeNode: java.util.HashMap$TreeNode rotateLeft(java.util.HashMap$TreeNode,java.util.HashMap$TreeNode)>(l0#1, l2#8);

        $r6 = l1#2.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent>;

        l2#8 = $r6;

        if $r6 != null goto label06;

        $r7 = null;

        goto label07;

     label06:
        $r7 = l2#8.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent>;

     label07:
        l3#17 = $r7;

     label08:
        if l2#8 == null goto label01;

        l2#8.<java.util.HashMap$TreeNode: boolean red> = 0;

        if l3#17 == null goto label01;

        l3#17.<java.util.HashMap$TreeNode: boolean red> = 1;

        l0#1 = staticinvoke <java.util.HashMap$TreeNode: java.util.HashMap$TreeNode rotateRight(java.util.HashMap$TreeNode,java.util.HashMap$TreeNode)>(l0#1, l3#17);

        goto label01;

     label09:
        if l4 == null goto label10;

        $z2 = l4.<java.util.HashMap$TreeNode: boolean red>;

        if $z2 == 0 goto label10;

        l4.<java.util.HashMap$TreeNode: boolean red> = 0;

        l2#8.<java.util.HashMap$TreeNode: boolean red> = 0;

        l3#17.<java.util.HashMap$TreeNode: boolean red> = 1;

        l1#2 = l3#17;

        goto label01;

     label10:
        $r8 = l2#8.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left>;

        if l1#2 != $r8 goto label13;

        l1#2 = l2#8;

        l0#1 = staticinvoke <java.util.HashMap$TreeNode: java.util.HashMap$TreeNode rotateRight(java.util.HashMap$TreeNode,java.util.HashMap$TreeNode)>(l0#1, l2#8);

        $r10 = l1#2.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent>;

        l2#8 = $r10;

        if $r10 != null goto label11;

        $r11 = null;

        goto label12;

     label11:
        $r11 = l2#8.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent>;

     label12:
        l3#17 = $r11;

     label13:
        if l2#8 == null goto label01;

        l2#8.<java.util.HashMap$TreeNode: boolean red> = 0;

        if l3#17 == null goto label01;

        l3#17.<java.util.HashMap$TreeNode: boolean red> = 1;

        l0#1 = staticinvoke <java.util.HashMap$TreeNode: java.util.HashMap$TreeNode rotateLeft(java.util.HashMap$TreeNode,java.util.HashMap$TreeNode)>(l0#1, l3#17);

        goto label01;
    }

    static int tieBreakOrder(java.lang.Object, java.lang.Object)
    {
        java.lang.Object l0, l1;
        java.lang.Class $r0, $r2;
        java.lang.String $r1, $r3;
        int $i0, l2#11, $i1, $i2;
        byte $b3;

        l0 := @parameter0: java.lang.Object;

        l1 := @parameter1: java.lang.Object;

        if l0 == null goto label1;

        if l1 == null goto label1;

        $r0 = virtualinvoke l0.<java.lang.Object: java.lang.Class getClass()>();

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = virtualinvoke l1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int compareTo(java.lang.String)>($r3);

        l2#11 = $i0;

        if $i0 != 0 goto label4;

     label1:
        $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(l0);

        $i2 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(l1);

        if $i1 > $i2 goto label2;

        $b3 = -1;

        goto label3;

     label2:
        $b3 = 1;

     label3:
        l2#11 = $b3;

     label4:
        return l2#11;
    }

    static boolean checkInvariants(java.util.HashMap$TreeNode)
    {
        java.util.HashMap$TreeNode l0, l1, l2, l3, l4, l5, $r2, $r3, $r4, $r5, $r6;
        java.util.HashMap$Node $r0, $r1;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1, $z2, $z3, $z4;

        l0 := @parameter0: java.util.HashMap$TreeNode;

        l1 = l0.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent>;

        l2 = l0.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left>;

        l3 = l0.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode right>;

        l4 = l0.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode prev>;

        $r0 = l0.<java.util.HashMap$TreeNode: java.util.HashMap$Node next>;

        l5 = (java.util.HashMap$TreeNode) $r0;

        if l4 == null goto label01;

        $r1 = l4.<java.util.HashMap$TreeNode: java.util.HashMap$Node next>;

        if $r1 == l0 goto label01;

        return 0;

     label01:
        if l5 == null goto label02;

        $r2 = l5.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode prev>;

        if $r2 == l0 goto label02;

        return 0;

     label02:
        if l1 == null goto label03;

        $r3 = l1.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left>;

        if l0 == $r3 goto label03;

        $r4 = l1.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode right>;

        if l0 == $r4 goto label03;

        return 0;

     label03:
        if l2 == null goto label05;

        $r5 = l2.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent>;

        if $r5 != l0 goto label04;

        $i0 = l2.<java.util.HashMap$TreeNode: int hash>;

        $i1 = l0.<java.util.HashMap$TreeNode: int hash>;

        if $i0 <= $i1 goto label05;

     label04:
        return 0;

     label05:
        if l3 == null goto label07;

        $r6 = l3.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent>;

        if $r6 != l0 goto label06;

        $i2 = l3.<java.util.HashMap$TreeNode: int hash>;

        $i3 = l0.<java.util.HashMap$TreeNode: int hash>;

        if $i2 >= $i3 goto label07;

     label06:
        return 0;

     label07:
        $z0 = l0.<java.util.HashMap$TreeNode: boolean red>;

        if $z0 == 0 goto label08;

        if l2 == null goto label08;

        $z1 = l2.<java.util.HashMap$TreeNode: boolean red>;

        if $z1 == 0 goto label08;

        if l3 == null goto label08;

        $z2 = l3.<java.util.HashMap$TreeNode: boolean red>;

        if $z2 == 0 goto label08;

        return 0;

     label08:
        if l2 == null goto label09;

        $z3 = staticinvoke <java.util.HashMap$TreeNode: boolean checkInvariants(java.util.HashMap$TreeNode)>(l2);

        if $z3 != 0 goto label09;

        return 0;

     label09:
        if l3 == null goto label10;

        $z4 = staticinvoke <java.util.HashMap$TreeNode: boolean checkInvariants(java.util.HashMap$TreeNode)>(l3);

        if $z4 != 0 goto label10;

        return 0;

     label10:
        return 1;
    }

    static java.util.HashMap$TreeNode rotateLeft(java.util.HashMap$TreeNode, java.util.HashMap$TreeNode)
    {
        java.util.HashMap$TreeNode l1, l2, l4, l3, l0#1, $r0, $r1, $r3, $r6;

        l0#1 := @parameter0: java.util.HashMap$TreeNode;

        l1 := @parameter1: java.util.HashMap$TreeNode;

        if l1 == null goto label5;

        $r0 = l1.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode right>;

        l2 = $r0;

        if $r0 == null goto label5;

        $r1 = l2.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left>;

        l1.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode right> = $r1;

        l4 = $r1;

        if $r1 == null goto label1;

        l4.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent> = l1;

     label1:
        $r3 = l1.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent>;

        l2.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent> = $r3;

        l3 = $r3;

        if $r3 != null goto label2;

        l0#1 = l2;

        l2.<java.util.HashMap$TreeNode: boolean red> = 0;

        goto label4;

     label2:
        $r6 = l3.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left>;

        if $r6 != l1 goto label3;

        l3.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left> = l2;

        goto label4;

     label3:
        l3.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode right> = l2;

     label4:
        l2.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left> = l1;

        l1.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent> = l2;

     label5:
        return l0#1;
    }

    static java.util.HashMap$TreeNode rotateRight(java.util.HashMap$TreeNode, java.util.HashMap$TreeNode)
    {
        java.util.HashMap$TreeNode l1, l2, l4, l3, l0#1, $r0, $r1, $r3, $r6;

        l0#1 := @parameter0: java.util.HashMap$TreeNode;

        l1 := @parameter1: java.util.HashMap$TreeNode;

        if l1 == null goto label5;

        $r0 = l1.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left>;

        l2 = $r0;

        if $r0 == null goto label5;

        $r1 = l2.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode right>;

        l1.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left> = $r1;

        l4 = $r1;

        if $r1 == null goto label1;

        l4.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent> = l1;

     label1:
        $r3 = l1.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent>;

        l2.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent> = $r3;

        l3 = $r3;

        if $r3 != null goto label2;

        l0#1 = l2;

        l2.<java.util.HashMap$TreeNode: boolean red> = 0;

        goto label4;

     label2:
        $r6 = l3.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode right>;

        if $r6 != l1 goto label3;

        l3.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode right> = l2;

        goto label4;

     label3:
        l3.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left> = l2;

     label4:
        l2.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode right> = l1;

        l1.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent> = l2;

     label5:
        return l0#1;
    }

    final java.util.HashMap$TreeNode getTreeNode(int, java.lang.Object)
    {
        java.util.HashMap$TreeNode l0, $r0, $r1, $r2;
        int l1;
        java.lang.Object l2;

        l0 := @this: java.util.HashMap$TreeNode;

        l1 := @parameter0: int;

        l2 := @parameter1: java.lang.Object;

        $r0 = l0.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent>;

        if $r0 == null goto label1;

        $r1 = virtualinvoke l0.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode root()>();

        goto label2;

     label1:
        $r1 = l0;

     label2:
        $r2 = virtualinvoke $r1.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>(l1, l2, null);

        return $r2;
    }

    final java.util.HashMap$TreeNode root()
    {
        java.util.HashMap$TreeNode l0, l2, l1#2, $r0;

        l0 := @this: java.util.HashMap$TreeNode;

        l1#2 = l0;

     label1:
        $r0 = l1#2.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent>;

        l2 = $r0;

        if $r0 != null goto label2;

        return l1#2;

     label2:
        l1#2 = l2;

        goto label1;
    }

    final java.util.HashMap$TreeNode find(int, java.lang.Object, java.lang.Class)
    {
        java.util.HashMap$TreeNode l0, l8, l9, l10, l4#3, $r2, $r3;
        int l1, l5, l6, $i0, $i1;
        java.lang.Object l2, l7, $r0;
        java.lang.Class l3#1, $r1;
        boolean $z0;

        l0 := @this: java.util.HashMap$TreeNode;

        l1 := @parameter0: int;

        l2 := @parameter1: java.lang.Object;

        l3#1 := @parameter2: java.lang.Class;

        l4#3 = l0;

     label01:
        l8 = l4#3.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left>;

        l9 = l4#3.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode right>;

        $i0 = l4#3.<java.util.HashMap$TreeNode: int hash>;

        l5 = $i0;

        if $i0 <= l1 goto label02;

        l4#3 = l8;

        goto label13;

     label02:
        if l5 >= l1 goto label03;

        l4#3 = l9;

        goto label13;

     label03:
        $r0 = l4#3.<java.util.HashMap$TreeNode: java.lang.Object key>;

        l7 = $r0;

        if $r0 == l2 goto label04;

        if l2 == null goto label05;

        $z0 = virtualinvoke l2.<java.lang.Object: boolean equals(java.lang.Object)>(l7);

        if $z0 == 0 goto label05;

     label04:
        return l4#3;

     label05:
        if l8 != null goto label06;

        l4#3 = l9;

        goto label13;

     label06:
        if l9 != null goto label07;

        l4#3 = l8;

        goto label13;

     label07:
        if l3#1 != null goto label08;

        $r1 = staticinvoke <java.util.HashMap: java.lang.Class comparableClassFor(java.lang.Object)>(l2);

        l3#1 = $r1;

        if $r1 == null goto label11;

     label08:
        $i1 = staticinvoke <java.util.HashMap: int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)>(l3#1, l2, l7);

        l6 = $i1;

        if $i1 == 0 goto label11;

        if l6 >= 0 goto label09;

        $r2 = l8;

        goto label10;

     label09:
        $r2 = l9;

     label10:
        l4#3 = $r2;

        goto label13;

     label11:
        $r3 = virtualinvoke l9.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>(l1, l2, l3#1);

        l10 = $r3;

        if $r3 == null goto label12;

        return l10;

     label12:
        l4#3 = l8;

     label13:
        if l4#3 != null goto label01;

        return null;
    }

    final void removeTreeNode(java.util.HashMap, java.util.HashMap$Node[], boolean)
    {
        java.util.HashMap$TreeNode l0, l9, l10, l8, l11, l12, l13, l18, l19, l20, l6#15, l7#17, $r3, $r4, $r5, $r6, l15#59, $r8, l16#63, $r10, $r15, l14#134, $r16, l15#149, $r17, $r18, l15#173, l16#178, $r19, $r20;
        java.util.HashMap l1;
        java.util.HashMap$Node[] l2;
        boolean l3, l17, $z0, $z1;
        int l4, l5, $i0, $i1, $i2;
        java.util.HashMap$Node $r0, $r1, $r7;

        l0 := @this: java.util.HashMap$TreeNode;

        l1 := @parameter0: java.util.HashMap;

        l2 := @parameter1: java.util.HashMap$Node[];

        l3 := @parameter2: boolean;

        if l2 == null goto label01;

        $i0 = lengthof l2;

        l4 = $i0;

        if $i0 != 0 goto label02;

     label01:
        return;

     label02:
        $i1 = l4 - 1;

        $i2 = l0.<java.util.HashMap$TreeNode: int hash>;

        l5 = $i1 & $i2;

        $r0 = l2[l5];

        l6#15 = (java.util.HashMap$TreeNode) $r0;

        l7#17 = l6#15;

        $r1 = l0.<java.util.HashMap$TreeNode: java.util.HashMap$Node next>;

        l9 = (java.util.HashMap$TreeNode) $r1;

        l10 = l0.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode prev>;

        if l10 != null goto label03;

        l6#15 = l9;

        l2[l5] = l9;

        goto label04;

     label03:
        l10.<java.util.HashMap$TreeNode: java.util.HashMap$Node next> = l9;

     label04:
        if l9 == null goto label05;

        l9.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode prev> = l10;

     label05:
        if l6#15 != null goto label06;

        return;

     label06:
        $r3 = l7#17.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent>;

        if $r3 == null goto label07;

        l7#17 = virtualinvoke l7#17.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode root()>();

     label07:
        if l7#17 == null goto label08;

        $r4 = l7#17.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode right>;

        if $r4 == null goto label08;

        $r5 = l7#17.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left>;

        l8 = $r5;

        if $r5 == null goto label08;

        $r6 = l8.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left>;

        if $r6 != null goto label09;

     label08:
        $r7 = virtualinvoke l6#15.<java.util.HashMap$TreeNode: java.util.HashMap$Node untreeify(java.util.HashMap)>(l1);

        l2[l5] = $r7;

        return;

     label09:
        l11 = l0;

        l12 = l0.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left>;

        l13 = l0.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode right>;

        if l12 == null goto label23;

        if l13 == null goto label23;

        l15#59 = l13;

     label10:
        $r8 = l15#59.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left>;

        l16#63 = $r8;

        if $r8 == null goto label11;

        l15#59 = l16#63;

        goto label10;

     label11:
        l17 = l15#59.<java.util.HashMap$TreeNode: boolean red>;

        $z0 = l11.<java.util.HashMap$TreeNode: boolean red>;

        l15#59.<java.util.HashMap$TreeNode: boolean red> = $z0;

        l11.<java.util.HashMap$TreeNode: boolean red> = l17;

        l18 = l15#59.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode right>;

        l19 = l11.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent>;

        if l15#59 != l13 goto label12;

        l11.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent> = l15#59;

        l15#59.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode right> = l11;

        goto label15;

     label12:
        l20 = l15#59.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent>;

        l11.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent> = l20;

        if l20 == null goto label14;

        $r10 = l20.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left>;

        if l15#59 != $r10 goto label13;

        l20.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left> = l11;

        goto label14;

     label13:
        l20.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode right> = l11;

     label14:
        l15#59.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode right> = l13;

        if l13 == null goto label15;

        l13.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent> = l15#59;

     label15:
        l11.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left> = null;

        l11.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode right> = l18;

        if l18 == null goto label16;

        l18.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent> = l11;

     label16:
        l15#59.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left> = l12;

        if l12 == null goto label17;

        l12.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent> = l15#59;

     label17:
        l15#59.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent> = l19;

        if l19 != null goto label18;

        l7#17 = l15#59;

        goto label20;

     label18:
        $r15 = l19.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left>;

        if l11 != $r15 goto label19;

        l19.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left> = l15#59;

        goto label20;

     label19:
        l19.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode right> = l15#59;

     label20:
        if l18 == null goto label21;

        l14#134 = l18;

        goto label22;

     label21:
        l14#134 = l11;

     label22:
        goto label26;

     label23:
        if l12 == null goto label24;

        l14#134 = l12;

        goto label26;

     label24:
        if l13 == null goto label25;

        l14#134 = l13;

        goto label26;

     label25:
        l14#134 = l11;

     label26:
        if l14#134 == l11 goto label30;

        $r16 = l11.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent>;

        l14#134.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent> = $r16;

        l15#149 = $r16;

        if l15#149 != null goto label27;

        l7#17 = l14#134;

        goto label29;

     label27:
        $r17 = l15#149.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left>;

        if l11 != $r17 goto label28;

        l15#149.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left> = l14#134;

        goto label29;

     label28:
        l15#149.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode right> = l14#134;

     label29:
        l11.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent> = null;

        l11.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode right> = null;

        l11.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left> = null;

     label30:
        $z1 = l11.<java.util.HashMap$TreeNode: boolean red>;

        if $z1 == 0 goto label31;

        $r18 = l7#17;

        goto label32;

     label31:
        $r18 = staticinvoke <java.util.HashMap$TreeNode: java.util.HashMap$TreeNode balanceDeletion(java.util.HashMap$TreeNode,java.util.HashMap$TreeNode)>(l7#17, l14#134);

     label32:
        l15#173 = $r18;

        if l14#134 != l11 goto label34;

        l16#178 = l11.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent>;

        l11.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent> = null;

        if l16#178 == null goto label34;

        $r19 = l16#178.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left>;

        if l11 != $r19 goto label33;

        l16#178.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left> = null;

        goto label34;

     label33:
        $r20 = l16#178.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode right>;

        if l11 != $r20 goto label34;

        l16#178.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode right> = null;

     label34:
        if l3 == 0 goto label35;

        staticinvoke <java.util.HashMap$TreeNode: void moveRootToFront(java.util.HashMap$Node[],java.util.HashMap$TreeNode)>(l2, l15#173);

     label35:
        return;
    }

    static java.util.HashMap$TreeNode balanceDeletion(java.util.HashMap$TreeNode, java.util.HashMap$TreeNode)
    {
        java.util.HashMap$TreeNode l0#1, l1#2, $r0, l2#10, $r1, l3#22, $r2, l4#27, $r3, $r4, l5#46, l6#49, $r5, $r6, $r7, $r8, l6#83, $r9, $r10, l5#112, l6#115, $r11, $r12, $r13, $r14, l5#149;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;

        l0#1 := @parameter0: java.util.HashMap$TreeNode;

        l1#2 := @parameter1: java.util.HashMap$TreeNode;

     label01:
        if l1#2 == null goto label02;

        if l1#2 != l0#1 goto label03;

     label02:
        return l0#1;

     label03:
        $r0 = l1#2.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent>;

        l2#10 = $r0;

        if $r0 != null goto label04;

        l1#2.<java.util.HashMap$TreeNode: boolean red> = 0;

        return l1#2;

     label04:
        $z0 = l1#2.<java.util.HashMap$TreeNode: boolean red>;

        if $z0 == 0 goto label05;

        l1#2.<java.util.HashMap$TreeNode: boolean red> = 0;

        return l0#1;

     label05:
        $r1 = l2#10.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left>;

        l3#22 = $r1;

        if $r1 != l1#2 goto label23;

        $r2 = l2#10.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode right>;

        l4#27 = $r2;

        if $r2 == null goto label08;

        $z1 = l4#27.<java.util.HashMap$TreeNode: boolean red>;

        if $z1 == 0 goto label08;

        l4#27.<java.util.HashMap$TreeNode: boolean red> = 0;

        l2#10.<java.util.HashMap$TreeNode: boolean red> = 1;

        l0#1 = staticinvoke <java.util.HashMap$TreeNode: java.util.HashMap$TreeNode rotateLeft(java.util.HashMap$TreeNode,java.util.HashMap$TreeNode)>(l0#1, l2#10);

        $r3 = l1#2.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent>;

        l2#10 = $r3;

        if $r3 != null goto label06;

        $r4 = null;

        goto label07;

     label06:
        $r4 = l2#10.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode right>;

     label07:
        l4#27 = $r4;

     label08:
        if l4#27 != null goto label09;

        l1#2 = l2#10;

        goto label01;

     label09:
        l5#46 = l4#27.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left>;

        l6#49 = l4#27.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode right>;

        if l6#49 == null goto label10;

        $z2 = l6#49.<java.util.HashMap$TreeNode: boolean red>;

        if $z2 != 0 goto label12;

     label10:
        if l5#46 == null goto label11;

        $z3 = l5#46.<java.util.HashMap$TreeNode: boolean red>;

        if $z3 != 0 goto label12;

     label11:
        l4#27.<java.util.HashMap$TreeNode: boolean red> = 1;

        l1#2 = l2#10;

        goto label22;

     label12:
        if l6#49 == null goto label13;

        $z4 = l6#49.<java.util.HashMap$TreeNode: boolean red>;

        if $z4 != 0 goto label17;

     label13:
        if l5#46 == null goto label14;

        l5#46.<java.util.HashMap$TreeNode: boolean red> = 0;

     label14:
        l4#27.<java.util.HashMap$TreeNode: boolean red> = 1;

        l0#1 = staticinvoke <java.util.HashMap$TreeNode: java.util.HashMap$TreeNode rotateRight(java.util.HashMap$TreeNode,java.util.HashMap$TreeNode)>(l0#1, l4#27);

        $r5 = l1#2.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent>;

        l2#10 = $r5;

        if $r5 != null goto label15;

        $r6 = null;

        goto label16;

     label15:
        $r6 = l2#10.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode right>;

     label16:
        l4#27 = $r6;

     label17:
        if l4#27 == null goto label20;

        $r7 = l4#27;

        if l2#10 != null goto label18;

        $z5 = 0;

        goto label19;

     label18:
        $z5 = l2#10.<java.util.HashMap$TreeNode: boolean red>;

     label19:
        $r7.<java.util.HashMap$TreeNode: boolean red> = $z5;

        $r8 = l4#27.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode right>;

        l6#83 = $r8;

        if $r8 == null goto label20;

        l6#83.<java.util.HashMap$TreeNode: boolean red> = 0;

     label20:
        if l2#10 == null goto label21;

        l2#10.<java.util.HashMap$TreeNode: boolean red> = 0;

        l0#1 = staticinvoke <java.util.HashMap$TreeNode: java.util.HashMap$TreeNode rotateLeft(java.util.HashMap$TreeNode,java.util.HashMap$TreeNode)>(l0#1, l2#10);

     label21:
        l1#2 = l0#1;

     label22:
        goto label01;

     label23:
        if l3#22 == null goto label26;

        $z6 = l3#22.<java.util.HashMap$TreeNode: boolean red>;

        if $z6 == 0 goto label26;

        l3#22.<java.util.HashMap$TreeNode: boolean red> = 0;

        l2#10.<java.util.HashMap$TreeNode: boolean red> = 1;

        l0#1 = staticinvoke <java.util.HashMap$TreeNode: java.util.HashMap$TreeNode rotateRight(java.util.HashMap$TreeNode,java.util.HashMap$TreeNode)>(l0#1, l2#10);

        $r9 = l1#2.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent>;

        l2#10 = $r9;

        if $r9 != null goto label24;

        $r10 = null;

        goto label25;

     label24:
        $r10 = l2#10.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left>;

     label25:
        l3#22 = $r10;

     label26:
        if l3#22 != null goto label27;

        l1#2 = l2#10;

        goto label01;

     label27:
        l5#112 = l3#22.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left>;

        l6#115 = l3#22.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode right>;

        if l5#112 == null goto label28;

        $z7 = l5#112.<java.util.HashMap$TreeNode: boolean red>;

        if $z7 != 0 goto label30;

     label28:
        if l6#115 == null goto label29;

        $z8 = l6#115.<java.util.HashMap$TreeNode: boolean red>;

        if $z8 != 0 goto label30;

     label29:
        l3#22.<java.util.HashMap$TreeNode: boolean red> = 1;

        l1#2 = l2#10;

        goto label40;

     label30:
        if l5#112 == null goto label31;

        $z9 = l5#112.<java.util.HashMap$TreeNode: boolean red>;

        if $z9 != 0 goto label35;

     label31:
        if l6#115 == null goto label32;

        l6#115.<java.util.HashMap$TreeNode: boolean red> = 0;

     label32:
        l3#22.<java.util.HashMap$TreeNode: boolean red> = 1;

        l0#1 = staticinvoke <java.util.HashMap$TreeNode: java.util.HashMap$TreeNode rotateLeft(java.util.HashMap$TreeNode,java.util.HashMap$TreeNode)>(l0#1, l3#22);

        $r11 = l1#2.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent>;

        l2#10 = $r11;

        if $r11 != null goto label33;

        $r12 = null;

        goto label34;

     label33:
        $r12 = l2#10.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left>;

     label34:
        l3#22 = $r12;

     label35:
        if l3#22 == null goto label38;

        $r13 = l3#22;

        if l2#10 != null goto label36;

        $z10 = 0;

        goto label37;

     label36:
        $z10 = l2#10.<java.util.HashMap$TreeNode: boolean red>;

     label37:
        $r13.<java.util.HashMap$TreeNode: boolean red> = $z10;

        $r14 = l3#22.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left>;

        l5#149 = $r14;

        if $r14 == null goto label38;

        l5#149.<java.util.HashMap$TreeNode: boolean red> = 0;

     label38:
        if l2#10 == null goto label39;

        l2#10.<java.util.HashMap$TreeNode: boolean red> = 0;

        l0#1 = staticinvoke <java.util.HashMap$TreeNode: java.util.HashMap$TreeNode rotateRight(java.util.HashMap$TreeNode,java.util.HashMap$TreeNode)>(l0#1, l2#10);

     label39:
        l1#2 = l0#1;

     label40:
        goto label01;
    }

    final java.util.HashMap$Node untreeify(java.util.HashMap)
    {
        java.util.HashMap$TreeNode l0;
        java.util.HashMap l1;
        java.util.HashMap$Node l5, l2#2, l3#4, l4#6;

        l0 := @this: java.util.HashMap$TreeNode;

        l1 := @parameter0: java.util.HashMap;

        l2#2 = null;

        l3#4 = null;

        l4#6 = l0;

     label1:
        if l4#6 == null goto label4;

        l5 = virtualinvoke l1.<java.util.HashMap: java.util.HashMap$Node replacementNode(java.util.HashMap$Node,java.util.HashMap$Node)>(l4#6, null);

        if l3#4 != null goto label2;

        l2#2 = l5;

        goto label3;

     label2:
        l3#4.<java.util.HashMap$Node: java.util.HashMap$Node next> = l5;

     label3:
        l3#4 = l5;

        l4#6 = l4#6.<java.util.HashMap$Node: java.util.HashMap$Node next>;

        goto label1;

     label4:
        return l2#2;
    }

    final void split(java.util.HashMap, java.util.HashMap$Node[], int, int)
    {
        java.util.HashMap$TreeNode l0, l5, l13, l6#3, l7#5, l8#7, l9#9, l12#15;
        java.util.HashMap l1;
        java.util.HashMap$Node[] l2;
        int l3, l4, l10#11, l11#13, $i0, $i1, $i2, $i3;
        java.util.HashMap$Node $r0, $r3, $r4;

        l0 := @this: java.util.HashMap$TreeNode;

        l1 := @parameter0: java.util.HashMap;

        l2 := @parameter1: java.util.HashMap$Node[];

        l3 := @parameter2: int;

        l4 := @parameter3: int;

        l5 = l0;

        l6#3 = null;

        l7#5 = null;

        l8#7 = null;

        l9#9 = null;

        l10#11 = 0;

        l11#13 = 0;

        l12#15 = l5;

     label01:
        if l12#15 == null goto label08;

        $r0 = l12#15.<java.util.HashMap$TreeNode: java.util.HashMap$Node next>;

        l13 = (java.util.HashMap$TreeNode) $r0;

        l12#15.<java.util.HashMap$TreeNode: java.util.HashMap$Node next> = null;

        $i0 = l12#15.<java.util.HashMap$TreeNode: int hash>;

        $i1 = $i0 & l4;

        if $i1 != 0 goto label04;

        l12#15.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode prev> = l7#5;

        if l7#5 != null goto label02;

        l6#3 = l12#15;

        goto label03;

     label02:
        l7#5.<java.util.HashMap$TreeNode: java.util.HashMap$Node next> = l12#15;

     label03:
        l7#5 = l12#15;

        l10#11 = l10#11 + 1;

        goto label07;

     label04:
        l12#15.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode prev> = l9#9;

        if l9#9 != null goto label05;

        l8#7 = l12#15;

        goto label06;

     label05:
        l9#9.<java.util.HashMap$TreeNode: java.util.HashMap$Node next> = l12#15;

     label06:
        l9#9 = l12#15;

        l11#13 = l11#13 + 1;

     label07:
        l12#15 = l13;

        goto label01;

     label08:
        if l6#3 == null goto label10;

        if l10#11 > 6 goto label09;

        $r3 = virtualinvoke l6#3.<java.util.HashMap$TreeNode: java.util.HashMap$Node untreeify(java.util.HashMap)>(l1);

        l2[l3] = $r3;

        goto label10;

     label09:
        l2[l3] = l6#3;

        if l8#7 == null goto label10;

        virtualinvoke l6#3.<java.util.HashMap$TreeNode: void treeify(java.util.HashMap$Node[])>(l2);

     label10:
        if l8#7 == null goto label12;

        if l11#13 > 6 goto label11;

        $i2 = l3 + l4;

        $r4 = virtualinvoke l8#7.<java.util.HashMap$TreeNode: java.util.HashMap$Node untreeify(java.util.HashMap)>(l1);

        l2[$i2] = $r4;

        goto label12;

     label11:
        $i3 = l3 + l4;

        l2[$i3] = l8#7;

        if l6#3 == null goto label12;

        virtualinvoke l8#7.<java.util.HashMap$TreeNode: void treeify(java.util.HashMap$Node[])>(l2);

     label12:
        return;
    }

    final java.util.HashMap$TreeNode putTreeVal(java.util.HashMap, java.util.HashMap$Node[], int, java.lang.Object, java.lang.Object)
    {
        java.util.HashMap$TreeNode l0, l8, l15, $r0, $r1, l9#10, $r4, l14#43, $r5, l13#50, $r6, l14#54, $r7, l13#66, $r8, $r10, $r11;
        java.util.HashMap l1;
        java.util.HashMap$Node[] l2;
        int l3, l11, $i0, l10#16, $i1;
        java.lang.Object l4, l5, l12, $r2;
        java.lang.Class l6#2, $r3;
        boolean l7#4, $z0;
        java.util.HashMap$Node l14#74;

        l0 := @this: java.util.HashMap$TreeNode;

        l1 := @parameter0: java.util.HashMap;

        l2 := @parameter1: java.util.HashMap$Node[];

        l3 := @parameter2: int;

        l4 := @parameter3: java.lang.Object;

        l5 := @parameter4: java.lang.Object;

        l6#2 = null;

        l7#4 = 0;

        $r0 = l0.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent>;

        if $r0 == null goto label01;

        $r1 = virtualinvoke l0.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode root()>();

        goto label02;

     label01:
        $r1 = l0;

     label02:
        l8 = $r1;

        l9#10 = l8;

     label03:
        $i0 = l9#10.<java.util.HashMap$TreeNode: int hash>;

        l11 = $i0;

        if $i0 <= l3 goto label04;

        l10#16 = -1;

        goto label13;

     label04:
        if l11 >= l3 goto label05;

        l10#16 = 1;

        goto label13;

     label05:
        $r2 = l9#10.<java.util.HashMap$TreeNode: java.lang.Object key>;

        l12 = $r2;

        if $r2 == l4 goto label06;

        if l4 == null goto label07;

        $z0 = virtualinvoke l4.<java.lang.Object: boolean equals(java.lang.Object)>(l12);

        if $z0 == 0 goto label07;

     label06:
        return l9#10;

     label07:
        if l6#2 != null goto label08;

        $r3 = staticinvoke <java.util.HashMap: java.lang.Class comparableClassFor(java.lang.Object)>(l4);

        l6#2 = $r3;

        if $r3 == null goto label09;

     label08:
        $i1 = staticinvoke <java.util.HashMap: int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)>(l6#2, l4, l12);

        l10#16 = $i1;

        if $i1 != 0 goto label13;

     label09:
        if l7#4 != 0 goto label12;

        l7#4 = 1;

        $r4 = l9#10.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left>;

        l14#43 = $r4;

        if $r4 == null goto label10;

        $r5 = virtualinvoke l14#43.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>(l3, l4, l6#2);

        l13#50 = $r5;

        if $r5 != null goto label11;

     label10:
        $r6 = l9#10.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode right>;

        l14#54 = $r6;

        if $r6 == null goto label12;

        $r7 = virtualinvoke l14#54.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode find(int,java.lang.Object,java.lang.Class)>(l3, l4, l6#2);

        l13#50 = $r7;

        if $r7 == null goto label12;

     label11:
        return l13#50;

     label12:
        l10#16 = staticinvoke <java.util.HashMap$TreeNode: int tieBreakOrder(java.lang.Object,java.lang.Object)>(l4, l12);

     label13:
        l13#66 = l9#10;

        if l10#16 > 0 goto label14;

        $r8 = l9#10.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left>;

        goto label15;

     label14:
        $r8 = l9#10.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode right>;

     label15:
        l9#10 = $r8;

        if $r8 != null goto label19;

        l14#74 = l13#66.<java.util.HashMap$TreeNode: java.util.HashMap$Node next>;

        l15 = virtualinvoke l1.<java.util.HashMap: java.util.HashMap$TreeNode newTreeNode(int,java.lang.Object,java.lang.Object,java.util.HashMap$Node)>(l3, l4, l5, l14#74);

        if l10#16 > 0 goto label16;

        l13#66.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode left> = l15;

        goto label17;

     label16:
        l13#66.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode right> = l15;

     label17:
        l13#66.<java.util.HashMap$TreeNode: java.util.HashMap$Node next> = l15;

        l15.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode prev> = l13#66;

        l15.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode parent> = l13#66;

        if l14#74 == null goto label18;

        $r10 = (java.util.HashMap$TreeNode) l14#74;

        $r10.<java.util.HashMap$TreeNode: java.util.HashMap$TreeNode prev> = l15;

     label18:
        $r11 = staticinvoke <java.util.HashMap$TreeNode: java.util.HashMap$TreeNode balanceInsertion(java.util.HashMap$TreeNode,java.util.HashMap$TreeNode)>(l8, l15);

        staticinvoke <java.util.HashMap$TreeNode: void moveRootToFront(java.util.HashMap$Node[],java.util.HashMap$TreeNode)>(l2, $r11);

        return null;

     label19:
        goto label03;
    }


