    public static weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction[] values()
    {
        weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction[]) $r1;

        return $r2;
    }

    static void <clinit>()
    {
        weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$1 $r0;
        weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$2 $r1;
        weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$3 $r2;
        weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$4 $r3;
        weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$5 $r4;
        weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$6 $r5;
        weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$7 $r6;
        weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$8 $r7;
        weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$9 $r8;
        weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$10 $r9;
        weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$11 $r10;
        weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$12 $r11;
        weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$13 $r12;
        weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction[] $r13;
        weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26;

        $r0 = new weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$1;

        specialinvoke $r0.<weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$1: void <init>(java.lang.String,int,java.lang.String)>("THRESHOLD", 0, "threshold");

        <weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction THRESHOLD> = $r0;

        $r1 = new weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$2;

        specialinvoke $r1.<weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$2: void <init>(java.lang.String,int,java.lang.String)>("LOGISTIC", 1, "logistic");

        <weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction LOGISTIC> = $r1;

        $r2 = new weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$3;

        specialinvoke $r2.<weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$3: void <init>(java.lang.String,int,java.lang.String)>("TANH", 2, "tanh");

        <weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction TANH> = $r2;

        $r3 = new weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$4;

        specialinvoke $r3.<weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$4: void <init>(java.lang.String,int,java.lang.String)>("IDENTITY", 3, "identity");

        <weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction IDENTITY> = $r3;

        $r4 = new weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$5;

        specialinvoke $r4.<weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$5: void <init>(java.lang.String,int,java.lang.String)>("EXPONENTIAL", 4, "exponential");

        <weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction EXPONENTIAL> = $r4;

        $r5 = new weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$6;

        specialinvoke $r5.<weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$6: void <init>(java.lang.String,int,java.lang.String)>("RECIPROCAL", 5, "reciprocal");

        <weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction RECIPROCAL> = $r5;

        $r6 = new weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$7;

        specialinvoke $r6.<weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$7: void <init>(java.lang.String,int,java.lang.String)>("SQUARE", 6, "square");

        <weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction SQUARE> = $r6;

        $r7 = new weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$8;

        specialinvoke $r7.<weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$8: void <init>(java.lang.String,int,java.lang.String)>("GAUSS", 7, "gauss");

        <weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction GAUSS> = $r7;

        $r8 = new weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$9;

        specialinvoke $r8.<weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$9: void <init>(java.lang.String,int,java.lang.String)>("SINE", 8, "sine");

        <weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction SINE> = $r8;

        $r9 = new weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$10;

        specialinvoke $r9.<weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$10: void <init>(java.lang.String,int,java.lang.String)>("COSINE", 9, "cosine");

        <weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction COSINE> = $r9;

        $r10 = new weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$11;

        specialinvoke $r10.<weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$11: void <init>(java.lang.String,int,java.lang.String)>("ELLICOT", 10, "ellicot");

        <weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction ELLICOT> = $r10;

        $r11 = new weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$12;

        specialinvoke $r11.<weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$12: void <init>(java.lang.String,int,java.lang.String)>("ARCTAN", 11, "arctan");

        <weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction ARCTAN> = $r11;

        $r12 = new weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$13;

        specialinvoke $r12.<weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction$13: void <init>(java.lang.String,int,java.lang.String)>("RADIALBASIS", 12, "radialBasis");

        <weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction RADIALBASIS> = $r12;

        $r13 = newarray (weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction)[13];

        $r14 = <weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction THRESHOLD>;

        $r13[0] = $r14;

        $r15 = <weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction LOGISTIC>;

        $r13[1] = $r15;

        $r16 = <weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction TANH>;

        $r13[2] = $r16;

        $r17 = <weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction IDENTITY>;

        $r13[3] = $r17;

        $r18 = <weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction EXPONENTIAL>;

        $r13[4] = $r18;

        $r19 = <weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction RECIPROCAL>;

        $r13[5] = $r19;

        $r20 = <weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction SQUARE>;

        $r13[6] = $r20;

        $r21 = <weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction GAUSS>;

        $r13[7] = $r21;

        $r22 = <weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction SINE>;

        $r13[8] = $r22;

        $r23 = <weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction COSINE>;

        $r13[9] = $r23;

        $r24 = <weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction ELLICOT>;

        $r13[10] = $r24;

        $r25 = <weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction ARCTAN>;

        $r13[11] = $r25;

        $r26 = <weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction RADIALBASIS>;

        $r13[12] = $r26;

        <weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction[] $VALUES> = $r13;

        return;
    }

    void <init>(java.lang.String, int, java.lang.String, weka.classifiers.pmml.consumer.NeuralNetwork$1)
    {
        weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction this;
        java.lang.String x0, x2;
        int x1;
        weka.classifiers.pmml.consumer.NeuralNetwork$1 x3;

        this := @this: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction;

        x0 := @parameter0: java.lang.String;

        x1 := @parameter1: int;

        x2 := @parameter2: java.lang.String;

        x3 := @parameter3: weka.classifiers.pmml.consumer.NeuralNetwork$1;

        specialinvoke this.<weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: void <init>(java.lang.String,int,java.lang.String)>(x0, x1, x2);

        return;
    }

    private void <init>(java.lang.String, int, java.lang.String)
    {
        weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction this;
        java.lang.String l1, name;
        int l2;

        this := @this: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: int;

        name := @parameter2: java.lang.String;

        specialinvoke this.<java.lang.Enum: void <init>(java.lang.String,int)>(l1, l2);

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: java.lang.String m_stringVal> = name;

        return;
    }

    public java.lang.String toString()
    {
        weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction this;
        java.lang.String $r0;

        this := @this: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction;

        $r0 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: java.lang.String m_stringVal>;

        return $r0;
    }


