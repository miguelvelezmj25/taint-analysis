    static void <clinit>()
    {
        java.util.concurrent.ThreadPoolExecutor$AbortPolicy $r0;
        java.lang.RuntimePermission $r1;

        $r0 = new java.util.concurrent.ThreadPoolExecutor$AbortPolicy;

        specialinvoke $r0.<java.util.concurrent.ThreadPoolExecutor$AbortPolicy: void <init>()>();

        <java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.RejectedExecutionHandler defaultHandler> = $r0;

        $r1 = new java.lang.RuntimePermission;

        specialinvoke $r1.<java.lang.RuntimePermission: void <init>(java.lang.String)>("modifyThread");

        <java.util.concurrent.ThreadPoolExecutor: java.lang.RuntimePermission shutdownPerm> = $r1;

        return;
    }

    public void shutdown()
    {
        java.util.concurrent.ThreadPoolExecutor l0;
        java.util.concurrent.locks.ReentrantLock l1;
        java.lang.Throwable l2, $r0;

        l0 := @this: java.util.concurrent.ThreadPoolExecutor;

        l1 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;

        virtualinvoke l1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        specialinvoke l0.<java.util.concurrent.ThreadPoolExecutor: void checkShutdownAccess()>();

        specialinvoke l0.<java.util.concurrent.ThreadPoolExecutor: void advanceRunState(int)>(0);

        specialinvoke l0.<java.util.concurrent.ThreadPoolExecutor: void interruptIdleWorkers()>();

        virtualinvoke l0.<java.util.concurrent.ThreadPoolExecutor: void onShutdown()>();

     label2:
        virtualinvoke l1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label4;

     label3:
        $r0 := @caughtexception;

        l2 = $r0;

        virtualinvoke l1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw l2;

     label4:
        virtualinvoke l0.<java.util.concurrent.ThreadPoolExecutor: void tryTerminate()>();

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void checkShutdownAccess()
    {
        java.util.concurrent.ThreadPoolExecutor l0;
        java.lang.SecurityManager l1;
        java.util.concurrent.locks.ReentrantLock l2;
        java.util.Iterator l3;
        java.util.concurrent.ThreadPoolExecutor$Worker l4;
        java.lang.Throwable l5, $r4;
        java.lang.RuntimePermission $r0;
        java.util.HashSet $r1;
        boolean $z0;
        java.lang.Object $r2;
        java.lang.Thread $r3;

        l0 := @this: java.util.concurrent.ThreadPoolExecutor;

        l1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if l1 == null goto label7;

        $r0 = <java.util.concurrent.ThreadPoolExecutor: java.lang.RuntimePermission shutdownPerm>;

        virtualinvoke l1.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r0);

        l2 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;

        virtualinvoke l2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r1 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.HashSet workers>;

        l3 = virtualinvoke $r1.<java.util.HashSet: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        l4 = (java.util.concurrent.ThreadPoolExecutor$Worker) $r2;

        $r3 = l4.<java.util.concurrent.ThreadPoolExecutor$Worker: java.lang.Thread thread>;

        virtualinvoke l1.<java.lang.SecurityManager: void checkAccess(java.lang.Thread)>($r3);

        goto label2;

     label3:
        virtualinvoke l2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label7;

     label4:
        $r4 := @caughtexception;

     label5:
        l5 = $r4;

     label6:
        virtualinvoke l2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw l5;

     label7:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void advanceRunState(int)
    {
        java.util.concurrent.ThreadPoolExecutor l0;
        int l1, l2, $i0, $i1;
        java.util.concurrent.atomic.AtomicInteger $r0, $r1;
        boolean $z0, $z1;

        l0 := @this: java.util.concurrent.ThreadPoolExecutor;

        l1 := @parameter0: int;

     label1:
        $r0 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        l2 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $z0 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean runStateAtLeast(int,int)>(l2, l1);

        if $z0 != 0 goto label3;

        $r1 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        $i0 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int workerCountOf(int)>(l2);

        $i1 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int ctlOf(int,int)>(l1, $i0);

        $z1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(l2, $i1);

        if $z1 == 0 goto label2;

        goto label3;

     label2:
        goto label1;

     label3:
        return;
    }

    private void interruptIdleWorkers()
    {
        java.util.concurrent.ThreadPoolExecutor l0;

        l0 := @this: java.util.concurrent.ThreadPoolExecutor;

        specialinvoke l0.<java.util.concurrent.ThreadPoolExecutor: void interruptIdleWorkers(boolean)>(0);

        return;
    }

    void onShutdown()
    {
        java.util.concurrent.ThreadPoolExecutor l0;

        l0 := @this: java.util.concurrent.ThreadPoolExecutor;

        return;
    }

    final void tryTerminate()
    {
        java.util.concurrent.ThreadPoolExecutor l0;
        int l1, $i0, $i1, $i2, $i3, $i4;
        java.util.concurrent.locks.ReentrantLock l2;
        java.lang.Throwable l3, l4, $r5, $r8;
        java.util.concurrent.atomic.AtomicInteger $r0, $r2, $r3, $r6;
        boolean $z0, $z1, $z2, $z3;
        java.util.concurrent.BlockingQueue $r1;
        java.util.concurrent.locks.Condition $r4, $r7;

        l0 := @this: java.util.concurrent.ThreadPoolExecutor;

     label01:
        $r0 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        l1 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $z0 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean isRunning(int)>(l1);

        if $z0 != 0 goto label02;

        $z1 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean runStateAtLeast(int,int)>(l1, 1073741824);

        if $z1 != 0 goto label02;

        $i0 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int runStateOf(int)>(l1);

        if $i0 != 0 goto label03;

        $r1 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue>;

        $z2 = interfaceinvoke $r1.<java.util.concurrent.BlockingQueue: boolean isEmpty()>();

        if $z2 != 0 goto label03;

     label02:
        return;

     label03:
        $i1 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int workerCountOf(int)>(l1);

        if $i1 == 0 goto label04;

        specialinvoke l0.<java.util.concurrent.ThreadPoolExecutor: void interruptIdleWorkers(boolean)>(1);

        return;

     label04:
        l2 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;

        virtualinvoke l2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label05:
        $r2 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        $i2 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int ctlOf(int,int)>(1073741824, 0);

        $z3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(l1, $i2);

        if $z3 == 0 goto label10;

     label06:
        virtualinvoke l0.<java.util.concurrent.ThreadPoolExecutor: void terminated()>();

     label07:
        $r3 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        $i3 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int ctlOf(int,int)>(1610612736, 0);

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: void set(int)>($i3);

        $r4 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.Condition termination>;

        interfaceinvoke $r4.<java.util.concurrent.locks.Condition: void signalAll()>();

        goto label09;

     label08:
        $r5 := @caughtexception;

        l3 = $r5;

        $r6 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        $i4 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int ctlOf(int,int)>(1610612736, 0);

        virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: void set(int)>($i4);

        $r7 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.Condition termination>;

        interfaceinvoke $r7.<java.util.concurrent.locks.Condition: void signalAll()>();

        throw l3;

     label09:
        virtualinvoke l2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return;

     label10:
        virtualinvoke l2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label14;

     label11:
        $r8 := @caughtexception;

     label12:
        l4 = $r8;

     label13:
        virtualinvoke l2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw l4;

     label14:
        goto label01;

        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label05 to label09 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    private static int ctlOf(int, int)
    {
        int l0, l1, $i0;

        l0 := @parameter0: int;

        l1 := @parameter1: int;

        $i0 = l0 | l1;

        return $i0;
    }

    private static int workerCountOf(int)
    {
        int l0, $i0;

        l0 := @parameter0: int;

        $i0 = l0 & 536870911;

        return $i0;
    }

    private static boolean runStateAtLeast(int, int)
    {
        int l0, l1;
        boolean $z0;

        l0 := @parameter0: int;

        l1 := @parameter1: int;

        if l0 < l1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static int runStateOf(int)
    {
        int l0, $i0;

        l0 := @parameter0: int;

        $i0 = l0 & -536870912;

        return $i0;
    }

    private static boolean isRunning(int)
    {
        int l0;
        boolean $z0;

        l0 := @parameter0: int;

        if l0 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void interruptIdleWorkers(boolean)
    {
        java.util.concurrent.ThreadPoolExecutor l0;
        boolean l1, $z0, $z1, $z2;
        java.util.concurrent.locks.ReentrantLock l2;
        java.util.Iterator l3;
        java.util.concurrent.ThreadPoolExecutor$Worker l4;
        java.lang.Thread l5;
        java.lang.SecurityException l6, $r2;
        java.lang.Throwable l7, l8, $r3, $r4;
        java.util.HashSet $r0;
        java.lang.Object $r1;

        l0 := @this: java.util.concurrent.ThreadPoolExecutor;

        l1 := @parameter0: boolean;

        l2 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;

        virtualinvoke l2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label01:
        $r0 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.HashSet workers>;

        l3 = virtualinvoke $r0.<java.util.HashSet: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r1 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        l4 = (java.util.concurrent.ThreadPoolExecutor$Worker) $r1;

        l5 = l4.<java.util.concurrent.ThreadPoolExecutor$Worker: java.lang.Thread thread>;

        $z1 = virtualinvoke l5.<java.lang.Thread: boolean isInterrupted()>();

        if $z1 != 0 goto label11;

        $z2 = virtualinvoke l4.<java.util.concurrent.ThreadPoolExecutor$Worker: boolean tryLock()>();

        if $z2 == 0 goto label11;

     label03:
        virtualinvoke l5.<java.lang.Thread: void interrupt()>();

     label04:
        virtualinvoke l4.<java.util.concurrent.ThreadPoolExecutor$Worker: void unlock()>();

        goto label11;

     label05:
        $r2 := @caughtexception;

     label06:
        l6 = $r2;

     label07:
        virtualinvoke l4.<java.util.concurrent.ThreadPoolExecutor$Worker: void unlock()>();

        goto label11;

     label08:
        $r3 := @caughtexception;

     label09:
        l7 = $r3;

     label10:
        virtualinvoke l4.<java.util.concurrent.ThreadPoolExecutor$Worker: void unlock()>();

        throw l7;

     label11:
        if l1 == 0 goto label12;

        goto label13;

     label12:
        goto label02;

     label13:
        virtualinvoke l2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label17;

     label14:
        $r4 := @caughtexception;

     label15:
        l8 = $r4;

     label16:
        virtualinvoke l2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw l8;

     label17:
        return;

        catch java.lang.SecurityException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label01 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    protected void terminated()
    {
        java.util.concurrent.ThreadPoolExecutor l0;

        l0 := @this: java.util.concurrent.ThreadPoolExecutor;

        return;
    }

    public void execute(java.lang.Runnable)
    {
        java.util.concurrent.ThreadPoolExecutor l0;
        java.lang.Runnable l1;
        int l3, l2#7, $i0, $i1, $i2;
        java.lang.NullPointerException $r0;
        java.util.concurrent.atomic.AtomicInteger $r1, $r2, $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z6;
        java.util.concurrent.BlockingQueue $r3;

        l0 := @this: java.util.concurrent.ThreadPoolExecutor;

        l1 := @parameter0: java.lang.Runnable;

        if l1 != null goto label1;

        $r0 = new java.lang.NullPointerException;

        specialinvoke $r0.<java.lang.NullPointerException: void <init>()>();

        throw $r0;

     label1:
        $r1 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        l2#7 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i0 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int workerCountOf(int)>(l2#7);

        $i1 = l0.<java.util.concurrent.ThreadPoolExecutor: int corePoolSize>;

        if $i0 >= $i1 goto label3;

        $z0 = specialinvoke l0.<java.util.concurrent.ThreadPoolExecutor: boolean addWorker(java.lang.Runnable,boolean)>(l1, 1);

        if $z0 == 0 goto label2;

        return;

     label2:
        $r2 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        l2#7 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int get()>();

     label3:
        $z1 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean isRunning(int)>(l2#7);

        if $z1 == 0 goto label6;

        $r3 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue>;

        $z2 = interfaceinvoke $r3.<java.util.concurrent.BlockingQueue: boolean offer(java.lang.Object)>(l1);

        if $z2 == 0 goto label6;

        $r4 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        l3 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $z3 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean isRunning(int)>(l3);

        if $z3 != 0 goto label4;

        $z4 = virtualinvoke l0.<java.util.concurrent.ThreadPoolExecutor: boolean remove(java.lang.Runnable)>(l1);

        if $z4 == 0 goto label4;

        virtualinvoke l0.<java.util.concurrent.ThreadPoolExecutor: void reject(java.lang.Runnable)>(l1);

        goto label5;

     label4:
        $i2 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int workerCountOf(int)>(l3);

        if $i2 != 0 goto label5;

        specialinvoke l0.<java.util.concurrent.ThreadPoolExecutor: boolean addWorker(java.lang.Runnable,boolean)>(null, 0);

     label5:
        goto label7;

     label6:
        $z6 = specialinvoke l0.<java.util.concurrent.ThreadPoolExecutor: boolean addWorker(java.lang.Runnable,boolean)>(l1, 0);

        if $z6 != 0 goto label7;

        virtualinvoke l0.<java.util.concurrent.ThreadPoolExecutor: void reject(java.lang.Runnable)>(l1);

     label7:
        return;
    }

    private boolean addWorker(java.lang.Runnable, boolean)
    {
        java.util.concurrent.ThreadPoolExecutor l0;
        java.lang.Runnable l1;
        boolean l2, $z0, $z1, l3#36, l4#38, $z2;
        java.lang.Thread l6;
        java.util.concurrent.locks.ReentrantLock l7;
        int l8, l9, l3#4, l4#7, l5#17, $i1, $i2, $i3, $i4;
        java.lang.Throwable l10, l11, $r8, $r9;
        java.util.concurrent.atomic.AtomicInteger $r0, $r2, $r4;
        java.util.concurrent.BlockingQueue $r1;
        java.util.concurrent.ThreadPoolExecutor$Worker l5#40, $r3;
        java.lang.IllegalThreadStateException $r5;
        java.util.HashSet $r6, $r7;

        l0 := @this: java.util.concurrent.ThreadPoolExecutor;

        l1 := @parameter0: java.lang.Runnable;

        l2 := @parameter1: boolean;

     label01:
        $r0 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        l3#4 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        l4#7 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int runStateOf(int)>(l3#4);

        if l4#7 < 0 goto label03;

        if l4#7 != 0 goto label02;

        if l1 != null goto label02;

        $r1 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue>;

        $z0 = interfaceinvoke $r1.<java.util.concurrent.BlockingQueue: boolean isEmpty()>();

        if $z0 == 0 goto label03;

     label02:
        return 0;

     label03:
        l5#17 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int workerCountOf(int)>(l3#4);

        if l5#17 >= 536870911 goto label06;

        if l2 == 0 goto label04;

        $i1 = l0.<java.util.concurrent.ThreadPoolExecutor: int corePoolSize>;

        goto label05;

     label04:
        $i1 = l0.<java.util.concurrent.ThreadPoolExecutor: int maximumPoolSize>;

     label05:
        if l5#17 < $i1 goto label07;

     label06:
        return 0;

     label07:
        $z1 = specialinvoke l0.<java.util.concurrent.ThreadPoolExecutor: boolean compareAndIncrementWorkerCount(int)>(l3#4);

        if $z1 == 0 goto label08;

        goto label10;

     label08:
        $r2 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        l3#4 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i2 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int runStateOf(int)>(l3#4);

        if $i2 == l4#7 goto label09;

        goto label01;

     label09:
        goto label03;

     label10:
        l3#36 = 0;

        l4#38 = 0;

        l5#40 = null;

     label11:
        $r3 = new java.util.concurrent.ThreadPoolExecutor$Worker;

        specialinvoke $r3.<java.util.concurrent.ThreadPoolExecutor$Worker: void <init>(java.util.concurrent.ThreadPoolExecutor,java.lang.Runnable)>(l0, l1);

        l5#40 = $r3;

        l6 = l5#40.<java.util.concurrent.ThreadPoolExecutor$Worker: java.lang.Thread thread>;

        if l6 == null goto label21;

        l7 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;

        virtualinvoke l7.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label12:
        $r4 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        $i3 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        l8 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int runStateOf(int)>($i3);

        if l8 < 0 goto label13;

        if l8 != 0 goto label16;

        if l1 != null goto label16;

     label13:
        $z2 = virtualinvoke l6.<java.lang.Thread: boolean isAlive()>();

        if $z2 == 0 goto label14;

        $r5 = new java.lang.IllegalThreadStateException;

        specialinvoke $r5.<java.lang.IllegalThreadStateException: void <init>()>();

        throw $r5;

     label14:
        $r6 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.HashSet workers>;

        virtualinvoke $r6.<java.util.HashSet: boolean add(java.lang.Object)>(l5#40);

        $r7 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.HashSet workers>;

        l9 = virtualinvoke $r7.<java.util.HashSet: int size()>();

        $i4 = l0.<java.util.concurrent.ThreadPoolExecutor: int largestPoolSize>;

        if l9 <= $i4 goto label15;

        l0.<java.util.concurrent.ThreadPoolExecutor: int largestPoolSize> = l9;

     label15:
        l4#38 = 1;

     label16:
        virtualinvoke l7.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label20;

     label17:
        $r8 := @caughtexception;

     label18:
        l10 = $r8;

     label19:
        virtualinvoke l7.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw l10;

     label20:
        if l4#38 == 0 goto label21;

        virtualinvoke l6.<java.lang.Thread: void start()>();

        l3#36 = 1;

     label21:
        if l3#36 != 0 goto label26;

        specialinvoke l0.<java.util.concurrent.ThreadPoolExecutor: void addWorkerFailed(java.util.concurrent.ThreadPoolExecutor$Worker)>(l5#40);

        goto label26;

     label22:
        $r9 := @caughtexception;

     label23:
        l11 = $r9;

     label24:
        if l3#36 != 0 goto label25;

        specialinvoke l0.<java.util.concurrent.ThreadPoolExecutor: void addWorkerFailed(java.util.concurrent.ThreadPoolExecutor$Worker)>(l5#40);

     label25:
        throw l11;

     label26:
        return l3#36;

        catch java.lang.Throwable from label12 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
        catch java.lang.Throwable from label11 to label21 with label22;
        catch java.lang.Throwable from label23 to label24 with label22;
    }

    public boolean remove(java.lang.Runnable)
    {
        java.util.concurrent.ThreadPoolExecutor l0;
        java.lang.Runnable l1;
        boolean l2;
        java.util.concurrent.BlockingQueue $r0;

        l0 := @this: java.util.concurrent.ThreadPoolExecutor;

        l1 := @parameter0: java.lang.Runnable;

        $r0 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue>;

        l2 = interfaceinvoke $r0.<java.util.concurrent.BlockingQueue: boolean remove(java.lang.Object)>(l1);

        virtualinvoke l0.<java.util.concurrent.ThreadPoolExecutor: void tryTerminate()>();

        return l2;
    }

    final void reject(java.lang.Runnable)
    {
        java.util.concurrent.ThreadPoolExecutor l0;
        java.lang.Runnable l1;
        java.util.concurrent.RejectedExecutionHandler $r0;

        l0 := @this: java.util.concurrent.ThreadPoolExecutor;

        l1 := @parameter0: java.lang.Runnable;

        $r0 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.RejectedExecutionHandler handler>;

        interfaceinvoke $r0.<java.util.concurrent.RejectedExecutionHandler: void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)>(l1, l0);

        return;
    }

    private boolean compareAndIncrementWorkerCount(int)
    {
        java.util.concurrent.ThreadPoolExecutor l0;
        int l1, $i0;
        java.util.concurrent.atomic.AtomicInteger $r0;
        boolean $z0;

        l0 := @this: java.util.concurrent.ThreadPoolExecutor;

        l1 := @parameter0: int;

        $r0 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        $i0 = l1 + 1;

        $z0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(l1, $i0);

        return $z0;
    }

    private void addWorkerFailed(java.util.concurrent.ThreadPoolExecutor$Worker)
    {
        java.util.concurrent.ThreadPoolExecutor l0;
        java.util.concurrent.ThreadPoolExecutor$Worker l1;
        java.util.concurrent.locks.ReentrantLock l2;
        java.lang.Throwable l3, $r1;
        java.util.HashSet $r0;

        l0 := @this: java.util.concurrent.ThreadPoolExecutor;

        l1 := @parameter0: java.util.concurrent.ThreadPoolExecutor$Worker;

        l2 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;

        virtualinvoke l2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        if l1 == null goto label2;

        $r0 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.HashSet workers>;

        virtualinvoke $r0.<java.util.HashSet: boolean remove(java.lang.Object)>(l1);

     label2:
        specialinvoke l0.<java.util.concurrent.ThreadPoolExecutor: void decrementWorkerCount()>();

        virtualinvoke l0.<java.util.concurrent.ThreadPoolExecutor: void tryTerminate()>();

     label3:
        virtualinvoke l2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label5;

     label4:
        $r1 := @caughtexception;

        l3 = $r1;

        virtualinvoke l2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw l3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    private void decrementWorkerCount()
    {
        java.util.concurrent.ThreadPoolExecutor l0;
        java.util.concurrent.atomic.AtomicInteger $r0;
        int $i0;
        boolean $z0;

        l0 := @this: java.util.concurrent.ThreadPoolExecutor;

     label1:
        $r0 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        $i0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $z0 = specialinvoke l0.<java.util.concurrent.ThreadPoolExecutor: boolean compareAndDecrementWorkerCount(int)>($i0);

        if $z0 == 0 goto label1;

        return;
    }

    private boolean compareAndDecrementWorkerCount(int)
    {
        java.util.concurrent.ThreadPoolExecutor l0;
        int l1, $i0;
        java.util.concurrent.atomic.AtomicInteger $r0;
        boolean $z0;

        l0 := @this: java.util.concurrent.ThreadPoolExecutor;

        l1 := @parameter0: int;

        $r0 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        $i0 = l1 - 1;

        $z0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(l1, $i0);

        return $z0;
    }

    public java.util.concurrent.ThreadFactory getThreadFactory()
    {
        java.util.concurrent.ThreadPoolExecutor l0;
        java.util.concurrent.ThreadFactory $r0;

        l0 := @this: java.util.concurrent.ThreadPoolExecutor;

        $r0 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.ThreadFactory threadFactory>;

        return $r0;
    }

    public void <init>(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue)
    {
        java.util.concurrent.ThreadPoolExecutor l0;
        int l1, l2;
        long l3;
        java.util.concurrent.TimeUnit l5;
        java.util.concurrent.BlockingQueue l6;
        java.util.concurrent.ThreadFactory $r0;
        java.util.concurrent.RejectedExecutionHandler $r1;

        l0 := @this: java.util.concurrent.ThreadPoolExecutor;

        l1 := @parameter0: int;

        l2 := @parameter1: int;

        l3 := @parameter2: long;

        l5 := @parameter3: java.util.concurrent.TimeUnit;

        l6 := @parameter4: java.util.concurrent.BlockingQueue;

        $r0 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();

        $r1 = <java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.RejectedExecutionHandler defaultHandler>;

        specialinvoke l0.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>(l1, l2, l3, l5, l6, $r0, $r1);

        return;
    }

    protected void finalize()
    {
        java.util.concurrent.ThreadPoolExecutor l0;

        l0 := @this: java.util.concurrent.ThreadPoolExecutor;

        virtualinvoke l0.<java.util.concurrent.ThreadPoolExecutor: void shutdown()>();

        return;
    }

    public void <init>(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue, java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler)
    {
        java.util.concurrent.ThreadPoolExecutor l0;
        int l1, l2, $i0;
        long l3, $l2;
        java.util.concurrent.TimeUnit l5;
        java.util.concurrent.BlockingQueue l6;
        java.util.concurrent.ThreadFactory l7;
        java.util.concurrent.RejectedExecutionHandler l8;
        java.util.concurrent.atomic.AtomicInteger $r0;
        java.util.concurrent.locks.ReentrantLock $r1, $r3;
        java.util.HashSet $r2;
        java.util.concurrent.locks.Condition $r4;
        byte $b1;
        java.lang.IllegalArgumentException $r5;
        java.lang.NullPointerException $r6;

        l0 := @this: java.util.concurrent.ThreadPoolExecutor;

        l1 := @parameter0: int;

        l2 := @parameter1: int;

        l3 := @parameter2: long;

        l5 := @parameter3: java.util.concurrent.TimeUnit;

        l6 := @parameter4: java.util.concurrent.BlockingQueue;

        l7 := @parameter5: java.util.concurrent.ThreadFactory;

        l8 := @parameter6: java.util.concurrent.RejectedExecutionHandler;

        specialinvoke l0.<java.util.concurrent.AbstractExecutorService: void <init>()>();

        $r0 = new java.util.concurrent.atomic.AtomicInteger;

        $i0 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int ctlOf(int,int)>(-536870912, 0);

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>($i0);

        l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl> = $r0;

        $r1 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        l0.<java.util.concurrent.ThreadPoolExecutor: java.util.HashSet workers> = $r2;

        $r3 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>();

        l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.Condition termination> = $r4;

        if l1 < 0 goto label1;

        if l2 <= 0 goto label1;

        if l2 < l1 goto label1;

        $b1 = l3 cmp 0L;

        if $b1 >= 0 goto label2;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;

     label2:
        if l6 == null goto label3;

        if l7 == null goto label3;

        if l8 != null goto label4;

     label3:
        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>()>();

        throw $r6;

     label4:
        l0.<java.util.concurrent.ThreadPoolExecutor: int corePoolSize> = l1;

        l0.<java.util.concurrent.ThreadPoolExecutor: int maximumPoolSize> = l2;

        l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue> = l6;

        $l2 = virtualinvoke l5.<java.util.concurrent.TimeUnit: long toNanos(long)>(l3);

        l0.<java.util.concurrent.ThreadPoolExecutor: long keepAliveTime> = $l2;

        l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.ThreadFactory threadFactory> = l7;

        l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.RejectedExecutionHandler handler> = l8;

        return;
    }

    public java.lang.String toString()
    {
        java.util.concurrent.ThreadPoolExecutor l0;
        java.util.concurrent.locks.ReentrantLock l5;
        int l3, l4#8, l6#35, $i1;
        java.lang.Throwable l8, $r3;
        long l1#6, $l0;
        java.util.HashSet $r0, $r1;
        java.util.Iterator l6#15;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r2;
        java.util.concurrent.ThreadPoolExecutor$Worker l7#21;
        java.util.concurrent.atomic.AtomicInteger $r4;
        java.lang.String $r5, l7#43, $r7, $r21;
        java.lang.StringBuilder $r6, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r17, $r18, $r19, $r20;
        java.util.concurrent.BlockingQueue $r16;

        l0 := @this: java.util.concurrent.ThreadPoolExecutor;

        l5 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;

        virtualinvoke l5.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label01:
        l1#6 = l0.<java.util.concurrent.ThreadPoolExecutor: long completedTaskCount>;

        l4#8 = 0;

        $r0 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.HashSet workers>;

        l3 = virtualinvoke $r0.<java.util.HashSet: int size()>();

        $r1 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.HashSet workers>;

        l6#15 = virtualinvoke $r1.<java.util.HashSet: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke l6#15.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r2 = interfaceinvoke l6#15.<java.util.Iterator: java.lang.Object next()>();

        l7#21 = (java.util.concurrent.ThreadPoolExecutor$Worker) $r2;

        $l0 = l7#21.<java.util.concurrent.ThreadPoolExecutor$Worker: long completedTasks>;

        l1#6 = l1#6 + $l0;

        $z1 = virtualinvoke l7#21.<java.util.concurrent.ThreadPoolExecutor$Worker: boolean isLocked()>();

        if $z1 == 0 goto label03;

        l4#8 = l4#8 + 1;

     label03:
        goto label02;

     label04:
        virtualinvoke l5.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label08;

     label05:
        $r3 := @caughtexception;

     label06:
        l8 = $r3;

     label07:
        virtualinvoke l5.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw l8;

     label08:
        $r4 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        l6#35 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $z2 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean runStateLessThan(int,int)>(l6#35, 0);

        if $z2 == 0 goto label09;

        $r5 = "Running";

        goto label11;

     label09:
        $z3 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean runStateAtLeast(int,int)>(l6#35, 1610612736);

        if $z3 == 0 goto label10;

        $r5 = "Terminated";

        goto label11;

     label10:
        $r5 = "Shutting down";

     label11:
        l7#43 = $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = specialinvoke l0.<java.lang.Object: java.lang.String toString()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(l7#43);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pool size = ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", active threads = ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l4#8);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", queued tasks = ");

        $r16 = l0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue>;

        $i1 = interfaceinvoke $r16.<java.util.concurrent.BlockingQueue: int size()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", completed tasks = ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1#6);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r21;

        catch java.lang.Throwable from label01 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
    }

    private static boolean runStateLessThan(int, int)
    {
        int l0, l1;
        boolean $z0;

        l0 := @parameter0: int;

        l1 := @parameter1: int;

        if l0 >= l1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }


