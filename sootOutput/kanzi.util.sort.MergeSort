    public boolean sort(int[], int, int)
    {
        kanzi.util.sort.MergeSort this;
        int[] data, $r0, $r1;
        int start, count, $i0, $i1, $i2, $i3;
        boolean $z0;

        this := @this: kanzi.util.sort.MergeSort;

        data := @parameter0: int[];

        start := @parameter1: int;

        count := @parameter2: int;

        if data == null goto label1;

        if count < 0 goto label1;

        if start >= 0 goto label2;

     label1:
        return 0;

     label2:
        $i0 = start + count;

        $i1 = lengthof data;

        if $i0 <= $i1 goto label3;

        return 0;

     label3:
        if count >= 2 goto label4;

        return 1;

     label4:
        $r0 = this.<kanzi.util.sort.MergeSort: int[] buffer>;

        $i2 = lengthof $r0;

        if $i2 >= count goto label5;

        $r1 = newarray (int)[count];

        this.<kanzi.util.sort.MergeSort: int[] buffer> = $r1;

     label5:
        $i3 = count - 1;

        $z0 = specialinvoke this.<kanzi.util.sort.MergeSort: boolean mergesort(int[],int,int)>(data, 0, $i3);

        return $z0;
    }

    private boolean mergesort(int[], int, int)
    {
        kanzi.util.sort.MergeSort this;
        int[] data;
        int low, high, count, middle, $i0, $i1, $i2;
        kanzi.IntSorter $r0;
        boolean $z0;

        this := @this: kanzi.util.sort.MergeSort;

        data := @parameter0: int[];

        low := @parameter1: int;

        high := @parameter2: int;

        if low >= high goto label2;

        $i0 = high - low;

        count = $i0 + 1;

        if count >= 32 goto label1;

        $r0 = this.<kanzi.util.sort.MergeSort: kanzi.IntSorter insertionSort>;

        $z0 = interfaceinvoke $r0.<kanzi.IntSorter: boolean sort(int[],int,int)>(data, low, count);

        return $z0;

     label1:
        $i1 = count / 2;

        middle = low + $i1;

        specialinvoke this.<kanzi.util.sort.MergeSort: boolean mergesort(int[],int,int)>(data, low, middle);

        $i2 = middle + 1;

        specialinvoke this.<kanzi.util.sort.MergeSort: boolean mergesort(int[],int,int)>(data, $i2, high);

        specialinvoke this.<kanzi.util.sort.MergeSort: void merge(int[],int,int,int)>(data, low, middle, high);

     label2:
        return 1;
    }

    private void merge(int[], int, int, int)
    {
        kanzi.util.sort.MergeSort this;
        int[] data, $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        int low, middle, high, $i0, count#6, ii#10, $i1, i#26, j#30, k#32, $i2, $i3, $i4, $i5, $i6, $i7, $i8, count#62, $i9, $i10, $i11;

        this := @this: kanzi.util.sort.MergeSort;

        data := @parameter0: int[];

        low := @parameter1: int;

        middle := @parameter2: int;

        high := @parameter3: int;

        $i0 = high - low;

        count#6 = $i0 + 1;

        if count#6 >= 16 goto label03;

        ii#10 = low;

     label01:
        if ii#10 > high goto label02;

        $r0 = this.<kanzi.util.sort.MergeSort: int[] buffer>;

        $i1 = data[ii#10];

        $r0[ii#10] = $i1;

        ii#10 = ii#10 + 1;

        goto label01;

     label02:
        goto label04;

     label03:
        $r1 = this.<kanzi.util.sort.MergeSort: int[] buffer>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(data, low, $r1, low, count#6);

     label04:
        i#26 = low;

        j#30 = middle + 1;

        k#32 = low;

     label05:
        if i#26 > middle goto label08;

        if j#30 > high goto label08;

        $r2 = this.<kanzi.util.sort.MergeSort: int[] buffer>;

        $i2 = $r2[i#26];

        $r3 = this.<kanzi.util.sort.MergeSort: int[] buffer>;

        $i3 = $r3[j#30];

        if $i2 > $i3 goto label06;

        $r4 = this.<kanzi.util.sort.MergeSort: int[] buffer>;

        $i4 = i#26;

        i#26 = i#26 + 1;

        $i5 = $r4[$i4];

        data[k#32] = $i5;

        goto label07;

     label06:
        $r5 = this.<kanzi.util.sort.MergeSort: int[] buffer>;

        $i6 = j#30;

        j#30 = j#30 + 1;

        $i7 = $r5[$i6];

        data[k#32] = $i7;

     label07:
        k#32 = k#32 + 1;

        goto label05;

     label08:
        $i8 = middle - i#26;

        count#62 = $i8 + 1;

        if count#62 >= 16 goto label10;

     label09:
        if i#26 > middle goto label11;

        $i9 = k#32;

        k#32 = k#32 + 1;

        $r6 = this.<kanzi.util.sort.MergeSort: int[] buffer>;

        $i10 = i#26;

        i#26 = i#26 + 1;

        $i11 = $r6[$i10];

        data[$i9] = $i11;

        goto label09;

     label10:
        $r7 = this.<kanzi.util.sort.MergeSort: int[] buffer>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, i#26, data, k#32, count#62);

     label11:
        return;
    }


