    public void <init>(org.w3c.dom.Element, weka.core.pmml.MiningSchema) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.TreeModel$SimpleSetPredicate this;
        org.w3c.dom.Element setP, $r11, $r12;
        weka.core.pmml.MiningSchema miningSchema;
        weka.core.Instances totalStructure;
        java.lang.String fieldS, $r6, $r8, $r10, $r23, $r26, $r34, $r37;
        weka.core.Attribute att, $r7, $r9, $r22, $r33;
        org.w3c.dom.NodeList children;
        org.w3c.dom.Node child;
        weka.classifiers.pmml.consumer.TreeModel$SimpleSetPredicate$BooleanOperator $r0;
        java.lang.Exception $r1, $r15, $r19, $r30;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r20, $r21, $r24, $r25, $r31, $r32, $r35, $r36;
        int index#29, i#31, $i0, i#58, $i1, $i3, $i4;
        boolean $z0, $z1, $z2, $z3, $z4;
        short $s2;
        weka.core.pmml.Array $r13, $r14, $r16, $r27;
        weka.core.pmml.Array$ArrayType $r17, $r18, $r28, $r29;

        this := @this: weka.classifiers.pmml.consumer.TreeModel$SimpleSetPredicate;

        setP := @parameter0: org.w3c.dom.Element;

        miningSchema := @parameter1: weka.core.pmml.MiningSchema;

        specialinvoke this.<weka.classifiers.pmml.consumer.TreeModel$Predicate: void <init>()>();

        this.<weka.classifiers.pmml.consumer.TreeModel$SimpleSetPredicate: int m_fieldIndex> = -1;

        this.<weka.classifiers.pmml.consumer.TreeModel$SimpleSetPredicate: boolean m_isNominal> = 0;

        $r0 = <weka.classifiers.pmml.consumer.TreeModel$SimpleSetPredicate$BooleanOperator: weka.classifiers.pmml.consumer.TreeModel$SimpleSetPredicate$BooleanOperator IS_IN>;

        this.<weka.classifiers.pmml.consumer.TreeModel$SimpleSetPredicate: weka.classifiers.pmml.consumer.TreeModel$SimpleSetPredicate$BooleanOperator m_operator> = $r0;

        totalStructure = virtualinvoke miningSchema.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        fieldS = interfaceinvoke setP.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("field");

        att = virtualinvoke totalStructure.<weka.core.Instances: weka.core.Attribute attribute(java.lang.String)>(fieldS);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(att);

        if att != null goto label01;

        $r1 = new java.lang.Exception;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[SimplePredicate] unable to find field ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(fieldS);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in the incoming instance structure!");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.Exception: void <init>(java.lang.String)>($r6);

        throw $r1;

     label01:
        index#29 = -1;

        i#31 = 0;

     label02:
        $i0 = virtualinvoke totalStructure.<weka.core.Instances: int numAttributes()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#31);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#31 >= $i0 goto label04;

        $r7 = virtualinvoke totalStructure.<weka.core.Instances: weka.core.Attribute attribute(int)>(i#31);

        $r8 = virtualinvoke $r7.<weka.core.Attribute: java.lang.String name()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(fieldS);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label03;

        index#29 = i#31;

        $r9 = virtualinvoke totalStructure.<weka.core.Instances: weka.core.Attribute attribute(int)>(i#31);

        $r10 = virtualinvoke $r9.<weka.core.Attribute: java.lang.String name()>();

        this.<weka.classifiers.pmml.consumer.TreeModel$SimpleSetPredicate: java.lang.String m_fieldName> = $r10;

        goto label04;

     label03:
        i#31 = i#31 + 1;

        goto label02;

     label04:
        this.<weka.classifiers.pmml.consumer.TreeModel$SimpleSetPredicate: int m_fieldIndex> = index#29;

        $z1 = virtualinvoke att.<weka.core.Attribute: boolean isNominal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label05;

        this.<weka.classifiers.pmml.consumer.TreeModel$SimpleSetPredicate: boolean m_isNominal> = 1;

        this.<weka.classifiers.pmml.consumer.TreeModel$SimpleSetPredicate: weka.core.Attribute m_nominalLookup> = att;

     label05:
        children = interfaceinvoke setP.<org.w3c.dom.Element: org.w3c.dom.NodeList getChildNodes()>();

        i#58 = 0;

     label06:
        $i1 = interfaceinvoke children.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#58);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#58 >= $i1 goto label08;

        child = interfaceinvoke children.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i#58);

        $s2 = interfaceinvoke child.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s2);

        if $s2 != 1 goto label07;

        $r11 = (org.w3c.dom.Element) child;

        $z2 = staticinvoke <weka.core.pmml.Array: boolean isArray(org.w3c.dom.Element)>($r11);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label07;

        $r12 = (org.w3c.dom.Element) child;

        $r13 = staticinvoke <weka.core.pmml.Array: weka.core.pmml.Array create(org.w3c.dom.Element)>($r12);

        this.<weka.classifiers.pmml.consumer.TreeModel$SimpleSetPredicate: weka.core.pmml.Array m_set> = $r13;

        goto label08;

     label07:
        i#58 = i#58 + 1;

        goto label06;

     label08:
        $r14 = this.<weka.classifiers.pmml.consumer.TreeModel$SimpleSetPredicate: weka.core.pmml.Array m_set>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r14);

        if $r14 != null goto label09;

        $r15 = new java.lang.Exception;

        specialinvoke $r15.<java.lang.Exception: void <init>(java.lang.String)>("[SimpleSetPredictate] couldn\'t find an array containing the set values!");

        throw $r15;

     label09:
        $r16 = this.<weka.classifiers.pmml.consumer.TreeModel$SimpleSetPredicate: weka.core.pmml.Array m_set>;

        $r17 = virtualinvoke $r16.<weka.core.pmml.Array: weka.core.pmml.Array$ArrayType getType()>();

        $r18 = <weka.core.pmml.Array$ArrayType: weka.core.pmml.Array$ArrayType STRING>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r17);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r18);

        if $r17 != $r18 goto label10;

        $z3 = this.<weka.classifiers.pmml.consumer.TreeModel$SimpleSetPredicate: boolean m_isNominal>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label10;

        $r19 = new java.lang.Exception;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[SimpleSetPredicate] referenced field ");

        $i3 = this.<weka.classifiers.pmml.consumer.TreeModel$SimpleSetPredicate: int m_fieldIndex>;

        $r22 = virtualinvoke totalStructure.<weka.core.Instances: weka.core.Attribute attribute(int)>($i3);

        $r23 = virtualinvoke $r22.<weka.core.Attribute: java.lang.String name()>();

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is numeric but array type is string!");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.Exception: void <init>(java.lang.String)>($r26);

        throw $r19;

     label10:
        $r27 = this.<weka.classifiers.pmml.consumer.TreeModel$SimpleSetPredicate: weka.core.pmml.Array m_set>;

        $r28 = virtualinvoke $r27.<weka.core.pmml.Array: weka.core.pmml.Array$ArrayType getType()>();

        $r29 = <weka.core.pmml.Array$ArrayType: weka.core.pmml.Array$ArrayType STRING>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r28);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r29);

        if $r28 == $r29 goto label11;

        $z4 = this.<weka.classifiers.pmml.consumer.TreeModel$SimpleSetPredicate: boolean m_isNominal>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label11;

        $r30 = new java.lang.Exception;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[SimpleSetPredicate] referenced field ");

        $i4 = this.<weka.classifiers.pmml.consumer.TreeModel$SimpleSetPredicate: int m_fieldIndex>;

        $r33 = virtualinvoke totalStructure.<weka.core.Instances: weka.core.Attribute attribute(int)>($i4);

        $r34 = virtualinvoke $r33.<weka.core.Attribute: java.lang.String name()>();

        $r35 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is nominal but array type is numeric!");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<java.lang.Exception: void <init>(java.lang.String)>($r37);

        throw $r30;

     label11:
        return;
    }


