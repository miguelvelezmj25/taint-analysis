    static void <clinit>()
    {
        sun.misc.Unsafe $r0, $r1, $r3;
        java.lang.Class l0#3;
        java.lang.reflect.Field $r2, $r4;
        long $l0, $l1;
        java.lang.Exception $r5, l0#15;
        java.lang.Error $r6;

     label1:
        $r0 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.ConcurrentLinkedQueue$Node: sun.misc.Unsafe UNSAFE> = $r0;

        l0#3 = class "java/util/concurrent/ConcurrentLinkedQueue$Node";

        $r1 = <java.util.concurrent.ConcurrentLinkedQueue$Node: sun.misc.Unsafe UNSAFE>;

        $r2 = virtualinvoke l0#3.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("item");

        $l0 = virtualinvoke $r1.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r2);

        <java.util.concurrent.ConcurrentLinkedQueue$Node: long itemOffset> = $l0;

        $r3 = <java.util.concurrent.ConcurrentLinkedQueue$Node: sun.misc.Unsafe UNSAFE>;

        $r4 = virtualinvoke l0#3.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("next");

        $l1 = virtualinvoke $r3.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r4);

        <java.util.concurrent.ConcurrentLinkedQueue$Node: long nextOffset> = $l1;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        l0#15 = $r5;

        $r6 = new java.lang.Error;

        specialinvoke $r6.<java.lang.Error: void <init>(java.lang.Throwable)>(l0#15);

        throw $r6;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    void <init>(java.lang.Object)
    {
        java.util.concurrent.ConcurrentLinkedQueue$Node l0;
        java.lang.Object l1;
        long $l0;
        sun.misc.Unsafe $r0;

        l0 := @this: java.util.concurrent.ConcurrentLinkedQueue$Node;

        l1 := @parameter0: java.lang.Object;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        $r0 = <java.util.concurrent.ConcurrentLinkedQueue$Node: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.ConcurrentLinkedQueue$Node: long itemOffset>;

        virtualinvoke $r0.<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>(l0, $l0, l1);

        return;
    }

    void lazySetNext(java.util.concurrent.ConcurrentLinkedQueue$Node)
    {
        java.util.concurrent.ConcurrentLinkedQueue$Node l0, l1;
        sun.misc.Unsafe $r0;
        long $l0;

        l0 := @this: java.util.concurrent.ConcurrentLinkedQueue$Node;

        l1 := @parameter0: java.util.concurrent.ConcurrentLinkedQueue$Node;

        $r0 = <java.util.concurrent.ConcurrentLinkedQueue$Node: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.ConcurrentLinkedQueue$Node: long nextOffset>;

        virtualinvoke $r0.<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>(l0, $l0, l1);

        return;
    }

    boolean casNext(java.util.concurrent.ConcurrentLinkedQueue$Node, java.util.concurrent.ConcurrentLinkedQueue$Node)
    {
        java.util.concurrent.ConcurrentLinkedQueue$Node l0, l1, l2;
        long $l0;
        sun.misc.Unsafe $r0;
        boolean $z0;

        l0 := @this: java.util.concurrent.ConcurrentLinkedQueue$Node;

        l1 := @parameter0: java.util.concurrent.ConcurrentLinkedQueue$Node;

        l2 := @parameter1: java.util.concurrent.ConcurrentLinkedQueue$Node;

        $r0 = <java.util.concurrent.ConcurrentLinkedQueue$Node: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.ConcurrentLinkedQueue$Node: long nextOffset>;

        $z0 = virtualinvoke $r0.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(l0, $l0, l1, l2);

        return $z0;
    }


