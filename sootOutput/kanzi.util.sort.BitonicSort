    public boolean sort(int[], int, int)
    {
        kanzi.util.sort.BitonicSort this;
        int[] input;
        int blkptr, len, $i0, $i1;

        this := @this: kanzi.util.sort.BitonicSort;

        input := @parameter0: int[];

        blkptr := @parameter1: int;

        len := @parameter2: int;

        if blkptr < 0 goto label1;

        if len <= 0 goto label1;

        $i0 = blkptr + len;

        $i1 = lengthof input;

        if $i0 <= $i1 goto label2;

     label1:
        return 0;

     label2:
        if len != 1 goto label3;

        return 1;

     label3:
        staticinvoke <kanzi.util.sort.BitonicSort: void sort(int[],int,int,boolean)>(input, blkptr, len, 1);

        return 1;
    }

    private static void sort(int[], int, int, boolean)
    {
        int[] array;
        int lo, n, m, $i2, $i3, $i4;
        boolean up, $z0;

        array := @parameter0: int[];

        lo := @parameter1: int;

        n := @parameter2: int;

        up := @parameter3: boolean;

        m = n >> 1;

        if m <= 1 goto label3;

        if up != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <kanzi.util.sort.BitonicSort: void sort(int[],int,int,boolean)>(array, lo, m, $z0);

     label3:
        $i2 = n - m;

        if $i2 <= 1 goto label4;

        $i3 = lo + m;

        $i4 = n - m;

        staticinvoke <kanzi.util.sort.BitonicSort: void sort(int[],int,int,boolean)>(array, $i3, $i4, up);

     label4:
        if n <= 1 goto label5;

        staticinvoke <kanzi.util.sort.BitonicSort: void merge(int[],int,int,boolean)>(array, lo, n, up);

     label5:
        return;
    }

    private static void merge(int[], int, int, boolean)
    {
        int[] array, $r0, $r1;
        int lo, n, end, tmp, $i0, m#7, m#9, $i1, i#24, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        boolean up, $z0;

        array := @parameter0: int[];

        lo := @parameter1: int;

        n := @parameter2: int;

        up := @parameter3: boolean;

        $r0 = <kanzi.util.sort.BitonicSort: int[] POWER_OF_TWO>;

        $i0 = lengthof $r0;

        if n >= $i0 goto label01;

        $r1 = <kanzi.util.sort.BitonicSort: int[] POWER_OF_TWO>;

        m#7 = $r1[n];

        goto label04;

     label01:
        m#9 = 1;

     label02:
        if m#9 >= n goto label03;

        m#9 = m#9 << 1;

        goto label02;

     label03:
        m#7 = m#9 >> 1;

     label04:
        $i1 = lo + n;

        end = $i1 - m#7;

        i#24 = lo;

     label05:
        if i#24 >= end goto label09;

        $i2 = array[i#24];

        $i3 = i#24 + m#7;

        $i4 = array[$i3];

        if $i2 <= $i4 goto label06;

        $z0 = 1;

        goto label07;

     label06:
        $z0 = 0;

     label07:
        if $z0 != up goto label08;

        tmp = array[i#24];

        $i5 = i#24 + m#7;

        $i6 = array[$i5];

        array[i#24] = $i6;

        $i7 = i#24 + m#7;

        array[$i7] = tmp;

     label08:
        i#24 = i#24 + 1;

        goto label05;

     label09:
        if m#7 <= 1 goto label10;

        staticinvoke <kanzi.util.sort.BitonicSort: void merge(int[],int,int,boolean)>(array, lo, m#7, up);

     label10:
        $i8 = n - m#7;

        if $i8 <= 1 goto label11;

        $i9 = lo + m#7;

        $i10 = n - m#7;

        staticinvoke <kanzi.util.sort.BitonicSort: void merge(int[],int,int,boolean)>(array, $i9, $i10, up);

     label11:
        return;
    }


