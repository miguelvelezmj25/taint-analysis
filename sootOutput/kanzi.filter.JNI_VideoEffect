    public boolean apply(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.filter.JNI_VideoEffect this;
        kanzi.SliceIntArray input, output;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3, $i4;
        int[] $r0, $r1;

        this := @this: kanzi.filter.JNI_VideoEffect;

        input := @parameter0: kanzi.SliceIntArray;

        output := @parameter1: kanzi.SliceIntArray;

        $z0 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(input);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(output);

        if $z1 != 0 goto label2;

     label1:
        return 0;

     label2:
        $i0 = this.<kanzi.filter.JNI_VideoEffect: int width>;

        $i1 = this.<kanzi.filter.JNI_VideoEffect: int height>;

        $i2 = this.<kanzi.filter.JNI_VideoEffect: int stride>;

        $r0 = input.<kanzi.SliceIntArray: int[] array>;

        $i3 = input.<kanzi.SliceIntArray: int index>;

        $r1 = output.<kanzi.SliceIntArray: int[] array>;

        $i4 = output.<kanzi.SliceIntArray: int index>;

        $z2 = virtualinvoke this.<kanzi.filter.JNI_VideoEffect: boolean native_apply(int,int,int,int[],int,int[],int)>($i0, $i1, $i2, $r0, $i3, $r1, $i4);

        return $z2;
    }


