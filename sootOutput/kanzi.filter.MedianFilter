    public boolean apply(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.filter.MedianFilter this;
        kanzi.SliceIntArray input, output;
        int[] src, dst, $r2, $r3, $r6, $r8, $r10, $r12, $r14, $r15, $r19, $r20, $r21, $r22;
        int nbChans, maxShift, h, w, st, rd, deltaOffs, endX, endY, th, shift, xx, val, yy, startX, yy, xx, val, val, pos, outPix, inPix, $i0, $i1, i#38, $i2, x#47, $i3, startX#59, $i4, y#66, $i5, $i6, $i7, $i8, $i10, $i11, $i12, $i13, $i14, srcStart#103, dstStart#106, y#108, j#114, $i15, $i16, $i17, $i18, $i19, r#136, $i20, $i21, $i22, val#147, $i24, $i25, $i26, $i27, $i28, r#169, $i29, $i30, $i31, val#181, $i33, $i34, $i35, $i36, $i37, $i38, rx#208, $i39, $i40, $i41, startX#224, $i42, ry#231, $i43, $i44, $i45, $i46, $i48, $i49, $i50, $i51, $i52, $i53, x#271, med#276, $i54, $i55, $i56, diff#291, $i57, $i58, $i59, diff#301, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109;
        kanzi.filter.MedianFilter$Histogram hst, hst, hst, $r4, $r5, $r7, $r9, $r11, $r23, $r25, $r26, $r28;
        boolean $z0, $z1;
        kanzi.filter.MedianFilter$Histogram[] $r0, $r1, $r13, $r18, $r24, $r27;

        this := @this: kanzi.filter.MedianFilter;

        input := @parameter0: kanzi.SliceIntArray;

        output := @parameter1: kanzi.SliceIntArray;

        $z0 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(input);

        if $z0 == 0 goto label01;

        $z1 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(output);

        if $z1 != 0 goto label02;

     label01:
        return 0;

     label02:
        src = input.<kanzi.SliceIntArray: int[] array>;

        dst = output.<kanzi.SliceIntArray: int[] array>;

        $i0 = this.<kanzi.filter.MedianFilter: int channels>;

        nbChans = $i0 >> 8;

        $i1 = this.<kanzi.filter.MedianFilter: int channels>;

        maxShift = $i1 & 255;

        h = this.<kanzi.filter.MedianFilter: int height>;

        w = this.<kanzi.filter.MedianFilter: int width>;

        st = this.<kanzi.filter.MedianFilter: int stride>;

        rd = this.<kanzi.filter.MedianFilter: int radius>;

        deltaOffs = st * rd;

        endX = w - 1;

        endY = h - 1;

        th = this.<kanzi.filter.MedianFilter: int threshold>;

        i#38 = 0;

     label03:
        if i#38 >= nbChans goto label34;

        $i2 = 8 * i#38;

        shift = maxShift - $i2;

        x#47 = 0;

     label04:
        $r0 = this.<kanzi.filter.MedianFilter: kanzi.filter.MedianFilter$Histogram[] histos>;

        $i3 = lengthof $r0;

        if x#47 >= $i3 goto label09;

        $r1 = this.<kanzi.filter.MedianFilter: kanzi.filter.MedianFilter$Histogram[] histos>;

        hst = $r1[x#47];

        virtualinvoke hst.<kanzi.filter.MedianFilter$Histogram: void clear()>();

        startX#59 = input.<kanzi.SliceIntArray: int index>;

        if x#47 >= rd goto label05;

        $i4 = 0;

        goto label06;

     label05:
        $i4 = x#47 - rd;

     label06:
        xx = $i4;

        y#66 = 0;

     label07:
        $i5 = 2 * rd;

        if y#66 > $i5 goto label08;

        $i6 = startX#59 + xx;

        $i7 = src[$i6];

        $i8 = $i7 >> shift;

        val = $i8 & 255;

        $r2 = hst.<kanzi.filter.MedianFilter$Histogram: int[] fine>;

        $i10 = $r2[val];

        $i11 = $i10 + 1;

        $r2[val] = $i11;

        $r3 = hst.<kanzi.filter.MedianFilter$Histogram: int[] coarse>;

        $i12 = val >> 4;

        $i13 = $r3[$i12];

        $i14 = $i13 + 1;

        $r3[$i12] = $i14;

        startX#59 = startX#59 + st;

        y#66 = y#66 + 1;

        goto label07;

     label08:
        x#47 = x#47 + 1;

        goto label04;

     label09:
        srcStart#103 = input.<kanzi.SliceIntArray: int index>;

        dstStart#106 = output.<kanzi.SliceIntArray: int index>;

        y#108 = 0;

     label10:
        if y#108 >= endY goto label33;

        $r4 = this.<kanzi.filter.MedianFilter: kanzi.filter.MedianFilter$Histogram kernel>;

        virtualinvoke $r4.<kanzi.filter.MedianFilter$Histogram: void clear()>();

        j#114 = y#108;

     label11:
        $i15 = 2 * rd;

        $i16 = y#108 + $i15;

        if j#114 > $i16 goto label19;

        if j#114 < rd goto label13;

        if j#114 >= endY goto label12;

        $i17 = j#114 - rd;

        goto label14;

     label12:
        $i17 = endY;

        goto label14;

     label13:
        $i17 = 0;

     label14:
        yy = $i17;

        $i18 = yy * st;

        $i19 = input.<kanzi.SliceIntArray: int index>;

        startX = $i18 + $i19;

        r#136 = neg rd;

     label15:
        if r#136 >= 0 goto label16;

        $i20 = startX + 0;

        $i21 = src[$i20];

        $i22 = $i21 >> shift;

        val#147 = $i22 & 255;

        $r5 = this.<kanzi.filter.MedianFilter: kanzi.filter.MedianFilter$Histogram kernel>;

        $r6 = $r5.<kanzi.filter.MedianFilter$Histogram: int[] fine>;

        $i24 = $r6[val#147];

        $i25 = $i24 + 1;

        $r6[val#147] = $i25;

        $r7 = this.<kanzi.filter.MedianFilter: kanzi.filter.MedianFilter$Histogram kernel>;

        $r8 = $r7.<kanzi.filter.MedianFilter$Histogram: int[] coarse>;

        $i26 = val#147 >> 4;

        $i27 = $r8[$i26];

        $i28 = $i27 + 1;

        $r8[$i26] = $i28;

        r#136 = r#136 + 1;

        goto label15;

     label16:
        r#169 = 0;

     label17:
        if r#169 > rd goto label18;

        $i29 = startX + r#169;

        $i30 = src[$i29];

        $i31 = $i30 >> shift;

        val#181 = $i31 & 255;

        $r9 = this.<kanzi.filter.MedianFilter: kanzi.filter.MedianFilter$Histogram kernel>;

        $r10 = $r9.<kanzi.filter.MedianFilter$Histogram: int[] fine>;

        $i33 = $r10[val#181];

        $i34 = $i33 + 1;

        $r10[val#181] = $i34;

        $r11 = this.<kanzi.filter.MedianFilter: kanzi.filter.MedianFilter$Histogram kernel>;

        $r12 = $r11.<kanzi.filter.MedianFilter$Histogram: int[] coarse>;

        $i35 = val#181 >> 4;

        $i36 = $r12[$i35];

        $i37 = $i36 + 1;

        $r12[$i35] = $i37;

        r#169 = r#169 + 1;

        goto label17;

     label18:
        j#114 = j#114 + 1;

        goto label11;

     label19:
        if y#108 < rd goto label20;

        $i38 = y#108 - rd;

        goto label21;

     label20:
        $i38 = 0;

     label21:
        yy = $i38;

        rx#208 = 0;

     label22:
        $i39 = 2 * rd;

        if rx#208 > $i39 goto label28;

        $r13 = this.<kanzi.filter.MedianFilter: kanzi.filter.MedianFilter$Histogram[] histos>;

        hst = $r13[rx#208];

        virtualinvoke hst.<kanzi.filter.MedianFilter$Histogram: void clear()>();

        $i40 = yy * st;

        $i41 = input.<kanzi.SliceIntArray: int index>;

        startX#224 = $i40 + $i41;

        if rx#208 < rd goto label23;

        $i42 = rx#208 - rd;

        goto label24;

     label23:
        $i42 = 0;

     label24:
        xx = $i42;

        ry#231 = 0;

     label25:
        $i43 = 2 * rd;

        if ry#231 > $i43 goto label27;

        $i44 = startX#224 + xx;

        $i45 = src[$i44];

        $i46 = $i45 >> shift;

        val = $i46 & 255;

        $r14 = hst.<kanzi.filter.MedianFilter$Histogram: int[] fine>;

        $i48 = $r14[val];

        $i49 = $i48 + 1;

        $r14[val] = $i49;

        $r15 = hst.<kanzi.filter.MedianFilter$Histogram: int[] coarse>;

        $i50 = val >> 4;

        $i51 = $r15[$i50];

        $i52 = $i51 + 1;

        $r15[$i50] = $i52;

        $i53 = yy + ry#231;

        if $i53 >= endY goto label26;

        startX#224 = startX#224 + st;

     label26:
        ry#231 = ry#231 + 1;

        goto label25;

     label27:
        rx#208 = rx#208 + 1;

        goto label22;

     label28:
        x#271 = 0;

     label29:
        if x#271 >= endX goto label32;

        med#276 = specialinvoke this.<kanzi.filter.MedianFilter: int getMedian()>();

        if th >= 256 goto label30;

        $i54 = srcStart#103 + x#271;

        $i55 = src[$i54];

        $i56 = $i55 >> shift;

        val = $i56 & 255;

        diff#291 = val - med#276;

        $i57 = diff#291 >> 31;

        $i58 = diff#291 + $i57;

        $i59 = diff#291 >> 31;

        diff#301 = $i58 ^ $i59;

        if diff#301 < th goto label30;

        med#276 = val;

     label30:
        $i60 = dstStart#106 + x#271;

        $i61 = dst[$i60];

        $i62 = 255 << shift;

        $i63 = $i62 ^ -1;

        $i64 = $i61 & $i63;

        dst[$i60] = $i64;

        $i65 = dstStart#106 + x#271;

        $i66 = dst[$i65];

        $i67 = med#276 << shift;

        $i68 = $i66 | $i67;

        dst[$i65] = $i68;

        if y#108 <= rd goto label31;

        $i69 = endY - rd;

        if y#108 >= $i69 goto label31;

        $r18 = this.<kanzi.filter.MedianFilter: kanzi.filter.MedianFilter$Histogram[] histos>;

        $i70 = 2 * rd;

        $i71 = x#271 + $i70;

        $i72 = $i71 + 1;

        hst = $r18[$i72];

        $i73 = srcStart#103 + x#271;

        $i74 = $i73 + rd;

        pos = $i74 + 1;

        $i75 = pos - deltaOffs;

        $i76 = $i75 - st;

        $i77 = src[$i76];

        $i78 = $i77 >> shift;

        outPix = $i78 & 255;

        $r19 = hst.<kanzi.filter.MedianFilter$Histogram: int[] fine>;

        $i80 = $r19[outPix];

        $i81 = $i80 - 1;

        $r19[outPix] = $i81;

        $r20 = hst.<kanzi.filter.MedianFilter$Histogram: int[] coarse>;

        $i82 = outPix >> 4;

        $i83 = $r20[$i82];

        $i84 = $i83 - 1;

        $r20[$i82] = $i84;

        $i85 = pos + deltaOffs;

        $i86 = src[$i85];

        $i87 = $i86 >> shift;

        inPix = $i87 & 255;

        $r21 = hst.<kanzi.filter.MedianFilter$Histogram: int[] fine>;

        $i89 = $r21[inPix];

        $i90 = $i89 + 1;

        $r21[inPix] = $i90;

        $r22 = hst.<kanzi.filter.MedianFilter$Histogram: int[] coarse>;

        $i91 = inPix >> 4;

        $i92 = $r22[$i91];

        $i93 = $i92 + 1;

        $r22[$i91] = $i93;

     label31:
        $r23 = this.<kanzi.filter.MedianFilter: kanzi.filter.MedianFilter$Histogram kernel>;

        $r24 = this.<kanzi.filter.MedianFilter: kanzi.filter.MedianFilter$Histogram[] histos>;

        $r25 = $r24[x#271];

        staticinvoke <kanzi.filter.MedianFilter: void removeHistogram(kanzi.filter.MedianFilter$Histogram,kanzi.filter.MedianFilter$Histogram)>($r23, $r25);

        $r26 = this.<kanzi.filter.MedianFilter: kanzi.filter.MedianFilter$Histogram kernel>;

        $r27 = this.<kanzi.filter.MedianFilter: kanzi.filter.MedianFilter$Histogram[] histos>;

        $i94 = 2 * rd;

        $i95 = x#271 + $i94;

        $i96 = $i95 + 1;

        $r28 = $r27[$i96];

        staticinvoke <kanzi.filter.MedianFilter: void addHistogram(kanzi.filter.MedianFilter$Histogram,kanzi.filter.MedianFilter$Histogram)>($r26, $r28);

        x#271 = x#271 + 1;

        goto label29;

     label32:
        $i97 = dstStart#106 + w;

        $i98 = $i97 - 1;

        $i99 = srcStart#103 + w;

        $i100 = $i99 - 1;

        $i101 = src[$i100];

        dst[$i98] = $i101;

        srcStart#103 = srcStart#103 + st;

        dstStart#106 = dstStart#106 + st;

        y#108 = y#108 + 1;

        goto label10;

     label33:
        $i102 = input.<kanzi.SliceIntArray: int index>;

        $i103 = h - 1;

        $i104 = st * $i103;

        $i105 = $i102 + $i104;

        $i106 = output.<kanzi.SliceIntArray: int index>;

        $i107 = h - 1;

        $i108 = st * $i107;

        $i109 = $i106 + $i108;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(src, $i105, dst, $i109, w);

        i#38 = i#38 + 1;

        goto label03;

     label34:
        return 1;
    }

    private int getMedian()
    {
        kanzi.filter.MedianFilter this;
        byte res;
        int start, idx#3, n#5, $i0, $i1, i#24, $i2, n#34, $i3, $i4, $i5, n#48, $i6, $i7, $i8, $i9, n#64, $i10, $i11, $i12, $i13, $i14, $i15;
        kanzi.filter.MedianFilter$Histogram $r0, $r2, $r4, $r6, $r8;
        int[] $r1, $r3, $r5, $r7, $r9;

        this := @this: kanzi.filter.MedianFilter;

        res = 0;

        idx#3 = 0;

        n#5 = 0;

     label1:
        if idx#3 >= 16 goto label3;

        $r0 = this.<kanzi.filter.MedianFilter: kanzi.filter.MedianFilter$Histogram kernel>;

        $r1 = $r0.<kanzi.filter.MedianFilter$Histogram: int[] coarse>;

        $i0 = $r1[idx#3];

        n#5 = n#5 + $i0;

        $i1 = this.<kanzi.filter.MedianFilter: int medianThreshold>;

        if n#5 < $i1 goto label2;

        goto label3;

     label2:
        idx#3 = idx#3 + 1;

        goto label1;

     label3:
        start = idx#3 << 4;

        i#24 = start + 15;

     label4:
        if i#24 < start goto label9;

        $r2 = this.<kanzi.filter.MedianFilter: kanzi.filter.MedianFilter$Histogram kernel>;

        $r3 = $r2.<kanzi.filter.MedianFilter$Histogram: int[] fine>;

        $i2 = $r3[i#24];

        n#34 = n#5 - $i2;

        $i3 = this.<kanzi.filter.MedianFilter: int medianThreshold>;

        if n#34 >= $i3 goto label5;

        return i#24;

     label5:
        $r4 = this.<kanzi.filter.MedianFilter: kanzi.filter.MedianFilter$Histogram kernel>;

        $r5 = $r4.<kanzi.filter.MedianFilter$Histogram: int[] fine>;

        $i4 = i#24 - 1;

        $i5 = $r5[$i4];

        n#48 = n#34 - $i5;

        $i6 = this.<kanzi.filter.MedianFilter: int medianThreshold>;

        if n#48 >= $i6 goto label6;

        $i7 = i#24 - 1;

        return $i7;

     label6:
        $r6 = this.<kanzi.filter.MedianFilter: kanzi.filter.MedianFilter$Histogram kernel>;

        $r7 = $r6.<kanzi.filter.MedianFilter$Histogram: int[] fine>;

        $i8 = i#24 - 2;

        $i9 = $r7[$i8];

        n#64 = n#48 - $i9;

        $i10 = this.<kanzi.filter.MedianFilter: int medianThreshold>;

        if n#64 >= $i10 goto label7;

        $i11 = i#24 - 2;

        return $i11;

     label7:
        $r8 = this.<kanzi.filter.MedianFilter: kanzi.filter.MedianFilter$Histogram kernel>;

        $r9 = $r8.<kanzi.filter.MedianFilter$Histogram: int[] fine>;

        $i12 = i#24 - 3;

        $i13 = $r9[$i12];

        n#5 = n#64 - $i13;

        $i14 = this.<kanzi.filter.MedianFilter: int medianThreshold>;

        if n#5 >= $i14 goto label8;

        $i15 = i#24 - 3;

        return $i15;

     label8:
        i#24 = i#24 + -4;

        goto label4;

     label9:
        return res;
    }

    private static void removeHistogram(kanzi.filter.MedianFilter$Histogram, kanzi.filter.MedianFilter$Histogram)
    {
        kanzi.filter.MedianFilter$Histogram kernel, ch;
        int[] hst1, hst2, $r0, $r1, $r2;
        int idx#2, $i0, i#14, $i2, $i3, $i4, i#31, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43;

        kernel := @parameter0: kanzi.filter.MedianFilter$Histogram;

        ch := @parameter1: kanzi.filter.MedianFilter$Histogram;

        idx#2 = 0;

     label1:
        if idx#2 >= 16 goto label3;

        $r0 = ch.<kanzi.filter.MedianFilter$Histogram: int[] coarse>;

        $i0 = $r0[idx#2];

        if $i0 == 0 goto label2;

        goto label3;

     label2:
        idx#2 = idx#2 + 1;

        goto label1;

     label3:
        hst1 = kernel.<kanzi.filter.MedianFilter$Histogram: int[] fine>;

        hst2 = ch.<kanzi.filter.MedianFilter$Histogram: int[] fine>;

        i#14 = idx#2;

     label4:
        if i#14 >= 16 goto label5;

        $r1 = kernel.<kanzi.filter.MedianFilter$Histogram: int[] coarse>;

        $i2 = $r1[i#14];

        $r2 = ch.<kanzi.filter.MedianFilter$Histogram: int[] coarse>;

        $i3 = $r2[i#14];

        $i4 = $i2 - $i3;

        $r1[i#14] = $i4;

        i#14 = i#14 + 1;

        goto label4;

     label5:
        i#31 = idx#2 << 4;

     label6:
        if i#31 >= 256 goto label7;

        $i6 = hst1[i#31];

        $i7 = hst2[i#31];

        $i8 = $i6 - $i7;

        hst1[i#31] = $i8;

        $i9 = i#31 + 1;

        $i10 = hst1[$i9];

        $i11 = i#31 + 1;

        $i12 = hst2[$i11];

        $i13 = $i10 - $i12;

        hst1[$i9] = $i13;

        $i14 = i#31 + 2;

        $i15 = hst1[$i14];

        $i16 = i#31 + 2;

        $i17 = hst2[$i16];

        $i18 = $i15 - $i17;

        hst1[$i14] = $i18;

        $i19 = i#31 + 3;

        $i20 = hst1[$i19];

        $i21 = i#31 + 3;

        $i22 = hst2[$i21];

        $i23 = $i20 - $i22;

        hst1[$i19] = $i23;

        $i24 = i#31 + 4;

        $i25 = hst1[$i24];

        $i26 = i#31 + 4;

        $i27 = hst2[$i26];

        $i28 = $i25 - $i27;

        hst1[$i24] = $i28;

        $i29 = i#31 + 5;

        $i30 = hst1[$i29];

        $i31 = i#31 + 5;

        $i32 = hst2[$i31];

        $i33 = $i30 - $i32;

        hst1[$i29] = $i33;

        $i34 = i#31 + 6;

        $i35 = hst1[$i34];

        $i36 = i#31 + 6;

        $i37 = hst2[$i36];

        $i38 = $i35 - $i37;

        hst1[$i34] = $i38;

        $i39 = i#31 + 7;

        $i40 = hst1[$i39];

        $i41 = i#31 + 7;

        $i42 = hst2[$i41];

        $i43 = $i40 - $i42;

        hst1[$i39] = $i43;

        i#31 = i#31 + 8;

        goto label6;

     label7:
        return;
    }

    private static void addHistogram(kanzi.filter.MedianFilter$Histogram, kanzi.filter.MedianFilter$Histogram)
    {
        kanzi.filter.MedianFilter$Histogram kernel, ch;
        int[] hst1, hst2, $r0, $r1, $r2;
        int idx#2, $i0, i#14, $i2, $i3, $i4, i#31, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43;

        kernel := @parameter0: kanzi.filter.MedianFilter$Histogram;

        ch := @parameter1: kanzi.filter.MedianFilter$Histogram;

        idx#2 = 0;

     label1:
        if idx#2 >= 16 goto label3;

        $r0 = ch.<kanzi.filter.MedianFilter$Histogram: int[] coarse>;

        $i0 = $r0[idx#2];

        if $i0 == 0 goto label2;

        goto label3;

     label2:
        idx#2 = idx#2 + 1;

        goto label1;

     label3:
        hst1 = kernel.<kanzi.filter.MedianFilter$Histogram: int[] fine>;

        hst2 = ch.<kanzi.filter.MedianFilter$Histogram: int[] fine>;

        i#14 = idx#2;

     label4:
        if i#14 >= 16 goto label5;

        $r1 = kernel.<kanzi.filter.MedianFilter$Histogram: int[] coarse>;

        $i2 = $r1[i#14];

        $r2 = ch.<kanzi.filter.MedianFilter$Histogram: int[] coarse>;

        $i3 = $r2[i#14];

        $i4 = $i2 + $i3;

        $r1[i#14] = $i4;

        i#14 = i#14 + 1;

        goto label4;

     label5:
        i#31 = idx#2 << 4;

     label6:
        if i#31 >= 256 goto label7;

        $i6 = hst1[i#31];

        $i7 = hst2[i#31];

        $i8 = $i6 + $i7;

        hst1[i#31] = $i8;

        $i9 = i#31 + 1;

        $i10 = hst1[$i9];

        $i11 = i#31 + 1;

        $i12 = hst2[$i11];

        $i13 = $i10 + $i12;

        hst1[$i9] = $i13;

        $i14 = i#31 + 2;

        $i15 = hst1[$i14];

        $i16 = i#31 + 2;

        $i17 = hst2[$i16];

        $i18 = $i15 + $i17;

        hst1[$i14] = $i18;

        $i19 = i#31 + 3;

        $i20 = hst1[$i19];

        $i21 = i#31 + 3;

        $i22 = hst2[$i21];

        $i23 = $i20 + $i22;

        hst1[$i19] = $i23;

        $i24 = i#31 + 4;

        $i25 = hst1[$i24];

        $i26 = i#31 + 4;

        $i27 = hst2[$i26];

        $i28 = $i25 + $i27;

        hst1[$i24] = $i28;

        $i29 = i#31 + 5;

        $i30 = hst1[$i29];

        $i31 = i#31 + 5;

        $i32 = hst2[$i31];

        $i33 = $i30 + $i32;

        hst1[$i29] = $i33;

        $i34 = i#31 + 6;

        $i35 = hst1[$i34];

        $i36 = i#31 + 6;

        $i37 = hst2[$i36];

        $i38 = $i35 + $i37;

        hst1[$i34] = $i38;

        $i39 = i#31 + 7;

        $i40 = hst1[$i39];

        $i41 = i#31 + 7;

        $i42 = hst2[$i41];

        $i43 = $i40 + $i42;

        hst1[$i39] = $i43;

        i#31 = i#31 + 8;

        goto label6;

     label7:
        return;
    }


