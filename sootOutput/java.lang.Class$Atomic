    static boolean casReflectionData(java.lang.Class, java.lang.ref.SoftReference, java.lang.ref.SoftReference)
    {
        java.lang.Class l0;
        java.lang.ref.SoftReference l1, l2;
        long $l0;
        sun.misc.Unsafe $r0;
        boolean $z0;

        l0 := @parameter0: java.lang.Class;

        l1 := @parameter1: java.lang.ref.SoftReference;

        l2 := @parameter2: java.lang.ref.SoftReference;

        $r0 = <java.lang.Class$Atomic: sun.misc.Unsafe unsafe>;

        $l0 = <java.lang.Class$Atomic: long reflectionDataOffset>;

        $z0 = virtualinvoke $r0.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(l0, $l0, l1, l2);

        return $z0;
    }

    static void <clinit>()
    {
        java.lang.reflect.Field[] l0;
        sun.misc.Unsafe $r0;
        long $l0, $l1, $l2;

        $r0 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.lang.Class$Atomic: sun.misc.Unsafe unsafe> = $r0;

        l0 = staticinvoke <java.lang.Class: java.lang.reflect.Field[] access$100(java.lang.Class,boolean)>(class "java/lang/Class", 0);

        $l0 = staticinvoke <java.lang.Class$Atomic: long objectFieldOffset(java.lang.reflect.Field[],java.lang.String)>(l0, "reflectionData");

        <java.lang.Class$Atomic: long reflectionDataOffset> = $l0;

        $l1 = staticinvoke <java.lang.Class$Atomic: long objectFieldOffset(java.lang.reflect.Field[],java.lang.String)>(l0, "annotationType");

        <java.lang.Class$Atomic: long annotationTypeOffset> = $l1;

        $l2 = staticinvoke <java.lang.Class$Atomic: long objectFieldOffset(java.lang.reflect.Field[],java.lang.String)>(l0, "annotationData");

        <java.lang.Class$Atomic: long annotationDataOffset> = $l2;

        return;
    }

    private static long objectFieldOffset(java.lang.reflect.Field[], java.lang.String)
    {
        java.lang.reflect.Field[] l0;
        java.lang.String l1, $r5;
        java.lang.reflect.Field l2;
        java.lang.Error $r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        sun.misc.Unsafe $r6;
        long $l0;

        l0 := @parameter0: java.lang.reflect.Field[];

        l1 := @parameter1: java.lang.String;

        l2 = staticinvoke <java.lang.Class: java.lang.reflect.Field access$200(java.lang.reflect.Field[],java.lang.String)>(l0, l1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l2);

        if l2 != null goto label1;

        $r0 = new java.lang.Error;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(l1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" field found in java.lang.Class");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.Error: void <init>(java.lang.String)>($r5);

        throw $r0;

     label1:
        $r6 = <java.lang.Class$Atomic: sun.misc.Unsafe unsafe>;

        $l0 = virtualinvoke $r6.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>(l2);

        return $l0;
    }


