    public void <init>(weka.core.Instances, weka.core.pmml.MiningSchema, weka.gui.Logger) throws java.lang.Exception
    {
        weka.core.pmml.MappingInfo this;
        weka.core.Instances dataSet, fieldsI;
        weka.core.pmml.MiningSchema miningSchema;
        weka.gui.Logger log, $r23, $r24, $r33, $r34;
        java.lang.String schemaAttName, warningString, incomingNomVal, warningString, className, $r5, $r11, $r14, $r17, $r20, $r28, $r43, $r50, $r52, $r54;
        weka.core.Attribute miningSchemaAtt, incomingAtt, classMatch, $r3, $r4, $r44, $r51, $r53;
        int[] valuesMap, $r1, $r37;
        int indexInSchema, $i0, $i1, i#24, $i2, j#35, $i3, $i4, $i5, $i6, $i7, $i8, k#109, $i9, $i10, $i11;
        int[][] $r0, $r2, $r36;
        boolean found#33, $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Exception $r6, $r38, $r45, $r55;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r12, $r13, $r15, $r16, $r18, $r19, $r21, $r22, $r26, $r27, $r29, $r30, $r31, $r32, $r39, $r40, $r41, $r42, $r46, $r47, $r48, $r49;
        java.io.PrintStream $r25, $r35;

        this := @this: weka.core.pmml.MappingInfo;

        dataSet := @parameter0: weka.core.Instances;

        miningSchema := @parameter1: weka.core.pmml.MiningSchema;

        log := @parameter2: weka.gui.Logger;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<weka.core.pmml.MappingInfo: int[] m_fieldsMap> = null;

        $r0 = (int[][]) null;

        this.<weka.core.pmml.MappingInfo: int[][] m_nominalValueMaps> = $r0;

        this.<weka.core.pmml.MappingInfo: java.lang.String m_fieldsMappingText> = null;

        this.<weka.core.pmml.MappingInfo: weka.gui.Logger m_log> = null;

        this.<weka.core.pmml.MappingInfo: weka.gui.Logger m_log> = log;

        fieldsI = virtualinvoke miningSchema.<weka.core.pmml.MiningSchema: weka.core.Instances getMiningSchemaAsInstances()>();

        $i0 = virtualinvoke fieldsI.<weka.core.Instances: int numAttributes()>();

        $r1 = newarray (int)[$i0];

        this.<weka.core.pmml.MappingInfo: int[] m_fieldsMap> = $r1;

        $i1 = virtualinvoke fieldsI.<weka.core.Instances: int numAttributes()>();

        $r2 = newarray (int[])[$i1];

        this.<weka.core.pmml.MappingInfo: int[][] m_nominalValueMaps> = $r2;

        i#24 = 0;

     label01:
        $i2 = virtualinvoke fieldsI.<weka.core.Instances: int numAttributes()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#24);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#24 >= $i2 goto label18;

        $r3 = virtualinvoke fieldsI.<weka.core.Instances: weka.core.Attribute attribute(int)>(i#24);

        schemaAttName = virtualinvoke $r3.<weka.core.Attribute: java.lang.String name()>();

        found#33 = 0;

        j#35 = 0;

     label02:
        $i3 = virtualinvoke dataSet.<weka.core.Instances: int numAttributes()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#35);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if j#35 >= $i3 goto label16;

        $r4 = virtualinvoke dataSet.<weka.core.Instances: weka.core.Attribute attribute(int)>(j#35);

        $r5 = virtualinvoke $r4.<weka.core.Attribute: java.lang.String name()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(schemaAttName);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label15;

        miningSchemaAtt = virtualinvoke fieldsI.<weka.core.Instances: weka.core.Attribute attribute(int)>(i#24);

        incomingAtt = virtualinvoke dataSet.<weka.core.Instances: weka.core.Attribute attribute(int)>(j#35);

        $i4 = virtualinvoke miningSchemaAtt.<weka.core.Attribute: int type()>();

        $i5 = virtualinvoke incomingAtt.<weka.core.Attribute: int type()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i4 == $i5 goto label04;

        $z1 = virtualinvoke miningSchemaAtt.<weka.core.Attribute: boolean isString()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label03;

        $z2 = virtualinvoke incomingAtt.<weka.core.Attribute: boolean isNominal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label03;

        goto label04;

     label03:
        $r6 = new java.lang.Exception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[MappingInfo] type mismatch for field ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(schemaAttName);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Mining schema type ");

        $r11 = virtualinvoke miningSchemaAtt.<weka.core.Attribute: java.lang.String toString()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Incoming type ");

        $r14 = virtualinvoke incomingAtt.<weka.core.Attribute: java.lang.String toString()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.Exception: void <init>(java.lang.String)>($r17);

        throw $r6;

     label04:
        $i6 = virtualinvoke miningSchemaAtt.<weka.core.Attribute: int numValues()>();

        $i7 = virtualinvoke incomingAtt.<weka.core.Attribute: int numValues()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if $i6 == $i7 goto label06;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[MappingInfo] WARNING: incoming nominal attribute ");

        $r20 = virtualinvoke incomingAtt.<weka.core.Attribute: java.lang.String name()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not have the same number of values as the corresponding mining schema attribute.");

        warningString = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        $r23 = this.<weka.core.pmml.MappingInfo: weka.gui.Logger m_log>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r23);

        if $r23 == null goto label05;

        $r24 = this.<weka.core.pmml.MappingInfo: weka.gui.Logger m_log>;

        interfaceinvoke $r24.<weka.gui.Logger: void logMessage(java.lang.String)>(warningString);

        goto label06;

     label05:
        $r25 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r25.<java.io.PrintStream: void println(java.lang.String)>(warningString);

     label06:
        $z3 = virtualinvoke miningSchemaAtt.<weka.core.Attribute: boolean isNominal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label07;

        $z4 = virtualinvoke miningSchemaAtt.<weka.core.Attribute: boolean isString()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label14;

     label07:
        $i8 = virtualinvoke incomingAtt.<weka.core.Attribute: int numValues()>();

        valuesMap = newarray (int)[$i8];

        k#109 = 0;

     label08:
        $i9 = virtualinvoke incomingAtt.<weka.core.Attribute: int numValues()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(k#109);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        if k#109 >= $i9 goto label13;

        incomingNomVal = virtualinvoke incomingAtt.<weka.core.Attribute: java.lang.String value(int)>(k#109);

        indexInSchema = virtualinvoke miningSchemaAtt.<weka.core.Attribute: int indexOfValue(java.lang.String)>(incomingNomVal);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(indexInSchema);

        if indexInSchema >= 0 goto label11;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[MappingInfo] WARNING: incoming nominal attribute ");

        $r28 = virtualinvoke incomingAtt.<weka.core.Attribute: java.lang.String name()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has value ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(incomingNomVal);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" that doesn\'t occur in the mining schema.");

        warningString = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        $r33 = this.<weka.core.pmml.MappingInfo: weka.gui.Logger m_log>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r33);

        if $r33 == null goto label09;

        $r34 = this.<weka.core.pmml.MappingInfo: weka.gui.Logger m_log>;

        interfaceinvoke $r34.<weka.gui.Logger: void logMessage(java.lang.String)>(warningString);

        goto label10;

     label09:
        $r35 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r35.<java.io.PrintStream: void println(java.lang.String)>(warningString);

     label10:
        valuesMap[k#109] = -1;

        goto label12;

     label11:
        valuesMap[k#109] = indexInSchema;

     label12:
        k#109 = k#109 + 1;

        goto label08;

     label13:
        $r36 = this.<weka.core.pmml.MappingInfo: int[][] m_nominalValueMaps>;

        $r36[i#24] = valuesMap;

     label14:
        found#33 = 1;

        $r37 = this.<weka.core.pmml.MappingInfo: int[] m_fieldsMap>;

        $r37[i#24] = j#35;

     label15:
        j#35 = j#35 + 1;

        goto label02;

     label16:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(found#33);

        if found#33 != 0 goto label17;

        $r38 = new java.lang.Exception;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[MappingInfo] Unable to find a match for mining schema attribute ");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(schemaAttName);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in the incoming instances!");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r38.<java.lang.Exception: void <init>(java.lang.String)>($r43);

        throw $r38;

     label17:
        i#24 = i#24 + 1;

        goto label01;

     label18:
        $i10 = virtualinvoke fieldsI.<weka.core.Instances: int classIndex()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i10);

        if $i10 < 0 goto label21;

        $i11 = virtualinvoke dataSet.<weka.core.Instances: int classIndex()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i11);

        if $i11 >= 0 goto label20;

        $r44 = virtualinvoke fieldsI.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        className = virtualinvoke $r44.<weka.core.Attribute: java.lang.String name()>();

        classMatch = virtualinvoke dataSet.<weka.core.Instances: weka.core.Attribute attribute(java.lang.String)>(className);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classMatch);

        if classMatch != null goto label19;

        $r45 = new java.lang.Exception;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[MappingInfo] Can\'t find match for target field ");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(className);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("in incoming instances!");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r45.<java.lang.Exception: void <init>(java.lang.String)>($r50);

        throw $r45;

     label19:
        virtualinvoke dataSet.<weka.core.Instances: void setClass(weka.core.Attribute)>(classMatch);

        goto label21;

     label20:
        $r51 = virtualinvoke fieldsI.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $r52 = virtualinvoke $r51.<weka.core.Attribute: java.lang.String name()>();

        $r53 = virtualinvoke dataSet.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $r54 = virtualinvoke $r53.<weka.core.Attribute: java.lang.String name()>();

        $z5 = virtualinvoke $r52.<java.lang.String: boolean equals(java.lang.Object)>($r54);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 != 0 goto label21;

        $r55 = new java.lang.Exception;

        specialinvoke $r55.<java.lang.Exception: void <init>(java.lang.String)>("[MappingInfo] class attribute in mining schema does not match class attribute in incoming instances!");

        throw $r55;

     label21:
        specialinvoke this.<weka.core.pmml.MappingInfo: void fieldsMappingString(weka.core.Instances,weka.core.Instances)>(fieldsI, dataSet);

        return;
    }

    private void fieldsMappingString(weka.core.Instances, weka.core.Instances)
    {
        weka.core.pmml.MappingInfo this;
        weka.core.Instances miningSchemaI, incomingI;
        java.lang.StringBuffer result, $r0;
        byte minLength;
        weka.core.Attribute temp, incoming, $r1, $r3;
        int maxLength#4, i#6, $i0, $i1, maxLength#21, i#65, $i2, $i3, $i4, $i5;
        java.lang.String $r2, $r4, headerS#24, sep#26, headerS#35, sep#41, sep#49, headerS#57, $r15, $r18, attName#86, attName#92, attName#100, $r30, fieldName#128, $r35, fieldName#139, $r40, $r42;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10, $r13, $r14, $r16, $r17, $r19, $r20, $r21, $r22, $r25, $r26, $r28, $r29, $r31, $r32, $r33, $r34, $r36, $r37, $r38, $r39;
        boolean $z0, $z1;
        int[] $r24, $r27;

        this := @this: weka.core.pmml.MappingInfo;

        miningSchemaI := @parameter0: weka.core.Instances;

        incomingI := @parameter1: weka.core.Instances;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        result = $r0;

        maxLength#4 = 0;

        i#6 = 0;

     label01:
        $i0 = virtualinvoke miningSchemaI.<weka.core.Instances: int numAttributes()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#6 >= $i0 goto label03;

        $r1 = virtualinvoke miningSchemaI.<weka.core.Instances: weka.core.Attribute attribute(int)>(i#6);

        $r2 = virtualinvoke $r1.<weka.core.Attribute: java.lang.String name()>();

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(maxLength#4);

        if $i1 <= maxLength#4 goto label02;

        $r3 = virtualinvoke miningSchemaI.<weka.core.Instances: weka.core.Attribute attribute(int)>(i#6);

        $r4 = virtualinvoke $r3.<weka.core.Attribute: java.lang.String name()>();

        maxLength#4 = virtualinvoke $r4.<java.lang.String: int length()>();

     label02:
        i#6 = i#6 + 1;

        goto label01;

     label03:
        maxLength#21 = maxLength#4 + 12;

        minLength = 13;

        headerS#24 = "Mining schema";

        sep#26 = "-------------";

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(maxLength#21);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(minLength);

        if maxLength#21 >= minLength goto label04;

        maxLength#21 = minLength;

     label04:
        headerS#35 = staticinvoke <weka.core.pmml.PMMLUtils: java.lang.String pad(java.lang.String,java.lang.String,int,boolean)>(headerS#24, " ", maxLength#21, 0);

        sep#41 = staticinvoke <weka.core.pmml.PMMLUtils: java.lang.String pad(java.lang.String,java.lang.String,int,boolean)>(sep#26, "-", maxLength#21, 0);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(sep#41);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t    ----------------\n");

        sep#49 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(headerS#35);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t    Incoming fields\n");

        headerS#57 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(headerS#57);

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(sep#49);

        i#65 = 0;

     label05:
        $i2 = virtualinvoke miningSchemaI.<weka.core.Instances: int numAttributes()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#65);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#65 >= $i2 goto label10;

        temp = virtualinvoke miningSchemaI.<weka.core.Instances: weka.core.Attribute attribute(int)>(i#65);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $z0 = virtualinvoke temp.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label06;

        $r15 = "numeric)";

        goto label07;

     label06:
        $r15 = "nominal)";

     label07:
        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r18 = virtualinvoke temp.<weka.core.Attribute: java.lang.String name()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        attName#86 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        attName#92 = staticinvoke <weka.core.pmml.PMMLUtils: java.lang.String pad(java.lang.String,java.lang.String,int,boolean)>(attName#86, " ", maxLength#21, 0);

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(attName#92);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t--> ");

        attName#100 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(attName#100);

        $r24 = this.<weka.core.pmml.MappingInfo: int[] m_fieldsMap>;

        $i3 = $r24[i#65];

        incoming = virtualinvoke incomingI.<weka.core.Instances: weka.core.Attribute attribute(int)>($i3);

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r27 = this.<weka.core.pmml.MappingInfo: int[] m_fieldsMap>;

        $i4 = $r27[i#65];

        $i5 = $i4 + 1;

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $z1 = virtualinvoke incoming.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label08;

        $r30 = "numeric)";

        goto label09;

     label08:
        $r30 = "nominal)";

     label09:
        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        fieldName#128 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(fieldName#128);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r35 = virtualinvoke incoming.<weka.core.Attribute: java.lang.String name()>();

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        fieldName#139 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(fieldName#139);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r40);

        i#65 = i#65 + 1;

        goto label05;

     label10:
        $r42 = virtualinvoke result.<java.lang.StringBuffer: java.lang.String toString()>();

        this.<weka.core.pmml.MappingInfo: java.lang.String m_fieldsMappingText> = $r42;

        return;
    }

    public double[] instanceToSchema(weka.core.Instance, weka.core.pmml.MiningSchema) throws java.lang.Exception
    {
        weka.core.pmml.MappingInfo this;
        weka.core.Instance inst;
        weka.core.pmml.MiningSchema miningSchema;
        weka.core.Instances miningSchemaI, $r0;
        double[] result;
        int[] valueMap, $r1, $r4, $r6, $r7, $r9;
        int index, $i0, i#8, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i#88, $i9, $i10, $i11;
        java.lang.String incomingAttValue, warningString;
        java.util.ArrayList derivedFields;
        weka.core.pmml.DerivedFieldMetaInfo temp;
        double r, $d0, $d1, $d2, $d3, $d4;
        weka.core.Attribute $r2, $r3, $r8;
        boolean $z0, $z1, $z2;
        int[][] $r5;
        java.lang.StringBuilder $r10, $r11, $r12;
        weka.gui.Logger $r13, $r14;
        java.io.PrintStream $r15;
        java.lang.Object $r16;

        this := @this: weka.core.pmml.MappingInfo;

        inst := @parameter0: weka.core.Instance;

        miningSchema := @parameter1: weka.core.pmml.MiningSchema;

        miningSchemaI = virtualinvoke miningSchema.<weka.core.pmml.MiningSchema: weka.core.Instances getMiningSchemaAsInstances()>();

        $r0 = virtualinvoke miningSchema.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $i0 = virtualinvoke $r0.<weka.core.Instances: int numAttributes()>();

        result = newarray (double)[$i0];

        i#8 = 0;

     label1:
        $i1 = virtualinvoke miningSchemaI.<weka.core.Instances: int numAttributes()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#8 >= $i1 goto label6;

        $r1 = this.<weka.core.pmml.MappingInfo: int[] m_fieldsMap>;

        $i2 = $r1[i#8];

        $d0 = interfaceinvoke inst.<weka.core.Instance: double value(int)>($i2);

        result[i#8] = $d0;

        $r2 = virtualinvoke miningSchemaI.<weka.core.Instances: weka.core.Attribute attribute(int)>(i#8);

        $z0 = virtualinvoke $r2.<weka.core.Attribute: boolean isNominal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label2;

        $r3 = virtualinvoke miningSchemaI.<weka.core.Instances: weka.core.Attribute attribute(int)>(i#8);

        $z1 = virtualinvoke $r3.<weka.core.Attribute: boolean isString()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label5;

     label2:
        $r4 = this.<weka.core.pmml.MappingInfo: int[] m_fieldsMap>;

        $i3 = $r4[i#8];

        $d1 = interfaceinvoke inst.<weka.core.Instance: double value(int)>($i3);

        $z2 = staticinvoke <weka.core.Utils: boolean isMissingValue(double)>($d1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label5;

        $r5 = this.<weka.core.pmml.MappingInfo: int[][] m_nominalValueMaps>;

        valueMap = $r5[i#8];

        $r6 = this.<weka.core.pmml.MappingInfo: int[] m_fieldsMap>;

        $i4 = $r6[i#8];

        $d2 = interfaceinvoke inst.<weka.core.Instance: double value(int)>($i4);

        $i5 = (int) $d2;

        index = valueMap[$i5];

        $r7 = this.<weka.core.pmml.MappingInfo: int[] m_fieldsMap>;

        $i6 = $r7[i#8];

        $r8 = interfaceinvoke inst.<weka.core.Instance: weka.core.Attribute attribute(int)>($i6);

        $r9 = this.<weka.core.pmml.MappingInfo: int[] m_fieldsMap>;

        $i7 = $r9[i#8];

        $d3 = interfaceinvoke inst.<weka.core.Instance: double value(int)>($i7);

        $i8 = (int) $d3;

        incomingAttValue = virtualinvoke $r8.<weka.core.Attribute: java.lang.String value(int)>($i8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(index);

        if index < 0 goto label3;

        $d4 = (double) index;

        result[i#8] = $d4;

        goto label5;

     label3:
        result[i#8] = -1.0;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[MappingInfo] WARNING: Can\'t match nominal value ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(incomingAttValue);

        warningString = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = this.<weka.core.pmml.MappingInfo: weka.gui.Logger m_log>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r13);

        if $r13 == null goto label4;

        $r14 = this.<weka.core.pmml.MappingInfo: weka.gui.Logger m_log>;

        interfaceinvoke $r14.<weka.gui.Logger: void logMessage(java.lang.String)>(warningString);

        goto label5;

     label4:
        $r15 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>(warningString);

     label5:
        i#8 = i#8 + 1;

        goto label1;

     label6:
        virtualinvoke miningSchema.<weka.core.pmml.MiningSchema: void applyMissingAndOutlierTreatments(double[])>(result);

        derivedFields = virtualinvoke miningSchema.<weka.core.pmml.MiningSchema: java.util.ArrayList getDerivedFields()>();

        i#88 = 0;

     label7:
        $i9 = virtualinvoke derivedFields.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#88);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        if i#88 >= $i9 goto label8;

        $r16 = virtualinvoke derivedFields.<java.util.ArrayList: java.lang.Object get(int)>(i#88);

        temp = (weka.core.pmml.DerivedFieldMetaInfo) $r16;

        r = virtualinvoke temp.<weka.core.pmml.DerivedFieldMetaInfo: double getDerivedValue(double[])>(result);

        $i10 = virtualinvoke miningSchemaI.<weka.core.Instances: int numAttributes()>();

        $i11 = i#88 + $i10;

        result[$i11] = r;

        i#88 = i#88 + 1;

        goto label7;

     label8:
        return result;
    }


