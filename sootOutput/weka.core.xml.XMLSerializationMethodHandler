    public void <init>(java.lang.Object) throws java.lang.Exception
    {
        weka.core.xml.XMLSerializationMethodHandler this;
        java.lang.Object owner;
        weka.core.xml.MethodHandler $r0, $r1;

        this := @this: weka.core.xml.XMLSerializationMethodHandler;

        owner := @parameter0: java.lang.Object;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<weka.core.xml.XMLSerializationMethodHandler: weka.core.xml.MethodHandler m_ReadMethods> = null;

        this.<weka.core.xml.XMLSerializationMethodHandler: weka.core.xml.MethodHandler m_WriteMethods> = null;

        this.<weka.core.xml.XMLSerializationMethodHandler: java.lang.Object owner> = null;

        this.<weka.core.xml.XMLSerializationMethodHandler: java.lang.Object owner> = owner;

        $r0 = new weka.core.xml.MethodHandler;

        specialinvoke $r0.<weka.core.xml.MethodHandler: void <init>()>();

        this.<weka.core.xml.XMLSerializationMethodHandler: weka.core.xml.MethodHandler m_ReadMethods> = $r0;

        $r1 = new weka.core.xml.MethodHandler;

        specialinvoke $r1.<weka.core.xml.MethodHandler: void <init>()>();

        this.<weka.core.xml.XMLSerializationMethodHandler: weka.core.xml.MethodHandler m_WriteMethods> = $r1;

        virtualinvoke this.<weka.core.xml.XMLSerializationMethodHandler: void clear()>();

        return;
    }

    public void clear()
    {
        weka.core.xml.XMLSerializationMethodHandler this;
        java.lang.Exception e, $r2;
        weka.core.xml.MethodHandler $r0, $r1;

        this := @this: weka.core.xml.XMLSerializationMethodHandler;

        $r0 = this.<weka.core.xml.XMLSerializationMethodHandler: weka.core.xml.MethodHandler m_ReadMethods>;

        virtualinvoke $r0.<weka.core.xml.MethodHandler: void clear()>();

        $r1 = this.<weka.core.xml.XMLSerializationMethodHandler: weka.core.xml.MethodHandler m_WriteMethods>;

        virtualinvoke $r1.<weka.core.xml.MethodHandler: void clear()>();

     label1:
        virtualinvoke this.<weka.core.xml.XMLSerializationMethodHandler: void addMethods()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        e = $r2;

        virtualinvoke e.<java.lang.Exception: void printStackTrace()>();

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected void addMethods() throws java.lang.Exception
    {
        weka.core.xml.XMLSerializationMethodHandler this;
        java.lang.Class[] params#3, params#24;
        java.lang.Object $r0, $r3, $r6, $r9;
        java.lang.Class $r1, $r4, $r7, $r10;
        java.lang.reflect.Method method#13, method#40;
        weka.core.xml.MethodHandler $r2, $r8;
        java.lang.reflect.Method[] $r5, $r11;

        this := @this: weka.core.xml.XMLSerializationMethodHandler;

        params#3 = newarray (java.lang.Class)[1];

        params#3[0] = class "org/w3c/dom/Element";

        $r0 = this.<weka.core.xml.XMLSerializationMethodHandler: java.lang.Object owner>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        method#13 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("readFromXML", params#3);

        $r2 = this.<weka.core.xml.XMLSerializationMethodHandler: weka.core.xml.MethodHandler m_ReadMethods>;

        $r3 = this.<weka.core.xml.XMLSerializationMethodHandler: java.lang.Object owner>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        virtualinvoke this.<weka.core.xml.XMLSerializationMethodHandler: void addMethods(weka.core.xml.MethodHandler,java.lang.reflect.Method,java.lang.reflect.Method[])>($r2, method#13, $r5);

        params#24 = newarray (java.lang.Class)[3];

        params#24[0] = class "org/w3c/dom/Element";

        params#24[1] = class "java/lang/Object";

        params#24[2] = class "java/lang/String";

        $r6 = this.<weka.core.xml.XMLSerializationMethodHandler: java.lang.Object owner>;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        method#40 = virtualinvoke $r7.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("writeToXML", params#24);

        $r8 = this.<weka.core.xml.XMLSerializationMethodHandler: weka.core.xml.MethodHandler m_WriteMethods>;

        $r9 = this.<weka.core.xml.XMLSerializationMethodHandler: java.lang.Object owner>;

        $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        virtualinvoke this.<weka.core.xml.XMLSerializationMethodHandler: void addMethods(weka.core.xml.MethodHandler,java.lang.reflect.Method,java.lang.reflect.Method[])>($r8, method#40, $r11);

        return;
    }

    protected void addMethods(weka.core.xml.MethodHandler, java.lang.reflect.Method, java.lang.reflect.Method[])
    {
        weka.core.xml.XMLSerializationMethodHandler this;
        weka.core.xml.MethodHandler handler;
        java.lang.reflect.Method template, method;
        java.lang.reflect.Method[] methods;
        int i#2, $i0, $i1, $i2, n#26, $i3;
        boolean $z0, $z1, equal#24, $z2;
        java.lang.Class $r0, $r1, $r6, $r8;
        java.lang.Class[] $r2, $r3, $r4, $r5, $r7;
        java.lang.String name#44, name#49, $r10, $r11, $r13, name#62;
        java.lang.StringBuilder $r9, $r12, $r14;

        this := @this: weka.core.xml.XMLSerializationMethodHandler;

        handler := @parameter0: weka.core.xml.MethodHandler;

        template := @parameter1: java.lang.reflect.Method;

        methods := @parameter2: java.lang.reflect.Method[];

        i#2 = 0;

     label1:
        $i0 = lengthof methods;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#2 >= $i0 goto label9;

        method = methods[i#2];

        $z0 = virtualinvoke template.<java.lang.reflect.Method: boolean equals(java.lang.Object)>(method);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        goto label8;

     label2:
        $r0 = virtualinvoke template.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r1 = virtualinvoke method.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $z1 = virtualinvoke $r0.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label3;

        goto label8;

     label3:
        $r2 = virtualinvoke template.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i1 = lengthof $r2;

        $r3 = virtualinvoke method.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i2 = lengthof $r3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i1 == $i2 goto label4;

        goto label8;

     label4:
        equal#24 = 1;

        n#26 = 0;

     label5:
        $r4 = virtualinvoke template.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i3 = lengthof $r4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n#26);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if n#26 >= $i3 goto label7;

        $r5 = virtualinvoke template.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r6 = $r5[n#26];

        $r7 = virtualinvoke method.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r8 = $r7[n#26];

        $z2 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label6;

        equal#24 = 0;

        goto label7;

     label6:
        n#26 = n#26 + 1;

        goto label5;

     label7:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(equal#24);

        if equal#24 == 0 goto label8;

        name#44 = virtualinvoke method.<java.lang.reflect.Method: java.lang.String getName()>();

        name#49 = virtualinvoke name#44.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("read|write", "");

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke name#49.<java.lang.String: java.lang.String substring(int,int)>(0, 1);

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String toLowerCase()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke name#49.<java.lang.String: java.lang.String substring(int)>(1);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        name#62 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke handler.<weka.core.xml.MethodHandler: void add(java.lang.String,java.lang.reflect.Method)>(name#62, method);

     label8:
        i#2 = i#2 + 1;

        goto label1;

     label9:
        return;
    }

    public weka.core.xml.MethodHandler write()
    {
        weka.core.xml.XMLSerializationMethodHandler this;
        weka.core.xml.MethodHandler $r0;

        this := @this: weka.core.xml.XMLSerializationMethodHandler;

        $r0 = this.<weka.core.xml.XMLSerializationMethodHandler: weka.core.xml.MethodHandler m_WriteMethods>;

        return $r0;
    }

    public weka.core.xml.MethodHandler read()
    {
        weka.core.xml.XMLSerializationMethodHandler this;
        weka.core.xml.MethodHandler $r0;

        this := @this: weka.core.xml.XMLSerializationMethodHandler;

        $r0 = this.<weka.core.xml.XMLSerializationMethodHandler: weka.core.xml.MethodHandler m_ReadMethods>;

        return $r0;
    }

    public void register(java.lang.Object, java.lang.Class, java.lang.String)
    {
        weka.core.xml.XMLSerializationMethodHandler this;
        java.lang.Object handler;
        java.lang.Class 'cls';
        java.lang.String name, $r4, $r10;
        weka.core.xml.MethodHandler $r0, $r6;
        java.lang.StringBuilder $r1, $r2, $r3, $r7, $r8, $r9;
        java.lang.reflect.Method $r5, $r11;

        this := @this: weka.core.xml.XMLSerializationMethodHandler;

        handler := @parameter0: java.lang.Object;

        'cls' := @parameter1: java.lang.Class;

        name := @parameter2: java.lang.String;

        $r0 = virtualinvoke this.<weka.core.xml.XMLSerializationMethodHandler: weka.core.xml.MethodHandler read()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("read");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = staticinvoke <weka.core.xml.XMLSerializationMethodHandler: java.lang.reflect.Method findReadMethod(java.lang.Object,java.lang.String)>(handler, $r4);

        virtualinvoke $r0.<weka.core.xml.MethodHandler: void add(java.lang.Class,java.lang.reflect.Method)>('cls', $r5);

        $r6 = virtualinvoke this.<weka.core.xml.XMLSerializationMethodHandler: weka.core.xml.MethodHandler write()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("write");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = staticinvoke <weka.core.xml.XMLSerializationMethodHandler: java.lang.reflect.Method findWriteMethod(java.lang.Object,java.lang.String)>(handler, $r10);

        virtualinvoke $r6.<weka.core.xml.MethodHandler: void add(java.lang.Class,java.lang.reflect.Method)>('cls', $r11);

        return;
    }

    public static java.lang.reflect.Method findWriteMethod(java.lang.Object, java.lang.String)
    {
        java.lang.Object o;
        java.lang.String name;
        java.lang.Class[] params;
        java.lang.Class $r0;
        java.lang.reflect.Method result#19;
        java.lang.Exception $r1;

        o := @parameter0: java.lang.Object;

        name := @parameter1: java.lang.String;

        params = newarray (java.lang.Class)[3];

        params[0] = class "org/w3c/dom/Element";

        params[1] = class "java/lang/Object";

        params[2] = class "java/lang/String";

     label1:
        $r0 = virtualinvoke o.<java.lang.Object: java.lang.Class getClass()>();

        result#19 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(name, params);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        result#19 = null;

     label4:
        return result#19;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static java.lang.reflect.Method findReadMethod(java.lang.Object, java.lang.String)
    {
        java.lang.Object o;
        java.lang.String name;
        java.lang.Class[] params;
        java.lang.Class $r0;
        java.lang.reflect.Method result#13;
        java.lang.Exception $r1;

        o := @parameter0: java.lang.Object;

        name := @parameter1: java.lang.String;

        params = newarray (java.lang.Class)[1];

        params[0] = class "org/w3c/dom/Element";

     label1:
        $r0 = virtualinvoke o.<java.lang.Object: java.lang.Class getClass()>();

        result#13 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(name, params);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        result#13 = null;

     label4:
        return result#13;

        catch java.lang.Exception from label1 to label2 with label3;
    }


