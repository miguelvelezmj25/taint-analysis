    public boolean forward(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.transform.WHT16 this;
        kanzi.SliceIntArray src, dst;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3, $i4;
        int[] $r0, $r1;

        this := @this: kanzi.transform.WHT16;

        src := @parameter0: kanzi.SliceIntArray;

        dst := @parameter1: kanzi.SliceIntArray;

        $z0 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(src);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i0 = src.<kanzi.SliceIntArray: int length>;

        if $i0 == 256 goto label2;

        return 0;

     label2:
        if src == dst goto label4;

        $z1 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(dst);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $i1 = dst.<kanzi.SliceIntArray: int index>;

        $i2 = $i1 + 256;

        $r0 = dst.<kanzi.SliceIntArray: int[] array>;

        $i3 = lengthof $r0;

        if $i2 <= $i3 goto label4;

        return 0;

     label4:
        $r1 = this.<kanzi.transform.WHT16: int[] data>;

        $i4 = this.<kanzi.transform.WHT16: int fScale>;

        $z2 = staticinvoke <kanzi.transform.WHT16: boolean compute(kanzi.SliceIntArray,kanzi.SliceIntArray,int[],int)>(src, dst, $r1, $i4);

        return $z2;
    }

    private static boolean compute(kanzi.SliceIntArray, kanzi.SliceIntArray, int[], int)
    {
        kanzi.SliceIntArray src, dst;
        int[] buffer, input, output;
        int shift, srcIdx, dstIdx, si, adjust, di, dataptr#10, i#12, x0#21, $i0, x1#27, $i1, x2#33, $i2, x3#39, $i3, x4#45, $i4, x5#51, $i5, x6#57, $i6, x7#63, $i7, x8#69, $i8, x9#75, $i9, x10#81, $i10, x11#87, $i11, x12#93, $i12, x13#99, $i13, x14#105, $i14, x15#111, a0#115, a1#119, a2#123, a3#127, a4#131, a5#135, a6#139, a7#143, a8#147, a9#151, a10#155, a11#159, a12#163, a13#167, a14#171, a15#175, b0#179, b1#183, b2#187, b3#191, b4#195, b5#199, b6#203, b7#207, b8#211, b9#215, b10#219, b11#223, b12#227, b13#231, b14#235, b15#239, a0#243, a1#247, a2#251, a3#255, a4#259, a5#263, a6#267, a7#271, a8#275, a9#279, a10#283, a11#287, a12#291, a13#295, a14#299, a15#303, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, dataptr#415, $i46, i#422, x0#428, $i47, x1#434, $i48, x2#440, $i49, x3#446, $i50, x4#452, $i51, x5#458, $i52, x6#464, $i53, x7#470, $i54, x8#476, $i55, x9#482, $i56, x10#488, $i57, x11#494, $i58, x12#500, $i59, x13#506, $i60, x14#512, $i61, x15#518, a0#522, a1#526, a2#530, a3#534, a4#538, a5#542, a6#546, a7#550, a8#554, a9#558, a10#562, a11#566, a12#570, a13#574, a14#578, a15#582, b0#586, b1#590, b2#594, b3#598, b4#602, b5#606, b6#610, b7#614, b8#618, b9#622, b10#626, b11#630, b12#634, b13#638, b14#642, b15#646, a0#650, a1#654, a2#658, a3#662, a4#666, a5#670, a6#674, a7#678, a8#682, a9#686, a10#690, a11#694, a12#698, a13#702, a14#706, a15#710, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128;

        src := @parameter0: kanzi.SliceIntArray;

        dst := @parameter1: kanzi.SliceIntArray;

        buffer := @parameter2: int[];

        shift := @parameter3: int;

        input = src.<kanzi.SliceIntArray: int[] array>;

        output = dst.<kanzi.SliceIntArray: int[] array>;

        srcIdx = src.<kanzi.SliceIntArray: int index>;

        dstIdx = dst.<kanzi.SliceIntArray: int index>;

        dataptr#10 = 0;

        i#12 = 0;

     label1:
        if i#12 >= 256 goto label2;

        si = srcIdx + i#12;

        x0#21 = input[si];

        $i0 = si + 1;

        x1#27 = input[$i0];

        $i1 = si + 2;

        x2#33 = input[$i1];

        $i2 = si + 3;

        x3#39 = input[$i2];

        $i3 = si + 4;

        x4#45 = input[$i3];

        $i4 = si + 5;

        x5#51 = input[$i4];

        $i5 = si + 6;

        x6#57 = input[$i5];

        $i6 = si + 7;

        x7#63 = input[$i6];

        $i7 = si + 8;

        x8#69 = input[$i7];

        $i8 = si + 9;

        x9#75 = input[$i8];

        $i9 = si + 10;

        x10#81 = input[$i9];

        $i10 = si + 11;

        x11#87 = input[$i10];

        $i11 = si + 12;

        x12#93 = input[$i11];

        $i12 = si + 13;

        x13#99 = input[$i12];

        $i13 = si + 14;

        x14#105 = input[$i13];

        $i14 = si + 15;

        x15#111 = input[$i14];

        a0#115 = x0#21 + x1#27;

        a1#119 = x2#33 + x3#39;

        a2#123 = x4#45 + x5#51;

        a3#127 = x6#57 + x7#63;

        a4#131 = x8#69 + x9#75;

        a5#135 = x10#81 + x11#87;

        a6#139 = x12#93 + x13#99;

        a7#143 = x14#105 + x15#111;

        a8#147 = x0#21 - x1#27;

        a9#151 = x2#33 - x3#39;

        a10#155 = x4#45 - x5#51;

        a11#159 = x6#57 - x7#63;

        a12#163 = x8#69 - x9#75;

        a13#167 = x10#81 - x11#87;

        a14#171 = x12#93 - x13#99;

        a15#175 = x14#105 - x15#111;

        b0#179 = a0#115 + a1#119;

        b1#183 = a2#123 + a3#127;

        b2#187 = a4#131 + a5#135;

        b3#191 = a6#139 + a7#143;

        b4#195 = a8#147 + a9#151;

        b5#199 = a10#155 + a11#159;

        b6#203 = a12#163 + a13#167;

        b7#207 = a14#171 + a15#175;

        b8#211 = a0#115 - a1#119;

        b9#215 = a2#123 - a3#127;

        b10#219 = a4#131 - a5#135;

        b11#223 = a6#139 - a7#143;

        b12#227 = a8#147 - a9#151;

        b13#231 = a10#155 - a11#159;

        b14#235 = a12#163 - a13#167;

        b15#239 = a14#171 - a15#175;

        a0#243 = b0#179 + b1#183;

        a1#247 = b2#187 + b3#191;

        a2#251 = b4#195 + b5#199;

        a3#255 = b6#203 + b7#207;

        a4#259 = b8#211 + b9#215;

        a5#263 = b10#219 + b11#223;

        a6#267 = b12#227 + b13#231;

        a7#271 = b14#235 + b15#239;

        a8#275 = b0#179 - b1#183;

        a9#279 = b2#187 - b3#191;

        a10#283 = b4#195 - b5#199;

        a11#287 = b6#203 - b7#207;

        a12#291 = b8#211 - b9#215;

        a13#295 = b10#219 - b11#223;

        a14#299 = b12#227 - b13#231;

        a15#303 = b14#235 - b15#239;

        $i15 = a0#243 + a1#247;

        buffer[dataptr#10] = $i15;

        $i16 = dataptr#10 + 1;

        $i17 = a2#251 + a3#255;

        buffer[$i16] = $i17;

        $i18 = dataptr#10 + 2;

        $i19 = a4#259 + a5#263;

        buffer[$i18] = $i19;

        $i20 = dataptr#10 + 3;

        $i21 = a6#267 + a7#271;

        buffer[$i20] = $i21;

        $i22 = dataptr#10 + 4;

        $i23 = a8#275 + a9#279;

        buffer[$i22] = $i23;

        $i24 = dataptr#10 + 5;

        $i25 = a10#283 + a11#287;

        buffer[$i24] = $i25;

        $i26 = dataptr#10 + 6;

        $i27 = a12#291 + a13#295;

        buffer[$i26] = $i27;

        $i28 = dataptr#10 + 7;

        $i29 = a14#299 + a15#303;

        buffer[$i28] = $i29;

        $i30 = dataptr#10 + 8;

        $i31 = a0#243 - a1#247;

        buffer[$i30] = $i31;

        $i32 = dataptr#10 + 9;

        $i33 = a2#251 - a3#255;

        buffer[$i32] = $i33;

        $i34 = dataptr#10 + 10;

        $i35 = a4#259 - a5#263;

        buffer[$i34] = $i35;

        $i36 = dataptr#10 + 11;

        $i37 = a6#267 - a7#271;

        buffer[$i36] = $i37;

        $i38 = dataptr#10 + 12;

        $i39 = a8#275 - a9#279;

        buffer[$i38] = $i39;

        $i40 = dataptr#10 + 13;

        $i41 = a10#283 - a11#287;

        buffer[$i40] = $i41;

        $i42 = dataptr#10 + 14;

        $i43 = a12#291 - a13#295;

        buffer[$i42] = $i43;

        $i44 = dataptr#10 + 15;

        $i45 = a14#299 - a15#303;

        buffer[$i44] = $i45;

        dataptr#10 = dataptr#10 + 16;

        i#12 = i#12 + 16;

        goto label1;

     label2:
        dataptr#415 = 0;

        $i46 = 1 << shift;

        adjust = $i46 >> 1;

        i#422 = 0;

     label3:
        if i#422 >= 16 goto label4;

        x0#428 = buffer[dataptr#415];

        $i47 = dataptr#415 + 16;

        x1#434 = buffer[$i47];

        $i48 = dataptr#415 + 32;

        x2#440 = buffer[$i48];

        $i49 = dataptr#415 + 48;

        x3#446 = buffer[$i49];

        $i50 = dataptr#415 + 64;

        x4#452 = buffer[$i50];

        $i51 = dataptr#415 + 80;

        x5#458 = buffer[$i51];

        $i52 = dataptr#415 + 96;

        x6#464 = buffer[$i52];

        $i53 = dataptr#415 + 112;

        x7#470 = buffer[$i53];

        $i54 = dataptr#415 + 128;

        x8#476 = buffer[$i54];

        $i55 = dataptr#415 + 144;

        x9#482 = buffer[$i55];

        $i56 = dataptr#415 + 160;

        x10#488 = buffer[$i56];

        $i57 = dataptr#415 + 176;

        x11#494 = buffer[$i57];

        $i58 = dataptr#415 + 192;

        x12#500 = buffer[$i58];

        $i59 = dataptr#415 + 208;

        x13#506 = buffer[$i59];

        $i60 = dataptr#415 + 224;

        x14#512 = buffer[$i60];

        $i61 = dataptr#415 + 240;

        x15#518 = buffer[$i61];

        a0#522 = x0#428 + x1#434;

        a1#526 = x2#440 + x3#446;

        a2#530 = x4#452 + x5#458;

        a3#534 = x6#464 + x7#470;

        a4#538 = x8#476 + x9#482;

        a5#542 = x10#488 + x11#494;

        a6#546 = x12#500 + x13#506;

        a7#550 = x14#512 + x15#518;

        a8#554 = x0#428 - x1#434;

        a9#558 = x2#440 - x3#446;

        a10#562 = x4#452 - x5#458;

        a11#566 = x6#464 - x7#470;

        a12#570 = x8#476 - x9#482;

        a13#574 = x10#488 - x11#494;

        a14#578 = x12#500 - x13#506;

        a15#582 = x14#512 - x15#518;

        b0#586 = a0#522 + a1#526;

        b1#590 = a2#530 + a3#534;

        b2#594 = a4#538 + a5#542;

        b3#598 = a6#546 + a7#550;

        b4#602 = a8#554 + a9#558;

        b5#606 = a10#562 + a11#566;

        b6#610 = a12#570 + a13#574;

        b7#614 = a14#578 + a15#582;

        b8#618 = a0#522 - a1#526;

        b9#622 = a2#530 - a3#534;

        b10#626 = a4#538 - a5#542;

        b11#630 = a6#546 - a7#550;

        b12#634 = a8#554 - a9#558;

        b13#638 = a10#562 - a11#566;

        b14#642 = a12#570 - a13#574;

        b15#646 = a14#578 - a15#582;

        a0#650 = b0#586 + b1#590;

        a1#654 = b2#594 + b3#598;

        a2#658 = b4#602 + b5#606;

        a3#662 = b6#610 + b7#614;

        a4#666 = b8#618 + b9#622;

        a5#670 = b10#626 + b11#630;

        a6#674 = b12#634 + b13#638;

        a7#678 = b14#642 + b15#646;

        a8#682 = b0#586 - b1#590;

        a9#686 = b2#594 - b3#598;

        a10#690 = b4#602 - b5#606;

        a11#694 = b6#610 - b7#614;

        a12#698 = b8#618 - b9#622;

        a13#702 = b10#626 - b11#630;

        a14#706 = b12#634 - b13#638;

        a15#710 = b14#642 - b15#646;

        di = dstIdx + i#422;

        $i62 = a0#650 + a1#654;

        $i63 = $i62 + adjust;

        $i64 = $i63 >> shift;

        output[di] = $i64;

        $i65 = di + 16;

        $i66 = a2#658 + a3#662;

        $i67 = $i66 + adjust;

        $i68 = $i67 >> shift;

        output[$i65] = $i68;

        $i69 = di + 32;

        $i70 = a4#666 + a5#670;

        $i71 = $i70 + adjust;

        $i72 = $i71 >> shift;

        output[$i69] = $i72;

        $i73 = di + 48;

        $i74 = a6#674 + a7#678;

        $i75 = $i74 + adjust;

        $i76 = $i75 >> shift;

        output[$i73] = $i76;

        $i77 = di + 64;

        $i78 = a8#682 + a9#686;

        $i79 = $i78 + adjust;

        $i80 = $i79 >> shift;

        output[$i77] = $i80;

        $i81 = di + 80;

        $i82 = a10#690 + a11#694;

        $i83 = $i82 + adjust;

        $i84 = $i83 >> shift;

        output[$i81] = $i84;

        $i85 = di + 96;

        $i86 = a12#698 + a13#702;

        $i87 = $i86 + adjust;

        $i88 = $i87 >> shift;

        output[$i85] = $i88;

        $i89 = di + 112;

        $i90 = a14#706 + a15#710;

        $i91 = $i90 + adjust;

        $i92 = $i91 >> shift;

        output[$i89] = $i92;

        $i93 = di + 128;

        $i94 = a0#650 - a1#654;

        $i95 = $i94 + adjust;

        $i96 = $i95 >> shift;

        output[$i93] = $i96;

        $i97 = di + 144;

        $i98 = a2#658 - a3#662;

        $i99 = $i98 + adjust;

        $i100 = $i99 >> shift;

        output[$i97] = $i100;

        $i101 = di + 160;

        $i102 = a4#666 - a5#670;

        $i103 = $i102 + adjust;

        $i104 = $i103 >> shift;

        output[$i101] = $i104;

        $i105 = di + 176;

        $i106 = a6#674 - a7#678;

        $i107 = $i106 + adjust;

        $i108 = $i107 >> shift;

        output[$i105] = $i108;

        $i109 = di + 192;

        $i110 = a8#682 - a9#686;

        $i111 = $i110 + adjust;

        $i112 = $i111 >> shift;

        output[$i109] = $i112;

        $i113 = di + 208;

        $i114 = a10#690 - a11#694;

        $i115 = $i114 + adjust;

        $i116 = $i115 >> shift;

        output[$i113] = $i116;

        $i117 = di + 224;

        $i118 = a12#698 - a13#702;

        $i119 = $i118 + adjust;

        $i120 = $i119 >> shift;

        output[$i117] = $i120;

        $i121 = di + 240;

        $i122 = a14#706 - a15#710;

        $i123 = $i122 + adjust;

        $i124 = $i123 >> shift;

        output[$i121] = $i124;

        dataptr#415 = dataptr#415 + 1;

        i#422 = i#422 + 1;

        goto label3;

     label4:
        $i125 = src.<kanzi.SliceIntArray: int index>;

        $i126 = $i125 + 256;

        src.<kanzi.SliceIntArray: int index> = $i126;

        $i127 = dst.<kanzi.SliceIntArray: int index>;

        $i128 = $i127 + 256;

        dst.<kanzi.SliceIntArray: int index> = $i128;

        return 1;
    }

    public boolean inverse(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.transform.WHT16 this;
        kanzi.SliceIntArray src, dst;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3, $i4;
        int[] $r0, $r1;

        this := @this: kanzi.transform.WHT16;

        src := @parameter0: kanzi.SliceIntArray;

        dst := @parameter1: kanzi.SliceIntArray;

        $z0 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(src);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i0 = src.<kanzi.SliceIntArray: int length>;

        if $i0 == 256 goto label2;

        return 0;

     label2:
        if src == dst goto label4;

        $z1 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(dst);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $i1 = dst.<kanzi.SliceIntArray: int index>;

        $i2 = $i1 + 256;

        $r0 = dst.<kanzi.SliceIntArray: int[] array>;

        $i3 = lengthof $r0;

        if $i2 <= $i3 goto label4;

        return 0;

     label4:
        $r1 = this.<kanzi.transform.WHT16: int[] data>;

        $i4 = this.<kanzi.transform.WHT16: int iScale>;

        $z2 = staticinvoke <kanzi.transform.WHT16: boolean compute(kanzi.SliceIntArray,kanzi.SliceIntArray,int[],int)>(src, dst, $r1, $i4);

        return $z2;
    }


