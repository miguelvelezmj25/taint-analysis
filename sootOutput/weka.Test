    public static void main(java.lang.String[])
    {
        weka.classifiers.rules.JRip jrip, $r21;
        java.lang.String[] args#1, args#66;
        java.io.PrintStream $r0;
        java.lang.String $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, batchSize#88;
        java.lang.Boolean $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, debug#82, checkError#84, prune#86, noCheckCapabilities#90, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29;
        byte folds#74, optimizations#76, numDecimal#92;
        long seed#78;
        double minNo#80;

        args#1 := @parameter0: java.lang.String[];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void init()>();

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Original");

        $r1 = args#1[0];

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r1);

        $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

        $z1 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getOptionFOLDS(boolean)>($z0);

        <weka.Test: boolean FOLDS> = $z1;

        $r3 = args#1[1];

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r3);

        $z2 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        $z3 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getOptionOPTIMIZATIONS(boolean)>($z2);

        <weka.Test: boolean OPTIMIZATIONS> = $z3;

        $r5 = args#1[2];

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r5);

        $z4 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        $z5 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getOptionPRUNE(boolean)>($z4);

        <weka.Test: boolean PRUNE> = $z5;

        $r7 = args#1[3];

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r7);

        $z6 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>();

        $z7 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getOptionSEED(boolean)>($z6);

        <weka.Test: boolean SEED> = $z7;

        $r9 = args#1[4];

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r9);

        $z8 = virtualinvoke $r10.<java.lang.Boolean: boolean booleanValue()>();

        $z9 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getOptionMINNO(boolean)>($z8);

        <weka.Test: boolean MINNO> = $z9;

        $r11 = args#1[5];

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r11);

        $z10 = virtualinvoke $r12.<java.lang.Boolean: boolean booleanValue()>();

        $z11 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getOptionDEBUG(boolean)>($z10);

        <weka.Test: boolean DEBUG> = $z11;

        $r13 = args#1[6];

        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r13);

        $z12 = virtualinvoke $r14.<java.lang.Boolean: boolean booleanValue()>();

        $z13 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getOptionCHECKERROR(boolean)>($z12);

        <weka.Test: boolean CHECKERROR> = $z13;

        $r15 = args#1[8];

        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r15);

        $z14 = virtualinvoke $r16.<java.lang.Boolean: boolean booleanValue()>();

        $z15 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getOptionBATCHSIZE(boolean)>($z14);

        <weka.Test: boolean BATCHSIZE> = $z15;

        $r17 = args#1[9];

        $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r17);

        $z16 = virtualinvoke $r18.<java.lang.Boolean: boolean booleanValue()>();

        $z17 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getOptionNOCHECKCAPABILITIES(boolean)>($z16);

        <weka.Test: boolean NOCHECKCAPABILITIES> = $z17;

        $r19 = args#1[10];

        $r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r19);

        $z18 = virtualinvoke $r20.<java.lang.Boolean: boolean booleanValue()>();

        $z19 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getOptionNUMDECIMAL(boolean)>($z18);

        <weka.Test: boolean NUMDECIMAL> = $z19;

        args#66 = newarray (java.lang.String)[2];

        args#66[0] = "-t";

        args#66[1] = "/Users/mvelezce/Documents/Programming/Machine Learning/Projects/turtlebot-configurations-validity/datasets/dataset_cross_validation.arff";

        folds#74 = 3;

        optimizations#76 = 2;

        seed#78 = 1L;

        minNo#80 = 2.0;

        debug#82 = 0;

        checkError#84 = 0;

        prune#86 = 0;

        batchSize#88 = "100";

        noCheckCapabilities#90 = 0;

        numDecimal#92 = 2;

        $z20 = <weka.Test: boolean FOLDS>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z20);

        if $z20 == 0 goto label01;

        folds#74 = 10;

     label01:
        $z21 = <weka.Test: boolean OPTIMIZATIONS>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z21);

        if $z21 == 0 goto label02;

        optimizations#76 = 10;

     label02:
        $z22 = <weka.Test: boolean SEED>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z22);

        if $z22 == 0 goto label03;

        seed#78 = 100L;

     label03:
        $z23 = <weka.Test: boolean MINNO>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z23);

        if $z23 == 0 goto label04;

        minNo#80 = 10.0;

     label04:
        $z24 = <weka.Test: boolean DEBUG>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z24);

        if $z24 == 0 goto label05;

        debug#82 = 1;

     label05:
        $z25 = <weka.Test: boolean CHECKERROR>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z25);

        if $z25 == 0 goto label06;

        checkError#84 = 1;

     label06:
        $z26 = <weka.Test: boolean PRUNE>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z26);

        if $z26 == 0 goto label07;

        prune#86 = 1;

     label07:
        $z27 = <weka.Test: boolean BATCHSIZE>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z27);

        if $z27 == 0 goto label08;

        batchSize#88 = "10";

     label08:
        $z28 = <weka.Test: boolean NOCHECKCAPABILITIES>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z28);

        if $z28 == 0 goto label09;

        noCheckCapabilities#90 = 1;

     label09:
        $z29 = <weka.Test: boolean NUMDECIMAL>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z29);

        if $z29 == 0 goto label10;

        numDecimal#92 = 5;

     label10:
        $r21 = new weka.classifiers.rules.JRip;

        specialinvoke $r21.<weka.classifiers.rules.JRip: void <init>()>();

        jrip = $r21;

        virtualinvoke jrip.<weka.classifiers.rules.JRip: void setFolds(int)>(folds#74);

        virtualinvoke jrip.<weka.classifiers.rules.JRip: void setOptimizations(int)>(optimizations#76);

        virtualinvoke jrip.<weka.classifiers.rules.JRip: void setSeed(long)>(seed#78);

        virtualinvoke jrip.<weka.classifiers.rules.JRip: void setMinNo(double)>(minNo#80);

        virtualinvoke jrip.<weka.classifiers.rules.JRip: void setDebug(boolean)>(debug#82);

        virtualinvoke jrip.<weka.classifiers.rules.JRip: void setCheckErrorRate(boolean)>(checkError#84);

        virtualinvoke jrip.<weka.classifiers.rules.JRip: void setUsePruning(boolean)>(prune#86);

        virtualinvoke jrip.<weka.classifiers.rules.JRip: void setBatchSize(java.lang.String)>(batchSize#88);

        virtualinvoke jrip.<weka.classifiers.rules.JRip: void setDoNotCheckCapabilities(boolean)>(noCheckCapabilities#90);

        virtualinvoke jrip.<weka.classifiers.rules.JRip: void setNumDecimalPlaces(int)>(numDecimal#92);

        staticinvoke <weka.classifiers.rules.JRip: void runClassifier(weka.classifiers.Classifier,java.lang.String[])>(jrip, args#66);

        return;
    }

    public void <init>()
    {
        weka.Test this;

        this := @this: weka.Test;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }


