    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        com.sleepycat.je.ReadOptions $r1;
        com.sleepycat.je.WriteOptions $r2;
        com.sleepycat.je.DatabaseEntry $r3, $r5, $r6;
        byte[] $r4;

        $r0 = class "com/sleepycat/je/Cursor";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sleepycat.je.Cursor: boolean $assertionsDisabled> = $z1;

        $r1 = new com.sleepycat.je.ReadOptions;

        specialinvoke $r1.<com.sleepycat.je.ReadOptions: void <init>()>();

        <com.sleepycat.je.Cursor: com.sleepycat.je.ReadOptions DEFAULT_READ_OPTIONS> = $r1;

        $r2 = new com.sleepycat.je.WriteOptions;

        specialinvoke $r2.<com.sleepycat.je.WriteOptions: void <init>()>();

        <com.sleepycat.je.Cursor: com.sleepycat.je.WriteOptions DEFAULT_WRITE_OPTIONS> = $r2;

        $r3 = new com.sleepycat.je.DatabaseEntry;

        $r4 = newarray (byte)[0];

        specialinvoke $r3.<com.sleepycat.je.DatabaseEntry: void <init>(byte[])>($r4);

        <com.sleepycat.je.Cursor: com.sleepycat.je.DatabaseEntry EMPTY_DUP_DATA> = $r3;

        $r5 = new com.sleepycat.je.DatabaseEntry;

        specialinvoke $r5.<com.sleepycat.je.DatabaseEntry: void <init>()>();

        <com.sleepycat.je.Cursor: com.sleepycat.je.DatabaseEntry NO_RETURN_DATA> = $r5;

        $r6 = <com.sleepycat.je.Cursor: com.sleepycat.je.DatabaseEntry NO_RETURN_DATA>;

        virtualinvoke $r6.<com.sleepycat.je.DatabaseEntry: void setPartial(int,int,boolean)>(0, 0, 1);

        return;
    }

    public com.sleepycat.je.OperationResult get(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.Get, com.sleepycat.je.ReadOptions)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry key, data;
        com.sleepycat.je.Get getType;
        com.sleepycat.je.LockMode lockMode;
        java.lang.Error E, $r3;
        com.sleepycat.je.ReadOptions options#1;
        java.util.logging.Level $r0;
        java.lang.String $r1;
        com.sleepycat.je.OperationResult $r2;
        com.sleepycat.je.dbi.DatabaseImpl $r4;
        com.sleepycat.je.dbi.EnvironmentImpl $r5;

        this := @this: com.sleepycat.je.Cursor;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        getType := @parameter2: com.sleepycat.je.Get;

        options#1 := @parameter3: com.sleepycat.je.ReadOptions;

     label1:
        virtualinvoke this.<com.sleepycat.je.Cursor: void checkOpen()>();

        if options#1 != null goto label2;

        options#1 = <com.sleepycat.je.Cursor: com.sleepycat.je.ReadOptions DEFAULT_READ_OPTIONS>;

     label2:
        lockMode = virtualinvoke options#1.<com.sleepycat.je.ReadOptions: com.sleepycat.je.LockMode getLockMode()>();

        $r0 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(getType);

        virtualinvoke this.<com.sleepycat.je.Cursor: void trace(java.util.logging.Level,java.lang.String,java.lang.String,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode)>($r0, "Cursor.get: ", $r1, key, data, lockMode);

        $r2 = virtualinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult getInternal(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.Get,com.sleepycat.je.ReadOptions,com.sleepycat.je.LockMode)>(key, data, getType, options#1, lockMode);

     label3:
        return $r2;

     label4:
        $r3 := @caughtexception;

        E = $r3;

        $r4 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r5 = virtualinvoke $r4.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r5.<com.sleepycat.je.dbi.EnvironmentImpl: void invalidate(java.lang.Error)>(E);

        throw E;

        catch java.lang.Error from label1 to label3 with label4;
    }

    public com.sleepycat.je.OperationResult delete(com.sleepycat.je.WriteOptions)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.WriteOptions options;
        com.sleepycat.je.CacheMode cacheMode, $r1;
        java.util.logging.Level $r0;
        com.sleepycat.je.dbi.DatabaseImpl $r2;
        com.sleepycat.je.log.ReplicationContext $r3;
        com.sleepycat.je.OperationResult $r4;

        this := @this: com.sleepycat.je.Cursor;

        options := @parameter0: com.sleepycat.je.WriteOptions;

        virtualinvoke this.<com.sleepycat.je.Cursor: void checkOpenAndState(boolean)>(1);

        $r0 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        virtualinvoke this.<com.sleepycat.je.Cursor: void trace(java.util.logging.Level,java.lang.String,com.sleepycat.je.LockMode)>($r0, "Cursor.delete: ", null);

        if options == null goto label1;

        $r1 = virtualinvoke options.<com.sleepycat.je.WriteOptions: com.sleepycat.je.CacheMode getCacheMode()>();

        goto label2;

     label1:
        $r1 = null;

     label2:
        cacheMode = $r1;

        $r2 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r3 = virtualinvoke $r2.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.log.ReplicationContext getRepContext()>();

        $r4 = virtualinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult deleteInternal(com.sleepycat.je.log.ReplicationContext,com.sleepycat.je.CacheMode)>($r3, cacheMode);

        return $r4;
    }

    public void close()
    {
        com.sleepycat.je.Cursor this;
        java.lang.Error E, $r4;
        com.sleepycat.je.dbi.CursorImpl $r0, $r1;
        boolean $z0;
        com.sleepycat.je.Database $r2, $r3;
        com.sleepycat.je.dbi.DatabaseImpl $r5;
        com.sleepycat.je.dbi.EnvironmentImpl $r6;

        this := @this: com.sleepycat.je.Cursor;

     label1:
        $r0 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        $z0 = virtualinvoke $r0.<com.sleepycat.je.dbi.CursorImpl: boolean isClosed()>();

        if $z0 == 0 goto label3;

     label2:
        return;

     label3:
        virtualinvoke this.<com.sleepycat.je.Cursor: void checkEnv()>();

        $r1 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        virtualinvoke $r1.<com.sleepycat.je.dbi.CursorImpl: void close()>();

        $r2 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.Database dbHandle>;

        if $r2 == null goto label4;

        $r3 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.Database dbHandle>;

        virtualinvoke $r3.<com.sleepycat.je.Database: void removeCursor(com.sleepycat.je.ForwardCursor)>(this);

        this.<com.sleepycat.je.Cursor: com.sleepycat.je.Database dbHandle> = null;

     label4:
        goto label6;

     label5:
        $r4 := @caughtexception;

        E = $r4;

        $r5 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r6 = virtualinvoke $r5.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r6.<com.sleepycat.je.dbi.EnvironmentImpl: void invalidate(java.lang.Error)>(E);

        throw E;

     label6:
        return;

        catch java.lang.Error from label1 to label2 with label5;
        catch java.lang.Error from label3 to label4 with label5;
    }

    void checkEnv()
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.dbi.CursorImpl $r0;

        this := @this: com.sleepycat.je.Cursor;

        $r0 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        virtualinvoke $r0.<com.sleepycat.je.dbi.CursorImpl: void checkEnv()>();

        return;
    }

    void checkOpenAndState(boolean)
    {
        com.sleepycat.je.Cursor this;
        boolean mustBeInitialized;

        this := @this: com.sleepycat.je.Cursor;

        mustBeInitialized := @parameter0: boolean;

        virtualinvoke this.<com.sleepycat.je.Cursor: void checkEnv()>();

        virtualinvoke this.<com.sleepycat.je.Cursor: void checkOpen()>();

        virtualinvoke this.<com.sleepycat.je.Cursor: void checkState(boolean)>(mustBeInitialized);

        return;
    }

    void trace(java.util.logging.Level, java.lang.String, com.sleepycat.je.LockMode)
    {
        com.sleepycat.je.Cursor this;
        java.util.logging.Level level;
        java.lang.String methodName, $r8;
        com.sleepycat.je.LockMode lockMode;
        java.lang.StringBuilder sb, $r1, $r3;
        java.util.logging.Logger $r0, $r5;
        boolean $z0;
        com.sleepycat.je.dbi.DatabaseImpl $r6;
        com.sleepycat.je.dbi.EnvironmentImpl $r7;

        this := @this: com.sleepycat.je.Cursor;

        level := @parameter0: java.util.logging.Level;

        methodName := @parameter1: java.lang.String;

        lockMode := @parameter2: com.sleepycat.je.LockMode;

        $r0 = this.<com.sleepycat.je.Cursor: java.util.logging.Logger logger>;

        $z0 = virtualinvoke $r0.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>(level);

        if $z0 == 0 goto label2;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        sb = $r1;

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(methodName);

        specialinvoke this.<com.sleepycat.je.Cursor: void traceCursorImpl(java.lang.StringBuilder)>(sb);

        if lockMode == null goto label1;

        $r3 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lockMode=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(lockMode);

     label1:
        $r5 = this.<com.sleepycat.je.Cursor: java.util.logging.Logger logger>;

        $r6 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r7 = virtualinvoke $r6.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r8 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.sleepycat.je.utilint.LoggerUtils: void logMsg(java.util.logging.Logger,com.sleepycat.je.dbi.EnvironmentImpl,java.util.logging.Level,java.lang.String)>($r5, $r7, level, $r8);

     label2:
        return;
    }

    com.sleepycat.je.OperationResult deleteInternal(com.sleepycat.je.log.ReplicationContext, com.sleepycat.je.CacheMode)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.log.ReplicationContext repContext;
        com.sleepycat.je.CacheMode cacheMode;
        boolean hasUserTriggers, hasAssociations, $z0, $z1, $z2, $z3, $z4, needOldData#50, $z5, $z6;
        java.lang.InterruptedException e, $r8;
        com.sleepycat.je.DatabaseEntry oldData, $r12, key#29, $r18;
        com.sleepycat.je.txn.Locker locker;
        java.util.Iterator l12, l14;
        com.sleepycat.je.SecondaryDatabase secDb, secDb;
        com.sleepycat.je.OperationResult deleteResult, readResult#65, l13#134;
        java.lang.Error E, $r37;
        java.lang.Throwable l16, $r40;
        com.sleepycat.je.dbi.DatabaseImpl $r0, $r4, $r10, $r20, $r26, $r32, $r33, $r38, $r41;
        java.util.List $r1;
        com.sleepycat.je.Database $r2, $r3, $r15, $r17;
        com.sleepycat.je.dbi.EnvironmentImpl $r5, $r11, $r21, $r27, $r34, $r39, $r42;
        java.util.concurrent.locks.ReentrantReadWriteLock $r6, $r22, $r28, $r35, $r43;
        java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock $r7, $r23, $r29, $r36, $r44;
        com.sleepycat.je.ThreadInterruptedException $r9;
        com.sleepycat.je.dbi.CursorImpl $r13, $r24, $r31;
        byte[] $r14;
        com.sleepycat.je.SecondaryAssociation $r16;
        java.util.Collection secondaries#41, fkSecondaries#45;
        com.sleepycat.je.LockMode $r19;
        java.lang.Object $r25, $r30;
        int nWrites#107, $i1;
        long $l0;

        this := @this: com.sleepycat.je.Cursor;

        repContext := @parameter0: com.sleepycat.je.log.ReplicationContext;

        cacheMode := @parameter1: com.sleepycat.je.CacheMode;

        virtualinvoke this.<com.sleepycat.je.Cursor: void checkUpdatesAllowed()>();

        $r0 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r1 = virtualinvoke $r0.<com.sleepycat.je.dbi.DatabaseImpl: java.util.List getTriggers()>();

        if $r1 == null goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        hasUserTriggers = $z0;

        $r2 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.Database dbHandle>;

        if $r2 == null goto label03;

        $r3 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.Database dbHandle>;

        $z1 = virtualinvoke $r3.<com.sleepycat.je.Database: boolean hasSecondaryOrForeignKeyAssociations()>();

        if $z1 == 0 goto label03;

        $z2 = 1;

        goto label04;

     label03:
        $z2 = 0;

     label04:
        hasAssociations = $z2;

        if hasAssociations == 0 goto label08;

     label05:
        $r4 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r5 = virtualinvoke $r4.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r6 = virtualinvoke $r5.<com.sleepycat.je.dbi.EnvironmentImpl: java.util.concurrent.locks.ReentrantReadWriteLock getSecondaryAssociationLock()>();

        $r7 = virtualinvoke $r6.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        virtualinvoke $r7.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lockInterruptibly()>();

     label06:
        goto label08;

     label07:
        $r8 := @caughtexception;

        e = $r8;

        $r9 = new com.sleepycat.je.ThreadInterruptedException;

        $r10 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r11 = virtualinvoke $r10.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        specialinvoke $r9.<com.sleepycat.je.ThreadInterruptedException: void <init>(com.sleepycat.je.dbi.EnvironmentImpl,java.lang.Throwable)>($r11, e);

        throw $r9;

     label08:
        if hasAssociations != 0 goto label09;

        if hasUserTriggers == 0 goto label10;

     label09:
        $r12 = new com.sleepycat.je.DatabaseEntry;

        specialinvoke $r12.<com.sleepycat.je.DatabaseEntry: void <init>()>();

        key#29 = $r12;

        $r13 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        $r14 = virtualinvoke $r13.<com.sleepycat.je.dbi.CursorImpl: byte[] getCurrentKey()>();

        virtualinvoke key#29.<com.sleepycat.je.DatabaseEntry: void setData(byte[])>($r14);

        goto label11;

     label10:
        key#29 = null;

     label11:
        if hasAssociations == 0 goto label15;

        $r15 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.Database dbHandle>;

        $r16 = $r15.<com.sleepycat.je.Database: com.sleepycat.je.SecondaryAssociation secAssoc>;

        secondaries#41 = interfaceinvoke $r16.<com.sleepycat.je.SecondaryAssociation: java.util.Collection getSecondaries(com.sleepycat.je.DatabaseEntry)>(key#29);

        $r17 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.Database dbHandle>;

        fkSecondaries#45 = $r17.<com.sleepycat.je.Database: java.util.Collection foreignKeySecondaries>;

        if hasUserTriggers != 0 goto label12;

        $z3 = staticinvoke <com.sleepycat.je.SecondaryDatabase: boolean needOldDataForDelete(java.util.Collection)>(secondaries#41);

        if $z3 == 0 goto label13;

     label12:
        $z4 = 1;

        goto label14;

     label13:
        $z4 = 0;

     label14:
        needOldData#50 = $z4;

        goto label16;

     label15:
        secondaries#41 = null;

        fkSecondaries#45 = null;

        needOldData#50 = hasUserTriggers;

     label16:
        if needOldData#50 == 0 goto label17;

        $r18 = new com.sleepycat.je.DatabaseEntry;

        specialinvoke $r18.<com.sleepycat.je.DatabaseEntry: void <init>()>();

        goto label18;

     label17:
        $r18 = null;

     label18:
        oldData = $r18;

        if needOldData#50 != 0 goto label19;

        if hasAssociations == 0 goto label22;

     label19:
        $r19 = <com.sleepycat.je.LockMode: com.sleepycat.je.LockMode RMW>;

        readResult#65 = virtualinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult getCurrentInternal(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode)>(key#29, oldData, $r19, cacheMode);

        if readResult#65 != null goto label23;

     label20:
        if hasAssociations == 0 goto label21;

        $r20 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r21 = virtualinvoke $r20.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r22 = virtualinvoke $r21.<com.sleepycat.je.dbi.EnvironmentImpl: java.util.concurrent.locks.ReentrantReadWriteLock getSecondaryAssociationLock()>();

        $r23 = virtualinvoke $r22.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        virtualinvoke $r23.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>();

     label21:
        return null;

     label22:
        readResult#65 = null;

     label23:
        $r24 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        locker = virtualinvoke $r24.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.txn.Locker getLocker()>();

        if fkSecondaries#45 == null goto label25;

        l12 = interfaceinvoke fkSecondaries#45.<java.util.Collection: java.util.Iterator iterator()>();

     label24:
        $z5 = interfaceinvoke l12.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label25;

        $r25 = interfaceinvoke l12.<java.util.Iterator: java.lang.Object next()>();

        secDb = (com.sleepycat.je.SecondaryDatabase) $r25;

        virtualinvoke secDb.<com.sleepycat.je.SecondaryDatabase: void onForeignKeyDelete(com.sleepycat.je.txn.Locker,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.CacheMode)>(locker, key#29, cacheMode);

        goto label24;

     label25:
        deleteResult = virtualinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult deleteNoNotify(com.sleepycat.je.CacheMode,com.sleepycat.je.log.ReplicationContext)>(cacheMode, repContext);

        if deleteResult != null goto label28;

     label26:
        if hasAssociations == 0 goto label27;

        $r26 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r27 = virtualinvoke $r26.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r28 = virtualinvoke $r27.<com.sleepycat.je.dbi.EnvironmentImpl: java.util.concurrent.locks.ReentrantReadWriteLock getSecondaryAssociationLock()>();

        $r29 = virtualinvoke $r28.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        virtualinvoke $r29.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>();

     label27:
        return null;

     label28:
        if secondaries#41 == null goto label31;

        nWrites#107 = 0;

        l14 = interfaceinvoke secondaries#41.<java.util.Collection: java.util.Iterator iterator()>();

     label29:
        $z6 = interfaceinvoke l14.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label30;

        $r30 = interfaceinvoke l14.<java.util.Iterator: java.lang.Object next()>();

        secDb = (com.sleepycat.je.SecondaryDatabase) $r30;

        $l0 = virtualinvoke readResult#65.<com.sleepycat.je.OperationResult: long getExpirationTime()>();

        $i1 = virtualinvoke secDb.<com.sleepycat.je.SecondaryDatabase: int updateSecondary(com.sleepycat.je.txn.Locker,com.sleepycat.je.Cursor,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.CacheMode,long,boolean,long)>(locker, null, key#29, oldData, null, cacheMode, 0L, 0, $l0);

        nWrites#107 = nWrites#107 + $i1;

        goto label29;

     label30:
        $r31 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        virtualinvoke $r31.<com.sleepycat.je.dbi.CursorImpl: void setNSecondaryWrites(int)>(nWrites#107);

     label31:
        if hasUserTriggers == 0 goto label32;

        $r32 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        staticinvoke <com.sleepycat.je.dbi.TriggerManager: void runDeleteTriggers(com.sleepycat.je.txn.Locker,com.sleepycat.je.dbi.DatabaseImpl,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry)>(locker, $r32, key#29, oldData);

     label32:
        l13#134 = deleteResult;

     label33:
        if hasAssociations == 0 goto label34;

        $r33 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r34 = virtualinvoke $r33.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r35 = virtualinvoke $r34.<com.sleepycat.je.dbi.EnvironmentImpl: java.util.concurrent.locks.ReentrantReadWriteLock getSecondaryAssociationLock()>();

        $r36 = virtualinvoke $r35.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        virtualinvoke $r36.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>();

     label34:
        return l13#134;

     label35:
        $r37 := @caughtexception;

     label36:
        E = $r37;

        $r38 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r39 = virtualinvoke $r38.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r39.<com.sleepycat.je.dbi.EnvironmentImpl: void invalidate(java.lang.Error)>(E);

        throw E;

     label37:
        $r40 := @caughtexception;

        l16 = $r40;

     label38:
        if hasAssociations == 0 goto label39;

        $r41 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r42 = virtualinvoke $r41.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r43 = virtualinvoke $r42.<com.sleepycat.je.dbi.EnvironmentImpl: java.util.concurrent.locks.ReentrantReadWriteLock getSecondaryAssociationLock()>();

        $r44 = virtualinvoke $r43.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        virtualinvoke $r44.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>();

     label39:
        throw l16;

        catch java.lang.InterruptedException from label05 to label06 with label07;
        catch java.lang.Error from label08 to label20 with label35;
        catch java.lang.Error from label22 to label26 with label35;
        catch java.lang.Error from label28 to label33 with label35;
        catch java.lang.Throwable from label08 to label20 with label37;
        catch java.lang.Throwable from label22 to label26 with label37;
        catch java.lang.Throwable from label28 to label33 with label37;
        catch java.lang.Throwable from label36 to label38 with label37;
    }

    void checkUpdatesAllowed()
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.txn.Locker locker;
        java.lang.StringBuilder str, $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        com.sleepycat.je.dbi.CursorImpl $r0;
        com.sleepycat.je.Database $r4, $r5;
        com.sleepycat.je.dbi.DatabaseImpl $r7, $r10, $r13;
        java.lang.AssertionError $r16;
        java.lang.UnsupportedOperationException $r17;
        java.lang.String $r18;

        this := @this: com.sleepycat.je.Cursor;

        $z0 = this.<com.sleepycat.je.Cursor: boolean updateOperationsProhibited>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r0 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        locker = virtualinvoke $r0.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.txn.Locker getLocker()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>(200);

        str = $r1;

        virtualinvoke str.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Write operation is not allowed because ");

        $z1 = virtualinvoke locker.<com.sleepycat.je.txn.Locker: boolean isReadOnly()>();

        if $z1 == 0 goto label2;

        virtualinvoke str.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("the Transaction is configured as read-only.");

        goto label7;

     label2:
        $r4 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.Database dbHandle>;

        if $r4 == null goto label3;

        $r5 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.Database dbHandle>;

        $z2 = virtualinvoke $r5.<com.sleepycat.je.Database: boolean isWritable()>();

        if $z2 != 0 goto label3;

        virtualinvoke str.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("the Database is configured as read-only.");

        goto label7;

     label3:
        $r7 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z3 = virtualinvoke $r7.<com.sleepycat.je.dbi.DatabaseImpl: boolean isTransactional()>();

        if $z3 == 0 goto label4;

        $z4 = virtualinvoke locker.<com.sleepycat.je.txn.Locker: boolean isTransactional()>();

        if $z4 != 0 goto label4;

        virtualinvoke str.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("a Transaction was not supplied to openCursor ");

        virtualinvoke str.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("and the Database is transactional.");

        goto label7;

     label4:
        $r10 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z5 = virtualinvoke $r10.<com.sleepycat.je.dbi.DatabaseImpl: boolean isReplicated()>();

        if $z5 == 0 goto label5;

        $z6 = virtualinvoke locker.<com.sleepycat.je.txn.Locker: boolean isLocalWrite()>();

        if $z6 == 0 goto label5;

        virtualinvoke str.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("the Database is replicated and Transaction is ");

        virtualinvoke str.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("configured as local-write.");

        goto label7;

     label5:
        $r13 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z7 = virtualinvoke $r13.<com.sleepycat.je.dbi.DatabaseImpl: boolean isReplicated()>();

        if $z7 != 0 goto label6;

        $z8 = virtualinvoke locker.<com.sleepycat.je.txn.Locker: boolean isLocalWrite()>();

        if $z8 != 0 goto label6;

        virtualinvoke str.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("the Database is not replicated and the ");

        virtualinvoke str.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transaction is not configured as local-write.");

        goto label7;

     label6:
        $z9 = <com.sleepycat.je.Cursor: boolean $assertionsDisabled>;

        if $z9 != 0 goto label7;

        $r16 = new java.lang.AssertionError;

        specialinvoke $r16.<java.lang.AssertionError: void <init>()>();

        throw $r16;

     label7:
        $r17 = new java.lang.UnsupportedOperationException;

        $r18 = virtualinvoke str.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r18);

        throw $r17;
    }

    com.sleepycat.je.OperationResult getCurrentInternal(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.LockMode, com.sleepycat.je.CacheMode)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry key, data;
        com.sleepycat.je.LockMode lockMode;
        com.sleepycat.je.CacheMode cacheMode;
        java.lang.Object l5, $r0;
        java.lang.Throwable l6, $r4;
        com.sleepycat.je.dbi.DatabaseImpl $r1;
        boolean $z0;
        com.sleepycat.je.OperationResult $r2, $r3;

        this := @this: com.sleepycat.je.Cursor;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        lockMode := @parameter2: com.sleepycat.je.LockMode;

        cacheMode := @parameter3: com.sleepycat.je.CacheMode;

        $r0 = specialinvoke this.<com.sleepycat.je.Cursor: java.lang.Object getTxnSynchronizer()>();

        l5 = $r0;

        entermonitor $r0;

     label1:
        specialinvoke this.<com.sleepycat.je.Cursor: void checkTxnState()>();

        $r1 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z0 = virtualinvoke $r1.<com.sleepycat.je.dbi.DatabaseImpl: boolean getSortedDuplicates()>();

        if $z0 == 0 goto label3;

        $r2 = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult getCurrentHandleDups(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode)>(key, data, lockMode, cacheMode);

        exitmonitor l5;

     label2:
        return $r2;

     label3:
        $r3 = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult getCurrentNoDups(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode)>(key, data, lockMode, cacheMode);

        exitmonitor l5;

     label4:
        return $r3;

     label5:
        $r4 := @caughtexception;

     label6:
        l6 = $r4;

        exitmonitor l5;

     label7:
        throw l6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    com.sleepycat.je.OperationResult deleteNoNotify(com.sleepycat.je.CacheMode, com.sleepycat.je.log.ReplicationContext)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.CacheMode cacheMode;
        com.sleepycat.je.log.ReplicationContext repContext;
        java.lang.Object l3, $r0;
        com.sleepycat.je.OperationResult result;
        java.lang.Throwable l5, $r6;
        com.sleepycat.je.dbi.CursorImpl $r1;
        com.sleepycat.je.dbi.DatabaseImpl $r2, $r4;
        com.sleepycat.je.dbi.EnvironmentImpl $r3;

        this := @this: com.sleepycat.je.Cursor;

        cacheMode := @parameter0: com.sleepycat.je.CacheMode;

        repContext := @parameter1: com.sleepycat.je.log.ReplicationContext;

        $r0 = specialinvoke this.<com.sleepycat.je.Cursor: java.lang.Object getTxnSynchronizer()>();

        l3 = $r0;

        entermonitor $r0;

     label1:
        specialinvoke this.<com.sleepycat.je.Cursor: void checkTxnState()>();

        specialinvoke this.<com.sleepycat.je.Cursor: void beginUseExistingCursor(com.sleepycat.je.CacheMode)>(cacheMode);

        $r1 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        result = virtualinvoke $r1.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.OperationResult deleteCurrentRecord(com.sleepycat.je.log.ReplicationContext)>(repContext);

        if result == null goto label2;

        $r2 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r3 = virtualinvoke $r2.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r4 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        virtualinvoke $r3.<com.sleepycat.je.dbi.EnvironmentImpl: void incDeleteOps(com.sleepycat.je.dbi.DatabaseImpl)>($r4);

     label2:
        specialinvoke this.<com.sleepycat.je.Cursor: void endUseExistingCursor()>();

        exitmonitor l3;

     label3:
        return result;

     label4:
        $r6 := @caughtexception;

     label5:
        l5 = $r6;

        exitmonitor l3;

     label6:
        throw l5;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private java.lang.Object getTxnSynchronizer()
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.Transaction $r0;
        java.lang.Object $r1;

        this := @this: com.sleepycat.je.Cursor;

        $r0 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.Transaction transaction>;

        if $r0 == null goto label1;

        $r1 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.Transaction transaction>;

        goto label2;

     label1:
        $r1 = this;

     label2:
        return $r1;
    }

    private void checkTxnState()
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.Transaction $r0, $r1, $r2;
        com.sleepycat.je.txn.Txn $r3;

        this := @this: com.sleepycat.je.Cursor;

        $r0 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.Transaction transaction>;

        if $r0 != null goto label1;

        return;

     label1:
        $r1 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.Transaction transaction>;

        virtualinvoke $r1.<com.sleepycat.je.Transaction: void checkOpen()>();

        $r2 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.Transaction transaction>;

        $r3 = virtualinvoke $r2.<com.sleepycat.je.Transaction: com.sleepycat.je.txn.Txn getTxn()>();

        virtualinvoke $r3.<com.sleepycat.je.txn.Txn: void checkState(boolean)>(0);

        return;
    }

    private void beginUseExistingCursor(com.sleepycat.je.CacheMode)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.CacheMode cacheMode, $r1;
        com.sleepycat.je.dbi.CursorImpl $r0, $r2;

        this := @this: com.sleepycat.je.Cursor;

        cacheMode := @parameter0: com.sleepycat.je.CacheMode;

        $r0 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        if cacheMode == null goto label1;

        $r1 = cacheMode;

        goto label2;

     label1:
        $r1 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.CacheMode defaultCacheMode>;

     label2:
        virtualinvoke $r0.<com.sleepycat.je.dbi.CursorImpl: void setCacheMode(com.sleepycat.je.CacheMode)>($r1);

        $r2 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        virtualinvoke $r2.<com.sleepycat.je.dbi.CursorImpl: void criticalEviction()>();

        return;
    }

    private void endUseExistingCursor()
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.dbi.CursorImpl $r0;

        this := @this: com.sleepycat.je.Cursor;

        $r0 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        virtualinvoke $r0.<com.sleepycat.je.dbi.CursorImpl: void criticalEviction()>();

        return;
    }

    private com.sleepycat.je.OperationResult getCurrentHandleDups(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.LockMode, com.sleepycat.je.CacheMode)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry key, data, twoPartKey, $r0, $r1;
        com.sleepycat.je.LockMode lockMode;
        com.sleepycat.je.CacheMode cacheMode;
        com.sleepycat.je.OperationResult result;

        this := @this: com.sleepycat.je.Cursor;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        lockMode := @parameter2: com.sleepycat.je.LockMode;

        cacheMode := @parameter3: com.sleepycat.je.CacheMode;

        $r0 = new com.sleepycat.je.DatabaseEntry;

        specialinvoke $r0.<com.sleepycat.je.DatabaseEntry: void <init>()>();

        twoPartKey = $r0;

        $r1 = <com.sleepycat.je.Cursor: com.sleepycat.je.DatabaseEntry NO_RETURN_DATA>;

        result = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult getCurrentNoDups(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode)>(twoPartKey, $r1, lockMode, cacheMode);

        if result != null goto label1;

        return null;

     label1:
        staticinvoke <com.sleepycat.je.dbi.DupKeyData: void split(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry)>(twoPartKey, key, data);

        return result;
    }

    private com.sleepycat.je.OperationResult getCurrentNoDups(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.LockMode, com.sleepycat.je.CacheMode)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry key, data;
        com.sleepycat.je.LockMode lockMode, $r4;
        com.sleepycat.je.CacheMode cacheMode;
        com.sleepycat.je.txn.LockType lockType;
        com.sleepycat.je.OperationResult result, l8;
        java.lang.Throwable l9, $r13;
        boolean success#2, $z0, $z1, $z2, $z3, $z4;
        com.sleepycat.je.dbi.CursorImpl $r1, $r6, $r8, $r12, $r15, $r17, $r21;
        com.sleepycat.je.dbi.DatabaseImpl $r5, $r10, $r14, $r19;
        com.sleepycat.je.tree.BIN $r7, $r9, $r16, $r18;
        com.sleepycat.je.dbi.EnvironmentImpl $r11, $r20;

        this := @this: com.sleepycat.je.Cursor;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        lockMode := @parameter2: com.sleepycat.je.LockMode;

        cacheMode := @parameter3: com.sleepycat.je.CacheMode;

        success#2 = 0;

        specialinvoke this.<com.sleepycat.je.Cursor: void beginUseExistingCursor(com.sleepycat.je.CacheMode)>(cacheMode);

        lockType = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.txn.LockType getLockType(com.sleepycat.je.LockMode,boolean)>(lockMode, 0);

     label1:
        $r1 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        $r4 = <com.sleepycat.je.LockMode: com.sleepycat.je.LockMode READ_UNCOMMITTED_ALL>;

        if lockMode != $r4 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        result = virtualinvoke $r1.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.OperationResult lockAndGetCurrent(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.txn.LockType,boolean,boolean,boolean)>(key, data, lockType, $z0, 0, 0);

        success#2 = 1;

        l8 = result;

     label4:
        if success#2 == 0 goto label5;

        $r5 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z1 = virtualinvoke $r5.<com.sleepycat.je.dbi.DatabaseImpl: boolean isInternalDb()>();

        if $z1 != 0 goto label5;

        $r6 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        $r7 = virtualinvoke $r6.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN getBIN()>();

        if $r7 == null goto label5;

        $r8 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        $r9 = virtualinvoke $r8.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN getBIN()>();

        $z2 = virtualinvoke $r9.<com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        if $z2 == 0 goto label5;

        $r10 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r11 = virtualinvoke $r10.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r11.<com.sleepycat.je.dbi.EnvironmentImpl: void incBinDeltaGets()>();

     label5:
        $r12 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        virtualinvoke $r12.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        specialinvoke this.<com.sleepycat.je.Cursor: void endUseExistingCursor()>();

        return l8;

     label6:
        $r13 := @caughtexception;

     label7:
        l9 = $r13;

     label8:
        if success#2 == 0 goto label9;

        $r14 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z3 = virtualinvoke $r14.<com.sleepycat.je.dbi.DatabaseImpl: boolean isInternalDb()>();

        if $z3 != 0 goto label9;

        $r15 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        $r16 = virtualinvoke $r15.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN getBIN()>();

        if $r16 == null goto label9;

        $r17 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        $r18 = virtualinvoke $r17.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN getBIN()>();

        $z4 = virtualinvoke $r18.<com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        if $z4 == 0 goto label9;

        $r19 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r20 = virtualinvoke $r19.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r20.<com.sleepycat.je.dbi.EnvironmentImpl: void incBinDeltaGets()>();

     label9:
        $r21 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        virtualinvoke $r21.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        specialinvoke this.<com.sleepycat.je.Cursor: void endUseExistingCursor()>();

        throw l9;

        catch java.lang.Throwable from label1 to label4 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private com.sleepycat.je.txn.LockType getLockType(com.sleepycat.je.LockMode, boolean)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.LockMode lockMode, $r1, $r3, $r5;
        boolean rangeLock, $z0, $z1;
        com.sleepycat.je.txn.LockType $r0, $r2, $r4, $r13;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r9, $r10;
        java.lang.String $r8, $r11;
        java.lang.AssertionError $r12;

        this := @this: com.sleepycat.je.Cursor;

        lockMode := @parameter0: com.sleepycat.je.LockMode;

        rangeLock := @parameter1: boolean;

        $z0 = virtualinvoke this.<com.sleepycat.je.Cursor: boolean isReadUncommittedMode(com.sleepycat.je.LockMode)>(lockMode);

        if $z0 == 0 goto label01;

        $r0 = <com.sleepycat.je.txn.LockType: com.sleepycat.je.txn.LockType NONE>;

        return $r0;

     label01:
        if lockMode == null goto label02;

        $r1 = <com.sleepycat.je.LockMode: com.sleepycat.je.LockMode DEFAULT>;

        if lockMode != $r1 goto label05;

     label02:
        if rangeLock == 0 goto label03;

        $r2 = <com.sleepycat.je.txn.LockType: com.sleepycat.je.txn.LockType RANGE_READ>;

        goto label04;

     label03:
        $r2 = <com.sleepycat.je.txn.LockType: com.sleepycat.je.txn.LockType READ>;

     label04:
        return $r2;

     label05:
        $r3 = <com.sleepycat.je.LockMode: com.sleepycat.je.LockMode RMW>;

        if lockMode != $r3 goto label08;

        if rangeLock == 0 goto label06;

        $r4 = <com.sleepycat.je.txn.LockType: com.sleepycat.je.txn.LockType RANGE_WRITE>;

        goto label07;

     label06:
        $r4 = <com.sleepycat.je.txn.LockType: com.sleepycat.je.txn.LockType WRITE>;

     label07:
        return $r4;

     label08:
        $r5 = <com.sleepycat.je.LockMode: com.sleepycat.je.LockMode READ_COMMITTED>;

        if lockMode != $r5 goto label09;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke lockMode.<com.sleepycat.je.LockMode: java.lang.String toString()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not allowed with Cursor methods, use CursorConfig.setReadCommitted instead.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label09:
        $z1 = <com.sleepycat.je.Cursor: boolean $assertionsDisabled>;

        if $z1 != 0 goto label10;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>(java.lang.Object)>(lockMode);

        throw $r12;

     label10:
        $r13 = <com.sleepycat.je.txn.LockType: com.sleepycat.je.txn.LockType NONE>;

        return $r13;
    }

    boolean isReadUncommittedMode(com.sleepycat.je.LockMode)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.LockMode lockMode, $r0, $r1, $r2;
        boolean $z0, $z1;

        this := @this: com.sleepycat.je.Cursor;

        lockMode := @parameter0: com.sleepycat.je.LockMode;

        $r0 = <com.sleepycat.je.LockMode: com.sleepycat.je.LockMode READ_UNCOMMITTED>;

        if lockMode == $r0 goto label1;

        $r1 = <com.sleepycat.je.LockMode: com.sleepycat.je.LockMode READ_UNCOMMITTED_ALL>;

        if lockMode == $r1 goto label1;

        $z0 = this.<com.sleepycat.je.Cursor: boolean readUncommittedDefault>;

        if $z0 == 0 goto label2;

        if lockMode == null goto label1;

        $r2 = <com.sleepycat.je.LockMode: com.sleepycat.je.LockMode DEFAULT>;

        if lockMode != $r2 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    private void traceCursorImpl(java.lang.StringBuilder)
    {
        com.sleepycat.je.Cursor this;
        java.lang.StringBuilder sb, $r0, $r4, $r7;
        com.sleepycat.je.dbi.CursorImpl $r1, $r5, $r8;
        com.sleepycat.je.txn.Locker $r2;
        long $l0, $l1;
        int $i2;

        this := @this: com.sleepycat.je.Cursor;

        sb := @parameter0: java.lang.StringBuilder;

        $r0 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" locker=");

        $r1 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        $r2 = virtualinvoke $r1.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.txn.Locker getLocker()>();

        $l0 = virtualinvoke $r2.<com.sleepycat.je.txn.Locker: long getId()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r4 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bin=");

        $r5 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        $l1 = virtualinvoke $r5.<com.sleepycat.je.dbi.CursorImpl: long getCurrentNodeId()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r7 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" idx=");

        $r8 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        $i2 = virtualinvoke $r8.<com.sleepycat.je.dbi.CursorImpl: int getIndex()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        return;
    }

    void checkOpen()
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.Database $r0, $r1;

        this := @this: com.sleepycat.je.Cursor;

        virtualinvoke this.<com.sleepycat.je.Cursor: void checkEnv()>();

        $r0 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.Database dbHandle>;

        if $r0 == null goto label1;

        $r1 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.Database dbHandle>;

        virtualinvoke $r1.<com.sleepycat.je.Database: com.sleepycat.je.dbi.DatabaseImpl checkOpen()>();

     label1:
        return;
    }

    void checkState(boolean)
    {
        com.sleepycat.je.Cursor this;
        boolean mustBeInitialized;
        com.sleepycat.je.dbi.CursorImpl $r0;

        this := @this: com.sleepycat.je.Cursor;

        mustBeInitialized := @parameter0: boolean;

        $r0 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        virtualinvoke $r0.<com.sleepycat.je.dbi.CursorImpl: void checkCursorState(boolean,boolean)>(mustBeInitialized, 0);

        return;
    }

    void trace(java.util.logging.Level, java.lang.String, java.lang.String, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.LockMode)
    {
        com.sleepycat.je.Cursor this;
        java.util.logging.Level level;
        java.lang.String methodName, getOrPutType, $r5, $r8, $r15;
        com.sleepycat.je.DatabaseEntry key, data;
        com.sleepycat.je.LockMode lockMode;
        java.lang.StringBuilder sb, $r1, $r4, $r7, $r10;
        java.util.logging.Logger $r0, $r12;
        boolean $z0;
        com.sleepycat.je.dbi.DatabaseImpl $r13;
        com.sleepycat.je.dbi.EnvironmentImpl $r14;

        this := @this: com.sleepycat.je.Cursor;

        level := @parameter0: java.util.logging.Level;

        methodName := @parameter1: java.lang.String;

        getOrPutType := @parameter2: java.lang.String;

        key := @parameter3: com.sleepycat.je.DatabaseEntry;

        data := @parameter4: com.sleepycat.je.DatabaseEntry;

        lockMode := @parameter5: com.sleepycat.je.LockMode;

        $r0 = this.<com.sleepycat.je.Cursor: java.util.logging.Logger logger>;

        $z0 = virtualinvoke $r0.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>(level);

        if $z0 == 0 goto label4;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        sb = $r1;

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(methodName);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(getOrPutType);

        specialinvoke this.<com.sleepycat.je.Cursor: void traceCursorImpl(java.lang.StringBuilder)>(sb);

        if key == null goto label1;

        $r4 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" key=");

        $r5 = virtualinvoke key.<com.sleepycat.je.DatabaseEntry: java.lang.String dumpData()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

     label1:
        if data == null goto label2;

        $r7 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" data=");

        $r8 = virtualinvoke data.<com.sleepycat.je.DatabaseEntry: java.lang.String dumpData()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

     label2:
        if lockMode == null goto label3;

        $r10 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lockMode=");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(lockMode);

     label3:
        $r12 = this.<com.sleepycat.je.Cursor: java.util.logging.Logger logger>;

        $r13 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r14 = virtualinvoke $r13.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r15 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.sleepycat.je.utilint.LoggerUtils: void logMsg(java.util.logging.Logger,com.sleepycat.je.dbi.EnvironmentImpl,java.util.logging.Level,java.lang.String)>($r12, $r14, level, $r15);

     label4:
        return;
    }

    com.sleepycat.je.OperationResult getInternal(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.Get, com.sleepycat.je.ReadOptions, com.sleepycat.je.LockMode)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.ReadOptions options;
        com.sleepycat.je.LockMode lockMode;
        com.sleepycat.je.CacheMode cacheMode;
        com.sleepycat.je.dbi.SearchMode searchMode;
        com.sleepycat.je.DatabaseEntry key#1, data#2, $r11, $r12;
        com.sleepycat.je.Get getType#3, $r3, $r5, $r7, $r8, $r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.sleepycat.je.OperationResult $r0, $r4, $r6, $r16;
        com.sleepycat.je.dbi.GetMode getMode#41;
        com.sleepycat.je.dbi.CursorImpl $r1;
        java.lang.AssertionError $r2, $r9;

        this := @this: com.sleepycat.je.Cursor;

        key#1 := @parameter0: com.sleepycat.je.DatabaseEntry;

        data#2 := @parameter1: com.sleepycat.je.DatabaseEntry;

        getType#3 := @parameter2: com.sleepycat.je.Get;

        options := @parameter3: com.sleepycat.je.ReadOptions;

        lockMode := @parameter4: com.sleepycat.je.LockMode;

        staticinvoke <com.sleepycat.je.utilint.DatabaseUtil: void checkForNullParam(java.lang.Object,java.lang.String)>(getType#3, "getType");

        cacheMode = virtualinvoke options.<com.sleepycat.je.ReadOptions: com.sleepycat.je.CacheMode getCacheMode()>();

        searchMode = virtualinvoke getType#3.<com.sleepycat.je.Get: com.sleepycat.je.dbi.SearchMode getSearchMode()>();

        if searchMode == null goto label03;

        virtualinvoke this.<com.sleepycat.je.Cursor: void checkState(boolean)>(0);

        staticinvoke <com.sleepycat.je.utilint.DatabaseUtil: void checkForNullDbt(com.sleepycat.je.DatabaseEntry,java.lang.String,boolean)>(key#1, "key", 1);

        staticinvoke <com.sleepycat.je.utilint.DatabaseUtil: void checkForPartial(com.sleepycat.je.DatabaseEntry,java.lang.String)>(key#1, "key");

        $z0 = virtualinvoke searchMode.<com.sleepycat.je.dbi.SearchMode: boolean isDataSearch()>();

        if $z0 == 0 goto label01;

        staticinvoke <com.sleepycat.je.utilint.DatabaseUtil: void checkForNullDbt(com.sleepycat.je.DatabaseEntry,java.lang.String,boolean)>(data#2, "data", 1);

        staticinvoke <com.sleepycat.je.utilint.DatabaseUtil: void checkForPartial(com.sleepycat.je.DatabaseEntry,java.lang.String)>(data#2, "data");

        goto label02;

     label01:
        if data#2 != null goto label02;

        data#2 = <com.sleepycat.je.Cursor: com.sleepycat.je.DatabaseEntry NO_RETURN_DATA>;

     label02:
        $r0 = virtualinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult search(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode,com.sleepycat.je.dbi.SearchMode,boolean)>(key#1, data#2, lockMode, cacheMode, searchMode, 1);

        return $r0;

     label03:
        if key#1 != null goto label04;

        key#1 = <com.sleepycat.je.Cursor: com.sleepycat.je.DatabaseEntry NO_RETURN_DATA>;

     label04:
        if data#2 != null goto label05;

        data#2 = <com.sleepycat.je.Cursor: com.sleepycat.je.DatabaseEntry NO_RETURN_DATA>;

     label05:
        getMode#41 = virtualinvoke getType#3.<com.sleepycat.je.Get: com.sleepycat.je.dbi.GetMode getGetMode()>();

        $z1 = virtualinvoke getType#3.<com.sleepycat.je.Get: boolean getAllowNextPrevUninitialized()>();

        if $z1 == 0 goto label09;

        $r1 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        $z2 = virtualinvoke $r1.<com.sleepycat.je.dbi.CursorImpl: boolean isNotInitialized()>();

        if $z2 == 0 goto label09;

        $z3 = <com.sleepycat.je.Cursor: boolean $assertionsDisabled>;

        if $z3 != 0 goto label06;

        if getMode#41 != null goto label06;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label06:
        $z4 = virtualinvoke getMode#41.<com.sleepycat.je.dbi.GetMode: boolean isForward()>();

        if $z4 == 0 goto label07;

        $r3 = <com.sleepycat.je.Get: com.sleepycat.je.Get FIRST>;

        goto label08;

     label07:
        $r3 = <com.sleepycat.je.Get: com.sleepycat.je.Get LAST>;

     label08:
        getType#3 = $r3;

        getMode#41 = null;

     label09:
        if getMode#41 == null goto label10;

        virtualinvoke this.<com.sleepycat.je.Cursor: void checkState(boolean)>(1);

        $r4 = virtualinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult retrieveNext(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode,com.sleepycat.je.dbi.GetMode)>(key#1, data#2, lockMode, cacheMode, getMode#41);

        return $r4;

     label10:
        $r5 = <com.sleepycat.je.Get: com.sleepycat.je.Get CURRENT>;

        if getType#3 != $r5 goto label11;

        virtualinvoke this.<com.sleepycat.je.Cursor: void checkState(boolean)>(1);

        $r6 = virtualinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult getCurrentInternal(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode)>(key#1, data#2, lockMode, cacheMode);

        return $r6;

     label11:
        $z5 = <com.sleepycat.je.Cursor: boolean $assertionsDisabled>;

        if $z5 != 0 goto label12;

        $r7 = <com.sleepycat.je.Get: com.sleepycat.je.Get FIRST>;

        if getType#3 == $r7 goto label12;

        $r8 = <com.sleepycat.je.Get: com.sleepycat.je.Get LAST>;

        if getType#3 == $r8 goto label12;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label12:
        virtualinvoke this.<com.sleepycat.je.Cursor: void checkState(boolean)>(0);

        $r11 = key#1;

        $r12 = data#2;

        $r15 = <com.sleepycat.je.Get: com.sleepycat.je.Get FIRST>;

        if getType#3 != $r15 goto label13;

        $z6 = 1;

        goto label14;

     label13:
        $z6 = 0;

     label14:
        $r16 = virtualinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult position(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode,boolean)>($r11, $r12, lockMode, cacheMode, $z6);

        return $r16;
    }

    com.sleepycat.je.OperationResult search(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.LockMode, com.sleepycat.je.CacheMode, com.sleepycat.je.dbi.SearchMode, boolean)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry key, data;
        com.sleepycat.je.LockMode lockMode;
        com.sleepycat.je.CacheMode cacheMode;
        boolean countOpStat, $z0;
        java.lang.Object l7, $r0;
        java.lang.Throwable l9, $r13;
        com.sleepycat.je.dbi.SearchMode searchMode#1, $r5;
        com.sleepycat.je.dbi.DatabaseImpl $r1, $r6, $r8, $r9, $r11;
        int[] $r2;
        int $i0, $i1;
        com.sleepycat.je.OperationResult result#19;
        java.lang.String $r3;
        com.sleepycat.je.EnvironmentFailureException $r4;
        com.sleepycat.je.dbi.EnvironmentImpl $r7, $r10;

        this := @this: com.sleepycat.je.Cursor;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        lockMode := @parameter2: com.sleepycat.je.LockMode;

        cacheMode := @parameter3: com.sleepycat.je.CacheMode;

        searchMode#1 := @parameter4: com.sleepycat.je.dbi.SearchMode;

        countOpStat := @parameter5: boolean;

        $r0 = specialinvoke this.<com.sleepycat.je.Cursor: java.lang.Object getTxnSynchronizer()>();

        l7 = $r0;

        entermonitor $r0;

     label01:
        specialinvoke this.<com.sleepycat.je.Cursor: void checkTxnState()>();

        $r1 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z0 = virtualinvoke $r1.<com.sleepycat.je.dbi.DatabaseImpl: boolean getSortedDuplicates()>();

        if $z0 == 0 goto label07;

        $r2 = <com.sleepycat.je.Cursor$3: int[] $SwitchMap$com$sleepycat$je$dbi$SearchMode>;

        $i0 = virtualinvoke searchMode#1.<com.sleepycat.je.dbi.SearchMode: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label04;
            case 4: goto label05;
            default: goto label06;
        };

     label02:
        result#19 = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult dupsGetSearchKey(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode)>(key, data, lockMode, cacheMode);

        goto label09;

     label03:
        result#19 = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult dupsGetSearchKeyRange(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode)>(key, data, lockMode, cacheMode);

        goto label09;

     label04:
        result#19 = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult dupsGetSearchBoth(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode)>(key, data, lockMode, cacheMode);

        goto label09;

     label05:
        result#19 = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult dupsGetSearchBothRange(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode)>(key, data, lockMode, cacheMode);

        goto label09;

     label06:
        $r3 = virtualinvoke searchMode#1.<com.sleepycat.je.dbi.SearchMode: java.lang.String toString()>();

        $r4 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>($r3);

        throw $r4;

     label07:
        $r5 = <com.sleepycat.je.dbi.SearchMode: com.sleepycat.je.dbi.SearchMode BOTH_RANGE>;

        if searchMode#1 != $r5 goto label08;

        searchMode#1 = <com.sleepycat.je.dbi.SearchMode: com.sleepycat.je.dbi.SearchMode BOTH>;

     label08:
        result#19 = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult searchNoDups(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode,com.sleepycat.je.dbi.SearchMode,java.util.Comparator)>(key, data, lockMode, cacheMode, searchMode#1, null);

     label09:
        if countOpStat == 0 goto label11;

        if result#19 == null goto label10;

        $r6 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r7 = virtualinvoke $r6.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r8 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        virtualinvoke $r7.<com.sleepycat.je.dbi.EnvironmentImpl: void incSearchOps(com.sleepycat.je.dbi.DatabaseImpl)>($r8);

        goto label11;

     label10:
        $r9 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r10 = virtualinvoke $r9.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r11 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        virtualinvoke $r10.<com.sleepycat.je.dbi.EnvironmentImpl: void incSearchFailOps(com.sleepycat.je.dbi.DatabaseImpl)>($r11);

     label11:
        exitmonitor l7;

     label12:
        return result#19;

     label13:
        $r13 := @caughtexception;

     label14:
        l9 = $r13;

        exitmonitor l7;

     label15:
        throw l9;

        catch java.lang.Throwable from label01 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    com.sleepycat.je.OperationResult retrieveNext(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.LockMode, com.sleepycat.je.CacheMode, com.sleepycat.je.dbi.GetMode)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry key, data;
        com.sleepycat.je.LockMode lockMode;
        com.sleepycat.je.CacheMode cacheMode;
        com.sleepycat.je.dbi.GetMode getMode;
        java.lang.Object l6, $r0;
        java.lang.Throwable l8, $r6;
        com.sleepycat.je.dbi.DatabaseImpl $r1, $r2, $r4;
        boolean $z0;
        com.sleepycat.je.OperationResult result#14;
        com.sleepycat.je.dbi.EnvironmentImpl $r3;

        this := @this: com.sleepycat.je.Cursor;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        lockMode := @parameter2: com.sleepycat.je.LockMode;

        cacheMode := @parameter3: com.sleepycat.je.CacheMode;

        getMode := @parameter4: com.sleepycat.je.dbi.GetMode;

        $r0 = specialinvoke this.<com.sleepycat.je.Cursor: java.lang.Object getTxnSynchronizer()>();

        l6 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z0 = virtualinvoke $r1.<com.sleepycat.je.dbi.DatabaseImpl: boolean getSortedDuplicates()>();

        if $z0 == 0 goto label2;

        result#14 = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult retrieveNextHandleDups(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode,com.sleepycat.je.dbi.GetMode)>(key, data, lockMode, cacheMode, getMode);

        goto label3;

     label2:
        result#14 = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult retrieveNextNoDups(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode,com.sleepycat.je.dbi.GetMode)>(key, data, lockMode, cacheMode, getMode);

     label3:
        if result#14 == null goto label4;

        $r2 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r3 = virtualinvoke $r2.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r4 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        virtualinvoke $r3.<com.sleepycat.je.dbi.EnvironmentImpl: void incPositionOps(com.sleepycat.je.dbi.DatabaseImpl)>($r4);

     label4:
        exitmonitor l6;

     label5:
        return result#14;

     label6:
        $r6 := @caughtexception;

     label7:
        l8 = $r6;

        exitmonitor l6;

     label8:
        throw l8;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    com.sleepycat.je.OperationResult position(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.LockMode, com.sleepycat.je.CacheMode, boolean)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry key, data;
        com.sleepycat.je.LockMode lockMode;
        com.sleepycat.je.CacheMode cacheMode;
        boolean first, $z0;
        java.lang.Object l6, $r0;
        java.lang.Throwable l8, $r6;
        com.sleepycat.je.dbi.DatabaseImpl $r1, $r2, $r4;
        com.sleepycat.je.OperationResult result#15;
        com.sleepycat.je.dbi.EnvironmentImpl $r3;

        this := @this: com.sleepycat.je.Cursor;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        lockMode := @parameter2: com.sleepycat.je.LockMode;

        cacheMode := @parameter3: com.sleepycat.je.CacheMode;

        first := @parameter4: boolean;

        $r0 = specialinvoke this.<com.sleepycat.je.Cursor: java.lang.Object getTxnSynchronizer()>();

        l6 = $r0;

        entermonitor $r0;

     label1:
        specialinvoke this.<com.sleepycat.je.Cursor: void checkTxnState()>();

        $r1 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z0 = virtualinvoke $r1.<com.sleepycat.je.dbi.DatabaseImpl: boolean getSortedDuplicates()>();

        if $z0 == 0 goto label2;

        result#15 = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult positionHandleDups(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode,boolean)>(key, data, lockMode, cacheMode, first);

        goto label3;

     label2:
        result#15 = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult positionNoDups(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode,boolean)>(key, data, lockMode, cacheMode, first);

     label3:
        if result#15 == null goto label4;

        $r2 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r3 = virtualinvoke $r2.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r4 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        virtualinvoke $r3.<com.sleepycat.je.dbi.EnvironmentImpl: void incPositionOps(com.sleepycat.je.dbi.DatabaseImpl)>($r4);

     label4:
        exitmonitor l6;

     label5:
        return result#15;

     label6:
        $r6 := @caughtexception;

     label7:
        l8 = $r6;

        exitmonitor l6;

     label8:
        throw l8;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private com.sleepycat.je.OperationResult positionHandleDups(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.LockMode, com.sleepycat.je.CacheMode, boolean)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry key, data, twoPartKey, $r0, $r1;
        com.sleepycat.je.LockMode lockMode;
        com.sleepycat.je.CacheMode cacheMode;
        boolean first;
        com.sleepycat.je.OperationResult result;

        this := @this: com.sleepycat.je.Cursor;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        lockMode := @parameter2: com.sleepycat.je.LockMode;

        cacheMode := @parameter3: com.sleepycat.je.CacheMode;

        first := @parameter4: boolean;

        $r0 = new com.sleepycat.je.DatabaseEntry;

        specialinvoke $r0.<com.sleepycat.je.DatabaseEntry: void <init>()>();

        twoPartKey = $r0;

        $r1 = <com.sleepycat.je.Cursor: com.sleepycat.je.DatabaseEntry NO_RETURN_DATA>;

        result = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult positionNoDups(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode,boolean)>(twoPartKey, $r1, lockMode, cacheMode, first);

        if result != null goto label1;

        return null;

     label1:
        staticinvoke <com.sleepycat.je.dbi.DupKeyData: void split(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry)>(twoPartKey, key, data);

        return result;
    }

    private com.sleepycat.je.OperationResult positionNoDups(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.LockMode, com.sleepycat.je.CacheMode, boolean)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry key, data;
        com.sleepycat.je.LockMode lockMode;
        com.sleepycat.je.CacheMode cacheMode;
        boolean first, $z0;
        com.sleepycat.je.OperationResult result, $r0;
        com.sleepycat.je.dbi.RangeRestartException l6, $r6;
        java.lang.Error E, $r7;
        com.sleepycat.je.dbi.CursorImpl $r1, $r3;
        com.sleepycat.je.txn.LockType $r2, $r4;
        com.sleepycat.je.dbi.DatabaseImpl $r8;
        com.sleepycat.je.dbi.EnvironmentImpl $r9;

        this := @this: com.sleepycat.je.Cursor;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        lockMode := @parameter2: com.sleepycat.je.LockMode;

        cacheMode := @parameter3: com.sleepycat.je.CacheMode;

        first := @parameter4: boolean;

     label1:
        $z0 = virtualinvoke this.<com.sleepycat.je.Cursor: boolean isSerializableIsolation(com.sleepycat.je.LockMode)>(lockMode);

        if $z0 != 0 goto label3;

        $r0 = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult positionAllowPhantoms(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode,boolean,boolean)>(key, data, lockMode, cacheMode, 0, first);

     label2:
        return $r0;

     label3:
        if first != 0 goto label4;

        $r1 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        $r2 = <com.sleepycat.je.txn.LockType: com.sleepycat.je.txn.LockType RANGE_READ>;

        virtualinvoke $r1.<com.sleepycat.je.dbi.CursorImpl: void lockEof(com.sleepycat.je.txn.LockType)>($r2);

     label4:
        result = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult positionAllowPhantoms(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode,boolean,boolean)>(key, data, lockMode, cacheMode, first, first);

        if first == 0 goto label5;

        if result != null goto label5;

        $r3 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        $r4 = <com.sleepycat.je.txn.LockType: com.sleepycat.je.txn.LockType RANGE_READ>;

        virtualinvoke $r3.<com.sleepycat.je.dbi.CursorImpl: void lockEof(com.sleepycat.je.txn.LockType)>($r4);

     label5:
        return result;

     label6:
        $r6 := @caughtexception;

     label7:
        l6 = $r6;

        goto label3;

     label8:
        $r7 := @caughtexception;

        E = $r7;

        $r8 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r9 = virtualinvoke $r8.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r9.<com.sleepycat.je.dbi.EnvironmentImpl: void invalidate(java.lang.Error)>(E);

        throw E;

        catch com.sleepycat.je.dbi.RangeRestartException from label3 to label5 with label6;
        catch java.lang.Error from label1 to label2 with label8;
        catch java.lang.Error from label3 to label5 with label8;
        catch java.lang.Error from label7 to label8 with label8;
    }

    boolean isSerializableIsolation(com.sleepycat.je.LockMode)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.LockMode lockMode;
        boolean $z0, $z1, $z2;

        this := @this: com.sleepycat.je.Cursor;

        lockMode := @parameter0: com.sleepycat.je.LockMode;

        $z0 = this.<com.sleepycat.je.Cursor: boolean serializableIsolationDefault>;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke this.<com.sleepycat.je.Cursor: boolean isReadUncommittedMode(com.sleepycat.je.LockMode)>(lockMode);

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private com.sleepycat.je.OperationResult positionAllowPhantoms(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.LockMode, com.sleepycat.je.CacheMode, boolean, boolean)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry key, data;
        com.sleepycat.je.LockMode lockMode, $r1;
        com.sleepycat.je.CacheMode cacheMode;
        boolean rangeLock, first, dirtyReadAll, $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.sleepycat.je.dbi.CursorImpl dup;
        com.sleepycat.je.txn.LockType lockType;
        java.lang.Throwable l11, $r4;
        java.lang.AssertionError $r0;
        com.sleepycat.je.OperationResult result#7;

        this := @this: com.sleepycat.je.Cursor;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        lockMode := @parameter2: com.sleepycat.je.LockMode;

        cacheMode := @parameter3: com.sleepycat.je.CacheMode;

        rangeLock := @parameter4: boolean;

        first := @parameter5: boolean;

        $z0 = <com.sleepycat.je.Cursor: boolean $assertionsDisabled>;

        if $z0 != 0 goto label02;

        if key == null goto label01;

        if data != null goto label02;

     label01:
        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label02:
        result#7 = null;

        dup = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl beginMoveCursor(boolean,com.sleepycat.je.CacheMode)>(0, cacheMode);

     label03:
        $z1 = virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: boolean positionFirstOrLast(boolean)>(first);

        if $z1 != 0 goto label04;

        result#7 = null;

        $z2 = <com.sleepycat.je.latch.LatchSupport: boolean TRACK_LATCHES>;

        if $z2 == 0 goto label08;

        staticinvoke <com.sleepycat.je.latch.LatchSupport: void expectBtreeLatchesHeld(int)>(0);

        goto label08;

     label04:
        $z3 = <com.sleepycat.je.latch.LatchSupport: boolean TRACK_LATCHES>;

        if $z3 == 0 goto label05;

        staticinvoke <com.sleepycat.je.latch.LatchSupport: void expectBtreeLatchesHeld(int)>(1);

     label05:
        lockType = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.txn.LockType getLockType(com.sleepycat.je.LockMode,boolean)>(lockMode, rangeLock);

        $r1 = <com.sleepycat.je.LockMode: com.sleepycat.je.LockMode READ_UNCOMMITTED_ALL>;

        if lockMode != $r1 goto label06;

        $z4 = 1;

        goto label07;

     label06:
        $z4 = 0;

     label07:
        dirtyReadAll = $z4;

        result#7 = virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.OperationResult lockAndGetCurrent(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.txn.LockType,boolean,boolean,boolean)>(key, data, lockType, dirtyReadAll, 1, 0);

        if result#7 != null goto label08;

        result#7 = virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.OperationResult getNext(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.txn.LockType,boolean,boolean,boolean,com.sleepycat.je.dbi.RangeConstraint)>(key, data, lockType, dirtyReadAll, first, 1, null);

     label08:
        virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        if result#7 == null goto label09;

        $z5 = 1;

        goto label10;

     label09:
        $z5 = 0;

     label10:
        specialinvoke this.<com.sleepycat.je.Cursor: void endMoveCursor(com.sleepycat.je.dbi.CursorImpl,boolean)>(dup, $z5);

        goto label16;

     label11:
        $r4 := @caughtexception;

     label12:
        l11 = $r4;

     label13:
        virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        if result#7 == null goto label14;

        $z6 = 1;

        goto label15;

     label14:
        $z6 = 0;

     label15:
        specialinvoke this.<com.sleepycat.je.Cursor: void endMoveCursor(com.sleepycat.je.dbi.CursorImpl,boolean)>(dup, $z6);

        throw l11;

     label16:
        return result#7;

        catch java.lang.Throwable from label03 to label08 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    private com.sleepycat.je.dbi.CursorImpl beginMoveCursor(boolean, com.sleepycat.je.CacheMode)
    {
        com.sleepycat.je.Cursor this;
        boolean samePosition;
        com.sleepycat.je.CacheMode cacheMode;
        com.sleepycat.je.dbi.CursorImpl $r0;

        this := @this: com.sleepycat.je.Cursor;

        samePosition := @parameter0: boolean;

        cacheMode := @parameter1: com.sleepycat.je.CacheMode;

        $r0 = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl beginMoveCursor(boolean,boolean,com.sleepycat.je.CacheMode)>(samePosition, 0, cacheMode);

        return $r0;
    }

    private void endMoveCursor(com.sleepycat.je.dbi.CursorImpl, boolean)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.dbi.CursorImpl dup, $r0, $r1, $r2, $r3, $r4;
        boolean success;

        this := @this: com.sleepycat.je.Cursor;

        dup := @parameter0: com.sleepycat.je.dbi.CursorImpl;

        success := @parameter1: boolean;

        virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: void clearClosingLocker()>();

        $r0 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        if dup != $r0 goto label2;

        if success == 0 goto label1;

        $r1 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        virtualinvoke $r1.<com.sleepycat.je.dbi.CursorImpl: void afterNonStickyOp()>();

        goto label4;

     label1:
        $r2 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        virtualinvoke $r2.<com.sleepycat.je.dbi.CursorImpl: void reset()>();

        goto label4;

     label2:
        if success == 0 goto label3;

        $r3 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        virtualinvoke $r3.<com.sleepycat.je.dbi.CursorImpl: void close(com.sleepycat.je.dbi.CursorImpl)>(dup);

        this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl> = dup;

        goto label4;

     label3:
        $r4 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: void close(com.sleepycat.je.dbi.CursorImpl)>($r4);

     label4:
        return;
    }

    private com.sleepycat.je.dbi.CursorImpl beginMoveCursor(boolean, boolean, com.sleepycat.je.CacheMode)
    {
        com.sleepycat.je.Cursor this;
        boolean samePosition, forceClone, $z0, $z1, $z2;
        com.sleepycat.je.CacheMode cacheMode, $r2;
        com.sleepycat.je.dbi.CursorImpl dup, $r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        java.lang.AssertionError $r0;

        this := @this: com.sleepycat.je.Cursor;

        samePosition := @parameter0: boolean;

        forceClone := @parameter1: boolean;

        cacheMode := @parameter2: com.sleepycat.je.CacheMode;

        $z0 = <com.sleepycat.je.Cursor: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if forceClone == 0 goto label1;

        if samePosition != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $r1 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        if cacheMode == null goto label2;

        $r2 = cacheMode;

        goto label3;

     label2:
        $r2 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.CacheMode defaultCacheMode>;

     label3:
        virtualinvoke $r1.<com.sleepycat.je.dbi.CursorImpl: void setCacheMode(com.sleepycat.je.CacheMode)>($r2);

        $r3 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        $z1 = virtualinvoke $r3.<com.sleepycat.je.dbi.CursorImpl: boolean isNotInitialized()>();

        if $z1 == 0 goto label4;

        $r4 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        virtualinvoke $r4.<com.sleepycat.je.dbi.CursorImpl: void criticalEviction()>();

        $r5 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        return $r5;

     label4:
        $z2 = this.<com.sleepycat.je.Cursor: boolean nonSticky>;

        if $z2 == 0 goto label7;

        if forceClone != 0 goto label7;

        if samePosition == 0 goto label5;

        $r6 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        virtualinvoke $r6.<com.sleepycat.je.dbi.CursorImpl: void beforeNonStickyOp()>();

        goto label6;

     label5:
        $r7 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        virtualinvoke $r7.<com.sleepycat.je.dbi.CursorImpl: void reset()>();

     label6:
        $r8 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        return $r8;

     label7:
        $r9 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        dup = virtualinvoke $r9.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.CursorImpl cloneCursor(boolean)>(samePosition);

        $r10 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: void setClosingLocker(com.sleepycat.je.dbi.CursorImpl)>($r10);

        return dup;
    }

    private com.sleepycat.je.OperationResult retrieveNextHandleDups(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.LockMode, com.sleepycat.je.CacheMode, com.sleepycat.je.dbi.GetMode)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry key, data;
        com.sleepycat.je.LockMode lockMode;
        com.sleepycat.je.CacheMode cacheMode;
        com.sleepycat.je.dbi.GetMode getMode, $r2, $r4;
        int[] $r0;
        int $i0, $i1;
        com.sleepycat.je.OperationResult $r1, $r3, $r5, $r6, $r7;
        java.lang.String $r8;
        com.sleepycat.je.EnvironmentFailureException $r9;

        this := @this: com.sleepycat.je.Cursor;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        lockMode := @parameter2: com.sleepycat.je.LockMode;

        cacheMode := @parameter3: com.sleepycat.je.CacheMode;

        getMode := @parameter4: com.sleepycat.je.dbi.GetMode;

        $r0 = <com.sleepycat.je.Cursor$3: int[] $SwitchMap$com$sleepycat$je$dbi$GetMode>;

        $i0 = virtualinvoke getMode.<com.sleepycat.je.dbi.GetMode: int ordinal()>();

        $i1 = $r0[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label2;
            case 4: goto label3;
            case 5: goto label4;
            case 6: goto label5;
            default: goto label6;
        };

     label1:
        $r1 = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult dupsGetNextOrPrev(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode,com.sleepycat.je.dbi.GetMode)>(key, data, lockMode, cacheMode, getMode);

        return $r1;

     label2:
        $r2 = <com.sleepycat.je.dbi.GetMode: com.sleepycat.je.dbi.GetMode NEXT>;

        $r3 = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult dupsGetNextOrPrevDup(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode,com.sleepycat.je.dbi.GetMode)>(key, data, lockMode, cacheMode, $r2);

        return $r3;

     label3:
        $r4 = <com.sleepycat.je.dbi.GetMode: com.sleepycat.je.dbi.GetMode PREV>;

        $r5 = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult dupsGetNextOrPrevDup(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode,com.sleepycat.je.dbi.GetMode)>(key, data, lockMode, cacheMode, $r4);

        return $r5;

     label4:
        $r6 = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult dupsGetNextNoDup(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode)>(key, data, lockMode, cacheMode);

        return $r6;

     label5:
        $r7 = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult dupsGetPrevNoDup(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode)>(key, data, lockMode, cacheMode);

        return $r7;

     label6:
        $r8 = virtualinvoke getMode.<com.sleepycat.je.dbi.GetMode: java.lang.String toString()>();

        $r9 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>($r8);

        throw $r9;
    }

    private com.sleepycat.je.OperationResult retrieveNextNoDups(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.LockMode, com.sleepycat.je.CacheMode, com.sleepycat.je.dbi.GetMode)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry key, data, tryKey, tryData;
        com.sleepycat.je.LockMode lockMode, $r8;
        com.sleepycat.je.CacheMode cacheMode;
        com.sleepycat.je.dbi.GetMode getModeParam, getMode#7, $r1, $r2;
        com.sleepycat.je.dbi.CursorImpl dup, $r15;
        com.sleepycat.je.OperationResult l9, result#25, result#72;
        java.lang.Throwable l10, $r12;
        com.sleepycat.je.txn.LockType lockType, $r7, $r16;
        com.sleepycat.je.dbi.RangeRestartException l7, $r18;
        java.lang.Error E, $r19;
        int[] $r0;
        int $i0, $i1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.AssertionError $r3;
        com.sleepycat.je.dbi.RangeConstraint $r9;
        com.sleepycat.je.dbi.DatabaseImpl $r20;
        com.sleepycat.je.dbi.EnvironmentImpl $r21;

        this := @this: com.sleepycat.je.Cursor;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        lockMode := @parameter2: com.sleepycat.je.LockMode;

        cacheMode := @parameter3: com.sleepycat.je.CacheMode;

        getModeParam := @parameter4: com.sleepycat.je.dbi.GetMode;

        $r0 = <com.sleepycat.je.Cursor$3: int[] $SwitchMap$com$sleepycat$je$dbi$GetMode>;

        $i0 = virtualinvoke getModeParam.<com.sleepycat.je.dbi.GetMode: int ordinal()>();

        $i1 = $r0[$i0];

        tableswitch($i1)
        {
            case 3: goto label01;
            case 4: goto label01;
            case 5: goto label02;
            case 6: goto label03;
            default: goto label04;
        };

     label01:
        return null;

     label02:
        getMode#7 = <com.sleepycat.je.dbi.GetMode: com.sleepycat.je.dbi.GetMode NEXT>;

        goto label05;

     label03:
        getMode#7 = <com.sleepycat.je.dbi.GetMode: com.sleepycat.je.dbi.GetMode PREV>;

        goto label05;

     label04:
        getMode#7 = getModeParam;

     label05:
        $z0 = virtualinvoke this.<com.sleepycat.je.Cursor: boolean isSerializableIsolation(com.sleepycat.je.LockMode)>(lockMode);

        if $z0 != 0 goto label19;

        $z1 = <com.sleepycat.je.Cursor: boolean $assertionsDisabled>;

        if $z1 != 0 goto label06;

        $r1 = <com.sleepycat.je.dbi.GetMode: com.sleepycat.je.dbi.GetMode NEXT>;

        if getMode#7 == $r1 goto label06;

        $r2 = <com.sleepycat.je.dbi.GetMode: com.sleepycat.je.dbi.GetMode PREV>;

        if getMode#7 == $r2 goto label06;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label06:
        dup = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl beginMoveCursor(boolean,com.sleepycat.je.CacheMode)>(1, cacheMode);

        result#25 = null;

     label07:
        $r7 = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.txn.LockType getLockType(com.sleepycat.je.LockMode,boolean)>(lockMode, 0);

        $r8 = <com.sleepycat.je.LockMode: com.sleepycat.je.LockMode READ_UNCOMMITTED_ALL>;

        if lockMode != $r8 goto label08;

        $z2 = 1;

        goto label09;

     label08:
        $z2 = 0;

     label09:
        $z3 = virtualinvoke getMode#7.<com.sleepycat.je.dbi.GetMode: boolean isForward()>();

        $r9 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.RangeConstraint rangeConstraint>;

        result#25 = virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.OperationResult getNext(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.txn.LockType,boolean,boolean,boolean,com.sleepycat.je.dbi.RangeConstraint)>(key, data, $r7, $z2, $z3, 0, $r9);

        l9 = result#25;

     label10:
        if result#25 == null goto label11;

        $z4 = 1;

        goto label12;

     label11:
        $z4 = 0;

     label12:
        specialinvoke this.<com.sleepycat.je.Cursor: void endMoveCursor(com.sleepycat.je.dbi.CursorImpl,boolean)>(dup, $z4);

     label13:
        return l9;

     label14:
        $r12 := @caughtexception;

     label15:
        l10 = $r12;

     label16:
        if result#25 == null goto label17;

        $z5 = 1;

        goto label18;

     label17:
        $z5 = 0;

     label18:
        specialinvoke this.<com.sleepycat.je.Cursor: void endMoveCursor(com.sleepycat.je.dbi.CursorImpl,boolean)>(dup, $z5);

        throw l10;

     label19:
        $z6 = virtualinvoke getMode#7.<com.sleepycat.je.dbi.GetMode: boolean isForward()>();

        if $z6 != 0 goto label20;

        specialinvoke this.<com.sleepycat.je.Cursor: void rangeLockCurrentPosition()>();

     label20:
        $z7 = virtualinvoke getMode#7.<com.sleepycat.je.dbi.GetMode: boolean isForward()>();

        lockType = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.txn.LockType getLockType(com.sleepycat.je.LockMode,boolean)>(lockMode, $z7);

        tryKey = staticinvoke <com.sleepycat.je.Cursor: com.sleepycat.je.DatabaseEntry cloneEntry(com.sleepycat.je.DatabaseEntry)>(key);

        tryData = staticinvoke <com.sleepycat.je.Cursor: com.sleepycat.je.DatabaseEntry cloneEntry(com.sleepycat.je.DatabaseEntry)>(data);

        result#72 = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult retrieveNextCheckForInsertion(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.txn.LockType,com.sleepycat.je.CacheMode,com.sleepycat.je.dbi.GetMode)>(tryKey, tryData, lockType, cacheMode, getMode#7);

        $z8 = virtualinvoke getMode#7.<com.sleepycat.je.dbi.GetMode: boolean isForward()>();

        if $z8 == 0 goto label21;

        if result#72 != null goto label21;

        $r15 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        $r16 = <com.sleepycat.je.txn.LockType: com.sleepycat.je.txn.LockType RANGE_READ>;

        virtualinvoke $r15.<com.sleepycat.je.dbi.CursorImpl: void lockEof(com.sleepycat.je.txn.LockType)>($r16);

     label21:
        if result#72 == null goto label22;

        $z9 = specialinvoke this.<com.sleepycat.je.Cursor: boolean checkRangeConstraint(com.sleepycat.je.DatabaseEntry)>(tryKey);

        if $z9 != 0 goto label22;

        result#72 = null;

     label22:
        if result#72 == null goto label23;

        staticinvoke <com.sleepycat.je.Cursor: void setEntry(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry)>(tryKey, key);

        staticinvoke <com.sleepycat.je.Cursor: void setEntry(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry)>(tryData, data);

     label23:
        return result#72;

     label24:
        $r18 := @caughtexception;

     label25:
        l7 = $r18;

        goto label19;

     label26:
        $r19 := @caughtexception;

        E = $r19;

        $r20 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r21 = virtualinvoke $r20.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r21.<com.sleepycat.je.dbi.EnvironmentImpl: void invalidate(java.lang.Error)>(E);

        throw E;

        catch java.lang.Throwable from label07 to label10 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
        catch com.sleepycat.je.dbi.RangeRestartException from label19 to label23 with label24;
        catch java.lang.Error from label05 to label13 with label26;
        catch java.lang.Error from label15 to label23 with label26;
        catch java.lang.Error from label25 to label26 with label26;
    }

    private static void setEntry(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry)
    {
        com.sleepycat.je.DatabaseEntry 'from', 'to';
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        byte[] $r0;

        'from' := @parameter0: com.sleepycat.je.DatabaseEntry;

        'to' := @parameter1: com.sleepycat.je.DatabaseEntry;

        $i0 = virtualinvoke 'from'.<com.sleepycat.je.DatabaseEntry: int getPartialOffset()>();

        $i1 = virtualinvoke 'from'.<com.sleepycat.je.DatabaseEntry: int getPartialLength()>();

        $z0 = virtualinvoke 'from'.<com.sleepycat.je.DatabaseEntry: boolean getPartial()>();

        virtualinvoke 'to'.<com.sleepycat.je.DatabaseEntry: void setPartial(int,int,boolean)>($i0, $i1, $z0);

        $r0 = virtualinvoke 'from'.<com.sleepycat.je.DatabaseEntry: byte[] getData()>();

        $i2 = virtualinvoke 'from'.<com.sleepycat.je.DatabaseEntry: int getOffset()>();

        $i3 = virtualinvoke 'from'.<com.sleepycat.je.DatabaseEntry: int getSize()>();

        virtualinvoke 'to'.<com.sleepycat.je.DatabaseEntry: void setData(byte[],int,int)>($r0, $i2, $i3);

        return;
    }

    private static com.sleepycat.je.DatabaseEntry cloneEntry(com.sleepycat.je.DatabaseEntry)
    {
        com.sleepycat.je.DatabaseEntry 'from', 'to', $r0;

        'from' := @parameter0: com.sleepycat.je.DatabaseEntry;

        $r0 = new com.sleepycat.je.DatabaseEntry;

        specialinvoke $r0.<com.sleepycat.je.DatabaseEntry: void <init>()>();

        'to' = $r0;

        staticinvoke <com.sleepycat.je.Cursor: void setEntry(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry)>('from', 'to');

        return 'to';
    }

    private void rangeLockCurrentPosition()
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry tempKey, tempData, $r0, $r1;
        java.lang.Throwable l5, $r10;
        com.sleepycat.je.dbi.CursorImpl $r2, dup#17, $r5, $r7, $r8, $r9, $r11, $r12;
        com.sleepycat.je.txn.LockType $r3, $r4, $r13;
        com.sleepycat.je.OperationResult result#23;
        boolean $z0, $z1, $z2;
        com.sleepycat.je.dbi.GetMode $r6;

        this := @this: com.sleepycat.je.Cursor;

        $r0 = new com.sleepycat.je.DatabaseEntry;

        specialinvoke $r0.<com.sleepycat.je.DatabaseEntry: void <init>()>();

        tempKey = $r0;

        $r1 = new com.sleepycat.je.DatabaseEntry;

        specialinvoke $r1.<com.sleepycat.je.DatabaseEntry: void <init>()>();

        tempData = $r1;

        virtualinvoke tempKey.<com.sleepycat.je.DatabaseEntry: void setPartial(int,int,boolean)>(0, 0, 1);

        virtualinvoke tempData.<com.sleepycat.je.DatabaseEntry: void setPartial(int,int,boolean)>(0, 0, 1);

        $r2 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        dup#17 = virtualinvoke $r2.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.CursorImpl cloneCursor(boolean)>(1);

     label01:
        $r3 = <com.sleepycat.je.txn.LockType: com.sleepycat.je.txn.LockType RANGE_READ>;

        result#23 = virtualinvoke dup#17.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.OperationResult lockAndGetCurrent(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.txn.LockType)>(tempKey, tempData, $r3);

        if result#23 != null goto label05;

     label02:
        $z0 = <com.sleepycat.je.latch.LatchSupport: boolean TRACK_LATCHES>;

        if $z0 == 0 goto label03;

        staticinvoke <com.sleepycat.je.latch.LatchSupport: void expectBtreeLatchesHeld(int)>(0);

     label03:
        $r4 = <com.sleepycat.je.txn.LockType: com.sleepycat.je.txn.LockType RANGE_READ>;

        result#23 = virtualinvoke dup#17.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.OperationResult getNext(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.txn.LockType,boolean,boolean,boolean,com.sleepycat.je.dbi.RangeConstraint)>(tempKey, tempData, $r4, 0, 1, 0, null);

        $r5 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        $r6 = <com.sleepycat.je.dbi.GetMode: com.sleepycat.je.dbi.GetMode NEXT>;

        $z1 = virtualinvoke $r5.<com.sleepycat.je.dbi.CursorImpl: boolean checkForInsertion(com.sleepycat.je.dbi.GetMode,com.sleepycat.je.dbi.CursorImpl)>($r6, dup#17);

        if $z1 == 0 goto label04;

        $r7 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        virtualinvoke dup#17.<com.sleepycat.je.dbi.CursorImpl: void close(com.sleepycat.je.dbi.CursorImpl)>($r7);

        $r8 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        dup#17 = virtualinvoke $r8.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.CursorImpl cloneCursor(boolean)>(1);

        goto label02;

     label04:
        $z2 = <com.sleepycat.je.latch.LatchSupport: boolean TRACK_LATCHES>;

        if $z2 == 0 goto label05;

        staticinvoke <com.sleepycat.je.latch.LatchSupport: void expectBtreeLatchesHeld(int)>(0);

        goto label05;

     label05:
        $r9 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        virtualinvoke dup#17.<com.sleepycat.je.dbi.CursorImpl: void close(com.sleepycat.je.dbi.CursorImpl)>($r9);

        goto label09;

     label06:
        $r10 := @caughtexception;

     label07:
        l5 = $r10;

     label08:
        $r11 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        virtualinvoke dup#17.<com.sleepycat.je.dbi.CursorImpl: void close(com.sleepycat.je.dbi.CursorImpl)>($r11);

        throw l5;

     label09:
        if result#23 != null goto label10;

        $r12 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        $r13 = <com.sleepycat.je.txn.LockType: com.sleepycat.je.txn.LockType RANGE_READ>;

        virtualinvoke $r12.<com.sleepycat.je.dbi.CursorImpl: void lockEof(com.sleepycat.je.txn.LockType)>($r13);

     label10:
        return;

        catch java.lang.Throwable from label01 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
    }

    private com.sleepycat.je.OperationResult retrieveNextCheckForInsertion(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.txn.LockType, com.sleepycat.je.CacheMode, com.sleepycat.je.dbi.GetMode)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry key, data;
        com.sleepycat.je.txn.LockType lockType;
        com.sleepycat.je.CacheMode cacheMode;
        com.sleepycat.je.dbi.GetMode getMode, $r1, $r2;
        com.sleepycat.je.dbi.CursorImpl dup, $r4;
        com.sleepycat.je.OperationResult result, l9;
        java.lang.Throwable l10, $r7;
        boolean $z0, $z1, $z2, doEndMoveCursor#21, $z3, $z4, $z5, $z6;
        java.lang.AssertionError $r0, $r3;

        this := @this: com.sleepycat.je.Cursor;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        lockType := @parameter2: com.sleepycat.je.txn.LockType;

        cacheMode := @parameter3: com.sleepycat.je.CacheMode;

        getMode := @parameter4: com.sleepycat.je.dbi.GetMode;

        $z0 = <com.sleepycat.je.Cursor: boolean $assertionsDisabled>;

        if $z0 != 0 goto label02;

        if key == null goto label01;

        if data != null goto label02;

     label01:
        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label02:
        $z1 = <com.sleepycat.je.Cursor: boolean $assertionsDisabled>;

        if $z1 != 0 goto label03;

        $r1 = <com.sleepycat.je.dbi.GetMode: com.sleepycat.je.dbi.GetMode NEXT>;

        if getMode == $r1 goto label03;

        $r2 = <com.sleepycat.je.dbi.GetMode: com.sleepycat.je.dbi.GetMode PREV>;

        if getMode == $r2 goto label03;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label03:
        $z2 = <com.sleepycat.je.latch.LatchSupport: boolean TRACK_LATCHES>;

        if $z2 == 0 goto label04;

        staticinvoke <com.sleepycat.je.latch.LatchSupport: void expectBtreeLatchesHeld(int)>(0);

     label04:
        dup = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl beginMoveCursor(boolean,boolean,com.sleepycat.je.CacheMode)>(1, 1, cacheMode);

        doEndMoveCursor#21 = 1;

     label05:
        $z3 = virtualinvoke getMode.<com.sleepycat.je.dbi.GetMode: boolean isForward()>();

        result = virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.OperationResult getNext(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.txn.LockType,boolean,boolean,boolean,com.sleepycat.je.dbi.RangeConstraint)>(key, data, lockType, 0, $z3, 0, null);

        $r4 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        $z4 = virtualinvoke $r4.<com.sleepycat.je.dbi.CursorImpl: boolean checkForInsertion(com.sleepycat.je.dbi.GetMode,com.sleepycat.je.dbi.CursorImpl)>(getMode, dup);

        if $z4 != 0 goto label11;

        doEndMoveCursor#21 = 0;

        if result == null goto label06;

        $z5 = 1;

        goto label07;

     label06:
        $z5 = 0;

     label07:
        specialinvoke this.<com.sleepycat.je.Cursor: void endMoveCursor(com.sleepycat.je.dbi.CursorImpl,boolean)>(dup, $z5);

        $z6 = <com.sleepycat.je.latch.LatchSupport: boolean TRACK_LATCHES>;

        if $z6 == 0 goto label08;

        staticinvoke <com.sleepycat.je.latch.LatchSupport: void expectBtreeLatchesHeld(int)>(0);

     label08:
        l9 = result;

     label09:
        if doEndMoveCursor#21 == 0 goto label10;

        specialinvoke this.<com.sleepycat.je.Cursor: void endMoveCursor(com.sleepycat.je.dbi.CursorImpl,boolean)>(dup, 0);

     label10:
        return l9;

     label11:
        if doEndMoveCursor#21 == 0 goto label16;

        specialinvoke this.<com.sleepycat.je.Cursor: void endMoveCursor(com.sleepycat.je.dbi.CursorImpl,boolean)>(dup, 0);

        goto label16;

     label12:
        $r7 := @caughtexception;

     label13:
        l10 = $r7;

     label14:
        if doEndMoveCursor#21 == 0 goto label15;

        specialinvoke this.<com.sleepycat.je.Cursor: void endMoveCursor(com.sleepycat.je.dbi.CursorImpl,boolean)>(dup, 0);

     label15:
        throw l10;

     label16:
        goto label03;

        catch java.lang.Throwable from label05 to label09 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    private boolean checkRangeConstraint(com.sleepycat.je.DatabaseEntry)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry key;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2;
        java.lang.AssertionError $r0, $r2;
        byte[] $r1, $r5;
        com.sleepycat.je.dbi.RangeConstraint $r3, $r4;

        this := @this: com.sleepycat.je.Cursor;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        $z0 = <com.sleepycat.je.Cursor: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i0 = virtualinvoke key.<com.sleepycat.je.DatabaseEntry: int getOffset()>();

        if $i0 == 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $z1 = <com.sleepycat.je.Cursor: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r1 = virtualinvoke key.<com.sleepycat.je.DatabaseEntry: byte[] getData()>();

        $i1 = lengthof $r1;

        $i2 = virtualinvoke key.<com.sleepycat.je.DatabaseEntry: int getSize()>();

        if $i1 == $i2 goto label2;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label2:
        $r3 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.RangeConstraint rangeConstraint>;

        if $r3 != null goto label3;

        return 1;

     label3:
        $r4 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.RangeConstraint rangeConstraint>;

        $r5 = virtualinvoke key.<com.sleepycat.je.DatabaseEntry: byte[] getData()>();

        $z2 = interfaceinvoke $r4.<com.sleepycat.je.dbi.RangeConstraint: boolean inBounds(byte[])>($r5);

        return $z2;
    }

    private com.sleepycat.je.OperationResult dupsGetNextOrPrev(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.LockMode, com.sleepycat.je.CacheMode, com.sleepycat.je.dbi.GetMode)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry key, data, twoPartKey, $r0, $r1;
        com.sleepycat.je.LockMode lockMode;
        com.sleepycat.je.CacheMode cacheMode;
        com.sleepycat.je.dbi.GetMode getMode;
        com.sleepycat.je.OperationResult result;

        this := @this: com.sleepycat.je.Cursor;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        lockMode := @parameter2: com.sleepycat.je.LockMode;

        cacheMode := @parameter3: com.sleepycat.je.CacheMode;

        getMode := @parameter4: com.sleepycat.je.dbi.GetMode;

        $r0 = new com.sleepycat.je.DatabaseEntry;

        specialinvoke $r0.<com.sleepycat.je.DatabaseEntry: void <init>()>();

        twoPartKey = $r0;

        $r1 = <com.sleepycat.je.Cursor: com.sleepycat.je.DatabaseEntry NO_RETURN_DATA>;

        result = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult retrieveNextNoDups(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode,com.sleepycat.je.dbi.GetMode)>(twoPartKey, $r1, lockMode, cacheMode, getMode);

        if result != null goto label1;

        return null;

     label1:
        staticinvoke <com.sleepycat.je.dbi.DupKeyData: void split(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry)>(twoPartKey, key, data);

        return result;
    }

    private com.sleepycat.je.OperationResult dupsGetNextOrPrevDup(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.LockMode, com.sleepycat.je.CacheMode, com.sleepycat.je.dbi.GetMode)
    {
        com.sleepycat.je.Cursor this, c;
        com.sleepycat.je.DatabaseEntry key, data, twoPartKey, $r1, $r2;
        com.sleepycat.je.LockMode lockMode;
        com.sleepycat.je.CacheMode cacheMode;
        com.sleepycat.je.dbi.GetMode getMode;
        byte[] currentKey;
        com.sleepycat.je.OperationResult result, l11#38;
        java.lang.Throwable l9, l13, l14, l8#8, $r3, l12#27, $r4, l12#43, $r5, $r6, $r7;
        com.sleepycat.je.dbi.CursorImpl $r0;

        this := @this: com.sleepycat.je.Cursor;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        lockMode := @parameter2: com.sleepycat.je.LockMode;

        cacheMode := @parameter3: com.sleepycat.je.CacheMode;

        getMode := @parameter4: com.sleepycat.je.dbi.GetMode;

        $r0 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        currentKey = virtualinvoke $r0.<com.sleepycat.je.dbi.CursorImpl: byte[] getCurrentKey()>();

        c = virtualinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.Cursor dup(boolean)>(1);

        l8#8 = null;

     label01:
        virtualinvoke c.<com.sleepycat.je.Cursor: void setNonSticky(boolean)>(1);

        specialinvoke this.<com.sleepycat.je.Cursor: void setPrefixConstraint(com.sleepycat.je.Cursor,byte[])>(c, currentKey);

        $r1 = new com.sleepycat.je.DatabaseEntry;

        specialinvoke $r1.<com.sleepycat.je.DatabaseEntry: void <init>()>();

        twoPartKey = $r1;

        $r2 = <com.sleepycat.je.Cursor: com.sleepycat.je.DatabaseEntry NO_RETURN_DATA>;

        result = specialinvoke c.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult retrieveNextNoDups(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode,com.sleepycat.je.dbi.GetMode)>(twoPartKey, $r2, lockMode, cacheMode, getMode);

        if result != null goto label08;

     label02:
        if c == null goto label07;

        if null == null goto label06;

     label03:
        virtualinvoke c.<com.sleepycat.je.Cursor: void close()>();

     label04:
        goto label07;

     label05:
        $r3 := @caughtexception;

        l12#27 = $r3;

        virtualinvoke l8#8.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l12#27);

        goto label07;

     label06:
        virtualinvoke c.<com.sleepycat.je.Cursor: void close()>();

     label07:
        return null;

     label08:
        staticinvoke <com.sleepycat.je.dbi.DupKeyData: void split(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry)>(twoPartKey, key, data);

        specialinvoke this.<com.sleepycat.je.Cursor: void swapCursor(com.sleepycat.je.Cursor)>(c);

        l11#38 = result;

     label09:
        if c == null goto label14;

        if null == null goto label13;

     label10:
        virtualinvoke c.<com.sleepycat.je.Cursor: void close()>();

     label11:
        goto label14;

     label12:
        $r4 := @caughtexception;

        l12#43 = $r4;

        virtualinvoke l8#8.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l12#43);

        goto label14;

     label13:
        virtualinvoke c.<com.sleepycat.je.Cursor: void close()>();

     label14:
        return l11#38;

     label15:
        $r5 := @caughtexception;

     label16:
        l9 = $r5;

        l8#8 = l9;

        throw l9;

     label17:
        $r6 := @caughtexception;

        l13 = $r6;

     label18:
        if c == null goto label23;

        if l8#8 == null goto label22;

     label19:
        virtualinvoke c.<com.sleepycat.je.Cursor: void close()>();

     label20:
        goto label23;

     label21:
        $r7 := @caughtexception;

        l14 = $r7;

        virtualinvoke l8#8.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l14);

        goto label23;

     label22:
        virtualinvoke c.<com.sleepycat.je.Cursor: void close()>();

     label23:
        throw l13;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label16 to label18 with label17;
    }

    private com.sleepycat.je.OperationResult dupsGetNextNoDup(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.LockMode, com.sleepycat.je.CacheMode)
    {
        com.sleepycat.je.Cursor this, c;
        com.sleepycat.je.DatabaseEntry key, data, twoPartKey, $r5;
        com.sleepycat.je.LockMode lockMode;
        com.sleepycat.je.CacheMode cacheMode;
        byte[] currentKey;
        com.sleepycat.je.dbi.DupKeyData$NextNoDupComparator searchComparator, $r2;
        com.sleepycat.je.dbi.SearchMode $r0;
        com.sleepycat.je.OperationResult result, l11#40;
        java.lang.Throwable l9, l13, l14, l8#10, $r6, l12#29, $r7, l12#45, $r8, $r9, $r10;
        com.sleepycat.je.dbi.CursorImpl $r1;
        com.sleepycat.je.dbi.DatabaseImpl $r3;
        java.util.Comparator $r4;

        this := @this: com.sleepycat.je.Cursor;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        lockMode := @parameter2: com.sleepycat.je.LockMode;

        cacheMode := @parameter3: com.sleepycat.je.CacheMode;

        $r1 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        currentKey = virtualinvoke $r1.<com.sleepycat.je.dbi.CursorImpl: byte[] getCurrentKey()>();

        twoPartKey = staticinvoke <com.sleepycat.je.dbi.DupKeyData: com.sleepycat.je.DatabaseEntry removeData(byte[])>(currentKey);

        c = virtualinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.Cursor dup(boolean)>(0);

        l8#10 = null;

     label01:
        virtualinvoke c.<com.sleepycat.je.Cursor: void setNonSticky(boolean)>(1);

        $r2 = new com.sleepycat.je.dbi.DupKeyData$NextNoDupComparator;

        $r3 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r4 = virtualinvoke $r3.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator getBtreeComparator()>();

        specialinvoke $r2.<com.sleepycat.je.dbi.DupKeyData$NextNoDupComparator: void <init>(java.util.Comparator)>($r4);

        searchComparator = $r2;

        $r5 = <com.sleepycat.je.Cursor: com.sleepycat.je.DatabaseEntry NO_RETURN_DATA>;

        $r0 = <com.sleepycat.je.dbi.SearchMode: com.sleepycat.je.dbi.SearchMode SET_RANGE>;

        result = specialinvoke c.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult searchNoDups(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode,com.sleepycat.je.dbi.SearchMode,java.util.Comparator)>(twoPartKey, $r5, lockMode, cacheMode, $r0, searchComparator);

        if result != null goto label08;

     label02:
        if c == null goto label07;

        if null == null goto label06;

     label03:
        virtualinvoke c.<com.sleepycat.je.Cursor: void close()>();

     label04:
        goto label07;

     label05:
        $r6 := @caughtexception;

        l12#29 = $r6;

        virtualinvoke l8#10.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l12#29);

        goto label07;

     label06:
        virtualinvoke c.<com.sleepycat.je.Cursor: void close()>();

     label07:
        return null;

     label08:
        staticinvoke <com.sleepycat.je.dbi.DupKeyData: void split(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry)>(twoPartKey, key, data);

        specialinvoke this.<com.sleepycat.je.Cursor: void swapCursor(com.sleepycat.je.Cursor)>(c);

        l11#40 = result;

     label09:
        if c == null goto label14;

        if null == null goto label13;

     label10:
        virtualinvoke c.<com.sleepycat.je.Cursor: void close()>();

     label11:
        goto label14;

     label12:
        $r7 := @caughtexception;

        l12#45 = $r7;

        virtualinvoke l8#10.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l12#45);

        goto label14;

     label13:
        virtualinvoke c.<com.sleepycat.je.Cursor: void close()>();

     label14:
        return l11#40;

     label15:
        $r8 := @caughtexception;

     label16:
        l9 = $r8;

        l8#10 = l9;

        throw l9;

     label17:
        $r9 := @caughtexception;

        l13 = $r9;

     label18:
        if c == null goto label23;

        if l8#10 == null goto label22;

     label19:
        virtualinvoke c.<com.sleepycat.je.Cursor: void close()>();

     label20:
        goto label23;

     label21:
        $r10 := @caughtexception;

        l14 = $r10;

        virtualinvoke l8#10.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l14);

        goto label23;

     label22:
        virtualinvoke c.<com.sleepycat.je.Cursor: void close()>();

     label23:
        throw l13;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label16 to label18 with label17;
    }

    private com.sleepycat.je.OperationResult dupsGetPrevNoDup(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.LockMode, com.sleepycat.je.CacheMode)
    {
        com.sleepycat.je.Cursor this, c#9, c#55;
        com.sleepycat.je.DatabaseEntry key, data, twoPartKey, $r1, $r3, $r6;
        com.sleepycat.je.LockMode lockMode;
        com.sleepycat.je.CacheMode cacheMode;
        byte[] currentKey;
        java.lang.Throwable l10, l11, $r5, $r8;
        com.sleepycat.je.dbi.CursorImpl $r0;
        com.sleepycat.je.dbi.SearchMode $r2;
        com.sleepycat.je.OperationResult result#22, result#33, l9#45, result#65, l9#81;
        com.sleepycat.je.dbi.GetMode $r4, $r7;
        boolean $z0;

        this := @this: com.sleepycat.je.Cursor;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        lockMode := @parameter2: com.sleepycat.je.LockMode;

        cacheMode := @parameter3: com.sleepycat.je.CacheMode;

        $r0 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        currentKey = virtualinvoke $r0.<com.sleepycat.je.dbi.CursorImpl: byte[] getCurrentKey()>();

        twoPartKey = staticinvoke <com.sleepycat.je.dbi.DupKeyData: com.sleepycat.je.DatabaseEntry removeData(byte[])>(currentKey);

        c#9 = virtualinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.Cursor dup(boolean)>(0);

     label01:
        virtualinvoke c#9.<com.sleepycat.je.Cursor: void setNonSticky(boolean)>(1);

        specialinvoke this.<com.sleepycat.je.Cursor: void setPrefixConstraint(com.sleepycat.je.Cursor,byte[])>(c#9, currentKey);

        $r1 = <com.sleepycat.je.Cursor: com.sleepycat.je.DatabaseEntry NO_RETURN_DATA>;

        $r2 = <com.sleepycat.je.dbi.SearchMode: com.sleepycat.je.dbi.SearchMode SET_RANGE>;

        result#22 = specialinvoke c#9.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult searchNoDups(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode,com.sleepycat.je.dbi.SearchMode,java.util.Comparator)>(twoPartKey, $r1, lockMode, cacheMode, $r2, null);

        if result#22 == null goto label05;

        c#9.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.RangeConstraint rangeConstraint> = null;

        $r3 = <com.sleepycat.je.Cursor: com.sleepycat.je.DatabaseEntry NO_RETURN_DATA>;

        $r4 = <com.sleepycat.je.dbi.GetMode: com.sleepycat.je.dbi.GetMode PREV>;

        result#33 = specialinvoke c#9.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult retrieveNextNoDups(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode,com.sleepycat.je.dbi.GetMode)>(twoPartKey, $r3, lockMode, cacheMode, $r4);

        if result#33 != null goto label03;

     label02:
        virtualinvoke c#9.<com.sleepycat.je.Cursor: void close()>();

        return null;

     label03:
        staticinvoke <com.sleepycat.je.dbi.DupKeyData: void split(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry)>(twoPartKey, key, data);

        specialinvoke this.<com.sleepycat.je.Cursor: void swapCursor(com.sleepycat.je.Cursor)>(c#9);

        l9#45 = result#33;

     label04:
        virtualinvoke c#9.<com.sleepycat.je.Cursor: void close()>();

        return l9#45;

     label05:
        virtualinvoke c#9.<com.sleepycat.je.Cursor: void close()>();

        goto label09;

     label06:
        $r5 := @caughtexception;

     label07:
        l10 = $r5;

     label08:
        virtualinvoke c#9.<com.sleepycat.je.Cursor: void close()>();

        throw l10;

     label09:
        c#55 = virtualinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.Cursor dup(boolean)>(1);

     label10:
        virtualinvoke c#55.<com.sleepycat.je.Cursor: void setNonSticky(boolean)>(1);

     label11:
        $r6 = <com.sleepycat.je.Cursor: com.sleepycat.je.DatabaseEntry NO_RETURN_DATA>;

        $r7 = <com.sleepycat.je.dbi.GetMode: com.sleepycat.je.dbi.GetMode PREV>;

        result#65 = specialinvoke c#55.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult retrieveNextNoDups(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode,com.sleepycat.je.dbi.GetMode)>(twoPartKey, $r6, lockMode, cacheMode, $r7);

        if result#65 != null goto label13;

     label12:
        virtualinvoke c#55.<com.sleepycat.je.Cursor: void close()>();

        return null;

     label13:
        $z0 = specialinvoke this.<com.sleepycat.je.Cursor: boolean haveSameDupPrefix(com.sleepycat.je.DatabaseEntry,byte[])>(twoPartKey, currentKey);

        if $z0 != 0 goto label15;

        staticinvoke <com.sleepycat.je.dbi.DupKeyData: void split(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry)>(twoPartKey, key, data);

        specialinvoke this.<com.sleepycat.je.Cursor: void swapCursor(com.sleepycat.je.Cursor)>(c#55);

        l9#81 = result#65;

     label14:
        virtualinvoke c#55.<com.sleepycat.je.Cursor: void close()>();

        return l9#81;

     label15:
        goto label11;

     label16:
        $r8 := @caughtexception;

        l11 = $r8;

     label17:
        virtualinvoke c#55.<com.sleepycat.je.Cursor: void close()>();

        throw l11;

        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label10 to label12 with label16;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label15 to label17 with label16;
    }

    public com.sleepycat.je.Cursor dup(boolean)
    {
        com.sleepycat.je.Cursor this, $r0;
        boolean samePosition;
        java.lang.Error E, $r1;
        com.sleepycat.je.dbi.DatabaseImpl $r2;
        com.sleepycat.je.dbi.EnvironmentImpl $r3;

        this := @this: com.sleepycat.je.Cursor;

        samePosition := @parameter0: boolean;

     label1:
        virtualinvoke this.<com.sleepycat.je.Cursor: void checkOpenAndState(boolean)>(0);

        $r0 = new com.sleepycat.je.Cursor;

        specialinvoke $r0.<com.sleepycat.je.Cursor: void <init>(com.sleepycat.je.Cursor,boolean)>(this, samePosition);

     label2:
        return $r0;

     label3:
        $r1 := @caughtexception;

        E = $r1;

        $r2 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r3 = virtualinvoke $r2.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r3.<com.sleepycat.je.dbi.EnvironmentImpl: void invalidate(java.lang.Error)>(E);

        throw E;

        catch java.lang.Error from label1 to label2 with label3;
    }

    private void setPrefixConstraint(com.sleepycat.je.Cursor, byte[])
    {
        com.sleepycat.je.Cursor this, c;
        byte[] keyBytes2;
        com.sleepycat.je.Cursor$1 $r0;

        this := @this: com.sleepycat.je.Cursor;

        c := @parameter0: com.sleepycat.je.Cursor;

        keyBytes2 := @parameter1: byte[];

        $r0 = new com.sleepycat.je.Cursor$1;

        specialinvoke $r0.<com.sleepycat.je.Cursor$1: void <init>(com.sleepycat.je.Cursor,byte[])>(this, keyBytes2);

        c.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.RangeConstraint rangeConstraint> = $r0;

        return;
    }

    private void swapCursor(com.sleepycat.je.Cursor)
    {
        com.sleepycat.je.Cursor this, other;
        com.sleepycat.je.dbi.CursorImpl otherImpl, $r0;

        this := @this: com.sleepycat.je.Cursor;

        other := @parameter0: com.sleepycat.je.Cursor;

        otherImpl = other.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        $r0 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        other.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl> = $r0;

        this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl> = otherImpl;

        return;
    }

    private boolean haveSameDupPrefix(com.sleepycat.je.DatabaseEntry, byte[])
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry twoPartKey1;
        byte[] keyBytes2, $r1, $r3;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3;
        java.lang.AssertionError $r0, $r2;
        com.sleepycat.je.dbi.DatabaseImpl $r4;
        java.util.Comparator $r5;

        this := @this: com.sleepycat.je.Cursor;

        twoPartKey1 := @parameter0: com.sleepycat.je.DatabaseEntry;

        keyBytes2 := @parameter1: byte[];

        $z0 = <com.sleepycat.je.Cursor: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i0 = virtualinvoke twoPartKey1.<com.sleepycat.je.DatabaseEntry: int getOffset()>();

        if $i0 == 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $z1 = <com.sleepycat.je.Cursor: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r1 = virtualinvoke twoPartKey1.<com.sleepycat.je.DatabaseEntry: byte[] getData()>();

        $i1 = lengthof $r1;

        $i2 = virtualinvoke twoPartKey1.<com.sleepycat.je.DatabaseEntry: int getSize()>();

        if $i1 == $i2 goto label2;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label2:
        $r3 = virtualinvoke twoPartKey1.<com.sleepycat.je.DatabaseEntry: byte[] getData()>();

        $r4 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r5 = virtualinvoke $r4.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator getBtreeComparator()>();

        $i3 = staticinvoke <com.sleepycat.je.dbi.DupKeyData: int compareMainKey(byte[],byte[],java.util.Comparator)>($r3, keyBytes2, $r5);

        if $i3 != 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    void setNonSticky(boolean)
    {
        com.sleepycat.je.Cursor this;
        boolean nonSticky;

        this := @this: com.sleepycat.je.Cursor;

        nonSticky := @parameter0: boolean;

        this.<com.sleepycat.je.Cursor: boolean nonSticky> = nonSticky;

        return;
    }

    void <init>(com.sleepycat.je.Cursor, boolean)
    {
        com.sleepycat.je.Cursor this, cursor;
        boolean samePosition, $z0, $z1, $z2, $z3;
        com.sleepycat.je.dbi.CursorImpl $r0, $r1;
        com.sleepycat.je.dbi.DatabaseImpl $r2, $r7;
        com.sleepycat.je.Database $r3, $r4, $r5;
        com.sleepycat.je.CursorConfig $r6;
        com.sleepycat.je.dbi.EnvironmentImpl $r8;
        java.util.logging.Logger $r9;
        com.sleepycat.je.CacheMode $r10;

        this := @this: com.sleepycat.je.Cursor;

        cursor := @parameter0: com.sleepycat.je.Cursor;

        samePosition := @parameter1: boolean;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<com.sleepycat.je.Cursor: boolean nonSticky> = 0;

        $z0 = cursor.<com.sleepycat.je.Cursor: boolean readUncommittedDefault>;

        this.<com.sleepycat.je.Cursor: boolean readUncommittedDefault> = $z0;

        $z1 = cursor.<com.sleepycat.je.Cursor: boolean serializableIsolationDefault>;

        this.<com.sleepycat.je.Cursor: boolean serializableIsolationDefault> = $z1;

        $z2 = cursor.<com.sleepycat.je.Cursor: boolean updateOperationsProhibited>;

        this.<com.sleepycat.je.Cursor: boolean updateOperationsProhibited> = $z2;

        $r0 = cursor.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        $r1 = virtualinvoke $r0.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.CursorImpl cloneCursor(boolean)>(samePosition);

        this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl> = $r1;

        $r2 = cursor.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl> = $r2;

        $r3 = cursor.<com.sleepycat.je.Cursor: com.sleepycat.je.Database dbHandle>;

        this.<com.sleepycat.je.Cursor: com.sleepycat.je.Database dbHandle> = $r3;

        $r4 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.Database dbHandle>;

        if $r4 == null goto label1;

        $r5 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.Database dbHandle>;

        virtualinvoke $r5.<com.sleepycat.je.Database: void addCursor(com.sleepycat.je.ForwardCursor)>(this);

     label1:
        $r6 = cursor.<com.sleepycat.je.Cursor: com.sleepycat.je.CursorConfig config>;

        this.<com.sleepycat.je.Cursor: com.sleepycat.je.CursorConfig config> = $r6;

        $r7 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r8 = virtualinvoke $r7.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r9 = virtualinvoke $r8.<com.sleepycat.je.dbi.EnvironmentImpl: java.util.logging.Logger getLogger()>();

        this.<com.sleepycat.je.Cursor: java.util.logging.Logger logger> = $r9;

        $r10 = cursor.<com.sleepycat.je.Cursor: com.sleepycat.je.CacheMode defaultCacheMode>;

        this.<com.sleepycat.je.Cursor: com.sleepycat.je.CacheMode defaultCacheMode> = $r10;

        $z3 = cursor.<com.sleepycat.je.Cursor: boolean nonSticky>;

        this.<com.sleepycat.je.Cursor: boolean nonSticky> = $z3;

        return;
    }

    private com.sleepycat.je.OperationResult searchNoDups(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.LockMode, com.sleepycat.je.CacheMode, com.sleepycat.je.dbi.SearchMode, java.util.Comparator)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry key, data, tryKey, tryData;
        com.sleepycat.je.LockMode lockMode;
        com.sleepycat.je.CacheMode cacheMode;
        com.sleepycat.je.dbi.SearchMode searchMode, $r0;
        java.util.Comparator comparator;
        com.sleepycat.je.dbi.RangeRestartException l7, l8, $r5, $r7;
        com.sleepycat.je.txn.LockType searchLockType, advanceLockType;
        com.sleepycat.je.OperationResult result, $r3, $r4;
        java.lang.Error E, $r8;
        boolean $z0, $z1, $z2, $z3;
        java.lang.AssertionError $r1, $r2;
        com.sleepycat.je.dbi.DatabaseImpl $r9;
        com.sleepycat.je.dbi.EnvironmentImpl $r10;

        this := @this: com.sleepycat.je.Cursor;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        lockMode := @parameter2: com.sleepycat.je.LockMode;

        cacheMode := @parameter3: com.sleepycat.je.CacheMode;

        searchMode := @parameter4: com.sleepycat.je.dbi.SearchMode;

        comparator := @parameter5: java.util.Comparator;

        $z0 = <com.sleepycat.je.Cursor: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $r0 = <com.sleepycat.je.dbi.SearchMode: com.sleepycat.je.dbi.SearchMode BOTH_RANGE>;

        if searchMode != $r0 goto label01;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label01:
        $z1 = virtualinvoke this.<com.sleepycat.je.Cursor: boolean isSerializableIsolation(com.sleepycat.je.LockMode)>(lockMode);

        if $z1 != 0 goto label08;

        $z2 = virtualinvoke searchMode.<com.sleepycat.je.dbi.SearchMode: boolean isExactSearch()>();

        if $z2 == 0 goto label04;

        $z3 = <com.sleepycat.je.Cursor: boolean $assertionsDisabled>;

        if $z3 != 0 goto label02;

        if comparator == null goto label02;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label02:
        $r3 = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult searchExact(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode,com.sleepycat.je.dbi.SearchMode)>(key, data, lockMode, cacheMode, searchMode);

     label03:
        return $r3;

     label04:
        $r4 = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult searchRange(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode,java.util.Comparator)>(key, data, lockMode, cacheMode, comparator);

     label05:
        return $r4;

     label06:
        $r5 := @caughtexception;

     label07:
        l7 = $r5;

        goto label04;

     label08:
        searchLockType = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.txn.LockType getLockType(com.sleepycat.je.LockMode,boolean)>(lockMode, 0);

        advanceLockType = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.txn.LockType getLockType(com.sleepycat.je.LockMode,boolean)>(lockMode, 1);

        tryKey = staticinvoke <com.sleepycat.je.Cursor: com.sleepycat.je.DatabaseEntry cloneEntry(com.sleepycat.je.DatabaseEntry)>(key);

        tryData = staticinvoke <com.sleepycat.je.Cursor: com.sleepycat.je.DatabaseEntry cloneEntry(com.sleepycat.je.DatabaseEntry)>(data);

        result = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult searchRangeSerializable(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.txn.LockType,com.sleepycat.je.txn.LockType,java.util.Comparator,com.sleepycat.je.CacheMode,com.sleepycat.je.dbi.SearchMode)>(tryKey, tryData, searchLockType, advanceLockType, comparator, cacheMode, searchMode);

        if result == null goto label09;

        staticinvoke <com.sleepycat.je.Cursor: void setEntry(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry)>(tryKey, key);

        staticinvoke <com.sleepycat.je.Cursor: void setEntry(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry)>(tryData, data);

     label09:
        return result;

     label10:
        $r7 := @caughtexception;

     label11:
        l8 = $r7;

        goto label08;

     label12:
        $r8 := @caughtexception;

        E = $r8;

        $r9 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r10 = virtualinvoke $r9.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r10.<com.sleepycat.je.dbi.EnvironmentImpl: void invalidate(java.lang.Error)>(E);

        throw E;

        catch com.sleepycat.je.dbi.RangeRestartException from label04 to label05 with label06;
        catch com.sleepycat.je.dbi.RangeRestartException from label08 to label09 with label10;
        catch java.lang.Error from label01 to label03 with label12;
        catch java.lang.Error from label04 to label05 with label12;
        catch java.lang.Error from label07 to label09 with label12;
        catch java.lang.Error from label11 to label12 with label12;
    }

    private com.sleepycat.je.OperationResult searchExact(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.LockMode, com.sleepycat.je.CacheMode, com.sleepycat.je.dbi.SearchMode)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry key, data, origData, $r4, $r17;
        com.sleepycat.je.LockMode lockMode, $r6;
        com.sleepycat.je.CacheMode cacheMode;
        com.sleepycat.je.dbi.SearchMode searchMode, $r1, $r2, $r18;
        boolean dataRequested, dirtyReadAll, $z0, $z1, success#14, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15;
        com.sleepycat.je.txn.LockType lockType;
        com.sleepycat.je.dbi.CursorImpl dup;
        java.lang.Throwable l14, $r26;
        java.lang.AssertionError $r0, $r3;
        com.sleepycat.je.OperationResult result#16;
        byte[] $r5;
        int $i0, $i1, $i2;
        com.sleepycat.je.dbi.CursorImpl$LockStanding $r7;
        com.sleepycat.je.dbi.DatabaseImpl $r8, $r11, $r16, $r19, $r22, $r27, $r30;
        com.sleepycat.je.tree.BIN $r9, $r10, $r20, $r21, $r28, $r29;
        com.sleepycat.je.dbi.EnvironmentImpl $r12, $r23, $r31;

        this := @this: com.sleepycat.je.Cursor;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        lockMode := @parameter2: com.sleepycat.je.LockMode;

        cacheMode := @parameter3: com.sleepycat.je.CacheMode;

        searchMode := @parameter4: com.sleepycat.je.dbi.SearchMode;

        $z0 = <com.sleepycat.je.Cursor: boolean $assertionsDisabled>;

        if $z0 != 0 goto label02;

        if key == null goto label01;

        if data != null goto label02;

     label01:
        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label02:
        $z1 = <com.sleepycat.je.Cursor: boolean $assertionsDisabled>;

        if $z1 != 0 goto label03;

        $r1 = <com.sleepycat.je.dbi.SearchMode: com.sleepycat.je.dbi.SearchMode SET>;

        if searchMode == $r1 goto label03;

        $r2 = <com.sleepycat.je.dbi.SearchMode: com.sleepycat.je.dbi.SearchMode BOTH>;

        if searchMode == $r2 goto label03;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label03:
        success#14 = 0;

        result#16 = null;

        $r4 = new com.sleepycat.je.DatabaseEntry;

        $r5 = virtualinvoke data.<com.sleepycat.je.DatabaseEntry: byte[] getData()>();

        $i0 = virtualinvoke data.<com.sleepycat.je.DatabaseEntry: int getOffset()>();

        $i1 = virtualinvoke data.<com.sleepycat.je.DatabaseEntry: int getSize()>();

        specialinvoke $r4.<com.sleepycat.je.DatabaseEntry: void <init>(byte[],int,int)>($r5, $i0, $i1);

        origData = $r4;

        $z2 = virtualinvoke data.<com.sleepycat.je.DatabaseEntry: boolean getPartial()>();

        if $z2 == 0 goto label04;

        $i2 = virtualinvoke data.<com.sleepycat.je.DatabaseEntry: int getPartialLength()>();

        if $i2 == 0 goto label05;

     label04:
        $z3 = 1;

        goto label06;

     label05:
        $z3 = 0;

     label06:
        dataRequested = $z3;

        lockType = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.txn.LockType getLockType(com.sleepycat.je.LockMode,boolean)>(lockMode, 0);

        $r6 = <com.sleepycat.je.LockMode: com.sleepycat.je.LockMode READ_UNCOMMITTED_ALL>;

        if lockMode != $r6 goto label07;

        $z4 = 1;

        goto label08;

     label07:
        $z4 = 0;

     label08:
        dirtyReadAll = $z4;

        dup = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl beginMoveCursor(boolean,com.sleepycat.je.CacheMode)>(0, cacheMode);

     label09:
        $r7 = virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.CursorImpl$LockStanding searchExact(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.txn.LockType,boolean,boolean)>(key, lockType, dirtyReadAll, dataRequested);

        if $r7 != null goto label14;

        success#14 = 1;

     label10:
        if 1 == 0 goto label11;

        $r8 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z5 = virtualinvoke $r8.<com.sleepycat.je.dbi.DatabaseImpl: boolean isInternalDb()>();

        if $z5 != 0 goto label11;

        $r9 = virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN getBIN()>();

        if $r9 == null goto label11;

        $r10 = virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN getBIN()>();

        $z6 = virtualinvoke $r10.<com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        if $z6 == 0 goto label11;

        $r11 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r12 = virtualinvoke $r11.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r12.<com.sleepycat.je.dbi.EnvironmentImpl: void incBinDeltaGets()>();

     label11:
        virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        if null == null goto label12;

        $z7 = 1;

        goto label13;

     label12:
        $z7 = 0;

     label13:
        specialinvoke this.<com.sleepycat.je.Cursor: void endMoveCursor(com.sleepycat.je.dbi.CursorImpl,boolean)>(dup, $z7);

        return null;

     label14:
        $r16 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z8 = virtualinvoke $r16.<com.sleepycat.je.dbi.DatabaseImpl: boolean allowsKeyUpdates()>();

        if $z8 == 0 goto label15;

        $r17 = key;

        goto label16;

     label15:
        $r17 = null;

     label16:
        result#16 = virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.OperationResult getCurrent(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry)>($r17, data);

        if result#16 == null goto label17;

        $r18 = <com.sleepycat.je.dbi.SearchMode: com.sleepycat.je.dbi.SearchMode BOTH>;

        if searchMode != $r18 goto label17;

        $z9 = specialinvoke this.<com.sleepycat.je.Cursor: boolean checkDataMatch(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry)>(origData, data);

        if $z9 != 0 goto label17;

        result#16 = null;

     label17:
        if 1 == 0 goto label18;

        $r19 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z10 = virtualinvoke $r19.<com.sleepycat.je.dbi.DatabaseImpl: boolean isInternalDb()>();

        if $z10 != 0 goto label18;

        $r20 = virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN getBIN()>();

        if $r20 == null goto label18;

        $r21 = virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN getBIN()>();

        $z11 = virtualinvoke $r21.<com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        if $z11 == 0 goto label18;

        $r22 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r23 = virtualinvoke $r22.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r23.<com.sleepycat.je.dbi.EnvironmentImpl: void incBinDeltaGets()>();

     label18:
        virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        if result#16 == null goto label19;

        $z12 = 1;

        goto label20;

     label19:
        $z12 = 0;

     label20:
        specialinvoke this.<com.sleepycat.je.Cursor: void endMoveCursor(com.sleepycat.je.dbi.CursorImpl,boolean)>(dup, $z12);

        goto label27;

     label21:
        $r26 := @caughtexception;

     label22:
        l14 = $r26;

     label23:
        if success#14 == 0 goto label24;

        $r27 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z13 = virtualinvoke $r27.<com.sleepycat.je.dbi.DatabaseImpl: boolean isInternalDb()>();

        if $z13 != 0 goto label24;

        $r28 = virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN getBIN()>();

        if $r28 == null goto label24;

        $r29 = virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN getBIN()>();

        $z14 = virtualinvoke $r29.<com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        if $z14 == 0 goto label24;

        $r30 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r31 = virtualinvoke $r30.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r31.<com.sleepycat.je.dbi.EnvironmentImpl: void incBinDeltaGets()>();

     label24:
        virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        if result#16 == null goto label25;

        $z15 = 1;

        goto label26;

     label25:
        $z15 = 0;

     label26:
        specialinvoke this.<com.sleepycat.je.Cursor: void endMoveCursor(com.sleepycat.je.dbi.CursorImpl,boolean)>(dup, $z15);

        throw l14;

     label27:
        return result#16;

        catch java.lang.Throwable from label09 to label10 with label21;
        catch java.lang.Throwable from label14 to label17 with label21;
        catch java.lang.Throwable from label22 to label23 with label21;
    }

    private com.sleepycat.je.OperationResult searchRange(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.LockMode, com.sleepycat.je.CacheMode, java.util.Comparator) throws com.sleepycat.je.dbi.RangeRestartException
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry key, data;
        com.sleepycat.je.LockMode lockMode, $r2;
        com.sleepycat.je.CacheMode cacheMode;
        java.util.Comparator comparator;
        com.sleepycat.je.txn.LockType lockType;
        boolean dirtyReadAll, exactKeyMatch, foundLast, $z0, success#7, $z1, $z2, incStats#12, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        com.sleepycat.je.dbi.CursorImpl dup;
        int searchResult, $i0, $i1, $i2;
        java.lang.Throwable l15, $r16;
        java.lang.AssertionError $r0;
        com.sleepycat.je.dbi.DatabaseImpl $r1, $r5, $r12, $r19;
        com.sleepycat.je.OperationResult result#14;
        com.sleepycat.je.tree.BIN $r3, $r4, $r10, $r11, $r17, $r18;
        com.sleepycat.je.dbi.EnvironmentImpl $r6, $r13, $r20;
        com.sleepycat.je.dbi.RangeConstraint $r9;

        this := @this: com.sleepycat.je.Cursor;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        lockMode := @parameter2: com.sleepycat.je.LockMode;

        cacheMode := @parameter3: com.sleepycat.je.CacheMode;

        comparator := @parameter4: java.util.Comparator;

        $z0 = <com.sleepycat.je.Cursor: boolean $assertionsDisabled>;

        if $z0 != 0 goto label02;

        if key == null goto label01;

        if data != null goto label02;

     label01:
        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label02:
        success#7 = 0;

        $r1 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z1 = virtualinvoke $r1.<com.sleepycat.je.dbi.DatabaseImpl: boolean isInternalDb()>();

        if $z1 != 0 goto label03;

        $z2 = 1;

        goto label04;

     label03:
        $z2 = 0;

     label04:
        incStats#12 = $z2;

        result#14 = null;

        lockType = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.txn.LockType getLockType(com.sleepycat.je.LockMode,boolean)>(lockMode, 0);

        $r2 = <com.sleepycat.je.LockMode: com.sleepycat.je.LockMode READ_UNCOMMITTED_ALL>;

        if lockMode != $r2 goto label05;

        $z3 = 1;

        goto label06;

     label05:
        $z3 = 0;

     label06:
        dirtyReadAll = $z3;

        dup = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl beginMoveCursor(boolean,com.sleepycat.je.CacheMode)>(0, cacheMode);

     label07:
        searchResult = virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: int searchRange(com.sleepycat.je.DatabaseEntry,java.util.Comparator)>(key, comparator);

        $i0 = searchResult & 1;

        if $i0 != 0 goto label12;

        success#7 = 1;

     label08:
        if 1 == 0 goto label09;

        if incStats#12 == 0 goto label09;

        $r3 = virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN getBIN()>();

        if $r3 == null goto label09;

        $r4 = virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN getBIN()>();

        $z4 = virtualinvoke $r4.<com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        if $z4 == 0 goto label09;

        $r5 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r6 = virtualinvoke $r5.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r6.<com.sleepycat.je.dbi.EnvironmentImpl: void incBinDeltaGets()>();

     label09:
        virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        if null == null goto label10;

        $z5 = 1;

        goto label11;

     label10:
        $z5 = 0;

     label11:
        specialinvoke this.<com.sleepycat.je.Cursor: void endMoveCursor(com.sleepycat.je.dbi.CursorImpl,boolean)>(dup, $z5);

        return null;

     label12:
        $i1 = searchResult & 2;

        if $i1 == 0 goto label13;

        $z6 = 1;

        goto label14;

     label13:
        $z6 = 0;

     label14:
        exactKeyMatch = $z6;

        $i2 = searchResult & 4;

        if $i2 == 0 goto label15;

        $z7 = 1;

        goto label16;

     label15:
        $z7 = 0;

     label16:
        foundLast = $z7;

        if exactKeyMatch == 0 goto label17;

        result#14 = virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.OperationResult lockAndGetCurrent(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.txn.LockType,boolean,boolean,boolean)>(key, data, lockType, dirtyReadAll, 1, 0);

     label17:
        if exactKeyMatch == 0 goto label18;

        if result#14 != null goto label19;

     label18:
        result#14 = null;

        if foundLast != 0 goto label19;

        $r9 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.RangeConstraint rangeConstraint>;

        result#14 = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult searchRangeAdvanceAndCheckKey(com.sleepycat.je.dbi.CursorImpl,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.txn.LockType,boolean,java.util.Comparator,com.sleepycat.je.dbi.RangeConstraint)>(dup, key, data, lockType, dirtyReadAll, comparator, $r9);

        incStats#12 = 0;

     label19:
        if 1 == 0 goto label20;

        if incStats#12 == 0 goto label20;

        $r10 = virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN getBIN()>();

        if $r10 == null goto label20;

        $r11 = virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN getBIN()>();

        $z8 = virtualinvoke $r11.<com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        if $z8 == 0 goto label20;

        $r12 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r13 = virtualinvoke $r12.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r13.<com.sleepycat.je.dbi.EnvironmentImpl: void incBinDeltaGets()>();

     label20:
        virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        if result#14 == null goto label21;

        $z9 = 1;

        goto label22;

     label21:
        $z9 = 0;

     label22:
        specialinvoke this.<com.sleepycat.je.Cursor: void endMoveCursor(com.sleepycat.je.dbi.CursorImpl,boolean)>(dup, $z9);

        goto label29;

     label23:
        $r16 := @caughtexception;

     label24:
        l15 = $r16;

     label25:
        if success#7 == 0 goto label26;

        if incStats#12 == 0 goto label26;

        $r17 = virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN getBIN()>();

        if $r17 == null goto label26;

        $r18 = virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN getBIN()>();

        $z10 = virtualinvoke $r18.<com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        if $z10 == 0 goto label26;

        $r19 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r20 = virtualinvoke $r19.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r20.<com.sleepycat.je.dbi.EnvironmentImpl: void incBinDeltaGets()>();

     label26:
        virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        if result#14 == null goto label27;

        $z11 = 1;

        goto label28;

     label27:
        $z11 = 0;

     label28:
        specialinvoke this.<com.sleepycat.je.Cursor: void endMoveCursor(com.sleepycat.je.dbi.CursorImpl,boolean)>(dup, $z11);

        throw l15;

     label29:
        return result#14;

        catch java.lang.Throwable from label07 to label08 with label23;
        catch java.lang.Throwable from label12 to label19 with label23;
        catch java.lang.Throwable from label24 to label25 with label23;
    }

    private com.sleepycat.je.OperationResult searchRangeSerializable(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.txn.LockType, com.sleepycat.je.txn.LockType, java.util.Comparator, com.sleepycat.je.CacheMode, com.sleepycat.je.dbi.SearchMode) throws com.sleepycat.je.dbi.RangeRestartException
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry key, data, origData#22, $r2;
        com.sleepycat.je.txn.LockType searchLockType, advanceLockType, $r19;
        java.util.Comparator comparator;
        com.sleepycat.je.CacheMode cacheMode;
        com.sleepycat.je.dbi.SearchMode searchMode, $r4;
        boolean exactSearch, exactKeyMatch, foundLast, $z0, success#7, $z1, $z2, incStats#12, keyChange#18, mustLockEOF#20, $z3, $z4, $z5, $z6, $z7, $z8, success#96, $z9, $z10, $z11, $z12;
        com.sleepycat.je.dbi.CursorImpl dup, $r18;
        int searchResult, $i0, $i1, $i2, $i3, $i4;
        java.lang.Throwable l19, $r11;
        java.lang.AssertionError $r0;
        com.sleepycat.je.dbi.DatabaseImpl $r1, $r7, $r14;
        com.sleepycat.je.OperationResult result#14;
        byte[] $r3;
        com.sleepycat.je.tree.BIN $r5, $r6, $r12, $r13;
        com.sleepycat.je.dbi.EnvironmentImpl $r8, $r15;

        this := @this: com.sleepycat.je.Cursor;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        searchLockType := @parameter2: com.sleepycat.je.txn.LockType;

        advanceLockType := @parameter3: com.sleepycat.je.txn.LockType;

        comparator := @parameter4: java.util.Comparator;

        cacheMode := @parameter5: com.sleepycat.je.CacheMode;

        searchMode := @parameter6: com.sleepycat.je.dbi.SearchMode;

        $z0 = <com.sleepycat.je.Cursor: boolean $assertionsDisabled>;

        if $z0 != 0 goto label02;

        if key == null goto label01;

        if data != null goto label02;

     label01:
        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label02:
        success#7 = 0;

        $r1 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z1 = virtualinvoke $r1.<com.sleepycat.je.dbi.DatabaseImpl: boolean isInternalDb()>();

        if $z1 != 0 goto label03;

        $z2 = 1;

        goto label04;

     label03:
        $z2 = 0;

     label04:
        incStats#12 = $z2;

        result#14 = null;

        exactSearch = virtualinvoke searchMode.<com.sleepycat.je.dbi.SearchMode: boolean isExactSearch()>();

        keyChange#18 = 0;

        mustLockEOF#20 = 0;

        origData#22 = null;

        if exactSearch == 0 goto label05;

        $r2 = new com.sleepycat.je.DatabaseEntry;

        $r3 = virtualinvoke data.<com.sleepycat.je.DatabaseEntry: byte[] getData()>();

        $i0 = virtualinvoke data.<com.sleepycat.je.DatabaseEntry: int getOffset()>();

        $i1 = virtualinvoke data.<com.sleepycat.je.DatabaseEntry: int getSize()>();

        specialinvoke $r2.<com.sleepycat.je.DatabaseEntry: void <init>(byte[],int,int)>($r3, $i0, $i1);

        origData#22 = $r2;

     label05:
        dup = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl beginMoveCursor(boolean,com.sleepycat.je.CacheMode)>(0, cacheMode);

     label06:
        searchResult = virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: int searchRange(com.sleepycat.je.DatabaseEntry,java.util.Comparator)>(key, comparator);

        $i2 = searchResult & 1;

        if $i2 == 0 goto label22;

        $i3 = searchResult & 2;

        if $i3 == 0 goto label07;

        $z3 = 1;

        goto label08;

     label07:
        $z3 = 0;

     label08:
        exactKeyMatch = $z3;

        $i4 = searchResult & 4;

        if $i4 == 0 goto label09;

        $z4 = 1;

        goto label10;

     label09:
        $z4 = 0;

     label10:
        foundLast = $z4;

        if exactKeyMatch == 0 goto label11;

        result#14 = virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.OperationResult lockAndGetCurrent(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.txn.LockType,boolean,boolean,boolean)>(key, data, searchLockType, 0, 1, 0);

     label11:
        if exactKeyMatch == 0 goto label12;

        if result#14 != null goto label18;

     label12:
        result#14 = null;

        if foundLast != 0 goto label15;

        result#14 = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult searchRangeAdvanceAndCheckKey(com.sleepycat.je.dbi.CursorImpl,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.txn.LockType,boolean,java.util.Comparator,com.sleepycat.je.dbi.RangeConstraint)>(dup, key, data, advanceLockType, 0, comparator, null);

        if result#14 == null goto label13;

        $z5 = 1;

        goto label14;

     label13:
        $z5 = 0;

     label14:
        keyChange#18 = $z5;

        incStats#12 = 0;

     label15:
        if result#14 != null goto label16;

        $z6 = 1;

        goto label17;

     label16:
        $z6 = 0;

     label17:
        mustLockEOF#20 = $z6;

     label18:
        if result#14 == null goto label20;

        if exactSearch == 0 goto label20;

        if keyChange#18 == 0 goto label19;

        result#14 = null;

        goto label20;

     label19:
        $r4 = <com.sleepycat.je.dbi.SearchMode: com.sleepycat.je.dbi.SearchMode BOTH>;

        if searchMode != $r4 goto label20;

        $z7 = specialinvoke this.<com.sleepycat.je.Cursor: boolean checkDataMatch(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry)>(origData#22, data);

        if $z7 != 0 goto label20;

        result#14 = null;

     label20:
        if result#14 == null goto label21;

        if exactSearch != 0 goto label21;

        $z8 = specialinvoke this.<com.sleepycat.je.Cursor: boolean checkRangeConstraint(com.sleepycat.je.DatabaseEntry)>(key);

        if $z8 != 0 goto label21;

        result#14 = null;

     label21:
        goto label23;

     label22:
        mustLockEOF#20 = 1;

     label23:
        success#96 = 1;

     label24:
        if success#96 == 0 goto label25;

        if incStats#12 == 0 goto label25;

        $r5 = virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN getBIN()>();

        if $r5 == null goto label25;

        $r6 = virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN getBIN()>();

        $z9 = virtualinvoke $r6.<com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        if $z9 == 0 goto label25;

        $r7 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r8 = virtualinvoke $r7.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r8.<com.sleepycat.je.dbi.EnvironmentImpl: void incBinDeltaGets()>();

     label25:
        virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        if result#14 == null goto label26;

        $z10 = 1;

        goto label27;

     label26:
        $z10 = 0;

     label27:
        specialinvoke this.<com.sleepycat.je.Cursor: void endMoveCursor(com.sleepycat.je.dbi.CursorImpl,boolean)>(dup, $z10);

        goto label34;

     label28:
        $r11 := @caughtexception;

     label29:
        l19 = $r11;

     label30:
        if success#7 == 0 goto label31;

        if incStats#12 == 0 goto label31;

        $r12 = virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN getBIN()>();

        if $r12 == null goto label31;

        $r13 = virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN getBIN()>();

        $z11 = virtualinvoke $r13.<com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        if $z11 == 0 goto label31;

        $r14 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r15 = virtualinvoke $r14.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r15.<com.sleepycat.je.dbi.EnvironmentImpl: void incBinDeltaGets()>();

     label31:
        virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        if result#14 == null goto label32;

        $z12 = 1;

        goto label33;

     label32:
        $z12 = 0;

     label33:
        specialinvoke this.<com.sleepycat.je.Cursor: void endMoveCursor(com.sleepycat.je.dbi.CursorImpl,boolean)>(dup, $z12);

        throw l19;

     label34:
        if mustLockEOF#20 == 0 goto label35;

        $r18 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        $r19 = <com.sleepycat.je.txn.LockType: com.sleepycat.je.txn.LockType RANGE_READ>;

        virtualinvoke $r18.<com.sleepycat.je.dbi.CursorImpl: void lockEof(com.sleepycat.je.txn.LockType)>($r19);

     label35:
        return result#14;

        catch java.lang.Throwable from label06 to label24 with label28;
        catch java.lang.Throwable from label29 to label30 with label28;
    }

    private com.sleepycat.je.OperationResult searchRangeAdvanceAndCheckKey(com.sleepycat.je.dbi.CursorImpl, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.txn.LockType, boolean, java.util.Comparator, com.sleepycat.je.dbi.RangeConstraint) throws com.sleepycat.je.dbi.RangeRestartException
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.dbi.CursorImpl dup;
        com.sleepycat.je.DatabaseEntry key, data, origKey, $r1, nextKey#15, $r3;
        com.sleepycat.je.txn.LockType lockType;
        boolean dirtyReadAll, $z0, $z1;
        com.sleepycat.je.dbi.RangeConstraint rangeConstraint;
        com.sleepycat.je.OperationResult result;
        int c, $i0, $i1, $i2, $i3, $i4, $i5;
        java.util.Comparator comparator#1;
        com.sleepycat.je.dbi.DatabaseImpl $r0;
        byte[] $r2, $r4, $r5;
        com.sleepycat.je.dbi.RangeRestartException $r6;

        this := @this: com.sleepycat.je.Cursor;

        dup := @parameter0: com.sleepycat.je.dbi.CursorImpl;

        key := @parameter1: com.sleepycat.je.DatabaseEntry;

        data := @parameter2: com.sleepycat.je.DatabaseEntry;

        lockType := @parameter3: com.sleepycat.je.txn.LockType;

        dirtyReadAll := @parameter4: boolean;

        comparator#1 := @parameter5: java.util.Comparator;

        rangeConstraint := @parameter6: com.sleepycat.je.dbi.RangeConstraint;

        if comparator#1 != null goto label1;

        $r0 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        comparator#1 = virtualinvoke $r0.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator getKeyComparator()>();

     label1:
        $r1 = new com.sleepycat.je.DatabaseEntry;

        $r2 = virtualinvoke key.<com.sleepycat.je.DatabaseEntry: byte[] getData()>();

        $i0 = virtualinvoke key.<com.sleepycat.je.DatabaseEntry: int getOffset()>();

        $i1 = virtualinvoke key.<com.sleepycat.je.DatabaseEntry: int getSize()>();

        specialinvoke $r1.<com.sleepycat.je.DatabaseEntry: void <init>(byte[],int,int)>($r2, $i0, $i1);

        origKey = $r1;

        nextKey#15 = key;

        $z0 = virtualinvoke key.<com.sleepycat.je.DatabaseEntry: boolean getPartial()>();

        if $z0 == 0 goto label2;

        $r3 = new com.sleepycat.je.DatabaseEntry;

        $r4 = virtualinvoke key.<com.sleepycat.je.DatabaseEntry: byte[] getData()>();

        $i2 = virtualinvoke key.<com.sleepycat.je.DatabaseEntry: int getOffset()>();

        $i3 = virtualinvoke key.<com.sleepycat.je.DatabaseEntry: int getSize()>();

        specialinvoke $r3.<com.sleepycat.je.DatabaseEntry: void <init>(byte[],int,int)>($r4, $i2, $i3);

        nextKey#15 = $r3;

     label2:
        result = virtualinvoke dup.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.OperationResult getNext(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.txn.LockType,boolean,boolean,boolean,com.sleepycat.je.dbi.RangeConstraint)>(nextKey#15, data, lockType, dirtyReadAll, 1, 1, rangeConstraint);

        if result == null goto label4;

        c = staticinvoke <com.sleepycat.je.tree.Key: int compareKeys(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,java.util.Comparator)>(nextKey#15, origKey, comparator#1);

        if c >= 0 goto label3;

        $r5 = virtualinvoke origKey.<com.sleepycat.je.DatabaseEntry: byte[] getData()>();

        $i4 = virtualinvoke origKey.<com.sleepycat.je.DatabaseEntry: int getOffset()>();

        $i5 = virtualinvoke origKey.<com.sleepycat.je.DatabaseEntry: int getSize()>();

        virtualinvoke key.<com.sleepycat.je.DatabaseEntry: void setData(byte[],int,int)>($r5, $i4, $i5);

        $r6 = new com.sleepycat.je.dbi.RangeRestartException;

        specialinvoke $r6.<com.sleepycat.je.dbi.RangeRestartException: void <init>()>();

        throw $r6;

     label3:
        $z1 = virtualinvoke key.<com.sleepycat.je.DatabaseEntry: boolean getPartial()>();

        if $z1 == 0 goto label4;

        staticinvoke <com.sleepycat.je.tree.LN: void setEntry(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry)>(key, nextKey#15);

     label4:
        return result;
    }

    private boolean checkDataMatch(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry data1, data2;
        int size1, size2, $i0, $i1, $i2;
        byte[] $r0, $r1;
        boolean $z0;

        this := @this: com.sleepycat.je.Cursor;

        data1 := @parameter0: com.sleepycat.je.DatabaseEntry;

        data2 := @parameter1: com.sleepycat.je.DatabaseEntry;

        size1 = virtualinvoke data1.<com.sleepycat.je.DatabaseEntry: int getSize()>();

        size2 = virtualinvoke data2.<com.sleepycat.je.DatabaseEntry: int getSize()>();

        if size1 == size2 goto label1;

        return 0;

     label1:
        $r0 = virtualinvoke data1.<com.sleepycat.je.DatabaseEntry: byte[] getData()>();

        $i0 = virtualinvoke data1.<com.sleepycat.je.DatabaseEntry: int getOffset()>();

        $r1 = virtualinvoke data2.<com.sleepycat.je.DatabaseEntry: byte[] getData()>();

        $i1 = virtualinvoke data2.<com.sleepycat.je.DatabaseEntry: int getOffset()>();

        $i2 = staticinvoke <com.sleepycat.je.tree.Key: int compareUnsignedBytes(byte[],int,int,byte[],int,int)>($r0, $i0, size1, $r1, $i1, size2);

        if $i2 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    static com.sleepycat.je.dbi.DatabaseImpl access$000(com.sleepycat.je.Cursor)
    {
        com.sleepycat.je.Cursor x0;
        com.sleepycat.je.dbi.DatabaseImpl $r0;

        x0 := @parameter0: com.sleepycat.je.Cursor;

        $r0 = x0.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        return $r0;
    }

    private com.sleepycat.je.OperationResult dupsGetSearchKey(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.LockMode, com.sleepycat.je.CacheMode)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry key, data, twoPartKey, $r1, $r4;
        com.sleepycat.je.LockMode lockMode;
        com.sleepycat.je.CacheMode cacheMode;
        com.sleepycat.je.dbi.RangeConstraint savedRangeConstraint;
        com.sleepycat.je.dbi.SearchMode $r0;
        com.sleepycat.je.OperationResult result, l8#31;
        java.lang.Throwable l9, $r5;
        byte[] $r2, $r3;
        int $i0, $i1;

        this := @this: com.sleepycat.je.Cursor;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        lockMode := @parameter2: com.sleepycat.je.LockMode;

        cacheMode := @parameter3: com.sleepycat.je.CacheMode;

        $r1 = new com.sleepycat.je.DatabaseEntry;

        $r2 = virtualinvoke key.<com.sleepycat.je.DatabaseEntry: byte[] getData()>();

        $i0 = virtualinvoke key.<com.sleepycat.je.DatabaseEntry: int getOffset()>();

        $i1 = virtualinvoke key.<com.sleepycat.je.DatabaseEntry: int getSize()>();

        $r3 = staticinvoke <com.sleepycat.je.dbi.DupKeyData: byte[] makePrefixKey(byte[],int,int)>($r2, $i0, $i1);

        specialinvoke $r1.<com.sleepycat.je.DatabaseEntry: void <init>(byte[])>($r3);

        twoPartKey = $r1;

        savedRangeConstraint = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.RangeConstraint rangeConstraint>;

     label1:
        specialinvoke this.<com.sleepycat.je.Cursor: void setPrefixConstraint(com.sleepycat.je.Cursor,com.sleepycat.je.DatabaseEntry)>(this, key);

        $r4 = <com.sleepycat.je.Cursor: com.sleepycat.je.DatabaseEntry NO_RETURN_DATA>;

        $r0 = <com.sleepycat.je.dbi.SearchMode: com.sleepycat.je.dbi.SearchMode SET_RANGE>;

        result = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult searchNoDups(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode,com.sleepycat.je.dbi.SearchMode,java.util.Comparator)>(twoPartKey, $r4, lockMode, cacheMode, $r0, null);

        if result != null goto label3;

     label2:
        this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.RangeConstraint rangeConstraint> = savedRangeConstraint;

        return null;

     label3:
        staticinvoke <com.sleepycat.je.dbi.DupKeyData: void split(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry)>(twoPartKey, key, data);

        l8#31 = result;

     label4:
        this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.RangeConstraint rangeConstraint> = savedRangeConstraint;

        return l8#31;

     label5:
        $r5 := @caughtexception;

     label6:
        l9 = $r5;

     label7:
        this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.RangeConstraint rangeConstraint> = savedRangeConstraint;

        throw l9;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private com.sleepycat.je.OperationResult dupsGetSearchKeyRange(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.LockMode, com.sleepycat.je.CacheMode)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry key, data, twoPartKey, $r1, $r4;
        com.sleepycat.je.LockMode lockMode;
        com.sleepycat.je.CacheMode cacheMode;
        com.sleepycat.je.dbi.SearchMode $r0;
        com.sleepycat.je.OperationResult result;
        byte[] $r2, $r3;
        int $i0, $i1;

        this := @this: com.sleepycat.je.Cursor;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        lockMode := @parameter2: com.sleepycat.je.LockMode;

        cacheMode := @parameter3: com.sleepycat.je.CacheMode;

        $r1 = new com.sleepycat.je.DatabaseEntry;

        $r2 = virtualinvoke key.<com.sleepycat.je.DatabaseEntry: byte[] getData()>();

        $i0 = virtualinvoke key.<com.sleepycat.je.DatabaseEntry: int getOffset()>();

        $i1 = virtualinvoke key.<com.sleepycat.je.DatabaseEntry: int getSize()>();

        $r3 = staticinvoke <com.sleepycat.je.dbi.DupKeyData: byte[] makePrefixKey(byte[],int,int)>($r2, $i0, $i1);

        specialinvoke $r1.<com.sleepycat.je.DatabaseEntry: void <init>(byte[])>($r3);

        twoPartKey = $r1;

        $r4 = <com.sleepycat.je.Cursor: com.sleepycat.je.DatabaseEntry NO_RETURN_DATA>;

        $r0 = <com.sleepycat.je.dbi.SearchMode: com.sleepycat.je.dbi.SearchMode SET_RANGE>;

        result = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult searchNoDups(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode,com.sleepycat.je.dbi.SearchMode,java.util.Comparator)>(twoPartKey, $r4, lockMode, cacheMode, $r0, null);

        if result != null goto label1;

        return null;

     label1:
        staticinvoke <com.sleepycat.je.dbi.DupKeyData: void split(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry)>(twoPartKey, key, data);

        return result;
    }

    private com.sleepycat.je.OperationResult dupsGetSearchBoth(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.LockMode, com.sleepycat.je.CacheMode)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry key, data, twoPartKey, $r1;
        com.sleepycat.je.LockMode lockMode;
        com.sleepycat.je.CacheMode cacheMode;
        com.sleepycat.je.dbi.SearchMode $r0;
        com.sleepycat.je.OperationResult result;

        this := @this: com.sleepycat.je.Cursor;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        lockMode := @parameter2: com.sleepycat.je.LockMode;

        cacheMode := @parameter3: com.sleepycat.je.CacheMode;

        twoPartKey = staticinvoke <com.sleepycat.je.dbi.DupKeyData: com.sleepycat.je.DatabaseEntry combine(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry)>(key, data);

        $r1 = <com.sleepycat.je.Cursor: com.sleepycat.je.DatabaseEntry NO_RETURN_DATA>;

        $r0 = <com.sleepycat.je.dbi.SearchMode: com.sleepycat.je.dbi.SearchMode BOTH>;

        result = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult searchNoDups(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode,com.sleepycat.je.dbi.SearchMode,java.util.Comparator)>(twoPartKey, $r1, lockMode, cacheMode, $r0, null);

        if result != null goto label1;

        return null;

     label1:
        staticinvoke <com.sleepycat.je.dbi.DupKeyData: void split(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry)>(twoPartKey, key, data);

        return result;
    }

    private com.sleepycat.je.OperationResult dupsGetSearchBothRange(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.LockMode, com.sleepycat.je.CacheMode)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry key, data, twoPartKey, $r1;
        com.sleepycat.je.LockMode lockMode;
        com.sleepycat.je.CacheMode cacheMode;
        com.sleepycat.je.dbi.RangeConstraint savedRangeConstraint;
        com.sleepycat.je.dbi.SearchMode $r0;
        com.sleepycat.je.OperationResult result, l8#23;
        java.lang.Throwable l9, $r2;

        this := @this: com.sleepycat.je.Cursor;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        lockMode := @parameter2: com.sleepycat.je.LockMode;

        cacheMode := @parameter3: com.sleepycat.je.CacheMode;

        twoPartKey = staticinvoke <com.sleepycat.je.dbi.DupKeyData: com.sleepycat.je.DatabaseEntry combine(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry)>(key, data);

        savedRangeConstraint = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.RangeConstraint rangeConstraint>;

     label1:
        specialinvoke this.<com.sleepycat.je.Cursor: void setPrefixConstraint(com.sleepycat.je.Cursor,com.sleepycat.je.DatabaseEntry)>(this, key);

        $r1 = <com.sleepycat.je.Cursor: com.sleepycat.je.DatabaseEntry NO_RETURN_DATA>;

        $r0 = <com.sleepycat.je.dbi.SearchMode: com.sleepycat.je.dbi.SearchMode SET_RANGE>;

        result = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult searchNoDups(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode,com.sleepycat.je.dbi.SearchMode,java.util.Comparator)>(twoPartKey, $r1, lockMode, cacheMode, $r0, null);

        if result != null goto label3;

     label2:
        this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.RangeConstraint rangeConstraint> = savedRangeConstraint;

        return null;

     label3:
        staticinvoke <com.sleepycat.je.dbi.DupKeyData: void split(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry)>(twoPartKey, key, data);

        l8#23 = result;

     label4:
        this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.RangeConstraint rangeConstraint> = savedRangeConstraint;

        return l8#23;

     label5:
        $r2 := @caughtexception;

     label6:
        l9 = $r2;

     label7:
        this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.RangeConstraint rangeConstraint> = savedRangeConstraint;

        throw l9;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void setPrefixConstraint(com.sleepycat.je.Cursor, com.sleepycat.je.DatabaseEntry)
    {
        com.sleepycat.je.Cursor this, c;
        com.sleepycat.je.DatabaseEntry key2;
        com.sleepycat.je.Cursor$2 $r0;

        this := @this: com.sleepycat.je.Cursor;

        c := @parameter0: com.sleepycat.je.Cursor;

        key2 := @parameter1: com.sleepycat.je.DatabaseEntry;

        $r0 = new com.sleepycat.je.Cursor$2;

        specialinvoke $r0.<com.sleepycat.je.Cursor$2: void <init>(com.sleepycat.je.Cursor,com.sleepycat.je.DatabaseEntry)>(this, key2);

        c.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.RangeConstraint rangeConstraint> = $r0;

        return;
    }

    void <init>(com.sleepycat.je.dbi.DatabaseImpl, com.sleepycat.je.txn.Locker, com.sleepycat.je.CursorConfig, boolean)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.dbi.DatabaseImpl databaseImpl;
        com.sleepycat.je.txn.Locker locker;
        boolean retainNonTxnLocks;
        com.sleepycat.je.CursorConfig cursorConfig#1;
        com.sleepycat.je.Database $r0, $r1;

        this := @this: com.sleepycat.je.Cursor;

        databaseImpl := @parameter0: com.sleepycat.je.dbi.DatabaseImpl;

        locker := @parameter1: com.sleepycat.je.txn.Locker;

        cursorConfig#1 := @parameter2: com.sleepycat.je.CursorConfig;

        retainNonTxnLocks := @parameter3: boolean;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<com.sleepycat.je.Cursor: boolean nonSticky> = 0;

        if cursorConfig#1 != null goto label1;

        cursorConfig#1 = <com.sleepycat.je.CursorConfig: com.sleepycat.je.CursorConfig DEFAULT>;

     label1:
        $r0 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.Database dbHandle>;

        if $r0 == null goto label2;

        $r1 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.Database dbHandle>;

        virtualinvoke $r1.<com.sleepycat.je.Database: com.sleepycat.je.dbi.DatabaseImpl checkOpen()>();

     label2:
        specialinvoke this.<com.sleepycat.je.Cursor: void init(com.sleepycat.je.Database,com.sleepycat.je.dbi.DatabaseImpl,com.sleepycat.je.txn.Locker,com.sleepycat.je.CursorConfig,boolean)>(null, databaseImpl, locker, cursorConfig#1, retainNonTxnLocks);

        return;
    }

    private void init(com.sleepycat.je.Database, com.sleepycat.je.dbi.DatabaseImpl, com.sleepycat.je.txn.Locker, com.sleepycat.je.CursorConfig, boolean)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.Database dbHandle;
        com.sleepycat.je.dbi.DatabaseImpl databaseImpl;
        com.sleepycat.je.txn.Locker locker, $r7;
        com.sleepycat.je.CursorConfig cursorConfig;
        boolean retainNonTxnLocks, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        java.lang.RuntimeException e, $r1;
        java.lang.AssertionError $r0;
        com.sleepycat.je.dbi.CursorImpl $r2, $r4, $r6;
        com.sleepycat.je.Transaction $r3;
        com.sleepycat.je.dbi.EnvironmentImpl $r9;
        java.util.logging.Logger $r10;

        this := @this: com.sleepycat.je.Cursor;

        dbHandle := @parameter0: com.sleepycat.je.Database;

        databaseImpl := @parameter1: com.sleepycat.je.dbi.DatabaseImpl;

        locker := @parameter2: com.sleepycat.je.txn.Locker;

        cursorConfig := @parameter3: com.sleepycat.je.CursorConfig;

        retainNonTxnLocks := @parameter4: boolean;

        $z0 = <com.sleepycat.je.Cursor: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        if locker != null goto label01;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label01:
        virtualinvoke locker.<com.sleepycat.je.txn.Locker: void openCursorHook(com.sleepycat.je.dbi.DatabaseImpl)>(databaseImpl);

     label02:
        goto label04;

     label03:
        $r1 := @caughtexception;

        e = $r1;

        virtualinvoke locker.<com.sleepycat.je.txn.Locker: void operationEnd()>();

        throw e;

     label04:
        $r2 = new com.sleepycat.je.dbi.CursorImpl;

        $z1 = virtualinvoke this.<com.sleepycat.je.Cursor: boolean isSecondaryCursor()>();

        specialinvoke $r2.<com.sleepycat.je.dbi.CursorImpl: void <init>(com.sleepycat.je.dbi.DatabaseImpl,com.sleepycat.je.txn.Locker,boolean,boolean)>(databaseImpl, locker, retainNonTxnLocks, $z1);

        this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl> = $r2;

        $r3 = virtualinvoke locker.<com.sleepycat.je.txn.Locker: com.sleepycat.je.Transaction getTransaction()>();

        this.<com.sleepycat.je.Cursor: com.sleepycat.je.Transaction transaction> = $r3;

        $r4 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        virtualinvoke $r4.<com.sleepycat.je.dbi.CursorImpl: void setAllowEviction(boolean)>(1);

        $z2 = virtualinvoke cursorConfig.<com.sleepycat.je.CursorConfig: boolean getReadUncommitted()>();

        if $z2 != 0 goto label05;

        $z3 = virtualinvoke locker.<com.sleepycat.je.txn.Locker: boolean isReadUncommittedDefault()>();

        if $z3 == 0 goto label06;

     label05:
        $z4 = 1;

        goto label07;

     label06:
        $z4 = 0;

     label07:
        this.<com.sleepycat.je.Cursor: boolean readUncommittedDefault> = $z4;

        $r6 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        $r7 = virtualinvoke $r6.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.txn.Locker getLocker()>();

        $z5 = virtualinvoke $r7.<com.sleepycat.je.txn.Locker: boolean isSerializableIsolation()>();

        this.<com.sleepycat.je.Cursor: boolean serializableIsolationDefault> = $z5;

        $z6 = virtualinvoke locker.<com.sleepycat.je.txn.Locker: boolean isReadOnly()>();

        if $z6 != 0 goto label10;

        if dbHandle == null goto label08;

        $z7 = virtualinvoke dbHandle.<com.sleepycat.je.Database: boolean isWritable()>();

        if $z7 == 0 goto label10;

     label08:
        $z8 = virtualinvoke databaseImpl.<com.sleepycat.je.dbi.DatabaseImpl: boolean isTransactional()>();

        if $z8 == 0 goto label09;

        $z9 = virtualinvoke locker.<com.sleepycat.je.txn.Locker: boolean isTransactional()>();

        if $z9 == 0 goto label10;

     label09:
        $z10 = virtualinvoke databaseImpl.<com.sleepycat.je.dbi.DatabaseImpl: boolean isReplicated()>();

        $z11 = virtualinvoke locker.<com.sleepycat.je.txn.Locker: boolean isLocalWrite()>();

        if $z10 != $z11 goto label11;

     label10:
        $z12 = 1;

        goto label12;

     label11:
        $z12 = 0;

     label12:
        this.<com.sleepycat.je.Cursor: boolean updateOperationsProhibited> = $z12;

        this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl> = databaseImpl;

        if dbHandle == null goto label13;

        this.<com.sleepycat.je.Cursor: com.sleepycat.je.Database dbHandle> = dbHandle;

        virtualinvoke dbHandle.<com.sleepycat.je.Database: void addCursor(com.sleepycat.je.ForwardCursor)>(this);

     label13:
        this.<com.sleepycat.je.Cursor: com.sleepycat.je.CursorConfig config> = cursorConfig;

        $r9 = virtualinvoke databaseImpl.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r10 = virtualinvoke $r9.<com.sleepycat.je.dbi.EnvironmentImpl: java.util.logging.Logger getLogger()>();

        this.<com.sleepycat.je.Cursor: java.util.logging.Logger logger> = $r10;

        $z13 = virtualinvoke cursorConfig.<com.sleepycat.je.CursorConfig: boolean getNonSticky()>();

        this.<com.sleepycat.je.Cursor: boolean nonSticky> = $z13;

        virtualinvoke this.<com.sleepycat.je.Cursor: void setCacheMode(com.sleepycat.je.CacheMode)>(null);

        return;

        catch java.lang.RuntimeException from label01 to label02 with label03;
    }

    boolean isSecondaryCursor()
    {
        com.sleepycat.je.Cursor this;

        this := @this: com.sleepycat.je.Cursor;

        return 0;
    }

    public void setCacheMode(com.sleepycat.je.CacheMode)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.CacheMode cacheMode, $r1;
        com.sleepycat.je.dbi.DatabaseImpl $r2;

        this := @this: com.sleepycat.je.Cursor;

        cacheMode := @parameter0: com.sleepycat.je.CacheMode;

        if cacheMode == null goto label1;

        $r1 = cacheMode;

        goto label2;

     label1:
        $r2 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r1 = virtualinvoke $r2.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.CacheMode getDefaultCacheMode()>();

     label2:
        this.<com.sleepycat.je.Cursor: com.sleepycat.je.CacheMode defaultCacheMode> = $r1;

        return;
    }

    public com.sleepycat.je.OperationResult put(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.Put, com.sleepycat.je.WriteOptions)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry key, data;
        com.sleepycat.je.Put putType;
        com.sleepycat.je.WriteOptions options;
        java.lang.Error E, $r3;
        java.util.logging.Level $r0;
        java.lang.String $r1;
        com.sleepycat.je.OperationResult $r2;
        com.sleepycat.je.dbi.DatabaseImpl $r4;
        com.sleepycat.je.dbi.EnvironmentImpl $r5;

        this := @this: com.sleepycat.je.Cursor;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        putType := @parameter2: com.sleepycat.je.Put;

        options := @parameter3: com.sleepycat.je.WriteOptions;

     label1:
        virtualinvoke this.<com.sleepycat.je.Cursor: void checkOpen()>();

        $r0 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(putType);

        virtualinvoke this.<com.sleepycat.je.Cursor: void trace(java.util.logging.Level,java.lang.String,java.lang.String,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode)>($r0, "Cursor.put: ", $r1, key, data, null);

        $r2 = virtualinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult putInternal(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.Put,com.sleepycat.je.WriteOptions)>(key, data, putType, options);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        E = $r3;

        $r4 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r5 = virtualinvoke $r4.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r5.<com.sleepycat.je.dbi.EnvironmentImpl: void invalidate(java.lang.Error)>(E);

        throw E;

        catch java.lang.Error from label1 to label2 with label3;
    }

    com.sleepycat.je.OperationResult putInternal(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.Put, com.sleepycat.je.WriteOptions)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry key, data;
        com.sleepycat.je.Put putType, $r0, $r3;
        com.sleepycat.je.WriteOptions options#1;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;
        com.sleepycat.je.CacheMode $r4;
        com.sleepycat.je.dbi.ExpirationInfo $r5;
        com.sleepycat.je.dbi.PutMode $r6;
        com.sleepycat.je.OperationResult $r7;

        this := @this: com.sleepycat.je.Cursor;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        putType := @parameter2: com.sleepycat.je.Put;

        options#1 := @parameter3: com.sleepycat.je.WriteOptions;

        staticinvoke <com.sleepycat.je.utilint.DatabaseUtil: void checkForNullParam(java.lang.Object,java.lang.String)>(putType, "putType");

        $r0 = <com.sleepycat.je.Put: com.sleepycat.je.Put CURRENT>;

        if putType != $r0 goto label1;

        if key == null goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The key must be null for Put.Current");

        throw $r1;

     label1:
        staticinvoke <com.sleepycat.je.utilint.DatabaseUtil: void checkForNullDbt(com.sleepycat.je.DatabaseEntry,java.lang.String,boolean)>(key, "key", 1);

     label2:
        if key == null goto label3;

        staticinvoke <com.sleepycat.je.utilint.DatabaseUtil: void checkForPartial(com.sleepycat.je.DatabaseEntry,java.lang.String)>(key, "key");

     label3:
        staticinvoke <com.sleepycat.je.utilint.DatabaseUtil: void checkForNullDbt(com.sleepycat.je.DatabaseEntry,java.lang.String,boolean)>(data, "data", 1);

        $r3 = <com.sleepycat.je.Put: com.sleepycat.je.Put CURRENT>;

        if putType != $r3 goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        virtualinvoke this.<com.sleepycat.je.Cursor: void checkState(boolean)>($z0);

        if options#1 != null goto label6;

        options#1 = <com.sleepycat.je.Cursor: com.sleepycat.je.WriteOptions DEFAULT_WRITE_OPTIONS>;

     label6:
        $r4 = virtualinvoke options#1.<com.sleepycat.je.WriteOptions: com.sleepycat.je.CacheMode getCacheMode()>();

        $r5 = staticinvoke <com.sleepycat.je.dbi.ExpirationInfo: com.sleepycat.je.dbi.ExpirationInfo getInfo(com.sleepycat.je.WriteOptions)>(options#1);

        $r6 = virtualinvoke putType.<com.sleepycat.je.Put: com.sleepycat.je.dbi.PutMode getPutMode()>();

        $r7 = virtualinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult putInternal(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.CacheMode,com.sleepycat.je.dbi.ExpirationInfo,com.sleepycat.je.dbi.PutMode)>(key, data, $r4, $r5, $r6);

        return $r7;
    }

    com.sleepycat.je.OperationResult putInternal(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.CacheMode, com.sleepycat.je.dbi.ExpirationInfo, com.sleepycat.je.dbi.PutMode)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry key, data;
        com.sleepycat.je.CacheMode cacheMode;
        com.sleepycat.je.dbi.ExpirationInfo expInfo;
        com.sleepycat.je.dbi.PutMode putMode, $r3;
        java.lang.Object l6, $r0;
        java.lang.Throwable l7, $r6;
        com.sleepycat.je.dbi.DatabaseImpl $r1;
        boolean $z0;
        com.sleepycat.je.OperationResult $r2, $r5;
        java.lang.UnsupportedOperationException $r4;

        this := @this: com.sleepycat.je.Cursor;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        cacheMode := @parameter2: com.sleepycat.je.CacheMode;

        expInfo := @parameter3: com.sleepycat.je.dbi.ExpirationInfo;

        putMode := @parameter4: com.sleepycat.je.dbi.PutMode;

        virtualinvoke this.<com.sleepycat.je.Cursor: void checkUpdatesAllowed(com.sleepycat.je.dbi.ExpirationInfo)>(expInfo);

        $r0 = specialinvoke this.<com.sleepycat.je.Cursor: java.lang.Object getTxnSynchronizer()>();

        l6 = $r0;

        entermonitor $r0;

     label1:
        specialinvoke this.<com.sleepycat.je.Cursor: void checkTxnState()>();

        $r1 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z0 = virtualinvoke $r1.<com.sleepycat.je.dbi.DatabaseImpl: boolean getSortedDuplicates()>();

        if $z0 == 0 goto label3;

        $r2 = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult putHandleDups(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.CacheMode,com.sleepycat.je.dbi.ExpirationInfo,com.sleepycat.je.dbi.PutMode)>(key, data, cacheMode, expInfo, putMode);

        exitmonitor l6;

     label2:
        return $r2;

     label3:
        $r3 = <com.sleepycat.je.dbi.PutMode: com.sleepycat.je.dbi.PutMode NO_DUP_DATA>;

        if putMode != $r3 goto label4;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Database is not configured for duplicate data.");

        throw $r4;

     label4:
        $r5 = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult putNoDups(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.CacheMode,com.sleepycat.je.dbi.ExpirationInfo,com.sleepycat.je.dbi.PutMode)>(key, data, cacheMode, expInfo, putMode);

        exitmonitor l6;

     label5:
        return $r5;

     label6:
        $r6 := @caughtexception;

     label7:
        l7 = $r6;

        exitmonitor l6;

     label8:
        throw l7;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    void checkUpdatesAllowed(com.sleepycat.je.dbi.ExpirationInfo)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.dbi.ExpirationInfo expInfo;
        com.sleepycat.je.dbi.DatabaseImpl $r0, $r1;
        boolean $z0;
        int $i0;
        com.sleepycat.je.dbi.EnvironmentImpl $r2;

        this := @this: com.sleepycat.je.Cursor;

        expInfo := @parameter0: com.sleepycat.je.dbi.ExpirationInfo;

        virtualinvoke this.<com.sleepycat.je.Cursor: void checkUpdatesAllowed()>();

        $r0 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z0 = virtualinvoke $r0.<com.sleepycat.je.dbi.DatabaseImpl: boolean isReplicated()>();

        if $z0 == 0 goto label1;

        if expInfo == null goto label1;

        $i0 = expInfo.<com.sleepycat.je.dbi.ExpirationInfo: int expiration>;

        if $i0 <= 0 goto label1;

        $r1 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r2 = virtualinvoke $r1.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r2.<com.sleepycat.je.dbi.EnvironmentImpl: void checkTTLAvailable()>();

     label1:
        return;
    }

    private com.sleepycat.je.OperationResult putHandleDups(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.CacheMode, com.sleepycat.je.dbi.ExpirationInfo, com.sleepycat.je.dbi.PutMode)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry key, data;
        com.sleepycat.je.CacheMode cacheMode;
        com.sleepycat.je.dbi.ExpirationInfo expInfo;
        com.sleepycat.je.dbi.PutMode putMode;
        int[] $r0;
        int $i0, $i1;
        com.sleepycat.je.OperationResult $r1, $r2, $r3, $r4;
        java.lang.String $r5;
        com.sleepycat.je.EnvironmentFailureException $r6;

        this := @this: com.sleepycat.je.Cursor;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        cacheMode := @parameter2: com.sleepycat.je.CacheMode;

        expInfo := @parameter3: com.sleepycat.je.dbi.ExpirationInfo;

        putMode := @parameter4: com.sleepycat.je.dbi.PutMode;

        $r0 = <com.sleepycat.je.Cursor$3: int[] $SwitchMap$com$sleepycat$je$dbi$PutMode>;

        $i0 = virtualinvoke putMode.<com.sleepycat.je.dbi.PutMode: int ordinal()>();

        $i1 = $r0[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label5;
        };

     label1:
        $r1 = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult dupsPutOverwrite(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.CacheMode,com.sleepycat.je.dbi.ExpirationInfo)>(key, data, cacheMode, expInfo);

        return $r1;

     label2:
        $r2 = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult dupsPutNoOverwrite(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.CacheMode,com.sleepycat.je.dbi.ExpirationInfo)>(key, data, cacheMode, expInfo);

        return $r2;

     label3:
        $r3 = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult dupsPutNoDupData(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.CacheMode,com.sleepycat.je.dbi.ExpirationInfo)>(key, data, cacheMode, expInfo);

        return $r3;

     label4:
        $r4 = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult dupsPutCurrent(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.CacheMode,com.sleepycat.je.dbi.ExpirationInfo)>(data, cacheMode, expInfo);

        return $r4;

     label5:
        $r5 = virtualinvoke putMode.<com.sleepycat.je.dbi.PutMode: java.lang.String toString()>();

        $r6 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>($r5);

        throw $r6;
    }

    private com.sleepycat.je.OperationResult putNoDups(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.CacheMode, com.sleepycat.je.dbi.ExpirationInfo, com.sleepycat.je.dbi.PutMode)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry key, data;
        com.sleepycat.je.CacheMode cacheMode;
        com.sleepycat.je.dbi.ExpirationInfo expInfo;
        com.sleepycat.je.dbi.PutMode putMode, $r0;
        com.sleepycat.je.tree.LN ln, $r1;
        com.sleepycat.je.dbi.DatabaseImpl $r2, $r4;
        com.sleepycat.je.dbi.EnvironmentImpl $r3;
        com.sleepycat.je.log.ReplicationContext $r5;
        com.sleepycat.je.OperationResult $r6;

        this := @this: com.sleepycat.je.Cursor;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        cacheMode := @parameter2: com.sleepycat.je.CacheMode;

        expInfo := @parameter3: com.sleepycat.je.dbi.ExpirationInfo;

        putMode := @parameter4: com.sleepycat.je.dbi.PutMode;

        $r0 = <com.sleepycat.je.dbi.PutMode: com.sleepycat.je.dbi.PutMode CURRENT>;

        if putMode != $r0 goto label1;

        $r1 = null;

        goto label2;

     label1:
        $r2 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r3 = virtualinvoke $r2.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r1 = staticinvoke <com.sleepycat.je.tree.LN: com.sleepycat.je.tree.LN makeLN(com.sleepycat.je.dbi.EnvironmentImpl,com.sleepycat.je.DatabaseEntry)>($r3, data);

     label2:
        ln = $r1;

        $r4 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r5 = virtualinvoke $r4.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.log.ReplicationContext getRepContext()>();

        $r6 = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult putNotify(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.tree.LN,com.sleepycat.je.CacheMode,com.sleepycat.je.dbi.ExpirationInfo,com.sleepycat.je.dbi.PutMode,com.sleepycat.je.log.ReplicationContext)>(key, data, ln, cacheMode, expInfo, putMode, $r5);

        return $r6;
    }

    private com.sleepycat.je.OperationResult putNotify(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.tree.LN, com.sleepycat.je.CacheMode, com.sleepycat.je.dbi.ExpirationInfo, com.sleepycat.je.dbi.PutMode, com.sleepycat.je.log.ReplicationContext)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry data, key#1, replaceKey#27, $r13, oldData#41, newData#43, $r16, $r17, $r20;
        com.sleepycat.je.tree.LN ln;
        com.sleepycat.je.CacheMode cacheMode;
        com.sleepycat.je.dbi.PutMode putMode, $r12, $r22;
        com.sleepycat.je.log.ReplicationContext repContext;
        boolean hasUserTriggers, hasAssociations, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.InterruptedException e, $r8;
        com.sleepycat.je.txn.Locker locker;
        java.util.Iterator l17;
        com.sleepycat.je.SecondaryDatabase secDb;
        com.sleepycat.je.OperationResult l16, result#83;
        java.lang.Error E, $r36;
        java.lang.Throwable l19, $r39;
        com.sleepycat.je.dbi.ExpirationInfo expInfo#2, $r21;
        com.sleepycat.je.dbi.DatabaseImpl $r0, $r4, $r10, $r23, $r31, $r32, $r37, $r40;
        java.util.List $r1;
        com.sleepycat.je.Database $r2, $r3, $r18;
        com.sleepycat.je.dbi.EnvironmentImpl $r5, $r11, $r24, $r33, $r38, $r41;
        java.util.concurrent.locks.ReentrantReadWriteLock $r6, $r25, $r34, $r42;
        java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock $r7, $r26, $r35, $r43;
        com.sleepycat.je.ThreadInterruptedException $r9;
        com.sleepycat.je.dbi.CursorImpl $r14, $r28, $r30;
        byte[] $r15, $r27;
        java.util.Collection secondaries#45;
        com.sleepycat.je.SecondaryAssociation $r19;
        int nWrites#114, $i2;
        java.lang.Object $r29;
        long $l0, $l1;

        this := @this: com.sleepycat.je.Cursor;

        key#1 := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        ln := @parameter2: com.sleepycat.je.tree.LN;

        cacheMode := @parameter3: com.sleepycat.je.CacheMode;

        expInfo#2 := @parameter4: com.sleepycat.je.dbi.ExpirationInfo;

        putMode := @parameter5: com.sleepycat.je.dbi.PutMode;

        repContext := @parameter6: com.sleepycat.je.log.ReplicationContext;

        $r0 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r1 = virtualinvoke $r0.<com.sleepycat.je.dbi.DatabaseImpl: java.util.List getTriggers()>();

        if $r1 == null goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        hasUserTriggers = $z0;

        $r2 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.Database dbHandle>;

        if $r2 == null goto label03;

        $r3 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.Database dbHandle>;

        $z1 = virtualinvoke $r3.<com.sleepycat.je.Database: boolean hasSecondaryOrForeignKeyAssociations()>();

        if $z1 == 0 goto label03;

        $z2 = 1;

        goto label04;

     label03:
        $z2 = 0;

     label04:
        hasAssociations = $z2;

        if hasAssociations == 0 goto label08;

     label05:
        $r4 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r5 = virtualinvoke $r4.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r6 = virtualinvoke $r5.<com.sleepycat.je.dbi.EnvironmentImpl: java.util.concurrent.locks.ReentrantReadWriteLock getSecondaryAssociationLock()>();

        $r7 = virtualinvoke $r6.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        virtualinvoke $r7.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lockInterruptibly()>();

     label06:
        goto label08;

     label07:
        $r8 := @caughtexception;

        e = $r8;

        $r9 = new com.sleepycat.je.ThreadInterruptedException;

        $r10 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r11 = virtualinvoke $r10.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        specialinvoke $r9.<com.sleepycat.je.ThreadInterruptedException: void <init>(com.sleepycat.je.dbi.EnvironmentImpl,java.lang.Throwable)>($r11, e);

        throw $r9;

     label08:
        replaceKey#27 = null;

        $r12 = <com.sleepycat.je.dbi.PutMode: com.sleepycat.je.dbi.PutMode CURRENT>;

        if putMode != $r12 goto label11;

        if key#1 != null goto label10;

        if hasAssociations != 0 goto label09;

        if hasUserTriggers == 0 goto label11;

     label09:
        $r13 = new com.sleepycat.je.DatabaseEntry;

        specialinvoke $r13.<com.sleepycat.je.DatabaseEntry: void <init>()>();

        key#1 = $r13;

        $r14 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        $r15 = virtualinvoke $r14.<com.sleepycat.je.dbi.CursorImpl: byte[] getCurrentKey()>();

        virtualinvoke key#1.<com.sleepycat.je.DatabaseEntry: void setData(byte[])>($r15);

        goto label11;

     label10:
        replaceKey#27 = key#1;

     label11:
        oldData#41 = null;

        newData#43 = null;

        secondaries#45 = null;

        if hasAssociations != 0 goto label12;

        if hasUserTriggers == 0 goto label16;

     label12:
        $z3 = virtualinvoke data.<com.sleepycat.je.DatabaseEntry: boolean getPartial()>();

        if $z3 == 0 goto label13;

        $r16 = new com.sleepycat.je.DatabaseEntry;

        specialinvoke $r16.<com.sleepycat.je.DatabaseEntry: void <init>()>();

        newData#43 = $r16;

     label13:
        if hasUserTriggers == 0 goto label14;

        $r17 = new com.sleepycat.je.DatabaseEntry;

        specialinvoke $r17.<com.sleepycat.je.DatabaseEntry: void <init>()>();

        oldData#41 = $r17;

     label14:
        if hasAssociations == 0 goto label16;

        $r18 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.Database dbHandle>;

        $r19 = $r18.<com.sleepycat.je.Database: com.sleepycat.je.SecondaryAssociation secAssoc>;

        secondaries#45 = interfaceinvoke $r19.<com.sleepycat.je.SecondaryAssociation: java.util.Collection getSecondaries(com.sleepycat.je.DatabaseEntry)>(key#1);

        if oldData#41 != null goto label15;

        $z4 = staticinvoke <com.sleepycat.je.SecondaryDatabase: boolean needOldDataForUpdate(java.util.Collection)>(secondaries#45);

        if $z4 == 0 goto label15;

        $r20 = new com.sleepycat.je.DatabaseEntry;

        specialinvoke $r20.<com.sleepycat.je.DatabaseEntry: void <init>()>();

        oldData#41 = $r20;

     label15:
        if expInfo#2 != null goto label16;

        $r21 = new com.sleepycat.je.dbi.ExpirationInfo;

        specialinvoke $r21.<com.sleepycat.je.dbi.ExpirationInfo: void <init>(int,boolean,boolean)>(0, 0, 0);

        expInfo#2 = $r21;

     label16:
        $r22 = <com.sleepycat.je.dbi.PutMode: com.sleepycat.je.dbi.PutMode CURRENT>;

        if putMode != $r22 goto label17;

        result#83 = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult putCurrentNoNotify(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.CacheMode,com.sleepycat.je.dbi.ExpirationInfo,com.sleepycat.je.log.ReplicationContext)>(replaceKey#27, data, oldData#41, newData#43, cacheMode, expInfo#2, repContext);

        goto label18;

     label17:
        result#83 = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult putNoNotify(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.tree.LN,com.sleepycat.je.CacheMode,com.sleepycat.je.dbi.ExpirationInfo,com.sleepycat.je.dbi.PutMode,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.log.ReplicationContext)>(key#1, data, ln, cacheMode, expInfo#2, putMode, oldData#41, newData#43, repContext);

     label18:
        if result#83 != null goto label21;

     label19:
        if hasAssociations == 0 goto label20;

        $r23 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r24 = virtualinvoke $r23.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r25 = virtualinvoke $r24.<com.sleepycat.je.dbi.EnvironmentImpl: java.util.concurrent.locks.ReentrantReadWriteLock getSecondaryAssociationLock()>();

        $r26 = virtualinvoke $r25.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        virtualinvoke $r26.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>();

     label20:
        return null;

     label21:
        if oldData#41 == null goto label22;

        $r27 = virtualinvoke oldData#41.<com.sleepycat.je.DatabaseEntry: byte[] getData()>();

        if $r27 != null goto label22;

        oldData#41 = null;

     label22:
        if newData#43 != null goto label23;

        newData#43 = data;

     label23:
        $r28 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        locker = virtualinvoke $r28.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.txn.Locker getLocker()>();

        if secondaries#45 == null goto label28;

        nWrites#114 = 0;

        l17 = interfaceinvoke secondaries#45.<java.util.Collection: java.util.Iterator iterator()>();

     label24:
        $z5 = interfaceinvoke l17.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label27;

        $r29 = interfaceinvoke l17.<java.util.Iterator: java.lang.Object next()>();

        secDb = (com.sleepycat.je.SecondaryDatabase) $r29;

        $z6 = virtualinvoke result#83.<com.sleepycat.je.OperationResult: boolean isUpdate()>();

        if $z6 == 0 goto label25;

        $z7 = virtualinvoke secDb.<com.sleepycat.je.SecondaryDatabase: boolean updateMayChangeSecondary()>();

        if $z7 == 0 goto label26;

     label25:
        $l0 = virtualinvoke result#83.<com.sleepycat.je.OperationResult: long getExpirationTime()>();

        $z8 = virtualinvoke expInfo#2.<com.sleepycat.je.dbi.ExpirationInfo: boolean getExpirationUpdated()>();

        $l1 = virtualinvoke expInfo#2.<com.sleepycat.je.dbi.ExpirationInfo: long getOldExpirationTime()>();

        $i2 = virtualinvoke secDb.<com.sleepycat.je.SecondaryDatabase: int updateSecondary(com.sleepycat.je.txn.Locker,com.sleepycat.je.Cursor,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.CacheMode,long,boolean,long)>(locker, null, key#1, oldData#41, newData#43, cacheMode, $l0, $z8, $l1);

        nWrites#114 = nWrites#114 + $i2;

     label26:
        goto label24;

     label27:
        $r30 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        virtualinvoke $r30.<com.sleepycat.je.dbi.CursorImpl: void setNSecondaryWrites(int)>(nWrites#114);

     label28:
        if hasUserTriggers == 0 goto label29;

        $r31 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        staticinvoke <com.sleepycat.je.dbi.TriggerManager: void runPutTriggers(com.sleepycat.je.txn.Locker,com.sleepycat.je.dbi.DatabaseImpl,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry)>(locker, $r31, key#1, oldData#41, newData#43);

     label29:
        l16 = result#83;

     label30:
        if hasAssociations == 0 goto label31;

        $r32 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r33 = virtualinvoke $r32.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r34 = virtualinvoke $r33.<com.sleepycat.je.dbi.EnvironmentImpl: java.util.concurrent.locks.ReentrantReadWriteLock getSecondaryAssociationLock()>();

        $r35 = virtualinvoke $r34.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        virtualinvoke $r35.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>();

     label31:
        return l16;

     label32:
        $r36 := @caughtexception;

     label33:
        E = $r36;

        $r37 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r38 = virtualinvoke $r37.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r38.<com.sleepycat.je.dbi.EnvironmentImpl: void invalidate(java.lang.Error)>(E);

        throw E;

     label34:
        $r39 := @caughtexception;

        l19 = $r39;

     label35:
        if hasAssociations == 0 goto label36;

        $r40 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r41 = virtualinvoke $r40.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r42 = virtualinvoke $r41.<com.sleepycat.je.dbi.EnvironmentImpl: java.util.concurrent.locks.ReentrantReadWriteLock getSecondaryAssociationLock()>();

        $r43 = virtualinvoke $r42.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        virtualinvoke $r43.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>();

     label36:
        throw l19;

        catch java.lang.InterruptedException from label05 to label06 with label07;
        catch java.lang.Error from label08 to label19 with label32;
        catch java.lang.Error from label21 to label30 with label32;
        catch java.lang.Throwable from label08 to label19 with label34;
        catch java.lang.Throwable from label21 to label30 with label34;
        catch java.lang.Throwable from label33 to label35 with label34;
    }

    private com.sleepycat.je.OperationResult putCurrentNoNotify(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.CacheMode, com.sleepycat.je.dbi.ExpirationInfo, com.sleepycat.je.log.ReplicationContext)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry key, data, returnOldData, returnNewData;
        com.sleepycat.je.CacheMode cacheMode;
        com.sleepycat.je.dbi.ExpirationInfo expInfo;
        com.sleepycat.je.log.ReplicationContext repContext;
        com.sleepycat.je.OperationResult result;
        boolean $z0;
        java.lang.AssertionError $r0;
        com.sleepycat.je.dbi.CursorImpl $r1;
        com.sleepycat.je.dbi.DatabaseImpl $r2, $r4;
        com.sleepycat.je.dbi.EnvironmentImpl $r3;

        this := @this: com.sleepycat.je.Cursor;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        returnOldData := @parameter2: com.sleepycat.je.DatabaseEntry;

        returnNewData := @parameter3: com.sleepycat.je.DatabaseEntry;

        cacheMode := @parameter4: com.sleepycat.je.CacheMode;

        expInfo := @parameter5: com.sleepycat.je.dbi.ExpirationInfo;

        repContext := @parameter6: com.sleepycat.je.log.ReplicationContext;

        $z0 = <com.sleepycat.je.Cursor: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if data != null goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        specialinvoke this.<com.sleepycat.je.Cursor: void beginUseExistingCursor(com.sleepycat.je.CacheMode)>(cacheMode);

        $r1 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        result = virtualinvoke $r1.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.OperationResult updateCurrentRecord(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.dbi.ExpirationInfo,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.log.ReplicationContext)>(key, data, expInfo, returnOldData, returnNewData, repContext);

        if result == null goto label2;

        $r2 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r3 = virtualinvoke $r2.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r4 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        virtualinvoke $r3.<com.sleepycat.je.dbi.EnvironmentImpl: void incUpdateOps(com.sleepycat.je.dbi.DatabaseImpl)>($r4);

     label2:
        specialinvoke this.<com.sleepycat.je.Cursor: void endUseExistingCursor()>();

        return result;
    }

    private com.sleepycat.je.OperationResult putNoNotify(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.tree.LN, com.sleepycat.je.CacheMode, com.sleepycat.je.dbi.ExpirationInfo, com.sleepycat.je.dbi.PutMode, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.log.ReplicationContext)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry key, data, returnOldData, returnNewData;
        com.sleepycat.je.tree.LN ln;
        com.sleepycat.je.CacheMode cacheMode;
        com.sleepycat.je.dbi.ExpirationInfo expInfo;
        com.sleepycat.je.dbi.PutMode putMode, $r3, $r10;
        com.sleepycat.je.log.ReplicationContext repContext;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl, $r18, $r24;
        com.sleepycat.je.txn.Locker cursorLocker;
        com.sleepycat.je.OperationResult l17, result#25;
        java.lang.Exception e, e, $r16, $r22;
        java.lang.Throwable l19, $r19;
        boolean $z0, $z1, $z2, $z3, success#27, $z4, $z5, $z6, $z7;
        java.lang.AssertionError $r0, $r1, $r2, $r4;
        com.sleepycat.je.txn.BuddyLocker nextKeyLocker#19;
        com.sleepycat.je.dbi.CursorImpl nextKeyCursor#21, dup#23, $r6, $r8, $r15, $r21;
        com.sleepycat.je.dbi.DatabaseImpl $r5, $r9, $r11, $r12, $r13, $r17, $r23;
        com.sleepycat.je.txn.TxnManager $r7;

        this := @this: com.sleepycat.je.Cursor;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        ln := @parameter2: com.sleepycat.je.tree.LN;

        cacheMode := @parameter3: com.sleepycat.je.CacheMode;

        expInfo := @parameter4: com.sleepycat.je.dbi.ExpirationInfo;

        putMode := @parameter5: com.sleepycat.je.dbi.PutMode;

        returnOldData := @parameter6: com.sleepycat.je.DatabaseEntry;

        returnNewData := @parameter7: com.sleepycat.je.DatabaseEntry;

        repContext := @parameter8: com.sleepycat.je.log.ReplicationContext;

        $z0 = <com.sleepycat.je.Cursor: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        if key != null goto label01;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label01:
        $z1 = <com.sleepycat.je.Cursor: boolean $assertionsDisabled>;

        if $z1 != 0 goto label02;

        if ln != null goto label02;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label02:
        $z2 = <com.sleepycat.je.Cursor: boolean $assertionsDisabled>;

        if $z2 != 0 goto label03;

        if putMode != null goto label03;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label03:
        $z3 = <com.sleepycat.je.Cursor: boolean $assertionsDisabled>;

        if $z3 != 0 goto label04;

        $r3 = <com.sleepycat.je.dbi.PutMode: com.sleepycat.je.dbi.PutMode CURRENT>;

        if putMode != $r3 goto label04;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label04:
        nextKeyLocker#19 = null;

        nextKeyCursor#21 = null;

        dup#23 = null;

        result#25 = null;

        success#27 = 0;

     label05:
        $r5 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        envImpl = virtualinvoke $r5.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r6 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        cursorLocker = virtualinvoke $r6.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.txn.Locker getLocker()>();

        $r7 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.txn.TxnManager getTxnManager()>();

        $z4 = virtualinvoke $r7.<com.sleepycat.je.txn.TxnManager: boolean areOtherSerializableTransactionsActive(com.sleepycat.je.txn.Locker)>(cursorLocker);

        if $z4 == 0 goto label06;

        nextKeyLocker#19 = staticinvoke <com.sleepycat.je.txn.BuddyLocker: com.sleepycat.je.txn.BuddyLocker createBuddyLocker(com.sleepycat.je.dbi.EnvironmentImpl,com.sleepycat.je.txn.Locker)>(envImpl, cursorLocker);

        $r8 = new com.sleepycat.je.dbi.CursorImpl;

        $r9 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        specialinvoke $r8.<com.sleepycat.je.dbi.CursorImpl: void <init>(com.sleepycat.je.dbi.DatabaseImpl,com.sleepycat.je.txn.Locker)>($r9, nextKeyLocker#19);

        nextKeyCursor#21 = $r8;

        virtualinvoke nextKeyCursor#21.<com.sleepycat.je.dbi.CursorImpl: void setAllowEviction(boolean)>(1);

        virtualinvoke nextKeyCursor#21.<com.sleepycat.je.dbi.CursorImpl: void lockNextKeyForInsert(com.sleepycat.je.DatabaseEntry)>(key);

     label06:
        dup#23 = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl beginMoveCursor(boolean,com.sleepycat.je.CacheMode)>(0, cacheMode);

        result#25 = virtualinvoke dup#23.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.OperationResult insertOrUpdateRecord(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.tree.LN,com.sleepycat.je.dbi.ExpirationInfo,com.sleepycat.je.dbi.PutMode,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.log.ReplicationContext)>(key, data, ln, expInfo, putMode, returnOldData, returnNewData, repContext);

        if result#25 != null goto label07;

        $r10 = <com.sleepycat.je.dbi.PutMode: com.sleepycat.je.dbi.PutMode NO_OVERWRITE>;

        if putMode != $r10 goto label09;

        $r11 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: void incInsertFailOps(com.sleepycat.je.dbi.DatabaseImpl)>($r11);

        goto label09;

     label07:
        $z5 = virtualinvoke result#25.<com.sleepycat.je.OperationResult: boolean isUpdate()>();

        if $z5 != 0 goto label08;

        $r12 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: void incInsertOps(com.sleepycat.je.dbi.DatabaseImpl)>($r12);

        goto label09;

     label08:
        $r13 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: void incUpdateOps(com.sleepycat.je.dbi.DatabaseImpl)>($r13);

     label09:
        success#27 = 1;

        l17 = result#25;

     label10:
        if dup#23 == null goto label13;

        $r15 = dup#23;

        if result#25 == null goto label11;

        $z6 = 1;

        goto label12;

     label11:
        $z6 = 0;

     label12:
        specialinvoke this.<com.sleepycat.je.Cursor: void endMoveCursor(com.sleepycat.je.dbi.CursorImpl,boolean)>($r15, $z6);

     label13:
        if nextKeyCursor#21 == null goto label14;

        virtualinvoke nextKeyCursor#21.<com.sleepycat.je.dbi.CursorImpl: void close()>();

     label14:
        if nextKeyLocker#19 == null goto label15;

        virtualinvoke nextKeyLocker#19.<com.sleepycat.je.txn.Locker: void operationEnd()>();

     label15:
        goto label18;

     label16:
        $r16 := @caughtexception;

        e = $r16;

        if success#27 == 0 goto label17;

        throw e;

     label17:
        $r17 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r18 = virtualinvoke $r17.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        staticinvoke <com.sleepycat.je.utilint.LoggerUtils: void traceAndLogException(com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r18, "Cursor", "putNoNotify", "", e);

     label18:
        return l17;

     label19:
        $r19 := @caughtexception;

     label20:
        l19 = $r19;

     label21:
        if dup#23 == null goto label24;

        $r21 = dup#23;

        if result#25 == null goto label22;

        $z7 = 1;

        goto label23;

     label22:
        $z7 = 0;

     label23:
        specialinvoke this.<com.sleepycat.je.Cursor: void endMoveCursor(com.sleepycat.je.dbi.CursorImpl,boolean)>($r21, $z7);

     label24:
        if nextKeyCursor#21 == null goto label25;

        virtualinvoke nextKeyCursor#21.<com.sleepycat.je.dbi.CursorImpl: void close()>();

     label25:
        if nextKeyLocker#19 == null goto label26;

        virtualinvoke nextKeyLocker#19.<com.sleepycat.je.txn.Locker: void operationEnd()>();

     label26:
        goto label29;

     label27:
        $r22 := @caughtexception;

        e = $r22;

        if success#27 == 0 goto label28;

        throw e;

     label28:
        $r23 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r24 = virtualinvoke $r23.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        staticinvoke <com.sleepycat.je.utilint.LoggerUtils: void traceAndLogException(com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r24, "Cursor", "putNoNotify", "", e);

     label29:
        throw l19;

        catch java.lang.Exception from label10 to label15 with label16;
        catch java.lang.Throwable from label05 to label10 with label19;
        catch java.lang.Exception from label21 to label26 with label27;
        catch java.lang.Throwable from label20 to label21 with label19;
    }

    private com.sleepycat.je.OperationResult dupsPutOverwrite(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.CacheMode, com.sleepycat.je.dbi.ExpirationInfo)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry key, data, twoPartKey, $r0;
        com.sleepycat.je.CacheMode cacheMode;
        com.sleepycat.je.dbi.ExpirationInfo expInfo;
        com.sleepycat.je.dbi.PutMode $r1;
        com.sleepycat.je.OperationResult $r2;

        this := @this: com.sleepycat.je.Cursor;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        cacheMode := @parameter2: com.sleepycat.je.CacheMode;

        expInfo := @parameter3: com.sleepycat.je.dbi.ExpirationInfo;

        twoPartKey = staticinvoke <com.sleepycat.je.dbi.DupKeyData: com.sleepycat.je.DatabaseEntry combine(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry)>(key, data);

        $r0 = <com.sleepycat.je.Cursor: com.sleepycat.je.DatabaseEntry EMPTY_DUP_DATA>;

        $r1 = <com.sleepycat.je.dbi.PutMode: com.sleepycat.je.dbi.PutMode OVERWRITE>;

        $r2 = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult putNoDups(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.CacheMode,com.sleepycat.je.dbi.ExpirationInfo,com.sleepycat.je.dbi.PutMode)>(twoPartKey, $r0, cacheMode, expInfo, $r1);

        return $r2;
    }

    private com.sleepycat.je.OperationResult dupsPutNoOverwrite(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.CacheMode, com.sleepycat.je.dbi.ExpirationInfo)
    {
        com.sleepycat.je.Cursor this, c;
        com.sleepycat.je.DatabaseEntry key, data, key2, data2, $r0, $r1;
        com.sleepycat.je.CacheMode cacheMode;
        com.sleepycat.je.dbi.ExpirationInfo expInfo;
        java.lang.Throwable l9, l12, l13, l8#9, $r3, l11#31, $r7, l11#56, $r8, l11#75, $r9, l11#88, $r10, $r11, $r12;
        com.sleepycat.je.LockMode $r2, $r6;
        com.sleepycat.je.OperationResult result#20, result#48, result#67, l10#83;
        boolean $z0;
        com.sleepycat.je.dbi.CursorImpl $r4;
        com.sleepycat.je.txn.LockType $r5;

        this := @this: com.sleepycat.je.Cursor;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        cacheMode := @parameter2: com.sleepycat.je.CacheMode;

        expInfo := @parameter3: com.sleepycat.je.dbi.ExpirationInfo;

        $r0 = new com.sleepycat.je.DatabaseEntry;

        specialinvoke $r0.<com.sleepycat.je.DatabaseEntry: void <init>()>();

        key2 = $r0;

        $r1 = new com.sleepycat.je.DatabaseEntry;

        specialinvoke $r1.<com.sleepycat.je.DatabaseEntry: void <init>()>();

        data2 = $r1;

        c = virtualinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.Cursor dup(boolean)>(0);

        l8#9 = null;

     label01:
        virtualinvoke c.<com.sleepycat.je.Cursor: void setNonSticky(boolean)>(1);

        staticinvoke <com.sleepycat.je.Cursor: void setEntry(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry)>(key, key2);

        $r2 = <com.sleepycat.je.LockMode: com.sleepycat.je.LockMode RMW>;

        result#20 = specialinvoke c.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult dupsGetSearchKeyRange(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode)>(key2, data2, $r2, cacheMode);

        if result#20 == null goto label08;

        $z0 = virtualinvoke key.<com.sleepycat.je.DatabaseEntry: boolean equals(java.lang.Object)>(key2);

        if $z0 == 0 goto label08;

     label02:
        if c == null goto label07;

        if null == null goto label06;

     label03:
        virtualinvoke c.<com.sleepycat.je.Cursor: void close()>();

     label04:
        goto label07;

     label05:
        $r3 := @caughtexception;

        l11#31 = $r3;

        virtualinvoke l8#9.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l11#31);

        goto label07;

     label06:
        virtualinvoke c.<com.sleepycat.je.Cursor: void close()>();

     label07:
        return null;

     label08:
        if result#20 != null goto label09;

        $r4 = c.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        $r5 = <com.sleepycat.je.txn.LockType: com.sleepycat.je.txn.LockType WRITE>;

        virtualinvoke $r4.<com.sleepycat.je.dbi.CursorImpl: void lockEof(com.sleepycat.je.txn.LockType)>($r5);

     label09:
        staticinvoke <com.sleepycat.je.Cursor: void setEntry(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry)>(key, key2);

        $r6 = <com.sleepycat.je.LockMode: com.sleepycat.je.LockMode RMW>;

        result#48 = specialinvoke c.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult dupsGetSearchKey(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode)>(key2, data2, $r6, cacheMode);

        if result#48 == null goto label16;

     label10:
        if c == null goto label15;

        if null == null goto label14;

     label11:
        virtualinvoke c.<com.sleepycat.je.Cursor: void close()>();

     label12:
        goto label15;

     label13:
        $r7 := @caughtexception;

        l11#56 = $r7;

        virtualinvoke l8#9.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l11#56);

        goto label15;

     label14:
        virtualinvoke c.<com.sleepycat.je.Cursor: void close()>();

     label15:
        return null;

     label16:
        result#67 = specialinvoke c.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult dupsPutNoDupData(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.CacheMode,com.sleepycat.je.dbi.ExpirationInfo)>(key, data, cacheMode, expInfo);

        if result#67 != null goto label23;

     label17:
        if c == null goto label22;

        if null == null goto label21;

     label18:
        virtualinvoke c.<com.sleepycat.je.Cursor: void close()>();

     label19:
        goto label22;

     label20:
        $r8 := @caughtexception;

        l11#75 = $r8;

        virtualinvoke l8#9.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l11#75);

        goto label22;

     label21:
        virtualinvoke c.<com.sleepycat.je.Cursor: void close()>();

     label22:
        return null;

     label23:
        specialinvoke this.<com.sleepycat.je.Cursor: void swapCursor(com.sleepycat.je.Cursor)>(c);

        l10#83 = result#67;

     label24:
        if c == null goto label29;

        if null == null goto label28;

     label25:
        virtualinvoke c.<com.sleepycat.je.Cursor: void close()>();

     label26:
        goto label29;

     label27:
        $r9 := @caughtexception;

        l11#88 = $r9;

        virtualinvoke l8#9.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l11#88);

        goto label29;

     label28:
        virtualinvoke c.<com.sleepycat.je.Cursor: void close()>();

     label29:
        return l10#83;

     label30:
        $r10 := @caughtexception;

     label31:
        l9 = $r10;

        l8#9 = l9;

        throw l9;

     label32:
        $r11 := @caughtexception;

        l12 = $r11;

     label33:
        if c == null goto label38;

        if l8#9 == null goto label37;

     label34:
        virtualinvoke c.<com.sleepycat.je.Cursor: void close()>();

     label35:
        goto label38;

     label36:
        $r12 := @caughtexception;

        l13 = $r12;

        virtualinvoke l8#9.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l13);

        goto label38;

     label37:
        virtualinvoke c.<com.sleepycat.je.Cursor: void close()>();

     label38:
        throw l12;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label25 to label26 with label27;
        catch java.lang.Throwable from label01 to label02 with label30;
        catch java.lang.Throwable from label08 to label10 with label30;
        catch java.lang.Throwable from label16 to label17 with label30;
        catch java.lang.Throwable from label23 to label24 with label30;
        catch java.lang.Throwable from label01 to label02 with label32;
        catch java.lang.Throwable from label08 to label10 with label32;
        catch java.lang.Throwable from label16 to label17 with label32;
        catch java.lang.Throwable from label23 to label24 with label32;
        catch java.lang.Throwable from label34 to label35 with label36;
        catch java.lang.Throwable from label31 to label33 with label32;
    }

    private com.sleepycat.je.OperationResult dupsPutNoDupData(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.CacheMode, com.sleepycat.je.dbi.ExpirationInfo)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry key, data, twoPartKey, $r0;
        com.sleepycat.je.CacheMode cacheMode;
        com.sleepycat.je.dbi.ExpirationInfo expInfo;
        com.sleepycat.je.dbi.PutMode $r1;
        com.sleepycat.je.OperationResult $r2;

        this := @this: com.sleepycat.je.Cursor;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        cacheMode := @parameter2: com.sleepycat.je.CacheMode;

        expInfo := @parameter3: com.sleepycat.je.dbi.ExpirationInfo;

        twoPartKey = staticinvoke <com.sleepycat.je.dbi.DupKeyData: com.sleepycat.je.DatabaseEntry combine(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry)>(key, data);

        $r0 = <com.sleepycat.je.Cursor: com.sleepycat.je.DatabaseEntry EMPTY_DUP_DATA>;

        $r1 = <com.sleepycat.je.dbi.PutMode: com.sleepycat.je.dbi.PutMode NO_OVERWRITE>;

        $r2 = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult putNoDups(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.CacheMode,com.sleepycat.je.dbi.ExpirationInfo,com.sleepycat.je.dbi.PutMode)>(twoPartKey, $r0, cacheMode, expInfo, $r1);

        return $r2;
    }

    private com.sleepycat.je.OperationResult dupsPutCurrent(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.CacheMode, com.sleepycat.je.dbi.ExpirationInfo)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry newData, oldTwoPartKey, key, newTwoPartKey, $r1, $r4, $r5;
        com.sleepycat.je.CacheMode cacheMode;
        com.sleepycat.je.dbi.ExpirationInfo expInfo;
        com.sleepycat.je.dbi.PutMode $r0;
        com.sleepycat.je.dbi.CursorImpl $r2;
        byte[] $r3;
        com.sleepycat.je.OperationResult $r6;

        this := @this: com.sleepycat.je.Cursor;

        newData := @parameter0: com.sleepycat.je.DatabaseEntry;

        cacheMode := @parameter1: com.sleepycat.je.CacheMode;

        expInfo := @parameter2: com.sleepycat.je.dbi.ExpirationInfo;

        $r1 = new com.sleepycat.je.DatabaseEntry;

        $r2 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        $r3 = virtualinvoke $r2.<com.sleepycat.je.dbi.CursorImpl: byte[] getCurrentKey()>();

        specialinvoke $r1.<com.sleepycat.je.DatabaseEntry: void <init>(byte[])>($r3);

        oldTwoPartKey = $r1;

        $r4 = new com.sleepycat.je.DatabaseEntry;

        specialinvoke $r4.<com.sleepycat.je.DatabaseEntry: void <init>()>();

        key = $r4;

        staticinvoke <com.sleepycat.je.dbi.DupKeyData: void split(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry)>(oldTwoPartKey, key, null);

        newTwoPartKey = staticinvoke <com.sleepycat.je.dbi.DupKeyData: com.sleepycat.je.DatabaseEntry combine(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry)>(key, newData);

        $r5 = <com.sleepycat.je.Cursor: com.sleepycat.je.DatabaseEntry EMPTY_DUP_DATA>;

        $r0 = <com.sleepycat.je.dbi.PutMode: com.sleepycat.je.dbi.PutMode CURRENT>;

        $r6 = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult putNoDups(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.CacheMode,com.sleepycat.je.dbi.ExpirationInfo,com.sleepycat.je.dbi.PutMode)>(newTwoPartKey, $r5, cacheMode, expInfo, $r0);

        return $r6;
    }

    public com.sleepycat.je.OperationStatus delete()
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.OperationResult result;
        com.sleepycat.je.OperationStatus $r0;

        this := @this: com.sleepycat.je.Cursor;

        result = virtualinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult delete(com.sleepycat.je.WriteOptions)>(null);

        if result != null goto label1;

        $r0 = <com.sleepycat.je.OperationStatus: com.sleepycat.je.OperationStatus KEYEMPTY>;

        goto label2;

     label1:
        $r0 = <com.sleepycat.je.OperationStatus: com.sleepycat.je.OperationStatus SUCCESS>;

     label2:
        return $r0;
    }

    void <init>(com.sleepycat.je.Database, com.sleepycat.je.txn.Locker, com.sleepycat.je.CursorConfig)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.Database dbHandle;
        com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        com.sleepycat.je.txn.Locker locker#1, locker#15;
        com.sleepycat.je.CursorConfig cursorConfig#2;
        boolean $z0;

        this := @this: com.sleepycat.je.Cursor;

        dbHandle := @parameter0: com.sleepycat.je.Database;

        locker#1 := @parameter1: com.sleepycat.je.txn.Locker;

        cursorConfig#2 := @parameter2: com.sleepycat.je.CursorConfig;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<com.sleepycat.je.Cursor: boolean nonSticky> = 0;

        if cursorConfig#2 != null goto label1;

        cursorConfig#2 = <com.sleepycat.je.CursorConfig: com.sleepycat.je.CursorConfig DEFAULT>;

     label1:
        dbImpl = virtualinvoke dbHandle.<com.sleepycat.je.Database: com.sleepycat.je.dbi.DatabaseImpl checkOpen()>();

        $z0 = virtualinvoke cursorConfig#2.<com.sleepycat.je.CursorConfig: boolean getReadCommitted()>();

        locker#15 = staticinvoke <com.sleepycat.je.txn.LockerFactory: com.sleepycat.je.txn.Locker getReadableLocker(com.sleepycat.je.Database,com.sleepycat.je.txn.Locker,boolean)>(dbHandle, locker#1, $z0);

        specialinvoke this.<com.sleepycat.je.Cursor: void init(com.sleepycat.je.Database,com.sleepycat.je.dbi.DatabaseImpl,com.sleepycat.je.txn.Locker,com.sleepycat.je.CursorConfig,boolean)>(dbHandle, dbImpl, locker#15, cursorConfig#2, 0);

        return;
    }

    public com.sleepycat.je.OperationStatus putNoOverwrite(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry key, data;
        com.sleepycat.je.Put $r0;
        com.sleepycat.je.OperationResult result;
        com.sleepycat.je.OperationStatus $r1;

        this := @this: com.sleepycat.je.Cursor;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        $r0 = <com.sleepycat.je.Put: com.sleepycat.je.Put NO_OVERWRITE>;

        result = virtualinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult put(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.Put,com.sleepycat.je.WriteOptions)>(key, data, $r0, null);

        if result != null goto label1;

        $r1 = <com.sleepycat.je.OperationStatus: com.sleepycat.je.OperationStatus KEYEXIST>;

        goto label2;

     label1:
        $r1 = <com.sleepycat.je.OperationStatus: com.sleepycat.je.OperationStatus SUCCESS>;

     label2:
        return $r1;
    }

    public com.sleepycat.je.OperationStatus getSearchKey(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.LockMode)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry key, data;
        com.sleepycat.je.LockMode lockMode;
        com.sleepycat.je.Get $r0;
        com.sleepycat.je.OperationResult result;
        com.sleepycat.je.ReadOptions $r1;
        com.sleepycat.je.OperationStatus $r2;

        this := @this: com.sleepycat.je.Cursor;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        lockMode := @parameter2: com.sleepycat.je.LockMode;

        $r0 = <com.sleepycat.je.Get: com.sleepycat.je.Get SEARCH>;

        $r1 = staticinvoke <com.sleepycat.je.DbInternal: com.sleepycat.je.ReadOptions getReadOptions(com.sleepycat.je.LockMode)>(lockMode);

        result = virtualinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult get(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.Get,com.sleepycat.je.ReadOptions)>(key, data, $r0, $r1);

        if result != null goto label1;

        $r2 = <com.sleepycat.je.OperationStatus: com.sleepycat.je.OperationStatus NOTFOUND>;

        goto label2;

     label1:
        $r2 = <com.sleepycat.je.OperationStatus: com.sleepycat.je.OperationStatus SUCCESS>;

     label2:
        return $r2;
    }

    com.sleepycat.je.dbi.CursorImpl getCursorImpl()
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.dbi.CursorImpl $r0;

        this := @this: com.sleepycat.je.Cursor;

        $r0 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        return $r0;
    }

    boolean readPrimaryAfterGet(com.sleepycat.je.Database, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.LockMode, boolean, boolean)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.Database priDb, $r11;
        com.sleepycat.je.DatabaseEntry key, pKey, data#1, copyToPartialEntry#26, $r3;
        com.sleepycat.je.LockMode lockMode, $r7;
        boolean secDirtyRead, lockPrimaryOnly, priDirtyRead, dirtyReadAll, $z0, $z1, $z2, $z3, $z4, $z5, $z6, l15#82, $z7, l15#103, l15#117;
        com.sleepycat.je.dbi.DatabaseImpl priDbImpl;
        com.sleepycat.je.dbi.CursorImpl priCursor, $r4, $r5, $r10, $r12, $r14, $r17;
        com.sleepycat.je.txn.LockType priLockType;
        java.lang.Throwable l16, $r9, l15#64, $r19;
        java.lang.AssertionError $r0, $r1;
        int $i0;
        byte[] $r2, $r16;
        com.sleepycat.je.txn.Locker $r6, $r13;
        com.sleepycat.je.dbi.CursorImpl$LockStanding priLockStanding#53;
        com.sleepycat.je.OperationResult $r8;
        long $l1;
        com.sleepycat.je.SecondaryIntegrityException $r15;
        com.sleepycat.je.dbi.EnvironmentImpl $r18;

        this := @this: com.sleepycat.je.Cursor;

        priDb := @parameter0: com.sleepycat.je.Database;

        key := @parameter1: com.sleepycat.je.DatabaseEntry;

        pKey := @parameter2: com.sleepycat.je.DatabaseEntry;

        data#1 := @parameter3: com.sleepycat.je.DatabaseEntry;

        lockMode := @parameter4: com.sleepycat.je.LockMode;

        secDirtyRead := @parameter5: boolean;

        lockPrimaryOnly := @parameter6: boolean;

        priDirtyRead = virtualinvoke this.<com.sleepycat.je.Cursor: boolean isReadUncommittedMode(com.sleepycat.je.LockMode)>(lockMode);

        priDbImpl = virtualinvoke priDb.<com.sleepycat.je.Database: com.sleepycat.je.dbi.DatabaseImpl getDbImpl()>();

        if lockPrimaryOnly == 0 goto label02;

        $z0 = <com.sleepycat.je.Cursor: boolean $assertionsDisabled>;

        if $z0 != 0 goto label03;

        if secDirtyRead == 0 goto label01;

        if priDirtyRead == 0 goto label03;

     label01:
        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label02:
        $z1 = <com.sleepycat.je.Cursor: boolean $assertionsDisabled>;

        if $z1 != 0 goto label03;

        if secDirtyRead == priDirtyRead goto label03;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label03:
        $z2 = virtualinvoke data#1.<com.sleepycat.je.DatabaseEntry: boolean getPartial()>();

        if $z2 == 0 goto label04;

        $i0 = virtualinvoke data#1.<com.sleepycat.je.DatabaseEntry: int getPartialLength()>();

        if $i0 != 0 goto label04;

        $r2 = <com.sleepycat.je.log.LogUtils: byte[] ZERO_LENGTH_BYTE_ARRAY>;

        virtualinvoke data#1.<com.sleepycat.je.DatabaseEntry: void setData(byte[])>($r2);

        return 1;

     label04:
        copyToPartialEntry#26 = null;

        if priDirtyRead == 0 goto label05;

        $z3 = virtualinvoke data#1.<com.sleepycat.je.DatabaseEntry: boolean getPartial()>();

        if $z3 == 0 goto label05;

        copyToPartialEntry#26 = data#1;

        $r3 = new com.sleepycat.je.DatabaseEntry;

        specialinvoke $r3.<com.sleepycat.je.DatabaseEntry: void <init>()>();

        data#1 = $r3;

     label05:
        $r4 = new com.sleepycat.je.dbi.CursorImpl;

        $r5 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        $r6 = virtualinvoke $r5.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.txn.Locker getLocker()>();

        specialinvoke $r4.<com.sleepycat.je.dbi.CursorImpl: void <init>(com.sleepycat.je.dbi.DatabaseImpl,com.sleepycat.je.txn.Locker,boolean,boolean)>(priDbImpl, $r6, 1, 0);

        priCursor = $r4;

     label06:
        priLockType = specialinvoke this.<com.sleepycat.je.Cursor: com.sleepycat.je.txn.LockType getLockType(com.sleepycat.je.LockMode,boolean)>(lockMode, 0);

        $r7 = <com.sleepycat.je.LockMode: com.sleepycat.je.LockMode READ_UNCOMMITTED_ALL>;

        if lockMode != $r7 goto label07;

        $z4 = 1;

        goto label08;

     label07:
        $z4 = 0;

     label08:
        dirtyReadAll = $z4;

        priLockStanding#53 = virtualinvoke priCursor.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.CursorImpl$LockStanding searchExact(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.txn.LockType,boolean,boolean)>(pKey, priLockType, dirtyReadAll, 1);

     label09:
        if priLockStanding#53 == null goto label10;

        $r8 = virtualinvoke priCursor.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.OperationResult getCurrent(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry)>(null, data#1);

        if $r8 != null goto label10;

        virtualinvoke priCursor.<com.sleepycat.je.dbi.CursorImpl: void revertLock(com.sleepycat.je.dbi.CursorImpl$LockStanding)>(priLockStanding#53);

        priLockStanding#53 = null;

     label10:
        virtualinvoke priCursor.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        goto label14;

     label11:
        $r9 := @caughtexception;

     label12:
        l15#64 = $r9;

     label13:
        virtualinvoke priCursor.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        throw l15#64;

     label14:
        if priLockStanding#53 == null goto label15;

        if lockPrimaryOnly == 0 goto label15;

        $z5 = specialinvoke this.<com.sleepycat.je.Cursor: boolean ensureReferenceToPrimary(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.txn.LockType)>(pKey, priLockType);

        if $z5 != 0 goto label15;

        virtualinvoke priCursor.<com.sleepycat.je.dbi.CursorImpl: void revertLock(com.sleepycat.je.dbi.CursorImpl$LockStanding)>(priLockStanding#53);

        priLockStanding#53 = null;

     label15:
        if priLockStanding#53 != null goto label19;

        if secDirtyRead != 0 goto label16;

        $r10 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        $z6 = virtualinvoke $r10.<com.sleepycat.je.dbi.CursorImpl: boolean isProbablyExpired()>();

        if $z6 == 0 goto label18;

     label16:
        l15#82 = 0;

     label17:
        virtualinvoke priCursor.<com.sleepycat.je.dbi.CursorImpl: void close()>();

        return l15#82;

     label18:
        $r11 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.Database dbHandle>;

        $r12 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        $r13 = virtualinvoke $r12.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.txn.Locker getLocker()>();

        $r14 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        $l1 = virtualinvoke $r14.<com.sleepycat.je.dbi.CursorImpl: long getExpirationTime()>();

        $r15 = virtualinvoke $r11.<com.sleepycat.je.Database: com.sleepycat.je.SecondaryIntegrityException secondaryRefersToMissingPrimaryKey(com.sleepycat.je.txn.Locker,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,long)>($r13, key, pKey, $l1);

        throw $r15;

     label19:
        if priDirtyRead == 0 goto label21;

        $z7 = virtualinvoke this.<com.sleepycat.je.Cursor: boolean checkForPrimaryUpdate(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry)>(key, pKey, data#1);

        if $z7 == 0 goto label21;

        l15#103 = 0;

     label20:
        virtualinvoke priCursor.<com.sleepycat.je.dbi.CursorImpl: void close()>();

        return l15#103;

     label21:
        if copyToPartialEntry#26 == null goto label22;

        $r16 = virtualinvoke data#1.<com.sleepycat.je.DatabaseEntry: byte[] getData()>();

        staticinvoke <com.sleepycat.je.tree.LN: void setEntry(com.sleepycat.je.DatabaseEntry,byte[])>(copyToPartialEntry#26, $r16);

     label22:
        $r17 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        virtualinvoke $r17.<com.sleepycat.je.dbi.CursorImpl: void setPriInfo(com.sleepycat.je.dbi.CursorImpl)>(priCursor);

        $r18 = virtualinvoke priDbImpl.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r18.<com.sleepycat.je.dbi.EnvironmentImpl: void incSearchOps(com.sleepycat.je.dbi.DatabaseImpl)>(priDbImpl);

        l15#117 = 1;

     label23:
        virtualinvoke priCursor.<com.sleepycat.je.dbi.CursorImpl: void close()>();

        return l15#117;

     label24:
        $r19 := @caughtexception;

     label25:
        l16 = $r19;

     label26:
        virtualinvoke priCursor.<com.sleepycat.je.dbi.CursorImpl: void close()>();

        throw l16;

        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label06 to label17 with label24;
        catch java.lang.Throwable from label18 to label20 with label24;
        catch java.lang.Throwable from label21 to label23 with label24;
        catch java.lang.Throwable from label25 to label26 with label24;
    }

    private boolean ensureReferenceToPrimary(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.txn.LockType)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.DatabaseEntry matchPriKey, secData, $r13;
        com.sleepycat.je.txn.LockType lockType, $r0, $r15;
        com.sleepycat.je.tree.BIN bin;
        int index, $i0, $i1;
        boolean l5, $z0, $z1, $z2, $z3, $z4, $z5;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        long expirationTime, $l2;
        java.lang.Throwable l8, $r10;
        java.lang.AssertionError $r1;
        com.sleepycat.je.dbi.CursorImpl $r2, $r3, $r4, $r5, $r7, $r9, $r11, $r12, $r14;
        com.sleepycat.je.dbi.DatabaseImpl $r6;
        com.sleepycat.je.OperationResult $r16;

        this := @this: com.sleepycat.je.Cursor;

        matchPriKey := @parameter0: com.sleepycat.je.DatabaseEntry;

        lockType := @parameter1: com.sleepycat.je.txn.LockType;

        $z0 = <com.sleepycat.je.Cursor: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $r0 = <com.sleepycat.je.txn.LockType: com.sleepycat.je.txn.LockType NONE>;

        if lockType != $r0 goto label01;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label01:
        $r2 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        virtualinvoke $r2.<com.sleepycat.je.dbi.CursorImpl: void latchBIN()>();

     label02:
        $r3 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        bin = virtualinvoke $r3.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN getBIN()>();

        $r4 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        index = virtualinvoke $r4.<com.sleepycat.je.dbi.CursorImpl: int getIndex()>();

        $z1 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean isDeleted(int)>(index);

        if $z1 == 0 goto label04;

        l5 = 0;

     label03:
        $r5 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        virtualinvoke $r5.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        return l5;

     label04:
        $r6 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        envImpl = virtualinvoke $r6.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $i0 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: int getExpiration(int)>(index);

        $z2 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean isExpirationInHours()>();

        expirationTime = staticinvoke <com.sleepycat.je.dbi.TTL: long expirationToSystemTime(int,boolean)>($i0, $z2);

        $i1 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: int getTtlMaxTxnTime()>();

        $l2 = (long) $i1;

        $z3 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: boolean expiresWithin(long,long)>(expirationTime, $l2);

        if $z3 == 0 goto label05;

        $r7 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        virtualinvoke $r7.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.CursorImpl$LockStanding lockLN(com.sleepycat.je.txn.LockType)>(lockType);

     label05:
        $r9 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        virtualinvoke $r9.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        goto label09;

     label06:
        $r10 := @caughtexception;

     label07:
        l8 = $r10;

     label08:
        $r11 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        virtualinvoke $r11.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        throw l8;

     label09:
        $r12 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        $z4 = virtualinvoke $r12.<com.sleepycat.je.dbi.CursorImpl: boolean hasDuplicates()>();

        if $z4 != 0 goto label11;

        $r13 = new com.sleepycat.je.DatabaseEntry;

        specialinvoke $r13.<com.sleepycat.je.DatabaseEntry: void <init>()>();

        secData = $r13;

        $r14 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.CursorImpl cursorImpl>;

        $r15 = <com.sleepycat.je.txn.LockType: com.sleepycat.je.txn.LockType NONE>;

        $r16 = virtualinvoke $r14.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.OperationResult lockAndGetCurrent(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.txn.LockType)>(null, secData, $r15);

        if $r16 != null goto label10;

        return 0;

     label10:
        $z5 = virtualinvoke secData.<com.sleepycat.je.DatabaseEntry: boolean equals(java.lang.Object)>(matchPriKey);

        if $z5 != 0 goto label11;

        return 0;

     label11:
        return 1;

        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
    }

    void <init>(com.sleepycat.je.Database, com.sleepycat.je.Transaction, com.sleepycat.je.CursorConfig)
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.Database dbHandle;
        com.sleepycat.je.Transaction txn;
        com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        com.sleepycat.je.txn.Locker locker;
        com.sleepycat.je.CursorConfig cursorConfig#1;
        boolean $z0;

        this := @this: com.sleepycat.je.Cursor;

        dbHandle := @parameter0: com.sleepycat.je.Database;

        txn := @parameter1: com.sleepycat.je.Transaction;

        cursorConfig#1 := @parameter2: com.sleepycat.je.CursorConfig;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<com.sleepycat.je.Cursor: boolean nonSticky> = 0;

        if cursorConfig#1 != null goto label1;

        cursorConfig#1 = <com.sleepycat.je.CursorConfig: com.sleepycat.je.CursorConfig DEFAULT>;

     label1:
        dbImpl = virtualinvoke dbHandle.<com.sleepycat.je.Database: com.sleepycat.je.dbi.DatabaseImpl checkOpen()>();

        $z0 = virtualinvoke cursorConfig#1.<com.sleepycat.je.CursorConfig: boolean getReadCommitted()>();

        locker = staticinvoke <com.sleepycat.je.txn.LockerFactory: com.sleepycat.je.txn.Locker getReadableLocker(com.sleepycat.je.Database,com.sleepycat.je.Transaction,boolean)>(dbHandle, txn, $z0);

        specialinvoke this.<com.sleepycat.je.Cursor: void init(com.sleepycat.je.Database,com.sleepycat.je.dbi.DatabaseImpl,com.sleepycat.je.txn.Locker,com.sleepycat.je.CursorConfig,boolean)>(dbHandle, dbImpl, locker, cursorConfig#1, 0);

        return;
    }

    com.sleepycat.je.dbi.DatabaseImpl getDatabaseImpl()
    {
        com.sleepycat.je.Cursor this;
        com.sleepycat.je.dbi.DatabaseImpl $r0;

        this := @this: com.sleepycat.je.Cursor;

        $r0 = this.<com.sleepycat.je.Cursor: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        return $r0;
    }


