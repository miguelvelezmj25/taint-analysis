    static void <clinit>()
    {
        java.lang.Class l1, l2, $r4, $r6, l0#36;
        int l3, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i12, $i14, $i15, $i16, $i17;
        java.lang.Runtime $r0;
        java.io.ObjectStreamField[] $r1;
        java.io.ObjectStreamField $r2, $r3, $r5;
        sun.misc.Unsafe $r7, $r8, $r10, $r12, $r14, $r16, $r18, $r19;
        java.lang.reflect.Field $r9, $r11, $r13, $r15, $r17;
        long $l7, $l8, $l9, $l10, $l11, $l13;
        java.lang.Error $r20, $r22;
        java.lang.Exception $r21, l0#84;

        <java.util.concurrent.ConcurrentHashMap: int RESIZE_STAMP_BITS> = 16;

        $i0 = <java.util.concurrent.ConcurrentHashMap: int RESIZE_STAMP_BITS>;

        $i1 = 32 - $i0;

        $i2 = 1 << $i1;

        $i3 = $i2 - 1;

        <java.util.concurrent.ConcurrentHashMap: int MAX_RESIZERS> = $i3;

        $i4 = <java.util.concurrent.ConcurrentHashMap: int RESIZE_STAMP_BITS>;

        $i5 = 32 - $i4;

        <java.util.concurrent.ConcurrentHashMap: int RESIZE_STAMP_SHIFT> = $i5;

        $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $i6 = virtualinvoke $r0.<java.lang.Runtime: int availableProcessors()>();

        <java.util.concurrent.ConcurrentHashMap: int NCPU> = $i6;

        $r1 = newarray (java.io.ObjectStreamField)[3];

        $r2 = new java.io.ObjectStreamField;

        specialinvoke $r2.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("segments", class "[Ljava/util/concurrent/ConcurrentHashMap$Segment;");

        $r1[0] = $r2;

        $r3 = new java.io.ObjectStreamField;

        $r4 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r3.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("segmentMask", $r4);

        $r1[1] = $r3;

        $r5 = new java.io.ObjectStreamField;

        $r6 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r5.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("segmentShift", $r6);

        $r1[2] = $r5;

        <java.util.concurrent.ConcurrentHashMap: java.io.ObjectStreamField[] serialPersistentFields> = $r1;

     label1:
        $r7 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U> = $r7;

        l0#36 = class "java/util/concurrent/ConcurrentHashMap";

        $r8 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $r9 = virtualinvoke l0#36.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("sizeCtl");

        $l7 = virtualinvoke $r8.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r9);

        <java.util.concurrent.ConcurrentHashMap: long SIZECTL> = $l7;

        $r10 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $r11 = virtualinvoke l0#36.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("transferIndex");

        $l8 = virtualinvoke $r10.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r11);

        <java.util.concurrent.ConcurrentHashMap: long TRANSFERINDEX> = $l8;

        $r12 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $r13 = virtualinvoke l0#36.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("baseCount");

        $l9 = virtualinvoke $r12.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r13);

        <java.util.concurrent.ConcurrentHashMap: long BASECOUNT> = $l9;

        $r14 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $r15 = virtualinvoke l0#36.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("cellsBusy");

        $l10 = virtualinvoke $r14.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r15);

        <java.util.concurrent.ConcurrentHashMap: long CELLSBUSY> = $l10;

        l1 = class "java/util/concurrent/ConcurrentHashMap$CounterCell";

        $r16 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $r17 = virtualinvoke l1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("value");

        $l11 = virtualinvoke $r16.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r17);

        <java.util.concurrent.ConcurrentHashMap: long CELLVALUE> = $l11;

        l2 = class "[Ljava/util/concurrent/ConcurrentHashMap$Node;";

        $r18 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $i12 = virtualinvoke $r18.<sun.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(l2);

        $l13 = (long) $i12;

        <java.util.concurrent.ConcurrentHashMap: long ABASE> = $l13;

        $r19 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        l3 = virtualinvoke $r19.<sun.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(l2);

        $i14 = l3 - 1;

        $i15 = l3 & $i14;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i15);

        if $i15 == 0 goto label2;

        $r20 = new java.lang.Error;

        specialinvoke $r20.<java.lang.Error: void <init>(java.lang.String)>("data type scale not a power of two");

        throw $r20;

     label2:
        $i16 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(l3);

        $i17 = 31 - $i16;

        <java.util.concurrent.ConcurrentHashMap: int ASHIFT> = $i17;

     label3:
        goto label5;

     label4:
        $r21 := @caughtexception;

        l0#84 = $r21;

        $r22 = new java.lang.Error;

        specialinvoke $r22.<java.lang.Error: void <init>(java.lang.Throwable)>(l0#84);

        throw $r22;

     label5:
        return;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public void <init>()
    {
        java.util.concurrent.ConcurrentHashMap l0;

        l0 := @this: java.util.concurrent.ConcurrentHashMap;

        specialinvoke l0.<java.util.AbstractMap: void <init>()>();

        return;
    }

    public java.lang.Object putIfAbsent(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap l0;
        java.lang.Object l1, l2, $r0;

        l0 := @this: java.util.concurrent.ConcurrentHashMap;

        l1 := @parameter0: java.lang.Object;

        l2 := @parameter1: java.lang.Object;

        $r0 = virtualinvoke l0.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>(l1, l2, 1);

        return $r0;
    }

    final java.lang.Object putVal(java.lang.Object, java.lang.Object, boolean)
    {
        java.util.concurrent.ConcurrentHashMap l0;
        java.lang.Object l1, l2, l14, l11#45, $r5;
        boolean l3, $z0, $z1, $z2;
        int l4, l8, l9, l10, $i0, l5#9, $i1, $i2, $i3, $i4, $i5;
        java.util.concurrent.ConcurrentHashMap$Node l7, l12, l15, $r1, $r2, $r4, l13#55, $r6, $r7;
        java.lang.Throwable l16, $r10;
        java.lang.NullPointerException $r0;
        java.util.concurrent.ConcurrentHashMap$Node[] l6#12;
        java.util.concurrent.ConcurrentHashMap$TreeBin $r8;
        java.util.concurrent.ConcurrentHashMap$TreeNode $r9, l13#93;

        l0 := @this: java.util.concurrent.ConcurrentHashMap;

        l1 := @parameter0: java.lang.Object;

        l2 := @parameter1: java.lang.Object;

        l3 := @parameter2: boolean;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l1);

        if l1 == null goto label01;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l2);

        if l2 != null goto label02;

     label01:
        $r0 = new java.lang.NullPointerException;

        specialinvoke $r0.<java.lang.NullPointerException: void <init>()>();

        throw $r0;

     label02:
        $i0 = virtualinvoke l1.<java.lang.Object: int hashCode()>();

        l4 = staticinvoke <java.util.concurrent.ConcurrentHashMap: int spread(int)>($i0);

        l5#9 = 0;

        l6#12 = l0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table>;

     label03:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l6#12);

        if l6#12 == null goto label04;

        $i1 = lengthof l6#12;

        l8 = $i1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 != 0 goto label05;

     label04:
        l6#12 = specialinvoke l0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] initTable()>();

        goto label22;

     label05:
        $i2 = l8 - 1;

        $i3 = $i2 & l4;

        l9 = $i3;

        $r1 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node tabAt(java.util.concurrent.ConcurrentHashMap$Node[],int)>(l6#12, $i3);

        l7 = $r1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 != null goto label06;

        $r2 = new java.util.concurrent.ConcurrentHashMap$Node;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap$Node: void <init>(int,java.lang.Object,java.lang.Object,java.util.concurrent.ConcurrentHashMap$Node)>(l4, l1, l2, null);

        $z0 = staticinvoke <java.util.concurrent.ConcurrentHashMap: boolean casTabAt(java.util.concurrent.ConcurrentHashMap$Node[],int,java.util.concurrent.ConcurrentHashMap$Node,java.util.concurrent.ConcurrentHashMap$Node)>(l6#12, l9, null, $r2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label22;

        goto label23;

     label06:
        $i4 = l7.<java.util.concurrent.ConcurrentHashMap$Node: int hash>;

        l10 = $i4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 != -1 goto label07;

        l6#12 = virtualinvoke l0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] helpTransfer(java.util.concurrent.ConcurrentHashMap$Node[],java.util.concurrent.ConcurrentHashMap$Node)>(l6#12, l7);

        goto label22;

     label07:
        l11#45 = null;

        l12 = l7;

        entermonitor l7;

     label08:
        $r4 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node tabAt(java.util.concurrent.ConcurrentHashMap$Node[],int)>(l6#12, l9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l7);

        if $r4 != l7 goto label15;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l10);

        if l10 < 0 goto label14;

        l5#9 = 1;

        l13#55 = l7;

     label09:
        $i5 = l13#55.<java.util.concurrent.ConcurrentHashMap$Node: int hash>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l4);

        if $i5 != l4 goto label11;

        $r5 = l13#55.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object key>;

        l14 = $r5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l1);

        if $r5 == l1 goto label10;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l14);

        if l14 == null goto label11;

        $z1 = virtualinvoke l1.<java.lang.Object: boolean equals(java.lang.Object)>(l14);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label11;

     label10:
        l11#45 = l13#55.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3);

        if l3 != 0 goto label13;

        l13#55.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val> = l2;

        goto label13;

     label11:
        l15 = l13#55;

        $r6 = l13#55.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>;

        l13#55 = $r6;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r6);

        if $r6 != null goto label12;

        $r7 = new java.util.concurrent.ConcurrentHashMap$Node;

        specialinvoke $r7.<java.util.concurrent.ConcurrentHashMap$Node: void <init>(int,java.lang.Object,java.lang.Object,java.util.concurrent.ConcurrentHashMap$Node)>(l4, l1, l2, null);

        l15.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next> = $r7;

        goto label13;

     label12:
        l5#9 = l5#9 + 1;

        goto label09;

     label13:
        goto label15;

     label14:
        $z2 = l7 instanceof java.util.concurrent.ConcurrentHashMap$TreeBin;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label15;

        l5#9 = 2;

        $r8 = (java.util.concurrent.ConcurrentHashMap$TreeBin) l7;

        $r9 = virtualinvoke $r8.<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>(l4, l1, l2);

        l13#93 = $r9;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r9);

        if $r9 == null goto label15;

        l11#45 = l13#93.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3);

        if l3 != 0 goto label15;

        l13#93.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val> = l2;

     label15:
        exitmonitor l12;

     label16:
        goto label20;

     label17:
        $r10 := @caughtexception;

     label18:
        l16 = $r10;

        exitmonitor l12;

     label19:
        throw l16;

     label20:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l5#9);

        if l5#9 == 0 goto label22;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l5#9);

        if l5#9 < 8 goto label21;

        specialinvoke l0.<java.util.concurrent.ConcurrentHashMap: void treeifyBin(java.util.concurrent.ConcurrentHashMap$Node[],int)>(l6#12, l9);

     label21:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l11#45);

        if l11#45 == null goto label23;

        return l11#45;

     label22:
        goto label03;

     label23:
        specialinvoke l0.<java.util.concurrent.ConcurrentHashMap: void addCount(long,int)>(1L, l5#9);

        return null;

        catch java.lang.Throwable from label08 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    static final java.util.concurrent.ConcurrentHashMap$Node tabAt(java.util.concurrent.ConcurrentHashMap$Node[], int)
    {
        java.util.concurrent.ConcurrentHashMap$Node[] l0;
        int l1, $i1;
        sun.misc.Unsafe $r0;
        long $l0, $l2, $l3, $l4;
        java.lang.Object $r1;
        java.util.concurrent.ConcurrentHashMap$Node $r2;

        l0 := @parameter0: java.util.concurrent.ConcurrentHashMap$Node[];

        l1 := @parameter1: int;

        $r0 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l0 = (long) l1;

        $i1 = <java.util.concurrent.ConcurrentHashMap: int ASHIFT>;

        $l2 = $l0 << $i1;

        $l3 = <java.util.concurrent.ConcurrentHashMap: long ABASE>;

        $l4 = $l2 + $l3;

        $r1 = virtualinvoke $r0.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(l0, $l4);

        $r2 = (java.util.concurrent.ConcurrentHashMap$Node) $r1;

        return $r2;
    }

    static final boolean casTabAt(java.util.concurrent.ConcurrentHashMap$Node[], int, java.util.concurrent.ConcurrentHashMap$Node, java.util.concurrent.ConcurrentHashMap$Node)
    {
        java.util.concurrent.ConcurrentHashMap$Node[] l0;
        int l1, $i1;
        java.util.concurrent.ConcurrentHashMap$Node l2, l3;
        sun.misc.Unsafe $r0;
        long $l0, $l2, $l3, $l4;
        boolean $z0;

        l0 := @parameter0: java.util.concurrent.ConcurrentHashMap$Node[];

        l1 := @parameter1: int;

        l2 := @parameter2: java.util.concurrent.ConcurrentHashMap$Node;

        l3 := @parameter3: java.util.concurrent.ConcurrentHashMap$Node;

        $r0 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l0 = (long) l1;

        $i1 = <java.util.concurrent.ConcurrentHashMap: int ASHIFT>;

        $l2 = $l0 << $i1;

        $l3 = <java.util.concurrent.ConcurrentHashMap: long ABASE>;

        $l4 = $l2 + $l3;

        $z0 = virtualinvoke $r0.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(l0, $l4, l2, l3);

        return $z0;
    }

    static final int spread(int)
    {
        int l0, $i0, $i1, $i2;

        l0 := @parameter0: int;

        $i0 = l0 >>> 16;

        $i1 = l0 ^ $i0;

        $i2 = $i1 & 2147483647;

        return $i2;
    }

    private final java.util.concurrent.ConcurrentHashMap$Node[] initTable()
    {
        java.util.concurrent.ConcurrentHashMap l0;
        int l3, $i0, $i1, l2#10, $i3, $i4, $i5;
        java.util.concurrent.ConcurrentHashMap$Node[] l4, $r0, l1#4, $r2, $r3;
        java.lang.Throwable l5, $r5;
        sun.misc.Unsafe $r1;
        long $l2;
        boolean $z0;

        l0 := @this: java.util.concurrent.ConcurrentHashMap;

     label01:
        $r0 = l0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table>;

        l1#4 = $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label02;

        $i0 = lengthof l1#4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 0 goto label13;

     label02:
        $i1 = l0.<java.util.concurrent.ConcurrentHashMap: int sizeCtl>;

        l2#10 = $i1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 >= 0 goto label03;

        staticinvoke <java.lang.Thread: void yield()>();

        goto label01;

     label03:
        $r1 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l2 = <java.util.concurrent.ConcurrentHashMap: long SIZECTL>;

        $z0 = virtualinvoke $r1.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(l0, $l2, l2#10, -1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label01;

     label04:
        $r2 = l0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table>;

        l1#4 = $r2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        if $r2 == null goto label05;

        $i3 = lengthof l1#4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 != 0 goto label08;

     label05:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l2#10);

        if l2#10 <= 0 goto label06;

        $i4 = l2#10;

        goto label07;

     label06:
        $i4 = 16;

     label07:
        l3 = $i4;

        $r3 = newarray (java.util.concurrent.ConcurrentHashMap$Node)[l3];

        l4 = (java.util.concurrent.ConcurrentHashMap$Node[]) $r3;

        l1#4 = l4;

        l0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table> = l4;

        $i5 = l3 >>> 2;

        l2#10 = l3 - $i5;

     label08:
        l0.<java.util.concurrent.ConcurrentHashMap: int sizeCtl> = l2#10;

        goto label12;

     label09:
        $r5 := @caughtexception;

     label10:
        l5 = $r5;

     label11:
        l0.<java.util.concurrent.ConcurrentHashMap: int sizeCtl> = l2#10;

        throw l5;

     label12:
        goto label13;

     label13:
        return l1#4;

        catch java.lang.Throwable from label04 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    final java.util.concurrent.ConcurrentHashMap$Node[] helpTransfer(java.util.concurrent.ConcurrentHashMap$Node[], java.util.concurrent.ConcurrentHashMap$Node)
    {
        java.util.concurrent.ConcurrentHashMap l0;
        java.util.concurrent.ConcurrentHashMap$Node[] l1, l3, $r1, $r2, $r3, $r5;
        java.util.concurrent.ConcurrentHashMap$Node l2;
        int l5, l4, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9;
        boolean $z0, $z1;
        java.util.concurrent.ConcurrentHashMap$ForwardingNode $r0;
        sun.misc.Unsafe $r4;
        long $l8;

        l0 := @this: java.util.concurrent.ConcurrentHashMap;

        l1 := @parameter0: java.util.concurrent.ConcurrentHashMap$Node[];

        l2 := @parameter1: java.util.concurrent.ConcurrentHashMap$Node;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l1);

        if l1 == null goto label4;

        $z0 = l2 instanceof java.util.concurrent.ConcurrentHashMap$ForwardingNode;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label4;

        $r0 = (java.util.concurrent.ConcurrentHashMap$ForwardingNode) l2;

        $r1 = $r0.<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node[] nextTable>;

        l3 = $r1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 == null goto label4;

        $i0 = lengthof l1;

        l5 = staticinvoke <java.util.concurrent.ConcurrentHashMap: int resizeStamp(int)>($i0);

     label1:
        $r2 = l0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] nextTable>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        if l3 != $r2 goto label3;

        $r3 = l0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l1);

        if $r3 != l1 goto label3;

        $i1 = l0.<java.util.concurrent.ConcurrentHashMap: int sizeCtl>;

        l4 = $i1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 >= 0 goto label3;

        $i2 = <java.util.concurrent.ConcurrentHashMap: int RESIZE_STAMP_SHIFT>;

        $i3 = l4 >>> $i2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l5);

        if $i3 != l5 goto label3;

        $i4 = l5 + 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if l4 == $i4 goto label3;

        $i5 = <java.util.concurrent.ConcurrentHashMap: int MAX_RESIZERS>;

        $i6 = l5 + $i5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if l4 == $i6 goto label3;

        $i7 = l0.<java.util.concurrent.ConcurrentHashMap: int transferIndex>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if $i7 > 0 goto label2;

        goto label3;

     label2:
        $r4 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l8 = <java.util.concurrent.ConcurrentHashMap: long SIZECTL>;

        $i9 = l4 + 1;

        $z1 = virtualinvoke $r4.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(l0, $l8, l4, $i9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label1;

        specialinvoke l0.<java.util.concurrent.ConcurrentHashMap: void transfer(java.util.concurrent.ConcurrentHashMap$Node[],java.util.concurrent.ConcurrentHashMap$Node[])>(l1, l3);

        goto label3;

     label3:
        return l3;

     label4:
        $r5 = l0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table>;

        return $r5;
    }

    private final void treeifyBin(java.util.concurrent.ConcurrentHashMap$Node[], int)
    {
        java.util.concurrent.ConcurrentHashMap l0;
        java.util.concurrent.ConcurrentHashMap$Node[] l1;
        int l2, l4, $i0, $i1, $i2, $i3;
        java.util.concurrent.ConcurrentHashMap$Node l3, l6, $r0, $r2, l9#27;
        java.util.concurrent.ConcurrentHashMap$TreeNode l10, l7#23, l8#25, $r3;
        java.lang.Throwable l11, $r8;
        java.lang.Object $r4, $r5;
        java.util.concurrent.ConcurrentHashMap$TreeBin $r7;

        l0 := @this: java.util.concurrent.ConcurrentHashMap;

        l1 := @parameter0: java.util.concurrent.ConcurrentHashMap$Node[];

        l2 := @parameter1: int;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l1);

        if l1 == null goto label12;

        $i0 = lengthof l1;

        l4 = $i0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 >= 64 goto label01;

        $i1 = l4 << 1;

        specialinvoke l0.<java.util.concurrent.ConcurrentHashMap: void tryPresize(int)>($i1);

        goto label12;

     label01:
        $r0 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node tabAt(java.util.concurrent.ConcurrentHashMap$Node[],int)>(l1, l2);

        l3 = $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label12;

        $i2 = l3.<java.util.concurrent.ConcurrentHashMap$Node: int hash>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 < 0 goto label12;

        l6 = l3;

        entermonitor l3;

     label02:
        $r2 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node tabAt(java.util.concurrent.ConcurrentHashMap$Node[],int)>(l1, l2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3);

        if $r2 != l3 goto label07;

        l7#23 = null;

        l8#25 = null;

        l9#27 = l3;

     label03:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l9#27);

        if l9#27 == null goto label06;

        $r3 = new java.util.concurrent.ConcurrentHashMap$TreeNode;

        $i3 = l9#27.<java.util.concurrent.ConcurrentHashMap$Node: int hash>;

        $r4 = l9#27.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object key>;

        $r5 = l9#27.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>;

        specialinvoke $r3.<java.util.concurrent.ConcurrentHashMap$TreeNode: void <init>(int,java.lang.Object,java.lang.Object,java.util.concurrent.ConcurrentHashMap$Node,java.util.concurrent.ConcurrentHashMap$TreeNode)>($i3, $r4, $r5, null, null);

        l10 = $r3;

        l10.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode prev> = l8#25;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l8#25);

        if l8#25 != null goto label04;

        l7#23 = l10;

        goto label05;

     label04:
        l8#25.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$Node next> = l10;

     label05:
        l8#25 = l10;

        l9#27 = l9#27.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>;

        goto label03;

     label06:
        $r7 = new java.util.concurrent.ConcurrentHashMap$TreeBin;

        specialinvoke $r7.<java.util.concurrent.ConcurrentHashMap$TreeBin: void <init>(java.util.concurrent.ConcurrentHashMap$TreeNode)>(l7#23);

        staticinvoke <java.util.concurrent.ConcurrentHashMap: void setTabAt(java.util.concurrent.ConcurrentHashMap$Node[],int,java.util.concurrent.ConcurrentHashMap$Node)>(l1, l2, $r7);

     label07:
        exitmonitor l6;

     label08:
        goto label12;

     label09:
        $r8 := @caughtexception;

     label10:
        l11 = $r8;

        exitmonitor l6;

     label11:
        throw l11;

     label12:
        return;

        catch java.lang.Throwable from label02 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private final void addCount(long, int)
    {
        java.util.concurrent.ConcurrentHashMap l0;
        long l1, l5, $l0, $l1, $l2, l7#14, $l7, $l8, l10#38, $l9, $l11, $l20, $l22;
        int l3, l11, $i3, $i4, l12#24, $i5, $i6, $i10, l12#56, $i13, l13#69, $i14, $i15, $i16, $i17, $i18, $i19, $i21, $i23, $i24, $i25;
        java.util.concurrent.ConcurrentHashMap$CounterCell[] l4, $r0;
        sun.misc.Unsafe $r1, $r3, $r6, $r7;
        boolean $z0, l13#17, $z1, $z2, $z3;
        java.util.concurrent.ConcurrentHashMap$CounterCell $r2, l9#31;
        byte $b12;
        java.util.concurrent.ConcurrentHashMap$Node[] $r4, l9#62, $r5, l10#86;

        l0 := @this: java.util.concurrent.ConcurrentHashMap;

        l1 := @parameter0: long;

        l3 := @parameter1: int;

        $r0 = l0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$CounterCell[] counterCells>;

        l4 = $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label01;

        $r1 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l0 = <java.util.concurrent.ConcurrentHashMap: long BASECOUNT>;

        $l1 = l0.<java.util.concurrent.ConcurrentHashMap: long baseCount>;

        l5 = $l1;

        $l2 = l5 + l1;

        l7#14 = $l2;

        $z0 = virtualinvoke $r1.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(l0, $l0, $l1, $l2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label05;

     label01:
        l13#17 = 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l4);

        if l4 == null goto label02;

        $i3 = lengthof l4;

        $i4 = $i3 - 1;

        l12#24 = $i4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 < 0 goto label02;

        $i5 = staticinvoke <java.util.concurrent.ThreadLocalRandom: int getProbe()>();

        $i6 = $i5 & l12#24;

        $r2 = l4[$i6];

        l9#31 = $r2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        if $r2 == null goto label02;

        $r3 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l7 = <java.util.concurrent.ConcurrentHashMap: long CELLVALUE>;

        $l8 = l9#31.<java.util.concurrent.ConcurrentHashMap$CounterCell: long value>;

        l10#38 = $l8;

        $l9 = l10#38 + l1;

        $z1 = virtualinvoke $r3.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(l9#31, $l7, $l8, $l9);

        l13#17 = $z1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label03;

     label02:
        specialinvoke l0.<java.util.concurrent.ConcurrentHashMap: void fullAddCount(long,boolean)>(l1, l13#17);

        return;

     label03:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3);

        if l3 > 1 goto label04;

        return;

     label04:
        l7#14 = virtualinvoke l0.<java.util.concurrent.ConcurrentHashMap: long sumCount()>();

     label05:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3);

        if l3 < 0 goto label10;

     label06:
        $i10 = l0.<java.util.concurrent.ConcurrentHashMap: int sizeCtl>;

        l12#56 = $i10;

        $l11 = (long) $i10;

        $b12 = l7#14 cmp $l11;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b12);

        if $b12 < 0 goto label10;

        $r4 = l0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table>;

        l9#62 = $r4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        if $r4 == null goto label10;

        $i13 = lengthof l9#62;

        l11 = $i13;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i13);

        if $i13 >= 1073741824 goto label10;

        l13#69 = staticinvoke <java.util.concurrent.ConcurrentHashMap: int resizeStamp(int)>(l11);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l12#56);

        if l12#56 >= 0 goto label08;

        $i14 = <java.util.concurrent.ConcurrentHashMap: int RESIZE_STAMP_SHIFT>;

        $i15 = l12#56 >>> $i14;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i15);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l13#69);

        if $i15 != l13#69 goto label10;

        $i16 = l13#69 + 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l12#56);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i16);

        if l12#56 == $i16 goto label10;

        $i17 = <java.util.concurrent.ConcurrentHashMap: int MAX_RESIZERS>;

        $i18 = l13#69 + $i17;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l12#56);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i18);

        if l12#56 == $i18 goto label10;

        $r5 = l0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] nextTable>;

        l10#86 = $r5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r5);

        if $r5 == null goto label10;

        $i19 = l0.<java.util.concurrent.ConcurrentHashMap: int transferIndex>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i19);

        if $i19 > 0 goto label07;

        goto label10;

     label07:
        $r6 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l20 = <java.util.concurrent.ConcurrentHashMap: long SIZECTL>;

        $i21 = l12#56 + 1;

        $z2 = virtualinvoke $r6.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(l0, $l20, l12#56, $i21);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label09;

        specialinvoke l0.<java.util.concurrent.ConcurrentHashMap: void transfer(java.util.concurrent.ConcurrentHashMap$Node[],java.util.concurrent.ConcurrentHashMap$Node[])>(l9#62, l10#86);

        goto label09;

     label08:
        $r7 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l22 = <java.util.concurrent.ConcurrentHashMap: long SIZECTL>;

        $i23 = <java.util.concurrent.ConcurrentHashMap: int RESIZE_STAMP_SHIFT>;

        $i24 = l13#69 << $i23;

        $i25 = $i24 + 2;

        $z3 = virtualinvoke $r7.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(l0, $l22, l12#56, $i25);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label09;

        specialinvoke l0.<java.util.concurrent.ConcurrentHashMap: void transfer(java.util.concurrent.ConcurrentHashMap$Node[],java.util.concurrent.ConcurrentHashMap$Node[])>(l9#62, null);

     label09:
        l7#14 = virtualinvoke l0.<java.util.concurrent.ConcurrentHashMap: long sumCount()>();

        goto label06;

     label10:
        return;
    }

    static final int resizeStamp(int)
    {
        int l0, $i0, $i1, $i2, $i3, $i4;

        l0 := @parameter0: int;

        $i0 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(l0);

        $i1 = <java.util.concurrent.ConcurrentHashMap: int RESIZE_STAMP_BITS>;

        $i2 = $i1 - 1;

        $i3 = 1 << $i2;

        $i4 = $i0 | $i3;

        return $i4;
    }

    static final void setTabAt(java.util.concurrent.ConcurrentHashMap$Node[], int, java.util.concurrent.ConcurrentHashMap$Node)
    {
        java.util.concurrent.ConcurrentHashMap$Node[] l0;
        int l1, $i1;
        java.util.concurrent.ConcurrentHashMap$Node l2;
        sun.misc.Unsafe $r0;
        long $l0, $l2, $l3, $l4;

        l0 := @parameter0: java.util.concurrent.ConcurrentHashMap$Node[];

        l1 := @parameter1: int;

        l2 := @parameter2: java.util.concurrent.ConcurrentHashMap$Node;

        $r0 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l0 = (long) l1;

        $i1 = <java.util.concurrent.ConcurrentHashMap: int ASHIFT>;

        $l2 = $l0 << $i1;

        $l3 = <java.util.concurrent.ConcurrentHashMap: long ABASE>;

        $l4 = $l2 + $l3;

        virtualinvoke $r0.<sun.misc.Unsafe: void putObjectVolatile(java.lang.Object,long,java.lang.Object)>(l0, $l4, l2);

        return;
    }

    private final void fullAddCount(long, boolean)
    {
        java.util.concurrent.ConcurrentHashMap l0;
        long l1, $l6, $l10, $l11, l9#73, $l12, $l15, $l18, $l20, $l21, l9#164, $l22;
        java.util.concurrent.ConcurrentHashMap$CounterCell[] l6, l13, $r0, $r4, $r8, $r10, l11#101, $r13, $r15, l12#140;
        int l8, l14, l15, $i0, l4#4, $i1, $i2, $i3, $i4, $i5, $i7, $i8, $i9, $i13, $i14, $i16, l12#103, $i17, $i19;
        java.util.concurrent.ConcurrentHashMap$CounterCell l7, $r1, $r2, l11#28, $r5, $r11, $r16;
        java.lang.Throwable l16, l17, l18, $r6, $r12, $r17;
        boolean l3#1, l5#8, $z0, l12#38, $z1, $z2, $z3, l11#134, $z4;
        sun.misc.Unsafe $r3, $r7, $r9, $r14, $r18;

        l0 := @this: java.util.concurrent.ConcurrentHashMap;

        l1 := @parameter0: long;

        l3#1 := @parameter1: boolean;

        $i0 = staticinvoke <java.util.concurrent.ThreadLocalRandom: int getProbe()>();

        l4#4 = $i0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 0 goto label01;

        staticinvoke <java.util.concurrent.ThreadLocalRandom: void localInit()>();

        l4#4 = staticinvoke <java.util.concurrent.ThreadLocalRandom: int getProbe()>();

        l3#1 = 1;

     label01:
        l5#8 = 0;

     label02:
        $r0 = l0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$CounterCell[] counterCells>;

        l6 = $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label25;

        $i1 = lengthof l6;

        l8 = $i1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 0 goto label25;

        $i2 = l8 - 1;

        $i3 = $i2 & l4#4;

        $r1 = l6[$i3];

        l7 = $r1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 != null goto label10;

        $i4 = l0.<java.util.concurrent.ConcurrentHashMap: int cellsBusy>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 != 0 goto label09;

        $r2 = new java.util.concurrent.ConcurrentHashMap$CounterCell;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap$CounterCell: void <init>(long)>(l1);

        l11#28 = $r2;

        $i5 = l0.<java.util.concurrent.ConcurrentHashMap: int cellsBusy>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i5 != 0 goto label09;

        $r3 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l6 = <java.util.concurrent.ConcurrentHashMap: long CELLSBUSY>;

        $z0 = virtualinvoke $r3.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(l0, $l6, 0, 1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label09;

        l12#38 = 0;

     label03:
        $r4 = l0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$CounterCell[] counterCells>;

        l13 = $r4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        if $r4 == null goto label04;

        $i7 = lengthof l13;

        l14 = $i7;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if $i7 <= 0 goto label04;

        $i8 = l14 - 1;

        $i9 = $i8 & l4#4;

        l15 = $i9;

        $r5 = l13[$i9];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r5);

        if $r5 != null goto label04;

        l13[l15] = l11#28;

        l12#38 = 1;

     label04:
        l0.<java.util.concurrent.ConcurrentHashMap: int cellsBusy> = 0;

        goto label08;

     label05:
        $r6 := @caughtexception;

     label06:
        l16 = $r6;

     label07:
        l0.<java.util.concurrent.ConcurrentHashMap: int cellsBusy> = 0;

        throw l16;

     label08:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l12#38);

        if l12#38 == 0 goto label02;

        goto label35;

     label09:
        l5#8 = 0;

        goto label24;

     label10:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3#1);

        if l3#1 != 0 goto label11;

        l3#1 = 1;

        goto label24;

     label11:
        $r7 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l10 = <java.util.concurrent.ConcurrentHashMap: long CELLVALUE>;

        $l11 = l7.<java.util.concurrent.ConcurrentHashMap$CounterCell: long value>;

        l9#73 = $l11;

        $l12 = l9#73 + l1;

        $z1 = virtualinvoke $r7.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(l7, $l10, $l11, $l12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label12;

        goto label35;

     label12:
        $r8 = l0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$CounterCell[] counterCells>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l6);

        if $r8 != l6 goto label13;

        $i13 = <java.util.concurrent.ConcurrentHashMap: int NCPU>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i13);

        if l8 < $i13 goto label14;

     label13:
        l5#8 = 0;

        goto label24;

     label14:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l5#8);

        if l5#8 != 0 goto label15;

        l5#8 = 1;

        goto label24;

     label15:
        $i14 = l0.<java.util.concurrent.ConcurrentHashMap: int cellsBusy>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i14);

        if $i14 != 0 goto label24;

        $r9 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l15 = <java.util.concurrent.ConcurrentHashMap: long CELLSBUSY>;

        $z2 = virtualinvoke $r9.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(l0, $l15, 0, 1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label24;

     label16:
        $r10 = l0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$CounterCell[] counterCells>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r10);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l6);

        if $r10 != l6 goto label19;

        $i16 = l8 << 1;

        l11#101 = newarray (java.util.concurrent.ConcurrentHashMap$CounterCell)[$i16];

        l12#103 = 0;

     label17:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l12#103);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l8);

        if l12#103 >= l8 goto label18;

        $r11 = l6[l12#103];

        l11#101[l12#103] = $r11;

        l12#103 = l12#103 + 1;

        goto label17;

     label18:
        l0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$CounterCell[] counterCells> = l11#101;

     label19:
        l0.<java.util.concurrent.ConcurrentHashMap: int cellsBusy> = 0;

        goto label23;

     label20:
        $r12 := @caughtexception;

     label21:
        l17 = $r12;

     label22:
        l0.<java.util.concurrent.ConcurrentHashMap: int cellsBusy> = 0;

        throw l17;

     label23:
        l5#8 = 0;

        goto label02;

     label24:
        l4#4 = staticinvoke <java.util.concurrent.ThreadLocalRandom: int advanceProbe(int)>(l4#4);

        goto label34;

     label25:
        $i17 = l0.<java.util.concurrent.ConcurrentHashMap: int cellsBusy>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i17);

        if $i17 != 0 goto label33;

        $r13 = l0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$CounterCell[] counterCells>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r13);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l6);

        if $r13 != l6 goto label33;

        $r14 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l18 = <java.util.concurrent.ConcurrentHashMap: long CELLSBUSY>;

        $z3 = virtualinvoke $r14.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(l0, $l18, 0, 1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label33;

        l11#134 = 0;

     label26:
        $r15 = l0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$CounterCell[] counterCells>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r15);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l6);

        if $r15 != l6 goto label27;

        l12#140 = newarray (java.util.concurrent.ConcurrentHashMap$CounterCell)[2];

        $i19 = l4#4 & 1;

        $r16 = new java.util.concurrent.ConcurrentHashMap$CounterCell;

        specialinvoke $r16.<java.util.concurrent.ConcurrentHashMap$CounterCell: void <init>(long)>(l1);

        l12#140[$i19] = $r16;

        l0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$CounterCell[] counterCells> = l12#140;

        l11#134 = 1;

     label27:
        l0.<java.util.concurrent.ConcurrentHashMap: int cellsBusy> = 0;

        goto label31;

     label28:
        $r17 := @caughtexception;

     label29:
        l18 = $r17;

     label30:
        l0.<java.util.concurrent.ConcurrentHashMap: int cellsBusy> = 0;

        throw l18;

     label31:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l11#134);

        if l11#134 == 0 goto label32;

        goto label35;

     label32:
        goto label34;

     label33:
        $r18 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l20 = <java.util.concurrent.ConcurrentHashMap: long BASECOUNT>;

        $l21 = l0.<java.util.concurrent.ConcurrentHashMap: long baseCount>;

        l9#164 = $l21;

        $l22 = l9#164 + l1;

        $z4 = virtualinvoke $r18.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(l0, $l20, $l21, $l22);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label34;

        goto label35;

     label34:
        goto label02;

     label35:
        return;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label16 to label19 with label20;
        catch java.lang.Throwable from label21 to label22 with label20;
        catch java.lang.Throwable from label26 to label27 with label28;
        catch java.lang.Throwable from label29 to label30 with label28;
    }

    final long sumCount()
    {
        java.util.concurrent.ConcurrentHashMap l0;
        java.util.concurrent.ConcurrentHashMap$CounterCell[] l1;
        java.util.concurrent.ConcurrentHashMap$CounterCell l2, $r0;
        long l3#5, $l1;
        int l5#8, $i0;

        l0 := @this: java.util.concurrent.ConcurrentHashMap;

        l1 = l0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$CounterCell[] counterCells>;

        l3#5 = l0.<java.util.concurrent.ConcurrentHashMap: long baseCount>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l1);

        if l1 == null goto label3;

        l5#8 = 0;

     label1:
        $i0 = lengthof l1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l5#8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if l5#8 >= $i0 goto label3;

        $r0 = l1[l5#8];

        l2 = $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label2;

        $l1 = l2.<java.util.concurrent.ConcurrentHashMap$CounterCell: long value>;

        l3#5 = l3#5 + $l1;

     label2:
        l5#8 = l5#8 + 1;

        goto label1;

     label3:
        return l3#5;
    }

    private final void transfer(java.util.concurrent.ConcurrentHashMap$Node[], java.util.concurrent.ConcurrentHashMap$Node[])
    {
        java.util.concurrent.ConcurrentHashMap l0;
        java.util.concurrent.ConcurrentHashMap$Node[] l1, l2#1, $r0, l5#21;
        int l3, l12, l24, $i0, $i1, $i2, $i3, l4#12, $i4, l5#33, l9#42, l10#44, $i5, l13#53, $i8, l14#66, $i9, $i10, $i11, $i12, $i14, l13#99, $i15, $i16, $i17, $i18, $i19, $i20, l16#139, $i21, l19#150, l19#170, $i22, $i23, l21#220, l22#222, $i24, $i25;
        java.util.concurrent.ConcurrentHashMap$ForwardingNode l6, tmp$766405756;
        java.util.concurrent.ConcurrentHashMap$Node l11, $r6, l13#130, $r8, l17#141, l18#144, l14#159, l15#161, l18#165, l23#225, $r16, l14#268, $r17, l15#276, tmp$1439752497, tmp$573942532;
        java.util.concurrent.ConcurrentHashMap$TreeNode l25, l17#212, l18#214, l19#216, l20#218, tmp$1848839399;
        java.lang.Throwable l26, $r1, l5#24, $r18;
        boolean l7#38, l8#40, $z0, $z1, $z3;
        sun.misc.Unsafe $r3, $r5;
        long $l6, $l13;
        java.lang.Object l20#173, l21#176, $r12, $r13;
        java.util.concurrent.ConcurrentHashMap$TreeBin l16#210, tmp$706186005, tmp$623734438;

        l0 := @this: java.util.concurrent.ConcurrentHashMap;

        l1 := @parameter0: java.util.concurrent.ConcurrentHashMap$Node[];

        l2#1 := @parameter1: java.util.concurrent.ConcurrentHashMap$Node[];

        l3 = lengthof l1;

        $i0 = <java.util.concurrent.ConcurrentHashMap: int NCPU>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 1 goto label01;

        $i1 = l3 >>> 3;

        $i2 = <java.util.concurrent.ConcurrentHashMap: int NCPU>;

        $i3 = $i1 / $i2;

        goto label02;

     label01:
        $i3 = l3;

     label02:
        l4#12 = $i3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 >= 16 goto label03;

        l4#12 = 16;

     label03:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l2#1);

        if l2#1 != null goto label08;

     label04:
        $i4 = l3 << 1;

        $r0 = newarray (java.util.concurrent.ConcurrentHashMap$Node)[$i4];

        l5#21 = (java.util.concurrent.ConcurrentHashMap$Node[]) $r0;

        l2#1 = l5#21;

     label05:
        goto label07;

     label06:
        $r1 := @caughtexception;

        l5#24 = $r1;

        l0.<java.util.concurrent.ConcurrentHashMap: int sizeCtl> = 2147483647;

        return;

     label07:
        l0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] nextTable> = l2#1;

        l0.<java.util.concurrent.ConcurrentHashMap: int transferIndex> = l3;

     label08:
        l5#33 = lengthof l2#1;

        tmp$766405756 = new java.util.concurrent.ConcurrentHashMap$ForwardingNode;

        specialinvoke tmp$766405756.<java.util.concurrent.ConcurrentHashMap$ForwardingNode: void <init>(java.util.concurrent.ConcurrentHashMap$Node[])>(l2#1);

        l6 = tmp$766405756;

        l7#38 = 1;

        l8#40 = 0;

        l9#42 = 0;

        l10#44 = 0;

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l7#38);

        if l7#38 == 0 goto label16;

        l9#42 = l9#42 + -1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l9#42);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l10#44);

        if l9#42 >= l10#44 goto label10;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l8#40);

        if l8#40 == 0 goto label11;

     label10:
        l7#38 = 0;

        goto label15;

     label11:
        $i5 = l0.<java.util.concurrent.ConcurrentHashMap: int transferIndex>;

        l13#53 = $i5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i5 > 0 goto label12;

        l9#42 = -1;

        l7#38 = 0;

        goto label15;

     label12:
        $r3 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l6 = <java.util.concurrent.ConcurrentHashMap: long TRANSFERINDEX>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l13#53);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l4#12);

        if l13#53 <= l4#12 goto label13;

        $i8 = l13#53 - l4#12;

        goto label14;

     label13:
        $i8 = 0;

     label14:
        l14#66 = $i8;

        $z0 = virtualinvoke $r3.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(l0, $l6, l13#53, $i8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label15;

        l10#44 = l14#66;

        l9#42 = l13#53 - 1;

        l7#38 = 0;

     label15:
        goto label09;

     label16:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l9#42);

        if l9#42 < 0 goto label17;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l9#42);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3);

        if l9#42 >= l3 goto label17;

        $i9 = l9#42 + l3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l5#33);

        if $i9 < l5#33 goto label21;

     label17:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l8#40);

        if l8#40 == 0 goto label18;

        l0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] nextTable> = null;

        l0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table> = l2#1;

        $i10 = l3 << 1;

        $i11 = l3 >>> 1;

        $i12 = $i10 - $i11;

        l0.<java.util.concurrent.ConcurrentHashMap: int sizeCtl> = $i12;

        return;

     label18:
        $r5 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l13 = <java.util.concurrent.ConcurrentHashMap: long SIZECTL>;

        $i14 = l0.<java.util.concurrent.ConcurrentHashMap: int sizeCtl>;

        l13#99 = $i14;

        $i15 = l13#99 - 1;

        $z1 = virtualinvoke $r5.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(l0, $l13, $i14, $i15);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label20;

        $i16 = l13#99 - 2;

        $i17 = staticinvoke <java.util.concurrent.ConcurrentHashMap: int resizeStamp(int)>(l3);

        $i18 = <java.util.concurrent.ConcurrentHashMap: int RESIZE_STAMP_SHIFT>;

        $i19 = $i17 << $i18;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i16);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i19);

        if $i16 == $i19 goto label19;

        return;

     label19:
        l7#38 = 1;

        l8#40 = 1;

        l9#42 = l3;

     label20:
        goto label54;

     label21:
        $r6 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node tabAt(java.util.concurrent.ConcurrentHashMap$Node[],int)>(l1, l9#42);

        l11 = $r6;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r6);

        if $r6 != null goto label22;

        l7#38 = staticinvoke <java.util.concurrent.ConcurrentHashMap: boolean casTabAt(java.util.concurrent.ConcurrentHashMap$Node[],int,java.util.concurrent.ConcurrentHashMap$Node,java.util.concurrent.ConcurrentHashMap$Node)>(l1, l9#42, null, l6);

        goto label54;

     label22:
        $i20 = l11.<java.util.concurrent.ConcurrentHashMap$Node: int hash>;

        l12 = $i20;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i20);

        if $i20 != -1 goto label23;

        l7#38 = 1;

        goto label54;

     label23:
        l13#130 = l11;

        entermonitor l11;

     label24:
        $r8 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node tabAt(java.util.concurrent.ConcurrentHashMap$Node[],int)>(l1, l9#42);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l11);

        if $r8 != l11 goto label49;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l12);

        if l12 < 0 goto label34;

        l16#139 = l12 & l3;

        l17#141 = l11;

        l18#144 = l11.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>;

     label25:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l18#144);

        if l18#144 == null goto label27;

        $i21 = l18#144.<java.util.concurrent.ConcurrentHashMap$Node: int hash>;

        l19#150 = $i21 & l3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l19#150);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l16#139);

        if l19#150 == l16#139 goto label26;

        l16#139 = l19#150;

        l17#141 = l18#144;

     label26:
        l18#144 = l18#144.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>;

        goto label25;

     label27:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l16#139);

        if l16#139 != 0 goto label28;

        l14#159 = l17#141;

        l15#161 = null;

        goto label29;

     label28:
        l15#161 = l17#141;

        l14#159 = null;

     label29:
        l18#165 = l11;

     label30:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l18#165);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l17#141);

        if l18#165 == l17#141 goto label33;

        l19#170 = l18#165.<java.util.concurrent.ConcurrentHashMap$Node: int hash>;

        l20#173 = l18#165.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object key>;

        l21#176 = l18#165.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>;

        $i22 = l19#170 & l3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i22);

        if $i22 != 0 goto label31;

        tmp$1439752497 = new java.util.concurrent.ConcurrentHashMap$Node;

        specialinvoke tmp$1439752497.<java.util.concurrent.ConcurrentHashMap$Node: void <init>(int,java.lang.Object,java.lang.Object,java.util.concurrent.ConcurrentHashMap$Node)>(l19#170, l20#173, l21#176, l14#159);

        l14#159 = tmp$1439752497;

        goto label32;

     label31:
        tmp$573942532 = new java.util.concurrent.ConcurrentHashMap$Node;

        specialinvoke tmp$573942532.<java.util.concurrent.ConcurrentHashMap$Node: void <init>(int,java.lang.Object,java.lang.Object,java.util.concurrent.ConcurrentHashMap$Node)>(l19#170, l20#173, l21#176, l15#161);

        l15#161 = tmp$573942532;

     label32:
        l18#165 = l18#165.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>;

        goto label30;

     label33:
        staticinvoke <java.util.concurrent.ConcurrentHashMap: void setTabAt(java.util.concurrent.ConcurrentHashMap$Node[],int,java.util.concurrent.ConcurrentHashMap$Node)>(l2#1, l9#42, l14#159);

        $i23 = l9#42 + l3;

        staticinvoke <java.util.concurrent.ConcurrentHashMap: void setTabAt(java.util.concurrent.ConcurrentHashMap$Node[],int,java.util.concurrent.ConcurrentHashMap$Node)>(l2#1, $i23, l15#161);

        staticinvoke <java.util.concurrent.ConcurrentHashMap: void setTabAt(java.util.concurrent.ConcurrentHashMap$Node[],int,java.util.concurrent.ConcurrentHashMap$Node)>(l1, l9#42, l6);

        l7#38 = 1;

        goto label49;

     label34:
        $z3 = l11 instanceof java.util.concurrent.ConcurrentHashMap$TreeBin;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label49;

        l16#210 = (java.util.concurrent.ConcurrentHashMap$TreeBin) l11;

        l17#212 = null;

        l18#214 = null;

        l19#216 = null;

        l20#218 = null;

        l21#220 = 0;

        l22#222 = 0;

        l23#225 = l16#210.<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode first>;

     label35:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l23#225);

        if l23#225 == null goto label42;

        l24 = l23#225.<java.util.concurrent.ConcurrentHashMap$Node: int hash>;

        tmp$1848839399 = new java.util.concurrent.ConcurrentHashMap$TreeNode;

        $r12 = l23#225.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object key>;

        $r13 = l23#225.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>;

        specialinvoke tmp$1848839399.<java.util.concurrent.ConcurrentHashMap$TreeNode: void <init>(int,java.lang.Object,java.lang.Object,java.util.concurrent.ConcurrentHashMap$Node,java.util.concurrent.ConcurrentHashMap$TreeNode)>(l24, $r12, $r13, null, null);

        l25 = tmp$1848839399;

        $i24 = l24 & l3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i24);

        if $i24 != 0 goto label38;

        l25.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode prev> = l18#214;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l18#214);

        if l18#214 != null goto label36;

        l17#212 = l25;

        goto label37;

     label36:
        l18#214.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$Node next> = l25;

     label37:
        l18#214 = l25;

        l21#220 = l21#220 + 1;

        goto label41;

     label38:
        l25.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode prev> = l20#218;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l20#218);

        if l20#218 != null goto label39;

        l19#216 = l25;

        goto label40;

     label39:
        l20#218.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$Node next> = l25;

     label40:
        l20#218 = l25;

        l22#222 = l22#222 + 1;

     label41:
        l23#225 = l23#225.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>;

        goto label35;

     label42:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l21#220);

        if l21#220 > 6 goto label43;

        $r16 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node untreeify(java.util.concurrent.ConcurrentHashMap$Node)>(l17#212);

        goto label45;

     label43:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l22#222);

        if l22#222 == 0 goto label44;

        tmp$706186005 = new java.util.concurrent.ConcurrentHashMap$TreeBin;

        $r16 = tmp$706186005;

        specialinvoke tmp$706186005.<java.util.concurrent.ConcurrentHashMap$TreeBin: void <init>(java.util.concurrent.ConcurrentHashMap$TreeNode)>(l17#212);

        goto label45;

     label44:
        $r16 = l16#210;

     label45:
        l14#268 = $r16;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l22#222);

        if l22#222 > 6 goto label46;

        $r17 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node untreeify(java.util.concurrent.ConcurrentHashMap$Node)>(l19#216);

        goto label48;

     label46:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l21#220);

        if l21#220 == 0 goto label47;

        tmp$623734438 = new java.util.concurrent.ConcurrentHashMap$TreeBin;

        $r17 = tmp$623734438;

        specialinvoke tmp$623734438.<java.util.concurrent.ConcurrentHashMap$TreeBin: void <init>(java.util.concurrent.ConcurrentHashMap$TreeNode)>(l19#216);

        goto label48;

     label47:
        $r17 = l16#210;

     label48:
        l15#276 = $r17;

        staticinvoke <java.util.concurrent.ConcurrentHashMap: void setTabAt(java.util.concurrent.ConcurrentHashMap$Node[],int,java.util.concurrent.ConcurrentHashMap$Node)>(l2#1, l9#42, l14#268);

        $i25 = l9#42 + l3;

        staticinvoke <java.util.concurrent.ConcurrentHashMap: void setTabAt(java.util.concurrent.ConcurrentHashMap$Node[],int,java.util.concurrent.ConcurrentHashMap$Node)>(l2#1, $i25, l15#276);

        staticinvoke <java.util.concurrent.ConcurrentHashMap: void setTabAt(java.util.concurrent.ConcurrentHashMap$Node[],int,java.util.concurrent.ConcurrentHashMap$Node)>(l1, l9#42, l6);

        l7#38 = 1;

     label49:
        exitmonitor l13#130;

     label50:
        goto label54;

     label51:
        $r18 := @caughtexception;

     label52:
        l26 = $r18;

        exitmonitor l13#130;

     label53:
        throw l26;

     label54:
        goto label09;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label24 to label50 with label51;
        catch java.lang.Throwable from label52 to label53 with label51;
    }

    static java.util.concurrent.ConcurrentHashMap$Node untreeify(java.util.concurrent.ConcurrentHashMap$Node)
    {
        java.util.concurrent.ConcurrentHashMap$Node l0, l4, l1#2, l2#4, l3#6, $r0;
        int $i0;
        java.lang.Object $r1, $r2;

        l0 := @parameter0: java.util.concurrent.ConcurrentHashMap$Node;

        l1#2 = null;

        l2#4 = null;

        l3#6 = l0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3#6);

        if l3#6 == null goto label4;

        $r0 = new java.util.concurrent.ConcurrentHashMap$Node;

        $i0 = l3#6.<java.util.concurrent.ConcurrentHashMap$Node: int hash>;

        $r1 = l3#6.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object key>;

        $r2 = l3#6.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>;

        specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap$Node: void <init>(int,java.lang.Object,java.lang.Object,java.util.concurrent.ConcurrentHashMap$Node)>($i0, $r1, $r2, null);

        l4 = $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l2#4);

        if l2#4 != null goto label2;

        l1#2 = l4;

        goto label3;

     label2:
        l2#4.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next> = l4;

     label3:
        l2#4 = l4;

        l3#6 = l3#6.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>;

        goto label1;

     label4:
        return l1#2;
    }

    static int compareComparables(java.lang.Class, java.lang.Object, java.lang.Object)
    {
        java.lang.Class l0, $r0;
        java.lang.Object l1, l2;
        int $i0;
        java.lang.Comparable $r1;

        l0 := @parameter0: java.lang.Class;

        l1 := @parameter1: java.lang.Object;

        l2 := @parameter2: java.lang.Object;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l2);

        if l2 == null goto label1;

        $r0 = virtualinvoke l2.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l0);

        if $r0 == l0 goto label2;

     label1:
        $i0 = 0;

        goto label3;

     label2:
        $r1 = (java.lang.Comparable) l1;

        $i0 = interfaceinvoke $r1.<java.lang.Comparable: int compareTo(java.lang.Object)>(l2);

     label3:
        return $i0;
    }

    static java.lang.Class comparableClassFor(java.lang.Object)
    {
        java.lang.Object l0;
        java.lang.Class l1, $r0;
        java.lang.reflect.Type[] l2, l3, $r1, $r5;
        java.lang.reflect.Type l4, $r2, $r4, $r6;
        java.lang.reflect.ParameterizedType l5, $r3;
        boolean $z0, $z1;
        int l6#12, $i0, $i1;

        l0 := @parameter0: java.lang.Object;

        $z0 = l0 instanceof java.lang.Comparable;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label4;

        $r0 = virtualinvoke l0.<java.lang.Object: java.lang.Class getClass()>();

        l1 = $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != class "java/lang/String" goto label1;

        return l1;

     label1:
        $r1 = virtualinvoke l1.<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>();

        l2 = $r1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 == null goto label4;

        l6#12 = 0;

     label2:
        $i0 = lengthof l2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l6#12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if l6#12 >= $i0 goto label4;

        $r2 = l2[l6#12];

        l4 = $r2;

        $z1 = $r2 instanceof java.lang.reflect.ParameterizedType;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label3;

        $r3 = (java.lang.reflect.ParameterizedType) l4;

        l5 = $r3;

        $r4 = interfaceinvoke $r3.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        if $r4 != class "java/lang/Comparable" goto label3;

        $r5 = interfaceinvoke l5.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        l3 = $r5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r5);

        if $r5 == null goto label3;

        $i1 = lengthof l3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 != 1 goto label3;

        $r6 = l3[0];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l1);

        if $r6 != l1 goto label3;

        return l1;

     label3:
        l6#12 = l6#12 + 1;

        goto label2;

     label4:
        return null;
    }

    private final void tryPresize(int)
    {
        java.util.concurrent.ConcurrentHashMap l0;
        int l1, l2, $i0, $i1, $i2, $i3, $i4, l3#14, $i5, l5#21, $i6, l5#25, $i8, l6#62, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i18, $i19, $i20;
        java.util.concurrent.ConcurrentHashMap$Node[] l4, $r1, $r2, l6#38, $r4, $r5, l7#79;
        sun.misc.Unsafe $r0, $r6, $r7;
        long $l7, $l15, $l17;
        boolean $z0, $z1, $z2;
        java.lang.Throwable $r3, l7#49;

        l0 := @this: java.util.concurrent.ConcurrentHashMap;

        l1 := @parameter0: int;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l1);

        if l1 < 536870912 goto label01;

        $i0 = 1073741824;

        goto label02;

     label01:
        $i1 = l1 >>> 1;

        $i2 = l1 + $i1;

        $i3 = $i2 + 1;

        $i0 = staticinvoke <java.util.concurrent.ConcurrentHashMap: int tableSizeFor(int)>($i3);

     label02:
        l2 = $i0;

     label03:
        $i4 = l0.<java.util.concurrent.ConcurrentHashMap: int sizeCtl>;

        l3#14 = $i4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 < 0 goto label19;

        l4 = l0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l4);

        if l4 == null goto label04;

        $i5 = lengthof l4;

        l5#21 = $i5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i5 != 0 goto label13;

     label04:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3#14);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l2);

        if l3#14 <= l2 goto label05;

        $i6 = l3#14;

        goto label06;

     label05:
        $i6 = l2;

     label06:
        l5#25 = $i6;

        $r0 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l7 = <java.util.concurrent.ConcurrentHashMap: long SIZECTL>;

        $z0 = virtualinvoke $r0.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(l0, $l7, l3#14, -1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label18;

     label07:
        $r1 = l0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l4);

        if $r1 != l4 goto label08;

        $r2 = newarray (java.util.concurrent.ConcurrentHashMap$Node)[l5#25];

        l6#38 = (java.util.concurrent.ConcurrentHashMap$Node[]) $r2;

        l0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table> = l6#38;

        $i8 = l5#25 >>> 2;

        l3#14 = l5#25 - $i8;

     label08:
        l0.<java.util.concurrent.ConcurrentHashMap: int sizeCtl> = l3#14;

        goto label12;

     label09:
        $r3 := @caughtexception;

     label10:
        l7#49 = $r3;

     label11:
        l0.<java.util.concurrent.ConcurrentHashMap: int sizeCtl> = l3#14;

        throw l7#49;

     label12:
        goto label18;

     label13:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3#14);

        if l2 <= l3#14 goto label19;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l5#21);

        if l5#21 < 1073741824 goto label14;

        goto label19;

     label14:
        $r4 = l0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        if l4 != $r4 goto label18;

        l6#62 = staticinvoke <java.util.concurrent.ConcurrentHashMap: int resizeStamp(int)>(l5#21);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3#14);

        if l3#14 >= 0 goto label17;

        $i9 = <java.util.concurrent.ConcurrentHashMap: int RESIZE_STAMP_SHIFT>;

        $i10 = l3#14 >>> $i9;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i10);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l6#62);

        if $i10 != l6#62 goto label19;

        $i11 = l6#62 + 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3#14);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i11);

        if l3#14 == $i11 goto label19;

        $i12 = <java.util.concurrent.ConcurrentHashMap: int MAX_RESIZERS>;

        $i13 = l6#62 + $i12;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3#14);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i13);

        if l3#14 == $i13 goto label19;

        $r5 = l0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] nextTable>;

        l7#79 = $r5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r5);

        if $r5 == null goto label19;

        $i14 = l0.<java.util.concurrent.ConcurrentHashMap: int transferIndex>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i14);

        if $i14 > 0 goto label15;

        goto label19;

     label15:
        $r6 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l15 = <java.util.concurrent.ConcurrentHashMap: long SIZECTL>;

        $i16 = l3#14 + 1;

        $z1 = virtualinvoke $r6.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(l0, $l15, l3#14, $i16);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label16;

        specialinvoke l0.<java.util.concurrent.ConcurrentHashMap: void transfer(java.util.concurrent.ConcurrentHashMap$Node[],java.util.concurrent.ConcurrentHashMap$Node[])>(l4, l7#79);

     label16:
        goto label18;

     label17:
        $r7 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l17 = <java.util.concurrent.ConcurrentHashMap: long SIZECTL>;

        $i18 = <java.util.concurrent.ConcurrentHashMap: int RESIZE_STAMP_SHIFT>;

        $i19 = l6#62 << $i18;

        $i20 = $i19 + 2;

        $z2 = virtualinvoke $r7.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(l0, $l17, l3#14, $i20);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label18;

        specialinvoke l0.<java.util.concurrent.ConcurrentHashMap: void transfer(java.util.concurrent.ConcurrentHashMap$Node[],java.util.concurrent.ConcurrentHashMap$Node[])>(l4, null);

     label18:
        goto label03;

     label19:
        return;

        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private static final int tableSizeFor(int)
    {
        int l0, l1#4, $i0, l1#10, $i1, l1#16, $i2, l1#22, $i3, l1#28, $i4, l1#34, $i5;

        l0 := @parameter0: int;

        l1#4 = l0 - 1;

        $i0 = l1#4 >>> 1;

        l1#10 = l1#4 | $i0;

        $i1 = l1#10 >>> 2;

        l1#16 = l1#10 | $i1;

        $i2 = l1#16 >>> 4;

        l1#22 = l1#16 | $i2;

        $i3 = l1#22 >>> 8;

        l1#28 = l1#22 | $i3;

        $i4 = l1#28 >>> 16;

        l1#34 = l1#28 | $i4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l1#34);

        if l1#34 >= 0 goto label1;

        $i5 = 1;

        goto label3;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l1#34);

        if l1#34 < 1073741824 goto label2;

        $i5 = 1073741824;

        goto label3;

     label2:
        $i5 = l1#34 + 1;

     label3:
        return $i5;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap l0;
        java.lang.Object l1, $r2, l7#26, $r3, $r5, $r7, l7#51, $r8;
        int l8, l5, l6, $i0, $i1, $i2, $i3, $i4, $i5;
        java.util.concurrent.ConcurrentHashMap$Node[] l2, $r0;
        java.util.concurrent.ConcurrentHashMap$Node l4, $r1, l3#18, $r4, $r6;
        boolean $z0, $z1;

        l0 := @this: java.util.concurrent.ConcurrentHashMap;

        l1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke l1.<java.lang.Object: int hashCode()>();

        l8 = staticinvoke <java.util.concurrent.ConcurrentHashMap: int spread(int)>($i0);

        $r0 = l0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table>;

        l2 = $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label7;

        $i1 = lengthof l2;

        l5 = $i1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 0 goto label7;

        $i2 = l5 - 1;

        $i3 = $i2 & l8;

        $r1 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node tabAt(java.util.concurrent.ConcurrentHashMap$Node[],int)>(l2, $i3);

        l3#18 = $r1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 == null goto label7;

        $i4 = l3#18.<java.util.concurrent.ConcurrentHashMap$Node: int hash>;

        l6 = $i4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l8);

        if $i4 != l8 goto label2;

        $r2 = l3#18.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object key>;

        l7#26 = $r2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l1);

        if $r2 == l1 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l7#26);

        if l7#26 == null goto label5;

        $z0 = virtualinvoke l1.<java.lang.Object: boolean equals(java.lang.Object)>(l7#26);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label5;

     label1:
        $r3 = l3#18.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>;

        return $r3;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l6);

        if l6 >= 0 goto label5;

        $r4 = virtualinvoke l3#18.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>(l8, l1);

        l4 = $r4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        if $r4 == null goto label3;

        $r5 = l4.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>;

        goto label4;

     label3:
        $r5 = null;

     label4:
        return $r5;

     label5:
        $r6 = l3#18.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>;

        l3#18 = $r6;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r6);

        if $r6 == null goto label7;

        $i5 = l3#18.<java.util.concurrent.ConcurrentHashMap$Node: int hash>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l8);

        if $i5 != l8 goto label5;

        $r7 = l3#18.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object key>;

        l7#51 = $r7;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l1);

        if $r7 == l1 goto label6;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l7#51);

        if l7#51 == null goto label5;

        $z1 = virtualinvoke l1.<java.lang.Object: boolean equals(java.lang.Object)>(l7#51);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label5;

     label6:
        $r8 = l3#18.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>;

        return $r8;

     label7:
        return null;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap l0;
        java.lang.Object l1, $r0;

        l0 := @this: java.util.concurrent.ConcurrentHashMap;

        l1 := @parameter0: java.lang.Object;

        $r0 = virtualinvoke l0.<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>(l1, null, null);

        return $r0;
    }

    final java.lang.Object replaceNode(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap l0;
        java.lang.Object l1, l2, l3, l10#29, $r3, l15#50, l16#58, l16#101;
        int l4, l7, l8, l9, $i0, $i1, $i2, $i3, $i4, $i5;
        java.util.concurrent.ConcurrentHashMap$Node l6, l12, $r0, $r2, l13#41, l14#43, $r4, $r5, $r6, $r10;
        java.lang.Throwable l17, $r11;
        java.util.concurrent.ConcurrentHashMap$Node[] l5#6;
        boolean l11#31, $z0, $z1, $z2, $z3, $z4;
        java.util.concurrent.ConcurrentHashMap$TreeBin l13#87;
        java.util.concurrent.ConcurrentHashMap$TreeNode $r7, l14#91, $r8, l15#98, $r9;

        l0 := @this: java.util.concurrent.ConcurrentHashMap;

        l1 := @parameter0: java.lang.Object;

        l2 := @parameter1: java.lang.Object;

        l3 := @parameter2: java.lang.Object;

        $i0 = virtualinvoke l1.<java.lang.Object: int hashCode()>();

        l4 = staticinvoke <java.util.concurrent.ConcurrentHashMap: int spread(int)>($i0);

        l5#6 = l0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table>;

     label01:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l5#6);

        if l5#6 == null goto label23;

        $i1 = lengthof l5#6;

        l7 = $i1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 == 0 goto label23;

        $i2 = l7 - 1;

        $i3 = $i2 & l4;

        l8 = $i3;

        $r0 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node tabAt(java.util.concurrent.ConcurrentHashMap$Node[],int)>(l5#6, $i3);

        l6 = $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label02;

        goto label23;

     label02:
        $i4 = l6.<java.util.concurrent.ConcurrentHashMap$Node: int hash>;

        l9 = $i4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 != -1 goto label03;

        l5#6 = virtualinvoke l0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] helpTransfer(java.util.concurrent.ConcurrentHashMap$Node[],java.util.concurrent.ConcurrentHashMap$Node)>(l5#6, l6);

        goto label22;

     label03:
        l10#29 = null;

        l11#31 = 0;

        l12 = l6;

        entermonitor l6;

     label04:
        $r2 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node tabAt(java.util.concurrent.ConcurrentHashMap$Node[],int)>(l5#6, l8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l6);

        if $r2 != l6 goto label15;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l9);

        if l9 < 0 goto label12;

        l11#31 = 1;

        l13#41 = l6;

        l14#43 = null;

     label05:
        $i5 = l13#41.<java.util.concurrent.ConcurrentHashMap$Node: int hash>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l4);

        if $i5 != l4 goto label10;

        $r3 = l13#41.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object key>;

        l15#50 = $r3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l1);

        if $r3 == l1 goto label06;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l15#50);

        if l15#50 == null goto label10;

        $z0 = virtualinvoke l1.<java.lang.Object: boolean equals(java.lang.Object)>(l15#50);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label10;

     label06:
        l16#58 = l13#41.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3);

        if l3 == null goto label07;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l16#58);

        if l3 == l16#58 goto label07;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l16#58);

        if l16#58 == null goto label11;

        $z1 = virtualinvoke l3.<java.lang.Object: boolean equals(java.lang.Object)>(l16#58);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label11;

     label07:
        l10#29 = l16#58;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l2);

        if l2 == null goto label08;

        l13#41.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val> = l2;

        goto label11;

     label08:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l14#43);

        if l14#43 == null goto label09;

        $r4 = l13#41.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>;

        l14#43.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next> = $r4;

        goto label11;

     label09:
        $r5 = l13#41.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>;

        staticinvoke <java.util.concurrent.ConcurrentHashMap: void setTabAt(java.util.concurrent.ConcurrentHashMap$Node[],int,java.util.concurrent.ConcurrentHashMap$Node)>(l5#6, l8, $r5);

        goto label11;

     label10:
        l14#43 = l13#41;

        $r6 = l13#41.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>;

        l13#41 = $r6;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r6);

        if $r6 != null goto label05;

        goto label11;

     label11:
        goto label15;

     label12:
        $z2 = l6 instanceof java.util.concurrent.ConcurrentHashMap$TreeBin;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label15;

        l11#31 = 1;

        l13#87 = (java.util.concurrent.ConcurrentHashMap$TreeBin) l6;

        $r7 = l13#87.<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode root>;

        l14#91 = $r7;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r7);

        if $r7 == null goto label15;

        $r8 = virtualinvoke l14#91.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>(l4, l1, null);

        l15#98 = $r8;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r8);

        if $r8 == null goto label15;

        l16#101 = l15#98.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.lang.Object val>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3);

        if l3 == null goto label13;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l16#101);

        if l3 == l16#101 goto label13;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l16#101);

        if l16#101 == null goto label15;

        $z3 = virtualinvoke l3.<java.lang.Object: boolean equals(java.lang.Object)>(l16#101);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label15;

     label13:
        l10#29 = l16#101;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l2);

        if l2 == null goto label14;

        l15#98.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.lang.Object val> = l2;

        goto label15;

     label14:
        $z4 = virtualinvoke l13#87.<java.util.concurrent.ConcurrentHashMap$TreeBin: boolean removeTreeNode(java.util.concurrent.ConcurrentHashMap$TreeNode)>(l15#98);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label15;

        $r9 = l13#87.<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode first>;

        $r10 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node untreeify(java.util.concurrent.ConcurrentHashMap$Node)>($r9);

        staticinvoke <java.util.concurrent.ConcurrentHashMap: void setTabAt(java.util.concurrent.ConcurrentHashMap$Node[],int,java.util.concurrent.ConcurrentHashMap$Node)>(l5#6, l8, $r10);

     label15:
        exitmonitor l12;

     label16:
        goto label20;

     label17:
        $r11 := @caughtexception;

     label18:
        l17 = $r11;

        exitmonitor l12;

     label19:
        throw l17;

     label20:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l11#31);

        if l11#31 == 0 goto label22;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l10#29);

        if l10#29 == null goto label23;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l2);

        if l2 != null goto label21;

        specialinvoke l0.<java.util.concurrent.ConcurrentHashMap: void addCount(long,int)>(-1L, -1);

     label21:
        return l10#29;

     label22:
        goto label01;

     label23:
        return null;

        catch java.lang.Throwable from label04 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap l0;
        java.lang.Object l1, $r0;
        boolean $z0;

        l0 := @this: java.util.concurrent.ConcurrentHashMap;

        l1 := @parameter0: java.lang.Object;

        $r0 = virtualinvoke l0.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(l1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }


