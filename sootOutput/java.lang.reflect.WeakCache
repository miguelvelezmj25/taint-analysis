    public void <init>(java.util.function.BiFunction, java.util.function.BiFunction)
    {
        java.lang.reflect.WeakCache l0;
        java.util.function.BiFunction l1, l2, $r4, $r6;
        java.lang.ref.ReferenceQueue $r0;
        java.util.concurrent.ConcurrentHashMap $r1, $r2;
        java.lang.Object $r3, $r5;

        l0 := @this: java.lang.reflect.WeakCache;

        l1 := @parameter0: java.util.function.BiFunction;

        l2 := @parameter1: java.util.function.BiFunction;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        $r0 = new java.lang.ref.ReferenceQueue;

        specialinvoke $r0.<java.lang.ref.ReferenceQueue: void <init>()>();

        l0.<java.lang.reflect.WeakCache: java.lang.ref.ReferenceQueue refQueue> = $r0;

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        l0.<java.lang.reflect.WeakCache: java.util.concurrent.ConcurrentMap map> = $r1;

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        l0.<java.lang.reflect.WeakCache: java.util.concurrent.ConcurrentMap reverseMap> = $r2;

        $r3 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(l1);

        $r4 = (java.util.function.BiFunction) $r3;

        l0.<java.lang.reflect.WeakCache: java.util.function.BiFunction subKeyFactory> = $r4;

        $r5 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(l2);

        $r6 = (java.util.function.BiFunction) $r5;

        l0.<java.lang.reflect.WeakCache: java.util.function.BiFunction valueFactory> = $r6;

        return;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.lang.reflect.WeakCache l0;
        java.lang.Object l1;
        java.lang.reflect.WeakCache$LookupValue $r0;
        java.util.concurrent.ConcurrentMap $r2;
        boolean $z0;

        l0 := @this: java.lang.reflect.WeakCache;

        l1 := @parameter0: java.lang.Object;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(l1);

        specialinvoke l0.<java.lang.reflect.WeakCache: void expungeStaleEntries()>();

        $r2 = l0.<java.lang.reflect.WeakCache: java.util.concurrent.ConcurrentMap reverseMap>;

        $r0 = new java.lang.reflect.WeakCache$LookupValue;

        specialinvoke $r0.<java.lang.reflect.WeakCache$LookupValue: void <init>(java.lang.Object)>(l1);

        $z0 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>($r0);

        return $z0;
    }

    private void expungeStaleEntries()
    {
        java.lang.reflect.WeakCache l0;
        java.lang.reflect.WeakCache$CacheKey l1, $r2;
        java.lang.ref.ReferenceQueue $r0;
        java.lang.ref.Reference $r1;
        java.util.concurrent.ConcurrentMap $r3, $r4;

        l0 := @this: java.lang.reflect.WeakCache;

     label1:
        $r0 = l0.<java.lang.reflect.WeakCache: java.lang.ref.ReferenceQueue refQueue>;

        $r1 = virtualinvoke $r0.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();

        $r2 = (java.lang.reflect.WeakCache$CacheKey) $r1;

        l1 = $r2;

        if $r2 == null goto label2;

        $r3 = l0.<java.lang.reflect.WeakCache: java.util.concurrent.ConcurrentMap map>;

        $r4 = l0.<java.lang.reflect.WeakCache: java.util.concurrent.ConcurrentMap reverseMap>;

        virtualinvoke l1.<java.lang.reflect.WeakCache$CacheKey: void expungeFrom(java.util.concurrent.ConcurrentMap,java.util.concurrent.ConcurrentMap)>($r3, $r4);

        goto label1;

     label2:
        return;
    }


