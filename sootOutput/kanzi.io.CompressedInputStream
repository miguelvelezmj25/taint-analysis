    public int read(byte[], int, int) throws java.io.IOException
    {
        kanzi.io.CompressedInputStream this;
        byte[] data, $r6;
        int len, lenChunk, c2, off#1, $i0, $i1, remaining#20, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13;
        java.lang.IndexOutOfBoundsException $r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;
        kanzi.io.IOException $r2;
        kanzi.SliceByteArray $r3, $r4, $r5, $r7, $r8;
        byte $b12;

        this := @this: kanzi.io.CompressedInputStream;

        data := @parameter0: byte[];

        off#1 := @parameter1: int;

        len := @parameter2: int;

        if off#1 < 0 goto label1;

        if len < 0 goto label1;

        $i0 = len + off#1;

        $i1 = lengthof data;

        if $i0 <= $i1 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r0;

     label2:
        $r1 = this.<kanzi.io.CompressedInputStream: java.util.concurrent.atomic.AtomicBoolean closed>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 != 1 goto label3;

        $r2 = new kanzi.io.IOException;

        specialinvoke $r2.<kanzi.io.IOException: void <init>(java.lang.String,int)>("Stream closed", -11);

        throw $r2;

     label3:
        remaining#20 = len;

     label4:
        if remaining#20 <= 0 goto label9;

        $r3 = this.<kanzi.io.CompressedInputStream: kanzi.SliceByteArray sa>;

        $i2 = $r3.<kanzi.SliceByteArray: int index>;

        $i3 = $i2 + remaining#20;

        $i4 = this.<kanzi.io.CompressedInputStream: int maxIdx>;

        if $i3 >= $i4 goto label5;

        $i5 = remaining#20;

        goto label6;

     label5:
        $i6 = this.<kanzi.io.CompressedInputStream: int maxIdx>;

        $r4 = this.<kanzi.io.CompressedInputStream: kanzi.SliceByteArray sa>;

        $i7 = $r4.<kanzi.SliceByteArray: int index>;

        $i5 = $i6 - $i7;

     label6:
        lenChunk = $i5;

        if lenChunk <= 0 goto label7;

        $r5 = this.<kanzi.io.CompressedInputStream: kanzi.SliceByteArray sa>;

        $r6 = $r5.<kanzi.SliceByteArray: byte[] array>;

        $r7 = this.<kanzi.io.CompressedInputStream: kanzi.SliceByteArray sa>;

        $i8 = $r7.<kanzi.SliceByteArray: int index>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, $i8, data, off#1, lenChunk);

        $r8 = this.<kanzi.io.CompressedInputStream: kanzi.SliceByteArray sa>;

        $i9 = $r8.<kanzi.SliceByteArray: int index>;

        $i10 = $i9 + lenChunk;

        $r8.<kanzi.SliceByteArray: int index> = $i10;

        off#1 = off#1 + lenChunk;

        remaining#20 = remaining#20 - lenChunk;

        if remaining#20 != 0 goto label7;

        goto label9;

     label7:
        c2 = virtualinvoke this.<kanzi.io.CompressedInputStream: int read()>();

        if c2 != -1 goto label8;

        goto label9;

     label8:
        $i11 = off#1;

        off#1 = off#1 + 1;

        $b12 = (byte) c2;

        data[$i11] = $b12;

        remaining#20 = remaining#20 + -1;

        goto label4;

     label9:
        $i13 = len - remaining#20;

        return $i13;
    }

    public int read() throws java.io.IOException
    {
        kanzi.io.CompressedInputStream this;
        kanzi.SliceByteArray $r0, $r1, $r3;
        int $i0, $i1, $i2, $i3, $i5, $i6;
        byte[] $r2;
        byte $b7;
        short $s8;
        kanzi.io.IOException $r4, e#27, $r6, $r9, $r11;
        kanzi.BitStreamException $r5, e#30;
        java.lang.String $r7, $r12;
        java.lang.ArrayIndexOutOfBoundsException $r8, e#37;
        java.lang.Exception $r10, e#43;

        this := @this: kanzi.io.CompressedInputStream;

     label1:
        $r0 = this.<kanzi.io.CompressedInputStream: kanzi.SliceByteArray sa>;

        $i0 = $r0.<kanzi.SliceByteArray: int index>;

        $i1 = this.<kanzi.io.CompressedInputStream: int maxIdx>;

        if $i0 < $i1 goto label3;

        $i2 = specialinvoke this.<kanzi.io.CompressedInputStream: int processBlock()>();

        this.<kanzi.io.CompressedInputStream: int maxIdx> = $i2;

        $i3 = this.<kanzi.io.CompressedInputStream: int maxIdx>;

        if $i3 != 0 goto label3;

     label2:
        return -1;

     label3:
        $r1 = this.<kanzi.io.CompressedInputStream: kanzi.SliceByteArray sa>;

        $r2 = $r1.<kanzi.SliceByteArray: byte[] array>;

        $r3 = this.<kanzi.io.CompressedInputStream: kanzi.SliceByteArray sa>;

        $i5 = $r3.<kanzi.SliceByteArray: int index>;

        $i6 = $i5 + 1;

        $r3.<kanzi.SliceByteArray: int index> = $i6;

        $b7 = $r2[$i5];

        $s8 = $b7 & 255;

     label4:
        return $s8;

     label5:
        $r4 := @caughtexception;

        e#27 = $r4;

        throw e#27;

     label6:
        $r5 := @caughtexception;

        e#30 = $r5;

        $r6 = new kanzi.io.IOException;

        $r7 = virtualinvoke e#30.<kanzi.BitStreamException: java.lang.String getMessage()>();

        specialinvoke $r6.<kanzi.io.IOException: void <init>(java.lang.String,int)>($r7, -11);

        throw $r6;

     label7:
        $r8 := @caughtexception;

        e#37 = $r8;

        $r9 = new kanzi.io.IOException;

        specialinvoke $r9.<kanzi.io.IOException: void <init>(java.lang.String,int)>("Stream closed", -11);

        throw $r9;

     label8:
        $r10 := @caughtexception;

        e#43 = $r10;

        $r11 = new kanzi.io.IOException;

        $r12 = virtualinvoke e#43.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r11.<kanzi.io.IOException: void <init>(java.lang.String,int)>($r12, -127);

        throw $r11;

        catch kanzi.io.IOException from label1 to label2 with label5;
        catch kanzi.io.IOException from label3 to label4 with label5;
        catch kanzi.BitStreamException from label1 to label2 with label6;
        catch kanzi.BitStreamException from label3 to label4 with label6;
        catch java.lang.ArrayIndexOutOfBoundsException from label1 to label2 with label7;
        catch java.lang.ArrayIndexOutOfBoundsException from label3 to label4 with label7;
        catch java.lang.Exception from label1 to label2 with label8;
        catch java.lang.Exception from label3 to label4 with label8;
    }

    private int processBlock() throws java.io.IOException
    {
        kanzi.io.CompressedInputStream this;
        int blkSize, firstBlockId, l8, errorCode, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, decoded#47, $i12, jobId#59, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, l9#198, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i46, $i48;
        kanzi.Listener[] blockListeners, $r12;
        java.util.ArrayList tasks, $r15;
        java.util.HashMap $r0;
        kanzi.io.CompressedInputStream$DecodingTask task, $r29;
        kanzi.io.CompressedInputStream$Status[] results, l7#194;
        kanzi.io.CompressedInputStream$Status status, status, res;
        java.util.concurrent.Future result;
        kanzi.Event evt, $r54;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0, $z2, $z3, $z4;
        kanzi.SliceByteArray $r2, $r3, $r4, $r6, $r7, $r8, $r14, $r18, $r20, $r22, $r25, $r28, $r31, $r33, $r50, $r52, $r53, $r58;
        byte[] $r5, $r9, $r23, $r26, $r49, $r51;
        java.util.List $r10, $r11, $r44;
        java.lang.Object[] $r13;
        java.util.concurrent.atomic.AtomicInteger $r16, $r36;
        kanzi.SliceByteArray[] $r17, $r19, $r21, $r24, $r27, $r30, $r32;
        short $s24, $s25;
        kanzi.InputBitStream $r34;
        kanzi.util.hash.XXHash32 $r35, $r57;
        java.util.Map $r37;
        java.lang.Object $r38, $r40, $r45, $r46;
        java.util.concurrent.Callable $r39;
        kanzi.io.IOException $r41, $r47, $r59, e#246, $r62;
        java.lang.String $r42, $r48, $r63;
        java.util.concurrent.ExecutorService $r43;
        java.util.Iterator l7#168;
        kanzi.Event$Type $r56;
        long $l45;
        java.lang.Exception $r60, e#249;
        kanzi.BitStreamException $r61;

        this := @this: kanzi.io.CompressedInputStream;

        $r1 = this.<kanzi.io.CompressedInputStream: java.util.concurrent.atomic.AtomicBoolean initialized>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean getAndSet(boolean)>(1);

        if $z0 != 0 goto label01;

        virtualinvoke this.<kanzi.io.CompressedInputStream: void readHeader()>();

     label01:
        $i0 = this.<kanzi.io.CompressedInputStream: int blockSize>;

        blkSize = $i0 + 256;

        $r2 = this.<kanzi.io.CompressedInputStream: kanzi.SliceByteArray sa>;

        $i1 = $r2.<kanzi.SliceByteArray: int length>;

        $i2 = this.<kanzi.io.CompressedInputStream: int jobs>;

        $i3 = this.<kanzi.io.CompressedInputStream: int blockSize>;

        $i4 = $i2 * $i3;

        if $i1 >= $i4 goto label02;

        $r3 = this.<kanzi.io.CompressedInputStream: kanzi.SliceByteArray sa>;

        $i5 = this.<kanzi.io.CompressedInputStream: int jobs>;

        $i6 = this.<kanzi.io.CompressedInputStream: int blockSize>;

        $i7 = $i5 * $i6;

        $r3.<kanzi.SliceByteArray: int length> = $i7;

        $r4 = this.<kanzi.io.CompressedInputStream: kanzi.SliceByteArray sa>;

        $r5 = $r4.<kanzi.SliceByteArray: byte[] array>;

        $i8 = lengthof $r5;

        $r6 = this.<kanzi.io.CompressedInputStream: kanzi.SliceByteArray sa>;

        $i9 = $r6.<kanzi.SliceByteArray: int length>;

        if $i8 >= $i9 goto label02;

        $r7 = this.<kanzi.io.CompressedInputStream: kanzi.SliceByteArray sa>;

        $r8 = this.<kanzi.io.CompressedInputStream: kanzi.SliceByteArray sa>;

        $i10 = $r8.<kanzi.SliceByteArray: int length>;

        $r9 = newarray (byte)[$i10];

        $r7.<kanzi.SliceByteArray: byte[] array> = $r9;

     label02:
        $r10 = this.<kanzi.io.CompressedInputStream: java.util.List listeners>;

        $r11 = this.<kanzi.io.CompressedInputStream: java.util.List listeners>;

        $i11 = interfaceinvoke $r11.<java.util.List: int size()>();

        $r12 = newarray (kanzi.Listener)[$i11];

        $r13 = interfaceinvoke $r10.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r12);

        blockListeners = (kanzi.Listener[]) $r13;

        decoded#47 = 0;

        $r14 = this.<kanzi.io.CompressedInputStream: kanzi.SliceByteArray sa>;

        $r14.<kanzi.SliceByteArray: int index> = 0;

        $r15 = new java.util.ArrayList;

        $i12 = this.<kanzi.io.CompressedInputStream: int jobs>;

        specialinvoke $r15.<java.util.ArrayList: void <init>(int)>($i12);

        tasks = $r15;

        $r16 = this.<kanzi.io.CompressedInputStream: java.util.concurrent.atomic.AtomicInteger blockId>;

        firstBlockId = virtualinvoke $r16.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        jobId#59 = 0;

     label03:
        $i13 = this.<kanzi.io.CompressedInputStream: int jobs>;

        if jobId#59 >= $i13 goto label05;

        $r17 = this.<kanzi.io.CompressedInputStream: kanzi.SliceByteArray[] buffers>;

        $i14 = 2 * jobId#59;

        $r18 = $r17[$i14];

        $r18.<kanzi.SliceByteArray: int index> = 0;

        $r19 = this.<kanzi.io.CompressedInputStream: kanzi.SliceByteArray[] buffers>;

        $i15 = 2 * jobId#59;

        $i16 = $i15 + 1;

        $r20 = $r19[$i16];

        $r20.<kanzi.SliceByteArray: int index> = 0;

        $r21 = this.<kanzi.io.CompressedInputStream: kanzi.SliceByteArray[] buffers>;

        $i17 = 2 * jobId#59;

        $r22 = $r21[$i17];

        $r23 = $r22.<kanzi.SliceByteArray: byte[] array>;

        $i18 = lengthof $r23;

        if $i18 >= blkSize goto label04;

        $r24 = this.<kanzi.io.CompressedInputStream: kanzi.SliceByteArray[] buffers>;

        $i19 = 2 * jobId#59;

        $r25 = $r24[$i19];

        $r26 = newarray (byte)[blkSize];

        $r25.<kanzi.SliceByteArray: byte[] array> = $r26;

        $r27 = this.<kanzi.io.CompressedInputStream: kanzi.SliceByteArray[] buffers>;

        $i20 = 2 * jobId#59;

        $r28 = $r27[$i20];

        $r28.<kanzi.SliceByteArray: int length> = blkSize;

     label04:
        $r29 = new kanzi.io.CompressedInputStream$DecodingTask;

        $r30 = this.<kanzi.io.CompressedInputStream: kanzi.SliceByteArray[] buffers>;

        $i21 = 2 * jobId#59;

        $r31 = $r30[$i21];

        $r32 = this.<kanzi.io.CompressedInputStream: kanzi.SliceByteArray[] buffers>;

        $i22 = 2 * jobId#59;

        $i23 = $i22 + 1;

        $r33 = $r32[$i23];

        $s24 = this.<kanzi.io.CompressedInputStream: short transformType>;

        $s25 = this.<kanzi.io.CompressedInputStream: short entropyType>;

        $i26 = firstBlockId + jobId#59;

        $i27 = $i26 + 1;

        $r34 = this.<kanzi.io.CompressedInputStream: kanzi.InputBitStream ibs>;

        $r35 = this.<kanzi.io.CompressedInputStream: kanzi.util.hash.XXHash32 hasher>;

        $r36 = this.<kanzi.io.CompressedInputStream: java.util.concurrent.atomic.AtomicInteger blockId>;

        $r0 = new java.util.HashMap;

        $r37 = this.<kanzi.io.CompressedInputStream: java.util.Map ctx>;

        specialinvoke $r0.<java.util.HashMap: void <init>(java.util.Map)>($r37);

        specialinvoke $r29.<kanzi.io.CompressedInputStream$DecodingTask: void <init>(kanzi.SliceByteArray,kanzi.SliceByteArray,int,short,short,int,kanzi.InputBitStream,kanzi.util.hash.XXHash32,java.util.concurrent.atomic.AtomicInteger,kanzi.Listener[],java.util.Map)>($r31, $r33, blkSize, $s24, $s25, $i27, $r34, $r35, $r36, blockListeners, $r0);

        task = $r29;

        interfaceinvoke tasks.<java.util.List: boolean add(java.lang.Object)>(task);

        jobId#59 = jobId#59 + 1;

        goto label03;

     label05:
        $i28 = this.<kanzi.io.CompressedInputStream: int jobs>;

        results = newarray (kanzi.io.CompressedInputStream$Status)[$i28];

        $i29 = this.<kanzi.io.CompressedInputStream: int jobs>;

        if $i29 != 1 goto label07;

        $r38 = interfaceinvoke tasks.<java.util.List: java.lang.Object get(int)>(0);

        $r39 = (java.util.concurrent.Callable) $r38;

        $r40 = interfaceinvoke $r39.<java.util.concurrent.Callable: java.lang.Object call()>();

        status = (kanzi.io.CompressedInputStream$Status) $r40;

        results[0] = status;

        $i30 = status.<kanzi.io.CompressedInputStream$Status: int error>;

        if $i30 == 0 goto label06;

        $r41 = new kanzi.io.IOException;

        $r42 = status.<kanzi.io.CompressedInputStream$Status: java.lang.String msg>;

        $i31 = status.<kanzi.io.CompressedInputStream$Status: int error>;

        specialinvoke $r41.<kanzi.io.IOException: void <init>(java.lang.String,int)>($r42, $i31);

        throw $r41;

     label06:
        goto label10;

     label07:
        $r43 = this.<kanzi.io.CompressedInputStream: java.util.concurrent.ExecutorService pool>;

        $r44 = interfaceinvoke $r43.<java.util.concurrent.ExecutorService: java.util.List invokeAll(java.util.Collection)>(tasks);

        l7#168 = interfaceinvoke $r44.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z2 = interfaceinvoke l7#168.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r45 = interfaceinvoke l7#168.<java.util.Iterator: java.lang.Object next()>();

        result = (java.util.concurrent.Future) $r45;

        $r46 = interfaceinvoke result.<java.util.concurrent.Future: java.lang.Object get()>();

        status = (kanzi.io.CompressedInputStream$Status) $r46;

        $i32 = status.<kanzi.io.CompressedInputStream$Status: int blockId>;

        $i33 = $i32 - firstBlockId;

        $i34 = $i33 - 1;

        results[$i34] = status;

        $i35 = status.<kanzi.io.CompressedInputStream$Status: int error>;

        if $i35 == 0 goto label09;

        $r47 = new kanzi.io.IOException;

        $r48 = status.<kanzi.io.CompressedInputStream$Status: java.lang.String msg>;

        $i36 = status.<kanzi.io.CompressedInputStream$Status: int error>;

        specialinvoke $r47.<kanzi.io.IOException: void <init>(java.lang.String,int)>($r48, $i36);

        throw $r47;

     label09:
        goto label08;

     label10:
        l7#194 = results;

        l8 = lengthof l7#194;

        l9#198 = 0;

     label11:
        if l9#198 >= l8 goto label14;

        res = l7#194[l9#198];

        $r49 = res.<kanzi.io.CompressedInputStream$Status: byte[] data>;

        $r50 = this.<kanzi.io.CompressedInputStream: kanzi.SliceByteArray sa>;

        $r51 = $r50.<kanzi.SliceByteArray: byte[] array>;

        $r52 = this.<kanzi.io.CompressedInputStream: kanzi.SliceByteArray sa>;

        $i37 = $r52.<kanzi.SliceByteArray: int index>;

        $i38 = res.<kanzi.io.CompressedInputStream$Status: int decoded>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r49, 0, $r51, $i37, $i38);

        $r53 = this.<kanzi.io.CompressedInputStream: kanzi.SliceByteArray sa>;

        $i39 = $r53.<kanzi.SliceByteArray: int index>;

        $i40 = res.<kanzi.io.CompressedInputStream$Status: int decoded>;

        $i41 = $i39 + $i40;

        $r53.<kanzi.SliceByteArray: int index> = $i41;

        $i42 = res.<kanzi.io.CompressedInputStream$Status: int decoded>;

        decoded#47 = decoded#47 + $i42;

        $r54 = new kanzi.Event;

        $r56 = <kanzi.Event$Type: kanzi.Event$Type AFTER_TRANSFORM>;

        $i43 = res.<kanzi.io.CompressedInputStream$Status: int blockId>;

        $i44 = res.<kanzi.io.CompressedInputStream$Status: int decoded>;

        $l45 = (long) $i44;

        $i46 = res.<kanzi.io.CompressedInputStream$Status: int checksum>;

        $r57 = this.<kanzi.io.CompressedInputStream: kanzi.util.hash.XXHash32 hasher>;

        if $r57 == null goto label12;

        $z3 = 1;

        goto label13;

     label12:
        $z3 = 0;

     label13:
        specialinvoke $r54.<kanzi.Event: void <init>(kanzi.Event$Type,int,long,int,boolean)>($r56, $i43, $l45, $i46, $z3);

        evt = $r54;

        staticinvoke <kanzi.io.CompressedInputStream: void notifyListeners(kanzi.Listener[],kanzi.Event)>(blockListeners, evt);

        l9#198 = l9#198 + 1;

        goto label11;

     label14:
        $r58 = this.<kanzi.io.CompressedInputStream: kanzi.SliceByteArray sa>;

        $r58.<kanzi.SliceByteArray: int index> = 0;

     label15:
        return decoded#47;

     label16:
        $r59 := @caughtexception;

        e#246 = $r59;

        throw e#246;

     label17:
        $r60 := @caughtexception;

        e#249 = $r60;

        $z4 = e#249 instanceof kanzi.BitStreamException;

        if $z4 == 0 goto label18;

        $r61 = (kanzi.BitStreamException) e#249;

        $i48 = virtualinvoke $r61.<kanzi.BitStreamException: int getErrorCode()>();

        goto label19;

     label18:
        $i48 = -127;

     label19:
        errorCode = $i48;

        $r62 = new kanzi.io.IOException;

        $r63 = virtualinvoke e#249.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r62.<kanzi.io.IOException: void <init>(java.lang.String,int)>($r63, errorCode);

        throw $r62;

        catch kanzi.io.IOException from label01 to label15 with label16;
        catch java.lang.Exception from label01 to label15 with label17;
    }

    protected void readHeader() throws java.io.IOException
    {
        kanzi.io.CompressedInputStream this;
        int type, version, $i2, $i4, $i7, $i10, $i11, $i12, $i13, $i14, $i15, $i17, $i18, $i23;
        java.lang.StringBuilder sb, $r4, $r5, $r6, $r17, $r18, $r19, $r23, $r24, $r26, $r28, $r29, $r30, $r34, $r35, $r36, $r40, $r41, $r42, $r46, $r47, $r51, $r52, $r53;
        kanzi.Listener[] blockListeners, $r57;
        kanzi.Event evt, $r59;
        kanzi.InputBitStream $r0, $r2, $r8, $r10, $r11, $r12, $r21;
        long $l0, $l1, $l3, $l6, $l9;
        kanzi.io.IOException $r1, $r3, $r16, $r39, $r50;
        java.lang.String $r7, $r20, w1#117, $r33, $r43, w2#149, $r45, $r54, $r61;
        kanzi.util.hash.XXHash32 $r9, $r25;
        short $s5, $s8, $s19, $s20, $s21, $s22;
        java.util.Map $r13;
        java.lang.Integer $r14;
        java.util.List $r22, $r55, $r56;
        boolean $z0, $z1, $z2;
        kanzi.io.ByteFunctionFactory $r32;
        java.lang.IllegalArgumentException $r38, e#132, $r49, e#162;
        kanzi.entropy.EntropyCodecFactory $r44;
        java.lang.Object[] $r58;
        kanzi.Event$Type $r60;

        this := @this: kanzi.io.CompressedInputStream;

        $r0 = this.<kanzi.io.CompressedInputStream: kanzi.InputBitStream ibs>;

        $l0 = interfaceinvoke $r0.<kanzi.InputBitStream: long readBits(int)>(32);

        type = (int) $l0;

        if type == 1262571098 goto label01;

        $r1 = new kanzi.io.IOException;

        specialinvoke $r1.<kanzi.io.IOException: void <init>(java.lang.String,int)>("Invalid stream type", -15);

        throw $r1;

     label01:
        $r2 = this.<kanzi.io.CompressedInputStream: kanzi.InputBitStream ibs>;

        $l1 = interfaceinvoke $r2.<kanzi.InputBitStream: long readBits(int)>(7);

        version = (int) $l1;

        if version == 4 goto label02;

        $r3 = new kanzi.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid bitstream, cannot read this version of the stream: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(version);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<kanzi.io.IOException: void <init>(java.lang.String,int)>($r7, -16);

        throw $r3;

     label02:
        $r8 = this.<kanzi.io.CompressedInputStream: kanzi.InputBitStream ibs>;

        $i2 = interfaceinvoke $r8.<kanzi.InputBitStream: int readBit()>();

        if $i2 != 1 goto label03;

        $r9 = new kanzi.util.hash.XXHash32;

        specialinvoke $r9.<kanzi.util.hash.XXHash32: void <init>(int)>(1262571098);

        this.<kanzi.io.CompressedInputStream: kanzi.util.hash.XXHash32 hasher> = $r9;

     label03:
        $r10 = this.<kanzi.io.CompressedInputStream: kanzi.InputBitStream ibs>;

        $l3 = interfaceinvoke $r10.<kanzi.InputBitStream: long readBits(int)>(5);

        $i4 = (int) $l3;

        $s5 = (short) $i4;

        this.<kanzi.io.CompressedInputStream: short entropyType> = $s5;

        $r11 = this.<kanzi.io.CompressedInputStream: kanzi.InputBitStream ibs>;

        $l6 = interfaceinvoke $r11.<kanzi.InputBitStream: long readBits(int)>(16);

        $i7 = (int) $l6;

        $s8 = (short) $i7;

        this.<kanzi.io.CompressedInputStream: short transformType> = $s8;

        $r12 = this.<kanzi.io.CompressedInputStream: kanzi.InputBitStream ibs>;

        $l9 = interfaceinvoke $r12.<kanzi.InputBitStream: long readBits(int)>(26);

        $i10 = (int) $l9;

        $i11 = $i10 << 4;

        this.<kanzi.io.CompressedInputStream: int blockSize> = $i11;

        $r13 = this.<kanzi.io.CompressedInputStream: java.util.Map ctx>;

        $i12 = this.<kanzi.io.CompressedInputStream: int blockSize>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i12);

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("blockSize", $r14);

        $i13 = this.<kanzi.io.CompressedInputStream: int blockSize>;

        if $i13 < 1024 goto label04;

        $i14 = this.<kanzi.io.CompressedInputStream: int blockSize>;

        if $i14 <= 1073741824 goto label05;

     label04:
        $r16 = new kanzi.io.IOException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid bitstream, incorrect block size: ");

        $i15 = this.<kanzi.io.CompressedInputStream: int blockSize>;

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<kanzi.io.IOException: void <init>(java.lang.String,int)>($r20, -2);

        throw $r16;

     label05:
        $r21 = this.<kanzi.io.CompressedInputStream: kanzi.InputBitStream ibs>;

        interfaceinvoke $r21.<kanzi.InputBitStream: long readBits(int)>(9);

        $r22 = this.<kanzi.io.CompressedInputStream: java.util.List listeners>;

        $i17 = interfaceinvoke $r22.<java.util.List: int size()>();

        if $i17 <= 0 goto label17;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>(int)>(200);

        sb = $r23;

        $r24 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Checksum set to ");

        $r25 = this.<kanzi.io.CompressedInputStream: kanzi.util.hash.XXHash32 hasher>;

        if $r25 == null goto label06;

        $z0 = 1;

        goto label07;

     label06:
        $z0 = 0;

     label07:
        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r28 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Block size set to ");

        $i18 = this.<kanzi.io.CompressedInputStream: int blockSize>;

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i18);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label08:
        $r32 = new kanzi.io.ByteFunctionFactory;

        specialinvoke $r32.<kanzi.io.ByteFunctionFactory: void <init>()>();

        $s19 = this.<kanzi.io.CompressedInputStream: short transformType>;

        w1#117 = virtualinvoke $r32.<kanzi.io.ByteFunctionFactory: java.lang.String getName(short)>($s19);

        $r33 = "NONE";

        $z1 = virtualinvoke $r33.<java.lang.String: boolean equals(java.lang.Object)>(w1#117);

        if $z1 == 0 goto label09;

        w1#117 = "no";

     label09:
        $r34 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(w1#117);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" transform (stage 1)");

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label10:
        goto label12;

     label11:
        $r38 := @caughtexception;

        e#132 = $r38;

        $r39 = new kanzi.io.IOException;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid bitstream, unknown transform type: ");

        $s20 = this.<kanzi.io.CompressedInputStream: short transformType>;

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s20);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r39.<kanzi.io.IOException: void <init>(java.lang.String,int)>($r43, -3);

        throw $r39;

     label12:
        $r44 = new kanzi.entropy.EntropyCodecFactory;

        specialinvoke $r44.<kanzi.entropy.EntropyCodecFactory: void <init>()>();

        $s21 = this.<kanzi.io.CompressedInputStream: short entropyType>;

        w2#149 = virtualinvoke $r44.<kanzi.entropy.EntropyCodecFactory: java.lang.String getName(short)>($s21);

        $r45 = "NONE";

        $z2 = virtualinvoke $r45.<java.lang.String: boolean equals(java.lang.Object)>(w2#149);

        if $z2 == 0 goto label13;

        w2#149 = "no";

     label13:
        $r46 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using ");

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(w2#149);

        virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" entropy codec (stage 2)");

     label14:
        goto label16;

     label15:
        $r49 := @caughtexception;

        e#162 = $r49;

        $r50 = new kanzi.io.IOException;

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid bitstream, unknown entropy codec type: ");

        $s22 = this.<kanzi.io.CompressedInputStream: short entropyType>;

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s22);

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r50.<kanzi.io.IOException: void <init>(java.lang.String,int)>($r54, -3);

        throw $r50;

     label16:
        $r55 = this.<kanzi.io.CompressedInputStream: java.util.List listeners>;

        $r56 = this.<kanzi.io.CompressedInputStream: java.util.List listeners>;

        $i23 = interfaceinvoke $r56.<java.util.List: int size()>();

        $r57 = newarray (kanzi.Listener)[$i23];

        $r58 = interfaceinvoke $r55.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r57);

        blockListeners = (kanzi.Listener[]) $r58;

        $r59 = new kanzi.Event;

        $r60 = <kanzi.Event$Type: kanzi.Event$Type AFTER_HEADER_DECODING>;

        $r61 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r59.<kanzi.Event: void <init>(kanzi.Event$Type,int,java.lang.String)>($r60, 0, $r61);

        evt = $r59;

        staticinvoke <kanzi.io.CompressedInputStream: void notifyListeners(kanzi.Listener[],kanzi.Event)>(blockListeners, evt);

     label17:
        return;

        catch java.lang.IllegalArgumentException from label08 to label10 with label11;
        catch java.lang.IllegalArgumentException from label12 to label14 with label15;
    }

    static void notifyListeners(kanzi.Listener[], kanzi.Event)
    {
        kanzi.Listener[] listeners, l2;
        kanzi.Event evt;
        int l3, l4#5;
        kanzi.Listener bl;
        java.lang.Exception l6, $r0;

        listeners := @parameter0: kanzi.Listener[];

        evt := @parameter1: kanzi.Event;

        l2 = listeners;

        l3 = lengthof l2;

        l4#5 = 0;

     label1:
        if l4#5 >= l3 goto label6;

        bl = l2[l4#5];

     label2:
        interfaceinvoke bl.<kanzi.Listener: void processEvent(kanzi.Event)>(evt);

     label3:
        goto label5;

     label4:
        $r0 := @caughtexception;

        l6 = $r0;

     label5:
        l4#5 = l4#5 + 1;

        goto label1;

     label6:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void <init>(java.io.InputStream, java.util.Map)
    {
        kanzi.io.CompressedInputStream this;
        java.io.InputStream is;
        java.util.Map ctx;
        int tasks, $i0, $i1, $i2, i#65, $i3;
        java.util.concurrent.ExecutorService threadPool;
        java.lang.NullPointerException $r0, $r1;
        java.lang.Object $r2, $r5;
        java.lang.Integer $r3;
        java.lang.IllegalArgumentException $r4, $r6;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r10;
        kanzi.bitstream.DefaultInputBitStream $r11;
        kanzi.SliceByteArray $r12, $r19;
        kanzi.SliceByteArray[] $r14, $r17, $r18;
        java.util.concurrent.atomic.AtomicBoolean $r15, $r16;
        byte[] $r20;
        java.util.concurrent.atomic.AtomicInteger $r21;
        java.util.ArrayList $r22;

        this := @this: kanzi.io.CompressedInputStream;

        is := @parameter0: java.io.InputStream;

        ctx := @parameter1: java.util.Map;

        specialinvoke this.<java.io.InputStream: void <init>()>();

        if is != null goto label1;

        $r0 = new java.lang.NullPointerException;

        specialinvoke $r0.<java.lang.NullPointerException: void <init>(java.lang.String)>("Invalid null input stream parameter");

        throw $r0;

     label1:
        if ctx != null goto label2;

        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("Invalid null context parameter");

        throw $r1;

     label2:
        $r2 = interfaceinvoke ctx.<java.util.Map: java.lang.Object get(java.lang.Object)>("jobs");

        $r3 = (java.lang.Integer) $r2;

        tasks = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        if tasks < 0 goto label3;

        if tasks <= 16 goto label4;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The number of jobs must be in [1..16]");

        throw $r4;

     label4:
        $r5 = interfaceinvoke ctx.<java.util.Map: java.lang.Object get(java.lang.Object)>("pool");

        threadPool = (java.util.concurrent.ExecutorService) $r5;

        if tasks <= 1 goto label5;

        if threadPool != null goto label5;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The thread pool cannot be null when the number of jobs is ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(tasks);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label5:
        $r11 = new kanzi.bitstream.DefaultInputBitStream;

        specialinvoke $r11.<kanzi.bitstream.DefaultInputBitStream: void <init>(java.io.InputStream,int)>(is, 1048576);

        this.<kanzi.io.CompressedInputStream: kanzi.InputBitStream ibs> = $r11;

        $r12 = new kanzi.SliceByteArray;

        specialinvoke $r12.<kanzi.SliceByteArray: void <init>()>();

        this.<kanzi.io.CompressedInputStream: kanzi.SliceByteArray sa> = $r12;

        if tasks != 0 goto label6;

        $i0 = 1;

        goto label7;

     label6:
        $i0 = tasks;

     label7:
        this.<kanzi.io.CompressedInputStream: int jobs> = $i0;

        this.<kanzi.io.CompressedInputStream: java.util.concurrent.ExecutorService pool> = threadPool;

        $i1 = this.<kanzi.io.CompressedInputStream: int jobs>;

        $i2 = 2 * $i1;

        $r14 = newarray (kanzi.SliceByteArray)[$i2];

        this.<kanzi.io.CompressedInputStream: kanzi.SliceByteArray[] buffers> = $r14;

        $r15 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r15.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        this.<kanzi.io.CompressedInputStream: java.util.concurrent.atomic.AtomicBoolean closed> = $r15;

        $r16 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r16.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        this.<kanzi.io.CompressedInputStream: java.util.concurrent.atomic.AtomicBoolean initialized> = $r16;

        i#65 = 0;

     label8:
        $r17 = this.<kanzi.io.CompressedInputStream: kanzi.SliceByteArray[] buffers>;

        $i3 = lengthof $r17;

        if i#65 >= $i3 goto label9;

        $r18 = this.<kanzi.io.CompressedInputStream: kanzi.SliceByteArray[] buffers>;

        $r19 = new kanzi.SliceByteArray;

        $r20 = <kanzi.io.CompressedInputStream: byte[] EMPTY_BYTE_ARRAY>;

        specialinvoke $r19.<kanzi.SliceByteArray: void <init>(byte[],int)>($r20, 0);

        $r18[i#65] = $r19;

        i#65 = i#65 + 1;

        goto label8;

     label9:
        $r21 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r21.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        this.<kanzi.io.CompressedInputStream: java.util.concurrent.atomic.AtomicInteger blockId> = $r21;

        $r22 = new java.util.ArrayList;

        specialinvoke $r22.<java.util.ArrayList: void <init>(int)>(10);

        this.<kanzi.io.CompressedInputStream: java.util.List listeners> = $r22;

        this.<kanzi.io.CompressedInputStream: java.util.Map ctx> = ctx;

        return;
    }

    public boolean addListener(kanzi.Listener)
    {
        kanzi.io.CompressedInputStream this;
        kanzi.Listener bl;
        java.util.List $r0;
        boolean $z0;

        this := @this: kanzi.io.CompressedInputStream;

        bl := @parameter0: kanzi.Listener;

        if bl == null goto label1;

        $r0 = this.<kanzi.io.CompressedInputStream: java.util.List listeners>;

        $z0 = interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(bl);

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void close() throws java.io.IOException
    {
        kanzi.io.CompressedInputStream this;
        kanzi.BitStreamException e, $r3;
        byte[] $r0, $r7;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;
        kanzi.InputBitStream $r2;
        kanzi.io.IOException $r4;
        java.lang.String $r5;
        int $i0, i#27, $i1;
        kanzi.SliceByteArray $r6, $r8, $r9, $r12;
        kanzi.SliceByteArray[] $r10, $r11;

        this := @this: kanzi.io.CompressedInputStream;

        $r1 = this.<kanzi.io.CompressedInputStream: java.util.concurrent.atomic.AtomicBoolean closed>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean getAndSet(boolean)>(1);

        if $z0 != 1 goto label1;

        return;

     label1:
        $r2 = this.<kanzi.io.CompressedInputStream: kanzi.InputBitStream ibs>;

        interfaceinvoke $r2.<kanzi.InputBitStream: void close()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        e = $r3;

        $r4 = new kanzi.io.IOException;

        $r5 = virtualinvoke e.<kanzi.BitStreamException: java.lang.String getMessage()>();

        $i0 = virtualinvoke e.<kanzi.BitStreamException: int getErrorCode()>();

        specialinvoke $r4.<kanzi.io.IOException: void <init>(java.lang.String,int)>($r5, $i0);

        throw $r4;

     label4:
        this.<kanzi.io.CompressedInputStream: int maxIdx> = 0;

        $r6 = this.<kanzi.io.CompressedInputStream: kanzi.SliceByteArray sa>;

        $r7 = <kanzi.io.CompressedInputStream: byte[] EMPTY_BYTE_ARRAY>;

        $r6.<kanzi.SliceByteArray: byte[] array> = $r7;

        $r8 = this.<kanzi.io.CompressedInputStream: kanzi.SliceByteArray sa>;

        $r8.<kanzi.SliceByteArray: int length> = 0;

        $r9 = this.<kanzi.io.CompressedInputStream: kanzi.SliceByteArray sa>;

        $r9.<kanzi.SliceByteArray: int index> = -1;

        i#27 = 0;

     label5:
        $r10 = this.<kanzi.io.CompressedInputStream: kanzi.SliceByteArray[] buffers>;

        $i1 = lengthof $r10;

        if i#27 >= $i1 goto label6;

        $r11 = this.<kanzi.io.CompressedInputStream: kanzi.SliceByteArray[] buffers>;

        $r12 = new kanzi.SliceByteArray;

        $r0 = <kanzi.io.CompressedInputStream: byte[] EMPTY_BYTE_ARRAY>;

        specialinvoke $r12.<kanzi.SliceByteArray: void <init>(byte[],int)>($r0, 0);

        $r11[i#27] = $r12;

        i#27 = i#27 + 1;

        goto label5;

     label6:
        return;

        catch kanzi.BitStreamException from label1 to label2 with label3;
    }

    public long getRead()
    {
        kanzi.io.CompressedInputStream this;
        kanzi.InputBitStream $r0;
        long $l0, $l1, $l2;

        this := @this: kanzi.io.CompressedInputStream;

        $r0 = this.<kanzi.io.CompressedInputStream: kanzi.InputBitStream ibs>;

        $l0 = interfaceinvoke $r0.<kanzi.InputBitStream: long read()>();

        $l1 = $l0 + 7L;

        $l2 = $l1 >> 3;

        return $l2;
    }


