    void <init>()
    {
        kanzi.entropy.ANSRangeEncoder$Symbol this;

        this := @this: kanzi.entropy.ANSRangeEncoder$Symbol;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void reset(int, int, int)
    {
        kanzi.entropy.ANSRangeEncoder$Symbol this;
        int cumFreq, logRange, freq#1, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, shift#42, $i10, $i11, $i19, $i20;
        long $l12, $l13, $l14, $l15, $l16, $l17, $l18;

        this := @this: kanzi.entropy.ANSRangeEncoder$Symbol;

        cumFreq := @parameter0: int;

        freq#1 := @parameter1: int;

        logRange := @parameter2: int;

        $i0 = 1 << logRange;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(freq#1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if freq#1 < $i0 goto label1;

        $i1 = 1 << logRange;

        freq#1 = $i1 - 1;

     label1:
        this.<kanzi.entropy.ANSRangeEncoder$Symbol: int freq> = freq#1;

        $i2 = 8388608 >>> logRange;

        $i3 = $i2 << 8;

        $i4 = $i3 * freq#1;

        this.<kanzi.entropy.ANSRangeEncoder$Symbol: int xMax> = $i4;

        $i5 = 1 << logRange;

        $i6 = $i5 - freq#1;

        this.<kanzi.entropy.ANSRangeEncoder$Symbol: int cmplFreq> = $i6;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(freq#1);

        if freq#1 >= 2 goto label2;

        this.<kanzi.entropy.ANSRangeEncoder$Symbol: long invFreq> = 4294967295L;

        this.<kanzi.entropy.ANSRangeEncoder$Symbol: int invShift> = 32;

        $i7 = 1 << logRange;

        $i8 = cumFreq + $i7;

        $i9 = $i8 - 1;

        this.<kanzi.entropy.ANSRangeEncoder$Symbol: int bias> = $i9;

        goto label5;

     label2:
        shift#42 = 0;

     label3:
        $i10 = 1 << shift#42;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(freq#1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i10);

        if freq#1 <= $i10 goto label4;

        shift#42 = shift#42 + 1;

        goto label3;

     label4:
        $i11 = shift#42 + 31;

        $l12 = 1L << $i11;

        $l13 = (long) freq#1;

        $l14 = $l12 + $l13;

        $l15 = $l14 - 1L;

        $l16 = (long) freq#1;

        $l17 = $l15 / $l16;

        $l18 = $l17 & 4294967295L;

        this.<kanzi.entropy.ANSRangeEncoder$Symbol: long invFreq> = $l18;

        $i19 = 32 + shift#42;

        $i20 = $i19 - 1;

        this.<kanzi.entropy.ANSRangeEncoder$Symbol: int invShift> = $i20;

        this.<kanzi.entropy.ANSRangeEncoder$Symbol: int bias> = cumFreq;

     label5:
        return;
    }


