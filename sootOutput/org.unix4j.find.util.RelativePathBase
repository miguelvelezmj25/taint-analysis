    static void <clinit>()
    {
        org.unix4j.find.util.RelativePathBase$1 $r0;
        org.unix4j.find.util.RelativePathBase$2 $r1;
        org.unix4j.find.util.RelativePathBase$3 $r2;

        $r0 = new org.unix4j.find.util.RelativePathBase$1;

        specialinvoke $r0.<org.unix4j.find.util.RelativePathBase$1: void <init>()>();

        <org.unix4j.find.util.RelativePathBase: org.unix4j.find.util.RelativePathBase$Settings DEFAULT> = $r0;

        $r1 = new org.unix4j.find.util.RelativePathBase$2;

        specialinvoke $r1.<org.unix4j.find.util.RelativePathBase$2: void <init>()>();

        <org.unix4j.find.util.RelativePathBase: org.unix4j.find.util.RelativePathBase$Settings ALL_CHILDREN_WITH_DOT_PREFIX> = $r1;

        $r2 = new org.unix4j.find.util.RelativePathBase$3;

        specialinvoke $r2.<org.unix4j.find.util.RelativePathBase$3: void <init>()>();

        <org.unix4j.find.util.RelativePathBase: org.unix4j.find.util.RelativePathBase$Settings CHILDREN_WITHOUT_PREFIX> = $r2;

        return;
    }

    public void <init>(java.io.File, org.unix4j.find.util.RelativePathBase$Settings)
    {
        org.unix4j.find.util.RelativePathBase this;
        java.io.File base;
        org.unix4j.find.util.RelativePathBase$Settings settings;

        this := @this: org.unix4j.find.util.RelativePathBase;

        base := @parameter0: java.io.File;

        settings := @parameter1: org.unix4j.find.util.RelativePathBase$Settings;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<org.unix4j.find.util.RelativePathBase: java.io.File base> = base;

        this.<org.unix4j.find.util.RelativePathBase: org.unix4j.find.util.RelativePathBase$Settings settings> = settings;

        return;
    }

    public java.lang.String getRelativePathFor(java.io.File)
    {
        org.unix4j.find.util.RelativePathBase this;
        java.io.File file, $r1, $r5, $r6, $r8, $r13, $r20, $r23;
        java.lang.StringBuilder path, $r0, $r3, $r9, $r11, $r27, $r29;
        java.util.List baseParts, fileParts;
        int len, $i0, $i1, common#40, $i2, $i3, $i4, i#77, $i5, $i6, $i7;
        boolean $z0, $z1, $z2;
        org.unix4j.find.util.RelativePathBase$Settings $r2, $r7, $r19, $r22;
        java.lang.String $r4, $r10, $r12, $r15, $r17, $r18, $r26, $r30;
        java.lang.Object $r14, $r16, $r25;

        this := @this: org.unix4j.find.util.RelativePathBase;

        file := @parameter0: java.io.File;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        path = $r0;

        $r1 = this.<org.unix4j.find.util.RelativePathBase: java.io.File base>;

        $z0 = virtualinvoke $r1.<java.io.File: boolean equals(java.lang.Object)>(file);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r2 = this.<org.unix4j.find.util.RelativePathBase: org.unix4j.find.util.RelativePathBase$Settings settings>;

        $r3 = interfaceinvoke $r2.<org.unix4j.find.util.RelativePathBase$Settings: java.lang.StringBuilder appendPathForBaseDir(java.lang.StringBuilder,java.io.File)>(path, file);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label1:
        $r5 = this.<org.unix4j.find.util.RelativePathBase: java.io.File base>;

        $r6 = virtualinvoke file.<java.io.File: java.io.File getParentFile()>();

        $z1 = virtualinvoke $r5.<java.io.File: boolean equals(java.lang.Object)>($r6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        $r7 = this.<org.unix4j.find.util.RelativePathBase: org.unix4j.find.util.RelativePathBase$Settings settings>;

        $r8 = this.<org.unix4j.find.util.RelativePathBase: java.io.File base>;

        $r9 = interfaceinvoke $r7.<org.unix4j.find.util.RelativePathBase$Settings: java.lang.StringBuilder appendPrefixForChildren(java.lang.StringBuilder,java.io.File,boolean)>(path, $r8, 1);

        $r10 = virtualinvoke file.<java.io.File: java.lang.String getName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;

     label2:
        $r13 = this.<org.unix4j.find.util.RelativePathBase: java.io.File base>;

        baseParts = staticinvoke <org.unix4j.find.util.FileUtil: java.util.List getPathElements(java.io.File)>($r13);

        fileParts = staticinvoke <org.unix4j.find.util.FileUtil: java.util.List getPathElements(java.io.File)>(file);

        $i0 = interfaceinvoke baseParts.<java.util.List: int size()>();

        $i1 = interfaceinvoke fileParts.<java.util.List: int size()>();

        len = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        common#40 = 0;

     label3:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(common#40);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len);

        if common#40 >= len goto label4;

        $r14 = interfaceinvoke baseParts.<java.util.List: java.lang.Object get(int)>(common#40);

        $r15 = (java.lang.String) $r14;

        $r16 = interfaceinvoke fileParts.<java.util.List: java.lang.Object get(int)>(common#40);

        $z2 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label4;

        common#40 = common#40 + 1;

        goto label3;

     label4:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(common#40);

        if common#40 != 0 goto label5;

        $r17 = virtualinvoke file.<java.io.File: java.lang.String getAbsolutePath()>();

        $r18 = virtualinvoke $r17.<java.lang.String: java.lang.String replace(char,char)>(92, 47);

        return $r18;

     label5:
        $i2 = interfaceinvoke baseParts.<java.util.List: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(common#40);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if common#40 >= $i2 goto label6;

        $r19 = this.<org.unix4j.find.util.RelativePathBase: org.unix4j.find.util.RelativePathBase$Settings settings>;

        $r20 = this.<org.unix4j.find.util.RelativePathBase: java.io.File base>;

        $i3 = interfaceinvoke baseParts.<java.util.List: int size()>();

        $i4 = $i3 - common#40;

        interfaceinvoke $r19.<org.unix4j.find.util.RelativePathBase$Settings: java.lang.StringBuilder appendPrefixToCommonAncestor(java.lang.StringBuilder,java.io.File,int)>(path, $r20, $i4);

        goto label7;

     label6:
        $r22 = this.<org.unix4j.find.util.RelativePathBase: org.unix4j.find.util.RelativePathBase$Settings settings>;

        $r23 = this.<org.unix4j.find.util.RelativePathBase: java.io.File base>;

        interfaceinvoke $r22.<org.unix4j.find.util.RelativePathBase$Settings: java.lang.StringBuilder appendPrefixForChildren(java.lang.StringBuilder,java.io.File,boolean)>(path, $r23, 0);

     label7:
        i#77 = common#40;

     label8:
        $i5 = interfaceinvoke fileParts.<java.util.List: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#77);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if i#77 >= $i5 goto label9;

        $r25 = interfaceinvoke fileParts.<java.util.List: java.lang.Object get(int)>(i#77);

        $r26 = (java.lang.String) $r25;

        $r27 = virtualinvoke path.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        i#77 = i#77 + 1;

        goto label8;

     label9:
        $i6 = virtualinvoke path.<java.lang.StringBuilder: int length()>();

        $i7 = $i6 - 1;

        $r29 = virtualinvoke path.<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>($i7);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r30;
    }


