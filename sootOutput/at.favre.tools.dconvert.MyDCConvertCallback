    public void <init>(at.favre.tools.dconvert.DConvert$HandlerCallback, float, java.lang.StringBuilder, java.util.List, at.favre.tools.dconvert.arg.Arguments, at.favre.tools.dconvert.DConvert, float)
    {
        at.favre.tools.dconvert.MyDCConvertCallback this;
        at.favre.tools.dconvert.DConvert$HandlerCallback handlerCallback;
        float convertPercentage, postProcessPercentage;
        java.lang.StringBuilder logStringBuilder;
        java.util.List postProcessors;
        at.favre.tools.dconvert.arg.Arguments args;
        at.favre.tools.dconvert.DConvert dConvert;

        this := @this: at.favre.tools.dconvert.MyDCConvertCallback;

        handlerCallback := @parameter0: at.favre.tools.dconvert.DConvert$HandlerCallback;

        convertPercentage := @parameter1: float;

        logStringBuilder := @parameter2: java.lang.StringBuilder;

        postProcessors := @parameter3: java.util.List;

        args := @parameter4: at.favre.tools.dconvert.arg.Arguments;

        dConvert := @parameter5: at.favre.tools.dconvert.DConvert;

        postProcessPercentage := @parameter6: float;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<at.favre.tools.dconvert.MyDCConvertCallback: at.favre.tools.dconvert.DConvert$HandlerCallback handlerCallback> = handlerCallback;

        this.<at.favre.tools.dconvert.MyDCConvertCallback: float convertPercentage> = convertPercentage;

        this.<at.favre.tools.dconvert.MyDCConvertCallback: java.lang.StringBuilder logStringBuilder> = logStringBuilder;

        this.<at.favre.tools.dconvert.MyDCConvertCallback: java.util.List postProcessors> = postProcessors;

        this.<at.favre.tools.dconvert.MyDCConvertCallback: at.favre.tools.dconvert.arg.Arguments args> = args;

        this.<at.favre.tools.dconvert.MyDCConvertCallback: at.favre.tools.dconvert.DConvert dConvert> = dConvert;

        this.<at.favre.tools.dconvert.MyDCConvertCallback: float postProcessPercentage> = postProcessPercentage;

        return;
    }

    public void onFinished(int, java.util.List, java.lang.StringBuilder, java.util.List, boolean)
    {
        at.favre.tools.dconvert.MyDCConvertCallback this;
        int finishedJobsConverters;
        java.util.List outFiles, exceptionsConverters, $r8;
        java.lang.StringBuilder logConverters, $r0, $r5;
        boolean haltedDuringProcessConverters;
        at.favre.tools.dconvert.MyDCConvertCallback2 cb, $r3;
        at.favre.tools.dconvert.WorkerHandler wh, $r7;
        at.favre.tools.dconvert.DConvert $r2, $r6;
        at.favre.tools.dconvert.DConvert$HandlerCallback $r4;
        float $f0, $f1;
        at.favre.tools.dconvert.arg.Arguments $r9;

        this := @this: at.favre.tools.dconvert.MyDCConvertCallback;

        finishedJobsConverters := @parameter0: int;

        outFiles := @parameter1: java.util.List;

        logConverters := @parameter2: java.lang.StringBuilder;

        exceptionsConverters := @parameter3: java.util.List;

        haltedDuringProcessConverters := @parameter4: boolean;

        $r0 = this.<at.favre.tools.dconvert.MyDCConvertCallback: java.lang.StringBuilder logStringBuilder>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(logConverters);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(haltedDuringProcessConverters);

        if haltedDuringProcessConverters == 0 goto label1;

        $r2 = this.<at.favre.tools.dconvert.MyDCConvertCallback: at.favre.tools.dconvert.DConvert dConvert>;

        virtualinvoke $r2.<at.favre.tools.dconvert.DConvert: void informFinished(int,java.util.List,boolean)>(finishedJobsConverters, exceptionsConverters, 1);

        goto label2;

     label1:
        $r3 = new at.favre.tools.dconvert.MyDCConvertCallback2;

        $r4 = this.<at.favre.tools.dconvert.MyDCConvertCallback: at.favre.tools.dconvert.DConvert$HandlerCallback handlerCallback>;

        $f0 = this.<at.favre.tools.dconvert.MyDCConvertCallback: float convertPercentage>;

        $f1 = this.<at.favre.tools.dconvert.MyDCConvertCallback: float postProcessPercentage>;

        $r5 = this.<at.favre.tools.dconvert.MyDCConvertCallback: java.lang.StringBuilder logStringBuilder>;

        $r6 = this.<at.favre.tools.dconvert.MyDCConvertCallback: at.favre.tools.dconvert.DConvert dConvert>;

        specialinvoke $r3.<at.favre.tools.dconvert.MyDCConvertCallback2: void <init>(at.favre.tools.dconvert.DConvert$HandlerCallback,float,float,java.util.List,java.lang.StringBuilder,int,at.favre.tools.dconvert.DConvert)>($r4, $f0, $f1, exceptionsConverters, $r5, finishedJobsConverters, $r6);

        cb = $r3;

        $r7 = new at.favre.tools.dconvert.WorkerHandler;

        $r8 = this.<at.favre.tools.dconvert.MyDCConvertCallback: java.util.List postProcessors>;

        $r9 = this.<at.favre.tools.dconvert.MyDCConvertCallback: at.favre.tools.dconvert.arg.Arguments args>;

        specialinvoke $r7.<at.favre.tools.dconvert.WorkerHandler: void <init>(java.util.List,at.favre.tools.dconvert.arg.Arguments,at.favre.tools.dconvert.WorkerHandler$Callback)>($r8, $r9, cb);

        wh = $r7;

        virtualinvoke wh.<at.favre.tools.dconvert.WorkerHandler: void start(java.util.List)>(outFiles);

     label2:
        return;
    }

    public void onProgress(float)
    {
        at.favre.tools.dconvert.MyDCConvertCallback this;
        float percent, $f0, $f1;
        at.favre.tools.dconvert.DConvert$HandlerCallback $r0;

        this := @this: at.favre.tools.dconvert.MyDCConvertCallback;

        percent := @parameter0: float;

        $r0 = this.<at.favre.tools.dconvert.MyDCConvertCallback: at.favre.tools.dconvert.DConvert$HandlerCallback handlerCallback>;

        $f0 = this.<at.favre.tools.dconvert.MyDCConvertCallback: float convertPercentage>;

        $f1 = $f0 * percent;

        interfaceinvoke $r0.<at.favre.tools.dconvert.DConvert$HandlerCallback: void onProgress(float)>($f1);

        return;
    }


