    static void <clinit>()
    {
        java.lang.String[] $r0;

        <weka.classifiers.evaluation.Evaluation: int k_MarginResolution> = 500;

        $r0 = newarray (java.lang.String)[25];

        $r0[0] = "Correct";

        $r0[1] = "Incorrect";

        $r0[2] = "Kappa";

        $r0[3] = "Total cost";

        $r0[4] = "Average cost";

        $r0[5] = "KB relative";

        $r0[6] = "KB information";

        $r0[7] = "Correlation";

        $r0[8] = "Complexity 0";

        $r0[9] = "Complexity scheme";

        $r0[10] = "Complexity improvement";

        $r0[11] = "MAE";

        $r0[12] = "RMSE";

        $r0[13] = "RAE";

        $r0[14] = "RRSE";

        $r0[15] = "Coverage";

        $r0[16] = "Region size";

        $r0[17] = "TP rate";

        $r0[18] = "FP rate";

        $r0[19] = "Precision";

        $r0[20] = "Recall";

        $r0[21] = "F-measure";

        $r0[22] = "MCC";

        $r0[23] = "ROC area";

        $r0[24] = "PRC area";

        <weka.classifiers.evaluation.Evaluation: java.lang.String[] BUILT_IN_EVAL_METRICS> = $r0;

        return;
    }

    public static java.lang.String evaluateModel(weka.classifiers.Classifier, java.lang.String[]) throws java.lang.Exception
    {
        java.lang.StringBuffer text, schemeOptionsText#44, predsBuff#76, tmp$807918463, tmp$1550327486, tmp$1888156681, tmp$1416048989;
        boolean globalInfo, trainSetPresent#70, testSetPresent#72, $z0, $z1, $z2, $z3, $z4, $z5, $z6, success#161, $z7, noCrossValidation#208, $z8, $z9, $z10, $z11, $z12, $z13, $z14, preserveOrder#372, $z15, $z16, $z17, $z18, classStatistics#497, noOutput#501, $z19, $z20, trainStatistics#506, printComplexityStatistics#510, printMargins#514, printGraph#518, $z21, printSource#525, forceBatchTraining#535, $z22, $z23, $z24, discardPredictions#584, $z25, serializedClassifierLoaded#660, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42, $z43, $z44, $z45, $z46, $z47, $z48, $z49, $z50, $z51;
        java.lang.String metricsToToggle, p, tmpO, classIndexString, trainFileName, objectInputFileName, objectOutputFileName, testFileName, foldsString, seedString, sourceClass, thresholdFile, thresholdLabel, classifications, classificationsOld, option, $r4, $r6, $r8, $r9, xml#132, $r11, $r14, $r32, $r35, splitPercentageString#349, $r50, $r52, $r54, $r59, $r69, $r73, $r79, $r81, $r83, $r90, $r92, $r118, $r120, $r124, $r127, $r130, $r131, $r135, $r138, $r141, $r143, $r146, $r147, $r148, $r152, $r154, $r157, $r159, $r165, $r167, $r170, $r172, $r179, $r181, $r184, $r186, $r193, $r195, $r198, $r200, $r204, $r212, $r215;
        java.util.ArrayList toggleList, $r214, tmp$1466875821;
        java.lang.String[] parts, l59, options#2, optionsTmp#143, $r16, optionsTmp#187, $r17, $r18, $r19, l61#601;
        weka.core.pmml.PMMLModel pmmlModel;
        weka.classifiers.xml.XMLClassifier xmlserial, xmlSerial, tmp$1742529213, tmp$176090693;
        weka.core.OptionHandler cl, $r74;
        java.lang.Exception e, e, $r28, $r75, $r86, tmp$757903072, tmp$808787768, tmp$415938957, tmp$759582863, tmp$311334372, tmp$776425472, tmp$1039380269, tmp$1752339418, tmp$352684782, tmp$1785766486, tmp$1442792307, tmp$297802026, tmp$359735016, tmp$768911940, tmp$442080160;
        weka.core.Instances tmpInst, trainInst, testInst, mappedClassifierHeader, mappedClassifierDataset, result, train#4, test#6, template#8, $r36, $r45, $r46, savedStructure#668, tempTrain#792, $r106, $r111, train#968, $r133, $r161, test#1101, $r174, $r188, tmp$973813486, tmp$1211029751, tmp$1391789610, tmp$1420139458, tmp$481942733, tmp$1724809783, tmp$445843069, tmp$1513834334;
        int trainSize, testSize, l62, seed#10, folds#12, classIndex#14, actualClassIndex#60, $i0, l60#116, l61#118, $i1, i#145, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i32, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, l63#605, $i50, $i51, $i52, $i53, $i55, zz#807, $i56, $i58, $i63, $i64, $i67, labelIndex#1246, $i68;
        weka.core.Instance mapped, testInst, trainInst#772, $r110, trainInst#977;
        java.io.ObjectOutputStream objectOutputStream, tmp$867470565;
        java.io.BufferedOutputStream xmlOutputStream, tmp$1048636262;
        java.util.Random random, tmp$840307987, tmp$1873586702;
        weka.classifiers.evaluation.ThresholdCurve tc, tmp$161632074;
        weka.classifiers.Classifier classifier#1, classifierBackup#58, classifier#1149;
        weka.core.converters.ConverterUtils$DataSource trainSource#34, testSource#36, source#938, tmp$1673847993, tmp$1526870962, tmp$830314011, tmp$1391770918;
        java.io.ObjectInputStream objectInputStream#38;
        java.io.BufferedInputStream xmlInputStream#40, tmp$1381844488;
        long trainTimeElapsed#48, $l31, $l33, trainTimeStart#761, $l54, trainTimeStart#826, $l57, testTimeStart#970, $l59, testTimeElapsed#985, testTimeStart#987, $l60, $l66;
        double splitPercentage#64, $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        weka.classifiers.evaluation.output.prediction.AbstractOutput classificationOutput#78;
        java.lang.StringBuilder $r3, $r5, $r31, $r33, $r34, $r49, $r51, $r57, $r58, $r66, $r67, $r68, $r71, $r72, $r78, $r80, $r82, $r89, $r91, $r122, $r123, $r126, $r128, $r129, $r137, $r139, $r140, $r144, $r145, $r151, $r153, $r156, $r158, $r164, $r166, $r169, $r171, $r178, $r180, $r183, $r185, $r192, $r194, $r197, $r199, $r202, $r203, $r209, $r210, $r211, tmp$150221231, tmp$838439485, tmp$1320189408, tmp$913486261, tmp$714231677, tmp$2039980385, tmp$985473471, tmp$532936075, tmp$1841806553, tmp$1494254287, tmp$58216053, tmp$1499360427, tmp$1530462160, tmp$313986277, tmp$77408112, tmp$652911402, tmp$310478581, tmp$670244807, tmp$1873927974, tmp$894434506, tmp$466903164, tmp$2000965496;
        java.lang.IllegalArgumentException $r12, tmp$1288018012, tmp$1527064819;
        java.lang.Object $r15, is#293, $r84, $r85, $r93, os#843;
        byte $b27, $b28, $b29, $b30, $b61, $b62, $b65;
        weka.classifiers.CostMatrix costMatrix#492;
        weka.classifiers.evaluation.Evaluation trainingEvaluation#704, testingEvaluation#712, tmp$712460106, tmp$305442508, tmp$21790020, tmp$657187178;
        weka.classifiers.misc.InputMappedClassifier $r98, $r107, $r109;
        weka.classifiers.UpdateableClassifier $r104;
        weka.classifiers.UpdateableBatchProcessor $r105;
        weka.core.Drawable $r117;
        weka.classifiers.Sourcable $r119;
        java.lang.Object[] $r134, $r162, $r175, $r189;
        weka.core.Attribute $r149, $r176, $r190, $r205, $r206;
        weka.core.BatchPredictor $r160;
        weka.core.xml.XMLOptions tmp$1331555821;
        java.io.FileInputStream tmp$1221483752;
        java.util.zip.GZIPInputStream tmp$955417995;
        weka.classifiers.evaluation.output.prediction.PlainText tmp$836972780;
        java.io.FileOutputStream tmp$522701441;
        java.util.zip.GZIPOutputStream tmp$263787335;
        java.io.InputStream tmp$1344380170, tmp$1749412204, tmp$1654214987;
        java.io.OutputStream tmp$2087298394, tmp$143692007, tmp$64377384;

        classifier#1 := @parameter0: weka.classifiers.Classifier;

        options#2 := @parameter1: java.lang.String[];

        train#4 = null;

        test#6 = null;

        template#8 = null;

        seed#10 = 1;

        folds#12 = 10;

        classIndex#14 = -1;

        tmp$807918463 = new java.lang.StringBuffer;

        specialinvoke tmp$807918463.<java.lang.StringBuffer: void <init>()>();

        text = tmp$807918463;

        trainSource#34 = null;

        testSource#36 = null;

        objectInputStream#38 = null;

        xmlInputStream#40 = null;

        schemeOptionsText#44 = null;

        trainTimeElapsed#48 = 0L;

        classifierBackup#58 = null;

        actualClassIndex#60 = -1;

        splitPercentage#64 = -1.0;

        trainSetPresent#70 = 0;

        testSetPresent#72 = 0;

        predsBuff#76 = null;

        classificationOutput#78 = null;

        $z0 = staticinvoke <weka.core.Utils: boolean getFlag(java.lang.String,java.lang.String[])>("h", options#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label001;

        $z1 = staticinvoke <weka.core.Utils: boolean getFlag(java.lang.String,java.lang.String[])>("help", options#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label005;

     label001:
        $z2 = staticinvoke <weka.core.Utils: boolean getFlag(java.lang.String,java.lang.String[])>("synopsis", options#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label002;

        $z3 = staticinvoke <weka.core.Utils: boolean getFlag(java.lang.String,java.lang.String[])>("info", options#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label003;

     label002:
        $z4 = 1;

        goto label004;

     label003:
        $z4 = 0;

     label004:
        globalInfo = $z4;

        tmp$757903072 = new java.lang.Exception;

        tmp$150221231 = new java.lang.StringBuilder;

        specialinvoke tmp$150221231.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke tmp$150221231.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nHelp requested.");

        $r4 = staticinvoke <weka.classifiers.evaluation.Evaluation: java.lang.String makeOptionString(weka.classifiers.Classifier,boolean)>(classifier#1, globalInfo);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke tmp$757903072.<java.lang.Exception: void <init>(java.lang.String)>($r6);

        throw tmp$757903072;

     label005:
        metricsToToggle = staticinvoke <weka.core.Utils: java.lang.String getOption(java.lang.String,java.lang.String[])>("toggle", options#2);

        tmp$1466875821 = new java.util.ArrayList;

        specialinvoke tmp$1466875821.<java.util.ArrayList: void <init>()>();

        toggleList = tmp$1466875821;

        $i0 = virtualinvoke metricsToToggle.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label007;

        parts = virtualinvoke metricsToToggle.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        l59 = parts;

        l60#116 = lengthof l59;

        l61#118 = 0;

     label006:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l61#118);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l60#116);

        if l61#118 >= l60#116 goto label007;

        p = l59[l61#118];

        $r8 = virtualinvoke p.<java.lang.String: java.lang.String trim()>();

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String toLowerCase()>();

        interfaceinvoke toggleList.<java.util.List: boolean add(java.lang.Object)>($r9);

        l61#118 = l61#118 + 1;

        goto label006;

     label007:
        xml#132 = staticinvoke <weka.core.Utils: java.lang.String getOption(java.lang.String,java.lang.String[])>("xml", options#2);

        $z5 = virtualinvoke xml#132.<java.lang.String: boolean equals(java.lang.Object)>("");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 != 0 goto label008;

        tmp$1331555821 = new weka.core.xml.XMLOptions;

        specialinvoke tmp$1331555821.<weka.core.xml.XMLOptions: void <init>(java.lang.String)>(xml#132);

        options#2 = virtualinvoke tmp$1331555821.<weka.core.xml.XMLOptions: java.lang.String[] toArray()>();

     label008:
        $i1 = lengthof options#2;

        optionsTmp#143 = newarray (java.lang.String)[$i1];

        i#145 = 0;

     label009:
        $i2 = lengthof options#2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#145);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#145 >= $i2 goto label010;

        $r11 = options#2[i#145];

        optionsTmp#143[i#145] = $r11;

        i#145 = i#145 + 1;

        goto label009;

     label010:
        tmpO = staticinvoke <weka.core.Utils: java.lang.String getOption(char,java.lang.String[])>(108, optionsTmp#143);

        $z6 = virtualinvoke tmpO.<java.lang.String: boolean endsWith(java.lang.String)>(".xml");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label015;

        success#161 = 0;

     label011:
        pmmlModel = staticinvoke <weka.core.pmml.PMMLFactory: weka.core.pmml.PMMLModel getPMMLModel(java.lang.String)>(tmpO);

        $z7 = pmmlModel instanceof weka.classifiers.pmml.consumer.PMMLClassifier;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 == 0 goto label012;

        classifier#1 = (weka.classifiers.pmml.consumer.PMMLClassifier) pmmlModel;

        success#161 = 1;

     label012:
        goto label014;

     label013:
        $r12 := @caughtexception;

        success#161 = 0;

     label014:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(success#161);

        if success#161 != 0 goto label015;

        tmp$1742529213 = new weka.classifiers.xml.XMLClassifier;

        specialinvoke tmp$1742529213.<weka.classifiers.xml.XMLClassifier: void <init>()>();

        xmlserial = tmp$1742529213;

        $r14 = staticinvoke <weka.core.Utils: java.lang.String getOption(char,java.lang.String[])>(108, options#2);

        $r15 = virtualinvoke xmlserial.<weka.classifiers.xml.XMLClassifier: java.lang.Object read(java.lang.String)>($r14);

        cl = (weka.core.OptionHandler) $r15;

        $i3 = lengthof options#2;

        $r16 = interfaceinvoke cl.<weka.core.OptionHandler: java.lang.String[] getOptions()>();

        $i4 = lengthof $r16;

        $i5 = $i3 + $i4;

        optionsTmp#187 = newarray (java.lang.String)[$i5];

        $r17 = interfaceinvoke cl.<weka.core.OptionHandler: java.lang.String[] getOptions()>();

        $r18 = interfaceinvoke cl.<weka.core.OptionHandler: java.lang.String[] getOptions()>();

        $i6 = lengthof $r18;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r17, 0, optionsTmp#187, 0, $i6);

        $r19 = interfaceinvoke cl.<weka.core.OptionHandler: java.lang.String[] getOptions()>();

        $i7 = lengthof $r19;

        $i8 = lengthof options#2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(options#2, 0, optionsTmp#187, $i7, $i8);

        options#2 = optionsTmp#187;

     label015:
        noCrossValidation#208 = staticinvoke <weka.core.Utils: boolean getFlag(java.lang.String,java.lang.String[])>("no-cv", options#2);

        classIndexString = staticinvoke <weka.core.Utils: java.lang.String getOption(char,java.lang.String[])>(99, options#2);

        $i9 = virtualinvoke classIndexString.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        if $i9 == 0 goto label018;

        $z8 = virtualinvoke classIndexString.<java.lang.String: boolean equals(java.lang.Object)>("first");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 == 0 goto label016;

        classIndex#14 = 1;

        goto label018;

     label016:
        $z9 = virtualinvoke classIndexString.<java.lang.String: boolean equals(java.lang.Object)>("last");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 == 0 goto label017;

        classIndex#14 = -1;

        goto label018;

     label017:
        classIndex#14 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(classIndexString);

     label018:
        trainFileName = staticinvoke <weka.core.Utils: java.lang.String getOption(char,java.lang.String[])>(116, options#2);

        objectInputFileName = staticinvoke <weka.core.Utils: java.lang.String getOption(char,java.lang.String[])>(108, options#2);

        objectOutputFileName = staticinvoke <weka.core.Utils: java.lang.String getOption(char,java.lang.String[])>(100, options#2);

        testFileName = staticinvoke <weka.core.Utils: java.lang.String getOption(char,java.lang.String[])>(84, options#2);

        foldsString = staticinvoke <weka.core.Utils: java.lang.String getOption(char,java.lang.String[])>(120, options#2);

        $i10 = virtualinvoke foldsString.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i10);

        if $i10 == 0 goto label019;

        folds#12 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(foldsString);

     label019:
        seedString = staticinvoke <weka.core.Utils: java.lang.String getOption(char,java.lang.String[])>(115, options#2);

        $i11 = virtualinvoke seedString.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i11);

        if $i11 == 0 goto label020;

        seed#10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(seedString);

     label020:
        $i12 = virtualinvoke trainFileName.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i12);

        if $i12 != 0 goto label022;

        $i13 = virtualinvoke objectInputFileName.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i13);

        if $i13 != 0 goto label021;

        tmp$808787768 = new java.lang.Exception;

        specialinvoke tmp$808787768.<java.lang.Exception: void <init>(java.lang.String)>("No training file and no object input file given.");

        throw tmp$808787768;

     label021:
        $i14 = virtualinvoke testFileName.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i14);

        if $i14 != 0 goto label024;

        tmp$415938957 = new java.lang.Exception;

        specialinvoke tmp$415938957.<java.lang.Exception: void <init>(java.lang.String)>("No training file and no test file given.");

        throw tmp$415938957;

     label022:
        $i15 = virtualinvoke objectInputFileName.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i15);

        if $i15 == 0 goto label024;

        $z10 = classifier#1 instanceof weka.classifiers.UpdateableClassifier;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z10);

        if $z10 == 0 goto label023;

        $i16 = virtualinvoke testFileName.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i16);

        if $i16 != 0 goto label024;

     label023:
        tmp$759582863 = new java.lang.Exception;

        specialinvoke tmp$759582863.<java.lang.Exception: void <init>(java.lang.String)>("Classifier not incremental, or no test file provided: can\'t use both train and model file.");

        throw tmp$759582863;

     label024:
        $i17 = virtualinvoke trainFileName.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i17);

        if $i17 == 0 goto label025;

        trainSetPresent#70 = 1;

        tmp$1673847993 = new weka.core.converters.ConverterUtils$DataSource;

        specialinvoke tmp$1673847993.<weka.core.converters.ConverterUtils$DataSource: void <init>(java.lang.String)>(trainFileName);

        trainSource#34 = tmp$1673847993;

     label025:
        $i18 = virtualinvoke testFileName.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i18);

        if $i18 == 0 goto label026;

        testSetPresent#72 = 1;

        tmp$1526870962 = new weka.core.converters.ConverterUtils$DataSource;

        specialinvoke tmp$1526870962.<weka.core.converters.ConverterUtils$DataSource: void <init>(java.lang.String)>(testFileName);

        testSource#36 = tmp$1526870962;

     label026:
        $i19 = virtualinvoke objectInputFileName.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i19);

        if $i19 == 0 goto label031;

        $z11 = virtualinvoke objectInputFileName.<java.lang.String: boolean endsWith(java.lang.String)>(".xml");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z11);

        if $z11 == 0 goto label027;

        objectInputStream#38 = null;

        xmlInputStream#40 = null;

        goto label031;

     label027:
        tmp$1221483752 = new java.io.FileInputStream;

        specialinvoke tmp$1221483752.<java.io.FileInputStream: void <init>(java.lang.String)>(objectInputFileName);

        is#293 = tmp$1221483752;

        $z12 = virtualinvoke objectInputFileName.<java.lang.String: boolean endsWith(java.lang.String)>(".gz");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z12);

        if $z12 == 0 goto label028;

        tmp$955417995 = new java.util.zip.GZIPInputStream;

        tmp$1344380170 = (java.io.InputStream) is#293;

        specialinvoke tmp$955417995.<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)>(tmp$1344380170);

        is#293 = tmp$955417995;

     label028:
        $z13 = virtualinvoke objectInputFileName.<java.lang.String: boolean endsWith(java.lang.String)>(".koml");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z13);

        if $z13 == 0 goto label029;

        $z14 = staticinvoke <weka.core.xml.KOML: boolean isPresent()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z14);

        if $z14 != 0 goto label030;

     label029:
        tmp$1749412204 = (java.io.InputStream) is#293;

        objectInputStream#38 = staticinvoke <weka.core.SerializationHelper: java.io.ObjectInputStream getObjectInputStream(java.io.InputStream)>(tmp$1749412204);

        xmlInputStream#40 = null;

        goto label031;

     label030:
        objectInputStream#38 = null;

        tmp$1381844488 = new java.io.BufferedInputStream;

        tmp$1654214987 = (java.io.InputStream) is#293;

        specialinvoke tmp$1381844488.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(tmp$1654214987);

        xmlInputStream#40 = tmp$1381844488;

     label031:
        goto label033;

     label032:
        $r28 := @caughtexception;

        e = $r28;

        tmp$311334372 = new java.lang.Exception;

        tmp$838439485 = new java.lang.StringBuilder;

        specialinvoke tmp$838439485.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke tmp$838439485.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t open file ");

        $r32 = virtualinvoke e.<java.lang.Exception: java.lang.String getMessage()>();

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke tmp$311334372.<java.lang.Exception: void <init>(java.lang.String)>($r35);

        throw tmp$311334372;

     label033:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(testSetPresent#72);

        if testSetPresent#72 == 0 goto label037;

        $r36 = virtualinvoke testSource#36.<weka.core.converters.ConverterUtils$DataSource: weka.core.Instances getStructure()>();

        test#6 = $r36;

        template#8 = $r36;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classIndex#14);

        if classIndex#14 == -1 goto label034;

        $i20 = classIndex#14 - 1;

        virtualinvoke test#6.<weka.core.Instances: void setClassIndex(int)>($i20);

        goto label036;

     label034:
        $i21 = virtualinvoke test#6.<weka.core.Instances: int classIndex()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i21);

        if $i21 == -1 goto label035;

        $i22 = virtualinvoke classIndexString.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i22);

        if $i22 == 0 goto label036;

     label035:
        $i23 = virtualinvoke test#6.<weka.core.Instances: int numAttributes()>();

        $i24 = $i23 - 1;

        virtualinvoke test#6.<weka.core.Instances: void setClassIndex(int)>($i24);

     label036:
        actualClassIndex#60 = virtualinvoke test#6.<weka.core.Instances: int classIndex()>();

        goto label047;

     label037:
        splitPercentageString#349 = staticinvoke <weka.core.Utils: java.lang.String getOption(java.lang.String,java.lang.String[])>("split-percentage", options#2);

        $i25 = virtualinvoke splitPercentageString#349.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i25);

        if $i25 == 0 goto label040;

        $i26 = virtualinvoke foldsString.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i26);

        if $i26 == 0 goto label038;

        tmp$776425472 = new java.lang.Exception;

        specialinvoke tmp$776425472.<java.lang.Exception: void <init>(java.lang.String)>("Percentage split cannot be used in conjunction with cross-validation (\'-x\').");

        throw tmp$776425472;

     label038:
        splitPercentage#64 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(splitPercentageString#349);

        $b27 = splitPercentage#64 cmpg 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b27);

        if $b27 <= 0 goto label039;

        $b28 = splitPercentage#64 cmpl 100.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b28);

        if $b28 < 0 goto label041;

     label039:
        tmp$1039380269 = new java.lang.Exception;

        specialinvoke tmp$1039380269.<java.lang.Exception: void <init>(java.lang.String)>("Percentage split value needs be >0 and <100.");

        throw tmp$1039380269;

     label040:
        splitPercentage#64 = -1.0;

     label041:
        preserveOrder#372 = staticinvoke <weka.core.Utils: boolean getFlag(java.lang.String,java.lang.String[])>("preserve-order", options#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(preserveOrder#372);

        if preserveOrder#372 == 0 goto label042;

        $b29 = splitPercentage#64 cmpl -1.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b29);

        if $b29 != 0 goto label042;

        tmp$1752339418 = new java.lang.Exception;

        specialinvoke tmp$1752339418.<java.lang.Exception: void <init>(java.lang.String)>("Percentage split (\'-split-percentage\') is missing.");

        throw tmp$1752339418;

     label042:
        $b30 = splitPercentage#64 cmpl 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b30);

        if $b30 <= 0 goto label047;

        testSetPresent#72 = 1;

        tmpInst = virtualinvoke trainSource#34.<weka.core.converters.ConverterUtils$DataSource: weka.core.Instances getDataSet(int)>(-1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(preserveOrder#372);

        if preserveOrder#372 != 0 goto label043;

        tmp$840307987 = new java.util.Random;

        $l31 = (long) seed#10;

        specialinvoke tmp$840307987.<java.util.Random: void <init>(long)>($l31);

        virtualinvoke tmpInst.<weka.core.Instances: void randomize(java.util.Random)>(tmp$840307987);

     label043:
        $i32 = virtualinvoke tmpInst.<weka.core.Instances: int numInstances()>();

        $d0 = (double) $i32;

        $d1 = $d0 * splitPercentage#64;

        $d2 = $d1 / 100.0;

        $l33 = staticinvoke <java.lang.Math: long round(double)>($d2);

        trainSize = (int) $l33;

        $i34 = virtualinvoke tmpInst.<weka.core.Instances: int numInstances()>();

        testSize = $i34 - trainSize;

        tmp$973813486 = new weka.core.Instances;

        specialinvoke tmp$973813486.<weka.core.Instances: void <init>(weka.core.Instances,int,int)>(tmpInst, 0, trainSize);

        trainInst = tmp$973813486;

        tmp$1211029751 = new weka.core.Instances;

        specialinvoke tmp$1211029751.<weka.core.Instances: void <init>(weka.core.Instances,int,int)>(tmpInst, trainSize, testSize);

        testInst = tmp$1211029751;

        tmp$830314011 = new weka.core.converters.ConverterUtils$DataSource;

        specialinvoke tmp$830314011.<weka.core.converters.ConverterUtils$DataSource: void <init>(weka.core.Instances)>(trainInst);

        trainSource#34 = tmp$830314011;

        tmp$1391770918 = new weka.core.converters.ConverterUtils$DataSource;

        specialinvoke tmp$1391770918.<weka.core.converters.ConverterUtils$DataSource: void <init>(weka.core.Instances)>(testInst);

        testSource#36 = tmp$1391770918;

        $r45 = virtualinvoke testSource#36.<weka.core.converters.ConverterUtils$DataSource: weka.core.Instances getStructure()>();

        test#6 = $r45;

        template#8 = $r45;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classIndex#14);

        if classIndex#14 == -1 goto label044;

        $i35 = classIndex#14 - 1;

        virtualinvoke test#6.<weka.core.Instances: void setClassIndex(int)>($i35);

        goto label046;

     label044:
        $i36 = virtualinvoke test#6.<weka.core.Instances: int classIndex()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i36);

        if $i36 == -1 goto label045;

        $i37 = virtualinvoke classIndexString.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i37);

        if $i37 == 0 goto label046;

     label045:
        $i38 = virtualinvoke test#6.<weka.core.Instances: int numAttributes()>();

        $i39 = $i38 - 1;

        virtualinvoke test#6.<weka.core.Instances: void setClassIndex(int)>($i39);

     label046:
        actualClassIndex#60 = virtualinvoke test#6.<weka.core.Instances: int classIndex()>();

     label047:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(trainSetPresent#70);

        if trainSetPresent#70 == 0 goto label051;

        $r46 = virtualinvoke trainSource#34.<weka.core.converters.ConverterUtils$DataSource: weka.core.Instances getStructure()>();

        train#4 = $r46;

        template#8 = $r46;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classIndex#14);

        if classIndex#14 == -1 goto label048;

        $i40 = classIndex#14 - 1;

        virtualinvoke train#4.<weka.core.Instances: void setClassIndex(int)>($i40);

        goto label050;

     label048:
        $i41 = virtualinvoke train#4.<weka.core.Instances: int classIndex()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i41);

        if $i41 == -1 goto label049;

        $i42 = virtualinvoke classIndexString.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i42);

        if $i42 == 0 goto label050;

     label049:
        $i43 = virtualinvoke train#4.<weka.core.Instances: int numAttributes()>();

        $i44 = $i43 - 1;

        virtualinvoke train#4.<weka.core.Instances: void setClassIndex(int)>($i44);

     label050:
        actualClassIndex#60 = virtualinvoke train#4.<weka.core.Instances: int classIndex()>();

        $z15 = classifier#1 instanceof weka.classifiers.misc.InputMappedClassifier;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z15);

        if $z15 != 0 goto label051;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(testSetPresent#72);

        if testSetPresent#72 == 0 goto label051;

        $z16 = virtualinvoke test#6.<weka.core.Instances: boolean equalHeaders(weka.core.Instances)>(train#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z16);

        if $z16 != 0 goto label051;

        tmp$1288018012 = new java.lang.IllegalArgumentException;

        tmp$1320189408 = new java.lang.StringBuilder;

        specialinvoke tmp$1320189408.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke tmp$1320189408.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Train and test file not compatible!\n");

        $r50 = virtualinvoke test#6.<weka.core.Instances: java.lang.String equalHeadersMsg(weka.core.Instances)>(train#4);

        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke tmp$1288018012.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r52);

        throw tmp$1288018012;

     label051:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(template#8);

        if template#8 != null goto label052;

        tmp$352684782 = new java.lang.Exception;

        specialinvoke tmp$352684782.<java.lang.Exception: void <init>(java.lang.String)>("No actual dataset provided to use as template");

        throw tmp$352684782;

     label052:
        $r54 = staticinvoke <weka.core.Utils: java.lang.String getOption(char,java.lang.String[])>(109, options#2);

        $i45 = virtualinvoke template#8.<weka.core.Instances: int numClasses()>();

        costMatrix#492 = staticinvoke <weka.classifiers.evaluation.Evaluation: weka.classifiers.CostMatrix handleCostOption(java.lang.String,int)>($r54, $i45);

        $z17 = staticinvoke <weka.core.Utils: boolean getFlag(java.lang.String,java.lang.String[])>("do-not-output-per-class-statistics", options#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z17);

        if $z17 != 0 goto label053;

        $z18 = 1;

        goto label054;

     label053:
        $z18 = 0;

     label054:
        classStatistics#497 = $z18;

        noOutput#501 = staticinvoke <weka.core.Utils: boolean getFlag(char,java.lang.String[])>(111, options#2);

        $z19 = staticinvoke <weka.core.Utils: boolean getFlag(char,java.lang.String[])>(118, options#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z19);

        if $z19 != 0 goto label055;

        $z20 = 1;

        goto label056;

     label055:
        $z20 = 0;

     label056:
        trainStatistics#506 = $z20;

        printComplexityStatistics#510 = staticinvoke <weka.core.Utils: boolean getFlag(char,java.lang.String[])>(107, options#2);

        printMargins#514 = staticinvoke <weka.core.Utils: boolean getFlag(char,java.lang.String[])>(114, options#2);

        printGraph#518 = staticinvoke <weka.core.Utils: boolean getFlag(char,java.lang.String[])>(103, options#2);

        sourceClass = staticinvoke <weka.core.Utils: java.lang.String getOption(char,java.lang.String[])>(122, options#2);

        $i46 = virtualinvoke sourceClass.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i46);

        if $i46 == 0 goto label057;

        $z21 = 1;

        goto label058;

     label057:
        $z21 = 0;

     label058:
        printSource#525 = $z21;

        thresholdFile = staticinvoke <weka.core.Utils: java.lang.String getOption(java.lang.String,java.lang.String[])>("threshold-file", options#2);

        thresholdLabel = staticinvoke <weka.core.Utils: java.lang.String getOption(java.lang.String,java.lang.String[])>("threshold-label", options#2);

        forceBatchTraining#535 = staticinvoke <weka.core.Utils: boolean getFlag(java.lang.String,java.lang.String[])>("force-batch-training", options#2);

        classifications = staticinvoke <weka.core.Utils: java.lang.String getOption(java.lang.String,java.lang.String[])>("classifications", options#2);

        classificationsOld = staticinvoke <weka.core.Utils: java.lang.String getOption(java.lang.String,java.lang.String[])>("p", options#2);

        $i47 = virtualinvoke classifications.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i47);

        if $i47 <= 0 goto label060;

        noOutput#501 = 1;

        classificationOutput#78 = staticinvoke <weka.classifiers.evaluation.output.prediction.AbstractOutput: weka.classifiers.evaluation.output.prediction.AbstractOutput fromCommandline(java.lang.String)>(classifications);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classificationOutput#78);

        if classificationOutput#78 != null goto label059;

        tmp$1785766486 = new java.lang.Exception;

        tmp$913486261 = new java.lang.StringBuilder;

        specialinvoke tmp$913486261.<java.lang.StringBuilder: void <init>()>();

        $r57 = virtualinvoke tmp$913486261.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to instantiate class for classification output: ");

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(classifications);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke tmp$1785766486.<java.lang.Exception: void <init>(java.lang.String)>($r59);

        throw tmp$1785766486;

     label059:
        virtualinvoke classificationOutput#78.<weka.classifiers.evaluation.output.prediction.AbstractOutput: void setHeader(weka.core.Instances)>(template#8);

        goto label063;

     label060:
        $i48 = virtualinvoke classificationsOld.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i48);

        if $i48 <= 0 goto label062;

        noOutput#501 = 1;

        tmp$836972780 = new weka.classifiers.evaluation.output.prediction.PlainText;

        specialinvoke tmp$836972780.<weka.classifiers.evaluation.output.prediction.PlainText: void <init>()>();

        classificationOutput#78 = tmp$836972780;

        virtualinvoke classificationOutput#78.<weka.classifiers.evaluation.output.prediction.AbstractOutput: void setHeader(weka.core.Instances)>(template#8);

        $z22 = virtualinvoke classificationsOld.<java.lang.String: boolean equals(java.lang.Object)>("0");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z22);

        if $z22 != 0 goto label061;

        virtualinvoke classificationOutput#78.<weka.classifiers.evaluation.output.prediction.AbstractOutput: void setAttributes(java.lang.String)>(classificationsOld);

     label061:
        $z23 = staticinvoke <weka.core.Utils: boolean getFlag(java.lang.String,java.lang.String[])>("distribution", options#2);

        virtualinvoke classificationOutput#78.<weka.classifiers.evaluation.output.prediction.AbstractOutput: void setOutputDistribution(boolean)>($z23);

        goto label063;

     label062:
        $z24 = staticinvoke <weka.core.Utils: boolean getFlag(java.lang.String,java.lang.String[])>("distribution", options#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z24);

        if $z24 == 0 goto label063;

        tmp$1442792307 = new java.lang.Exception;

        specialinvoke tmp$1442792307.<java.lang.Exception: void <init>(java.lang.String)>("Cannot print distribution without \'-p\' option!");

        throw tmp$1442792307;

     label063:
        discardPredictions#584 = staticinvoke <weka.core.Utils: boolean getFlag(java.lang.String,java.lang.String[])>("no-predictions", options#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(discardPredictions#584);

        if discardPredictions#584 == 0 goto label064;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classificationOutput#78);

        if classificationOutput#78 == null goto label064;

        tmp$297802026 = new java.lang.Exception;

        specialinvoke tmp$297802026.<java.lang.Exception: void <init>(java.lang.String)>("Cannot discard predictions (\'-no-predictions\') and output predictions at the same time (\'-classifications/-p\')!");

        throw tmp$297802026;

     label064:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(trainSetPresent#70);

        if trainSetPresent#70 != 0 goto label065;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(printComplexityStatistics#510);

        if printComplexityStatistics#510 == 0 goto label065;

        tmp$359735016 = new java.lang.Exception;

        specialinvoke tmp$359735016.<java.lang.Exception: void <init>(java.lang.String)>("Cannot print complexity statistics (\'-k\') without training file (\'-t\')!");

        throw tmp$359735016;

     label065:
        $i49 = virtualinvoke objectInputFileName.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i49);

        if $i49 == 0 goto label066;

        staticinvoke <weka.core.Utils: void checkForRemainingOptions(java.lang.String[])>(options#2);

        goto label072;

     label066:
        $z25 = classifier#1 instanceof weka.core.OptionHandler;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z25);

        if $z25 == 0 goto label072;

        l61#601 = options#2;

        l62 = lengthof l61#601;

        l63#605 = 0;

     label067:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l63#605);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l62);

        if l63#605 >= l62 goto label071;

        option = l61#601[l63#605];

        $i50 = virtualinvoke option.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i50);

        if $i50 == 0 goto label070;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(schemeOptionsText#44);

        if schemeOptionsText#44 != null goto label068;

        tmp$1550327486 = new java.lang.StringBuffer;

        specialinvoke tmp$1550327486.<java.lang.StringBuffer: void <init>()>();

        schemeOptionsText#44 = tmp$1550327486;

     label068:
        $i51 = virtualinvoke option.<java.lang.String: int indexOf(int)>(32);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i51);

        if $i51 == -1 goto label069;

        tmp$714231677 = new java.lang.StringBuilder;

        specialinvoke tmp$714231677.<java.lang.StringBuilder: void <init>()>();

        $r66 = virtualinvoke tmp$714231677.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(option);

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" ");

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke schemeOptionsText#44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r69);

        goto label070;

     label069:
        tmp$2039980385 = new java.lang.StringBuilder;

        specialinvoke tmp$2039980385.<java.lang.StringBuilder: void <init>()>();

        $r71 = virtualinvoke tmp$2039980385.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(option);

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke schemeOptionsText#44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r73);

     label070:
        l63#605 = l63#605 + 1;

        goto label067;

     label071:
        $r74 = (weka.core.OptionHandler) classifier#1;

        interfaceinvoke $r74.<weka.core.OptionHandler: void setOptions(java.lang.String[])>(options#2);

     label072:
        staticinvoke <weka.core.Utils: void checkForRemainingOptions(java.lang.String[])>(options#2);

     label073:
        goto label075;

     label074:
        $r75 := @caughtexception;

        e = $r75;

        tmp$768911940 = new java.lang.Exception;

        tmp$985473471 = new java.lang.StringBuilder;

        specialinvoke tmp$985473471.<java.lang.StringBuilder: void <init>()>();

        $r78 = virtualinvoke tmp$985473471.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nWeka exception: ");

        $r79 = virtualinvoke e.<java.lang.Exception: java.lang.String getMessage()>();

        $r80 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r79);

        $r81 = staticinvoke <weka.classifiers.evaluation.Evaluation: java.lang.String makeOptionString(weka.classifiers.Classifier,boolean)>(classifier#1, 0);

        $r82 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r81);

        $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke tmp$768911940.<java.lang.Exception: void <init>(java.lang.String)>($r83);

        throw tmp$768911940;

     label075:
        serializedClassifierLoaded#660 = 0;

        $i52 = virtualinvoke objectInputFileName.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i52);

        if $i52 == 0 goto label082;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(objectInputStream#38);

        if objectInputStream#38 == null goto label081;

        $r84 = virtualinvoke objectInputStream#38.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        classifier#1 = (weka.classifiers.Classifier) $r84;

        savedStructure#668 = null;

     label076:
        $r85 = virtualinvoke objectInputStream#38.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        savedStructure#668 = (weka.core.Instances) $r85;

     label077:
        goto label079;

     label078:
        $r86 := @caughtexception;

     label079:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(savedStructure#668);

        if savedStructure#668 == null goto label080;

        $z26 = virtualinvoke template#8.<weka.core.Instances: boolean equalHeaders(weka.core.Instances)>(savedStructure#668);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z26);

        if $z26 != 0 goto label080;

        tmp$442080160 = new java.lang.Exception;

        tmp$532936075 = new java.lang.StringBuilder;

        specialinvoke tmp$532936075.<java.lang.StringBuilder: void <init>()>();

        $r89 = virtualinvoke tmp$532936075.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("training and test set are not compatible\n");

        $r90 = virtualinvoke template#8.<weka.core.Instances: java.lang.String equalHeadersMsg(weka.core.Instances)>(savedStructure#668);

        $r91 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r90);

        $r92 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke tmp$442080160.<java.lang.Exception: void <init>(java.lang.String)>($r92);

        throw tmp$442080160;

     label080:
        virtualinvoke objectInputStream#38.<java.io.ObjectInputStream: void close()>();

        serializedClassifierLoaded#660 = 1;

        goto label082;

     label081:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(xmlInputStream#40);

        if xmlInputStream#40 == null goto label082;

        $r93 = staticinvoke <weka.core.xml.KOML: java.lang.Object read(java.io.InputStream)>(xmlInputStream#40);

        classifier#1 = (weka.classifiers.Classifier) $r93;

        virtualinvoke xmlInputStream#40.<java.io.BufferedInputStream: void close()>();

        serializedClassifierLoaded#660 = 1;

     label082:
        tmp$712460106 = new weka.classifiers.evaluation.Evaluation;

        tmp$1391789610 = new weka.core.Instances;

        specialinvoke tmp$1391789610.<weka.core.Instances: void <init>(weka.core.Instances,int)>(template#8, 0);

        specialinvoke tmp$712460106.<weka.classifiers.evaluation.Evaluation: void <init>(weka.core.Instances,weka.classifiers.CostMatrix)>(tmp$1391789610, costMatrix#492);

        trainingEvaluation#704 = tmp$712460106;

        tmp$305442508 = new weka.classifiers.evaluation.Evaluation;

        tmp$1420139458 = new weka.core.Instances;

        specialinvoke tmp$1420139458.<weka.core.Instances: void <init>(weka.core.Instances,int)>(template#8, 0);

        specialinvoke tmp$305442508.<weka.classifiers.evaluation.Evaluation: void <init>(weka.core.Instances,weka.classifiers.CostMatrix)>(tmp$1420139458, costMatrix#492);

        testingEvaluation#712 = tmp$305442508;

        $z27 = classifier#1 instanceof weka.classifiers.misc.InputMappedClassifier;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z27);

        if $z27 == 0 goto label083;

        $r98 = (weka.classifiers.misc.InputMappedClassifier) classifier#1;

        tmp$481942733 = new weka.core.Instances;

        specialinvoke tmp$481942733.<weka.core.Instances: void <init>(weka.core.Instances,int)>(template#8, 0);

        mappedClassifierHeader = virtualinvoke $r98.<weka.classifiers.misc.InputMappedClassifier: weka.core.Instances getModelHeader(weka.core.Instances)>(tmp$481942733);

        tmp$21790020 = new weka.classifiers.evaluation.Evaluation;

        tmp$1724809783 = new weka.core.Instances;

        specialinvoke tmp$1724809783.<weka.core.Instances: void <init>(weka.core.Instances,int)>(mappedClassifierHeader, 0);

        specialinvoke tmp$21790020.<weka.classifiers.evaluation.Evaluation: void <init>(weka.core.Instances,weka.classifiers.CostMatrix)>(tmp$1724809783, costMatrix#492);

        trainingEvaluation#704 = tmp$21790020;

        tmp$657187178 = new weka.classifiers.evaluation.Evaluation;

        tmp$445843069 = new weka.core.Instances;

        specialinvoke tmp$445843069.<weka.core.Instances: void <init>(weka.core.Instances,int)>(mappedClassifierHeader, 0);

        specialinvoke tmp$657187178.<weka.classifiers.evaluation.Evaluation: void <init>(weka.core.Instances,weka.classifiers.CostMatrix)>(tmp$445843069, costMatrix#492);

        testingEvaluation#712 = tmp$657187178;

     label083:
        virtualinvoke trainingEvaluation#704.<weka.classifiers.evaluation.Evaluation: void setDiscardPredictions(boolean)>(discardPredictions#584);

        virtualinvoke trainingEvaluation#704.<weka.classifiers.evaluation.Evaluation: void toggleEvalMetrics(java.util.List)>(toggleList);

        virtualinvoke testingEvaluation#712.<weka.classifiers.evaluation.Evaluation: void setDiscardPredictions(boolean)>(discardPredictions#584);

        virtualinvoke testingEvaluation#712.<weka.classifiers.evaluation.Evaluation: void toggleEvalMetrics(java.util.List)>(toggleList);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(trainSetPresent#70);

        if trainSetPresent#70 != 0 goto label084;

        virtualinvoke testingEvaluation#712.<weka.classifiers.evaluation.Evaluation: void useNoPriors()>();

     label084:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(serializedClassifierLoaded#660);

        if serializedClassifierLoaded#660 != 0 goto label085;

        classifierBackup#58 = staticinvoke <weka.classifiers.AbstractClassifier: weka.classifiers.Classifier makeCopy(weka.classifiers.Classifier)>(classifier#1);

     label085:
        $z28 = classifier#1 instanceof weka.classifiers.UpdateableClassifier;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z28);

        if $z28 == 0 goto label090;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(testSetPresent#72);

        if testSetPresent#72 != 0 goto label086;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(noCrossValidation#208);

        if noCrossValidation#208 == 0 goto label090;

     label086:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(costMatrix#492);

        if costMatrix#492 != null goto label090;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(trainSetPresent#70);

        if trainSetPresent#70 == 0 goto label090;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(forceBatchTraining#535);

        if forceBatchTraining#535 != 0 goto label090;

        virtualinvoke trainingEvaluation#704.<weka.classifiers.evaluation.Evaluation: void setPriors(weka.core.Instances)>(train#4);

        virtualinvoke testingEvaluation#712.<weka.classifiers.evaluation.Evaluation: void setPriors(weka.core.Instances)>(train#4);

        trainTimeStart#761 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $i53 = virtualinvoke objectInputFileName.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i53);

        if $i53 != 0 goto label087;

        interfaceinvoke classifier#1.<weka.classifiers.Classifier: void buildClassifier(weka.core.Instances)>(train#4);

     label087:
        $z29 = virtualinvoke trainSource#34.<weka.core.converters.ConverterUtils$DataSource: boolean hasMoreElements(weka.core.Instances)>(train#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z29);

        if $z29 == 0 goto label088;

        trainInst#772 = virtualinvoke trainSource#34.<weka.core.converters.ConverterUtils$DataSource: weka.core.Instance nextElement(weka.core.Instances)>(train#4);

        virtualinvoke trainingEvaluation#704.<weka.classifiers.evaluation.Evaluation: void updatePriors(weka.core.Instance)>(trainInst#772);

        virtualinvoke testingEvaluation#712.<weka.classifiers.evaluation.Evaluation: void updatePriors(weka.core.Instance)>(trainInst#772);

        $r104 = (weka.classifiers.UpdateableClassifier) classifier#1;

        interfaceinvoke $r104.<weka.classifiers.UpdateableClassifier: void updateClassifier(weka.core.Instance)>(trainInst#772);

        goto label087;

     label088:
        $z30 = classifier#1 instanceof weka.classifiers.UpdateableBatchProcessor;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z30);

        if $z30 == 0 goto label089;

        $r105 = (weka.classifiers.UpdateableBatchProcessor) classifier#1;

        interfaceinvoke $r105.<weka.classifiers.UpdateableBatchProcessor: void batchFinished()>();

     label089:
        $l54 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        trainTimeElapsed#48 = $l54 - trainTimeStart#761;

        goto label094;

     label090:
        $i55 = virtualinvoke objectInputFileName.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i55);

        if $i55 != 0 goto label094;

        tempTrain#792 = virtualinvoke trainSource#34.<weka.core.converters.ConverterUtils$DataSource: weka.core.Instances getDataSet(int)>(actualClassIndex#60);

        $z31 = classifier#1 instanceof weka.classifiers.misc.InputMappedClassifier;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z31);

        if $z31 == 0 goto label093;

        $r106 = virtualinvoke trainingEvaluation#704.<weka.classifiers.evaluation.Evaluation: weka.core.Instances getHeader()>();

        $z32 = virtualinvoke $r106.<weka.core.Instances: boolean equalHeaders(weka.core.Instances)>(tempTrain#792);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z32);

        if $z32 != 0 goto label093;

        $r107 = (weka.classifiers.misc.InputMappedClassifier) classifier#1;

        tmp$1513834334 = new weka.core.Instances;

        specialinvoke tmp$1513834334.<weka.core.Instances: void <init>(weka.core.Instances,int)>(template#8, 0);

        mappedClassifierDataset = virtualinvoke $r107.<weka.classifiers.misc.InputMappedClassifier: weka.core.Instances getModelHeader(weka.core.Instances)>(tmp$1513834334);

        zz#807 = 0;

     label091:
        $i56 = virtualinvoke tempTrain#792.<weka.core.Instances: int numInstances()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(zz#807);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i56);

        if zz#807 >= $i56 goto label092;

        $r109 = (weka.classifiers.misc.InputMappedClassifier) classifier#1;

        $r110 = virtualinvoke tempTrain#792.<weka.core.Instances: weka.core.Instance instance(int)>(zz#807);

        mapped = virtualinvoke $r109.<weka.classifiers.misc.InputMappedClassifier: weka.core.Instance constructMappedInstance(weka.core.Instance)>($r110);

        virtualinvoke mappedClassifierDataset.<weka.core.Instances: boolean add(weka.core.Instance)>(mapped);

        zz#807 = zz#807 + 1;

        goto label091;

     label092:
        tempTrain#792 = mappedClassifierDataset;

     label093:
        virtualinvoke trainingEvaluation#704.<weka.classifiers.evaluation.Evaluation: void setPriors(weka.core.Instances)>(tempTrain#792);

        virtualinvoke testingEvaluation#712.<weka.classifiers.evaluation.Evaluation: void setPriors(weka.core.Instances)>(tempTrain#792);

        trainTimeStart#826 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        interfaceinvoke classifier#1.<weka.classifiers.Classifier: void buildClassifier(weka.core.Instances)>(tempTrain#792);

        $l57 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        trainTimeElapsed#48 = $l57 - trainTimeStart#826;

     label094:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classificationOutput#78);

        if classificationOutput#78 == null goto label095;

        $z33 = classifier#1 instanceof weka.classifiers.misc.InputMappedClassifier;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z33);

        if $z33 == 0 goto label095;

        $r111 = virtualinvoke trainingEvaluation#704.<weka.classifiers.evaluation.Evaluation: weka.core.Instances getHeader()>();

        virtualinvoke classificationOutput#78.<weka.classifiers.evaluation.output.prediction.AbstractOutput: void setHeader(weka.core.Instances)>($r111);

     label095:
        $i58 = virtualinvoke objectOutputFileName.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i58);

        if $i58 == 0 goto label102;

        tmp$522701441 = new java.io.FileOutputStream;

        specialinvoke tmp$522701441.<java.io.FileOutputStream: void <init>(java.lang.String)>(objectOutputFileName);

        os#843 = tmp$522701441;

        $z34 = virtualinvoke objectOutputFileName.<java.lang.String: boolean endsWith(java.lang.String)>(".xml");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z34);

        if $z34 != 0 goto label099;

        $z35 = virtualinvoke objectOutputFileName.<java.lang.String: boolean endsWith(java.lang.String)>(".koml");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z35);

        if $z35 == 0 goto label096;

        $z36 = staticinvoke <weka.core.xml.KOML: boolean isPresent()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z36);

        if $z36 != 0 goto label099;

     label096:
        $z37 = virtualinvoke objectOutputFileName.<java.lang.String: boolean endsWith(java.lang.String)>(".gz");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z37);

        if $z37 == 0 goto label097;

        tmp$263787335 = new java.util.zip.GZIPOutputStream;

        tmp$2087298394 = (java.io.OutputStream) os#843;

        specialinvoke tmp$263787335.<java.util.zip.GZIPOutputStream: void <init>(java.io.OutputStream)>(tmp$2087298394);

        os#843 = tmp$263787335;

     label097:
        tmp$867470565 = new java.io.ObjectOutputStream;

        tmp$143692007 = (java.io.OutputStream) os#843;

        specialinvoke tmp$867470565.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>(tmp$143692007);

        objectOutputStream = tmp$867470565;

        virtualinvoke objectOutputStream.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(classifier#1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(template#8);

        if template#8 == null goto label098;

        virtualinvoke objectOutputStream.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(template#8);

     label098:
        virtualinvoke objectOutputStream.<java.io.ObjectOutputStream: void flush()>();

        virtualinvoke objectOutputStream.<java.io.ObjectOutputStream: void close()>();

        goto label102;

     label099:
        tmp$1048636262 = new java.io.BufferedOutputStream;

        tmp$64377384 = (java.io.OutputStream) os#843;

        specialinvoke tmp$1048636262.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>(tmp$64377384);

        xmlOutputStream = tmp$1048636262;

        $z38 = virtualinvoke objectOutputFileName.<java.lang.String: boolean endsWith(java.lang.String)>(".xml");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z38);

        if $z38 == 0 goto label100;

        tmp$176090693 = new weka.classifiers.xml.XMLClassifier;

        specialinvoke tmp$176090693.<weka.classifiers.xml.XMLClassifier: void <init>()>();

        xmlSerial = tmp$176090693;

        virtualinvoke xmlSerial.<weka.core.xml.XMLSerialization: void write(java.io.OutputStream,java.lang.Object)>(xmlOutputStream, classifier#1);

        goto label101;

     label100:
        $z39 = virtualinvoke objectOutputFileName.<java.lang.String: boolean endsWith(java.lang.String)>(".koml");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z39);

        if $z39 == 0 goto label101;

        staticinvoke <weka.core.xml.KOML: boolean write(java.io.OutputStream,java.lang.Object)>(xmlOutputStream, classifier#1);

     label101:
        virtualinvoke xmlOutputStream.<java.io.BufferedOutputStream: void close()>();

     label102:
        $z40 = classifier#1 instanceof weka.core.Drawable;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z40);

        if $z40 == 0 goto label103;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(printGraph#518);

        if printGraph#518 == 0 goto label103;

        $r117 = (weka.core.Drawable) classifier#1;

        $r118 = interfaceinvoke $r117.<weka.core.Drawable: java.lang.String graph()>();

        return $r118;

     label103:
        $z41 = classifier#1 instanceof weka.classifiers.Sourcable;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z41);

        if $z41 == 0 goto label104;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(printSource#525);

        if printSource#525 == 0 goto label104;

        $r119 = (weka.classifiers.Sourcable) classifier#1;

        $r120 = staticinvoke <weka.classifiers.evaluation.Evaluation: java.lang.String wekaStaticWrapper(weka.classifiers.Sourcable,java.lang.String)>($r119, sourceClass);

        return $r120;

     label104:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(noOutput#501);

        if noOutput#501 != 0 goto label106;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(printMargins#514);

        if printMargins#514 != 0 goto label106;

        $z42 = classifier#1 instanceof weka.core.OptionHandler;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z42);

        if $z42 == 0 goto label105;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(schemeOptionsText#44);

        if schemeOptionsText#44 == null goto label105;

        tmp$1841806553 = new java.lang.StringBuilder;

        specialinvoke tmp$1841806553.<java.lang.StringBuilder: void <init>()>();

        $r122 = virtualinvoke tmp$1841806553.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nOptions: ");

        $r123 = virtualinvoke $r122.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(schemeOptionsText#44);

        $r124 = virtualinvoke $r123.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r124);

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

     label105:
        tmp$1494254287 = new java.lang.StringBuilder;

        specialinvoke tmp$1494254287.<java.lang.StringBuilder: void <init>()>();

        $r126 = virtualinvoke tmp$1494254287.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r127 = virtualinvoke classifier#1.<java.lang.Object: java.lang.String toString()>();

        $r128 = virtualinvoke $r126.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r127);

        $r129 = virtualinvoke $r128.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r130 = virtualinvoke $r129.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r130);

     label106:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(printMargins#514);

        if printMargins#514 != 0 goto label107;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(costMatrix#492);

        if costMatrix#492 == null goto label107;

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n=== Evaluation Cost Matrix ===\n\n");

        $r131 = virtualinvoke costMatrix#492.<weka.classifiers.CostMatrix: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r131);

     label107:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classificationOutput#78);

        if classificationOutput#78 == null goto label110;

        source#938 = testSource#36;

        tmp$1888156681 = new java.lang.StringBuffer;

        specialinvoke tmp$1888156681.<java.lang.StringBuffer: void <init>()>();

        predsBuff#76 = tmp$1888156681;

        virtualinvoke classificationOutput#78.<weka.classifiers.evaluation.output.prediction.AbstractOutput: void setBuffer(java.lang.StringBuffer)>(predsBuff#76);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(source#938);

        if source#938 != null goto label108;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(noCrossValidation#208);

        if noCrossValidation#208 == 0 goto label108;

        source#938 = trainSource#34;

        virtualinvoke predsBuff#76.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n=== Predictions on training data ===\n\n");

        goto label109;

     label108:
        virtualinvoke predsBuff#76.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n=== Predictions on test data ===\n\n");

     label109:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(source#938);

        if source#938 == null goto label110;

        virtualinvoke classificationOutput#78.<weka.classifiers.evaluation.output.prediction.AbstractOutput: void print(weka.classifiers.Classifier,weka.core.converters.ConverterUtils$DataSource)>(classifier#1, source#938);

     label110:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(trainStatistics#506);

        if trainStatistics#506 == 0 goto label122;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(trainSetPresent#70);

        if trainSetPresent#70 == 0 goto label122;

        $z43 = classifier#1 instanceof weka.classifiers.UpdateableClassifier;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z43);

        if $z43 == 0 goto label114;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(testSetPresent#72);

        if testSetPresent#72 != 0 goto label111;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(noCrossValidation#208);

        if noCrossValidation#208 == 0 goto label114;

     label111:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(costMatrix#492);

        if costMatrix#492 != null goto label114;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(forceBatchTraining#535);

        if forceBatchTraining#535 != 0 goto label114;

        virtualinvoke trainSource#34.<weka.core.converters.ConverterUtils$DataSource: void reset()>();

        train#968 = virtualinvoke trainSource#34.<weka.core.converters.ConverterUtils$DataSource: weka.core.Instances getStructure(int)>(actualClassIndex#60);

        testTimeStart#970 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label112:
        $z44 = virtualinvoke trainSource#34.<weka.core.converters.ConverterUtils$DataSource: boolean hasMoreElements(weka.core.Instances)>(train#968);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z44);

        if $z44 == 0 goto label113;

        trainInst#977 = virtualinvoke trainSource#34.<weka.core.converters.ConverterUtils$DataSource: weka.core.Instance nextElement(weka.core.Instances)>(train#968);

        virtualinvoke trainingEvaluation#704.<weka.classifiers.evaluation.Evaluation: double evaluateModelOnce(weka.classifiers.Classifier,weka.core.Instance)>(classifier#1, trainInst#977);

        goto label112;

     label113:
        $l59 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        testTimeElapsed#985 = $l59 - testTimeStart#970;

        goto label115;

     label114:
        testTimeStart#987 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r133 = virtualinvoke trainSource#34.<weka.core.converters.ConverterUtils$DataSource: weka.core.Instances getDataSet(int)>(actualClassIndex#60);

        $r134 = newarray (java.lang.Object)[0];

        virtualinvoke trainingEvaluation#704.<weka.classifiers.evaluation.Evaluation: double[] evaluateModel(weka.classifiers.Classifier,weka.core.Instances,java.lang.Object[])>(classifier#1, $r133, $r134);

        $l60 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        testTimeElapsed#985 = $l60 - testTimeStart#987;

     label115:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(printMargins#514);

        if printMargins#514 == 0 goto label116;

        $r135 = virtualinvoke trainingEvaluation#704.<weka.classifiers.evaluation.Evaluation: java.lang.String toCumulativeMarginDistributionString()>();

        return $r135;

     label116:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classificationOutput#78);

        if classificationOutput#78 != null goto label122;

        tmp$58216053 = new java.lang.StringBuilder;

        specialinvoke tmp$58216053.<java.lang.StringBuilder: void <init>()>();

        $r137 = virtualinvoke tmp$58216053.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nTime taken to build model: ");

        $d3 = (double) trainTimeElapsed#48;

        $d4 = $d3 / 1000.0;

        $r138 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int)>($d4, 2);

        $r139 = virtualinvoke $r137.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r138);

        $r140 = virtualinvoke $r139.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" seconds");

        $r141 = virtualinvoke $r140.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r141);

        $b61 = splitPercentage#64 cmpl 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b61);

        if $b61 <= 0 goto label117;

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\nTime taken to test model on training split: ");

        goto label118;

     label117:
        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\nTime taken to test model on training data: ");

     label118:
        tmp$1499360427 = new java.lang.StringBuilder;

        specialinvoke tmp$1499360427.<java.lang.StringBuilder: void <init>()>();

        $d5 = (double) testTimeElapsed#985;

        $d6 = $d5 / 1000.0;

        $r143 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int)>($d6, 2);

        $r144 = virtualinvoke tmp$1499360427.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r143);

        $r145 = virtualinvoke $r144.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" seconds");

        $r146 = virtualinvoke $r145.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r146);

        $b62 = splitPercentage#64 cmpl 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b62);

        if $b62 <= 0 goto label119;

        $r147 = virtualinvoke trainingEvaluation#704.<weka.classifiers.evaluation.Evaluation: java.lang.String toSummaryString(java.lang.String,boolean)>("\n\n=== Error on training split ===\n", printComplexityStatistics#510);

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r147);

        goto label120;

     label119:
        $r148 = virtualinvoke trainingEvaluation#704.<weka.classifiers.evaluation.Evaluation: java.lang.String toSummaryString(java.lang.String,boolean)>("\n\n=== Error on training data ===\n", printComplexityStatistics#510);

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r148);

     label120:
        $r149 = virtualinvoke template#8.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z45 = virtualinvoke $r149.<weka.core.Attribute: boolean isNominal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z45);

        if $z45 == 0 goto label122;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classStatistics#497);

        if classStatistics#497 == 0 goto label121;

        tmp$1530462160 = new java.lang.StringBuilder;

        specialinvoke tmp$1530462160.<java.lang.StringBuilder: void <init>()>();

        $r151 = virtualinvoke tmp$1530462160.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\n");

        $r152 = virtualinvoke trainingEvaluation#704.<weka.classifiers.evaluation.Evaluation: java.lang.String toClassDetailsString()>();

        $r153 = virtualinvoke $r151.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r152);

        $r154 = virtualinvoke $r153.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r154);

     label121:
        tmp$313986277 = new java.lang.StringBuilder;

        specialinvoke tmp$313986277.<java.lang.StringBuilder: void <init>()>();

        $r156 = virtualinvoke tmp$313986277.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\n");

        $r157 = virtualinvoke trainingEvaluation#704.<weka.classifiers.evaluation.Evaluation: java.lang.String toMatrixString()>();

        $r158 = virtualinvoke $r156.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r157);

        $r159 = virtualinvoke $r158.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r159);

     label122:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(testSource#36);

        if testSource#36 == null goto label127;

        virtualinvoke testSource#36.<weka.core.converters.ConverterUtils$DataSource: void reset()>();

        $z46 = classifier#1 instanceof weka.core.BatchPredictor;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z46);

        if $z46 == 0 goto label123;

        $r160 = (weka.core.BatchPredictor) classifier#1;

        $z47 = interfaceinvoke $r160.<weka.core.BatchPredictor: boolean implementsMoreEfficientBatchPrediction()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z47);

        if $z47 == 0 goto label123;

        $i63 = virtualinvoke test#6.<weka.core.Instances: int classIndex()>();

        $r161 = virtualinvoke testSource#36.<weka.core.converters.ConverterUtils$DataSource: weka.core.Instances getDataSet(int)>($i63);

        $r162 = newarray (java.lang.Object)[0];

        virtualinvoke testingEvaluation#712.<weka.classifiers.evaluation.Evaluation: double[] evaluateModel(weka.classifiers.Classifier,weka.core.Instances,java.lang.Object[])>(classifier#1, $r161, $r162);

        goto label125;

     label123:
        $i64 = virtualinvoke test#6.<weka.core.Instances: int classIndex()>();

        test#1101 = virtualinvoke testSource#36.<weka.core.converters.ConverterUtils$DataSource: weka.core.Instances getStructure(int)>($i64);

     label124:
        $z48 = virtualinvoke testSource#36.<weka.core.converters.ConverterUtils$DataSource: boolean hasMoreElements(weka.core.Instances)>(test#1101);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z48);

        if $z48 == 0 goto label125;

        testInst = virtualinvoke testSource#36.<weka.core.converters.ConverterUtils$DataSource: weka.core.Instance nextElement(weka.core.Instances)>(test#1101);

        virtualinvoke testingEvaluation#712.<weka.classifiers.evaluation.Evaluation: double evaluateModelOnceAndRecordPrediction(weka.classifiers.Classifier,weka.core.Instance)>(classifier#1, testInst);

        goto label124;

     label125:
        $b65 = splitPercentage#64 cmpl 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b65);

        if $b65 <= 0 goto label126;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classificationOutput#78);

        if classificationOutput#78 != null goto label130;

        tmp$77408112 = new java.lang.StringBuilder;

        specialinvoke tmp$77408112.<java.lang.StringBuilder: void <init>()>();

        $r164 = virtualinvoke tmp$77408112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\n");

        $r165 = virtualinvoke testingEvaluation#712.<weka.classifiers.evaluation.Evaluation: java.lang.String toSummaryString(java.lang.String,boolean)>("=== Error on test split ===\n", printComplexityStatistics#510);

        $r166 = virtualinvoke $r164.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r165);

        $r167 = virtualinvoke $r166.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r167);

        goto label130;

     label126:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classificationOutput#78);

        if classificationOutput#78 != null goto label130;

        tmp$652911402 = new java.lang.StringBuilder;

        specialinvoke tmp$652911402.<java.lang.StringBuilder: void <init>()>();

        $r169 = virtualinvoke tmp$652911402.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\n");

        $r170 = virtualinvoke testingEvaluation#712.<weka.classifiers.evaluation.Evaluation: java.lang.String toSummaryString(java.lang.String,boolean)>("=== Error on test data ===\n", printComplexityStatistics#510);

        $r171 = virtualinvoke $r169.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r170);

        $r172 = virtualinvoke $r171.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r172);

        goto label130;

     label127:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(trainSource#34);

        if trainSource#34 == null goto label130;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(noCrossValidation#208);

        if noCrossValidation#208 != 0 goto label130;

        tmp$1873586702 = new java.util.Random;

        $l66 = (long) seed#10;

        specialinvoke tmp$1873586702.<java.util.Random: void <init>(long)>($l66);

        random = tmp$1873586702;

        classifier#1149 = staticinvoke <weka.classifiers.AbstractClassifier: weka.classifiers.Classifier makeCopy(weka.classifiers.Classifier)>(classifierBackup#58);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classificationOutput#78);

        if classificationOutput#78 != null goto label129;

        $r174 = virtualinvoke trainSource#34.<weka.core.converters.ConverterUtils$DataSource: weka.core.Instances getDataSet(int)>(actualClassIndex#60);

        $r175 = newarray (java.lang.Object)[0];

        virtualinvoke testingEvaluation#712.<weka.classifiers.evaluation.Evaluation: void crossValidateModel(weka.classifiers.Classifier,weka.core.Instances,int,java.util.Random,java.lang.Object[])>(classifier#1149, $r174, folds#12, random, $r175);

        $r176 = virtualinvoke template#8.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z49 = virtualinvoke $r176.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z49);

        if $z49 == 0 goto label128;

        tmp$310478581 = new java.lang.StringBuilder;

        specialinvoke tmp$310478581.<java.lang.StringBuilder: void <init>()>();

        $r178 = virtualinvoke tmp$310478581.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\n\n");

        $r179 = virtualinvoke testingEvaluation#712.<weka.classifiers.evaluation.Evaluation: java.lang.String toSummaryString(java.lang.String,boolean)>("=== Cross-validation ===\n", printComplexityStatistics#510);

        $r180 = virtualinvoke $r178.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r179);

        $r181 = virtualinvoke $r180.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r181);

        goto label130;

     label128:
        tmp$670244807 = new java.lang.StringBuilder;

        specialinvoke tmp$670244807.<java.lang.StringBuilder: void <init>()>();

        $r183 = virtualinvoke tmp$670244807.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\n\n");

        $r184 = virtualinvoke testingEvaluation#712.<weka.classifiers.evaluation.Evaluation: java.lang.String toSummaryString(java.lang.String,boolean)>("=== Stratified cross-validation ===\n", printComplexityStatistics#510);

        $r185 = virtualinvoke $r183.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r184);

        $r186 = virtualinvoke $r185.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r186);

        goto label130;

     label129:
        tmp$1416048989 = new java.lang.StringBuffer;

        specialinvoke tmp$1416048989.<java.lang.StringBuffer: void <init>()>();

        predsBuff#76 = tmp$1416048989;

        virtualinvoke classificationOutput#78.<weka.classifiers.evaluation.output.prediction.AbstractOutput: void setBuffer(java.lang.StringBuffer)>(predsBuff#76);

        virtualinvoke predsBuff#76.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n=== Predictions under cross-validation ===\n\n");

        $r188 = virtualinvoke trainSource#34.<weka.core.converters.ConverterUtils$DataSource: weka.core.Instances getDataSet(int)>(actualClassIndex#60);

        $r189 = newarray (java.lang.Object)[1];

        $r189[0] = classificationOutput#78;

        virtualinvoke testingEvaluation#712.<weka.classifiers.evaluation.Evaluation: void crossValidateModel(weka.classifiers.Classifier,weka.core.Instances,int,java.util.Random,java.lang.Object[])>(classifier#1149, $r188, folds#12, random, $r189);

     label130:
        $r190 = virtualinvoke template#8.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z50 = virtualinvoke $r190.<weka.core.Attribute: boolean isNominal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z50);

        if $z50 == 0 goto label133;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classificationOutput#78);

        if classificationOutput#78 != null goto label133;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(noCrossValidation#208);

        if noCrossValidation#208 == 0 goto label131;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(testSource#36);

        if testSource#36 == null goto label133;

     label131:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classStatistics#497);

        if classStatistics#497 == 0 goto label132;

        tmp$1873927974 = new java.lang.StringBuilder;

        specialinvoke tmp$1873927974.<java.lang.StringBuilder: void <init>()>();

        $r192 = virtualinvoke tmp$1873927974.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\n");

        $r193 = virtualinvoke testingEvaluation#712.<weka.classifiers.evaluation.Evaluation: java.lang.String toClassDetailsString()>();

        $r194 = virtualinvoke $r192.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r193);

        $r195 = virtualinvoke $r194.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r195);

     label132:
        tmp$894434506 = new java.lang.StringBuilder;

        specialinvoke tmp$894434506.<java.lang.StringBuilder: void <init>()>();

        $r197 = virtualinvoke tmp$894434506.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\n");

        $r198 = virtualinvoke testingEvaluation#712.<weka.classifiers.evaluation.Evaluation: java.lang.String toMatrixString()>();

        $r199 = virtualinvoke $r197.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r198);

        $r200 = virtualinvoke $r199.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r200);

     label133:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(predsBuff#76);

        if predsBuff#76 == null goto label134;

        tmp$466903164 = new java.lang.StringBuilder;

        specialinvoke tmp$466903164.<java.lang.StringBuilder: void <init>()>();

        $r202 = virtualinvoke tmp$466903164.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r203 = virtualinvoke $r202.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(predsBuff#76);

        $r204 = virtualinvoke $r203.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r204);

     label134:
        $i67 = virtualinvoke thresholdFile.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i67);

        if $i67 == 0 goto label137;

        $r205 = virtualinvoke template#8.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z51 = virtualinvoke $r205.<weka.core.Attribute: boolean isNominal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z51);

        if $z51 == 0 goto label137;

        labelIndex#1246 = 0;

        $i68 = virtualinvoke thresholdLabel.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i68);

        if $i68 == 0 goto label135;

        $r206 = virtualinvoke template#8.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        labelIndex#1246 = virtualinvoke $r206.<weka.core.Attribute: int indexOfValue(java.lang.String)>(thresholdLabel);

     label135:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(labelIndex#1246);

        if labelIndex#1246 != -1 goto label136;

        tmp$1527064819 = new java.lang.IllegalArgumentException;

        tmp$2000965496 = new java.lang.StringBuilder;

        specialinvoke tmp$2000965496.<java.lang.StringBuilder: void <init>()>();

        $r209 = virtualinvoke tmp$2000965496.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class label \'");

        $r210 = virtualinvoke $r209.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(thresholdLabel);

        $r211 = virtualinvoke $r210.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is unknown!");

        $r212 = virtualinvoke $r211.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke tmp$1527064819.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r212);

        throw tmp$1527064819;

     label136:
        tmp$161632074 = new weka.classifiers.evaluation.ThresholdCurve;

        specialinvoke tmp$161632074.<weka.classifiers.evaluation.ThresholdCurve: void <init>()>();

        tc = tmp$161632074;

        $r214 = virtualinvoke testingEvaluation#712.<weka.classifiers.evaluation.Evaluation: java.util.ArrayList predictions()>();

        result = virtualinvoke tc.<weka.classifiers.evaluation.ThresholdCurve: weka.core.Instances getCurve(java.util.ArrayList,int)>($r214, labelIndex#1246);

        staticinvoke <weka.core.converters.ConverterUtils$DataSink: void write(java.lang.String,weka.core.Instances)>(thresholdFile, result);

     label137:
        $r215 = virtualinvoke text.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r215;

        catch java.lang.IllegalArgumentException from label011 to label012 with label013;
        catch java.lang.Exception from label024 to label031 with label032;
        catch java.lang.Exception from label007 to label073 with label074;
        catch java.lang.Exception from label076 to label077 with label078;
    }

    public static java.lang.String wekaStaticWrapper(weka.classifiers.Sourcable, java.lang.String) throws java.lang.Exception
    {
        weka.classifiers.Sourcable classifier;
        java.lang.String className, staticClassifier, $r3, $r6, $r16, $r49, $r89, $r111, $r114, $r119, $r134;
        java.lang.StringBuffer result, $r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r11, $r12, $r14, $r15, $r85, $r86, $r87, $r88, $r108, $r109, $r112, $r113, $r115, $r116, $r117, $r118;
        java.util.Date $r13;
        weka.classifiers.Classifier $r47;
        weka.core.Capabilities $r48;
        java.lang.Class $r110;

        classifier := @parameter0: weka.classifiers.Sourcable;

        className := @parameter1: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        result = $r0;

        staticClassifier = interfaceinvoke classifier.<weka.classifiers.Sourcable: java.lang.String toSource(java.lang.String)>(className);

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("// Generated with Weka ");

        $r3 = <weka.core.Version: java.lang.String VERSION>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("//\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("// This code is public domain and comes with no warranty.\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("//\n");

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("// Timestamp: ");

        $r13 = new java.util.Date;

        specialinvoke $r13.<java.util.Date: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("package weka.classifiers;\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("import weka.core.Attribute;\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("import weka.core.Capabilities;\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("import weka.core.Capabilities.Capability;\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("import weka.core.Instance;\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("import weka.core.Instances;\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("import weka.core.RevisionUtils;\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("import weka.classifiers.Classifier;\nimport weka.classifiers.AbstractClassifier;\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("public class WekaWrapper\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  extends AbstractClassifier {\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  /**\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   * Returns only the toString() method.\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   *\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   * @return a string describing the classifier\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   */\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  public String globalInfo() {\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("    return toString();\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  }\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  /**\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   * Returns the capabilities of this classifier.\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   *\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   * @return the capabilities\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   */\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  public Capabilities getCapabilities() {\n");

        $r47 = (weka.classifiers.Classifier) classifier;

        $r48 = interfaceinvoke $r47.<weka.classifiers.Classifier: weka.core.Capabilities getCapabilities()>();

        $r49 = virtualinvoke $r48.<weka.core.Capabilities: java.lang.String toSource(java.lang.String,int)>("result", 4);

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r49);

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("    return result;\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  }\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  /**\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   * only checks the data against its capabilities.\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   *\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   * @param i the training data\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   */\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  public void buildClassifier(Instances i) throws Exception {\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("    // can classifier handle the data?\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("    getCapabilities().testWithFail(i);\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  }\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  /**\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   * Classifies the given instance.\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   *\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   * @param i the instance to classify\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   * @return the classification result\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   */\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  public double classifyInstance(Instance i) throws Exception {\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("    Object[] s = new Object[i.numAttributes()];\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("    \n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("    for (int j = 0; j < s.length; j++) {\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("      if (!i.isMissing(j)) {\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("        if (i.attribute(j).isNominal())\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("          s[j] = new String(i.stringValue(j));\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("        else if (i.attribute(j).isNumeric())\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("          s[j] = new Double(i.value(j));\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("      }\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("    }\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("    \n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("    // set class value to missing\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("    s[i.classIndex()] = null;\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("    \n");

        $r85 = new java.lang.StringBuilder;

        specialinvoke $r85.<java.lang.StringBuilder: void <init>()>();

        $r86 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    return ");

        $r87 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(className);

        $r88 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".classify(s);\n");

        $r89 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r89);

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  }\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  /**\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   * Returns the revision string.\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   * \n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   * @return        the revision\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   */\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  public String getRevision() {\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("    return RevisionUtils.extract(\"1.0\");\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  }\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  /**\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   * Returns only the classnames and what classifier it is based on.\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   *\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   * @return a short description\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   */\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  public String toString() {\n");

        $r108 = new java.lang.StringBuilder;

        specialinvoke $r108.<java.lang.StringBuilder: void <init>()>();

        $r109 = virtualinvoke $r108.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    return \"Auto-generated classifier wrapper, based on ");

        $r110 = virtualinvoke classifier.<java.lang.Object: java.lang.Class getClass()>();

        $r111 = virtualinvoke $r110.<java.lang.Class: java.lang.String getName()>();

        $r112 = virtualinvoke $r109.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r111);

        $r113 = virtualinvoke $r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (generated with Weka ");

        $r114 = <weka.core.Version: java.lang.String VERSION>;

        $r115 = virtualinvoke $r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r114);

        $r116 = virtualinvoke $r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").\\n\" + this.getClass().getName() + \"/");

        $r117 = virtualinvoke $r116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(className);

        $r118 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\";\n");

        $r119 = virtualinvoke $r118.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r119);

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  }\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  /**\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   * Runs the classfier from commandline.\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   *\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   * @param args the commandline arguments\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   */\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  public static void main(String args[]) {\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("    runClassifier(new WekaWrapper(), args);\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  }\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        virtualinvoke result.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(staticClassifier);

        $r134 = virtualinvoke result.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r134;
    }

    protected static java.lang.String makeOptionString(weka.classifiers.Classifier, boolean)
    {
        weka.classifiers.Classifier classifier;
        boolean globalInfo, $z0, $z1, $z2, $z5, $z6, $z7, $z8;
        java.lang.StringBuffer optionsText, $r0;
        java.util.ArrayList metricsToDisplay, pluginMetrics, $r31;
        java.util.Iterator l5, l8;
        weka.classifiers.evaluation.AbstractEvaluationMetric m;
        java.util.List statNames, $r33;
        java.lang.String s, gi, $r36, $r37, $r38, $r40, $r43, $r67, $r70, $r99, $r102, $r107, $r110, $r113, $r116, $r120;
        java.util.Enumeration enu;
        weka.core.Option option;
        java.lang.Exception l6, $r119;
        java.lang.String[] $r32;
        java.lang.Object $r34, $r35, $r39, $r42, $r105;
        int length#128, i#130, $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r64, $r65, $r68, $r69, $r96, $r97, $r100, $r101, $r106, $r108, $r109, $r112, $r114, $r115;
        java.lang.Class $r66, $r98;
        weka.core.OptionHandler $r104;

        classifier := @parameter0: weka.classifiers.Classifier;

        globalInfo := @parameter1: boolean;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(java.lang.String)>("");

        optionsText = $r0;

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\nGeneral options:\n\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-h or -help\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tOutput help information.\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-synopsis or -info\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tOutput synopsis for classifier (use in conjunction  with -h)\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-t <name of training file>\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tSets training file.\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-T <name of test file>\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tSets test file. If missing, a cross-validation will be performed\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\ton the training data.\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-c <class index>\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tSets index of class attribute (default: last).\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-x <number of folds>\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tSets number of folds for cross-validation (default: 10).\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-no-cv\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tDo not perform any cross validation.\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-force-batch-training\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tAlways train classifier in batch mode, never incrementally.\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-split-percentage <percentage>\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tSets the percentage for the train/test set split, e.g., 66.\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-preserve-order\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tPreserves the order in the percentage split.\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-s <random number seed>\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tSets random number seed for cross-validation or percentage split\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t(default: 1).\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-m <name of file with cost matrix>\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tSets file with cost matrix.\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-toggle <comma-separated list of evaluation metric names>\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tComma separated list of metric names to toggle in the output.\n\tAll metrics are output by default with the exception of \'Coverage\' and \'Region size\'.\n\t");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Available metrics:\n\t");

        $r31 = new java.util.ArrayList;

        $r32 = <weka.classifiers.evaluation.Evaluation: java.lang.String[] BUILT_IN_EVAL_METRICS>;

        $r33 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r32);

        specialinvoke $r31.<java.util.ArrayList: void <init>(java.util.Collection)>($r33);

        metricsToDisplay = $r31;

        pluginMetrics = staticinvoke <weka.classifiers.evaluation.AbstractEvaluationMetric: java.util.ArrayList getPluginMetrics()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(pluginMetrics);

        if pluginMetrics == null goto label06;

        l5 = interfaceinvoke pluginMetrics.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label06;

        $r34 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        m = (weka.classifiers.evaluation.AbstractEvaluationMetric) $r34;

        $z1 = m instanceof weka.classifiers.evaluation.InformationRetrievalEvaluationMetric;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label04;

        statNames = virtualinvoke m.<weka.classifiers.evaluation.AbstractEvaluationMetric: java.util.List getStatisticNames()>();

        l8 = interfaceinvoke statNames.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z2 = interfaceinvoke l8.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label03;

        $r35 = interfaceinvoke l8.<java.util.Iterator: java.lang.Object next()>();

        s = (java.lang.String) $r35;

        $r36 = virtualinvoke s.<java.lang.String: java.lang.String toLowerCase()>();

        interfaceinvoke metricsToDisplay.<java.util.List: boolean add(java.lang.Object)>($r36);

        goto label02;

     label03:
        goto label05;

     label04:
        $r37 = virtualinvoke m.<weka.classifiers.evaluation.AbstractEvaluationMetric: java.lang.String getMetricName()>();

        $r38 = virtualinvoke $r37.<java.lang.String: java.lang.String toLowerCase()>();

        interfaceinvoke metricsToDisplay.<java.util.List: boolean add(java.lang.Object)>($r38);

     label05:
        goto label01;

     label06:
        length#128 = 0;

        i#130 = 0;

     label07:
        $i0 = interfaceinvoke metricsToDisplay.<java.util.List: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#130);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#130 >= $i0 goto label10;

        $r39 = interfaceinvoke metricsToDisplay.<java.util.List: java.lang.Object get(int)>(i#130);

        $r40 = (java.lang.String) $r39;

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r40);

        $r42 = interfaceinvoke metricsToDisplay.<java.util.List: java.lang.Object get(int)>(i#130);

        $r43 = (java.lang.String) $r42;

        $i1 = virtualinvoke $r43.<java.lang.String: int length()>();

        length#128 = length#128 + $i1;

        $i2 = interfaceinvoke metricsToDisplay.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#130);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if i#130 == $i3 goto label08;

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

     label08:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(length#128);

        if length#128 < 60 goto label09;

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\t");

        length#128 = 0;

     label09:
        i#130 = i#130 + 1;

        goto label07;

     label10:
        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-l <name of input file>\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tSets model input file. In case the filename ends with \'.xml\',\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\ta PMML file is loaded or, if that fails, options are loaded\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tfrom the XML file.\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-d <name of output file>\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tSets model output file. In case the filename ends with \'.xml\',\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tonly the options are saved to the XML file, not the model.\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-v\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tOutputs no statistics for training data.\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-o\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tOutputs statistics only, not the classifier.\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-do-not-output-per-class-statistics\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tDo not output statistics for each class.\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-k\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tOutputs information-theoretic statistics.\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tUses the specified class for generating the classification output.\n");

        $r64 = new java.lang.StringBuilder;

        specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tE.g.: ");

        $r66 = class "weka/classifiers/evaluation/output/prediction/PlainText";

        $r67 = virtualinvoke $r66.<java.lang.Class: java.lang.String getName()>();

        $r68 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r67);

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r70);

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-p range\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tOutputs predictions for test instances (or the train instances if\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tno test instances provided and -no-cv is used), along with the \n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tattributes in the specified range (and nothing else). \n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tUse \'-p 0\' if no attributes are desired.\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tDeprecated: use \"-classifications ...\" instead.\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-distribution\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tOutputs the distribution instead of only the prediction\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tin conjunction with the \'-p\' option (only nominal classes).\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tDeprecated: use \"-classifications ...\" instead.\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-r\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tOnly outputs cumulative margin distribution.\n");

        $z5 = classifier instanceof weka.classifiers.Sourcable;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label11;

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-z <class name>\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tOnly outputs the source representation of the classifier,\n\tgiving it the supplied name.\n");

     label11:
        $z6 = classifier instanceof weka.core.Drawable;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label12;

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-g\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tOnly outputs the graph representation of the classifier.\n");

     label12:
        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-xml filename | xml-string\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tRetrieves the options from the XML-data instead of the command line.\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-threshold-file <file>\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tThe file to save the threshold data to.\n\tThe format is determined by the extensions, e.g., \'.arff\' for ARFF \n\tformat or \'.csv\' for CSV.\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-threshold-label <label>\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tThe class label to determine the threshold data for\n\t(default is the first label)\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-no-predictions\n");

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\tTurns off the collection of predictions in order to conserve memory.\n");

        $z7 = classifier instanceof weka.core.OptionHandler;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 == 0 goto label14;

        $r96 = new java.lang.StringBuilder;

        specialinvoke $r96.<java.lang.StringBuilder: void <init>()>();

        $r97 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nOptions specific to ");

        $r98 = virtualinvoke classifier.<java.lang.Object: java.lang.Class getClass()>();

        $r99 = virtualinvoke $r98.<java.lang.Class: java.lang.String getName()>();

        $r100 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r99);

        $r101 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":\n\n");

        $r102 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r102);

        $r104 = (weka.core.OptionHandler) classifier;

        enu = interfaceinvoke $r104.<weka.core.OptionHandler: java.util.Enumeration listOptions()>();

     label13:
        $z8 = interfaceinvoke enu.<java.util.Enumeration: boolean hasMoreElements()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 == 0 goto label14;

        $r105 = interfaceinvoke enu.<java.util.Enumeration: java.lang.Object nextElement()>();

        option = (weka.core.Option) $r105;

        $r106 = new java.lang.StringBuilder;

        specialinvoke $r106.<java.lang.StringBuilder: void <init>()>();

        $r107 = virtualinvoke option.<weka.core.Option: java.lang.String synopsis()>();

        $r108 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r107);

        $r109 = virtualinvoke $r108.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r110 = virtualinvoke $r109.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r110);

        $r112 = new java.lang.StringBuilder;

        specialinvoke $r112.<java.lang.StringBuilder: void <init>()>();

        $r113 = virtualinvoke option.<weka.core.Option: java.lang.String description()>();

        $r114 = virtualinvoke $r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r113);

        $r115 = virtualinvoke $r114.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r116 = virtualinvoke $r115.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r116);

        goto label13;

     label14:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(globalInfo);

        if globalInfo == 0 goto label18;

     label15:
        gi = staticinvoke <weka.classifiers.evaluation.Evaluation: java.lang.String getGlobalInfo(weka.classifiers.Classifier)>(classifier);

        virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(gi);

     label16:
        goto label18;

     label17:
        $r119 := @caughtexception;

        l6 = $r119;

     label18:
        $r120 = virtualinvoke optionsText.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r120;

        catch java.lang.Exception from label15 to label16 with label17;
    }

    protected static weka.classifiers.CostMatrix handleCostOption(java.lang.String, int) throws java.lang.Exception
    {
        java.lang.String costFileName, $r7, $r10, $r19, $r22;
        int numClasses, $i0;
        java.lang.Exception e, ex, e, $r3, $r4, $r12, $r15, $r16, $r25;
        weka.classifiers.CostMatrix costMatrix, $r11, $r23;
        java.io.PrintStream $r0;
        java.io.BufferedReader $r1, costReader#13, $r13, costReader#37;
        java.io.FileReader $r2, $r14;
        java.lang.StringBuilder $r5, $r6, $r8, $r9, $r17, $r18, $r20, $r21;

        costFileName := @parameter0: java.lang.String;

        numClasses := @parameter1: int;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(costFileName);

        if costFileName == null goto label13;

        $i0 = virtualinvoke costFileName.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 == 0 goto label13;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("NOTE: The behaviour of the -m option has changed between WEKA 3.0 and WEKA 3.1. -m now carries out cost-sensitive *evaluation* only. For cost-sensitive *prediction*, use one of the cost-sensitive metaschemes such as weka.classifiers.meta.CostSensitiveClassifier or weka.classifiers.meta.MetaCost");

     label01:
        $r1 = new java.io.BufferedReader;

        $r2 = new java.io.FileReader;

        specialinvoke $r2.<java.io.FileReader: void <init>(java.lang.String)>(costFileName);

        specialinvoke $r1.<java.io.BufferedReader: void <init>(java.io.Reader)>($r2);

        costReader#13 = $r1;

     label02:
        goto label04;

     label03:
        $r3 := @caughtexception;

        e = $r3;

        $r4 = new java.lang.Exception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t open file ");

        $r7 = virtualinvoke e.<java.lang.Exception: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.Exception: void <init>(java.lang.String)>($r10);

        throw $r4;

     label04:
        $r11 = new weka.classifiers.CostMatrix;

        specialinvoke $r11.<weka.classifiers.CostMatrix: void <init>(java.io.Reader)>(costReader#13);

     label05:
        return $r11;

     label06:
        $r12 := @caughtexception;

        ex = $r12;

     label07:
        virtualinvoke costReader#13.<java.io.Reader: void close()>();

        $r13 = new java.io.BufferedReader;

        $r14 = new java.io.FileReader;

        specialinvoke $r14.<java.io.FileReader: void <init>(java.lang.String)>(costFileName);

        specialinvoke $r13.<java.io.BufferedReader: void <init>(java.io.Reader)>($r14);

        costReader#37 = $r13;

     label08:
        goto label10;

     label09:
        $r15 := @caughtexception;

        e = $r15;

        $r16 = new java.lang.Exception;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t open file ");

        $r19 = virtualinvoke e.<java.lang.Exception: java.lang.String getMessage()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.Exception: void <init>(java.lang.String)>($r22);

        throw $r16;

     label10:
        $r23 = new weka.classifiers.CostMatrix;

        specialinvoke $r23.<weka.classifiers.CostMatrix: void <init>(int)>(numClasses);

        costMatrix = $r23;

        virtualinvoke costMatrix.<weka.classifiers.CostMatrix: void readOldFormat(java.io.Reader)>(costReader#37);

     label11:
        return costMatrix;

     label12:
        $r25 := @caughtexception;

        throw ex;

     label13:
        return null;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label04 to label05 with label06;
        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Exception from label07 to label11 with label12;
    }

    protected static java.lang.String getGlobalInfo(weka.classifiers.Classifier) throws java.lang.Exception
    {
        weka.classifiers.Classifier classifier;
        java.beans.BeanInfo bi;
        java.beans.MethodDescriptor[] methods, l5;
        java.lang.Object[] args;
        int l6, l7#24;
        java.beans.MethodDescriptor method;
        java.lang.String name, globalInfo, $r4, result#19, $r8;
        java.lang.reflect.Method meth;
        java.lang.Class $r0, $r3;
        java.lang.StringBuilder $r1, $r2, $r5, $r6, $r9, $r10, $r11;
        boolean $z0;
        java.lang.Object $r7;

        classifier := @parameter0: weka.classifiers.Classifier;

        $r0 = virtualinvoke classifier.<java.lang.Object: java.lang.Class getClass()>();

        bi = staticinvoke <java.beans.Introspector: java.beans.BeanInfo getBeanInfo(java.lang.Class)>($r0);

        methods = interfaceinvoke bi.<java.beans.BeanInfo: java.beans.MethodDescriptor[] getMethodDescriptors()>();

        args = newarray (java.lang.Object)[0];

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nSynopsis for ");

        $r3 = virtualinvoke classifier.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":\n\n");

        result#19 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        l5 = methods;

        l6 = lengthof l5;

        l7#24 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l7#24);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l6);

        if l7#24 >= l6 goto label3;

        method = l5[l7#24];

        name = virtualinvoke method.<java.beans.MethodDescriptor: java.lang.String getDisplayName()>();

        meth = virtualinvoke method.<java.beans.MethodDescriptor: java.lang.reflect.Method getMethod()>();

        $z0 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>("globalInfo");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $r7 = virtualinvoke meth.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(classifier, args);

        $r8 = (java.lang.String) $r7;

        globalInfo = (java.lang.String) $r8;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(result#19);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(globalInfo);

        result#19 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label3;

     label2:
        l7#24 = l7#24 + 1;

        goto label1;

     label3:
        return result#19;
    }

    public void <init>(weka.core.Instances, weka.classifiers.CostMatrix) throws java.lang.Exception
    {
        weka.classifiers.evaluation.Evaluation this;
        weka.core.Instances data, $r1;
        weka.classifiers.CostMatrix costMatrix, $r8, $r10;
        int l4, $i0, $i1, $i2, $i3, i#39, $i4, $i5, $i6, $i7, $i8, $i9, l5#83;
        java.lang.String s, s, $r7, $r15, $r22, $r24, $r25;
        weka.classifiers.evaluation.AbstractEvaluationMetric m;
        java.util.List statNames, $r14, $r17, $r18, $r21, $r23;
        java.util.Iterator l6, l3#107;
        java.util.ArrayList $r0, $r16;
        weka.core.Attribute $r2, $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z6, $z7, $z8;
        double[][] $r3;
        java.lang.String[] $r4, $r5, l3#79;
        java.lang.Exception $r9, $r11;
        double[] $r12, $r13;
        java.lang.Object $r19, $r20;

        this := @this: weka.classifiers.evaluation.Evaluation;

        data := @parameter0: weka.core.Instances;

        costMatrix := @parameter1: weka.classifiers.CostMatrix;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<weka.classifiers.evaluation.Evaluation: boolean m_ComplexityStatisticsAvailable> = 1;

        this.<weka.classifiers.evaluation.Evaluation: boolean m_CoverageStatisticsAvailable> = 1;

        this.<weka.classifiers.evaluation.Evaluation: double m_ConfLevel> = 0.95;

        this.<weka.classifiers.evaluation.Evaluation: boolean m_NoPriors> = 0;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay> = $r0;

        $r1 = new weka.core.Instances;

        specialinvoke $r1.<weka.core.Instances: void <init>(weka.core.Instances,int)>(data, 0);

        this.<weka.classifiers.evaluation.Evaluation: weka.core.Instances m_Header> = $r1;

        $i0 = virtualinvoke data.<weka.core.Instances: int numClasses()>();

        this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses> = $i0;

        this.<weka.classifiers.evaluation.Evaluation: int m_NumFolds> = 1;

        $r2 = virtualinvoke data.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z0 = virtualinvoke $r2.<weka.core.Attribute: boolean isNominal()>();

        this.<weka.classifiers.evaluation.Evaluation: boolean m_ClassIsNominal> = $z0;

        $z1 = this.<weka.classifiers.evaluation.Evaluation: boolean m_ClassIsNominal>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label02;

        $i1 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        $i2 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        $r3 = newmultiarray (double)[$i1][$i2];

        this.<weka.classifiers.evaluation.Evaluation: double[][] m_ConfusionMatrix> = $r3;

        $i3 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        $r4 = newarray (java.lang.String)[$i3];

        this.<weka.classifiers.evaluation.Evaluation: java.lang.String[] m_ClassNames> = $r4;

        i#39 = 0;

     label01:
        $i4 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#39);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if i#39 >= $i4 goto label02;

        $r5 = this.<weka.classifiers.evaluation.Evaluation: java.lang.String[] m_ClassNames>;

        $r6 = virtualinvoke data.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $r7 = virtualinvoke $r6.<weka.core.Attribute: java.lang.String value(int)>(i#39);

        $r5[i#39] = $r7;

        i#39 = i#39 + 1;

        goto label01;

     label02:
        this.<weka.classifiers.evaluation.Evaluation: weka.classifiers.CostMatrix m_CostMatrix> = costMatrix;

        $r8 = this.<weka.classifiers.evaluation.Evaluation: weka.classifiers.CostMatrix m_CostMatrix>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r8);

        if $r8 == null goto label04;

        $z2 = this.<weka.classifiers.evaluation.Evaluation: boolean m_ClassIsNominal>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label03;

        $r9 = new java.lang.Exception;

        specialinvoke $r9.<java.lang.Exception: void <init>(java.lang.String)>("Class has to be nominal if cost matrix given!");

        throw $r9;

     label03:
        $r10 = this.<weka.classifiers.evaluation.Evaluation: weka.classifiers.CostMatrix m_CostMatrix>;

        $i5 = virtualinvoke $r10.<weka.classifiers.CostMatrix: int size()>();

        $i6 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if $i5 == $i6 goto label04;

        $r11 = new java.lang.Exception;

        specialinvoke $r11.<java.lang.Exception: void <init>(java.lang.String)>("Cost matrix not compatible with data!");

        throw $r11;

     label04:
        $i7 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        $r12 = newarray (double)[$i7];

        this.<weka.classifiers.evaluation.Evaluation: double[] m_ClassPriors> = $r12;

        virtualinvoke this.<weka.classifiers.evaluation.Evaluation: void setPriors(weka.core.Instances)>(data);

        $i8 = <weka.classifiers.evaluation.Evaluation: int k_MarginResolution>;

        $i9 = $i8 + 1;

        $r13 = newarray (double)[$i9];

        this.<weka.classifiers.evaluation.Evaluation: double[] m_MarginCounts> = $r13;

        l3#79 = <weka.classifiers.evaluation.Evaluation: java.lang.String[] BUILT_IN_EVAL_METRICS>;

        l4 = lengthof l3#79;

        l5#83 = 0;

     label05:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l5#83);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l4);

        if l5#83 >= l4 goto label07;

        s = l3#79[l5#83];

        $z3 = virtualinvoke s.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Coverage");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label06;

        $z4 = virtualinvoke s.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Region size");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label06;

        $r14 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        $r15 = virtualinvoke s.<java.lang.String: java.lang.String toLowerCase()>();

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r15);

     label06:
        l5#83 = l5#83 + 1;

        goto label05;

     label07:
        $r16 = staticinvoke <weka.classifiers.evaluation.AbstractEvaluationMetric: java.util.ArrayList getPluginMetrics()>();

        this.<weka.classifiers.evaluation.Evaluation: java.util.List m_pluginMetrics> = $r16;

        $r17 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_pluginMetrics>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r17);

        if $r17 == null goto label13;

        $r18 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_pluginMetrics>;

        l3#107 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z6 = interfaceinvoke l3#107.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label13;

        $r19 = interfaceinvoke l3#107.<java.util.Iterator: java.lang.Object next()>();

        m = (weka.classifiers.evaluation.AbstractEvaluationMetric) $r19;

        virtualinvoke m.<weka.classifiers.evaluation.AbstractEvaluationMetric: void setBaseEvaluation(weka.classifiers.evaluation.Evaluation)>(this);

        $z7 = m instanceof weka.classifiers.evaluation.InformationRetrievalEvaluationMetric;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 == 0 goto label11;

        statNames = virtualinvoke m.<weka.classifiers.evaluation.AbstractEvaluationMetric: java.util.List getStatisticNames()>();

        l6 = interfaceinvoke statNames.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z8 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 == 0 goto label10;

        $r20 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>();

        s = (java.lang.String) $r20;

        $r21 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        $r22 = virtualinvoke s.<java.lang.String: java.lang.String toLowerCase()>();

        interfaceinvoke $r21.<java.util.List: boolean add(java.lang.Object)>($r22);

        goto label09;

     label10:
        goto label12;

     label11:
        $r23 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        $r24 = virtualinvoke m.<weka.classifiers.evaluation.AbstractEvaluationMetric: java.lang.String getMetricName()>();

        $r25 = virtualinvoke $r24.<java.lang.String: java.lang.String toLowerCase()>();

        interfaceinvoke $r23.<java.util.List: boolean add(java.lang.Object)>($r25);

     label12:
        goto label08;

     label13:
        return;
    }

    public void setPriors(weka.core.Instances) throws java.lang.Exception
    {
        weka.classifiers.evaluation.Evaluation this;
        weka.core.Instances train;
        weka.core.Instance currentInst, $r1, $r3, $r4, $r6, $r8, $r10, $r11, $r13;
        boolean $z0, $z1, $z2, $z3;
        int i#18, $i0, i#41, $i1, i#73, $i3, $i4, i#86, $i5, $i6, $i7;
        double $d0, $d1, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19;
        double[] $r0, $r2, $r7, $r9;

        this := @this: weka.classifiers.evaluation.Evaluation;

        train := @parameter0: weka.core.Instances;

        this.<weka.classifiers.evaluation.Evaluation: boolean m_NoPriors> = 0;

        $z0 = this.<weka.classifiers.evaluation.Evaluation: boolean m_ClassIsNominal>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label07;

        this.<weka.classifiers.evaluation.Evaluation: int m_NumTrainClassVals> = 0;

        this.<weka.classifiers.evaluation.Evaluation: double[] m_TrainClassVals> = null;

        this.<weka.classifiers.evaluation.Evaluation: double[] m_TrainClassWeights> = null;

        this.<weka.classifiers.evaluation.Evaluation: weka.estimators.UnivariateKernelEstimator m_PriorEstimator> = null;

        this.<weka.classifiers.evaluation.Evaluation: double m_MinTarget> = 1.7976931348623157E308;

        this.<weka.classifiers.evaluation.Evaluation: double m_MaxTarget> = -1.7976931348623157E308;

        i#18 = 0;

     label01:
        $i0 = virtualinvoke train.<weka.core.Instances: int numInstances()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#18);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#18 >= $i0 goto label03;

        currentInst = virtualinvoke train.<weka.core.Instances: weka.core.Instance instance(int)>(i#18);

        $z1 = interfaceinvoke currentInst.<weka.core.Instance: boolean classIsMissing()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label02;

        $d0 = interfaceinvoke currentInst.<weka.core.Instance: double classValue()>();

        $d1 = interfaceinvoke currentInst.<weka.core.Instance: double weight()>();

        virtualinvoke this.<weka.classifiers.evaluation.Evaluation: void addNumericTrainClass(double,double)>($d0, $d1);

     label02:
        i#18 = i#18 + 1;

        goto label01;

     label03:
        $r0 = this.<weka.classifiers.evaluation.Evaluation: double[] m_ClassPriors>;

        this.<weka.classifiers.evaluation.Evaluation: double m_ClassPriorsSum> = 0.0;

        $r0[0] = 0.0;

        i#41 = 0;

     label04:
        $i1 = virtualinvoke train.<weka.core.Instances: int numInstances()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#41);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#41 >= $i1 goto label06;

        $r1 = virtualinvoke train.<weka.core.Instances: weka.core.Instance instance(int)>(i#41);

        $z2 = interfaceinvoke $r1.<weka.core.Instance: boolean classIsMissing()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label05;

        $r2 = this.<weka.classifiers.evaluation.Evaluation: double[] m_ClassPriors>;

        $d3 = $r2[0];

        $r3 = virtualinvoke train.<weka.core.Instances: weka.core.Instance instance(int)>(i#41);

        $d4 = interfaceinvoke $r3.<weka.core.Instance: double classValue()>();

        $r4 = virtualinvoke train.<weka.core.Instances: weka.core.Instance instance(int)>(i#41);

        $d5 = interfaceinvoke $r4.<weka.core.Instance: double weight()>();

        $d6 = $d4 * $d5;

        $d7 = $d3 + $d6;

        $r2[0] = $d7;

        $d8 = this.<weka.classifiers.evaluation.Evaluation: double m_ClassPriorsSum>;

        $r6 = virtualinvoke train.<weka.core.Instances: weka.core.Instance instance(int)>(i#41);

        $d9 = interfaceinvoke $r6.<weka.core.Instance: double weight()>();

        $d10 = $d8 + $d9;

        this.<weka.classifiers.evaluation.Evaluation: double m_ClassPriorsSum> = $d10;

     label05:
        i#41 = i#41 + 1;

        goto label04;

     label06:
        goto label13;

     label07:
        i#73 = 0;

     label08:
        $i3 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#73);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if i#73 >= $i3 goto label09;

        $r7 = this.<weka.classifiers.evaluation.Evaluation: double[] m_ClassPriors>;

        $r7[i#73] = 1.0;

        i#73 = i#73 + 1;

        goto label08;

     label09:
        $i4 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        $d11 = (double) $i4;

        this.<weka.classifiers.evaluation.Evaluation: double m_ClassPriorsSum> = $d11;

        i#86 = 0;

     label10:
        $i5 = virtualinvoke train.<weka.core.Instances: int numInstances()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#86);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if i#86 >= $i5 goto label12;

        $r8 = virtualinvoke train.<weka.core.Instances: weka.core.Instance instance(int)>(i#86);

        $z3 = interfaceinvoke $r8.<weka.core.Instance: boolean classIsMissing()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label11;

        $r9 = this.<weka.classifiers.evaluation.Evaluation: double[] m_ClassPriors>;

        $r10 = virtualinvoke train.<weka.core.Instances: weka.core.Instance instance(int)>(i#86);

        $d12 = interfaceinvoke $r10.<weka.core.Instance: double classValue()>();

        $i6 = (int) $d12;

        $d13 = $r9[$i6];

        $r11 = virtualinvoke train.<weka.core.Instances: weka.core.Instance instance(int)>(i#86);

        $d14 = interfaceinvoke $r11.<weka.core.Instance: double weight()>();

        $d15 = $d13 + $d14;

        $r9[$i6] = $d15;

        $d16 = this.<weka.classifiers.evaluation.Evaluation: double m_ClassPriorsSum>;

        $r13 = virtualinvoke train.<weka.core.Instances: weka.core.Instance instance(int)>(i#86);

        $d17 = interfaceinvoke $r13.<weka.core.Instance: double weight()>();

        $d18 = $d16 + $d17;

        this.<weka.classifiers.evaluation.Evaluation: double m_ClassPriorsSum> = $d18;

     label11:
        i#86 = i#86 + 1;

        goto label10;

     label12:
        $i7 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        $d19 = (double) $i7;

        this.<weka.classifiers.evaluation.Evaluation: double m_MaxTarget> = $d19;

        this.<weka.classifiers.evaluation.Evaluation: double m_MinTarget> = 0.0;

     label13:
        return;
    }

    protected void addNumericTrainClass(double, double)
    {
        weka.classifiers.evaluation.Evaluation this;
        double classValue, weight, $d0, $d1;
        byte $b0, $b1;
        double[] $r0, $r1, $r2, $r3, $r4, temp#32, $r5, $r6, $r7, temp#49, $r8, $r9, $r10, $r11;
        int $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;

        this := @this: weka.classifiers.evaluation.Evaluation;

        classValue := @parameter0: double;

        weight := @parameter1: double;

        $d0 = this.<weka.classifiers.evaluation.Evaluation: double m_MaxTarget>;

        $b0 = classValue cmpl $d0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 <= 0 goto label1;

        this.<weka.classifiers.evaluation.Evaluation: double m_MaxTarget> = classValue;

     label1:
        $d1 = this.<weka.classifiers.evaluation.Evaluation: double m_MinTarget>;

        $b1 = classValue cmpg $d1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 >= 0 goto label2;

        this.<weka.classifiers.evaluation.Evaluation: double m_MinTarget> = classValue;

     label2:
        $r0 = this.<weka.classifiers.evaluation.Evaluation: double[] m_TrainClassVals>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label3;

        $r1 = newarray (double)[100];

        this.<weka.classifiers.evaluation.Evaluation: double[] m_TrainClassVals> = $r1;

        $r2 = newarray (double)[100];

        this.<weka.classifiers.evaluation.Evaluation: double[] m_TrainClassWeights> = $r2;

     label3:
        $i2 = this.<weka.classifiers.evaluation.Evaluation: int m_NumTrainClassVals>;

        $r3 = this.<weka.classifiers.evaluation.Evaluation: double[] m_TrainClassVals>;

        $i3 = lengthof $r3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i2 != $i3 goto label4;

        $r4 = this.<weka.classifiers.evaluation.Evaluation: double[] m_TrainClassVals>;

        $i4 = lengthof $r4;

        $i5 = $i4 * 2;

        temp#32 = newarray (double)[$i5];

        $r5 = this.<weka.classifiers.evaluation.Evaluation: double[] m_TrainClassVals>;

        $r6 = this.<weka.classifiers.evaluation.Evaluation: double[] m_TrainClassVals>;

        $i6 = lengthof $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, temp#32, 0, $i6);

        this.<weka.classifiers.evaluation.Evaluation: double[] m_TrainClassVals> = temp#32;

        $r7 = this.<weka.classifiers.evaluation.Evaluation: double[] m_TrainClassWeights>;

        $i7 = lengthof $r7;

        $i8 = $i7 * 2;

        temp#49 = newarray (double)[$i8];

        $r8 = this.<weka.classifiers.evaluation.Evaluation: double[] m_TrainClassWeights>;

        $r9 = this.<weka.classifiers.evaluation.Evaluation: double[] m_TrainClassWeights>;

        $i9 = lengthof $r9;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, temp#49, 0, $i9);

        this.<weka.classifiers.evaluation.Evaluation: double[] m_TrainClassWeights> = temp#49;

     label4:
        $r10 = this.<weka.classifiers.evaluation.Evaluation: double[] m_TrainClassVals>;

        $i10 = this.<weka.classifiers.evaluation.Evaluation: int m_NumTrainClassVals>;

        $r10[$i10] = classValue;

        $r11 = this.<weka.classifiers.evaluation.Evaluation: double[] m_TrainClassWeights>;

        $i11 = this.<weka.classifiers.evaluation.Evaluation: int m_NumTrainClassVals>;

        $r11[$i11] = weight;

        $i12 = this.<weka.classifiers.evaluation.Evaluation: int m_NumTrainClassVals>;

        $i13 = $i12 + 1;

        this.<weka.classifiers.evaluation.Evaluation: int m_NumTrainClassVals> = $i13;

        return;
    }

    public void setDiscardPredictions(boolean)
    {
        weka.classifiers.evaluation.Evaluation this;
        boolean value, $z0;

        this := @this: weka.classifiers.evaluation.Evaluation;

        value := @parameter0: boolean;

        this.<weka.classifiers.evaluation.Evaluation: boolean m_DiscardPredictions> = value;

        $z0 = this.<weka.classifiers.evaluation.Evaluation: boolean m_DiscardPredictions>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        this.<weka.classifiers.evaluation.Evaluation: java.util.ArrayList m_Predictions> = null;

     label1:
        return;
    }

    public void toggleEvalMetrics(java.util.List)
    {
        weka.classifiers.evaluation.Evaluation this;
        java.util.List metricsToToggle, $r1, $r3, $r5;
        java.util.Iterator l2;
        java.lang.String s, $r2, $r4, $r6;
        boolean $z0, $z1;
        java.lang.Object $r0;

        this := @this: weka.classifiers.evaluation.Evaluation;

        metricsToToggle := @parameter0: java.util.List;

        l2 = interfaceinvoke metricsToToggle.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label4;

        $r0 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        s = (java.lang.String) $r0;

        $r1 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        $r2 = virtualinvoke s.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = interfaceinvoke $r1.<java.util.List: boolean contains(java.lang.Object)>($r2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        $r3 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        $r4 = virtualinvoke s.<java.lang.String: java.lang.String toLowerCase()>();

        interfaceinvoke $r3.<java.util.List: boolean remove(java.lang.Object)>($r4);

        goto label3;

     label2:
        $r5 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        $r6 = virtualinvoke s.<java.lang.String: java.lang.String toLowerCase()>();

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r6);

     label3:
        goto label1;

     label4:
        return;
    }

    public void useNoPriors()
    {
        weka.classifiers.evaluation.Evaluation this;

        this := @this: weka.classifiers.evaluation.Evaluation;

        this.<weka.classifiers.evaluation.Evaluation: boolean m_NoPriors> = 1;

        return;
    }

    public void updatePriors(weka.core.Instance) throws java.lang.Exception
    {
        weka.classifiers.evaluation.Evaluation this;
        weka.core.Instance instance;
        boolean $z0, $z1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16;
        double[] $r0, $r2;
        int $i1;

        this := @this: weka.classifiers.evaluation.Evaluation;

        instance := @parameter0: weka.core.Instance;

        $z0 = interfaceinvoke instance.<weka.core.Instance: boolean classIsMissing()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label2;

        $z1 = this.<weka.classifiers.evaluation.Evaluation: boolean m_ClassIsNominal>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label1;

        $d0 = interfaceinvoke instance.<weka.core.Instance: double classValue()>();

        $d1 = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        virtualinvoke this.<weka.classifiers.evaluation.Evaluation: void addNumericTrainClass(double,double)>($d0, $d1);

        $r0 = this.<weka.classifiers.evaluation.Evaluation: double[] m_ClassPriors>;

        $d2 = $r0[0];

        $d3 = interfaceinvoke instance.<weka.core.Instance: double classValue()>();

        $d4 = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        $d5 = $d3 * $d4;

        $d6 = $d2 + $d5;

        $r0[0] = $d6;

        $d7 = this.<weka.classifiers.evaluation.Evaluation: double m_ClassPriorsSum>;

        $d8 = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        $d9 = $d7 + $d8;

        this.<weka.classifiers.evaluation.Evaluation: double m_ClassPriorsSum> = $d9;

        goto label2;

     label1:
        $r2 = this.<weka.classifiers.evaluation.Evaluation: double[] m_ClassPriors>;

        $d10 = interfaceinvoke instance.<weka.core.Instance: double classValue()>();

        $i1 = (int) $d10;

        $d11 = $r2[$i1];

        $d12 = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        $d13 = $d11 + $d12;

        $r2[$i1] = $d13;

        $d14 = this.<weka.classifiers.evaluation.Evaluation: double m_ClassPriorsSum>;

        $d15 = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        $d16 = $d14 + $d15;

        this.<weka.classifiers.evaluation.Evaluation: double m_ClassPriorsSum> = $d16;

     label2:
        return;
    }

    public transient double[] evaluateModel(weka.classifiers.Classifier, weka.core.Instances, java.lang.Object[]) throws java.lang.Exception
    {
        weka.classifiers.evaluation.Evaluation this;
        weka.classifiers.Classifier classifier;
        weka.core.Instances data, dataPred, $r2;
        java.lang.Object[] forPredictionsPrinting;
        double[] predictions, p;
        double[][] preds;
        weka.classifiers.evaluation.output.prediction.AbstractOutput classificationOutput#2;
        int $i0, $i1, i#21, $i2, i#33, $i3, i#57, $i4;
        java.lang.Object $r0;
        boolean $z0, $z1;
        weka.core.BatchPredictor $r1, $r4;
        weka.core.Instance $r3, $r5, $r6, $r7, $r8;
        double $d0, $d1;

        this := @this: weka.classifiers.evaluation.Evaluation;

        classifier := @parameter0: weka.classifiers.Classifier;

        data := @parameter1: weka.core.Instances;

        forPredictionsPrinting := @parameter2: java.lang.Object[];

        classificationOutput#2 = null;

        $i0 = virtualinvoke data.<weka.core.Instances: int numInstances()>();

        predictions = newarray (double)[$i0];

        $i1 = lengthof forPredictionsPrinting;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 0 goto label01;

        $r0 = forPredictionsPrinting[0];

        classificationOutput#2 = (weka.classifiers.evaluation.output.prediction.AbstractOutput) $r0;

     label01:
        $z0 = classifier instanceof weka.core.BatchPredictor;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label07;

        $r1 = (weka.core.BatchPredictor) classifier;

        $z1 = interfaceinvoke $r1.<weka.core.BatchPredictor: boolean implementsMoreEfficientBatchPrediction()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label07;

        $r2 = new weka.core.Instances;

        specialinvoke $r2.<weka.core.Instances: void <init>(weka.core.Instances)>(data);

        dataPred = $r2;

        i#21 = 0;

     label02:
        $i2 = virtualinvoke data.<weka.core.Instances: int numInstances()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#21);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#21 >= $i2 goto label03;

        $r3 = virtualinvoke dataPred.<weka.core.Instances: weka.core.Instance instance(int)>(i#21);

        interfaceinvoke $r3.<weka.core.Instance: void setClassMissing()>();

        i#21 = i#21 + 1;

        goto label02;

     label03:
        $r4 = (weka.core.BatchPredictor) classifier;

        preds = interfaceinvoke $r4.<weka.core.BatchPredictor: double[][] distributionsForInstances(weka.core.Instances)>(dataPred);

        i#33 = 0;

     label04:
        $i3 = virtualinvoke data.<weka.core.Instances: int numInstances()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#33);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if i#33 >= $i3 goto label06;

        p = preds[i#33];

        $r5 = virtualinvoke data.<weka.core.Instances: weka.core.Instance instance(int)>(i#33);

        $d0 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double evaluationForSingleInstance(double[],weka.core.Instance,boolean)>(p, $r5, 1);

        predictions[i#33] = $d0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classificationOutput#2);

        if classificationOutput#2 == null goto label05;

        $r6 = virtualinvoke data.<weka.core.Instances: weka.core.Instance instance(int)>(i#33);

        virtualinvoke classificationOutput#2.<weka.classifiers.evaluation.output.prediction.AbstractOutput: void printClassification(double[],weka.core.Instance,int)>(p, $r6, i#33);

     label05:
        i#33 = i#33 + 1;

        goto label04;

     label06:
        goto label10;

     label07:
        i#57 = 0;

     label08:
        $i4 = virtualinvoke data.<weka.core.Instances: int numInstances()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#57);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if i#57 >= $i4 goto label10;

        $r7 = virtualinvoke data.<weka.core.Instances: weka.core.Instance instance(int)>(i#57);

        $d1 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double evaluateModelOnceAndRecordPrediction(weka.classifiers.Classifier,weka.core.Instance)>(classifier, $r7);

        predictions[i#57] = $d1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classificationOutput#2);

        if classificationOutput#2 == null goto label09;

        $r8 = virtualinvoke data.<weka.core.Instances: weka.core.Instance instance(int)>(i#57);

        virtualinvoke classificationOutput#2.<weka.classifiers.evaluation.output.prediction.AbstractOutput: void printClassification(weka.classifiers.Classifier,weka.core.Instance,int)>(classifier, $r8, i#57);

     label09:
        i#57 = i#57 + 1;

        goto label08;

     label10:
        return predictions;
    }

    public double evaluateModelOnceAndRecordPrediction(weka.classifiers.Classifier, weka.core.Instance) throws java.lang.Exception
    {
        weka.classifiers.evaluation.Evaluation this;
        weka.classifiers.Classifier classifier;
        weka.core.Instance instance;
        double $d0;

        this := @this: weka.classifiers.evaluation.Evaluation;

        classifier := @parameter0: weka.classifiers.Classifier;

        instance := @parameter1: weka.core.Instance;

        $d0 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double evaluationForSingleInstance(weka.classifiers.Classifier,weka.core.Instance,boolean)>(classifier, instance, 1);

        return $d0;
    }

    public java.lang.String toSummaryString(java.lang.String, boolean)
    {
        weka.classifiers.evaluation.Evaluation this;
        java.lang.String title, metricName, metricName, metricName, s, metricName, s, $r5, $r14, $r17, $r20, $r24, $r27, $r30, $r34, $r37, $r42, $r45, $r49, $r52, $r58, $r61, $r65, $r68, $r71, $r74, $r79, formattedS#232, $r86, $r89, $r94, formattedS#284, $r103, $r106, $r109, $r112, $r116, $r119, $r122, $r125, $r129, $r132, $r135, $r138, $r143, $r147, formattedS#443, $r156, $r159, $r163, $r166, $r170, $r173, $r177, $r180, $r185, $r189, formattedS#577, $r196, $r199, $r202, $r205, $r209, $r212, $r215, $r218, $r222, $r225, $r228, $r232, $r235, $r239, $r242, $r246;
        java.lang.StringBuffer text, $r0;
        boolean displayCorrect, displayIncorrect, displayKappa, displayTotalCost, displayAverageCost, displayKBRelative, displayKBInfo, display, displayCorrelation, display, displayComplexityOrder0, displayComplexityScheme, displayComplexityImprovement, displayMAE, displayRMSE, displayRAE, displayRRSE, displayCoverage, displayRegionSize, printComplexityStatistics#1, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, display#421, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, display#556, $z25, $z26, $z27, $z28, $z29, $z30;
        weka.classifiers.evaluation.AbstractEvaluationMetric m, m, m, m;
        java.util.Iterator l5, l4, l8, l13, l9#209, l9#426;
        java.util.List statNames, statNames, $r7, $r8, $r9, $r10, $r11, $r54, $r55, $r76, $r77, $r80, $r83, $r91, $r92, $r95, $r98, $r99, $r100, $r140, $r141, $r144, $r146, $r150, $r151, $r152, $r153, $r182, $r183, $r186, $r188, $r192, $r193;
        java.lang.Exception ex, $r244;
        java.io.PrintStream $r1, $r245;
        java.lang.StringBuilder $r2, $r3, $r4, $r13, $r15, $r16, $r18, $r19, $r23, $r25, $r26, $r28, $r29, $r33, $r35, $r36, $r41, $r43, $r44, $r48, $r50, $r51, $r57, $r59, $r60, $r64, $r66, $r67, $r70, $r72, $r73, $r85, $r87, $r88, $r102, $r104, $r105, $r108, $r110, $r111, $r115, $r117, $r118, $r121, $r123, $r124, $r128, $r130, $r131, $r134, $r136, $r137, $r155, $r157, $r158, $r162, $r164, $r165, $r169, $r171, $r172, $r176, $r178, $r179, $r194, $r195, $r197, $r198, $r201, $r203, $r204, $r207, $r208, $r210, $r211, $r214, $r216, $r217, $r221, $r223, $r224, $r226, $r227, $r231, $r233, $r234, $r238, $r240, $r241;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31;
        byte $b0, $b1;
        weka.classifiers.CostMatrix $r39;
        java.lang.Object $r78, $r93, $r142, $r145, $r184, $r187;
        weka.classifiers.evaluation.StandardEvaluationMetric $r81, $r96, $r190;
        weka.classifiers.evaluation.InformationTheoreticEvaluationMetric $r148;

        this := @this: weka.classifiers.evaluation.Evaluation;

        title := @parameter0: java.lang.String;

        printComplexityStatistics#1 := @parameter1: boolean;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        text = $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(printComplexityStatistics#1);

        if printComplexityStatistics#1 == 0 goto label01;

        $z0 = this.<weka.classifiers.evaluation.Evaluation: boolean m_NoPriors>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label01;

        printComplexityStatistics#1 = 0;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("Priors disabled, cannot print complexity statistics!");

     label01:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(title);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

     label02:
        $d0 = this.<weka.classifiers.evaluation.Evaluation: double m_WithClass>;

        $b0 = $d0 cmpl 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 <= 0 goto label42;

        $z1 = this.<weka.classifiers.evaluation.Evaluation: boolean m_ClassIsNominal>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label13;

        $r7 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        displayCorrect = interfaceinvoke $r7.<java.util.List: boolean contains(java.lang.Object)>("correct");

        $r8 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        displayIncorrect = interfaceinvoke $r8.<java.util.List: boolean contains(java.lang.Object)>("incorrect");

        $r9 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        displayKappa = interfaceinvoke $r9.<java.util.List: boolean contains(java.lang.Object)>("kappa");

        $r10 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        displayTotalCost = interfaceinvoke $r10.<java.util.List: boolean contains(java.lang.Object)>("total cost");

        $r11 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        displayAverageCost = interfaceinvoke $r11.<java.util.List: boolean contains(java.lang.Object)>("average cost");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayCorrect);

        if displayCorrect == 0 goto label03;

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Correctly Classified Instances     ");

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $d1 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double correct()>();

        $r14 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>($d1, 12, 4);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("     ");

        $d2 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double pctCorrect()>();

        $r17 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>($d2, 12, 4);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" %\n");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

     label03:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayIncorrect);

        if displayIncorrect == 0 goto label04;

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Incorrectly Classified Instances   ");

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $d3 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double incorrect()>();

        $r24 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>($d3, 12, 4);

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("     ");

        $d4 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double pctIncorrect()>();

        $r27 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>($d4, 12, 4);

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" %\n");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30);

     label04:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayKappa);

        if displayKappa == 0 goto label05;

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Kappa statistic                    ");

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $d5 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double kappa()>();

        $r34 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>($d5, 12, 4);

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r37);

     label05:
        $r39 = this.<weka.classifiers.evaluation.Evaluation: weka.classifiers.CostMatrix m_CostMatrix>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r39);

        if $r39 == null goto label07;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayTotalCost);

        if displayTotalCost == 0 goto label06;

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Total Cost                         ");

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $d6 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double totalCost()>();

        $r42 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>($d6, 12, 4);

        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r45);

     label06:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayAverageCost);

        if displayAverageCost == 0 goto label07;

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Average Cost                       ");

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $d7 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double avgCost()>();

        $r49 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>($d7, 12, 4);

        $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r49);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r52);

     label07:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(printComplexityStatistics#1);

        if printComplexityStatistics#1 == 0 goto label09;

        $r54 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        displayKBRelative = interfaceinvoke $r54.<java.util.List: boolean contains(java.lang.Object)>("kb relative");

        $r55 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        displayKBInfo = interfaceinvoke $r55.<java.util.List: boolean contains(java.lang.Object)>("kb information");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayKBRelative);

        if displayKBRelative == 0 goto label08;

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("K&B Relative Info Score            ");

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        $d8 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double KBRelativeInformation()>();

        $r58 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>($d8, 12, 4);

        $r59 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r58);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" %\n");

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r61);

     label08:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayKBInfo);

        if displayKBInfo == 0 goto label09;

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("K&B Information Score              ");

        $r64 = new java.lang.StringBuilder;

        specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();

        $d9 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double KBInformation()>();

        $r65 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>($d9, 12, 4);

        $r66 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r65);

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bits");

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r68);

        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>()>();

        $d10 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double KBMeanInformation()>();

        $r71 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>($d10, 12, 4);

        $r72 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r71);

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bits/instance\n");

        $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r74);

     label09:
        $r76 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_pluginMetrics>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r76);

        if $r76 == null goto label12;

        $r77 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_pluginMetrics>;

        l9#209 = interfaceinvoke $r77.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z2 = interfaceinvoke l9#209.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label12;

        $r78 = interfaceinvoke l9#209.<java.util.Iterator: java.lang.Object next()>();

        m = (weka.classifiers.evaluation.AbstractEvaluationMetric) $r78;

        $z3 = m instanceof weka.classifiers.evaluation.StandardEvaluationMetric;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label11;

        $z4 = virtualinvoke m.<weka.classifiers.evaluation.AbstractEvaluationMetric: boolean appliesToNominalClass()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label11;

        $z5 = virtualinvoke m.<weka.classifiers.evaluation.AbstractEvaluationMetric: boolean appliesToNumericClass()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 != 0 goto label11;

        $r79 = virtualinvoke m.<weka.classifiers.evaluation.AbstractEvaluationMetric: java.lang.String getMetricName()>();

        metricName = virtualinvoke $r79.<java.lang.String: java.lang.String toLowerCase()>();

        $r80 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        display = interfaceinvoke $r80.<java.util.List: boolean contains(java.lang.Object)>(metricName);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(display);

        if display == 0 goto label11;

        $r81 = (weka.classifiers.evaluation.StandardEvaluationMetric) m;

        formattedS#232 = interfaceinvoke $r81.<weka.classifiers.evaluation.StandardEvaluationMetric: java.lang.String toSummaryString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(formattedS#232);

     label11:
        goto label10;

     label12:
        goto label17;

     label13:
        $r83 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        displayCorrelation = interfaceinvoke $r83.<java.util.List: boolean contains(java.lang.Object)>("correlation");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayCorrelation);

        if displayCorrelation == 0 goto label14;

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Correlation coefficient            ");

        $r85 = new java.lang.StringBuilder;

        specialinvoke $r85.<java.lang.StringBuilder: void <init>()>();

        $d11 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double correlationCoefficient()>();

        $r86 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>($d11, 12, 4);

        $r87 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r86);

        $r88 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r89 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r89);

     label14:
        $r91 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_pluginMetrics>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r91);

        if $r91 == null goto label17;

        $r92 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_pluginMetrics>;

        l5 = interfaceinvoke $r92.<java.util.List: java.util.Iterator iterator()>();

     label15:
        $z6 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label17;

        $r93 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        m = (weka.classifiers.evaluation.AbstractEvaluationMetric) $r93;

        $z7 = m instanceof weka.classifiers.evaluation.StandardEvaluationMetric;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 == 0 goto label16;

        $z8 = virtualinvoke m.<weka.classifiers.evaluation.AbstractEvaluationMetric: boolean appliesToNominalClass()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 != 0 goto label16;

        $z9 = virtualinvoke m.<weka.classifiers.evaluation.AbstractEvaluationMetric: boolean appliesToNumericClass()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 == 0 goto label16;

        $r94 = virtualinvoke m.<weka.classifiers.evaluation.AbstractEvaluationMetric: java.lang.String getMetricName()>();

        metricName = virtualinvoke $r94.<java.lang.String: java.lang.String toLowerCase()>();

        $r95 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        display = interfaceinvoke $r95.<java.util.List: boolean contains(java.lang.Object)>(metricName);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(display);

        if display == 0 goto label16;

        $r96 = (weka.classifiers.evaluation.StandardEvaluationMetric) m;

        formattedS#284 = interfaceinvoke $r96.<weka.classifiers.evaluation.StandardEvaluationMetric: java.lang.String toSummaryString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(formattedS#284);

     label16:
        goto label15;

     label17:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(printComplexityStatistics#1);

        if printComplexityStatistics#1 == 0 goto label20;

        $z10 = this.<weka.classifiers.evaluation.Evaluation: boolean m_ComplexityStatisticsAvailable>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z10);

        if $z10 == 0 goto label20;

        $r98 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        displayComplexityOrder0 = interfaceinvoke $r98.<java.util.List: boolean contains(java.lang.Object)>("complexity 0");

        $r99 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        displayComplexityScheme = interfaceinvoke $r99.<java.util.List: boolean contains(java.lang.Object)>("complexity scheme");

        $r100 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        displayComplexityImprovement = interfaceinvoke $r100.<java.util.List: boolean contains(java.lang.Object)>("complexity improvement");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayComplexityOrder0);

        if displayComplexityOrder0 == 0 goto label18;

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Class complexity | order 0         ");

        $r102 = new java.lang.StringBuilder;

        specialinvoke $r102.<java.lang.StringBuilder: void <init>()>();

        $d12 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double SFPriorEntropy()>();

        $r103 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>($d12, 12, 4);

        $r104 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r103);

        $r105 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bits");

        $r106 = virtualinvoke $r105.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r106);

        $r108 = new java.lang.StringBuilder;

        specialinvoke $r108.<java.lang.StringBuilder: void <init>()>();

        $d13 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double SFMeanPriorEntropy()>();

        $r109 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>($d13, 12, 4);

        $r110 = virtualinvoke $r108.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r109);

        $r111 = virtualinvoke $r110.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bits/instance\n");

        $r112 = virtualinvoke $r111.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r112);

     label18:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayComplexityScheme);

        if displayComplexityScheme == 0 goto label19;

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Class complexity | scheme          ");

        $r115 = new java.lang.StringBuilder;

        specialinvoke $r115.<java.lang.StringBuilder: void <init>()>();

        $d14 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double SFSchemeEntropy()>();

        $r116 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>($d14, 12, 4);

        $r117 = virtualinvoke $r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r116);

        $r118 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bits");

        $r119 = virtualinvoke $r118.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r119);

        $r121 = new java.lang.StringBuilder;

        specialinvoke $r121.<java.lang.StringBuilder: void <init>()>();

        $d15 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double SFMeanSchemeEntropy()>();

        $r122 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>($d15, 12, 4);

        $r123 = virtualinvoke $r121.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r122);

        $r124 = virtualinvoke $r123.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bits/instance\n");

        $r125 = virtualinvoke $r124.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r125);

     label19:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayComplexityImprovement);

        if displayComplexityImprovement == 0 goto label20;

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Complexity improvement     (Sf)    ");

        $r128 = new java.lang.StringBuilder;

        specialinvoke $r128.<java.lang.StringBuilder: void <init>()>();

        $d16 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double SFEntropyGain()>();

        $r129 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>($d16, 12, 4);

        $r130 = virtualinvoke $r128.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r129);

        $r131 = virtualinvoke $r130.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bits");

        $r132 = virtualinvoke $r131.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r132);

        $r134 = new java.lang.StringBuilder;

        specialinvoke $r134.<java.lang.StringBuilder: void <init>()>();

        $d17 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double SFMeanEntropyGain()>();

        $r135 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>($d17, 12, 4);

        $r136 = virtualinvoke $r134.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r135);

        $r137 = virtualinvoke $r136.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bits/instance\n");

        $r138 = virtualinvoke $r137.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r138);

     label20:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(printComplexityStatistics#1);

        if printComplexityStatistics#1 == 0 goto label29;

        $r140 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_pluginMetrics>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r140);

        if $r140 == null goto label29;

        $r141 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_pluginMetrics>;

        l4 = interfaceinvoke $r141.<java.util.List: java.util.Iterator iterator()>();

     label21:
        $z11 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z11);

        if $z11 == 0 goto label29;

        $r142 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        m = (weka.classifiers.evaluation.AbstractEvaluationMetric) $r142;

        $z12 = m instanceof weka.classifiers.evaluation.InformationTheoreticEvaluationMetric;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z12);

        if $z12 == 0 goto label28;

        $z13 = this.<weka.classifiers.evaluation.Evaluation: boolean m_ClassIsNominal>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z13);

        if $z13 == 0 goto label22;

        $z14 = virtualinvoke m.<weka.classifiers.evaluation.AbstractEvaluationMetric: boolean appliesToNominalClass()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z14);

        if $z14 != 0 goto label23;

     label22:
        $z15 = this.<weka.classifiers.evaluation.Evaluation: boolean m_ClassIsNominal>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z15);

        if $z15 != 0 goto label28;

        $z16 = virtualinvoke m.<weka.classifiers.evaluation.AbstractEvaluationMetric: boolean appliesToNumericClass()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z16);

        if $z16 == 0 goto label28;

     label23:
        $r143 = virtualinvoke m.<weka.classifiers.evaluation.AbstractEvaluationMetric: java.lang.String getMetricName()>();

        metricName = virtualinvoke $r143.<java.lang.String: java.lang.String toLowerCase()>();

        $r144 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        display#421 = interfaceinvoke $r144.<java.util.List: boolean contains(java.lang.Object)>(metricName);

        statNames = virtualinvoke m.<weka.classifiers.evaluation.AbstractEvaluationMetric: java.util.List getStatisticNames()>();

        l9#426 = interfaceinvoke statNames.<java.util.List: java.util.Iterator iterator()>();

     label24:
        $z17 = interfaceinvoke l9#426.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z17);

        if $z17 == 0 goto label27;

        $r145 = interfaceinvoke l9#426.<java.util.Iterator: java.lang.Object next()>();

        s = (java.lang.String) $r145;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(display#421);

        if display#421 == 0 goto label25;

        $r146 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        $r147 = virtualinvoke s.<java.lang.String: java.lang.String toLowerCase()>();

        $z18 = interfaceinvoke $r146.<java.util.List: boolean contains(java.lang.Object)>($r147);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z18);

        if $z18 == 0 goto label25;

        $z19 = 1;

        goto label26;

     label25:
        $z19 = 0;

     label26:
        display#421 = $z19;

        goto label24;

     label27:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(display#421);

        if display#421 == 0 goto label28;

        $r148 = (weka.classifiers.evaluation.InformationTheoreticEvaluationMetric) m;

        formattedS#443 = interfaceinvoke $r148.<weka.classifiers.evaluation.InformationTheoreticEvaluationMetric: java.lang.String toSummaryString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(formattedS#443);

     label28:
        goto label21;

     label29:
        $r150 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        displayMAE = interfaceinvoke $r150.<java.util.List: boolean contains(java.lang.Object)>("mae");

        $r151 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        displayRMSE = interfaceinvoke $r151.<java.util.List: boolean contains(java.lang.Object)>("rmse");

        $r152 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        displayRAE = interfaceinvoke $r152.<java.util.List: boolean contains(java.lang.Object)>("rae");

        $r153 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        displayRRSE = interfaceinvoke $r153.<java.util.List: boolean contains(java.lang.Object)>("rrse");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayMAE);

        if displayMAE == 0 goto label30;

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Mean absolute error                ");

        $r155 = new java.lang.StringBuilder;

        specialinvoke $r155.<java.lang.StringBuilder: void <init>()>();

        $d18 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double meanAbsoluteError()>();

        $r156 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>($d18, 12, 4);

        $r157 = virtualinvoke $r155.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r156);

        $r158 = virtualinvoke $r157.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r159 = virtualinvoke $r158.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r159);

     label30:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayRMSE);

        if displayRMSE == 0 goto label31;

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Root mean squared error            ");

        $r162 = new java.lang.StringBuilder;

        specialinvoke $r162.<java.lang.StringBuilder: void <init>()>();

        $d19 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double rootMeanSquaredError()>();

        $r163 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>($d19, 12, 4);

        $r164 = virtualinvoke $r162.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r163);

        $r165 = virtualinvoke $r164.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r166 = virtualinvoke $r165.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r166);

     label31:
        $z20 = this.<weka.classifiers.evaluation.Evaluation: boolean m_NoPriors>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z20);

        if $z20 != 0 goto label33;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayRAE);

        if displayRAE == 0 goto label32;

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Relative absolute error            ");

        $r169 = new java.lang.StringBuilder;

        specialinvoke $r169.<java.lang.StringBuilder: void <init>()>();

        $d20 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double relativeAbsoluteError()>();

        $r170 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>($d20, 12, 4);

        $r171 = virtualinvoke $r169.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r170);

        $r172 = virtualinvoke $r171.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" %\n");

        $r173 = virtualinvoke $r172.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r173);

     label32:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayRRSE);

        if displayRRSE == 0 goto label33;

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Root relative squared error        ");

        $r176 = new java.lang.StringBuilder;

        specialinvoke $r176.<java.lang.StringBuilder: void <init>()>();

        $d21 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double rootRelativeSquaredError()>();

        $r177 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>($d21, 12, 4);

        $r178 = virtualinvoke $r176.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r177);

        $r179 = virtualinvoke $r178.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" %\n");

        $r180 = virtualinvoke $r179.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r180);

     label33:
        $r182 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_pluginMetrics>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r182);

        if $r182 == null goto label40;

        $r183 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_pluginMetrics>;

        l8 = interfaceinvoke $r183.<java.util.List: java.util.Iterator iterator()>();

     label34:
        $z21 = interfaceinvoke l8.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z21);

        if $z21 == 0 goto label40;

        $r184 = interfaceinvoke l8.<java.util.Iterator: java.lang.Object next()>();

        m = (weka.classifiers.evaluation.AbstractEvaluationMetric) $r184;

        $z22 = m instanceof weka.classifiers.evaluation.StandardEvaluationMetric;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z22);

        if $z22 == 0 goto label39;

        $z23 = virtualinvoke m.<weka.classifiers.evaluation.AbstractEvaluationMetric: boolean appliesToNominalClass()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z23);

        if $z23 == 0 goto label39;

        $z24 = virtualinvoke m.<weka.classifiers.evaluation.AbstractEvaluationMetric: boolean appliesToNumericClass()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z24);

        if $z24 == 0 goto label39;

        $r185 = virtualinvoke m.<weka.classifiers.evaluation.AbstractEvaluationMetric: java.lang.String getMetricName()>();

        metricName = virtualinvoke $r185.<java.lang.String: java.lang.String toLowerCase()>();

        $r186 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        display#556 = interfaceinvoke $r186.<java.util.List: boolean contains(java.lang.Object)>(metricName);

        statNames = virtualinvoke m.<weka.classifiers.evaluation.AbstractEvaluationMetric: java.util.List getStatisticNames()>();

        l13 = interfaceinvoke statNames.<java.util.List: java.util.Iterator iterator()>();

     label35:
        $z25 = interfaceinvoke l13.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z25);

        if $z25 == 0 goto label38;

        $r187 = interfaceinvoke l13.<java.util.Iterator: java.lang.Object next()>();

        s = (java.lang.String) $r187;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(display#556);

        if display#556 == 0 goto label36;

        $r188 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        $r189 = virtualinvoke s.<java.lang.String: java.lang.String toLowerCase()>();

        $z26 = interfaceinvoke $r188.<java.util.List: boolean contains(java.lang.Object)>($r189);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z26);

        if $z26 == 0 goto label36;

        $z27 = 1;

        goto label37;

     label36:
        $z27 = 0;

     label37:
        display#556 = $z27;

        goto label35;

     label38:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(display#556);

        if display#556 == 0 goto label39;

        $r190 = (weka.classifiers.evaluation.StandardEvaluationMetric) m;

        formattedS#577 = interfaceinvoke $r190.<weka.classifiers.evaluation.StandardEvaluationMetric: java.lang.String toSummaryString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(formattedS#577);

     label39:
        goto label34;

     label40:
        $z28 = this.<weka.classifiers.evaluation.Evaluation: boolean m_CoverageStatisticsAvailable>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z28);

        if $z28 == 0 goto label42;

        $r192 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        displayCoverage = interfaceinvoke $r192.<java.util.List: boolean contains(java.lang.Object)>("coverage");

        $r193 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        displayRegionSize = interfaceinvoke $r193.<java.util.List: boolean contains(java.lang.Object)>("region size");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayCoverage);

        if displayCoverage == 0 goto label41;

        $r194 = new java.lang.StringBuilder;

        specialinvoke $r194.<java.lang.StringBuilder: void <init>()>();

        $r195 = virtualinvoke $r194.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Coverage of cases (");

        $d22 = this.<weka.classifiers.evaluation.Evaluation: double m_ConfLevel>;

        $r196 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>($d22, 4, 2);

        $r197 = virtualinvoke $r195.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r196);

        $r198 = virtualinvoke $r197.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" level)     ");

        $r199 = virtualinvoke $r198.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r199);

        $r201 = new java.lang.StringBuilder;

        specialinvoke $r201.<java.lang.StringBuilder: void <init>()>();

        $d23 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double coverageOfTestCasesByPredictedRegions()>();

        $r202 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>($d23, 12, 4);

        $r203 = virtualinvoke $r201.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r202);

        $r204 = virtualinvoke $r203.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" %\n");

        $r205 = virtualinvoke $r204.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r205);

     label41:
        $z29 = this.<weka.classifiers.evaluation.Evaluation: boolean m_NoPriors>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z29);

        if $z29 != 0 goto label42;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayRegionSize);

        if displayRegionSize == 0 goto label42;

        $r207 = new java.lang.StringBuilder;

        specialinvoke $r207.<java.lang.StringBuilder: void <init>()>();

        $r208 = virtualinvoke $r207.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mean rel. region size (");

        $d24 = this.<weka.classifiers.evaluation.Evaluation: double m_ConfLevel>;

        $r209 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>($d24, 4, 2);

        $r210 = virtualinvoke $r208.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r209);

        $r211 = virtualinvoke $r210.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" level) ");

        $r212 = virtualinvoke $r211.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r212);

        $r214 = new java.lang.StringBuilder;

        specialinvoke $r214.<java.lang.StringBuilder: void <init>()>();

        $d25 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double sizeOfPredictedRegions()>();

        $r215 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>($d25, 12, 4);

        $r216 = virtualinvoke $r214.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r215);

        $r217 = virtualinvoke $r216.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" %\n");

        $r218 = virtualinvoke $r217.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r218);

     label42:
        $d26 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double unclassified()>();

        $z30 = staticinvoke <weka.core.Utils: boolean gr(double,double)>($d26, 0.0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z30);

        if $z30 == 0 goto label43;

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("UnClassified Instances             ");

        $r221 = new java.lang.StringBuilder;

        specialinvoke $r221.<java.lang.StringBuilder: void <init>()>();

        $d27 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double unclassified()>();

        $r222 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>($d27, 12, 4);

        $r223 = virtualinvoke $r221.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r222);

        $r224 = virtualinvoke $r223.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("     ");

        $d28 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double pctUnclassified()>();

        $r225 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>($d28, 12, 4);

        $r226 = virtualinvoke $r224.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r225);

        $r227 = virtualinvoke $r226.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" %\n");

        $r228 = virtualinvoke $r227.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r228);

     label43:
        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Total Number of Instances          ");

        $r231 = new java.lang.StringBuilder;

        specialinvoke $r231.<java.lang.StringBuilder: void <init>()>();

        $d29 = this.<weka.classifiers.evaluation.Evaluation: double m_WithClass>;

        $r232 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>($d29, 12, 4);

        $r233 = virtualinvoke $r231.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r232);

        $r234 = virtualinvoke $r233.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r235 = virtualinvoke $r234.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r235);

        $d30 = this.<weka.classifiers.evaluation.Evaluation: double m_MissingClass>;

        $b1 = $d30 cmpl 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 <= 0 goto label44;

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Ignored Class Unknown Instances            ");

        $r238 = new java.lang.StringBuilder;

        specialinvoke $r238.<java.lang.StringBuilder: void <init>()>();

        $d31 = this.<weka.classifiers.evaluation.Evaluation: double m_MissingClass>;

        $r239 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>($d31, 12, 4);

        $r240 = virtualinvoke $r238.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r239);

        $r241 = virtualinvoke $r240.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r242 = virtualinvoke $r241.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r242);

     label44:
        goto label46;

     label45:
        $r244 := @caughtexception;

        ex = $r244;

        $r245 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r245.<java.io.PrintStream: void println(java.lang.String)>("Arggh - Must be a bug in Evaluation class");

        virtualinvoke ex.<java.lang.Exception: void printStackTrace()>();

     label46:
        $r246 = virtualinvoke text.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r246;

        catch java.lang.Exception from label02 to label44 with label45;
    }

    public transient void crossValidateModel(weka.classifiers.Classifier, weka.core.Instances, int, java.util.Random, java.lang.Object[]) throws java.lang.Exception
    {
        weka.classifiers.evaluation.Evaluation this;
        weka.classifiers.Classifier classifier, copiedClassifier;
        int numFolds, $i0, i#25;
        java.util.Random random;
        java.lang.Object[] forPredictionsPrinting;
        weka.core.Instances train, test, data#1, $r0, data#5;
        weka.core.Attribute $r1;
        boolean $z0;
        weka.classifiers.evaluation.output.prediction.AbstractOutput classificationOutput#14;
        java.lang.Object $r2;

        this := @this: weka.classifiers.evaluation.Evaluation;

        classifier := @parameter0: weka.classifiers.Classifier;

        data#1 := @parameter1: weka.core.Instances;

        numFolds := @parameter2: int;

        random := @parameter3: java.util.Random;

        forPredictionsPrinting := @parameter4: java.lang.Object[];

        $r0 = new weka.core.Instances;

        specialinvoke $r0.<weka.core.Instances: void <init>(weka.core.Instances)>(data#1);

        data#5 = $r0;

        virtualinvoke data#5.<weka.core.Instances: void randomize(java.util.Random)>(random);

        $r1 = virtualinvoke data#5.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z0 = virtualinvoke $r1.<weka.core.Attribute: boolean isNominal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        virtualinvoke data#5.<weka.core.Instances: void stratify(int)>(numFolds);

     label1:
        classificationOutput#14 = null;

        $i0 = lengthof forPredictionsPrinting;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label2;

        $r2 = forPredictionsPrinting[0];

        classificationOutput#14 = (weka.classifiers.evaluation.output.prediction.AbstractOutput) $r2;

        virtualinvoke classificationOutput#14.<weka.classifiers.evaluation.output.prediction.AbstractOutput: void setHeader(weka.core.Instances)>(data#5);

        virtualinvoke classificationOutput#14.<weka.classifiers.evaluation.output.prediction.AbstractOutput: void printHeader()>();

     label2:
        i#25 = 0;

     label3:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#25);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(numFolds);

        if i#25 >= numFolds goto label4;

        train = virtualinvoke data#5.<weka.core.Instances: weka.core.Instances trainCV(int,int,java.util.Random)>(numFolds, i#25, random);

        virtualinvoke this.<weka.classifiers.evaluation.Evaluation: void setPriors(weka.core.Instances)>(train);

        copiedClassifier = staticinvoke <weka.classifiers.AbstractClassifier: weka.classifiers.Classifier makeCopy(weka.classifiers.Classifier)>(classifier);

        interfaceinvoke copiedClassifier.<weka.classifiers.Classifier: void buildClassifier(weka.core.Instances)>(train);

        test = virtualinvoke data#5.<weka.core.Instances: weka.core.Instances testCV(int,int)>(numFolds, i#25);

        virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double[] evaluateModel(weka.classifiers.Classifier,weka.core.Instances,java.lang.Object[])>(copiedClassifier, test, forPredictionsPrinting);

        i#25 = i#25 + 1;

        goto label3;

     label4:
        this.<weka.classifiers.evaluation.Evaluation: int m_NumFolds> = numFolds;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classificationOutput#14);

        if classificationOutput#14 == null goto label5;

        virtualinvoke classificationOutput#14.<weka.classifiers.evaluation.output.prediction.AbstractOutput: void printFooter()>();

     label5:
        return;
    }

    public java.lang.String toClassDetailsString() throws java.lang.Exception
    {
        weka.classifiers.evaluation.Evaluation this;
        java.lang.String $r0;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $r0 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: java.lang.String toClassDetailsString(java.lang.String)>("=== Detailed Accuracy By Class ===\n");

        return $r0;
    }

    public java.lang.String toMatrixString() throws java.lang.Exception
    {
        weka.classifiers.evaluation.Evaluation this;
        java.lang.String $r0;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $r0 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: java.lang.String toMatrixString(java.lang.String)>("=== Confusion Matrix ===\n");

        return $r0;
    }

    public java.util.ArrayList predictions()
    {
        weka.classifiers.evaluation.Evaluation this;
        boolean $z0;
        java.util.ArrayList $r0;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $z0 = this.<weka.classifiers.evaluation.Evaluation: boolean m_DiscardPredictions>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r0 = this.<weka.classifiers.evaluation.Evaluation: java.util.ArrayList m_Predictions>;

        return $r0;
    }

    public java.lang.String toMatrixString(java.lang.String) throws java.lang.Exception
    {
        weka.classifiers.evaluation.Evaluation this;
        java.lang.String title, $r8, $r12, $r18, $r21, $r25, $r28;
        java.lang.StringBuffer text, $r0, $r5, $r7, $r9, $r11, $r15, $r20, $r22, $r23, $r26;
        char[] IDChars, $r1;
        double fract, maxval#91, current#108, $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14;
        int IDWidth, i#93, $i0, j#98, $i1, $i7, $i8, $i9, $i10, $i11, i#161, $i12, $i13, i#191, $i14, j#196, $i15;
        boolean fractional#84, $z0;
        java.lang.Exception $r2;
        double[][] $r3, $r16;
        double[] $r4, $r17;
        byte $b2, $b3, $b4, $b6, $b17;
        java.lang.String[] $r24;

        this := @this: weka.classifiers.evaluation.Evaluation;

        title := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        text = $r0;

        $r1 = newarray (char)[26];

        $r1[0] = 97;

        $r1[1] = 98;

        $r1[2] = 99;

        $r1[3] = 100;

        $r1[4] = 101;

        $r1[5] = 102;

        $r1[6] = 103;

        $r1[7] = 104;

        $r1[8] = 105;

        $r1[9] = 106;

        $r1[10] = 107;

        $r1[11] = 108;

        $r1[12] = 109;

        $r1[13] = 110;

        $r1[14] = 111;

        $r1[15] = 112;

        $r1[16] = 113;

        $r1[17] = 114;

        $r1[18] = 115;

        $r1[19] = 116;

        $r1[20] = 117;

        $r1[21] = 118;

        $r1[22] = 119;

        $r1[23] = 120;

        $r1[24] = 121;

        $r1[25] = 122;

        IDChars = $r1;

        fractional#84 = 0;

        $z0 = this.<weka.classifiers.evaluation.Evaluation: boolean m_ClassIsNominal>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label01;

        $r2 = new java.lang.Exception;

        specialinvoke $r2.<java.lang.Exception: void <init>(java.lang.String)>("Evaluation: No confusion matrix possible!");

        throw $r2;

     label01:
        maxval#91 = 0.0;

        i#93 = 0;

     label02:
        $i0 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#93);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#93 >= $i0 goto label08;

        j#98 = 0;

     label03:
        $i1 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#98);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if j#98 >= $i1 goto label07;

        $r3 = this.<weka.classifiers.evaluation.Evaluation: double[][] m_ConfusionMatrix>;

        $r4 = $r3[i#93];

        current#108 = $r4[j#98];

        $b2 = current#108 cmpg 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b2);

        if $b2 >= 0 goto label04;

        current#108 = current#108 * -10.0;

     label04:
        $b3 = current#108 cmpl maxval#91;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b3);

        if $b3 <= 0 goto label05;

        maxval#91 = current#108;

     label05:
        $d0 = staticinvoke <java.lang.Math: double rint(double)>(current#108);

        fract = current#108 - $d0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(fractional#84);

        if fractional#84 != 0 goto label06;

        $d1 = staticinvoke <java.lang.Math: double log(double)>(fract);

        $d2 = staticinvoke <java.lang.Math: double log(double)>(10.0);

        $d3 = $d1 / $d2;

        $b4 = $d3 cmpl -2.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b4);

        if $b4 < 0 goto label06;

        fractional#84 = 1;

     label06:
        j#98 = j#98 + 1;

        goto label03;

     label07:
        i#93 = i#93 + 1;

        goto label02;

     label08:
        $d4 = staticinvoke <java.lang.Math: double log(double)>(maxval#91);

        $d5 = staticinvoke <java.lang.Math: double log(double)>(10.0);

        $d6 = $d4 / $d5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(fractional#84);

        if fractional#84 == 0 goto label09;

        $b6 = 3;

        goto label10;

     label09:
        $b6 = 0;

     label10:
        $d7 = (double) $b6;

        $d8 = $d6 + $d7;

        $i7 = (int) $d8;

        $i8 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        $d9 = (double) $i8;

        $d10 = staticinvoke <java.lang.Math: double log(double)>($d9);

        $i9 = lengthof IDChars;

        $d11 = (double) $i9;

        $d12 = staticinvoke <java.lang.Math: double log(double)>($d11);

        $d13 = $d10 / $d12;

        $i10 = (int) $d13;

        $i11 = staticinvoke <java.lang.Math: int max(int,int)>($i7, $i10);

        IDWidth = 1 + $i11;

        $r5 = virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(title);

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        i#161 = 0;

     label11:
        $i12 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#161);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i12);

        if i#161 >= $i12 goto label14;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(fractional#84);

        if fractional#84 == 0 goto label12;

        $r7 = virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $i13 = IDWidth - 3;

        $r8 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: java.lang.String num2ShortID(int,char[],int)>(i#161, IDChars, $i13);

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   ");

        goto label13;

     label12:
        $r11 = virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r12 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: java.lang.String num2ShortID(int,char[],int)>(i#161, IDChars, IDWidth);

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

     label13:
        i#161 = i#161 + 1;

        goto label11;

     label14:
        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("   <-- classified as\n");

        i#191 = 0;

     label15:
        $i14 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#191);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i14);

        if i#191 >= $i14 goto label20;

        j#196 = 0;

     label16:
        $i15 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#196);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i15);

        if j#196 >= $i15 goto label19;

        $r15 = virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r16 = this.<weka.classifiers.evaluation.Evaluation: double[][] m_ConfusionMatrix>;

        $r17 = $r16[i#191];

        $d14 = $r17[j#196];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(fractional#84);

        if fractional#84 == 0 goto label17;

        $b17 = 2;

        goto label18;

     label17:
        $b17 = 0;

     label18:
        $r18 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>($d14, IDWidth, $b17);

        virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        j#196 = j#196 + 1;

        goto label16;

     label19:
        $r20 = virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" | ");

        $r21 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: java.lang.String num2ShortID(int,char[],int)>(i#191, IDChars, IDWidth);

        $r22 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r24 = this.<weka.classifiers.evaluation.Evaluation: java.lang.String[] m_ClassNames>;

        $r25 = $r24[i#191];

        $r26 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

        virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        i#191 = i#191 + 1;

        goto label15;

     label20:
        $r28 = virtualinvoke text.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r28;
    }

    protected java.lang.String num2ShortID(int, char[], int)
    {
        weka.classifiers.evaluation.Evaluation this;
        char[] IDChars, ID;
        int IDWidth, num#1, i#7, $i0, $i1, $i3, $i4, i#24;
        char $c2;
        java.lang.String $r0;

        this := @this: weka.classifiers.evaluation.Evaluation;

        num#1 := @parameter0: int;

        IDChars := @parameter1: char[];

        IDWidth := @parameter2: int;

        ID = newarray (char)[IDWidth];

        i#7 = IDWidth - 1;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#7);

        if i#7 < 0 goto label3;

        $i0 = lengthof IDChars;

        $i1 = num#1 % $i0;

        $c2 = IDChars[$i1];

        ID[i#7] = $c2;

        $i3 = lengthof IDChars;

        $i4 = num#1 / $i3;

        num#1 = $i4 - 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(num#1);

        if num#1 >= 0 goto label2;

        goto label3;

     label2:
        i#7 = i#7 + -1;

        goto label1;

     label3:
        i#24 = i#7 + -1;

     label4:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#24);

        if i#24 < 0 goto label5;

        ID[i#24] = 32;

        i#24 = i#24 + -1;

        goto label4;

     label5:
        $r0 = new java.lang.String;

        specialinvoke $r0.<java.lang.String: void <init>(char[])>(ID);

        return $r0;
    }

    public java.lang.String toClassDetailsString(java.lang.String) throws java.lang.Exception
    {
        weka.classifiers.evaluation.Evaluation this;
        java.lang.String title, metricName, $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r35, metricName#93, name#109, $r39, $r46, $r50, $r54, $r58, $r62, $r67, $r72, $r77, $r83, name#294, $r87, $r94, $r97, $r101, $r107, $r111, $r115, $r119, $r123, $r127, $r131, $r135, $r141, metricName#467, name#483, $r145, $r152, $r155, $r159;
        boolean displayTP, displayFP, displayP, displayR, displayFM, displayMCC, displayROC, displayPRC, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23;
        java.lang.StringBuffer text, $r9, $r40, $r98, $r102, $r156;
        double mat, rocVal, prcVal, stat, stat, $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;
        java.util.Iterator l12, l16, l11#79, l15#103, l11#453, l15#477;
        weka.classifiers.evaluation.AbstractEvaluationMetric m, m#85, m#459;
        java.util.List statNames, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r31, $r32, $r33, $r36, statNames#100, $r38, $r79, $r80, $r81, $r84, $r86, $r137, $r138, $r139, $r142, statNames#474, $r144;
        java.lang.Exception $r0;
        java.lang.StringBuilder $r11, $r12, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r29, $r90, $r91, $r92, $r93, $r148, $r149, $r150, $r151;
        int $i0, $i1, i#130, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.Object $r34, $r37, $r82, $r85, $r140, $r143;
        java.lang.Object[] $r44, $r48, $r52, $r56, $r60, $r65, $r70, $r75, $r95, $r105, $r109, $r113, $r117, $r121, $r125, $r129, $r133, $r153;
        java.lang.Double $r45, $r49, $r53, $r57, $r61, $r66, $r71, $r76, $r96, $r106, $r110, $r114, $r118, $r122, $r126, $r130, $r134, $r154;
        weka.classifiers.evaluation.InformationRetrievalEvaluationMetric $r88, $r146;
        java.lang.String[] $r100;

        this := @this: weka.classifiers.evaluation.Evaluation;

        title := @parameter0: java.lang.String;

        $z0 = this.<weka.classifiers.evaluation.Evaluation: boolean m_ClassIsNominal>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label01;

        $r0 = new java.lang.Exception;

        specialinvoke $r0.<java.lang.Exception: void <init>(java.lang.String)>("Evaluation: No per class statistics possible!");

        throw $r0;

     label01:
        $r1 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        displayTP = interfaceinvoke $r1.<java.util.List: boolean contains(java.lang.Object)>("tp rate");

        $r2 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        displayFP = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>("fp rate");

        $r3 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        displayP = interfaceinvoke $r3.<java.util.List: boolean contains(java.lang.Object)>("precision");

        $r4 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        displayR = interfaceinvoke $r4.<java.util.List: boolean contains(java.lang.Object)>("recall");

        $r5 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        displayFM = interfaceinvoke $r5.<java.util.List: boolean contains(java.lang.Object)>("f-measure");

        $r6 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        displayMCC = interfaceinvoke $r6.<java.util.List: boolean contains(java.lang.Object)>("mcc");

        $r7 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        displayROC = interfaceinvoke $r7.<java.util.List: boolean contains(java.lang.Object)>("roc area");

        $r8 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        displayPRC = interfaceinvoke $r8.<java.util.List: boolean contains(java.lang.Object)>("prc area");

        $r9 = new java.lang.StringBuffer;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(title);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n                 ");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayTP);

        if displayTP == 0 goto label02;

        $r14 = "TP Rate  ";

        goto label03;

     label02:
        $r14 = "";

     label03:
        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayFP);

        if displayFP == 0 goto label04;

        $r16 = "FP Rate  ";

        goto label05;

     label04:
        $r16 = "";

     label05:
        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayP);

        if displayP == 0 goto label06;

        $r18 = "Precision  ";

        goto label07;

     label06:
        $r18 = "";

     label07:
        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayR);

        if displayR == 0 goto label08;

        $r20 = "Recall   ";

        goto label09;

     label08:
        $r20 = "";

     label09:
        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayFM);

        if displayFM == 0 goto label10;

        $r22 = "F-Measure  ";

        goto label11;

     label10:
        $r22 = "";

     label11:
        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayMCC);

        if displayMCC == 0 goto label12;

        $r24 = "MCC      ";

        goto label13;

     label12:
        $r24 = "";

     label13:
        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayROC);

        if displayROC == 0 goto label14;

        $r26 = "ROC Area  ";

        goto label15;

     label14:
        $r26 = "";

     label15:
        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayPRC);

        if displayPRC == 0 goto label16;

        $r28 = "PRC Area  ";

        goto label17;

     label16:
        $r28 = "";

     label17:
        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.StringBuffer: void <init>(java.lang.String)>($r30);

        text = $r9;

        $r31 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_pluginMetrics>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r31);

        if $r31 == null goto label23;

        $r32 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_pluginMetrics>;

        $i0 = interfaceinvoke $r32.<java.util.List: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label23;

        $r33 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_pluginMetrics>;

        l11#79 = interfaceinvoke $r33.<java.util.List: java.util.Iterator iterator()>();

     label18:
        $z1 = interfaceinvoke l11#79.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label23;

        $r34 = interfaceinvoke l11#79.<java.util.Iterator: java.lang.Object next()>();

        m#85 = (weka.classifiers.evaluation.AbstractEvaluationMetric) $r34;

        $z2 = m#85 instanceof weka.classifiers.evaluation.InformationRetrievalEvaluationMetric;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label22;

        $z3 = virtualinvoke m#85.<weka.classifiers.evaluation.AbstractEvaluationMetric: boolean appliesToNominalClass()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label22;

        $r35 = virtualinvoke m#85.<weka.classifiers.evaluation.AbstractEvaluationMetric: java.lang.String getMetricName()>();

        metricName#93 = virtualinvoke $r35.<java.lang.String: java.lang.String toLowerCase()>();

        $r36 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        $z4 = interfaceinvoke $r36.<java.util.List: boolean contains(java.lang.Object)>(metricName#93);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label22;

        statNames#100 = virtualinvoke m#85.<weka.classifiers.evaluation.AbstractEvaluationMetric: java.util.List getStatisticNames()>();

        l15#103 = interfaceinvoke statNames#100.<java.util.List: java.util.Iterator iterator()>();

     label19:
        $z5 = interfaceinvoke l15#103.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label22;

        $r37 = interfaceinvoke l15#103.<java.util.Iterator: java.lang.Object next()>();

        name#109 = (java.lang.String) $r37;

        $r38 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        $r39 = virtualinvoke name#109.<java.lang.String: java.lang.String toLowerCase()>();

        $z6 = interfaceinvoke $r38.<java.util.List: boolean contains(java.lang.Object)>($r39);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label21;

        $i1 = virtualinvoke name#109.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 >= 7 goto label20;

        name#109 = staticinvoke <weka.core.Utils: java.lang.String padRight(java.lang.String,int)>(name#109, 7);

     label20:
        $r40 = virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(name#109);

        virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  ");

     label21:
        goto label19;

     label22:
        goto label18;

     label23:
        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Class\n");

        i#130 = 0;

     label24:
        $i2 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#130);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#130 >= $i2 goto label43;

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("                 ");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayTP);

        if displayTP == 0 goto label25;

        $r44 = newarray (java.lang.Object)[1];

        $d0 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double truePositiveRate(int)>(i#130);

        $r45 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r44[0] = $r45;

        $r46 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%-9.3f", $r44);

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r46);

     label25:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayFP);

        if displayFP == 0 goto label26;

        $r48 = newarray (java.lang.Object)[1];

        $d1 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double falsePositiveRate(int)>(i#130);

        $r49 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r48[0] = $r49;

        $r50 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%-9.3f", $r48);

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r50);

     label26:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayP);

        if displayP == 0 goto label27;

        $r52 = newarray (java.lang.Object)[1];

        $d2 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double precision(int)>(i#130);

        $r53 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        $r52[0] = $r53;

        $r54 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%-11.3f", $r52);

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r54);

     label27:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayR);

        if displayR == 0 goto label28;

        $r56 = newarray (java.lang.Object)[1];

        $d3 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double recall(int)>(i#130);

        $r57 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);

        $r56[0] = $r57;

        $r58 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%-9.3f", $r56);

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r58);

     label28:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayFM);

        if displayFM == 0 goto label29;

        $r60 = newarray (java.lang.Object)[1];

        $d4 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double fMeasure(int)>(i#130);

        $r61 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d4);

        $r60[0] = $r61;

        $r62 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%-11.3f", $r60);

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r62);

     label29:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayMCC);

        if displayMCC == 0 goto label31;

        mat = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double matthewsCorrelationCoefficient(int)>(i#130);

        $z7 = staticinvoke <weka.core.Utils: boolean isMissingValue(double)>(mat);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 == 0 goto label30;

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("?       ");

        goto label31;

     label30:
        $r65 = newarray (java.lang.Object)[1];

        $d5 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double matthewsCorrelationCoefficient(int)>(i#130);

        $r66 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d5);

        $r65[0] = $r66;

        $r67 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%-9.3f", $r65);

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r67);

     label31:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayROC);

        if displayROC == 0 goto label33;

        rocVal = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double areaUnderROC(int)>(i#130);

        $z8 = staticinvoke <weka.core.Utils: boolean isMissingValue(double)>(rocVal);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 == 0 goto label32;

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("?         ");

        goto label33;

     label32:
        $r70 = newarray (java.lang.Object)[1];

        $r71 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(rocVal);

        $r70[0] = $r71;

        $r72 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%-10.3f", $r70);

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r72);

     label33:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayPRC);

        if displayPRC == 0 goto label35;

        prcVal = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double areaUnderPRC(int)>(i#130);

        $z9 = staticinvoke <weka.core.Utils: boolean isMissingValue(double)>(prcVal);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 == 0 goto label34;

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("?         ");

        goto label35;

     label34:
        $r75 = newarray (java.lang.Object)[1];

        $r76 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(prcVal);

        $r75[0] = $r76;

        $r77 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%-10.3f", $r75);

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r77);

     label35:
        $r79 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_pluginMetrics>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r79);

        if $r79 == null goto label42;

        $r80 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_pluginMetrics>;

        $i3 = interfaceinvoke $r80.<java.util.List: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 <= 0 goto label42;

        $r81 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_pluginMetrics>;

        l12 = interfaceinvoke $r81.<java.util.List: java.util.Iterator iterator()>();

     label36:
        $z10 = interfaceinvoke l12.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z10);

        if $z10 == 0 goto label42;

        $r82 = interfaceinvoke l12.<java.util.Iterator: java.lang.Object next()>();

        m = (weka.classifiers.evaluation.AbstractEvaluationMetric) $r82;

        $z11 = m instanceof weka.classifiers.evaluation.InformationRetrievalEvaluationMetric;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z11);

        if $z11 == 0 goto label41;

        $z12 = virtualinvoke m.<weka.classifiers.evaluation.AbstractEvaluationMetric: boolean appliesToNominalClass()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z12);

        if $z12 == 0 goto label41;

        $r83 = virtualinvoke m.<weka.classifiers.evaluation.AbstractEvaluationMetric: java.lang.String getMetricName()>();

        metricName = virtualinvoke $r83.<java.lang.String: java.lang.String toLowerCase()>();

        $r84 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        $z13 = interfaceinvoke $r84.<java.util.List: boolean contains(java.lang.Object)>(metricName);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z13);

        if $z13 == 0 goto label41;

        statNames = virtualinvoke m.<weka.classifiers.evaluation.AbstractEvaluationMetric: java.util.List getStatisticNames()>();

        l16 = interfaceinvoke statNames.<java.util.List: java.util.Iterator iterator()>();

     label37:
        $z14 = interfaceinvoke l16.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z14);

        if $z14 == 0 goto label41;

        $r85 = interfaceinvoke l16.<java.util.Iterator: java.lang.Object next()>();

        name#294 = (java.lang.String) $r85;

        $r86 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        $r87 = virtualinvoke name#294.<java.lang.String: java.lang.String toLowerCase()>();

        $z15 = interfaceinvoke $r86.<java.util.List: boolean contains(java.lang.Object)>($r87);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z15);

        if $z15 == 0 goto label40;

        $r88 = (weka.classifiers.evaluation.InformationRetrievalEvaluationMetric) m;

        stat = interfaceinvoke $r88.<weka.classifiers.evaluation.InformationRetrievalEvaluationMetric: double getStatistic(java.lang.String,int)>(name#294, i#130);

        $i4 = virtualinvoke name#294.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 >= 7 goto label38;

        name#294 = staticinvoke <weka.core.Utils: java.lang.String padRight(java.lang.String,int)>(name#294, 7);

     label38:
        $z16 = staticinvoke <weka.core.Utils: boolean isMissingValue(double)>(stat);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z16);

        if $z16 == 0 goto label39;

        $i5 = virtualinvoke name#294.<java.lang.String: int length()>();

        staticinvoke <weka.core.Utils: java.lang.String padRight(java.lang.String,int)>("?", $i5);

        goto label40;

     label39:
        $r90 = new java.lang.StringBuilder;

        specialinvoke $r90.<java.lang.StringBuilder: void <init>()>();

        $r91 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%-");

        $i6 = virtualinvoke name#294.<java.lang.String: int length()>();

        $r92 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r93 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".3f");

        $r94 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.String toString()>();

        $r95 = newarray (java.lang.Object)[1];

        $r96 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(stat);

        $r95[0] = $r96;

        $r97 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r94, $r95);

        $r98 = virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r97);

        virtualinvoke $r98.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  ");

     label40:
        goto label37;

     label41:
        goto label36;

     label42:
        $r100 = this.<weka.classifiers.evaluation.Evaluation: java.lang.String[] m_ClassNames>;

        $r101 = $r100[i#130];

        $r102 = virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r101);

        virtualinvoke $r102.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        i#130 = i#130 + 1;

        goto label24;

     label43:
        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Weighted Avg.    ");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayTP);

        if displayTP == 0 goto label44;

        $r105 = newarray (java.lang.Object)[1];

        $d6 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double weightedTruePositiveRate()>();

        $r106 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d6);

        $r105[0] = $r106;

        $r107 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%-9.3f", $r105);

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r107);

     label44:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayFP);

        if displayFP == 0 goto label45;

        $r109 = newarray (java.lang.Object)[1];

        $d7 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double weightedFalsePositiveRate()>();

        $r110 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d7);

        $r109[0] = $r110;

        $r111 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%-9.3f", $r109);

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r111);

     label45:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayP);

        if displayP == 0 goto label46;

        $r113 = newarray (java.lang.Object)[1];

        $d8 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double weightedPrecision()>();

        $r114 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d8);

        $r113[0] = $r114;

        $r115 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%-11.3f", $r113);

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r115);

     label46:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayR);

        if displayR == 0 goto label47;

        $r117 = newarray (java.lang.Object)[1];

        $d9 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double weightedRecall()>();

        $r118 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d9);

        $r117[0] = $r118;

        $r119 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%-9.3f", $r117);

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r119);

     label47:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayFM);

        if displayFM == 0 goto label48;

        $r121 = newarray (java.lang.Object)[1];

        $d10 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double weightedFMeasure()>();

        $r122 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d10);

        $r121[0] = $r122;

        $r123 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%-11.3f", $r121);

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r123);

     label48:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayMCC);

        if displayMCC == 0 goto label49;

        $r125 = newarray (java.lang.Object)[1];

        $d11 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double weightedMatthewsCorrelation()>();

        $r126 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d11);

        $r125[0] = $r126;

        $r127 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%-9.3f", $r125);

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r127);

     label49:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayROC);

        if displayROC == 0 goto label50;

        $r129 = newarray (java.lang.Object)[1];

        $d12 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double weightedAreaUnderROC()>();

        $r130 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d12);

        $r129[0] = $r130;

        $r131 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%-10.3f", $r129);

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r131);

     label50:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayPRC);

        if displayPRC == 0 goto label51;

        $r133 = newarray (java.lang.Object)[1];

        $d13 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double weightedAreaUnderPRC()>();

        $r134 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d13);

        $r133[0] = $r134;

        $r135 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%-10.3f", $r133);

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r135);

     label51:
        $r137 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_pluginMetrics>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r137);

        if $r137 == null goto label58;

        $r138 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_pluginMetrics>;

        $i7 = interfaceinvoke $r138.<java.util.List: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if $i7 <= 0 goto label58;

        $r139 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_pluginMetrics>;

        l11#453 = interfaceinvoke $r139.<java.util.List: java.util.Iterator iterator()>();

     label52:
        $z17 = interfaceinvoke l11#453.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z17);

        if $z17 == 0 goto label58;

        $r140 = interfaceinvoke l11#453.<java.util.Iterator: java.lang.Object next()>();

        m#459 = (weka.classifiers.evaluation.AbstractEvaluationMetric) $r140;

        $z18 = m#459 instanceof weka.classifiers.evaluation.InformationRetrievalEvaluationMetric;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z18);

        if $z18 == 0 goto label57;

        $z19 = virtualinvoke m#459.<weka.classifiers.evaluation.AbstractEvaluationMetric: boolean appliesToNominalClass()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z19);

        if $z19 == 0 goto label57;

        $r141 = virtualinvoke m#459.<weka.classifiers.evaluation.AbstractEvaluationMetric: java.lang.String getMetricName()>();

        metricName#467 = virtualinvoke $r141.<java.lang.String: java.lang.String toLowerCase()>();

        $r142 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        $z20 = interfaceinvoke $r142.<java.util.List: boolean contains(java.lang.Object)>(metricName#467);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z20);

        if $z20 == 0 goto label57;

        statNames#474 = virtualinvoke m#459.<weka.classifiers.evaluation.AbstractEvaluationMetric: java.util.List getStatisticNames()>();

        l15#477 = interfaceinvoke statNames#474.<java.util.List: java.util.Iterator iterator()>();

     label53:
        $z21 = interfaceinvoke l15#477.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z21);

        if $z21 == 0 goto label57;

        $r143 = interfaceinvoke l15#477.<java.util.Iterator: java.lang.Object next()>();

        name#483 = (java.lang.String) $r143;

        $r144 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_metricsToDisplay>;

        $r145 = virtualinvoke name#483.<java.lang.String: java.lang.String toLowerCase()>();

        $z22 = interfaceinvoke $r144.<java.util.List: boolean contains(java.lang.Object)>($r145);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z22);

        if $z22 == 0 goto label56;

        $r146 = (weka.classifiers.evaluation.InformationRetrievalEvaluationMetric) m#459;

        stat = interfaceinvoke $r146.<weka.classifiers.evaluation.InformationRetrievalEvaluationMetric: double getClassWeightedAverageStatistic(java.lang.String)>(name#483);

        $i8 = virtualinvoke name#483.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if $i8 >= 7 goto label54;

        name#483 = staticinvoke <weka.core.Utils: java.lang.String padRight(java.lang.String,int)>(name#483, 7);

     label54:
        $z23 = staticinvoke <weka.core.Utils: boolean isMissingValue(double)>(stat);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z23);

        if $z23 == 0 goto label55;

        $i9 = virtualinvoke name#483.<java.lang.String: int length()>();

        staticinvoke <weka.core.Utils: java.lang.String padRight(java.lang.String,int)>("?", $i9);

        goto label56;

     label55:
        $r148 = new java.lang.StringBuilder;

        specialinvoke $r148.<java.lang.StringBuilder: void <init>()>();

        $r149 = virtualinvoke $r148.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%-");

        $i10 = virtualinvoke name#483.<java.lang.String: int length()>();

        $r150 = virtualinvoke $r149.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r151 = virtualinvoke $r150.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".3f");

        $r152 = virtualinvoke $r151.<java.lang.StringBuilder: java.lang.String toString()>();

        $r153 = newarray (java.lang.Object)[1];

        $r154 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(stat);

        $r153[0] = $r154;

        $r155 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r152, $r153);

        $r156 = virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r155);

        virtualinvoke $r156.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  ");

     label56:
        goto label53;

     label57:
        goto label52;

     label58:
        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r159 = virtualinvoke text.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r159;
    }

    public double truePositiveRate(int)
    {
        weka.classifiers.evaluation.Evaluation this;
        int classIndex, j#6, $i0;
        double correct#2, total#4, $d0, $d1, $d2;
        double[][] $r0, $r2;
        double[] $r1, $r3;
        byte $b1;

        this := @this: weka.classifiers.evaluation.Evaluation;

        classIndex := @parameter0: int;

        correct#2 = 0.0;

        total#4 = 0.0;

        j#6 = 0;

     label1:
        $i0 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if j#6 >= $i0 goto label3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classIndex);

        if j#6 != classIndex goto label2;

        $r0 = this.<weka.classifiers.evaluation.Evaluation: double[][] m_ConfusionMatrix>;

        $r1 = $r0[classIndex];

        $d0 = $r1[j#6];

        correct#2 = correct#2 + $d0;

     label2:
        $r2 = this.<weka.classifiers.evaluation.Evaluation: double[][] m_ConfusionMatrix>;

        $r3 = $r2[classIndex];

        $d1 = $r3[j#6];

        total#4 = total#4 + $d1;

        j#6 = j#6 + 1;

        goto label1;

     label3:
        $b1 = total#4 cmpl 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 != 0 goto label4;

        return 0.0;

     label4:
        $d2 = correct#2 / total#4;

        return $d2;
    }

    public double falsePositiveRate(int)
    {
        weka.classifiers.evaluation.Evaluation this;
        int classIndex, i#6, $i0, j#13, $i1;
        double incorrect#2, total#4, $d0, $d1, $d2;
        double[][] $r0, $r2;
        double[] $r1, $r3;
        byte $b2;

        this := @this: weka.classifiers.evaluation.Evaluation;

        classIndex := @parameter0: int;

        incorrect#2 = 0.0;

        total#4 = 0.0;

        i#6 = 0;

     label1:
        $i0 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#6 >= $i0 goto label5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classIndex);

        if i#6 == classIndex goto label4;

        j#13 = 0;

     label2:
        $i1 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#13);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if j#13 >= $i1 goto label4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#13);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classIndex);

        if j#13 != classIndex goto label3;

        $r0 = this.<weka.classifiers.evaluation.Evaluation: double[][] m_ConfusionMatrix>;

        $r1 = $r0[i#6];

        $d0 = $r1[j#13];

        incorrect#2 = incorrect#2 + $d0;

     label3:
        $r2 = this.<weka.classifiers.evaluation.Evaluation: double[][] m_ConfusionMatrix>;

        $r3 = $r2[i#6];

        $d1 = $r3[j#13];

        total#4 = total#4 + $d1;

        j#13 = j#13 + 1;

        goto label2;

     label4:
        i#6 = i#6 + 1;

        goto label1;

     label5:
        $b2 = total#4 cmpl 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b2);

        if $b2 != 0 goto label6;

        return 0.0;

     label6:
        $d2 = incorrect#2 / total#4;

        return $d2;
    }

    public double precision(int)
    {
        weka.classifiers.evaluation.Evaluation this;
        int classIndex, i#6, $i0;
        double correct#2, total#4, $d0, $d1, $d2;
        double[][] $r0, $r2;
        double[] $r1, $r3;
        byte $b1;

        this := @this: weka.classifiers.evaluation.Evaluation;

        classIndex := @parameter0: int;

        correct#2 = 0.0;

        total#4 = 0.0;

        i#6 = 0;

     label1:
        $i0 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#6 >= $i0 goto label3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classIndex);

        if i#6 != classIndex goto label2;

        $r0 = this.<weka.classifiers.evaluation.Evaluation: double[][] m_ConfusionMatrix>;

        $r1 = $r0[i#6];

        $d0 = $r1[classIndex];

        correct#2 = correct#2 + $d0;

     label2:
        $r2 = this.<weka.classifiers.evaluation.Evaluation: double[][] m_ConfusionMatrix>;

        $r3 = $r2[i#6];

        $d1 = $r3[classIndex];

        total#4 = total#4 + $d1;

        i#6 = i#6 + 1;

        goto label1;

     label3:
        $b1 = total#4 cmpl 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 != 0 goto label4;

        return 0.0;

     label4:
        $d2 = correct#2 / total#4;

        return $d2;
    }

    public double recall(int)
    {
        weka.classifiers.evaluation.Evaluation this;
        int classIndex;
        double $d0;

        this := @this: weka.classifiers.evaluation.Evaluation;

        classIndex := @parameter0: int;

        $d0 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double truePositiveRate(int)>(classIndex);

        return $d0;
    }

    public double fMeasure(int)
    {
        weka.classifiers.evaluation.Evaluation this;
        int classIndex;
        double precision, recall, $d0, $d1, $d2, $d3, $d4;
        byte $b0;

        this := @this: weka.classifiers.evaluation.Evaluation;

        classIndex := @parameter0: int;

        precision = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double precision(int)>(classIndex);

        recall = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double recall(int)>(classIndex);

        $d0 = precision + recall;

        $b0 = $d0 cmpl 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 != 0 goto label1;

        return 0.0;

     label1:
        $d1 = 2.0 * precision;

        $d2 = $d1 * recall;

        $d3 = precision + recall;

        $d4 = $d2 / $d3;

        return $d4;
    }

    public double matthewsCorrelationCoefficient(int)
    {
        weka.classifiers.evaluation.Evaluation this;
        int classIndex;
        double numTP, numTN, numFP, numFN, n, $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, d#35, d#38, $d8;
        byte $b0;

        this := @this: weka.classifiers.evaluation.Evaluation;

        classIndex := @parameter0: int;

        numTP = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double numTruePositives(int)>(classIndex);

        numTN = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double numTrueNegatives(int)>(classIndex);

        numFP = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double numFalsePositives(int)>(classIndex);

        numFN = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double numFalseNegatives(int)>(classIndex);

        $d0 = numTP * numTN;

        $d1 = numFP * numFN;

        n = $d0 - $d1;

        $d2 = numTP + numFP;

        $d3 = numTP + numFN;

        $d4 = $d2 * $d3;

        $d5 = numTN + numFP;

        $d6 = $d4 * $d5;

        $d7 = numTN + numFN;

        d#35 = $d6 * $d7;

        d#38 = staticinvoke <java.lang.Math: double sqrt(double)>(d#35);

        $b0 = d#38 cmpl 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 != 0 goto label1;

        d#38 = 1.0;

     label1:
        $d8 = n / d#38;

        return $d8;
    }

    public double areaUnderROC(int)
    {
        weka.classifiers.evaluation.Evaluation this;
        int classIndex;
        weka.classifiers.evaluation.ThresholdCurve tc, $r1;
        weka.core.Instances result;
        java.util.ArrayList $r0, $r2;
        double $d0, $d1;

        this := @this: weka.classifiers.evaluation.Evaluation;

        classIndex := @parameter0: int;

        $r0 = this.<weka.classifiers.evaluation.Evaluation: java.util.ArrayList m_Predictions>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label1;

        $d0 = staticinvoke <weka.core.Utils: double missingValue()>();

        return $d0;

     label1:
        $r1 = new weka.classifiers.evaluation.ThresholdCurve;

        specialinvoke $r1.<weka.classifiers.evaluation.ThresholdCurve: void <init>()>();

        tc = $r1;

        $r2 = this.<weka.classifiers.evaluation.Evaluation: java.util.ArrayList m_Predictions>;

        result = virtualinvoke tc.<weka.classifiers.evaluation.ThresholdCurve: weka.core.Instances getCurve(java.util.ArrayList,int)>($r2, classIndex);

        $d1 = staticinvoke <weka.classifiers.evaluation.ThresholdCurve: double getROCArea(weka.core.Instances)>(result);

        return $d1;
    }

    public double areaUnderPRC(int)
    {
        weka.classifiers.evaluation.Evaluation this;
        int classIndex;
        weka.classifiers.evaluation.ThresholdCurve tc, $r1;
        weka.core.Instances result;
        java.util.ArrayList $r0, $r2;
        double $d0, $d1;

        this := @this: weka.classifiers.evaluation.Evaluation;

        classIndex := @parameter0: int;

        $r0 = this.<weka.classifiers.evaluation.Evaluation: java.util.ArrayList m_Predictions>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label1;

        $d0 = staticinvoke <weka.core.Utils: double missingValue()>();

        return $d0;

     label1:
        $r1 = new weka.classifiers.evaluation.ThresholdCurve;

        specialinvoke $r1.<weka.classifiers.evaluation.ThresholdCurve: void <init>()>();

        tc = $r1;

        $r2 = this.<weka.classifiers.evaluation.Evaluation: java.util.ArrayList m_Predictions>;

        result = virtualinvoke tc.<weka.classifiers.evaluation.ThresholdCurve: weka.core.Instances getCurve(java.util.ArrayList,int)>($r2, classIndex);

        $d1 = staticinvoke <weka.classifiers.evaluation.ThresholdCurve: double getPRCArea(weka.core.Instances)>(result);

        return $d1;
    }

    public double weightedTruePositiveRate()
    {
        weka.classifiers.evaluation.Evaluation this;
        double[] classCounts, $r2;
        double temp, classCountSum#5, $d0, $d1, $d2, $d3, truePosTotal#34, $d4, $d5, $d6;
        int $i0, i#7, $i1, j#12, $i2, i#36, $i4;
        double[][] $r1;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $i0 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        classCounts = newarray (double)[$i0];

        classCountSum#5 = 0.0;

        i#7 = 0;

     label1:
        $i1 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#7 >= $i1 goto label4;

        j#12 = 0;

     label2:
        $i2 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if j#12 >= $i2 goto label3;

        $d0 = classCounts[i#7];

        $r1 = this.<weka.classifiers.evaluation.Evaluation: double[][] m_ConfusionMatrix>;

        $r2 = $r1[i#7];

        $d1 = $r2[j#12];

        $d2 = $d0 + $d1;

        classCounts[i#7] = $d2;

        j#12 = j#12 + 1;

        goto label2;

     label3:
        $d3 = classCounts[i#7];

        classCountSum#5 = classCountSum#5 + $d3;

        i#7 = i#7 + 1;

        goto label1;

     label4:
        truePosTotal#34 = 0.0;

        i#36 = 0;

     label5:
        $i4 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#36);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if i#36 >= $i4 goto label6;

        temp = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double truePositiveRate(int)>(i#36);

        $d4 = classCounts[i#36];

        $d5 = temp * $d4;

        truePosTotal#34 = truePosTotal#34 + $d5;

        i#36 = i#36 + 1;

        goto label5;

     label6:
        $d6 = truePosTotal#34 / classCountSum#5;

        return $d6;
    }

    public double weightedFalsePositiveRate()
    {
        weka.classifiers.evaluation.Evaluation this;
        double[] classCounts, $r2;
        double temp, classCountSum#5, $d0, $d1, $d2, $d3, falsePosTotal#34, $d4, $d5, $d6;
        int $i0, i#7, $i1, j#12, $i2, i#36, $i4;
        double[][] $r1;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $i0 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        classCounts = newarray (double)[$i0];

        classCountSum#5 = 0.0;

        i#7 = 0;

     label1:
        $i1 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#7 >= $i1 goto label4;

        j#12 = 0;

     label2:
        $i2 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if j#12 >= $i2 goto label3;

        $d0 = classCounts[i#7];

        $r1 = this.<weka.classifiers.evaluation.Evaluation: double[][] m_ConfusionMatrix>;

        $r2 = $r1[i#7];

        $d1 = $r2[j#12];

        $d2 = $d0 + $d1;

        classCounts[i#7] = $d2;

        j#12 = j#12 + 1;

        goto label2;

     label3:
        $d3 = classCounts[i#7];

        classCountSum#5 = classCountSum#5 + $d3;

        i#7 = i#7 + 1;

        goto label1;

     label4:
        falsePosTotal#34 = 0.0;

        i#36 = 0;

     label5:
        $i4 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#36);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if i#36 >= $i4 goto label6;

        temp = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double falsePositiveRate(int)>(i#36);

        $d4 = classCounts[i#36];

        $d5 = temp * $d4;

        falsePosTotal#34 = falsePosTotal#34 + $d5;

        i#36 = i#36 + 1;

        goto label5;

     label6:
        $d6 = falsePosTotal#34 / classCountSum#5;

        return $d6;
    }

    public double weightedPrecision()
    {
        weka.classifiers.evaluation.Evaluation this;
        double[] classCounts, $r2;
        double temp, classCountSum#5, $d0, $d1, $d2, $d3, precisionTotal#34, $d4, $d5, $d6;
        int $i0, i#7, $i1, j#12, $i2, i#36, $i4;
        double[][] $r1;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $i0 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        classCounts = newarray (double)[$i0];

        classCountSum#5 = 0.0;

        i#7 = 0;

     label1:
        $i1 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#7 >= $i1 goto label4;

        j#12 = 0;

     label2:
        $i2 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if j#12 >= $i2 goto label3;

        $d0 = classCounts[i#7];

        $r1 = this.<weka.classifiers.evaluation.Evaluation: double[][] m_ConfusionMatrix>;

        $r2 = $r1[i#7];

        $d1 = $r2[j#12];

        $d2 = $d0 + $d1;

        classCounts[i#7] = $d2;

        j#12 = j#12 + 1;

        goto label2;

     label3:
        $d3 = classCounts[i#7];

        classCountSum#5 = classCountSum#5 + $d3;

        i#7 = i#7 + 1;

        goto label1;

     label4:
        precisionTotal#34 = 0.0;

        i#36 = 0;

     label5:
        $i4 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#36);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if i#36 >= $i4 goto label6;

        temp = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double precision(int)>(i#36);

        $d4 = classCounts[i#36];

        $d5 = temp * $d4;

        precisionTotal#34 = precisionTotal#34 + $d5;

        i#36 = i#36 + 1;

        goto label5;

     label6:
        $d6 = precisionTotal#34 / classCountSum#5;

        return $d6;
    }

    public double weightedRecall()
    {
        weka.classifiers.evaluation.Evaluation this;
        double $d0;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $d0 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double weightedTruePositiveRate()>();

        return $d0;
    }

    public double weightedFMeasure()
    {
        weka.classifiers.evaluation.Evaluation this;
        double[] classCounts, $r2;
        double temp, classCountSum#5, $d0, $d1, $d2, $d3, fMeasureTotal#34, $d4, $d5, $d6;
        int $i0, i#7, $i1, j#12, $i2, i#36, $i4;
        double[][] $r1;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $i0 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        classCounts = newarray (double)[$i0];

        classCountSum#5 = 0.0;

        i#7 = 0;

     label1:
        $i1 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#7 >= $i1 goto label4;

        j#12 = 0;

     label2:
        $i2 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if j#12 >= $i2 goto label3;

        $d0 = classCounts[i#7];

        $r1 = this.<weka.classifiers.evaluation.Evaluation: double[][] m_ConfusionMatrix>;

        $r2 = $r1[i#7];

        $d1 = $r2[j#12];

        $d2 = $d0 + $d1;

        classCounts[i#7] = $d2;

        j#12 = j#12 + 1;

        goto label2;

     label3:
        $d3 = classCounts[i#7];

        classCountSum#5 = classCountSum#5 + $d3;

        i#7 = i#7 + 1;

        goto label1;

     label4:
        fMeasureTotal#34 = 0.0;

        i#36 = 0;

     label5:
        $i4 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#36);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if i#36 >= $i4 goto label6;

        temp = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double fMeasure(int)>(i#36);

        $d4 = classCounts[i#36];

        $d5 = temp * $d4;

        fMeasureTotal#34 = fMeasureTotal#34 + $d5;

        i#36 = i#36 + 1;

        goto label5;

     label6:
        $d6 = fMeasureTotal#34 / classCountSum#5;

        return $d6;
    }

    public double weightedMatthewsCorrelation()
    {
        weka.classifiers.evaluation.Evaluation this;
        double[] classCounts, $r2;
        double temp, classCountSum#5, $d0, $d1, $d2, $d3, mccTotal#34, $d4, $d5, $d6;
        int $i0, i#7, $i1, j#12, $i2, i#36, $i4;
        double[][] $r1;
        boolean $z0;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $i0 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        classCounts = newarray (double)[$i0];

        classCountSum#5 = 0.0;

        i#7 = 0;

     label1:
        $i1 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#7 >= $i1 goto label4;

        j#12 = 0;

     label2:
        $i2 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if j#12 >= $i2 goto label3;

        $d0 = classCounts[i#7];

        $r1 = this.<weka.classifiers.evaluation.Evaluation: double[][] m_ConfusionMatrix>;

        $r2 = $r1[i#7];

        $d1 = $r2[j#12];

        $d2 = $d0 + $d1;

        classCounts[i#7] = $d2;

        j#12 = j#12 + 1;

        goto label2;

     label3:
        $d3 = classCounts[i#7];

        classCountSum#5 = classCountSum#5 + $d3;

        i#7 = i#7 + 1;

        goto label1;

     label4:
        mccTotal#34 = 0.0;

        i#36 = 0;

     label5:
        $i4 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#36);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if i#36 >= $i4 goto label7;

        temp = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double matthewsCorrelationCoefficient(int)>(i#36);

        $z0 = staticinvoke <weka.core.Utils: boolean isMissingValue(double)>(temp);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label6;

        $d4 = classCounts[i#36];

        $d5 = temp * $d4;

        mccTotal#34 = mccTotal#34 + $d5;

     label6:
        i#36 = i#36 + 1;

        goto label5;

     label7:
        $d6 = mccTotal#34 / classCountSum#5;

        return $d6;
    }

    public double weightedAreaUnderROC()
    {
        weka.classifiers.evaluation.Evaluation this;
        double[] classCounts, $r2;
        double temp, classCountSum#5, $d0, $d1, $d2, $d3, aucTotal#34, $d4, $d5, $d6;
        int $i0, i#7, $i1, j#12, $i2, i#36, $i4;
        double[][] $r1;
        boolean $z0;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $i0 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        classCounts = newarray (double)[$i0];

        classCountSum#5 = 0.0;

        i#7 = 0;

     label1:
        $i1 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#7 >= $i1 goto label4;

        j#12 = 0;

     label2:
        $i2 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if j#12 >= $i2 goto label3;

        $d0 = classCounts[i#7];

        $r1 = this.<weka.classifiers.evaluation.Evaluation: double[][] m_ConfusionMatrix>;

        $r2 = $r1[i#7];

        $d1 = $r2[j#12];

        $d2 = $d0 + $d1;

        classCounts[i#7] = $d2;

        j#12 = j#12 + 1;

        goto label2;

     label3:
        $d3 = classCounts[i#7];

        classCountSum#5 = classCountSum#5 + $d3;

        i#7 = i#7 + 1;

        goto label1;

     label4:
        aucTotal#34 = 0.0;

        i#36 = 0;

     label5:
        $i4 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#36);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if i#36 >= $i4 goto label7;

        temp = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double areaUnderROC(int)>(i#36);

        $z0 = staticinvoke <weka.core.Utils: boolean isMissingValue(double)>(temp);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label6;

        $d4 = classCounts[i#36];

        $d5 = temp * $d4;

        aucTotal#34 = aucTotal#34 + $d5;

     label6:
        i#36 = i#36 + 1;

        goto label5;

     label7:
        $d6 = aucTotal#34 / classCountSum#5;

        return $d6;
    }

    public double weightedAreaUnderPRC()
    {
        weka.classifiers.evaluation.Evaluation this;
        double[] classCounts, $r2;
        double temp, classCountSum#5, $d0, $d1, $d2, $d3, auprcTotal#34, $d4, $d5, $d6;
        int $i0, i#7, $i1, j#12, $i2, i#36, $i4;
        double[][] $r1;
        boolean $z0;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $i0 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        classCounts = newarray (double)[$i0];

        classCountSum#5 = 0.0;

        i#7 = 0;

     label1:
        $i1 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#7 >= $i1 goto label4;

        j#12 = 0;

     label2:
        $i2 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if j#12 >= $i2 goto label3;

        $d0 = classCounts[i#7];

        $r1 = this.<weka.classifiers.evaluation.Evaluation: double[][] m_ConfusionMatrix>;

        $r2 = $r1[i#7];

        $d1 = $r2[j#12];

        $d2 = $d0 + $d1;

        classCounts[i#7] = $d2;

        j#12 = j#12 + 1;

        goto label2;

     label3:
        $d3 = classCounts[i#7];

        classCountSum#5 = classCountSum#5 + $d3;

        i#7 = i#7 + 1;

        goto label1;

     label4:
        auprcTotal#34 = 0.0;

        i#36 = 0;

     label5:
        $i4 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#36);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if i#36 >= $i4 goto label7;

        temp = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double areaUnderPRC(int)>(i#36);

        $z0 = staticinvoke <weka.core.Utils: boolean isMissingValue(double)>(temp);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label6;

        $d4 = classCounts[i#36];

        $d5 = temp * $d4;

        auprcTotal#34 = auprcTotal#34 + $d5;

     label6:
        i#36 = i#36 + 1;

        goto label5;

     label7:
        $d6 = auprcTotal#34 / classCountSum#5;

        return $d6;
    }

    public double numTruePositives(int)
    {
        weka.classifiers.evaluation.Evaluation this;
        int classIndex, j#4, $i0;
        double correct#2, $d0;
        double[][] $r0;
        double[] $r1;

        this := @this: weka.classifiers.evaluation.Evaluation;

        classIndex := @parameter0: int;

        correct#2 = 0.0;

        j#4 = 0;

     label1:
        $i0 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if j#4 >= $i0 goto label3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classIndex);

        if j#4 != classIndex goto label2;

        $r0 = this.<weka.classifiers.evaluation.Evaluation: double[][] m_ConfusionMatrix>;

        $r1 = $r0[classIndex];

        $d0 = $r1[j#4];

        correct#2 = correct#2 + $d0;

     label2:
        j#4 = j#4 + 1;

        goto label1;

     label3:
        return correct#2;
    }

    public double numTrueNegatives(int)
    {
        weka.classifiers.evaluation.Evaluation this;
        int classIndex, i#4, $i0, j#11, $i1;
        double correct#2, $d0;
        double[][] $r0;
        double[] $r1;

        this := @this: weka.classifiers.evaluation.Evaluation;

        classIndex := @parameter0: int;

        correct#2 = 0.0;

        i#4 = 0;

     label1:
        $i0 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#4 >= $i0 goto label5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classIndex);

        if i#4 == classIndex goto label4;

        j#11 = 0;

     label2:
        $i1 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#11);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if j#11 >= $i1 goto label4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#11);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classIndex);

        if j#11 == classIndex goto label3;

        $r0 = this.<weka.classifiers.evaluation.Evaluation: double[][] m_ConfusionMatrix>;

        $r1 = $r0[i#4];

        $d0 = $r1[j#11];

        correct#2 = correct#2 + $d0;

     label3:
        j#11 = j#11 + 1;

        goto label2;

     label4:
        i#4 = i#4 + 1;

        goto label1;

     label5:
        return correct#2;
    }

    public double numFalsePositives(int)
    {
        weka.classifiers.evaluation.Evaluation this;
        int classIndex, i#4, $i0, j#11, $i1;
        double incorrect#2, $d0;
        double[][] $r0;
        double[] $r1;

        this := @this: weka.classifiers.evaluation.Evaluation;

        classIndex := @parameter0: int;

        incorrect#2 = 0.0;

        i#4 = 0;

     label1:
        $i0 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#4 >= $i0 goto label5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classIndex);

        if i#4 == classIndex goto label4;

        j#11 = 0;

     label2:
        $i1 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#11);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if j#11 >= $i1 goto label4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#11);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classIndex);

        if j#11 != classIndex goto label3;

        $r0 = this.<weka.classifiers.evaluation.Evaluation: double[][] m_ConfusionMatrix>;

        $r1 = $r0[i#4];

        $d0 = $r1[j#11];

        incorrect#2 = incorrect#2 + $d0;

     label3:
        j#11 = j#11 + 1;

        goto label2;

     label4:
        i#4 = i#4 + 1;

        goto label1;

     label5:
        return incorrect#2;
    }

    public double numFalseNegatives(int)
    {
        weka.classifiers.evaluation.Evaluation this;
        int classIndex, i#4, $i0, j#11, $i1;
        double incorrect#2, $d0;
        double[][] $r0;
        double[] $r1;

        this := @this: weka.classifiers.evaluation.Evaluation;

        classIndex := @parameter0: int;

        incorrect#2 = 0.0;

        i#4 = 0;

     label1:
        $i0 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#4 >= $i0 goto label5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classIndex);

        if i#4 != classIndex goto label4;

        j#11 = 0;

     label2:
        $i1 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#11);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if j#11 >= $i1 goto label4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#11);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classIndex);

        if j#11 == classIndex goto label3;

        $r0 = this.<weka.classifiers.evaluation.Evaluation: double[][] m_ConfusionMatrix>;

        $r1 = $r0[i#4];

        $d0 = $r1[j#11];

        incorrect#2 = incorrect#2 + $d0;

     label3:
        j#11 = j#11 + 1;

        goto label2;

     label4:
        i#4 = i#4 + 1;

        goto label1;

     label5:
        return incorrect#2;
    }

    public final double correct()
    {
        weka.classifiers.evaluation.Evaluation this;
        double $d0;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $d0 = this.<weka.classifiers.evaluation.Evaluation: double m_Correct>;

        return $d0;
    }

    public final double pctCorrect()
    {
        weka.classifiers.evaluation.Evaluation this;
        double $d0, $d1, $d2, $d3;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $d0 = this.<weka.classifiers.evaluation.Evaluation: double m_Correct>;

        $d1 = 100.0 * $d0;

        $d2 = this.<weka.classifiers.evaluation.Evaluation: double m_WithClass>;

        $d3 = $d1 / $d2;

        return $d3;
    }

    public final double incorrect()
    {
        weka.classifiers.evaluation.Evaluation this;
        double $d0;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $d0 = this.<weka.classifiers.evaluation.Evaluation: double m_Incorrect>;

        return $d0;
    }

    public final double pctIncorrect()
    {
        weka.classifiers.evaluation.Evaluation this;
        double $d0, $d1, $d2, $d3;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $d0 = this.<weka.classifiers.evaluation.Evaluation: double m_Incorrect>;

        $d1 = 100.0 * $d0;

        $d2 = this.<weka.classifiers.evaluation.Evaluation: double m_WithClass>;

        $d3 = $d1 / $d2;

        return $d3;
    }

    public final double kappa()
    {
        weka.classifiers.evaluation.Evaluation this;
        double[] sumRows, sumColumns, $r6, $r9, $r11, $r14;
        double[][] $r0, $r1, $r2, $r3, $r5, $r8, $r10, $r12, $r13;
        int $i0, $i1, i#12, $i2, j#18, $i3, i#60, $i6;
        double sumOfWeights#10, $d0, $d1, $d2, $d3, $d4, $d5, $d6, correct#56, chanceAgreement#58, $d7, $d8, $d9, $d10, $d11, chanceAgreement#87, correct#91, $d12, $d13, $d14;
        byte $b7;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $r0 = this.<weka.classifiers.evaluation.Evaluation: double[][] m_ConfusionMatrix>;

        $i0 = lengthof $r0;

        sumRows = newarray (double)[$i0];

        $r1 = this.<weka.classifiers.evaluation.Evaluation: double[][] m_ConfusionMatrix>;

        $i1 = lengthof $r1;

        sumColumns = newarray (double)[$i1];

        sumOfWeights#10 = 0.0;

        i#12 = 0;

     label1:
        $r2 = this.<weka.classifiers.evaluation.Evaluation: double[][] m_ConfusionMatrix>;

        $i2 = lengthof $r2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#12 >= $i2 goto label4;

        j#18 = 0;

     label2:
        $r3 = this.<weka.classifiers.evaluation.Evaluation: double[][] m_ConfusionMatrix>;

        $i3 = lengthof $r3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#18);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if j#18 >= $i3 goto label3;

        $d0 = sumRows[i#12];

        $r5 = this.<weka.classifiers.evaluation.Evaluation: double[][] m_ConfusionMatrix>;

        $r6 = $r5[i#12];

        $d1 = $r6[j#18];

        $d2 = $d0 + $d1;

        sumRows[i#12] = $d2;

        $d3 = sumColumns[j#18];

        $r8 = this.<weka.classifiers.evaluation.Evaluation: double[][] m_ConfusionMatrix>;

        $r9 = $r8[i#12];

        $d4 = $r9[j#18];

        $d5 = $d3 + $d4;

        sumColumns[j#18] = $d5;

        $r10 = this.<weka.classifiers.evaluation.Evaluation: double[][] m_ConfusionMatrix>;

        $r11 = $r10[i#12];

        $d6 = $r11[j#18];

        sumOfWeights#10 = sumOfWeights#10 + $d6;

        j#18 = j#18 + 1;

        goto label2;

     label3:
        i#12 = i#12 + 1;

        goto label1;

     label4:
        correct#56 = 0.0;

        chanceAgreement#58 = 0.0;

        i#60 = 0;

     label5:
        $r12 = this.<weka.classifiers.evaluation.Evaluation: double[][] m_ConfusionMatrix>;

        $i6 = lengthof $r12;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#60);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if i#60 >= $i6 goto label6;

        $d7 = sumRows[i#60];

        $d8 = sumColumns[i#60];

        $d9 = $d7 * $d8;

        chanceAgreement#58 = chanceAgreement#58 + $d9;

        $r13 = this.<weka.classifiers.evaluation.Evaluation: double[][] m_ConfusionMatrix>;

        $r14 = $r13[i#60];

        $d10 = $r14[i#60];

        correct#56 = correct#56 + $d10;

        i#60 = i#60 + 1;

        goto label5;

     label6:
        $d11 = sumOfWeights#10 * sumOfWeights#10;

        chanceAgreement#87 = chanceAgreement#58 / $d11;

        correct#91 = correct#56 / sumOfWeights#10;

        $b7 = chanceAgreement#87 cmpg 1.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b7);

        if $b7 >= 0 goto label7;

        $d12 = correct#91 - chanceAgreement#87;

        $d13 = 1.0 - chanceAgreement#87;

        $d14 = $d12 / $d13;

        return $d14;

     label7:
        return 1.0;
    }

    public final double totalCost()
    {
        weka.classifiers.evaluation.Evaluation this;
        double $d0;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $d0 = this.<weka.classifiers.evaluation.Evaluation: double m_TotalCost>;

        return $d0;
    }

    public final double avgCost()
    {
        weka.classifiers.evaluation.Evaluation this;
        double $d0, $d1, $d2;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $d0 = this.<weka.classifiers.evaluation.Evaluation: double m_TotalCost>;

        $d1 = this.<weka.classifiers.evaluation.Evaluation: double m_WithClass>;

        $d2 = $d0 / $d1;

        return $d2;
    }

    public final double KBRelativeInformation() throws java.lang.Exception
    {
        weka.classifiers.evaluation.Evaluation this;
        boolean $z0, $z1;
        java.lang.Exception $r0;
        double $d0, $d1, $d2, $d3;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $z0 = this.<weka.classifiers.evaluation.Evaluation: boolean m_ClassIsNominal>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r0 = new java.lang.Exception;

        specialinvoke $r0.<java.lang.Exception: void <init>(java.lang.String)>("Can\'t compute K&B Info score: class numeric!");

        throw $r0;

     label1:
        $z1 = this.<weka.classifiers.evaluation.Evaluation: boolean m_NoPriors>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        return #NaN;

     label2:
        $d0 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double KBInformation()>();

        $d1 = 100.0 * $d0;

        $d2 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double priorEntropy()>();

        $d3 = $d1 / $d2;

        return $d3;
    }

    public final double KBInformation() throws java.lang.Exception
    {
        weka.classifiers.evaluation.Evaluation this;
        boolean $z0, $z1;
        java.lang.Exception $r0;
        double $d0;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $z0 = this.<weka.classifiers.evaluation.Evaluation: boolean m_ClassIsNominal>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r0 = new java.lang.Exception;

        specialinvoke $r0.<java.lang.Exception: void <init>(java.lang.String)>("Can\'t compute K&B Info score: class numeric!");

        throw $r0;

     label1:
        $z1 = this.<weka.classifiers.evaluation.Evaluation: boolean m_NoPriors>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        return #NaN;

     label2:
        $d0 = this.<weka.classifiers.evaluation.Evaluation: double m_SumKBInfo>;

        return $d0;
    }

    public final double KBMeanInformation() throws java.lang.Exception
    {
        weka.classifiers.evaluation.Evaluation this;
        boolean $z0, $z1;
        java.lang.Exception $r0;
        double $d0, $d1, $d2, $d3, $d4;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $z0 = this.<weka.classifiers.evaluation.Evaluation: boolean m_ClassIsNominal>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r0 = new java.lang.Exception;

        specialinvoke $r0.<java.lang.Exception: void <init>(java.lang.String)>("Can\'t compute K&B Info score: class numeric!");

        throw $r0;

     label1:
        $z1 = this.<weka.classifiers.evaluation.Evaluation: boolean m_NoPriors>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        return #NaN;

     label2:
        $d0 = this.<weka.classifiers.evaluation.Evaluation: double m_SumKBInfo>;

        $d1 = this.<weka.classifiers.evaluation.Evaluation: double m_WithClass>;

        $d2 = this.<weka.classifiers.evaluation.Evaluation: double m_Unclassified>;

        $d3 = $d1 - $d2;

        $d4 = $d0 / $d3;

        return $d4;
    }

    public final double correlationCoefficient() throws java.lang.Exception
    {
        weka.classifiers.evaluation.Evaluation this;
        double varActual, varPredicted, varProd, correlation#6, $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, correlation#55, $d25, $d26;
        boolean $z0;
        java.lang.Exception $r0;
        byte $b0;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $z0 = this.<weka.classifiers.evaluation.Evaluation: boolean m_ClassIsNominal>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r0 = new java.lang.Exception;

        specialinvoke $r0.<java.lang.Exception: void <init>(java.lang.String)>("Can\'t compute correlation coefficient: class is nominal!");

        throw $r0;

     label1:
        correlation#6 = 0.0;

        $d0 = this.<weka.classifiers.evaluation.Evaluation: double m_SumSqrClass>;

        $d1 = this.<weka.classifiers.evaluation.Evaluation: double m_SumClass>;

        $d2 = this.<weka.classifiers.evaluation.Evaluation: double m_SumClass>;

        $d3 = $d1 * $d2;

        $d4 = this.<weka.classifiers.evaluation.Evaluation: double m_WithClass>;

        $d5 = this.<weka.classifiers.evaluation.Evaluation: double m_Unclassified>;

        $d6 = $d4 - $d5;

        $d7 = $d3 / $d6;

        varActual = $d0 - $d7;

        $d8 = this.<weka.classifiers.evaluation.Evaluation: double m_SumSqrPredicted>;

        $d9 = this.<weka.classifiers.evaluation.Evaluation: double m_SumPredicted>;

        $d10 = this.<weka.classifiers.evaluation.Evaluation: double m_SumPredicted>;

        $d11 = $d9 * $d10;

        $d12 = this.<weka.classifiers.evaluation.Evaluation: double m_WithClass>;

        $d13 = this.<weka.classifiers.evaluation.Evaluation: double m_Unclassified>;

        $d14 = $d12 - $d13;

        $d15 = $d11 / $d14;

        varPredicted = $d8 - $d15;

        $d16 = this.<weka.classifiers.evaluation.Evaluation: double m_SumClassPredicted>;

        $d17 = this.<weka.classifiers.evaluation.Evaluation: double m_SumClass>;

        $d18 = this.<weka.classifiers.evaluation.Evaluation: double m_SumPredicted>;

        $d19 = $d17 * $d18;

        $d20 = this.<weka.classifiers.evaluation.Evaluation: double m_WithClass>;

        $d21 = this.<weka.classifiers.evaluation.Evaluation: double m_Unclassified>;

        $d22 = $d20 - $d21;

        $d23 = $d19 / $d22;

        varProd = $d16 - $d23;

        $d24 = varActual * varPredicted;

        $b0 = $d24 cmpg 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 > 0 goto label2;

        correlation#55 = 0.0;

        goto label3;

     label2:
        $d25 = varActual * varPredicted;

        $d26 = staticinvoke <java.lang.Math: double sqrt(double)>($d25);

        correlation#55 = varProd / $d26;

     label3:
        return correlation#55;
    }

    public final double SFPriorEntropy()
    {
        weka.classifiers.evaluation.Evaluation this;
        boolean $z0, $z1;
        double $d0;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $z0 = this.<weka.classifiers.evaluation.Evaluation: boolean m_NoPriors>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = this.<weka.classifiers.evaluation.Evaluation: boolean m_ComplexityStatisticsAvailable>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

     label1:
        return #NaN;

     label2:
        $d0 = this.<weka.classifiers.evaluation.Evaluation: double m_SumPriorEntropy>;

        return $d0;
    }

    public final double SFMeanPriorEntropy()
    {
        weka.classifiers.evaluation.Evaluation this;
        boolean $z0, $z1;
        double $d0, $d1, $d2;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $z0 = this.<weka.classifiers.evaluation.Evaluation: boolean m_NoPriors>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = this.<weka.classifiers.evaluation.Evaluation: boolean m_ComplexityStatisticsAvailable>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

     label1:
        return #NaN;

     label2:
        $d0 = this.<weka.classifiers.evaluation.Evaluation: double m_SumPriorEntropy>;

        $d1 = this.<weka.classifiers.evaluation.Evaluation: double m_WithClass>;

        $d2 = $d0 / $d1;

        return $d2;
    }

    public final double SFSchemeEntropy()
    {
        weka.classifiers.evaluation.Evaluation this;
        boolean $z0;
        double $d0;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $z0 = this.<weka.classifiers.evaluation.Evaluation: boolean m_ComplexityStatisticsAvailable>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        return #NaN;

     label1:
        $d0 = this.<weka.classifiers.evaluation.Evaluation: double m_SumSchemeEntropy>;

        return $d0;
    }

    public final double SFMeanSchemeEntropy()
    {
        weka.classifiers.evaluation.Evaluation this;
        boolean $z0;
        double $d0, $d1, $d2, $d3, $d4;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $z0 = this.<weka.classifiers.evaluation.Evaluation: boolean m_ComplexityStatisticsAvailable>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        return #NaN;

     label1:
        $d0 = this.<weka.classifiers.evaluation.Evaluation: double m_SumSchemeEntropy>;

        $d1 = this.<weka.classifiers.evaluation.Evaluation: double m_WithClass>;

        $d2 = this.<weka.classifiers.evaluation.Evaluation: double m_Unclassified>;

        $d3 = $d1 - $d2;

        $d4 = $d0 / $d3;

        return $d4;
    }

    public final double SFEntropyGain()
    {
        weka.classifiers.evaluation.Evaluation this;
        boolean $z0, $z1;
        double $d0, $d1, $d2;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $z0 = this.<weka.classifiers.evaluation.Evaluation: boolean m_NoPriors>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = this.<weka.classifiers.evaluation.Evaluation: boolean m_ComplexityStatisticsAvailable>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

     label1:
        return #NaN;

     label2:
        $d0 = this.<weka.classifiers.evaluation.Evaluation: double m_SumPriorEntropy>;

        $d1 = this.<weka.classifiers.evaluation.Evaluation: double m_SumSchemeEntropy>;

        $d2 = $d0 - $d1;

        return $d2;
    }

    public final double SFMeanEntropyGain()
    {
        weka.classifiers.evaluation.Evaluation this;
        boolean $z0, $z1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $z0 = this.<weka.classifiers.evaluation.Evaluation: boolean m_NoPriors>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = this.<weka.classifiers.evaluation.Evaluation: boolean m_ComplexityStatisticsAvailable>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

     label1:
        return #NaN;

     label2:
        $d0 = this.<weka.classifiers.evaluation.Evaluation: double m_SumPriorEntropy>;

        $d1 = this.<weka.classifiers.evaluation.Evaluation: double m_SumSchemeEntropy>;

        $d2 = $d0 - $d1;

        $d3 = this.<weka.classifiers.evaluation.Evaluation: double m_WithClass>;

        $d4 = this.<weka.classifiers.evaluation.Evaluation: double m_Unclassified>;

        $d5 = $d3 - $d4;

        $d6 = $d2 / $d5;

        return $d6;
    }

    public final double meanAbsoluteError()
    {
        weka.classifiers.evaluation.Evaluation this;
        double $d0, $d1, $d2, $d3, $d4;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $d0 = this.<weka.classifiers.evaluation.Evaluation: double m_SumAbsErr>;

        $d1 = this.<weka.classifiers.evaluation.Evaluation: double m_WithClass>;

        $d2 = this.<weka.classifiers.evaluation.Evaluation: double m_Unclassified>;

        $d3 = $d1 - $d2;

        $d4 = $d0 / $d3;

        return $d4;
    }

    public final double rootMeanSquaredError()
    {
        weka.classifiers.evaluation.Evaluation this;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $d0 = this.<weka.classifiers.evaluation.Evaluation: double m_SumSqrErr>;

        $d1 = this.<weka.classifiers.evaluation.Evaluation: double m_WithClass>;

        $d2 = this.<weka.classifiers.evaluation.Evaluation: double m_Unclassified>;

        $d3 = $d1 - $d2;

        $d4 = $d0 / $d3;

        $d5 = staticinvoke <java.lang.Math: double sqrt(double)>($d4);

        return $d5;
    }

    public final double relativeAbsoluteError() throws java.lang.Exception
    {
        weka.classifiers.evaluation.Evaluation this;
        boolean $z0;
        double $d0, $d1, $d2, $d3;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $z0 = this.<weka.classifiers.evaluation.Evaluation: boolean m_NoPriors>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        return #NaN;

     label1:
        $d0 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double meanAbsoluteError()>();

        $d1 = 100.0 * $d0;

        $d2 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double meanPriorAbsoluteError()>();

        $d3 = $d1 / $d2;

        return $d3;
    }

    public final double rootRelativeSquaredError()
    {
        weka.classifiers.evaluation.Evaluation this;
        boolean $z0;
        double $d0, $d1, $d2, $d3;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $z0 = this.<weka.classifiers.evaluation.Evaluation: boolean m_NoPriors>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        return #NaN;

     label1:
        $d0 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double rootMeanSquaredError()>();

        $d1 = 100.0 * $d0;

        $d2 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double rootMeanPriorSquaredError()>();

        $d3 = $d1 / $d2;

        return $d3;
    }

    public final double coverageOfTestCasesByPredictedRegions()
    {
        weka.classifiers.evaluation.Evaluation this;
        boolean $z0;
        double $d0, $d1, $d2, $d3;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $z0 = this.<weka.classifiers.evaluation.Evaluation: boolean m_CoverageStatisticsAvailable>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        return #NaN;

     label1:
        $d0 = this.<weka.classifiers.evaluation.Evaluation: double m_TotalCoverage>;

        $d1 = 100.0 * $d0;

        $d2 = this.<weka.classifiers.evaluation.Evaluation: double m_WithClass>;

        $d3 = $d1 / $d2;

        return $d3;
    }

    public final double sizeOfPredictedRegions()
    {
        weka.classifiers.evaluation.Evaluation this;
        boolean $z0, $z1;
        double $d0, $d1, $d2, $d3;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $z0 = this.<weka.classifiers.evaluation.Evaluation: boolean m_NoPriors>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = this.<weka.classifiers.evaluation.Evaluation: boolean m_CoverageStatisticsAvailable>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

     label1:
        return #NaN;

     label2:
        $d0 = this.<weka.classifiers.evaluation.Evaluation: double m_TotalSizeOfRegions>;

        $d1 = 100.0 * $d0;

        $d2 = this.<weka.classifiers.evaluation.Evaluation: double m_WithClass>;

        $d3 = $d1 / $d2;

        return $d3;
    }

    public final double unclassified()
    {
        weka.classifiers.evaluation.Evaluation this;
        double $d0;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $d0 = this.<weka.classifiers.evaluation.Evaluation: double m_Unclassified>;

        return $d0;
    }

    public final double pctUnclassified()
    {
        weka.classifiers.evaluation.Evaluation this;
        double $d0, $d1, $d2, $d3;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $d0 = this.<weka.classifiers.evaluation.Evaluation: double m_Unclassified>;

        $d1 = 100.0 * $d0;

        $d2 = this.<weka.classifiers.evaluation.Evaluation: double m_WithClass>;

        $d3 = $d1 / $d2;

        return $d3;
    }

    public final double rootMeanPriorSquaredError()
    {
        weka.classifiers.evaluation.Evaluation this;
        boolean $z0;
        double $d0, $d1, $d2, $d3;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $z0 = this.<weka.classifiers.evaluation.Evaluation: boolean m_NoPriors>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        return #NaN;

     label1:
        $d0 = this.<weka.classifiers.evaluation.Evaluation: double m_SumPriorSqrErr>;

        $d1 = this.<weka.classifiers.evaluation.Evaluation: double m_WithClass>;

        $d2 = $d0 / $d1;

        $d3 = staticinvoke <java.lang.Math: double sqrt(double)>($d2);

        return $d3;
    }

    public final double meanPriorAbsoluteError()
    {
        weka.classifiers.evaluation.Evaluation this;
        boolean $z0;
        double $d0, $d1, $d2;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $z0 = this.<weka.classifiers.evaluation.Evaluation: boolean m_NoPriors>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        return #NaN;

     label1:
        $d0 = this.<weka.classifiers.evaluation.Evaluation: double m_SumPriorAbsErr>;

        $d1 = this.<weka.classifiers.evaluation.Evaluation: double m_WithClass>;

        $d2 = $d0 / $d1;

        return $d2;
    }

    public final double priorEntropy() throws java.lang.Exception
    {
        weka.classifiers.evaluation.Evaluation this;
        boolean $z0, $z1;
        java.lang.Exception $r0;
        double entropy#10, $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        int i#12, $i0;
        double[] $r1, $r2;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $z0 = this.<weka.classifiers.evaluation.Evaluation: boolean m_ClassIsNominal>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r0 = new java.lang.Exception;

        specialinvoke $r0.<java.lang.Exception: void <init>(java.lang.String)>("Can\'t compute entropy of class prior: class numeric!");

        throw $r0;

     label1:
        $z1 = this.<weka.classifiers.evaluation.Evaluation: boolean m_NoPriors>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        return #NaN;

     label2:
        entropy#10 = 0.0;

        i#12 = 0;

     label3:
        $i0 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#12 >= $i0 goto label4;

        $r1 = this.<weka.classifiers.evaluation.Evaluation: double[] m_ClassPriors>;

        $d0 = $r1[i#12];

        $d1 = this.<weka.classifiers.evaluation.Evaluation: double m_ClassPriorsSum>;

        $d2 = $d0 / $d1;

        $r2 = this.<weka.classifiers.evaluation.Evaluation: double[] m_ClassPriors>;

        $d3 = $r2[i#12];

        $d4 = this.<weka.classifiers.evaluation.Evaluation: double m_ClassPriorsSum>;

        $d5 = $d3 / $d4;

        $d6 = staticinvoke <weka.core.Utils: double log2(double)>($d5);

        $d7 = $d2 * $d6;

        entropy#10 = entropy#10 - $d7;

        i#12 = i#12 + 1;

        goto label3;

     label4:
        return entropy#10;
    }

    protected double evaluationForSingleInstance(weka.classifiers.Classifier, weka.core.Instance, boolean) throws java.lang.Exception
    {
        weka.classifiers.evaluation.Evaluation this;
        weka.classifiers.Classifier classifier;
        boolean storePredictions, $z0, $z1, $z2, $z3, $z4, $z5;
        weka.core.Instance classMissing, instance#1, instance#13;
        int mappedClass;
        double pred, $d0, $d1;
        java.lang.Object $r0, $r2;
        weka.core.Instances $r1;
        weka.classifiers.misc.InputMappedClassifier $r3, $r4;
        double[] $r5;
        weka.classifiers.IntervalEstimator $r6;
        weka.classifiers.ConditionalDensityEstimator $r7;

        this := @this: weka.classifiers.evaluation.Evaluation;

        classifier := @parameter0: weka.classifiers.Classifier;

        instance#1 := @parameter1: weka.core.Instance;

        storePredictions := @parameter2: boolean;

        $r0 = interfaceinvoke instance#1.<weka.core.Instance: java.lang.Object copy()>();

        classMissing = (weka.core.Instance) $r0;

        $r1 = interfaceinvoke instance#1.<weka.core.Instance: weka.core.Instances dataset()>();

        interfaceinvoke classMissing.<weka.core.Instance: void setDataset(weka.core.Instances)>($r1);

        $z0 = classifier instanceof weka.classifiers.misc.InputMappedClassifier;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r2 = interfaceinvoke instance#1.<weka.core.Instance: java.lang.Object copy()>();

        instance#13 = (weka.core.Instance) $r2;

        $r3 = (weka.classifiers.misc.InputMappedClassifier) classifier;

        instance#1 = virtualinvoke $r3.<weka.classifiers.misc.InputMappedClassifier: weka.core.Instance constructMappedInstance(weka.core.Instance)>(instance#13);

        $r4 = (weka.classifiers.misc.InputMappedClassifier) classifier;

        mappedClass = virtualinvoke $r4.<weka.classifiers.misc.InputMappedClassifier: int getMappedClassIndex()>();

        interfaceinvoke classMissing.<weka.core.Instance: void setMissing(int)>(mappedClass);

        goto label2;

     label1:
        interfaceinvoke classMissing.<weka.core.Instance: void setClassMissing()>();

     label2:
        $r5 = interfaceinvoke classifier.<weka.classifiers.Classifier: double[] distributionForInstance(weka.core.Instance)>(classMissing);

        pred = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double evaluationForSingleInstance(double[],weka.core.Instance,boolean)>($r5, instance#1, storePredictions);

        $z1 = this.<weka.classifiers.evaluation.Evaluation: boolean m_ClassIsNominal>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label6;

        $z2 = interfaceinvoke instance#1.<weka.core.Instance: boolean classIsMissing()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label6;

        $z3 = staticinvoke <weka.core.Utils: boolean isMissingValue(double)>(pred);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label6;

        $z4 = classifier instanceof weka.classifiers.IntervalEstimator;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label3;

        $r6 = (weka.classifiers.IntervalEstimator) classifier;

        $d0 = interfaceinvoke instance#1.<weka.core.Instance: double classValue()>();

        virtualinvoke this.<weka.classifiers.evaluation.Evaluation: void updateStatsForIntervalEstimator(weka.classifiers.IntervalEstimator,weka.core.Instance,double)>($r6, classMissing, $d0);

        goto label4;

     label3:
        this.<weka.classifiers.evaluation.Evaluation: boolean m_CoverageStatisticsAvailable> = 0;

     label4:
        $z5 = classifier instanceof weka.classifiers.ConditionalDensityEstimator;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label5;

        $r7 = (weka.classifiers.ConditionalDensityEstimator) classifier;

        $d1 = interfaceinvoke instance#1.<weka.core.Instance: double classValue()>();

        virtualinvoke this.<weka.classifiers.evaluation.Evaluation: void updateStatsForConditionalDensityEstimator(weka.classifiers.ConditionalDensityEstimator,weka.core.Instance,double)>($r7, classMissing, $d1);

        goto label6;

     label5:
        this.<weka.classifiers.evaluation.Evaluation: boolean m_ComplexityStatisticsAvailable> = 0;

     label6:
        return pred;
    }

    public double evaluationForSingleInstance(double[], weka.core.Instance, boolean) throws java.lang.Exception
    {
        weka.classifiers.evaluation.Evaluation this;
        double[] dist;
        weka.core.Instance instance;
        boolean storePredictions, $z0, $z1, $z3;
        int $i0, $i1;
        double pred#6, $d0, $d1, $d2, $d3, $d4;
        byte $b2;
        java.util.ArrayList $r0, $r1, $r2, $r4, $r5, $r6;
        weka.classifiers.evaluation.NominalPrediction $r3;
        weka.classifiers.evaluation.NumericPrediction $r7;

        this := @this: weka.classifiers.evaluation.Evaluation;

        dist := @parameter0: double[];

        instance := @parameter1: weka.core.Instance;

        storePredictions := @parameter2: boolean;

        $z0 = this.<weka.classifiers.evaluation.Evaluation: boolean m_ClassIsNominal>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        $i0 = staticinvoke <weka.core.Utils: int maxIndex(double[])>(dist);

        pred#6 = (double) $i0;

        $i1 = (int) pred#6;

        $d0 = dist[$i1];

        $b2 = $d0 cmpg 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b2);

        if $b2 > 0 goto label1;

        pred#6 = staticinvoke <weka.core.Utils: double missingValue()>();

     label1:
        virtualinvoke this.<weka.classifiers.evaluation.Evaluation: void updateStatsForClassifier(double[],weka.core.Instance)>(dist, instance);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(storePredictions);

        if storePredictions == 0 goto label5;

        $z1 = this.<weka.classifiers.evaluation.Evaluation: boolean m_DiscardPredictions>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label5;

        $r0 = this.<weka.classifiers.evaluation.Evaluation: java.util.ArrayList m_Predictions>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label2;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        this.<weka.classifiers.evaluation.Evaluation: java.util.ArrayList m_Predictions> = $r1;

     label2:
        $r2 = this.<weka.classifiers.evaluation.Evaluation: java.util.ArrayList m_Predictions>;

        $r3 = new weka.classifiers.evaluation.NominalPrediction;

        $d1 = interfaceinvoke instance.<weka.core.Instance: double classValue()>();

        $d2 = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        specialinvoke $r3.<weka.classifiers.evaluation.NominalPrediction: void <init>(double,double[],double)>($d1, dist, $d2);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        goto label5;

     label3:
        pred#6 = dist[0];

        virtualinvoke this.<weka.classifiers.evaluation.Evaluation: void updateStatsForPredictor(double,weka.core.Instance)>(pred#6, instance);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(storePredictions);

        if storePredictions == 0 goto label5;

        $z3 = this.<weka.classifiers.evaluation.Evaluation: boolean m_DiscardPredictions>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label5;

        $r4 = this.<weka.classifiers.evaluation.Evaluation: java.util.ArrayList m_Predictions>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        if $r4 != null goto label4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        this.<weka.classifiers.evaluation.Evaluation: java.util.ArrayList m_Predictions> = $r5;

     label4:
        $r6 = this.<weka.classifiers.evaluation.Evaluation: java.util.ArrayList m_Predictions>;

        $r7 = new weka.classifiers.evaluation.NumericPrediction;

        $d3 = interfaceinvoke instance.<weka.core.Instance: double classValue()>();

        $d4 = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        specialinvoke $r7.<weka.classifiers.evaluation.NumericPrediction: void <init>(double,double,double)>($d3, pred#6, $d4);

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

     label5:
        return pred#6;
    }

    protected void updateStatsForIntervalEstimator(weka.classifiers.IntervalEstimator, weka.core.Instance, double) throws java.lang.Exception
    {
        weka.classifiers.evaluation.Evaluation this;
        weka.classifiers.IntervalEstimator classifier;
        weka.core.Instance classMissing;
        double classValue, $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16;
        double[][] preds, l6#19, l6#50;
        weka.classifiers.evaluation.AbstractEvaluationMetric m;
        java.util.ArrayList $r0, $r1, $r2;
        int $i0, $i1, l7#22, l8#24, l7#53, l8#55;
        java.lang.Object $r3, $r9;
        weka.classifiers.evaluation.NumericPrediction $r4;
        double[] pred#30, pred#61;
        byte $b2, $b3;
        java.util.List $r7, $r8;
        java.util.Iterator l6#83;
        boolean $z0, $z1;
        weka.classifiers.evaluation.IntervalBasedEvaluationMetric $r10;

        this := @this: weka.classifiers.evaluation.Evaluation;

        classifier := @parameter0: weka.classifiers.IntervalEstimator;

        classMissing := @parameter1: weka.core.Instance;

        classValue := @parameter2: double;

        $d0 = this.<weka.classifiers.evaluation.Evaluation: double m_ConfLevel>;

        preds = interfaceinvoke classifier.<weka.classifiers.IntervalEstimator: double[][] predictIntervals(weka.core.Instance,double)>(classMissing, $d0);

        $r0 = this.<weka.classifiers.evaluation.Evaluation: java.util.ArrayList m_Predictions>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label1;

        $r1 = this.<weka.classifiers.evaluation.Evaluation: java.util.ArrayList m_Predictions>;

        $r2 = this.<weka.classifiers.evaluation.Evaluation: java.util.ArrayList m_Predictions>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $i1 = $i0 - 1;

        $r3 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r4 = (weka.classifiers.evaluation.NumericPrediction) $r3;

        virtualinvoke $r4.<weka.classifiers.evaluation.NumericPrediction: void setPredictionIntervals(double[][])>(preds);

     label1:
        l6#19 = preds;

        l7#22 = lengthof l6#19;

        l8#24 = 0;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l8#24);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l7#22);

        if l8#24 >= l7#22 goto label3;

        pred#30 = l6#19[l8#24];

        $d1 = this.<weka.classifiers.evaluation.Evaluation: double m_TotalSizeOfRegions>;

        $d2 = interfaceinvoke classMissing.<weka.core.Instance: double weight()>();

        $d3 = pred#30[1];

        $d4 = pred#30[0];

        $d5 = $d3 - $d4;

        $d6 = $d2 * $d5;

        $d7 = this.<weka.classifiers.evaluation.Evaluation: double m_MaxTarget>;

        $d8 = this.<weka.classifiers.evaluation.Evaluation: double m_MinTarget>;

        $d9 = $d7 - $d8;

        $d10 = $d6 / $d9;

        $d11 = $d1 + $d10;

        this.<weka.classifiers.evaluation.Evaluation: double m_TotalSizeOfRegions> = $d11;

        l8#24 = l8#24 + 1;

        goto label2;

     label3:
        l6#50 = preds;

        l7#53 = lengthof l6#50;

        l8#55 = 0;

     label4:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l8#55);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l7#53);

        if l8#55 >= l7#53 goto label6;

        pred#61 = l6#50[l8#55];

        $d12 = pred#61[1];

        $b2 = $d12 cmpl classValue;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b2);

        if $b2 < 0 goto label5;

        $d13 = pred#61[0];

        $b3 = $d13 cmpg classValue;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b3);

        if $b3 > 0 goto label5;

        $d14 = this.<weka.classifiers.evaluation.Evaluation: double m_TotalCoverage>;

        $d15 = interfaceinvoke classMissing.<weka.core.Instance: double weight()>();

        $d16 = $d14 + $d15;

        this.<weka.classifiers.evaluation.Evaluation: double m_TotalCoverage> = $d16;

        goto label6;

     label5:
        l8#55 = l8#55 + 1;

        goto label4;

     label6:
        $r7 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_pluginMetrics>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r7);

        if $r7 == null goto label9;

        $r8 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_pluginMetrics>;

        l6#83 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $z0 = interfaceinvoke l6#83.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label9;

        $r9 = interfaceinvoke l6#83.<java.util.Iterator: java.lang.Object next()>();

        m = (weka.classifiers.evaluation.AbstractEvaluationMetric) $r9;

        $z1 = m instanceof weka.classifiers.evaluation.IntervalBasedEvaluationMetric;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label8;

        $r10 = (weka.classifiers.evaluation.IntervalBasedEvaluationMetric) m;

        interfaceinvoke $r10.<weka.classifiers.evaluation.IntervalBasedEvaluationMetric: void updateStatsForIntervalEstimator(weka.classifiers.IntervalEstimator,weka.core.Instance,double)>(classifier, classMissing, classValue);

     label8:
        goto label7;

     label9:
        return;
    }

    protected void updateStatsForConditionalDensityEstimator(weka.classifiers.ConditionalDensityEstimator, weka.core.Instance, double) throws java.lang.Exception
    {
        weka.classifiers.evaluation.Evaluation this;
        weka.classifiers.ConditionalDensityEstimator classifier;
        weka.core.Instance classMissing;
        double classValue, $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;
        weka.estimators.UnivariateKernelEstimator $r0, $r3;

        this := @this: weka.classifiers.evaluation.Evaluation;

        classifier := @parameter0: weka.classifiers.ConditionalDensityEstimator;

        classMissing := @parameter1: weka.core.Instance;

        classValue := @parameter2: double;

        $r0 = this.<weka.classifiers.evaluation.Evaluation: weka.estimators.UnivariateKernelEstimator m_PriorEstimator>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label1;

        virtualinvoke this.<weka.classifiers.evaluation.Evaluation: void setNumericPriorsFromBuffer()>();

     label1:
        $d0 = this.<weka.classifiers.evaluation.Evaluation: double m_SumSchemeEntropy>;

        $d1 = interfaceinvoke classifier.<weka.classifiers.ConditionalDensityEstimator: double logDensity(weka.core.Instance,double)>(classMissing, classValue);

        $d2 = interfaceinvoke classMissing.<weka.core.Instance: double weight()>();

        $d3 = $d1 * $d2;

        $d4 = <weka.core.Utils: double log2>;

        $d5 = $d3 / $d4;

        $d6 = $d0 - $d5;

        this.<weka.classifiers.evaluation.Evaluation: double m_SumSchemeEntropy> = $d6;

        $d7 = this.<weka.classifiers.evaluation.Evaluation: double m_SumPriorEntropy>;

        $r3 = this.<weka.classifiers.evaluation.Evaluation: weka.estimators.UnivariateKernelEstimator m_PriorEstimator>;

        $d8 = virtualinvoke $r3.<weka.estimators.UnivariateKernelEstimator: double logDensity(double)>(classValue);

        $d9 = interfaceinvoke classMissing.<weka.core.Instance: double weight()>();

        $d10 = $d8 * $d9;

        $d11 = <weka.core.Utils: double log2>;

        $d12 = $d10 / $d11;

        $d13 = $d7 - $d12;

        this.<weka.classifiers.evaluation.Evaluation: double m_SumPriorEntropy> = $d13;

        return;
    }

    protected void setNumericPriorsFromBuffer()
    {
        weka.classifiers.evaluation.Evaluation this;
        weka.estimators.UnivariateKernelEstimator $r0, $r1;
        int i#5, $i0;
        double[] $r2, $r3;
        double $d0, $d1;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $r0 = new weka.estimators.UnivariateKernelEstimator;

        specialinvoke $r0.<weka.estimators.UnivariateKernelEstimator: void <init>()>();

        this.<weka.classifiers.evaluation.Evaluation: weka.estimators.UnivariateKernelEstimator m_PriorEstimator> = $r0;

        i#5 = 0;

     label1:
        $i0 = this.<weka.classifiers.evaluation.Evaluation: int m_NumTrainClassVals>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#5 >= $i0 goto label2;

        $r1 = this.<weka.classifiers.evaluation.Evaluation: weka.estimators.UnivariateKernelEstimator m_PriorEstimator>;

        $r2 = this.<weka.classifiers.evaluation.Evaluation: double[] m_TrainClassVals>;

        $d0 = $r2[i#5];

        $r3 = this.<weka.classifiers.evaluation.Evaluation: double[] m_TrainClassWeights>;

        $d1 = $r3[i#5];

        virtualinvoke $r1.<weka.estimators.UnivariateKernelEstimator: void addValue(double,double)>($d0, $d1);

        i#5 = i#5 + 1;

        goto label1;

     label2:
        return;
    }

    protected void updateStatsForClassifier(double[], weka.core.Instance) throws java.lang.Exception
    {
        weka.classifiers.evaluation.Evaluation this;
        double[] predictedDistribution, $r7, $r12, $r16;
        weka.core.Instance instance;
        int actualClass, predictedClass#12, i#16, $i0, $i3, i#150, $i5, $i6;
        double predictedProb, priorProb, $d0, $d1, bestProb#14, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, sum#143, sizeOfRegions#145, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75;
        int[] indices;
        java.util.Iterator l4;
        weka.classifiers.evaluation.AbstractEvaluationMetric m;
        boolean $z0, $z1, $z2, $z3, $z4;
        byte $b1, $b2, $b4;
        weka.classifiers.CostMatrix $r1, $r3, $r5;
        double[][] $r15;
        java.util.List $r20, $r21;
        java.lang.Object $r22;
        weka.classifiers.evaluation.StandardEvaluationMetric $r23;
        weka.classifiers.evaluation.InformationRetrievalEvaluationMetric $r24;
        weka.classifiers.evaluation.InformationTheoreticEvaluationMetric $r25;

        this := @this: weka.classifiers.evaluation.Evaluation;

        predictedDistribution := @parameter0: double[];

        instance := @parameter1: weka.core.Instance;

        $d0 = interfaceinvoke instance.<weka.core.Instance: double classValue()>();

        actualClass = (int) $d0;

        $z0 = interfaceinvoke instance.<weka.core.Instance: boolean classIsMissing()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label15;

        $d1 = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        virtualinvoke this.<weka.classifiers.evaluation.Evaluation: void updateMargins(double[],int,double)>(predictedDistribution, actualClass, $d1);

        predictedClass#12 = -1;

        bestProb#14 = 0.0;

        i#16 = 0;

     label01:
        $i0 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#16);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#16 >= $i0 goto label03;

        $d2 = predictedDistribution[i#16];

        $b1 = $d2 cmpl bestProb#14;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 <= 0 goto label02;

        predictedClass#12 = i#16;

        bestProb#14 = predictedDistribution[i#16];

     label02:
        i#16 = i#16 + 1;

        goto label01;

     label03:
        $d3 = this.<weka.classifiers.evaluation.Evaluation: double m_WithClass>;

        $d4 = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        $d5 = $d3 + $d4;

        this.<weka.classifiers.evaluation.Evaluation: double m_WithClass> = $d5;

        $r1 = this.<weka.classifiers.evaluation.Evaluation: weka.classifiers.CostMatrix m_CostMatrix>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 == null goto label05;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(predictedClass#12);

        if predictedClass#12 >= 0 goto label04;

        $d6 = this.<weka.classifiers.evaluation.Evaluation: double m_TotalCost>;

        $d7 = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        $r3 = this.<weka.classifiers.evaluation.Evaluation: weka.classifiers.CostMatrix m_CostMatrix>;

        $d8 = virtualinvoke $r3.<weka.classifiers.CostMatrix: double getMaxCost(int,weka.core.Instance)>(actualClass, instance);

        $d9 = $d7 * $d8;

        $d10 = $d6 + $d9;

        this.<weka.classifiers.evaluation.Evaluation: double m_TotalCost> = $d10;

        goto label05;

     label04:
        $d11 = this.<weka.classifiers.evaluation.Evaluation: double m_TotalCost>;

        $d12 = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        $r5 = this.<weka.classifiers.evaluation.Evaluation: weka.classifiers.CostMatrix m_CostMatrix>;

        $d13 = virtualinvoke $r5.<weka.classifiers.CostMatrix: double getElement(int,int,weka.core.Instance)>(actualClass, predictedClass#12, instance);

        $d14 = $d12 * $d13;

        $d15 = $d11 + $d14;

        this.<weka.classifiers.evaluation.Evaluation: double m_TotalCost> = $d15;

     label05:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(predictedClass#12);

        if predictedClass#12 >= 0 goto label06;

        $d16 = this.<weka.classifiers.evaluation.Evaluation: double m_Unclassified>;

        $d17 = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        $d18 = $d16 + $d17;

        this.<weka.classifiers.evaluation.Evaluation: double m_Unclassified> = $d18;

        return;

     label06:
        $d19 = predictedDistribution[actualClass];

        predictedProb = staticinvoke <java.lang.Math: double max(double,double)>(4.9E-324, $d19);

        $r7 = this.<weka.classifiers.evaluation.Evaluation: double[] m_ClassPriors>;

        $d20 = $r7[actualClass];

        $d21 = this.<weka.classifiers.evaluation.Evaluation: double m_ClassPriorsSum>;

        $d22 = $d20 / $d21;

        priorProb = staticinvoke <java.lang.Math: double max(double,double)>(4.9E-324, $d22);

        $b2 = predictedProb cmpl priorProb;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b2);

        if $b2 < 0 goto label07;

        $d23 = this.<weka.classifiers.evaluation.Evaluation: double m_SumKBInfo>;

        $d24 = staticinvoke <weka.core.Utils: double log2(double)>(predictedProb);

        $d25 = staticinvoke <weka.core.Utils: double log2(double)>(priorProb);

        $d26 = $d24 - $d25;

        $d27 = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        $d28 = $d26 * $d27;

        $d29 = $d23 + $d28;

        this.<weka.classifiers.evaluation.Evaluation: double m_SumKBInfo> = $d29;

        goto label08;

     label07:
        $d30 = this.<weka.classifiers.evaluation.Evaluation: double m_SumKBInfo>;

        $d31 = 1.0 - predictedProb;

        $d32 = staticinvoke <weka.core.Utils: double log2(double)>($d31);

        $d33 = 1.0 - priorProb;

        $d34 = staticinvoke <weka.core.Utils: double log2(double)>($d33);

        $d35 = $d32 - $d34;

        $d36 = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        $d37 = $d35 * $d36;

        $d38 = $d30 - $d37;

        this.<weka.classifiers.evaluation.Evaluation: double m_SumKBInfo> = $d38;

     label08:
        $d39 = this.<weka.classifiers.evaluation.Evaluation: double m_SumSchemeEntropy>;

        $d40 = staticinvoke <weka.core.Utils: double log2(double)>(predictedProb);

        $d41 = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        $d42 = $d40 * $d41;

        $d43 = $d39 - $d42;

        this.<weka.classifiers.evaluation.Evaluation: double m_SumSchemeEntropy> = $d43;

        $d44 = this.<weka.classifiers.evaluation.Evaluation: double m_SumPriorEntropy>;

        $d45 = staticinvoke <weka.core.Utils: double log2(double)>(priorProb);

        $d46 = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        $d47 = $d45 * $d46;

        $d48 = $d44 - $d47;

        this.<weka.classifiers.evaluation.Evaluation: double m_SumPriorEntropy> = $d48;

        $d49 = interfaceinvoke instance.<weka.core.Instance: double classValue()>();

        $r12 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double[] makeDistribution(double)>($d49);

        $d50 = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        virtualinvoke this.<weka.classifiers.evaluation.Evaluation: void updateNumericScores(double[],double[],double)>(predictedDistribution, $r12, $d50);

        indices = staticinvoke <weka.core.Utils: int[] stableSort(double[])>(predictedDistribution);

        sum#143 = 0.0;

        sizeOfRegions#145 = 0.0;

        $i3 = lengthof predictedDistribution;

        i#150 = $i3 - 1;

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#150);

        if i#150 < 0 goto label12;

        $d51 = this.<weka.classifiers.evaluation.Evaluation: double m_ConfLevel>;

        $b4 = sum#143 cmpl $d51;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b4);

        if $b4 < 0 goto label10;

        goto label12;

     label10:
        $i5 = indices[i#150];

        $d52 = predictedDistribution[$i5];

        sum#143 = sum#143 + $d52;

        sizeOfRegions#145 = sizeOfRegions#145 + 1.0;

        $i6 = indices[i#150];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(actualClass);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if actualClass != $i6 goto label11;

        $d53 = this.<weka.classifiers.evaluation.Evaluation: double m_TotalCoverage>;

        $d54 = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        $d55 = $d53 + $d54;

        this.<weka.classifiers.evaluation.Evaluation: double m_TotalCoverage> = $d55;

     label11:
        i#150 = i#150 + -1;

        goto label09;

     label12:
        $d56 = this.<weka.classifiers.evaluation.Evaluation: double m_TotalSizeOfRegions>;

        $d57 = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        $d58 = $d57 * sizeOfRegions#145;

        $d59 = this.<weka.classifiers.evaluation.Evaluation: double m_MaxTarget>;

        $d60 = this.<weka.classifiers.evaluation.Evaluation: double m_MinTarget>;

        $d61 = $d59 - $d60;

        $d62 = $d58 / $d61;

        $d63 = $d56 + $d62;

        this.<weka.classifiers.evaluation.Evaluation: double m_TotalSizeOfRegions> = $d63;

        $r15 = this.<weka.classifiers.evaluation.Evaluation: double[][] m_ConfusionMatrix>;

        $r16 = $r15[actualClass];

        $d64 = $r16[predictedClass#12];

        $d65 = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        $d66 = $d64 + $d65;

        $r16[predictedClass#12] = $d66;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(predictedClass#12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(actualClass);

        if predictedClass#12 == actualClass goto label13;

        $d67 = this.<weka.classifiers.evaluation.Evaluation: double m_Incorrect>;

        $d68 = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        $d69 = $d67 + $d68;

        this.<weka.classifiers.evaluation.Evaluation: double m_Incorrect> = $d69;

        goto label14;

     label13:
        $d70 = this.<weka.classifiers.evaluation.Evaluation: double m_Correct>;

        $d71 = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        $d72 = $d70 + $d71;

        this.<weka.classifiers.evaluation.Evaluation: double m_Correct> = $d72;

     label14:
        goto label16;

     label15:
        $d73 = this.<weka.classifiers.evaluation.Evaluation: double m_MissingClass>;

        $d74 = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        $d75 = $d73 + $d74;

        this.<weka.classifiers.evaluation.Evaluation: double m_MissingClass> = $d75;

     label16:
        $r20 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_pluginMetrics>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r20);

        if $r20 == null goto label21;

        $r21 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_pluginMetrics>;

        l4 = interfaceinvoke $r21.<java.util.List: java.util.Iterator iterator()>();

     label17:
        $z1 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label21;

        $r22 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        m = (weka.classifiers.evaluation.AbstractEvaluationMetric) $r22;

        $z2 = m instanceof weka.classifiers.evaluation.StandardEvaluationMetric;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label18;

        $r23 = (weka.classifiers.evaluation.StandardEvaluationMetric) m;

        interfaceinvoke $r23.<weka.classifiers.evaluation.StandardEvaluationMetric: void updateStatsForClassifier(double[],weka.core.Instance)>(predictedDistribution, instance);

        goto label20;

     label18:
        $z3 = m instanceof weka.classifiers.evaluation.InformationRetrievalEvaluationMetric;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label19;

        $r24 = (weka.classifiers.evaluation.InformationRetrievalEvaluationMetric) m;

        interfaceinvoke $r24.<weka.classifiers.evaluation.InformationRetrievalEvaluationMetric: void updateStatsForClassifier(double[],weka.core.Instance)>(predictedDistribution, instance);

        goto label20;

     label19:
        $z4 = m instanceof weka.classifiers.evaluation.InformationTheoreticEvaluationMetric;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label20;

        $r25 = (weka.classifiers.evaluation.InformationTheoreticEvaluationMetric) m;

        interfaceinvoke $r25.<weka.classifiers.evaluation.InformationTheoreticEvaluationMetric: void updateStatsForClassifier(double[],weka.core.Instance)>(predictedDistribution, instance);

     label20:
        goto label17;

     label21:
        return;
    }

    protected void updateStatsForPredictor(double, weka.core.Instance) throws java.lang.Exception
    {
        weka.classifiers.evaluation.Evaluation this;
        double predictedValue, $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37;
        weka.core.Instance instance;
        java.util.Iterator l4;
        weka.classifiers.evaluation.AbstractEvaluationMetric m;
        boolean $z0, $z1, $z2, $z3, $z4;
        double[] $r7, $r8;
        java.util.List $r10, $r11;
        java.lang.Object $r12;
        weka.classifiers.evaluation.StandardEvaluationMetric $r13;
        weka.classifiers.evaluation.InformationTheoreticEvaluationMetric $r14;

        this := @this: weka.classifiers.evaluation.Evaluation;

        predictedValue := @parameter0: double;

        instance := @parameter1: weka.core.Instance;

        $z0 = interfaceinvoke instance.<weka.core.Instance: boolean classIsMissing()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label2;

        $d0 = this.<weka.classifiers.evaluation.Evaluation: double m_WithClass>;

        $d1 = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        $d2 = $d0 + $d1;

        this.<weka.classifiers.evaluation.Evaluation: double m_WithClass> = $d2;

        $z1 = staticinvoke <weka.core.Utils: boolean isMissingValue(double)>(predictedValue);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label1;

        $d3 = this.<weka.classifiers.evaluation.Evaluation: double m_Unclassified>;

        $d4 = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        $d5 = $d3 + $d4;

        this.<weka.classifiers.evaluation.Evaluation: double m_Unclassified> = $d5;

        return;

     label1:
        $d6 = this.<weka.classifiers.evaluation.Evaluation: double m_SumClass>;

        $d7 = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        $d8 = interfaceinvoke instance.<weka.core.Instance: double classValue()>();

        $d9 = $d7 * $d8;

        $d10 = $d6 + $d9;

        this.<weka.classifiers.evaluation.Evaluation: double m_SumClass> = $d10;

        $d11 = this.<weka.classifiers.evaluation.Evaluation: double m_SumSqrClass>;

        $d12 = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        $d13 = interfaceinvoke instance.<weka.core.Instance: double classValue()>();

        $d14 = $d12 * $d13;

        $d15 = interfaceinvoke instance.<weka.core.Instance: double classValue()>();

        $d16 = $d14 * $d15;

        $d17 = $d11 + $d16;

        this.<weka.classifiers.evaluation.Evaluation: double m_SumSqrClass> = $d17;

        $d18 = this.<weka.classifiers.evaluation.Evaluation: double m_SumClassPredicted>;

        $d19 = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        $d20 = interfaceinvoke instance.<weka.core.Instance: double classValue()>();

        $d21 = $d19 * $d20;

        $d22 = $d21 * predictedValue;

        $d23 = $d18 + $d22;

        this.<weka.classifiers.evaluation.Evaluation: double m_SumClassPredicted> = $d23;

        $d24 = this.<weka.classifiers.evaluation.Evaluation: double m_SumPredicted>;

        $d25 = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        $d26 = $d25 * predictedValue;

        $d27 = $d24 + $d26;

        this.<weka.classifiers.evaluation.Evaluation: double m_SumPredicted> = $d27;

        $d28 = this.<weka.classifiers.evaluation.Evaluation: double m_SumSqrPredicted>;

        $d29 = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        $d30 = $d29 * predictedValue;

        $d31 = $d30 * predictedValue;

        $d32 = $d28 + $d31;

        this.<weka.classifiers.evaluation.Evaluation: double m_SumSqrPredicted> = $d32;

        $r7 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double[] makeDistribution(double)>(predictedValue);

        $d33 = interfaceinvoke instance.<weka.core.Instance: double classValue()>();

        $r8 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double[] makeDistribution(double)>($d33);

        $d34 = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        virtualinvoke this.<weka.classifiers.evaluation.Evaluation: void updateNumericScores(double[],double[],double)>($r7, $r8, $d34);

        goto label3;

     label2:
        $d35 = this.<weka.classifiers.evaluation.Evaluation: double m_MissingClass>;

        $d36 = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        $d37 = $d35 + $d36;

        this.<weka.classifiers.evaluation.Evaluation: double m_MissingClass> = $d37;

     label3:
        $r10 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_pluginMetrics>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r10);

        if $r10 == null goto label7;

        $r11 = this.<weka.classifiers.evaluation.Evaluation: java.util.List m_pluginMetrics>;

        l4 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label7;

        $r12 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        m = (weka.classifiers.evaluation.AbstractEvaluationMetric) $r12;

        $z3 = m instanceof weka.classifiers.evaluation.StandardEvaluationMetric;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label5;

        $r13 = (weka.classifiers.evaluation.StandardEvaluationMetric) m;

        interfaceinvoke $r13.<weka.classifiers.evaluation.StandardEvaluationMetric: void updateStatsForPredictor(double,weka.core.Instance)>(predictedValue, instance);

        goto label6;

     label5:
        $z4 = m instanceof weka.classifiers.evaluation.InformationTheoreticEvaluationMetric;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label6;

        $r14 = (weka.classifiers.evaluation.InformationTheoreticEvaluationMetric) m;

        interfaceinvoke $r14.<weka.classifiers.evaluation.InformationTheoreticEvaluationMetric: void updateStatsForPredictor(double,weka.core.Instance)>(predictedValue, instance);

     label6:
        goto label4;

     label7:
        return;
    }

    protected double[] makeDistribution(double)
    {
        weka.classifiers.evaluation.Evaluation this;
        double predictedClass;
        double[] result;
        int $i0, $i1;
        boolean $z0, $z1;

        this := @this: weka.classifiers.evaluation.Evaluation;

        predictedClass := @parameter0: double;

        $i0 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        result = newarray (double)[$i0];

        $z0 = staticinvoke <weka.core.Utils: boolean isMissingValue(double)>(predictedClass);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        return result;

     label1:
        $z1 = this.<weka.classifiers.evaluation.Evaluation: boolean m_ClassIsNominal>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        $i1 = (int) predictedClass;

        result[$i1] = 1.0;

        goto label3;

     label2:
        result[0] = predictedClass;

     label3:
        return result;
    }

    protected void updateNumericScores(double[], double[], double)
    {
        weka.classifiers.evaluation.Evaluation this;
        double[] predicted, actual, $r0;
        double weight, sumErr#2, sumAbsErr#4, sumSqrErr#6, sumPriorAbsErr#8, sumPriorSqrErr#10, $d0, $d1, diff#23, $d2, $d3, $d4, $d5, $d6, $d7, diff#47, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34;
        int i#12, $i0, $i1, $i2, $i3, $i4, $i5;

        this := @this: weka.classifiers.evaluation.Evaluation;

        predicted := @parameter0: double[];

        actual := @parameter1: double[];

        weight := @parameter2: double;

        sumErr#2 = 0.0;

        sumAbsErr#4 = 0.0;

        sumSqrErr#6 = 0.0;

        sumPriorAbsErr#8 = 0.0;

        sumPriorSqrErr#10 = 0.0;

        i#12 = 0;

     label1:
        $i0 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#12 >= $i0 goto label2;

        $d0 = predicted[i#12];

        $d1 = actual[i#12];

        diff#23 = $d0 - $d1;

        sumErr#2 = sumErr#2 + diff#23;

        $d2 = staticinvoke <java.lang.Math: double abs(double)>(diff#23);

        sumAbsErr#4 = sumAbsErr#4 + $d2;

        $d3 = diff#23 * diff#23;

        sumSqrErr#6 = sumSqrErr#6 + $d3;

        $r0 = this.<weka.classifiers.evaluation.Evaluation: double[] m_ClassPriors>;

        $d4 = $r0[i#12];

        $d5 = this.<weka.classifiers.evaluation.Evaluation: double m_ClassPriorsSum>;

        $d6 = $d4 / $d5;

        $d7 = actual[i#12];

        diff#47 = $d6 - $d7;

        $d8 = staticinvoke <java.lang.Math: double abs(double)>(diff#47);

        sumPriorAbsErr#8 = sumPriorAbsErr#8 + $d8;

        $d9 = diff#47 * diff#47;

        sumPriorSqrErr#10 = sumPriorSqrErr#10 + $d9;

        i#12 = i#12 + 1;

        goto label1;

     label2:
        $d10 = this.<weka.classifiers.evaluation.Evaluation: double m_SumErr>;

        $d11 = weight * sumErr#2;

        $i1 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        $d12 = (double) $i1;

        $d13 = $d11 / $d12;

        $d14 = $d10 + $d13;

        this.<weka.classifiers.evaluation.Evaluation: double m_SumErr> = $d14;

        $d15 = this.<weka.classifiers.evaluation.Evaluation: double m_SumAbsErr>;

        $d16 = weight * sumAbsErr#4;

        $i2 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        $d17 = (double) $i2;

        $d18 = $d16 / $d17;

        $d19 = $d15 + $d18;

        this.<weka.classifiers.evaluation.Evaluation: double m_SumAbsErr> = $d19;

        $d20 = this.<weka.classifiers.evaluation.Evaluation: double m_SumSqrErr>;

        $d21 = weight * sumSqrErr#6;

        $i3 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        $d22 = (double) $i3;

        $d23 = $d21 / $d22;

        $d24 = $d20 + $d23;

        this.<weka.classifiers.evaluation.Evaluation: double m_SumSqrErr> = $d24;

        $d25 = this.<weka.classifiers.evaluation.Evaluation: double m_SumPriorAbsErr>;

        $d26 = weight * sumPriorAbsErr#8;

        $i4 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        $d27 = (double) $i4;

        $d28 = $d26 / $d27;

        $d29 = $d25 + $d28;

        this.<weka.classifiers.evaluation.Evaluation: double m_SumPriorAbsErr> = $d29;

        $d30 = this.<weka.classifiers.evaluation.Evaluation: double m_SumPriorSqrErr>;

        $d31 = weight * sumPriorSqrErr#10;

        $i5 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        $d32 = (double) $i5;

        $d33 = $d31 / $d32;

        $d34 = $d30 + $d33;

        this.<weka.classifiers.evaluation.Evaluation: double m_SumPriorSqrErr> = $d34;

        return;
    }

    protected void updateMargins(double[], int, double)
    {
        weka.classifiers.evaluation.Evaluation this;
        double[] predictedDistribution, $r0;
        int actualClass, bin, i#7, $i0, $i2;
        double weight, probActual, margin, probNext#5, $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        byte $b1;

        this := @this: weka.classifiers.evaluation.Evaluation;

        predictedDistribution := @parameter0: double[];

        actualClass := @parameter1: int;

        weight := @parameter2: double;

        probActual = predictedDistribution[actualClass];

        probNext#5 = 0.0;

        i#7 = 0;

     label1:
        $i0 = this.<weka.classifiers.evaluation.Evaluation: int m_NumClasses>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#7 >= $i0 goto label3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(actualClass);

        if i#7 == actualClass goto label2;

        $d0 = predictedDistribution[i#7];

        $b1 = $d0 cmpl probNext#5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 <= 0 goto label2;

        probNext#5 = predictedDistribution[i#7];

     label2:
        i#7 = i#7 + 1;

        goto label1;

     label3:
        margin = probActual - probNext#5;

        $d1 = margin + 1.0;

        $d2 = $d1 / 2.0;

        $i2 = <weka.classifiers.evaluation.Evaluation: int k_MarginResolution>;

        $d3 = (double) $i2;

        $d4 = $d2 * $d3;

        bin = (int) $d4;

        $r0 = this.<weka.classifiers.evaluation.Evaluation: double[] m_MarginCounts>;

        $d5 = $r0[bin];

        $d6 = $d5 + weight;

        $r0[bin] = $d6;

        return;
    }

    public weka.core.Instances getHeader()
    {
        weka.classifiers.evaluation.Evaluation this;
        weka.core.Instances $r0;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $r0 = this.<weka.classifiers.evaluation.Evaluation: weka.core.Instances m_Header>;

        return $r0;
    }

    public double evaluateModelOnce(weka.classifiers.Classifier, weka.core.Instance) throws java.lang.Exception
    {
        weka.classifiers.evaluation.Evaluation this;
        weka.classifiers.Classifier classifier;
        weka.core.Instance instance;
        double $d0;

        this := @this: weka.classifiers.evaluation.Evaluation;

        classifier := @parameter0: weka.classifiers.Classifier;

        instance := @parameter1: weka.core.Instance;

        $d0 = virtualinvoke this.<weka.classifiers.evaluation.Evaluation: double evaluationForSingleInstance(weka.classifiers.Classifier,weka.core.Instance,boolean)>(classifier, instance, 0);

        return $d0;
    }

    public java.lang.String toCumulativeMarginDistributionString() throws java.lang.Exception
    {
        weka.classifiers.evaluation.Evaluation this;
        double margin, cumulativeCount#9, $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        boolean $z0;
        java.lang.Exception $r0;
        java.lang.String result#7, $r5, $r8, $r12, $r15;
        int i#11, $i0, $i2;
        double[] $r1, $r2;
        byte $b1;
        java.lang.StringBuilder $r3, $r4, $r6, $r7, $r9, $r10, $r11, $r13, $r14, $r16, $r17;

        this := @this: weka.classifiers.evaluation.Evaluation;

        $z0 = this.<weka.classifiers.evaluation.Evaluation: boolean m_ClassIsNominal>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r0 = new java.lang.Exception;

        specialinvoke $r0.<java.lang.Exception: void <init>(java.lang.String)>("Class must be nominal for margin distributions");

        throw $r0;

     label1:
        result#7 = "";

        cumulativeCount#9 = 0.0;

        i#11 = 0;

     label2:
        $i0 = <weka.classifiers.evaluation.Evaluation: int k_MarginResolution>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#11);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#11 > $i0 goto label5;

        $r1 = this.<weka.classifiers.evaluation.Evaluation: double[] m_MarginCounts>;

        $d0 = $r1[i#11];

        $b1 = $d0 cmpl 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 == 0 goto label3;

        $r2 = this.<weka.classifiers.evaluation.Evaluation: double[] m_MarginCounts>;

        $d1 = $r2[i#11];

        cumulativeCount#9 = cumulativeCount#9 + $d1;

        $d2 = (double) i#11;

        $d3 = $d2 * 2.0;

        $i2 = <weka.classifiers.evaluation.Evaluation: int k_MarginResolution>;

        $d4 = (double) $i2;

        $d5 = $d3 / $d4;

        margin = $d5 - 1.0;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(result#7);

        $r5 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>(margin, 7, 3);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $d6 = cumulativeCount#9 * 100.0;

        $d7 = this.<weka.classifiers.evaluation.Evaluation: double m_WithClass>;

        $d8 = $d6 / $d7;

        $r8 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>($d8, 7, 3);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        result#7 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label4;

     label3:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#11);

        if i#11 != 0 goto label4;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>(-1.0, 7, 3);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r15 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>(0.0, 7, 3);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        result#7 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        i#11 = i#11 + 1;

        goto label2;

     label5:
        return result#7;
    }


