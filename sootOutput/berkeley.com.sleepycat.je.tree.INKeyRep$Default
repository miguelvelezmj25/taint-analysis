    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "berkeley/com/sleepycat/je/tree/INKeyRep";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <berkeley.com.sleepycat.je.tree.INKeyRep$Default: boolean $assertionsDisabled> = $z1;

        return;
    }

    void <init>(int)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$Default this;
        int nodeMaxEntries;
        byte[][] $r0;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$Default;

        nodeMaxEntries := @parameter0: int;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.INKeyRep: void <init>()>();

        $r0 = newarray (byte[])[nodeMaxEntries];

        this.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: byte[][] keys> = $r0;

        return;
    }

    public volatile java.lang.Object set(int, java.lang.Object, berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$Default this;
        int l1;
        java.lang.Object l2;
        berkeley.com.sleepycat.je.tree.IN l3;
        byte[] $r0;
        berkeley.com.sleepycat.je.tree.INKeyRep $r1;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$Default;

        l1 := @parameter0: int;

        l2 := @parameter1: java.lang.Object;

        l3 := @parameter2: berkeley.com.sleepycat.je.tree.IN;

        $r0 = (byte[]) l2;

        $r1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: berkeley.com.sleepycat.je.tree.INKeyRep set(int,byte[],berkeley.com.sleepycat.je.tree.IN)>(l1, $r0, l3);

        return $r1;
    }

    public berkeley.com.sleepycat.je.tree.INKeyRep set(int, byte[], berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$Default this;
        int idx;
        byte[] key;
        berkeley.com.sleepycat.je.tree.IN parent;
        byte[][] $r0;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$Default;

        idx := @parameter0: int;

        key := @parameter1: byte[];

        parent := @parameter2: berkeley.com.sleepycat.je.tree.IN;

        $r0 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: byte[][] keys>;

        $r0[idx] = key;

        return this;
    }

    public volatile java.lang.Object get(int)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$Default this;
        int l1;
        byte[] $r0;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$Default;

        l1 := @parameter0: int;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: byte[] get(int)>(l1);

        return $r0;
    }

    public byte[] get(int)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$Default this;
        int idx;
        byte[][] $r0;
        byte[] $r1;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$Default;

        idx := @parameter0: int;

        $r0 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: byte[][] keys>;

        $r1 = $r0[idx];

        return $r1;
    }

    public boolean accountsForKeyByteMemUsage()
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$Default this;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$Default;

        return 0;
    }

    public volatile java.lang.Object getType()
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$Default this;
        berkeley.com.sleepycat.je.tree.INKeyRep$Type $r0;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$Default;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: berkeley.com.sleepycat.je.tree.INKeyRep$Type getType()>();

        return $r0;
    }

    public berkeley.com.sleepycat.je.tree.INKeyRep$Type getType()
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$Default this;
        berkeley.com.sleepycat.je.tree.INKeyRep$Type $r0;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$Default;

        $r0 = <berkeley.com.sleepycat.je.tree.INKeyRep$Type: berkeley.com.sleepycat.je.tree.INKeyRep$Type DEFAULT>;

        return $r0;
    }

    public long calculateMemorySize()
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$Default this;
        int $i0, $i1, $i2, $i3;
        byte[][] $r0;
        long $l4;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$Default;

        $i0 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DEFAULT_KEYVALS_OVERHEAD>;

        $r0 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: byte[][] keys>;

        $i1 = lengthof $r0;

        $i2 = staticinvoke <berkeley.com.sleepycat.je.dbi.MemoryBudget: int objectArraySize(int)>($i1);

        $i3 = $i0 + $i2;

        $l4 = (long) $i3;

        return $l4;
    }

    void updateCacheStats(boolean, berkeley.com.sleepycat.je.evictor.Evictor)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$Default this;
        boolean increment;
        berkeley.com.sleepycat.je.evictor.Evictor evictor;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$Default;

        increment := @parameter0: boolean;

        evictor := @parameter1: berkeley.com.sleepycat.je.evictor.Evictor;

        return;
    }

    public volatile java.lang.Object resize(int)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$Default this;
        int l1;
        berkeley.com.sleepycat.je.tree.INKeyRep $r0;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$Default;

        l1 := @parameter0: int;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: berkeley.com.sleepycat.je.tree.INKeyRep resize(int)>(l1);

        return $r0;
    }

    public berkeley.com.sleepycat.je.tree.INKeyRep resize(int)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$Default this, $r0;
        int capacity;
        byte[][] $r1, $r3;
        java.lang.Object[] $r2;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$Default;

        capacity := @parameter0: int;

        $r0 = new berkeley.com.sleepycat.je.tree.INKeyRep$Default;

        $r1 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: byte[][] keys>;

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int)>($r1, 0, capacity);

        $r3 = (byte[][]) $r2;

        specialinvoke $r0.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: void <init>(byte[][])>($r3);

        return $r0;
    }

    private void <init>(byte[][])
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$Default this;
        byte[][] keys;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$Default;

        keys := @parameter0: byte[][];

        specialinvoke this.<berkeley.com.sleepycat.je.tree.INKeyRep: void <init>()>();

        this.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: byte[][] keys> = keys;

        return;
    }

    public byte[] getFullKey(byte[], int, boolean)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$Default this;
        byte[] prefix, key, $r0, suffix#12;
        int idx, prefixLen, $i0, $i1, suffixLen#27, $i2;
        boolean embeddedData, $z0;
        byte[][] $r1;
        java.lang.AssertionError $r2;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$Default;

        prefix := @parameter0: byte[];

        idx := @parameter1: int;

        embeddedData := @parameter2: boolean;

        if prefix == null goto label1;

        $i0 = lengthof prefix;

        if $i0 != 0 goto label2;

     label1:
        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: byte[] getKey(int,boolean)>(idx, embeddedData);

        return $r0;

     label2:
        $r1 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: byte[][] keys>;

        suffix#12 = $r1[idx];

        if suffix#12 != null goto label4;

        $z0 = <berkeley.com.sleepycat.je.tree.INKeyRep$Default: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        if embeddedData == 0 goto label3;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label3:
        suffix#12 = <berkeley.com.sleepycat.je.tree.Key: byte[] EMPTY_KEY>;

     label4:
        prefixLen = lengthof prefix;

        if embeddedData == 0 goto label5;

        $i1 = lengthof suffix#12;

        suffixLen#27 = staticinvoke <berkeley.com.sleepycat.je.dbi.DupKeyData: int getKeyLength(byte[],int,int)>(suffix#12, 0, $i1);

        goto label6;

     label5:
        suffixLen#27 = lengthof suffix#12;

     label6:
        $i2 = prefixLen + suffixLen#27;

        key = newarray (byte)[$i2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(prefix, 0, key, 0, prefixLen);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(suffix#12, 0, key, prefixLen, suffixLen#27);

        return key;
    }

    public byte[] getKey(int, boolean)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$Default this;
        int idx, $i0;
        boolean embeddedData;
        byte[] suffix, $r1, $r2;
        byte[][] $r0;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$Default;

        idx := @parameter0: int;

        embeddedData := @parameter1: boolean;

        $r0 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: byte[][] keys>;

        suffix = $r0[idx];

        if suffix != null goto label1;

        $r1 = <berkeley.com.sleepycat.je.tree.Key: byte[] EMPTY_KEY>;

        return $r1;

     label1:
        if embeddedData == 0 goto label2;

        $i0 = lengthof suffix;

        $r2 = staticinvoke <berkeley.com.sleepycat.je.dbi.DupKeyData: byte[] getKey(byte[],int,int)>(suffix, 0, $i0);

        return $r2;

     label2:
        return suffix;
    }

    public volatile java.lang.Object copy(int, int, int, berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$Default this;
        int l1, l2, l3;
        berkeley.com.sleepycat.je.tree.IN l4;
        berkeley.com.sleepycat.je.tree.INKeyRep $r0;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$Default;

        l1 := @parameter0: int;

        l2 := @parameter1: int;

        l3 := @parameter2: int;

        l4 := @parameter3: berkeley.com.sleepycat.je.tree.IN;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: berkeley.com.sleepycat.je.tree.INKeyRep copy(int,int,int,berkeley.com.sleepycat.je.tree.IN)>(l1, l2, l3, l4);

        return $r0;
    }

    public berkeley.com.sleepycat.je.tree.INKeyRep copy(int, int, int, berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$Default this;
        int 'from', 'to', n;
        berkeley.com.sleepycat.je.tree.IN parent;
        byte[][] $r0, $r1;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$Default;

        'from' := @parameter0: int;

        'to' := @parameter1: int;

        n := @parameter2: int;

        parent := @parameter3: berkeley.com.sleepycat.je.tree.IN;

        $r0 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: byte[][] keys>;

        $r1 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: byte[][] keys>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 'from', $r1, 'to', n);

        return this;
    }

    public volatile java.lang.Object compact(berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$Default this;
        berkeley.com.sleepycat.je.tree.IN l1;
        berkeley.com.sleepycat.je.tree.INKeyRep $r0;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$Default;

        l1 := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: berkeley.com.sleepycat.je.tree.INKeyRep compact(berkeley.com.sleepycat.je.tree.IN)>(l1);

        return $r0;
    }

    public berkeley.com.sleepycat.je.tree.INKeyRep compact(berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$Default this;
        berkeley.com.sleepycat.je.tree.IN parent;
        int compactMaxKeyLength, l7, $i0, keyCount#11, maxKeyLength#13, defaultKeyBytes#15, l8#21, $i1, $i2, $i3, $i6;
        byte[][] l6, $r0, $r1;
        byte[] key;
        long defaultSizeWithKeys, $l4, $l5, $l7;
        byte $b8;
        berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize $r2;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$Default;

        parent := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        $r0 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: byte[][] keys>;

        $i0 = lengthof $r0;

        if $i0 <= 256 goto label1;

        return this;

     label1:
        compactMaxKeyLength = virtualinvoke parent.<berkeley.com.sleepycat.je.tree.IN: int getCompactMaxKeyLength()>();

        if compactMaxKeyLength > 0 goto label2;

        return this;

     label2:
        keyCount#11 = 0;

        maxKeyLength#13 = 0;

        defaultKeyBytes#15 = 0;

        l6 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: byte[][] keys>;

        l7 = lengthof l6;

        l8#21 = 0;

     label3:
        if l8#21 >= l7 goto label6;

        key = l6[l8#21];

        if key == null goto label5;

        keyCount#11 = keyCount#11 + 1;

        $i1 = lengthof key;

        if $i1 <= maxKeyLength#13 goto label4;

        maxKeyLength#13 = lengthof key;

        if maxKeyLength#13 <= compactMaxKeyLength goto label4;

        return this;

     label4:
        $i2 = lengthof key;

        $i3 = staticinvoke <berkeley.com.sleepycat.je.dbi.MemoryBudget: int byteArraySize(int)>($i2);

        defaultKeyBytes#15 = defaultKeyBytes#15 + $i3;

     label5:
        l8#21 = l8#21 + 1;

        goto label3;

     label6:
        if keyCount#11 != 0 goto label7;

        return this;

     label7:
        $l4 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: long calculateMemorySize()>();

        $l5 = (long) defaultKeyBytes#15;

        defaultSizeWithKeys = $l4 + $l5;

        $r1 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: byte[][] keys>;

        $i6 = lengthof $r1;

        $l7 = staticinvoke <berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: long access$000(int,int)>($i6, maxKeyLength#13);

        $b8 = defaultSizeWithKeys cmp $l7;

        if $b8 <= 0 goto label8;

        $r2 = specialinvoke this.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize compactToMaxKeySizeRep(int,berkeley.com.sleepycat.je.tree.IN)>(maxKeyLength#13, parent);

        return $r2;

     label8:
        return this;
    }

    private berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize compactToMaxKeySizeRep(int, berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$Default this;
        int maxKeyLength, $i0, i#9, $i2;
        berkeley.com.sleepycat.je.tree.IN parent;
        berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize newRep, $r0;
        berkeley.com.sleepycat.je.tree.INKeyRep rep;
        byte[][] $r1, $r2, $r3;
        short $s1;
        byte[] $r4;
        boolean $z0;
        java.lang.AssertionError $r5;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$Default;

        maxKeyLength := @parameter0: int;

        parent := @parameter1: berkeley.com.sleepycat.je.tree.IN;

        $r0 = new berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize;

        $r1 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: byte[][] keys>;

        $i0 = lengthof $r1;

        $s1 = (short) maxKeyLength;

        specialinvoke $r0.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: void <init>(int,short)>($i0, $s1);

        newRep = $r0;

        i#9 = 0;

     label1:
        $r2 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: byte[][] keys>;

        $i2 = lengthof $r2;

        if i#9 >= $i2 goto label3;

        $r3 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: byte[][] keys>;

        $r4 = $r3[i#9];

        rep = virtualinvoke newRep.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: berkeley.com.sleepycat.je.tree.INKeyRep set(int,byte[],berkeley.com.sleepycat.je.tree.IN)>(i#9, $r4, parent);

        $z0 = <berkeley.com.sleepycat.je.tree.INKeyRep$Default: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if rep == newRep goto label2;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label2:
        i#9 = i#9 + 1;

        goto label1;

     label3:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: void noteRepChange(berkeley.com.sleepycat.je.tree.INArrayRep,berkeley.com.sleepycat.je.tree.IN)>(newRep, parent);

        return newRep;
    }

    public int compareKeys(byte[], byte[], int, boolean, java.util.Comparator)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$Default this;
        byte[] searchKey, prefix, myKey;
        int idx, searchKeyOffset, searchKeyLen, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, cmp#36, $i8, $i9, $i10;
        boolean embeddedData, cmp#12;
        java.util.Comparator comparator;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$Default;

        searchKey := @parameter0: byte[];

        prefix := @parameter1: byte[];

        idx := @parameter2: int;

        embeddedData := @parameter3: boolean;

        comparator := @parameter4: java.util.Comparator;

        if comparator == null goto label1;

        myKey = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: byte[] getFullKey(byte[],int,boolean)>(prefix, idx, embeddedData);

        $i0 = staticinvoke <berkeley.com.sleepycat.je.tree.Key: int compareKeys(byte[],byte[],java.util.Comparator)>(searchKey, myKey, comparator);

        return $i0;

     label1:
        if prefix == null goto label2;

        $i1 = lengthof prefix;

        if $i1 != 0 goto label3;

     label2:
        $i2 = lengthof searchKey;

        $i3 = specialinvoke this.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: int compareSuffixes(byte[],int,int,int,boolean)>(searchKey, 0, $i2, idx, embeddedData);

        return $i3;

     label3:
        $i4 = lengthof searchKey;

        $i5 = lengthof prefix;

        $i6 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i5);

        $i7 = lengthof prefix;

        cmp#36 = staticinvoke <berkeley.com.sleepycat.je.tree.Key: int compareUnsignedBytes(byte[],int,int,byte[],int,int)>(searchKey, 0, $i6, prefix, 0, $i7);

        if cmp#36 != 0 goto label4;

        searchKeyOffset = lengthof prefix;

        $i8 = lengthof searchKey;

        $i9 = lengthof prefix;

        searchKeyLen = $i8 - $i9;

        $i10 = specialinvoke this.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: int compareSuffixes(byte[],int,int,int,boolean)>(searchKey, searchKeyOffset, searchKeyLen, idx, embeddedData);

        return $i10;

     label4:
        return cmp#36;
    }

    private int compareSuffixes(byte[], int, int, int, boolean)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$Default this;
        byte[] searchKey, myKey#5;
        int searchKeyOff, searchKeyLen, idx, myKeyLen#9, $i0, $i1;
        boolean embeddedData;
        byte[][] $r0;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$Default;

        searchKey := @parameter0: byte[];

        searchKeyOff := @parameter1: int;

        searchKeyLen := @parameter2: int;

        idx := @parameter3: int;

        embeddedData := @parameter4: boolean;

        $r0 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: byte[][] keys>;

        myKey#5 = $r0[idx];

        if myKey#5 != null goto label1;

        myKey#5 = <berkeley.com.sleepycat.je.tree.Key: byte[] EMPTY_KEY>;

        myKeyLen#9 = 0;

        goto label3;

     label1:
        if embeddedData == 0 goto label2;

        $i0 = lengthof myKey#5;

        myKeyLen#9 = staticinvoke <berkeley.com.sleepycat.je.dbi.DupKeyData: int getKeyLength(byte[],int,int)>(myKey#5, 0, $i0);

        goto label3;

     label2:
        myKeyLen#9 = lengthof myKey#5;

     label3:
        $i1 = staticinvoke <berkeley.com.sleepycat.je.tree.Key: int compareUnsignedBytes(byte[],int,int,byte[],int,int)>(searchKey, searchKeyOff, searchKeyLen, myKey#5, 0, myKeyLen#9);

        return $i1;
    }

    public berkeley.com.sleepycat.je.tree.INKeyRep set(int, byte[], byte[], berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$Default this;
        int idx, $i0;
        byte[] key, data, $r2;
        berkeley.com.sleepycat.je.tree.IN parent;
        byte[][] $r0, $r1;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$Default;

        idx := @parameter0: int;

        key := @parameter1: byte[];

        data := @parameter2: byte[];

        parent := @parameter3: berkeley.com.sleepycat.je.tree.IN;

        if data == null goto label1;

        $i0 = lengthof data;

        if $i0 != 0 goto label2;

     label1:
        $r0 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: byte[][] keys>;

        $r0[idx] = key;

        goto label3;

     label2:
        $r1 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: byte[][] keys>;

        $r2 = staticinvoke <berkeley.com.sleepycat.je.dbi.DupKeyData: byte[] combine(byte[],byte[])>(key, data);

        $r1[idx] = $r2;

     label3:
        return this;
    }

    public byte[] getData(int)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$Default this;
        int idx, $i0;
        boolean $z0;
        byte[][] $r0, $r3, $r5;
        byte[] $r1, $r4, $r6, $r7;
        java.lang.AssertionError $r2;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$Default;

        idx := @parameter0: int;

        $z0 = <berkeley.com.sleepycat.je.tree.INKeyRep$Default: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r0 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: byte[][] keys>;

        $r1 = $r0[idx];

        if $r1 != null goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $r3 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: byte[][] keys>;

        $r4 = $r3[idx];

        $r5 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: byte[][] keys>;

        $r6 = $r5[idx];

        $i0 = lengthof $r6;

        $r7 = staticinvoke <berkeley.com.sleepycat.je.dbi.DupKeyData: byte[] getData(byte[],int,int)>($r4, 0, $i0);

        return $r7;
    }

    public berkeley.com.sleepycat.je.tree.INKeyRep setData(int, byte[], berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$Default this;
        int idx;
        byte[] data, $r0;
        berkeley.com.sleepycat.je.tree.IN parent;
        berkeley.com.sleepycat.je.tree.INKeyRep $r1;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$Default;

        idx := @parameter0: int;

        data := @parameter1: byte[];

        parent := @parameter2: berkeley.com.sleepycat.je.tree.IN;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: byte[] getKey(int,boolean)>(idx, 1);

        $r1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: berkeley.com.sleepycat.je.tree.INKeyRep set(int,byte[],byte[],berkeley.com.sleepycat.je.tree.IN)>(idx, $r0, data, parent);

        return $r1;
    }

    public int size(int)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$Default this;
        int idx, $i0;
        byte[][] $r0;
        byte[] $r1;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$Default;

        idx := @parameter0: int;

        $r0 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: byte[][] keys>;

        $r1 = $r0[idx];

        $i0 = lengthof $r1;

        return $i0;
    }


