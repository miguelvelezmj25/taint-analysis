    public void <init>(org.w3c.dom.Element, weka.core.pmml.FieldMetaInfo$Optype, java.util.ArrayList) throws java.lang.Exception
    {
        weka.core.pmml.NormDiscrete this;
        org.w3c.dom.Element normDisc;
        weka.core.pmml.FieldMetaInfo$Optype opType, $r0;
        java.util.ArrayList fieldDefs;
        java.lang.String mapMissing, $r2, $r3;
        java.lang.Exception $r1;
        int $i0;
        double $d0;

        this := @this: weka.core.pmml.NormDiscrete;

        normDisc := @parameter0: org.w3c.dom.Element;

        opType := @parameter1: weka.core.pmml.FieldMetaInfo$Optype;

        fieldDefs := @parameter2: java.util.ArrayList;

        specialinvoke this.<weka.core.pmml.Expression: void <init>(weka.core.pmml.FieldMetaInfo$Optype,java.util.ArrayList)>(opType, fieldDefs);

        this.<weka.core.pmml.NormDiscrete: int m_fieldIndex> = -1;

        this.<weka.core.pmml.NormDiscrete: boolean m_mapMissingDefined> = 0;

        this.<weka.core.pmml.NormDiscrete: int m_fieldValueIndex> = -1;

        $r0 = <weka.core.pmml.FieldMetaInfo$Optype: weka.core.pmml.FieldMetaInfo$Optype CONTINUOUS>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(opType);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if opType == $r0 goto label1;

        $r1 = new java.lang.Exception;

        specialinvoke $r1.<java.lang.Exception: void <init>(java.lang.String)>("[NormDiscrete] can only have a continuous optype");

        throw $r1;

     label1:
        $r2 = interfaceinvoke normDisc.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("field");

        this.<weka.core.pmml.NormDiscrete: java.lang.String m_fieldName> = $r2;

        $r3 = interfaceinvoke normDisc.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("value");

        this.<weka.core.pmml.NormDiscrete: java.lang.String m_fieldValue> = $r3;

        mapMissing = interfaceinvoke normDisc.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("mapMissingTo");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(mapMissing);

        if mapMissing == null goto label2;

        $i0 = virtualinvoke mapMissing.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label2;

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(mapMissing);

        this.<weka.core.pmml.NormDiscrete: double m_mapMissingTo> = $d0;

        this.<weka.core.pmml.NormDiscrete: boolean m_mapMissingDefined> = 1;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(fieldDefs);

        if fieldDefs == null goto label3;

        specialinvoke this.<weka.core.pmml.NormDiscrete: void setUpField()>();

     label3:
        return;
    }

    private void setUpField() throws java.lang.Exception
    {
        weka.core.pmml.NormDiscrete this;
        java.util.ArrayList $r0, $r9;
        java.lang.String $r1, $r5, $r8, $r17, $r20, $r23, $r27, $r31, $r33, $r36;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Exception $r2, $r14, $r24;
        java.lang.StringBuilder $r3, $r4, $r6, $r7, $r15, $r16, $r18, $r19, $r25, $r26, $r28, $r29, $r32;
        java.lang.Object $r10;
        weka.core.Attribute $r11, $r12, $r13, $r21, $r22, $r30, $r34, $r35;
        boolean $z0, $z1, $z2, $z3;

        this := @this: weka.core.pmml.NormDiscrete;

        this.<weka.core.pmml.NormDiscrete: int m_fieldIndex> = -1;

        this.<weka.core.pmml.NormDiscrete: int m_fieldValueIndex> = -1;

        this.<weka.core.pmml.NormDiscrete: weka.core.Attribute m_field> = null;

        $r0 = this.<weka.core.pmml.NormDiscrete: java.util.ArrayList m_fieldDefs>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label4;

        $r1 = this.<weka.core.pmml.NormDiscrete: java.lang.String m_fieldName>;

        $i0 = virtualinvoke this.<weka.core.pmml.NormDiscrete: int getFieldDefIndex(java.lang.String)>($r1);

        this.<weka.core.pmml.NormDiscrete: int m_fieldIndex> = $i0;

        $i1 = this.<weka.core.pmml.NormDiscrete: int m_fieldIndex>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 >= 0 goto label1;

        $r2 = new java.lang.Exception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[NormDiscrete] Can\'t find field ");

        $r5 = this.<weka.core.pmml.NormDiscrete: java.lang.String m_fieldName>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in the supplied field definitions.");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.Exception: void <init>(java.lang.String)>($r8);

        throw $r2;

     label1:
        $r9 = this.<weka.core.pmml.NormDiscrete: java.util.ArrayList m_fieldDefs>;

        $i2 = this.<weka.core.pmml.NormDiscrete: int m_fieldIndex>;

        $r10 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        $r11 = (weka.core.Attribute) $r10;

        this.<weka.core.pmml.NormDiscrete: weka.core.Attribute m_field> = $r11;

        $r12 = this.<weka.core.pmml.NormDiscrete: weka.core.Attribute m_field>;

        $z0 = virtualinvoke $r12.<weka.core.Attribute: boolean isString()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label2;

        $r13 = this.<weka.core.pmml.NormDiscrete: weka.core.Attribute m_field>;

        $z1 = virtualinvoke $r13.<weka.core.Attribute: boolean isNominal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

        $r14 = new java.lang.Exception;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[NormDiscrete] reference field ");

        $r17 = this.<weka.core.pmml.NormDiscrete: java.lang.String m_fieldName>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be categorical");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.Exception: void <init>(java.lang.String)>($r20);

        throw $r14;

     label2:
        $r21 = this.<weka.core.pmml.NormDiscrete: weka.core.Attribute m_field>;

        $z2 = virtualinvoke $r21.<weka.core.Attribute: boolean isNominal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label3;

        $r22 = this.<weka.core.pmml.NormDiscrete: weka.core.Attribute m_field>;

        $r23 = this.<weka.core.pmml.NormDiscrete: java.lang.String m_fieldValue>;

        $i3 = virtualinvoke $r22.<weka.core.Attribute: int indexOfValue(java.lang.String)>($r23);

        this.<weka.core.pmml.NormDiscrete: int m_fieldValueIndex> = $i3;

        $i4 = this.<weka.core.pmml.NormDiscrete: int m_fieldValueIndex>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 >= 0 goto label4;

        $r24 = new java.lang.Exception;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[NormDiscrete] Unable to find value ");

        $r27 = this.<weka.core.pmml.NormDiscrete: java.lang.String m_fieldValue>;

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in nominal attribute ");

        $r30 = this.<weka.core.pmml.NormDiscrete: weka.core.Attribute m_field>;

        $r31 = virtualinvoke $r30.<weka.core.Attribute: java.lang.String name()>();

        $r32 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.Exception: void <init>(java.lang.String)>($r33);

        throw $r24;

     label3:
        $r34 = this.<weka.core.pmml.NormDiscrete: weka.core.Attribute m_field>;

        $z3 = virtualinvoke $r34.<weka.core.Attribute: boolean isString()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label4;

        $r35 = this.<weka.core.pmml.NormDiscrete: weka.core.Attribute m_field>;

        $r36 = this.<weka.core.pmml.NormDiscrete: java.lang.String m_fieldValue>;

        $i5 = virtualinvoke $r35.<weka.core.Attribute: int addStringValue(java.lang.String)>($r36);

        this.<weka.core.pmml.NormDiscrete: int m_fieldValueIndex> = $i5;

     label4:
        return;
    }

    public double getResult(double[]) throws java.lang.Exception
    {
        weka.core.pmml.NormDiscrete this;
        double[] incoming;
        double result#2, $d0, $d1;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1;

        this := @this: weka.core.pmml.NormDiscrete;

        incoming := @parameter0: double[];

        result#2 = 0.0;

        $i0 = this.<weka.core.pmml.NormDiscrete: int m_fieldIndex>;

        $d0 = incoming[$i0];

        $z0 = staticinvoke <weka.core.Utils: boolean isMissingValue(double)>($d0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $z1 = this.<weka.core.pmml.NormDiscrete: boolean m_mapMissingDefined>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label1;

        result#2 = this.<weka.core.pmml.NormDiscrete: double m_mapMissingTo>;

        goto label3;

     label1:
        $i1 = this.<weka.core.pmml.NormDiscrete: int m_fieldIndex>;

        result#2 = incoming[$i1];

        goto label3;

     label2:
        $i2 = this.<weka.core.pmml.NormDiscrete: int m_fieldValueIndex>;

        $i3 = this.<weka.core.pmml.NormDiscrete: int m_fieldIndex>;

        $d1 = incoming[$i3];

        $i4 = (int) $d1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i2 != $i4 goto label3;

        result#2 = 1.0;

     label3:
        return result#2;
    }


