    boolean getFlushed()
    {
        berkeley.com.sleepycat.je.recovery.Checkpointer$RootFlusher this;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.recovery.Checkpointer$RootFlusher;

        $z0 = this.<berkeley.com.sleepycat.je.recovery.Checkpointer$RootFlusher: boolean flushed>;

        return $z0;
    }

    boolean stillRoot()
    {
        berkeley.com.sleepycat.je.recovery.Checkpointer$RootFlusher this;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.recovery.Checkpointer$RootFlusher;

        $z0 = this.<berkeley.com.sleepycat.je.recovery.Checkpointer$RootFlusher: boolean stillRoot>;

        return $z0;
    }

    void <init>(berkeley.com.sleepycat.je.dbi.DatabaseImpl, long)
    {
        berkeley.com.sleepycat.je.recovery.Checkpointer$RootFlusher this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;
        long targetNodeId;

        this := @this: berkeley.com.sleepycat.je.recovery.Checkpointer$RootFlusher;

        db := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        targetNodeId := @parameter1: long;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<berkeley.com.sleepycat.je.recovery.Checkpointer$RootFlusher: berkeley.com.sleepycat.je.dbi.DatabaseImpl db> = db;

        this.<berkeley.com.sleepycat.je.recovery.Checkpointer$RootFlusher: boolean flushed> = 0;

        this.<berkeley.com.sleepycat.je.recovery.Checkpointer$RootFlusher: long targetNodeId> = targetNodeId;

        this.<berkeley.com.sleepycat.je.recovery.Checkpointer$RootFlusher: boolean stillRoot> = 0;

        return;
    }

    public berkeley.com.sleepycat.je.tree.IN doWork(berkeley.com.sleepycat.je.tree.ChildReference)
    {
        berkeley.com.sleepycat.je.recovery.Checkpointer$RootFlusher this;
        berkeley.com.sleepycat.je.tree.ChildReference root;
        berkeley.com.sleepycat.je.tree.IN rootIN;
        long newLsn, $l0, $l1;
        java.lang.Throwable l5, $r4;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r0, $r3;
        berkeley.com.sleepycat.je.tree.Node $r1;
        berkeley.com.sleepycat.je.CacheMode $r2;
        byte $b2;
        boolean $z0, $z1;

        this := @this: berkeley.com.sleepycat.je.recovery.Checkpointer$RootFlusher;

        root := @parameter0: berkeley.com.sleepycat.je.tree.ChildReference;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(root);

        if root != null goto label1;

        return null;

     label1:
        $r0 = this.<berkeley.com.sleepycat.je.recovery.Checkpointer$RootFlusher: berkeley.com.sleepycat.je.dbi.DatabaseImpl db>;

        $r1 = virtualinvoke root.<berkeley.com.sleepycat.je.tree.ChildReference: berkeley.com.sleepycat.je.tree.Node fetchTarget(berkeley.com.sleepycat.je.dbi.DatabaseImpl,berkeley.com.sleepycat.je.tree.IN)>($r0, null);

        rootIN = (berkeley.com.sleepycat.je.tree.IN) $r1;

        $r2 = <berkeley.com.sleepycat.je.CacheMode: berkeley.com.sleepycat.je.CacheMode UNCHANGED>;

        virtualinvoke rootIN.<berkeley.com.sleepycat.je.tree.IN: void latch(berkeley.com.sleepycat.je.CacheMode)>($r2);

     label2:
        $l0 = virtualinvoke rootIN.<berkeley.com.sleepycat.je.tree.IN: long getNodeId()>();

        $l1 = this.<berkeley.com.sleepycat.je.recovery.Checkpointer$RootFlusher: long targetNodeId>;

        $b2 = $l0 cmp $l1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b2);

        if $b2 != 0 goto label4;

        $r3 = virtualinvoke rootIN.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        $z0 = virtualinvoke $r3.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isDurableDeferredWrite()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        virtualinvoke rootIN.<berkeley.com.sleepycat.je.tree.IN: void logDirtyChildren()>();

     label3:
        this.<berkeley.com.sleepycat.je.recovery.Checkpointer$RootFlusher: boolean stillRoot> = 1;

        $z1 = virtualinvoke rootIN.<berkeley.com.sleepycat.je.tree.IN: boolean getDirty()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label4;

        newLsn = virtualinvoke rootIN.<berkeley.com.sleepycat.je.tree.IN: long log()>();

        virtualinvoke root.<berkeley.com.sleepycat.je.tree.ChildReference: void setLsn(long)>(newLsn);

        this.<berkeley.com.sleepycat.je.recovery.Checkpointer$RootFlusher: boolean flushed> = 1;

     label4:
        virtualinvoke rootIN.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        goto label8;

     label5:
        $r4 := @caughtexception;

     label6:
        l5 = $r4;

     label7:
        virtualinvoke rootIN.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        throw l5;

     label8:
        return null;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }


