    public void <init>(org.prevayler.implementation.PrevaylerDirectory, long, long, boolean, java.lang.String, org.prevayler.foundation.monitor.Monitor) throws java.io.IOException
    {
        org.prevayler.implementation.journal.PersistentJournal this;
        org.prevayler.implementation.PrevaylerDirectory directory, $r0;
        long journalSizeThresholdInBytes, journalAgeThresholdInMillis;
        boolean journalDiskSync;
        java.lang.String journalSuffix;
        org.prevayler.foundation.monitor.Monitor monitor;

        this := @this: org.prevayler.implementation.journal.PersistentJournal;

        directory := @parameter0: org.prevayler.implementation.PrevaylerDirectory;

        journalSizeThresholdInBytes := @parameter1: long;

        journalAgeThresholdInMillis := @parameter2: long;

        journalDiskSync := @parameter3: boolean;

        journalSuffix := @parameter4: java.lang.String;

        monitor := @parameter5: org.prevayler.foundation.monitor.Monitor;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<org.prevayler.implementation.journal.PersistentJournal: boolean _nextTransactionInitialized> = 0;

        staticinvoke <org.prevayler.implementation.PrevaylerDirectory: void checkValidJournalSuffix(java.lang.String)>(journalSuffix);

        this.<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.monitor.Monitor _monitor> = monitor;

        this.<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.implementation.PrevaylerDirectory _directory> = directory;

        $r0 = this.<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.implementation.PrevaylerDirectory _directory>;

        virtualinvoke $r0.<org.prevayler.implementation.PrevaylerDirectory: void produceDirectory()>();

        this.<org.prevayler.implementation.journal.PersistentJournal: long _journalSizeThresholdInBytes> = journalSizeThresholdInBytes;

        this.<org.prevayler.implementation.journal.PersistentJournal: long _journalAgeThresholdInMillis> = journalAgeThresholdInMillis;

        this.<org.prevayler.implementation.journal.PersistentJournal: boolean _journalDiskSync> = journalDiskSync;

        this.<org.prevayler.implementation.journal.PersistentJournal: java.lang.String _journalSuffix> = journalSuffix;

        return;
    }

    public void append(org.prevayler.implementation.TransactionGuide)
    {
        org.prevayler.implementation.journal.PersistentJournal this;
        org.prevayler.implementation.TransactionGuide guide;
        org.prevayler.foundation.DurableOutputStream myOutputJournal, outputJournalToClose#9, $r1, $r6;
        java.lang.Throwable l4, l5, $r4, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.IllegalStateException $r0;
        long $l0, $l1, $l2, $l3;
        org.prevayler.foundation.StopWatch $r2;
        java.lang.Exception $r5, exception#42, $r8, exception#56;
        java.io.File $r7, $r9;

        this := @this: org.prevayler.implementation.journal.PersistentJournal;

        guide := @parameter0: org.prevayler.implementation.TransactionGuide;

        $z0 = this.<org.prevayler.implementation.journal.PersistentJournal: boolean _nextTransactionInitialized>;

        if $z0 != 0 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        $z2 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z1);

        if $z2 == 0 goto label03;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Journal.update() has to be called at least once before Journal.append().");

        throw $r0;

     label03:
        outputJournalToClose#9 = null;

        virtualinvoke guide.<org.prevayler.implementation.TransactionGuide: void startTurn()>();

     label04:
        $l0 = this.<org.prevayler.implementation.journal.PersistentJournal: long _nextTransaction>;

        virtualinvoke guide.<org.prevayler.implementation.TransactionGuide: void checkSystemVersion(long)>($l0);

        $z3 = specialinvoke this.<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalStillValid()>();

        if $z3 != 0 goto label05;

        $z4 = 1;

        goto label06;

     label05:
        $z4 = 0;

     label06:
        $z5 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z4);

        if $z5 == 0 goto label07;

        outputJournalToClose#9 = this.<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream _outputJournal>;

        $l1 = this.<org.prevayler.implementation.journal.PersistentJournal: long _nextTransaction>;

        $r1 = specialinvoke this.<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream createOutputJournal(long,org.prevayler.foundation.Guided)>($l1, guide);

        this.<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream _outputJournal> = $r1;

        $r2 = staticinvoke <org.prevayler.foundation.StopWatch: org.prevayler.foundation.StopWatch start()>();

        this.<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.StopWatch _journalAgeTimer> = $r2;

     label07:
        $l2 = this.<org.prevayler.implementation.journal.PersistentJournal: long _nextTransaction>;

        $l3 = $l2 + 1L;

        this.<org.prevayler.implementation.journal.PersistentJournal: long _nextTransaction> = $l3;

        myOutputJournal = this.<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream _outputJournal>;

     label08:
        virtualinvoke guide.<org.prevayler.implementation.TransactionGuide: void endTurn()>();

        goto label12;

     label09:
        $r4 := @caughtexception;

     label10:
        l4 = $r4;

     label11:
        virtualinvoke guide.<org.prevayler.implementation.TransactionGuide: void endTurn()>();

        throw l4;

     label12:
        virtualinvoke myOutputJournal.<org.prevayler.foundation.DurableOutputStream: void sync(org.prevayler.foundation.Guided)>(guide);

     label13:
        goto label15;

     label14:
        $r5 := @caughtexception;

        exception#42 = $r5;

        $r6 = this.<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream _outputJournal>;

        $r7 = virtualinvoke $r6.<org.prevayler.foundation.DurableOutputStream: java.io.File file()>();

        specialinvoke this.<org.prevayler.implementation.journal.PersistentJournal: void abort(java.lang.Exception,java.io.File,java.lang.String,org.prevayler.foundation.Guided)>(exception#42, $r7, "writing to", guide);

     label15:
        virtualinvoke guide.<org.prevayler.implementation.TransactionGuide: void startTurn()>();

     label16:
        if outputJournalToClose#9 == null goto label17;

        $z6 = 1;

        goto label18;

     label17:
        $z6 = 0;

     label18:
        $z7 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z6);

        if $z7 == 0 goto label19;

        virtualinvoke outputJournalToClose#9.<org.prevayler.foundation.DurableOutputStream: void close()>();

     label19:
        goto label21;

     label20:
        $r8 := @caughtexception;

        exception#56 = $r8;

        $r9 = virtualinvoke outputJournalToClose#9.<org.prevayler.foundation.DurableOutputStream: java.io.File file()>();

        specialinvoke this.<org.prevayler.implementation.journal.PersistentJournal: void abort(java.lang.Exception,java.io.File,java.lang.String,org.prevayler.foundation.Guided)>(exception#56, $r9, "closing", guide);

     label21:
        virtualinvoke guide.<org.prevayler.implementation.TransactionGuide: void endTurn()>();

        goto label25;

     label22:
        $r10 := @caughtexception;

     label23:
        l5 = $r10;

     label24:
        virtualinvoke guide.<org.prevayler.implementation.TransactionGuide: void endTurn()>();

        throw l5;

     label25:
        return;

        catch java.lang.Throwable from label04 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Exception from label12 to label13 with label14;
        catch java.lang.Exception from label16 to label19 with label20;
        catch java.lang.Throwable from label16 to label21 with label22;
        catch java.lang.Throwable from label23 to label24 with label22;
    }

    private boolean isOutputJournalStillValid()
    {
        org.prevayler.implementation.journal.PersistentJournal this;
        org.prevayler.foundation.DurableOutputStream $r0;
        boolean $z0, $z1, $z2;

        this := @this: org.prevayler.implementation.journal.PersistentJournal;

        $r0 = this.<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream _outputJournal>;

        if $r0 == null goto label1;

        $z0 = specialinvoke this.<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooBig()>();

        if $z0 != 0 goto label1;

        $z1 = specialinvoke this.<org.prevayler.implementation.journal.PersistentJournal: boolean isOutputJournalTooOld()>();

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private org.prevayler.foundation.DurableOutputStream createOutputJournal(long, org.prevayler.foundation.Guided)
    {
        org.prevayler.implementation.journal.PersistentJournal this;
        long transactionNumber, $l0;
        org.prevayler.foundation.Guided guide;
        java.io.File file;
        java.lang.Exception exception, $r3;
        org.prevayler.implementation.PrevaylerDirectory $r0;
        java.lang.String $r1;
        org.prevayler.foundation.DurableOutputStream $r2;
        boolean $z0;

        this := @this: org.prevayler.implementation.journal.PersistentJournal;

        transactionNumber := @parameter0: long;

        guide := @parameter1: org.prevayler.foundation.Guided;

        $r0 = this.<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.implementation.PrevaylerDirectory _directory>;

        $r1 = this.<org.prevayler.implementation.journal.PersistentJournal: java.lang.String _journalSuffix>;

        file = virtualinvoke $r0.<org.prevayler.implementation.PrevaylerDirectory: java.io.File journalFile(long,java.lang.String)>(transactionNumber, $r1);

     label1:
        $r2 = new org.prevayler.foundation.DurableOutputStream;

        $z0 = this.<org.prevayler.implementation.journal.PersistentJournal: boolean _journalDiskSync>;

        $l0 = this.<org.prevayler.implementation.journal.PersistentJournal: long _journalSizeThresholdInBytes>;

        specialinvoke $r2.<org.prevayler.foundation.DurableOutputStream: void <init>(java.io.File,boolean,long)>(file, $z0, $l0);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        exception = $r3;

        specialinvoke this.<org.prevayler.implementation.journal.PersistentJournal: void abort(java.lang.Exception,java.io.File,java.lang.String,org.prevayler.foundation.Guided)>(exception, file, "creating", guide);

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void abort(java.lang.Exception, java.io.File, java.lang.String, org.prevayler.foundation.Guided)
    {
        org.prevayler.implementation.journal.PersistentJournal this;
        java.lang.Exception exception;
        java.io.File journal;
        java.lang.String action, $r4;
        org.prevayler.foundation.Guided guide;
        java.lang.StringBuilder $r0, $r1, $r2, $r3;

        this := @this: org.prevayler.implementation.journal.PersistentJournal;

        exception := @parameter0: java.lang.Exception;

        journal := @parameter1: java.io.File;

        action := @parameter2: java.lang.String;

        guide := @parameter3: org.prevayler.foundation.Guided;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("All transaction processing is now aborted. An IOException was thrown while ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(action);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" a .journal file.");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke guide.<org.prevayler.foundation.Guided: void abortTurn(java.lang.String,java.lang.Throwable)>($r4, exception);

        return;
    }

    private boolean isOutputJournalTooBig()
    {
        org.prevayler.implementation.journal.PersistentJournal this;
        long $l0, $l2, $l3;
        byte $b1, $b4;
        org.prevayler.foundation.DurableOutputStream $r0;
        java.io.File $r1;
        boolean $z0;

        this := @this: org.prevayler.implementation.journal.PersistentJournal;

        $l0 = this.<org.prevayler.implementation.journal.PersistentJournal: long _journalSizeThresholdInBytes>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        $r0 = this.<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.DurableOutputStream _outputJournal>;

        $r1 = virtualinvoke $r0.<org.prevayler.foundation.DurableOutputStream: java.io.File file()>();

        $l2 = virtualinvoke $r1.<java.io.File: long length()>();

        $l3 = this.<org.prevayler.implementation.journal.PersistentJournal: long _journalSizeThresholdInBytes>;

        $b4 = $l2 cmp $l3;

        if $b4 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private boolean isOutputJournalTooOld()
    {
        org.prevayler.implementation.journal.PersistentJournal this;
        long $l0, $l2, $l3;
        byte $b1, $b4;
        org.prevayler.foundation.StopWatch $r0;
        boolean $z0;

        this := @this: org.prevayler.implementation.journal.PersistentJournal;

        $l0 = this.<org.prevayler.implementation.journal.PersistentJournal: long _journalAgeThresholdInMillis>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        $r0 = this.<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.StopWatch _journalAgeTimer>;

        $l2 = virtualinvoke $r0.<org.prevayler.foundation.StopWatch: long millisEllapsed()>();

        $l3 = this.<org.prevayler.implementation.journal.PersistentJournal: long _journalAgeThresholdInMillis>;

        $b4 = $l2 cmp $l3;

        if $b4 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public long nextTransaction()
    {
        org.prevayler.implementation.journal.PersistentJournal this;
        boolean $z0, $z1, $z2;
        java.lang.IllegalStateException $r0;
        long $l0;

        this := @this: org.prevayler.implementation.journal.PersistentJournal;

        $z0 = this.<org.prevayler.implementation.journal.PersistentJournal: boolean _nextTransactionInitialized>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $z2 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z1);

        if $z2 == 0 goto label3;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("update() must be called at least once");

        throw $r0;

     label3:
        $l0 = this.<org.prevayler.implementation.journal.PersistentJournal: long _nextTransaction>;

        return $l0;
    }

    public void update(org.prevayler.implementation.publishing.TransactionSubscriber, long) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.prevayler.implementation.journal.PersistentJournal this;
        org.prevayler.implementation.publishing.TransactionSubscriber subscriber;
        long initialTransactionWanted, nextTransaction;
        java.io.File initialJournal;
        org.prevayler.implementation.PrevaylerDirectory $r0;
        boolean $z0, $z1;

        this := @this: org.prevayler.implementation.journal.PersistentJournal;

        subscriber := @parameter0: org.prevayler.implementation.publishing.TransactionSubscriber;

        initialTransactionWanted := @parameter1: long;

        $r0 = this.<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.implementation.PrevaylerDirectory _directory>;

        initialJournal = virtualinvoke $r0.<org.prevayler.implementation.PrevaylerDirectory: java.io.File findInitialJournalFile(long)>(initialTransactionWanted);

        if initialJournal != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $z1 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z0);

        if $z1 == 0 goto label3;

        specialinvoke this.<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>(initialTransactionWanted, 1L);

        return;

     label3:
        nextTransaction = specialinvoke this.<org.prevayler.implementation.journal.PersistentJournal: long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber,long,java.io.File)>(subscriber, initialTransactionWanted, initialJournal);

        specialinvoke this.<org.prevayler.implementation.journal.PersistentJournal: void initializeNextTransaction(long,long)>(initialTransactionWanted, nextTransaction);

        return;
    }

    private void initializeNextTransaction(long, long) throws java.io.IOException
    {
        org.prevayler.implementation.journal.PersistentJournal this;
        long initialTransactionWanted, nextTransaction, $l0, $l2, $l3, $l4, $l6, $l9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        byte $b1, $b5, $b7, $b8;
        java.io.IOException $r0, $r8;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6, $r9, $r10, $r11, $r12;
        java.lang.String $r7, $r13;
        java.lang.IllegalStateException $r14;

        this := @this: org.prevayler.implementation.journal.PersistentJournal;

        initialTransactionWanted := @parameter0: long;

        nextTransaction := @parameter1: long;

        $z0 = this.<org.prevayler.implementation.journal.PersistentJournal: boolean _nextTransactionInitialized>;

        $z1 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z0);

        if $z1 == 0 goto label10;

        $l0 = this.<org.prevayler.implementation.journal.PersistentJournal: long _nextTransaction>;

        $b1 = $l0 cmp initialTransactionWanted;

        if $b1 >= 0 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        $z3 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z2);

        if $z3 == 0 goto label03;

        $r0 = new java.io.IOException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The transaction log has not yet reached transaction ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(initialTransactionWanted);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". The last logged transaction was ");

        $l2 = this.<org.prevayler.implementation.journal.PersistentJournal: long _nextTransaction>;

        $l3 = $l2 - 1L;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r0;

     label03:
        $l4 = this.<org.prevayler.implementation.journal.PersistentJournal: long _nextTransaction>;

        $b5 = nextTransaction cmp $l4;

        if $b5 >= 0 goto label04;

        $z4 = 1;

        goto label05;

     label04:
        $z4 = 0;

     label05:
        $z5 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z4);

        if $z5 == 0 goto label06;

        $r8 = new java.io.IOException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to find journal file containing transaction ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(nextTransaction);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Might have been manually deleted.");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label06:
        $l6 = this.<org.prevayler.implementation.journal.PersistentJournal: long _nextTransaction>;

        $b7 = nextTransaction cmp $l6;

        if $b7 <= 0 goto label07;

        $z6 = 1;

        goto label08;

     label07:
        $z6 = 0;

     label08:
        $z7 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z6);

        if $z7 == 0 goto label09;

        $r14 = new java.lang.IllegalStateException;

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>()>();

        throw $r14;

     label09:
        return;

     label10:
        this.<org.prevayler.implementation.journal.PersistentJournal: boolean _nextTransactionInitialized> = 1;

        $b8 = initialTransactionWanted cmp nextTransaction;

        if $b8 <= 0 goto label11;

        $l9 = initialTransactionWanted;

        goto label12;

     label11:
        $l9 = nextTransaction;

     label12:
        this.<org.prevayler.implementation.journal.PersistentJournal: long _nextTransaction> = $l9;

        return;
    }

    private long recoverPendingTransactions(org.prevayler.implementation.publishing.TransactionSubscriber, long, java.io.File) throws java.io.IOException
    {
        org.prevayler.implementation.journal.PersistentJournal this;
        org.prevayler.implementation.publishing.TransactionSubscriber subscriber;
        long initialTransaction, recoveringTransaction#3, $l1, $l3;
        java.io.File initialJournal, nextFile, journal#5;
        org.prevayler.foundation.Chunk chunk;
        org.prevayler.implementation.TransactionTimestamp entry;
        java.io.EOFException eof, $r20;
        org.prevayler.foundation.DurableInputStream $r0, input#11, $r23;
        org.prevayler.foundation.monitor.Monitor $r1, $r24;
        byte $b0, $b2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.lang.String $r2, $r3, $r9, $r12, $r19, $r22;
        java.io.IOException $r4, $r13;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r10, $r11, $r14, $r15, $r16, $r17, $r18;
        org.prevayler.implementation.PrevaylerDirectory $r21;

        this := @this: org.prevayler.implementation.journal.PersistentJournal;

        subscriber := @parameter0: org.prevayler.implementation.publishing.TransactionSubscriber;

        initialTransaction := @parameter1: long;

        initialJournal := @parameter2: java.io.File;

        recoveringTransaction#3 = staticinvoke <org.prevayler.implementation.PrevaylerDirectory: long journalVersion(java.io.File)>(initialJournal);

        journal#5 = initialJournal;

        $r0 = new org.prevayler.foundation.DurableInputStream;

        $r1 = this.<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.monitor.Monitor _monitor>;

        specialinvoke $r0.<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File,org.prevayler.foundation.monitor.Monitor)>(journal#5, $r1);

        input#11 = $r0;

     label01:
        chunk = virtualinvoke input#11.<org.prevayler.foundation.DurableInputStream: org.prevayler.foundation.Chunk readChunk()>();

        $b0 = recoveringTransaction#3 cmp initialTransaction;

        if $b0 < 0 goto label02;

        $z0 = 1;

        goto label03;

     label02:
        $z0 = 0;

     label03:
        $z1 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z0);

        if $z1 == 0 goto label10;

        $r2 = virtualinvoke journal#5.<java.io.File: java.lang.String getName()>();

        $r3 = this.<org.prevayler.implementation.journal.PersistentJournal: java.lang.String _journalSuffix>;

        $z2 = virtualinvoke $r2.<java.lang.String: boolean endsWith(java.lang.String)>($r3);

        if $z2 != 0 goto label04;

        $z3 = 1;

        goto label05;

     label04:
        $z3 = 0;

     label05:
        $z4 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z3);

        if $z4 == 0 goto label06;

        $r4 = new java.io.IOException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("There are transactions needing to be recovered from ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(journal#5);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", but only ");

        $r9 = this.<org.prevayler.implementation.journal.PersistentJournal: java.lang.String _journalSuffix>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" files are supported");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r12);

        throw $r4;

     label06:
        entry = staticinvoke <org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.TransactionTimestamp fromChunk(org.prevayler.foundation.Chunk)>(chunk);

        $l1 = virtualinvoke entry.<org.prevayler.implementation.TransactionTimestamp: long systemVersion()>();

        $b2 = $l1 cmp recoveringTransaction#3;

        if $b2 == 0 goto label07;

        $z5 = 1;

        goto label08;

     label07:
        $z5 = 0;

     label08:
        $z6 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z5);

        if $z6 == 0 goto label09;

        $r13 = new java.io.IOException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(recoveringTransaction#3);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but was ");

        $l3 = virtualinvoke entry.<org.prevayler.implementation.TransactionTimestamp: long systemVersion()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>($r19);

        throw $r13;

     label09:
        interfaceinvoke subscriber.<org.prevayler.implementation.publishing.TransactionSubscriber: void receive(org.prevayler.implementation.TransactionTimestamp)>(entry);

     label10:
        recoveringTransaction#3 = recoveringTransaction#3 + 1L;

     label11:
        goto label01;

     label12:
        $r20 := @caughtexception;

        eof = $r20;

        $r21 = this.<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.implementation.PrevaylerDirectory _directory>;

        $r22 = this.<org.prevayler.implementation.journal.PersistentJournal: java.lang.String _journalSuffix>;

        nextFile = virtualinvoke $r21.<org.prevayler.implementation.PrevaylerDirectory: java.io.File journalFile(long,java.lang.String)>(recoveringTransaction#3, $r22);

        $z7 = virtualinvoke journal#5.<java.io.File: boolean equals(java.lang.Object)>(nextFile);

        $z8 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z7);

        if $z8 == 0 goto label13;

        staticinvoke <org.prevayler.implementation.PrevaylerDirectory: void renameUnusedFile(java.io.File)>(journal#5);

     label13:
        journal#5 = nextFile;

        $z9 = virtualinvoke journal#5.<java.io.File: boolean exists()>();

        if $z9 != 0 goto label14;

        $z10 = 1;

        goto label15;

     label14:
        $z10 = 0;

     label15:
        $z11 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z10);

        if $z11 == 0 goto label16;

        goto label17;

     label16:
        $r23 = new org.prevayler.foundation.DurableInputStream;

        $r24 = this.<org.prevayler.implementation.journal.PersistentJournal: org.prevayler.foundation.monitor.Monitor _monitor>;

        specialinvoke $r23.<org.prevayler.foundation.DurableInputStream: void <init>(java.io.File,org.prevayler.foundation.monitor.Monitor)>(journal#5, $r24);

        input#11 = $r23;

        goto label01;

     label17:
        return recoveringTransaction#3;

        catch java.io.EOFException from label01 to label11 with label12;
    }


