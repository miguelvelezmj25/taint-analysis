    static void <clinit>()
    {
        java.lang.Class $r0;

        $r0 = staticinvoke <java.lang.Class: java.lang.Class getPrimitiveClass(java.lang.String)>("float");

        <java.lang.Float: java.lang.Class TYPE> = $r0;

        return;
    }

    public static java.lang.Float valueOf(float)
    {
        float l0;
        java.lang.Float $r0;

        l0 := @parameter0: float;

        $r0 = new java.lang.Float;

        specialinvoke $r0.<java.lang.Float: void <init>(float)>(l0);

        return $r0;
    }

    public void <init>(float)
    {
        java.lang.Float l0;
        float l1;

        l0 := @this: java.lang.Float;

        l1 := @parameter0: float;

        specialinvoke l0.<java.lang.Number: void <init>()>();

        l0.<java.lang.Float: float value> = l1;

        return;
    }

    public float floatValue()
    {
        java.lang.Float l0;
        float $f0;

        l0 := @this: java.lang.Float;

        $f0 = l0.<java.lang.Float: float value>;

        return $f0;
    }

    public void <init>(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.Float l0;
        java.lang.String l1;
        float $f0;

        l0 := @this: java.lang.Float;

        l1 := @parameter0: java.lang.String;

        specialinvoke l0.<java.lang.Number: void <init>()>();

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(l1);

        l0.<java.lang.Float: float value> = $f0;

        return;
    }

    public static float parseFloat(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String l0;
        float $f0;

        l0 := @parameter0: java.lang.String;

        $f0 = staticinvoke <sun.misc.FloatingDecimal: float parseFloat(java.lang.String)>(l0);

        return $f0;
    }

    public static boolean isNaN(float)
    {
        float l0;
        byte $b0;
        boolean $z0;

        l0 := @parameter0: float;

        $b0 = l0 cmpl l0;

        if $b0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public volatile int compareTo(java.lang.Object)
    {
        java.lang.Float l0, $r0;
        java.lang.Object l1;
        int $i0;

        l0 := @this: java.lang.Float;

        l1 := @parameter0: java.lang.Object;

        $r0 = (java.lang.Float) l1;

        $i0 = virtualinvoke l0.<java.lang.Float: int compareTo(java.lang.Float)>($r0);

        return $i0;
    }

    public int compareTo(java.lang.Float)
    {
        java.lang.Float l0, l1;
        float $f0, $f1;
        int $i0;

        l0 := @this: java.lang.Float;

        l1 := @parameter0: java.lang.Float;

        $f0 = l0.<java.lang.Float: float value>;

        $f1 = l1.<java.lang.Float: float value>;

        $i0 = staticinvoke <java.lang.Float: int compare(float,float)>($f0, $f1);

        return $i0;
    }

    public static int compare(float, float)
    {
        float l0, l1;
        int l2, l3;
        byte $b0, $b1, $b2;

        l0 := @parameter0: float;

        l1 := @parameter1: float;

        $b0 = l0 cmpg l1;

        if $b0 >= 0 goto label1;

        return -1;

     label1:
        $b1 = l0 cmpl l1;

        if $b1 <= 0 goto label2;

        return 1;

     label2:
        l2 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(l0);

        l3 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(l1);

        if l2 != l3 goto label3;

        $b2 = 0;

        goto label5;

     label3:
        if l2 >= l3 goto label4;

        $b2 = -1;

        goto label5;

     label4:
        $b2 = 1;

     label5:
        return $b2;
    }

    public static int floatToIntBits(float)
    {
        float l0;
        int l1#3, $i0, $i1;

        l0 := @parameter0: float;

        l1#3 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(l0);

        $i0 = l1#3 & 2139095040;

        if $i0 != 2139095040 goto label1;

        $i1 = l1#3 & 8388607;

        if $i1 == 0 goto label1;

        l1#3 = 2143289344;

     label1:
        return l1#3;
    }


