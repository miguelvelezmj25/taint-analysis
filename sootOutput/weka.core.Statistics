    static void <clinit>()
    {
        double[] $r0, $r1, $r2, $r3, $r4, $r5;

        $r0 = newarray (double)[5];

        $r0[0] = -59.96335010141079;

        $r0[1] = 98.00107541859997;

        $r0[2] = -56.67628574690703;

        $r0[3] = 13.931260938727968;

        $r0[4] = -1.2391658386738125;

        <weka.core.Statistics: double[] P0> = $r0;

        $r1 = newarray (double)[8];

        $r1[0] = 1.9544885833814176;

        $r1[1] = 4.676279128988815;

        $r1[2] = 86.36024213908905;

        $r1[3] = -225.46268785411937;

        $r1[4] = 200.26021238006066;

        $r1[5] = -82.03722561683334;

        $r1[6] = 15.90562251262117;

        $r1[7] = -1.1833162112133;

        <weka.core.Statistics: double[] Q0> = $r1;

        $r2 = newarray (double)[9];

        $r2[0] = 4.0554489230596245;

        $r2[1] = 31.525109459989388;

        $r2[2] = 57.16281922464213;

        $r2[3] = 44.08050738932008;

        $r2[4] = 14.684956192885803;

        $r2[5] = 2.1866330685079025;

        $r2[6] = -0.1402560791713545;

        $r2[7] = -0.03504246268278482;

        $r2[8] = -8.574567851546854E-4;

        <weka.core.Statistics: double[] P1> = $r2;

        $r3 = newarray (double)[8];

        $r3[0] = 15.779988325646675;

        $r3[1] = 45.39076351288792;

        $r3[2] = 41.3172038254672;

        $r3[3] = 15.04253856929075;

        $r3[4] = 2.504649462083094;

        $r3[5] = -0.14218292285478779;

        $r3[6] = -0.03808064076915783;

        $r3[7] = -9.332594808954574E-4;

        <weka.core.Statistics: double[] Q1> = $r3;

        $r4 = newarray (double)[9];

        $r4[0] = 3.2377489177694603;

        $r4[1] = 6.915228890689842;

        $r4[2] = 3.9388102529247444;

        $r4[3] = 1.3330346081580755;

        $r4[4] = 0.20148538954917908;

        $r4[5] = 0.012371663481782003;

        $r4[6] = 3.0158155350823543E-4;

        $r4[7] = 2.6580697468673755E-6;

        $r4[8] = 6.239745391849833E-9;

        <weka.core.Statistics: double[] P2> = $r4;

        $r5 = newarray (double)[8];

        $r5[0] = 6.02427039364742;

        $r5[1] = 3.6798356385616087;

        $r5[2] = 1.3770209948908132;

        $r5[3] = 0.21623699359449663;

        $r5[4] = 0.013420400608854318;

        $r5[5] = 3.2801446468212774E-4;

        $r5[6] = 2.8924786474538068E-6;

        $r5[7] = 6.790194080099813E-9;

        <weka.core.Statistics: double[] Q2> = $r5;

        return;
    }

    public static double normalProbability(double)
    {
        double a, x, z, $d0, $d1, y#15, $d2;
        byte $b0, $b1;

        a := @parameter0: double;

        x = a * 0.7071067811865476;

        z = staticinvoke <java.lang.Math: double abs(double)>(x);

        $b0 = z cmpg 0.7071067811865476;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 >= 0 goto label1;

        $d0 = staticinvoke <weka.core.Statistics: double errorFunction(double)>(x);

        $d1 = 0.5 * $d0;

        y#15 = 0.5 + $d1;

        goto label2;

     label1:
        $d2 = staticinvoke <weka.core.Statistics: double errorFunctionComplemented(double)>(z);

        y#15 = 0.5 * $d2;

        $b1 = x cmpl 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 <= 0 goto label2;

        y#15 = 1.0 - y#15;

     label2:
        return y#15;
    }

    public static double errorFunctionComplemented(double)
    {
        double a, x#101, $d0, $d1, $d2, z#114, z#125, p#133, q#138, $d3, y#152;
        double[] P, Q, R, S, $r0, $r1, $r2, $r3;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7;

        a := @parameter0: double;

        $r0 = newarray (double)[9];

        $r0[0] = 2.461969814735305E-10;

        $r0[1] = 0.5641895648310689;

        $r0[2] = 7.463210564422699;

        $r0[3] = 48.63719709856814;

        $r0[4] = 196.5208329560771;

        $r0[5] = 526.4451949954773;

        $r0[6] = 934.5285271719576;

        $r0[7] = 1027.5518868951572;

        $r0[8] = 557.5353353693994;

        P = $r0;

        $r1 = newarray (double)[8];

        $r1[0] = 13.228195115474499;

        $r1[1] = 86.70721408859897;

        $r1[2] = 354.9377788878199;

        $r1[3] = 975.7085017432055;

        $r1[4] = 1823.9091668790973;

        $r1[5] = 2246.3376081871097;

        $r1[6] = 1656.6630919416134;

        $r1[7] = 557.5353408177277;

        Q = $r1;

        $r2 = newarray (double)[6];

        $r2[0] = 0.5641895835477551;

        $r2[1] = 1.275366707599781;

        $r2[2] = 5.019050422511805;

        $r2[3] = 6.160210979930536;

        $r2[4] = 7.4097426995044895;

        $r2[5] = 2.9788666537210022;

        R = $r2;

        $r3 = newarray (double)[6];

        $r3[0] = 2.2605286322011726;

        $r3[1] = 9.396035249380015;

        $r3[2] = 12.048953980809666;

        $r3[3] = 17.08144507475659;

        $r3[4] = 9.608968090632859;

        $r3[5] = 3.369076451000815;

        S = $r3;

        $b0 = a cmpg 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 >= 0 goto label01;

        x#101 = neg a;

        goto label02;

     label01:
        x#101 = a;

     label02:
        $b1 = x#101 cmpg 1.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 >= 0 goto label03;

        $d0 = staticinvoke <weka.core.Statistics: double errorFunction(double)>(a);

        $d1 = 1.0 - $d0;

        return $d1;

     label03:
        $d2 = neg a;

        z#114 = $d2 * a;

        $b2 = z#114 cmpg -709.782712893384;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b2);

        if $b2 >= 0 goto label05;

        $b3 = a cmpg 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b3);

        if $b3 >= 0 goto label04;

        return 2.0;

     label04:
        return 0.0;

     label05:
        z#125 = staticinvoke <java.lang.Math: double exp(double)>(z#114);

        $b4 = x#101 cmpg 8.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b4);

        if $b4 >= 0 goto label06;

        p#133 = staticinvoke <weka.core.Statistics: double polevl(double,double[],int)>(x#101, P, 8);

        q#138 = staticinvoke <weka.core.Statistics: double p1evl(double,double[],int)>(x#101, Q, 8);

        goto label07;

     label06:
        p#133 = staticinvoke <weka.core.Statistics: double polevl(double,double[],int)>(x#101, R, 5);

        q#138 = staticinvoke <weka.core.Statistics: double p1evl(double,double[],int)>(x#101, S, 6);

     label07:
        $d3 = z#125 * p#133;

        y#152 = $d3 / q#138;

        $b5 = a cmpg 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b5);

        if $b5 >= 0 goto label08;

        y#152 = 2.0 - y#152;

     label08:
        $b6 = y#152 cmpl 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b6);

        if $b6 != 0 goto label10;

        $b7 = a cmpg 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b7);

        if $b7 >= 0 goto label09;

        return 2.0;

     label09:
        return 0.0;

     label10:
        return y#152;
    }

    public static double errorFunction(double)
    {
        double x, z, y, $d0, $d1, $d2, $d3, $d4, $d5;
        double[] T, U, $r0, $r1;
        byte $b0;

        x := @parameter0: double;

        $r0 = newarray (double)[5];

        $r0[0] = 9.604973739870516;

        $r0[1] = 90.02601972038427;

        $r0[2] = 2232.005345946843;

        $r0[3] = 7003.325141128051;

        $r0[4] = 55592.30130103949;

        T = $r0;

        $r1 = newarray (double)[5];

        $r1[0] = 33.56171416475031;

        $r1[1] = 521.3579497801527;

        $r1[2] = 4594.323829709801;

        $r1[3] = 22629.000061389095;

        $r1[4] = 49267.39426086359;

        U = $r1;

        $d0 = staticinvoke <java.lang.Math: double abs(double)>(x);

        $b0 = $d0 cmpl 1.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 <= 0 goto label1;

        $d1 = staticinvoke <weka.core.Statistics: double errorFunctionComplemented(double)>(x);

        $d2 = 1.0 - $d1;

        return $d2;

     label1:
        z = x * x;

        $d3 = staticinvoke <weka.core.Statistics: double polevl(double,double[],int)>(z, T, 4);

        $d4 = x * $d3;

        $d5 = staticinvoke <weka.core.Statistics: double p1evl(double,double[],int)>(z, U, 5);

        y = $d4 / $d5;

        return y;
    }

    public static double p1evl(double, double[], int)
    {
        double x, $d0, ans#6, $d1, $d2;
        double[] coef;
        int N, i#8;

        x := @parameter0: double;

        coef := @parameter1: double[];

        N := @parameter2: int;

        $d0 = coef[0];

        ans#6 = x + $d0;

        i#8 = 1;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(N);

        if i#8 >= N goto label2;

        $d1 = ans#6 * x;

        $d2 = coef[i#8];

        ans#6 = $d1 + $d2;

        i#8 = i#8 + 1;

        goto label1;

     label2:
        return ans#6;
    }

    public static double polevl(double, double[], int)
    {
        double x, ans#4, $d0, $d1;
        double[] coef;
        int N, i#6;

        x := @parameter0: double;

        coef := @parameter1: double[];

        N := @parameter2: int;

        ans#4 = coef[0];

        i#6 = 1;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(N);

        if i#6 > N goto label2;

        $d0 = ans#4 * x;

        $d1 = coef[i#6];

        ans#4 = $d0 + $d1;

        i#6 = i#6 + 1;

        goto label1;

     label2:
        return ans#4;
    }

    public static double normalInverse(double)
    {
        double y0, s2pi, y2, x0, z, y#16, y#30, $d0, $d1, $d2, $d3, $d4, x#49, x#53, $d5, $d6, x#60, $d7, $d8, $d9, $d10, $d11, x1#84, $d12, $d13, $d14, x#99;
        byte $b0, $b1, $b2, $b3, $b4;
        java.lang.IllegalArgumentException $r0, $r1;
        boolean code#14;
        double[] $r2, $r3, $r4, $r5, $r6, $r7;

        y0 := @parameter0: double;

        s2pi = staticinvoke <java.lang.Math: double sqrt(double)>(6.283185307179586);

        $b0 = y0 cmpg 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 > 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;

     label1:
        $b1 = y0 cmpl 1.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 < 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label2:
        code#14 = 1;

        y#16 = y0;

        $b2 = y#16 cmpl 0.8646647167633873;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b2);

        if $b2 <= 0 goto label3;

        y#16 = 1.0 - y#16;

        code#14 = 0;

     label3:
        $b3 = y#16 cmpl 0.1353352832366127;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b3);

        if $b3 <= 0 goto label4;

        y#30 = y#16 - 0.5;

        y2 = y#30 * y#30;

        $r2 = <weka.core.Statistics: double[] P0>;

        $d0 = staticinvoke <weka.core.Statistics: double polevl(double,double[],int)>(y2, $r2, 4);

        $d1 = y2 * $d0;

        $r3 = <weka.core.Statistics: double[] Q0>;

        $d2 = staticinvoke <weka.core.Statistics: double p1evl(double,double[],int)>(y2, $r3, 8);

        $d3 = $d1 / $d2;

        $d4 = y#30 * $d3;

        x#49 = y#30 + $d4;

        x#53 = x#49 * s2pi;

        return x#53;

     label4:
        $d5 = staticinvoke <java.lang.Math: double log(double)>(y#16);

        $d6 = -2.0 * $d5;

        x#60 = staticinvoke <java.lang.Math: double sqrt(double)>($d6);

        $d7 = staticinvoke <java.lang.Math: double log(double)>(x#60);

        $d8 = $d7 / x#60;

        x0 = x#60 - $d8;

        z = 1.0 / x#60;

        $b4 = x#60 cmpg 8.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b4);

        if $b4 >= 0 goto label5;

        $r4 = <weka.core.Statistics: double[] P1>;

        $d9 = staticinvoke <weka.core.Statistics: double polevl(double,double[],int)>(z, $r4, 8);

        $d10 = z * $d9;

        $r5 = <weka.core.Statistics: double[] Q1>;

        $d11 = staticinvoke <weka.core.Statistics: double p1evl(double,double[],int)>(z, $r5, 8);

        x1#84 = $d10 / $d11;

        goto label6;

     label5:
        $r6 = <weka.core.Statistics: double[] P2>;

        $d12 = staticinvoke <weka.core.Statistics: double polevl(double,double[],int)>(z, $r6, 8);

        $d13 = z * $d12;

        $r7 = <weka.core.Statistics: double[] Q2>;

        $d14 = staticinvoke <weka.core.Statistics: double p1evl(double,double[],int)>(z, $r7, 8);

        x1#84 = $d13 / $d14;

     label6:
        x#99 = x0 - x1#84;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(code#14);

        if code#14 == 0 goto label7;

        x#99 = neg x#99;

     label7:
        return x#99;
    }


