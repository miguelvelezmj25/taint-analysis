    protected void <init>(org.w3c.dom.Element, weka.core.pmml.MiningSchema) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs this;
        org.w3c.dom.Element outputs, outputE, $r13, $r17, $r19;
        weka.core.pmml.MiningSchema miningSchema;
        int vals, index, $i0, $i1, $i2, i#38, $i3, $i5, $i6;
        org.w3c.dom.NodeList outputL, contL, discL;
        org.w3c.dom.Node outputN, normContNode, normDiscNode;
        java.lang.String attName, attValue, $r10, $r27, $r29;
        weka.core.Attribute dummyTargetDef, $r2, $r3, $r4, $r11, $r14, $r20, $r26;
        java.util.ArrayList dummyFieldDefs, $r15;
        weka.core.pmml.FieldMetaInfo$Optype $r0;
        weka.core.Instances $r1;
        boolean $z0, $z1;
        java.lang.String[] $r5, $r7, $r9;
        int[] $r6, $r30;
        java.lang.Exception $r8, $r12, $r18, $r21;
        short $s4;
        weka.core.pmml.NormContinuous $r16;
        java.lang.StringBuilder $r22, $r23, $r24, $r25, $r28;

        this := @this: weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs;

        outputs := @parameter0: org.w3c.dom.Element;

        miningSchema := @parameter1: weka.core.pmml.MiningSchema;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs: java.lang.String[] m_outputNeurons> = null;

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs: int[] m_categoricalIndexes> = null;

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs: weka.core.Attribute m_classAttribute> = null;

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs: weka.core.pmml.NormContinuous m_regressionMapping> = null;

        $r1 = virtualinvoke miningSchema.<weka.core.pmml.MiningSchema: weka.core.Instances getMiningSchemaAsInstances()>();

        $r2 = virtualinvoke $r1.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs: weka.core.Attribute m_classAttribute> = $r2;

        $r3 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs: weka.core.Attribute m_classAttribute>;

        $z0 = virtualinvoke $r3.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label01;

        $i0 = 1;

        goto label02;

     label01:
        $r4 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs: weka.core.Attribute m_classAttribute>;

        $i0 = virtualinvoke $r4.<weka.core.Attribute: int numValues()>();

     label02:
        vals = $i0;

        $r5 = newarray (java.lang.String)[vals];

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs: java.lang.String[] m_outputNeurons> = $r5;

        $r6 = newarray (int)[vals];

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs: int[] m_categoricalIndexes> = $r6;

        outputL = interfaceinvoke outputs.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("NeuralOutput");

        $i1 = interfaceinvoke outputL.<org.w3c.dom.NodeList: int getLength()>();

        $r7 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs: java.lang.String[] m_outputNeurons>;

        $i2 = lengthof $r7;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i1 == $i2 goto label03;

        $r8 = new java.lang.Exception;

        specialinvoke $r8.<java.lang.Exception: void <init>(java.lang.String)>("[NeuralOutputs] the number of neural outputs does not match the number expected!");

        throw $r8;

     label03:
        i#38 = 0;

     label04:
        $i3 = interfaceinvoke outputL.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#38);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if i#38 >= $i3 goto label10;

        outputN = interfaceinvoke outputL.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i#38);

        $s4 = interfaceinvoke outputN.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s4);

        if $s4 != 1 goto label09;

        outputE = (org.w3c.dom.Element) outputN;

        $r9 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs: java.lang.String[] m_outputNeurons>;

        $r10 = interfaceinvoke outputE.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("outputNeuron");

        $r9[i#38] = $r10;

        $r11 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs: weka.core.Attribute m_classAttribute>;

        $z1 = virtualinvoke $r11.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label06;

        contL = interfaceinvoke outputE.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("NormContinuous");

        $i5 = interfaceinvoke contL.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i5 == 1 goto label05;

        $r12 = new java.lang.Exception;

        specialinvoke $r12.<java.lang.Exception: void <init>(java.lang.String)>("[NeuralOutputs] Should be exactly one norm continuous element for numeric class!");

        throw $r12;

     label05:
        normContNode = interfaceinvoke contL.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        $r13 = (org.w3c.dom.Element) normContNode;

        attName = interfaceinvoke $r13.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("field");

        $r14 = new weka.core.Attribute;

        specialinvoke $r14.<weka.core.Attribute: void <init>(java.lang.String)>(attName);

        dummyTargetDef = $r14;

        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        dummyFieldDefs = $r15;

        virtualinvoke dummyFieldDefs.<java.util.ArrayList: boolean add(java.lang.Object)>(dummyTargetDef);

        $r16 = new weka.core.pmml.NormContinuous;

        $r17 = (org.w3c.dom.Element) normContNode;

        $r0 = <weka.core.pmml.FieldMetaInfo$Optype: weka.core.pmml.FieldMetaInfo$Optype CONTINUOUS>;

        specialinvoke $r16.<weka.core.pmml.NormContinuous: void <init>(org.w3c.dom.Element,weka.core.pmml.FieldMetaInfo$Optype,java.util.ArrayList)>($r17, $r0, dummyFieldDefs);

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs: weka.core.pmml.NormContinuous m_regressionMapping> = $r16;

        goto label10;

     label06:
        discL = interfaceinvoke outputE.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("NormDiscrete");

        $i6 = interfaceinvoke discL.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if $i6 == 1 goto label07;

        $r18 = new java.lang.Exception;

        specialinvoke $r18.<java.lang.Exception: void <init>(java.lang.String)>("[NeuralOutputs] Should be only one norm discrete element per derived field/neural output for a nominal class!");

        throw $r18;

     label07:
        normDiscNode = interfaceinvoke discL.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        $r19 = (org.w3c.dom.Element) normDiscNode;

        attValue = interfaceinvoke $r19.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("value");

        $r20 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs: weka.core.Attribute m_classAttribute>;

        index = virtualinvoke $r20.<weka.core.Attribute: int indexOfValue(java.lang.String)>(attValue);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(index);

        if index >= 0 goto label08;

        $r21 = new java.lang.Exception;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[NeuralOutputs] Can\'t find specified target value ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(attValue);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in class attribute ");

        $r26 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs: weka.core.Attribute m_classAttribute>;

        $r27 = virtualinvoke $r26.<weka.core.Attribute: java.lang.String name()>();

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.Exception: void <init>(java.lang.String)>($r29);

        throw $r21;

     label08:
        $r30 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs: int[] m_categoricalIndexes>;

        $r30[i#38] = index;

     label09:
        i#38 = i#38 + 1;

        goto label04;

     label10:
        return;
    }

    protected void getOuput(java.util.HashMap, double[]) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs this;
        java.util.HashMap incoming;
        double[] preds;
        java.lang.Double neuronOut;
        double min, $d0, $d1, $d2, $d3, $d4;
        int $i0, $i1, $i2, $i3, i#25, $i4, $i5, $i6, i#83, $i8;
        java.lang.String[] $r0, $r6, $r10, $r11, $r17;
        java.lang.Exception $r1, $r14;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r7, $r8, $r15, $r16, $r19, $r20;
        java.lang.String $r9, $r12, $r18, $r21;
        java.lang.Object $r13;
        weka.core.Attribute $r22, $r25;
        boolean $z0, $z1;
        weka.core.pmml.NormContinuous $r23;
        int[] $r24;
        byte $b7;

        this := @this: weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs;

        incoming := @parameter0: java.util.HashMap;

        preds := @parameter1: double[];

        $i0 = lengthof preds;

        $r0 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs: java.lang.String[] m_outputNeurons>;

        $i1 = lengthof $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i0 == $i1 goto label1;

        $r1 = new java.lang.Exception;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[NeuralOutputs] Incorrect number of predictions requested: ");

        $i2 = lengthof preds;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requested, ");

        $r6 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs: java.lang.String[] m_outputNeurons>;

        $i3 = lengthof $r6;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" expected");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.Exception: void <init>(java.lang.String)>($r9);

        throw $r1;

     label1:
        i#25 = 0;

     label2:
        $r10 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs: java.lang.String[] m_outputNeurons>;

        $i4 = lengthof $r10;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#25);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if i#25 >= $i4 goto label6;

        $r11 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs: java.lang.String[] m_outputNeurons>;

        $r12 = $r11[i#25];

        $r13 = virtualinvoke incoming.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r12);

        neuronOut = (java.lang.Double) $r13;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(neuronOut);

        if neuronOut != null goto label3;

        $r14 = new java.lang.Exception;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[NeuralOutputs] Unable to find output neuron ");

        $r17 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs: java.lang.String[] m_outputNeurons>;

        $r18 = $r17[i#25];

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in the incoming HashMap!!");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.Exception: void <init>(java.lang.String)>($r21);

        throw $r14;

     label3:
        $r22 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs: weka.core.Attribute m_classAttribute>;

        $z0 = virtualinvoke $r22.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label4;

        $d0 = virtualinvoke neuronOut.<java.lang.Double: double doubleValue()>();

        preds[0] = $d0;

        $r23 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs: weka.core.pmml.NormContinuous m_regressionMapping>;

        $d1 = virtualinvoke $r23.<weka.core.pmml.NormContinuous: double getResultInverse(double[])>(preds);

        preds[0] = $d1;

        goto label5;

     label4:
        $r24 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs: int[] m_categoricalIndexes>;

        $i5 = $r24[i#25];

        $d2 = virtualinvoke neuronOut.<java.lang.Double: double doubleValue()>();

        preds[$i5] = $d2;

     label5:
        i#25 = i#25 + 1;

        goto label2;

     label6:
        $r25 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs: weka.core.Attribute m_classAttribute>;

        $z1 = virtualinvoke $r25.<weka.core.Attribute: boolean isNominal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label9;

        $i6 = staticinvoke <weka.core.Utils: int minIndex(double[])>(preds);

        min = preds[$i6];

        $b7 = min cmpg 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b7);

        if $b7 >= 0 goto label8;

        i#83 = 0;

     label7:
        $i8 = lengthof preds;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#83);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if i#83 >= $i8 goto label8;

        $d3 = preds[i#83];

        $d4 = $d3 - min;

        preds[i#83] = $d4;

        i#83 = i#83 + 1;

        goto label7;

     label8:
        staticinvoke <weka.core.Utils: void normalize(double[])>(preds);

     label9:
        return;
    }

    public java.lang.String toString()
    {
        weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs this;
        java.lang.StringBuffer temp, $r0;
        int i#4, $i0, $i1;
        java.lang.String[] $r1, $r4;
        java.lang.StringBuilder $r2, $r3, $r6, $r7, $r12, $r14, $r15, $r18, $r21, $r22, $r26, $r27;
        java.lang.String $r5, $r8, $r16, $r20, $r25, $r28, $r30;
        weka.core.Attribute $r11, $r19, $r23;
        boolean $z0;
        weka.core.pmml.NormContinuous $r13;
        int[] $r24;

        this := @this: weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        temp = $r0;

        i#4 = 0;

     label1:
        $r1 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs: java.lang.String[] m_outputNeurons>;

        $i0 = lengthof $r1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#4 >= $i0 goto label4;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Output neuron (");

        $r4 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs: java.lang.String[] m_outputNeurons>;

        $r5 = $r4[i#4];

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")\n");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("mapping:\n");

        $r11 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs: weka.core.Attribute m_classAttribute>;

        $z0 = virtualinvoke $r11.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs: weka.core.pmml.NormContinuous m_regressionMapping>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        goto label3;

     label2:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs: weka.core.Attribute m_classAttribute>;

        $r20 = virtualinvoke $r19.<weka.core.Attribute: java.lang.String name()>();

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $r23 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs: weka.core.Attribute m_classAttribute>;

        $r24 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralOutputs: int[] m_categoricalIndexes>;

        $i1 = $r24[i#4];

        $r25 = virtualinvoke $r23.<weka.core.Attribute: java.lang.String value(int)>($i1);

        $r26 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r28);

     label3:
        i#4 = i#4 + 1;

        goto label1;

     label4:
        $r30 = virtualinvoke temp.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r30;
    }


