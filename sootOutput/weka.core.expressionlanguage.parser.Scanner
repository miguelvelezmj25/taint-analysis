    static void <clinit>()
    {
        int[] $r0, $r2, $r3, $r4, $r6;
        char[] $r1;
        java.lang.String[] $r5;

        $r0 = newarray (int)[6];

        $r0[0] = 0;

        $r0[1] = 0;

        $r0[2] = 1;

        $r0[3] = 1;

        $r0[4] = 2;

        $r0[5] = 2;

        <weka.core.expressionlanguage.parser.Scanner: int[] ZZ_LEXSTATE> = $r0;

        $r1 = newarray (char)[128];

        $r1[0] = 0;

        $r1[1] = 0;

        $r1[2] = 0;

        $r1[3] = 0;

        $r1[4] = 0;

        $r1[5] = 0;

        $r1[6] = 0;

        $r1[7] = 0;

        $r1[8] = 0;

        $r1[9] = 35;

        $r1[10] = 38;

        $r1[11] = 35;

        $r1[12] = 35;

        $r1[13] = 35;

        $r1[14] = 0;

        $r1[15] = 0;

        $r1[16] = 0;

        $r1[17] = 0;

        $r1[18] = 0;

        $r1[19] = 0;

        $r1[20] = 0;

        $r1[21] = 0;

        $r1[22] = 0;

        $r1[23] = 0;

        $r1[24] = 0;

        $r1[25] = 0;

        $r1[26] = 0;

        $r1[27] = 0;

        $r1[28] = 0;

        $r1[29] = 0;

        $r1[30] = 0;

        $r1[31] = 0;

        $r1[32] = 35;

        $r1[33] = 26;

        $r1[34] = 11;

        $r1[35] = 0;

        $r1[36] = 0;

        $r1[37] = 0;

        $r1[38] = 21;

        $r1[39] = 12;

        $r1[40] = 13;

        $r1[41] = 14;

        $r1[42] = 18;

        $r1[43] = 16;

        $r1[44] = 15;

        $r1[45] = 17;

        $r1[46] = 2;

        $r1[47] = 19;

        $r1[48] = 1;

        $r1[49] = 1;

        $r1[50] = 1;

        $r1[51] = 1;

        $r1[52] = 1;

        $r1[53] = 1;

        $r1[54] = 1;

        $r1[55] = 1;

        $r1[56] = 1;

        $r1[57] = 1;

        $r1[58] = 0;

        $r1[59] = 0;

        $r1[60] = 28;

        $r1[61] = 27;

        $r1[62] = 29;

        $r1[63] = 0;

        $r1[64] = 0;

        $r1[65] = 34;

        $r1[66] = 34;

        $r1[67] = 34;

        $r1[68] = 34;

        $r1[69] = 34;

        $r1[70] = 34;

        $r1[71] = 34;

        $r1[72] = 34;

        $r1[73] = 34;

        $r1[74] = 34;

        $r1[75] = 34;

        $r1[76] = 34;

        $r1[77] = 34;

        $r1[78] = 34;

        $r1[79] = 34;

        $r1[80] = 34;

        $r1[81] = 34;

        $r1[82] = 34;

        $r1[83] = 34;

        $r1[84] = 34;

        $r1[85] = 34;

        $r1[86] = 34;

        $r1[87] = 34;

        $r1[88] = 34;

        $r1[89] = 34;

        $r1[90] = 34;

        $r1[91] = 0;

        $r1[92] = 36;

        $r1[93] = 0;

        $r1[94] = 20;

        $r1[95] = 34;

        $r1[96] = 0;

        $r1[97] = 8;

        $r1[98] = 37;

        $r1[99] = 34;

        $r1[100] = 23;

        $r1[101] = 6;

        $r1[102] = 7;

        $r1[103] = 31;

        $r1[104] = 34;

        $r1[105] = 30;

        $r1[106] = 34;

        $r1[107] = 34;

        $r1[108] = 9;

        $r1[109] = 34;

        $r1[110] = 22;

        $r1[111] = 25;

        $r1[112] = 33;

        $r1[113] = 34;

        $r1[114] = 4;

        $r1[115] = 10;

        $r1[116] = 3;

        $r1[117] = 5;

        $r1[118] = 34;

        $r1[119] = 34;

        $r1[120] = 32;

        $r1[121] = 34;

        $r1[122] = 34;

        $r1[123] = 0;

        $r1[124] = 24;

        $r1[125] = 0;

        $r1[126] = 0;

        $r1[127] = 0;

        <weka.core.expressionlanguage.parser.Scanner: char[] ZZ_CMAP> = $r1;

        $r2 = staticinvoke <weka.core.expressionlanguage.parser.Scanner: int[] zzUnpackAction()>();

        <weka.core.expressionlanguage.parser.Scanner: int[] ZZ_ACTION> = $r2;

        $r3 = staticinvoke <weka.core.expressionlanguage.parser.Scanner: int[] zzUnpackRowMap()>();

        <weka.core.expressionlanguage.parser.Scanner: int[] ZZ_ROWMAP> = $r3;

        $r4 = staticinvoke <weka.core.expressionlanguage.parser.Scanner: int[] zzUnpackTrans()>();

        <weka.core.expressionlanguage.parser.Scanner: int[] ZZ_TRANS> = $r4;

        $r5 = newarray (java.lang.String)[3];

        $r5[0] = "Unkown internal scanner error";

        $r5[1] = "Error: could not match input";

        $r5[2] = "Error: pushback value was too large";

        <weka.core.expressionlanguage.parser.Scanner: java.lang.String[] ZZ_ERROR_MSG> = $r5;

        $r6 = staticinvoke <weka.core.expressionlanguage.parser.Scanner: int[] zzUnpackAttribute()>();

        <weka.core.expressionlanguage.parser.Scanner: int[] ZZ_ATTRIBUTE> = $r6;

        return;
    }

    private static int[] zzUnpackAttribute()
    {
        int[] result;
        byte offset#4;
        int offset#7;

        result = newarray (int)[63];

        offset#4 = 0;

        offset#7 = staticinvoke <weka.core.expressionlanguage.parser.Scanner: int zzUnpackAttribute(java.lang.String,int,int[])>("\u0003\u0000\u0001\t\u0006\u0001\u000b\t\u0001\u0001\u0001\t\u0001\u0001\u0002\t\u0003\u0001\u0003\t\u0008\u0001\u0002\t\u0001\u0001\t\t\u000b\u0001", offset#4, result);

        return result;
    }

    private static int[] zzUnpackTrans()
    {
        int[] result;
        byte offset#4;
        int offset#7;

        result = newarray (int)[1092];

        offset#4 = 0;

        offset#7 = staticinvoke <weka.core.expressionlanguage.parser.Scanner: int zzUnpackTrans(java.lang.String,int,int[])>("\u0001\u0004\u0001\u0005\u0001\u0004\u0001\u0006\u0001\u0007\u0002\u0008\u0001\t\u0001\n\u0002\u0008\u0001\u000b\u0001\f\u0001\r\u0001\u000e\u0001\u000f\u0001\u0010\u0001\u0011\u0001\u0012\u0001\u0013\u0001\u0014\u0001\u0015\u0001\u0016\u0001\u0008\u0001\u0017\u0001\u0018\u0001\u0019\u0001\u001a\u0001\u001b\u0001\u001c\u0001\u001d\u0004\u0008\u0001\u001e\u0001\u0004\u0001\u0008\u0001\u001e\u000b\u001f\u0001 \u0018\u001f\u0001!\u0001\u001f\u0001\u0004\f\u001f\u0001 \u0017\u001f\u0001!\u0001\u001f\u0001\u0004(\u0000\u0001\u0005\u0001\"%\u0000\u0001\u0008\u0001\u0000\u0001\u0008\u0001#\u0006\u0008\u000b\u0000\u0002\u0008\u0001\u0000\u0001\u0008\u0004\u0000\u0005\u0008\u0002\u0000\u0001\u0008\u0002\u0000\u0001\u0008\u0001\u0000\u0003\u0008\u0001$\u0004\u0008\u000b\u0000\u0002\u0008\u0001\u0000\u0001\u0008\u0004\u0000\u0005\u0008\u0002\u0000\u0001\u0008\u0002\u0000\u0001\u0008\u0001\u0000\u0008\u0008\u000b\u0000\u0002\u0008\u0001\u0000\u0001\u0008\u0004\u0000\u0005\u0008\u0002\u0000\u0001\u0008\u0002\u0000\u0001\u0008\u0001\u0000\u0005\u0008\u0001%\u0002\u0008\u000b\u0000\u0002\u0008\u0001\u0000\u0001\u0008\u0004\u0000\u0005\u0008\u0002\u0000\u0001\u0008\u0002\u0000\u0001\u0008\u0001\u0000\u0008\u0008\u000b\u0000\u0001&\u0001\u0008\u0001\u0000\u0001\u0008\u0004\u0000\u0005\u0008\u0002\u0000\u0001\u0008\u0002\u0000\u0001\u0008\u0001\u0000\u0008\u0008\u000b\u0000\u0002\u0008\u0001\u0000\u0001\'\u0004\u0000\u0005\u0008\u0002\u0000\u0001\u0008\u0002\u0000\u0001\u0008\u0001\u0000\u0001\u0008\u0001(\u0006\u0008\u000b\u0000\u0002\u0008\u0001\u0000\u0001\u0008\u0004\u0000\u0005\u0008\u0002\u0000\u0001\u0008\u001c\u0000\u0001)&\u0000\u0001*\f\u0000\u0001\u0008\u0001\u0000\u0007\u0008\u0001+\u000b\u0000\u0002\u0008\u0001\u0000\u0001\u0008\u0004\u0000\u0005\u0008\u0002\u0000\u0001\u0008\u0001\u0000\u0003,\u0001-\u0001.\u0002,\u0001/\u0003,\u00010\u00011\t,\u00012\r,\u00013\u00014\u0002\u0000\u0001\"&\u0000\u0001\u0008\u0001\u0000\u0002\u0008\u00015\u0005\u0008\u000b\u0000\u0002\u0008\u0001\u0000\u0001\u0008\u0004\u0000\u0005\u0008\u0002\u0000\u0001\u0008\u0002\u0000\u0001\u0008\u0001\u0000\u0008\u0008\u000b\u0000\u0002\u0008\u0001\u0000\u0001\u0008\u0004\u0000\u0001\u0008\u00016\u0003\u0008\u0002\u0000\u0001\u0008\u0002\u0000\u0001\u0008\u0001\u0000\u0006\u0008\u00017\u0001\u0008\u000b\u0000\u0002\u0008\u0001\u0000\u0001\u0008\u0004\u0000\u0005\u0008\u0002\u0000\u0001\u0008\u0002\u0000\u0001\u0008\u0001\u0000\u0008\u0008\u000b\u0000\u0001\u0008\u00018\u0001\u0000\u0001\u0008\u0004\u0000\u0005\u0008\u0002\u0000\u0001\u0008\u0002\u0000\u0001\u0008\u0001\u0000\u00019\u0007\u0008\u000b\u0000\u0002\u0008\u0001\u0000\u0001\u0008\u0004\u0000\u0005\u0008\u0002\u0000\u0001\u0008\u0002\u0000\u0001\u0008\u0001\u0000\u0003\u0008\u0001:\u0004\u0008\u000b\u0000\u0002\u0008\u0001\u0000\u0001\u0008\u0004\u0000\u0005\u0008\u0002\u0000\u0001\u0008\u0002\u0000\u0001\u0008\u0001\u0000\u0003\u0008\u0001;\u0004\u0008\u000b\u0000\u0002\u0008\u0001\u0000\u0001\u0008\u0004\u0000\u0005\u0008\u0002\u0000\u0001\u0008\u0002\u0000\u0001\u0008\u0001\u0000\u0007\u0008\u0001<\u000b\u0000\u0002\u0008\u0001\u0000\u0001\u0008\u0004\u0000\u0005\u0008\u0002\u0000\u0001\u0008\u0002\u0000\u0001\u0008\u0001\u0000\u0008\u0008\u000b\u0000\u0002\u0008\u0001\u0000\u0001\u0008\u0004\u0000\u0002\u0008\u0001=\u0002\u0008\u0002\u0000\u0001\u0008\u0002\u0000\u0001\u0008\u0001\u0000\u0003\u0008\u0001>\u0004\u0008\u000b\u0000\u0002\u0008\u0001\u0000\u0001\u0008\u0004\u0000\u0005\u0008\u0002\u0000\u0001\u0008\u0002\u0000\u0001\u0008\u0001\u0000\u0008\u0008\u000b\u0000\u0002\u0008\u0001\u0000\u0001\u0008\u0004\u0000\u0003\u0008\u0001?\u0001\u0008\u0002\u0000\u0001\u0008\u0001\u0000", offset#4, result);

        return result;
    }

    private static int[] zzUnpackRowMap()
    {
        int[] result;
        byte offset#4;
        int offset#7;

        result = newarray (int)[63];

        offset#4 = 0;

        offset#7 = staticinvoke <weka.core.expressionlanguage.parser.Scanner: int zzUnpackRowMap(java.lang.String,int,int[])>("\u0000\u0000\u0000\'\u0000N\u0000u\u0000\u009c\u0000\u00c3\u0000\u00ea\u0000\u0111\u0000\u0138\u0000\u015f\u0000u\u0000u\u0000u\u0000u\u0000u\u0000u\u0000u\u0000u\u0000u\u0000u\u0000u\u0000\u0186\u0000u\u0000\u01ad\u0000u\u0000u\u0000\u01d4\u0000\u01fb\u0000\u0222\u0000u\u0000u\u0000u\u0000\u0249\u0000\u0270\u0000\u0297\u0000\u02be\u0000\u02e5\u0000\u030c\u0000\u0333\u0000\u0111\u0000u\u0000u\u0000\u0111\u0000u\u0000u\u0000u\u0000u\u0000u\u0000u\u0000u\u0000u\u0000u\u0000\u035a\u0000\u0381\u0000\u03a8\u0000\u0111\u0000\u0111\u0000\u0111\u0000\u03cf\u0000\u03f6\u0000\u041d\u0000\u0111\u0000\u0111", offset#4, result);

        return result;
    }

    private static int[] zzUnpackAction()
    {
        int[] result;
        byte offset#4;
        int offset#7;

        result = newarray (int)[63];

        offset#4 = 0;

        offset#7 = staticinvoke <weka.core.expressionlanguage.parser.Scanner: int zzUnpackAction(java.lang.String,int,int[])>("\u0003\u0000\u0001\u0001\u0001\u0002\u0005\u0003\u0001\u0004\u0001\u0005\u0001\u0006\u0001\u0007\u0001\u0008\u0001\t\u0001\n\u0001\u000b\u0001\f\u0001\r\u0001\u000e\u0001\u0003\u0001\u000f\u0001\u0003\u0001\u0010\u0001\u0011\u0001\u0012\u0001\u0013\u0001\u0003\u0001\u0014\u0001\u0015\u0001\u0016\u0001\u0015\u0001\u0002\u0005\u0003\u0001\u000f\u0001\u0017\u0001\u0018\u0001\u0019\u0001\u001a\u0001\u001b\u0001\u001c\u0001\u001d\u0001\u001e\u0001\u001f\u0001 \u0001!\u0001\"\u0003\u0003\u0001\u000e\u0001\u0010\u0001#\u0003\u0003\u0001$\u0001%", offset#4, result);

        return result;
    }

    private static int zzUnpackAttribute(java.lang.String, int, int[])
    {
        java.lang.String packed;
        int offset, l, i#2, j#4, i#11, count#13, $i0;
        int[] result;
        char value;

        packed := @parameter0: java.lang.String;

        offset := @parameter1: int;

        result := @parameter2: int[];

        i#2 = 0;

        j#4 = offset;

        l = virtualinvoke packed.<java.lang.String: int length()>();

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l);

        if i#2 >= l goto label3;

        i#11 = i#2 + 1;

        count#13 = virtualinvoke packed.<java.lang.String: char charAt(int)>(i#2);

        i#2 = i#11 + 1;

        value = virtualinvoke packed.<java.lang.String: char charAt(int)>(i#11);

     label2:
        $i0 = j#4;

        j#4 = j#4 + 1;

        result[$i0] = value;

        count#13 = count#13 + -1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count#13);

        if count#13 > 0 goto label2;

        goto label1;

     label3:
        return j#4;
    }

    private static int zzUnpackTrans(java.lang.String, int, int[])
    {
        java.lang.String packed;
        int offset, l, i#2, j#4, i#11, count#13, value#18, $i0;
        int[] result;
        char value#17;

        packed := @parameter0: java.lang.String;

        offset := @parameter1: int;

        result := @parameter2: int[];

        i#2 = 0;

        j#4 = offset;

        l = virtualinvoke packed.<java.lang.String: int length()>();

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l);

        if i#2 >= l goto label3;

        i#11 = i#2 + 1;

        count#13 = virtualinvoke packed.<java.lang.String: char charAt(int)>(i#2);

        i#2 = i#11 + 1;

        value#17 = virtualinvoke packed.<java.lang.String: char charAt(int)>(i#11);

        value#18 = value#17 + -1;

     label2:
        $i0 = j#4;

        j#4 = j#4 + 1;

        result[$i0] = value#18;

        count#13 = count#13 + -1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count#13);

        if count#13 > 0 goto label2;

        goto label1;

     label3:
        return j#4;
    }

    private static int zzUnpackRowMap(java.lang.String, int, int[])
    {
        java.lang.String packed;
        int offset, l, high, i#2, j#4, i#11, $i1, $i3;
        int[] result;
        char $c0, $c2;

        packed := @parameter0: java.lang.String;

        offset := @parameter1: int;

        result := @parameter2: int[];

        i#2 = 0;

        j#4 = offset;

        l = virtualinvoke packed.<java.lang.String: int length()>();

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l);

        if i#2 >= l goto label2;

        i#11 = i#2 + 1;

        $c0 = virtualinvoke packed.<java.lang.String: char charAt(int)>(i#2);

        high = $c0 << 16;

        $i1 = j#4;

        j#4 = j#4 + 1;

        i#2 = i#11 + 1;

        $c2 = virtualinvoke packed.<java.lang.String: char charAt(int)>(i#11);

        $i3 = high | $c2;

        result[$i1] = $i3;

        goto label1;

     label2:
        return j#4;
    }

    private static int zzUnpackAction(java.lang.String, int, int[])
    {
        java.lang.String packed;
        int offset, l, i#2, j#4, i#11, count#13, $i0;
        int[] result;
        char value;

        packed := @parameter0: java.lang.String;

        offset := @parameter1: int;

        result := @parameter2: int[];

        i#2 = 0;

        j#4 = offset;

        l = virtualinvoke packed.<java.lang.String: int length()>();

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l);

        if i#2 >= l goto label3;

        i#11 = i#2 + 1;

        count#13 = virtualinvoke packed.<java.lang.String: char charAt(int)>(i#2);

        i#2 = i#11 + 1;

        value = virtualinvoke packed.<java.lang.String: char charAt(int)>(i#11);

     label2:
        $i0 = j#4;

        j#4 = j#4 + 1;

        result[$i0] = value;

        count#13 = count#13 + -1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count#13);

        if count#13 > 0 goto label2;

        goto label1;

     label3:
        return j#4;
    }

    public void <init>(java.io.Reader)
    {
        weka.core.expressionlanguage.parser.Scanner this;
        java.io.Reader in;
        char[] $r0;
        java.lang.StringBuilder $r1;

        this := @this: weka.core.expressionlanguage.parser.Scanner;

        in := @parameter0: java.io.Reader;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<weka.core.expressionlanguage.parser.Scanner: int zzLexicalState> = 0;

        $r0 = newarray (char)[16384];

        this.<weka.core.expressionlanguage.parser.Scanner: char[] zzBuffer> = $r0;

        this.<weka.core.expressionlanguage.parser.Scanner: boolean zzAtBOL> = 1;

        this.<weka.core.expressionlanguage.parser.Scanner: int zzFinalHighSurrogate> = 0;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        this.<weka.core.expressionlanguage.parser.Scanner: java.lang.StringBuilder string> = $r1;

        this.<weka.core.expressionlanguage.parser.Scanner: java.io.Reader zzReader> = in;

        return;
    }


