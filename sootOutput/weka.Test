    public static void main(java.lang.String[])
    {
        weka.classifiers.rules.PART part, $r25;
        java.lang.String[] args#1, args#78;
        java.io.PrintStream $r0;
        java.lang.String $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, batchSize#104;
        java.lang.Boolean $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, binarySplits#88, doNotMakeSplitPointActualValue#92, reducedErrorPruning#96, unpruned#100, useMDL#102, noCheckCapabilities#106, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35;
        byte folds#86, minNumObj#94, seed#98, numDecimal#108;
        float confidenceFactor#90;

        args#1 := @parameter0: java.lang.String[];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void init()>();

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Original");

        $r1 = args#1[0];

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r1);

        $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

        $z1 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getOptionFOLDS(boolean)>($z0);

        <weka.Test: boolean FOLDS> = $z1;

        $r3 = args#1[1];

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r3);

        $z2 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        $z3 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getOptionBINARYSPLITS(boolean)>($z2);

        <weka.Test: boolean BINARYSPLITS> = $z3;

        $r5 = args#1[2];

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r5);

        $z4 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        $z5 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getOptionCONFIDENCEFACTOR(boolean)>($z4);

        <weka.Test: boolean CONFIDENCEFACTOR> = $z5;

        $r7 = args#1[3];

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r7);

        $z6 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>();

        $z7 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getOptionDONOTMAKESPLITPOINTACTUALVALUE(boolean)>($z6);

        <weka.Test: boolean DONOTMAKESPLITPOINTACTUALVALUE> = $z7;

        $r9 = args#1[4];

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r9);

        $z8 = virtualinvoke $r10.<java.lang.Boolean: boolean booleanValue()>();

        $z9 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getOptionMINNUM(boolean)>($z8);

        <weka.Test: boolean MINNUM> = $z9;

        $r11 = args#1[5];

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r11);

        $z10 = virtualinvoke $r12.<java.lang.Boolean: boolean booleanValue()>();

        $z11 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getOptionREDUCEDERRORPRUNING(boolean)>($z10);

        <weka.Test: boolean REDUCEDERRORPRUNING> = $z11;

        $r13 = args#1[6];

        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r13);

        $z12 = virtualinvoke $r14.<java.lang.Boolean: boolean booleanValue()>();

        $z13 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getOptionSEED(boolean)>($z12);

        <weka.Test: boolean SEED> = $z13;

        $r15 = args#1[7];

        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r15);

        $z14 = virtualinvoke $r16.<java.lang.Boolean: boolean booleanValue()>();

        $z15 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getOptionUNPRUNED(boolean)>($z14);

        <weka.Test: boolean UNPRUNED> = $z15;

        $r17 = args#1[8];

        $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r17);

        $z16 = virtualinvoke $r18.<java.lang.Boolean: boolean booleanValue()>();

        $z17 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getOptionUSEMDL(boolean)>($z16);

        <weka.Test: boolean USEMDL> = $z17;

        $r19 = args#1[9];

        $r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r19);

        $z18 = virtualinvoke $r20.<java.lang.Boolean: boolean booleanValue()>();

        $z19 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getOptionBATCHSIZE(boolean)>($z18);

        <weka.Test: boolean BATCHSIZE> = $z19;

        $r21 = args#1[10];

        $r22 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r21);

        $z20 = virtualinvoke $r22.<java.lang.Boolean: boolean booleanValue()>();

        $z21 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getOptionNOCHECKCAPABILITIES(boolean)>($z20);

        <weka.Test: boolean NOCHECKCAPABILITIES> = $z21;

        $r23 = args#1[11];

        $r24 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r23);

        $z22 = virtualinvoke $r24.<java.lang.Boolean: boolean booleanValue()>();

        $z23 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getOptionNUMDECIMAL(boolean)>($z22);

        <weka.Test: boolean NUMDECIMAL> = $z23;

        args#78 = newarray (java.lang.String)[2];

        args#78[0] = "-t";

        args#78[1] = "/Users/mvelezce/Documents/Programming/Machine Learning/Projects/turtlebot-configurations-validity/datasets/dataset_cross_validation.arff";

        folds#86 = 3;

        binarySplits#88 = 0;

        confidenceFactor#90 = 0.25F;

        doNotMakeSplitPointActualValue#92 = 0;

        minNumObj#94 = 2;

        reducedErrorPruning#96 = 0;

        seed#98 = 1;

        unpruned#100 = 0;

        useMDL#102 = 0;

        batchSize#104 = "100";

        noCheckCapabilities#106 = 0;

        numDecimal#108 = 2;

        $z24 = <weka.Test: boolean FOLDS>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z24);

        if $z24 == 0 goto label01;

        folds#86 = 10;

     label01:
        $z25 = <weka.Test: boolean BINARYSPLITS>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z25);

        if $z25 == 0 goto label02;

        binarySplits#88 = 1;

     label02:
        $z26 = <weka.Test: boolean CONFIDENCEFACTOR>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z26);

        if $z26 == 0 goto label03;

        confidenceFactor#90 = 0.25F;

     label03:
        $z27 = <weka.Test: boolean DONOTMAKESPLITPOINTACTUALVALUE>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z27);

        if $z27 == 0 goto label04;

        doNotMakeSplitPointActualValue#92 = 1;

     label04:
        $z28 = <weka.Test: boolean MINNUM>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z28);

        if $z28 == 0 goto label05;

        minNumObj#94 = 10;

     label05:
        $z29 = <weka.Test: boolean REDUCEDERRORPRUNING>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z29);

        if $z29 == 0 goto label06;

        reducedErrorPruning#96 = 1;

     label06:
        $z30 = <weka.Test: boolean SEED>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z30);

        if $z30 == 0 goto label07;

        seed#98 = 10;

     label07:
        $z31 = <weka.Test: boolean UNPRUNED>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z31);

        if $z31 == 0 goto label08;

        unpruned#100 = 1;

     label08:
        $z32 = <weka.Test: boolean USEMDL>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z32);

        if $z32 == 0 goto label09;

        useMDL#102 = 1;

     label09:
        $z33 = <weka.Test: boolean BATCHSIZE>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z33);

        if $z33 == 0 goto label10;

        batchSize#104 = "10";

     label10:
        $z34 = <weka.Test: boolean NOCHECKCAPABILITIES>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z34);

        if $z34 == 0 goto label11;

        noCheckCapabilities#106 = 1;

     label11:
        $z35 = <weka.Test: boolean NUMDECIMAL>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z35);

        if $z35 == 0 goto label12;

        numDecimal#108 = 5;

     label12:
        $r25 = new weka.classifiers.rules.PART;

        specialinvoke $r25.<weka.classifiers.rules.PART: void <init>()>();

        part = $r25;

        virtualinvoke part.<weka.classifiers.rules.PART: void setBinarySplits(boolean)>(binarySplits#88);

        virtualinvoke part.<weka.classifiers.rules.PART: void setConfidenceFactor(float)>(confidenceFactor#90);

        virtualinvoke part.<weka.classifiers.rules.PART: void setDoNotMakeSplitPointActualValue(boolean)>(doNotMakeSplitPointActualValue#92);

        virtualinvoke part.<weka.classifiers.rules.PART: void setMinNumObj(int)>(minNumObj#94);

        virtualinvoke part.<weka.classifiers.rules.PART: void setNumFolds(int)>(folds#86);

        virtualinvoke part.<weka.classifiers.rules.PART: void setReducedErrorPruning(boolean)>(reducedErrorPruning#96);

        virtualinvoke part.<weka.classifiers.rules.PART: void setSeed(int)>(seed#98);

        virtualinvoke part.<weka.classifiers.rules.PART: void setUnpruned(boolean)>(unpruned#100);

        virtualinvoke part.<weka.classifiers.rules.PART: void setUseMDLcorrection(boolean)>(useMDL#102);

        virtualinvoke part.<weka.classifiers.rules.PART: void setBatchSize(java.lang.String)>(batchSize#104);

        virtualinvoke part.<weka.classifiers.rules.PART: void setDoNotCheckCapabilities(boolean)>(noCheckCapabilities#106);

        virtualinvoke part.<weka.classifiers.rules.PART: void setNumDecimalPlaces(int)>(numDecimal#108);

        staticinvoke <weka.classifiers.rules.PART: void runClassifier(weka.classifiers.Classifier,java.lang.String[])>(part, args#78);

        return;
    }

    public void <init>()
    {
        weka.Test this;

        this := @this: weka.Test;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }


