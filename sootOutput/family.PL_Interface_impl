    static void <clinit>()
    {
        java.util.ArrayList $r0;

        <family.PL_Interface_impl: boolean executedUnimplementedAction> = 0;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        <family.PL_Interface_impl: java.util.List actionHistory> = $r0;

        <family.PL_Interface_impl: int cleanupTimeShifts> = 24;

        <family.PL_Interface_impl: boolean verbose> = 0;

        <family.PL_Interface_impl: boolean isAbortedRun> = 0;

        return;
    }

    public static void main(java.lang.String[])
    {
        family.PL_Interface_impl impl, $r12;
        java.lang.Throwable e, $r14;
        java.lang.String[] args#1, args#43;
        java.lang.String $r0, $r2, $r4, $r6, $r8, $r10, $r21, $r23;
        java.lang.Boolean $r1, $r3, $r5, $r7, $r9, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        java.io.PrintStream $r13, $r15;
        java.lang.StringBuilder $r16, $r17, $r19, $r20, $r22;
        java.lang.Class $r18;

        args#1 := @parameter0: java.lang.String[];

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void init()>();

        $r0 = args#1[0];

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r0);

        $z0 = virtualinvoke $r1.<java.lang.Boolean: boolean booleanValue()>();

        $z1 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getBASE(boolean)>($z0);

        <family.PL_Interface_impl: boolean BASE> = $z1;

        $r2 = args#1[1];

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r2);

        $z2 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        $z3 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getOVERLOADED(boolean)>($z2);

        <family.PL_Interface_impl: boolean OVERLOADED> = $z3;

        $r4 = args#1[2];

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r4);

        $z4 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        $z5 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getWEIGHT(boolean)>($z4);

        <family.PL_Interface_impl: boolean WEIGHT> = $z5;

        $r6 = args#1[3];

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r6);

        $z6 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        $z7 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getEMPTY(boolean)>($z6);

        <family.PL_Interface_impl: boolean EMPTY> = $z7;

        $r8 = args#1[4];

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r8);

        $z8 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();

        $z9 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getTWOTHIRDSFULL(boolean)>($z8);

        <family.PL_Interface_impl: boolean TWOTHIRDSFULL> = $z9;

        $r10 = args#1[5];

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r10);

        $z10 = virtualinvoke $r11.<java.lang.Boolean: boolean booleanValue()>();

        $z11 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Source: boolean getEXECUTIVEFLOOR(boolean)>($z10);

        <family.PL_Interface_impl: boolean EXECUTIVEFLOOR> = $z11;

        $z12 = staticinvoke <family.verificationClasses.FeatureSwitches: boolean valid_product()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z12);

        if $z12 != 0 goto label3;

     label2:
        return;

     label3:
        $r12 = new family.PL_Interface_impl;

        specialinvoke $r12.<family.PL_Interface_impl: void <init>()>();

        impl = $r12;

        args#43 = newarray (java.lang.String)[1];

        <family.PL_Interface_impl: boolean verbose> = 1;

        staticinvoke <family.TestSpecifications.SpecificationManager: void checkOnlySpecification(int)>(-2);

        virtualinvoke impl.<family.PL_Interface_impl: void start(int,int)>(-3, -1);

        $r13 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>("no Exception");

     label4:
        goto label6;

     label5:
        $r14 := @caughtexception;

        e = $r14;

        $r15 = <java.lang.System: java.io.PrintStream out>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caught Exception: ");

        $r18 = virtualinvoke e.<java.lang.Object: java.lang.Class getClass()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r21 = virtualinvoke e.<java.lang.Throwable: java.lang.String getMessage()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r23);

        virtualinvoke e.<java.lang.Throwable: void printStackTrace()>();

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void <init>()
    {
        family.PL_Interface_impl this;

        this := @this: family.PL_Interface_impl;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void start(int, int) throws java.lang.Throwable
    {
        family.PL_Interface_impl this;
        int specification, variation;
        java.lang.Throwable e, l4, $r7, $r8;
        boolean $z0;
        java.io.PrintStream $r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        this := @this: family.PL_Interface_impl;

        specification := @parameter0: int;

        variation := @parameter1: int;

     label1:
        $z0 = <family.PL_Interface_impl: boolean verbose>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Started Elevator PL with Specification ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(specification);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", Variation: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(variation);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.io.PrintStream: void print(java.lang.String)>($r6);

     label2:
        virtualinvoke this.<family.PL_Interface_impl: void test(int,int)>(specification, variation);

     label3:
        goto label8;

     label4:
        $r7 := @caughtexception;

     label5:
        e = $r7;

        throw e;

     label6:
        $r8 := @caughtexception;

        l4 = $r8;

     label7:
        throw l4;

     label8:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label5 to label7 with label6;
    }

    public void test(int, int)
    {
        family.PL_Interface_impl this;
        int specification, variation;

        this := @this: family.PL_Interface_impl;

        specification := @parameter0: int;

        variation := @parameter1: int;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(variation);

        if variation >= 0 goto label2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(specification);

        lookupswitch(specification)
        {
            case -3: goto label1;
            default: goto label2;
        };

     label1:
        virtualinvoke this.<family.PL_Interface_impl: void Specification3()>();

     label2:
        return;
    }

    public void Specification3()
    {
        family.PL_Interface_impl this;
        family.ElevatorSystem.Environment env, $r0;
        family.ElevatorSystem.Elevator e, $r1;
        family.Actions a, $r2;
        family.ElevatorSystem.Person bob;
        int i#13, $i0, i#31, $i1;
        family.ElevatorSystem.Floor $r3;
        boolean $z0, $z1, $z2;

        this := @this: family.PL_Interface_impl;

        $r0 = new family.ElevatorSystem.Environment;

        specialinvoke $r0.<family.ElevatorSystem.Environment: void <init>(int)>(5);

        env = $r0;

        $r1 = new family.ElevatorSystem.Elevator;

        specialinvoke $r1.<family.ElevatorSystem.Elevator: void <init>(family.ElevatorSystem.Environment,boolean,int,boolean)>(env, 0, 4, 0);

        e = $r1;

        $r2 = new family.Actions;

        specialinvoke $r2.<family.Actions: void <init>(family.ElevatorSystem.Environment,family.ElevatorSystem.Elevator)>(env, e);

        a = $r2;

        i#13 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#13);

        if i#13 >= 100 goto label6;

        bob = virtualinvoke a.<family.Actions: family.ElevatorSystem.Person bobCall()>();

     label2:
        $i0 = virtualinvoke bob.<family.ElevatorSystem.Person: int getOrigin()>();

        $r3 = virtualinvoke env.<family.ElevatorSystem.Environment: family.ElevatorSystem.Floor getFloor(int)>($i0);

        $z0 = virtualinvoke $r3.<family.ElevatorSystem.Floor: boolean hasCall()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        virtualinvoke e.<family.ElevatorSystem.Elevator: void timeShift()>();

        goto label2;

     label3:
        virtualinvoke e.<family.ElevatorSystem.Elevator: void timeShift()>();

        virtualinvoke a.<family.Actions: family.ElevatorSystem.Person bobCall()>();

     label4:
        $z1 = virtualinvoke e.<family.ElevatorSystem.Elevator: boolean isEmpty()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label5;

        virtualinvoke e.<family.ElevatorSystem.Elevator: void timeShift()>();

        goto label4;

     label5:
        i#13 = i#13 + 1;

        goto label1;

     label6:
        i#31 = 0;

     label7:
        $i1 = <family.PL_Interface_impl: int cleanupTimeShifts>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#31);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#31 >= $i1 goto label8;

        $z2 = virtualinvoke e.<family.ElevatorSystem.Elevator: boolean isBlocked()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label8;

        virtualinvoke e.<family.ElevatorSystem.Elevator: void timeShift()>();

        i#31 = i#31 + 1;

        goto label7;

     label8:
        return;
    }


