    public static long getRuntimeMaxMemory()
    {
        java.lang.String jvmVersion, $r0, $r1;
        java.lang.Class factoryClass, beanClass;
        java.lang.reflect.Method getBeanMethod, getMaxMemoryMethod;
        java.lang.Object memoryBean, $r6;
        java.lang.Exception e, $r8;
        boolean $z0, $z1, $z2;
        java.lang.Class[] $r2, $r4;
        java.lang.Object[] $r3, $r5;
        java.lang.Long $r7;
        long $l0, $l1;
        java.lang.IllegalStateException $r9;
        java.lang.Runtime $r10;

        $r0 = "Mac OS X";

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        jvmVersion = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.version");

        if jvmVersion == null goto label1;

        $z1 = virtualinvoke jvmVersion.<java.lang.String: boolean startsWith(java.lang.String)>("1.4.2");

        if $z1 == 0 goto label1;

        return 9223372036854775807L;

     label1:
        $z2 = <berkeley.com.sleepycat.je.utilint.JVMSystemUtils: boolean ZING_JVM>;

        if $z2 == 0 goto label5;

     label2:
        factoryClass = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.azul.zing.management.ManagementFactory");

        $r2 = newarray (java.lang.Class)[0];

        getBeanMethod = virtualinvoke factoryClass.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getMemoryMXBean", $r2);

        $r3 = newarray (java.lang.Object)[0];

        memoryBean = virtualinvoke getBeanMethod.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r3);

        beanClass = virtualinvoke memoryBean.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = newarray (java.lang.Class)[0];

        getMaxMemoryMethod = virtualinvoke beanClass.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getApplicationObjectHeapUsableMemory", $r4);

        $r5 = newarray (java.lang.Object)[0];

        $r6 = virtualinvoke getMaxMemoryMethod.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(memoryBean, $r5);

        $r7 = (java.lang.Long) $r6;

        $l0 = virtualinvoke $r7.<java.lang.Long: long longValue()>();

     label3:
        return $l0;

     label4:
        $r8 := @caughtexception;

        e = $r8;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Could not access Zing management bean. Make sure -XX:+UseZingMXBeans was specified.", e);

        throw $r9;

     label5:
        $r10 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $l1 = virtualinvoke $r10.<java.lang.Runtime: long maxMemory()>();

        return $l1;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    static void <clinit>()
    {
        java.lang.String $r0, $r1, $r6;
        boolean $z0, $z1;
        short $s0;
        java.lang.management.OperatingSystemMXBean $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        char $c1;

        $r0 = "Azul Systems, Inc.";

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vendor");

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        <berkeley.com.sleepycat.je.utilint.JVMSystemUtils: boolean ZING_JVM> = $z0;

        $z1 = <berkeley.com.sleepycat.je.utilint.JVMSystemUtils: boolean ZING_JVM>;

        if $z1 == 0 goto label1;

        $s0 = 1024;

        goto label2;

     label1:
        $s0 = 0;

     label2:
        <berkeley.com.sleepycat.je.utilint.JVMSystemUtils: int MIN_HEAP_MB> = $s0;

        $r2 = staticinvoke <java.lang.management.ManagementFactory: java.lang.management.OperatingSystemMXBean getOperatingSystemMXBean()>();

        <berkeley.com.sleepycat.je.utilint.JVMSystemUtils: java.lang.management.OperatingSystemMXBean osBean> = $r2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\");

        $c1 = <java.io.File: char separatorChar>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        <berkeley.com.sleepycat.je.utilint.JVMSystemUtils: java.lang.String MATCH_FILE_SEPARATOR> = $r6;

        return;
    }

    public static double getSystemLoad()
    {
        java.lang.management.OperatingSystemMXBean $r0;
        double $d0;

        $r0 = <berkeley.com.sleepycat.je.utilint.JVMSystemUtils: java.lang.management.OperatingSystemMXBean osBean>;

        $d0 = interfaceinvoke $r0.<java.lang.management.OperatingSystemMXBean: double getSystemLoadAverage()>();

        return $d0;
    }


