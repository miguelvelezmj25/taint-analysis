    static void <clinit>()
    {
        weka.core.Environment $r0;

        $r0 = new weka.core.Environment;

        specialinvoke $r0.<weka.core.Environment: void <init>()>();

        <weka.core.Environment: weka.core.Environment m_systemWide> = $r0;

        return;
    }

    public static weka.core.Environment getSystemWide()
    {
        weka.core.Environment $r0;

        $r0 = <weka.core.Environment: weka.core.Environment m_systemWide>;

        return $r0;
    }

    public java.lang.String getVariableValue(java.lang.String)
    {
        weka.core.Environment this;
        java.lang.String key, $r2;
        java.util.Map $r0;
        java.lang.Object $r1;

        this := @this: weka.core.Environment;

        key := @parameter0: java.lang.String;

        $r0 = this.<weka.core.Environment: java.util.Map m_envVars>;

        $r1 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);

        $r2 = (java.lang.String) $r1;

        return $r2;
    }

    public void <init>()
    {
        weka.core.Environment this;
        java.util.Map env, $r3, $r6, $r8;
        java.util.Set keys;
        java.util.Iterator i;
        java.lang.String kv, value, kv, value, $r9;
        java.util.Properties jvmProps;
        java.util.Enumeration pKeys;
        java.util.TreeMap $r0;
        boolean $z0, $z1;
        java.lang.Object $r1, $r2, $r5;

        this := @this: weka.core.Environment;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = new java.util.TreeMap;

        specialinvoke $r0.<java.util.TreeMap: void <init>()>();

        this.<weka.core.Environment: java.util.Map m_envVars> = $r0;

        env = staticinvoke <java.lang.System: java.util.Map getenv()>();

        keys = interfaceinvoke env.<java.util.Map: java.util.Set keySet()>();

        i = interfaceinvoke keys.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke i.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $r1 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>();

        kv = (java.lang.String) $r1;

        $r2 = interfaceinvoke env.<java.util.Map: java.lang.Object get(java.lang.Object)>(kv);

        value = (java.lang.String) $r2;

        $r3 = this.<weka.core.Environment: java.util.Map m_envVars>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(kv, value);

        goto label1;

     label2:
        jvmProps = staticinvoke <java.lang.System: java.util.Properties getProperties()>();

        pKeys = virtualinvoke jvmProps.<java.util.Properties: java.util.Enumeration propertyNames()>();

     label3:
        $z1 = interfaceinvoke pKeys.<java.util.Enumeration: boolean hasMoreElements()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label4;

        $r5 = interfaceinvoke pKeys.<java.util.Enumeration: java.lang.Object nextElement()>();

        kv = (java.lang.String) $r5;

        value = virtualinvoke jvmProps.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(kv);

        $r6 = this.<weka.core.Environment: java.util.Map m_envVars>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(kv, value);

        goto label3;

     label4:
        $r8 = this.<weka.core.Environment: java.util.Map m_envVars>;

        $r9 = <weka.core.Version: java.lang.String VERSION>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("weka.version", $r9);

        return;
    }

    public void addVariableSystemWide(java.lang.String, java.lang.String)
    {
        weka.core.Environment this, $r0, $r1;
        java.lang.String key, value;

        this := @this: weka.core.Environment;

        key := @parameter0: java.lang.String;

        value := @parameter1: java.lang.String;

        virtualinvoke this.<weka.core.Environment: void addVariable(java.lang.String,java.lang.String)>(key, value);

        $r0 = staticinvoke <weka.core.Environment: weka.core.Environment getSystemWide()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(this);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if this == $r0 goto label1;

        $r1 = staticinvoke <weka.core.Environment: weka.core.Environment getSystemWide()>();

        virtualinvoke $r1.<weka.core.Environment: void addVariableSystemWide(java.lang.String,java.lang.String)>(key, value);

     label1:
        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>(key, value);

        return;
    }

    public void addVariable(java.lang.String, java.lang.String)
    {
        weka.core.Environment this;
        java.lang.String key, value;
        java.util.Map $r0;

        this := @this: weka.core.Environment;

        key := @parameter0: java.lang.String;

        value := @parameter1: java.lang.String;

        $r0 = this.<weka.core.Environment: java.util.Map m_envVars>;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(key, value);

        return;
    }

    public java.lang.String substitute(java.lang.String) throws java.lang.Exception
    {
        weka.core.Environment this;
        int endIndex, index#5, index#7, $i0;
        java.lang.String key, replace, toReplace, source#1, $r11;
        java.util.Map $r0;
        java.lang.Object $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10;
        java.lang.Exception $r6;

        this := @this: weka.core.Environment;

        source#1 := @parameter0: java.lang.String;

        index#5 = virtualinvoke source#1.<java.lang.String: int indexOf(java.lang.String)>("${");

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(index#5);

        if index#5 < 0 goto label4;

        index#7 = index#5 + 2;

        endIndex = virtualinvoke source#1.<java.lang.String: int indexOf(int)>(125);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(endIndex);

        if endIndex < 0 goto label4;

        $i0 = index#7 + 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(endIndex);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if endIndex <= $i0 goto label4;

        key = virtualinvoke source#1.<java.lang.String: java.lang.String substring(int,int)>(index#7, endIndex);

        $r0 = this.<weka.core.Environment: java.util.Map m_envVars>;

        $r1 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(key);

        replace = (java.lang.String) $r1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(replace);

        if replace == null goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("${");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(key);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        toReplace = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        source#1 = virtualinvoke source#1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(toReplace, replace);

        goto label3;

     label2:
        $r6 = new java.lang.Exception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[Environment] Variable ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(key);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" doesn\'t seem to be set.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.Exception: void <init>(java.lang.String)>($r11);

        throw $r6;

     label3:
        index#5 = virtualinvoke source#1.<java.lang.String: int indexOf(java.lang.String)>("${");

        goto label1;

     label4:
        return source#1;
    }


