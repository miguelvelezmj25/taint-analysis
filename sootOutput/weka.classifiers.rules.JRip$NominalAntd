    public void <init>(weka.classifiers.rules.JRip, weka.core.Attribute)
    {
        weka.classifiers.rules.JRip$NominalAntd this;
        weka.classifiers.rules.JRip this$0;
        weka.core.Attribute a, $r0;
        int bag;
        double[] $r1, $r2;

        this := @this: weka.classifiers.rules.JRip$NominalAntd;

        this$0 := @parameter0: weka.classifiers.rules.JRip;

        a := @parameter1: weka.core.Attribute;

        this.<weka.classifiers.rules.JRip$NominalAntd: weka.classifiers.rules.JRip this$0> = this$0;

        specialinvoke this.<weka.classifiers.rules.JRip$Antd: void <init>(weka.classifiers.rules.JRip,weka.core.Attribute)>(this$0, a);

        $r0 = this.<weka.classifiers.rules.JRip$NominalAntd: weka.core.Attribute att>;

        bag = virtualinvoke $r0.<weka.core.Attribute: int numValues()>();

        $r1 = newarray (double)[bag];

        this.<weka.classifiers.rules.JRip$NominalAntd: double[] accurate> = $r1;

        $r2 = newarray (double)[bag];

        this.<weka.classifiers.rules.JRip$NominalAntd: double[] coverage> = $r2;

        return;
    }

    public java.lang.String toString()
    {
        weka.classifiers.rules.JRip$NominalAntd this;
        java.lang.StringBuilder $r0, $r3, $r4, $r7;
        weka.core.Attribute $r1, $r5;
        java.lang.String $r2, $r6, $r8;
        double $d0;
        int $i0;

        this := @this: weka.classifiers.rules.JRip$NominalAntd;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = this.<weka.classifiers.rules.JRip$NominalAntd: weka.core.Attribute att>;

        $r2 = virtualinvoke $r1.<weka.core.Attribute: java.lang.String name()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $r5 = this.<weka.classifiers.rules.JRip$NominalAntd: weka.core.Attribute att>;

        $d0 = this.<weka.classifiers.rules.JRip$NominalAntd: double value>;

        $i0 = (int) $d0;

        $r6 = virtualinvoke $r5.<weka.core.Attribute: java.lang.String value(int)>($i0);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public weka.core.Instances[] splitData(weka.core.Instances, double, double)
    {
        weka.classifiers.rules.JRip$NominalAntd this;
        weka.core.Instances data, $r1, $r6;
        double defAcRt, cl, t, p, infoGain, $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19;
        int bag, v, x#7, $i0, x#26, $i1, $i3, $i4, x#71;
        weka.core.Instances[] splitData;
        weka.core.Instance inst;
        weka.core.Attribute $r0, $r4, $r5;
        double[] $r2, $r3, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        boolean $z0;
        byte $b6;

        this := @this: weka.classifiers.rules.JRip$NominalAntd;

        data := @parameter0: weka.core.Instances;

        defAcRt := @parameter1: double;

        cl := @parameter2: double;

        $r0 = this.<weka.classifiers.rules.JRip$NominalAntd: weka.core.Attribute att>;

        bag = virtualinvoke $r0.<weka.core.Attribute: int numValues()>();

        splitData = newarray (weka.core.Instances)[bag];

        x#7 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(x#7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(bag);

        if x#7 >= bag goto label2;

        $r1 = new weka.core.Instances;

        $i0 = virtualinvoke data.<weka.core.Instances: int numInstances()>();

        specialinvoke $r1.<weka.core.Instances: void <init>(weka.core.Instances,int)>(data, $i0);

        splitData[x#7] = $r1;

        $r2 = this.<weka.classifiers.rules.JRip$NominalAntd: double[] accurate>;

        $r2[x#7] = 0.0;

        $r3 = this.<weka.classifiers.rules.JRip$NominalAntd: double[] coverage>;

        $r3[x#7] = 0.0;

        x#7 = x#7 + 1;

        goto label1;

     label2:
        x#26 = 0;

     label3:
        $i1 = virtualinvoke data.<weka.core.Instances: int numInstances()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(x#26);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if x#26 >= $i1 goto label5;

        inst = virtualinvoke data.<weka.core.Instances: weka.core.Instance instance(int)>(x#26);

        $r4 = this.<weka.classifiers.rules.JRip$NominalAntd: weka.core.Attribute att>;

        $z0 = interfaceinvoke inst.<weka.core.Instance: boolean isMissing(weka.core.Attribute)>($r4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label4;

        $r5 = this.<weka.classifiers.rules.JRip$NominalAntd: weka.core.Attribute att>;

        $d0 = interfaceinvoke inst.<weka.core.Instance: double value(weka.core.Attribute)>($r5);

        v = (int) $d0;

        $r6 = splitData[v];

        virtualinvoke $r6.<weka.core.Instances: boolean add(weka.core.Instance)>(inst);

        $r7 = this.<weka.classifiers.rules.JRip$NominalAntd: double[] coverage>;

        $d1 = $r7[v];

        $d2 = interfaceinvoke inst.<weka.core.Instance: double weight()>();

        $d3 = $d1 + $d2;

        $r7[v] = $d3;

        $d4 = interfaceinvoke inst.<weka.core.Instance: double classValue()>();

        $i3 = (int) $d4;

        $i4 = (int) cl;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i3 != $i4 goto label4;

        $r8 = this.<weka.classifiers.rules.JRip$NominalAntd: double[] accurate>;

        $d5 = $r8[v];

        $d6 = interfaceinvoke inst.<weka.core.Instance: double weight()>();

        $d7 = $d5 + $d6;

        $r8[v] = $d7;

     label4:
        x#26 = x#26 + 1;

        goto label3;

     label5:
        x#71 = 0;

     label6:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(x#71);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(bag);

        if x#71 >= bag goto label8;

        $r9 = this.<weka.classifiers.rules.JRip$NominalAntd: double[] coverage>;

        $d8 = $r9[x#71];

        t = $d8 + 1.0;

        $r10 = this.<weka.classifiers.rules.JRip$NominalAntd: double[] accurate>;

        $d9 = $r10[x#71];

        p = $d9 + 1.0;

        $r11 = this.<weka.classifiers.rules.JRip$NominalAntd: double[] accurate>;

        $d10 = $r11[x#71];

        $d11 = p / t;

        $d12 = staticinvoke <weka.core.Utils: double log2(double)>($d11);

        $d13 = staticinvoke <weka.core.Utils: double log2(double)>(defAcRt);

        $d14 = $d12 - $d13;

        infoGain = $d10 * $d14;

        $d15 = this.<weka.classifiers.rules.JRip$NominalAntd: double maxInfoGain>;

        $b6 = infoGain cmpl $d15;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b6);

        if $b6 <= 0 goto label7;

        this.<weka.classifiers.rules.JRip$NominalAntd: double maxInfoGain> = infoGain;

        $r12 = this.<weka.classifiers.rules.JRip$NominalAntd: double[] coverage>;

        $d16 = $r12[x#71];

        this.<weka.classifiers.rules.JRip$NominalAntd: double cover> = $d16;

        $r13 = this.<weka.classifiers.rules.JRip$NominalAntd: double[] accurate>;

        $d17 = $r13[x#71];

        this.<weka.classifiers.rules.JRip$NominalAntd: double accu> = $d17;

        $d18 = p / t;

        this.<weka.classifiers.rules.JRip$NominalAntd: double accuRate> = $d18;

        $d19 = (double) x#71;

        this.<weka.classifiers.rules.JRip$NominalAntd: double value> = $d19;

     label7:
        x#71 = x#71 + 1;

        goto label6;

     label8:
        return splitData;
    }


