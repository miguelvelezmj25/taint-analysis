    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        java.util.logging.Level $r1;

        $r0 = class "com/sleepycat/je/evictor/Evictor";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sleepycat.je.evictor.Evictor: boolean $assertionsDisabled> = $z1;

        $r1 = <java.util.logging.Level: java.util.logging.Level INFO>;

        <com.sleepycat.je.evictor.Evictor: java.util.logging.Level traceLevel> = $r1;

        return;
    }

    public void <init>(com.sleepycat.je.dbi.EnvironmentImpl) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.evictor.Evictor this;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl, $r84, $r88, $r90, $r114, $r118;
        java.util.EnumSet allSources;
        int numSources, index, corePoolSize, $i0, $i1, $i2, $i3, $i4, $i5, $i6, i#256, $i7, $i8, $i9, $i13;
        java.util.Iterator l4;
        com.sleepycat.je.evictor.Evictor$EvictionSource source;
        com.sleepycat.je.dbi.DbConfigManager configManager;
        long keepAliveTime, $l10;
        com.sleepycat.je.evictor.Evictor$RejectEvictHandler rejectHandler, $r107;
        java.util.concurrent.TimeUnit $r0;
        java.util.concurrent.ArrayBlockingQueue $r1;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        java.util.concurrent.atomic.AtomicInteger $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        com.sleepycat.je.utilint.StatGroup $r4, $r6, $r9, $r12, $r15, $r18, $r21, $r24, $r27, $r30, $r33, $r36, $r39, $r42, $r45, $r48, $r51, $r54, $r57, $r60, $r63, $r66, $r69, $r75, $r81;
        com.sleepycat.je.utilint.LongStat $r5, $r8, $r11, $r14, $r17, $r20, $r23, $r26, $r29, $r32, $r35;
        com.sleepycat.je.utilint.StatDefinition $r7, $r10, $r13, $r16, $r19, $r22, $r25, $r28, $r31, $r34, $r37, $r40, $r43, $r46, $r49, $r52, $r55, $r58, $r61, $r64, $r67, $r70, $r76, $r82;
        com.sleepycat.je.utilint.AtomicLongStat $r38, $r41, $r44, $r47, $r50, $r53, $r56, $r59, $r62, $r68, $r80, $r108;
        com.sleepycat.je.utilint.FloatStat $r65;
        java.util.concurrent.atomic.AtomicLong $r71, $r72, $r73;
        com.sleepycat.je.utilint.IntStat $r74;
        com.sleepycat.je.utilint.AtomicLongStat[] $r77, $r79;
        java.lang.Object $r78;
        com.sleepycat.je.evictor.Arbiter $r83;
        java.lang.Class $r85;
        java.util.logging.Logger $r86, $r89, $r115;
        com.sleepycat.je.evictor.Evictor$ReentrancyGuard $r87;
        com.sleepycat.je.config.IntConfigParam $r91, $r92, $r95, $r96;
        com.sleepycat.je.config.DurationConfigParam $r93, $r94;
        com.sleepycat.je.evictor.Evictor$LRUList[] $r97, $r98, $r99, $r101;
        com.sleepycat.je.evictor.Evictor$LRUList $r100, $r102;
        java.util.ArrayList $r103;
        com.sleepycat.je.config.LongConfigParam $r104;
        byte $b11;
        com.sleepycat.je.config.BooleanConfigParam $r105, $r106, $r116, $r117;
        java.util.concurrent.ThreadPoolExecutor $r110;
        com.sleepycat.je.utilint.StoppableThreadFactory $r112;

        this := @this: com.sleepycat.je.evictor.Evictor;

        envImpl := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r2 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        this.<com.sleepycat.je.evictor.Evictor: java.util.concurrent.atomic.AtomicBoolean shutdownRequested> = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        this.<com.sleepycat.je.evictor.Evictor: java.util.concurrent.atomic.AtomicInteger activePoolThreads> = $r3;

        this.<com.sleepycat.je.evictor.Evictor: int specialEvictionIndex> = 0;

        this.<com.sleepycat.je.evictor.Evictor: int nextPri1LRUList> = 0;

        this.<com.sleepycat.je.evictor.Evictor: int nextPri2LRUList> = 0;

        this.<com.sleepycat.je.evictor.Evictor: boolean isEnabled> = 0;

        this.<com.sleepycat.je.evictor.Evictor: int numNoEvictionEvents> = 0;

        $z0 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: boolean getSharedCache()>();

        this.<com.sleepycat.je.evictor.Evictor: boolean isShared> = $z0;

        this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.dbi.EnvironmentImpl firstEnvImpl> = envImpl;

        $r4 = new com.sleepycat.je.utilint.StatGroup;

        specialinvoke $r4.<com.sleepycat.je.utilint.StatGroup: void <init>(java.lang.String,java.lang.String)>("Cache", "Current size, allocations, and eviction activity.");

        this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.StatGroup stats> = $r4;

        $r5 = new com.sleepycat.je.utilint.LongStat;

        $r6 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.StatGroup stats>;

        $r7 = <com.sleepycat.je.evictor.EvictorStatDefinition: com.sleepycat.je.utilint.StatDefinition EVICTOR_EVICTION_RUNS>;

        specialinvoke $r5.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition)>($r6, $r7);

        this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.LongStat nEvictionRuns> = $r5;

        $r8 = new com.sleepycat.je.utilint.LongStat;

        $r9 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.StatGroup stats>;

        $r10 = <com.sleepycat.je.evictor.EvictorStatDefinition: com.sleepycat.je.utilint.StatDefinition EVICTOR_NODES_TARGETED>;

        specialinvoke $r8.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition)>($r9, $r10);

        this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.LongStat nNodesTargeted> = $r8;

        $r11 = new com.sleepycat.je.utilint.LongStat;

        $r12 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.StatGroup stats>;

        $r13 = <com.sleepycat.je.evictor.EvictorStatDefinition: com.sleepycat.je.utilint.StatDefinition EVICTOR_NODES_EVICTED>;

        specialinvoke $r11.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition)>($r12, $r13);

        this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.LongStat nNodesEvicted> = $r11;

        $r14 = new com.sleepycat.je.utilint.LongStat;

        $r15 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.StatGroup stats>;

        $r16 = <com.sleepycat.je.evictor.EvictorStatDefinition: com.sleepycat.je.utilint.StatDefinition EVICTOR_ROOT_NODES_EVICTED>;

        specialinvoke $r14.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition)>($r15, $r16);

        this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.LongStat nRootNodesEvicted> = $r14;

        $r17 = new com.sleepycat.je.utilint.LongStat;

        $r18 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.StatGroup stats>;

        $r19 = <com.sleepycat.je.evictor.EvictorStatDefinition: com.sleepycat.je.utilint.StatDefinition EVICTOR_DIRTY_NODES_EVICTED>;

        specialinvoke $r17.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition)>($r18, $r19);

        this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.LongStat nDirtyNodesEvicted> = $r17;

        $r20 = new com.sleepycat.je.utilint.LongStat;

        $r21 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.StatGroup stats>;

        $r22 = <com.sleepycat.je.evictor.EvictorStatDefinition: com.sleepycat.je.utilint.StatDefinition EVICTOR_LNS_EVICTED>;

        specialinvoke $r20.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition)>($r21, $r22);

        this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.LongStat nLNsEvicted> = $r20;

        $r23 = new com.sleepycat.je.utilint.LongStat;

        $r24 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.StatGroup stats>;

        $r25 = <com.sleepycat.je.evictor.EvictorStatDefinition: com.sleepycat.je.utilint.StatDefinition EVICTOR_NODES_STRIPPED>;

        specialinvoke $r23.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition)>($r24, $r25);

        this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.LongStat nNodesStripped> = $r23;

        $r26 = new com.sleepycat.je.utilint.LongStat;

        $r27 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.StatGroup stats>;

        $r28 = <com.sleepycat.je.evictor.EvictorStatDefinition: com.sleepycat.je.utilint.StatDefinition EVICTOR_NODES_MUTATED>;

        specialinvoke $r26.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition)>($r27, $r28);

        this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.LongStat nNodesMutated> = $r26;

        $r29 = new com.sleepycat.je.utilint.LongStat;

        $r30 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.StatGroup stats>;

        $r31 = <com.sleepycat.je.evictor.EvictorStatDefinition: com.sleepycat.je.utilint.StatDefinition EVICTOR_NODES_PUT_BACK>;

        specialinvoke $r29.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition)>($r30, $r31);

        this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.LongStat nNodesPutBack> = $r29;

        $r32 = new com.sleepycat.je.utilint.LongStat;

        $r33 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.StatGroup stats>;

        $r34 = <com.sleepycat.je.evictor.EvictorStatDefinition: com.sleepycat.je.utilint.StatDefinition EVICTOR_NODES_SKIPPED>;

        specialinvoke $r32.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition)>($r33, $r34);

        this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.LongStat nNodesSkipped> = $r32;

        $r35 = new com.sleepycat.je.utilint.LongStat;

        $r36 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.StatGroup stats>;

        $r37 = <com.sleepycat.je.evictor.EvictorStatDefinition: com.sleepycat.je.utilint.StatDefinition EVICTOR_NODES_MOVED_TO_PRI2_LRU>;

        specialinvoke $r35.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition)>($r36, $r37);

        this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.LongStat nNodesMovedToPri2LRU> = $r35;

        $r38 = new com.sleepycat.je.utilint.AtomicLongStat;

        $r39 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.StatGroup stats>;

        $r40 = <com.sleepycat.je.evictor.EvictorStatDefinition: com.sleepycat.je.utilint.StatDefinition LN_FETCH>;

        specialinvoke $r38.<com.sleepycat.je.utilint.AtomicLongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition)>($r39, $r40);

        this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.AtomicLongStat nLNFetch> = $r38;

        $r41 = new com.sleepycat.je.utilint.AtomicLongStat;

        $r42 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.StatGroup stats>;

        $r43 = <com.sleepycat.je.evictor.EvictorStatDefinition: com.sleepycat.je.utilint.StatDefinition BIN_FETCH>;

        specialinvoke $r41.<com.sleepycat.je.utilint.AtomicLongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition)>($r42, $r43);

        this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.AtomicLongStat nBINFetch> = $r41;

        $r44 = new com.sleepycat.je.utilint.AtomicLongStat;

        $r45 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.StatGroup stats>;

        $r46 = <com.sleepycat.je.evictor.EvictorStatDefinition: com.sleepycat.je.utilint.StatDefinition UPPER_IN_FETCH>;

        specialinvoke $r44.<com.sleepycat.je.utilint.AtomicLongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition)>($r45, $r46);

        this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.AtomicLongStat nUpperINFetch> = $r44;

        $r47 = new com.sleepycat.je.utilint.AtomicLongStat;

        $r48 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.StatGroup stats>;

        $r49 = <com.sleepycat.je.evictor.EvictorStatDefinition: com.sleepycat.je.utilint.StatDefinition LN_FETCH_MISS>;

        specialinvoke $r47.<com.sleepycat.je.utilint.AtomicLongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition)>($r48, $r49);

        this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.AtomicLongStat nLNFetchMiss> = $r47;

        $r50 = new com.sleepycat.je.utilint.AtomicLongStat;

        $r51 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.StatGroup stats>;

        $r52 = <com.sleepycat.je.evictor.EvictorStatDefinition: com.sleepycat.je.utilint.StatDefinition BIN_FETCH_MISS>;

        specialinvoke $r50.<com.sleepycat.je.utilint.AtomicLongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition)>($r51, $r52);

        this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.AtomicLongStat nBINFetchMiss> = $r50;

        $r53 = new com.sleepycat.je.utilint.AtomicLongStat;

        $r54 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.StatGroup stats>;

        $r55 = <com.sleepycat.je.evictor.EvictorStatDefinition: com.sleepycat.je.utilint.StatDefinition BIN_DELTA_FETCH_MISS>;

        specialinvoke $r53.<com.sleepycat.je.utilint.AtomicLongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition)>($r54, $r55);

        this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.AtomicLongStat nBINDeltaFetchMiss> = $r53;

        $r56 = new com.sleepycat.je.utilint.AtomicLongStat;

        $r57 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.StatGroup stats>;

        $r58 = <com.sleepycat.je.evictor.EvictorStatDefinition: com.sleepycat.je.utilint.StatDefinition UPPER_IN_FETCH_MISS>;

        specialinvoke $r56.<com.sleepycat.je.utilint.AtomicLongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition)>($r57, $r58);

        this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.AtomicLongStat nUpperINFetchMiss> = $r56;

        $r59 = new com.sleepycat.je.utilint.AtomicLongStat;

        $r60 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.StatGroup stats>;

        $r61 = <com.sleepycat.je.evictor.EvictorStatDefinition: com.sleepycat.je.utilint.StatDefinition FULL_BIN_MISS>;

        specialinvoke $r59.<com.sleepycat.je.utilint.AtomicLongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition)>($r60, $r61);

        this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.AtomicLongStat nFullBINMiss> = $r59;

        $r62 = new com.sleepycat.je.utilint.AtomicLongStat;

        $r63 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.StatGroup stats>;

        $r64 = <com.sleepycat.je.evictor.EvictorStatDefinition: com.sleepycat.je.utilint.StatDefinition BIN_DELTA_BLIND_OPS>;

        specialinvoke $r62.<com.sleepycat.je.utilint.AtomicLongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition)>($r63, $r64);

        this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.AtomicLongStat nBinDeltaBlindOps> = $r62;

        $r65 = new com.sleepycat.je.utilint.FloatStat;

        $r66 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.StatGroup stats>;

        $r67 = <com.sleepycat.je.evictor.EvictorStatDefinition: com.sleepycat.je.utilint.StatDefinition BIN_FETCH_MISS_RATIO>;

        specialinvoke $r65.<com.sleepycat.je.utilint.FloatStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition)>($r66, $r67);

        this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.FloatStat binFetchMissRatio> = $r65;

        $r68 = new com.sleepycat.je.utilint.AtomicLongStat;

        $r69 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.StatGroup stats>;

        $r70 = <com.sleepycat.je.evictor.EvictorStatDefinition: com.sleepycat.je.utilint.StatDefinition THREAD_UNAVAILABLE>;

        specialinvoke $r68.<com.sleepycat.je.utilint.AtomicLongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition)>($r69, $r70);

        this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.AtomicLongStat nThreadUnavailable> = $r68;

        $r71 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r71.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        this.<com.sleepycat.je.evictor.Evictor: java.util.concurrent.atomic.AtomicLong nINSparseTarget> = $r71;

        $r72 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r72.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        this.<com.sleepycat.je.evictor.Evictor: java.util.concurrent.atomic.AtomicLong nINNoTarget> = $r72;

        $r73 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r73.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        this.<com.sleepycat.je.evictor.Evictor: java.util.concurrent.atomic.AtomicLong nINCompactKey> = $r73;

        $r74 = new com.sleepycat.je.utilint.IntStat;

        $r75 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.StatGroup stats>;

        $r76 = <com.sleepycat.je.evictor.EvictorStatDefinition: com.sleepycat.je.utilint.StatDefinition EVICTOR_SHARED_CACHE_ENVS>;

        specialinvoke $r74.<com.sleepycat.je.utilint.IntStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition)>($r75, $r76);

        this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.IntStat sharedCacheEnvs> = $r74;

        allSources = staticinvoke <java.util.EnumSet: java.util.EnumSet allOf(java.lang.Class)>(class "com/sleepycat/je/evictor/Evictor$EvictionSource");

        numSources = virtualinvoke allSources.<java.util.EnumSet: int size()>();

        $r77 = newarray (com.sleepycat.je.utilint.AtomicLongStat)[numSources];

        this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.AtomicLongStat[] numBytesEvicted> = $r77;

        l4 = virtualinvoke allSources.<java.util.EnumSet: java.util.Iterator iterator()>();

     label01:
        $z1 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label02;

        $r78 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        source = (com.sleepycat.je.evictor.Evictor$EvictionSource) $r78;

        index = virtualinvoke source.<com.sleepycat.je.evictor.Evictor$EvictionSource: int ordinal()>();

        $r79 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.AtomicLongStat[] numBytesEvicted>;

        $r80 = new com.sleepycat.je.utilint.AtomicLongStat;

        $r81 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.StatGroup stats>;

        $r82 = virtualinvoke source.<com.sleepycat.je.evictor.Evictor$EvictionSource: com.sleepycat.je.utilint.StatDefinition getNumBytesEvictedStatDef()>();

        specialinvoke $r80.<com.sleepycat.je.utilint.AtomicLongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition)>($r81, $r82);

        $r79[index] = $r80;

        goto label01;

     label02:
        $r83 = new com.sleepycat.je.evictor.Arbiter;

        $r84 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.dbi.EnvironmentImpl firstEnvImpl>;

        specialinvoke $r83.<com.sleepycat.je.evictor.Arbiter: void <init>(com.sleepycat.je.dbi.EnvironmentImpl)>($r84);

        this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.evictor.Arbiter arbiter> = $r83;

        $r85 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $r86 = staticinvoke <com.sleepycat.je.utilint.LoggerUtils: java.util.logging.Logger getLogger(java.lang.Class)>($r85);

        this.<com.sleepycat.je.evictor.Evictor: java.util.logging.Logger logger> = $r86;

        $r87 = new com.sleepycat.je.evictor.Evictor$ReentrancyGuard;

        $r88 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.dbi.EnvironmentImpl firstEnvImpl>;

        $r89 = this.<com.sleepycat.je.evictor.Evictor: java.util.logging.Logger logger>;

        specialinvoke $r87.<com.sleepycat.je.evictor.Evictor$ReentrancyGuard: void <init>(com.sleepycat.je.dbi.EnvironmentImpl,java.util.logging.Logger)>($r88, $r89);

        this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.evictor.Evictor$ReentrancyGuard reentrancyGuard> = $r87;

        $r90 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.dbi.EnvironmentImpl firstEnvImpl>;

        configManager = virtualinvoke $r90.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.DbConfigManager getConfigManager()>();

        $r91 = <com.sleepycat.je.config.EnvironmentParams: com.sleepycat.je.config.IntConfigParam EVICTOR_CORE_THREADS>;

        corePoolSize = virtualinvoke configManager.<com.sleepycat.je.dbi.DbConfigManager: int getInt(com.sleepycat.je.config.IntConfigParam)>($r91);

        $r92 = <com.sleepycat.je.config.EnvironmentParams: com.sleepycat.je.config.IntConfigParam EVICTOR_MAX_THREADS>;

        $i0 = virtualinvoke configManager.<com.sleepycat.je.dbi.DbConfigManager: int getInt(com.sleepycat.je.config.IntConfigParam)>($r92);

        this.<com.sleepycat.je.evictor.Evictor: int maxPoolThreads> = $i0;

        $r93 = <com.sleepycat.je.config.EnvironmentParams: com.sleepycat.je.config.DurationConfigParam EVICTOR_KEEP_ALIVE>;

        $i1 = virtualinvoke configManager.<com.sleepycat.je.dbi.DbConfigManager: int getDuration(com.sleepycat.je.config.DurationConfigParam)>($r93);

        keepAliveTime = (long) $i1;

        $r94 = <com.sleepycat.je.config.EnvironmentParams: com.sleepycat.je.config.DurationConfigParam EVICTOR_TERMINATE_TIMEOUT>;

        $i2 = virtualinvoke configManager.<com.sleepycat.je.dbi.DbConfigManager: int getDuration(com.sleepycat.je.config.DurationConfigParam)>($r94);

        this.<com.sleepycat.je.evictor.Evictor: int terminateMillis> = $i2;

        $r95 = <com.sleepycat.je.config.EnvironmentParams: com.sleepycat.je.config.IntConfigParam ENV_DB_CACHE_CLEAR_COUNT>;

        $i3 = virtualinvoke configManager.<com.sleepycat.je.dbi.DbConfigManager: int getInt(com.sleepycat.je.config.IntConfigParam)>($r95);

        this.<com.sleepycat.je.evictor.Evictor: int dbCacheClearCount> = $i3;

        $r96 = <com.sleepycat.je.config.EnvironmentParams: com.sleepycat.je.config.IntConfigParam EVICTOR_N_LRU_LISTS>;

        $i4 = virtualinvoke configManager.<com.sleepycat.je.dbi.DbConfigManager: int getInt(com.sleepycat.je.config.IntConfigParam)>($r96);

        this.<com.sleepycat.je.evictor.Evictor: int numLRULists> = $i4;

        $i5 = this.<com.sleepycat.je.evictor.Evictor: int numLRULists>;

        $r97 = newarray (com.sleepycat.je.evictor.Evictor$LRUList)[$i5];

        this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.evictor.Evictor$LRUList[] pri1LRUSet> = $r97;

        $i6 = this.<com.sleepycat.je.evictor.Evictor: int numLRULists>;

        $r98 = newarray (com.sleepycat.je.evictor.Evictor$LRUList)[$i6];

        this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.evictor.Evictor$LRUList[] pri2LRUSet> = $r98;

        i#256 = 0;

     label03:
        $i7 = this.<com.sleepycat.je.evictor.Evictor: int numLRULists>;

        if i#256 >= $i7 goto label04;

        $r99 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.evictor.Evictor$LRUList[] pri1LRUSet>;

        $r100 = new com.sleepycat.je.evictor.Evictor$LRUList;

        specialinvoke $r100.<com.sleepycat.je.evictor.Evictor$LRUList: void <init>(int)>(i#256);

        $r99[i#256] = $r100;

        $r101 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.evictor.Evictor$LRUList[] pri2LRUSet>;

        $r102 = new com.sleepycat.je.evictor.Evictor$LRUList;

        $i8 = this.<com.sleepycat.je.evictor.Evictor: int numLRULists>;

        $i9 = $i8 + i#256;

        specialinvoke $r102.<com.sleepycat.je.evictor.Evictor$LRUList: void <init>(int)>($i9);

        $r101[i#256] = $r102;

        i#256 = i#256 + 1;

        goto label03;

     label04:
        $z2 = this.<com.sleepycat.je.evictor.Evictor: boolean isShared>;

        if $z2 == 0 goto label05;

        $r103 = new java.util.ArrayList;

        specialinvoke $r103.<java.util.ArrayList: void <init>()>();

        this.<com.sleepycat.je.evictor.Evictor: java.util.List envInfos> = $r103;

        goto label06;

     label05:
        this.<com.sleepycat.je.evictor.Evictor: java.util.List envInfos> = null;

     label06:
        $r104 = <com.sleepycat.je.config.EnvironmentParams: com.sleepycat.je.config.LongConfigParam MAX_OFF_HEAP_MEMORY>;

        $l10 = virtualinvoke configManager.<com.sleepycat.je.dbi.DbConfigManager: long getLong(com.sleepycat.je.config.LongConfigParam)>($r104);

        $b11 = $l10 cmp 0L;

        if $b11 <= 0 goto label07;

        this.<com.sleepycat.je.evictor.Evictor: boolean mutateBins> = 0;

        this.<com.sleepycat.je.evictor.Evictor: boolean useDirtyLRUSet> = 0;

        this.<com.sleepycat.je.evictor.Evictor: boolean useOffHeapCache> = 1;

        goto label08;

     label07:
        $r105 = <com.sleepycat.je.config.EnvironmentParams: com.sleepycat.je.config.BooleanConfigParam EVICTOR_MUTATE_BINS>;

        $z3 = virtualinvoke configManager.<com.sleepycat.je.dbi.DbConfigManager: boolean getBoolean(com.sleepycat.je.config.BooleanConfigParam)>($r105);

        this.<com.sleepycat.je.evictor.Evictor: boolean mutateBins> = $z3;

        $r106 = <com.sleepycat.je.config.EnvironmentParams: com.sleepycat.je.config.BooleanConfigParam EVICTOR_USE_DIRTY_LRU>;

        $z4 = virtualinvoke configManager.<com.sleepycat.je.dbi.DbConfigManager: boolean getBoolean(com.sleepycat.je.config.BooleanConfigParam)>($r106);

        this.<com.sleepycat.je.evictor.Evictor: boolean useDirtyLRUSet> = $z4;

        this.<com.sleepycat.je.evictor.Evictor: boolean useOffHeapCache> = 0;

     label08:
        $r107 = new com.sleepycat.je.evictor.Evictor$RejectEvictHandler;

        $r108 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.AtomicLongStat nThreadUnavailable>;

        specialinvoke $r107.<com.sleepycat.je.evictor.Evictor$RejectEvictHandler: void <init>(com.sleepycat.je.utilint.AtomicLongStat)>($r108);

        rejectHandler = $r107;

        $r110 = new java.util.concurrent.ThreadPoolExecutor;

        $i13 = this.<com.sleepycat.je.evictor.Evictor: int maxPoolThreads>;

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r1 = new java.util.concurrent.ArrayBlockingQueue;

        specialinvoke $r1.<java.util.concurrent.ArrayBlockingQueue: void <init>(int)>(1);

        $r112 = new com.sleepycat.je.utilint.StoppableThreadFactory;

        $z5 = this.<com.sleepycat.je.evictor.Evictor: boolean isShared>;

        if $z5 == 0 goto label09;

        $r114 = null;

        goto label10;

     label09:
        $r114 = envImpl;

     label10:
        $r115 = this.<com.sleepycat.je.evictor.Evictor: java.util.logging.Logger logger>;

        specialinvoke $r112.<com.sleepycat.je.utilint.StoppableThreadFactory: void <init>(com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String,java.util.logging.Logger)>($r114, "JEEvictor", $r115);

        specialinvoke $r110.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>(corePoolSize, $i13, keepAliveTime, $r0, $r1, $r112, rejectHandler);

        this.<com.sleepycat.je.evictor.Evictor: java.util.concurrent.ThreadPoolExecutor evictionPool> = $r110;

        $r116 = <com.sleepycat.je.config.EnvironmentParams: com.sleepycat.je.config.BooleanConfigParam EVICTOR_ALLOW_BIN_DELTAS>;

        $z6 = virtualinvoke configManager.<com.sleepycat.je.dbi.DbConfigManager: boolean getBoolean(com.sleepycat.je.config.BooleanConfigParam)>($r116);

        this.<com.sleepycat.je.evictor.Evictor: boolean allowBinDeltas> = $z6;

        $r117 = <com.sleepycat.je.config.EnvironmentParams: com.sleepycat.je.config.BooleanConfigParam ENV_RUN_EVICTOR>;

        $z7 = virtualinvoke configManager.<com.sleepycat.je.dbi.DbConfigManager: boolean getBoolean(com.sleepycat.je.config.BooleanConfigParam)>($r117);

        this.<com.sleepycat.je.evictor.Evictor: boolean runEvictorThreads> = $z7;

        $r118 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.dbi.EnvironmentImpl firstEnvImpl>;

        virtualinvoke $r118.<com.sleepycat.je.dbi.EnvironmentImpl: void addConfigObserver(com.sleepycat.je.dbi.EnvConfigObserver)>(this);

        return;
    }

    public com.sleepycat.je.utilint.StatGroup loadStats(com.sleepycat.je.StatsConfig)
    {
        com.sleepycat.je.evictor.Evictor this;
        com.sleepycat.je.StatsConfig config;
        float binFetchMisses, binFetches, $f0;
        com.sleepycat.je.utilint.StatGroup copy, $r9, $r23;
        boolean $z0, $z1;
        com.sleepycat.je.utilint.IntStat $r0;
        java.util.List $r1;
        int $i0;
        java.lang.Integer $r2;
        com.sleepycat.je.utilint.AtomicLongStat $r3, $r5;
        java.lang.Long $r4, $r6;
        long $l1, $l2, $l4, $l5, $l6, $l7, $l8;
        com.sleepycat.je.utilint.FloatStat $r7;
        byte $b3;
        java.lang.Float $r8;
        com.sleepycat.je.utilint.LongStat $r10, $r13, $r16, $r19, $r21;
        com.sleepycat.je.utilint.StatDefinition $r11, $r14, $r17, $r20, $r22;
        java.util.concurrent.atomic.AtomicLong $r12, $r15, $r18;

        this := @this: com.sleepycat.je.evictor.Evictor;

        config := @parameter0: com.sleepycat.je.StatsConfig;

        $z0 = this.<com.sleepycat.je.evictor.Evictor: boolean isShared>;

        if $z0 == 0 goto label1;

        $r0 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.IntStat sharedCacheEnvs>;

        $r1 = this.<com.sleepycat.je.evictor.Evictor: java.util.List envInfos>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke $r0.<com.sleepycat.je.utilint.IntStat: void set(java.lang.Integer)>($r2);

     label1:
        $r3 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.AtomicLongStat nBINFetchMiss>;

        $r4 = virtualinvoke $r3.<com.sleepycat.je.utilint.AtomicLongStat: java.lang.Long get()>();

        $l1 = virtualinvoke $r4.<java.lang.Long: long longValue()>();

        binFetchMisses = (float) $l1;

        $r5 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.AtomicLongStat nBINFetch>;

        $r6 = virtualinvoke $r5.<com.sleepycat.je.utilint.AtomicLongStat: java.lang.Long get()>();

        $l2 = virtualinvoke $r6.<java.lang.Long: long longValue()>();

        binFetches = (float) $l2;

        $r7 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.FloatStat binFetchMissRatio>;

        $b3 = binFetches cmpl 0.0F;

        if $b3 <= 0 goto label2;

        $f0 = binFetchMisses / binFetches;

        goto label3;

     label2:
        $f0 = 0.0F;

     label3:
        $r8 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        virtualinvoke $r7.<com.sleepycat.je.utilint.FloatStat: void set(java.lang.Float)>($r8);

        $r9 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.StatGroup stats>;

        $z1 = virtualinvoke config.<com.sleepycat.je.StatsConfig: boolean getClear()>();

        copy = virtualinvoke $r9.<com.sleepycat.je.utilint.StatGroup: com.sleepycat.je.utilint.StatGroup cloneGroup(boolean)>($z1);

        $r10 = new com.sleepycat.je.utilint.LongStat;

        $r11 = <com.sleepycat.je.evictor.EvictorStatDefinition: com.sleepycat.je.utilint.StatDefinition CACHED_IN_SPARSE_TARGET>;

        $r12 = this.<com.sleepycat.je.evictor.Evictor: java.util.concurrent.atomic.AtomicLong nINSparseTarget>;

        $l4 = virtualinvoke $r12.<java.util.concurrent.atomic.AtomicLong: long get()>();

        specialinvoke $r10.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition,long)>(copy, $r11, $l4);

        $r13 = new com.sleepycat.je.utilint.LongStat;

        $r14 = <com.sleepycat.je.evictor.EvictorStatDefinition: com.sleepycat.je.utilint.StatDefinition CACHED_IN_NO_TARGET>;

        $r15 = this.<com.sleepycat.je.evictor.Evictor: java.util.concurrent.atomic.AtomicLong nINNoTarget>;

        $l5 = virtualinvoke $r15.<java.util.concurrent.atomic.AtomicLong: long get()>();

        specialinvoke $r13.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition,long)>(copy, $r14, $l5);

        $r16 = new com.sleepycat.je.utilint.LongStat;

        $r17 = <com.sleepycat.je.evictor.EvictorStatDefinition: com.sleepycat.je.utilint.StatDefinition CACHED_IN_COMPACT_KEY>;

        $r18 = this.<com.sleepycat.je.evictor.Evictor: java.util.concurrent.atomic.AtomicLong nINCompactKey>;

        $l6 = virtualinvoke $r18.<java.util.concurrent.atomic.AtomicLong: long get()>();

        specialinvoke $r16.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition,long)>(copy, $r17, $l6);

        $r19 = new com.sleepycat.je.utilint.LongStat;

        $r20 = <com.sleepycat.je.evictor.EvictorStatDefinition: com.sleepycat.je.utilint.StatDefinition PRI1_LRU_SIZE>;

        $l7 = virtualinvoke this.<com.sleepycat.je.evictor.Evictor: long getPri1LRUSize()>();

        specialinvoke $r19.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition,long)>(copy, $r20, $l7);

        $r21 = new com.sleepycat.je.utilint.LongStat;

        $r22 = <com.sleepycat.je.evictor.EvictorStatDefinition: com.sleepycat.je.utilint.StatDefinition PRI2_LRU_SIZE>;

        $l8 = virtualinvoke this.<com.sleepycat.je.evictor.Evictor: long getPri2LRUSize()>();

        specialinvoke $r21.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition,long)>(copy, $r22, $l8);

        $r23 = specialinvoke this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.StatGroup getINListStats(com.sleepycat.je.StatsConfig)>(config);

        virtualinvoke copy.<com.sleepycat.je.utilint.StatGroup: void addAll(com.sleepycat.je.utilint.StatGroup)>($r23);

        return copy;
    }

    long getPri1LRUSize()
    {
        com.sleepycat.je.evictor.Evictor this;
        long size#2, $l2;
        int i#4, $i0, $i1;
        com.sleepycat.je.evictor.Evictor$LRUList[] $r0;
        com.sleepycat.je.evictor.Evictor$LRUList $r1;

        this := @this: com.sleepycat.je.evictor.Evictor;

        size#2 = 0L;

        i#4 = 0;

     label1:
        $i0 = this.<com.sleepycat.je.evictor.Evictor: int numLRULists>;

        if i#4 >= $i0 goto label2;

        $r0 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.evictor.Evictor$LRUList[] pri1LRUSet>;

        $r1 = $r0[i#4];

        $i1 = virtualinvoke $r1.<com.sleepycat.je.evictor.Evictor$LRUList: int getSize()>();

        $l2 = (long) $i1;

        size#2 = size#2 + $l2;

        i#4 = i#4 + 1;

        goto label1;

     label2:
        return size#2;
    }

    long getPri2LRUSize()
    {
        com.sleepycat.je.evictor.Evictor this;
        long size#2, $l2;
        int i#4, $i0, $i1;
        com.sleepycat.je.evictor.Evictor$LRUList[] $r0;
        com.sleepycat.je.evictor.Evictor$LRUList $r1;

        this := @this: com.sleepycat.je.evictor.Evictor;

        size#2 = 0L;

        i#4 = 0;

     label1:
        $i0 = this.<com.sleepycat.je.evictor.Evictor: int numLRULists>;

        if i#4 >= $i0 goto label2;

        $r0 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.evictor.Evictor$LRUList[] pri2LRUSet>;

        $r1 = $r0[i#4];

        $i1 = virtualinvoke $r1.<com.sleepycat.je.evictor.Evictor$LRUList: int getSize()>();

        $l2 = (long) $i1;

        size#2 = size#2 + $l2;

        i#4 = i#4 + 1;

        goto label1;

     label2:
        return size#2;
    }

    private com.sleepycat.je.utilint.StatGroup getINListStats(com.sleepycat.je.StatsConfig)
    {
        com.sleepycat.je.evictor.Evictor this, l4#13;
        com.sleepycat.je.StatsConfig config;
        com.sleepycat.je.utilint.StatGroup totalINListStats, $r0, $r8, $r11;
        java.lang.Throwable l5, $r4;
        com.sleepycat.je.evictor.Evictor$EnvInfo ei;
        boolean $z0, $z1, $z2;
        java.util.ArrayList $r2, copy#18;
        java.util.List $r3;
        java.util.Iterator l4#25;
        java.lang.Object $r5;
        com.sleepycat.je.dbi.EnvironmentImpl $r6, $r9;
        com.sleepycat.je.dbi.INList $r7, $r10;

        this := @this: com.sleepycat.je.evictor.Evictor;

        config := @parameter0: com.sleepycat.je.StatsConfig;

        $z0 = this.<com.sleepycat.je.evictor.Evictor: boolean isShared>;

        if $z0 == 0 goto label10;

        $r0 = new com.sleepycat.je.utilint.StatGroup;

        specialinvoke $r0.<com.sleepycat.je.utilint.StatGroup: void <init>(java.lang.String,java.lang.String)>("temp", "temp");

        totalINListStats = $r0;

        $z1 = virtualinvoke config.<com.sleepycat.je.StatsConfig: boolean getFast()>();

        if $z1 == 0 goto label01;

        return totalINListStats;

     label01:
        l4#13 = this;

        entermonitor this;

     label02:
        $r2 = new java.util.ArrayList;

        $r3 = this.<com.sleepycat.je.evictor.Evictor: java.util.List envInfos>;

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        copy#18 = $r2;

        exitmonitor l4#13;

     label03:
        goto label07;

     label04:
        $r4 := @caughtexception;

     label05:
        l5 = $r4;

        exitmonitor l4#13;

     label06:
        throw l5;

     label07:
        l4#25 = interfaceinvoke copy#18.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z2 = interfaceinvoke l4#25.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label09;

        $r5 = interfaceinvoke l4#25.<java.util.Iterator: java.lang.Object next()>();

        ei = (com.sleepycat.je.evictor.Evictor$EnvInfo) $r5;

        $r6 = ei.<com.sleepycat.je.evictor.Evictor$EnvInfo: com.sleepycat.je.dbi.EnvironmentImpl env>;

        $r7 = virtualinvoke $r6.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.INList getInMemoryINs()>();

        $r8 = virtualinvoke $r7.<com.sleepycat.je.dbi.INList: com.sleepycat.je.utilint.StatGroup loadStats()>();

        virtualinvoke totalINListStats.<com.sleepycat.je.utilint.StatGroup: void addAll(com.sleepycat.je.utilint.StatGroup)>($r8);

        goto label08;

     label09:
        return totalINListStats;

     label10:
        $r9 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.dbi.EnvironmentImpl firstEnvImpl>;

        $r10 = virtualinvoke $r9.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.INList getInMemoryINs()>();

        $r11 = virtualinvoke $r10.<com.sleepycat.je.dbi.INList: com.sleepycat.je.utilint.StatGroup loadStats()>();

        return $r11;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label05 to label06 with label04;
    }

    public void requestShutdown()
    {
        com.sleepycat.je.evictor.Evictor this;
        java.util.concurrent.atomic.AtomicBoolean $r0;
        java.util.concurrent.ThreadPoolExecutor $r1;

        this := @this: com.sleepycat.je.evictor.Evictor;

        $r0 = this.<com.sleepycat.je.evictor.Evictor: java.util.concurrent.atomic.AtomicBoolean shutdownRequested>;

        virtualinvoke $r0.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        $r1 = this.<com.sleepycat.je.evictor.Evictor: java.util.concurrent.ThreadPoolExecutor evictionPool>;

        virtualinvoke $r1.<java.util.concurrent.ThreadPoolExecutor: void shutdown()>();

        return;
    }

    public synchronized void removeSharedCacheEnv(com.sleepycat.je.dbi.EnvironmentImpl)
    {
        com.sleepycat.je.evictor.Evictor this;
        com.sleepycat.je.dbi.EnvironmentImpl env, $r4;
        int numEnvs, i#8, j#20, $i0;
        com.sleepycat.je.evictor.Evictor$EnvInfo info;
        java.lang.AssertionError e, $r9;
        boolean $z0;
        com.sleepycat.je.EnvironmentFailureException $r0;
        java.util.List $r1, $r2, $r16;
        java.lang.Object $r3;
        com.sleepycat.je.evictor.Evictor$LRUList[] $r5, $r7;
        com.sleepycat.je.evictor.Evictor$LRUList $r6, $r8;
        java.io.PrintStream $r10, $r15;
        java.lang.StringBuilder $r11, $r12, $r13;
        java.lang.String $r14;

        this := @this: com.sleepycat.je.evictor.Evictor;

        env := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        $z0 = this.<com.sleepycat.je.evictor.Evictor: boolean isShared>;

        if $z0 != 0 goto label1;

        $r0 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedState()>();

        throw $r0;

     label1:
        $r1 = this.<com.sleepycat.je.evictor.Evictor: java.util.List envInfos>;

        numEnvs = interfaceinvoke $r1.<java.util.List: int size()>();

        i#8 = 0;

     label2:
        if i#8 >= numEnvs goto label9;

        $r2 = this.<com.sleepycat.je.evictor.Evictor: java.util.List envInfos>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i#8);

        info = (com.sleepycat.je.evictor.Evictor$EnvInfo) $r3;

        $r4 = info.<com.sleepycat.je.evictor.Evictor$EnvInfo: com.sleepycat.je.dbi.EnvironmentImpl env>;

        if $r4 != env goto label8;

     label3:
        j#20 = 0;

     label4:
        $i0 = this.<com.sleepycat.je.evictor.Evictor: int numLRULists>;

        if j#20 >= $i0 goto label5;

        $r5 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.evictor.Evictor$LRUList[] pri1LRUSet>;

        $r6 = $r5[j#20];

        virtualinvoke $r6.<com.sleepycat.je.evictor.Evictor$LRUList: void removeINsForEnv(com.sleepycat.je.dbi.EnvironmentImpl)>(env);

        $r7 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.evictor.Evictor$LRUList[] pri2LRUSet>;

        $r8 = $r7[j#20];

        virtualinvoke $r8.<com.sleepycat.je.evictor.Evictor$LRUList: void removeINsForEnv(com.sleepycat.je.dbi.EnvironmentImpl)>(env);

        j#20 = j#20 + 1;

        goto label4;

     label5:
        goto label7;

     label6:
        $r9 := @caughtexception;

        e = $r9;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("YYYYYYYYYY ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(e);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r14);

        $r15 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke e.<java.lang.AssertionError: void printStackTrace(java.io.PrintStream)>($r15);

        throw e;

     label7:
        $r16 = this.<com.sleepycat.je.evictor.Evictor: java.util.List envInfos>;

        interfaceinvoke $r16.<java.util.List: java.lang.Object remove(int)>(i#8);

        return;

     label8:
        i#8 = i#8 + 1;

        goto label2;

     label9:
        return;

        catch java.lang.AssertionError from label3 to label5 with label6;
    }

    public void alert()
    {
        com.sleepycat.je.evictor.Evictor this;
        boolean $z0, $z1, $z2;
        com.sleepycat.je.dbi.EnvironmentImpl $r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0, $i1;
        java.util.concurrent.ThreadPoolExecutor $r2;
        com.sleepycat.je.evictor.Evictor$BackgroundEvictTask $r3;

        this := @this: com.sleepycat.je.evictor.Evictor;

        $z0 = this.<com.sleepycat.je.evictor.Evictor: boolean runEvictorThreads>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $z1 = this.<com.sleepycat.je.evictor.Evictor: boolean isShared>;

        if $z1 != 0 goto label2;

        $r0 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.dbi.EnvironmentImpl firstEnvImpl>;

        $z2 = virtualinvoke $r0.<com.sleepycat.je.dbi.EnvironmentImpl: boolean isInInit()>();

        if $z2 == 0 goto label2;

        return;

     label2:
        $r1 = this.<com.sleepycat.je.evictor.Evictor: java.util.concurrent.atomic.AtomicInteger activePoolThreads>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i1 = this.<com.sleepycat.je.evictor.Evictor: int maxPoolThreads>;

        if $i0 < $i1 goto label3;

        return;

     label3:
        $r2 = this.<com.sleepycat.je.evictor.Evictor: java.util.concurrent.ThreadPoolExecutor evictionPool>;

        $r3 = new com.sleepycat.je.evictor.Evictor$BackgroundEvictTask;

        specialinvoke $r3.<com.sleepycat.je.evictor.Evictor$BackgroundEvictTask: void <init>(com.sleepycat.je.evictor.Evictor)>(this);

        virtualinvoke $r2.<java.util.concurrent.ThreadPoolExecutor: void execute(java.lang.Runnable)>($r3);

        return;
    }

    static java.util.concurrent.atomic.AtomicInteger access$200(com.sleepycat.je.evictor.Evictor)
    {
        com.sleepycat.je.evictor.Evictor x0;
        java.util.concurrent.atomic.AtomicInteger $r0;

        x0 := @parameter0: com.sleepycat.je.evictor.Evictor;

        $r0 = x0.<com.sleepycat.je.evictor.Evictor: java.util.concurrent.atomic.AtomicInteger activePoolThreads>;

        return $r0;
    }

    public synchronized boolean checkEnv(com.sleepycat.je.dbi.EnvironmentImpl)
    {
        com.sleepycat.je.evictor.Evictor this;
        com.sleepycat.je.dbi.EnvironmentImpl env, $r3;
        int numEnvs, i#7;
        com.sleepycat.je.evictor.Evictor$EnvInfo info;
        boolean $z0;
        java.util.List $r0, $r1;
        java.lang.Object $r2;
        com.sleepycat.je.EnvironmentFailureException $r4;

        this := @this: com.sleepycat.je.evictor.Evictor;

        env := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        $z0 = this.<com.sleepycat.je.evictor.Evictor: boolean isShared>;

        if $z0 == 0 goto label4;

        $r0 = this.<com.sleepycat.je.evictor.Evictor: java.util.List envInfos>;

        numEnvs = interfaceinvoke $r0.<java.util.List: int size()>();

        i#7 = 0;

     label1:
        if i#7 >= numEnvs goto label3;

        $r1 = this.<com.sleepycat.je.evictor.Evictor: java.util.List envInfos>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i#7);

        info = (com.sleepycat.je.evictor.Evictor$EnvInfo) $r2;

        $r3 = info.<com.sleepycat.je.evictor.Evictor$EnvInfo: com.sleepycat.je.dbi.EnvironmentImpl env>;

        if env != $r3 goto label2;

        return 1;

     label2:
        i#7 = i#7 + 1;

        goto label1;

     label3:
        return 0;

     label4:
        $r4 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedState()>();

        throw $r4;
    }

    public void doCriticalEviction(boolean)
    {
        com.sleepycat.je.evictor.Evictor this;
        boolean backgroundIO, $z0, $z1;
        com.sleepycat.je.evictor.Evictor$EvictionSource $r0;
        com.sleepycat.je.evictor.Arbiter $r1, $r2;

        this := @this: com.sleepycat.je.evictor.Evictor;

        backgroundIO := @parameter0: boolean;

        $r1 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.evictor.Arbiter arbiter>;

        $z0 = virtualinvoke $r1.<com.sleepycat.je.evictor.Arbiter: boolean isOverBudget()>();

        if $z0 == 0 goto label1;

        virtualinvoke this.<com.sleepycat.je.evictor.Evictor: void alert()>();

        $r2 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.evictor.Arbiter arbiter>;

        $z1 = virtualinvoke $r2.<com.sleepycat.je.evictor.Arbiter: boolean needCriticalEviction()>();

        if $z1 == 0 goto label1;

        $r0 = <com.sleepycat.je.evictor.Evictor$EvictionSource: com.sleepycat.je.evictor.Evictor$EvictionSource CRITICAL>;

        virtualinvoke this.<com.sleepycat.je.evictor.Evictor: void doEvict(com.sleepycat.je.evictor.Evictor$EvictionSource,boolean)>($r0, 0);

     label1:
        return;
    }

    void doEvict(com.sleepycat.je.evictor.Evictor$EvictionSource, boolean) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.evictor.Evictor this;
        com.sleepycat.je.evictor.Evictor$EvictionSource source, $r15;
        boolean backgroundIO, $z0, $z1, progress#9, $z2, $z3, $z4, $z5;
        long maxEvictBytes, bytesEvicted#13;
        java.lang.Throwable l10, $r28;
        com.sleepycat.je.evictor.Evictor$ReentrancyGuard $r0, $r27, $r29;
        com.sleepycat.je.utilint.LongStat $r1;
        int nBatches#11, $i1, $i3, $i4, $i5, $i6, $i7;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        com.sleepycat.je.evictor.Arbiter $r3, $r6;
        byte $b0, $b2;
        com.sleepycat.je.utilint.AtomicLongStat[] $r4;
        com.sleepycat.je.utilint.AtomicLongStat $r5;
        java.util.logging.Logger $r7, $r10, $r16, $r18;
        java.util.logging.Level $r8, $r17;
        com.sleepycat.je.dbi.EnvironmentImpl $r11, $r19;
        java.io.PrintStream $r13;
        java.lang.String $r14, $r26;
        java.lang.StringBuilder $r20, $r21, $r22, $r23, $r24, $r25;
        java.lang.NullPointerException soot0;

        this := @this: com.sleepycat.je.evictor.Evictor;

        source := @parameter0: com.sleepycat.je.evictor.Evictor$EvictionSource;

        backgroundIO := @parameter1: boolean;

        $z0 = this.<com.sleepycat.je.evictor.Evictor: boolean isEnabled>;

        if $z0 != 0 goto label01;

        return;

     label01:
        $r0 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.evictor.Evictor$ReentrancyGuard reentrancyGuard>;

        $z1 = virtualinvoke $r0.<com.sleepycat.je.evictor.Evictor$ReentrancyGuard: boolean enter()>();

        if $z1 != 0 goto label02;

        return;

     label02:
        $r1 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.LongStat nEvictionRuns>;

        virtualinvoke $r1.<com.sleepycat.je.utilint.LongStat: void increment()>();

     label03:
        progress#9 = 1;

        nBatches#11 = 0;

        bytesEvicted#13 = 0L;

     label04:
        if progress#9 == 0 goto label10;

        if nBatches#11 >= 100 goto label10;

        $r2 = this.<com.sleepycat.je.evictor.Evictor: java.util.concurrent.atomic.AtomicBoolean shutdownRequested>;

        $z2 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z2 != 0 goto label10;

        $r3 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.evictor.Arbiter arbiter>;

        maxEvictBytes = virtualinvoke $r3.<com.sleepycat.je.evictor.Arbiter: long getEvictionPledge()>();

        $b0 = maxEvictBytes cmp 0L;

        if $b0 != 0 goto label05;

        goto label10;

     label05:
        bytesEvicted#13 = virtualinvoke this.<com.sleepycat.je.evictor.Evictor: long evictBatch(com.sleepycat.je.evictor.Evictor$EvictionSource,boolean,long,com.sleepycat.je.evictor.Evictor$EvictionDebugStats)>(source, backgroundIO, maxEvictBytes, null);

        $r4 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.AtomicLongStat[] numBytesEvicted>;

        $i1 = virtualinvoke source.<com.sleepycat.je.evictor.Evictor$EvictionSource: int ordinal()>();

        $r5 = $r4[$i1];

        virtualinvoke $r5.<com.sleepycat.je.utilint.AtomicLongStat: void add(long)>(bytesEvicted#13);

        $b2 = bytesEvicted#13 cmp 0L;

        if $b2 != 0 goto label08;

        $r6 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.evictor.Arbiter arbiter>;

        $z3 = virtualinvoke $r6.<com.sleepycat.je.evictor.Arbiter: boolean stillNeedsEviction()>();

        if $z3 == 0 goto label06;

        $i3 = this.<com.sleepycat.je.evictor.Evictor: int numNoEvictionEvents>;

        if $i3 != 0 goto label06;

        $r7 = this.<com.sleepycat.je.evictor.Evictor: java.util.logging.Logger logger>;

        $r8 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z4 = virtualinvoke $r7.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r8);

        if $z4 == 0 goto label06;

        $i4 = this.<com.sleepycat.je.evictor.Evictor: int numNoEvictionEvents>;

        $i5 = $i4 + 1;

        this.<com.sleepycat.je.evictor.Evictor: int numNoEvictionEvents> = $i5;

        $r10 = this.<com.sleepycat.je.evictor.Evictor: java.util.logging.Logger logger>;

        $r11 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.dbi.EnvironmentImpl firstEnvImpl>;

        staticinvoke <com.sleepycat.je.utilint.LoggerUtils: void fine(java.util.logging.Logger,com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String)>($r10, $r11, "Eviction pass failed to evict any bytes");

        goto label07;

     label06:
        $i6 = this.<com.sleepycat.je.evictor.Evictor: int numNoEvictionEvents>;

        $i7 = $i6 + 1;

        this.<com.sleepycat.je.evictor.Evictor: int numNoEvictionEvents> = $i7;

     label07:
        progress#9 = 0;

        goto label09;

     label08:
        this.<com.sleepycat.je.evictor.Evictor: int numNoEvictionEvents> = 0;

     label09:
        nBatches#11 = nBatches#11 + 1;

        goto label04;

     label10:
        goto label11;

     label11:
        $r15 = <com.sleepycat.je.evictor.Evictor$EvictionSource: com.sleepycat.je.evictor.Evictor$EvictionSource EVICTORTHREAD>;

        if source != $r15 goto label12;

        $r16 = this.<com.sleepycat.je.evictor.Evictor: java.util.logging.Logger logger>;

        $r17 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        $z5 = virtualinvoke $r16.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r17);

        if $z5 == 0 goto label12;

        $r18 = this.<com.sleepycat.je.evictor.Evictor: java.util.logging.Logger logger>;

        $r19 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.dbi.EnvironmentImpl firstEnvImpl>;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Thread evicted ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(bytesEvicted#13);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes in ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(nBatches#11);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" batches");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.sleepycat.je.utilint.LoggerUtils: void finest(java.util.logging.Logger,com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String)>($r18, $r19, $r26);

     label12:
        $r27 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.evictor.Evictor$ReentrancyGuard reentrancyGuard>;

        virtualinvoke $r27.<com.sleepycat.je.evictor.Evictor$ReentrancyGuard: void leave()>();

        goto label16;

     label13:
        $r28 := @caughtexception;

     label14:
        l10 = $r28;

     label15:
        $r29 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.evictor.Evictor$ReentrancyGuard reentrancyGuard>;

        virtualinvoke $r29.<com.sleepycat.je.evictor.Evictor$ReentrancyGuard: void leave()>();

        throw l10;

     label16:
        return;

        catch java.lang.Throwable from label03 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    long evictBatch(com.sleepycat.je.evictor.Evictor$EvictionSource, boolean, long, com.sleepycat.je.evictor.Evictor$EvictionDebugStats) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.evictor.Evictor this, l12;
        com.sleepycat.je.evictor.Evictor$EvictionSource source;
        boolean bgIO, inPri1LRUSet#4, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        long maxEvictBytes, totalEvictedBytes#2, maxNodesScannedThisBatch#9, $l1, maxNodesScannedThisBatch#15, $l8, evictedBytes#109, evictedBytes#134, $l10, $l11, $l12, maxNodesScannedThisBatch#200, $l16;
        com.sleepycat.je.evictor.Evictor$EvictionDebugStats evictionStats;
        int numEnvs, numNodesScannedThisBatch#6, $i0, $i2, $i3, $i4, $i5, $i6, $i15;
        com.sleepycat.je.evictor.Evictor$EnvInfo info;
        java.lang.Throwable l15, l21, $r9, $r44;
        com.sleepycat.je.evictor.Evictor$DbCache dbCache, $r10;
        com.sleepycat.je.dbi.MemoryBudget memBudget;
        com.sleepycat.je.tree.IN target;
        com.sleepycat.je.dbi.DatabaseImpl targetDb, refreshedDb;
        com.sleepycat.je.dbi.EnvironmentImpl dbEnv, $r7, $r8, $r11, $r43, $r45;
        com.sleepycat.je.evictor.Evictor$RootEvictor rootEvictor, $r17;
        java.lang.String inInfo, errMsg, $r28, $r31, $r38;
        com.sleepycat.je.utilint.TestHook $r0, $r14;
        java.lang.AssertionError $r1, $r15;
        java.util.List $r3, $r4;
        java.lang.Object $r5;
        byte $b7, $b9, $b13, $b14;
        com.sleepycat.je.evictor.Arbiter $r12;
        com.sleepycat.je.utilint.LongStat $r13;
        com.sleepycat.je.dbi.DatabaseId $r16, $r34;
        com.sleepycat.je.tree.Tree $r18, $r37;
        com.sleepycat.je.dbi.DbTree $r20;
        java.lang.StringBuilder $r21, $r22, $r24, $r25, $r26, $r27, $r29, $r30, $r32, $r33, $r35, $r36, $r39, $r40, $r41;
        com.sleepycat.je.log.LogEntryType $r23;
        com.sleepycat.je.EnvironmentFailureException $r42;

        this := @this: com.sleepycat.je.evictor.Evictor;

        source := @parameter0: com.sleepycat.je.evictor.Evictor$EvictionSource;

        bgIO := @parameter1: boolean;

        maxEvictBytes := @parameter2: long;

        evictionStats := @parameter3: com.sleepycat.je.evictor.Evictor$EvictionDebugStats;

        totalEvictedBytes#2 = 0L;

        inPri1LRUSet#4 = 1;

        numNodesScannedThisBatch#6 = 0;

        maxNodesScannedThisBatch#9 = virtualinvoke this.<com.sleepycat.je.evictor.Evictor: long getPri1LRUSize()>();

        $i0 = this.<com.sleepycat.je.evictor.Evictor: int numLRULists>;

        $l1 = (long) $i0;

        maxNodesScannedThisBatch#15 = maxNodesScannedThisBatch#9 + $l1;

        $z0 = <com.sleepycat.je.evictor.Evictor: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $r0 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.TestHook evictProfile>;

        $z1 = staticinvoke <com.sleepycat.je.utilint.TestHookExecute: boolean doHookSetupIfSet(com.sleepycat.je.utilint.TestHook)>($r0);

        if $z1 != 0 goto label01;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label01:
        l12 = this;

        entermonitor this;

     label02:
        $z2 = this.<com.sleepycat.je.evictor.Evictor: boolean isShared>;

        if $z2 == 0 goto label05;

        $r3 = this.<com.sleepycat.je.evictor.Evictor: java.util.List envInfos>;

        numEnvs = interfaceinvoke $r3.<java.util.List: int size()>();

        if numEnvs <= 0 goto label04;

        $i2 = this.<com.sleepycat.je.evictor.Evictor: int specialEvictionIndex>;

        if $i2 < numEnvs goto label03;

        this.<com.sleepycat.je.evictor.Evictor: int specialEvictionIndex> = 0;

     label03:
        $r4 = this.<com.sleepycat.je.evictor.Evictor: java.util.List envInfos>;

        $i3 = this.<com.sleepycat.je.evictor.Evictor: int specialEvictionIndex>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i3);

        info = (com.sleepycat.je.evictor.Evictor$EnvInfo) $r5;

        $i4 = this.<com.sleepycat.je.evictor.Evictor: int specialEvictionIndex>;

        $i5 = $i4 + 1;

        this.<com.sleepycat.je.evictor.Evictor: int specialEvictionIndex> = $i5;

        $r7 = info.<com.sleepycat.je.evictor.Evictor$EnvInfo: com.sleepycat.je.dbi.EnvironmentImpl env>;

        totalEvictedBytes#2 = virtualinvoke $r7.<com.sleepycat.je.dbi.EnvironmentImpl: long specialEviction()>();

     label04:
        goto label06;

     label05:
        $r8 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.dbi.EnvironmentImpl firstEnvImpl>;

        totalEvictedBytes#2 = virtualinvoke $r8.<com.sleepycat.je.dbi.EnvironmentImpl: long specialEviction()>();

     label06:
        exitmonitor l12;

     label07:
        goto label11;

     label08:
        $r9 := @caughtexception;

     label09:
        l15 = $r9;

        exitmonitor l12;

     label10:
        throw l15;

     label11:
        $r10 = new com.sleepycat.je.evictor.Evictor$DbCache;

        $z3 = this.<com.sleepycat.je.evictor.Evictor: boolean isShared>;

        $i6 = this.<com.sleepycat.je.evictor.Evictor: int dbCacheClearCount>;

        specialinvoke $r10.<com.sleepycat.je.evictor.Evictor$DbCache: void <init>(boolean,int)>($z3, $i6);

        dbCache = $r10;

        $r11 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.dbi.EnvironmentImpl firstEnvImpl>;

        memBudget = virtualinvoke $r11.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.MemoryBudget getMemoryBudget()>();

     label12:
        $b7 = totalEvictedBytes#2 cmp maxEvictBytes;

        if $b7 >= 0 goto label24;

        $l8 = (long) numNodesScannedThisBatch#6;

        $b9 = $l8 cmp maxNodesScannedThisBatch#15;

        if $b9 >= 0 goto label24;

        $r12 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.evictor.Arbiter arbiter>;

        $z4 = virtualinvoke $r12.<com.sleepycat.je.evictor.Arbiter: boolean stillNeedsEviction()>();

        if $z4 == 0 goto label24;

        $z5 = this.<com.sleepycat.je.evictor.Evictor: boolean isShared>;

        if $z5 != 0 goto label13;

        $z6 = virtualinvoke memBudget.<com.sleepycat.je.dbi.MemoryBudget: boolean isTreeUsageAboveMinimum()>();

        if $z6 != 0 goto label13;

        goto label24;

     label13:
        target = specialinvoke this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.tree.IN getNextTarget(boolean)>(inPri1LRUSet#4);

        numNodesScannedThisBatch#6 = numNodesScannedThisBatch#6 + 1;

        if target == null goto label22;

        $r13 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.LongStat nNodesTargeted>;

        virtualinvoke $r13.<com.sleepycat.je.utilint.LongStat: void increment()>();

        goto label14;

     label14:
        $z7 = <com.sleepycat.je.evictor.Evictor: boolean $assertionsDisabled>;

        if $z7 != 0 goto label15;

        $r14 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.TestHook evictProfile>;

        $z8 = staticinvoke <com.sleepycat.je.utilint.TestHookExecute: boolean doHookIfSet(com.sleepycat.je.utilint.TestHook,java.lang.Object)>($r14, target);

        if $z8 != 0 goto label15;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label15:
        targetDb = virtualinvoke target.<com.sleepycat.je.tree.IN: com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        dbEnv = virtualinvoke targetDb.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r16 = virtualinvoke targetDb.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.DatabaseId getId()>();

        refreshedDb = virtualinvoke dbCache.<com.sleepycat.je.evictor.Evictor$DbCache: com.sleepycat.je.dbi.DatabaseImpl getDb(com.sleepycat.je.dbi.EnvironmentImpl,com.sleepycat.je.dbi.DatabaseId)>(dbEnv, $r16);

        if refreshedDb == null goto label19;

        $z9 = virtualinvoke refreshedDb.<com.sleepycat.je.dbi.DatabaseImpl: boolean isDeleted()>();

        if $z9 != 0 goto label19;

        if refreshedDb != targetDb goto label19;

        $z10 = virtualinvoke target.<com.sleepycat.je.tree.IN: boolean isRoot()>();

        if $z10 == 0 goto label17;

        $r17 = new com.sleepycat.je.evictor.Evictor$RootEvictor;

        specialinvoke $r17.<com.sleepycat.je.evictor.Evictor$RootEvictor: void <init>(com.sleepycat.je.evictor.Evictor)>(this);

        rootEvictor = $r17;

        rootEvictor.<com.sleepycat.je.evictor.Evictor$RootEvictor: com.sleepycat.je.tree.IN target> = target;

        rootEvictor.<com.sleepycat.je.evictor.Evictor$RootEvictor: boolean backgroundIO> = bgIO;

        rootEvictor.<com.sleepycat.je.evictor.Evictor$RootEvictor: com.sleepycat.je.evictor.Evictor$EvictionSource source> = source;

        rootEvictor.<com.sleepycat.je.evictor.Evictor$RootEvictor: com.sleepycat.je.evictor.Evictor$EvictionDebugStats stats> = null;

        $r18 = virtualinvoke targetDb.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.tree.Tree getTree()>();

        virtualinvoke $r18.<com.sleepycat.je.tree.Tree: com.sleepycat.je.tree.IN withRootLatchedExclusive(com.sleepycat.je.tree.WithRootLatched)>(rootEvictor);

        $z11 = rootEvictor.<com.sleepycat.je.evictor.Evictor$RootEvictor: boolean flushed>;

        if $z11 == 0 goto label16;

        $r20 = virtualinvoke dbEnv.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.DbTree getDbTree()>();

        virtualinvoke $r20.<com.sleepycat.je.dbi.DbTree: void modifyDbRoot(com.sleepycat.je.dbi.DatabaseImpl)>(targetDb);

     label16:
        evictedBytes#134 = rootEvictor.<com.sleepycat.je.evictor.Evictor$RootEvictor: long evictedBytes>;

        goto label18;

     label17:
        evictedBytes#134 = specialinvoke this.<com.sleepycat.je.evictor.Evictor: long processTarget(com.sleepycat.je.evictor.Evictor$RootEvictor,com.sleepycat.je.tree.IN,com.sleepycat.je.tree.IN,int,boolean,com.sleepycat.je.evictor.Evictor$EvictionSource,com.sleepycat.je.evictor.Evictor$EvictionDebugStats)>(null, target, null, -1, bgIO, source, null);

     label18:
        totalEvictedBytes#2 = totalEvictedBytes#2 + evictedBytes#134;

        goto label22;

     label19:
        $z12 = virtualinvoke targetDb.<com.sleepycat.je.dbi.DatabaseImpl: boolean isDeleteFinished()>();

        if $z12 == 0 goto label22;

        $z13 = virtualinvoke target.<com.sleepycat.je.tree.IN: boolean getInListResident()>();

        if $z13 == 0 goto label22;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IN type=");

        $r23 = virtualinvoke target.<com.sleepycat.je.tree.IN: com.sleepycat.je.log.LogEntryType getLogType()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" id=");

        $l10 = virtualinvoke target.<com.sleepycat.je.tree.IN: long getNodeId()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l10);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not expected on INList");

        inInfo = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        if refreshedDb != null goto label20;

        $r28 = inInfo;

        goto label21;

     label20:
        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Database ");

        $r31 = virtualinvoke refreshedDb.<com.sleepycat.je.dbi.DatabaseImpl: java.lang.String getDebugName()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" id=");

        $r34 = virtualinvoke refreshedDb.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.DatabaseId getId()>();

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rootLsn=");

        $r37 = virtualinvoke refreshedDb.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.tree.Tree getTree()>();

        $l11 = virtualinvoke $r37.<com.sleepycat.je.tree.Tree: long getRootLsn()>();

        $r38 = staticinvoke <com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>($l11);

        $r39 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(inInfo);

        $r28 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

     label21:
        errMsg = $r28;

        $r42 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>(errMsg);

        throw $r42;

     label22:
        $l12 = (long) numNodesScannedThisBatch#6;

        $b13 = $l12 cmp maxNodesScannedThisBatch#15;

        if $b13 < 0 goto label23;

        $b14 = totalEvictedBytes#2 cmp maxEvictBytes;

        if $b14 >= 0 goto label23;

        if inPri1LRUSet#4 == 0 goto label23;

        numNodesScannedThisBatch#6 = 0;

        maxNodesScannedThisBatch#200 = virtualinvoke this.<com.sleepycat.je.evictor.Evictor: long getPri2LRUSize()>();

        $i15 = this.<com.sleepycat.je.evictor.Evictor: int numLRULists>;

        $l16 = (long) $i15;

        maxNodesScannedThisBatch#15 = maxNodesScannedThisBatch#200 + $l16;

        inPri1LRUSet#4 = 0;

        goto label23;

     label23:
        goto label12;

     label24:
        $r43 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.dbi.EnvironmentImpl firstEnvImpl>;

        virtualinvoke dbCache.<com.sleepycat.je.evictor.Evictor$DbCache: void releaseDbs(com.sleepycat.je.dbi.EnvironmentImpl)>($r43);

        goto label28;

     label25:
        $r44 := @caughtexception;

     label26:
        l21 = $r44;

     label27:
        $r45 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.dbi.EnvironmentImpl firstEnvImpl>;

        virtualinvoke dbCache.<com.sleepycat.je.evictor.Evictor$DbCache: void releaseDbs(com.sleepycat.je.dbi.EnvironmentImpl)>($r45);

        throw l21;

     label28:
        return totalEvictedBytes#2;

        catch java.lang.Throwable from label02 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label12 to label24 with label25;
        catch java.lang.Throwable from label26 to label27 with label25;
    }

    private com.sleepycat.je.tree.IN getNextTarget(boolean)
    {
        com.sleepycat.je.evictor.Evictor this;
        boolean inPri1LRUSet;
        int $i0, $i1, $i2, $i3, listId#14, $i4, $i5, $i6, $i7, listId#35;
        com.sleepycat.je.evictor.Evictor$LRUList[] $r1, $r4;
        com.sleepycat.je.evictor.Evictor$LRUList $r2, $r5;
        com.sleepycat.je.tree.IN target#20, target#41;

        this := @this: com.sleepycat.je.evictor.Evictor;

        inPri1LRUSet := @parameter0: boolean;

        if inPri1LRUSet == 0 goto label2;

        $i0 = this.<com.sleepycat.je.evictor.Evictor: int nextPri1LRUList>;

        $i1 = $i0 + 1;

        this.<com.sleepycat.je.evictor.Evictor: int nextPri1LRUList> = $i1;

        $i2 = staticinvoke <java.lang.Math: int abs(int)>($i0);

        $i3 = this.<com.sleepycat.je.evictor.Evictor: int numLRULists>;

        listId#14 = $i2 % $i3;

        $r1 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.evictor.Evictor$LRUList[] pri1LRUSet>;

        $r2 = $r1[listId#14];

        target#20 = virtualinvoke $r2.<com.sleepycat.je.evictor.Evictor$LRUList: com.sleepycat.je.tree.IN removeFront()>();

        if target#20 == null goto label1;

     label1:
        return target#20;

     label2:
        $i4 = this.<com.sleepycat.je.evictor.Evictor: int nextPri2LRUList>;

        $i5 = $i4 + 1;

        this.<com.sleepycat.je.evictor.Evictor: int nextPri2LRUList> = $i5;

        $i6 = staticinvoke <java.lang.Math: int abs(int)>($i4);

        $i7 = this.<com.sleepycat.je.evictor.Evictor: int numLRULists>;

        listId#35 = $i6 % $i7;

        $r4 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.evictor.Evictor$LRUList[] pri2LRUSet>;

        $r5 = $r4[listId#35];

        target#41 = virtualinvoke $r5.<com.sleepycat.je.evictor.Evictor$LRUList: com.sleepycat.je.tree.IN removeFront()>();

        if target#41 == null goto label3;

     label3:
        return target#41;
    }

    private long processTarget(com.sleepycat.je.evictor.Evictor$RootEvictor, com.sleepycat.je.tree.IN, com.sleepycat.je.tree.IN, int, boolean, com.sleepycat.je.evictor.Evictor$EvictionSource, com.sleepycat.je.evictor.Evictor$EvictionDebugStats) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.evictor.Evictor this;
        com.sleepycat.je.evictor.Evictor$RootEvictor rootEvictor;
        com.sleepycat.je.tree.IN parent, target#1;
        int index;
        boolean bgIO, isEvictable, targetIsLatched#3, parentIsLatched#5, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36;
        com.sleepycat.je.evictor.Evictor$EvictionSource source, $r6, $r7, $r10, $r11;
        com.sleepycat.je.evictor.Evictor$EvictionDebugStats stats;
        long l12, l16, evictedBytes#7, l14#52, l14#66, l14#85, l15#105, l14#122, l14#145, l14#159, l14#172, evictedBytes#180, $l0, evictedBytes#190, l15#202, l15#214, $l3, evictedBytes#235, l15#261, l15#277, $l5, evictedBytes#292, $l6, $l7, l15#318;
        com.sleepycat.je.dbi.DatabaseImpl db;
        com.sleepycat.je.dbi.EnvironmentImpl dbEnv;
        com.sleepycat.je.dbi.DatabaseId dbId, $r4, $r5;
        com.sleepycat.je.tree.BIN bin, $r12;
        java.lang.Throwable l18, $r16;
        java.lang.AssertionError $r1, $r3, $r8, $r13, $r15;
        com.sleepycat.je.tree.Node $r2;
        com.sleepycat.je.dbi.MemoryBudget $r9;
        byte $b1, $b2, $b4;
        com.sleepycat.je.utilint.TestHook $r14;

        this := @this: com.sleepycat.je.evictor.Evictor;

        rootEvictor := @parameter0: com.sleepycat.je.evictor.Evictor$RootEvictor;

        target#1 := @parameter1: com.sleepycat.je.tree.IN;

        parent := @parameter2: com.sleepycat.je.tree.IN;

        index := @parameter3: int;

        bgIO := @parameter4: boolean;

        source := @parameter5: com.sleepycat.je.evictor.Evictor$EvictionSource;

        stats := @parameter6: com.sleepycat.je.evictor.Evictor$EvictionDebugStats;

        targetIsLatched#3 = 0;

        parentIsLatched#5 = 0;

        if stats == null goto label04;

        if parent != null goto label01;

        if rootEvictor == null goto label02;

     label01:
        $z0 = 1;

        goto label03;

     label02:
        $z0 = 0;

     label03:
        stats.<com.sleepycat.je.evictor.Evictor$EvictionDebugStats: boolean withParent> = $z0;

     label04:
        if parent == null goto label09;

        $z1 = <com.sleepycat.je.evictor.Evictor: boolean $assertionsDisabled>;

        if $z1 != 0 goto label05;

        $z2 = virtualinvoke parent.<com.sleepycat.je.tree.IN: boolean isLatchExclusiveOwner()>();

        if $z2 != 0 goto label05;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label05:
        parentIsLatched#5 = 1;

        $r2 = virtualinvoke parent.<com.sleepycat.je.tree.IN: com.sleepycat.je.tree.Node getTarget(int)>(index);

        if target#1 == $r2 goto label08;

        specialinvoke this.<com.sleepycat.je.evictor.Evictor: void skip(com.sleepycat.je.tree.IN,com.sleepycat.je.evictor.Evictor$EvictionDebugStats)>(target#1, stats);

     label06:
        goto label07;

     label07:
        virtualinvoke parent.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        return 0L;

     label08:
        virtualinvoke target#1.<com.sleepycat.je.tree.IN: void latchNoUpdateLRU()>();

        goto label11;

     label09:
        if rootEvictor == null goto label10;

        target#1 = rootEvictor.<com.sleepycat.je.evictor.Evictor$RootEvictor: com.sleepycat.je.tree.IN target>;

        goto label11;

     label10:
        virtualinvoke target#1.<com.sleepycat.je.tree.IN: void latchNoUpdateLRU()>();

     label11:
        targetIsLatched#3 = 1;

        db = virtualinvoke target#1.<com.sleepycat.je.tree.IN: com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        dbEnv = virtualinvoke db.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $z3 = virtualinvoke target#1.<com.sleepycat.je.tree.IN: boolean getInListResident()>();

        if $z3 == 0 goto label12;

        $z4 = virtualinvoke this.<com.sleepycat.je.evictor.Evictor: boolean contains(com.sleepycat.je.tree.IN)>(target#1);

        if $z4 == 0 goto label15;

     label12:
        specialinvoke this.<com.sleepycat.je.evictor.Evictor: void skip(com.sleepycat.je.tree.IN,com.sleepycat.je.evictor.Evictor$EvictionDebugStats)>(target#1, stats);

     label13:
        virtualinvoke target#1.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        if parentIsLatched#5 == 0 goto label14;

        virtualinvoke parent.<com.sleepycat.je.tree.IN: void releaseLatch()>();

     label14:
        return 0L;

     label15:
        $z5 = virtualinvoke target#1.<com.sleepycat.je.tree.IN: boolean getDirty()>();

        if $z5 == 0 goto label18;

        $z6 = virtualinvoke dbEnv.<com.sleepycat.je.dbi.EnvironmentImpl: boolean isReadOnly()>();

        if $z6 == 0 goto label18;

        specialinvoke this.<com.sleepycat.je.evictor.Evictor: void skip(com.sleepycat.je.tree.IN,com.sleepycat.je.evictor.Evictor$EvictionDebugStats)>(target#1, stats);

     label16:
        virtualinvoke target#1.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        if parentIsLatched#5 == 0 goto label17;

        virtualinvoke parent.<com.sleepycat.je.tree.IN: void releaseLatch()>();

     label17:
        return 0L;

     label18:
        $z7 = virtualinvoke target#1.<com.sleepycat.je.tree.IN: boolean isUpperIN()>();

        if $z7 == 0 goto label22;

        $z8 = virtualinvoke target#1.<com.sleepycat.je.tree.IN: boolean hasCachedChildrenFlag()>();

        if $z8 == 0 goto label22;

        $z9 = <com.sleepycat.je.evictor.Evictor: boolean $assertionsDisabled>;

        if $z9 != 0 goto label19;

        $z10 = virtualinvoke target#1.<com.sleepycat.je.tree.IN: boolean hasCachedChildren()>();

        if $z10 != 0 goto label19;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label19:
        specialinvoke this.<com.sleepycat.je.evictor.Evictor: void skip(com.sleepycat.je.tree.IN,com.sleepycat.je.evictor.Evictor$EvictionDebugStats)>(target#1, stats);

     label20:
        virtualinvoke target#1.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        if parentIsLatched#5 == 0 goto label21;

        virtualinvoke parent.<com.sleepycat.je.tree.IN: void releaseLatch()>();

     label21:
        return 0L;

     label22:
        $z11 = virtualinvoke target#1.<com.sleepycat.je.tree.IN: boolean isRoot()>();

        if $z11 == 0 goto label26;

        dbId = virtualinvoke db.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.DatabaseId getId()>();

        $r4 = <com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseId ID_DB_ID>;

        $z12 = virtualinvoke dbId.<com.sleepycat.je.dbi.DatabaseId: boolean equals(java.lang.Object)>($r4);

        if $z12 != 0 goto label23;

        $r5 = <com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseId NAME_DB_ID>;

        $z13 = virtualinvoke dbId.<com.sleepycat.je.dbi.DatabaseId: boolean equals(java.lang.Object)>($r5);

        if $z13 == 0 goto label26;

     label23:
        specialinvoke this.<com.sleepycat.je.evictor.Evictor: void skip(com.sleepycat.je.tree.IN,com.sleepycat.je.evictor.Evictor$EvictionDebugStats)>(target#1, stats);

     label24:
        virtualinvoke target#1.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        if parentIsLatched#5 == 0 goto label25;

        virtualinvoke parent.<com.sleepycat.je.tree.IN: void releaseLatch()>();

     label25:
        return 0L;

     label26:
        $z14 = this.<com.sleepycat.je.evictor.Evictor: boolean isShared>;

        if $z14 == 0 goto label29;

        $z15 = virtualinvoke dbEnv.<com.sleepycat.je.dbi.EnvironmentImpl: boolean isInInit()>();

        if $z15 == 0 goto label29;

        $r6 = <com.sleepycat.je.evictor.Evictor$EvictionSource: com.sleepycat.je.evictor.Evictor$EvictionSource EVICTORTHREAD>;

        if source != $r6 goto label29;

        specialinvoke this.<com.sleepycat.je.evictor.Evictor: void putBack(com.sleepycat.je.tree.IN,com.sleepycat.je.evictor.Evictor$EvictionDebugStats,int)>(target#1, stats, 0);

     label27:
        virtualinvoke target#1.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        if parentIsLatched#5 == 0 goto label28;

        virtualinvoke parent.<com.sleepycat.je.tree.IN: void releaseLatch()>();

     label28:
        return 0L;

     label29:
        $z16 = <com.sleepycat.je.evictor.Evictor: boolean $assertionsDisabled>;

        if $z16 != 0 goto label30;

        $z17 = virtualinvoke dbEnv.<com.sleepycat.je.dbi.EnvironmentImpl: boolean isInInit()>();

        if $z17 == 0 goto label30;

        $r7 = <com.sleepycat.je.evictor.Evictor$EvictionSource: com.sleepycat.je.evictor.Evictor$EvictionSource EVICTORTHREAD>;

        if source != $r7 goto label30;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label30:
        $z18 = this.<com.sleepycat.je.evictor.Evictor: boolean isShared>;

        if $z18 == 0 goto label37;

        $z19 = virtualinvoke dbEnv.<com.sleepycat.je.dbi.EnvironmentImpl: boolean isClosed()>();

        if $z19 != 0 goto label31;

        $z20 = virtualinvoke dbEnv.<com.sleepycat.je.dbi.EnvironmentImpl: boolean wasInvalidated()>();

        if $z20 == 0 goto label34;

     label31:
        specialinvoke this.<com.sleepycat.je.evictor.Evictor: void skip(com.sleepycat.je.tree.IN,com.sleepycat.je.evictor.Evictor$EvictionDebugStats)>(target#1, stats);

     label32:
        virtualinvoke target#1.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        if parentIsLatched#5 == 0 goto label33;

        virtualinvoke parent.<com.sleepycat.je.tree.IN: void releaseLatch()>();

     label33:
        return 0L;

     label34:
        $r9 = virtualinvoke dbEnv.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.MemoryBudget getMemoryBudget()>();

        $z21 = virtualinvoke $r9.<com.sleepycat.je.dbi.MemoryBudget: boolean isTreeUsageAboveMinimum()>();

        if $z21 != 0 goto label37;

        specialinvoke this.<com.sleepycat.je.evictor.Evictor: void putBack(com.sleepycat.je.tree.IN,com.sleepycat.je.evictor.Evictor$EvictionDebugStats,int)>(target#1, stats, 1);

     label35:
        virtualinvoke target#1.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        if parentIsLatched#5 == 0 goto label36;

        virtualinvoke parent.<com.sleepycat.je.tree.IN: void releaseLatch()>();

     label36:
        return 0L;

     label37:
        $z22 = virtualinvoke target#1.<com.sleepycat.je.tree.IN: boolean isPinned()>();

        if $z22 == 0 goto label40;

        specialinvoke this.<com.sleepycat.je.evictor.Evictor: void putBack(com.sleepycat.je.tree.IN,com.sleepycat.je.evictor.Evictor$EvictionDebugStats,int)>(target#1, stats, 2);

     label38:
        virtualinvoke target#1.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        if parentIsLatched#5 == 0 goto label39;

        virtualinvoke parent.<com.sleepycat.je.tree.IN: void releaseLatch()>();

     label39:
        return 0L;

     label40:
        evictedBytes#180 = virtualinvoke target#1.<com.sleepycat.je.tree.IN: long partialEviction()>();

        $l0 = evictedBytes#180 & 4611686018427387904L;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label41;

        $z23 = 1;

        goto label42;

     label41:
        $z23 = 0;

     label42:
        isEvictable = $z23;

        evictedBytes#190 = evictedBytes#180 & -4611686018427387905L;

        $b2 = evictedBytes#190 cmp 0L;

        if $b2 <= 0 goto label46;

        $z24 = virtualinvoke target#1.<com.sleepycat.je.tree.IN: boolean isUpperIN()>();

        if $z24 != 0 goto label43;

        $r10 = <com.sleepycat.je.evictor.Evictor$EvictionSource: com.sleepycat.je.evictor.Evictor$EvictionSource CACHEMODE>;

        if source == $r10 goto label46;

     label43:
        specialinvoke this.<com.sleepycat.je.evictor.Evictor: void strippedPutBack(com.sleepycat.je.tree.IN,com.sleepycat.je.evictor.Evictor$EvictionDebugStats)>(target#1, stats);

        l15#202 = evictedBytes#190;

     label44:
        virtualinvoke target#1.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        if parentIsLatched#5 == 0 goto label45;

        virtualinvoke parent.<com.sleepycat.je.tree.IN: void releaseLatch()>();

     label45:
        return l15#202;

     label46:
        if isEvictable != 0 goto label49;

        specialinvoke this.<com.sleepycat.je.evictor.Evictor: void putBack(com.sleepycat.je.tree.IN,com.sleepycat.je.evictor.Evictor$EvictionDebugStats,int)>(target#1, stats, 5);

        l15#214 = evictedBytes#190;

     label47:
        virtualinvoke target#1.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        if parentIsLatched#5 == 0 goto label48;

        virtualinvoke parent.<com.sleepycat.je.tree.IN: void releaseLatch()>();

     label48:
        return l15#214;

     label49:
        $z25 = virtualinvoke target#1.<com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z25 == 0 goto label53;

        $r11 = <com.sleepycat.je.evictor.Evictor$EvictionSource: com.sleepycat.je.evictor.Evictor$EvictionSource CACHEMODE>;

        if source == $r11 goto label53;

        $z26 = this.<com.sleepycat.je.evictor.Evictor: boolean mutateBins>;

        if $z26 == 0 goto label53;

        $r12 = (com.sleepycat.je.tree.BIN) target#1;

        $z27 = virtualinvoke $r12.<com.sleepycat.je.tree.BIN: boolean canMutateToBINDelta()>();

        if $z27 == 0 goto label53;

        bin = (com.sleepycat.je.tree.BIN) target#1;

        $l3 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: long mutateToBINDelta()>();

        evictedBytes#235 = evictedBytes#190 + $l3;

        $z28 = <com.sleepycat.je.evictor.Evictor: boolean $assertionsDisabled>;

        if $z28 != 0 goto label50;

        $b4 = evictedBytes#235 cmp 0L;

        if $b4 > 0 goto label50;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label50:
        specialinvoke this.<com.sleepycat.je.evictor.Evictor: void binDeltaPutBack(com.sleepycat.je.tree.IN,com.sleepycat.je.evictor.Evictor$EvictionDebugStats)>(target#1, stats);

        l16 = evictedBytes#235;

     label51:
        virtualinvoke target#1.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        if parentIsLatched#5 == 0 goto label52;

        virtualinvoke parent.<com.sleepycat.je.tree.IN: void releaseLatch()>();

     label52:
        return l16;

     label53:
        $z29 = this.<com.sleepycat.je.evictor.Evictor: boolean useDirtyLRUSet>;

        if $z29 == 0 goto label56;

        $z30 = virtualinvoke target#1.<com.sleepycat.je.tree.IN: boolean getDirty()>();

        if $z30 == 0 goto label56;

        $z31 = virtualinvoke target#1.<com.sleepycat.je.tree.IN: boolean isInPri2LRU()>();

        if $z31 != 0 goto label56;

        specialinvoke this.<com.sleepycat.je.evictor.Evictor: void moveToPri2LRU(com.sleepycat.je.tree.IN,com.sleepycat.je.evictor.Evictor$EvictionDebugStats)>(target#1, stats);

        l15#261 = evictedBytes#190;

     label54:
        virtualinvoke target#1.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        if parentIsLatched#5 == 0 goto label55;

        virtualinvoke parent.<com.sleepycat.je.tree.IN: void releaseLatch()>();

     label55:
        return l15#261;

     label56:
        $z32 = this.<com.sleepycat.je.evictor.Evictor: boolean useOffHeapCache>;

        if $z32 == 0 goto label59;

        $z33 = virtualinvoke target#1.<com.sleepycat.je.tree.IN: boolean hasOffHeapBINIds()>();

        if $z33 == 0 goto label59;

        $z34 = virtualinvoke target#1.<com.sleepycat.je.tree.IN: boolean isInPri2LRU()>();

        if $z34 != 0 goto label59;

        specialinvoke this.<com.sleepycat.je.evictor.Evictor: void moveToPri2LRU(com.sleepycat.je.tree.IN,com.sleepycat.je.evictor.Evictor$EvictionDebugStats)>(target#1, stats);

        l15#277 = evictedBytes#190;

     label57:
        virtualinvoke target#1.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        if parentIsLatched#5 == 0 goto label58;

        virtualinvoke parent.<com.sleepycat.je.tree.IN: void releaseLatch()>();

     label58:
        return l15#277;

     label59:
        if rootEvictor == null goto label60;

        $l5 = specialinvoke this.<com.sleepycat.je.evictor.Evictor: long evictRoot(com.sleepycat.je.evictor.Evictor$RootEvictor,boolean,com.sleepycat.je.evictor.Evictor$EvictionSource,com.sleepycat.je.evictor.Evictor$EvictionDebugStats)>(rootEvictor, bgIO, source, stats);

        evictedBytes#292 = evictedBytes#190 + $l5;

        goto label63;

     label60:
        if parent == null goto label61;

        $l6 = specialinvoke this.<com.sleepycat.je.evictor.Evictor: long evict(com.sleepycat.je.tree.IN,com.sleepycat.je.tree.IN,int,boolean,com.sleepycat.je.evictor.Evictor$EvictionDebugStats)>(target#1, parent, index, bgIO, stats);

        evictedBytes#292 = evictedBytes#190 + $l6;

        goto label63;

     label61:
        $z35 = <com.sleepycat.je.evictor.Evictor: boolean $assertionsDisabled>;

        if $z35 != 0 goto label62;

        $r14 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.TestHook preEvictINHook>;

        $z36 = staticinvoke <com.sleepycat.je.utilint.TestHookExecute: boolean doHookIfSet(com.sleepycat.je.utilint.TestHook)>($r14);

        if $z36 != 0 goto label62;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label62:
        targetIsLatched#3 = 0;

        $l7 = specialinvoke this.<com.sleepycat.je.evictor.Evictor: long findParentAndRetry(com.sleepycat.je.tree.IN,boolean,com.sleepycat.je.evictor.Evictor$EvictionSource,com.sleepycat.je.evictor.Evictor$EvictionDebugStats)>(target#1, bgIO, source, stats);

        evictedBytes#292 = evictedBytes#190 + $l7;

     label63:
        l15#318 = evictedBytes#292;

     label64:
        if targetIsLatched#3 == 0 goto label65;

        virtualinvoke target#1.<com.sleepycat.je.tree.IN: void releaseLatch()>();

     label65:
        if parentIsLatched#5 == 0 goto label66;

        virtualinvoke parent.<com.sleepycat.je.tree.IN: void releaseLatch()>();

     label66:
        return l15#318;

     label67:
        $r16 := @caughtexception;

     label68:
        l18 = $r16;

     label69:
        if targetIsLatched#3 == 0 goto label70;

        virtualinvoke target#1.<com.sleepycat.je.tree.IN: void releaseLatch()>();

     label70:
        if parentIsLatched#5 == 0 goto label71;

        virtualinvoke parent.<com.sleepycat.je.tree.IN: void releaseLatch()>();

     label71:
        throw l18;

        catch java.lang.Throwable from label04 to label06 with label67;
        catch java.lang.Throwable from label08 to label13 with label67;
        catch java.lang.Throwable from label15 to label16 with label67;
        catch java.lang.Throwable from label18 to label20 with label67;
        catch java.lang.Throwable from label22 to label24 with label67;
        catch java.lang.Throwable from label26 to label27 with label67;
        catch java.lang.Throwable from label29 to label32 with label67;
        catch java.lang.Throwable from label34 to label35 with label67;
        catch java.lang.Throwable from label37 to label38 with label67;
        catch java.lang.Throwable from label40 to label44 with label67;
        catch java.lang.Throwable from label46 to label47 with label67;
        catch java.lang.Throwable from label49 to label51 with label67;
        catch java.lang.Throwable from label53 to label54 with label67;
        catch java.lang.Throwable from label56 to label57 with label67;
        catch java.lang.Throwable from label59 to label64 with label67;
        catch java.lang.Throwable from label68 to label69 with label67;
    }

    private void skip(com.sleepycat.je.tree.IN, com.sleepycat.je.evictor.Evictor$EvictionDebugStats)
    {
        com.sleepycat.je.evictor.Evictor this;
        com.sleepycat.je.tree.IN target;
        com.sleepycat.je.evictor.Evictor$EvictionDebugStats stats;
        com.sleepycat.je.utilint.LongStat $r0;

        this := @this: com.sleepycat.je.evictor.Evictor;

        target := @parameter0: com.sleepycat.je.tree.IN;

        stats := @parameter1: com.sleepycat.je.evictor.Evictor$EvictionDebugStats;

        $r0 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.LongStat nNodesSkipped>;

        virtualinvoke $r0.<com.sleepycat.je.utilint.LongStat: void increment()>();

        return;
    }

    public boolean contains(com.sleepycat.je.tree.IN)
    {
        com.sleepycat.je.evictor.Evictor this;
        com.sleepycat.je.tree.IN node;
        int listId, $i1;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.AssertionError $r0;
        long $l0, $l2, $l3;
        com.sleepycat.je.evictor.Evictor$LRUList[] $r1, $r3;
        com.sleepycat.je.evictor.Evictor$LRUList $r2, $r4;

        this := @this: com.sleepycat.je.evictor.Evictor;

        node := @parameter0: com.sleepycat.je.tree.IN;

        $z0 = <com.sleepycat.je.evictor.Evictor: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke node.<com.sleepycat.je.tree.IN: boolean isLatchOwner()>();

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $l0 = virtualinvoke node.<com.sleepycat.je.tree.IN: long getNodeId()>();

        $i1 = this.<com.sleepycat.je.evictor.Evictor: int numLRULists>;

        $l2 = (long) $i1;

        $l3 = $l0 % $l2;

        listId = (int) $l3;

        $z2 = virtualinvoke node.<com.sleepycat.je.tree.IN: boolean isInPri2LRU()>();

        if $z2 == 0 goto label2;

        $r1 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.evictor.Evictor$LRUList[] pri2LRUSet>;

        $r2 = $r1[listId];

        $z3 = virtualinvoke $r2.<com.sleepycat.je.evictor.Evictor$LRUList: boolean contains(com.sleepycat.je.tree.IN)>(node);

        return $z3;

     label2:
        $r3 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.evictor.Evictor$LRUList[] pri1LRUSet>;

        $r4 = $r3[listId];

        $z4 = virtualinvoke $r4.<com.sleepycat.je.evictor.Evictor$LRUList: boolean contains(com.sleepycat.je.tree.IN)>(node);

        return $z4;
    }

    private void putBack(com.sleepycat.je.tree.IN, com.sleepycat.je.evictor.Evictor$EvictionDebugStats, int)
    {
        com.sleepycat.je.evictor.Evictor this;
        com.sleepycat.je.tree.IN target;
        com.sleepycat.je.evictor.Evictor$EvictionDebugStats stats;
        int caller;
        boolean $z0;
        com.sleepycat.je.utilint.LongStat $r0;

        this := @this: com.sleepycat.je.evictor.Evictor;

        target := @parameter0: com.sleepycat.je.tree.IN;

        stats := @parameter1: com.sleepycat.je.evictor.Evictor$EvictionDebugStats;

        caller := @parameter2: int;

        $z0 = virtualinvoke target.<com.sleepycat.je.tree.IN: boolean isInPri2LRU()>();

        if $z0 == 0 goto label1;

        specialinvoke this.<com.sleepycat.je.evictor.Evictor: void pri2AddBack(com.sleepycat.je.tree.IN)>(target);

        goto label2;

     label1:
        virtualinvoke this.<com.sleepycat.je.evictor.Evictor: void addBack(com.sleepycat.je.tree.IN)>(target);

     label2:
        if stats == null goto label3;

        virtualinvoke stats.<com.sleepycat.je.evictor.Evictor$EvictionDebugStats: void incNumPutBack()>();

     label3:
        $r0 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.LongStat nNodesPutBack>;

        virtualinvoke $r0.<com.sleepycat.je.utilint.LongStat: void increment()>();

        return;
    }

    private void strippedPutBack(com.sleepycat.je.tree.IN, com.sleepycat.je.evictor.Evictor$EvictionDebugStats)
    {
        com.sleepycat.je.evictor.Evictor this;
        com.sleepycat.je.tree.IN target;
        com.sleepycat.je.evictor.Evictor$EvictionDebugStats stats;
        boolean $z0;
        com.sleepycat.je.utilint.LongStat $r0;

        this := @this: com.sleepycat.je.evictor.Evictor;

        target := @parameter0: com.sleepycat.je.tree.IN;

        stats := @parameter1: com.sleepycat.je.evictor.Evictor$EvictionDebugStats;

        $z0 = virtualinvoke target.<com.sleepycat.je.tree.IN: boolean isInPri2LRU()>();

        if $z0 == 0 goto label1;

        specialinvoke this.<com.sleepycat.je.evictor.Evictor: void pri2AddBack(com.sleepycat.je.tree.IN)>(target);

        goto label2;

     label1:
        virtualinvoke this.<com.sleepycat.je.evictor.Evictor: void addBack(com.sleepycat.je.tree.IN)>(target);

     label2:
        if stats == null goto label3;

        virtualinvoke stats.<com.sleepycat.je.evictor.Evictor$EvictionDebugStats: void incNumStripped()>();

     label3:
        $r0 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.LongStat nNodesStripped>;

        virtualinvoke $r0.<com.sleepycat.je.utilint.LongStat: void increment()>();

        return;
    }

    private void binDeltaPutBack(com.sleepycat.je.tree.IN, com.sleepycat.je.evictor.Evictor$EvictionDebugStats)
    {
        com.sleepycat.je.evictor.Evictor this;
        com.sleepycat.je.tree.IN target;
        com.sleepycat.je.evictor.Evictor$EvictionDebugStats stats;
        boolean $z0;
        com.sleepycat.je.utilint.LongStat $r0;

        this := @this: com.sleepycat.je.evictor.Evictor;

        target := @parameter0: com.sleepycat.je.tree.IN;

        stats := @parameter1: com.sleepycat.je.evictor.Evictor$EvictionDebugStats;

        $z0 = virtualinvoke target.<com.sleepycat.je.tree.IN: boolean isInPri2LRU()>();

        if $z0 == 0 goto label1;

        specialinvoke this.<com.sleepycat.je.evictor.Evictor: void pri2AddBack(com.sleepycat.je.tree.IN)>(target);

        goto label2;

     label1:
        virtualinvoke this.<com.sleepycat.je.evictor.Evictor: void addBack(com.sleepycat.je.tree.IN)>(target);

     label2:
        if stats == null goto label3;

        virtualinvoke stats.<com.sleepycat.je.evictor.Evictor$EvictionDebugStats: void incNumMutated()>();

     label3:
        $r0 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.LongStat nNodesMutated>;

        virtualinvoke $r0.<com.sleepycat.je.utilint.LongStat: void increment()>();

        return;
    }

    private void moveToPri2LRU(com.sleepycat.je.tree.IN, com.sleepycat.je.evictor.Evictor$EvictionDebugStats)
    {
        com.sleepycat.je.evictor.Evictor this;
        com.sleepycat.je.tree.IN target;
        com.sleepycat.je.evictor.Evictor$EvictionDebugStats stats;
        boolean $z0;
        com.sleepycat.je.utilint.LongStat $r0;

        this := @this: com.sleepycat.je.evictor.Evictor;

        target := @parameter0: com.sleepycat.je.tree.IN;

        stats := @parameter1: com.sleepycat.je.evictor.Evictor$EvictionDebugStats;

        if stats == null goto label1;

        $z0 = virtualinvoke target.<com.sleepycat.je.tree.IN: boolean isBIN()>();

        virtualinvoke stats.<com.sleepycat.je.evictor.Evictor$EvictionDebugStats: void incNumMoved(boolean)>($z0);

     label1:
        specialinvoke this.<com.sleepycat.je.evictor.Evictor: void pri2AddFront(com.sleepycat.je.tree.IN)>(target);

        $r0 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.LongStat nNodesMovedToPri2LRU>;

        virtualinvoke $r0.<com.sleepycat.je.utilint.LongStat: void increment()>();

        return;
    }

    private long evictRoot(com.sleepycat.je.evictor.Evictor$RootEvictor, boolean, com.sleepycat.je.evictor.Evictor$EvictionSource, com.sleepycat.je.evictor.Evictor$EvictionDebugStats)
    {
        com.sleepycat.je.evictor.Evictor this;
        com.sleepycat.je.evictor.Evictor$RootEvictor rootEvictor;
        boolean backgroundIO, $z0, $z1;
        com.sleepycat.je.evictor.Evictor$EvictionSource source;
        com.sleepycat.je.evictor.Evictor$EvictionDebugStats stats;
        com.sleepycat.je.tree.ChildReference rootRef;
        com.sleepycat.je.tree.IN target;
        com.sleepycat.je.dbi.DatabaseImpl db;
        com.sleepycat.je.dbi.EnvironmentImpl dbEnv;
        com.sleepycat.je.dbi.INList inList;
        com.sleepycat.je.log.Provisional provisional;
        long newLsn, evictBytes;
        com.sleepycat.je.tree.Node $r0;
        int $i0, $i1;
        com.sleepycat.je.evictor.OffHeapCache $r1;
        com.sleepycat.je.utilint.LongStat $r2, $r3, $r4;

        this := @this: com.sleepycat.je.evictor.Evictor;

        rootEvictor := @parameter0: com.sleepycat.je.evictor.Evictor$RootEvictor;

        backgroundIO := @parameter1: boolean;

        source := @parameter2: com.sleepycat.je.evictor.Evictor$EvictionSource;

        stats := @parameter3: com.sleepycat.je.evictor.Evictor$EvictionDebugStats;

        rootRef = rootEvictor.<com.sleepycat.je.evictor.Evictor$RootEvictor: com.sleepycat.je.tree.ChildReference rootRef>;

        $r0 = virtualinvoke rootRef.<com.sleepycat.je.tree.ChildReference: com.sleepycat.je.tree.Node getTarget()>();

        target = (com.sleepycat.je.tree.IN) $r0;

        db = virtualinvoke target.<com.sleepycat.je.tree.IN: com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        dbEnv = virtualinvoke db.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        inList = virtualinvoke dbEnv.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.INList getInMemoryINs()>();

        $i0 = virtualinvoke target.<com.sleepycat.je.tree.IN: int getNormalizedLevel()>();

        if $i0 != 2 goto label1;

        $r1 = virtualinvoke dbEnv.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.evictor.OffHeapCache getOffHeapCache()>();

        virtualinvoke $r1.<com.sleepycat.je.evictor.OffHeapCache: void flushAndDiscardBINChildren(com.sleepycat.je.tree.IN,boolean)>(target, backgroundIO);

     label1:
        $z0 = virtualinvoke target.<com.sleepycat.je.tree.IN: boolean getDirty()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke target.<com.sleepycat.je.tree.IN: int getLevel()>();

        provisional = virtualinvoke dbEnv.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.log.Provisional coordinateWithCheckpoint(com.sleepycat.je.dbi.DatabaseImpl,int,com.sleepycat.je.tree.IN)>(db, $i1, null);

        newLsn = virtualinvoke target.<com.sleepycat.je.tree.IN: long log(boolean,com.sleepycat.je.log.Provisional,boolean,com.sleepycat.je.tree.IN)>(0, provisional, backgroundIO, null);

        virtualinvoke rootRef.<com.sleepycat.je.tree.ChildReference: void setLsn(long)>(newLsn);

        rootEvictor.<com.sleepycat.je.evictor.Evictor$RootEvictor: boolean flushed> = 1;

     label2:
        virtualinvoke inList.<com.sleepycat.je.dbi.INList: void remove(com.sleepycat.je.tree.IN)>(target);

        evictBytes = virtualinvoke target.<com.sleepycat.je.tree.IN: long getBudgetedMemorySize()>();

        virtualinvoke rootRef.<com.sleepycat.je.tree.ChildReference: void clearTarget()>();

        $r2 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.LongStat nNodesEvicted>;

        virtualinvoke $r2.<com.sleepycat.je.utilint.LongStat: void increment()>();

        $r3 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.LongStat nRootNodesEvicted>;

        virtualinvoke $r3.<com.sleepycat.je.utilint.LongStat: void increment()>();

        $z1 = rootEvictor.<com.sleepycat.je.evictor.Evictor$RootEvictor: boolean flushed>;

        if $z1 == 0 goto label3;

        $r4 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.LongStat nDirtyNodesEvicted>;

        virtualinvoke $r4.<com.sleepycat.je.utilint.LongStat: void increment()>();

     label3:
        if stats == null goto label4;

        virtualinvoke stats.<com.sleepycat.je.evictor.Evictor$EvictionDebugStats: void incNumEvicted(boolean)>(0);

     label4:
        return evictBytes;
    }

    private long evict(com.sleepycat.je.tree.IN, com.sleepycat.je.tree.IN, int, boolean, com.sleepycat.je.evictor.Evictor$EvictionDebugStats)
    {
        com.sleepycat.je.evictor.Evictor this;
        com.sleepycat.je.tree.IN target, parent;
        int index, $i0, $i1;
        boolean backgroundIO, storedOffHeap#8, $z0, $z1, logged#26, $z2, $z3, $z4;
        com.sleepycat.je.evictor.Evictor$EvictionDebugStats stats;
        com.sleepycat.je.dbi.DatabaseImpl db;
        com.sleepycat.je.dbi.EnvironmentImpl dbEnv;
        com.sleepycat.je.evictor.OffHeapCache ohCache;
        com.sleepycat.je.log.Provisional provisional;
        long evictedBytes, loggedLsn#28;
        com.sleepycat.je.tree.BIN $r0;
        com.sleepycat.je.utilint.LongStat $r1, $r2;

        this := @this: com.sleepycat.je.evictor.Evictor;

        target := @parameter0: com.sleepycat.je.tree.IN;

        parent := @parameter1: com.sleepycat.je.tree.IN;

        index := @parameter2: int;

        backgroundIO := @parameter3: boolean;

        stats := @parameter4: com.sleepycat.je.evictor.Evictor$EvictionDebugStats;

        db = virtualinvoke target.<com.sleepycat.je.tree.IN: com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        dbEnv = virtualinvoke db.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        ohCache = virtualinvoke dbEnv.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.evictor.OffHeapCache getOffHeapCache()>();

        storedOffHeap#8 = 0;

        $z0 = this.<com.sleepycat.je.evictor.Evictor: boolean useOffHeapCache>;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke target.<com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z1 == 0 goto label1;

        $r0 = (com.sleepycat.je.tree.BIN) target;

        storedOffHeap#8 = virtualinvoke ohCache.<com.sleepycat.je.evictor.OffHeapCache: boolean storeEvictedBIN(com.sleepycat.je.tree.BIN,com.sleepycat.je.tree.IN,int)>($r0, parent, index);

     label1:
        $i0 = virtualinvoke target.<com.sleepycat.je.tree.IN: int getNormalizedLevel()>();

        if $i0 != 2 goto label2;

        virtualinvoke ohCache.<com.sleepycat.je.evictor.OffHeapCache: void flushAndDiscardBINChildren(com.sleepycat.je.tree.IN,boolean)>(target, backgroundIO);

     label2:
        logged#26 = 0;

        loggedLsn#28 = -1L;

        $z2 = virtualinvoke target.<com.sleepycat.je.tree.IN: boolean getDirty()>();

        if $z2 == 0 goto label3;

        if storedOffHeap#8 != 0 goto label3;

        $i1 = virtualinvoke target.<com.sleepycat.je.tree.IN: int getLevel()>();

        provisional = virtualinvoke dbEnv.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.log.Provisional coordinateWithCheckpoint(com.sleepycat.je.dbi.DatabaseImpl,int,com.sleepycat.je.tree.IN)>(db, $i1, parent);

        $z3 = this.<com.sleepycat.je.evictor.Evictor: boolean allowBinDeltas>;

        loggedLsn#28 = virtualinvoke target.<com.sleepycat.je.tree.IN: long log(boolean,com.sleepycat.je.log.Provisional,boolean,com.sleepycat.je.tree.IN)>($z3, provisional, backgroundIO, parent);

        logged#26 = 1;

     label3:
        evictedBytes = virtualinvoke target.<com.sleepycat.je.tree.IN: long getBudgetedMemorySize()>();

        virtualinvoke parent.<com.sleepycat.je.tree.IN: void detachNode(int,boolean,long)>(index, logged#26, loggedLsn#28);

        $r1 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.LongStat nNodesEvicted>;

        virtualinvoke $r1.<com.sleepycat.je.utilint.LongStat: void increment()>();

        if logged#26 == 0 goto label4;

        $r2 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.LongStat nDirtyNodesEvicted>;

        virtualinvoke $r2.<com.sleepycat.je.utilint.LongStat: void increment()>();

     label4:
        if stats == null goto label5;

        $z4 = virtualinvoke target.<com.sleepycat.je.tree.IN: boolean isBIN()>();

        virtualinvoke stats.<com.sleepycat.je.evictor.Evictor$EvictionDebugStats: void incNumEvicted(boolean)>($z4);

     label5:
        return evictedBytes;
    }

    private long findParentAndRetry(com.sleepycat.je.tree.IN, boolean, com.sleepycat.je.evictor.Evictor$EvictionSource, com.sleepycat.je.evictor.Evictor$EvictionDebugStats)
    {
        com.sleepycat.je.evictor.Evictor this;
        com.sleepycat.je.tree.IN target, $r2, $r3;
        boolean backgroundIO, $z0, $z1, $z2;
        com.sleepycat.je.evictor.Evictor$EvictionSource source;
        com.sleepycat.je.evictor.Evictor$EvictionDebugStats stats;
        com.sleepycat.je.tree.Tree tree;
        com.sleepycat.je.tree.SearchResult result;
        java.lang.Throwable l7, $r15;
        com.sleepycat.je.dbi.DatabaseImpl $r0;
        com.sleepycat.je.CacheMode $r1;
        int $i0;
        long $l1, $l2, $l3;
        java.lang.AssertionError $r4;
        com.sleepycat.je.dbi.EnvironmentImpl $r5;
        com.sleepycat.je.dbi.INList $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r12;
        java.lang.String $r11, $r13;
        com.sleepycat.je.EnvironmentFailureException $r14;

        this := @this: com.sleepycat.je.evictor.Evictor;

        target := @parameter0: com.sleepycat.je.tree.IN;

        backgroundIO := @parameter1: boolean;

        source := @parameter2: com.sleepycat.je.evictor.Evictor$EvictionSource;

        stats := @parameter3: com.sleepycat.je.evictor.Evictor$EvictionDebugStats;

        $r0 = virtualinvoke target.<com.sleepycat.je.tree.IN: com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        tree = virtualinvoke $r0.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.tree.Tree getTree()>();

        $r1 = <com.sleepycat.je.CacheMode: com.sleepycat.je.CacheMode UNCHANGED>;

        result = virtualinvoke tree.<com.sleepycat.je.tree.Tree: com.sleepycat.je.tree.SearchResult getParentINForChildIN(com.sleepycat.je.tree.IN,boolean,boolean,com.sleepycat.je.CacheMode)>(target, 0, 0, $r1);

        $z0 = result.<com.sleepycat.je.tree.SearchResult: boolean exactParentFound>;

        if $z0 == 0 goto label1;

        $r2 = result.<com.sleepycat.je.tree.SearchResult: com.sleepycat.je.tree.IN parent>;

        $i0 = result.<com.sleepycat.je.tree.SearchResult: int index>;

        $l1 = specialinvoke this.<com.sleepycat.je.evictor.Evictor: long processTarget(com.sleepycat.je.evictor.Evictor$RootEvictor,com.sleepycat.je.tree.IN,com.sleepycat.je.tree.IN,int,boolean,com.sleepycat.je.evictor.Evictor$EvictionSource,com.sleepycat.je.evictor.Evictor$EvictionDebugStats)>(null, target, $r2, $i0, backgroundIO, source, stats);

        return $l1;

     label1:
        $z1 = <com.sleepycat.je.evictor.Evictor: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r3 = result.<com.sleepycat.je.tree.SearchResult: com.sleepycat.je.tree.IN parent>;

        if $r3 == null goto label2;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        virtualinvoke target.<com.sleepycat.je.tree.IN: void latchNoUpdateLRU()>();

     label3:
        $z2 = virtualinvoke target.<com.sleepycat.je.tree.IN: boolean getInListResident()>();

        if $z2 == 0 goto label4;

        $r5 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.dbi.EnvironmentImpl firstEnvImpl>;

        $r6 = virtualinvoke $r5.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.INList getInMemoryINs()>();

        virtualinvoke $r6.<com.sleepycat.je.dbi.INList: void remove(com.sleepycat.je.tree.IN)>(target);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Node ");

        $l2 = virtualinvoke target.<com.sleepycat.je.tree.IN: long getNodeId()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has been detached from the in-memory tree, but it is still in the INList. lastLogged=");

        $l3 = virtualinvoke target.<com.sleepycat.je.tree.IN: long getLastLoggedLsn()>();

        $r11 = staticinvoke <com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>($l3);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>($r13);

        throw $r14;

     label4:
        virtualinvoke target.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        goto label8;

     label5:
        $r15 := @caughtexception;

     label6:
        l7 = $r15;

     label7:
        virtualinvoke target.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        throw l7;

     label8:
        return 0L;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void remove(com.sleepycat.je.tree.IN)
    {
        com.sleepycat.je.evictor.Evictor this;
        com.sleepycat.je.tree.IN node;
        int listId, $i1;
        boolean $z0, $z1, $z2;
        java.lang.AssertionError $r0;
        long $l0, $l2, $l3;
        com.sleepycat.je.evictor.Evictor$LRUList[] $r1, $r3;
        com.sleepycat.je.evictor.Evictor$LRUList $r2, $r4;

        this := @this: com.sleepycat.je.evictor.Evictor;

        node := @parameter0: com.sleepycat.je.tree.IN;

        $z0 = <com.sleepycat.je.evictor.Evictor: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke node.<com.sleepycat.je.tree.IN: boolean isLatchOwner()>();

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $l0 = virtualinvoke node.<com.sleepycat.je.tree.IN: long getNodeId()>();

        $i1 = this.<com.sleepycat.je.evictor.Evictor: int numLRULists>;

        $l2 = (long) $i1;

        $l3 = $l0 % $l2;

        listId = (int) $l3;

        $z2 = virtualinvoke node.<com.sleepycat.je.tree.IN: boolean isInPri2LRU()>();

        if $z2 == 0 goto label2;

        $r1 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.evictor.Evictor$LRUList[] pri2LRUSet>;

        $r2 = $r1[listId];

        virtualinvoke $r2.<com.sleepycat.je.evictor.Evictor$LRUList: boolean remove(com.sleepycat.je.tree.IN)>(node);

        goto label3;

     label2:
        $r3 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.evictor.Evictor$LRUList[] pri1LRUSet>;

        $r4 = $r3[listId];

        virtualinvoke $r4.<com.sleepycat.je.evictor.Evictor$LRUList: boolean remove(com.sleepycat.je.tree.IN)>(node);

     label3:
        return;
    }

    private void pri2AddFront(com.sleepycat.je.tree.IN)
    {
        com.sleepycat.je.evictor.Evictor this;
        com.sleepycat.je.tree.IN node;
        boolean $z0, $z1, $z2, $z3;
        java.lang.AssertionError $r0, $r1;
        com.sleepycat.je.evictor.Evictor$LRUList[] $r2;
        long $l0, $l2, $l3;
        int $i1, $i4;
        com.sleepycat.je.evictor.Evictor$LRUList $r3;

        this := @this: com.sleepycat.je.evictor.Evictor;

        node := @parameter0: com.sleepycat.je.tree.IN;

        $z0 = <com.sleepycat.je.evictor.Evictor: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke node.<com.sleepycat.je.tree.IN: boolean isLatchExclusiveOwner()>();

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $z2 = <com.sleepycat.je.evictor.Evictor: boolean $assertionsDisabled>;

        if $z2 != 0 goto label2;

        $z3 = virtualinvoke node.<com.sleepycat.je.tree.IN: boolean getInListResident()>();

        if $z3 != 0 goto label2;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label2:
        virtualinvoke node.<com.sleepycat.je.tree.IN: void setInPri2LRU(boolean)>(1);

        $r2 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.evictor.Evictor$LRUList[] pri2LRUSet>;

        $l0 = virtualinvoke node.<com.sleepycat.je.tree.IN: long getNodeId()>();

        $i1 = this.<com.sleepycat.je.evictor.Evictor: int numLRULists>;

        $l2 = (long) $i1;

        $l3 = $l0 % $l2;

        $i4 = (int) $l3;

        $r3 = $r2[$i4];

        virtualinvoke $r3.<com.sleepycat.je.evictor.Evictor$LRUList: void addFront(com.sleepycat.je.tree.IN)>(node);

        return;
    }

    private void pri2AddBack(com.sleepycat.je.tree.IN)
    {
        com.sleepycat.je.evictor.Evictor this;
        com.sleepycat.je.tree.IN node;
        boolean $z0, $z1, $z2, $z3;
        java.lang.AssertionError $r0, $r1;
        com.sleepycat.je.evictor.Evictor$LRUList[] $r2;
        long $l0, $l2, $l3;
        int $i1, $i4;
        com.sleepycat.je.evictor.Evictor$LRUList $r3;

        this := @this: com.sleepycat.je.evictor.Evictor;

        node := @parameter0: com.sleepycat.je.tree.IN;

        $z0 = <com.sleepycat.je.evictor.Evictor: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke node.<com.sleepycat.je.tree.IN: boolean isLatchExclusiveOwner()>();

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $z2 = <com.sleepycat.je.evictor.Evictor: boolean $assertionsDisabled>;

        if $z2 != 0 goto label2;

        $z3 = virtualinvoke node.<com.sleepycat.je.tree.IN: boolean getInListResident()>();

        if $z3 != 0 goto label2;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label2:
        virtualinvoke node.<com.sleepycat.je.tree.IN: void setInPri2LRU(boolean)>(1);

        $r2 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.evictor.Evictor$LRUList[] pri2LRUSet>;

        $l0 = virtualinvoke node.<com.sleepycat.je.tree.IN: long getNodeId()>();

        $i1 = this.<com.sleepycat.je.evictor.Evictor: int numLRULists>;

        $l2 = (long) $i1;

        $l3 = $l0 % $l2;

        $i4 = (int) $l3;

        $r3 = $r2[$i4];

        virtualinvoke $r3.<com.sleepycat.je.evictor.Evictor$LRUList: void addBack(com.sleepycat.je.tree.IN)>(node);

        return;
    }

    public void addBack(com.sleepycat.je.tree.IN)
    {
        com.sleepycat.je.evictor.Evictor this;
        com.sleepycat.je.tree.IN node;
        boolean $z0, $z1, $z2, $z3;
        com.sleepycat.je.dbi.EnvironmentImpl $r0;
        com.sleepycat.je.dbi.INList $r1;
        java.lang.AssertionError $r2;
        com.sleepycat.je.evictor.Evictor$LRUList[] $r3;
        long $l0, $l2, $l3;
        int $i1, $i4;
        com.sleepycat.je.evictor.Evictor$LRUList $r4;

        this := @this: com.sleepycat.je.evictor.Evictor;

        node := @parameter0: com.sleepycat.je.tree.IN;

        $z0 = this.<com.sleepycat.je.evictor.Evictor: boolean isEnabled>;

        if $z0 == 0 goto label2;

        $r0 = virtualinvoke node.<com.sleepycat.je.tree.IN: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r1 = virtualinvoke $r0.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.INList getInMemoryINs()>();

        $z1 = virtualinvoke $r1.<com.sleepycat.je.dbi.INList: boolean isEnabled()>();

        if $z1 == 0 goto label2;

        $z2 = <com.sleepycat.je.evictor.Evictor: boolean $assertionsDisabled>;

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke node.<com.sleepycat.je.tree.IN: boolean getInListResident()>();

        if $z3 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        virtualinvoke node.<com.sleepycat.je.tree.IN: void setInPri2LRU(boolean)>(0);

        $r3 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.evictor.Evictor$LRUList[] pri1LRUSet>;

        $l0 = virtualinvoke node.<com.sleepycat.je.tree.IN: long getNodeId()>();

        $i1 = this.<com.sleepycat.je.evictor.Evictor: int numLRULists>;

        $l2 = (long) $i1;

        $l3 = $l0 % $l2;

        $i4 = (int) $l3;

        $r4 = $r3[$i4];

        virtualinvoke $r4.<com.sleepycat.je.evictor.Evictor$LRUList: void addBack(com.sleepycat.je.tree.IN)>(node);

     label2:
        return;
    }

    public void shutdown()
    {
        com.sleepycat.je.evictor.Evictor this;
        java.util.concurrent.TimeUnit $r0;
        java.lang.InterruptedException l2, $r6;
        java.lang.Throwable l3, $r9;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        java.util.concurrent.ThreadPoolExecutor $r2, $r3, $r4, $r7, $r10;
        boolean shutdownFinished#7, shutdownFinished#14;
        int $i0;
        long $l1;

        this := @this: com.sleepycat.je.evictor.Evictor;

        $r1 = this.<com.sleepycat.je.evictor.Evictor: java.util.concurrent.atomic.AtomicBoolean shutdownRequested>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        $r2 = this.<com.sleepycat.je.evictor.Evictor: java.util.concurrent.ThreadPoolExecutor evictionPool>;

        virtualinvoke $r2.<java.util.concurrent.ThreadPoolExecutor: void shutdown()>();

     label1:
        $r3 = this.<com.sleepycat.je.evictor.Evictor: java.util.concurrent.ThreadPoolExecutor evictionPool>;

        $i0 = this.<com.sleepycat.je.evictor.Evictor: int terminateMillis>;

        $l1 = (long) $i0;

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        shutdownFinished#14 = virtualinvoke $r3.<java.util.concurrent.ThreadPoolExecutor: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>($l1, $r0);

     label2:
        if shutdownFinished#14 != 0 goto label5;

        $r4 = this.<com.sleepycat.je.evictor.Evictor: java.util.concurrent.ThreadPoolExecutor evictionPool>;

        virtualinvoke $r4.<java.util.concurrent.ThreadPoolExecutor: java.util.List shutdownNow()>();

        goto label5;

     label3:
        $r6 := @caughtexception;

        $r7 = this.<com.sleepycat.je.evictor.Evictor: java.util.concurrent.ThreadPoolExecutor evictionPool>;

        virtualinvoke $r7.<java.util.concurrent.ThreadPoolExecutor: java.util.List shutdownNow()>();

        goto label5;

     label4:
        $r9 := @caughtexception;

        l3 = $r9;

        $r10 = this.<com.sleepycat.je.evictor.Evictor: java.util.concurrent.ThreadPoolExecutor evictionPool>;

        virtualinvoke $r10.<java.util.concurrent.ThreadPoolExecutor: java.util.List shutdownNow()>();

        throw l3;

     label5:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public void doDaemonEviction(boolean)
    {
        com.sleepycat.je.evictor.Evictor this;
        boolean backgroundIO, $z0, $z1;
        com.sleepycat.je.evictor.Evictor$EvictionSource $r0;
        com.sleepycat.je.evictor.Arbiter $r1, $r2;

        this := @this: com.sleepycat.je.evictor.Evictor;

        backgroundIO := @parameter0: boolean;

        $r1 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.evictor.Arbiter arbiter>;

        $z0 = virtualinvoke $r1.<com.sleepycat.je.evictor.Arbiter: boolean isOverBudget()>();

        if $z0 == 0 goto label1;

        virtualinvoke this.<com.sleepycat.je.evictor.Evictor: void alert()>();

        $r2 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.evictor.Arbiter arbiter>;

        $z1 = virtualinvoke $r2.<com.sleepycat.je.evictor.Arbiter: boolean needCriticalEviction()>();

        if $z1 == 0 goto label1;

        $r0 = <com.sleepycat.je.evictor.Evictor$EvictionSource: com.sleepycat.je.evictor.Evictor$EvictionSource DAEMON>;

        virtualinvoke this.<com.sleepycat.je.evictor.Evictor: void doEvict(com.sleepycat.je.evictor.Evictor$EvictionSource,boolean)>($r0, backgroundIO);

     label1:
        return;
    }

    public void doManualEvict() throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.evictor.Evictor this;
        com.sleepycat.je.evictor.Evictor$EvictionSource $r0;

        this := @this: com.sleepycat.je.evictor.Evictor;

        $r0 = <com.sleepycat.je.evictor.Evictor$EvictionSource: com.sleepycat.je.evictor.Evictor$EvictionSource MANUAL>;

        virtualinvoke this.<com.sleepycat.je.evictor.Evictor: void doEvict(com.sleepycat.je.evictor.Evictor$EvictionSource,boolean)>($r0, 1);

        return;
    }

    public void setEnabled(boolean)
    {
        com.sleepycat.je.evictor.Evictor this;
        boolean v;

        this := @this: com.sleepycat.je.evictor.Evictor;

        v := @parameter0: boolean;

        this.<com.sleepycat.je.evictor.Evictor: boolean isEnabled> = 1;

        return;
    }

    public synchronized void addEnvironment(com.sleepycat.je.dbi.EnvironmentImpl)
    {
        com.sleepycat.je.evictor.Evictor this;
        com.sleepycat.je.dbi.EnvironmentImpl env, $r3;
        int numEnvs, i#7;
        com.sleepycat.je.evictor.Evictor$EnvInfo info, info, $r4;
        boolean $z0;
        java.util.List $r0, $r1, $r6;
        java.lang.Object $r2;
        com.sleepycat.je.dbi.INList $r5;
        com.sleepycat.je.EnvironmentFailureException $r7;

        this := @this: com.sleepycat.je.evictor.Evictor;

        env := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        $z0 = this.<com.sleepycat.je.evictor.Evictor: boolean isShared>;

        if $z0 == 0 goto label4;

        $r0 = this.<com.sleepycat.je.evictor.Evictor: java.util.List envInfos>;

        numEnvs = interfaceinvoke $r0.<java.util.List: int size()>();

        i#7 = 0;

     label1:
        if i#7 >= numEnvs goto label3;

        $r1 = this.<com.sleepycat.je.evictor.Evictor: java.util.List envInfos>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i#7);

        info = (com.sleepycat.je.evictor.Evictor$EnvInfo) $r2;

        $r3 = info.<com.sleepycat.je.evictor.Evictor$EnvInfo: com.sleepycat.je.dbi.EnvironmentImpl env>;

        if $r3 != env goto label2;

        return;

     label2:
        i#7 = i#7 + 1;

        goto label1;

     label3:
        $r4 = new com.sleepycat.je.evictor.Evictor$EnvInfo;

        specialinvoke $r4.<com.sleepycat.je.evictor.Evictor$EnvInfo: void <init>(com.sleepycat.je.evictor.Evictor$1)>(null);

        info = $r4;

        info.<com.sleepycat.je.evictor.Evictor$EnvInfo: com.sleepycat.je.dbi.EnvironmentImpl env> = env;

        $r5 = virtualinvoke env.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.INList getInMemoryINs()>();

        info.<com.sleepycat.je.evictor.Evictor$EnvInfo: com.sleepycat.je.dbi.INList ins> = $r5;

        $r6 = this.<com.sleepycat.je.evictor.Evictor: java.util.List envInfos>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(info);

        goto label5;

     label4:
        $r7 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedState()>();

        throw $r7;

     label5:
        return;
    }

    public long doCacheModeEvict(com.sleepycat.je.tree.IN, com.sleepycat.je.CacheMode)
    {
        com.sleepycat.je.evictor.Evictor this;
        com.sleepycat.je.tree.IN target;
        com.sleepycat.je.CacheMode cacheMode;
        com.sleepycat.je.evictor.Evictor$EvictionSource $r0;
        long $l0;

        this := @this: com.sleepycat.je.evictor.Evictor;

        target := @parameter0: com.sleepycat.je.tree.IN;

        cacheMode := @parameter1: com.sleepycat.je.CacheMode;

        $r0 = <com.sleepycat.je.evictor.Evictor$EvictionSource: com.sleepycat.je.evictor.Evictor$EvictionSource CACHEMODE>;

        $l0 = specialinvoke this.<com.sleepycat.je.evictor.Evictor: long doEvictOneIN(com.sleepycat.je.tree.IN,com.sleepycat.je.CacheMode,com.sleepycat.je.evictor.Evictor$EvictionSource)>(target, cacheMode, $r0);

        return $l0;
    }

    private long doEvictOneIN(com.sleepycat.je.tree.IN, com.sleepycat.je.CacheMode, com.sleepycat.je.evictor.Evictor$EvictionSource)
    {
        com.sleepycat.je.evictor.Evictor this;
        com.sleepycat.je.tree.IN target;
        com.sleepycat.je.CacheMode cacheMode, $r3;
        com.sleepycat.je.evictor.Evictor$EvictionSource source, $r2;
        java.lang.Throwable l8, l9, $r7, $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.AssertionError $r0, $r1;
        long evictedBytes#18, evictedBytes#23, l6#39, evictedBytes#56, l6#64;
        byte $b0;
        com.sleepycat.je.utilint.LongStat $r4;
        com.sleepycat.je.utilint.AtomicLongStat[] $r5, $r9;
        int $i1, $i2;
        com.sleepycat.je.utilint.AtomicLongStat $r6, $r10;
        com.sleepycat.je.evictor.Evictor$ReentrancyGuard $r8, $r11, $r13;

        this := @this: com.sleepycat.je.evictor.Evictor;

        target := @parameter0: com.sleepycat.je.tree.IN;

        cacheMode := @parameter1: com.sleepycat.je.CacheMode;

        source := @parameter2: com.sleepycat.je.evictor.Evictor$EvictionSource;

        $z0 = <com.sleepycat.je.evictor.Evictor: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $z1 = virtualinvoke target.<com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z1 != 0 goto label01;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label01:
        $z2 = <com.sleepycat.je.evictor.Evictor: boolean $assertionsDisabled>;

        if $z2 != 0 goto label02;

        $z3 = virtualinvoke target.<com.sleepycat.je.tree.IN: boolean isLatchOwner()>();

        if $z3 != 0 goto label02;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label02:
        $r2 = <com.sleepycat.je.evictor.Evictor$EvictionSource: com.sleepycat.je.evictor.Evictor$EvictionSource CACHEMODE>;

        if source != $r2 goto label09;

        $z4 = virtualinvoke target.<com.sleepycat.je.tree.IN: boolean getDirty()>();

        if $z4 == 0 goto label09;

        $z5 = this.<com.sleepycat.je.evictor.Evictor: boolean useOffHeapCache>;

        if $z5 != 0 goto label09;

     label03:
        evictedBytes#18 = 0L;

        $r3 = <com.sleepycat.je.CacheMode: com.sleepycat.je.CacheMode EVICT_BIN>;

        if cacheMode != $r3 goto label04;

        evictedBytes#23 = virtualinvoke target.<com.sleepycat.je.tree.IN: long partialEviction()>();

        evictedBytes#18 = evictedBytes#23 & -4611686018427387905L;

        $b0 = evictedBytes#18 cmp 0L;

        if $b0 <= 0 goto label04;

        $r4 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.LongStat nNodesStripped>;

        virtualinvoke $r4.<com.sleepycat.je.utilint.LongStat: void increment()>();

        $r5 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.AtomicLongStat[] numBytesEvicted>;

        $i1 = virtualinvoke source.<com.sleepycat.je.evictor.Evictor$EvictionSource: int ordinal()>();

        $r6 = $r5[$i1];

        virtualinvoke $r6.<com.sleepycat.je.utilint.AtomicLongStat: void add(long)>(evictedBytes#18);

     label04:
        l6#39 = evictedBytes#18;

     label05:
        virtualinvoke target.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        return l6#39;

     label06:
        $r7 := @caughtexception;

     label07:
        l8 = $r7;

     label08:
        virtualinvoke target.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        throw l8;

     label09:
        $r8 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.evictor.Evictor$ReentrancyGuard reentrancyGuard>;

        $z6 = virtualinvoke $r8.<com.sleepycat.je.evictor.Evictor$ReentrancyGuard: boolean enter()>();

        if $z6 != 0 goto label10;

        return 0L;

     label10:
        virtualinvoke this.<com.sleepycat.je.evictor.Evictor: void remove(com.sleepycat.je.tree.IN)>(target);

        virtualinvoke target.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        evictedBytes#56 = specialinvoke this.<com.sleepycat.je.evictor.Evictor: long processTarget(com.sleepycat.je.evictor.Evictor$RootEvictor,com.sleepycat.je.tree.IN,com.sleepycat.je.tree.IN,int,boolean,com.sleepycat.je.evictor.Evictor$EvictionSource,com.sleepycat.je.evictor.Evictor$EvictionDebugStats)>(null, target, null, -1, 0, source, null);

        $r9 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.AtomicLongStat[] numBytesEvicted>;

        $i2 = virtualinvoke source.<com.sleepycat.je.evictor.Evictor$EvictionSource: int ordinal()>();

        $r10 = $r9[$i2];

        virtualinvoke $r10.<com.sleepycat.je.utilint.AtomicLongStat: void add(long)>(evictedBytes#56);

        l6#64 = evictedBytes#56;

     label11:
        $r11 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.evictor.Evictor$ReentrancyGuard reentrancyGuard>;

        virtualinvoke $r11.<com.sleepycat.je.evictor.Evictor$ReentrancyGuard: void leave()>();

        return l6#64;

     label12:
        $r12 := @caughtexception;

     label13:
        l9 = $r12;

     label14:
        $r13 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.evictor.Evictor$ReentrancyGuard reentrancyGuard>;

        virtualinvoke $r13.<com.sleepycat.je.evictor.Evictor$ReentrancyGuard: void leave()>();

        throw l9;

        catch java.lang.Throwable from label03 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public boolean getUseDirtyLRUSet()
    {
        com.sleepycat.je.evictor.Evictor this;
        boolean $z0;

        this := @this: com.sleepycat.je.evictor.Evictor;

        $z0 = this.<com.sleepycat.je.evictor.Evictor: boolean useDirtyLRUSet>;

        return $z0;
    }

    public void moveToPri1LRU(com.sleepycat.je.tree.IN)
    {
        com.sleepycat.je.evictor.Evictor this;
        com.sleepycat.je.tree.IN node;
        int listId, $i1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.AssertionError $r0, $r3;
        long $l0, $l2, $l3;
        com.sleepycat.je.evictor.Evictor$LRUList[] $r1, $r4;
        com.sleepycat.je.evictor.Evictor$LRUList $r2, $r5;

        this := @this: com.sleepycat.je.evictor.Evictor;

        node := @parameter0: com.sleepycat.je.tree.IN;

        $z0 = <com.sleepycat.je.evictor.Evictor: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke node.<com.sleepycat.je.tree.IN: boolean isLatchExclusiveOwner()>();

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $z2 = virtualinvoke node.<com.sleepycat.je.tree.IN: boolean isInPri2LRU()>();

        if $z2 != 0 goto label2;

        return;

     label2:
        $l0 = virtualinvoke node.<com.sleepycat.je.tree.IN: long getNodeId()>();

        $i1 = this.<com.sleepycat.je.evictor.Evictor: int numLRULists>;

        $l2 = (long) $i1;

        $l3 = $l0 % $l2;

        listId = (int) $l3;

        $r1 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.evictor.Evictor$LRUList[] pri2LRUSet>;

        $r2 = $r1[listId];

        $z3 = virtualinvoke $r2.<com.sleepycat.je.evictor.Evictor$LRUList: boolean remove(com.sleepycat.je.tree.IN)>(node);

        if $z3 == 0 goto label4;

        $z4 = <com.sleepycat.je.evictor.Evictor: boolean $assertionsDisabled>;

        if $z4 != 0 goto label3;

        $z5 = virtualinvoke node.<com.sleepycat.je.tree.IN: boolean getInListResident()>();

        if $z5 != 0 goto label3;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label3:
        virtualinvoke node.<com.sleepycat.je.tree.IN: void setInPri2LRU(boolean)>(0);

        $r4 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.evictor.Evictor$LRUList[] pri1LRUSet>;

        $r5 = $r4[listId];

        virtualinvoke $r5.<com.sleepycat.je.evictor.Evictor$LRUList: void addBack(com.sleepycat.je.tree.IN)>(node);

     label4:
        return;
    }

    public void incNumLNsEvicted(long)
    {
        com.sleepycat.je.evictor.Evictor this;
        long inc;
        com.sleepycat.je.utilint.LongStat $r0;

        this := @this: com.sleepycat.je.evictor.Evictor;

        inc := @parameter0: long;

        $r0 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.LongStat nLNsEvicted>;

        virtualinvoke $r0.<com.sleepycat.je.utilint.LongStat: void add(long)>(inc);

        return;
    }

    public void incFullBINMissStats()
    {
        com.sleepycat.je.evictor.Evictor this;
        com.sleepycat.je.utilint.AtomicLongStat $r0;

        this := @this: com.sleepycat.je.evictor.Evictor;

        $r0 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.AtomicLongStat nFullBINMiss>;

        virtualinvoke $r0.<com.sleepycat.je.utilint.AtomicLongStat: void increment()>();

        return;
    }

    public void incBinDeltaBlindOps()
    {
        com.sleepycat.je.evictor.Evictor this;
        com.sleepycat.je.utilint.AtomicLongStat $r0;

        this := @this: com.sleepycat.je.evictor.Evictor;

        $r0 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.AtomicLongStat nBinDeltaBlindOps>;

        virtualinvoke $r0.<com.sleepycat.je.utilint.AtomicLongStat: void increment()>();

        return;
    }

    public void moveBack(com.sleepycat.je.tree.IN)
    {
        com.sleepycat.je.evictor.Evictor this;
        com.sleepycat.je.tree.IN node;
        boolean $z0, $z1, $z2;
        java.lang.AssertionError $r0;
        com.sleepycat.je.evictor.Evictor$LRUList[] $r1, $r3;
        long $l0, $l2, $l3, $l5, $l7, $l8;
        int $i1, $i4, $i6, $i9;
        com.sleepycat.je.evictor.Evictor$LRUList $r2, $r4;

        this := @this: com.sleepycat.je.evictor.Evictor;

        node := @parameter0: com.sleepycat.je.tree.IN;

        $z0 = <com.sleepycat.je.evictor.Evictor: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke node.<com.sleepycat.je.tree.IN: boolean isLatchOwner()>();

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $z2 = virtualinvoke node.<com.sleepycat.je.tree.IN: boolean isInPri2LRU()>();

        if $z2 == 0 goto label2;

        $r1 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.evictor.Evictor$LRUList[] pri2LRUSet>;

        $l0 = virtualinvoke node.<com.sleepycat.je.tree.IN: long getNodeId()>();

        $i1 = this.<com.sleepycat.je.evictor.Evictor: int numLRULists>;

        $l2 = (long) $i1;

        $l3 = $l0 % $l2;

        $i4 = (int) $l3;

        $r2 = $r1[$i4];

        virtualinvoke $r2.<com.sleepycat.je.evictor.Evictor$LRUList: void moveBack(com.sleepycat.je.tree.IN)>(node);

        goto label3;

     label2:
        $r3 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.evictor.Evictor$LRUList[] pri1LRUSet>;

        $l5 = virtualinvoke node.<com.sleepycat.je.tree.IN: long getNodeId()>();

        $i6 = this.<com.sleepycat.je.evictor.Evictor: int numLRULists>;

        $l7 = (long) $i6;

        $l8 = $l5 % $l7;

        $i9 = (int) $l8;

        $r4 = $r3[$i9];

        virtualinvoke $r4.<com.sleepycat.je.evictor.Evictor$LRUList: void moveBack(com.sleepycat.je.tree.IN)>(node);

     label3:
        return;
    }

    public void incBINFetchStats(boolean, boolean)
    {
        com.sleepycat.je.evictor.Evictor this;
        boolean isMiss, isDelta;
        com.sleepycat.je.utilint.AtomicLongStat $r0, $r1, $r2;

        this := @this: com.sleepycat.je.evictor.Evictor;

        isMiss := @parameter0: boolean;

        isDelta := @parameter1: boolean;

        $r0 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.AtomicLongStat nBINFetch>;

        virtualinvoke $r0.<com.sleepycat.je.utilint.AtomicLongStat: void increment()>();

        if isMiss == 0 goto label1;

        $r1 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.AtomicLongStat nBINFetchMiss>;

        virtualinvoke $r1.<com.sleepycat.je.utilint.AtomicLongStat: void increment()>();

        if isDelta == 0 goto label1;

        $r2 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.AtomicLongStat nBINDeltaFetchMiss>;

        virtualinvoke $r2.<com.sleepycat.je.utilint.AtomicLongStat: void increment()>();

     label1:
        return;
    }

    public void incUINFetchStats(boolean)
    {
        com.sleepycat.je.evictor.Evictor this;
        boolean isMiss;
        com.sleepycat.je.utilint.AtomicLongStat $r0, $r1;

        this := @this: com.sleepycat.je.evictor.Evictor;

        isMiss := @parameter0: boolean;

        $r0 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.AtomicLongStat nUpperINFetch>;

        virtualinvoke $r0.<com.sleepycat.je.utilint.AtomicLongStat: void increment()>();

        if isMiss == 0 goto label1;

        $r1 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.AtomicLongStat nUpperINFetchMiss>;

        virtualinvoke $r1.<com.sleepycat.je.utilint.AtomicLongStat: void increment()>();

     label1:
        return;
    }

    public void incLNFetchStats(boolean)
    {
        com.sleepycat.je.evictor.Evictor this;
        boolean isMiss;
        com.sleepycat.je.utilint.AtomicLongStat $r0, $r1;

        this := @this: com.sleepycat.je.evictor.Evictor;

        isMiss := @parameter0: boolean;

        $r0 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.AtomicLongStat nLNFetch>;

        virtualinvoke $r0.<com.sleepycat.je.utilint.AtomicLongStat: void increment()>();

        if isMiss == 0 goto label1;

        $r1 = this.<com.sleepycat.je.evictor.Evictor: com.sleepycat.je.utilint.AtomicLongStat nLNFetchMiss>;

        virtualinvoke $r1.<com.sleepycat.je.utilint.AtomicLongStat: void increment()>();

     label1:
        return;
    }

    public java.util.concurrent.atomic.AtomicLong getNINCompactKey()
    {
        com.sleepycat.je.evictor.Evictor this;
        java.util.concurrent.atomic.AtomicLong $r0;

        this := @this: com.sleepycat.je.evictor.Evictor;

        $r0 = this.<com.sleepycat.je.evictor.Evictor: java.util.concurrent.atomic.AtomicLong nINCompactKey>;

        return $r0;
    }

    public java.util.concurrent.atomic.AtomicLong getNINSparseTarget()
    {
        com.sleepycat.je.evictor.Evictor this;
        java.util.concurrent.atomic.AtomicLong $r0;

        this := @this: com.sleepycat.je.evictor.Evictor;

        $r0 = this.<com.sleepycat.je.evictor.Evictor: java.util.concurrent.atomic.AtomicLong nINSparseTarget>;

        return $r0;
    }

    public java.util.concurrent.atomic.AtomicLong getNINNoTarget()
    {
        com.sleepycat.je.evictor.Evictor this;
        java.util.concurrent.atomic.AtomicLong $r0;

        this := @this: com.sleepycat.je.evictor.Evictor;

        $r0 = this.<com.sleepycat.je.evictor.Evictor: java.util.concurrent.atomic.AtomicLong nINNoTarget>;

        return $r0;
    }

    static long access$100(com.sleepycat.je.evictor.Evictor, com.sleepycat.je.evictor.Evictor$RootEvictor, com.sleepycat.je.tree.IN, com.sleepycat.je.tree.IN, int, boolean, com.sleepycat.je.evictor.Evictor$EvictionSource, com.sleepycat.je.evictor.Evictor$EvictionDebugStats) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.evictor.Evictor x0;
        com.sleepycat.je.evictor.Evictor$RootEvictor x1;
        com.sleepycat.je.tree.IN x2, x3;
        int x4;
        boolean x5;
        com.sleepycat.je.evictor.Evictor$EvictionSource x6;
        com.sleepycat.je.evictor.Evictor$EvictionDebugStats x7;
        long $l0;

        x0 := @parameter0: com.sleepycat.je.evictor.Evictor;

        x1 := @parameter1: com.sleepycat.je.evictor.Evictor$RootEvictor;

        x2 := @parameter2: com.sleepycat.je.tree.IN;

        x3 := @parameter3: com.sleepycat.je.tree.IN;

        x4 := @parameter4: int;

        x5 := @parameter5: boolean;

        x6 := @parameter6: com.sleepycat.je.evictor.Evictor$EvictionSource;

        x7 := @parameter7: com.sleepycat.je.evictor.Evictor$EvictionDebugStats;

        $l0 = specialinvoke x0.<com.sleepycat.je.evictor.Evictor: long processTarget(com.sleepycat.je.evictor.Evictor$RootEvictor,com.sleepycat.je.tree.IN,com.sleepycat.je.tree.IN,int,boolean,com.sleepycat.je.evictor.Evictor$EvictionSource,com.sleepycat.je.evictor.Evictor$EvictionDebugStats)>(x1, null, null, -1, x5, x6, x7);

        return $l0;
    }


