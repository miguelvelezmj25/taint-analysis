    static void <clinit>()
    {
        sun.misc.Unsafe $r0, $r1, $r3;
        java.lang.Class l0#3;
        java.lang.reflect.Field $r2, $r4;
        long $l0, $l1;
        java.lang.Exception $r5, l0#15;
        java.lang.Error $r6;

     label1:
        $r0 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.ConcurrentLinkedQueue: sun.misc.Unsafe UNSAFE> = $r0;

        l0#3 = class "java/util/concurrent/ConcurrentLinkedQueue";

        $r1 = <java.util.concurrent.ConcurrentLinkedQueue: sun.misc.Unsafe UNSAFE>;

        $r2 = virtualinvoke l0#3.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("head");

        $l0 = virtualinvoke $r1.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r2);

        <java.util.concurrent.ConcurrentLinkedQueue: long headOffset> = $l0;

        $r3 = <java.util.concurrent.ConcurrentLinkedQueue: sun.misc.Unsafe UNSAFE>;

        $r4 = virtualinvoke l0#3.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("tail");

        $l1 = virtualinvoke $r3.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r4);

        <java.util.concurrent.ConcurrentLinkedQueue: long tailOffset> = $l1;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        l0#15 = $r5;

        $r6 = new java.lang.Error;

        specialinvoke $r6.<java.lang.Error: void <init>(java.lang.Throwable)>(l0#15);

        throw $r6;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.lang.Object[] toArray()
    {
        java.util.concurrent.ConcurrentLinkedQueue l0;
        java.util.ArrayList l1, $r0;
        java.lang.Object l3;
        java.util.concurrent.ConcurrentLinkedQueue$Node l2#5;
        java.lang.Object[] $r1;

        l0 := @this: java.util.concurrent.ConcurrentLinkedQueue;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        l1 = $r0;

        l2#5 = virtualinvoke l0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node first()>();

     label1:
        if l2#5 == null goto label3;

        l3 = l2#5.<java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item>;

        if l3 == null goto label2;

        virtualinvoke l1.<java.util.ArrayList: boolean add(java.lang.Object)>(l3);

     label2:
        l2#5 = virtualinvoke l0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node succ(java.util.concurrent.ConcurrentLinkedQueue$Node)>(l2#5);

        goto label1;

     label3:
        $r1 = virtualinvoke l1.<java.util.ArrayList: java.lang.Object[] toArray()>();

        return $r1;
    }

    java.util.concurrent.ConcurrentLinkedQueue$Node first()
    {
        java.util.concurrent.ConcurrentLinkedQueue l0;
        java.util.concurrent.ConcurrentLinkedQueue$Node l1, l3, l2#4, $r1, $r2;
        boolean l4, $z0;
        java.lang.Object $r0;

        l0 := @this: java.util.concurrent.ConcurrentLinkedQueue;

     label1:
        l1 = l0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head>;

        l2#4 = l1;

     label2:
        $r0 = l2#4.<java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item>;

        if $r0 == null goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        l4 = $z0;

        if l4 != 0 goto label5;

        $r1 = l2#4.<java.util.concurrent.ConcurrentLinkedQueue$Node: java.util.concurrent.ConcurrentLinkedQueue$Node next>;

        l3 = $r1;

        if $r1 != null goto label8;

     label5:
        virtualinvoke l0.<java.util.concurrent.ConcurrentLinkedQueue: void updateHead(java.util.concurrent.ConcurrentLinkedQueue$Node,java.util.concurrent.ConcurrentLinkedQueue$Node)>(l1, l2#4);

        if l4 == 0 goto label6;

        $r2 = l2#4;

        goto label7;

     label6:
        $r2 = null;

     label7:
        return $r2;

     label8:
        if l2#4 != l3 goto label9;

        goto label1;

     label9:
        l2#4 = l3;

        goto label2;
    }

    final java.util.concurrent.ConcurrentLinkedQueue$Node succ(java.util.concurrent.ConcurrentLinkedQueue$Node)
    {
        java.util.concurrent.ConcurrentLinkedQueue l0;
        java.util.concurrent.ConcurrentLinkedQueue$Node l1, l2, $r0;

        l0 := @this: java.util.concurrent.ConcurrentLinkedQueue;

        l1 := @parameter0: java.util.concurrent.ConcurrentLinkedQueue$Node;

        l2 = l1.<java.util.concurrent.ConcurrentLinkedQueue$Node: java.util.concurrent.ConcurrentLinkedQueue$Node next>;

        if l1 != l2 goto label1;

        $r0 = l0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head>;

        goto label2;

     label1:
        $r0 = l2;

     label2:
        return $r0;
    }

    final void updateHead(java.util.concurrent.ConcurrentLinkedQueue$Node, java.util.concurrent.ConcurrentLinkedQueue$Node)
    {
        java.util.concurrent.ConcurrentLinkedQueue l0;
        java.util.concurrent.ConcurrentLinkedQueue$Node l1, l2;
        boolean $z0;

        l0 := @this: java.util.concurrent.ConcurrentLinkedQueue;

        l1 := @parameter0: java.util.concurrent.ConcurrentLinkedQueue$Node;

        l2 := @parameter1: java.util.concurrent.ConcurrentLinkedQueue$Node;

        if l1 == l2 goto label1;

        $z0 = specialinvoke l0.<java.util.concurrent.ConcurrentLinkedQueue: boolean casHead(java.util.concurrent.ConcurrentLinkedQueue$Node,java.util.concurrent.ConcurrentLinkedQueue$Node)>(l1, l2);

        if $z0 == 0 goto label1;

        virtualinvoke l1.<java.util.concurrent.ConcurrentLinkedQueue$Node: void lazySetNext(java.util.concurrent.ConcurrentLinkedQueue$Node)>(l1);

     label1:
        return;
    }

    private boolean casHead(java.util.concurrent.ConcurrentLinkedQueue$Node, java.util.concurrent.ConcurrentLinkedQueue$Node)
    {
        java.util.concurrent.ConcurrentLinkedQueue l0;
        java.util.concurrent.ConcurrentLinkedQueue$Node l1, l2;
        long $l0;
        sun.misc.Unsafe $r0;
        boolean $z0;

        l0 := @this: java.util.concurrent.ConcurrentLinkedQueue;

        l1 := @parameter0: java.util.concurrent.ConcurrentLinkedQueue$Node;

        l2 := @parameter1: java.util.concurrent.ConcurrentLinkedQueue$Node;

        $r0 = <java.util.concurrent.ConcurrentLinkedQueue: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.ConcurrentLinkedQueue: long headOffset>;

        $z0 = virtualinvoke $r0.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(l0, $l0, l1, l2);

        return $z0;
    }

    public void <init>()
    {
        java.util.concurrent.ConcurrentLinkedQueue l0;
        java.util.concurrent.ConcurrentLinkedQueue$Node $r0;

        l0 := @this: java.util.concurrent.ConcurrentLinkedQueue;

        specialinvoke l0.<java.util.AbstractQueue: void <init>()>();

        $r0 = new java.util.concurrent.ConcurrentLinkedQueue$Node;

        specialinvoke $r0.<java.util.concurrent.ConcurrentLinkedQueue$Node: void <init>(java.lang.Object)>(null);

        l0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node tail> = $r0;

        l0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head> = $r0;

        return;
    }

    public boolean add(java.lang.Object)
    {
        java.util.concurrent.ConcurrentLinkedQueue l0;
        java.lang.Object l1;
        boolean $z0;

        l0 := @this: java.util.concurrent.ConcurrentLinkedQueue;

        l1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke l0.<java.util.concurrent.ConcurrentLinkedQueue: boolean offer(java.lang.Object)>(l1);

        return $z0;
    }

    public boolean offer(java.lang.Object)
    {
        java.util.concurrent.ConcurrentLinkedQueue l0;
        java.lang.Object l1;
        java.util.concurrent.ConcurrentLinkedQueue$Node l2, l5, $r0, l3#7, l4#9, $r1, $r2, $r3, $r4, $r5, $r6;
        boolean $z0;

        l0 := @this: java.util.concurrent.ConcurrentLinkedQueue;

        l1 := @parameter0: java.lang.Object;

        staticinvoke <java.util.concurrent.ConcurrentLinkedQueue: void checkNotNull(java.lang.Object)>(l1);

        $r0 = new java.util.concurrent.ConcurrentLinkedQueue$Node;

        specialinvoke $r0.<java.util.concurrent.ConcurrentLinkedQueue$Node: void <init>(java.lang.Object)>(l1);

        l2 = $r0;

        l3#7 = l0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node tail>;

        l4#9 = l3#7;

     label1:
        l5 = l4#9.<java.util.concurrent.ConcurrentLinkedQueue$Node: java.util.concurrent.ConcurrentLinkedQueue$Node next>;

        if l5 != null goto label3;

        $z0 = virtualinvoke l4#9.<java.util.concurrent.ConcurrentLinkedQueue$Node: boolean casNext(java.util.concurrent.ConcurrentLinkedQueue$Node,java.util.concurrent.ConcurrentLinkedQueue$Node)>(null, l2);

        if $z0 == 0 goto label9;

        if l4#9 == l3#7 goto label2;

        specialinvoke l0.<java.util.concurrent.ConcurrentLinkedQueue: boolean casTail(java.util.concurrent.ConcurrentLinkedQueue$Node,java.util.concurrent.ConcurrentLinkedQueue$Node)>(l3#7, l2);

     label2:
        return 1;

     label3:
        if l4#9 != l5 goto label6;

        $r1 = l3#7;

        $r2 = l0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node tail>;

        l3#7 = $r2;

        if $r1 == $r2 goto label4;

        $r3 = l3#7;

        goto label5;

     label4:
        $r3 = l0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head>;

     label5:
        l4#9 = $r3;

        goto label9;

     label6:
        if l4#9 == l3#7 goto label7;

        $r4 = l3#7;

        $r5 = l0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node tail>;

        l3#7 = $r5;

        if $r4 == $r5 goto label7;

        $r6 = l3#7;

        goto label8;

     label7:
        $r6 = l5;

     label8:
        l4#9 = $r6;

     label9:
        goto label1;
    }

    private static void checkNotNull(java.lang.Object)
    {
        java.lang.Object l0;
        java.lang.NullPointerException $r0;

        l0 := @parameter0: java.lang.Object;

        if l0 != null goto label1;

        $r0 = new java.lang.NullPointerException;

        specialinvoke $r0.<java.lang.NullPointerException: void <init>()>();

        throw $r0;

     label1:
        return;
    }

    private boolean casTail(java.util.concurrent.ConcurrentLinkedQueue$Node, java.util.concurrent.ConcurrentLinkedQueue$Node)
    {
        java.util.concurrent.ConcurrentLinkedQueue l0;
        java.util.concurrent.ConcurrentLinkedQueue$Node l1, l2;
        long $l0;
        sun.misc.Unsafe $r0;
        boolean $z0;

        l0 := @this: java.util.concurrent.ConcurrentLinkedQueue;

        l1 := @parameter0: java.util.concurrent.ConcurrentLinkedQueue$Node;

        l2 := @parameter1: java.util.concurrent.ConcurrentLinkedQueue$Node;

        $r0 = <java.util.concurrent.ConcurrentLinkedQueue: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.ConcurrentLinkedQueue: long tailOffset>;

        $z0 = virtualinvoke $r0.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(l0, $l0, l1, l2);

        return $z0;
    }


