    static void <clinit>()
    {
        weka.classifiers.trees.j48.InfoGainSplitCrit $r0;
        weka.classifiers.trees.j48.GainRatioSplitCrit $r1;

        $r0 = new weka.classifiers.trees.j48.InfoGainSplitCrit;

        specialinvoke $r0.<weka.classifiers.trees.j48.InfoGainSplitCrit: void <init>()>();

        <weka.classifiers.trees.j48.C45Split: weka.classifiers.trees.j48.InfoGainSplitCrit infoGainCrit> = $r0;

        $r1 = new weka.classifiers.trees.j48.GainRatioSplitCrit;

        specialinvoke $r1.<weka.classifiers.trees.j48.GainRatioSplitCrit: void <init>()>();

        <weka.classifiers.trees.j48.C45Split: weka.classifiers.trees.j48.GainRatioSplitCrit gainRatioCrit> = $r1;

        return;
    }

    public void <init>(int, int, double, boolean)
    {
        weka.classifiers.trees.j48.C45Split this;
        int attIndex, minNoObj;
        double sumOfWeights;
        boolean useMDLcorrection;

        this := @this: weka.classifiers.trees.j48.C45Split;

        attIndex := @parameter0: int;

        minNoObj := @parameter1: int;

        sumOfWeights := @parameter2: double;

        useMDLcorrection := @parameter3: boolean;

        specialinvoke this.<weka.classifiers.trees.j48.ClassifierSplitModel: void <init>()>();

        this.<weka.classifiers.trees.j48.C45Split: int m_attIndex> = attIndex;

        this.<weka.classifiers.trees.j48.C45Split: int m_minNoObj> = minNoObj;

        this.<weka.classifiers.trees.j48.C45Split: double m_sumOfWeights> = sumOfWeights;

        this.<weka.classifiers.trees.j48.C45Split: boolean m_useMDLcorrection> = useMDLcorrection;

        return;
    }

    public final double gainRatio()
    {
        weka.classifiers.trees.j48.C45Split this;
        double $d0;

        this := @this: weka.classifiers.trees.j48.C45Split;

        $d0 = this.<weka.classifiers.trees.j48.C45Split: double m_gainRatio>;

        return $d0;
    }

    public final double infoGain()
    {
        weka.classifiers.trees.j48.C45Split this;
        double $d0;

        this := @this: weka.classifiers.trees.j48.C45Split;

        $d0 = this.<weka.classifiers.trees.j48.C45Split: double m_infoGain>;

        return $d0;
    }

    public void buildClassifier(weka.core.Instances) throws java.lang.Exception
    {
        weka.classifiers.trees.j48.C45Split this;
        weka.core.Instances trainInstances;
        int $i0, $i1, $i2, $i3, $i4;
        weka.core.Attribute $r0, $r1, $r2;
        boolean $z0;

        this := @this: weka.classifiers.trees.j48.C45Split;

        trainInstances := @parameter0: weka.core.Instances;

        this.<weka.classifiers.trees.j48.C45Split: int m_numSubsets> = 0;

        this.<weka.classifiers.trees.j48.C45Split: double m_splitPoint> = 1.7976931348623157E308;

        this.<weka.classifiers.trees.j48.C45Split: double m_infoGain> = 0.0;

        this.<weka.classifiers.trees.j48.C45Split: double m_gainRatio> = 0.0;

        $i0 = this.<weka.classifiers.trees.j48.C45Split: int m_attIndex>;

        $r0 = virtualinvoke trainInstances.<weka.core.Instances: weka.core.Attribute attribute(int)>($i0);

        $z0 = virtualinvoke $r0.<weka.core.Attribute: boolean isNominal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $i1 = this.<weka.classifiers.trees.j48.C45Split: int m_attIndex>;

        $r1 = virtualinvoke trainInstances.<weka.core.Instances: weka.core.Attribute attribute(int)>($i1);

        $i2 = virtualinvoke $r1.<weka.core.Attribute: int numValues()>();

        this.<weka.classifiers.trees.j48.C45Split: int m_complexityIndex> = $i2;

        $i3 = this.<weka.classifiers.trees.j48.C45Split: int m_complexityIndex>;

        this.<weka.classifiers.trees.j48.C45Split: int m_index> = $i3;

        specialinvoke this.<weka.classifiers.trees.j48.C45Split: void handleEnumeratedAttribute(weka.core.Instances)>(trainInstances);

        goto label2;

     label1:
        this.<weka.classifiers.trees.j48.C45Split: int m_complexityIndex> = 2;

        this.<weka.classifiers.trees.j48.C45Split: int m_index> = 0;

        $i4 = this.<weka.classifiers.trees.j48.C45Split: int m_attIndex>;

        $r2 = virtualinvoke trainInstances.<weka.core.Instances: weka.core.Attribute attribute(int)>($i4);

        virtualinvoke trainInstances.<weka.core.Instances: void sort(weka.core.Attribute)>($r2);

        specialinvoke this.<weka.classifiers.trees.j48.C45Split: void handleNumericAttribute(weka.core.Instances)>(trainInstances);

     label2:
        return;
    }

    private void handleEnumeratedAttribute(weka.core.Instances) throws java.lang.Exception
    {
        weka.classifiers.trees.j48.C45Split this;
        weka.core.Instances trainInstances;
        java.util.Enumeration enu;
        weka.core.Instance instance;
        weka.classifiers.trees.j48.Distribution $r0, $r2, $r3, $r5, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0, $z1, $z2;
        java.lang.Object $r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        weka.classifiers.trees.j48.InfoGainSplitCrit $r4;
        weka.classifiers.trees.j48.GainRatioSplitCrit $r6;

        this := @this: weka.classifiers.trees.j48.C45Split;

        trainInstances := @parameter0: weka.core.Instances;

        $r0 = new weka.classifiers.trees.j48.Distribution;

        $i0 = this.<weka.classifiers.trees.j48.C45Split: int m_complexityIndex>;

        $i1 = virtualinvoke trainInstances.<weka.core.Instances: int numClasses()>();

        specialinvoke $r0.<weka.classifiers.trees.j48.Distribution: void <init>(int,int)>($i0, $i1);

        this.<weka.classifiers.trees.j48.C45Split: weka.classifiers.trees.j48.Distribution m_distribution> = $r0;

        enu = virtualinvoke trainInstances.<weka.core.Instances: java.util.Enumeration enumerateInstances()>();

     label1:
        $z0 = interfaceinvoke enu.<java.util.Enumeration: boolean hasMoreElements()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $r1 = interfaceinvoke enu.<java.util.Enumeration: java.lang.Object nextElement()>();

        instance = (weka.core.Instance) $r1;

        $i2 = this.<weka.classifiers.trees.j48.C45Split: int m_attIndex>;

        $z1 = interfaceinvoke instance.<weka.core.Instance: boolean isMissing(int)>($i2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label1;

        $r2 = this.<weka.classifiers.trees.j48.C45Split: weka.classifiers.trees.j48.Distribution m_distribution>;

        $i3 = this.<weka.classifiers.trees.j48.C45Split: int m_attIndex>;

        $d0 = interfaceinvoke instance.<weka.core.Instance: double value(int)>($i3);

        $i4 = (int) $d0;

        virtualinvoke $r2.<weka.classifiers.trees.j48.Distribution: void add(int,weka.core.Instance)>($i4, instance);

        goto label1;

     label2:
        $r3 = this.<weka.classifiers.trees.j48.C45Split: weka.classifiers.trees.j48.Distribution m_distribution>;

        $i5 = this.<weka.classifiers.trees.j48.C45Split: int m_minNoObj>;

        $d1 = (double) $i5;

        $z2 = virtualinvoke $r3.<weka.classifiers.trees.j48.Distribution: boolean check(double)>($d1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label3;

        $i6 = this.<weka.classifiers.trees.j48.C45Split: int m_complexityIndex>;

        this.<weka.classifiers.trees.j48.C45Split: int m_numSubsets> = $i6;

        $r4 = <weka.classifiers.trees.j48.C45Split: weka.classifiers.trees.j48.InfoGainSplitCrit infoGainCrit>;

        $r5 = this.<weka.classifiers.trees.j48.C45Split: weka.classifiers.trees.j48.Distribution m_distribution>;

        $d2 = this.<weka.classifiers.trees.j48.C45Split: double m_sumOfWeights>;

        $d3 = virtualinvoke $r4.<weka.classifiers.trees.j48.InfoGainSplitCrit: double splitCritValue(weka.classifiers.trees.j48.Distribution,double)>($r5, $d2);

        this.<weka.classifiers.trees.j48.C45Split: double m_infoGain> = $d3;

        $r6 = <weka.classifiers.trees.j48.C45Split: weka.classifiers.trees.j48.GainRatioSplitCrit gainRatioCrit>;

        $r7 = this.<weka.classifiers.trees.j48.C45Split: weka.classifiers.trees.j48.Distribution m_distribution>;

        $d4 = this.<weka.classifiers.trees.j48.C45Split: double m_sumOfWeights>;

        $d5 = this.<weka.classifiers.trees.j48.C45Split: double m_infoGain>;

        $d6 = virtualinvoke $r6.<weka.classifiers.trees.j48.GainRatioSplitCrit: double splitCritValue(weka.classifiers.trees.j48.Distribution,double,double)>($r7, $d4, $d5);

        this.<weka.classifiers.trees.j48.C45Split: double m_gainRatio> = $d6;

     label3:
        return;
    }

    private void handleNumericAttribute(weka.core.Instances) throws java.lang.Exception
    {
        weka.classifiers.trees.j48.C45Split this;
        weka.core.Instances trainInstances;
        java.util.Enumeration enu;
        weka.core.Instance instance, $r6, $r7, $r14, $r15, $r16, $r17;
        int firstMiss, next#2, last#4, splitIndex#6, $i0, i#16, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i19, $i20, $i21, $i22;
        double defaultEnt, currentInfoGain, $d0, $d1, $d2, minSplit#40, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29;
        weka.classifiers.trees.j48.Distribution $r0, $r2, $r3, $r5, $r8, $r9, $r10, $r12, $r18, $r19, $r20, $r22;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.Object $r1;
        weka.classifiers.trees.j48.InfoGainSplitCrit $r4, $r11;
        byte $b8, $b18;
        weka.classifiers.trees.j48.GainRatioSplitCrit $r21;

        this := @this: weka.classifiers.trees.j48.C45Split;

        trainInstances := @parameter0: weka.core.Instances;

        next#2 = 1;

        last#4 = 0;

        splitIndex#6 = -1;

        $r0 = new weka.classifiers.trees.j48.Distribution;

        $i0 = virtualinvoke trainInstances.<weka.core.Instances: int numClasses()>();

        specialinvoke $r0.<weka.classifiers.trees.j48.Distribution: void <init>(int,int)>(2, $i0);

        this.<weka.classifiers.trees.j48.C45Split: weka.classifiers.trees.j48.Distribution m_distribution> = $r0;

        enu = virtualinvoke trainInstances.<weka.core.Instances: java.util.Enumeration enumerateInstances()>();

        i#16 = 0;

     label01:
        $z0 = interfaceinvoke enu.<java.util.Enumeration: boolean hasMoreElements()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label03;

        $r1 = interfaceinvoke enu.<java.util.Enumeration: java.lang.Object nextElement()>();

        instance = (weka.core.Instance) $r1;

        $i1 = this.<weka.classifiers.trees.j48.C45Split: int m_attIndex>;

        $z1 = interfaceinvoke instance.<weka.core.Instance: boolean isMissing(int)>($i1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label02;

        goto label03;

     label02:
        $r2 = this.<weka.classifiers.trees.j48.C45Split: weka.classifiers.trees.j48.Distribution m_distribution>;

        virtualinvoke $r2.<weka.classifiers.trees.j48.Distribution: void add(int,weka.core.Instance)>(1, instance);

        i#16 = i#16 + 1;

        goto label01;

     label03:
        firstMiss = i#16;

        $r3 = this.<weka.classifiers.trees.j48.C45Split: weka.classifiers.trees.j48.Distribution m_distribution>;

        $d0 = virtualinvoke $r3.<weka.classifiers.trees.j48.Distribution: double total()>();

        $d1 = 0.1 * $d0;

        $i2 = virtualinvoke trainInstances.<weka.core.Instances: int numClasses()>();

        $d2 = (double) $i2;

        minSplit#40 = $d1 / $d2;

        $i3 = this.<weka.classifiers.trees.j48.C45Split: int m_minNoObj>;

        $d3 = (double) $i3;

        $z2 = staticinvoke <weka.core.Utils: boolean smOrEq(double,double)>(minSplit#40, $d3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label04;

        $i4 = this.<weka.classifiers.trees.j48.C45Split: int m_minNoObj>;

        minSplit#40 = (double) $i4;

        goto label05;

     label04:
        $z3 = staticinvoke <weka.core.Utils: boolean gr(double,double)>(minSplit#40, 25.0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label05;

        minSplit#40 = 25.0;

     label05:
        $d4 = (double) firstMiss;

        $d5 = 2.0 * minSplit#40;

        $z4 = staticinvoke <weka.core.Utils: boolean sm(double,double)>($d4, $d5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label06;

        return;

     label06:
        $r4 = <weka.classifiers.trees.j48.C45Split: weka.classifiers.trees.j48.InfoGainSplitCrit infoGainCrit>;

        $r5 = this.<weka.classifiers.trees.j48.C45Split: weka.classifiers.trees.j48.Distribution m_distribution>;

        defaultEnt = virtualinvoke $r4.<weka.classifiers.trees.j48.InfoGainSplitCrit: double oldEnt(weka.classifiers.trees.j48.Distribution)>($r5);

     label07:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(next#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(firstMiss);

        if next#2 >= firstMiss goto label11;

        $i5 = next#2 - 1;

        $r6 = virtualinvoke trainInstances.<weka.core.Instances: weka.core.Instance instance(int)>($i5);

        $i6 = this.<weka.classifiers.trees.j48.C45Split: int m_attIndex>;

        $d6 = interfaceinvoke $r6.<weka.core.Instance: double value(int)>($i6);

        $d7 = $d6 + 1.0E-5;

        $r7 = virtualinvoke trainInstances.<weka.core.Instances: weka.core.Instance instance(int)>(next#2);

        $i7 = this.<weka.classifiers.trees.j48.C45Split: int m_attIndex>;

        $d8 = interfaceinvoke $r7.<weka.core.Instance: double value(int)>($i7);

        $b8 = $d7 cmpg $d8;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b8);

        if $b8 >= 0 goto label10;

        $r8 = this.<weka.classifiers.trees.j48.C45Split: weka.classifiers.trees.j48.Distribution m_distribution>;

        virtualinvoke $r8.<weka.classifiers.trees.j48.Distribution: void shiftRange(int,int,weka.core.Instances,int,int)>(1, 0, trainInstances, last#4, next#2);

        $r9 = this.<weka.classifiers.trees.j48.C45Split: weka.classifiers.trees.j48.Distribution m_distribution>;

        $d9 = virtualinvoke $r9.<weka.classifiers.trees.j48.Distribution: double perBag(int)>(0);

        $z5 = staticinvoke <weka.core.Utils: boolean grOrEq(double,double)>($d9, minSplit#40);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label09;

        $r10 = this.<weka.classifiers.trees.j48.C45Split: weka.classifiers.trees.j48.Distribution m_distribution>;

        $d10 = virtualinvoke $r10.<weka.classifiers.trees.j48.Distribution: double perBag(int)>(1);

        $z6 = staticinvoke <weka.core.Utils: boolean grOrEq(double,double)>($d10, minSplit#40);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label09;

        $r11 = <weka.classifiers.trees.j48.C45Split: weka.classifiers.trees.j48.InfoGainSplitCrit infoGainCrit>;

        $r12 = this.<weka.classifiers.trees.j48.C45Split: weka.classifiers.trees.j48.Distribution m_distribution>;

        $d11 = this.<weka.classifiers.trees.j48.C45Split: double m_sumOfWeights>;

        currentInfoGain = virtualinvoke $r11.<weka.classifiers.trees.j48.InfoGainSplitCrit: double splitCritValue(weka.classifiers.trees.j48.Distribution,double,double)>($r12, $d11, defaultEnt);

        $d12 = this.<weka.classifiers.trees.j48.C45Split: double m_infoGain>;

        $z7 = staticinvoke <weka.core.Utils: boolean gr(double,double)>(currentInfoGain, $d12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 == 0 goto label08;

        this.<weka.classifiers.trees.j48.C45Split: double m_infoGain> = currentInfoGain;

        splitIndex#6 = next#2 - 1;

     label08:
        $i9 = this.<weka.classifiers.trees.j48.C45Split: int m_index>;

        $i10 = $i9 + 1;

        this.<weka.classifiers.trees.j48.C45Split: int m_index> = $i10;

     label09:
        last#4 = next#2;

     label10:
        next#2 = next#2 + 1;

        goto label07;

     label11:
        $i11 = this.<weka.classifiers.trees.j48.C45Split: int m_index>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i11);

        if $i11 != 0 goto label12;

        return;

     label12:
        $z8 = this.<weka.classifiers.trees.j48.C45Split: boolean m_useMDLcorrection>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 == 0 goto label13;

        $d13 = this.<weka.classifiers.trees.j48.C45Split: double m_infoGain>;

        $i12 = this.<weka.classifiers.trees.j48.C45Split: int m_index>;

        $d14 = (double) $i12;

        $d15 = staticinvoke <weka.core.Utils: double log2(double)>($d14);

        $d16 = this.<weka.classifiers.trees.j48.C45Split: double m_sumOfWeights>;

        $d17 = $d15 / $d16;

        $d18 = $d13 - $d17;

        this.<weka.classifiers.trees.j48.C45Split: double m_infoGain> = $d18;

     label13:
        $d19 = this.<weka.classifiers.trees.j48.C45Split: double m_infoGain>;

        $z9 = staticinvoke <weka.core.Utils: boolean smOrEq(double,double)>($d19, 0.0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 == 0 goto label14;

        return;

     label14:
        this.<weka.classifiers.trees.j48.C45Split: int m_numSubsets> = 2;

        $i13 = splitIndex#6 + 1;

        $r14 = virtualinvoke trainInstances.<weka.core.Instances: weka.core.Instance instance(int)>($i13);

        $i14 = this.<weka.classifiers.trees.j48.C45Split: int m_attIndex>;

        $d20 = interfaceinvoke $r14.<weka.core.Instance: double value(int)>($i14);

        $r15 = virtualinvoke trainInstances.<weka.core.Instances: weka.core.Instance instance(int)>(splitIndex#6);

        $i15 = this.<weka.classifiers.trees.j48.C45Split: int m_attIndex>;

        $d21 = interfaceinvoke $r15.<weka.core.Instance: double value(int)>($i15);

        $d22 = $d20 + $d21;

        $d23 = $d22 / 2.0;

        this.<weka.classifiers.trees.j48.C45Split: double m_splitPoint> = $d23;

        $d24 = this.<weka.classifiers.trees.j48.C45Split: double m_splitPoint>;

        $i16 = splitIndex#6 + 1;

        $r16 = virtualinvoke trainInstances.<weka.core.Instances: weka.core.Instance instance(int)>($i16);

        $i17 = this.<weka.classifiers.trees.j48.C45Split: int m_attIndex>;

        $d25 = interfaceinvoke $r16.<weka.core.Instance: double value(int)>($i17);

        $b18 = $d24 cmpl $d25;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b18);

        if $b18 != 0 goto label15;

        $r17 = virtualinvoke trainInstances.<weka.core.Instances: weka.core.Instance instance(int)>(splitIndex#6);

        $i19 = this.<weka.classifiers.trees.j48.C45Split: int m_attIndex>;

        $d26 = interfaceinvoke $r17.<weka.core.Instance: double value(int)>($i19);

        this.<weka.classifiers.trees.j48.C45Split: double m_splitPoint> = $d26;

     label15:
        $r18 = new weka.classifiers.trees.j48.Distribution;

        $i20 = virtualinvoke trainInstances.<weka.core.Instances: int numClasses()>();

        specialinvoke $r18.<weka.classifiers.trees.j48.Distribution: void <init>(int,int)>(2, $i20);

        this.<weka.classifiers.trees.j48.C45Split: weka.classifiers.trees.j48.Distribution m_distribution> = $r18;

        $r19 = this.<weka.classifiers.trees.j48.C45Split: weka.classifiers.trees.j48.Distribution m_distribution>;

        $i21 = splitIndex#6 + 1;

        virtualinvoke $r19.<weka.classifiers.trees.j48.Distribution: void addRange(int,weka.core.Instances,int,int)>(0, trainInstances, 0, $i21);

        $r20 = this.<weka.classifiers.trees.j48.C45Split: weka.classifiers.trees.j48.Distribution m_distribution>;

        $i22 = splitIndex#6 + 1;

        virtualinvoke $r20.<weka.classifiers.trees.j48.Distribution: void addRange(int,weka.core.Instances,int,int)>(1, trainInstances, $i22, firstMiss);

        $r21 = <weka.classifiers.trees.j48.C45Split: weka.classifiers.trees.j48.GainRatioSplitCrit gainRatioCrit>;

        $r22 = this.<weka.classifiers.trees.j48.C45Split: weka.classifiers.trees.j48.Distribution m_distribution>;

        $d27 = this.<weka.classifiers.trees.j48.C45Split: double m_sumOfWeights>;

        $d28 = this.<weka.classifiers.trees.j48.C45Split: double m_infoGain>;

        $d29 = virtualinvoke $r21.<weka.classifiers.trees.j48.GainRatioSplitCrit: double splitCritValue(weka.classifiers.trees.j48.Distribution,double,double)>($r22, $d27, $d28);

        this.<weka.classifiers.trees.j48.C45Split: double m_gainRatio> = $d29;

        return;
    }

    public final int attIndex()
    {
        weka.classifiers.trees.j48.C45Split this;
        int $i0;

        this := @this: weka.classifiers.trees.j48.C45Split;

        $i0 = this.<weka.classifiers.trees.j48.C45Split: int m_attIndex>;

        return $i0;
    }

    public final void setSplitPoint(weka.core.Instances)
    {
        weka.classifiers.trees.j48.C45Split this;
        weka.core.Instances allInstances;
        java.util.Enumeration enu;
        weka.core.Instance instance;
        double tempValue, newSplitPoint#2, $d0;
        int $i0, $i1, $i2, $i3;
        weka.core.Attribute $r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r1;

        this := @this: weka.classifiers.trees.j48.C45Split;

        allInstances := @parameter0: weka.core.Instances;

        newSplitPoint#2 = -1.7976931348623157E308;

        $i0 = this.<weka.classifiers.trees.j48.C45Split: int m_attIndex>;

        $r0 = virtualinvoke allInstances.<weka.core.Instances: weka.core.Attribute attribute(int)>($i0);

        $z0 = virtualinvoke $r0.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        $i1 = this.<weka.classifiers.trees.j48.C45Split: int m_numSubsets>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 1 goto label3;

        enu = virtualinvoke allInstances.<weka.core.Instances: java.util.Enumeration enumerateInstances()>();

     label1:
        $z1 = interfaceinvoke enu.<java.util.Enumeration: boolean hasMoreElements()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        $r1 = interfaceinvoke enu.<java.util.Enumeration: java.lang.Object nextElement()>();

        instance = (weka.core.Instance) $r1;

        $i2 = this.<weka.classifiers.trees.j48.C45Split: int m_attIndex>;

        $z2 = interfaceinvoke instance.<weka.core.Instance: boolean isMissing(int)>($i2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label1;

        $i3 = this.<weka.classifiers.trees.j48.C45Split: int m_attIndex>;

        tempValue = interfaceinvoke instance.<weka.core.Instance: double value(int)>($i3);

        $z3 = staticinvoke <weka.core.Utils: boolean gr(double,double)>(tempValue, newSplitPoint#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label1;

        $d0 = this.<weka.classifiers.trees.j48.C45Split: double m_splitPoint>;

        $z4 = staticinvoke <weka.core.Utils: boolean smOrEq(double,double)>(tempValue, $d0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label1;

        newSplitPoint#2 = tempValue;

        goto label1;

     label2:
        this.<weka.classifiers.trees.j48.C45Split: double m_splitPoint> = newSplitPoint#2;

     label3:
        return;
    }

    public final double[] weights(weka.core.Instance)
    {
        weka.classifiers.trees.j48.C45Split this;
        weka.core.Instance instance;
        double[] weights;
        int $i0, $i1, i#9, $i2;
        boolean $z0;
        weka.classifiers.trees.j48.Distribution $r0, $r1;
        double $d0, $d1, $d2;

        this := @this: weka.classifiers.trees.j48.C45Split;

        instance := @parameter0: weka.core.Instance;

        $i0 = this.<weka.classifiers.trees.j48.C45Split: int m_attIndex>;

        $z0 = interfaceinvoke instance.<weka.core.Instance: boolean isMissing(int)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        $i1 = this.<weka.classifiers.trees.j48.C45Split: int m_numSubsets>;

        weights = newarray (double)[$i1];

        i#9 = 0;

     label1:
        $i2 = this.<weka.classifiers.trees.j48.C45Split: int m_numSubsets>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#9 >= $i2 goto label2;

        $r0 = this.<weka.classifiers.trees.j48.C45Split: weka.classifiers.trees.j48.Distribution m_distribution>;

        $d0 = virtualinvoke $r0.<weka.classifiers.trees.j48.Distribution: double perBag(int)>(i#9);

        $r1 = this.<weka.classifiers.trees.j48.C45Split: weka.classifiers.trees.j48.Distribution m_distribution>;

        $d1 = virtualinvoke $r1.<weka.classifiers.trees.j48.Distribution: double total()>();

        $d2 = $d0 / $d1;

        weights[i#9] = $d2;

        i#9 = i#9 + 1;

        goto label1;

     label2:
        return weights;

     label3:
        return null;
    }

    public final int whichSubset(weka.core.Instance) throws java.lang.Exception
    {
        weka.classifiers.trees.j48.C45Split this;
        weka.core.Instance instance;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1, $z2;
        weka.core.Attribute $r0;
        double $d0, $d1, $d2;

        this := @this: weka.classifiers.trees.j48.C45Split;

        instance := @parameter0: weka.core.Instance;

        $i0 = this.<weka.classifiers.trees.j48.C45Split: int m_attIndex>;

        $z0 = interfaceinvoke instance.<weka.core.Instance: boolean isMissing(int)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        return -1;

     label1:
        $i1 = this.<weka.classifiers.trees.j48.C45Split: int m_attIndex>;

        $r0 = interfaceinvoke instance.<weka.core.Instance: weka.core.Attribute attribute(int)>($i1);

        $z1 = virtualinvoke $r0.<weka.core.Attribute: boolean isNominal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        $i2 = this.<weka.classifiers.trees.j48.C45Split: int m_attIndex>;

        $d0 = interfaceinvoke instance.<weka.core.Instance: double value(int)>($i2);

        $i3 = (int) $d0;

        return $i3;

     label2:
        $i4 = this.<weka.classifiers.trees.j48.C45Split: int m_attIndex>;

        $d1 = interfaceinvoke instance.<weka.core.Instance: double value(int)>($i4);

        $d2 = this.<weka.classifiers.trees.j48.C45Split: double m_splitPoint>;

        $z2 = staticinvoke <weka.core.Utils: boolean smOrEq(double,double)>($d1, $d2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label3;

        return 0;

     label3:
        return 1;
    }


