    static void <clinit>()
    {
        java.util.HashMap $r0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <weka.core.Option: java.util.Map s_descriptorCache> = $r0;

        return;
    }

    public static java.util.Vector listOptionsForClassHierarchy(java.lang.Class, java.lang.Class)
    {
        java.lang.Class childClazz, oldestAncestorClazz, parent#4;
        java.util.Vector results, $r0;
        boolean $z1;

        childClazz := @parameter0: java.lang.Class;

        oldestAncestorClazz := @parameter1: java.lang.Class;

        results = staticinvoke <weka.core.Option: java.util.Vector listOptionsForClass(java.lang.Class)>(childClazz);

        parent#4 = childClazz;

     label1:
        parent#4 = virtualinvoke parent#4.<java.lang.Class: java.lang.Class getSuperclass()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(parent#4);

        if parent#4 != null goto label2;

        goto label3;

     label2:
        $r0 = staticinvoke <weka.core.Option: java.util.Vector listOptionsForClass(java.lang.Class)>(parent#4);

        virtualinvoke results.<java.util.Vector: boolean addAll(java.util.Collection)>($r0);

        $z1 = virtualinvoke parent#4.<java.lang.Object: boolean equals(java.lang.Object)>(oldestAncestorClazz);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label1;

     label3:
        return results;
    }

    public static java.util.Vector listOptionsForClass(java.lang.Class)
    {
        java.lang.Class clazz, c;
        java.util.Vector results, $r0;
        java.util.ArrayList allMethods, $r1;
        java.lang.Class[] interfaces, l4;
        int l5, l6#13, $i0, $i1, i#28, $i2, index#36, $i3, $i4, $i5, i#111, $i7, $i8, $i9;
        weka.core.Option[] unsorted;
        int[] opOrder, sortedOpts;
        java.util.Iterator l7;
        java.lang.reflect.Method m;
        weka.core.OptionMetadata o;
        byte numParams, $b6;
        weka.core.Option option, $r11, $r12;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r2;
        java.lang.'annotation'.Annotation $r3;
        java.lang.String $r4, description#58, description#73, name#76, synopsis#87;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10;

        clazz := @parameter0: java.lang.Class;

        $r0 = new java.util.Vector;

        specialinvoke $r0.<java.util.Vector: void <init>()>();

        results = $r0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        allMethods = $r1;

        staticinvoke <weka.core.Option: void addMethodsToList(java.lang.Class,java.util.List)>(clazz, allMethods);

        interfaces = virtualinvoke clazz.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        l4 = interfaces;

        l5 = lengthof l4;

        l6#13 = 0;

     label01:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l6#13);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l5);

        if l6#13 >= l5 goto label02;

        c = l4[l6#13];

        staticinvoke <weka.core.Option: void addMethodsToList(java.lang.Class,java.util.List)>(c, allMethods);

        l6#13 = l6#13 + 1;

        goto label01;

     label02:
        $i0 = interfaceinvoke allMethods.<java.util.List: int size()>();

        unsorted = newarray (weka.core.Option)[$i0];

        $i1 = interfaceinvoke allMethods.<java.util.List: int size()>();

        opOrder = newarray (int)[$i1];

        i#28 = 0;

     label03:
        $i2 = lengthof opOrder;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#28);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#28 >= $i2 goto label04;

        opOrder[i#28] = 2147483647;

        i#28 = i#28 + 1;

        goto label03;

     label04:
        index#36 = 0;

        l7 = interfaceinvoke allMethods.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z0 = interfaceinvoke l7.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label12;

        $r2 = interfaceinvoke l7.<java.util.Iterator: java.lang.Object next()>();

        m = (java.lang.reflect.Method) $r2;

        $r3 = virtualinvoke m.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "weka/core/OptionMetadata");

        o = (weka.core.OptionMetadata) $r3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(o);

        if o == null goto label11;

        $r4 = interfaceinvoke o.<weka.core.OptionMetadata: java.lang.String commandLineParamName()>();

        $i3 = virtualinvoke $r4.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 <= 0 goto label11;

        $i4 = interfaceinvoke o.<weka.core.OptionMetadata: int displayOrder()>();

        opOrder[index#36] = $i4;

        description#58 = interfaceinvoke o.<weka.core.OptionMetadata: java.lang.String description()>();

        $z1 = virtualinvoke description#58.<java.lang.String: boolean startsWith(java.lang.String)>("\t");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label06;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(description#58);

        description#58 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

     label06:
        description#73 = virtualinvoke description#58.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\n", "\n\t");

        name#76 = interfaceinvoke o.<weka.core.OptionMetadata: java.lang.String commandLineParamName()>();

        $z2 = virtualinvoke name#76.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label07;

        $i5 = virtualinvoke name#76.<java.lang.String: int length()>();

        name#76 = virtualinvoke name#76.<java.lang.String: java.lang.String substring(int,int)>(1, $i5);

     label07:
        synopsis#87 = interfaceinvoke o.<weka.core.OptionMetadata: java.lang.String commandLineParamSynopsis()>();

        $z3 = virtualinvoke synopsis#87.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label08;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(synopsis#87);

        synopsis#87 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

     label08:
        $z4 = interfaceinvoke o.<weka.core.OptionMetadata: boolean commandLineParamIsFlag()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label09;

        $b6 = 0;

        goto label10;

     label09:
        $b6 = 1;

     label10:
        numParams = $b6;

        $r11 = new weka.core.Option;

        specialinvoke $r11.<weka.core.Option: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>(description#73, name#76, numParams, synopsis#87);

        option = $r11;

        unsorted[index#36] = option;

        index#36 = index#36 + 1;

     label11:
        goto label05;

     label12:
        sortedOpts = staticinvoke <weka.core.Utils: int[] sort(int[])>(opOrder);

        i#111 = 0;

     label13:
        $i7 = lengthof opOrder;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#111);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if i#111 >= $i7 goto label15;

        $i8 = opOrder[i#111];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if $i8 >= 2147483647 goto label14;

        $i9 = sortedOpts[i#111];

        $r12 = unsorted[$i9];

        virtualinvoke results.<java.util.Vector: boolean add(java.lang.Object)>($r12);

     label14:
        i#111 = i#111 + 1;

        goto label13;

     label15:
        return results;
    }

    protected static void addMethodsToList(java.lang.Class, java.util.List)
    {
        java.lang.Class clazz;
        java.util.List methList;
        java.lang.reflect.Method[] methods, l3;
        int l4, l5#7;
        java.lang.reflect.Method m;

        clazz := @parameter0: java.lang.Class;

        methList := @parameter1: java.util.List;

        methods = virtualinvoke clazz.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        l3 = methods;

        l4 = lengthof l3;

        l5#7 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l5#7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l4);

        if l5#7 >= l4 goto label2;

        m = l3[l5#7];

        interfaceinvoke methList.<java.util.List: boolean add(java.lang.Object)>(m);

        l5#7 = l5#7 + 1;

        goto label1;

     label2:
        return;
    }

    public void <init>(java.lang.String, java.lang.String, int, java.lang.String)
    {
        weka.core.Option this;
        java.lang.String description, name, synopsis;
        int numArguments;

        this := @this: weka.core.Option;

        description := @parameter0: java.lang.String;

        name := @parameter1: java.lang.String;

        numArguments := @parameter2: int;

        synopsis := @parameter3: java.lang.String;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<weka.core.Option: java.lang.String m_Description> = description;

        this.<weka.core.Option: java.lang.String m_Name> = name;

        this.<weka.core.Option: int m_NumArguments> = numArguments;

        this.<weka.core.Option: java.lang.String m_Synopsis> = synopsis;

        return;
    }


