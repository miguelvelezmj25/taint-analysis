    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        long[] $r1;

        $r0 = class "com/sleepycat/je/tree/INLongRep";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sleepycat.je.tree.INLongRep$DefaultRep: boolean $assertionsDisabled> = $z1;

        $r1 = newarray (long)[9];

        $r1[0] = 0L;

        $r1[1] = 255L;

        $r1[2] = 65535L;

        $r1[3] = 16777215L;

        $r1[4] = 4294967295L;

        $r1[5] = 1099511627775L;

        $r1[6] = 281474976710655L;

        $r1[7] = 72057594037927935L;

        $r1[8] = 9223372036854775807L;

        <com.sleepycat.je.tree.INLongRep$DefaultRep: long[] MAX_VALUE> = $r1;

        return;
    }

    public long getMemorySize()
    {
        com.sleepycat.je.tree.INLongRep$DefaultRep this;
        int $i0, $i1, $i2, $i3;
        byte[] $r0;
        long $l4;

        this := @this: com.sleepycat.je.tree.INLongRep$DefaultRep;

        $i0 = <com.sleepycat.je.dbi.MemoryBudget: int DEFAULT_LONG_REP_OVERHEAD>;

        $r0 = this.<com.sleepycat.je.tree.INLongRep$DefaultRep: byte[] byteArray>;

        $i1 = lengthof $r0;

        $i2 = staticinvoke <com.sleepycat.je.dbi.MemoryBudget: int byteArraySize(int)>($i1);

        $i3 = $i0 + $i2;

        $l4 = (long) $i3;

        return $l4;
    }

    public com.sleepycat.je.tree.INLongRep set(int, long, com.sleepycat.je.tree.IN)
    {
        com.sleepycat.je.tree.INLongRep$DefaultRep this, newRep#43, $r8;
        int idx, capacity, end, $i0, $i1, $i2, $i4, $i7, $i8, $i9, $i10, $i11, $i12, i#63, $i16, $i17, $i18, i#84, $i19, $i21, i#97, $i24;
        com.sleepycat.je.tree.IN parent;
        long val#1, $l5, $l13, $l14, $l15, $l20, $l23, $l26;
        boolean $z0, $z1, $z2, $z3;
        java.lang.AssertionError $r0, $r2, $r3, $r11;
        byte[] $r1, $r5, $r9, $r10;
        byte $b3, $b6, $b22, $b25, $b27;
        long[] $r4;
        java.lang.Class $r6;
        com.sleepycat.je.tree.INLongRep$SparseRep $r7;
        com.sleepycat.je.tree.INLongRep newRep#61;

        this := @this: com.sleepycat.je.tree.INLongRep$DefaultRep;

        idx := @parameter0: int;

        val#1 := @parameter1: long;

        parent := @parameter2: com.sleepycat.je.tree.IN;

        $z0 = <com.sleepycat.je.tree.INLongRep$DefaultRep: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        if idx >= 0 goto label01;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label01:
        $z1 = <com.sleepycat.je.tree.INLongRep$DefaultRep: boolean $assertionsDisabled>;

        if $z1 != 0 goto label02;

        $r1 = this.<com.sleepycat.je.tree.INLongRep$DefaultRep: byte[] byteArray>;

        $i0 = lengthof $r1;

        $i1 = this.<com.sleepycat.je.tree.INLongRep$DefaultRep: int bytesPerValue>;

        $i2 = $i0 / $i1;

        if idx < $i2 goto label02;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label02:
        $z2 = <com.sleepycat.je.tree.INLongRep$DefaultRep: boolean $assertionsDisabled>;

        if $z2 != 0 goto label03;

        $b3 = val#1 cmp 0L;

        if $b3 >= 0 goto label03;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label03:
        $r4 = <com.sleepycat.je.tree.INLongRep$DefaultRep: long[] MAX_VALUE>;

        $i4 = this.<com.sleepycat.je.tree.INLongRep$DefaultRep: int bytesPerValue>;

        $l5 = $r4[$i4];

        $b6 = val#1 cmp $l5;

        if $b6 <= 0 goto label09;

        $r5 = this.<com.sleepycat.je.tree.INLongRep$DefaultRep: byte[] byteArray>;

        $i7 = lengthof $r5;

        $i8 = this.<com.sleepycat.je.tree.INLongRep$DefaultRep: int bytesPerValue>;

        capacity = $i7 / $i8;

        $r6 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        if $r6 != class "com/sleepycat/je/tree/INLongRep$SparseRep" goto label04;

        $r7 = new com.sleepycat.je.tree.INLongRep$SparseRep;

        $i9 = this.<com.sleepycat.je.tree.INLongRep$DefaultRep: int bytesPerValue>;

        $i10 = $i9 + 1;

        specialinvoke $r7.<com.sleepycat.je.tree.INLongRep$SparseRep: void <init>(int)>($i10);

        newRep#43 = $r7;

        goto label05;

     label04:
        $r8 = new com.sleepycat.je.tree.INLongRep$DefaultRep;

        $i11 = this.<com.sleepycat.je.tree.INLongRep$DefaultRep: int bytesPerValue>;

        $i12 = $i11 + 1;

        specialinvoke $r8.<com.sleepycat.je.tree.INLongRep$DefaultRep: void <init>(int,int)>(capacity, $i12);

        newRep#43 = $r8;

     label05:
        $l13 = virtualinvoke this.<com.sleepycat.je.tree.INLongRep$DefaultRep: long getMemorySize()>();

        $l14 = virtualinvoke newRep#43.<com.sleepycat.je.tree.INLongRep: long getMemorySize()>();

        virtualinvoke parent.<com.sleepycat.je.tree.IN: void updateMemorySize(long,long)>($l13, $l14);

        newRep#61 = virtualinvoke newRep#43.<com.sleepycat.je.tree.INLongRep: com.sleepycat.je.tree.INLongRep set(int,long,com.sleepycat.je.tree.IN)>(idx, val#1, parent);

        i#63 = 0;

     label06:
        if i#63 >= capacity goto label08;

        if i#63 == idx goto label07;

        $l15 = virtualinvoke this.<com.sleepycat.je.tree.INLongRep$DefaultRep: long get(int)>(i#63);

        newRep#61 = virtualinvoke newRep#61.<com.sleepycat.je.tree.INLongRep: com.sleepycat.je.tree.INLongRep set(int,long,com.sleepycat.je.tree.IN)>(i#63, $l15, parent);

     label07:
        i#63 = i#63 + 1;

        goto label06;

     label08:
        return newRep#61;

     label09:
        $i16 = idx + 1;

        $i17 = this.<com.sleepycat.je.tree.INLongRep$DefaultRep: int bytesPerValue>;

        $i18 = $i16 * $i17;

        i#84 = $i18 - 1;

        $i19 = this.<com.sleepycat.je.tree.INLongRep$DefaultRep: int bytesPerValue>;

        end = i#84 - $i19;

        $r9 = this.<com.sleepycat.je.tree.INLongRep$DefaultRep: byte[] byteArray>;

        $l20 = val#1 & 255L;

        $i21 = (int) $l20;

        $b22 = (byte) $i21;

        $r9[i#84] = $b22;

        i#97 = i#84 + -1;

     label10:
        if i#97 <= end goto label11;

        val#1 = val#1 >> 8;

        $r10 = this.<com.sleepycat.je.tree.INLongRep$DefaultRep: byte[] byteArray>;

        $l23 = val#1 & 255L;

        $i24 = (int) $l23;

        $b25 = (byte) $i24;

        $r10[i#97] = $b25;

        i#97 = i#97 + -1;

        goto label10;

     label11:
        $z3 = <com.sleepycat.je.tree.INLongRep$DefaultRep: boolean $assertionsDisabled>;

        if $z3 != 0 goto label12;

        $l26 = val#1 & -256L;

        $b27 = $l26 cmp 0L;

        if $b27 == 0 goto label12;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>(long)>(val#1);

        throw $r11;

     label12:
        return this;
    }

    public void <init>(int, int)
    {
        com.sleepycat.je.tree.INLongRep$DefaultRep this;
        int capacity, nBytes, $i0, $i1;
        boolean $z0, $z1, $z2;
        java.lang.AssertionError $r0, $r1, $r2;
        byte[] $r3;

        this := @this: com.sleepycat.je.tree.INLongRep$DefaultRep;

        capacity := @parameter0: int;

        nBytes := @parameter1: int;

        specialinvoke this.<com.sleepycat.je.tree.INLongRep: void <init>()>();

        $z0 = <com.sleepycat.je.tree.INLongRep$DefaultRep: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if capacity >= 1 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $z1 = <com.sleepycat.je.tree.INLongRep$DefaultRep: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if nBytes >= 1 goto label2;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label2:
        $z2 = <com.sleepycat.je.tree.INLongRep$DefaultRep: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        if nBytes <= 8 goto label3;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label3:
        this.<com.sleepycat.je.tree.INLongRep$DefaultRep: int bytesPerValue> = nBytes;

        $i0 = this.<com.sleepycat.je.tree.INLongRep$DefaultRep: int bytesPerValue>;

        $i1 = capacity * $i0;

        $r3 = newarray (byte)[$i1];

        this.<com.sleepycat.je.tree.INLongRep$DefaultRep: byte[] byteArray> = $r3;

        return;
    }

    public long get(int)
    {
        com.sleepycat.je.tree.INLongRep$DefaultRep this;
        int idx, end, $i0, i#5, $i1, i#18;
        byte[] $r0, $r1;
        byte $b2, $b4;
        short $s3, $s5;
        long val#17, val#24, $l6;

        this := @this: com.sleepycat.je.tree.INLongRep$DefaultRep;

        idx := @parameter0: int;

        $i0 = this.<com.sleepycat.je.tree.INLongRep$DefaultRep: int bytesPerValue>;

        i#5 = idx * $i0;

        $i1 = this.<com.sleepycat.je.tree.INLongRep$DefaultRep: int bytesPerValue>;

        end = i#5 + $i1;

        $r0 = this.<com.sleepycat.je.tree.INLongRep$DefaultRep: byte[] byteArray>;

        $b2 = $r0[i#5];

        $s3 = $b2 & 255;

        val#17 = (long) $s3;

        i#18 = i#5 + 1;

     label1:
        if i#18 >= end goto label2;

        val#24 = val#17 << 8;

        $r1 = this.<com.sleepycat.je.tree.INLongRep$DefaultRep: byte[] byteArray>;

        $b4 = $r1[i#18];

        $s5 = $b4 & 255;

        $l6 = (long) $s5;

        val#17 = val#24 | $l6;

        i#18 = i#18 + 1;

        goto label1;

     label2:
        return val#17;
    }

    public com.sleepycat.je.tree.INLongRep copy(int, int, int, com.sleepycat.je.tree.IN)
    {
        com.sleepycat.je.tree.INLongRep$DefaultRep this;
        int 'from', 'to', n, $i0, $i1, $i2, $i3, $i4, $i5;
        com.sleepycat.je.tree.IN parent;
        byte[] $r0, $r1;

        this := @this: com.sleepycat.je.tree.INLongRep$DefaultRep;

        'from' := @parameter0: int;

        'to' := @parameter1: int;

        n := @parameter2: int;

        parent := @parameter3: com.sleepycat.je.tree.IN;

        $r0 = this.<com.sleepycat.je.tree.INLongRep$DefaultRep: byte[] byteArray>;

        $i0 = this.<com.sleepycat.je.tree.INLongRep$DefaultRep: int bytesPerValue>;

        $i1 = 'from' * $i0;

        $r1 = this.<com.sleepycat.je.tree.INLongRep$DefaultRep: byte[] byteArray>;

        $i2 = this.<com.sleepycat.je.tree.INLongRep$DefaultRep: int bytesPerValue>;

        $i3 = 'to' * $i2;

        $i4 = this.<com.sleepycat.je.tree.INLongRep$DefaultRep: int bytesPerValue>;

        $i5 = n * $i4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i1, $r1, $i3, $i5);

        return this;
    }

    public com.sleepycat.je.tree.INLongRep compact(com.sleepycat.je.tree.IN, com.sleepycat.je.tree.INLongRep$EmptyRep)
    {
        com.sleepycat.je.tree.INLongRep$DefaultRep this;
        com.sleepycat.je.tree.IN parent;
        com.sleepycat.je.tree.INLongRep$EmptyRep emptyRep;
        boolean $z0;
        com.sleepycat.je.tree.INLongRep $r0;

        this := @this: com.sleepycat.je.tree.INLongRep$DefaultRep;

        parent := @parameter0: com.sleepycat.je.tree.IN;

        emptyRep := @parameter1: com.sleepycat.je.tree.INLongRep$EmptyRep;

        $z0 = virtualinvoke this.<com.sleepycat.je.tree.INLongRep$DefaultRep: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r0 = virtualinvoke this.<com.sleepycat.je.tree.INLongRep$DefaultRep: com.sleepycat.je.tree.INLongRep clear(com.sleepycat.je.tree.IN,com.sleepycat.je.tree.INLongRep$EmptyRep)>(parent, emptyRep);

        return $r0;

     label1:
        return this;
    }

    public boolean isEmpty()
    {
        com.sleepycat.je.tree.INLongRep$DefaultRep this;
        byte[] l1;
        int l2, l3#6;
        byte b;

        this := @this: com.sleepycat.je.tree.INLongRep$DefaultRep;

        l1 = this.<com.sleepycat.je.tree.INLongRep$DefaultRep: byte[] byteArray>;

        l2 = lengthof l1;

        l3#6 = 0;

     label1:
        if l3#6 >= l2 goto label3;

        b = l1[l3#6];

        if b == 0 goto label2;

        return 0;

     label2:
        l3#6 = l3#6 + 1;

        goto label1;

     label3:
        return 1;
    }

    public com.sleepycat.je.tree.INLongRep clear(com.sleepycat.je.tree.IN, com.sleepycat.je.tree.INLongRep$EmptyRep)
    {
        com.sleepycat.je.tree.INLongRep$DefaultRep this;
        com.sleepycat.je.tree.IN parent;
        com.sleepycat.je.tree.INLongRep$EmptyRep emptyRep;
        long $l0, $l1;

        this := @this: com.sleepycat.je.tree.INLongRep$DefaultRep;

        parent := @parameter0: com.sleepycat.je.tree.IN;

        emptyRep := @parameter1: com.sleepycat.je.tree.INLongRep$EmptyRep;

        $l0 = virtualinvoke this.<com.sleepycat.je.tree.INLongRep$DefaultRep: long getMemorySize()>();

        $l1 = virtualinvoke emptyRep.<com.sleepycat.je.tree.INLongRep$EmptyRep: long getMemorySize()>();

        virtualinvoke parent.<com.sleepycat.je.tree.IN: void updateMemorySize(long,long)>($l0, $l1);

        return emptyRep;
    }

    public volatile com.sleepycat.je.tree.INLongRep resize(int)
    {
        com.sleepycat.je.tree.INLongRep$DefaultRep this, $r0;
        int l1;

        this := @this: com.sleepycat.je.tree.INLongRep$DefaultRep;

        l1 := @parameter0: int;

        $r0 = virtualinvoke this.<com.sleepycat.je.tree.INLongRep$DefaultRep: com.sleepycat.je.tree.INLongRep$DefaultRep resize(int)>(l1);

        return $r0;
    }

    public com.sleepycat.je.tree.INLongRep$DefaultRep resize(int)
    {
        com.sleepycat.je.tree.INLongRep$DefaultRep this, $r0;
        int capacity, $i0, $i1, $i2;
        byte[] $r1, $r2;

        this := @this: com.sleepycat.je.tree.INLongRep$DefaultRep;

        capacity := @parameter0: int;

        $r0 = new com.sleepycat.je.tree.INLongRep$DefaultRep;

        $r1 = this.<com.sleepycat.je.tree.INLongRep$DefaultRep: byte[] byteArray>;

        $i0 = this.<com.sleepycat.je.tree.INLongRep$DefaultRep: int bytesPerValue>;

        $i1 = capacity * $i0;

        $r2 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>($r1, 0, $i1);

        $i2 = this.<com.sleepycat.je.tree.INLongRep$DefaultRep: int bytesPerValue>;

        specialinvoke $r0.<com.sleepycat.je.tree.INLongRep$DefaultRep: void <init>(byte[],int)>($r2, $i2);

        return $r0;
    }

    private void <init>(byte[], int)
    {
        com.sleepycat.je.tree.INLongRep$DefaultRep this;
        byte[] byteArray;
        int bytesPerValue;

        this := @this: com.sleepycat.je.tree.INLongRep$DefaultRep;

        byteArray := @parameter0: byte[];

        bytesPerValue := @parameter1: int;

        specialinvoke this.<com.sleepycat.je.tree.INLongRep: void <init>()>();

        this.<com.sleepycat.je.tree.INLongRep$DefaultRep: byte[] byteArray> = byteArray;

        this.<com.sleepycat.je.tree.INLongRep$DefaultRep: int bytesPerValue> = bytesPerValue;

        return;
    }


