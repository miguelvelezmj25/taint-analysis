    public void <init>()
    {
        java.util.concurrent.locks.ReentrantLock l0;
        java.util.concurrent.locks.ReentrantLock$NonfairSync $r0;

        l0 := @this: java.util.concurrent.locks.ReentrantLock;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        $r0 = new java.util.concurrent.locks.ReentrantLock$NonfairSync;

        specialinvoke $r0.<java.util.concurrent.locks.ReentrantLock$NonfairSync: void <init>()>();

        l0.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync> = $r0;

        return;
    }

    public java.util.concurrent.locks.Condition newCondition()
    {
        java.util.concurrent.locks.ReentrantLock l0;
        java.util.concurrent.locks.ReentrantLock$Sync $r0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject $r1;

        l0 := @this: java.util.concurrent.locks.ReentrantLock;

        $r0 = l0.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync>;

        $r1 = virtualinvoke $r0.<java.util.concurrent.locks.ReentrantLock$Sync: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject newCondition()>();

        return $r1;
    }

    public void lock()
    {
        java.util.concurrent.locks.ReentrantLock l0;
        java.util.concurrent.locks.ReentrantLock$Sync $r0;

        l0 := @this: java.util.concurrent.locks.ReentrantLock;

        $r0 = l0.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync>;

        virtualinvoke $r0.<java.util.concurrent.locks.ReentrantLock$Sync: void lock()>();

        return;
    }

    public void unlock()
    {
        java.util.concurrent.locks.ReentrantLock l0;
        java.util.concurrent.locks.ReentrantLock$Sync $r0;

        l0 := @this: java.util.concurrent.locks.ReentrantLock;

        $r0 = l0.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync>;

        virtualinvoke $r0.<java.util.concurrent.locks.ReentrantLock$Sync: boolean release(int)>(1);

        return;
    }


