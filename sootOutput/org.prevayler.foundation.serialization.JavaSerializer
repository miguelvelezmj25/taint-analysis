    public void <init>()
    {
        org.prevayler.foundation.serialization.JavaSerializer this;

        this := @this: org.prevayler.foundation.serialization.JavaSerializer;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<org.prevayler.foundation.serialization.JavaSerializer: java.lang.ClassLoader _loader> = null;

        return;
    }

    public void writeObject(java.io.OutputStream, java.lang.Object) throws java.io.IOException
    {
        org.prevayler.foundation.serialization.JavaSerializer this;
        java.io.OutputStream stream;
        java.lang.Object object;
        java.io.ObjectOutputStream objects, $r0;

        this := @this: org.prevayler.foundation.serialization.JavaSerializer;

        stream := @parameter0: java.io.OutputStream;

        object := @parameter1: java.lang.Object;

        $r0 = new java.io.ObjectOutputStream;

        specialinvoke $r0.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>(stream);

        objects = $r0;

        virtualinvoke objects.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(object);

        virtualinvoke objects.<java.io.ObjectOutputStream: void close()>();

        return;
    }

    public java.lang.Object readObject(java.io.InputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.prevayler.foundation.serialization.JavaSerializer this;
        java.io.InputStream stream;
        org.prevayler.foundation.ObjectInputStreamWithClassLoader objects, $r0;
        java.lang.Object object;
        java.lang.ClassLoader $r1;

        this := @this: org.prevayler.foundation.serialization.JavaSerializer;

        stream := @parameter0: java.io.InputStream;

        $r0 = new org.prevayler.foundation.ObjectInputStreamWithClassLoader;

        $r1 = this.<org.prevayler.foundation.serialization.JavaSerializer: java.lang.ClassLoader _loader>;

        specialinvoke $r0.<org.prevayler.foundation.ObjectInputStreamWithClassLoader: void <init>(java.io.InputStream,java.lang.ClassLoader)>(stream, $r1);

        objects = $r0;

        object = virtualinvoke objects.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        virtualinvoke objects.<java.io.ObjectInputStream: void close()>();

        return object;
    }


