    public void <init>(java.lang.String, java.lang.String) throws java.io.FileNotFoundException
    {
        com.googlecode.pngtastic.core.PngImage this;
        java.lang.String fileName, logLevel;
        java.io.BufferedInputStream $r0;
        java.io.FileInputStream $r1;

        this := @this: com.googlecode.pngtastic.core.PngImage;

        fileName := @parameter0: java.lang.String;

        logLevel := @parameter1: java.lang.String;

        $r0 = new java.io.BufferedInputStream;

        $r1 = new java.io.FileInputStream;

        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.lang.String)>(fileName);

        specialinvoke $r0.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r1);

        specialinvoke this.<com.googlecode.pngtastic.core.PngImage: void <init>(java.io.InputStream,java.lang.String)>($r0, logLevel);

        this.<com.googlecode.pngtastic.core.PngImage: java.lang.String fileName> = fileName;

        return;
    }

    public void <init>(java.io.InputStream, java.lang.String)
    {
        com.googlecode.pngtastic.core.PngImage this;
        java.io.InputStream ins;
        java.lang.String logLevel, $r3, $r4, $r10, $r12;
        int length;
        com.googlecode.pngtastic.core.PngChunk chunk, $r2;
        byte[] type, data;
        long crc;
        com.googlecode.pngtastic.core.Logger $r0;
        java.io.DataInputStream $r1, dis#1;
        boolean $z0, $z1;
        com.googlecode.pngtastic.core.PngException $r5, $r7;
        java.io.IOException $r6, dis#2;
        java.lang.StringBuilder $r8, $r9, $r11;

        this := @this: com.googlecode.pngtastic.core.PngImage;

        ins := @parameter0: java.io.InputStream;

        logLevel := @parameter1: java.lang.String;

        $r0 = new com.googlecode.pngtastic.core.Logger;

        specialinvoke $r0.<com.googlecode.pngtastic.core.Logger: void <init>(java.lang.String)>(logLevel);

        specialinvoke this.<com.googlecode.pngtastic.core.PngImage: void <init>(com.googlecode.pngtastic.core.Logger)>($r0);

     label1:
        $r1 = new java.io.DataInputStream;

        specialinvoke $r1.<java.io.DataInputStream: void <init>(java.io.InputStream)>(ins);

        dis#1 = $r1;

        staticinvoke <com.googlecode.pngtastic.core.PngImage: void readSignature(java.io.DataInputStream)>(dis#1);

     label2:
        length = specialinvoke this.<com.googlecode.pngtastic.core.PngImage: int getChunkLength(java.io.DataInputStream)>(dis#1);

        type = specialinvoke this.<com.googlecode.pngtastic.core.PngImage: byte[] getChunkType(java.io.InputStream)>(dis#1);

        data = specialinvoke this.<com.googlecode.pngtastic.core.PngImage: byte[] getChunkData(java.io.InputStream,int)>(dis#1, length);

        crc = specialinvoke this.<com.googlecode.pngtastic.core.PngImage: long getChunkCrc(java.io.DataInputStream)>(dis#1);

        $r2 = new com.googlecode.pngtastic.core.PngChunk;

        specialinvoke $r2.<com.googlecode.pngtastic.core.PngChunk: void <init>(byte[],byte[])>(type, data);

        chunk = $r2;

        $z0 = virtualinvoke chunk.<com.googlecode.pngtastic.core.PngChunk: boolean verifyCRC(long)>(crc);

        if $z0 != 0 goto label3;

        $r5 = new com.googlecode.pngtastic.core.PngException;

        specialinvoke $r5.<com.googlecode.pngtastic.core.PngException: void <init>(java.lang.String)>("Corrupted file, crc check failed");

        throw $r5;

     label3:
        virtualinvoke this.<com.googlecode.pngtastic.core.PngImage: void addChunk(com.googlecode.pngtastic.core.PngChunk)>(chunk);

        if length <= 0 goto label4;

        $r3 = "IEND";

        $r4 = virtualinvoke chunk.<com.googlecode.pngtastic.core.PngChunk: java.lang.String getTypeString()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label2;

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

        dis#2 = $r6;

        $r7 = new com.googlecode.pngtastic.core.PngException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: ");

        $r10 = virtualinvoke dis#2.<java.io.IOException: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<com.googlecode.pngtastic.core.PngException: void <init>(java.lang.String,java.lang.Throwable)>($r12, dis#2);

        throw $r7;

     label6:
        return;

        catch java.io.IOException from label1 to label4 with label5;
    }

    private static void readSignature(java.io.DataInputStream) throws com.googlecode.pngtastic.core.PngException, java.io.IOException
    {
        java.io.DataInputStream ins;
        long signature;
        byte $b0;
        com.googlecode.pngtastic.core.PngException $r0;

        ins := @parameter0: java.io.DataInputStream;

        signature = virtualinvoke ins.<java.io.DataInputStream: long readLong()>();

        $b0 = signature cmp -8552249625308161526L;

        if $b0 == 0 goto label1;

        $r0 = new com.googlecode.pngtastic.core.PngException;

        specialinvoke $r0.<com.googlecode.pngtastic.core.PngException: void <init>(java.lang.String)>("Bad png signature");

        throw $r0;

     label1:
        return;
    }

    public void <init>(com.googlecode.pngtastic.core.Logger)
    {
        com.googlecode.pngtastic.core.PngImage this;
        com.googlecode.pngtastic.core.Logger log;
        java.util.ArrayList $r0;

        this := @this: com.googlecode.pngtastic.core.PngImage;

        log := @parameter0: com.googlecode.pngtastic.core.Logger;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        this.<com.googlecode.pngtastic.core.PngImage: java.util.List chunks> = $r0;

        this.<com.googlecode.pngtastic.core.PngImage: com.googlecode.pngtastic.core.Logger log> = log;

        return;
    }

    private int getChunkLength(java.io.DataInputStream) throws java.io.IOException
    {
        com.googlecode.pngtastic.core.PngImage this;
        java.io.DataInputStream ins;
        int $i0;

        this := @this: com.googlecode.pngtastic.core.PngImage;

        ins := @parameter0: java.io.DataInputStream;

        $i0 = virtualinvoke ins.<java.io.DataInputStream: int readInt()>();

        return $i0;
    }

    private byte[] getChunkType(java.io.InputStream) throws com.googlecode.pngtastic.core.PngException
    {
        com.googlecode.pngtastic.core.PngImage this;
        java.io.InputStream ins;
        byte[] $r0;

        this := @this: com.googlecode.pngtastic.core.PngImage;

        ins := @parameter0: java.io.InputStream;

        $r0 = specialinvoke this.<com.googlecode.pngtastic.core.PngImage: byte[] getChunkData(java.io.InputStream,int)>(ins, 4);

        return $r0;
    }

    private byte[] getChunkData(java.io.InputStream, int) throws com.googlecode.pngtastic.core.PngException
    {
        com.googlecode.pngtastic.core.PngImage this;
        java.io.InputStream ins;
        int length, actual#1;
        byte[] data;
        com.googlecode.pngtastic.core.PngException $r0, $r6;
        java.lang.Object[] $r1;
        java.lang.Integer $r2, $r3;
        java.lang.String $r4;
        java.io.IOException $r5, actual#2;

        this := @this: com.googlecode.pngtastic.core.PngImage;

        ins := @parameter0: java.io.InputStream;

        length := @parameter1: int;

        data = newarray (byte)[length];

     label1:
        actual#1 = virtualinvoke ins.<java.io.InputStream: int read(byte[])>(data);

        if actual#1 >= length goto label2;

        $r0 = new com.googlecode.pngtastic.core.PngException;

        $r1 = newarray (java.lang.Object)[2];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(length);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(actual#1);

        $r1[1] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Expected %d bytes but got %d", $r1);

        specialinvoke $r0.<com.googlecode.pngtastic.core.PngException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        actual#2 = $r5;

        $r6 = new com.googlecode.pngtastic.core.PngException;

        specialinvoke $r6.<com.googlecode.pngtastic.core.PngException: void <init>(java.lang.String,java.lang.Throwable)>("Error reading chunk data", actual#2);

        throw $r6;

     label4:
        return data;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private long getChunkCrc(java.io.DataInputStream) throws java.io.IOException
    {
        com.googlecode.pngtastic.core.PngImage this;
        java.io.DataInputStream ins;
        int i;
        long crc, $l0;

        this := @this: com.googlecode.pngtastic.core.PngImage;

        ins := @parameter0: java.io.DataInputStream;

        i = virtualinvoke ins.<java.io.DataInputStream: int readInt()>();

        $l0 = (long) i;

        crc = $l0 & 4294967295L;

        return crc;
    }

    public void addChunk(com.googlecode.pngtastic.core.PngChunk)
    {
        com.googlecode.pngtastic.core.PngImage this;
        com.googlecode.pngtastic.core.PngChunk chunk;
        java.lang.String l2;
        int $i0;
        boolean $z0, $z2;
        long $l1, $l2;
        short $s3, $s4, $s5;
        byte l3#1;
        java.util.List $r0;

        this := @this: com.googlecode.pngtastic.core.PngImage;

        chunk := @parameter0: com.googlecode.pngtastic.core.PngChunk;

        l2 = virtualinvoke chunk.<com.googlecode.pngtastic.core.PngChunk: java.lang.String getTypeString()>();

        l3#1 = -1;

        $i0 = virtualinvoke l2.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case 2246125: goto label1;
            case 2458989: goto label2;
            default: goto label3;
        };

     label1:
        $z2 = virtualinvoke l2.<java.lang.String: boolean equals(java.lang.Object)>("IHDR");

        if $z2 == 0 goto label3;

        l3#1 = 0;

        goto label3;

     label2:
        $z0 = virtualinvoke l2.<java.lang.String: boolean equals(java.lang.Object)>("PLTE");

        if $z0 == 0 goto label3;

        l3#1 = 1;

     label3:
        lookupswitch(l3#1)
        {
            case 0: goto label4;
            case 1: goto label5;
            default: goto label6;
        };

     label4:
        $l1 = virtualinvoke chunk.<com.googlecode.pngtastic.core.PngChunk: long getWidth()>();

        this.<com.googlecode.pngtastic.core.PngImage: long width> = $l1;

        $l2 = virtualinvoke chunk.<com.googlecode.pngtastic.core.PngChunk: long getHeight()>();

        this.<com.googlecode.pngtastic.core.PngImage: long height> = $l2;

        $s3 = virtualinvoke chunk.<com.googlecode.pngtastic.core.PngChunk: short getBitDepth()>();

        this.<com.googlecode.pngtastic.core.PngImage: short bitDepth> = $s3;

        $s4 = virtualinvoke chunk.<com.googlecode.pngtastic.core.PngChunk: short getColorType()>();

        this.<com.googlecode.pngtastic.core.PngImage: short colorType> = $s4;

        $s5 = virtualinvoke chunk.<com.googlecode.pngtastic.core.PngChunk: short getInterlace()>();

        this.<com.googlecode.pngtastic.core.PngImage: short interlace> = $s5;

        goto label6;

     label5:
        this.<com.googlecode.pngtastic.core.PngImage: com.googlecode.pngtastic.core.PngChunk palette> = chunk;

     label6:
        $r0 = this.<com.googlecode.pngtastic.core.PngImage: java.util.List chunks>;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(chunk);

        return;
    }

    public short getInterlace()
    {
        com.googlecode.pngtastic.core.PngImage this;
        short $s0;

        this := @this: com.googlecode.pngtastic.core.PngImage;

        $s0 = this.<com.googlecode.pngtastic.core.PngImage: short interlace>;

        return $s0;
    }

    public int getSampleBitCount()
    {
        com.googlecode.pngtastic.core.PngImage this;
        com.googlecode.pngtastic.core.PngImageType $r0, $r1, $r3;
        int $i0, $i2;
        short $s1, $s3;

        this := @this: com.googlecode.pngtastic.core.PngImage;

        $r0 = this.<com.googlecode.pngtastic.core.PngImage: com.googlecode.pngtastic.core.PngImageType imageType>;

        if $r0 != null goto label1;

        $s3 = this.<com.googlecode.pngtastic.core.PngImage: short colorType>;

        $r3 = staticinvoke <com.googlecode.pngtastic.core.PngImageType: com.googlecode.pngtastic.core.PngImageType forColorType(int)>($s3);

        goto label2;

     label1:
        $r3 = this.<com.googlecode.pngtastic.core.PngImage: com.googlecode.pngtastic.core.PngImageType imageType>;

     label2:
        this.<com.googlecode.pngtastic.core.PngImage: com.googlecode.pngtastic.core.PngImageType imageType> = $r3;

        $r1 = this.<com.googlecode.pngtastic.core.PngImage: com.googlecode.pngtastic.core.PngImageType imageType>;

        $i0 = virtualinvoke $r1.<com.googlecode.pngtastic.core.PngImageType: int channelCount()>();

        $s1 = this.<com.googlecode.pngtastic.core.PngImage: short bitDepth>;

        $i2 = $i0 * $s1;

        return $i2;
    }

    public java.util.List getChunks()
    {
        com.googlecode.pngtastic.core.PngImage this;
        java.util.List $r0;

        this := @this: com.googlecode.pngtastic.core.PngImage;

        $r0 = this.<com.googlecode.pngtastic.core.PngImage: java.util.List chunks>;

        return $r0;
    }

    public long getWidth()
    {
        com.googlecode.pngtastic.core.PngImage this;
        long $l0;

        this := @this: com.googlecode.pngtastic.core.PngImage;

        $l0 = this.<com.googlecode.pngtastic.core.PngImage: long width>;

        return $l0;
    }

    public long getHeight()
    {
        com.googlecode.pngtastic.core.PngImage this;
        long $l0;

        this := @this: com.googlecode.pngtastic.core.PngImage;

        $l0 = this.<com.googlecode.pngtastic.core.PngImage: long height>;

        return $l0;
    }

    public java.lang.String getFileName()
    {
        com.googlecode.pngtastic.core.PngImage this;
        java.lang.String $r0;

        this := @this: com.googlecode.pngtastic.core.PngImage;

        $r0 = this.<com.googlecode.pngtastic.core.PngImage: java.lang.String fileName>;

        return $r0;
    }

    public short getBitDepth()
    {
        com.googlecode.pngtastic.core.PngImage this;
        short $s0;

        this := @this: com.googlecode.pngtastic.core.PngImage;

        $s0 = this.<com.googlecode.pngtastic.core.PngImage: short bitDepth>;

        return $s0;
    }

    public short getColorType()
    {
        com.googlecode.pngtastic.core.PngImage this;
        short $s0;

        this := @this: com.googlecode.pngtastic.core.PngImage;

        $s0 = this.<com.googlecode.pngtastic.core.PngImage: short colorType>;

        return $s0;
    }

    public com.googlecode.pngtastic.core.PngChunk getPalette()
    {
        com.googlecode.pngtastic.core.PngImage this;
        com.googlecode.pngtastic.core.PngChunk $r0;

        this := @this: com.googlecode.pngtastic.core.PngImage;

        $r0 = this.<com.googlecode.pngtastic.core.PngImage: com.googlecode.pngtastic.core.PngChunk palette>;

        return $r0;
    }


