    public void <init>(java.util.concurrent.locks.AbstractQueuedSynchronizer)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject l0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer l1;

        l0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        l1 := @parameter0: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0> = l1;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        return;
    }

    public final void signal()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject l0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node l1;
        java.util.concurrent.locks.AbstractQueuedSynchronizer $r0;
        boolean $z0;
        java.lang.IllegalMonitorStateException $r1;

        l0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        $r0 = l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;

        $z0 = virtualinvoke $r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean isHeldExclusively()>();

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalMonitorStateException;

        specialinvoke $r1.<java.lang.IllegalMonitorStateException: void <init>()>();

        throw $r1;

     label1:
        l1 = l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node firstWaiter>;

        if l1 == null goto label2;

        specialinvoke l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void doSignal(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(l1);

     label2:
        return;
    }

    private void doSignal(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject l0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node $r0, l1#1, $r2;
        java.util.concurrent.locks.AbstractQueuedSynchronizer $r1;
        boolean $z0;

        l0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        l1#1 := @parameter0: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;

     label1:
        $r0 = l1#1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node nextWaiter>;

        l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node firstWaiter> = $r0;

        if $r0 != null goto label2;

        l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node lastWaiter> = null;

     label2:
        l1#1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node nextWaiter> = null;

        $r1 = l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean transferForSignal(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(l1#1);

        if $z0 != 0 goto label3;

        $r2 = l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node firstWaiter>;

        l1#1 = $r2;

        if $r2 != null goto label1;

     label3:
        return;
    }

    public final void signalAll()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject l0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node l1;
        java.util.concurrent.locks.AbstractQueuedSynchronizer $r0;
        boolean $z0;
        java.lang.IllegalMonitorStateException $r1;

        l0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        $r0 = l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;

        $z0 = virtualinvoke $r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean isHeldExclusively()>();

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalMonitorStateException;

        specialinvoke $r1.<java.lang.IllegalMonitorStateException: void <init>()>();

        throw $r1;

     label1:
        l1 = l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node firstWaiter>;

        if l1 == null goto label2;

        specialinvoke l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void doSignalAll(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(l1);

     label2:
        return;
    }

    private void doSignalAll(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject l0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node l2, l1#1;
        java.util.concurrent.locks.AbstractQueuedSynchronizer $r0;

        l0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        l1#1 := @parameter0: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;

        l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node firstWaiter> = null;

        l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node lastWaiter> = null;

     label1:
        l2 = l1#1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node nextWaiter>;

        l1#1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node nextWaiter> = null;

        $r0 = l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer this$0>;

        virtualinvoke $r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean transferForSignal(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(l1#1);

        l1#1 = l2;

        if l1#1 != null goto label1;

        return;
    }


