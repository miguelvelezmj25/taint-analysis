    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        int[] $r1, $r2;
        int i#7, w#11, bitCount#13, j#15, $i0, $i1, $i2;

        $r0 = class "org/tukaani/xz/rangecoder/RangeEncoder";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.tukaani.xz.rangecoder.RangeEncoder: boolean $assertionsDisabled> = $z1;

        $r1 = newarray (int)[128];

        <org.tukaani.xz.rangecoder.RangeEncoder: int[] prices> = $r1;

        i#7 = 8;

     label3:
        if i#7 >= 2048 goto label8;

        w#11 = i#7;

        bitCount#13 = 0;

        j#15 = 0;

     label4:
        if j#15 >= 4 goto label7;

        w#11 = w#11 * w#11;

        bitCount#13 = bitCount#13 << 1;

     label5:
        $i0 = w#11 & -65536;

        if $i0 == 0 goto label6;

        w#11 = w#11 >>> 1;

        bitCount#13 = bitCount#13 + 1;

        goto label5;

     label6:
        j#15 = j#15 + 1;

        goto label4;

     label7:
        $r2 = <org.tukaani.xz.rangecoder.RangeEncoder: int[] prices>;

        $i1 = i#7 >> 4;

        $i2 = 161 - bitCount#13;

        $r2[$i1] = $i2;

        i#7 = i#7 + 16;

        goto label3;

     label8:
        return;
    }

    public void <init>()
    {
        org.tukaani.xz.rangecoder.RangeEncoder this;

        this := @this: org.tukaani.xz.rangecoder.RangeEncoder;

        specialinvoke this.<org.tukaani.xz.rangecoder.RangeCoder: void <init>()>();

        return;
    }

    public void reset()
    {
        org.tukaani.xz.rangecoder.RangeEncoder this;

        this := @this: org.tukaani.xz.rangecoder.RangeEncoder;

        this.<org.tukaani.xz.rangecoder.RangeEncoder: long low> = 0L;

        this.<org.tukaani.xz.rangecoder.RangeEncoder: int range> = -1;

        this.<org.tukaani.xz.rangecoder.RangeEncoder: byte cache> = 0;

        this.<org.tukaani.xz.rangecoder.RangeEncoder: long cacheSize> = 1L;

        return;
    }

    public int finish() throws java.io.IOException
    {
        org.tukaani.xz.rangecoder.RangeEncoder this;
        int i#2;

        this := @this: org.tukaani.xz.rangecoder.RangeEncoder;

        i#2 = 0;

     label1:
        if i#2 >= 5 goto label2;

        specialinvoke this.<org.tukaani.xz.rangecoder.RangeEncoder: void shiftLow()>();

        i#2 = i#2 + 1;

        goto label1;

     label2:
        return -1;
    }

    private void shiftLow() throws java.io.IOException
    {
        org.tukaani.xz.rangecoder.RangeEncoder this;
        int lowHi, $i4, $i10;
        long $l0, $l1, $l2, $l5, $l6, $l8, $l9, $l12, $l13, $l14, $l15, $l16;
        byte $b3, $b7, $b11;
        short temp#13;

        this := @this: org.tukaani.xz.rangecoder.RangeEncoder;

        $l0 = this.<org.tukaani.xz.rangecoder.RangeEncoder: long low>;

        $l1 = $l0 >>> 32;

        lowHi = (int) $l1;

        if lowHi != 0 goto label1;

        $l2 = this.<org.tukaani.xz.rangecoder.RangeEncoder: long low>;

        $b3 = $l2 cmp 4278190080L;

        if $b3 >= 0 goto label3;

     label1:
        temp#13 = this.<org.tukaani.xz.rangecoder.RangeEncoder: byte cache>;

     label2:
        $i4 = temp#13 + lowHi;

        virtualinvoke this.<org.tukaani.xz.rangecoder.RangeEncoder: void writeByte(int)>($i4);

        temp#13 = 255;

        $l5 = this.<org.tukaani.xz.rangecoder.RangeEncoder: long cacheSize>;

        $l6 = $l5 - 1L;

        this.<org.tukaani.xz.rangecoder.RangeEncoder: long cacheSize> = $l6;

        $b7 = $l6 cmp 0L;

        if $b7 != 0 goto label2;

        $l8 = this.<org.tukaani.xz.rangecoder.RangeEncoder: long low>;

        $l9 = $l8 >>> 24;

        $i10 = (int) $l9;

        $b11 = (byte) $i10;

        this.<org.tukaani.xz.rangecoder.RangeEncoder: byte cache> = $b11;

     label3:
        $l12 = this.<org.tukaani.xz.rangecoder.RangeEncoder: long cacheSize>;

        $l13 = $l12 + 1L;

        this.<org.tukaani.xz.rangecoder.RangeEncoder: long cacheSize> = $l13;

        $l14 = this.<org.tukaani.xz.rangecoder.RangeEncoder: long low>;

        $l15 = $l14 & 16777215L;

        $l16 = $l15 << 8;

        this.<org.tukaani.xz.rangecoder.RangeEncoder: long low> = $l16;

        return;
    }

    public static int getBitPrice(int, int)
    {
        int prob, bit, $i0, $i1, $i2, $i3, $i4;
        boolean $z0;
        java.lang.AssertionError $r0;
        int[] $r1;

        prob := @parameter0: int;

        bit := @parameter1: int;

        $z0 = <org.tukaani.xz.rangecoder.RangeEncoder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if bit == 0 goto label1;

        if bit == 1 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $r1 = <org.tukaani.xz.rangecoder.RangeEncoder: int[] prices>;

        $i0 = neg bit;

        $i1 = $i0 & 2047;

        $i2 = prob ^ $i1;

        $i3 = $i2 >>> 4;

        $i4 = $r1[$i3];

        return $i4;
    }

    public static int getReverseBitTreePrice(short[], int)
    {
        short[] probs;
        int bit, symbol#1, price#3, index#5, $i0, symbol#10, $i2, $i3;
        short $s1;

        probs := @parameter0: short[];

        symbol#1 := @parameter1: int;

        price#3 = 0;

        index#5 = 1;

        $i0 = lengthof probs;

        symbol#10 = symbol#1 | $i0;

     label1:
        bit = symbol#10 & 1;

        symbol#10 = symbol#10 >>> 1;

        $s1 = probs[index#5];

        $i2 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitPrice(int,int)>($s1, bit);

        price#3 = price#3 + $i2;

        $i3 = index#5 << 1;

        index#5 = $i3 | bit;

        if symbol#10 != 1 goto label1;

        return price#3;
    }

    public static int getDirectBitsPrice(int)
    {
        int count, $i0;

        count := @parameter0: int;

        $i0 = count << 4;

        return $i0;
    }

    public static int getBitTreePrice(short[], int)
    {
        short[] probs;
        int bit, symbol#1, price#3, $i0, symbol#8, $i2;
        short $s1;

        probs := @parameter0: short[];

        symbol#1 := @parameter1: int;

        price#3 = 0;

        $i0 = lengthof probs;

        symbol#8 = symbol#1 | $i0;

     label1:
        bit = symbol#8 & 1;

        symbol#8 = symbol#8 >>> 1;

        $s1 = probs[symbol#8];

        $i2 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitPrice(int,int)>($s1, bit);

        price#3 = price#3 + $i2;

        if symbol#8 != 1 goto label1;

        return price#3;
    }

    public void encodeReverseBitTree(short[], int) throws java.io.IOException
    {
        org.tukaani.xz.rangecoder.RangeEncoder this;
        short[] probs;
        int bit, symbol#1, index#3, $i0, symbol#8, $i1;

        this := @this: org.tukaani.xz.rangecoder.RangeEncoder;

        probs := @parameter0: short[];

        symbol#1 := @parameter1: int;

        index#3 = 1;

        $i0 = lengthof probs;

        symbol#8 = symbol#1 | $i0;

     label1:
        bit = symbol#8 & 1;

        symbol#8 = symbol#8 >>> 1;

        virtualinvoke this.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBit(short[],int,int)>(probs, index#3, bit);

        $i1 = index#3 << 1;

        index#3 = $i1 | bit;

        if symbol#8 != 1 goto label1;

        return;
    }

    public void encodeBit(short[], int, int) throws java.io.IOException
    {
        org.tukaani.xz.rangecoder.RangeEncoder this;
        short[] probs;
        int index, bit, bound, $i0, $i1, $i2, $i3, $i4, $i10, $i11, $i13, $i15, $i16, $i17, $i18;
        short prob, $s5, $s12, $s14;
        long $l6, $l7, $l8, $l9;

        this := @this: org.tukaani.xz.rangecoder.RangeEncoder;

        probs := @parameter0: short[];

        index := @parameter1: int;

        bit := @parameter2: int;

        prob = probs[index];

        $i0 = this.<org.tukaani.xz.rangecoder.RangeEncoder: int range>;

        $i1 = $i0 >>> 11;

        bound = $i1 * prob;

        if bit != 0 goto label1;

        this.<org.tukaani.xz.rangecoder.RangeEncoder: int range> = bound;

        $i2 = 2048 - prob;

        $i3 = $i2 >>> 5;

        $i4 = prob + $i3;

        $s5 = (short) $i4;

        probs[index] = $s5;

        goto label2;

     label1:
        $l6 = this.<org.tukaani.xz.rangecoder.RangeEncoder: long low>;

        $l7 = (long) bound;

        $l8 = $l7 & 4294967295L;

        $l9 = $l6 + $l8;

        this.<org.tukaani.xz.rangecoder.RangeEncoder: long low> = $l9;

        $i10 = this.<org.tukaani.xz.rangecoder.RangeEncoder: int range>;

        $i11 = $i10 - bound;

        this.<org.tukaani.xz.rangecoder.RangeEncoder: int range> = $i11;

        $s12 = prob >>> 5;

        $i13 = prob - $s12;

        $s14 = (short) $i13;

        probs[index] = $s14;

     label2:
        $i15 = this.<org.tukaani.xz.rangecoder.RangeEncoder: int range>;

        $i16 = $i15 & -16777216;

        if $i16 != 0 goto label3;

        $i17 = this.<org.tukaani.xz.rangecoder.RangeEncoder: int range>;

        $i18 = $i17 << 8;

        this.<org.tukaani.xz.rangecoder.RangeEncoder: int range> = $i18;

        specialinvoke this.<org.tukaani.xz.rangecoder.RangeEncoder: void shiftLow()>();

     label3:
        return;
    }

    public void encodeDirectBits(int, int) throws java.io.IOException
    {
        org.tukaani.xz.rangecoder.RangeEncoder this;
        int value, count#1, $i0, $i1, $i3, $i4, $i5, $i6, $i7, $i10, $i11, $i12, $i13;
        long $l2, $l8, $l9;

        this := @this: org.tukaani.xz.rangecoder.RangeEncoder;

        value := @parameter0: int;

        count#1 := @parameter1: int;

     label1:
        $i0 = this.<org.tukaani.xz.rangecoder.RangeEncoder: int range>;

        $i1 = $i0 >>> 1;

        this.<org.tukaani.xz.rangecoder.RangeEncoder: int range> = $i1;

        $l2 = this.<org.tukaani.xz.rangecoder.RangeEncoder: long low>;

        $i3 = this.<org.tukaani.xz.rangecoder.RangeEncoder: int range>;

        count#1 = count#1 + -1;

        $i4 = value >>> count#1;

        $i5 = $i4 & 1;

        $i6 = 0 - $i5;

        $i7 = $i3 & $i6;

        $l8 = (long) $i7;

        $l9 = $l2 + $l8;

        this.<org.tukaani.xz.rangecoder.RangeEncoder: long low> = $l9;

        $i10 = this.<org.tukaani.xz.rangecoder.RangeEncoder: int range>;

        $i11 = $i10 & -16777216;

        if $i11 != 0 goto label2;

        $i12 = this.<org.tukaani.xz.rangecoder.RangeEncoder: int range>;

        $i13 = $i12 << 8;

        this.<org.tukaani.xz.rangecoder.RangeEncoder: int range> = $i13;

        specialinvoke this.<org.tukaani.xz.rangecoder.RangeEncoder: void shiftLow()>();

     label2:
        if count#1 != 0 goto label1;

        return;
    }

    public void encodeBitTree(short[], int) throws java.io.IOException
    {
        org.tukaani.xz.rangecoder.RangeEncoder this;
        short[] probs;
        int symbol, bit, index#2, mask#5;

        this := @this: org.tukaani.xz.rangecoder.RangeEncoder;

        probs := @parameter0: short[];

        symbol := @parameter1: int;

        index#2 = 1;

        mask#5 = lengthof probs;

     label1:
        mask#5 = mask#5 >>> 1;

        bit = symbol & mask#5;

        virtualinvoke this.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBit(short[],int,int)>(probs, index#2, bit);

        index#2 = index#2 << 1;

        if bit == 0 goto label2;

        index#2 = index#2 | 1;

     label2:
        if mask#5 != 1 goto label1;

        return;
    }


