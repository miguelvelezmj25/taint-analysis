    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "berkeley/com/sleepycat/je/evictor/Evictor";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <berkeley.com.sleepycat.je.evictor.Evictor$ReentrancyGuard: boolean $assertionsDisabled> = $z1;

        return;
    }

    void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl, java.util.logging.Logger)
    {
        berkeley.com.sleepycat.je.evictor.Evictor$ReentrancyGuard this;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        java.util.logging.Logger logger;
        java.util.concurrent.ConcurrentHashMap $r0;

        this := @this: berkeley.com.sleepycat.je.evictor.Evictor$ReentrancyGuard;

        envImpl := @parameter0: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        logger := @parameter1: java.util.logging.Logger;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<berkeley.com.sleepycat.je.evictor.Evictor$ReentrancyGuard: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl> = envImpl;

        this.<berkeley.com.sleepycat.je.evictor.Evictor$ReentrancyGuard: java.util.logging.Logger logger> = logger;

        $r0 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        this.<berkeley.com.sleepycat.je.evictor.Evictor$ReentrancyGuard: java.util.concurrent.ConcurrentHashMap activeThreads> = $r0;

        return;
    }

    void leave()
    {
        berkeley.com.sleepycat.je.evictor.Evictor$ReentrancyGuard this;
        boolean $z0, $z1;
        java.util.concurrent.ConcurrentHashMap $r0, $r3;
        java.lang.Thread $r1, $r4;
        java.lang.AssertionError $r2;

        this := @this: berkeley.com.sleepycat.je.evictor.Evictor$ReentrancyGuard;

        $z0 = <berkeley.com.sleepycat.je.evictor.Evictor$ReentrancyGuard: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r0 = this.<berkeley.com.sleepycat.je.evictor.Evictor$ReentrancyGuard: java.util.concurrent.ConcurrentHashMap activeThreads>;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z1 = virtualinvoke $r0.<java.util.concurrent.ConcurrentHashMap: boolean contains(java.lang.Object)>($r1);

        if $z1 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $r3 = this.<berkeley.com.sleepycat.je.evictor.Evictor$ReentrancyGuard: java.util.concurrent.ConcurrentHashMap activeThreads>;

        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>($r4);

        return;
    }

    boolean enter()
    {
        berkeley.com.sleepycat.je.evictor.Evictor$ReentrancyGuard this;
        java.lang.Thread thisThread;
        java.util.concurrent.ConcurrentHashMap $r0, $r14;
        boolean $z0, $z1;
        java.util.logging.Logger $r1;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r2;
        java.lang.StringBuilder $r3, $r4, $r6, $r9, $r10, $r12;
        java.lang.String $r5, $r7, $r11, $r13;
        java.lang.AssertionError $r8;

        this := @this: berkeley.com.sleepycat.je.evictor.Evictor$ReentrancyGuard;

        thisThread = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r0 = this.<berkeley.com.sleepycat.je.evictor.Evictor$ReentrancyGuard: java.util.concurrent.ConcurrentHashMap activeThreads>;

        $z0 = virtualinvoke $r0.<java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>(thisThread);

        if $z0 == 0 goto label2;

        $r1 = this.<berkeley.com.sleepycat.je.evictor.Evictor$ReentrancyGuard: java.util.logging.Logger logger>;

        $r2 = this.<berkeley.com.sleepycat.je.evictor.Evictor$ReentrancyGuard: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("reentrant call to eviction from ");

        $r5 = staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: java.lang.String getStackTrace()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: void severe(java.util.logging.Logger,berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String)>($r1, $r2, $r7);

        $z1 = <berkeley.com.sleepycat.je.evictor.Evictor$ReentrancyGuard: boolean $assertionsDisabled>;

        if $z1 != 0 goto label1;

        $r8 = new java.lang.AssertionError;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("reentrant call to eviction from ");

        $r11 = staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: java.lang.String getStackTrace()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>($r13);

        throw $r8;

     label1:
        return 0;

     label2:
        $r14 = this.<berkeley.com.sleepycat.je.evictor.Evictor$ReentrancyGuard: java.util.concurrent.ConcurrentHashMap activeThreads>;

        virtualinvoke $r14.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(thisThread, thisThread);

        return 1;
    }


