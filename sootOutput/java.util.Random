    static void <clinit>()
    {
        java.lang.Exception l0, $r12;
        java.util.concurrent.atomic.AtomicLong $r0;
        java.io.ObjectStreamField[] $r1;
        java.io.ObjectStreamField $r2, $r4, $r6;
        java.lang.Class $r3, $r5, $r7, $r10;
        sun.misc.Unsafe $r8, $r9;
        java.lang.reflect.Field $r11;
        long $l0;
        java.lang.Error $r13;

        $r0 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(8682522807148012L);

        <java.util.Random: java.util.concurrent.atomic.AtomicLong seedUniquifier> = $r0;

        $r1 = newarray (java.io.ObjectStreamField)[3];

        $r2 = new java.io.ObjectStreamField;

        $r3 = <java.lang.Long: java.lang.Class TYPE>;

        specialinvoke $r2.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("seed", $r3);

        $r1[0] = $r2;

        $r4 = new java.io.ObjectStreamField;

        $r5 = <java.lang.Double: java.lang.Class TYPE>;

        specialinvoke $r4.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("nextNextGaussian", $r5);

        $r1[1] = $r4;

        $r6 = new java.io.ObjectStreamField;

        $r7 = <java.lang.Boolean: java.lang.Class TYPE>;

        specialinvoke $r6.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("haveNextNextGaussian", $r7);

        $r1[2] = $r6;

        <java.util.Random: java.io.ObjectStreamField[] serialPersistentFields> = $r1;

        $r8 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.Random: sun.misc.Unsafe unsafe> = $r8;

     label1:
        $r9 = <java.util.Random: sun.misc.Unsafe unsafe>;

        $r10 = class "java/util/Random";

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("seed");

        $l0 = virtualinvoke $r9.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r11);

        <java.util.Random: long seedOffset> = $l0;

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

        l0 = $r12;

        $r13 = new java.lang.Error;

        specialinvoke $r13.<java.lang.Error: void <init>(java.lang.Throwable)>(l0);

        throw $r13;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void <init>(long)
    {
        java.util.Random l0;
        long l1, $l0;
        java.lang.Class $r0;
        java.util.concurrent.atomic.AtomicLong $r1, $r2;

        l0 := @this: java.util.Random;

        l1 := @parameter0: long;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        l0.<java.util.Random: boolean haveNextNextGaussian> = 0;

        $r0 = virtualinvoke l0.<java.lang.Object: java.lang.Class getClass()>();

        if $r0 != class "java/util/Random" goto label1;

        $r1 = new java.util.concurrent.atomic.AtomicLong;

        $l0 = staticinvoke <java.util.Random: long initialScramble(long)>(l1);

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>($l0);

        l0.<java.util.Random: java.util.concurrent.atomic.AtomicLong seed> = $r1;

        goto label2;

     label1:
        $r2 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        l0.<java.util.Random: java.util.concurrent.atomic.AtomicLong seed> = $r2;

        virtualinvoke l0.<java.util.Random: void setSeed(long)>(l1);

     label2:
        return;
    }

    private static long initialScramble(long)
    {
        long l0, $l0, $l1;

        l0 := @parameter0: long;

        $l0 = l0 ^ 25214903917L;

        $l1 = $l0 & 281474976710655L;

        return $l1;
    }

    public void <init>()
    {
        java.util.Random l0;
        long $l0, $l1, $l2;

        l0 := @this: java.util.Random;

        $l1 = staticinvoke <java.util.Random: long seedUniquifier()>();

        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        $l2 = $l1 ^ $l0;

        specialinvoke l0.<java.util.Random: void <init>(long)>($l2);

        return;
    }

    private static long seedUniquifier()
    {
        long l0, l2;
        java.util.concurrent.atomic.AtomicLong $r0, $r1;
        boolean $z0;

     label1:
        $r0 = <java.util.Random: java.util.concurrent.atomic.AtomicLong seedUniquifier>;

        l0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: long get()>();

        l2 = l0 * 181783497276652981L;

        $r1 = <java.util.Random: java.util.concurrent.atomic.AtomicLong seedUniquifier>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>(l0, l2);

        if $z0 == 0 goto label2;

        return l2;

     label2:
        goto label1;
    }


