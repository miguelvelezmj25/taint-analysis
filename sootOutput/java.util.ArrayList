    static void <clinit>()
    {
        java.lang.Object[] $r0, $r1;

        $r0 = newarray (java.lang.Object)[0];

        <java.util.ArrayList: java.lang.Object[] EMPTY_ELEMENTDATA> = $r0;

        $r1 = newarray (java.lang.Object)[0];

        <java.util.ArrayList: java.lang.Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA> = $r1;

        return;
    }

    public void <init>(int)
    {
        java.util.ArrayList l0;
        int l1;
        java.lang.Object[] $r0, $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        l0 := @this: java.util.ArrayList;

        l1 := @parameter0: int;

        specialinvoke l0.<java.util.AbstractList: void <init>()>();

        if l1 <= 0 goto label1;

        $r0 = newarray (java.lang.Object)[l1];

        l0.<java.util.ArrayList: java.lang.Object[] elementData> = $r0;

        goto label3;

     label1:
        if l1 != 0 goto label2;

        $r1 = <java.util.ArrayList: java.lang.Object[] EMPTY_ELEMENTDATA>;

        l0.<java.util.ArrayList: java.lang.Object[] elementData> = $r1;

        goto label3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal Capacity: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label3:
        return;
    }

    public boolean add(java.lang.Object)
    {
        java.util.ArrayList l0;
        java.lang.Object l1;
        int $i0, $i1, $i2, $i3;
        java.lang.Object[] $r0;

        l0 := @this: java.util.ArrayList;

        l1 := @parameter0: java.lang.Object;

        $i0 = l0.<java.util.ArrayList: int size>;

        $i1 = $i0 + 1;

        specialinvoke l0.<java.util.ArrayList: void ensureCapacityInternal(int)>($i1);

        $r0 = l0.<java.util.ArrayList: java.lang.Object[] elementData>;

        $i2 = l0.<java.util.ArrayList: int size>;

        $i3 = $i2 + 1;

        l0.<java.util.ArrayList: int size> = $i3;

        $r0[$i2] = l1;

        return 1;
    }

    public int size()
    {
        java.util.ArrayList l0;
        int $i0;

        l0 := @this: java.util.ArrayList;

        $i0 = l0.<java.util.ArrayList: int size>;

        return $i0;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.ArrayList l0;
        java.lang.Object[] l1, $r0, $r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Class $r1;

        l0 := @this: java.util.ArrayList;

        l1 := @parameter0: java.lang.Object[];

        $i0 = lengthof l1;

        $i1 = l0.<java.util.ArrayList: int size>;

        if $i0 >= $i1 goto label1;

        $r0 = l0.<java.util.ArrayList: java.lang.Object[] elementData>;

        $i2 = l0.<java.util.ArrayList: int size>;

        $r1 = virtualinvoke l1.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>($r0, $i2, $r1);

        $r3 = (java.lang.Object[]) $r2;

        return $r3;

     label1:
        $r4 = l0.<java.util.ArrayList: java.lang.Object[] elementData>;

        $i3 = l0.<java.util.ArrayList: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, l1, 0, $i3);

        $i4 = lengthof l1;

        $i5 = l0.<java.util.ArrayList: int size>;

        if $i4 <= $i5 goto label2;

        $i6 = l0.<java.util.ArrayList: int size>;

        l1[$i6] = null;

     label2:
        return l1;
    }

    private void ensureCapacityInternal(int)
    {
        java.util.ArrayList l0;
        int l1#1;
        java.lang.Object[] $r0, $r1;

        l0 := @this: java.util.ArrayList;

        l1#1 := @parameter0: int;

        $r0 = l0.<java.util.ArrayList: java.lang.Object[] elementData>;

        $r1 = <java.util.ArrayList: java.lang.Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA>;

        if $r0 != $r1 goto label1;

        l1#1 = staticinvoke <java.lang.Math: int max(int,int)>(10, l1#1);

     label1:
        specialinvoke l0.<java.util.ArrayList: void ensureExplicitCapacity(int)>(l1#1);

        return;
    }

    private void ensureExplicitCapacity(int)
    {
        java.util.ArrayList l0;
        int l1, $i0, $i1, $i2, $i3;
        java.lang.Object[] $r1;

        l0 := @this: java.util.ArrayList;

        l1 := @parameter0: int;

        $i0 = l0.<java.util.ArrayList: int modCount>;

        $i1 = $i0 + 1;

        l0.<java.util.ArrayList: int modCount> = $i1;

        $r1 = l0.<java.util.ArrayList: java.lang.Object[] elementData>;

        $i2 = lengthof $r1;

        $i3 = l1 - $i2;

        if $i3 <= 0 goto label1;

        specialinvoke l0.<java.util.ArrayList: void grow(int)>(l1);

     label1:
        return;
    }

    private void grow(int)
    {
        java.util.ArrayList l0;
        int l1, l2, $i0, l3#9, $i1, $i2;
        java.lang.Object[] $r0, $r1, $r2;

        l0 := @this: java.util.ArrayList;

        l1 := @parameter0: int;

        $r0 = l0.<java.util.ArrayList: java.lang.Object[] elementData>;

        l2 = lengthof $r0;

        $i0 = l2 >> 1;

        l3#9 = l2 + $i0;

        $i1 = l3#9 - l1;

        if $i1 >= 0 goto label1;

        l3#9 = l1;

     label1:
        $i2 = l3#9 - 2147483639;

        if $i2 <= 0 goto label2;

        l3#9 = staticinvoke <java.util.ArrayList: int hugeCapacity(int)>(l1);

     label2:
        $r1 = l0.<java.util.ArrayList: java.lang.Object[] elementData>;

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, l3#9);

        l0.<java.util.ArrayList: java.lang.Object[] elementData> = $r2;

        return;
    }

    private static int hugeCapacity(int)
    {
        int l0, $i0;
        java.lang.OutOfMemoryError $r0;

        l0 := @parameter0: int;

        if l0 >= 0 goto label1;

        $r0 = new java.lang.OutOfMemoryError;

        specialinvoke $r0.<java.lang.OutOfMemoryError: void <init>()>();

        throw $r0;

     label1:
        if l0 <= 2147483639 goto label2;

        $i0 = 2147483647;

        goto label3;

     label2:
        $i0 = 2147483639;

     label3:
        return $i0;
    }

    public void <init>()
    {
        java.util.ArrayList l0;
        java.lang.Object[] $r0;

        l0 := @this: java.util.ArrayList;

        specialinvoke l0.<java.util.AbstractList: void <init>()>();

        $r0 = <java.util.ArrayList: java.lang.Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA>;

        l0.<java.util.ArrayList: java.lang.Object[] elementData> = $r0;

        return;
    }

    public java.util.Iterator iterator()
    {
        java.util.ArrayList l0;
        java.util.ArrayList$Itr $r0;

        l0 := @this: java.util.ArrayList;

        $r0 = new java.util.ArrayList$Itr;

        specialinvoke $r0.<java.util.ArrayList$Itr: void <init>(java.util.ArrayList,java.util.ArrayList$1)>(l0, null);

        return $r0;
    }

    static int access$100(java.util.ArrayList)
    {
        java.util.ArrayList l0;
        int $i0;

        l0 := @parameter0: java.util.ArrayList;

        $i0 = l0.<java.util.ArrayList: int size>;

        return $i0;
    }

    public java.lang.Object get(int)
    {
        java.util.ArrayList l0;
        int l1;
        java.lang.Object $r0;

        l0 := @this: java.util.ArrayList;

        l1 := @parameter0: int;

        specialinvoke l0.<java.util.ArrayList: void rangeCheck(int)>(l1);

        $r0 = virtualinvoke l0.<java.util.ArrayList: java.lang.Object elementData(int)>(l1);

        return $r0;
    }

    private void rangeCheck(int)
    {
        java.util.ArrayList l0;
        int l1, $i0;
        java.lang.IndexOutOfBoundsException $r0;
        java.lang.String $r1;

        l0 := @this: java.util.ArrayList;

        l1 := @parameter0: int;

        $i0 = l0.<java.util.ArrayList: int size>;

        if l1 < $i0 goto label1;

        $r0 = new java.lang.IndexOutOfBoundsException;

        $r1 = specialinvoke l0.<java.util.ArrayList: java.lang.String outOfBoundsMsg(int)>(l1);

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r1);

        throw $r0;

     label1:
        return;
    }

    java.lang.Object elementData(int)
    {
        java.util.ArrayList l0;
        int l1;
        java.lang.Object[] $r0;
        java.lang.Object $r1;

        l0 := @this: java.util.ArrayList;

        l1 := @parameter0: int;

        $r0 = l0.<java.util.ArrayList: java.lang.Object[] elementData>;

        $r1 = $r0[l1];

        return $r1;
    }

    private java.lang.String outOfBoundsMsg(int)
    {
        java.util.ArrayList l0;
        int l1, $i0;
        java.lang.StringBuilder $r0, $r1, $r2, $r3, $r4;
        java.lang.String $r5;

        l0 := @this: java.util.ArrayList;

        l1 := @parameter0: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Index: ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", Size: ");

        $i0 = l0.<java.util.ArrayList: int size>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public void <init>(java.util.Collection)
    {
        java.util.ArrayList l0;
        java.util.Collection l1;
        java.lang.Object[] $r0, $r1, $r2, $r4, $r5, $r6;
        int $i0, $i1;
        java.lang.Class $r3;

        l0 := @this: java.util.ArrayList;

        l1 := @parameter0: java.util.Collection;

        specialinvoke l0.<java.util.AbstractList: void <init>()>();

        $r0 = interfaceinvoke l1.<java.util.Collection: java.lang.Object[] toArray()>();

        l0.<java.util.ArrayList: java.lang.Object[] elementData> = $r0;

        $r1 = l0.<java.util.ArrayList: java.lang.Object[] elementData>;

        $i0 = lengthof $r1;

        l0.<java.util.ArrayList: int size> = $i0;

        if $i0 == 0 goto label1;

        $r2 = l0.<java.util.ArrayList: java.lang.Object[] elementData>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == class "[Ljava/lang/Object;" goto label2;

        $r4 = l0.<java.util.ArrayList: java.lang.Object[] elementData>;

        $i1 = l0.<java.util.ArrayList: int size>;

        $r5 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>($r4, $i1, class "[Ljava/lang/Object;");

        l0.<java.util.ArrayList: java.lang.Object[] elementData> = $r5;

        goto label2;

     label1:
        $r6 = <java.util.ArrayList: java.lang.Object[] EMPTY_ELEMENTDATA>;

        l0.<java.util.ArrayList: java.lang.Object[] elementData> = $r6;

     label2:
        return;
    }

    public java.lang.Object[] toArray()
    {
        java.util.ArrayList l0;
        java.lang.Object[] $r0, $r1;
        int $i0;

        l0 := @this: java.util.ArrayList;

        $r0 = l0.<java.util.ArrayList: java.lang.Object[] elementData>;

        $i0 = l0.<java.util.ArrayList: int size>;

        $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r0, $i0);

        return $r1;
    }


