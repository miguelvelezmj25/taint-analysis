    public void buildRule(weka.core.Instances, weka.core.Instances) throws java.lang.Exception
    {
        weka.classifiers.rules.part.PruneableDecList this;
        weka.core.Instances train, test, $r0;

        this := @this: weka.classifiers.rules.part.PruneableDecList;

        train := @parameter0: weka.core.Instances;

        test := @parameter1: weka.core.Instances;

        virtualinvoke this.<weka.classifiers.rules.part.PruneableDecList: void buildDecList(weka.core.Instances,weka.core.Instances,boolean)>(train, test, 0);

        $r0 = new weka.core.Instances;

        specialinvoke $r0.<weka.core.Instances: void <init>(weka.core.Instances,int)>(train, 0);

        virtualinvoke this.<weka.classifiers.rules.part.PruneableDecList: void cleanup(weka.core.Instances)>($r0);

        return;
    }

    public void buildDecList(weka.core.Instances, weka.core.Instances, boolean) throws java.lang.Exception
    {
        weka.classifiers.rules.part.PruneableDecList this;
        boolean leaf, $z0, $z1, $z2, $z3, $z4;
        double sumOfWeights;
        weka.classifiers.trees.j48.NoSplit noSplit, $r0;
        weka.core.Instances[] localTrain, localTest;
        weka.core.Instances train#1, test#2, $r15, $r16, $r19, $r20;
        weka.classifiers.trees.j48.Distribution $r1, $r4;
        weka.classifiers.trees.j48.ModelSelection $r2;
        weka.classifiers.trees.j48.ClassifierSplitModel $r3, $r5, $r6, $r7, $r8, $r9;
        int $i0, $i1, i#57, ind#60, j#64, $i2, $i3, j#122, $i4, $i5, $i6, $i7;
        weka.classifiers.rules.part.ClassifierDecList[] $r10, $r11, $r12, $r14, $r18, $r22, $r23, $r25, $r26, $r28, $r30;
        weka.classifiers.rules.part.ClassifierDecList $r13, $r17, $r21, $r24, $r27, $r29;

        this := @this: weka.classifiers.rules.part.PruneableDecList;

        train#1 := @parameter0: weka.core.Instances;

        test#2 := @parameter1: weka.core.Instances;

        leaf := @parameter2: boolean;

        this.<weka.classifiers.rules.part.PruneableDecList: weka.core.Instances m_train> = null;

        this.<weka.classifiers.rules.part.PruneableDecList: boolean m_isLeaf> = 0;

        this.<weka.classifiers.rules.part.PruneableDecList: boolean m_isEmpty> = 0;

        this.<weka.classifiers.rules.part.PruneableDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons> = null;

        this.<weka.classifiers.rules.part.PruneableDecList: int indeX> = 0;

        sumOfWeights = virtualinvoke train#1.<weka.core.Instances: double sumOfWeights()>();

        $r0 = new weka.classifiers.trees.j48.NoSplit;

        $r1 = new weka.classifiers.trees.j48.Distribution;

        specialinvoke $r1.<weka.classifiers.trees.j48.Distribution: void <init>(weka.core.Instances)>(train#1);

        specialinvoke $r0.<weka.classifiers.trees.j48.NoSplit: void <init>(weka.classifiers.trees.j48.Distribution)>($r1);

        noSplit = $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(leaf);

        if leaf == 0 goto label01;

        this.<weka.classifiers.rules.part.PruneableDecList: weka.classifiers.trees.j48.ClassifierSplitModel m_localModel> = noSplit;

        goto label02;

     label01:
        $r2 = this.<weka.classifiers.rules.part.PruneableDecList: weka.classifiers.trees.j48.ModelSelection m_toSelectModel>;

        $r3 = virtualinvoke $r2.<weka.classifiers.trees.j48.ModelSelection: weka.classifiers.trees.j48.ClassifierSplitModel selectModel(weka.core.Instances,weka.core.Instances)>(train#1, test#2);

        this.<weka.classifiers.rules.part.PruneableDecList: weka.classifiers.trees.j48.ClassifierSplitModel m_localModel> = $r3;

     label02:
        $r4 = new weka.classifiers.trees.j48.Distribution;

        $r5 = this.<weka.classifiers.rules.part.PruneableDecList: weka.classifiers.trees.j48.ClassifierSplitModel m_localModel>;

        specialinvoke $r4.<weka.classifiers.trees.j48.Distribution: void <init>(weka.core.Instances,weka.classifiers.trees.j48.ClassifierSplitModel)>(test#2, $r5);

        this.<weka.classifiers.rules.part.PruneableDecList: weka.classifiers.trees.j48.Distribution m_test> = $r4;

        $r6 = this.<weka.classifiers.rules.part.PruneableDecList: weka.classifiers.trees.j48.ClassifierSplitModel m_localModel>;

        $i0 = virtualinvoke $r6.<weka.classifiers.trees.j48.ClassifierSplitModel: int numSubsets()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 1 goto label15;

        $r7 = this.<weka.classifiers.rules.part.PruneableDecList: weka.classifiers.trees.j48.ClassifierSplitModel m_localModel>;

        localTrain = virtualinvoke $r7.<weka.classifiers.trees.j48.ClassifierSplitModel: weka.core.Instances[] split(weka.core.Instances)>(train#1);

        $r8 = this.<weka.classifiers.rules.part.PruneableDecList: weka.classifiers.trees.j48.ClassifierSplitModel m_localModel>;

        localTest = virtualinvoke $r8.<weka.classifiers.trees.j48.ClassifierSplitModel: weka.core.Instances[] split(weka.core.Instances)>(test#2);

        $r9 = this.<weka.classifiers.rules.part.PruneableDecList: weka.classifiers.trees.j48.ClassifierSplitModel m_localModel>;

        $i1 = virtualinvoke $r9.<weka.classifiers.trees.j48.ClassifierSplitModel: int numSubsets()>();

        $r10 = newarray (weka.classifiers.rules.part.ClassifierDecList)[$i1];

        this.<weka.classifiers.rules.part.PruneableDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons> = $r10;

        i#57 = 0;

     label03:
        i#57 = i#57 + 1;

        ind#60 = virtualinvoke this.<weka.classifiers.rules.part.PruneableDecList: int chooseIndex()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(ind#60);

        if ind#60 != -1 goto label09;

        j#64 = 0;

     label04:
        $r11 = this.<weka.classifiers.rules.part.PruneableDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons>;

        $i2 = lengthof $r11;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#64);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if j#64 >= $i2 goto label06;

        $r12 = this.<weka.classifiers.rules.part.PruneableDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons>;

        $r13 = $r12[j#64];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r13);

        if $r13 != null goto label05;

        $r14 = this.<weka.classifiers.rules.part.PruneableDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons>;

        $r15 = localTrain[j#64];

        $r16 = localTest[j#64];

        $r17 = virtualinvoke this.<weka.classifiers.rules.part.PruneableDecList: weka.classifiers.rules.part.ClassifierDecList getNewDecList(weka.core.Instances,weka.core.Instances,boolean)>($r15, $r16, 1);

        $r14[j#64] = $r17;

     label05:
        j#64 = j#64 + 1;

        goto label04;

     label06:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#57);

        if i#57 >= 2 goto label08;

        this.<weka.classifiers.rules.part.PruneableDecList: weka.classifiers.trees.j48.ClassifierSplitModel m_localModel> = noSplit;

        this.<weka.classifiers.rules.part.PruneableDecList: boolean m_isLeaf> = 1;

        this.<weka.classifiers.rules.part.PruneableDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons> = null;

        $z0 = staticinvoke <weka.core.Utils: boolean eq(double,double)>(sumOfWeights, 0.0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label07;

        this.<weka.classifiers.rules.part.PruneableDecList: boolean m_isEmpty> = 1;

     label07:
        return;

     label08:
        goto label10;

     label09:
        $r18 = this.<weka.classifiers.rules.part.PruneableDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons>;

        $r19 = localTrain[ind#60];

        $r20 = localTest[ind#60];

        $r21 = virtualinvoke this.<weka.classifiers.rules.part.PruneableDecList: weka.classifiers.rules.part.ClassifierDecList getNewDecList(weka.core.Instances,weka.core.Instances,boolean)>($r19, $r20, 0);

        $r18[ind#60] = $r21;

        $r22 = this.<weka.classifiers.rules.part.PruneableDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons>;

        $i3 = lengthof $r22;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#57);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if i#57 >= $i3 goto label10;

        $r23 = this.<weka.classifiers.rules.part.PruneableDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons>;

        $r24 = $r23[ind#60];

        $z1 = $r24.<weka.classifiers.rules.part.ClassifierDecList: boolean m_isLeaf>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label03;

     label10:
        j#122 = 0;

     label11:
        $r25 = this.<weka.classifiers.rules.part.PruneableDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons>;

        $i4 = lengthof $r25;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#122);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if j#122 >= $i4 goto label13;

        $r26 = this.<weka.classifiers.rules.part.PruneableDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons>;

        $r27 = $r26[j#122];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r27);

        if $r27 == null goto label13;

        $r28 = this.<weka.classifiers.rules.part.PruneableDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons>;

        $r29 = $r28[j#122];

        $z2 = $r29.<weka.classifiers.rules.part.ClassifierDecList: boolean m_isLeaf>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label12;

        goto label13;

     label12:
        j#122 = j#122 + 1;

        goto label11;

     label13:
        $r30 = this.<weka.classifiers.rules.part.PruneableDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons>;

        $i5 = lengthof $r30;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#122);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if j#122 != $i5 goto label14;

        virtualinvoke this.<weka.classifiers.rules.part.PruneableDecList: void pruneEnd()>();

        $z3 = this.<weka.classifiers.rules.part.PruneableDecList: boolean m_isLeaf>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label16;

        $i6 = virtualinvoke this.<weka.classifiers.rules.part.PruneableDecList: int chooseLastIndex()>();

        this.<weka.classifiers.rules.part.PruneableDecList: int indeX> = $i6;

        goto label16;

     label14:
        $i7 = virtualinvoke this.<weka.classifiers.rules.part.PruneableDecList: int chooseLastIndex()>();

        this.<weka.classifiers.rules.part.PruneableDecList: int indeX> = $i7;

        goto label16;

     label15:
        this.<weka.classifiers.rules.part.PruneableDecList: boolean m_isLeaf> = 1;

        $z4 = staticinvoke <weka.core.Utils: boolean eq(double,double)>(sumOfWeights, 0.0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label16;

        this.<weka.classifiers.rules.part.PruneableDecList: boolean m_isEmpty> = 1;

     label16:
        return;
    }

    protected weka.classifiers.rules.part.ClassifierDecList getNewDecList(weka.core.Instances, weka.core.Instances, boolean) throws java.lang.Exception
    {
        weka.classifiers.rules.part.PruneableDecList this, newDecList, $r0;
        weka.core.Instances train, test;
        boolean leaf;
        weka.classifiers.trees.j48.ModelSelection $r1;
        int $i0;

        this := @this: weka.classifiers.rules.part.PruneableDecList;

        train := @parameter0: weka.core.Instances;

        test := @parameter1: weka.core.Instances;

        leaf := @parameter2: boolean;

        $r0 = new weka.classifiers.rules.part.PruneableDecList;

        $r1 = this.<weka.classifiers.rules.part.PruneableDecList: weka.classifiers.trees.j48.ModelSelection m_toSelectModel>;

        $i0 = this.<weka.classifiers.rules.part.PruneableDecList: int m_minNumObj>;

        specialinvoke $r0.<weka.classifiers.rules.part.PruneableDecList: void <init>(weka.classifiers.trees.j48.ModelSelection,int)>($r1, $i0);

        newDecList = $r0;

        virtualinvoke newDecList.<weka.classifiers.rules.part.PruneableDecList: void buildDecList(weka.core.Instances,weka.core.Instances,boolean)>(train, test, leaf);

        return newDecList;
    }

    protected void pruneEnd() throws java.lang.Exception
    {
        weka.classifiers.rules.part.PruneableDecList this;
        double errorsTree, errorsLeaf;
        boolean $z0;
        weka.classifiers.trees.j48.NoSplit $r0;
        weka.classifiers.trees.j48.ClassifierSplitModel $r1;
        weka.classifiers.trees.j48.Distribution $r2;

        this := @this: weka.classifiers.rules.part.PruneableDecList;

        errorsTree = specialinvoke this.<weka.classifiers.rules.part.PruneableDecList: double errorsForTree()>();

        errorsLeaf = specialinvoke this.<weka.classifiers.rules.part.PruneableDecList: double errorsForLeaf()>();

        $z0 = staticinvoke <weka.core.Utils: boolean smOrEq(double,double)>(errorsLeaf, errorsTree);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        this.<weka.classifiers.rules.part.PruneableDecList: boolean m_isLeaf> = 1;

        this.<weka.classifiers.rules.part.PruneableDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons> = null;

        $r0 = new weka.classifiers.trees.j48.NoSplit;

        $r1 = virtualinvoke this.<weka.classifiers.rules.part.PruneableDecList: weka.classifiers.trees.j48.ClassifierSplitModel localModel()>();

        $r2 = virtualinvoke $r1.<weka.classifiers.trees.j48.ClassifierSplitModel: weka.classifiers.trees.j48.Distribution distribution()>();

        specialinvoke $r0.<weka.classifiers.trees.j48.NoSplit: void <init>(weka.classifiers.trees.j48.Distribution)>($r2);

        this.<weka.classifiers.rules.part.PruneableDecList: weka.classifiers.trees.j48.ClassifierSplitModel m_localModel> = $r0;

     label1:
        return;
    }

    private double errorsForTree() throws java.lang.Exception
    {
        weka.classifiers.rules.part.PruneableDecList this, $r9;
        boolean $z0, $z1;
        double $d0, error#6, $d1, $d2, $d3, $d4, $d5;
        int i#8, $i0, $i1;
        weka.classifiers.rules.part.ClassifierDecList[] $r0;
        weka.classifiers.rules.part.ClassifierDecList $r1, $r8;
        weka.classifiers.trees.j48.ClassifierSplitModel $r2, $r6;
        weka.classifiers.trees.j48.Distribution $r3, $r4, $r5, $r7;

        this := @this: weka.classifiers.rules.part.PruneableDecList;

        $z0 = this.<weka.classifiers.rules.part.PruneableDecList: boolean m_isLeaf>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $d0 = specialinvoke this.<weka.classifiers.rules.part.PruneableDecList: double errorsForLeaf()>();

        return $d0;

     label1:
        error#6 = 0.0;

        i#8 = 0;

     label2:
        $r0 = this.<weka.classifiers.rules.part.PruneableDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons>;

        $i0 = lengthof $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#8 >= $i0 goto label5;

        $r1 = virtualinvoke this.<weka.classifiers.rules.part.PruneableDecList: weka.classifiers.rules.part.ClassifierDecList son(int)>(i#8);

        $r2 = virtualinvoke $r1.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.trees.j48.ClassifierSplitModel localModel()>();

        $r3 = virtualinvoke $r2.<weka.classifiers.trees.j48.ClassifierSplitModel: weka.classifiers.trees.j48.Distribution distribution()>();

        $d1 = virtualinvoke $r3.<weka.classifiers.trees.j48.Distribution: double total()>();

        $z1 = staticinvoke <weka.core.Utils: boolean eq(double,double)>($d1, 0.0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label3;

        $r4 = this.<weka.classifiers.rules.part.PruneableDecList: weka.classifiers.trees.j48.Distribution m_test>;

        $d2 = virtualinvoke $r4.<weka.classifiers.trees.j48.Distribution: double perBag(int)>(i#8);

        $r5 = this.<weka.classifiers.rules.part.PruneableDecList: weka.classifiers.trees.j48.Distribution m_test>;

        $r6 = virtualinvoke this.<weka.classifiers.rules.part.PruneableDecList: weka.classifiers.trees.j48.ClassifierSplitModel localModel()>();

        $r7 = virtualinvoke $r6.<weka.classifiers.trees.j48.ClassifierSplitModel: weka.classifiers.trees.j48.Distribution distribution()>();

        $i1 = virtualinvoke $r7.<weka.classifiers.trees.j48.Distribution: int maxClass()>();

        $d3 = virtualinvoke $r5.<weka.classifiers.trees.j48.Distribution: double perClassPerBag(int,int)>(i#8, $i1);

        $d4 = $d2 - $d3;

        error#6 = error#6 + $d4;

        goto label4;

     label3:
        $r8 = virtualinvoke this.<weka.classifiers.rules.part.PruneableDecList: weka.classifiers.rules.part.ClassifierDecList son(int)>(i#8);

        $r9 = (weka.classifiers.rules.part.PruneableDecList) $r8;

        $d5 = specialinvoke $r9.<weka.classifiers.rules.part.PruneableDecList: double errorsForTree()>();

        error#6 = error#6 + $d5;

     label4:
        i#8 = i#8 + 1;

        goto label2;

     label5:
        return error#6;
    }

    private double errorsForLeaf() throws java.lang.Exception
    {
        weka.classifiers.rules.part.PruneableDecList this;
        weka.classifiers.trees.j48.Distribution $r0, $r1, $r3;
        double $d0, $d1, $d2;
        weka.classifiers.trees.j48.ClassifierSplitModel $r2;
        int $i0;

        this := @this: weka.classifiers.rules.part.PruneableDecList;

        $r0 = this.<weka.classifiers.rules.part.PruneableDecList: weka.classifiers.trees.j48.Distribution m_test>;

        $d0 = virtualinvoke $r0.<weka.classifiers.trees.j48.Distribution: double total()>();

        $r1 = this.<weka.classifiers.rules.part.PruneableDecList: weka.classifiers.trees.j48.Distribution m_test>;

        $r2 = virtualinvoke this.<weka.classifiers.rules.part.PruneableDecList: weka.classifiers.trees.j48.ClassifierSplitModel localModel()>();

        $r3 = virtualinvoke $r2.<weka.classifiers.trees.j48.ClassifierSplitModel: weka.classifiers.trees.j48.Distribution distribution()>();

        $i0 = virtualinvoke $r3.<weka.classifiers.trees.j48.Distribution: int maxClass()>();

        $d1 = virtualinvoke $r1.<weka.classifiers.trees.j48.Distribution: double perClass(int)>($i0);

        $d2 = $d0 - $d1;

        return $d2;
    }

    public void <init>(weka.classifiers.trees.j48.ModelSelection, int)
    {
        weka.classifiers.rules.part.PruneableDecList this;
        weka.classifiers.trees.j48.ModelSelection toSelectLocModel;
        int minNum;

        this := @this: weka.classifiers.rules.part.PruneableDecList;

        toSelectLocModel := @parameter0: weka.classifiers.trees.j48.ModelSelection;

        minNum := @parameter1: int;

        specialinvoke this.<weka.classifiers.rules.part.ClassifierDecList: void <init>(weka.classifiers.trees.j48.ModelSelection,int)>(toSelectLocModel, minNum);

        return;
    }


