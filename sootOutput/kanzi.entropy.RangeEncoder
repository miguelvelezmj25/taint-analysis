    public void dispose()
    {
        kanzi.entropy.RangeEncoder this;

        this := @this: kanzi.entropy.RangeEncoder;

        return;
    }

    public int encode(byte[], int, int)
    {
        kanzi.entropy.RangeEncoder this;
        byte[] block;
        int blkptr, len, end, sz, endChunk, $i0, $i1, $i2, $i3, startChunk#20, $i4, $i5, lr#36, $i6, $i7, $i8, i#54;
        byte $b9;
        kanzi.OutputBitStream $r0;
        long $l10;

        this := @this: kanzi.entropy.RangeEncoder;

        block := @parameter0: byte[];

        blkptr := @parameter1: int;

        len := @parameter2: int;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(block);

        if block == null goto label01;

        $i0 = blkptr + len;

        $i1 = lengthof block;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i0 > $i1 goto label01;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(blkptr);

        if blkptr < 0 goto label01;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len);

        if len >= 0 goto label02;

     label01:
        return -1;

     label02:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len);

        if len != 0 goto label03;

        return 0;

     label03:
        end = blkptr + len;

        $i2 = this.<kanzi.entropy.RangeEncoder: int chunkSize>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 != 0 goto label04;

        $i3 = len;

        goto label05;

     label04:
        $i3 = this.<kanzi.entropy.RangeEncoder: int chunkSize>;

     label05:
        sz = $i3;

        startChunk#20 = blkptr;

     label06:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(startChunk#20);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(end);

        if startChunk#20 >= end goto label14;

        $i4 = startChunk#20 + sz;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(end);

        if $i4 >= end goto label07;

        $i5 = startChunk#20 + sz;

        goto label08;

     label07:
        $i5 = end;

     label08:
        endChunk = $i5;

        this.<kanzi.entropy.RangeEncoder: long range> = 1152921504606846975L;

        this.<kanzi.entropy.RangeEncoder: long low> = 0L;

        lr#36 = this.<kanzi.entropy.RangeEncoder: int logRange>;

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lr#36);

        if lr#36 <= 8 goto label10;

        $i6 = 1 << lr#36;

        $i7 = endChunk - startChunk#20;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if $i6 <= $i7 goto label10;

        lr#36 = lr#36 + -1;

        goto label09;

     label10:
        $i8 = specialinvoke this.<kanzi.entropy.RangeEncoder: int rebuildStatistics(byte[],int,int,int)>(block, startChunk#20, endChunk, lr#36);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if $i8 >= 0 goto label11;

        return startChunk#20;

     label11:
        this.<kanzi.entropy.RangeEncoder: int shift> = lr#36;

        i#54 = startChunk#20;

     label12:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#54);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(endChunk);

        if i#54 >= endChunk goto label13;

        $b9 = block[i#54];

        virtualinvoke this.<kanzi.entropy.RangeEncoder: void encodeByte(byte)>($b9);

        i#54 = i#54 + 1;

        goto label12;

     label13:
        $r0 = this.<kanzi.entropy.RangeEncoder: kanzi.OutputBitStream bitstream>;

        $l10 = this.<kanzi.entropy.RangeEncoder: long low>;

        interfaceinvoke $r0.<kanzi.OutputBitStream: int writeBits(long,int)>($l10, 60);

        startChunk#20 = endChunk;

        goto label06;

     label14:
        return len;
    }

    private int rebuildStatistics(byte[], int, int, int)
    {
        kanzi.entropy.RangeEncoder this;
        byte[] block;
        int start, end, lr, i#2, i#10, $i2, $i3, $i4, $i5;
        int[] $r0, $r1, $r2;
        byte $b0;
        short $s1;

        this := @this: kanzi.entropy.RangeEncoder;

        block := @parameter0: byte[];

        start := @parameter1: int;

        end := @parameter2: int;

        lr := @parameter3: int;

        i#2 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#2);

        if i#2 >= 256 goto label2;

        $r0 = this.<kanzi.entropy.RangeEncoder: int[] freqs>;

        $r0[i#2] = 0;

        i#2 = i#2 + 1;

        goto label1;

     label2:
        i#10 = start;

     label3:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#10);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(end);

        if i#10 >= end goto label4;

        $r1 = this.<kanzi.entropy.RangeEncoder: int[] freqs>;

        $b0 = block[i#10];

        $s1 = $b0 & 255;

        $i2 = $r1[$s1];

        $i3 = $i2 + 1;

        $r1[$s1] = $i3;

        i#10 = i#10 + 1;

        goto label3;

     label4:
        $r2 = this.<kanzi.entropy.RangeEncoder: int[] freqs>;

        $i4 = end - start;

        $i5 = virtualinvoke this.<kanzi.entropy.RangeEncoder: int updateFrequencies(int[],int,int)>($r2, $i4, lr);

        return $i5;
    }

    protected void encodeByte(byte)
    {
        kanzi.entropy.RangeEncoder this;
        byte b, $b17, $b19;
        short symbol;
        long cumFreq, freq, $l1, $l2, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16, $l18, $l20, $l21, $l22, $l23, $l24, $l26, $l27, $l28, $l29;
        long[] $r0, $r1;
        int $i0, $i3;
        kanzi.OutputBitStream $r5;

        this := @this: kanzi.entropy.RangeEncoder;

        b := @parameter0: byte;

        symbol = b & 255;

        $r0 = this.<kanzi.entropy.RangeEncoder: long[] cumFreqs>;

        cumFreq = $r0[symbol];

        $r1 = this.<kanzi.entropy.RangeEncoder: long[] cumFreqs>;

        $i0 = symbol + 1;

        $l1 = $r1[$i0];

        freq = $l1 - cumFreq;

        $l2 = this.<kanzi.entropy.RangeEncoder: long range>;

        $i3 = this.<kanzi.entropy.RangeEncoder: int shift>;

        $l4 = $l2 >>> $i3;

        this.<kanzi.entropy.RangeEncoder: long range> = $l4;

        $l5 = this.<kanzi.entropy.RangeEncoder: long low>;

        $l6 = this.<kanzi.entropy.RangeEncoder: long range>;

        $l7 = cumFreq * $l6;

        $l8 = $l5 + $l7;

        this.<kanzi.entropy.RangeEncoder: long low> = $l8;

        $l9 = this.<kanzi.entropy.RangeEncoder: long range>;

        $l10 = $l9 * freq;

        this.<kanzi.entropy.RangeEncoder: long range> = $l10;

     label1:
        $l11 = this.<kanzi.entropy.RangeEncoder: long low>;

        $l12 = this.<kanzi.entropy.RangeEncoder: long low>;

        $l13 = this.<kanzi.entropy.RangeEncoder: long range>;

        $l14 = $l12 + $l13;

        $l15 = $l11 ^ $l14;

        $l16 = $l15 & 1152921500311879680L;

        $b17 = $l16 cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b17);

        if $b17 == 0 goto label3;

        $l18 = this.<kanzi.entropy.RangeEncoder: long range>;

        $b19 = $l18 cmp 65535L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b19);

        if $b19 <= 0 goto label2;

        goto label4;

     label2:
        $l20 = this.<kanzi.entropy.RangeEncoder: long low>;

        $l21 = neg $l20;

        $l22 = $l21 & 65535L;

        this.<kanzi.entropy.RangeEncoder: long range> = $l22;

     label3:
        $r5 = this.<kanzi.entropy.RangeEncoder: kanzi.OutputBitStream bitstream>;

        $l23 = this.<kanzi.entropy.RangeEncoder: long low>;

        $l24 = $l23 >>> 32;

        interfaceinvoke $r5.<kanzi.OutputBitStream: int writeBits(long,int)>($l24, 28);

        $l26 = this.<kanzi.entropy.RangeEncoder: long range>;

        $l27 = $l26 << 28;

        this.<kanzi.entropy.RangeEncoder: long range> = $l27;

        $l28 = this.<kanzi.entropy.RangeEncoder: long low>;

        $l29 = $l28 << 28;

        this.<kanzi.entropy.RangeEncoder: long low> = $l29;

        goto label1;

     label4:
        return;
    }

    public void <init>(kanzi.OutputBitStream)
    {
        kanzi.entropy.RangeEncoder this;
        kanzi.OutputBitStream bitstream;

        this := @this: kanzi.entropy.RangeEncoder;

        bitstream := @parameter0: kanzi.OutputBitStream;

        specialinvoke this.<kanzi.entropy.RangeEncoder: void <init>(kanzi.OutputBitStream,int,int)>(bitstream, 65536, 13);

        return;
    }

    protected int updateFrequencies(int[], int, int)
    {
        kanzi.entropy.RangeEncoder this;
        int[] frequencies, $r1, $r5;
        int size, lr, alphabetSize, $i0, $i1, i#22, $i2, $i4;
        kanzi.entropy.EntropyUtils $r0;
        long[] $r2, $r3, $r4;
        long $l3, $l5, $l6;

        this := @this: kanzi.entropy.RangeEncoder;

        frequencies := @parameter0: int[];

        size := @parameter1: int;

        lr := @parameter2: int;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(frequencies);

        if frequencies == null goto label1;

        $i0 = lengthof frequencies;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 == 256 goto label2;

     label1:
        return -1;

     label2:
        $r0 = this.<kanzi.entropy.RangeEncoder: kanzi.entropy.EntropyUtils eu>;

        $r1 = this.<kanzi.entropy.RangeEncoder: int[] alphabet>;

        $i1 = 1 << lr;

        alphabetSize = virtualinvoke $r0.<kanzi.entropy.EntropyUtils: int normalizeFrequencies(int[],int[],int,int)>(frequencies, $r1, size, $i1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(alphabetSize);

        if alphabetSize <= 0 goto label4;

        $r2 = this.<kanzi.entropy.RangeEncoder: long[] cumFreqs>;

        $r2[0] = 0L;

        i#22 = 0;

     label3:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#22);

        if i#22 >= 256 goto label4;

        $r3 = this.<kanzi.entropy.RangeEncoder: long[] cumFreqs>;

        $i2 = i#22 + 1;

        $r4 = this.<kanzi.entropy.RangeEncoder: long[] cumFreqs>;

        $l3 = $r4[i#22];

        $i4 = frequencies[i#22];

        $l5 = (long) $i4;

        $l6 = $l3 + $l5;

        $r3[$i2] = $l6;

        i#22 = i#22 + 1;

        goto label3;

     label4:
        $r5 = this.<kanzi.entropy.RangeEncoder: int[] alphabet>;

        virtualinvoke this.<kanzi.entropy.RangeEncoder: boolean encodeHeader(int,int[],int[],int)>(alphabetSize, $r5, frequencies, lr);

        return alphabetSize;
    }

    public void <init>(kanzi.OutputBitStream, int, int)
    {
        kanzi.entropy.RangeEncoder this;
        kanzi.OutputBitStream bs;
        int chunkSize, logRange;
        java.lang.NullPointerException $r0;
        java.lang.IllegalArgumentException $r1, $r2, $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        java.lang.String $r8;
        int[] $r9, $r10;
        long[] $r11;
        kanzi.entropy.EntropyUtils $r12;

        this := @this: kanzi.entropy.RangeEncoder;

        bs := @parameter0: kanzi.OutputBitStream;

        chunkSize := @parameter1: int;

        logRange := @parameter2: int;

        specialinvoke this.<java.lang.Object: void <init>()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(bs);

        if bs != null goto label1;

        $r0 = new java.lang.NullPointerException;

        specialinvoke $r0.<java.lang.NullPointerException: void <init>(java.lang.String)>("Invalid null bitstream parameter");

        throw $r0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(chunkSize);

        if chunkSize == 0 goto label2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(chunkSize);

        if chunkSize >= 1024 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The chunk size must be at least 1024");

        throw $r1;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(chunkSize);

        if chunkSize <= 1073741824 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The chunk size must be at most 2^30");

        throw $r2;

     label3:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(logRange);

        if logRange < 8 goto label4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(logRange);

        if logRange <= 16 goto label5;

     label4:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid range parameter: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(logRange);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (must be in [8..16])");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label5:
        this.<kanzi.entropy.RangeEncoder: kanzi.OutputBitStream bitstream> = bs;

        $r9 = newarray (int)[256];

        this.<kanzi.entropy.RangeEncoder: int[] alphabet> = $r9;

        $r10 = newarray (int)[256];

        this.<kanzi.entropy.RangeEncoder: int[] freqs> = $r10;

        $r11 = newarray (long)[257];

        this.<kanzi.entropy.RangeEncoder: long[] cumFreqs> = $r11;

        this.<kanzi.entropy.RangeEncoder: int logRange> = logRange;

        this.<kanzi.entropy.RangeEncoder: int chunkSize> = chunkSize;

        $r12 = new kanzi.entropy.EntropyUtils;

        specialinvoke $r12.<kanzi.entropy.EntropyUtils: void <init>()>();

        this.<kanzi.entropy.RangeEncoder: kanzi.entropy.EntropyUtils eu> = $r12;

        return;
    }

    protected boolean encodeHeader(int, int[], int[], int)
    {
        kanzi.entropy.RangeEncoder this;
        int alphabetSize, lr, endj, $i1, llr#20, $i5, i#26, max#30, logMax#32, $i6, $i7, j#41, $i8, $i9, $i10, $i11, $i12, j#68, $i15, $i16;
        int[] alphabet, frequencies;
        byte inc, $b4;
        kanzi.OutputBitStream $r0, $r1, $r2, $r3;
        long $l2, $l13, $l17;

        this := @this: kanzi.entropy.RangeEncoder;

        alphabetSize := @parameter0: int;

        alphabet := @parameter1: int[];

        frequencies := @parameter2: int[];

        lr := @parameter3: int;

        $r0 = this.<kanzi.entropy.RangeEncoder: kanzi.OutputBitStream bitstream>;

        staticinvoke <kanzi.entropy.EntropyUtils: int encodeAlphabet(kanzi.OutputBitStream,int[],int)>($r0, alphabet, alphabetSize);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(alphabetSize);

        if alphabetSize != 0 goto label01;

        return 1;

     label01:
        $r1 = this.<kanzi.entropy.RangeEncoder: kanzi.OutputBitStream bitstream>;

        $i1 = lr - 8;

        $l2 = (long) $i1;

        interfaceinvoke $r1.<kanzi.OutputBitStream: int writeBits(long,int)>($l2, 3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(alphabetSize);

        if alphabetSize <= 64 goto label02;

        $b4 = 16;

        goto label03;

     label02:
        $b4 = 8;

     label03:
        inc = $b4;

        llr#20 = 3;

     label04:
        $i5 = 1 << llr#20;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lr);

        if $i5 > lr goto label05;

        llr#20 = llr#20 + 1;

        goto label04;

     label05:
        i#26 = 1;

     label06:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#26);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(alphabetSize);

        if i#26 >= alphabetSize goto label15;

        max#30 = 0;

        logMax#32 = 1;

        $i6 = i#26 + inc;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(alphabetSize);

        if $i6 >= alphabetSize goto label07;

        $i7 = i#26 + inc;

        goto label08;

     label07:
        $i7 = alphabetSize;

     label08:
        endj = $i7;

        j#41 = i#26;

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#41);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(endj);

        if j#41 >= endj goto label11;

        $i8 = alphabet[j#41];

        $i9 = frequencies[$i8];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(max#30);

        if $i9 <= max#30 goto label10;

        $i10 = alphabet[j#41];

        max#30 = frequencies[$i10];

     label10:
        j#41 = j#41 + 1;

        goto label09;

     label11:
        $i11 = 1 << logMax#32;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i11);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(max#30);

        if $i11 > max#30 goto label12;

        logMax#32 = logMax#32 + 1;

        goto label11;

     label12:
        $r2 = this.<kanzi.entropy.RangeEncoder: kanzi.OutputBitStream bitstream>;

        $i12 = logMax#32 - 1;

        $l13 = (long) $i12;

        interfaceinvoke $r2.<kanzi.OutputBitStream: int writeBits(long,int)>($l13, llr#20);

        j#68 = i#26;

     label13:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#68);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(endj);

        if j#68 >= endj goto label14;

        $r3 = this.<kanzi.entropy.RangeEncoder: kanzi.OutputBitStream bitstream>;

        $i15 = alphabet[j#68];

        $i16 = frequencies[$i15];

        $l17 = (long) $i16;

        interfaceinvoke $r3.<kanzi.OutputBitStream: int writeBits(long,int)>($l17, logMax#32);

        j#68 = j#68 + 1;

        goto label13;

     label14:
        i#26 = i#26 + inc;

        goto label06;

     label15:
        return 1;
    }


