    public void <init>(java.util.Comparator, java.util.Comparator)
    {
        com.sleepycat.je.dbi.DupKeyData$TwoPartKeyComparator this;
        java.util.Comparator btreeComparator, dupComparator;

        this := @this: com.sleepycat.je.dbi.DupKeyData$TwoPartKeyComparator;

        btreeComparator := @parameter0: java.util.Comparator;

        dupComparator := @parameter1: java.util.Comparator;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<com.sleepycat.je.dbi.DupKeyData$TwoPartKeyComparator: java.util.Comparator btreeComparator> = btreeComparator;

        this.<com.sleepycat.je.dbi.DupKeyData$TwoPartKeyComparator: java.util.Comparator duplicateComparator> = dupComparator;

        return;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        com.sleepycat.je.dbi.DupKeyData$TwoPartKeyComparator this;
        java.lang.Object l1, l2;
        byte[] $r0, $r1;
        int $i0;

        this := @this: com.sleepycat.je.dbi.DupKeyData$TwoPartKeyComparator;

        l1 := @parameter0: java.lang.Object;

        l2 := @parameter1: java.lang.Object;

        $r0 = (byte[]) l1;

        $r1 = (byte[]) l2;

        $i0 = virtualinvoke this.<com.sleepycat.je.dbi.DupKeyData$TwoPartKeyComparator: int compare(byte[],byte[])>($r0, $r1);

        return $i0;
    }

    public int compare(byte[], byte[])
    {
        com.sleepycat.je.dbi.DupKeyData$TwoPartKeyComparator this;
        byte[] twoPartKey1, twoPartKey2, key1, key2, data1, data2;
        int origKeySize1, keySize1, origKeySize2, keySize2, keySizeLen1, keySizeLen2, dataSize1, dataSize2, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, keyCmp#34, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, dataCmp#99;
        java.util.Comparator $r0, $r1, $r2, $r3;
        byte $b8;

        this := @this: com.sleepycat.je.dbi.DupKeyData$TwoPartKeyComparator;

        twoPartKey1 := @parameter0: byte[];

        twoPartKey2 := @parameter1: byte[];

        $i0 = lengthof twoPartKey1;

        $i1 = $i0 - 1;

        origKeySize1 = staticinvoke <com.sleepycat.util.PackedInteger: int readReverseInt(byte[],int)>(twoPartKey1, $i1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize1);

        if origKeySize1 != -1 goto label01;

        $i2 = lengthof twoPartKey1;

        $i3 = $i2 - 1;

        goto label02;

     label01:
        $i3 = origKeySize1;

     label02:
        keySize1 = $i3;

        $i4 = lengthof twoPartKey2;

        $i5 = $i4 - 1;

        origKeySize2 = staticinvoke <com.sleepycat.util.PackedInteger: int readReverseInt(byte[],int)>(twoPartKey2, $i5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize2);

        if origKeySize2 != -1 goto label03;

        $i6 = lengthof twoPartKey2;

        $i7 = $i6 - 1;

        goto label04;

     label03:
        $i7 = origKeySize2;

     label04:
        keySize2 = $i7;

        $r0 = this.<com.sleepycat.je.dbi.DupKeyData$TwoPartKeyComparator: java.util.Comparator btreeComparator>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label05;

        keyCmp#34 = staticinvoke <com.sleepycat.je.tree.Key: int compareUnsignedBytes(byte[],int,int,byte[],int,int)>(twoPartKey1, 0, keySize1, twoPartKey2, 0, keySize2);

        goto label06;

     label05:
        key1 = newarray (byte)[keySize1];

        key2 = newarray (byte)[keySize2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(twoPartKey1, 0, key1, 0, keySize1);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(twoPartKey2, 0, key2, 0, keySize2);

        $r1 = this.<com.sleepycat.je.dbi.DupKeyData$TwoPartKeyComparator: java.util.Comparator btreeComparator>;

        keyCmp#34 = interfaceinvoke $r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(key1, key2);

     label06:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(keyCmp#34);

        if keyCmp#34 == 0 goto label07;

        return keyCmp#34;

     label07:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize1);

        if origKeySize1 == -1 goto label08;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize2);

        if origKeySize2 != -1 goto label12;

     label08:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize2);

        if origKeySize1 != origKeySize2 goto label09;

        return 0;

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origKeySize1);

        if origKeySize1 != -1 goto label10;

        $b8 = -1;

        goto label11;

     label10:
        $b8 = 1;

     label11:
        return $b8;

     label12:
        $i9 = lengthof twoPartKey1;

        $i10 = $i9 - 1;

        keySizeLen1 = staticinvoke <com.sleepycat.util.PackedInteger: int getReadIntLength(byte[],int)>(twoPartKey1, $i10);

        $i11 = lengthof twoPartKey2;

        $i12 = $i11 - 1;

        keySizeLen2 = staticinvoke <com.sleepycat.util.PackedInteger: int getReadIntLength(byte[],int)>(twoPartKey2, $i12);

        $i13 = lengthof twoPartKey1;

        $i14 = $i13 - keySize1;

        dataSize1 = $i14 - keySizeLen1;

        $i15 = lengthof twoPartKey2;

        $i16 = $i15 - keySize2;

        dataSize2 = $i16 - keySizeLen2;

        $r2 = this.<com.sleepycat.je.dbi.DupKeyData$TwoPartKeyComparator: java.util.Comparator duplicateComparator>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        if $r2 != null goto label13;

        dataCmp#99 = staticinvoke <com.sleepycat.je.tree.Key: int compareUnsignedBytes(byte[],int,int,byte[],int,int)>(twoPartKey1, keySize1, dataSize1, twoPartKey2, keySize2, dataSize2);

        goto label14;

     label13:
        data1 = newarray (byte)[dataSize1];

        data2 = newarray (byte)[dataSize2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(twoPartKey1, keySize1, data1, 0, dataSize1);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(twoPartKey2, keySize2, data2, 0, dataSize2);

        $r3 = this.<com.sleepycat.je.dbi.DupKeyData$TwoPartKeyComparator: java.util.Comparator duplicateComparator>;

        dataCmp#99 = interfaceinvoke $r3.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(data1, data2);

     label14:
        return dataCmp#99;
    }


