    public final boolean hasNext()
    {
        java.util.HashMap$HashIterator l0;
        java.util.HashMap$Node $r0;
        boolean $z0;

        l0 := @this: java.util.HashMap$HashIterator;

        $r0 = l0.<java.util.HashMap$HashIterator: java.util.HashMap$Node next>;

        if $r0 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    final java.util.HashMap$Node nextNode()
    {
        java.util.HashMap$HashIterator l0;
        java.util.HashMap$Node l2, $r4, $r8;
        java.util.HashMap$Node[] l1, $r6;
        java.util.HashMap $r0, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.util.ConcurrentModificationException $r1;
        java.util.NoSuchElementException $r2;

        l0 := @this: java.util.HashMap$HashIterator;

        l2 = l0.<java.util.HashMap$HashIterator: java.util.HashMap$Node next>;

        $r0 = l0.<java.util.HashMap$HashIterator: java.util.HashMap this$0>;

        $i0 = $r0.<java.util.HashMap: int modCount>;

        $i1 = l0.<java.util.HashMap$HashIterator: int expectedModCount>;

        if $i0 == $i1 goto label1;

        $r1 = new java.util.ConcurrentModificationException;

        specialinvoke $r1.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r1;

     label1:
        if l2 != null goto label2;

        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();

        throw $r2;

     label2:
        l0.<java.util.HashMap$HashIterator: java.util.HashMap$Node current> = l2;

        $r4 = l2.<java.util.HashMap$Node: java.util.HashMap$Node next>;

        l0.<java.util.HashMap$HashIterator: java.util.HashMap$Node next> = $r4;

        if $r4 != null goto label4;

        $r5 = l0.<java.util.HashMap$HashIterator: java.util.HashMap this$0>;

        $r6 = $r5.<java.util.HashMap: java.util.HashMap$Node[] table>;

        l1 = $r6;

        if $r6 == null goto label4;

     label3:
        $i2 = l0.<java.util.HashMap$HashIterator: int index>;

        $i3 = lengthof l1;

        if $i2 >= $i3 goto label4;

        $i4 = l0.<java.util.HashMap$HashIterator: int index>;

        $i5 = $i4 + 1;

        l0.<java.util.HashMap$HashIterator: int index> = $i5;

        $r8 = l1[$i4];

        l0.<java.util.HashMap$HashIterator: java.util.HashMap$Node next> = $r8;

        if $r8 == null goto label3;

     label4:
        return l2;
    }

    void <init>(java.util.HashMap)
    {
        java.util.HashMap$HashIterator l0;
        java.util.HashMap l1;
        java.util.HashMap$Node[] l2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.util.HashMap$Node $r1;

        l0 := @this: java.util.HashMap$HashIterator;

        l1 := @parameter0: java.util.HashMap;

        l0.<java.util.HashMap$HashIterator: java.util.HashMap this$0> = l1;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        $i0 = l1.<java.util.HashMap: int modCount>;

        l0.<java.util.HashMap$HashIterator: int expectedModCount> = $i0;

        l2 = l1.<java.util.HashMap: java.util.HashMap$Node[] table>;

        l0.<java.util.HashMap$HashIterator: java.util.HashMap$Node next> = null;

        l0.<java.util.HashMap$HashIterator: java.util.HashMap$Node current> = null;

        l0.<java.util.HashMap$HashIterator: int index> = 0;

        if l2 == null goto label2;

        $i1 = l1.<java.util.HashMap: int size>;

        if $i1 <= 0 goto label2;

     label1:
        $i2 = l0.<java.util.HashMap$HashIterator: int index>;

        $i3 = lengthof l2;

        if $i2 >= $i3 goto label2;

        $i4 = l0.<java.util.HashMap$HashIterator: int index>;

        $i5 = $i4 + 1;

        l0.<java.util.HashMap$HashIterator: int index> = $i5;

        $r1 = l2[$i4];

        l0.<java.util.HashMap$HashIterator: java.util.HashMap$Node next> = $r1;

        if $r1 == null goto label1;

     label2:
        return;
    }


