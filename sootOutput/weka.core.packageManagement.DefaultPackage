    public void <init>(java.io.File, weka.core.packageManagement.PackageManager, java.util.Map)
    {
        weka.core.packageManagement.DefaultPackage this;
        java.io.File packageHome;
        weka.core.packageManagement.PackageManager manager;
        java.util.Map packageMetaData;

        this := @this: weka.core.packageManagement.DefaultPackage;

        packageHome := @parameter0: java.io.File;

        manager := @parameter1: weka.core.packageManagement.PackageManager;

        packageMetaData := @parameter2: java.util.Map;

        specialinvoke this.<weka.core.packageManagement.DefaultPackage: void <init>(java.io.File,weka.core.packageManagement.PackageManager)>(packageHome, manager);

        virtualinvoke this.<weka.core.packageManagement.DefaultPackage: void setPackageMetaData(java.util.Map)>(packageMetaData);

        return;
    }

    public void <init>(java.io.File, weka.core.packageManagement.PackageManager)
    {
        weka.core.packageManagement.DefaultPackage this;
        java.io.File packageHome;
        weka.core.packageManagement.PackageManager manager;

        this := @this: weka.core.packageManagement.DefaultPackage;

        packageHome := @parameter0: java.io.File;

        manager := @parameter1: weka.core.packageManagement.PackageManager;

        specialinvoke this.<weka.core.packageManagement.Package: void <init>()>();

        this.<weka.core.packageManagement.DefaultPackage: java.io.File m_packageHome> = packageHome;

        this.<weka.core.packageManagement.DefaultPackage: weka.core.packageManagement.PackageManager m_packageManager> = manager;

        return;
    }

    public java.util.List getDependencies() throws java.lang.Exception
    {
        weka.core.packageManagement.DefaultPackage this;
        java.util.ArrayList dependencies, $r0;
        java.lang.String dependenciesS, nextT, $r3, $r4, $r6, $r8, $r9, $r11, $r13, $r16, $r17, $r18, $r19;
        java.util.StringTokenizer tok, $r2;
        java.lang.String[] split;
        weka.core.packageManagement.Dependency dep, dep, $r14, $r20;
        weka.core.packageManagement.VersionPackageConstraint$VersionComparison comp1, comp2, $r12;
        java.lang.Object $r1;
        boolean $z0, $z1;
        weka.core.packageManagement.PackageManager $r5, $r7;
        weka.core.packageManagement.Package toAdd#37;
        int $i0;
        weka.core.packageManagement.VersionPackageConstraint $r10, versionConstraint#44;
        weka.core.packageManagement.VersionRangePackageConstraint $r15, versionConstraint#64;

        this := @this: weka.core.packageManagement.DefaultPackage;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        dependencies = $r0;

        $r1 = virtualinvoke this.<weka.core.packageManagement.DefaultPackage: java.lang.Object getPackageMetaDataElement(java.lang.Object)>("Depends");

        dependenciesS = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dependenciesS);

        if dependenciesS == null goto label6;

        $r2 = new java.util.StringTokenizer;

        specialinvoke $r2.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(dependenciesS, ",");

        tok = $r2;

     label1:
        $z0 = virtualinvoke tok.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label6;

        $r3 = virtualinvoke tok.<java.util.StringTokenizer: java.lang.String nextToken()>();

        nextT = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

        split = staticinvoke <weka.core.packageManagement.DefaultPackage: java.lang.String[] splitNameVersion(java.lang.String)>(nextT);

        $r4 = split[0];

        $r5 = this.<weka.core.packageManagement.DefaultPackage: weka.core.packageManagement.PackageManager m_packageManager>;

        $r6 = virtualinvoke $r5.<weka.core.packageManagement.PackageManager: java.lang.String getBaseSystemName()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label5;

        $r7 = this.<weka.core.packageManagement.DefaultPackage: weka.core.packageManagement.PackageManager m_packageManager>;

        $r8 = split[0];

        $r9 = split[2];

        toAdd#37 = virtualinvoke $r7.<weka.core.packageManagement.PackageManager: weka.core.packageManagement.Package getRepositoryPackageInfo(java.lang.String,java.lang.Object)>($r8, $r9);

        $i0 = lengthof split;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 3 goto label4;

        $r10 = new weka.core.packageManagement.VersionPackageConstraint;

        specialinvoke $r10.<weka.core.packageManagement.VersionPackageConstraint: void <init>(weka.core.packageManagement.Package)>(toAdd#37);

        versionConstraint#44 = $r10;

        $r11 = split[2];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r11);

        if $r11 != null goto label2;

        $r12 = <weka.core.packageManagement.VersionPackageConstraint$VersionComparison: weka.core.packageManagement.VersionPackageConstraint$VersionComparison LESSTHANOREQUAL>;

        virtualinvoke versionConstraint#44.<weka.core.packageManagement.VersionPackageConstraint: void setVersionConstraint(weka.core.packageManagement.VersionPackageConstraint$VersionComparison)>($r12);

        goto label3;

     label2:
        $r13 = split[1];

        virtualinvoke versionConstraint#44.<weka.core.packageManagement.VersionPackageConstraint: void setVersionConstraint(java.lang.String)>($r13);

     label3:
        $r14 = new weka.core.packageManagement.Dependency;

        specialinvoke $r14.<weka.core.packageManagement.Dependency: void <init>(weka.core.packageManagement.Package,weka.core.packageManagement.PackageConstraint)>(this, versionConstraint#44);

        dep = $r14;

        interfaceinvoke dependencies.<java.util.List: boolean add(java.lang.Object)>(dep);

        goto label5;

     label4:
        $r15 = new weka.core.packageManagement.VersionRangePackageConstraint;

        specialinvoke $r15.<weka.core.packageManagement.VersionRangePackageConstraint: void <init>(weka.core.packageManagement.Package)>(toAdd#37);

        versionConstraint#64 = $r15;

        $r16 = split[1];

        comp1 = staticinvoke <weka.core.packageManagement.VersionPackageConstraint: weka.core.packageManagement.VersionPackageConstraint$VersionComparison getVersionComparison(java.lang.String)>($r16);

        $r17 = split[3];

        comp2 = staticinvoke <weka.core.packageManagement.VersionPackageConstraint: weka.core.packageManagement.VersionPackageConstraint$VersionComparison getVersionComparison(java.lang.String)>($r17);

        $r18 = split[2];

        $r19 = split[4];

        virtualinvoke versionConstraint#64.<weka.core.packageManagement.VersionRangePackageConstraint: void setRangeConstraint(java.lang.String,weka.core.packageManagement.VersionPackageConstraint$VersionComparison,java.lang.String,weka.core.packageManagement.VersionPackageConstraint$VersionComparison)>($r18, comp1, $r19, comp2);

        $r20 = new weka.core.packageManagement.Dependency;

        specialinvoke $r20.<weka.core.packageManagement.Dependency: void <init>(weka.core.packageManagement.Package,weka.core.packageManagement.PackageConstraint)>(this, versionConstraint#64);

        dep = $r20;

        interfaceinvoke dependencies.<java.util.List: boolean add(java.lang.Object)>(dep);

     label5:
        goto label1;

     label6:
        return dependencies;
    }

    protected static java.lang.String[] splitNameVersion(java.lang.String)
    {
        java.lang.String[] result2, result#4;
        java.lang.String nameAndVersion#1, nameAndVersion#7, $r0, $r1, $r2, secondInequality#33, secondInequality#46, $r3, nameAndVersion#67, nameAndVersion#70, nameAndVersion#121, $r4, secondInequality#174, $r5;
        int $i0, $i1, $i2, delimiterIndex#37, $i3, $i4, $i5, $i6, pos#72, delimiterIndex#113, pos#130, $i17;
        boolean ok#18, ok#128;
        char $c7, $c8, $c9, $c10, $c11, $c12, $c13, $c14, $c15, $c16;

        nameAndVersion#1 := @parameter0: java.lang.String;

        result#4 = newarray (java.lang.String)[3];

        nameAndVersion#7 = virtualinvoke nameAndVersion#1.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke nameAndVersion#7.<java.lang.String: int indexOf(int)>(40);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 >= 0 goto label01;

        result#4[0] = nameAndVersion#7;

        goto label19;

     label01:
        $i1 = virtualinvoke nameAndVersion#7.<java.lang.String: int indexOf(int)>(41);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 < 0 goto label19;

        ok#18 = 1;

        $i2 = virtualinvoke nameAndVersion#7.<java.lang.String: int indexOf(int)>(40);

        $r0 = virtualinvoke nameAndVersion#7.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        result#4[0] = $r0;

        $r1 = result#4[0];

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        result#4[0] = $r2;

        secondInequality#33 = null;

        delimiterIndex#37 = virtualinvoke nameAndVersion#7.<java.lang.String: int indexOf(int)>(124);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(delimiterIndex#37);

        if delimiterIndex#37 < 0 goto label02;

        $i3 = delimiterIndex#37 + 1;

        $i4 = virtualinvoke nameAndVersion#7.<java.lang.String: int length()>();

        secondInequality#46 = virtualinvoke nameAndVersion#7.<java.lang.String: java.lang.String substring(int,int)>($i3, $i4);

        secondInequality#33 = virtualinvoke secondInequality#46.<java.lang.String: java.lang.String trim()>();

        result2 = newarray (java.lang.String)[5];

        $r3 = result#4[0];

        result2[0] = $r3;

        result#4 = result2;

        goto label03;

     label02:
        delimiterIndex#37 = virtualinvoke nameAndVersion#7.<java.lang.String: int length()>();

     label03:
        $i5 = virtualinvoke nameAndVersion#7.<java.lang.String: int indexOf(int)>(40);

        $i6 = $i5 + 1;

        nameAndVersion#67 = virtualinvoke nameAndVersion#7.<java.lang.String: java.lang.String substring(int,int)>($i6, delimiterIndex#37);

        nameAndVersion#70 = virtualinvoke nameAndVersion#67.<java.lang.String: java.lang.String trim()>();

        pos#72 = 1;

        $c7 = virtualinvoke nameAndVersion#70.<java.lang.String: char charAt(int)>(0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($c7);

        if $c7 != 61 goto label04;

        result#4[1] = "=";

        goto label09;

     label04:
        $c8 = virtualinvoke nameAndVersion#70.<java.lang.String: char charAt(int)>(1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($c8);

        if $c8 != 61 goto label06;

        pos#72 = pos#72 + 1;

        $c9 = virtualinvoke nameAndVersion#70.<java.lang.String: char charAt(int)>(0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($c9);

        if $c9 != 60 goto label05;

        result#4[1] = "<=";

        goto label09;

     label05:
        result#4[1] = ">=";

        goto label09;

     label06:
        $c10 = virtualinvoke nameAndVersion#70.<java.lang.String: char charAt(int)>(0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($c10);

        if $c10 != 60 goto label07;

        result#4[1] = "<";

        goto label09;

     label07:
        $c11 = virtualinvoke nameAndVersion#70.<java.lang.String: char charAt(int)>(0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($c11);

        if $c11 != 62 goto label08;

        result#4[1] = ">";

        goto label09;

     label08:
        ok#18 = 0;

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(ok#18);

        if ok#18 == 0 goto label12;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(secondInequality#33);

        if secondInequality#33 == null goto label10;

        delimiterIndex#113 = virtualinvoke nameAndVersion#70.<java.lang.String: int length()>();

        goto label11;

     label10:
        delimiterIndex#113 = virtualinvoke nameAndVersion#70.<java.lang.String: int indexOf(int)>(41);

     label11:
        nameAndVersion#121 = virtualinvoke nameAndVersion#70.<java.lang.String: java.lang.String substring(int,int)>(pos#72, delimiterIndex#113);

        $r4 = virtualinvoke nameAndVersion#121.<java.lang.String: java.lang.String trim()>();

        result#4[2] = $r4;

     label12:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(secondInequality#33);

        if secondInequality#33 == null goto label19;

        ok#128 = 1;

        pos#130 = 1;

        $c12 = virtualinvoke secondInequality#33.<java.lang.String: char charAt(int)>(0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($c12);

        if $c12 != 61 goto label13;

        result#4[3] = "=";

        goto label18;

     label13:
        $c13 = virtualinvoke secondInequality#33.<java.lang.String: char charAt(int)>(1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($c13);

        if $c13 != 61 goto label15;

        pos#130 = pos#130 + 1;

        $c14 = virtualinvoke secondInequality#33.<java.lang.String: char charAt(int)>(0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($c14);

        if $c14 != 60 goto label14;

        result#4[3] = "<=";

        goto label18;

     label14:
        result#4[3] = ">=";

        goto label18;

     label15:
        $c15 = virtualinvoke secondInequality#33.<java.lang.String: char charAt(int)>(0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($c15);

        if $c15 != 60 goto label16;

        result#4[3] = "<";

        goto label18;

     label16:
        $c16 = virtualinvoke secondInequality#33.<java.lang.String: char charAt(int)>(0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($c16);

        if $c16 != 62 goto label17;

        result#4[3] = ">";

        goto label18;

     label17:
        ok#128 = 0;

     label18:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(ok#128);

        if ok#128 == 0 goto label19;

        $i17 = virtualinvoke secondInequality#33.<java.lang.String: int indexOf(int)>(41);

        secondInequality#174 = virtualinvoke secondInequality#33.<java.lang.String: java.lang.String substring(int,int)>(pos#130, $i17);

        $r5 = virtualinvoke secondInequality#174.<java.lang.String: java.lang.String trim()>();

        result#4[4] = $r5;

     label19:
        return result#4;
    }

    public boolean isCompatibleBaseSystem() throws java.lang.Exception
    {
        weka.core.packageManagement.DefaultPackage this, basePackage, $r14;
        java.lang.String baseSystemName, systemVersion, dependencies, nextT, $r5, $r6, $r7, $r8, $r9, $r10, $r17, $r18, $r19, $r20;
        java.util.StringTokenizer tok, $r4;
        java.lang.String[] split;
        weka.core.packageManagement.VersionPackageConstraint$VersionComparison constraint, comp1, comp2;
        java.util.HashMap baseMap, $r11;
        weka.core.packageManagement.VersionRangePackageConstraint versionRConstraint, $r16;
        weka.core.packageManagement.PackageManager $r0, $r1, $r15;
        java.lang.Object $r2, $r3;
        boolean ok#15, $z0, $z1, $z2, $z3;
        int $i0;

        this := @this: weka.core.packageManagement.DefaultPackage;

        $r0 = this.<weka.core.packageManagement.DefaultPackage: weka.core.packageManagement.PackageManager m_packageManager>;

        baseSystemName = virtualinvoke $r0.<weka.core.packageManagement.PackageManager: java.lang.String getBaseSystemName()>();

        $r1 = this.<weka.core.packageManagement.DefaultPackage: weka.core.packageManagement.PackageManager m_packageManager>;

        $r2 = virtualinvoke $r1.<weka.core.packageManagement.PackageManager: java.lang.Object getBaseSystemVersion()>();

        systemVersion = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $r3 = virtualinvoke this.<weka.core.packageManagement.DefaultPackage: java.lang.Object getPackageMetaDataElement(java.lang.Object)>("Depends");

        dependencies = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dependencies);

        if dependencies != null goto label1;

        return 1;

     label1:
        ok#15 = 1;

        $r4 = new java.util.StringTokenizer;

        specialinvoke $r4.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(dependencies, ",");

        tok = $r4;

     label2:
        $z0 = virtualinvoke tok.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label6;

        $r5 = virtualinvoke tok.<java.util.StringTokenizer: java.lang.String nextToken()>();

        nextT = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

        split = staticinvoke <weka.core.packageManagement.DefaultPackage: java.lang.String[] splitNameVersion(java.lang.String)>(nextT);

        $r6 = split[0];

        $r7 = virtualinvoke baseSystemName.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>($r7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label5;

        $r8 = split[1];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r8);

        if $r8 == null goto label5;

        $i0 = lengthof split;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 3 goto label4;

        $r9 = split[1];

        constraint = staticinvoke <weka.core.packageManagement.VersionPackageConstraint: weka.core.packageManagement.VersionPackageConstraint$VersionComparison getVersionComparison(java.lang.String)>($r9);

        $r10 = split[2];

        $z2 = staticinvoke <weka.core.packageManagement.VersionPackageConstraint: boolean checkConstraint(java.lang.String,weka.core.packageManagement.VersionPackageConstraint$VersionComparison,java.lang.String)>(systemVersion, constraint, $r10);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label3;

        ok#15 = 0;

        goto label6;

     label3:
        goto label5;

     label4:
        $r11 = new java.util.HashMap;

        specialinvoke $r11.<java.util.HashMap: void <init>()>();

        baseMap = $r11;

        interfaceinvoke baseMap.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("PackageName", "weka");

        interfaceinvoke baseMap.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Version", systemVersion);

        $r14 = new weka.core.packageManagement.DefaultPackage;

        $r15 = this.<weka.core.packageManagement.DefaultPackage: weka.core.packageManagement.PackageManager m_packageManager>;

        specialinvoke $r14.<weka.core.packageManagement.DefaultPackage: void <init>(java.io.File,weka.core.packageManagement.PackageManager,java.util.Map)>(null, $r15, baseMap);

        basePackage = $r14;

        $r16 = new weka.core.packageManagement.VersionRangePackageConstraint;

        specialinvoke $r16.<weka.core.packageManagement.VersionRangePackageConstraint: void <init>(weka.core.packageManagement.Package)>(basePackage);

        versionRConstraint = $r16;

        $r17 = split[1];

        comp1 = staticinvoke <weka.core.packageManagement.VersionPackageConstraint: weka.core.packageManagement.VersionPackageConstraint$VersionComparison getVersionComparison(java.lang.String)>($r17);

        $r18 = split[3];

        comp2 = staticinvoke <weka.core.packageManagement.VersionPackageConstraint: weka.core.packageManagement.VersionPackageConstraint$VersionComparison getVersionComparison(java.lang.String)>($r18);

        $r19 = split[2];

        $r20 = split[4];

        virtualinvoke versionRConstraint.<weka.core.packageManagement.VersionRangePackageConstraint: void setRangeConstraint(java.lang.String,weka.core.packageManagement.VersionPackageConstraint$VersionComparison,java.lang.String,weka.core.packageManagement.VersionPackageConstraint$VersionComparison)>($r19, comp1, $r20, comp2);

        $z3 = virtualinvoke versionRConstraint.<weka.core.packageManagement.VersionRangePackageConstraint: boolean checkConstraint(weka.core.packageManagement.Package)>(basePackage);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label5;

        ok#15 = 0;

        goto label6;

     label5:
        goto label2;

     label6:
        return ok#15;
    }

    public java.lang.String getName()
    {
        weka.core.packageManagement.DefaultPackage this;
        java.lang.Object $r0;
        java.lang.String $r1;

        this := @this: weka.core.packageManagement.DefaultPackage;

        $r0 = virtualinvoke this.<weka.core.packageManagement.DefaultPackage: java.lang.Object getPackageMetaDataElement(java.lang.Object)>("PackageName");

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    public java.util.List getPrecludedPackages(java.util.List) throws java.lang.Exception
    {
        weka.core.packageManagement.DefaultPackage this;
        java.util.List packages;
        java.util.ArrayList result, $r0;
        java.lang.Object precluded, $r4, $r10;
        java.util.StringTokenizer tok, $r1;
        java.lang.String nextT, versionI, $r2, $r3, $r5, $r6, $r7, $r8, $r9, $r11, $r12, $r13, $r15, $r16, $r17, $r18;
        java.lang.String[] splitD;
        java.util.Iterator l7;
        weka.core.packageManagement.Package p;
        weka.core.packageManagement.VersionPackageConstraint$VersionComparison constraint, comp1, comp2;
        weka.core.packageManagement.VersionRangePackageConstraint versionRConstraint, $r14;
        boolean $z0, $z1, $z2, $z3, $z5;
        int $i0;

        this := @this: weka.core.packageManagement.DefaultPackage;

        packages := @parameter0: java.util.List;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        result = $r0;

        precluded = virtualinvoke this.<weka.core.packageManagement.DefaultPackage: java.lang.Object getPackageMetaDataElement(java.lang.Object)>("Precludes");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(precluded);

        if precluded == null goto label9;

        $r1 = new java.util.StringTokenizer;

        $r2 = virtualinvoke precluded.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r1.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r2, ",");

        tok = $r1;

     label1:
        $z0 = virtualinvoke tok.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label9;

        $r3 = virtualinvoke tok.<java.util.StringTokenizer: java.lang.String nextToken()>();

        nextT = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

        splitD = staticinvoke <weka.core.packageManagement.DefaultPackage: java.lang.String[] splitNameVersion(java.lang.String)>(nextT);

        l7 = interfaceinvoke packages.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke l7.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label8;

        $r4 = interfaceinvoke l7.<java.util.Iterator: java.lang.Object next()>();

        p = (weka.core.packageManagement.Package) $r4;

        $r5 = virtualinvoke p.<weka.core.packageManagement.Package: java.lang.String getName()>();

        $r6 = splitD[0];

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label7;

        $r8 = splitD[1];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r8);

        if $r8 == null goto label6;

        $r9 = splitD[2];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r9);

        if $r9 == null goto label6;

        $r10 = virtualinvoke p.<weka.core.packageManagement.Package: java.lang.Object getPackageMetaDataElement(java.lang.Object)>("Version");

        $r11 = virtualinvoke $r10.<java.lang.Object: java.lang.String toString()>();

        versionI = virtualinvoke $r11.<java.lang.String: java.lang.String trim()>();

        $i0 = lengthof splitD;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 3 goto label4;

        $r12 = splitD[1];

        constraint = staticinvoke <weka.core.packageManagement.VersionPackageConstraint: weka.core.packageManagement.VersionPackageConstraint$VersionComparison getVersionComparison(java.lang.String)>($r12);

        $r13 = splitD[2];

        $z3 = staticinvoke <weka.core.packageManagement.VersionPackageConstraint: boolean checkConstraint(java.lang.String,weka.core.packageManagement.VersionPackageConstraint$VersionComparison,java.lang.String)>(versionI, constraint, $r13);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label3;

        interfaceinvoke result.<java.util.List: boolean add(java.lang.Object)>(p);

     label3:
        goto label5;

     label4:
        $r14 = new weka.core.packageManagement.VersionRangePackageConstraint;

        specialinvoke $r14.<weka.core.packageManagement.VersionRangePackageConstraint: void <init>(weka.core.packageManagement.Package)>(p);

        versionRConstraint = $r14;

        $r15 = splitD[1];

        comp1 = staticinvoke <weka.core.packageManagement.VersionPackageConstraint: weka.core.packageManagement.VersionPackageConstraint$VersionComparison getVersionComparison(java.lang.String)>($r15);

        $r16 = splitD[3];

        comp2 = staticinvoke <weka.core.packageManagement.VersionPackageConstraint: weka.core.packageManagement.VersionPackageConstraint$VersionComparison getVersionComparison(java.lang.String)>($r16);

        $r17 = splitD[2];

        $r18 = splitD[4];

        virtualinvoke versionRConstraint.<weka.core.packageManagement.VersionRangePackageConstraint: void setRangeConstraint(java.lang.String,weka.core.packageManagement.VersionPackageConstraint$VersionComparison,java.lang.String,weka.core.packageManagement.VersionPackageConstraint$VersionComparison)>($r17, comp1, $r18, comp2);

        $z5 = virtualinvoke versionRConstraint.<weka.core.packageManagement.VersionRangePackageConstraint: boolean checkConstraint(weka.core.packageManagement.Package)>(p);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label5;

        interfaceinvoke result.<java.util.List: boolean add(java.lang.Object)>(p);

     label5:
        goto label7;

     label6:
        interfaceinvoke result.<java.util.List: boolean add(java.lang.Object)>(p);

     label7:
        goto label2;

     label8:
        goto label1;

     label9:
        return result;
    }

    public java.util.List getMissingDependencies() throws java.lang.Exception
    {
        weka.core.packageManagement.DefaultPackage this;
        java.util.List installedPackages, $r2;
        weka.core.packageManagement.PackageManager $r0;
        java.lang.Object $r1;

        this := @this: weka.core.packageManagement.DefaultPackage;

        $r0 = this.<weka.core.packageManagement.DefaultPackage: weka.core.packageManagement.PackageManager m_packageManager>;

        installedPackages = virtualinvoke $r0.<weka.core.packageManagement.PackageManager: java.util.List getInstalledPackages()>();

        $r1 = virtualinvoke this.<weka.core.packageManagement.DefaultPackage: java.lang.Object getPackageMetaDataElement(java.lang.Object)>("Depends");

        virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        $r2 = virtualinvoke this.<weka.core.packageManagement.DefaultPackage: java.util.List getMissingDependencies(java.util.List)>(installedPackages);

        return $r2;
    }

    public java.util.List getMissingDependencies(java.util.List) throws java.lang.Exception
    {
        weka.core.packageManagement.DefaultPackage this;
        java.util.List packages;
        java.util.ArrayList missing, $r0;
        java.lang.String dependencies, nextT, $r3, $r4, $r6, $r8, $r9, $r10, $r12, $r15, $r18, $r19, $r20, $r21;
        java.util.StringTokenizer tok, $r2;
        java.lang.String[] split;
        weka.core.packageManagement.Package tempDep;
        weka.core.packageManagement.VersionPackageConstraint versionConstraint, $r11;
        weka.core.packageManagement.VersionRangePackageConstraint versionRConstraint, $r17;
        weka.core.packageManagement.VersionPackageConstraint$VersionComparison comp1, comp2, $r13;
        java.lang.Object $r1;
        boolean $z0, $z1, $z2;
        weka.core.packageManagement.PackageManager $r5, $r7;
        weka.core.packageManagement.Dependency $r14, $r16, $r22;
        int $i0;

        this := @this: weka.core.packageManagement.DefaultPackage;

        packages := @parameter0: java.util.List;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        missing = $r0;

        $r1 = virtualinvoke this.<weka.core.packageManagement.DefaultPackage: java.lang.Object getPackageMetaDataElement(java.lang.Object)>("Depends");

        dependencies = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dependencies);

        if dependencies == null goto label5;

        $r2 = new java.util.StringTokenizer;

        specialinvoke $r2.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(dependencies, ",");

        tok = $r2;

     label1:
        $z0 = virtualinvoke tok.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label5;

        $r3 = virtualinvoke tok.<java.util.StringTokenizer: java.lang.String nextToken()>();

        nextT = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

        split = staticinvoke <weka.core.packageManagement.DefaultPackage: java.lang.String[] splitNameVersion(java.lang.String)>(nextT);

        $r4 = split[0];

        $r5 = this.<weka.core.packageManagement.DefaultPackage: weka.core.packageManagement.PackageManager m_packageManager>;

        $r6 = virtualinvoke $r5.<weka.core.packageManagement.PackageManager: java.lang.String getBaseSystemName()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label4;

        $r7 = this.<weka.core.packageManagement.DefaultPackage: weka.core.packageManagement.PackageManager m_packageManager>;

        $r8 = split[0];

        $r9 = split[2];

        tempDep = virtualinvoke $r7.<weka.core.packageManagement.PackageManager: weka.core.packageManagement.Package getRepositoryPackageInfo(java.lang.String,java.lang.Object)>($r8, $r9);

        $r10 = split[0];

        $z2 = specialinvoke this.<weka.core.packageManagement.DefaultPackage: boolean findPackage(java.lang.String,java.util.List)>($r10, packages);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label4;

        $r11 = new weka.core.packageManagement.VersionPackageConstraint;

        specialinvoke $r11.<weka.core.packageManagement.VersionPackageConstraint: void <init>(weka.core.packageManagement.Package)>(tempDep);

        versionConstraint = $r11;

        $r12 = split[2];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r12);

        if $r12 != null goto label2;

        $r13 = <weka.core.packageManagement.VersionPackageConstraint$VersionComparison: weka.core.packageManagement.VersionPackageConstraint$VersionComparison LESSTHANOREQUAL>;

        virtualinvoke versionConstraint.<weka.core.packageManagement.VersionPackageConstraint: void setVersionConstraint(weka.core.packageManagement.VersionPackageConstraint$VersionComparison)>($r13);

        $r14 = new weka.core.packageManagement.Dependency;

        specialinvoke $r14.<weka.core.packageManagement.Dependency: void <init>(weka.core.packageManagement.Package,weka.core.packageManagement.PackageConstraint)>(this, versionConstraint);

        interfaceinvoke missing.<java.util.List: boolean add(java.lang.Object)>($r14);

        goto label4;

     label2:
        $i0 = lengthof split;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 3 goto label3;

        $r15 = split[1];

        virtualinvoke versionConstraint.<weka.core.packageManagement.VersionPackageConstraint: void setVersionConstraint(java.lang.String)>($r15);

        $r16 = new weka.core.packageManagement.Dependency;

        specialinvoke $r16.<weka.core.packageManagement.Dependency: void <init>(weka.core.packageManagement.Package,weka.core.packageManagement.PackageConstraint)>(this, versionConstraint);

        interfaceinvoke missing.<java.util.List: boolean add(java.lang.Object)>($r16);

        goto label4;

     label3:
        $r17 = new weka.core.packageManagement.VersionRangePackageConstraint;

        specialinvoke $r17.<weka.core.packageManagement.VersionRangePackageConstraint: void <init>(weka.core.packageManagement.Package)>(tempDep);

        versionRConstraint = $r17;

        $r18 = split[1];

        comp1 = staticinvoke <weka.core.packageManagement.VersionPackageConstraint: weka.core.packageManagement.VersionPackageConstraint$VersionComparison getVersionComparison(java.lang.String)>($r18);

        $r19 = split[3];

        comp2 = staticinvoke <weka.core.packageManagement.VersionPackageConstraint: weka.core.packageManagement.VersionPackageConstraint$VersionComparison getVersionComparison(java.lang.String)>($r19);

        $r20 = split[2];

        $r21 = split[4];

        virtualinvoke versionRConstraint.<weka.core.packageManagement.VersionRangePackageConstraint: void setRangeConstraint(java.lang.String,weka.core.packageManagement.VersionPackageConstraint$VersionComparison,java.lang.String,weka.core.packageManagement.VersionPackageConstraint$VersionComparison)>($r20, comp1, $r21, comp2);

        $r22 = new weka.core.packageManagement.Dependency;

        specialinvoke $r22.<weka.core.packageManagement.Dependency: void <init>(weka.core.packageManagement.Package,weka.core.packageManagement.PackageConstraint)>(this, versionRConstraint);

        interfaceinvoke missing.<java.util.List: boolean add(java.lang.Object)>($r22);

     label4:
        goto label1;

     label5:
        return missing;
    }

    private boolean findPackage(java.lang.String, java.util.List)
    {
        weka.core.packageManagement.DefaultPackage this;
        java.lang.String packageName, pName;
        java.util.List packageList;
        java.util.Iterator i;
        weka.core.packageManagement.Package p;
        boolean found#2, $z0, $z1;
        java.lang.Object $r0, $r1;

        this := @this: weka.core.packageManagement.DefaultPackage;

        packageName := @parameter0: java.lang.String;

        packageList := @parameter1: java.util.List;

        found#2 = 0;

        i = interfaceinvoke packageList.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke i.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        $r0 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>();

        p = (weka.core.packageManagement.Package) $r0;

        $r1 = virtualinvoke p.<weka.core.packageManagement.Package: java.lang.Object getPackageMetaDataElement(java.lang.Object)>("PackageName");

        pName = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        $z1 = virtualinvoke packageName.<java.lang.String: boolean equals(java.lang.Object)>(pName);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        found#2 = 1;

        goto label3;

     label2:
        goto label1;

     label3:
        return found#2;
    }


