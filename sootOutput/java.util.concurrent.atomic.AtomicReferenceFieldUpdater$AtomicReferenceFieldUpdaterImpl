    static void <clinit>()
    {
        sun.misc.Unsafe $r0;

        $r0 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: sun.misc.Unsafe U> = $r0;

        return;
    }

    void <init>(java.lang.Class, java.lang.Class, java.lang.String, java.lang.Class)
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl l0;
        java.lang.Class l1, l2, l4, l6, $r11;
        java.lang.String l3;
        java.lang.reflect.Field l5;
        int l7;
        java.lang.ClassLoader l9, l8#16;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl$1 $r0;
        java.lang.Object $r1;
        boolean $z0, $z1, $z2, $z3;
        java.security.PrivilegedActionException $r2, l8#30;
        java.lang.RuntimeException $r3, $r6;
        java.lang.Exception $r4, $r5, l8#36;
        java.lang.ClassCastException $r7;
        java.lang.IllegalArgumentException $r8, $r9;
        sun.misc.Unsafe $r12;
        long $l0;

        l0 := @this: java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl;

        l1 := @parameter0: java.lang.Class;

        l2 := @parameter1: java.lang.Class;

        l3 := @parameter2: java.lang.String;

        l4 := @parameter3: java.lang.Class;

        specialinvoke l0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void <init>()>();

     label01:
        $r0 = new java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl$1;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl$1: void <init>(java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl,java.lang.Class,java.lang.String)>(l0, l1, l3);

        $r1 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>($r0);

        l5 = (java.lang.reflect.Field) $r1;

        l7 = virtualinvoke l5.<java.lang.reflect.Field: int getModifiers()>();

        staticinvoke <sun.reflect.misc.ReflectUtil: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>(l4, l1, null, l7);

        l8#16 = virtualinvoke l1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        l9 = virtualinvoke l4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if l9 == null goto label03;

        if l9 == l8#16 goto label03;

        if l8#16 == null goto label02;

        $z0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: boolean isAncestor(java.lang.ClassLoader,java.lang.ClassLoader)>(l8#16, l9);

        if $z0 != 0 goto label03;

     label02:
        staticinvoke <sun.reflect.misc.ReflectUtil: void checkPackageAccess(java.lang.Class)>(l1);

     label03:
        l6 = virtualinvoke l5.<java.lang.reflect.Field: java.lang.Class getType()>();

     label04:
        goto label07;

     label05:
        $r2 := @caughtexception;

        l8#30 = $r2;

        $r3 = new java.lang.RuntimeException;

        $r4 = virtualinvoke l8#30.<java.security.PrivilegedActionException: java.lang.Exception getException()>();

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4);

        throw $r3;

     label06:
        $r5 := @caughtexception;

        l8#36 = $r5;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(l8#36);

        throw $r6;

     label07:
        if l2 == l6 goto label08;

        $r7 = new java.lang.ClassCastException;

        specialinvoke $r7.<java.lang.ClassCastException: void <init>()>();

        throw $r7;

     label08:
        $z1 = virtualinvoke l2.<java.lang.Class: boolean isPrimitive()>();

        if $z1 == 0 goto label09;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must be reference type");

        throw $r8;

     label09:
        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isVolatile(int)>(l7);

        if $z2 != 0 goto label10;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must be volatile type");

        throw $r9;

     label10:
        $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isProtected(int)>(l7);

        if $z3 == 0 goto label11;

        $r11 = l4;

        goto label12;

     label11:
        $r11 = l1;

     label12:
        l0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class cclass> = $r11;

        l0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class tclass> = l1;

        l0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class vclass> = l2;

        $r12 = <java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: sun.misc.Unsafe U>;

        $l0 = virtualinvoke $r12.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>(l5);

        l0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: long offset> = $l0;

        return;

        catch java.security.PrivilegedActionException from label01 to label04 with label05;
        catch java.lang.Exception from label01 to label04 with label06;
    }

    private static boolean isAncestor(java.lang.ClassLoader, java.lang.ClassLoader)
    {
        java.lang.ClassLoader l0, l1, l2#2;

        l0 := @parameter0: java.lang.ClassLoader;

        l1 := @parameter1: java.lang.ClassLoader;

        l2#2 = l0;

     label1:
        l2#2 = virtualinvoke l2#2.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

        if l1 != l2#2 goto label2;

        return 1;

     label2:
        if l2#2 != null goto label1;

        return 0;
    }

    public final boolean compareAndSet(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl l0;
        java.lang.Object l1, l2, l3;
        sun.misc.Unsafe $r0;
        long $l0;
        boolean $z0;

        l0 := @this: java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl;

        l1 := @parameter0: java.lang.Object;

        l2 := @parameter1: java.lang.Object;

        l3 := @parameter2: java.lang.Object;

        specialinvoke l0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: void accessCheck(java.lang.Object)>(l1);

        specialinvoke l0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: void valueCheck(java.lang.Object)>(l3);

        $r0 = <java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: sun.misc.Unsafe U>;

        $l0 = l0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: long offset>;

        $z0 = virtualinvoke $r0.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(l1, $l0, l2, l3);

        return $z0;
    }

    private final void accessCheck(java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl l0;
        java.lang.Object l1;
        java.lang.Class $r0;
        boolean $z0;

        l0 := @this: java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl;

        l1 := @parameter0: java.lang.Object;

        $r0 = l0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class cclass>;

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean isInstance(java.lang.Object)>(l1);

        if $z0 != 0 goto label1;

        specialinvoke l0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: void throwAccessCheckException(java.lang.Object)>(l1);

     label1:
        return;
    }

    private final void valueCheck(java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl l0;
        java.lang.Object l1;
        java.lang.Class $r0;
        boolean $z0;

        l0 := @this: java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl;

        l1 := @parameter0: java.lang.Object;

        if l1 == null goto label1;

        $r0 = l0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class vclass>;

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean isInstance(java.lang.Object)>(l1);

        if $z0 != 0 goto label1;

        staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: void throwCCE()>();

     label1:
        return;
    }

    static void throwCCE()
    {
        java.lang.ClassCastException $r0;

        $r0 = new java.lang.ClassCastException;

        specialinvoke $r0.<java.lang.ClassCastException: void <init>()>();

        throw $r0;
    }

    private final void throwAccessCheckException(java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl l0;
        java.lang.Object l1;
        java.lang.IllegalAccessException $r0;
        java.lang.Class $r1, $r2, $r7, $r11, $r15;
        java.lang.ClassCastException $r3;
        java.lang.RuntimeException $r4;
        java.lang.StringBuilder $r5, $r6, $r9, $r10, $r13, $r14, $r17;
        java.lang.String $r8, $r12, $r16, $r18;

        l0 := @this: java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl;

        l1 := @parameter0: java.lang.Object;

        $r1 = l0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class cclass>;

        $r2 = l0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class tclass>;

        if $r1 != $r2 goto label1;

        $r3 = new java.lang.ClassCastException;

        specialinvoke $r3.<java.lang.ClassCastException: void <init>()>();

        throw $r3;

     label1:
        $r4 = new java.lang.RuntimeException;

        $r0 = new java.lang.IllegalAccessException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ");

        $r7 = l0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class cclass>;

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" can not access a protected member of class ");

        $r11 = l0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: java.lang.Class tclass>;

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" using an instance of ");

        $r15 = virtualinvoke l1.<java.lang.Object: java.lang.Class getClass()>();

        $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.String getName()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalAccessException: void <init>(java.lang.String)>($r18);

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r0);

        throw $r4;
    }


