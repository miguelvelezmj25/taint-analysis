    public void dispose()
    {
        kanzi.entropy.BinaryEntropyEncoder this;
        boolean $z0;
        kanzi.OutputBitStream $r0;
        long $l0, $l1;

        this := @this: kanzi.entropy.BinaryEntropyEncoder;

        $z0 = this.<kanzi.entropy.BinaryEntropyEncoder: boolean disposed>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 1 goto label1;

        return;

     label1:
        this.<kanzi.entropy.BinaryEntropyEncoder: boolean disposed> = 1;

        $r0 = this.<kanzi.entropy.BinaryEntropyEncoder: kanzi.OutputBitStream bitstream>;

        $l0 = this.<kanzi.entropy.BinaryEntropyEncoder: long low>;

        $l1 = $l0 | 16777215L;

        interfaceinvoke $r0.<kanzi.OutputBitStream: int writeBits(long,int)>($l1, 56);

        return;
    }

    public int encode(byte[], int, int)
    {
        kanzi.entropy.BinaryEntropyEncoder this;
        byte[] array;
        int blkptr, len, end, $i0, $i1, i#14;
        byte $b2;

        this := @this: kanzi.entropy.BinaryEntropyEncoder;

        array := @parameter0: byte[];

        blkptr := @parameter1: int;

        len := @parameter2: int;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(array);

        if array == null goto label1;

        $i0 = blkptr + len;

        $i1 = lengthof array;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i0 > $i1 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(blkptr);

        if blkptr < 0 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len);

        if len >= 0 goto label2;

     label1:
        return -1;

     label2:
        end = blkptr + len;

        i#14 = blkptr;

     label3:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#14);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(end);

        if i#14 >= end goto label4;

        $b2 = array[i#14];

        virtualinvoke this.<kanzi.entropy.BinaryEntropyEncoder: void encodeByte(byte)>($b2);

        i#14 = i#14 + 1;

        goto label3;

     label4:
        return len;
    }

    public final void encodeByte(byte)
    {
        kanzi.entropy.BinaryEntropyEncoder this;
        byte val, $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7, $b8, $b9, $b10, $b11, $b12, $b13, $b14;

        this := @this: kanzi.entropy.BinaryEntropyEncoder;

        val := @parameter0: byte;

        $b0 = val >> 7;

        $b1 = $b0 & 1;

        virtualinvoke this.<kanzi.entropy.BinaryEntropyEncoder: void encodeBit(int)>($b1);

        $b2 = val >> 6;

        $b3 = $b2 & 1;

        virtualinvoke this.<kanzi.entropy.BinaryEntropyEncoder: void encodeBit(int)>($b3);

        $b4 = val >> 5;

        $b5 = $b4 & 1;

        virtualinvoke this.<kanzi.entropy.BinaryEntropyEncoder: void encodeBit(int)>($b5);

        $b6 = val >> 4;

        $b7 = $b6 & 1;

        virtualinvoke this.<kanzi.entropy.BinaryEntropyEncoder: void encodeBit(int)>($b7);

        $b8 = val >> 3;

        $b9 = $b8 & 1;

        virtualinvoke this.<kanzi.entropy.BinaryEntropyEncoder: void encodeBit(int)>($b9);

        $b10 = val >> 2;

        $b11 = $b10 & 1;

        virtualinvoke this.<kanzi.entropy.BinaryEntropyEncoder: void encodeBit(int)>($b11);

        $b12 = val >> 1;

        $b13 = $b12 & 1;

        virtualinvoke this.<kanzi.entropy.BinaryEntropyEncoder: void encodeBit(int)>($b13);

        $b14 = val & 1;

        virtualinvoke this.<kanzi.entropy.BinaryEntropyEncoder: void encodeBit(int)>($b14);

        return;
    }

    public void <init>(kanzi.OutputBitStream, kanzi.entropy.Predictor)
    {
        kanzi.entropy.BinaryEntropyEncoder this;
        kanzi.OutputBitStream bitstream;
        kanzi.entropy.Predictor predictor;
        java.lang.NullPointerException $r0, $r1;

        this := @this: kanzi.entropy.BinaryEntropyEncoder;

        bitstream := @parameter0: kanzi.OutputBitStream;

        predictor := @parameter1: kanzi.entropy.Predictor;

        specialinvoke this.<java.lang.Object: void <init>()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(bitstream);

        if bitstream != null goto label1;

        $r0 = new java.lang.NullPointerException;

        specialinvoke $r0.<java.lang.NullPointerException: void <init>(java.lang.String)>("Invalid null bitstream parameter");

        throw $r0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(predictor);

        if predictor != null goto label2;

        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("Invalid null predictor parameter");

        throw $r1;

     label2:
        this.<kanzi.entropy.BinaryEntropyEncoder: long low> = 0L;

        this.<kanzi.entropy.BinaryEntropyEncoder: long high> = 72057594037927935L;

        this.<kanzi.entropy.BinaryEntropyEncoder: kanzi.OutputBitStream bitstream> = bitstream;

        this.<kanzi.entropy.BinaryEntropyEncoder: kanzi.entropy.Predictor predictor> = predictor;

        return;
    }

    public void encodeBit(int)
    {
        kanzi.entropy.BinaryEntropyEncoder this;
        int bit, $i4, $i8, $i17, $i18;
        long split, $l0, $l1, $l2, $l3, $l5, $l6, $l7, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16, $l19, $l20, $l21, $l22, $l23, $l24, $l25, $l26, $l27;
        kanzi.entropy.Predictor $r0, $r3;
        byte $b28;

        this := @this: kanzi.entropy.BinaryEntropyEncoder;

        bit := @parameter0: int;

        $l0 = this.<kanzi.entropy.BinaryEntropyEncoder: long high>;

        $l1 = this.<kanzi.entropy.BinaryEntropyEncoder: long low>;

        $l2 = $l0 - $l1;

        $l3 = $l2 >>> 4;

        $r0 = this.<kanzi.entropy.BinaryEntropyEncoder: kanzi.entropy.Predictor predictor>;

        $i4 = interfaceinvoke $r0.<kanzi.entropy.Predictor: int get()>();

        $l5 = (long) $i4;

        $l6 = $l3 * $l5;

        split = $l6 >>> 8;

        $l7 = this.<kanzi.entropy.BinaryEntropyEncoder: long high>;

        $i8 = neg bit;

        $l9 = (long) $i8;

        $l10 = this.<kanzi.entropy.BinaryEntropyEncoder: long high>;

        $l11 = this.<kanzi.entropy.BinaryEntropyEncoder: long low>;

        $l12 = $l10 - $l11;

        $l13 = $l12 - split;

        $l14 = $l9 & $l13;

        $l15 = $l7 - $l14;

        this.<kanzi.entropy.BinaryEntropyEncoder: long high> = $l15;

        $l16 = this.<kanzi.entropy.BinaryEntropyEncoder: long low>;

        $i17 = neg bit;

        $i18 = $i17 ^ -1;

        $l19 = (long) $i18;

        $l20 = split ^ -1L;

        $l21 = neg $l20;

        $l22 = $l19 & $l21;

        $l23 = $l16 + $l22;

        this.<kanzi.entropy.BinaryEntropyEncoder: long low> = $l23;

        $r3 = this.<kanzi.entropy.BinaryEntropyEncoder: kanzi.entropy.Predictor predictor>;

        interfaceinvoke $r3.<kanzi.entropy.Predictor: void update(int)>(bit);

     label1:
        $l24 = this.<kanzi.entropy.BinaryEntropyEncoder: long low>;

        $l25 = this.<kanzi.entropy.BinaryEntropyEncoder: long high>;

        $l26 = $l24 ^ $l25;

        $l27 = $l26 & 72057594021150720L;

        $b28 = $l27 cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b28);

        if $b28 != 0 goto label2;

        specialinvoke this.<kanzi.entropy.BinaryEntropyEncoder: void flush()>();

        goto label1;

     label2:
        return;
    }

    private void flush()
    {
        kanzi.entropy.BinaryEntropyEncoder this;
        kanzi.OutputBitStream $r0;
        long $l0, $l1, $l3, $l4, $l5, $l6, $l7;

        this := @this: kanzi.entropy.BinaryEntropyEncoder;

        $r0 = this.<kanzi.entropy.BinaryEntropyEncoder: kanzi.OutputBitStream bitstream>;

        $l0 = this.<kanzi.entropy.BinaryEntropyEncoder: long high>;

        $l1 = $l0 >>> 24;

        interfaceinvoke $r0.<kanzi.OutputBitStream: int writeBits(long,int)>($l1, 32);

        $l3 = this.<kanzi.entropy.BinaryEntropyEncoder: long low>;

        $l4 = $l3 << 32;

        this.<kanzi.entropy.BinaryEntropyEncoder: long low> = $l4;

        $l5 = this.<kanzi.entropy.BinaryEntropyEncoder: long high>;

        $l6 = $l5 << 32;

        $l7 = $l6 | 4294967295L;

        this.<kanzi.entropy.BinaryEntropyEncoder: long high> = $l7;

        return;
    }


