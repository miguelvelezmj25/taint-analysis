    void <init>(org.tukaani.xz.lzma.LZMAEncoder, int, int)
    {
        org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder this;
        org.tukaani.xz.lzma.LZMAEncoder this$0;
        int pb, niceLen, posStates, lenSymbols, $i0, $i1;
        int[] $r0;
        int[][] $r1;

        this := @this: org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder;

        this$0 := @parameter0: org.tukaani.xz.lzma.LZMAEncoder;

        pb := @parameter1: int;

        niceLen := @parameter2: int;

        this.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0> = this$0;

        specialinvoke this.<org.tukaani.xz.lzma.LZMACoder$LengthCoder: void <init>(org.tukaani.xz.lzma.LZMACoder)>(this$0);

        posStates = 1 << pb;

        $r0 = newarray (int)[posStates];

        this.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: int[] counters> = $r0;

        $i0 = niceLen - 2;

        $i1 = $i0 + 1;

        lenSymbols = staticinvoke <java.lang.Math: int max(int,int)>($i1, 16);

        $r1 = newmultiarray (int)[posStates][lenSymbols];

        this.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: int[][] prices> = $r1;

        return;
    }

    void reset()
    {
        org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder this;
        int i#3, $i0;
        int[] $r0, $r1;

        this := @this: org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder;

        specialinvoke this.<org.tukaani.xz.lzma.LZMACoder$LengthCoder: void reset()>();

        i#3 = 0;

     label1:
        $r0 = this.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: int[] counters>;

        $i0 = lengthof $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#3 >= $i0 goto label2;

        $r1 = this.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: int[] counters>;

        $r1[i#3] = 0;

        i#3 = i#3 + 1;

        goto label1;

     label2:
        return;
    }

    int getPrice(int, int)
    {
        org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder this;
        int len, posState, $i0, $i1;
        int[][] $r0;
        int[] $r1;

        this := @this: org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder;

        len := @parameter0: int;

        posState := @parameter1: int;

        $r0 = this.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: int[][] prices>;

        $r1 = $r0[posState];

        $i0 = len - 2;

        $i1 = $r1[$i0];

        return $i1;
    }

    void updatePrices()
    {
        org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder this;
        int posState#2, $i0, $i1;
        int[] $r0, $r1, $r2;

        this := @this: org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder;

        posState#2 = 0;

     label1:
        $r0 = this.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: int[] counters>;

        $i0 = lengthof $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(posState#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if posState#2 >= $i0 goto label3;

        $r1 = this.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: int[] counters>;

        $i1 = $r1[posState#2];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 > 0 goto label2;

        $r2 = this.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: int[] counters>;

        $r2[posState#2] = 32;

        specialinvoke this.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: void updatePrices(int)>(posState#2);

     label2:
        posState#2 = posState#2 + 1;

        goto label1;

     label3:
        return;
    }

    private void updatePrices(int)
    {
        org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder this;
        int posState, choice0Price#7, i#9, $i1, $i2, choice0Price#31, choice1Price#38, $i5, $i6, $i7, $i8, choice1Price#64, $i10, $i11, $i12, $i13, $i14, $i15;
        short[] $r0, $r4, $r5, $r6, $r10, $r11, $r16;
        short $s0, $s3, $s4, $s9;
        int[][] $r1, $r7, $r12, $r14;
        int[] $r2, $r8, $r13, $r15;
        short[][] $r3, $r9;

        this := @this: org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder;

        posState := @parameter0: int;

        $r0 = this.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: short[] choice>;

        $s0 = $r0[0];

        choice0Price#7 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitPrice(int,int)>($s0, 0);

        i#9 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#9);

        if i#9 >= 8 goto label2;

        $r1 = this.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: int[][] prices>;

        $r2 = $r1[posState];

        $r3 = this.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: short[][] low>;

        $r4 = $r3[posState];

        $i1 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitTreePrice(short[],int)>($r4, i#9);

        $i2 = choice0Price#7 + $i1;

        $r2[i#9] = $i2;

        i#9 = i#9 + 1;

        goto label1;

     label2:
        $r5 = this.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: short[] choice>;

        $s3 = $r5[0];

        choice0Price#31 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitPrice(int,int)>($s3, 1);

        $r6 = this.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: short[] choice>;

        $s4 = $r6[1];

        choice1Price#38 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitPrice(int,int)>($s4, 0);

     label3:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#9);

        if i#9 >= 16 goto label4;

        $r7 = this.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: int[][] prices>;

        $r8 = $r7[posState];

        $i5 = choice0Price#31 + choice1Price#38;

        $r9 = this.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: short[][] mid>;

        $r10 = $r9[posState];

        $i6 = i#9 - 8;

        $i7 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitTreePrice(short[],int)>($r10, $i6);

        $i8 = $i5 + $i7;

        $r8[i#9] = $i8;

        i#9 = i#9 + 1;

        goto label3;

     label4:
        $r11 = this.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: short[] choice>;

        $s9 = $r11[1];

        choice1Price#64 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitPrice(int,int)>($s9, 1);

     label5:
        $r12 = this.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: int[][] prices>;

        $r13 = $r12[posState];

        $i10 = lengthof $r13;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i10);

        if i#9 >= $i10 goto label6;

        $r14 = this.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: int[][] prices>;

        $r15 = $r14[posState];

        $i11 = choice0Price#31 + choice1Price#64;

        $r16 = this.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: short[] high>;

        $i12 = i#9 - 8;

        $i13 = $i12 - 8;

        $i14 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitTreePrice(short[],int)>($r16, $i13);

        $i15 = $i11 + $i14;

        $r15[i#9] = $i15;

        i#9 = i#9 + 1;

        goto label5;

     label6:
        return;
    }

    void encode(int, int) throws java.io.IOException
    {
        org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder this;
        int posState, len#1, len#2, len#27, $i0, $i2, $i3;
        org.tukaani.xz.lzma.LZMAEncoder $r0, $r3, $r7, $r10, $r13, $r17, $r20;
        org.tukaani.xz.rangecoder.RangeEncoder $r1, $r4, $r8, $r11, $r14, $r18, $r21;
        short[] $r2, $r6, $r9, $r12, $r16, $r19, $r22;
        short[][] $r5, $r15;
        int[] $r23;

        this := @this: org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder;

        len#1 := @parameter0: int;

        posState := @parameter1: int;

        len#2 = len#1 + -2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len#2);

        if len#2 >= 8 goto label1;

        $r0 = this.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $r1 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder access$100(org.tukaani.xz.lzma.LZMAEncoder)>($r0);

        $r2 = this.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: short[] choice>;

        virtualinvoke $r1.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBit(short[],int,int)>($r2, 0, 0);

        $r3 = this.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $r4 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder access$100(org.tukaani.xz.lzma.LZMAEncoder)>($r3);

        $r5 = this.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: short[][] low>;

        $r6 = $r5[posState];

        virtualinvoke $r4.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBitTree(short[],int)>($r6, len#2);

        goto label3;

     label1:
        $r7 = this.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $r8 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder access$100(org.tukaani.xz.lzma.LZMAEncoder)>($r7);

        $r9 = this.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: short[] choice>;

        virtualinvoke $r8.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBit(short[],int,int)>($r9, 0, 1);

        len#27 = len#2 + -8;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len#27);

        if len#27 >= 8 goto label2;

        $r10 = this.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $r11 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder access$100(org.tukaani.xz.lzma.LZMAEncoder)>($r10);

        $r12 = this.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: short[] choice>;

        virtualinvoke $r11.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBit(short[],int,int)>($r12, 1, 0);

        $r13 = this.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $r14 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder access$100(org.tukaani.xz.lzma.LZMAEncoder)>($r13);

        $r15 = this.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: short[][] mid>;

        $r16 = $r15[posState];

        virtualinvoke $r14.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBitTree(short[],int)>($r16, len#27);

        goto label3;

     label2:
        $r17 = this.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $r18 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder access$100(org.tukaani.xz.lzma.LZMAEncoder)>($r17);

        $r19 = this.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: short[] choice>;

        virtualinvoke $r18.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBit(short[],int,int)>($r19, 1, 1);

        $r20 = this.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $r21 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder access$100(org.tukaani.xz.lzma.LZMAEncoder)>($r20);

        $r22 = this.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: short[] high>;

        $i0 = len#27 - 8;

        virtualinvoke $r21.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBitTree(short[],int)>($r22, $i0);

     label3:
        $r23 = this.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: int[] counters>;

        $i2 = $r23[posState];

        $i3 = $i2 - 1;

        $r23[posState] = $i3;

        return;
    }


