    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "berkeley/com/sleepycat/je/tree/INTargetRep";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: boolean $assertionsDisabled> = $z1;

        return;
    }

    public volatile java.lang.Object set(int, java.lang.Object, berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.tree.INTargetRep$Sparse this;
        int l1;
        java.lang.Object l2;
        berkeley.com.sleepycat.je.tree.IN l3;
        berkeley.com.sleepycat.je.tree.Node $r0;
        berkeley.com.sleepycat.je.tree.INTargetRep $r1;

        this := @this: berkeley.com.sleepycat.je.tree.INTargetRep$Sparse;

        l1 := @parameter0: int;

        l2 := @parameter1: java.lang.Object;

        l3 := @parameter2: berkeley.com.sleepycat.je.tree.IN;

        $r0 = (berkeley.com.sleepycat.je.tree.Node) l2;

        $r1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: berkeley.com.sleepycat.je.tree.INTargetRep set(int,berkeley.com.sleepycat.je.tree.Node,berkeley.com.sleepycat.je.tree.IN)>(l1, $r0, l3);

        return $r1;
    }

    public berkeley.com.sleepycat.je.tree.INTargetRep set(int, berkeley.com.sleepycat.je.tree.Node, berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.tree.INTargetRep$Sparse this;
        int j, slot#8, i#10, $i0, $i3, i#52, $i4;
        berkeley.com.sleepycat.je.tree.Node node, $r5, $r11, $r14;
        berkeley.com.sleepycat.je.tree.IN parent;
        berkeley.com.sleepycat.je.tree.INTargetRep$Default fe, $r8;
        boolean $z0;
        java.lang.AssertionError $r0;
        berkeley.com.sleepycat.je.tree.Node[] $r1, $r3, $r4, $r6, $r9, $r10, $r13;
        short[] $r2, $r7, $r12;
        short $s1, $s2, $s5;
        berkeley.com.sleepycat.je.tree.INTargetRep $r16;

        this := @this: berkeley.com.sleepycat.je.tree.INTargetRep$Sparse;

        j := @parameter0: int;

        node := @parameter1: berkeley.com.sleepycat.je.tree.Node;

        parent := @parameter2: berkeley.com.sleepycat.je.tree.IN;

        $z0 = <berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label02;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j);

        if j < 0 goto label01;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j);

        if j <= 32767 goto label02;

     label01:
        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label02:
        slot#8 = -1;

        i#10 = 0;

     label03:
        $r1 = this.<berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: berkeley.com.sleepycat.je.tree.Node[] targets>;

        $i0 = lengthof $r1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#10);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#10 >= $i0 goto label06;

        $r2 = this.<berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: short[] idxs>;

        $s1 = $r2[i#10];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j);

        if $s1 != j goto label04;

        $r3 = this.<berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: berkeley.com.sleepycat.je.tree.Node[] targets>;

        $r3[i#10] = node;

        return this;

     label04:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(slot#8);

        if slot#8 >= 0 goto label05;

        $r4 = this.<berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: berkeley.com.sleepycat.je.tree.Node[] targets>;

        $r5 = $r4[i#10];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r5);

        if $r5 != null goto label05;

        slot#8 = i#10;

     label05:
        i#10 = i#10 + 1;

        goto label03;

     label06:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(node);

        if node != null goto label07;

        return this;

     label07:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(slot#8);

        if slot#8 < 0 goto label08;

        $r6 = this.<berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: berkeley.com.sleepycat.je.tree.Node[] targets>;

        $r6[slot#8] = node;

        $r7 = this.<berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: short[] idxs>;

        $s2 = (short) j;

        $r7[slot#8] = $s2;

        return this;

     label08:
        $r8 = new berkeley.com.sleepycat.je.tree.INTargetRep$Default;

        $i3 = virtualinvoke parent.<berkeley.com.sleepycat.je.tree.IN: int getMaxEntries()>();

        specialinvoke $r8.<berkeley.com.sleepycat.je.tree.INTargetRep$Default: void <init>(int)>($i3);

        fe = $r8;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: void noteRepChange(berkeley.com.sleepycat.je.tree.INArrayRep,berkeley.com.sleepycat.je.tree.IN)>(fe, parent);

        i#52 = 0;

     label09:
        $r9 = this.<berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: berkeley.com.sleepycat.je.tree.Node[] targets>;

        $i4 = lengthof $r9;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#52);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if i#52 >= $i4 goto label11;

        $r10 = this.<berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: berkeley.com.sleepycat.je.tree.Node[] targets>;

        $r11 = $r10[i#52];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r11);

        if $r11 == null goto label10;

        $r12 = this.<berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: short[] idxs>;

        $s5 = $r12[i#52];

        $r13 = this.<berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: berkeley.com.sleepycat.je.tree.Node[] targets>;

        $r14 = $r13[i#52];

        virtualinvoke fe.<berkeley.com.sleepycat.je.tree.INTargetRep$Default: berkeley.com.sleepycat.je.tree.INTargetRep set(int,berkeley.com.sleepycat.je.tree.Node,berkeley.com.sleepycat.je.tree.IN)>($s5, $r14, parent);

     label10:
        i#52 = i#52 + 1;

        goto label09;

     label11:
        $r16 = virtualinvoke fe.<berkeley.com.sleepycat.je.tree.INTargetRep$Default: berkeley.com.sleepycat.je.tree.INTargetRep set(int,berkeley.com.sleepycat.je.tree.Node,berkeley.com.sleepycat.je.tree.IN)>(j, node, parent);

        return $r16;
    }

    public long calculateMemorySize()
    {
        berkeley.com.sleepycat.je.tree.INTargetRep$Sparse this;
        int $i0;
        long $l1;

        this := @this: berkeley.com.sleepycat.je.tree.INTargetRep$Sparse;

        $i0 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: int SPARSE_TARGET_ENTRY_OVERHEAD>;

        $l1 = (long) $i0;

        return $l1;
    }

    public void <init>(int)
    {
        berkeley.com.sleepycat.je.tree.INTargetRep$Sparse this;
        int capacity;
        short[] $r0, $r2, $r3, $r4, $r5;
        berkeley.com.sleepycat.je.tree.Node[] $r1;

        this := @this: berkeley.com.sleepycat.je.tree.INTargetRep$Sparse;

        capacity := @parameter0: int;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.INTargetRep: void <init>()>();

        $r0 = newarray (short)[4];

        this.<berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: short[] idxs> = $r0;

        $r1 = newarray (berkeley.com.sleepycat.je.tree.Node)[4];

        this.<berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: berkeley.com.sleepycat.je.tree.Node[] targets> = $r1;

        $r2 = this.<berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: short[] idxs>;

        $r3 = this.<berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: short[] idxs>;

        $r3[3] = -1;

        $r4 = this.<berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: short[] idxs>;

        $r4[2] = -1;

        $r5 = this.<berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: short[] idxs>;

        $r5[1] = -1;

        $r2[0] = -1;

        return;
    }

    public volatile java.lang.Object copy(int, int, int, berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.tree.INTargetRep$Sparse this;
        int l1, l2, l3;
        berkeley.com.sleepycat.je.tree.IN l4;
        berkeley.com.sleepycat.je.tree.INTargetRep $r0;

        this := @this: berkeley.com.sleepycat.je.tree.INTargetRep$Sparse;

        l1 := @parameter0: int;

        l2 := @parameter1: int;

        l3 := @parameter2: int;

        l4 := @parameter3: berkeley.com.sleepycat.je.tree.IN;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: berkeley.com.sleepycat.je.tree.INTargetRep copy(int,int,int,berkeley.com.sleepycat.je.tree.IN)>(l1, l2, l3, l4);

        return $r0;
    }

    public berkeley.com.sleepycat.je.tree.INTargetRep copy(int, int, int, berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.tree.INTargetRep$Sparse this;
        int n, from#1, to#2, i#11, $i0, $i1, from#25, to#29, i#31;
        berkeley.com.sleepycat.je.tree.IN parent;
        berkeley.com.sleepycat.je.tree.INTargetRep target#4;
        berkeley.com.sleepycat.je.tree.Node $r0, $r2;
        java.lang.Object $r1, $r3;

        this := @this: berkeley.com.sleepycat.je.tree.INTargetRep$Sparse;

        from#1 := @parameter0: int;

        to#2 := @parameter1: int;

        n := @parameter2: int;

        parent := @parameter3: berkeley.com.sleepycat.je.tree.IN;

        target#4 = this;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(to#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(from#1);

        if to#2 == from#1 goto label6;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n);

        if n != 0 goto label1;

        goto label6;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(to#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(from#1);

        if to#2 >= from#1 goto label4;

        i#11 = 0;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#11);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n);

        if i#11 >= n goto label3;

        $i0 = to#2;

        to#2 = to#2 + 1;

        $i1 = from#1;

        from#1 = from#1 + 1;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: berkeley.com.sleepycat.je.tree.Node get(int)>($i1);

        $r1 = virtualinvoke target#4.<berkeley.com.sleepycat.je.tree.INTargetRep: java.lang.Object set(int,java.lang.Object,berkeley.com.sleepycat.je.tree.IN)>($i0, $r0, parent);

        target#4 = (berkeley.com.sleepycat.je.tree.INTargetRep) $r1;

        i#11 = i#11 + 1;

        goto label2;

     label3:
        goto label6;

     label4:
        from#25 = from#1 + n;

        to#29 = to#2 + n;

        i#31 = 0;

     label5:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#31);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n);

        if i#31 >= n goto label6;

        to#29 = to#29 + -1;

        from#25 = from#25 + -1;

        $r2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: berkeley.com.sleepycat.je.tree.Node get(int)>(from#25);

        $r3 = virtualinvoke target#4.<berkeley.com.sleepycat.je.tree.INTargetRep: java.lang.Object set(int,java.lang.Object,berkeley.com.sleepycat.je.tree.IN)>(to#29, $r2, parent);

        target#4 = (berkeley.com.sleepycat.je.tree.INTargetRep) $r3;

        i#31 = i#31 + 1;

        goto label5;

     label6:
        return target#4;
    }

    public berkeley.com.sleepycat.je.tree.Node get(int)
    {
        berkeley.com.sleepycat.je.tree.INTargetRep$Sparse this;
        int j;
        boolean $z0;
        java.lang.AssertionError $r0;
        short[] $r1, $r4, $r7, $r10;
        short $s0, $s1, $s2, $s3;
        berkeley.com.sleepycat.je.tree.Node[] $r2, $r5, $r8, $r11;
        berkeley.com.sleepycat.je.tree.Node $r3, $r6, $r9, $r12;

        this := @this: berkeley.com.sleepycat.je.tree.INTargetRep$Sparse;

        j := @parameter0: int;

        $z0 = <berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j);

        if j < 0 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j);

        if j <= 32767 goto label2;

     label1:
        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label2:
        $r1 = this.<berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: short[] idxs>;

        $s0 = $r1[0];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j);

        if $s0 != j goto label3;

        $r2 = this.<berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: berkeley.com.sleepycat.je.tree.Node[] targets>;

        $r3 = $r2[0];

        return $r3;

     label3:
        $r4 = this.<berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: short[] idxs>;

        $s1 = $r4[1];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j);

        if $s1 != j goto label4;

        $r5 = this.<berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: berkeley.com.sleepycat.je.tree.Node[] targets>;

        $r6 = $r5[1];

        return $r6;

     label4:
        $r7 = this.<berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: short[] idxs>;

        $s2 = $r7[2];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j);

        if $s2 != j goto label5;

        $r8 = this.<berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: berkeley.com.sleepycat.je.tree.Node[] targets>;

        $r9 = $r8[2];

        return $r9;

     label5:
        $r10 = this.<berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: short[] idxs>;

        $s3 = $r10[3];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j);

        if $s3 != j goto label6;

        $r11 = this.<berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: berkeley.com.sleepycat.je.tree.Node[] targets>;

        $r12 = $r11[3];

        return $r12;

     label6:
        return null;
    }

    public volatile java.lang.Object get(int)
    {
        berkeley.com.sleepycat.je.tree.INTargetRep$Sparse this;
        int l1;
        berkeley.com.sleepycat.je.tree.Node $r0;

        this := @this: berkeley.com.sleepycat.je.tree.INTargetRep$Sparse;

        l1 := @parameter0: int;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: berkeley.com.sleepycat.je.tree.Node get(int)>(l1);

        return $r0;
    }

    public void updateCacheStats(boolean, berkeley.com.sleepycat.je.evictor.Evictor)
    {
        berkeley.com.sleepycat.je.tree.INTargetRep$Sparse this;
        boolean increment;
        berkeley.com.sleepycat.je.evictor.Evictor evictor;
        java.util.concurrent.atomic.AtomicLong $r0, $r1;

        this := @this: berkeley.com.sleepycat.je.tree.INTargetRep$Sparse;

        increment := @parameter0: boolean;

        evictor := @parameter1: berkeley.com.sleepycat.je.evictor.Evictor;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(increment);

        if increment == 0 goto label1;

        $r0 = virtualinvoke evictor.<berkeley.com.sleepycat.je.evictor.Evictor: java.util.concurrent.atomic.AtomicLong getNINSparseTarget()>();

        virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        goto label2;

     label1:
        $r1 = virtualinvoke evictor.<berkeley.com.sleepycat.je.evictor.Evictor: java.util.concurrent.atomic.AtomicLong getNINSparseTarget()>();

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long decrementAndGet()>();

     label2:
        return;
    }

    public volatile java.lang.Object compact(berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.tree.INTargetRep$Sparse this;
        berkeley.com.sleepycat.je.tree.IN l1;
        berkeley.com.sleepycat.je.tree.INTargetRep $r0;

        this := @this: berkeley.com.sleepycat.je.tree.INTargetRep$Sparse;

        l1 := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: berkeley.com.sleepycat.je.tree.INTargetRep compact(berkeley.com.sleepycat.je.tree.IN)>(l1);

        return $r0;
    }

    public berkeley.com.sleepycat.je.tree.INTargetRep compact(berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.tree.INTargetRep$Sparse this;
        berkeley.com.sleepycat.je.tree.IN parent;
        berkeley.com.sleepycat.je.tree.Node[] l3;
        int l4, count#2, l5#8;
        berkeley.com.sleepycat.je.tree.Node target;
        berkeley.com.sleepycat.je.tree.INTargetRep$None newRep;

        this := @this: berkeley.com.sleepycat.je.tree.INTargetRep$Sparse;

        parent := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        count#2 = 0;

        l3 = this.<berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: berkeley.com.sleepycat.je.tree.Node[] targets>;

        l4 = lengthof l3;

        l5#8 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l5#8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l4);

        if l5#8 >= l4 goto label3;

        target = l3[l5#8];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(target);

        if target == null goto label2;

        count#2 = count#2 + 1;

     label2:
        l5#8 = l5#8 + 1;

        goto label1;

     label3:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count#2);

        if count#2 != 0 goto label4;

        newRep = <berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: berkeley.com.sleepycat.je.tree.INTargetRep$None NONE>;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: void noteRepChange(berkeley.com.sleepycat.je.tree.INArrayRep,berkeley.com.sleepycat.je.tree.IN)>(newRep, parent);

        return newRep;

     label4:
        return this;
    }

    public volatile java.lang.Object getType()
    {
        berkeley.com.sleepycat.je.tree.INTargetRep$Sparse this;
        berkeley.com.sleepycat.je.tree.INTargetRep$Type $r0;

        this := @this: berkeley.com.sleepycat.je.tree.INTargetRep$Sparse;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: berkeley.com.sleepycat.je.tree.INTargetRep$Type getType()>();

        return $r0;
    }

    public berkeley.com.sleepycat.je.tree.INTargetRep$Type getType()
    {
        berkeley.com.sleepycat.je.tree.INTargetRep$Sparse this;
        berkeley.com.sleepycat.je.tree.INTargetRep$Type $r0;

        this := @this: berkeley.com.sleepycat.je.tree.INTargetRep$Sparse;

        $r0 = <berkeley.com.sleepycat.je.tree.INTargetRep$Type: berkeley.com.sleepycat.je.tree.INTargetRep$Type SPARSE>;

        return $r0;
    }

    public volatile java.lang.Object resize(int)
    {
        berkeley.com.sleepycat.je.tree.INTargetRep$Sparse this, $r0;
        int l1;

        this := @this: berkeley.com.sleepycat.je.tree.INTargetRep$Sparse;

        l1 := @parameter0: int;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INTargetRep$Sparse: berkeley.com.sleepycat.je.tree.INTargetRep$Sparse resize(int)>(l1);

        return $r0;
    }

    public berkeley.com.sleepycat.je.tree.INTargetRep$Sparse resize(int)
    {
        berkeley.com.sleepycat.je.tree.INTargetRep$Sparse this;
        int capacity;

        this := @this: berkeley.com.sleepycat.je.tree.INTargetRep$Sparse;

        capacity := @parameter0: int;

        return this;
    }


