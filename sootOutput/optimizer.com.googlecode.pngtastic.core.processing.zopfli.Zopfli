    public void <init>(int)
    {
        optimizer.com.googlecode.pngtastic.core.processing.zopfli.Zopfli this;
        int masterBlockSize;
        optimizer.com.googlecode.pngtastic.core.processing.zopfli.Cookie $r0;

        nop;

        this := @this: optimizer.com.googlecode.pngtastic.core.processing.zopfli.Zopfli;

        nop;

        masterBlockSize := @parameter0: int;

        nop;

        specialinvoke this.<java.lang.Object: void <init>()>();

        nop;

        $r0 = new optimizer.com.googlecode.pngtastic.core.processing.zopfli.Cookie;

        nop;

        specialinvoke $r0.<optimizer.com.googlecode.pngtastic.core.processing.zopfli.Cookie: void <init>(int)>(masterBlockSize);

        nop;

        this.<optimizer.com.googlecode.pngtastic.core.processing.zopfli.Zopfli: optimizer.com.googlecode.pngtastic.core.processing.zopfli.Cookie cookie> = $r0;

        nop;

        return;
    }

    public synchronized optimizer.com.googlecode.pngtastic.core.processing.zopfli.Buffer compress(optimizer.com.googlecode.pngtastic.core.processing.zopfli.Options, byte[])
    {
        optimizer.com.googlecode.pngtastic.core.processing.zopfli.Zopfli this;
        optimizer.com.googlecode.pngtastic.core.processing.zopfli.Options options;
        byte[] input;
        optimizer.com.googlecode.pngtastic.core.processing.zopfli.Buffer output, $r0;

        nop;

        this := @this: optimizer.com.googlecode.pngtastic.core.processing.zopfli.Zopfli;

        nop;

        options := @parameter0: optimizer.com.googlecode.pngtastic.core.processing.zopfli.Options;

        nop;

        input := @parameter1: byte[];

        nop;

        $r0 = new optimizer.com.googlecode.pngtastic.core.processing.zopfli.Buffer;

        nop;

        specialinvoke $r0.<optimizer.com.googlecode.pngtastic.core.processing.zopfli.Buffer: void <init>()>();

        nop;

        output = $r0;

        nop;

        specialinvoke this.<optimizer.com.googlecode.pngtastic.core.processing.zopfli.Zopfli: void compressZlib(optimizer.com.googlecode.pngtastic.core.processing.zopfli.Options,byte[],optimizer.com.googlecode.pngtastic.core.processing.zopfli.Buffer)>(options, input, output);

        nop;

        return output;
    }

    private void compressZlib(optimizer.com.googlecode.pngtastic.core.processing.zopfli.Options, byte[], optimizer.com.googlecode.pngtastic.core.processing.zopfli.Buffer)
    {
        optimizer.com.googlecode.pngtastic.core.processing.zopfli.Zopfli this;
        optimizer.com.googlecode.pngtastic.core.processing.zopfli.Options options;
        byte[] input;
        optimizer.com.googlecode.pngtastic.core.processing.zopfli.Buffer output;
        int checksum, $i0, $i1, $i3, $i4, $i6, $i7, $i9;
        optimizer.com.googlecode.pngtastic.core.processing.zopfli.Cookie $r0;
        byte $b2, $b5, $b8, $b10;

        nop;

        this := @this: optimizer.com.googlecode.pngtastic.core.processing.zopfli.Zopfli;

        nop;

        options := @parameter0: optimizer.com.googlecode.pngtastic.core.processing.zopfli.Options;

        nop;

        input := @parameter1: byte[];

        nop;

        output := @parameter2: optimizer.com.googlecode.pngtastic.core.processing.zopfli.Buffer;

        nop;

        virtualinvoke output.<optimizer.com.googlecode.pngtastic.core.processing.zopfli.Buffer: void append(byte)>(120);

        nop;

        virtualinvoke output.<optimizer.com.googlecode.pngtastic.core.processing.zopfli.Buffer: void append(byte)>(-38);

        nop;

        $r0 = this.<optimizer.com.googlecode.pngtastic.core.processing.zopfli.Zopfli: optimizer.com.googlecode.pngtastic.core.processing.zopfli.Cookie cookie>;

        nop;

        staticinvoke <optimizer.com.googlecode.pngtastic.core.processing.zopfli.Deflate: void compress(optimizer.com.googlecode.pngtastic.core.processing.zopfli.Cookie,optimizer.com.googlecode.pngtastic.core.processing.zopfli.Options,byte[],optimizer.com.googlecode.pngtastic.core.processing.zopfli.Buffer)>($r0, options, input, output);

        nop;

        checksum = staticinvoke <optimizer.com.googlecode.pngtastic.core.processing.zopfli.Zopfli: int adler32(byte[])>(input);

        nop;

        $i0 = checksum >> 24;

        nop;

        $i1 = $i0 & 255;

        nop;

        $b2 = (byte) $i1;

        nop;

        virtualinvoke output.<optimizer.com.googlecode.pngtastic.core.processing.zopfli.Buffer: void append(byte)>($b2);

        nop;

        $i3 = checksum >> 16;

        nop;

        $i4 = $i3 & 255;

        nop;

        $b5 = (byte) $i4;

        nop;

        virtualinvoke output.<optimizer.com.googlecode.pngtastic.core.processing.zopfli.Buffer: void append(byte)>($b5);

        nop;

        $i6 = checksum >> 8;

        nop;

        $i7 = $i6 & 255;

        nop;

        $b8 = (byte) $i7;

        nop;

        virtualinvoke output.<optimizer.com.googlecode.pngtastic.core.processing.zopfli.Buffer: void append(byte)>($b8);

        nop;

        $i9 = checksum & 255;

        nop;

        $b10 = (byte) $i9;

        nop;

        virtualinvoke output.<optimizer.com.googlecode.pngtastic.core.processing.zopfli.Buffer: void append(byte)>($b10);

        nop;

        return;
    }

    private static int adler32(byte[])
    {
        byte[] data;
        int tick, s1#2, s2#4, i#6, $i0, $i1, $i2, $i3, $i5, $i6;
        byte $b4;

        nop;

        data := @parameter0: byte[];

        nop;

        s1#2 = 1;

        nop;

        s2#4 = 0;

        nop;

        i#6 = 0;

     label1:
        nop;

        $i0 = lengthof data;

        nop;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#6);

        nop;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        nop;

        if i#6 >= $i0 goto label4;

        nop;

        $i1 = lengthof data;

        nop;

        $i2 = i#6 + 1024;

        nop;

        tick = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

     label2:
        nop;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#6);

        nop;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(tick);

        nop;

        if i#6 >= tick goto label3;

        nop;

        $i3 = i#6;

        nop;

        i#6 = i#6 + 1;

        nop;

        $b4 = data[$i3];

        nop;

        s1#2 = s1#2 + $b4;

        nop;

        s2#4 = s2#4 + s1#2;

        nop;

        goto label2;

     label3:
        nop;

        s1#2 = s1#2 % 65521;

        nop;

        s2#4 = s2#4 % 65521;

        nop;

        goto label1;

     label4:
        nop;

        $i5 = s2#4 << 16;

        nop;

        $i6 = $i5 | s1#2;

        nop;

        return $i6;
    }


