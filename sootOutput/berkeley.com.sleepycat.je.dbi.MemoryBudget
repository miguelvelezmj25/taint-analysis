    static void <clinit>()
    {
        java.lang.String overrideArch, arch, arg, $r5, $r6;
        java.lang.NumberFormatException NFE, $r1;
        java.lang.Boolean checkCompressedOops;
        java.util.List args;
        java.util.Iterator l4;
        boolean useCompressedOops, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, is64#32, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        java.lang.Class $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.io.PrintStream $r2;
        java.lang.management.RuntimeMXBean $r3;
        java.lang.Object $r4;

        $r0 = class "berkeley/com/sleepycat/je/dbi/MemoryBudget";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        <berkeley.com.sleepycat.je.dbi.MemoryBudget: boolean $assertionsDisabled> = $z1;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: boolean CLEANUP_DONE> = 0;

        $z2 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("memAdmin");

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: boolean DEBUG_ADMIN> = $z2;

        $z3 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("memLock");

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: boolean DEBUG_LOCK> = $z3;

        $z4 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("memTxn");

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: boolean DEBUG_TXN> = $z4;

        $z5 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("memTreeAdmin");

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: boolean DEBUG_TREEADMIN> = $z5;

        $z6 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("memTree");

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: boolean DEBUG_TREE> = $z6;

        $z7 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("memDOS");

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: boolean DEBUG_DOS> = $z7;

        $i0 = staticinvoke <berkeley.com.sleepycat.je.dbi.MemoryBudget: int objectArraySize(int)>(0);

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int EMPTY_OBJ_ARRAY> = $i0;

        $i1 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: int EMPTY_OBJ_ARRAY>;

        $i2 = 40 - $i1;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int ARRAYLIST_OVERHEAD_32> = $i2;

        $i3 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: int EMPTY_OBJ_ARRAY>;

        $i4 = 64 - $i3;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int ARRAYLIST_OVERHEAD_64> = $i4;

        $i5 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: int EMPTY_OBJ_ARRAY>;

        $i6 = 40 - $i5;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int ARRAYLIST_OVERHEAD_OOPS> = $i6;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: boolean COMPRESSED_OOPS_REQUESTED> = 0;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: boolean COMPRESSED_OOPS_KNOWN> = 0;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: boolean COMPRESSED_OOPS_KNOWN_ON> = 0;

        is64#32 = 0;

        overrideArch = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("je.forceJVMArch");

     label03:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(overrideArch);

        if overrideArch != null goto label07;

        arch = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("sun.arch.data.model");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(arch);

        if arch == null goto label06;

        $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(arch);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if $i7 != 64 goto label04;

        $z8 = 1;

        goto label05;

     label04:
        $z8 = 0;

     label05:
        is64#32 = $z8;

     label06:
        goto label10;

     label07:
        $i8 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(overrideArch);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if $i8 != 64 goto label08;

        $z9 = 1;

        goto label09;

     label08:
        $z9 = 0;

     label09:
        is64#32 = $z9;

     label10:
        goto label12;

     label11:
        $r1 := @caughtexception;

        NFE = $r1;

        $r2 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke NFE.<java.lang.NumberFormatException: void printStackTrace(java.io.PrintStream)>($r2);

     label12:
        checkCompressedOops = staticinvoke <berkeley.com.sleepycat.je.dbi.CompressedOopsDetector: java.lang.Boolean isEnabled()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(checkCompressedOops);

        if checkCompressedOops == null goto label13;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: boolean COMPRESSED_OOPS_KNOWN> = 1;

        $z10 = virtualinvoke checkCompressedOops.<java.lang.Boolean: boolean booleanValue()>();

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: boolean COMPRESSED_OOPS_KNOWN_ON> = $z10;

     label13:
        $r3 = staticinvoke <java.lang.management.ManagementFactory: java.lang.management.RuntimeMXBean getRuntimeMXBean()>();

        args = interfaceinvoke $r3.<java.lang.management.RuntimeMXBean: java.util.List getInputArguments()>();

        l4 = interfaceinvoke args.<java.util.List: java.util.Iterator iterator()>();

     label14:
        $z11 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z11);

        if $z11 == 0 goto label16;

        $r4 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        arg = (java.lang.String) $r4;

        $r5 = "-XX:+UseCompressedOops";

        $z12 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(arg);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z12);

        if $z12 == 0 goto label15;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: boolean COMPRESSED_OOPS_REQUESTED> = 1;

        goto label16;

     label15:
        goto label14;

     label16:
        $z13 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: boolean COMPRESSED_OOPS_KNOWN>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z13);

        if $z13 == 0 goto label17;

        $z14 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: boolean COMPRESSED_OOPS_KNOWN_ON>;

        goto label18;

     label17:
        $z14 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: boolean COMPRESSED_OOPS_REQUESTED>;

     label18:
        useCompressedOops = $z14;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(useCompressedOops);

        if useCompressedOops == 0 goto label19;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int LONG_OVERHEAD> = 24;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int ARRAY_OVERHEAD> = 16;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int ARRAY_SIZE_INCLUDED> = 0;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int OBJECT_OVERHEAD> = 16;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int OBJECT_ARRAY_ITEM_OVERHEAD> = 4;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int HASHMAP_ENTRY_OVERHEAD> = 32;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int HASHSET_OVERHEAD> = 144;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int HASHSET_ENTRY_OVERHEAD> = 32;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int TREEMAP_OVERHEAD> = 48;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int MAPLN_OVERHEAD> = 1016;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int BIN_FIXED_OVERHEAD> = 232;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int BINDELTA_OVERHEAD> = 64;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DELTAINFO_OVERHEAD> = 32;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int SPARSE_TARGET_ENTRY_OVERHEAD> = 80;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DEFAULT_TARGET_ENTRY_OVERHEAD> = 16;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DEFAULT_KEYVALS_OVERHEAD> = 16;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int MAX_KEY_SIZE_KEYVALS_OVERHEAD> = 24;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DEFAULT_LONG_REP_OVERHEAD> = 24;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int SPARSE_LONG_REP_OVERHEAD> = 24;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DIN_FIXED_OVERHEAD> = 120;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DBIN_FIXED_OVERHEAD> = 168;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int IN_FIXED_OVERHEAD> = 256;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int HASHMAP_OVERHEAD> = 128;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int TWOHASHMAPS_OVERHEAD> = 256;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int TREEMAP_ENTRY_OVERHEAD> = 40;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int LN_OVERHEAD> = 24;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int VERSIONEDLN_OVERHEAD> = 8;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DUPCOUNTLN_OVERHEAD> = 40;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int TXN_OVERHEAD> = 240;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int CHECKPOINT_REFERENCE_SIZE> = 80;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int KEY_OVERHEAD> = 16;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int LOCKIMPL_OVERHEAD> = 32;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int THINLOCKIMPL_OVERHEAD> = 24;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int LOCKINFO_OVERHEAD> = 24;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int WRITE_LOCKINFO_OVERHEAD> = 56;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int UTILIZATION_PROFILE_ENTRY> = 125;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DBFILESUMMARY_OVERHEAD> = 48;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int TFS_LIST_INITIAL_OVERHEAD> = 464;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int TFS_LIST_SEGMENT_OVERHEAD> = 440;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int LN_INFO_OVERHEAD> = 30;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int FILESUMMARYLN_OVERHEAD> = 128;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int INENTRY_OVERHEAD> = 24;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DELTAINENTRY_OVERHEAD> = 32;

        $i9 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: int ARRAYLIST_OVERHEAD_OOPS>;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int ARRAYLIST_OVERHEAD> = $i9;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int TUPLE_OUTPUT_OVERHEAD> = 24;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DOS_WEAK_BINREF_OVERHEAD> = 48;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DOS_OFFHEAP_BINREF_OVERHEAD> = 40;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DOS_DEFERRED_LSN_BATCH_OVERHEAD> = 88;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DOS_DEFERRED_DELTAREF_OVERHEAD> = 16;

        goto label21;

     label19:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(is64#32);

        if is64#32 == 0 goto label20;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int LONG_OVERHEAD> = 24;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int ARRAY_OVERHEAD> = 24;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int ARRAY_SIZE_INCLUDED> = 0;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int OBJECT_OVERHEAD> = 16;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int OBJECT_ARRAY_ITEM_OVERHEAD> = 8;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int HASHMAP_ENTRY_OVERHEAD> = 52;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int HASHSET_OVERHEAD> = 240;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int HASHSET_ENTRY_OVERHEAD> = 55;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int TREEMAP_OVERHEAD> = 80;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int MAPLN_OVERHEAD> = 1624;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int BIN_FIXED_OVERHEAD> = 352;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DIN_FIXED_OVERHEAD> = 176;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DBIN_FIXED_OVERHEAD> = 232;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int IN_FIXED_OVERHEAD> = 392;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int HASHMAP_OVERHEAD> = 219;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int TWOHASHMAPS_OVERHEAD> = 438;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int BINDELTA_OVERHEAD> = 72;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DELTAINFO_OVERHEAD> = 40;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int SPARSE_TARGET_ENTRY_OVERHEAD> = 120;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DEFAULT_TARGET_ENTRY_OVERHEAD> = 24;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DEFAULT_KEYVALS_OVERHEAD> = 24;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int MAX_KEY_SIZE_KEYVALS_OVERHEAD> = 32;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DEFAULT_LONG_REP_OVERHEAD> = 32;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int SPARSE_LONG_REP_OVERHEAD> = 40;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int TREEMAP_ENTRY_OVERHEAD> = 64;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int LN_OVERHEAD> = 32;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int VERSIONEDLN_OVERHEAD> = 8;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DUPCOUNTLN_OVERHEAD> = 48;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int TXN_OVERHEAD> = 361;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int CHECKPOINT_REFERENCE_SIZE> = 111;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int KEY_OVERHEAD> = 24;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int LOCKIMPL_OVERHEAD> = 48;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int THINLOCKIMPL_OVERHEAD> = 32;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int LOCKINFO_OVERHEAD> = 32;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int WRITE_LOCKINFO_OVERHEAD> = 72;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int UTILIZATION_PROFILE_ENTRY> = 160;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DBFILESUMMARY_OVERHEAD> = 48;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int TFS_LIST_INITIAL_OVERHEAD> = 504;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int TFS_LIST_SEGMENT_OVERHEAD> = 465;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int LN_INFO_OVERHEAD> = 48;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int FILESUMMARYLN_OVERHEAD> = 168;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int INENTRY_OVERHEAD> = 32;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DELTAINENTRY_OVERHEAD> = 48;

        $i10 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: int ARRAYLIST_OVERHEAD_64>;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int ARRAYLIST_OVERHEAD> = $i10;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int TUPLE_OUTPUT_OVERHEAD> = 32;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DOS_WEAK_BINREF_OVERHEAD> = 72;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DOS_OFFHEAP_BINREF_OVERHEAD> = 40;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DOS_DEFERRED_LSN_BATCH_OVERHEAD> = 128;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DOS_DEFERRED_DELTAREF_OVERHEAD> = 24;

        goto label21;

     label20:
        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int LONG_OVERHEAD> = 16;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int ARRAY_OVERHEAD> = 16;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int ARRAY_SIZE_INCLUDED> = 4;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int OBJECT_OVERHEAD> = 8;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int OBJECT_ARRAY_ITEM_OVERHEAD> = 4;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int HASHMAP_OVERHEAD> = 120;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int HASHMAP_ENTRY_OVERHEAD> = 24;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int HASHSET_OVERHEAD> = 136;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int HASHSET_ENTRY_OVERHEAD> = 24;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int TWOHASHMAPS_OVERHEAD> = 240;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int TREEMAP_OVERHEAD> = 48;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int MAPLN_OVERHEAD> = 920;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int TREEMAP_ENTRY_OVERHEAD> = 32;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int LN_OVERHEAD> = 16;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int VERSIONEDLN_OVERHEAD> = 8;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DUPCOUNTLN_OVERHEAD> = 32;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int BIN_FIXED_OVERHEAD> = 223;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int BINDELTA_OVERHEAD> = 48;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DELTAINFO_OVERHEAD> = 24;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int SPARSE_TARGET_ENTRY_OVERHEAD> = 72;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DEFAULT_TARGET_ENTRY_OVERHEAD> = 16;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DEFAULT_KEYVALS_OVERHEAD> = 16;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int MAX_KEY_SIZE_KEYVALS_OVERHEAD> = 16;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DEFAULT_LONG_REP_OVERHEAD> = 16;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int SPARSE_LONG_REP_OVERHEAD> = 24;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DIN_FIXED_OVERHEAD> = 120;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DBIN_FIXED_OVERHEAD> = 152;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int IN_FIXED_OVERHEAD> = 248;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int TXN_OVERHEAD> = 224;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int CHECKPOINT_REFERENCE_SIZE> = 64;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int KEY_OVERHEAD> = 16;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int LOCKIMPL_OVERHEAD> = 24;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int THINLOCKIMPL_OVERHEAD> = 16;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int LOCKINFO_OVERHEAD> = 16;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int WRITE_LOCKINFO_OVERHEAD> = 48;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int UTILIZATION_PROFILE_ENTRY> = 109;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DBFILESUMMARY_OVERHEAD> = 40;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int TFS_LIST_INITIAL_OVERHEAD> = 464;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int TFS_LIST_SEGMENT_OVERHEAD> = 440;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int LN_INFO_OVERHEAD> = 32;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int FILESUMMARYLN_OVERHEAD> = 112;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int INENTRY_OVERHEAD> = 16;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DELTAINENTRY_OVERHEAD> = 32;

        $i11 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: int ARRAYLIST_OVERHEAD_32>;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int ARRAYLIST_OVERHEAD> = $i11;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int TUPLE_OUTPUT_OVERHEAD> = 24;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DOS_WEAK_BINREF_OVERHEAD> = 48;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DOS_OFFHEAP_BINREF_OVERHEAD> = 32;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DOS_DEFERRED_LSN_BATCH_OVERHEAD> = 88;

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: int DOS_DEFERRED_DELTAREF_OVERHEAD> = 16;

     label21:
        $r6 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(98304L);

        <berkeley.com.sleepycat.je.dbi.MemoryBudget: java.lang.String MIN_MAX_MEMORY_SIZE_STRING> = $r6;

        return;

        catch java.lang.NumberFormatException from label03 to label10 with label11;
    }

    public static int intArraySize(int)
    {
        int arrayLen, $i0, $i1;

        arrayLen := @parameter0: int;

        $i0 = arrayLen * 4;

        $i1 = staticinvoke <berkeley.com.sleepycat.je.dbi.MemoryBudget: int byteArraySize(int)>($i0);

        return $i1;
    }

    public static int objectArraySize(int)
    {
        int arrayLen, $i0, $i1, $i2;

        arrayLen := @parameter0: int;

        $i0 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: int OBJECT_ARRAY_ITEM_OVERHEAD>;

        $i1 = arrayLen * $i0;

        $i2 = staticinvoke <berkeley.com.sleepycat.je.dbi.MemoryBudget: int byteArraySize(int)>($i1);

        return $i2;
    }

    public static int longArraySize(int)
    {
        int arrayLen, $i0, $i1;

        arrayLen := @parameter0: int;

        $i0 = arrayLen * 8;

        $i1 = staticinvoke <berkeley.com.sleepycat.je.dbi.MemoryBudget: int byteArraySize(int)>($i0);

        return $i1;
    }

    public static int byteArraySize(int)
    {
        int arrayLen, size#2, $i0, $i1, $i2, $i3, $i4, $i5;

        arrayLen := @parameter0: int;

        size#2 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: int ARRAY_OVERHEAD>;

        $i0 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: int ARRAY_SIZE_INCLUDED>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(arrayLen);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if arrayLen <= $i0 goto label1;

        $i1 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: int ARRAY_SIZE_INCLUDED>;

        $i2 = arrayLen - $i1;

        $i3 = $i2 + 7;

        $i4 = $i3 / 8;

        $i5 = $i4 * 8;

        size#2 = size#2 + $i5;

     label1:
        return size#2;
    }

    void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl, berkeley.com.sleepycat.je.dbi.EnvironmentImpl, berkeley.com.sleepycat.je.dbi.DbConfigManager) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.dbi.MemoryBudget this, $r6;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl, sharedCacheEnv;
        berkeley.com.sleepycat.je.dbi.DbConfigManager configManager;
        java.util.concurrent.atomic.AtomicLong $r0, $r1, $r2, $r3, $r4, $r5;
        boolean $z0;
        berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals $r7;
        long newMaxMemory#38;
        berkeley.com.sleepycat.je.dbi.MemoryBudget$SharedTotals $r8;
        berkeley.com.sleepycat.je.dbi.MemoryBudget$PrivateTotals $r9;

        this := @this: berkeley.com.sleepycat.je.dbi.MemoryBudget;

        envImpl := @parameter0: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        sharedCacheEnv := @parameter1: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        configManager := @parameter2: berkeley.com.sleepycat.je.dbi.DbConfigManager;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: java.util.concurrent.atomic.AtomicLong treeMemoryUsage> = $r0;

        $r1 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: java.util.concurrent.atomic.AtomicLong dosMemoryUsage> = $r1;

        $r2 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: java.util.concurrent.atomic.AtomicLong txnMemoryUsage> = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: java.util.concurrent.atomic.AtomicLong adminMemoryUsage> = $r3;

        $r4 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: java.util.concurrent.atomic.AtomicLong treeAdminMemoryUsage> = $r4;

        $r5 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r5.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: java.util.concurrent.atomic.AtomicLong lockMemoryUsage> = $r5;

        this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl> = envImpl;

        virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void addConfigObserver(berkeley.com.sleepycat.je.dbi.EnvConfigObserver)>(this);

        $z0 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean getSharedCache()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(sharedCacheEnv);

        if sharedCacheEnv == null goto label1;

        $r6 = virtualinvoke sharedCacheEnv.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.MemoryBudget getMemoryBudget()>();

        $r7 = $r6.<berkeley.com.sleepycat.je.dbi.MemoryBudget: berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals totals>;

        this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals totals> = $r7;

        newMaxMemory#38 = -1L;

        goto label3;

     label1:
        $r8 = new berkeley.com.sleepycat.je.dbi.MemoryBudget$SharedTotals;

        specialinvoke $r8.<berkeley.com.sleepycat.je.dbi.MemoryBudget$SharedTotals: void <init>(berkeley.com.sleepycat.je.dbi.MemoryBudget$1)>(null);

        this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals totals> = $r8;

        newMaxMemory#38 = specialinvoke this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: long calcMaxMemory(berkeley.com.sleepycat.je.dbi.DbConfigManager)>(configManager);

        goto label3;

     label2:
        $r9 = new berkeley.com.sleepycat.je.dbi.MemoryBudget$PrivateTotals;

        specialinvoke $r9.<berkeley.com.sleepycat.je.dbi.MemoryBudget$PrivateTotals: void <init>(berkeley.com.sleepycat.je.dbi.MemoryBudget,berkeley.com.sleepycat.je.dbi.MemoryBudget$1)>(this, null);

        this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals totals> = $r9;

        newMaxMemory#38 = specialinvoke this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: long calcMaxMemory(berkeley.com.sleepycat.je.dbi.DbConfigManager)>(configManager);

     label3:
        virtualinvoke this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: void reset(long,boolean,berkeley.com.sleepycat.je.dbi.DbConfigManager)>(newMaxMemory#38, 1, configManager);

        specialinvoke this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: void checkCompressedOops()>();

        return;
    }

    private long calcMaxMemory(berkeley.com.sleepycat.je.dbi.DbConfigManager)
    {
        berkeley.com.sleepycat.je.dbi.MemoryBudget this;
        berkeley.com.sleepycat.je.dbi.DbConfigManager configManager;
        int maxMemoryPercent;
        berkeley.com.sleepycat.je.config.LongConfigParam $r0, $r3, $r14;
        long newMaxMemory#4, jvmMemory#6, $l4, $l5;
        byte $b0, $b1, $b2, $b3;
        java.lang.IllegalArgumentException $r1, $r12;
        java.lang.StringBuilder $r2, $r5, $r6, $r7, $r8, $r9, $r10, $r13, $r16, $r17, $r18, $r19, $r20;
        java.lang.String $r4, $r11, $r15, $r21;
        berkeley.com.sleepycat.je.config.IntConfigParam $r22;

        this := @this: berkeley.com.sleepycat.je.dbi.MemoryBudget;

        configManager := @parameter0: berkeley.com.sleepycat.je.dbi.DbConfigManager;

        $r0 = <berkeley.com.sleepycat.je.config.EnvironmentParams: berkeley.com.sleepycat.je.config.LongConfigParam MAX_MEMORY>;

        newMaxMemory#4 = virtualinvoke configManager.<berkeley.com.sleepycat.je.dbi.DbConfigManager: long getLong(berkeley.com.sleepycat.je.config.LongConfigParam)>($r0);

        jvmMemory#6 = staticinvoke <berkeley.com.sleepycat.je.utilint.JVMSystemUtils: long getRuntimeMaxMemory()>();

        $b0 = newMaxMemory#4 cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 == 0 goto label2;

        $b1 = jvmMemory#6 cmp newMaxMemory#4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = <berkeley.com.sleepycat.je.config.EnvironmentParams: berkeley.com.sleepycat.je.config.LongConfigParam MAX_MEMORY>;

        $r4 = virtualinvoke $r3.<berkeley.com.sleepycat.je.config.LongConfigParam: java.lang.String getName()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has a value of ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(newMaxMemory#4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but the JVM is only configured for ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(jvmMemory#6);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Consider using je.maxMemoryPercent.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r1;

     label1:
        $b2 = newMaxMemory#4 cmp 98304L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b2);

        if $b2 >= 0 goto label4;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = <berkeley.com.sleepycat.je.config.EnvironmentParams: berkeley.com.sleepycat.je.config.LongConfigParam MAX_MEMORY>;

        $r15 = virtualinvoke $r14.<berkeley.com.sleepycat.je.config.LongConfigParam: java.lang.String getName()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(newMaxMemory#4);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" which is less than the minimum: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(98304L);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r12;

     label2:
        $b3 = jvmMemory#6 cmp 9223372036854775807L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b3);

        if $b3 != 0 goto label3;

        jvmMemory#6 = 67108864L;

     label3:
        $r22 = <berkeley.com.sleepycat.je.config.EnvironmentParams: berkeley.com.sleepycat.je.config.IntConfigParam MAX_MEMORY_PERCENT>;

        maxMemoryPercent = virtualinvoke configManager.<berkeley.com.sleepycat.je.dbi.DbConfigManager: int getInt(berkeley.com.sleepycat.je.config.IntConfigParam)>($r22);

        $l4 = (long) maxMemoryPercent;

        $l5 = $l4 * jvmMemory#6;

        newMaxMemory#4 = $l5 / 100L;

     label4:
        return newMaxMemory#4;
    }

    void reset(long, boolean, berkeley.com.sleepycat.je.dbi.DbConfigManager) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.dbi.MemoryBudget this;
        boolean newEnv, $z0;
        berkeley.com.sleepycat.je.dbi.DbConfigManager configManager, $r7, $r10;
        long oldLogBufferBudget, newCriticalThreshold, newTrackerBudget, newMinTreeMemoryUsage, newMaxMemory#1, $l1, myCachePortion#23, newLogBufferBudget#28, $l3, $l5, startingBufferSize#50, $l6, startingBufferSize#60, $l8, startingBufferSize#69, $l10, $l12, $l13, $l15, $l16, $l17, $l18, $l19, $l20, $l21;
        int numBuffers, logBufferSize, nEnvs#17, $i11, $i14;
        byte $b0, $b2, $b4, $b7, $b9, $b22;
        berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals $r0, $r13, $r14;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r1, $r6, $r9, $r15;
        berkeley.com.sleepycat.je.dbi.DbEnvPool $r2;
        berkeley.com.sleepycat.je.config.LongConfigParam $r3, $r12;
        berkeley.com.sleepycat.je.config.IntConfigParam $r4, $r5, $r8, $r11;
        berkeley.com.sleepycat.je.log.LogManager $r16;

        this := @this: berkeley.com.sleepycat.je.dbi.MemoryBudget;

        newMaxMemory#1 := @parameter0: long;

        newEnv := @parameter1: boolean;

        configManager := @parameter2: berkeley.com.sleepycat.je.dbi.DbConfigManager;

        oldLogBufferBudget = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: long logBufferBudget>;

        $b0 = newMaxMemory#1 cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 >= 0 goto label01;

        newMaxMemory#1 = virtualinvoke this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: long getMaxMemory()>();

        goto label02;

     label01:
        $r0 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals totals>;

        staticinvoke <berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals: void access$200(berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals,long)>($r0, newMaxMemory#1);

     label02:
        $r1 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $z0 = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean getSharedCache()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label04;

        $r2 = staticinvoke <berkeley.com.sleepycat.je.dbi.DbEnvPool: berkeley.com.sleepycat.je.dbi.DbEnvPool getInstance()>();

        nEnvs#17 = virtualinvoke $r2.<berkeley.com.sleepycat.je.dbi.DbEnvPool: int getNSharedCacheEnvironments()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(newEnv);

        if newEnv == 0 goto label03;

        nEnvs#17 = nEnvs#17 + 1;

     label03:
        $l1 = (long) nEnvs#17;

        myCachePortion#23 = newMaxMemory#1 / $l1;

        goto label05;

     label04:
        myCachePortion#23 = newMaxMemory#1;

     label05:
        $r3 = <berkeley.com.sleepycat.je.config.EnvironmentParams: berkeley.com.sleepycat.je.config.LongConfigParam LOG_MEM_SIZE>;

        newLogBufferBudget#28 = virtualinvoke configManager.<berkeley.com.sleepycat.je.dbi.DbConfigManager: long getLong(berkeley.com.sleepycat.je.config.LongConfigParam)>($r3);

        $b2 = newLogBufferBudget#28 cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b2);

        if $b2 != 0 goto label06;

        newLogBufferBudget#28 = myCachePortion#23 >> 4;

        goto label07;

     label06:
        $l3 = myCachePortion#23 / 2L;

        $b4 = newLogBufferBudget#28 cmp $l3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b4);

        if $b4 <= 0 goto label07;

        newLogBufferBudget#28 = myCachePortion#23 / 2L;

     label07:
        $r4 = <berkeley.com.sleepycat.je.config.EnvironmentParams: berkeley.com.sleepycat.je.config.IntConfigParam NUM_LOG_BUFFERS>;

        numBuffers = virtualinvoke configManager.<berkeley.com.sleepycat.je.dbi.DbConfigManager: int getInt(berkeley.com.sleepycat.je.config.IntConfigParam)>($r4);

        $l5 = (long) numBuffers;

        startingBufferSize#50 = newLogBufferBudget#28 / $l5;

        $r5 = <berkeley.com.sleepycat.je.config.EnvironmentParams: berkeley.com.sleepycat.je.config.IntConfigParam LOG_BUFFER_MAX_SIZE>;

        logBufferSize = virtualinvoke configManager.<berkeley.com.sleepycat.je.dbi.DbConfigManager: int getInt(berkeley.com.sleepycat.je.config.IntConfigParam)>($r5);

        $l6 = (long) logBufferSize;

        $b7 = startingBufferSize#50 cmp $l6;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b7);

        if $b7 <= 0 goto label08;

        startingBufferSize#60 = (long) logBufferSize;

        $l8 = (long) numBuffers;

        newLogBufferBudget#28 = $l8 * startingBufferSize#60;

        goto label09;

     label08:
        $b9 = startingBufferSize#50 cmp 2048L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b9);

        if $b9 >= 0 goto label09;

        startingBufferSize#69 = 2048L;

        $l10 = (long) numBuffers;

        newLogBufferBudget#28 = $l10 * startingBufferSize#69;

     label09:
        $r6 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r7 = virtualinvoke $r6.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.DbConfigManager getConfigManager()>();

        $r8 = <berkeley.com.sleepycat.je.config.EnvironmentParams: berkeley.com.sleepycat.je.config.IntConfigParam EVICTOR_CRITICAL_PERCENTAGE>;

        $i11 = virtualinvoke $r7.<berkeley.com.sleepycat.je.dbi.DbConfigManager: int getInt(berkeley.com.sleepycat.je.config.IntConfigParam)>($r8);

        $l12 = (long) $i11;

        $l13 = newMaxMemory#1 * $l12;

        newCriticalThreshold = $l13 / 100L;

        $r9 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r10 = virtualinvoke $r9.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.DbConfigManager getConfigManager()>();

        $r11 = <berkeley.com.sleepycat.je.config.EnvironmentParams: berkeley.com.sleepycat.je.config.IntConfigParam CLEANER_DETAIL_MAX_MEMORY_PERCENTAGE>;

        $i14 = virtualinvoke $r10.<berkeley.com.sleepycat.je.dbi.DbConfigManager: int getInt(berkeley.com.sleepycat.je.config.IntConfigParam)>($r11);

        $l15 = (long) $i14;

        $l16 = myCachePortion#23 * $l15;

        newTrackerBudget = $l16 / 100L;

        $r12 = <berkeley.com.sleepycat.je.config.EnvironmentParams: berkeley.com.sleepycat.je.config.LongConfigParam MIN_TREE_MEMORY>;

        $l17 = virtualinvoke configManager.<berkeley.com.sleepycat.je.dbi.DbConfigManager: long getLong(berkeley.com.sleepycat.je.config.LongConfigParam)>($r12);

        $l18 = myCachePortion#23 - newLogBufferBudget#28;

        newMinTreeMemoryUsage = staticinvoke <java.lang.Math: long min(long,long)>($l17, $l18);

        this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: long logBufferBudget> = newLogBufferBudget#28;

        $r13 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals totals>;

        staticinvoke <berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals: void access$300(berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals,long)>($r13, newCriticalThreshold);

        this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: long trackerBudget> = newTrackerBudget;

        this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: long minTreeMemoryUsage> = newMinTreeMemoryUsage;

        $r14 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals totals>;

        $l19 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: long logBufferBudget>;

        $l20 = $l19 - oldLogBufferBudget;

        virtualinvoke $r14.<berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals: boolean updateCacheUsage(long)>($l20);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(newEnv);

        if newEnv != 0 goto label10;

        $l21 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: long logBufferBudget>;

        $b22 = oldLogBufferBudget cmp $l21;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b22);

        if $b22 == 0 goto label10;

        $r15 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r16 = virtualinvoke $r15.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.log.LogManager getLogManager()>();

        virtualinvoke $r16.<berkeley.com.sleepycat.je.log.LogManager: void resetPool(berkeley.com.sleepycat.je.dbi.DbConfigManager)>(configManager);

     label10:
        return;
    }

    private void checkCompressedOops()
    {
        berkeley.com.sleepycat.je.dbi.MemoryBudget this;
        boolean $z0, $z1, $z2;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0, $r2;
        java.util.logging.Logger $r1;

        this := @this: berkeley.com.sleepycat.je.dbi.MemoryBudget;

        $z0 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: boolean COMPRESSED_OOPS_REQUESTED>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $z1 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: boolean COMPRESSED_OOPS_KNOWN>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label1;

        $z2 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: boolean COMPRESSED_OOPS_KNOWN_ON>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label1;

        $r0 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: java.util.logging.Logger getLogger()>();

        $r2 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: void severe(java.util.logging.Logger,berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String)>($r1, $r2, "-XX:+UseCompressedOops was specified but is not in effect, probably because the heap size is too large for this JVM option on this platform.  This is likely to cause an OutOfMemoryError!");

     label1:
        return;
    }

    public long getMaxMemory()
    {
        berkeley.com.sleepycat.je.dbi.MemoryBudget this;
        berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals $r0;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.dbi.MemoryBudget;

        $r0 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals totals>;

        $l0 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals: long getMaxMemory()>();

        return $l0;
    }

    berkeley.com.sleepycat.je.utilint.StatGroup loadStats()
    {
        berkeley.com.sleepycat.je.dbi.MemoryBudget this;
        berkeley.com.sleepycat.je.utilint.StatGroup stats, $r0;
        berkeley.com.sleepycat.je.utilint.LongStat $r1, $r6, $r8, $r12, $r15, $r18, $r21;
        berkeley.com.sleepycat.je.utilint.StatDefinition $r3, $r7, $r9, $r13, $r16, $r19, $r22;
        berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals $r4, $r5;
        boolean $z0;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8;
        java.util.concurrent.atomic.AtomicLong $r10, $r11, $r14, $r17, $r20;

        this := @this: berkeley.com.sleepycat.je.dbi.MemoryBudget;

        $r0 = new berkeley.com.sleepycat.je.utilint.StatGroup;

        specialinvoke $r0.<berkeley.com.sleepycat.je.utilint.StatGroup: void <init>(java.lang.String,java.lang.String)>("Cache Layout", "Allocation of resources in the cache.");

        stats = $r0;

        $r1 = new berkeley.com.sleepycat.je.utilint.LongStat;

        $r3 = <berkeley.com.sleepycat.je.dbi.DbiStatDefinition: berkeley.com.sleepycat.je.utilint.StatDefinition MB_SHARED_CACHE_TOTAL_BYTES>;

        $r4 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals totals>;

        $z0 = virtualinvoke $r4.<berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals: boolean isSharedCache()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r5 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals totals>;

        $l0 = virtualinvoke $r5.<berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals: long getCacheUsage()>();

        goto label2;

     label1:
        $l0 = 0L;

     label2:
        specialinvoke $r1.<berkeley.com.sleepycat.je.utilint.LongStat: void <init>(berkeley.com.sleepycat.je.utilint.StatGroup,berkeley.com.sleepycat.je.utilint.StatDefinition,long)>(stats, $r3, $l0);

        $r6 = new berkeley.com.sleepycat.je.utilint.LongStat;

        $r7 = <berkeley.com.sleepycat.je.dbi.DbiStatDefinition: berkeley.com.sleepycat.je.utilint.StatDefinition MB_TOTAL_BYTES>;

        $l1 = virtualinvoke this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: long getLocalCacheUsage()>();

        specialinvoke $r6.<berkeley.com.sleepycat.je.utilint.LongStat: void <init>(berkeley.com.sleepycat.je.utilint.StatGroup,berkeley.com.sleepycat.je.utilint.StatDefinition,long)>(stats, $r7, $l1);

        $r8 = new berkeley.com.sleepycat.je.utilint.LongStat;

        $r9 = <berkeley.com.sleepycat.je.dbi.DbiStatDefinition: berkeley.com.sleepycat.je.utilint.StatDefinition MB_DATA_BYTES>;

        $r10 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: java.util.concurrent.atomic.AtomicLong treeMemoryUsage>;

        $l2 = virtualinvoke $r10.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $r11 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: java.util.concurrent.atomic.AtomicLong treeAdminMemoryUsage>;

        $l3 = virtualinvoke $r11.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $l4 = $l2 + $l3;

        specialinvoke $r8.<berkeley.com.sleepycat.je.utilint.LongStat: void <init>(berkeley.com.sleepycat.je.utilint.StatGroup,berkeley.com.sleepycat.je.utilint.StatDefinition,long)>(stats, $r9, $l4);

        $r12 = new berkeley.com.sleepycat.je.utilint.LongStat;

        $r13 = <berkeley.com.sleepycat.je.dbi.DbiStatDefinition: berkeley.com.sleepycat.je.utilint.StatDefinition MB_DATA_ADMIN_BYTES>;

        $r14 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: java.util.concurrent.atomic.AtomicLong treeAdminMemoryUsage>;

        $l5 = virtualinvoke $r14.<java.util.concurrent.atomic.AtomicLong: long get()>();

        specialinvoke $r12.<berkeley.com.sleepycat.je.utilint.LongStat: void <init>(berkeley.com.sleepycat.je.utilint.StatGroup,berkeley.com.sleepycat.je.utilint.StatDefinition,long)>(stats, $r13, $l5);

        $r15 = new berkeley.com.sleepycat.je.utilint.LongStat;

        $r16 = <berkeley.com.sleepycat.je.dbi.DbiStatDefinition: berkeley.com.sleepycat.je.utilint.StatDefinition MB_DOS_BYTES>;

        $r17 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: java.util.concurrent.atomic.AtomicLong dosMemoryUsage>;

        $l6 = virtualinvoke $r17.<java.util.concurrent.atomic.AtomicLong: long get()>();

        specialinvoke $r15.<berkeley.com.sleepycat.je.utilint.LongStat: void <init>(berkeley.com.sleepycat.je.utilint.StatGroup,berkeley.com.sleepycat.je.utilint.StatDefinition,long)>(stats, $r16, $l6);

        $r18 = new berkeley.com.sleepycat.je.utilint.LongStat;

        $r19 = <berkeley.com.sleepycat.je.dbi.DbiStatDefinition: berkeley.com.sleepycat.je.utilint.StatDefinition MB_ADMIN_BYTES>;

        $r20 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: java.util.concurrent.atomic.AtomicLong adminMemoryUsage>;

        $l7 = virtualinvoke $r20.<java.util.concurrent.atomic.AtomicLong: long get()>();

        specialinvoke $r18.<berkeley.com.sleepycat.je.utilint.LongStat: void <init>(berkeley.com.sleepycat.je.utilint.StatGroup,berkeley.com.sleepycat.je.utilint.StatDefinition,long)>(stats, $r19, $l7);

        $r21 = new berkeley.com.sleepycat.je.utilint.LongStat;

        $r22 = <berkeley.com.sleepycat.je.dbi.DbiStatDefinition: berkeley.com.sleepycat.je.utilint.StatDefinition MB_LOCK_BYTES>;

        $l8 = virtualinvoke this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: long getLockMemoryUsage()>();

        specialinvoke $r21.<berkeley.com.sleepycat.je.utilint.LongStat: void <init>(berkeley.com.sleepycat.je.utilint.StatGroup,berkeley.com.sleepycat.je.utilint.StatDefinition,long)>(stats, $r22, $l8);

        return stats;
    }

    public long getLocalCacheUsage()
    {
        berkeley.com.sleepycat.je.dbi.MemoryBudget this;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10;
        java.util.concurrent.atomic.AtomicLong $r0, $r1, $r2, $r3;

        this := @this: berkeley.com.sleepycat.je.dbi.MemoryBudget;

        $l0 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: long logBufferBudget>;

        $r0 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: java.util.concurrent.atomic.AtomicLong treeMemoryUsage>;

        $l1 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $l2 = $l0 + $l1;

        $r1 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: java.util.concurrent.atomic.AtomicLong dosMemoryUsage>;

        $l3 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $l4 = $l2 + $l3;

        $r2 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: java.util.concurrent.atomic.AtomicLong adminMemoryUsage>;

        $l5 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $l6 = $l4 + $l5;

        $r3 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: java.util.concurrent.atomic.AtomicLong treeAdminMemoryUsage>;

        $l7 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $l8 = $l6 + $l7;

        $l9 = virtualinvoke this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: long getLockMemoryUsage()>();

        $l10 = $l8 + $l9;

        return $l10;
    }

    public long getLockMemoryUsage()
    {
        berkeley.com.sleepycat.je.dbi.MemoryBudget this;
        long accLockMemoryUsage, $l0, $l1;
        java.util.concurrent.atomic.AtomicLong $r0, $r1;

        this := @this: berkeley.com.sleepycat.je.dbi.MemoryBudget;

        $r0 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: java.util.concurrent.atomic.AtomicLong txnMemoryUsage>;

        $l0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $r1 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: java.util.concurrent.atomic.AtomicLong lockMemoryUsage>;

        $l1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        accLockMemoryUsage = $l0 + $l1;

        return accLockMemoryUsage;
    }

    void initCacheMemoryUsage(long)
    {
        berkeley.com.sleepycat.je.dbi.MemoryBudget this;
        long dbTreeAdminMemory, totalTree#2, treeAdmin#4, $l0, $l1, $l2;
        java.util.Iterator l7;
        berkeley.com.sleepycat.je.tree.IN in;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0;
        berkeley.com.sleepycat.je.dbi.INList $r1;
        boolean $z0;
        java.lang.Object $r2;

        this := @this: berkeley.com.sleepycat.je.dbi.MemoryBudget;

        dbTreeAdminMemory := @parameter0: long;

        totalTree#2 = 0L;

        treeAdmin#4 = 0L;

        $r0 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.INList getInMemoryINs()>();

        l7 = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.INList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l7.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke l7.<java.util.Iterator: java.lang.Object next()>();

        in = (berkeley.com.sleepycat.je.tree.IN) $r2;

        $l0 = virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: long getBudgetedMemorySize()>();

        totalTree#2 = totalTree#2 + $l0;

        $l1 = virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: long getTreeAdminMemorySize()>();

        treeAdmin#4 = treeAdmin#4 + $l1;

        goto label1;

     label2:
        virtualinvoke this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: void refreshTreeMemoryUsage(long)>(totalTree#2);

        $l2 = treeAdmin#4 + dbTreeAdminMemory;

        virtualinvoke this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: void refreshTreeAdminMemoryUsage(long)>($l2);

        return;
    }

    void refreshTreeMemoryUsage(long)
    {
        berkeley.com.sleepycat.je.dbi.MemoryBudget this;
        long newSize, oldSize, diff;
        java.util.concurrent.atomic.AtomicLong $r0;
        berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals $r1;
        boolean $z0;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r2;

        this := @this: berkeley.com.sleepycat.je.dbi.MemoryBudget;

        newSize := @parameter0: long;

        $r0 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: java.util.concurrent.atomic.AtomicLong treeMemoryUsage>;

        oldSize = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: long getAndSet(long)>(newSize);

        diff = newSize - oldSize;

        $r1 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals totals>;

        $z0 = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals: boolean updateCacheUsage(long)>(diff);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r2 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r2.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void alertEvictor()>();

     label1:
        return;
    }

    void refreshTreeAdminMemoryUsage(long)
    {
        berkeley.com.sleepycat.je.dbi.MemoryBudget this;
        long newSize, oldSize, diff;
        java.util.concurrent.atomic.AtomicLong $r0;
        boolean $z0, $z1;
        java.io.PrintStream $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals $r6;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r7;

        this := @this: berkeley.com.sleepycat.je.dbi.MemoryBudget;

        newSize := @parameter0: long;

        $r0 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: java.util.concurrent.atomic.AtomicLong treeAdminMemoryUsage>;

        oldSize = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: long getAndSet(long)>(newSize);

        diff = newSize - oldSize;

        $z0 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: boolean DEBUG_TREEADMIN>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RESET = ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(newSize);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r5);

     label1:
        $r6 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals totals>;

        $z1 = virtualinvoke $r6.<berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals: boolean updateCacheUsage(long)>(diff);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        $r7 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r7.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void alertEvictor()>();

     label2:
        return;
    }

    public static int shortArraySize(int)
    {
        int arrayLen, $i0, $i1;

        arrayLen := @parameter0: int;

        $i0 = arrayLen * 2;

        $i1 = staticinvoke <berkeley.com.sleepycat.je.dbi.MemoryBudget: int byteArraySize(int)>($i0);

        return $i1;
    }

    public void updateTreeMemoryUsage(long)
    {
        berkeley.com.sleepycat.je.dbi.MemoryBudget this;
        long increment;
        boolean $z0;
        java.util.concurrent.atomic.AtomicLong $r0;

        this := @this: berkeley.com.sleepycat.je.dbi.MemoryBudget;

        increment := @parameter0: long;

        $r0 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: java.util.concurrent.atomic.AtomicLong treeMemoryUsage>;

        $z0 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: boolean DEBUG_TREE>;

        specialinvoke this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: void updateCounter(long,java.util.concurrent.atomic.AtomicLong,java.lang.String,boolean)>(increment, $r0, "tree", $z0);

        return;
    }

    private void updateCounter(long, java.util.concurrent.atomic.AtomicLong, java.lang.String, boolean)
    {
        berkeley.com.sleepycat.je.dbi.MemoryBudget this;
        long increment, newSize;
        java.util.concurrent.atomic.AtomicLong counter;
        java.lang.String debugName, $r1, $r10, $r19;
        boolean debug, $z0, $z1, $z2;
        byte $b0, $b1;
        java.lang.AssertionError $r0;
        java.io.PrintStream $r2, $r11;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals $r20;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r21;

        this := @this: berkeley.com.sleepycat.je.dbi.MemoryBudget;

        increment := @parameter0: long;

        counter := @parameter1: java.util.concurrent.atomic.AtomicLong;

        debugName := @parameter2: java.lang.String;

        debug := @parameter3: boolean;

        $b0 = increment cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 == 0 goto label4;

        newSize = virtualinvoke counter.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(increment);

        $z0 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = specialinvoke this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: boolean sizeNotNegative(long)>(newSize);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        $r1 = specialinvoke this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: java.lang.String makeErrorMessage(java.lang.String,long,long)>(debugName, newSize, increment);

        specialinvoke $r0.<java.lang.AssertionError: void <init>(java.lang.Object)>($r1);

        throw $r0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(debug);

        if debug == 0 goto label3;

        $b1 = increment cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 <= 0 goto label2;

        $r2 = <java.lang.System: java.io.PrintStream err>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("INC-------- =");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(increment);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(debugName);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(newSize);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r10);

        goto label3;

     label2:
        $r11 = <java.lang.System: java.io.PrintStream err>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-------DEC=");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(increment);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(debugName);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(newSize);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r19);

     label3:
        $r20 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals totals>;

        $z2 = virtualinvoke $r20.<berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals: boolean updateCacheUsage(long)>(increment);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label4;

        $r21 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r21.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void alertEvictor()>();

     label4:
        return;
    }

    private boolean sizeNotNegative(long)
    {
        berkeley.com.sleepycat.je.dbi.MemoryBudget this;
        long newSize;
        boolean $z0, $z1;
        byte $b0;

        this := @this: berkeley.com.sleepycat.je.dbi.MemoryBudget;

        newSize := @parameter0: long;

        $z0 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: boolean CLEANUP_DONE>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        $b0 = newSize cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        return 1;
    }

    private java.lang.String makeErrorMessage(java.lang.String, long, long)
    {
        berkeley.com.sleepycat.je.dbi.MemoryBudget this;
        java.lang.String memoryType, $r8, $r10;
        long total, increment;
        java.lang.StringBuilder $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r9;
        java.lang.Throwable $r7;

        this := @this: berkeley.com.sleepycat.je.dbi.MemoryBudget;

        memoryType := @parameter0: java.lang.String;

        total := @parameter1: long;

        increment := @parameter2: long;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(memoryType);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(total);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" increment=");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(increment);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r7 = new java.lang.Throwable;

        specialinvoke $r7.<java.lang.Throwable: void <init>()>();

        $r8 = staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: java.lang.String getStackTrace(java.lang.Throwable)>($r7);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public boolean isTreeUsageAboveMinimum()
    {
        berkeley.com.sleepycat.je.dbi.MemoryBudget this;
        java.util.concurrent.atomic.AtomicLong $r0;
        long $l0, $l1;
        byte $b2;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.dbi.MemoryBudget;

        $r0 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: java.util.concurrent.atomic.AtomicLong treeMemoryUsage>;

        $l0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $l1 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: long minTreeMemoryUsage>;

        $b2 = $l0 cmp $l1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b2);

        if $b2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void updateAdminMemoryUsage(long)
    {
        berkeley.com.sleepycat.je.dbi.MemoryBudget this;
        long increment;
        boolean $z0;
        java.util.concurrent.atomic.AtomicLong $r0;

        this := @this: berkeley.com.sleepycat.je.dbi.MemoryBudget;

        increment := @parameter0: long;

        $r0 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: java.util.concurrent.atomic.AtomicLong adminMemoryUsage>;

        $z0 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: boolean DEBUG_ADMIN>;

        specialinvoke this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: void updateCounter(long,java.util.concurrent.atomic.AtomicLong,java.lang.String,boolean)>(increment, $r0, "admin", $z0);

        return;
    }

    public long getTrackerBudget()
    {
        berkeley.com.sleepycat.je.dbi.MemoryBudget this;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.dbi.MemoryBudget;

        $l0 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: long trackerBudget>;

        return $l0;
    }

    public void updateLockMemoryUsage(long, int)
    {
        berkeley.com.sleepycat.je.dbi.MemoryBudget this;
        long increment, $l2, $l4, $l6, $l7;
        int lockTableIndex;
        byte $b0, $b3, $b5;
        java.util.concurrent.atomic.AtomicLong $r0, $r1, $r3, $r12, $r22;
        boolean $z0, $z1, $z2;
        java.lang.AssertionError $r2;
        java.lang.String $r4, $r14, $r24;
        java.io.PrintStream $r5, $r15;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r11, $r13, $r16, $r17, $r18, $r19, $r20, $r21, $r23;
        berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals $r25;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r26;

        this := @this: berkeley.com.sleepycat.je.dbi.MemoryBudget;

        increment := @parameter0: long;

        lockTableIndex := @parameter1: int;

        $b0 = increment cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 == 0 goto label4;

        $r0 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: java.util.concurrent.atomic.AtomicLong lockMemoryUsage>;

        virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(increment);

        $z0 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r1 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: java.util.concurrent.atomic.AtomicLong lockMemoryUsage>;

        $l2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $b3 = $l2 cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b3);

        if $b3 >= 0 goto label1;

        $r2 = new java.lang.AssertionError;

        $r3 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: java.util.concurrent.atomic.AtomicLong lockMemoryUsage>;

        $l4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $r4 = specialinvoke this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: java.lang.String makeErrorMessage(java.lang.String,long,long)>("lockMem", $l4, increment);

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r4);

        throw $r2;

     label1:
        $z1 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: boolean DEBUG_LOCK>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label3;

        $b5 = increment cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b5);

        if $b5 <= 0 goto label2;

        $r5 = <java.lang.System: java.io.PrintStream err>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("INC-------- =");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(increment);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lock[");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(lockTableIndex);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

        $r12 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: java.util.concurrent.atomic.AtomicLong lockMemoryUsage>;

        $l6 = virtualinvoke $r12.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l6);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r14);

        goto label3;

     label2:
        $r15 = <java.lang.System: java.io.PrintStream err>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-------DEC=");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(increment);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lock[");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(lockTableIndex);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

        $r22 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: java.util.concurrent.atomic.AtomicLong lockMemoryUsage>;

        $l7 = virtualinvoke $r22.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l7);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r24);

     label3:
        $r25 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals totals>;

        $z2 = virtualinvoke $r25.<berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals: boolean updateCacheUsage(long)>(increment);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label4;

        $r26 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r26.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void alertEvictor()>();

     label4:
        return;
    }

    public static int tupleOutputSize(berkeley.com.sleepycat.bind.tuple.TupleOutput)
    {
        berkeley.com.sleepycat.bind.tuple.TupleOutput o;
        int $i0, $i1, $i2, $i3;
        byte[] $r0;

        o := @parameter0: berkeley.com.sleepycat.bind.tuple.TupleOutput;

        $i0 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: int TUPLE_OUTPUT_OVERHEAD>;

        $r0 = virtualinvoke o.<berkeley.com.sleepycat.bind.tuple.TupleOutput: byte[] getBufferBytes()>();

        $i1 = lengthof $r0;

        $i2 = staticinvoke <berkeley.com.sleepycat.je.dbi.MemoryBudget: int byteArraySize(int)>($i1);

        $i3 = $i0 + $i2;

        return $i3;
    }

    public void updateTxnMemoryUsage(long)
    {
        berkeley.com.sleepycat.je.dbi.MemoryBudget this;
        long increment;
        boolean $z0;
        java.util.concurrent.atomic.AtomicLong $r0;

        this := @this: berkeley.com.sleepycat.je.dbi.MemoryBudget;

        increment := @parameter0: long;

        $r0 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: java.util.concurrent.atomic.AtomicLong txnMemoryUsage>;

        $z0 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: boolean DEBUG_TXN>;

        specialinvoke this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: void updateCounter(long,java.util.concurrent.atomic.AtomicLong,java.lang.String,boolean)>(increment, $r0, "txn", $z0);

        return;
    }

    public long getCacheMemoryUsage()
    {
        berkeley.com.sleepycat.je.dbi.MemoryBudget this;
        berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals $r0;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.dbi.MemoryBudget;

        $r0 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals totals>;

        $l0 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals: long getCacheUsage()>();

        return $l0;
    }

    public long getLogBufferBudget()
    {
        berkeley.com.sleepycat.je.dbi.MemoryBudget this;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.dbi.MemoryBudget;

        $l0 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: long logBufferBudget>;

        return $l0;
    }

    public berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals getTotals()
    {
        berkeley.com.sleepycat.je.dbi.MemoryBudget this;
        berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals $r0;

        this := @this: berkeley.com.sleepycat.je.dbi.MemoryBudget;

        $r0 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals totals>;

        return $r0;
    }

    public void updateTreeAdminMemoryUsage(long)
    {
        berkeley.com.sleepycat.je.dbi.MemoryBudget this;
        long increment;
        boolean $z0;
        java.util.concurrent.atomic.AtomicLong $r0;

        this := @this: berkeley.com.sleepycat.je.dbi.MemoryBudget;

        increment := @parameter0: long;

        $r0 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: java.util.concurrent.atomic.AtomicLong treeAdminMemoryUsage>;

        $z0 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: boolean DEBUG_TREEADMIN>;

        specialinvoke this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: void updateCounter(long,java.util.concurrent.atomic.AtomicLong,java.lang.String,boolean)>(increment, $r0, "treeAdmin", $z0);

        return;
    }

    long getVariableCacheUsage()
    {
        berkeley.com.sleepycat.je.dbi.MemoryBudget this;
        java.util.concurrent.atomic.AtomicLong $r0, $r1, $r2, $r3;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8;

        this := @this: berkeley.com.sleepycat.je.dbi.MemoryBudget;

        $r0 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: java.util.concurrent.atomic.AtomicLong treeMemoryUsage>;

        $l0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $r1 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: java.util.concurrent.atomic.AtomicLong dosMemoryUsage>;

        $l1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $l2 = $l0 + $l1;

        $r2 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: java.util.concurrent.atomic.AtomicLong adminMemoryUsage>;

        $l3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $l4 = $l2 + $l3;

        $r3 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: java.util.concurrent.atomic.AtomicLong treeAdminMemoryUsage>;

        $l5 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $l6 = $l4 + $l5;

        $l7 = virtualinvoke this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: long getLockMemoryUsage()>();

        $l8 = $l6 + $l7;

        return $l8;
    }

    void subtractCacheUsage()
    {
        berkeley.com.sleepycat.je.dbi.MemoryBudget this;
        berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals $r0;
        long $l0, $l1;

        this := @this: berkeley.com.sleepycat.je.dbi.MemoryBudget;

        $r0 = this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals totals>;

        $l0 = virtualinvoke this.<berkeley.com.sleepycat.je.dbi.MemoryBudget: long getLocalCacheUsage()>();

        $l1 = 0L - $l0;

        virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.MemoryBudget$Totals: boolean updateCacheUsage(long)>($l1);

        return;
    }


