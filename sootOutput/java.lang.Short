    static void <clinit>()
    {
        java.lang.Class $r0;

        $r0 = staticinvoke <java.lang.Class: java.lang.Class getPrimitiveClass(java.lang.String)>("short");

        <java.lang.Short: java.lang.Class TYPE> = $r0;

        return;
    }

    public static java.lang.Short valueOf(short)
    {
        short l0, l2;
        java.lang.Short[] $r0;
        int $i0;
        java.lang.Short $r1, $r2;

        l0 := @parameter0: short;

        l2 = l0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l2);

        if l2 < -128 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l2);

        if l2 > 127 goto label1;

        $r0 = <java.lang.Short$ShortCache: java.lang.Short[] cache>;

        $i0 = l2 + 128;

        $r1 = $r0[$i0];

        return $r1;

     label1:
        $r2 = new java.lang.Short;

        specialinvoke $r2.<java.lang.Short: void <init>(short)>(l0);

        return $r2;
    }

    public void <init>(short)
    {
        java.lang.Short l0;
        short l1;

        l0 := @this: java.lang.Short;

        l1 := @parameter0: short;

        specialinvoke l0.<java.lang.Number: void <init>()>();

        l0.<java.lang.Short: short value> = l1;

        return;
    }

    public volatile int compareTo(java.lang.Object)
    {
        java.lang.Short l0, $r0;
        java.lang.Object l1;
        int $i0;

        l0 := @this: java.lang.Short;

        l1 := @parameter0: java.lang.Object;

        $r0 = (java.lang.Short) l1;

        $i0 = virtualinvoke l0.<java.lang.Short: int compareTo(java.lang.Short)>($r0);

        return $i0;
    }

    public int compareTo(java.lang.Short)
    {
        java.lang.Short l0, l1;
        short $s0, $s1;
        int $i2;

        l0 := @this: java.lang.Short;

        l1 := @parameter0: java.lang.Short;

        $s0 = l0.<java.lang.Short: short value>;

        $s1 = l1.<java.lang.Short: short value>;

        $i2 = staticinvoke <java.lang.Short: int compare(short,short)>($s0, $s1);

        return $i2;
    }

    public static int compare(short, short)
    {
        short l0, l1;
        int $i0;

        l0 := @parameter0: short;

        l1 := @parameter1: short;

        $i0 = l0 - l1;

        return $i0;
    }


