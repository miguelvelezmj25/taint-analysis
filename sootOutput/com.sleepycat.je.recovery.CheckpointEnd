    public void <init>(java.lang.String, long, long, long, long, long, long, long, long, long, long, boolean)
    {
        com.sleepycat.je.recovery.CheckpointEnd this;
        java.lang.String invoker;
        long checkpointStartLsn, rootLsn, firstActiveLsn, lastLocalNodeId, lastReplicatedNodeId, lastLocalDbId, lastReplicatedDbId, lastLocalTxnId, lastReplicatedTxnId, id, $l0;
        boolean cleanedFilesToDelete;
        java.util.Calendar cal;
        com.sleepycat.je.utilint.Timestamp $r0;
        java.util.Date $r1;
        byte $b1, $b2;

        this := @this: com.sleepycat.je.recovery.CheckpointEnd;

        invoker := @parameter0: java.lang.String;

        checkpointStartLsn := @parameter1: long;

        rootLsn := @parameter2: long;

        firstActiveLsn := @parameter3: long;

        lastLocalNodeId := @parameter4: long;

        lastReplicatedNodeId := @parameter5: long;

        lastLocalDbId := @parameter6: long;

        lastReplicatedDbId := @parameter7: long;

        lastLocalTxnId := @parameter8: long;

        lastReplicatedTxnId := @parameter9: long;

        id := @parameter10: long;

        cleanedFilesToDelete := @parameter11: boolean;

        specialinvoke this.<java.lang.Object: void <init>()>();

        if invoker != null goto label1;

        this.<com.sleepycat.je.recovery.CheckpointEnd: java.lang.String invoker> = "";

        goto label2;

     label1:
        this.<com.sleepycat.je.recovery.CheckpointEnd: java.lang.String invoker> = invoker;

     label2:
        cal = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r0 = new com.sleepycat.je.utilint.Timestamp;

        $r1 = virtualinvoke cal.<java.util.Calendar: java.util.Date getTime()>();

        $l0 = virtualinvoke $r1.<java.util.Date: long getTime()>();

        specialinvoke $r0.<com.sleepycat.je.utilint.Timestamp: void <init>(long)>($l0);

        this.<com.sleepycat.je.recovery.CheckpointEnd: com.sleepycat.je.utilint.Timestamp endTime> = $r0;

        this.<com.sleepycat.je.recovery.CheckpointEnd: long checkpointStartLsn> = checkpointStartLsn;

        this.<com.sleepycat.je.recovery.CheckpointEnd: long rootLsn> = rootLsn;

        $b1 = rootLsn cmp -1L;

        if $b1 != 0 goto label3;

        this.<com.sleepycat.je.recovery.CheckpointEnd: boolean rootLsnExists> = 0;

        goto label4;

     label3:
        this.<com.sleepycat.je.recovery.CheckpointEnd: boolean rootLsnExists> = 1;

     label4:
        $b2 = firstActiveLsn cmp -1L;

        if $b2 != 0 goto label5;

        this.<com.sleepycat.je.recovery.CheckpointEnd: long firstActiveLsn> = checkpointStartLsn;

        goto label6;

     label5:
        this.<com.sleepycat.je.recovery.CheckpointEnd: long firstActiveLsn> = firstActiveLsn;

     label6:
        this.<com.sleepycat.je.recovery.CheckpointEnd: long lastLocalNodeId> = lastLocalNodeId;

        this.<com.sleepycat.je.recovery.CheckpointEnd: long lastReplicatedNodeId> = lastReplicatedNodeId;

        this.<com.sleepycat.je.recovery.CheckpointEnd: long lastLocalDbId> = lastLocalDbId;

        this.<com.sleepycat.je.recovery.CheckpointEnd: long lastReplicatedDbId> = lastReplicatedDbId;

        this.<com.sleepycat.je.recovery.CheckpointEnd: long lastLocalTxnId> = lastLocalTxnId;

        this.<com.sleepycat.je.recovery.CheckpointEnd: long lastReplicatedTxnId> = lastReplicatedTxnId;

        this.<com.sleepycat.je.recovery.CheckpointEnd: long id> = id;

        this.<com.sleepycat.je.recovery.CheckpointEnd: boolean cleanedFilesToDelete> = cleanedFilesToDelete;

        return;
    }

    public void writeToLog(java.nio.ByteBuffer)
    {
        com.sleepycat.je.recovery.CheckpointEnd this;
        java.nio.ByteBuffer logBuffer;
        java.lang.String $r0;
        com.sleepycat.je.utilint.Timestamp $r1;
        long $l0, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11;
        byte flags#11, $b1, $b2;
        boolean $z0, $z1, $z2;

        this := @this: com.sleepycat.je.recovery.CheckpointEnd;

        logBuffer := @parameter0: java.nio.ByteBuffer;

        $r0 = this.<com.sleepycat.je.recovery.CheckpointEnd: java.lang.String invoker>;

        staticinvoke <com.sleepycat.je.log.LogUtils: void writeString(java.nio.ByteBuffer,java.lang.String)>(logBuffer, $r0);

        $r1 = this.<com.sleepycat.je.recovery.CheckpointEnd: com.sleepycat.je.utilint.Timestamp endTime>;

        staticinvoke <com.sleepycat.je.log.LogUtils: void writeTimestamp(java.nio.ByteBuffer,com.sleepycat.je.utilint.Timestamp)>(logBuffer, $r1);

        $l0 = this.<com.sleepycat.je.recovery.CheckpointEnd: long checkpointStartLsn>;

        staticinvoke <com.sleepycat.je.log.LogUtils: void writePackedLong(java.nio.ByteBuffer,long)>(logBuffer, $l0);

        flags#11 = 0;

        $z0 = this.<com.sleepycat.je.recovery.CheckpointEnd: boolean rootLsnExists>;

        if $z0 == 0 goto label1;

        flags#11 = (byte) 1;

     label1:
        $z1 = this.<com.sleepycat.je.recovery.CheckpointEnd: boolean cleanedFilesToDelete>;

        if $z1 == 0 goto label2;

        $b2 = flags#11 | 2;

        flags#11 = (byte) $b2;

     label2:
        virtualinvoke logBuffer.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(flags#11);

        $z2 = this.<com.sleepycat.je.recovery.CheckpointEnd: boolean rootLsnExists>;

        if $z2 == 0 goto label3;

        $l3 = this.<com.sleepycat.je.recovery.CheckpointEnd: long rootLsn>;

        staticinvoke <com.sleepycat.je.log.LogUtils: void writePackedLong(java.nio.ByteBuffer,long)>(logBuffer, $l3);

     label3:
        $l4 = this.<com.sleepycat.je.recovery.CheckpointEnd: long firstActiveLsn>;

        staticinvoke <com.sleepycat.je.log.LogUtils: void writePackedLong(java.nio.ByteBuffer,long)>(logBuffer, $l4);

        $l5 = this.<com.sleepycat.je.recovery.CheckpointEnd: long lastLocalNodeId>;

        staticinvoke <com.sleepycat.je.log.LogUtils: void writePackedLong(java.nio.ByteBuffer,long)>(logBuffer, $l5);

        $l6 = this.<com.sleepycat.je.recovery.CheckpointEnd: long lastReplicatedNodeId>;

        staticinvoke <com.sleepycat.je.log.LogUtils: void writePackedLong(java.nio.ByteBuffer,long)>(logBuffer, $l6);

        $l7 = this.<com.sleepycat.je.recovery.CheckpointEnd: long lastLocalDbId>;

        staticinvoke <com.sleepycat.je.log.LogUtils: void writePackedLong(java.nio.ByteBuffer,long)>(logBuffer, $l7);

        $l8 = this.<com.sleepycat.je.recovery.CheckpointEnd: long lastReplicatedDbId>;

        staticinvoke <com.sleepycat.je.log.LogUtils: void writePackedLong(java.nio.ByteBuffer,long)>(logBuffer, $l8);

        $l9 = this.<com.sleepycat.je.recovery.CheckpointEnd: long lastLocalTxnId>;

        staticinvoke <com.sleepycat.je.log.LogUtils: void writePackedLong(java.nio.ByteBuffer,long)>(logBuffer, $l9);

        $l10 = this.<com.sleepycat.je.recovery.CheckpointEnd: long lastReplicatedTxnId>;

        staticinvoke <com.sleepycat.je.log.LogUtils: void writePackedLong(java.nio.ByteBuffer,long)>(logBuffer, $l10);

        $l11 = this.<com.sleepycat.je.recovery.CheckpointEnd: long id>;

        staticinvoke <com.sleepycat.je.log.LogUtils: void writePackedLong(java.nio.ByteBuffer,long)>(logBuffer, $l11);

        return;
    }

    public int getLogSize()
    {
        com.sleepycat.je.recovery.CheckpointEnd this;
        java.lang.String $r0;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i8, $i9, $i11, $i12, $i14, $i15, $i17, $i18, $i20, $i21, $i23, $i24, $i26, $i27, $i29, size#46, $i31;
        com.sleepycat.je.utilint.Timestamp $r1;
        long $l3, $l7, $l10, $l13, $l16, $l19, $l22, $l25, $l28, $l30;
        boolean $z0;

        this := @this: com.sleepycat.je.recovery.CheckpointEnd;

        $r0 = this.<com.sleepycat.je.recovery.CheckpointEnd: java.lang.String invoker>;

        $i0 = staticinvoke <com.sleepycat.je.log.LogUtils: int getStringLogSize(java.lang.String)>($r0);

        $r1 = this.<com.sleepycat.je.recovery.CheckpointEnd: com.sleepycat.je.utilint.Timestamp endTime>;

        $i1 = staticinvoke <com.sleepycat.je.log.LogUtils: int getTimestampLogSize(com.sleepycat.je.utilint.Timestamp)>($r1);

        $i2 = $i0 + $i1;

        $l3 = this.<com.sleepycat.je.recovery.CheckpointEnd: long checkpointStartLsn>;

        $i4 = staticinvoke <com.sleepycat.je.log.LogUtils: int getPackedLongLogSize(long)>($l3);

        $i5 = $i2 + $i4;

        $i6 = $i5 + 1;

        $l7 = this.<com.sleepycat.je.recovery.CheckpointEnd: long firstActiveLsn>;

        $i8 = staticinvoke <com.sleepycat.je.log.LogUtils: int getPackedLongLogSize(long)>($l7);

        $i9 = $i6 + $i8;

        $l10 = this.<com.sleepycat.je.recovery.CheckpointEnd: long lastLocalNodeId>;

        $i11 = staticinvoke <com.sleepycat.je.log.LogUtils: int getPackedLongLogSize(long)>($l10);

        $i12 = $i9 + $i11;

        $l13 = this.<com.sleepycat.je.recovery.CheckpointEnd: long lastReplicatedNodeId>;

        $i14 = staticinvoke <com.sleepycat.je.log.LogUtils: int getPackedLongLogSize(long)>($l13);

        $i15 = $i12 + $i14;

        $l16 = this.<com.sleepycat.je.recovery.CheckpointEnd: long lastLocalDbId>;

        $i17 = staticinvoke <com.sleepycat.je.log.LogUtils: int getPackedLongLogSize(long)>($l16);

        $i18 = $i15 + $i17;

        $l19 = this.<com.sleepycat.je.recovery.CheckpointEnd: long lastReplicatedDbId>;

        $i20 = staticinvoke <com.sleepycat.je.log.LogUtils: int getPackedLongLogSize(long)>($l19);

        $i21 = $i18 + $i20;

        $l22 = this.<com.sleepycat.je.recovery.CheckpointEnd: long lastLocalTxnId>;

        $i23 = staticinvoke <com.sleepycat.je.log.LogUtils: int getPackedLongLogSize(long)>($l22);

        $i24 = $i21 + $i23;

        $l25 = this.<com.sleepycat.je.recovery.CheckpointEnd: long lastReplicatedTxnId>;

        $i26 = staticinvoke <com.sleepycat.je.log.LogUtils: int getPackedLongLogSize(long)>($l25);

        $i27 = $i24 + $i26;

        $l28 = this.<com.sleepycat.je.recovery.CheckpointEnd: long id>;

        $i29 = staticinvoke <com.sleepycat.je.log.LogUtils: int getPackedLongLogSize(long)>($l28);

        size#46 = $i27 + $i29;

        $z0 = this.<com.sleepycat.je.recovery.CheckpointEnd: boolean rootLsnExists>;

        if $z0 == 0 goto label1;

        $l30 = this.<com.sleepycat.je.recovery.CheckpointEnd: long rootLsn>;

        $i31 = staticinvoke <com.sleepycat.je.log.LogUtils: int getPackedLongLogSize(long)>($l30);

        size#46 = size#46 + $i31;

     label1:
        return size#46;
    }


