    static void <clinit>()
    {
        java.lang.Exception l0, $r16;
        sun.misc.Unsafe $r0, $r1, $r4, $r7, $r10, $r13;
        java.lang.Class $r2, $r5, $r8, $r11, $r14;
        java.lang.reflect.Field $r3, $r6, $r9, $r12, $r15;
        long $l0, $l1, $l2, $l3, $l4;
        java.lang.Error $r17;

        $r0 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.locks.AbstractQueuedSynchronizer: sun.misc.Unsafe unsafe> = $r0;

     label1:
        $r1 = <java.util.concurrent.locks.AbstractQueuedSynchronizer: sun.misc.Unsafe unsafe>;

        $r2 = class "java/util/concurrent/locks/AbstractQueuedSynchronizer";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("state");

        $l0 = virtualinvoke $r1.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r3);

        <java.util.concurrent.locks.AbstractQueuedSynchronizer: long stateOffset> = $l0;

        $r4 = <java.util.concurrent.locks.AbstractQueuedSynchronizer: sun.misc.Unsafe unsafe>;

        $r5 = class "java/util/concurrent/locks/AbstractQueuedSynchronizer";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("head");

        $l1 = virtualinvoke $r4.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r6);

        <java.util.concurrent.locks.AbstractQueuedSynchronizer: long headOffset> = $l1;

        $r7 = <java.util.concurrent.locks.AbstractQueuedSynchronizer: sun.misc.Unsafe unsafe>;

        $r8 = class "java/util/concurrent/locks/AbstractQueuedSynchronizer";

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("tail");

        $l2 = virtualinvoke $r7.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r9);

        <java.util.concurrent.locks.AbstractQueuedSynchronizer: long tailOffset> = $l2;

        $r10 = <java.util.concurrent.locks.AbstractQueuedSynchronizer: sun.misc.Unsafe unsafe>;

        $r11 = class "java/util/concurrent/locks/AbstractQueuedSynchronizer$Node";

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("waitStatus");

        $l3 = virtualinvoke $r10.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r12);

        <java.util.concurrent.locks.AbstractQueuedSynchronizer: long waitStatusOffset> = $l3;

        $r13 = <java.util.concurrent.locks.AbstractQueuedSynchronizer: sun.misc.Unsafe unsafe>;

        $r14 = class "java/util/concurrent/locks/AbstractQueuedSynchronizer$Node";

        $r15 = virtualinvoke $r14.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("next");

        $l4 = virtualinvoke $r13.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r15);

        <java.util.concurrent.locks.AbstractQueuedSynchronizer: long nextOffset> = $l4;

     label2:
        goto label4;

     label3:
        $r16 := @caughtexception;

        l0 = $r16;

        $r17 = new java.lang.Error;

        specialinvoke $r17.<java.lang.Error: void <init>(java.lang.Throwable)>(l0);

        throw $r17;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected void <init>()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer l0;

        l0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        specialinvoke l0.<java.util.concurrent.locks.AbstractOwnableSynchronizer: void <init>()>();

        return;
    }

    protected final void setState(int)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer l0;
        int l1;

        l0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        l1 := @parameter0: int;

        l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer: int state> = l1;

        return;
    }

    public final boolean release(int)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer l0;
        int l1, $i0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node l2;
        boolean $z0;

        l0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        l1 := @parameter0: int;

        $z0 = virtualinvoke l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean tryRelease(int)>(l1);

        if $z0 == 0 goto label2;

        l2 = l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node head>;

        if l2 == null goto label1;

        $i0 = l2.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int waitStatus>;

        if $i0 == 0 goto label1;

        specialinvoke l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer: void unparkSuccessor(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(l2);

     label1:
        return 1;

     label2:
        return 0;
    }

    private void unparkSuccessor(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer l0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node l1, l3#9, l4#16;
        int l2, $i0, $i1;
        java.lang.Thread $r0;

        l0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        l1 := @parameter0: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;

        l2 = l1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int waitStatus>;

        if l2 >= 0 goto label1;

        staticinvoke <java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean compareAndSetWaitStatus(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,int,int)>(l1, l2, 0);

     label1:
        l3#9 = l1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node next>;

        if l3#9 == null goto label2;

        $i0 = l3#9.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int waitStatus>;

        if $i0 <= 0 goto label5;

     label2:
        l3#9 = null;

        l4#16 = l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node tail>;

     label3:
        if l4#16 == null goto label5;

        if l4#16 == l1 goto label5;

        $i1 = l4#16.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int waitStatus>;

        if $i1 > 0 goto label4;

        l3#9 = l4#16;

     label4:
        l4#16 = l4#16.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node prev>;

        goto label3;

     label5:
        if l3#9 == null goto label6;

        $r0 = l3#9.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.lang.Thread thread>;

        staticinvoke <java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>($r0);

     label6:
        return;
    }

    private static final boolean compareAndSetWaitStatus(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node, int, int)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node l0;
        int l1, l2;
        long $l0;
        sun.misc.Unsafe $r0;
        boolean $z0;

        l0 := @parameter0: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;

        l1 := @parameter1: int;

        l2 := @parameter2: int;

        $r0 = <java.util.concurrent.locks.AbstractQueuedSynchronizer: sun.misc.Unsafe unsafe>;

        $l0 = <java.util.concurrent.locks.AbstractQueuedSynchronizer: long waitStatusOffset>;

        $z0 = virtualinvoke $r0.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(l0, $l0, l1, l2);

        return $z0;
    }

    protected final int getState()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer l0;
        int $i0;

        l0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        $i0 = l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer: int state>;

        return $i0;
    }

    protected final boolean compareAndSetState(int, int)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer l0;
        int l1, l2;
        long $l0;
        sun.misc.Unsafe $r0;
        boolean $z0;

        l0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        l1 := @parameter0: int;

        l2 := @parameter1: int;

        $r0 = <java.util.concurrent.locks.AbstractQueuedSynchronizer: sun.misc.Unsafe unsafe>;

        $l0 = <java.util.concurrent.locks.AbstractQueuedSynchronizer: long stateOffset>;

        $z0 = virtualinvoke $r0.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(l0, $l0, l1, l2);

        return $z0;
    }

    public final void acquire(int)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer l0;
        int l1;
        boolean $z0, $z1;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node $r0, $r1;

        l0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        l1 := @parameter0: int;

        $z0 = virtualinvoke l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean tryAcquire(int)>(l1);

        if $z0 != 0 goto label1;

        $r0 = <java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node EXCLUSIVE>;

        $r1 = specialinvoke l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node addWaiter(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>($r0);

        $z1 = virtualinvoke l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean acquireQueued(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,int)>($r1, l1);

        if $z1 == 0 goto label1;

        staticinvoke <java.util.concurrent.locks.AbstractQueuedSynchronizer: void selfInterrupt()>();

     label1:
        return;
    }

    static void selfInterrupt()
    {
        java.lang.Thread $r0;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r0.<java.lang.Thread: void interrupt()>();

        return;
    }

    private java.util.concurrent.locks.AbstractQueuedSynchronizer$Node addWaiter(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer l0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node l1, l2, l3, $r0;
        java.lang.Thread $r1;
        boolean $z0;

        l0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        l1 := @parameter0: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;

        $r0 = new java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        specialinvoke $r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: void <init>(java.lang.Thread,java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>($r1, l1);

        l2 = $r0;

        l3 = l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node tail>;

        if l3 == null goto label1;

        l2.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node prev> = l3;

        $z0 = specialinvoke l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean compareAndSetTail(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(l3, l2);

        if $z0 == 0 goto label1;

        l3.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node next> = l2;

        return l2;

     label1:
        specialinvoke l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node enq(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(l2);

        return l2;
    }

    final boolean acquireQueued(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node, int)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer l0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node l1, l5, $r0;
        int l2;
        boolean l6, l3#2, l4#4, $z0, $z1, $z2;
        java.lang.Throwable l7, $r1;

        l0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        l1 := @parameter0: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;

        l2 := @parameter1: int;

        l3#2 = 1;

     label1:
        l4#4 = 0;

     label2:
        l5 = virtualinvoke l1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node predecessor()>();

        $r0 = l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node head>;

        if l5 != $r0 goto label5;

        $z0 = virtualinvoke l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean tryAcquire(int)>(l2);

        if $z0 == 0 goto label5;

        specialinvoke l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer: void setHead(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(l1);

        l5.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node next> = null;

        l3#2 = 0;

        l6 = l4#4;

     label3:
        if l3#2 == 0 goto label4;

        specialinvoke l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer: void cancelAcquire(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(l1);

     label4:
        return l6;

     label5:
        $z1 = staticinvoke <java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean shouldParkAfterFailedAcquire(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(l5, l1);

        if $z1 == 0 goto label6;

        $z2 = specialinvoke l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean parkAndCheckInterrupt()>();

        if $z2 == 0 goto label6;

        l4#4 = 1;

     label6:
        goto label2;

     label7:
        $r1 := @caughtexception;

        l7 = $r1;

     label8:
        if l3#2 == 0 goto label9;

        specialinvoke l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer: void cancelAcquire(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(l1);

     label9:
        throw l7;

        catch java.lang.Throwable from label1 to label3 with label7;
        catch java.lang.Throwable from label5 to label8 with label7;
    }

    private static boolean shouldParkAfterFailedAcquire(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node, java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node l1, l0#1, $r0;
        int l2, $i0;

        l0#1 := @parameter0: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;

        l1 := @parameter1: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;

        l2 = l0#1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int waitStatus>;

        if l2 != -1 goto label1;

        return 1;

     label1:
        if l2 <= 0 goto label3;

     label2:
        $r0 = l0#1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node prev>;

        l0#1 = $r0;

        l1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node prev> = $r0;

        $i0 = l0#1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int waitStatus>;

        if $i0 > 0 goto label2;

        l0#1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node next> = l1;

        goto label4;

     label3:
        staticinvoke <java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean compareAndSetWaitStatus(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,int,int)>(l0#1, l2, -1);

     label4:
        return 0;
    }

    private void setHead(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer l0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node l1;

        l0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        l1 := @parameter0: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;

        l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node head> = l1;

        l1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.lang.Thread thread> = null;

        l1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node prev> = null;

        return;
    }

    private void cancelAcquire(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer l0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node l1, l3, l5, l2#6, $r0, $r1, $r2;
        int l4, $i0, $i1, $i2;
        boolean $z0, $z2;
        java.lang.Thread $r3;

        l0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        l1 := @parameter0: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;

        if l1 != null goto label1;

        return;

     label1:
        l1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.lang.Thread thread> = null;

        l2#6 = l1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node prev>;

     label2:
        $i0 = l2#6.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int waitStatus>;

        if $i0 <= 0 goto label3;

        $r0 = l2#6.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node prev>;

        l2#6 = $r0;

        l1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node prev> = $r0;

        goto label2;

     label3:
        l3 = l2#6.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node next>;

        l1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int waitStatus> = 1;

        $r1 = l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node tail>;

        if l1 != $r1 goto label4;

        $z0 = specialinvoke l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean compareAndSetTail(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(l1, l2#6);

        if $z0 == 0 goto label4;

        staticinvoke <java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean compareAndSetNext(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(l2#6, l3, null);

        goto label9;

     label4:
        $r2 = l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node head>;

        if l2#6 == $r2 goto label7;

        $i1 = l2#6.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int waitStatus>;

        l4 = $i1;

        if $i1 == -1 goto label5;

        if l4 > 0 goto label7;

        $z2 = staticinvoke <java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean compareAndSetWaitStatus(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,int,int)>(l2#6, l4, -1);

        if $z2 == 0 goto label7;

     label5:
        $r3 = l2#6.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.lang.Thread thread>;

        if $r3 == null goto label7;

        l5 = l1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node next>;

        if l5 == null goto label6;

        $i2 = l5.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int waitStatus>;

        if $i2 > 0 goto label6;

        staticinvoke <java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean compareAndSetNext(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(l2#6, l3, l5);

     label6:
        goto label8;

     label7:
        specialinvoke l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer: void unparkSuccessor(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(l1);

     label8:
        l1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node next> = l1;

     label9:
        return;
    }

    private final boolean parkAndCheckInterrupt()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer l0;
        boolean $z0;

        l0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        staticinvoke <java.util.concurrent.locks.LockSupport: void park(java.lang.Object)>(l0);

        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        return $z0;
    }

    private static final boolean compareAndSetNext(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node, java.util.concurrent.locks.AbstractQueuedSynchronizer$Node, java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node l0, l1, l2;
        long $l0;
        sun.misc.Unsafe $r0;
        boolean $z0;

        l0 := @parameter0: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;

        l1 := @parameter1: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;

        l2 := @parameter2: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;

        $r0 = <java.util.concurrent.locks.AbstractQueuedSynchronizer: sun.misc.Unsafe unsafe>;

        $l0 = <java.util.concurrent.locks.AbstractQueuedSynchronizer: long nextOffset>;

        $z0 = virtualinvoke $r0.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(l0, $l0, l1, l2);

        return $z0;
    }

    private final boolean compareAndSetTail(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node, java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer l0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node l1, l2;
        long $l0;
        sun.misc.Unsafe $r0;
        boolean $z0;

        l0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        l1 := @parameter0: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;

        l2 := @parameter1: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;

        $r0 = <java.util.concurrent.locks.AbstractQueuedSynchronizer: sun.misc.Unsafe unsafe>;

        $l0 = <java.util.concurrent.locks.AbstractQueuedSynchronizer: long tailOffset>;

        $z0 = virtualinvoke $r0.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(l0, $l0, l1, l2);

        return $z0;
    }

    private java.util.concurrent.locks.AbstractQueuedSynchronizer$Node enq(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer l0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node l1, l2, $r0, $r1;
        boolean $z0, $z1;

        l0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        l1 := @parameter0: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;

     label1:
        l2 = l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node tail>;

        if l2 != null goto label2;

        $r0 = new java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;

        specialinvoke $r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: void <init>()>();

        $z0 = specialinvoke l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean compareAndSetHead(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>($r0);

        if $z0 == 0 goto label3;

        $r1 = l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node head>;

        l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node tail> = $r1;

        goto label3;

     label2:
        l1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node prev> = l2;

        $z1 = specialinvoke l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean compareAndSetTail(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(l2, l1);

        if $z1 == 0 goto label3;

        l2.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node next> = l1;

        return l2;

     label3:
        goto label1;
    }

    private final boolean compareAndSetHead(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer l0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node l1;
        long $l0;
        sun.misc.Unsafe $r0;
        boolean $z0;

        l0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        l1 := @parameter0: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;

        $r0 = <java.util.concurrent.locks.AbstractQueuedSynchronizer: sun.misc.Unsafe unsafe>;

        $l0 = <java.util.concurrent.locks.AbstractQueuedSynchronizer: long headOffset>;

        $z0 = virtualinvoke $r0.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(l0, $l0, null, l1);

        return $z0;
    }

    final boolean transferForSignal(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer l0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node l1, l2;
        int l3;
        boolean $z0, $z1;
        java.lang.Thread $r0;

        l0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer;

        l1 := @parameter0: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;

        $z0 = staticinvoke <java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean compareAndSetWaitStatus(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,int,int)>(l1, -2, 0);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        l2 = specialinvoke l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node enq(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>(l1);

        l3 = l2.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int waitStatus>;

        if l3 > 0 goto label2;

        $z1 = staticinvoke <java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean compareAndSetWaitStatus(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,int,int)>(l2, l3, -1);

        if $z1 != 0 goto label3;

     label2:
        $r0 = l1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.lang.Thread thread>;

        staticinvoke <java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>($r0);

     label3:
        return 1;
    }


