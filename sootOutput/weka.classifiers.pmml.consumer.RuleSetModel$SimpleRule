    public void <init>(org.w3c.dom.Element, weka.core.pmml.MiningSchema) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule this;
        org.w3c.dom.Element ruleE, $r17, $r19;
        weka.core.pmml.MiningSchema miningSchema;
        java.lang.String id, recordCount, nbCorrect, confidence, weight, tagName, $r1, $r3, $r4, $r8, $r11, $r13, $r14;
        weka.core.Attribute classAtt, $r16, $r24;
        org.w3c.dom.NodeList scoreChildren;
        org.w3c.dom.Node child;
        weka.classifiers.pmml.consumer.TreeModel$ScoreDistribution newDist, $r18, s#160, s#174;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, baseCount#150, $d13;
        java.util.ArrayList $r0, $r20, $r21, $r22, $r26, $r28;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i#106, $i7, $i9, $i10, $i11;
        weka.core.Instances $r2, $r15, $r23;
        boolean $z0, $z1, $z2, $z4, $z5, $z6;
        java.lang.Exception $r5, $r25;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r12;
        short $s8;
        java.util.Iterator l12#154, l12#168;
        java.lang.Object $r27, $r29;

        this := @this: weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule;

        ruleE := @parameter0: org.w3c.dom.Element;

        miningSchema := @parameter1: weka.core.pmml.MiningSchema;

        specialinvoke this.<weka.classifiers.pmml.consumer.RuleSetModel$Rule: void <init>(org.w3c.dom.Element,weka.core.pmml.MiningSchema)>(ruleE, miningSchema);

        $d0 = staticinvoke <weka.core.Utils: double missingValue()>();

        this.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: double m_score> = $d0;

        $d1 = staticinvoke <weka.core.Utils: double missingValue()>();

        this.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: double m_recordCount> = $d1;

        $d2 = staticinvoke <weka.core.Utils: double missingValue()>();

        this.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: double m_nbCorrect> = $d2;

        $d3 = staticinvoke <weka.core.Utils: double missingValue()>();

        this.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: double m_confidence> = $d3;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        this.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: java.util.ArrayList m_scoreDistributions> = $r0;

        $d4 = staticinvoke <weka.core.Utils: double missingValue()>();

        this.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: double m_weight> = $d4;

        id = interfaceinvoke ruleE.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("id");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(id);

        if id == null goto label01;

        $i0 = virtualinvoke id.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label01;

        this.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: java.lang.String m_ID> = id;

     label01:
        $r1 = interfaceinvoke ruleE.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("score");

        this.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: java.lang.String m_scoreString> = $r1;

        $r2 = virtualinvoke miningSchema.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        classAtt = virtualinvoke $r2.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z0 = virtualinvoke classAtt.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label02;

        $r3 = this.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: java.lang.String m_scoreString>;

        $d5 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r3);

        this.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: double m_score> = $d5;

        goto label04;

     label02:
        $r4 = this.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: java.lang.String m_scoreString>;

        $i1 = virtualinvoke classAtt.<weka.core.Attribute: int indexOfValue(java.lang.String)>($r4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 >= 0 goto label03;

        $r5 = new java.lang.Exception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[SimpleRule] class value ");

        $r8 = this.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: java.lang.String m_scoreString>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("does not exist in class attribute ");

        $r11 = virtualinvoke classAtt.<weka.core.Attribute: java.lang.String name()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.Exception: void <init>(java.lang.String)>($r13);

        throw $r5;

     label03:
        $r14 = this.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: java.lang.String m_scoreString>;

        $i2 = virtualinvoke classAtt.<weka.core.Attribute: int indexOfValue(java.lang.String)>($r14);

        $d6 = (double) $i2;

        this.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: double m_score> = $d6;

     label04:
        recordCount = interfaceinvoke ruleE.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("recordCount");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(recordCount);

        if recordCount == null goto label05;

        $i3 = virtualinvoke recordCount.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 <= 0 goto label05;

        $d7 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(recordCount);

        this.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: double m_recordCount> = $d7;

     label05:
        nbCorrect = interfaceinvoke ruleE.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("nbCorrect");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(nbCorrect);

        if nbCorrect == null goto label06;

        $i4 = virtualinvoke nbCorrect.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 <= 0 goto label06;

        $d8 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(nbCorrect);

        this.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: double m_nbCorrect> = $d8;

     label06:
        confidence = interfaceinvoke ruleE.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("confidence");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(confidence);

        if confidence == null goto label07;

        $i5 = virtualinvoke confidence.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i5 <= 0 goto label07;

        $d9 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(confidence);

        this.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: double m_confidence> = $d9;

     label07:
        weight = interfaceinvoke ruleE.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("weight");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(weight);

        if weight == null goto label08;

        $i6 = virtualinvoke weight.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if $i6 <= 0 goto label08;

        $d10 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(weight);

        this.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: double m_weight> = $d10;

     label08:
        $r15 = virtualinvoke miningSchema.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r16 = virtualinvoke $r15.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z1 = virtualinvoke $r16.<weka.core.Attribute: boolean isNominal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label16;

        scoreChildren = interfaceinvoke ruleE.<org.w3c.dom.Element: org.w3c.dom.NodeList getChildNodes()>();

        i#106 = 0;

     label09:
        $i7 = interfaceinvoke scoreChildren.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#106);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if i#106 >= $i7 goto label11;

        child = interfaceinvoke scoreChildren.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i#106);

        $s8 = interfaceinvoke child.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s8);

        if $s8 != 1 goto label10;

        $r17 = (org.w3c.dom.Element) child;

        tagName = interfaceinvoke $r17.<org.w3c.dom.Element: java.lang.String getTagName()>();

        $z2 = virtualinvoke tagName.<java.lang.String: boolean equals(java.lang.Object)>("ScoreDistribution");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label10;

        $r18 = new weka.classifiers.pmml.consumer.TreeModel$ScoreDistribution;

        $r19 = (org.w3c.dom.Element) child;

        $d11 = this.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: double m_recordCount>;

        specialinvoke $r18.<weka.classifiers.pmml.consumer.TreeModel$ScoreDistribution: void <init>(org.w3c.dom.Element,weka.core.pmml.MiningSchema,double)>($r19, miningSchema, $d11);

        newDist = $r18;

        $r20 = this.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: java.util.ArrayList m_scoreDistributions>;

        virtualinvoke $r20.<java.util.ArrayList: boolean add(java.lang.Object)>(newDist);

     label10:
        i#106 = i#106 + 1;

        goto label09;

     label11:
        $r21 = this.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: java.util.ArrayList m_scoreDistributions>;

        $i9 = virtualinvoke $r21.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        if $i9 <= 0 goto label12;

        $r22 = this.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: java.util.ArrayList m_scoreDistributions>;

        $i10 = virtualinvoke $r22.<java.util.ArrayList: int size()>();

        $r23 = virtualinvoke miningSchema.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r24 = virtualinvoke $r23.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $i11 = virtualinvoke $r24.<weka.core.Attribute: int numValues()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i10);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i11);

        if $i10 == $i11 goto label12;

        $r25 = new java.lang.Exception;

        specialinvoke $r25.<java.lang.Exception: void <init>(java.lang.String)>("[SimpleRule] Number of score distribution elements is  different than the number of class labels!");

        throw $r25;

     label12:
        $d12 = this.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: double m_recordCount>;

        $z4 = staticinvoke <weka.core.Utils: boolean isMissingValue(double)>($d12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label16;

        baseCount#150 = 0.0;

        $r26 = this.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: java.util.ArrayList m_scoreDistributions>;

        l12#154 = virtualinvoke $r26.<java.util.ArrayList: java.util.Iterator iterator()>();

     label13:
        $z5 = interfaceinvoke l12#154.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label14;

        $r27 = interfaceinvoke l12#154.<java.util.Iterator: java.lang.Object next()>();

        s#160 = (weka.classifiers.pmml.consumer.TreeModel$ScoreDistribution) $r27;

        $d13 = virtualinvoke s#160.<weka.classifiers.pmml.consumer.TreeModel$ScoreDistribution: double getRecordCount()>();

        baseCount#150 = baseCount#150 + $d13;

        goto label13;

     label14:
        $r28 = this.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: java.util.ArrayList m_scoreDistributions>;

        l12#168 = virtualinvoke $r28.<java.util.ArrayList: java.util.Iterator iterator()>();

     label15:
        $z6 = interfaceinvoke l12#168.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label16;

        $r29 = interfaceinvoke l12#168.<java.util.Iterator: java.lang.Object next()>();

        s#174 = (weka.classifiers.pmml.consumer.TreeModel$ScoreDistribution) $r29;

        virtualinvoke s#174.<weka.classifiers.pmml.consumer.TreeModel$ScoreDistribution: void deriveConfidenceValue(double)>(baseCount#150);

        goto label15;

     label16:
        return;
    }


