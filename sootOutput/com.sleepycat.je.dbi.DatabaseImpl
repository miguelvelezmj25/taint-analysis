    static void <clinit>()
    {
        java.lang.String forceKeyPrefixingProp, $r1;
        java.lang.Class $r0;
        boolean $z0, $z1, $z2;

        $r0 = class "com/sleepycat/je/dbi/DatabaseImpl";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sleepycat.je.dbi.DatabaseImpl: boolean $assertionsDisabled> = $z1;

        forceKeyPrefixingProp = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("je.forceKeyPrefixing");

        $r1 = "true";

        $z2 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(forceKeyPrefixingProp);

        if $z2 == 0 goto label3;

        <com.sleepycat.je.dbi.DatabaseImpl: boolean forceKeyPrefixing> = 1;

        goto label4;

     label3:
        <com.sleepycat.je.dbi.DatabaseImpl: boolean forceKeyPrefixing> = 0;

     label4:
        return;
    }

    public void <init>(com.sleepycat.je.txn.Locker, java.lang.String, com.sleepycat.je.dbi.DatabaseId, com.sleepycat.je.dbi.EnvironmentImpl, com.sleepycat.je.DatabaseConfig) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        com.sleepycat.je.txn.Locker locker;
        java.lang.String dbName;
        com.sleepycat.je.dbi.DatabaseId id;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        com.sleepycat.je.DatabaseConfig dbConfig;
        java.util.concurrent.atomic.AtomicInteger $r0, $r1;
        byte[] $r2, $r3;
        java.util.concurrent.atomic.AtomicReference $r4;
        byte[][] $r5;
        com.sleepycat.je.CacheMode $r6;
        boolean $z0;
        com.sleepycat.je.tree.Tree $r7;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        locker := @parameter0: com.sleepycat.je.txn.Locker;

        dbName := @parameter1: java.lang.String;

        id := @parameter2: com.sleepycat.je.dbi.DatabaseId;

        envImpl := @parameter3: com.sleepycat.je.dbi.EnvironmentImpl;

        dbConfig := @parameter4: com.sleepycat.je.DatabaseConfig;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.concurrent.atomic.AtomicInteger useCount> = $r0;

        $r1 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.concurrent.atomic.AtomicInteger writeCount> = $r1;

        this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator btreeComparator> = null;

        this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator duplicateComparator> = null;

        $r2 = <com.sleepycat.je.log.LogUtils: byte[] ZERO_LENGTH_BYTE_ARRAY>;

        this.<com.sleepycat.je.dbi.DatabaseImpl: byte[] btreeComparatorBytes> = $r2;

        $r3 = <com.sleepycat.je.log.LogUtils: byte[] ZERO_LENGTH_BYTE_ARRAY>;

        this.<com.sleepycat.je.dbi.DatabaseImpl: byte[] duplicateComparatorBytes> = $r3;

        this.<com.sleepycat.je.dbi.DatabaseImpl: boolean btreeComparatorByClassName> = 0;

        this.<com.sleepycat.je.dbi.DatabaseImpl: boolean duplicateComparatorByClassName> = 0;

        this.<com.sleepycat.je.dbi.DatabaseImpl: boolean btreePartialComparator> = 0;

        this.<com.sleepycat.je.dbi.DatabaseImpl: boolean duplicatePartialComparator> = 0;

        this.<com.sleepycat.je.dbi.DatabaseImpl: boolean btreeBinaryEqualityComparator> = 1;

        this.<com.sleepycat.je.dbi.DatabaseImpl: boolean duplicateBinaryEqualityComparator> = 1;

        this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator keyComparator> = null;

        $r4 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(null);

        this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.concurrent.atomic.AtomicReference triggers> = $r4;

        this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.List transientTriggers> = null;

        $r5 = (byte[][]) null;

        this.<com.sleepycat.je.dbi.DatabaseImpl: byte[][] triggerBytes> = $r5;

        this.<com.sleepycat.je.dbi.DatabaseImpl: boolean knownSecondary> = 0;

        this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.DatabaseId id> = id;

        this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl envImpl> = envImpl;

        virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: void setConfigProperties(com.sleepycat.je.txn.Locker,java.lang.String,com.sleepycat.je.DatabaseConfig,com.sleepycat.je.dbi.EnvironmentImpl)>(locker, dbName, dbConfig, envImpl);

        $r6 = virtualinvoke dbConfig.<com.sleepycat.je.DatabaseConfig: com.sleepycat.je.CacheMode getCacheMode()>();

        this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.CacheMode cacheMode> = $r6;

        this.<com.sleepycat.je.dbi.DatabaseImpl: byte createdAtLogVersion> = 14;

        $z0 = virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: boolean getSortedDuplicates()>();

        if $z0 == 0 goto label1;

        virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: void setDupsConverted()>();

     label1:
        specialinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: void setUtilizationRepairDone()>();

        specialinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: void commonInit()>();

        specialinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: void initWithEnvironment()>();

        $r7 = new com.sleepycat.je.tree.Tree;

        specialinvoke $r7.<com.sleepycat.je.tree.Tree: void <init>(com.sleepycat.je.dbi.DatabaseImpl)>(this);

        this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.tree.Tree tree> = $r7;

        this.<com.sleepycat.je.dbi.DatabaseImpl: java.lang.String debugDatabaseName> = dbName;

        return;
    }

    public void setConfigProperties(com.sleepycat.je.txn.Locker, java.lang.String, com.sleepycat.je.DatabaseConfig, com.sleepycat.je.dbi.EnvironmentImpl)
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        com.sleepycat.je.txn.Locker locker;
        java.lang.String dbName;
        com.sleepycat.je.DatabaseConfig dbConfig;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        java.util.Comparator $r0, $r1;
        boolean $z0, $z2, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        java.util.List $r2;
        int $i0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        locker := @parameter0: com.sleepycat.je.txn.Locker;

        dbName := @parameter1: java.lang.String;

        dbConfig := @parameter2: com.sleepycat.je.DatabaseConfig;

        envImpl := @parameter3: com.sleepycat.je.dbi.EnvironmentImpl;

        $r0 = virtualinvoke dbConfig.<com.sleepycat.je.DatabaseConfig: java.util.Comparator getBtreeComparator()>();

        $z0 = virtualinvoke dbConfig.<com.sleepycat.je.DatabaseConfig: boolean getBtreeComparatorByClassName()>();

        virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: boolean setBtreeComparator(java.util.Comparator,boolean)>($r0, $z0);

        $r1 = virtualinvoke dbConfig.<com.sleepycat.je.DatabaseConfig: java.util.Comparator getDuplicateComparator()>();

        $z2 = virtualinvoke dbConfig.<com.sleepycat.je.DatabaseConfig: boolean getDuplicateComparatorByClassName()>();

        virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: boolean setDuplicateComparator(java.util.Comparator,boolean)>($r1, $z2);

        $r2 = virtualinvoke dbConfig.<com.sleepycat.je.DatabaseConfig: java.util.List getTriggers()>();

        virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: boolean setTriggers(com.sleepycat.je.txn.Locker,java.lang.String,java.util.List,boolean)>(locker, dbName, $r2, 1);

        $z5 = virtualinvoke dbConfig.<com.sleepycat.je.DatabaseConfig: boolean getSortedDuplicates()>();

        if $z5 == 0 goto label1;

        virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: void setSortedDuplicates()>();

     label1:
        $z6 = virtualinvoke dbConfig.<com.sleepycat.je.DatabaseConfig: boolean getKeyPrefixing()>();

        if $z6 != 0 goto label2;

        $z7 = <com.sleepycat.je.dbi.DatabaseImpl: boolean forceKeyPrefixing>;

        if $z7 == 0 goto label3;

     label2:
        virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: void setKeyPrefixing()>();

        goto label4;

     label3:
        virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: void clearKeyPrefixing()>();

     label4:
        $z8 = virtualinvoke dbConfig.<com.sleepycat.je.DatabaseConfig: boolean getTemporary()>();

        if $z8 == 0 goto label5;

        specialinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: void setTemporary()>();

     label5:
        $z9 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: boolean isReplicated()>();

        if $z9 == 0 goto label7;

        $z10 = virtualinvoke dbConfig.<com.sleepycat.je.DatabaseConfig: boolean getReplicated()>();

        if $z10 == 0 goto label6;

        virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: void setIsReplicatedBit()>();

        goto label7;

     label6:
        specialinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: void setNotReplicatedBit()>();

     label7:
        $z11 = virtualinvoke dbConfig.<com.sleepycat.je.DatabaseConfig: boolean getTransactional()>();

        this.<com.sleepycat.je.dbi.DatabaseImpl: boolean transactional> = $z11;

        $z12 = virtualinvoke dbConfig.<com.sleepycat.je.DatabaseConfig: boolean getDeferredWrite()>();

        this.<com.sleepycat.je.dbi.DatabaseImpl: boolean durableDeferredWrite> = $z12;

        $i0 = virtualinvoke dbConfig.<com.sleepycat.je.DatabaseConfig: int getNodeMaxEntries()>();

        this.<com.sleepycat.je.dbi.DatabaseImpl: int maxTreeEntriesPerNode> = $i0;

        return;
    }

    public boolean getSortedDuplicates()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        byte $b0, $b1;
        boolean $z0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $b0 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte flags>;

        $b1 = $b0 & 1;

        if $b1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setDupsConverted()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        byte $b0, $b1, $b2;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $b0 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte flags>;

        $b1 = $b0 | 64;

        $b2 = (byte) $b1;

        this.<com.sleepycat.je.dbi.DatabaseImpl: byte flags> = $b2;

        return;
    }

    private void setUtilizationRepairDone()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        byte $b0, $b1, $b2;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $b0 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte flags>;

        $b1 = $b0 | 32;

        $b2 = (byte) $b1;

        this.<com.sleepycat.je.dbi.DatabaseImpl: byte flags> = $b2;

        return;
    }

    private void commonInit()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        java.util.HashSet $r0;
        java.util.Set $r1;
        com.sleepycat.je.cleaner.DbFileSummaryMap $r2;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        this.<com.sleepycat.je.dbi.DatabaseImpl: short deleteState> = 1;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r1 = staticinvoke <java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>($r0);

        this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Set referringHandles> = $r1;

        $r2 = new com.sleepycat.je.cleaner.DbFileSummaryMap;

        specialinvoke $r2.<com.sleepycat.je.cleaner.DbFileSummaryMap: void <init>(boolean)>(0);

        this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.cleaner.DbFileSummaryMap dbFileSummaries> = $r2;

        return;
    }

    private void initWithEnvironment()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        com.sleepycat.je.dbi.DbConfigManager configMgr;
        com.sleepycat.je.dbi.EnvironmentImpl $r0, $r3, $r7, $r9, $r10, $r13, $r22;
        com.sleepycat.je.dbi.NodeSequence $r1;
        long $l0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        java.lang.AssertionError $r2;
        com.sleepycat.je.config.IntConfigParam $r4, $r5;
        int $i1, $i2, $i3;
        com.sleepycat.je.cleaner.DbFileSummaryMap $r6, $r8;
        com.sleepycat.je.dbi.DatabaseImpl$ComparatorReader $r11, reader#50, $r20, reader#76;
        byte[] $r12, $r21;
        java.lang.ClassLoader $r14, $r23;
        java.util.Comparator $r15, $r16, $r18, $r19, $r24, $r25, $r27, $r28;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r1 = virtualinvoke $r0.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.NodeSequence getNodeSequence()>();

        $l0 = virtualinvoke $r1.<com.sleepycat.je.dbi.NodeSequence: long getNextTransientLsn()>();

        this.<com.sleepycat.je.dbi.DatabaseImpl: long eofLsn> = $l0;

        $z0 = <com.sleepycat.je.dbi.DatabaseImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $z1 = specialinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: boolean replicatedBitSet()>();

        if $z1 == 0 goto label01;

        $z2 = specialinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: boolean notReplicatedBitSet()>();

        if $z2 == 0 goto label01;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>("The replicated AND notReplicated bits should never be set  together");

        throw $r2;

     label01:
        $r3 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        configMgr = virtualinvoke $r3.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.DbConfigManager getConfigManager()>();

        $r4 = <com.sleepycat.je.config.EnvironmentParams: com.sleepycat.je.config.IntConfigParam BIN_DELTA_PERCENT>;

        $i1 = virtualinvoke configMgr.<com.sleepycat.je.dbi.DbConfigManager: int getInt(com.sleepycat.je.config.IntConfigParam)>($r4);

        this.<com.sleepycat.je.dbi.DatabaseImpl: int binDeltaPercent> = $i1;

        $i2 = this.<com.sleepycat.je.dbi.DatabaseImpl: int maxTreeEntriesPerNode>;

        if $i2 != 0 goto label02;

        $r5 = <com.sleepycat.je.config.EnvironmentParams: com.sleepycat.je.config.IntConfigParam NODE_MAX>;

        $i3 = virtualinvoke configMgr.<com.sleepycat.je.dbi.DbConfigManager: int getInt(com.sleepycat.je.config.IntConfigParam)>($r5);

        this.<com.sleepycat.je.dbi.DatabaseImpl: int maxTreeEntriesPerNode> = $i3;

     label02:
        $r6 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.cleaner.DbFileSummaryMap dbFileSummaries>;

        $r7 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r6.<com.sleepycat.je.cleaner.DbFileSummaryMap: void init(com.sleepycat.je.dbi.EnvironmentImpl)>($r7);

        $z3 = virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: boolean getUtilizationRepairDone()>();

        if $z3 != 0 goto label03;

        $r8 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.cleaner.DbFileSummaryMap dbFileSummaries>;

        $r9 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r8.<com.sleepycat.je.cleaner.DbFileSummaryMap: void repair(com.sleepycat.je.dbi.EnvironmentImpl)>($r9);

        virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: void setDirty()>();

        specialinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: void setUtilizationRepairDone()>();

     label03:
        $r10 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $z4 = virtualinvoke $r10.<com.sleepycat.je.dbi.EnvironmentImpl: boolean getNoComparators()>();

        if $z4 != 0 goto label10;

        $r11 = new com.sleepycat.je.dbi.DatabaseImpl$ComparatorReader;

        $r12 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte[] btreeComparatorBytes>;

        $r13 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r14 = virtualinvoke $r13.<com.sleepycat.je.dbi.EnvironmentImpl: java.lang.ClassLoader getClassLoader()>();

        specialinvoke $r11.<com.sleepycat.je.dbi.DatabaseImpl$ComparatorReader: void <init>(byte[],java.lang.String,java.lang.ClassLoader)>($r12, "Btree", $r14);

        reader#50 = $r11;

        $r15 = virtualinvoke reader#50.<com.sleepycat.je.dbi.DatabaseImpl$ComparatorReader: java.util.Comparator getComparator()>();

        this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator btreeComparator> = $r15;

        $z5 = virtualinvoke reader#50.<com.sleepycat.je.dbi.DatabaseImpl$ComparatorReader: boolean isClass()>();

        this.<com.sleepycat.je.dbi.DatabaseImpl: boolean btreeComparatorByClassName> = $z5;

        $r16 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator btreeComparator>;

        $z6 = $r16 instanceof com.sleepycat.je.PartialComparator;

        this.<com.sleepycat.je.dbi.DatabaseImpl: boolean btreePartialComparator> = $z6;

        $r18 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator btreeComparator>;

        if $r18 == null goto label04;

        $r19 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator btreeComparator>;

        $z7 = $r19 instanceof com.sleepycat.je.BinaryEqualityComparator;

        if $z7 == 0 goto label05;

     label04:
        $z8 = 1;

        goto label06;

     label05:
        $z8 = 0;

     label06:
        this.<com.sleepycat.je.dbi.DatabaseImpl: boolean btreeBinaryEqualityComparator> = $z8;

        $r20 = new com.sleepycat.je.dbi.DatabaseImpl$ComparatorReader;

        $r21 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte[] duplicateComparatorBytes>;

        $r22 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r23 = virtualinvoke $r22.<com.sleepycat.je.dbi.EnvironmentImpl: java.lang.ClassLoader getClassLoader()>();

        specialinvoke $r20.<com.sleepycat.je.dbi.DatabaseImpl$ComparatorReader: void <init>(byte[],java.lang.String,java.lang.ClassLoader)>($r21, "Duplicate", $r23);

        reader#76 = $r20;

        $r24 = virtualinvoke reader#76.<com.sleepycat.je.dbi.DatabaseImpl$ComparatorReader: java.util.Comparator getComparator()>();

        this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator duplicateComparator> = $r24;

        $z9 = virtualinvoke reader#76.<com.sleepycat.je.dbi.DatabaseImpl$ComparatorReader: boolean isClass()>();

        this.<com.sleepycat.je.dbi.DatabaseImpl: boolean duplicateComparatorByClassName> = $z9;

        $r25 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator duplicateComparator>;

        $z10 = $r25 instanceof com.sleepycat.je.PartialComparator;

        this.<com.sleepycat.je.dbi.DatabaseImpl: boolean duplicatePartialComparator> = $z10;

        $r27 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator duplicateComparator>;

        if $r27 == null goto label07;

        $r28 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator duplicateComparator>;

        $z11 = $r28 instanceof com.sleepycat.je.BinaryEqualityComparator;

        if $z11 == 0 goto label08;

     label07:
        $z12 = 1;

        goto label09;

     label08:
        $z12 = 0;

     label09:
        this.<com.sleepycat.je.dbi.DatabaseImpl: boolean duplicateBinaryEqualityComparator> = $z12;

        specialinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: void resetKeyComparator()>();

     label10:
        return;
    }

    public static java.util.Comparator instantiateComparator(java.lang.Class, java.lang.String)
    {
        java.lang.Class comparatorClass;
        java.lang.String comparatorType, $r7;
        java.lang.Exception e, $r2;
        java.lang.Object $r0;
        java.util.Comparator $r1;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        com.sleepycat.je.EnvironmentFailureException $r8;

        comparatorClass := @parameter0: java.lang.Class;

        comparatorType := @parameter1: java.lang.String;

        if comparatorClass != null goto label1;

        return null;

     label1:
        $r0 = virtualinvoke comparatorClass.<java.lang.Class: java.lang.Object newInstance()>();

        $r1 = (java.util.Comparator) $r0;

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        e = $r2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception while trying to load ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(comparatorType);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Comparator class.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedException(java.lang.String,java.lang.Exception)>($r7, e);

        throw $r8;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    static java.lang.Object bytesToObject(byte[], java.lang.String, java.lang.ClassLoader)
    {
        byte[] bytes;
        java.lang.String comparatorType, $r7;
        java.lang.ClassLoader loader;
        java.io.ByteArrayInputStream bais, $r0;
        com.sleepycat.util.ClassResolver$Stream ois, $r1;
        java.lang.Exception e, $r3;
        java.lang.Object $r2;
        java.lang.StringBuilder $r4, $r5, $r6;
        com.sleepycat.je.EnvironmentFailureException $r8;

        bytes := @parameter0: byte[];

        comparatorType := @parameter1: java.lang.String;

        loader := @parameter2: java.lang.ClassLoader;

     label1:
        $r0 = new java.io.ByteArrayInputStream;

        specialinvoke $r0.<java.io.ByteArrayInputStream: void <init>(byte[])>(bytes);

        bais = $r0;

        $r1 = new com.sleepycat.util.ClassResolver$Stream;

        specialinvoke $r1.<com.sleepycat.util.ClassResolver$Stream: void <init>(java.io.InputStream,java.lang.ClassLoader)>(bais, loader);

        ois = $r1;

        $r2 = virtualinvoke ois.<com.sleepycat.util.ClassResolver$Stream: java.lang.Object readObject()>();

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        e = $r3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception while trying to load ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(comparatorType);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedException(java.lang.String,java.lang.Exception)>($r7, e);

        throw $r8;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private boolean replicatedBitSet()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        byte $b0, $b1;
        boolean $z0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $b0 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte flags>;

        $b1 = $b0 & 4;

        if $b1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private boolean notReplicatedBitSet()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        byte $b0, $b1;
        boolean $z0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $b0 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte flags>;

        $b1 = $b0 & 8;

        if $b1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean getUtilizationRepairDone()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        byte $b0, $b1;
        boolean $z0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $b0 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte flags>;

        $b1 = $b0 & 32;

        if $b1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setDirty()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        this.<com.sleepycat.je.dbi.DatabaseImpl: boolean dirty> = 1;

        return;
    }

    private void resetKeyComparator()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        java.util.Comparator $r0, $r1, $r5, $r6, $r11, $r12, $r13;
        boolean $z0, $z1, $z2;
        com.sleepycat.je.DatabaseComparator $r2, $r7;
        com.sleepycat.je.dbi.EnvironmentImpl $r3, $r8;
        java.lang.ClassLoader $r4, $r9;
        com.sleepycat.je.dbi.DupKeyData$TwoPartKeyComparator $r10;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator btreeComparator>;

        $z0 = $r0 instanceof com.sleepycat.je.DatabaseComparator;

        if $z0 == 0 goto label1;

        $r1 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator btreeComparator>;

        $r2 = (com.sleepycat.je.DatabaseComparator) $r1;

        $r3 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r4 = virtualinvoke $r3.<com.sleepycat.je.dbi.EnvironmentImpl: java.lang.ClassLoader getClassLoader()>();

        interfaceinvoke $r2.<com.sleepycat.je.DatabaseComparator: void initialize(java.lang.ClassLoader)>($r4);

     label1:
        $r5 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator duplicateComparator>;

        $z1 = $r5 instanceof com.sleepycat.je.DatabaseComparator;

        if $z1 == 0 goto label2;

        $r6 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator duplicateComparator>;

        $r7 = (com.sleepycat.je.DatabaseComparator) $r6;

        $r8 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r9 = virtualinvoke $r8.<com.sleepycat.je.dbi.EnvironmentImpl: java.lang.ClassLoader getClassLoader()>();

        interfaceinvoke $r7.<com.sleepycat.je.DatabaseComparator: void initialize(java.lang.ClassLoader)>($r9);

     label2:
        $z2 = virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: boolean getSortedDuplicates()>();

        if $z2 == 0 goto label3;

        $r10 = new com.sleepycat.je.dbi.DupKeyData$TwoPartKeyComparator;

        $r11 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator btreeComparator>;

        $r12 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator duplicateComparator>;

        specialinvoke $r10.<com.sleepycat.je.dbi.DupKeyData$TwoPartKeyComparator: void <init>(java.util.Comparator,java.util.Comparator)>($r11, $r12);

        this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator keyComparator> = $r10;

        goto label4;

     label3:
        $r13 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator btreeComparator>;

        this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator keyComparator> = $r13;

     label4:
        return;
    }

    public boolean setBtreeComparator(java.util.Comparator, boolean) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        java.util.Comparator comparator, $r1, $r2, $r3, $r5, $r6;
        boolean byClassName, changed, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        byte[] newBytes, $r0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        comparator := @parameter0: java.util.Comparator;

        byClassName := @parameter1: boolean;

        newBytes = staticinvoke <com.sleepycat.je.dbi.DatabaseImpl: byte[] comparatorToBytes(java.util.Comparator,boolean,java.lang.String)>(comparator, byClassName, "Btree");

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte[] btreeComparatorBytes>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(newBytes, $r0);

        if $z0 == 0 goto label1;

        $r1 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator btreeComparator>;

        $z1 = $r1 instanceof com.sleepycat.je.PartialComparator;

        $z2 = comparator instanceof com.sleepycat.je.PartialComparator;

        if $z1 != $z2 goto label1;

        $r2 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator btreeComparator>;

        $z3 = $r2 instanceof com.sleepycat.je.BinaryEqualityComparator;

        $z4 = comparator instanceof com.sleepycat.je.BinaryEqualityComparator;

        if $z3 == $z4 goto label2;

     label1:
        $z5 = 1;

        goto label3;

     label2:
        $z5 = 0;

     label3:
        changed = $z5;

        this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator btreeComparator> = comparator;

        this.<com.sleepycat.je.dbi.DatabaseImpl: byte[] btreeComparatorBytes> = newBytes;

        this.<com.sleepycat.je.dbi.DatabaseImpl: boolean btreeComparatorByClassName> = byClassName;

        $r3 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator btreeComparator>;

        $z6 = $r3 instanceof com.sleepycat.je.PartialComparator;

        this.<com.sleepycat.je.dbi.DatabaseImpl: boolean btreePartialComparator> = $z6;

        $r5 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator btreeComparator>;

        if $r5 == null goto label4;

        $r6 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator btreeComparator>;

        $z7 = $r6 instanceof com.sleepycat.je.BinaryEqualityComparator;

        if $z7 == 0 goto label5;

     label4:
        $z8 = 1;

        goto label6;

     label5:
        $z8 = 0;

     label6:
        this.<com.sleepycat.je.dbi.DatabaseImpl: boolean btreeBinaryEqualityComparator> = $z8;

        if changed == 0 goto label7;

        specialinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: void resetKeyComparator()>();

     label7:
        return changed;
    }

    public boolean setDuplicateComparator(java.util.Comparator, boolean) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        java.util.Comparator comparator, $r1, $r2, $r3, $r5, $r6;
        boolean byClassName, changed, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        byte[] newBytes, $r0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        comparator := @parameter0: java.util.Comparator;

        byClassName := @parameter1: boolean;

        newBytes = staticinvoke <com.sleepycat.je.dbi.DatabaseImpl: byte[] comparatorToBytes(java.util.Comparator,boolean,java.lang.String)>(comparator, byClassName, "Duplicate");

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte[] duplicateComparatorBytes>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(newBytes, $r0);

        if $z0 == 0 goto label1;

        $z1 = comparator instanceof com.sleepycat.je.PartialComparator;

        $r1 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator duplicateComparator>;

        $z2 = $r1 instanceof com.sleepycat.je.PartialComparator;

        if $z1 != $z2 goto label1;

        $z3 = comparator instanceof com.sleepycat.je.BinaryEqualityComparator;

        $r2 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator duplicateComparator>;

        $z4 = $r2 instanceof com.sleepycat.je.BinaryEqualityComparator;

        if $z3 == $z4 goto label2;

     label1:
        $z5 = 1;

        goto label3;

     label2:
        $z5 = 0;

     label3:
        changed = $z5;

        this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator duplicateComparator> = comparator;

        this.<com.sleepycat.je.dbi.DatabaseImpl: byte[] duplicateComparatorBytes> = newBytes;

        this.<com.sleepycat.je.dbi.DatabaseImpl: boolean duplicateComparatorByClassName> = byClassName;

        $r3 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator duplicateComparator>;

        $z6 = $r3 instanceof com.sleepycat.je.PartialComparator;

        this.<com.sleepycat.je.dbi.DatabaseImpl: boolean duplicatePartialComparator> = $z6;

        $r5 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator duplicateComparator>;

        if $r5 == null goto label4;

        $r6 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator duplicateComparator>;

        $z7 = $r6 instanceof com.sleepycat.je.BinaryEqualityComparator;

        if $z7 == 0 goto label5;

     label4:
        $z8 = 1;

        goto label6;

     label5:
        $z8 = 0;

     label6:
        this.<com.sleepycat.je.dbi.DatabaseImpl: boolean duplicateBinaryEqualityComparator> = $z8;

        if changed == 0 goto label7;

        specialinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: void resetKeyComparator()>();

     label7:
        return changed;
    }

    public boolean setTriggers(com.sleepycat.je.txn.Locker, java.lang.String, java.util.List, boolean)
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        com.sleepycat.je.txn.Locker locker;
        java.lang.String dbName, $r6, $r8;
        boolean overridePersistentTriggers, $z0, persistentChange#14, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, transientChange#74, $z9, $z10, $z12, $z13, $z14;
        java.util.Iterator l8, l9, l10#81, l10#114;
        com.sleepycat.je.trigger.Trigger trigger, trigger, trigger#87, trigger#120;
        java.util.IdentityHashMap diffs, $r14;
        java.util.List newTriggers#1, $r12, $r18, $r19, $r20, $r23;
        int $i0, nTriggers#16, i#35, $i1, $i2, $i3, $i4, $i5, $i6;
        byte[][] newTriggerBytes#10, $r0, $r2, $r11;
        java.lang.Object $r1, $r3, $r15, $r21;
        java.lang.StringBuilder $r4, $r5, $r7;
        byte[] $r9;
        java.util.LinkedList newTransientTriggers#70, $r13, $r25;
        java.util.concurrent.atomic.AtomicReference $r26;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        locker := @parameter0: com.sleepycat.je.txn.Locker;

        dbName := @parameter1: java.lang.String;

        newTriggers#1 := @parameter2: java.util.List;

        overridePersistentTriggers := @parameter3: boolean;

        if newTriggers#1 == null goto label01;

        $i0 = interfaceinvoke newTriggers#1.<java.util.List: int size()>();

        if $i0 != 0 goto label01;

        newTriggers#1 = null;

     label01:
        if overridePersistentTriggers == 0 goto label17;

        if newTriggers#1 != null goto label04;

        newTriggerBytes#10 = (byte[][]) null;

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte[][] triggerBytes>;

        if $r0 == null goto label02;

        $z0 = 1;

        goto label03;

     label02:
        $z0 = 0;

     label03:
        persistentChange#14 = $z0;

        goto label18;

     label04:
        nTriggers#16 = 0;

        l8 = interfaceinvoke newTriggers#1.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke l8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label07;

        $r1 = interfaceinvoke l8.<java.util.Iterator: java.lang.Object next()>();

        trigger = (com.sleepycat.je.trigger.Trigger) $r1;

        $z2 = trigger instanceof com.sleepycat.je.trigger.PersistentTrigger;

        if $z2 == 0 goto label06;

        nTriggers#16 = nTriggers#16 + 1;

     label06:
        goto label05;

     label07:
        if nTriggers#16 != 0 goto label10;

        newTriggerBytes#10 = (byte[][]) null;

        $r2 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte[][] triggerBytes>;

        if $r2 == null goto label08;

        $z3 = 1;

        goto label09;

     label08:
        $z3 = 0;

     label09:
        persistentChange#14 = $z3;

        goto label16;

     label10:
        newTriggerBytes#10 = newarray (byte[])[nTriggers#16];

        i#35 = 0;

        l9 = interfaceinvoke newTriggers#1.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z4 = interfaceinvoke l9.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label13;

        $r3 = interfaceinvoke l9.<java.util.Iterator: java.lang.Object next()>();

        trigger = (com.sleepycat.je.trigger.Trigger) $r3;

        $z5 = trigger instanceof com.sleepycat.je.trigger.PersistentTrigger;

        if $z5 == 0 goto label12;

        $i1 = i#35;

        i#35 = i#35 + 1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("trigger ");

        $r6 = interfaceinvoke trigger.<com.sleepycat.je.trigger.Trigger: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = staticinvoke <com.sleepycat.je.dbi.DatabaseImpl: byte[] objectToBytes(java.lang.Object,java.lang.String)>(trigger, $r8);

        newTriggerBytes#10[$i1] = $r9;

        interfaceinvoke trigger.<com.sleepycat.je.trigger.Trigger: com.sleepycat.je.trigger.Trigger setDatabaseName(java.lang.String)>(dbName);

     label12:
        goto label11;

     label13:
        $r11 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte[][] triggerBytes>;

        $z6 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r11, newTriggerBytes#10);

        if $z6 != 0 goto label14;

        $z7 = 1;

        goto label15;

     label14:
        $z7 = 0;

     label15:
        persistentChange#14 = $z7;

     label16:
        goto label18;

     label17:
        newTriggerBytes#10 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte[][] triggerBytes>;

        persistentChange#14 = 0;

     label18:
        if newTriggers#1 != null goto label21;

        newTransientTriggers#70 = null;

        $r12 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.List transientTriggers>;

        if $r12 == null goto label19;

        $z8 = 1;

        goto label20;

     label19:
        $z8 = 0;

     label20:
        transientChange#74 = $z8;

        goto label33;

     label21:
        $r13 = new java.util.LinkedList;

        specialinvoke $r13.<java.util.LinkedList: void <init>()>();

        newTransientTriggers#70 = $r13;

        $r14 = new java.util.IdentityHashMap;

        specialinvoke $r14.<java.util.IdentityHashMap: void <init>()>();

        diffs = $r14;

        l10#81 = interfaceinvoke newTriggers#1.<java.util.List: java.util.Iterator iterator()>();

     label22:
        $z9 = interfaceinvoke l10#81.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label24;

        $r15 = interfaceinvoke l10#81.<java.util.Iterator: java.lang.Object next()>();

        trigger#87 = (com.sleepycat.je.trigger.Trigger) $r15;

        $z10 = trigger#87 instanceof com.sleepycat.je.trigger.PersistentTrigger;

        if $z10 != 0 goto label23;

        interfaceinvoke diffs.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(trigger#87, null);

        interfaceinvoke newTransientTriggers#70.<java.util.List: boolean add(java.lang.Object)>(trigger#87);

        interfaceinvoke trigger#87.<com.sleepycat.je.trigger.Trigger: com.sleepycat.je.trigger.Trigger setDatabaseName(java.lang.String)>(dbName);

     label23:
        goto label22;

     label24:
        $r18 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.List transientTriggers>;

        if $r18 != null goto label27;

        $i2 = interfaceinvoke newTransientTriggers#70.<java.util.List: int size()>();

        if $i2 <= 0 goto label25;

        $z12 = 1;

        goto label26;

     label25:
        $z12 = 0;

     label26:
        transientChange#74 = $z12;

        goto label33;

     label27:
        $r19 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.List transientTriggers>;

        $i3 = interfaceinvoke $r19.<java.util.List: int size()>();

        $i4 = interfaceinvoke newTransientTriggers#70.<java.util.List: int size()>();

        if $i3 == $i4 goto label28;

        transientChange#74 = 1;

        goto label33;

     label28:
        $r20 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.List transientTriggers>;

        l10#114 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();

     label29:
        $z13 = interfaceinvoke l10#114.<java.util.Iterator: boolean hasNext()>();

        if $z13 == 0 goto label30;

        $r21 = interfaceinvoke l10#114.<java.util.Iterator: java.lang.Object next()>();

        trigger#120 = (com.sleepycat.je.trigger.Trigger) $r21;

        interfaceinvoke diffs.<java.util.Map: java.lang.Object remove(java.lang.Object)>(trigger#120);

        goto label29;

     label30:
        $i5 = interfaceinvoke diffs.<java.util.Map: int size()>();

        if $i5 <= 0 goto label31;

        $z14 = 1;

        goto label32;

     label31:
        $z14 = 0;

     label32:
        transientChange#74 = $z14;

     label33:
        if persistentChange#14 != 0 goto label34;

        if transientChange#74 == 0 goto label37;

     label34:
        $r23 = virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.List getTriggers()>();

        staticinvoke <com.sleepycat.je.dbi.TriggerManager: void invokeAddRemoveTriggers(com.sleepycat.je.txn.Locker,java.util.List,java.util.List)>(locker, $r23, newTriggers#1);

        this.<com.sleepycat.je.dbi.DatabaseImpl: byte[][] triggerBytes> = newTriggerBytes#10;

        if newTransientTriggers#70 == null goto label35;

        $i6 = interfaceinvoke newTransientTriggers#70.<java.util.List: int size()>();

        if $i6 <= 0 goto label35;

        $r25 = newTransientTriggers#70;

        goto label36;

     label35:
        $r25 = null;

     label36:
        this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.List transientTriggers> = $r25;

        $r26 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.concurrent.atomic.AtomicReference triggers>;

        virtualinvoke $r26.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(newTriggers#1);

     label37:
        return persistentChange#14;
    }

    public void setSortedDuplicates()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        byte $b0, $b1, $b2;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $b0 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte flags>;

        $b1 = $b0 | 1;

        $b2 = (byte) $b1;

        this.<com.sleepycat.je.dbi.DatabaseImpl: byte flags> = $b2;

        return;
    }

    public void setKeyPrefixing()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        byte $b0, $b1, $b2;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $b0 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte flags>;

        $b1 = $b0 | 16;

        $b2 = (byte) $b1;

        this.<com.sleepycat.je.dbi.DatabaseImpl: byte flags> = $b2;

        return;
    }

    public void clearKeyPrefixing()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        boolean $z0;
        byte $b0, $b1, $b2;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $z0 = <com.sleepycat.je.dbi.DatabaseImpl: boolean forceKeyPrefixing>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $b0 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte flags>;

        $b1 = $b0 & -17;

        $b2 = (byte) $b1;

        this.<com.sleepycat.je.dbi.DatabaseImpl: byte flags> = $b2;

        return;
    }

    private void setTemporary()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        byte $b0, $b1, $b2;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $b0 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte flags>;

        $b1 = $b0 | 2;

        $b2 = (byte) $b1;

        this.<com.sleepycat.je.dbi.DatabaseImpl: byte flags> = $b2;

        return;
    }

    public void setIsReplicatedBit()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        byte $b0, $b1, $b2;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $b0 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte flags>;

        $b1 = $b0 | 4;

        $b2 = (byte) $b1;

        this.<com.sleepycat.je.dbi.DatabaseImpl: byte flags> = $b2;

        return;
    }

    private void setNotReplicatedBit()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        byte $b0, $b1, $b2;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $b0 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte flags>;

        $b1 = $b0 | 8;

        $b2 = (byte) $b1;

        this.<com.sleepycat.je.dbi.DatabaseImpl: byte flags> = $b2;

        return;
    }

    public static byte[] comparatorToBytes(java.util.Comparator, boolean, java.lang.String)
    {
        java.util.Comparator comparator;
        boolean byClassName;
        java.lang.String comparatorType;
        java.lang.Object obj, $r2;
        byte[] $r0, $r3;
        java.lang.Class $r1;

        comparator := @parameter0: java.util.Comparator;

        byClassName := @parameter1: boolean;

        comparatorType := @parameter2: java.lang.String;

        if comparator != null goto label1;

        $r0 = <com.sleepycat.je.log.LogUtils: byte[] ZERO_LENGTH_BYTE_ARRAY>;

        return $r0;

     label1:
        if byClassName == 0 goto label2;

        $r1 = virtualinvoke comparator.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        goto label3;

     label2:
        $r2 = comparator;

     label3:
        obj = $r2;

        $r3 = staticinvoke <com.sleepycat.je.dbi.DatabaseImpl: byte[] objectToBytes(java.lang.Object,java.lang.String)>(obj, comparatorType);

        return $r3;
    }

    public static byte[] objectToBytes(java.lang.Object, java.lang.String)
    {
        java.lang.Object obj;
        java.lang.String comparatorType, $r7;
        java.io.ByteArrayOutputStream baos, $r0;
        java.io.ObjectOutputStream oos, $r1;
        java.io.IOException e, $r3;
        byte[] $r2;
        java.lang.StringBuilder $r4, $r5, $r6;
        com.sleepycat.je.EnvironmentFailureException $r8;

        obj := @parameter0: java.lang.Object;

        comparatorType := @parameter1: java.lang.String;

     label1:
        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        baos = $r0;

        $r1 = new java.io.ObjectOutputStream;

        specialinvoke $r1.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>(baos);

        oos = $r1;

        virtualinvoke oos.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(obj);

        $r2 = virtualinvoke baos.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        e = $r3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception while trying to store ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(comparatorType);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedException(java.lang.String,java.lang.Exception)>($r7, e);

        throw $r8;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.util.List getTriggers()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        com.sleepycat.je.dbi.EnvironmentImpl $r0, $r1, $r8;
        boolean $z0, $z2, $z3;
        byte[][] $r2, $r7;
        java.util.List $r3, myTriggers#16, $r11, $r12, myTriggers#47;
        java.util.concurrent.atomic.AtomicReference $r4, $r13, $r14;
        java.lang.Object $r5, $r15;
        java.lang.String $r6;
        java.lang.ClassLoader $r9;
        java.util.LinkedList myTriggers#27, $r10;
        java.lang.AssertionError $r16;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        if $r0 == null goto label1;

        $r1 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $z0 = virtualinvoke $r1.<com.sleepycat.je.dbi.EnvironmentImpl: boolean getNoComparators()>();

        if $z0 == 0 goto label2;

     label1:
        return null;

     label2:
        $r2 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte[][] triggerBytes>;

        if $r2 != null goto label3;

        $r3 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.List transientTriggers>;

        if $r3 != null goto label3;

        return null;

     label3:
        $r4 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.concurrent.atomic.AtomicReference triggers>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        myTriggers#16 = (java.util.List) $r5;

        if myTriggers#16 == null goto label4;

        return myTriggers#16;

     label4:
        $r6 = virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: java.lang.String getName()>();

        $r7 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte[][] triggerBytes>;

        $r8 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r9 = virtualinvoke $r8.<com.sleepycat.je.dbi.EnvironmentImpl: java.lang.ClassLoader getClassLoader()>();

        myTriggers#27 = staticinvoke <com.sleepycat.je.dbi.TriggerUtils: java.util.LinkedList unmarshallTriggers(java.lang.String,byte[][],java.lang.ClassLoader)>($r6, $r7, $r9);

        if myTriggers#27 != null goto label5;

        $r10 = new java.util.LinkedList;

        specialinvoke $r10.<java.util.LinkedList: void <init>()>();

        myTriggers#27 = $r10;

     label5:
        $r11 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.List transientTriggers>;

        if $r11 == null goto label6;

        $r12 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.List transientTriggers>;

        interfaceinvoke myTriggers#27.<java.util.List: boolean addAll(java.util.Collection)>($r12);

     label6:
        $r13 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.concurrent.atomic.AtomicReference triggers>;

        $z2 = virtualinvoke $r13.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, myTriggers#27);

        if $z2 == 0 goto label7;

        return myTriggers#27;

     label7:
        $r14 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.concurrent.atomic.AtomicReference triggers>;

        $r15 = virtualinvoke $r14.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        myTriggers#47 = (java.util.List) $r15;

        $z3 = <com.sleepycat.je.dbi.DatabaseImpl: boolean $assertionsDisabled>;

        if $z3 != 0 goto label8;

        if myTriggers#47 != null goto label8;

        $r16 = new java.lang.AssertionError;

        specialinvoke $r16.<java.lang.AssertionError: void <init>()>();

        throw $r16;

     label8:
        return myTriggers#47;
    }

    public java.lang.String getName() throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        com.sleepycat.je.dbi.EnvironmentImpl $r0;
        com.sleepycat.je.dbi.DbTree $r1;
        com.sleepycat.je.dbi.DatabaseId $r2;
        java.lang.String $r3;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r1 = virtualinvoke $r0.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.DbTree getDbTree()>();

        $r2 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.DatabaseId id>;

        $r3 = virtualinvoke $r1.<com.sleepycat.je.dbi.DbTree: java.lang.String getDbName(com.sleepycat.je.dbi.DatabaseId)>($r2);

        return $r3;
    }

    public com.sleepycat.je.dbi.EnvironmentImpl getEnv()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        com.sleepycat.je.dbi.EnvironmentImpl $r0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        return $r0;
    }

    public int getNodeMaxTreeEntries()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        int $i0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $i0 = this.<com.sleepycat.je.dbi.DatabaseImpl: int maxTreeEntriesPerNode>;

        return $i0;
    }

    public long getTreeAdminMemory()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        com.sleepycat.je.cleaner.DbFileSummaryMap $r0;
        long $l0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.cleaner.DbFileSummaryMap dbFileSummaries>;

        $l0 = virtualinvoke $r0.<com.sleepycat.je.cleaner.DbFileSummaryMap: long getMemorySize()>();

        return $l0;
    }

    public com.sleepycat.je.tree.Tree getTree()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        com.sleepycat.je.tree.Tree $r0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.tree.Tree tree>;

        return $r0;
    }

    public com.sleepycat.je.dbi.DatabaseId getId()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        com.sleepycat.je.dbi.DatabaseId $r0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.DatabaseId id>;

        return $r0;
    }

    public boolean isInternalDb()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        com.sleepycat.je.dbi.DbType $r0;
        boolean $z0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.DbType getDbType()>();

        $z0 = virtualinvoke $r0.<com.sleepycat.je.dbi.DbType: boolean isInternal()>();

        return $z0;
    }

    public com.sleepycat.je.dbi.DbType getDbType()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        com.sleepycat.je.dbi.DbType $r0, $r1, $r2;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.DbType dbType>;

        if $r0 == null goto label1;

        $r1 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.DbType dbType>;

        return $r1;

     label1:
        specialinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: void resetDbType()>();

        $r2 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.DbType dbType>;

        return $r2;
    }

    private void resetDbType()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        java.lang.String $r0;
        com.sleepycat.je.dbi.DbType $r1;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.lang.String debugDatabaseName>;

        $r1 = staticinvoke <com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DbType typeForDbName(java.lang.String)>($r0);

        this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.DbType dbType> = $r1;

        return;
    }

    public boolean isDeleted()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        short $s0;
        boolean $z0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $s0 = this.<com.sleepycat.je.dbi.DatabaseImpl: short deleteState>;

        if $s0 == 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    void decrementUseCount()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        boolean $z0;
        java.util.concurrent.atomic.AtomicInteger $r0, $r2;
        int $i0;
        java.lang.AssertionError $r1;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $z0 = <com.sleepycat.je.dbi.DatabaseImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.concurrent.atomic.AtomicInteger useCount>;

        $i0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if $i0 > 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $r2 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.concurrent.atomic.AtomicInteger useCount>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        return;
    }

    public void addReferringHandle(com.sleepycat.je.Database)
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        com.sleepycat.je.Database db;
        java.util.Set $r0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        db := @parameter0: com.sleepycat.je.Database;

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Set referringHandles>;

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(db);

        return;
    }

    public boolean isTemporary()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        byte $b0, $b1;
        boolean $z0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $b0 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte flags>;

        $b1 = $b0 & 2;

        if $b1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isReplicated()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        boolean $z0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $z0 = specialinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: boolean replicatedBitSet()>();

        return $z0;
    }

    public boolean hasOpenHandles()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        java.util.Set $r0;
        int $i0;
        boolean $z0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Set referringHandles>;

        $i0 = interfaceinvoke $r0.<java.util.Set: int size()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isTransactional()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        boolean $z0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $z0 = this.<com.sleepycat.je.dbi.DatabaseImpl: boolean transactional>;

        return $z0;
    }

    public boolean isDurableDeferredWrite()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        boolean $z0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $z0 = this.<com.sleepycat.je.dbi.DatabaseImpl: boolean durableDeferredWrite>;

        return $z0;
    }

    public void setTransactional(boolean)
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        boolean transactional;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        transactional := @parameter0: boolean;

        this.<com.sleepycat.je.dbi.DatabaseImpl: boolean transactional> = transactional;

        return;
    }

    public void setDeferredWrite(boolean)
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        boolean durableDeferredWrite;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        durableDeferredWrite := @parameter0: boolean;

        this.<com.sleepycat.je.dbi.DatabaseImpl: boolean durableDeferredWrite> = durableDeferredWrite;

        return;
    }

    public boolean getKeyPrefixing()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        byte $b0, $b1;
        boolean $z0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $b0 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte flags>;

        $b1 = $b0 & 16;

        if $b1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setNodeMaxTreeEntries(int)
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        int newNodeMaxTreeEntries;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        newNodeMaxTreeEntries := @parameter0: int;

        this.<com.sleepycat.je.dbi.DatabaseImpl: int maxTreeEntriesPerNode> = newNodeMaxTreeEntries;

        return;
    }

    public void setCacheMode(com.sleepycat.je.CacheMode)
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        com.sleepycat.je.CacheMode mode;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        mode := @parameter0: com.sleepycat.je.CacheMode;

        this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.CacheMode cacheMode> = mode;

        return;
    }

    public boolean isCheckpointNeeded()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        boolean $z0, $z1, $z2, $z3;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $z0 = virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: boolean isDeleted()>();

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: boolean isDirty()>();

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: boolean isTemporary()>();

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public boolean isDirty()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        boolean $z0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $z0 = this.<com.sleepycat.je.dbi.DatabaseImpl: boolean dirty>;

        return $z0;
    }

    public boolean isDeferredWriteMode()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        boolean $z0, $z1, $z2;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $z0 = virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: boolean isDurableDeferredWrite()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: boolean isTemporary()>();

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public boolean removeDbFileSummaries(java.util.Collection)
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        java.util.Collection fileNums;
        java.util.Iterator l3;
        java.lang.Long fileNum;
        boolean $z0, removed#7, $z1, $z2;
        com.sleepycat.je.cleaner.DbFileSummaryMap $r0, $r3;
        java.lang.AssertionError $r1;
        java.lang.Object $r2;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        fileNums := @parameter0: java.util.Collection;

        $z0 = <com.sleepycat.je.dbi.DatabaseImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.cleaner.DbFileSummaryMap dbFileSummaries>;

        if $r0 != null goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        removed#7 = 0;

        l3 = interfaceinvoke fileNums.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r2 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        fileNum = (java.lang.Long) $r2;

        $r3 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.cleaner.DbFileSummaryMap dbFileSummaries>;

        $z2 = virtualinvoke $r3.<com.sleepycat.je.cleaner.DbFileSummaryMap: boolean remove(java.lang.Long)>(fileNum);

        if $z2 == 0 goto label3;

        removed#7 = 1;

     label3:
        goto label2;

     label4:
        return removed#7;
    }

    public boolean isDeleteFinished()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        short $s0;
        boolean $z0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $s0 = this.<com.sleepycat.je.dbi.DatabaseImpl: short deleteState>;

        if $s0 != 4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void releaseTreeAdminMemory()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        com.sleepycat.je.cleaner.DbFileSummaryMap $r0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.cleaner.DbFileSummaryMap dbFileSummaries>;

        virtualinvoke $r0.<com.sleepycat.je.cleaner.DbFileSummaryMap: void subtractFromMemoryBudget()>();

        return;
    }

    public java.lang.String getDebugName()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        java.lang.String $r0, $r1;
        java.lang.StringBuilder $r2, $r3, $r5;
        com.sleepycat.je.dbi.DatabaseId $r4;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.lang.String debugDatabaseName>;

        if $r0 == null goto label1;

        $r1 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.lang.String debugDatabaseName>;

        goto label2;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dBId=");

        $r4 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.DatabaseId id>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        return $r1;
    }

    public java.util.Comparator getKeyComparator()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        java.util.Comparator $r0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator keyComparator>;

        return $r0;
    }

    public long getEofLsn()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        long $l0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $l0 = this.<com.sleepycat.je.dbi.DatabaseImpl: long eofLsn>;

        return $l0;
    }

    public boolean isLNImmediatelyObsolete()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        boolean $z0, $z1, $z2, $z3;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $z0 = virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: boolean getSortedDuplicates()>();

        if $z0 == 0 goto label1;

        $z1 = this.<com.sleepycat.je.dbi.DatabaseImpl: boolean btreePartialComparator>;

        if $z1 != 0 goto label1;

        $z2 = this.<com.sleepycat.je.dbi.DatabaseImpl: boolean duplicatePartialComparator>;

        if $z2 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    public boolean allowsKeyUpdates()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        boolean $z0, $z1, $z2;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $z0 = this.<com.sleepycat.je.dbi.DatabaseImpl: boolean btreePartialComparator>;

        if $z0 != 0 goto label1;

        $z1 = this.<com.sleepycat.je.dbi.DatabaseImpl: boolean duplicatePartialComparator>;

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public int getBinDeltaPercent()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        int $i0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $i0 = this.<com.sleepycat.je.dbi.DatabaseImpl: int binDeltaPercent>;

        return $i0;
    }

    public boolean hasDuplicateBinaryEqualityComparator()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        boolean $z0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $z0 = this.<com.sleepycat.je.dbi.DatabaseImpl: boolean duplicateBinaryEqualityComparator>;

        return $z0;
    }

    public boolean hasBtreeBinaryEqualityComparator()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        boolean $z0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $z0 = this.<com.sleepycat.je.dbi.DatabaseImpl: boolean btreeBinaryEqualityComparator>;

        return $z0;
    }

    public int noteWriteHandleOpen()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        java.util.concurrent.atomic.AtomicInteger $r0;
        int $i0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.concurrent.atomic.AtomicInteger writeCount>;

        $i0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        return $i0;
    }

    com.sleepycat.je.log.DbOpReplicationContext getOperationRepContext(com.sleepycat.je.log.entry.DbOperationType)
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        com.sleepycat.je.log.entry.DbOperationType operationType, $r0;
        boolean $z0;
        java.lang.AssertionError $r1;
        com.sleepycat.je.log.DbOpReplicationContext $r2;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        operationType := @parameter0: com.sleepycat.je.log.entry.DbOperationType;

        $z0 = <com.sleepycat.je.dbi.DatabaseImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r0 = <com.sleepycat.je.log.entry.DbOperationType: com.sleepycat.je.log.entry.DbOperationType TRUNCATE>;

        if operationType != $r0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $r2 = virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.log.DbOpReplicationContext getOperationRepContext(com.sleepycat.je.log.entry.DbOperationType,com.sleepycat.je.dbi.DatabaseId)>(operationType, null);

        return $r2;
    }

    void incrementUseCount()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        java.util.concurrent.atomic.AtomicInteger $r0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.concurrent.atomic.AtomicInteger useCount>;

        virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        return;
    }

    com.sleepycat.je.log.DbOpReplicationContext getOperationRepContext(com.sleepycat.je.log.entry.DbOperationType, com.sleepycat.je.dbi.DatabaseId)
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        com.sleepycat.je.log.entry.DbOperationType operationType, $r6;
        com.sleepycat.je.dbi.DatabaseId oldDbId;
        com.sleepycat.je.log.DbOpReplicationContext context, $r0;
        boolean $z0, $z1, $z2, $z3;
        java.lang.AssertionError $r1, $r7;
        com.sleepycat.je.dbi.ReplicatedDatabaseConfig $r2;
        byte $b0;
        int $i1;
        byte[] $r3, $r4;
        byte[][] $r5;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        operationType := @parameter0: com.sleepycat.je.log.entry.DbOperationType;

        oldDbId := @parameter1: com.sleepycat.je.dbi.DatabaseId;

        $r0 = new com.sleepycat.je.log.DbOpReplicationContext;

        $z0 = virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: boolean isReplicated()>();

        specialinvoke $r0.<com.sleepycat.je.log.DbOpReplicationContext: void <init>(boolean,com.sleepycat.je.log.entry.DbOperationType)>($z0, operationType);

        context = $r0;

        $z1 = staticinvoke <com.sleepycat.je.log.entry.DbOperationType: boolean isWriteConfigType(com.sleepycat.je.log.entry.DbOperationType)>(operationType);

        if $z1 == 0 goto label2;

        $z2 = <com.sleepycat.je.dbi.DatabaseImpl: boolean $assertionsDisabled>;

        if $z2 != 0 goto label1;

        goto label1;

     label1:
        $r2 = new com.sleepycat.je.dbi.ReplicatedDatabaseConfig;

        $b0 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte flags>;

        $i1 = this.<com.sleepycat.je.dbi.DatabaseImpl: int maxTreeEntriesPerNode>;

        $r3 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte[] btreeComparatorBytes>;

        $r4 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte[] duplicateComparatorBytes>;

        $r5 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte[][] triggerBytes>;

        specialinvoke $r2.<com.sleepycat.je.dbi.ReplicatedDatabaseConfig: void <init>(byte,int,byte[],byte[],byte[][])>($b0, $i1, $r3, $r4, $r5);

        virtualinvoke context.<com.sleepycat.je.log.DbOpReplicationContext: void setCreateConfig(com.sleepycat.je.dbi.ReplicatedDatabaseConfig)>($r2);

        goto label4;

     label2:
        $r6 = <com.sleepycat.je.log.entry.DbOperationType: com.sleepycat.je.log.entry.DbOperationType TRUNCATE>;

        if operationType != $r6 goto label4;

        $z3 = <com.sleepycat.je.dbi.DatabaseImpl: boolean $assertionsDisabled>;

        if $z3 != 0 goto label3;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label3:
        virtualinvoke context.<com.sleepycat.je.log.DbOpReplicationContext: void setTruncateOldDbId(com.sleepycat.je.dbi.DatabaseId)>(null);

     label4:
        return context;
    }

    public void writeToLog(java.nio.ByteBuffer)
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        java.nio.ByteBuffer logBuffer;
        java.util.Iterator i;
        java.util.Map$Entry entry;
        java.lang.Long fileNum;
        com.sleepycat.je.cleaner.DbFileSummary summary;
        com.sleepycat.je.dbi.DatabaseId $r0;
        com.sleepycat.je.tree.Tree $r1;
        byte $b0, $b2;
        byte[] $r3, $r4;
        int $i1, $i3;
        com.sleepycat.je.cleaner.DbFileSummaryMap $r6, $r7;
        java.util.Set $r8;
        boolean $z0;
        java.lang.Object $r9, $r10, $r11;
        long $l4;
        byte[][] $r12;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        logBuffer := @parameter0: java.nio.ByteBuffer;

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.DatabaseId id>;

        virtualinvoke $r0.<com.sleepycat.je.dbi.DatabaseId: void writeToLog(java.nio.ByteBuffer)>(logBuffer);

        $r1 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.tree.Tree tree>;

        virtualinvoke $r1.<com.sleepycat.je.tree.Tree: void writeToLog(java.nio.ByteBuffer)>(logBuffer);

        $b0 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte flags>;

        virtualinvoke logBuffer.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b0);

        $r3 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte[] btreeComparatorBytes>;

        staticinvoke <com.sleepycat.je.log.LogUtils: void writeByteArray(java.nio.ByteBuffer,byte[])>(logBuffer, $r3);

        $r4 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte[] duplicateComparatorBytes>;

        staticinvoke <com.sleepycat.je.log.LogUtils: void writeByteArray(java.nio.ByteBuffer,byte[])>(logBuffer, $r4);

        $i1 = this.<com.sleepycat.je.dbi.DatabaseImpl: int maxTreeEntriesPerNode>;

        staticinvoke <com.sleepycat.je.log.LogUtils: void writePackedInt(java.nio.ByteBuffer,int)>(logBuffer, $i1);

        $b2 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte createdAtLogVersion>;

        virtualinvoke logBuffer.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b2);

        $r6 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.cleaner.DbFileSummaryMap dbFileSummaries>;

        $i3 = virtualinvoke $r6.<com.sleepycat.je.cleaner.DbFileSummaryMap: int size()>();

        staticinvoke <com.sleepycat.je.log.LogUtils: void writePackedInt(java.nio.ByteBuffer,int)>(logBuffer, $i3);

        $r7 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.cleaner.DbFileSummaryMap dbFileSummaries>;

        $r8 = virtualinvoke $r7.<com.sleepycat.je.cleaner.DbFileSummaryMap: java.util.Set entrySet()>();

        i = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke i.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $r9;

        $r10 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        fileNum = (java.lang.Long) $r10;

        $r11 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        summary = (com.sleepycat.je.cleaner.DbFileSummary) $r11;

        $l4 = virtualinvoke fileNum.<java.lang.Long: long longValue()>();

        staticinvoke <com.sleepycat.je.log.LogUtils: void writePackedLong(java.nio.ByteBuffer,long)>(logBuffer, $l4);

        virtualinvoke summary.<com.sleepycat.je.cleaner.DbFileSummary: void writeToLog(java.nio.ByteBuffer)>(logBuffer);

        goto label1;

     label2:
        $r12 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte[][] triggerBytes>;

        staticinvoke <com.sleepycat.je.dbi.TriggerUtils: void writeTriggers(java.nio.ByteBuffer,byte[][])>(logBuffer, $r12);

        this.<com.sleepycat.je.dbi.DatabaseImpl: boolean dirty> = 0;

        return;
    }

    public int getLogSize()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        java.util.Iterator i;
        java.util.Map$Entry entry;
        java.lang.Long fileNum;
        com.sleepycat.je.cleaner.DbFileSummary summary;
        com.sleepycat.je.dbi.DatabaseId $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, size#24, $i11, $i12, size#31, $i14, $i15, $i16, $i17, size#60;
        com.sleepycat.je.tree.Tree $r1;
        byte[] $r2, $r3;
        com.sleepycat.je.cleaner.DbFileSummaryMap $r4, $r5;
        java.util.Set $r6;
        boolean $z0;
        java.lang.Object $r7, $r8, $r9;
        long $l13;
        byte[][] $r10;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.DatabaseId id>;

        $i0 = virtualinvoke $r0.<com.sleepycat.je.dbi.DatabaseId: int getLogSize()>();

        $r1 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.tree.Tree tree>;

        $i1 = virtualinvoke $r1.<com.sleepycat.je.tree.Tree: int getLogSize()>();

        $i2 = $i0 + $i1;

        $i3 = $i2 + 1;

        $r2 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte[] btreeComparatorBytes>;

        $i4 = staticinvoke <com.sleepycat.je.log.LogUtils: int getByteArrayLogSize(byte[])>($r2);

        $i5 = $i3 + $i4;

        $r3 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte[] duplicateComparatorBytes>;

        $i6 = staticinvoke <com.sleepycat.je.log.LogUtils: int getByteArrayLogSize(byte[])>($r3);

        $i7 = $i5 + $i6;

        $i8 = this.<com.sleepycat.je.dbi.DatabaseImpl: int maxTreeEntriesPerNode>;

        $i9 = staticinvoke <com.sleepycat.je.log.LogUtils: int getPackedIntLogSize(int)>($i8);

        $i10 = $i7 + $i9;

        size#24 = $i10 + 1;

        $r4 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.cleaner.DbFileSummaryMap dbFileSummaries>;

        $i11 = virtualinvoke $r4.<com.sleepycat.je.cleaner.DbFileSummaryMap: int size()>();

        $i12 = staticinvoke <com.sleepycat.je.log.LogUtils: int getPackedIntLogSize(int)>($i11);

        size#31 = size#24 + $i12;

        $r5 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.cleaner.DbFileSummaryMap dbFileSummaries>;

        $r6 = virtualinvoke $r5.<com.sleepycat.je.cleaner.DbFileSummaryMap: java.util.Set entrySet()>();

        i = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke i.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $r7;

        $r8 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        fileNum = (java.lang.Long) $r8;

        $r9 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        summary = (com.sleepycat.je.cleaner.DbFileSummary) $r9;

        $l13 = virtualinvoke fileNum.<java.lang.Long: long longValue()>();

        $i14 = staticinvoke <com.sleepycat.je.log.LogUtils: int getPackedLongLogSize(long)>($l13);

        $i15 = virtualinvoke summary.<com.sleepycat.je.cleaner.DbFileSummary: int getLogSize()>();

        $i16 = $i14 + $i15;

        size#31 = size#31 + $i16;

        goto label1;

     label2:
        $r10 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte[][] triggerBytes>;

        $i17 = staticinvoke <com.sleepycat.je.dbi.TriggerUtils: int logSize(byte[][])>($r10);

        size#60 = size#31 + $i17;

        return size#60;
    }

    public boolean getDupsConverted()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        byte $b0, $b1;
        boolean $z0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $b0 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte flags>;

        $b1 = $b0 & 64;

        if $b1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public com.sleepycat.je.PreloadStats preload(com.sleepycat.je.PreloadConfig) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        com.sleepycat.je.PreloadConfig config;
        com.sleepycat.je.dbi.EnvironmentImpl $r0;
        com.sleepycat.je.dbi.DatabaseImpl[] $r1;
        com.sleepycat.je.PreloadStats $r2;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        config := @parameter0: com.sleepycat.je.PreloadConfig;

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r1 = newarray (com.sleepycat.je.dbi.DatabaseImpl)[1];

        $r1[0] = this;

        $r2 = virtualinvoke $r0.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.PreloadStats preload(com.sleepycat.je.dbi.DatabaseImpl[],com.sleepycat.je.PreloadConfig)>($r1, config);

        return $r2;
    }

    public synchronized void sync(boolean) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        boolean flushLog, $z0, $z1;
        java.lang.UnsupportedOperationException $r0;
        com.sleepycat.je.tree.Tree $r1;
        com.sleepycat.je.dbi.EnvironmentImpl $r2, $r4;
        com.sleepycat.je.recovery.Checkpointer $r3;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        flushLog := @parameter0: boolean;

        $z0 = virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: boolean isDurableDeferredWrite()>();

        if $z0 != 0 goto label1;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Database.sync() is only supported for deferred-write databases");

        throw $r0;

     label1:
        $r1 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.tree.Tree tree>;

        $z1 = virtualinvoke $r1.<com.sleepycat.je.tree.Tree: boolean rootExists()>();

        if $z1 == 0 goto label2;

        $r2 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r3 = virtualinvoke $r2.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.recovery.Checkpointer getCheckpointer()>();

        $r4 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r3.<com.sleepycat.je.recovery.Checkpointer: void syncDatabase(com.sleepycat.je.dbi.EnvironmentImpl,com.sleepycat.je.dbi.DatabaseImpl,boolean)>($r4, this, flushLog);

     label2:
        return;
    }

    public void finishDeleteProcessing() throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.dbi.DatabaseImpl this, $r23;
        long rootLsn, memoryChange#68, $l2, $l3;
        com.sleepycat.je.tree.IN rootIN, thisIN;
        com.sleepycat.je.cleaner.LocalUtilizationTracker localTracker, $r11;
        boolean fetchLNSize, $z0, $z1, $z2, $z3;
        com.sleepycat.je.dbi.DatabaseImpl$ObsoleteProcessor obsoleteProcessor, $r16;
        com.sleepycat.je.dbi.DatabaseImpl$ObsoleteTreeWalker walker, $r17;
        com.sleepycat.je.dbi.MemoryBudget mb;
        com.sleepycat.je.dbi.INList inList;
        java.util.Iterator iter;
        java.lang.Throwable l10, l11, $r24, $r28;
        com.sleepycat.je.utilint.TestHook $r0;
        java.lang.AssertionError $r1;
        com.sleepycat.je.tree.Tree $r2, $r3;
        com.sleepycat.je.dbi.EnvironmentImpl $r4, $r7, $r9, $r12, $r14, $r18, $r20, $r21, $r26, $r30;
        com.sleepycat.je.dbi.DbTree $r5, $r27, $r31;
        com.sleepycat.je.dbi.DatabaseId $r6;
        com.sleepycat.je.log.LogManager $r8, $r10;
        byte $b0, $b1;
        com.sleepycat.je.log.LogEntryType $r13;
        com.sleepycat.je.cleaner.Cleaner $r15;
        com.sleepycat.je.cleaner.UtilizationProfile $r19;
        java.lang.Object $r22;
        com.sleepycat.je.cleaner.DbFileSummaryMap $r25, $r29;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $z0 = <com.sleepycat.je.dbi.DatabaseImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.utilint.TestHook pendingDeletedHook>;

        $z1 = staticinvoke <com.sleepycat.je.utilint.TestHookExecute: boolean doHookIfSet(com.sleepycat.je.utilint.TestHook)>($r0);

        if $z1 != 0 goto label01;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label01:
        $r2 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.tree.Tree tree>;

        rootLsn = virtualinvoke $r2.<com.sleepycat.je.tree.Tree: long getRootLsn()>();

        $r3 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.tree.Tree tree>;

        rootIN = virtualinvoke $r3.<com.sleepycat.je.tree.Tree: com.sleepycat.je.tree.IN getResidentRootIN(boolean)>(0);

        $r4 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r5 = virtualinvoke $r4.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.DbTree getDbTree()>();

        $r6 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.DatabaseId id>;

        virtualinvoke $r5.<com.sleepycat.je.dbi.DbTree: void deleteMapLN(com.sleepycat.je.dbi.DatabaseId)>($r6);

        $r7 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r8 = virtualinvoke $r7.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.log.LogManager getLogManager()>();

        virtualinvoke $r8.<com.sleepycat.je.log.LogManager: void flushSync()>();

        $b0 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte createdAtLogVersion>;

        if $b0 < 6 goto label02;

        $z2 = <com.sleepycat.je.dbi.DatabaseImpl: boolean forceTreeWalkForTruncateAndRemove>;

        if $z2 != 0 goto label02;

        $r9 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r10 = virtualinvoke $r9.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.log.LogManager getLogManager()>();

        virtualinvoke $r10.<com.sleepycat.je.log.LogManager: void countObsoleteDb(com.sleepycat.je.dbi.DatabaseImpl)>(this);

        goto label04;

     label02:
        $r11 = new com.sleepycat.je.cleaner.LocalUtilizationTracker;

        $r12 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        specialinvoke $r11.<com.sleepycat.je.cleaner.LocalUtilizationTracker: void <init>(com.sleepycat.je.dbi.EnvironmentImpl)>($r12);

        localTracker = $r11;

        $b1 = rootLsn cmp -1L;

        if $b1 == 0 goto label03;

        $r13 = <com.sleepycat.je.log.LogEntryType: com.sleepycat.je.log.LogEntryType LOG_IN>;

        virtualinvoke localTracker.<com.sleepycat.je.cleaner.LocalUtilizationTracker: void countObsoleteNodeInexact(long,com.sleepycat.je.log.LogEntryType,int,com.sleepycat.je.dbi.DatabaseImpl)>(rootLsn, $r13, 0, this);

     label03:
        $r14 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r15 = virtualinvoke $r14.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.cleaner.Cleaner getCleaner()>();

        fetchLNSize = virtualinvoke $r15.<com.sleepycat.je.cleaner.Cleaner: boolean getFetchObsoleteSize(com.sleepycat.je.dbi.DatabaseImpl)>(this);

        $r16 = new com.sleepycat.je.dbi.DatabaseImpl$ObsoleteProcessor;

        specialinvoke $r16.<com.sleepycat.je.dbi.DatabaseImpl$ObsoleteProcessor: void <init>(com.sleepycat.je.dbi.DatabaseImpl,com.sleepycat.je.cleaner.LocalUtilizationTracker)>(this, localTracker);

        obsoleteProcessor = $r16;

        $r17 = new com.sleepycat.je.dbi.DatabaseImpl$ObsoleteTreeWalker;

        specialinvoke $r17.<com.sleepycat.je.dbi.DatabaseImpl$ObsoleteTreeWalker: void <init>(com.sleepycat.je.dbi.DatabaseImpl,long,boolean,com.sleepycat.je.dbi.SortedLSNTreeWalker$TreeNodeProcessor,com.sleepycat.je.tree.IN,com.sleepycat.je.dbi.DatabaseImpl$1)>(this, rootLsn, fetchLNSize, obsoleteProcessor, rootIN, null);

        walker = $r17;

        virtualinvoke walker.<com.sleepycat.je.dbi.SortedLSNTreeWalker: void walk()>();

        $r18 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r19 = virtualinvoke $r18.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.cleaner.UtilizationProfile getUtilizationProfile()>();

        virtualinvoke $r19.<com.sleepycat.je.cleaner.UtilizationProfile: void flushLocalTracker(com.sleepycat.je.cleaner.LocalUtilizationTracker)>(localTracker);

     label04:
        $r20 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        mb = virtualinvoke $r20.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.MemoryBudget getMemoryBudget()>();

        $r21 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        inList = virtualinvoke $r21.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.INList getInMemoryINs()>();

        memoryChange#68 = 0L;

     label05:
        iter = virtualinvoke inList.<com.sleepycat.je.dbi.INList: java.util.Iterator iterator()>();

     label06:
        $z3 = interfaceinvoke iter.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label08;

        $r22 = interfaceinvoke iter.<java.util.Iterator: java.lang.Object next()>();

        thisIN = (com.sleepycat.je.tree.IN) $r22;

        $r23 = virtualinvoke thisIN.<com.sleepycat.je.tree.IN: com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        if $r23 != this goto label07;

        interfaceinvoke iter.<java.util.Iterator: void remove()>();

        $l2 = virtualinvoke thisIN.<com.sleepycat.je.tree.IN: long getBudgetedMemorySize()>();

        $l3 = 0L - $l2;

        memoryChange#68 = memoryChange#68 + $l3;

     label07:
        goto label06;

     label08:
        virtualinvoke mb.<com.sleepycat.je.dbi.MemoryBudget: void updateTreeMemoryUsage(long)>(memoryChange#68);

        goto label12;

     label09:
        $r24 := @caughtexception;

     label10:
        l10 = $r24;

     label11:
        virtualinvoke mb.<com.sleepycat.je.dbi.MemoryBudget: void updateTreeMemoryUsage(long)>(memoryChange#68);

        throw l10;

     label12:
        $r25 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.cleaner.DbFileSummaryMap dbFileSummaries>;

        virtualinvoke $r25.<com.sleepycat.je.cleaner.DbFileSummaryMap: void subtractFromMemoryBudget()>();

        this.<com.sleepycat.je.dbi.DatabaseImpl: short deleteState> = 4;

        $r26 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r27 = virtualinvoke $r26.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.DbTree getDbTree()>();

        virtualinvoke $r27.<com.sleepycat.je.dbi.DbTree: void releaseDb(com.sleepycat.je.dbi.DatabaseImpl)>(this);

        goto label16;

     label13:
        $r28 := @caughtexception;

     label14:
        l11 = $r28;

     label15:
        $r29 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.cleaner.DbFileSummaryMap dbFileSummaries>;

        virtualinvoke $r29.<com.sleepycat.je.cleaner.DbFileSummaryMap: void subtractFromMemoryBudget()>();

        this.<com.sleepycat.je.dbi.DatabaseImpl: short deleteState> = 4;

        $r30 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r31 = virtualinvoke $r30.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.DbTree getDbTree()>();

        virtualinvoke $r31.<com.sleepycat.je.dbi.DbTree: void releaseDb(com.sleepycat.je.dbi.DatabaseImpl)>(this);

        throw l11;

     label16:
        return;

        catch java.lang.Throwable from label05 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label01 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public void countObsoleteDb(com.sleepycat.je.cleaner.BaseUtilizationTracker, long)
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        com.sleepycat.je.cleaner.BaseUtilizationTracker tracker;
        long mapLnLsn;
        byte $b0;
        boolean $z0;
        com.sleepycat.je.cleaner.DbFileSummaryMap $r0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        tracker := @parameter0: com.sleepycat.je.cleaner.BaseUtilizationTracker;

        mapLnLsn := @parameter1: long;

        $b0 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte createdAtLogVersion>;

        if $b0 < 6 goto label1;

        $z0 = <com.sleepycat.je.dbi.DatabaseImpl: boolean forceTreeWalkForTruncateAndRemove>;

        if $z0 != 0 goto label1;

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.cleaner.DbFileSummaryMap dbFileSummaries>;

        virtualinvoke tracker.<com.sleepycat.je.cleaner.BaseUtilizationTracker: void countObsoleteDb(com.sleepycat.je.cleaner.DbFileSummaryMap,long)>($r0, -1L);

     label1:
        return;
    }

    void finishedINListHarvest()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        boolean $z0;
        short $s0;
        java.lang.AssertionError $r0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $z0 = <com.sleepycat.je.dbi.DatabaseImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $s0 = this.<com.sleepycat.je.dbi.DatabaseImpl: short deleteState>;

        if $s0 == 2 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        this.<com.sleepycat.je.dbi.DatabaseImpl: short deleteState> = 3;

        return;
    }

    public com.sleepycat.je.cleaner.DbFileSummary getDbFileSummary(java.lang.Long, boolean)
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        java.lang.Long fileNum;
        boolean willModify, $z0;
        com.sleepycat.je.cleaner.DbFileSummaryMap $r0, $r2;
        java.lang.AssertionError $r1;
        com.sleepycat.je.dbi.EnvironmentImpl $r3;
        com.sleepycat.je.log.FileManager $r4;
        com.sleepycat.je.cleaner.DbFileSummary $r5;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        fileNum := @parameter0: java.lang.Long;

        willModify := @parameter1: boolean;

        this.<com.sleepycat.je.dbi.DatabaseImpl: boolean dirty> = 1;

        $z0 = <com.sleepycat.je.dbi.DatabaseImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.cleaner.DbFileSummaryMap dbFileSummaries>;

        if $r0 != null goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $r2 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.cleaner.DbFileSummaryMap dbFileSummaries>;

        $r3 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r4 = virtualinvoke $r3.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.log.FileManager getFileManager()>();

        $r5 = virtualinvoke $r2.<com.sleepycat.je.cleaner.DbFileSummaryMap: com.sleepycat.je.cleaner.DbFileSummary get(java.lang.Long,boolean,boolean,com.sleepycat.je.log.FileManager)>(fileNum, 1, 1, $r4);

        return $r5;
    }

    public void startAndFinishDelete() throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.dbi.DatabaseImpl this;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: void startDeleteProcessing()>();

        virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: void finishDeleteProcessing()>();

        return;
    }

    public void startDeleteProcessing()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        boolean $z0;
        short $s0;
        java.lang.AssertionError $r0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $z0 = <com.sleepycat.je.dbi.DatabaseImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $s0 = this.<com.sleepycat.je.dbi.DatabaseImpl: short deleteState>;

        if $s0 == 1 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        this.<com.sleepycat.je.dbi.DatabaseImpl: short deleteState> = 2;

        return;
    }

    public void setEnvironmentImpl(com.sleepycat.je.dbi.EnvironmentImpl)
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        com.sleepycat.je.tree.Tree $r0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        envImpl := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl envImpl> = envImpl;

        specialinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: void initWithEnvironment()>();

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.tree.Tree tree>;

        virtualinvoke $r0.<com.sleepycat.je.tree.Tree: void setDatabase(com.sleepycat.je.dbi.DatabaseImpl)>(this);

        return;
    }

    public java.lang.String dumpString(int)
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        int nSpaces, $i1;
        java.lang.StringBuilder sb, $r0, $r54;
        java.util.Iterator entries;
        java.util.Map$Entry entry;
        java.lang.Long fileNum;
        com.sleepycat.je.cleaner.DbFileSummary summary;
        java.lang.String $r1, $r5, $r31, $r41, $r60;
        com.sleepycat.je.dbi.DatabaseId $r4;
        short $s0;
        java.util.concurrent.atomic.AtomicInteger $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Comparator $r27, $r29, $r37, $r39;
        byte[] $r30, $r40;
        com.sleepycat.je.cleaner.DbFileSummaryMap $r48, $r49;
        java.util.Set $r50;
        java.lang.Object $r51, $r52, $r53;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        nSpaces := @parameter0: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        sb = $r0;

        $r1 = staticinvoke <com.sleepycat.je.tree.TreeUtils: java.lang.String indent(int)>(nSpaces);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<database id=\"");

        $r4 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.DatabaseId id>;

        $r5 = virtualinvoke $r4.<com.sleepycat.je.dbi.DatabaseId: java.lang.String toString()>();

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" deleteState=\"");

        $s0 = this.<com.sleepycat.je.dbi.DatabaseImpl: short deleteState>;

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s0);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" useCount=\"");

        $r12 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.concurrent.atomic.AtomicInteger useCount>;

        $i1 = virtualinvoke $r12.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" dupsort=\"");

        $z0 = virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: boolean getSortedDuplicates()>();

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" temporary=\"");

        $z1 = virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: boolean isTemporary()>();

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" deferredWrite=\"");

        $z2 = virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: boolean isDurableDeferredWrite()>();

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" keyPrefixing=\"");

        $z3 = virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: boolean getKeyPrefixing()>();

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r27 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator btreeComparator>;

        if $r27 == null goto label1;

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" btc=\"");

        $r29 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator btreeComparator>;

        $r30 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte[] btreeComparatorBytes>;

        $r31 = staticinvoke <com.sleepycat.je.dbi.DatabaseImpl: java.lang.String getComparatorClassName(java.util.Comparator,byte[])>($r29, $r30);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" btcPartial=\"");

        $z4 = this.<com.sleepycat.je.dbi.DatabaseImpl: boolean btreePartialComparator>;

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

     label1:
        $r37 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator duplicateComparator>;

        if $r37 == null goto label2;

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" dupc=\"");

        $r39 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator duplicateComparator>;

        $r40 = this.<com.sleepycat.je.dbi.DatabaseImpl: byte[] duplicateComparatorBytes>;

        $r41 = staticinvoke <com.sleepycat.je.dbi.DatabaseImpl: java.lang.String getComparatorClassName(java.util.Comparator,byte[])>($r39, $r40);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" dupcPartial=\"");

        $z5 = this.<com.sleepycat.je.dbi.DatabaseImpl: boolean duplicatePartialComparator>;

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z5);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

     label2:
        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r48 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.cleaner.DbFileSummaryMap dbFileSummaries>;

        if $r48 == null goto label4;

        $r49 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.cleaner.DbFileSummaryMap dbFileSummaries>;

        $r50 = virtualinvoke $r49.<com.sleepycat.je.cleaner.DbFileSummaryMap: java.util.Set entrySet()>();

        entries = interfaceinvoke $r50.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z6 = interfaceinvoke entries.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label4;

        $r51 = interfaceinvoke entries.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $r51;

        $r52 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        fileNum = (java.lang.Long) $r52;

        $r53 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        summary = (com.sleepycat.je.cleaner.DbFileSummary) $r53;

        $r54 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<file file=\"");

        virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(fileNum);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\">");

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(summary);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/file>");

        goto label3;

     label4:
        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</database>");

        $r60 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r60;
    }

    private static java.lang.String getComparatorClassName(java.util.Comparator, byte[])
    {
        java.util.Comparator comparator;
        byte[] comparatorBytes;
        java.lang.Class $r0;
        java.lang.String $r1, $r5;
        int $i0, $i1;
        java.lang.StringBuilder $r2, $r3, $r4;

        comparator := @parameter0: java.util.Comparator;

        comparatorBytes := @parameter1: byte[];

        if comparator == null goto label1;

        $r0 = virtualinvoke comparator.<java.lang.Object: java.lang.Class getClass()>();

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        return $r1;

     label1:
        if comparatorBytes == null goto label2;

        $i0 = lengthof comparatorBytes;

        if $i0 <= 0 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("byteLen: ");

        $i1 = lengthof comparatorBytes;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;

     label2:
        return "";
    }

    public com.sleepycat.je.log.ReplicationContext getRepContext()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        boolean $z0;
        com.sleepycat.je.log.ReplicationContext $r0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $z0 = virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: boolean isReplicated()>();

        if $z0 == 0 goto label1;

        $r0 = <com.sleepycat.je.log.ReplicationContext: com.sleepycat.je.log.ReplicationContext MASTER>;

        goto label2;

     label1:
        $r0 = <com.sleepycat.je.log.ReplicationContext: com.sleepycat.je.log.ReplicationContext NO_REPLICATE>;

     label2:
        return $r0;
    }

    public com.sleepycat.je.CacheMode getDefaultCacheMode()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        com.sleepycat.je.CacheMode $r0, $r1, $r2, $r4;
        boolean $z0;
        com.sleepycat.je.dbi.EnvironmentImpl $r3;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.CacheMode cacheMode>;

        if $r0 == null goto label1;

        $r1 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.CacheMode cacheMode>;

        return $r1;

     label1:
        $z0 = virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: boolean isInternalDb()>();

        if $z0 == 0 goto label2;

        $r2 = <com.sleepycat.je.CacheMode: com.sleepycat.je.CacheMode DEFAULT>;

        return $r2;

     label2:
        $r3 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r4 = virtualinvoke $r3.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.CacheMode getDefaultCacheMode()>();

        return $r4;
    }

    public java.util.Comparator getBtreeComparator()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        java.util.Comparator $r0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator btreeComparator>;

        return $r0;
    }

    public boolean isKnownSecondary()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        boolean $z0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $z0 = this.<com.sleepycat.je.dbi.DatabaseImpl: boolean knownSecondary>;

        return $z0;
    }

    public void setDebugDatabaseName(java.lang.String)
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        java.lang.String debugName;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        debugName := @parameter0: java.lang.String;

        this.<com.sleepycat.je.dbi.DatabaseImpl: java.lang.String debugDatabaseName> = debugName;

        specialinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: void resetDbType()>();

        return;
    }

    public boolean getBtreeComparatorByClass()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        boolean $z0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $z0 = this.<com.sleepycat.je.dbi.DatabaseImpl: boolean btreeComparatorByClassName>;

        return $z0;
    }

    public java.util.Comparator getDuplicateComparator()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        java.util.Comparator $r0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator duplicateComparator>;

        return $r0;
    }

    public boolean getDuplicateComparatorByClass()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        boolean $z0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $z0 = this.<com.sleepycat.je.dbi.DatabaseImpl: boolean duplicateComparatorByClassName>;

        return $z0;
    }

    public void removeReferringHandle(com.sleepycat.je.Database)
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        com.sleepycat.je.Database db;
        java.util.Set $r0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        db := @parameter0: com.sleepycat.je.Database;

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Set referringHandles>;

        interfaceinvoke $r0.<java.util.Set: boolean remove(java.lang.Object)>(db);

        return;
    }

    public int noteWriteHandleClose()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        int count;
        java.util.concurrent.atomic.AtomicInteger $r0;
        boolean $z0;
        java.lang.AssertionError $r1;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.concurrent.atomic.AtomicInteger writeCount>;

        count = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        $z0 = <com.sleepycat.je.dbi.DatabaseImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if count >= 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        return count;
    }

    public void handleClosed(boolean, boolean) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        boolean doSyncDw, deleteTempDb, $z0, $z1, operationOk#13, operationOk#24, $z2;
        com.sleepycat.je.txn.BasicLocker locker;
        com.sleepycat.je.dbi.DbTree$NeedRepLockerException e, $r7;
        java.lang.Error E, $r12;
        java.lang.Throwable l6, $r14;
        java.util.Set $r0;
        com.sleepycat.je.dbi.EnvironmentImpl $r1, $r2, $r8, $r13;
        com.sleepycat.je.dbi.DbTree $r3;
        java.lang.String $r4;
        com.sleepycat.je.dbi.DatabaseId $r5;
        com.sleepycat.je.EnvironmentFailureException $r9;
        com.sleepycat.je.DatabaseNotFoundException $r10, l5#33;
        com.sleepycat.je.LockConflictException $r11, l5#37;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        doSyncDw := @parameter0: boolean;

        deleteTempDb := @parameter1: boolean;

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Set referringHandles>;

        $z0 = interfaceinvoke $r0.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label13;

        specialinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: void clearTransientTriggers()>();

        $z1 = virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: boolean isTemporary()>();

        if $z1 == 0 goto label12;

        $r1 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        locker = staticinvoke <com.sleepycat.je.txn.BasicLocker: com.sleepycat.je.txn.BasicLocker createBasicLocker(com.sleepycat.je.dbi.EnvironmentImpl,boolean)>($r1, 1);

     label01:
        $r2 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r3 = virtualinvoke $r2.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.DbTree getDbTree()>();

        $r4 = virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: java.lang.String getName()>();

        $r5 = virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.DatabaseId getId()>();

        virtualinvoke $r3.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl dbRemove(com.sleepycat.je.txn.Locker,java.lang.String,com.sleepycat.je.dbi.DatabaseId)>(locker, $r4, $r5);

     label02:
        virtualinvoke locker.<com.sleepycat.je.txn.Locker: void operationEnd(boolean)>(1);

        goto label12;

     label03:
        $r7 := @caughtexception;

     label04:
        e = $r7;

        $r8 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r9 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedException(com.sleepycat.je.dbi.EnvironmentImpl,java.lang.Exception)>($r8, e);

        throw $r9;

     label05:
        $r10 := @caughtexception;

     label06:
        virtualinvoke locker.<com.sleepycat.je.txn.Locker: void operationEnd(boolean)>(0);

        goto label12;

     label07:
        $r11 := @caughtexception;

        virtualinvoke locker.<com.sleepycat.je.txn.Locker: void operationEnd(boolean)>(0);

        goto label12;

     label08:
        $r12 := @caughtexception;

     label09:
        E = $r12;

        $r13 = this.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r13.<com.sleepycat.je.dbi.EnvironmentImpl: void invalidate(java.lang.Error)>(E);

        throw E;

     label10:
        $r14 := @caughtexception;

        l6 = $r14;

     label11:
        virtualinvoke locker.<com.sleepycat.je.txn.Locker: void operationEnd(boolean)>(0);

        throw l6;

     label12:
        $z2 = virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: boolean isDurableDeferredWrite()>();

        if $z2 == 0 goto label13;

        virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: void sync(boolean)>(1);

     label13:
        return;

        catch com.sleepycat.je.dbi.DbTree$NeedRepLockerException from label01 to label02 with label03;
        catch com.sleepycat.je.DatabaseNotFoundException from label01 to label02 with label05;
        catch com.sleepycat.je.LockConflictException from label01 to label02 with label07;
        catch java.lang.Error from label01 to label02 with label08;
        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label04 to label06 with label10;
        catch java.lang.Throwable from label09 to label11 with label10;
    }

    private void clearTransientTriggers()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        java.util.List oldTriggers;
        java.util.LinkedList newTriggers, $r0;
        java.util.Iterator iter;
        com.sleepycat.je.trigger.Trigger trigger;
        boolean $z0, $z1;
        java.lang.Object $r1;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        oldTriggers = virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.List getTriggers()>();

        if oldTriggers != null goto label1;

        return;

     label1:
        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>(java.util.Collection)>(oldTriggers);

        newTriggers = $r0;

        iter = interfaceinvoke newTriggers.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke iter.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r1 = interfaceinvoke iter.<java.util.Iterator: java.lang.Object next()>();

        trigger = (com.sleepycat.je.trigger.Trigger) $r1;

        $z1 = trigger instanceof com.sleepycat.je.trigger.PersistentTrigger;

        if $z1 != 0 goto label3;

        interfaceinvoke iter.<java.util.Iterator: void remove()>();

     label3:
        goto label2;

     label4:
        virtualinvoke this.<com.sleepycat.je.dbi.DatabaseImpl: boolean setTriggers(com.sleepycat.je.txn.Locker,java.lang.String,java.util.List,boolean)>(null, null, newTriggers, 0);

        return;
    }

    public void setKnownSecondary()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        this.<com.sleepycat.je.dbi.DatabaseImpl: boolean knownSecondary> = 1;

        return;
    }

    public com.sleepycat.je.Database findPrimaryDatabase()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        java.util.Set l1, $r0, $r1;
        java.util.Iterator l2;
        com.sleepycat.je.Database obj, $r4;
        java.lang.Throwable l4, $r5;
        boolean $z0, $z1;
        java.lang.Object $r2;
        com.sleepycat.je.SecondaryDatabase $r3;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Set referringHandles>;

        l1 = $r0;

        entermonitor $r0;

     label01:
        $r1 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Set referringHandles>;

        l2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r2 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        obj = (com.sleepycat.je.Database) $r2;

        $z1 = obj instanceof com.sleepycat.je.SecondaryDatabase;

        if $z1 == 0 goto label04;

        $r3 = (com.sleepycat.je.SecondaryDatabase) obj;

        $r4 = virtualinvoke $r3.<com.sleepycat.je.SecondaryDatabase: com.sleepycat.je.Database getPrimaryDatabase()>();

        exitmonitor l1;

     label03:
        return $r4;

     label04:
        goto label02;

     label05:
        exitmonitor l1;

     label06:
        goto label10;

     label07:
        $r5 := @caughtexception;

     label08:
        l4 = $r5;

        exitmonitor l1;

     label09:
        throw l4;

     label10:
        return null;

        catch java.lang.Throwable from label01 to label03 with label07;
        catch java.lang.Throwable from label04 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    int getReferringHandleCount()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        java.util.Set $r0;
        int $i0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Set referringHandles>;

        $i0 = interfaceinvoke $r0.<java.util.Set: int size()>();

        return $i0;
    }

    public java.util.Set getReferringHandles()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        java.util.HashSet copy, $r0;
        java.util.Set l2, $r1, $r2;
        java.lang.Throwable l3, $r3;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        copy = $r0;

        $r1 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Set referringHandles>;

        l2 = $r1;

        entermonitor $r1;

     label1:
        $r2 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Set referringHandles>;

        virtualinvoke copy.<java.util.HashSet: boolean addAll(java.util.Collection)>($r2);

        exitmonitor l2;

     label2:
        goto label6;

     label3:
        $r3 := @caughtexception;

     label4:
        l3 = $r3;

        exitmonitor l2;

     label5:
        throw l3;

     label6:
        return copy;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isInUse()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        java.util.concurrent.atomic.AtomicInteger $r0;
        int $i0;
        boolean $z0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.concurrent.atomic.AtomicInteger useCount>;

        $i0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    boolean isInUseDuringDbRemove()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        java.util.concurrent.atomic.AtomicInteger $r0;
        int $i0, $i1, $i2;
        java.util.Set $r1;
        boolean $z0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.concurrent.atomic.AtomicInteger useCount>;

        $i0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $r1 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Set referringHandles>;

        $i1 = interfaceinvoke $r1.<java.util.Set: int size()>();

        $i2 = 1 + $i1;

        if $i0 <= $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    boolean isDebugNameAvailable()
    {
        com.sleepycat.je.dbi.DatabaseImpl this;
        java.lang.String $r0;
        boolean $z0;

        this := @this: com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = this.<com.sleepycat.je.dbi.DatabaseImpl: java.lang.String debugDatabaseName>;

        if $r0 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }


