    public int getMaxEncodedLength(int)
    {
        kanzi.function.RLT this;
        int srcLen, $i0;

        this := @this: kanzi.function.RLT;

        srcLen := @parameter0: int;

        $i0 = srcLen + 32;

        return $i0;
    }

    public boolean forward(kanzi.SliceByteArray, kanzi.SliceByteArray)
    {
        kanzi.function.RLT this;
        kanzi.SliceByteArray input, output;
        int count, srcEnd, dstEnd, dstEnd4, threshold, maxRun, $i0, $i1, $i2, $i3, i#23, i#31, srcIdx#44, dstIdx#47, run#59, $i4, $i7, $i9, $i10, $i11, $i12, $i14, $i15, $i16, $i17, i#118, $i18, $i19, $i21, $i22, $i23, $i24, i#142, $i26, srcIdx#153, run#162, $i30, $i32, $i33, dstIdx#203, $i34, $i35, $i36, dstIdx#219, $i38, $i41, run#241, dstIdx#254, $i42, $i43, $i44, dstIdx#270, $i46;
        byte[] src, dst, $r0, $r1, $r2, $r7, $r8;
        boolean $z0, $z1, res#57, $z2;
        int[] $r3, $r4, $r5, $r6, $r9;
        byte $b5, $b6, prev#72, val#78, $b20, $b25, $b27, $b28, $b29, prev#160, val#170, $b37, $b39, $b40, $b45, $b47, $b48;
        short $s8, $s13, $s31;

        this := @this: kanzi.function.RLT;

        input := @parameter0: kanzi.SliceByteArray;

        output := @parameter1: kanzi.SliceByteArray;

        $z0 = staticinvoke <kanzi.SliceByteArray: boolean isValid(kanzi.SliceByteArray)>(input);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label01;

        $z1 = staticinvoke <kanzi.SliceByteArray: boolean isValid(kanzi.SliceByteArray)>(output);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label02;

     label01:
        return 0;

     label02:
        $r0 = input.<kanzi.SliceByteArray: byte[] array>;

        $r1 = output.<kanzi.SliceByteArray: byte[] array>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r0 != $r1 goto label03;

        return 0;

     label03:
        count = input.<kanzi.SliceByteArray: int length>;

        $i0 = output.<kanzi.SliceByteArray: int length>;

        $i1 = output.<kanzi.SliceByteArray: int index>;

        $i2 = $i0 - $i1;

        $i3 = virtualinvoke this.<kanzi.function.RLT: int getMaxEncodedLength(int)>(count);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i2 >= $i3 goto label04;

        return 0;

     label04:
        i#23 = 0;

     label05:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#23);

        if i#23 >= 32 goto label06;

        $r2 = this.<kanzi.function.RLT: byte[] flags>;

        $r2[i#23] = 0;

        i#23 = i#23 + 1;

        goto label05;

     label06:
        i#31 = 0;

     label07:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#31);

        if i#31 >= 256 goto label08;

        $r3 = this.<kanzi.function.RLT: int[] counters>;

        $r3[i#31] = 0;

        i#31 = i#31 + 1;

        goto label07;

     label08:
        src = input.<kanzi.SliceByteArray: byte[] array>;

        dst = output.<kanzi.SliceByteArray: byte[] array>;

        srcIdx#44 = input.<kanzi.SliceByteArray: int index>;

        dstIdx#47 = output.<kanzi.SliceByteArray: int index>;

        srcEnd = srcIdx#44 + count;

        dstEnd = lengthof dst;

        dstEnd4 = dstEnd - 4;

        res#57 = 1;

        run#59 = 0;

        threshold = this.<kanzi.function.RLT: int runThreshold>;

        $i4 = this.<kanzi.function.RLT: int runThreshold>;

        maxRun = 73471 + $i4;

        $b5 = src[srcIdx#44];

        $b6 = $b5 ^ -1;

        prev#72 = (byte) $b6;

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(srcIdx#44);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(srcEnd);

        if srcIdx#44 >= srcEnd goto label12;

        $i7 = srcIdx#44;

        srcIdx#44 = srcIdx#44 + 1;

        val#78 = src[$i7];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(prev#72);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(val#78);

        if prev#72 != val#78 goto label10;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(run#59);

        if run#59 >= 73471 goto label10;

        run#59 = run#59 + 1;

        goto label09;

     label10:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(run#59);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(threshold);

        if run#59 < threshold goto label11;

        $r4 = this.<kanzi.function.RLT: int[] counters>;

        $s8 = prev#72 & 255;

        $i9 = $r4[$s8];

        $i10 = run#59 - threshold;

        $i11 = $i10 - 1;

        $i12 = $i9 + $i11;

        $r4[$s8] = $i12;

     label11:
        prev#72 = val#78;

        run#59 = 1;

        goto label09;

     label12:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(run#59);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(threshold);

        if run#59 < threshold goto label13;

        $r5 = this.<kanzi.function.RLT: int[] counters>;

        $s13 = prev#72 & 255;

        $i14 = $r5[$s13];

        $i15 = run#59 - threshold;

        $i16 = $i15 - 1;

        $i17 = $i14 + $i16;

        $r5[$s13] = $i17;

     label13:
        i#118 = 0;

     label14:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#118);

        if i#118 >= 256 goto label16;

        $r6 = this.<kanzi.function.RLT: int[] counters>;

        $i18 = $r6[i#118];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i18);

        if $i18 <= 0 goto label15;

        $r7 = this.<kanzi.function.RLT: byte[] flags>;

        $i19 = i#118 >> 3;

        $b20 = $r7[$i19];

        $i21 = i#118 & 7;

        $i22 = 7 - $i21;

        $i23 = 1 << $i22;

        $i24 = $b20 | $i23;

        $b25 = (byte) $i24;

        $r7[$i19] = $b25;

     label15:
        i#118 = i#118 + 1;

        goto label14;

     label16:
        i#142 = 0;

     label17:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#142);

        if i#142 >= 32 goto label18;

        $i26 = dstIdx#47;

        dstIdx#47 = dstIdx#47 + 1;

        $r8 = this.<kanzi.function.RLT: byte[] flags>;

        $b27 = $r8[i#142];

        dst[$i26] = $b27;

        i#142 = i#142 + 1;

        goto label17;

     label18:
        srcIdx#153 = input.<kanzi.SliceByteArray: int index>;

        $b28 = src[srcIdx#153];

        $b29 = $b28 ^ -1;

        prev#160 = (byte) $b29;

        run#162 = 0;

     label19:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(srcIdx#153);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(srcEnd);

        if srcIdx#153 >= srcEnd goto label26;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dstIdx#47);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dstEnd);

        if dstIdx#47 >= dstEnd goto label26;

        $i30 = srcIdx#153;

        srcIdx#153 = srcIdx#153 + 1;

        val#170 = src[$i30];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(prev#160);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(val#170);

        if prev#160 != val#170 goto label20;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(run#162);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(maxRun);

        if run#162 >= maxRun goto label20;

        $r9 = this.<kanzi.function.RLT: int[] counters>;

        $s31 = prev#160 & 255;

        $i32 = $r9[$s31];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i32);

        if $i32 <= 0 goto label20;

        run#162 = run#162 + 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(run#162);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(threshold);

        if run#162 >= threshold goto label19;

        $i33 = dstIdx#47;

        dstIdx#47 = dstIdx#47 + 1;

        dst[$i33] = prev#160;

        goto label19;

     label20:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(run#162);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(threshold);

        if run#162 < threshold goto label25;

        run#162 = run#162 - threshold;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dstIdx#47);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dstEnd4);

        if dstIdx#47 < dstEnd4 goto label22;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(run#162);

        if run#162 < 7936 goto label21;

        res#57 = 0;

        goto label26;

     label21:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(run#162);

        if run#162 < 224 goto label22;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dstIdx#47);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dstEnd4);

        if dstIdx#47 <= dstEnd4 goto label22;

        res#57 = 0;

        goto label26;

     label22:
        dstIdx#203 = dstIdx#47 + 1;

        dst[dstIdx#47] = prev#160;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(run#162);

        if run#162 < 224 goto label24;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(run#162);

        if run#162 >= 7936 goto label23;

        run#162 = run#162 + -224;

        $i34 = dstIdx#203;

        dstIdx#203 = dstIdx#203 + 1;

        $i35 = run#162 >> 8;

        $i36 = 224 + $i35;

        $b37 = (byte) $i36;

        dst[$i34] = $b37;

        goto label24;

     label23:
        run#162 = run#162 + -7936;

        dstIdx#219 = dstIdx#203 + 1;

        dst[dstIdx#203] = -1;

        dstIdx#203 = dstIdx#219 + 1;

        $i38 = run#162 >> 8;

        $b39 = (byte) $i38;

        dst[dstIdx#219] = $b39;

     label24:
        dstIdx#47 = dstIdx#203 + 1;

        $b40 = (byte) run#162;

        dst[dstIdx#203] = $b40;

     label25:
        $i41 = dstIdx#47;

        dstIdx#47 = dstIdx#47 + 1;

        dst[$i41] = val#170;

        prev#160 = val#170;

        run#162 = 1;

        goto label19;

     label26:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(run#162);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(threshold);

        if run#162 < threshold goto label31;

        run#241 = run#162 - threshold;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dstIdx#47);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dstEnd4);

        if dstIdx#47 < dstEnd4 goto label28;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(run#241);

        if run#241 < 7936 goto label27;

        res#57 = 0;

        goto label31;

     label27:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(run#241);

        if run#241 < 224 goto label31;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dstIdx#47);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dstEnd4);

        if dstIdx#47 <= dstEnd4 goto label31;

        res#57 = 0;

        goto label31;

     label28:
        dstIdx#254 = dstIdx#47 + 1;

        dst[dstIdx#47] = prev#160;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(run#241);

        if run#241 < 224 goto label30;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(run#241);

        if run#241 >= 7936 goto label29;

        run#241 = run#241 + -224;

        $i42 = dstIdx#254;

        dstIdx#254 = dstIdx#254 + 1;

        $i43 = run#241 >> 8;

        $i44 = 224 + $i43;

        $b45 = (byte) $i44;

        dst[$i42] = $b45;

        goto label30;

     label29:
        run#241 = run#241 + -7936;

        dstIdx#270 = dstIdx#254 + 1;

        dst[dstIdx#254] = -1;

        dstIdx#254 = dstIdx#270 + 1;

        $i46 = run#241 >>> 8;

        $b47 = (byte) $i46;

        dst[dstIdx#270] = $b47;

     label30:
        dstIdx#47 = dstIdx#254 + 1;

        $b48 = (byte) run#241;

        dst[dstIdx#254] = $b48;

     label31:
        input.<kanzi.SliceByteArray: int index> = srcIdx#153;

        output.<kanzi.SliceByteArray: int index> = dstIdx#47;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(res#57);

        if res#57 == 0 goto label32;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(srcIdx#153);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(srcEnd);

        if srcIdx#153 != srcEnd goto label32;

        $z2 = 1;

        goto label33;

     label32:
        $z2 = 0;

     label33:
        return $z2;
    }

    public void <init>()
    {
        kanzi.function.RLT this;

        this := @this: kanzi.function.RLT;

        specialinvoke this.<kanzi.function.RLT: void <init>(int)>(2);

        return;
    }

    public void <init>(int)
    {
        kanzi.function.RLT this;
        int runThreshold;
        java.lang.IllegalArgumentException $r0;
        int[] $r1;
        byte[] $r2;

        this := @this: kanzi.function.RLT;

        runThreshold := @parameter0: int;

        specialinvoke this.<java.lang.Object: void <init>()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(runThreshold);

        if runThreshold >= 2 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid run threshold parameter (must be at least 2)");

        throw $r0;

     label1:
        this.<kanzi.function.RLT: int runThreshold> = runThreshold;

        $r1 = newarray (int)[256];

        this.<kanzi.function.RLT: int[] counters> = $r1;

        $r2 = newarray (byte)[32];

        this.<kanzi.function.RLT: byte[] flags> = $r2;

        return;
    }


