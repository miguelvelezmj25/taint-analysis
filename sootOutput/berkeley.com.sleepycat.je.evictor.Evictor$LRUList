    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "berkeley/com/sleepycat/je/evictor/Evictor";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled> = $z1;

        return;
    }

    void <init>(int)
    {
        berkeley.com.sleepycat.je.evictor.Evictor$LRUList this;
        int id;

        this := @this: berkeley.com.sleepycat.je.evictor.Evictor$LRUList;

        id := @parameter0: int;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: int size> = 0;

        this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front> = null;

        this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN back> = null;

        this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: int id> = id;

        return;
    }

    int getSize()
    {
        berkeley.com.sleepycat.je.evictor.Evictor$LRUList this;
        int $i0;

        this := @this: berkeley.com.sleepycat.je.evictor.Evictor$LRUList;

        $i0 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: int size>;

        return $i0;
    }

    synchronized void removeINsForEnv(berkeley.com.sleepycat.je.dbi.EnvironmentImpl)
    {
        berkeley.com.sleepycat.je.evictor.Evictor$LRUList this;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl env, $r4;
        berkeley.com.sleepycat.je.tree.IN nextNode, prevNode, $r0, $r1, node#10, $r5, $r6, $r8, $r10, $r12, $r16, $r18, $r20, $r21, $r24, $r26, $r28, $r29, $r32, $r33, $r35, $r36, $r38, $r40;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15;
        java.lang.AssertionError $r2, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r23, $r25, $r27, $r31, $r34, $r37, $r39, $r41;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;

        this := @this: berkeley.com.sleepycat.je.evictor.Evictor$LRUList;

        env := @parameter0: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        $r0 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        if $r0 != null goto label02;

        $z0 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $r1 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN back>;

        if $r1 == null goto label01;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label01:
        return;

     label02:
        node#10 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

     label03:
        nextNode = virtualinvoke node#10.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getNextLRUNode()>();

        prevNode = virtualinvoke node#10.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getPrevLRUNode()>();

        $r3 = virtualinvoke node#10.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        $r4 = virtualinvoke $r3.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        if $r4 != env goto label23;

        virtualinvoke node#10.<berkeley.com.sleepycat.je.tree.IN: void setNextLRUNode(berkeley.com.sleepycat.je.tree.IN)>(null);

        virtualinvoke node#10.<berkeley.com.sleepycat.je.tree.IN: void setPrevLRUNode(berkeley.com.sleepycat.je.tree.IN)>(null);

        $r5 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        $r6 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN back>;

        if $r5 != $r6 goto label08;

        $z1 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z1 != 0 goto label04;

        $i0 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: int size>;

        if $i0 == 1 goto label04;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label04:
        $z2 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z2 != 0 goto label05;

        $r8 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        if $r8 == node#10 goto label05;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label05:
        $z3 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z3 != 0 goto label06;

        $r10 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        if nextNode == $r10 goto label06;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label06:
        $z4 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z4 != 0 goto label07;

        $r12 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        if prevNode == $r12 goto label07;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label07:
        this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front> = null;

        this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN back> = null;

        $i1 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: int size>;

        $i2 = $i1 - 1;

        this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: int size> = $i2;

        goto label26;

     label08:
        if prevNode != node#10 goto label12;

        $z5 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z5 != 0 goto label09;

        $i3 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: int size>;

        if $i3 > 1 goto label09;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label09:
        $z6 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z6 != 0 goto label10;

        $r16 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        if $r16 == node#10 goto label10;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();

        throw $r17;

     label10:
        $z7 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z7 != 0 goto label11;

        $r18 = virtualinvoke nextNode.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getPrevLRUNode()>();

        if $r18 == node#10 goto label11;

        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();

        throw $r19;

     label11:
        this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front> = nextNode;

        $r20 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        $r21 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        virtualinvoke $r20.<berkeley.com.sleepycat.je.tree.IN: void setPrevLRUNode(berkeley.com.sleepycat.je.tree.IN)>($r21);

        node#10 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        $i4 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: int size>;

        $i5 = $i4 - 1;

        this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: int size> = $i5;

        goto label25;

     label12:
        if nextNode != node#10 goto label16;

        $z8 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z8 != 0 goto label13;

        $i6 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: int size>;

        if $i6 > 1 goto label13;

        $r23 = new java.lang.AssertionError;

        specialinvoke $r23.<java.lang.AssertionError: void <init>()>();

        throw $r23;

     label13:
        $z9 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z9 != 0 goto label14;

        $r24 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN back>;

        if $r24 == node#10 goto label14;

        $r25 = new java.lang.AssertionError;

        specialinvoke $r25.<java.lang.AssertionError: void <init>()>();

        throw $r25;

     label14:
        $z10 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z10 != 0 goto label15;

        $r26 = virtualinvoke prevNode.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getNextLRUNode()>();

        if $r26 == node#10 goto label15;

        $r27 = new java.lang.AssertionError;

        specialinvoke $r27.<java.lang.AssertionError: void <init>()>();

        throw $r27;

     label15:
        this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN back> = prevNode;

        $r28 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN back>;

        $r29 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN back>;

        virtualinvoke $r28.<berkeley.com.sleepycat.je.tree.IN: void setNextLRUNode(berkeley.com.sleepycat.je.tree.IN)>($r29);

        $i7 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: int size>;

        $i8 = $i7 - 1;

        this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: int size> = $i8;

        goto label26;

     label16:
        $z11 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z11 != 0 goto label17;

        $i9 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: int size>;

        if $i9 > 2 goto label17;

        $r31 = new java.lang.AssertionError;

        specialinvoke $r31.<java.lang.AssertionError: void <init>()>();

        throw $r31;

     label17:
        $z12 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z12 != 0 goto label18;

        $r32 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        $r33 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN back>;

        if $r32 != $r33 goto label18;

        $r34 = new java.lang.AssertionError;

        specialinvoke $r34.<java.lang.AssertionError: void <init>()>();

        throw $r34;

     label18:
        $z13 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z13 != 0 goto label20;

        $r35 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        if $r35 == node#10 goto label19;

        $r36 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN back>;

        if $r36 != node#10 goto label20;

     label19:
        $r37 = new java.lang.AssertionError;

        specialinvoke $r37.<java.lang.AssertionError: void <init>()>();

        throw $r37;

     label20:
        $z14 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z14 != 0 goto label21;

        $r38 = virtualinvoke prevNode.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getNextLRUNode()>();

        if $r38 == node#10 goto label21;

        $r39 = new java.lang.AssertionError;

        specialinvoke $r39.<java.lang.AssertionError: void <init>()>();

        throw $r39;

     label21:
        $z15 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z15 != 0 goto label22;

        $r40 = virtualinvoke nextNode.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getPrevLRUNode()>();

        if $r40 == node#10 goto label22;

        $r41 = new java.lang.AssertionError;

        specialinvoke $r41.<java.lang.AssertionError: void <init>()>();

        throw $r41;

     label22:
        virtualinvoke prevNode.<berkeley.com.sleepycat.je.tree.IN: void setNextLRUNode(berkeley.com.sleepycat.je.tree.IN)>(nextNode);

        virtualinvoke nextNode.<berkeley.com.sleepycat.je.tree.IN: void setPrevLRUNode(berkeley.com.sleepycat.je.tree.IN)>(prevNode);

        node#10 = nextNode;

        $i10 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: int size>;

        $i11 = $i10 - 1;

        this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: int size> = $i11;

        goto label25;

     label23:
        if nextNode != node#10 goto label24;

        goto label26;

     label24:
        node#10 = nextNode;

     label25:
        goto label03;

     label26:
        return;
    }

    synchronized boolean remove(berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.evictor.Evictor$LRUList this;
        berkeley.com.sleepycat.je.tree.IN node, $r0, $r1, $r3, $r5, $r6, $r8, $r10, $r11, $r12, $r14, $r15, $r16, $r18, $r19, $r21, $r22, $r24, $r25, $r26, $r27, $r28, $r30, $r31, $r33, $r34, $r35, $r37, $r38, $r40, $r41, $r43, $r44, $r46, $r47, $r49, $r50, $r51, $r52;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        java.lang.AssertionError $r2, $r4, $r7, $r9, $r13, $r17, $r20, $r23, $r29, $r32, $r36, $r39, $r42, $r45, $r48;
        int $i0, $i1, $i2, $i3;

        this := @this: berkeley.com.sleepycat.je.evictor.Evictor$LRUList;

        node := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        $r0 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getNextLRUNode()>();

        if $r0 != null goto label02;

        $z0 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $r1 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getPrevLRUNode()>();

        if $r1 == null goto label01;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label01:
        return 0;

     label02:
        $z1 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z1 != 0 goto label03;

        $r3 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getPrevLRUNode()>();

        if $r3 != null goto label03;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label03:
        $r5 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        $r6 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN back>;

        if $r5 != $r6 goto label08;

        $z2 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z2 != 0 goto label04;

        $i0 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: int size>;

        if $i0 == 1 goto label04;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label04:
        $z3 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z3 != 0 goto label05;

        $r8 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        if $r8 == node goto label05;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label05:
        $z4 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z4 != 0 goto label06;

        $r10 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        $r11 = virtualinvoke $r10.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getNextLRUNode()>();

        $r12 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        if $r11 == $r12 goto label06;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label06:
        $z5 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z5 != 0 goto label07;

        $r14 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        $r15 = virtualinvoke $r14.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getPrevLRUNode()>();

        $r16 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        if $r15 == $r16 goto label07;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();

        throw $r17;

     label07:
        this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front> = null;

        this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN back> = null;

        goto label21;

     label08:
        $r18 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getPrevLRUNode()>();

        if $r18 != node goto label11;

        $z6 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z6 != 0 goto label09;

        $r19 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        if $r19 == node goto label09;

        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();

        throw $r20;

     label09:
        $z7 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z7 != 0 goto label10;

        $r21 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getNextLRUNode()>();

        $r22 = virtualinvoke $r21.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getPrevLRUNode()>();

        if $r22 == node goto label10;

        $r23 = new java.lang.AssertionError;

        specialinvoke $r23.<java.lang.AssertionError: void <init>()>();

        throw $r23;

     label10:
        $r24 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getNextLRUNode()>();

        this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front> = $r24;

        $r25 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        $r26 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        virtualinvoke $r25.<berkeley.com.sleepycat.je.tree.IN: void setPrevLRUNode(berkeley.com.sleepycat.je.tree.IN)>($r26);

        goto label21;

     label11:
        $r27 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getNextLRUNode()>();

        if $r27 != node goto label14;

        $z8 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z8 != 0 goto label12;

        $r28 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN back>;

        if $r28 == node goto label12;

        $r29 = new java.lang.AssertionError;

        specialinvoke $r29.<java.lang.AssertionError: void <init>()>();

        throw $r29;

     label12:
        $z9 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z9 != 0 goto label13;

        $r30 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getPrevLRUNode()>();

        $r31 = virtualinvoke $r30.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getNextLRUNode()>();

        if $r31 == node goto label13;

        $r32 = new java.lang.AssertionError;

        specialinvoke $r32.<java.lang.AssertionError: void <init>()>();

        throw $r32;

     label13:
        $r33 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getPrevLRUNode()>();

        this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN back> = $r33;

        $r34 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN back>;

        $r35 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN back>;

        virtualinvoke $r34.<berkeley.com.sleepycat.je.tree.IN: void setNextLRUNode(berkeley.com.sleepycat.je.tree.IN)>($r35);

        goto label21;

     label14:
        $z10 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z10 != 0 goto label15;

        $i1 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: int size>;

        if $i1 > 2 goto label15;

        $r36 = new java.lang.AssertionError;

        specialinvoke $r36.<java.lang.AssertionError: void <init>()>();

        throw $r36;

     label15:
        $z11 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z11 != 0 goto label16;

        $r37 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        $r38 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN back>;

        if $r37 != $r38 goto label16;

        $r39 = new java.lang.AssertionError;

        specialinvoke $r39.<java.lang.AssertionError: void <init>()>();

        throw $r39;

     label16:
        $z12 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z12 != 0 goto label18;

        $r40 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        if $r40 == node goto label17;

        $r41 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN back>;

        if $r41 != node goto label18;

     label17:
        $r42 = new java.lang.AssertionError;

        specialinvoke $r42.<java.lang.AssertionError: void <init>()>();

        throw $r42;

     label18:
        $z13 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z13 != 0 goto label19;

        $r43 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getPrevLRUNode()>();

        $r44 = virtualinvoke $r43.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getNextLRUNode()>();

        if $r44 == node goto label19;

        $r45 = new java.lang.AssertionError;

        specialinvoke $r45.<java.lang.AssertionError: void <init>()>();

        throw $r45;

     label19:
        $z14 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z14 != 0 goto label20;

        $r46 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getNextLRUNode()>();

        $r47 = virtualinvoke $r46.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getPrevLRUNode()>();

        if $r47 == node goto label20;

        $r48 = new java.lang.AssertionError;

        specialinvoke $r48.<java.lang.AssertionError: void <init>()>();

        throw $r48;

     label20:
        $r49 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getPrevLRUNode()>();

        $r50 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getNextLRUNode()>();

        virtualinvoke $r49.<berkeley.com.sleepycat.je.tree.IN: void setNextLRUNode(berkeley.com.sleepycat.je.tree.IN)>($r50);

        $r51 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getNextLRUNode()>();

        $r52 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getPrevLRUNode()>();

        virtualinvoke $r51.<berkeley.com.sleepycat.je.tree.IN: void setPrevLRUNode(berkeley.com.sleepycat.je.tree.IN)>($r52);

     label21:
        virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: void setNextLRUNode(berkeley.com.sleepycat.je.tree.IN)>(null);

        virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: void setPrevLRUNode(berkeley.com.sleepycat.je.tree.IN)>(null);

        $i2 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: int size>;

        $i3 = $i2 - 1;

        this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: int size> = $i3;

        return 1;
    }

    synchronized void addFront(berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.evictor.Evictor$LRUList this;
        berkeley.com.sleepycat.je.tree.IN node, $r0, $r1, $r20, $r21, $r22, $r23, $r25, $r26;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r2, $r11;
        java.lang.StringBuilder $r3, $r5, $r6, $r9, $r10, $r13, $r14, $r15, $r16;
        java.lang.Thread $r4, $r7;
        long $l0, $l1;
        java.lang.String $r8, $r12, $r17;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r18;
        boolean $z0, $z1, $z2, $z3;
        java.lang.AssertionError $r19, $r24;
        int $i2, $i3;

        this := @this: berkeley.com.sleepycat.je.evictor.Evictor$LRUList;

        node := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        $r0 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getNextLRUNode()>();

        if $r0 != null goto label1;

        $r1 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getPrevLRUNode()>();

        if $r1 == null goto label2;

     label1:
        $r2 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $l0 = virtualinvoke $r4.<java.lang.Thread: long getId()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r8 = virtualinvoke $r7.<java.lang.Thread: java.lang.String getName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r11 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r12 = virtualinvoke $r11.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: java.lang.String getName()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempting to add node ");

        $l1 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: long getNodeId()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in the LRU, but node is already in the LRU.");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String)>($r2, $r17);

        throw $r18;

     label2:
        $z0 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z0 != 0 goto label4;

        $z1 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: boolean isDIN()>();

        if $z1 != 0 goto label3;

        $z2 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: boolean isDBIN()>();

        if $z2 == 0 goto label4;

     label3:
        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();

        throw $r19;

     label4:
        virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: void setPrevLRUNode(berkeley.com.sleepycat.je.tree.IN)>(node);

        $r20 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        if $r20 == null goto label5;

        $r21 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: void setNextLRUNode(berkeley.com.sleepycat.je.tree.IN)>($r21);

        $r22 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        virtualinvoke $r22.<berkeley.com.sleepycat.je.tree.IN: void setPrevLRUNode(berkeley.com.sleepycat.je.tree.IN)>(node);

        goto label7;

     label5:
        $z3 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z3 != 0 goto label6;

        $r23 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN back>;

        if $r23 == null goto label6;

        $r24 = new java.lang.AssertionError;

        specialinvoke $r24.<java.lang.AssertionError: void <init>()>();

        throw $r24;

     label6:
        virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: void setNextLRUNode(berkeley.com.sleepycat.je.tree.IN)>(node);

     label7:
        this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front> = node;

        $r25 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN back>;

        if $r25 != null goto label8;

        $r26 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN back> = $r26;

     label8:
        $i2 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: int size>;

        $i3 = $i2 + 1;

        this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: int size> = $i3;

        return;
    }

    synchronized void addBack(berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.evictor.Evictor$LRUList this;
        berkeley.com.sleepycat.je.tree.IN node, $r0, $r1, $r20, $r21, $r22, $r23, $r25, $r26;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r2, $r11;
        java.lang.StringBuilder $r3, $r5, $r6, $r9, $r10, $r13, $r14, $r15, $r16;
        java.lang.Thread $r4, $r7;
        long $l0, $l1;
        java.lang.String $r8, $r12, $r17;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r18;
        boolean $z0, $z1, $z2, $z3;
        java.lang.AssertionError $r19, $r24;
        int $i2, $i3;

        this := @this: berkeley.com.sleepycat.je.evictor.Evictor$LRUList;

        node := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        $r0 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getNextLRUNode()>();

        if $r0 != null goto label1;

        $r1 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getPrevLRUNode()>();

        if $r1 == null goto label2;

     label1:
        $r2 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $l0 = virtualinvoke $r4.<java.lang.Thread: long getId()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r8 = virtualinvoke $r7.<java.lang.Thread: java.lang.String getName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r11 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r12 = virtualinvoke $r11.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: java.lang.String getName()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempting to add node ");

        $l1 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: long getNodeId()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in the LRU, but node is already in the LRU.");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String)>($r2, $r17);

        throw $r18;

     label2:
        $z0 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z0 != 0 goto label4;

        $z1 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: boolean isDIN()>();

        if $z1 != 0 goto label3;

        $z2 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: boolean isDBIN()>();

        if $z2 == 0 goto label4;

     label3:
        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();

        throw $r19;

     label4:
        virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: void setNextLRUNode(berkeley.com.sleepycat.je.tree.IN)>(node);

        $r20 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN back>;

        if $r20 == null goto label5;

        $r21 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN back>;

        virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: void setPrevLRUNode(berkeley.com.sleepycat.je.tree.IN)>($r21);

        $r22 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN back>;

        virtualinvoke $r22.<berkeley.com.sleepycat.je.tree.IN: void setNextLRUNode(berkeley.com.sleepycat.je.tree.IN)>(node);

        goto label7;

     label5:
        $z3 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z3 != 0 goto label6;

        $r23 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        if $r23 == null goto label6;

        $r24 = new java.lang.AssertionError;

        specialinvoke $r24.<java.lang.AssertionError: void <init>()>();

        throw $r24;

     label6:
        virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: void setPrevLRUNode(berkeley.com.sleepycat.je.tree.IN)>(node);

     label7:
        this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN back> = node;

        $r25 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        if $r25 != null goto label8;

        $r26 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN back>;

        this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front> = $r26;

     label8:
        $i2 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: int size>;

        $i3 = $i2 + 1;

        this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: int size> = $i3;

        return;
    }

    synchronized boolean contains(berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.evictor.Evictor$LRUList this;
        berkeley.com.sleepycat.je.tree.IN node, $r0;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.evictor.Evictor$LRUList;

        node := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        $r0 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getNextLRUNode()>();

        if $r0 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    synchronized berkeley.com.sleepycat.je.tree.IN removeFront()
    {
        berkeley.com.sleepycat.je.evictor.Evictor$LRUList this;
        berkeley.com.sleepycat.je.tree.IN res, $r0, $r1, $r3, $r4, $r5, $r6, $r7, $r9, $r10, $r11, $r15, $r16, $r17, $r18;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.AssertionError $r2, $r8, $r12, $r13, $r14;
        int $i0, $i1, $i2, $i3;

        this := @this: berkeley.com.sleepycat.je.evictor.Evictor$LRUList;

        $r0 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        if $r0 != null goto label2;

        $z0 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN back>;

        if $r1 == null goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        return null;

     label2:
        res = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        $r3 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        $r4 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN back>;

        if $r3 != $r4 goto label6;

        $z1 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        $r5 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        $r6 = virtualinvoke $r5.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getNextLRUNode()>();

        $r7 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        if $r6 == $r7 goto label3;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label3:
        $z2 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z2 != 0 goto label4;

        $r9 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        $r10 = virtualinvoke $r9.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getPrevLRUNode()>();

        $r11 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        if $r10 == $r11 goto label4;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label4:
        $z3 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z3 != 0 goto label5;

        $i0 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: int size>;

        if $i0 == 1 goto label5;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label5:
        this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front> = null;

        this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN back> = null;

        goto label8;

     label6:
        $z4 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z4 != 0 goto label7;

        $i1 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: int size>;

        if $i1 > 1 goto label7;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label7:
        $r15 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        $r16 = virtualinvoke $r15.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getNextLRUNode()>();

        this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front> = $r16;

        $r17 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        $r18 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        virtualinvoke $r17.<berkeley.com.sleepycat.je.tree.IN: void setPrevLRUNode(berkeley.com.sleepycat.je.tree.IN)>($r18);

     label8:
        virtualinvoke res.<berkeley.com.sleepycat.je.tree.IN: void setNextLRUNode(berkeley.com.sleepycat.je.tree.IN)>(null);

        virtualinvoke res.<berkeley.com.sleepycat.je.tree.IN: void setPrevLRUNode(berkeley.com.sleepycat.je.tree.IN)>(null);

        $i2 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: int size>;

        $i3 = $i2 - 1;

        this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: int size> = $i3;

        return res;
    }

    synchronized void moveBack(berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.evictor.Evictor$LRUList this;
        berkeley.com.sleepycat.je.tree.IN node, $r0, $r1, $r3, $r4, $r6, $r7, $r9, $r10, $r13, $r14, $r16, $r17, $r19, $r20, $r21, $r22, $r23, $r25, $r26, $r28, $r29, $r31, $r32, $r33, $r34, $r35, $r36;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.AssertionError $r2, $r5, $r8, $r11, $r12, $r15, $r18, $r24, $r27, $r30;
        int $i0;

        this := @this: berkeley.com.sleepycat.je.evictor.Evictor$LRUList;

        node := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        $r0 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getNextLRUNode()>();

        if $r0 != null goto label02;

        $z0 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $r1 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getPrevLRUNode()>();

        if $r1 == null goto label01;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label01:
        return;

     label02:
        $r3 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getNextLRUNode()>();

        if $r3 != node goto label04;

        $z1 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z1 != 0 goto label03;

        $r4 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN back>;

        if $r4 == node goto label03;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label03:
        $z2 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z2 != 0 goto label15;

        $r6 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getPrevLRUNode()>();

        $r7 = virtualinvoke $r6.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getNextLRUNode()>();

        if $r7 == node goto label15;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label04:
        $z3 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z3 != 0 goto label05;

        $r9 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        $r10 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN back>;

        if $r9 != $r10 goto label05;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label05:
        $z4 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z4 != 0 goto label06;

        $i0 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: int size>;

        if $i0 > 1 goto label06;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label06:
        $r13 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getPrevLRUNode()>();

        if $r13 != node goto label09;

        $z5 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z5 != 0 goto label07;

        $r14 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        if $r14 == node goto label07;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label07:
        $z6 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z6 != 0 goto label08;

        $r16 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getNextLRUNode()>();

        $r17 = virtualinvoke $r16.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getPrevLRUNode()>();

        if $r17 == node goto label08;

        $r18 = new java.lang.AssertionError;

        specialinvoke $r18.<java.lang.AssertionError: void <init>()>();

        throw $r18;

     label08:
        $r19 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getNextLRUNode()>();

        this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front> = $r19;

        $r20 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        $r21 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        virtualinvoke $r20.<berkeley.com.sleepycat.je.tree.IN: void setPrevLRUNode(berkeley.com.sleepycat.je.tree.IN)>($r21);

        goto label14;

     label09:
        $z7 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z7 != 0 goto label11;

        $r22 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN front>;

        if $r22 == node goto label10;

        $r23 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN back>;

        if $r23 != node goto label11;

     label10:
        $r24 = new java.lang.AssertionError;

        specialinvoke $r24.<java.lang.AssertionError: void <init>()>();

        throw $r24;

     label11:
        $z8 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z8 != 0 goto label12;

        $r25 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getPrevLRUNode()>();

        $r26 = virtualinvoke $r25.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getNextLRUNode()>();

        if $r26 == node goto label12;

        $r27 = new java.lang.AssertionError;

        specialinvoke $r27.<java.lang.AssertionError: void <init>()>();

        throw $r27;

     label12:
        $z9 = <berkeley.com.sleepycat.je.evictor.Evictor$LRUList: boolean $assertionsDisabled>;

        if $z9 != 0 goto label13;

        $r28 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getNextLRUNode()>();

        $r29 = virtualinvoke $r28.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getPrevLRUNode()>();

        if $r29 == node goto label13;

        $r30 = new java.lang.AssertionError;

        specialinvoke $r30.<java.lang.AssertionError: void <init>()>();

        throw $r30;

     label13:
        $r31 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getPrevLRUNode()>();

        $r32 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getNextLRUNode()>();

        virtualinvoke $r31.<berkeley.com.sleepycat.je.tree.IN: void setNextLRUNode(berkeley.com.sleepycat.je.tree.IN)>($r32);

        $r33 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getNextLRUNode()>();

        $r34 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getPrevLRUNode()>();

        virtualinvoke $r33.<berkeley.com.sleepycat.je.tree.IN: void setPrevLRUNode(berkeley.com.sleepycat.je.tree.IN)>($r34);

     label14:
        virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: void setNextLRUNode(berkeley.com.sleepycat.je.tree.IN)>(node);

        $r35 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN back>;

        virtualinvoke node.<berkeley.com.sleepycat.je.tree.IN: void setPrevLRUNode(berkeley.com.sleepycat.je.tree.IN)>($r35);

        $r36 = this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN back>;

        virtualinvoke $r36.<berkeley.com.sleepycat.je.tree.IN: void setNextLRUNode(berkeley.com.sleepycat.je.tree.IN)>(node);

        this.<berkeley.com.sleepycat.je.evictor.Evictor$LRUList: berkeley.com.sleepycat.je.tree.IN back> = node;

     label15:
        return;
    }


