    static void <clinit>()
    {
        berkeley.com.sleepycat.je.DatabaseConfig $r0;

        $r0 = new berkeley.com.sleepycat.je.DatabaseConfig;

        specialinvoke $r0.<berkeley.com.sleepycat.je.DatabaseConfig: void <init>()>();

        <berkeley.com.sleepycat.je.DatabaseConfig: berkeley.com.sleepycat.je.DatabaseConfig DEFAULT> = $r0;

        return;
    }

    public void <init>()
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        java.util.LinkedList $r0;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean allowCreate> = 0;

        this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean exclusiveCreate> = 0;

        this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean transactional> = 0;

        this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean readOnly> = 0;

        this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean sortedDuplicates> = 0;

        this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean deferredWrite> = 0;

        this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean temporary> = 0;

        this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean keyPrefixing> = 0;

        this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean replicated> = 1;

        this.<berkeley.com.sleepycat.je.DatabaseConfig: java.util.Comparator btreeComparator> = null;

        this.<berkeley.com.sleepycat.je.DatabaseConfig: java.util.Comparator duplicateComparator> = null;

        this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean btreeComparatorByClassName> = 0;

        this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean duplicateComparatorByClassName> = 0;

        this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean overrideBtreeComparator> = 0;

        this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean overrideDuplicateComparator> = 0;

        this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean useExistingConfig> = 0;

        this.<berkeley.com.sleepycat.je.DatabaseConfig: berkeley.com.sleepycat.je.CacheMode cacheMode> = null;

        this.<berkeley.com.sleepycat.je.DatabaseConfig: berkeley.com.sleepycat.je.SecondaryAssociation secAssociation> = null;

        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>()>();

        this.<berkeley.com.sleepycat.je.DatabaseConfig: java.util.List triggers> = $r0;

        return;
    }

    public boolean getTransactional()
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        $z0 = this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean transactional>;

        return $z0;
    }

    public boolean getExclusiveCreate()
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        $z0 = this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean exclusiveCreate>;

        return $z0;
    }

    public boolean getAllowCreate()
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        $z0 = this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean allowCreate>;

        return $z0;
    }

    public berkeley.com.sleepycat.je.DatabaseConfig setAllowCreate(boolean)
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        boolean allowCreate;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        allowCreate := @parameter0: boolean;

        virtualinvoke this.<berkeley.com.sleepycat.je.DatabaseConfig: void setAllowCreateVoid(boolean)>(allowCreate);

        return this;
    }

    public berkeley.com.sleepycat.je.DatabaseConfig setExclusiveCreate(boolean)
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        boolean exclusiveCreate;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        exclusiveCreate := @parameter0: boolean;

        virtualinvoke this.<berkeley.com.sleepycat.je.DatabaseConfig: void setExclusiveCreateVoid(boolean)>(exclusiveCreate);

        return this;
    }

    public berkeley.com.sleepycat.je.DatabaseConfig setTemporary(boolean)
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        boolean temporary;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        temporary := @parameter0: boolean;

        virtualinvoke this.<berkeley.com.sleepycat.je.DatabaseConfig: void setTemporaryVoid(boolean)>(temporary);

        return this;
    }

    public berkeley.com.sleepycat.je.DatabaseConfig setReplicated(boolean)
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        boolean replicated;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        replicated := @parameter0: boolean;

        virtualinvoke this.<berkeley.com.sleepycat.je.DatabaseConfig: void setReplicatedVoid(boolean)>(replicated);

        return this;
    }

    public berkeley.com.sleepycat.je.DatabaseConfig setReadOnly(boolean)
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        boolean readOnly;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        readOnly := @parameter0: boolean;

        virtualinvoke this.<berkeley.com.sleepycat.je.DatabaseConfig: void setReadOnlyVoid(boolean)>(readOnly);

        return this;
    }

    public berkeley.com.sleepycat.je.DatabaseConfig setTransactional(boolean)
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        boolean transactional;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        transactional := @parameter0: boolean;

        virtualinvoke this.<berkeley.com.sleepycat.je.DatabaseConfig: void setTransactionalVoid(boolean)>(transactional);

        return this;
    }

    public void setTransactionalVoid(boolean)
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        boolean transactional;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        transactional := @parameter0: boolean;

        this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean transactional> = transactional;

        return;
    }

    public void setReadOnlyVoid(boolean)
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        boolean readOnly;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        readOnly := @parameter0: boolean;

        this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean readOnly> = readOnly;

        return;
    }

    public void setReplicatedVoid(boolean)
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        boolean replicated;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        replicated := @parameter0: boolean;

        this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean replicated> = replicated;

        return;
    }

    public void setTemporaryVoid(boolean)
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        boolean temporary;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        temporary := @parameter0: boolean;

        this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean temporary> = temporary;

        return;
    }

    public void setExclusiveCreateVoid(boolean)
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        boolean exclusiveCreate;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        exclusiveCreate := @parameter0: boolean;

        this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean exclusiveCreate> = exclusiveCreate;

        return;
    }

    public void setAllowCreateVoid(boolean)
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        boolean allowCreate;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        allowCreate := @parameter0: boolean;

        this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean allowCreate> = allowCreate;

        return;
    }

    public berkeley.com.sleepycat.je.CacheMode getCacheMode()
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        berkeley.com.sleepycat.je.CacheMode $r0;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        $r0 = this.<berkeley.com.sleepycat.je.DatabaseConfig: berkeley.com.sleepycat.je.CacheMode cacheMode>;

        return $r0;
    }

    public java.util.Comparator getBtreeComparator()
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        java.util.Comparator $r0;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        $r0 = this.<berkeley.com.sleepycat.je.DatabaseConfig: java.util.Comparator btreeComparator>;

        return $r0;
    }

    public boolean getBtreeComparatorByClassName()
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        $z0 = this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean btreeComparatorByClassName>;

        return $z0;
    }

    public java.util.Comparator getDuplicateComparator()
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        java.util.Comparator $r0;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        $r0 = this.<berkeley.com.sleepycat.je.DatabaseConfig: java.util.Comparator duplicateComparator>;

        return $r0;
    }

    public boolean getDuplicateComparatorByClassName()
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        $z0 = this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean duplicateComparatorByClassName>;

        return $z0;
    }

    public java.util.List getTriggers()
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        java.util.List $r0;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        $r0 = this.<berkeley.com.sleepycat.je.DatabaseConfig: java.util.List triggers>;

        return $r0;
    }

    public boolean getSortedDuplicates()
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        $z0 = this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean sortedDuplicates>;

        return $z0;
    }

    public boolean getKeyPrefixing()
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        $z0 = this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean keyPrefixing>;

        return $z0;
    }

    public boolean getTemporary()
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        $z0 = this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean temporary>;

        return $z0;
    }

    public boolean getReplicated()
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        $z0 = this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean replicated>;

        return $z0;
    }

    public boolean getDeferredWrite()
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        $z0 = this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean deferredWrite>;

        return $z0;
    }

    public int getNodeMaxEntries()
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        int $i0;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        $i0 = this.<berkeley.com.sleepycat.je.DatabaseConfig: int nodeMaxEntries>;

        return $i0;
    }

    public berkeley.com.sleepycat.je.DatabaseConfig setKeyPrefixing(boolean)
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        boolean keyPrefixing;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        keyPrefixing := @parameter0: boolean;

        virtualinvoke this.<berkeley.com.sleepycat.je.DatabaseConfig: void setKeyPrefixingVoid(boolean)>(keyPrefixing);

        return this;
    }

    public void setKeyPrefixingVoid(boolean)
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        boolean keyPrefixing, $z0;
        java.lang.IllegalStateException $r0;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        keyPrefixing := @parameter0: boolean;

        if keyPrefixing != 0 goto label1;

        $z0 = this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean sortedDuplicates>;

        if $z0 == 0 goto label1;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Key prefixing is mandatory for databases with duplicates");

        throw $r0;

     label1:
        this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean keyPrefixing> = keyPrefixing;

        return;
    }

    void validateOnDbOpen(java.lang.String, boolean)
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        java.lang.String databaseName, $r5, $r13, $r15;
        boolean dbIsReplicated, replicatedTriggers, $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.IllegalArgumentException $r0, $r9;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r10, $r11, $r14;
        java.util.List $r6, $r7, $r8;
        int $i0;
        java.lang.Class $r12;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        databaseName := @parameter0: java.lang.String;

        dbIsReplicated := @parameter1: boolean;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean getDeferredWrite()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean getTemporary()>();

        if $z1 != 0 goto label3;

     label1:
        $z2 = virtualinvoke this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean getDeferredWrite()>();

        if $z2 == 0 goto label2;

        $z3 = virtualinvoke this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean getTransactional()>();

        if $z3 != 0 goto label3;

     label2:
        $z4 = virtualinvoke this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean getTemporary()>();

        if $z4 == 0 goto label4;

        $z5 = virtualinvoke this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean getTransactional()>();

        if $z5 == 0 goto label4;

     label3:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to open Database ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(databaseName);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and two ore more of the following exclusive properties are true: deferredWrite, temporary, transactional");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r0;

     label4:
        $r6 = this.<berkeley.com.sleepycat.je.DatabaseConfig: java.util.List triggers>;

        if $r6 == null goto label5;

        $r7 = this.<berkeley.com.sleepycat.je.DatabaseConfig: java.util.List triggers>;

        $i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        if $i0 <= 0 goto label5;

        $r8 = this.<berkeley.com.sleepycat.je.DatabaseConfig: java.util.List triggers>;

        replicatedTriggers = virtualinvoke this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean checkTriggers(java.util.List)>($r8);

        if dbIsReplicated == 0 goto label5;

        if replicatedTriggers != 0 goto label5;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("For a replicated Database, triggers must implement ");

        $r12 = class "berkeley/com/sleepycat/je/trigger/ReplicatedDatabaseTrigger";

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r9;

     label5:
        return;
    }

    boolean checkTriggers(java.util.List)
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        java.util.List triggerList;
        boolean replicatedTrigger, $z0, $z1, $z2;
        java.util.HashSet triggerNames, $r1;
        java.util.Iterator l4;
        berkeley.com.sleepycat.je.trigger.Trigger trigger;
        java.lang.Object $r0, $r2;
        java.lang.String $r3, $r7, $r9, $r14;
        java.lang.IllegalArgumentException $r4, $r10;
        java.lang.StringBuilder $r5, $r6, $r8, $r11, $r12, $r13;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        triggerList := @parameter0: java.util.List;

        $r0 = interfaceinvoke triggerList.<java.util.List: java.lang.Object get(int)>(0);

        replicatedTrigger = $r0 instanceof berkeley.com.sleepycat.je.trigger.ReplicatedDatabaseTrigger;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        triggerNames = $r1;

        l4 = interfaceinvoke triggerList.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        trigger = (berkeley.com.sleepycat.je.trigger.Trigger) $r2;

        $r3 = interfaceinvoke trigger.<berkeley.com.sleepycat.je.trigger.Trigger: java.lang.String getName()>();

        $z1 = interfaceinvoke triggerNames.<java.util.Set: boolean add(java.lang.Object)>($r3);

        if $z1 != 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicate trigger name:");

        $r7 = interfaceinvoke trigger.<berkeley.com.sleepycat.je.trigger.Trigger: java.lang.String getName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label2:
        $z2 = trigger instanceof berkeley.com.sleepycat.je.trigger.ReplicatedDatabaseTrigger;

        if replicatedTrigger == $z2 goto label3;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Conflicting trigger types in list:");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(triggerList);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label3:
        goto label1;

     label4:
        return replicatedTrigger;
    }

    void validateForNewDb() throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r0, $r1;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        $z0 = this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean readOnly>;

        if $z0 == 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("DatabaseConfig.setReadOnly() must be set to false when creating a Database");

        throw $r0;

     label1:
        $z1 = this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean transactional>;

        if $z1 == 0 goto label2;

        $z2 = this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean deferredWrite>;

        if $z2 == 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("deferredWrite mode is not supported for transactional databases");

        throw $r1;

     label2:
        return;
    }

    public berkeley.com.sleepycat.je.DatabaseConfig clone()
    {
        berkeley.com.sleepycat.je.DatabaseConfig this, $r1;
        java.lang.CloneNotSupportedException willNeverOccur, $r2;
        java.lang.Object $r0;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

     label1:
        $r0 = specialinvoke this.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (berkeley.com.sleepycat.je.DatabaseConfig) $r0;

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        willNeverOccur = $r2;

        return null;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public boolean getUseExistingConfig()
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        $z0 = this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean useExistingConfig>;

        return $z0;
    }

    public boolean getOverrideBtreeComparator()
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        $z0 = this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean overrideBtreeComparator>;

        return $z0;
    }

    public boolean getOverrideDuplicateComparator()
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        $z0 = this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean overrideDuplicateComparator>;

        return $z0;
    }

    public boolean getOverrideTriggers()
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        $z0 = this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean overrideTriggers>;

        return $z0;
    }

    public boolean getReadOnly()
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        $z0 = this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean readOnly>;

        return $z0;
    }

    public berkeley.com.sleepycat.je.SecondaryAssociation getSecondaryAssociation()
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        berkeley.com.sleepycat.je.SecondaryAssociation $r0;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        $r0 = this.<berkeley.com.sleepycat.je.DatabaseConfig: berkeley.com.sleepycat.je.SecondaryAssociation secAssociation>;

        return $r0;
    }

    static berkeley.com.sleepycat.je.DatabaseConfig combineConfig(berkeley.com.sleepycat.je.dbi.DatabaseImpl, berkeley.com.sleepycat.je.DatabaseConfig)
    {
        berkeley.com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        berkeley.com.sleepycat.je.DatabaseConfig dbHandleConfig, showConfig;
        java.util.Comparator $r0, $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        int $i0;
        java.util.List $r4;

        dbImpl := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        dbHandleConfig := @parameter1: berkeley.com.sleepycat.je.DatabaseConfig;

        showConfig = virtualinvoke dbHandleConfig.<berkeley.com.sleepycat.je.DatabaseConfig: berkeley.com.sleepycat.je.DatabaseConfig cloneConfig()>();

        if dbImpl == null goto label1;

        $r0 = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator getBtreeComparator()>();

        $z0 = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean getBtreeComparatorByClass()>();

        virtualinvoke showConfig.<berkeley.com.sleepycat.je.DatabaseConfig: void setBtreeComparatorInternal(java.util.Comparator,boolean)>($r0, $z0);

        $r1 = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator getDuplicateComparator()>();

        $z1 = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean getDuplicateComparatorByClass()>();

        virtualinvoke showConfig.<berkeley.com.sleepycat.je.DatabaseConfig: void setDuplicateComparatorInternal(java.util.Comparator,boolean)>($r1, $z1);

        $z2 = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean getKeyPrefixing()>();

        virtualinvoke showConfig.<berkeley.com.sleepycat.je.DatabaseConfig: berkeley.com.sleepycat.je.DatabaseConfig setKeyPrefixing(boolean)>($z2);

        $i0 = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: int getNodeMaxTreeEntries()>();

        virtualinvoke showConfig.<berkeley.com.sleepycat.je.DatabaseConfig: berkeley.com.sleepycat.je.DatabaseConfig setNodeMaxEntries(int)>($i0);

        $r4 = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: java.util.List getTriggers()>();

        virtualinvoke showConfig.<berkeley.com.sleepycat.je.DatabaseConfig: berkeley.com.sleepycat.je.DatabaseConfig setTriggers(java.util.List)>($r4);

        $z3 = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isTransactional()>();

        virtualinvoke showConfig.<berkeley.com.sleepycat.je.DatabaseConfig: berkeley.com.sleepycat.je.DatabaseConfig setTransactional(boolean)>($z3);

        $z4 = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isDurableDeferredWrite()>();

        virtualinvoke showConfig.<berkeley.com.sleepycat.je.DatabaseConfig: berkeley.com.sleepycat.je.DatabaseConfig setDeferredWrite(boolean)>($z4);

        $z5 = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isReplicated()>();

        virtualinvoke showConfig.<berkeley.com.sleepycat.je.DatabaseConfig: berkeley.com.sleepycat.je.DatabaseConfig setReplicated(boolean)>($z5);

        $z6 = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean getSortedDuplicates()>();

        virtualinvoke showConfig.<berkeley.com.sleepycat.je.DatabaseConfig: berkeley.com.sleepycat.je.DatabaseConfig setSortedDuplicates(boolean)>($z6);

        $z7 = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isTemporary()>();

        virtualinvoke showConfig.<berkeley.com.sleepycat.je.DatabaseConfig: berkeley.com.sleepycat.je.DatabaseConfig setTemporary(boolean)>($z7);

     label1:
        return showConfig;
    }

    public berkeley.com.sleepycat.je.DatabaseConfig cloneConfig()
    {
        berkeley.com.sleepycat.je.DatabaseConfig this, $r0;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.DatabaseConfig: berkeley.com.sleepycat.je.DatabaseConfig clone()>();

        return $r0;
    }

    void setBtreeComparatorInternal(java.util.Comparator, boolean)
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        java.util.Comparator comparator;
        boolean byClassName;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        comparator := @parameter0: java.util.Comparator;

        byClassName := @parameter1: boolean;

        this.<berkeley.com.sleepycat.je.DatabaseConfig: java.util.Comparator btreeComparator> = comparator;

        this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean btreeComparatorByClassName> = byClassName;

        return;
    }

    void setDuplicateComparatorInternal(java.util.Comparator, boolean)
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        java.util.Comparator comparator;
        boolean byClassName;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        comparator := @parameter0: java.util.Comparator;

        byClassName := @parameter1: boolean;

        this.<berkeley.com.sleepycat.je.DatabaseConfig: java.util.Comparator duplicateComparator> = comparator;

        this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean duplicateComparatorByClassName> = byClassName;

        return;
    }

    public berkeley.com.sleepycat.je.DatabaseConfig setNodeMaxEntries(int)
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        int nodeMaxEntries;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        nodeMaxEntries := @parameter0: int;

        virtualinvoke this.<berkeley.com.sleepycat.je.DatabaseConfig: void setNodeMaxEntriesVoid(int)>(nodeMaxEntries);

        return this;
    }

    public berkeley.com.sleepycat.je.DatabaseConfig setTriggers(java.util.List)
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        java.util.List triggers;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        triggers := @parameter0: java.util.List;

        virtualinvoke this.<berkeley.com.sleepycat.je.DatabaseConfig: void setTriggersVoid(java.util.List)>(triggers);

        return this;
    }

    public berkeley.com.sleepycat.je.DatabaseConfig setDeferredWrite(boolean)
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        boolean deferredWrite;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        deferredWrite := @parameter0: boolean;

        virtualinvoke this.<berkeley.com.sleepycat.je.DatabaseConfig: void setDeferredWriteVoid(boolean)>(deferredWrite);

        return this;
    }

    public berkeley.com.sleepycat.je.DatabaseConfig setSortedDuplicates(boolean)
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        boolean sortedDuplicates;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        sortedDuplicates := @parameter0: boolean;

        virtualinvoke this.<berkeley.com.sleepycat.je.DatabaseConfig: void setSortedDuplicatesVoid(boolean)>(sortedDuplicates);

        return this;
    }

    public void setSortedDuplicatesVoid(boolean)
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        boolean sortedDuplicates;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        sortedDuplicates := @parameter0: boolean;

        this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean sortedDuplicates> = sortedDuplicates;

        if sortedDuplicates == 0 goto label1;

        virtualinvoke this.<berkeley.com.sleepycat.je.DatabaseConfig: void setKeyPrefixingVoid(boolean)>(1);

     label1:
        return;
    }

    public void setDeferredWriteVoid(boolean)
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        boolean deferredWrite;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        deferredWrite := @parameter0: boolean;

        this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean deferredWrite> = deferredWrite;

        return;
    }

    public void setTriggersVoid(java.util.List)
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        java.util.List triggers;
        int $i0;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        triggers := @parameter0: java.util.List;

        this.<berkeley.com.sleepycat.je.DatabaseConfig: java.util.List triggers> = triggers;

        if triggers == null goto label1;

        $i0 = interfaceinvoke triggers.<java.util.List: int size()>();

        if $i0 != 0 goto label2;

     label1:
        return;

     label2:
        virtualinvoke this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean checkTriggers(java.util.List)>(triggers);

        return;
    }

    public void setNodeMaxEntriesVoid(int)
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        int nodeMaxEntries;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        nodeMaxEntries := @parameter0: int;

        this.<berkeley.com.sleepycat.je.DatabaseConfig: int nodeMaxEntries> = nodeMaxEntries;

        return;
    }

    public berkeley.com.sleepycat.je.DatabaseConfig setOverrideBtreeComparator(boolean)
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        boolean override;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        override := @parameter0: boolean;

        virtualinvoke this.<berkeley.com.sleepycat.je.DatabaseConfig: void setOverrideBtreeComparatorVoid(boolean)>(override);

        return this;
    }

    public berkeley.com.sleepycat.je.DatabaseConfig setDuplicateComparator(java.util.Comparator)
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        java.util.Comparator duplicateComparator;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        duplicateComparator := @parameter0: java.util.Comparator;

        virtualinvoke this.<berkeley.com.sleepycat.je.DatabaseConfig: void setDuplicateComparatorVoid(java.util.Comparator)>(duplicateComparator);

        return this;
    }

    public berkeley.com.sleepycat.je.DatabaseConfig setOverrideDuplicateComparator(boolean)
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        boolean override;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        override := @parameter0: boolean;

        virtualinvoke this.<berkeley.com.sleepycat.je.DatabaseConfig: void setOverrideDuplicateComparatorVoid(boolean)>(override);

        return this;
    }

    public void setOverrideDuplicateComparatorVoid(boolean)
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        boolean override;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        override := @parameter0: boolean;

        this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean overrideDuplicateComparator> = override;

        return;
    }

    public void setDuplicateComparatorVoid(java.util.Comparator)
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        java.util.Comparator duplicateComparator, $r0;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        duplicateComparator := @parameter0: java.util.Comparator;

        $r0 = specialinvoke this.<berkeley.com.sleepycat.je.DatabaseConfig: java.util.Comparator validateComparator(java.util.Comparator,java.lang.String)>(duplicateComparator, "Duplicate");

        this.<berkeley.com.sleepycat.je.DatabaseConfig: java.util.Comparator duplicateComparator> = $r0;

        this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean duplicateComparatorByClassName> = 0;

        return;
    }

    private java.util.Comparator validateComparator(java.util.Comparator, java.lang.String) throws java.lang.IllegalArgumentException
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        java.util.Comparator comparator;
        java.lang.String type, $r7;
        berkeley.com.sleepycat.je.DatabaseException e, $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        comparator := @parameter0: java.util.Comparator;

        type := @parameter1: java.lang.String;

        if comparator != null goto label1;

        return null;

     label1:
        staticinvoke <berkeley.com.sleepycat.je.dbi.DatabaseImpl: byte[] comparatorToBytes(java.util.Comparator,boolean,java.lang.String)>(comparator, 0, type);

     label2:
        return comparator;

     label3:
        $r2 := @caughtexception;

        e = $r2;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(type);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" comparator is not valid.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r7, e);

        throw $r3;

        catch berkeley.com.sleepycat.je.DatabaseException from label1 to label2 with label3;
    }

    public void setOverrideBtreeComparatorVoid(boolean)
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        boolean override;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        override := @parameter0: boolean;

        this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean overrideBtreeComparator> = override;

        return;
    }

    public berkeley.com.sleepycat.je.DatabaseConfig setBtreeComparator(java.util.Comparator)
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        java.util.Comparator btreeComparator;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        btreeComparator := @parameter0: java.util.Comparator;

        virtualinvoke this.<berkeley.com.sleepycat.je.DatabaseConfig: void setBtreeComparatorVoid(java.util.Comparator)>(btreeComparator);

        return this;
    }

    public void setBtreeComparatorVoid(java.util.Comparator)
    {
        berkeley.com.sleepycat.je.DatabaseConfig this;
        java.util.Comparator btreeComparator, $r0;

        this := @this: berkeley.com.sleepycat.je.DatabaseConfig;

        btreeComparator := @parameter0: java.util.Comparator;

        $r0 = specialinvoke this.<berkeley.com.sleepycat.je.DatabaseConfig: java.util.Comparator validateComparator(java.util.Comparator,java.lang.String)>(btreeComparator, "Btree");

        this.<berkeley.com.sleepycat.je.DatabaseConfig: java.util.Comparator btreeComparator> = $r0;

        this.<berkeley.com.sleepycat.je.DatabaseConfig: boolean btreeComparatorByClassName> = 0;

        return;
    }


