    public void count(com.googlecode.pngtastic.core.PngImage) throws java.io.IOException
    {
        com.googlecode.pngtastic.core.PngColorCounter this;
        com.googlecode.pngtastic.core.PngImage image;
        long start, width, height, elapsed, $l2, $l3, $l7;
        java.util.Iterator itChunks;
        com.googlecode.pngtastic.core.PngChunk chunk;
        com.googlecode.pngtastic.core.processing.PngByteArrayOutputStream inflatedImageData;
        int scanlineLength, $i1, $i4, $i6, $i8, $i9, $i10, $i11, $i12;
        java.util.List originalScanlines, colors, results, $r2, $r8;
        java.lang.Object[] $r0, $r6;
        com.googlecode.pngtastic.core.Logger $r1, $r7;
        short $s0, $s5;
        float $f0, $f1;
        double $d0, $d1;
        com.googlecode.pngtastic.core.PngColorCounter$ColorCounterResult $r3;
        java.lang.String $r4;
        com.googlecode.pngtastic.core.processing.PngInterlaceHandler $r5;

        this := @this: com.googlecode.pngtastic.core.PngColorCounter;

        image := @parameter0: com.googlecode.pngtastic.core.PngImage;

        $r1 = this.<com.googlecode.pngtastic.core.PngColorCounter: com.googlecode.pngtastic.core.Logger log>;

        $r0 = newarray (java.lang.Object)[0];

        virtualinvoke $r1.<com.googlecode.pngtastic.core.Logger: void debug(java.lang.String,java.lang.Object[])>("=== COUNTING ===", $r0);

        $s0 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: short getInterlace()>();

        if $s0 != 1 goto label1;

        $i12 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: int getSampleBitCount()>();

        if $i12 >= 8 goto label1;

        $r7 = this.<com.googlecode.pngtastic.core.PngColorCounter: com.googlecode.pngtastic.core.Logger log>;

        $r6 = newarray (java.lang.Object)[0];

        virtualinvoke $r7.<com.googlecode.pngtastic.core.Logger: void debug(java.lang.String,java.lang.Object[])>("not supported", $r6);

        return;

     label1:
        start = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r2 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: java.util.List getChunks()>();

        itChunks = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        chunk = virtualinvoke this.<com.googlecode.pngtastic.core.PngColorCounter: com.googlecode.pngtastic.core.PngChunk processHeadChunks(com.googlecode.pngtastic.core.PngImage,boolean,java.util.Iterator)>(null, 0, itChunks);

        inflatedImageData = virtualinvoke this.<com.googlecode.pngtastic.core.PngColorCounter: com.googlecode.pngtastic.core.processing.PngByteArrayOutputStream getInflatedImageData(com.googlecode.pngtastic.core.PngChunk,java.util.Iterator)>(chunk, itChunks);

        width = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: long getWidth()>();

        height = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: long getHeight()>();

        $i1 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: int getSampleBitCount()>();

        $l2 = (long) $i1;

        $l3 = width * $l2;

        $f0 = (float) $l3;

        $f1 = $f0 / 8.0F;

        $d0 = (double) $f1;

        $d1 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $i4 = (int) $d1;

        scanlineLength = $i4 + 1;

        $s5 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: short getInterlace()>();

        if $s5 != 1 goto label2;

        $r5 = this.<com.googlecode.pngtastic.core.PngColorCounter: com.googlecode.pngtastic.core.processing.PngInterlaceHandler pngInterlaceHandler>;

        $i9 = (int) width;

        $i10 = (int) height;

        $i11 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: int getSampleBitCount()>();

        $r8 = interfaceinvoke $r5.<com.googlecode.pngtastic.core.processing.PngInterlaceHandler: java.util.List deInterlace(int,int,int,com.googlecode.pngtastic.core.processing.PngByteArrayOutputStream)>($i9, $i10, $i11, inflatedImageData);

        goto label3;

     label2:
        $i6 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: int getSampleBitCount()>();

        $r8 = virtualinvoke this.<com.googlecode.pngtastic.core.PngColorCounter: java.util.List getScanlines(com.googlecode.pngtastic.core.processing.PngByteArrayOutputStream,int,int,long)>(inflatedImageData, $i6, scanlineLength, height);

     label3:
        originalScanlines = $r8;

        colors = specialinvoke this.<com.googlecode.pngtastic.core.PngColorCounter: java.util.List getColors(com.googlecode.pngtastic.core.PngImage,java.util.List,long)>(image, originalScanlines, start);

        results = specialinvoke this.<com.googlecode.pngtastic.core.PngColorCounter: java.util.List getMergedColors(com.googlecode.pngtastic.core.PngImage,java.util.List,long)>(image, colors, start);

        $l7 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        elapsed = $l7 - start;

        $r3 = new com.googlecode.pngtastic.core.PngColorCounter$ColorCounterResult;

        $r4 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: java.lang.String getFileName()>();

        $i8 = interfaceinvoke colors.<java.util.List: int size()>();

        specialinvoke $r3.<com.googlecode.pngtastic.core.PngColorCounter$ColorCounterResult: void <init>(java.lang.String,long,long,int,java.util.List,long)>($r4, width, height, $i8, results, elapsed);

        this.<com.googlecode.pngtastic.core.PngColorCounter: com.googlecode.pngtastic.core.PngColorCounter$ColorCounterResult colorCounterResult> = $r3;

        return;
    }

    public com.googlecode.pngtastic.core.PngColorCounter$ColorCounterResult getResult()
    {
        com.googlecode.pngtastic.core.PngColorCounter this;
        com.googlecode.pngtastic.core.PngColorCounter$ColorCounterResult $r0;

        this := @this: com.googlecode.pngtastic.core.PngColorCounter;

        $r0 = this.<com.googlecode.pngtastic.core.PngColorCounter: com.googlecode.pngtastic.core.PngColorCounter$ColorCounterResult colorCounterResult>;

        return $r0;
    }

    private java.util.List getColors(com.googlecode.pngtastic.core.PngImage, java.util.List, long) throws java.io.IOException
    {
        com.googlecode.pngtastic.core.PngColorCounter this;
        com.googlecode.pngtastic.core.PngImage original;
        java.util.List rows;
        long start, $l5, $l6, $l7, $l9, $l27, $l28, $l29, $l31;
        java.util.LinkedHashMap colors, $r0;
        com.googlecode.pngtastic.core.PngImageType imageType;
        int sampleSize, $i1, $i3, $i4, $i8, $i11, $i12, $i13, $i15, $i16, $i17, $i18, $i19, $i20, $i22, $i23, $i24, $i26, y#1, sampleCount#4, x#5, offset#10, $i32, r#16, g#17, b#18, r#20, g#21, b#22, $i33, r#25, g#26, b#27, pixel#28, r#30, g#31, b#32, pixel#33, $i34, minFreq#36;
        java.io.ByteArrayInputStream ins, $r17;
        java.io.DataInputStream dis, $r18;
        java.lang.Integer count, $r3, $r6, $r11, $r15, $r25, $r31, $r38, r#23, r#34;
        short $s0, $s21, $s25, r#11, g#12, b#13;
        boolean $z0, $z1, $z2;
        java.lang.Object[] $r1, $r4;
        com.googlecode.pngtastic.core.Logger $r2, $r5;
        double $d0, $d1, $d2, $d3;
        byte $b2, $b10, $b30;
        java.util.ArrayList $r7, minFreq#39;
        java.util.Set $r8, $r12;
        java.lang.Object $r9, $r10, $r13, $r14, $r16, $r24, $r30, $r37;
        int[] $r19;
        com.googlecode.pngtastic.core.PngChunk $r20, $r21, $r22;
        com.googlecode.pngtastic.core.PngPixel $r23, $r29, $r33, $r35, $r36, $r40, $r42, pixel#14, offset#19, offset#29, sampleCount#45;
        com.googlecode.pngtastic.core.PngException $r43, $r45;
        java.lang.IllegalArgumentException $r44;
        java.lang.StringBuilder $r46, $r47, $r48, $r49;
        java.lang.String $r50;
        java.util.Iterator minFreq#2, row#37, row#40;
        byte[] row#3;
        java.util.Map$Entry sampleCount#38;

        this := @this: com.googlecode.pngtastic.core.PngColorCounter;

        original := @parameter0: com.googlecode.pngtastic.core.PngImage;

        rows := @parameter1: java.util.List;

        start := @parameter2: long;

        $r0 = new java.util.LinkedHashMap;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>();

        colors = $r0;

        $s0 = virtualinvoke original.<com.googlecode.pngtastic.core.PngImage: short getColorType()>();

        imageType = staticinvoke <com.googlecode.pngtastic.core.PngImageType: com.googlecode.pngtastic.core.PngImageType forColorType(int)>($s0);

        sampleSize = virtualinvoke original.<com.googlecode.pngtastic.core.PngImage: int getSampleBitCount()>();

        y#1 = 0;

        minFreq#2 = interfaceinvoke rows.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke minFreq#2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label21;

        $r16 = interfaceinvoke minFreq#2.<java.util.Iterator: java.lang.Object next()>();

        row#3 = (byte[]) $r16;

        $l9 = this.<com.googlecode.pngtastic.core.PngColorCounter: long timeout>;

        $b10 = $l9 cmp 0L;

        if $b10 <= 0 goto label02;

        $l27 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l29 = $l27 - start;

        $l28 = this.<com.googlecode.pngtastic.core.PngColorCounter: long timeout>;

        $b30 = $l29 cmp $l28;

        if $b30 <= 0 goto label02;

        $r45 = new com.googlecode.pngtastic.core.PngException;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Reached ");

        $l31 = this.<com.googlecode.pngtastic.core.PngColorCounter: long timeout>;

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l31);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms timeout");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r45.<com.googlecode.pngtastic.core.PngException: void <init>(java.lang.String)>($r50);

        throw $r45;

     label02:
        $i11 = lengthof row#3;

        $i12 = $i11 - 1;

        $i13 = $i12 * 8;

        sampleCount#4 = $i13 / sampleSize;

        $r17 = new java.io.ByteArrayInputStream;

        specialinvoke $r17.<java.io.ByteArrayInputStream: void <init>(byte[])>(row#3);

        ins = $r17;

        $r18 = new java.io.DataInputStream;

        specialinvoke $r18.<java.io.DataInputStream: void <init>(java.io.InputStream)>(ins);

        dis = $r18;

        virtualinvoke dis.<java.io.DataInputStream: int readUnsignedByte()>();

        x#5 = 0;

     label03:
        if x#5 >= sampleCount#4 goto label20;

        $r19 = <com.googlecode.pngtastic.core.PngColorCounter$1: int[] $SwitchMap$com$googlecode$pngtastic$core$PngImageType>;

        $i15 = virtualinvoke imageType.<com.googlecode.pngtastic.core.PngImageType: int ordinal()>();

        $i16 = $r19[$i15];

        tableswitch($i16)
        {
            case 1: goto label04;
            case 2: goto label07;
            case 3: goto label07;
            case 4: goto label08;
            case 5: goto label13;
            default: goto label18;
        };

     label04:
        $i17 = virtualinvoke dis.<java.io.DataInputStream: int readUnsignedByte()>();

        offset#10 = $i17 * 3;

        $r20 = virtualinvoke original.<com.googlecode.pngtastic.core.PngImage: com.googlecode.pngtastic.core.PngChunk getPalette()>();

        r#11 = virtualinvoke $r20.<com.googlecode.pngtastic.core.PngChunk: short getUnsignedByte(int)>(offset#10);

        $r21 = virtualinvoke original.<com.googlecode.pngtastic.core.PngImage: com.googlecode.pngtastic.core.PngChunk getPalette()>();

        $i18 = offset#10 + 1;

        g#12 = virtualinvoke $r21.<com.googlecode.pngtastic.core.PngChunk: short getUnsignedByte(int)>($i18);

        $r22 = virtualinvoke original.<com.googlecode.pngtastic.core.PngImage: com.googlecode.pngtastic.core.PngChunk getPalette()>();

        $i19 = offset#10 + 2;

        b#13 = virtualinvoke $r22.<com.googlecode.pngtastic.core.PngChunk: short getUnsignedByte(int)>($i19);

        $r23 = new com.googlecode.pngtastic.core.PngPixel;

        specialinvoke $r23.<com.googlecode.pngtastic.core.PngPixel: void <init>(int,int,int,int,int,boolean)>(x#5, y#1, r#11, g#12, b#13, 1);

        pixel#14 = $r23;

        $r24 = interfaceinvoke colors.<java.util.Map: java.lang.Object get(java.lang.Object)>(pixel#14);

        count = (java.lang.Integer) $r24;

        if count != null goto label05;

        $i32 = 1;

        goto label06;

     label05:
        $i20 = virtualinvoke count.<java.lang.Integer: int intValue()>();

        $i32 = $i20 + 1;

     label06:
        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i32);

        interfaceinvoke colors.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(pixel#14, $r25);

        goto label19;

     label07:
        $r43 = new com.googlecode.pngtastic.core.PngException;

        specialinvoke $r43.<com.googlecode.pngtastic.core.PngException: void <init>(java.lang.String)>("Greyscale images not supported");

        throw $r43;

     label08:
        $s25 = virtualinvoke original.<com.googlecode.pngtastic.core.PngImage: short getBitDepth()>();

        if $s25 != 8 goto label09;

        r#16 = virtualinvoke dis.<java.io.DataInputStream: int readUnsignedByte()>();

        g#17 = virtualinvoke dis.<java.io.DataInputStream: int readUnsignedByte()>();

        b#18 = virtualinvoke dis.<java.io.DataInputStream: int readUnsignedByte()>();

        $r42 = new com.googlecode.pngtastic.core.PngPixel;

        specialinvoke $r42.<com.googlecode.pngtastic.core.PngPixel: void <init>(int,int,int,int,int,boolean)>(x#5, y#1, r#16, g#17, b#18, 1);

        offset#19 = $r42;

        goto label10;

     label09:
        r#20 = virtualinvoke dis.<java.io.DataInputStream: int readUnsignedShort()>();

        g#21 = virtualinvoke dis.<java.io.DataInputStream: int readUnsignedShort()>();

        b#22 = virtualinvoke dis.<java.io.DataInputStream: int readUnsignedShort()>();

        $r36 = new com.googlecode.pngtastic.core.PngPixel;

        specialinvoke $r36.<com.googlecode.pngtastic.core.PngPixel: void <init>(int,int,int,int,int,boolean)>(x#5, y#1, r#20, g#21, b#22, 0);

        offset#19 = $r36;

     label10:
        $r37 = interfaceinvoke colors.<java.util.Map: java.lang.Object get(java.lang.Object)>(offset#19);

        r#23 = (java.lang.Integer) $r37;

        $r40 = offset#19;

        if r#23 != null goto label11;

        $i33 = 1;

        goto label12;

     label11:
        $i26 = virtualinvoke r#23.<java.lang.Integer: int intValue()>();

        $i33 = $i26 + 1;

     label12:
        $r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i33);

        interfaceinvoke colors.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r40, $r38);

        goto label19;

     label13:
        $s21 = virtualinvoke original.<com.googlecode.pngtastic.core.PngImage: short getBitDepth()>();

        if $s21 != 8 goto label14;

        r#25 = virtualinvoke dis.<java.io.DataInputStream: int readUnsignedByte()>();

        g#26 = virtualinvoke dis.<java.io.DataInputStream: int readUnsignedByte()>();

        b#27 = virtualinvoke dis.<java.io.DataInputStream: int readUnsignedByte()>();

        pixel#28 = virtualinvoke dis.<java.io.DataInputStream: int readUnsignedByte()>();

        $r35 = new com.googlecode.pngtastic.core.PngPixel;

        specialinvoke $r35.<com.googlecode.pngtastic.core.PngPixel: void <init>(int,int,int,int,int,int)>(x#5, y#1, r#25, g#26, b#27, pixel#28);

        offset#29 = $r35;

        goto label15;

     label14:
        r#30 = virtualinvoke dis.<java.io.DataInputStream: int readUnsignedShort()>();

        g#31 = virtualinvoke dis.<java.io.DataInputStream: int readUnsignedShort()>();

        b#32 = virtualinvoke dis.<java.io.DataInputStream: int readUnsignedShort()>();

        pixel#33 = virtualinvoke dis.<java.io.DataInputStream: int readUnsignedShort()>();

        $r29 = new com.googlecode.pngtastic.core.PngPixel;

        specialinvoke $r29.<com.googlecode.pngtastic.core.PngPixel: void <init>(int,int,int,int,int,int)>(x#5, y#1, r#30, g#31, b#32, pixel#33);

        offset#29 = $r29;

     label15:
        $i22 = virtualinvoke offset#29.<com.googlecode.pngtastic.core.PngPixel: int getAlpha()>();

        $i23 = this.<com.googlecode.pngtastic.core.PngColorCounter: int minAlpha>;

        if $i22 <= $i23 goto label19;

        $r30 = interfaceinvoke colors.<java.util.Map: java.lang.Object get(java.lang.Object)>(offset#29);

        r#34 = (java.lang.Integer) $r30;

        $r33 = offset#29;

        if r#34 != null goto label16;

        $i34 = 1;

        goto label17;

     label16:
        $i24 = virtualinvoke r#34.<java.lang.Integer: int intValue()>();

        $i34 = $i24 + 1;

     label17:
        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i34);

        interfaceinvoke colors.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r33, $r31);

        goto label19;

     label18:
        $r44 = new java.lang.IllegalArgumentException;

        specialinvoke $r44.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r44;

     label19:
        x#5 = x#5 + 1;

        goto label03;

     label20:
        y#1 = y#1 + 1;

        goto label01;

     label21:
        $r2 = this.<com.googlecode.pngtastic.core.PngColorCounter: com.googlecode.pngtastic.core.Logger log>;

        $r1 = newarray (java.lang.Object)[1];

        $i1 = interfaceinvoke colors.<java.util.Map: int size()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[0] = $r3;

        virtualinvoke $r2.<com.googlecode.pngtastic.core.Logger: void debug(java.lang.String,java.lang.Object[])>("Full color count=%d", $r1);

        $d0 = this.<com.googlecode.pngtastic.core.PngColorCounter: double freqThreshold>;

        $b2 = $d0 cmpl 0.0;

        if $b2 <= 0 goto label24;

        $l5 = virtualinvoke original.<com.googlecode.pngtastic.core.PngImage: long getWidth()>();

        $l6 = virtualinvoke original.<com.googlecode.pngtastic.core.PngImage: long getHeight()>();

        $l7 = $l5 * $l6;

        $d2 = (double) $l7;

        $d1 = this.<com.googlecode.pngtastic.core.PngColorCounter: double freqThreshold>;

        $d3 = $d2 * $d1;

        minFreq#36 = (int) $d3;

        $r12 = interfaceinvoke colors.<java.util.Map: java.util.Set entrySet()>();

        row#37 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

     label22:
        $z1 = interfaceinvoke row#37.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label24;

        $r13 = interfaceinvoke row#37.<java.util.Iterator: java.lang.Object next()>();

        sampleCount#38 = (java.util.Map$Entry) $r13;

        $r14 = interfaceinvoke sampleCount#38.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r15 = (java.lang.Integer) $r14;

        $i8 = virtualinvoke $r15.<java.lang.Integer: int intValue()>();

        if $i8 >= minFreq#36 goto label23;

        interfaceinvoke row#37.<java.util.Iterator: void remove()>();

     label23:
        goto label22;

     label24:
        $r5 = this.<com.googlecode.pngtastic.core.PngColorCounter: com.googlecode.pngtastic.core.Logger log>;

        $r4 = newarray (java.lang.Object)[1];

        $i3 = interfaceinvoke colors.<java.util.Map: int size()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r4[0] = $r6;

        virtualinvoke $r5.<com.googlecode.pngtastic.core.Logger: void debug(java.lang.String,java.lang.Object[])>("Filtered color count=%d", $r4);

        $r7 = new java.util.ArrayList;

        $r8 = interfaceinvoke colors.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r7.<java.util.ArrayList: void <init>(java.util.Collection)>($r8);

        minFreq#39 = $r7;

        row#40 = interfaceinvoke minFreq#39.<java.util.List: java.util.Iterator iterator()>();

     label25:
        $z2 = interfaceinvoke row#40.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label26;

        $r9 = interfaceinvoke row#40.<java.util.Iterator: java.lang.Object next()>();

        sampleCount#45 = (com.googlecode.pngtastic.core.PngPixel) $r9;

        $r10 = interfaceinvoke colors.<java.util.Map: java.lang.Object get(java.lang.Object)>(sampleCount#45);

        $r11 = (java.lang.Integer) $r10;

        $i4 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

        virtualinvoke sampleCount#45.<com.googlecode.pngtastic.core.PngPixel: void setFreq(int)>($i4);

        goto label25;

     label26:
        return minFreq#39;
    }

    private java.util.List getMergedColors(com.googlecode.pngtastic.core.PngImage, java.util.List, long)
    {
        com.googlecode.pngtastic.core.PngColorCounter this;
        com.googlecode.pngtastic.core.PngImage image;
        java.util.List colors;
        long start, $l0, $l5, $l6, $l7, $l9;
        short bits;
        java.util.ArrayList copy, $r0, $r1, results#4;
        com.googlecode.pngtastic.core.PngPixel pb, pa#2, it#6;
        boolean $z0, $z1, $z2, $z4, $z5, $z6;
        java.lang.Object $r2, $r3, $r4;
        byte $b1, $b2, $b8;
        double $d0, $d1;
        int $i3, $i4;
        com.googlecode.pngtastic.core.PngException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        java.util.Iterator results#1, it#3, pa#5;

        this := @this: com.googlecode.pngtastic.core.PngColorCounter;

        image := @parameter0: com.googlecode.pngtastic.core.PngImage;

        colors := @parameter1: java.util.List;

        start := @parameter2: long;

        bits = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: short getBitDepth()>();

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>(colors);

        copy = $r0;

        results#1 = interfaceinvoke colors.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke results#1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r3 = interfaceinvoke results#1.<java.util.Iterator: java.lang.Object next()>();

        pa#2 = (com.googlecode.pngtastic.core.PngPixel) $r3;

        $l0 = this.<com.googlecode.pngtastic.core.PngColorCounter: long timeout>;

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label02;

        $l5 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l7 = $l5 - start;

        $l6 = this.<com.googlecode.pngtastic.core.PngColorCounter: long timeout>;

        $b8 = $l7 cmp $l6;

        if $b8 <= 0 goto label02;

        $r5 = new com.googlecode.pngtastic.core.PngException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Reached ");

        $l9 = this.<com.googlecode.pngtastic.core.PngColorCounter: long timeout>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l9);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms timeout");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<com.googlecode.pngtastic.core.PngException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label02:
        $z4 = virtualinvoke pa#2.<com.googlecode.pngtastic.core.PngPixel: boolean isDuplicate()>();

        if $z4 != 0 goto label07;

        it#3 = interfaceinvoke copy.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z5 = interfaceinvoke it#3.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label07;

        $r4 = interfaceinvoke it#3.<java.util.Iterator: java.lang.Object next()>();

        pb = (com.googlecode.pngtastic.core.PngPixel) $r4;

        $z6 = virtualinvoke pb.<com.googlecode.pngtastic.core.PngPixel: boolean isDuplicate()>();

        if $z6 == 0 goto label04;

        interfaceinvoke it#3.<java.util.Iterator: void remove()>();

        goto label06;

     label04:
        if pa#2 == pb goto label06;

        $d0 = virtualinvoke pa#2.<com.googlecode.pngtastic.core.PngPixel: double rgbaDistance(com.googlecode.pngtastic.core.PngPixel,int)>(pb, bits);

        $d1 = this.<com.googlecode.pngtastic.core.PngColorCounter: double distThreshold>;

        $b2 = $d0 cmpg $d1;

        if $b2 >= 0 goto label06;

        $i3 = virtualinvoke pa#2.<com.googlecode.pngtastic.core.PngPixel: int getFreq()>();

        $i4 = virtualinvoke pb.<com.googlecode.pngtastic.core.PngPixel: int getFreq()>();

        if $i3 <= $i4 goto label05;

        virtualinvoke pb.<com.googlecode.pngtastic.core.PngPixel: void setDuplicate(boolean)>(1);

        interfaceinvoke it#3.<java.util.Iterator: void remove()>();

        goto label06;

     label05:
        virtualinvoke pa#2.<com.googlecode.pngtastic.core.PngPixel: void setDuplicate(boolean)>(1);

     label06:
        goto label03;

     label07:
        goto label01;

     label08:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        results#4 = $r1;

        pa#5 = interfaceinvoke colors.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z1 = interfaceinvoke pa#5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r2 = interfaceinvoke pa#5.<java.util.Iterator: java.lang.Object next()>();

        it#6 = (com.googlecode.pngtastic.core.PngPixel) $r2;

        $z2 = virtualinvoke it#6.<com.googlecode.pngtastic.core.PngPixel: boolean isDuplicate()>();

        if $z2 != 0 goto label10;

        interfaceinvoke results#4.<java.util.List: boolean add(java.lang.Object)>(it#6);

     label10:
        goto label09;

     label11:
        return results#4;
    }

    public void <init>(java.lang.String, double, double, int, long)
    {
        com.googlecode.pngtastic.core.PngColorCounter this;
        java.lang.String logLevel;
        double distThreshold, freqThreshold;
        int minAlpha;
        long timeout;
        com.googlecode.pngtastic.core.processing.PngtasticInterlaceHandler $r0;
        com.googlecode.pngtastic.core.processing.PngFilterHandler $r1;
        com.googlecode.pngtastic.core.Logger $r2;

        this := @this: com.googlecode.pngtastic.core.PngColorCounter;

        logLevel := @parameter0: java.lang.String;

        distThreshold := @parameter1: double;

        freqThreshold := @parameter2: double;

        minAlpha := @parameter3: int;

        timeout := @parameter4: long;

        specialinvoke this.<com.googlecode.pngtastic.core.PngProcessor: void <init>(java.lang.String)>(logLevel);

        this.<com.googlecode.pngtastic.core.PngColorCounter: double distThreshold> = distThreshold;

        this.<com.googlecode.pngtastic.core.PngColorCounter: double freqThreshold> = freqThreshold;

        this.<com.googlecode.pngtastic.core.PngColorCounter: int minAlpha> = minAlpha;

        this.<com.googlecode.pngtastic.core.PngColorCounter: long timeout> = timeout;

        $r0 = new com.googlecode.pngtastic.core.processing.PngtasticInterlaceHandler;

        $r2 = this.<com.googlecode.pngtastic.core.PngColorCounter: com.googlecode.pngtastic.core.Logger log>;

        $r1 = this.<com.googlecode.pngtastic.core.PngColorCounter: com.googlecode.pngtastic.core.processing.PngFilterHandler pngFilterHandler>;

        specialinvoke $r0.<com.googlecode.pngtastic.core.processing.PngtasticInterlaceHandler: void <init>(com.googlecode.pngtastic.core.Logger,com.googlecode.pngtastic.core.processing.PngFilterHandler)>($r2, $r1);

        this.<com.googlecode.pngtastic.core.PngColorCounter: com.googlecode.pngtastic.core.processing.PngInterlaceHandler pngInterlaceHandler> = $r0;

        return;
    }


