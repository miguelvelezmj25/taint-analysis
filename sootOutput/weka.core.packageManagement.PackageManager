    public static weka.core.packageManagement.PackageManager create()
    {
        java.lang.Object manager, manager;
        java.io.File packageManagerPropsFile, $r3;
        java.util.Properties pmProps, $r11;
        java.lang.Exception ex, $r15;
        weka.core.packageManagement.DefaultPackageManager $r0;
        weka.core.packageManagement.PackageManager pm#3;
        java.lang.String managerName#7, $r5, $r7, $r10, managerName#43;
        int $i0, $i1;
        java.lang.Class $r1, $r13;
        java.lang.ClassLoader $r2, $r14;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r4, $r6, $r8, $r9;
        java.io.FileInputStream $r12;
        java.io.PrintStream $r16;

        $r0 = new weka.core.packageManagement.DefaultPackageManager;

        specialinvoke $r0.<weka.core.packageManagement.DefaultPackageManager: void <init>()>();

        pm#3 = $r0;

        virtualinvoke pm#3.<weka.core.packageManagement.PackageManager: void establishProxy()>();

     label1:
        managerName#7 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.pentaho.packageManagement.manager");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(managerName#7);

        if managerName#7 == null goto label3;

        $i0 = virtualinvoke managerName#7.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label3;

        $r1 = virtualinvoke pm#3.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        manager = staticinvoke <java.beans.Beans: java.lang.Object instantiate(java.lang.ClassLoader,java.lang.String)>($r2, managerName#7);

        $z0 = manager instanceof weka.core.packageManagement.PackageManager;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        pm#3 = (weka.core.packageManagement.PackageManager) manager;

     label2:
        goto label4;

     label3:
        $r3 = new java.io.File;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = <java.io.File: java.lang.String separator>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PackageManager.props");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r10);

        packageManagerPropsFile = $r3;

        $z1 = virtualinvoke packageManagerPropsFile.<java.io.File: boolean exists()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label4;

        $r11 = new java.util.Properties;

        specialinvoke $r11.<java.util.Properties: void <init>()>();

        pmProps = $r11;

        $r12 = new java.io.FileInputStream;

        specialinvoke $r12.<java.io.FileInputStream: void <init>(java.io.File)>(packageManagerPropsFile);

        virtualinvoke pmProps.<java.util.Properties: void load(java.io.InputStream)>($r12);

        managerName#43 = virtualinvoke pmProps.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("org.pentaho.packageManager.manager");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(managerName#43);

        if managerName#43 == null goto label4;

        $i1 = virtualinvoke managerName#43.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 0 goto label4;

        $r13 = virtualinvoke pm#3.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        manager = staticinvoke <java.beans.Beans: java.lang.Object instantiate(java.lang.ClassLoader,java.lang.String)>($r14, managerName#43);

        $z2 = manager instanceof weka.core.packageManagement.PackageManager;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label4;

        pm#3 = (weka.core.packageManagement.PackageManager) manager;

     label4:
        goto label6;

     label5:
        $r15 := @caughtexception;

        ex = $r15;

        $r16 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>("Problem instantiating package manager. Using DefaultPackageManager.");

     label6:
        return pm#3;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    public void establishProxy()
    {
        weka.core.packageManagement.PackageManager this;
        java.lang.String proxyHost, proxyPort, proxyUserName, proxyPassword;
        java.net.InetSocketAddress sa, $r0;
        int $i0, portNum#9, $i1, $i2, $i3;
        java.net.Proxy $r1;
        java.net.Proxy$Type $r2;

        this := @this: weka.core.packageManagement.PackageManager;

        proxyHost = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("http.proxyHost");

        proxyPort = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("http.proxyPort");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(proxyHost);

        if proxyHost == null goto label2;

        $i0 = virtualinvoke proxyHost.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label2;

        portNum#9 = 80;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(proxyPort);

        if proxyPort == null goto label1;

        $i1 = virtualinvoke proxyPort.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 0 goto label1;

        portNum#9 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(proxyPort);

     label1:
        $r0 = new java.net.InetSocketAddress;

        specialinvoke $r0.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>(proxyHost, portNum#9);

        sa = $r0;

        $r1 = new java.net.Proxy;

        $r2 = <java.net.Proxy$Type: java.net.Proxy$Type HTTP>;

        specialinvoke $r1.<java.net.Proxy: void <init>(java.net.Proxy$Type,java.net.SocketAddress)>($r2, sa);

        virtualinvoke this.<weka.core.packageManagement.PackageManager: void setProxy(java.net.Proxy)>($r1);

     label2:
        proxyUserName = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("http.proxyUser");

        proxyPassword = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("http.proxyPassword");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(proxyUserName);

        if proxyUserName == null goto label3;

        $i2 = virtualinvoke proxyUserName.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 <= 0 goto label3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(proxyPassword);

        if proxyPassword == null goto label3;

        $i3 = virtualinvoke proxyPassword.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 <= 0 goto label3;

        virtualinvoke this.<weka.core.packageManagement.PackageManager: void setProxyUsername(java.lang.String)>(proxyUserName);

        virtualinvoke this.<weka.core.packageManagement.PackageManager: void setProxyPassword(java.lang.String)>(proxyPassword);

     label3:
        return;
    }

    public void setProxy(java.net.Proxy)
    {
        weka.core.packageManagement.PackageManager this;
        java.net.Proxy proxyToUse;

        this := @this: weka.core.packageManagement.PackageManager;

        proxyToUse := @parameter0: java.net.Proxy;

        this.<weka.core.packageManagement.PackageManager: java.net.Proxy m_httpProxy> = proxyToUse;

        return;
    }

    public void setProxyUsername(java.lang.String)
    {
        weka.core.packageManagement.PackageManager this;
        java.lang.String proxyUsername;

        this := @this: weka.core.packageManagement.PackageManager;

        proxyUsername := @parameter0: java.lang.String;

        this.<weka.core.packageManagement.PackageManager: java.lang.String m_proxyUsername> = proxyUsername;

        return;
    }

    public void setProxyPassword(java.lang.String)
    {
        weka.core.packageManagement.PackageManager this;
        java.lang.String proxyPassword;

        this := @this: weka.core.packageManagement.PackageManager;

        proxyPassword := @parameter0: java.lang.String;

        this.<weka.core.packageManagement.PackageManager: java.lang.String m_proxyPassword> = proxyPassword;

        return;
    }

    public void <init>()
    {
        weka.core.packageManagement.PackageManager this;

        this := @this: weka.core.packageManagement.PackageManager;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public java.net.Proxy getProxy()
    {
        weka.core.packageManagement.PackageManager this;
        java.net.Proxy $r0;

        this := @this: weka.core.packageManagement.PackageManager;

        $r0 = this.<weka.core.packageManagement.PackageManager: java.net.Proxy m_httpProxy>;

        return $r0;
    }

    public synchronized boolean setProxyAuthentication(java.net.URL)
    {
        weka.core.packageManagement.PackageManager this;
        java.net.URL urlToConnectTo;
        java.net.ProxySelector ps;
        java.util.List proxyList;
        java.net.Proxy proxy, $r0, $r4, $r9;
        java.net.URISyntaxException e, $r3;
        java.net.URI $r1;
        java.lang.Object $r2;
        java.lang.String $r5, $r6;
        boolean $z0, $z1, $z2;
        weka.core.packageManagement.PackageManager$1 tmp$734576280;
        org.bounce.net.DefaultAuthenticator tmp$1134651830;
        java.net.Authenticator tmp$1939983049;

        this := @this: weka.core.packageManagement.PackageManager;

        urlToConnectTo := @parameter0: java.net.URL;

        $r0 = this.<weka.core.packageManagement.PackageManager: java.net.Proxy m_httpProxy>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label4;

        ps = staticinvoke <java.net.ProxySelector: java.net.ProxySelector getDefault()>();

     label1:
        $r1 = virtualinvoke urlToConnectTo.<java.net.URL: java.net.URI toURI()>();

        proxyList = virtualinvoke ps.<java.net.ProxySelector: java.util.List select(java.net.URI)>($r1);

        $r2 = interfaceinvoke proxyList.<java.util.List: java.lang.Object get(int)>(0);

        proxy = (java.net.Proxy) $r2;

        virtualinvoke this.<weka.core.packageManagement.PackageManager: void setProxy(java.net.Proxy)>(proxy);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        e = $r3;

        virtualinvoke e.<java.net.URISyntaxException: void printStackTrace()>();

     label4:
        $r4 = this.<weka.core.packageManagement.PackageManager: java.net.Proxy m_httpProxy>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        if $r4 == null goto label7;

        $r5 = this.<weka.core.packageManagement.PackageManager: java.lang.String m_proxyUsername>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r5);

        if $r5 == null goto label5;

        $r6 = this.<weka.core.packageManagement.PackageManager: java.lang.String m_proxyPassword>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r6);

        if $r6 == null goto label5;

        $z0 = this.<weka.core.packageManagement.PackageManager: boolean m_authenticatorSet>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label5;

        tmp$734576280 = new weka.core.packageManagement.PackageManager$1;

        specialinvoke tmp$734576280.<weka.core.packageManagement.PackageManager$1: void <init>(weka.core.packageManagement.PackageManager)>(this);

        staticinvoke <java.net.Authenticator: void setDefault(java.net.Authenticator)>(tmp$734576280);

        goto label6;

     label5:
        $z1 = this.<weka.core.packageManagement.PackageManager: boolean m_authenticatorSet>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label6;

        $z2 = staticinvoke <java.awt.GraphicsEnvironment: boolean isHeadless()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label6;

        tmp$1134651830 = new org.bounce.net.DefaultAuthenticator;

        specialinvoke tmp$1134651830.<org.bounce.net.DefaultAuthenticator: void <init>(javax.swing.JFrame)>(null);

        tmp$1939983049 = (java.net.Authenticator) tmp$1134651830;

        staticinvoke <java.net.Authenticator: void setDefault(java.net.Authenticator)>(tmp$1939983049);

        this.<weka.core.packageManagement.PackageManager: boolean m_authenticatorSet> = 1;

     label6:
        return 1;

     label7:
        $r9 = this.<weka.core.packageManagement.PackageManager: java.net.Proxy m_httpProxy>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r9);

        if $r9 == null goto label8;

        return 1;

     label8:
        return 0;

        catch java.net.URISyntaxException from label1 to label2 with label3;
    }

    public java.net.URL getPackageRepositoryURL()
    {
        weka.core.packageManagement.PackageManager this;
        java.net.URL $r0;

        this := @this: weka.core.packageManagement.PackageManager;

        $r0 = this.<weka.core.packageManagement.PackageManager: java.net.URL m_packageRepository>;

        return $r0;
    }

    public void setPackageRepositoryURL(java.net.URL)
    {
        weka.core.packageManagement.PackageManager this;
        java.net.URL repositoryURL;

        this := @this: weka.core.packageManagement.PackageManager;

        repositoryURL := @parameter0: java.net.URL;

        this.<weka.core.packageManagement.PackageManager: java.net.URL m_packageRepository> = repositoryURL;

        return;
    }

    public java.lang.String getBaseSystemName()
    {
        weka.core.packageManagement.PackageManager this;
        java.lang.String $r0;

        this := @this: weka.core.packageManagement.PackageManager;

        $r0 = this.<weka.core.packageManagement.PackageManager: java.lang.String m_baseSystemName>;

        return $r0;
    }

    public java.lang.Object getBaseSystemVersion()
    {
        weka.core.packageManagement.PackageManager this;
        java.lang.Object $r0;

        this := @this: weka.core.packageManagement.PackageManager;

        $r0 = this.<weka.core.packageManagement.PackageManager: java.lang.Object m_baseSystemVersion>;

        return $r0;
    }

    public void setBaseSystemVersion(java.lang.Object)
    {
        weka.core.packageManagement.PackageManager this;
        java.lang.Object systemV;

        this := @this: weka.core.packageManagement.PackageManager;

        systemV := @parameter0: java.lang.Object;

        this.<weka.core.packageManagement.PackageManager: java.lang.Object m_baseSystemVersion> = systemV;

        return;
    }

    public void setBaseSystemName(java.lang.String)
    {
        weka.core.packageManagement.PackageManager this;
        java.lang.String baseS;

        this := @this: weka.core.packageManagement.PackageManager;

        baseS := @parameter0: java.lang.String;

        this.<weka.core.packageManagement.PackageManager: java.lang.String m_baseSystemName> = baseS;

        return;
    }

    public void setPackageHome(java.io.File)
    {
        weka.core.packageManagement.PackageManager this;
        java.io.File packageHome;

        this := @this: weka.core.packageManagement.PackageManager;

        packageHome := @parameter0: java.io.File;

        this.<weka.core.packageManagement.PackageManager: java.io.File m_packageHome> = packageHome;

        return;
    }


