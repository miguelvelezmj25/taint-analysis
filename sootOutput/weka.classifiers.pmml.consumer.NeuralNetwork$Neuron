    protected void <init>(org.w3c.dom.Element, weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer)
    {
        weka.classifiers.pmml.consumer.NeuralNetwork$Neuron this;
        org.w3c.dom.Element neuronE, conE;
        weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer layer;
        java.lang.String bias, width, altitude, weight, $r0, $r4;
        org.w3c.dom.NodeList conL;
        org.w3c.dom.Node conN;
        int $i0, $i1, $i2, $i3, $i4, i#59, $i5;
        double $d0, $d1, $d2, $d3;
        java.lang.String[] $r1, $r3;
        double[] $r2, $r5;
        short $s6;

        this := @this: weka.classifiers.pmml.consumer.NeuralNetwork$Neuron;

        neuronE := @parameter0: org.w3c.dom.Element;

        layer := @parameter1: weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$Neuron: java.lang.String m_ID> = null;

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$Neuron: double m_bias> = 0.0;

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$Neuron: double m_neuronWidth> = #NaN;

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$Neuron: double m_neuronAltitude> = #NaN;

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$Neuron: java.lang.String[] m_connectionIDs> = null;

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$Neuron: double[] m_weights> = null;

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$Neuron: weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer m_layer> = layer;

        $r0 = interfaceinvoke neuronE.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("id");

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$Neuron: java.lang.String m_ID> = $r0;

        bias = interfaceinvoke neuronE.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("bias");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(bias);

        if bias == null goto label1;

        $i0 = virtualinvoke bias.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label1;

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(bias);

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$Neuron: double m_bias> = $d0;

     label1:
        width = interfaceinvoke neuronE.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("width");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(width);

        if width == null goto label2;

        $i1 = virtualinvoke width.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 0 goto label2;

        $d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(width);

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$Neuron: double m_neuronWidth> = $d1;

     label2:
        altitude = interfaceinvoke neuronE.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("altitude");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(altitude);

        if altitude == null goto label3;

        $i2 = virtualinvoke altitude.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 <= 0 goto label3;

        $d2 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(altitude);

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$Neuron: double m_neuronAltitude> = $d2;

     label3:
        conL = interfaceinvoke neuronE.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("Con");

        $i3 = interfaceinvoke conL.<org.w3c.dom.NodeList: int getLength()>();

        $r1 = newarray (java.lang.String)[$i3];

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$Neuron: java.lang.String[] m_connectionIDs> = $r1;

        $i4 = interfaceinvoke conL.<org.w3c.dom.NodeList: int getLength()>();

        $r2 = newarray (double)[$i4];

        this.<weka.classifiers.pmml.consumer.NeuralNetwork$Neuron: double[] m_weights> = $r2;

        i#59 = 0;

     label4:
        $i5 = interfaceinvoke conL.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#59);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if i#59 >= $i5 goto label6;

        conN = interfaceinvoke conL.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i#59);

        $s6 = interfaceinvoke conN.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s6);

        if $s6 != 1 goto label5;

        conE = (org.w3c.dom.Element) conN;

        $r3 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$Neuron: java.lang.String[] m_connectionIDs>;

        $r4 = interfaceinvoke conE.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("from");

        $r3[i#59] = $r4;

        weight = interfaceinvoke conE.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("weight");

        $r5 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$Neuron: double[] m_weights>;

        $d3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(weight);

        $r5[i#59] = $d3;

     label5:
        i#59 = i#59 + 1;

        goto label4;

     label6:
        return;
    }

    protected java.lang.String getID()
    {
        weka.classifiers.pmml.consumer.NeuralNetwork$Neuron this;
        java.lang.String $r0;

        this := @this: weka.classifiers.pmml.consumer.NeuralNetwork$Neuron;

        $r0 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$Neuron: java.lang.String m_ID>;

        return $r0;
    }

    protected double getValue(java.util.HashMap) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.NeuralNetwork$Neuron this;
        java.util.HashMap incoming;
        double width, threshold, altitude, fanIn, z#2, result#4, $d0, $d1, z#14, $d2, $d3, inV#54, $d4, $d5, $d6, inV#67, $d7, $d8, $d9, $d10, result#101;
        java.lang.Double inVal;
        boolean $z0, $z1;
        weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer $r0, $r13, $r18, $r21, $r22, $r24;
        int i#16, $i0, $i1;
        java.lang.String[] $r1, $r2, $r8, $r23;
        java.lang.String $r3, $r9, $r12;
        java.lang.Object $r4;
        java.lang.Exception $r5;
        java.lang.StringBuilder $r6, $r7, $r10, $r11;
        weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction $r14, $r15, $r19, $r20, $r25;
        double[] $r16, $r17;

        this := @this: weka.classifiers.pmml.consumer.NeuralNetwork$Neuron;

        incoming := @parameter0: java.util.HashMap;

        z#2 = 0.0;

        result#4 = #NaN;

        $d0 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$Neuron: double m_neuronWidth>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label01;

        $r0 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$Neuron: weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer m_layer>;

        $d1 = virtualinvoke $r0.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: double getWidth()>();

        goto label02;

     label01:
        $d1 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$Neuron: double m_neuronWidth>;

     label02:
        width = $d1;

        z#14 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$Neuron: double m_bias>;

        i#16 = 0;

     label03:
        $r1 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$Neuron: java.lang.String[] m_connectionIDs>;

        $i0 = lengthof $r1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#16);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#16 >= $i0 goto label07;

        $r2 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$Neuron: java.lang.String[] m_connectionIDs>;

        $r3 = $r2[i#16];

        $r4 = virtualinvoke incoming.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        inVal = (java.lang.Double) $r4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(inVal);

        if inVal != null goto label04;

        $r5 = new java.lang.Exception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[Neuron] unable to find connection ");

        $r8 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$Neuron: java.lang.String[] m_connectionIDs>;

        $r9 = $r8[i#16];

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in input Map!");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.Exception: void <init>(java.lang.String)>($r12);

        throw $r5;

     label04:
        $r13 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$Neuron: weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer m_layer>;

        $r14 = virtualinvoke $r13.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction getActivationFunction()>();

        $r15 = <weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction RADIALBASIS>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r14);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r15);

        if $r14 == $r15 goto label05;

        $d2 = virtualinvoke inVal.<java.lang.Double: double doubleValue()>();

        $r16 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$Neuron: double[] m_weights>;

        $d3 = $r16[i#16];

        inV#54 = $d2 * $d3;

        z#14 = z#14 + inV#54;

        goto label06;

     label05:
        $d4 = virtualinvoke inVal.<java.lang.Double: double doubleValue()>();

        $r17 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$Neuron: double[] m_weights>;

        $d5 = $r17[i#16];

        $d6 = $d4 - $d5;

        inV#67 = staticinvoke <java.lang.Math: double pow(double,double)>($d6, 2.0);

        z#14 = z#14 + inV#67;

     label06:
        i#16 = i#16 + 1;

        goto label03;

     label07:
        $r18 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$Neuron: weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer m_layer>;

        $r19 = virtualinvoke $r18.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction getActivationFunction()>();

        $r20 = <weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction RADIALBASIS>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r19);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r20);

        if $r19 != $r20 goto label08;

        $d7 = width * width;

        $d8 = 2.0 * $d7;

        z#14 = z#14 / $d8;

     label08:
        $r21 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$Neuron: weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer m_layer>;

        threshold = virtualinvoke $r21.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: double getThreshold()>();

        $d9 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$Neuron: double m_neuronAltitude>;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label09;

        $r22 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$Neuron: weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer m_layer>;

        $d10 = virtualinvoke $r22.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: double getAltitude()>();

        goto label10;

     label09:
        $d10 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$Neuron: double m_neuronAltitude>;

     label10:
        altitude = $d10;

        $r23 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$Neuron: java.lang.String[] m_connectionIDs>;

        $i1 = lengthof $r23;

        fanIn = (double) $i1;

        $r24 = this.<weka.classifiers.pmml.consumer.NeuralNetwork$Neuron: weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer m_layer>;

        $r25 = virtualinvoke $r24.<weka.classifiers.pmml.consumer.NeuralNetwork$NeuralLayer: weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction getActivationFunction()>();

        result#101 = virtualinvoke $r25.<weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction: double eval(double,double,double,double)>(z#14, threshold, altitude, fanIn);

        return result#101;
    }


