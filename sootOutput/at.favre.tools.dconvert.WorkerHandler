    public void start(java.util.List)
    {
        at.favre.tools.dconvert.WorkerHandler this;
        java.util.List allFiles, $r0, $r3, $r10, $r12;
        at.favre.tools.dconvert.WorkerHandler$InternalCallback internalCallback, $r1;
        java.util.Iterator l3, l5;
        java.lang.Object processor, $r4;
        java.io.File fileToProcess;
        int $i0, $i1, $i2, $i3;
        at.favre.tools.dconvert.WorkerHandler$Callback $r2, $r9;
        boolean $z0, $z1;
        java.util.concurrent.ExecutorService $r5, $r8;
        at.favre.tools.dconvert.WorkerHandler$Worker $r6;
        at.favre.tools.dconvert.arg.Arguments $r7;
        java.lang.StringBuilder $r11;

        this := @this: at.favre.tools.dconvert.WorkerHandler;

        allFiles := @parameter0: java.util.List;

        $i0 = interfaceinvoke allFiles.<java.util.List: int size()>();

        $r0 = this.<at.favre.tools.dconvert.WorkerHandler: java.util.List processors>;

        $i1 = interfaceinvoke $r0.<java.util.List: int size()>();

        $i2 = $i0 * $i1;

        this.<at.favre.tools.dconvert.WorkerHandler: int jobCount> = $i2;

        $r1 = new at.favre.tools.dconvert.WorkerHandler$InternalCallback;

        $r2 = this.<at.favre.tools.dconvert.WorkerHandler: at.favre.tools.dconvert.WorkerHandler$Callback callback>;

        specialinvoke $r1.<at.favre.tools.dconvert.WorkerHandler$InternalCallback: void <init>(at.favre.tools.dconvert.WorkerHandler,at.favre.tools.dconvert.WorkerHandler$Callback)>(this, $r2);

        internalCallback = $r1;

        $r3 = this.<at.favre.tools.dconvert.WorkerHandler: java.util.List processors>;

        l3 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label4;

        processor = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        l5 = interfaceinvoke allFiles.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        fileToProcess = (java.io.File) $r4;

        $r5 = this.<at.favre.tools.dconvert.WorkerHandler: java.util.concurrent.ExecutorService threadPool>;

        $r6 = new at.favre.tools.dconvert.WorkerHandler$Worker;

        $r7 = this.<at.favre.tools.dconvert.WorkerHandler: at.favre.tools.dconvert.arg.Arguments arguments>;

        specialinvoke $r6.<at.favre.tools.dconvert.WorkerHandler$Worker: void <init>(at.favre.tools.dconvert.WorkerHandler,java.io.File,java.lang.Object,at.favre.tools.dconvert.arg.Arguments,at.favre.tools.dconvert.WorkerHandler$InternalCallback)>(this, fileToProcess, processor, $r7, internalCallback);

        interfaceinvoke $r5.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r6);

        goto label2;

     label3:
        goto label1;

     label4:
        $r8 = this.<at.favre.tools.dconvert.WorkerHandler: java.util.concurrent.ExecutorService threadPool>;

        interfaceinvoke $r8.<java.util.concurrent.ExecutorService: void shutdown()>();

        $i3 = this.<at.favre.tools.dconvert.WorkerHandler: int jobCount>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 != 0 goto label5;

        $r9 = this.<at.favre.tools.dconvert.WorkerHandler: at.favre.tools.dconvert.WorkerHandler$Callback callback>;

        $r10 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        interfaceinvoke $r9.<at.favre.tools.dconvert.WorkerHandler$Callback: void onFinished(int,java.util.List,java.lang.StringBuilder,java.util.List,boolean)>(0, $r10, $r11, $r12, 0);

     label5:
        return;
    }

    public void <init>(java.util.List, at.favre.tools.dconvert.arg.Arguments, at.favre.tools.dconvert.WorkerHandler$Callback)
    {
        at.favre.tools.dconvert.WorkerHandler this;
        java.util.List processors;
        at.favre.tools.dconvert.arg.Arguments arguments;
        at.favre.tools.dconvert.WorkerHandler$Callback callback;
        java.util.concurrent.TimeUnit $r0;
        java.util.concurrent.ArrayBlockingQueue $r1;
        java.util.concurrent.ThreadPoolExecutor $r2;
        int $i0, $i1;

        this := @this: at.favre.tools.dconvert.WorkerHandler;

        processors := @parameter0: java.util.List;

        arguments := @parameter1: at.favre.tools.dconvert.arg.Arguments;

        callback := @parameter2: at.favre.tools.dconvert.WorkerHandler$Callback;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<at.favre.tools.dconvert.WorkerHandler: java.util.List processors> = processors;

        $r2 = new java.util.concurrent.ThreadPoolExecutor;

        $i0 = arguments.<at.favre.tools.dconvert.arg.Arguments: int threadCount>;

        $i1 = arguments.<at.favre.tools.dconvert.arg.Arguments: int threadCount>;

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r1 = new java.util.concurrent.ArrayBlockingQueue;

        specialinvoke $r1.<java.util.concurrent.ArrayBlockingQueue: void <init>(int)>(10240);

        specialinvoke $r2.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)>($i0, $i1, 5L, $r0, $r1);

        this.<at.favre.tools.dconvert.WorkerHandler: java.util.concurrent.ExecutorService threadPool> = $r2;

        this.<at.favre.tools.dconvert.WorkerHandler: at.favre.tools.dconvert.WorkerHandler$Callback callback> = callback;

        this.<at.favre.tools.dconvert.WorkerHandler: at.favre.tools.dconvert.arg.Arguments arguments> = arguments;

        return;
    }

    static int access$200(at.favre.tools.dconvert.WorkerHandler)
    {
        at.favre.tools.dconvert.WorkerHandler x0;
        int $i0;

        x0 := @parameter0: at.favre.tools.dconvert.WorkerHandler;

        $i0 = x0.<at.favre.tools.dconvert.WorkerHandler: int jobCount>;

        return $i0;
    }

    static java.util.concurrent.ExecutorService access$100(at.favre.tools.dconvert.WorkerHandler)
    {
        at.favre.tools.dconvert.WorkerHandler x0;
        java.util.concurrent.ExecutorService $r0;

        x0 := @parameter0: at.favre.tools.dconvert.WorkerHandler;

        $r0 = x0.<at.favre.tools.dconvert.WorkerHandler: java.util.concurrent.ExecutorService threadPool>;

        return $r0;
    }

    static at.favre.tools.dconvert.arg.Arguments access$000(at.favre.tools.dconvert.WorkerHandler)
    {
        at.favre.tools.dconvert.WorkerHandler x0;
        at.favre.tools.dconvert.arg.Arguments $r0;

        x0 := @parameter0: at.favre.tools.dconvert.WorkerHandler;

        $r0 = x0.<at.favre.tools.dconvert.WorkerHandler: at.favre.tools.dconvert.arg.Arguments arguments>;

        return $r0;
    }


