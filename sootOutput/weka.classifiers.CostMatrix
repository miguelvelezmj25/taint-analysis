    static void <clinit>()
    {
        <weka.classifiers.CostMatrix: java.lang.String FILE_EXTENSION> = ".cost";

        return;
    }

    public void <init>(int)
    {
        weka.classifiers.CostMatrix this;
        int numOfClasses;

        this := @this: weka.classifiers.CostMatrix;

        numOfClasses := @parameter0: int;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<weka.classifiers.CostMatrix: int m_size> = numOfClasses;

        virtualinvoke this.<weka.classifiers.CostMatrix: void initialize()>();

        return;
    }

    public void initialize()
    {
        weka.classifiers.CostMatrix this;
        int $i0, $i1, i#8, $i2, j#13, $i3, $i4, $i5;
        java.lang.Object[][] $r0;
        java.lang.Double $r2;

        this := @this: weka.classifiers.CostMatrix;

        $i0 = this.<weka.classifiers.CostMatrix: int m_size>;

        $i1 = this.<weka.classifiers.CostMatrix: int m_size>;

        $r0 = newmultiarray (java.lang.Object)[$i0][$i1];

        this.<weka.classifiers.CostMatrix: java.lang.Object[][] m_matrix> = $r0;

        i#8 = 0;

     label1:
        $i2 = this.<weka.classifiers.CostMatrix: int m_size>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#8 >= $i2 goto label6;

        j#13 = 0;

     label2:
        $i3 = this.<weka.classifiers.CostMatrix: int m_size>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#13);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if j#13 >= $i3 goto label5;

        $i4 = i#8;

        $i5 = j#13;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#13);

        if i#8 != j#13 goto label3;

        $r2 = new java.lang.Double;

        specialinvoke $r2.<java.lang.Double: void <init>(double)>(0.0);

        goto label4;

     label3:
        $r2 = new java.lang.Double;

        specialinvoke $r2.<java.lang.Double: void <init>(double)>(1.0);

     label4:
        virtualinvoke this.<weka.classifiers.CostMatrix: void setCell(int,int,java.lang.Object)>($i4, $i5, $r2);

        j#13 = j#13 + 1;

        goto label2;

     label5:
        i#8 = i#8 + 1;

        goto label1;

     label6:
        return;
    }

    public final void setCell(int, int, java.lang.Object)
    {
        weka.classifiers.CostMatrix this;
        int rowIndex, columnIndex;
        java.lang.Object value;
        java.lang.Object[][] $r0;
        java.lang.Object[] $r1;

        this := @this: weka.classifiers.CostMatrix;

        rowIndex := @parameter0: int;

        columnIndex := @parameter1: int;

        value := @parameter2: java.lang.Object;

        $r0 = this.<weka.classifiers.CostMatrix: java.lang.Object[][] m_matrix>;

        $r1 = $r0[rowIndex];

        $r1[columnIndex] = value;

        return;
    }

    public void readOldFormat(java.io.Reader) throws java.lang.Exception
    {
        weka.classifiers.CostMatrix this;
        java.io.Reader reader;
        java.io.StreamTokenizer tokenizer, $r1;
        double firstIndex, secondIndex, weight, $d0, $d1;
        java.lang.Double $r0;
        int $i0, currentToken#13, $i1, $i2, $i3, $i4, currentToken#42, $i5, $i6, $i7, $i8, $i9, $i10, currentToken#84, $i11, $i12;
        java.lang.Exception $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        boolean $z0, $z1, $z2;

        this := @this: weka.classifiers.CostMatrix;

        reader := @parameter0: java.io.Reader;

        $r1 = new java.io.StreamTokenizer;

        specialinvoke $r1.<java.io.StreamTokenizer: void <init>(java.io.Reader)>(reader);

        tokenizer = $r1;

        virtualinvoke this.<weka.classifiers.CostMatrix: void initialize()>();

        virtualinvoke tokenizer.<java.io.StreamTokenizer: void commentChar(int)>(37);

        virtualinvoke tokenizer.<java.io.StreamTokenizer: void eolIsSignificant(boolean)>(1);

     label01:
        $i0 = virtualinvoke tokenizer.<java.io.StreamTokenizer: int nextToken()>();

        currentToken#13 = $i0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if -1 == $i0 goto label16;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(currentToken#13);

        if currentToken#13 != 10 goto label02;

        goto label01;

     label02:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(currentToken#13);

        if currentToken#13 == -2 goto label03;

        $r2 = new java.lang.Exception;

        specialinvoke $r2.<java.lang.Exception: void <init>(java.lang.String)>("Only numbers and comments allowed in cost file!");

        throw $r2;

     label03:
        firstIndex = tokenizer.<java.io.StreamTokenizer: double nval>;

        $i1 = (int) firstIndex;

        $d0 = (double) $i1;

        $z0 = staticinvoke <weka.core.Utils: boolean eq(double,double)>($d0, firstIndex);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label04;

        $r3 = new java.lang.Exception;

        specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String)>("First number in line has to be index of a class!");

        throw $r3;

     label04:
        $i2 = (int) firstIndex;

        $i3 = virtualinvoke this.<weka.classifiers.CostMatrix: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i2 < $i3 goto label05;

        $r4 = new java.lang.Exception;

        specialinvoke $r4.<java.lang.Exception: void <init>(java.lang.String)>("Class index out of range!");

        throw $r4;

     label05:
        $i4 = virtualinvoke tokenizer.<java.io.StreamTokenizer: int nextToken()>();

        currentToken#42 = $i4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if -1 != $i4 goto label06;

        $r5 = new java.lang.Exception;

        specialinvoke $r5.<java.lang.Exception: void <init>(java.lang.String)>("Premature end of file!");

        throw $r5;

     label06:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(currentToken#42);

        if currentToken#42 != 10 goto label07;

        $r6 = new java.lang.Exception;

        specialinvoke $r6.<java.lang.Exception: void <init>(java.lang.String)>("Premature end of line!");

        throw $r6;

     label07:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(currentToken#42);

        if currentToken#42 == -2 goto label08;

        $r7 = new java.lang.Exception;

        specialinvoke $r7.<java.lang.Exception: void <init>(java.lang.String)>("Only numbers and comments allowed in cost file!");

        throw $r7;

     label08:
        secondIndex = tokenizer.<java.io.StreamTokenizer: double nval>;

        $i5 = (int) secondIndex;

        $d1 = (double) $i5;

        $z1 = staticinvoke <weka.core.Utils: boolean eq(double,double)>($d1, secondIndex);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label09;

        $r8 = new java.lang.Exception;

        specialinvoke $r8.<java.lang.Exception: void <init>(java.lang.String)>("Second number in line has to be index of a class!");

        throw $r8;

     label09:
        $i6 = (int) secondIndex;

        $i7 = virtualinvoke this.<weka.classifiers.CostMatrix: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if $i6 < $i7 goto label10;

        $r9 = new java.lang.Exception;

        specialinvoke $r9.<java.lang.Exception: void <init>(java.lang.String)>("Class index out of range!");

        throw $r9;

     label10:
        $i8 = (int) secondIndex;

        $i9 = (int) firstIndex;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        if $i8 != $i9 goto label11;

        $r10 = new java.lang.Exception;

        specialinvoke $r10.<java.lang.Exception: void <init>(java.lang.String)>("Diagonal of cost matrix non-zero!");

        throw $r10;

     label11:
        $i10 = virtualinvoke tokenizer.<java.io.StreamTokenizer: int nextToken()>();

        currentToken#84 = $i10;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i10);

        if -1 != $i10 goto label12;

        $r11 = new java.lang.Exception;

        specialinvoke $r11.<java.lang.Exception: void <init>(java.lang.String)>("Premature end of file!");

        throw $r11;

     label12:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(currentToken#84);

        if currentToken#84 != 10 goto label13;

        $r12 = new java.lang.Exception;

        specialinvoke $r12.<java.lang.Exception: void <init>(java.lang.String)>("Premature end of line!");

        throw $r12;

     label13:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(currentToken#84);

        if currentToken#84 == -2 goto label14;

        $r13 = new java.lang.Exception;

        specialinvoke $r13.<java.lang.Exception: void <init>(java.lang.String)>("Only numbers and comments allowed in cost file!");

        throw $r13;

     label14:
        weight = tokenizer.<java.io.StreamTokenizer: double nval>;

        $z2 = staticinvoke <weka.core.Utils: boolean gr(double,double)>(weight, 0.0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label15;

        $r14 = new java.lang.Exception;

        specialinvoke $r14.<java.lang.Exception: void <init>(java.lang.String)>("Only positive weights allowed!");

        throw $r14;

     label15:
        $i11 = (int) firstIndex;

        $i12 = (int) secondIndex;

        $r0 = new java.lang.Double;

        specialinvoke $r0.<java.lang.Double: void <init>(double)>(weight);

        virtualinvoke this.<weka.classifiers.CostMatrix: void setCell(int,int,java.lang.Object)>($i11, $i12, $r0);

        goto label01;

     label16:
        return;
    }

    public int size()
    {
        weka.classifiers.CostMatrix this;
        int $i0;

        this := @this: weka.classifiers.CostMatrix;

        $i0 = this.<weka.classifiers.CostMatrix: int m_size>;

        return $i0;
    }

    public void <init>(java.io.Reader) throws java.lang.Exception
    {
        weka.classifiers.CostMatrix this;
        java.io.Reader reader;
        java.io.LineNumberReader lnr, $r0;
        java.lang.String line, nextTok, $r1, $r3, $r9, $r10, $r17, $r23, $r31, $r37;
        java.util.StringTokenizer st, $r2;
        int rows, cols, currentRow#6, $i0, $i1, $i2, i#63, $i3, $i4, $i5, $i6, $i7;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Exception $r4, $r11, $r12, $r18, $r25, $r26, $r32;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r13, $r14, $r15, $r16, $r19, $r20, $r21, $r22, $r27, $r28, $r29, $r30, $r33, $r34, $r35, $r36;
        java.lang.Double $r24, val#88;

        this := @this: weka.classifiers.CostMatrix;

        reader := @parameter0: java.io.Reader;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = new java.io.LineNumberReader;

        specialinvoke $r0.<java.io.LineNumberReader: void <init>(java.io.Reader)>(reader);

        lnr = $r0;

        currentRow#6 = -1;

     label01:
        $r1 = virtualinvoke lnr.<java.io.LineNumberReader: java.lang.String readLine()>();

        line = $r1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 == null goto label17;

        $z0 = virtualinvoke line.<java.lang.String: boolean startsWith(java.lang.String)>("%");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label02;

        goto label01;

     label02:
        $r2 = new java.util.StringTokenizer;

        specialinvoke $r2.<java.util.StringTokenizer: void <init>(java.lang.String)>(line);

        st = $r2;

        $z1 = virtualinvoke st.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label03;

        goto label01;

     label03:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(currentRow#6);

        if currentRow#6 >= 0 goto label06;

        $r3 = virtualinvoke st.<java.util.StringTokenizer: java.lang.String nextToken()>();

        rows = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        $z2 = virtualinvoke st.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label04;

        $r4 = new java.lang.Exception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Line ");

        $i0 = virtualinvoke lnr.<java.io.LineNumberReader: int getLineNumber()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": expected number of columns");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.Exception: void <init>(java.lang.String)>($r9);

        throw $r4;

     label04:
        $r10 = virtualinvoke st.<java.util.StringTokenizer: java.lang.String nextToken()>();

        cols = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r10);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(rows);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(cols);

        if rows == cols goto label05;

        $r11 = new java.lang.Exception;

        specialinvoke $r11.<java.lang.Exception: void <init>(java.lang.String)>("Trying to create a non-square cost matrix");

        throw $r11;

     label05:
        this.<weka.classifiers.CostMatrix: int m_size> = rows;

        virtualinvoke this.<weka.classifiers.CostMatrix: void initialize()>();

        currentRow#6 = currentRow#6 + 1;

        goto label01;

     label06:
        $i1 = this.<weka.classifiers.CostMatrix: int m_size>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(currentRow#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if currentRow#6 != $i1 goto label07;

        $r12 = new java.lang.Exception;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Line ");

        $i2 = virtualinvoke lnr.<java.io.LineNumberReader: int getLineNumber()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": too many rows provided");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.Exception: void <init>(java.lang.String)>($r17);

        throw $r12;

     label07:
        i#63 = 0;

     label08:
        $i3 = this.<weka.classifiers.CostMatrix: int m_size>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#63);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if i#63 >= $i3 goto label16;

        $z3 = virtualinvoke st.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label09;

        $r18 = new java.lang.Exception;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Line ");

        $i4 = virtualinvoke lnr.<java.io.LineNumberReader: int getLineNumber()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": too few matrix elements provided");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.Exception: void <init>(java.lang.String)>($r23);

        throw $r18;

     label09:
        nextTok = virtualinvoke st.<java.util.StringTokenizer: java.lang.String nextToken()>();

     label10:
        $r24 = new java.lang.Double;

        specialinvoke $r24.<java.lang.Double: void <init>(java.lang.String)>(nextTok);

        val#88 = $r24;

     label11:
        goto label13;

     label12:
        $r25 := @caughtexception;

        val#88 = null;

     label13:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(val#88);

        if val#88 != null goto label14;

        virtualinvoke this.<weka.classifiers.CostMatrix: void setCell(int,int,java.lang.Object)>(currentRow#6, i#63, nextTok);

        goto label15;

     label14:
        virtualinvoke this.<weka.classifiers.CostMatrix: void setCell(int,int,java.lang.Object)>(currentRow#6, i#63, val#88);

     label15:
        i#63 = i#63 + 1;

        goto label08;

     label16:
        currentRow#6 = currentRow#6 + 1;

        goto label01;

     label17:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(currentRow#6);

        if currentRow#6 != -1 goto label18;

        $r26 = new java.lang.Exception;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Line ");

        $i5 = virtualinvoke lnr.<java.io.LineNumberReader: int getLineNumber()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": expected number of rows");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.lang.Exception: void <init>(java.lang.String)>($r31);

        throw $r26;

     label18:
        $i6 = this.<weka.classifiers.CostMatrix: int m_size>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(currentRow#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if currentRow#6 == $i6 goto label19;

        $r32 = new java.lang.Exception;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Line ");

        $i7 = virtualinvoke lnr.<java.io.LineNumberReader: int getLineNumber()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": too few rows provided");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<java.lang.Exception: void <init>(java.lang.String)>($r37);

        throw $r32;

     label19:
        return;

        catch java.lang.Exception from label10 to label11 with label12;
    }

    public java.lang.String toString()
    {
        weka.classifiers.CostMatrix this;
        double fract, maxval#2, current#31, $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        int width, diff, widthNumber#8, widthExpression#10, i#12, $i1, j#17, $i2, $i6, $i9, i#82, $i10, j#87, $i11, $i13, left#117, $i14, left#123, $i15, $i16;
        java.lang.StringBuffer text, $r3, $r4, $r10, $r11;
        boolean fractional#4, $z0, $z1;
        java.lang.Object element#25, element#95;
        java.lang.Double $r0, $r5;
        byte $b3, $b4, $b5, $b7, $b8, $b12;
        java.lang.String $r1, $r2, $r6, $r7, $r8, $r9, temp#132, temp#136, $r12, $r13;

        this := @this: weka.classifiers.CostMatrix;

        maxval#2 = 0.0;

        fractional#4 = 0;

        widthNumber#8 = 0;

        widthExpression#10 = 0;

        i#12 = 0;

     label01:
        $i1 = virtualinvoke this.<weka.classifiers.CostMatrix: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#12 >= $i1 goto label09;

        j#17 = 0;

     label02:
        $i2 = virtualinvoke this.<weka.classifiers.CostMatrix: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#17);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if j#17 >= $i2 goto label08;

        element#25 = virtualinvoke this.<weka.classifiers.CostMatrix: java.lang.Object getCell(int,int)>(i#12, j#17);

        $z0 = element#25 instanceof java.lang.Double;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label06;

        $r0 = (java.lang.Double) element#25;

        current#31 = virtualinvoke $r0.<java.lang.Double: double doubleValue()>();

        $b3 = current#31 cmpg 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b3);

        if $b3 >= 0 goto label03;

        current#31 = current#31 * -11.0;

     label03:
        $b4 = current#31 cmpl maxval#2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b4);

        if $b4 <= 0 goto label04;

        maxval#2 = current#31;

     label04:
        $d0 = staticinvoke <java.lang.Math: double rint(double)>(current#31);

        $d1 = current#31 - $d0;

        fract = staticinvoke <java.lang.Math: double abs(double)>($d1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(fractional#4);

        if fractional#4 != 0 goto label05;

        $d2 = staticinvoke <java.lang.Math: double log(double)>(fract);

        $d3 = staticinvoke <java.lang.Math: double log(double)>(10.0);

        $d4 = $d2 / $d3;

        $b5 = $d4 cmpl -2.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b5);

        if $b5 < 0 goto label05;

        fractional#4 = 1;

     label05:
        goto label07;

     label06:
        $r1 = virtualinvoke element#25.<java.lang.Object: java.lang.String toString()>();

        $i6 = virtualinvoke $r1.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(widthExpression#10);

        if $i6 <= widthExpression#10 goto label07;

        $r2 = virtualinvoke element#25.<java.lang.Object: java.lang.String toString()>();

        widthExpression#10 = virtualinvoke $r2.<java.lang.String: int length()>();

     label07:
        j#17 = j#17 + 1;

        goto label02;

     label08:
        i#12 = i#12 + 1;

        goto label01;

     label09:
        $b7 = maxval#2 cmpl 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b7);

        if $b7 <= 0 goto label12;

        $d5 = staticinvoke <java.lang.Math: double log(double)>(maxval#2);

        $d6 = staticinvoke <java.lang.Math: double log(double)>(10.0);

        $d7 = $d5 / $d6;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(fractional#4);

        if fractional#4 == 0 goto label10;

        $b8 = 4;

        goto label11;

     label10:
        $b8 = 1;

     label11:
        $d8 = (double) $b8;

        $d9 = $d7 + $d8;

        widthNumber#8 = (int) $d9;

     label12:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(widthNumber#8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(widthExpression#10);

        if widthNumber#8 <= widthExpression#10 goto label13;

        $i9 = widthNumber#8;

        goto label14;

     label13:
        $i9 = widthExpression#10;

     label14:
        width = $i9;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        text = $r3;

        i#82 = 0;

     label15:
        $i10 = virtualinvoke this.<weka.classifiers.CostMatrix: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#82);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i10);

        if i#82 >= $i10 goto label23;

        j#87 = 0;

     label16:
        $i11 = virtualinvoke this.<weka.classifiers.CostMatrix: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#87);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i11);

        if j#87 >= $i11 goto label22;

        element#95 = virtualinvoke this.<weka.classifiers.CostMatrix: java.lang.Object getCell(int,int)>(i#82, j#87);

        $z1 = element#95 instanceof java.lang.Double;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label19;

        $r4 = virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r5 = (java.lang.Double) element#95;

        $d10 = virtualinvoke $r5.<java.lang.Double: double doubleValue()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(fractional#4);

        if fractional#4 == 0 goto label17;

        $b12 = 2;

        goto label18;

     label17:
        $b12 = 0;

     label18:
        $r6 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>($d10, width, $b12);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        goto label21;

     label19:
        $r7 = virtualinvoke element#95.<java.lang.Object: java.lang.String toString()>();

        $i13 = virtualinvoke $r7.<java.lang.String: int length()>();

        diff = width - $i13;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(diff);

        if diff <= 0 goto label20;

        left#117 = diff % 2;

        $i14 = diff / 2;

        left#123 = left#117 + $i14;

        $r8 = virtualinvoke element#95.<java.lang.Object: java.lang.String toString()>();

        $r9 = virtualinvoke element#95.<java.lang.Object: java.lang.String toString()>();

        $i15 = virtualinvoke $r9.<java.lang.String: int length()>();

        $i16 = $i15 + left#123;

        temp#132 = staticinvoke <weka.core.Utils: java.lang.String padLeft(java.lang.String,int)>($r8, $i16);

        temp#136 = staticinvoke <weka.core.Utils: java.lang.String padRight(java.lang.String,int)>(temp#132, width);

        $r10 = virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(temp#136);

        goto label21;

     label20:
        $r11 = virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r12 = virtualinvoke element#95.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

     label21:
        j#87 = j#87 + 1;

        goto label16;

     label22:
        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        i#82 = i#82 + 1;

        goto label15;

     label23:
        $r13 = virtualinvoke text.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r13;
    }

    public final java.lang.Object getCell(int, int)
    {
        weka.classifiers.CostMatrix this;
        int rowIndex, columnIndex;
        java.lang.Object[][] $r0;
        java.lang.Object[] $r1;
        java.lang.Object $r2;

        this := @this: weka.classifiers.CostMatrix;

        rowIndex := @parameter0: int;

        columnIndex := @parameter1: int;

        $r0 = this.<weka.classifiers.CostMatrix: java.lang.Object[][] m_matrix>;

        $r1 = $r0[rowIndex];

        $r2 = $r1[columnIndex];

        return $r2;
    }

    public final double getElement(int, int, weka.core.Instance) throws java.lang.Exception
    {
        weka.classifiers.CostMatrix this;
        int rowIndex, columnIndex;
        weka.core.Instance inst;
        java.lang.Object[][] $r0, $r3, $r7, $r11;
        java.lang.Object[] $r1, $r4, $r8, $r12;
        java.lang.Object $r2, $r5, $r9, $r13;
        boolean $z0, $z1;
        java.lang.Double $r6;
        double $d0, $d1;
        weka.core.Instances $r10;
        weka.classifiers.CostMatrix$InstanceExpression $r14;

        this := @this: weka.classifiers.CostMatrix;

        rowIndex := @parameter0: int;

        columnIndex := @parameter1: int;

        inst := @parameter2: weka.core.Instance;

        $r0 = this.<weka.classifiers.CostMatrix: java.lang.Object[][] m_matrix>;

        $r1 = $r0[rowIndex];

        $r2 = $r1[columnIndex];

        $z0 = $r2 instanceof java.lang.Double;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r3 = this.<weka.classifiers.CostMatrix: java.lang.Object[][] m_matrix>;

        $r4 = $r3[rowIndex];

        $r5 = $r4[columnIndex];

        $r6 = (java.lang.Double) $r5;

        $d0 = virtualinvoke $r6.<java.lang.Double: double doubleValue()>();

        return $d0;

     label1:
        $r7 = this.<weka.classifiers.CostMatrix: java.lang.Object[][] m_matrix>;

        $r8 = $r7[rowIndex];

        $r9 = $r8[columnIndex];

        $z1 = $r9 instanceof java.lang.String;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        $r10 = interfaceinvoke inst.<weka.core.Instance: weka.core.Instances dataset()>();

        specialinvoke this.<weka.classifiers.CostMatrix: boolean replaceStrings(weka.core.Instances)>($r10);

     label2:
        $r11 = this.<weka.classifiers.CostMatrix: java.lang.Object[][] m_matrix>;

        $r12 = $r11[rowIndex];

        $r13 = $r12[columnIndex];

        $r14 = (weka.classifiers.CostMatrix$InstanceExpression) $r13;

        $d1 = virtualinvoke $r14.<weka.classifiers.CostMatrix$InstanceExpression: double evaluate(weka.core.Instance)>(inst);

        return $d1;
    }

    private boolean replaceStrings(weka.core.Instances) throws java.lang.Exception
    {
        weka.classifiers.CostMatrix this;
        weka.core.Instances dataset;
        weka.classifiers.CostMatrix$InstanceExpression $r0;
        boolean nonDouble#2, $z0, $z1;
        int i#4, $i0, j#9, $i1;
        java.lang.Object $r1, $r2, $r4;
        java.lang.String $r3;

        this := @this: weka.classifiers.CostMatrix;

        dataset := @parameter0: weka.core.Instances;

        nonDouble#2 = 0;

        i#4 = 0;

     label1:
        $i0 = this.<weka.classifiers.CostMatrix: int m_size>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#4 >= $i0 goto label6;

        j#9 = 0;

     label2:
        $i1 = this.<weka.classifiers.CostMatrix: int m_size>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if j#9 >= $i1 goto label5;

        $r1 = virtualinvoke this.<weka.classifiers.CostMatrix: java.lang.Object getCell(int,int)>(i#4, j#9);

        $z0 = $r1 instanceof java.lang.String;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        $r0 = new weka.classifiers.CostMatrix$InstanceExpression;

        $r2 = virtualinvoke this.<weka.classifiers.CostMatrix: java.lang.Object getCell(int,int)>(i#4, j#9);

        $r3 = (java.lang.String) $r2;

        specialinvoke $r0.<weka.classifiers.CostMatrix$InstanceExpression: void <init>(java.lang.String,weka.core.Instances)>($r3, dataset);

        virtualinvoke this.<weka.classifiers.CostMatrix: void setCell(int,int,java.lang.Object)>(i#4, j#9, $r0);

        nonDouble#2 = 1;

        goto label4;

     label3:
        $r4 = virtualinvoke this.<weka.classifiers.CostMatrix: java.lang.Object getCell(int,int)>(i#4, j#9);

        $z1 = $r4 instanceof weka.classifiers.CostMatrix$InstanceExpression;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label4;

        nonDouble#2 = 1;

     label4:
        j#9 = j#9 + 1;

        goto label2;

     label5:
        i#4 = i#4 + 1;

        goto label1;

     label6:
        return nonDouble#2;
    }

    public double getMaxCost(int, weka.core.Instance) throws java.lang.Exception
    {
        weka.classifiers.CostMatrix this;
        int classVal, i#11, $i0;
        weka.core.Instance inst;
        java.lang.Object element;
        weka.core.Instances $r0;
        boolean $z0, $z1;
        double $d0, maxCost#9, cost#25;
        weka.classifiers.CostMatrix$InstanceExpression $r1;
        java.lang.Double $r2;
        byte $b1;

        this := @this: weka.classifiers.CostMatrix;

        classVal := @parameter0: int;

        inst := @parameter1: weka.core.Instance;

        $r0 = interfaceinvoke inst.<weka.core.Instance: weka.core.Instances dataset()>();

        $z0 = specialinvoke this.<weka.classifiers.CostMatrix: boolean replaceStrings(weka.core.Instances)>($r0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $d0 = virtualinvoke this.<weka.classifiers.CostMatrix: double getMaxCost(int)>(classVal);

        return $d0;

     label1:
        maxCost#9 = #-Infinity;

        i#11 = 0;

     label2:
        $i0 = this.<weka.classifiers.CostMatrix: int m_size>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#11);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#11 >= $i0 goto label6;

        element = virtualinvoke this.<weka.classifiers.CostMatrix: java.lang.Object getCell(int,int)>(classVal, i#11);

        $z1 = element instanceof java.lang.Double;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label3;

        $r1 = (weka.classifiers.CostMatrix$InstanceExpression) element;

        cost#25 = virtualinvoke $r1.<weka.classifiers.CostMatrix$InstanceExpression: double evaluate(weka.core.Instance)>(inst);

        goto label4;

     label3:
        $r2 = (java.lang.Double) element;

        cost#25 = virtualinvoke $r2.<java.lang.Double: double doubleValue()>();

     label4:
        $b1 = cost#25 cmpl maxCost#9;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 <= 0 goto label5;

        maxCost#9 = cost#25;

     label5:
        i#11 = i#11 + 1;

        goto label2;

     label6:
        return maxCost#9;
    }

    public double getMaxCost(int) throws java.lang.Exception
    {
        weka.classifiers.CostMatrix this;
        int classVal, i#4, $i0;
        java.lang.Object element;
        double cost, maxCost#2;
        boolean $z0;
        java.lang.Exception $r0;
        java.lang.Double $r1;
        byte $b1;

        this := @this: weka.classifiers.CostMatrix;

        classVal := @parameter0: int;

        maxCost#2 = #-Infinity;

        i#4 = 0;

     label1:
        $i0 = this.<weka.classifiers.CostMatrix: int m_size>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#4 >= $i0 goto label4;

        element = virtualinvoke this.<weka.classifiers.CostMatrix: java.lang.Object getCell(int,int)>(classVal, i#4);

        $z0 = element instanceof java.lang.Double;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label2;

        $r0 = new java.lang.Exception;

        specialinvoke $r0.<java.lang.Exception: void <init>(java.lang.String)>("Can\'t use non-fixed costs when getting max cost.");

        throw $r0;

     label2:
        $r1 = (java.lang.Double) element;

        cost = virtualinvoke $r1.<java.lang.Double: double doubleValue()>();

        $b1 = cost cmpl maxCost#2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 <= 0 goto label3;

        maxCost#2 = cost;

     label3:
        i#4 = i#4 + 1;

        goto label1;

     label4:
        return maxCost#2;
    }


