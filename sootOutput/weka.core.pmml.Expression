    public static weka.core.pmml.Expression getExpression(org.w3c.dom.Node, weka.core.pmml.FieldMetaInfo$Optype, java.util.ArrayList, weka.core.pmml.TransformationDictionary) throws java.lang.Exception
    {
        org.w3c.dom.Node container, child;
        weka.core.pmml.FieldMetaInfo$Optype opType;
        java.util.ArrayList fieldDefs;
        weka.core.pmml.TransformationDictionary transDict;
        org.w3c.dom.NodeList children;
        weka.core.pmml.Expression result#2;
        java.lang.String tagName#4, tagName#26;
        int $i0, i#13, $i1;
        java.lang.Exception $r0;
        short $s2;
        org.w3c.dom.Element $r1;

        container := @parameter0: org.w3c.dom.Node;

        opType := @parameter1: weka.core.pmml.FieldMetaInfo$Optype;

        fieldDefs := @parameter2: java.util.ArrayList;

        transDict := @parameter3: weka.core.pmml.TransformationDictionary;

        result#2 = null;

        tagName#4 = "";

        children = interfaceinvoke container.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        $i0 = interfaceinvoke children.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 0 goto label1;

        $r0 = new java.lang.Exception;

        specialinvoke $r0.<java.lang.Exception: void <init>(java.lang.String)>("[Expression] container has no children!");

        throw $r0;

     label1:
        i#13 = 0;

     label2:
        $i1 = interfaceinvoke children.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#13);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#13 >= $i1 goto label4;

        child = interfaceinvoke children.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i#13);

        $s2 = interfaceinvoke child.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s2);

        if $s2 != 1 goto label3;

        $r1 = (org.w3c.dom.Element) child;

        tagName#26 = interfaceinvoke $r1.<org.w3c.dom.Element: java.lang.String getTagName()>();

        result#2 = staticinvoke <weka.core.pmml.Expression: weka.core.pmml.Expression getExpression(java.lang.String,org.w3c.dom.Node,weka.core.pmml.FieldMetaInfo$Optype,java.util.ArrayList,weka.core.pmml.TransformationDictionary)>(tagName#26, child, opType, fieldDefs, transDict);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(result#2);

        if result#2 == null goto label3;

        goto label4;

     label3:
        i#13 = i#13 + 1;

        goto label2;

     label4:
        return result#2;
    }

    public static weka.core.pmml.Expression getExpression(java.lang.String, org.w3c.dom.Node, weka.core.pmml.FieldMetaInfo$Optype, java.util.ArrayList, weka.core.pmml.TransformationDictionary) throws java.lang.Exception
    {
        java.lang.String name, $r16;
        org.w3c.dom.Node expression;
        weka.core.pmml.FieldMetaInfo$Optype opType;
        java.util.ArrayList fieldDefs;
        weka.core.pmml.TransformationDictionary transDict;
        weka.core.pmml.Expression result#2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        weka.core.pmml.Constant $r0;
        org.w3c.dom.Element $r1, $r3, $r5, $r7, $r9, $r11;
        weka.core.pmml.FieldRef $r2;
        weka.core.pmml.Apply $r4;
        weka.core.pmml.NormDiscrete $r6;
        weka.core.pmml.NormContinuous $r8;
        weka.core.pmml.Discretize $r10;
        java.lang.Exception $r12;
        java.lang.StringBuilder $r13, $r14, $r15;

        name := @parameter0: java.lang.String;

        expression := @parameter1: org.w3c.dom.Node;

        opType := @parameter2: weka.core.pmml.FieldMetaInfo$Optype;

        fieldDefs := @parameter3: java.util.ArrayList;

        transDict := @parameter4: weka.core.pmml.TransformationDictionary;

        result#2 = null;

        $z0 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>("Constant");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r0 = new weka.core.pmml.Constant;

        $r1 = (org.w3c.dom.Element) expression;

        specialinvoke $r0.<weka.core.pmml.Constant: void <init>(org.w3c.dom.Element,weka.core.pmml.FieldMetaInfo$Optype,java.util.ArrayList)>($r1, opType, fieldDefs);

        result#2 = $r0;

        goto label8;

     label1:
        $z1 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>("FieldRef");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        $r2 = new weka.core.pmml.FieldRef;

        $r3 = (org.w3c.dom.Element) expression;

        specialinvoke $r2.<weka.core.pmml.FieldRef: void <init>(org.w3c.dom.Element,weka.core.pmml.FieldMetaInfo$Optype,java.util.ArrayList)>($r3, opType, fieldDefs);

        result#2 = $r2;

        goto label8;

     label2:
        $z2 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>("Apply");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label3;

        $r4 = new weka.core.pmml.Apply;

        $r5 = (org.w3c.dom.Element) expression;

        specialinvoke $r4.<weka.core.pmml.Apply: void <init>(org.w3c.dom.Element,weka.core.pmml.FieldMetaInfo$Optype,java.util.ArrayList,weka.core.pmml.TransformationDictionary)>($r5, opType, fieldDefs, transDict);

        result#2 = $r4;

        goto label8;

     label3:
        $z3 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>("NormDiscrete");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label4;

        $r6 = new weka.core.pmml.NormDiscrete;

        $r7 = (org.w3c.dom.Element) expression;

        specialinvoke $r6.<weka.core.pmml.NormDiscrete: void <init>(org.w3c.dom.Element,weka.core.pmml.FieldMetaInfo$Optype,java.util.ArrayList)>($r7, opType, fieldDefs);

        result#2 = $r6;

        goto label8;

     label4:
        $z4 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>("NormContinuous");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label5;

        $r8 = new weka.core.pmml.NormContinuous;

        $r9 = (org.w3c.dom.Element) expression;

        specialinvoke $r8.<weka.core.pmml.NormContinuous: void <init>(org.w3c.dom.Element,weka.core.pmml.FieldMetaInfo$Optype,java.util.ArrayList)>($r9, opType, fieldDefs);

        result#2 = $r8;

        goto label8;

     label5:
        $z5 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>("Discretize");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label6;

        $r10 = new weka.core.pmml.Discretize;

        $r11 = (org.w3c.dom.Element) expression;

        specialinvoke $r10.<weka.core.pmml.Discretize: void <init>(org.w3c.dom.Element,weka.core.pmml.FieldMetaInfo$Optype,java.util.ArrayList)>($r11, opType, fieldDefs);

        result#2 = $r10;

        goto label8;

     label6:
        $z6 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>("MapValues");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 != 0 goto label7;

        $z7 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>("Aggregate");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 == 0 goto label8;

     label7:
        $r12 = new java.lang.Exception;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[Expression] Unhandled Expression type ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.Exception: void <init>(java.lang.String)>($r16);

        throw $r12;

     label8:
        return result#2;
    }

    public void <init>(weka.core.pmml.FieldMetaInfo$Optype, java.util.ArrayList)
    {
        weka.core.pmml.Expression this;
        weka.core.pmml.FieldMetaInfo$Optype opType;
        java.util.ArrayList fieldDefs;

        this := @this: weka.core.pmml.Expression;

        opType := @parameter0: weka.core.pmml.FieldMetaInfo$Optype;

        fieldDefs := @parameter1: java.util.ArrayList;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<weka.core.pmml.Expression: java.util.ArrayList m_fieldDefs> = null;

        this.<weka.core.pmml.Expression: weka.core.pmml.FieldMetaInfo$Optype m_opType> = opType;

        this.<weka.core.pmml.Expression: java.util.ArrayList m_fieldDefs> = fieldDefs;

        return;
    }

    public int getFieldDefIndex(java.lang.String)
    {
        weka.core.pmml.Expression this;
        java.lang.String attName, $r4;
        int returnV#2, i#4, $i0;
        java.util.ArrayList $r0, $r1;
        java.lang.Object $r2;
        weka.core.Attribute $r3;
        boolean $z0;

        this := @this: weka.core.pmml.Expression;

        attName := @parameter0: java.lang.String;

        returnV#2 = -1;

        i#4 = 0;

     label1:
        $r0 = this.<weka.core.pmml.Expression: java.util.ArrayList m_fieldDefs>;

        $i0 = virtualinvoke $r0.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#4 >= $i0 goto label3;

        $r1 = this.<weka.core.pmml.Expression: java.util.ArrayList m_fieldDefs>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>(i#4);

        $r3 = (weka.core.Attribute) $r2;

        $r4 = virtualinvoke $r3.<weka.core.Attribute: java.lang.String name()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(attName);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        returnV#2 = i#4;

        goto label3;

     label2:
        i#4 = i#4 + 1;

        goto label1;

     label3:
        return returnV#2;
    }

    public weka.core.pmml.FieldMetaInfo$Optype getOptype()
    {
        weka.core.pmml.Expression this;
        weka.core.pmml.FieldMetaInfo$Optype $r0;

        this := @this: weka.core.pmml.Expression;

        $r0 = this.<weka.core.pmml.Expression: weka.core.pmml.FieldMetaInfo$Optype m_opType>;

        return $r0;
    }


