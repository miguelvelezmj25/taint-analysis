    public void <init>(java.lang.Object)
    {
        tool.dconvert.converters.scaling.ThumbnailnatorProgressiveAlgorithm$ProgressiveResizer this;
        java.lang.Object interpolationValue;
        java.util.Map $r0;

        this := @this: tool.dconvert.converters.scaling.ThumbnailnatorProgressiveAlgorithm$ProgressiveResizer;

        interpolationValue := @parameter0: java.lang.Object;

        $r0 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        specialinvoke this.<tool.dconvert.converters.scaling.ThumbnailnatorProgressiveAlgorithm$ProgressiveResizer: void <init>(java.lang.Object,java.util.Map)>(interpolationValue, $r0);

        return;
    }

    public void <init>(java.lang.Object, java.util.Map)
    {
        tool.dconvert.converters.scaling.ThumbnailnatorProgressiveAlgorithm$ProgressiveResizer this;
        java.lang.Object interpolationValue;
        java.util.Map hints;

        this := @this: tool.dconvert.converters.scaling.ThumbnailnatorProgressiveAlgorithm$ProgressiveResizer;

        interpolationValue := @parameter0: java.lang.Object;

        hints := @parameter1: java.util.Map;

        specialinvoke this.<net.coobird.thumbnailator.resizers.AbstractResizer: void <init>(java.lang.Object,java.util.Map)>(interpolationValue, hints);

        specialinvoke this.<tool.dconvert.converters.scaling.ThumbnailnatorProgressiveAlgorithm$ProgressiveResizer: void checkArg(java.lang.Object)>(interpolationValue);

        return;
    }

    private void checkArg(java.lang.Object)
    {
        tool.dconvert.converters.scaling.ThumbnailnatorProgressiveAlgorithm$ProgressiveResizer this;
        java.lang.Object interpolationValue, $r0, $r1, $r2;
        java.lang.IllegalArgumentException $r3;

        this := @this: tool.dconvert.converters.scaling.ThumbnailnatorProgressiveAlgorithm$ProgressiveResizer;

        interpolationValue := @parameter0: java.lang.Object;

        $r0 = <java.awt.RenderingHints: java.lang.Object VALUE_INTERPOLATION_BICUBIC>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(interpolationValue);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if interpolationValue == $r0 goto label1;

        $r1 = <java.awt.RenderingHints: java.lang.Object VALUE_INTERPOLATION_BILINEAR>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(interpolationValue);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if interpolationValue == $r1 goto label1;

        $r2 = <java.awt.RenderingHints: java.lang.Object VALUE_INTERPOLATION_NEAREST_NEIGHBOR>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(interpolationValue);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        if interpolationValue == $r2 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("wrong argument passed muts be one of RenderingHints.VALUE_INTERPOLATION_BICUBIC, RenderingHints.VALUE_INTERPOLATION_BILINEAR or RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR");

        throw $r3;

     label1:
        return;
    }


