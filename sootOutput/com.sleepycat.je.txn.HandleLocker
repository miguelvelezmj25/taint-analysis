    public static com.sleepycat.je.txn.HandleLocker createHandleLocker(com.sleepycat.je.dbi.EnvironmentImpl, com.sleepycat.je.txn.Locker) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.dbi.EnvironmentImpl env;
        com.sleepycat.je.txn.Locker buddy;
        com.sleepycat.je.txn.HandleLocker $r0;

        env := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        buddy := @parameter1: com.sleepycat.je.txn.Locker;

        $r0 = new com.sleepycat.je.txn.HandleLocker;

        specialinvoke $r0.<com.sleepycat.je.txn.HandleLocker: void <init>(com.sleepycat.je.dbi.EnvironmentImpl,com.sleepycat.je.txn.Locker)>(env, buddy);

        return $r0;
    }

    protected void <init>(com.sleepycat.je.dbi.EnvironmentImpl, com.sleepycat.je.txn.Locker)
    {
        com.sleepycat.je.txn.HandleLocker this;
        com.sleepycat.je.dbi.EnvironmentImpl env;
        com.sleepycat.je.txn.Locker buddy, $r2;
        boolean $z0, $z1;
        long $l0;

        this := @this: com.sleepycat.je.txn.HandleLocker;

        env := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        buddy := @parameter1: com.sleepycat.je.txn.Locker;

        specialinvoke this.<com.sleepycat.je.txn.BasicLocker: void <init>(com.sleepycat.je.dbi.EnvironmentImpl)>(env);

        $z0 = virtualinvoke buddy.<com.sleepycat.je.txn.Locker: boolean isTransactional()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $l0 = virtualinvoke buddy.<com.sleepycat.je.txn.Locker: long getId()>();

        goto label2;

     label1:
        $l0 = -1L;

     label2:
        this.<com.sleepycat.je.txn.HandleLocker: long shareWithTxnId> = $l0;

        $z1 = virtualinvoke buddy.<com.sleepycat.je.txn.Locker: boolean isTransactional()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label3;

        $r2 = null;

        goto label4;

     label3:
        $r2 = buddy;

     label4:
        this.<com.sleepycat.je.txn.HandleLocker: com.sleepycat.je.txn.Locker shareWithNonTxnlLocker> = $r2;

        return;
    }

    public boolean sharesLocksWith(com.sleepycat.je.txn.Locker)
    {
        com.sleepycat.je.txn.HandleLocker this;
        com.sleepycat.je.txn.Locker other, $r0, $r1;
        boolean $z0;
        long $l0, $l2, $l3;
        byte $b1, $b4;

        this := @this: com.sleepycat.je.txn.HandleLocker;

        other := @parameter0: com.sleepycat.je.txn.Locker;

        $z0 = specialinvoke this.<com.sleepycat.je.txn.BasicLocker: boolean sharesLocksWith(com.sleepycat.je.txn.Locker)>(other);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $l0 = this.<com.sleepycat.je.txn.HandleLocker: long shareWithTxnId>;

        $b1 = $l0 cmp -1L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 == 0 goto label2;

        $l2 = this.<com.sleepycat.je.txn.HandleLocker: long shareWithTxnId>;

        $l3 = virtualinvoke other.<com.sleepycat.je.txn.Locker: long getId()>();

        $b4 = $l2 cmp $l3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b4);

        if $b4 != 0 goto label2;

        return 1;

     label2:
        $r0 = this.<com.sleepycat.je.txn.HandleLocker: com.sleepycat.je.txn.Locker shareWithNonTxnlLocker>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label3;

        $r1 = this.<com.sleepycat.je.txn.HandleLocker: com.sleepycat.je.txn.Locker shareWithNonTxnlLocker>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(other);

        if $r1 != other goto label3;

        return 1;

     label3:
        return 0;
    }


