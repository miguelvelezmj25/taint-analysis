    static void <clinit>()
    {
        java.lang.Class $r0;

        $r0 = staticinvoke <java.lang.Class: java.lang.Class getPrimitiveClass(java.lang.String)>("double");

        <java.lang.Double: java.lang.Class TYPE> = $r0;

        return;
    }

    public static java.lang.Double valueOf(double)
    {
        double l0;
        java.lang.Double $r0;

        l0 := @parameter0: double;

        $r0 = new java.lang.Double;

        specialinvoke $r0.<java.lang.Double: void <init>(double)>(l0);

        return $r0;
    }

    public void <init>(double)
    {
        java.lang.Double l0;
        double l1;

        l0 := @this: java.lang.Double;

        l1 := @parameter0: double;

        specialinvoke l0.<java.lang.Number: void <init>()>();

        l0.<java.lang.Double: double value> = l1;

        return;
    }

    public volatile int compareTo(java.lang.Object)
    {
        java.lang.Double l0, $r0;
        java.lang.Object l1;
        int $i0;

        l0 := @this: java.lang.Double;

        l1 := @parameter0: java.lang.Object;

        $r0 = (java.lang.Double) l1;

        $i0 = virtualinvoke l0.<java.lang.Double: int compareTo(java.lang.Double)>($r0);

        return $i0;
    }

    public int compareTo(java.lang.Double)
    {
        java.lang.Double l0, l1;
        double $d0, $d1;
        int $i0;

        l0 := @this: java.lang.Double;

        l1 := @parameter0: java.lang.Double;

        $d0 = l0.<java.lang.Double: double value>;

        $d1 = l1.<java.lang.Double: double value>;

        $i0 = staticinvoke <java.lang.Double: int compare(double,double)>($d0, $d1);

        return $i0;
    }

    public static int compare(double, double)
    {
        double l0, l2;
        long l4, l6;
        byte $b0, $b1, $b2, $b3, $b4;

        l0 := @parameter0: double;

        l2 := @parameter1: double;

        $b0 = l0 cmpg l2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 >= 0 goto label1;

        return -1;

     label1:
        $b1 = l0 cmpl l2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 <= 0 goto label2;

        return 1;

     label2:
        l4 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(l0);

        l6 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(l2);

        $b2 = l4 cmp l6;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b2);

        if $b2 != 0 goto label3;

        $b3 = 0;

        goto label5;

     label3:
        $b4 = l4 cmp l6;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b4);

        if $b4 >= 0 goto label4;

        $b3 = -1;

        goto label5;

     label4:
        $b3 = 1;

     label5:
        return $b3;
    }

    public static long doubleToLongBits(double)
    {
        double l0;
        long l2#3, $l0, $l2;
        byte $b1, $b3;

        l0 := @parameter0: double;

        l2#3 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(l0);

        $l0 = l2#3 & 9218868437227405312L;

        $b1 = $l0 cmp 9218868437227405312L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 != 0 goto label1;

        $l2 = l2#3 & 4503599627370495L;

        $b3 = $l2 cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b3);

        if $b3 == 0 goto label1;

        l2#3 = 9221120237041090560L;

     label1:
        return l2#3;
    }


