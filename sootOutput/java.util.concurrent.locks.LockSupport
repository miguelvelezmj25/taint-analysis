    public static void unpark(java.lang.Thread)
    {
        java.lang.Thread l0;
        sun.misc.Unsafe $r0;

        l0 := @parameter0: java.lang.Thread;

        if l0 == null goto label1;

        $r0 = <java.util.concurrent.locks.LockSupport: sun.misc.Unsafe UNSAFE>;

        virtualinvoke $r0.<sun.misc.Unsafe: void unpark(java.lang.Object)>(l0);

     label1:
        return;
    }

    static void <clinit>()
    {
        sun.misc.Unsafe $r0, $r1, $r3, $r5, $r7;
        java.lang.Class l0#3;
        java.lang.reflect.Field $r2, $r4, $r6, $r8;
        long $l0, $l1, $l2, $l3;
        java.lang.Exception $r9, l0#25;
        java.lang.Error $r10;

     label1:
        $r0 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.locks.LockSupport: sun.misc.Unsafe UNSAFE> = $r0;

        l0#3 = class "java/lang/Thread";

        $r1 = <java.util.concurrent.locks.LockSupport: sun.misc.Unsafe UNSAFE>;

        $r2 = virtualinvoke l0#3.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("parkBlocker");

        $l0 = virtualinvoke $r1.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r2);

        <java.util.concurrent.locks.LockSupport: long parkBlockerOffset> = $l0;

        $r3 = <java.util.concurrent.locks.LockSupport: sun.misc.Unsafe UNSAFE>;

        $r4 = virtualinvoke l0#3.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("threadLocalRandomSeed");

        $l1 = virtualinvoke $r3.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r4);

        <java.util.concurrent.locks.LockSupport: long SEED> = $l1;

        $r5 = <java.util.concurrent.locks.LockSupport: sun.misc.Unsafe UNSAFE>;

        $r6 = virtualinvoke l0#3.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("threadLocalRandomProbe");

        $l2 = virtualinvoke $r5.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r6);

        <java.util.concurrent.locks.LockSupport: long PROBE> = $l2;

        $r7 = <java.util.concurrent.locks.LockSupport: sun.misc.Unsafe UNSAFE>;

        $r8 = virtualinvoke l0#3.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("threadLocalRandomSecondarySeed");

        $l3 = virtualinvoke $r7.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r8);

        <java.util.concurrent.locks.LockSupport: long SECONDARY> = $l3;

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        l0#25 = $r9;

        $r10 = new java.lang.Error;

        specialinvoke $r10.<java.lang.Error: void <init>(java.lang.Throwable)>(l0#25);

        throw $r10;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void park(java.lang.Object)
    {
        java.lang.Object l0;
        java.lang.Thread l1;
        sun.misc.Unsafe $r0;

        l0 := @parameter0: java.lang.Object;

        l1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        staticinvoke <java.util.concurrent.locks.LockSupport: void setBlocker(java.lang.Thread,java.lang.Object)>(l1, l0);

        $r0 = <java.util.concurrent.locks.LockSupport: sun.misc.Unsafe UNSAFE>;

        virtualinvoke $r0.<sun.misc.Unsafe: void park(boolean,long)>(0, 0L);

        staticinvoke <java.util.concurrent.locks.LockSupport: void setBlocker(java.lang.Thread,java.lang.Object)>(l1, null);

        return;
    }

    private static void setBlocker(java.lang.Thread, java.lang.Object)
    {
        java.lang.Thread l0;
        java.lang.Object l1;
        sun.misc.Unsafe $r0;
        long $l0;

        l0 := @parameter0: java.lang.Thread;

        l1 := @parameter1: java.lang.Object;

        $r0 = <java.util.concurrent.locks.LockSupport: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.locks.LockSupport: long parkBlockerOffset>;

        virtualinvoke $r0.<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>(l0, $l0, l1);

        return;
    }

    public static void parkNanos(java.lang.Object, long)
    {
        java.lang.Object l0;
        long l1;
        java.lang.Thread l3;
        byte $b0;
        sun.misc.Unsafe $r0;

        l0 := @parameter0: java.lang.Object;

        l1 := @parameter1: long;

        $b0 = l1 cmp 0L;

        if $b0 <= 0 goto label1;

        l3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        staticinvoke <java.util.concurrent.locks.LockSupport: void setBlocker(java.lang.Thread,java.lang.Object)>(l3, l0);

        $r0 = <java.util.concurrent.locks.LockSupport: sun.misc.Unsafe UNSAFE>;

        virtualinvoke $r0.<sun.misc.Unsafe: void park(boolean,long)>(0, l1);

        staticinvoke <java.util.concurrent.locks.LockSupport: void setBlocker(java.lang.Thread,java.lang.Object)>(l3, null);

     label1:
        return;
    }


