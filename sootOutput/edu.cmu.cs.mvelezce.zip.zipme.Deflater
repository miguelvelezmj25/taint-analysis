    public void <init>(int, boolean)
    {
        edu.cmu.cs.mvelezce.zip.zipme.Deflater this;
        boolean nowrap;
        int lvl#1;
        java.lang.IllegalArgumentException $r0;
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending $r1;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Deflater;

        lvl#1 := @parameter0: int;

        nowrap := @parameter1: boolean;

        specialinvoke this.<java.lang.Object: void <init>()>();

        if lvl#1 != -1 goto label1;

        lvl#1 = 6;

        goto label3;

     label1:
        if lvl#1 < 0 goto label2;

        if lvl#1 <= 9 goto label3;

     label2:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;

     label3:
        $r1 = new edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending;

        specialinvoke $r1.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending: void <init>()>();

        this.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending pending> = $r1;

        virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: void hook25()>();

        this.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: boolean noHeader> = nowrap;

        virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: void hook24(int)>(lvl#1);

        virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: void reset()>();

        return;
    }

    protected void hook25()
    {
        edu.cmu.cs.mvelezce.zip.zipme.Deflater this;
        boolean $z0;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Deflater;

        $z0 = <edu.cmu.cs.mvelezce.zip.ZipMain: boolean FEATURECompress>;

        if $z0 == 0 goto label1;

        virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: void hook25__role__Compress()>();

        goto label2;

     label1:
        virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: void hook25__before__Compress()>();

     label2:
        return;
    }

    protected void hook24(int)
    {
        edu.cmu.cs.mvelezce.zip.zipme.Deflater this;
        int lvl;
        boolean $z0;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Deflater;

        lvl := @parameter0: int;

        $z0 = <edu.cmu.cs.mvelezce.zip.ZipMain: boolean FEATURECompress>;

        if $z0 == 0 goto label1;

        virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: void hook24__role__Compress(int)>(lvl);

        goto label2;

     label1:
        virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: void hook24__before__Compress(int)>(lvl);

     label2:
        return;
    }

    public void reset()
    {
        edu.cmu.cs.mvelezce.zip.zipme.Deflater this;
        boolean $z0;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Deflater;

        $z0 = <edu.cmu.cs.mvelezce.zip.ZipMain: boolean FEATURECompress>;

        if $z0 == 0 goto label1;

        virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: void reset__role__Compress()>();

        goto label2;

     label1:
        virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: void reset__before__Compress()>();

     label2:
        return;
    }

    public void reset__role__Compress()
    {
        edu.cmu.cs.mvelezce.zip.zipme.Deflater this;
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterEngine $r0;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Deflater;

        virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: void reset__before__Compress()>();

        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: edu.cmu.cs.mvelezce.zip.zipme.DeflaterEngine engine>;

        virtualinvoke $r0.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterEngine: void reset()>();

        return;
    }

    public void reset__before__Compress()
    {
        edu.cmu.cs.mvelezce.zip.zipme.Deflater this;
        boolean $z0;
        byte $b0;
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending $r1;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Deflater;

        $z0 = this.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: boolean noHeader>;

        if $z0 == 0 goto label1;

        $b0 = 16;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        this.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: int state> = $b0;

        this.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: long totalOut> = 0L;

        $r1 = this.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending pending>;

        virtualinvoke $r1.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending: void reset()>();

        return;
    }

    protected void hook24__role__Compress(int)
    {
        edu.cmu.cs.mvelezce.zip.zipme.Deflater this;
        int lvl;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Deflater;

        lvl := @parameter0: int;

        virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: void setStrategy(int)>(0);

        virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: void setLevel(int)>(lvl);

        virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: void hook24__before__Compress(int)>(lvl);

        return;
    }

    protected void hook24__before__Compress(int)
    {
        edu.cmu.cs.mvelezce.zip.zipme.Deflater this;
        int lvl;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Deflater;

        lvl := @parameter0: int;

        return;
    }

    public void setStrategy(int)
    {
        edu.cmu.cs.mvelezce.zip.zipme.Deflater this;
        int stgy;
        java.lang.IllegalArgumentException $r0;
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterEngine $r1;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Deflater;

        stgy := @parameter0: int;

        if stgy == 0 goto label1;

        if stgy == 1 goto label1;

        if stgy == 2 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;

     label1:
        $r1 = this.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: edu.cmu.cs.mvelezce.zip.zipme.DeflaterEngine engine>;

        virtualinvoke $r1.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterEngine: void setStrategy(int)>(stgy);

        return;
    }

    public void setLevel(int)
    {
        edu.cmu.cs.mvelezce.zip.zipme.Deflater this;
        int lvl#1, $i0;
        java.lang.IllegalArgumentException $r0;
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterEngine $r1;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Deflater;

        lvl#1 := @parameter0: int;

        if lvl#1 != -1 goto label1;

        lvl#1 = 6;

        goto label3;

     label1:
        if lvl#1 < 0 goto label2;

        if lvl#1 <= 9 goto label3;

     label2:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;

     label3:
        $i0 = this.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: int level>;

        if $i0 == lvl#1 goto label4;

        this.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: int level> = lvl#1;

        $r1 = this.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: edu.cmu.cs.mvelezce.zip.zipme.DeflaterEngine engine>;

        virtualinvoke $r1.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterEngine: void setLevel(int)>(lvl#1);

     label4:
        return;
    }

    protected void hook25__role__Compress()
    {
        edu.cmu.cs.mvelezce.zip.zipme.Deflater this;
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterEngine $r0;
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending $r1;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Deflater;

        $r0 = new edu.cmu.cs.mvelezce.zip.zipme.DeflaterEngine;

        $r1 = this.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending pending>;

        specialinvoke $r0.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterEngine: void <init>(edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending)>($r1);

        this.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: edu.cmu.cs.mvelezce.zip.zipme.DeflaterEngine engine> = $r0;

        virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: void hook25__before__Compress()>();

        return;
    }

    protected void hook25__before__Compress()
    {
        edu.cmu.cs.mvelezce.zip.zipme.Deflater this;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Deflater;

        return;
    }

    public int getTotalIn()
    {
        edu.cmu.cs.mvelezce.zip.zipme.Deflater this;
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterEngine $r0;
        long $l0;
        int $i1;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Deflater;

        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: edu.cmu.cs.mvelezce.zip.zipme.DeflaterEngine engine>;

        $l0 = virtualinvoke $r0.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterEngine: long getTotalIn()>();

        $i1 = (int) $l0;

        return $i1;
    }

    public boolean needsInput()
    {
        edu.cmu.cs.mvelezce.zip.zipme.Deflater this;
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterEngine $r0;
        boolean $z0;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Deflater;

        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: edu.cmu.cs.mvelezce.zip.zipme.DeflaterEngine engine>;

        $z0 = virtualinvoke $r0.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterEngine: boolean needsInput()>();

        return $z0;
    }

    public int deflate(byte[], int, int)
    {
        edu.cmu.cs.mvelezce.zip.zipme.Deflater this;
        byte[] output;
        int offset, length, $i0;
        edu.cmu.cs.mvelezce.zip.zipme.Deflater_deflate2 $r0;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Deflater;

        output := @parameter0: byte[];

        offset := @parameter1: int;

        length := @parameter2: int;

        $r0 = new edu.cmu.cs.mvelezce.zip.zipme.Deflater_deflate2;

        specialinvoke $r0.<edu.cmu.cs.mvelezce.zip.zipme.Deflater_deflate2: void <init>(edu.cmu.cs.mvelezce.zip.zipme.Deflater,byte[],int,int)>(this, output, offset, length);

        $i0 = virtualinvoke $r0.<edu.cmu.cs.mvelezce.zip.zipme.Deflater_deflate2: int execute()>();

        return $i0;
    }

    public void setInput(byte[], int, int)
    {
        edu.cmu.cs.mvelezce.zip.zipme.Deflater this;
        byte[] input;
        int off, len, $i0, $i1;
        java.lang.IllegalStateException $r0;
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterEngine $r1;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Deflater;

        input := @parameter0: byte[];

        off := @parameter1: int;

        len := @parameter2: int;

        $i0 = this.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: int state>;

        $i1 = $i0 & 8;

        if $i1 == 0 goto label1;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("finish()/end() already called");

        throw $r0;

     label1:
        $r1 = this.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: edu.cmu.cs.mvelezce.zip.zipme.DeflaterEngine engine>;

        virtualinvoke $r1.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterEngine: void setInput(byte[],int,int)>(input, off, len);

        return;
    }

    public boolean finished()
    {
        edu.cmu.cs.mvelezce.zip.zipme.Deflater this;
        int $i0;
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending $r0;
        boolean $z0, $z1;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Deflater;

        $i0 = this.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: int state>;

        if $i0 != 30 goto label1;

        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending pending>;

        $z0 = virtualinvoke $r0.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending: boolean isFlushed()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void finish()
    {
        edu.cmu.cs.mvelezce.zip.zipme.Deflater this;
        int $i0, $i1;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Deflater;

        $i0 = this.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: int state>;

        $i1 = $i0 | 12;

        this.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: int state> = $i1;

        return;
    }

    public int getTotalOut()
    {
        edu.cmu.cs.mvelezce.zip.zipme.Deflater this;
        long $l0;
        int $i1;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Deflater;

        $l0 = this.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: long totalOut>;

        $i1 = (int) $l0;

        return $i1;
    }


