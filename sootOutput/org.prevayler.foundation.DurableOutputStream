    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "org/prevayler/foundation/DurableOutputStream";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.prevayler.foundation.DurableOutputStream: boolean $assertionsDisabled> = $z1;

        return;
    }

    public void <init>(java.io.File, boolean, long) throws java.io.IOException
    {
        org.prevayler.foundation.DurableOutputStream this;
        java.io.File file;
        boolean journalDiskSync;
        long journalSizeThreshold, $l2, $l3;
        java.lang.Object $r0, $r1;
        java.io.ByteArrayOutputStream $r2, $r3;
        java.io.FileOutputStream $r4, $r5;
        java.nio.channels.FileChannel $r6;
        byte $b0;
        int $i1;

        this := @this: org.prevayler.foundation.DurableOutputStream;

        file := @parameter0: java.io.File;

        journalDiskSync := @parameter1: boolean;

        journalSizeThreshold := @parameter2: long;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        this.<org.prevayler.foundation.DurableOutputStream: java.lang.Object _writeLock> = $r0;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        this.<org.prevayler.foundation.DurableOutputStream: java.lang.Object _syncLock> = $r1;

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>();

        this.<org.prevayler.foundation.DurableOutputStream: java.io.ByteArrayOutputStream _active> = $r2;

        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

        this.<org.prevayler.foundation.DurableOutputStream: java.io.ByteArrayOutputStream _inactive> = $r3;

        this.<org.prevayler.foundation.DurableOutputStream: boolean _closed> = 0;

        this.<org.prevayler.foundation.DurableOutputStream: int _objectsWritten> = 0;

        this.<org.prevayler.foundation.DurableOutputStream: int _objectsSynced> = 0;

        this.<org.prevayler.foundation.DurableOutputStream: int _fileSyncCount> = 0;

        this.<org.prevayler.foundation.DurableOutputStream: java.io.File _file> = file;

        $r4 = new java.io.FileOutputStream;

        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.io.File)>(file);

        this.<org.prevayler.foundation.DurableOutputStream: java.io.FileOutputStream _fileOutputStream> = $r4;

        $r5 = this.<org.prevayler.foundation.DurableOutputStream: java.io.FileOutputStream _fileOutputStream>;

        $r6 = virtualinvoke $r5.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>();

        this.<org.prevayler.foundation.DurableOutputStream: java.nio.channels.FileChannel _fileChannel> = $r6;

        $b0 = journalSizeThreshold cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 != 0 goto label1;

        $i1 = 1048576;

        goto label2;

     label1:
        $l2 = journalSizeThreshold - 1L;

        $l3 = staticinvoke <java.lang.Math: long min(long,long)>($l2, 1048576L);

        $i1 = (int) $l3;

     label2:
        this.<org.prevayler.foundation.DurableOutputStream: int _preallocateLength> = $i1;

        this.<org.prevayler.foundation.DurableOutputStream: boolean _journalDiskSync> = journalDiskSync;

        return;
    }

    public java.io.File file()
    {
        org.prevayler.foundation.DurableOutputStream this;
        java.io.File $r0;

        this := @this: org.prevayler.foundation.DurableOutputStream;

        $r0 = this.<org.prevayler.foundation.DurableOutputStream: java.io.File _file>;

        return $r0;
    }

    public void sync(org.prevayler.foundation.Guided) throws java.io.IOException
    {
        org.prevayler.foundation.DurableOutputStream this;
        org.prevayler.foundation.Guided guide;
        int thisWrite;
        java.lang.Throwable l3, $r0;

        this := @this: org.prevayler.foundation.DurableOutputStream;

        guide := @parameter0: org.prevayler.foundation.Guided;

        virtualinvoke guide.<org.prevayler.foundation.Guided: void startTurn()>();

     label1:
        thisWrite = specialinvoke this.<org.prevayler.foundation.DurableOutputStream: int writeObject(org.prevayler.foundation.Guided)>(guide);

     label2:
        virtualinvoke guide.<org.prevayler.foundation.Guided: void endTurn()>();

        goto label4;

     label3:
        $r0 := @caughtexception;

        l3 = $r0;

        virtualinvoke guide.<org.prevayler.foundation.Guided: void endTurn()>();

        throw l3;

     label4:
        specialinvoke this.<org.prevayler.foundation.DurableOutputStream: void waitUntilSynced(int)>(thisWrite);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private int writeObject(org.prevayler.foundation.Guided) throws java.io.IOException
    {
        org.prevayler.foundation.DurableOutputStream this;
        org.prevayler.foundation.Guided guide;
        java.lang.Object l2, $r0;
        java.io.IOException exception, $r1, $r3;
        java.lang.Throwable l4, $r5;
        boolean $z0;
        java.io.ByteArrayOutputStream $r2;
        int $i0, $i1, $i2;

        this := @this: org.prevayler.foundation.DurableOutputStream;

        guide := @parameter0: org.prevayler.foundation.Guided;

        $r0 = this.<org.prevayler.foundation.DurableOutputStream: java.lang.Object _writeLock>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        $z0 = this.<org.prevayler.foundation.DurableOutputStream: boolean _closed>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("already closed");

        throw $r1;

     label2:
        $r2 = this.<org.prevayler.foundation.DurableOutputStream: java.io.ByteArrayOutputStream _active>;

        virtualinvoke guide.<org.prevayler.foundation.Guided: void writeTo(java.io.OutputStream)>($r2);

     label3:
        goto label5;

     label4:
        $r3 := @caughtexception;

        exception = $r3;

        specialinvoke this.<org.prevayler.foundation.DurableOutputStream: void internalClose()>();

        throw exception;

     label5:
        $i0 = this.<org.prevayler.foundation.DurableOutputStream: int _objectsWritten>;

        $i1 = $i0 + 1;

        this.<org.prevayler.foundation.DurableOutputStream: int _objectsWritten> = $i1;

        $i2 = this.<org.prevayler.foundation.DurableOutputStream: int _objectsWritten>;

        exitmonitor l2;

     label6:
        return $i2;

     label7:
        $r5 := @caughtexception;

     label8:
        l4 = $r5;

        exitmonitor l2;

     label9:
        throw l4;

        catch java.io.IOException from label2 to label3 with label4;
        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void waitUntilSynced(int) throws java.io.IOException
    {
        org.prevayler.foundation.DurableOutputStream this;
        int thisWrite, objectsWritten, $i0, $i1, $i2;
        java.lang.Object l2, l4, $r0, $r1;
        java.io.ByteArrayOutputStream swap, $r3, $r5, $r7;
        java.lang.Throwable l6, l7, $r4, $r12;
        java.io.IOException exception, $r2, $r10;
        boolean $z0, $z1;
        java.io.FileOutputStream $r6, $r8;
        java.nio.channels.FileChannel $r9;

        this := @this: org.prevayler.foundation.DurableOutputStream;

        thisWrite := @parameter0: int;

        $r0 = this.<org.prevayler.foundation.DurableOutputStream: java.lang.Object _syncLock>;

        l2 = $r0;

        entermonitor $r0;

     label01:
        $i0 = this.<org.prevayler.foundation.DurableOutputStream: int _objectsSynced>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(thisWrite);

        if $i0 >= thisWrite goto label12;

        $r1 = this.<org.prevayler.foundation.DurableOutputStream: java.lang.Object _writeLock>;

        l4 = $r1;

        entermonitor $r1;

     label02:
        $z0 = this.<org.prevayler.foundation.DurableOutputStream: boolean _closed>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label03;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("already closed");

        throw $r2;

     label03:
        swap = this.<org.prevayler.foundation.DurableOutputStream: java.io.ByteArrayOutputStream _active>;

        $r3 = this.<org.prevayler.foundation.DurableOutputStream: java.io.ByteArrayOutputStream _inactive>;

        this.<org.prevayler.foundation.DurableOutputStream: java.io.ByteArrayOutputStream _active> = $r3;

        this.<org.prevayler.foundation.DurableOutputStream: java.io.ByteArrayOutputStream _inactive> = swap;

        objectsWritten = this.<org.prevayler.foundation.DurableOutputStream: int _objectsWritten>;

        exitmonitor l4;

     label04:
        goto label08;

     label05:
        $r4 := @caughtexception;

     label06:
        l6 = $r4;

        exitmonitor l4;

     label07:
        throw l6;

     label08:
        specialinvoke this.<org.prevayler.foundation.DurableOutputStream: void preallocate()>();

        $r5 = this.<org.prevayler.foundation.DurableOutputStream: java.io.ByteArrayOutputStream _inactive>;

        $r6 = this.<org.prevayler.foundation.DurableOutputStream: java.io.FileOutputStream _fileOutputStream>;

        virtualinvoke $r5.<java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>($r6);

        $r7 = this.<org.prevayler.foundation.DurableOutputStream: java.io.ByteArrayOutputStream _inactive>;

        virtualinvoke $r7.<java.io.ByteArrayOutputStream: void reset()>();

        $r8 = this.<org.prevayler.foundation.DurableOutputStream: java.io.FileOutputStream _fileOutputStream>;

        virtualinvoke $r8.<java.io.FileOutputStream: void flush()>();

        $z1 = this.<org.prevayler.foundation.DurableOutputStream: boolean _journalDiskSync>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label09;

        $r9 = this.<org.prevayler.foundation.DurableOutputStream: java.nio.channels.FileChannel _fileChannel>;

        virtualinvoke $r9.<java.nio.channels.FileChannel: void force(boolean)>(0);

     label09:
        goto label11;

     label10:
        $r10 := @caughtexception;

        exception = $r10;

        specialinvoke this.<org.prevayler.foundation.DurableOutputStream: void internalClose()>();

        throw exception;

     label11:
        this.<org.prevayler.foundation.DurableOutputStream: int _objectsSynced> = objectsWritten;

        $i1 = this.<org.prevayler.foundation.DurableOutputStream: int _fileSyncCount>;

        $i2 = $i1 + 1;

        this.<org.prevayler.foundation.DurableOutputStream: int _fileSyncCount> = $i2;

     label12:
        exitmonitor l2;

     label13:
        goto label17;

     label14:
        $r12 := @caughtexception;

     label15:
        l7 = $r12;

        exitmonitor l2;

     label16:
        throw l7;

     label17:
        return;

        catch java.lang.Throwable from label02 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.lang.Throwable from label01 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    private void preallocate() throws java.io.IOException
    {
        org.prevayler.foundation.DurableOutputStream this;
        long position, size, $l0, $l1, need#21, $l6;
        int bufSize, written, $i4, $i5;
        java.nio.ByteBuffer buf;
        boolean $z0, $z1;
        java.nio.channels.FileChannel $r0, $r2, $r3, $r5, $r7;
        java.lang.AssertionError $r1, $r6;
        java.io.ByteArrayOutputStream $r4;
        byte $b2, $b3;

        this := @this: org.prevayler.foundation.DurableOutputStream;

        $z0 = <org.prevayler.foundation.DurableOutputStream: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r0 = this.<org.prevayler.foundation.DurableOutputStream: java.nio.channels.FileChannel _fileChannel>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>("_fileChannel is null");

        throw $r1;

     label1:
        $r2 = this.<org.prevayler.foundation.DurableOutputStream: java.nio.channels.FileChannel _fileChannel>;

        position = virtualinvoke $r2.<java.nio.channels.FileChannel: long position()>();

        $r3 = this.<org.prevayler.foundation.DurableOutputStream: java.nio.channels.FileChannel _fileChannel>;

        size = virtualinvoke $r3.<java.nio.channels.FileChannel: long size()>();

        $r4 = this.<org.prevayler.foundation.DurableOutputStream: java.io.ByteArrayOutputStream _inactive>;

        bufSize = virtualinvoke $r4.<java.io.ByteArrayOutputStream: int size()>();

        $l0 = (long) bufSize;

        $l1 = size - position;

        need#21 = $l0 - $l1;

        $b2 = need#21 cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b2);

        if $b2 > 0 goto label2;

        return;

     label2:
        $b3 = need#21 cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b3);

        if $b3 <= 0 goto label4;

        $i4 = this.<org.prevayler.foundation.DurableOutputStream: int _preallocateLength>;

        buf = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i4);

        $r5 = this.<org.prevayler.foundation.DurableOutputStream: java.nio.channels.FileChannel _fileChannel>;

        written = virtualinvoke $r5.<java.nio.channels.FileChannel: int write(java.nio.ByteBuffer,long)>(buf, size);

        $z1 = <org.prevayler.foundation.DurableOutputStream: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label3;

        $i5 = this.<org.prevayler.foundation.DurableOutputStream: int _preallocateLength>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(written);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if written == $i5 goto label3;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>("incomplete write");

        throw $r6;

     label3:
        $l6 = (long) written;

        need#21 = need#21 - $l6;

        goto label2;

     label4:
        $r7 = this.<org.prevayler.foundation.DurableOutputStream: java.nio.channels.FileChannel _fileChannel>;

        virtualinvoke $r7.<java.nio.channels.FileChannel: void force(boolean)>(1);

        return;
    }

    private void internalClose()
    {
        org.prevayler.foundation.DurableOutputStream this;
        java.lang.Object l1, $r0;
        java.lang.Throwable l2, $r1;

        this := @this: org.prevayler.foundation.DurableOutputStream;

        $r0 = this.<org.prevayler.foundation.DurableOutputStream: java.lang.Object _writeLock>;

        l1 = $r0;

        entermonitor $r0;

     label1:
        this.<org.prevayler.foundation.DurableOutputStream: boolean _closed> = 1;

        this.<org.prevayler.foundation.DurableOutputStream: java.io.ByteArrayOutputStream _active> = null;

        this.<org.prevayler.foundation.DurableOutputStream: java.io.ByteArrayOutputStream _inactive> = null;

        exitmonitor l1;

     label2:
        goto label6;

     label3:
        $r1 := @caughtexception;

     label4:
        l2 = $r1;

        exitmonitor l1;

     label5:
        throw l2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void close() throws java.io.IOException
    {
        org.prevayler.foundation.DurableOutputStream this;
        java.lang.Object l1, l2, $r0, $r1;
        java.lang.Throwable l3, l4, $r8, $r9;
        boolean $z0, $z1;
        java.nio.channels.FileChannel $r2, $r3, $r4, $r5;
        long $l0;
        java.io.FileOutputStream $r7;

        this := @this: org.prevayler.foundation.DurableOutputStream;

        $r0 = this.<org.prevayler.foundation.DurableOutputStream: java.lang.Object _syncLock>;

        l1 = $r0;

        entermonitor $r0;

     label01:
        $r1 = this.<org.prevayler.foundation.DurableOutputStream: java.lang.Object _writeLock>;

        l2 = $r1;

        entermonitor $r1;

     label02:
        $z0 = this.<org.prevayler.foundation.DurableOutputStream: boolean _closed>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label05;

        exitmonitor l2;

     label03:
        exitmonitor l1;

     label04:
        return;

     label05:
        specialinvoke this.<org.prevayler.foundation.DurableOutputStream: void internalClose()>();

        $r2 = this.<org.prevayler.foundation.DurableOutputStream: java.nio.channels.FileChannel _fileChannel>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        if $r2 == null goto label06;

        $r3 = this.<org.prevayler.foundation.DurableOutputStream: java.nio.channels.FileChannel _fileChannel>;

        $z1 = virtualinvoke $r3.<java.nio.channels.FileChannel: boolean isOpen()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label06;

        $r4 = this.<org.prevayler.foundation.DurableOutputStream: java.nio.channels.FileChannel _fileChannel>;

        $r5 = this.<org.prevayler.foundation.DurableOutputStream: java.nio.channels.FileChannel _fileChannel>;

        $l0 = virtualinvoke $r5.<java.nio.channels.FileChannel: long position()>();

        virtualinvoke $r4.<java.nio.channels.FileChannel: java.nio.channels.FileChannel truncate(long)>($l0);

     label06:
        $r7 = this.<org.prevayler.foundation.DurableOutputStream: java.io.FileOutputStream _fileOutputStream>;

        virtualinvoke $r7.<java.io.FileOutputStream: void close()>();

        exitmonitor l2;

     label07:
        goto label11;

     label08:
        $r8 := @caughtexception;

     label09:
        l3 = $r8;

        exitmonitor l2;

     label10:
        throw l3;

     label11:
        exitmonitor l1;

     label12:
        goto label16;

     label13:
        $r9 := @caughtexception;

     label14:
        l4 = $r9;

        exitmonitor l1;

     label15:
        throw l4;

     label16:
        return;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label05 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label01 to label04 with label13;
        catch java.lang.Throwable from label05 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }


