    public void <init>(int, int, int, int, int)
    {
        kanzi.util.sampling.DecimateDownSampler this;
        int width, height, stride, offset, factor;
        java.lang.IllegalArgumentException $r0, $r1, $r2, $r3, $r4;

        this := @this: kanzi.util.sampling.DecimateDownSampler;

        width := @parameter0: int;

        height := @parameter1: int;

        stride := @parameter2: int;

        offset := @parameter3: int;

        factor := @parameter4: int;

        specialinvoke this.<java.lang.Object: void <init>()>();

        if height >= 8 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The height must be at least 8");

        throw $r0;

     label1:
        if width >= 8 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The width must be at least 8");

        throw $r1;

     label2:
        if offset >= 0 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The offset must be at least 0");

        throw $r2;

     label3:
        if stride >= width goto label4;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The stride must be at least as big as the width");

        throw $r3;

     label4:
        if factor >= 2 goto label5;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("This implementation only supports a scaling factor greater than or equal to 2");

        throw $r4;

     label5:
        this.<kanzi.util.sampling.DecimateDownSampler: int height> = height;

        this.<kanzi.util.sampling.DecimateDownSampler: int width> = width;

        this.<kanzi.util.sampling.DecimateDownSampler: int stride> = stride;

        this.<kanzi.util.sampling.DecimateDownSampler: int offset> = offset;

        this.<kanzi.util.sampling.DecimateDownSampler: int factor> = factor;

        return;
    }

    public void subSample(int[], int[])
    {
        kanzi.util.sampling.DecimateDownSampler this;
        int[] input, output;
        int w, inc, stn, end, $i0, iOffs#11, oOffs#13, j#16, i#22, $i1, $i2;

        this := @this: kanzi.util.sampling.DecimateDownSampler;

        input := @parameter0: int[];

        output := @parameter1: int[];

        w = this.<kanzi.util.sampling.DecimateDownSampler: int width>;

        inc = this.<kanzi.util.sampling.DecimateDownSampler: int factor>;

        $i0 = this.<kanzi.util.sampling.DecimateDownSampler: int stride>;

        stn = $i0 * inc;

        iOffs#11 = this.<kanzi.util.sampling.DecimateDownSampler: int offset>;

        oOffs#13 = 0;

        j#16 = this.<kanzi.util.sampling.DecimateDownSampler: int height>;

     label1:
        if j#16 <= 0 goto label4;

        end = iOffs#11 + w;

        i#22 = iOffs#11;

     label2:
        if i#22 >= end goto label3;

        $i1 = oOffs#13;

        oOffs#13 = oOffs#13 + 1;

        $i2 = input[i#22];

        output[$i1] = $i2;

        i#22 = i#22 + inc;

        goto label2;

     label3:
        iOffs#11 = iOffs#11 + stn;

        j#16 = j#16 - inc;

        goto label1;

     label4:
        return;
    }

    public boolean supportsScalingFactor(int)
    {
        kanzi.util.sampling.DecimateDownSampler this;
        int factor;
        boolean $z0;

        this := @this: kanzi.util.sampling.DecimateDownSampler;

        factor := @parameter0: int;

        if factor < 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void subSampleHorizontal(int[], int[])
    {
        kanzi.util.sampling.DecimateDownSampler this;
        int[] input, output;
        int w, inc, st, end, iOffs#9, oOffs#11, j#14, i#20, $i0, $i1;

        this := @this: kanzi.util.sampling.DecimateDownSampler;

        input := @parameter0: int[];

        output := @parameter1: int[];

        w = this.<kanzi.util.sampling.DecimateDownSampler: int width>;

        inc = this.<kanzi.util.sampling.DecimateDownSampler: int factor>;

        st = this.<kanzi.util.sampling.DecimateDownSampler: int stride>;

        iOffs#9 = this.<kanzi.util.sampling.DecimateDownSampler: int offset>;

        oOffs#11 = 0;

        j#14 = this.<kanzi.util.sampling.DecimateDownSampler: int height>;

     label1:
        if j#14 <= 0 goto label4;

        end = iOffs#9 + w;

        i#20 = iOffs#9;

     label2:
        if i#20 >= end goto label3;

        $i0 = oOffs#11;

        oOffs#11 = oOffs#11 + 1;

        $i1 = input[i#20];

        output[$i0] = $i1;

        i#20 = i#20 + inc;

        goto label2;

     label3:
        iOffs#9 = iOffs#9 + st;

        j#14 = j#14 + -1;

        goto label1;

     label4:
        return;
    }


