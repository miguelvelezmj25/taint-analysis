    static java.lang.ThreadLocal$ThreadLocalMap createInheritedMap(java.lang.ThreadLocal$ThreadLocalMap)
    {
        java.lang.ThreadLocal$ThreadLocalMap l0, $r0;

        l0 := @parameter0: java.lang.ThreadLocal$ThreadLocalMap;

        $r0 = new java.lang.ThreadLocal$ThreadLocalMap;

        specialinvoke $r0.<java.lang.ThreadLocal$ThreadLocalMap: void <init>(java.lang.ThreadLocal$ThreadLocalMap,java.lang.ThreadLocal$1)>(l0, null);

        return $r0;
    }

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicInteger $r0;

        $r0 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        <java.lang.ThreadLocal: java.util.concurrent.atomic.AtomicInteger nextHashCode> = $r0;

        return;
    }

    public void <init>()
    {
        java.lang.ThreadLocal l0;
        int $i0;

        l0 := @this: java.lang.ThreadLocal;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        $i0 = staticinvoke <java.lang.ThreadLocal: int nextHashCode()>();

        l0.<java.lang.ThreadLocal: int threadLocalHashCode> = $i0;

        return;
    }

    private static int nextHashCode()
    {
        java.util.concurrent.atomic.AtomicInteger $r0;
        int $i0;

        $r0 = <java.lang.ThreadLocal: java.util.concurrent.atomic.AtomicInteger nextHashCode>;

        $i0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int getAndAdd(int)>(1640531527);

        return $i0;
    }

    static int access$400(java.lang.ThreadLocal)
    {
        java.lang.ThreadLocal l0;
        int $i0;

        l0 := @parameter0: java.lang.ThreadLocal;

        $i0 = l0.<java.lang.ThreadLocal: int threadLocalHashCode>;

        return $i0;
    }

    public void set(java.lang.Object)
    {
        java.lang.ThreadLocal l0;
        java.lang.Object l1;
        java.lang.Thread l2;
        java.lang.ThreadLocal$ThreadLocalMap l3;

        l0 := @this: java.lang.ThreadLocal;

        l1 := @parameter0: java.lang.Object;

        l2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        l3 = virtualinvoke l0.<java.lang.ThreadLocal: java.lang.ThreadLocal$ThreadLocalMap getMap(java.lang.Thread)>(l2);

        if l3 == null goto label1;

        staticinvoke <java.lang.ThreadLocal$ThreadLocalMap: void access$100(java.lang.ThreadLocal$ThreadLocalMap,java.lang.ThreadLocal,java.lang.Object)>(l3, l0, l1);

        goto label2;

     label1:
        virtualinvoke l0.<java.lang.ThreadLocal: void createMap(java.lang.Thread,java.lang.Object)>(l2, l1);

     label2:
        return;
    }

    java.lang.ThreadLocal$ThreadLocalMap getMap(java.lang.Thread)
    {
        java.lang.ThreadLocal l0;
        java.lang.Thread l1;
        java.lang.ThreadLocal$ThreadLocalMap $r0;

        l0 := @this: java.lang.ThreadLocal;

        l1 := @parameter0: java.lang.Thread;

        $r0 = l1.<java.lang.Thread: java.lang.ThreadLocal$ThreadLocalMap threadLocals>;

        return $r0;
    }

    void createMap(java.lang.Thread, java.lang.Object)
    {
        java.lang.ThreadLocal l0;
        java.lang.Thread l1;
        java.lang.Object l2;
        java.lang.ThreadLocal$ThreadLocalMap $r0;

        l0 := @this: java.lang.ThreadLocal;

        l1 := @parameter0: java.lang.Thread;

        l2 := @parameter1: java.lang.Object;

        $r0 = new java.lang.ThreadLocal$ThreadLocalMap;

        specialinvoke $r0.<java.lang.ThreadLocal$ThreadLocalMap: void <init>(java.lang.ThreadLocal,java.lang.Object)>(l0, l2);

        l1.<java.lang.Thread: java.lang.ThreadLocal$ThreadLocalMap threadLocals> = $r0;

        return;
    }

    public java.lang.Object get()
    {
        java.lang.ThreadLocal l0;
        java.lang.Thread l1;
        java.lang.ThreadLocal$ThreadLocalMap l2;
        java.lang.ThreadLocal$ThreadLocalMap$Entry l3;
        java.lang.Object l4, $r0;

        l0 := @this: java.lang.ThreadLocal;

        l1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        l2 = virtualinvoke l0.<java.lang.ThreadLocal: java.lang.ThreadLocal$ThreadLocalMap getMap(java.lang.Thread)>(l1);

        if l2 == null goto label1;

        l3 = staticinvoke <java.lang.ThreadLocal$ThreadLocalMap: java.lang.ThreadLocal$ThreadLocalMap$Entry access$000(java.lang.ThreadLocal$ThreadLocalMap,java.lang.ThreadLocal)>(l2, l0);

        if l3 == null goto label1;

        l4 = l3.<java.lang.ThreadLocal$ThreadLocalMap$Entry: java.lang.Object value>;

        return l4;

     label1:
        $r0 = specialinvoke l0.<java.lang.ThreadLocal: java.lang.Object setInitialValue()>();

        return $r0;
    }

    private java.lang.Object setInitialValue()
    {
        java.lang.ThreadLocal l0;
        java.lang.Object l1;
        java.lang.Thread l2;
        java.lang.ThreadLocal$ThreadLocalMap l3;

        l0 := @this: java.lang.ThreadLocal;

        l1 = virtualinvoke l0.<java.lang.ThreadLocal: java.lang.Object initialValue()>();

        l2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        l3 = virtualinvoke l0.<java.lang.ThreadLocal: java.lang.ThreadLocal$ThreadLocalMap getMap(java.lang.Thread)>(l2);

        if l3 == null goto label1;

        staticinvoke <java.lang.ThreadLocal$ThreadLocalMap: void access$100(java.lang.ThreadLocal$ThreadLocalMap,java.lang.ThreadLocal,java.lang.Object)>(l3, l0, l1);

        goto label2;

     label1:
        virtualinvoke l0.<java.lang.ThreadLocal: void createMap(java.lang.Thread,java.lang.Object)>(l2, l1);

     label2:
        return l1;
    }

    protected java.lang.Object initialValue()
    {
        java.lang.ThreadLocal l0;

        l0 := @this: java.lang.ThreadLocal;

        return null;
    }


