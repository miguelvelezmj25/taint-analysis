    public boolean apply(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.filter.MSSSaliencyFilter this;
        kanzi.SliceIntArray input, output, saL1, saA1, saB1, saL2, saA2, saB2, sa, $r8, $r10, $r12, $r14, $r16, $r18, $r20;
        int count, h, w, st, yoff, y1, y2, xoff, x1, x2, area, offset1, offset2, valL, valA, valB, idx, val1, val2, val3, val, range, scale, val, $i0, $i1, $i2, srcIdx#42, dstIdx#45, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i#153, $i10, $i11, $i12, $i13, $i14, minVal#199, maxVal#201, srcIdx#203, y#205, $i15, $i16, $i17, x#224, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, dstIdx#342, $i37, $i38, y#354, x#358, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49;
        int[] src, dst, $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r24, $r25, $r27, $r28, $r30, $r31, $r33, $r34, $r35, $r36, $r37, $r39, $r40, $r41, $r42, $r43, $r44;
        kanzi.util.color.YCbCrColorModelConverter cvt, $r22;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        kanzi.ColorModelType $r26;
        kanzi.IntFilter $r29, $r32, $r38;

        this := @this: kanzi.filter.MSSSaliencyFilter;

        input := @parameter0: kanzi.SliceIntArray;

        output := @parameter1: kanzi.SliceIntArray;

        $z0 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(input);

        if $z0 == 0 goto label01;

        $z1 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(output);

        if $z1 != 0 goto label02;

     label01:
        return 0;

     label02:
        $i0 = this.<kanzi.filter.MSSSaliencyFilter: int stride>;

        $i1 = this.<kanzi.filter.MSSSaliencyFilter: int height>;

        count = $i0 * $i1;

        $r0 = this.<kanzi.filter.MSSSaliencyFilter: int[] buf>;

        $i2 = lengthof $r0;

        if $i2 >= count goto label03;

        $r1 = newarray (int)[count];

        this.<kanzi.filter.MSSSaliencyFilter: int[] buf> = $r1;

        $r2 = newarray (int)[count];

        this.<kanzi.filter.MSSSaliencyFilter: int[] chanL1> = $r2;

        $r3 = newarray (int)[count];

        this.<kanzi.filter.MSSSaliencyFilter: int[] chanA1> = $r3;

        $r4 = newarray (int)[count];

        this.<kanzi.filter.MSSSaliencyFilter: int[] chanB1> = $r4;

        $r5 = newarray (int)[count];

        this.<kanzi.filter.MSSSaliencyFilter: int[] chanL2> = $r5;

        $r6 = newarray (int)[count];

        this.<kanzi.filter.MSSSaliencyFilter: int[] chanA2> = $r6;

        $r7 = newarray (int)[count];

        this.<kanzi.filter.MSSSaliencyFilter: int[] chanB2> = $r7;

     label03:
        src = input.<kanzi.SliceIntArray: int[] array>;

        dst = output.<kanzi.SliceIntArray: int[] array>;

        srcIdx#42 = input.<kanzi.SliceIntArray: int index>;

        dstIdx#45 = output.<kanzi.SliceIntArray: int index>;

        h = this.<kanzi.filter.MSSSaliencyFilter: int height>;

        w = this.<kanzi.filter.MSSSaliencyFilter: int width>;

        $r8 = new kanzi.SliceIntArray;

        $r9 = this.<kanzi.filter.MSSSaliencyFilter: int[] chanL1>;

        specialinvoke $r8.<kanzi.SliceIntArray: void <init>(int[],int)>($r9, 0);

        saL1 = $r8;

        $r10 = new kanzi.SliceIntArray;

        $r11 = this.<kanzi.filter.MSSSaliencyFilter: int[] chanA1>;

        specialinvoke $r10.<kanzi.SliceIntArray: void <init>(int[],int)>($r11, 0);

        saA1 = $r10;

        $r12 = new kanzi.SliceIntArray;

        $r13 = this.<kanzi.filter.MSSSaliencyFilter: int[] chanB1>;

        specialinvoke $r12.<kanzi.SliceIntArray: void <init>(int[],int)>($r13, 0);

        saB1 = $r12;

        $r14 = new kanzi.SliceIntArray;

        $r15 = this.<kanzi.filter.MSSSaliencyFilter: int[] chanL2>;

        specialinvoke $r14.<kanzi.SliceIntArray: void <init>(int[],int)>($r15, 0);

        saL2 = $r14;

        $r16 = new kanzi.SliceIntArray;

        $r17 = this.<kanzi.filter.MSSSaliencyFilter: int[] chanA2>;

        specialinvoke $r16.<kanzi.SliceIntArray: void <init>(int[],int)>($r17, 0);

        saA2 = $r16;

        $r18 = new kanzi.SliceIntArray;

        $r19 = this.<kanzi.filter.MSSSaliencyFilter: int[] chanB2>;

        specialinvoke $r18.<kanzi.SliceIntArray: void <init>(int[],int)>($r19, 0);

        saB2 = $r18;

        $r20 = new kanzi.SliceIntArray;

        $r21 = this.<kanzi.filter.MSSSaliencyFilter: int[] buf>;

        specialinvoke $r20.<kanzi.SliceIntArray: void <init>(int[],int)>($r21, 0);

        sa = $r20;

        $z2 = this.<kanzi.filter.MSSSaliencyFilter: boolean doColorTransform>;

        if $z2 != 1 goto label09;

        $r22 = new kanzi.util.color.YCbCrColorModelConverter;

        $i3 = this.<kanzi.filter.MSSSaliencyFilter: int width>;

        $i4 = this.<kanzi.filter.MSSSaliencyFilter: int height>;

        $i5 = this.<kanzi.filter.MSSSaliencyFilter: int stride>;

        specialinvoke $r22.<kanzi.util.color.YCbCrColorModelConverter: void <init>(int,int,int,int)>($i3, $i4, srcIdx#42, $i5);

        cvt = $r22;

        $r23 = this.<kanzi.filter.MSSSaliencyFilter: int[] chanL1>;

        $r24 = this.<kanzi.filter.MSSSaliencyFilter: int[] chanA1>;

        $r25 = this.<kanzi.filter.MSSSaliencyFilter: int[] chanB1>;

        $r26 = <kanzi.ColorModelType: kanzi.ColorModelType YUV444>;

        $z3 = interfaceinvoke cvt.<kanzi.util.color.ColorModelConverter: boolean convertRGBtoYUV(int[],int[],int[],int[],kanzi.ColorModelType)>(src, $r23, $r24, $r25, $r26);

        if $z3 != 0 goto label04;

        return 0;

     label04:
        $r27 = this.<kanzi.filter.MSSSaliencyFilter: int[] chanA1>;

        $r28 = this.<kanzi.filter.MSSSaliencyFilter: int[] buf>;

        $i6 = this.<kanzi.filter.MSSSaliencyFilter: int width>;

        $i7 = this.<kanzi.filter.MSSSaliencyFilter: int stride>;

        staticinvoke <kanzi.filter.MSSSaliencyFilter: void copyImage(int[],int[],int,int,int,int,int)>($r27, $r28, w, h, 0, $i6, $i7);

        $r29 = this.<kanzi.filter.MSSSaliencyFilter: kanzi.IntFilter integralFilter>;

        $z4 = interfaceinvoke $r29.<kanzi.IntFilter: boolean apply(kanzi.SliceIntArray,kanzi.SliceIntArray)>(sa, saA2);

        if $z4 != 0 goto label05;

        return 0;

     label05:
        $z5 = specialinvoke this.<kanzi.filter.MSSSaliencyFilter: boolean gaussianSmooth(kanzi.SliceIntArray,kanzi.SliceIntArray)>(sa, saA1);

        if $z5 != 0 goto label06;

        return 0;

     label06:
        $r30 = this.<kanzi.filter.MSSSaliencyFilter: int[] chanB1>;

        $r31 = this.<kanzi.filter.MSSSaliencyFilter: int[] buf>;

        $i8 = this.<kanzi.filter.MSSSaliencyFilter: int width>;

        $i9 = this.<kanzi.filter.MSSSaliencyFilter: int stride>;

        staticinvoke <kanzi.filter.MSSSaliencyFilter: void copyImage(int[],int[],int,int,int,int,int)>($r30, $r31, w, h, 0, $i8, $i9);

        $r32 = this.<kanzi.filter.MSSSaliencyFilter: kanzi.IntFilter integralFilter>;

        $z6 = interfaceinvoke $r32.<kanzi.IntFilter: boolean apply(kanzi.SliceIntArray,kanzi.SliceIntArray)>(sa, saB2);

        if $z6 != 0 goto label07;

        return 0;

     label07:
        $z7 = specialinvoke this.<kanzi.filter.MSSSaliencyFilter: boolean gaussianSmooth(kanzi.SliceIntArray,kanzi.SliceIntArray)>(sa, saB1);

        if $z7 != 0 goto label08;

        return 0;

     label08:
        goto label11;

     label09:
        i#153 = 0;

     label10:
        $i10 = srcIdx#42 + i#153;

        if $i10 >= count goto label11;

        $r33 = this.<kanzi.filter.MSSSaliencyFilter: int[] chanL1>;

        $i11 = srcIdx#42 + i#153;

        $i12 = src[$i11];

        $r33[i#153] = $i12;

        $r34 = this.<kanzi.filter.MSSSaliencyFilter: int[] chanA1>;

        $r34[i#153] = 0;

        $r35 = this.<kanzi.filter.MSSSaliencyFilter: int[] chanB1>;

        $r35[i#153] = 0;

        i#153 = i#153 + 1;

        goto label10;

     label11:
        $r36 = this.<kanzi.filter.MSSSaliencyFilter: int[] chanL1>;

        $r37 = this.<kanzi.filter.MSSSaliencyFilter: int[] buf>;

        $i13 = this.<kanzi.filter.MSSSaliencyFilter: int width>;

        $i14 = this.<kanzi.filter.MSSSaliencyFilter: int stride>;

        staticinvoke <kanzi.filter.MSSSaliencyFilter: void copyImage(int[],int[],int,int,int,int,int)>($r36, $r37, w, h, 0, $i13, $i14);

        $r38 = this.<kanzi.filter.MSSSaliencyFilter: kanzi.IntFilter integralFilter>;

        $z8 = interfaceinvoke $r38.<kanzi.IntFilter: boolean apply(kanzi.SliceIntArray,kanzi.SliceIntArray)>(sa, saL2);

        if $z8 != 0 goto label12;

        return 0;

     label12:
        $z9 = specialinvoke this.<kanzi.filter.MSSSaliencyFilter: boolean gaussianSmooth(kanzi.SliceIntArray,kanzi.SliceIntArray)>(sa, saL1);

        if $z9 != 0 goto label13;

        return 0;

     label13:
        st = this.<kanzi.filter.MSSSaliencyFilter: int stride>;

        minVal#199 = 2147483647;

        maxVal#201 = 0;

        srcIdx#203 = 0;

        y#205 = 0;

     label14:
        if y#205 >= h goto label19;

        $i15 = h - y#205;

        yoff = staticinvoke <java.lang.Math: int min(int,int)>(y#205, $i15);

        y1 = y#205 - yoff;

        $i16 = y#205 + yoff;

        $i17 = h - 1;

        y2 = staticinvoke <java.lang.Math: int min(int,int)>($i16, $i17);

        x#224 = 0;

     label15:
        if x#224 >= w goto label18;

        $i18 = w - x#224;

        xoff = staticinvoke <java.lang.Math: int min(int,int)>(x#224, $i18);

        x1 = x#224 - xoff;

        $i19 = x#224 + xoff;

        $i20 = w - 1;

        x2 = staticinvoke <java.lang.Math: int min(int,int)>($i19, $i20);

        $i21 = x2 - x1;

        $i22 = $i21 + 1;

        $i23 = y2 - y1;

        $i24 = $i23 + 1;

        area = $i22 * $i24;

        $i25 = y1 - 1;

        offset1 = $i25 * st;

        offset2 = y2 * st;

        $r39 = this.<kanzi.filter.MSSSaliencyFilter: int[] chanL2>;

        $i26 = staticinvoke <kanzi.filter.MSSSaliencyFilter: int getIntegralSum(int[],int,int,int,int)>($r39, x1, offset1, x2, offset2);

        valL = $i26 / area;

        $r40 = this.<kanzi.filter.MSSSaliencyFilter: int[] chanA2>;

        $i27 = staticinvoke <kanzi.filter.MSSSaliencyFilter: int getIntegralSum(int[],int,int,int,int)>($r40, x1, offset1, x2, offset2);

        valA = $i27 / area;

        $r41 = this.<kanzi.filter.MSSSaliencyFilter: int[] chanB2>;

        $i28 = staticinvoke <kanzi.filter.MSSSaliencyFilter: int getIntegralSum(int[],int,int,int,int)>($r41, x1, offset1, x2, offset2);

        valB = $i28 / area;

        idx = srcIdx#203 + x#224;

        $r42 = this.<kanzi.filter.MSSSaliencyFilter: int[] chanL1>;

        $i29 = $r42[idx];

        val1 = valL - $i29;

        $r43 = this.<kanzi.filter.MSSSaliencyFilter: int[] chanA1>;

        $i30 = $r43[idx];

        val2 = valA - $i30;

        $r44 = this.<kanzi.filter.MSSSaliencyFilter: int[] chanB1>;

        $i31 = $r44[idx];

        val3 = valB - $i31;

        $i32 = val1 * val1;

        $i33 = val2 * val2;

        $i34 = $i32 + $i33;

        $i35 = val3 * val3;

        val = $i34 + $i35;

        $i36 = dstIdx#45 + x#224;

        dst[$i36] = val;

        if val >= minVal#199 goto label16;

        minVal#199 = val;

     label16:
        if val <= maxVal#201 goto label17;

        maxVal#201 = val;

     label17:
        x#224 = x#224 + 1;

        goto label15;

     label18:
        srcIdx#203 = srcIdx#203 + st;

        dstIdx#45 = dstIdx#45 + st;

        y#205 = y#205 + 1;

        goto label14;

     label19:
        range = maxVal#201 - minVal#199;

        dstIdx#342 = output.<kanzi.SliceIntArray: int index>;

        $i37 = maxVal#201 - minVal#199;

        if $i37 > 1 goto label20;

        $i38 = this.<kanzi.filter.MSSSaliencyFilter: int mask>;

        if $i38 == -1 goto label24;

     label20:
        scale = 16711680 / range;

        y#354 = 0;

     label21:
        if y#354 >= h goto label24;

        x#358 = 0;

     label22:
        if x#358 >= w goto label23;

        $i39 = dstIdx#342 + x#358;

        $i40 = dst[$i39];

        $i41 = $i40 - minVal#199;

        $i42 = scale * $i41;

        val = $i42 >>> 16;

        $i43 = dstIdx#342 + x#358;

        $i44 = val << 16;

        $i45 = val << 8;

        $i46 = $i44 | $i45;

        $i47 = $i46 | val;

        $i48 = this.<kanzi.filter.MSSSaliencyFilter: int mask>;

        $i49 = $i47 & $i48;

        dst[$i43] = $i49;

        x#358 = x#358 + 1;

        goto label22;

     label23:
        dstIdx#342 = dstIdx#342 + st;

        y#354 = y#354 + 1;

        goto label21;

     label24:
        return 1;
    }

    private static void copyImage(int[], int[], int, int, int, int, int)
    {
        int[] input, output;
        int w, h, offs, stride1, stride2, $i0, $i1, srcIdx#13, dstIdx#15, j#19;

        input := @parameter0: int[];

        output := @parameter1: int[];

        w := @parameter2: int;

        h := @parameter3: int;

        offs := @parameter4: int;

        stride1 := @parameter5: int;

        stride2 := @parameter6: int;

        if input != output goto label1;

        return;

     label1:
        if stride1 != stride2 goto label2;

        $i0 = lengthof input;

        $i1 = $i0 - offs;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(input, offs, output, 0, $i1);

        return;

     label2:
        srcIdx#13 = offs;

        dstIdx#15 = 0;

        j#19 = h - 1;

     label3:
        if j#19 < 0 goto label4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(input, srcIdx#13, output, dstIdx#15, w);

        srcIdx#13 = srcIdx#13 + stride1;

        dstIdx#15 = dstIdx#15 + stride2;

        j#19 = j#19 + -1;

        goto label3;

     label4:
        return;
    }

    private boolean gaussianSmooth(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.filter.MSSSaliencyFilter this;
        kanzi.SliceIntArray input, output;
        int[] src, dst, $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        int w, h, st, nxt, prv, cur, nxt, idx#13, srcIdx#16, j#18, prv#24, $i0, cur#30, i#36, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, dstIdx#84, idx#94, dstIdx#98, j#100, $i12, i#106, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23;
        byte idx#81;

        this := @this: kanzi.filter.MSSSaliencyFilter;

        input := @parameter0: kanzi.SliceIntArray;

        output := @parameter1: kanzi.SliceIntArray;

        src = input.<kanzi.SliceIntArray: int[] array>;

        dst = output.<kanzi.SliceIntArray: int[] array>;

        w = this.<kanzi.filter.MSSSaliencyFilter: int width>;

        h = this.<kanzi.filter.MSSSaliencyFilter: int height>;

        st = this.<kanzi.filter.MSSSaliencyFilter: int stride>;

        idx#13 = output.<kanzi.SliceIntArray: int index>;

        srcIdx#16 = input.<kanzi.SliceIntArray: int index>;

        j#18 = 0;

     label1:
        if j#18 >= h goto label4;

        prv#24 = src[srcIdx#16];

        $i0 = srcIdx#16 + 1;

        cur#30 = src[$i0];

        $r0 = this.<kanzi.filter.MSSSaliencyFilter: int[] buf>;

        $r0[idx#13] = prv#24;

        i#36 = 1;

     label2:
        $i1 = w - 1;

        if i#36 >= $i1 goto label3;

        $i2 = srcIdx#16 + i#36;

        $i3 = $i2 + 1;

        nxt = src[$i3];

        $r1 = this.<kanzi.filter.MSSSaliencyFilter: int[] buf>;

        $i4 = idx#13 + i#36;

        $i5 = prv#24 + cur#30;

        $i6 = $i5 + cur#30;

        $i7 = $i6 + nxt;

        $i8 = $i7 + 2;

        $i9 = $i8 >>> 2;

        $r1[$i4] = $i9;

        prv#24 = cur#30;

        cur#30 = nxt;

        i#36 = i#36 + 1;

        goto label2;

     label3:
        $r2 = this.<kanzi.filter.MSSSaliencyFilter: int[] buf>;

        $i10 = idx#13 + w;

        $i11 = $i10 - 1;

        $r2[$i11] = cur#30;

        srcIdx#16 = srcIdx#16 + st;

        idx#13 = idx#13 + st;

        j#18 = j#18 + 1;

        goto label1;

     label4:
        idx#81 = 0;

        dstIdx#84 = output.<kanzi.SliceIntArray: int index>;

        $r3 = this.<kanzi.filter.MSSSaliencyFilter: int[] buf>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, idx#81, dst, dstIdx#84, w);

        idx#94 = idx#81 + st;

        dstIdx#98 = dstIdx#84 + st;

        j#100 = 1;

     label5:
        $i12 = h - 1;

        if j#100 >= $i12 goto label8;

        i#106 = 0;

     label6:
        if i#106 >= w goto label7;

        $r4 = this.<kanzi.filter.MSSSaliencyFilter: int[] buf>;

        $i13 = idx#94 + i#106;

        $i14 = $i13 - st;

        prv = $r4[$i14];

        $r5 = this.<kanzi.filter.MSSSaliencyFilter: int[] buf>;

        $i15 = idx#94 + i#106;

        cur = $r5[$i15];

        $r6 = this.<kanzi.filter.MSSSaliencyFilter: int[] buf>;

        $i16 = idx#94 + i#106;

        $i17 = $i16 + st;

        nxt = $r6[$i17];

        $i18 = dstIdx#98 + i#106;

        $i19 = prv + cur;

        $i20 = $i19 + cur;

        $i21 = $i20 + nxt;

        $i22 = $i21 + 2;

        $i23 = $i22 >>> 2;

        dst[$i18] = $i23;

        i#106 = i#106 + 1;

        goto label6;

     label7:
        dstIdx#98 = dstIdx#98 + st;

        idx#94 = idx#94 + st;

        j#100 = j#100 + 1;

        goto label5;

     label8:
        $r7 = this.<kanzi.filter.MSSSaliencyFilter: int[] buf>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, idx#94, dst, dstIdx#98, w);

        return 1;
    }

    private static int getIntegralSum(int[], int, int, int, int)
    {
        int[] data;
        int x1, offset1, x2, offset2, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25;

        data := @parameter0: int[];

        x1 := @parameter1: int;

        offset1 := @parameter2: int;

        x2 := @parameter3: int;

        offset2 := @parameter4: int;

        if x1 > 0 goto label2;

        if offset1 > 0 goto label1;

        $i0 = offset2 + x2;

        $i1 = data[$i0];

        return $i1;

     label1:
        $i2 = offset2 + x2;

        $i3 = data[$i2];

        $i4 = offset1 + x2;

        $i5 = data[$i4];

        $i6 = $i3 - $i5;

        return $i6;

     label2:
        if offset1 > 0 goto label3;

        $i7 = offset2 + x2;

        $i8 = data[$i7];

        $i9 = offset2 + x1;

        $i10 = $i9 - 1;

        $i11 = data[$i10];

        $i12 = $i8 - $i11;

        return $i12;

     label3:
        $i13 = offset2 + x2;

        $i14 = data[$i13];

        $i15 = offset1 + x1;

        $i16 = $i15 - 1;

        $i17 = data[$i16];

        $i18 = $i14 + $i17;

        $i19 = offset1 + x2;

        $i20 = data[$i19];

        $i21 = $i18 - $i20;

        $i22 = offset2 + x1;

        $i23 = $i22 - 1;

        $i24 = data[$i23];

        $i25 = $i21 - $i24;

        return $i25;
    }


