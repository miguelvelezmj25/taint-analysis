    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        berkeley.com.sleepycat.je.txn.LockType $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        berkeley.com.sleepycat.je.txn.LockConflict[][] $r10;
        berkeley.com.sleepycat.je.txn.LockConflict[] $r11, $r17, $r23, $r29, $r35;
        berkeley.com.sleepycat.je.txn.LockConflict $r12, $r13, $r14, $r15, $r16, $r18, $r19, $r20, $r21, $r22, $r24, $r25, $r26, $r27, $r28, $r30, $r31, $r32, $r33, $r34, $r36, $r37, $r38, $r39, $r40;
        berkeley.com.sleepycat.je.txn.LockUpgrade[][] $r41;
        berkeley.com.sleepycat.je.txn.LockUpgrade[] $r42, $r48, $r54, $r60, $r66;
        berkeley.com.sleepycat.je.txn.LockUpgrade $r43, $r44, $r45, $r46, $r47, $r49, $r50, $r51, $r52, $r53, $r55, $r56, $r57, $r58, $r59, $r61, $r62, $r63, $r64, $r65, $r67, $r68, $r69, $r70, $r71;

        $r0 = class "berkeley/com/sleepycat/je/txn/LockType";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <berkeley.com.sleepycat.je.txn.LockType: boolean $assertionsDisabled> = $z1;

        $r1 = new berkeley.com.sleepycat.je.txn.LockType;

        specialinvoke $r1.<berkeley.com.sleepycat.je.txn.LockType: void <init>(int,boolean,java.lang.String)>(0, 0, "READ");

        <berkeley.com.sleepycat.je.txn.LockType: berkeley.com.sleepycat.je.txn.LockType READ> = $r1;

        $r2 = new berkeley.com.sleepycat.je.txn.LockType;

        specialinvoke $r2.<berkeley.com.sleepycat.je.txn.LockType: void <init>(int,boolean,java.lang.String)>(1, 1, "WRITE");

        <berkeley.com.sleepycat.je.txn.LockType: berkeley.com.sleepycat.je.txn.LockType WRITE> = $r2;

        $r3 = new berkeley.com.sleepycat.je.txn.LockType;

        specialinvoke $r3.<berkeley.com.sleepycat.je.txn.LockType: void <init>(int,boolean,java.lang.String)>(2, 0, "RANGE_READ");

        <berkeley.com.sleepycat.je.txn.LockType: berkeley.com.sleepycat.je.txn.LockType RANGE_READ> = $r3;

        $r4 = new berkeley.com.sleepycat.je.txn.LockType;

        specialinvoke $r4.<berkeley.com.sleepycat.je.txn.LockType: void <init>(int,boolean,java.lang.String)>(3, 1, "RANGE_WRITE");

        <berkeley.com.sleepycat.je.txn.LockType: berkeley.com.sleepycat.je.txn.LockType RANGE_WRITE> = $r4;

        $r5 = new berkeley.com.sleepycat.je.txn.LockType;

        specialinvoke $r5.<berkeley.com.sleepycat.je.txn.LockType: void <init>(int,boolean,java.lang.String)>(4, 0, "RANGE_INSERT");

        <berkeley.com.sleepycat.je.txn.LockType: berkeley.com.sleepycat.je.txn.LockType RANGE_INSERT> = $r5;

        $r6 = new berkeley.com.sleepycat.je.txn.LockType;

        specialinvoke $r6.<berkeley.com.sleepycat.je.txn.LockType: void <init>(int,boolean,java.lang.String)>(5, 0, "NONE");

        <berkeley.com.sleepycat.je.txn.LockType: berkeley.com.sleepycat.je.txn.LockType NONE> = $r6;

        $r7 = new berkeley.com.sleepycat.je.txn.LockType;

        specialinvoke $r7.<berkeley.com.sleepycat.je.txn.LockType: void <init>(int,boolean,java.lang.String)>(6, 0, "RESTART");

        <berkeley.com.sleepycat.je.txn.LockType: berkeley.com.sleepycat.je.txn.LockType RESTART> = $r7;

        $r8 = <berkeley.com.sleepycat.je.txn.LockType: berkeley.com.sleepycat.je.txn.LockType RANGE_READ>;

        specialinvoke $r8.<berkeley.com.sleepycat.je.txn.LockType: void setCausesRestart()>();

        $r9 = <berkeley.com.sleepycat.je.txn.LockType: berkeley.com.sleepycat.je.txn.LockType RANGE_WRITE>;

        specialinvoke $r9.<berkeley.com.sleepycat.je.txn.LockType: void setCausesRestart()>();

        $r10 = newarray (berkeley.com.sleepycat.je.txn.LockConflict[])[5];

        $r11 = newarray (berkeley.com.sleepycat.je.txn.LockConflict)[5];

        $r12 = <berkeley.com.sleepycat.je.txn.LockConflict: berkeley.com.sleepycat.je.txn.LockConflict ALLOW>;

        $r11[0] = $r12;

        $r13 = <berkeley.com.sleepycat.je.txn.LockConflict: berkeley.com.sleepycat.je.txn.LockConflict BLOCK>;

        $r11[1] = $r13;

        $r14 = <berkeley.com.sleepycat.je.txn.LockConflict: berkeley.com.sleepycat.je.txn.LockConflict ALLOW>;

        $r11[2] = $r14;

        $r15 = <berkeley.com.sleepycat.je.txn.LockConflict: berkeley.com.sleepycat.je.txn.LockConflict BLOCK>;

        $r11[3] = $r15;

        $r16 = <berkeley.com.sleepycat.je.txn.LockConflict: berkeley.com.sleepycat.je.txn.LockConflict ALLOW>;

        $r11[4] = $r16;

        $r10[0] = $r11;

        $r17 = newarray (berkeley.com.sleepycat.je.txn.LockConflict)[5];

        $r18 = <berkeley.com.sleepycat.je.txn.LockConflict: berkeley.com.sleepycat.je.txn.LockConflict BLOCK>;

        $r17[0] = $r18;

        $r19 = <berkeley.com.sleepycat.je.txn.LockConflict: berkeley.com.sleepycat.je.txn.LockConflict BLOCK>;

        $r17[1] = $r19;

        $r20 = <berkeley.com.sleepycat.je.txn.LockConflict: berkeley.com.sleepycat.je.txn.LockConflict BLOCK>;

        $r17[2] = $r20;

        $r21 = <berkeley.com.sleepycat.je.txn.LockConflict: berkeley.com.sleepycat.je.txn.LockConflict BLOCK>;

        $r17[3] = $r21;

        $r22 = <berkeley.com.sleepycat.je.txn.LockConflict: berkeley.com.sleepycat.je.txn.LockConflict ALLOW>;

        $r17[4] = $r22;

        $r10[1] = $r17;

        $r23 = newarray (berkeley.com.sleepycat.je.txn.LockConflict)[5];

        $r24 = <berkeley.com.sleepycat.je.txn.LockConflict: berkeley.com.sleepycat.je.txn.LockConflict ALLOW>;

        $r23[0] = $r24;

        $r25 = <berkeley.com.sleepycat.je.txn.LockConflict: berkeley.com.sleepycat.je.txn.LockConflict BLOCK>;

        $r23[1] = $r25;

        $r26 = <berkeley.com.sleepycat.je.txn.LockConflict: berkeley.com.sleepycat.je.txn.LockConflict ALLOW>;

        $r23[2] = $r26;

        $r27 = <berkeley.com.sleepycat.je.txn.LockConflict: berkeley.com.sleepycat.je.txn.LockConflict BLOCK>;

        $r23[3] = $r27;

        $r28 = <berkeley.com.sleepycat.je.txn.LockConflict: berkeley.com.sleepycat.je.txn.LockConflict BLOCK>;

        $r23[4] = $r28;

        $r10[2] = $r23;

        $r29 = newarray (berkeley.com.sleepycat.je.txn.LockConflict)[5];

        $r30 = <berkeley.com.sleepycat.je.txn.LockConflict: berkeley.com.sleepycat.je.txn.LockConflict BLOCK>;

        $r29[0] = $r30;

        $r31 = <berkeley.com.sleepycat.je.txn.LockConflict: berkeley.com.sleepycat.je.txn.LockConflict BLOCK>;

        $r29[1] = $r31;

        $r32 = <berkeley.com.sleepycat.je.txn.LockConflict: berkeley.com.sleepycat.je.txn.LockConflict BLOCK>;

        $r29[2] = $r32;

        $r33 = <berkeley.com.sleepycat.je.txn.LockConflict: berkeley.com.sleepycat.je.txn.LockConflict BLOCK>;

        $r29[3] = $r33;

        $r34 = <berkeley.com.sleepycat.je.txn.LockConflict: berkeley.com.sleepycat.je.txn.LockConflict BLOCK>;

        $r29[4] = $r34;

        $r10[3] = $r29;

        $r35 = newarray (berkeley.com.sleepycat.je.txn.LockConflict)[5];

        $r36 = <berkeley.com.sleepycat.je.txn.LockConflict: berkeley.com.sleepycat.je.txn.LockConflict ALLOW>;

        $r35[0] = $r36;

        $r37 = <berkeley.com.sleepycat.je.txn.LockConflict: berkeley.com.sleepycat.je.txn.LockConflict ALLOW>;

        $r35[1] = $r37;

        $r38 = <berkeley.com.sleepycat.je.txn.LockConflict: berkeley.com.sleepycat.je.txn.LockConflict RESTART>;

        $r35[2] = $r38;

        $r39 = <berkeley.com.sleepycat.je.txn.LockConflict: berkeley.com.sleepycat.je.txn.LockConflict RESTART>;

        $r35[3] = $r39;

        $r40 = <berkeley.com.sleepycat.je.txn.LockConflict: berkeley.com.sleepycat.je.txn.LockConflict ALLOW>;

        $r35[4] = $r40;

        $r10[4] = $r35;

        <berkeley.com.sleepycat.je.txn.LockType: berkeley.com.sleepycat.je.txn.LockConflict[][] conflictMatrix> = $r10;

        $r41 = newarray (berkeley.com.sleepycat.je.txn.LockUpgrade[])[5];

        $r42 = newarray (berkeley.com.sleepycat.je.txn.LockUpgrade)[5];

        $r43 = <berkeley.com.sleepycat.je.txn.LockUpgrade: berkeley.com.sleepycat.je.txn.LockUpgrade EXISTING>;

        $r42[0] = $r43;

        $r44 = <berkeley.com.sleepycat.je.txn.LockUpgrade: berkeley.com.sleepycat.je.txn.LockUpgrade WRITE_PROMOTE>;

        $r42[1] = $r44;

        $r45 = <berkeley.com.sleepycat.je.txn.LockUpgrade: berkeley.com.sleepycat.je.txn.LockUpgrade RANGE_READ_IMMED>;

        $r42[2] = $r45;

        $r46 = <berkeley.com.sleepycat.je.txn.LockUpgrade: berkeley.com.sleepycat.je.txn.LockUpgrade RANGE_WRITE_PROMOTE>;

        $r42[3] = $r46;

        $r47 = <berkeley.com.sleepycat.je.txn.LockUpgrade: berkeley.com.sleepycat.je.txn.LockUpgrade ILLEGAL>;

        $r42[4] = $r47;

        $r41[0] = $r42;

        $r48 = newarray (berkeley.com.sleepycat.je.txn.LockUpgrade)[5];

        $r49 = <berkeley.com.sleepycat.je.txn.LockUpgrade: berkeley.com.sleepycat.je.txn.LockUpgrade EXISTING>;

        $r48[0] = $r49;

        $r50 = <berkeley.com.sleepycat.je.txn.LockUpgrade: berkeley.com.sleepycat.je.txn.LockUpgrade EXISTING>;

        $r48[1] = $r50;

        $r51 = <berkeley.com.sleepycat.je.txn.LockUpgrade: berkeley.com.sleepycat.je.txn.LockUpgrade RANGE_WRITE_IMMED>;

        $r48[2] = $r51;

        $r52 = <berkeley.com.sleepycat.je.txn.LockUpgrade: berkeley.com.sleepycat.je.txn.LockUpgrade RANGE_WRITE_IMMED>;

        $r48[3] = $r52;

        $r53 = <berkeley.com.sleepycat.je.txn.LockUpgrade: berkeley.com.sleepycat.je.txn.LockUpgrade ILLEGAL>;

        $r48[4] = $r53;

        $r41[1] = $r48;

        $r54 = newarray (berkeley.com.sleepycat.je.txn.LockUpgrade)[5];

        $r55 = <berkeley.com.sleepycat.je.txn.LockUpgrade: berkeley.com.sleepycat.je.txn.LockUpgrade EXISTING>;

        $r54[0] = $r55;

        $r56 = <berkeley.com.sleepycat.je.txn.LockUpgrade: berkeley.com.sleepycat.je.txn.LockUpgrade RANGE_WRITE_PROMOTE>;

        $r54[1] = $r56;

        $r57 = <berkeley.com.sleepycat.je.txn.LockUpgrade: berkeley.com.sleepycat.je.txn.LockUpgrade EXISTING>;

        $r54[2] = $r57;

        $r58 = <berkeley.com.sleepycat.je.txn.LockUpgrade: berkeley.com.sleepycat.je.txn.LockUpgrade RANGE_WRITE_PROMOTE>;

        $r54[3] = $r58;

        $r59 = <berkeley.com.sleepycat.je.txn.LockUpgrade: berkeley.com.sleepycat.je.txn.LockUpgrade ILLEGAL>;

        $r54[4] = $r59;

        $r41[2] = $r54;

        $r60 = newarray (berkeley.com.sleepycat.je.txn.LockUpgrade)[5];

        $r61 = <berkeley.com.sleepycat.je.txn.LockUpgrade: berkeley.com.sleepycat.je.txn.LockUpgrade EXISTING>;

        $r60[0] = $r61;

        $r62 = <berkeley.com.sleepycat.je.txn.LockUpgrade: berkeley.com.sleepycat.je.txn.LockUpgrade EXISTING>;

        $r60[1] = $r62;

        $r63 = <berkeley.com.sleepycat.je.txn.LockUpgrade: berkeley.com.sleepycat.je.txn.LockUpgrade EXISTING>;

        $r60[2] = $r63;

        $r64 = <berkeley.com.sleepycat.je.txn.LockUpgrade: berkeley.com.sleepycat.je.txn.LockUpgrade EXISTING>;

        $r60[3] = $r64;

        $r65 = <berkeley.com.sleepycat.je.txn.LockUpgrade: berkeley.com.sleepycat.je.txn.LockUpgrade ILLEGAL>;

        $r60[4] = $r65;

        $r41[3] = $r60;

        $r66 = newarray (berkeley.com.sleepycat.je.txn.LockUpgrade)[5];

        $r67 = <berkeley.com.sleepycat.je.txn.LockUpgrade: berkeley.com.sleepycat.je.txn.LockUpgrade ILLEGAL>;

        $r66[0] = $r67;

        $r68 = <berkeley.com.sleepycat.je.txn.LockUpgrade: berkeley.com.sleepycat.je.txn.LockUpgrade ILLEGAL>;

        $r66[1] = $r68;

        $r69 = <berkeley.com.sleepycat.je.txn.LockUpgrade: berkeley.com.sleepycat.je.txn.LockUpgrade ILLEGAL>;

        $r66[2] = $r69;

        $r70 = <berkeley.com.sleepycat.je.txn.LockUpgrade: berkeley.com.sleepycat.je.txn.LockUpgrade ILLEGAL>;

        $r66[3] = $r70;

        $r71 = <berkeley.com.sleepycat.je.txn.LockUpgrade: berkeley.com.sleepycat.je.txn.LockUpgrade EXISTING>;

        $r66[4] = $r71;

        $r41[4] = $r66;

        <berkeley.com.sleepycat.je.txn.LockType: berkeley.com.sleepycat.je.txn.LockUpgrade[][] upgradeMatrix> = $r41;

        return;
    }

    private void setCausesRestart()
    {
        berkeley.com.sleepycat.je.txn.LockType this;

        this := @this: berkeley.com.sleepycat.je.txn.LockType;

        this.<berkeley.com.sleepycat.je.txn.LockType: boolean causesRestart> = 1;

        return;
    }

    private void <init>(int, boolean, java.lang.String)
    {
        berkeley.com.sleepycat.je.txn.LockType this;
        int index;
        boolean write;
        java.lang.String name;

        this := @this: berkeley.com.sleepycat.je.txn.LockType;

        index := @parameter0: int;

        write := @parameter1: boolean;

        name := @parameter2: java.lang.String;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<berkeley.com.sleepycat.je.txn.LockType: int index> = index;

        this.<berkeley.com.sleepycat.je.txn.LockType: boolean write> = write;

        this.<berkeley.com.sleepycat.je.txn.LockType: java.lang.String name> = name;

        return;
    }

    final boolean getCausesRestart()
    {
        berkeley.com.sleepycat.je.txn.LockType this;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.txn.LockType;

        $z0 = this.<berkeley.com.sleepycat.je.txn.LockType: boolean causesRestart>;

        return $z0;
    }

    berkeley.com.sleepycat.je.txn.LockUpgrade getUpgrade(berkeley.com.sleepycat.je.txn.LockType)
    {
        berkeley.com.sleepycat.je.txn.LockType this, requestedType;
        berkeley.com.sleepycat.je.txn.LockUpgrade upgrade;
        berkeley.com.sleepycat.je.txn.LockUpgrade[][] $r0;
        int $i0, $i1;
        berkeley.com.sleepycat.je.txn.LockUpgrade[] $r1;
        boolean $z0, $z1;
        java.lang.AssertionError $r2;
        java.lang.StringBuilder $r3, $r5, $r6, $r7;
        java.lang.String $r4, $r8;

        this := @this: berkeley.com.sleepycat.je.txn.LockType;

        requestedType := @parameter0: berkeley.com.sleepycat.je.txn.LockType;

        $r0 = <berkeley.com.sleepycat.je.txn.LockType: berkeley.com.sleepycat.je.txn.LockUpgrade[][] upgradeMatrix>;

        $i0 = this.<berkeley.com.sleepycat.je.txn.LockType: int index>;

        $r1 = $r0[$i0];

        $i1 = requestedType.<berkeley.com.sleepycat.je.txn.LockType: int index>;

        upgrade = $r1[$i1];

        $z0 = <berkeley.com.sleepycat.je.txn.LockType: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke upgrade.<berkeley.com.sleepycat.je.txn.LockUpgrade: boolean getIllegal()>();

        if $z1 == 0 goto label1;

        $r2 = new java.lang.AssertionError;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke this.<berkeley.com.sleepycat.je.txn.LockType: java.lang.String toString()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(requestedType);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r8);

        throw $r2;

     label1:
        return upgrade;
    }

    berkeley.com.sleepycat.je.txn.LockConflict getConflict(berkeley.com.sleepycat.je.txn.LockType)
    {
        berkeley.com.sleepycat.je.txn.LockType this, requestedType;
        berkeley.com.sleepycat.je.txn.LockConflict[][] $r0;
        int $i0, $i1;
        berkeley.com.sleepycat.je.txn.LockConflict[] $r1;
        berkeley.com.sleepycat.je.txn.LockConflict $r2;

        this := @this: berkeley.com.sleepycat.je.txn.LockType;

        requestedType := @parameter0: berkeley.com.sleepycat.je.txn.LockType;

        $r0 = <berkeley.com.sleepycat.je.txn.LockType: berkeley.com.sleepycat.je.txn.LockConflict[][] conflictMatrix>;

        $i0 = this.<berkeley.com.sleepycat.je.txn.LockType: int index>;

        $r1 = $r0[$i0];

        $i1 = requestedType.<berkeley.com.sleepycat.je.txn.LockType: int index>;

        $r2 = $r1[$i1];

        return $r2;
    }

    public java.lang.String toString()
    {
        berkeley.com.sleepycat.je.txn.LockType this;
        java.lang.String $r0;

        this := @this: berkeley.com.sleepycat.je.txn.LockType;

        $r0 = this.<berkeley.com.sleepycat.je.txn.LockType: java.lang.String name>;

        return $r0;
    }

    public final boolean isWriteLock()
    {
        berkeley.com.sleepycat.je.txn.LockType this;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.txn.LockType;

        $z0 = this.<berkeley.com.sleepycat.je.txn.LockType: boolean write>;

        return $z0;
    }


