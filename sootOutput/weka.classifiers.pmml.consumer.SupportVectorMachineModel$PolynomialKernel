    public void <init>(org.w3c.dom.Element, weka.gui.Logger)
    {
        weka.classifiers.pmml.consumer.SupportVectorMachineModel$PolynomialKernel this;
        org.w3c.dom.Element polyNode;
        weka.gui.Logger log, $r1, $r3, $r5, $r7, $r9, $r11;
        java.lang.String gammaString, message, coefString, message, degreeString, message;
        java.lang.NumberFormatException e, e, e, $r0, $r4, $r8;
        int $i0, $i1, $i2;
        double $d0, $d1, $d2;
        java.io.PrintStream $r2, $r6, $r10;

        this := @this: weka.classifiers.pmml.consumer.SupportVectorMachineModel$PolynomialKernel;

        polyNode := @parameter0: org.w3c.dom.Element;

        log := @parameter1: weka.gui.Logger;

        specialinvoke this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$Kernel: void <init>(weka.gui.Logger)>(log);

        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$PolynomialKernel: double m_gamma> = 1.0;

        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$PolynomialKernel: double m_coef0> = 1.0;

        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$PolynomialKernel: double m_degree> = 1.0;

        gammaString = interfaceinvoke polyNode.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("gamma");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(gammaString);

        if gammaString == null goto label05;

        $i0 = virtualinvoke gammaString.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label05;

     label01:
        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(gammaString);

        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$PolynomialKernel: double m_gamma> = $d0;

     label02:
        goto label05;

     label03:
        $r0 := @caughtexception;

        e = $r0;

        message = "[PolynomialKernel] : WARNING, can\'t parse gamma attribute. Using default value of 1.";

        $r1 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$PolynomialKernel: weka.gui.Logger m_log>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 != null goto label04;

        $r2 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>(message);

        goto label05;

     label04:
        $r3 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$PolynomialKernel: weka.gui.Logger m_log>;

        interfaceinvoke $r3.<weka.gui.Logger: void logMessage(java.lang.String)>(message);

     label05:
        coefString = interfaceinvoke polyNode.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("coef0");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(coefString);

        if coefString == null goto label10;

        $i1 = virtualinvoke coefString.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 0 goto label10;

     label06:
        $d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(coefString);

        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$PolynomialKernel: double m_coef0> = $d1;

     label07:
        goto label10;

     label08:
        $r4 := @caughtexception;

        e = $r4;

        message = "[PolynomialKernel] : WARNING, can\'t parse coef0 attribute. Using default value of 1.";

        $r5 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$PolynomialKernel: weka.gui.Logger m_log>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r5);

        if $r5 != null goto label09;

        $r6 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>(message);

        goto label10;

     label09:
        $r7 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$PolynomialKernel: weka.gui.Logger m_log>;

        interfaceinvoke $r7.<weka.gui.Logger: void logMessage(java.lang.String)>(message);

     label10:
        degreeString = interfaceinvoke polyNode.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("degree");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(degreeString);

        if degreeString == null goto label15;

        $i2 = virtualinvoke degreeString.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 <= 0 goto label15;

     label11:
        $d2 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(degreeString);

        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$PolynomialKernel: double m_degree> = $d2;

     label12:
        goto label15;

     label13:
        $r8 := @caughtexception;

        e = $r8;

        message = "[PolynomialKernel] : WARNING, can\'t parse degree attribute. Using default value of 1.";

        $r9 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$PolynomialKernel: weka.gui.Logger m_log>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r9);

        if $r9 != null goto label14;

        $r10 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>(message);

        goto label15;

     label14:
        $r11 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$PolynomialKernel: weka.gui.Logger m_log>;

        interfaceinvoke $r11.<weka.gui.Logger: void logMessage(java.lang.String)>(message);

     label15:
        return;

        catch java.lang.NumberFormatException from label01 to label02 with label03;
        catch java.lang.NumberFormatException from label06 to label07 with label08;
        catch java.lang.NumberFormatException from label11 to label12 with label13;
    }

    public java.lang.String toString()
    {
        weka.classifiers.pmml.consumer.SupportVectorMachineModel$PolynomialKernel this;
        java.lang.StringBuilder $r0, $r1, $r2, $r3, $r4, $r5, $r6;
        double $d0, $d1, $d2;
        java.lang.String $r7;

        this := @this: weka.classifiers.pmml.consumer.SupportVectorMachineModel$PolynomialKernel;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Polynomial kernel: K(x,y) = (");

        $d0 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$PolynomialKernel: double m_gamma>;

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" * <x,y> + ");

        $d1 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$PolynomialKernel: double m_coef0>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")^");

        $d2 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$PolynomialKernel: double m_degree>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }


