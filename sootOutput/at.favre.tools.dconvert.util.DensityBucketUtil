    public static java.util.Map getDensityBuckets(java.util.List, java.awt.Dimension, at.favre.tools.dconvert.arg.Arguments, float, boolean) throws java.io.IOException
    {
        java.util.List densities;
        java.awt.Dimension srcDimension;
        at.favre.tools.dconvert.arg.Arguments args;
        float scale;
        boolean isNinePatch, $z0, $z1;
        double $d0, $d1, $d2, $d3;
        byte $b0;
        java.util.Set $r0;
        int[] $r1;
        at.favre.tools.dconvert.arg.EScaleMode $r2;
        int $i1, $i2;
        java.util.Map $r3, $r4, $r5;

        densities := @parameter0: java.util.List;

        srcDimension := @parameter1: java.awt.Dimension;

        args := @parameter2: at.favre.tools.dconvert.arg.Arguments;

        scale := @parameter3: float;

        isNinePatch := @parameter4: boolean;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isNinePatch);

        if isNinePatch == 0 goto label1;

        $d0 = virtualinvoke srcDimension.<java.awt.Dimension: double getWidth()>();

        $d1 = $d0 - 2.0;

        $d2 = virtualinvoke srcDimension.<java.awt.Dimension: double getHeight()>();

        $d3 = $d2 - 2.0;

        virtualinvoke srcDimension.<java.awt.Dimension: void setSize(double,double)>($d1, $d3);

     label1:
        $b0 = scale cmpl 0.0F;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 >= 0 goto label2;

        $r0 = args.<at.favre.tools.dconvert.arg.Arguments: java.util.Set platform>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label2;

        $z0 = args.<at.favre.tools.dconvert.arg.Arguments: boolean scaleIsHeightdp>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label2;

        $z1 = args.<at.favre.tools.dconvert.arg.Arguments: boolean skipUpscaling>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label6;

     label2:
        $r1 = <at.favre.tools.dconvert.util.DensityBucketUtil$1: int[] $SwitchMap$at$favre$tools$dconvert$arg$EScaleMode>;

        $r2 = args.<at.favre.tools.dconvert.arg.Arguments: at.favre.tools.dconvert.arg.EScaleMode scaleMode>;

        $i1 = virtualinvoke $r2.<at.favre.tools.dconvert.arg.EScaleMode: int ordinal()>();

        $i2 = $r1[$i1];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        tableswitch($i2)
        {
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            default: goto label5;
        };

     label3:
        $r3 = staticinvoke <at.favre.tools.dconvert.util.DensityBucketUtil: java.util.Map getDensityBucketsWithDpScale(java.util.List,java.awt.Dimension,at.favre.tools.dconvert.arg.Arguments,float)>(densities, srcDimension, args, scale);

        return $r3;

     label4:
        $r4 = staticinvoke <at.favre.tools.dconvert.util.DensityBucketUtil: java.util.Map getDensityBucketsHeightDpScale(java.util.List,java.awt.Dimension,at.favre.tools.dconvert.arg.Arguments,float)>(densities, srcDimension, args, scale);

        return $r4;

     label5:
        $r5 = staticinvoke <at.favre.tools.dconvert.util.DensityBucketUtil: java.util.Map getDensityBucketsWithFactorScale(java.util.List,java.awt.Dimension,at.favre.tools.dconvert.arg.Arguments,float)>(densities, srcDimension, args, scale);

        return $r5;

     label6:
        return null;
    }

    private static java.util.Map getDensityBucketsWithFactorScale(java.util.List, java.awt.Dimension, at.favre.tools.dconvert.arg.Arguments, float)
    {
        java.util.List densities;
        java.awt.Dimension srcDimension;
        at.favre.tools.dconvert.arg.Arguments args;
        float scale;
        double baseWidth, baseHeight, $d0, $d1, $d2, $d3;
        java.util.TreeMap bucketMap, $r0;
        at.favre.tools.dconvert.util.MyPredicate3 predicate, $r1;
        at.favre.tools.dconvert.util.MyConsumer3 consumer, $r2;
        int $i0, $i1;
        java.util.stream.Stream $r3, $r4;

        densities := @parameter0: java.util.List;

        srcDimension := @parameter1: java.awt.Dimension;

        args := @parameter2: at.favre.tools.dconvert.arg.Arguments;

        scale := @parameter3: float;

        $i0 = srcDimension.<java.awt.Dimension: int width>;

        $d0 = (double) $i0;

        $d1 = (double) scale;

        baseWidth = $d0 / $d1;

        $i1 = srcDimension.<java.awt.Dimension: int height>;

        $d2 = (double) $i1;

        $d3 = (double) scale;

        baseHeight = $d2 / $d3;

        $r0 = new java.util.TreeMap;

        specialinvoke $r0.<java.util.TreeMap: void <init>()>();

        bucketMap = $r0;

        $r1 = new at.favre.tools.dconvert.util.MyPredicate3;

        specialinvoke $r1.<at.favre.tools.dconvert.util.MyPredicate3: void <init>(at.favre.tools.dconvert.arg.Arguments,float)>(args, scale);

        predicate = $r1;

        $r2 = new at.favre.tools.dconvert.util.MyConsumer3;

        specialinvoke $r2.<at.favre.tools.dconvert.util.MyConsumer3: void <init>(java.util.Map,at.favre.tools.dconvert.arg.Arguments,double,double)>(bucketMap, args, baseWidth, baseHeight);

        consumer = $r2;

        $r3 = interfaceinvoke densities.<java.util.List: java.util.stream.Stream stream()>();

        $r4 = interfaceinvoke $r3.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(predicate);

        interfaceinvoke $r4.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>(consumer);

        return bucketMap;
    }

    private static java.util.Map getDensityBucketsHeightDpScale(java.util.List, java.awt.Dimension, at.favre.tools.dconvert.arg.Arguments, float) throws java.io.IOException
    {
        java.util.List densities;
        java.awt.Dimension srcDimension;
        at.favre.tools.dconvert.arg.Arguments args;
        float scale, scaleFactor, $f0, $f1, $f2;
        int baseWidth, baseHeight, $i0, $i1;
        java.util.TreeMap bucketMap, $r0;
        at.favre.tools.dconvert.util.MyPredicate2 predicate, $r1;
        at.favre.tools.dconvert.util.MyConsumer2 consumer, $r2;
        double $d0, $d1, $d2, $d3;
        java.util.stream.Stream $r3, $r4;

        densities := @parameter0: java.util.List;

        srcDimension := @parameter1: java.awt.Dimension;

        args := @parameter2: at.favre.tools.dconvert.arg.Arguments;

        scale := @parameter3: float;

        $i0 = srcDimension.<java.awt.Dimension: int height>;

        $f0 = (float) $i0;

        scaleFactor = scale / $f0;

        $i1 = srcDimension.<java.awt.Dimension: int width>;

        $f1 = (float) $i1;

        $f2 = scaleFactor * $f1;

        $d0 = (double) $f2;

        $d1 = virtualinvoke args.<at.favre.tools.dconvert.arg.Arguments: double round(double)>($d0);

        baseWidth = (int) $d1;

        $d2 = (double) scale;

        $d3 = virtualinvoke args.<at.favre.tools.dconvert.arg.Arguments: double round(double)>($d2);

        baseHeight = (int) $d3;

        $r0 = new java.util.TreeMap;

        specialinvoke $r0.<java.util.TreeMap: void <init>()>();

        bucketMap = $r0;

        $r1 = new at.favre.tools.dconvert.util.MyPredicate2;

        specialinvoke $r1.<at.favre.tools.dconvert.util.MyPredicate2: void <init>(at.favre.tools.dconvert.arg.Arguments,int,java.awt.Dimension)>(args, baseHeight, srcDimension);

        predicate = $r1;

        $r2 = new at.favre.tools.dconvert.util.MyConsumer2;

        specialinvoke $r2.<at.favre.tools.dconvert.util.MyConsumer2: void <init>(java.util.Map,at.favre.tools.dconvert.arg.Arguments,int,int)>(bucketMap, args, baseWidth, baseHeight);

        consumer = $r2;

        $r3 = interfaceinvoke densities.<java.util.List: java.util.stream.Stream stream()>();

        $r4 = interfaceinvoke $r3.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(predicate);

        interfaceinvoke $r4.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>(consumer);

        return bucketMap;
    }

    private static java.util.Map getDensityBucketsWithDpScale(java.util.List, java.awt.Dimension, at.favre.tools.dconvert.arg.Arguments, float) throws java.io.IOException
    {
        java.util.List densities;
        java.awt.Dimension srcDimension;
        at.favre.tools.dconvert.arg.Arguments args;
        float scale, scaleFactor, $f0, $f1, $f2;
        int baseWidth, baseHeight, $i0, $i1;
        java.util.TreeMap bucketMap, $r0;
        at.favre.tools.dconvert.util.MyPredicate predicate, $r1;
        at.favre.tools.dconvert.util.MyConsumer consumer, $r2;
        double $d0, $d1, $d2, $d3;
        java.util.stream.Stream $r3, $r4;

        densities := @parameter0: java.util.List;

        srcDimension := @parameter1: java.awt.Dimension;

        args := @parameter2: at.favre.tools.dconvert.arg.Arguments;

        scale := @parameter3: float;

        $i0 = srcDimension.<java.awt.Dimension: int width>;

        $f0 = (float) $i0;

        scaleFactor = scale / $f0;

        $d0 = (double) scale;

        $d1 = virtualinvoke args.<at.favre.tools.dconvert.arg.Arguments: double round(double)>($d0);

        baseWidth = (int) $d1;

        $i1 = srcDimension.<java.awt.Dimension: int height>;

        $f1 = (float) $i1;

        $f2 = scaleFactor * $f1;

        $d2 = (double) $f2;

        $d3 = virtualinvoke args.<at.favre.tools.dconvert.arg.Arguments: double round(double)>($d2);

        baseHeight = (int) $d3;

        $r0 = new java.util.TreeMap;

        specialinvoke $r0.<java.util.TreeMap: void <init>()>();

        bucketMap = $r0;

        $r1 = new at.favre.tools.dconvert.util.MyPredicate;

        specialinvoke $r1.<at.favre.tools.dconvert.util.MyPredicate: void <init>(at.favre.tools.dconvert.arg.Arguments,int,java.awt.Dimension)>(args, baseWidth, srcDimension);

        predicate = $r1;

        $r2 = new at.favre.tools.dconvert.util.MyConsumer;

        specialinvoke $r2.<at.favre.tools.dconvert.util.MyConsumer: void <init>(java.util.Map,at.favre.tools.dconvert.arg.Arguments,int,int)>(bucketMap, args, baseWidth, baseHeight);

        consumer = $r2;

        $r3 = interfaceinvoke densities.<java.util.List: java.util.stream.Stream stream()>();

        $r4 = interfaceinvoke $r3.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(predicate);

        interfaceinvoke $r4.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>(consumer);

        return bucketMap;
    }


