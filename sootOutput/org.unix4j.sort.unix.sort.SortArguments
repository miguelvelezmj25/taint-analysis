    public void <init>(boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean)
    {
        org.unix4j.sort.unix.sort.SortArguments this;
        boolean isCheck, isMerge, isUnique, isIgnoreLeadingBlanks, isDictionaryOrder, isIgnoreCase, isNumericSort, isGeneralNumericSort, isHumanNumericSort, isMonthSort, isVersionSort, isReverse, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.lang.Boolean $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        this := @this: org.unix4j.sort.unix.sort.SortArguments;

        isCheck := @parameter0: boolean;

        isMerge := @parameter1: boolean;

        isUnique := @parameter2: boolean;

        isIgnoreLeadingBlanks := @parameter3: boolean;

        isDictionaryOrder := @parameter4: boolean;

        isIgnoreCase := @parameter5: boolean;

        isNumericSort := @parameter6: boolean;

        isGeneralNumericSort := @parameter7: boolean;

        isHumanNumericSort := @parameter8: boolean;

        isMonthSort := @parameter9: boolean;

        isVersionSort := @parameter10: boolean;

        isReverse := @parameter11: boolean;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<org.unix4j.sort.unix.sort.SortArguments: boolean pathsIsSet> = 0;

        this.<org.unix4j.sort.unix.sort.SortArguments: boolean filesIsSet> = 0;

        this.<org.unix4j.sort.unix.sort.SortArguments: boolean comparatorIsSet> = 0;

        this.<org.unix4j.sort.unix.sort.SortArguments: boolean argsIsSet> = 0;

        this.<org.unix4j.sort.unix.sort.SortArguments: boolean isCheck> = isCheck;

        this.<org.unix4j.sort.unix.sort.SortArguments: boolean isMerge> = isMerge;

        this.<org.unix4j.sort.unix.sort.SortArguments: boolean isUnique> = isUnique;

        this.<org.unix4j.sort.unix.sort.SortArguments: boolean isIgnoreLeadingBlanks> = isIgnoreLeadingBlanks;

        this.<org.unix4j.sort.unix.sort.SortArguments: boolean isDictionaryOrder> = isDictionaryOrder;

        this.<org.unix4j.sort.unix.sort.SortArguments: boolean isIgnoreCase> = isIgnoreCase;

        this.<org.unix4j.sort.unix.sort.SortArguments: boolean isNumericSort> = isNumericSort;

        this.<org.unix4j.sort.unix.sort.SortArguments: boolean isGeneralNumericSort> = isGeneralNumericSort;

        this.<org.unix4j.sort.unix.sort.SortArguments: boolean isHumanNumericSort> = isHumanNumericSort;

        this.<org.unix4j.sort.unix.sort.SortArguments: boolean isMonthSort> = isMonthSort;

        this.<org.unix4j.sort.unix.sort.SortArguments: boolean isVersionSort> = isVersionSort;

        this.<org.unix4j.sort.unix.sort.SortArguments: boolean isReverse> = isReverse;

        $z0 = this.<org.unix4j.sort.unix.sort.SortArguments: boolean isCheck>;

        $r0 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        $z1 = this.<org.unix4j.sort.unix.sort.SortArguments: boolean isMerge>;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        $z2 = this.<org.unix4j.sort.unix.sort.SortArguments: boolean isUnique>;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        $z3 = this.<org.unix4j.sort.unix.sort.SortArguments: boolean isIgnoreLeadingBlanks>;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r3);

        $z4 = this.<org.unix4j.sort.unix.sort.SortArguments: boolean isDictionaryOrder>;

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        $z5 = this.<org.unix4j.sort.unix.sort.SortArguments: boolean isIgnoreCase>;

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r5);

        $z6 = this.<org.unix4j.sort.unix.sort.SortArguments: boolean isNumericSort>;

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r6);

        $z7 = this.<org.unix4j.sort.unix.sort.SortArguments: boolean isGeneralNumericSort>;

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r7);

        $z8 = this.<org.unix4j.sort.unix.sort.SortArguments: boolean isHumanNumericSort>;

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r8);

        $z9 = this.<org.unix4j.sort.unix.sort.SortArguments: boolean isMonthSort>;

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r9);

        $z10 = this.<org.unix4j.sort.unix.sort.SortArguments: boolean isVersionSort>;

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z10);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r10);

        $z11 = this.<org.unix4j.sort.unix.sort.SortArguments: boolean isReverse>;

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z11);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r11);

        return;
    }

    public transient void setPaths(java.lang.String[])
    {
        org.unix4j.sort.unix.sort.SortArguments this;
        java.lang.String[] paths;

        this := @this: org.unix4j.sort.unix.sort.SortArguments;

        paths := @parameter0: java.lang.String[];

        this.<org.unix4j.sort.unix.sort.SortArguments: java.lang.String[] paths> = paths;

        this.<org.unix4j.sort.unix.sort.SortArguments: boolean pathsIsSet> = 1;

        return;
    }

    public boolean isMerge()
    {
        org.unix4j.sort.unix.sort.SortArguments this;
        boolean $z0;

        this := @this: org.unix4j.sort.unix.sort.SortArguments;

        $z0 = this.<org.unix4j.sort.unix.sort.SortArguments: boolean isMerge>;

        return $z0;
    }

    public boolean isCheck()
    {
        org.unix4j.sort.unix.sort.SortArguments this;
        boolean $z0;

        this := @this: org.unix4j.sort.unix.sort.SortArguments;

        $z0 = this.<org.unix4j.sort.unix.sort.SortArguments: boolean isCheck>;

        return $z0;
    }

    public boolean isUnique()
    {
        org.unix4j.sort.unix.sort.SortArguments this;
        boolean $z0;

        this := @this: org.unix4j.sort.unix.sort.SortArguments;

        $z0 = this.<org.unix4j.sort.unix.sort.SortArguments: boolean isUnique>;

        return $z0;
    }

    public boolean isFilesSet()
    {
        org.unix4j.sort.unix.sort.SortArguments this;
        boolean $z0;

        this := @this: org.unix4j.sort.unix.sort.SortArguments;

        $z0 = this.<org.unix4j.sort.unix.sort.SortArguments: boolean filesIsSet>;

        return $z0;
    }

    public java.io.File[] getFiles()
    {
        org.unix4j.sort.unix.sort.SortArguments this;
        boolean $z0;
        java.io.File[] $r0, $r4;
        java.lang.IllegalStateException $r1;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r6;

        this := @this: org.unix4j.sort.unix.sort.SortArguments;

        $z0 = this.<org.unix4j.sort.unix.sort.SortArguments: boolean filesIsSet>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r0 = this.<org.unix4j.sort.unix.sort.SortArguments: java.io.File[] files>;

        return $r0;

     label1:
        $r1 = new java.lang.IllegalStateException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("operand has not been set: ");

        $r4 = this.<org.unix4j.sort.unix.sort.SortArguments: java.io.File[] files>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r1;
    }

    public boolean isPathsSet()
    {
        org.unix4j.sort.unix.sort.SortArguments this;
        boolean $z0;

        this := @this: org.unix4j.sort.unix.sort.SortArguments;

        $z0 = this.<org.unix4j.sort.unix.sort.SortArguments: boolean pathsIsSet>;

        return $z0;
    }

    public java.lang.String[] getPaths()
    {
        org.unix4j.sort.unix.sort.SortArguments this;
        boolean $z0;
        java.lang.String[] $r0, $r4;
        java.lang.IllegalStateException $r1;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r6;

        this := @this: org.unix4j.sort.unix.sort.SortArguments;

        $z0 = this.<org.unix4j.sort.unix.sort.SortArguments: boolean pathsIsSet>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r0 = this.<org.unix4j.sort.unix.sort.SortArguments: java.lang.String[] paths>;

        return $r0;

     label1:
        $r1 = new java.lang.IllegalStateException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("operand has not been set: ");

        $r4 = this.<org.unix4j.sort.unix.sort.SortArguments: java.lang.String[] paths>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r1;
    }

    public boolean isComparatorSet()
    {
        org.unix4j.sort.unix.sort.SortArguments this;
        boolean $z0;

        this := @this: org.unix4j.sort.unix.sort.SortArguments;

        $z0 = this.<org.unix4j.sort.unix.sort.SortArguments: boolean comparatorIsSet>;

        return $z0;
    }

    public java.util.Comparator getComparator()
    {
        org.unix4j.sort.unix.sort.SortArguments this;
        boolean $z0;
        java.util.Comparator $r0, $r4;
        java.lang.IllegalStateException $r1;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r6;

        this := @this: org.unix4j.sort.unix.sort.SortArguments;

        $z0 = this.<org.unix4j.sort.unix.sort.SortArguments: boolean comparatorIsSet>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r0 = this.<org.unix4j.sort.unix.sort.SortArguments: java.util.Comparator comparator>;

        return $r0;

     label1:
        $r1 = new java.lang.IllegalStateException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("operand has not been set: ");

        $r4 = this.<org.unix4j.sort.unix.sort.SortArguments: java.util.Comparator comparator>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r1;
    }

    public boolean isNumericSort()
    {
        org.unix4j.sort.unix.sort.SortArguments this;
        boolean $z0;

        this := @this: org.unix4j.sort.unix.sort.SortArguments;

        $z0 = this.<org.unix4j.sort.unix.sort.SortArguments: boolean isNumericSort>;

        return $z0;
    }

    public boolean isGeneralNumericSort()
    {
        org.unix4j.sort.unix.sort.SortArguments this;
        boolean $z0;

        this := @this: org.unix4j.sort.unix.sort.SortArguments;

        $z0 = this.<org.unix4j.sort.unix.sort.SortArguments: boolean isGeneralNumericSort>;

        return $z0;
    }

    public boolean isIgnoreLeadingBlanks()
    {
        org.unix4j.sort.unix.sort.SortArguments this;
        boolean $z0;

        this := @this: org.unix4j.sort.unix.sort.SortArguments;

        $z0 = this.<org.unix4j.sort.unix.sort.SortArguments: boolean isIgnoreLeadingBlanks>;

        return $z0;
    }

    public boolean isIgnoreCase()
    {
        org.unix4j.sort.unix.sort.SortArguments this;
        boolean $z0;

        this := @this: org.unix4j.sort.unix.sort.SortArguments;

        $z0 = this.<org.unix4j.sort.unix.sort.SortArguments: boolean isIgnoreCase>;

        return $z0;
    }

    public boolean isReverse()
    {
        org.unix4j.sort.unix.sort.SortArguments this;
        boolean $z0;

        this := @this: org.unix4j.sort.unix.sort.SortArguments;

        $z0 = this.<org.unix4j.sort.unix.sort.SortArguments: boolean isReverse>;

        return $z0;
    }


