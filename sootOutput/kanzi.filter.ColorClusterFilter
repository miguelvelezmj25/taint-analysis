    public boolean apply(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.filter.ColorClusterFilter this;
        kanzi.SliceIntArray input, output;
        kanzi.filter.ColorClusterFilter$Cluster[] cl, $r1;
        int nbClusters, rescaleThreshold, pixel, r, g, b, dx, dy, dr, dg, db, dx, dy, dr, dg, db, scale#7, $i0, scaledW#12, $i1, scaledH#17, $i2, scaledSt#22, $i3, $i4, iterations#34, $i5, $i6, offs#55, moves#57, j#59, kfound#63, i#65, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, minSqDist#130, k#132, $i24, $i25, $i26, $i27, $i28, sqDist#155, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, sqDist#183, $i37, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, j#232, $i51, j#262, $i52, $i53, $i54, $i55, j#281, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66;
        kanzi.filter.ColorClusterFilter$Cluster refCluster, cluster, cluster, c, $r9, $r11, $r12;
        boolean $z0, $z1, $z2, $z3, $z4;
        int[] $r0, buf#42, $r10;
        short[] $r2;
        short $s38;

        this := @this: kanzi.filter.ColorClusterFilter;

        input := @parameter0: kanzi.SliceIntArray;

        output := @parameter1: kanzi.SliceIntArray;

        $z0 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(input);

        if $z0 == 0 goto label01;

        $z1 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(output);

        if $z1 != 0 goto label02;

     label01:
        return 0;

     label02:
        scale#7 = 1;

        $i0 = this.<kanzi.filter.ColorClusterFilter: int width>;

        scaledW#12 = $i0 >> scale#7;

        $i1 = this.<kanzi.filter.ColorClusterFilter: int height>;

        scaledH#17 = $i1 >> scale#7;

        $i2 = this.<kanzi.filter.ColorClusterFilter: int stride>;

        scaledSt#22 = $i2 >> scale#7;

        cl = this.<kanzi.filter.ColorClusterFilter: kanzi.filter.ColorClusterFilter$Cluster[] clusters>;

        nbClusters = lengthof cl;

        $i3 = this.<kanzi.filter.ColorClusterFilter: int maxIterations>;

        $i4 = $i3 * 2;

        rescaleThreshold = $i4 / 3;

        iterations#34 = 0;

        $r0 = input.<kanzi.SliceIntArray: int[] array>;

        $i5 = input.<kanzi.SliceIntArray: int index>;

        buf#42 = specialinvoke this.<kanzi.filter.ColorClusterFilter: int[] createWorkImage(int[],int,int)>($r0, $i5, scale#7);

        $z2 = this.<kanzi.filter.ColorClusterFilter: boolean chooseCentroids>;

        if $z2 != 1 goto label03;

        $r1 = this.<kanzi.filter.ColorClusterFilter: kanzi.filter.ColorClusterFilter$Cluster[] clusters>;

        specialinvoke this.<kanzi.filter.ColorClusterFilter: void chooseCentroids(kanzi.filter.ColorClusterFilter$Cluster[],int[],int,int)>($r1, buf#42, scaledW#12, scaledH#17);

     label03:
        $i6 = this.<kanzi.filter.ColorClusterFilter: int maxIterations>;

        if iterations#34 >= $i6 goto label20;

        offs#55 = 0;

        moves#57 = 0;

        j#59 = 0;

     label04:
        if j#59 >= scaledH#17 goto label12;

        kfound#63 = 0;

        i#65 = 0;

     label05:
        if i#65 >= scaledW#12 goto label11;

        $i7 = offs#55 + i#65;

        pixel = buf#42[$i7];

        $i8 = pixel >> 16;

        r = $i8 & 255;

        $i9 = pixel >> 8;

        g = $i9 & 255;

        b = pixel & 255;

        refCluster = cl[kfound#63];

        $i10 = refCluster.<kanzi.filter.ColorClusterFilter$Cluster: int centroidX>;

        dx = i#65 - $i10;

        $i11 = refCluster.<kanzi.filter.ColorClusterFilter$Cluster: int centroidY>;

        dy = j#59 - $i11;

        $i12 = refCluster.<kanzi.filter.ColorClusterFilter$Cluster: int centroidR>;

        dr = r - $i12;

        $i13 = refCluster.<kanzi.filter.ColorClusterFilter$Cluster: int centroidG>;

        dg = g - $i13;

        $i14 = refCluster.<kanzi.filter.ColorClusterFilter$Cluster: int centroidB>;

        db = b - $i14;

        $i15 = dx * dx;

        $i16 = dy * dy;

        $i17 = $i15 + $i16;

        $i18 = 16 * $i17;

        $i19 = dr * dr;

        $i20 = dg * dg;

        $i21 = $i19 + $i20;

        $i22 = db * db;

        $i23 = $i21 + $i22;

        minSqDist#130 = $i18 + $i23;

        k#132 = 0;

     label06:
        if k#132 >= nbClusters goto label10;

        cluster = cl[k#132];

        $i24 = cluster.<kanzi.filter.ColorClusterFilter$Cluster: int centroidX>;

        dx = i#65 - $i24;

        $i25 = cluster.<kanzi.filter.ColorClusterFilter$Cluster: int centroidY>;

        dy = j#59 - $i25;

        $i26 = dx * dx;

        $i27 = dy * dy;

        $i28 = $i26 + $i27;

        sqDist#155 = 16 * $i28;

        if sqDist#155 < minSqDist#130 goto label07;

        goto label09;

     label07:
        $i29 = cluster.<kanzi.filter.ColorClusterFilter$Cluster: int centroidR>;

        dr = r - $i29;

        $i30 = cluster.<kanzi.filter.ColorClusterFilter$Cluster: int centroidG>;

        dg = g - $i30;

        $i31 = cluster.<kanzi.filter.ColorClusterFilter$Cluster: int centroidB>;

        db = b - $i31;

        $i32 = dr * dr;

        $i33 = dg * dg;

        $i34 = $i32 + $i33;

        $i35 = db * db;

        $i36 = $i34 + $i35;

        sqDist#183 = sqDist#155 + $i36;

        if sqDist#183 < minSqDist#130 goto label08;

        goto label09;

     label08:
        minSqDist#130 = sqDist#183;

        kfound#63 = k#132;

     label09:
        k#132 = k#132 + 1;

        goto label06;

     label10:
        cluster = cl[kfound#63];

        $r2 = this.<kanzi.filter.ColorClusterFilter: short[] labels>;

        $i37 = offs#55 + i#65;

        $s38 = (short) kfound#63;

        $r2[$i37] = $s38;

        $i39 = cluster.<kanzi.filter.ColorClusterFilter$Cluster: int sumR>;

        $i40 = $i39 + r;

        cluster.<kanzi.filter.ColorClusterFilter$Cluster: int sumR> = $i40;

        $i41 = cluster.<kanzi.filter.ColorClusterFilter$Cluster: int sumG>;

        $i42 = $i41 + g;

        cluster.<kanzi.filter.ColorClusterFilter$Cluster: int sumG> = $i42;

        $i43 = cluster.<kanzi.filter.ColorClusterFilter$Cluster: int sumB>;

        $i44 = $i43 + b;

        cluster.<kanzi.filter.ColorClusterFilter$Cluster: int sumB> = $i44;

        $i45 = cluster.<kanzi.filter.ColorClusterFilter$Cluster: int sumX>;

        $i46 = $i45 + i#65;

        cluster.<kanzi.filter.ColorClusterFilter$Cluster: int sumX> = $i46;

        $i47 = cluster.<kanzi.filter.ColorClusterFilter$Cluster: int sumY>;

        $i48 = $i47 + j#59;

        cluster.<kanzi.filter.ColorClusterFilter$Cluster: int sumY> = $i48;

        $i49 = cluster.<kanzi.filter.ColorClusterFilter$Cluster: int items>;

        $i50 = $i49 + 1;

        cluster.<kanzi.filter.ColorClusterFilter$Cluster: int items> = $i50;

        i#65 = i#65 + 1;

        goto label05;

     label11:
        j#59 = j#59 + 1;

        offs#55 = offs#55 + scaledSt#22;

        goto label04;

     label12:
        j#232 = 0;

     label13:
        if j#232 >= nbClusters goto label15;

        $r9 = cl[j#232];

        $z3 = virtualinvoke $r9.<kanzi.filter.ColorClusterFilter$Cluster: boolean computeCentroid()>();

        if $z3 != 1 goto label14;

        moves#57 = moves#57 + 1;

     label14:
        j#232 = j#232 + 1;

        goto label13;

     label15:
        iterations#34 = iterations#34 + 1;

        if scale#7 <= 1 goto label18;

        if iterations#34 == rescaleThreshold goto label16;

        if moves#57 != 0 goto label18;

     label16:
        scale#7 = scale#7 + -1;

        scaledW#12 = scaledW#12 << 1;

        scaledH#17 = scaledH#17 << 1;

        scaledSt#22 = scaledSt#22 << 1;

        $r10 = input.<kanzi.SliceIntArray: int[] array>;

        $i51 = input.<kanzi.SliceIntArray: int index>;

        buf#42 = specialinvoke this.<kanzi.filter.ColorClusterFilter: int[] createWorkImage(int[],int,int)>($r10, $i51, scale#7);

        j#262 = 0;

     label17:
        if j#262 >= nbClusters goto label18;

        $r11 = cl[j#262];

        $i52 = $r11.<kanzi.filter.ColorClusterFilter$Cluster: int centroidX>;

        $i53 = $i52 << 1;

        $r11.<kanzi.filter.ColorClusterFilter$Cluster: int centroidX> = $i53;

        $r12 = cl[j#262];

        $i54 = $r12.<kanzi.filter.ColorClusterFilter$Cluster: int centroidY>;

        $i55 = $i54 << 1;

        $r12.<kanzi.filter.ColorClusterFilter$Cluster: int centroidY> = $i55;

        j#262 = j#262 + 1;

        goto label17;

     label18:
        if moves#57 != 0 goto label19;

        goto label20;

     label19:
        goto label03;

     label20:
        j#281 = 0;

     label21:
        if j#281 >= nbClusters goto label22;

        c = cl[j#281];

        $i56 = c.<kanzi.filter.ColorClusterFilter$Cluster: int centroidR>;

        $i57 = $i56 << 16;

        $i58 = c.<kanzi.filter.ColorClusterFilter$Cluster: int centroidG>;

        $i59 = $i58 << 8;

        $i60 = $i57 | $i59;

        $i61 = c.<kanzi.filter.ColorClusterFilter$Cluster: int centroidB>;

        $i62 = $i60 | $i61;

        c.<kanzi.filter.ColorClusterFilter$Cluster: int centroidValue> = $i62;

        $i63 = c.<kanzi.filter.ColorClusterFilter$Cluster: int centroidX>;

        $i64 = $i63 << 1;

        c.<kanzi.filter.ColorClusterFilter$Cluster: int centroidX> = $i64;

        $i65 = c.<kanzi.filter.ColorClusterFilter$Cluster: int centroidY>;

        $i66 = $i65 << 1;

        c.<kanzi.filter.ColorClusterFilter$Cluster: int centroidY> = $i66;

        j#281 = j#281 + 1;

        goto label21;

     label22:
        $z4 = specialinvoke this.<kanzi.filter.ColorClusterFilter: boolean createFinalImage(kanzi.SliceIntArray,kanzi.SliceIntArray)>(input, output);

        return $z4;
    }

    private int[] createWorkImage(int[], int, int)
    {
        kanzi.filter.ColorClusterFilter this;
        int[] src, buf;
        int srcStart, scale, scaledW, scaledH, st, scaledStride, inc, scale2, adjust, pixel, $i0, $i1, $i2, srcIdx#28, dstIdx#30, j#32, i#36, $i3, idx#44, r#46, g#48, b#50, jj#52, ii#56, $i4, $i5, $i6, $i7, $i8, $i9, $i10, r#91, $i11, g#97, $i12, b#103, $i13, $i14, $i15, $i16, $i17;

        this := @this: kanzi.filter.ColorClusterFilter;

        src := @parameter0: int[];

        srcStart := @parameter1: int;

        scale := @parameter2: int;

        buf = this.<kanzi.filter.ColorClusterFilter: int[] buffer>;

        $i0 = this.<kanzi.filter.ColorClusterFilter: int width>;

        scaledW = $i0 >> scale;

        $i1 = this.<kanzi.filter.ColorClusterFilter: int height>;

        scaledH = $i1 >> scale;

        st = this.<kanzi.filter.ColorClusterFilter: int stride>;

        scaledStride = st << scale;

        inc = 1 << scale;

        scale2 = scale + scale;

        $i2 = scale2 - 1;

        adjust = 1 << $i2;

        srcIdx#28 = srcStart;

        dstIdx#30 = 0;

        j#32 = 0;

     label1:
        if j#32 >= scaledH goto label8;

        i#36 = 0;

     label2:
        if i#36 >= scaledW goto label7;

        $i3 = i#36 << scale;

        idx#44 = srcIdx#28 + $i3;

        r#46 = 0;

        g#48 = 0;

        b#50 = 0;

        jj#52 = 0;

     label3:
        if jj#52 >= inc goto label6;

        ii#56 = 0;

     label4:
        if ii#56 >= inc goto label5;

        $i4 = idx#44 + ii#56;

        pixel = src[$i4];

        $i5 = pixel >> 16;

        $i6 = $i5 & 255;

        r#46 = r#46 + $i6;

        $i7 = pixel >> 8;

        $i8 = $i7 & 255;

        g#48 = g#48 + $i8;

        $i9 = pixel & 255;

        b#50 = b#50 + $i9;

        ii#56 = ii#56 + 1;

        goto label4;

     label5:
        idx#44 = idx#44 + st;

        jj#52 = jj#52 + 1;

        goto label3;

     label6:
        $i10 = r#46 + adjust;

        r#91 = $i10 >> scale2;

        $i11 = g#48 + adjust;

        g#97 = $i11 >> scale2;

        $i12 = b#50 + adjust;

        b#103 = $i12 >> scale2;

        $i13 = dstIdx#30;

        dstIdx#30 = dstIdx#30 + 1;

        $i14 = r#91 << 16;

        $i15 = g#97 << 8;

        $i16 = $i14 | $i15;

        $i17 = $i16 | b#103;

        buf[$i13] = $i17;

        i#36 = i#36 + 1;

        goto label2;

     label7:
        srcIdx#28 = srcIdx#28 + scaledStride;

        j#32 = j#32 + 1;

        goto label1;

     label8:
        return buf;
    }

    private void chooseCentroids(kanzi.filter.ColorClusterFilter$Cluster[], int[], int, int)
    {
        kanzi.filter.ColorClusterFilter this;
        kanzi.filter.ColorClusterFilter$Cluster[] clusters;
        int[] buffer;
        int ww, hh, $i1, $i2, $i3, n#34, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, centroidValue#70, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, centroidValue#112, $i28, $i29, $i30, $i31, $i32;
        java.util.LinkedList nodes, $r0;
        kanzi.util.QuadTreeGenerator qtg, $r1;
        kanzi.util.QuadTreeGenerator$Node node, next;
        java.util.Random rnd, $r4;
        java.lang.Object $r3;
        kanzi.filter.ColorClusterFilter$Cluster c#44, c#94;

        this := @this: kanzi.filter.ColorClusterFilter;

        clusters := @parameter0: kanzi.filter.ColorClusterFilter$Cluster[];

        buffer := @parameter1: int[];

        ww := @parameter2: int;

        hh := @parameter3: int;

        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>()>();

        nodes = $r0;

        $r1 = new kanzi.util.QuadTreeGenerator;

        specialinvoke $r1.<kanzi.util.QuadTreeGenerator: void <init>(int,boolean)>(8, 1);

        qtg = $r1;

        node = staticinvoke <kanzi.util.QuadTreeGenerator: kanzi.util.QuadTreeGenerator$Node getNode(kanzi.util.QuadTreeGenerator$Node,int,int,int,int,boolean)>(null, 0, 0, ww, hh, 1);

        virtualinvoke node.<kanzi.util.QuadTreeGenerator$Node: int computeVariance(int[],int)>(buffer, ww);

        virtualinvoke nodes.<java.util.LinkedList: boolean add(java.lang.Object)>(node);

        $i1 = lengthof clusters;

        $i2 = ww & -4;

        virtualinvoke qtg.<kanzi.util.QuadTreeGenerator: java.util.Collection decomposeNodes(java.util.Collection,int[],int,int)>(nodes, buffer, $i1, $i2);

        $i3 = lengthof clusters;

        n#34 = $i3 - 1;

     label1:
        if n#34 < 0 goto label2;

        $i4 = virtualinvoke nodes.<java.util.LinkedList: int size()>();

        if $i4 <= 0 goto label2;

        $r3 = virtualinvoke nodes.<java.util.LinkedList: java.lang.Object removeFirst()>();

        next = (kanzi.util.QuadTreeGenerator$Node) $r3;

        c#44 = clusters[n#34];

        $i5 = next.<kanzi.util.QuadTreeGenerator$Node: int x>;

        $i6 = next.<kanzi.util.QuadTreeGenerator$Node: int w>;

        $i7 = $i6 >> 1;

        $i8 = $i5 + $i7;

        c#44.<kanzi.filter.ColorClusterFilter$Cluster: int centroidX> = $i8;

        $i9 = next.<kanzi.util.QuadTreeGenerator$Node: int y>;

        $i10 = next.<kanzi.util.QuadTreeGenerator$Node: int h>;

        $i11 = $i10 >> 1;

        $i12 = $i9 + $i11;

        c#44.<kanzi.filter.ColorClusterFilter$Cluster: int centroidY> = $i12;

        $i13 = c#44.<kanzi.filter.ColorClusterFilter$Cluster: int centroidY>;

        $i14 = $i13 * ww;

        $i15 = c#44.<kanzi.filter.ColorClusterFilter$Cluster: int centroidX>;

        $i16 = $i14 + $i15;

        centroidValue#70 = buffer[$i16];

        $i17 = centroidValue#70 >> 16;

        $i18 = $i17 & 255;

        c#44.<kanzi.filter.ColorClusterFilter$Cluster: int centroidR> = $i18;

        $i19 = centroidValue#70 >> 8;

        $i20 = $i19 & 255;

        c#44.<kanzi.filter.ColorClusterFilter$Cluster: int centroidG> = $i20;

        $i21 = centroidValue#70 & 255;

        c#44.<kanzi.filter.ColorClusterFilter$Cluster: int centroidB> = $i21;

        n#34 = n#34 + -1;

        goto label1;

     label2:
        if n#34 < 0 goto label4;

        $r4 = new java.util.Random;

        specialinvoke $r4.<java.util.Random: void <init>()>();

        rnd = $r4;

     label3:
        if n#34 < 0 goto label4;

        c#94 = clusters[n#34];

        $i22 = virtualinvoke rnd.<java.util.Random: int nextInt(int)>(ww);

        c#94.<kanzi.filter.ColorClusterFilter$Cluster: int centroidX> = $i22;

        $i23 = virtualinvoke rnd.<java.util.Random: int nextInt(int)>(hh);

        c#94.<kanzi.filter.ColorClusterFilter$Cluster: int centroidY> = $i23;

        $i24 = c#94.<kanzi.filter.ColorClusterFilter$Cluster: int centroidY>;

        $i25 = $i24 * ww;

        $i26 = c#94.<kanzi.filter.ColorClusterFilter$Cluster: int centroidX>;

        $i27 = $i25 + $i26;

        centroidValue#112 = buffer[$i27];

        $i28 = centroidValue#112 >> 16;

        $i29 = $i28 & 255;

        c#94.<kanzi.filter.ColorClusterFilter$Cluster: int centroidR> = $i29;

        $i30 = centroidValue#112 >> 8;

        $i31 = $i30 & 255;

        c#94.<kanzi.filter.ColorClusterFilter$Cluster: int centroidG> = $i31;

        $i32 = centroidValue#112 & 255;

        c#94.<kanzi.filter.ColorClusterFilter$Cluster: int centroidB> = $i32;

        n#34 = n#34 + -1;

        goto label3;

     label4:
        return;
    }

    private boolean createFinalImage(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.filter.ColorClusterFilter this;
        kanzi.SliceIntArray source, destination;
        int[] src, dst;
        int srcStart, dstStart, scaledW, scaledH, st, scaledSt, srcIdx, dstIdx, iOffs, oOffs, pixel0, c0r, c0g, c0b, c0x, c0y, d3, d2, d1, $i0, $i1, $i2, offs#31, nlOffs#33, $i3, j#38, $i4, $i5, $i7, $i8, $i10, $i11, i#72, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, pixel#151, $i27, r#157, $i28, g#163, b#167, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, d0#217, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, pixel#311, $i93, r#317, $i94, g#323, b#327, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, d0#373, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, pixel#461, $i154, r#467, $i155, g#473, b#477, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, d0#521, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i208;
        kanzi.filter.ColorClusterFilter$Cluster[] cl;
        short[] labels_;
        short cluster0Idx, cluster2Idx, $s6, $s9;
        kanzi.filter.ColorClusterFilter$Cluster c0, c2, c1#49, c3#59;
        boolean $z0, $z1, $z2;

        this := @this: kanzi.filter.ColorClusterFilter;

        source := @parameter0: kanzi.SliceIntArray;

        destination := @parameter1: kanzi.SliceIntArray;

        src = source.<kanzi.SliceIntArray: int[] array>;

        dst = destination.<kanzi.SliceIntArray: int[] array>;

        srcStart = source.<kanzi.SliceIntArray: int index>;

        dstStart = destination.<kanzi.SliceIntArray: int index>;

        cl = this.<kanzi.filter.ColorClusterFilter: kanzi.filter.ColorClusterFilter$Cluster[] clusters>;

        labels_ = this.<kanzi.filter.ColorClusterFilter: short[] labels>;

        $i0 = this.<kanzi.filter.ColorClusterFilter: int width>;

        scaledW = $i0 >> 1;

        $i1 = this.<kanzi.filter.ColorClusterFilter: int height>;

        scaledH = $i1 >> 1;

        st = this.<kanzi.filter.ColorClusterFilter: int stride>;

        scaledSt = st >> 1;

        $i2 = scaledH - 1;

        offs#31 = $i2 * scaledSt;

        nlOffs#33 = offs#31;

        $i3 = this.<kanzi.filter.ColorClusterFilter: int height>;

        j#38 = $i3 - 2;

     label01:
        if j#38 < 0 goto label19;

        $i4 = offs#31 + scaledW;

        $i5 = $i4 - 1;

        $s6 = labels_[$i5];

        c1#49 = cl[$s6];

        $i7 = nlOffs#33 + scaledW;

        $i8 = $i7 - 1;

        $s9 = labels_[$i8];

        c3#59 = cl[$s9];

        srcIdx = srcStart + offs#31;

        $i10 = j#38 * st;

        dstIdx = dstStart + $i10;

        $i11 = this.<kanzi.filter.ColorClusterFilter: int width>;

        i#72 = $i11 - 2;

     label02:
        if i#72 < 0 goto label18;

        $i12 = i#72 >> 1;

        iOffs = srcIdx + $i12;

        oOffs = dstIdx + i#72;

        $i13 = i#72 >> 1;

        $i14 = offs#31 + $i13;

        cluster0Idx = labels_[$i14];

        c0 = cl[cluster0Idx];

        pixel0 = c0.<kanzi.filter.ColorClusterFilter$Cluster: int centroidValue>;

        c0r = c0.<kanzi.filter.ColorClusterFilter$Cluster: int centroidR>;

        c0g = c0.<kanzi.filter.ColorClusterFilter$Cluster: int centroidG>;

        c0b = c0.<kanzi.filter.ColorClusterFilter$Cluster: int centroidB>;

        c0x = c0.<kanzi.filter.ColorClusterFilter$Cluster: int centroidX>;

        c0y = c0.<kanzi.filter.ColorClusterFilter$Cluster: int centroidY>;

        $i15 = i#72 >> 1;

        $i16 = nlOffs#33 + $i15;

        cluster2Idx = labels_[$i16];

        c2 = cl[cluster2Idx];

        $i17 = src[oOffs];

        dst[oOffs] = $i17;

        if c0 != c3#59 goto label03;

        $i18 = oOffs + st;

        $i19 = $i18 + 1;

        $i20 = oOffs + st;

        $i21 = $i20 + 1;

        $i22 = src[$i21];

        dst[$i19] = $i22;

        goto label07;

     label03:
        $z0 = this.<kanzi.filter.ColorClusterFilter: boolean showBorders>;

        if $z0 != 1 goto label04;

        $i23 = oOffs + st;

        $i24 = $i23 + 1;

        dst[$i24] = -1;

        goto label07;

     label04:
        $i25 = iOffs + st;

        $i26 = $i25 + 1;

        pixel#151 = src[$i26];

        $i27 = pixel#151 >> 16;

        r#157 = $i27 & 255;

        $i28 = pixel#151 >> 8;

        g#163 = $i28 & 255;

        b#167 = pixel#151 & 255;

        $i29 = i#72 + 1;

        $i30 = $i29 - c0x;

        $i31 = i#72 + 1;

        $i32 = $i31 - c0x;

        $i33 = $i30 * $i32;

        $i34 = j#38 + 1;

        $i35 = $i34 - c0y;

        $i36 = j#38 + 1;

        $i37 = $i36 - c0y;

        $i38 = $i35 * $i37;

        $i39 = $i33 + $i38;

        $i40 = 16 * $i39;

        $i41 = r#157 - c0r;

        $i42 = r#157 - c0r;

        $i43 = $i41 * $i42;

        $i44 = $i40 + $i43;

        $i45 = g#163 - c0g;

        $i46 = g#163 - c0g;

        $i47 = $i45 * $i46;

        $i48 = $i44 + $i47;

        $i49 = b#167 - c0b;

        $i50 = b#167 - c0b;

        $i51 = $i49 * $i50;

        d0#217 = $i48 + $i51;

        $i52 = i#72 + 1;

        $i53 = c3#59.<kanzi.filter.ColorClusterFilter$Cluster: int centroidX>;

        $i54 = $i52 - $i53;

        $i55 = i#72 + 1;

        $i56 = c3#59.<kanzi.filter.ColorClusterFilter$Cluster: int centroidX>;

        $i57 = $i55 - $i56;

        $i58 = $i54 * $i57;

        $i59 = j#38 + 1;

        $i60 = c3#59.<kanzi.filter.ColorClusterFilter$Cluster: int centroidY>;

        $i61 = $i59 - $i60;

        $i62 = j#38 + 1;

        $i63 = c3#59.<kanzi.filter.ColorClusterFilter$Cluster: int centroidY>;

        $i64 = $i62 - $i63;

        $i65 = $i61 * $i64;

        $i66 = $i58 + $i65;

        $i67 = 16 * $i66;

        $i68 = c3#59.<kanzi.filter.ColorClusterFilter$Cluster: int centroidR>;

        $i69 = r#157 - $i68;

        $i70 = c3#59.<kanzi.filter.ColorClusterFilter$Cluster: int centroidR>;

        $i71 = r#157 - $i70;

        $i72 = $i69 * $i71;

        $i73 = $i67 + $i72;

        $i74 = c3#59.<kanzi.filter.ColorClusterFilter$Cluster: int centroidG>;

        $i75 = g#163 - $i74;

        $i76 = c3#59.<kanzi.filter.ColorClusterFilter$Cluster: int centroidG>;

        $i77 = g#163 - $i76;

        $i78 = $i75 * $i77;

        $i79 = $i73 + $i78;

        $i80 = c3#59.<kanzi.filter.ColorClusterFilter$Cluster: int centroidB>;

        $i81 = b#167 - $i80;

        $i82 = c3#59.<kanzi.filter.ColorClusterFilter$Cluster: int centroidB>;

        $i83 = b#167 - $i82;

        $i84 = $i81 * $i83;

        d3 = $i79 + $i84;

        $i85 = oOffs + st;

        $i86 = $i85 + 1;

        if d0#217 >= d3 goto label05;

        $i87 = pixel0;

        goto label06;

     label05:
        $i87 = c3#59.<kanzi.filter.ColorClusterFilter$Cluster: int centroidValue>;

     label06:
        dst[$i86] = $i87;

     label07:
        if c0 != c2 goto label08;

        $i88 = oOffs + st;

        $i89 = oOffs + st;

        $i90 = src[$i89];

        dst[$i88] = $i90;

        goto label12;

     label08:
        $z1 = this.<kanzi.filter.ColorClusterFilter: boolean showBorders>;

        if $z1 != 1 goto label09;

        $i91 = oOffs + st;

        dst[$i91] = -1;

        goto label12;

     label09:
        $i92 = iOffs + st;

        pixel#311 = src[$i92];

        $i93 = pixel#311 >> 16;

        r#317 = $i93 & 255;

        $i94 = pixel#311 >> 8;

        g#323 = $i94 & 255;

        b#327 = pixel#311 & 255;

        $i95 = i#72 - c0x;

        $i96 = i#72 - c0x;

        $i97 = $i95 * $i96;

        $i98 = j#38 + 1;

        $i99 = $i98 - c0y;

        $i100 = j#38 + 1;

        $i101 = $i100 - c0y;

        $i102 = $i99 * $i101;

        $i103 = $i97 + $i102;

        $i104 = 16 * $i103;

        $i105 = r#317 - c0r;

        $i106 = r#317 - c0r;

        $i107 = $i105 * $i106;

        $i108 = $i104 + $i107;

        $i109 = g#323 - c0g;

        $i110 = g#323 - c0g;

        $i111 = $i109 * $i110;

        $i112 = $i108 + $i111;

        $i113 = b#327 - c0b;

        $i114 = b#327 - c0b;

        $i115 = $i113 * $i114;

        d0#373 = $i112 + $i115;

        $i116 = c2.<kanzi.filter.ColorClusterFilter$Cluster: int centroidX>;

        $i117 = i#72 - $i116;

        $i118 = c2.<kanzi.filter.ColorClusterFilter$Cluster: int centroidX>;

        $i119 = i#72 - $i118;

        $i120 = $i117 * $i119;

        $i121 = j#38 + 1;

        $i122 = c2.<kanzi.filter.ColorClusterFilter$Cluster: int centroidY>;

        $i123 = $i121 - $i122;

        $i124 = j#38 + 1;

        $i125 = c2.<kanzi.filter.ColorClusterFilter$Cluster: int centroidY>;

        $i126 = $i124 - $i125;

        $i127 = $i123 * $i126;

        $i128 = $i120 + $i127;

        $i129 = 16 * $i128;

        $i130 = c2.<kanzi.filter.ColorClusterFilter$Cluster: int centroidR>;

        $i131 = r#317 - $i130;

        $i132 = c2.<kanzi.filter.ColorClusterFilter$Cluster: int centroidR>;

        $i133 = r#317 - $i132;

        $i134 = $i131 * $i133;

        $i135 = $i129 + $i134;

        $i136 = c2.<kanzi.filter.ColorClusterFilter$Cluster: int centroidG>;

        $i137 = g#323 - $i136;

        $i138 = c2.<kanzi.filter.ColorClusterFilter$Cluster: int centroidG>;

        $i139 = g#323 - $i138;

        $i140 = $i137 * $i139;

        $i141 = $i135 + $i140;

        $i142 = c2.<kanzi.filter.ColorClusterFilter$Cluster: int centroidB>;

        $i143 = b#327 - $i142;

        $i144 = c2.<kanzi.filter.ColorClusterFilter$Cluster: int centroidB>;

        $i145 = b#327 - $i144;

        $i146 = $i143 * $i145;

        d2 = $i141 + $i146;

        $i147 = oOffs + st;

        if d0#373 >= d2 goto label10;

        $i148 = pixel0;

        goto label11;

     label10:
        $i148 = c2.<kanzi.filter.ColorClusterFilter$Cluster: int centroidValue>;

     label11:
        dst[$i147] = $i148;

     label12:
        if c0 != c1#49 goto label13;

        $i149 = oOffs + 1;

        $i150 = oOffs + 1;

        $i151 = src[$i150];

        dst[$i149] = $i151;

        goto label17;

     label13:
        $z2 = this.<kanzi.filter.ColorClusterFilter: boolean showBorders>;

        if $z2 != 1 goto label14;

        $i152 = oOffs + 1;

        dst[$i152] = -1;

        goto label17;

     label14:
        $i153 = iOffs + 1;

        pixel#461 = src[$i153];

        $i154 = pixel#461 >> 16;

        r#467 = $i154 & 255;

        $i155 = pixel#461 >> 8;

        g#473 = $i155 & 255;

        b#477 = pixel#461 & 255;

        $i156 = i#72 + 1;

        $i157 = $i156 - c0x;

        $i158 = i#72 + 1;

        $i159 = $i158 - c0x;

        $i160 = $i157 * $i159;

        $i161 = j#38 - c0y;

        $i162 = j#38 - c0y;

        $i163 = $i161 * $i162;

        $i164 = $i160 + $i163;

        $i165 = r#467 - c0r;

        $i166 = r#467 - c0r;

        $i167 = $i165 * $i166;

        $i168 = $i164 + $i167;

        $i169 = g#473 - c0g;

        $i170 = g#473 - c0g;

        $i171 = $i169 * $i170;

        $i172 = $i168 + $i171;

        $i173 = b#477 - c0b;

        $i174 = b#477 - c0b;

        $i175 = $i173 * $i174;

        d0#521 = $i172 + $i175;

        $i176 = i#72 + 1;

        $i177 = c1#49.<kanzi.filter.ColorClusterFilter$Cluster: int centroidX>;

        $i178 = $i176 - $i177;

        $i179 = i#72 + 1;

        $i180 = c1#49.<kanzi.filter.ColorClusterFilter$Cluster: int centroidX>;

        $i181 = $i179 - $i180;

        $i182 = $i178 * $i181;

        $i183 = c1#49.<kanzi.filter.ColorClusterFilter$Cluster: int centroidY>;

        $i184 = j#38 - $i183;

        $i185 = c1#49.<kanzi.filter.ColorClusterFilter$Cluster: int centroidY>;

        $i186 = j#38 - $i185;

        $i187 = $i184 * $i186;

        $i188 = $i182 + $i187;

        $i189 = 16 * $i188;

        $i190 = c1#49.<kanzi.filter.ColorClusterFilter$Cluster: int centroidR>;

        $i191 = r#467 - $i190;

        $i192 = c1#49.<kanzi.filter.ColorClusterFilter$Cluster: int centroidR>;

        $i193 = r#467 - $i192;

        $i194 = $i191 * $i193;

        $i195 = c1#49.<kanzi.filter.ColorClusterFilter$Cluster: int centroidG>;

        $i196 = g#473 - $i195;

        $i197 = c1#49.<kanzi.filter.ColorClusterFilter$Cluster: int centroidG>;

        $i198 = g#473 - $i197;

        $i199 = $i196 * $i198;

        $i200 = $i194 + $i199;

        $i201 = c1#49.<kanzi.filter.ColorClusterFilter$Cluster: int centroidB>;

        $i202 = b#477 - $i201;

        $i203 = c1#49.<kanzi.filter.ColorClusterFilter$Cluster: int centroidB>;

        $i204 = b#477 - $i203;

        $i205 = $i202 * $i204;

        $i206 = $i200 + $i205;

        d1 = $i189 + $i206;

        $i207 = oOffs + 1;

        if d0#521 >= d1 goto label15;

        $i208 = pixel0;

        goto label16;

     label15:
        $i208 = c1#49.<kanzi.filter.ColorClusterFilter$Cluster: int centroidValue>;

     label16:
        dst[$i207] = $i208;

     label17:
        c1#49 = c0;

        c3#59 = c2;

        i#72 = i#72 + -2;

        goto label02;

     label18:
        nlOffs#33 = offs#31;

        offs#31 = offs#31 - scaledSt;

        j#38 = j#38 + -2;

        goto label01;

     label19:
        return 1;
    }


