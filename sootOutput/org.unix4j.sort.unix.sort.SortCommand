    public void <init>(org.unix4j.sort.unix.sort.SortArguments)
    {
        org.unix4j.sort.unix.sort.SortCommand this;
        org.unix4j.sort.unix.sort.SortArguments arguments;

        this := @this: org.unix4j.sort.unix.sort.SortCommand;

        arguments := @parameter0: org.unix4j.sort.unix.sort.SortArguments;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<org.unix4j.sort.unix.sort.SortCommand: org.unix4j.sort.unix.sort.SortArguments arguments> = arguments;

        return;
    }

    public org.unix4j.sort.processor.LineProcessor execute(org.unix4j.sort.context.ExecutionContext, org.unix4j.sort.processor.LineProcessor)
    {
        org.unix4j.sort.unix.sort.SortCommand this;
        org.unix4j.sort.context.ExecutionContext context;
        org.unix4j.sort.processor.LineProcessor output, $r0, $r1, $r2;
        org.unix4j.sort.unix.sort.SortArguments args;
        boolean $z0, $z1;

        this := @this: org.unix4j.sort.unix.sort.SortCommand;

        context := @parameter0: org.unix4j.sort.context.ExecutionContext;

        output := @parameter1: org.unix4j.sort.processor.LineProcessor;

        args = this.<org.unix4j.sort.unix.sort.SortCommand: org.unix4j.sort.unix.sort.SortArguments arguments>;

        $z0 = virtualinvoke args.<org.unix4j.sort.unix.sort.SortArguments: boolean isMerge()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r0 = specialinvoke this.<org.unix4j.sort.unix.sort.SortCommand: org.unix4j.sort.processor.LineProcessor getMergeProcessor(org.unix4j.sort.context.ExecutionContext,org.unix4j.sort.processor.LineProcessor,org.unix4j.sort.unix.sort.SortArguments)>(context, output, args);

        return $r0;

     label1:
        $z1 = virtualinvoke args.<org.unix4j.sort.unix.sort.SortArguments: boolean isCheck()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        $r1 = specialinvoke this.<org.unix4j.sort.unix.sort.SortCommand: org.unix4j.sort.processor.LineProcessor getCheckProcessor(org.unix4j.sort.context.ExecutionContext,org.unix4j.sort.processor.LineProcessor,org.unix4j.sort.unix.sort.SortArguments)>(context, output, args);

        return $r1;

     label2:
        $r2 = specialinvoke this.<org.unix4j.sort.unix.sort.SortCommand: org.unix4j.sort.processor.LineProcessor getSortProcessor(org.unix4j.sort.context.ExecutionContext,org.unix4j.sort.processor.LineProcessor,org.unix4j.sort.unix.sort.SortArguments)>(context, output, args);

        return $r2;
    }

    private org.unix4j.sort.processor.LineProcessor getMergeProcessor(org.unix4j.sort.context.ExecutionContext, org.unix4j.sort.processor.LineProcessor, org.unix4j.sort.unix.sort.SortArguments)
    {
        org.unix4j.sort.unix.sort.SortCommand this;
        org.unix4j.sort.context.ExecutionContext context;
        org.unix4j.sort.processor.LineProcessor output;
        org.unix4j.sort.unix.sort.SortArguments args, $r2, $r6, $r8;
        java.util.List inputs, files, inputs, empty;
        boolean $z0, $z1;
        java.io.File[] $r0;
        org.unix4j.sort.unix.sort.MergeProcessor $r1, $r5, $r7;
        java.io.File $r3;
        java.lang.String[] $r4;

        this := @this: org.unix4j.sort.unix.sort.SortCommand;

        context := @parameter0: org.unix4j.sort.context.ExecutionContext;

        output := @parameter1: org.unix4j.sort.processor.LineProcessor;

        args := @parameter2: org.unix4j.sort.unix.sort.SortArguments;

        $z0 = virtualinvoke args.<org.unix4j.sort.unix.sort.SortArguments: boolean isFilesSet()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r0 = virtualinvoke args.<org.unix4j.sort.unix.sort.SortArguments: java.io.File[] getFiles()>();

        inputs = staticinvoke <org.unix4j.sort.io.FileInput: java.util.List multiple(java.io.File[])>($r0);

        $r1 = new org.unix4j.sort.unix.sort.MergeProcessor;

        $r2 = this.<org.unix4j.sort.unix.sort.SortCommand: org.unix4j.sort.unix.sort.SortArguments arguments>;

        specialinvoke $r1.<org.unix4j.sort.unix.sort.MergeProcessor: void <init>(org.unix4j.sort.context.ExecutionContext,org.unix4j.sort.processor.LineProcessor,java.util.List,org.unix4j.sort.unix.sort.SortArguments)>(context, output, inputs, $r2);

        return $r1;

     label1:
        $z1 = virtualinvoke args.<org.unix4j.sort.unix.sort.SortArguments: boolean isPathsSet()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        $r3 = interfaceinvoke context.<org.unix4j.sort.context.ExecutionContext: java.io.File getCurrentDirectory()>();

        $r4 = virtualinvoke args.<org.unix4j.sort.unix.sort.SortArguments: java.lang.String[] getPaths()>();

        files = staticinvoke <org.unix4j.sort.util.FileUtil: java.util.List expandFiles(java.io.File,java.lang.String[])>($r3, $r4);

        inputs = staticinvoke <org.unix4j.sort.io.FileInput: java.util.List multiple(java.util.List)>(files);

        $r5 = new org.unix4j.sort.unix.sort.MergeProcessor;

        $r6 = this.<org.unix4j.sort.unix.sort.SortCommand: org.unix4j.sort.unix.sort.SortArguments arguments>;

        specialinvoke $r5.<org.unix4j.sort.unix.sort.MergeProcessor: void <init>(org.unix4j.sort.context.ExecutionContext,org.unix4j.sort.processor.LineProcessor,java.util.List,org.unix4j.sort.unix.sort.SortArguments)>(context, output, inputs, $r6);

        return $r5;

     label2:
        empty = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r7 = new org.unix4j.sort.unix.sort.MergeProcessor;

        $r8 = this.<org.unix4j.sort.unix.sort.SortCommand: org.unix4j.sort.unix.sort.SortArguments arguments>;

        specialinvoke $r7.<org.unix4j.sort.unix.sort.MergeProcessor: void <init>(org.unix4j.sort.context.ExecutionContext,org.unix4j.sort.processor.LineProcessor,java.util.List,org.unix4j.sort.unix.sort.SortArguments)>(context, output, empty, $r8);

        return $r7;
    }

    private org.unix4j.sort.processor.LineProcessor getCheckProcessor(org.unix4j.sort.context.ExecutionContext, org.unix4j.sort.processor.LineProcessor, org.unix4j.sort.unix.sort.SortArguments)
    {
        org.unix4j.sort.unix.sort.SortCommand this;
        org.unix4j.sort.context.ExecutionContext context;
        org.unix4j.sort.processor.LineProcessor output;
        org.unix4j.sort.unix.sort.SortArguments args, $r1;
        org.unix4j.sort.unix.sort.CheckProcessor standardInputProcessor, $r0;
        java.util.List files, inputs#8;
        org.unix4j.sort.unix.sort.SortCommand$1 resetPerFileProcessor, $r6;
        boolean $z0, $z1;
        java.io.File[] $r2;
        java.io.File $r3;
        java.lang.String[] $r4;
        int $i0;
        org.unix4j.sort.processor.RedirectInputLineProcessor $r5;
        org.unix4j.sort.processor.MultipleInputLineProcessor $r7;

        this := @this: org.unix4j.sort.unix.sort.SortCommand;

        context := @parameter0: org.unix4j.sort.context.ExecutionContext;

        output := @parameter1: org.unix4j.sort.processor.LineProcessor;

        args := @parameter2: org.unix4j.sort.unix.sort.SortArguments;

        $r0 = new org.unix4j.sort.unix.sort.CheckProcessor;

        $r1 = this.<org.unix4j.sort.unix.sort.SortCommand: org.unix4j.sort.unix.sort.SortArguments arguments>;

        specialinvoke $r0.<org.unix4j.sort.unix.sort.CheckProcessor: void <init>(org.unix4j.sort.context.ExecutionContext,org.unix4j.sort.processor.LineProcessor,org.unix4j.sort.unix.sort.SortArguments)>(context, output, $r1);

        standardInputProcessor = $r0;

        inputs#8 = null;

        $z0 = virtualinvoke args.<org.unix4j.sort.unix.sort.SortArguments: boolean isFilesSet()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke args.<org.unix4j.sort.unix.sort.SortArguments: java.io.File[] getFiles()>();

        inputs#8 = staticinvoke <org.unix4j.sort.io.FileInput: java.util.List multiple(java.io.File[])>($r2);

        goto label2;

     label1:
        $z1 = virtualinvoke args.<org.unix4j.sort.unix.sort.SortArguments: boolean isPathsSet()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        $r3 = interfaceinvoke context.<org.unix4j.sort.context.ExecutionContext: java.io.File getCurrentDirectory()>();

        $r4 = virtualinvoke args.<org.unix4j.sort.unix.sort.SortArguments: java.lang.String[] getPaths()>();

        files = staticinvoke <org.unix4j.sort.util.FileUtil: java.util.List expandFiles(java.io.File,java.lang.String[])>($r3, $r4);

        inputs#8 = staticinvoke <org.unix4j.sort.io.FileInput: java.util.List multiple(java.util.List)>(files);

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(inputs#8);

        if inputs#8 == null goto label4;

        $i0 = interfaceinvoke inputs#8.<java.util.List: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 >= 2 goto label3;

        $r5 = new org.unix4j.sort.processor.RedirectInputLineProcessor;

        specialinvoke $r5.<org.unix4j.sort.processor.RedirectInputLineProcessor: void <init>(java.util.List,org.unix4j.sort.processor.LineProcessor)>(inputs#8, standardInputProcessor);

        return $r5;

     label3:
        $r6 = new org.unix4j.sort.unix.sort.SortCommand$1;

        specialinvoke $r6.<org.unix4j.sort.unix.sort.SortCommand$1: void <init>(org.unix4j.sort.unix.sort.SortCommand,org.unix4j.sort.unix.sort.CheckProcessor)>(this, standardInputProcessor);

        resetPerFileProcessor = $r6;

        $r7 = new org.unix4j.sort.processor.MultipleInputLineProcessor;

        specialinvoke $r7.<org.unix4j.sort.processor.MultipleInputLineProcessor: void <init>(java.util.List,org.unix4j.sort.processor.InputProcessor,org.unix4j.sort.processor.LineProcessor)>(inputs#8, resetPerFileProcessor, standardInputProcessor);

        return $r7;

     label4:
        return standardInputProcessor;
    }

    private org.unix4j.sort.processor.LineProcessor getSortProcessor(org.unix4j.sort.context.ExecutionContext, org.unix4j.sort.processor.LineProcessor, org.unix4j.sort.unix.sort.SortArguments)
    {
        org.unix4j.sort.unix.sort.SortCommand this;
        org.unix4j.sort.context.ExecutionContext context;
        org.unix4j.sort.processor.LineProcessor output;
        org.unix4j.sort.unix.sort.SortArguments args, $r1, $r3;
        java.util.List inputs, files, inputs;
        boolean $z0, $z1, $z2;
        org.unix4j.sort.unix.sort.UniqueSortProcessor $r0;
        org.unix4j.sort.unix.sort.AbstractSortProcessor standardInputProcessor#9;
        org.unix4j.sort.unix.sort.SortProcessor $r2;
        java.io.File[] $r4;
        org.unix4j.sort.processor.RedirectInputLineProcessor $r5, $r8;
        java.io.File $r6;
        java.lang.String[] $r7;

        this := @this: org.unix4j.sort.unix.sort.SortCommand;

        context := @parameter0: org.unix4j.sort.context.ExecutionContext;

        output := @parameter1: org.unix4j.sort.processor.LineProcessor;

        args := @parameter2: org.unix4j.sort.unix.sort.SortArguments;

        $z0 = virtualinvoke args.<org.unix4j.sort.unix.sort.SortArguments: boolean isUnique()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r0 = new org.unix4j.sort.unix.sort.UniqueSortProcessor;

        $r1 = this.<org.unix4j.sort.unix.sort.SortCommand: org.unix4j.sort.unix.sort.SortArguments arguments>;

        specialinvoke $r0.<org.unix4j.sort.unix.sort.UniqueSortProcessor: void <init>(org.unix4j.sort.context.ExecutionContext,org.unix4j.sort.processor.LineProcessor,org.unix4j.sort.unix.sort.SortArguments)>(context, output, $r1);

        standardInputProcessor#9 = $r0;

        goto label2;

     label1:
        $r2 = new org.unix4j.sort.unix.sort.SortProcessor;

        $r3 = this.<org.unix4j.sort.unix.sort.SortCommand: org.unix4j.sort.unix.sort.SortArguments arguments>;

        specialinvoke $r2.<org.unix4j.sort.unix.sort.SortProcessor: void <init>(org.unix4j.sort.context.ExecutionContext,org.unix4j.sort.processor.LineProcessor,org.unix4j.sort.unix.sort.SortArguments)>(context, output, $r3);

        standardInputProcessor#9 = $r2;

     label2:
        $z1 = virtualinvoke args.<org.unix4j.sort.unix.sort.SortArguments: boolean isFilesSet()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label3;

        $r4 = virtualinvoke args.<org.unix4j.sort.unix.sort.SortArguments: java.io.File[] getFiles()>();

        inputs = staticinvoke <org.unix4j.sort.io.FileInput: java.util.List multiple(java.io.File[])>($r4);

        $r5 = new org.unix4j.sort.processor.RedirectInputLineProcessor;

        specialinvoke $r5.<org.unix4j.sort.processor.RedirectInputLineProcessor: void <init>(java.util.List,org.unix4j.sort.processor.LineProcessor)>(inputs, standardInputProcessor#9);

        return $r5;

     label3:
        $z2 = virtualinvoke args.<org.unix4j.sort.unix.sort.SortArguments: boolean isPathsSet()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label4;

        $r6 = interfaceinvoke context.<org.unix4j.sort.context.ExecutionContext: java.io.File getCurrentDirectory()>();

        $r7 = virtualinvoke args.<org.unix4j.sort.unix.sort.SortArguments: java.lang.String[] getPaths()>();

        files = staticinvoke <org.unix4j.sort.util.FileUtil: java.util.List expandFiles(java.io.File,java.lang.String[])>($r6, $r7);

        inputs = staticinvoke <org.unix4j.sort.io.FileInput: java.util.List multiple(java.util.List)>(files);

        $r8 = new org.unix4j.sort.processor.RedirectInputLineProcessor;

        specialinvoke $r8.<org.unix4j.sort.processor.RedirectInputLineProcessor: void <init>(java.util.List,org.unix4j.sort.processor.LineProcessor)>(inputs, standardInputProcessor#9);

        return $r8;

     label4:
        return standardInputProcessor#9;
    }


