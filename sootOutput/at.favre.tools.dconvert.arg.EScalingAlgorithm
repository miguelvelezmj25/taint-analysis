    static void <clinit>()
    {
        at.favre.tools.dconvert.arg.EScalingAlgorithm $r0, $r6, $r12, $r18, $r24, $r30, $r36, $r42, $r48, $r54, $r59, $r64, $r69, $r74, $r79, $r84, $r89, $r94, $r100, $r101, $r102, $r103, $r104, $r105, $r106, $r107, $r108, $r109, $r110, $r111, $r112, $r113, $r114, $r115, $r116, $r117;
        at.favre.tools.dconvert.converters.scaling.ResampleAlgorithm $r1, $r7, $r13, $r19, $r25, $r31, $r37, $r43;
        at.favre.tools.dconvert.converters.scaling.ResampleAlgorithm$LanczosFilter $r2, $r8, $r14, $r20, $r26;
        at.favre.tools.dconvert.arg.EScalingAlgorithm$Type[] $r3, $r9, $r15, $r21, $r27, $r33, $r39, $r45, $r51, $r57, $r62, $r67, $r72, $r77, $r82, $r87, $r92, $r97;
        at.favre.tools.dconvert.arg.EScalingAlgorithm$Type $r4, $r5, $r10, $r11, $r16, $r17, $r22, $r23, $r28, $r29, $r34, $r35, $r40, $r41, $r46, $r47, $r52, $r53, $r58, $r63, $r68, $r73, $r78, $r83, $r88, $r93, $r98;
        com.mortennobel.imagescaling.ResampleFilter $r32, $r38, $r44;
        at.favre.tools.dconvert.converters.scaling.NaiveGraphics2dAlgorithm $r49, $r90, $r95;
        java.lang.Object $r50, $r91, $r96;
        at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm $r55, $r60, $r65, $r70, $r75, $r80, $r85;
        at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm$Type $r56, $r61, $r66, $r71, $r76, $r81, $r86;
        at.favre.tools.dconvert.arg.EScalingAlgorithm[] $r99;

        $r0 = new at.favre.tools.dconvert.arg.EScalingAlgorithm;

        $r1 = new at.favre.tools.dconvert.converters.scaling.ResampleAlgorithm;

        $r2 = new at.favre.tools.dconvert.converters.scaling.ResampleAlgorithm$LanczosFilter;

        specialinvoke $r2.<at.favre.tools.dconvert.converters.scaling.ResampleAlgorithm$LanczosFilter: void <init>(float)>(1.0F);

        specialinvoke $r1.<at.favre.tools.dconvert.converters.scaling.ResampleAlgorithm: void <init>(com.mortennobel.imagescaling.ResampleFilter)>($r2);

        $r3 = newarray (at.favre.tools.dconvert.arg.EScalingAlgorithm$Type)[2];

        $r4 = <at.favre.tools.dconvert.arg.EScalingAlgorithm$Type: at.favre.tools.dconvert.arg.EScalingAlgorithm$Type DOWNSCALING>;

        $r3[0] = $r4;

        $r5 = <at.favre.tools.dconvert.arg.EScalingAlgorithm$Type: at.favre.tools.dconvert.arg.EScalingAlgorithm$Type UPSCALING>;

        $r3[1] = $r5;

        specialinvoke $r0.<at.favre.tools.dconvert.arg.EScalingAlgorithm: void <init>(java.lang.String,int,at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm,java.lang.String,at.favre.tools.dconvert.arg.EScalingAlgorithm$Type[],boolean)>("LANCZOS1", 0, $r1, "lanczos1", $r3, 0);

        <at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.arg.EScalingAlgorithm LANCZOS1> = $r0;

        $r6 = new at.favre.tools.dconvert.arg.EScalingAlgorithm;

        $r7 = new at.favre.tools.dconvert.converters.scaling.ResampleAlgorithm;

        $r8 = new at.favre.tools.dconvert.converters.scaling.ResampleAlgorithm$LanczosFilter;

        specialinvoke $r8.<at.favre.tools.dconvert.converters.scaling.ResampleAlgorithm$LanczosFilter: void <init>(float)>(2.0F);

        specialinvoke $r7.<at.favre.tools.dconvert.converters.scaling.ResampleAlgorithm: void <init>(com.mortennobel.imagescaling.ResampleFilter)>($r8);

        $r9 = newarray (at.favre.tools.dconvert.arg.EScalingAlgorithm$Type)[2];

        $r10 = <at.favre.tools.dconvert.arg.EScalingAlgorithm$Type: at.favre.tools.dconvert.arg.EScalingAlgorithm$Type DOWNSCALING>;

        $r9[0] = $r10;

        $r11 = <at.favre.tools.dconvert.arg.EScalingAlgorithm$Type: at.favre.tools.dconvert.arg.EScalingAlgorithm$Type UPSCALING>;

        $r9[1] = $r11;

        specialinvoke $r6.<at.favre.tools.dconvert.arg.EScalingAlgorithm: void <init>(java.lang.String,int,at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm,java.lang.String,at.favre.tools.dconvert.arg.EScalingAlgorithm$Type[],boolean)>("LANCZOS2", 1, $r7, "lanczos2", $r9, 1);

        <at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.arg.EScalingAlgorithm LANCZOS2> = $r6;

        $r12 = new at.favre.tools.dconvert.arg.EScalingAlgorithm;

        $r13 = new at.favre.tools.dconvert.converters.scaling.ResampleAlgorithm;

        $r14 = new at.favre.tools.dconvert.converters.scaling.ResampleAlgorithm$LanczosFilter;

        specialinvoke $r14.<at.favre.tools.dconvert.converters.scaling.ResampleAlgorithm$LanczosFilter: void <init>(float)>(3.0F);

        specialinvoke $r13.<at.favre.tools.dconvert.converters.scaling.ResampleAlgorithm: void <init>(com.mortennobel.imagescaling.ResampleFilter)>($r14);

        $r15 = newarray (at.favre.tools.dconvert.arg.EScalingAlgorithm$Type)[2];

        $r16 = <at.favre.tools.dconvert.arg.EScalingAlgorithm$Type: at.favre.tools.dconvert.arg.EScalingAlgorithm$Type DOWNSCALING>;

        $r15[0] = $r16;

        $r17 = <at.favre.tools.dconvert.arg.EScalingAlgorithm$Type: at.favre.tools.dconvert.arg.EScalingAlgorithm$Type UPSCALING>;

        $r15[1] = $r17;

        specialinvoke $r12.<at.favre.tools.dconvert.arg.EScalingAlgorithm: void <init>(java.lang.String,int,at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm,java.lang.String,at.favre.tools.dconvert.arg.EScalingAlgorithm$Type[],boolean)>("LANCZOS3", 2, $r13, "lanczos3", $r15, 1);

        <at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.arg.EScalingAlgorithm LANCZOS3> = $r12;

        $r18 = new at.favre.tools.dconvert.arg.EScalingAlgorithm;

        $r19 = new at.favre.tools.dconvert.converters.scaling.ResampleAlgorithm;

        $r20 = new at.favre.tools.dconvert.converters.scaling.ResampleAlgorithm$LanczosFilter;

        specialinvoke $r20.<at.favre.tools.dconvert.converters.scaling.ResampleAlgorithm$LanczosFilter: void <init>(float)>(4.0F);

        specialinvoke $r19.<at.favre.tools.dconvert.converters.scaling.ResampleAlgorithm: void <init>(com.mortennobel.imagescaling.ResampleFilter)>($r20);

        $r21 = newarray (at.favre.tools.dconvert.arg.EScalingAlgorithm$Type)[2];

        $r22 = <at.favre.tools.dconvert.arg.EScalingAlgorithm$Type: at.favre.tools.dconvert.arg.EScalingAlgorithm$Type DOWNSCALING>;

        $r21[0] = $r22;

        $r23 = <at.favre.tools.dconvert.arg.EScalingAlgorithm$Type: at.favre.tools.dconvert.arg.EScalingAlgorithm$Type UPSCALING>;

        $r21[1] = $r23;

        specialinvoke $r18.<at.favre.tools.dconvert.arg.EScalingAlgorithm: void <init>(java.lang.String,int,at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm,java.lang.String,at.favre.tools.dconvert.arg.EScalingAlgorithm$Type[],boolean)>("LANCZOS4", 3, $r19, "lanczos4", $r21, 0);

        <at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.arg.EScalingAlgorithm LANCZOS4> = $r18;

        $r24 = new at.favre.tools.dconvert.arg.EScalingAlgorithm;

        $r25 = new at.favre.tools.dconvert.converters.scaling.ResampleAlgorithm;

        $r26 = new at.favre.tools.dconvert.converters.scaling.ResampleAlgorithm$LanczosFilter;

        specialinvoke $r26.<at.favre.tools.dconvert.converters.scaling.ResampleAlgorithm$LanczosFilter: void <init>(float)>(5.0F);

        specialinvoke $r25.<at.favre.tools.dconvert.converters.scaling.ResampleAlgorithm: void <init>(com.mortennobel.imagescaling.ResampleFilter)>($r26);

        $r27 = newarray (at.favre.tools.dconvert.arg.EScalingAlgorithm$Type)[2];

        $r28 = <at.favre.tools.dconvert.arg.EScalingAlgorithm$Type: at.favre.tools.dconvert.arg.EScalingAlgorithm$Type DOWNSCALING>;

        $r27[0] = $r28;

        $r29 = <at.favre.tools.dconvert.arg.EScalingAlgorithm$Type: at.favre.tools.dconvert.arg.EScalingAlgorithm$Type UPSCALING>;

        $r27[1] = $r29;

        specialinvoke $r24.<at.favre.tools.dconvert.arg.EScalingAlgorithm: void <init>(java.lang.String,int,at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm,java.lang.String,at.favre.tools.dconvert.arg.EScalingAlgorithm$Type[],boolean)>("LANCZOS5", 4, $r25, "lanczos5", $r27, 0);

        <at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.arg.EScalingAlgorithm LANCZOS5> = $r24;

        $r30 = new at.favre.tools.dconvert.arg.EScalingAlgorithm;

        $r31 = new at.favre.tools.dconvert.converters.scaling.ResampleAlgorithm;

        $r32 = staticinvoke <com.mortennobel.imagescaling.ResampleFilters: com.mortennobel.imagescaling.ResampleFilter getMitchellFilter()>();

        specialinvoke $r31.<at.favre.tools.dconvert.converters.scaling.ResampleAlgorithm: void <init>(com.mortennobel.imagescaling.ResampleFilter)>($r32);

        $r33 = newarray (at.favre.tools.dconvert.arg.EScalingAlgorithm$Type)[2];

        $r34 = <at.favre.tools.dconvert.arg.EScalingAlgorithm$Type: at.favre.tools.dconvert.arg.EScalingAlgorithm$Type DOWNSCALING>;

        $r33[0] = $r34;

        $r35 = <at.favre.tools.dconvert.arg.EScalingAlgorithm$Type: at.favre.tools.dconvert.arg.EScalingAlgorithm$Type UPSCALING>;

        $r33[1] = $r35;

        specialinvoke $r30.<at.favre.tools.dconvert.arg.EScalingAlgorithm: void <init>(java.lang.String,int,at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm,java.lang.String,at.favre.tools.dconvert.arg.EScalingAlgorithm$Type[],boolean)>("MITCHELL", 5, $r31, "mitchell", $r33, 1);

        <at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.arg.EScalingAlgorithm MITCHELL> = $r30;

        $r36 = new at.favre.tools.dconvert.arg.EScalingAlgorithm;

        $r37 = new at.favre.tools.dconvert.converters.scaling.ResampleAlgorithm;

        $r38 = staticinvoke <com.mortennobel.imagescaling.ResampleFilters: com.mortennobel.imagescaling.ResampleFilter getBSplineFilter()>();

        specialinvoke $r37.<at.favre.tools.dconvert.converters.scaling.ResampleAlgorithm: void <init>(com.mortennobel.imagescaling.ResampleFilter)>($r38);

        $r39 = newarray (at.favre.tools.dconvert.arg.EScalingAlgorithm$Type)[2];

        $r40 = <at.favre.tools.dconvert.arg.EScalingAlgorithm$Type: at.favre.tools.dconvert.arg.EScalingAlgorithm$Type DOWNSCALING>;

        $r39[0] = $r40;

        $r41 = <at.favre.tools.dconvert.arg.EScalingAlgorithm$Type: at.favre.tools.dconvert.arg.EScalingAlgorithm$Type UPSCALING>;

        $r39[1] = $r41;

        specialinvoke $r36.<at.favre.tools.dconvert.arg.EScalingAlgorithm: void <init>(java.lang.String,int,at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm,java.lang.String,at.favre.tools.dconvert.arg.EScalingAlgorithm$Type[],boolean)>("BSPLINE", 6, $r37, "bspline", $r39, 0);

        <at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.arg.EScalingAlgorithm BSPLINE> = $r36;

        $r42 = new at.favre.tools.dconvert.arg.EScalingAlgorithm;

        $r43 = new at.favre.tools.dconvert.converters.scaling.ResampleAlgorithm;

        $r44 = staticinvoke <com.mortennobel.imagescaling.ResampleFilters: com.mortennobel.imagescaling.ResampleFilter getHermiteFilter()>();

        specialinvoke $r43.<at.favre.tools.dconvert.converters.scaling.ResampleAlgorithm: void <init>(com.mortennobel.imagescaling.ResampleFilter)>($r44);

        $r45 = newarray (at.favre.tools.dconvert.arg.EScalingAlgorithm$Type)[2];

        $r46 = <at.favre.tools.dconvert.arg.EScalingAlgorithm$Type: at.favre.tools.dconvert.arg.EScalingAlgorithm$Type DOWNSCALING>;

        $r45[0] = $r46;

        $r47 = <at.favre.tools.dconvert.arg.EScalingAlgorithm$Type: at.favre.tools.dconvert.arg.EScalingAlgorithm$Type UPSCALING>;

        $r45[1] = $r47;

        specialinvoke $r42.<at.favre.tools.dconvert.arg.EScalingAlgorithm: void <init>(java.lang.String,int,at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm,java.lang.String,at.favre.tools.dconvert.arg.EScalingAlgorithm$Type[],boolean)>("HERMITE", 7, $r43, "hermite", $r45, 0);

        <at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.arg.EScalingAlgorithm HERMITE> = $r42;

        $r48 = new at.favre.tools.dconvert.arg.EScalingAlgorithm;

        $r49 = new at.favre.tools.dconvert.converters.scaling.NaiveGraphics2dAlgorithm;

        $r50 = <java.awt.RenderingHints: java.lang.Object VALUE_INTERPOLATION_NEAREST_NEIGHBOR>;

        specialinvoke $r49.<at.favre.tools.dconvert.converters.scaling.NaiveGraphics2dAlgorithm: void <init>(java.lang.Object)>($r50);

        $r51 = newarray (at.favre.tools.dconvert.arg.EScalingAlgorithm$Type)[2];

        $r52 = <at.favre.tools.dconvert.arg.EScalingAlgorithm$Type: at.favre.tools.dconvert.arg.EScalingAlgorithm$Type DOWNSCALING>;

        $r51[0] = $r52;

        $r53 = <at.favre.tools.dconvert.arg.EScalingAlgorithm$Type: at.favre.tools.dconvert.arg.EScalingAlgorithm$Type UPSCALING>;

        $r51[1] = $r53;

        specialinvoke $r48.<at.favre.tools.dconvert.arg.EScalingAlgorithm: void <init>(java.lang.String,int,at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm,java.lang.String,at.favre.tools.dconvert.arg.EScalingAlgorithm$Type[],boolean)>("NEAREST_NEIGHBOR", 8, $r49, "nearestNeighbor", $r51, 1);

        <at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.arg.EScalingAlgorithm NEAREST_NEIGHBOR> = $r48;

        $r54 = new at.favre.tools.dconvert.arg.EScalingAlgorithm;

        $r55 = new at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm;

        $r56 = <at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm$Type: at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm$Type NOBEL_BILINEAR>;

        specialinvoke $r55.<at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm: void <init>(at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm$Type)>($r56);

        $r57 = newarray (at.favre.tools.dconvert.arg.EScalingAlgorithm$Type)[1];

        $r58 = <at.favre.tools.dconvert.arg.EScalingAlgorithm$Type: at.favre.tools.dconvert.arg.EScalingAlgorithm$Type DOWNSCALING>;

        $r57[0] = $r58;

        specialinvoke $r54.<at.favre.tools.dconvert.arg.EScalingAlgorithm: void <init>(java.lang.String,int,at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm,java.lang.String,at.favre.tools.dconvert.arg.EScalingAlgorithm$Type[],boolean)>("BILINEAR_PROGRESSIVE", 9, $r55, "bilinearProgressive", $r57, 1);

        <at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.arg.EScalingAlgorithm BILINEAR_PROGRESSIVE> = $r54;

        $r59 = new at.favre.tools.dconvert.arg.EScalingAlgorithm;

        $r60 = new at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm;

        $r61 = <at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm$Type: at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm$Type NOBEL_BICUBUC>;

        specialinvoke $r60.<at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm: void <init>(at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm$Type)>($r61);

        $r62 = newarray (at.favre.tools.dconvert.arg.EScalingAlgorithm$Type)[1];

        $r63 = <at.favre.tools.dconvert.arg.EScalingAlgorithm$Type: at.favre.tools.dconvert.arg.EScalingAlgorithm$Type DOWNSCALING>;

        $r62[0] = $r63;

        specialinvoke $r59.<at.favre.tools.dconvert.arg.EScalingAlgorithm: void <init>(java.lang.String,int,at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm,java.lang.String,at.favre.tools.dconvert.arg.EScalingAlgorithm$Type[],boolean)>("BICUBIC_PROGRESSIVE", 10, $r60, "bicubicProgressive", $r62, 1);

        <at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.arg.EScalingAlgorithm BICUBIC_PROGRESSIVE> = $r59;

        $r64 = new at.favre.tools.dconvert.arg.EScalingAlgorithm;

        $r65 = new at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm;

        $r66 = <at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm$Type: at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm$Type NOBEL_NEAREST_NEIGHBOR>;

        specialinvoke $r65.<at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm: void <init>(at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm$Type)>($r66);

        $r67 = newarray (at.favre.tools.dconvert.arg.EScalingAlgorithm$Type)[1];

        $r68 = <at.favre.tools.dconvert.arg.EScalingAlgorithm$Type: at.favre.tools.dconvert.arg.EScalingAlgorithm$Type DOWNSCALING>;

        $r67[0] = $r68;

        specialinvoke $r64.<at.favre.tools.dconvert.arg.EScalingAlgorithm: void <init>(java.lang.String,int,at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm,java.lang.String,at.favre.tools.dconvert.arg.EScalingAlgorithm$Type[],boolean)>("NEAREST_NEIGHBOR_PROGRESSIVE", 11, $r65, "nearestNeighborProgressive", $r67, 0);

        <at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.arg.EScalingAlgorithm NEAREST_NEIGHBOR_PROGRESSIVE> = $r64;

        $r69 = new at.favre.tools.dconvert.arg.EScalingAlgorithm;

        $r70 = new at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm;

        $r71 = <at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm$Type: at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm$Type THUMBNAILATOR_BILINEAR>;

        specialinvoke $r70.<at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm: void <init>(at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm$Type)>($r71);

        $r72 = newarray (at.favre.tools.dconvert.arg.EScalingAlgorithm$Type)[1];

        $r73 = <at.favre.tools.dconvert.arg.EScalingAlgorithm$Type: at.favre.tools.dconvert.arg.EScalingAlgorithm$Type DOWNSCALING>;

        $r72[0] = $r73;

        specialinvoke $r69.<at.favre.tools.dconvert.arg.EScalingAlgorithm: void <init>(java.lang.String,int,at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm,java.lang.String,at.favre.tools.dconvert.arg.EScalingAlgorithm$Type[],boolean)>("BILINEAR_PROGRESSIVE2", 12, $r70, "bilinearProgressive2", $r72, 0);

        <at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.arg.EScalingAlgorithm BILINEAR_PROGRESSIVE2> = $r69;

        $r74 = new at.favre.tools.dconvert.arg.EScalingAlgorithm;

        $r75 = new at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm;

        $r76 = <at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm$Type: at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm$Type IMGSCALR_SEVENTH_STEP>;

        specialinvoke $r75.<at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm: void <init>(at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm$Type)>($r76);

        $r77 = newarray (at.favre.tools.dconvert.arg.EScalingAlgorithm$Type)[1];

        $r78 = <at.favre.tools.dconvert.arg.EScalingAlgorithm$Type: at.favre.tools.dconvert.arg.EScalingAlgorithm$Type DOWNSCALING>;

        $r77[0] = $r78;

        specialinvoke $r74.<at.favre.tools.dconvert.arg.EScalingAlgorithm: void <init>(java.lang.String,int,at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm,java.lang.String,at.favre.tools.dconvert.arg.EScalingAlgorithm$Type[],boolean)>("BICUBIC_PROGRESSIVE_SMOOTH", 13, $r75, "bicubicProgressiveSmooth", $r77, 0);

        <at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.arg.EScalingAlgorithm BICUBIC_PROGRESSIVE_SMOOTH> = $r74;

        $r79 = new at.favre.tools.dconvert.arg.EScalingAlgorithm;

        $r80 = new at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm;

        $r81 = <at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm$Type: at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm$Type PROGRESSIVE_BILINEAR_AND_LANCZOS3>;

        specialinvoke $r80.<at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm: void <init>(at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm$Type)>($r81);

        $r82 = newarray (at.favre.tools.dconvert.arg.EScalingAlgorithm$Type)[1];

        $r83 = <at.favre.tools.dconvert.arg.EScalingAlgorithm$Type: at.favre.tools.dconvert.arg.EScalingAlgorithm$Type DOWNSCALING>;

        $r82[0] = $r83;

        specialinvoke $r79.<at.favre.tools.dconvert.arg.EScalingAlgorithm: void <init>(java.lang.String,int,at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm,java.lang.String,at.favre.tools.dconvert.arg.EScalingAlgorithm$Type[],boolean)>("BILINEAR_LANCZOS2", 14, $r80, "bilinearLanczos2", $r82, 1);

        <at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.arg.EScalingAlgorithm BILINEAR_LANCZOS2> = $r79;

        $r84 = new at.favre.tools.dconvert.arg.EScalingAlgorithm;

        $r85 = new at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm;

        $r86 = <at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm$Type: at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm$Type PROGRESSIVE_BILINEAR_AND_LANCZOS3>;

        specialinvoke $r85.<at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm: void <init>(at.favre.tools.dconvert.converters.scaling.ProgressiveAlgorithm$Type)>($r86);

        $r87 = newarray (at.favre.tools.dconvert.arg.EScalingAlgorithm$Type)[1];

        $r88 = <at.favre.tools.dconvert.arg.EScalingAlgorithm$Type: at.favre.tools.dconvert.arg.EScalingAlgorithm$Type DOWNSCALING>;

        $r87[0] = $r88;

        specialinvoke $r84.<at.favre.tools.dconvert.arg.EScalingAlgorithm: void <init>(java.lang.String,int,at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm,java.lang.String,at.favre.tools.dconvert.arg.EScalingAlgorithm$Type[],boolean)>("BILINEAR_LANCZOS3", 15, $r85, "bilinearLanczos3", $r87, 0);

        <at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.arg.EScalingAlgorithm BILINEAR_LANCZOS3> = $r84;

        $r89 = new at.favre.tools.dconvert.arg.EScalingAlgorithm;

        $r90 = new at.favre.tools.dconvert.converters.scaling.NaiveGraphics2dAlgorithm;

        $r91 = <java.awt.RenderingHints: java.lang.Object VALUE_INTERPOLATION_BICUBIC>;

        specialinvoke $r90.<at.favre.tools.dconvert.converters.scaling.NaiveGraphics2dAlgorithm: void <init>(java.lang.Object)>($r91);

        $r92 = newarray (at.favre.tools.dconvert.arg.EScalingAlgorithm$Type)[1];

        $r93 = <at.favre.tools.dconvert.arg.EScalingAlgorithm$Type: at.favre.tools.dconvert.arg.EScalingAlgorithm$Type UPSCALING>;

        $r92[0] = $r93;

        specialinvoke $r89.<at.favre.tools.dconvert.arg.EScalingAlgorithm: void <init>(java.lang.String,int,at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm,java.lang.String,at.favre.tools.dconvert.arg.EScalingAlgorithm$Type[],boolean)>("BICUBIC", 16, $r90, "bicubic", $r92, 1);

        <at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.arg.EScalingAlgorithm BICUBIC> = $r89;

        $r94 = new at.favre.tools.dconvert.arg.EScalingAlgorithm;

        $r95 = new at.favre.tools.dconvert.converters.scaling.NaiveGraphics2dAlgorithm;

        $r96 = <java.awt.RenderingHints: java.lang.Object VALUE_INTERPOLATION_BILINEAR>;

        specialinvoke $r95.<at.favre.tools.dconvert.converters.scaling.NaiveGraphics2dAlgorithm: void <init>(java.lang.Object)>($r96);

        $r97 = newarray (at.favre.tools.dconvert.arg.EScalingAlgorithm$Type)[1];

        $r98 = <at.favre.tools.dconvert.arg.EScalingAlgorithm$Type: at.favre.tools.dconvert.arg.EScalingAlgorithm$Type UPSCALING>;

        $r97[0] = $r98;

        specialinvoke $r94.<at.favre.tools.dconvert.arg.EScalingAlgorithm: void <init>(java.lang.String,int,at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm,java.lang.String,at.favre.tools.dconvert.arg.EScalingAlgorithm$Type[],boolean)>("BILINEAR", 17, $r95, "bilinear", $r97, 1);

        <at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.arg.EScalingAlgorithm BILINEAR> = $r94;

        $r99 = newarray (at.favre.tools.dconvert.arg.EScalingAlgorithm)[18];

        $r100 = <at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.arg.EScalingAlgorithm LANCZOS1>;

        $r99[0] = $r100;

        $r101 = <at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.arg.EScalingAlgorithm LANCZOS2>;

        $r99[1] = $r101;

        $r102 = <at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.arg.EScalingAlgorithm LANCZOS3>;

        $r99[2] = $r102;

        $r103 = <at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.arg.EScalingAlgorithm LANCZOS4>;

        $r99[3] = $r103;

        $r104 = <at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.arg.EScalingAlgorithm LANCZOS5>;

        $r99[4] = $r104;

        $r105 = <at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.arg.EScalingAlgorithm MITCHELL>;

        $r99[5] = $r105;

        $r106 = <at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.arg.EScalingAlgorithm BSPLINE>;

        $r99[6] = $r106;

        $r107 = <at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.arg.EScalingAlgorithm HERMITE>;

        $r99[7] = $r107;

        $r108 = <at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.arg.EScalingAlgorithm NEAREST_NEIGHBOR>;

        $r99[8] = $r108;

        $r109 = <at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.arg.EScalingAlgorithm BILINEAR_PROGRESSIVE>;

        $r99[9] = $r109;

        $r110 = <at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.arg.EScalingAlgorithm BICUBIC_PROGRESSIVE>;

        $r99[10] = $r110;

        $r111 = <at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.arg.EScalingAlgorithm NEAREST_NEIGHBOR_PROGRESSIVE>;

        $r99[11] = $r111;

        $r112 = <at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.arg.EScalingAlgorithm BILINEAR_PROGRESSIVE2>;

        $r99[12] = $r112;

        $r113 = <at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.arg.EScalingAlgorithm BICUBIC_PROGRESSIVE_SMOOTH>;

        $r99[13] = $r113;

        $r114 = <at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.arg.EScalingAlgorithm BILINEAR_LANCZOS2>;

        $r99[14] = $r114;

        $r115 = <at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.arg.EScalingAlgorithm BILINEAR_LANCZOS3>;

        $r99[15] = $r115;

        $r116 = <at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.arg.EScalingAlgorithm BICUBIC>;

        $r99[16] = $r116;

        $r117 = <at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.arg.EScalingAlgorithm BILINEAR>;

        $r99[17] = $r117;

        <at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.arg.EScalingAlgorithm[] $VALUES> = $r99;

        return;
    }

    public static java.lang.String getCliArgString(at.favre.tools.dconvert.arg.EScalingAlgorithm$Type)
    {
        at.favre.tools.dconvert.arg.EScalingAlgorithm$Type type;

        type := @parameter0: at.favre.tools.dconvert.arg.EScalingAlgorithm$Type;

        return "";
    }

    private void <init>(java.lang.String, int, at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm, java.lang.String, at.favre.tools.dconvert.arg.EScalingAlgorithm$Type[], boolean)
    {
        at.favre.tools.dconvert.arg.EScalingAlgorithm this;
        java.lang.String l1, cliName;
        int l2;
        at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm algorithm;
        at.favre.tools.dconvert.arg.EScalingAlgorithm$Type[] supportedForType;
        boolean enabled;
        java.util.List $r0, $r1;

        this := @this: at.favre.tools.dconvert.arg.EScalingAlgorithm;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: int;

        algorithm := @parameter2: at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm;

        cliName := @parameter3: java.lang.String;

        supportedForType := @parameter4: at.favre.tools.dconvert.arg.EScalingAlgorithm$Type[];

        enabled := @parameter5: boolean;

        specialinvoke this.<java.lang.Enum: void <init>(java.lang.String,int)>(l1, l2);

        this.<at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm algorithm> = algorithm;

        this.<at.favre.tools.dconvert.arg.EScalingAlgorithm: java.lang.String cliName> = cliName;

        $r0 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(supportedForType);

        $r1 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r0);

        this.<at.favre.tools.dconvert.arg.EScalingAlgorithm: java.util.List supportedForType> = $r1;

        this.<at.favre.tools.dconvert.arg.EScalingAlgorithm: boolean enabled> = enabled;

        return;
    }


