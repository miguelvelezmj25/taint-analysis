    public final com.sleepycat.bind.tuple.TupleOutput writeInt(int)
    {
        com.sleepycat.bind.tuple.TupleOutput this;
        int val, $i0;
        long $l1;

        this := @this: com.sleepycat.bind.tuple.TupleOutput;

        val := @parameter0: int;

        $i0 = val ^ -2147483648;

        $l1 = (long) $i0;

        virtualinvoke this.<com.sleepycat.bind.tuple.TupleOutput: com.sleepycat.bind.tuple.TupleOutput writeUnsignedInt(long)>($l1);

        return this;
    }

    public final com.sleepycat.bind.tuple.TupleOutput writeUnsignedInt(long)
    {
        com.sleepycat.bind.tuple.TupleOutput this;
        long val, $l0, $l3, $l6;
        int $i1, $i4, $i7, $i9;
        byte $b2, $b5, $b8, $b10;

        this := @this: com.sleepycat.bind.tuple.TupleOutput;

        val := @parameter0: long;

        $l0 = val >>> 24;

        $i1 = (int) $l0;

        $b2 = (byte) $i1;

        virtualinvoke this.<com.sleepycat.bind.tuple.TupleOutput: void writeFast(int)>($b2);

        $l3 = val >>> 16;

        $i4 = (int) $l3;

        $b5 = (byte) $i4;

        virtualinvoke this.<com.sleepycat.bind.tuple.TupleOutput: void writeFast(int)>($b5);

        $l6 = val >>> 8;

        $i7 = (int) $l6;

        $b8 = (byte) $i7;

        virtualinvoke this.<com.sleepycat.bind.tuple.TupleOutput: void writeFast(int)>($b8);

        $i9 = (int) val;

        $b10 = (byte) $i9;

        virtualinvoke this.<com.sleepycat.bind.tuple.TupleOutput: void writeFast(int)>($b10);

        return this;
    }

    public void <init>(byte[])
    {
        com.sleepycat.bind.tuple.TupleOutput this;
        byte[] buffer;

        this := @this: com.sleepycat.bind.tuple.TupleOutput;

        buffer := @parameter0: byte[];

        specialinvoke this.<com.sleepycat.util.FastOutputStream: void <init>(byte[])>(buffer);

        return;
    }

    public final com.sleepycat.bind.tuple.TupleOutput writeSortedPackedLong(long)
    {
        com.sleepycat.bind.tuple.TupleOutput this;
        long val;
        int oldLen, newLen, $i0;
        byte[] $r0;

        this := @this: com.sleepycat.bind.tuple.TupleOutput;

        val := @parameter0: long;

        virtualinvoke this.<com.sleepycat.bind.tuple.TupleOutput: void makeSpace(int)>(9);

        oldLen = virtualinvoke this.<com.sleepycat.bind.tuple.TupleOutput: int getBufferLength()>();

        $r0 = virtualinvoke this.<com.sleepycat.bind.tuple.TupleOutput: byte[] getBufferBytes()>();

        newLen = staticinvoke <com.sleepycat.util.PackedInteger: int writeSortedLong(byte[],int,long)>($r0, oldLen, val);

        $i0 = newLen - oldLen;

        virtualinvoke this.<com.sleepycat.bind.tuple.TupleOutput: void addSize(int)>($i0);

        return this;
    }

    public void <init>()
    {
        com.sleepycat.bind.tuple.TupleOutput this;

        this := @this: com.sleepycat.bind.tuple.TupleOutput;

        specialinvoke this.<com.sleepycat.util.FastOutputStream: void <init>()>();

        return;
    }

    public final com.sleepycat.bind.tuple.TupleOutput writePackedLong(long)
    {
        com.sleepycat.bind.tuple.TupleOutput this;
        long val;
        int oldLen, newLen, $i0;
        byte[] $r0;

        this := @this: com.sleepycat.bind.tuple.TupleOutput;

        val := @parameter0: long;

        virtualinvoke this.<com.sleepycat.bind.tuple.TupleOutput: void makeSpace(int)>(9);

        oldLen = virtualinvoke this.<com.sleepycat.bind.tuple.TupleOutput: int getBufferLength()>();

        $r0 = virtualinvoke this.<com.sleepycat.bind.tuple.TupleOutput: byte[] getBufferBytes()>();

        newLen = staticinvoke <com.sleepycat.util.PackedInteger: int writeLong(byte[],int,long)>($r0, oldLen, val);

        $i0 = newLen - oldLen;

        virtualinvoke this.<com.sleepycat.bind.tuple.TupleOutput: void addSize(int)>($i0);

        return this;
    }

    public final com.sleepycat.bind.tuple.TupleOutput writePackedInt(int)
    {
        com.sleepycat.bind.tuple.TupleOutput this;
        int val, oldLen, newLen, $i0;
        byte[] $r0;

        this := @this: com.sleepycat.bind.tuple.TupleOutput;

        val := @parameter0: int;

        virtualinvoke this.<com.sleepycat.bind.tuple.TupleOutput: void makeSpace(int)>(5);

        oldLen = virtualinvoke this.<com.sleepycat.bind.tuple.TupleOutput: int getBufferLength()>();

        $r0 = virtualinvoke this.<com.sleepycat.bind.tuple.TupleOutput: byte[] getBufferBytes()>();

        newLen = staticinvoke <com.sleepycat.util.PackedInteger: int writeInt(byte[],int,int)>($r0, oldLen, val);

        $i0 = newLen - oldLen;

        virtualinvoke this.<com.sleepycat.bind.tuple.TupleOutput: void addSize(int)>($i0);

        return this;
    }

    public final com.sleepycat.bind.tuple.TupleOutput writeString(java.lang.String)
    {
        com.sleepycat.bind.tuple.TupleOutput this;
        java.lang.String val;
        char[] $r0;

        this := @this: com.sleepycat.bind.tuple.TupleOutput;

        val := @parameter0: java.lang.String;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(val);

        if val == null goto label1;

        $r0 = virtualinvoke val.<java.lang.String: char[] toCharArray()>();

        virtualinvoke this.<com.sleepycat.bind.tuple.TupleOutput: com.sleepycat.bind.tuple.TupleOutput writeString(char[])>($r0);

        goto label2;

     label1:
        virtualinvoke this.<com.sleepycat.bind.tuple.TupleOutput: void writeFast(int)>(-1);

     label2:
        virtualinvoke this.<com.sleepycat.bind.tuple.TupleOutput: void writeFast(int)>(0);

        return this;
    }

    public final com.sleepycat.bind.tuple.TupleOutput writeString(char[])
    {
        com.sleepycat.bind.tuple.TupleOutput this;
        char[] chars;
        int utfLength, $i0, $i1, $i2;
        byte[] $r0;

        this := @this: com.sleepycat.bind.tuple.TupleOutput;

        chars := @parameter0: char[];

        $i0 = lengthof chars;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 0 goto label1;

        return this;

     label1:
        utfLength = staticinvoke <com.sleepycat.util.UtfOps: int getByteLength(char[])>(chars);

        virtualinvoke this.<com.sleepycat.bind.tuple.TupleOutput: void makeSpace(int)>(utfLength);

        $r0 = virtualinvoke this.<com.sleepycat.bind.tuple.TupleOutput: byte[] getBufferBytes()>();

        $i1 = virtualinvoke this.<com.sleepycat.bind.tuple.TupleOutput: int getBufferLength()>();

        $i2 = lengthof chars;

        staticinvoke <com.sleepycat.util.UtfOps: void charsToBytes(char[],int,byte[],int,int)>(chars, 0, $r0, $i1, $i2);

        virtualinvoke this.<com.sleepycat.bind.tuple.TupleOutput: void addSize(int)>(utfLength);

        return this;
    }


