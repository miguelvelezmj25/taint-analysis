    static void <clinit>()
    {
        java.lang.StringBuilder $r0, $r2, $r3;
        java.lang.String $r1, $r4;

        <weka.core.converters.ArffLoader: java.lang.String FILE_EXTENSION> = ".arff";

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = <weka.core.converters.ArffLoader: java.lang.String FILE_EXTENSION>;

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".gz");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        <weka.core.converters.ArffLoader: java.lang.String FILE_EXTENSION_COMPRESSED> = $r4;

        return;
    }

    public void <init>()
    {
        weka.core.converters.ArffLoader this;

        this := @this: weka.core.converters.ArffLoader;

        specialinvoke this.<weka.core.converters.AbstractFileLoader: void <init>()>();

        this.<weka.core.converters.ArffLoader: java.lang.String m_URL> = "http://";

        this.<weka.core.converters.ArffLoader: java.io.Reader m_sourceReader> = null;

        this.<weka.core.converters.ArffLoader: weka.core.converters.ArffLoader$ArffReader m_ArffReader> = null;

        return;
    }

    public weka.core.Instances getDataSet() throws java.io.IOException
    {
        weka.core.converters.ArffLoader this;
        weka.core.Instance inst, $r8;
        java.lang.Throwable l3, $r11;
        java.io.Reader $r0, $r9, $r10, $r12, $r13;
        java.io.IOException $r1, $r2;
        int $i0;
        weka.core.Instances $r3, $r4, $r5, insts#24, $r7;
        weka.core.converters.ArffLoader$ArffReader $r6;

        this := @this: weka.core.converters.ArffLoader;

     label1:
        $r0 = this.<weka.core.converters.ArffLoader: java.io.Reader m_sourceReader>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label2;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("No source has been specified");

        throw $r1;

     label2:
        $i0 = virtualinvoke this.<weka.core.converters.ArffLoader: int getRetrieval()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 2 goto label3;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Cannot mix getting Instances in both incremental and batch modes");

        throw $r2;

     label3:
        virtualinvoke this.<weka.core.converters.ArffLoader: void setRetrieval(int)>(1);

        $r3 = this.<weka.core.converters.ArffLoader: weka.core.Instances m_structure>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r3);

        if $r3 != null goto label4;

        virtualinvoke this.<weka.core.converters.ArffLoader: weka.core.Instances getStructure()>();

     label4:
        $r4 = new weka.core.Instances;

        $r5 = this.<weka.core.converters.ArffLoader: weka.core.Instances m_structure>;

        specialinvoke $r4.<weka.core.Instances: void <init>(weka.core.Instances,int)>($r5, 0);

        insts#24 = $r4;

     label5:
        $r6 = this.<weka.core.converters.ArffLoader: weka.core.converters.ArffLoader$ArffReader m_ArffReader>;

        $r7 = this.<weka.core.converters.ArffLoader: weka.core.Instances m_structure>;

        $r8 = virtualinvoke $r6.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instance readInstance(weka.core.Instances)>($r7);

        inst = $r8;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r8);

        if $r8 == null goto label6;

        virtualinvoke insts#24.<weka.core.Instances: boolean add(weka.core.Instance)>(inst);

        goto label5;

     label6:
        $r9 = this.<weka.core.converters.ArffLoader: java.io.Reader m_sourceReader>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r9);

        if $r9 == null goto label9;

        $r10 = this.<weka.core.converters.ArffLoader: java.io.Reader m_sourceReader>;

        virtualinvoke $r10.<java.io.Reader: void close()>();

        goto label9;

     label7:
        $r11 := @caughtexception;

        l3 = $r11;

        $r12 = this.<weka.core.converters.ArffLoader: java.io.Reader m_sourceReader>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r12);

        if $r12 == null goto label8;

        $r13 = this.<weka.core.converters.ArffLoader: java.io.Reader m_sourceReader>;

        virtualinvoke $r13.<java.io.Reader: void close()>();

     label8:
        throw l3;

     label9:
        return insts#24;

        catch java.lang.Throwable from label1 to label6 with label7;
    }

    public weka.core.Instances getStructure() throws java.io.IOException
    {
        weka.core.converters.ArffLoader this;
        java.lang.Exception ex, $r10;
        weka.core.Instances $r0, $r9, $r18, $r19;
        java.io.Reader $r1, $r6;
        java.io.IOException $r2, $r11;
        weka.core.converters.ArffLoader$ArffReader $r4, $r7, $r8;
        int $i1;
        boolean $z0, $z1;
        java.lang.StringBuilder $r12, $r13, $r15, $r16;
        java.lang.String $r14, $r17;

        this := @this: weka.core.converters.ArffLoader;

        $r0 = this.<weka.core.converters.ArffLoader: weka.core.Instances m_structure>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label6;

        $r1 = this.<weka.core.converters.ArffLoader: java.io.Reader m_sourceReader>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 != null goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("No source has been specified");

        throw $r2;

     label1:
        $r4 = new weka.core.converters.ArffLoader$ArffReader;

        $r6 = this.<weka.core.converters.ArffLoader: java.io.Reader m_sourceReader>;

        $i1 = virtualinvoke this.<weka.core.converters.ArffLoader: int getRetrieval()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 != 1 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        specialinvoke $r4.<weka.core.converters.ArffLoader$ArffReader: void <init>(java.io.Reader,int,boolean)>($r6, 1, $z0);

        this.<weka.core.converters.ArffLoader: weka.core.converters.ArffLoader$ArffReader m_ArffReader> = $r4;

        $r7 = this.<weka.core.converters.ArffLoader: weka.core.converters.ArffLoader$ArffReader m_ArffReader>;

        $z1 = virtualinvoke this.<weka.core.converters.ArffLoader: boolean getRetainStringVals()>();

        virtualinvoke $r7.<weka.core.converters.ArffLoader$ArffReader: void setRetainStringValues(boolean)>($z1);

        $r8 = this.<weka.core.converters.ArffLoader: weka.core.converters.ArffLoader$ArffReader m_ArffReader>;

        $r9 = virtualinvoke $r8.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances getStructure()>();

        this.<weka.core.converters.ArffLoader: weka.core.Instances m_structure> = $r9;

     label4:
        goto label6;

     label5:
        $r10 := @caughtexception;

        ex = $r10;

        $r11 = new java.io.IOException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to determine structure as arff (Reason: ");

        $r14 = virtualinvoke ex.<java.lang.Exception: java.lang.String toString()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>($r17);

        throw $r11;

     label6:
        $r18 = new weka.core.Instances;

        $r19 = this.<weka.core.converters.ArffLoader: weka.core.Instances m_structure>;

        specialinvoke $r18.<weka.core.Instances: void <init>(weka.core.Instances,int)>($r19, 0);

        return $r18;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    public boolean getRetainStringVals()
    {
        weka.core.converters.ArffLoader this;
        boolean $z0;

        this := @this: weka.core.converters.ArffLoader;

        $z0 = this.<weka.core.converters.ArffLoader: boolean m_retainStringVals>;

        return $z0;
    }

    public void reset() throws java.io.IOException
    {
        weka.core.converters.ArffLoader this;
        java.lang.String $r0, $r2, $r4, $r5, $r6, $r7;
        java.io.File $r1, $r3;
        boolean $z0, $z1;

        this := @this: weka.core.converters.ArffLoader;

        this.<weka.core.converters.ArffLoader: weka.core.Instances m_structure> = null;

        this.<weka.core.converters.ArffLoader: weka.core.converters.ArffLoader$ArffReader m_ArffReader> = null;

        virtualinvoke this.<weka.core.converters.ArffLoader: void setRetrieval(int)>(0);

        $r0 = this.<weka.core.converters.ArffLoader: java.lang.String m_File>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label1;

        $r1 = new java.io.File;

        $r2 = this.<weka.core.converters.ArffLoader: java.lang.String m_File>;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r2);

        $z0 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r3 = new java.io.File;

        $r4 = this.<weka.core.converters.ArffLoader: java.lang.String m_File>;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r4);

        virtualinvoke this.<weka.core.converters.ArffLoader: void setFile(java.io.File)>($r3);

        goto label2;

     label1:
        $r5 = this.<weka.core.converters.ArffLoader: java.lang.String m_URL>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r5);

        if $r5 == null goto label2;

        $r6 = this.<weka.core.converters.ArffLoader: java.lang.String m_URL>;

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("http://");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

        $r7 = this.<weka.core.converters.ArffLoader: java.lang.String m_URL>;

        virtualinvoke this.<weka.core.converters.ArffLoader: void setURL(java.lang.String)>($r7);

     label2:
        return;
    }

    public void setFile(java.io.File) throws java.io.IOException
    {
        weka.core.converters.ArffLoader this;
        java.io.File file;
        java.lang.String $r0;

        this := @this: weka.core.converters.ArffLoader;

        file := @parameter0: java.io.File;

        $r0 = virtualinvoke file.<java.io.File: java.lang.String getPath()>();

        this.<weka.core.converters.ArffLoader: java.lang.String m_File> = $r0;

        virtualinvoke this.<weka.core.converters.ArffLoader: void setSource(java.io.File)>(file);

        return;
    }

    public void setURL(java.lang.String) throws java.io.IOException
    {
        weka.core.converters.ArffLoader this;
        java.lang.String url;
        java.net.URL $r0;

        this := @this: weka.core.converters.ArffLoader;

        url := @parameter0: java.lang.String;

        this.<weka.core.converters.ArffLoader: java.lang.String m_URL> = url;

        $r0 = new java.net.URL;

        specialinvoke $r0.<java.net.URL: void <init>(java.lang.String)>(url);

        virtualinvoke this.<weka.core.converters.ArffLoader: void setSource(java.net.URL)>($r0);

        return;
    }

    public void setSource(java.net.URL) throws java.io.IOException
    {
        weka.core.converters.ArffLoader this;
        java.net.URL url;
        java.io.InputStream $r0;
        java.lang.String $r1;

        this := @this: weka.core.converters.ArffLoader;

        url := @parameter0: java.net.URL;

        this.<weka.core.converters.ArffLoader: weka.core.Instances m_structure> = null;

        virtualinvoke this.<weka.core.converters.ArffLoader: void setRetrieval(int)>(0);

        $r0 = virtualinvoke url.<java.net.URL: java.io.InputStream openStream()>();

        virtualinvoke this.<weka.core.converters.ArffLoader: void setSource(java.io.InputStream)>($r0);

        $r1 = virtualinvoke url.<java.net.URL: java.lang.String toString()>();

        this.<weka.core.converters.ArffLoader: java.lang.String m_URL> = $r1;

        this.<weka.core.converters.ArffLoader: java.lang.String m_File> = null;

        return;
    }

    public void setSource(java.io.InputStream) throws java.io.IOException
    {
        weka.core.converters.ArffLoader this;
        java.io.InputStream in;
        java.io.File $r0;
        java.lang.String $r1, $r2;
        java.io.BufferedReader $r3;
        java.io.InputStreamReader $r4;

        this := @this: weka.core.converters.ArffLoader;

        in := @parameter0: java.io.InputStream;

        $r0 = new java.io.File;

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir");

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r1);

        $r2 = virtualinvoke $r0.<java.io.File: java.lang.String getAbsolutePath()>();

        this.<weka.core.converters.ArffLoader: java.lang.String m_File> = $r2;

        this.<weka.core.converters.ArffLoader: java.lang.String m_URL> = "http://";

        $r3 = new java.io.BufferedReader;

        $r4 = new java.io.InputStreamReader;

        specialinvoke $r4.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(in);

        specialinvoke $r3.<java.io.BufferedReader: void <init>(java.io.Reader)>($r4);

        this.<weka.core.converters.ArffLoader: java.io.Reader m_sourceReader> = $r3;

        return;
    }

    public java.lang.String getFileExtension()
    {
        weka.core.converters.ArffLoader this;
        java.lang.String $r0;

        this := @this: weka.core.converters.ArffLoader;

        $r0 = <weka.core.converters.ArffLoader: java.lang.String FILE_EXTENSION>;

        return $r0;
    }

    public weka.core.Instance getNextInstance(weka.core.Instances) throws java.io.IOException
    {
        weka.core.converters.ArffLoader this;
        weka.core.Instances structure, $r3;
        java.lang.Exception ex, $r6;
        int $i0;
        java.io.IOException $r0;
        weka.core.Instance current#11;
        java.io.Reader $r1, $r4, $r5;
        weka.core.converters.ArffLoader$ArffReader $r2;

        this := @this: weka.core.converters.ArffLoader;

        structure := @parameter0: weka.core.Instances;

        this.<weka.core.converters.ArffLoader: weka.core.Instances m_structure> = structure;

        $i0 = virtualinvoke this.<weka.core.converters.ArffLoader: int getRetrieval()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 1 goto label1;

        $r0 = new java.io.IOException;

        specialinvoke $r0.<java.io.IOException: void <init>(java.lang.String)>("Cannot mix getting Instances in both incremental and batch modes");

        throw $r0;

     label1:
        virtualinvoke this.<weka.core.converters.ArffLoader: void setRetrieval(int)>(2);

        current#11 = null;

        $r1 = this.<weka.core.converters.ArffLoader: java.io.Reader m_sourceReader>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 == null goto label2;

        $r2 = this.<weka.core.converters.ArffLoader: weka.core.converters.ArffLoader$ArffReader m_ArffReader>;

        $r3 = this.<weka.core.converters.ArffLoader: weka.core.Instances m_structure>;

        current#11 = virtualinvoke $r2.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instance readInstance(weka.core.Instances)>($r3);

     label2:
        $r4 = this.<weka.core.converters.ArffLoader: java.io.Reader m_sourceReader>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        if $r4 == null goto label6;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(current#11);

        if current#11 != null goto label6;

     label3:
        $r5 = this.<weka.core.converters.ArffLoader: java.io.Reader m_sourceReader>;

        virtualinvoke $r5.<java.io.Reader: void close()>();

        this.<weka.core.converters.ArffLoader: java.io.Reader m_sourceReader> = null;

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

        ex = $r6;

        virtualinvoke ex.<java.lang.Exception: void printStackTrace()>();

     label6:
        return current#11;

        catch java.lang.Exception from label3 to label4 with label5;
    }


