    public static weka.core.Instances useFilter(weka.core.Instances, weka.filters.Filter) throws java.lang.Exception
    {
        weka.core.Instances data, newData;
        weka.filters.Filter filter;
        weka.core.Instance processed, $r0, $r1;
        int i#2, $i0;

        data := @parameter0: weka.core.Instances;

        filter := @parameter1: weka.filters.Filter;

        i#2 = 0;

     label1:
        $i0 = virtualinvoke data.<weka.core.Instances: int numInstances()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#2 >= $i0 goto label2;

        $r0 = virtualinvoke data.<weka.core.Instances: weka.core.Instance instance(int)>(i#2);

        virtualinvoke filter.<weka.filters.Filter: boolean input(weka.core.Instance)>($r0);

        i#2 = i#2 + 1;

        goto label1;

     label2:
        virtualinvoke filter.<weka.filters.Filter: boolean batchFinished()>();

        newData = virtualinvoke filter.<weka.filters.Filter: weka.core.Instances getOutputFormat()>();

     label3:
        $r1 = virtualinvoke filter.<weka.filters.Filter: weka.core.Instance output()>();

        processed = $r1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 == null goto label4;

        virtualinvoke newData.<weka.core.Instances: boolean add(weka.core.Instance)>(processed);

        goto label3;

     label4:
        return newData;
    }

    public void <init>()
    {
        weka.filters.Filter this;

        this := @this: weka.filters.Filter;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<weka.filters.Filter: weka.core.Instances m_OutputFormat> = null;

        this.<weka.filters.Filter: weka.core.Queue m_OutputQueue> = null;

        this.<weka.filters.Filter: weka.core.StringLocator m_OutputStringAtts> = null;

        this.<weka.filters.Filter: weka.core.StringLocator m_InputStringAtts> = null;

        this.<weka.filters.Filter: weka.core.RelationalLocator m_OutputRelAtts> = null;

        this.<weka.filters.Filter: weka.core.RelationalLocator m_InputRelAtts> = null;

        this.<weka.filters.Filter: weka.core.Instances m_InputFormat> = null;

        this.<weka.filters.Filter: boolean m_NewBatch> = 1;

        this.<weka.filters.Filter: boolean m_FirstBatchDone> = 0;

        this.<weka.filters.Filter: boolean m_Debug> = 0;

        this.<weka.filters.Filter: boolean m_DoNotCheckCapabilities> = 0;

        return;
    }

    public weka.core.Instances getOutputFormat()
    {
        weka.filters.Filter this;
        weka.core.Instances $r0, $r2, $r3;
        java.lang.NullPointerException $r1;

        this := @this: weka.filters.Filter;

        $r0 = this.<weka.filters.Filter: weka.core.Instances m_OutputFormat>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label1;

        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("No output format defined.");

        throw $r1;

     label1:
        $r2 = new weka.core.Instances;

        $r3 = this.<weka.filters.Filter: weka.core.Instances m_OutputFormat>;

        specialinvoke $r2.<weka.core.Instances: void <init>(weka.core.Instances,int)>($r3, 0);

        return $r2;
    }

    public weka.core.Instance output()
    {
        weka.filters.Filter this;
        weka.core.Instance result;
        weka.core.Instances $r0;
        java.lang.NullPointerException $r1;
        weka.core.Queue $r2, $r3;
        boolean $z0;
        java.lang.Object $r4;

        this := @this: weka.filters.Filter;

        $r0 = this.<weka.filters.Filter: weka.core.Instances m_OutputFormat>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label1;

        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("No output instance format defined");

        throw $r1;

     label1:
        $r2 = this.<weka.filters.Filter: weka.core.Queue m_OutputQueue>;

        $z0 = virtualinvoke $r2.<weka.core.Queue: boolean empty()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        return null;

     label2:
        $r3 = this.<weka.filters.Filter: weka.core.Queue m_OutputQueue>;

        $r4 = virtualinvoke $r3.<weka.core.Queue: java.lang.Object pop()>();

        result = (weka.core.Instance) $r4;

        return result;
    }

    protected weka.core.Instances getInputFormat()
    {
        weka.filters.Filter this;
        weka.core.Instances $r0;

        this := @this: weka.filters.Filter;

        $r0 = this.<weka.filters.Filter: weka.core.Instances m_InputFormat>;

        return $r0;
    }

    protected void setOutputFormat(weka.core.Instances)
    {
        weka.filters.Filter this;
        weka.core.Instances outputFormat, $r0, $r1, $r13;
        java.lang.String[] options, l4;
        int l5, l6#30;
        java.lang.String option, $r3, $r7, relationName#21, $r11;
        java.lang.StringBuilder $r2, $r4, $r5, $r8, $r9, $r10, $r12;
        java.lang.Class $r6;
        boolean $z0;
        weka.core.Queue $r14;

        this := @this: weka.filters.Filter;

        outputFormat := @parameter0: weka.core.Instances;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(outputFormat);

        if outputFormat == null goto label3;

        $r0 = virtualinvoke outputFormat.<weka.core.Instances: weka.core.Instances stringFreeStructure()>();

        this.<weka.filters.Filter: weka.core.Instances m_OutputFormat> = $r0;

        $r1 = this.<weka.filters.Filter: weka.core.Instances m_OutputFormat>;

        virtualinvoke this.<weka.filters.Filter: void initOutputLocators(weka.core.Instances,int[])>($r1, null);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke outputFormat.<weka.core.Instances: java.lang.String relationName()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r6 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        relationName#21 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = this instanceof weka.core.OptionHandler;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        options = interfaceinvoke this.<weka.core.OptionHandler: java.lang.String[] getOptions()>();

        l4 = options;

        l5 = lengthof l4;

        l6#30 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l6#30);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l5);

        if l6#30 >= l5 goto label2;

        option = l4[l6#30];

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(relationName#21);

        $r11 = virtualinvoke option.<java.lang.String: java.lang.String trim()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        relationName#21 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        l6#30 = l6#30 + 1;

        goto label1;

     label2:
        $r13 = this.<weka.filters.Filter: weka.core.Instances m_OutputFormat>;

        virtualinvoke $r13.<weka.core.Instances: void setRelationName(java.lang.String)>(relationName#21);

        goto label4;

     label3:
        this.<weka.filters.Filter: weka.core.Instances m_OutputFormat> = null;

     label4:
        $r14 = new weka.core.Queue;

        specialinvoke $r14.<weka.core.Queue: void <init>()>();

        this.<weka.filters.Filter: weka.core.Queue m_OutputQueue> = $r14;

        return;
    }

    protected void push(weka.core.Instance, boolean)
    {
        weka.filters.Filter this;
        boolean copyInstance;
        weka.core.Instance instance#1;
        weka.core.Instances $r0, $r2;
        java.lang.Object $r1;
        weka.core.Queue $r3;

        this := @this: weka.filters.Filter;

        instance#1 := @parameter0: weka.core.Instance;

        copyInstance := @parameter1: boolean;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(instance#1);

        if instance#1 == null goto label3;

        $r0 = interfaceinvoke instance#1.<weka.core.Instance: weka.core.Instances dataset()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(copyInstance);

        if copyInstance == 0 goto label1;

        $r1 = interfaceinvoke instance#1.<weka.core.Instance: java.lang.Object copy()>();

        instance#1 = (weka.core.Instance) $r1;

     label1:
        virtualinvoke this.<weka.filters.Filter: void copyValues(weka.core.Instance,boolean)>(instance#1, 0);

     label2:
        $r2 = this.<weka.filters.Filter: weka.core.Instances m_OutputFormat>;

        interfaceinvoke instance#1.<weka.core.Instance: void setDataset(weka.core.Instances)>($r2);

        $r3 = this.<weka.filters.Filter: weka.core.Queue m_OutputQueue>;

        virtualinvoke $r3.<weka.core.Queue: java.lang.Object push(java.lang.Object)>(instance#1);

     label3:
        return;
    }

    protected void flushInput()
    {
        weka.filters.Filter this;
        weka.core.StringLocator $r0, $r6, $r8;
        int[] $r1, $r3, $r9, $r13;
        int $i0, $i1;
        weka.core.RelationalLocator $r2, $r10, $r12;
        weka.core.Instances $r4, $r5, $r7, $r11, $r14;

        this := @this: weka.filters.Filter;

        $r0 = this.<weka.filters.Filter: weka.core.StringLocator m_InputStringAtts>;

        $r1 = virtualinvoke $r0.<weka.core.StringLocator: int[] getAttributeIndices()>();

        $i0 = lengthof $r1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 > 0 goto label1;

        $r2 = this.<weka.filters.Filter: weka.core.RelationalLocator m_InputRelAtts>;

        $r3 = virtualinvoke $r2.<weka.core.RelationalLocator: int[] getAttributeIndices()>();

        $i1 = lengthof $r3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 0 goto label2;

     label1:
        $r4 = this.<weka.filters.Filter: weka.core.Instances m_InputFormat>;

        $r5 = virtualinvoke $r4.<weka.core.Instances: weka.core.Instances stringFreeStructure()>();

        this.<weka.filters.Filter: weka.core.Instances m_InputFormat> = $r5;

        $r6 = new weka.core.StringLocator;

        $r7 = this.<weka.filters.Filter: weka.core.Instances m_InputFormat>;

        $r8 = this.<weka.filters.Filter: weka.core.StringLocator m_InputStringAtts>;

        $r9 = virtualinvoke $r8.<weka.core.StringLocator: int[] getAllowedIndices()>();

        specialinvoke $r6.<weka.core.StringLocator: void <init>(weka.core.Instances,int[])>($r7, $r9);

        this.<weka.filters.Filter: weka.core.StringLocator m_InputStringAtts> = $r6;

        $r10 = new weka.core.RelationalLocator;

        $r11 = this.<weka.filters.Filter: weka.core.Instances m_InputFormat>;

        $r12 = this.<weka.filters.Filter: weka.core.RelationalLocator m_InputRelAtts>;

        $r13 = virtualinvoke $r12.<weka.core.RelationalLocator: int[] getAllowedIndices()>();

        specialinvoke $r10.<weka.core.RelationalLocator: void <init>(weka.core.Instances,int[])>($r11, $r13);

        this.<weka.filters.Filter: weka.core.RelationalLocator m_InputRelAtts> = $r10;

        goto label3;

     label2:
        $r14 = this.<weka.filters.Filter: weka.core.Instances m_InputFormat>;

        virtualinvoke $r14.<weka.core.Instances: void delete()>();

     label3:
        return;
    }

    public int numPendingOutput()
    {
        weka.filters.Filter this;
        weka.core.Instances $r0;
        java.lang.NullPointerException $r1;
        weka.core.Queue $r2;
        int $i0;

        this := @this: weka.filters.Filter;

        $r0 = this.<weka.filters.Filter: weka.core.Instances m_OutputFormat>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label1;

        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("No output instance format defined");

        throw $r1;

     label1:
        $r2 = this.<weka.filters.Filter: weka.core.Queue m_OutputQueue>;

        $i0 = virtualinvoke $r2.<weka.core.Queue: int size()>();

        return $i0;
    }

    protected void copyValues(weka.core.Instance, boolean)
    {
        weka.filters.Filter this;
        weka.core.Instance instance;
        boolean isInput;
        weka.core.Instances $r1, $r4;
        weka.core.RelationalLocator $r2;
        weka.core.StringLocator $r5;

        this := @this: weka.filters.Filter;

        instance := @parameter0: weka.core.Instance;

        isInput := @parameter1: boolean;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isInput);

        if isInput == 0 goto label1;

        $r1 = this.<weka.filters.Filter: weka.core.Instances m_InputFormat>;

        goto label2;

     label1:
        $r1 = this.<weka.filters.Filter: weka.core.Instances m_OutputFormat>;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isInput);

        if isInput == 0 goto label3;

        $r2 = this.<weka.filters.Filter: weka.core.RelationalLocator m_InputRelAtts>;

        goto label4;

     label3:
        $r2 = this.<weka.filters.Filter: weka.core.RelationalLocator m_OutputRelAtts>;

     label4:
        staticinvoke <weka.core.RelationalLocator: void copyRelationalValues(weka.core.Instance,weka.core.Instances,weka.core.AttributeLocator)>(instance, $r1, $r2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isInput);

        if isInput == 0 goto label5;

        $r4 = this.<weka.filters.Filter: weka.core.Instances m_InputFormat>;

        goto label6;

     label5:
        $r4 = this.<weka.filters.Filter: weka.core.Instances m_OutputFormat>;

     label6:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isInput);

        if isInput == 0 goto label7;

        $r5 = this.<weka.filters.Filter: weka.core.StringLocator m_InputStringAtts>;

        goto label8;

     label7:
        $r5 = this.<weka.filters.Filter: weka.core.StringLocator m_OutputStringAtts>;

     label8:
        staticinvoke <weka.core.StringLocator: void copyStringValues(weka.core.Instance,weka.core.Instances,weka.core.AttributeLocator)>(instance, $r4, $r5);

        return;
    }

    protected void initOutputLocators(weka.core.Instances, int[])
    {
        weka.filters.Filter this;
        weka.core.Instances data;
        int[] indices;
        weka.core.StringLocator $r0, $r2;
        weka.core.RelationalLocator $r1, $r3;

        this := @this: weka.filters.Filter;

        data := @parameter0: weka.core.Instances;

        indices := @parameter1: int[];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(indices);

        if indices != null goto label1;

        $r0 = new weka.core.StringLocator;

        specialinvoke $r0.<weka.core.StringLocator: void <init>(weka.core.Instances)>(data);

        this.<weka.filters.Filter: weka.core.StringLocator m_OutputStringAtts> = $r0;

        $r1 = new weka.core.RelationalLocator;

        specialinvoke $r1.<weka.core.RelationalLocator: void <init>(weka.core.Instances)>(data);

        this.<weka.filters.Filter: weka.core.RelationalLocator m_OutputRelAtts> = $r1;

        goto label2;

     label1:
        $r2 = new weka.core.StringLocator;

        specialinvoke $r2.<weka.core.StringLocator: void <init>(weka.core.Instances,int[])>(data, indices);

        this.<weka.filters.Filter: weka.core.StringLocator m_OutputStringAtts> = $r2;

        $r3 = new weka.core.RelationalLocator;

        specialinvoke $r3.<weka.core.RelationalLocator: void <init>(weka.core.Instances,int[])>(data, indices);

        this.<weka.filters.Filter: weka.core.RelationalLocator m_OutputRelAtts> = $r3;

     label2:
        return;
    }

    protected void resetQueue()
    {
        weka.filters.Filter this;
        weka.core.Queue $r0;

        this := @this: weka.filters.Filter;

        $r0 = new weka.core.Queue;

        specialinvoke $r0.<weka.core.Queue: void <init>()>();

        this.<weka.filters.Filter: weka.core.Queue m_OutputQueue> = $r0;

        return;
    }

    protected void bufferInput(weka.core.Instance)
    {
        weka.filters.Filter this;
        weka.core.Instance instance#1, instance#6;
        java.lang.Object $r0;
        weka.core.Instances $r1;

        this := @this: weka.filters.Filter;

        instance#1 := @parameter0: weka.core.Instance;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(instance#1);

        if instance#1 == null goto label1;

        $r0 = interfaceinvoke instance#1.<weka.core.Instance: java.lang.Object copy()>();

        instance#6 = (weka.core.Instance) $r0;

        virtualinvoke this.<weka.filters.Filter: void copyValues(weka.core.Instance,boolean)>(instance#6, 1);

        $r1 = this.<weka.filters.Filter: weka.core.Instances m_InputFormat>;

        virtualinvoke $r1.<weka.core.Instances: boolean add(weka.core.Instance)>(instance#6);

     label1:
        return;
    }

    public boolean setInputFormat(weka.core.Instances) throws java.lang.Exception
    {
        weka.filters.Filter this;
        weka.core.Instances instanceInfo, $r0, $r2;
        weka.core.Queue $r1;

        this := @this: weka.filters.Filter;

        instanceInfo := @parameter0: weka.core.Instances;

        virtualinvoke this.<weka.filters.Filter: void testInputFormat(weka.core.Instances)>(instanceInfo);

        $r0 = virtualinvoke instanceInfo.<weka.core.Instances: weka.core.Instances stringFreeStructure()>();

        this.<weka.filters.Filter: weka.core.Instances m_InputFormat> = $r0;

        this.<weka.filters.Filter: weka.core.Instances m_OutputFormat> = null;

        $r1 = new weka.core.Queue;

        specialinvoke $r1.<weka.core.Queue: void <init>()>();

        this.<weka.filters.Filter: weka.core.Queue m_OutputQueue> = $r1;

        this.<weka.filters.Filter: boolean m_NewBatch> = 1;

        this.<weka.filters.Filter: boolean m_FirstBatchDone> = 0;

        $r2 = this.<weka.filters.Filter: weka.core.Instances m_InputFormat>;

        virtualinvoke this.<weka.filters.Filter: void initInputLocators(weka.core.Instances,int[])>($r2, null);

        return 0;
    }

    protected void testInputFormat(weka.core.Instances) throws java.lang.Exception
    {
        weka.filters.Filter this;
        weka.core.Instances instanceInfo;
        weka.core.Capabilities $r0;

        this := @this: weka.filters.Filter;

        instanceInfo := @parameter0: weka.core.Instances;

        $r0 = virtualinvoke this.<weka.filters.Filter: weka.core.Capabilities getCapabilities(weka.core.Instances)>(instanceInfo);

        virtualinvoke $r0.<weka.core.Capabilities: void testWithFail(weka.core.Instances)>(instanceInfo);

        return;
    }

    protected void initInputLocators(weka.core.Instances, int[])
    {
        weka.filters.Filter this;
        weka.core.Instances data;
        int[] indices;
        weka.core.StringLocator $r0, $r2;
        weka.core.RelationalLocator $r1, $r3;

        this := @this: weka.filters.Filter;

        data := @parameter0: weka.core.Instances;

        indices := @parameter1: int[];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(indices);

        if indices != null goto label1;

        $r0 = new weka.core.StringLocator;

        specialinvoke $r0.<weka.core.StringLocator: void <init>(weka.core.Instances)>(data);

        this.<weka.filters.Filter: weka.core.StringLocator m_InputStringAtts> = $r0;

        $r1 = new weka.core.RelationalLocator;

        specialinvoke $r1.<weka.core.RelationalLocator: void <init>(weka.core.Instances)>(data);

        this.<weka.filters.Filter: weka.core.RelationalLocator m_InputRelAtts> = $r1;

        goto label2;

     label1:
        $r2 = new weka.core.StringLocator;

        specialinvoke $r2.<weka.core.StringLocator: void <init>(weka.core.Instances,int[])>(data, indices);

        this.<weka.filters.Filter: weka.core.StringLocator m_InputStringAtts> = $r2;

        $r3 = new weka.core.RelationalLocator;

        specialinvoke $r3.<weka.core.RelationalLocator: void <init>(weka.core.Instances,int[])>(data, indices);

        this.<weka.filters.Filter: weka.core.RelationalLocator m_InputRelAtts> = $r3;

     label2:
        return;
    }

    public weka.core.Capabilities getCapabilities(weka.core.Instances)
    {
        weka.filters.Filter this;
        weka.core.Instances data;
        weka.core.Capabilities result, classes;
        java.util.Iterator iter;
        weka.core.Capabilities$Capability cap, $r1, $r2, $r3;
        int $i0;
        boolean $z0;
        java.lang.Object $r0;

        this := @this: weka.filters.Filter;

        data := @parameter0: weka.core.Instances;

        result = virtualinvoke this.<weka.filters.Filter: weka.core.Capabilities getCapabilities()>();

        $i0 = virtualinvoke data.<weka.core.Instances: int classIndex()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != -1 goto label2;

        classes = virtualinvoke result.<weka.core.Capabilities: weka.core.Capabilities getClassCapabilities()>();

        iter = virtualinvoke classes.<weka.core.Capabilities: java.util.Iterator capabilities()>();

     label1:
        $z0 = interfaceinvoke iter.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        $r0 = interfaceinvoke iter.<java.util.Iterator: java.lang.Object next()>();

        cap = (weka.core.Capabilities$Capability) $r0;

        $r1 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability NO_CLASS>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(cap);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if cap == $r1 goto label1;

        virtualinvoke result.<weka.core.Capabilities: void disable(weka.core.Capabilities$Capability)>(cap);

        virtualinvoke result.<weka.core.Capabilities: void disableDependency(weka.core.Capabilities$Capability)>(cap);

        goto label1;

     label2:
        $r2 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability NO_CLASS>;

        virtualinvoke result.<weka.core.Capabilities: void disable(weka.core.Capabilities$Capability)>($r2);

        $r3 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability NO_CLASS>;

        virtualinvoke result.<weka.core.Capabilities: void disableDependency(weka.core.Capabilities$Capability)>($r3);

     label3:
        return result;
    }

    public weka.core.Capabilities getCapabilities()
    {
        weka.filters.Filter this;
        weka.core.Capabilities result, $r0;

        this := @this: weka.filters.Filter;

        $r0 = new weka.core.Capabilities;

        specialinvoke $r0.<weka.core.Capabilities: void <init>(weka.core.CapabilitiesHandler)>(this);

        result = $r0;

        virtualinvoke result.<weka.core.Capabilities: void enableAll()>();

        virtualinvoke result.<weka.core.Capabilities: void setMinimumNumberInstances(int)>(0);

        return result;
    }

    public boolean getDoNotCheckCapabilities()
    {
        weka.filters.Filter this;
        boolean $z0;

        this := @this: weka.filters.Filter;

        $z0 = this.<weka.filters.Filter: boolean m_DoNotCheckCapabilities>;

        return $z0;
    }


