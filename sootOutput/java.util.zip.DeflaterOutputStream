    public void write(byte[], int, int) throws java.io.IOException
    {
        java.util.zip.DeflaterOutputStream l0;
        byte[] l1;
        int l2, l3, $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.util.zip.Deflater $r0, $r3, $r4, $r5;
        boolean $z0, $z1, $z2;
        java.io.IOException $r1;
        java.lang.IndexOutOfBoundsException $r2;

        l0 := @this: java.util.zip.DeflaterOutputStream;

        l1 := @parameter0: byte[];

        l2 := @parameter1: int;

        l3 := @parameter2: int;

        $r0 = l0.<java.util.zip.DeflaterOutputStream: java.util.zip.Deflater def>;

        $z0 = virtualinvoke $r0.<java.util.zip.Deflater: boolean finished()>();

        if $z0 == 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("write beyond end of stream");

        throw $r1;

     label1:
        $i0 = l2 | l3;

        $i1 = l2 + l3;

        $i2 = $i0 | $i1;

        $i3 = lengthof l1;

        $i4 = l2 + l3;

        $i5 = $i3 - $i4;

        $i6 = $i2 | $i5;

        if $i6 >= 0 goto label2;

        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label2:
        if l3 != 0 goto label3;

        return;

     label3:
        $r3 = l0.<java.util.zip.DeflaterOutputStream: java.util.zip.Deflater def>;

        $z1 = virtualinvoke $r3.<java.util.zip.Deflater: boolean finished()>();

        if $z1 != 0 goto label5;

        $r4 = l0.<java.util.zip.DeflaterOutputStream: java.util.zip.Deflater def>;

        virtualinvoke $r4.<java.util.zip.Deflater: void setInput(byte[],int,int)>(l1, l2, l3);

     label4:
        $r5 = l0.<java.util.zip.DeflaterOutputStream: java.util.zip.Deflater def>;

        $z2 = virtualinvoke $r5.<java.util.zip.Deflater: boolean needsInput()>();

        if $z2 != 0 goto label5;

        virtualinvoke l0.<java.util.zip.DeflaterOutputStream: void deflate()>();

        goto label4;

     label5:
        return;
    }

    public void close() throws java.io.IOException
    {
        java.util.zip.DeflaterOutputStream l0;
        boolean $z0, $z1;
        java.util.zip.Deflater $r0;
        java.io.OutputStream $r1;

        l0 := @this: java.util.zip.DeflaterOutputStream;

        $z0 = l0.<java.util.zip.DeflaterOutputStream: boolean closed>;

        if $z0 != 0 goto label2;

        virtualinvoke l0.<java.util.zip.DeflaterOutputStream: void finish()>();

        $z1 = l0.<java.util.zip.DeflaterOutputStream: boolean usesDefaultDeflater>;

        if $z1 == 0 goto label1;

        $r0 = l0.<java.util.zip.DeflaterOutputStream: java.util.zip.Deflater def>;

        virtualinvoke $r0.<java.util.zip.Deflater: void end()>();

     label1:
        $r1 = l0.<java.util.zip.DeflaterOutputStream: java.io.OutputStream out>;

        virtualinvoke $r1.<java.io.OutputStream: void close()>();

        l0.<java.util.zip.DeflaterOutputStream: boolean closed> = 1;

     label2:
        return;
    }

    public void finish() throws java.io.IOException
    {
        java.util.zip.DeflaterOutputStream l0;
        java.util.zip.Deflater $r0, $r1, $r2;
        boolean $z0, $z1;

        l0 := @this: java.util.zip.DeflaterOutputStream;

        $r0 = l0.<java.util.zip.DeflaterOutputStream: java.util.zip.Deflater def>;

        $z0 = virtualinvoke $r0.<java.util.zip.Deflater: boolean finished()>();

        if $z0 != 0 goto label2;

        $r1 = l0.<java.util.zip.DeflaterOutputStream: java.util.zip.Deflater def>;

        virtualinvoke $r1.<java.util.zip.Deflater: void finish()>();

     label1:
        $r2 = l0.<java.util.zip.DeflaterOutputStream: java.util.zip.Deflater def>;

        $z1 = virtualinvoke $r2.<java.util.zip.Deflater: boolean finished()>();

        if $z1 != 0 goto label2;

        virtualinvoke l0.<java.util.zip.DeflaterOutputStream: void deflate()>();

        goto label1;

     label2:
        return;
    }

    protected void deflate() throws java.io.IOException
    {
        java.util.zip.DeflaterOutputStream l0;
        int l1, $i0;
        java.util.zip.Deflater $r0;
        byte[] $r1, $r2, $r4;
        java.io.OutputStream $r3;

        l0 := @this: java.util.zip.DeflaterOutputStream;

        $r0 = l0.<java.util.zip.DeflaterOutputStream: java.util.zip.Deflater def>;

        $r1 = l0.<java.util.zip.DeflaterOutputStream: byte[] buf>;

        $r2 = l0.<java.util.zip.DeflaterOutputStream: byte[] buf>;

        $i0 = lengthof $r2;

        l1 = virtualinvoke $r0.<java.util.zip.Deflater: int deflate(byte[],int,int)>($r1, 0, $i0);

        if l1 <= 0 goto label1;

        $r3 = l0.<java.util.zip.DeflaterOutputStream: java.io.OutputStream out>;

        $r4 = l0.<java.util.zip.DeflaterOutputStream: byte[] buf>;

        virtualinvoke $r3.<java.io.OutputStream: void write(byte[],int,int)>($r4, 0, l1);

     label1:
        return;
    }

    public void <init>(java.io.OutputStream, java.util.zip.Deflater)
    {
        java.util.zip.DeflaterOutputStream l0;
        java.io.OutputStream l1;
        java.util.zip.Deflater l2;

        l0 := @this: java.util.zip.DeflaterOutputStream;

        l1 := @parameter0: java.io.OutputStream;

        l2 := @parameter1: java.util.zip.Deflater;

        specialinvoke l0.<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Deflater,int,boolean)>(l1, l2, 512, 0);

        return;
    }

    public void <init>(java.io.OutputStream, java.util.zip.Deflater, int, boolean)
    {
        java.util.zip.DeflaterOutputStream l0;
        java.io.OutputStream l1;
        java.util.zip.Deflater l2;
        int l3;
        boolean l4;
        java.lang.NullPointerException $r0;
        java.lang.IllegalArgumentException $r1;
        byte[] $r2;

        l0 := @this: java.util.zip.DeflaterOutputStream;

        l1 := @parameter0: java.io.OutputStream;

        l2 := @parameter1: java.util.zip.Deflater;

        l3 := @parameter2: int;

        l4 := @parameter3: boolean;

        specialinvoke l0.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>(l1);

        l0.<java.util.zip.DeflaterOutputStream: boolean closed> = 0;

        l0.<java.util.zip.DeflaterOutputStream: boolean usesDefaultDeflater> = 0;

        if l1 == null goto label1;

        if l2 != null goto label2;

     label1:
        $r0 = new java.lang.NullPointerException;

        specialinvoke $r0.<java.lang.NullPointerException: void <init>()>();

        throw $r0;

     label2:
        if l3 > 0 goto label3;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("buffer size <= 0");

        throw $r1;

     label3:
        l0.<java.util.zip.DeflaterOutputStream: java.util.zip.Deflater def> = l2;

        $r2 = newarray (byte)[l3];

        l0.<java.util.zip.DeflaterOutputStream: byte[] buf> = $r2;

        l0.<java.util.zip.DeflaterOutputStream: boolean syncFlush> = l4;

        return;
    }


