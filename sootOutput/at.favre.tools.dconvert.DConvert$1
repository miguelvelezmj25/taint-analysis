    void <init>(at.favre.tools.dconvert.DConvert, float, java.util.List, at.favre.tools.dconvert.arg.Arguments, float)
    {
        at.favre.tools.dconvert.DConvert$1 this;
        at.favre.tools.dconvert.DConvert this$0;
        float l2, l5;
        java.util.List l3;
        at.favre.tools.dconvert.arg.Arguments l4;

        this := @this: at.favre.tools.dconvert.DConvert$1;

        this$0 := @parameter0: at.favre.tools.dconvert.DConvert;

        l2 := @parameter1: float;

        l3 := @parameter2: java.util.List;

        l4 := @parameter3: at.favre.tools.dconvert.arg.Arguments;

        l5 := @parameter4: float;

        this.<at.favre.tools.dconvert.DConvert$1: at.favre.tools.dconvert.DConvert this$0> = this$0;

        this.<at.favre.tools.dconvert.DConvert$1: float val$convertPercentage> = l2;

        this.<at.favre.tools.dconvert.DConvert$1: java.util.List val$postProcessors> = l3;

        this.<at.favre.tools.dconvert.DConvert$1: at.favre.tools.dconvert.arg.Arguments val$args> = l4;

        this.<at.favre.tools.dconvert.DConvert$1: float val$postProcessPercentage> = l5;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void onFinished(int, java.util.List, java.lang.StringBuilder, java.util.List, boolean)
    {
        at.favre.tools.dconvert.DConvert$1 this;
        int finishedJobsConverters;
        java.util.List outFiles, exceptionsConverters, $r6;
        java.lang.StringBuilder logConverters, $r2;
        boolean haltedDuringProcessConverters;
        at.favre.tools.dconvert.DConvert$1$1 $r0;
        at.favre.tools.dconvert.DConvert $r1, $r4;
        at.favre.tools.dconvert.WorkerHandler $r5;
        at.favre.tools.dconvert.arg.Arguments $r7;

        this := @this: at.favre.tools.dconvert.DConvert$1;

        finishedJobsConverters := @parameter0: int;

        outFiles := @parameter1: java.util.List;

        logConverters := @parameter2: java.lang.StringBuilder;

        exceptionsConverters := @parameter3: java.util.List;

        haltedDuringProcessConverters := @parameter4: boolean;

        $r1 = this.<at.favre.tools.dconvert.DConvert$1: at.favre.tools.dconvert.DConvert this$0>;

        $r2 = staticinvoke <at.favre.tools.dconvert.DConvert: java.lang.StringBuilder access$100(at.favre.tools.dconvert.DConvert)>($r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(logConverters);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(haltedDuringProcessConverters);

        if haltedDuringProcessConverters == 0 goto label1;

        $r4 = this.<at.favre.tools.dconvert.DConvert$1: at.favre.tools.dconvert.DConvert this$0>;

        staticinvoke <at.favre.tools.dconvert.DConvert: void access$200(at.favre.tools.dconvert.DConvert,int,java.util.List,boolean)>($r4, finishedJobsConverters, exceptionsConverters, 1);

        goto label2;

     label1:
        $r5 = new at.favre.tools.dconvert.WorkerHandler;

        $r6 = this.<at.favre.tools.dconvert.DConvert$1: java.util.List val$postProcessors>;

        $r7 = this.<at.favre.tools.dconvert.DConvert$1: at.favre.tools.dconvert.arg.Arguments val$args>;

        $r0 = new at.favre.tools.dconvert.DConvert$1$1;

        specialinvoke $r0.<at.favre.tools.dconvert.DConvert$1$1: void <init>(at.favre.tools.dconvert.DConvert$1,java.util.List,int)>(this, exceptionsConverters, finishedJobsConverters);

        specialinvoke $r5.<at.favre.tools.dconvert.WorkerHandler: void <init>(java.util.List,at.favre.tools.dconvert.arg.Arguments,at.favre.tools.dconvert.WorkerHandler$Callback)>($r6, $r7, $r0);

        virtualinvoke $r5.<at.favre.tools.dconvert.WorkerHandler: void start(java.util.List)>(outFiles);

     label2:
        return;
    }

    public void onProgress(float)
    {
        at.favre.tools.dconvert.DConvert$1 this;
        float percent, $f0, $f1;
        at.favre.tools.dconvert.DConvert $r0;
        at.favre.tools.dconvert.DConvert$HandlerCallback $r1;

        this := @this: at.favre.tools.dconvert.DConvert$1;

        percent := @parameter0: float;

        $r0 = this.<at.favre.tools.dconvert.DConvert$1: at.favre.tools.dconvert.DConvert this$0>;

        $r1 = staticinvoke <at.favre.tools.dconvert.DConvert: at.favre.tools.dconvert.DConvert$HandlerCallback access$000(at.favre.tools.dconvert.DConvert)>($r0);

        $f0 = this.<at.favre.tools.dconvert.DConvert$1: float val$convertPercentage>;

        $f1 = $f0 * percent;

        interfaceinvoke $r1.<at.favre.tools.dconvert.DConvert$HandlerCallback: void onProgress(float)>($f1);

        return;
    }


