    static void <clinit>()
    {
        java.lang.Object $r0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <java.util.HashSet: java.lang.Object PRESENT> = $r0;

        return;
    }

    public void <init>()
    {
        java.util.HashSet l0;
        java.util.HashMap $r0;

        l0 := @this: java.util.HashSet;

        specialinvoke l0.<java.util.AbstractSet: void <init>()>();

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        l0.<java.util.HashSet: java.util.HashMap map> = $r0;

        return;
    }

    public boolean add(java.lang.Object)
    {
        java.util.HashSet l0;
        java.lang.Object l1, $r0, $r2;
        java.util.HashMap $r1;
        boolean $z0;

        l0 := @this: java.util.HashSet;

        l1 := @parameter0: java.lang.Object;

        $r1 = l0.<java.util.HashSet: java.util.HashMap map>;

        $r0 = <java.util.HashSet: java.lang.Object PRESENT>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(l1, $r0);

        if $r2 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.util.Iterator iterator()
    {
        java.util.HashSet l0;
        java.util.HashMap $r0;
        java.util.Set $r1;
        java.util.Iterator $r2;

        l0 := @this: java.util.HashSet;

        $r0 = l0.<java.util.HashSet: java.util.HashMap map>;

        $r1 = virtualinvoke $r0.<java.util.HashMap: java.util.Set keySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        return $r2;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.HashSet l0;
        java.lang.Object l1, $r1, $r2;
        java.util.HashMap $r0;
        boolean $z0;

        l0 := @this: java.util.HashSet;

        l1 := @parameter0: java.lang.Object;

        $r0 = l0.<java.util.HashSet: java.util.HashMap map>;

        $r1 = virtualinvoke $r0.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(l1);

        $r2 = <java.util.HashSet: java.lang.Object PRESENT>;

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int size()
    {
        java.util.HashSet l0;
        java.util.HashMap $r0;
        int $i0;

        l0 := @this: java.util.HashSet;

        $r0 = l0.<java.util.HashSet: java.util.HashMap map>;

        $i0 = virtualinvoke $r0.<java.util.HashMap: int size()>();

        return $i0;
    }


