    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "com/sleepycat/je/cleaner/TrackedFileSummary";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sleepycat.je.cleaner.TrackedFileSummary: boolean $assertionsDisabled> = $z1;

        return;
    }

    void trackObsolete(long, boolean)
    {
        com.sleepycat.je.cleaner.TrackedFileSummary this;
        long offset;
        boolean checkDupOffsets, $z0, $z1;
        int adjustMem#4, $i0, $i1;
        com.sleepycat.je.cleaner.OffsetList $r0, $r1, $r2;

        this := @this: com.sleepycat.je.cleaner.TrackedFileSummary;

        offset := @parameter0: long;

        checkDupOffsets := @parameter1: boolean;

        $z0 = this.<com.sleepycat.je.cleaner.TrackedFileSummary: boolean trackDetail>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        return;

     label1:
        adjustMem#4 = 0;

        $r0 = this.<com.sleepycat.je.cleaner.TrackedFileSummary: com.sleepycat.je.cleaner.OffsetList obsoleteOffsets>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label2;

        $r1 = new com.sleepycat.je.cleaner.OffsetList;

        specialinvoke $r1.<com.sleepycat.je.cleaner.OffsetList: void <init>()>();

        this.<com.sleepycat.je.cleaner.TrackedFileSummary: com.sleepycat.je.cleaner.OffsetList obsoleteOffsets> = $r1;

        $i0 = <com.sleepycat.je.dbi.MemoryBudget: int TFS_LIST_INITIAL_OVERHEAD>;

        adjustMem#4 = adjustMem#4 + $i0;

     label2:
        $r2 = this.<com.sleepycat.je.cleaner.TrackedFileSummary: com.sleepycat.je.cleaner.OffsetList obsoleteOffsets>;

        $z1 = virtualinvoke $r2.<com.sleepycat.je.cleaner.OffsetList: boolean add(long,boolean)>(offset, checkDupOffsets);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label3;

        $i1 = <com.sleepycat.je.dbi.MemoryBudget: int TFS_LIST_SEGMENT_OVERHEAD>;

        adjustMem#4 = adjustMem#4 + $i1;

     label3:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(adjustMem#4);

        if adjustMem#4 == 0 goto label4;

        specialinvoke this.<com.sleepycat.je.cleaner.TrackedFileSummary: void updateMemoryBudget(int)>(adjustMem#4);

     label4:
        return;
    }

    private void updateMemoryBudget(int)
    {
        com.sleepycat.je.cleaner.TrackedFileSummary this;
        int delta, $i0, $i1;
        boolean $z0;
        com.sleepycat.je.cleaner.BaseUtilizationTracker $r0, $r3;
        java.lang.AssertionError $r1;
        com.sleepycat.je.dbi.EnvironmentImpl $r4;
        com.sleepycat.je.dbi.MemoryBudget $r5;
        long $l2;

        this := @this: com.sleepycat.je.cleaner.TrackedFileSummary;

        delta := @parameter0: int;

        $z0 = <com.sleepycat.je.cleaner.TrackedFileSummary: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r0 = this.<com.sleepycat.je.cleaner.TrackedFileSummary: com.sleepycat.je.cleaner.BaseUtilizationTracker tracker>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $i0 = this.<com.sleepycat.je.cleaner.TrackedFileSummary: int memSize>;

        $i1 = $i0 + delta;

        this.<com.sleepycat.je.cleaner.TrackedFileSummary: int memSize> = $i1;

        $r3 = this.<com.sleepycat.je.cleaner.TrackedFileSummary: com.sleepycat.je.cleaner.BaseUtilizationTracker tracker>;

        $r4 = $r3.<com.sleepycat.je.cleaner.BaseUtilizationTracker: com.sleepycat.je.dbi.EnvironmentImpl env>;

        $r5 = virtualinvoke $r4.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.MemoryBudget getMemoryBudget()>();

        $l2 = (long) delta;

        virtualinvoke $r5.<com.sleepycat.je.dbi.MemoryBudget: void updateAdminMemoryUsage(long)>($l2);

        return;
    }

    void <init>(com.sleepycat.je.cleaner.BaseUtilizationTracker, long, boolean)
    {
        com.sleepycat.je.cleaner.TrackedFileSummary this;
        com.sleepycat.je.cleaner.BaseUtilizationTracker tracker;
        long fileNum;
        boolean trackDetail;

        this := @this: com.sleepycat.je.cleaner.TrackedFileSummary;

        tracker := @parameter0: com.sleepycat.je.cleaner.BaseUtilizationTracker;

        fileNum := @parameter1: long;

        trackDetail := @parameter2: boolean;

        specialinvoke this.<com.sleepycat.je.cleaner.FileSummary: void <init>()>();

        this.<com.sleepycat.je.cleaner.TrackedFileSummary: boolean allowFlush> = 1;

        this.<com.sleepycat.je.cleaner.TrackedFileSummary: com.sleepycat.je.cleaner.BaseUtilizationTracker tracker> = tracker;

        this.<com.sleepycat.je.cleaner.TrackedFileSummary: long fileNum> = fileNum;

        this.<com.sleepycat.je.cleaner.TrackedFileSummary: boolean trackDetail> = trackDetail;

        return;
    }

    void addTrackedSummary(com.sleepycat.je.cleaner.TrackedFileSummary)
    {
        com.sleepycat.je.cleaner.TrackedFileSummary this, other;
        int $i0, $i1, $i2, $i3, $i4;
        com.sleepycat.je.cleaner.OffsetList $r1, $r2, $r3, $r4, $r5;
        boolean $z0;

        this := @this: com.sleepycat.je.cleaner.TrackedFileSummary;

        other := @parameter0: com.sleepycat.je.cleaner.TrackedFileSummary;

        virtualinvoke this.<com.sleepycat.je.cleaner.TrackedFileSummary: void add(com.sleepycat.je.cleaner.FileSummary)>(other);

        $i0 = this.<com.sleepycat.je.cleaner.TrackedFileSummary: int memSize>;

        $i1 = other.<com.sleepycat.je.cleaner.TrackedFileSummary: int memSize>;

        $i2 = $i0 + $i1;

        this.<com.sleepycat.je.cleaner.TrackedFileSummary: int memSize> = $i2;

        $r1 = other.<com.sleepycat.je.cleaner.TrackedFileSummary: com.sleepycat.je.cleaner.OffsetList obsoleteOffsets>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 == null goto label2;

        $r2 = this.<com.sleepycat.je.cleaner.TrackedFileSummary: com.sleepycat.je.cleaner.OffsetList obsoleteOffsets>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        if $r2 == null goto label1;

        $r3 = this.<com.sleepycat.je.cleaner.TrackedFileSummary: com.sleepycat.je.cleaner.OffsetList obsoleteOffsets>;

        $r4 = other.<com.sleepycat.je.cleaner.TrackedFileSummary: com.sleepycat.je.cleaner.OffsetList obsoleteOffsets>;

        $z0 = virtualinvoke $r3.<com.sleepycat.je.cleaner.OffsetList: boolean merge(com.sleepycat.je.cleaner.OffsetList)>($r4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $i3 = <com.sleepycat.je.dbi.MemoryBudget: int TFS_LIST_SEGMENT_OVERHEAD>;

        $i4 = neg $i3;

        specialinvoke this.<com.sleepycat.je.cleaner.TrackedFileSummary: void updateMemoryBudget(int)>($i4);

        goto label2;

     label1:
        $r5 = other.<com.sleepycat.je.cleaner.TrackedFileSummary: com.sleepycat.je.cleaner.OffsetList obsoleteOffsets>;

        this.<com.sleepycat.je.cleaner.TrackedFileSummary: com.sleepycat.je.cleaner.OffsetList obsoleteOffsets> = $r5;

     label2:
        return;
    }

    void setAllowFlush(boolean)
    {
        com.sleepycat.je.cleaner.TrackedFileSummary this;
        boolean allowFlush;

        this := @this: com.sleepycat.je.cleaner.TrackedFileSummary;

        allowFlush := @parameter0: boolean;

        this.<com.sleepycat.je.cleaner.TrackedFileSummary: boolean allowFlush> = allowFlush;

        return;
    }

    public long[] getObsoleteOffsets()
    {
        com.sleepycat.je.cleaner.TrackedFileSummary this;
        com.sleepycat.je.cleaner.OffsetList $r0, $r1;
        long[] $r2;

        this := @this: com.sleepycat.je.cleaner.TrackedFileSummary;

        $r0 = this.<com.sleepycat.je.cleaner.TrackedFileSummary: com.sleepycat.je.cleaner.OffsetList obsoleteOffsets>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label1;

        $r1 = this.<com.sleepycat.je.cleaner.TrackedFileSummary: com.sleepycat.je.cleaner.OffsetList obsoleteOffsets>;

        $r2 = virtualinvoke $r1.<com.sleepycat.je.cleaner.OffsetList: long[] toArray()>();

        return $r2;

     label1:
        return null;
    }

    public long getFileNumber()
    {
        com.sleepycat.je.cleaner.TrackedFileSummary this;
        long $l0;

        this := @this: com.sleepycat.je.cleaner.TrackedFileSummary;

        $l0 = this.<com.sleepycat.je.cleaner.TrackedFileSummary: long fileNum>;

        return $l0;
    }

    public void reset()
    {
        com.sleepycat.je.cleaner.TrackedFileSummary this;
        boolean $z0;
        com.sleepycat.je.cleaner.BaseUtilizationTracker $r0, $r2;
        java.lang.AssertionError $r1;
        int $i0, $i1, $i2;

        this := @this: com.sleepycat.je.cleaner.TrackedFileSummary;

        $z0 = <com.sleepycat.je.cleaner.TrackedFileSummary: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r0 = this.<com.sleepycat.je.cleaner.TrackedFileSummary: com.sleepycat.je.cleaner.BaseUtilizationTracker tracker>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        this.<com.sleepycat.je.cleaner.TrackedFileSummary: com.sleepycat.je.cleaner.OffsetList obsoleteOffsets> = null;

        $r2 = this.<com.sleepycat.je.cleaner.TrackedFileSummary: com.sleepycat.je.cleaner.BaseUtilizationTracker tracker>;

        virtualinvoke $r2.<com.sleepycat.je.cleaner.BaseUtilizationTracker: void resetFile(com.sleepycat.je.cleaner.TrackedFileSummary)>(this);

        $i0 = this.<com.sleepycat.je.cleaner.TrackedFileSummary: int memSize>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label2;

        $i1 = this.<com.sleepycat.je.cleaner.TrackedFileSummary: int memSize>;

        $i2 = 0 - $i1;

        specialinvoke this.<com.sleepycat.je.cleaner.TrackedFileSummary: void updateMemoryBudget(int)>($i2);

     label2:
        specialinvoke this.<com.sleepycat.je.cleaner.FileSummary: void reset()>();

        return;
    }

    public boolean getAllowFlush()
    {
        com.sleepycat.je.cleaner.TrackedFileSummary this;
        boolean $z0;

        this := @this: com.sleepycat.je.cleaner.TrackedFileSummary;

        $z0 = this.<com.sleepycat.je.cleaner.TrackedFileSummary: boolean allowFlush>;

        return $z0;
    }


