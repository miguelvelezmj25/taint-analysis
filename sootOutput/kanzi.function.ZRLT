    public int getMaxEncodedLength(int)
    {
        kanzi.function.ZRLT this;
        int srcLen;

        this := @this: kanzi.function.ZRLT;

        srcLen := @parameter0: int;

        return srcLen;
    }

    public boolean forward(kanzi.SliceByteArray, kanzi.SliceByteArray)
    {
        kanzi.function.ZRLT this;
        kanzi.SliceByteArray input, output;
        int count, srcEnd, dstEnd, dstEnd2, $i0, $i1, $i2, $i3, srcIdx#28, dstIdx#31, runLength#41, log2#58, val2#62, $i4, $i5, $i6, $i7, $i9, $i11;
        byte[] src, dst, $r0, $r1;
        boolean $z0, $z1, $z2;
        byte val#49, $b8, $b10, $b12;
        short val#85;

        this := @this: kanzi.function.ZRLT;

        input := @parameter0: kanzi.SliceByteArray;

        output := @parameter1: kanzi.SliceByteArray;

        $z0 = staticinvoke <kanzi.SliceByteArray: boolean isValid(kanzi.SliceByteArray)>(input);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label01;

        $z1 = staticinvoke <kanzi.SliceByteArray: boolean isValid(kanzi.SliceByteArray)>(output);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label02;

     label01:
        return 0;

     label02:
        $r0 = input.<kanzi.SliceByteArray: byte[] array>;

        $r1 = output.<kanzi.SliceByteArray: byte[] array>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r0 != $r1 goto label03;

        return 0;

     label03:
        count = input.<kanzi.SliceByteArray: int length>;

        $i0 = output.<kanzi.SliceByteArray: int length>;

        $i1 = output.<kanzi.SliceByteArray: int index>;

        $i2 = $i0 - $i1;

        $i3 = virtualinvoke this.<kanzi.function.ZRLT: int getMaxEncodedLength(int)>(count);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i2 >= $i3 goto label04;

        return 0;

     label04:
        src = input.<kanzi.SliceByteArray: byte[] array>;

        dst = output.<kanzi.SliceByteArray: byte[] array>;

        srcIdx#28 = input.<kanzi.SliceByteArray: int index>;

        dstIdx#31 = output.<kanzi.SliceByteArray: int index>;

        srcEnd = srcIdx#28 + count;

        dstEnd = lengthof dst;

        dstEnd2 = dstEnd - 2;

        runLength#41 = 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dstIdx#31);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dstEnd);

        if dstIdx#31 >= dstEnd goto label17;

     label05:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(srcIdx#28);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(srcEnd);

        if srcIdx#28 >= srcEnd goto label17;

        val#49 = src[srcIdx#28];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(val#49);

        if val#49 != 0 goto label06;

        runLength#41 = runLength#41 + 1;

        srcIdx#28 = srcIdx#28 + 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(srcIdx#28);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(srcEnd);

        if srcIdx#28 >= srcEnd goto label06;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(runLength#41);

        if runLength#41 >= 2147483647 goto label06;

        goto label05;

     label06:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(runLength#41);

        if runLength#41 <= 1 goto label11;

        log2#58 = 1;

        val2#62 = runLength#41 >> 1;

     label07:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(val2#62);

        if val2#62 <= 1 goto label08;

        log2#58 = log2#58 + 1;

        val2#62 = val2#62 >> 1;

        goto label07;

     label08:
        $i4 = dstEnd - log2#58;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dstIdx#31);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if dstIdx#31 < $i4 goto label09;

        goto label17;

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(log2#58);

        if log2#58 <= 0 goto label10;

        log2#58 = log2#58 + -1;

        $i5 = dstIdx#31;

        dstIdx#31 = dstIdx#31 + 1;

        $i6 = runLength#41 >> log2#58;

        $i7 = $i6 & 1;

        $b8 = (byte) $i7;

        dst[$i5] = $b8;

        goto label09;

     label10:
        runLength#41 = 1;

        goto label05;

     label11:
        val#85 = val#49 & 255;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(val#85);

        if val#85 < 254 goto label13;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dstIdx#31);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dstEnd2);

        if dstIdx#31 < dstEnd2 goto label12;

        goto label17;

     label12:
        dst[dstIdx#31] = -1;

        dstIdx#31 = dstIdx#31 + 1;

        $i9 = val#85 - 254;

        $b10 = (byte) $i9;

        dst[dstIdx#31] = $b10;

        goto label15;

     label13:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dstIdx#31);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dstEnd);

        if dstIdx#31 < dstEnd goto label14;

        goto label17;

     label14:
        $i11 = val#85 + 1;

        $b12 = (byte) $i11;

        dst[dstIdx#31] = $b12;

     label15:
        srcIdx#28 = srcIdx#28 + 1;

        dstIdx#31 = dstIdx#31 + 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dstIdx#31);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dstEnd);

        if dstIdx#31 < dstEnd goto label16;

        goto label17;

     label16:
        goto label05;

     label17:
        input.<kanzi.SliceByteArray: int index> = srcIdx#28;

        output.<kanzi.SliceByteArray: int index> = dstIdx#31;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(srcIdx#28);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(srcEnd);

        if srcIdx#28 != srcEnd goto label18;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(runLength#41);

        if runLength#41 != 1 goto label18;

        $z2 = 1;

        goto label19;

     label18:
        $z2 = 0;

     label19:
        return $z2;
    }

    public void <init>()
    {
        kanzi.function.ZRLT this;

        this := @this: kanzi.function.ZRLT;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }


