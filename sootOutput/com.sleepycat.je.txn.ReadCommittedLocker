    public static com.sleepycat.je.txn.ReadCommittedLocker createReadCommittedLocker(com.sleepycat.je.dbi.EnvironmentImpl, com.sleepycat.je.txn.Locker) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.dbi.EnvironmentImpl env;
        com.sleepycat.je.txn.Locker buddy;
        com.sleepycat.je.txn.ReadCommittedLocker $r0;

        env := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        buddy := @parameter1: com.sleepycat.je.txn.Locker;

        $r0 = new com.sleepycat.je.txn.ReadCommittedLocker;

        specialinvoke $r0.<com.sleepycat.je.txn.ReadCommittedLocker: void <init>(com.sleepycat.je.dbi.EnvironmentImpl,com.sleepycat.je.txn.Locker)>(env, buddy);

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "com/sleepycat/je/txn/ReadCommittedLocker";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sleepycat.je.txn.ReadCommittedLocker: boolean $assertionsDisabled> = $z1;

        return;
    }

    private void <init>(com.sleepycat.je.dbi.EnvironmentImpl, com.sleepycat.je.txn.Locker)
    {
        com.sleepycat.je.txn.ReadCommittedLocker this, $r2;
        com.sleepycat.je.dbi.EnvironmentImpl env;
        com.sleepycat.je.txn.Locker buddy, $r3, $r4;
        boolean $z0, $z1, $z2;
        java.lang.AssertionError $r5;

        this := @this: com.sleepycat.je.txn.ReadCommittedLocker;

        env := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        buddy := @parameter1: com.sleepycat.je.txn.Locker;

        $z0 = buddy instanceof com.sleepycat.je.txn.ReadCommittedLocker;

        if $z0 == 0 goto label1;

        $r2 = (com.sleepycat.je.txn.ReadCommittedLocker) buddy;

        $r3 = virtualinvoke $r2.<com.sleepycat.je.txn.ReadCommittedLocker: com.sleepycat.je.txn.Locker getBuddy()>();

        goto label2;

     label1:
        $r3 = buddy;

     label2:
        specialinvoke this.<com.sleepycat.je.txn.BuddyLocker: void <init>(com.sleepycat.je.dbi.EnvironmentImpl,com.sleepycat.je.txn.Locker)>(env, $r3);

        $z1 = <com.sleepycat.je.txn.ReadCommittedLocker: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        $r4 = virtualinvoke this.<com.sleepycat.je.txn.ReadCommittedLocker: com.sleepycat.je.txn.Locker getBuddy()>();

        $z2 = $r4 instanceof com.sleepycat.je.txn.Txn;

        if $z2 != 0 goto label3;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label3:
        return;
    }

    public boolean isTransactional()
    {
        com.sleepycat.je.txn.ReadCommittedLocker this;

        this := @this: com.sleepycat.je.txn.ReadCommittedLocker;

        return 1;
    }

    public void registerCursor(com.sleepycat.je.dbi.CursorImpl)
    {
        com.sleepycat.je.txn.ReadCommittedLocker this;
        com.sleepycat.je.dbi.CursorImpl cursor;
        com.sleepycat.je.txn.Locker $r0;

        this := @this: com.sleepycat.je.txn.ReadCommittedLocker;

        cursor := @parameter0: com.sleepycat.je.dbi.CursorImpl;

        $r0 = virtualinvoke this.<com.sleepycat.je.txn.ReadCommittedLocker: com.sleepycat.je.txn.Locker getBuddy()>();

        virtualinvoke $r0.<com.sleepycat.je.txn.Locker: void registerCursor(com.sleepycat.je.dbi.CursorImpl)>(cursor);

        return;
    }

    protected com.sleepycat.je.txn.LockResult lockInternal(long, com.sleepycat.je.txn.LockType, boolean, boolean, com.sleepycat.je.dbi.DatabaseImpl) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.txn.ReadCommittedLocker this;
        long lsn;
        com.sleepycat.je.txn.LockType lockType;
        boolean noWait, jumpAheadOfWaiters, $z0;
        com.sleepycat.je.dbi.DatabaseImpl database;
        com.sleepycat.je.txn.Locker $r0;
        com.sleepycat.je.txn.LockResult $r1, $r2;

        this := @this: com.sleepycat.je.txn.ReadCommittedLocker;

        lsn := @parameter0: long;

        lockType := @parameter1: com.sleepycat.je.txn.LockType;

        noWait := @parameter2: boolean;

        jumpAheadOfWaiters := @parameter3: boolean;

        database := @parameter4: com.sleepycat.je.dbi.DatabaseImpl;

        $z0 = virtualinvoke lockType.<com.sleepycat.je.txn.LockType: boolean isWriteLock()>();

        if $z0 == 0 goto label1;

        $r0 = virtualinvoke this.<com.sleepycat.je.txn.ReadCommittedLocker: com.sleepycat.je.txn.Locker getBuddy()>();

        $r1 = virtualinvoke $r0.<com.sleepycat.je.txn.Locker: com.sleepycat.je.txn.LockResult lockInternal(long,com.sleepycat.je.txn.LockType,boolean,boolean,com.sleepycat.je.dbi.DatabaseImpl)>(lsn, lockType, noWait, jumpAheadOfWaiters, database);

        return $r1;

     label1:
        $r2 = specialinvoke this.<com.sleepycat.je.txn.BuddyLocker: com.sleepycat.je.txn.LockResult lockInternal(long,com.sleepycat.je.txn.LockType,boolean,boolean,com.sleepycat.je.dbi.DatabaseImpl)>(lsn, lockType, noWait, jumpAheadOfWaiters, database);

        return $r2;
    }

    public void addDeleteInfo(com.sleepycat.je.tree.BIN)
    {
        com.sleepycat.je.txn.ReadCommittedLocker this;
        com.sleepycat.je.tree.BIN bin;
        com.sleepycat.je.txn.Locker $r0;

        this := @this: com.sleepycat.je.txn.ReadCommittedLocker;

        bin := @parameter0: com.sleepycat.je.tree.BIN;

        $r0 = virtualinvoke this.<com.sleepycat.je.txn.ReadCommittedLocker: com.sleepycat.je.txn.Locker getBuddy()>();

        virtualinvoke $r0.<com.sleepycat.je.txn.Locker: void addDeleteInfo(com.sleepycat.je.tree.BIN)>(bin);

        return;
    }

    public com.sleepycat.je.txn.Locker newNonTxnLocker() throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.txn.ReadCommittedLocker this, $r3;
        com.sleepycat.je.dbi.EnvironmentImpl $r0;
        com.sleepycat.je.txn.Locker $r1, $r2;

        this := @this: com.sleepycat.je.txn.ReadCommittedLocker;

        $r0 = this.<com.sleepycat.je.txn.ReadCommittedLocker: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r1 = virtualinvoke this.<com.sleepycat.je.txn.ReadCommittedLocker: com.sleepycat.je.txn.Locker getBuddy()>();

        $r2 = virtualinvoke $r1.<com.sleepycat.je.txn.Locker: com.sleepycat.je.txn.Locker newNonTxnLocker()>();

        $r3 = staticinvoke <com.sleepycat.je.txn.ReadCommittedLocker: com.sleepycat.je.txn.ReadCommittedLocker createReadCommittedLocker(com.sleepycat.je.dbi.EnvironmentImpl,com.sleepycat.je.txn.Locker)>($r0, $r2);

        return $r3;
    }

    public boolean lockingRequired()
    {
        com.sleepycat.je.txn.ReadCommittedLocker this;

        this := @this: com.sleepycat.je.txn.ReadCommittedLocker;

        return 1;
    }

    public boolean releaseLock(long) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.txn.ReadCommittedLocker this;
        long lsn;
        boolean ret#2, $z0;
        com.sleepycat.je.txn.LockManager $r0, $r1;
        com.sleepycat.je.txn.Locker $r2;

        this := @this: com.sleepycat.je.txn.ReadCommittedLocker;

        lsn := @parameter0: long;

        ret#2 = 1;

        $r0 = this.<com.sleepycat.je.txn.ReadCommittedLocker: com.sleepycat.je.txn.LockManager lockManager>;

        $z0 = virtualinvoke $r0.<com.sleepycat.je.txn.LockManager: boolean release(long,com.sleepycat.je.txn.Locker)>(lsn, this);

        if $z0 != 0 goto label1;

        $r1 = this.<com.sleepycat.je.txn.ReadCommittedLocker: com.sleepycat.je.txn.LockManager lockManager>;

        $r2 = virtualinvoke this.<com.sleepycat.je.txn.ReadCommittedLocker: com.sleepycat.je.txn.Locker getBuddy()>();

        ret#2 = virtualinvoke $r1.<com.sleepycat.je.txn.LockManager: boolean release(long,com.sleepycat.je.txn.Locker)>(lsn, $r2);

     label1:
        virtualinvoke this.<com.sleepycat.je.txn.ReadCommittedLocker: void removeLock(long)>(lsn);

        return ret#2;
    }

    public void unRegisterCursor(com.sleepycat.je.dbi.CursorImpl)
    {
        com.sleepycat.je.txn.ReadCommittedLocker this;
        com.sleepycat.je.dbi.CursorImpl cursor;
        com.sleepycat.je.txn.Locker $r0;

        this := @this: com.sleepycat.je.txn.ReadCommittedLocker;

        cursor := @parameter0: com.sleepycat.je.dbi.CursorImpl;

        $r0 = virtualinvoke this.<com.sleepycat.je.txn.ReadCommittedLocker: com.sleepycat.je.txn.Locker getBuddy()>();

        virtualinvoke $r0.<com.sleepycat.je.txn.Locker: void unRegisterCursor(com.sleepycat.je.dbi.CursorImpl)>(cursor);

        return;
    }

    public boolean isReadCommittedIsolation()
    {
        com.sleepycat.je.txn.ReadCommittedLocker this;

        this := @this: com.sleepycat.je.txn.ReadCommittedLocker;

        return 1;
    }

    public void markDeleteAtTxnEnd(com.sleepycat.je.dbi.DatabaseImpl, boolean)
    {
        com.sleepycat.je.txn.ReadCommittedLocker this;
        com.sleepycat.je.dbi.DatabaseImpl db;
        boolean deleteAtCommit;
        com.sleepycat.je.txn.Locker $r0;

        this := @this: com.sleepycat.je.txn.ReadCommittedLocker;

        db := @parameter0: com.sleepycat.je.dbi.DatabaseImpl;

        deleteAtCommit := @parameter1: boolean;

        $r0 = virtualinvoke this.<com.sleepycat.je.txn.ReadCommittedLocker: com.sleepycat.je.txn.Locker getBuddy()>();

        virtualinvoke $r0.<com.sleepycat.je.txn.Locker: void markDeleteAtTxnEnd(com.sleepycat.je.dbi.DatabaseImpl,boolean)>(db, deleteAtCommit);

        return;
    }


