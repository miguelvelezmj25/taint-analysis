    public void <init>(java.io.OutputStream, org.tukaani.xz.FilterOptions) throws java.io.IOException
    {
        org.tukaani.xz.XZOutputStream this;
        java.io.OutputStream out;
        org.tukaani.xz.FilterOptions filterOptions;

        this := @this: org.tukaani.xz.XZOutputStream;

        out := @parameter0: java.io.OutputStream;

        filterOptions := @parameter1: org.tukaani.xz.FilterOptions;

        specialinvoke this.<org.tukaani.xz.XZOutputStream: void <init>(java.io.OutputStream,org.tukaani.xz.FilterOptions,int)>(out, filterOptions, 4);

        return;
    }

    public void <init>(java.io.OutputStream, org.tukaani.xz.FilterOptions, int) throws java.io.IOException
    {
        org.tukaani.xz.XZOutputStream this;
        java.io.OutputStream out;
        org.tukaani.xz.FilterOptions filterOptions;
        int checkType;
        org.tukaani.xz.FilterOptions[] $r0;

        this := @this: org.tukaani.xz.XZOutputStream;

        out := @parameter0: java.io.OutputStream;

        filterOptions := @parameter1: org.tukaani.xz.FilterOptions;

        checkType := @parameter2: int;

        $r0 = newarray (org.tukaani.xz.FilterOptions)[1];

        $r0[0] = filterOptions;

        specialinvoke this.<org.tukaani.xz.XZOutputStream: void <init>(java.io.OutputStream,org.tukaani.xz.FilterOptions[],int)>(out, $r0, checkType);

        return;
    }

    public void <init>(java.io.OutputStream, org.tukaani.xz.FilterOptions[], int) throws java.io.IOException
    {
        org.tukaani.xz.XZOutputStream this;
        java.io.OutputStream out;
        org.tukaani.xz.FilterOptions[] filterOptions;
        int checkType;
        org.tukaani.xz.common.StreamFlags $r0, $r3;
        org.tukaani.xz.index.IndexEncoder $r1;
        byte[] $r2;
        org.tukaani.xz.check.Check $r4;

        this := @this: org.tukaani.xz.XZOutputStream;

        out := @parameter0: java.io.OutputStream;

        filterOptions := @parameter1: org.tukaani.xz.FilterOptions[];

        checkType := @parameter2: int;

        specialinvoke this.<org.tukaani.xz.FinishableOutputStream: void <init>()>();

        $r0 = new org.tukaani.xz.common.StreamFlags;

        specialinvoke $r0.<org.tukaani.xz.common.StreamFlags: void <init>()>();

        this.<org.tukaani.xz.XZOutputStream: org.tukaani.xz.common.StreamFlags streamFlags> = $r0;

        $r1 = new org.tukaani.xz.index.IndexEncoder;

        specialinvoke $r1.<org.tukaani.xz.index.IndexEncoder: void <init>()>();

        this.<org.tukaani.xz.XZOutputStream: org.tukaani.xz.index.IndexEncoder index> = $r1;

        $r2 = newarray (byte)[1];

        this.<org.tukaani.xz.XZOutputStream: byte[] tempBuf> = $r2;

        this.<org.tukaani.xz.XZOutputStream: org.tukaani.xz.BlockOutputStream blockEncoder> = null;

        this.<org.tukaani.xz.XZOutputStream: java.io.IOException exception> = null;

        this.<org.tukaani.xz.XZOutputStream: boolean finished> = 0;

        this.<org.tukaani.xz.XZOutputStream: java.io.OutputStream out> = out;

        virtualinvoke this.<org.tukaani.xz.XZOutputStream: void updateFilters(org.tukaani.xz.FilterOptions[])>(filterOptions);

        $r3 = this.<org.tukaani.xz.XZOutputStream: org.tukaani.xz.common.StreamFlags streamFlags>;

        $r3.<org.tukaani.xz.common.StreamFlags: int checkType> = checkType;

        $r4 = staticinvoke <org.tukaani.xz.check.Check: org.tukaani.xz.check.Check getInstance(int)>(checkType);

        this.<org.tukaani.xz.XZOutputStream: org.tukaani.xz.check.Check check> = $r4;

        specialinvoke this.<org.tukaani.xz.XZOutputStream: void encodeStreamHeader()>();

        return;
    }

    public void updateFilters(org.tukaani.xz.FilterOptions[]) throws org.tukaani.xz.XZIOException
    {
        org.tukaani.xz.XZOutputStream this;
        org.tukaani.xz.FilterOptions[] filterOptions;
        org.tukaani.xz.FilterEncoder[] newFilters;
        org.tukaani.xz.BlockOutputStream $r0;
        org.tukaani.xz.UnsupportedOptionsException $r1, $r2;
        int $i0, $i1, $i2, i#21, $i3;
        org.tukaani.xz.FilterOptions $r3;
        org.tukaani.xz.FilterEncoder $r4, $r6;
        boolean $z0, $z1, $z2;

        this := @this: org.tukaani.xz.XZOutputStream;

        filterOptions := @parameter0: org.tukaani.xz.FilterOptions[];

        $r0 = this.<org.tukaani.xz.XZOutputStream: org.tukaani.xz.BlockOutputStream blockEncoder>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label1;

        $r1 = new org.tukaani.xz.UnsupportedOptionsException;

        specialinvoke $r1.<org.tukaani.xz.UnsupportedOptionsException: void <init>(java.lang.String)>("Changing filter options in the middle of a XZ Block not implemented");

        throw $r1;

     label1:
        $i0 = lengthof filterOptions;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 < 1 goto label2;

        $i1 = lengthof filterOptions;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 4 goto label3;

     label2:
        $r2 = new org.tukaani.xz.UnsupportedOptionsException;

        specialinvoke $r2.<org.tukaani.xz.UnsupportedOptionsException: void <init>(java.lang.String)>("XZ filter chain must be 1-4 filters");

        throw $r2;

     label3:
        this.<org.tukaani.xz.XZOutputStream: boolean filtersSupportFlushing> = 1;

        $i2 = lengthof filterOptions;

        newFilters = newarray (org.tukaani.xz.FilterEncoder)[$i2];

        i#21 = 0;

     label4:
        $i3 = lengthof filterOptions;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#21);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if i#21 >= $i3 goto label5;

        $r3 = filterOptions[i#21];

        $r4 = virtualinvoke $r3.<org.tukaani.xz.FilterOptions: org.tukaani.xz.FilterEncoder getFilterEncoder()>();

        newFilters[i#21] = $r4;

        $z0 = this.<org.tukaani.xz.XZOutputStream: boolean filtersSupportFlushing>;

        $r6 = newFilters[i#21];

        $z1 = interfaceinvoke $r6.<org.tukaani.xz.FilterEncoder: boolean supportsFlushing()>();

        $z2 = $z0 & $z1;

        this.<org.tukaani.xz.XZOutputStream: boolean filtersSupportFlushing> = $z2;

        i#21 = i#21 + 1;

        goto label4;

     label5:
        staticinvoke <org.tukaani.xz.RawCoder: void validate(org.tukaani.xz.FilterCoder[])>(newFilters);

        this.<org.tukaani.xz.XZOutputStream: org.tukaani.xz.FilterEncoder[] filters> = newFilters;

        return;
    }

    private void encodeStreamHeader() throws java.io.IOException
    {
        org.tukaani.xz.XZOutputStream this;
        byte[] buf, $r1;
        java.io.OutputStream $r0, $r2, $r3;

        this := @this: org.tukaani.xz.XZOutputStream;

        $r0 = this.<org.tukaani.xz.XZOutputStream: java.io.OutputStream out>;

        $r1 = <org.tukaani.xz.XZ: byte[] HEADER_MAGIC>;

        virtualinvoke $r0.<java.io.OutputStream: void write(byte[])>($r1);

        buf = newarray (byte)[2];

        specialinvoke this.<org.tukaani.xz.XZOutputStream: void encodeStreamFlags(byte[],int)>(buf, 0);

        $r2 = this.<org.tukaani.xz.XZOutputStream: java.io.OutputStream out>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>(buf);

        $r3 = this.<org.tukaani.xz.XZOutputStream: java.io.OutputStream out>;

        staticinvoke <org.tukaani.xz.common.EncoderUtil: void writeCRC32(java.io.OutputStream,byte[])>($r3, buf);

        return;
    }

    private void encodeStreamFlags(byte[], int)
    {
        org.tukaani.xz.XZOutputStream this;
        byte[] buf;
        int off, $i0, $i1;
        org.tukaani.xz.common.StreamFlags $r0;
        byte $b2;

        this := @this: org.tukaani.xz.XZOutputStream;

        buf := @parameter0: byte[];

        off := @parameter1: int;

        buf[off] = 0;

        $i0 = off + 1;

        $r0 = this.<org.tukaani.xz.XZOutputStream: org.tukaani.xz.common.StreamFlags streamFlags>;

        $i1 = $r0.<org.tukaani.xz.common.StreamFlags: int checkType>;

        $b2 = (byte) $i1;

        buf[$i0] = $b2;

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        org.tukaani.xz.XZOutputStream this;
        byte[] buf;
        int off, len, $i0, $i1, $i2;
        java.io.IOException e, $r1, $r2, $r10;
        java.lang.IndexOutOfBoundsException $r0;
        boolean $z0;
        org.tukaani.xz.XZIOException $r3;
        org.tukaani.xz.BlockOutputStream $r4, $r5, $r9;
        java.io.OutputStream $r6;
        org.tukaani.xz.FilterEncoder[] $r7;
        org.tukaani.xz.check.Check $r8;

        this := @this: org.tukaani.xz.XZOutputStream;

        buf := @parameter0: byte[];

        off := @parameter1: int;

        len := @parameter2: int;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(off);

        if off < 0 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len);

        if len < 0 goto label1;

        $i0 = off + len;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 < 0 goto label1;

        $i1 = off + len;

        $i2 = lengthof buf;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i1 <= $i2 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r0;

     label2:
        $r1 = this.<org.tukaani.xz.XZOutputStream: java.io.IOException exception>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 == null goto label3;

        $r2 = this.<org.tukaani.xz.XZOutputStream: java.io.IOException exception>;

        throw $r2;

     label3:
        $z0 = this.<org.tukaani.xz.XZOutputStream: boolean finished>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label4;

        $r3 = new org.tukaani.xz.XZIOException;

        specialinvoke $r3.<org.tukaani.xz.XZIOException: void <init>(java.lang.String)>("Stream finished or closed");

        throw $r3;

     label4:
        nop;

        $r4 = this.<org.tukaani.xz.XZOutputStream: org.tukaani.xz.BlockOutputStream blockEncoder>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        if $r4 != null goto label5;

        $r5 = new org.tukaani.xz.BlockOutputStream;

        $r6 = this.<org.tukaani.xz.XZOutputStream: java.io.OutputStream out>;

        $r7 = this.<org.tukaani.xz.XZOutputStream: org.tukaani.xz.FilterEncoder[] filters>;

        $r8 = this.<org.tukaani.xz.XZOutputStream: org.tukaani.xz.check.Check check>;

        specialinvoke $r5.<org.tukaani.xz.BlockOutputStream: void <init>(java.io.OutputStream,org.tukaani.xz.FilterEncoder[],org.tukaani.xz.check.Check)>($r6, $r7, $r8);

        this.<org.tukaani.xz.XZOutputStream: org.tukaani.xz.BlockOutputStream blockEncoder> = $r5;

     label5:
        $r9 = this.<org.tukaani.xz.XZOutputStream: org.tukaani.xz.BlockOutputStream blockEncoder>;

        virtualinvoke $r9.<org.tukaani.xz.BlockOutputStream: void write(byte[],int,int)>(buf, off, len);

     label6:
        goto label8;

     label7:
        $r10 := @caughtexception;

        e = $r10;

        this.<org.tukaani.xz.XZOutputStream: java.io.IOException exception> = e;

        throw e;

     label8:
        return;

        catch java.io.IOException from label4 to label6 with label7;
    }


