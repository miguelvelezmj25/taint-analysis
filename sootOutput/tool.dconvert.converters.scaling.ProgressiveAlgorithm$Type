    static void <clinit>()
    {
        tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20;
        tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type[] $r10;

        $r0 = new tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type;

        specialinvoke $r0.<tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type: void <init>(java.lang.String,int)>("NOBEL_BILINEAR", 0);

        <tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type: tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type NOBEL_BILINEAR> = $r0;

        $r1 = new tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type;

        specialinvoke $r1.<tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type: void <init>(java.lang.String,int)>("NOBEL_BICUBUC", 1);

        <tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type: tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type NOBEL_BICUBUC> = $r1;

        $r2 = new tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type;

        specialinvoke $r2.<tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type: void <init>(java.lang.String,int)>("NOBEL_NEAREST_NEIGHBOR", 2);

        <tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type: tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type NOBEL_NEAREST_NEIGHBOR> = $r2;

        $r3 = new tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type;

        specialinvoke $r3.<tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type: void <init>(java.lang.String,int)>("NOBEL_LANCZOS3", 3);

        <tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type: tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type NOBEL_LANCZOS3> = $r3;

        $r4 = new tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type;

        specialinvoke $r4.<tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type: void <init>(java.lang.String,int)>("THUMBNAILATOR_BILINEAR", 4);

        <tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type: tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type THUMBNAILATOR_BILINEAR> = $r4;

        $r5 = new tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type;

        specialinvoke $r5.<tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type: void <init>(java.lang.String,int)>("THUMBNAILATOR_BICUBUC", 5);

        <tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type: tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type THUMBNAILATOR_BICUBUC> = $r5;

        $r6 = new tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type;

        specialinvoke $r6.<tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type: void <init>(java.lang.String,int)>("IMGSCALR_SEVENTH_STEP", 6);

        <tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type: tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type IMGSCALR_SEVENTH_STEP> = $r6;

        $r7 = new tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type;

        specialinvoke $r7.<tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type: void <init>(java.lang.String,int)>("IMGSCALR_HALF_STEP", 7);

        <tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type: tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type IMGSCALR_HALF_STEP> = $r7;

        $r8 = new tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type;

        specialinvoke $r8.<tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type: void <init>(java.lang.String,int)>("PROGRESSIVE_BILINEAR_AND_LANCZOS2", 8);

        <tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type: tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type PROGRESSIVE_BILINEAR_AND_LANCZOS2> = $r8;

        $r9 = new tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type;

        specialinvoke $r9.<tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type: void <init>(java.lang.String,int)>("PROGRESSIVE_BILINEAR_AND_LANCZOS3", 9);

        <tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type: tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type PROGRESSIVE_BILINEAR_AND_LANCZOS3> = $r9;

        $r10 = newarray (tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type)[10];

        $r11 = <tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type: tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type NOBEL_BILINEAR>;

        $r10[0] = $r11;

        $r12 = <tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type: tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type NOBEL_BICUBUC>;

        $r10[1] = $r12;

        $r13 = <tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type: tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type NOBEL_NEAREST_NEIGHBOR>;

        $r10[2] = $r13;

        $r14 = <tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type: tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type NOBEL_LANCZOS3>;

        $r10[3] = $r14;

        $r15 = <tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type: tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type THUMBNAILATOR_BILINEAR>;

        $r10[4] = $r15;

        $r16 = <tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type: tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type THUMBNAILATOR_BICUBUC>;

        $r10[5] = $r16;

        $r17 = <tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type: tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type IMGSCALR_SEVENTH_STEP>;

        $r10[6] = $r17;

        $r18 = <tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type: tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type IMGSCALR_HALF_STEP>;

        $r10[7] = $r18;

        $r19 = <tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type: tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type PROGRESSIVE_BILINEAR_AND_LANCZOS2>;

        $r10[8] = $r19;

        $r20 = <tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type: tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type PROGRESSIVE_BILINEAR_AND_LANCZOS3>;

        $r10[9] = $r20;

        <tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type: tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type[] $VALUES> = $r10;

        return;
    }

    private void <init>(java.lang.String, int)
    {
        tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type this;
        java.lang.String l1;
        int l2;

        this := @this: tool.dconvert.converters.scaling.ProgressiveAlgorithm$Type;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: int;

        specialinvoke this.<java.lang.Enum: void <init>(java.lang.String,int)>(l1, l2);

        return;
    }


