    public void <init>(byte[], int, int)
    {
        com.sleepycat.util.FastInputStream this;
        byte[] buffer;
        int offset, length, $i0;

        this := @this: com.sleepycat.util.FastInputStream;

        buffer := @parameter0: byte[];

        offset := @parameter1: int;

        length := @parameter2: int;

        specialinvoke this.<java.io.InputStream: void <init>()>();

        this.<com.sleepycat.util.FastInputStream: byte[] buf> = buffer;

        this.<com.sleepycat.util.FastInputStream: int off> = offset;

        $i0 = offset + length;

        this.<com.sleepycat.util.FastInputStream: int len> = $i0;

        return;
    }

    public int available()
    {
        com.sleepycat.util.FastInputStream this;
        int $i0, $i1, $i2;

        this := @this: com.sleepycat.util.FastInputStream;

        $i0 = this.<com.sleepycat.util.FastInputStream: int len>;

        $i1 = this.<com.sleepycat.util.FastInputStream: int off>;

        $i2 = $i0 - $i1;

        return $i2;
    }

    public final int getBufferOffset()
    {
        com.sleepycat.util.FastInputStream this;
        int $i0;

        this := @this: com.sleepycat.util.FastInputStream;

        $i0 = this.<com.sleepycat.util.FastInputStream: int off>;

        return $i0;
    }

    public final void skipFast(int)
    {
        com.sleepycat.util.FastInputStream this;
        int count, $i0, $i1;

        this := @this: com.sleepycat.util.FastInputStream;

        count := @parameter0: int;

        $i0 = this.<com.sleepycat.util.FastInputStream: int off>;

        $i1 = $i0 + count;

        this.<com.sleepycat.util.FastInputStream: int off> = $i1;

        return;
    }

    public long skip(long)
    {
        com.sleepycat.util.FastInputStream this;
        long count, $l5;
        int myCount#3, $i0, $i1, $i2, $i3, $i4;

        this := @this: com.sleepycat.util.FastInputStream;

        count := @parameter0: long;

        myCount#3 = (int) count;

        $i0 = this.<com.sleepycat.util.FastInputStream: int off>;

        $i1 = myCount#3 + $i0;

        $i2 = this.<com.sleepycat.util.FastInputStream: int len>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i1 <= $i2 goto label1;

        $i3 = this.<com.sleepycat.util.FastInputStream: int len>;

        $i4 = this.<com.sleepycat.util.FastInputStream: int off>;

        myCount#3 = $i3 - $i4;

     label1:
        virtualinvoke this.<com.sleepycat.util.FastInputStream: void skipFast(int)>(myCount#3);

        $l5 = (long) myCount#3;

        return $l5;
    }

    public final int readFast()
    {
        com.sleepycat.util.FastInputStream this;
        int $i0, $i1, $i2, $i3;
        byte[] $r0;
        byte $b4;
        short $s5;

        this := @this: com.sleepycat.util.FastInputStream;

        $i0 = this.<com.sleepycat.util.FastInputStream: int off>;

        $i1 = this.<com.sleepycat.util.FastInputStream: int len>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i0 >= $i1 goto label1;

        $r0 = this.<com.sleepycat.util.FastInputStream: byte[] buf>;

        $i2 = this.<com.sleepycat.util.FastInputStream: int off>;

        $i3 = $i2 + 1;

        this.<com.sleepycat.util.FastInputStream: int off> = $i3;

        $b4 = $r0[$i2];

        $s5 = $b4 & 255;

        goto label2;

     label1:
        $s5 = -1;

     label2:
        return $s5;
    }

    public final int readFast(byte[], int, int)
    {
        com.sleepycat.util.FastInputStream this;
        byte[] toBuf, $r0;
        int offset, avail, length#1, $i0, $i1, $i2, $i3, $i4;

        this := @this: com.sleepycat.util.FastInputStream;

        toBuf := @parameter0: byte[];

        offset := @parameter1: int;

        length#1 := @parameter2: int;

        $i0 = this.<com.sleepycat.util.FastInputStream: int len>;

        $i1 = this.<com.sleepycat.util.FastInputStream: int off>;

        avail = $i0 - $i1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(avail);

        if avail > 0 goto label1;

        return -1;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(length#1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(avail);

        if length#1 <= avail goto label2;

        length#1 = avail;

     label2:
        $r0 = this.<com.sleepycat.util.FastInputStream: byte[] buf>;

        $i2 = this.<com.sleepycat.util.FastInputStream: int off>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i2, toBuf, offset, length#1);

        $i3 = this.<com.sleepycat.util.FastInputStream: int off>;

        $i4 = $i3 + length#1;

        this.<com.sleepycat.util.FastInputStream: int off> = $i4;

        return length#1;
    }


