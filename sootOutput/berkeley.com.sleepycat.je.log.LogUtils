    static void <clinit>()
    {
        java.lang.String charsetName;
        java.lang.RuntimeException e, $r2;
        byte[] $r0;
        int $i0;
        java.nio.charset.Charset $r1;

        $r0 = newarray (byte)[0];

        <berkeley.com.sleepycat.je.log.LogUtils: byte[] ZERO_LENGTH_BYTE_ARRAY> = $r0;

        <berkeley.com.sleepycat.je.log.LogUtils: java.nio.charset.Charset logCharset> = null;

        charsetName = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("je.logCharset");

        if charsetName == null goto label4;

        $i0 = virtualinvoke charsetName.<java.lang.String: int length()>();

        if $i0 <= 0 goto label4;

     label1:
        $r1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(charsetName);

        <berkeley.com.sleepycat.je.log.LogUtils: java.nio.charset.Charset logCharset> = $r1;

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        e = $r2;

        virtualinvoke e.<java.lang.RuntimeException: void printStackTrace()>();

     label4:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public static int readInt(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer logBuf;
        byte $b0, $b2, $b5, $b8;
        short $s1, $s3, $s6, $s9;
        int ret#7, $i4, ret#16, $i7, ret#25, $i10, ret#34;

        logBuf := @parameter0: java.nio.ByteBuffer;

        $b0 = virtualinvoke logBuf.<java.nio.ByteBuffer: byte get()>();

        $s1 = $b0 & 255;

        ret#7 = $s1 << 0;

        $b2 = virtualinvoke logBuf.<java.nio.ByteBuffer: byte get()>();

        $s3 = $b2 & 255;

        $i4 = $s3 << 8;

        ret#16 = ret#7 + $i4;

        $b5 = virtualinvoke logBuf.<java.nio.ByteBuffer: byte get()>();

        $s6 = $b5 & 255;

        $i7 = $s6 << 16;

        ret#25 = ret#16 + $i7;

        $b8 = virtualinvoke logBuf.<java.nio.ByteBuffer: byte get()>();

        $s9 = $b8 & 255;

        $i10 = $s9 << 24;

        ret#34 = ret#25 + $i10;

        return ret#34;
    }

    public static long readUnsignedInt(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer buf;
        byte $b0, $b3, $b7, $b11;
        long $l1, $l2, ret#8, $l4, $l5, $l6, ret#18, $l8, $l9, $l10, ret#28, $l12, $l13, $l14, ret#38;

        buf := @parameter0: java.nio.ByteBuffer;

        $b0 = virtualinvoke buf.<java.nio.ByteBuffer: byte get()>();

        $l1 = (long) $b0;

        $l2 = $l1 & 255L;

        ret#8 = $l2 << 0;

        $b3 = virtualinvoke buf.<java.nio.ByteBuffer: byte get()>();

        $l4 = (long) $b3;

        $l5 = $l4 & 255L;

        $l6 = $l5 << 8;

        ret#18 = ret#8 + $l6;

        $b7 = virtualinvoke buf.<java.nio.ByteBuffer: byte get()>();

        $l8 = (long) $b7;

        $l9 = $l8 & 255L;

        $l10 = $l9 << 16;

        ret#28 = ret#18 + $l10;

        $b11 = virtualinvoke buf.<java.nio.ByteBuffer: byte get()>();

        $l12 = (long) $b11;

        $l13 = $l12 & 255L;

        $l14 = $l13 << 24;

        ret#38 = ret#28 + $l14;

        return ret#38;
    }

    public static int readIntMSB(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer logBuf;
        byte $b0, $b2, $b5, $b8;
        short $s1, $s3, $s6, $s9;
        int ret#7, $i4, ret#16, $i7, ret#25, $i10, ret#34;

        logBuf := @parameter0: java.nio.ByteBuffer;

        $b0 = virtualinvoke logBuf.<java.nio.ByteBuffer: byte get()>();

        $s1 = $b0 & 255;

        ret#7 = $s1 << 24;

        $b2 = virtualinvoke logBuf.<java.nio.ByteBuffer: byte get()>();

        $s3 = $b2 & 255;

        $i4 = $s3 << 16;

        ret#16 = ret#7 + $i4;

        $b5 = virtualinvoke logBuf.<java.nio.ByteBuffer: byte get()>();

        $s6 = $b5 & 255;

        $i7 = $s6 << 8;

        ret#25 = ret#16 + $i7;

        $b8 = virtualinvoke logBuf.<java.nio.ByteBuffer: byte get()>();

        $s9 = $b8 & 255;

        $i10 = $s9 << 0;

        ret#34 = ret#25 + $i10;

        return ret#34;
    }

    public static byte[] readByteArray(java.nio.ByteBuffer, boolean)
    {
        java.nio.ByteBuffer logBuf;
        boolean unpacked;
        int size;
        byte[] b, $r0;

        logBuf := @parameter0: java.nio.ByteBuffer;

        unpacked := @parameter1: boolean;

        size = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int readInt(java.nio.ByteBuffer,boolean)>(logBuf, unpacked);

        if size >= 0 goto label1;

        return null;

     label1:
        if size != 0 goto label2;

        $r0 = <berkeley.com.sleepycat.je.log.LogUtils: byte[] ZERO_LENGTH_BYTE_ARRAY>;

        return $r0;

     label2:
        b = newarray (byte)[size];

        virtualinvoke logBuf.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(b);

        return b;
    }

    public static long readLong(java.nio.ByteBuffer, boolean)
    {
        java.nio.ByteBuffer logBuf;
        boolean unpacked;
        long $l0, $l1;

        logBuf := @parameter0: java.nio.ByteBuffer;

        unpacked := @parameter1: boolean;

        if unpacked == 0 goto label1;

        $l0 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: long readLong(java.nio.ByteBuffer)>(logBuf);

        return $l0;

     label1:
        $l1 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: long readPackedLong(java.nio.ByteBuffer)>(logBuf);

        return $l1;
    }

    public static long readPackedLong(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer logBuf;
        byte[] a;
        int oldPos, off, len, $i0, $i1;
        long val;

        logBuf := @parameter0: java.nio.ByteBuffer;

        a = virtualinvoke logBuf.<java.nio.ByteBuffer: byte[] array()>();

        oldPos = virtualinvoke logBuf.<java.nio.ByteBuffer: int position()>();

        $i0 = virtualinvoke logBuf.<java.nio.ByteBuffer: int arrayOffset()>();

        off = $i0 + oldPos;

        len = staticinvoke <berkeley.com.sleepycat.util.PackedInteger: int getReadLongLength(byte[],int)>(a, off);

        val = staticinvoke <berkeley.com.sleepycat.util.PackedInteger: long readLong(byte[],int)>(a, off);

        $i1 = oldPos + len;

        virtualinvoke logBuf.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i1);

        return val;
    }

    public static int readInt(java.nio.ByteBuffer, boolean)
    {
        java.nio.ByteBuffer logBuf;
        boolean unpacked;
        int $i0, $i1;

        logBuf := @parameter0: java.nio.ByteBuffer;

        unpacked := @parameter1: boolean;

        if unpacked == 0 goto label1;

        $i0 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int readInt(java.nio.ByteBuffer)>(logBuf);

        return $i0;

     label1:
        $i1 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int readPackedInt(java.nio.ByteBuffer)>(logBuf);

        return $i1;
    }

    public static long readLong(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer logBuf;
        byte $b0, $b3, $b7, $b11, $b15, $b19, $b23, $b27;
        long $l1, $l2, ret#8, $l4, $l5, $l6, ret#18, $l8, $l9, $l10, ret#28, $l12, $l13, $l14, ret#38, $l16, $l17, $l18, ret#48, $l20, $l21, $l22, ret#58, $l24, $l25, $l26, ret#68, $l28, $l29, $l30, ret#78;

        logBuf := @parameter0: java.nio.ByteBuffer;

        $b0 = virtualinvoke logBuf.<java.nio.ByteBuffer: byte get()>();

        $l1 = (long) $b0;

        $l2 = $l1 & 255L;

        ret#8 = $l2 << 0;

        $b3 = virtualinvoke logBuf.<java.nio.ByteBuffer: byte get()>();

        $l4 = (long) $b3;

        $l5 = $l4 & 255L;

        $l6 = $l5 << 8;

        ret#18 = ret#8 + $l6;

        $b7 = virtualinvoke logBuf.<java.nio.ByteBuffer: byte get()>();

        $l8 = (long) $b7;

        $l9 = $l8 & 255L;

        $l10 = $l9 << 16;

        ret#28 = ret#18 + $l10;

        $b11 = virtualinvoke logBuf.<java.nio.ByteBuffer: byte get()>();

        $l12 = (long) $b11;

        $l13 = $l12 & 255L;

        $l14 = $l13 << 24;

        ret#38 = ret#28 + $l14;

        $b15 = virtualinvoke logBuf.<java.nio.ByteBuffer: byte get()>();

        $l16 = (long) $b15;

        $l17 = $l16 & 255L;

        $l18 = $l17 << 32;

        ret#48 = ret#38 + $l18;

        $b19 = virtualinvoke logBuf.<java.nio.ByteBuffer: byte get()>();

        $l20 = (long) $b19;

        $l21 = $l20 & 255L;

        $l22 = $l21 << 40;

        ret#58 = ret#48 + $l22;

        $b23 = virtualinvoke logBuf.<java.nio.ByteBuffer: byte get()>();

        $l24 = (long) $b23;

        $l25 = $l24 & 255L;

        $l26 = $l25 << 48;

        ret#68 = ret#58 + $l26;

        $b27 = virtualinvoke logBuf.<java.nio.ByteBuffer: byte get()>();

        $l28 = (long) $b27;

        $l29 = $l28 & 255L;

        $l30 = $l29 << 56;

        ret#78 = ret#68 + $l30;

        return ret#78;
    }

    public static int readPackedInt(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer logBuf;
        byte[] a;
        int oldPos, off, len, val, $i0, $i1;

        logBuf := @parameter0: java.nio.ByteBuffer;

        a = virtualinvoke logBuf.<java.nio.ByteBuffer: byte[] array()>();

        oldPos = virtualinvoke logBuf.<java.nio.ByteBuffer: int position()>();

        $i0 = virtualinvoke logBuf.<java.nio.ByteBuffer: int arrayOffset()>();

        off = $i0 + oldPos;

        len = staticinvoke <berkeley.com.sleepycat.util.PackedInteger: int getReadIntLength(byte[],int)>(a, off);

        val = staticinvoke <berkeley.com.sleepycat.util.PackedInteger: int readInt(byte[],int)>(a, off);

        $i1 = oldPos + len;

        virtualinvoke logBuf.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i1);

        return val;
    }

    public static byte[] readBytesNoLength(java.nio.ByteBuffer, int)
    {
        java.nio.ByteBuffer logBuf;
        int size;
        byte[] b, $r0;

        logBuf := @parameter0: java.nio.ByteBuffer;

        size := @parameter1: int;

        if size != 0 goto label1;

        $r0 = <berkeley.com.sleepycat.je.log.LogUtils: byte[] ZERO_LENGTH_BYTE_ARRAY>;

        return $r0;

     label1:
        b = newarray (byte)[size];

        virtualinvoke logBuf.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(b);

        return b;
    }

    public static void writeInt(java.nio.ByteBuffer, int)
    {
        java.nio.ByteBuffer logBuf;
        int i, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        byte b#7, b#17, b#27, b#37;

        logBuf := @parameter0: java.nio.ByteBuffer;

        i := @parameter1: int;

        $i0 = i >> 0;

        $i1 = $i0 & 255;

        b#7 = (byte) $i1;

        virtualinvoke logBuf.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(b#7);

        $i2 = i >> 8;

        $i3 = $i2 & 255;

        b#17 = (byte) $i3;

        virtualinvoke logBuf.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(b#17);

        $i4 = i >> 16;

        $i5 = $i4 & 255;

        b#27 = (byte) $i5;

        virtualinvoke logBuf.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(b#27);

        $i6 = i >> 24;

        $i7 = $i6 & 255;

        b#37 = (byte) $i7;

        virtualinvoke logBuf.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(b#37);

        return;
    }

    public static void writeUnsignedInt(java.nio.ByteBuffer, long)
    {
        java.nio.ByteBuffer buf;
        long value, $l0, $l3, $l6, $l9;
        int $i1, $i4, $i7, $i10;
        byte $b2, $b5, $b8, $b11;

        buf := @parameter0: java.nio.ByteBuffer;

        value := @parameter1: long;

        $l0 = value >>> 0;

        $i1 = (int) $l0;

        $b2 = (byte) $i1;

        virtualinvoke buf.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b2);

        $l3 = value >>> 8;

        $i4 = (int) $l3;

        $b5 = (byte) $i4;

        virtualinvoke buf.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b5);

        $l6 = value >>> 16;

        $i7 = (int) $l6;

        $b8 = (byte) $i7;

        virtualinvoke buf.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b8);

        $l9 = value >>> 24;

        $i10 = (int) $l9;

        $b11 = (byte) $i10;

        virtualinvoke buf.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b11);

        return;
    }

    public static int getPackedIntLogSize(int)
    {
        int i, $i0;

        i := @parameter0: int;

        $i0 = staticinvoke <berkeley.com.sleepycat.util.PackedInteger: int getWriteIntLength(int)>(i);

        return $i0;
    }

    public static int getPackedLongLogSize(long)
    {
        long l;
        int $i0;

        l := @parameter0: long;

        $i0 = staticinvoke <berkeley.com.sleepycat.util.PackedInteger: int getWriteLongLength(long)>(l);

        return $i0;
    }

    public static int getLongLogSize()
    {
        return 8;
    }

    public static int getByteArrayLogSize(byte[])
    {
        byte[] b;
        int len, $i0, $i1, $i2;

        b := @parameter0: byte[];

        if b != null goto label1;

        $i0 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int getPackedIntLogSize(int)>(-1);

        return $i0;

     label1:
        len = lengthof b;

        $i1 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int getPackedIntLogSize(int)>(len);

        $i2 = $i1 + len;

        return $i2;
    }

    public static int getBooleanLogSize()
    {
        return 1;
    }

    public static void writePackedInt(java.nio.ByteBuffer, int)
    {
        java.nio.ByteBuffer logBuf;
        int i, off, newPos, $i0, $i1, $i2;
        byte[] $r0;

        logBuf := @parameter0: java.nio.ByteBuffer;

        i := @parameter1: int;

        off = virtualinvoke logBuf.<java.nio.ByteBuffer: int arrayOffset()>();

        $r0 = virtualinvoke logBuf.<java.nio.ByteBuffer: byte[] array()>();

        $i0 = virtualinvoke logBuf.<java.nio.ByteBuffer: int position()>();

        $i1 = $i0 + off;

        newPos = staticinvoke <berkeley.com.sleepycat.util.PackedInteger: int writeInt(byte[],int,int)>($r0, $i1, i);

        $i2 = newPos - off;

        virtualinvoke logBuf.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i2);

        return;
    }

    public static void writePackedLong(java.nio.ByteBuffer, long)
    {
        java.nio.ByteBuffer logBuf;
        long l;
        int off, newPos, $i0, $i1, $i2;
        byte[] $r0;

        logBuf := @parameter0: java.nio.ByteBuffer;

        l := @parameter1: long;

        off = virtualinvoke logBuf.<java.nio.ByteBuffer: int arrayOffset()>();

        $r0 = virtualinvoke logBuf.<java.nio.ByteBuffer: byte[] array()>();

        $i0 = virtualinvoke logBuf.<java.nio.ByteBuffer: int position()>();

        $i1 = $i0 + off;

        newPos = staticinvoke <berkeley.com.sleepycat.util.PackedInteger: int writeLong(byte[],int,long)>($r0, $i1, l);

        $i2 = newPos - off;

        virtualinvoke logBuf.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i2);

        return;
    }

    public static void writeLong(java.nio.ByteBuffer, long)
    {
        java.nio.ByteBuffer logBuf;
        long l, $l0, $l2, $l4, $l6, $l8, $l10, $l12, $l14;
        int $i1, $i3, $i5, $i7, $i9, $i11, $i13, $i15;
        byte b#6, b#15, b#24, b#33, b#42, b#51, b#60, b#69;

        logBuf := @parameter0: java.nio.ByteBuffer;

        l := @parameter1: long;

        $l0 = l >>> 0;

        $i1 = (int) $l0;

        b#6 = (byte) $i1;

        virtualinvoke logBuf.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(b#6);

        $l2 = l >>> 8;

        $i3 = (int) $l2;

        b#15 = (byte) $i3;

        virtualinvoke logBuf.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(b#15);

        $l4 = l >>> 16;

        $i5 = (int) $l4;

        b#24 = (byte) $i5;

        virtualinvoke logBuf.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(b#24);

        $l6 = l >>> 24;

        $i7 = (int) $l6;

        b#33 = (byte) $i7;

        virtualinvoke logBuf.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(b#33);

        $l8 = l >>> 32;

        $i9 = (int) $l8;

        b#42 = (byte) $i9;

        virtualinvoke logBuf.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(b#42);

        $l10 = l >>> 40;

        $i11 = (int) $l10;

        b#51 = (byte) $i11;

        virtualinvoke logBuf.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(b#51);

        $l12 = l >>> 48;

        $i13 = (int) $l12;

        b#60 = (byte) $i13;

        virtualinvoke logBuf.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(b#60);

        $l14 = l >>> 56;

        $i15 = (int) $l14;

        b#69 = (byte) $i15;

        virtualinvoke logBuf.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(b#69);

        return;
    }

    public static void writeByteArray(java.nio.ByteBuffer, byte[])
    {
        java.nio.ByteBuffer logBuf;
        byte[] b;
        int $i0;

        logBuf := @parameter0: java.nio.ByteBuffer;

        b := @parameter1: byte[];

        if b != null goto label1;

        staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: void writePackedInt(java.nio.ByteBuffer,int)>(logBuf, -1);

        return;

     label1:
        $i0 = lengthof b;

        staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: void writePackedInt(java.nio.ByteBuffer,int)>(logBuf, $i0);

        virtualinvoke logBuf.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>(b);

        return;
    }

    public static void writeBoolean(java.nio.ByteBuffer, boolean)
    {
        java.nio.ByteBuffer logBuf;
        boolean bool;
        byte val, $b0;

        logBuf := @parameter0: java.nio.ByteBuffer;

        bool := @parameter1: boolean;

        if bool == 0 goto label1;

        $b0 = 1;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        val = $b0;

        virtualinvoke logBuf.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(val);

        return;
    }

    public static boolean readBoolean(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer logBuf;
        byte val;
        boolean $z0;

        logBuf := @parameter0: java.nio.ByteBuffer;

        val = virtualinvoke logBuf.<java.nio.ByteBuffer: byte get()>();

        if val != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static void writeIntMSB(java.nio.ByteBuffer, int)
    {
        java.nio.ByteBuffer logBuf;
        int i, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        byte b#7, b#17, b#27, b#37;

        logBuf := @parameter0: java.nio.ByteBuffer;

        i := @parameter1: int;

        $i0 = i >> 24;

        $i1 = $i0 & 255;

        b#7 = (byte) $i1;

        virtualinvoke logBuf.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(b#7);

        $i2 = i >> 16;

        $i3 = $i2 & 255;

        b#17 = (byte) $i3;

        virtualinvoke logBuf.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(b#17);

        $i4 = i >> 8;

        $i5 = $i4 & 255;

        b#27 = (byte) $i5;

        virtualinvoke logBuf.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(b#27);

        $i6 = i >> 0;

        $i7 = $i6 & 255;

        b#37 = (byte) $i7;

        virtualinvoke logBuf.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(b#37);

        return;
    }

    public static void writeTimestamp(java.nio.ByteBuffer, berkeley.com.sleepycat.je.utilint.Timestamp)
    {
        java.nio.ByteBuffer logBuf;
        berkeley.com.sleepycat.je.utilint.Timestamp time;
        long $l0;

        logBuf := @parameter0: java.nio.ByteBuffer;

        time := @parameter1: berkeley.com.sleepycat.je.utilint.Timestamp;

        $l0 = virtualinvoke time.<berkeley.com.sleepycat.je.utilint.Timestamp: long getTime()>();

        staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: void writePackedLong(java.nio.ByteBuffer,long)>(logBuf, $l0);

        return;
    }

    public static void writeString(java.nio.ByteBuffer, java.lang.String)
    {
        java.nio.ByteBuffer logBuf;
        java.lang.String stringVal;
        byte[] $r0;

        logBuf := @parameter0: java.nio.ByteBuffer;

        stringVal := @parameter1: java.lang.String;

        $r0 = staticinvoke <berkeley.com.sleepycat.utilint.StringUtils: byte[] toUTF8(java.lang.String)>(stringVal);

        staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: void writeByteArray(java.nio.ByteBuffer,byte[])>(logBuf, $r0);

        return;
    }

    public static int getTimestampLogSize(berkeley.com.sleepycat.je.utilint.Timestamp)
    {
        berkeley.com.sleepycat.je.utilint.Timestamp time;
        long $l0;
        int $i1;

        time := @parameter0: berkeley.com.sleepycat.je.utilint.Timestamp;

        $l0 = virtualinvoke time.<berkeley.com.sleepycat.je.utilint.Timestamp: long getTime()>();

        $i1 = staticinvoke <berkeley.com.sleepycat.util.PackedInteger: int getWriteLongLength(long)>($l0);

        return $i1;
    }

    public static int getStringLogSize(java.lang.String)
    {
        java.lang.String s;
        byte[] $r0;
        int $i0;

        s := @parameter0: java.lang.String;

        $r0 = staticinvoke <berkeley.com.sleepycat.utilint.StringUtils: byte[] toUTF8(java.lang.String)>(s);

        $i0 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int getByteArrayLogSize(byte[])>($r0);

        return $i0;
    }

    public static void writeBytesNoLength(java.nio.ByteBuffer, byte[])
    {
        java.nio.ByteBuffer logBuf;
        byte[] b;

        logBuf := @parameter0: java.nio.ByteBuffer;

        b := @parameter1: byte[];

        virtualinvoke logBuf.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>(b);

        return;
    }

    public static void writeShort(java.nio.ByteBuffer, short)
    {
        java.nio.ByteBuffer logBuf;
        short i, $s0, $s1, $s2, $s3;
        byte b#7, b#17;

        logBuf := @parameter0: java.nio.ByteBuffer;

        i := @parameter1: short;

        $s0 = i >> 0;

        $s1 = $s0 & 255;

        b#7 = (byte) $s1;

        virtualinvoke logBuf.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(b#7);

        $s2 = i >> 8;

        $s3 = $s2 & 255;

        b#17 = (byte) $s3;

        virtualinvoke logBuf.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(b#17);

        return;
    }

    public static int getIntLogSize()
    {
        return 4;
    }


