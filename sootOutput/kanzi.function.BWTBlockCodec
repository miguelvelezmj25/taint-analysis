    public int getMaxEncodedLength(int)
    {
        kanzi.function.BWTBlockCodec this;
        int srcLen, $i0;

        this := @this: kanzi.function.BWTBlockCodec;

        srcLen := @parameter0: int;

        $i0 = srcLen + 32;

        return $i0;
    }

    public boolean forward(kanzi.SliceByteArray, kanzi.SliceByteArray)
    {
        kanzi.function.BWTBlockCodec this;
        kanzi.SliceByteArray input, output;
        int blockSize, savedOIdx, chunks, headerSizeBytes1, primaryIndex, primaryIndex, pIndexSizeBytes, $i0, $i1, $i2, $i3, log#27, $i4, log#32, $i5, $i6, $i7, $i8, $i9, $i10, $i11, headerSizeBytes2#59, i#61, pIndexSizeBits#69, $i12, $i13, $i14, headerSizeBytes2#84, $i15, $i16, $i17, $i18, $i19, idx#106, i#108, pIndexSizeBits#116, $i20, $i21, $i22, $i23, shift#133, $i24, blockMode#139, $i25, $i26, $i27, blockMode#149, $i28, n#156, $i30, $i31;
        boolean $z0, $z1, $z2;
        byte[] $r0, $r1, $r6, $r7, $r9, $r10;
        kanzi.transform.BWT $r4, $r5, $r8;
        byte $b29, $b32;

        this := @this: kanzi.function.BWTBlockCodec;

        input := @parameter0: kanzi.SliceByteArray;

        output := @parameter1: kanzi.SliceByteArray;

        $z0 = staticinvoke <kanzi.SliceByteArray: boolean isValid(kanzi.SliceByteArray)>(input);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label01;

        $z1 = staticinvoke <kanzi.SliceByteArray: boolean isValid(kanzi.SliceByteArray)>(output);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label02;

     label01:
        return 0;

     label02:
        $r0 = input.<kanzi.SliceByteArray: byte[] array>;

        $r1 = output.<kanzi.SliceByteArray: byte[] array>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r0 != $r1 goto label03;

        return 0;

     label03:
        blockSize = input.<kanzi.SliceByteArray: int length>;

        $i0 = output.<kanzi.SliceByteArray: int length>;

        $i1 = output.<kanzi.SliceByteArray: int index>;

        $i2 = $i0 - $i1;

        $i3 = virtualinvoke this.<kanzi.function.BWTBlockCodec: int getMaxEncodedLength(int)>(blockSize);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i2 >= $i3 goto label04;

        return 0;

     label04:
        savedOIdx = output.<kanzi.SliceByteArray: int index>;

        chunks = staticinvoke <kanzi.transform.BWT: int getBWTChunks(int)>(blockSize);

        log#27 = 1;

     label05:
        $i4 = 1 << log#27;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(blockSize);

        if $i4 > blockSize goto label06;

        log#27 = log#27 + 1;

        goto label05;

     label06:
        log#32 = log#27 + -1;

        $i5 = 2 + log#32;

        $i6 = chunks * $i5;

        $i7 = $i6 + 7;

        headerSizeBytes1 = $i7 >>> 3;

        $i8 = output.<kanzi.SliceByteArray: int index>;

        $i9 = $i8 + headerSizeBytes1;

        output.<kanzi.SliceByteArray: int index> = $i9;

        $i10 = output.<kanzi.SliceByteArray: int length>;

        $i11 = $i10 - headerSizeBytes1;

        output.<kanzi.SliceByteArray: int length> = $i11;

        $r4 = this.<kanzi.function.BWTBlockCodec: kanzi.transform.BWT bwt>;

        $z2 = virtualinvoke $r4.<kanzi.transform.BWT: boolean forward(kanzi.SliceByteArray,kanzi.SliceByteArray)>(input, output);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label07;

        return 0;

     label07:
        headerSizeBytes2#59 = 0;

        i#61 = 0;

     label08:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#61);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(chunks);

        if i#61 >= chunks goto label11;

        $r5 = this.<kanzi.function.BWTBlockCodec: kanzi.transform.BWT bwt>;

        primaryIndex = virtualinvoke $r5.<kanzi.transform.BWT: int getPrimaryIndex(int)>(i#61);

        pIndexSizeBits#69 = 6;

     label09:
        $i12 = 1 << pIndexSizeBits#69;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(primaryIndex);

        if $i12 > primaryIndex goto label10;

        pIndexSizeBits#69 = pIndexSizeBits#69 + 1;

        goto label09;

     label10:
        $i13 = 2 + pIndexSizeBits#69;

        headerSizeBytes2#59 = headerSizeBytes2#59 + $i13;

        i#61 = i#61 + 1;

        goto label08;

     label11:
        $i14 = headerSizeBytes2#59 + 7;

        headerSizeBytes2#84 = $i14 >>> 3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(headerSizeBytes2#84);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(headerSizeBytes1);

        if headerSizeBytes2#84 == headerSizeBytes1 goto label12;

        $r6 = output.<kanzi.SliceByteArray: byte[] array>;

        $i15 = savedOIdx + headerSizeBytes1;

        $r7 = output.<kanzi.SliceByteArray: byte[] array>;

        $i16 = savedOIdx + headerSizeBytes2#84;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, $i15, $r7, $i16, blockSize);

        $i17 = output.<kanzi.SliceByteArray: int index>;

        $i18 = $i17 - headerSizeBytes1;

        $i19 = $i18 + headerSizeBytes2#84;

        output.<kanzi.SliceByteArray: int index> = $i19;

     label12:
        idx#106 = savedOIdx;

        i#108 = 0;

     label13:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#108);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(chunks);

        if i#108 >= chunks goto label18;

        $r8 = this.<kanzi.function.BWTBlockCodec: kanzi.transform.BWT bwt>;

        primaryIndex = virtualinvoke $r8.<kanzi.transform.BWT: int getPrimaryIndex(int)>(i#108);

        pIndexSizeBits#116 = 6;

     label14:
        $i20 = 1 << pIndexSizeBits#116;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i20);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(primaryIndex);

        if $i20 > primaryIndex goto label15;

        pIndexSizeBits#116 = pIndexSizeBits#116 + 1;

        goto label14;

     label15:
        $i21 = 2 + pIndexSizeBits#116;

        $i22 = $i21 + 7;

        pIndexSizeBytes = $i22 >>> 3;

        $i23 = pIndexSizeBytes - 1;

        shift#133 = $i23 << 3;

        $i24 = pIndexSizeBits#116 + 1;

        blockMode#139 = $i24 >>> 3;

        $i25 = blockMode#139 << 6;

        $i26 = primaryIndex >>> shift#133;

        $i27 = $i26 & 63;

        blockMode#149 = $i25 | $i27;

        $r9 = output.<kanzi.SliceByteArray: byte[] array>;

        $i28 = idx#106;

        idx#106 = idx#106 + 1;

        $b29 = (byte) blockMode#149;

        $r9[$i28] = $b29;

        n#156 = 1;

     label16:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n#156);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(pIndexSizeBytes);

        if n#156 >= pIndexSizeBytes goto label17;

        shift#133 = shift#133 + -8;

        $r10 = output.<kanzi.SliceByteArray: byte[] array>;

        $i30 = idx#106;

        idx#106 = idx#106 + 1;

        $i31 = primaryIndex >> shift#133;

        $b32 = (byte) $i31;

        $r10[$i30] = $b32;

        n#156 = n#156 + 1;

        goto label16;

     label17:
        i#108 = i#108 + 1;

        goto label13;

     label18:
        return 1;
    }

    public void <init>()
    {
        kanzi.function.BWTBlockCodec this;
        kanzi.transform.BWT $r0;

        this := @this: kanzi.function.BWTBlockCodec;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = new kanzi.transform.BWT;

        specialinvoke $r0.<kanzi.transform.BWT: void <init>()>();

        this.<kanzi.function.BWTBlockCodec: kanzi.transform.BWT bwt> = $r0;

        return;
    }


