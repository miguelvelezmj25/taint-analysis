    public void <init>(double, double[], int[], int)
    {
        weka.core.SparseInstance this;
        double weight, $d0, $d1;
        double[] attValues, newVals, $r0, $r2, $r4;
        int[] indices, newIndices, $r1, $r3, $r5;
        int maxNumValues, vals#3, $i0, $i1, i#13, $i2, $i4, $i5;
        byte $b3;

        this := @this: weka.core.SparseInstance;

        weight := @parameter0: double;

        attValues := @parameter1: double[];

        indices := @parameter2: int[];

        maxNumValues := @parameter3: int;

        specialinvoke this.<weka.core.AbstractInstance: void <init>()>();

        vals#3 = 0;

        $i0 = lengthof attValues;

        $r0 = newarray (double)[$i0];

        this.<weka.core.SparseInstance: double[] m_AttValues> = $r0;

        $i1 = lengthof indices;

        $r1 = newarray (int)[$i1];

        this.<weka.core.SparseInstance: int[] m_Indices> = $r1;

        i#13 = 0;

     label1:
        $i2 = lengthof attValues;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#13);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#13 >= $i2 goto label3;

        $d0 = attValues[i#13];

        $b3 = $d0 cmpl 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b3);

        if $b3 == 0 goto label2;

        $r2 = this.<weka.core.SparseInstance: double[] m_AttValues>;

        $d1 = attValues[i#13];

        $r2[vals#3] = $d1;

        $r3 = this.<weka.core.SparseInstance: int[] m_Indices>;

        $i4 = indices[i#13];

        $r3[vals#3] = $i4;

        vals#3 = vals#3 + 1;

     label2:
        i#13 = i#13 + 1;

        goto label1;

     label3:
        $i5 = lengthof attValues;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(vals#3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if vals#3 == $i5 goto label4;

        newVals = newarray (double)[vals#3];

        $r4 = this.<weka.core.SparseInstance: double[] m_AttValues>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, newVals, 0, vals#3);

        this.<weka.core.SparseInstance: double[] m_AttValues> = newVals;

        newIndices = newarray (int)[vals#3];

        $r5 = this.<weka.core.SparseInstance: int[] m_Indices>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, newIndices, 0, vals#3);

        this.<weka.core.SparseInstance: int[] m_Indices> = newIndices;

     label4:
        this.<weka.core.SparseInstance: double m_Weight> = weight;

        this.<weka.core.SparseInstance: int m_NumAttributes> = maxNumValues;

        this.<weka.core.SparseInstance: weka.core.Instances m_Dataset> = null;

        return;
    }

    public java.lang.Object copy()
    {
        weka.core.SparseInstance this, result, $r0;
        weka.core.Instances $r1;

        this := @this: weka.core.SparseInstance;

        $r0 = new weka.core.SparseInstance;

        specialinvoke $r0.<weka.core.SparseInstance: void <init>(weka.core.SparseInstance)>(this);

        result = $r0;

        $r1 = this.<weka.core.SparseInstance: weka.core.Instances m_Dataset>;

        result.<weka.core.SparseInstance: weka.core.Instances m_Dataset> = $r1;

        return result;
    }

    public void <init>(weka.core.SparseInstance)
    {
        weka.core.SparseInstance this, instance;
        double[] $r0;
        int[] $r1;
        double $d0;
        int $i0;

        this := @this: weka.core.SparseInstance;

        instance := @parameter0: weka.core.SparseInstance;

        specialinvoke this.<weka.core.AbstractInstance: void <init>()>();

        $r0 = instance.<weka.core.SparseInstance: double[] m_AttValues>;

        this.<weka.core.SparseInstance: double[] m_AttValues> = $r0;

        $r1 = instance.<weka.core.SparseInstance: int[] m_Indices>;

        this.<weka.core.SparseInstance: int[] m_Indices> = $r1;

        $d0 = instance.<weka.core.SparseInstance: double m_Weight>;

        this.<weka.core.SparseInstance: double m_Weight> = $d0;

        $i0 = instance.<weka.core.SparseInstance: int m_NumAttributes>;

        this.<weka.core.SparseInstance: int m_NumAttributes> = $i0;

        this.<weka.core.SparseInstance: weka.core.Instances m_Dataset> = null;

        return;
    }

    public double value(int)
    {
        weka.core.SparseInstance this;
        int attIndex, index, $i0;
        int[] $r0;
        double[] $r1;
        double $d0;

        this := @this: weka.core.SparseInstance;

        attIndex := @parameter0: int;

        index = virtualinvoke this.<weka.core.SparseInstance: int locateIndex(int)>(attIndex);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(index);

        if index < 0 goto label1;

        $r0 = this.<weka.core.SparseInstance: int[] m_Indices>;

        $i0 = $r0[index];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(attIndex);

        if $i0 != attIndex goto label1;

        $r1 = this.<weka.core.SparseInstance: double[] m_AttValues>;

        $d0 = $r1[index];

        return $d0;

     label1:
        return 0.0;
    }

    public int locateIndex(int)
    {
        weka.core.SparseInstance this;
        int index, current, min#2, $i0, max#8, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        int[] $r0, $r1, $r2, $r3, $r4, $r5;

        this := @this: weka.core.SparseInstance;

        index := @parameter0: int;

        min#2 = 0;

        $r0 = this.<weka.core.SparseInstance: int[] m_Indices>;

        $i0 = lengthof $r0;

        max#8 = $i0 - 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(max#8);

        if max#8 != -1 goto label1;

        return -1;

     label1:
        $r1 = this.<weka.core.SparseInstance: int[] m_Indices>;

        $i1 = $r1[min#2];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(index);

        if $i1 > index goto label5;

        $r2 = this.<weka.core.SparseInstance: int[] m_Indices>;

        $i2 = $r2[max#8];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(index);

        if $i2 < index goto label5;

        $i3 = max#8 + min#2;

        current = $i3 / 2;

        $r3 = this.<weka.core.SparseInstance: int[] m_Indices>;

        $i4 = $r3[current];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(index);

        if $i4 <= index goto label2;

        max#8 = current - 1;

        goto label4;

     label2:
        $r4 = this.<weka.core.SparseInstance: int[] m_Indices>;

        $i5 = $r4[current];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(index);

        if $i5 >= index goto label3;

        min#2 = current + 1;

        goto label4;

     label3:
        return current;

     label4:
        goto label1;

     label5:
        $r5 = this.<weka.core.SparseInstance: int[] m_Indices>;

        $i6 = $r5[max#8];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(index);

        if $i6 >= index goto label6;

        return max#8;

     label6:
        $i7 = min#2 - 1;

        return $i7;
    }

    public void setValue(int, double)
    {
        weka.core.SparseInstance this;
        int attIndex, index, $i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34;
        double value;
        int[] $r0, $r5, tempIndices#44, $r7, $r10, $r11, $r13, tempIndices#105, $r15, $r18, $r19;
        byte $b1, $b16;
        double[] $r1, tempValues#17, $r2, $r3, $r4, tempValues#37, $r6, $r8, $r9, $r12, tempValues#98, $r14, $r16, $r17;

        this := @this: weka.core.SparseInstance;

        attIndex := @parameter0: int;

        value := @parameter1: double;

        index = virtualinvoke this.<weka.core.SparseInstance: int locateIndex(int)>(attIndex);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(index);

        if index < 0 goto label2;

        $r0 = this.<weka.core.SparseInstance: int[] m_Indices>;

        $i0 = $r0[index];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(attIndex);

        if $i0 != attIndex goto label2;

        $b1 = value cmpl 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 == 0 goto label1;

        $r1 = this.<weka.core.SparseInstance: double[] m_AttValues>;

        $i2 = lengthof $r1;

        tempValues#17 = newarray (double)[$i2];

        $r2 = this.<weka.core.SparseInstance: double[] m_AttValues>;

        $r3 = this.<weka.core.SparseInstance: double[] m_AttValues>;

        $i3 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, tempValues#17, 0, $i3);

        tempValues#17[index] = value;

        this.<weka.core.SparseInstance: double[] m_AttValues> = tempValues#17;

        goto label3;

     label1:
        $r4 = this.<weka.core.SparseInstance: double[] m_AttValues>;

        $i4 = lengthof $r4;

        $i5 = $i4 - 1;

        tempValues#37 = newarray (double)[$i5];

        $r5 = this.<weka.core.SparseInstance: int[] m_Indices>;

        $i6 = lengthof $r5;

        $i7 = $i6 - 1;

        tempIndices#44 = newarray (int)[$i7];

        $r6 = this.<weka.core.SparseInstance: double[] m_AttValues>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, tempValues#37, 0, index);

        $r7 = this.<weka.core.SparseInstance: int[] m_Indices>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, tempIndices#44, 0, index);

        $r8 = this.<weka.core.SparseInstance: double[] m_AttValues>;

        $i8 = index + 1;

        $r9 = this.<weka.core.SparseInstance: double[] m_AttValues>;

        $i9 = lengthof $r9;

        $i10 = $i9 - index;

        $i11 = $i10 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, $i8, tempValues#37, index, $i11);

        $r10 = this.<weka.core.SparseInstance: int[] m_Indices>;

        $i12 = index + 1;

        $r11 = this.<weka.core.SparseInstance: int[] m_Indices>;

        $i13 = lengthof $r11;

        $i14 = $i13 - index;

        $i15 = $i14 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, $i12, tempIndices#44, index, $i15);

        this.<weka.core.SparseInstance: double[] m_AttValues> = tempValues#37;

        this.<weka.core.SparseInstance: int[] m_Indices> = tempIndices#44;

        goto label3;

     label2:
        $b16 = value cmpl 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b16);

        if $b16 == 0 goto label3;

        $r12 = this.<weka.core.SparseInstance: double[] m_AttValues>;

        $i17 = lengthof $r12;

        $i18 = $i17 + 1;

        tempValues#98 = newarray (double)[$i18];

        $r13 = this.<weka.core.SparseInstance: int[] m_Indices>;

        $i19 = lengthof $r13;

        $i20 = $i19 + 1;

        tempIndices#105 = newarray (int)[$i20];

        $r14 = this.<weka.core.SparseInstance: double[] m_AttValues>;

        $i21 = index + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r14, 0, tempValues#98, 0, $i21);

        $r15 = this.<weka.core.SparseInstance: int[] m_Indices>;

        $i22 = index + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r15, 0, tempIndices#105, 0, $i22);

        $i23 = index + 1;

        tempIndices#105[$i23] = attIndex;

        $i24 = index + 1;

        tempValues#98[$i24] = value;

        $r16 = this.<weka.core.SparseInstance: double[] m_AttValues>;

        $i25 = index + 1;

        $i26 = index + 2;

        $r17 = this.<weka.core.SparseInstance: double[] m_AttValues>;

        $i27 = lengthof $r17;

        $i28 = $i27 - index;

        $i29 = $i28 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r16, $i25, tempValues#98, $i26, $i29);

        $r18 = this.<weka.core.SparseInstance: int[] m_Indices>;

        $i30 = index + 1;

        $i31 = index + 2;

        $r19 = this.<weka.core.SparseInstance: int[] m_Indices>;

        $i32 = lengthof $r19;

        $i33 = $i32 - index;

        $i34 = $i33 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r18, $i30, tempIndices#105, $i31, $i34);

        this.<weka.core.SparseInstance: double[] m_AttValues> = tempValues#98;

        this.<weka.core.SparseInstance: int[] m_Indices> = tempIndices#105;

     label3:
        return;
    }

    public int numAttributes()
    {
        weka.core.SparseInstance this;
        int $i0;

        this := @this: weka.core.SparseInstance;

        $i0 = this.<weka.core.SparseInstance: int m_NumAttributes>;

        return $i0;
    }


