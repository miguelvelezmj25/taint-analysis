    static void <clinit>()
    {
        byte[] $r0;

        $r0 = newarray (byte)[0];

        <kanzi.io.CompressedOutputStream: byte[] EMPTY_BYTE_ARRAY> = $r0;

        return;
    }

    public void <init>(java.io.OutputStream, int, boolean, java.util.concurrent.ExecutorService, int, java.lang.String, java.lang.String)
    {
        kanzi.io.CompressedOutputStream l0;
        java.io.OutputStream l1;
        int l2, l5, l8, $i0, $i1, $i4, $i5, $i6, $i7, $i8, $i9, l9#105, $i10;
        boolean l3;
        java.util.concurrent.ExecutorService l4;
        java.lang.String l6, l7, $r11;
        java.lang.NullPointerException $r0, $r1, $r2;
        java.lang.IllegalArgumentException $r3, $r4, $r5, $r6, $r7;
        java.lang.StringBuilder $r8, $r9, $r10;
        kanzi.bitstream.DefaultOutputBitStream $r12;
        kanzi.entropy.EntropyCodecFactory $r13;
        short $s2, $s3;
        kanzi.io.ByteFunctionFactory $r14;
        kanzi.util.hash.XXHash32 $r16;
        kanzi.SliceByteArray $r18, $r25;
        byte[] $r19, $r26;
        kanzi.SliceByteArray[] $r20, $r23, $r24;
        java.util.concurrent.atomic.AtomicBoolean $r21, $r22;
        java.util.concurrent.atomic.AtomicInteger $r27;
        java.util.ArrayList $r28;

        l0 := @this: kanzi.io.CompressedOutputStream;

        l1 := @parameter0: java.io.OutputStream;

        l2 := @parameter1: int;

        l3 := @parameter2: boolean;

        l4 := @parameter3: java.util.concurrent.ExecutorService;

        l5 := @parameter4: int;

        l6 := @parameter5: java.lang.String;

        l7 := @parameter6: java.lang.String;

        specialinvoke l0.<java.io.OutputStream: void <init>()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l1);

        if l1 != null goto label01;

        $r0 = new java.lang.NullPointerException;

        specialinvoke $r0.<java.lang.NullPointerException: void <init>(java.lang.String)>("Invalid null output stream parameter");

        throw $r0;

     label01:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l6);

        if l6 != null goto label02;

        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("Invalid null entropy encoder type parameter");

        throw $r1;

     label02:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l7);

        if l7 != null goto label03;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Invalid null transform type parameter");

        throw $r2;

     label03:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l2);

        if l2 <= 1073741824 goto label04;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The block size must be at most 1024 MB");

        throw $r3;

     label04:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l2);

        if l2 >= 1024 goto label05;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The block size must be at least 1024");

        throw $r4;

     label05:
        $i0 = l2 & -16;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l2);

        if $i0 == l2 goto label06;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The block size must be a multiple of 16");

        throw $r5;

     label06:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l5);

        if l5 < 0 goto label07;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l5);

        if l5 <= 16 goto label08;

     label07:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The number of jobs must be in [1..16]");

        throw $r6;

     label08:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l5);

        if l5 <= 1 goto label09;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l4);

        if l4 != null goto label09;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The thread pool cannot be null when the number of jobs is ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l5);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l2);

        if l2 > 65536 goto label10;

        $i1 = l2;

        goto label11;

     label10:
        $i1 = 65536;

     label11:
        l8 = $i1;

        $r12 = new kanzi.bitstream.DefaultOutputBitStream;

        specialinvoke $r12.<kanzi.bitstream.DefaultOutputBitStream: void <init>(java.io.OutputStream,int)>(l1, l8);

        l0.<kanzi.io.CompressedOutputStream: kanzi.OutputBitStream obs> = $r12;

        $r13 = new kanzi.entropy.EntropyCodecFactory;

        specialinvoke $r13.<kanzi.entropy.EntropyCodecFactory: void <init>()>();

        $s2 = virtualinvoke $r13.<kanzi.entropy.EntropyCodecFactory: short getType(java.lang.String)>(l6);

        l0.<kanzi.io.CompressedOutputStream: short entropyType> = $s2;

        $r14 = new kanzi.io.ByteFunctionFactory;

        specialinvoke $r14.<kanzi.io.ByteFunctionFactory: void <init>()>();

        $s3 = virtualinvoke $r14.<kanzi.io.ByteFunctionFactory: short getType(java.lang.String)>(l7);

        l0.<kanzi.io.CompressedOutputStream: short transformType> = $s3;

        l0.<kanzi.io.CompressedOutputStream: int blockSize> = l2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3);

        if l3 != 1 goto label12;

        $r16 = new kanzi.util.hash.XXHash32;

        specialinvoke $r16.<kanzi.util.hash.XXHash32: void <init>(int)>(1262571098);

        goto label13;

     label12:
        $r16 = null;

     label13:
        l0.<kanzi.io.CompressedOutputStream: kanzi.util.hash.XXHash32 hasher> = $r16;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l5);

        if l5 != 0 goto label14;

        $i4 = 1;

        goto label15;

     label14:
        $i4 = l5;

     label15:
        l0.<kanzi.io.CompressedOutputStream: int jobs> = $i4;

        l0.<kanzi.io.CompressedOutputStream: java.util.concurrent.ExecutorService pool> = l4;

        $r18 = new kanzi.SliceByteArray;

        $i5 = l0.<kanzi.io.CompressedOutputStream: int blockSize>;

        $i6 = l0.<kanzi.io.CompressedOutputStream: int jobs>;

        $i7 = $i5 * $i6;

        $r19 = newarray (byte)[$i7];

        specialinvoke $r18.<kanzi.SliceByteArray: void <init>(byte[],int)>($r19, 0);

        l0.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa> = $r18;

        $i8 = l0.<kanzi.io.CompressedOutputStream: int jobs>;

        $i9 = 2 * $i8;

        $r20 = newarray (kanzi.SliceByteArray)[$i9];

        l0.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray[] buffers> = $r20;

        $r21 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r21.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        l0.<kanzi.io.CompressedOutputStream: java.util.concurrent.atomic.AtomicBoolean closed> = $r21;

        $r22 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r22.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        l0.<kanzi.io.CompressedOutputStream: java.util.concurrent.atomic.AtomicBoolean initialized> = $r22;

        l9#105 = 0;

     label16:
        $r23 = l0.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray[] buffers>;

        $i10 = lengthof $r23;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l9#105);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i10);

        if l9#105 >= $i10 goto label17;

        $r24 = l0.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray[] buffers>;

        $r25 = new kanzi.SliceByteArray;

        $r26 = <kanzi.io.CompressedOutputStream: byte[] EMPTY_BYTE_ARRAY>;

        specialinvoke $r25.<kanzi.SliceByteArray: void <init>(byte[],int)>($r26, 0);

        $r24[l9#105] = $r25;

        l9#105 = l9#105 + 1;

        goto label16;

     label17:
        $r27 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r27.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        l0.<kanzi.io.CompressedOutputStream: java.util.concurrent.atomic.AtomicInteger blockId> = $r27;

        $r28 = new java.util.ArrayList;

        specialinvoke $r28.<java.util.ArrayList: void <init>(int)>(10);

        l0.<kanzi.io.CompressedOutputStream: java.util.List listeners> = $r28;

        return;
    }

    public long getWritten()
    {
        kanzi.io.CompressedOutputStream l0;
        kanzi.OutputBitStream $r0;
        long $l0, $l1, $l2;

        l0 := @this: kanzi.io.CompressedOutputStream;

        $r0 = l0.<kanzi.io.CompressedOutputStream: kanzi.OutputBitStream obs>;

        $l0 = interfaceinvoke $r0.<kanzi.OutputBitStream: long written()>();

        $l1 = $l0 + 7L;

        $l2 = $l1 >> 3;

        return $l2;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        kanzi.io.CompressedOutputStream l0;
        byte[] l1, $r8;
        int l3, l5, l2#1, $i0, $i1, l4#20, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.IndexOutOfBoundsException $r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;
        kanzi.io.IOException $r2;
        kanzi.SliceByteArray $r3, $r4, $r5, $r6, $r7, $r9, $r10;
        byte $b11;

        l0 := @this: kanzi.io.CompressedOutputStream;

        l1 := @parameter0: byte[];

        l2#1 := @parameter1: int;

        l3 := @parameter2: int;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l2#1);

        if l2#1 < 0 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3);

        if l3 < 0 goto label1;

        $i0 = l3 + l2#1;

        $i1 = lengthof l1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i0 <= $i1 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r0;

     label2:
        $r1 = l0.<kanzi.io.CompressedOutputStream: java.util.concurrent.atomic.AtomicBoolean closed>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 1 goto label3;

        $r2 = new kanzi.io.IOException;

        specialinvoke $r2.<kanzi.io.IOException: void <init>(java.lang.String,int)>("Stream closed", -12);

        throw $r2;

     label3:
        l4#20 = l3;

     label4:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l4#20);

        if l4#20 <= 0 goto label8;

        $r3 = l0.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $i2 = $r3.<kanzi.SliceByteArray: int index>;

        $i3 = $i2 + l4#20;

        $r4 = l0.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $i4 = $r4.<kanzi.SliceByteArray: int length>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i3 >= $i4 goto label5;

        $i5 = l4#20;

        goto label6;

     label5:
        $r5 = l0.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $i6 = $r5.<kanzi.SliceByteArray: int length>;

        $r6 = l0.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $i7 = $r6.<kanzi.SliceByteArray: int index>;

        $i5 = $i6 - $i7;

     label6:
        l5 = $i5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l5);

        if l5 <= 0 goto label7;

        $r7 = l0.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $r8 = $r7.<kanzi.SliceByteArray: byte[] array>;

        $r9 = l0.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $i8 = $r9.<kanzi.SliceByteArray: int index>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(l1, l2#1, $r8, $i8, l5);

        $r10 = l0.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $i9 = $r10.<kanzi.SliceByteArray: int index>;

        $i10 = $i9 + l5;

        $r10.<kanzi.SliceByteArray: int index> = $i10;

        l2#1 = l2#1 + l5;

        l4#20 = l4#20 - l5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l4#20);

        if l4#20 != 0 goto label7;

        goto label8;

     label7:
        $b11 = l1[l2#1];

        virtualinvoke l0.<kanzi.io.CompressedOutputStream: void write(int)>($b11);

        l2#1 = l2#1 + 1;

        l4#20 = l4#20 + -1;

        goto label4;

     label8:
        return;
    }

    public void write(int) throws java.io.IOException
    {
        kanzi.io.CompressedOutputStream l0;
        int l1, $i0, $i1, $i2, $i3;
        kanzi.SliceByteArray $r0, $r1, $r2, $r4;
        byte[] $r3;
        byte $b4;
        kanzi.BitStreamException $r5, l2#22;
        kanzi.io.IOException $r6, $r8, l2#29, $r10, $r12;
        java.lang.String $r7, $r13;
        java.lang.ArrayIndexOutOfBoundsException $r9, l2#32;
        java.lang.Exception $r11, l2#38;

        l0 := @this: kanzi.io.CompressedOutputStream;

        l1 := @parameter0: int;

     label1:
        $r0 = l0.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $i0 = $r0.<kanzi.SliceByteArray: int index>;

        $r1 = l0.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $i1 = $r1.<kanzi.SliceByteArray: int length>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i0 < $i1 goto label2;

        specialinvoke l0.<kanzi.io.CompressedOutputStream: void processBlock()>();

     label2:
        $r2 = l0.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $r3 = $r2.<kanzi.SliceByteArray: byte[] array>;

        $r4 = l0.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $i2 = $r4.<kanzi.SliceByteArray: int index>;

        $i3 = $i2 + 1;

        $r4.<kanzi.SliceByteArray: int index> = $i3;

        $b4 = (byte) l1;

        $r3[$i2] = $b4;

     label3:
        goto label8;

     label4:
        $r5 := @caughtexception;

        l2#22 = $r5;

        $r6 = new kanzi.io.IOException;

        $r7 = virtualinvoke l2#22.<kanzi.BitStreamException: java.lang.String getMessage()>();

        specialinvoke $r6.<kanzi.io.IOException: void <init>(java.lang.String,int)>($r7, -11);

        throw $r6;

     label5:
        $r8 := @caughtexception;

        l2#29 = $r8;

        throw l2#29;

     label6:
        $r9 := @caughtexception;

        l2#32 = $r9;

        $r10 = new kanzi.io.IOException;

        specialinvoke $r10.<kanzi.io.IOException: void <init>(java.lang.String,int)>("Stream closed", -11);

        throw $r10;

     label7:
        $r11 := @caughtexception;

        l2#38 = $r11;

        $r12 = new kanzi.io.IOException;

        $r13 = virtualinvoke l2#38.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r12.<kanzi.io.IOException: void <init>(java.lang.String,int)>($r13, -127);

        throw $r12;

     label8:
        return;

        catch kanzi.BitStreamException from label1 to label3 with label4;
        catch kanzi.io.IOException from label1 to label3 with label5;
        catch java.lang.ArrayIndexOutOfBoundsException from label1 to label3 with label6;
        catch java.lang.Exception from label1 to label3 with label7;
    }

    private void processBlock() throws java.io.IOException
    {
        kanzi.io.CompressedOutputStream l0;
        java.util.ArrayList l3, $r8;
        int l4, $i0, $i1, l2#21, $i2, l5#33, $i3, $i4, $i5, $i6, $i7, $i8, l6#50, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, l2#206;
        kanzi.SliceByteArray $r0, $r6, $r7, $r10, $r11, $r13, $r15, $r17, $r20, $r23, $r24, $r26, $r28, $r32, $r34, $r38, $r50;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0, $z2, $z3;
        java.util.List $r2, $r3, $r45;
        kanzi.Listener[] $r4, l1#17;
        java.lang.Object[] $r5;
        java.util.concurrent.atomic.AtomicInteger $r9, $r37;
        kanzi.SliceByteArray[] $r12, $r14, $r16, $r19, $r22, $r27, $r31, $r33;
        byte[] $r18, $r21, $r25, $r29;
        kanzi.io.CompressedOutputStream$EncodingTask $r30, l7#141;
        short $s21, $s22;
        kanzi.OutputBitStream $r35;
        kanzi.util.hash.XXHash32 $r36;
        java.lang.Object $r39, $r41, $r46, $r47;
        java.util.concurrent.Callable $r40;
        kanzi.io.CompressedOutputStream$Status l5#160, l7#184;
        kanzi.io.IOException $r42, $r48, $r51, l1#197, $r54;
        java.lang.String $r43, $r49, $r55;
        java.util.concurrent.ExecutorService $r44;
        java.util.Iterator l5#174;
        java.util.concurrent.Future l6#180;
        java.lang.Exception $r52, l1#200;
        kanzi.BitStreamException $r53;

        l0 := @this: kanzi.io.CompressedOutputStream;

        $r0 = l0.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $i0 = $r0.<kanzi.SliceByteArray: int index>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 0 goto label01;

        return;

     label01:
        $r1 = l0.<kanzi.io.CompressedOutputStream: java.util.concurrent.atomic.AtomicBoolean initialized>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean getAndSet(boolean)>(1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label02;

        virtualinvoke l0.<kanzi.io.CompressedOutputStream: void writeHeader()>();

     label02:
        $r2 = l0.<kanzi.io.CompressedOutputStream: java.util.List listeners>;

        $r3 = l0.<kanzi.io.CompressedOutputStream: java.util.List listeners>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r4 = newarray (kanzi.Listener)[$i1];

        $r5 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        l1#17 = (kanzi.Listener[]) $r5;

        $r6 = l0.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        l2#21 = $r6.<kanzi.SliceByteArray: int index>;

        $r7 = l0.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $r7.<kanzi.SliceByteArray: int index> = 0;

        $r8 = new java.util.ArrayList;

        $i2 = l0.<kanzi.io.CompressedOutputStream: int jobs>;

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>($i2);

        l3 = $r8;

        $r9 = l0.<kanzi.io.CompressedOutputStream: java.util.concurrent.atomic.AtomicInteger blockId>;

        l4 = virtualinvoke $r9.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        l5#33 = 0;

     label03:
        $i3 = l0.<kanzi.io.CompressedOutputStream: int jobs>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l5#33);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if l5#33 >= $i3 goto label08;

        $r10 = l0.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $i4 = $r10.<kanzi.SliceByteArray: int index>;

        $i5 = l0.<kanzi.io.CompressedOutputStream: int blockSize>;

        $i6 = $i4 + $i5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l2#21);

        if $i6 <= l2#21 goto label04;

        $r11 = l0.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $i7 = $r11.<kanzi.SliceByteArray: int index>;

        $i8 = l2#21 - $i7;

        goto label05;

     label04:
        $i8 = l0.<kanzi.io.CompressedOutputStream: int blockSize>;

     label05:
        l6#50 = $i8;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l6#50);

        if l6#50 != 0 goto label06;

        goto label08;

     label06:
        $r12 = l0.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray[] buffers>;

        $i9 = 2 * l5#33;

        $r13 = $r12[$i9];

        $r13.<kanzi.SliceByteArray: int index> = 0;

        $r14 = l0.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray[] buffers>;

        $i10 = 2 * l5#33;

        $i11 = $i10 + 1;

        $r15 = $r14[$i11];

        $r15.<kanzi.SliceByteArray: int index> = 0;

        $r16 = l0.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray[] buffers>;

        $i12 = 2 * l5#33;

        $r17 = $r16[$i12];

        $r18 = $r17.<kanzi.SliceByteArray: byte[] array>;

        $i13 = lengthof $r18;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i13);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l6#50);

        if $i13 >= l6#50 goto label07;

        $r19 = l0.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray[] buffers>;

        $i14 = 2 * l5#33;

        $r20 = $r19[$i14];

        $r21 = newarray (byte)[l6#50];

        $r20.<kanzi.SliceByteArray: byte[] array> = $r21;

        $r22 = l0.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray[] buffers>;

        $i15 = 2 * l5#33;

        $r23 = $r22[$i15];

        $r23.<kanzi.SliceByteArray: int length> = l6#50;

     label07:
        $r24 = l0.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $r25 = $r24.<kanzi.SliceByteArray: byte[] array>;

        $r26 = l0.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $i16 = $r26.<kanzi.SliceByteArray: int index>;

        $r27 = l0.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray[] buffers>;

        $i17 = 2 * l5#33;

        $r28 = $r27[$i17];

        $r29 = $r28.<kanzi.SliceByteArray: byte[] array>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r25, $i16, $r29, 0, l6#50);

        $r30 = new kanzi.io.CompressedOutputStream$EncodingTask;

        $r31 = l0.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray[] buffers>;

        $i18 = 2 * l5#33;

        $r32 = $r31[$i18];

        $r33 = l0.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray[] buffers>;

        $i19 = 2 * l5#33;

        $i20 = $i19 + 1;

        $r34 = $r33[$i20];

        $s21 = l0.<kanzi.io.CompressedOutputStream: short transformType>;

        $s22 = l0.<kanzi.io.CompressedOutputStream: short entropyType>;

        $i23 = l4 + l5#33;

        $i24 = $i23 + 1;

        $r35 = l0.<kanzi.io.CompressedOutputStream: kanzi.OutputBitStream obs>;

        $r36 = l0.<kanzi.io.CompressedOutputStream: kanzi.util.hash.XXHash32 hasher>;

        $r37 = l0.<kanzi.io.CompressedOutputStream: java.util.concurrent.atomic.AtomicInteger blockId>;

        $i25 = l0.<kanzi.io.CompressedOutputStream: int blockSize>;

        specialinvoke $r30.<kanzi.io.CompressedOutputStream$EncodingTask: void <init>(kanzi.SliceByteArray,kanzi.SliceByteArray,int,short,short,int,kanzi.OutputBitStream,kanzi.util.hash.XXHash32,java.util.concurrent.atomic.AtomicInteger,kanzi.Listener[],int)>($r32, $r34, l6#50, $s21, $s22, $i24, $r35, $r36, $r37, l1#17, $i25);

        l7#141 = $r30;

        interfaceinvoke l3.<java.util.List: boolean add(java.lang.Object)>(l7#141);

        $r38 = l0.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $i26 = $r38.<kanzi.SliceByteArray: int index>;

        $i27 = $i26 + l6#50;

        $r38.<kanzi.SliceByteArray: int index> = $i27;

        l5#33 = l5#33 + 1;

        goto label03;

     label08:
        $i28 = l0.<kanzi.io.CompressedOutputStream: int jobs>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i28);

        if $i28 != 1 goto label10;

        $r39 = interfaceinvoke l3.<java.util.List: java.lang.Object get(int)>(0);

        $r40 = (java.util.concurrent.Callable) $r39;

        $r41 = interfaceinvoke $r40.<java.util.concurrent.Callable: java.lang.Object call()>();

        l5#160 = (kanzi.io.CompressedOutputStream$Status) $r41;

        $i29 = l5#160.<kanzi.io.CompressedOutputStream$Status: int error>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i29);

        if $i29 == 0 goto label09;

        $r42 = new kanzi.io.IOException;

        $r43 = l5#160.<kanzi.io.CompressedOutputStream$Status: java.lang.String msg>;

        $i30 = l5#160.<kanzi.io.CompressedOutputStream$Status: int error>;

        specialinvoke $r42.<kanzi.io.IOException: void <init>(java.lang.String,int)>($r43, $i30);

        throw $r42;

     label09:
        goto label13;

     label10:
        $r44 = l0.<kanzi.io.CompressedOutputStream: java.util.concurrent.ExecutorService pool>;

        $r45 = interfaceinvoke $r44.<java.util.concurrent.ExecutorService: java.util.List invokeAll(java.util.Collection)>(l3);

        l5#174 = interfaceinvoke $r45.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z2 = interfaceinvoke l5#174.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label13;

        $r46 = interfaceinvoke l5#174.<java.util.Iterator: java.lang.Object next()>();

        l6#180 = (java.util.concurrent.Future) $r46;

        $r47 = interfaceinvoke l6#180.<java.util.concurrent.Future: java.lang.Object get()>();

        l7#184 = (kanzi.io.CompressedOutputStream$Status) $r47;

        $i31 = l7#184.<kanzi.io.CompressedOutputStream$Status: int error>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i31);

        if $i31 == 0 goto label12;

        $r48 = new kanzi.io.IOException;

        $r49 = l7#184.<kanzi.io.CompressedOutputStream$Status: java.lang.String msg>;

        $i32 = l7#184.<kanzi.io.CompressedOutputStream$Status: int error>;

        specialinvoke $r48.<kanzi.io.IOException: void <init>(java.lang.String,int)>($r49, $i32);

        throw $r48;

     label12:
        goto label11;

     label13:
        $r50 = l0.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $r50.<kanzi.SliceByteArray: int index> = 0;

     label14:
        goto label19;

     label15:
        $r51 := @caughtexception;

        l1#197 = $r51;

        throw l1#197;

     label16:
        $r52 := @caughtexception;

        l1#200 = $r52;

        $z3 = l1#200 instanceof kanzi.BitStreamException;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label17;

        $r53 = (kanzi.BitStreamException) l1#200;

        $i33 = virtualinvoke $r53.<kanzi.BitStreamException: int getErrorCode()>();

        goto label18;

     label17:
        $i33 = -127;

     label18:
        l2#206 = $i33;

        $r54 = new kanzi.io.IOException;

        $r55 = virtualinvoke l1#200.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r54.<kanzi.io.IOException: void <init>(java.lang.String,int)>($r55, l2#206);

        throw $r54;

     label19:
        return;

        catch kanzi.io.IOException from label02 to label14 with label15;
        catch java.lang.Exception from label02 to label14 with label16;
    }

    protected void writeHeader() throws java.io.IOException
    {
        kanzi.io.CompressedOutputStream l0;
        kanzi.OutputBitStream $r0, $r2, $r4, $r7, $r9, $r11, $r13;
        int $i0, $i1, $i3, $i6, $i9, $i10, $i11, $i13, $i14;
        kanzi.io.IOException $r1, $r3, $r6, $r8, $r10, $r12, $r14;
        kanzi.util.hash.XXHash32 $r5;
        long $l2, $l5, $l8, $l12;
        short $s4, $s7;

        l0 := @this: kanzi.io.CompressedOutputStream;

        $r0 = l0.<kanzi.io.CompressedOutputStream: kanzi.OutputBitStream obs>;

        $i0 = interfaceinvoke $r0.<kanzi.OutputBitStream: int writeBits(long,int)>(1262571098L, 32);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 == 32 goto label1;

        $r1 = new kanzi.io.IOException;

        specialinvoke $r1.<kanzi.io.IOException: void <init>(java.lang.String,int)>("Cannot write bitstream type to header", -12);

        throw $r1;

     label1:
        $r2 = l0.<kanzi.io.CompressedOutputStream: kanzi.OutputBitStream obs>;

        $i1 = interfaceinvoke $r2.<kanzi.OutputBitStream: int writeBits(long,int)>(4L, 7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 == 7 goto label2;

        $r3 = new kanzi.io.IOException;

        specialinvoke $r3.<kanzi.io.IOException: void <init>(java.lang.String,int)>("Cannot write bitstream version to header", -12);

        throw $r3;

     label2:
        $r4 = l0.<kanzi.io.CompressedOutputStream: kanzi.OutputBitStream obs>;

        $r5 = l0.<kanzi.io.CompressedOutputStream: kanzi.util.hash.XXHash32 hasher>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r5);

        if $r5 == null goto label3;

        $l2 = 1L;

        goto label4;

     label3:
        $l2 = 0L;

     label4:
        $i3 = interfaceinvoke $r4.<kanzi.OutputBitStream: int writeBits(long,int)>($l2, 1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 == 1 goto label5;

        $r6 = new kanzi.io.IOException;

        specialinvoke $r6.<kanzi.io.IOException: void <init>(java.lang.String,int)>("Cannot write checksum to header", -12);

        throw $r6;

     label5:
        $r7 = l0.<kanzi.io.CompressedOutputStream: kanzi.OutputBitStream obs>;

        $s4 = l0.<kanzi.io.CompressedOutputStream: short entropyType>;

        $l5 = (long) $s4;

        $i6 = interfaceinvoke $r7.<kanzi.OutputBitStream: int writeBits(long,int)>($l5, 5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if $i6 == 5 goto label6;

        $r8 = new kanzi.io.IOException;

        specialinvoke $r8.<kanzi.io.IOException: void <init>(java.lang.String,int)>("Cannot write entropy type to header", -12);

        throw $r8;

     label6:
        $r9 = l0.<kanzi.io.CompressedOutputStream: kanzi.OutputBitStream obs>;

        $s7 = l0.<kanzi.io.CompressedOutputStream: short transformType>;

        $l8 = (long) $s7;

        $i9 = interfaceinvoke $r9.<kanzi.OutputBitStream: int writeBits(long,int)>($l8, 16);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        if $i9 == 16 goto label7;

        $r10 = new kanzi.io.IOException;

        specialinvoke $r10.<kanzi.io.IOException: void <init>(java.lang.String,int)>("Cannot write transform types to header", -12);

        throw $r10;

     label7:
        $r11 = l0.<kanzi.io.CompressedOutputStream: kanzi.OutputBitStream obs>;

        $i10 = l0.<kanzi.io.CompressedOutputStream: int blockSize>;

        $i11 = $i10 >>> 4;

        $l12 = (long) $i11;

        $i13 = interfaceinvoke $r11.<kanzi.OutputBitStream: int writeBits(long,int)>($l12, 26);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i13);

        if $i13 == 26 goto label8;

        $r12 = new kanzi.io.IOException;

        specialinvoke $r12.<kanzi.io.IOException: void <init>(java.lang.String,int)>("Cannot write block size to header", -12);

        throw $r12;

     label8:
        $r13 = l0.<kanzi.io.CompressedOutputStream: kanzi.OutputBitStream obs>;

        $i14 = interfaceinvoke $r13.<kanzi.OutputBitStream: int writeBits(long,int)>(0L, 9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i14);

        if $i14 == 9 goto label9;

        $r14 = new kanzi.io.IOException;

        specialinvoke $r14.<kanzi.io.IOException: void <init>(java.lang.String,int)>("Cannot write reserved bits to header", -12);

        throw $r14;

     label9:
        return;
    }

    public boolean addListener(kanzi.Listener)
    {
        kanzi.io.CompressedOutputStream l0;
        kanzi.Listener l1;
        java.util.List $r0;
        boolean $z0;

        l0 := @this: kanzi.io.CompressedOutputStream;

        l1 := @parameter0: kanzi.Listener;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l1);

        if l1 == null goto label1;

        $r0 = l0.<kanzi.io.CompressedOutputStream: java.util.List listeners>;

        $z0 = interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(l1);

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void close() throws java.io.IOException
    {
        kanzi.io.CompressedOutputStream l0;
        byte[] $r0, $r10;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;
        kanzi.SliceByteArray $r2, $r9, $r11, $r12, $r15;
        int $i0, $i2, l1#37, $i3;
        kanzi.OutputBitStream $r3, $r4;
        kanzi.BitStreamException $r5, l1#18;
        kanzi.io.IOException $r6;
        java.lang.String $r7;
        java.util.List $r8;
        kanzi.SliceByteArray[] $r13, $r14;

        l0 := @this: kanzi.io.CompressedOutputStream;

        $r1 = l0.<kanzi.io.CompressedOutputStream: java.util.concurrent.atomic.AtomicBoolean closed>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean getAndSet(boolean)>(1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 1 goto label1;

        return;

     label1:
        $r2 = l0.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $i0 = $r2.<kanzi.SliceByteArray: int index>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label2;

        specialinvoke l0.<kanzi.io.CompressedOutputStream: void processBlock()>();

     label2:
        $r3 = l0.<kanzi.io.CompressedOutputStream: kanzi.OutputBitStream obs>;

        interfaceinvoke $r3.<kanzi.OutputBitStream: int writeBits(long,int)>(128L, 8);

        $r4 = l0.<kanzi.io.CompressedOutputStream: kanzi.OutputBitStream obs>;

        interfaceinvoke $r4.<kanzi.OutputBitStream: void close()>();

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        l1#18 = $r5;

        $r6 = new kanzi.io.IOException;

        $r7 = virtualinvoke l1#18.<kanzi.BitStreamException: java.lang.String getMessage()>();

        $i2 = virtualinvoke l1#18.<kanzi.BitStreamException: int getErrorCode()>();

        specialinvoke $r6.<kanzi.io.IOException: void <init>(java.lang.String,int)>($r7, $i2);

        throw $r6;

     label5:
        $r8 = l0.<kanzi.io.CompressedOutputStream: java.util.List listeners>;

        interfaceinvoke $r8.<java.util.List: void clear()>();

        $r9 = l0.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $r10 = <kanzi.io.CompressedOutputStream: byte[] EMPTY_BYTE_ARRAY>;

        $r9.<kanzi.SliceByteArray: byte[] array> = $r10;

        $r11 = l0.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $r11.<kanzi.SliceByteArray: int length> = 0;

        $r12 = l0.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $r12.<kanzi.SliceByteArray: int index> = -1;

        l1#37 = 0;

     label6:
        $r13 = l0.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray[] buffers>;

        $i3 = lengthof $r13;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l1#37);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if l1#37 >= $i3 goto label7;

        $r14 = l0.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray[] buffers>;

        $r15 = new kanzi.SliceByteArray;

        $r0 = <kanzi.io.CompressedOutputStream: byte[] EMPTY_BYTE_ARRAY>;

        specialinvoke $r15.<kanzi.SliceByteArray: void <init>(byte[],int)>($r0, 0);

        $r14[l1#37] = $r15;

        l1#37 = l1#37 + 1;

        goto label6;

     label7:
        return;

        catch kanzi.BitStreamException from label2 to label3 with label4;
    }


