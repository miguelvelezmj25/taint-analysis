    public static weka.core.pmml.Array create(org.w3c.dom.Element) throws java.lang.Exception
    {
        org.w3c.dom.Element arrayE;
        boolean $z0, $z1;
        java.lang.Exception $r0;
        weka.core.pmml.SparseArray $r1;
        weka.core.pmml.Array $r2;

        arrayE := @parameter0: org.w3c.dom.Element;

        $z0 = staticinvoke <weka.core.pmml.Array: boolean isArray(org.w3c.dom.Element)>(arrayE);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r0 = new java.lang.Exception;

        specialinvoke $r0.<java.lang.Exception: void <init>(java.lang.String)>("[Array] the supplied element does not contain an array!");

        throw $r0;

     label1:
        $z1 = staticinvoke <weka.core.pmml.Array: boolean isSparseArray(org.w3c.dom.Element)>(arrayE);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        $r1 = new weka.core.pmml.SparseArray;

        specialinvoke $r1.<weka.core.pmml.SparseArray: void <init>(org.w3c.dom.Element)>(arrayE);

        return $r1;

     label2:
        $r2 = new weka.core.pmml.Array;

        specialinvoke $r2.<weka.core.pmml.Array: void <init>(org.w3c.dom.Element)>(arrayE);

        return $r2;
    }

    private static boolean isSparseArray(org.w3c.dom.Element)
    {
        org.w3c.dom.Element arrayE;
        java.lang.String name;
        boolean $z0, $z1;

        arrayE := @parameter0: org.w3c.dom.Element;

        name = interfaceinvoke arrayE.<org.w3c.dom.Element: java.lang.String getTagName()>();

        $z0 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>("INT-SparseArray");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>("REAL-SparseArray");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static boolean isArray(org.w3c.dom.Element)
    {
        org.w3c.dom.Element arrayE;
        java.lang.String name;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        arrayE := @parameter0: org.w3c.dom.Element;

        name = interfaceinvoke arrayE.<org.w3c.dom.Element: java.lang.String getTagName()>();

        $z0 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>("Array");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>("NUM-ARRAY");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>("INT-ARRAY");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>("REAL-ARRAY");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label1;

        $z4 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>("STRING-ARRAY");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label1;

        $z5 = staticinvoke <weka.core.pmml.Array: boolean isSparseArray(org.w3c.dom.Element)>(arrayE);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    protected void <init>(org.w3c.dom.Element) throws java.lang.Exception
    {
        weka.core.pmml.Array this;
        org.w3c.dom.Element arrayE;
        java.util.ArrayList $r0;
        weka.core.pmml.Array$ArrayType $r1;

        this := @this: weka.core.pmml.Array;

        arrayE := @parameter0: org.w3c.dom.Element;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        this.<weka.core.pmml.Array: java.util.ArrayList m_values> = $r0;

        $r1 = <weka.core.pmml.Array$ArrayType: weka.core.pmml.Array$ArrayType NUM>;

        this.<weka.core.pmml.Array: weka.core.pmml.Array$ArrayType m_type> = $r1;

        virtualinvoke this.<weka.core.pmml.Array: void initialize(org.w3c.dom.Element)>(arrayE);

        return;
    }

    protected void initialize(org.w3c.dom.Element) throws java.lang.Exception
    {
        weka.core.pmml.Array this;
        org.w3c.dom.Element arrayE;
        java.lang.String arrayS, type, contents, $r3, $r9;
        weka.core.pmml.Array$ArrayType[] l3;
        int l4, l5#28, $i1, $i2;
        weka.core.pmml.Array$ArrayType a, $r0, $r1, $r2;
        java.io.StringReader sr, $r6;
        java.io.StreamTokenizer st, $r7;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.w3c.dom.NodeList $r4;
        org.w3c.dom.Node $r5;
        java.util.ArrayList $r8;

        this := @this: weka.core.pmml.Array;

        arrayE := @parameter0: org.w3c.dom.Element;

        arrayS = interfaceinvoke arrayE.<org.w3c.dom.Element: java.lang.String getTagName()>();

        $z0 = virtualinvoke arrayS.<java.lang.String: boolean equals(java.lang.Object)>("Array");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label4;

        type = interfaceinvoke arrayE.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("type");

        $z1 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("int");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label1;

        $r0 = <weka.core.pmml.Array$ArrayType: weka.core.pmml.Array$ArrayType INT>;

        this.<weka.core.pmml.Array: weka.core.pmml.Array$ArrayType m_type> = $r0;

        goto label3;

     label1:
        $z2 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("real");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label2;

        $r1 = <weka.core.pmml.Array$ArrayType: weka.core.pmml.Array$ArrayType REAL>;

        this.<weka.core.pmml.Array: weka.core.pmml.Array$ArrayType m_type> = $r1;

        goto label3;

     label2:
        $z3 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("string");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label3;

        $r2 = <weka.core.pmml.Array$ArrayType: weka.core.pmml.Array$ArrayType STRING>;

        this.<weka.core.pmml.Array: weka.core.pmml.Array$ArrayType m_type> = $r2;

     label3:
        goto label7;

     label4:
        l3 = staticinvoke <weka.core.pmml.Array$ArrayType: weka.core.pmml.Array$ArrayType[] values()>();

        l4 = lengthof l3;

        l5#28 = 0;

     label5:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l5#28);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l4);

        if l5#28 >= l4 goto label7;

        a = l3[l5#28];

        $r3 = virtualinvoke a.<weka.core.pmml.Array$ArrayType: java.lang.String toString()>();

        $z4 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(arrayS);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label6;

        this.<weka.core.pmml.Array: weka.core.pmml.Array$ArrayType m_type> = a;

        goto label7;

     label6:
        l5#28 = l5#28 + 1;

        goto label5;

     label7:
        $r4 = interfaceinvoke arrayE.<org.w3c.dom.Element: org.w3c.dom.NodeList getChildNodes()>();

        $r5 = interfaceinvoke $r4.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        contents = interfaceinvoke $r5.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $r6 = new java.io.StringReader;

        specialinvoke $r6.<java.io.StringReader: void <init>(java.lang.String)>(contents);

        sr = $r6;

        $r7 = new java.io.StreamTokenizer;

        specialinvoke $r7.<java.io.StreamTokenizer: void <init>(java.io.Reader)>(sr);

        st = $r7;

        virtualinvoke st.<java.io.StreamTokenizer: void resetSyntax()>();

        virtualinvoke st.<java.io.StreamTokenizer: void whitespaceChars(int,int)>(0, 32);

        virtualinvoke st.<java.io.StreamTokenizer: void wordChars(int,int)>(33, 255);

        virtualinvoke st.<java.io.StreamTokenizer: void whitespaceChars(int,int)>(32, 32);

        virtualinvoke st.<java.io.StreamTokenizer: void quoteChar(int)>(34);

        virtualinvoke st.<java.io.StreamTokenizer: void quoteChar(int)>(39);

        virtualinvoke st.<java.io.StreamTokenizer: int nextToken()>();

     label8:
        $i1 = st.<java.io.StreamTokenizer: int ttype>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 == -1 goto label9;

        $i2 = st.<java.io.StreamTokenizer: int ttype>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 == 10 goto label9;

        $r8 = this.<weka.core.pmml.Array: java.util.ArrayList m_values>;

        $r9 = st.<java.io.StreamTokenizer: java.lang.String sval>;

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

        virtualinvoke st.<java.io.StreamTokenizer: int nextToken()>();

        goto label8;

     label9:
        return;
    }

    public weka.core.pmml.Array$ArrayType getType()
    {
        weka.core.pmml.Array this;
        weka.core.pmml.Array$ArrayType $r0;

        this := @this: weka.core.pmml.Array;

        $r0 = this.<weka.core.pmml.Array: weka.core.pmml.Array$ArrayType m_type>;

        return $r0;
    }


