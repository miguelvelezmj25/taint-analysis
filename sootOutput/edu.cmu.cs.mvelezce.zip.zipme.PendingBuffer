    public void <init>(int)
    {
        edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer this;
        int bufsize;
        byte[] $r0;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer;

        bufsize := @parameter0: int;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = newarray (byte)[bufsize];

        this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: byte[] buf> = $r0;

        return;
    }

    public final void reset()
    {
        edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer this;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer;

        this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int bitCount> = 0;

        this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int end> = 0;

        this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int start> = 0;

        return;
    }

    public final boolean isFlushed()
    {
        edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer this;
        int $i0;
        boolean $z0;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer;

        $i0 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int end>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final void writeShortMSB(int)
    {
        edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer this;
        int s, $i0, $i1, $i2, $i4, $i5;
        byte[] $r0, $r2;
        byte $b3, $b6;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer;

        s := @parameter0: int;

        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: byte[] buf>;

        $i0 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int end>;

        $i1 = $i0 + 1;

        this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int end> = $i1;

        $i2 = s >> 8;

        $b3 = (byte) $i2;

        $r0[$i0] = $b3;

        $r2 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: byte[] buf>;

        $i4 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int end>;

        $i5 = $i4 + 1;

        this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int end> = $i5;

        $b6 = (byte) s;

        $r2[$i4] = $b6;

        return;
    }

    public final void alignToByte()
    {
        edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer this;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9;
        byte[] $r0, $r2;
        byte $b4, $b10;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer;

        $i0 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int bitCount>;

        if $i0 <= 0 goto label1;

        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: byte[] buf>;

        $i1 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int end>;

        $i2 = $i1 + 1;

        this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int end> = $i2;

        $i3 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int bits>;

        $b4 = (byte) $i3;

        $r0[$i1] = $b4;

        $i5 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int bitCount>;

        if $i5 <= 8 goto label1;

        $r2 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: byte[] buf>;

        $i6 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int end>;

        $i7 = $i6 + 1;

        this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int end> = $i7;

        $i8 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int bits>;

        $i9 = $i8 >>> 8;

        $b10 = (byte) $i9;

        $r2[$i6] = $b10;

     label1:
        this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int bits> = 0;

        this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int bitCount> = 0;

        return;
    }

    public final void writeBits(int, int)
    {
        edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer this;
        int b, count, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19;
        byte[] $r2, $r4;
        byte $b10, $b15;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer;

        b := @parameter0: int;

        count := @parameter1: int;

        $i0 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int bits>;

        $i1 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int bitCount>;

        $i2 = b << $i1;

        $i3 = $i0 | $i2;

        this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int bits> = $i3;

        $i4 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int bitCount>;

        $i5 = $i4 + count;

        this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int bitCount> = $i5;

        $i6 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int bitCount>;

        if $i6 < 16 goto label1;

        $r2 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: byte[] buf>;

        $i7 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int end>;

        $i8 = $i7 + 1;

        this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int end> = $i8;

        $i9 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int bits>;

        $b10 = (byte) $i9;

        $r2[$i7] = $b10;

        $r4 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: byte[] buf>;

        $i11 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int end>;

        $i12 = $i11 + 1;

        this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int end> = $i12;

        $i13 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int bits>;

        $i14 = $i13 >>> 8;

        $b15 = (byte) $i14;

        $r4[$i11] = $b15;

        $i16 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int bits>;

        $i17 = $i16 >>> 16;

        this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int bits> = $i17;

        $i18 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int bitCount>;

        $i19 = $i18 - 16;

        this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int bitCount> = $i19;

     label1:
        return;
    }

    public final int getBitCount()
    {
        edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer this;
        int $i0;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer;

        $i0 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int bitCount>;

        return $i0;
    }

    public final void writeBlock(byte[], int, int)
    {
        edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer this;
        byte[] block, $r0;
        int offset, len, $i0, $i1, $i2;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer;

        block := @parameter0: byte[];

        offset := @parameter1: int;

        len := @parameter2: int;

        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: byte[] buf>;

        $i0 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int end>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(block, offset, $r0, $i0, len);

        $i1 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int end>;

        $i2 = $i1 + len;

        this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int end> = $i2;

        return;
    }

    public final void writeShort(int)
    {
        edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer this;
        int s, $i0, $i1, $i3, $i4, $i5;
        byte[] $r0, $r2;
        byte $b2, $b6;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer;

        s := @parameter0: int;

        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: byte[] buf>;

        $i0 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int end>;

        $i1 = $i0 + 1;

        this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int end> = $i1;

        $b2 = (byte) s;

        $r0[$i0] = $b2;

        $r2 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: byte[] buf>;

        $i3 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int end>;

        $i4 = $i3 + 1;

        this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int end> = $i4;

        $i5 = s >> 8;

        $b6 = (byte) $i5;

        $r2[$i3] = $b6;

        return;
    }

    public final int flush(byte[], int, int)
    {
        edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer this;
        byte[] output, $r0, $r4, $r5;
        int offset, length#1, $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        byte $b4;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer;

        output := @parameter0: byte[];

        offset := @parameter1: int;

        length#1 := @parameter2: int;

        $i0 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int bitCount>;

        if $i0 < 8 goto label1;

        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: byte[] buf>;

        $i1 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int end>;

        $i2 = $i1 + 1;

        this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int end> = $i2;

        $i3 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int bits>;

        $b4 = (byte) $i3;

        $r0[$i1] = $b4;

        $i5 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int bits>;

        $i6 = $i5 >>> 8;

        this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int bits> = $i6;

        $i7 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int bitCount>;

        $i8 = $i7 - 8;

        this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int bitCount> = $i8;

     label1:
        $i9 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int end>;

        $i10 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int start>;

        $i11 = $i9 - $i10;

        if length#1 <= $i11 goto label2;

        $i12 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int end>;

        $i13 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int start>;

        length#1 = $i12 - $i13;

        $r4 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: byte[] buf>;

        $i14 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int start>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i14, output, offset, length#1);

        this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int start> = 0;

        this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int end> = 0;

        goto label3;

     label2:
        $r5 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: byte[] buf>;

        $i15 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int start>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i15, output, offset, length#1);

        $i16 = this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int start>;

        $i17 = $i16 + length#1;

        this.<edu.cmu.cs.mvelezce.zip.zipme.PendingBuffer: int start> = $i17;

     label3:
        return length#1;
    }


