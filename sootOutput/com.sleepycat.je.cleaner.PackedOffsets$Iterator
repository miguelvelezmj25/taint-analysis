    boolean hasNext()
    {
        com.sleepycat.je.cleaner.PackedOffsets$Iterator this;
        com.sleepycat.je.cleaner.PackedOffsets $r0, $r2;
        short[] $r1, $r3;
        int $i0, $i1;
        boolean $z0;

        this := @this: com.sleepycat.je.cleaner.PackedOffsets$Iterator;

        $r0 = this.<com.sleepycat.je.cleaner.PackedOffsets$Iterator: com.sleepycat.je.cleaner.PackedOffsets this$0>;

        $r1 = staticinvoke <com.sleepycat.je.cleaner.PackedOffsets: short[] access$100(com.sleepycat.je.cleaner.PackedOffsets)>($r0);

        if $r1 == null goto label1;

        $i0 = this.<com.sleepycat.je.cleaner.PackedOffsets$Iterator: int index>;

        $r2 = this.<com.sleepycat.je.cleaner.PackedOffsets$Iterator: com.sleepycat.je.cleaner.PackedOffsets this$0>;

        $r3 = staticinvoke <com.sleepycat.je.cleaner.PackedOffsets: short[] access$100(com.sleepycat.je.cleaner.PackedOffsets)>($r2);

        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    long next()
    {
        com.sleepycat.je.cleaner.PackedOffsets$Iterator this;
        long s, val#3, $l4, $l5, $l6, val#34;
        int shift#5, $i0, $i1;
        com.sleepycat.je.cleaner.PackedOffsets $r0;
        short[] $r1;
        short $s2;
        byte $b3;

        this := @this: com.sleepycat.je.cleaner.PackedOffsets$Iterator;

        val#3 = this.<com.sleepycat.je.cleaner.PackedOffsets$Iterator: long priorVal>;

        shift#5 = 0;

     label1:
        $r0 = this.<com.sleepycat.je.cleaner.PackedOffsets$Iterator: com.sleepycat.je.cleaner.PackedOffsets this$0>;

        $r1 = staticinvoke <com.sleepycat.je.cleaner.PackedOffsets: short[] access$100(com.sleepycat.je.cleaner.PackedOffsets)>($r0);

        $i0 = this.<com.sleepycat.je.cleaner.PackedOffsets$Iterator: int index>;

        $i1 = $i0 + 1;

        this.<com.sleepycat.je.cleaner.PackedOffsets$Iterator: int index> = $i1;

        $s2 = $r1[$i0];

        s = (long) $s2;

        $b3 = s cmp 0L;

        if $b3 >= 0 goto label2;

        $l4 = -1L - s;

        $l5 = $l4 << shift#5;

        val#3 = val#3 + $l5;

        goto label3;

     label2:
        $l6 = s << shift#5;

        val#34 = val#3 + $l6;

        goto label4;

     label3:
        shift#5 = shift#5 + 15;

        goto label1;

     label4:
        this.<com.sleepycat.je.cleaner.PackedOffsets$Iterator: long priorVal> = val#34;

        return val#34;
    }

    void <init>(com.sleepycat.je.cleaner.PackedOffsets, com.sleepycat.je.cleaner.PackedOffsets$1)
    {
        com.sleepycat.je.cleaner.PackedOffsets$Iterator this;
        com.sleepycat.je.cleaner.PackedOffsets x0;
        com.sleepycat.je.cleaner.PackedOffsets$1 x1;

        this := @this: com.sleepycat.je.cleaner.PackedOffsets$Iterator;

        x0 := @parameter0: com.sleepycat.je.cleaner.PackedOffsets;

        x1 := @parameter1: com.sleepycat.je.cleaner.PackedOffsets$1;

        specialinvoke this.<com.sleepycat.je.cleaner.PackedOffsets$Iterator: void <init>(com.sleepycat.je.cleaner.PackedOffsets)>(x0);

        return;
    }

    private void <init>(com.sleepycat.je.cleaner.PackedOffsets)
    {
        com.sleepycat.je.cleaner.PackedOffsets$Iterator this;
        com.sleepycat.je.cleaner.PackedOffsets this$0;

        this := @this: com.sleepycat.je.cleaner.PackedOffsets$Iterator;

        this$0 := @parameter0: com.sleepycat.je.cleaner.PackedOffsets;

        this.<com.sleepycat.je.cleaner.PackedOffsets$Iterator: com.sleepycat.je.cleaner.PackedOffsets this$0> = this$0;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }


