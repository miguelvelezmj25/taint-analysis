    void <init>(edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman, int, int, int)
    {
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree this;
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman this$0;
        int elems, minCodes, maxLength;
        short[] $r0;
        int[] $r1;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree;

        this$0 := @parameter0: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman;

        elems := @parameter1: int;

        minCodes := @parameter2: int;

        maxLength := @parameter3: int;

        this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman this$0> = this$0;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: int minNumCodes> = minCodes;

        this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: int maxLength> = maxLength;

        $r0 = newarray (short)[elems];

        this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: short[] freqs> = $r0;

        $r1 = newarray (int)[maxLength];

        this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: int[] bl_counts> = $r1;

        return;
    }

    void writeTree(edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree)
    {
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree this, blTree;
        byte nextlen, curlen#2, min_count#18, $b2;
        int i#4, $i0, count#9, $i1, $i3, $i4, $i5, $i6;
        byte[] $r0, $r1;
        short max_count#16;
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman $r2, $r4, $r6;
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending $r3, $r5, $r7;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree;

        blTree := @parameter0: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree;

        curlen#2 = -1;

        i#4 = 0;

     label01:
        $i0 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: int numCodes>;

        if i#4 >= $i0 goto label11;

        count#9 = 1;

        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: byte[] length>;

        nextlen = $r0[i#4];

        if nextlen != 0 goto label02;

        max_count#16 = 138;

        min_count#18 = 3;

        goto label03;

     label02:
        max_count#16 = 6;

        min_count#18 = 3;

        if curlen#2 == nextlen goto label03;

        virtualinvoke blTree.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: void writeSymbol(int)>(nextlen);

        count#9 = 0;

     label03:
        curlen#2 = nextlen;

        i#4 = i#4 + 1;

     label04:
        $i1 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: int numCodes>;

        if i#4 >= $i1 goto label05;

        $r1 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: byte[] length>;

        $b2 = $r1[i#4];

        if curlen#2 != $b2 goto label05;

        i#4 = i#4 + 1;

        count#9 = count#9 + 1;

        if count#9 < max_count#16 goto label04;

        goto label05;

     label05:
        if count#9 >= min_count#18 goto label07;

     label06:
        $i3 = count#9;

        count#9 = count#9 + -1;

        if $i3 <= 0 goto label10;

        virtualinvoke blTree.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: void writeSymbol(int)>(curlen#2);

        goto label06;

     label07:
        if curlen#2 == 0 goto label08;

        virtualinvoke blTree.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: void writeSymbol(int)>(16);

        $r2 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman this$0>;

        $r3 = $r2.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending pending>;

        $i4 = count#9 - 3;

        virtualinvoke $r3.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending: void writeBits(int,int)>($i4, 2);

        goto label10;

     label08:
        if count#9 > 10 goto label09;

        virtualinvoke blTree.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: void writeSymbol(int)>(17);

        $r4 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman this$0>;

        $r5 = $r4.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending pending>;

        $i5 = count#9 - 3;

        virtualinvoke $r5.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending: void writeBits(int,int)>($i5, 3);

        goto label10;

     label09:
        virtualinvoke blTree.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: void writeSymbol(int)>(18);

        $r6 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman this$0>;

        $r7 = $r6.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending pending>;

        $i6 = count#9 - 11;

        virtualinvoke $r7.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending: void writeBits(int,int)>($i6, 7);

     label10:
        goto label01;

     label11:
        return;
    }

    final void writeSymbol(int)
    {
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree this;
        int code, $i1;
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman $r0;
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending $r1;
        short[] $r2;
        short $s0;
        byte[] $r3;
        byte $b2;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree;

        code := @parameter0: int;

        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman this$0>;

        $r1 = $r0.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending pending>;

        $r2 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: short[] codes>;

        $s0 = $r2[code];

        $i1 = $s0 & 65535;

        $r3 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: byte[] length>;

        $b2 = $r3[code];

        virtualinvoke $r1.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending: void writeBits(int,int)>($i1, $b2);

        return;
    }

    public void buildCodes()
    {
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree this;
        int[] nextCode, $r2;
        byte bits;
        int $i0, code#5, $i1, bits#12, $i2, $i3, $i4, $i5, i#30, $i6, $i7, $i8, $i10, $i11, $i12, $i13, $i14;
        short[] $r0, $r1, $r4;
        byte[] $r3;
        short $s9;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree;

        $i0 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: int maxLength>;

        nextCode = newarray (int)[$i0];

        code#5 = 0;

        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: short[] freqs>;

        $i1 = lengthof $r0;

        $r1 = newarray (short)[$i1];

        this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: short[] codes> = $r1;

        bits#12 = 0;

     label1:
        $i2 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: int maxLength>;

        if bits#12 >= $i2 goto label2;

        nextCode[bits#12] = code#5;

        $r2 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: int[] bl_counts>;

        $i3 = $r2[bits#12];

        $i4 = 15 - bits#12;

        $i5 = $i3 << $i4;

        code#5 = code#5 + $i5;

        bits#12 = bits#12 + 1;

        goto label1;

     label2:
        i#30 = 0;

     label3:
        $i6 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: int numCodes>;

        if i#30 >= $i6 goto label5;

        $r3 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: byte[] length>;

        bits = $r3[i#30];

        if bits <= 0 goto label4;

        $r4 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: short[] codes>;

        $i7 = bits - 1;

        $i8 = nextCode[$i7];

        $s9 = staticinvoke <edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: short bitReverse(int)>($i8);

        $r4[i#30] = $s9;

        $i10 = bits - 1;

        $i11 = nextCode[$i10];

        $i12 = 16 - bits;

        $i13 = 1 << $i12;

        $i14 = $i11 + $i13;

        nextCode[$i10] = $i14;

     label4:
        i#30 = i#30 + 1;

        goto label3;

     label5:
        return;
    }

    void reset()
    {
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree this;
        int i#2, $i0;
        short[] $r0, $r1;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree;

        i#2 = 0;

     label1:
        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: short[] freqs>;

        $i0 = lengthof $r0;

        if i#2 >= $i0 goto label2;

        $r1 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: short[] freqs>;

        $r1[i#2] = 0;

        i#2 = i#2 + 1;

        goto label1;

     label2:
        this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: short[] codes> = null;

        this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: byte[] length> = null;

        return;
    }

    void setStaticCodes(short[], byte[])
    {
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree this;
        short[] stCodes;
        byte[] stLength;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree;

        stCodes := @parameter0: short[];

        stLength := @parameter1: byte[];

        this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: short[] codes> = stCodes;

        this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: byte[] length> = stLength;

        return;
    }

    int getEncodedLength()
    {
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree this;
        int len#2, i#4, $i0, $i3;
        short[] $r0, $r1;
        short $s1;
        byte[] $r2;
        byte $b2;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree;

        len#2 = 0;

        i#4 = 0;

     label1:
        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: short[] freqs>;

        $i0 = lengthof $r0;

        if i#4 >= $i0 goto label2;

        $r1 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: short[] freqs>;

        $s1 = $r1[i#4];

        $r2 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: byte[] length>;

        $b2 = $r2[i#4];

        $i3 = $s1 * $b2;

        len#2 = len#2 + $i3;

        i#4 = i#4 + 1;

        goto label1;

     label2:
        return len#2;
    }

    void buildTree()
    {
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree this;
        int numSymbols, ppos, node, numLeafs, node, first, second, mindepth, heapLen#7, maxCode#9, n#11, $i0, pos#20, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, numNodes#73, i#75, $i15, $i16, $i17, $i19, last#110, ppos#112, path#114, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, lastVal#147, path#150, $i29, $i30, $i31, $i32, $i33, $i34, last#174, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, lastVal#212, ppos#214, path#216, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, path#248, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64;
        int[] heap, childs, values;
        short freq, $s4, $s18;
        short[] $r0, $r1, $r2, $r3;
        java.lang.RuntimeException $r4;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree;

        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: short[] freqs>;

        numSymbols = lengthof $r0;

        heap = newarray (int)[numSymbols];

        heapLen#7 = 0;

        maxCode#9 = 0;

        n#11 = 0;

     label01:
        if n#11 >= numSymbols goto label05;

        $r1 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: short[] freqs>;

        freq = $r1[n#11];

        if freq == 0 goto label04;

        $i0 = heapLen#7;

        heapLen#7 = heapLen#7 + 1;

        pos#20 = $i0;

     label02:
        if pos#20 <= 0 goto label03;

        $r2 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: short[] freqs>;

        $i1 = pos#20 - 1;

        $i2 = $i1 / 2;

        ppos = $i2;

        $i3 = heap[$i2];

        $s4 = $r2[$i3];

        if $s4 <= freq goto label03;

        $i5 = heap[ppos];

        heap[pos#20] = $i5;

        pos#20 = ppos;

        goto label02;

     label03:
        heap[pos#20] = n#11;

        maxCode#9 = n#11;

     label04:
        n#11 = n#11 + 1;

        goto label01;

     label05:
        if heapLen#7 >= 2 goto label08;

        if maxCode#9 >= 2 goto label06;

        maxCode#9 = maxCode#9 + 1;

        $i6 = maxCode#9;

        goto label07;

     label06:
        $i6 = 0;

     label07:
        node = $i6;

        $i7 = heapLen#7;

        heapLen#7 = heapLen#7 + 1;

        heap[$i7] = node;

        goto label05;

     label08:
        $i8 = maxCode#9 + 1;

        $i9 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: int minNumCodes>;

        $i10 = staticinvoke <java.lang.Math: int max(int,int)>($i8, $i9);

        this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: int numCodes> = $i10;

        numLeafs = heapLen#7;

        $i11 = 4 * heapLen#7;

        $i12 = $i11 - 2;

        childs = newarray (int)[$i12];

        $i13 = 2 * heapLen#7;

        $i14 = $i13 - 1;

        values = newarray (int)[$i14];

        numNodes#73 = numLeafs;

        i#75 = 0;

     label09:
        if i#75 >= heapLen#7 goto label10;

        node = heap[i#75];

        $i15 = 2 * i#75;

        childs[$i15] = node;

        $i16 = 2 * i#75;

        $i17 = $i16 + 1;

        childs[$i17] = -1;

        $r3 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: short[] freqs>;

        $s18 = $r3[node];

        $i19 = $s18 << 8;

        values[i#75] = $i19;

        heap[i#75] = i#75;

        i#75 = i#75 + 1;

        goto label09;

     label10:
        first = heap[0];

        heapLen#7 = heapLen#7 + -1;

        last#110 = heap[heapLen#7];

        ppos#112 = 0;

        path#114 = 1;

     label11:
        if path#114 >= heapLen#7 goto label13;

        $i20 = path#114 + 1;

        if $i20 >= heapLen#7 goto label12;

        $i21 = heap[path#114];

        $i22 = values[$i21];

        $i23 = path#114 + 1;

        $i24 = heap[$i23];

        $i25 = values[$i24];

        if $i22 <= $i25 goto label12;

        path#114 = path#114 + 1;

     label12:
        $i26 = heap[path#114];

        heap[ppos#112] = $i26;

        ppos#112 = path#114;

        $i27 = path#114 * 2;

        path#114 = $i27 + 1;

        goto label11;

     label13:
        lastVal#147 = values[last#110];

     label14:
        path#150 = ppos#112;

        if ppos#112 <= 0 goto label15;

        $i29 = path#150 - 1;

        $i30 = $i29 / 2;

        ppos#112 = $i30;

        $i31 = heap[$i30];

        $i32 = values[$i31];

        if $i32 <= lastVal#147 goto label15;

        $i33 = heap[ppos#112];

        heap[path#150] = $i33;

        goto label14;

     label15:
        heap[path#150] = last#110;

        second = heap[0];

        $i34 = numNodes#73;

        numNodes#73 = numNodes#73 + 1;

        last#174 = $i34;

        $i35 = 2 * last#174;

        childs[$i35] = first;

        $i36 = 2 * last#174;

        $i37 = $i36 + 1;

        childs[$i37] = second;

        $i38 = values[first];

        $i39 = $i38 & 255;

        $i40 = values[second];

        $i41 = $i40 & 255;

        mindepth = staticinvoke <java.lang.Math: int min(int,int)>($i39, $i41);

        $i42 = values[first];

        $i43 = values[second];

        $i44 = $i42 + $i43;

        $i45 = $i44 - mindepth;

        $i46 = $i45 + 1;

        lastVal#212 = $i46;

        values[last#174] = $i46;

        ppos#214 = 0;

        path#216 = 1;

     label16:
        if path#216 >= heapLen#7 goto label18;

        $i47 = path#216 + 1;

        if $i47 >= heapLen#7 goto label17;

        $i48 = heap[path#216];

        $i49 = values[$i48];

        $i50 = path#216 + 1;

        $i51 = heap[$i50];

        $i52 = values[$i51];

        if $i49 <= $i52 goto label17;

        path#216 = path#216 + 1;

     label17:
        $i53 = heap[path#216];

        heap[ppos#214] = $i53;

        ppos#214 = path#216;

        $i54 = ppos#214 * 2;

        path#216 = $i54 + 1;

        goto label16;

     label18:
        path#248 = ppos#214;

        if ppos#214 <= 0 goto label19;

        $i56 = path#248 - 1;

        $i57 = $i56 / 2;

        ppos#214 = $i57;

        $i58 = heap[$i57];

        $i59 = values[$i58];

        if $i59 <= lastVal#212 goto label19;

        $i60 = heap[ppos#214];

        heap[path#248] = $i60;

        goto label18;

     label19:
        heap[path#248] = last#174;

        if heapLen#7 > 1 goto label10;

        $i61 = heap[0];

        $i62 = lengthof childs;

        $i63 = $i62 / 2;

        $i64 = $i63 - 1;

        if $i61 == $i64 goto label20;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Weird!");

        throw $r4;

     label20:
        specialinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: void buildLength(int[])>(childs);

        return;
    }

    private void buildLength(int[])
    {
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree this;
        int[] childs, lengths, $r2, $r3, $r5, $r6, $r7, $r8, $r9, $r10;
        int numNodes, numLeafs, childPtr, $i0, $i1, $i2, overflow#16, i#18, $i3, $i4, i#36, $i5, $i6, $i7, $i8, bitLength#51, $i9, $i10, $i11, $i12, $i13, $i15, bitLength#79, $i16, $i17, $i18, $i19, $i20, $i21, $i23, incrBitLen#106, $i24, $i26, $i27, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, nodePtr#169, bits#172, $i45, n#180, $i46, $i47, $i48, $i49, $i50;
        short[] $r0;
        byte[] $r1, $r4, $r11;
        byte $b22, $b51;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree;

        childs := @parameter0: int[];

        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: short[] freqs>;

        $i0 = lengthof $r0;

        $r1 = newarray (byte)[$i0];

        this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: byte[] length> = $r1;

        $i1 = lengthof childs;

        numNodes = $i1 / 2;

        $i2 = numNodes + 1;

        numLeafs = $i2 / 2;

        overflow#16 = 0;

        i#18 = 0;

     label01:
        $i3 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: int maxLength>;

        if i#18 >= $i3 goto label02;

        $r2 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: int[] bl_counts>;

        $r2[i#18] = 0;

        i#18 = i#18 + 1;

        goto label01;

     label02:
        lengths = newarray (int)[numNodes];

        $i4 = numNodes - 1;

        lengths[$i4] = 0;

        i#36 = numNodes - 1;

     label03:
        if i#36 < 0 goto label07;

        $i5 = 2 * i#36;

        $i6 = $i5 + 1;

        $i7 = childs[$i6];

        if $i7 == -1 goto label05;

        $i8 = lengths[i#36];

        bitLength#51 = $i8 + 1;

        $i9 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: int maxLength>;

        if bitLength#51 <= $i9 goto label04;

        bitLength#51 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: int maxLength>;

        overflow#16 = overflow#16 + 1;

     label04:
        $i10 = 2 * i#36;

        $i11 = childs[$i10];

        $i12 = 2 * i#36;

        $i13 = $i12 + 1;

        $i15 = childs[$i13];

        lengths[$i15] = bitLength#51;

        lengths[$i11] = bitLength#51;

        goto label06;

     label05:
        bitLength#79 = lengths[i#36];

        $r3 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: int[] bl_counts>;

        $i16 = bitLength#79 - 1;

        $i17 = $r3[$i16];

        $i18 = $i17 + 1;

        $r3[$i16] = $i18;

        $r4 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: byte[] length>;

        $i19 = 2 * i#36;

        $i20 = childs[$i19];

        $i21 = lengths[i#36];

        $b22 = (byte) $i21;

        $r4[$i20] = $b22;

     label06:
        i#36 = i#36 + -1;

        goto label03;

     label07:
        if overflow#16 != 0 goto label08;

        return;

     label08:
        $i23 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: int maxLength>;

        incrBitLen#106 = $i23 - 1;

     label09:
        $r5 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: int[] bl_counts>;

        incrBitLen#106 = incrBitLen#106 + -1;

        $i24 = $r5[incrBitLen#106];

        if $i24 != 0 goto label10;

        goto label09;

     label10:
        $r6 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: int[] bl_counts>;

        $i26 = $r6[incrBitLen#106];

        $i27 = $i26 - 1;

        $r6[incrBitLen#106] = $i27;

        $r7 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: int[] bl_counts>;

        incrBitLen#106 = incrBitLen#106 + 1;

        $i29 = $r7[incrBitLen#106];

        $i30 = $i29 + 1;

        $r7[incrBitLen#106] = $i30;

        $i31 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: int maxLength>;

        $i32 = $i31 - 1;

        $i33 = $i32 - incrBitLen#106;

        $i34 = 1 << $i33;

        overflow#16 = overflow#16 - $i34;

        if overflow#16 <= 0 goto label11;

        $i35 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: int maxLength>;

        $i36 = $i35 - 1;

        if incrBitLen#106 < $i36 goto label10;

     label11:
        if overflow#16 > 0 goto label09;

        $r8 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: int[] bl_counts>;

        $i37 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: int maxLength>;

        $i38 = $i37 - 1;

        $i39 = $r8[$i38];

        $i40 = $i39 + overflow#16;

        $r8[$i38] = $i40;

        $r9 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: int[] bl_counts>;

        $i41 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: int maxLength>;

        $i42 = $i41 - 2;

        $i43 = $r9[$i42];

        $i44 = $i43 - overflow#16;

        $r9[$i42] = $i44;

        nodePtr#169 = 2 * numLeafs;

        bits#172 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: int maxLength>;

     label12:
        if bits#172 == 0 goto label16;

        $r10 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: int[] bl_counts>;

        $i45 = bits#172 - 1;

        n#180 = $r10[$i45];

     label13:
        if n#180 <= 0 goto label15;

        $i46 = nodePtr#169;

        nodePtr#169 = nodePtr#169 + 1;

        $i47 = childs[$i46];

        childPtr = 2 * $i47;

        $i48 = childPtr + 1;

        $i49 = childs[$i48];

        if $i49 != -1 goto label14;

        $r11 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: byte[] length>;

        $i50 = childs[childPtr];

        $b51 = (byte) bits#172;

        $r11[$i50] = $b51;

        n#180 = n#180 + -1;

     label14:
        goto label13;

     label15:
        bits#172 = bits#172 + -1;

        goto label12;

     label16:
        return;
    }

    void calcBLFreq(edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree)
    {
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree this, blTree;
        byte nextlen, curlen#2, min_count#18, $b6;
        int i#4, $i0, count#9, $i3, $i5, $i9, $i13, $i17, $i21;
        byte[] $r0, $r2;
        short max_count#16, $s2, $s4, $s8, $s10, $s12, $s14, $s16, $s18, $s20, $s22;
        short[] $r1, $r3, $r4, $r5, $r6;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree;

        blTree := @parameter0: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree;

        curlen#2 = -1;

        i#4 = 0;

     label01:
        $i0 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: int numCodes>;

        if i#4 >= $i0 goto label10;

        count#9 = 1;

        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: byte[] length>;

        nextlen = $r0[i#4];

        if nextlen != 0 goto label02;

        max_count#16 = 138;

        min_count#18 = 3;

        goto label03;

     label02:
        max_count#16 = 6;

        min_count#18 = 3;

        if curlen#2 == nextlen goto label03;

        $r1 = blTree.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: short[] freqs>;

        $s2 = $r1[nextlen];

        $i3 = $s2 + 1;

        $s4 = (short) $i3;

        $r1[nextlen] = $s4;

        count#9 = 0;

     label03:
        curlen#2 = nextlen;

        i#4 = i#4 + 1;

     label04:
        $i5 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: int numCodes>;

        if i#4 >= $i5 goto label05;

        $r2 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: byte[] length>;

        $b6 = $r2[i#4];

        if curlen#2 != $b6 goto label05;

        i#4 = i#4 + 1;

        count#9 = count#9 + 1;

        if count#9 < max_count#16 goto label04;

        goto label05;

     label05:
        if count#9 >= min_count#18 goto label06;

        $r3 = blTree.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: short[] freqs>;

        $s8 = $r3[curlen#2];

        $i9 = $s8 + count#9;

        $s10 = (short) $i9;

        $r3[curlen#2] = $s10;

        goto label09;

     label06:
        if curlen#2 == 0 goto label07;

        $r4 = blTree.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: short[] freqs>;

        $s12 = $r4[16];

        $i13 = $s12 + 1;

        $s14 = (short) $i13;

        $r4[16] = $s14;

        goto label09;

     label07:
        if count#9 > 10 goto label08;

        $r5 = blTree.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: short[] freqs>;

        $s16 = $r5[17];

        $i17 = $s16 + 1;

        $s18 = (short) $i17;

        $r5[17] = $s18;

        goto label09;

     label08:
        $r6 = blTree.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: short[] freqs>;

        $s20 = $r6[18];

        $i21 = $s20 + 1;

        $s22 = (short) $i21;

        $r6[18] = $s22;

     label09:
        goto label01;

     label10:
        return;
    }


