    public void <init>(org.w3c.dom.Element, weka.core.Instances, weka.core.pmml.MiningSchema) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.Regression this;
        org.w3c.dom.Element model;
        weka.core.Instances dataDictionary;
        weka.core.pmml.MiningSchema miningSchema;
        java.lang.String fName, algName;
        weka.classifiers.pmml.consumer.Regression$Normalization $r0, $r2;
        boolean functionType#7, $z0, $z1;
        byte functionType#15;
        java.lang.Exception $r1;
        int $i0;

        this := @this: weka.classifiers.pmml.consumer.Regression;

        model := @parameter0: org.w3c.dom.Element;

        dataDictionary := @parameter1: weka.core.Instances;

        miningSchema := @parameter2: weka.core.pmml.MiningSchema;

        specialinvoke this.<weka.classifiers.pmml.consumer.PMMLClassifier: void <init>(weka.core.Instances,weka.core.pmml.MiningSchema)>(dataDictionary, miningSchema);

        $r0 = <weka.classifiers.pmml.consumer.Regression$Normalization: weka.classifiers.pmml.consumer.Regression$Normalization NONE>;

        this.<weka.classifiers.pmml.consumer.Regression: weka.classifiers.pmml.consumer.Regression$Normalization m_normalizationMethod> = $r0;

        functionType#7 = 0;

        fName = interfaceinvoke model.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("functionName");

        $z0 = virtualinvoke fName.<java.lang.String: boolean equals(java.lang.Object)>("regression");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        functionType#15 = 0;

        goto label3;

     label1:
        $z1 = virtualinvoke fName.<java.lang.String: boolean equals(java.lang.Object)>("classification");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        functionType#15 = 1;

        goto label3;

     label2:
        $r1 = new java.lang.Exception;

        specialinvoke $r1.<java.lang.Exception: void <init>(java.lang.String)>("[PMML Regression] Function name not defined in pmml!");

        throw $r1;

     label3:
        algName = interfaceinvoke model.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("algorithmName");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(algName);

        if algName == null goto label4;

        $i0 = virtualinvoke algName.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label4;

        this.<weka.classifiers.pmml.consumer.Regression: java.lang.String m_algorithmName> = algName;

     label4:
        $r2 = staticinvoke <weka.classifiers.pmml.consumer.Regression: weka.classifiers.pmml.consumer.Regression$Normalization determineNormalization(org.w3c.dom.Element)>(model);

        this.<weka.classifiers.pmml.consumer.Regression: weka.classifiers.pmml.consumer.Regression$Normalization m_normalizationMethod> = $r2;

        specialinvoke this.<weka.classifiers.pmml.consumer.Regression: void setUpRegressionTables(org.w3c.dom.Element,int)>(model, functionType#15);

        return;
    }

    private static weka.classifiers.pmml.consumer.Regression$Normalization determineNormalization(org.w3c.dom.Element)
    {
        org.w3c.dom.Element model;
        java.lang.String normName;
        weka.classifiers.pmml.consumer.Regression$Normalization normMethod#2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;

        model := @parameter0: org.w3c.dom.Element;

        normMethod#2 = <weka.classifiers.pmml.consumer.Regression$Normalization: weka.classifiers.pmml.consumer.Regression$Normalization NONE>;

        normName = interfaceinvoke model.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("normalizationMethod");

        $z0 = virtualinvoke normName.<java.lang.String: boolean equals(java.lang.Object)>("simplemax");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        normMethod#2 = <weka.classifiers.pmml.consumer.Regression$Normalization: weka.classifiers.pmml.consumer.Regression$Normalization SIMPLEMAX>;

        goto label8;

     label1:
        $z1 = virtualinvoke normName.<java.lang.String: boolean equals(java.lang.Object)>("softmax");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        normMethod#2 = <weka.classifiers.pmml.consumer.Regression$Normalization: weka.classifiers.pmml.consumer.Regression$Normalization SOFTMAX>;

        goto label8;

     label2:
        $z2 = virtualinvoke normName.<java.lang.String: boolean equals(java.lang.Object)>("logit");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label3;

        normMethod#2 = <weka.classifiers.pmml.consumer.Regression$Normalization: weka.classifiers.pmml.consumer.Regression$Normalization LOGIT>;

        goto label8;

     label3:
        $z3 = virtualinvoke normName.<java.lang.String: boolean equals(java.lang.Object)>("probit");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label4;

        normMethod#2 = <weka.classifiers.pmml.consumer.Regression$Normalization: weka.classifiers.pmml.consumer.Regression$Normalization PROBIT>;

        goto label8;

     label4:
        $z4 = virtualinvoke normName.<java.lang.String: boolean equals(java.lang.Object)>("cloglog");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label5;

        normMethod#2 = <weka.classifiers.pmml.consumer.Regression$Normalization: weka.classifiers.pmml.consumer.Regression$Normalization CLOGLOG>;

        goto label8;

     label5:
        $z5 = virtualinvoke normName.<java.lang.String: boolean equals(java.lang.Object)>("exp");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label6;

        normMethod#2 = <weka.classifiers.pmml.consumer.Regression$Normalization: weka.classifiers.pmml.consumer.Regression$Normalization EXP>;

        goto label8;

     label6:
        $z6 = virtualinvoke normName.<java.lang.String: boolean equals(java.lang.Object)>("loglog");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label7;

        normMethod#2 = <weka.classifiers.pmml.consumer.Regression$Normalization: weka.classifiers.pmml.consumer.Regression$Normalization LOGLOG>;

        goto label8;

     label7:
        $z7 = virtualinvoke normName.<java.lang.String: boolean equals(java.lang.Object)>("cauchit");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 == 0 goto label8;

        normMethod#2 = <weka.classifiers.pmml.consumer.Regression$Normalization: weka.classifiers.pmml.consumer.Regression$Normalization CAUCHIT>;

     label8:
        return normMethod#2;
    }

    private void setUpRegressionTables(org.w3c.dom.Element, int) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.Regression this;
        org.w3c.dom.Element model, $r3;
        int functionType, $i0, $i1, i#14, $i2;
        org.w3c.dom.NodeList tableList;
        org.w3c.dom.Node table;
        weka.classifiers.pmml.consumer.Regression$RegressionTable tempRTable, $r2;
        java.lang.Exception $r0;
        weka.classifiers.pmml.consumer.Regression$RegressionTable[] $r1, $r5;
        short $s3;
        weka.core.pmml.MiningSchema $r4;

        this := @this: weka.classifiers.pmml.consumer.Regression;

        model := @parameter0: org.w3c.dom.Element;

        functionType := @parameter1: int;

        tableList = interfaceinvoke model.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("RegressionTable");

        $i0 = interfaceinvoke tableList.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 0 goto label1;

        $r0 = new java.lang.Exception;

        specialinvoke $r0.<java.lang.Exception: void <init>(java.lang.String)>("[Regression] no regression tables defined!");

        throw $r0;

     label1:
        $i1 = interfaceinvoke tableList.<org.w3c.dom.NodeList: int getLength()>();

        $r1 = newarray (weka.classifiers.pmml.consumer.Regression$RegressionTable)[$i1];

        this.<weka.classifiers.pmml.consumer.Regression: weka.classifiers.pmml.consumer.Regression$RegressionTable[] m_regressionTables> = $r1;

        i#14 = 0;

     label2:
        $i2 = interfaceinvoke tableList.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#14);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#14 >= $i2 goto label4;

        table = interfaceinvoke tableList.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i#14);

        $s3 = interfaceinvoke table.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s3);

        if $s3 != 1 goto label3;

        $r2 = new weka.classifiers.pmml.consumer.Regression$RegressionTable;

        $r3 = (org.w3c.dom.Element) table;

        $r4 = this.<weka.classifiers.pmml.consumer.Regression: weka.core.pmml.MiningSchema m_miningSchema>;

        specialinvoke $r2.<weka.classifiers.pmml.consumer.Regression$RegressionTable: void <init>(org.w3c.dom.Element,int,weka.core.pmml.MiningSchema)>($r3, functionType, $r4);

        tempRTable = $r2;

        $r5 = this.<weka.classifiers.pmml.consumer.Regression: weka.classifiers.pmml.consumer.Regression$RegressionTable[] m_regressionTables>;

        $r5[i#14] = tempRTable;

     label3:
        i#14 = i#14 + 1;

        goto label2;

     label4:
        return;
    }

    public double[] distributionForInstance(weka.core.Instance) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.Regression this;
        weka.core.Instance inst;
        double[] incoming, preds#15;
        java.lang.String message, $r20, $r35;
        weka.core.Instances miningSchemaI, $r0, $r2, $r5, $r10, $r15, $r18, $r26, $r30, $r43;
        boolean $z0, $z1, hasMissing#29, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        weka.core.pmml.MiningSchema $r1, $r4, $r8, $r9, $r11, $r14, $r17, $r25, $r28, $r29, $r32, $r42, $r45, $r46;
        weka.core.Attribute $r3, $r6, $r16, $r19, $r27, $r31, $r33, $r34, $r44;
        int $i0, i#31, $i1, $i2, i#99, $i3, i#114, $i4, $i5, $i6, i#132, $i7, $i8, i#158, $i9, i#175, $i10, i#187, $i11, i#204, $i12, i#216, $i13, i#231, $i14;
        weka.core.pmml.MappingInfo $r7;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35;
        java.lang.StringBuilder $r12, $r13, $r21;
        weka.gui.Logger $r22, $r24;
        java.io.PrintStream $r23;
        weka.core.pmml.TargetMetaInfo targetData#85, targetData#260;
        weka.classifiers.pmml.consumer.Regression$RegressionTable[] $r36, $r37;
        weka.classifiers.pmml.consumer.Regression$RegressionTable $r38;
        int[] $r39;
        weka.classifiers.pmml.consumer.Regression$Normalization $r40;
        java.lang.Exception $r41;

        this := @this: weka.classifiers.pmml.consumer.Regression;

        inst := @parameter0: weka.core.Instance;

        $z0 = this.<weka.classifiers.pmml.consumer.Regression: boolean m_initialized>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label01;

        $r0 = interfaceinvoke inst.<weka.core.Instance: weka.core.Instances dataset()>();

        virtualinvoke this.<weka.classifiers.pmml.consumer.Regression: void mapToMiningSchema(weka.core.Instances)>($r0);

     label01:
        $r1 = this.<weka.classifiers.pmml.consumer.Regression: weka.core.pmml.MiningSchema m_miningSchema>;

        $r2 = virtualinvoke $r1.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r3 = virtualinvoke $r2.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z1 = virtualinvoke $r3.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label02;

        preds#15 = newarray (double)[1];

        goto label03;

     label02:
        $r4 = this.<weka.classifiers.pmml.consumer.Regression: weka.core.pmml.MiningSchema m_miningSchema>;

        $r5 = virtualinvoke $r4.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r6 = virtualinvoke $r5.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $i0 = virtualinvoke $r6.<weka.core.Attribute: int numValues()>();

        preds#15 = newarray (double)[$i0];

     label03:
        $r7 = this.<weka.classifiers.pmml.consumer.Regression: weka.core.pmml.MappingInfo m_fieldsMap>;

        $r8 = this.<weka.classifiers.pmml.consumer.Regression: weka.core.pmml.MiningSchema m_miningSchema>;

        incoming = virtualinvoke $r7.<weka.core.pmml.MappingInfo: double[] instanceToSchema(weka.core.Instance,weka.core.pmml.MiningSchema)>(inst, $r8);

        hasMissing#29 = 0;

        i#31 = 0;

     label04:
        $i1 = lengthof incoming;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#31);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#31 >= $i1 goto label06;

        $r9 = this.<weka.classifiers.pmml.consumer.Regression: weka.core.pmml.MiningSchema m_miningSchema>;

        $r10 = virtualinvoke $r9.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $i2 = virtualinvoke $r10.<weka.core.Instances: int classIndex()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#31);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#31 == $i2 goto label05;

        $d0 = incoming[i#31];

        $z2 = staticinvoke <weka.core.Utils: boolean isMissingValue(double)>($d0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label05;

        hasMissing#29 = 1;

        goto label06;

     label05:
        i#31 = i#31 + 1;

        goto label04;

     label06:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(hasMissing#29);

        if hasMissing#29 == 0 goto label17;

        $r11 = this.<weka.classifiers.pmml.consumer.Regression: weka.core.pmml.MiningSchema m_miningSchema>;

        $z3 = virtualinvoke $r11.<weka.core.pmml.MiningSchema: boolean hasTargetMetaData()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label13;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[Regression] WARNING: Instance to predict has missing value(s) but there is no missing value handling meta data and no prior probabilities/default value to fall back to. No prediction will be made (");

        $r14 = this.<weka.classifiers.pmml.consumer.Regression: weka.core.pmml.MiningSchema m_miningSchema>;

        $r15 = virtualinvoke $r14.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r16 = virtualinvoke $r15.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z4 = virtualinvoke $r16.<weka.core.Attribute: boolean isNominal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label07;

        $r17 = this.<weka.classifiers.pmml.consumer.Regression: weka.core.pmml.MiningSchema m_miningSchema>;

        $r18 = virtualinvoke $r17.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r19 = virtualinvoke $r18.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z5 = virtualinvoke $r19.<weka.core.Attribute: boolean isString()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label08;

     label07:
        $r20 = "zero probabilities output).";

        goto label09;

     label08:
        $r20 = "NaN output).";

     label09:
        $r21 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        message = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = this.<weka.classifiers.pmml.consumer.Regression: weka.gui.Logger m_log>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r22);

        if $r22 != null goto label10;

        $r23 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>(message);

        goto label11;

     label10:
        $r24 = this.<weka.classifiers.pmml.consumer.Regression: weka.gui.Logger m_log>;

        interfaceinvoke $r24.<weka.gui.Logger: void logMessage(java.lang.String)>(message);

     label11:
        $r25 = this.<weka.classifiers.pmml.consumer.Regression: weka.core.pmml.MiningSchema m_miningSchema>;

        $r26 = virtualinvoke $r25.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r27 = virtualinvoke $r26.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z6 = virtualinvoke $r27.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label12;

        $d1 = staticinvoke <weka.core.Utils: double missingValue()>();

        preds#15[0] = $d1;

     label12:
        return preds#15;

     label13:
        $r28 = this.<weka.classifiers.pmml.consumer.Regression: weka.core.pmml.MiningSchema m_miningSchema>;

        targetData#85 = virtualinvoke $r28.<weka.core.pmml.MiningSchema: weka.core.pmml.TargetMetaInfo getTargetMetaData()>();

        $r29 = this.<weka.classifiers.pmml.consumer.Regression: weka.core.pmml.MiningSchema m_miningSchema>;

        $r30 = virtualinvoke $r29.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r31 = virtualinvoke $r30.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z7 = virtualinvoke $r31.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 == 0 goto label14;

        $d2 = virtualinvoke targetData#85.<weka.core.pmml.TargetMetaInfo: double getDefaultValue()>();

        preds#15[0] = $d2;

        goto label16;

     label14:
        $r32 = this.<weka.classifiers.pmml.consumer.Regression: weka.core.pmml.MiningSchema m_miningSchema>;

        miningSchemaI = virtualinvoke $r32.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        i#99 = 0;

     label15:
        $r33 = virtualinvoke miningSchemaI.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $i3 = virtualinvoke $r33.<weka.core.Attribute: int numValues()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#99);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if i#99 >= $i3 goto label16;

        $r34 = virtualinvoke miningSchemaI.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $r35 = virtualinvoke $r34.<weka.core.Attribute: java.lang.String value(int)>(i#99);

        $d3 = virtualinvoke targetData#85.<weka.core.pmml.TargetMetaInfo: double getPriorProbability(java.lang.String)>($r35);

        preds#15[i#99] = $d3;

        i#99 = i#99 + 1;

        goto label15;

     label16:
        return preds#15;

     label17:
        i#114 = 0;

     label18:
        $r36 = this.<weka.classifiers.pmml.consumer.Regression: weka.classifiers.pmml.consumer.Regression$RegressionTable[] m_regressionTables>;

        $i4 = lengthof $r36;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#114);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if i#114 >= $i4 goto label19;

        $r37 = this.<weka.classifiers.pmml.consumer.Regression: weka.classifiers.pmml.consumer.Regression$RegressionTable[] m_regressionTables>;

        $r38 = $r37[i#114];

        virtualinvoke $r38.<weka.classifiers.pmml.consumer.Regression$RegressionTable: void predict(double[],double[])>(preds#15, incoming);

        i#114 = i#114 + 1;

        goto label18;

     label19:
        $r39 = <weka.classifiers.pmml.consumer.Regression$1: int[] $SwitchMap$weka$classifiers$pmml$consumer$Regression$Normalization>;

        $r40 = this.<weka.classifiers.pmml.consumer.Regression: weka.classifiers.pmml.consumer.Regression$Normalization m_normalizationMethod>;

        $i5 = virtualinvoke $r40.<weka.classifiers.pmml.consumer.Regression$Normalization: int ordinal()>();

        $i6 = $r39[$i5];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        tableswitch($i6)
        {
            case 1: goto label20;
            case 2: goto label21;
            case 3: goto label22;
            case 4: goto label26;
            case 5: goto label29;
            case 6: goto label32;
            case 7: goto label35;
            case 8: goto label38;
            case 9: goto label41;
            default: goto label44;
        };

     label20:
        goto label45;

     label21:
        staticinvoke <weka.core.Utils: void normalize(double[])>(preds#15);

        goto label45;

     label22:
        i#132 = 0;

     label23:
        $i7 = lengthof preds#15;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#132);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if i#132 >= $i7 goto label24;

        $d4 = preds#15[i#132];

        $d5 = staticinvoke <java.lang.Math: double exp(double)>($d4);

        preds#15[i#132] = $d5;

        i#132 = i#132 + 1;

        goto label23;

     label24:
        $i8 = lengthof preds#15;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if $i8 != 1 goto label25;

        $d6 = preds#15[0];

        $d7 = preds#15[0];

        $d8 = $d7 + 1.0;

        $d9 = $d6 / $d8;

        preds#15[0] = $d9;

        goto label45;

     label25:
        staticinvoke <weka.core.Utils: void normalize(double[])>(preds#15);

        goto label45;

     label26:
        i#158 = 0;

     label27:
        $i9 = lengthof preds#15;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#158);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        if i#158 >= $i9 goto label28;

        $d10 = preds#15[i#158];

        $d11 = neg $d10;

        $d12 = staticinvoke <java.lang.Math: double exp(double)>($d11);

        $d13 = 1.0 + $d12;

        $d14 = 1.0 / $d13;

        preds#15[i#158] = $d14;

        i#158 = i#158 + 1;

        goto label27;

     label28:
        staticinvoke <weka.core.Utils: void normalize(double[])>(preds#15);

        goto label45;

     label29:
        i#175 = 0;

     label30:
        $i10 = lengthof preds#15;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#175);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i10);

        if i#175 >= $i10 goto label31;

        $d15 = preds#15[i#175];

        $d16 = staticinvoke <weka.core.matrix.Maths: double pnorm(double)>($d15);

        preds#15[i#175] = $d16;

        i#175 = i#175 + 1;

        goto label30;

     label31:
        staticinvoke <weka.core.Utils: void normalize(double[])>(preds#15);

        goto label45;

     label32:
        i#187 = 0;

     label33:
        $i11 = lengthof preds#15;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#187);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i11);

        if i#187 >= $i11 goto label34;

        $d17 = preds#15[i#187];

        $d18 = neg $d17;

        $d19 = staticinvoke <java.lang.Math: double exp(double)>($d18);

        $d20 = neg $d19;

        $d21 = staticinvoke <java.lang.Math: double exp(double)>($d20);

        $d22 = 1.0 - $d21;

        preds#15[i#187] = $d22;

        i#187 = i#187 + 1;

        goto label33;

     label34:
        staticinvoke <weka.core.Utils: void normalize(double[])>(preds#15);

        goto label45;

     label35:
        i#204 = 0;

     label36:
        $i12 = lengthof preds#15;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#204);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i12);

        if i#204 >= $i12 goto label37;

        $d23 = preds#15[i#204];

        $d24 = staticinvoke <java.lang.Math: double exp(double)>($d23);

        preds#15[i#204] = $d24;

        i#204 = i#204 + 1;

        goto label36;

     label37:
        staticinvoke <weka.core.Utils: void normalize(double[])>(preds#15);

        goto label45;

     label38:
        i#216 = 0;

     label39:
        $i13 = lengthof preds#15;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#216);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i13);

        if i#216 >= $i13 goto label40;

        $d25 = preds#15[i#216];

        $d26 = neg $d25;

        $d27 = staticinvoke <java.lang.Math: double exp(double)>($d26);

        $d28 = neg $d27;

        $d29 = staticinvoke <java.lang.Math: double exp(double)>($d28);

        preds#15[i#216] = $d29;

        i#216 = i#216 + 1;

        goto label39;

     label40:
        staticinvoke <weka.core.Utils: void normalize(double[])>(preds#15);

        goto label45;

     label41:
        i#231 = 0;

     label42:
        $i14 = lengthof preds#15;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#231);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i14);

        if i#231 >= $i14 goto label43;

        $d30 = preds#15[i#231];

        $d31 = staticinvoke <java.lang.Math: double atan(double)>($d30);

        $d32 = 0.3183098861837907 * $d31;

        $d33 = 0.5 + $d32;

        preds#15[i#231] = $d33;

        i#231 = i#231 + 1;

        goto label42;

     label43:
        staticinvoke <weka.core.Utils: void normalize(double[])>(preds#15);

        goto label45;

     label44:
        $r41 = new java.lang.Exception;

        specialinvoke $r41.<java.lang.Exception: void <init>(java.lang.String)>("[Regression] unknown normalization method");

        throw $r41;

     label45:
        $r42 = this.<weka.classifiers.pmml.consumer.Regression: weka.core.pmml.MiningSchema m_miningSchema>;

        $r43 = virtualinvoke $r42.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r44 = virtualinvoke $r43.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z8 = virtualinvoke $r44.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 == 0 goto label46;

        $r45 = this.<weka.classifiers.pmml.consumer.Regression: weka.core.pmml.MiningSchema m_miningSchema>;

        $z9 = virtualinvoke $r45.<weka.core.pmml.MiningSchema: boolean hasTargetMetaData()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 == 0 goto label46;

        $r46 = this.<weka.classifiers.pmml.consumer.Regression: weka.core.pmml.MiningSchema m_miningSchema>;

        targetData#260 = virtualinvoke $r46.<weka.core.pmml.MiningSchema: weka.core.pmml.TargetMetaInfo getTargetMetaData()>();

        $d34 = preds#15[0];

        $d35 = virtualinvoke targetData#260.<weka.core.pmml.TargetMetaInfo: double applyMinMaxRescaleCast(double)>($d34);

        preds#15[0] = $d35;

     label46:
        return preds#15;
    }

    public java.lang.String toString()
    {
        weka.classifiers.pmml.consumer.Regression this;
        java.lang.StringBuffer temp, $r0;
        weka.classifiers.pmml.consumer.Regression$RegressionTable[] l2;
        int l3, l4#51;
        weka.classifiers.pmml.consumer.Regression$RegressionTable table;
        java.lang.StringBuilder $r1, $r2, $r4, $r8, $r9, $r11, $r15, $r16, $r18, $r27, $r28, $r30;
        java.lang.String $r3, $r5, $r7, $r10, $r12, $r14, $r17, $r19, $r31, $r34;
        boolean $z0;
        weka.core.pmml.MiningSchema $r22;
        weka.classifiers.pmml.consumer.Regression$Normalization $r25, $r26, $r29;

        this := @this: weka.classifiers.pmml.consumer.Regression;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        temp = $r0;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PMML version ");

        $r3 = virtualinvoke this.<weka.classifiers.pmml.consumer.Regression: java.lang.String getPMMLVersion()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke this.<weka.classifiers.pmml.consumer.Regression: java.lang.String getCreatorApplication()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("?");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nApplication: ");

        $r10 = virtualinvoke this.<weka.classifiers.pmml.consumer.Regression: java.lang.String getCreatorApplication()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

     label1:
        $r14 = this.<weka.classifiers.pmml.consumer.Regression: java.lang.String m_algorithmName>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r14);

        if $r14 == null goto label2;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nPMML Model: ");

        $r17 = this.<weka.classifiers.pmml.consumer.Regression: java.lang.String m_algorithmName>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

     label2:
        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\n");

        $r22 = this.<weka.classifiers.pmml.consumer.Regression: weka.core.pmml.MiningSchema m_miningSchema>;

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r22);

        l2 = this.<weka.classifiers.pmml.consumer.Regression: weka.classifiers.pmml.consumer.Regression$RegressionTable[] m_regressionTables>;

        l3 = lengthof l2;

        l4#51 = 0;

     label3:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l4#51);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3);

        if l4#51 >= l3 goto label4;

        table = l2[l4#51];

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(table);

        l4#51 = l4#51 + 1;

        goto label3;

     label4:
        $r25 = this.<weka.classifiers.pmml.consumer.Regression: weka.classifiers.pmml.consumer.Regression$Normalization m_normalizationMethod>;

        $r26 = <weka.classifiers.pmml.consumer.Regression$Normalization: weka.classifiers.pmml.consumer.Regression$Normalization NONE>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r25);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r26);

        if $r25 == $r26 goto label5;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Normalization: ");

        $r29 = this.<weka.classifiers.pmml.consumer.Regression: weka.classifiers.pmml.consumer.Regression$Normalization m_normalizationMethod>;

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r31);

     label5:
        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r34 = virtualinvoke temp.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r34;
    }


