    public void <init>(org.unix4j.sort.context.ExecutionContext, org.unix4j.sort.processor.LineProcessor, org.unix4j.sort.unix.sort.SortArguments)
    {
        org.unix4j.sort.unix.sort.UniqueSortProcessor this;
        org.unix4j.sort.context.ExecutionContext context;
        org.unix4j.sort.processor.LineProcessor output;
        org.unix4j.sort.unix.sort.SortArguments arguments;
        java.util.TreeSet $r0;
        java.util.Comparator $r1;

        this := @this: org.unix4j.sort.unix.sort.UniqueSortProcessor;

        context := @parameter0: org.unix4j.sort.context.ExecutionContext;

        output := @parameter1: org.unix4j.sort.processor.LineProcessor;

        arguments := @parameter2: org.unix4j.sort.unix.sort.SortArguments;

        specialinvoke this.<org.unix4j.sort.unix.sort.AbstractSortProcessor: void <init>(org.unix4j.sort.context.ExecutionContext,org.unix4j.sort.processor.LineProcessor,org.unix4j.sort.unix.sort.SortArguments)>(context, output, arguments);

        $r0 = new java.util.TreeSet;

        $r1 = virtualinvoke this.<org.unix4j.sort.unix.sort.UniqueSortProcessor: java.util.Comparator getComparator()>();

        specialinvoke $r0.<java.util.TreeSet: void <init>(java.util.Comparator)>($r1);

        this.<org.unix4j.sort.unix.sort.UniqueSortProcessor: java.util.NavigableSet uniqueLines> = $r0;

        return;
    }

    public void finish()
    {
        org.unix4j.sort.unix.sort.UniqueSortProcessor this;
        org.unix4j.sort.processor.LineProcessor output;
        java.util.Iterator it;
        org.unix4j.sort.line.Line line;
        java.util.NavigableSet $r0, $r2;
        boolean $z0, $z1;
        java.lang.Object $r1;

        this := @this: org.unix4j.sort.unix.sort.UniqueSortProcessor;

        output = virtualinvoke this.<org.unix4j.sort.unix.sort.UniqueSortProcessor: org.unix4j.sort.processor.LineProcessor getOutput()>();

        $r0 = this.<org.unix4j.sort.unix.sort.UniqueSortProcessor: java.util.NavigableSet uniqueLines>;

        it = interfaceinvoke $r0.<java.util.NavigableSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        $r1 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>();

        line = (org.unix4j.sort.line.Line) $r1;

        $z1 = interfaceinvoke output.<org.unix4j.sort.processor.LineProcessor: boolean processLine(org.unix4j.sort.line.Line)>(line);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

        goto label3;

     label2:
        interfaceinvoke it.<java.util.Iterator: void remove()>();

        goto label1;

     label3:
        $r2 = this.<org.unix4j.sort.unix.sort.UniqueSortProcessor: java.util.NavigableSet uniqueLines>;

        interfaceinvoke $r2.<java.util.NavigableSet: void clear()>();

        interfaceinvoke output.<org.unix4j.sort.processor.LineProcessor: void finish()>();

        return;
    }

    public boolean processLine(org.unix4j.sort.line.Line)
    {
        org.unix4j.sort.unix.sort.UniqueSortProcessor this;
        org.unix4j.sort.line.Line line;
        java.util.NavigableSet $r0;

        this := @this: org.unix4j.sort.unix.sort.UniqueSortProcessor;

        line := @parameter0: org.unix4j.sort.line.Line;

        $r0 = this.<org.unix4j.sort.unix.sort.UniqueSortProcessor: java.util.NavigableSet uniqueLines>;

        interfaceinvoke $r0.<java.util.NavigableSet: boolean add(java.lang.Object)>(line);

        return 1;
    }


