    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        java.lang.StackTraceElement[] $r1;
        java.util.ArrayList $r2;
        java.util.List $r3;
        java.lang.Throwable[] $r4;

        $r0 = class "java/lang/Throwable";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <java.lang.Throwable: boolean $assertionsDisabled> = $z1;

        $r1 = newarray (java.lang.StackTraceElement)[0];

        <java.lang.Throwable: java.lang.StackTraceElement[] UNASSIGNED_STACK> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>(0);

        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2);

        <java.lang.Throwable: java.util.List SUPPRESSED_SENTINEL> = $r3;

        $r4 = newarray (java.lang.Throwable)[0];

        <java.lang.Throwable: java.lang.Throwable[] EMPTY_THROWABLE_ARRAY> = $r4;

        return;
    }

    public void <init>()
    {
        java.lang.Throwable l0;
        java.lang.StackTraceElement[] $r0;
        java.util.List $r1;

        l0 := @this: java.lang.Throwable;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        l0.<java.lang.Throwable: java.lang.Throwable cause> = l0;

        $r0 = <java.lang.Throwable: java.lang.StackTraceElement[] UNASSIGNED_STACK>;

        l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $r0;

        $r1 = <java.lang.Throwable: java.util.List SUPPRESSED_SENTINEL>;

        l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $r1;

        virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>();

        return;
    }

    public synchronized java.lang.Throwable fillInStackTrace()
    {
        java.lang.Throwable l0;
        java.lang.StackTraceElement[] $r0, $r3;
        java.lang.Object $r1;

        l0 := @this: java.lang.Throwable;

        $r0 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>;

        if $r0 != null goto label1;

        $r1 = l0.<java.lang.Throwable: java.lang.Object backtrace>;

        if $r1 == null goto label2;

     label1:
        specialinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>(0);

        $r3 = <java.lang.Throwable: java.lang.StackTraceElement[] UNASSIGNED_STACK>;

        l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $r3;

     label2:
        return l0;
    }

    public void <init>(java.lang.String)
    {
        java.lang.Throwable l0;
        java.lang.String l1;
        java.lang.StackTraceElement[] $r0;
        java.util.List $r1;

        l0 := @this: java.lang.Throwable;

        l1 := @parameter0: java.lang.String;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        l0.<java.lang.Throwable: java.lang.Throwable cause> = l0;

        $r0 = <java.lang.Throwable: java.lang.StackTraceElement[] UNASSIGNED_STACK>;

        l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $r0;

        $r1 = <java.lang.Throwable: java.util.List SUPPRESSED_SENTINEL>;

        l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $r1;

        virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>();

        l0.<java.lang.Throwable: java.lang.String detailMessage> = l1;

        return;
    }

    public synchronized java.lang.Throwable initCause(java.lang.Throwable)
    {
        java.lang.Throwable l0, l1, $r0;
        java.lang.IllegalStateException $r1;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r4, $r6;
        java.lang.IllegalArgumentException $r7;

        l0 := @this: java.lang.Throwable;

        l1 := @parameter0: java.lang.Throwable;

        $r0 = l0.<java.lang.Throwable: java.lang.Throwable cause>;

        if $r0 == l0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t overwrite cause with ");

        $r4 = staticinvoke <java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>(l1, "a null");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r6, l0);

        throw $r1;

     label1:
        if l1 != l0 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Self-causation not permitted", l0);

        throw $r7;

     label2:
        l0.<java.lang.Throwable: java.lang.Throwable cause> = l1;

        return l0;
    }

    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable l0, l2;
        java.lang.String l1;
        java.lang.StackTraceElement[] $r0;
        java.util.List $r1;

        l0 := @this: java.lang.Throwable;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: java.lang.Throwable;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        l0.<java.lang.Throwable: java.lang.Throwable cause> = l0;

        $r0 = <java.lang.Throwable: java.lang.StackTraceElement[] UNASSIGNED_STACK>;

        l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $r0;

        $r1 = <java.lang.Throwable: java.util.List SUPPRESSED_SENTINEL>;

        l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $r1;

        virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>();

        l0.<java.lang.Throwable: java.lang.String detailMessage> = l1;

        l0.<java.lang.Throwable: java.lang.Throwable cause> = l2;

        return;
    }

    public void printStackTrace()
    {
        java.lang.Throwable l0;
        java.io.PrintStream $r0;

        l0 := @this: java.lang.Throwable;

        $r0 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke l0.<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>($r0);

        return;
    }

    public void printStackTrace(java.io.PrintStream)
    {
        java.lang.Throwable l0;
        java.io.PrintStream l1;
        java.lang.Throwable$WrappedPrintStream $r0;

        l0 := @this: java.lang.Throwable;

        l1 := @parameter0: java.io.PrintStream;

        $r0 = new java.lang.Throwable$WrappedPrintStream;

        specialinvoke $r0.<java.lang.Throwable$WrappedPrintStream: void <init>(java.io.PrintStream)>(l1);

        specialinvoke l0.<java.lang.Throwable: void printStackTrace(java.lang.Throwable$PrintStreamOrWriter)>($r0);

        return;
    }

    private void printStackTrace(java.lang.Throwable$PrintStreamOrWriter)
    {
        java.lang.Throwable l0, l9, l8#48, l5#57, $r6;
        java.lang.Throwable$PrintStreamOrWriter l1;
        java.util.Set l2;
        java.lang.Object l3, $r1;
        java.lang.StackTraceElement[] l4, l5#15;
        java.util.IdentityHashMap $r0;
        int l6#18, l7#20, l6#40, l7#42;
        java.lang.StackTraceElement l8#26;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        java.lang.Throwable[] l5#37;

        l0 := @this: java.lang.Throwable;

        l1 := @parameter0: java.lang.Throwable$PrintStreamOrWriter;

        $r0 = new java.util.IdentityHashMap;

        specialinvoke $r0.<java.util.IdentityHashMap: void <init>()>();

        l2 = staticinvoke <java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>($r0);

        interfaceinvoke l2.<java.util.Set: boolean add(java.lang.Object)>(l0);

        $r1 = virtualinvoke l1.<java.lang.Throwable$PrintStreamOrWriter: java.lang.Object lock()>();

        l3 = $r1;

        entermonitor $r1;

     label01:
        virtualinvoke l1.<java.lang.Throwable$PrintStreamOrWriter: void println(java.lang.Object)>(l0);

        l4 = specialinvoke l0.<java.lang.Throwable: java.lang.StackTraceElement[] getOurStackTrace()>();

        l5#15 = l4;

        l6#18 = lengthof l5#15;

        l7#20 = 0;

     label02:
        if l7#20 >= l6#18 goto label03;

        l8#26 = l5#15[l7#20];

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tat ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(l8#26);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke l1.<java.lang.Throwable$PrintStreamOrWriter: void println(java.lang.Object)>($r5);

        l7#20 = l7#20 + 1;

        goto label02;

     label03:
        l5#37 = virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable[] getSuppressed()>();

        l6#40 = lengthof l5#37;

        l7#42 = 0;

     label04:
        if l7#42 >= l6#40 goto label05;

        l8#48 = l5#37[l7#42];

        specialinvoke l8#48.<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>(l1, l4, "Suppressed: ", "\t", l2);

        l7#42 = l7#42 + 1;

        goto label04;

     label05:
        l5#57 = virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if l5#57 == null goto label06;

        specialinvoke l5#57.<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>(l1, l4, "Caused by: ", "", l2);

     label06:
        exitmonitor l3;

     label07:
        goto label11;

     label08:
        $r6 := @caughtexception;

     label09:
        l9 = $r6;

        exitmonitor l3;

     label10:
        throw l9;

     label11:
        return;

        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private synchronized java.lang.StackTraceElement[] getOurStackTrace()
    {
        java.lang.Throwable l0;
        int l1, l2#14;
        java.lang.StackTraceElement[] $r0, $r1, $r2, $r4, $r5, $r7, $r8, $r9;
        java.lang.Object $r3;
        java.lang.StackTraceElement $r6;

        l0 := @this: java.lang.Throwable;

        $r0 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>;

        $r1 = <java.lang.Throwable: java.lang.StackTraceElement[] UNASSIGNED_STACK>;

        if $r0 == $r1 goto label1;

        $r2 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>;

        if $r2 != null goto label4;

        $r3 = l0.<java.lang.Throwable: java.lang.Object backtrace>;

        if $r3 == null goto label4;

     label1:
        l1 = virtualinvoke l0.<java.lang.Throwable: int getStackTraceDepth()>();

        $r4 = newarray (java.lang.StackTraceElement)[l1];

        l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $r4;

        l2#14 = 0;

     label2:
        if l2#14 >= l1 goto label3;

        $r5 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>;

        $r6 = virtualinvoke l0.<java.lang.Throwable: java.lang.StackTraceElement getStackTraceElement(int)>(l2#14);

        $r5[l2#14] = $r6;

        l2#14 = l2#14 + 1;

        goto label2;

     label3:
        goto label5;

     label4:
        $r7 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>;

        if $r7 != null goto label5;

        $r8 = <java.lang.Throwable: java.lang.StackTraceElement[] UNASSIGNED_STACK>;

        return $r8;

     label5:
        $r9 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>;

        return $r9;
    }

    public final synchronized java.lang.Throwable[] getSuppressed()
    {
        java.lang.Throwable l0;
        java.util.List $r0, $r1, $r2, $r4;
        java.lang.Throwable[] $r3, $r5, $r7;
        java.lang.Object[] $r6;

        l0 := @this: java.lang.Throwable;

        $r0 = l0.<java.lang.Throwable: java.util.List suppressedExceptions>;

        $r1 = <java.lang.Throwable: java.util.List SUPPRESSED_SENTINEL>;

        if $r0 == $r1 goto label1;

        $r2 = l0.<java.lang.Throwable: java.util.List suppressedExceptions>;

        if $r2 != null goto label2;

     label1:
        $r3 = <java.lang.Throwable: java.lang.Throwable[] EMPTY_THROWABLE_ARRAY>;

        return $r3;

     label2:
        $r4 = l0.<java.lang.Throwable: java.util.List suppressedExceptions>;

        $r5 = <java.lang.Throwable: java.lang.Throwable[] EMPTY_THROWABLE_ARRAY>;

        $r6 = interfaceinvoke $r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (java.lang.Throwable[]) $r6;

        return $r7;
    }

    public synchronized java.lang.Throwable getCause()
    {
        java.lang.Throwable l0, $r0, $r1;

        l0 := @this: java.lang.Throwable;

        $r0 = l0.<java.lang.Throwable: java.lang.Throwable cause>;

        if $r0 != l0 goto label1;

        $r1 = null;

        goto label2;

     label1:
        $r1 = l0.<java.lang.Throwable: java.lang.Throwable cause>;

     label2:
        return $r1;
    }

    private void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter, java.lang.StackTraceElement[], java.lang.String, java.lang.String, java.util.Set)
    {
        java.lang.Throwable l0, l13, l10#115;
        java.lang.Throwable$PrintStreamOrWriter l1;
        java.lang.StackTraceElement[] l2, l6;
        java.lang.String l3, l4, $r6, $r13, $r19, $r25, $r29;
        java.util.Set l5;
        int l9, l11, $i0, l7#29, $i1, l8#34, $i2, $i3, l10#61, l12#95;
        boolean $z0, $z1, $z2, $z4;
        java.lang.Object $r0;
        java.lang.AssertionError $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r9, $r10, $r11, $r12, $r14, $r15, $r16, $r18, $r20, $r21, $r22, $r23, $r24, $r26, $r27, $r28;
        java.lang.StackTraceElement $r7, $r8, $r17;
        java.lang.Throwable[] l10#91;

        l0 := @this: java.lang.Throwable;

        l1 := @parameter0: java.lang.Throwable$PrintStreamOrWriter;

        l2 := @parameter1: java.lang.StackTraceElement[];

        l3 := @parameter2: java.lang.String;

        l4 := @parameter3: java.lang.String;

        l5 := @parameter4: java.util.Set;

        $z0 = <java.lang.Throwable: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $r0 = virtualinvoke l1.<java.lang.Throwable$PrintStreamOrWriter: java.lang.Object lock()>();

        $z1 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r0);

        if $z1 != 0 goto label01;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label01:
        $z2 = interfaceinvoke l5.<java.util.Set: boolean contains(java.lang.Object)>(l0);

        if $z2 == 0 goto label02;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t[CIRCULAR REFERENCE:");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke l1.<java.lang.Throwable$PrintStreamOrWriter: void println(java.lang.Object)>($r6);

        goto label10;

     label02:
        interfaceinvoke l5.<java.util.Set: boolean add(java.lang.Object)>(l0);

        l6 = specialinvoke l0.<java.lang.Throwable: java.lang.StackTraceElement[] getOurStackTrace()>();

        $i0 = lengthof l6;

        l7#29 = $i0 - 1;

        $i1 = lengthof l2;

        l8#34 = $i1 - 1;

     label03:
        if l7#29 < 0 goto label04;

        if l8#34 < 0 goto label04;

        $r7 = l6[l7#29];

        $r8 = l2[l8#34];

        $z4 = virtualinvoke $r7.<java.lang.StackTraceElement: boolean equals(java.lang.Object)>($r8);

        if $z4 == 0 goto label04;

        l7#29 = l7#29 + -1;

        l8#34 = l8#34 + -1;

        goto label03;

     label04:
        $i2 = lengthof l6;

        $i3 = $i2 - 1;

        l9 = $i3 - l7#29;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(l4);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(l3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(l0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke l1.<java.lang.Throwable$PrintStreamOrWriter: void println(java.lang.Object)>($r13);

        l10#61 = 0;

     label05:
        if l10#61 > l7#29 goto label06;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(l4);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tat ");

        $r17 = l6[l10#61];

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke l1.<java.lang.Throwable$PrintStreamOrWriter: void println(java.lang.Object)>($r19);

        l10#61 = l10#61 + 1;

        goto label05;

     label06:
        if l9 == 0 goto label07;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(l4);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t... ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l9);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" more");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke l1.<java.lang.Throwable$PrintStreamOrWriter: void println(java.lang.Object)>($r25);

     label07:
        l10#91 = virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable[] getSuppressed()>();

        l11 = lengthof l10#91;

        l12#95 = 0;

     label08:
        if l12#95 >= l11 goto label09;

        l13 = l10#91[l12#95];

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(l4);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke l13.<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>(l1, l6, "Suppressed: ", $r29, l5);

        l12#95 = l12#95 + 1;

        goto label08;

     label09:
        l10#115 = virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if l10#115 == null goto label10;

        specialinvoke l10#115.<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>(l1, l6, "Caused by: ", l4, l5);

     label10:
        return;
    }

    public java.lang.String toString()
    {
        java.lang.Throwable l0;
        java.lang.String l1, l2, $r5;
        java.lang.Class $r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;

        l0 := @this: java.lang.Throwable;

        $r0 = virtualinvoke l0.<java.lang.Object: java.lang.Class getClass()>();

        l1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        l2 = virtualinvoke l0.<java.lang.Throwable: java.lang.String getLocalizedMessage()>();

        if l2 == null goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(l1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(l2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r5 = l1;

     label2:
        return $r5;
    }

    public java.lang.String getLocalizedMessage()
    {
        java.lang.Throwable l0;
        java.lang.String $r0;

        l0 := @this: java.lang.Throwable;

        $r0 = virtualinvoke l0.<java.lang.Throwable: java.lang.String getMessage()>();

        return $r0;
    }

    public java.lang.String getMessage()
    {
        java.lang.Throwable l0;
        java.lang.String $r0;

        l0 := @this: java.lang.Throwable;

        $r0 = l0.<java.lang.Throwable: java.lang.String detailMessage>;

        return $r0;
    }

    public void <init>(java.lang.Throwable)
    {
        java.lang.Throwable l0, l1;
        java.lang.StackTraceElement[] $r0;
        java.util.List $r1;
        java.lang.String $r4;

        l0 := @this: java.lang.Throwable;

        l1 := @parameter0: java.lang.Throwable;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        l0.<java.lang.Throwable: java.lang.Throwable cause> = l0;

        $r0 = <java.lang.Throwable: java.lang.StackTraceElement[] UNASSIGNED_STACK>;

        l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $r0;

        $r1 = <java.lang.Throwable: java.util.List SUPPRESSED_SENTINEL>;

        l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $r1;

        virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>();

        if l1 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r4 = virtualinvoke l1.<java.lang.Throwable: java.lang.String toString()>();

     label2:
        l0.<java.lang.Throwable: java.lang.String detailMessage> = $r4;

        l0.<java.lang.Throwable: java.lang.Throwable cause> = l1;

        return;
    }

    public final synchronized void addSuppressed(java.lang.Throwable)
    {
        java.lang.Throwable l0, l1;
        java.lang.IllegalArgumentException $r0;
        java.lang.NullPointerException $r1;
        java.util.List $r2, $r3, $r4, $r6;
        java.util.ArrayList $r5;

        l0 := @this: java.lang.Throwable;

        l1 := @parameter0: java.lang.Throwable;

        if l1 != l0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Self-suppression not permitted", l1);

        throw $r0;

     label1:
        if l1 != null goto label2;

        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("Cannot suppress a null exception.");

        throw $r1;

     label2:
        $r2 = l0.<java.lang.Throwable: java.util.List suppressedExceptions>;

        if $r2 != null goto label3;

        return;

     label3:
        $r3 = l0.<java.lang.Throwable: java.util.List suppressedExceptions>;

        $r4 = <java.lang.Throwable: java.util.List SUPPRESSED_SENTINEL>;

        if $r3 != $r4 goto label4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>(1);

        l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $r5;

     label4:
        $r6 = l0.<java.lang.Throwable: java.util.List suppressedExceptions>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(l1);

        return;
    }


