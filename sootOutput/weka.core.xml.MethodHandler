    public void <init>()
    {
        weka.core.xml.MethodHandler this;
        java.util.Hashtable $r0;

        this := @this: weka.core.xml.MethodHandler;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<weka.core.xml.MethodHandler: java.util.Hashtable m_Methods> = null;

        $r0 = new java.util.Hashtable;

        specialinvoke $r0.<java.util.Hashtable: void <init>()>();

        this.<weka.core.xml.MethodHandler: java.util.Hashtable m_Methods> = $r0;

        return;
    }

    public void add(java.lang.String, java.lang.reflect.Method)
    {
        weka.core.xml.MethodHandler this;
        java.lang.String displayName;
        java.lang.reflect.Method method;
        java.util.Hashtable $r0;

        this := @this: weka.core.xml.MethodHandler;

        displayName := @parameter0: java.lang.String;

        method := @parameter1: java.lang.reflect.Method;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(method);

        if method == null goto label1;

        $r0 = this.<weka.core.xml.MethodHandler: java.util.Hashtable m_Methods>;

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(displayName, method);

     label1:
        return;
    }

    public void clear()
    {
        weka.core.xml.MethodHandler this;
        java.util.Hashtable $r0;

        this := @this: weka.core.xml.MethodHandler;

        $r0 = this.<weka.core.xml.MethodHandler: java.util.Hashtable m_Methods>;

        virtualinvoke $r0.<java.util.Hashtable: void clear()>();

        return;
    }

    public java.lang.reflect.Method get(java.lang.Class)
    {
        weka.core.xml.MethodHandler this;
        java.lang.Class c;
        java.util.Hashtable $r0;
        java.lang.Object $r1;
        java.lang.reflect.Method $r2;

        this := @this: weka.core.xml.MethodHandler;

        c := @parameter0: java.lang.Class;

        $r0 = this.<weka.core.xml.MethodHandler: java.util.Hashtable m_Methods>;

        $r1 = virtualinvoke $r0.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(c);

        $r2 = (java.lang.reflect.Method) $r1;

        return $r2;
    }

    public boolean contains(java.lang.Class)
    {
        weka.core.xml.MethodHandler this;
        java.lang.Class c;
        java.util.Hashtable $r0;
        boolean $z0;

        this := @this: weka.core.xml.MethodHandler;

        c := @parameter0: java.lang.Class;

        $r0 = this.<weka.core.xml.MethodHandler: java.util.Hashtable m_Methods>;

        $z0 = virtualinvoke $r0.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(c);

        return $z0;
    }

    public boolean contains(java.lang.String)
    {
        weka.core.xml.MethodHandler this;
        java.lang.String displayName;
        java.util.Hashtable $r0;
        boolean $z0;

        this := @this: weka.core.xml.MethodHandler;

        displayName := @parameter0: java.lang.String;

        $r0 = this.<weka.core.xml.MethodHandler: java.util.Hashtable m_Methods>;

        $z0 = virtualinvoke $r0.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(displayName);

        return $z0;
    }

    public java.lang.reflect.Method get(java.lang.String)
    {
        weka.core.xml.MethodHandler this;
        java.lang.String displayName;
        java.util.Hashtable $r0;
        java.lang.Object $r1;
        java.lang.reflect.Method $r2;

        this := @this: weka.core.xml.MethodHandler;

        displayName := @parameter0: java.lang.String;

        $r0 = this.<weka.core.xml.MethodHandler: java.util.Hashtable m_Methods>;

        $r1 = virtualinvoke $r0.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(displayName);

        $r2 = (java.lang.reflect.Method) $r1;

        return $r2;
    }

    public void add(java.lang.Class, java.lang.reflect.Method)
    {
        weka.core.xml.MethodHandler this;
        java.lang.Class c;
        java.lang.reflect.Method method;
        java.util.Hashtable $r0;

        this := @this: weka.core.xml.MethodHandler;

        c := @parameter0: java.lang.Class;

        method := @parameter1: java.lang.reflect.Method;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(method);

        if method == null goto label1;

        $r0 = this.<weka.core.xml.MethodHandler: java.util.Hashtable m_Methods>;

        virtualinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(c, method);

     label1:
        return;
    }


