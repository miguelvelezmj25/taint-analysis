    static void <clinit>()
    {
        java.io.ObjectStreamField[] $r0;

        staticinvoke <java.lang.Class: void registerNatives()>();

        <java.lang.Class: boolean useCaches> = 1;

        $r0 = newarray (java.io.ObjectStreamField)[0];

        <java.lang.Class: java.io.ObjectStreamField[] serialPersistentFields> = $r0;

        <java.lang.Class: boolean initted> = 0;

        return;
    }

    public boolean desiredAssertionStatus()
    {
        java.lang.Class l0;
        java.lang.ClassLoader l1;
        java.lang.Object l2, $r0;
        java.lang.Throwable l3, $r3;
        java.util.Map $r1;
        boolean $z0, $z1, $z2;
        java.lang.String $r2;

        l0 := @this: java.lang.Class;

        l1 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if l1 != null goto label1;

        $z2 = staticinvoke <java.lang.Class: boolean desiredAssertionStatus0(java.lang.Class)>(l0);

        return $z2;

     label1:
        $r0 = l1.<java.lang.ClassLoader: java.lang.Object assertionLock>;

        l2 = $r0;

        entermonitor $r0;

     label2:
        $r1 = l1.<java.lang.ClassLoader: java.util.Map classAssertionStatus>;

        if $r1 == null goto label4;

        $r2 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>();

        $z1 = virtualinvoke l1.<java.lang.ClassLoader: boolean desiredAssertionStatus(java.lang.String)>($r2);

        exitmonitor l2;

     label3:
        return $z1;

     label4:
        exitmonitor l2;

     label5:
        goto label8;

     label6:
        $r3 := @caughtexception;

        l3 = $r3;

        exitmonitor l2;

     label7:
        throw l3;

     label8:
        $z0 = staticinvoke <java.lang.Class: boolean desiredAssertionStatus0(java.lang.Class)>(l0);

        return $z0;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public java.lang.ClassLoader getClassLoader()
    {
        java.lang.Class l0, $r0;
        java.lang.ClassLoader l1;
        java.lang.SecurityManager l2;

        l0 := @this: java.lang.Class;

        l1 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>();

        if l1 != null goto label1;

        return null;

     label1:
        l2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if l2 == null goto label2;

        $r0 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();

        staticinvoke <java.lang.ClassLoader: void checkClassLoaderPermission(java.lang.ClassLoader,java.lang.Class)>(l1, $r0);

     label2:
        return l1;
    }

    public java.lang.String getName()
    {
        java.lang.Class l0;
        java.lang.String $r0, l1#1;

        l0 := @this: java.lang.Class;

        l1#1 = l0.<java.lang.Class: java.lang.String name>;

        if l1#1 != null goto label1;

        $r0 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>();

        l1#1 = $r0;

        l0.<java.lang.Class: java.lang.String name> = $r0;

     label1:
        return l1#1;
    }

    public java.lang.String toString()
    {
        java.lang.Class l0;
        boolean $z0, $z1;
        java.lang.StringBuilder $r0, $r2, $r4;
        java.lang.String $r1, $r3, $r5;

        l0 := @this: java.lang.Class;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $z0 = virtualinvoke l0.<java.lang.Class: boolean isInterface()>();

        if $z0 == 0 goto label1;

        $r1 = "interface ";

        goto label3;

     label1:
        $z1 = virtualinvoke l0.<java.lang.Class: boolean isPrimitive()>();

        if $z1 == 0 goto label2;

        $r1 = "";

        goto label3;

     label2:
        $r1 = "class ";

     label3:
        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    java.lang.ClassLoader getClassLoader0()
    {
        java.lang.Class l0;
        java.lang.ClassLoader $r0;

        l0 := @this: java.lang.Class;

        $r0 = l0.<java.lang.Class: java.lang.ClassLoader classLoader>;

        return $r0;
    }


