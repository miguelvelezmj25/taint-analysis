    static void <clinit>()
    {
        java.io.ObjectStreamField[] $r0;

        staticinvoke <java.lang.Class: void registerNatives()>();

        <java.lang.Class: boolean useCaches> = 1;

        $r0 = newarray (java.io.ObjectStreamField)[0];

        <java.lang.Class: java.io.ObjectStreamField[] serialPersistentFields> = $r0;

        <java.lang.Class: boolean initted> = 0;

        return;
    }

    public boolean desiredAssertionStatus()
    {
        java.lang.Class l0;
        java.lang.ClassLoader l1;
        java.lang.Object l2, $r0;
        java.lang.Throwable l3, $r3;
        boolean $z0, $z1, $z2;
        java.util.Map $r1;
        java.lang.String $r2;

        l0 := @this: java.lang.Class;

        l1 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if l1 != null goto label1;

        $z0 = staticinvoke <java.lang.Class: boolean desiredAssertionStatus0(java.lang.Class)>(l0);

        return $z0;

     label1:
        $r0 = l1.<java.lang.ClassLoader: java.lang.Object assertionLock>;

        l2 = $r0;

        entermonitor $r0;

     label2:
        $r1 = l1.<java.lang.ClassLoader: java.util.Map classAssertionStatus>;

        if $r1 == null goto label4;

        $r2 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>();

        $z1 = virtualinvoke l1.<java.lang.ClassLoader: boolean desiredAssertionStatus(java.lang.String)>($r2);

        exitmonitor l2;

     label3:
        return $z1;

     label4:
        exitmonitor l2;

     label5:
        goto label9;

     label6:
        $r3 := @caughtexception;

     label7:
        l3 = $r3;

        exitmonitor l2;

     label8:
        throw l3;

     label9:
        $z2 = staticinvoke <java.lang.Class: boolean desiredAssertionStatus0(java.lang.Class)>(l0);

        return $z2;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public java.lang.ClassLoader getClassLoader()
    {
        java.lang.Class l0, $r0;
        java.lang.ClassLoader l1;
        java.lang.SecurityManager l2;

        l0 := @this: java.lang.Class;

        l1 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>();

        if l1 != null goto label1;

        return null;

     label1:
        l2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if l2 == null goto label2;

        $r0 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();

        staticinvoke <java.lang.ClassLoader: void checkClassLoaderPermission(java.lang.ClassLoader,java.lang.Class)>(l1, $r0);

     label2:
        return l1;
    }

    public java.lang.String getName()
    {
        java.lang.Class l0;
        java.lang.String l1#3, $r0;

        l0 := @this: java.lang.Class;

        l1#3 = l0.<java.lang.Class: java.lang.String name>;

        if l1#3 != null goto label1;

        $r0 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>();

        l1#3 = $r0;

        l0.<java.lang.Class: java.lang.String name> = $r0;

     label1:
        return l1#3;
    }

    java.lang.ClassLoader getClassLoader0()
    {
        java.lang.Class l0;
        java.lang.ClassLoader $r0;

        l0 := @this: java.lang.Class;

        $r0 = l0.<java.lang.Class: java.lang.ClassLoader classLoader>;

        return $r0;
    }

    public java.lang.String getSimpleName()
    {
        java.lang.Class l0, $r1;
        int l2, $i0, $i1, l3#38;
        boolean $z0, $z1;
        java.lang.StringBuilder $r0, $r3, $r4;
        java.lang.String $r2, $r5, l1#14, l1#18, $r6, $r8;
        char $c2, $c3;
        java.lang.InternalError $r7;

        l0 := @this: java.lang.Class;

        $z0 = virtualinvoke l0.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getSimpleName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;

     label1:
        l1#14 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>();

        if l1#14 != null goto label2;

        l1#18 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>();

        $i0 = virtualinvoke l1#18.<java.lang.String: int lastIndexOf(java.lang.String)>(".");

        $i1 = $i0 + 1;

        $r6 = virtualinvoke l1#18.<java.lang.String: java.lang.String substring(int)>($i1);

        return $r6;

     label2:
        l2 = virtualinvoke l1#14.<java.lang.String: int length()>();

        if l2 < 1 goto label3;

        $c2 = virtualinvoke l1#14.<java.lang.String: char charAt(int)>(0);

        if $c2 == 36 goto label4;

     label3:
        $r7 = new java.lang.InternalError;

        specialinvoke $r7.<java.lang.InternalError: void <init>(java.lang.String)>("Malformed class name");

        throw $r7;

     label4:
        l3#38 = 1;

     label5:
        if l3#38 >= l2 goto label6;

        $c3 = virtualinvoke l1#14.<java.lang.String: char charAt(int)>(l3#38);

        $z1 = staticinvoke <java.lang.Class: boolean isAsciiDigit(char)>($c3);

        if $z1 == 0 goto label6;

        l3#38 = l3#38 + 1;

        goto label5;

     label6:
        $r8 = virtualinvoke l1#14.<java.lang.String: java.lang.String substring(int)>(l3#38);

        return $r8;
    }

    private static boolean isAsciiDigit(char)
    {
        char l0;
        boolean $z0;

        l0 := @parameter0: char;

        if 48 > l0 goto label1;

        if l0 > 57 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private java.lang.String getSimpleBinaryName()
    {
        java.lang.Class l0, l1;
        java.lang.IndexOutOfBoundsException l2, $r3;
        java.lang.String $r0, $r1, $r2;
        int $i0;
        java.lang.InternalError $r4;

        l0 := @this: java.lang.Class;

        l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>();

        if l1 != null goto label1;

        return null;

     label1:
        $r0 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>();

        $r1 = virtualinvoke l1.<java.lang.Class: java.lang.String getName()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r2 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int)>($i0);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        l2 = $r3;

        $r4 = new java.lang.InternalError;

        specialinvoke $r4.<java.lang.InternalError: void <init>(java.lang.String,java.lang.Throwable)>("Malformed class name", l2);

        throw $r4;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
    }

    public java.lang.Class getEnclosingClass() throws java.lang.SecurityException
    {
        java.lang.Class l0, l3, l2#6, $r1;
        java.lang.Class$EnclosingMethodInfo l1;
        java.lang.InternalError $r0;
        java.lang.ClassLoader $r2;

        l0 := @this: java.lang.Class;

        l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>();

        if l1 != null goto label1;

        l2#6 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>();

        goto label4;

     label1:
        l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>();

        if l3 == l0 goto label2;

        if l3 != null goto label3;

     label2:
        $r0 = new java.lang.InternalError;

        specialinvoke $r0.<java.lang.InternalError: void <init>(java.lang.String)>("Malformed enclosing method information");

        throw $r0;

     label3:
        l2#6 = l3;

     label4:
        if l2#6 == null goto label5;

        $r1 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();

        $r2 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getClassLoader(java.lang.Class)>($r1);

        specialinvoke l2#6.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>($r2, 1);

     label5:
        return l2#6;
    }

    private java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()
    {
        java.lang.Class l0;
        java.lang.Object[] l1;
        java.lang.Class$EnclosingMethodInfo $r0;

        l0 := @this: java.lang.Class;

        l1 = specialinvoke l0.<java.lang.Class: java.lang.Object[] getEnclosingMethod0()>();

        if l1 != null goto label1;

        return null;

     label1:
        $r0 = new java.lang.Class$EnclosingMethodInfo;

        specialinvoke $r0.<java.lang.Class$EnclosingMethodInfo: void <init>(java.lang.Object[],java.lang.Class$1)>(l1, null);

        return $r0;
    }

    public java.lang.Class getDeclaringClass() throws java.lang.SecurityException
    {
        java.lang.Class l0, l1, $r0;
        java.lang.ClassLoader $r1;

        l0 := @this: java.lang.Class;

        l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>();

        if l1 == null goto label1;

        $r0 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();

        $r1 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getClassLoader(java.lang.Class)>($r0);

        specialinvoke l1.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>($r1, 1);

     label1:
        return l1;
    }

    public java.lang.Package getPackage()
    {
        java.lang.Class l0;
        java.lang.Package $r0;

        l0 := @this: java.lang.Class;

        $r0 = staticinvoke <java.lang.Package: java.lang.Package getPackage(java.lang.Class)>(l0);

        return $r0;
    }


