    public boolean forward(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.transform.DWT_Haar this;
        kanzi.SliceIntArray src, dst;
        int count, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i#49, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34;
        byte fScale, $b11;
        boolean $z0, $z1, $z2;
        int[] $r0, $r1, $r2, $r3, $r4, $r5, $r6;

        this := @this: kanzi.transform.DWT_Haar;

        src := @parameter0: kanzi.SliceIntArray;

        dst := @parameter1: kanzi.SliceIntArray;

        $z0 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(src);

        if $z0 == 0 goto label01;

        $z1 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(dst);

        if $z1 != 0 goto label02;

     label01:
        return 0;

     label02:
        $i0 = this.<kanzi.transform.DWT_Haar: int width>;

        $i1 = this.<kanzi.transform.DWT_Haar: int height>;

        count = $i0 * $i1;

        $i2 = src.<kanzi.SliceIntArray: int length>;

        if $i2 == count goto label03;

        return 0;

     label03:
        $i3 = dst.<kanzi.SliceIntArray: int length>;

        if $i3 >= count goto label04;

        return 0;

     label04:
        $i4 = dst.<kanzi.SliceIntArray: int index>;

        $i5 = $i4 + count;

        $r0 = dst.<kanzi.SliceIntArray: int[] array>;

        $i6 = lengthof $r0;

        if $i5 <= $i6 goto label05;

        return 0;

     label05:
        $r1 = src.<kanzi.SliceIntArray: int[] array>;

        $r2 = dst.<kanzi.SliceIntArray: int[] array>;

        if $r1 != $r2 goto label06;

        $i7 = src.<kanzi.SliceIntArray: int index>;

        $i8 = dst.<kanzi.SliceIntArray: int index>;

        if $i7 == $i8 goto label07;

     label06:
        $r3 = src.<kanzi.SliceIntArray: int[] array>;

        $i9 = src.<kanzi.SliceIntArray: int index>;

        $r4 = dst.<kanzi.SliceIntArray: int[] array>;

        $i10 = dst.<kanzi.SliceIntArray: int index>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i9, $r4, $i10, count);

     label07:
        $z2 = this.<kanzi.transform.DWT_Haar: boolean scale>;

        if $z2 != 1 goto label08;

        $b11 = 0;

        goto label09;

     label08:
        $b11 = 1;

     label09:
        fScale = $b11;

        i#49 = 0;

     label10:
        $i12 = this.<kanzi.transform.DWT_Haar: int steps>;

        if i#49 >= $i12 goto label11;

        $r5 = dst.<kanzi.SliceIntArray: int[] array>;

        $i13 = dst.<kanzi.SliceIntArray: int index>;

        $i14 = this.<kanzi.transform.DWT_Haar: int width>;

        $i15 = this.<kanzi.transform.DWT_Haar: int width>;

        $i16 = $i15 >> i#49;

        $i17 = this.<kanzi.transform.DWT_Haar: int height>;

        $i18 = $i17 >> i#49;

        specialinvoke this.<kanzi.transform.DWT_Haar: void forward(int[],int,int,int,int,int,int)>($r5, $i13, $i14, 1, $i16, $i18, 0);

        $r6 = dst.<kanzi.SliceIntArray: int[] array>;

        $i19 = dst.<kanzi.SliceIntArray: int index>;

        $i20 = this.<kanzi.transform.DWT_Haar: int width>;

        $i21 = this.<kanzi.transform.DWT_Haar: int height>;

        $i22 = $i21 >> i#49;

        $i23 = this.<kanzi.transform.DWT_Haar: int width>;

        $i24 = $i23 >> i#49;

        specialinvoke this.<kanzi.transform.DWT_Haar: void forward(int[],int,int,int,int,int,int)>($r6, $i19, 1, $i20, $i22, $i24, fScale);

        i#49 = i#49 + 1;

        goto label10;

     label11:
        $i25 = src.<kanzi.SliceIntArray: int index>;

        $i26 = $i25 + count;

        $i27 = src.<kanzi.SliceIntArray: int length>;

        if $i26 <= $i27 goto label12;

        return 0;

     label12:
        $i28 = dst.<kanzi.SliceIntArray: int index>;

        $i29 = $i28 + count;

        $i30 = dst.<kanzi.SliceIntArray: int length>;

        if $i29 <= $i30 goto label13;

        return 0;

     label13:
        $i31 = src.<kanzi.SliceIntArray: int index>;

        $i32 = $i31 + count;

        src.<kanzi.SliceIntArray: int index> = $i32;

        $i33 = dst.<kanzi.SliceIntArray: int index>;

        $i34 = $i33 + count;

        dst.<kanzi.SliceIntArray: int index> = $i34;

        return 1;
    }

    private void forward(int[], int, int, int, int, int, int)
    {
        kanzi.transform.DWT_Haar this;
        int[] block, $r0, $r1, $r2, $r3;
        int blkptr, stride, inc, dim1, dim2, shift, stride2, endOffs, half, end, endj, u, v, $i0, $i1, offset#15, $i2, $i3, i#29, j#31, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i#76, $i13;

        this := @this: kanzi.transform.DWT_Haar;

        block := @parameter0: int[];

        blkptr := @parameter1: int;

        stride := @parameter2: int;

        inc := @parameter3: int;

        dim1 := @parameter4: int;

        dim2 := @parameter5: int;

        shift := @parameter6: int;

        stride2 = stride << 1;

        $i0 = dim1 * inc;

        endOffs = blkptr + $i0;

        $i1 = dim2 >> 1;

        half = stride * $i1;

        offset#15 = blkptr;

     label1:
        if offset#15 >= endOffs goto label6;

        $i2 = dim2 - 2;

        $i3 = $i2 * stride;

        end = offset#15 + $i3;

        endj = offset#15 + half;

        i#29 = offset#15;

        j#31 = offset#15;

     label2:
        if j#31 >= endj goto label3;

        u = block[i#29];

        $i4 = i#29 + stride;

        v = block[$i4];

        $r0 = this.<kanzi.transform.DWT_Haar: int[] data>;

        $i5 = u + v;

        $i6 = $i5 >> shift;

        $r0[j#31] = $i6;

        $r1 = this.<kanzi.transform.DWT_Haar: int[] data>;

        $i7 = half + j#31;

        $i8 = u - v;

        $i9 = $i8 >> shift;

        $r1[$i7] = $i9;

        i#29 = i#29 + stride2;

        j#31 = j#31 + stride;

        goto label2;

     label3:
        $i10 = end + stride;

        $r2 = this.<kanzi.transform.DWT_Haar: int[] data>;

        $i11 = end + stride;

        $i12 = $r2[$i11];

        block[$i10] = $i12;

        i#76 = offset#15;

     label4:
        if i#76 > end goto label5;

        $r3 = this.<kanzi.transform.DWT_Haar: int[] data>;

        $i13 = $r3[i#76];

        block[i#76] = $i13;

        i#76 = i#76 + stride;

        goto label4;

     label5:
        offset#15 = offset#15 + inc;

        goto label1;

     label6:
        return;
    }

    public boolean inverse(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.transform.DWT_Haar this;
        kanzi.SliceIntArray src, dst;
        int count, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, i#52, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28;
        byte iScale, $b11;
        boolean $z0, $z1, $z2;
        int[] $r0, $r1, $r2, $r3, $r4, $r5, $r6;

        this := @this: kanzi.transform.DWT_Haar;

        src := @parameter0: kanzi.SliceIntArray;

        dst := @parameter1: kanzi.SliceIntArray;

        $z0 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(src);

        if $z0 == 0 goto label01;

        $z1 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(dst);

        if $z1 != 0 goto label02;

     label01:
        return 0;

     label02:
        $i0 = this.<kanzi.transform.DWT_Haar: int width>;

        $i1 = this.<kanzi.transform.DWT_Haar: int height>;

        count = $i0 * $i1;

        $i2 = src.<kanzi.SliceIntArray: int length>;

        if $i2 == count goto label03;

        return 0;

     label03:
        $i3 = dst.<kanzi.SliceIntArray: int length>;

        if $i3 >= count goto label04;

        return 0;

     label04:
        $i4 = dst.<kanzi.SliceIntArray: int index>;

        $i5 = $i4 + count;

        $r0 = dst.<kanzi.SliceIntArray: int[] array>;

        $i6 = lengthof $r0;

        if $i5 <= $i6 goto label05;

        return 0;

     label05:
        $r1 = src.<kanzi.SliceIntArray: int[] array>;

        $r2 = dst.<kanzi.SliceIntArray: int[] array>;

        if $r1 != $r2 goto label06;

        $i7 = src.<kanzi.SliceIntArray: int index>;

        $i8 = dst.<kanzi.SliceIntArray: int index>;

        if $i7 == $i8 goto label07;

     label06:
        $r3 = src.<kanzi.SliceIntArray: int[] array>;

        $i9 = src.<kanzi.SliceIntArray: int index>;

        $r4 = dst.<kanzi.SliceIntArray: int[] array>;

        $i10 = dst.<kanzi.SliceIntArray: int index>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i9, $r4, $i10, count);

     label07:
        $z2 = this.<kanzi.transform.DWT_Haar: boolean scale>;

        if $z2 != 1 goto label08;

        $b11 = 1;

        goto label09;

     label08:
        $b11 = 0;

     label09:
        iScale = $b11;

        $i12 = this.<kanzi.transform.DWT_Haar: int steps>;

        i#52 = $i12 - 1;

     label10:
        if i#52 < 0 goto label11;

        $r5 = dst.<kanzi.SliceIntArray: int[] array>;

        $i13 = dst.<kanzi.SliceIntArray: int index>;

        $i14 = this.<kanzi.transform.DWT_Haar: int width>;

        $i15 = this.<kanzi.transform.DWT_Haar: int height>;

        $i16 = $i15 >> i#52;

        $i17 = this.<kanzi.transform.DWT_Haar: int width>;

        $i18 = $i17 >> i#52;

        specialinvoke this.<kanzi.transform.DWT_Haar: void inverse(int[],int,int,int,int,int,int)>($r5, $i13, 1, $i14, $i16, $i18, iScale);

        $r6 = dst.<kanzi.SliceIntArray: int[] array>;

        $i19 = dst.<kanzi.SliceIntArray: int index>;

        $i20 = this.<kanzi.transform.DWT_Haar: int width>;

        $i21 = this.<kanzi.transform.DWT_Haar: int width>;

        $i22 = $i21 >> i#52;

        $i23 = this.<kanzi.transform.DWT_Haar: int height>;

        $i24 = $i23 >> i#52;

        specialinvoke this.<kanzi.transform.DWT_Haar: void inverse(int[],int,int,int,int,int,int)>($r6, $i19, $i20, 1, $i22, $i24, 1);

        i#52 = i#52 + -1;

        goto label10;

     label11:
        $i25 = src.<kanzi.SliceIntArray: int index>;

        $i26 = $i25 + count;

        src.<kanzi.SliceIntArray: int index> = $i26;

        $i27 = dst.<kanzi.SliceIntArray: int index>;

        $i28 = $i27 + count;

        dst.<kanzi.SliceIntArray: int index> = $i28;

        return 1;
    }

    private void inverse(int[], int, int, int, int, int, int)
    {
        kanzi.transform.DWT_Haar this;
        int[] block, $r0, $r1, $r2, $r3;
        int blkptr, stride, inc, dim1, dim2, shift, stride2, endOffs, half, end, endj, u, v, $i0, $i1, offset#15, $i2, $i3, i#29, $i4, $i5, $i6, $i7, i#51, j#53, $i8, $i9, $i10, $i11, $i12, $i13;

        this := @this: kanzi.transform.DWT_Haar;

        block := @parameter0: int[];

        blkptr := @parameter1: int;

        stride := @parameter2: int;

        inc := @parameter3: int;

        dim1 := @parameter4: int;

        dim2 := @parameter5: int;

        shift := @parameter6: int;

        stride2 = stride << 1;

        $i0 = dim1 * inc;

        endOffs = blkptr + $i0;

        $i1 = dim2 >> 1;

        half = stride * $i1;

        offset#15 = blkptr;

     label1:
        if offset#15 >= endOffs goto label6;

        $i2 = dim2 - 2;

        $i3 = $i2 * stride;

        end = offset#15 + $i3;

        endj = offset#15 + half;

        i#29 = offset#15;

     label2:
        if i#29 > end goto label3;

        $r0 = this.<kanzi.transform.DWT_Haar: int[] data>;

        $i4 = block[i#29];

        $r0[i#29] = $i4;

        i#29 = i#29 + stride;

        goto label2;

     label3:
        $r1 = this.<kanzi.transform.DWT_Haar: int[] data>;

        $i5 = end + stride;

        $i6 = end + stride;

        $i7 = block[$i6];

        $r1[$i5] = $i7;

        i#51 = offset#15;

        j#53 = offset#15;

     label4:
        if j#53 >= endj goto label5;

        $r2 = this.<kanzi.transform.DWT_Haar: int[] data>;

        u = $r2[j#53];

        $r3 = this.<kanzi.transform.DWT_Haar: int[] data>;

        $i8 = half + j#53;

        v = $r3[$i8];

        $i9 = u + v;

        $i10 = $i9 >> shift;

        block[i#51] = $i10;

        $i11 = i#51 + stride;

        $i12 = u - v;

        $i13 = $i12 >> shift;

        block[$i11] = $i13;

        i#51 = i#51 + stride2;

        j#53 = j#53 + stride;

        goto label4;

     label5:
        offset#15 = offset#15 + inc;

        goto label1;

     label6:
        return;
    }


