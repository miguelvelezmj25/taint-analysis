    void <init>(int)
    {
        org.tukaani.xz.lzma.LZMACoder this;
        int pb, $i0, $i1;
        int[] $r0;
        org.tukaani.xz.lzma.State $r1;
        short[][] $r2, $r7, $r8, $r9;
        short[] $r3, $r4, $r5, $r6, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20;

        this := @this: org.tukaani.xz.lzma.LZMACoder;

        pb := @parameter0: int;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = newarray (int)[4];

        this.<org.tukaani.xz.lzma.LZMACoder: int[] reps> = $r0;

        $r1 = new org.tukaani.xz.lzma.State;

        specialinvoke $r1.<org.tukaani.xz.lzma.State: void <init>()>();

        this.<org.tukaani.xz.lzma.LZMACoder: org.tukaani.xz.lzma.State state> = $r1;

        $r2 = newmultiarray (short)[12][16];

        this.<org.tukaani.xz.lzma.LZMACoder: short[][] isMatch> = $r2;

        $r3 = newarray (short)[12];

        this.<org.tukaani.xz.lzma.LZMACoder: short[] isRep> = $r3;

        $r4 = newarray (short)[12];

        this.<org.tukaani.xz.lzma.LZMACoder: short[] isRep0> = $r4;

        $r5 = newarray (short)[12];

        this.<org.tukaani.xz.lzma.LZMACoder: short[] isRep1> = $r5;

        $r6 = newarray (short)[12];

        this.<org.tukaani.xz.lzma.LZMACoder: short[] isRep2> = $r6;

        $r7 = newmultiarray (short)[12][16];

        this.<org.tukaani.xz.lzma.LZMACoder: short[][] isRep0Long> = $r7;

        $r8 = newmultiarray (short)[4][64];

        this.<org.tukaani.xz.lzma.LZMACoder: short[][] distSlots> = $r8;

        $r9 = newarray (short[])[10];

        $r10 = newarray (short)[2];

        $r9[0] = $r10;

        $r11 = newarray (short)[2];

        $r9[1] = $r11;

        $r12 = newarray (short)[4];

        $r9[2] = $r12;

        $r13 = newarray (short)[4];

        $r9[3] = $r13;

        $r14 = newarray (short)[8];

        $r9[4] = $r14;

        $r15 = newarray (short)[8];

        $r9[5] = $r15;

        $r16 = newarray (short)[16];

        $r9[6] = $r16;

        $r17 = newarray (short)[16];

        $r9[7] = $r17;

        $r18 = newarray (short)[32];

        $r9[8] = $r18;

        $r19 = newarray (short)[32];

        $r9[9] = $r19;

        this.<org.tukaani.xz.lzma.LZMACoder: short[][] distSpecial> = $r9;

        $r20 = newarray (short)[16];

        this.<org.tukaani.xz.lzma.LZMACoder: short[] distAlign> = $r20;

        $i0 = 1 << pb;

        $i1 = $i0 - 1;

        this.<org.tukaani.xz.lzma.LZMACoder: int posMask> = $i1;

        return;
    }

    void reset()
    {
        org.tukaani.xz.lzma.LZMACoder this;
        int[] $r0, $r1, $r2, $r3;
        org.tukaani.xz.lzma.State $r4;
        int i#20, $i0, i#38, $i1, i#48, $i2, i#58, $i3;
        short[][] $r5, $r6, $r12, $r13, $r15, $r16, $r18, $r19;
        short[] $r7, $r8, $r9, $r10, $r11, $r14, $r17, $r20, $r21;

        this := @this: org.tukaani.xz.lzma.LZMACoder;

        $r0 = this.<org.tukaani.xz.lzma.LZMACoder: int[] reps>;

        $r0[0] = 0;

        $r1 = this.<org.tukaani.xz.lzma.LZMACoder: int[] reps>;

        $r1[1] = 0;

        $r2 = this.<org.tukaani.xz.lzma.LZMACoder: int[] reps>;

        $r2[2] = 0;

        $r3 = this.<org.tukaani.xz.lzma.LZMACoder: int[] reps>;

        $r3[3] = 0;

        $r4 = this.<org.tukaani.xz.lzma.LZMACoder: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r4.<org.tukaani.xz.lzma.State: void reset()>();

        i#20 = 0;

     label1:
        $r5 = this.<org.tukaani.xz.lzma.LZMACoder: short[][] isMatch>;

        $i0 = lengthof $r5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#20);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#20 >= $i0 goto label2;

        $r6 = this.<org.tukaani.xz.lzma.LZMACoder: short[][] isMatch>;

        $r7 = $r6[i#20];

        staticinvoke <org.tukaani.xz.rangecoder.RangeCoder: void initProbs(short[])>($r7);

        i#20 = i#20 + 1;

        goto label1;

     label2:
        $r8 = this.<org.tukaani.xz.lzma.LZMACoder: short[] isRep>;

        staticinvoke <org.tukaani.xz.rangecoder.RangeCoder: void initProbs(short[])>($r8);

        $r9 = this.<org.tukaani.xz.lzma.LZMACoder: short[] isRep0>;

        staticinvoke <org.tukaani.xz.rangecoder.RangeCoder: void initProbs(short[])>($r9);

        $r10 = this.<org.tukaani.xz.lzma.LZMACoder: short[] isRep1>;

        staticinvoke <org.tukaani.xz.rangecoder.RangeCoder: void initProbs(short[])>($r10);

        $r11 = this.<org.tukaani.xz.lzma.LZMACoder: short[] isRep2>;

        staticinvoke <org.tukaani.xz.rangecoder.RangeCoder: void initProbs(short[])>($r11);

        i#38 = 0;

     label3:
        $r12 = this.<org.tukaani.xz.lzma.LZMACoder: short[][] isRep0Long>;

        $i1 = lengthof $r12;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#38);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#38 >= $i1 goto label4;

        $r13 = this.<org.tukaani.xz.lzma.LZMACoder: short[][] isRep0Long>;

        $r14 = $r13[i#38];

        staticinvoke <org.tukaani.xz.rangecoder.RangeCoder: void initProbs(short[])>($r14);

        i#38 = i#38 + 1;

        goto label3;

     label4:
        i#48 = 0;

     label5:
        $r15 = this.<org.tukaani.xz.lzma.LZMACoder: short[][] distSlots>;

        $i2 = lengthof $r15;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#48);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#48 >= $i2 goto label6;

        $r16 = this.<org.tukaani.xz.lzma.LZMACoder: short[][] distSlots>;

        $r17 = $r16[i#48];

        staticinvoke <org.tukaani.xz.rangecoder.RangeCoder: void initProbs(short[])>($r17);

        i#48 = i#48 + 1;

        goto label5;

     label6:
        i#58 = 0;

     label7:
        $r18 = this.<org.tukaani.xz.lzma.LZMACoder: short[][] distSpecial>;

        $i3 = lengthof $r18;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#58);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if i#58 >= $i3 goto label8;

        $r19 = this.<org.tukaani.xz.lzma.LZMACoder: short[][] distSpecial>;

        $r20 = $r19[i#58];

        staticinvoke <org.tukaani.xz.rangecoder.RangeCoder: void initProbs(short[])>($r20);

        i#58 = i#58 + 1;

        goto label7;

     label8:
        $r21 = this.<org.tukaani.xz.lzma.LZMACoder: short[] distAlign>;

        staticinvoke <org.tukaani.xz.rangecoder.RangeCoder: void initProbs(short[])>($r21);

        return;
    }

    static final int getDistState(int)
    {
        int len, $i0;

        len := @parameter0: int;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len);

        if len >= 6 goto label1;

        $i0 = len - 2;

        goto label2;

     label1:
        $i0 = 3;

     label2:
        return $i0;
    }


