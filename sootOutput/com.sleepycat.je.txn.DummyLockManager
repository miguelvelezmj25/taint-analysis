    public void <init>(com.sleepycat.je.dbi.EnvironmentImpl, com.sleepycat.je.txn.LockManager)
    {
        com.sleepycat.je.txn.DummyLockManager this;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        com.sleepycat.je.txn.LockManager superiorLockManager;

        this := @this: com.sleepycat.je.txn.DummyLockManager;

        envImpl := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        superiorLockManager := @parameter1: com.sleepycat.je.txn.LockManager;

        specialinvoke this.<com.sleepycat.je.txn.LockManager: void <init>(com.sleepycat.je.dbi.EnvironmentImpl)>(envImpl);

        this.<com.sleepycat.je.txn.DummyLockManager: com.sleepycat.je.txn.LockManager superiorLockManager> = superiorLockManager;

        return;
    }

    void dumpLockTable(com.sleepycat.je.utilint.StatGroup, boolean) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.txn.DummyLockManager this;
        com.sleepycat.je.utilint.StatGroup stats;
        boolean clear;
        com.sleepycat.je.txn.LockManager $r0;

        this := @this: com.sleepycat.je.txn.DummyLockManager;

        stats := @parameter0: com.sleepycat.je.utilint.StatGroup;

        clear := @parameter1: boolean;

        $r0 = this.<com.sleepycat.je.txn.DummyLockManager: com.sleepycat.je.txn.LockManager superiorLockManager>;

        virtualinvoke $r0.<com.sleepycat.je.txn.LockManager: void dumpLockTable(com.sleepycat.je.utilint.StatGroup,boolean)>(stats, clear);

        return;
    }

    java.util.Set releaseAndFindNotifyTargets(long, com.sleepycat.je.txn.Locker) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.txn.DummyLockManager this;
        long lsn;
        com.sleepycat.je.txn.Locker locker;
        com.sleepycat.je.txn.LockManager $r0;
        java.util.Set $r1;

        this := @this: com.sleepycat.je.txn.DummyLockManager;

        lsn := @parameter0: long;

        locker := @parameter1: com.sleepycat.je.txn.Locker;

        $r0 = this.<com.sleepycat.je.txn.DummyLockManager: com.sleepycat.je.txn.LockManager superiorLockManager>;

        $r1 = virtualinvoke $r0.<com.sleepycat.je.txn.LockManager: java.util.Set releaseAndFindNotifyTargets(long,com.sleepycat.je.txn.Locker)>(lsn, locker);

        return $r1;
    }

    public boolean isLockUncontended(java.lang.Long)
    {
        com.sleepycat.je.txn.DummyLockManager this;
        java.lang.Long lsn;
        com.sleepycat.je.txn.LockManager $r0;
        boolean $z0;

        this := @this: com.sleepycat.je.txn.DummyLockManager;

        lsn := @parameter0: java.lang.Long;

        $r0 = this.<com.sleepycat.je.txn.DummyLockManager: com.sleepycat.je.txn.LockManager superiorLockManager>;

        $z0 = virtualinvoke $r0.<com.sleepycat.je.txn.LockManager: boolean isLockUncontended(java.lang.Long)>(lsn);

        return $z0;
    }

    com.sleepycat.je.txn.LockAttemptResult attemptLock(java.lang.Long, com.sleepycat.je.txn.Locker, com.sleepycat.je.txn.LockType, boolean, boolean) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.txn.DummyLockManager this;
        java.lang.Long lsn;
        com.sleepycat.je.txn.Locker locker;
        com.sleepycat.je.txn.LockType type;
        boolean nonBlockingRequest, jumpAheadOfWaiters, $z0;
        com.sleepycat.je.txn.LockManager $r0;
        com.sleepycat.je.txn.LockAttemptResult $r1, $r2;
        com.sleepycat.je.txn.LockGrantType $r3;

        this := @this: com.sleepycat.je.txn.DummyLockManager;

        lsn := @parameter0: java.lang.Long;

        locker := @parameter1: com.sleepycat.je.txn.Locker;

        type := @parameter2: com.sleepycat.je.txn.LockType;

        nonBlockingRequest := @parameter3: boolean;

        jumpAheadOfWaiters := @parameter4: boolean;

        $z0 = virtualinvoke locker.<com.sleepycat.je.txn.Locker: boolean lockingRequired()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r0 = this.<com.sleepycat.je.txn.DummyLockManager: com.sleepycat.je.txn.LockManager superiorLockManager>;

        $r1 = virtualinvoke $r0.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.txn.LockAttemptResult attemptLock(java.lang.Long,com.sleepycat.je.txn.Locker,com.sleepycat.je.txn.LockType,boolean,boolean)>(lsn, locker, type, nonBlockingRequest, jumpAheadOfWaiters);

        return $r1;

     label1:
        $r2 = new com.sleepycat.je.txn.LockAttemptResult;

        $r3 = <com.sleepycat.je.txn.LockGrantType: com.sleepycat.je.txn.LockGrantType NEW>;

        specialinvoke $r2.<com.sleepycat.je.txn.LockAttemptResult: void <init>(com.sleepycat.je.txn.Lock,com.sleepycat.je.txn.LockGrantType,boolean)>(null, $r3, 1);

        return $r2;
    }

    boolean validateOwnership(java.lang.Long, com.sleepycat.je.txn.Locker, com.sleepycat.je.txn.LockType, boolean, boolean, java.util.Set, java.util.List) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.txn.DummyLockManager this;
        java.lang.Long lsn;
        com.sleepycat.je.txn.Locker locker;
        com.sleepycat.je.txn.LockType type;
        boolean getOwnersAndWaiters, flushFromWaiters, $z0, $z1;
        java.util.Set owners;
        java.util.List waiters;
        com.sleepycat.je.txn.LockManager $r0;

        this := @this: com.sleepycat.je.txn.DummyLockManager;

        lsn := @parameter0: java.lang.Long;

        locker := @parameter1: com.sleepycat.je.txn.Locker;

        type := @parameter2: com.sleepycat.je.txn.LockType;

        getOwnersAndWaiters := @parameter3: boolean;

        flushFromWaiters := @parameter4: boolean;

        owners := @parameter5: java.util.Set;

        waiters := @parameter6: java.util.List;

        $z0 = virtualinvoke locker.<com.sleepycat.je.txn.Locker: boolean lockingRequired()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r0 = this.<com.sleepycat.je.txn.DummyLockManager: com.sleepycat.je.txn.LockManager superiorLockManager>;

        $z1 = virtualinvoke $r0.<com.sleepycat.je.txn.LockManager: boolean validateOwnership(java.lang.Long,com.sleepycat.je.txn.Locker,com.sleepycat.je.txn.LockType,boolean,boolean,java.util.Set,java.util.List)>(lsn, locker, type, getOwnersAndWaiters, flushFromWaiters, owners, waiters);

        return $z1;

     label1:
        return 1;
    }

    boolean isOwner(java.lang.Long, com.sleepycat.je.txn.Locker, com.sleepycat.je.txn.LockType) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.txn.DummyLockManager this;
        java.lang.Long lsn;
        com.sleepycat.je.txn.Locker locker;
        com.sleepycat.je.txn.LockType type;
        com.sleepycat.je.txn.LockManager $r0;
        boolean $z0;

        this := @this: com.sleepycat.je.txn.DummyLockManager;

        lsn := @parameter0: java.lang.Long;

        locker := @parameter1: com.sleepycat.je.txn.Locker;

        type := @parameter2: com.sleepycat.je.txn.LockType;

        $r0 = this.<com.sleepycat.je.txn.DummyLockManager: com.sleepycat.je.txn.LockManager superiorLockManager>;

        $z0 = virtualinvoke $r0.<com.sleepycat.je.txn.LockManager: boolean isOwner(java.lang.Long,com.sleepycat.je.txn.Locker,com.sleepycat.je.txn.LockType)>(lsn, locker, type);

        return $z0;
    }

    public com.sleepycat.je.txn.LockAttemptResult stealLock(java.lang.Long, com.sleepycat.je.txn.Locker, com.sleepycat.je.txn.LockType) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.txn.DummyLockManager this;
        java.lang.Long lsn;
        com.sleepycat.je.txn.Locker locker;
        com.sleepycat.je.txn.LockType lockType;
        boolean $z0;
        com.sleepycat.je.txn.LockManager $r0;
        com.sleepycat.je.txn.LockAttemptResult $r1;

        this := @this: com.sleepycat.je.txn.DummyLockManager;

        lsn := @parameter0: java.lang.Long;

        locker := @parameter1: com.sleepycat.je.txn.Locker;

        lockType := @parameter2: com.sleepycat.je.txn.LockType;

        $z0 = virtualinvoke locker.<com.sleepycat.je.txn.Locker: boolean lockingRequired()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r0 = this.<com.sleepycat.je.txn.DummyLockManager: com.sleepycat.je.txn.LockManager superiorLockManager>;

        $r1 = virtualinvoke $r0.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.txn.LockAttemptResult stealLock(java.lang.Long,com.sleepycat.je.txn.Locker,com.sleepycat.je.txn.LockType)>(lsn, locker, lockType);

        return $r1;

     label1:
        return null;
    }

    com.sleepycat.je.txn.LockManager$TimeoutInfo getTimeoutInfo(boolean, com.sleepycat.je.txn.Locker, long, com.sleepycat.je.txn.LockType, com.sleepycat.je.txn.LockGrantType, com.sleepycat.je.txn.Lock, long, long, long, com.sleepycat.je.dbi.DatabaseImpl, java.util.Set, java.util.List) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.txn.DummyLockManager this;
        boolean isLockNotTxnTimeout, $z0;
        com.sleepycat.je.txn.Locker locker;
        long lsn, timeout, start, now;
        com.sleepycat.je.txn.LockType type;
        com.sleepycat.je.txn.LockGrantType grantType;
        com.sleepycat.je.txn.Lock useLock;
        com.sleepycat.je.dbi.DatabaseImpl database;
        java.util.Set owners;
        java.util.List waiters;
        com.sleepycat.je.txn.LockManager $r0;
        com.sleepycat.je.txn.LockManager$TimeoutInfo $r1;

        this := @this: com.sleepycat.je.txn.DummyLockManager;

        isLockNotTxnTimeout := @parameter0: boolean;

        locker := @parameter1: com.sleepycat.je.txn.Locker;

        lsn := @parameter2: long;

        type := @parameter3: com.sleepycat.je.txn.LockType;

        grantType := @parameter4: com.sleepycat.je.txn.LockGrantType;

        useLock := @parameter5: com.sleepycat.je.txn.Lock;

        timeout := @parameter6: long;

        start := @parameter7: long;

        now := @parameter8: long;

        database := @parameter9: com.sleepycat.je.dbi.DatabaseImpl;

        owners := @parameter10: java.util.Set;

        waiters := @parameter11: java.util.List;

        $z0 = virtualinvoke locker.<com.sleepycat.je.txn.Locker: boolean lockingRequired()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r0 = this.<com.sleepycat.je.txn.DummyLockManager: com.sleepycat.je.txn.LockManager superiorLockManager>;

        $r1 = virtualinvoke $r0.<com.sleepycat.je.txn.LockManager: com.sleepycat.je.txn.LockManager$TimeoutInfo getTimeoutInfo(boolean,com.sleepycat.je.txn.Locker,long,com.sleepycat.je.txn.LockType,com.sleepycat.je.txn.LockGrantType,com.sleepycat.je.txn.Lock,long,long,long,com.sleepycat.je.dbi.DatabaseImpl,java.util.Set,java.util.List)>(isLockNotTxnTimeout, locker, lsn, type, grantType, useLock, timeout, start, now, database, owners, waiters);

        return $r1;

     label1:
        return null;
    }

    void demote(long, com.sleepycat.je.txn.Locker) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.txn.DummyLockManager this;
        long lsn;
        com.sleepycat.je.txn.Locker locker;
        boolean $z0;
        com.sleepycat.je.txn.LockManager $r0;

        this := @this: com.sleepycat.je.txn.DummyLockManager;

        lsn := @parameter0: long;

        locker := @parameter1: com.sleepycat.je.txn.Locker;

        $z0 = virtualinvoke locker.<com.sleepycat.je.txn.Locker: boolean lockingRequired()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r0 = this.<com.sleepycat.je.txn.DummyLockManager: com.sleepycat.je.txn.LockManager superiorLockManager>;

        virtualinvoke $r0.<com.sleepycat.je.txn.LockManager: void demote(long,com.sleepycat.je.txn.Locker)>(lsn, locker);

        goto label2;

     label1:
        return;

     label2:
        return;
    }

    public boolean ownsOrSharesLock(com.sleepycat.je.txn.Locker, java.lang.Long)
    {
        com.sleepycat.je.txn.DummyLockManager this;
        com.sleepycat.je.txn.Locker locker;
        java.lang.Long lsn;
        com.sleepycat.je.txn.LockManager $r0;
        boolean $z0;

        this := @this: com.sleepycat.je.txn.DummyLockManager;

        locker := @parameter0: com.sleepycat.je.txn.Locker;

        lsn := @parameter1: java.lang.Long;

        $r0 = this.<com.sleepycat.je.txn.DummyLockManager: com.sleepycat.je.txn.LockManager superiorLockManager>;

        $z0 = virtualinvoke $r0.<com.sleepycat.je.txn.LockManager: boolean ownsOrSharesLock(com.sleepycat.je.txn.Locker,java.lang.Long)>(locker, lsn);

        return $z0;
    }

    public java.util.Set getOwners(java.lang.Long)
    {
        com.sleepycat.je.txn.DummyLockManager this;
        java.lang.Long lsn;
        com.sleepycat.je.txn.LockManager $r0;
        java.util.Set $r1;

        this := @this: com.sleepycat.je.txn.DummyLockManager;

        lsn := @parameter0: java.lang.Long;

        $r0 = this.<com.sleepycat.je.txn.DummyLockManager: com.sleepycat.je.txn.LockManager superiorLockManager>;

        $r1 = virtualinvoke $r0.<com.sleepycat.je.txn.LockManager: java.util.Set getOwners(java.lang.Long)>(lsn);

        return $r1;
    }


