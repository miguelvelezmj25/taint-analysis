    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep $r1, $r2, $r3, $r4;

        $r0 = class "berkeley/com/sleepycat/je/tree/BIN";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <berkeley.com.sleepycat.je.tree.BIN: boolean $assertionsDisabled> = $z1;

        $r1 = new berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep;

        specialinvoke $r1.<berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep: void <init>(int,boolean)>(1, 0);

        <berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep EMPTY_LAST_LOGGED_SIZES> = $r1;

        $r2 = new berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep;

        specialinvoke $r2.<berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep: void <init>(int,boolean)>(5, 0);

        <berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep EMPTY_VLSNS> = $r2;

        $r3 = new berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep;

        specialinvoke $r3.<berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep: void <init>(int,boolean)>(8, 1);

        <berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep EMPTY_OFFHEAP_LN_IDS> = $r3;

        $r4 = new berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep;

        specialinvoke $r4.<berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep: void <init>(int,boolean)>(1, 1);

        <berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep EMPTY_EXPIRATION> = $r4;

        <berkeley.com.sleepycat.je.tree.BIN: boolean TEST_NO_LAST_LOGGED_SIZES> = 0;

        return;
    }

    public boolean canMutateToBINDelta()
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        boolean $z0, $z1, $z2;
        int $i0;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean shouldLogDelta()>();

        if $z1 == 0 goto label1;

        $i0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int nCursors()>();

        if $i0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public long getLastDeltaLsn()
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        $l0 = this.<berkeley.com.sleepycat.je.tree.BIN: long lastDeltaVersion>;

        return $l0;
    }

    public boolean isBIN()
    {
        berkeley.com.sleepycat.je.tree.BIN this;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        return 1;
    }

    boolean mayHaveLastLoggedSizeStored()
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        boolean $z0, $z1, $z2, $z3, $z4;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r0, $r2;
        berkeley.com.sleepycat.je.dbi.DbType $r1;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        $z0 = <berkeley.com.sleepycat.je.utilint.DatabaseUtil: boolean TEST>;

        if $z0 == 0 goto label1;

        $z1 = <berkeley.com.sleepycat.je.tree.BIN: boolean TEST_NO_LAST_LOGGED_SIZES>;

        if $z1 == 0 goto label1;

        $r0 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.DbType getDbType()>();

        $z2 = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.DbType: boolean isInternal()>();

        if $z2 != 0 goto label1;

        return 0;

     label1:
        $r2 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $z3 = virtualinvoke $r2.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isLNImmediatelyObsolete()>();

        if $z3 != 0 goto label2;

        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        return $z4;
    }

    boolean isLastLoggedSizeStored(int)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int idx;
        boolean $z0, $z1, $z2;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        idx := @parameter0: int;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean mayHaveLastLoggedSizeStored()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isEmbeddedLN(int)>(idx);

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public int getLastLoggedSize(int)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int idx, $i1;
        boolean $z0;
        berkeley.com.sleepycat.je.tree.INLongRep $r0;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        idx := @parameter0: int;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isLastLoggedSizeStored(int)>(idx);

        if $z0 == 0 goto label1;

        $r0 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep lastLoggedSizes>;

        $l0 = virtualinvoke $r0.<berkeley.com.sleepycat.je.tree.INLongRep: long get(int)>(idx);

        $i1 = (int) $l0;

        return $i1;

     label1:
        return 0;
    }

    byte[] createBloomFilter()
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        boolean blindPuts, $z0, $z1, $z2, $z3, $z4, $z5;
        int numKeys, nbytes, $i0, $i1, i#41, $i2;
        byte[] bf, $r0, $r2, $r4, $r5, $r7, $r8, suffix#54;
        berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter$HashContext hc, $r6;
        java.lang.AssertionError $r1, $r3;
        berkeley.com.sleepycat.je.tree.INKeyRep $r9;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        $z0 = <berkeley.com.sleepycat.je.tree.BIN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $r0 = this.<berkeley.com.sleepycat.je.tree.BIN: byte[] bloomFilter>;

        if $r0 == null goto label01;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        if $z1 != 0 goto label01;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label01:
        blindPuts = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean allowBlindPuts()>();

        if blindPuts != 0 goto label03;

        $z2 = <berkeley.com.sleepycat.je.tree.BIN: boolean $assertionsDisabled>;

        if $z2 != 0 goto label02;

        $r2 = this.<berkeley.com.sleepycat.je.tree.BIN: byte[] bloomFilter>;

        if $r2 == null goto label02;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label02:
        return null;

     label03:
        $r4 = this.<berkeley.com.sleepycat.je.tree.BIN: byte[] bloomFilter>;

        if $r4 == null goto label04;

        $r5 = this.<berkeley.com.sleepycat.je.tree.BIN: byte[] bloomFilter>;

        return $r5;

     label04:
        $z3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        if $z3 == 0 goto label05;

        return null;

     label05:
        $i0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getNEntries()>();

        $i1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getNDeltas()>();

        numKeys = $i0 - $i1;

        nbytes = staticinvoke <berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter: int getByteSize(int)>(numKeys);

        bf = newarray (byte)[nbytes];

        $r6 = new berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter$HashContext;

        specialinvoke $r6.<berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter$HashContext: void <init>()>();

        hc = $r6;

        $r7 = this.<berkeley.com.sleepycat.je.tree.BIN: byte[] keyPrefix>;

        if $r7 == null goto label06;

        $r8 = this.<berkeley.com.sleepycat.je.tree.BIN: byte[] keyPrefix>;

        virtualinvoke hc.<berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter$HashContext: void hashKeyPrefix(byte[])>($r8);

     label06:
        i#41 = 0;

     label07:
        $i2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getNEntries()>();

        if i#41 >= $i2 goto label11;

        $z4 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isDirty(int)>(i#41);

        if $z4 == 0 goto label08;

        goto label10;

     label08:
        $r9 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $z5 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean haveEmbeddedData(int)>(i#41);

        suffix#54 = virtualinvoke $r9.<berkeley.com.sleepycat.je.tree.INKeyRep: byte[] getKey(int,boolean)>(i#41, $z5);

        if suffix#54 != null goto label09;

        suffix#54 = <berkeley.com.sleepycat.je.tree.Key: byte[] EMPTY_KEY>;

     label09:
        staticinvoke <berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter: void add(byte[],byte[],berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter$HashContext)>(bf, suffix#54, hc);

     label10:
        i#41 = i#41 + 1;

        goto label07;

     label11:
        return bf;
    }

    int getExpirationBase()
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int $i0;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        $i0 = this.<berkeley.com.sleepycat.je.tree.BIN: int expirationBase>;

        return $i0;
    }

    boolean isVLSNCachingEnabled()
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r0;
        boolean $z0, $z1, $z2;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r1;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        $r0 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $z0 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean getSortedDuplicates()>();

        if $z0 != 0 goto label1;

        $r1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $z1 = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean getCacheVLSN()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    int getDeltaCapacity(int)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int numDirtyEntries, $i0, $i1, $i2, $i3, $i4;
        boolean blindOps, $z0, $z1, $z2, $z3;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0, $r1;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r2;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        numDirtyEntries := @parameter0: int;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $z0 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean allowBlindOps()>();

        if $z0 != 0 goto label1;

        $r1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $z1 = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean allowBlindPuts()>();

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        blindOps = $z2;

        $z3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        if $z3 == 0 goto label4;

        $i0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getMaxEntries()>();

        return $i0;

     label4:
        if blindOps == 0 goto label5;

        $i1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getNEntries()>();

        $r2 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $i2 = virtualinvoke $r2.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: int getBinDeltaPercent()>();

        $i3 = $i1 * $i2;

        $i4 = $i3 / 100;

        return $i4;

     label5:
        return numDirtyEntries;
    }

    long getCachedVLSN(int)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int idx;
        long vlsn, $l1;
        berkeley.com.sleepycat.je.tree.INLongRep $r0;
        byte $b0;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        idx := @parameter0: int;

        $r0 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep vlsnCache>;

        vlsn = virtualinvoke $r0.<berkeley.com.sleepycat.je.tree.INLongRep: long get(int)>(idx);

        $b0 = vlsn cmp 0L;

        if $b0 != 0 goto label1;

        $l1 = -1L;

        goto label2;

     label1:
        $l1 = vlsn;

     label2:
        return $l1;
    }

    int getExpirationOffset(int)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int idx, $i1;
        berkeley.com.sleepycat.je.tree.INLongRep $r0;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        idx := @parameter0: int;

        $r0 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep expirationValues>;

        $l0 = virtualinvoke $r0.<berkeley.com.sleepycat.je.tree.INLongRep: long get(int)>(idx);

        $i1 = (int) $l0;

        return $i1;
    }

    public int getFullBinNEntries()
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        boolean $z0;
        int $i0, $i1;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        if $z0 == 0 goto label1;

        $i0 = this.<berkeley.com.sleepycat.je.tree.BIN: int fullBinNEntries>;

        return $i0;

     label1:
        $i1 = this.<berkeley.com.sleepycat.je.tree.BIN: int nEntries>;

        return $i1;
    }

    public int getFullBinMaxEntries()
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        boolean $z0;
        int $i0, $i1;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        if $z0 == 0 goto label1;

        $i0 = this.<berkeley.com.sleepycat.je.tree.BIN: int fullBinMaxEntries>;

        return $i0;

     label1:
        $i1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getMaxEntries()>();

        return $i1;
    }

    boolean allowBlindPuts()
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0;
        boolean res#4, $z0, $z1, res#11, $z2, $z3;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r1, $r2;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        res#4 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean allowBlindPuts()>();

        if res#4 == 0 goto label5;

        if res#4 == 0 goto label1;

        $r1 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $z0 = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean hasBtreeBinaryEqualityComparator()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        res#11 = $z1;

        if res#11 == 0 goto label3;

        $r2 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $z2 = virtualinvoke $r2.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean hasDuplicateBinaryEqualityComparator()>();

        if $z2 == 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        res#4 = $z3;

     label5:
        return res#4;
    }

    int getBloomFilterLogSize()
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int numKeys, $i0, $i1, $i2, $i3;
        boolean $z0, $z1, $z2;
        byte[] $r0, $r1, $r2;
        java.lang.AssertionError $r3;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean allowBlindPuts()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        if $z1 == 0 goto label3;

        $r0 = this.<berkeley.com.sleepycat.je.tree.BIN: byte[] bloomFilter>;

        if $r0 == null goto label2;

        $r1 = this.<berkeley.com.sleepycat.je.tree.BIN: byte[] bloomFilter>;

        $i0 = staticinvoke <berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter: int getLogSize(byte[])>($r1);

        return $i0;

     label2:
        return 0;

     label3:
        $z2 = <berkeley.com.sleepycat.je.tree.BIN: boolean $assertionsDisabled>;

        if $z2 != 0 goto label4;

        $r2 = this.<berkeley.com.sleepycat.je.tree.BIN: byte[] bloomFilter>;

        if $r2 == null goto label4;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label4:
        $i1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getNEntries()>();

        $i2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getNDeltas()>();

        numKeys = $i1 - $i2;

        $i3 = staticinvoke <berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter: int getLogSize(int)>(numKeys);

        return $i3;
    }

    public boolean shouldLogDelta()
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int numDeltas, deltaLimit, $i2, $i3, $i4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.AssertionError $r0, $r1;
        long $l0;
        byte $b1;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r2;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        if $z0 == 0 goto label3;

        $z1 = <berkeley.com.sleepycat.je.tree.BIN: boolean $assertionsDisabled>;

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean getProhibitNextDelta()>();

        if $z2 == 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $z3 = <berkeley.com.sleepycat.je.tree.BIN: boolean $assertionsDisabled>;

        if $z3 != 0 goto label2;

        $l0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: long getLastFullLsn()>();

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label2;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label2:
        return 1;

     label3:
        $z4 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isDeltaProhibited()>();

        if $z4 == 0 goto label4;

        return 0;

     label4:
        numDeltas = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getNDeltas()>();

        if numDeltas > 0 goto label5;

        return 0;

     label5:
        $i2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getNEntries()>();

        $r2 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $i3 = virtualinvoke $r2.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: int getBinDeltaPercent()>();

        $i4 = $i2 * $i3;

        deltaLimit = $i4 / 100;

        if numDeltas > deltaLimit goto label6;

        $z5 = 1;

        goto label7;

     label6:
        $z5 = 0;

     label7:
        return $z5;
    }

    public int nCursors()
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        berkeley.com.sleepycat.je.utilint.TinyHashSet cursors;
        int $i0;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        cursors = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.utilint.TinyHashSet cursorSet>;

        if cursors != null goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke cursors.<berkeley.com.sleepycat.je.utilint.TinyHashSet: int size()>();

        return $i0;
    }

    boolean isDeltaProhibited()
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        boolean $z0, $z1, $z2;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r0;
        long $l0;
        byte $b1;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean getProhibitNextDelta()>();

        if $z0 != 0 goto label1;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        $z1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isDeferredWriteMode()>();

        if $z1 != 0 goto label1;

        $l0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: long getLastFullLsn()>();

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public boolean hasOffHeapLNs()
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        berkeley.com.sleepycat.je.tree.INLongRep $r0;
        boolean $z0, $z1;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        $r0 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep offHeapLNIds>;

        $z0 = virtualinvoke $r0.<berkeley.com.sleepycat.je.tree.INLongRep: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public long getOffHeapLNId(int)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int idx;
        berkeley.com.sleepycat.je.tree.INLongRep $r0;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        idx := @parameter0: int;

        $r0 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep offHeapLNIds>;

        $l0 = virtualinvoke $r0.<berkeley.com.sleepycat.je.tree.INLongRep: long get(int)>(idx);

        return $l0;
    }

    public int getExpiration(int)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int idx, offset, $i1, $i2, $i3;
        berkeley.com.sleepycat.je.tree.INLongRep $r0;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        idx := @parameter0: int;

        $r0 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep expirationValues>;

        $l0 = virtualinvoke $r0.<berkeley.com.sleepycat.je.tree.INLongRep: long get(int)>(idx);

        offset = (int) $l0;

        if offset != 0 goto label1;

        return 0;

     label1:
        $i1 = offset - 1;

        $i2 = this.<berkeley.com.sleepycat.je.tree.BIN: int expirationBase>;

        $i3 = $i1 + $i2;

        return $i3;
    }

    public void setLastDeltaLsn(long)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        long lsn;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        lsn := @parameter0: long;

        this.<berkeley.com.sleepycat.je.tree.BIN: long lastDeltaVersion> = lsn;

        return;
    }

    public void setOffHeapLNId(int, long)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int idx;
        long memId, $l0;
        berkeley.com.sleepycat.je.tree.INLongRep $r0, $r1, $r2;
        byte $b1;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        idx := @parameter0: int;

        memId := @parameter1: long;

        $r0 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep offHeapLNIds>;

        $l0 = virtualinvoke $r0.<berkeley.com.sleepycat.je.tree.INLongRep: long get(int)>(idx);

        $b1 = $l0 cmp memId;

        if $b1 != 0 goto label1;

        return;

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep offHeapLNIds>;

        $r2 = virtualinvoke $r1.<berkeley.com.sleepycat.je.tree.INLongRep: berkeley.com.sleepycat.je.tree.INLongRep set(int,long,berkeley.com.sleepycat.je.tree.IN)>(idx, memId, this);

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep offHeapLNIds> = $r2;

        return;
    }

    void setLastLoggedSizeUnconditional(int, int)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int idx, lastLoggedSize;
        berkeley.com.sleepycat.je.tree.INLongRep $r0, $r1;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        idx := @parameter0: int;

        lastLoggedSize := @parameter1: int;

        $r0 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep lastLoggedSizes>;

        $l0 = (long) lastLoggedSize;

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.tree.INLongRep: berkeley.com.sleepycat.je.tree.INLongRep set(int,long,berkeley.com.sleepycat.je.tree.IN)>(idx, $l0, this);

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep lastLoggedSizes> = $r1;

        return;
    }

    void setExpirationBase(int)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int base;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        base := @parameter0: int;

        this.<berkeley.com.sleepycat.je.tree.BIN: int expirationBase> = base;

        return;
    }

    void setCachedVLSNUnconditional(int, long)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int idx;
        long vlsn, $l2;
        berkeley.com.sleepycat.je.tree.INLongRep $r1, $r2;
        byte $b1;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        idx := @parameter0: int;

        vlsn := @parameter1: long;

        $r1 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep vlsnCache>;

        $b1 = vlsn cmp -1L;

        if $b1 != 0 goto label1;

        $l2 = 0L;

        goto label2;

     label1:
        $l2 = vlsn;

     label2:
        $r2 = virtualinvoke $r1.<berkeley.com.sleepycat.je.tree.INLongRep: berkeley.com.sleepycat.je.tree.INLongRep set(int,long,berkeley.com.sleepycat.je.tree.IN)>(idx, $l2, this);

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep vlsnCache> = $r2;

        return;
    }

    void setExpirationOffset(int, int)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int idx, offset;
        berkeley.com.sleepycat.je.tree.INLongRep $r0, $r1;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        idx := @parameter0: int;

        offset := @parameter1: int;

        $r0 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep expirationValues>;

        $l0 = (long) offset;

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.tree.INLongRep: berkeley.com.sleepycat.je.tree.INLongRep set(int,long,berkeley.com.sleepycat.je.tree.IN)>(idx, $l0, this);

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep expirationValues> = $r1;

        return;
    }

    public void setFullBinNEntries(int)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int n;
        boolean $z0, $z1;
        java.lang.AssertionError $r0;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        n := @parameter0: int;

        $z0 = <berkeley.com.sleepycat.je.tree.BIN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isBINDelta(boolean)>(0);

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        this.<berkeley.com.sleepycat.je.tree.BIN: int fullBinNEntries> = n;

        return;
    }

    public void setFullBinMaxEntries(int)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int n;
        boolean $z0, $z1;
        java.lang.AssertionError $r0;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        n := @parameter0: int;

        $z0 = <berkeley.com.sleepycat.je.tree.BIN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isBINDelta(boolean)>(0);

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        this.<berkeley.com.sleepycat.je.tree.BIN: int fullBinMaxEntries> = n;

        return;
    }

    public void <init>()
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep $r0, $r1, $r2, $r3;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void <init>()>();

        this.<berkeley.com.sleepycat.je.tree.BIN: int fullBinNEntries> = -1;

        this.<berkeley.com.sleepycat.je.tree.BIN: int fullBinMaxEntries> = -1;

        this.<berkeley.com.sleepycat.je.tree.BIN: long lastDeltaVersion> = -1L;

        $r0 = <berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep EMPTY_VLSNS>;

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep vlsnCache> = $r0;

        $r1 = <berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep EMPTY_LAST_LOGGED_SIZES>;

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep lastLoggedSizes> = $r1;

        $r2 = <berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep EMPTY_OFFHEAP_LN_IDS>;

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep offHeapLNIds> = $r2;

        this.<berkeley.com.sleepycat.je.tree.BIN: int offHeapLruId> = -1;

        $r3 = <berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep EMPTY_EXPIRATION>;

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep expirationValues> = $r3;

        this.<berkeley.com.sleepycat.je.tree.BIN: int expirationBase> = -1;

        return;
    }

    boolean isAlwaysLatchedExclusively()
    {
        berkeley.com.sleepycat.je.tree.BIN this;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        return 1;
    }

    public boolean compress(boolean, berkeley.com.sleepycat.je.cleaner.LocalUtilizationTracker)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        boolean compressDirtySlots, expired, deleted, $z0, $z1, setNewIdKey#20, anyLocked#22, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        berkeley.com.sleepycat.je.cleaner.LocalUtilizationTracker localTracker;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db, $r0, $r16;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl, $r1;
        berkeley.com.sleepycat.je.txn.LockManager lockManager;
        long lsn;
        berkeley.com.sleepycat.je.tree.LN ln;
        int configuredCapacity, $i0, i#24, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r2, $r3;
        berkeley.com.sleepycat.je.txn.TxnManager $r4;
        byte $b3;
        java.lang.Long $r5;
        berkeley.com.sleepycat.je.tree.INKeyRep $r6;
        byte[] $r7, $r8, $r14;
        java.util.Comparator $r9;
        berkeley.com.sleepycat.je.tree.Node $r10;
        berkeley.com.sleepycat.je.log.LogEntryType $r11, $r13;
        berkeley.com.sleepycat.je.log.LogManager $r12;
        berkeley.com.sleepycat.je.CacheMode $r15;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        compressDirtySlots := @parameter0: boolean;

        localTracker := @parameter1: berkeley.com.sleepycat.je.cleaner.LocalUtilizationTracker;

        $r0 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $z0 = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean isValid()>();

        if $z0 != 0 goto label01;

        return 1;

     label01:
        $i0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int nCursors()>();

        if $i0 <= 0 goto label02;

        $r2 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState()>();

        throw $r2;

     label02:
        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        if $z1 == 0 goto label03;

        $r3 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState()>();

        throw $r3;

     label03:
        db = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        envImpl = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r4 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.txn.TxnManager getTxnManager()>();

        lockManager = virtualinvoke $r4.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.txn.LockManager getLockManager()>();

        setNewIdKey#20 = 0;

        anyLocked#22 = 0;

        i#24 = 0;

     label04:
        $i1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getNEntries()>();

        if i#24 >= $i1 goto label13;

        if compressDirtySlots != 0 goto label05;

        $z2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isDirty(int)>(i#24);

        if $z2 == 0 goto label05;

        goto label12;

     label05:
        $i2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getExpiration(int)>(i#24);

        $z3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isExpirationInHours()>();

        expired = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean isExpired(int,boolean)>($i2, $z3);

        deleted = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isDeleted(int)>(i#24);

        if deleted != 0 goto label06;

        if expired != 0 goto label06;

        goto label12;

     label06:
        lsn = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: long getLsn(int)>(i#24);

        $b3 = lsn cmp -1L;

        if $b3 == 0 goto label07;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(lsn);

        $z4 = virtualinvoke lockManager.<berkeley.com.sleepycat.je.txn.LockManager: boolean isLockUncontended(java.lang.Long)>($r5);

        if $z4 != 0 goto label07;

        anyLocked#22 = 1;

        goto label12;

     label07:
        $r6 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $r7 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: byte[] getIdentifierKey()>();

        $r8 = this.<berkeley.com.sleepycat.je.tree.BIN: byte[] keyPrefix>;

        $z5 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean haveEmbeddedData(int)>(i#24);

        $r9 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: java.util.Comparator getKeyComparator()>();

        $i4 = virtualinvoke $r6.<berkeley.com.sleepycat.je.tree.INKeyRep: int compareKeys(byte[],byte[],int,boolean,java.util.Comparator)>($r7, $r8, i#24, $z5, $r9);

        if $i4 != 0 goto label08;

        setNewIdKey#20 = 1;

     label08:
        if expired != 0 goto label11;

        $z6 = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isDeferredWriteMode()>();

        if $z6 == 0 goto label11;

        $r10 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.Node getTarget(int)>(i#24);

        ln = (berkeley.com.sleepycat.je.tree.LN) $r10;

        if ln == null goto label11;

        $z7 = virtualinvoke ln.<berkeley.com.sleepycat.je.tree.LN: boolean isDirty()>();

        if $z7 == 0 goto label11;

        $z8 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: boolean isTransient(long)>(lsn);

        if $z8 != 0 goto label11;

        $z9 = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isTemporary()>();

        if $z9 == 0 goto label10;

        goto label09;

     label09:
        $r12 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.log.LogManager getLogManager()>();

        $r13 = virtualinvoke ln.<berkeley.com.sleepycat.je.tree.LN: berkeley.com.sleepycat.je.log.LogEntryType getGenericLogType()>();

        $i6 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getLastLoggedSize(int)>(i#24);

        virtualinvoke $r12.<berkeley.com.sleepycat.je.log.LogManager: void countObsoleteNode(long,berkeley.com.sleepycat.je.log.LogEntryType,int,berkeley.com.sleepycat.je.dbi.DatabaseImpl,boolean)>(lsn, $r13, $i6, db, 1);

        goto label11;

     label10:
        specialinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void logDirtyLN(int,berkeley.com.sleepycat.je.tree.LN,boolean)>(i#24, ln, 1);

     label11:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void deleteEntry(int,boolean,boolean)>(i#24, 0, 1);

        i#24 = i#24 + -1;

     label12:
        i#24 = i#24 + 1;

        goto label04;

     label13:
        $i7 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getNEntries()>();

        if $i7 == 0 goto label14;

        if setNewIdKey#20 == 0 goto label14;

        $r14 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: byte[] getKey(int)>(0);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void setIdentifierKey(byte[],boolean)>($r14, 0);

     label14:
        $i8 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getNEntries()>();

        if $i8 != 0 goto label15;

        $r15 = <berkeley.com.sleepycat.je.CacheMode: berkeley.com.sleepycat.je.CacheMode MAKE_COLD>;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void updateLRU(berkeley.com.sleepycat.je.CacheMode)>($r15);

     label15:
        $r16 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        configuredCapacity = virtualinvoke $r16.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: int getNodeMaxTreeEntries()>();

        $i9 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getMaxEntries()>();

        if $i9 <= configuredCapacity goto label16;

        $i10 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getNEntries()>();

        if $i10 >= configuredCapacity goto label16;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void resize(int)>(configuredCapacity);

     label16:
        if anyLocked#22 != 0 goto label17;

        $z10 = 1;

        goto label18;

     label17:
        $z10 = 0;

     label18:
        return $z10;
    }

    public boolean isDeleted(int)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int idx;
        boolean $z0, $z1, $z2;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        idx := @parameter0: int;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isEntryKnownDeleted(int)>(idx);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isEntryPendingDeleted(int)>(idx);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private void logDirtyLN(int, berkeley.com.sleepycat.je.tree.LN, boolean) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int idx, $i0, $i1, $i4;
        berkeley.com.sleepycat.je.tree.LN ln;
        boolean allowEviction, force, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        long currLsn, $l2, $l3, $l5;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl dbImpl, $r1, $r4;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        berkeley.com.sleepycat.je.log.ReplicationContext $r0;
        berkeley.com.sleepycat.je.log.LogItem logItem;
        java.lang.AssertionError $r2;
        byte[] $r3;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        idx := @parameter0: int;

        ln := @parameter1: berkeley.com.sleepycat.je.tree.LN;

        allowEviction := @parameter2: boolean;

        currLsn = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: long getLsn(int)>(idx);

        $r1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        $z0 = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isDeferredWriteMode()>();

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: boolean isTransientOrNull(long)>(currLsn);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        force = $z2;

        if force != 0 goto label3;

        $z3 = virtualinvoke ln.<berkeley.com.sleepycat.je.tree.LN: boolean isDirty()>();

        if $z3 == 0 goto label6;

     label3:
        dbImpl = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        envImpl = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $z4 = <berkeley.com.sleepycat.je.tree.BIN: boolean $assertionsDisabled>;

        if $z4 != 0 goto label4;

        $z5 = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isDeferredWriteMode()>();

        if $z5 != 0 goto label4;

        $z6 = ln instanceof berkeley.com.sleepycat.je.tree.MapLN;

        if $z6 != 0 goto label4;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label4:
        $z7 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isEmbeddedLN(int)>(idx);

        $r3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: byte[] getKey(int)>(idx);

        $i0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getExpiration(int)>(idx);

        $z8 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isExpirationInHours()>();

        $z9 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isEmbeddedLN(int)>(idx);

        $i1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getLastLoggedSize(int)>(idx);

        $r0 = <berkeley.com.sleepycat.je.log.ReplicationContext: berkeley.com.sleepycat.je.log.ReplicationContext NO_REPLICATE>;

        logItem = virtualinvoke ln.<berkeley.com.sleepycat.je.tree.LN: berkeley.com.sleepycat.je.log.LogItem log(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.dbi.DatabaseImpl,berkeley.com.sleepycat.je.txn.Locker,berkeley.com.sleepycat.je.txn.WriteLockInfo,boolean,byte[],int,boolean,boolean,long,int,boolean,boolean,berkeley.com.sleepycat.je.log.ReplicationContext)>(envImpl, dbImpl, null, null, $z7, $r3, $i0, $z8, $z9, currLsn, $i1, 0, 1, $r0);

        $l2 = logItem.<berkeley.com.sleepycat.je.log.LogItem: long lsn>;

        $l3 = virtualinvoke ln.<berkeley.com.sleepycat.je.tree.LN: long getVLSNSequence()>();

        $i4 = logItem.<berkeley.com.sleepycat.je.log.LogItem: int size>;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void updateEntry(int,long,long,int)>(idx, $l2, $l3, $i4);

        $l5 = logItem.<berkeley.com.sleepycat.je.log.LogItem: long lsn>;

        staticinvoke <berkeley.com.sleepycat.je.dbi.CursorImpl: void lockAfterLsnChange(berkeley.com.sleepycat.je.dbi.DatabaseImpl,long,long,berkeley.com.sleepycat.je.txn.Locker)>(dbImpl, currLsn, $l5, null);

        if allowEviction == 0 goto label6;

        $r4 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $z10 = virtualinvoke $r4.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isLNImmediatelyObsolete()>();

        if $z10 != 0 goto label5;

        $z11 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isEmbeddedLN(int)>(idx);

        if $z11 == 0 goto label6;

     label5:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void evictLN(int)>(idx);

     label6:
        return;
    }

    private void resize(int)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int newCapacity, $i0, $i1;
        boolean $z0;
        java.lang.AssertionError $r0;
        byte[] $r1, $r2, $r3, $r7, $r8, $r9;
        long[] $r4, $r5, $r6;
        berkeley.com.sleepycat.je.tree.INKeyRep $r10, $r12;
        java.lang.Object $r11, $r14;
        berkeley.com.sleepycat.je.tree.INTargetRep $r13, $r15;
        berkeley.com.sleepycat.je.tree.INLongRep $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23;
        long $l2, $l3;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        newCapacity := @parameter0: int;

        $z0 = <berkeley.com.sleepycat.je.tree.BIN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getNEntries()>();

        if newCapacity >= $i0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void updateRepCacheStats(boolean)>(0);

        $r1 = this.<berkeley.com.sleepycat.je.tree.BIN: byte[] entryLsnByteArray>;

        if $r1 == null goto label2;

        $r2 = this.<berkeley.com.sleepycat.je.tree.BIN: byte[] entryLsnByteArray>;

        $i1 = newCapacity * 4;

        $r3 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>($r2, 0, $i1);

        this.<berkeley.com.sleepycat.je.tree.BIN: byte[] entryLsnByteArray> = $r3;

     label2:
        $r4 = this.<berkeley.com.sleepycat.je.tree.BIN: long[] entryLsnLongArray>;

        if $r4 == null goto label3;

        $r5 = this.<berkeley.com.sleepycat.je.tree.BIN: long[] entryLsnLongArray>;

        $r6 = staticinvoke <java.util.Arrays: long[] copyOfRange(long[],int,int)>($r5, 0, newCapacity);

        this.<berkeley.com.sleepycat.je.tree.BIN: long[] entryLsnLongArray> = $r6;

     label3:
        $r7 = this.<berkeley.com.sleepycat.je.tree.BIN: byte[] entryStates>;

        if $r7 == null goto label4;

        $r8 = this.<berkeley.com.sleepycat.je.tree.BIN: byte[] entryStates>;

        $r9 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>($r8, 0, newCapacity);

        this.<berkeley.com.sleepycat.je.tree.BIN: byte[] entryStates> = $r9;

     label4:
        $r10 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $r11 = virtualinvoke $r10.<berkeley.com.sleepycat.je.tree.INKeyRep: java.lang.Object resize(int)>(newCapacity);

        $r12 = (berkeley.com.sleepycat.je.tree.INKeyRep) $r11;

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys> = $r12;

        $r13 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets>;

        $r14 = virtualinvoke $r13.<berkeley.com.sleepycat.je.tree.INTargetRep: java.lang.Object resize(int)>(newCapacity);

        $r15 = (berkeley.com.sleepycat.je.tree.INTargetRep) $r14;

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets> = $r15;

        $r16 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep lastLoggedSizes>;

        $r17 = virtualinvoke $r16.<berkeley.com.sleepycat.je.tree.INLongRep: berkeley.com.sleepycat.je.tree.INLongRep resize(int)>(newCapacity);

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep lastLoggedSizes> = $r17;

        $r18 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep expirationValues>;

        $r19 = virtualinvoke $r18.<berkeley.com.sleepycat.je.tree.INLongRep: berkeley.com.sleepycat.je.tree.INLongRep resize(int)>(newCapacity);

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep expirationValues> = $r19;

        $r20 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep offHeapLNIds>;

        $r21 = virtualinvoke $r20.<berkeley.com.sleepycat.je.tree.INLongRep: berkeley.com.sleepycat.je.tree.INLongRep resize(int)>(newCapacity);

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep offHeapLNIds> = $r21;

        $r22 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep vlsnCache>;

        $r23 = virtualinvoke $r22.<berkeley.com.sleepycat.je.tree.INLongRep: berkeley.com.sleepycat.je.tree.INLongRep resize(int)>(newCapacity);

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep vlsnCache> = $r23;

        $l2 = this.<berkeley.com.sleepycat.je.tree.BIN: long inMemorySize>;

        $l3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: long computeMemorySize()>();

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void updateMemorySize(long,long)>($l2, $l3);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void updateRepCacheStats(boolean)>(1);

        return;
    }

    public long computeMemorySize()
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        long size#3, $l0, $l1, $l2, $l3, $l5;
        berkeley.com.sleepycat.je.tree.INLongRep $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        byte[] $r8, $r9;
        int $i4;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        size#3 = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: long computeMemorySize()>();

        $r0 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep vlsnCache>;

        if $r0 == null goto label1;

        $r1 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep vlsnCache>;

        $l0 = virtualinvoke $r1.<berkeley.com.sleepycat.je.tree.INLongRep: long getMemorySize()>();

        size#3 = size#3 + $l0;

     label1:
        $r2 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep lastLoggedSizes>;

        if $r2 == null goto label2;

        $r3 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep lastLoggedSizes>;

        $l1 = virtualinvoke $r3.<berkeley.com.sleepycat.je.tree.INLongRep: long getMemorySize()>();

        size#3 = size#3 + $l1;

     label2:
        $r4 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep expirationValues>;

        if $r4 == null goto label3;

        $r5 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep expirationValues>;

        $l2 = virtualinvoke $r5.<berkeley.com.sleepycat.je.tree.INLongRep: long getMemorySize()>();

        size#3 = size#3 + $l2;

     label3:
        $r6 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep offHeapLNIds>;

        if $r6 == null goto label4;

        $r7 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep offHeapLNIds>;

        $l3 = virtualinvoke $r7.<berkeley.com.sleepycat.je.tree.INLongRep: long getMemorySize()>();

        size#3 = size#3 + $l3;

     label4:
        $r8 = this.<berkeley.com.sleepycat.je.tree.BIN: byte[] bloomFilter>;

        if $r8 == null goto label5;

        $r9 = this.<berkeley.com.sleepycat.je.tree.BIN: byte[] bloomFilter>;

        $i4 = staticinvoke <berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter: int getMemorySize(byte[])>($r9);

        $l5 = (long) $i4;

        size#3 = size#3 + $l5;

     label5:
        return size#3;
    }

    protected long getFixedMemoryOverhead()
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int $i0;
        long $l1;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        $i0 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: int BIN_FIXED_OVERHEAD>;

        $l1 = (long) $i0;

        return $l1;
    }

    protected long printMemorySize()
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        long inTotal, vlsnCacheOverhead, logSizesOverhead, expirationOverhead, offHeapLNIdOverhead, binTotal, $l0, $l1;
        berkeley.com.sleepycat.je.tree.INLongRep $r0, $r1, $r2, $r3;
        java.io.PrintStream $r4;
        java.lang.Object[] $r5;
        java.lang.Long $r6, $r7, $r8, $r9, $r10;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        inTotal = specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: long printMemorySize()>();

        $r0 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep vlsnCache>;

        vlsnCacheOverhead = virtualinvoke $r0.<berkeley.com.sleepycat.je.tree.INLongRep: long getMemorySize()>();

        $r1 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep lastLoggedSizes>;

        logSizesOverhead = virtualinvoke $r1.<berkeley.com.sleepycat.je.tree.INLongRep: long getMemorySize()>();

        $r2 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep expirationValues>;

        expirationOverhead = virtualinvoke $r2.<berkeley.com.sleepycat.je.tree.INLongRep: long getMemorySize()>();

        $r3 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep offHeapLNIds>;

        offHeapLNIdOverhead = virtualinvoke $r3.<berkeley.com.sleepycat.je.tree.INLongRep: long getMemorySize()>();

        $l0 = inTotal + vlsnCacheOverhead;

        $l1 = $l0 + logSizesOverhead;

        binTotal = $l1 + offHeapLNIdOverhead;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r5 = newarray (java.lang.Object)[5];

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(binTotal);

        $r5[0] = $r6;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(vlsnCacheOverhead);

        $r5[1] = $r7;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(logSizesOverhead);

        $r5[2] = $r8;

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(expirationOverhead);

        $r5[3] = $r9;

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(offHeapLNIdOverhead);

        $r5[4] = $r10;

        virtualinvoke $r4.<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>("BIN: %d vlsns: %d logSizes: %d expiration: %d offHeapLNIds: %d %n", $r5);

        return binTotal;
    }

    public java.lang.String beginTag()
    {
        berkeley.com.sleepycat.je.tree.BIN this;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        return "<bin>";
    }

    public java.lang.String endTag()
    {
        berkeley.com.sleepycat.je.tree.BIN this;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        return "</bin>";
    }

    public int getLastLoggedSizeUnconditional(int)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int idx, $i1;
        berkeley.com.sleepycat.je.tree.INLongRep $r0;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        idx := @parameter0: int;

        $r0 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep lastLoggedSizes>;

        $l0 = virtualinvoke $r0.<berkeley.com.sleepycat.je.tree.INLongRep: long get(int)>(idx);

        $i1 = (int) $l0;

        return $i1;
    }

    boolean validateSubtreeBeforeDelete(int)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int index;
        boolean $z0, $z1;
        java.lang.AssertionError $r0;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        index := @parameter0: int;

        $z0 = <berkeley.com.sleepycat.je.tree.BIN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        if $z1 == 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        return 1;
    }

    void setTarget(int, berkeley.com.sleepycat.je.tree.Node)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int idx;
        berkeley.com.sleepycat.je.tree.Node target, oldTarget;
        boolean $z0;
        berkeley.com.sleepycat.je.tree.LN $r0;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        idx := @parameter0: int;

        target := @parameter1: berkeley.com.sleepycat.je.tree.Node;

        if target != null goto label1;

        oldTarget = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.Node getTarget(int)>(idx);

        $z0 = oldTarget instanceof berkeley.com.sleepycat.je.tree.LN;

        if $z0 == 0 goto label1;

        $r0 = (berkeley.com.sleepycat.je.tree.LN) oldTarget;

        $l0 = virtualinvoke $r0.<berkeley.com.sleepycat.je.tree.LN: long getVLSNSequence()>();

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void setCachedVLSN(int,long)>(idx, $l0);

     label1:
        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void setTarget(int,berkeley.com.sleepycat.je.tree.Node)>(idx, target);

        return;
    }

    void copyEntries(int, int, int)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int 'from', 'to', n;
        berkeley.com.sleepycat.je.tree.INLongRep $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        'from' := @parameter0: int;

        'to' := @parameter1: int;

        n := @parameter2: int;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void copyEntries(int,int,int)>('from', 'to', n);

        $r0 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep vlsnCache>;

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.tree.INLongRep: berkeley.com.sleepycat.je.tree.INLongRep copy(int,int,int,berkeley.com.sleepycat.je.tree.IN)>('from', 'to', n, this);

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep vlsnCache> = $r1;

        $r2 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep lastLoggedSizes>;

        $r3 = virtualinvoke $r2.<berkeley.com.sleepycat.je.tree.INLongRep: berkeley.com.sleepycat.je.tree.INLongRep copy(int,int,int,berkeley.com.sleepycat.je.tree.IN)>('from', 'to', n, this);

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep lastLoggedSizes> = $r3;

        $r4 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep expirationValues>;

        $r5 = virtualinvoke $r4.<berkeley.com.sleepycat.je.tree.INLongRep: berkeley.com.sleepycat.je.tree.INLongRep copy(int,int,int,berkeley.com.sleepycat.je.tree.IN)>('from', 'to', n, this);

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep expirationValues> = $r5;

        $r6 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep offHeapLNIds>;

        $r7 = virtualinvoke $r6.<berkeley.com.sleepycat.je.tree.INLongRep: berkeley.com.sleepycat.je.tree.INLongRep copy(int,int,int,berkeley.com.sleepycat.je.tree.IN)>('from', 'to', n, this);

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep offHeapLNIds> = $r7;

        return;
    }

    void clearEntry(int)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int idx;
        berkeley.com.sleepycat.je.tree.INLongRep $r0, $r1;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        idx := @parameter0: int;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void clearEntry(int)>(idx);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void setCachedVLSNUnconditional(int,long)>(idx, -1L);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void setLastLoggedSizeUnconditional(int,int)>(idx, 0);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void setExpiration(int,int,boolean)>(idx, 0, 0);

        $r0 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep offHeapLNIds>;

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.tree.INLongRep: berkeley.com.sleepycat.je.tree.INLongRep set(int,long,berkeley.com.sleepycat.je.tree.IN)>(idx, 0L, this);

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep offHeapLNIds> = $r1;

        return;
    }

    public void setExpiration(int, int, boolean)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int idx, offset, adjustment, offset, value#1, $i0, $i1, $i2, $i3, i#33, $i4, $i6, $i7, $i8, $i9, $i10, i#69, $i11, $i13, $i14, $i15, $i16;
        boolean hours, $z0, $z1;
        berkeley.com.sleepycat.je.tree.INLongRep $r0, $r1, $r3, $r4;
        long $l5, $l12;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        idx := @parameter0: int;

        value#1 := @parameter1: int;

        hours := @parameter2: boolean;

        if value#1 != 0 goto label01;

        $r0 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep expirationValues>;

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.tree.INLongRep: berkeley.com.sleepycat.je.tree.INLongRep set(int,long,berkeley.com.sleepycat.je.tree.IN)>(idx, 0L, this);

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep expirationValues> = $r1;

        return;

     label01:
        $i0 = this.<berkeley.com.sleepycat.je.tree.BIN: int expirationBase>;

        if $i0 == -1 goto label02;

        $i1 = this.<berkeley.com.sleepycat.je.tree.BIN: int nEntries>;

        if $i1 != 1 goto label03;

     label02:
        this.<berkeley.com.sleepycat.je.tree.BIN: int expirationBase> = value#1;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void setExpirationOffset(int,int)>(idx, 1);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void setExpirationInHours(boolean)>(hours);

        return;

     label03:
        if hours == 0 goto label09;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isExpirationInHours()>();

        if $z0 != 0 goto label10;

        $i2 = this.<berkeley.com.sleepycat.je.tree.BIN: int expirationBase>;

        $i3 = $i2 * 24;

        this.<berkeley.com.sleepycat.je.tree.BIN: int expirationBase> = $i3;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void setExpirationInHours(boolean)>(1);

        i#33 = 0;

     label04:
        $i4 = this.<berkeley.com.sleepycat.je.tree.BIN: int nEntries>;

        if i#33 >= $i4 goto label08;

        if i#33 != idx goto label05;

        goto label07;

     label05:
        $r3 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep expirationValues>;

        $l5 = virtualinvoke $r3.<berkeley.com.sleepycat.je.tree.INLongRep: long get(int)>(i#33);

        offset = (int) $l5;

        if offset != 0 goto label06;

        goto label07;

     label06:
        $i6 = offset - 1;

        $i7 = $i6 * 24;

        $i8 = $i7 + 1;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void setExpirationOffset(int,int)>(i#33, $i8);

     label07:
        i#33 = i#33 + 1;

        goto label04;

     label08:
        goto label10;

     label09:
        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isExpirationInHours()>();

        if $z1 == 0 goto label10;

        value#1 = value#1 * 24;

     label10:
        $i9 = this.<berkeley.com.sleepycat.je.tree.BIN: int expirationBase>;

        if value#1 >= $i9 goto label15;

        $i10 = this.<berkeley.com.sleepycat.je.tree.BIN: int expirationBase>;

        adjustment = $i10 - value#1;

        this.<berkeley.com.sleepycat.je.tree.BIN: int expirationBase> = value#1;

        i#69 = 0;

     label11:
        $i11 = this.<berkeley.com.sleepycat.je.tree.BIN: int nEntries>;

        if i#69 >= $i11 goto label15;

        if i#69 != idx goto label12;

        goto label14;

     label12:
        $r4 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep expirationValues>;

        $l12 = virtualinvoke $r4.<berkeley.com.sleepycat.je.tree.INLongRep: long get(int)>(i#69);

        offset = (int) $l12;

        if offset != 0 goto label13;

        goto label14;

     label13:
        $i13 = offset + adjustment;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void setExpirationOffset(int,int)>(i#69, $i13);

     label14:
        i#69 = i#69 + 1;

        goto label11;

     label15:
        $i14 = this.<berkeley.com.sleepycat.je.tree.BIN: int expirationBase>;

        $i15 = value#1 - $i14;

        $i16 = $i15 + 1;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void setExpirationOffset(int,int)>(idx, $i16);

        return;
    }

    public void setCachedVLSN(int, long)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int idx;
        long vlsn;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        idx := @parameter0: int;

        vlsn := @parameter1: long;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isVLSNCachingEnabled()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void setCachedVLSNUnconditional(int,long)>(idx, vlsn);

        return;
    }

    public void evictLN(int)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int index;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        index := @parameter0: int;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void evictLN(int,boolean)>(index, 0);

        return;
    }

    public void evictLN(int, boolean) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int index;
        boolean ifFetchedCold;
        long removed;
        byte $b0;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        index := @parameter0: int;

        ifFetchedCold := @parameter1: boolean;

        removed = specialinvoke this.<berkeley.com.sleepycat.je.tree.BIN: long evictLNInternal(int,boolean)>(index, ifFetchedCold);

        $b0 = removed cmp 0L;

        if $b0 <= 0 goto label1;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void updateMemorySize(long,long)>(removed, 0L);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: long compactMemory()>();

     label1:
        return;
    }

    private long evictLNInternal(int, boolean) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int index;
        boolean ifFetchedCold, $z0, $z1, $z2, $z3, $z4;
        berkeley.com.sleepycat.je.tree.Node n;
        berkeley.com.sleepycat.je.tree.LN ln;
        berkeley.com.sleepycat.je.evictor.OffHeapCache ohCache;
        java.lang.AssertionError $r0;
        long $l0, $l1;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        index := @parameter0: int;

        ifFetchedCold := @parameter1: boolean;

        n = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.Node getTarget(int)>(index);

        $z0 = <berkeley.com.sleepycat.je.tree.BIN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if n == null goto label1;

        $z1 = n instanceof berkeley.com.sleepycat.je.tree.LN;

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        if n != null goto label2;

        return 0L;

     label2:
        ln = (berkeley.com.sleepycat.je.tree.LN) n;

        if ifFetchedCold == 0 goto label3;

        $z2 = virtualinvoke ln.<berkeley.com.sleepycat.je.tree.LN: boolean getFetchedCold()>();

        if $z2 != 0 goto label3;

        return 0L;

     label3:
        $l0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: long getLsn(int)>(index);

        $z3 = virtualinvoke ln.<berkeley.com.sleepycat.je.tree.LN: boolean isEvictable(long)>($l0);

        if $z3 != 0 goto label4;

        return -1L;

     label4:
        specialinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void logDirtyLN(int,berkeley.com.sleepycat.je.tree.LN,boolean)>(index, ln, 0);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void setTarget(int,berkeley.com.sleepycat.je.tree.Node)>(index, null);

        virtualinvoke ln.<berkeley.com.sleepycat.je.tree.LN: void releaseMemoryBudget()>();

        ohCache = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.evictor.OffHeapCache getOffHeapCache()>();

        $z4 = virtualinvoke ohCache.<berkeley.com.sleepycat.je.evictor.OffHeapCache: boolean isEnabled()>();

        if $z4 == 0 goto label5;

        virtualinvoke ohCache.<berkeley.com.sleepycat.je.evictor.OffHeapCache: boolean storeEvictedLN(berkeley.com.sleepycat.je.tree.BIN,int,berkeley.com.sleepycat.je.tree.LN)>(this, index, ln);

     label5:
        $l1 = virtualinvoke n.<berkeley.com.sleepycat.je.tree.Node: long getMemorySizeIncludedByParent()>();

        return $l1;
    }

    public long compactMemory()
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        long oldSize, $l1, $l2;
        berkeley.com.sleepycat.je.tree.INLongRep $r0, $r2, $r3, $r5;
        berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep $r1, $r4;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        oldSize = this.<berkeley.com.sleepycat.je.tree.BIN: long inMemorySize>;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: long compactMemory()>();

        $r0 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep offHeapLNIds>;

        $r1 = <berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep EMPTY_OFFHEAP_LN_IDS>;

        $r2 = virtualinvoke $r0.<berkeley.com.sleepycat.je.tree.INLongRep: berkeley.com.sleepycat.je.tree.INLongRep compact(berkeley.com.sleepycat.je.tree.IN,berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep)>(this, $r1);

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep offHeapLNIds> = $r2;

        $r3 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep expirationValues>;

        $r4 = <berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep EMPTY_EXPIRATION>;

        $r5 = virtualinvoke $r3.<berkeley.com.sleepycat.je.tree.INLongRep: berkeley.com.sleepycat.je.tree.INLongRep compact(berkeley.com.sleepycat.je.tree.IN,berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep)>(this, $r4);

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep expirationValues> = $r5;

        $l1 = this.<berkeley.com.sleepycat.je.tree.BIN: long inMemorySize>;

        $l2 = oldSize - $l1;

        return $l2;
    }

    public void setLastLoggedSize(int, int)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int idx, lastLoggedSize;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        idx := @parameter0: int;

        lastLoggedSize := @parameter1: int;

        if lastLoggedSize < 0 goto label1;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isLastLoggedSizeStored(int)>(idx);

        if $z0 != 0 goto label2;

     label1:
        return;

     label2:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void setLastLoggedSizeUnconditional(int,int)>(idx, lastLoggedSize);

        return;
    }

    public berkeley.com.sleepycat.je.log.LogEntryType getLogType()
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        berkeley.com.sleepycat.je.log.LogEntryType $r0;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        $r0 = <berkeley.com.sleepycat.je.log.LogEntryType: berkeley.com.sleepycat.je.log.LogEntryType LOG_BIN>;

        return $r0;
    }

    public boolean isExpired(int)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int idx, $i0;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0;
        boolean $z0, $z1;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        idx := @parameter0: int;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $i0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getExpiration(int)>(idx);

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isExpirationInHours()>();

        $z1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean isExpired(int,boolean)>($i0, $z0);

        return $z1;
    }

    public java.lang.String shortClassName()
    {
        berkeley.com.sleepycat.je.tree.BIN this;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        return "BIN";
    }

    public void <init>(berkeley.com.sleepycat.je.dbi.DatabaseImpl, byte[], int, int)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;
        byte[] identifierKey;
        int capacity, level;
        berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep $r0, $r1, $r2, $r3;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        db := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        identifierKey := @parameter1: byte[];

        capacity := @parameter2: int;

        level := @parameter3: int;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void <init>(berkeley.com.sleepycat.je.dbi.DatabaseImpl,byte[],int,int)>(db, identifierKey, capacity, level);

        this.<berkeley.com.sleepycat.je.tree.BIN: int fullBinNEntries> = -1;

        this.<berkeley.com.sleepycat.je.tree.BIN: int fullBinMaxEntries> = -1;

        this.<berkeley.com.sleepycat.je.tree.BIN: long lastDeltaVersion> = -1L;

        $r0 = <berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep EMPTY_VLSNS>;

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep vlsnCache> = $r0;

        $r1 = <berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep EMPTY_LAST_LOGGED_SIZES>;

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep lastLoggedSizes> = $r1;

        $r2 = <berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep EMPTY_OFFHEAP_LN_IDS>;

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep offHeapLNIds> = $r2;

        this.<berkeley.com.sleepycat.je.tree.BIN: int offHeapLruId> = -1;

        $r3 = <berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep EMPTY_EXPIRATION>;

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep expirationValues> = $r3;

        this.<berkeley.com.sleepycat.je.tree.BIN: int expirationBase> = -1;

        return;
    }

    public void clearLastLoggedSize(int)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int idx;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        idx := @parameter0: int;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void setLastLoggedSizeUnconditional(int,int)>(idx, 0);

        return;
    }

    void freeOffHeapLN(int)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int idx;
        berkeley.com.sleepycat.je.evictor.OffHeapCache $r0;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        idx := @parameter0: int;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.evictor.OffHeapCache getOffHeapCache()>();

        virtualinvoke $r0.<berkeley.com.sleepycat.je.evictor.OffHeapCache: int freeLN(berkeley.com.sleepycat.je.tree.BIN,int)>(this, idx);

        return;
    }

    public long getVLSN(int, boolean, berkeley.com.sleepycat.je.CacheMode)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int idx;
        boolean allowFetch, $z0, $z1, $z2, $z3;
        berkeley.com.sleepycat.je.CacheMode cacheMode;
        berkeley.com.sleepycat.je.evictor.OffHeapCache ohCache;
        berkeley.com.sleepycat.je.tree.Node $r0;
        berkeley.com.sleepycat.je.tree.LN ln#5, ln#36;
        long $l0, vlsn#12, $l1;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        idx := @parameter0: int;

        allowFetch := @parameter1: boolean;

        cacheMode := @parameter2: berkeley.com.sleepycat.je.CacheMode;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.Node getTarget(int)>(idx);

        ln#5 = (berkeley.com.sleepycat.je.tree.LN) $r0;

        if ln#5 == null goto label1;

        $l0 = virtualinvoke ln#5.<berkeley.com.sleepycat.je.tree.LN: long getVLSNSequence()>();

        return $l0;

     label1:
        vlsn#12 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: long getCachedVLSN(int)>(idx);

        $z0 = staticinvoke <berkeley.com.sleepycat.je.utilint.VLSN: boolean isNull(long)>(vlsn#12);

        if $z0 != 0 goto label2;

        return vlsn#12;

     label2:
        ohCache = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.evictor.OffHeapCache getOffHeapCache()>();

        $z1 = virtualinvoke ohCache.<berkeley.com.sleepycat.je.evictor.OffHeapCache: boolean isEnabled()>();

        if $z1 == 0 goto label3;

        vlsn#12 = virtualinvoke ohCache.<berkeley.com.sleepycat.je.evictor.OffHeapCache: long loadVLSN(berkeley.com.sleepycat.je.tree.BIN,int)>(this, idx);

        $z2 = staticinvoke <berkeley.com.sleepycat.je.utilint.VLSN: boolean isNull(long)>(vlsn#12);

        if $z2 != 0 goto label3;

        return vlsn#12;

     label3:
        goto label4;

     label4:
        return vlsn#12;
    }

    public boolean isProbablyExpired(int)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int idx, $i0, $i1;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0, $r1;
        boolean $z0, $z1;
        long $l2;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        idx := @parameter0: int;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $i0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getExpiration(int)>(idx);

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isExpirationInHours()>();

        $r1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $i1 = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: int getTtlClockTolerance()>();

        $l2 = (long) $i1;

        $z1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean expiresWithin(int,boolean,long)>($i0, $z0, $l2);

        return $z1;
    }

    public void mutateToFullBIN(boolean)
    {
        berkeley.com.sleepycat.je.tree.BIN this, fullBIN;
        boolean leaveFreeSlot, $z0;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r0;
        berkeley.com.sleepycat.je.evictor.Evictor $r1;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        leaveFreeSlot := @parameter0: boolean;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r0 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        fullBIN = specialinvoke this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.BIN fetchFullBIN(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>($r0);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void mutateToFullBIN(berkeley.com.sleepycat.je.tree.BIN,boolean)>(fullBIN, leaveFreeSlot);

        $r1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.evictor.Evictor getEvictor()>();

        virtualinvoke $r1.<berkeley.com.sleepycat.je.evictor.Evictor: void incFullBINMissStats()>();

        return;
    }

    void adjustCursorsForInsert(int)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int insertIndex, cIdx, $i0;
        java.util.Iterator l2;
        berkeley.com.sleepycat.je.dbi.CursorImpl cursor;
        boolean $z0, $z1, $z2;
        java.lang.AssertionError $r0;
        berkeley.com.sleepycat.je.utilint.TinyHashSet $r1, $r2;
        java.lang.Object $r3;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        insertIndex := @parameter0: int;

        $z0 = <berkeley.com.sleepycat.je.tree.BIN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isLatchExclusiveOwner()>();

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.utilint.TinyHashSet cursorSet>;

        if $r1 != null goto label2;

        return;

     label2:
        $r2 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.utilint.TinyHashSet cursorSet>;

        l2 = virtualinvoke $r2.<berkeley.com.sleepycat.je.utilint.TinyHashSet: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r3 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        cursor = (berkeley.com.sleepycat.je.dbi.CursorImpl) $r3;

        cIdx = virtualinvoke cursor.<berkeley.com.sleepycat.je.dbi.CursorImpl: int getIndex()>();

        if insertIndex > cIdx goto label4;

        $i0 = cIdx + 1;

        virtualinvoke cursor.<berkeley.com.sleepycat.je.dbi.CursorImpl: void setIndex(int)>($i0);

     label4:
        goto label3;

     label5:
        return;
    }

    private berkeley.com.sleepycat.je.tree.BIN fetchFullBIN(berkeley.com.sleepycat.je.dbi.DatabaseImpl)
    {
        berkeley.com.sleepycat.je.tree.BIN this, $r2;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        long lsn;
        berkeley.com.sleepycat.je.log.LogManager $r0;
        java.lang.Object $r1;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r3, e#11, $r6;
        java.lang.String $r4, $r8, $r9;
        java.lang.RuntimeException $r5, e#20;
        berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason $r7;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        dbImpl := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        envImpl = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        lsn = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: long getLastFullLsn()>();

     label1:
        $r0 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.log.LogManager getLogManager()>();

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.log.LogManager: java.lang.Object getEntryHandleFileNotFound(long)>(lsn);

        $r2 = (berkeley.com.sleepycat.je.tree.BIN) $r1;

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        e#11 = $r3;

        $r4 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: java.lang.String makeFetchErrorMsg(java.lang.String,long,int)>(null, lsn, -1);

        virtualinvoke e#11.<berkeley.com.sleepycat.je.EnvironmentFailureException: void addErrorMessage(java.lang.String)>($r4);

        throw e#11;

     label4:
        $r5 := @caughtexception;

        e#20 = $r5;

        $r6 = new berkeley.com.sleepycat.je.EnvironmentFailureException;

        $r7 = <berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason: berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason LOG_INTEGRITY>;

        $r8 = virtualinvoke e#20.<java.lang.RuntimeException: java.lang.String toString()>();

        $r9 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: java.lang.String makeFetchErrorMsg(java.lang.String,long,int)>($r8, lsn, -1);

        specialinvoke $r6.<berkeley.com.sleepycat.je.EnvironmentFailureException: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason,java.lang.String,java.lang.Throwable)>(envImpl, $r7, $r9, e#20);

        throw $r6;

        catch berkeley.com.sleepycat.je.EnvironmentFailureException from label1 to label2 with label3;
        catch java.lang.RuntimeException from label1 to label2 with label4;
    }

    public void mutateToFullBIN(berkeley.com.sleepycat.je.tree.BIN, boolean)
    {
        berkeley.com.sleepycat.je.tree.BIN this, fullBIN;
        boolean leaveFreeSlot, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.AssertionError $r0, $r1, $r15;
        byte[][] keys#14;
        int i#16, $i0, index#35, $i1, i#57, index#78, $i2, index#89, $i3;
        berkeley.com.sleepycat.je.utilint.TinyHashSet $r2, $r3, $r4, $r8, $r9;
        java.util.Iterator l5#26, l5#61;
        java.lang.Object $r5, $r10;
        berkeley.com.sleepycat.je.dbi.CursorImpl cursor#32, cursor#67;
        byte[] $r6, $r11, $r12;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r7;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r13, $r16, $r17;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r14;
        berkeley.com.sleepycat.je.dbi.INList $r18;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        fullBIN := @parameter0: berkeley.com.sleepycat.je.tree.BIN;

        leaveFreeSlot := @parameter1: boolean;

        $z0 = <berkeley.com.sleepycat.je.tree.BIN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isLatchExclusiveOwner()>();

        if $z1 != 0 goto label01;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label01:
        $z2 = <berkeley.com.sleepycat.je.tree.BIN: boolean $assertionsDisabled>;

        if $z2 != 0 goto label02;

        $z3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        if $z3 != 0 goto label02;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>(this);

        throw $r1;

     label02:
        keys#14 = (byte[][]) null;

        i#16 = 0;

        $r2 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.utilint.TinyHashSet cursorSet>;

        if $r2 == null goto label05;

        $r3 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.utilint.TinyHashSet cursorSet>;

        $i0 = virtualinvoke $r3.<berkeley.com.sleepycat.je.utilint.TinyHashSet: int size()>();

        keys#14 = newarray (byte[])[$i0];

        $r4 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.utilint.TinyHashSet cursorSet>;

        l5#26 = virtualinvoke $r4.<berkeley.com.sleepycat.je.utilint.TinyHashSet: java.util.Iterator iterator()>();

     label03:
        $z4 = interfaceinvoke l5#26.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label05;

        $r5 = interfaceinvoke l5#26.<java.util.Iterator: java.lang.Object next()>();

        cursor#32 = (berkeley.com.sleepycat.je.dbi.CursorImpl) $r5;

        index#35 = virtualinvoke cursor#32.<berkeley.com.sleepycat.je.dbi.CursorImpl: int getIndex()>();

        if index#35 < 0 goto label04;

        $i1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getNEntries()>();

        if index#35 >= $i1 goto label04;

        $r6 = virtualinvoke cursor#32.<berkeley.com.sleepycat.je.dbi.CursorImpl: byte[] getCurrentKey(boolean)>(1);

        keys#14[i#16] = $r6;

     label04:
        i#16 = i#16 + 1;

        goto label03;

     label05:
        $r7 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void reconstituteBIN(berkeley.com.sleepycat.je.dbi.DatabaseImpl,berkeley.com.sleepycat.je.tree.BIN,boolean)>($r7, fullBIN, leaveFreeSlot);

        specialinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void resetContent(berkeley.com.sleepycat.je.tree.BIN)>(fullBIN);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void setBINDelta(boolean)>(0);

        $r8 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.utilint.TinyHashSet cursorSet>;

        if $r8 == null goto label11;

        i#57 = 0;

        $r9 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.utilint.TinyHashSet cursorSet>;

        l5#61 = virtualinvoke $r9.<berkeley.com.sleepycat.je.utilint.TinyHashSet: java.util.Iterator iterator()>();

     label06:
        $z5 = interfaceinvoke l5#61.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label11;

        $r10 = interfaceinvoke l5#61.<java.util.Iterator: java.lang.Object next()>();

        cursor#67 = (berkeley.com.sleepycat.je.dbi.CursorImpl) $r10;

        $r11 = keys#14[i#57];

        if $r11 == null goto label10;

        $r12 = keys#14[i#57];

        index#78 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int findEntry(byte[],boolean,boolean)>($r12, 1, 0);

        $i2 = index#78 & 65536;

        if $i2 != 0 goto label07;

        $r13 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r14 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String)>($r13, "Failed to reposition cursor during mutation of a BIN delta to a full BIN");

        throw $r14;

     label07:
        index#89 = index#78 & -65537;

        $z6 = <berkeley.com.sleepycat.je.tree.BIN: boolean $assertionsDisabled>;

        if $z6 != 0 goto label09;

        if index#89 < 0 goto label08;

        $i3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getNEntries()>();

        if index#89 < $i3 goto label09;

     label08:
        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label09:
        virtualinvoke cursor#67.<berkeley.com.sleepycat.je.dbi.CursorImpl: void setIndex(int)>(index#89);

     label10:
        i#57 = i#57 + 1;

        goto label06;

     label11:
        $r16 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r16.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void lazyCompress(berkeley.com.sleepycat.je.tree.IN)>(this);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: long compactMemory()>();

        $z7 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean getInListResident()>();

        if $z7 == 0 goto label12;

        $r17 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r18 = virtualinvoke $r17.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.INList getInMemoryINs()>();

        virtualinvoke $r18.<berkeley.com.sleepycat.je.dbi.INList: void updateBINDeltaStat(int)>(-1);

     label12:
        return;
    }

    public void reconstituteBIN(berkeley.com.sleepycat.je.dbi.DatabaseImpl, berkeley.com.sleepycat.je.tree.BIN, boolean)
    {
        berkeley.com.sleepycat.je.tree.BIN this, fullBIN;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl dbImpl, $r1;
        boolean leaveFreeSlot, $z0, $z1, $z2, $z3, $z5, $z6, $z7;
        int foundIndex, maxEntries, $i0, nInsertions#31, i#33, $i3, $i4, $i5, $i6, i#61, $i7, $i10, $i13;
        java.lang.Throwable l7, $r11;
        berkeley.com.sleepycat.je.CacheMode $r0;
        java.lang.AssertionError $r2, $r3, $r7;
        long $l1, $l8, $l11, $l12;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r4, $r6;
        byte $b2, $b9;
        byte[] $r5, $r8, $r9;
        berkeley.com.sleepycat.je.tree.Node $r10;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        dbImpl := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        fullBIN := @parameter1: berkeley.com.sleepycat.je.tree.BIN;

        leaveFreeSlot := @parameter2: boolean;

        virtualinvoke fullBIN.<berkeley.com.sleepycat.je.tree.BIN: void setDatabase(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(dbImpl);

        $r0 = <berkeley.com.sleepycat.je.CacheMode: berkeley.com.sleepycat.je.CacheMode UNCHANGED>;

        virtualinvoke fullBIN.<berkeley.com.sleepycat.je.tree.BIN: void latch(berkeley.com.sleepycat.je.CacheMode)>($r0);

     label01:
        $r1 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        if $r1 != null goto label02;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void setDatabase(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(dbImpl);

     label02:
        $z0 = <berkeley.com.sleepycat.je.tree.BIN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label03;

        $i0 = virtualinvoke fullBIN.<berkeley.com.sleepycat.je.tree.BIN: int getOffHeapLruId()>();

        if $i0 < 0 goto label03;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label03:
        $z1 = <berkeley.com.sleepycat.je.tree.BIN: boolean $assertionsDisabled>;

        if $z1 != 0 goto label04;

        $z2 = virtualinvoke fullBIN.<berkeley.com.sleepycat.je.tree.BIN: boolean hasOffHeapLNs()>();

        if $z2 == 0 goto label04;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label04:
        $l1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: long getLastFullLsn()>();

        virtualinvoke fullBIN.<berkeley.com.sleepycat.je.tree.BIN: void setLastFullLsn(long)>($l1);

        $r4 = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $z3 = virtualinvoke $r4.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean isInInit()>();

        if $z3 != 0 goto label05;

        virtualinvoke fullBIN.<berkeley.com.sleepycat.je.tree.BIN: boolean compress(boolean,berkeley.com.sleepycat.je.cleaner.LocalUtilizationTracker)>(0, null);

     label05:
        if leaveFreeSlot == 0 goto label06;

        $b2 = 1;

        goto label07;

     label06:
        $b2 = 0;

     label07:
        nInsertions#31 = $b2;

        i#33 = 0;

     label08:
        $i3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getNEntries()>();

        if i#33 >= $i3 goto label11;

        $r5 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: byte[] getKey(int)>(i#33);

        foundIndex = virtualinvoke fullBIN.<berkeley.com.sleepycat.je.tree.BIN: int findEntry(byte[],boolean,boolean)>($r5, 1, 0);

        if foundIndex < 0 goto label09;

        $i4 = foundIndex & 65536;

        if $i4 != 0 goto label10;

     label09:
        nInsertions#31 = nInsertions#31 + 1;

     label10:
        i#33 = i#33 + 1;

        goto label08;

     label11:
        $i5 = virtualinvoke fullBIN.<berkeley.com.sleepycat.je.tree.BIN: int getNEntries()>();

        maxEntries = nInsertions#31 + $i5;

        $i6 = virtualinvoke fullBIN.<berkeley.com.sleepycat.je.tree.BIN: int getMaxEntries()>();

        if maxEntries <= $i6 goto label12;

        specialinvoke fullBIN.<berkeley.com.sleepycat.je.tree.BIN: void resize(int)>(maxEntries);

        $r6 = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r6.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void addToCompressorQueue(berkeley.com.sleepycat.je.tree.BIN)>(fullBIN);

     label12:
        i#61 = 0;

     label13:
        $i7 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getNEntries()>();

        if i#61 >= $i7 goto label15;

        $z5 = <berkeley.com.sleepycat.je.tree.BIN: boolean $assertionsDisabled>;

        if $z5 != 0 goto label14;

        $z6 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isDirty(int)>(i#61);

        if $z6 != 0 goto label14;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>(this);

        throw $r7;

     label14:
        $r8 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: byte[] getKey(int)>(i#61);

        $r9 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: byte[] getData(int)>(i#61);

        $l8 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: long getLsn(int)>(i#61);

        $b9 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: byte getState(int)>(i#61);

        $i10 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getLastLoggedSize(int)>(i#61);

        $l11 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: long getOffHeapLNId(int)>(i#61);

        $l12 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: long getCachedVLSN(int)>(i#61);

        $r10 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.Node getTarget(int)>(i#61);

        $i13 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getExpiration(int)>(i#61);

        $z7 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isExpirationInHours()>();

        virtualinvoke fullBIN.<berkeley.com.sleepycat.je.tree.BIN: void applyDelta(byte[],byte[],long,byte,int,long,long,berkeley.com.sleepycat.je.tree.Node,int,boolean)>($r8, $r9, $l8, $b9, $i10, $l11, $l12, $r10, $i13, $z7);

        i#61 = i#61 + 1;

        goto label13;

     label15:
        virtualinvoke fullBIN.<berkeley.com.sleepycat.je.tree.BIN: void setDirty(boolean)>(0);

     label16:
        virtualinvoke fullBIN.<berkeley.com.sleepycat.je.tree.BIN: void releaseLatch()>();

        goto label20;

     label17:
        $r11 := @caughtexception;

     label18:
        l7 = $r11;

     label19:
        virtualinvoke fullBIN.<berkeley.com.sleepycat.je.tree.BIN: void releaseLatch()>();

        throw l7;

     label20:
        return;

        catch java.lang.Throwable from label01 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    private void resetContent(berkeley.com.sleepycat.je.tree.BIN)
    {
        berkeley.com.sleepycat.je.tree.BIN this, other;
        int $i0, $i2, $i3;
        long $l1, $l4, $l5;
        byte[] $r0, $r2, $r5;
        long[] $r1;
        berkeley.com.sleepycat.je.tree.INKeyRep $r3;
        berkeley.com.sleepycat.je.tree.INTargetRep $r4;
        berkeley.com.sleepycat.je.tree.INLongRep $r6, $r7, $r8, $r10;
        boolean $z0, $z1;
        java.lang.AssertionError $r9;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        other := @parameter0: berkeley.com.sleepycat.je.tree.BIN;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void updateRepCacheStats(boolean)>(0);

        $i0 = other.<berkeley.com.sleepycat.je.tree.BIN: int nEntries>;

        this.<berkeley.com.sleepycat.je.tree.BIN: int nEntries> = $i0;

        $l1 = other.<berkeley.com.sleepycat.je.tree.BIN: long baseFileNumber>;

        this.<berkeley.com.sleepycat.je.tree.BIN: long baseFileNumber> = $l1;

        $r0 = other.<berkeley.com.sleepycat.je.tree.BIN: byte[] entryLsnByteArray>;

        this.<berkeley.com.sleepycat.je.tree.BIN: byte[] entryLsnByteArray> = $r0;

        $r1 = other.<berkeley.com.sleepycat.je.tree.BIN: long[] entryLsnLongArray>;

        this.<berkeley.com.sleepycat.je.tree.BIN: long[] entryLsnLongArray> = $r1;

        $r2 = other.<berkeley.com.sleepycat.je.tree.BIN: byte[] keyPrefix>;

        this.<berkeley.com.sleepycat.je.tree.BIN: byte[] keyPrefix> = $r2;

        $r3 = other.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys> = $r3;

        $r4 = other.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets>;

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets> = $r4;

        $r5 = other.<berkeley.com.sleepycat.je.tree.BIN: byte[] entryStates>;

        this.<berkeley.com.sleepycat.je.tree.BIN: byte[] entryStates> = $r5;

        $r6 = other.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep lastLoggedSizes>;

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep lastLoggedSizes> = $r6;

        $r7 = other.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep expirationValues>;

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep expirationValues> = $r7;

        $i2 = other.<berkeley.com.sleepycat.je.tree.BIN: int expirationBase>;

        this.<berkeley.com.sleepycat.je.tree.BIN: int expirationBase> = $i2;

        $r8 = other.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep offHeapLNIds>;

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep offHeapLNIds> = $r8;

        $z0 = <berkeley.com.sleepycat.je.tree.BIN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getOffHeapLruId()>();

        if $i3 >= 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean hasOffHeapLNs()>();

        if $z1 == 0 goto label1;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label1:
        $r10 = other.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep vlsnCache>;

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep vlsnCache> = $r10;

        this.<berkeley.com.sleepycat.je.tree.BIN: byte[] bloomFilter> = null;

        $l4 = this.<berkeley.com.sleepycat.je.tree.BIN: long inMemorySize>;

        $l5 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: long computeMemorySize()>();

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void updateMemorySize(long,long)>($l4, $l5);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void updateRepCacheStats(boolean)>(1);

        return;
    }

    public int getOffHeapLruId()
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int $i0;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        $i0 = this.<berkeley.com.sleepycat.je.tree.BIN: int offHeapLruId>;

        return $i0;
    }

    void incFullBinNEntries()
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        boolean $z0, $z1;
        java.lang.AssertionError $r0;
        int $i0, $i1;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        $z0 = <berkeley.com.sleepycat.je.tree.BIN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $i0 = this.<berkeley.com.sleepycat.je.tree.BIN: int fullBinNEntries>;

        $i1 = $i0 + 1;

        this.<berkeley.com.sleepycat.je.tree.BIN: int fullBinNEntries> = $i1;

        return;
    }

    public boolean mayHaveKeyInFullBin(byte[])
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        byte[] key, $r1, $r2;
        boolean $z0, $z1, $z2;
        java.lang.AssertionError $r0;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        key := @parameter0: byte[];

        $z0 = <berkeley.com.sleepycat.je.tree.BIN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.tree.BIN: byte[] bloomFilter>;

        if $r1 != null goto label2;

        return 1;

     label2:
        $r2 = this.<berkeley.com.sleepycat.je.tree.BIN: byte[] bloomFilter>;

        $z2 = staticinvoke <berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter: boolean contains(byte[],byte[])>($r2, key);

        return $z2;
    }

    public void logDirtyChildren() throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        berkeley.com.sleepycat.je.tree.Node node;
        int i#2, $i0;
        berkeley.com.sleepycat.je.tree.LN $r0;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        i#2 = 0;

     label1:
        $i0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getNEntries()>();

        if i#2 >= $i0 goto label3;

        node = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.Node getTarget(int)>(i#2);

        if node == null goto label2;

        $r0 = (berkeley.com.sleepycat.je.tree.LN) node;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void logDirtyLN(int,berkeley.com.sleepycat.je.tree.LN,boolean)>(i#2, $r0, 1);

     label2:
        i#2 = i#2 + 1;

        goto label1;

     label3:
        return;
    }

    public void removeCursor(berkeley.com.sleepycat.je.dbi.CursorImpl)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        berkeley.com.sleepycat.je.dbi.CursorImpl cursor;
        boolean $z0, $z1;
        java.lang.AssertionError $r0;
        berkeley.com.sleepycat.je.utilint.TinyHashSet $r1, $r2, $r3;
        int $i0;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        cursor := @parameter0: berkeley.com.sleepycat.je.dbi.CursorImpl;

        $z0 = <berkeley.com.sleepycat.je.tree.BIN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isLatchExclusiveOwner()>();

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.utilint.TinyHashSet cursorSet>;

        if $r1 != null goto label2;

        return;

     label2:
        $r2 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.utilint.TinyHashSet cursorSet>;

        virtualinvoke $r2.<berkeley.com.sleepycat.je.utilint.TinyHashSet: boolean remove(java.lang.Object)>(cursor);

        $r3 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.utilint.TinyHashSet cursorSet>;

        $i0 = virtualinvoke $r3.<berkeley.com.sleepycat.je.utilint.TinyHashSet: int size()>();

        if $i0 != 0 goto label3;

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.utilint.TinyHashSet cursorSet> = null;

     label3:
        return;
    }

    public void queueSlotDeletion(int)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int idx;
        boolean $z0, $z1;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        idx := @parameter0: int;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isDirty(int)>(idx);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean shouldLogDelta()>();

        if $z1 == 0 goto label1;

        return;

     label1:
        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void addToCompressorQueue(berkeley.com.sleepycat.je.tree.BIN)>(this);

        return;
    }

    public java.util.Set getCursorSet()
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        berkeley.com.sleepycat.je.utilint.TinyHashSet $r0, $r2;
        java.util.Set $r1, $r3;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        $r0 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.utilint.TinyHashSet cursorSet>;

        if $r0 != null goto label1;

        $r1 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        return $r1;

     label1:
        $r2 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.utilint.TinyHashSet cursorSet>;

        $r3 = virtualinvoke $r2.<berkeley.com.sleepycat.je.utilint.TinyHashSet: java.util.Set copy()>();

        return $r3;
    }

    public void addCursor(berkeley.com.sleepycat.je.dbi.CursorImpl)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        berkeley.com.sleepycat.je.dbi.CursorImpl cursor;
        boolean $z0, $z1;
        java.lang.AssertionError $r0;
        berkeley.com.sleepycat.je.utilint.TinyHashSet $r1, $r2, $r3;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        cursor := @parameter0: berkeley.com.sleepycat.je.dbi.CursorImpl;

        $z0 = <berkeley.com.sleepycat.je.tree.BIN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isLatchExclusiveOwner()>();

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.utilint.TinyHashSet cursorSet>;

        if $r1 != null goto label2;

        $r2 = new berkeley.com.sleepycat.je.utilint.TinyHashSet;

        specialinvoke $r2.<berkeley.com.sleepycat.je.utilint.TinyHashSet: void <init>()>();

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.utilint.TinyHashSet cursorSet> = $r2;

     label2:
        $r3 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.utilint.TinyHashSet cursorSet>;

        virtualinvoke $r3.<berkeley.com.sleepycat.je.utilint.TinyHashSet: boolean add(java.lang.Object)>(cursor);

        return;
    }

    public boolean isDefunct(int)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int idx;
        boolean $z0, $z1, $z2;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        idx := @parameter0: int;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isDeleted(int)>(idx);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isExpired(int)>(idx);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public long partialEviction()
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        long oldMemSize, lnBytesAndStatus, $l0, $l2, $l3, $l4, $l6, $l7;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0;
        byte $b1, $b5;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        oldMemSize = this.<berkeley.com.sleepycat.je.tree.BIN: long inMemorySize>;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void lazyCompress(berkeley.com.sleepycat.je.tree.IN)>(this);

        $l0 = this.<berkeley.com.sleepycat.je.tree.BIN: long inMemorySize>;

        $b1 = oldMemSize cmp $l0;

        if $b1 <= 0 goto label1;

        $l2 = this.<berkeley.com.sleepycat.je.tree.BIN: long inMemorySize>;

        $l3 = oldMemSize - $l2;

        return $l3;

     label1:
        lnBytesAndStatus = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: long evictLNs()>();

        $l4 = lnBytesAndStatus & -4611686018427387905L;

        $b5 = $l4 cmp 0L;

        if $b5 == 0 goto label2;

        return lnBytesAndStatus;

     label2:
        $l6 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: long discardVLSNCache()>();

        $l7 = $l6 | lnBytesAndStatus;

        return $l7;
    }

    public long evictLNs() throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        long lnRemoved, totalRemoved#11, numLNsEvicted#13, $l4, $l5;
        boolean $z0, $z1, haveNonEvictableLN#15;
        java.lang.AssertionError $r0;
        int $i0, i#17, $i1;
        berkeley.com.sleepycat.je.tree.Node $r1;
        byte $b2, $b3;
        berkeley.com.sleepycat.je.evictor.Evictor $r2;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        $z0 = <berkeley.com.sleepycat.je.tree.BIN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isLatchExclusiveOwner()>();

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>(java.lang.Object)>("BIN must be latched before evicting LNs");

        throw $r0;

     label1:
        $i0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int nCursors()>();

        if $i0 <= 0 goto label2;

        return 4611686018427387904L;

     label2:
        totalRemoved#11 = 0L;

        numLNsEvicted#13 = 0L;

        haveNonEvictableLN#15 = 0;

        i#17 = 0;

     label3:
        $i1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getNEntries()>();

        if i#17 >= $i1 goto label7;

        $r1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.Node getTarget(int)>(i#17);

        if $r1 != null goto label4;

        goto label6;

     label4:
        lnRemoved = specialinvoke this.<berkeley.com.sleepycat.je.tree.BIN: long evictLNInternal(int,boolean)>(i#17, 0);

        $b2 = lnRemoved cmp 0L;

        if $b2 >= 0 goto label5;

        haveNonEvictableLN#15 = 1;

        goto label6;

     label5:
        totalRemoved#11 = totalRemoved#11 + lnRemoved;

        numLNsEvicted#13 = numLNsEvicted#13 + 1L;

     label6:
        i#17 = i#17 + 1;

        goto label3;

     label7:
        $b3 = totalRemoved#11 cmp 0L;

        if $b3 <= 0 goto label8;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void updateMemorySize(long,long)>(totalRemoved#11, 0L);

        $l4 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: long compactMemory()>();

        totalRemoved#11 = totalRemoved#11 + $l4;

     label8:
        $r2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.evictor.Evictor getEvictor()>();

        virtualinvoke $r2.<berkeley.com.sleepycat.je.evictor.Evictor: void incNumLNsEvicted(long)>(numLNsEvicted#13);

        if haveNonEvictableLN#15 == 0 goto label9;

        $l5 = totalRemoved#11 | 4611686018427387904L;

        return $l5;

     label9:
        return totalRemoved#11;
    }

    public long discardVLSNCache()
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        long vlsnBytes, $l1;
        int numEntries, i#9;
        berkeley.com.sleepycat.je.tree.INLongRep $r0;
        byte $b0;
        boolean $z0;
        berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep $r1;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        $r0 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep vlsnCache>;

        vlsnBytes = virtualinvoke $r0.<berkeley.com.sleepycat.je.tree.INLongRep: long getMemorySize()>();

        $b0 = vlsnBytes cmp 0L;

        if $b0 <= 0 goto label4;

        numEntries = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getNEntries()>();

        i#9 = 0;

     label1:
        if i#9 >= numEntries goto label3;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isEmbeddedLN(int)>(i#9);

        if $z0 == 0 goto label2;

        return 0L;

     label2:
        i#9 = i#9 + 1;

        goto label1;

     label3:
        $r1 = <berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep EMPTY_VLSNS>;

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep vlsnCache> = $r1;

        $l1 = 0L - vlsnBytes;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void updateMemorySize(long)>($l1);

     label4:
        return vlsnBytes;
    }

    public berkeley.com.sleepycat.je.tree.BINReference createReference()
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        berkeley.com.sleepycat.je.tree.BINReference $r0;
        long $l0;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r1;
        berkeley.com.sleepycat.je.dbi.DatabaseId $r2;
        byte[] $r3;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        $r0 = new berkeley.com.sleepycat.je.tree.BINReference;

        $l0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: long getNodeId()>();

        $r1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        $r2 = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.DatabaseId getId()>();

        $r3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: byte[] getIdentifierKey()>();

        specialinvoke $r0.<berkeley.com.sleepycat.je.tree.BINReference: void <init>(long,berkeley.com.sleepycat.je.dbi.DatabaseId,byte[])>($l0, $r2, $r3);

        return $r0;
    }

    public void setOffHeapLruId(int)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int id;
        boolean $z0, $z1;
        java.lang.AssertionError $r0;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        id := @parameter0: int;

        $z0 = <berkeley.com.sleepycat.je.tree.BIN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if id >= 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean hasOffHeapLNs()>();

        if $z1 == 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        this.<berkeley.com.sleepycat.je.tree.BIN: int offHeapLruId> = id;

        return;
    }

    public void clearOffHeapLNIds()
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep $r0;
        berkeley.com.sleepycat.je.tree.INLongRep $r1, $r2;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        $r1 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep offHeapLNIds>;

        $r0 = <berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep EMPTY_OFFHEAP_LN_IDS>;

        $r2 = virtualinvoke $r1.<berkeley.com.sleepycat.je.tree.INLongRep: berkeley.com.sleepycat.je.tree.INLongRep clear(berkeley.com.sleepycat.je.tree.IN,berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep)>(this, $r0);

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep offHeapLNIds> = $r2;

        return;
    }

    public long mutateToBINDelta()
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        long oldSize, $l0, $l1;
        int nDeltas, capacity;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.AssertionError $r0, $r1;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r2;
        berkeley.com.sleepycat.je.dbi.INList $r3;
        byte[] $r4;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        $z0 = <berkeley.com.sleepycat.je.tree.BIN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isLatchExclusiveOwner()>();

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $z2 = <berkeley.com.sleepycat.je.tree.BIN: boolean $assertionsDisabled>;

        if $z2 != 0 goto label2;

        $z3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean canMutateToBINDelta()>();

        if $z3 != 0 goto label2;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label2:
        $z4 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean getInListResident()>();

        if $z4 == 0 goto label3;

        $r2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r3 = virtualinvoke $r2.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.INList getInMemoryINs()>();

        virtualinvoke $r3.<berkeley.com.sleepycat.je.dbi.INList: void updateBINDeltaStat(int)>(1);

     label3:
        oldSize = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: long getInMemorySize()>();

        nDeltas = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getNDeltas()>();

        capacity = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getDeltaCapacity(int)>(nDeltas);

        $r4 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: byte[] createBloomFilter()>();

        this.<berkeley.com.sleepycat.je.tree.BIN: byte[] bloomFilter> = $r4;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void initBINDelta(berkeley.com.sleepycat.je.tree.BIN,int,int,boolean)>(this, nDeltas, capacity, 1);

        $l0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: long getInMemorySize()>();

        $l1 = oldSize - $l0;

        return $l1;
    }

    private void initBINDelta(berkeley.com.sleepycat.je.tree.BIN, int, int, boolean)
    {
        berkeley.com.sleepycat.je.tree.BIN this, destBIN;
        int nDeltas, capacity, doff, soff, $i0, $i1, j#38, i#40, $i2, $i4, $i5, $i7, $i8, $i10, $i11, $i17, $i18, $i19, $i20;
        boolean copyTargets, $z0, $z1;
        long[] vlsns, longLSNs#2, $r0, memIds#22, $r1;
        int[] sizes, expiration#26;
        byte[][] keys;
        byte[] states, compactLSNs#4, $r2, $r3, $r4, $r5, $r8, $r10;
        berkeley.com.sleepycat.je.tree.Node[] targets#24;
        byte $b3, $b6, $b9, $b12, $b14;
        long $l13, $l15, $l16, $l21;
        berkeley.com.sleepycat.je.tree.INKeyRep $r6;
        java.lang.Object $r7;
        berkeley.com.sleepycat.je.tree.Node $r9;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        destBIN := @parameter0: berkeley.com.sleepycat.je.tree.BIN;

        nDeltas := @parameter1: int;

        capacity := @parameter2: int;

        copyTargets := @parameter3: boolean;

        longLSNs#2 = null;

        compactLSNs#4 = null;

        $r0 = this.<berkeley.com.sleepycat.je.tree.BIN: long[] entryLsnLongArray>;

        if $r0 != null goto label01;

        $i0 = nDeltas * 4;

        compactLSNs#4 = newarray (byte)[$i0];

        goto label02;

     label01:
        longLSNs#2 = newarray (long)[nDeltas];

     label02:
        vlsns = newarray (long)[nDeltas];

        sizes = newarray (int)[nDeltas];

        keys = newarray (byte[])[nDeltas];

        states = newarray (byte)[nDeltas];

        memIds#22 = null;

        targets#24 = null;

        expiration#26 = null;

        targets#24 = newarray (berkeley.com.sleepycat.je.tree.Node)[nDeltas];

        memIds#22 = newarray (long)[nDeltas];

        $i1 = this.<berkeley.com.sleepycat.je.tree.BIN: int expirationBase>;

        if $i1 == -1 goto label03;

        expiration#26 = newarray (int)[nDeltas];

     label03:
        j#38 = 0;

        i#40 = 0;

     label04:
        $i2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getNEntries()>();

        if i#40 >= $i2 goto label12;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isDirty(int)>(i#40);

        if $z0 != 0 goto label05;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void freeOffHeapLN(int)>(i#40);

        goto label11;

     label05:
        $r1 = this.<berkeley.com.sleepycat.je.tree.BIN: long[] entryLsnLongArray>;

        if $r1 != null goto label06;

        doff = j#38 << 2;

        soff = i#40 << 2;

        $r2 = this.<berkeley.com.sleepycat.je.tree.BIN: byte[] entryLsnByteArray>;

        $b3 = $r2[soff];

        compactLSNs#4[doff] = $b3;

        $i4 = doff + 1;

        $r3 = this.<berkeley.com.sleepycat.je.tree.BIN: byte[] entryLsnByteArray>;

        $i5 = soff + 1;

        $b6 = $r3[$i5];

        compactLSNs#4[$i4] = $b6;

        $i7 = doff + 2;

        $r4 = this.<berkeley.com.sleepycat.je.tree.BIN: byte[] entryLsnByteArray>;

        $i8 = soff + 2;

        $b9 = $r4[$i8];

        compactLSNs#4[$i7] = $b9;

        $i10 = doff + 3;

        $r5 = this.<berkeley.com.sleepycat.je.tree.BIN: byte[] entryLsnByteArray>;

        $i11 = soff + 3;

        $b12 = $r5[$i11];

        compactLSNs#4[$i10] = $b12;

        goto label07;

     label06:
        $l13 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: long getLsn(int)>(i#40);

        longLSNs#2[j#38] = $l13;

     label07:
        $r6 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $r7 = virtualinvoke $r6.<berkeley.com.sleepycat.je.tree.INKeyRep: java.lang.Object get(int)>(i#40);

        $r8 = (byte[]) $r7;

        keys[j#38] = $r8;

        $b14 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: byte getState(int)>(i#40);

        states[j#38] = $b14;

        if targets#24 == null goto label08;

        $r9 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.Node getTarget(int)>(i#40);

        targets#24[j#38] = $r9;

     label08:
        if memIds#22 == null goto label09;

        $l15 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: long getOffHeapLNId(int)>(i#40);

        memIds#22[j#38] = $l15;

     label09:
        $l16 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: long getCachedVLSN(int)>(i#40);

        vlsns[j#38] = $l16;

        $i17 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getLastLoggedSize(int)>(i#40);

        sizes[j#38] = $i17;

        if expiration#26 == null goto label10;

        $i18 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getExpiration(int)>(i#40);

        expiration#26[j#38] = $i18;

     label10:
        j#38 = j#38 + 1;

     label11:
        i#40 = i#40 + 1;

        goto label04;

     label12:
        $i19 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getFullBinNEntries()>();

        destBIN.<berkeley.com.sleepycat.je.tree.BIN: int fullBinNEntries> = $i19;

        $i20 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getFullBinMaxEntries()>();

        destBIN.<berkeley.com.sleepycat.je.tree.BIN: int fullBinMaxEntries> = $i20;

        $l21 = this.<berkeley.com.sleepycat.je.tree.BIN: long baseFileNumber>;

        $r10 = this.<berkeley.com.sleepycat.je.tree.BIN: byte[] keyPrefix>;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isExpirationInHours()>();

        specialinvoke destBIN.<berkeley.com.sleepycat.je.tree.BIN: void resetContent(int,int,long,byte[],long[],byte[],byte[],byte[][],berkeley.com.sleepycat.je.tree.Node[],int[],long[],long[],int[],boolean)>(capacity, nDeltas, $l21, compactLSNs#4, longLSNs#2, states, $r10, keys, targets#24, sizes, memIds#22, vlsns, expiration#26, $z1);

        virtualinvoke destBIN.<berkeley.com.sleepycat.je.tree.BIN: void setBINDelta(boolean)>(1);

        virtualinvoke destBIN.<berkeley.com.sleepycat.je.tree.BIN: long compactMemory()>();

        return;
    }

    private void resetContent(int, int, long, byte[], long[], byte[], byte[], byte[][], berkeley.com.sleepycat.je.tree.Node[], int[], long[], long[], int[], boolean)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        int capacity, newNEntries, off, $i0, i#44, $i2, $i3, $i5, $i6, $i8, $i9, $i14, $i15;
        long baseFileNumber, $l11, $l13, $l16, $l17, $l18;
        byte[] compactLSNs, states, keyPrefix, $r0, $r8, $r9, $r10, $r11, $r12, $r15, $r18;
        long[] longLSNs, memIds, vlsns, $r1, $r13;
        byte[][] keys;
        berkeley.com.sleepycat.je.tree.Node[] targets;
        int[] loggedSizes, expiration;
        boolean expirationInHours;
        berkeley.com.sleepycat.je.tree.INKeyRep$Default $r2;
        berkeley.com.sleepycat.je.tree.INTargetRep$None $r3;
        berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep $r4, $r5, $r6, $r7;
        byte $b1, $b4, $b7, $b10, $b12;
        berkeley.com.sleepycat.je.tree.INKeyRep $r14, $r17;
        java.lang.Object $r16, $r21;
        berkeley.com.sleepycat.je.tree.INTargetRep $r19, $r22;
        berkeley.com.sleepycat.je.tree.Node $r20;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        capacity := @parameter0: int;

        newNEntries := @parameter1: int;

        baseFileNumber := @parameter2: long;

        compactLSNs := @parameter3: byte[];

        longLSNs := @parameter4: long[];

        states := @parameter5: byte[];

        keyPrefix := @parameter6: byte[];

        keys := @parameter7: byte[][];

        targets := @parameter8: berkeley.com.sleepycat.je.tree.Node[];

        loggedSizes := @parameter9: int[];

        memIds := @parameter10: long[];

        vlsns := @parameter11: long[];

        expiration := @parameter12: int[];

        expirationInHours := @parameter13: boolean;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void updateRepCacheStats(boolean)>(0);

        this.<berkeley.com.sleepycat.je.tree.BIN: int nEntries> = newNEntries;

        this.<berkeley.com.sleepycat.je.tree.BIN: long baseFileNumber> = baseFileNumber;

        if longLSNs != null goto label1;

        $i0 = capacity << 2;

        $r0 = newarray (byte)[$i0];

        this.<berkeley.com.sleepycat.je.tree.BIN: byte[] entryLsnByteArray> = $r0;

        this.<berkeley.com.sleepycat.je.tree.BIN: long[] entryLsnLongArray> = null;

        goto label2;

     label1:
        this.<berkeley.com.sleepycat.je.tree.BIN: byte[] entryLsnByteArray> = null;

        $r1 = newarray (long)[capacity];

        this.<berkeley.com.sleepycat.je.tree.BIN: long[] entryLsnLongArray> = $r1;

     label2:
        this.<berkeley.com.sleepycat.je.tree.BIN: byte[] keyPrefix> = keyPrefix;

        $r2 = new berkeley.com.sleepycat.je.tree.INKeyRep$Default;

        specialinvoke $r2.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: void <init>(int)>(capacity);

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys> = $r2;

        $r3 = <berkeley.com.sleepycat.je.tree.INTargetRep: berkeley.com.sleepycat.je.tree.INTargetRep$None NONE>;

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets> = $r3;

        $r4 = <berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep EMPTY_VLSNS>;

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep vlsnCache> = $r4;

        $r5 = <berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep EMPTY_LAST_LOGGED_SIZES>;

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep lastLoggedSizes> = $r5;

        $r6 = <berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep EMPTY_EXPIRATION>;

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep expirationValues> = $r6;

        this.<berkeley.com.sleepycat.je.tree.BIN: int expirationBase> = -1;

        $r7 = <berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep$EmptyRep EMPTY_OFFHEAP_LN_IDS>;

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep offHeapLNIds> = $r7;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void updateRepCacheStats(boolean)>(1);

        $r8 = newarray (byte)[capacity];

        this.<berkeley.com.sleepycat.je.tree.BIN: byte[] entryStates> = $r8;

        i#44 = 0;

     label3:
        if i#44 >= newNEntries goto label9;

        if longLSNs != null goto label4;

        off = i#44 << 2;

        $r9 = this.<berkeley.com.sleepycat.je.tree.BIN: byte[] entryLsnByteArray>;

        $b1 = compactLSNs[off];

        $r9[off] = $b1;

        $r10 = this.<berkeley.com.sleepycat.je.tree.BIN: byte[] entryLsnByteArray>;

        $i2 = off + 1;

        $i3 = off + 1;

        $b4 = compactLSNs[$i3];

        $r10[$i2] = $b4;

        $r11 = this.<berkeley.com.sleepycat.je.tree.BIN: byte[] entryLsnByteArray>;

        $i5 = off + 2;

        $i6 = off + 2;

        $b7 = compactLSNs[$i6];

        $r11[$i5] = $b7;

        $r12 = this.<berkeley.com.sleepycat.je.tree.BIN: byte[] entryLsnByteArray>;

        $i8 = off + 3;

        $i9 = off + 3;

        $b10 = compactLSNs[$i9];

        $r12[$i8] = $b10;

        goto label5;

     label4:
        $r13 = this.<berkeley.com.sleepycat.je.tree.BIN: long[] entryLsnLongArray>;

        $l11 = longLSNs[i#44];

        $r13[i#44] = $l11;

     label5:
        $r14 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys>;

        $r15 = keys[i#44];

        $r16 = virtualinvoke $r14.<berkeley.com.sleepycat.je.tree.INKeyRep: java.lang.Object set(int,java.lang.Object,berkeley.com.sleepycat.je.tree.IN)>(i#44, $r15, this);

        $r17 = (berkeley.com.sleepycat.je.tree.INKeyRep) $r16;

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INKeyRep entryKeys> = $r17;

        $r18 = this.<berkeley.com.sleepycat.je.tree.BIN: byte[] entryStates>;

        $b12 = states[i#44];

        $r18[i#44] = $b12;

        if targets == null goto label6;

        $r19 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets>;

        $r20 = targets[i#44];

        $r21 = virtualinvoke $r19.<berkeley.com.sleepycat.je.tree.INTargetRep: java.lang.Object set(int,java.lang.Object,berkeley.com.sleepycat.je.tree.IN)>(i#44, $r20, this);

        $r22 = (berkeley.com.sleepycat.je.tree.INTargetRep) $r21;

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INTargetRep entryTargets> = $r22;

     label6:
        if memIds == null goto label7;

        $l13 = memIds[i#44];

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void setOffHeapLNId(int,long)>(i#44, $l13);

     label7:
        if expiration == null goto label8;

        $i14 = expiration[i#44];

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void setExpiration(int,int,boolean)>(i#44, $i14, expirationInHours);

     label8:
        $i15 = loggedSizes[i#44];

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void setLastLoggedSizeUnconditional(int,int)>(i#44, $i15);

        $l16 = vlsns[i#44];

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void setCachedVLSNUnconditional(int,long)>(i#44, $l16);

        i#44 = i#44 + 1;

        goto label3;

     label9:
        $l17 = this.<berkeley.com.sleepycat.je.tree.BIN: long inMemorySize>;

        $l18 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: long computeMemorySize()>();

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void updateMemorySize(long,long)>($l17, $l18);

        return;
    }

    void applyDelta(byte[], byte[], long, byte, int, long, long, berkeley.com.sleepycat.je.tree.Node, int, boolean)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        byte[] key, data;
        long lsn, ohLnId, vlsn;
        byte state;
        int lastLoggedSize, expiration, result, foundIndex#6, $i0, foundIndex#14, $i1;
        berkeley.com.sleepycat.je.tree.Node child;
        boolean expirationInHours, $z0;
        java.lang.AssertionError $r0;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        key := @parameter0: byte[];

        data := @parameter1: byte[];

        lsn := @parameter2: long;

        state := @parameter3: byte;

        lastLoggedSize := @parameter4: int;

        ohLnId := @parameter5: long;

        vlsn := @parameter6: long;

        child := @parameter7: berkeley.com.sleepycat.je.tree.Node;

        expiration := @parameter8: int;

        expirationInHours := @parameter9: boolean;

        foundIndex#6 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int findEntry(byte[],boolean,boolean)>(key, 1, 0);

        if foundIndex#6 < 0 goto label1;

        $i0 = foundIndex#6 & 65536;

        if $i0 == 0 goto label1;

        foundIndex#14 = foundIndex#6 & -65537;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void applyDeltaSlot(int,berkeley.com.sleepycat.je.tree.Node,long,int,byte,byte[],byte[])>(foundIndex#14, child, lsn, lastLoggedSize, state, key, data);

        goto label3;

     label1:
        result = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int insertEntry1(berkeley.com.sleepycat.je.tree.Node,byte[],byte[],long,byte,boolean)>(child, key, data, lsn, state, 0);

        $z0 = <berkeley.com.sleepycat.je.tree.BIN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $i1 = result & 131072;

        if $i1 != 0 goto label2;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label2:
        foundIndex#14 = result & -131073;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void setLastLoggedSizeUnconditional(int,int)>(foundIndex#14, lastLoggedSize);

     label3:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void setCachedVLSNUnconditional(int,long)>(foundIndex#14, vlsn);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void setOffHeapLNId(int,long)>(foundIndex#14, ohLnId);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void setExpiration(int,int,boolean)>(foundIndex#14, expiration, expirationInHours);

        return;
    }

    public boolean hasExpirationValues()
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        berkeley.com.sleepycat.je.tree.INLongRep $r0;
        boolean $z0, $z1;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        $r0 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep expirationValues>;

        $z0 = virtualinvoke $r0.<berkeley.com.sleepycat.je.tree.INLongRep: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    berkeley.com.sleepycat.je.tree.IN splitSpecial(berkeley.com.sleepycat.je.tree.IN, int, berkeley.com.sleepycat.je.tree.IN, int, byte[], boolean) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        berkeley.com.sleepycat.je.tree.IN parent, grandParent, $r0, $r1, $r2;
        int parentIndex, maxEntriesPerNode, nEntries, index#8, $i0, index#16, $i1, $i2;
        byte[] key;
        boolean leftSide, exact, $z0;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        parent := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        parentIndex := @parameter1: int;

        grandParent := @parameter2: berkeley.com.sleepycat.je.tree.IN;

        maxEntriesPerNode := @parameter3: int;

        key := @parameter4: byte[];

        leftSide := @parameter5: boolean;

        nEntries = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getNEntries()>();

        index#8 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int findEntry(byte[],boolean,boolean)>(key, 1, 0);

        $i0 = index#8 & 65536;

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        exact = $z0;

        index#16 = index#8 & -65537;

        if leftSide == 0 goto label3;

        if index#16 >= 0 goto label3;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.IN splitInternal(berkeley.com.sleepycat.je.tree.IN,int,berkeley.com.sleepycat.je.tree.IN,int,int)>(parent, parentIndex, grandParent, maxEntriesPerNode, 1);

        return $r0;

     label3:
        if leftSide != 0 goto label4;

        if exact != 0 goto label4;

        $i1 = nEntries - 1;

        if index#16 != $i1 goto label4;

        $i2 = nEntries - 1;

        $r1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.IN splitInternal(berkeley.com.sleepycat.je.tree.IN,int,berkeley.com.sleepycat.je.tree.IN,int,int)>(parent, parentIndex, grandParent, maxEntriesPerNode, $i2);

        return $r1;

     label4:
        $r2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.IN split(berkeley.com.sleepycat.je.tree.IN,int,berkeley.com.sleepycat.je.tree.IN,int)>(parent, parentIndex, grandParent, maxEntriesPerNode);

        return $r2;
    }

    protected berkeley.com.sleepycat.je.tree.IN createNewInstance(byte[], int, int)
    {
        berkeley.com.sleepycat.je.tree.BIN this, $r0;
        byte[] identifierKey;
        int maxEntries, level;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r1;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        identifierKey := @parameter0: byte[];

        maxEntries := @parameter1: int;

        level := @parameter2: int;

        $r0 = new berkeley.com.sleepycat.je.tree.BIN;

        $r1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        specialinvoke $r0.<berkeley.com.sleepycat.je.tree.BIN: void <init>(berkeley.com.sleepycat.je.dbi.DatabaseImpl,byte[],int,int)>($r1, identifierKey, maxEntries, level);

        return $r0;
    }

    void adjustCursors(berkeley.com.sleepycat.je.tree.IN, int, int)
    {
        berkeley.com.sleepycat.je.tree.BIN this, ns;
        berkeley.com.sleepycat.je.tree.IN newSibling;
        int newSiblingLow, newSiblingHigh, adjustmentDelta, cIdx, $i0, $i1;
        java.util.Iterator iter;
        berkeley.com.sleepycat.je.dbi.CursorImpl cursor;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.AssertionError $r0, $r1, $r5;
        berkeley.com.sleepycat.je.utilint.TinyHashSet $r2, $r3;
        java.lang.Object $r4;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        newSibling := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        newSiblingLow := @parameter1: int;

        newSiblingHigh := @parameter2: int;

        $z0 = <berkeley.com.sleepycat.je.tree.BIN: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke newSibling.<berkeley.com.sleepycat.je.tree.IN: boolean isLatchExclusiveOwner()>();

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $z2 = <berkeley.com.sleepycat.je.tree.BIN: boolean $assertionsDisabled>;

        if $z2 != 0 goto label2;

        $z3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: boolean isLatchExclusiveOwner()>();

        if $z3 != 0 goto label2;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label2:
        $r2 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.utilint.TinyHashSet cursorSet>;

        if $r2 != null goto label3;

        return;

     label3:
        adjustmentDelta = newSiblingHigh - newSiblingLow;

        $r3 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.utilint.TinyHashSet cursorSet>;

        iter = virtualinvoke $r3.<berkeley.com.sleepycat.je.utilint.TinyHashSet: java.util.Iterator iterator()>();

     label4:
        $z4 = interfaceinvoke iter.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label9;

        $r4 = interfaceinvoke iter.<java.util.Iterator: java.lang.Object next()>();

        cursor = (berkeley.com.sleepycat.je.dbi.CursorImpl) $r4;

        cIdx = virtualinvoke cursor.<berkeley.com.sleepycat.je.dbi.CursorImpl: int getIndex()>();

        virtualinvoke cursor.<berkeley.com.sleepycat.je.dbi.CursorImpl: void assertBIN(berkeley.com.sleepycat.je.tree.BIN)>(this);

        $z5 = <berkeley.com.sleepycat.je.tree.BIN: boolean $assertionsDisabled>;

        if $z5 != 0 goto label5;

        $z6 = newSibling instanceof berkeley.com.sleepycat.je.tree.BIN;

        if $z6 != 0 goto label5;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label5:
        ns = (berkeley.com.sleepycat.je.tree.BIN) newSibling;

        if newSiblingLow != 0 goto label7;

        if cIdx >= newSiblingHigh goto label6;

        interfaceinvoke iter.<java.util.Iterator: void remove()>();

        virtualinvoke cursor.<berkeley.com.sleepycat.je.dbi.CursorImpl: void setBIN(berkeley.com.sleepycat.je.tree.BIN)>(ns);

        virtualinvoke ns.<berkeley.com.sleepycat.je.tree.BIN: void addCursor(berkeley.com.sleepycat.je.dbi.CursorImpl)>(cursor);

        goto label8;

     label6:
        $i0 = cIdx - adjustmentDelta;

        virtualinvoke cursor.<berkeley.com.sleepycat.je.dbi.CursorImpl: void setIndex(int)>($i0);

        goto label8;

     label7:
        if cIdx < newSiblingLow goto label8;

        $i1 = cIdx - newSiblingLow;

        virtualinvoke cursor.<berkeley.com.sleepycat.je.dbi.CursorImpl: void setIndex(int)>($i1);

        interfaceinvoke iter.<java.util.Iterator: void remove()>();

        virtualinvoke cursor.<berkeley.com.sleepycat.je.dbi.CursorImpl: void setBIN(berkeley.com.sleepycat.je.tree.BIN)>(ns);

        virtualinvoke ns.<berkeley.com.sleepycat.je.tree.BIN: void addCursor(berkeley.com.sleepycat.je.dbi.CursorImpl)>(cursor);

     label8:
        goto label4;

     label9:
        return;
    }

    void appendEntryFromOtherNode(berkeley.com.sleepycat.je.tree.IN, int)
    {
        berkeley.com.sleepycat.je.tree.BIN this, fromBin;
        berkeley.com.sleepycat.je.tree.IN 'from';
        int fromIdx, idx, $i0, $i2, $i3;
        berkeley.com.sleepycat.je.evictor.OffHeapCache ohCache;
        long $l1, $l4;
        boolean $z0, $z1;
        berkeley.com.sleepycat.je.tree.INLongRep $r0, $r1, $r2;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        'from' := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        fromIdx := @parameter1: int;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.IN: void appendEntryFromOtherNode(berkeley.com.sleepycat.je.tree.IN,int)>('from', fromIdx);

        fromBin = (berkeley.com.sleepycat.je.tree.BIN) 'from';

        $i0 = this.<berkeley.com.sleepycat.je.tree.BIN: int nEntries>;

        idx = $i0 - 1;

        $l1 = virtualinvoke fromBin.<berkeley.com.sleepycat.je.tree.BIN: long getCachedVLSN(int)>(fromIdx);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void setCachedVLSNUnconditional(int,long)>(idx, $l1);

        $i2 = virtualinvoke 'from'.<berkeley.com.sleepycat.je.tree.IN: int getLastLoggedSize(int)>(fromIdx);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void setLastLoggedSizeUnconditional(int,int)>(idx, $i2);

        $i3 = virtualinvoke fromBin.<berkeley.com.sleepycat.je.tree.BIN: int getExpiration(int)>(fromIdx);

        $z0 = virtualinvoke fromBin.<berkeley.com.sleepycat.je.tree.BIN: boolean isExpirationInHours()>();

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: void setExpiration(int,int,boolean)>(idx, $i3, $z0);

        ohCache = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.evictor.OffHeapCache getOffHeapCache()>();

        $z1 = virtualinvoke ohCache.<berkeley.com.sleepycat.je.evictor.OffHeapCache: boolean isEnabled()>();

        if $z1 == 0 goto label1;

        $r0 = this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep offHeapLNIds>;

        $r1 = fromBin.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep offHeapLNIds>;

        $l4 = virtualinvoke $r1.<berkeley.com.sleepycat.je.tree.INLongRep: long get(int)>(fromIdx);

        $r2 = virtualinvoke $r0.<berkeley.com.sleepycat.je.tree.INLongRep: berkeley.com.sleepycat.je.tree.INLongRep set(int,long,berkeley.com.sleepycat.je.tree.IN)>(idx, $l4, this);

        this.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.INLongRep offHeapLNIds> = $r2;

        virtualinvoke ohCache.<berkeley.com.sleepycat.je.evictor.OffHeapCache: boolean ensureOffHeapLNsInLRU(berkeley.com.sleepycat.je.tree.BIN)>(this);

     label1:
        return;
    }

    void accumulateStats(berkeley.com.sleepycat.je.tree.TreeWalkerStatsAccumulator)
    {
        berkeley.com.sleepycat.je.tree.BIN this;
        berkeley.com.sleepycat.je.tree.TreeWalkerStatsAccumulator acc;
        long $l0;
        java.lang.Long $r0;
        int $i1;

        this := @this: berkeley.com.sleepycat.je.tree.BIN;

        acc := @parameter0: berkeley.com.sleepycat.je.tree.TreeWalkerStatsAccumulator;

        $l0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: long getNodeId()>();

        $r0 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $i1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.BIN: int getLevel()>();

        interfaceinvoke acc.<berkeley.com.sleepycat.je.tree.TreeWalkerStatsAccumulator: void processBIN(berkeley.com.sleepycat.je.tree.BIN,java.lang.Long,int)>(this, $r0, $i1);

        return;
    }


