    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        int[] $r1, $r2;

        $r0 = class "org/tukaani/xz/LZMA2Options";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.tukaani.xz.LZMA2Options: boolean $assertionsDisabled> = $z1;

        $r1 = newarray (int)[10];

        $r1[0] = 262144;

        $r1[1] = 1048576;

        $r1[2] = 2097152;

        $r1[3] = 4194304;

        $r1[4] = 4194304;

        $r1[5] = 8388608;

        $r1[6] = 8388608;

        $r1[7] = 16777216;

        $r1[8] = 33554432;

        $r1[9] = 67108864;

        <org.tukaani.xz.LZMA2Options: int[] presetToDictSize> = $r1;

        $r2 = newarray (int)[4];

        $r2[0] = 4;

        $r2[1] = 8;

        $r2[2] = 24;

        $r2[3] = 48;

        <org.tukaani.xz.LZMA2Options: int[] presetToDepthLimit> = $r2;

        return;
    }

    public void <init>(int) throws org.tukaani.xz.UnsupportedOptionsException
    {
        org.tukaani.xz.LZMA2Options this;
        int preset;

        this := @this: org.tukaani.xz.LZMA2Options;

        preset := @parameter0: int;

        specialinvoke this.<org.tukaani.xz.FilterOptions: void <init>()>();

        this.<org.tukaani.xz.LZMA2Options: byte[] presetDict> = null;

        virtualinvoke this.<org.tukaani.xz.LZMA2Options: void setPreset(int)>(preset);

        return;
    }

    public void setPreset(int) throws org.tukaani.xz.UnsupportedOptionsException
    {
        org.tukaani.xz.LZMA2Options this;
        int preset, $i0, $i2;
        boolean $z0, $z1, $z2, $z3;
        org.tukaani.xz.UnsupportedOptionsException $r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;
        int[] $r5, $r7;
        short $s1;
        byte $b3;

        this := @this: org.tukaani.xz.LZMA2Options;

        preset := @parameter0: int;

        if preset < 0 goto label01;

        if preset <= 9 goto label02;

     label01:
        $z0 = 1;

        goto label03;

     label02:
        $z0 = 0;

     label03:
        $z1 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z0);

        if $z1 == 0 goto label04;

        $r0 = new org.tukaani.xz.UnsupportedOptionsException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported preset: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(preset);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<org.tukaani.xz.UnsupportedOptionsException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label04:
        this.<org.tukaani.xz.LZMA2Options: int lc> = 3;

        this.<org.tukaani.xz.LZMA2Options: int lp> = 0;

        this.<org.tukaani.xz.LZMA2Options: int pb> = 2;

        $r5 = <org.tukaani.xz.LZMA2Options: int[] presetToDictSize>;

        $i0 = $r5[preset];

        this.<org.tukaani.xz.LZMA2Options: int dictSize> = $i0;

        if preset > 3 goto label05;

        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        $z3 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z2);

        if $z3 == 0 goto label09;

        this.<org.tukaani.xz.LZMA2Options: int mode> = 1;

        this.<org.tukaani.xz.LZMA2Options: int mf> = 4;

        if preset > 1 goto label07;

        $s1 = 128;

        goto label08;

     label07:
        $s1 = 273;

     label08:
        this.<org.tukaani.xz.LZMA2Options: int niceLen> = $s1;

        $r7 = <org.tukaani.xz.LZMA2Options: int[] presetToDepthLimit>;

        $i2 = $r7[preset];

        this.<org.tukaani.xz.LZMA2Options: int depthLimit> = $i2;

        goto label13;

     label09:
        this.<org.tukaani.xz.LZMA2Options: int mode> = 2;

        this.<org.tukaani.xz.LZMA2Options: int mf> = 20;

        if preset != 4 goto label10;

        $b3 = 16;

        goto label12;

     label10:
        if preset != 5 goto label11;

        $b3 = 32;

        goto label12;

     label11:
        $b3 = 64;

     label12:
        this.<org.tukaani.xz.LZMA2Options: int niceLen> = $b3;

        this.<org.tukaani.xz.LZMA2Options: int depthLimit> = 0;

     label13:
        return;
    }

    org.tukaani.xz.FilterEncoder getFilterEncoder()
    {
        org.tukaani.xz.LZMA2Options this;
        org.tukaani.xz.LZMA2Encoder $r0;

        this := @this: org.tukaani.xz.LZMA2Options;

        $r0 = new org.tukaani.xz.LZMA2Encoder;

        specialinvoke $r0.<org.tukaani.xz.LZMA2Encoder: void <init>(org.tukaani.xz.LZMA2Options)>(this);

        return $r0;
    }

    public byte[] getPresetDict()
    {
        org.tukaani.xz.LZMA2Options this;
        byte[] $r0;

        this := @this: org.tukaani.xz.LZMA2Options;

        $r0 = this.<org.tukaani.xz.LZMA2Options: byte[] presetDict>;

        return $r0;
    }

    public int getMode()
    {
        org.tukaani.xz.LZMA2Options this;
        int $i0;

        this := @this: org.tukaani.xz.LZMA2Options;

        $i0 = this.<org.tukaani.xz.LZMA2Options: int mode>;

        return $i0;
    }

    public int getDictSize()
    {
        org.tukaani.xz.LZMA2Options this;
        int $i0;

        this := @this: org.tukaani.xz.LZMA2Options;

        $i0 = this.<org.tukaani.xz.LZMA2Options: int dictSize>;

        return $i0;
    }

    public java.lang.Object clone()
    {
        org.tukaani.xz.LZMA2Options this;
        java.lang.CloneNotSupportedException e, $r1;
        java.lang.Object $r0;
        boolean $z0;
        java.lang.AssertionError $r2;
        java.lang.RuntimeException $r3;

        this := @this: org.tukaani.xz.LZMA2Options;

     label1:
        $r0 = specialinvoke this.<java.lang.Object: java.lang.Object clone()>();

     label2:
        return $r0;

     label3:
        $r1 := @caughtexception;

        e = $r1;

        $z0 = <org.tukaani.xz.LZMA2Options: boolean $assertionsDisabled>;

        if $z0 != 0 goto label4;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label4:
        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>()>();

        throw $r3;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public org.tukaani.xz.FinishableOutputStream getOutputStream(org.tukaani.xz.FinishableOutputStream)
    {
        org.tukaani.xz.LZMA2Options this;
        org.tukaani.xz.FinishableOutputStream out;
        int $i0;
        boolean $z0, $z1;
        org.tukaani.xz.UncompressedLZMA2OutputStream $r0;
        org.tukaani.xz.LZMA2OutputStream $r1;

        this := @this: org.tukaani.xz.LZMA2Options;

        out := @parameter0: org.tukaani.xz.FinishableOutputStream;

        $i0 = this.<org.tukaani.xz.LZMA2Options: int mode>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $z1 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z0);

        if $z1 == 0 goto label3;

        $r0 = new org.tukaani.xz.UncompressedLZMA2OutputStream;

        specialinvoke $r0.<org.tukaani.xz.UncompressedLZMA2OutputStream: void <init>(org.tukaani.xz.FinishableOutputStream)>(out);

        return $r0;

     label3:
        $r1 = new org.tukaani.xz.LZMA2OutputStream;

        specialinvoke $r1.<org.tukaani.xz.LZMA2OutputStream: void <init>(org.tukaani.xz.FinishableOutputStream,org.tukaani.xz.LZMA2Options)>(out, this);

        return $r1;
    }

    public int getLc()
    {
        org.tukaani.xz.LZMA2Options this;
        int $i0;

        this := @this: org.tukaani.xz.LZMA2Options;

        $i0 = this.<org.tukaani.xz.LZMA2Options: int lc>;

        return $i0;
    }

    public int getLp()
    {
        org.tukaani.xz.LZMA2Options this;
        int $i0;

        this := @this: org.tukaani.xz.LZMA2Options;

        $i0 = this.<org.tukaani.xz.LZMA2Options: int lp>;

        return $i0;
    }

    public int getPb()
    {
        org.tukaani.xz.LZMA2Options this;
        int $i0;

        this := @this: org.tukaani.xz.LZMA2Options;

        $i0 = this.<org.tukaani.xz.LZMA2Options: int pb>;

        return $i0;
    }

    public int getNiceLen()
    {
        org.tukaani.xz.LZMA2Options this;
        int $i0;

        this := @this: org.tukaani.xz.LZMA2Options;

        $i0 = this.<org.tukaani.xz.LZMA2Options: int niceLen>;

        return $i0;
    }

    public int getMatchFinder()
    {
        org.tukaani.xz.LZMA2Options this;
        int $i0;

        this := @this: org.tukaani.xz.LZMA2Options;

        $i0 = this.<org.tukaani.xz.LZMA2Options: int mf>;

        return $i0;
    }

    public int getDepthLimit()
    {
        org.tukaani.xz.LZMA2Options this;
        int $i0;

        this := @this: org.tukaani.xz.LZMA2Options;

        $i0 = this.<org.tukaani.xz.LZMA2Options: int depthLimit>;

        return $i0;
    }


