    public static com.sleepycat.je.txn.Locker getWritableLocker(com.sleepycat.je.Environment, com.sleepycat.je.Transaction, boolean, boolean, boolean, com.sleepycat.je.TransactionConfig)
    {
        com.sleepycat.je.Environment env;
        com.sleepycat.je.Transaction userTxn, xaLocker;
        boolean isInternalDb, dbIsTransactional, autoTxnIsReplicated, envIsTransactional, $z0;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        com.sleepycat.je.txn.Locker locker, $r0;
        com.sleepycat.je.TransactionConfig autoCommitConfig#1, $r2;
        com.sleepycat.je.log.ReplicationContext $r3;
        com.sleepycat.je.txn.Txn $r4;
        com.sleepycat.je.txn.ThreadLocker $r5;
        java.lang.IllegalArgumentException $r6, $r7;
        com.sleepycat.je.txn.ReadCommittedLocker $r8;

        env := @parameter0: com.sleepycat.je.Environment;

        userTxn := @parameter1: com.sleepycat.je.Transaction;

        isInternalDb := @parameter2: boolean;

        dbIsTransactional := @parameter3: boolean;

        autoTxnIsReplicated := @parameter4: boolean;

        autoCommitConfig#1 := @parameter5: com.sleepycat.je.TransactionConfig;

        envImpl = staticinvoke <com.sleepycat.je.DbInternal: com.sleepycat.je.dbi.EnvironmentImpl getNonNullEnvImpl(com.sleepycat.je.Environment)>(env);

        envIsTransactional = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: boolean isTransactional()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(userTxn);

        if userTxn != null goto label1;

        xaLocker = virtualinvoke env.<com.sleepycat.je.Environment: com.sleepycat.je.Transaction getThreadTransaction()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(xaLocker);

        if xaLocker == null goto label1;

        $r0 = staticinvoke <com.sleepycat.je.DbInternal: com.sleepycat.je.txn.Locker getLocker(com.sleepycat.je.Transaction)>(xaLocker);

        return $r0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dbIsTransactional);

        if dbIsTransactional == 0 goto label5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(userTxn);

        if userTxn != null goto label5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(autoCommitConfig#1);

        if autoCommitConfig#1 != null goto label2;

        autoCommitConfig#1 = staticinvoke <com.sleepycat.je.DbInternal: com.sleepycat.je.TransactionConfig getDefaultTxnConfig(com.sleepycat.je.Environment)>(env);

     label2:
        $r2 = autoCommitConfig#1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(autoTxnIsReplicated);

        if autoTxnIsReplicated == 0 goto label3;

        $r3 = <com.sleepycat.je.log.ReplicationContext: com.sleepycat.je.log.ReplicationContext MASTER>;

        goto label4;

     label3:
        $r3 = <com.sleepycat.je.log.ReplicationContext: com.sleepycat.je.log.ReplicationContext NO_REPLICATE>;

     label4:
        $r4 = staticinvoke <com.sleepycat.je.txn.Txn: com.sleepycat.je.txn.Txn createAutoTxn(com.sleepycat.je.dbi.EnvironmentImpl,com.sleepycat.je.TransactionConfig,com.sleepycat.je.log.ReplicationContext)>(envImpl, $r2, $r3);

        return $r4;

     label5:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(userTxn);

        if userTxn != null goto label6;

        $r5 = staticinvoke <com.sleepycat.je.txn.ThreadLocker: com.sleepycat.je.txn.ThreadLocker createThreadLocker(com.sleepycat.je.dbi.EnvironmentImpl,boolean)>(envImpl, autoTxnIsReplicated);

        return $r5;

     label6:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isInternalDb);

        if isInternalDb != 0 goto label7;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(envIsTransactional);

        if envIsTransactional != 0 goto label7;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("A Transaction cannot be used because the environment was opened non-transactionally");

        throw $r6;

     label7:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dbIsTransactional);

        if dbIsTransactional != 0 goto label8;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("A Transaction cannot be used because the database was opened non-transactionally");

        throw $r7;

     label8:
        locker = staticinvoke <com.sleepycat.je.DbInternal: com.sleepycat.je.txn.Locker getLocker(com.sleepycat.je.Transaction)>(userTxn);

        $z0 = virtualinvoke locker.<com.sleepycat.je.txn.Locker: boolean isReadCommittedIsolation()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label9;

        $r8 = staticinvoke <com.sleepycat.je.txn.ReadCommittedLocker: com.sleepycat.je.txn.ReadCommittedLocker createReadCommittedLocker(com.sleepycat.je.dbi.EnvironmentImpl,com.sleepycat.je.txn.Locker)>(envImpl, locker);

        return $r8;

     label9:
        return locker;
    }

    public static com.sleepycat.je.txn.Locker getInternalReadOperationLocker(com.sleepycat.je.dbi.EnvironmentImpl)
    {
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        com.sleepycat.je.txn.BasicLocker $r0;

        envImpl := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        $r0 = staticinvoke <com.sleepycat.je.txn.BasicLocker: com.sleepycat.je.txn.BasicLocker createBasicLocker(com.sleepycat.je.dbi.EnvironmentImpl)>(envImpl);

        return $r0;
    }

    public static com.sleepycat.je.txn.Locker getWritableLocker(com.sleepycat.je.Environment, com.sleepycat.je.Transaction, boolean, boolean, boolean)
    {
        com.sleepycat.je.Environment env;
        com.sleepycat.je.Transaction userTxn;
        boolean isInternalDb, dbIsTransactional, autoTxnIsReplicated;
        com.sleepycat.je.txn.Locker $r0;

        env := @parameter0: com.sleepycat.je.Environment;

        userTxn := @parameter1: com.sleepycat.je.Transaction;

        isInternalDb := @parameter2: boolean;

        dbIsTransactional := @parameter3: boolean;

        autoTxnIsReplicated := @parameter4: boolean;

        $r0 = staticinvoke <com.sleepycat.je.txn.LockerFactory: com.sleepycat.je.txn.Locker getWritableLocker(com.sleepycat.je.Environment,com.sleepycat.je.Transaction,boolean,boolean,boolean,com.sleepycat.je.TransactionConfig)>(env, userTxn, isInternalDb, dbIsTransactional, autoTxnIsReplicated, null);

        return $r0;
    }

    public static com.sleepycat.je.txn.Locker getReadableLocker(com.sleepycat.je.Database, com.sleepycat.je.txn.Locker, boolean)
    {
        com.sleepycat.je.Database dbHandle;
        com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        boolean autoTxnIsReplicated, readCommittedIsolation#2, $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.sleepycat.je.txn.Locker locker#1, $r3;
        java.lang.IllegalArgumentException $r0;
        com.sleepycat.je.dbi.EnvironmentImpl $r1;
        com.sleepycat.je.Environment $r2;

        dbHandle := @parameter0: com.sleepycat.je.Database;

        locker#1 := @parameter1: com.sleepycat.je.txn.Locker;

        readCommittedIsolation#2 := @parameter2: boolean;

        dbImpl = staticinvoke <com.sleepycat.je.DbInternal: com.sleepycat.je.dbi.DatabaseImpl getDbImpl(com.sleepycat.je.Database)>(dbHandle);

        $z0 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: boolean isTransactional()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(locker#1);

        if locker#1 == null goto label1;

        $z1 = virtualinvoke locker#1.<com.sleepycat.je.txn.Locker: boolean isTransactional()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("A Transaction cannot be used because the database was opened non-transactionally");

        throw $r0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(locker#1);

        if locker#1 == null goto label2;

        $z2 = virtualinvoke locker#1.<com.sleepycat.je.txn.Locker: boolean isTransactional()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label2;

        locker#1 = null;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(locker#1);

        if locker#1 == null goto label3;

        $z3 = virtualinvoke locker#1.<com.sleepycat.je.txn.Locker: boolean isReadCommittedIsolation()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label3;

        readCommittedIsolation#2 = 1;

     label3:
        $z4 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: boolean isReplicated()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label4;

        $r1 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $z5 = virtualinvoke $r1.<com.sleepycat.je.dbi.EnvironmentImpl: boolean isReplicated()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label4;

        $z6 = 1;

        goto label5;

     label4:
        $z6 = 0;

     label5:
        autoTxnIsReplicated = $z6;

        $r2 = virtualinvoke dbHandle.<com.sleepycat.je.Database: com.sleepycat.je.Environment getEnvironment()>();

        $r3 = staticinvoke <com.sleepycat.je.txn.LockerFactory: com.sleepycat.je.txn.Locker getReadableLocker(com.sleepycat.je.Environment,com.sleepycat.je.txn.Locker,boolean,boolean)>($r2, locker#1, autoTxnIsReplicated, readCommittedIsolation#2);

        return $r3;
    }

    private static com.sleepycat.je.txn.Locker getReadableLocker(com.sleepycat.je.Environment, com.sleepycat.je.txn.Locker, boolean, boolean)
    {
        com.sleepycat.je.Environment env;
        com.sleepycat.je.txn.Locker locker, $r0;
        boolean autoTxnIsReplicated, readCommittedIsolation;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        com.sleepycat.je.Transaction xaTxn;
        com.sleepycat.je.txn.ThreadLocker $r1;
        com.sleepycat.je.txn.ReadCommittedLocker $r2;

        env := @parameter0: com.sleepycat.je.Environment;

        locker := @parameter1: com.sleepycat.je.txn.Locker;

        autoTxnIsReplicated := @parameter2: boolean;

        readCommittedIsolation := @parameter3: boolean;

        envImpl = staticinvoke <com.sleepycat.je.DbInternal: com.sleepycat.je.dbi.EnvironmentImpl getNonNullEnvImpl(com.sleepycat.je.Environment)>(env);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(locker);

        if locker != null goto label2;

        xaTxn = virtualinvoke env.<com.sleepycat.je.Environment: com.sleepycat.je.Transaction getThreadTransaction()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(xaTxn);

        if xaTxn == null goto label1;

        $r0 = staticinvoke <com.sleepycat.je.DbInternal: com.sleepycat.je.txn.Locker getLocker(com.sleepycat.je.Transaction)>(xaTxn);

        return $r0;

     label1:
        $r1 = staticinvoke <com.sleepycat.je.txn.ThreadLocker: com.sleepycat.je.txn.ThreadLocker createThreadLocker(com.sleepycat.je.dbi.EnvironmentImpl,boolean)>(envImpl, autoTxnIsReplicated);

        return $r1;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(readCommittedIsolation);

        if readCommittedIsolation == 0 goto label3;

        $r2 = staticinvoke <com.sleepycat.je.txn.ReadCommittedLocker: com.sleepycat.je.txn.ReadCommittedLocker createReadCommittedLocker(com.sleepycat.je.dbi.EnvironmentImpl,com.sleepycat.je.txn.Locker)>(envImpl, locker);

        return $r2;

     label3:
        return locker;
    }

    public static com.sleepycat.je.txn.Locker getReadableLocker(com.sleepycat.je.Database, com.sleepycat.je.Transaction, boolean)
    {
        com.sleepycat.je.Database dbHandle;
        com.sleepycat.je.Transaction userTxn;
        boolean readCommittedIsolation;
        com.sleepycat.je.txn.Locker $r1, $r2;

        dbHandle := @parameter0: com.sleepycat.je.Database;

        userTxn := @parameter1: com.sleepycat.je.Transaction;

        readCommittedIsolation := @parameter2: boolean;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(userTxn);

        if userTxn == null goto label1;

        $r1 = staticinvoke <com.sleepycat.je.DbInternal: com.sleepycat.je.txn.Locker getLocker(com.sleepycat.je.Transaction)>(userTxn);

        goto label2;

     label1:
        $r1 = null;

     label2:
        $r2 = staticinvoke <com.sleepycat.je.txn.LockerFactory: com.sleepycat.je.txn.Locker getReadableLocker(com.sleepycat.je.Database,com.sleepycat.je.txn.Locker,boolean)>(dbHandle, $r1, readCommittedIsolation);

        return $r2;
    }


