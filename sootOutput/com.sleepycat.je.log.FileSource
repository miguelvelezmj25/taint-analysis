    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "com/sleepycat/je/log/FileSource";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sleepycat.je.log.FileSource: boolean $assertionsDisabled> = $z1;

        return;
    }

    public void release() throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.log.FileSource this;

        this := @this: com.sleepycat.je.log.FileSource;

        return;
    }

    void <init>(java.io.RandomAccessFile, int, com.sleepycat.je.log.FileManager, long, int)
    {
        com.sleepycat.je.log.FileSource this;
        java.io.RandomAccessFile file;
        int readBufferSize, logVersion;
        com.sleepycat.je.log.FileManager fileManager;
        long fileNum;

        this := @this: com.sleepycat.je.log.FileSource;

        file := @parameter0: java.io.RandomAccessFile;

        readBufferSize := @parameter1: int;

        fileManager := @parameter2: com.sleepycat.je.log.FileManager;

        fileNum := @parameter3: long;

        logVersion := @parameter4: int;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<com.sleepycat.je.log.FileSource: java.io.RandomAccessFile file> = file;

        this.<com.sleepycat.je.log.FileSource: int readBufferSize> = readBufferSize;

        this.<com.sleepycat.je.log.FileSource: com.sleepycat.je.log.FileManager fileManager> = fileManager;

        this.<com.sleepycat.je.log.FileSource: long fileNum> = fileNum;

        this.<com.sleepycat.je.log.FileSource: int logVersion> = logVersion;

        return;
    }

    public java.nio.ByteBuffer getBytes(long, int) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.log.FileSource this;
        long fileOffset, $l0;
        int numBytes;
        java.nio.ByteBuffer destBuf;
        com.sleepycat.je.log.FileManager $r0;
        java.io.RandomAccessFile $r1;
        boolean $z0, $z1;
        java.lang.AssertionError $r2;

        this := @this: com.sleepycat.je.log.FileSource;

        fileOffset := @parameter0: long;

        numBytes := @parameter1: int;

        destBuf = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(numBytes);

        $r0 = this.<com.sleepycat.je.log.FileSource: com.sleepycat.je.log.FileManager fileManager>;

        $r1 = this.<com.sleepycat.je.log.FileSource: java.io.RandomAccessFile file>;

        $l0 = this.<com.sleepycat.je.log.FileSource: long fileNum>;

        virtualinvoke $r0.<com.sleepycat.je.log.FileManager: void readFromFile(java.io.RandomAccessFile,java.nio.ByteBuffer,long,long)>($r1, destBuf, fileOffset, $l0);

        $z0 = <com.sleepycat.je.log.FileSource: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <com.sleepycat.je.dbi.EnvironmentImpl: boolean maybeForceYield()>();

        if $z1 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        virtualinvoke destBuf.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        return destBuf;
    }

    public java.nio.ByteBuffer getBytes(long) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.log.FileSource this;
        long fileOffset;
        int $i0;
        java.nio.ByteBuffer $r0;

        this := @this: com.sleepycat.je.log.FileSource;

        fileOffset := @parameter0: long;

        $i0 = this.<com.sleepycat.je.log.FileSource: int readBufferSize>;

        $r0 = virtualinvoke this.<com.sleepycat.je.log.FileSource: java.nio.ByteBuffer getBytes(long,int)>(fileOffset, $i0);

        return $r0;
    }

    public int getLogVersion()
    {
        com.sleepycat.je.log.FileSource this;
        int $i0;

        this := @this: com.sleepycat.je.log.FileSource;

        $i0 = this.<com.sleepycat.je.log.FileSource: int logVersion>;

        return $i0;
    }


