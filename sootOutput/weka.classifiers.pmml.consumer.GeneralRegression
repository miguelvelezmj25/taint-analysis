    public void <init>(org.w3c.dom.Element, weka.core.Instances, weka.core.pmml.MiningSchema) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.GeneralRegression this;
        org.w3c.dom.Element model;
        weka.core.Instances dataDictionary;
        weka.core.pmml.MiningSchema miningSchema;
        java.lang.String mType, cLink, link, linkP, trials, trialsV, mName, fName, algName, distribution, distP, offsetV, offsetVal, $r7, $r12, $r15, $r20, $r25, $r30, $r35, $r40;
        weka.classifiers.pmml.consumer.GeneralRegression$ModelType[] l6;
        weka.classifiers.pmml.consumer.GeneralRegression$ModelType m, $r0, $r13, $r14, $r21, $r22, $r23, $r24;
        weka.classifiers.pmml.consumer.GeneralRegression$CumulativeLinkFunction c, $r1;
        weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction l, $r2;
        java.lang.IllegalArgumentException ex, ex, ex, ex, $r31, $r33, $r41, $r43;
        weka.classifiers.pmml.consumer.GeneralRegression$Distribution[] l10;
        int l11, l7#39, l8#41, l8#76, l9#78, l8#116, l9#118, $i0, $i1, $i2, $i3, $i4, $i5, l12#211, $i6, $i7, $i8;
        weka.classifiers.pmml.consumer.GeneralRegression$Distribution d, $r3;
        java.util.ArrayList $r4, $r5, $r6;
        boolean found#35, $z0, found#71, $z1, found#111, $z2, $z3, found#206, $z4;
        java.lang.Exception $r8, $r16, $r26, $r32, $r34, $r36, $r42, $r44;
        java.lang.StringBuilder $r9, $r10, $r11, $r17, $r18, $r19, $r27, $r28, $r29, $r37, $r38, $r39;
        weka.classifiers.pmml.consumer.GeneralRegression$CumulativeLinkFunction[] l7#73;
        weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction[] l7#113;
        double $d0, $d1, $d2, $d3;

        this := @this: weka.classifiers.pmml.consumer.GeneralRegression;

        model := @parameter0: org.w3c.dom.Element;

        dataDictionary := @parameter1: weka.core.Instances;

        miningSchema := @parameter2: weka.core.pmml.MiningSchema;

        specialinvoke this.<weka.classifiers.pmml.consumer.PMMLClassifier: void <init>(weka.core.Instances,weka.core.pmml.MiningSchema)>(dataDictionary, miningSchema);

        $r0 = <weka.classifiers.pmml.consumer.GeneralRegression$ModelType: weka.classifiers.pmml.consumer.GeneralRegression$ModelType REGRESSION>;

        this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$ModelType m_modelType> = $r0;

        this.<weka.classifiers.pmml.consumer.GeneralRegression: int m_functionType> = 0;

        $r1 = <weka.classifiers.pmml.consumer.GeneralRegression$CumulativeLinkFunction: weka.classifiers.pmml.consumer.GeneralRegression$CumulativeLinkFunction NONE>;

        this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$CumulativeLinkFunction m_cumulativeLinkFunction> = $r1;

        $r2 = <weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction: weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction NONE>;

        this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction m_linkFunction> = $r2;

        this.<weka.classifiers.pmml.consumer.GeneralRegression: double m_linkParameter> = #NaN;

        this.<weka.classifiers.pmml.consumer.GeneralRegression: double m_trialsValue> = #NaN;

        $r3 = <weka.classifiers.pmml.consumer.GeneralRegression$Distribution: weka.classifiers.pmml.consumer.GeneralRegression$Distribution NORMAL>;

        this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$Distribution m_distribution> = $r3;

        this.<weka.classifiers.pmml.consumer.GeneralRegression: double m_distParameter> = #NaN;

        this.<weka.classifiers.pmml.consumer.GeneralRegression: double m_offsetValue> = #NaN;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        this.<weka.classifiers.pmml.consumer.GeneralRegression: java.util.ArrayList m_parameterList> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        this.<weka.classifiers.pmml.consumer.GeneralRegression: java.util.ArrayList m_factorList> = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        this.<weka.classifiers.pmml.consumer.GeneralRegression: java.util.ArrayList m_covariateList> = $r6;

        mType = interfaceinvoke model.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("modelType");

        found#35 = 0;

        l6 = staticinvoke <weka.classifiers.pmml.consumer.GeneralRegression$ModelType: weka.classifiers.pmml.consumer.GeneralRegression$ModelType[] values()>();

        l7#39 = lengthof l6;

        l8#41 = 0;

     label01:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l8#41);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l7#39);

        if l8#41 >= l7#39 goto label03;

        m = l6[l8#41];

        $r7 = virtualinvoke m.<weka.classifiers.pmml.consumer.GeneralRegression$ModelType: java.lang.String toString()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(mType);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label02;

        this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$ModelType m_modelType> = m;

        found#35 = 1;

        goto label03;

     label02:
        l8#41 = l8#41 + 1;

        goto label01;

     label03:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(found#35);

        if found#35 != 0 goto label04;

        $r8 = new java.lang.Exception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[GeneralRegression] unknown model type: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(mType);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.Exception: void <init>(java.lang.String)>($r12);

        throw $r8;

     label04:
        $r13 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$ModelType m_modelType>;

        $r14 = <weka.classifiers.pmml.consumer.GeneralRegression$ModelType: weka.classifiers.pmml.consumer.GeneralRegression$ModelType ORDINALMULTINOMIAL>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r13);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r14);

        if $r13 != $r14 goto label09;

        cLink = interfaceinvoke model.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("cumulativeLink");

        found#71 = 0;

        l7#73 = staticinvoke <weka.classifiers.pmml.consumer.GeneralRegression$CumulativeLinkFunction: weka.classifiers.pmml.consumer.GeneralRegression$CumulativeLinkFunction[] values()>();

        l8#76 = lengthof l7#73;

        l9#78 = 0;

     label05:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l9#78);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l8#76);

        if l9#78 >= l8#76 goto label07;

        c = l7#73[l9#78];

        $r15 = virtualinvoke c.<weka.classifiers.pmml.consumer.GeneralRegression$CumulativeLinkFunction: java.lang.String toString()>();

        $z1 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(cLink);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label06;

        this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$CumulativeLinkFunction m_cumulativeLinkFunction> = c;

        found#71 = 1;

        goto label07;

     label06:
        l9#78 = l9#78 + 1;

        goto label05;

     label07:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(found#71);

        if found#71 != 0 goto label08;

        $r16 = new java.lang.Exception;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[GeneralRegression] cumulative link function ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(cLink);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.Exception: void <init>(java.lang.String)>($r20);

        throw $r16;

     label08:
        goto label23;

     label09:
        $r21 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$ModelType m_modelType>;

        $r22 = <weka.classifiers.pmml.consumer.GeneralRegression$ModelType: weka.classifiers.pmml.consumer.GeneralRegression$ModelType GENERALIZEDLINEAR>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r21);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r22);

        if $r21 == $r22 goto label10;

        $r23 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$ModelType m_modelType>;

        $r24 = <weka.classifiers.pmml.consumer.GeneralRegression$ModelType: weka.classifiers.pmml.consumer.GeneralRegression$ModelType GENERALLINEAR>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r23);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r24);

        if $r23 != $r24 goto label23;

     label10:
        link = interfaceinvoke model.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("linkFunction");

        found#111 = 0;

        l7#113 = staticinvoke <weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction: weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction[] values()>();

        l8#116 = lengthof l7#113;

        l9#118 = 0;

     label11:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l9#118);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l8#116);

        if l9#118 >= l8#116 goto label13;

        l = l7#113[l9#118];

        $r25 = virtualinvoke l.<weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction: java.lang.String toString()>();

        $z2 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>(link);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label12;

        this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction m_linkFunction> = l;

        found#111 = 1;

        goto label13;

     label12:
        l9#118 = l9#118 + 1;

        goto label11;

     label13:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(found#111);

        if found#111 != 0 goto label14;

        $r26 = new java.lang.Exception;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[GeneralRegression] unknown link function ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(link);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.lang.Exception: void <init>(java.lang.String)>($r30);

        throw $r26;

     label14:
        linkP = interfaceinvoke model.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("linkParameter");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(linkP);

        if linkP == null goto label18;

        $i0 = virtualinvoke linkP.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label18;

     label15:
        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(linkP);

        this.<weka.classifiers.pmml.consumer.GeneralRegression: double m_linkParameter> = $d0;

     label16:
        goto label18;

     label17:
        $r31 := @caughtexception;

        ex = $r31;

        $r32 = new java.lang.Exception;

        specialinvoke $r32.<java.lang.Exception: void <init>(java.lang.String)>("[GeneralRegression] unable to parse the link parameter");

        throw $r32;

     label18:
        trials = interfaceinvoke model.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("trialsVariable");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(trials);

        if trials == null goto label19;

        $i1 = virtualinvoke trials.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 0 goto label19;

        this.<weka.classifiers.pmml.consumer.GeneralRegression: java.lang.String m_trialsVariable> = trials;

     label19:
        trialsV = interfaceinvoke model.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("trialsValue");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(trialsV);

        if trialsV == null goto label23;

        $i2 = virtualinvoke trialsV.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 <= 0 goto label23;

     label20:
        $d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(trialsV);

        this.<weka.classifiers.pmml.consumer.GeneralRegression: double m_trialsValue> = $d1;

     label21:
        goto label23;

     label22:
        $r33 := @caughtexception;

        ex = $r33;

        $r34 = new java.lang.Exception;

        specialinvoke $r34.<java.lang.Exception: void <init>(java.lang.String)>("[GeneralRegression] unable to parse the trials value");

        throw $r34;

     label23:
        mName = interfaceinvoke model.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("modelName");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(mName);

        if mName == null goto label24;

        $i3 = virtualinvoke mName.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 <= 0 goto label24;

        this.<weka.classifiers.pmml.consumer.GeneralRegression: java.lang.String m_modelName> = mName;

     label24:
        fName = interfaceinvoke model.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("functionName");

        $z3 = virtualinvoke fName.<java.lang.String: boolean equals(java.lang.Object)>("classification");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label25;

        this.<weka.classifiers.pmml.consumer.GeneralRegression: int m_functionType> = 1;

     label25:
        algName = interfaceinvoke model.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("algorithmName");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(algName);

        if algName == null goto label26;

        $i4 = virtualinvoke algName.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 <= 0 goto label26;

        this.<weka.classifiers.pmml.consumer.GeneralRegression: java.lang.String m_algorithmName> = algName;

     label26:
        distribution = interfaceinvoke model.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("distribution");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(distribution);

        if distribution == null goto label30;

        $i5 = virtualinvoke distribution.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i5 <= 0 goto label30;

        found#206 = 0;

        l10 = staticinvoke <weka.classifiers.pmml.consumer.GeneralRegression$Distribution: weka.classifiers.pmml.consumer.GeneralRegression$Distribution[] values()>();

        l11 = lengthof l10;

        l12#211 = 0;

     label27:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l12#211);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l11);

        if l12#211 >= l11 goto label29;

        d = l10[l12#211];

        $r35 = virtualinvoke d.<weka.classifiers.pmml.consumer.GeneralRegression$Distribution: java.lang.String toString()>();

        $z4 = virtualinvoke $r35.<java.lang.String: boolean equals(java.lang.Object)>(distribution);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label28;

        this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$Distribution m_distribution> = d;

        found#206 = 1;

        goto label29;

     label28:
        l12#211 = l12#211 + 1;

        goto label27;

     label29:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(found#206);

        if found#206 != 0 goto label30;

        $r36 = new java.lang.Exception;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[GeneralRegression] unknown distribution type ");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(distribution);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r36.<java.lang.Exception: void <init>(java.lang.String)>($r40);

        throw $r36;

     label30:
        distP = interfaceinvoke model.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("distParameter");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(distP);

        if distP == null goto label34;

        $i6 = virtualinvoke distP.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if $i6 <= 0 goto label34;

     label31:
        $d2 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(distP);

        this.<weka.classifiers.pmml.consumer.GeneralRegression: double m_distParameter> = $d2;

     label32:
        goto label34;

     label33:
        $r41 := @caughtexception;

        ex = $r41;

        $r42 = new java.lang.Exception;

        specialinvoke $r42.<java.lang.Exception: void <init>(java.lang.String)>("[GeneralRegression] unable to parse the distribution parameter");

        throw $r42;

     label34:
        offsetV = interfaceinvoke model.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("offsetVariable");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(offsetV);

        if offsetV == null goto label35;

        $i7 = virtualinvoke offsetV.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if $i7 <= 0 goto label35;

        this.<weka.classifiers.pmml.consumer.GeneralRegression: java.lang.String m_offsetVariable> = offsetV;

     label35:
        offsetVal = interfaceinvoke model.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("offsetValue");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(offsetVal);

        if offsetVal == null goto label39;

        $i8 = virtualinvoke offsetVal.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if $i8 <= 0 goto label39;

     label36:
        $d3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(offsetVal);

        this.<weka.classifiers.pmml.consumer.GeneralRegression: double m_offsetValue> = $d3;

     label37:
        goto label39;

     label38:
        $r43 := @caughtexception;

        ex = $r43;

        $r44 = new java.lang.Exception;

        specialinvoke $r44.<java.lang.Exception: void <init>(java.lang.String)>("[GeneralRegression] unable to parse the offset value");

        throw $r44;

     label39:
        virtualinvoke this.<weka.classifiers.pmml.consumer.GeneralRegression: void readParameterList(org.w3c.dom.Element)>(model);

        virtualinvoke this.<weka.classifiers.pmml.consumer.GeneralRegression: void readFactorsAndCovariates(org.w3c.dom.Element,java.lang.String)>(model, "FactorList");

        virtualinvoke this.<weka.classifiers.pmml.consumer.GeneralRegression: void readFactorsAndCovariates(org.w3c.dom.Element,java.lang.String)>(model, "CovariateList");

        virtualinvoke this.<weka.classifiers.pmml.consumer.GeneralRegression: void readPPMatrix(org.w3c.dom.Element)>(model);

        specialinvoke this.<weka.classifiers.pmml.consumer.GeneralRegression: void readParamMatrix(org.w3c.dom.Element)>(model);

        return;

        catch java.lang.IllegalArgumentException from label15 to label16 with label17;
        catch java.lang.IllegalArgumentException from label20 to label21 with label22;
        catch java.lang.IllegalArgumentException from label31 to label32 with label33;
        catch java.lang.IllegalArgumentException from label36 to label37 with label38;
    }

    protected void readParameterList(org.w3c.dom.Element) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.GeneralRegression this;
        org.w3c.dom.Element model, $r0, $r2, $r4;
        org.w3c.dom.NodeList paramL, parameterList;
        org.w3c.dom.Node paramN, parameter;
        weka.classifiers.pmml.consumer.GeneralRegression$Parameter p, $r1;
        java.lang.String label, $r3;
        int $i0, i#18, $i2, $i4;
        short $s1, $s3;
        java.util.ArrayList $r5;
        java.lang.Exception $r6;

        this := @this: weka.classifiers.pmml.consumer.GeneralRegression;

        model := @parameter0: org.w3c.dom.Element;

        paramL = interfaceinvoke model.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("ParameterList");

        $i0 = interfaceinvoke paramL.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 1 goto label5;

        paramN = interfaceinvoke paramL.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        $s1 = interfaceinvoke paramN.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s1);

        if $s1 != 1 goto label4;

        $r0 = (org.w3c.dom.Element) paramN;

        parameterList = interfaceinvoke $r0.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("Parameter");

        i#18 = 0;

     label1:
        $i2 = interfaceinvoke parameterList.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#18);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#18 >= $i2 goto label4;

        parameter = interfaceinvoke parameterList.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i#18);

        $s3 = interfaceinvoke parameter.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s3);

        if $s3 != 1 goto label3;

        $r1 = new weka.classifiers.pmml.consumer.GeneralRegression$Parameter;

        specialinvoke $r1.<weka.classifiers.pmml.consumer.GeneralRegression$Parameter: void <init>()>();

        p = $r1;

        $r2 = (org.w3c.dom.Element) parameter;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("name");

        p.<weka.classifiers.pmml.consumer.GeneralRegression$Parameter: java.lang.String m_name> = $r3;

        $r4 = (org.w3c.dom.Element) parameter;

        label = interfaceinvoke $r4.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("label");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(label);

        if label == null goto label2;

        $i4 = virtualinvoke label.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 <= 0 goto label2;

        p.<weka.classifiers.pmml.consumer.GeneralRegression$Parameter: java.lang.String m_label> = label;

     label2:
        $r5 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.util.ArrayList m_parameterList>;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(p);

     label3:
        i#18 = i#18 + 1;

        goto label1;

     label4:
        goto label6;

     label5:
        $r6 = new java.lang.Exception;

        specialinvoke $r6.<java.lang.Exception: void <init>(java.lang.String)>("[GeneralRegression] more than one parameter list!");

        throw $r6;

     label6:
        return;
    }

    protected void readFactorsAndCovariates(org.w3c.dom.Element, java.lang.String) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.GeneralRegression this;
        org.w3c.dom.Element model, $r1, $r3;
        java.lang.String factorOrCovariate, $r4, $r6, $r7, $r13, $r16, $r22;
        weka.core.Instances miningSchemaI;
        org.w3c.dom.NodeList factorL, predL;
        org.w3c.dom.Node factor, pred;
        weka.classifiers.pmml.consumer.GeneralRegression$Predictor p, $r2;
        weka.core.pmml.MiningSchema $r0;
        int $i0, i#21, $i2, j#41, $i4, $i5;
        short $s1, $s3;
        boolean found#39, $z0, $z1;
        weka.core.Attribute $r5;
        java.util.ArrayList $r8, $r9;
        java.lang.Exception $r10, $r17;
        java.lang.StringBuilder $r11, $r12, $r14, $r15, $r18, $r19, $r20, $r21;

        this := @this: weka.classifiers.pmml.consumer.GeneralRegression;

        model := @parameter0: org.w3c.dom.Element;

        factorOrCovariate := @parameter1: java.lang.String;

        $r0 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.core.pmml.MiningSchema m_miningSchema>;

        miningSchemaI = virtualinvoke $r0.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        factorL = interfaceinvoke model.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>(factorOrCovariate);

        $i0 = interfaceinvoke factorL.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 1 goto label09;

        factor = interfaceinvoke factorL.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        $s1 = interfaceinvoke factor.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s1);

        if $s1 != 1 goto label08;

        $r1 = (org.w3c.dom.Element) factor;

        predL = interfaceinvoke $r1.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("Predictor");

        i#21 = 0;

     label01:
        $i2 = interfaceinvoke predL.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#21);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#21 >= $i2 goto label08;

        pred = interfaceinvoke predL.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i#21);

        $s3 = interfaceinvoke pred.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s3);

        if $s3 != 1 goto label07;

        $r2 = new weka.classifiers.pmml.consumer.GeneralRegression$Predictor;

        specialinvoke $r2.<weka.classifiers.pmml.consumer.GeneralRegression$Predictor: void <init>()>();

        p = $r2;

        $r3 = (org.w3c.dom.Element) pred;

        $r4 = interfaceinvoke $r3.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("name");

        p.<weka.classifiers.pmml.consumer.GeneralRegression$Predictor: java.lang.String m_name> = $r4;

        found#39 = 0;

        j#41 = 0;

     label02:
        $i4 = virtualinvoke miningSchemaI.<weka.core.Instances: int numAttributes()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#41);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if j#41 >= $i4 goto label04;

        $r5 = virtualinvoke miningSchemaI.<weka.core.Instances: weka.core.Attribute attribute(int)>(j#41);

        $r6 = virtualinvoke $r5.<weka.core.Attribute: java.lang.String name()>();

        $r7 = p.<weka.classifiers.pmml.consumer.GeneralRegression$Predictor: java.lang.String m_name>;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label03;

        found#39 = 1;

        p.<weka.classifiers.pmml.consumer.GeneralRegression$Predictor: int m_miningSchemaIndex> = j#41;

        goto label04;

     label03:
        j#41 = j#41 + 1;

        goto label02;

     label04:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(found#39);

        if found#39 == 0 goto label06;

        $z1 = virtualinvoke factorOrCovariate.<java.lang.String: boolean equals(java.lang.Object)>("FactorList");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label05;

        $r8 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.util.ArrayList m_factorList>;

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>(p);

        goto label07;

     label05:
        $r9 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.util.ArrayList m_covariateList>;

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>(p);

        goto label07;

     label06:
        $r10 = new java.lang.Exception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[GeneralRegression] reading factors and covariates - unable to find predictor ");

        $r13 = p.<weka.classifiers.pmml.consumer.GeneralRegression$Predictor: java.lang.String m_name>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in the mining schema");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.Exception: void <init>(java.lang.String)>($r16);

        throw $r10;

     label07:
        i#21 = i#21 + 1;

        goto label01;

     label08:
        goto label10;

     label09:
        $i5 = interfaceinvoke factorL.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i5 <= 1 goto label10;

        $r17 = new java.lang.Exception;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[GeneralRegression] more than one ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(factorOrCovariate);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("! ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.Exception: void <init>(java.lang.String)>($r22);

        throw $r17;

     label10:
        return;
    }

    protected void readPPMatrix(org.w3c.dom.Element) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.GeneralRegression this;
        org.w3c.dom.Element model, $r3, $r4, $r5, $r6;
        weka.core.Instances miningSchemaI;
        org.w3c.dom.NodeList matrixL, cellL;
        org.w3c.dom.Node ppM, cell;
        java.lang.String predictorName, parameterName, value, $r11, $r17, $r23, $r30, $r36, $r38, $r44;
        weka.core.Attribute att, $r24;
        weka.classifiers.pmml.consumer.GeneralRegression$PPCell ppc, $r45;
        weka.core.pmml.MiningSchema $r0;
        int $i0, $i1, $i2, i#28, $i4, parameterIndex#55, j#57, $i6, predictorIndex#94, $i7, $i8, $i9;
        java.util.ArrayList $r1, $r7, $r8;
        weka.classifiers.pmml.consumer.GeneralRegression$PPCell[][] $r2, $r46;
        short $s3, $s5;
        double expOrIndex#51, expOrIndex#91;
        byte predictorIndex#53, $b10;
        java.lang.Object $r9;
        weka.classifiers.pmml.consumer.GeneralRegression$Parameter $r10;
        boolean $z0, $z1;
        java.lang.Exception $r12, $r19, $r26, $r31, $r39, $r48;
        java.lang.StringBuilder $r13, $r14, $r15, $r16, $r20, $r21, $r22, $r27, $r28, $r29, $r32, $r33, $r34, $r35, $r37, $r40, $r41, $r42, $r43;
        weka.classifiers.pmml.consumer.GeneralRegression$Predictor p#87, p#109;
        java.lang.IllegalArgumentException $r18, ex#96, $r25, ex#119;
        weka.classifiers.pmml.consumer.GeneralRegression$PPCell[] $r47;

        this := @this: weka.classifiers.pmml.consumer.GeneralRegression;

        model := @parameter0: org.w3c.dom.Element;

        $r0 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.core.pmml.MiningSchema m_miningSchema>;

        miningSchemaI = virtualinvoke $r0.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        matrixL = interfaceinvoke model.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("PPMatrix");

        $i0 = interfaceinvoke matrixL.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 1 goto label20;

        $r1 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.util.ArrayList m_parameterList>;

        $i1 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $i2 = virtualinvoke miningSchemaI.<weka.core.Instances: int numAttributes()>();

        $r2 = newmultiarray (weka.classifiers.pmml.consumer.GeneralRegression$PPCell)[$i1][$i2];

        this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$PPCell[][] m_ppMatrix> = $r2;

        ppM = interfaceinvoke matrixL.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        $s3 = interfaceinvoke ppM.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s3);

        if $s3 != 1 goto label19;

        $r3 = (org.w3c.dom.Element) ppM;

        cellL = interfaceinvoke $r3.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("PPCell");

        i#28 = 0;

     label01:
        $i4 = interfaceinvoke cellL.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#28);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if i#28 >= $i4 goto label19;

        cell = interfaceinvoke cellL.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i#28);

        $s5 = interfaceinvoke cell.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s5);

        if $s5 != 1 goto label18;

        $r4 = (org.w3c.dom.Element) cell;

        predictorName = interfaceinvoke $r4.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("predictorName");

        $r5 = (org.w3c.dom.Element) cell;

        parameterName = interfaceinvoke $r5.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("parameterName");

        $r6 = (org.w3c.dom.Element) cell;

        value = interfaceinvoke $r6.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("value");

        expOrIndex#51 = -1.0;

        predictorIndex#53 = -1;

        parameterIndex#55 = -1;

        j#57 = 0;

     label02:
        $r7 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.util.ArrayList m_parameterList>;

        $i6 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#57);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if j#57 >= $i6 goto label04;

        $r8 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.util.ArrayList m_parameterList>;

        $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>(j#57);

        $r10 = (weka.classifiers.pmml.consumer.GeneralRegression$Parameter) $r9;

        $r11 = $r10.<weka.classifiers.pmml.consumer.GeneralRegression$Parameter: java.lang.String m_name>;

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(parameterName);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label03;

        parameterIndex#55 = j#57;

        goto label04;

     label03:
        j#57 = j#57 + 1;

        goto label02;

     label04:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(parameterIndex#55);

        if parameterIndex#55 != -1 goto label05;

        $r12 = new java.lang.Exception;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[GeneralRegression] unable to find parameter name ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(parameterName);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in parameter list");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.Exception: void <init>(java.lang.String)>($r17);

        throw $r12;

     label05:
        p#87 = specialinvoke this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$Predictor getCovariate(java.lang.String)>(predictorName);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(p#87);

        if p#87 == null goto label09;

     label06:
        expOrIndex#91 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(value);

        predictorIndex#94 = p#87.<weka.classifiers.pmml.consumer.GeneralRegression$Predictor: int m_miningSchemaIndex>;

     label07:
        goto label17;

     label08:
        $r18 := @caughtexception;

        ex#96 = $r18;

        $r19 = new java.lang.Exception;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[GeneralRegression] unable to parse PPCell value: ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(value);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.Exception: void <init>(java.lang.String)>($r23);

        throw $r19;

     label09:
        p#109 = specialinvoke this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$Predictor getFactor(java.lang.String)>(predictorName);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(p#109);

        if p#109 == null goto label15;

        $i7 = p#109.<weka.classifiers.pmml.consumer.GeneralRegression$Predictor: int m_miningSchemaIndex>;

        $r24 = virtualinvoke miningSchemaI.<weka.core.Instances: weka.core.Attribute attribute(int)>($i7);

        $z1 = virtualinvoke $r24.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label13;

     label10:
        expOrIndex#91 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(value);

     label11:
        goto label16;

     label12:
        $r25 := @caughtexception;

        ex#119 = $r25;

        $r26 = new java.lang.Exception;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[GeneralRegresion] unable to parse PPCell value: ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(value);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.lang.Exception: void <init>(java.lang.String)>($r30);

        throw $r26;

     label13:
        $i8 = p#109.<weka.classifiers.pmml.consumer.GeneralRegression$Predictor: int m_miningSchemaIndex>;

        att = virtualinvoke miningSchemaI.<weka.core.Instances: weka.core.Attribute attribute(int)>($i8);

        $i9 = virtualinvoke att.<weka.core.Attribute: int indexOfValue(java.lang.String)>(value);

        expOrIndex#91 = (double) $i9;

        $b10 = expOrIndex#91 cmpl -1.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b10);

        if $b10 != 0 goto label14;

        $r31 = new java.lang.Exception;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[GeneralRegression] unable to find PPCell value ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(value);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in mining schema attribute ");

        $r36 = virtualinvoke att.<weka.core.Attribute: java.lang.String name()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<java.lang.Exception: void <init>(java.lang.String)>($r38);

        throw $r31;

     label14:
        goto label16;

     label15:
        $r39 = new java.lang.Exception;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[GeneralRegression] cant find predictor ");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(predictorName);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("in either the factors list or the covariates list");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r39.<java.lang.Exception: void <init>(java.lang.String)>($r44);

        throw $r39;

     label16:
        predictorIndex#94 = p#109.<weka.classifiers.pmml.consumer.GeneralRegression$Predictor: int m_miningSchemaIndex>;

     label17:
        $r45 = new weka.classifiers.pmml.consumer.GeneralRegression$PPCell;

        specialinvoke $r45.<weka.classifiers.pmml.consumer.GeneralRegression$PPCell: void <init>()>();

        ppc = $r45;

        ppc.<weka.classifiers.pmml.consumer.GeneralRegression$PPCell: java.lang.String m_predictorName> = predictorName;

        ppc.<weka.classifiers.pmml.consumer.GeneralRegression$PPCell: java.lang.String m_parameterName> = parameterName;

        ppc.<weka.classifiers.pmml.consumer.GeneralRegression$PPCell: double m_value> = expOrIndex#91;

        $r46 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$PPCell[][] m_ppMatrix>;

        $r47 = $r46[parameterIndex#55];

        $r47[predictorIndex#94] = ppc;

     label18:
        i#28 = i#28 + 1;

        goto label01;

     label19:
        goto label21;

     label20:
        $r48 = new java.lang.Exception;

        specialinvoke $r48.<java.lang.Exception: void <init>(java.lang.String)>("[GeneralRegression] more than one PPMatrix!");

        throw $r48;

     label21:
        return;

        catch java.lang.IllegalArgumentException from label06 to label07 with label08;
        catch java.lang.IllegalArgumentException from label10 to label11 with label12;
    }

    private void readParamMatrix(org.w3c.dom.Element) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.GeneralRegression this;
        org.w3c.dom.Element model, matrix, $r17, $r18, $r19, $r20;
        weka.core.Instances miningSchemaI;
        weka.core.Attribute classAtt;
        org.w3c.dom.NodeList matrixL, pcellL;
        org.w3c.dom.Node pcell, $r2;
        java.lang.String targetCatName, coefficient, df, paramName#86, $r25, $r29, $r38, $r44, $r52, $r59;
        weka.classifiers.pmml.consumer.GeneralRegression$PCell p, $r45;
        weka.core.pmml.MiningSchema $r0, $r3, $r5, $r10, $r13;
        int $i0, $i1, $i2, $i3, $i4, $i5, i#68, $i6, targetCategoryIndex#73, parameterIndex#75, j#100, $i8, $i9, $i10, $i11, j#212, $i12;
        java.lang.Exception $r1, $r4, $r9, $r12, $r33, $r39, $r47, $r54;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        weka.core.pmml.TargetMetaInfo $r6, $r11;
        weka.core.pmml.FieldMetaInfo$Optype $r7, $r8;
        java.util.ArrayList targetVals#44, $r15, $r21, $r22, $r26, $r30;
        weka.classifiers.pmml.consumer.GeneralRegression$PCell[][] $r16, $r60, $r62, $r63;
        short $s7;
        java.lang.Object $r23, $r27, $r31;
        weka.classifiers.pmml.consumer.GeneralRegression$Parameter $r24, $r28, $r32;
        java.lang.StringBuilder $r34, $r35, $r36, $r37, $r40, $r41, $r42, $r43, $r48, $r49, $r50, $r51, $r55, $r56, $r57, $r58;
        double $d0;
        java.lang.IllegalArgumentException $r46, $r53;
        weka.classifiers.pmml.consumer.GeneralRegression$PCell[] $r61, $r64;

        this := @this: weka.classifiers.pmml.consumer.GeneralRegression;

        model := @parameter0: org.w3c.dom.Element;

        $r0 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.core.pmml.MiningSchema m_miningSchema>;

        miningSchemaI = virtualinvoke $r0.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        classAtt = virtualinvoke miningSchemaI.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        matrixL = interfaceinvoke model.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("ParamMatrix");

        $i0 = interfaceinvoke matrixL.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 == 1 goto label01;

        $r1 = new java.lang.Exception;

        specialinvoke $r1.<java.lang.Exception: void <init>(java.lang.String)>("[GeneralRegression] more than one ParamMatrix!");

        throw $r1;

     label01:
        $r2 = interfaceinvoke matrixL.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        matrix = (org.w3c.dom.Element) $r2;

        $i1 = this.<weka.classifiers.pmml.consumer.GeneralRegression: int m_functionType>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 != 1 goto label05;

        $z0 = virtualinvoke classAtt.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label05;

        $r3 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.core.pmml.MiningSchema m_miningSchema>;

        $z1 = virtualinvoke $r3.<weka.core.pmml.MiningSchema: boolean hasTargetMetaData()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label02;

        $r4 = new java.lang.Exception;

        specialinvoke $r4.<java.lang.Exception: void <init>(java.lang.String)>("[GeneralRegression] function type is classification and class attribute in mining schema is numeric, however, there is no Target element specifying legal discrete values for the target!");

        throw $r4;

     label02:
        $r5 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.core.pmml.MiningSchema m_miningSchema>;

        $r6 = virtualinvoke $r5.<weka.core.pmml.MiningSchema: weka.core.pmml.TargetMetaInfo getTargetMetaData()>();

        $r7 = virtualinvoke $r6.<weka.core.pmml.TargetMetaInfo: weka.core.pmml.FieldMetaInfo$Optype getOptype()>();

        $r8 = <weka.core.pmml.FieldMetaInfo$Optype: weka.core.pmml.FieldMetaInfo$Optype CATEGORICAL>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r8);

        if $r7 == $r8 goto label03;

        $r9 = new java.lang.Exception;

        specialinvoke $r9.<java.lang.Exception: void <init>(java.lang.String)>("[GeneralRegression] function type is classification and class attribute in mining schema is numeric, however Target element in PMML does not have optype categorical!");

        throw $r9;

     label03:
        $r10 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.core.pmml.MiningSchema m_miningSchema>;

        $r11 = virtualinvoke $r10.<weka.core.pmml.MiningSchema: weka.core.pmml.TargetMetaInfo getTargetMetaData()>();

        targetVals#44 = virtualinvoke $r11.<weka.core.pmml.TargetMetaInfo: java.util.ArrayList getValues()>();

        $i2 = virtualinvoke targetVals#44.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 != 0 goto label04;

        $r12 = new java.lang.Exception;

        specialinvoke $r12.<java.lang.Exception: void <init>(java.lang.String)>("[GeneralRegression] function type is classification and class attribute in mining schema is numeric, however Target element in PMML does not have any discrete values defined!");

        throw $r12;

     label04:
        $r13 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.core.pmml.MiningSchema m_miningSchema>;

        $i3 = virtualinvoke miningSchemaI.<weka.core.Instances: int classIndex()>();

        virtualinvoke $r13.<weka.core.pmml.MiningSchema: void convertNumericAttToNominal(int,java.util.ArrayList)>($i3, targetVals#44);

     label05:
        $z2 = virtualinvoke classAtt.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label06;

        $i4 = 1;

        goto label07;

     label06:
        $i4 = virtualinvoke classAtt.<weka.core.Attribute: int numValues()>();

     label07:
        $r15 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.util.ArrayList m_parameterList>;

        $i5 = virtualinvoke $r15.<java.util.ArrayList: int size()>();

        $r16 = newmultiarray (weka.classifiers.pmml.consumer.GeneralRegression$PCell)[$i4][$i5];

        this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$PCell[][] m_paramMatrix> = $r16;

        pcellL = interfaceinvoke matrix.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("PCell");

        i#68 = 0;

     label08:
        $i6 = interfaceinvoke pcellL.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#68);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if i#68 >= $i6 goto label28;

        targetCategoryIndex#73 = -1;

        parameterIndex#75 = -1;

        pcell = interfaceinvoke pcellL.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i#68);

        $s7 = interfaceinvoke pcell.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s7);

        if $s7 != 1 goto label27;

        $r17 = (org.w3c.dom.Element) pcell;

        paramName#86 = interfaceinvoke $r17.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("parameterName");

        $r18 = (org.w3c.dom.Element) pcell;

        targetCatName = interfaceinvoke $r18.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("targetCategory");

        $r19 = (org.w3c.dom.Element) pcell;

        coefficient = interfaceinvoke $r19.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("beta");

        $r20 = (org.w3c.dom.Element) pcell;

        df = interfaceinvoke $r20.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("df");

        j#100 = 0;

     label09:
        $r21 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.util.ArrayList m_parameterList>;

        $i8 = virtualinvoke $r21.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#100);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if j#100 >= $i8 goto label11;

        $r22 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.util.ArrayList m_parameterList>;

        $r23 = virtualinvoke $r22.<java.util.ArrayList: java.lang.Object get(int)>(j#100);

        $r24 = (weka.classifiers.pmml.consumer.GeneralRegression$Parameter) $r23;

        $r25 = $r24.<weka.classifiers.pmml.consumer.GeneralRegression$Parameter: java.lang.String m_name>;

        $z3 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>(paramName#86);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label10;

        parameterIndex#75 = j#100;

        $r26 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.util.ArrayList m_parameterList>;

        $r27 = virtualinvoke $r26.<java.util.ArrayList: java.lang.Object get(int)>(j#100);

        $r28 = (weka.classifiers.pmml.consumer.GeneralRegression$Parameter) $r27;

        $r29 = $r28.<weka.classifiers.pmml.consumer.GeneralRegression$Parameter: java.lang.String m_label>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r29);

        if $r29 == null goto label11;

        $r30 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.util.ArrayList m_parameterList>;

        $r31 = virtualinvoke $r30.<java.util.ArrayList: java.lang.Object get(int)>(j#100);

        $r32 = (weka.classifiers.pmml.consumer.GeneralRegression$Parameter) $r31;

        paramName#86 = $r32.<weka.classifiers.pmml.consumer.GeneralRegression$Parameter: java.lang.String m_label>;

        goto label11;

     label10:
        j#100 = j#100 + 1;

        goto label09;

     label11:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(parameterIndex#75);

        if parameterIndex#75 != -1 goto label12;

        $r33 = new java.lang.Exception;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[GeneralRegression] unable to find parameter name ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(paramName#86);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in parameter list");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<java.lang.Exception: void <init>(java.lang.String)>($r38);

        throw $r33;

     label12:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(targetCatName);

        if targetCatName == null goto label15;

        $i9 = virtualinvoke targetCatName.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        if $i9 <= 0 goto label15;

        $z4 = virtualinvoke classAtt.<weka.core.Attribute: boolean isNominal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label13;

        $z5 = virtualinvoke classAtt.<weka.core.Attribute: boolean isString()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label14;

     label13:
        targetCategoryIndex#73 = virtualinvoke classAtt.<weka.core.Attribute: int indexOfValue(java.lang.String)>(targetCatName);

        goto label15;

     label14:
        $r39 = new java.lang.Exception;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[GeneralRegression] found a PCell with a named target category: ");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(targetCatName);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but class attribute is numeric in mining schema");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r39.<java.lang.Exception: void <init>(java.lang.String)>($r44);

        throw $r39;

     label15:
        $r45 = new weka.classifiers.pmml.consumer.GeneralRegression$PCell;

        specialinvoke $r45.<weka.classifiers.pmml.consumer.GeneralRegression$PCell: void <init>()>();

        p = $r45;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(targetCategoryIndex#73);

        if targetCategoryIndex#73 == -1 goto label16;

        p.<weka.classifiers.pmml.consumer.GeneralRegression$PCell: java.lang.String m_targetCategory> = targetCatName;

     label16:
        p.<weka.classifiers.pmml.consumer.GeneralRegression$PCell: java.lang.String m_parameterName> = paramName#86;

     label17:
        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(coefficient);

        p.<weka.classifiers.pmml.consumer.GeneralRegression$PCell: double m_beta> = $d0;

     label18:
        goto label20;

     label19:
        $r46 := @caughtexception;

        $r47 = new java.lang.Exception;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[GeneralRegression] unable to parse beta value ");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(coefficient);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as a double from PCell");

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r47.<java.lang.Exception: void <init>(java.lang.String)>($r52);

        throw $r47;

     label20:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(df);

        if df == null goto label24;

        $i10 = virtualinvoke df.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i10);

        if $i10 <= 0 goto label24;

     label21:
        $i11 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(df);

        p.<weka.classifiers.pmml.consumer.GeneralRegression$PCell: int m_df> = $i11;

     label22:
        goto label24;

     label23:
        $r53 := @caughtexception;

        $r54 = new java.lang.Exception;

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[GeneralRegression] unable to parse df value ");

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(df);

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as an int from PCell");

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r54.<java.lang.Exception: void <init>(java.lang.String)>($r59);

        throw $r54;

     label24:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(targetCategoryIndex#73);

        if targetCategoryIndex#73 == -1 goto label25;

        $r60 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$PCell[][] m_paramMatrix>;

        $r61 = $r60[targetCategoryIndex#73];

        $r61[parameterIndex#75] = p;

        goto label27;

     label25:
        j#212 = 0;

     label26:
        $r62 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$PCell[][] m_paramMatrix>;

        $i12 = lengthof $r62;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#212);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i12);

        if j#212 >= $i12 goto label27;

        $r63 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$PCell[][] m_paramMatrix>;

        $r64 = $r63[j#212];

        $r64[parameterIndex#75] = p;

        j#212 = j#212 + 1;

        goto label26;

     label27:
        i#68 = i#68 + 1;

        goto label08;

     label28:
        return;

        catch java.lang.IllegalArgumentException from label17 to label18 with label19;
        catch java.lang.IllegalArgumentException from label21 to label22 with label23;
    }

    private weka.classifiers.pmml.consumer.GeneralRegression$Predictor getCovariate(java.lang.String)
    {
        weka.classifiers.pmml.consumer.GeneralRegression this;
        java.lang.String predictorName, $r4;
        int i#2, $i0;
        java.util.ArrayList $r0, $r1, $r5;
        java.lang.Object $r2, $r6;
        weka.classifiers.pmml.consumer.GeneralRegression$Predictor $r3, $r7;
        boolean $z0;

        this := @this: weka.classifiers.pmml.consumer.GeneralRegression;

        predictorName := @parameter0: java.lang.String;

        i#2 = 0;

     label1:
        $r0 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.util.ArrayList m_covariateList>;

        $i0 = virtualinvoke $r0.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#2 >= $i0 goto label3;

        $r1 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.util.ArrayList m_covariateList>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>(i#2);

        $r3 = (weka.classifiers.pmml.consumer.GeneralRegression$Predictor) $r2;

        $r4 = $r3.<weka.classifiers.pmml.consumer.GeneralRegression$Predictor: java.lang.String m_name>;

        $z0 = virtualinvoke predictorName.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $r5 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.util.ArrayList m_covariateList>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i#2);

        $r7 = (weka.classifiers.pmml.consumer.GeneralRegression$Predictor) $r6;

        return $r7;

     label2:
        i#2 = i#2 + 1;

        goto label1;

     label3:
        return null;
    }

    private weka.classifiers.pmml.consumer.GeneralRegression$Predictor getFactor(java.lang.String)
    {
        weka.classifiers.pmml.consumer.GeneralRegression this;
        java.lang.String predictorName, $r4;
        int i#2, $i0;
        java.util.ArrayList $r0, $r1, $r5;
        java.lang.Object $r2, $r6;
        weka.classifiers.pmml.consumer.GeneralRegression$Predictor $r3, $r7;
        boolean $z0;

        this := @this: weka.classifiers.pmml.consumer.GeneralRegression;

        predictorName := @parameter0: java.lang.String;

        i#2 = 0;

     label1:
        $r0 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.util.ArrayList m_factorList>;

        $i0 = virtualinvoke $r0.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#2 >= $i0 goto label3;

        $r1 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.util.ArrayList m_factorList>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>(i#2);

        $r3 = (weka.classifiers.pmml.consumer.GeneralRegression$Predictor) $r2;

        $r4 = $r3.<weka.classifiers.pmml.consumer.GeneralRegression$Predictor: java.lang.String m_name>;

        $z0 = virtualinvoke predictorName.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $r5 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.util.ArrayList m_factorList>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i#2);

        $r7 = (weka.classifiers.pmml.consumer.GeneralRegression$Predictor) $r6;

        return $r7;

     label2:
        i#2 = i#2 + 1;

        goto label1;

     label3:
        return null;
    }

    public double[] distributionForInstance(weka.core.Instance) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.GeneralRegression this;
        weka.core.Instance inst;
        double[] incoming, inputParamVector, preds#15;
        java.lang.String message, $r20, $r35;
        weka.core.pmml.TargetMetaInfo targetData;
        weka.core.Instances miningSchemaI, $r0, $r2, $r5, $r10, $r15, $r18, $r26, $r30;
        boolean $z0, $z1, hasMissing#29, $z2, $z3, $z4, $z5, $z6, $z7;
        weka.core.pmml.MiningSchema $r1, $r4, $r8, $r9, $r11, $r14, $r17, $r25, $r28, $r29, $r32;
        weka.core.Attribute $r3, $r6, $r16, $r19, $r27, $r31, $r33, $r34;
        int $i0, i#31, $i1, $i2, i#98, $i3;
        weka.core.pmml.MappingInfo $r7;
        double $d0, $d1, $d2, $d3;
        java.lang.StringBuilder $r12, $r13, $r21;
        weka.gui.Logger $r22, $r24;
        java.io.PrintStream $r23;

        this := @this: weka.classifiers.pmml.consumer.GeneralRegression;

        inst := @parameter0: weka.core.Instance;

        $z0 = this.<weka.classifiers.pmml.consumer.GeneralRegression: boolean m_initialized>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label01;

        $r0 = interfaceinvoke inst.<weka.core.Instance: weka.core.Instances dataset()>();

        virtualinvoke this.<weka.classifiers.pmml.consumer.GeneralRegression: void mapToMiningSchema(weka.core.Instances)>($r0);

     label01:
        $r1 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.core.pmml.MiningSchema m_miningSchema>;

        $r2 = virtualinvoke $r1.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r3 = virtualinvoke $r2.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z1 = virtualinvoke $r3.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label02;

        preds#15 = newarray (double)[1];

        goto label03;

     label02:
        $r4 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.core.pmml.MiningSchema m_miningSchema>;

        $r5 = virtualinvoke $r4.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r6 = virtualinvoke $r5.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $i0 = virtualinvoke $r6.<weka.core.Attribute: int numValues()>();

        preds#15 = newarray (double)[$i0];

     label03:
        $r7 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.core.pmml.MappingInfo m_fieldsMap>;

        $r8 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.core.pmml.MiningSchema m_miningSchema>;

        incoming = virtualinvoke $r7.<weka.core.pmml.MappingInfo: double[] instanceToSchema(weka.core.Instance,weka.core.pmml.MiningSchema)>(inst, $r8);

        hasMissing#29 = 0;

        i#31 = 0;

     label04:
        $i1 = lengthof incoming;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#31);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#31 >= $i1 goto label06;

        $r9 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.core.pmml.MiningSchema m_miningSchema>;

        $r10 = virtualinvoke $r9.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $i2 = virtualinvoke $r10.<weka.core.Instances: int classIndex()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#31);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#31 == $i2 goto label05;

        $d0 = incoming[i#31];

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label05;

        hasMissing#29 = 1;

        goto label06;

     label05:
        i#31 = i#31 + 1;

        goto label04;

     label06:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(hasMissing#29);

        if hasMissing#29 == 0 goto label17;

        $r11 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.core.pmml.MiningSchema m_miningSchema>;

        $z3 = virtualinvoke $r11.<weka.core.pmml.MiningSchema: boolean hasTargetMetaData()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label13;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[GeneralRegression] WARNING: Instance to predict has missing value(s) but there is no missing value handling meta data and no prior probabilities/default value to fall back to. No prediction will be made (");

        $r14 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.core.pmml.MiningSchema m_miningSchema>;

        $r15 = virtualinvoke $r14.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r16 = virtualinvoke $r15.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z4 = virtualinvoke $r16.<weka.core.Attribute: boolean isNominal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label07;

        $r17 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.core.pmml.MiningSchema m_miningSchema>;

        $r18 = virtualinvoke $r17.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r19 = virtualinvoke $r18.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z5 = virtualinvoke $r19.<weka.core.Attribute: boolean isString()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label08;

     label07:
        $r20 = "zero probabilities output).";

        goto label09;

     label08:
        $r20 = "NaN output).";

     label09:
        $r21 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        message = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.gui.Logger m_log>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r22);

        if $r22 != null goto label10;

        $r23 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>(message);

        goto label11;

     label10:
        $r24 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.gui.Logger m_log>;

        interfaceinvoke $r24.<weka.gui.Logger: void logMessage(java.lang.String)>(message);

     label11:
        $r25 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.core.pmml.MiningSchema m_miningSchema>;

        $r26 = virtualinvoke $r25.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r27 = virtualinvoke $r26.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z6 = virtualinvoke $r27.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label12;

        $d1 = staticinvoke <weka.core.Utils: double missingValue()>();

        preds#15[0] = $d1;

     label12:
        return preds#15;

     label13:
        $r28 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.core.pmml.MiningSchema m_miningSchema>;

        targetData = virtualinvoke $r28.<weka.core.pmml.MiningSchema: weka.core.pmml.TargetMetaInfo getTargetMetaData()>();

        $r29 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.core.pmml.MiningSchema m_miningSchema>;

        $r30 = virtualinvoke $r29.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r31 = virtualinvoke $r30.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z7 = virtualinvoke $r31.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 == 0 goto label14;

        $d2 = virtualinvoke targetData.<weka.core.pmml.TargetMetaInfo: double getDefaultValue()>();

        preds#15[0] = $d2;

        goto label16;

     label14:
        $r32 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.core.pmml.MiningSchema m_miningSchema>;

        miningSchemaI = virtualinvoke $r32.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        i#98 = 0;

     label15:
        $r33 = virtualinvoke miningSchemaI.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $i3 = virtualinvoke $r33.<weka.core.Attribute: int numValues()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#98);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if i#98 >= $i3 goto label16;

        $r34 = virtualinvoke miningSchemaI.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $r35 = virtualinvoke $r34.<weka.core.Attribute: java.lang.String value(int)>(i#98);

        $d3 = virtualinvoke targetData.<weka.core.pmml.TargetMetaInfo: double getPriorProbability(java.lang.String)>($r35);

        preds#15[i#98] = $d3;

        i#98 = i#98 + 1;

        goto label15;

     label16:
        return preds#15;

     label17:
        inputParamVector = specialinvoke this.<weka.classifiers.pmml.consumer.GeneralRegression: double[] incomingParamVector(double[])>(incoming);

        specialinvoke this.<weka.classifiers.pmml.consumer.GeneralRegression: void computeResponses(double[],double[],double[])>(incoming, inputParamVector, preds#15);

        return preds#15;
    }

    private double[] incomingParamVector(double[]) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.GeneralRegression this;
        double[] incomingInst, incomingPV;
        weka.core.Instances miningSchemaI;
        weka.classifiers.pmml.consumer.GeneralRegression$PPCell cellEntry;
        weka.core.pmml.MiningSchema $r0;
        java.util.ArrayList $r1, $r2;
        int $i0, i#9, $i1, j#18, $i2, $i3, $i4, $i5, $i9;
        weka.classifiers.pmml.consumer.GeneralRegression$PPCell[][] $r3;
        weka.classifiers.pmml.consumer.GeneralRegression$PPCell[] $r4;
        java.lang.String $r5, $r9, $r15, $r18;
        weka.classifiers.pmml.consumer.GeneralRegression$Predictor $r6, p#36, $r10, p#64;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        java.lang.Exception $r12;
        java.lang.StringBuilder $r13, $r14, $r16, $r17;

        this := @this: weka.classifiers.pmml.consumer.GeneralRegression;

        incomingInst := @parameter0: double[];

        $r0 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.core.pmml.MiningSchema m_miningSchema>;

        miningSchemaI = virtualinvoke $r0.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r1 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.util.ArrayList m_parameterList>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        incomingPV = newarray (double)[$i0];

        i#9 = 0;

     label1:
        $r2 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.util.ArrayList m_parameterList>;

        $i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#9 >= $i1 goto label8;

        incomingPV[i#9] = 1.0;

        j#18 = 0;

     label2:
        $i2 = virtualinvoke miningSchemaI.<weka.core.Instances: int numAttributes()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#18);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if j#18 >= $i2 goto label7;

        $r3 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$PPCell[][] m_ppMatrix>;

        $r4 = $r3[i#9];

        cellEntry = $r4[j#18];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(cellEntry);

        if cellEntry == null goto label6;

        $r5 = cellEntry.<weka.classifiers.pmml.consumer.GeneralRegression$PPCell: java.lang.String m_predictorName>;

        $r6 = specialinvoke this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$Predictor getFactor(java.lang.String)>($r5);

        p#36 = $r6;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r6);

        if $r6 == null goto label4;

        $i3 = p#36.<weka.classifiers.pmml.consumer.GeneralRegression$Predictor: int m_miningSchemaIndex>;

        $d0 = incomingInst[$i3];

        $i4 = (int) $d0;

        $d1 = cellEntry.<weka.classifiers.pmml.consumer.GeneralRegression$PPCell: double m_value>;

        $i5 = (int) $d1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i4 != $i5 goto label3;

        $d2 = incomingPV[i#9];

        $d3 = $d2 * 1.0;

        incomingPV[i#9] = $d3;

        goto label6;

     label3:
        $d4 = incomingPV[i#9];

        $d5 = $d4 * 0.0;

        incomingPV[i#9] = $d5;

        goto label6;

     label4:
        $r9 = cellEntry.<weka.classifiers.pmml.consumer.GeneralRegression$PPCell: java.lang.String m_predictorName>;

        $r10 = specialinvoke this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$Predictor getCovariate(java.lang.String)>($r9);

        p#64 = $r10;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r10);

        if $r10 == null goto label5;

        $d6 = incomingPV[i#9];

        $i9 = p#64.<weka.classifiers.pmml.consumer.GeneralRegression$Predictor: int m_miningSchemaIndex>;

        $d7 = incomingInst[$i9];

        $d8 = cellEntry.<weka.classifiers.pmml.consumer.GeneralRegression$PPCell: double m_value>;

        $d9 = staticinvoke <java.lang.Math: double pow(double,double)>($d7, $d8);

        $d10 = $d6 * $d9;

        incomingPV[i#9] = $d10;

        goto label6;

     label5:
        $r12 = new java.lang.Exception;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[GeneralRegression] can\'t find predictor ");

        $r15 = cellEntry.<weka.classifiers.pmml.consumer.GeneralRegression$PPCell: java.lang.String m_predictorName>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in either the list of factors or covariates");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.Exception: void <init>(java.lang.String)>($r18);

        throw $r12;

     label6:
        j#18 = j#18 + 1;

        goto label2;

     label7:
        i#9 = i#9 + 1;

        goto label1;

     label8:
        return incomingPV;
    }

    private void computeResponses(double[], double[], double[]) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.GeneralRegression this;
        double[] incomingInst, incomingParamVector, responses;
        weka.classifiers.pmml.consumer.GeneralRegression$PCell p;
        int i#2, $i0, j#7, $i1, $i4, $i5;
        java.util.ArrayList $r0;
        weka.classifiers.pmml.consumer.GeneralRegression$PCell[][] $r1;
        weka.classifiers.pmml.consumer.GeneralRegression$PCell[] $r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        int[] $r5;
        weka.classifiers.pmml.consumer.GeneralRegression$ModelType $r6;
        weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction $r7, $r8;
        java.lang.Exception $r9, $r12, $r13;
        weka.classifiers.pmml.consumer.GeneralRegression$CumulativeLinkFunction $r10, $r11;

        this := @this: weka.classifiers.pmml.consumer.GeneralRegression;

        incomingInst := @parameter0: double[];

        incomingParamVector := @parameter1: double[];

        responses := @parameter2: double[];

        i#2 = 0;

     label01:
        $i0 = lengthof responses;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#2 >= $i0 goto label06;

        j#7 = 0;

     label02:
        $r0 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.util.ArrayList m_parameterList>;

        $i1 = virtualinvoke $r0.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if j#7 >= $i1 goto label05;

        $r1 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$PCell[][] m_paramMatrix>;

        $r2 = $r1[i#2];

        p = $r2[j#7];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(p);

        if p != null goto label03;

        $d0 = responses[i#2];

        $d1 = incomingParamVector[j#7];

        $d2 = 0.0 * $d1;

        $d3 = $d0 + $d2;

        responses[i#2] = $d3;

        goto label04;

     label03:
        $d4 = responses[i#2];

        $d5 = incomingParamVector[j#7];

        $d6 = p.<weka.classifiers.pmml.consumer.GeneralRegression$PCell: double m_beta>;

        $d7 = $d5 * $d6;

        $d8 = $d4 + $d7;

        responses[i#2] = $d8;

     label04:
        j#7 = j#7 + 1;

        goto label02;

     label05:
        i#2 = i#2 + 1;

        goto label01;

     label06:
        $r5 = <weka.classifiers.pmml.consumer.GeneralRegression$1: int[] $SwitchMap$weka$classifiers$pmml$consumer$GeneralRegression$ModelType>;

        $r6 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$ModelType m_modelType>;

        $i4 = virtualinvoke $r6.<weka.classifiers.pmml.consumer.GeneralRegression$ModelType: int ordinal()>();

        $i5 = $r5[$i4];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        tableswitch($i5)
        {
            case 1: goto label07;
            case 2: goto label08;
            case 3: goto label09;
            case 4: goto label09;
            case 5: goto label11;
            default: goto label13;
        };

     label07:
        staticinvoke <weka.classifiers.pmml.consumer.GeneralRegression: void computeProbabilitiesMultinomialLogistic(double[])>(responses);

        goto label14;

     label08:
        goto label14;

     label09:
        $r7 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction m_linkFunction>;

        $r8 = <weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction: weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction NONE>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r8);

        if $r7 == $r8 goto label10;

        specialinvoke this.<weka.classifiers.pmml.consumer.GeneralRegression: void computeResponseGeneralizedLinear(double[],double[])>(incomingInst, responses);

        goto label14;

     label10:
        $r9 = new java.lang.Exception;

        specialinvoke $r9.<java.lang.Exception: void <init>(java.lang.String)>("[GeneralRegression] no link function specified!");

        throw $r9;

     label11:
        $r10 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$CumulativeLinkFunction m_cumulativeLinkFunction>;

        $r11 = <weka.classifiers.pmml.consumer.GeneralRegression$CumulativeLinkFunction: weka.classifiers.pmml.consumer.GeneralRegression$CumulativeLinkFunction NONE>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r10);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r11);

        if $r10 == $r11 goto label12;

        specialinvoke this.<weka.classifiers.pmml.consumer.GeneralRegression: void computeResponseOrdinalMultinomial(double[],double[])>(incomingInst, responses);

        goto label14;

     label12:
        $r12 = new java.lang.Exception;

        specialinvoke $r12.<java.lang.Exception: void <init>(java.lang.String)>("[GeneralRegression] no cumulative link function specified!");

        throw $r12;

     label13:
        $r13 = new java.lang.Exception;

        specialinvoke $r13.<java.lang.Exception: void <init>(java.lang.String)>("[GeneralRegression] unknown model type");

        throw $r13;

     label14:
        return;
    }

    private static void computeProbabilitiesMultinomialLogistic(double[])
    {
        double[] responses, r;
        java.lang.Object $r0;
        int j#5, $i0, k#14, $i1;
        double sum#10, $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        boolean overflow#12;
        byte $b2;

        responses := @parameter0: double[];

        $r0 = virtualinvoke responses.<java.lang.Object: java.lang.Object clone()>();

        r = (double[]) $r0;

        j#5 = 0;

     label1:
        $i0 = lengthof r;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if j#5 >= $i0 goto label7;

        sum#10 = 0.0;

        overflow#12 = 0;

        k#14 = 0;

     label2:
        $i1 = lengthof r;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(k#14);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if k#14 >= $i1 goto label4;

        $d0 = r[k#14];

        $d1 = r[j#5];

        $d2 = $d0 - $d1;

        $b2 = $d2 cmpl 700.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b2);

        if $b2 <= 0 goto label3;

        overflow#12 = 1;

        goto label4;

     label3:
        $d3 = r[k#14];

        $d4 = r[j#5];

        $d5 = $d3 - $d4;

        $d6 = staticinvoke <java.lang.Math: double exp(double)>($d5);

        sum#10 = sum#10 + $d6;

        k#14 = k#14 + 1;

        goto label2;

     label4:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(overflow#12);

        if overflow#12 == 0 goto label5;

        responses[j#5] = 0.0;

        goto label6;

     label5:
        $d7 = 1.0 / sum#10;

        responses[j#5] = $d7;

     label6:
        j#5 = j#5 + 1;

        goto label1;

     label7:
        return;
    }

    private void computeResponseGeneralizedLinear(double[], double[]) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.GeneralRegression this;
        double[] incomingInst, responses, r;
        weka.core.Attribute offsetAtt, trialsAtt;
        java.lang.Object $r0;
        double offset#5, $d0, trials#37, $d1, distParam#69, $d2, linkParam#85, $d3, $d4, $d5;
        java.lang.String $r1, $r4, $r8, $r11, $r12, $r15, $r19, $r22;
        weka.core.pmml.MiningSchema $r2, $r13;
        weka.core.Instances $r3, $r14;
        java.lang.Exception $r5, $r16, $r27, $r32;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r17, $r18, $r20, $r21;
        int $i0, $i1, i#101, $i2;
        boolean $z0, $z1, $z2, $z3;
        weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction $r23, $r24, $r28, $r29, $r30, $r31, $r33;
        weka.classifiers.pmml.consumer.GeneralRegression$Distribution $r25, $r26;

        this := @this: weka.classifiers.pmml.consumer.GeneralRegression;

        incomingInst := @parameter0: double[];

        responses := @parameter1: double[];

        $r0 = virtualinvoke responses.<java.lang.Object: java.lang.Object clone()>();

        r = (double[]) $r0;

        offset#5 = 0.0;

        $r1 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.lang.String m_offsetVariable>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 == null goto label02;

        $r2 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.core.pmml.MiningSchema m_miningSchema>;

        $r3 = virtualinvoke $r2.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r4 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.lang.String m_offsetVariable>;

        offsetAtt = virtualinvoke $r3.<weka.core.Instances: weka.core.Attribute attribute(java.lang.String)>($r4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(offsetAtt);

        if offsetAtt != null goto label01;

        $r5 = new java.lang.Exception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[GeneralRegression] unable to find offset variable ");

        $r8 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.lang.String m_offsetVariable>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in the mining schema!");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.Exception: void <init>(java.lang.String)>($r11);

        throw $r5;

     label01:
        $i0 = virtualinvoke offsetAtt.<weka.core.Attribute: int index()>();

        offset#5 = incomingInst[$i0];

        goto label03;

     label02:
        $d0 = this.<weka.classifiers.pmml.consumer.GeneralRegression: double m_offsetValue>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label03;

        offset#5 = this.<weka.classifiers.pmml.consumer.GeneralRegression: double m_offsetValue>;

     label03:
        trials#37 = 1.0;

        $r12 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.lang.String m_trialsVariable>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r12);

        if $r12 == null goto label05;

        $r13 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.core.pmml.MiningSchema m_miningSchema>;

        $r14 = virtualinvoke $r13.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r15 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.lang.String m_trialsVariable>;

        trialsAtt = virtualinvoke $r14.<weka.core.Instances: weka.core.Attribute attribute(java.lang.String)>($r15);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(trialsAtt);

        if trialsAtt != null goto label04;

        $r16 = new java.lang.Exception;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[GeneralRegression] unable to find trials variable ");

        $r19 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.lang.String m_trialsVariable>;

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in the mining schema!");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.Exception: void <init>(java.lang.String)>($r22);

        throw $r16;

     label04:
        $i1 = virtualinvoke trialsAtt.<weka.core.Attribute: int index()>();

        trials#37 = incomingInst[$i1];

        goto label06;

     label05:
        $d1 = this.<weka.classifiers.pmml.consumer.GeneralRegression: double m_trialsValue>;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label06;

        trials#37 = this.<weka.classifiers.pmml.consumer.GeneralRegression: double m_trialsValue>;

     label06:
        distParam#69 = 0.0;

        $r23 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction m_linkFunction>;

        $r24 = <weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction: weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction NEGBIN>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r23);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r24);

        if $r23 != $r24 goto label08;

        $r25 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$Distribution m_distribution>;

        $r26 = <weka.classifiers.pmml.consumer.GeneralRegression$Distribution: weka.classifiers.pmml.consumer.GeneralRegression$Distribution NEGBINOMIAL>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r25);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r26);

        if $r25 != $r26 goto label08;

        $d2 = this.<weka.classifiers.pmml.consumer.GeneralRegression: double m_distParameter>;

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label07;

        $r27 = new java.lang.Exception;

        specialinvoke $r27.<java.lang.Exception: void <init>(java.lang.String)>("[GeneralRegression] no distribution parameter defined!");

        throw $r27;

     label07:
        distParam#69 = this.<weka.classifiers.pmml.consumer.GeneralRegression: double m_distParameter>;

     label08:
        linkParam#85 = 0.0;

        $r28 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction m_linkFunction>;

        $r29 = <weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction: weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction POWER>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r28);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r29);

        if $r28 == $r29 goto label09;

        $r30 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction m_linkFunction>;

        $r31 = <weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction: weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction ODDSPOWER>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r30);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r31);

        if $r30 != $r31 goto label11;

     label09:
        $d3 = this.<weka.classifiers.pmml.consumer.GeneralRegression: double m_linkParameter>;

        $z3 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label10;

        $r32 = new java.lang.Exception;

        specialinvoke $r32.<java.lang.Exception: void <init>(java.lang.String)>("[GeneralRegression] no link parameter defined!");

        throw $r32;

     label10:
        linkParam#85 = this.<weka.classifiers.pmml.consumer.GeneralRegression: double m_linkParameter>;

     label11:
        i#101 = 0;

     label12:
        $i2 = lengthof r;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#101);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#101 >= $i2 goto label13;

        $r33 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction m_linkFunction>;

        $d4 = r[i#101];

        $d5 = virtualinvoke $r33.<weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction: double eval(double,double,double,double,double)>($d4, offset#5, trials#37, distParam#69, linkParam#85);

        responses[i#101] = $d5;

        i#101 = i#101 + 1;

        goto label12;

     label13:
        return;
    }

    private void computeResponseOrdinalMultinomial(double[], double[]) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.GeneralRegression this;
        double[] incomingInst, responses, r;
        weka.core.Attribute offsetAtt;
        java.lang.Object $r0;
        double offset#5, $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        java.lang.String $r1, $r4, $r8, $r11;
        weka.core.pmml.MiningSchema $r2;
        weka.core.Instances $r3;
        java.lang.Exception $r5;
        java.lang.StringBuilder $r6, $r7, $r9, $r10;
        int $i0, i#37, $i1, $i2, $i3, $i4, $i5;
        boolean $z0;
        weka.classifiers.pmml.consumer.GeneralRegression$CumulativeLinkFunction $r12, $r13;

        this := @this: weka.classifiers.pmml.consumer.GeneralRegression;

        incomingInst := @parameter0: double[];

        responses := @parameter1: double[];

        $r0 = virtualinvoke responses.<java.lang.Object: java.lang.Object clone()>();

        r = (double[]) $r0;

        offset#5 = 0.0;

        $r1 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.lang.String m_offsetVariable>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 == null goto label2;

        $r2 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.core.pmml.MiningSchema m_miningSchema>;

        $r3 = virtualinvoke $r2.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r4 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.lang.String m_offsetVariable>;

        offsetAtt = virtualinvoke $r3.<weka.core.Instances: weka.core.Attribute attribute(java.lang.String)>($r4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(offsetAtt);

        if offsetAtt != null goto label1;

        $r5 = new java.lang.Exception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[GeneralRegression] unable to find offset variable ");

        $r8 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.lang.String m_offsetVariable>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in the mining schema!");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.Exception: void <init>(java.lang.String)>($r11);

        throw $r5;

     label1:
        $i0 = virtualinvoke offsetAtt.<weka.core.Attribute: int index()>();

        offset#5 = incomingInst[$i0];

        goto label3;

     label2:
        $d0 = this.<weka.classifiers.pmml.consumer.GeneralRegression: double m_offsetValue>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label3;

        offset#5 = this.<weka.classifiers.pmml.consumer.GeneralRegression: double m_offsetValue>;

     label3:
        i#37 = 0;

     label4:
        $i1 = lengthof r;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#37);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#37 >= $i1 goto label8;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#37);

        if i#37 != 0 goto label5;

        $r12 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$CumulativeLinkFunction m_cumulativeLinkFunction>;

        $d1 = r[i#37];

        $d2 = virtualinvoke $r12.<weka.classifiers.pmml.consumer.GeneralRegression$CumulativeLinkFunction: double eval(double,double)>($d1, offset#5);

        responses[i#37] = $d2;

        goto label7;

     label5:
        $i2 = lengthof r;

        $i3 = $i2 - 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#37);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if i#37 != $i3 goto label6;

        $i4 = i#37 - 1;

        $d3 = responses[$i4];

        $d4 = 1.0 - $d3;

        responses[i#37] = $d4;

        goto label7;

     label6:
        $r13 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$CumulativeLinkFunction m_cumulativeLinkFunction>;

        $d5 = r[i#37];

        $d6 = virtualinvoke $r13.<weka.classifiers.pmml.consumer.GeneralRegression$CumulativeLinkFunction: double eval(double,double)>($d5, offset#5);

        $i5 = i#37 - 1;

        $d7 = responses[$i5];

        $d8 = $d6 - $d7;

        responses[i#37] = $d8;

     label7:
        i#37 = i#37 + 1;

        goto label4;

     label8:
        return;
    }

    public java.lang.String toString()
    {
        weka.classifiers.pmml.consumer.GeneralRegression this;
        java.lang.StringBuffer temp, $r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r8, $r9, $r11, $r14, $r15, $r17, $r27, $r28, $r29, $r30, $r38, $r39, $r40, $r41, $r49, $r50, $r52, $r56, $r57, $r59, $r62, $r63, $r64, $r68, $r69, $r71, $r74, $r75, $r76, $r81, $r82, $r84, $r91, $r92, $r93, $r100, $r101, $r102, $r107, $r108, $r110, $r114, $r115, $r117, $r120, $r121, $r122;
        java.lang.String $r3, $r5, $r7, $r10, $r12, $r18, $r31, $r42, $r53, $r55, $r58, $r60, $r65, $r67, $r70, $r72, $r77, $r85, $r94, $r103, $r111, $r113, $r116, $r118, $r123, $r126;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        weka.classifiers.pmml.consumer.GeneralRegression$ModelType $r16;
        weka.core.pmml.MiningSchema $r21;
        java.util.ArrayList $r23, $r25, $r34, $r36;
        int $i0, $i1;
        java.util.Iterator l2#53, l2#83;
        java.lang.Object $r26, $r37;
        weka.classifiers.pmml.consumer.GeneralRegression$Predictor p#59, p#89;
        weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction $r47, $r48, $r51, $r87, $r88, $r96, $r97, $r98, $r99;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;
        weka.classifiers.pmml.consumer.GeneralRegression$Distribution $r79, $r80, $r83, $r89, $r90;
        weka.classifiers.pmml.consumer.GeneralRegression$CumulativeLinkFunction $r105, $r106, $r109;

        this := @this: weka.classifiers.pmml.consumer.GeneralRegression;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        temp = $r0;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PMML version ");

        $r3 = virtualinvoke this.<weka.classifiers.pmml.consumer.GeneralRegression: java.lang.String getPMMLVersion()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke this.<weka.classifiers.pmml.consumer.GeneralRegression: java.lang.String getCreatorApplication()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("?");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label01;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nApplication: ");

        $r10 = virtualinvoke this.<weka.classifiers.pmml.consumer.GeneralRegression: java.lang.String getCreatorApplication()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

     label01:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nPMML Model: ");

        $r16 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$ModelType m_modelType>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\n");

        $r21 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.core.pmml.MiningSchema m_miningSchema>;

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r21);

        $r23 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.util.ArrayList m_factorList>;

        $i0 = virtualinvoke $r23.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label03;

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Factors:\n");

        $r25 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.util.ArrayList m_factorList>;

        l2#53 = virtualinvoke $r25.<java.util.ArrayList: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke l2#53.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label03;

        $r26 = interfaceinvoke l2#53.<java.util.Iterator: java.lang.Object next()>();

        p#59 = (weka.classifiers.pmml.consumer.GeneralRegression$Predictor) $r26;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(p#59);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r31);

        goto label02;

     label03:
        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r34 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.util.ArrayList m_covariateList>;

        $i1 = virtualinvoke $r34.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 0 goto label05;

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Covariates:\n");

        $r36 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.util.ArrayList m_covariateList>;

        l2#83 = virtualinvoke $r36.<java.util.ArrayList: java.util.Iterator iterator()>();

     label04:
        $z2 = interfaceinvoke l2#83.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label05;

        $r37 = interfaceinvoke l2#83.<java.util.Iterator: java.lang.Object next()>();

        p#89 = (weka.classifiers.pmml.consumer.GeneralRegression$Predictor) $r37;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(p#89);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r42);

        goto label04;

     label05:
        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        virtualinvoke this.<weka.classifiers.pmml.consumer.GeneralRegression: void printPPMatrix(java.lang.StringBuffer)>(temp);

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        virtualinvoke this.<weka.classifiers.pmml.consumer.GeneralRegression: void printParameterMatrix(java.lang.StringBuffer)>(temp);

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r47 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction m_linkFunction>;

        $r48 = <weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction: weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction NONE>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r47);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r48);

        if $r47 == $r48 goto label13;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Link function: ");

        $r51 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction m_linkFunction>;

        $r52 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r51);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r53);

        $r55 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.lang.String m_offsetVariable>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r55);

        if $r55 == null goto label06;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\tOffset variable ");

        $r58 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.lang.String m_offsetVariable>;

        $r59 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r58);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r60);

        goto label07;

     label06:
        $d0 = this.<weka.classifiers.pmml.consumer.GeneralRegression: double m_offsetValue>;

        $z3 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label07;

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\tOffset value ");

        $d1 = this.<weka.classifiers.pmml.consumer.GeneralRegression: double m_offsetValue>;

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r65);

     label07:
        $r67 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.lang.String m_trialsVariable>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r67);

        if $r67 == null goto label08;

        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\tTrials variable ");

        $r70 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.lang.String m_trialsVariable>;

        $r71 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r70);

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r72);

        goto label09;

     label08:
        $d2 = this.<weka.classifiers.pmml.consumer.GeneralRegression: double m_trialsValue>;

        $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label09;

        $r74 = new java.lang.StringBuilder;

        specialinvoke $r74.<java.lang.StringBuilder: void <init>()>();

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\tTrials value ");

        $d3 = this.<weka.classifiers.pmml.consumer.GeneralRegression: double m_trialsValue>;

        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d3);

        $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r77);

     label09:
        $r79 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$Distribution m_distribution>;

        $r80 = <weka.classifiers.pmml.consumer.GeneralRegression$Distribution: weka.classifiers.pmml.consumer.GeneralRegression$Distribution NONE>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r79);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r80);

        if $r79 == $r80 goto label10;

        $r81 = new java.lang.StringBuilder;

        specialinvoke $r81.<java.lang.StringBuilder: void <init>()>();

        $r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nDistribution: ");

        $r83 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$Distribution m_distribution>;

        $r84 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r83);

        $r85 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r85);

     label10:
        $r87 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction m_linkFunction>;

        $r88 = <weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction: weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction NEGBIN>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r87);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r88);

        if $r87 != $r88 goto label11;

        $r89 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$Distribution m_distribution>;

        $r90 = <weka.classifiers.pmml.consumer.GeneralRegression$Distribution: weka.classifiers.pmml.consumer.GeneralRegression$Distribution NEGBINOMIAL>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r89);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r90);

        if $r89 != $r90 goto label11;

        $d4 = this.<weka.classifiers.pmml.consumer.GeneralRegression: double m_distParameter>;

        $z5 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 != 0 goto label11;

        $r91 = new java.lang.StringBuilder;

        specialinvoke $r91.<java.lang.StringBuilder: void <init>()>();

        $r92 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\tDistribution parameter ");

        $d5 = this.<weka.classifiers.pmml.consumer.GeneralRegression: double m_distParameter>;

        $r93 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d5);

        $r94 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r94);

     label11:
        $r96 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction m_linkFunction>;

        $r97 = <weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction: weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction POWER>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r96);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r97);

        if $r96 == $r97 goto label12;

        $r98 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction m_linkFunction>;

        $r99 = <weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction: weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction ODDSPOWER>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r98);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r99);

        if $r98 != $r99 goto label13;

     label12:
        $d6 = this.<weka.classifiers.pmml.consumer.GeneralRegression: double m_linkParameter>;

        $z6 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 != 0 goto label13;

        $r100 = new java.lang.StringBuilder;

        specialinvoke $r100.<java.lang.StringBuilder: void <init>()>();

        $r101 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\nLink parameter ");

        $d7 = this.<weka.classifiers.pmml.consumer.GeneralRegression: double m_linkParameter>;

        $r102 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d7);

        $r103 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r103);

     label13:
        $r105 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$CumulativeLinkFunction m_cumulativeLinkFunction>;

        $r106 = <weka.classifiers.pmml.consumer.GeneralRegression$CumulativeLinkFunction: weka.classifiers.pmml.consumer.GeneralRegression$CumulativeLinkFunction NONE>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r105);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r106);

        if $r105 == $r106 goto label15;

        $r107 = new java.lang.StringBuilder;

        specialinvoke $r107.<java.lang.StringBuilder: void <init>()>();

        $r108 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cumulative link function: ");

        $r109 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$CumulativeLinkFunction m_cumulativeLinkFunction>;

        $r110 = virtualinvoke $r108.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r109);

        $r111 = virtualinvoke $r110.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r111);

        $r113 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.lang.String m_offsetVariable>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r113);

        if $r113 == null goto label14;

        $r114 = new java.lang.StringBuilder;

        specialinvoke $r114.<java.lang.StringBuilder: void <init>()>();

        $r115 = virtualinvoke $r114.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\tOffset variable ");

        $r116 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.lang.String m_offsetVariable>;

        $r117 = virtualinvoke $r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r116);

        $r118 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r118);

        goto label15;

     label14:
        $d8 = this.<weka.classifiers.pmml.consumer.GeneralRegression: double m_offsetValue>;

        $z7 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 != 0 goto label15;

        $r120 = new java.lang.StringBuilder;

        specialinvoke $r120.<java.lang.StringBuilder: void <init>()>();

        $r121 = virtualinvoke $r120.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\tOffset value ");

        $d9 = this.<weka.classifiers.pmml.consumer.GeneralRegression: double m_offsetValue>;

        $r122 = virtualinvoke $r121.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d9);

        $r123 = virtualinvoke $r122.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r123);

     label15:
        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r126 = virtualinvoke temp.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r126;
    }

    protected void printPPMatrix(java.lang.StringBuffer)
    {
        weka.classifiers.pmml.consumer.GeneralRegression this;
        java.lang.StringBuffer buff;
        weka.core.Instances miningSchemaI;
        weka.core.Attribute a, $r10, $r11, $r13, $r44, $r57, $r58, $r59;
        java.lang.String val, temp, attName, paramS, $r1, $r2, $r17, $r20, $r23, $r25, $r28, $r30, $r34, $r35, $r39, $r40, $r42, $r45, $r51, $r52, $r53, val#231, $r62, $r63, $r65;
        java.util.Iterator l5;
        weka.classifiers.pmml.consumer.GeneralRegression$Parameter p, param;
        weka.classifiers.pmml.consumer.GeneralRegression$PPCell p, $r6, $r9, $r16;
        weka.core.pmml.MiningSchema $r0;
        int maxAttWidth#5, i#7, $i0, $i1, i#22, $i2, j#28, $i3, $i5, $i6, $i7, maxParamWidth#97, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i#164, $i16, $i17, $i18, $i19, $i20, i#191, $i21, $i22, $i23, j#217, $i24, $i25, $i26, $i27, $i28, $i29;
        java.util.ArrayList $r3, $r21, $r48, $r49;
        weka.classifiers.pmml.consumer.GeneralRegression$PPCell[][] $r4, $r7, $r14, $r55;
        weka.classifiers.pmml.consumer.GeneralRegression$PPCell[] $r5, $r8, $r15, $r56;
        double $d0, $d1, $d2, $d3, width#50, width#58, $d4, $d5, $d6;
        byte $b4;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r12, $r18, $r19, $r24, $r26, $r27, $r29, $r31, $r32, $r37, $r38, $r41, $r60, $r61, $r64;
        java.lang.Object $r22, $r50;

        this := @this: weka.classifiers.pmml.consumer.GeneralRegression;

        buff := @parameter0: java.lang.StringBuffer;

        $r0 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.core.pmml.MiningSchema m_miningSchema>;

        miningSchemaI = virtualinvoke $r0.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        maxAttWidth#5 = 0;

        i#7 = 0;

     label01:
        $i0 = virtualinvoke miningSchemaI.<weka.core.Instances: int numAttributes()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#7 >= $i0 goto label03;

        a = virtualinvoke miningSchemaI.<weka.core.Instances: weka.core.Attribute attribute(int)>(i#7);

        $r1 = virtualinvoke a.<weka.core.Attribute: java.lang.String name()>();

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(maxAttWidth#5);

        if $i1 <= maxAttWidth#5 goto label02;

        $r2 = virtualinvoke a.<weka.core.Attribute: java.lang.String name()>();

        maxAttWidth#5 = virtualinvoke $r2.<java.lang.String: int length()>();

     label02:
        i#7 = i#7 + 1;

        goto label01;

     label03:
        i#22 = 0;

     label04:
        $r3 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.util.ArrayList m_parameterList>;

        $i2 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#22);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#22 >= $i2 goto label11;

        j#28 = 0;

     label05:
        $i3 = virtualinvoke miningSchemaI.<weka.core.Instances: int numAttributes()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#28);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if j#28 >= $i3 goto label10;

        $r4 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$PPCell[][] m_ppMatrix>;

        $r5 = $r4[i#22];

        $r6 = $r5[j#28];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r6);

        if $r6 == null goto label09;

        $r7 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$PPCell[][] m_ppMatrix>;

        $r8 = $r7[i#22];

        $r9 = $r8[j#28];

        $d0 = $r9.<weka.classifiers.pmml.consumer.GeneralRegression$PPCell: double m_value>;

        $d1 = staticinvoke <java.lang.Math: double abs(double)>($d0);

        $d2 = staticinvoke <java.lang.Math: double log(double)>($d1);

        $d3 = staticinvoke <java.lang.Math: double log(double)>(10.0);

        width#50 = $d2 / $d3;

        $b4 = width#50 cmpg 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b4);

        if $b4 >= 0 goto label06;

        width#50 = 1.0;

     label06:
        width#58 = width#50 + 2.0;

        $i5 = (int) width#58;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(maxAttWidth#5);

        if $i5 <= maxAttWidth#5 goto label07;

        maxAttWidth#5 = (int) width#58;

     label07:
        $r10 = virtualinvoke miningSchemaI.<weka.core.Instances: weka.core.Attribute attribute(int)>(j#28);

        $z0 = virtualinvoke $r10.<weka.core.Attribute: boolean isNominal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label08;

        $r11 = virtualinvoke miningSchemaI.<weka.core.Instances: weka.core.Attribute attribute(int)>(j#28);

        $z1 = virtualinvoke $r11.<weka.core.Attribute: boolean isString()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label09;

     label08:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke miningSchemaI.<weka.core.Instances: weka.core.Attribute attribute(int)>(j#28);

        $r14 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$PPCell[][] m_ppMatrix>;

        $r15 = $r14[i#22];

        $r16 = $r15[j#28];

        $d4 = $r16.<weka.classifiers.pmml.consumer.GeneralRegression$PPCell: double m_value>;

        $i6 = (int) $d4;

        $r17 = virtualinvoke $r13.<weka.core.Attribute: java.lang.String value(int)>($i6);

        $r18 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        val = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $i7 = virtualinvoke val.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(maxAttWidth#5);

        if $i7 <= maxAttWidth#5 goto label09;

        maxAttWidth#5 = virtualinvoke val.<java.lang.String: int length()>();

     label09:
        j#28 = j#28 + 1;

        goto label05;

     label10:
        i#22 = i#22 + 1;

        goto label04;

     label11:
        $r20 = "Parameter  ";

        maxParamWidth#97 = virtualinvoke $r20.<java.lang.String: int length()>();

        $r21 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.util.ArrayList m_parameterList>;

        l5 = virtualinvoke $r21.<java.util.ArrayList: java.util.Iterator iterator()>();

     label12:
        $z2 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label16;

        $r22 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        p = (weka.classifiers.pmml.consumer.GeneralRegression$Parameter) $r22;

        $r23 = p.<weka.classifiers.pmml.consumer.GeneralRegression$Parameter: java.lang.String m_label>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r23);

        if $r23 == null goto label13;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = p.<weka.classifiers.pmml.consumer.GeneralRegression$Parameter: java.lang.String m_label>;

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label14;

     label13:
        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = p.<weka.classifiers.pmml.consumer.GeneralRegression$Parameter: java.lang.String m_name>;

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r28 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

     label14:
        temp = $r28;

        $i8 = virtualinvoke temp.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(maxParamWidth#97);

        if $i8 <= maxParamWidth#97 goto label15;

        maxParamWidth#97 = virtualinvoke temp.<java.lang.String: int length()>();

     label15:
        goto label12;

     label16:
        virtualinvoke buff.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Predictor-to-Parameter matrix:\n");

        $i9 = maxAttWidth#5 * 2;

        $i10 = $i9 + 2;

        $i11 = maxParamWidth#97 + $i10;

        $r34 = "Predictor";

        $i12 = virtualinvoke $r34.<java.lang.String: int length()>();

        $i13 = $i11 - $i12;

        $r35 = staticinvoke <weka.core.pmml.PMMLUtils: java.lang.String pad(java.lang.String,java.lang.String,int,boolean)>("Predictor", " ", $i13, 1);

        virtualinvoke buff.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r35);

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r39 = "Parameter";

        $i14 = virtualinvoke $r39.<java.lang.String: int length()>();

        $i15 = maxParamWidth#97 - $i14;

        $r40 = staticinvoke <weka.core.pmml.PMMLUtils: java.lang.String pad(java.lang.String,java.lang.String,int,boolean)>("Parameter", " ", $i15, 0);

        $r41 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke buff.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r42);

        i#164 = 0;

     label17:
        $i16 = virtualinvoke miningSchemaI.<weka.core.Instances: int numAttributes()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#164);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i16);

        if i#164 >= $i16 goto label19;

        $i17 = virtualinvoke miningSchemaI.<weka.core.Instances: int classIndex()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#164);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i17);

        if i#164 == $i17 goto label18;

        $r44 = virtualinvoke miningSchemaI.<weka.core.Instances: weka.core.Attribute attribute(int)>(i#164);

        attName = virtualinvoke $r44.<weka.core.Attribute: java.lang.String name()>();

        $i18 = maxAttWidth#5 + 1;

        $i19 = virtualinvoke attName.<java.lang.String: int length()>();

        $i20 = $i18 - $i19;

        $r45 = staticinvoke <weka.core.pmml.PMMLUtils: java.lang.String pad(java.lang.String,java.lang.String,int,boolean)>(attName, " ", $i20, 1);

        virtualinvoke buff.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r45);

     label18:
        i#164 = i#164 + 1;

        goto label17;

     label19:
        virtualinvoke buff.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        i#191 = 0;

     label20:
        $r48 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.util.ArrayList m_parameterList>;

        $i21 = virtualinvoke $r48.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#191);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i21);

        if i#191 >= $i21 goto label29;

        $r49 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.util.ArrayList m_parameterList>;

        $r50 = virtualinvoke $r49.<java.util.ArrayList: java.lang.Object get(int)>(i#191);

        param = (weka.classifiers.pmml.consumer.GeneralRegression$Parameter) $r50;

        $r51 = param.<weka.classifiers.pmml.consumer.GeneralRegression$Parameter: java.lang.String m_label>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r51);

        if $r51 == null goto label21;

        $r52 = param.<weka.classifiers.pmml.consumer.GeneralRegression$Parameter: java.lang.String m_label>;

        goto label22;

     label21:
        $r52 = param.<weka.classifiers.pmml.consumer.GeneralRegression$Parameter: java.lang.String m_name>;

     label22:
        paramS = $r52;

        $i22 = virtualinvoke paramS.<java.lang.String: int length()>();

        $i23 = maxParamWidth#97 - $i22;

        $r53 = staticinvoke <weka.core.pmml.PMMLUtils: java.lang.String pad(java.lang.String,java.lang.String,int,boolean)>(paramS, " ", $i23, 0);

        virtualinvoke buff.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r53);

        j#217 = 0;

     label23:
        $i24 = virtualinvoke miningSchemaI.<weka.core.Instances: int numAttributes()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#217);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i24);

        if j#217 >= $i24 goto label28;

        $i25 = virtualinvoke miningSchemaI.<weka.core.Instances: int classIndex()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#217);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i25);

        if j#217 == $i25 goto label27;

        $r55 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$PPCell[][] m_ppMatrix>;

        $r56 = $r55[i#191];

        p = $r56[j#217];

        val#231 = " ";

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(p);

        if p == null goto label26;

        $r57 = virtualinvoke miningSchemaI.<weka.core.Instances: weka.core.Attribute attribute(int)>(j#217);

        $z3 = virtualinvoke $r57.<weka.core.Attribute: boolean isNominal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label24;

        $r58 = virtualinvoke miningSchemaI.<weka.core.Instances: weka.core.Attribute attribute(int)>(j#217);

        $z4 = virtualinvoke $r58.<weka.core.Attribute: boolean isString()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label25;

     label24:
        $r59 = virtualinvoke miningSchemaI.<weka.core.Instances: weka.core.Attribute attribute(int)>(j#217);

        $d5 = p.<weka.classifiers.pmml.consumer.GeneralRegression$PPCell: double m_value>;

        $i26 = (int) $d5;

        val#231 = virtualinvoke $r59.<weka.core.Attribute: java.lang.String value(int)>($i26);

        goto label26;

     label25:
        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>()>();

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $d6 = p.<weka.classifiers.pmml.consumer.GeneralRegression$PPCell: double m_value>;

        $r62 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>($d6, maxAttWidth#5, 4);

        $r63 = virtualinvoke $r62.<java.lang.String: java.lang.String trim()>();

        $r64 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r63);

        val#231 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

     label26:
        $i27 = maxAttWidth#5 + 1;

        $i28 = virtualinvoke val#231.<java.lang.String: int length()>();

        $i29 = $i27 - $i28;

        $r65 = staticinvoke <weka.core.pmml.PMMLUtils: java.lang.String pad(java.lang.String,java.lang.String,int,boolean)>(val#231, " ", $i29, 1);

        virtualinvoke buff.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r65);

     label27:
        j#217 = j#217 + 1;

        goto label23;

     label28:
        virtualinvoke buff.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        i#191 = i#191 + 1;

        goto label20;

     label29:
        return;
    }

    protected void printParameterMatrix(java.lang.StringBuffer)
    {
        weka.classifiers.pmml.consumer.GeneralRegression this;
        java.lang.StringBuffer buff;
        weka.core.Instances miningSchemaI;
        weka.classifiers.pmml.consumer.GeneralRegression$Parameter p;
        java.lang.String val, cVal, label, betaS, dfS, $r2, $r7, $r9, $r13, $r15, $r18, $r20, $r23, $r30, $r32, $r33, $r35, $r36, $r38, $r39, $r50, $r51, $r57, $r59, $r60, $r62, $r63;
        weka.classifiers.pmml.consumer.GeneralRegression$PCell p, p, $r46;
        weka.core.pmml.MiningSchema $r0;
        weka.core.Attribute $r1, $r3, $r4, $r5, $r6, $r8, $r29, $r31, $r47, $r48, $r49;
        int maxClassWidth#8, i#16, $i0, $i1, maxParamWidth#33, i#35, $i2, $i3, maxBetaWidth#69, i#71, $i4, j#77, $i5, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i#157, $i17, j#165, $i18, $i19, $i20, j#202, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31;
        boolean $z0, $z1, ok#163, $z2, $z3;
        java.util.ArrayList $r10, $r11, $r25, $r43, $r54;
        java.lang.Object $r12;
        java.lang.StringBuilder $r14, $r16, $r17, $r19, $r21, $r22;
        weka.classifiers.pmml.consumer.GeneralRegression$PCell[][] $r24, $r26, $r42, $r44, $r55;
        weka.classifiers.pmml.consumer.GeneralRegression$PCell[] $r27, $r45, $r56;
        double $d0, $d1, $d2, $d3, width#96, width#104, $d4, $d5;
        byte $b6;

        this := @this: weka.classifiers.pmml.consumer.GeneralRegression;

        buff := @parameter0: java.lang.StringBuffer;

        $r0 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.core.pmml.MiningSchema m_miningSchema>;

        miningSchemaI = virtualinvoke $r0.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r1 = virtualinvoke miningSchemaI.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $r2 = virtualinvoke $r1.<weka.core.Attribute: java.lang.String name()>();

        maxClassWidth#8 = virtualinvoke $r2.<java.lang.String: int length()>();

        $r3 = virtualinvoke miningSchemaI.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z0 = virtualinvoke $r3.<weka.core.Attribute: boolean isNominal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label01;

        $r4 = virtualinvoke miningSchemaI.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z1 = virtualinvoke $r4.<weka.core.Attribute: boolean isString()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label04;

     label01:
        i#16 = 0;

     label02:
        $r5 = virtualinvoke miningSchemaI.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $i0 = virtualinvoke $r5.<weka.core.Attribute: int numValues()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#16);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#16 >= $i0 goto label04;

        $r6 = virtualinvoke miningSchemaI.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $r7 = virtualinvoke $r6.<weka.core.Attribute: java.lang.String value(int)>(i#16);

        $i1 = virtualinvoke $r7.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(maxClassWidth#8);

        if $i1 <= maxClassWidth#8 goto label03;

        $r8 = virtualinvoke miningSchemaI.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $r9 = virtualinvoke $r8.<weka.core.Attribute: java.lang.String value(int)>(i#16);

        maxClassWidth#8 = virtualinvoke $r9.<java.lang.String: int length()>();

     label03:
        i#16 = i#16 + 1;

        goto label02;

     label04:
        maxParamWidth#33 = 0;

        i#35 = 0;

     label05:
        $r10 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.util.ArrayList m_parameterList>;

        $i2 = virtualinvoke $r10.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#35);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#35 >= $i2 goto label09;

        $r11 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.util.ArrayList m_parameterList>;

        $r12 = virtualinvoke $r11.<java.util.ArrayList: java.lang.Object get(int)>(i#35);

        p = (weka.classifiers.pmml.consumer.GeneralRegression$Parameter) $r12;

        $r13 = p.<weka.classifiers.pmml.consumer.GeneralRegression$Parameter: java.lang.String m_label>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r13);

        if $r13 == null goto label06;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = p.<weka.classifiers.pmml.consumer.GeneralRegression$Parameter: java.lang.String m_label>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label07;

     label06:
        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = p.<weka.classifiers.pmml.consumer.GeneralRegression$Parameter: java.lang.String m_name>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r18 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

     label07:
        val = $r18;

        $i3 = virtualinvoke val.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(maxParamWidth#33);

        if $i3 <= maxParamWidth#33 goto label08;

        maxParamWidth#33 = virtualinvoke val.<java.lang.String: int length()>();

     label08:
        i#35 = i#35 + 1;

        goto label05;

     label09:
        $r23 = "Coeff.";

        maxBetaWidth#69 = virtualinvoke $r23.<java.lang.String: int length()>();

        i#71 = 0;

     label10:
        $r24 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$PCell[][] m_paramMatrix>;

        $i4 = lengthof $r24;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#71);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if i#71 >= $i4 goto label15;

        j#77 = 0;

     label11:
        $r25 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.util.ArrayList m_parameterList>;

        $i5 = virtualinvoke $r25.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#77);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if j#77 >= $i5 goto label14;

        $r26 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$PCell[][] m_paramMatrix>;

        $r27 = $r26[i#71];

        p = $r27[j#77];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(p);

        if p == null goto label13;

        $d0 = p.<weka.classifiers.pmml.consumer.GeneralRegression$PCell: double m_beta>;

        $d1 = staticinvoke <java.lang.Math: double abs(double)>($d0);

        $d2 = staticinvoke <java.lang.Math: double log(double)>($d1);

        $d3 = staticinvoke <java.lang.Math: double log(double)>(10.0);

        width#96 = $d2 / $d3;

        $b6 = width#96 cmpg 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b6);

        if $b6 >= 0 goto label12;

        width#96 = 1.0;

     label12:
        width#104 = width#96 + 7.0;

        $i7 = (int) width#104;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(maxBetaWidth#69);

        if $i7 <= maxBetaWidth#69 goto label13;

        maxBetaWidth#69 = (int) width#104;

     label13:
        j#77 = j#77 + 1;

        goto label11;

     label14:
        i#71 = i#71 + 1;

        goto label10;

     label15:
        virtualinvoke buff.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Parameter estimates:\n");

        $r29 = virtualinvoke miningSchemaI.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $r30 = virtualinvoke $r29.<weka.core.Attribute: java.lang.String name()>();

        $i8 = maxClassWidth#8 + maxParamWidth#33;

        $i9 = $i8 + 2;

        $r31 = virtualinvoke miningSchemaI.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $r32 = virtualinvoke $r31.<weka.core.Attribute: java.lang.String name()>();

        $i10 = virtualinvoke $r32.<java.lang.String: int length()>();

        $i11 = $i9 - $i10;

        $r33 = staticinvoke <weka.core.pmml.PMMLUtils: java.lang.String pad(java.lang.String,java.lang.String,int,boolean)>($r30, " ", $i11, 0);

        virtualinvoke buff.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r33);

        $i12 = maxBetaWidth#69 + 1;

        $r35 = "Coeff.";

        $i13 = virtualinvoke $r35.<java.lang.String: int length()>();

        $i14 = $i12 - $i13;

        $r36 = staticinvoke <weka.core.pmml.PMMLUtils: java.lang.String pad(java.lang.String,java.lang.String,int,boolean)>("Coeff.", " ", $i14, 1);

        virtualinvoke buff.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r36);

        $r38 = "df";

        $i15 = virtualinvoke $r38.<java.lang.String: int length()>();

        $i16 = maxBetaWidth#69 - $i15;

        $r39 = staticinvoke <weka.core.pmml.PMMLUtils: java.lang.String pad(java.lang.String,java.lang.String,int,boolean)>("df", " ", $i16, 1);

        virtualinvoke buff.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r39);

        virtualinvoke buff.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        i#157 = 0;

     label16:
        $r42 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$PCell[][] m_paramMatrix>;

        $i17 = lengthof $r42;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#157);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i17);

        if i#157 >= $i17 goto label27;

        ok#163 = 0;

        j#165 = 0;

     label17:
        $r43 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.util.ArrayList m_parameterList>;

        $i18 = virtualinvoke $r43.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#165);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i18);

        if j#165 >= $i18 goto label19;

        $r44 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$PCell[][] m_paramMatrix>;

        $r45 = $r44[i#157];

        $r46 = $r45[j#165];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r46);

        if $r46 == null goto label18;

        ok#163 = 1;

     label18:
        j#165 = j#165 + 1;

        goto label17;

     label19:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(ok#163);

        if ok#163 != 0 goto label20;

        goto label26;

     label20:
        $r47 = virtualinvoke miningSchemaI.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z2 = virtualinvoke $r47.<weka.core.Attribute: boolean isNominal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label21;

        $r48 = virtualinvoke miningSchemaI.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z3 = virtualinvoke $r48.<weka.core.Attribute: boolean isString()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label22;

     label21:
        $r49 = virtualinvoke miningSchemaI.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $r50 = virtualinvoke $r49.<weka.core.Attribute: java.lang.String value(int)>(i#157);

        goto label23;

     label22:
        $r50 = " ";

     label23:
        cVal = $r50;

        $i19 = virtualinvoke cVal.<java.lang.String: int length()>();

        $i20 = maxClassWidth#8 - $i19;

        $r51 = staticinvoke <weka.core.pmml.PMMLUtils: java.lang.String pad(java.lang.String,java.lang.String,int,boolean)>(cVal, " ", $i20, 0);

        virtualinvoke buff.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r51);

        virtualinvoke buff.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        j#202 = 0;

     label24:
        $r54 = this.<weka.classifiers.pmml.consumer.GeneralRegression: java.util.ArrayList m_parameterList>;

        $i21 = virtualinvoke $r54.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#202);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i21);

        if j#202 >= $i21 goto label26;

        $r55 = this.<weka.classifiers.pmml.consumer.GeneralRegression: weka.classifiers.pmml.consumer.GeneralRegression$PCell[][] m_paramMatrix>;

        $r56 = $r55[i#157];

        p = $r56[j#202];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(p);

        if p == null goto label25;

        label = p.<weka.classifiers.pmml.consumer.GeneralRegression$PCell: java.lang.String m_parameterName>;

        $i22 = maxClassWidth#8 + maxParamWidth#33;

        $i23 = $i22 + 2;

        $i24 = virtualinvoke label.<java.lang.String: int length()>();

        $i25 = $i23 - $i24;

        $r57 = staticinvoke <weka.core.pmml.PMMLUtils: java.lang.String pad(java.lang.String,java.lang.String,int,boolean)>(label, " ", $i25, 1);

        virtualinvoke buff.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r57);

        $d4 = p.<weka.classifiers.pmml.consumer.GeneralRegression$PCell: double m_beta>;

        $r59 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>($d4, maxBetaWidth#69, 4);

        betaS = virtualinvoke $r59.<java.lang.String: java.lang.String trim()>();

        $i26 = maxBetaWidth#69 + 1;

        $i27 = virtualinvoke betaS.<java.lang.String: int length()>();

        $i28 = $i26 - $i27;

        $r60 = staticinvoke <weka.core.pmml.PMMLUtils: java.lang.String pad(java.lang.String,java.lang.String,int,boolean)>(betaS, " ", $i28, 1);

        virtualinvoke buff.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r60);

        $i29 = p.<weka.classifiers.pmml.consumer.GeneralRegression$PCell: int m_df>;

        $d5 = (double) $i29;

        $r62 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int,int)>($d5, maxBetaWidth#69, 4);

        dfS = virtualinvoke $r62.<java.lang.String: java.lang.String trim()>();

        $i30 = virtualinvoke dfS.<java.lang.String: int length()>();

        $i31 = maxBetaWidth#69 - $i30;

        $r63 = staticinvoke <weka.core.pmml.PMMLUtils: java.lang.String pad(java.lang.String,java.lang.String,int,boolean)>(dfS, " ", $i31, 1);

        virtualinvoke buff.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r63);

        virtualinvoke buff.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

     label25:
        j#202 = j#202 + 1;

        goto label24;

     label26:
        i#157 = i#157 + 1;

        goto label16;

     label27:
        return;
    }


