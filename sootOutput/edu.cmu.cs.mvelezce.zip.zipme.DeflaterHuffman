    static void <clinit>()
    {
        int[] $r0;
        short[] $r1, $r3, $r5, $r7, $r9, $r11, $r13;
        byte[] $r2, $r4, $r6, $r8, $r10, $r12, $r14;
        int i#65, $i0, $i1, $i3, $i4, $i5, $i7, $i8, $i9, $i11, $i12, $i13, $i15, i#123, $i16;
        short $s2, $s6, $s10, $s14, $s17;

        $r0 = newarray (int)[19];

        $r0[0] = 16;

        $r0[1] = 17;

        $r0[2] = 18;

        $r0[3] = 0;

        $r0[4] = 8;

        $r0[5] = 7;

        $r0[6] = 9;

        $r0[7] = 6;

        $r0[8] = 10;

        $r0[9] = 5;

        $r0[10] = 11;

        $r0[11] = 4;

        $r0[12] = 12;

        $r0[13] = 3;

        $r0[14] = 13;

        $r0[15] = 2;

        $r0[16] = 14;

        $r0[17] = 1;

        $r0[18] = 15;

        <edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: int[] BL_ORDER> = $r0;

        $r1 = newarray (short)[286];

        <edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: short[] staticLCodes> = $r1;

        $r2 = newarray (byte)[286];

        <edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: byte[] staticLLength> = $r2;

        i#65 = 0;

     label1:
        if i#65 >= 144 goto label2;

        $r3 = <edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: short[] staticLCodes>;

        $i0 = 48 + i#65;

        $i1 = $i0 << 8;

        $s2 = staticinvoke <edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: short bitReverse(int)>($i1);

        $r3[i#65] = $s2;

        $r4 = <edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: byte[] staticLLength>;

        $i3 = i#65;

        i#65 = i#65 + 1;

        $r4[$i3] = 8;

        goto label1;

     label2:
        if i#65 >= 256 goto label3;

        $r5 = <edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: short[] staticLCodes>;

        $i4 = 256 + i#65;

        $i5 = $i4 << 7;

        $s6 = staticinvoke <edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: short bitReverse(int)>($i5);

        $r5[i#65] = $s6;

        $r6 = <edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: byte[] staticLLength>;

        $i7 = i#65;

        i#65 = i#65 + 1;

        $r6[$i7] = 9;

        goto label2;

     label3:
        if i#65 >= 280 goto label4;

        $r7 = <edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: short[] staticLCodes>;

        $i8 = -256 + i#65;

        $i9 = $i8 << 9;

        $s10 = staticinvoke <edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: short bitReverse(int)>($i9);

        $r7[i#65] = $s10;

        $r8 = <edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: byte[] staticLLength>;

        $i11 = i#65;

        i#65 = i#65 + 1;

        $r8[$i11] = 7;

        goto label3;

     label4:
        if i#65 >= 286 goto label5;

        $r9 = <edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: short[] staticLCodes>;

        $i12 = -88 + i#65;

        $i13 = $i12 << 8;

        $s14 = staticinvoke <edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: short bitReverse(int)>($i13);

        $r9[i#65] = $s14;

        $r10 = <edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: byte[] staticLLength>;

        $i15 = i#65;

        i#65 = i#65 + 1;

        $r10[$i15] = 8;

        goto label4;

     label5:
        $r11 = newarray (short)[30];

        <edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: short[] staticDCodes> = $r11;

        $r12 = newarray (byte)[30];

        <edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: byte[] staticDLength> = $r12;

        i#123 = 0;

     label6:
        if i#123 >= 30 goto label7;

        $r13 = <edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: short[] staticDCodes>;

        $i16 = i#123 << 11;

        $s17 = staticinvoke <edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: short bitReverse(int)>($i16);

        $r13[i#123] = $s17;

        $r14 = <edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: byte[] staticDLength>;

        $r14[i#123] = 5;

        i#123 = i#123 + 1;

        goto label6;

     label7:
        return;
    }

    static short bitReverse(int)
    {
        int value, $i0, $i2, $i3, $i4, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i15;
        java.lang.String $r0, $r1, $r2, $r3;
        char $c1, $c5, $c10, $c14;
        short $s16;

        value := @parameter0: int;

        $r0 = "\u0000\u0008\u0004\f\u0002\n\u0006\u000e\u0001\t\u0005\r\u0003\u000b\u0007\u000f";

        $i0 = value & 15;

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        $i2 = $c1 << 12;

        $r1 = "\u0000\u0008\u0004\f\u0002\n\u0006\u000e\u0001\t\u0005\r\u0003\u000b\u0007\u000f";

        $i3 = value >> 4;

        $i4 = $i3 & 15;

        $c5 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i4);

        $i6 = $c5 << 8;

        $i7 = $i2 | $i6;

        $r2 = "\u0000\u0008\u0004\f\u0002\n\u0006\u000e\u0001\t\u0005\r\u0003\u000b\u0007\u000f";

        $i8 = value >> 8;

        $i9 = $i8 & 15;

        $c10 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i9);

        $i11 = $c10 << 4;

        $i12 = $i7 | $i11;

        $r3 = "\u0000\u0008\u0004\f\u0002\n\u0006\u000e\u0001\t\u0005\r\u0003\u000b\u0007\u000f";

        $i13 = value >> 12;

        $c14 = virtualinvoke $r3.<java.lang.String: char charAt(int)>($i13);

        $i15 = $i12 | $c14;

        $s16 = (short) $i15;

        return $s16;
    }

    public void <init>(edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending)
    {
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman this;
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending pending;
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree $r0, $r1, $r2;
        short[] $r3;
        byte[] $r4;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman;

        pending := @parameter0: edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending pending> = pending;

        $r0 = new edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree;

        specialinvoke $r0.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: void <init>(edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman,int,int,int)>(this, 286, 257, 15);

        this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree literalTree> = $r0;

        $r1 = new edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree;

        specialinvoke $r1.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: void <init>(edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman,int,int,int)>(this, 30, 1, 15);

        this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree distTree> = $r1;

        $r2 = new edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree;

        specialinvoke $r2.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: void <init>(edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman,int,int,int)>(this, 19, 4, 7);

        this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree blTree> = $r2;

        $r3 = newarray (short)[16384];

        this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: short[] d_buf> = $r3;

        $r4 = newarray (byte)[16384];

        this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: byte[] l_buf> = $r4;

        return;
    }

    public void flushBlock(byte[], int, int, boolean)
    {
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman this;
        byte[] stored, $r10, $r17, $r20, $r24, $r27;
        int stored_offset, stored_len, $i2, blTreeCodes#26, i#28, $i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, opt_len#61, static_len#64, i#66, $i17, i#81, $i20, $i21, $i22, $i25, $i28;
        boolean lastBlock;
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree $r0, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r12, $r13, $r14, $r15, $r18, $r22, $r25;
        short[] $r1, $r16, $r19, $r23, $r26;
        short $s1, $s3, $s15, $s18;
        int[] $r11;
        byte $b5, $b16, $b19, $b24, $b27;
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending $r21, $r28;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman;

        stored := @parameter0: byte[];

        stored_offset := @parameter1: int;

        stored_len := @parameter2: int;

        lastBlock := @parameter3: boolean;

        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree literalTree>;

        $r1 = $r0.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: short[] freqs>;

        $s1 = $r1[256];

        $i2 = $s1 + 1;

        $s3 = (short) $i2;

        $r1[256] = $s3;

        $r2 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree literalTree>;

        virtualinvoke $r2.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: void buildTree()>();

        $r3 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree distTree>;

        virtualinvoke $r3.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: void buildTree()>();

        $r4 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree literalTree>;

        $r5 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree blTree>;

        virtualinvoke $r4.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: void calcBLFreq(edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree)>($r5);

        $r6 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree distTree>;

        $r7 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree blTree>;

        virtualinvoke $r6.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: void calcBLFreq(edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree)>($r7);

        $r8 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree blTree>;

        virtualinvoke $r8.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: void buildTree()>();

        blTreeCodes#26 = 4;

        i#28 = 18;

     label01:
        if i#28 <= blTreeCodes#26 goto label03;

        $r9 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree blTree>;

        $r10 = $r9.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: byte[] length>;

        $r11 = <edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: int[] BL_ORDER>;

        $i4 = $r11[i#28];

        $b5 = $r10[$i4];

        if $b5 <= 0 goto label02;

        blTreeCodes#26 = i#28 + 1;

     label02:
        i#28 = i#28 + -1;

        goto label01;

     label03:
        $i6 = blTreeCodes#26 * 3;

        $i7 = 14 + $i6;

        $r12 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree blTree>;

        $i8 = virtualinvoke $r12.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: int getEncodedLength()>();

        $i9 = $i7 + $i8;

        $r13 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree literalTree>;

        $i10 = virtualinvoke $r13.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: int getEncodedLength()>();

        $i11 = $i9 + $i10;

        $r14 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree distTree>;

        $i12 = virtualinvoke $r14.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: int getEncodedLength()>();

        $i13 = $i11 + $i12;

        $i14 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: int extra_bits>;

        opt_len#61 = $i13 + $i14;

        static_len#64 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: int extra_bits>;

        i#66 = 0;

     label04:
        if i#66 >= 286 goto label05;

        $r15 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree literalTree>;

        $r16 = $r15.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: short[] freqs>;

        $s15 = $r16[i#66];

        $r17 = <edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: byte[] staticLLength>;

        $b16 = $r17[i#66];

        $i17 = $s15 * $b16;

        static_len#64 = static_len#64 + $i17;

        i#66 = i#66 + 1;

        goto label04;

     label05:
        i#81 = 0;

     label06:
        if i#81 >= 30 goto label07;

        $r18 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree distTree>;

        $r19 = $r18.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: short[] freqs>;

        $s18 = $r19[i#81];

        $r20 = <edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: byte[] staticDLength>;

        $b19 = $r20[i#81];

        $i20 = $s18 * $b19;

        static_len#64 = static_len#64 + $i20;

        i#81 = i#81 + 1;

        goto label06;

     label07:
        if opt_len#61 < static_len#64 goto label08;

        opt_len#61 = static_len#64;

     label08:
        if stored_offset < 0 goto label09;

        $i21 = stored_len + 4;

        $i22 = opt_len#61 >> 3;

        if $i21 >= $i22 goto label09;

        virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: void flushStoredBlock(byte[],int,int,boolean)>(stored, stored_offset, stored_len, lastBlock);

        goto label15;

     label09:
        if opt_len#61 != static_len#64 goto label12;

        $r21 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending pending>;

        if lastBlock == 0 goto label10;

        $b24 = 1;

        goto label11;

     label10:
        $b24 = 0;

     label11:
        $i25 = 2 + $b24;

        virtualinvoke $r21.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending: void writeBits(int,int)>($i25, 3);

        $r22 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree literalTree>;

        $r23 = <edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: short[] staticLCodes>;

        $r24 = <edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: byte[] staticLLength>;

        virtualinvoke $r22.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: void setStaticCodes(short[],byte[])>($r23, $r24);

        $r25 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree distTree>;

        $r26 = <edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: short[] staticDCodes>;

        $r27 = <edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: byte[] staticDLength>;

        virtualinvoke $r25.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: void setStaticCodes(short[],byte[])>($r26, $r27);

        virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: void compressBlock()>();

        virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: void reset()>();

        goto label15;

     label12:
        $r28 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending pending>;

        if lastBlock == 0 goto label13;

        $b27 = 1;

        goto label14;

     label13:
        $b27 = 0;

     label14:
        $i28 = 4 + $b27;

        virtualinvoke $r28.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending: void writeBits(int,int)>($i28, 3);

        virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: void sendAllTrees(int)>(blTreeCodes#26);

        virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: void compressBlock()>();

        virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: void reset()>();

     label15:
        return;
    }

    public void flushStoredBlock(byte[], int, int, boolean)
    {
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman this;
        byte[] stored;
        int stored_offset, stored_len, $i2, $i3;
        boolean lastBlock;
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending $r0, $r1, $r2, $r3, $r4;
        byte $b1;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman;

        stored := @parameter0: byte[];

        stored_offset := @parameter1: int;

        stored_len := @parameter2: int;

        lastBlock := @parameter3: boolean;

        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending pending>;

        if lastBlock == 0 goto label1;

        $b1 = 1;

        goto label2;

     label1:
        $b1 = 0;

     label2:
        $i2 = 0 + $b1;

        virtualinvoke $r0.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending: void writeBits(int,int)>($i2, 3);

        $r1 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending pending>;

        virtualinvoke $r1.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending: void alignToByte()>();

        $r2 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending pending>;

        virtualinvoke $r2.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending: void writeShort(int)>(stored_len);

        $r3 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending pending>;

        $i3 = stored_len ^ -1;

        virtualinvoke $r3.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending: void writeShort(int)>($i3);

        $r4 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending pending>;

        virtualinvoke $r4.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending: void writeBlock(byte[],int,int)>(stored, stored_offset, stored_len);

        virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: void reset()>();

        return;
    }

    public void compressBlock()
    {
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman this;
        short litlen, dist#16;
        int lc, dc, i#2, $i0, dist#18, $i2, bits#30, $i3, $i4, $i5, $i6, bits#55, $i7, $i8, $i9;
        byte[] $r0;
        byte $b1;
        short[] $r1;
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree $r2, $r4, $r6, $r7;
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending $r3, $r5;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman;

        i#2 = 0;

     label1:
        $i0 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: int last_lit>;

        if i#2 >= $i0 goto label6;

        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: byte[] l_buf>;

        $b1 = $r0[i#2];

        litlen = $b1 & 255;

        $r1 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: short[] d_buf>;

        dist#16 = $r1[i#2];

        dist#18 = dist#16 + -1;

        if dist#16 == 0 goto label4;

        lc = specialinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: int l_code(int)>(litlen);

        $r2 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree literalTree>;

        virtualinvoke $r2.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: void writeSymbol(int)>(lc);

        $i2 = lc - 261;

        bits#30 = $i2 / 4;

        if bits#30 <= 0 goto label2;

        if bits#30 > 5 goto label2;

        $r3 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending pending>;

        $i3 = 1 << bits#30;

        $i4 = $i3 - 1;

        $i5 = litlen & $i4;

        virtualinvoke $r3.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending: void writeBits(int,int)>($i5, bits#30);

     label2:
        dc = specialinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: int d_code(int)>(dist#18);

        $r4 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree distTree>;

        virtualinvoke $r4.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: void writeSymbol(int)>(dc);

        $i6 = dc / 2;

        bits#55 = $i6 - 1;

        if bits#55 <= 0 goto label3;

        $r5 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending pending>;

        $i7 = 1 << bits#55;

        $i8 = $i7 - 1;

        $i9 = dist#18 & $i8;

        virtualinvoke $r5.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending: void writeBits(int,int)>($i9, bits#55);

     label3:
        goto label5;

     label4:
        $r6 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree literalTree>;

        virtualinvoke $r6.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: void writeSymbol(int)>(litlen);

     label5:
        i#2 = i#2 + 1;

        goto label1;

     label6:
        $r7 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree literalTree>;

        virtualinvoke $r7.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: void writeSymbol(int)>(256);

        return;
    }

    public final void reset()
    {
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman this;
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree $r0, $r1, $r2;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman;

        this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: int last_lit> = 0;

        this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: int extra_bits> = 0;

        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree literalTree>;

        virtualinvoke $r0.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: void reset()>();

        $r1 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree distTree>;

        virtualinvoke $r1.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: void reset()>();

        $r2 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree blTree>;

        virtualinvoke $r2.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: void reset()>();

        return;
    }

    public void sendAllTrees(int)
    {
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman this;
        int blTreeCodes, $i0, $i1, $i2, $i3, $i4, rank#30, $i5;
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree $r0, $r1, $r2, $r4, $r6, $r9, $r12, $r13, $r14, $r15;
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending $r3, $r5, $r7, $r8;
        byte[] $r10;
        int[] $r11;
        byte $b6;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman;

        blTreeCodes := @parameter0: int;

        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree blTree>;

        virtualinvoke $r0.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: void buildCodes()>();

        $r1 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree literalTree>;

        virtualinvoke $r1.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: void buildCodes()>();

        $r2 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree distTree>;

        virtualinvoke $r2.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: void buildCodes()>();

        $r3 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending pending>;

        $r4 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree literalTree>;

        $i0 = $r4.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: int numCodes>;

        $i1 = $i0 - 257;

        virtualinvoke $r3.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending: void writeBits(int,int)>($i1, 5);

        $r5 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending pending>;

        $r6 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree distTree>;

        $i2 = $r6.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: int numCodes>;

        $i3 = $i2 - 1;

        virtualinvoke $r5.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending: void writeBits(int,int)>($i3, 5);

        $r7 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending pending>;

        $i4 = blTreeCodes - 4;

        virtualinvoke $r7.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending: void writeBits(int,int)>($i4, 4);

        rank#30 = 0;

     label1:
        if rank#30 >= blTreeCodes goto label2;

        $r8 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending pending>;

        $r9 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree blTree>;

        $r10 = $r9.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: byte[] length>;

        $r11 = <edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: int[] BL_ORDER>;

        $i5 = $r11[rank#30];

        $b6 = $r10[$i5];

        virtualinvoke $r8.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterPending: void writeBits(int,int)>($b6, 3);

        rank#30 = rank#30 + 1;

        goto label1;

     label2:
        $r12 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree literalTree>;

        $r13 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree blTree>;

        virtualinvoke $r12.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: void writeTree(edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree)>($r13);

        $r14 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree distTree>;

        $r15 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree blTree>;

        virtualinvoke $r14.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: void writeTree(edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree)>($r15);

        return;
    }

    private int l_code(int)
    {
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman this;
        int len#1, code#6, $i0;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman;

        len#1 := @parameter0: int;

        if len#1 != 255 goto label1;

        return 285;

     label1:
        code#6 = 257;

     label2:
        if len#1 < 8 goto label3;

        code#6 = code#6 + 4;

        len#1 = len#1 >> 1;

        goto label2;

     label3:
        $i0 = code#6 + len#1;

        return $i0;
    }

    private int d_code(int)
    {
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman this;
        int distance#1, code#3, $i0;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman;

        distance#1 := @parameter0: int;

        code#3 = 0;

     label1:
        if distance#1 < 4 goto label2;

        code#3 = code#3 + 2;

        distance#1 = distance#1 >> 1;

        goto label1;

     label2:
        $i0 = code#3 + distance#1;

        return $i0;
    }

    public final boolean isFull()
    {
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman this;
        int $i0;
        boolean $z0;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman;

        $i0 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: int last_lit>;

        if $i0 != 16384 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean tallyLit(int)
    {
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman this;
        int lit, $i0, $i1, $i2, $i6, $i8;
        short[] $r0, $r4;
        byte[] $r1;
        byte $b3;
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree $r3;
        short $s5, $s7;
        boolean $z0;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman;

        lit := @parameter0: int;

        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: short[] d_buf>;

        $i0 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: int last_lit>;

        $r0[$i0] = 0;

        $r1 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: byte[] l_buf>;

        $i1 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: int last_lit>;

        $i2 = $i1 + 1;

        this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: int last_lit> = $i2;

        $b3 = (byte) lit;

        $r1[$i1] = $b3;

        $r3 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree literalTree>;

        $r4 = $r3.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: short[] freqs>;

        $s5 = $r4[lit];

        $i6 = $s5 + 1;

        $s7 = (short) $i6;

        $r4[lit] = $s7;

        $i8 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: int last_lit>;

        if $i8 != 16384 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean tallyDist(int, int)
    {
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman this;
        int dist, len, lc, dc, $i0, $i2, $i3, $i4, $i6, $i9, $i11, $i12, $i13, $i14, $i15, $i18, $i20, $i21, $i22, $i23, $i24;
        short[] $r0, $r4, $r7;
        short $s1, $s8, $s10, $s17, $s19;
        byte[] $r1;
        byte $b5;
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree $r3, $r6;
        boolean $z0;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman;

        dist := @parameter0: int;

        len := @parameter1: int;

        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: short[] d_buf>;

        $i0 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: int last_lit>;

        $s1 = (short) dist;

        $r0[$i0] = $s1;

        $r1 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: byte[] l_buf>;

        $i2 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: int last_lit>;

        $i3 = $i2 + 1;

        this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: int last_lit> = $i3;

        $i4 = len - 3;

        $b5 = (byte) $i4;

        $r1[$i2] = $b5;

        $i6 = len - 3;

        lc = specialinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: int l_code(int)>($i6);

        $r3 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree literalTree>;

        $r4 = $r3.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: short[] freqs>;

        $s8 = $r4[lc];

        $i9 = $s8 + 1;

        $s10 = (short) $i9;

        $r4[lc] = $s10;

        if lc < 265 goto label1;

        if lc >= 285 goto label1;

        $i11 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: int extra_bits>;

        $i12 = lc - 261;

        $i13 = $i12 / 4;

        $i14 = $i11 + $i13;

        this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: int extra_bits> = $i14;

     label1:
        $i15 = dist - 1;

        dc = specialinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: int d_code(int)>($i15);

        $r6 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree distTree>;

        $r7 = $r6.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman$Tree: short[] freqs>;

        $s17 = $r7[dc];

        $i18 = $s17 + 1;

        $s19 = (short) $i18;

        $r7[dc] = $s19;

        if dc < 4 goto label2;

        $i20 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: int extra_bits>;

        $i21 = dc / 2;

        $i22 = $i21 - 1;

        $i23 = $i20 + $i22;

        this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: int extra_bits> = $i23;

     label2:
        $i24 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: int last_lit>;

        if $i24 != 16384 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }


