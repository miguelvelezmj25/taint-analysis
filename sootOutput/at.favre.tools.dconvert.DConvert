    public void <init>()
    {
        at.favre.tools.dconvert.DConvert this;
        java.lang.StringBuilder $r0;

        this := @this: at.favre.tools.dconvert.DConvert;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        this.<at.favre.tools.dconvert.DConvert: java.lang.StringBuilder logStringBuilder> = $r0;

        return;
    }

    public void execute(at.favre.tools.dconvert.arg.Arguments, boolean, at.favre.tools.dconvert.DConvert$HandlerCallback)
    {
        at.favre.tools.dconvert.DConvert this;
        at.favre.tools.dconvert.arg.Arguments args;
        boolean blockingWaitForFinish, $z0, $z1, $z3, $z4, $z5, $z6, $z8, $z9, $z11, $z12, $z14, $z15, $z16;
        at.favre.tools.dconvert.DConvert$HandlerCallback callback, $r59;
        java.util.ArrayList converters, postProcessors, $r14, $r15;
        at.favre.tools.dconvert.arg.EPlatform ePlatform;
        at.favre.tools.dconvert.converters.IPlatformConverter converter, $r20, $r25;
        int convertJobs, postProcessorJobs, $i1, $i2, $i3, $i4, $i5, $i6;
        float convertPercentage, postProcessPercentage, $f0, $f1, $f2, $f3;
        java.util.Iterator l10, l6#41, l6#70;
        java.io.File srcFile;
        at.favre.tools.dconvert.WorkerHandlerCallBack myWorkerHandlerCallBack, $r58;
        at.favre.tools.dconvert.WorkerHandler wh, $r62;
        java.lang.InterruptedException e, $r66;
        long $l0, $l7;
        java.lang.StringBuilder $r0, $r1, $r3, $r5, $r6, $r7, $r9, $r10, $r11, $r18, $r19, $r23, $r26, $r30, $r32, $r35, $r37, $r40, $r42, $r48, $r49, $r50, $r53, $r54, $r55, $r56, $r60, $r67;
        java.lang.String $r2, $r22, $r57;
        java.util.List $r13, $r44, $r46, $r63, $r69;
        java.util.Set $r16;
        java.lang.Object $r17, $r28, $r47;
        java.lang.Class $r21;
        at.favre.tools.dconvert.converters.postprocessing.PngCrushProcessor $r29, postProcessor#82;
        at.favre.tools.dconvert.converters.postprocessing.WebpProcessor $r34, postProcessor#100;
        at.favre.tools.dconvert.converters.postprocessing.MozJpegProcessor $r39, postProcessor#118;
        java.util.concurrent.CountDownLatch $r45, $r61, $r64;
        java.lang.IllegalStateException $r52;
        java.util.concurrent.TimeUnit $r65;

        this := @this: at.favre.tools.dconvert.DConvert;

        args := @parameter0: at.favre.tools.dconvert.arg.Arguments;

        blockingWaitForFinish := @parameter1: boolean;

        callback := @parameter2: at.favre.tools.dconvert.DConvert$HandlerCallback;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        this.<at.favre.tools.dconvert.DConvert: long beginMs> = $l0;

        this.<at.favre.tools.dconvert.DConvert: at.favre.tools.dconvert.DConvert$HandlerCallback handlerCallback> = callback;

        $r0 = this.<at.favre.tools.dconvert.DConvert: java.lang.StringBuilder logStringBuilder>;

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("registered image readers:\n");

        $r2 = specialinvoke this.<at.favre.tools.dconvert.DConvert: java.lang.String getRegisteredImageReadersAndWriters()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r5 = this.<at.favre.tools.dconvert.DConvert: java.lang.StringBuilder logStringBuilder>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("begin execution using ");

        $i1 = args.<at.favre.tools.dconvert.arg.Arguments: int threadCount>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" theads\n");

        $r9 = this.<at.favre.tools.dconvert.DConvert: java.lang.StringBuilder logStringBuilder>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("args: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(args);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r13 = args.<at.favre.tools.dconvert.arg.Arguments: java.util.List filesToProcess>;

        $z0 = interfaceinvoke $r13.<java.util.List: boolean isEmpty()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label19;

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        converters = $r14;

        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        postProcessors = $r15;

        $r16 = args.<at.favre.tools.dconvert.arg.Arguments: java.util.Set platform>;

        l6#41 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z1 = interfaceinvoke l6#41.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label02;

        $r17 = interfaceinvoke l6#41.<java.util.Iterator: java.lang.Object next()>();

        ePlatform = (at.favre.tools.dconvert.arg.EPlatform) $r17;

        $r18 = this.<at.favre.tools.dconvert.DConvert: java.lang.StringBuilder logStringBuilder>;

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("add ");

        $r20 = virtualinvoke ePlatform.<at.favre.tools.dconvert.arg.EPlatform: at.favre.tools.dconvert.converters.IPlatformConverter getConverter()>();

        $r21 = virtualinvoke $r20.<java.lang.Object: java.lang.Class getClass()>();

        $r22 = virtualinvoke $r21.<java.lang.Class: java.lang.String getSimpleName()>();

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r25 = virtualinvoke ePlatform.<at.favre.tools.dconvert.arg.EPlatform: at.favre.tools.dconvert.converters.IPlatformConverter getConverter()>();

        interfaceinvoke converters.<java.util.List: boolean add(java.lang.Object)>($r25);

        goto label01;

     label02:
        $z3 = args.<at.favre.tools.dconvert.arg.Arguments: boolean clearDirBeforeConvert>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label04;

        $r26 = this.<at.favre.tools.dconvert.DConvert: java.lang.StringBuilder logStringBuilder>;

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("clear out dirs before convert\n");

        l6#70 = interfaceinvoke converters.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z4 = interfaceinvoke l6#70.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label04;

        $r28 = interfaceinvoke l6#70.<java.util.Iterator: java.lang.Object next()>();

        converter = (at.favre.tools.dconvert.converters.IPlatformConverter) $r28;

        interfaceinvoke converter.<at.favre.tools.dconvert.converters.IPlatformConverter: void clean(at.favre.tools.dconvert.arg.Arguments)>(args);

        goto label03;

     label04:
        $z5 = args.<at.favre.tools.dconvert.arg.Arguments: boolean enablePngCrush>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label06;

        $r29 = new at.favre.tools.dconvert.converters.postprocessing.PngCrushProcessor;

        specialinvoke $r29.<at.favre.tools.dconvert.converters.postprocessing.PngCrushProcessor: void <init>()>();

        postProcessor#82 = $r29;

        $z6 = interfaceinvoke postProcessor#82.<at.favre.tools.dconvert.converters.postprocessing.IPostProcessor: boolean isSupported()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label05;

        $r30 = this.<at.favre.tools.dconvert.DConvert: java.lang.StringBuilder logStringBuilder>;

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("add pngcrush postprocessor\n");

        interfaceinvoke postProcessors.<java.util.List: boolean add(java.lang.Object)>(postProcessor#82);

        goto label06;

     label05:
        $r32 = this.<at.favre.tools.dconvert.DConvert: java.lang.StringBuilder logStringBuilder>;

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WARNING: Tool \'pngcrush\' cannot be accessed. Is it set in PATH?\n");

     label06:
        $z8 = args.<at.favre.tools.dconvert.arg.Arguments: boolean postConvertWebp>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 == 0 goto label08;

        $r34 = new at.favre.tools.dconvert.converters.postprocessing.WebpProcessor;

        specialinvoke $r34.<at.favre.tools.dconvert.converters.postprocessing.WebpProcessor: void <init>()>();

        postProcessor#100 = $r34;

        $z9 = interfaceinvoke postProcessor#100.<at.favre.tools.dconvert.converters.postprocessing.IPostProcessor: boolean isSupported()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 == 0 goto label07;

        $r35 = this.<at.favre.tools.dconvert.DConvert: java.lang.StringBuilder logStringBuilder>;

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("add cwebp postprocessor\n");

        interfaceinvoke postProcessors.<java.util.List: boolean add(java.lang.Object)>(postProcessor#100);

        goto label08;

     label07:
        $r37 = this.<at.favre.tools.dconvert.DConvert: java.lang.StringBuilder logStringBuilder>;

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WARNING: Tool \'cwebp\' cannot be accessed. Is it set in PATH?\n");

     label08:
        $z11 = args.<at.favre.tools.dconvert.arg.Arguments: boolean enableMozJpeg>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z11);

        if $z11 == 0 goto label10;

        $r39 = new at.favre.tools.dconvert.converters.postprocessing.MozJpegProcessor;

        specialinvoke $r39.<at.favre.tools.dconvert.converters.postprocessing.MozJpegProcessor: void <init>()>();

        postProcessor#118 = $r39;

        $z12 = interfaceinvoke postProcessor#118.<at.favre.tools.dconvert.converters.postprocessing.IPostProcessor: boolean isSupported()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z12);

        if $z12 == 0 goto label09;

        $r40 = this.<at.favre.tools.dconvert.DConvert: java.lang.StringBuilder logStringBuilder>;

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("add mozJpeg postprocessor\n");

        interfaceinvoke postProcessors.<java.util.List: boolean add(java.lang.Object)>(postProcessor#118);

        goto label10;

     label09:
        $r42 = this.<at.favre.tools.dconvert.DConvert: java.lang.StringBuilder logStringBuilder>;

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WARNING: Tool \'jpegtran\' cannot be accessed. Is it set in PATH?\n");

     label10:
        $r44 = args.<at.favre.tools.dconvert.arg.Arguments: java.util.List filesToProcess>;

        $i2 = interfaceinvoke $r44.<java.util.List: int size()>();

        $i3 = interfaceinvoke converters.<java.util.List: int size()>();

        convertJobs = $i2 * $i3;

        $i4 = interfaceinvoke postProcessors.<java.util.List: int size()>();

        postProcessorJobs = convertJobs * $i4;

        $f0 = (float) convertJobs;

        $i5 = convertJobs + postProcessorJobs;

        $f1 = (float) $i5;

        convertPercentage = $f0 / $f1;

        $f2 = (float) postProcessorJobs;

        $i6 = convertJobs + postProcessorJobs;

        $f3 = (float) $i6;

        postProcessPercentage = $f2 / $f3;

        $r45 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r45.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        this.<at.favre.tools.dconvert.DConvert: java.util.concurrent.CountDownLatch mainLatch> = $r45;

        $r46 = args.<at.favre.tools.dconvert.arg.Arguments: java.util.List filesToProcess>;

        l10 = interfaceinvoke $r46.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z14 = interfaceinvoke l10.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z14);

        if $z14 == 0 goto label14;

        $r47 = interfaceinvoke l10.<java.util.Iterator: java.lang.Object next()>();

        srcFile = (java.io.File) $r47;

        $r48 = this.<at.favre.tools.dconvert.DConvert: java.lang.StringBuilder logStringBuilder>;

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("add ");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(srcFile);

        virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to processing queue\n");

        $z15 = virtualinvoke srcFile.<java.io.File: boolean exists()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z15);

        if $z15 == 0 goto label12;

        $z16 = virtualinvoke srcFile.<java.io.File: boolean isFile()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z16);

        if $z16 != 0 goto label13;

     label12:
        $r52 = new java.lang.IllegalStateException;

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("srcFile ");

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(srcFile);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist");

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r52.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r57);

        throw $r52;

     label13:
        goto label11;

     label14:
        $r58 = new at.favre.tools.dconvert.WorkerHandlerCallBack;

        $r59 = this.<at.favre.tools.dconvert.DConvert: at.favre.tools.dconvert.DConvert$HandlerCallback handlerCallback>;

        $r60 = this.<at.favre.tools.dconvert.DConvert: java.lang.StringBuilder logStringBuilder>;

        $r61 = this.<at.favre.tools.dconvert.DConvert: java.util.concurrent.CountDownLatch mainLatch>;

        $l7 = this.<at.favre.tools.dconvert.DConvert: long beginMs>;

        specialinvoke $r58.<at.favre.tools.dconvert.WorkerHandlerCallBack: void <init>(at.favre.tools.dconvert.DConvert$HandlerCallback,float,java.lang.StringBuilder,float,java.util.List,at.favre.tools.dconvert.arg.Arguments,java.util.concurrent.CountDownLatch,long)>($r59, convertPercentage, $r60, postProcessPercentage, postProcessors, args, $r61, $l7);

        myWorkerHandlerCallBack = $r58;

        $r62 = new at.favre.tools.dconvert.WorkerHandler;

        specialinvoke $r62.<at.favre.tools.dconvert.WorkerHandler: void <init>(java.util.List,at.favre.tools.dconvert.arg.Arguments,at.favre.tools.dconvert.WorkerHandler$Callback)>(converters, args, myWorkerHandlerCallBack);

        wh = $r62;

        $r63 = args.<at.favre.tools.dconvert.arg.Arguments: java.util.List filesToProcess>;

        virtualinvoke wh.<at.favre.tools.dconvert.WorkerHandler: void start(java.util.List)>($r63);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(blockingWaitForFinish);

        if blockingWaitForFinish == 0 goto label18;

     label15:
        $r64 = this.<at.favre.tools.dconvert.DConvert: java.util.concurrent.CountDownLatch mainLatch>;

        $r65 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        virtualinvoke $r64.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(60L, $r65);

     label16:
        goto label18;

     label17:
        $r66 := @caughtexception;

        e = $r66;

        virtualinvoke e.<java.lang.InterruptedException: void printStackTrace()>();

     label18:
        goto label20;

     label19:
        $r67 = this.<at.favre.tools.dconvert.DConvert: java.lang.StringBuilder logStringBuilder>;

        virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no files to convert\n");

        $r69 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke this.<at.favre.tools.dconvert.DConvert: void informFinished(int,java.util.List,boolean)>(0, $r69, 0);

     label20:
        return;

        catch java.lang.InterruptedException from label15 to label16 with label17;
    }

    private java.lang.String getRegisteredImageReadersAndWriters()
    {
        at.favre.tools.dconvert.DConvert this;
        java.lang.String[] formats, $r0;
        java.lang.StringBuilder sb, $r1, $r5, $r6, $r9, $r10;
        java.util.Iterator l3, reader, writer;
        java.lang.String format, $r12;
        javax.imageio.ImageReader next;
        javax.imageio.ImageWriter next;
        java.util.List $r2;
        boolean $z0, $z1, $z2;
        java.lang.Object $r3, $r4, $r8;

        this := @this: at.favre.tools.dconvert.DConvert;

        $r0 = newarray (java.lang.String)[6];

        $r0[0] = "JPEG";

        $r0[1] = "PNG";

        $r0[2] = "TIFF";

        $r0[3] = "PSD";

        $r0[4] = "SVG";

        $r0[5] = "BMP";

        formats = $r0;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        sb = $r1;

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(formats);

        l3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label6;

        $r3 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        format = (java.lang.String) $r3;

        reader = staticinvoke <javax.imageio.ImageIO: java.util.Iterator getImageReadersByFormatName(java.lang.String)>(format);

     label2:
        $z1 = interfaceinvoke reader.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke reader.<java.util.Iterator: java.lang.Object next()>();

        next = (javax.imageio.ImageReader) $r4;

        $r5 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("reader: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(next);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        goto label2;

     label3:
        writer = staticinvoke <javax.imageio.ImageIO: java.util.Iterator getImageWritersByFormatName(java.lang.String)>(format);

     label4:
        $z2 = interfaceinvoke writer.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label5;

        $r8 = interfaceinvoke writer.<java.util.Iterator: java.lang.Object next()>();

        next = (javax.imageio.ImageWriter) $r8;

        $r9 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("writer: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(next);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        goto label4;

     label5:
        goto label1;

     label6:
        $r12 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    private void informFinished(int, java.util.List, boolean)
    {
        at.favre.tools.dconvert.DConvert this;
        int finishedJobs;
        java.util.List exceptions;
        boolean haltedDuringProcess, $z0;
        java.util.Iterator l4;
        java.lang.Exception exception;
        at.favre.tools.dconvert.DConvert$HandlerCallback $r0, $r8;
        java.util.concurrent.CountDownLatch $r1, $r2;
        java.lang.Object $r3;
        java.lang.StringBuilder $r4, $r6, $r9;
        java.lang.String $r5, $r10, $r11;
        long $l0, $l1, $l2;

        this := @this: at.favre.tools.dconvert.DConvert;

        finishedJobs := @parameter0: int;

        exceptions := @parameter1: java.util.List;

        haltedDuringProcess := @parameter2: boolean;

        staticinvoke <java.lang.System: void gc()>();

        specialinvoke this.<at.favre.tools.dconvert.DConvert: void printTrace()>();

        $r0 = this.<at.favre.tools.dconvert.DConvert: at.favre.tools.dconvert.DConvert$HandlerCallback handlerCallback>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label4;

        $r1 = this.<at.favre.tools.dconvert.DConvert: java.util.concurrent.CountDownLatch mainLatch>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 == null goto label1;

        $r2 = this.<at.favre.tools.dconvert.DConvert: java.util.concurrent.CountDownLatch mainLatch>;

        virtualinvoke $r2.<java.util.concurrent.CountDownLatch: void countDown()>();

     label1:
        l4 = interfaceinvoke exceptions.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        exception = (java.lang.Exception) $r3;

        $r4 = this.<at.favre.tools.dconvert.DConvert: java.lang.StringBuilder logStringBuilder>;

        $r5 = staticinvoke <at.favre.tools.dconvert.util.MiscUtil: java.lang.String getStackTrace(java.lang.Throwable)>(exception);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        goto label2;

     label3:
        $r8 = this.<at.favre.tools.dconvert.DConvert: at.favre.tools.dconvert.DConvert$HandlerCallback handlerCallback>;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l1 = this.<at.favre.tools.dconvert.DConvert: long beginMs>;

        $l2 = $l0 - $l1;

        $r9 = this.<at.favre.tools.dconvert.DConvert: java.lang.StringBuilder logStringBuilder>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String trim()>();

        interfaceinvoke $r8.<at.favre.tools.dconvert.DConvert$HandlerCallback: void onFinished(int,java.util.List,long,boolean,java.lang.String)>(finishedJobs, exceptions, $l2, haltedDuringProcess, $r11);

     label4:
        return;
    }

    private void printTrace()
    {
        at.favre.tools.dconvert.DConvert this;

        this := @this: at.favre.tools.dconvert.DConvert;

        return;
    }


