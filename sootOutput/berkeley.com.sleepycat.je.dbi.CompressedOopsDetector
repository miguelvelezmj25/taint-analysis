    static java.lang.Boolean isEnabled()
    {
        java.lang.Throwable e, $r1;
        java.lang.String vendor, info;
        java.lang.Boolean $r0, $r2;
        boolean $z0, $z1;
        int $i0;

     label1:
        $r0 = staticinvoke <berkeley.com.sleepycat.je.dbi.CompressedOopsDetector: java.lang.Boolean isEnabledInternal()>();

     label2:
        return $r0;

     label3:
        $r1 := @caughtexception;

        e = $r1;

        vendor = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vendor");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(vendor);

        if vendor == null goto label6;

        $z0 = virtualinvoke vendor.<java.lang.String: boolean startsWith(java.lang.String)>("IBM");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label6;

        info = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.info");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(info);

        if info == null goto label6;

        $i0 = virtualinvoke info.<java.lang.String: int indexOf(java.lang.String)>("Compressed References");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 == -1 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        return $r2;

     label6:
        return null;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static java.lang.Boolean isEnabledInternal() throws java.lang.Throwable
    {
        java.lang.Class hotspotMBeanClass, vmOptionClass;
        java.lang.Object hotspotMBean, vmOption, $r5;
        java.lang.reflect.Method getVMOption, getValue;
        java.lang.String value;
        javax.management.MBeanServer $r0;
        java.lang.Class[] $r1, $r3;
        java.lang.Object[] $r2, $r4;
        java.lang.Boolean $r6;

        hotspotMBeanClass = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.sun.management.HotSpotDiagnosticMXBean");

        $r0 = staticinvoke <java.lang.management.ManagementFactory: javax.management.MBeanServer getPlatformMBeanServer()>();

        hotspotMBean = staticinvoke <java.lang.management.ManagementFactory: java.lang.Object newPlatformMXBeanProxy(javax.management.MBeanServerConnection,java.lang.String,java.lang.Class)>($r0, "com.sun.management:type=HotSpotDiagnostic", hotspotMBeanClass);

        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "java/lang/String";

        getVMOption = virtualinvoke hotspotMBeanClass.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getVMOption", $r1);

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = "UseCompressedOops";

        vmOption = virtualinvoke getVMOption.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(hotspotMBean, $r2);

        vmOptionClass = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.sun.management.VMOption");

        $r3 = newarray (java.lang.Class)[0];

        getValue = virtualinvoke vmOptionClass.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getValue", $r3);

        $r4 = newarray (java.lang.Object)[0];

        $r5 = virtualinvoke getValue.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(vmOption, $r4);

        value = (java.lang.String) $r5;

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>(value);

        return $r6;
    }


