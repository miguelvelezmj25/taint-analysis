    public boolean forward(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.function.wavelet.WaveletCSFFilter this;
        kanzi.SliceIntArray source, destination;
        int srcIdx, dstIdx, channel, idx, val, l, part1, $i0, $i1, $i2, $i3, $i4, $i5, levelSize#28, $i6, startHHBand#34, read#36, length#38, $i7, $i8, $i9, csfWeight#59, offset#61, j#63, $i10, i#68, $i11, $i12, $i13, $i14, $i15, $i16, level#93, csfWeight#98, processed#100, $i17, $i18, n#120, idx#127, $i19, val#133, $i20, $i21, $i22, $i23, idx#157, $i24, val#163, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37;
        int[] src, dst, $r6, $r7, $r9, $r11, $r12;
        kanzi.function.wavelet.WaveletBandScanner sc, $r0;
        byte level#20;
        kanzi.function.wavelet.WaveletCSFFilter$CSF[][] $r1, $r2, $r3;
        kanzi.function.wavelet.WaveletCSFFilter$CSF[] csfWeights#44;
        kanzi.function.wavelet.WaveletCSFFilter$CSF $r4, $r5, $r8, $r10;

        this := @this: kanzi.function.wavelet.WaveletCSFFilter;

        source := @parameter0: kanzi.SliceIntArray;

        destination := @parameter1: kanzi.SliceIntArray;

        srcIdx = source.<kanzi.SliceIntArray: int index>;

        dstIdx = destination.<kanzi.SliceIntArray: int index>;

        src = source.<kanzi.SliceIntArray: int[] array>;

        dst = destination.<kanzi.SliceIntArray: int[] array>;

        $r0 = new kanzi.function.wavelet.WaveletBandScanner;

        $i0 = this.<kanzi.function.wavelet.WaveletCSFFilter: int width>;

        $i1 = this.<kanzi.function.wavelet.WaveletCSFFilter: int height>;

        $i2 = this.<kanzi.function.wavelet.WaveletCSFFilter: int levels>;

        specialinvoke $r0.<kanzi.function.wavelet.WaveletBandScanner: void <init>(int,int,int,int)>($i0, $i1, 7, $i2);

        sc = $r0;

        channel = this.<kanzi.function.wavelet.WaveletCSFFilter: int channelType>;

        level#20 = 0;

        $i3 = this.<kanzi.function.wavelet.WaveletCSFFilter: int width>;

        $i4 = 3 * $i3;

        $i5 = this.<kanzi.function.wavelet.WaveletCSFFilter: int height>;

        levelSize#28 = $i4 * $i5;

        $i6 = levelSize#28 + levelSize#28;

        startHHBand#34 = $i6 / 3;

        read#36 = 0;

        length#38 = levelSize#28;

        if channel != 0 goto label01;

        $r1 = <kanzi.function.wavelet.WaveletCSFFilter: kanzi.function.wavelet.WaveletCSFFilter$CSF[][] Y_BAND_CSF_WEIGHTS_32>;

        $i7 = this.<kanzi.function.wavelet.WaveletCSFFilter: int levels>;

        csfWeights#44 = $r1[$i7];

        goto label03;

     label01:
        if channel != 2 goto label02;

        $r2 = <kanzi.function.wavelet.WaveletCSFFilter: kanzi.function.wavelet.WaveletCSFFilter$CSF[][] Cr_BAND_CSF_WEIGHTS_32>;

        $i8 = this.<kanzi.function.wavelet.WaveletCSFFilter: int levels>;

        csfWeights#44 = $r2[$i8];

        goto label03;

     label02:
        $r3 = <kanzi.function.wavelet.WaveletCSFFilter: kanzi.function.wavelet.WaveletCSFFilter$CSF[][] Cb_BAND_CSF_WEIGHTS_32>;

        $i9 = this.<kanzi.function.wavelet.WaveletCSFFilter: int levels>;

        csfWeights#44 = $r3[$i9];

     label03:
        $r4 = csfWeights#44[level#20];

        csfWeight#59 = $r4.<kanzi.function.wavelet.WaveletCSFFilter$CSF: int HL_LH_bands>;

        offset#61 = 0;

        j#63 = 0;

     label04:
        $i10 = this.<kanzi.function.wavelet.WaveletCSFFilter: int height>;

        if j#63 >= $i10 goto label07;

        i#68 = 0;

     label05:
        $i11 = this.<kanzi.function.wavelet.WaveletCSFFilter: int width>;

        if i#68 >= $i11 goto label06;

        idx = offset#61 + i#68;

        $i12 = srcIdx + idx;

        val = src[$i12];

        $i13 = dstIdx + idx;

        $i14 = csfWeight#59 * val;

        $i15 = $i14 + 16;

        dst[$i13] = $i15;

        i#68 = i#68 + 1;

        goto label05;

     label06:
        $i16 = this.<kanzi.function.wavelet.WaveletCSFFilter: int width>;

        offset#61 = offset#61 + $i16;

        j#63 = j#63 + 1;

        goto label04;

     label07:
        level#93 = level#20 + 1;

        $r5 = csfWeights#44[level#93];

        csfWeight#98 = $r5.<kanzi.function.wavelet.WaveletCSFFilter$CSF: int HL_LH_bands>;

        processed#100 = 0;

     label08:
        $i17 = virtualinvoke sc.<kanzi.function.wavelet.WaveletBandScanner: int getSize()>();

        if processed#100 >= $i17 goto label17;

        $r6 = this.<kanzi.function.wavelet.WaveletCSFFilter: int[] buffer>;

        l = virtualinvoke sc.<kanzi.function.wavelet.WaveletBandScanner: int getIndexes(int[],int,int)>($r6, length#38, read#36);

        processed#100 = processed#100 + l;

        read#36 = read#36 + l;

        if startHHBand#34 >= length#38 goto label09;

        $i18 = startHHBand#34;

        goto label10;

     label09:
        $i18 = length#38;

     label10:
        part1 = $i18;

        n#120 = 0;

     label11:
        if n#120 >= part1 goto label12;

        $r7 = this.<kanzi.function.wavelet.WaveletCSFFilter: int[] buffer>;

        idx#127 = $r7[n#120];

        $i19 = srcIdx + idx#127;

        val#133 = src[$i19];

        $i20 = dstIdx + idx#127;

        $i21 = csfWeight#98 * val#133;

        $i22 = $i21 + 16;

        $i23 = $i22 >> 2;

        dst[$i20] = $i23;

        n#120 = n#120 + 1;

        goto label11;

     label12:
        if n#120 != startHHBand#34 goto label13;

        $r8 = csfWeights#44[level#93];

        csfWeight#98 = $r8.<kanzi.function.wavelet.WaveletCSFFilter$CSF: int HH_band>;

     label13:
        if n#120 >= length#38 goto label14;

        $r9 = this.<kanzi.function.wavelet.WaveletCSFFilter: int[] buffer>;

        idx#157 = $r9[n#120];

        $i24 = srcIdx + idx#157;

        val#163 = src[$i24];

        $i25 = dstIdx + idx#157;

        $i26 = csfWeight#98 * val#163;

        $i27 = $i26 + 16;

        $i28 = $i27 >> 2;

        dst[$i25] = $i28;

        n#120 = n#120 + 1;

        goto label13;

     label14:
        if read#36 != levelSize#28 goto label15;

        levelSize#28 = levelSize#28 << 2;

        read#36 = 0;

        level#93 = level#93 + 1;

        $i29 = levelSize#28 + levelSize#28;

        startHHBand#34 = $i29 / 3;

        $i30 = this.<kanzi.function.wavelet.WaveletCSFFilter: int levels>;

        if level#93 >= $i30 goto label15;

        $r10 = csfWeights#44[level#93];

        csfWeight#98 = $r10.<kanzi.function.wavelet.WaveletCSFFilter$CSF: int HL_LH_bands>;

     label15:
        length#38 = levelSize#28 - read#36;

        $r11 = this.<kanzi.function.wavelet.WaveletCSFFilter: int[] buffer>;

        $i31 = lengthof $r11;

        if length#38 <= $i31 goto label16;

        $r12 = this.<kanzi.function.wavelet.WaveletCSFFilter: int[] buffer>;

        length#38 = lengthof $r12;

     label16:
        goto label08;

     label17:
        $i32 = this.<kanzi.function.wavelet.WaveletCSFFilter: int width>;

        $i33 = this.<kanzi.function.wavelet.WaveletCSFFilter: int height>;

        $i34 = $i32 * $i33;

        source.<kanzi.SliceIntArray: int index> = $i34;

        $i35 = this.<kanzi.function.wavelet.WaveletCSFFilter: int width>;

        $i36 = this.<kanzi.function.wavelet.WaveletCSFFilter: int height>;

        $i37 = $i35 * $i36;

        destination.<kanzi.SliceIntArray: int index> = $i37;

        return 1;
    }

    public boolean inverse(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.function.wavelet.WaveletCSFFilter this;
        kanzi.SliceIntArray source, destination;
        int srcIdx, dstIdx, channel, idx, val, l, part1, $i0, $i1, $i2, $i3, $i4, $i5, levelSize#28, $i6, startHHBand#34, read#36, length#38, $i7, $i8, $i9, csfWeight#59, offset#61, j#63, $i10, i#68, $i11, $i12, $i13, $i14, $i15, $i16, level#94, csfWeight#99, processed#101, $i17, $i18, n#121, idx#128, $i19, val#134, $i20, $i21, $i22, idx#156, $i23, val#162, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34;
        int[] src, dst, $r5, $r7, $r8, $r10, $r12, $r13;
        kanzi.function.wavelet.WaveletBandScanner sc, $r0;
        byte level#20;
        kanzi.function.wavelet.WaveletCSFFilter$CSF[][] $r1, $r2, $r3;
        kanzi.function.wavelet.WaveletCSFFilter$CSF[] csfWeights#44;
        kanzi.function.wavelet.WaveletCSFFilter$CSF $r4, $r6, $r9, $r11;

        this := @this: kanzi.function.wavelet.WaveletCSFFilter;

        source := @parameter0: kanzi.SliceIntArray;

        destination := @parameter1: kanzi.SliceIntArray;

        srcIdx = source.<kanzi.SliceIntArray: int index>;

        dstIdx = destination.<kanzi.SliceIntArray: int index>;

        src = source.<kanzi.SliceIntArray: int[] array>;

        dst = destination.<kanzi.SliceIntArray: int[] array>;

        $r0 = new kanzi.function.wavelet.WaveletBandScanner;

        $i0 = this.<kanzi.function.wavelet.WaveletCSFFilter: int width>;

        $i1 = this.<kanzi.function.wavelet.WaveletCSFFilter: int height>;

        $i2 = this.<kanzi.function.wavelet.WaveletCSFFilter: int levels>;

        specialinvoke $r0.<kanzi.function.wavelet.WaveletBandScanner: void <init>(int,int,int,int)>($i0, $i1, 7, $i2);

        sc = $r0;

        channel = this.<kanzi.function.wavelet.WaveletCSFFilter: int channelType>;

        level#20 = 0;

        $i3 = this.<kanzi.function.wavelet.WaveletCSFFilter: int width>;

        $i4 = 3 * $i3;

        $i5 = this.<kanzi.function.wavelet.WaveletCSFFilter: int height>;

        levelSize#28 = $i4 * $i5;

        $i6 = levelSize#28 + levelSize#28;

        startHHBand#34 = $i6 / 3;

        read#36 = 0;

        length#38 = levelSize#28;

        if channel != 0 goto label01;

        $r1 = <kanzi.function.wavelet.WaveletCSFFilter: kanzi.function.wavelet.WaveletCSFFilter$CSF[][] Y_BAND_CSF_WEIGHTS_32>;

        $i7 = this.<kanzi.function.wavelet.WaveletCSFFilter: int levels>;

        csfWeights#44 = $r1[$i7];

        goto label03;

     label01:
        if channel != 2 goto label02;

        $r2 = <kanzi.function.wavelet.WaveletCSFFilter: kanzi.function.wavelet.WaveletCSFFilter$CSF[][] Cr_BAND_CSF_WEIGHTS_32>;

        $i8 = this.<kanzi.function.wavelet.WaveletCSFFilter: int levels>;

        csfWeights#44 = $r2[$i8];

        goto label03;

     label02:
        $r3 = <kanzi.function.wavelet.WaveletCSFFilter: kanzi.function.wavelet.WaveletCSFFilter$CSF[][] Cb_BAND_CSF_WEIGHTS_32>;

        $i9 = this.<kanzi.function.wavelet.WaveletCSFFilter: int levels>;

        csfWeights#44 = $r3[$i9];

     label03:
        $r4 = csfWeights#44[level#20];

        csfWeight#59 = $r4.<kanzi.function.wavelet.WaveletCSFFilter$CSF: int HL_LH_bands>;

        offset#61 = 0;

        j#63 = 0;

     label04:
        $i10 = this.<kanzi.function.wavelet.WaveletCSFFilter: int height>;

        if j#63 >= $i10 goto label07;

        i#68 = 0;

     label05:
        $i11 = this.<kanzi.function.wavelet.WaveletCSFFilter: int width>;

        if i#68 >= $i11 goto label06;

        $r5 = this.<kanzi.function.wavelet.WaveletCSFFilter: int[] buffer>;

        $i12 = offset#61 + i#68;

        idx = $r5[$i12];

        $i13 = srcIdx + idx;

        val = src[$i13];

        $i14 = dstIdx + idx;

        $i15 = val / csfWeight#59;

        dst[$i14] = $i15;

        i#68 = i#68 + 1;

        goto label05;

     label06:
        $i16 = this.<kanzi.function.wavelet.WaveletCSFFilter: int width>;

        offset#61 = offset#61 + $i16;

        j#63 = j#63 + 1;

        goto label04;

     label07:
        level#94 = level#20 + 1;

        $r6 = csfWeights#44[level#94];

        csfWeight#99 = $r6.<kanzi.function.wavelet.WaveletCSFFilter$CSF: int HL_LH_bands>;

        processed#101 = 0;

     label08:
        $i17 = virtualinvoke sc.<kanzi.function.wavelet.WaveletBandScanner: int getSize()>();

        if processed#101 >= $i17 goto label17;

        $r7 = this.<kanzi.function.wavelet.WaveletCSFFilter: int[] buffer>;

        l = virtualinvoke sc.<kanzi.function.wavelet.WaveletBandScanner: int getIndexes(int[],int,int)>($r7, length#38, read#36);

        processed#101 = processed#101 + l;

        read#36 = read#36 + l;

        if startHHBand#34 >= length#38 goto label09;

        $i18 = startHHBand#34;

        goto label10;

     label09:
        $i18 = length#38;

     label10:
        part1 = $i18;

        n#121 = 0;

     label11:
        if n#121 >= part1 goto label12;

        $r8 = this.<kanzi.function.wavelet.WaveletCSFFilter: int[] buffer>;

        idx#128 = $r8[n#121];

        $i19 = srcIdx + idx#128;

        val#134 = src[$i19];

        $i20 = dstIdx + idx#128;

        $i21 = val#134 << 2;

        $i22 = $i21 / csfWeight#99;

        dst[$i20] = $i22;

        n#121 = n#121 + 1;

        goto label11;

     label12:
        if n#121 != startHHBand#34 goto label13;

        $r9 = csfWeights#44[level#94];

        csfWeight#99 = $r9.<kanzi.function.wavelet.WaveletCSFFilter$CSF: int HH_band>;

     label13:
        if n#121 >= length#38 goto label14;

        $r10 = this.<kanzi.function.wavelet.WaveletCSFFilter: int[] buffer>;

        idx#156 = $r10[n#121];

        $i23 = srcIdx + idx#156;

        val#162 = src[$i23];

        $i24 = dstIdx + idx#156;

        $i25 = val#162 << 2;

        $i26 = $i25 / csfWeight#99;

        dst[$i24] = $i26;

        n#121 = n#121 + 1;

        goto label13;

     label14:
        if read#36 != levelSize#28 goto label15;

        levelSize#28 = levelSize#28 << 2;

        read#36 = 0;

        level#94 = level#94 + 1;

        $r11 = csfWeights#44[level#94];

        csfWeight#99 = $r11.<kanzi.function.wavelet.WaveletCSFFilter$CSF: int HL_LH_bands>;

        $i27 = levelSize#28 + levelSize#28;

        startHHBand#34 = $i27 / 3;

     label15:
        length#38 = levelSize#28 - read#36;

        $r12 = this.<kanzi.function.wavelet.WaveletCSFFilter: int[] buffer>;

        $i28 = lengthof $r12;

        if length#38 <= $i28 goto label16;

        $r13 = this.<kanzi.function.wavelet.WaveletCSFFilter: int[] buffer>;

        length#38 = lengthof $r13;

     label16:
        goto label08;

     label17:
        $i29 = this.<kanzi.function.wavelet.WaveletCSFFilter: int width>;

        $i30 = this.<kanzi.function.wavelet.WaveletCSFFilter: int height>;

        $i31 = $i29 * $i30;

        source.<kanzi.SliceIntArray: int index> = $i31;

        $i32 = this.<kanzi.function.wavelet.WaveletCSFFilter: int width>;

        $i33 = this.<kanzi.function.wavelet.WaveletCSFFilter: int height>;

        $i34 = $i32 * $i33;

        destination.<kanzi.SliceIntArray: int index> = $i34;

        return 1;
    }


