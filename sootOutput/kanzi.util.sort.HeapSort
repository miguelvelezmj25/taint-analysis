    public boolean sort(int[], int, int)
    {
        kanzi.util.sort.HeapSort this;
        int[] input;
        int blkptr, len, temp, $i0, $i1, k#15, i#26, $i2, $i3, $i4;
        kanzi.ArrayComparator $r0, $r1;

        this := @this: kanzi.util.sort.HeapSort;

        input := @parameter0: int[];

        blkptr := @parameter1: int;

        len := @parameter2: int;

        if blkptr < 0 goto label1;

        if len <= 0 goto label1;

        $i0 = blkptr + len;

        $i1 = lengthof input;

        if $i0 <= $i1 goto label2;

     label1:
        return 0;

     label2:
        if len != 1 goto label3;

        return 1;

     label3:
        k#15 = len >> 1;

     label4:
        if k#15 <= 0 goto label5;

        $r0 = this.<kanzi.util.sort.HeapSort: kanzi.ArrayComparator 'cmp'>;

        staticinvoke <kanzi.util.sort.HeapSort: void doSort(int[],int,int,int,kanzi.ArrayComparator)>(input, blkptr, k#15, len, $r0);

        k#15 = k#15 + -1;

        goto label4;

     label5:
        i#26 = len - 1;

     label6:
        if i#26 <= 0 goto label7;

        temp = input[blkptr];

        $i2 = blkptr + i#26;

        $i3 = input[$i2];

        input[blkptr] = $i3;

        $i4 = blkptr + i#26;

        input[$i4] = temp;

        $r1 = this.<kanzi.util.sort.HeapSort: kanzi.ArrayComparator 'cmp'>;

        staticinvoke <kanzi.util.sort.HeapSort: void doSort(int[],int,int,int,kanzi.ArrayComparator)>(input, blkptr, 1, i#26, $r1);

        i#26 = i#26 + -1;

        goto label6;

     label7:
        return 1;
    }

    private static void doSort(int[], int, int, int, kanzi.ArrayComparator)
    {
        int[] array;
        int blkptr, idx, count, temp, n, k#2, $i0, $i1, j#19, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, j#63, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30;
        kanzi.ArrayComparator 'cmp';

        array := @parameter0: int[];

        blkptr := @parameter1: int;

        idx := @parameter2: int;

        count := @parameter3: int;

        'cmp' := @parameter4: kanzi.ArrayComparator;

        k#2 = idx;

        $i0 = blkptr + k#2;

        $i1 = $i0 - 1;

        temp = array[$i1];

        n = count >> 1;

        if 'cmp' == null goto label4;

     label1:
        if k#2 > n goto label7;

        j#19 = k#2 << 1;

        if j#19 >= count goto label2;

        $i2 = blkptr + j#19;

        $i3 = $i2 - 1;

        $i4 = array[$i3];

        $i5 = blkptr + j#19;

        $i6 = array[$i5];

        $i7 = interfaceinvoke 'cmp'.<kanzi.ArrayComparator: int compare(int,int)>($i4, $i6);

        if $i7 >= 0 goto label2;

        j#19 = j#19 + 1;

     label2:
        $i8 = blkptr + j#19;

        $i9 = $i8 - 1;

        $i10 = array[$i9];

        if temp < $i10 goto label3;

        goto label7;

     label3:
        $i11 = blkptr + k#2;

        $i12 = $i11 - 1;

        $i13 = blkptr + j#19;

        $i14 = $i13 - 1;

        $i15 = array[$i14];

        array[$i12] = $i15;

        k#2 = j#19;

        goto label1;

     label4:
        if k#2 > n goto label7;

        j#63 = k#2 << 1;

        if j#63 >= count goto label5;

        $i16 = blkptr + j#63;

        $i17 = $i16 - 1;

        $i18 = array[$i17];

        $i19 = blkptr + j#63;

        $i20 = array[$i19];

        if $i18 >= $i20 goto label5;

        j#63 = j#63 + 1;

     label5:
        $i21 = blkptr + j#63;

        $i22 = $i21 - 1;

        $i23 = array[$i22];

        if temp < $i23 goto label6;

        goto label7;

     label6:
        $i24 = blkptr + k#2;

        $i25 = $i24 - 1;

        $i26 = blkptr + j#63;

        $i27 = $i26 - 1;

        $i28 = array[$i27];

        array[$i25] = $i28;

        k#2 = j#63;

        goto label4;

     label7:
        $i29 = blkptr + k#2;

        $i30 = $i29 - 1;

        array[$i30] = temp;

        return;
    }


