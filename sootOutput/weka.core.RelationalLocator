    public void <init>(weka.core.Instances, int[])
    {
        weka.core.RelationalLocator this;
        weka.core.Instances data;
        int[] indices;

        this := @this: weka.core.RelationalLocator;

        data := @parameter0: weka.core.Instances;

        indices := @parameter1: int[];

        specialinvoke this.<weka.core.AttributeLocator: void <init>(weka.core.Instances,int,int[])>(data, 4, indices);

        return;
    }

    public static void copyRelationalValues(weka.core.Instance, weka.core.Instances, weka.core.AttributeLocator)
    {
        weka.core.Instance inst;
        weka.core.Instances destDataset, $r0, $r2, $r6, $r11;
        weka.core.AttributeLocator strAtts;
        java.lang.IllegalArgumentException $r1, $r3;
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r9;
        java.lang.String $r10;

        inst := @parameter0: weka.core.Instance;

        destDataset := @parameter1: weka.core.Instances;

        strAtts := @parameter2: weka.core.AttributeLocator;

        $r0 = interfaceinvoke inst.<weka.core.Instance: weka.core.Instances dataset()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Instance has no dataset assigned!!");

        throw $r1;

     label1:
        $r2 = interfaceinvoke inst.<weka.core.Instance: weka.core.Instances dataset()>();

        $i0 = virtualinvoke $r2.<weka.core.Instances: int numAttributes()>();

        $i1 = virtualinvoke destDataset.<weka.core.Instances: int numAttributes()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i0 == $i1 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Src and Dest differ in # of attributes: ");

        $r6 = interfaceinvoke inst.<weka.core.Instance: weka.core.Instances dataset()>();

        $i2 = virtualinvoke $r6.<weka.core.Instances: int numAttributes()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ");

        $i3 = virtualinvoke destDataset.<weka.core.Instances: int numAttributes()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r3;

     label2:
        $r11 = interfaceinvoke inst.<weka.core.Instance: weka.core.Instances dataset()>();

        staticinvoke <weka.core.RelationalLocator: void copyRelationalValues(weka.core.Instance,boolean,weka.core.Instances,weka.core.AttributeLocator,weka.core.Instances,weka.core.AttributeLocator)>(inst, 1, $r11, strAtts, destDataset, strAtts);

        return;
    }

    public static void copyRelationalValues(weka.core.Instance, boolean, weka.core.Instances, weka.core.AttributeLocator, weka.core.Instances, weka.core.AttributeLocator)
    {
        weka.core.Instance instance, $r31;
        boolean instSrcCompat, $z0, $z1;
        weka.core.Instances srcDataset, destDataset, rel, srcDatasetNew, destDatasetNew, $r27, $r29;
        weka.core.AttributeLocator srcLoc, destLoc, srcRelAttsNew, destRelAttsNew;
        int instIndex, valIndex, index, valueIndex, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i#50, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i#103, $i17, $i18, $i19, $i20, $i21, $i22, n#149, $i23;
        weka.core.Attribute src, dest, $r28, $r30;
        int[] srcIndices, destIndices, $r0, $r1, $r5, $r8, $r11, $r12, $r16, $r19, $r22, $r23, $r24, $r25, $r26;
        java.lang.IllegalArgumentException $r2, $r13;
        java.lang.StringBuilder $r3, $r4, $r6, $r7, $r9, $r14, $r15, $r17, $r18, $r20;
        java.lang.String $r10, $r21;
        double $d0, $d1, $d2;

        instance := @parameter0: weka.core.Instance;

        instSrcCompat := @parameter1: boolean;

        srcDataset := @parameter2: weka.core.Instances;

        srcLoc := @parameter3: weka.core.AttributeLocator;

        destDataset := @parameter4: weka.core.Instances;

        destLoc := @parameter5: weka.core.AttributeLocator;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(srcDataset);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(destDataset);

        if srcDataset != destDataset goto label01;

        return;

     label01:
        $r0 = virtualinvoke srcLoc.<weka.core.AttributeLocator: int[] getAttributeIndices()>();

        $i0 = lengthof $r0;

        $r1 = virtualinvoke destLoc.<weka.core.AttributeLocator: int[] getAttributeIndices()>();

        $i1 = lengthof $r1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i0 == $i1 goto label02;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Src and Dest relational indices differ in length: ");

        $r5 = virtualinvoke srcLoc.<weka.core.AttributeLocator: int[] getAttributeIndices()>();

        $i2 = lengthof $r5;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ");

        $r8 = virtualinvoke destLoc.<weka.core.AttributeLocator: int[] getAttributeIndices()>();

        $i3 = lengthof $r8;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r2;

     label02:
        $r11 = virtualinvoke srcLoc.<weka.core.AttributeLocator: int[] getLocatorIndices()>();

        $i4 = lengthof $r11;

        $r12 = virtualinvoke destLoc.<weka.core.AttributeLocator: int[] getLocatorIndices()>();

        $i5 = lengthof $r12;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i4 == $i5 goto label03;

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Src and Dest locator indices differ in length: ");

        $r16 = virtualinvoke srcLoc.<weka.core.AttributeLocator: int[] getLocatorIndices()>();

        $i6 = lengthof $r16;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ");

        $r19 = virtualinvoke destLoc.<weka.core.AttributeLocator: int[] getLocatorIndices()>();

        $i7 = lengthof $r19;

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r13;

     label03:
        i#50 = 0;

     label04:
        $r22 = virtualinvoke srcLoc.<weka.core.AttributeLocator: int[] getAttributeIndices()>();

        $i8 = lengthof $r22;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#50);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if i#50 >= $i8 goto label08;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(instSrcCompat);

        if instSrcCompat == 0 goto label05;

        $r23 = virtualinvoke srcLoc.<weka.core.AttributeLocator: int[] getAttributeIndices()>();

        $i9 = $r23[i#50];

        $i10 = virtualinvoke srcLoc.<weka.core.AttributeLocator: int getActualIndex(int)>($i9);

        goto label06;

     label05:
        $r24 = virtualinvoke destLoc.<weka.core.AttributeLocator: int[] getAttributeIndices()>();

        $i11 = $r24[i#50];

        $i10 = virtualinvoke destLoc.<weka.core.AttributeLocator: int getActualIndex(int)>($i11);

     label06:
        instIndex = $i10;

        $r25 = virtualinvoke srcLoc.<weka.core.AttributeLocator: int[] getAttributeIndices()>();

        $i12 = $r25[i#50];

        $i13 = virtualinvoke srcLoc.<weka.core.AttributeLocator: int getActualIndex(int)>($i12);

        src = virtualinvoke srcDataset.<weka.core.Instances: weka.core.Attribute attribute(int)>($i13);

        $r26 = virtualinvoke destLoc.<weka.core.AttributeLocator: int[] getAttributeIndices()>();

        $i14 = $r26[i#50];

        $i15 = virtualinvoke destLoc.<weka.core.AttributeLocator: int getActualIndex(int)>($i14);

        dest = virtualinvoke destDataset.<weka.core.Instances: weka.core.Attribute attribute(int)>($i15);

        $z0 = interfaceinvoke instance.<weka.core.Instance: boolean isMissing(int)>(instIndex);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label07;

        $d0 = interfaceinvoke instance.<weka.core.Instance: double value(int)>(instIndex);

        $i16 = (int) $d0;

        $r27 = virtualinvoke src.<weka.core.Attribute: weka.core.Instances relation(int)>($i16);

        valIndex = virtualinvoke dest.<weka.core.Attribute: int addRelation(weka.core.Instances)>($r27);

        $d1 = (double) valIndex;

        interfaceinvoke instance.<weka.core.Instance: void setValue(int,double)>(instIndex, $d1);

     label07:
        i#50 = i#50 + 1;

        goto label04;

     label08:
        srcIndices = virtualinvoke srcLoc.<weka.core.AttributeLocator: int[] getLocatorIndices()>();

        destIndices = virtualinvoke destLoc.<weka.core.AttributeLocator: int[] getLocatorIndices()>();

        i#103 = 0;

     label09:
        $i17 = lengthof srcIndices;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#103);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i17);

        if i#103 >= $i17 goto label17;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(instSrcCompat);

        if instSrcCompat == 0 goto label10;

        $i18 = srcIndices[i#103];

        $i19 = virtualinvoke srcLoc.<weka.core.AttributeLocator: int getActualIndex(int)>($i18);

        goto label11;

     label10:
        $i20 = destIndices[i#103];

        $i19 = virtualinvoke destLoc.<weka.core.AttributeLocator: int getActualIndex(int)>($i20);

     label11:
        index = $i19;

        $z1 = interfaceinvoke instance.<weka.core.Instance: boolean isMissing(int)>(index);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label12;

        goto label16;

     label12:
        $d2 = interfaceinvoke instance.<weka.core.Instance: double value(int)>(index);

        valueIndex = (int) $d2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(instSrcCompat);

        if instSrcCompat == 0 goto label13;

        $r28 = virtualinvoke srcDataset.<weka.core.Instances: weka.core.Attribute attribute(int)>(index);

        $r29 = virtualinvoke $r28.<weka.core.Attribute: weka.core.Instances relation(int)>(valueIndex);

        goto label14;

     label13:
        $r30 = virtualinvoke destDataset.<weka.core.Instances: weka.core.Attribute attribute(int)>(index);

        $r29 = virtualinvoke $r30.<weka.core.Attribute: weka.core.Instances relation(int)>(valueIndex);

     label14:
        rel = $r29;

        $i21 = srcIndices[i#103];

        srcRelAttsNew = virtualinvoke srcLoc.<weka.core.AttributeLocator: weka.core.AttributeLocator getLocator(int)>($i21);

        srcDatasetNew = virtualinvoke srcRelAttsNew.<weka.core.AttributeLocator: weka.core.Instances getData()>();

        $i22 = destIndices[i#103];

        destRelAttsNew = virtualinvoke destLoc.<weka.core.AttributeLocator: weka.core.AttributeLocator getLocator(int)>($i22);

        destDatasetNew = virtualinvoke destRelAttsNew.<weka.core.AttributeLocator: weka.core.Instances getData()>();

        n#149 = 0;

     label15:
        $i23 = virtualinvoke rel.<weka.core.Instances: int numInstances()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n#149);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i23);

        if n#149 >= $i23 goto label16;

        $r31 = virtualinvoke rel.<weka.core.Instances: weka.core.Instance instance(int)>(n#149);

        staticinvoke <weka.core.RelationalLocator: void copyRelationalValues(weka.core.Instance,boolean,weka.core.Instances,weka.core.AttributeLocator,weka.core.Instances,weka.core.AttributeLocator)>($r31, instSrcCompat, srcDatasetNew, srcRelAttsNew, destDatasetNew, destRelAttsNew);

        n#149 = n#149 + 1;

        goto label15;

     label16:
        i#103 = i#103 + 1;

        goto label09;

     label17:
        return;
    }

    public void <init>(weka.core.Instances)
    {
        weka.core.RelationalLocator this;
        weka.core.Instances data;

        this := @this: weka.core.RelationalLocator;

        data := @parameter0: weka.core.Instances;

        specialinvoke this.<weka.core.AttributeLocator: void <init>(weka.core.Instances,int)>(data, 4);

        return;
    }


