    public static double parseDouble(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String l0;
        double $d0;

        l0 := @parameter0: java.lang.String;

        $d0 = staticinvoke <sun.misc.FloatingDecimal: double parseDouble(java.lang.String)>(l0);

        return $d0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;

        $r0 = staticinvoke <java.lang.Class: java.lang.Class getPrimitiveClass(java.lang.String)>("double");

        <java.lang.Double: java.lang.Class TYPE> = $r0;

        return;
    }

    public static java.lang.Double valueOf(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String l0;
        java.lang.Double $r0;
        double $d0;

        l0 := @parameter0: java.lang.String;

        $r0 = new java.lang.Double;

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(l0);

        specialinvoke $r0.<java.lang.Double: void <init>(double)>($d0);

        return $r0;
    }

    public static boolean isNaN(double)
    {
        double l0;
        byte $b0;
        boolean $z0;

        l0 := @parameter0: double;

        $b0 = l0 cmpl l0;

        if $b0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void <init>(double)
    {
        java.lang.Double l0;
        double l1;

        l0 := @this: java.lang.Double;

        l1 := @parameter0: double;

        specialinvoke l0.<java.lang.Number: void <init>()>();

        l0.<java.lang.Double: double value> = l1;

        return;
    }

    public double doubleValue()
    {
        java.lang.Double l0;
        double $d0;

        l0 := @this: java.lang.Double;

        $d0 = l0.<java.lang.Double: double value>;

        return $d0;
    }

    public void <init>(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.Double l0;
        java.lang.String l1;
        double $d0;

        l0 := @this: java.lang.Double;

        l1 := @parameter0: java.lang.String;

        specialinvoke l0.<java.lang.Number: void <init>()>();

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(l1);

        l0.<java.lang.Double: double value> = $d0;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.Double l0;
        double $d0;
        java.lang.String $r0;

        l0 := @this: java.lang.Double;

        $d0 = l0.<java.lang.Double: double value>;

        $r0 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d0);

        return $r0;
    }

    public static java.lang.String toString(double)
    {
        double l0;
        java.lang.String $r0;

        l0 := @parameter0: double;

        $r0 = staticinvoke <sun.misc.FloatingDecimal: java.lang.String toJavaFormatString(double)>(l0);

        return $r0;
    }

    public static java.lang.Double valueOf(double)
    {
        double l0;
        java.lang.Double $r0;

        l0 := @parameter0: double;

        $r0 = new java.lang.Double;

        specialinvoke $r0.<java.lang.Double: void <init>(double)>(l0);

        return $r0;
    }


