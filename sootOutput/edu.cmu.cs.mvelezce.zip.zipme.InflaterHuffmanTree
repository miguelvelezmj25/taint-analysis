    static void <clinit>()
    {
        edu.cmu.cs.mvelezce.zip.zipme.DataFormatException ex, $r2;
        byte[] codeLengths#3, codeLengths#31;
        int i#5, $i0, $i1, $i2, $i3, i#33, $i4;
        edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree $r0, $r1;
        java.lang.Error $r3;

     label01:
        codeLengths#3 = newarray (byte)[288];

        i#5 = 0;

     label02:
        if i#5 >= 144 goto label03;

        $i0 = i#5;

        i#5 = i#5 + 1;

        codeLengths#3[$i0] = 8;

        goto label02;

     label03:
        if i#5 >= 256 goto label04;

        $i1 = i#5;

        i#5 = i#5 + 1;

        codeLengths#3[$i1] = 9;

        goto label03;

     label04:
        if i#5 >= 280 goto label05;

        $i2 = i#5;

        i#5 = i#5 + 1;

        codeLengths#3[$i2] = 7;

        goto label04;

     label05:
        if i#5 >= 288 goto label06;

        $i3 = i#5;

        i#5 = i#5 + 1;

        codeLengths#3[$i3] = 8;

        goto label05;

     label06:
        $r0 = new edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree;

        specialinvoke $r0.<edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree: void <init>(byte[])>(codeLengths#3);

        <edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree: edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree defLitLenTree> = $r0;

        codeLengths#31 = newarray (byte)[32];

        i#33 = 0;

     label07:
        if i#33 >= 32 goto label08;

        $i4 = i#33;

        i#33 = i#33 + 1;

        codeLengths#31[$i4] = 5;

        goto label07;

     label08:
        $r1 = new edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree;

        specialinvoke $r1.<edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree: void <init>(byte[])>(codeLengths#31);

        <edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree: edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree defDistTree> = $r1;

     label09:
        goto label11;

     label10:
        $r2 := @caughtexception;

        ex = $r2;

        $r3 = new java.lang.Error;

        specialinvoke $r3.<java.lang.Error: void <init>(java.lang.String)>("InflaterHuffmanTree: static tree length illegal");

        throw $r3;

     label11:
        return;

        catch edu.cmu.cs.mvelezce.zip.zipme.DataFormatException from label01 to label09 with label10;
    }

    void <init>(byte[]) throws edu.cmu.cs.mvelezce.zip.zipme.DataFormatException
    {
        edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree this;
        byte[] codeLengths;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree;

        codeLengths := @parameter0: byte[];

        specialinvoke this.<java.lang.Object: void <init>()>();

        specialinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree: void buildTree(byte[])>(codeLengths);

        return;
    }

    private void buildTree(byte[]) throws edu.cmu.cs.mvelezce.zip.zipme.DataFormatException
    {
        edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree this;
        byte[] codeLengths;
        int[] blCount, nextCode;
        byte bits, bits;
        int start, start, treeLen, i#6, $i0, $i2, $i3, code#22, treeSize#24, bits#26, $i4, $i5, $i6, $i7, end#51, $i8, $i9, $i10, treePtr#70, bits#72, end#78, $i11, $i12, $i13, i#92, $i15, $i16, $i17, $i19, $i20, i#114, $i21, code#125, revcode#128, $i22, $i23, $i25, $i26, $i29, $i30, $i31, $i32, $i34, $i35, $i36, $i37;
        edu.cmu.cs.mvelezce.zip.zipme.DataFormatException $r1;
        short[] $r2, $r3, $r4, $r5, $r6;
        short $s14, $s18, $s24, subTree#153, $s27, $s28, subTree#163, $s33;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree;

        codeLengths := @parameter0: byte[];

        blCount = newarray (int)[16];

        nextCode = newarray (int)[16];

        i#6 = 0;

     label01:
        $i0 = lengthof codeLengths;

        if i#6 >= $i0 goto label03;

        bits = codeLengths[i#6];

        if bits <= 0 goto label02;

        $i2 = blCount[bits];

        $i3 = $i2 + 1;

        blCount[bits] = $i3;

     label02:
        i#6 = i#6 + 1;

        goto label01;

     label03:
        code#22 = 0;

        treeSize#24 = 512;

        bits#26 = 1;

     label04:
        if bits#26 > 15 goto label06;

        nextCode[bits#26] = code#22;

        $i4 = blCount[bits#26];

        $i5 = 16 - bits#26;

        $i6 = $i4 << $i5;

        code#22 = code#22 + $i6;

        if bits#26 < 10 goto label05;

        $i7 = nextCode[bits#26];

        start = $i7 & 130944;

        end#51 = code#22 & 130944;

        $i8 = end#51 - start;

        $i9 = 16 - bits#26;

        $i10 = $i8 >> $i9;

        treeSize#24 = treeSize#24 + $i10;

     label05:
        bits#26 = bits#26 + 1;

        goto label04;

     label06:
        if code#22 == 65536 goto label07;

        $r1 = new edu.cmu.cs.mvelezce.zip.zipme.DataFormatException;

        specialinvoke $r1.<edu.cmu.cs.mvelezce.zip.zipme.DataFormatException: void <init>(java.lang.String)>("Code lengths don\'t add up properly.");

        throw $r1;

     label07:
        $r2 = newarray (short)[treeSize#24];

        this.<edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree: short[] tree> = $r2;

        treePtr#70 = 512;

        bits#72 = 15;

     label08:
        if bits#72 < 10 goto label11;

        end#78 = code#22 & 130944;

        $i11 = blCount[bits#72];

        $i12 = 16 - bits#72;

        $i13 = $i11 << $i12;

        code#22 = code#22 - $i13;

        start = code#22 & 130944;

        i#92 = start;

     label09:
        if i#92 >= end#78 goto label10;

        $r3 = this.<edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree: short[] tree>;

        $s14 = staticinvoke <edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: short bitReverse(int)>(i#92);

        $i15 = neg treePtr#70;

        $i16 = $i15 << 4;

        $i17 = $i16 | bits#72;

        $s18 = (short) $i17;

        $r3[$s14] = $s18;

        $i19 = bits#72 - 9;

        $i20 = 1 << $i19;

        treePtr#70 = treePtr#70 + $i20;

        i#92 = i#92 + 128;

        goto label09;

     label10:
        bits#72 = bits#72 + -1;

        goto label08;

     label11:
        i#114 = 0;

     label12:
        $i21 = lengthof codeLengths;

        if i#114 >= $i21 goto label19;

        bits = codeLengths[i#114];

        if bits != 0 goto label13;

        goto label18;

     label13:
        code#125 = nextCode[bits];

        revcode#128 = staticinvoke <edu.cmu.cs.mvelezce.zip.zipme.DeflaterHuffman: short bitReverse(int)>(code#125);

        if bits > 9 goto label15;

     label14:
        $r4 = this.<edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree: short[] tree>;

        $i22 = i#114 << 4;

        $i23 = $i22 | bits;

        $s24 = (short) $i23;

        $r4[revcode#128] = $s24;

        $i25 = 1 << bits;

        revcode#128 = revcode#128 + $i25;

        if revcode#128 < 512 goto label14;

        goto label17;

     label15:
        $r5 = this.<edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree: short[] tree>;

        $i26 = revcode#128 & 511;

        subTree#153 = $r5[$i26];

        $s27 = subTree#153 & 15;

        treeLen = 1 << $s27;

        $s28 = subTree#153 >> 4;

        subTree#163 = neg $s28;

     label16:
        $r6 = this.<edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree: short[] tree>;

        $i29 = revcode#128 >> 9;

        $i30 = subTree#163 | $i29;

        $i31 = i#114 << 4;

        $i32 = $i31 | bits;

        $s33 = (short) $i32;

        $r6[$i30] = $s33;

        $i34 = 1 << bits;

        revcode#128 = revcode#128 + $i34;

        if revcode#128 < treeLen goto label16;

     label17:
        $i35 = 16 - bits;

        $i36 = 1 << $i35;

        $i37 = code#125 + $i36;

        nextCode[bits] = $i37;

     label18:
        i#114 = i#114 + 1;

        goto label12;

     label19:
        return;
    }

    int getSymbol(edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator) throws edu.cmu.cs.mvelezce.zip.zipme.DataFormatException
    {
        edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree this;
        edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator input;
        short subtree, bitlen, $s1, symbol#11, $s2, $s3, $s4, symbol#39, $s8, $s9, symbol#61, $s12, $s13, $s14, symbol#84, $s15, $s16, $s17;
        int bits, bits, $i0, lookahead#5, $i5, lookahead#30, $i6, $i7, lookahead#52, $i10, $i11, lookahead#79;
        short[] $r0, $r1, $r2, $r3;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree;

        input := @parameter0: edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator;

        $i0 = virtualinvoke input.<edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator: int peekBits(int)>(9);

        lookahead#5 = $i0;

        if $i0 < 0 goto label4;

        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree: short[] tree>;

        $s1 = $r0[lookahead#5];

        symbol#11 = $s1;

        if $s1 < 0 goto label1;

        $s2 = symbol#11 & 15;

        virtualinvoke input.<edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator: void dropBits(int)>($s2);

        $s3 = symbol#11 >> 4;

        return $s3;

     label1:
        $s4 = symbol#11 >> 4;

        subtree = neg $s4;

        bitlen = symbol#11 & 15;

        $i5 = virtualinvoke input.<edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator: int peekBits(int)>(bitlen);

        lookahead#30 = $i5;

        if $i5 < 0 goto label2;

        $r1 = this.<edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree: short[] tree>;

        $i6 = lookahead#30 >> 9;

        $i7 = subtree | $i6;

        symbol#39 = $r1[$i7];

        $s8 = symbol#39 & 15;

        virtualinvoke input.<edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator: void dropBits(int)>($s8);

        $s9 = symbol#39 >> 4;

        return $s9;

     label2:
        bits = virtualinvoke input.<edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator: int getAvailableBits()>();

        lookahead#52 = virtualinvoke input.<edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator: int peekBits(int)>(bits);

        $r2 = this.<edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree: short[] tree>;

        $i10 = lookahead#52 >> 9;

        $i11 = subtree | $i10;

        symbol#61 = $r2[$i11];

        $s12 = symbol#61 & 15;

        if $s12 > bits goto label3;

        $s13 = symbol#61 & 15;

        virtualinvoke input.<edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator: void dropBits(int)>($s13);

        $s14 = symbol#61 >> 4;

        return $s14;

     label3:
        return -1;

     label4:
        bits = virtualinvoke input.<edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator: int getAvailableBits()>();

        lookahead#79 = virtualinvoke input.<edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator: int peekBits(int)>(bits);

        $r3 = this.<edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree: short[] tree>;

        symbol#84 = $r3[lookahead#79];

        if symbol#84 < 0 goto label5;

        $s15 = symbol#84 & 15;

        if $s15 > bits goto label5;

        $s16 = symbol#84 & 15;

        virtualinvoke input.<edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator: void dropBits(int)>($s16);

        $s17 = symbol#84 >> 4;

        return $s17;

     label5:
        return -1;
    }


