    public static boolean isWhitespace(char)
    {
        char l0;
        boolean $z0;

        l0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0);

        return $z0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        boolean $z0, $z1;

        $r0 = class "java/lang/Character";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <java.lang.Character: boolean $assertionsDisabled> = $z1;

        $r1 = staticinvoke <java.lang.Class: java.lang.Class getPrimitiveClass(java.lang.String)>("char");

        <java.lang.Character: java.lang.Class TYPE> = $r1;

        return;
    }

    public static int digit(char, int)
    {
        char l0;
        int l1, $i0;

        l0 := @parameter0: char;

        l1 := @parameter1: int;

        $i0 = staticinvoke <java.lang.Character: int digit(int,int)>(l0, l1);

        return $i0;
    }

    public static boolean isWhitespace(int)
    {
        int l0;
        java.lang.CharacterData $r0;
        boolean $z0;

        l0 := @parameter0: int;

        $r0 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0);

        $z0 = virtualinvoke $r0.<java.lang.CharacterData: boolean isWhitespace(int)>(l0);

        return $z0;
    }

    public static int digit(int, int)
    {
        int l0, l1, $i0;
        java.lang.CharacterData $r0;

        l0 := @parameter0: int;

        l1 := @parameter1: int;

        $r0 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0);

        $i0 = virtualinvoke $r0.<java.lang.CharacterData: int digit(int,int)>(l0, l1);

        return $i0;
    }

    public static char[] toChars(int)
    {
        int l0;
        char[] l1, $r0;
        boolean $z0, $z1;
        char $c0;
        java.lang.IllegalArgumentException $r1;

        l0 := @parameter0: int;

        $z0 = staticinvoke <java.lang.Character: boolean isBmpCodePoint(int)>(l0);

        if $z0 == 0 goto label1;

        $r0 = newarray (char)[1];

        $c0 = (char) l0;

        $r0[0] = $c0;

        return $r0;

     label1:
        $z1 = staticinvoke <java.lang.Character: boolean isValidCodePoint(int)>(l0);

        if $z1 == 0 goto label2;

        l1 = newarray (char)[2];

        staticinvoke <java.lang.Character: void toSurrogates(int,char[],int)>(l0, l1, 0);

        return l1;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;
    }

    public static int toChars(int, char[], int)
    {
        int l0, l2;
        char[] l1;
        boolean $z0, $z1;
        char $c0;
        java.lang.IllegalArgumentException $r0;

        l0 := @parameter0: int;

        l1 := @parameter1: char[];

        l2 := @parameter2: int;

        $z0 = staticinvoke <java.lang.Character: boolean isBmpCodePoint(int)>(l0);

        if $z0 == 0 goto label1;

        $c0 = (char) l0;

        l1[l2] = $c0;

        return 1;

     label1:
        $z1 = staticinvoke <java.lang.Character: boolean isValidCodePoint(int)>(l0);

        if $z1 == 0 goto label2;

        staticinvoke <java.lang.Character: void toSurrogates(int,char[],int)>(l0, l1, l2);

        return 2;

     label2:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;
    }

    public static int toLowerCase(int)
    {
        int l0, $i0;
        java.lang.CharacterData $r0;

        l0 := @parameter0: int;

        $r0 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0);

        $i0 = virtualinvoke $r0.<java.lang.CharacterData: int toLowerCase(int)>(l0);

        return $i0;
    }

    public static int charCount(int)
    {
        int l0;
        byte $b0;

        l0 := @parameter0: int;

        if l0 < 65536 goto label1;

        $b0 = 2;

        goto label2;

     label1:
        $b0 = 1;

     label2:
        return $b0;
    }

    public static char toLowerCase(char)
    {
        char l0, $c1;
        int $i0;

        l0 := @parameter0: char;

        $i0 = staticinvoke <java.lang.Character: int toLowerCase(int)>(l0);

        $c1 = (char) $i0;

        return $c1;
    }

    static void toSurrogates(int, char[], int)
    {
        int l0, l2, $i0;
        char[] l1;
        char $c1, $c2;

        l0 := @parameter0: int;

        l1 := @parameter1: char[];

        l2 := @parameter2: int;

        $i0 = l2 + 1;

        $c1 = staticinvoke <java.lang.Character: char lowSurrogate(int)>(l0);

        l1[$i0] = $c1;

        $c2 = staticinvoke <java.lang.Character: char highSurrogate(int)>(l0);

        l1[l2] = $c2;

        return;
    }

    public static boolean isValidCodePoint(int)
    {
        int l0, l1;
        boolean $z0;

        l0 := @parameter0: int;

        l1 = l0 >>> 16;

        if l1 >= 17 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isBmpCodePoint(int)
    {
        int l0, $i0;
        boolean $z0;

        l0 := @parameter0: int;

        $i0 = l0 >>> 16;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static char highSurrogate(int)
    {
        int l0, $i0, $i1;
        char $c2;

        l0 := @parameter0: int;

        $i0 = l0 >>> 10;

        $i1 = $i0 + 55232;

        $c2 = (char) $i1;

        return $c2;
    }

    public static char lowSurrogate(int)
    {
        int l0, $i0, $i1;
        char $c2;

        l0 := @parameter0: int;

        $i0 = l0 & 1023;

        $i1 = $i0 + 56320;

        $c2 = (char) $i1;

        return $c2;
    }

    static int codePointAtImpl(char[], int, int)
    {
        char[] l0;
        int l2, l1#1, l1#7, $i0;
        char l3, l4;
        boolean $z0, $z1;

        l0 := @parameter0: char[];

        l1#1 := @parameter1: int;

        l2 := @parameter2: int;

        l3 = l0[l1#1];

        $z0 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(l3);

        if $z0 == 0 goto label1;

        l1#7 = l1#1 + 1;

        if l1#7 >= l2 goto label1;

        l4 = l0[l1#7];

        $z1 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>(l4);

        if $z1 == 0 goto label1;

        $i0 = staticinvoke <java.lang.Character: int toCodePoint(char,char)>(l3, l4);

        return $i0;

     label1:
        return l3;
    }

    public static int toCodePoint(char, char)
    {
        char l0, l1;
        int $i0, $i1, $i2;

        l0 := @parameter0: char;

        l1 := @parameter1: char;

        $i0 = l0 << 10;

        $i1 = $i0 + l1;

        $i2 = $i1 + -56613888;

        return $i2;
    }

    public static boolean isLowSurrogate(char)
    {
        char l0;
        boolean $z0;

        l0 := @parameter0: char;

        if l0 < 56320 goto label1;

        if l0 >= 57344 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isHighSurrogate(char)
    {
        char l0;
        boolean $z0;

        l0 := @parameter0: char;

        if l0 < 55296 goto label1;

        if l0 >= 56320 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static char toUpperCase(char)
    {
        char l0, $c1;
        int $i0;

        l0 := @parameter0: char;

        $i0 = staticinvoke <java.lang.Character: int toUpperCase(int)>(l0);

        $c1 = (char) $i0;

        return $c1;
    }

    public static int toUpperCase(int)
    {
        int l0, $i0;
        java.lang.CharacterData $r0;

        l0 := @parameter0: int;

        $r0 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0);

        $i0 = virtualinvoke $r0.<java.lang.CharacterData: int toUpperCase(int)>(l0);

        return $i0;
    }

    public void <init>(char)
    {
        java.lang.Character l0;
        char l1;

        l0 := @this: java.lang.Character;

        l1 := @parameter0: char;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        l0.<java.lang.Character: char value> = l1;

        return;
    }


