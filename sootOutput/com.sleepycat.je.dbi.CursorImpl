    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "com/sleepycat/je/dbi/CursorImpl";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled> = $z1;

        <com.sleepycat.je.dbi.CursorImpl: long lastAllocatedId> = 0L;

        return;
    }

    public void <init>(com.sleepycat.je.dbi.DatabaseImpl, com.sleepycat.je.txn.Locker)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.dbi.DatabaseImpl database;
        com.sleepycat.je.txn.Locker locker;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        database := @parameter0: com.sleepycat.je.dbi.DatabaseImpl;

        locker := @parameter1: com.sleepycat.je.txn.Locker;

        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void <init>(com.sleepycat.je.dbi.DatabaseImpl,com.sleepycat.je.txn.Locker,boolean,boolean)>(database, locker, 1, 0);

        return;
    }

    public void <init>(com.sleepycat.je.dbi.DatabaseImpl, com.sleepycat.je.txn.Locker, boolean, boolean)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        com.sleepycat.je.txn.Locker locker, $r0;
        boolean retainNonTxnLocks, isSecondaryCursor;
        long $l0;
        int $i1;
        com.sleepycat.je.CacheMode $r1;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        dbImpl := @parameter0: com.sleepycat.je.dbi.DatabaseImpl;

        locker := @parameter1: com.sleepycat.je.txn.Locker;

        retainNonTxnLocks := @parameter2: boolean;

        isSecondaryCursor := @parameter3: boolean;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $l0 = staticinvoke <com.sleepycat.je.dbi.CursorImpl: long getNextCursorId()>();

        $i1 = (int) $l0;

        this.<com.sleepycat.je.dbi.CursorImpl: int thisId> = $i1;

        this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin> = null;

        this.<com.sleepycat.je.dbi.CursorImpl: int index> = -1;

        this.<com.sleepycat.je.dbi.CursorImpl: boolean retainNonTxnLocks> = retainNonTxnLocks;

        this.<com.sleepycat.je.dbi.CursorImpl: boolean isSecondaryCursor> = isSecondaryCursor;

        this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl> = dbImpl;

        this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.txn.Locker locker> = locker;

        $r0 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.txn.Locker locker>;

        virtualinvoke $r0.<com.sleepycat.je.txn.Locker: void registerCursor(com.sleepycat.je.dbi.CursorImpl)>(this);

        $r1 = <com.sleepycat.je.CacheMode: com.sleepycat.je.CacheMode DEFAULT>;

        this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.CacheMode cacheMode> = $r1;

        this.<com.sleepycat.je.dbi.CursorImpl: byte status> = 1;

        return;
    }

    private static long getNextCursorId()
    {
        long $l0, $l1;

        $l0 = <com.sleepycat.je.dbi.CursorImpl: long lastAllocatedId>;

        $l1 = $l0 + 1L;

        <com.sleepycat.je.dbi.CursorImpl: long lastAllocatedId> = $l1;

        return $l1;
    }

    public boolean searchExact(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.txn.LockType)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.DatabaseEntry searchKey;
        com.sleepycat.je.txn.LockType lockType;
        com.sleepycat.je.dbi.CursorImpl$LockStanding $r0;
        boolean $z0;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        searchKey := @parameter0: com.sleepycat.je.DatabaseEntry;

        lockType := @parameter1: com.sleepycat.je.txn.LockType;

        $r0 = virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.CursorImpl$LockStanding searchExact(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.txn.LockType,boolean,boolean)>(searchKey, lockType, 0, 0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public com.sleepycat.je.tree.LN getCurrentLN(boolean, boolean)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        boolean isLatched, unlatch, success#2, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        com.sleepycat.je.tree.LN ln, l5;
        java.lang.Throwable l6, $r10;
        java.lang.AssertionError $r0, $r1, $r5, $r7;
        java.lang.String $r2;
        com.sleepycat.je.tree.BIN $r3, $r6, $r8;
        java.util.Set $r4;
        int $i0, $i1;
        com.sleepycat.je.CacheMode $r9;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        isLatched := @parameter0: boolean;

        unlatch := @parameter1: boolean;

        success#2 = 0;

     label01:
        $z0 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label02;

        $z1 = specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: boolean assertCursorState(boolean,boolean)>(1, 0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label02;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label02:
        $z2 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label03;

        $z3 = specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: boolean checkAlreadyLatched(boolean)>(isLatched);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label03;

        $r1 = new java.lang.AssertionError;

        $r2 = virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: java.lang.String dumpToString(boolean)>(1);

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>($r2);

        throw $r1;

     label03:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isLatched);

        if isLatched != 0 goto label04;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void latchBIN()>();

     label04:
        $z4 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label05;

        $r3 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $r4 = virtualinvoke $r3.<com.sleepycat.je.tree.BIN: java.util.Set getCursorSet()>();

        $z5 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>(this);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 != 0 goto label05;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label05:
        $z6 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 != 0 goto label06;

        $r6 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i0 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $z7 = virtualinvoke $r6.<com.sleepycat.je.tree.BIN: boolean isEmbeddedLN(int)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 == 0 goto label06;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label06:
        $r8 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i1 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $r9 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.CacheMode cacheMode>;

        ln = virtualinvoke $r8.<com.sleepycat.je.tree.BIN: com.sleepycat.je.tree.LN fetchLN(int,com.sleepycat.je.CacheMode)>($i1, $r9);

        success#2 = 1;

        l5 = ln;

     label07:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(unlatch);

        if unlatch != 0 goto label08;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(success#2);

        if success#2 != 0 goto label09;

     label08:
        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

     label09:
        return l5;

     label10:
        $r10 := @caughtexception;

     label11:
        l6 = $r10;

     label12:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(unlatch);

        if unlatch != 0 goto label13;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(success#2);

        if success#2 != 0 goto label14;

     label13:
        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

     label14:
        throw l6;

        catch java.lang.Throwable from label01 to label07 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void releaseBIN()
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.tree.BIN $r0, $r1;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        $r0 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label1;

        $r1 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        virtualinvoke $r1.<com.sleepycat.je.tree.BIN: void releaseLatchIfOwner()>();

     label1:
        return;
    }

    public void close()
    {
        com.sleepycat.je.dbi.CursorImpl this;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void close(com.sleepycat.je.dbi.CursorImpl)>(null);

        return;
    }

    public void close(com.sleepycat.je.dbi.CursorImpl)
    {
        com.sleepycat.je.dbi.CursorImpl this, newCursor;
        boolean $z0, $z1, $z2;
        java.lang.AssertionError $r0;
        com.sleepycat.je.txn.Locker $r1, $r2;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        newCursor := @parameter0: com.sleepycat.je.dbi.CursorImpl;

        $z0 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: boolean assertCursorState(boolean,boolean)>(0, 0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void removeCursorAndPerformCacheEviction(com.sleepycat.je.dbi.CursorImpl)>(newCursor);

        $r1 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.txn.Locker locker>;

        virtualinvoke $r1.<com.sleepycat.je.txn.Locker: void unRegisterCursor(com.sleepycat.je.dbi.CursorImpl)>(this);

        $z2 = this.<com.sleepycat.je.dbi.CursorImpl: boolean retainNonTxnLocks>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label2;

        $r2 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.txn.Locker locker>;

        virtualinvoke $r2.<com.sleepycat.je.txn.Locker: void nonTxnOperationEnd()>();

     label2:
        this.<com.sleepycat.je.dbi.CursorImpl: byte status> = 3;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void criticalEviction()>();

        return;
    }

    private boolean assertCursorState(boolean, boolean)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        boolean mustBeInitialized, mustNotBeInitialized, $z1;
        java.lang.RuntimeException e, $r0;
        java.lang.AssertionError $r1;
        java.lang.StringBuilder $r2, $r4, $r5, $r7;
        java.lang.String $r3, $r6, $r8;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        mustBeInitialized := @parameter0: boolean;

        mustNotBeInitialized := @parameter1: boolean;

     label1:
        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void checkCursorState(boolean,boolean)>(mustBeInitialized, mustNotBeInitialized);

     label2:
        return 1;

     label3:
        $r0 := @caughtexception;

        e = $r0;

        $z1 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label4;

        $r1 = new java.lang.AssertionError;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke e.<java.lang.RuntimeException: java.lang.String toString()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r6 = virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: java.lang.String dumpToString(boolean)>(1);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>($r8);

        throw $r1;

     label4:
        return 0;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    private void removeCursorAndPerformCacheEviction(com.sleepycat.je.dbi.CursorImpl)
    {
        com.sleepycat.je.dbi.CursorImpl this, newCursor;
        java.lang.Throwable l2, $r2;
        com.sleepycat.je.tree.BIN $r0, $r1;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        newCursor := @parameter0: com.sleepycat.je.dbi.CursorImpl;

        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void performPriorBINEviction()>();

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void latchBIN()>();

        $r0 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label1;

        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void clear()>();

        return;

     label1:
        $r1 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        virtualinvoke $r1.<com.sleepycat.je.tree.BIN: void removeCursor(com.sleepycat.je.dbi.CursorImpl)>(this);

        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void performCacheModeEviction(com.sleepycat.je.dbi.CursorImpl)>(newCursor);

     label2:
        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void clear()>();

        goto label4;

     label3:
        $r2 := @caughtexception;

        l2 = $r2;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void clear()>();

        throw l2;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void criticalEviction()
    {
        com.sleepycat.je.dbi.CursorImpl this;
        boolean $z0, $z1;
        com.sleepycat.je.tree.BIN $r0, $r1;
        com.sleepycat.je.CacheMode $r2, $r3, $r4, $r5, $r6, $r7;
        com.sleepycat.je.dbi.DatabaseImpl $r8;
        com.sleepycat.je.dbi.EnvironmentImpl $r9;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        $z0 = this.<com.sleepycat.je.dbi.CursorImpl: boolean allowEviction>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        $r0 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label1;

        $r1 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $z1 = virtualinvoke $r1.<com.sleepycat.je.tree.BIN: boolean getDirty()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

     label1:
        $r2 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.CacheMode cacheMode>;

        $r3 = <com.sleepycat.je.CacheMode: com.sleepycat.je.CacheMode UNCHANGED>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r3);

        if $r2 == $r3 goto label3;

        $r4 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.CacheMode cacheMode>;

        $r5 = <com.sleepycat.je.CacheMode: com.sleepycat.je.CacheMode EVICT_BIN>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r5);

        if $r4 == $r5 goto label3;

        $r6 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.CacheMode cacheMode>;

        $r7 = <com.sleepycat.je.CacheMode: com.sleepycat.je.CacheMode MAKE_COLD>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r7);

        if $r6 == $r7 goto label3;

     label2:
        $r8 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r9 = virtualinvoke $r8.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r9.<com.sleepycat.je.dbi.EnvironmentImpl: void criticalEviction(boolean)>(0);

     label3:
        return;
    }

    private void performPriorBINEviction()
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.tree.BIN binToEvict, $r0, $r1, $r2;
        java.lang.Throwable l2, $r10;
        com.sleepycat.je.CacheMode $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        $r0 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN priorBIN>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label1;

        $r1 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN priorBIN>;

        $r2 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        if $r1 != $r2 goto label2;

     label1:
        return;

     label2:
        binToEvict = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN priorBIN>;

        this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN priorBIN> = null;

        $r3 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.CacheMode cacheMode>;

        $r4 = <com.sleepycat.je.CacheMode: com.sleepycat.je.CacheMode DEFAULT>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        if $r3 == $r4 goto label3;

        $r5 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.CacheMode cacheMode>;

        $r6 = <com.sleepycat.je.CacheMode: com.sleepycat.je.CacheMode KEEP_HOT>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r6);

        if $r5 == $r6 goto label3;

        $r7 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.CacheMode cacheMode>;

        $r8 = <com.sleepycat.je.CacheMode: com.sleepycat.je.CacheMode EVICT_LN>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r8);

        if $r7 != $r8 goto label4;

     label3:
        return;

     label4:
        $r9 = <com.sleepycat.je.CacheMode: com.sleepycat.je.CacheMode UNCHANGED>;

        virtualinvoke binToEvict.<com.sleepycat.je.tree.BIN: void latch(com.sleepycat.je.CacheMode)>($r9);

     label5:
        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void performCacheModeBINEviction(com.sleepycat.je.tree.BIN)>(binToEvict);

     label6:
        virtualinvoke binToEvict.<com.sleepycat.je.tree.BIN: void releaseLatchIfOwner()>();

        goto label8;

     label7:
        $r10 := @caughtexception;

        l2 = $r10;

        virtualinvoke binToEvict.<com.sleepycat.je.tree.BIN: void releaseLatchIfOwner()>();

        throw l2;

     label8:
        return;

        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public void latchBIN()
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.tree.BIN waitingOn, $r0, $r2;
        com.sleepycat.je.CacheMode $r1;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

     label1:
        $r0 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label3;

        waitingOn = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $r1 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.CacheMode cacheMode>;

        virtualinvoke waitingOn.<com.sleepycat.je.tree.BIN: void latch(com.sleepycat.je.CacheMode)>($r1);

        $r2 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(waitingOn);

        if $r2 != waitingOn goto label2;

        return;

     label2:
        virtualinvoke waitingOn.<com.sleepycat.je.tree.BIN: void releaseLatch()>();

        goto label1;

     label3:
        return;
    }

    private void clear()
    {
        com.sleepycat.je.dbi.CursorImpl this;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin> = null;

        this.<com.sleepycat.je.dbi.CursorImpl: int index> = -1;

        this.<com.sleepycat.je.dbi.CursorImpl: byte status> = 1;

        this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.RecordVersion currentRecordVersion> = null;

        this.<com.sleepycat.je.dbi.CursorImpl: int storageSize> = 0;

        this.<com.sleepycat.je.dbi.CursorImpl: int priStorageSize> = 0;

        this.<com.sleepycat.je.dbi.CursorImpl: int nSecWrites> = 0;

        this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN priorBIN> = null;

        return;
    }

    private void performCacheModeEviction(com.sleepycat.je.dbi.CursorImpl)
    {
        com.sleepycat.je.dbi.CursorImpl this, newCursor;
        com.sleepycat.je.CacheMode $r0, $r1, $r2, $r3, $r6, $r7;
        com.sleepycat.je.tree.BIN $r4, $r5, $r8;
        boolean $z0, movedOffBin#13, $z1, movedOffLn#20;
        int $i0, $i1;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        newCursor := @parameter0: com.sleepycat.je.dbi.CursorImpl;

        $r0 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.CacheMode cacheMode>;

        $r1 = <com.sleepycat.je.CacheMode: com.sleepycat.je.CacheMode DEFAULT>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r0 == $r1 goto label01;

        $r2 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.CacheMode cacheMode>;

        $r3 = <com.sleepycat.je.CacheMode: com.sleepycat.je.CacheMode KEEP_HOT>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r3);

        if $r2 != $r3 goto label02;

     label01:
        return;

     label02:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(newCursor);

        if newCursor == null goto label08;

        $r4 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $r5 = newCursor.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r5);

        if $r4 == $r5 goto label03;

        $z0 = 1;

        goto label04;

     label03:
        $z0 = 0;

     label04:
        movedOffBin#13 = $z0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(movedOffBin#13);

        if movedOffBin#13 != 0 goto label05;

        $i0 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $i1 = newCursor.<com.sleepycat.je.dbi.CursorImpl: int index>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i0 == $i1 goto label06;

     label05:
        $z1 = 1;

        goto label07;

     label06:
        $z1 = 0;

     label07:
        movedOffLn#20 = $z1;

        goto label09;

     label08:
        movedOffBin#13 = 1;

        movedOffLn#20 = 1;

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(movedOffLn#20);

        if movedOffLn#20 == 0 goto label10;

        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void performCacheModeLNEviction()>();

     label10:
        $r6 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.CacheMode cacheMode>;

        $r7 = <com.sleepycat.je.CacheMode: com.sleepycat.je.CacheMode EVICT_LN>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r7);

        if $r6 != $r7 goto label11;

        return;

     label11:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(movedOffBin#13);

        if movedOffBin#13 == 0 goto label12;

        $r8 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void performCacheModeBINEviction(com.sleepycat.je.tree.BIN)>($r8);

     label12:
        return;
    }

    private void performCacheModeLNEviction()
    {
        com.sleepycat.je.dbi.CursorImpl this;
        int[] $r0;
        com.sleepycat.je.CacheMode $r1;
        int $i0, $i1;
        boolean $z0;
        java.lang.AssertionError $r2;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        $r0 = <com.sleepycat.je.dbi.CursorImpl$1: int[] $SwitchMap$com$sleepycat$je$CacheMode>;

        $r1 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.CacheMode cacheMode>;

        $i0 = virtualinvoke $r1.<com.sleepycat.je.CacheMode: int ordinal()>();

        $i1 = $r0[$i0];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label2;
            case 4: goto label2;
            default: goto label3;
        };

     label1:
        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void evictLN(boolean,boolean)>(1, 0);

        goto label4;

     label2:
        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void evictLN(boolean,boolean)>(1, 1);

        goto label4;

     label3:
        $z0 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label4;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label4:
        return;
    }

    private void performCacheModeBINEviction(com.sleepycat.je.tree.BIN)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.tree.BIN binToEvict;
        int[] $r0;
        com.sleepycat.je.CacheMode $r1, $r2, $r3;
        int $i0, $i1;
        boolean $z0, $z1;
        java.lang.AssertionError $r4;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        binToEvict := @parameter0: com.sleepycat.je.tree.BIN;

        $r0 = <com.sleepycat.je.dbi.CursorImpl$1: int[] $SwitchMap$com$sleepycat$je$CacheMode>;

        $r1 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.CacheMode cacheMode>;

        $i0 = virtualinvoke $r1.<com.sleepycat.je.CacheMode: int ordinal()>();

        $i1 = $r0[$i0];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        tableswitch($i1)
        {
            case 2: goto label1;
            case 3: goto label2;
            case 4: goto label2;
            default: goto label3;
        };

     label1:
        $r2 = <com.sleepycat.je.CacheMode: com.sleepycat.je.CacheMode EVICT_BIN>;

        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void evictBIN(com.sleepycat.je.tree.BIN,com.sleepycat.je.CacheMode)>(binToEvict, $r2);

        goto label4;

     label2:
        $z0 = virtualinvoke binToEvict.<com.sleepycat.je.tree.BIN: boolean getFetchedCold()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label4;

        $r3 = <com.sleepycat.je.CacheMode: com.sleepycat.je.CacheMode UNCHANGED>;

        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void evictBIN(com.sleepycat.je.tree.BIN,com.sleepycat.je.CacheMode)>(binToEvict, $r3);

        goto label4;

     label3:
        $z1 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label4;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label4:
        return;
    }

    private void evictBIN(com.sleepycat.je.tree.BIN, com.sleepycat.je.CacheMode)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.tree.BIN binToEvict;
        com.sleepycat.je.CacheMode cacheMode;
        com.sleepycat.je.dbi.DatabaseImpl $r0;
        com.sleepycat.je.dbi.EnvironmentImpl $r1;
        com.sleepycat.je.evictor.Evictor $r2;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        binToEvict := @parameter0: com.sleepycat.je.tree.BIN;

        cacheMode := @parameter1: com.sleepycat.je.CacheMode;

        $r0 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r1 = virtualinvoke $r0.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r2 = virtualinvoke $r1.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.evictor.Evictor getEvictor()>();

        virtualinvoke $r2.<com.sleepycat.je.evictor.Evictor: long doCacheModeEvict(com.sleepycat.je.tree.IN,com.sleepycat.je.CacheMode)>(binToEvict, cacheMode);

        return;
    }

    private void evictLN(boolean, boolean)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        boolean isLatched, ifFetchedCold;
        java.lang.Throwable l3, $r1;
        int $i0, $i1;
        com.sleepycat.je.tree.BIN $r0;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        isLatched := @parameter0: boolean;

        ifFetchedCold := @parameter1: boolean;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isLatched);

        if isLatched != 0 goto label2;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void latchBIN()>();

     label2:
        $i0 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 < 0 goto label3;

        $r0 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i1 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        virtualinvoke $r0.<com.sleepycat.je.tree.BIN: void evictLN(int,boolean)>($i1, ifFetchedCold);

     label3:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isLatched);

        if isLatched != 0 goto label6;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        goto label6;

     label4:
        $r1 := @caughtexception;

        l3 = $r1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isLatched);

        if isLatched != 0 goto label5;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

     label5:
        throw l3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    public void checkCursorState(boolean, boolean)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        boolean mustBeInitialized, mustNotBeInitialized;
        byte $b0, $b1;
        java.lang.IllegalStateException $r0, $r2;
        com.sleepycat.je.EnvironmentFailureException $r1, $r7;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        mustBeInitialized := @parameter0: boolean;

        mustNotBeInitialized := @parameter1: boolean;

        $b0 = this.<com.sleepycat.je.dbi.CursorImpl: byte status>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        tableswitch($b0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            default: goto label4;
        };

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(mustBeInitialized);

        if mustBeInitialized == 0 goto label5;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cursor not initialized.");

        throw $r0;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(mustNotBeInitialized);

        if mustNotBeInitialized == 0 goto label5;

        $r1 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>("Cursor is initialized.");

        throw $r1;

     label3:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cursor has been closed.");

        throw $r2;

     label4:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown cursor status: ");

        $b1 = this.<com.sleepycat.je.dbi.CursorImpl: byte status>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>($r6);

        throw $r7;

     label5:
        return;
    }

    public java.lang.String dumpToString(boolean)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        boolean verbose;
        java.lang.StringBuilder sb, $r0, $r1, $r2, $r4, $r6;
        int $i0;
        byte $b1;
        java.lang.String $r5, $r11, $r15;
        com.sleepycat.je.tree.BIN $r10, $r12;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        verbose := @parameter0: boolean;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        sb = $r0;

        $r1 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<Cursor idx=\"");

        $i0 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r4 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" status=\"");

        $b1 = this.<com.sleepycat.je.dbi.CursorImpl: byte status>;

        $r5 = specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: java.lang.String statusToString(byte)>($b1);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">\n");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(verbose);

        if verbose == 0 goto label3;

        $r10 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r10);

        if $r10 != null goto label1;

        $r11 = "";

        goto label2;

     label1:
        $r12 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $r11 = virtualinvoke $r12.<com.sleepycat.je.tree.BIN: java.lang.String dumpString(int,boolean)>(2, 1);

     label2:
        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

     label3:
        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n</Cursor>");

        $r15 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r15;
    }

    private java.lang.String statusToString(byte)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        byte status;
        java.lang.StringBuilder $r0, $r1, $r3, $r4;
        java.lang.String $r2, $r5;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        status := @parameter0: byte;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(status);

        tableswitch(status)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            default: goto label4;
        };

     label1:
        return "CURSOR_NOT_INITIALIZED";

     label2:
        return "CURSOR_INITIALIZED";

     label3:
        return "CURSOR_CLOSED";

     label4:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UNKNOWN (");

        $r2 = staticinvoke <java.lang.Byte: java.lang.String toString(byte)>(status);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    private boolean checkAlreadyLatched(boolean)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        boolean isLatched, $z0;
        com.sleepycat.je.tree.BIN $r0, $r1;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        isLatched := @parameter0: boolean;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isLatched);

        if isLatched == 0 goto label1;

        $r0 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label1;

        $r1 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $z0 = virtualinvoke $r1.<com.sleepycat.je.tree.BIN: boolean isLatchExclusiveOwner()>();

        return $z0;

     label1:
        return 1;
    }

    public com.sleepycat.je.dbi.CursorImpl$LockStanding searchExact(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.txn.LockType, boolean, boolean)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.DatabaseEntry searchKey;
        com.sleepycat.je.txn.LockType lockType;
        boolean dirtyReadAll, dataRequested, $z0, $z1, $z2, $z3;
        byte[] key;
        java.lang.Throwable e, $r13;
        java.lang.AssertionError $r0;
        com.sleepycat.je.dbi.CursorImpl$LockStanding lockStanding#9;
        com.sleepycat.je.dbi.DatabaseImpl $r1;
        com.sleepycat.je.tree.Tree $r2;
        com.sleepycat.je.CacheMode $r3;
        com.sleepycat.je.tree.BIN $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        int $i0, $i1, $i2, $i3;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        searchKey := @parameter0: com.sleepycat.je.DatabaseEntry;

        lockType := @parameter1: com.sleepycat.je.txn.LockType;

        dirtyReadAll := @parameter2: boolean;

        dataRequested := @parameter3: boolean;

        $z0 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: boolean assertCursorState(boolean,boolean)>(0, 1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        lockStanding#9 = null;

     label2:
        key = staticinvoke <com.sleepycat.je.tree.Key: byte[] makeKey(com.sleepycat.je.DatabaseEntry)>(searchKey);

        $r1 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r2 = virtualinvoke $r1.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.tree.Tree getTree()>();

        $r3 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.CacheMode cacheMode>;

        $r4 = virtualinvoke $r2.<com.sleepycat.je.tree.Tree: com.sleepycat.je.tree.BIN search(byte[],com.sleepycat.je.CacheMode)>(key, $r3);

        this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin> = $r4;

        $r5 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r5);

        if $r5 == null goto label4;

        $r6 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i0 = virtualinvoke $r6.<com.sleepycat.je.tree.BIN: int findEntry(byte[],boolean,boolean)>(key, 0, 1);

        this.<com.sleepycat.je.dbi.CursorImpl: int index> = $i0;

        $i1 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 >= 0 goto label3;

        $r7 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $z2 = virtualinvoke $r7.<com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label3;

        $r8 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $z3 = virtualinvoke $r8.<com.sleepycat.je.tree.BIN: boolean mayHaveKeyInFullBin(byte[])>(key);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label3;

        $r9 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        virtualinvoke $r9.<com.sleepycat.je.tree.BIN: void mutateToFullBIN(boolean)>(0);

        $r10 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i2 = virtualinvoke $r10.<com.sleepycat.je.tree.BIN: int findEntry(byte[],boolean,boolean)>(key, 0, 1);

        this.<com.sleepycat.je.dbi.CursorImpl: int index> = $i2;

     label3:
        $r11 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void addCursor(com.sleepycat.je.tree.BIN)>($r11);

        $i3 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 < 0 goto label4;

        lockStanding#9 = specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.CursorImpl$LockStanding lockLNAndCheckDefunct(com.sleepycat.je.txn.LockType,boolean,boolean)>(lockType, dirtyReadAll, dataRequested);

     label4:
        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void setInitialized()>();

     label5:
        return lockStanding#9;

     label6:
        $r13 := @caughtexception;

        e = $r13;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        throw e;

        catch java.lang.Throwable from label2 to label5 with label6;
    }

    void addCursor(com.sleepycat.je.tree.BIN)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.tree.BIN bin;
        boolean $z0, $z1;
        java.lang.AssertionError $r0;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        bin := @parameter0: com.sleepycat.je.tree.BIN;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(bin);

        if bin == null goto label2;

        $z0 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean isLatchExclusiveOwner()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void addCursor(com.sleepycat.je.dbi.CursorImpl)>(this);

     label2:
        return;
    }

    private com.sleepycat.je.dbi.CursorImpl$LockStanding lockLNAndCheckDefunct(com.sleepycat.je.txn.LockType, boolean, boolean)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.txn.LockType lockType, $r0, $r4, $r6;
        boolean dirtyReadAll, dataRequested, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.AssertionError $r1, $r3, $r10;
        com.sleepycat.je.dbi.DatabaseImpl $r2;
        com.sleepycat.je.dbi.CursorImpl$LockStanding standing#17, standing#33;
        com.sleepycat.je.txn.LockResult $r7;
        com.sleepycat.je.txn.LockGrantType $r8, $r9;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        lockType := @parameter0: com.sleepycat.je.txn.LockType;

        dirtyReadAll := @parameter1: boolean;

        dataRequested := @parameter2: boolean;

        $z1 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label01;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dirtyReadAll);

        if dirtyReadAll == 0 goto label01;

        $r0 = <com.sleepycat.je.txn.LockType: com.sleepycat.je.txn.LockType NONE>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lockType);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if lockType == $r0 goto label01;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label01:
        $z2 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label02;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dataRequested);

        if dataRequested == 0 goto label02;

        $r2 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z3 = virtualinvoke $r2.<com.sleepycat.je.dbi.DatabaseImpl: boolean getSortedDuplicates()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label02;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label02:
        standing#17 = virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.CursorImpl$LockStanding lockLN(com.sleepycat.je.txn.LockType)>(lockType);

        $z4 = virtualinvoke standing#17.<com.sleepycat.je.dbi.CursorImpl$LockStanding: boolean recordExists()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label03;

        return standing#17;

     label03:
        $r4 = <com.sleepycat.je.txn.LockType: com.sleepycat.je.txn.LockType NONE>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lockType);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        if lockType == $r4 goto label04;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void revertLock(com.sleepycat.je.dbi.CursorImpl$LockStanding)>(standing#17);

        return null;

     label04:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dirtyReadAll);

        if dirtyReadAll != 0 goto label05;

        return null;

     label05:
        $r6 = <com.sleepycat.je.txn.LockType: com.sleepycat.je.txn.LockType READ>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dataRequested);

        if dataRequested != 0 goto label06;

        $z5 = 1;

        goto label07;

     label06:
        $z5 = 0;

     label07:
        standing#33 = virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.CursorImpl$LockStanding lockLN(com.sleepycat.je.txn.LockType,boolean,boolean)>($r6, 0, $z5);

        $r7 = staticinvoke <com.sleepycat.je.dbi.CursorImpl$LockStanding: com.sleepycat.je.txn.LockResult access$100(com.sleepycat.je.dbi.CursorImpl$LockStanding)>(standing#33);

        $r8 = virtualinvoke $r7.<com.sleepycat.je.txn.LockResult: com.sleepycat.je.txn.LockGrantType getLockGrant()>();

        $r9 = <com.sleepycat.je.txn.LockGrantType: com.sleepycat.je.txn.LockGrantType DENIED>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r9);

        if $r8 != $r9 goto label09;

        $z6 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 != 0 goto label08;

        $z7 = virtualinvoke standing#33.<com.sleepycat.je.dbi.CursorImpl$LockStanding: boolean recordExists()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 == 0 goto label08;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label08:
        return standing#33;

     label09:
        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void revertLock(com.sleepycat.je.dbi.CursorImpl$LockStanding)>(standing#33);

        $z8 = virtualinvoke standing#33.<com.sleepycat.je.dbi.CursorImpl$LockStanding: boolean recordExists()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 == 0 goto label10;

        return standing#33;

     label10:
        return null;
    }

    private void setInitialized()
    {
        com.sleepycat.je.dbi.CursorImpl this;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        this.<com.sleepycat.je.dbi.CursorImpl: byte status> = 2;

        return;
    }

    public com.sleepycat.je.dbi.CursorImpl$LockStanding lockLN(com.sleepycat.je.txn.LockType) throws com.sleepycat.je.LockConflictException
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.txn.LockType lockType;
        com.sleepycat.je.dbi.CursorImpl$LockStanding $r0;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        lockType := @parameter0: com.sleepycat.je.txn.LockType;

        $r0 = virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.CursorImpl$LockStanding lockLN(com.sleepycat.je.txn.LockType,boolean,boolean)>(lockType, 0, 0);

        return $r0;
    }

    public void revertLock(com.sleepycat.je.dbi.CursorImpl$LockStanding)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.dbi.CursorImpl$LockStanding standing;
        com.sleepycat.je.txn.LockResult $r0, $r1;
        long $l0;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        standing := @parameter0: com.sleepycat.je.dbi.CursorImpl$LockStanding;

        $r0 = staticinvoke <com.sleepycat.je.dbi.CursorImpl$LockStanding: com.sleepycat.je.txn.LockResult access$100(com.sleepycat.je.dbi.CursorImpl$LockStanding)>(standing);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label1;

        $l0 = staticinvoke <com.sleepycat.je.dbi.CursorImpl$LockStanding: long access$000(com.sleepycat.je.dbi.CursorImpl$LockStanding)>(standing);

        $r1 = staticinvoke <com.sleepycat.je.dbi.CursorImpl$LockStanding: com.sleepycat.je.txn.LockResult access$100(com.sleepycat.je.dbi.CursorImpl$LockStanding)>(standing);

        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void revertLock(long,com.sleepycat.je.txn.LockResult)>($l0, $r1);

        staticinvoke <com.sleepycat.je.dbi.CursorImpl$LockStanding: com.sleepycat.je.txn.LockResult access$102(com.sleepycat.je.dbi.CursorImpl$LockStanding,com.sleepycat.je.txn.LockResult)>(standing, null);

     label1:
        return;
    }

    public com.sleepycat.je.dbi.CursorImpl$LockStanding lockLN(com.sleepycat.je.txn.LockType, boolean, boolean) throws com.sleepycat.je.LockConflictException
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.txn.LockType lockType;
        boolean allowUncontended, noWait, prevExpirationInHours, $z0, $z1, $z3, $z4, $z5, $z6, wasLockedAndExpiresSoon#57, $z8, $z9, $z10, $z11, $z12, $z13, $z15, $z17, $z18, $z20, $z21, $z22, $z23;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl, $r14;
        com.sleepycat.je.txn.LockManager lockManager;
        com.sleepycat.je.dbi.CursorImpl$LockStanding standing, $r2;
        int prevExpiration, $i0, $i5, $i7, $i8, $i9, $i14, $i15, $i16, $i17, $i19, $i22, $i23, $i24, $i25, $i28;
        long newLsn, $l1, $l3, $l6, $l10, $l11, $l12, $l13, $l18, $l20;
        com.sleepycat.je.dbi.DatabaseImpl $r0, $r9, $r13, $r19, $r26, $r40;
        com.sleepycat.je.txn.TxnManager $r1;
        com.sleepycat.je.tree.BIN $r3, $r4, $r10, $r11, $r12, $r34, $r35, $r37, $r38, $r43, $r44, $r45, $r47, $r48, $r50;
        byte $b4, $b21, $b27;
        java.lang.AssertionError $r5, $r7, $r32, $r49, $r51;
        java.lang.Long $r6, $r16;
        com.sleepycat.je.txn.Locker $r8, $r15, $r17, $r18, $r25, $r39;
        com.sleepycat.je.txn.LockResult $r20, $r27, $r29, $r41;
        com.sleepycat.je.LockNotAvailableException $r22, e#98;
        com.sleepycat.je.LockConflictException $r23, e#102;
        com.sleepycat.je.EnvironmentFailureException $r24;
        com.sleepycat.je.txn.LockGrantType $r30, $r31;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        lockType := @parameter0: com.sleepycat.je.txn.LockType;

        allowUncontended := @parameter1: boolean;

        noWait := @parameter2: boolean;

        $r0 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        envImpl = virtualinvoke $r0.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r1 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.txn.TxnManager getTxnManager()>();

        lockManager = virtualinvoke $r1.<com.sleepycat.je.txn.TxnManager: com.sleepycat.je.txn.LockManager getLockManager()>();

        $r2 = new com.sleepycat.je.dbi.CursorImpl$LockStanding;

        specialinvoke $r2.<com.sleepycat.je.dbi.CursorImpl$LockStanding: void <init>()>();

        standing = $r2;

        $r3 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i0 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $l1 = virtualinvoke $r3.<com.sleepycat.je.tree.BIN: long getLsn(int)>($i0);

        staticinvoke <com.sleepycat.je.dbi.CursorImpl$LockStanding: long access$002(com.sleepycat.je.dbi.CursorImpl$LockStanding,long)>(standing, $l1);

        $l3 = staticinvoke <com.sleepycat.je.dbi.CursorImpl$LockStanding: long access$000(com.sleepycat.je.dbi.CursorImpl$LockStanding)>(standing);

        $b4 = $l3 cmp -1L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b4);

        if $b4 != 0 goto label02;

        $z0 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label01;

        $r4 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i5 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $z1 = virtualinvoke $r4.<com.sleepycat.je.tree.BIN: boolean isEntryKnownDeleted(int)>($i5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label01;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label01:
        staticinvoke <com.sleepycat.je.dbi.CursorImpl$LockStanding: boolean access$202(com.sleepycat.je.dbi.CursorImpl$LockStanding,boolean)>(standing, 1);

        return standing;

     label02:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(allowUncontended);

        if allowUncontended == 0 goto label04;

        $l6 = staticinvoke <com.sleepycat.je.dbi.CursorImpl$LockStanding: long access$000(com.sleepycat.je.dbi.CursorImpl$LockStanding)>(standing);

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

        $z3 = virtualinvoke lockManager.<com.sleepycat.je.txn.LockManager: boolean isLockUncontended(java.lang.Long)>($r6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label04;

        $z4 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label03;

        $z5 = specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: boolean verifyPendingDeleted(com.sleepycat.je.txn.LockType)>(lockType);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 != 0 goto label03;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label03:
        $r8 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.txn.Locker locker>;

        $r9 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        virtualinvoke $r8.<com.sleepycat.je.txn.Locker: void preLogWithoutLock(com.sleepycat.je.dbi.DatabaseImpl)>($r9);

        $r10 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i7 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $z6 = virtualinvoke $r10.<com.sleepycat.je.tree.BIN: boolean isDefunct(int)>($i7);

        staticinvoke <com.sleepycat.je.dbi.CursorImpl$LockStanding: boolean access$202(com.sleepycat.je.dbi.CursorImpl$LockStanding,boolean)>(standing, $z6);

        return standing;

     label04:
        wasLockedAndExpiresSoon#57 = 0;

        $r11 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i8 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        prevExpiration = virtualinvoke $r11.<com.sleepycat.je.tree.BIN: int getExpiration(int)>($i8);

        $r12 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        prevExpirationInHours = virtualinvoke $r12.<com.sleepycat.je.tree.BIN: boolean isExpirationInHours()>();

        $r13 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r14 = virtualinvoke $r13.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $i9 = virtualinvoke $r14.<com.sleepycat.je.dbi.EnvironmentImpl: int getTtlMaxTxnTime()>();

        $l10 = (long) $i9;

        $z8 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: boolean expiresWithin(int,boolean,long)>(prevExpiration, prevExpirationInHours, $l10);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 == 0 goto label05;

        $r15 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.txn.Locker locker>;

        $l11 = staticinvoke <com.sleepycat.je.dbi.CursorImpl$LockStanding: long access$000(com.sleepycat.je.dbi.CursorImpl$LockStanding)>(standing);

        $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l11);

        $z9 = virtualinvoke lockManager.<com.sleepycat.je.txn.LockManager: boolean ownsOrSharesLock(com.sleepycat.je.txn.Locker,java.lang.Long)>($r15, $r16);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 == 0 goto label05;

        wasLockedAndExpiresSoon#57 = 1;

     label05:
        $r17 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.txn.Locker locker>;

        $z10 = virtualinvoke $r17.<com.sleepycat.je.txn.Locker: boolean getDefaultNoWait()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z10);

        if $z10 == 0 goto label10;

     label06:
        $r18 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.txn.Locker locker>;

        $l12 = staticinvoke <com.sleepycat.je.dbi.CursorImpl$LockStanding: long access$000(com.sleepycat.je.dbi.CursorImpl$LockStanding)>(standing);

        $r19 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r20 = virtualinvoke $r18.<com.sleepycat.je.txn.Locker: com.sleepycat.je.txn.LockResult lock(long,com.sleepycat.je.txn.LockType,boolean,com.sleepycat.je.dbi.DatabaseImpl)>($l12, lockType, 1, $r19);

        staticinvoke <com.sleepycat.je.dbi.CursorImpl$LockStanding: com.sleepycat.je.txn.LockResult access$102(com.sleepycat.je.dbi.CursorImpl$LockStanding,com.sleepycat.je.txn.LockResult)>(standing, $r20);

     label07:
        goto label11;

     label08:
        $r22 := @caughtexception;

        e#98 = $r22;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        throw e#98;

     label09:
        $r23 := @caughtexception;

        e#102 = $r23;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        $r24 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedException(java.lang.Exception)>(e#102);

        throw $r24;

     label10:
        $r25 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.txn.Locker locker>;

        $l13 = staticinvoke <com.sleepycat.je.dbi.CursorImpl$LockStanding: long access$000(com.sleepycat.je.dbi.CursorImpl$LockStanding)>(standing);

        $r26 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r27 = virtualinvoke $r25.<com.sleepycat.je.txn.Locker: com.sleepycat.je.txn.LockResult nonBlockingLock(long,com.sleepycat.je.txn.LockType,boolean,com.sleepycat.je.dbi.DatabaseImpl)>($l13, lockType, 0, $r26);

        staticinvoke <com.sleepycat.je.dbi.CursorImpl$LockStanding: com.sleepycat.je.txn.LockResult access$102(com.sleepycat.je.dbi.CursorImpl$LockStanding,com.sleepycat.je.txn.LockResult)>(standing, $r27);

     label11:
        $r29 = staticinvoke <com.sleepycat.je.dbi.CursorImpl$LockStanding: com.sleepycat.je.txn.LockResult access$100(com.sleepycat.je.dbi.CursorImpl$LockStanding)>(standing);

        $r30 = virtualinvoke $r29.<com.sleepycat.je.txn.LockResult: com.sleepycat.je.txn.LockGrantType getLockGrant()>();

        $r31 = <com.sleepycat.je.txn.LockGrantType: com.sleepycat.je.txn.LockGrantType DENIED>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r30);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r31);

        if $r30 == $r31 goto label15;

        $z11 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z11);

        if $z11 != 0 goto label12;

        $z12 = specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: boolean verifyPendingDeleted(com.sleepycat.je.txn.LockType)>(lockType);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z12);

        if $z12 != 0 goto label12;

        $r32 = new java.lang.AssertionError;

        specialinvoke $r32.<java.lang.AssertionError: void <init>()>();

        throw $r32;

     label12:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(wasLockedAndExpiresSoon#57);

        if wasLockedAndExpiresSoon#57 == 0 goto label13;

        $r34 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i14 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $z13 = virtualinvoke $r34.<com.sleepycat.je.tree.BIN: boolean isDeleted(int)>($i14);

        goto label14;

     label13:
        $r35 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i15 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $z13 = virtualinvoke $r35.<com.sleepycat.je.tree.BIN: boolean isDefunct(int)>($i15);

     label14:
        staticinvoke <com.sleepycat.je.dbi.CursorImpl$LockStanding: boolean access$202(com.sleepycat.je.dbi.CursorImpl$LockStanding,boolean)>(standing, $z13);

        return standing;

     label15:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(noWait);

        if noWait == 0 goto label18;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(wasLockedAndExpiresSoon#57);

        if wasLockedAndExpiresSoon#57 == 0 goto label16;

        $r37 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i16 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $z15 = virtualinvoke $r37.<com.sleepycat.je.tree.BIN: boolean isDeleted(int)>($i16);

        goto label17;

     label16:
        $r38 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i17 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $z15 = virtualinvoke $r38.<com.sleepycat.je.tree.BIN: boolean isDefunct(int)>($i17);

     label17:
        staticinvoke <com.sleepycat.je.dbi.CursorImpl$LockStanding: boolean access$202(com.sleepycat.je.dbi.CursorImpl$LockStanding,boolean)>(standing, $z15);

        return standing;

     label18:
        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        $r39 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.txn.Locker locker>;

        $l18 = staticinvoke <com.sleepycat.je.dbi.CursorImpl$LockStanding: long access$000(com.sleepycat.je.dbi.CursorImpl$LockStanding)>(standing);

        $r40 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r41 = virtualinvoke $r39.<com.sleepycat.je.txn.Locker: com.sleepycat.je.txn.LockResult lock(long,com.sleepycat.je.txn.LockType,boolean,com.sleepycat.je.dbi.DatabaseImpl)>($l18, lockType, 0, $r40);

        staticinvoke <com.sleepycat.je.dbi.CursorImpl$LockStanding: com.sleepycat.je.txn.LockResult access$102(com.sleepycat.je.dbi.CursorImpl$LockStanding,com.sleepycat.je.txn.LockResult)>(standing, $r41);

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void latchBIN()>();

        $r43 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i19 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        newLsn = virtualinvoke $r43.<com.sleepycat.je.tree.BIN: long getLsn(int)>($i19);

        $l20 = staticinvoke <com.sleepycat.je.dbi.CursorImpl$LockStanding: long access$000(com.sleepycat.je.dbi.CursorImpl$LockStanding)>(standing);

        $b21 = $l20 cmp newLsn;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b21);

        if $b21 != 0 goto label24;

        $r44 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i22 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $i23 = virtualinvoke $r44.<com.sleepycat.je.tree.BIN: int getExpiration(int)>($i22);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(prevExpiration);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i23);

        if prevExpiration != $i23 goto label19;

        $r45 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $z17 = virtualinvoke $r45.<com.sleepycat.je.tree.BIN: boolean isExpirationInHours()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(prevExpirationInHours);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z17);

        if prevExpirationInHours == $z17 goto label20;

     label19:
        wasLockedAndExpiresSoon#57 = 0;

     label20:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(wasLockedAndExpiresSoon#57);

        if wasLockedAndExpiresSoon#57 == 0 goto label21;

        $r47 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i24 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $z18 = virtualinvoke $r47.<com.sleepycat.je.tree.BIN: boolean isDeleted(int)>($i24);

        goto label22;

     label21:
        $r48 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i25 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $z18 = virtualinvoke $r48.<com.sleepycat.je.tree.BIN: boolean isDefunct(int)>($i25);

     label22:
        staticinvoke <com.sleepycat.je.dbi.CursorImpl$LockStanding: boolean access$202(com.sleepycat.je.dbi.CursorImpl$LockStanding,boolean)>(standing, $z18);

        $z20 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z20);

        if $z20 != 0 goto label23;

        $z21 = specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: boolean verifyPendingDeleted(com.sleepycat.je.txn.LockType)>(lockType);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z21);

        if $z21 != 0 goto label23;

        $r49 = new java.lang.AssertionError;

        specialinvoke $r49.<java.lang.AssertionError: void <init>()>();

        throw $r49;

     label23:
        return standing;

     label24:
        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void revertLock(com.sleepycat.je.dbi.CursorImpl$LockStanding)>(standing);

        staticinvoke <com.sleepycat.je.dbi.CursorImpl$LockStanding: long access$002(com.sleepycat.je.dbi.CursorImpl$LockStanding,long)>(standing, newLsn);

        $b27 = newLsn cmp -1L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b27);

        if $b27 != 0 goto label26;

        $z22 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z22);

        if $z22 != 0 goto label25;

        $r50 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i28 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $z23 = virtualinvoke $r50.<com.sleepycat.je.tree.BIN: boolean isEntryKnownDeleted(int)>($i28);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z23);

        if $z23 != 0 goto label25;

        $r51 = new java.lang.AssertionError;

        specialinvoke $r51.<java.lang.AssertionError: void <init>()>();

        throw $r51;

     label25:
        staticinvoke <com.sleepycat.je.dbi.CursorImpl$LockStanding: boolean access$202(com.sleepycat.je.dbi.CursorImpl$LockStanding,boolean)>(standing, 1);

        return standing;

     label26:
        goto label18;

        catch com.sleepycat.je.LockNotAvailableException from label06 to label07 with label08;
        catch com.sleepycat.je.LockConflictException from label06 to label07 with label09;
    }

    private boolean verifyPendingDeleted(com.sleepycat.je.txn.LockType)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.txn.LockType lockType, $r0;
        com.sleepycat.je.tree.LN ln;
        boolean kd, pd, lnDeleted, $z0;
        com.sleepycat.je.tree.BIN $r1, $r2, $r4, $r5;
        int $i0, $i1, $i2, $i3;
        com.sleepycat.je.tree.Node $r3;
        java.lang.AssertionError $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        java.lang.String $r14;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        lockType := @parameter0: com.sleepycat.je.txn.LockType;

        $r0 = <com.sleepycat.je.txn.LockType: com.sleepycat.je.txn.LockType NONE>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lockType);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if lockType != $r0 goto label1;

        return 1;

     label1:
        $r1 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 == null goto label2;

        $i0 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 >= 0 goto label3;

     label2:
        return 1;

     label3:
        $r2 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i1 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $r3 = virtualinvoke $r2.<com.sleepycat.je.tree.BIN: com.sleepycat.je.tree.Node getTarget(int)>($i1);

        ln = (com.sleepycat.je.tree.LN) $r3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(ln);

        if ln != null goto label4;

        return 1;

     label4:
        $r4 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i2 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        kd = virtualinvoke $r4.<com.sleepycat.je.tree.BIN: boolean isEntryKnownDeleted(int)>($i2);

        $r5 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i3 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        pd = virtualinvoke $r5.<com.sleepycat.je.tree.BIN: boolean isEntryPendingDeleted(int)>($i3);

        lnDeleted = virtualinvoke ln.<com.sleepycat.je.tree.LN: boolean isDeleted()>();

        $z0 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label7;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lnDeleted);

        if lnDeleted == 0 goto label5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(kd);

        if kd != 0 goto label7;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(pd);

        if pd != 0 goto label7;

     label5:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lnDeleted);

        if lnDeleted != 0 goto label6;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(pd);

        if pd == 0 goto label7;

     label6:
        $r6 = new java.lang.AssertionError;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Deleted state mismatch LNDeleted = ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(lnDeleted);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" PD = ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(pd);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" KD = ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(kd);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>($r14);

        throw $r6;

     label7:
        return 1;
    }

    private void revertLock(long, com.sleepycat.je.txn.LockResult)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        long lsn;
        com.sleepycat.je.txn.LockResult lockResult;
        com.sleepycat.je.txn.LockGrantType lockStatus, $r0, $r1, $r3, $r4;
        com.sleepycat.je.txn.Locker $r2, $r5;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        lsn := @parameter0: long;

        lockResult := @parameter1: com.sleepycat.je.txn.LockResult;

        lockStatus = virtualinvoke lockResult.<com.sleepycat.je.txn.LockResult: com.sleepycat.je.txn.LockGrantType getLockGrant()>();

        $r0 = <com.sleepycat.je.txn.LockGrantType: com.sleepycat.je.txn.LockGrantType NEW>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lockStatus);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if lockStatus == $r0 goto label1;

        $r1 = <com.sleepycat.je.txn.LockGrantType: com.sleepycat.je.txn.LockGrantType WAIT_NEW>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lockStatus);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if lockStatus != $r1 goto label2;

     label1:
        $r2 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.txn.Locker locker>;

        virtualinvoke $r2.<com.sleepycat.je.txn.Locker: boolean releaseLock(long)>(lsn);

        goto label4;

     label2:
        $r3 = <com.sleepycat.je.txn.LockGrantType: com.sleepycat.je.txn.LockGrantType PROMOTION>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lockStatus);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r3);

        if lockStatus == $r3 goto label3;

        $r4 = <com.sleepycat.je.txn.LockGrantType: com.sleepycat.je.txn.LockGrantType WAIT_PROMOTION>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lockStatus);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        if lockStatus != $r4 goto label4;

     label3:
        $r5 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.txn.Locker locker>;

        virtualinvoke $r5.<com.sleepycat.je.txn.Locker: void demoteLock(long)>(lsn);

     label4:
        return;
    }

    public static void traverseDbWithCursor(com.sleepycat.je.dbi.DatabaseImpl, com.sleepycat.je.txn.LockType, boolean, com.sleepycat.je.dbi.CursorImpl$WithCursor)
    {
        com.sleepycat.je.dbi.DatabaseImpl db;
        com.sleepycat.je.txn.LockType lockType;
        boolean allowEviction, $z0, done#32, $z1;
        com.sleepycat.je.dbi.CursorImpl$WithCursor withCursor;
        com.sleepycat.je.DatabaseEntry key, data, $r0, $r1;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        java.lang.Throwable l11, $r3;
        com.sleepycat.je.txn.Locker locker#6;
        com.sleepycat.je.dbi.CursorImpl cursor#8, $r2;
        com.sleepycat.je.OperationResult result#30;

        db := @parameter0: com.sleepycat.je.dbi.DatabaseImpl;

        lockType := @parameter1: com.sleepycat.je.txn.LockType;

        allowEviction := @parameter2: boolean;

        withCursor := @parameter3: com.sleepycat.je.dbi.CursorImpl$WithCursor;

        $r0 = new com.sleepycat.je.DatabaseEntry;

        specialinvoke $r0.<com.sleepycat.je.DatabaseEntry: void <init>()>();

        key = $r0;

        $r1 = new com.sleepycat.je.DatabaseEntry;

        specialinvoke $r1.<com.sleepycat.je.DatabaseEntry: void <init>()>();

        data = $r1;

        locker#6 = null;

        cursor#8 = null;

     label01:
        envImpl = virtualinvoke db.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        locker#6 = staticinvoke <com.sleepycat.je.txn.LockerFactory: com.sleepycat.je.txn.Locker getInternalReadOperationLocker(com.sleepycat.je.dbi.EnvironmentImpl)>(envImpl);

        $r2 = new com.sleepycat.je.dbi.CursorImpl;

        specialinvoke $r2.<com.sleepycat.je.dbi.CursorImpl: void <init>(com.sleepycat.je.dbi.DatabaseImpl,com.sleepycat.je.txn.Locker)>(db, locker#6);

        cursor#8 = $r2;

        virtualinvoke cursor#8.<com.sleepycat.je.dbi.CursorImpl: void setAllowEviction(boolean)>(allowEviction);

        $z0 = virtualinvoke cursor#8.<com.sleepycat.je.dbi.CursorImpl: boolean positionFirstOrLast(boolean)>(1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label04;

        result#30 = virtualinvoke cursor#8.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.OperationResult lockAndGetCurrent(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.txn.LockType,boolean,boolean,boolean)>(key, data, lockType, 0, 1, 1);

        done#32 = 0;

     label02:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(done#32);

        if done#32 != 0 goto label04;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(result#30);

        if result#30 == null goto label03;

        $z1 = interfaceinvoke withCursor.<com.sleepycat.je.dbi.CursorImpl$WithCursor: boolean withCursor(com.sleepycat.je.dbi.CursorImpl,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry)>(cursor#8, key, data);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label03;

        done#32 = 1;

     label03:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(done#32);

        if done#32 != 0 goto label02;

        result#30 = virtualinvoke cursor#8.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.OperationResult getNext(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.txn.LockType,boolean,boolean,boolean,com.sleepycat.je.dbi.RangeConstraint)>(key, data, lockType, 0, 1, 0, null);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(result#30);

        if result#30 != null goto label02;

        done#32 = 1;

        goto label02;

     label04:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(cursor#8);

        if cursor#8 == null goto label05;

        virtualinvoke cursor#8.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        virtualinvoke cursor#8.<com.sleepycat.je.dbi.CursorImpl: void close()>();

     label05:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(locker#6);

        if locker#6 == null goto label11;

        virtualinvoke locker#6.<com.sleepycat.je.txn.Locker: void operationEnd()>();

        goto label11;

     label06:
        $r3 := @caughtexception;

     label07:
        l11 = $r3;

     label08:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(cursor#8);

        if cursor#8 == null goto label09;

        virtualinvoke cursor#8.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        virtualinvoke cursor#8.<com.sleepycat.je.dbi.CursorImpl: void close()>();

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(locker#6);

        if locker#6 == null goto label10;

        virtualinvoke locker#6.<com.sleepycat.je.txn.Locker: void operationEnd()>();

     label10:
        throw l11;

     label11:
        return;

        catch java.lang.Throwable from label01 to label04 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
    }

    public void setAllowEviction(boolean)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        boolean allowed;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        allowed := @parameter0: boolean;

        this.<com.sleepycat.je.dbi.CursorImpl: boolean allowEviction> = allowed;

        return;
    }

    public boolean positionFirstOrLast(boolean)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        boolean first, $z0, $z1, found#9, $z2, $z3;
        com.sleepycat.je.tree.TreeWalkerStatsAccumulator treeStatsAccumulator;
        java.lang.Throwable e, $r16;
        java.lang.AssertionError $r0;
        com.sleepycat.je.dbi.DatabaseImpl $r1, $r5;
        com.sleepycat.je.tree.Tree $r2, $r6;
        com.sleepycat.je.CacheMode $r3, $r7;
        com.sleepycat.je.tree.BIN $r4, $r8, $r9, $r10, $r12, $r13, $r14, $r15;
        int $i0, $i1, $i2, $i3, $i4;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        first := @parameter0: boolean;

        $z0 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label01;

        $z1 = specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: boolean assertCursorState(boolean,boolean)>(0, 1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label01;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label01:
        found#9 = 0;

     label02:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(first);

        if first == 0 goto label03;

        $r1 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r2 = virtualinvoke $r1.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.tree.Tree getTree()>();

        $r3 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.CacheMode cacheMode>;

        $r4 = virtualinvoke $r2.<com.sleepycat.je.tree.Tree: com.sleepycat.je.tree.BIN getFirstNode(com.sleepycat.je.CacheMode)>($r3);

        this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin> = $r4;

        goto label04;

     label03:
        $r5 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r6 = virtualinvoke $r5.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.tree.Tree getTree()>();

        $r7 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.CacheMode cacheMode>;

        $r8 = virtualinvoke $r6.<com.sleepycat.je.tree.Tree: com.sleepycat.je.tree.BIN getLastNode(com.sleepycat.je.CacheMode)>($r7);

        this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin> = $r8;

     label04:
        $r9 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r9);

        if $r9 == null goto label09;

        treeStatsAccumulator = specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.TreeWalkerStatsAccumulator getTreeStatsAccumulator()>();

        $r10 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i0 = virtualinvoke $r10.<com.sleepycat.je.tree.BIN: int getNEntries()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 0 goto label05;

        found#9 = 1;

        this.<com.sleepycat.je.dbi.CursorImpl: int index> = -1;

        goto label09;

     label05:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(first);

        if first == 0 goto label06;

        $i1 = 0;

        goto label07;

     label06:
        $r12 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i2 = virtualinvoke $r12.<com.sleepycat.je.tree.BIN: int getNEntries()>();

        $i1 = $i2 - 1;

     label07:
        this.<com.sleepycat.je.dbi.CursorImpl: int index> = $i1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(treeStatsAccumulator);

        if treeStatsAccumulator == null goto label08;

        $r13 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i3 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $z2 = virtualinvoke $r13.<com.sleepycat.je.tree.BIN: boolean isEntryKnownDeleted(int)>($i3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label08;

        $r14 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i4 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $z3 = virtualinvoke $r14.<com.sleepycat.je.tree.BIN: boolean isEntryPendingDeleted(int)>($i4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label08;

        interfaceinvoke treeStatsAccumulator.<com.sleepycat.je.tree.TreeWalkerStatsAccumulator: void incrementLNCount()>();

     label08:
        found#9 = 1;

     label09:
        $r15 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void addCursor(com.sleepycat.je.tree.BIN)>($r15);

        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void setInitialized()>();

     label10:
        return found#9;

     label11:
        $r16 := @caughtexception;

        e = $r16;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        throw e;

        catch java.lang.Throwable from label02 to label10 with label11;
    }

    public com.sleepycat.je.OperationResult lockAndGetCurrent(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.txn.LockType, boolean, boolean, boolean)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.DatabaseEntry foundKey, foundData;
        com.sleepycat.je.txn.LockType lockType;
        boolean dirtyReadAll, isLatched, unlatch, dataRequested, success#2, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        com.sleepycat.je.tree.TreeWalkerStatsAccumulator treeStatsAccumulator;
        com.sleepycat.je.OperationResult result, l11;
        java.lang.Throwable l12, $r14;
        java.lang.AssertionError $r0, $r1, $r5, $r12;
        java.lang.String $r2;
        com.sleepycat.je.tree.BIN $r3, $r6, $r7, $r8, $r9, $r10;
        java.util.Set $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        com.sleepycat.je.utilint.TestHook $r11;
        com.sleepycat.je.dbi.CursorImpl$LockStanding $r13;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        foundKey := @parameter0: com.sleepycat.je.DatabaseEntry;

        foundData := @parameter1: com.sleepycat.je.DatabaseEntry;

        lockType := @parameter2: com.sleepycat.je.txn.LockType;

        dirtyReadAll := @parameter3: boolean;

        isLatched := @parameter4: boolean;

        unlatch := @parameter5: boolean;

        success#2 = 0;

     label01:
        $z0 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label02;

        $z1 = specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: boolean assertCursorState(boolean,boolean)>(1, 0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label02;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label02:
        $z2 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label03;

        $z3 = specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: boolean checkAlreadyLatched(boolean)>(isLatched);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label03;

        $r1 = new java.lang.AssertionError;

        $r2 = virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: java.lang.String dumpToString(boolean)>(1);

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>($r2);

        throw $r1;

     label03:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isLatched);

        if isLatched != 0 goto label04;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void latchBIN()>();

     label04:
        $z4 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label05;

        $r3 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $r4 = virtualinvoke $r3.<com.sleepycat.je.tree.BIN: java.util.Set getCursorSet()>();

        $z5 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>(this);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 != 0 goto label05;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label05:
        treeStatsAccumulator = specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.TreeWalkerStatsAccumulator getTreeStatsAccumulator()>();

        $i0 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 < 0 goto label06;

        $i1 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $r6 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i2 = virtualinvoke $r6.<com.sleepycat.je.tree.BIN: int getNEntries()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i1 >= $i2 goto label06;

        $r7 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i3 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $z6 = virtualinvoke $r7.<com.sleepycat.je.tree.BIN: boolean isDeleted(int)>($i3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label06;

        $r8 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i4 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        virtualinvoke $r8.<com.sleepycat.je.tree.BIN: void queueSlotDeletion(int)>($i4);

     label06:
        $i5 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i5 < 0 goto label07;

        $i6 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $r9 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i7 = virtualinvoke $r9.<com.sleepycat.je.tree.BIN: int getNEntries()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if $i6 >= $i7 goto label07;

        $r10 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i8 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $z7 = virtualinvoke $r10.<com.sleepycat.je.tree.BIN: boolean isEntryKnownDeleted(int)>($i8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 == 0 goto label12;

     label07:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(treeStatsAccumulator);

        if treeStatsAccumulator == null goto label08;

        interfaceinvoke treeStatsAccumulator.<com.sleepycat.je.tree.TreeWalkerStatsAccumulator: void incrementDeletedLNCount()>();

     label08:
        success#2 = 1;

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(unlatch);

        if unlatch != 0 goto label10;

        if 1 != 0 goto label11;

     label10:
        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

     label11:
        return null;

     label12:
        $z8 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 != 0 goto label13;

        $r11 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.utilint.TestHook testHook>;

        $z9 = staticinvoke <com.sleepycat.je.utilint.TestHookExecute: boolean doHookIfSet(com.sleepycat.je.utilint.TestHook)>($r11);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 != 0 goto label13;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label13:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(foundData);

        if foundData == null goto label15;

        $z10 = virtualinvoke foundData.<com.sleepycat.je.DatabaseEntry: boolean getPartial()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z10);

        if $z10 == 0 goto label14;

        $i9 = virtualinvoke foundData.<com.sleepycat.je.DatabaseEntry: int getPartialLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        if $i9 == 0 goto label15;

     label14:
        $z11 = 1;

        goto label16;

     label15:
        $z11 = 0;

     label16:
        dataRequested = $z11;

        $r13 = specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.CursorImpl$LockStanding lockLNAndCheckDefunct(com.sleepycat.je.txn.LockType,boolean,boolean)>(lockType, dirtyReadAll, dataRequested);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r13);

        if $r13 != null goto label21;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(treeStatsAccumulator);

        if treeStatsAccumulator == null goto label17;

        interfaceinvoke treeStatsAccumulator.<com.sleepycat.je.tree.TreeWalkerStatsAccumulator: void incrementDeletedLNCount()>();

     label17:
        success#2 = 1;

     label18:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(unlatch);

        if unlatch != 0 goto label19;

        if 1 != 0 goto label20;

     label19:
        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

     label20:
        return null;

     label21:
        result = virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.OperationResult getCurrent(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry)>(foundKey, foundData);

        success#2 = 1;

        l11 = result;

     label22:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(unlatch);

        if unlatch != 0 goto label23;

        if 1 != 0 goto label24;

     label23:
        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

     label24:
        return l11;

     label25:
        $r14 := @caughtexception;

     label26:
        l12 = $r14;

     label27:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(unlatch);

        if unlatch != 0 goto label28;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(success#2);

        if success#2 != 0 goto label29;

     label28:
        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

     label29:
        throw l12;

        catch java.lang.Throwable from label01 to label09 with label25;
        catch java.lang.Throwable from label12 to label18 with label25;
        catch java.lang.Throwable from label21 to label22 with label25;
        catch java.lang.Throwable from label26 to label27 with label25;
    }

    public com.sleepycat.je.OperationResult getNext(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.txn.LockType, boolean, boolean, boolean, com.sleepycat.je.dbi.RangeConstraint)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.DatabaseEntry foundKey, foundData;
        com.sleepycat.je.txn.LockType lockType;
        boolean dirtyReadAll, forward, isLatched#1, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        com.sleepycat.je.dbi.RangeConstraint rangeConstraint;
        com.sleepycat.je.OperationResult 'ret', result#19;
        com.sleepycat.je.tree.Tree tree;
        java.lang.Throwable l11, $r23;
        java.lang.AssertionError $r0, $r1, $r4, $r15;
        java.lang.String $r2, $r5;
        com.sleepycat.je.tree.BIN anchorBIN#21, $r3, $r6, $r8, $r10, $r12, $r17, $r19, $r20, $r21, $r22;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        byte[] $r11;
        com.sleepycat.je.dbi.DatabaseImpl $r13;
        com.sleepycat.je.utilint.TestHook $r14;
        com.sleepycat.je.CacheMode $r16, $r18;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        foundKey := @parameter0: com.sleepycat.je.DatabaseEntry;

        foundData := @parameter1: com.sleepycat.je.DatabaseEntry;

        lockType := @parameter2: com.sleepycat.je.txn.LockType;

        dirtyReadAll := @parameter3: boolean;

        forward := @parameter4: boolean;

        isLatched#1 := @parameter5: boolean;

        rangeConstraint := @parameter6: com.sleepycat.je.dbi.RangeConstraint;

        $z0 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label01;

        $z1 = specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: boolean assertCursorState(boolean,boolean)>(1, 0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label01;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label01:
        $z2 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label02;

        $z3 = specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: boolean checkAlreadyLatched(boolean)>(isLatched#1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label02;

        $r1 = new java.lang.AssertionError;

        $r2 = virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: java.lang.String dumpToString(boolean)>(1);

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>($r2);

        throw $r1;

     label02:
        result#19 = null;

        anchorBIN#21 = null;

     label03:
        $r3 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r3);

        if $r3 == null goto label18;

        $z4 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label04;

        $z5 = specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: boolean checkAlreadyLatched(boolean)>(isLatched#1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 != 0 goto label04;

        $r4 = new java.lang.AssertionError;

        $r5 = virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: java.lang.String dumpToString(boolean)>(1);

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>($r5);

        throw $r4;

     label04:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isLatched#1);

        if isLatched#1 != 0 goto label05;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void latchBIN()>();

        isLatched#1 = 1;

     label05:
        $r6 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        virtualinvoke $r6.<com.sleepycat.je.tree.BIN: void mutateToFullBIN(boolean)>(0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(forward);

        if forward == 0 goto label06;

        $i0 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $i1 = $i0 + 1;

        this.<com.sleepycat.je.dbi.CursorImpl: int index> = $i1;

        $r8 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i2 = virtualinvoke $r8.<com.sleepycat.je.tree.BIN: int getNEntries()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i1 < $i2 goto label07;

     label06:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(forward);

        if forward != 0 goto label11;

        $i3 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $i4 = $i3 - 1;

        this.<com.sleepycat.je.dbi.CursorImpl: int index> = $i4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 <= -1 goto label11;

     label07:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(rangeConstraint);

        if rangeConstraint == null goto label08;

        $r10 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i5 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $r11 = virtualinvoke $r10.<com.sleepycat.je.tree.BIN: byte[] getKey(int)>($i5);

        $z6 = interfaceinvoke rangeConstraint.<com.sleepycat.je.dbi.RangeConstraint: boolean inBounds(byte[])>($r11);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 != 0 goto label08;

        result#19 = null;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        goto label18;

     label08:
        'ret' = virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.OperationResult lockAndGetCurrent(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.txn.LockType,boolean,boolean,boolean)>(foundKey, foundData, lockType, dirtyReadAll, 1, 0);

        $z7 = <com.sleepycat.je.latch.LatchSupport: boolean TRACK_LATCHES>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 == 0 goto label09;

        staticinvoke <com.sleepycat.je.latch.LatchSupport: void expectBtreeLatchesHeld(int)>(1);

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>('ret');

        if 'ret' == null goto label10;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void incrementLNCount()>();

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        result#19 = 'ret';

        goto label18;

     label10:
        goto label03;

     label11:
        anchorBIN#21 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        virtualinvoke anchorBIN#21.<com.sleepycat.je.tree.BIN: void pin()>();

        $r12 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        virtualinvoke $r12.<com.sleepycat.je.tree.BIN: void removeCursor(com.sleepycat.je.dbi.CursorImpl)>(this);

        this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin> = null;

        $r13 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        tree = virtualinvoke $r13.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.tree.Tree getTree()>();

        $z8 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 != 0 goto label12;

        $r14 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.utilint.TestHook testHook>;

        $z9 = staticinvoke <com.sleepycat.je.utilint.TestHookExecute: boolean doHookIfSet(com.sleepycat.je.utilint.TestHook)>($r14);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 != 0 goto label12;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label12:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(forward);

        if forward == 0 goto label13;

        $r16 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.CacheMode cacheMode>;

        $r17 = virtualinvoke tree.<com.sleepycat.je.tree.Tree: com.sleepycat.je.tree.BIN getNextBin(com.sleepycat.je.tree.BIN,com.sleepycat.je.CacheMode)>(anchorBIN#21, $r16);

        this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin> = $r17;

        this.<com.sleepycat.je.dbi.CursorImpl: int index> = -1;

        goto label14;

     label13:
        $r18 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.CacheMode cacheMode>;

        $r19 = virtualinvoke tree.<com.sleepycat.je.tree.Tree: com.sleepycat.je.tree.BIN getPrevBin(com.sleepycat.je.tree.BIN,com.sleepycat.je.CacheMode)>(anchorBIN#21, $r18);

        this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin> = $r19;

        $r20 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r20);

        if $r20 == null goto label14;

        $r21 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i6 = virtualinvoke $r21.<com.sleepycat.je.tree.BIN: int getNEntries()>();

        this.<com.sleepycat.je.dbi.CursorImpl: int index> = $i6;

     label14:
        isLatched#1 = 1;

        $r22 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r22);

        if $r22 != null goto label16;

        $z10 = <com.sleepycat.je.latch.LatchSupport: boolean TRACK_LATCHES>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z10);

        if $z10 == 0 goto label15;

        staticinvoke <com.sleepycat.je.latch.LatchSupport: void expectBtreeLatchesHeld(int)>(0);

     label15:
        result#19 = null;

        goto label18;

     label16:
        $z11 = <com.sleepycat.je.latch.LatchSupport: boolean TRACK_LATCHES>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z11);

        if $z11 == 0 goto label17;

        staticinvoke <com.sleepycat.je.latch.LatchSupport: void expectBtreeLatchesHeld(int)>(1);

     label17:
        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void addCursor()>();

        virtualinvoke anchorBIN#21.<com.sleepycat.je.tree.BIN: void unpin()>();

        anchorBIN#21 = null;

        goto label03;

     label18:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(anchorBIN#21);

        if anchorBIN#21 == null goto label23;

        virtualinvoke anchorBIN#21.<com.sleepycat.je.tree.BIN: void unpin()>();

        goto label23;

     label19:
        $r23 := @caughtexception;

     label20:
        l11 = $r23;

     label21:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(anchorBIN#21);

        if anchorBIN#21 == null goto label22;

        virtualinvoke anchorBIN#21.<com.sleepycat.je.tree.BIN: void unpin()>();

     label22:
        throw l11;

     label23:
        $z12 = <com.sleepycat.je.latch.LatchSupport: boolean TRACK_LATCHES>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z12);

        if $z12 == 0 goto label24;

        staticinvoke <com.sleepycat.je.latch.LatchSupport: void expectBtreeLatchesHeld(int)>(0);

     label24:
        return result#19;

        catch java.lang.Throwable from label03 to label18 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
    }

    public void incrementLNCount()
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.tree.TreeWalkerStatsAccumulator treeStatsAccumulator;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        treeStatsAccumulator = specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.TreeWalkerStatsAccumulator getTreeStatsAccumulator()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(treeStatsAccumulator);

        if treeStatsAccumulator == null goto label1;

        interfaceinvoke treeStatsAccumulator.<com.sleepycat.je.tree.TreeWalkerStatsAccumulator: void incrementLNCount()>();

     label1:
        return;
    }

    void addCursor()
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.tree.BIN $r0, $r1;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        $r0 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label1;

        $r1 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void addCursor(com.sleepycat.je.tree.BIN)>($r1);

     label1:
        return;
    }

    private com.sleepycat.je.tree.TreeWalkerStatsAccumulator getTreeStatsAccumulator()
    {
        com.sleepycat.je.dbi.CursorImpl this;
        int $i0;
        java.lang.ThreadLocal $r0;
        java.lang.Object $r1;
        com.sleepycat.je.tree.TreeWalkerStatsAccumulator $r2;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        $i0 = staticinvoke <com.sleepycat.je.dbi.EnvironmentImpl: int getThreadLocalReferenceCount()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label1;

        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void maybeInitTreeStatsAccumulator()>();

        $r0 = this.<com.sleepycat.je.dbi.CursorImpl: java.lang.ThreadLocal treeStatsAccumulatorTL>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r2 = (com.sleepycat.je.tree.TreeWalkerStatsAccumulator) $r1;

        return $r2;

     label1:
        return null;
    }

    private void maybeInitTreeStatsAccumulator()
    {
        com.sleepycat.je.dbi.CursorImpl this;
        java.lang.ThreadLocal $r0, $r1;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        $r1 = this.<com.sleepycat.je.dbi.CursorImpl: java.lang.ThreadLocal treeStatsAccumulatorTL>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 != null goto label1;

        $r0 = new java.lang.ThreadLocal;

        specialinvoke $r0.<java.lang.ThreadLocal: void <init>()>();

        this.<com.sleepycat.je.dbi.CursorImpl: java.lang.ThreadLocal treeStatsAccumulatorTL> = $r0;

     label1:
        return;
    }

    public com.sleepycat.je.OperationResult getCurrent(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.DatabaseEntry foundKey, foundData;
        boolean isEmptyLN, isEmbeddedLN, dataRequested, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        long vlsn, $l10, $l13;
        com.sleepycat.je.tree.BIN $r0, $r2, $r4, $r7, $r8, $r10, $r12, $r13, $r15, $r17, $r18, $r19;
        java.lang.AssertionError $r1, $r3, $r5, $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i14, $i15;
        com.sleepycat.je.dbi.DatabaseImpl $r6;
        com.sleepycat.je.CacheMode $r9, $r16;
        com.sleepycat.je.tree.LN ln#49;
        byte[] data#57, $r14;
        com.sleepycat.je.OperationResult $r20;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        foundKey := @parameter0: com.sleepycat.je.DatabaseEntry;

        foundData := @parameter1: com.sleepycat.je.DatabaseEntry;

        $z0 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label01;

        $r0 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $z1 = virtualinvoke $r0.<com.sleepycat.je.tree.BIN: boolean isLatchExclusiveOwner()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label01;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label01:
        $z2 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label03;

        $i0 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 < 0 goto label02;

        $i1 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $r2 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i2 = virtualinvoke $r2.<com.sleepycat.je.tree.BIN: int getNEntries()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i1 < $i2 goto label03;

     label02:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label03:
        $z3 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label04;

        $r4 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i3 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $z4 = virtualinvoke $r4.<com.sleepycat.je.tree.BIN: boolean isEntryKnownDeleted(int)>($i3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label04;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label04:
        $r6 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        isEmptyLN = virtualinvoke $r6.<com.sleepycat.je.dbi.DatabaseImpl: boolean isLNImmediatelyObsolete()>();

        $r7 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i4 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        isEmbeddedLN = virtualinvoke $r7.<com.sleepycat.je.tree.BIN: boolean isEmbeddedLN(int)>($i4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(foundData);

        if foundData == null goto label06;

        $z5 = virtualinvoke foundData.<com.sleepycat.je.DatabaseEntry: boolean getPartial()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label05;

        $i5 = virtualinvoke foundData.<com.sleepycat.je.DatabaseEntry: int getPartialLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i5 == 0 goto label06;

     label05:
        $z6 = 1;

        goto label07;

     label06:
        $z6 = 0;

     label07:
        dataRequested = $z6;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isEmptyLN);

        if isEmptyLN != 0 goto label08;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isEmbeddedLN);

        if isEmbeddedLN != 0 goto label08;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dataRequested);

        if dataRequested == 0 goto label08;

        $r8 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i6 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $r9 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.CacheMode cacheMode>;

        ln#49 = virtualinvoke $r8.<com.sleepycat.je.tree.BIN: com.sleepycat.je.tree.LN fetchLN(int,com.sleepycat.je.CacheMode)>($i6, $r9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(ln#49);

        if ln#49 != null goto label09;

        return null;

     label08:
        ln#49 = null;

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dataRequested);

        if dataRequested == 0 goto label15;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(ln#49);

        if ln#49 == null goto label10;

        data#57 = virtualinvoke ln#49.<com.sleepycat.je.tree.LN: byte[] getData()>();

        goto label14;

     label10:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isEmptyLN);

        if isEmptyLN != 0 goto label11;

        $r10 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i7 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $z7 = virtualinvoke $r10.<com.sleepycat.je.tree.BIN: boolean isNoDataLN(int)>($i7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 == 0 goto label12;

     label11:
        data#57 = <com.sleepycat.je.log.LogUtils: byte[] ZERO_LENGTH_BYTE_ARRAY>;

        goto label14;

     label12:
        $z8 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 != 0 goto label13;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isEmbeddedLN);

        if isEmbeddedLN != 0 goto label13;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label13:
        $r12 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i8 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        data#57 = virtualinvoke $r12.<com.sleepycat.je.tree.BIN: byte[] getData(int)>($i8);

     label14:
        staticinvoke <com.sleepycat.je.tree.LN: void setEntry(com.sleepycat.je.DatabaseEntry,byte[])>(foundData, data#57);

     label15:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(foundKey);

        if foundKey == null goto label16;

        $r13 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i9 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $r14 = virtualinvoke $r13.<com.sleepycat.je.tree.BIN: byte[] getKey(int)>($i9);

        staticinvoke <com.sleepycat.je.tree.LN: void setEntry(com.sleepycat.je.DatabaseEntry,byte[])>(foundKey, $r14);

     label16:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(ln#49);

        if ln#49 == null goto label17;

        $l10 = virtualinvoke ln#49.<com.sleepycat.je.tree.LN: long getVLSNSequence()>();

        goto label18;

     label17:
        $r15 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i11 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $r16 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.CacheMode cacheMode>;

        $l10 = virtualinvoke $r15.<com.sleepycat.je.tree.BIN: long getVLSN(int,boolean,com.sleepycat.je.CacheMode)>($i11, 0, $r16);

     label18:
        vlsn = $l10;

        $r17 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i12 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $l13 = virtualinvoke $r17.<com.sleepycat.je.tree.BIN: long getLsn(int)>($i12);

        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void setCurrentVersion(long,long)>(vlsn, $l13);

        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void setStorageSize()>();

        $r18 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i14 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $i15 = virtualinvoke $r18.<com.sleepycat.je.tree.BIN: int getExpiration(int)>($i14);

        $r19 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $z9 = virtualinvoke $r19.<com.sleepycat.je.tree.BIN: boolean isExpirationInHours()>();

        $r20 = staticinvoke <com.sleepycat.je.DbInternal: com.sleepycat.je.OperationResult makeResult(int,boolean)>($i15, $z9);

        return $r20;
    }

    private void setCurrentVersion(long, long)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        long vlsn, lsn;
        com.sleepycat.je.dbi.RecordVersion $r0;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        vlsn := @parameter0: long;

        lsn := @parameter1: long;

        $r0 = new com.sleepycat.je.dbi.RecordVersion;

        specialinvoke $r0.<com.sleepycat.je.dbi.RecordVersion: void <init>(long,long)>(vlsn, lsn);

        this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.RecordVersion currentRecordVersion> = $r0;

        return;
    }

    private void setStorageSize()
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.tree.BIN $r0;
        int $i0, $i1;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        $r0 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i0 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $i1 = staticinvoke <com.sleepycat.je.tree.StorageSize: int getStorageSize(com.sleepycat.je.tree.BIN,int)>($r0, $i0);

        this.<com.sleepycat.je.dbi.CursorImpl: int storageSize> = $i1;

        return;
    }

    public com.sleepycat.je.tree.LN lockAndGetCurrentLN(com.sleepycat.je.txn.LockType)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.txn.LockType lockType;
        com.sleepycat.je.dbi.CursorImpl$LockStanding lockStanding;
        java.lang.Throwable l4, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.AssertionError $r0, $r1, $r5, $r7;
        java.lang.String $r2;
        com.sleepycat.je.tree.BIN $r3, $r6, $r8;
        java.util.Set $r4;
        int $i0, $i1;
        com.sleepycat.je.CacheMode $r9;
        com.sleepycat.je.tree.LN l3#51;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        lockType := @parameter0: com.sleepycat.je.txn.LockType;

     label01:
        $z0 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label02;

        $z1 = specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: boolean assertCursorState(boolean,boolean)>(1, 0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label02;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label02:
        $z2 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label03;

        $z3 = specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: boolean checkAlreadyLatched(boolean)>(0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label03;

        $r1 = new java.lang.AssertionError;

        $r2 = virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: java.lang.String dumpToString(boolean)>(1);

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>($r2);

        throw $r1;

     label03:
        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void latchBIN()>();

        $z4 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label04;

        $r3 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $r4 = virtualinvoke $r3.<com.sleepycat.je.tree.BIN: java.util.Set getCursorSet()>();

        $z5 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>(this);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 != 0 goto label04;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label04:
        lockStanding = virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.CursorImpl$LockStanding lockLN(com.sleepycat.je.txn.LockType)>(lockType);

        $z6 = virtualinvoke lockStanding.<com.sleepycat.je.dbi.CursorImpl$LockStanding: boolean recordExists()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 != 0 goto label06;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void revertLock(com.sleepycat.je.dbi.CursorImpl$LockStanding)>(lockStanding);

     label05:
        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        return null;

     label06:
        $z7 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 != 0 goto label07;

        $r6 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i0 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $z8 = virtualinvoke $r6.<com.sleepycat.je.tree.BIN: boolean isEmbeddedLN(int)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 == 0 goto label07;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label07:
        $r8 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i1 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $r9 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.CacheMode cacheMode>;

        l3#51 = virtualinvoke $r8.<com.sleepycat.je.tree.BIN: com.sleepycat.je.tree.LN fetchLN(int,com.sleepycat.je.CacheMode)>($i1, $r9);

     label08:
        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        return l3#51;

     label09:
        $r10 := @caughtexception;

     label10:
        l4 = $r10;

     label11:
        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        throw l4;

        catch java.lang.Throwable from label01 to label05 with label09;
        catch java.lang.Throwable from label06 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public long getCurrentLsn()
    {
        com.sleepycat.je.dbi.CursorImpl this;
        boolean $z0, $z1, $z2;
        com.sleepycat.je.tree.BIN $r0, $r1, $r3, $r5;
        java.lang.AssertionError $r2, $r4;
        int $i0, $i1, $i2, $i3;
        long $l4;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        $z0 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label2;

        $r0 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label1;

        $r1 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $z1 = virtualinvoke $r1.<com.sleepycat.je.tree.BIN: boolean isLatchOwner()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

     label1:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label2:
        $z2 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label4;

        $i0 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 < 0 goto label3;

        $i1 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $r3 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i2 = virtualinvoke $r3.<com.sleepycat.je.tree.BIN: int getNEntries()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i1 < $i2 goto label4;

     label3:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label4:
        $r5 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i3 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $l4 = virtualinvoke $r5.<com.sleepycat.je.tree.BIN: long getLsn(int)>($i3);

        return $l4;
    }

    public com.sleepycat.je.txn.Locker getLocker()
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.txn.Locker $r0;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        $r0 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.txn.Locker locker>;

        return $r0;
    }

    public boolean isInternalDbCursor()
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.dbi.DatabaseImpl $r0;
        boolean $z0;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        $r0 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z0 = virtualinvoke $r0.<com.sleepycat.je.dbi.DatabaseImpl: boolean isInternalDb()>();

        return $z0;
    }

    public static void lockAfterLsnChange(com.sleepycat.je.dbi.DatabaseImpl, long, long, com.sleepycat.je.txn.Locker)
    {
        com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        long oldLsn, newLsn;
        com.sleepycat.je.txn.Locker excludeLocker, locker#21, locker#37;
        com.sleepycat.je.txn.LockManager lockManager;
        java.util.Set owners;
        com.sleepycat.je.dbi.EnvironmentImpl $r0;
        com.sleepycat.je.txn.TxnManager $r1;
        java.lang.Long $r2;
        java.util.Iterator l8#12, l8#28;
        boolean $z0, $z1, $z2;
        java.lang.Object $r3, $r4;
        com.sleepycat.je.txn.LockInfo lockInfo#18, lockInfo#34;

        dbImpl := @parameter0: com.sleepycat.je.dbi.DatabaseImpl;

        oldLsn := @parameter1: long;

        newLsn := @parameter2: long;

        excludeLocker := @parameter3: com.sleepycat.je.txn.Locker;

        $r0 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r1 = virtualinvoke $r0.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.txn.TxnManager getTxnManager()>();

        lockManager = virtualinvoke $r1.<com.sleepycat.je.txn.TxnManager: com.sleepycat.je.txn.LockManager getLockManager()>();

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(oldLsn);

        owners = virtualinvoke lockManager.<com.sleepycat.je.txn.LockManager: java.util.Set getOwners(java.lang.Long)>($r2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(owners);

        if owners != null goto label1;

        return;

     label1:
        l8#12 = interfaceinvoke owners.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke l8#12.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke l8#12.<java.util.Iterator: java.lang.Object next()>();

        lockInfo#18 = (com.sleepycat.je.txn.LockInfo) $r3;

        locker#21 = virtualinvoke lockInfo#18.<com.sleepycat.je.txn.LockInfo: com.sleepycat.je.txn.Locker getLocker()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(locker#21);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(excludeLocker);

        if locker#21 == excludeLocker goto label3;

        virtualinvoke locker#21.<com.sleepycat.je.txn.Locker: void lockAfterLsnChange(long,long,com.sleepycat.je.dbi.DatabaseImpl)>(oldLsn, newLsn, dbImpl);

     label3:
        goto label2;

     label4:
        l8#28 = interfaceinvoke owners.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke l8#28.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label7;

        $r4 = interfaceinvoke l8#28.<java.util.Iterator: java.lang.Object next()>();

        lockInfo#34 = (com.sleepycat.je.txn.LockInfo) $r4;

        locker#37 = virtualinvoke lockInfo#34.<com.sleepycat.je.txn.LockInfo: com.sleepycat.je.txn.Locker getLocker()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(locker#37);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(excludeLocker);

        if locker#37 == excludeLocker goto label6;

        $z2 = virtualinvoke locker#37.<com.sleepycat.je.txn.Locker: boolean allowReleaseLockAfterLsnChange()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label6;

        virtualinvoke locker#37.<com.sleepycat.je.txn.Locker: boolean releaseLock(long)>(oldLsn);

     label6:
        goto label5;

     label7:
        return;
    }

    public boolean insertRecord(byte[], com.sleepycat.je.tree.LN, boolean, com.sleepycat.je.log.ReplicationContext)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        byte[] key;
        com.sleepycat.je.tree.LN ln;
        boolean blindInsertion, l6, $z0, $z1, $z2, $z3;
        com.sleepycat.je.log.ReplicationContext repContext;
        com.sleepycat.je.utilint.Pair result;
        java.lang.Throwable l7, $r2;
        java.lang.AssertionError $r0;
        java.lang.Object $r1;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        key := @parameter0: byte[];

        ln := @parameter1: com.sleepycat.je.tree.LN;

        blindInsertion := @parameter2: boolean;

        repContext := @parameter3: com.sleepycat.je.log.ReplicationContext;

        $z0 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: boolean assertCursorState(boolean,boolean)>(0, 1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $z2 = <com.sleepycat.je.latch.LatchSupport: boolean TRACK_LATCHES>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label2;

        staticinvoke <com.sleepycat.je.latch.LatchSupport: void expectBtreeLatchesHeld(int)>(0);

     label2:
        result = specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.utilint.Pair insertRecordInternal(byte[],com.sleepycat.je.tree.LN,com.sleepycat.je.dbi.ExpirationInfo,boolean,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.log.ReplicationContext)>(key, ln, null, blindInsertion, null, repContext);

        $r1 = virtualinvoke result.<com.sleepycat.je.utilint.Pair: java.lang.Object second()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 == null goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        l6 = $z3;

     label5:
        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        return l6;

     label6:
        $r2 := @caughtexception;

     label7:
        l7 = $r2;

     label8:
        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        throw l7;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void evictLN()
    {
        com.sleepycat.je.dbi.CursorImpl this;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void evictLN(boolean,boolean)>(0, 0);

        return;
    }

    private com.sleepycat.je.utilint.Pair insertRecordInternal(byte[], com.sleepycat.je.tree.LN, com.sleepycat.je.dbi.ExpirationInfo, boolean, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.log.ReplicationContext)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        byte[] key, $r2, data#16;
        com.sleepycat.je.tree.LN ln;
        boolean blindInsertion, $z0, newEmbeddedLN#18, isSlotReuse#46, $z1, $z2, currEmbeddedLN#74, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        com.sleepycat.je.DatabaseEntry returnNewData;
        com.sleepycat.je.log.ReplicationContext repContext;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        com.sleepycat.je.tree.Tree tree;
        java.lang.Throwable l19, $r17;
        com.sleepycat.je.dbi.ExpirationInfo expInfo#1;
        com.sleepycat.je.dbi.DatabaseImpl $r0, $r1, $r6, $r14, $r27, $r28;
        com.sleepycat.je.dbi.CursorImpl$LockStanding lockStanding#9;
        com.sleepycat.je.CacheMode $r3;
        com.sleepycat.je.tree.BIN $r4, $r7, $r11, $r12, $r13, $r16, $r18, $r20, $r21, $r22, $r24, $r25, $r26, $r29, $r31, $r33;
        com.sleepycat.je.txn.Locker $r5, $r15;
        int insertIndex#41, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i19, $i21, $i22, $i24, $i25;
        com.sleepycat.je.txn.LockType $r8;
        java.lang.AssertionError $r9, $r19;
        com.sleepycat.je.utilint.Pair $r10, $r34;
        long currLsn#68, $l8, $l9, $l15, $l18, $l20, $l23;
        com.sleepycat.je.txn.WriteLockInfo wli#81;
        com.sleepycat.je.log.LogItem logItem#113;
        com.sleepycat.je.tree.Node $r23, $r30;
        java.util.logging.Level $r32;
        com.sleepycat.je.OperationResult $r35;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        key := @parameter0: byte[];

        ln := @parameter1: com.sleepycat.je.tree.LN;

        expInfo#1 := @parameter2: com.sleepycat.je.dbi.ExpirationInfo;

        blindInsertion := @parameter3: boolean;

        returnNewData := @parameter4: com.sleepycat.je.DatabaseEntry;

        repContext := @parameter5: com.sleepycat.je.log.ReplicationContext;

        $r0 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        envImpl = virtualinvoke $r0.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r1 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        tree = virtualinvoke $r1.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.tree.Tree getTree()>();

        lockStanding#9 = null;

        $r2 = virtualinvoke ln.<com.sleepycat.je.tree.LN: byte[] getData()>();

        $z0 = specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: boolean shouldEmbedLN(byte[])>($r2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label01;

        data#16 = virtualinvoke ln.<com.sleepycat.je.tree.LN: byte[] getData()>();

        newEmbeddedLN#18 = 1;

        goto label02;

     label01:
        newEmbeddedLN#18 = 0;

        data#16 = null;

     label02:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(expInfo#1);

        if expInfo#1 != null goto label03;

        expInfo#1 = <com.sleepycat.je.dbi.ExpirationInfo: com.sleepycat.je.dbi.ExpirationInfo DEFAULT>;

     label03:
        $r3 = virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.CacheMode getCacheMode()>();

        $r4 = virtualinvoke tree.<com.sleepycat.je.tree.Tree: com.sleepycat.je.tree.BIN findBinForInsert(byte[],com.sleepycat.je.CacheMode)>(key, $r3);

        this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin> = $r4;

        $r5 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.txn.Locker locker>;

        $r6 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        virtualinvoke $r5.<com.sleepycat.je.txn.Locker: void preLogWithoutLock(com.sleepycat.je.dbi.DatabaseImpl)>($r6);

        $r7 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        insertIndex#41 = virtualinvoke $r7.<com.sleepycat.je.tree.BIN: int insertEntry1(com.sleepycat.je.tree.Node,byte[],byte[],long,boolean)>(ln, key, data#16, -1L, blindInsertion);

        $i0 = insertIndex#41 & 131072;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 0 goto label06;

        isSlotReuse#46 = 1;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void setIndex(int)>(insertIndex#41);

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void addCursor()>();

        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void setInitialized()>();

        $r8 = <com.sleepycat.je.txn.LockType: com.sleepycat.je.txn.LockType WRITE>;

        lockStanding#9 = virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.CursorImpl$LockStanding lockLN(com.sleepycat.je.txn.LockType,boolean,boolean)>($r8, 1, 0);

        $z1 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label04;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lockStanding#9);

        if lockStanding#9 != null goto label04;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label04:
        $z2 = virtualinvoke lockStanding#9.<com.sleepycat.je.dbi.CursorImpl$LockStanding: boolean recordExists()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label05;

        $r10 = new com.sleepycat.je.utilint.Pair;

        specialinvoke $r10.<com.sleepycat.je.utilint.Pair: void <init>(java.lang.Object,java.lang.Object)>(lockStanding#9, null);

        return $r10;

     label05:
        currLsn#68 = staticinvoke <com.sleepycat.je.dbi.CursorImpl$LockStanding: long access$000(com.sleepycat.je.dbi.CursorImpl$LockStanding)>(lockStanding#9);

        $r11 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i1 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        currEmbeddedLN#74 = virtualinvoke $r11.<com.sleepycat.je.tree.BIN: boolean isEmbeddedLN(int)>($i1);

        $r12 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i2 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        wli#81 = virtualinvoke lockStanding#9.<com.sleepycat.je.dbi.CursorImpl$LockStanding: com.sleepycat.je.txn.WriteLockInfo prepareForUpdate(com.sleepycat.je.tree.BIN,int)>($r12, $i2);

        goto label07;

     label06:
        isSlotReuse#46 = 0;

        currEmbeddedLN#74 = newEmbeddedLN#18;

        currLsn#68 = -1L;

        $i3 = insertIndex#41 & -131073;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void setIndex(int)>($i3);

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void addCursor()>();

        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void setInitialized()>();

        $r13 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        wli#81 = staticinvoke <com.sleepycat.je.dbi.CursorImpl$LockStanding: com.sleepycat.je.txn.WriteLockInfo prepareForInsert(com.sleepycat.je.tree.BIN)>($r13);

     label07:
        $r14 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r15 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.txn.Locker locker>;

        $i4 = expInfo#1.<com.sleepycat.je.dbi.ExpirationInfo: int expiration>;

        $z3 = expInfo#1.<com.sleepycat.je.dbi.ExpirationInfo: boolean expirationInHours>;

        logItem#113 = virtualinvoke ln.<com.sleepycat.je.tree.LN: com.sleepycat.je.log.LogItem optionalLog(com.sleepycat.je.dbi.EnvironmentImpl,com.sleepycat.je.dbi.DatabaseImpl,com.sleepycat.je.txn.Locker,com.sleepycat.je.txn.WriteLockInfo,boolean,byte[],int,boolean,boolean,long,int,boolean,com.sleepycat.je.log.ReplicationContext)>(envImpl, $r14, $r15, wli#81, newEmbeddedLN#18, key, $i4, $z3, currEmbeddedLN#74, currLsn#68, 0, 1, repContext);

     label08:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(logItem#113);

        if logItem#113 != null goto label13;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isSlotReuse#46);

        if isSlotReuse#46 != 0 goto label13;

        $r16 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i5 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        virtualinvoke $r16.<com.sleepycat.je.tree.BIN: void setKnownDeletedAndEvictLN(int)>($i5);

        goto label13;

     label09:
        $r17 := @caughtexception;

     label10:
        l19 = $r17;

     label11:
        if null != null goto label12;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isSlotReuse#46);

        if isSlotReuse#46 != 0 goto label12;

        $r18 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i6 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        virtualinvoke $r18.<com.sleepycat.je.tree.BIN: void setKnownDeletedAndEvictLN(int)>($i6);

     label12:
        throw l19;

     label13:
        $z4 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label14;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(logItem#113);

        if logItem#113 != null goto label14;

        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();

        throw $r19;

     label14:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lockStanding#9);

        if lockStanding#9 != null goto label15;

        $r20 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i7 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $l8 = logItem#113.<com.sleepycat.je.log.LogItem: long lsn>;

        $l9 = virtualinvoke ln.<com.sleepycat.je.tree.LN: long getVLSNSequence()>();

        $i10 = logItem#113.<com.sleepycat.je.log.LogItem: int size>;

        virtualinvoke $r20.<com.sleepycat.je.tree.BIN: void updateEntry(int,long,long,int)>($i7, $l8, $l9, $i10);

        $r21 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i11 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $i12 = expInfo#1.<com.sleepycat.je.dbi.ExpirationInfo: int expiration>;

        $z5 = expInfo#1.<com.sleepycat.je.dbi.ExpirationInfo: boolean expirationInHours>;

        virtualinvoke $r21.<com.sleepycat.je.tree.BIN: void setExpiration(int,int,boolean)>($i11, $i12, $z5);

        $r22 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i13 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $r23 = virtualinvoke $r22.<com.sleepycat.je.tree.BIN: com.sleepycat.je.tree.Node getTarget(int)>($i13);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r23);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(ln);

        if $r23 != ln goto label16;

        $r24 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        virtualinvoke ln.<com.sleepycat.je.tree.LN: void addExtraMarshaledMemorySize(com.sleepycat.je.tree.BIN)>($r24);

        goto label16;

     label15:
        $r25 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i14 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $l15 = logItem#113.<com.sleepycat.je.log.LogItem: long lsn>;

        $i16 = logItem#113.<com.sleepycat.je.log.LogItem: int size>;

        $i17 = expInfo#1.<com.sleepycat.je.dbi.ExpirationInfo: int expiration>;

        $z6 = expInfo#1.<com.sleepycat.je.dbi.ExpirationInfo: boolean expirationInHours>;

        virtualinvoke $r25.<com.sleepycat.je.tree.BIN: void insertRecord(int,com.sleepycat.je.tree.LN,long,int,byte[],byte[],int,boolean)>($i14, ln, $l15, $i16, key, data#16, $i17, $z6);

     label16:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(returnNewData);

        if returnNewData == null goto label17;

        virtualinvoke returnNewData.<com.sleepycat.je.DatabaseEntry: void setData(byte[])>(null);

        virtualinvoke ln.<com.sleepycat.je.tree.LN: void setEntry(com.sleepycat.je.DatabaseEntry)>(returnNewData);

     label17:
        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void setInitialized()>();

        $l18 = virtualinvoke ln.<com.sleepycat.je.tree.LN: long getVLSNSequence()>();

        $r26 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i19 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $l20 = virtualinvoke $r26.<com.sleepycat.je.tree.BIN: long getLsn(int)>($i19);

        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void setCurrentVersion(long,long)>($l18, $l20);

        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void setStorageSize()>();

        $r27 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z7 = virtualinvoke $r27.<com.sleepycat.je.dbi.DatabaseImpl: boolean getSortedDuplicates()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 == 0 goto label18;

        $r28 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z8 = virtualinvoke $r28.<com.sleepycat.je.dbi.DatabaseImpl: boolean isDeferredWriteMode()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 != 0 goto label18;

        $r29 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i21 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $r30 = virtualinvoke $r29.<com.sleepycat.je.tree.BIN: com.sleepycat.je.tree.Node getTarget(int)>($i21);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r30);

        if $r30 == null goto label18;

        $r31 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i22 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        virtualinvoke $r31.<com.sleepycat.je.tree.BIN: void evictLN(int)>($i22);

     label18:
        $r32 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $r33 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $l23 = logItem#113.<com.sleepycat.je.log.LogItem: long lsn>;

        $i24 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void traceInsert(java.util.logging.Level,com.sleepycat.je.tree.BIN,long,int)>($r32, $r33, $l23, $i24);

        $r34 = new com.sleepycat.je.utilint.Pair;

        $i25 = expInfo#1.<com.sleepycat.je.dbi.ExpirationInfo: int expiration>;

        $z9 = expInfo#1.<com.sleepycat.je.dbi.ExpirationInfo: boolean expirationInHours>;

        $r35 = staticinvoke <com.sleepycat.je.DbInternal: com.sleepycat.je.OperationResult makeResult(int,boolean)>($i25, $z9);

        specialinvoke $r34.<com.sleepycat.je.utilint.Pair: void <init>(java.lang.Object,java.lang.Object)>(lockStanding#9, $r35);

        return $r34;

        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private boolean shouldEmbedLN(byte[])
    {
        com.sleepycat.je.dbi.CursorImpl this;
        byte[] data;
        int $i0, $i1;
        com.sleepycat.je.dbi.DatabaseImpl $r0, $r2, $r3;
        com.sleepycat.je.dbi.EnvironmentImpl $r1;
        boolean $z0, $z1, $z2;
        com.sleepycat.je.dbi.DbType $r4;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        data := @parameter0: byte[];

        $i0 = lengthof data;

        $r0 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r1 = virtualinvoke $r0.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $i1 = virtualinvoke $r1.<com.sleepycat.je.dbi.EnvironmentImpl: int getMaxEmbeddedLN()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i0 > $i1 goto label1;

        $r2 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z0 = virtualinvoke $r2.<com.sleepycat.je.dbi.DatabaseImpl: boolean getSortedDuplicates()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r3 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r4 = virtualinvoke $r3.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.DbType getDbType()>();

        $z1 = virtualinvoke $r4.<com.sleepycat.je.dbi.DbType: boolean isInternal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public com.sleepycat.je.CacheMode getCacheMode()
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.CacheMode $r0;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        $r0 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.CacheMode cacheMode>;

        return $r0;
    }

    public void setIndex(int)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        int idx;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        idx := @parameter0: int;

        this.<com.sleepycat.je.dbi.CursorImpl: int index> = idx;

        return;
    }

    private void traceInsert(java.util.logging.Level, com.sleepycat.je.tree.BIN, long, int)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        java.util.logging.Level level;
        com.sleepycat.je.tree.BIN insertingBin;
        long lnLsn, $l0;
        int index;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        java.lang.StringBuilder sb, $r2;
        com.sleepycat.je.dbi.DatabaseImpl $r0;
        java.util.logging.Logger $r1, $r11;
        boolean $z0;
        java.lang.String $r7, $r12;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        level := @parameter0: java.util.logging.Level;

        insertingBin := @parameter1: com.sleepycat.je.tree.BIN;

        lnLsn := @parameter2: long;

        index := @parameter3: int;

        $r0 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        envImpl = virtualinvoke $r0.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r1 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: java.util.logging.Logger getLogger()>();

        $z0 = virtualinvoke $r1.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>(level);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        sb = $r2;

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ins:");

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bin=");

        $l0 = virtualinvoke insertingBin.<com.sleepycat.je.tree.BIN: long getNodeId()>();

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lnLsn=");

        $r7 = staticinvoke <com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(lnLsn);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" index=");

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(index);

        $r11 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: java.util.logging.Logger getLogger()>();

        $r12 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.sleepycat.je.utilint.LoggerUtils: void logMsg(java.util.logging.Logger,com.sleepycat.je.dbi.EnvironmentImpl,java.util.logging.Level,java.lang.String)>($r11, envImpl, level, $r12);

     label1:
        return;
    }

    public com.sleepycat.je.OperationResult deleteCurrentRecord(com.sleepycat.je.log.ReplicationContext)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.log.ReplicationContext repContext;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl, $r8, $r23, $r44, $r50;
        com.sleepycat.je.dbi.DbType dbType;
        com.sleepycat.je.dbi.CursorImpl$LockStanding lockStanding;
        long currLsn, oldLNMemSize#117, $l9, $l10, $l15, $l16, $l18;
        boolean currEmbeddedLN, expirationInHours, $z0, $z1, success#15, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15;
        int currLoggedSize, expiration, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i11, $i12, $i13, $i14, $i17;
        byte[] currKey;
        com.sleepycat.je.txn.WriteLockInfo wli;
        com.sleepycat.je.log.LogItem logItem;
        com.sleepycat.je.OperationResult l18;
        java.lang.Throwable l19, $r45;
        java.lang.AssertionError $r0, $r9;
        com.sleepycat.je.dbi.DatabaseImpl $r1, $r2, $r4, $r7, $r16, $r19, $r22, $r27, $r32, $r34, $r40, $r43, $r46, $r49;
        com.sleepycat.je.txn.LockType $r3;
        com.sleepycat.je.tree.BIN $r5, $r6, $r10, $r11, $r12, $r13, $r14, $r17, $r20, $r21, $r24, $r26, $r29, $r30, $r33, $r35, $r37, $r39, $r41, $r42, $r47, $r48;
        byte $b0;
        com.sleepycat.je.cleaner.Cleaner $r15;
        com.sleepycat.je.CacheMode $r18, $r25;
        com.sleepycat.je.tree.LN ln#89;
        com.sleepycat.je.txn.Locker $r28, $r36;
        com.sleepycat.je.tree.Node $r31;
        java.util.logging.Level $r38;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        repContext := @parameter0: com.sleepycat.je.log.ReplicationContext;

        $z0 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label01;

        $z1 = specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: boolean assertCursorState(boolean,boolean)>(1, 0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label01;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label01:
        $r1 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        envImpl = virtualinvoke $r1.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r2 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        dbType = virtualinvoke $r2.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.DbType getDbType()>();

        success#15 = 0;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void latchBIN()>();

     label02:
        $r3 = <com.sleepycat.je.txn.LockType: com.sleepycat.je.txn.LockType WRITE>;

        lockStanding = virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.CursorImpl$LockStanding lockLN(com.sleepycat.je.txn.LockType,boolean,boolean)>($r3, 1, 0);

        $z2 = virtualinvoke lockStanding.<com.sleepycat.je.dbi.CursorImpl$LockStanding: boolean recordExists()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label05;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void revertLock(com.sleepycat.je.dbi.CursorImpl$LockStanding)>(lockStanding);

        success#15 = 1;

     label03:
        if 1 == 0 goto label04;

        $r4 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z3 = virtualinvoke $r4.<com.sleepycat.je.dbi.DatabaseImpl: boolean isInternalDb()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label04;

        $r5 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r5);

        if $r5 == null goto label04;

        $r6 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $z4 = virtualinvoke $r6.<com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label04;

        $r7 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r8 = virtualinvoke $r7.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r8.<com.sleepycat.je.dbi.EnvironmentImpl: void incBinDeltaDeletes()>();

     label04:
        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        return null;

     label05:
        currLsn = staticinvoke <com.sleepycat.je.dbi.CursorImpl$LockStanding: long access$000(com.sleepycat.je.dbi.CursorImpl$LockStanding)>(lockStanding);

        $z5 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 != 0 goto label06;

        $b0 = currLsn cmp -1L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 != 0 goto label06;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label06:
        $r10 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i1 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        currEmbeddedLN = virtualinvoke $r10.<com.sleepycat.je.tree.BIN: boolean isEmbeddedLN(int)>($i1);

        $r11 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i2 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        currLoggedSize = virtualinvoke $r11.<com.sleepycat.je.tree.BIN: int getLastLoggedSize(int)>($i2);

        $r12 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i3 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        currKey = virtualinvoke $r12.<com.sleepycat.je.tree.BIN: byte[] getKey(int)>($i3);

        $r13 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i4 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        expiration = virtualinvoke $r13.<com.sleepycat.je.tree.BIN: int getExpiration(int)>($i4);

        $r14 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        expirationInHours = virtualinvoke $r14.<com.sleepycat.je.tree.BIN: boolean isExpirationInHours()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(currLoggedSize);

        if currLoggedSize != 0 goto label07;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(currEmbeddedLN);

        if currEmbeddedLN != 0 goto label07;

        $r15 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.cleaner.Cleaner getCleaner()>();

        $r16 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z6 = virtualinvoke $r15.<com.sleepycat.je.cleaner.Cleaner: boolean getFetchObsoleteSize(com.sleepycat.je.dbi.DatabaseImpl)>($r16);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 != 0 goto label08;

     label07:
        $z7 = virtualinvoke dbType.<com.sleepycat.je.dbi.DbType: boolean mayCreateDeletedLN()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 != 0 goto label11;

     label08:
        $r17 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i5 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $r18 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.CacheMode cacheMode>;

        ln#89 = virtualinvoke $r17.<com.sleepycat.je.tree.BIN: com.sleepycat.je.tree.LN fetchLN(int,com.sleepycat.je.CacheMode)>($i5, $r18);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(ln#89);

        if ln#89 != null goto label12;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void revertLock(com.sleepycat.je.dbi.CursorImpl$LockStanding)>(lockStanding);

        success#15 = 1;

     label09:
        if 1 == 0 goto label10;

        $r19 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z8 = virtualinvoke $r19.<com.sleepycat.je.dbi.DatabaseImpl: boolean isInternalDb()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 != 0 goto label10;

        $r20 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r20);

        if $r20 == null goto label10;

        $r21 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $z9 = virtualinvoke $r21.<com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 == 0 goto label10;

        $r22 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r23 = virtualinvoke $r22.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r23.<com.sleepycat.je.dbi.EnvironmentImpl: void incBinDeltaDeletes()>();

     label10:
        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        return null;

     label11:
        $r24 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i6 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $r25 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.CacheMode cacheMode>;

        ln#89 = virtualinvoke $r24.<com.sleepycat.je.tree.BIN: com.sleepycat.je.tree.LN getLN(int,com.sleepycat.je.CacheMode)>($i6, $r25);

     label12:
        oldLNMemSize#117 = 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(ln#89);

        if ln#89 == null goto label13;

        oldLNMemSize#117 = virtualinvoke ln#89.<com.sleepycat.je.tree.LN: long getMemorySizeIncludedByParent()>();

        virtualinvoke ln#89.<com.sleepycat.je.tree.LN: void delete()>();

        goto label14;

     label13:
        ln#89 = virtualinvoke dbType.<com.sleepycat.je.dbi.DbType: com.sleepycat.je.tree.LN createDeletedLN(com.sleepycat.je.dbi.EnvironmentImpl)>(envImpl);

     label14:
        $r26 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i7 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        wli = virtualinvoke lockStanding.<com.sleepycat.je.dbi.CursorImpl$LockStanding: com.sleepycat.je.txn.WriteLockInfo prepareForUpdate(com.sleepycat.je.tree.BIN,int)>($r26, $i7);

        $r27 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r28 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.txn.Locker locker>;

        logItem = virtualinvoke ln#89.<com.sleepycat.je.tree.LN: com.sleepycat.je.log.LogItem optionalLog(com.sleepycat.je.dbi.EnvironmentImpl,com.sleepycat.je.dbi.DatabaseImpl,com.sleepycat.je.txn.Locker,com.sleepycat.je.txn.WriteLockInfo,boolean,byte[],int,boolean,boolean,long,int,boolean,com.sleepycat.je.log.ReplicationContext)>(envImpl, $r27, $r28, wli, currEmbeddedLN, currKey, expiration, expirationInHours, currEmbeddedLN, currLsn, currLoggedSize, 0, repContext);

        $r29 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i8 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $l9 = logItem.<com.sleepycat.je.log.LogItem: long lsn>;

        $l10 = virtualinvoke ln#89.<com.sleepycat.je.tree.LN: long getVLSNSequence()>();

        $i11 = logItem.<com.sleepycat.je.log.LogItem: int size>;

        virtualinvoke $r29.<com.sleepycat.je.tree.BIN: void deleteRecord(int,long,long,long,int)>($i8, oldLNMemSize#117, $l9, $l10, $i11);

        $r30 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i12 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $r31 = virtualinvoke $r30.<com.sleepycat.je.tree.BIN: com.sleepycat.je.tree.Node getTarget(int)>($i12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r31);

        if $r31 != null goto label15;

        $r32 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z10 = virtualinvoke $r32.<com.sleepycat.je.dbi.DatabaseImpl: boolean isDeferredWriteMode()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z10);

        if $z10 == 0 goto label16;

        $r33 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i13 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        virtualinvoke $r33.<com.sleepycat.je.tree.BIN: void attachNode(int,com.sleepycat.je.tree.Node,byte[])>($i13, ln#89, null);

        goto label16;

     label15:
        $r34 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z11 = virtualinvoke $r34.<com.sleepycat.je.dbi.DatabaseImpl: boolean isDeferredWriteMode()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z11);

        if $z11 != 0 goto label16;

        $r35 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i14 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        virtualinvoke $r35.<com.sleepycat.je.tree.BIN: void evictLN(int)>($i14);

     label16:
        $l15 = virtualinvoke ln#89.<com.sleepycat.je.tree.LN: long getVLSNSequence()>();

        $l16 = logItem.<com.sleepycat.je.log.LogItem: long lsn>;

        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void setCurrentVersion(long,long)>($l15, $l16);

        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void setStorageSize()>();

        $r36 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.txn.Locker locker>;

        $r37 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        virtualinvoke $r36.<com.sleepycat.je.txn.Locker: void addDeleteInfo(com.sleepycat.je.tree.BIN)>($r37);

        success#15 = 1;

        $r38 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $r39 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i17 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $l18 = logItem.<com.sleepycat.je.log.LogItem: long lsn>;

        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void trace(java.util.logging.Level,java.lang.String,com.sleepycat.je.tree.BIN,int,long,long)>($r38, "Delete", $r39, $i17, currLsn, $l18);

        l18 = staticinvoke <com.sleepycat.je.DbInternal: com.sleepycat.je.OperationResult makeResult(int,boolean)>(expiration, expirationInHours);

     label17:
        if 1 == 0 goto label18;

        $r40 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z12 = virtualinvoke $r40.<com.sleepycat.je.dbi.DatabaseImpl: boolean isInternalDb()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z12);

        if $z12 != 0 goto label18;

        $r41 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r41);

        if $r41 == null goto label18;

        $r42 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $z13 = virtualinvoke $r42.<com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z13);

        if $z13 == 0 goto label18;

        $r43 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r44 = virtualinvoke $r43.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r44.<com.sleepycat.je.dbi.EnvironmentImpl: void incBinDeltaDeletes()>();

     label18:
        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        return l18;

     label19:
        $r45 := @caughtexception;

     label20:
        l19 = $r45;

     label21:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(success#15);

        if success#15 == 0 goto label22;

        $r46 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z14 = virtualinvoke $r46.<com.sleepycat.je.dbi.DatabaseImpl: boolean isInternalDb()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z14);

        if $z14 != 0 goto label22;

        $r47 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r47);

        if $r47 == null goto label22;

        $r48 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $z15 = virtualinvoke $r48.<com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z15);

        if $z15 == 0 goto label22;

        $r49 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r50 = virtualinvoke $r49.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r50.<com.sleepycat.je.dbi.EnvironmentImpl: void incBinDeltaDeletes()>();

     label22:
        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        throw l19;

        catch java.lang.Throwable from label02 to label03 with label19;
        catch java.lang.Throwable from label05 to label09 with label19;
        catch java.lang.Throwable from label11 to label17 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
    }

    private void trace(java.util.logging.Level, java.lang.String, com.sleepycat.je.tree.BIN, int, long, long)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        java.util.logging.Level level;
        java.lang.String changeType, $r9, $r12, $r15;
        com.sleepycat.je.tree.BIN theBin;
        int lnIndex;
        long oldLsn, newLsn, $l0;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        java.lang.StringBuilder sb, $r2;
        com.sleepycat.je.dbi.DatabaseImpl $r0;
        java.util.logging.Logger $r1, $r14;
        boolean $z0;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        level := @parameter0: java.util.logging.Level;

        changeType := @parameter1: java.lang.String;

        theBin := @parameter2: com.sleepycat.je.tree.BIN;

        lnIndex := @parameter3: int;

        oldLsn := @parameter4: long;

        newLsn := @parameter5: long;

        $r0 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        envImpl = virtualinvoke $r0.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r1 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: java.util.logging.Logger getLogger()>();

        $z0 = virtualinvoke $r1.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>(level);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        sb = $r2;

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(changeType);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bin=");

        $l0 = virtualinvoke theBin.<com.sleepycat.je.tree.BIN: long getNodeId()>();

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lnIdx=");

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(lnIndex);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" oldLnLsn=");

        $r9 = staticinvoke <com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(oldLsn);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" newLnLsn=");

        $r12 = staticinvoke <com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(newLsn);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: java.util.logging.Logger getLogger()>();

        $r15 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.sleepycat.je.utilint.LoggerUtils: void logMsg(java.util.logging.Logger,com.sleepycat.je.dbi.EnvironmentImpl,java.util.logging.Level,java.lang.String)>($r14, envImpl, level, $r15);

     label1:
        return;
    }

    public void reset()
    {
        com.sleepycat.je.dbi.CursorImpl this;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void removeCursorAndPerformCacheEviction(com.sleepycat.je.dbi.CursorImpl)>(null);

        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseNonTxnLocks()>();

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void criticalEviction()>();

        return;
    }

    public int searchRange(com.sleepycat.je.DatabaseEntry, java.util.Comparator)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.DatabaseEntry searchKey;
        java.util.Comparator comparator;
        com.sleepycat.je.tree.BINBoundary binBoundary, $r1;
        byte[] key;
        java.lang.Throwable e, $r17;
        boolean $z0, $z1, foundSomething#9, foundExactKey#11, foundLast#13, $z2, $z3, $z4, $z5, $z6;
        java.lang.AssertionError $r0;
        com.sleepycat.je.dbi.DatabaseImpl $r2;
        com.sleepycat.je.tree.Tree $r3;
        com.sleepycat.je.tree.Tree$SearchType $r4;
        com.sleepycat.je.CacheMode $r5;
        com.sleepycat.je.tree.BIN $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r15, $r16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        byte $b13, $b14, $b15, $b16, $b17;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        searchKey := @parameter0: com.sleepycat.je.DatabaseEntry;

        comparator := @parameter1: java.util.Comparator;

        $z0 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label01;

        $z1 = specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: boolean assertCursorState(boolean,boolean)>(0, 1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label01;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label01:
        foundSomething#9 = 0;

        foundExactKey#11 = 0;

        foundLast#13 = 0;

        $r1 = new com.sleepycat.je.tree.BINBoundary;

        specialinvoke $r1.<com.sleepycat.je.tree.BINBoundary: void <init>()>();

        binBoundary = $r1;

     label02:
        key = staticinvoke <com.sleepycat.je.tree.Key: byte[] makeKey(com.sleepycat.je.DatabaseEntry)>(searchKey);

        $r2 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r3 = virtualinvoke $r2.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.tree.Tree getTree()>();

        $r4 = <com.sleepycat.je.tree.Tree$SearchType: com.sleepycat.je.tree.Tree$SearchType NORMAL>;

        $r5 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.CacheMode cacheMode>;

        $r6 = virtualinvoke $r3.<com.sleepycat.je.tree.Tree: com.sleepycat.je.tree.BIN search(byte[],com.sleepycat.je.tree.Tree$SearchType,com.sleepycat.je.tree.BINBoundary,com.sleepycat.je.CacheMode,java.util.Comparator)>(key, $r4, binBoundary, $r5, comparator);

        this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin> = $r6;

        $r7 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r7);

        if $r7 == null goto label10;

        foundSomething#9 = 1;

        $r8 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $z2 = virtualinvoke $r8.<com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label03;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(comparator);

        if comparator == null goto label03;

        $r9 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        virtualinvoke $r9.<com.sleepycat.je.tree.BIN: void mutateToFullBIN(boolean)>(0);

     label03:
        $r10 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i0 = virtualinvoke $r10.<com.sleepycat.je.tree.BIN: int findEntry(byte[],boolean,boolean,java.util.Comparator)>(key, 1, 0, comparator);

        this.<com.sleepycat.je.dbi.CursorImpl: int index> = $i0;

        $r11 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $z3 = virtualinvoke $r11.<com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label05;

        $i1 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 < 0 goto label04;

        $i2 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $i3 = $i2 & 65536;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 == 0 goto label04;

        $z4 = binBoundary.<com.sleepycat.je.tree.BINBoundary: boolean isLastBin>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label05;

     label04:
        $r12 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        virtualinvoke $r12.<com.sleepycat.je.tree.BIN: void mutateToFullBIN(boolean)>(0);

        $r13 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i4 = virtualinvoke $r13.<com.sleepycat.je.tree.BIN: int findEntry(byte[],boolean,boolean,java.util.Comparator)>(key, 1, 0, comparator);

        this.<com.sleepycat.je.dbi.CursorImpl: int index> = $i4;

     label05:
        $i5 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i5 < 0 goto label09;

        $i6 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $i7 = $i6 & 65536;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if $i7 == 0 goto label06;

        foundExactKey#11 = 1;

        $i8 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $i9 = $i8 & -65537;

        this.<com.sleepycat.je.dbi.CursorImpl: int index> = $i9;

     label06:
        $z5 = binBoundary.<com.sleepycat.je.tree.BINBoundary: boolean isLastBin>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label07;

        $i10 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $r15 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i11 = virtualinvoke $r15.<com.sleepycat.je.tree.BIN: int getNEntries()>();

        $i12 = $i11 - 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i10);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i12);

        if $i10 != $i12 goto label07;

        $z6 = 1;

        goto label08;

     label07:
        $z6 = 0;

     label08:
        foundLast#13 = $z6;

     label09:
        $r16 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void addCursor(com.sleepycat.je.tree.BIN)>($r16);

     label10:
        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void setInitialized()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(foundSomething#9);

        if foundSomething#9 == 0 goto label11;

        $b13 = 1;

        goto label12;

     label11:
        $b13 = 0;

     label12:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(foundExactKey#11);

        if foundExactKey#11 == 0 goto label13;

        $b14 = 2;

        goto label14;

     label13:
        $b14 = 0;

     label14:
        $b15 = $b13 | $b14;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(foundLast#13);

        if foundLast#13 == 0 goto label15;

        $b16 = 4;

        goto label16;

     label15:
        $b16 = 0;

     label16:
        $b17 = $b15 | $b16;

     label17:
        return $b17;

     label18:
        $r17 := @caughtexception;

        e = $r17;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        throw e;

        catch java.lang.Throwable from label02 to label17 with label18;
    }

    private void releaseNonTxnLocks()
    {
        com.sleepycat.je.dbi.CursorImpl this;
        boolean $z0;
        com.sleepycat.je.txn.Locker $r0;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        $z0 = this.<com.sleepycat.je.dbi.CursorImpl: boolean retainNonTxnLocks>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r0 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.txn.Locker locker>;

        virtualinvoke $r0.<com.sleepycat.je.txn.Locker: void releaseNonTxnLocks()>();

     label1:
        return;
    }

    public void lockNextKeyForInsert(com.sleepycat.je.DatabaseEntry)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.DatabaseEntry key, tempKey, tempData, $r0, $r2;
        int searchResult, c, $i0, $i1, $i2, $i3, $i4, $i5;
        com.sleepycat.je.OperationResult result;
        java.util.Comparator comparator;
        java.lang.Throwable l10, $r6;
        byte[] $r1, $r5;
        boolean lockedNextKey#10, latched#12;
        com.sleepycat.je.txn.LockType $r3, $r7;
        com.sleepycat.je.dbi.DatabaseImpl $r4;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        $r0 = new com.sleepycat.je.DatabaseEntry;

        $r1 = virtualinvoke key.<com.sleepycat.je.DatabaseEntry: byte[] getData()>();

        $i0 = virtualinvoke key.<com.sleepycat.je.DatabaseEntry: int getOffset()>();

        $i1 = virtualinvoke key.<com.sleepycat.je.DatabaseEntry: int getSize()>();

        specialinvoke $r0.<com.sleepycat.je.DatabaseEntry: void <init>(byte[],int,int)>($r1, $i0, $i1);

        tempKey = $r0;

        lockedNextKey#10 = 0;

        latched#12 = 1;

     label01:
        searchResult = virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: int searchRange(com.sleepycat.je.DatabaseEntry,java.util.Comparator)>(tempKey, null);

        $i2 = searchResult & 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 == 0 goto label04;

        $i3 = searchResult & 4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 != 0 goto label04;

        $r2 = new com.sleepycat.je.DatabaseEntry;

        specialinvoke $r2.<com.sleepycat.je.DatabaseEntry: void <init>()>();

        tempData = $r2;

        virtualinvoke tempData.<com.sleepycat.je.DatabaseEntry: void setPartial(int,int,boolean)>(0, 0, 1);

        $r3 = <com.sleepycat.je.txn.LockType: com.sleepycat.je.txn.LockType RANGE_INSERT>;

        result = virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.OperationResult getNext(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.txn.LockType,boolean,boolean,boolean,com.sleepycat.je.dbi.RangeConstraint)>(tempKey, tempData, $r3, 0, 1, 1, null);

        latched#12 = 0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(result);

        if result == null goto label03;

        $r4 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        comparator = virtualinvoke $r4.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator getKeyComparator()>();

        c = staticinvoke <com.sleepycat.je.tree.Key: int compareKeys(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,java.util.Comparator)>(tempKey, key, comparator);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c);

        if c > 0 goto label02;

        $r5 = virtualinvoke key.<com.sleepycat.je.DatabaseEntry: byte[] getData()>();

        $i4 = virtualinvoke key.<com.sleepycat.je.DatabaseEntry: int getOffset()>();

        $i5 = virtualinvoke key.<com.sleepycat.je.DatabaseEntry: int getSize()>();

        virtualinvoke tempKey.<com.sleepycat.je.DatabaseEntry: void setData(byte[],int,int)>($r5, $i4, $i5);

        goto label01;

     label02:
        lockedNextKey#10 = 1;

     label03:
        goto label04;

     label04:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(latched#12);

        if latched#12 == 0 goto label09;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        goto label09;

     label05:
        $r6 := @caughtexception;

     label06:
        l10 = $r6;

     label07:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(latched#12);

        if latched#12 == 0 goto label08;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

     label08:
        throw l10;

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lockedNextKey#10);

        if lockedNextKey#10 != 0 goto label10;

        $r7 = <com.sleepycat.je.txn.LockType: com.sleepycat.je.txn.LockType RANGE_INSERT>;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void lockEof(com.sleepycat.je.txn.LockType)>($r7);

     label10:
        return;

        catch java.lang.Throwable from label01 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
    }

    public void lockEof(com.sleepycat.je.txn.LockType)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.txn.LockType lockType;
        com.sleepycat.je.txn.Locker $r0;
        com.sleepycat.je.dbi.DatabaseImpl $r1, $r2;
        long $l0;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        lockType := @parameter0: com.sleepycat.je.txn.LockType;

        $r0 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.txn.Locker locker>;

        $r1 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $l0 = virtualinvoke $r1.<com.sleepycat.je.dbi.DatabaseImpl: long getEofLsn()>();

        $r2 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        virtualinvoke $r0.<com.sleepycat.je.txn.Locker: com.sleepycat.je.txn.LockResult lock(long,com.sleepycat.je.txn.LockType,boolean,com.sleepycat.je.dbi.DatabaseImpl)>($l0, lockType, 0, $r2);

        return;
    }

    public com.sleepycat.je.OperationResult updateCurrentRecord(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.dbi.ExpirationInfo, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.log.ReplicationContext)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.DatabaseEntry key, data, returnOldData, returnNewData;
        com.sleepycat.je.dbi.ExpirationInfo expInfo;
        com.sleepycat.je.log.ReplicationContext repContext;
        com.sleepycat.je.dbi.CursorImpl$LockStanding lockStanding;
        com.sleepycat.je.OperationResult l10, result#15;
        java.lang.Throwable l11, $r9;
        boolean $z0, $z1, success#17, $z2, $z3, $z4, $z5, $z6;
        java.lang.AssertionError $r0;
        com.sleepycat.je.txn.LockType $r1;
        byte[] $r3;
        com.sleepycat.je.dbi.DatabaseImpl $r4, $r7, $r10, $r13;
        com.sleepycat.je.tree.BIN $r5, $r6, $r11, $r12;
        com.sleepycat.je.dbi.EnvironmentImpl $r8, $r14;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        expInfo := @parameter2: com.sleepycat.je.dbi.ExpirationInfo;

        returnOldData := @parameter3: com.sleepycat.je.DatabaseEntry;

        returnNewData := @parameter4: com.sleepycat.je.DatabaseEntry;

        repContext := @parameter5: com.sleepycat.je.log.ReplicationContext;

        $z0 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label01;

        $z1 = specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: boolean assertCursorState(boolean,boolean)>(1, 0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label01;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label01:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(returnOldData);

        if returnOldData == null goto label02;

        virtualinvoke returnOldData.<com.sleepycat.je.DatabaseEntry: void setData(byte[])>(null);

     label02:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(returnNewData);

        if returnNewData == null goto label03;

        virtualinvoke returnNewData.<com.sleepycat.je.DatabaseEntry: void setData(byte[])>(null);

     label03:
        result#15 = null;

        success#17 = 0;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void latchBIN()>();

     label04:
        $r1 = <com.sleepycat.je.txn.LockType: com.sleepycat.je.txn.LockType WRITE>;

        lockStanding = virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.CursorImpl$LockStanding lockLN(com.sleepycat.je.txn.LockType,boolean,boolean)>($r1, 1, 0);

        $z2 = virtualinvoke lockStanding.<com.sleepycat.je.dbi.CursorImpl$LockStanding: boolean recordExists()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label05;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void revertLock(com.sleepycat.je.dbi.CursorImpl$LockStanding)>(lockStanding);

        goto label08;

     label05:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(key);

        if key == null goto label06;

        $r3 = staticinvoke <com.sleepycat.je.tree.Key: byte[] makeKey(com.sleepycat.je.DatabaseEntry)>(key);

        goto label07;

     label06:
        $r3 = null;

     label07:
        result#15 = specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.OperationResult updateRecordInternal(byte[],com.sleepycat.je.DatabaseEntry,com.sleepycat.je.dbi.ExpirationInfo,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.dbi.CursorImpl$LockStanding,com.sleepycat.je.log.ReplicationContext)>($r3, data, expInfo, returnOldData, returnNewData, lockStanding, repContext);

     label08:
        success#17 = 1;

        l10 = result#15;

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(success#17);

        if success#17 == 0 goto label10;

        $r4 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z3 = virtualinvoke $r4.<com.sleepycat.je.dbi.DatabaseImpl: boolean isInternalDb()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label10;

        $r5 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r5);

        if $r5 == null goto label10;

        $r6 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $z4 = virtualinvoke $r6.<com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label10;

        $r7 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r8 = virtualinvoke $r7.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r8.<com.sleepycat.je.dbi.EnvironmentImpl: void incBinDeltaUpdates()>();

     label10:
        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        return l10;

     label11:
        $r9 := @caughtexception;

     label12:
        l11 = $r9;

     label13:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(success#17);

        if success#17 == 0 goto label14;

        $r10 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z5 = virtualinvoke $r10.<com.sleepycat.je.dbi.DatabaseImpl: boolean isInternalDb()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 != 0 goto label14;

        $r11 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r11);

        if $r11 == null goto label14;

        $r12 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $z6 = virtualinvoke $r12.<com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label14;

        $r13 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r14 = virtualinvoke $r13.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r14.<com.sleepycat.je.dbi.EnvironmentImpl: void incBinDeltaUpdates()>();

     label14:
        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        throw l11;

        catch java.lang.Throwable from label04 to label09 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    private com.sleepycat.je.OperationResult updateRecordInternal(byte[], com.sleepycat.je.DatabaseEntry, com.sleepycat.je.dbi.ExpirationInfo, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.dbi.CursorImpl$LockStanding, com.sleepycat.je.log.ReplicationContext)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        byte[] key, currKey, currData#53, $r14, $r17, newData#89, $r29, $r32;
        com.sleepycat.je.DatabaseEntry data, returnOldData, returnNewData;
        com.sleepycat.je.dbi.ExpirationInfo expInfo;
        com.sleepycat.je.dbi.CursorImpl$LockStanding lockStanding;
        com.sleepycat.je.log.ReplicationContext repContext;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        com.sleepycat.je.dbi.DbType dbType;
        long currLsn, oldLNMemSize#114, $l10, $l14, $l15, $l16, $l21, $l22, $l24;
        int currLoggedSize, oldExpiration, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, expiration#148, $i12, $i13, $i17, $i18, $i19, $i20, $i23;
        boolean currEmbeddedLN, newEmbeddedLN, oldExpirationInHours, shouldCache, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, expirationInHours#151, $z10, $z11, $z12;
        com.sleepycat.je.txn.WriteLockInfo wli;
        com.sleepycat.je.log.LogItem logItem;
        java.lang.AssertionError $r0, $r3;
        com.sleepycat.je.dbi.DatabaseImpl $r1, $r2, $r8, $r18, $r26, $r33, $r34;
        byte $b0;
        com.sleepycat.je.tree.BIN $r4, $r5, $r6, $r9, $r10, $r12, $r15, $r21, $r22, $r23, $r30, $r35, $r37, $r38, $r40;
        com.sleepycat.je.cleaner.Cleaner $r7;
        com.sleepycat.je.CacheMode $r11, $r13, $r16;
        com.sleepycat.je.tree.LN ln#61, $r24;
        java.util.Comparator $r19;
        com.sleepycat.je.DuplicateDataException $r20;
        com.sleepycat.je.txn.Locker $r27;
        com.sleepycat.je.tree.Node $r36;
        java.util.logging.Level $r39;
        com.sleepycat.je.OperationResult $r41;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        key := @parameter0: byte[];

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        expInfo := @parameter2: com.sleepycat.je.dbi.ExpirationInfo;

        returnOldData := @parameter3: com.sleepycat.je.DatabaseEntry;

        returnNewData := @parameter4: com.sleepycat.je.DatabaseEntry;

        lockStanding := @parameter5: com.sleepycat.je.dbi.CursorImpl$LockStanding;

        repContext := @parameter6: com.sleepycat.je.log.ReplicationContext;

        $z0 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label01;

        $z1 = virtualinvoke lockStanding.<com.sleepycat.je.dbi.CursorImpl$LockStanding: boolean recordExists()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label01;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label01:
        $r1 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        envImpl = virtualinvoke $r1.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r2 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        dbType = virtualinvoke $r2.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.DbType getDbType()>();

        currLsn = staticinvoke <com.sleepycat.je.dbi.CursorImpl$LockStanding: long access$000(com.sleepycat.je.dbi.CursorImpl$LockStanding)>(lockStanding);

        $z2 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label02;

        $b0 = currLsn cmp -1L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 != 0 goto label02;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label02:
        $r4 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i1 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        currLoggedSize = virtualinvoke $r4.<com.sleepycat.je.tree.BIN: int getLastLoggedSize(int)>($i1);

        $r5 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i2 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        currKey = virtualinvoke $r5.<com.sleepycat.je.tree.BIN: byte[] getKey(int)>($i2);

        $r6 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i3 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        currEmbeddedLN = virtualinvoke $r6.<com.sleepycat.je.tree.BIN: boolean isEmbeddedLN(int)>($i3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(returnOldData);

        if returnOldData != null goto label04;

        $z3 = virtualinvoke data.<com.sleepycat.je.DatabaseEntry: boolean getPartial()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label04;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(currLoggedSize);

        if currLoggedSize != 0 goto label03;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(currEmbeddedLN);

        if currEmbeddedLN != 0 goto label03;

        $r7 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.cleaner.Cleaner getCleaner()>();

        $r8 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z4 = virtualinvoke $r7.<com.sleepycat.je.cleaner.Cleaner: boolean getFetchObsoleteSize(com.sleepycat.je.dbi.DatabaseImpl)>($r8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label04;

     label03:
        $z5 = virtualinvoke dbType.<com.sleepycat.je.dbi.DbType: boolean mayCreateUpdatedLN()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 != 0 goto label08;

     label04:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(currEmbeddedLN);

        if currEmbeddedLN == 0 goto label05;

        $r9 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i4 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        currData#53 = virtualinvoke $r9.<com.sleepycat.je.tree.BIN: byte[] getData(int)>($i4);

        $r10 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i5 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $r11 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.CacheMode cacheMode>;

        ln#61 = virtualinvoke $r10.<com.sleepycat.je.tree.BIN: com.sleepycat.je.tree.LN getLN(int,com.sleepycat.je.CacheMode)>($i5, $r11);

        goto label11;

     label05:
        $r12 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i6 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $r13 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.CacheMode cacheMode>;

        ln#61 = virtualinvoke $r12.<com.sleepycat.je.tree.BIN: com.sleepycat.je.tree.LN fetchLN(int,com.sleepycat.je.CacheMode)>($i6, $r13);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(ln#61);

        if ln#61 == null goto label06;

        $r14 = virtualinvoke ln#61.<com.sleepycat.je.tree.LN: byte[] getData()>();

        goto label07;

     label06:
        $r14 = null;

     label07:
        currData#53 = $r14;

        goto label11;

     label08:
        $r15 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i7 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $r16 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.CacheMode cacheMode>;

        ln#61 = virtualinvoke $r15.<com.sleepycat.je.tree.BIN: com.sleepycat.je.tree.LN getLN(int,com.sleepycat.je.CacheMode)>($i7, $r16);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(ln#61);

        if ln#61 == null goto label09;

        $r17 = virtualinvoke ln#61.<com.sleepycat.je.tree.LN: byte[] getData()>();

        goto label10;

     label09:
        $r17 = null;

     label10:
        currData#53 = $r17;

     label11:
        $z6 = virtualinvoke data.<com.sleepycat.je.DatabaseEntry: boolean getPartial()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label13;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(currData#53);

        if currData#53 != null goto label12;

        return null;

     label12:
        newData#89 = staticinvoke <com.sleepycat.je.tree.LN: byte[] resolvePartialEntry(com.sleepycat.je.DatabaseEntry,byte[])>(data, currData#53);

        goto label14;

     label13:
        newData#89 = staticinvoke <com.sleepycat.je.tree.LN: byte[] copyEntryData(com.sleepycat.je.DatabaseEntry)>(data);

     label14:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(key);

        if key == null goto label15;

        $r18 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r19 = virtualinvoke $r18.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Comparator getKeyComparator()>();

        $i8 = staticinvoke <com.sleepycat.je.tree.Key: int compareKeys(byte[],byte[],java.util.Comparator)>(currKey, key, $r19);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if $i8 == 0 goto label15;

        $r20 = new com.sleepycat.je.DuplicateDataException;

        specialinvoke $r20.<com.sleepycat.je.DuplicateDataException: void <init>(java.lang.String)>("Can\'t replace a duplicate with new data that is not equal to the existing data according to the duplicate  comparator.");

        throw $r20;

     label15:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(returnOldData);

        if returnOldData == null goto label16;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(currData#53);

        if currData#53 == null goto label16;

        virtualinvoke returnOldData.<com.sleepycat.je.DatabaseEntry: void setData(byte[])>(null);

        staticinvoke <com.sleepycat.je.tree.LN: void setEntry(com.sleepycat.je.DatabaseEntry,byte[])>(returnOldData, currData#53);

     label16:
        newEmbeddedLN = specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: boolean shouldEmbedLN(byte[])>(newData#89);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(ln#61);

        if ln#61 == null goto label17;

        oldLNMemSize#114 = virtualinvoke ln#61.<com.sleepycat.je.tree.LN: long getMemorySizeIncludedByParent()>();

        virtualinvoke ln#61.<com.sleepycat.je.tree.LN: void modify(byte[])>(newData#89);

        goto label18;

     label17:
        oldLNMemSize#114 = 0L;

        ln#61 = virtualinvoke dbType.<com.sleepycat.je.dbi.DbType: com.sleepycat.je.tree.LN createUpdatedLN(com.sleepycat.je.dbi.EnvironmentImpl,byte[])>(envImpl, newData#89);

     label18:
        $r21 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i9 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        oldExpiration = virtualinvoke $r21.<com.sleepycat.je.tree.BIN: int getExpiration(int)>($i9);

        $r22 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        oldExpirationInHours = virtualinvoke $r22.<com.sleepycat.je.tree.BIN: boolean isExpirationInHours()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(expInfo);

        if expInfo == null goto label19;

        $l10 = staticinvoke <com.sleepycat.je.dbi.TTL: long expirationToSystemTime(int,boolean)>(oldExpiration, oldExpirationInHours);

        virtualinvoke expInfo.<com.sleepycat.je.dbi.ExpirationInfo: void setOldExpirationTime(long)>($l10);

     label19:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(expInfo);

        if expInfo == null goto label22;

        $z7 = expInfo.<com.sleepycat.je.dbi.ExpirationInfo: boolean updateExpiration>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 == 0 goto label22;

        $i11 = expInfo.<com.sleepycat.je.dbi.ExpirationInfo: int expiration>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i11);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(oldExpiration);

        if $i11 != oldExpiration goto label20;

        $z8 = expInfo.<com.sleepycat.je.dbi.ExpirationInfo: boolean expirationInHours>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(oldExpirationInHours);

        if $z8 == oldExpirationInHours goto label21;

     label20:
        virtualinvoke expInfo.<com.sleepycat.je.dbi.ExpirationInfo: void setExpirationUpdated(boolean)>(1);

     label21:
        expiration#148 = expInfo.<com.sleepycat.je.dbi.ExpirationInfo: int expiration>;

        expirationInHours#151 = expInfo.<com.sleepycat.je.dbi.ExpirationInfo: boolean expirationInHours>;

        goto label23;

     label22:
        expiration#148 = oldExpiration;

        expirationInHours#151 = oldExpirationInHours;

     label23:
        $r23 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i12 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        wli = virtualinvoke lockStanding.<com.sleepycat.je.dbi.CursorImpl$LockStanding: com.sleepycat.je.txn.WriteLockInfo prepareForUpdate(com.sleepycat.je.tree.BIN,int)>($r23, $i12);

        $r24 = ln#61;

        $r26 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r27 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.txn.Locker locker>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(key);

        if key == null goto label24;

        $r29 = key;

        goto label25;

     label24:
        $r29 = currKey;

     label25:
        logItem = virtualinvoke $r24.<com.sleepycat.je.tree.LN: com.sleepycat.je.log.LogItem optionalLog(com.sleepycat.je.dbi.EnvironmentImpl,com.sleepycat.je.dbi.DatabaseImpl,com.sleepycat.je.txn.Locker,com.sleepycat.je.txn.WriteLockInfo,boolean,byte[],int,boolean,boolean,long,int,boolean,com.sleepycat.je.log.ReplicationContext)>(envImpl, $r26, $r27, wli, newEmbeddedLN, $r29, expiration#148, expirationInHours#151, currEmbeddedLN, currLsn, currLoggedSize, 0, repContext);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(returnNewData);

        if returnNewData == null goto label26;

        virtualinvoke returnNewData.<com.sleepycat.je.DatabaseEntry: void setData(byte[])>(null);

        virtualinvoke ln#61.<com.sleepycat.je.tree.LN: void setEntry(com.sleepycat.je.DatabaseEntry)>(returnNewData);

     label26:
        $r30 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i13 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $l14 = oldLNMemSize#114;

        $l15 = logItem.<com.sleepycat.je.log.LogItem: long lsn>;

        $l16 = virtualinvoke ln#61.<com.sleepycat.je.tree.LN: long getVLSNSequence()>();

        $i17 = logItem.<com.sleepycat.je.log.LogItem: int size>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(newEmbeddedLN);

        if newEmbeddedLN == 0 goto label27;

        $r32 = newData#89;

        goto label28;

     label27:
        $r32 = null;

     label28:
        virtualinvoke $r30.<com.sleepycat.je.tree.BIN: void updateRecord(int,long,long,long,int,byte[],byte[],int,boolean)>($i13, $l14, $l15, $l16, $i17, key, $r32, expiration#148, expirationInHours#151);

        $r33 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z10 = virtualinvoke $r33.<com.sleepycat.je.dbi.DatabaseImpl: boolean isDeferredWriteMode()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z10);

        if $z10 != 0 goto label29;

        $r34 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z11 = virtualinvoke $r34.<com.sleepycat.je.dbi.DatabaseImpl: boolean getSortedDuplicates()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z11);

        if $z11 != 0 goto label30;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(newEmbeddedLN);

        if newEmbeddedLN != 0 goto label30;

     label29:
        $z12 = 1;

        goto label31;

     label30:
        $z12 = 0;

     label31:
        shouldCache = $z12;

        $r35 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i18 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $r36 = virtualinvoke $r35.<com.sleepycat.je.tree.BIN: com.sleepycat.je.tree.Node getTarget(int)>($i18);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r36);

        if $r36 != null goto label32;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(shouldCache);

        if shouldCache == 0 goto label33;

        $r37 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i19 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        virtualinvoke $r37.<com.sleepycat.je.tree.BIN: void attachNode(int,com.sleepycat.je.tree.Node,byte[])>($i19, ln#61, null);

        goto label33;

     label32:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(shouldCache);

        if shouldCache != 0 goto label33;

        $r38 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i20 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        virtualinvoke $r38.<com.sleepycat.je.tree.BIN: void evictLN(int)>($i20);

     label33:
        $l21 = virtualinvoke ln#61.<com.sleepycat.je.tree.LN: long getVLSNSequence()>();

        $l22 = logItem.<com.sleepycat.je.log.LogItem: long lsn>;

        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void setCurrentVersion(long,long)>($l21, $l22);

        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void setStorageSize()>();

        $r39 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $r40 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i23 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $l24 = logItem.<com.sleepycat.je.log.LogItem: long lsn>;

        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void trace(java.util.logging.Level,java.lang.String,com.sleepycat.je.tree.BIN,int,long,long)>($r39, "Mod:", $r40, $i23, currLsn, $l24);

        $r41 = staticinvoke <com.sleepycat.je.DbInternal: com.sleepycat.je.OperationResult makeUpdateResult(int,boolean)>(expiration#148, expirationInHours#151);

        return $r41;
    }

    public void setNSecondaryWrites(int)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        int nWrites;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        nWrites := @parameter0: int;

        this.<com.sleepycat.je.dbi.CursorImpl: int nSecWrites> = nWrites;

        return;
    }

    public byte[] getCurrentKey()
    {
        com.sleepycat.je.dbi.CursorImpl this;
        byte[] $r0;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        $r0 = virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: byte[] getCurrentKey(boolean)>(0);

        return $r0;
    }

    public byte[] getCurrentKey(boolean)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        boolean isLatched, $z0, $z1;
        byte[] l2;
        java.lang.Throwable l3, $r5;
        com.sleepycat.je.tree.BIN $r0, $r2, $r4;
        java.lang.AssertionError $r1, $r3;
        int $i0, $i1, $i2, $i3;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        isLatched := @parameter0: boolean;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isLatched);

        if isLatched != 0 goto label1;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void latchBIN()>();

     label1:
        $z0 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label2;

        $r0 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label2;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label2:
        $z1 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label4;

        $i0 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 < 0 goto label3;

        $i1 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $r2 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i2 = virtualinvoke $r2.<com.sleepycat.je.tree.BIN: int getNEntries()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i1 < $i2 goto label4;

     label3:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label4:
        $r4 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i3 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        l2 = virtualinvoke $r4.<com.sleepycat.je.tree.BIN: byte[] getKey(int)>($i3);

     label5:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isLatched);

        if isLatched != 0 goto label6;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

     label6:
        return l2;

     label7:
        $r5 := @caughtexception;

        l3 = $r5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isLatched);

        if isLatched != 0 goto label8;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

     label8:
        throw l3;

        catch java.lang.Throwable from label1 to label5 with label7;
    }

    public com.sleepycat.je.dbi.CursorImpl cloneCursor(boolean)
    {
        com.sleepycat.je.dbi.CursorImpl this, ret#13;
        boolean samePosition, $z0, $z1, $z2;
        java.lang.Throwable l5, $r6;
        java.lang.AssertionError $r0;
        java.lang.Object $r1;
        com.sleepycat.je.txn.Locker $r2, $r3, $r4;
        java.lang.CloneNotSupportedException $r5;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        samePosition := @parameter0: boolean;

        $z0 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: boolean assertCursorState(boolean,boolean)>(0, 0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void latchBIN()>();

        $r1 = specialinvoke this.<java.lang.Object: java.lang.Object clone()>();

        ret#13 = (com.sleepycat.je.dbi.CursorImpl) $r1;

        $z2 = this.<com.sleepycat.je.dbi.CursorImpl: boolean retainNonTxnLocks>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label2;

        $r2 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.txn.Locker locker>;

        $r3 = virtualinvoke $r2.<com.sleepycat.je.txn.Locker: com.sleepycat.je.txn.Locker newNonTxnLocker()>();

        ret#13.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.txn.Locker locker> = $r3;

     label2:
        $r4 = ret#13.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.txn.Locker locker>;

        virtualinvoke $r4.<com.sleepycat.je.txn.Locker: void registerCursor(com.sleepycat.je.dbi.CursorImpl)>(ret#13);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(samePosition);

        if samePosition == 0 goto label3;

        virtualinvoke ret#13.<com.sleepycat.je.dbi.CursorImpl: void addCursor()>();

        goto label4;

     label3:
        specialinvoke ret#13.<com.sleepycat.je.dbi.CursorImpl: void clear()>();

     label4:
        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        goto label9;

     label5:
        $r5 := @caughtexception;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        return null;

     label6:
        $r6 := @caughtexception;

     label7:
        l5 = $r6;

     label8:
        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        throw l5;

     label9:
        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void criticalEviction()>();

        return ret#13;

        catch java.lang.CloneNotSupportedException from label1 to label4 with label5;
        catch java.lang.Throwable from label1 to label4 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public boolean checkForInsertion(com.sleepycat.je.dbi.GetMode, com.sleepycat.je.dbi.CursorImpl)
    {
        com.sleepycat.je.dbi.CursorImpl this, dupCursor, origCursor;
        com.sleepycat.je.dbi.GetMode getMode;
        boolean forward, ret#5, $z0, $z1;
        com.sleepycat.je.tree.BIN origBIN, $r0, $r1;
        java.lang.Throwable l8, $r2;
        int $i0, $i1, $i2, $i3, i#26, $i4, $i5, i#37, $i6;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        getMode := @parameter0: com.sleepycat.je.dbi.GetMode;

        dupCursor := @parameter1: com.sleepycat.je.dbi.CursorImpl;

        origCursor = this;

        forward = virtualinvoke getMode.<com.sleepycat.je.dbi.GetMode: boolean isForward()>();

        ret#5 = 0;

        $r0 = origCursor.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $r1 = dupCursor.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r0 == $r1 goto label13;

        virtualinvoke origCursor.<com.sleepycat.je.dbi.CursorImpl: void latchBIN()>();

        origBIN = origCursor.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        virtualinvoke origBIN.<com.sleepycat.je.tree.BIN: void mutateToFullBIN(boolean)>(0);

     label01:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(forward);

        if forward == 0 goto label05;

        $i0 = virtualinvoke origBIN.<com.sleepycat.je.tree.BIN: int getNEntries()>();

        $i1 = $i0 - 1;

        $i2 = virtualinvoke origCursor.<com.sleepycat.je.dbi.CursorImpl: int getIndex()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i1 <= $i2 goto label08;

        $i3 = virtualinvoke origCursor.<com.sleepycat.je.dbi.CursorImpl: int getIndex()>();

        i#26 = $i3 + 1;

     label02:
        $i4 = virtualinvoke origBIN.<com.sleepycat.je.tree.BIN: int getNEntries()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#26);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if i#26 >= $i4 goto label04;

        $z0 = virtualinvoke origBIN.<com.sleepycat.je.tree.BIN: boolean isDefunct(int)>(i#26);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label03;

        ret#5 = 1;

        goto label04;

     label03:
        i#26 = i#26 + 1;

        goto label02;

     label04:
        goto label08;

     label05:
        $i5 = virtualinvoke origCursor.<com.sleepycat.je.dbi.CursorImpl: int getIndex()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i5 <= 0 goto label08;

        i#37 = 0;

     label06:
        $i6 = virtualinvoke origCursor.<com.sleepycat.je.dbi.CursorImpl: int getIndex()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#37);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if i#37 >= $i6 goto label08;

        $z1 = virtualinvoke origBIN.<com.sleepycat.je.tree.BIN: boolean isDefunct(int)>(i#37);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label07;

        ret#5 = 1;

        goto label08;

     label07:
        i#37 = i#37 + 1;

        goto label06;

     label08:
        virtualinvoke origCursor.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        goto label12;

     label09:
        $r2 := @caughtexception;

     label10:
        l8 = $r2;

     label11:
        virtualinvoke origCursor.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        throw l8;

     label12:
        return ret#5;

     label13:
        return 0;

        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public int getIndex()
    {
        com.sleepycat.je.dbi.CursorImpl this;
        int $i0;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        $i0 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        return $i0;
    }

    public void beforeNonStickyOp()
    {
        com.sleepycat.je.dbi.CursorImpl this;
        java.lang.Throwable l1, $r4;
        com.sleepycat.je.CacheMode $r0, $r1, $r2, $r3;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        $r0 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.CacheMode cacheMode>;

        $r1 = <com.sleepycat.je.CacheMode: com.sleepycat.je.CacheMode DEFAULT>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r0 == $r1 goto label4;

        $r2 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.CacheMode cacheMode>;

        $r3 = <com.sleepycat.je.CacheMode: com.sleepycat.je.CacheMode KEEP_HOT>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r3);

        if $r2 == $r3 goto label4;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void latchBIN()>();

     label1:
        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void performCacheModeLNEviction()>();

     label2:
        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        goto label4;

     label3:
        $r4 := @caughtexception;

        l1 = $r4;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        throw l1;

     label4:
        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseNonTxnLocks()>();

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void criticalEviction()>();

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean isNotInitialized()
    {
        com.sleepycat.je.dbi.CursorImpl this;
        byte $b0;
        boolean $z0;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        $b0 = this.<com.sleepycat.je.dbi.CursorImpl: byte status>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setCacheMode(com.sleepycat.je.CacheMode)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.CacheMode mode;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        mode := @parameter0: com.sleepycat.je.CacheMode;

        this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.CacheMode cacheMode> = mode;

        return;
    }

    public void afterNonStickyOp()
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.tree.BIN $r0, $r1;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: void performPriorBINEviction()>();

        $r0 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN priorBIN>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label1;

        $r1 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN priorBIN> = $r1;

     label1:
        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void criticalEviction()>();

        return;
    }

    public void clearClosingLocker()
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.txn.Locker $r0;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        $r0 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.txn.Locker locker>;

        virtualinvoke $r0.<com.sleepycat.je.txn.Locker: void setClosingLocker(com.sleepycat.je.txn.Locker)>(null);

        return;
    }

    public com.sleepycat.je.OperationResult insertOrUpdateRecord(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.tree.LN, com.sleepycat.je.dbi.ExpirationInfo, com.sleepycat.je.dbi.PutMode, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.log.ReplicationContext)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.DatabaseEntry key, data, returnOldData, returnNewData;
        com.sleepycat.je.tree.LN ln;
        com.sleepycat.je.dbi.ExpirationInfo expInfo;
        com.sleepycat.je.dbi.PutMode putMode, $r5, $r6, $r18;
        com.sleepycat.je.log.ReplicationContext repContext;
        byte[] keyCopy;
        com.sleepycat.je.utilint.Pair insertResult;
        com.sleepycat.je.OperationResult result, l14, l13#54;
        java.lang.Throwable l15, $r35;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, success#34, inserted#36, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        java.lang.AssertionError $r0, $r1, $r2, $r3, $r4;
        java.lang.String $r7;
        com.sleepycat.je.EnvironmentFailureException $r8;
        java.lang.Object $r9, $r10, $r26;
        com.sleepycat.je.dbi.DatabaseImpl $r11, $r14, $r16, $r19, $r22, $r24, $r28, $r31, $r33, $r36, $r39, $r41;
        com.sleepycat.je.tree.BIN $r12, $r13, $r20, $r21, $r29, $r30, $r37, $r38;
        com.sleepycat.je.dbi.EnvironmentImpl $r15, $r17, $r23, $r25, $r32, $r34, $r40, $r42;
        com.sleepycat.je.dbi.CursorImpl$LockStanding $r27;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        key := @parameter0: com.sleepycat.je.DatabaseEntry;

        data := @parameter1: com.sleepycat.je.DatabaseEntry;

        ln := @parameter2: com.sleepycat.je.tree.LN;

        expInfo := @parameter3: com.sleepycat.je.dbi.ExpirationInfo;

        putMode := @parameter4: com.sleepycat.je.dbi.PutMode;

        returnOldData := @parameter5: com.sleepycat.je.DatabaseEntry;

        returnNewData := @parameter6: com.sleepycat.je.DatabaseEntry;

        repContext := @parameter7: com.sleepycat.je.log.ReplicationContext;

        $z0 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label01;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(key);

        if key != null goto label01;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label01:
        $z1 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label02;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(data);

        if data != null goto label02;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label02:
        $z2 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label03;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(ln);

        if ln != null goto label03;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label03:
        $z3 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label04;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(putMode);

        if putMode != null goto label04;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label04:
        $z4 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label05;

        $z5 = specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: boolean assertCursorState(boolean,boolean)>(0, 1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 != 0 goto label05;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label05:
        $z6 = <com.sleepycat.je.latch.LatchSupport: boolean TRACK_LATCHES>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label06;

        staticinvoke <com.sleepycat.je.latch.LatchSupport: void expectBtreeLatchesHeld(int)>(0);

     label06:
        $r5 = <com.sleepycat.je.dbi.PutMode: com.sleepycat.je.dbi.PutMode OVERWRITE>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(putMode);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r5);

        if putMode == $r5 goto label07;

        $r6 = <com.sleepycat.je.dbi.PutMode: com.sleepycat.je.dbi.PutMode NO_OVERWRITE>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(putMode);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r6);

        if putMode == $r6 goto label07;

        $r7 = virtualinvoke putMode.<com.sleepycat.je.dbi.PutMode: java.lang.String toString()>();

        $r8 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>($r7);

        throw $r8;

     label07:
        success#34 = 0;

        inserted#36 = 0;

        keyCopy = staticinvoke <com.sleepycat.je.tree.Key: byte[] makeKey(com.sleepycat.je.DatabaseEntry)>(key);

     label08:
        insertResult = specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.utilint.Pair insertRecordInternal(byte[],com.sleepycat.je.tree.LN,com.sleepycat.je.dbi.ExpirationInfo,boolean,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.log.ReplicationContext)>(keyCopy, ln, expInfo, 0, returnNewData, repContext);

        $r9 = virtualinvoke insertResult.<com.sleepycat.je.utilint.Pair: java.lang.Object second()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r9);

        if $r9 == null goto label12;

        inserted#36 = 1;

        success#34 = 1;

        $r10 = virtualinvoke insertResult.<com.sleepycat.je.utilint.Pair: java.lang.Object second()>();

        l13#54 = (com.sleepycat.je.OperationResult) $r10;

     label09:
        if 1 == 0 goto label11;

        $r11 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z7 = virtualinvoke $r11.<com.sleepycat.je.dbi.DatabaseImpl: boolean isInternalDb()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 != 0 goto label11;

        $r12 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r12);

        if $r12 == null goto label11;

        $r13 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $z8 = virtualinvoke $r13.<com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 == 0 goto label11;

        if 1 == 0 goto label10;

        $r14 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r15 = virtualinvoke $r14.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r15.<com.sleepycat.je.dbi.EnvironmentImpl: void incBinDeltaInserts()>();

        goto label11;

     label10:
        $r16 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r17 = virtualinvoke $r16.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r17.<com.sleepycat.je.dbi.EnvironmentImpl: void incBinDeltaUpdates()>();

     label11:
        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        return l13#54;

     label12:
        $r18 = <com.sleepycat.je.dbi.PutMode: com.sleepycat.je.dbi.PutMode NO_OVERWRITE>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(putMode);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r18);

        if putMode != $r18 goto label16;

        success#34 = 1;

     label13:
        if 1 == 0 goto label15;

        $r19 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z9 = virtualinvoke $r19.<com.sleepycat.je.dbi.DatabaseImpl: boolean isInternalDb()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 != 0 goto label15;

        $r20 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r20);

        if $r20 == null goto label15;

        $r21 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $z10 = virtualinvoke $r21.<com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z10);

        if $z10 == 0 goto label15;

        if 0 == 0 goto label14;

        $r22 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r23 = virtualinvoke $r22.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r23.<com.sleepycat.je.dbi.EnvironmentImpl: void incBinDeltaInserts()>();

        goto label15;

     label14:
        $r24 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r25 = virtualinvoke $r24.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r25.<com.sleepycat.je.dbi.EnvironmentImpl: void incBinDeltaUpdates()>();

     label15:
        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        return null;

     label16:
        $r26 = virtualinvoke insertResult.<com.sleepycat.je.utilint.Pair: java.lang.Object first()>();

        $r27 = (com.sleepycat.je.dbi.CursorImpl$LockStanding) $r26;

        result = specialinvoke this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.OperationResult updateRecordInternal(byte[],com.sleepycat.je.DatabaseEntry,com.sleepycat.je.dbi.ExpirationInfo,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.dbi.CursorImpl$LockStanding,com.sleepycat.je.log.ReplicationContext)>(keyCopy, data, expInfo, returnOldData, returnNewData, $r27, repContext);

        success#34 = 1;

        l14 = result;

     label17:
        if 1 == 0 goto label19;

        $r28 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z11 = virtualinvoke $r28.<com.sleepycat.je.dbi.DatabaseImpl: boolean isInternalDb()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z11);

        if $z11 != 0 goto label19;

        $r29 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r29);

        if $r29 == null goto label19;

        $r30 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $z12 = virtualinvoke $r30.<com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z12);

        if $z12 == 0 goto label19;

        if 0 == 0 goto label18;

        $r31 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r32 = virtualinvoke $r31.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r32.<com.sleepycat.je.dbi.EnvironmentImpl: void incBinDeltaInserts()>();

        goto label19;

     label18:
        $r33 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r34 = virtualinvoke $r33.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r34.<com.sleepycat.je.dbi.EnvironmentImpl: void incBinDeltaUpdates()>();

     label19:
        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        return l14;

     label20:
        $r35 := @caughtexception;

     label21:
        l15 = $r35;

     label22:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(success#34);

        if success#34 == 0 goto label24;

        $r36 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z13 = virtualinvoke $r36.<com.sleepycat.je.dbi.DatabaseImpl: boolean isInternalDb()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z13);

        if $z13 != 0 goto label24;

        $r37 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r37);

        if $r37 == null goto label24;

        $r38 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $z14 = virtualinvoke $r38.<com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z14);

        if $z14 == 0 goto label24;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(inserted#36);

        if inserted#36 == 0 goto label23;

        $r39 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r40 = virtualinvoke $r39.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r40.<com.sleepycat.je.dbi.EnvironmentImpl: void incBinDeltaInserts()>();

        goto label24;

     label23:
        $r41 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r42 = virtualinvoke $r41.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r42.<com.sleepycat.je.dbi.EnvironmentImpl: void incBinDeltaUpdates()>();

     label24:
        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        throw l15;

        catch java.lang.Throwable from label08 to label09 with label20;
        catch java.lang.Throwable from label12 to label13 with label20;
        catch java.lang.Throwable from label16 to label17 with label20;
        catch java.lang.Throwable from label21 to label22 with label20;
    }

    public com.sleepycat.je.tree.BIN getBIN()
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.tree.BIN $r0;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        $r0 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        return $r0;
    }

    public long getCurrentNodeId()
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.tree.BIN b;
        long $l0;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        b = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b);

        if b != null goto label1;

        $l0 = -1L;

        goto label2;

     label1:
        $l0 = virtualinvoke b.<com.sleepycat.je.tree.BIN: long getNodeId()>();

     label2:
        return $l0;
    }

    public void checkEnv()
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.dbi.DatabaseImpl $r0;
        com.sleepycat.je.dbi.EnvironmentImpl $r1;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        $r0 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r1 = virtualinvoke $r0.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r1.<com.sleepycat.je.dbi.EnvironmentImpl: void checkIfInvalid()>();

        return;
    }

    public boolean isClosed()
    {
        com.sleepycat.je.dbi.CursorImpl this;
        byte $b0;
        boolean $z0;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        $b0 = this.<com.sleepycat.je.dbi.CursorImpl: byte status>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 != 3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public com.sleepycat.je.OperationResult lockAndGetCurrent(com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.txn.LockType)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.DatabaseEntry foundKey, foundData;
        com.sleepycat.je.txn.LockType lockType;
        com.sleepycat.je.OperationResult $r0;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        foundKey := @parameter0: com.sleepycat.je.DatabaseEntry;

        foundData := @parameter1: com.sleepycat.je.DatabaseEntry;

        lockType := @parameter2: com.sleepycat.je.txn.LockType;

        $r0 = virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.OperationResult lockAndGetCurrent(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.txn.LockType,boolean,boolean,boolean)>(foundKey, foundData, lockType, 0, 0, 1);

        return $r0;
    }

    public void setClosingLocker(com.sleepycat.je.dbi.CursorImpl)
    {
        com.sleepycat.je.dbi.CursorImpl this, closingCursor;
        boolean $z0;
        com.sleepycat.je.txn.Locker $r0, $r1, $r2, $r3;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        closingCursor := @parameter0: com.sleepycat.je.dbi.CursorImpl;

        $z0 = this.<com.sleepycat.je.dbi.CursorImpl: boolean retainNonTxnLocks>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r0 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.txn.Locker locker>;

        $r1 = closingCursor.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.txn.Locker locker>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r0 == $r1 goto label1;

        $r2 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.txn.Locker locker>;

        $r3 = closingCursor.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.txn.Locker locker>;

        virtualinvoke $r2.<com.sleepycat.je.txn.Locker: void setClosingLocker(com.sleepycat.je.txn.Locker)>($r3);

     label1:
        return;
    }

    public boolean hasDuplicates()
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.dbi.DatabaseImpl $r0;
        boolean $z0;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        $r0 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z0 = virtualinvoke $r0.<com.sleepycat.je.dbi.DatabaseImpl: boolean getSortedDuplicates()>();

        return $z0;
    }

    public void setPriInfo(com.sleepycat.je.dbi.CursorImpl)
    {
        com.sleepycat.je.dbi.CursorImpl this, sourceCursor;
        com.sleepycat.je.dbi.RecordVersion $r0;
        int $i0;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        sourceCursor := @parameter0: com.sleepycat.je.dbi.CursorImpl;

        $r0 = sourceCursor.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.RecordVersion currentRecordVersion>;

        this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.dbi.RecordVersion currentRecordVersion> = $r0;

        $i0 = sourceCursor.<com.sleepycat.je.dbi.CursorImpl: int storageSize>;

        this.<com.sleepycat.je.dbi.CursorImpl: int priStorageSize> = $i0;

        return;
    }

    public long getExpirationTime()
    {
        com.sleepycat.je.dbi.CursorImpl this;
        long l1;
        java.lang.Throwable l3, $r2;
        com.sleepycat.je.tree.BIN $r0, $r1;
        int $i0, $i1;
        boolean $z0;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void latchBIN()>();

     label1:
        $r0 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i0 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        $i1 = virtualinvoke $r0.<com.sleepycat.je.tree.BIN: int getExpiration(int)>($i0);

        $r1 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $z0 = virtualinvoke $r1.<com.sleepycat.je.tree.BIN: boolean isExpirationInHours()>();

        l1 = staticinvoke <com.sleepycat.je.dbi.TTL: long expirationToSystemTime(int,boolean)>($i1, $z0);

     label2:
        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        return l1;

     label3:
        $r2 := @caughtexception;

        l3 = $r2;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        throw l3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean isProbablyExpired()
    {
        com.sleepycat.je.dbi.CursorImpl this;
        boolean l1;
        java.lang.Throwable l2, $r1;
        com.sleepycat.je.tree.BIN $r0;
        int $i0;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void latchBIN()>();

     label1:
        $r0 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        $i0 = this.<com.sleepycat.je.dbi.CursorImpl: int index>;

        l1 = virtualinvoke $r0.<com.sleepycat.je.tree.BIN: boolean isProbablyExpired(int)>($i0);

     label2:
        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        return l1;

     label3:
        $r1 := @caughtexception;

        l2 = $r1;

        virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        throw l2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void assertBIN(com.sleepycat.je.tree.BIN)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.tree.BIN bin, $r0;
        boolean $z0;
        java.lang.AssertionError $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r7;
        long $l0;
        java.lang.String $r6, $r8;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        bin := @parameter0: com.sleepycat.je.tree.BIN;

        $z0 = <com.sleepycat.je.dbi.CursorImpl: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r0 = this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(bin);

        if $r0 == bin goto label1;

        $r1 = new java.lang.AssertionError;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("nodeId=");

        $l0 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: long getNodeId()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cursor=");

        $r6 = virtualinvoke this.<com.sleepycat.je.dbi.CursorImpl: java.lang.String dumpToString(boolean)>(1);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>($r8);

        throw $r1;

     label1:
        return;
    }

    public void setBIN(com.sleepycat.je.tree.BIN)
    {
        com.sleepycat.je.dbi.CursorImpl this;
        com.sleepycat.je.tree.BIN newBin;

        this := @this: com.sleepycat.je.dbi.CursorImpl;

        newBin := @parameter0: com.sleepycat.je.tree.BIN;

        this.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.BIN bin> = newBin;

        return;
    }


