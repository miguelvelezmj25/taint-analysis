    public void setConsequent(double)
    {
        weka.classifiers.rules.JRip$RipperRule this;
        double cl;

        this := @this: weka.classifiers.rules.JRip$RipperRule;

        cl := @parameter0: double;

        this.<weka.classifiers.rules.JRip$RipperRule: double m_Consequent> = cl;

        return;
    }

    public void <init>(weka.classifiers.rules.JRip)
    {
        weka.classifiers.rules.JRip$RipperRule this;
        weka.classifiers.rules.JRip this$0;
        java.util.ArrayList $r0;

        this := @this: weka.classifiers.rules.JRip$RipperRule;

        this$0 := @parameter0: weka.classifiers.rules.JRip;

        this.<weka.classifiers.rules.JRip$RipperRule: weka.classifiers.rules.JRip this$0> = this$0;

        specialinvoke this.<weka.classifiers.rules.Rule: void <init>()>();

        this.<weka.classifiers.rules.JRip$RipperRule: double m_Consequent> = -1.0;

        this.<weka.classifiers.rules.JRip$RipperRule: java.util.ArrayList m_Antds> = null;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        this.<weka.classifiers.rules.JRip$RipperRule: java.util.ArrayList m_Antds> = $r0;

        return;
    }

    public void grow(weka.core.Instances) throws java.lang.Exception
    {
        weka.classifiers.rules.JRip$RipperRule this;
        weka.core.Instances data, coveredData, growData#9, coverData#73;
        double sumOfWeights, defAccu, infoGain, $d0, $d1, $d2, defAcRt#25, $d3, maxInfoGain#69, $d4, $d5, $d6, $d7, $d8, $d9;
        boolean[] used;
        weka.classifiers.rules.JRip$Antd antdj, oneAntd#71, antd#102;
        java.util.Enumeration enumAttr;
        weka.core.Attribute att, $r4, $r5, $r35, $r36;
        byte $b0, $b7;
        java.lang.Exception $r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        int $i1, k#30, $i2, numUnused#39, j#41, $i3, $i4, $i5, $i6, $i8;
        java.util.ArrayList $r1, $r2, $r37;
        java.lang.Object $r3, $r6;
        weka.classifiers.rules.JRip $r7, $r14, $r16, $r17, $r34;
        java.io.PrintStream $r8, $r18;
        java.lang.StringBuilder $r9, $r10, $r11, $r19, $r20, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32;
        java.lang.String $r12, $r21, $r33;
        weka.classifiers.rules.JRip$NumericAntd $r13;
        weka.classifiers.rules.JRip$NominalAntd $r15;

        this := @this: weka.classifiers.rules.JRip$RipperRule;

        data := @parameter0: weka.core.Instances;

        $d0 = this.<weka.classifiers.rules.JRip$RipperRule: double m_Consequent>;

        $b0 = $d0 cmpl -1.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 != 0 goto label01;

        $r0 = new java.lang.Exception;

        specialinvoke $r0.<java.lang.Exception: void <init>(java.lang.String)>(" Consequent not set yet.");

        throw $r0;

     label01:
        growData#9 = data;

        sumOfWeights = virtualinvoke growData#9.<weka.core.Instances: double sumOfWeights()>();

        $z0 = staticinvoke <weka.core.Utils: boolean gr(double,double)>(sumOfWeights, 0.0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label02;

        return;

     label02:
        defAccu = specialinvoke this.<weka.classifiers.rules.JRip$RipperRule: double computeDefAccu(weka.core.Instances)>(growData#9);

        $d1 = defAccu + 1.0;

        $d2 = sumOfWeights + 1.0;

        defAcRt#25 = $d1 / $d2;

        $i1 = virtualinvoke growData#9.<weka.core.Instances: int numAttributes()>();

        used = newarray (boolean)[$i1];

        k#30 = 0;

     label03:
        $i2 = lengthof used;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(k#30);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if k#30 >= $i2 goto label04;

        used[k#30] = 0;

        k#30 = k#30 + 1;

        goto label03;

     label04:
        numUnused#39 = lengthof used;

        j#41 = 0;

     label05:
        $r1 = this.<weka.classifiers.rules.JRip$RipperRule: java.util.ArrayList m_Antds>;

        $i3 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#41);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if j#41 >= $i3 goto label07;

        $r2 = this.<weka.classifiers.rules.JRip$RipperRule: java.util.ArrayList m_Antds>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(j#41);

        antdj = (weka.classifiers.rules.JRip$Antd) $r3;

        $r4 = virtualinvoke antdj.<weka.classifiers.rules.JRip$Antd: weka.core.Attribute getAttr()>();

        $z1 = virtualinvoke $r4.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label06;

        $r5 = virtualinvoke antdj.<weka.classifiers.rules.JRip$Antd: weka.core.Attribute getAttr()>();

        $i4 = virtualinvoke $r5.<weka.core.Attribute: int index()>();

        used[$i4] = 1;

        numUnused#39 = numUnused#39 + -1;

     label06:
        j#41 = j#41 + 1;

        goto label05;

     label07:
        $i5 = virtualinvoke growData#9.<weka.core.Instances: int numInstances()>();

        $d3 = (double) $i5;

        $z2 = staticinvoke <weka.core.Utils: boolean gr(double,double)>($d3, 0.0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label18;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(numUnused#39);

        if numUnused#39 <= 0 goto label18;

        $z3 = staticinvoke <weka.core.Utils: boolean sm(double,double)>(defAcRt#25, 1.0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label18;

        maxInfoGain#69 = 0.0;

        oneAntd#71 = null;

        coverData#73 = null;

        enumAttr = virtualinvoke growData#9.<weka.core.Instances: java.util.Enumeration enumerateAttributes()>();

     label08:
        $z4 = interfaceinvoke enumAttr.<java.util.Enumeration: boolean hasMoreElements()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label14;

        $r6 = interfaceinvoke enumAttr.<java.util.Enumeration: java.lang.Object nextElement()>();

        att = (weka.core.Attribute) $r6;

        $r7 = this.<weka.classifiers.rules.JRip$RipperRule: weka.classifiers.rules.JRip this$0>;

        $z5 = staticinvoke <weka.classifiers.rules.JRip: boolean access$000(weka.classifiers.rules.JRip)>($r7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label09;

        $r8 = <java.lang.System: java.io.PrintStream err>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nOne condition: size = ");

        $d4 = virtualinvoke growData#9.<weka.core.Instances: double sumOfWeights()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r12);

     label09:
        $z6 = virtualinvoke att.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label10;

        $r13 = new weka.classifiers.rules.JRip$NumericAntd;

        $r14 = this.<weka.classifiers.rules.JRip$RipperRule: weka.classifiers.rules.JRip this$0>;

        specialinvoke $r13.<weka.classifiers.rules.JRip$NumericAntd: void <init>(weka.classifiers.rules.JRip,weka.core.Attribute)>($r14, att);

        antd#102 = $r13;

        goto label11;

     label10:
        $r15 = new weka.classifiers.rules.JRip$NominalAntd;

        $r16 = this.<weka.classifiers.rules.JRip$RipperRule: weka.classifiers.rules.JRip this$0>;

        specialinvoke $r15.<weka.classifiers.rules.JRip$NominalAntd: void <init>(weka.classifiers.rules.JRip,weka.core.Attribute)>($r16, att);

        antd#102 = $r15;

     label11:
        $i6 = virtualinvoke att.<weka.core.Attribute: int index()>();

        $z7 = used[$i6];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 != 0 goto label13;

        coveredData = specialinvoke this.<weka.classifiers.rules.JRip$RipperRule: weka.core.Instances computeInfoGain(weka.core.Instances,double,weka.classifiers.rules.JRip$Antd)>(growData#9, defAcRt#25, antd#102);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(coveredData);

        if coveredData == null goto label13;

        infoGain = virtualinvoke antd#102.<weka.classifiers.rules.JRip$Antd: double getMaxInfoGain()>();

        $r17 = this.<weka.classifiers.rules.JRip$RipperRule: weka.classifiers.rules.JRip this$0>;

        $z8 = staticinvoke <weka.classifiers.rules.JRip: boolean access$000(weka.classifiers.rules.JRip)>($r17);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 == 0 goto label12;

        $r18 = <java.lang.System: java.io.PrintStream err>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test of \'");

        $r21 = virtualinvoke antd#102.<weka.classifiers.rules.JRip$Antd: java.lang.String toString()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': infoGain = ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(infoGain);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" | Accuracy = ");

        $d5 = virtualinvoke antd#102.<weka.classifiers.rules.JRip$Antd: double getAccuRate()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d5);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $d6 = virtualinvoke antd#102.<weka.classifiers.rules.JRip$Antd: double getAccu()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d6);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $d7 = virtualinvoke antd#102.<weka.classifiers.rules.JRip$Antd: double getCover()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d7);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" def. accuracy: ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(defAcRt#25);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>($r33);

     label12:
        $b7 = infoGain cmpl maxInfoGain#69;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b7);

        if $b7 <= 0 goto label13;

        oneAntd#71 = antd#102;

        coverData#73 = coveredData;

        maxInfoGain#69 = infoGain;

     label13:
        goto label08;

     label14:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(oneAntd#71);

        if oneAntd#71 != null goto label15;

        goto label18;

     label15:
        $d8 = virtualinvoke oneAntd#71.<weka.classifiers.rules.JRip$Antd: double getAccu()>();

        $r34 = this.<weka.classifiers.rules.JRip$RipperRule: weka.classifiers.rules.JRip this$0>;

        $d9 = staticinvoke <weka.classifiers.rules.JRip: double access$100(weka.classifiers.rules.JRip)>($r34);

        $z9 = staticinvoke <weka.core.Utils: boolean sm(double,double)>($d8, $d9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 == 0 goto label16;

        goto label18;

     label16:
        $r35 = virtualinvoke oneAntd#71.<weka.classifiers.rules.JRip$Antd: weka.core.Attribute getAttr()>();

        $z10 = virtualinvoke $r35.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z10);

        if $z10 != 0 goto label17;

        $r36 = virtualinvoke oneAntd#71.<weka.classifiers.rules.JRip$Antd: weka.core.Attribute getAttr()>();

        $i8 = virtualinvoke $r36.<weka.core.Attribute: int index()>();

        used[$i8] = 1;

        numUnused#39 = numUnused#39 + -1;

     label17:
        $r37 = this.<weka.classifiers.rules.JRip$RipperRule: java.util.ArrayList m_Antds>;

        virtualinvoke $r37.<java.util.ArrayList: boolean add(java.lang.Object)>(oneAntd#71);

        growData#9 = coverData#73;

        defAcRt#25 = virtualinvoke oneAntd#71.<weka.classifiers.rules.JRip$Antd: double getAccuRate()>();

        goto label07;

     label18:
        return;
    }

    public void prune(weka.core.Instances, boolean)
    {
        weka.classifiers.rules.JRip$RipperRule this;
        weka.core.Instances pruneData, newData, data#2, $r12;
        boolean useWhole, $z0, $z1, $z2, $z4, $z5;
        double total, defAccu, denom, tn#56, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, maxValue#153, $d24, $d25, $d26, $d27;
        int size, w#39, x#58, y#72, $i0, $i2, $i3, $i5, $i6, maxIndex#155, i#157, $i8, z#207;
        double[] worthRt, coverage, worthValue;
        weka.classifiers.rules.JRip$Antd antd;
        weka.core.Instance ins;
        weka.classifiers.rules.JRip $r0, $r16;
        java.io.PrintStream $r1, $r17;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r7, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27;
        java.lang.String $r8, $r28;
        java.util.ArrayList $r9, $r10, $r29;
        java.lang.Object $r11;
        byte $b9;

        this := @this: weka.classifiers.rules.JRip$RipperRule;

        pruneData := @parameter0: weka.core.Instances;

        useWhole := @parameter1: boolean;

        data#2 = pruneData;

        total = virtualinvoke data#2.<weka.core.Instances: double sumOfWeights()>();

        $z0 = staticinvoke <weka.core.Utils: boolean gr(double,double)>(total, 0.0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label01;

        return;

     label01:
        defAccu = specialinvoke this.<weka.classifiers.rules.JRip$RipperRule: double computeDefAccu(weka.core.Instances)>(data#2);

        $r0 = this.<weka.classifiers.rules.JRip$RipperRule: weka.classifiers.rules.JRip this$0>;

        $z1 = staticinvoke <weka.classifiers.rules.JRip: boolean access$000(weka.classifiers.rules.JRip)>($r0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label02;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Pruning with ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(defAccu);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" positive data out of ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(total);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" instances");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r8);

     label02:
        $r9 = this.<weka.classifiers.rules.JRip$RipperRule: java.util.ArrayList m_Antds>;

        size = virtualinvoke $r9.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(size);

        if size != 0 goto label03;

        return;

     label03:
        worthRt = newarray (double)[size];

        coverage = newarray (double)[size];

        worthValue = newarray (double)[size];

        w#39 = 0;

     label04:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(w#39);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(size);

        if w#39 >= size goto label05;

        worthValue[w#39] = 0.0;

        coverage[w#39] = 0.0;

        worthRt[w#39] = 0.0;

        w#39 = w#39 + 1;

        goto label04;

     label05:
        tn#56 = 0.0;

        x#58 = 0;

     label06:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(x#58);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(size);

        if x#58 >= size goto label13;

        $r10 = this.<weka.classifiers.rules.JRip$RipperRule: java.util.ArrayList m_Antds>;

        $r11 = virtualinvoke $r10.<java.util.ArrayList: java.lang.Object get(int)>(x#58);

        antd = (weka.classifiers.rules.JRip$Antd) $r11;

        newData = data#2;

        $r12 = new weka.core.Instances;

        specialinvoke $r12.<weka.core.Instances: void <init>(weka.core.Instances,int)>(newData, 0);

        data#2 = $r12;

        y#72 = 0;

     label07:
        $i0 = virtualinvoke newData.<weka.core.Instances: int numInstances()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(y#72);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if y#72 >= $i0 goto label10;

        ins = virtualinvoke newData.<weka.core.Instances: weka.core.Instance instance(int)>(y#72);

        $z2 = virtualinvoke antd.<weka.classifiers.rules.JRip$Antd: boolean covers(weka.core.Instance)>(ins);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label08;

        $d2 = coverage[x#58];

        $d3 = interfaceinvoke ins.<weka.core.Instance: double weight()>();

        $d4 = $d2 + $d3;

        coverage[x#58] = $d4;

        virtualinvoke data#2.<weka.core.Instances: boolean add(weka.core.Instance)>(ins);

        $d5 = interfaceinvoke ins.<weka.core.Instance: double classValue()>();

        $i2 = (int) $d5;

        $d6 = this.<weka.classifiers.rules.JRip$RipperRule: double m_Consequent>;

        $i3 = (int) $d6;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i2 != $i3 goto label09;

        $d7 = worthValue[x#58];

        $d8 = interfaceinvoke ins.<weka.core.Instance: double weight()>();

        $d9 = $d7 + $d8;

        worthValue[x#58] = $d9;

        goto label09;

     label08:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(useWhole);

        if useWhole == 0 goto label09;

        $d10 = interfaceinvoke ins.<weka.core.Instance: double classValue()>();

        $i5 = (int) $d10;

        $d11 = this.<weka.classifiers.rules.JRip$RipperRule: double m_Consequent>;

        $i6 = (int) $d11;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if $i5 == $i6 goto label09;

        $d12 = interfaceinvoke ins.<weka.core.Instance: double weight()>();

        tn#56 = tn#56 + $d12;

     label09:
        y#72 = y#72 + 1;

        goto label07;

     label10:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(useWhole);

        if useWhole == 0 goto label11;

        $d13 = worthValue[x#58];

        $d14 = $d13 + tn#56;

        worthValue[x#58] = $d14;

        $d15 = worthValue[x#58];

        $d16 = $d15 / total;

        worthRt[x#58] = $d16;

        goto label12;

     label11:
        $d17 = worthValue[x#58];

        $d18 = $d17 + 1.0;

        $d19 = coverage[x#58];

        $d20 = $d19 + 2.0;

        $d21 = $d18 / $d20;

        worthRt[x#58] = $d21;

     label12:
        x#58 = x#58 + 1;

        goto label06;

     label13:
        $d22 = defAccu + 1.0;

        $d23 = total + 2.0;

        maxValue#153 = $d22 / $d23;

        maxIndex#155 = -1;

        i#157 = 0;

     label14:
        $i8 = lengthof worthValue;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#157);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if i#157 >= $i8 goto label21;

        $r16 = this.<weka.classifiers.rules.JRip$RipperRule: weka.classifiers.rules.JRip this$0>;

        $z4 = staticinvoke <weka.classifiers.rules.JRip: boolean access$000(weka.classifiers.rules.JRip)>($r16);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label19;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(useWhole);

        if useWhole == 0 goto label15;

        $d24 = total;

        goto label16;

     label15:
        $d24 = coverage[i#157];

     label16:
        denom = $d24;

        $r17 = <java.lang.System: java.io.PrintStream err>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i#157);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(useAccuray? ");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(useWhole);

        if useWhole != 0 goto label17;

        $z5 = 1;

        goto label18;

     label17:
        $z5 = 0;

     label18:
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z5);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $d25 = worthRt[i#157];

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d25);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $d26 = worthValue[i#157];

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d26);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(denom);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r28);

     label19:
        $d27 = worthRt[i#157];

        $b9 = $d27 cmpl maxValue#153;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b9);

        if $b9 <= 0 goto label20;

        maxValue#153 = worthRt[i#157];

        maxIndex#155 = i#157;

     label20:
        i#157 = i#157 + 1;

        goto label14;

     label21:
        z#207 = size - 1;

     label22:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(z#207);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(maxIndex#155);

        if z#207 <= maxIndex#155 goto label23;

        $r29 = this.<weka.classifiers.rules.JRip$RipperRule: java.util.ArrayList m_Antds>;

        virtualinvoke $r29.<java.util.ArrayList: java.lang.Object remove(int)>(z#207);

        z#207 = z#207 + -1;

        goto label22;

     label23:
        return;
    }

    public java.lang.String toString(weka.core.Attribute)
    {
        weka.classifiers.rules.JRip$RipperRule this;
        weka.core.Attribute classAttr;
        java.lang.StringBuffer text, $r0;
        java.util.ArrayList $r1, $r2, $r5, $r15, $r16;
        int $i0, j#7, $i1, $i2, $i3, $i4, $i5;
        java.lang.StringBuilder $r3, $r4, $r9, $r10, $r13, $r14, $r20, $r21, $r24, $r25, $r27, $r28, $r30;
        java.lang.Object $r6, $r17;
        weka.classifiers.rules.JRip$Antd $r7, $r18;
        java.lang.String $r8, $r11, $r19, $r22, $r26, $r29, $r31, $r33;
        double $d0;

        this := @this: weka.classifiers.rules.JRip$RipperRule;

        classAttr := @parameter0: weka.core.Attribute;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        text = $r0;

        $r1 = this.<weka.classifiers.rules.JRip$RipperRule: java.util.ArrayList m_Antds>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label3;

        j#7 = 0;

     label1:
        $r2 = this.<weka.classifiers.rules.JRip$RipperRule: java.util.ArrayList m_Antds>;

        $i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $i2 = $i1 - 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if j#7 >= $i2 goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r5 = this.<weka.classifiers.rules.JRip$RipperRule: java.util.ArrayList m_Antds>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(j#7);

        $r7 = (weka.classifiers.rules.JRip$Antd) $r6;

        $r8 = virtualinvoke $r7.<weka.classifiers.rules.JRip$Antd: java.lang.String toString()>();

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") and ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        j#7 = j#7 + 1;

        goto label1;

     label2:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r15 = this.<weka.classifiers.rules.JRip$RipperRule: java.util.ArrayList m_Antds>;

        $r16 = this.<weka.classifiers.rules.JRip$RipperRule: java.util.ArrayList m_Antds>;

        $i3 = virtualinvoke $r16.<java.util.ArrayList: int size()>();

        $i4 = $i3 - 1;

        $r17 = virtualinvoke $r15.<java.util.ArrayList: java.lang.Object get(int)>($i4);

        $r18 = (weka.classifiers.rules.JRip$Antd) $r17;

        $r19 = virtualinvoke $r18.<weka.classifiers.rules.JRip$Antd: java.lang.String toString()>();

        $r20 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

     label3:
        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" => ");

        $r26 = virtualinvoke classAttr.<weka.core.Attribute: java.lang.String name()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $d0 = this.<weka.classifiers.rules.JRip$RipperRule: double m_Consequent>;

        $i5 = (int) $d0;

        $r29 = virtualinvoke classAttr.<weka.core.Attribute: java.lang.String value(int)>($i5);

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r31);

        $r33 = virtualinvoke text.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r33;
    }

    private double computeDefAccu(weka.core.Instances)
    {
        weka.classifiers.rules.JRip$RipperRule this;
        weka.core.Instances data;
        weka.core.Instance inst;
        double defAccu#2, $d0, $d1, $d2;
        int i#4, $i0, $i1, $i2;

        this := @this: weka.classifiers.rules.JRip$RipperRule;

        data := @parameter0: weka.core.Instances;

        defAccu#2 = 0.0;

        i#4 = 0;

     label1:
        $i0 = virtualinvoke data.<weka.core.Instances: int numInstances()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#4 >= $i0 goto label3;

        inst = virtualinvoke data.<weka.core.Instances: weka.core.Instance instance(int)>(i#4);

        $d0 = interfaceinvoke inst.<weka.core.Instance: double classValue()>();

        $i1 = (int) $d0;

        $d1 = this.<weka.classifiers.rules.JRip$RipperRule: double m_Consequent>;

        $i2 = (int) $d1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i1 != $i2 goto label2;

        $d2 = interfaceinvoke inst.<weka.core.Instance: double weight()>();

        defAccu#2 = defAccu#2 + $d2;

     label2:
        i#4 = i#4 + 1;

        goto label1;

     label3:
        return defAccu#2;
    }

    private weka.core.Instances computeInfoGain(weka.core.Instances, double, weka.classifiers.rules.JRip$Antd)
    {
        weka.classifiers.rules.JRip$RipperRule this;
        weka.core.Instances instances, data, $r0;
        double defAcRt, $d0, $d1;
        weka.classifiers.rules.JRip$Antd antd;
        weka.core.Instances[] splitData;
        int $i0;

        this := @this: weka.classifiers.rules.JRip$RipperRule;

        instances := @parameter0: weka.core.Instances;

        defAcRt := @parameter1: double;

        antd := @parameter2: weka.classifiers.rules.JRip$Antd;

        data = instances;

        $d0 = this.<weka.classifiers.rules.JRip$RipperRule: double m_Consequent>;

        splitData = virtualinvoke antd.<weka.classifiers.rules.JRip$Antd: weka.core.Instances[] splitData(weka.core.Instances,double,double)>(data, defAcRt, $d0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(splitData);

        if splitData == null goto label1;

        $d1 = virtualinvoke antd.<weka.classifiers.rules.JRip$Antd: double getAttrValue()>();

        $i0 = (int) $d1;

        $r0 = splitData[$i0];

        return $r0;

     label1:
        return null;
    }


