    public void <init>(org.unix4j.grep.unix.grep.GrepArguments)
    {
        org.unix4j.grep.unix.grep.RegexpMatcher this;
        org.unix4j.grep.unix.grep.GrepArguments args;
        boolean $z0, $z1, $z2, $z3;
        java.util.regex.Pattern $r0, $r8;
        java.lang.String regex#13, $r3, $r7;
        java.lang.StringBuilder $r1, $r2, $r4, $r5;
        byte $b0;
        java.lang.IllegalArgumentException $r9;

        this := @this: org.unix4j.grep.unix.grep.RegexpMatcher;

        args := @parameter0: org.unix4j.grep.unix.grep.GrepArguments;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $z0 = virtualinvoke args.<org.unix4j.grep.unix.grep.GrepArguments: boolean isPatternSet()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r0 = virtualinvoke args.<org.unix4j.grep.unix.grep.GrepArguments: java.util.regex.Pattern getPattern()>();

        this.<org.unix4j.grep.unix.grep.RegexpMatcher: java.util.regex.Pattern pattern> = $r0;

        goto label7;

     label1:
        $z1 = virtualinvoke args.<org.unix4j.grep.unix.grep.GrepArguments: boolean isRegexpSet()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label6;

        $z2 = virtualinvoke args.<org.unix4j.grep.unix.grep.GrepArguments: boolean isWholeLine()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label2;

        regex#13 = virtualinvoke args.<org.unix4j.grep.unix.grep.GrepArguments: java.lang.String getRegexp()>();

        goto label3;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".*");

        $r3 = virtualinvoke args.<org.unix4j.grep.unix.grep.GrepArguments: java.lang.String getRegexp()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".*");

        regex#13 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        $r7 = regex#13;

        $z3 = virtualinvoke args.<org.unix4j.grep.unix.grep.GrepArguments: boolean isIgnoreCase()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label4;

        $b0 = 2;

        goto label5;

     label4:
        $b0 = 0;

     label5:
        $r8 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>($r7, $b0);

        this.<org.unix4j.grep.unix.grep.RegexpMatcher: java.util.regex.Pattern pattern> = $r8;

        goto label7;

     label6:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Either pattern, or patternStr must be given");

        throw $r9;

     label7:
        return;
    }

    public boolean matches(org.unix4j.grep.line.Line)
    {
        org.unix4j.grep.unix.grep.RegexpMatcher this;
        org.unix4j.grep.line.Line line;
        boolean matches;
        java.util.regex.Pattern $r0;
        java.lang.String $r1;
        java.util.regex.Matcher $r2;

        this := @this: org.unix4j.grep.unix.grep.RegexpMatcher;

        line := @parameter0: org.unix4j.grep.line.Line;

        $r0 = this.<org.unix4j.grep.unix.grep.RegexpMatcher: java.util.regex.Pattern pattern>;

        $r1 = interfaceinvoke line.<org.unix4j.grep.line.Line: java.lang.String getContent()>();

        $r2 = virtualinvoke $r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        matches = virtualinvoke $r2.<java.util.regex.Matcher: boolean matches()>();

        return matches;
    }


