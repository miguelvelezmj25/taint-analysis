    protected void <init>(weka.classifiers.pmml.consumer.TreeModel, org.w3c.dom.Element, weka.core.pmml.MiningSchema) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.TreeModel$TreeNode this, t;
        weka.classifiers.pmml.consumer.TreeModel this$0;
        org.w3c.dom.Element nodeE;
        weka.core.pmml.MiningSchema miningSchema;
        weka.core.Attribute classAtt;
        java.lang.String id, scoreS, recordC, defaultC, $r3, $r11, $r14, $r15, $r19, $r22, $r26, $r29, $r30;
        java.lang.NumberFormatException ex, $r7;
        java.util.Iterator l9;
        java.lang.StringBuilder $r0, $r1, $r2, $r9, $r10, $r12, $r13, $r17, $r18, $r20, $r21;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        double $d0, $d1, $d2, $d3;
        java.util.ArrayList $r4, $r5, $r27;
        weka.core.Instances $r6;
        boolean $z0, $z1, $z2;
        java.lang.Exception $r8, $r16;
        weka.classifiers.pmml.consumer.TreeModel$MiningFunction $r23, $r24;
        weka.classifiers.pmml.consumer.TreeModel$Predicate $r25;
        java.lang.Object $r28;

        this := @this: weka.classifiers.pmml.consumer.TreeModel$TreeNode;

        this$0 := @parameter0: weka.classifiers.pmml.consumer.TreeModel;

        nodeE := @parameter1: org.w3c.dom.Element;

        miningSchema := @parameter2: weka.core.pmml.MiningSchema;

        this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: weka.classifiers.pmml.consumer.TreeModel this$0> = this$0;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $i0 = virtualinvoke this.<java.lang.Object: int hashCode()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.lang.String m_ID> = $r3;

        this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: int m_scoreIndex> = -1;

        $d0 = staticinvoke <weka.core.Utils: double missingValue()>();

        this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: double m_scoreNumeric> = $d0;

        $d1 = staticinvoke <weka.core.Utils: double missingValue()>();

        this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: double m_recordCount> = $d1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.util.ArrayList m_scoreDistributions> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.util.ArrayList m_childNodes> = $r5;

        $r6 = virtualinvoke miningSchema.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        classAtt = virtualinvoke $r6.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        id = interfaceinvoke nodeE.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("id");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(id);

        if id == null goto label01;

        $i1 = virtualinvoke id.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 0 goto label01;

        this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.lang.String m_ID> = id;

     label01:
        scoreS = interfaceinvoke nodeE.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("score");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(scoreS);

        if scoreS == null goto label06;

        $i2 = virtualinvoke scoreS.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 <= 0 goto label06;

        this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.lang.String m_scoreString> = scoreS;

        $z0 = virtualinvoke classAtt.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label05;

     label02:
        $d2 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(scoreS);

        this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: double m_scoreNumeric> = $d2;

     label03:
        goto label06;

     label04:
        $r7 := @caughtexception;

        ex = $r7;

        $r8 = new java.lang.Exception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[TreeNode] class is numeric but unable to parse score ");

        $r11 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.lang.String m_scoreString>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as a number!");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.Exception: void <init>(java.lang.String)>($r14);

        throw $r8;

     label05:
        $r15 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.lang.String m_scoreString>;

        $i3 = virtualinvoke classAtt.<weka.core.Attribute: int indexOfValue(java.lang.String)>($r15);

        this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: int m_scoreIndex> = $i3;

        $i4 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: int m_scoreIndex>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 >= 0 goto label06;

        $r16 = new java.lang.Exception;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[TreeNode] can\'t find match for predicted value ");

        $r19 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.lang.String m_scoreString>;

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in class attribute!");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.Exception: void <init>(java.lang.String)>($r22);

        throw $r16;

     label06:
        recordC = interfaceinvoke nodeE.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("recordCount");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(recordC);

        if recordC == null goto label07;

        $i5 = virtualinvoke recordC.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i5 <= 0 goto label07;

        $d3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(recordC);

        this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: double m_recordCount> = $d3;

     label07:
        defaultC = interfaceinvoke nodeE.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("defaultChild");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(defaultC);

        if defaultC == null goto label08;

        $i6 = virtualinvoke defaultC.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if $i6 <= 0 goto label08;

        this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.lang.String m_defaultChildID> = defaultC;

     label08:
        $r23 = this$0.<weka.classifiers.pmml.consumer.TreeModel: weka.classifiers.pmml.consumer.TreeModel$MiningFunction m_functionType>;

        $r24 = <weka.classifiers.pmml.consumer.TreeModel$MiningFunction: weka.classifiers.pmml.consumer.TreeModel$MiningFunction CLASSIFICATION>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r23);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r24);

        if $r23 != $r24 goto label09;

        specialinvoke this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: void getScoreDistributions(org.w3c.dom.Element,weka.core.pmml.MiningSchema)>(nodeE, miningSchema);

     label09:
        $r25 = staticinvoke <weka.classifiers.pmml.consumer.TreeModel$Predicate: weka.classifiers.pmml.consumer.TreeModel$Predicate getPredicate(org.w3c.dom.Element,weka.core.pmml.MiningSchema)>(nodeE, miningSchema);

        this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: weka.classifiers.pmml.consumer.TreeModel$Predicate m_predicate> = $r25;

        specialinvoke this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: void getChildNodes(org.w3c.dom.Element,weka.core.pmml.MiningSchema)>(nodeE, miningSchema);

        $r26 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.lang.String m_defaultChildID>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r26);

        if $r26 == null goto label12;

        $r27 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.util.ArrayList m_childNodes>;

        l9 = virtualinvoke $r27.<java.util.ArrayList: java.util.Iterator iterator()>();

     label10:
        $z1 = interfaceinvoke l9.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label12;

        $r28 = interfaceinvoke l9.<java.util.Iterator: java.lang.Object next()>();

        t = (weka.classifiers.pmml.consumer.TreeModel$TreeNode) $r28;

        $r29 = virtualinvoke t.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.lang.String getID()>();

        $r30 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.lang.String m_defaultChildID>;

        $z2 = virtualinvoke $r29.<java.lang.String: boolean equals(java.lang.Object)>($r30);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label11;

        this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: weka.classifiers.pmml.consumer.TreeModel$TreeNode m_defaultChild> = t;

        goto label12;

     label11:
        goto label10;

     label12:
        return;

        catch java.lang.NumberFormatException from label02 to label03 with label04;
    }

    private void getScoreDistributions(org.w3c.dom.Element, weka.core.pmml.MiningSchema) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.TreeModel$TreeNode this;
        org.w3c.dom.Element nodeE, $r0, $r2;
        weka.core.pmml.MiningSchema miningSchema;
        org.w3c.dom.NodeList scoreChildren;
        org.w3c.dom.Node child;
        java.lang.String tagName;
        weka.classifiers.pmml.consumer.TreeModel$ScoreDistribution newDist, $r1, s#44, s#58;
        int i#4, $i0;
        short $s1;
        boolean $z0, $z2, $z3, $z4;
        double $d0, $d1, baseCount#34, $d2;
        java.util.ArrayList $r3, $r4, $r6;
        java.util.Iterator l6#38, l6#52;
        java.lang.Object $r5, $r7;

        this := @this: weka.classifiers.pmml.consumer.TreeModel$TreeNode;

        nodeE := @parameter0: org.w3c.dom.Element;

        miningSchema := @parameter1: weka.core.pmml.MiningSchema;

        scoreChildren = interfaceinvoke nodeE.<org.w3c.dom.Element: org.w3c.dom.NodeList getChildNodes()>();

        i#4 = 0;

     label1:
        $i0 = interfaceinvoke scoreChildren.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#4 >= $i0 goto label3;

        child = interfaceinvoke scoreChildren.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i#4);

        $s1 = interfaceinvoke child.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s1);

        if $s1 != 1 goto label2;

        $r0 = (org.w3c.dom.Element) child;

        tagName = interfaceinvoke $r0.<org.w3c.dom.Element: java.lang.String getTagName()>();

        $z0 = virtualinvoke tagName.<java.lang.String: boolean equals(java.lang.Object)>("ScoreDistribution");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $r1 = new weka.classifiers.pmml.consumer.TreeModel$ScoreDistribution;

        $r2 = (org.w3c.dom.Element) child;

        $d0 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: double m_recordCount>;

        specialinvoke $r1.<weka.classifiers.pmml.consumer.TreeModel$ScoreDistribution: void <init>(org.w3c.dom.Element,weka.core.pmml.MiningSchema,double)>($r2, miningSchema, $d0);

        newDist = $r1;

        $r3 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.util.ArrayList m_scoreDistributions>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(newDist);

     label2:
        i#4 = i#4 + 1;

        goto label1;

     label3:
        $d1 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: double m_recordCount>;

        $z2 = staticinvoke <weka.core.Utils: boolean isMissingValue(double)>($d1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label7;

        baseCount#34 = 0.0;

        $r4 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.util.ArrayList m_scoreDistributions>;

        l6#38 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label4:
        $z3 = interfaceinvoke l6#38.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label5;

        $r5 = interfaceinvoke l6#38.<java.util.Iterator: java.lang.Object next()>();

        s#44 = (weka.classifiers.pmml.consumer.TreeModel$ScoreDistribution) $r5;

        $d2 = virtualinvoke s#44.<weka.classifiers.pmml.consumer.TreeModel$ScoreDistribution: double getRecordCount()>();

        baseCount#34 = baseCount#34 + $d2;

        goto label4;

     label5:
        $r6 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.util.ArrayList m_scoreDistributions>;

        l6#52 = virtualinvoke $r6.<java.util.ArrayList: java.util.Iterator iterator()>();

     label6:
        $z4 = interfaceinvoke l6#52.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label7;

        $r7 = interfaceinvoke l6#52.<java.util.Iterator: java.lang.Object next()>();

        s#58 = (weka.classifiers.pmml.consumer.TreeModel$ScoreDistribution) $r7;

        virtualinvoke s#58.<weka.classifiers.pmml.consumer.TreeModel$ScoreDistribution: void deriveConfidenceValue(double)>(baseCount#34);

        goto label6;

     label7:
        return;
    }

    private void getChildNodes(org.w3c.dom.Element, weka.core.pmml.MiningSchema) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.TreeModel$TreeNode this, tempN, $r1;
        org.w3c.dom.Element nodeE, $r0, $r3;
        weka.core.pmml.MiningSchema miningSchema;
        org.w3c.dom.NodeList children;
        org.w3c.dom.Node child;
        java.lang.String tagName;
        int i#4, $i0;
        short $s1;
        boolean $z0;
        weka.classifiers.pmml.consumer.TreeModel $r2;
        java.util.ArrayList $r4;

        this := @this: weka.classifiers.pmml.consumer.TreeModel$TreeNode;

        nodeE := @parameter0: org.w3c.dom.Element;

        miningSchema := @parameter1: weka.core.pmml.MiningSchema;

        children = interfaceinvoke nodeE.<org.w3c.dom.Element: org.w3c.dom.NodeList getChildNodes()>();

        i#4 = 0;

     label1:
        $i0 = interfaceinvoke children.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#4 >= $i0 goto label3;

        child = interfaceinvoke children.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i#4);

        $s1 = interfaceinvoke child.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s1);

        if $s1 != 1 goto label2;

        $r0 = (org.w3c.dom.Element) child;

        tagName = interfaceinvoke $r0.<org.w3c.dom.Element: java.lang.String getTagName()>();

        $z0 = virtualinvoke tagName.<java.lang.String: boolean equals(java.lang.Object)>("Node");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $r1 = new weka.classifiers.pmml.consumer.TreeModel$TreeNode;

        $r2 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: weka.classifiers.pmml.consumer.TreeModel this$0>;

        $r3 = (org.w3c.dom.Element) child;

        specialinvoke $r1.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: void <init>(weka.classifiers.pmml.consumer.TreeModel,org.w3c.dom.Element,weka.core.pmml.MiningSchema)>($r2, $r3, miningSchema);

        tempN = $r1;

        $r4 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.util.ArrayList m_childNodes>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(tempN);

     label2:
        i#4 = i#4 + 1;

        goto label1;

     label3:
        return;
    }

    protected double[] score(double[], weka.core.Attribute) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.TreeModel$TreeNode this;
        double[] instance, preds#7;
        weka.core.Attribute classAtt;
        boolean $z0;
        int $i0, $i1, $i2, $i3;
        java.util.ArrayList $r0;
        int[] $r1;
        weka.classifiers.pmml.consumer.TreeModel $r2;
        weka.classifiers.pmml.consumer.TreeModel$MissingValueStrategy $r3;
        java.lang.Exception $r4;

        this := @this: weka.classifiers.pmml.consumer.TreeModel$TreeNode;

        instance := @parameter0: double[];

        classAtt := @parameter1: weka.core.Attribute;

        $z0 = virtualinvoke classAtt.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        preds#7 = newarray (double)[1];

        goto label2;

     label1:
        $i0 = virtualinvoke classAtt.<weka.core.Attribute: int numValues()>();

        preds#7 = newarray (double)[$i0];

     label2:
        $r0 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.util.ArrayList m_childNodes>;

        $i1 = virtualinvoke $r0.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 != 0 goto label3;

        virtualinvoke this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: void doLeaf(weka.core.Attribute,double[])>(classAtt, preds#7);

        goto label8;

     label3:
        $r1 = <weka.classifiers.pmml.consumer.TreeModel$1: int[] $SwitchMap$weka$classifiers$pmml$consumer$TreeModel$MissingValueStrategy>;

        $r2 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: weka.classifiers.pmml.consumer.TreeModel this$0>;

        $r3 = $r2.<weka.classifiers.pmml.consumer.TreeModel: weka.classifiers.pmml.consumer.TreeModel$MissingValueStrategy m_missingValueStrategy>;

        $i2 = virtualinvoke $r3.<weka.classifiers.pmml.consumer.TreeModel$MissingValueStrategy: int ordinal()>();

        $i3 = $r1[$i2];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        tableswitch($i3)
        {
            case 1: goto label4;
            case 2: goto label5;
            case 3: goto label6;
            default: goto label7;
        };

     label4:
        preds#7 = virtualinvoke this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: double[] missingValueStrategyNone(double[],weka.core.Attribute)>(instance, classAtt);

        goto label8;

     label5:
        preds#7 = virtualinvoke this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: double[] missingValueStrategyLastPrediction(double[],weka.core.Attribute)>(instance, classAtt);

        goto label8;

     label6:
        preds#7 = virtualinvoke this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: double[] missingValueStrategyDefaultChild(double[],weka.core.Attribute)>(instance, classAtt);

        goto label8;

     label7:
        $r4 = new java.lang.Exception;

        specialinvoke $r4.<java.lang.Exception: void <init>(java.lang.String)>("[TreeModel] not implemented!");

        throw $r4;

     label8:
        return preds#7;
    }

    protected void doLeaf(weka.core.Attribute, double[]) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.TreeModel$TreeNode this;
        weka.core.Attribute classAtt;
        double[] preds;
        java.util.Iterator l3;
        weka.classifiers.pmml.consumer.TreeModel$ScoreDistribution s;
        boolean $z0, $z1;
        double $d0, $d1;
        java.util.ArrayList $r0, $r1;
        int $i0, $i1, $i2;
        java.lang.Object $r2;

        this := @this: weka.classifiers.pmml.consumer.TreeModel$TreeNode;

        classAtt := @parameter0: weka.core.Attribute;

        preds := @parameter1: double[];

        $z0 = virtualinvoke classAtt.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $d0 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: double m_scoreNumeric>;

        preds[0] = $d0;

        goto label4;

     label1:
        $r0 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.util.ArrayList m_scoreDistributions>;

        $i0 = virtualinvoke $r0.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 0 goto label2;

        $i1 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: int m_scoreIndex>;

        preds[$i1] = 1.0;

        goto label4;

     label2:
        $r1 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.util.ArrayList m_scoreDistributions>;

        l3 = virtualinvoke $r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label4;

        $r2 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        s = (weka.classifiers.pmml.consumer.TreeModel$ScoreDistribution) $r2;

        $i2 = virtualinvoke s.<weka.classifiers.pmml.consumer.TreeModel$ScoreDistribution: int getClassLabelIndex()>();

        $d1 = virtualinvoke s.<weka.classifiers.pmml.consumer.TreeModel$ScoreDistribution: double getConfidence()>();

        preds[$i2] = $d1;

        goto label3;

     label4:
        return;
    }

    protected double[] missingValueStrategyNone(double[], weka.core.Attribute) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.TreeModel$TreeNode this, c;
        double[] instance, preds#2;
        weka.core.Attribute classAtt;
        java.util.Iterator l4;
        java.util.ArrayList $r0;
        boolean $z0;
        java.lang.Object $r1;
        weka.classifiers.pmml.consumer.TreeModel$Predicate $r2;
        weka.classifiers.pmml.consumer.TreeModel$Predicate$Eval $r3, $r4;
        int $i0;

        this := @this: weka.classifiers.pmml.consumer.TreeModel$TreeNode;

        instance := @parameter0: double[];

        classAtt := @parameter1: weka.core.Attribute;

        preds#2 = null;

        $r0 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.util.ArrayList m_childNodes>;

        l4 = virtualinvoke $r0.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        $r1 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        c = (weka.classifiers.pmml.consumer.TreeModel$TreeNode) $r1;

        $r2 = virtualinvoke c.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: weka.classifiers.pmml.consumer.TreeModel$Predicate getPredicate()>();

        $r3 = virtualinvoke $r2.<weka.classifiers.pmml.consumer.TreeModel$Predicate: weka.classifiers.pmml.consumer.TreeModel$Predicate$Eval evaluate(double[])>(instance);

        $r4 = <weka.classifiers.pmml.consumer.TreeModel$Predicate$Eval: weka.classifiers.pmml.consumer.TreeModel$Predicate$Eval TRUE>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        if $r3 != $r4 goto label2;

        preds#2 = virtualinvoke c.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: double[] score(double[],weka.core.Attribute)>(instance, classAtt);

        goto label3;

     label2:
        goto label1;

     label3:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(preds#2);

        if preds#2 != null goto label4;

        $i0 = virtualinvoke classAtt.<weka.core.Attribute: int numValues()>();

        preds#2 = newarray (double)[$i0];

        virtualinvoke this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: void doNoTrueChild(weka.core.Attribute,double[])>(classAtt, preds#2);

     label4:
        return preds#2;
    }

    protected double[] missingValueStrategyLastPrediction(double[], weka.core.Attribute) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.TreeModel$TreeNode this, c;
        double[] instance, preds#2;
        weka.core.Attribute classAtt;
        java.util.Iterator l5;
        boolean strategyInvoked#4, $z0;
        java.util.ArrayList $r0;
        java.lang.Object $r1;
        weka.classifiers.pmml.consumer.TreeModel$Predicate $r2, $r5;
        weka.classifiers.pmml.consumer.TreeModel$Predicate$Eval $r3, $r4, $r6, $r7;
        int $i0;

        this := @this: weka.classifiers.pmml.consumer.TreeModel$TreeNode;

        instance := @parameter0: double[];

        classAtt := @parameter1: weka.core.Attribute;

        preds#2 = null;

        strategyInvoked#4 = 0;

        $r0 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.util.ArrayList m_childNodes>;

        l5 = virtualinvoke $r0.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label4;

        $r1 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        c = (weka.classifiers.pmml.consumer.TreeModel$TreeNode) $r1;

        $r2 = virtualinvoke c.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: weka.classifiers.pmml.consumer.TreeModel$Predicate getPredicate()>();

        $r3 = virtualinvoke $r2.<weka.classifiers.pmml.consumer.TreeModel$Predicate: weka.classifiers.pmml.consumer.TreeModel$Predicate$Eval evaluate(double[])>(instance);

        $r4 = <weka.classifiers.pmml.consumer.TreeModel$Predicate$Eval: weka.classifiers.pmml.consumer.TreeModel$Predicate$Eval TRUE>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        if $r3 != $r4 goto label2;

        preds#2 = virtualinvoke c.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: double[] score(double[],weka.core.Attribute)>(instance, classAtt);

        goto label4;

     label2:
        $r5 = virtualinvoke c.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: weka.classifiers.pmml.consumer.TreeModel$Predicate getPredicate()>();

        $r6 = virtualinvoke $r5.<weka.classifiers.pmml.consumer.TreeModel$Predicate: weka.classifiers.pmml.consumer.TreeModel$Predicate$Eval evaluate(double[])>(instance);

        $r7 = <weka.classifiers.pmml.consumer.TreeModel$Predicate$Eval: weka.classifiers.pmml.consumer.TreeModel$Predicate$Eval UNKNOWN>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r7);

        if $r6 != $r7 goto label3;

        strategyInvoked#4 = 1;

     label3:
        goto label1;

     label4:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(preds#2);

        if preds#2 != null goto label6;

        $i0 = virtualinvoke classAtt.<weka.core.Attribute: int numValues()>();

        preds#2 = newarray (double)[$i0];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(strategyInvoked#4);

        if strategyInvoked#4 != 0 goto label5;

        virtualinvoke this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: void doNoTrueChild(weka.core.Attribute,double[])>(classAtt, preds#2);

        goto label6;

     label5:
        virtualinvoke this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: void doLeaf(weka.core.Attribute,double[])>(classAtt, preds#2);

     label6:
        return preds#2;
    }

    protected double[] missingValueStrategyDefaultChild(double[], weka.core.Attribute) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.TreeModel$TreeNode this, c, $r8, $r9;
        double[] instance, preds#2;
        weka.core.Attribute classAtt;
        java.util.Iterator l5;
        boolean strategyInvoked#4, $z0;
        java.util.ArrayList $r0;
        java.lang.Object $r1;
        weka.classifiers.pmml.consumer.TreeModel$Predicate $r2, $r5;
        weka.classifiers.pmml.consumer.TreeModel$Predicate$Eval $r3, $r4, $r6, $r7;
        java.lang.Exception $r10;
        java.lang.StringBuilder $r11, $r12, $r14;
        java.lang.String $r13, $r15;

        this := @this: weka.classifiers.pmml.consumer.TreeModel$TreeNode;

        instance := @parameter0: double[];

        classAtt := @parameter1: weka.core.Attribute;

        preds#2 = null;

        strategyInvoked#4 = 0;

        $r0 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.util.ArrayList m_childNodes>;

        l5 = virtualinvoke $r0.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label4;

        $r1 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        c = (weka.classifiers.pmml.consumer.TreeModel$TreeNode) $r1;

        $r2 = virtualinvoke c.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: weka.classifiers.pmml.consumer.TreeModel$Predicate getPredicate()>();

        $r3 = virtualinvoke $r2.<weka.classifiers.pmml.consumer.TreeModel$Predicate: weka.classifiers.pmml.consumer.TreeModel$Predicate$Eval evaluate(double[])>(instance);

        $r4 = <weka.classifiers.pmml.consumer.TreeModel$Predicate$Eval: weka.classifiers.pmml.consumer.TreeModel$Predicate$Eval TRUE>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        if $r3 != $r4 goto label2;

        preds#2 = virtualinvoke c.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: double[] score(double[],weka.core.Attribute)>(instance, classAtt);

        goto label4;

     label2:
        $r5 = virtualinvoke c.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: weka.classifiers.pmml.consumer.TreeModel$Predicate getPredicate()>();

        $r6 = virtualinvoke $r5.<weka.classifiers.pmml.consumer.TreeModel$Predicate: weka.classifiers.pmml.consumer.TreeModel$Predicate$Eval evaluate(double[])>(instance);

        $r7 = <weka.classifiers.pmml.consumer.TreeModel$Predicate$Eval: weka.classifiers.pmml.consumer.TreeModel$Predicate$Eval UNKNOWN>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r7);

        if $r6 != $r7 goto label3;

        strategyInvoked#4 = 1;

     label3:
        goto label1;

     label4:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(preds#2);

        if preds#2 != null goto label7;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(strategyInvoked#4);

        if strategyInvoked#4 != 0 goto label5;

        virtualinvoke this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: void doNoTrueChild(weka.core.Attribute,double[])>(classAtt, preds#2);

        goto label7;

     label5:
        $r8 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: weka.classifiers.pmml.consumer.TreeModel$TreeNode m_defaultChild>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r8);

        if $r8 == null goto label6;

        $r9 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: weka.classifiers.pmml.consumer.TreeModel$TreeNode m_defaultChild>;

        preds#2 = virtualinvoke $r9.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: double[] score(double[],weka.core.Attribute)>(instance, classAtt);

        goto label7;

     label6:
        $r10 = new java.lang.Exception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[TreeNode] missing value strategy is defaultChild, but no default child has been specified in node ");

        $r13 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.lang.String m_ID>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.Exception: void <init>(java.lang.String)>($r15);

        throw $r10;

     label7:
        return preds#2;
    }

    protected void doNoTrueChild(weka.core.Attribute, double[]) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.TreeModel$TreeNode this;
        weka.core.Attribute classAtt;
        double[] preds;
        weka.classifiers.pmml.consumer.TreeModel $r0;
        weka.classifiers.pmml.consumer.TreeModel$NoTrueChildStrategy $r1, $r2;
        int i#6, $i0;
        double $d0;

        this := @this: weka.classifiers.pmml.consumer.TreeModel$TreeNode;

        classAtt := @parameter0: weka.core.Attribute;

        preds := @parameter1: double[];

        $r0 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: weka.classifiers.pmml.consumer.TreeModel this$0>;

        $r1 = $r0.<weka.classifiers.pmml.consumer.TreeModel: weka.classifiers.pmml.consumer.TreeModel$NoTrueChildStrategy m_noTrueChildStrategy>;

        $r2 = <weka.classifiers.pmml.consumer.TreeModel$NoTrueChildStrategy: weka.classifiers.pmml.consumer.TreeModel$NoTrueChildStrategy RETURNNULLPREDICTION>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        if $r1 != $r2 goto label3;

        i#6 = 0;

     label1:
        $i0 = virtualinvoke classAtt.<weka.core.Attribute: int numValues()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#6 >= $i0 goto label2;

        $d0 = staticinvoke <weka.core.Utils: double missingValue()>();

        preds[i#6] = $d0;

        i#6 = i#6 + 1;

        goto label1;

     label2:
        goto label4;

     label3:
        virtualinvoke this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: void doLeaf(weka.core.Attribute,double[])>(classAtt, preds);

     label4:
        return;
    }

    public java.lang.String toString()
    {
        weka.classifiers.pmml.consumer.TreeModel$TreeNode this;
        java.lang.StringBuffer text, $r0;
        java.lang.String $r1;

        this := @this: weka.classifiers.pmml.consumer.TreeModel$TreeNode;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        text = $r0;

        virtualinvoke this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: void dumpTree(int,java.lang.StringBuffer)>(0, text);

        $r1 = virtualinvoke text.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r1;
    }

    protected void dumpTree(int, java.lang.StringBuffer)
    {
        weka.classifiers.pmml.consumer.TreeModel$TreeNode this, child;
        int level, $i0, i#5, $i1, $i2, $i3;
        java.lang.StringBuffer text;
        java.util.Iterator l3;
        weka.classifiers.pmml.consumer.TreeModel$ScoreDistribution s;
        java.util.ArrayList $r0, $r1, $r3, $r16, $r18;
        java.lang.Object $r4, $r19;
        weka.classifiers.pmml.consumer.TreeModel$Predicate $r5;
        java.lang.String $r6, $r11, $r14, $r22;
        double $d0, $d1;
        boolean $z0, $z1;
        java.lang.StringBuilder $r10, $r12, $r13;

        this := @this: weka.classifiers.pmml.consumer.TreeModel$TreeNode;

        level := @parameter0: int;

        text := @parameter1: java.lang.StringBuffer;

        $r0 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.util.ArrayList m_childNodes>;

        $i0 = virtualinvoke $r0.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label3;

        i#5 = 0;

     label1:
        $r1 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.util.ArrayList m_childNodes>;

        $i1 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#5 >= $i1 goto label2;

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r3 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.util.ArrayList m_childNodes>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i#5);

        child = (weka.classifiers.pmml.consumer.TreeModel$TreeNode) $r4;

        $r5 = virtualinvoke child.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: weka.classifiers.pmml.consumer.TreeModel$Predicate getPredicate()>();

        $r6 = virtualinvoke $r5.<weka.classifiers.pmml.consumer.TreeModel$Predicate: java.lang.String toString(int,boolean)>(level, 0);

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $i2 = level + 1;

        virtualinvoke child.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: void dumpTree(int,java.lang.StringBuffer)>($i2, text);

        i#5 = i#5 + 1;

        goto label1;

     label2:
        goto label8;

     label3:
        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $d0 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: double m_scoreNumeric>;

        $z0 = staticinvoke <weka.core.Utils: boolean isMissingValue(double)>($d0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label4;

        $d1 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: double m_scoreNumeric>;

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>($d1);

        goto label8;

     label4:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.lang.String m_scoreString>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.util.ArrayList m_scoreDistributions>;

        $i3 = virtualinvoke $r16.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 <= 0 goto label7;

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $r18 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.util.ArrayList m_scoreDistributions>;

        l3 = virtualinvoke $r18.<java.util.ArrayList: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label6;

        $r19 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        s = (weka.classifiers.pmml.consumer.TreeModel$ScoreDistribution) $r19;

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(s);

        goto label5;

     label6:
        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        goto label8;

     label7:
        $r22 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.lang.String m_scoreString>;

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

     label8:
        return;
    }

    protected void dumpGraph(java.lang.StringBuffer) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.TreeModel$TreeNode this, c;
        java.lang.StringBuffer text;
        weka.classifiers.pmml.consumer.TreeModel$ScoreDistribution s;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r8, $r9, $r11, $r19, $r20, $r21, $r30, $r31, $r33, $r34, $r36, $r39, $r40, $r43;
        java.lang.String $r2, $r5, $r7, $r10, $r12, $r22, $r32, $r35, $r37, $r42, $r44;
        java.util.ArrayList $r14, $r15, $r17, $r25, $r28;
        int $i0, $i1, $i2;
        java.util.Iterator l2#37, l2#67;
        boolean $z0, $z1;
        java.lang.Object $r18, $r29;
        weka.classifiers.pmml.consumer.TreeModel$Predicate $r41;

        this := @this: weka.classifiers.pmml.consumer.TreeModel$TreeNode;

        text := @parameter0: java.lang.StringBuffer;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("N");

        $r2 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.lang.String m_ID>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.lang.String m_scoreString>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r7);

        if $r7 == null goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[label=\"score=");

        $r10 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.lang.String m_scoreString>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

     label1:
        $r14 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.util.ArrayList m_scoreDistributions>;

        $i0 = virtualinvoke $r14.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label3;

        $r15 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.util.ArrayList m_childNodes>;

        $i1 = virtualinvoke $r15.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 != 0 goto label3;

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\n");

        $r17 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.util.ArrayList m_scoreDistributions>;

        l2#37 = virtualinvoke $r17.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke l2#37.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        $r18 = interfaceinvoke l2#37.<java.util.Iterator: java.lang.Object next()>();

        s = (weka.classifiers.pmml.consumer.TreeModel$ScoreDistribution) $r18;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(s);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\n");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        goto label2;

     label3:
        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r25 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.util.ArrayList m_childNodes>;

        $i2 = virtualinvoke $r25.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 != 0 goto label4;

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" shape=box style=filled");

     label4:
        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]\n");

        $r28 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.util.ArrayList m_childNodes>;

        l2#67 = virtualinvoke $r28.<java.util.ArrayList: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke l2#67.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label6;

        $r29 = interfaceinvoke l2#67.<java.util.Iterator: java.lang.Object next()>();

        c = (weka.classifiers.pmml.consumer.TreeModel$TreeNode) $r29;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("N");

        $r32 = this.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.lang.String m_ID>;

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("->N");

        $r35 = virtualinvoke c.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: java.lang.String getID()>();

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r37);

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [label=\"");

        $r41 = virtualinvoke c.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: weka.classifiers.pmml.consumer.TreeModel$Predicate getPredicate()>();

        $r42 = virtualinvoke $r41.<weka.classifiers.pmml.consumer.TreeModel$Predicate: java.lang.String toString(int,boolean)>(0, 1);

        $r43 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r44);

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"]\n");

        virtualinvoke c.<weka.classifiers.pmml.consumer.TreeModel$TreeNode: void dumpGraph(java.lang.StringBuffer)>(text);

        goto label5;

     label6:
        return;
    }


