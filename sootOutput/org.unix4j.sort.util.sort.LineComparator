    static void <clinit>()
    {
        org.unix4j.sort.util.sort.LineComparator $r0, $r2, $r4, $r6;
        java.util.Comparator $r1, $r3, $r5, $r7;

        $r0 = new org.unix4j.sort.util.sort.LineComparator;

        $r1 = staticinvoke <org.unix4j.sort.util.sort.LineComparator: java.util.Comparator getCollator(boolean,boolean)>(0, 0);

        specialinvoke $r0.<org.unix4j.sort.util.sort.LineComparator: void <init>(java.util.Comparator)>($r1);

        <org.unix4j.sort.util.sort.LineComparator: org.unix4j.sort.util.sort.LineComparator COLLATOR> = $r0;

        $r2 = new org.unix4j.sort.util.sort.LineComparator;

        $r3 = staticinvoke <org.unix4j.sort.util.sort.LineComparator: java.util.Comparator getCollator(boolean,boolean)>(1, 0);

        specialinvoke $r2.<org.unix4j.sort.util.sort.LineComparator: void <init>(java.util.Comparator)>($r3);

        <org.unix4j.sort.util.sort.LineComparator: org.unix4j.sort.util.sort.LineComparator COLLATOR_IGNORE_CASE> = $r2;

        $r4 = new org.unix4j.sort.util.sort.LineComparator;

        $r5 = staticinvoke <org.unix4j.sort.util.sort.LineComparator: java.util.Comparator getCollator(boolean,boolean)>(0, 1);

        specialinvoke $r4.<org.unix4j.sort.util.sort.LineComparator: void <init>(java.util.Comparator)>($r5);

        <org.unix4j.sort.util.sort.LineComparator: org.unix4j.sort.util.sort.LineComparator COLLATOR_IGNORE_LEADING_BLANKS> = $r4;

        $r6 = new org.unix4j.sort.util.sort.LineComparator;

        $r7 = staticinvoke <org.unix4j.sort.util.sort.LineComparator: java.util.Comparator getCollator(boolean,boolean)>(1, 1);

        specialinvoke $r6.<org.unix4j.sort.util.sort.LineComparator: void <init>(java.util.Comparator)>($r7);

        <org.unix4j.sort.util.sort.LineComparator: org.unix4j.sort.util.sort.LineComparator COLLATOR_IGNORE_CASE_AND_LEADING_BLANKS> = $r6;

        return;
    }

    private static java.util.Comparator getCollator(boolean, boolean)
    {
        boolean ignoreCase, ignoreLeadingBlanks;
        java.text.Collator collator;
        org.unix4j.sort.util.sort.TrimBlanksStringComparator$Mode $r0;
        org.unix4j.sort.util.sort.TrimBlanksStringComparator $r1;

        ignoreCase := @parameter0: boolean;

        ignoreLeadingBlanks := @parameter1: boolean;

        collator = staticinvoke <java.text.Collator: java.text.Collator getInstance()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(ignoreCase);

        if ignoreCase == 0 goto label1;

        virtualinvoke collator.<java.text.Collator: void setStrength(int)>(1);

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(ignoreLeadingBlanks);

        if ignoreLeadingBlanks == 0 goto label2;

        $r1 = new org.unix4j.sort.util.sort.TrimBlanksStringComparator;

        $r0 = <org.unix4j.sort.util.sort.TrimBlanksStringComparator$Mode: org.unix4j.sort.util.sort.TrimBlanksStringComparator$Mode Leading>;

        specialinvoke $r1.<org.unix4j.sort.util.sort.TrimBlanksStringComparator: void <init>(org.unix4j.sort.util.sort.TrimBlanksStringComparator$Mode,java.util.Comparator)>($r0, collator);

        return $r1;

     label2:
        return collator;
    }

    private void <init>(java.util.Comparator)
    {
        org.unix4j.sort.util.sort.LineComparator this;
        java.util.Comparator comparator;

        this := @this: org.unix4j.sort.util.sort.LineComparator;

        comparator := @parameter0: java.util.Comparator;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<org.unix4j.sort.util.sort.LineComparator: java.util.Comparator comparator> = comparator;

        return;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.unix4j.sort.util.sort.LineComparator this;
        java.lang.Object l1, l2;
        org.unix4j.sort.line.Line $r0, $r1;
        int $i0;

        this := @this: org.unix4j.sort.util.sort.LineComparator;

        l1 := @parameter0: java.lang.Object;

        l2 := @parameter1: java.lang.Object;

        $r0 = (org.unix4j.sort.line.Line) l1;

        $r1 = (org.unix4j.sort.line.Line) l2;

        $i0 = virtualinvoke this.<org.unix4j.sort.util.sort.LineComparator: int compare(org.unix4j.sort.line.Line,org.unix4j.sort.line.Line)>($r0, $r1);

        return $i0;
    }

    public int compare(org.unix4j.sort.line.Line, org.unix4j.sort.line.Line)
    {
        org.unix4j.sort.util.sort.LineComparator this;
        org.unix4j.sort.line.Line line1, line2;
        java.util.Comparator $r0;
        java.lang.String $r1, $r2;
        int $i0;

        this := @this: org.unix4j.sort.util.sort.LineComparator;

        line1 := @parameter0: org.unix4j.sort.line.Line;

        line2 := @parameter1: org.unix4j.sort.line.Line;

        $r0 = this.<org.unix4j.sort.util.sort.LineComparator: java.util.Comparator comparator>;

        $r1 = interfaceinvoke line1.<org.unix4j.sort.line.Line: java.lang.String getContent()>();

        $r2 = interfaceinvoke line2.<org.unix4j.sort.line.Line: java.lang.String getContent()>();

        $i0 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r1, $r2);

        return $i0;
    }


