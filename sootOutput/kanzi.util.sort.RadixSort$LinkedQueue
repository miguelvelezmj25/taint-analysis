    protected int[] store(int[])
    {
        kanzi.util.sort.RadixSort$LinkedQueue this;
        int[] buffer, $r6, $r7, $r8, $r9;
        kanzi.util.sort.RadixSort$Node $r0, $r1, $r2, $r3;
        java.util.concurrent.ConcurrentLinkedQueue $r4;
        java.lang.Object $r5;
        int $i0;

        this := @this: kanzi.util.sort.RadixSort$LinkedQueue;

        buffer := @parameter0: int[];

        if buffer == null goto label1;

        $r0 = this.<kanzi.util.sort.RadixSort$LinkedQueue: kanzi.util.sort.RadixSort$Node tail>;

        $r1 = new kanzi.util.sort.RadixSort$Node;

        specialinvoke $r1.<kanzi.util.sort.RadixSort$Node: void <init>(java.lang.Object)>(buffer);

        $r0.<kanzi.util.sort.RadixSort$Node: kanzi.util.sort.RadixSort$Node next> = $r1;

        $r2 = this.<kanzi.util.sort.RadixSort$LinkedQueue: kanzi.util.sort.RadixSort$Node tail>;

        $r3 = $r2.<kanzi.util.sort.RadixSort$Node: kanzi.util.sort.RadixSort$Node next>;

        this.<kanzi.util.sort.RadixSort$LinkedQueue: kanzi.util.sort.RadixSort$Node tail> = $r3;

     label1:
        $r4 = <kanzi.util.sort.RadixSort$LinkedQueue: java.util.concurrent.ConcurrentLinkedQueue POOL_I>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object poll()>();

        $r6 = (int[]) $r5;

        this.<kanzi.util.sort.RadixSort$LinkedQueue: int[] intBuffer> = $r6;

        $r7 = this.<kanzi.util.sort.RadixSort$LinkedQueue: int[] intBuffer>;

        if $r7 != null goto label2;

        $i0 = this.<kanzi.util.sort.RadixSort$LinkedQueue: int bufferSize>;

        $r8 = newarray (int)[$i0];

        this.<kanzi.util.sort.RadixSort$LinkedQueue: int[] intBuffer> = $r8;

     label2:
        this.<kanzi.util.sort.RadixSort$LinkedQueue: int index> = 0;

        $r9 = this.<kanzi.util.sort.RadixSort$LinkedQueue: int[] intBuffer>;

        return $r9;
    }

    public int retrieve(int[], int)
    {
        kanzi.util.sort.RadixSort$LinkedQueue this;
        int[] array, buffer, $r2, $r4, $r5;
        int blkptr#1, $i0, $i1, $i2, $i3, i#35, $i4, $i5, $i6, $i7, blkptr#56;
        kanzi.util.sort.RadixSort$Node $r0, node#5, $r6, $r7;
        java.lang.Object $r1;
        java.util.concurrent.ConcurrentLinkedQueue $r3;

        this := @this: kanzi.util.sort.RadixSort$LinkedQueue;

        array := @parameter0: int[];

        blkptr#1 := @parameter1: int;

        $r0 = this.<kanzi.util.sort.RadixSort$LinkedQueue: kanzi.util.sort.RadixSort$Node head>;

        node#5 = $r0.<kanzi.util.sort.RadixSort$Node: kanzi.util.sort.RadixSort$Node next>;

     label1:
        if node#5 == null goto label2;

        $r1 = node#5.<kanzi.util.sort.RadixSort$Node: java.lang.Object value>;

        $r2 = (int[]) $r1;

        buffer = (int[]) $r2;

        $i0 = lengthof buffer;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(buffer, 0, array, blkptr#1, $i0);

        $i1 = lengthof buffer;

        blkptr#1 = blkptr#1 + $i1;

        node#5.<kanzi.util.sort.RadixSort$Node: java.lang.Object value> = null;

        $r3 = <kanzi.util.sort.RadixSort$LinkedQueue: java.util.concurrent.ConcurrentLinkedQueue POOL_I>;

        virtualinvoke $r3.<java.util.concurrent.ConcurrentLinkedQueue: boolean add(java.lang.Object)>(buffer);

        node#5 = node#5.<kanzi.util.sort.RadixSort$Node: kanzi.util.sort.RadixSort$Node next>;

        goto label1;

     label2:
        $i2 = this.<kanzi.util.sort.RadixSort$LinkedQueue: int index>;

        if $i2 >= 32 goto label5;

        $i3 = this.<kanzi.util.sort.RadixSort$LinkedQueue: int index>;

        i#35 = $i3 - 1;

     label3:
        if i#35 < 0 goto label4;

        $i4 = blkptr#1 + i#35;

        $r4 = this.<kanzi.util.sort.RadixSort$LinkedQueue: int[] intBuffer>;

        $i5 = $r4[i#35];

        array[$i4] = $i5;

        i#35 = i#35 + -1;

        goto label3;

     label4:
        goto label6;

     label5:
        $r5 = this.<kanzi.util.sort.RadixSort$LinkedQueue: int[] intBuffer>;

        $i6 = this.<kanzi.util.sort.RadixSort$LinkedQueue: int index>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, array, blkptr#1, $i6);

     label6:
        $i7 = this.<kanzi.util.sort.RadixSort$LinkedQueue: int index>;

        blkptr#56 = blkptr#1 + $i7;

        this.<kanzi.util.sort.RadixSort$LinkedQueue: int index> = 0;

        $r6 = this.<kanzi.util.sort.RadixSort$LinkedQueue: kanzi.util.sort.RadixSort$Node head>;

        this.<kanzi.util.sort.RadixSort$LinkedQueue: kanzi.util.sort.RadixSort$Node tail> = $r6;

        $r7 = this.<kanzi.util.sort.RadixSort$LinkedQueue: kanzi.util.sort.RadixSort$Node tail>;

        $r7.<kanzi.util.sort.RadixSort$Node: kanzi.util.sort.RadixSort$Node next> = null;

        return blkptr#56;
    }

    public static void clear()
    {
        java.util.concurrent.ConcurrentLinkedQueue $r0, $r1;

        $r0 = <kanzi.util.sort.RadixSort$LinkedQueue: java.util.concurrent.ConcurrentLinkedQueue POOL_B>;

        virtualinvoke $r0.<java.util.concurrent.ConcurrentLinkedQueue: void clear()>();

        $r1 = <kanzi.util.sort.RadixSort$LinkedQueue: java.util.concurrent.ConcurrentLinkedQueue POOL_I>;

        virtualinvoke $r1.<java.util.concurrent.ConcurrentLinkedQueue: void clear()>();

        return;
    }


