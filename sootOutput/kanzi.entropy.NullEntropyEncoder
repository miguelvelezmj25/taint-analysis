    public void dispose()
    {
        kanzi.entropy.NullEntropyEncoder this;

        this := @this: kanzi.entropy.NullEntropyEncoder;

        return;
    }

    public int encode(byte[], int, int)
    {
        kanzi.entropy.NullEntropyEncoder this;
        byte[] array;
        int blkptr, len, len8, end8, $i0, $i1, i#17, $i3, $i7;
        kanzi.BitStreamException e, $r1;
        boolean $z0;
        kanzi.OutputBitStream $r0;
        byte $b4;
        long $l5;

        this := @this: kanzi.entropy.NullEntropyEncoder;

        array := @parameter0: byte[];

        blkptr := @parameter1: int;

        len := @parameter2: int;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(array);

        if array == null goto label1;

        $i0 = blkptr + len;

        $i1 = lengthof array;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i0 > $i1 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(blkptr);

        if blkptr < 0 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len);

        if len >= 0 goto label2;

     label1:
        return -1;

     label2:
        len8 = len & -8;

        end8 = blkptr + len8;

        i#17 = blkptr;

     label3:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#17);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(end8);

        if i#17 >= end8 goto label6;

        $z0 = specialinvoke this.<kanzi.entropy.NullEntropyEncoder: boolean encodeLong(byte[],int)>(array, i#17);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label5;

     label4:
        return i#17;

     label5:
        i#17 = i#17 + 8;

        goto label3;

     label6:
        $i3 = blkptr + len;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#17);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if i#17 >= $i3 goto label7;

        $r0 = this.<kanzi.entropy.NullEntropyEncoder: kanzi.OutputBitStream bitstream>;

        $b4 = array[i#17];

        $l5 = (long) $b4;

        interfaceinvoke $r0.<kanzi.OutputBitStream: int writeBits(long,int)>($l5, 8);

        i#17 = i#17 + 1;

        goto label6;

     label7:
        goto label9;

     label8:
        $r1 := @caughtexception;

        e = $r1;

        $i7 = i#17 - blkptr;

        return $i7;

     label9:
        return len;

        catch kanzi.BitStreamException from label3 to label4 with label8;
        catch kanzi.BitStreamException from label5 to label7 with label8;
    }

    private boolean encodeLong(byte[], int)
    {
        kanzi.entropy.NullEntropyEncoder this;
        byte[] array;
        int offset, $i3, $i8, $i13, $i18, $i23, $i28, $i33, $i37;
        byte $b0, $b4, $b9, $b14, $b19, $b24, $b29, $b34;
        short $s1, $s5, $s10, $s15, $s20, $s25, $s30, $s35;
        long $l2, val#9, $l6, $l7, val#22, $l11, $l12, val#35, $l16, $l17, val#48, $l21, $l22, val#61, $l26, $l27, val#74, $l31, $l32, val#87, $l36, val#98;
        kanzi.OutputBitStream $r0;
        boolean $z0;

        this := @this: kanzi.entropy.NullEntropyEncoder;

        array := @parameter0: byte[];

        offset := @parameter1: int;

        $b0 = array[offset];

        $s1 = $b0 & 255;

        $l2 = (long) $s1;

        val#9 = $l2 << 56;

        $i3 = offset + 1;

        $b4 = array[$i3];

        $s5 = $b4 & 255;

        $l6 = (long) $s5;

        $l7 = $l6 << 48;

        val#22 = val#9 | $l7;

        $i8 = offset + 2;

        $b9 = array[$i8];

        $s10 = $b9 & 255;

        $l11 = (long) $s10;

        $l12 = $l11 << 40;

        val#35 = val#22 | $l12;

        $i13 = offset + 3;

        $b14 = array[$i13];

        $s15 = $b14 & 255;

        $l16 = (long) $s15;

        $l17 = $l16 << 32;

        val#48 = val#35 | $l17;

        $i18 = offset + 4;

        $b19 = array[$i18];

        $s20 = $b19 & 255;

        $l21 = (long) $s20;

        $l22 = $l21 << 24;

        val#61 = val#48 | $l22;

        $i23 = offset + 5;

        $b24 = array[$i23];

        $s25 = $b24 & 255;

        $l26 = (long) $s25;

        $l27 = $l26 << 16;

        val#74 = val#61 | $l27;

        $i28 = offset + 6;

        $b29 = array[$i28];

        $s30 = $b29 & 255;

        $l31 = (long) $s30;

        $l32 = $l31 << 8;

        val#87 = val#74 | $l32;

        $i33 = offset + 7;

        $b34 = array[$i33];

        $s35 = $b34 & 255;

        $l36 = (long) $s35;

        val#98 = val#87 | $l36;

        $r0 = this.<kanzi.entropy.NullEntropyEncoder: kanzi.OutputBitStream bitstream>;

        $i37 = interfaceinvoke $r0.<kanzi.OutputBitStream: int writeBits(long,int)>(val#98, 64);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i37);

        if $i37 != 64 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void <init>(kanzi.OutputBitStream)
    {
        kanzi.entropy.NullEntropyEncoder this;
        kanzi.OutputBitStream bitstream;
        java.lang.NullPointerException $r0;

        this := @this: kanzi.entropy.NullEntropyEncoder;

        bitstream := @parameter0: kanzi.OutputBitStream;

        specialinvoke this.<java.lang.Object: void <init>()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(bitstream);

        if bitstream != null goto label1;

        $r0 = new java.lang.NullPointerException;

        specialinvoke $r0.<java.lang.NullPointerException: void <init>(java.lang.String)>("Invalid null bitstream parameter");

        throw $r0;

     label1:
        this.<kanzi.entropy.NullEntropyEncoder: kanzi.OutputBitStream bitstream> = bitstream;

        return;
    }


