    static int access$000(berkeley.com.sleepycat.je.log.FileReader$ReadWindow)
    {
        berkeley.com.sleepycat.je.log.FileReader$ReadWindow x0;
        int $i0;

        x0 := @parameter0: berkeley.com.sleepycat.je.log.FileReader$ReadWindow;

        $i0 = x0.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: int logVersion>;

        return $i0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "berkeley/com/sleepycat/je/log/FileReader";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <berkeley.com.sleepycat.je.log.FileReader$ReadWindow: boolean $assertionsDisabled> = $z1;

        return;
    }

    public void initAtFileStart(long)
    {
        berkeley.com.sleepycat.je.log.FileReader$ReadWindow this;
        long startLsn, $l0, $l1, $l2;

        this := @this: berkeley.com.sleepycat.je.log.FileReader$ReadWindow;

        startLsn := @parameter0: long;

        $l0 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long getFileNumber(long)>(startLsn);

        virtualinvoke this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: void setFileNum(long,int)>($l0, -1);

        $l1 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long getFileOffset(long)>(startLsn);

        this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: long startOffset> = $l1;

        $l2 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: long startOffset>;

        this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: long endOffset> = $l2;

        return;
    }

    protected void setFileNum(long, int)
    {
        berkeley.com.sleepycat.je.log.FileReader$ReadWindow this;
        long fileNum;
        int logVersion;

        this := @this: berkeley.com.sleepycat.je.log.FileReader$ReadWindow;

        fileNum := @parameter0: long;

        logVersion := @parameter1: int;

        this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: long fileNum> = fileNum;

        this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: int logVersion> = logVersion;

        return;
    }

    public long getEndOffset()
    {
        berkeley.com.sleepycat.je.log.FileReader$ReadWindow this;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.log.FileReader$ReadWindow;

        $l0 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: long endOffset>;

        return $l0;
    }

    protected void <init>(int, berkeley.com.sleepycat.je.dbi.EnvironmentImpl)
    {
        berkeley.com.sleepycat.je.log.FileReader$ReadWindow this;
        int readBufferSize, $i0;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        berkeley.com.sleepycat.je.dbi.DbConfigManager configManager;
        berkeley.com.sleepycat.je.config.IntConfigParam $r0;
        berkeley.com.sleepycat.je.log.FileManager $r1;
        java.nio.ByteBuffer $r2, $r3;

        this := @this: berkeley.com.sleepycat.je.log.FileReader$ReadWindow;

        readBufferSize := @parameter0: int;

        envImpl := @parameter1: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        specialinvoke this.<java.lang.Object: void <init>()>();

        configManager = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.DbConfigManager getConfigManager()>();

        $r0 = <berkeley.com.sleepycat.je.config.EnvironmentParams: berkeley.com.sleepycat.je.config.IntConfigParam LOG_ITERATOR_MAX_SIZE>;

        $i0 = virtualinvoke configManager.<berkeley.com.sleepycat.je.dbi.DbConfigManager: int getInt(berkeley.com.sleepycat.je.config.IntConfigParam)>($r0);

        this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: int maxReadBufferSize> = $i0;

        this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl> = envImpl;

        $r1 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.log.FileManager getFileManager()>();

        this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: berkeley.com.sleepycat.je.log.FileManager fileManager> = $r1;

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(readBufferSize);

        this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: java.nio.ByteBuffer readBuffer> = $r2;

        $r3 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: java.nio.ByteBuffer readBuffer>;

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        return;
    }

    long getNRepeatIteratorReads()
    {
        berkeley.com.sleepycat.je.log.FileReader$ReadWindow this;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.log.FileReader$ReadWindow;

        $l0 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: long nRepeatIteratorReads>;

        return $l0;
    }

    public long currentFileNum()
    {
        berkeley.com.sleepycat.je.log.FileReader$ReadWindow this;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.log.FileReader$ReadWindow;

        $l0 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: long fileNum>;

        return $l0;
    }

    long getCurrentLsn()
    {
        berkeley.com.sleepycat.je.log.FileReader$ReadWindow this;
        long $l0, $l1, $l3, $l4, $l5;
        java.nio.ByteBuffer $r0;
        int $i2;

        this := @this: berkeley.com.sleepycat.je.log.FileReader$ReadWindow;

        $l0 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: long fileNum>;

        $l1 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: long startOffset>;

        $r0 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: java.nio.ByteBuffer readBuffer>;

        $i2 = virtualinvoke $r0.<java.nio.ByteBuffer: int position()>();

        $l3 = (long) $i2;

        $l4 = $l1 + $l3;

        $l5 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long makeLsn(long,long)>($l0, $l4);

        return $l5;
    }

    void incrementBufferPosition(int)
    {
        berkeley.com.sleepycat.je.log.FileReader$ReadWindow this;
        int increment, currentPosition, $i0;
        java.nio.ByteBuffer $r0, $r1;

        this := @this: berkeley.com.sleepycat.je.log.FileReader$ReadWindow;

        increment := @parameter0: int;

        $r0 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: java.nio.ByteBuffer readBuffer>;

        currentPosition = virtualinvoke $r0.<java.nio.ByteBuffer: int position()>();

        $r1 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: java.nio.ByteBuffer readBuffer>;

        $i0 = currentPosition + increment;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i0);

        return;
    }

    java.nio.ByteBuffer getBuffer()
    {
        berkeley.com.sleepycat.je.log.FileReader$ReadWindow this;
        java.nio.ByteBuffer $r0;

        this := @this: berkeley.com.sleepycat.je.log.FileReader$ReadWindow;

        $r0 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: java.nio.ByteBuffer readBuffer>;

        return $r0;
    }

    int remaining()
    {
        berkeley.com.sleepycat.je.log.FileReader$ReadWindow this;
        java.nio.ByteBuffer $r0;
        int $i0;

        this := @this: berkeley.com.sleepycat.je.log.FileReader$ReadWindow;

        $r0 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: java.nio.ByteBuffer readBuffer>;

        $i0 = virtualinvoke $r0.<java.nio.ByteBuffer: int remaining()>();

        return $i0;
    }

    protected boolean fillNext(boolean, int) throws berkeley.com.sleepycat.je.log.ChecksumException, java.io.FileNotFoundException, berkeley.com.sleepycat.je.log.FileReader$EOFException, berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.log.FileReader$ReadWindow this;
        boolean singleFile, l4, l5, $z0;
        int bytesNeeded, $i6;
        java.lang.Long nextFile;
        java.lang.Throwable l6, $r5;
        berkeley.com.sleepycat.je.log.FileHandle fileHandle#4;
        berkeley.com.sleepycat.je.log.FileManager $r0, $r2, $r4;
        long $l0, $l1, $l2, $l3, $l4, $l5;
        berkeley.com.sleepycat.je.log.FileReader$EOFException $r1, $r3;

        this := @this: berkeley.com.sleepycat.je.log.FileReader$ReadWindow;

        singleFile := @parameter0: boolean;

        bytesNeeded := @parameter1: int;

        virtualinvoke this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: void adjustReadBufferSize(int)>(bytesNeeded);

        fileHandle#4 = null;

     label01:
        $r0 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: berkeley.com.sleepycat.je.log.FileManager fileManager>;

        $l0 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: long fileNum>;

        fileHandle#4 = virtualinvoke $r0.<berkeley.com.sleepycat.je.log.FileManager: berkeley.com.sleepycat.je.log.FileHandle getFileHandle(long)>($l0);

        $l1 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: long endOffset>;

        this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: long startOffset> = $l1;

        $l2 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: long startOffset>;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: boolean fillFromFile(berkeley.com.sleepycat.je.log.FileHandle,long)>(fileHandle#4, $l2);

        if $z0 == 0 goto label04;

     label02:
        if fileHandle#4 == null goto label03;

        virtualinvoke fileHandle#4.<berkeley.com.sleepycat.je.log.FileHandle: void release()>();

     label03:
        return 0;

     label04:
        if singleFile == 0 goto label05;

        $r1 = new berkeley.com.sleepycat.je.log.FileReader$EOFException;

        specialinvoke $r1.<berkeley.com.sleepycat.je.log.FileReader$EOFException: void <init>(java.lang.String)>("Single file only");

        throw $r1;

     label05:
        $r2 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: berkeley.com.sleepycat.je.log.FileManager fileManager>;

        $l3 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: long fileNum>;

        nextFile = virtualinvoke $r2.<berkeley.com.sleepycat.je.log.FileManager: java.lang.Long getFollowingFileNum(long,boolean)>($l3, 1);

        if nextFile != null goto label06;

        $r3 = new berkeley.com.sleepycat.je.log.FileReader$EOFException;

        specialinvoke $r3.<berkeley.com.sleepycat.je.log.FileReader$EOFException: void <init>()>();

        throw $r3;

     label06:
        virtualinvoke fileHandle#4.<berkeley.com.sleepycat.je.log.FileHandle: void release()>();

        fileHandle#4 = null;

        $r4 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: berkeley.com.sleepycat.je.log.FileManager fileManager>;

        $l4 = virtualinvoke nextFile.<java.lang.Long: long longValue()>();

        fileHandle#4 = virtualinvoke $r4.<berkeley.com.sleepycat.je.log.FileManager: berkeley.com.sleepycat.je.log.FileHandle getFileHandle(long)>($l4);

        $l5 = virtualinvoke nextFile.<java.lang.Long: long longValue()>();

        $i6 = virtualinvoke fileHandle#4.<berkeley.com.sleepycat.je.log.FileHandle: int getLogVersion()>();

        virtualinvoke this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: void setFileNum(long,int)>($l5, $i6);

        this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: long startOffset> = 0L;

        virtualinvoke this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: boolean fillFromFile(berkeley.com.sleepycat.je.log.FileHandle,long)>(fileHandle#4, 0L);

     label07:
        if fileHandle#4 == null goto label08;

        virtualinvoke fileHandle#4.<berkeley.com.sleepycat.je.log.FileHandle: void release()>();

     label08:
        return 1;

     label09:
        $r5 := @caughtexception;

     label10:
        l6 = $r5;

     label11:
        if fileHandle#4 == null goto label12;

        virtualinvoke fileHandle#4.<berkeley.com.sleepycat.je.log.FileHandle: void release()>();

     label12:
        throw l6;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label04 to label07 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    protected void adjustReadBufferSize(int)
    {
        berkeley.com.sleepycat.je.log.FileReader$ReadWindow this;
        int amountToRead, remainder, readBufferSize#4, $i0, $i1, readBufferSize#14, $i2, readBufferSize#22, $i3, readBufferSize#27, $i4;
        java.nio.ByteBuffer $r0, $r1, $r2;
        long $l5, $l6;

        this := @this: berkeley.com.sleepycat.je.log.FileReader$ReadWindow;

        amountToRead := @parameter0: int;

        $r0 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: java.nio.ByteBuffer readBuffer>;

        readBufferSize#4 = virtualinvoke $r0.<java.nio.ByteBuffer: int capacity()>();

        if amountToRead <= readBufferSize#4 goto label4;

        $i0 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: int maxReadBufferSize>;

        if readBufferSize#4 >= $i0 goto label3;

        $i1 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: int maxReadBufferSize>;

        if amountToRead >= $i1 goto label1;

        readBufferSize#14 = amountToRead;

        remainder = readBufferSize#14 % 1024;

        $i2 = 1024 - remainder;

        readBufferSize#22 = readBufferSize#14 + $i2;

        $i3 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: int maxReadBufferSize>;

        readBufferSize#27 = staticinvoke <java.lang.Math: int min(int,int)>(readBufferSize#22, $i3);

        goto label2;

     label1:
        readBufferSize#27 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: int maxReadBufferSize>;

     label2:
        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(readBufferSize#27);

        this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: java.nio.ByteBuffer readBuffer> = $r1;

     label3:
        $r2 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: java.nio.ByteBuffer readBuffer>;

        $i4 = virtualinvoke $r2.<java.nio.ByteBuffer: int capacity()>();

        if amountToRead <= $i4 goto label4;

        $l5 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: long nRepeatIteratorReads>;

        $l6 = $l5 + 1L;

        this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: long nRepeatIteratorReads> = $l6;

     label4:
        return;
    }

    protected boolean fillFromFile(berkeley.com.sleepycat.je.log.FileHandle, long) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.log.FileReader$ReadWindow this;
        berkeley.com.sleepycat.je.log.FileHandle fileHandle;
        long targetOffset, $l0, $l1, $l5, $l7, $l8, $l9, $l10;
        boolean foundData#2, $z0;
        java.nio.ByteBuffer $r0, $r4, $r6, $r7, $r9;
        berkeley.com.sleepycat.je.log.FileManager $r2;
        java.io.RandomAccessFile $r3;
        int $i2, $i3, $i4, $i6, $i11;

        this := @this: berkeley.com.sleepycat.je.log.FileReader$ReadWindow;

        fileHandle := @parameter0: berkeley.com.sleepycat.je.log.FileHandle;

        targetOffset := @parameter1: long;

        foundData#2 = 0;

        $r0 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: java.nio.ByteBuffer readBuffer>;

        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        $r2 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: berkeley.com.sleepycat.je.log.FileManager fileManager>;

        $r3 = virtualinvoke fileHandle.<berkeley.com.sleepycat.je.log.FileHandle: java.io.RandomAccessFile getFile()>();

        $r4 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: java.nio.ByteBuffer readBuffer>;

        $l0 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: long startOffset>;

        $l1 = virtualinvoke fileHandle.<berkeley.com.sleepycat.je.log.FileHandle: long getFileNum()>();

        $z0 = virtualinvoke $r2.<berkeley.com.sleepycat.je.log.FileManager: boolean readFromFile(java.io.RandomAccessFile,java.nio.ByteBuffer,long,long,boolean)>($r3, $r4, $l0, $l1, 0);

        if $z0 == 0 goto label1;

        foundData#2 = 1;

        $i2 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: int nReadOperations>;

        $i3 = $i2 + 1;

        this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: int nReadOperations> = $i3;

        $i4 = virtualinvoke fileHandle.<berkeley.com.sleepycat.je.log.FileHandle: int getLogVersion()>();

        this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: int logVersion> = $i4;

     label1:
        $l5 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: long startOffset>;

        $r6 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: java.nio.ByteBuffer readBuffer>;

        $i6 = virtualinvoke $r6.<java.nio.ByteBuffer: int position()>();

        $l7 = (long) $i6;

        $l8 = $l5 + $l7;

        this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: long endOffset> = $l8;

        $r7 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: java.nio.ByteBuffer readBuffer>;

        virtualinvoke $r7.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        $r9 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: java.nio.ByteBuffer readBuffer>;

        $l9 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: long startOffset>;

        $l10 = targetOffset - $l9;

        $i11 = (int) $l10;

        virtualinvoke $r9.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i11);

        return foundData#2;
    }

    boolean hasRemaining()
    {
        berkeley.com.sleepycat.je.log.FileReader$ReadWindow this;
        java.nio.ByteBuffer $r0;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.log.FileReader$ReadWindow;

        $r0 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: java.nio.ByteBuffer readBuffer>;

        $z0 = virtualinvoke $r0.<java.nio.ByteBuffer: boolean hasRemaining()>();

        return $z0;
    }

    public void slideAndFill(long, long, long, boolean) throws berkeley.com.sleepycat.je.log.ChecksumException, java.io.FileNotFoundException, berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.log.FileReader$ReadWindow this;
        long windowfileNum, windowStartOffset, targetOffset, $l1, $l2, $l3, $l4;
        boolean forward, foundData;
        berkeley.com.sleepycat.je.log.FileHandle fileHandle;
        java.lang.Throwable l10, $r13;
        berkeley.com.sleepycat.je.log.FileManager $r0;
        int $i0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r7, $r8, $r10;
        java.lang.String $r3, $r6, $r9, $r11;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r12;

        this := @this: berkeley.com.sleepycat.je.log.FileReader$ReadWindow;

        windowfileNum := @parameter0: long;

        windowStartOffset := @parameter1: long;

        targetOffset := @parameter2: long;

        forward := @parameter3: boolean;

        $r0 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: berkeley.com.sleepycat.je.log.FileManager fileManager>;

        fileHandle = virtualinvoke $r0.<berkeley.com.sleepycat.je.log.FileManager: berkeley.com.sleepycat.je.log.FileHandle getFileHandle(long)>(windowfileNum);

     label1:
        this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: long startOffset> = windowStartOffset;

        $i0 = virtualinvoke fileHandle.<berkeley.com.sleepycat.je.log.FileHandle: int getLogVersion()>();

        virtualinvoke this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: void setFileNum(long,int)>(windowfileNum, $i0);

        foundData = virtualinvoke this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: boolean fillFromFile(berkeley.com.sleepycat.je.log.FileHandle,long)>(fileHandle, targetOffset);

        if foundData != 0 goto label2;

        if forward != 0 goto label2;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Detected a log file gap when reading backwards. Target position = ");

        $l1 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long makeLsn(long,long)>(windowfileNum, targetOffset);

        $r3 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>($l1);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" starting position = ");

        $l2 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long makeLsn(long,long)>(windowfileNum, windowStartOffset);

        $r6 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>($l2);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" end position = ");

        $l3 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: long endOffset>;

        $l4 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long makeLsn(long,long)>(windowfileNum, $l3);

        $r9 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>($l4);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>($r11);

        throw $r12;

     label2:
        virtualinvoke fileHandle.<berkeley.com.sleepycat.je.log.FileHandle: void release()>();

        goto label6;

     label3:
        $r13 := @caughtexception;

     label4:
        l10 = $r13;

     label5:
        virtualinvoke fileHandle.<berkeley.com.sleepycat.je.log.FileHandle: void release()>();

        throw l10;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    int capacity()
    {
        berkeley.com.sleepycat.je.log.FileReader$ReadWindow this;
        java.nio.ByteBuffer $r0;
        int $i0;

        this := @this: berkeley.com.sleepycat.je.log.FileReader$ReadWindow;

        $r0 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: java.nio.ByteBuffer readBuffer>;

        $i0 = virtualinvoke $r0.<java.nio.ByteBuffer: int capacity()>();

        return $i0;
    }

    public void positionBuffer(long)
    {
        berkeley.com.sleepycat.je.log.FileReader$ReadWindow this;
        long targetOffset, $l0, $l1;
        boolean $z0, $z1;
        java.lang.AssertionError $r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r5;
        java.lang.String $r4, $r6;
        java.nio.ByteBuffer $r7;
        int $i2;

        this := @this: berkeley.com.sleepycat.je.log.FileReader$ReadWindow;

        targetOffset := @parameter0: long;

        $z0 = <berkeley.com.sleepycat.je.log.FileReader$ReadWindow: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: boolean containsOffset(long)>(targetOffset);

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(this);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" doesn\'t contain ");

        $r4 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(targetOffset);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.AssertionError: void <init>(java.lang.Object)>($r6);

        throw $r0;

     label1:
        $r7 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: java.nio.ByteBuffer readBuffer>;

        $l0 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: long startOffset>;

        $l1 = targetOffset - $l0;

        $i2 = (int) $l1;

        virtualinvoke $r7.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i2);

        return;
    }

    boolean containsOffset(long)
    {
        berkeley.com.sleepycat.je.log.FileReader$ReadWindow this;
        long targetOffset, $l0, $l2;
        byte $b1, $b3;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.log.FileReader$ReadWindow;

        targetOffset := @parameter0: long;

        $l0 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: long startOffset>;

        $b1 = targetOffset cmp $l0;

        if $b1 < 0 goto label1;

        $l2 = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: long endOffset>;

        $b3 = targetOffset cmp $l2;

        if $b3 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    int getAndResetNReads()
    {
        berkeley.com.sleepycat.je.log.FileReader$ReadWindow this;
        int tmp;

        this := @this: berkeley.com.sleepycat.je.log.FileReader$ReadWindow;

        tmp = this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: int nReadOperations>;

        this.<berkeley.com.sleepycat.je.log.FileReader$ReadWindow: int nReadOperations> = 0;

        return tmp;
    }


