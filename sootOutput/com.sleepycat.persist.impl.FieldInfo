    static com.sleepycat.persist.impl.FieldInfo getField(java.util.List, java.lang.String)
    {
        java.util.List fields;
        java.lang.String fieldName;
        int i;
        java.lang.Object $r0;
        com.sleepycat.persist.impl.FieldInfo $r1;

        fields := @parameter0: java.util.List;

        fieldName := @parameter1: java.lang.String;

        i = staticinvoke <com.sleepycat.persist.impl.FieldInfo: int getFieldIndex(java.util.List,java.lang.String)>(fields, fieldName);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i);

        if i < 0 goto label1;

        $r0 = interfaceinvoke fields.<java.util.List: java.lang.Object get(int)>(i);

        $r1 = (com.sleepycat.persist.impl.FieldInfo) $r0;

        return $r1;

     label1:
        return null;
    }

    static java.util.List getInstanceFields(java.lang.Class, com.sleepycat.persist.model.ClassMetadata)
    {
        java.lang.Class 'cls', $r18, $r26;
        com.sleepycat.persist.model.ClassMetadata clsMeta;
        java.util.Collection persistentFields;
        java.lang.String clsName, $r2, $r9, $r10, $r17, $r19, $r20, $r27, $r29, $r35;
        com.sleepycat.persist.model.FieldMetadata fieldMeta;
        java.lang.NoSuchFieldException e, $r11;
        java.lang.reflect.Field[] declaredFields, l4;
        int mods, $i0, $i1, $i2, l5#105, l6#107;
        java.util.ArrayList fields#2, $r0, $r37;
        java.util.Iterator l5#15;
        boolean $z0, $z1, $z2, $z3, $z5, $z6;
        java.lang.Object $r1;
        java.lang.IllegalArgumentException $r3, $r12, $r21, $r30;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r13, $r14, $r15, $r16, $r22, $r23, $r24, $r25, $r28, $r31, $r32, $r33, $r34;
        java.lang.reflect.Field field#42, field#113;
        com.sleepycat.persist.impl.FieldInfo $r36, $r38;

        'cls' := @parameter0: java.lang.Class;

        clsMeta := @parameter1: com.sleepycat.persist.model.ClassMetadata;

        fields#2 = null;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(clsMeta);

        if clsMeta == null goto label08;

        persistentFields = virtualinvoke clsMeta.<com.sleepycat.persist.model.ClassMetadata: java.util.Collection getPersistentFields()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(persistentFields);

        if persistentFields == null goto label08;

        $r0 = new java.util.ArrayList;

        $i0 = interfaceinvoke persistentFields.<java.util.Collection: int size()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        fields#2 = $r0;

        clsName = virtualinvoke 'cls'.<java.lang.Class: java.lang.String getName()>();

        l5#15 = interfaceinvoke persistentFields.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke l5#15.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label08;

        $r1 = interfaceinvoke l5#15.<java.util.Iterator: java.lang.Object next()>();

        fieldMeta = (com.sleepycat.persist.model.FieldMetadata) $r1;

        $r2 = virtualinvoke fieldMeta.<com.sleepycat.persist.model.FieldMetadata: java.lang.String getDeclaringClassName()>();

        $z1 = virtualinvoke clsName.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label02;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Persistent field ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(fieldMeta);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be declared in ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(clsName);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label02:
        $r10 = virtualinvoke fieldMeta.<com.sleepycat.persist.model.FieldMetadata: java.lang.String getName()>();

        field#42 = virtualinvoke 'cls'.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>($r10);

     label03:
        goto label05;

     label04:
        $r11 := @caughtexception;

        e = $r11;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Persistent field ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(fieldMeta);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not declared in this class");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r12;

     label05:
        $r18 = virtualinvoke field#42.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r19 = virtualinvoke $r18.<java.lang.Class: java.lang.String getName()>();

        $r20 = virtualinvoke fieldMeta.<com.sleepycat.persist.model.FieldMetadata: java.lang.String getClassName()>();

        $z2 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r20);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label06;

        $r21 = new java.lang.IllegalArgumentException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Persistent field ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(fieldMeta);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be of type ");

        $r26 = virtualinvoke field#42.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r27 = virtualinvoke $r26.<java.lang.Class: java.lang.String getName()>();

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r29);

        throw $r21;

     label06:
        $i1 = virtualinvoke field#42.<java.lang.reflect.Field: int getModifiers()>();

        $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label07;

        $r30 = new java.lang.IllegalArgumentException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Persistent field ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(fieldMeta);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" may not be static");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r35);

        throw $r30;

     label07:
        $r36 = new com.sleepycat.persist.impl.FieldInfo;

        specialinvoke $r36.<com.sleepycat.persist.impl.FieldInfo: void <init>(java.lang.reflect.Field)>(field#42);

        interfaceinvoke fields#2.<java.util.List: boolean add(java.lang.Object)>($r36);

        goto label01;

     label08:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(fields#2);

        if fields#2 != null goto label11;

        declaredFields = virtualinvoke 'cls'.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        $r37 = new java.util.ArrayList;

        $i2 = lengthof declaredFields;

        specialinvoke $r37.<java.util.ArrayList: void <init>(int)>($i2);

        fields#2 = $r37;

        l4 = declaredFields;

        l5#105 = lengthof l4;

        l6#107 = 0;

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l6#107);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l5#105);

        if l6#107 >= l5#105 goto label11;

        field#113 = l4[l6#107];

        mods = virtualinvoke field#113.<java.lang.reflect.Field: int getModifiers()>();

        $z5 = staticinvoke <java.lang.reflect.Modifier: boolean isTransient(int)>(mods);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 != 0 goto label10;

        $z6 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(mods);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 != 0 goto label10;

        $r38 = new com.sleepycat.persist.impl.FieldInfo;

        specialinvoke $r38.<com.sleepycat.persist.impl.FieldInfo: void <init>(java.lang.reflect.Field)>(field#113);

        interfaceinvoke fields#2.<java.util.List: boolean add(java.lang.Object)>($r38);

     label10:
        l6#107 = l6#107 + 1;

        goto label09;

     label11:
        return fields#2;

        catch java.lang.NoSuchFieldException from label02 to label03 with label04;
    }

    static int getFieldIndex(java.util.List, java.lang.String)
    {
        java.util.List fields;
        java.lang.String fieldName, $r1;
        com.sleepycat.persist.impl.FieldInfo field;
        int i#2, $i0;
        java.lang.Object $r0;
        boolean $z0;

        fields := @parameter0: java.util.List;

        fieldName := @parameter1: java.lang.String;

        i#2 = 0;

     label1:
        $i0 = interfaceinvoke fields.<java.util.List: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#2 >= $i0 goto label3;

        $r0 = interfaceinvoke fields.<java.util.List: java.lang.Object get(int)>(i#2);

        field = (com.sleepycat.persist.impl.FieldInfo) $r0;

        $r1 = virtualinvoke field.<com.sleepycat.persist.impl.FieldInfo: java.lang.String getName()>();

        $z0 = virtualinvoke fieldName.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        return i#2;

     label2:
        i#2 = i#2 + 1;

        goto label1;

     label3:
        return -1;
    }

    private void <init>(java.lang.reflect.Field)
    {
        com.sleepycat.persist.impl.FieldInfo this;
        java.lang.reflect.Field field;
        java.lang.String $r0, $r3;
        java.lang.Class $r1, $r2;

        this := @this: com.sleepycat.persist.impl.FieldInfo;

        field := @parameter0: java.lang.reflect.Field;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = virtualinvoke field.<java.lang.reflect.Field: java.lang.String getName()>();

        this.<com.sleepycat.persist.impl.FieldInfo: java.lang.String name> = $r0;

        $r1 = virtualinvoke field.<java.lang.reflect.Field: java.lang.Class getType()>();

        this.<com.sleepycat.persist.impl.FieldInfo: java.lang.Class cls> = $r1;

        $r2 = this.<com.sleepycat.persist.impl.FieldInfo: java.lang.Class cls>;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        this.<com.sleepycat.persist.impl.FieldInfo: java.lang.String className> = $r3;

        this.<com.sleepycat.persist.impl.FieldInfo: java.lang.reflect.Field field> = field;

        return;
    }


