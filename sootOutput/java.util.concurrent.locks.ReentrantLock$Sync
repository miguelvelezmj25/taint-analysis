    void <init>()
    {
        java.util.concurrent.locks.ReentrantLock$Sync l0;

        l0 := @this: java.util.concurrent.locks.ReentrantLock$Sync;

        specialinvoke l0.<java.util.concurrent.locks.AbstractQueuedSynchronizer: void <init>()>();

        return;
    }

    final java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject newCondition()
    {
        java.util.concurrent.locks.ReentrantLock$Sync l0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject $r0;

        l0 := @this: java.util.concurrent.locks.ReentrantLock$Sync;

        $r0 = new java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        specialinvoke $r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void <init>(java.util.concurrent.locks.AbstractQueuedSynchronizer)>(l0);

        return $r0;
    }

    protected final boolean tryRelease(int)
    {
        java.util.concurrent.locks.ReentrantLock$Sync l0;
        int l1, l2, $i0;
        java.lang.Thread $r0, $r1;
        java.lang.IllegalMonitorStateException $r2;
        boolean l3#11;

        l0 := @this: java.util.concurrent.locks.ReentrantLock$Sync;

        l1 := @parameter0: int;

        $i0 = virtualinvoke l0.<java.util.concurrent.locks.ReentrantLock$Sync: int getState()>();

        l2 = $i0 - l1;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r1 = virtualinvoke l0.<java.util.concurrent.locks.ReentrantLock$Sync: java.lang.Thread getExclusiveOwnerThread()>();

        if $r0 == $r1 goto label1;

        $r2 = new java.lang.IllegalMonitorStateException;

        specialinvoke $r2.<java.lang.IllegalMonitorStateException: void <init>()>();

        throw $r2;

     label1:
        l3#11 = 0;

        if l2 != 0 goto label2;

        l3#11 = 1;

        virtualinvoke l0.<java.util.concurrent.locks.ReentrantLock$Sync: void setExclusiveOwnerThread(java.lang.Thread)>(null);

     label2:
        virtualinvoke l0.<java.util.concurrent.locks.ReentrantLock$Sync: void setState(int)>(l2);

        return l3#11;
    }

    final boolean nonfairTryAcquire(int)
    {
        java.util.concurrent.locks.ReentrantLock$Sync l0;
        int l1, l3, l4;
        java.lang.Thread l2, $r0;
        boolean $z0;
        java.lang.Error $r1;

        l0 := @this: java.util.concurrent.locks.ReentrantLock$Sync;

        l1 := @parameter0: int;

        l2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        l3 = virtualinvoke l0.<java.util.concurrent.locks.ReentrantLock$Sync: int getState()>();

        if l3 != 0 goto label1;

        $z0 = virtualinvoke l0.<java.util.concurrent.locks.ReentrantLock$Sync: boolean compareAndSetState(int,int)>(0, l1);

        if $z0 == 0 goto label3;

        virtualinvoke l0.<java.util.concurrent.locks.ReentrantLock$Sync: void setExclusiveOwnerThread(java.lang.Thread)>(l2);

        return 1;

     label1:
        $r0 = virtualinvoke l0.<java.util.concurrent.locks.ReentrantLock$Sync: java.lang.Thread getExclusiveOwnerThread()>();

        if l2 != $r0 goto label3;

        l4 = l3 + l1;

        if l4 >= 0 goto label2;

        $r1 = new java.lang.Error;

        specialinvoke $r1.<java.lang.Error: void <init>(java.lang.String)>("Maximum lock count exceeded");

        throw $r1;

     label2:
        virtualinvoke l0.<java.util.concurrent.locks.ReentrantLock$Sync: void setState(int)>(l4);

        return 1;

     label3:
        return 0;
    }

    protected final boolean isHeldExclusively()
    {
        java.util.concurrent.locks.ReentrantLock$Sync l0;
        java.lang.Thread $r0, $r1;
        boolean $z0;

        l0 := @this: java.util.concurrent.locks.ReentrantLock$Sync;

        $r1 = virtualinvoke l0.<java.util.concurrent.locks.ReentrantLock$Sync: java.lang.Thread getExclusiveOwnerThread()>();

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        if $r1 != $r0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }


