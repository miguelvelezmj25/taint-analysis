    static void <clinit>()
    {
        int[] $r0, $r1;

        $r0 = newarray (int)[256];

        $r0[0] = 0;

        $r0[1] = 16;

        $r0[2] = 22;

        $r0[3] = 27;

        $r0[4] = 32;

        $r0[5] = 35;

        $r0[6] = 39;

        $r0[7] = 42;

        $r0[8] = 45;

        $r0[9] = 48;

        $r0[10] = 50;

        $r0[11] = 53;

        $r0[12] = 55;

        $r0[13] = 57;

        $r0[14] = 59;

        $r0[15] = 61;

        $r0[16] = 64;

        $r0[17] = 65;

        $r0[18] = 67;

        $r0[19] = 69;

        $r0[20] = 71;

        $r0[21] = 73;

        $r0[22] = 75;

        $r0[23] = 76;

        $r0[24] = 78;

        $r0[25] = 80;

        $r0[26] = 81;

        $r0[27] = 83;

        $r0[28] = 84;

        $r0[29] = 86;

        $r0[30] = 87;

        $r0[31] = 89;

        $r0[32] = 90;

        $r0[33] = 91;

        $r0[34] = 93;

        $r0[35] = 94;

        $r0[36] = 96;

        $r0[37] = 97;

        $r0[38] = 98;

        $r0[39] = 99;

        $r0[40] = 101;

        $r0[41] = 102;

        $r0[42] = 103;

        $r0[43] = 104;

        $r0[44] = 106;

        $r0[45] = 107;

        $r0[46] = 108;

        $r0[47] = 109;

        $r0[48] = 110;

        $r0[49] = 112;

        $r0[50] = 113;

        $r0[51] = 114;

        $r0[52] = 115;

        $r0[53] = 116;

        $r0[54] = 117;

        $r0[55] = 118;

        $r0[56] = 119;

        $r0[57] = 120;

        $r0[58] = 121;

        $r0[59] = 122;

        $r0[60] = 123;

        $r0[61] = 124;

        $r0[62] = 125;

        $r0[63] = 126;

        $r0[64] = 128;

        $r0[65] = 128;

        $r0[66] = 129;

        $r0[67] = 130;

        $r0[68] = 131;

        $r0[69] = 132;

        $r0[70] = 133;

        $r0[71] = 134;

        $r0[72] = 135;

        $r0[73] = 136;

        $r0[74] = 137;

        $r0[75] = 138;

        $r0[76] = 139;

        $r0[77] = 140;

        $r0[78] = 141;

        $r0[79] = 142;

        $r0[80] = 143;

        $r0[81] = 144;

        $r0[82] = 144;

        $r0[83] = 145;

        $r0[84] = 146;

        $r0[85] = 147;

        $r0[86] = 148;

        $r0[87] = 149;

        $r0[88] = 150;

        $r0[89] = 150;

        $r0[90] = 151;

        $r0[91] = 152;

        $r0[92] = 153;

        $r0[93] = 154;

        $r0[94] = 155;

        $r0[95] = 155;

        $r0[96] = 156;

        $r0[97] = 157;

        $r0[98] = 158;

        $r0[99] = 159;

        $r0[100] = 160;

        $r0[101] = 160;

        $r0[102] = 161;

        $r0[103] = 162;

        $r0[104] = 163;

        $r0[105] = 163;

        $r0[106] = 164;

        $r0[107] = 165;

        $r0[108] = 166;

        $r0[109] = 167;

        $r0[110] = 167;

        $r0[111] = 168;

        $r0[112] = 169;

        $r0[113] = 170;

        $r0[114] = 170;

        $r0[115] = 171;

        $r0[116] = 172;

        $r0[117] = 173;

        $r0[118] = 173;

        $r0[119] = 174;

        $r0[120] = 175;

        $r0[121] = 176;

        $r0[122] = 176;

        $r0[123] = 177;

        $r0[124] = 178;

        $r0[125] = 178;

        $r0[126] = 179;

        $r0[127] = 180;

        $r0[128] = 181;

        $r0[129] = 181;

        $r0[130] = 182;

        $r0[131] = 183;

        $r0[132] = 183;

        $r0[133] = 184;

        $r0[134] = 185;

        $r0[135] = 185;

        $r0[136] = 186;

        $r0[137] = 187;

        $r0[138] = 187;

        $r0[139] = 188;

        $r0[140] = 189;

        $r0[141] = 189;

        $r0[142] = 190;

        $r0[143] = 191;

        $r0[144] = 192;

        $r0[145] = 192;

        $r0[146] = 193;

        $r0[147] = 193;

        $r0[148] = 194;

        $r0[149] = 195;

        $r0[150] = 195;

        $r0[151] = 196;

        $r0[152] = 197;

        $r0[153] = 197;

        $r0[154] = 198;

        $r0[155] = 199;

        $r0[156] = 199;

        $r0[157] = 200;

        $r0[158] = 201;

        $r0[159] = 201;

        $r0[160] = 202;

        $r0[161] = 203;

        $r0[162] = 203;

        $r0[163] = 204;

        $r0[164] = 204;

        $r0[165] = 205;

        $r0[166] = 206;

        $r0[167] = 206;

        $r0[168] = 207;

        $r0[169] = 208;

        $r0[170] = 208;

        $r0[171] = 209;

        $r0[172] = 209;

        $r0[173] = 210;

        $r0[174] = 211;

        $r0[175] = 211;

        $r0[176] = 212;

        $r0[177] = 212;

        $r0[178] = 213;

        $r0[179] = 214;

        $r0[180] = 214;

        $r0[181] = 215;

        $r0[182] = 215;

        $r0[183] = 216;

        $r0[184] = 217;

        $r0[185] = 217;

        $r0[186] = 218;

        $r0[187] = 218;

        $r0[188] = 219;

        $r0[189] = 219;

        $r0[190] = 220;

        $r0[191] = 221;

        $r0[192] = 221;

        $r0[193] = 222;

        $r0[194] = 222;

        $r0[195] = 223;

        $r0[196] = 224;

        $r0[197] = 224;

        $r0[198] = 225;

        $r0[199] = 225;

        $r0[200] = 226;

        $r0[201] = 226;

        $r0[202] = 227;

        $r0[203] = 227;

        $r0[204] = 228;

        $r0[205] = 229;

        $r0[206] = 229;

        $r0[207] = 230;

        $r0[208] = 230;

        $r0[209] = 231;

        $r0[210] = 231;

        $r0[211] = 232;

        $r0[212] = 232;

        $r0[213] = 233;

        $r0[214] = 234;

        $r0[215] = 234;

        $r0[216] = 235;

        $r0[217] = 235;

        $r0[218] = 236;

        $r0[219] = 236;

        $r0[220] = 237;

        $r0[221] = 237;

        $r0[222] = 238;

        $r0[223] = 238;

        $r0[224] = 239;

        $r0[225] = 240;

        $r0[226] = 240;

        $r0[227] = 241;

        $r0[228] = 241;

        $r0[229] = 242;

        $r0[230] = 242;

        $r0[231] = 243;

        $r0[232] = 243;

        $r0[233] = 244;

        $r0[234] = 244;

        $r0[235] = 245;

        $r0[236] = 245;

        $r0[237] = 246;

        $r0[238] = 246;

        $r0[239] = 247;

        $r0[240] = 247;

        $r0[241] = 248;

        $r0[242] = 248;

        $r0[243] = 249;

        $r0[244] = 249;

        $r0[245] = 250;

        $r0[246] = 250;

        $r0[247] = 251;

        $r0[248] = 251;

        $r0[249] = 252;

        $r0[250] = 252;

        $r0[251] = 253;

        $r0[252] = 253;

        $r0[253] = 254;

        $r0[254] = 254;

        $r0[255] = 255;

        <kanzi.transform.DivSufSort: int[] SQQ_TABLE> = $r0;

        $r1 = newarray (int)[256];

        $r1[0] = -1;

        $r1[1] = 0;

        $r1[2] = 1;

        $r1[3] = 1;

        $r1[4] = 2;

        $r1[5] = 2;

        $r1[6] = 2;

        $r1[7] = 2;

        $r1[8] = 3;

        $r1[9] = 3;

        $r1[10] = 3;

        $r1[11] = 3;

        $r1[12] = 3;

        $r1[13] = 3;

        $r1[14] = 3;

        $r1[15] = 3;

        $r1[16] = 4;

        $r1[17] = 4;

        $r1[18] = 4;

        $r1[19] = 4;

        $r1[20] = 4;

        $r1[21] = 4;

        $r1[22] = 4;

        $r1[23] = 4;

        $r1[24] = 4;

        $r1[25] = 4;

        $r1[26] = 4;

        $r1[27] = 4;

        $r1[28] = 4;

        $r1[29] = 4;

        $r1[30] = 4;

        $r1[31] = 4;

        $r1[32] = 5;

        $r1[33] = 5;

        $r1[34] = 5;

        $r1[35] = 5;

        $r1[36] = 5;

        $r1[37] = 5;

        $r1[38] = 5;

        $r1[39] = 5;

        $r1[40] = 5;

        $r1[41] = 5;

        $r1[42] = 5;

        $r1[43] = 5;

        $r1[44] = 5;

        $r1[45] = 5;

        $r1[46] = 5;

        $r1[47] = 5;

        $r1[48] = 5;

        $r1[49] = 5;

        $r1[50] = 5;

        $r1[51] = 5;

        $r1[52] = 5;

        $r1[53] = 5;

        $r1[54] = 5;

        $r1[55] = 5;

        $r1[56] = 5;

        $r1[57] = 5;

        $r1[58] = 5;

        $r1[59] = 5;

        $r1[60] = 5;

        $r1[61] = 5;

        $r1[62] = 5;

        $r1[63] = 5;

        $r1[64] = 6;

        $r1[65] = 6;

        $r1[66] = 6;

        $r1[67] = 6;

        $r1[68] = 6;

        $r1[69] = 6;

        $r1[70] = 6;

        $r1[71] = 6;

        $r1[72] = 6;

        $r1[73] = 6;

        $r1[74] = 6;

        $r1[75] = 6;

        $r1[76] = 6;

        $r1[77] = 6;

        $r1[78] = 6;

        $r1[79] = 6;

        $r1[80] = 6;

        $r1[81] = 6;

        $r1[82] = 6;

        $r1[83] = 6;

        $r1[84] = 6;

        $r1[85] = 6;

        $r1[86] = 6;

        $r1[87] = 6;

        $r1[88] = 6;

        $r1[89] = 6;

        $r1[90] = 6;

        $r1[91] = 6;

        $r1[92] = 6;

        $r1[93] = 6;

        $r1[94] = 6;

        $r1[95] = 6;

        $r1[96] = 6;

        $r1[97] = 6;

        $r1[98] = 6;

        $r1[99] = 6;

        $r1[100] = 6;

        $r1[101] = 6;

        $r1[102] = 6;

        $r1[103] = 6;

        $r1[104] = 6;

        $r1[105] = 6;

        $r1[106] = 6;

        $r1[107] = 6;

        $r1[108] = 6;

        $r1[109] = 6;

        $r1[110] = 6;

        $r1[111] = 6;

        $r1[112] = 6;

        $r1[113] = 6;

        $r1[114] = 6;

        $r1[115] = 6;

        $r1[116] = 6;

        $r1[117] = 6;

        $r1[118] = 6;

        $r1[119] = 6;

        $r1[120] = 6;

        $r1[121] = 6;

        $r1[122] = 6;

        $r1[123] = 6;

        $r1[124] = 6;

        $r1[125] = 6;

        $r1[126] = 6;

        $r1[127] = 6;

        $r1[128] = 7;

        $r1[129] = 7;

        $r1[130] = 7;

        $r1[131] = 7;

        $r1[132] = 7;

        $r1[133] = 7;

        $r1[134] = 7;

        $r1[135] = 7;

        $r1[136] = 7;

        $r1[137] = 7;

        $r1[138] = 7;

        $r1[139] = 7;

        $r1[140] = 7;

        $r1[141] = 7;

        $r1[142] = 7;

        $r1[143] = 7;

        $r1[144] = 7;

        $r1[145] = 7;

        $r1[146] = 7;

        $r1[147] = 7;

        $r1[148] = 7;

        $r1[149] = 7;

        $r1[150] = 7;

        $r1[151] = 7;

        $r1[152] = 7;

        $r1[153] = 7;

        $r1[154] = 7;

        $r1[155] = 7;

        $r1[156] = 7;

        $r1[157] = 7;

        $r1[158] = 7;

        $r1[159] = 7;

        $r1[160] = 7;

        $r1[161] = 7;

        $r1[162] = 7;

        $r1[163] = 7;

        $r1[164] = 7;

        $r1[165] = 7;

        $r1[166] = 7;

        $r1[167] = 7;

        $r1[168] = 7;

        $r1[169] = 7;

        $r1[170] = 7;

        $r1[171] = 7;

        $r1[172] = 7;

        $r1[173] = 7;

        $r1[174] = 7;

        $r1[175] = 7;

        $r1[176] = 7;

        $r1[177] = 7;

        $r1[178] = 7;

        $r1[179] = 7;

        $r1[180] = 7;

        $r1[181] = 7;

        $r1[182] = 7;

        $r1[183] = 7;

        $r1[184] = 7;

        $r1[185] = 7;

        $r1[186] = 7;

        $r1[187] = 7;

        $r1[188] = 7;

        $r1[189] = 7;

        $r1[190] = 7;

        $r1[191] = 7;

        $r1[192] = 7;

        $r1[193] = 7;

        $r1[194] = 7;

        $r1[195] = 7;

        $r1[196] = 7;

        $r1[197] = 7;

        $r1[198] = 7;

        $r1[199] = 7;

        $r1[200] = 7;

        $r1[201] = 7;

        $r1[202] = 7;

        $r1[203] = 7;

        $r1[204] = 7;

        $r1[205] = 7;

        $r1[206] = 7;

        $r1[207] = 7;

        $r1[208] = 7;

        $r1[209] = 7;

        $r1[210] = 7;

        $r1[211] = 7;

        $r1[212] = 7;

        $r1[213] = 7;

        $r1[214] = 7;

        $r1[215] = 7;

        $r1[216] = 7;

        $r1[217] = 7;

        $r1[218] = 7;

        $r1[219] = 7;

        $r1[220] = 7;

        $r1[221] = 7;

        $r1[222] = 7;

        $r1[223] = 7;

        $r1[224] = 7;

        $r1[225] = 7;

        $r1[226] = 7;

        $r1[227] = 7;

        $r1[228] = 7;

        $r1[229] = 7;

        $r1[230] = 7;

        $r1[231] = 7;

        $r1[232] = 7;

        $r1[233] = 7;

        $r1[234] = 7;

        $r1[235] = 7;

        $r1[236] = 7;

        $r1[237] = 7;

        $r1[238] = 7;

        $r1[239] = 7;

        $r1[240] = 7;

        $r1[241] = 7;

        $r1[242] = 7;

        $r1[243] = 7;

        $r1[244] = 7;

        $r1[245] = 7;

        $r1[246] = 7;

        $r1[247] = 7;

        $r1[248] = 7;

        $r1[249] = 7;

        $r1[250] = 7;

        $r1[251] = 7;

        $r1[252] = 7;

        $r1[253] = 7;

        $r1[254] = 7;

        $r1[255] = 7;

        <kanzi.transform.DivSufSort: int[] LOG_TABLE> = $r1;

        return;
    }

    public void <init>()
    {
        kanzi.transform.DivSufSort this;
        int[] $r0, $r1, $r2, $r3;
        kanzi.transform.DivSufSort$Stack $r4, $r5, $r6;

        this := @this: kanzi.transform.DivSufSort;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = newarray (int)[256];

        this.<kanzi.transform.DivSufSort: int[] bucketA> = $r0;

        $r1 = newarray (int)[65536];

        this.<kanzi.transform.DivSufSort: int[] bucketB> = $r1;

        $r2 = newarray (int)[0];

        this.<kanzi.transform.DivSufSort: int[] sa> = $r2;

        $r3 = newarray (int)[0];

        this.<kanzi.transform.DivSufSort: int[] buffer> = $r3;

        $r4 = new kanzi.transform.DivSufSort$Stack;

        specialinvoke $r4.<kanzi.transform.DivSufSort$Stack: void <init>(int)>(16);

        this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack ssStack> = $r4;

        $r5 = new kanzi.transform.DivSufSort$Stack;

        specialinvoke $r5.<kanzi.transform.DivSufSort$Stack: void <init>(int)>(64);

        this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack> = $r5;

        $r6 = new kanzi.transform.DivSufSort$Stack;

        specialinvoke $r6.<kanzi.transform.DivSufSort$Stack: void <init>(int)>(32);

        this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack mergeStack> = $r6;

        return;
    }

    public void computeSuffixArray(byte[], int[], int, int)
    {
        kanzi.transform.DivSufSort this;
        byte[] input;
        int[] sa, $r0, $r1, $r2, $r3, $r4, $r5, $r6;
        int start, length, m, $i0, i#9, $i1;
        byte $b2;
        short $s3;

        this := @this: kanzi.transform.DivSufSort;

        input := @parameter0: byte[];

        sa := @parameter1: int[];

        start := @parameter2: int;

        length := @parameter3: int;

        $r0 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $i0 = lengthof $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(length);

        if $i0 >= length goto label1;

        $r1 = newarray (int)[length];

        this.<kanzi.transform.DivSufSort: int[] buffer> = $r1;

     label1:
        i#9 = 0;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(length);

        if i#9 >= length goto label3;

        $r2 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $i1 = start + i#9;

        $b2 = input[$i1];

        $s3 = $b2 & 255;

        $r2[i#9] = $s3;

        i#9 = i#9 + 1;

        goto label2;

     label3:
        this.<kanzi.transform.DivSufSort: int[] sa> = sa;

        virtualinvoke this.<kanzi.transform.DivSufSort: void reset()>();

        $r3 = this.<kanzi.transform.DivSufSort: int[] bucketA>;

        $r4 = this.<kanzi.transform.DivSufSort: int[] bucketB>;

        m = specialinvoke this.<kanzi.transform.DivSufSort: int sortTypeBstar(int[],int[],int)>($r3, $r4, length);

        $r5 = this.<kanzi.transform.DivSufSort: int[] bucketA>;

        $r6 = this.<kanzi.transform.DivSufSort: int[] bucketB>;

        specialinvoke this.<kanzi.transform.DivSufSort: void constructSuffixArray(int[],int[],int,int)>($r5, $r6, length, m);

        return;
    }

    private int sortTypeBstar(int[], int[], int)
    {
        kanzi.transform.DivSufSort this;
        int[] bucket_A, bucket_B, arr, $r0, $r2, $r4, $r6, $r7, $r9, $r10, $r13, $r14, $r15;
        int n, pab, t, bufSize, idx, i, tt, idx, tt, j, m#2, $i2, c0#9, i#15, c1#18, $i4, $i5, $i6, $i7, $i8, $i9, $i10, c1#49, $i11, $i12, $i13, $i14, $i15, m#72, c0#74, i#76, j#78, $i16, t#86, $i17, idx#95, $i18, $i19, c1#106, $i20, $i21, $i22, $i23, $i24, $i25, i#137, $i26, t#144, $i27, $i28, $i29, $i30, idx#158, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, c0#191, $i42, $i43, $i44, $i45, $i46, c0#212, j#214, c1#220, $i47, $i48, $i51, $i54, $i55, i#248, $i56, j#254, $i57, $i58, $i59, $i60, $i61, j#275, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, c0#309, i#313, j#315, c1#318, $i70, c1#330, $i71, $i72, $i73, $i74, $i75, $i76, $i77, k#362, c0#364, $i78, $i79, i#373, c1#378, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93;
        boolean $z0;

        this := @this: kanzi.transform.DivSufSort;

        bucket_A := @parameter0: int[];

        bucket_B := @parameter1: int[];

        n := @parameter2: int;

        m#2 = n;

        $r0 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $i2 = n - 1;

        c0#9 = $r0[$i2];

        arr = this.<kanzi.transform.DivSufSort: int[] sa>;

        i#15 = n - 1;

     label01:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#15);

        if i#15 < 0 goto label07;

     label02:
        c1#18 = c0#9;

        $i4 = bucket_A[c1#18];

        $i5 = $i4 + 1;

        bucket_A[c1#18] = $i5;

        i#15 = i#15 + -1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#15);

        if i#15 < 0 goto label03;

        $r2 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $i6 = $r2[i#15];

        c0#9 = $i6;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c1#18);

        if $i6 >= c1#18 goto label02;

     label03:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#15);

        if i#15 >= 0 goto label04;

        goto label07;

     label04:
        $i7 = c0#9 << 8;

        $i8 = $i7 + c1#18;

        $i9 = bucket_B[$i8];

        $i10 = $i9 + 1;

        bucket_B[$i8] = $i10;

        m#2 = m#2 + -1;

        arr[m#2] = i#15;

        i#15 = i#15 + -1;

        c1#49 = c0#9;

     label05:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#15);

        if i#15 < 0 goto label06;

        $r4 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $i11 = $r4[i#15];

        c0#9 = $i11;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i11);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c1#49);

        if $i11 > c1#49 goto label06;

        $i12 = c1#49 << 8;

        $i13 = $i12 + c0#9;

        $i14 = bucket_B[$i13];

        $i15 = $i14 + 1;

        bucket_B[$i13] = $i15;

        c1#49 = c0#9;

        i#15 = i#15 + -1;

        goto label05;

     label06:
        goto label01;

     label07:
        m#72 = n - m#2;

        c0#74 = 0;

        i#76 = 0;

        j#78 = 0;

     label08:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c0#74);

        if c0#74 >= 256 goto label11;

        $i16 = bucket_A[c0#74];

        t#86 = i#76 + $i16;

        $i17 = i#76 + j#78;

        bucket_A[c0#74] = $i17;

        idx#95 = c0#74 << 8;

        $i18 = idx#95 + c0#74;

        $i19 = bucket_B[$i18];

        i#76 = t#86 + $i19;

        c1#106 = c0#74 + 1;

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c1#106);

        if c1#106 >= 256 goto label10;

        $i20 = idx#95 + c1#106;

        $i21 = bucket_B[$i20];

        j#78 = j#78 + $i21;

        $i22 = idx#95 + c1#106;

        bucket_B[$i22] = j#78;

        $i23 = c1#106 << 8;

        $i24 = $i23 + c0#74;

        $i25 = bucket_B[$i24];

        i#76 = i#76 + $i25;

        c1#106 = c1#106 + 1;

        goto label09;

     label10:
        c0#74 = c0#74 + 1;

        goto label08;

     label11:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(m#72);

        if m#72 <= 0 goto label41;

        pab = n - m#72;

        i#137 = m#72 - 2;

     label12:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#137);

        if i#137 < 0 goto label13;

        $i26 = pab + i#137;

        t#144 = arr[$i26];

        $r6 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $i27 = $r6[t#144];

        $i28 = $i27 << 8;

        $r7 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $i29 = t#144 + 1;

        $i30 = $r7[$i29];

        idx#158 = $i28 + $i30;

        $i32 = bucket_B[idx#158];

        $i33 = $i32 - 1;

        bucket_B[idx#158] = $i33;

        $i34 = bucket_B[idx#158];

        arr[$i34] = i#137;

        i#137 = i#137 + -1;

        goto label12;

     label13:
        $i35 = pab + m#72;

        $i36 = $i35 - 1;

        t = arr[$i36];

        $r9 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $i37 = $r9[t];

        $i38 = $i37 << 8;

        $r10 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $i39 = t + 1;

        $i40 = $r10[$i39];

        c0#191 = $i38 + $i40;

        $i42 = bucket_B[c0#191];

        $i43 = $i42 - 1;

        bucket_B[c0#191] = $i43;

        $i44 = bucket_B[c0#191];

        $i45 = m#72 - 1;

        arr[$i44] = $i45;

        $i46 = n - m#72;

        bufSize = $i46 - m#72;

        c0#212 = 254;

        j#214 = m#72;

     label14:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#214);

        if j#214 <= 0 goto label20;

        idx = c0#212 << 8;

        c1#220 = 255;

     label15:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c1#220);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c0#212);

        if c1#220 <= c0#212 goto label19;

        $i47 = idx + c1#220;

        i = bucket_B[$i47];

        $i48 = i + 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#214);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i48);

        if j#214 <= $i48 goto label18;

        $i51 = j#214;

        $i54 = arr[i];

        $i55 = m#72 - 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i54);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i55);

        if $i54 != $i55 goto label16;

        $z0 = 1;

        goto label17;

     label16:
        $z0 = 0;

     label17:
        specialinvoke this.<kanzi.transform.DivSufSort: void ssSort(int,int,int,int,int,int,int,boolean)>(pab, i, $i51, m#72, bufSize, 2, n, $z0);

     label18:
        j#214 = i;

        c1#220 = c1#220 + -1;

        goto label15;

     label19:
        c0#212 = c0#212 + -1;

        goto label14;

     label20:
        i#248 = m#72 - 1;

     label21:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#248);

        if i#248 < 0 goto label26;

        $i56 = arr[i#248];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i56);

        if $i56 < 0 goto label24;

        j#254 = i#248;

     label22:
        $i57 = arr[i#248];

        $i58 = m#72 + $i57;

        arr[$i58] = i#248;

        i#248 = i#248 + -1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#248);

        if i#248 < 0 goto label23;

        $i59 = arr[i#248];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i59);

        if $i59 >= 0 goto label22;

     label23:
        $i60 = i#248 + 1;

        $i61 = i#248 - j#254;

        arr[$i60] = $i61;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#248);

        if i#248 > 0 goto label24;

        goto label26;

     label24:
        j#275 = i#248;

     label25:
        $i62 = arr[i#248];

        $i63 = $i62 ^ -1;

        arr[i#248] = $i63;

        $i64 = arr[i#248];

        $i65 = m#72 + $i64;

        arr[$i65] = j#275;

        i#248 = i#248 + -1;

        $i66 = arr[i#248];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i66);

        if $i66 < 0 goto label25;

        $i67 = arr[i#248];

        $i68 = m#72 + $i67;

        arr[$i68] = j#275;

        i#248 = i#248 + -1;

        goto label21;

     label26:
        specialinvoke this.<kanzi.transform.DivSufSort: void trSort(int,int)>(m#72, 1);

        $r13 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $i69 = n - 1;

        c0#309 = $r13[$i69];

        i#313 = n - 1;

        j#315 = m#72;

     label27:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#313);

        if i#313 < 0 goto label35;

        i#313 = i#313 + -1;

        c1#318 = c0#309;

     label28:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#313);

        if i#313 < 0 goto label29;

        $r14 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $i70 = $r14[i#313];

        c0#309 = $i70;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i70);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c1#318);

        if $i70 < c1#318 goto label29;

        c1#318 = c0#309;

        i#313 = i#313 + -1;

        goto label28;

     label29:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#313);

        if i#313 < 0 goto label27;

        tt = i#313;

        i#313 = i#313 + -1;

        c1#330 = c0#309;

     label30:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#313);

        if i#313 < 0 goto label31;

        $r15 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $i71 = $r15[i#313];

        c0#309 = $i71;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i71);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c1#330);

        if $i71 > c1#330 goto label31;

        c1#330 = c0#309;

        i#313 = i#313 + -1;

        goto label30;

     label31:
        j#315 = j#315 + -1;

        $i72 = m#72 + j#315;

        $i73 = arr[$i72];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(tt);

        if tt == 0 goto label32;

        $i74 = tt - i#313;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i74);

        if $i74 <= 1 goto label33;

     label32:
        $i75 = tt;

        goto label34;

     label33:
        $i75 = tt ^ -1;

     label34:
        arr[$i73] = $i75;

        goto label27;

     label35:
        $i76 = lengthof bucket_B;

        $i77 = $i76 - 1;

        bucket_B[$i77] = n;

        k#362 = m#72 - 1;

        c0#364 = 254;

     label36:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c0#364);

        if c0#364 < 0 goto label41;

        $i78 = c0#364 + 1;

        $i79 = bucket_A[$i78];

        i#373 = $i79 - 1;

        idx = c0#364 << 8;

        c1#378 = 255;

     label37:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c1#378);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c0#364);

        if c1#378 <= c0#364 goto label40;

        $i80 = c1#378 << 8;

        $i81 = $i80 + c0#364;

        $i82 = bucket_B[$i81];

        tt = i#373 - $i82;

        $i83 = c1#378 << 8;

        $i84 = $i83 + c0#364;

        bucket_B[$i84] = i#373;

        i#373 = tt;

        $i85 = idx + c1#378;

        j = bucket_B[$i85];

     label38:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(k#362);

        if j > k#362 goto label39;

        $i86 = arr[k#362];

        arr[i#373] = $i86;

        i#373 = i#373 + -1;

        k#362 = k#362 + -1;

        goto label38;

     label39:
        c1#378 = c1#378 + -1;

        goto label37;

     label40:
        $i87 = idx + c0#364;

        $i88 = $i87 + 1;

        $i89 = idx + c0#364;

        $i90 = bucket_B[$i89];

        $i91 = i#373 - $i90;

        $i92 = $i91 + 1;

        bucket_B[$i88] = $i92;

        $i93 = idx + c0#364;

        bucket_B[$i93] = i#373;

        c0#364 = c0#364 + -1;

        goto label36;

     label41:
        return m#72;
    }

    private void constructSuffixArray(int[], int[], int, int)
    {
        kanzi.transform.DivSufSort this;
        int[] bucket_A, bucket_B, $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        int n, m, idx, c0, c0, c1#3, $i0, $i1, i#15, k#17, c2#19, $i2, $i3, j#27, s#34, $i4, s#42, $i5, $i6, $i7, $i8, $i9, $i10, c2#82, k#86, k#90, $i12, $i13, $i14, $i15, i#105, s#112, $i16, s#120, $i17, $i18, $i19;

        this := @this: kanzi.transform.DivSufSort;

        bucket_A := @parameter0: int[];

        bucket_B := @parameter1: int[];

        n := @parameter2: int;

        m := @parameter3: int;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(m);

        if m <= 0 goto label09;

        c1#3 = 254;

     label01:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c1#3);

        if c1#3 < 0 goto label09;

        idx = c1#3 << 8;

        $i0 = idx + c1#3;

        $i1 = $i0 + 1;

        i#15 = bucket_B[$i1];

        k#17 = 0;

        c2#19 = -1;

        $i2 = c1#3 + 1;

        $i3 = bucket_A[$i2];

        j#27 = $i3 - 1;

     label02:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#27);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#15);

        if j#27 < i#15 goto label08;

        $r0 = this.<kanzi.transform.DivSufSort: int[] sa>;

        s#34 = $r0[j#27];

        $r1 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i4 = s#34 ^ -1;

        $r1[j#27] = $i4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(s#34);

        if s#34 > 0 goto label03;

        goto label07;

     label03:
        s#42 = s#34 + -1;

        $r2 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        c0 = $r2[s#42];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(s#42);

        if s#42 <= 0 goto label04;

        $r3 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $i5 = s#42 - 1;

        $i6 = $r3[$i5];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c0);

        if $i6 <= c0 goto label04;

        s#42 = s#42 ^ -1;

     label04:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c2#19);

        if c0 == c2#19 goto label06;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c2#19);

        if c2#19 < 0 goto label05;

        $i7 = idx + c2#19;

        bucket_B[$i7] = k#17;

     label05:
        c2#19 = c0;

        $i8 = idx + c2#19;

        k#17 = bucket_B[$i8];

     label06:
        $r4 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i9 = k#17;

        k#17 = k#17 + -1;

        $r4[$i9] = s#42;

     label07:
        j#27 = j#27 + -1;

        goto label02;

     label08:
        c1#3 = c1#3 + -1;

        goto label01;

     label09:
        $r5 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $i10 = n - 1;

        c2#82 = $r5[$i10];

        k#86 = bucket_A[c2#82];

        $r6 = this.<kanzi.transform.DivSufSort: int[] sa>;

        k#90 = k#86 + 1;

        $r7 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $i12 = n - 2;

        $i13 = $r7[$i12];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i13);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c2#82);

        if $i13 >= c2#82 goto label10;

        $i14 = n - 1;

        $i15 = $i14 ^ -1;

        goto label11;

     label10:
        $i15 = n - 1;

     label11:
        $r6[k#86] = $i15;

        i#105 = 0;

     label12:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#105);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n);

        if i#105 >= n goto label18;

        $r8 = this.<kanzi.transform.DivSufSort: int[] sa>;

        s#112 = $r8[i#105];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(s#112);

        if s#112 > 0 goto label13;

        $r9 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i16 = s#112 ^ -1;

        $r9[i#105] = $i16;

        goto label17;

     label13:
        s#120 = s#112 + -1;

        $r10 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        c0 = $r10[s#120];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(s#120);

        if s#120 == 0 goto label14;

        $r11 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $i17 = s#120 - 1;

        $i18 = $r11[$i17];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i18);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c0);

        if $i18 >= c0 goto label15;

     label14:
        s#120 = s#120 ^ -1;

     label15:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c2#82);

        if c0 == c2#82 goto label16;

        bucket_A[c2#82] = k#90;

        c2#82 = c0;

        k#90 = bucket_A[c2#82];

     label16:
        $r12 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i19 = k#90;

        k#90 = k#90 + 1;

        $r12[$i19] = s#120;

     label17:
        i#105 = i#105 + 1;

        goto label12;

     label18:
        return;
    }

    protected void reset()
    {
        kanzi.transform.DivSufSort this;
        kanzi.transform.DivSufSort$Stack $r0, $r1, $r2;
        int[] $r3, $r4, $r5, $r6;
        int $i3, i#18, $i4, i#29;

        this := @this: kanzi.transform.DivSufSort;

        $r0 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack ssStack>;

        staticinvoke <kanzi.transform.DivSufSort$Stack: int access$002(kanzi.transform.DivSufSort$Stack,int)>($r0, 0);

        $r1 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        staticinvoke <kanzi.transform.DivSufSort$Stack: int access$002(kanzi.transform.DivSufSort$Stack,int)>($r1, 0);

        $r2 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack mergeStack>;

        staticinvoke <kanzi.transform.DivSufSort$Stack: int access$002(kanzi.transform.DivSufSort$Stack,int)>($r2, 0);

        $r3 = this.<kanzi.transform.DivSufSort: int[] bucketA>;

        $i3 = lengthof $r3;

        i#18 = $i3 - 1;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#18);

        if i#18 < 0 goto label2;

        $r4 = this.<kanzi.transform.DivSufSort: int[] bucketA>;

        $r4[i#18] = 0;

        i#18 = i#18 + -1;

        goto label1;

     label2:
        $r5 = this.<kanzi.transform.DivSufSort: int[] bucketB>;

        $i4 = lengthof $r5;

        i#29 = $i4 - 1;

     label3:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#29);

        if i#29 < 0 goto label4;

        $r6 = this.<kanzi.transform.DivSufSort: int[] bucketB>;

        $r6[i#29] = 0;

        i#29 = i#29 + -1;

        goto label3;

     label4:
        return;
    }

    private void ssSort(int, int, int, int, int, int, int, boolean)
    {
        kanzi.transform.DivSufSort this;
        int pa, last, depth, n, p1, p11, first#1, buf#2, bufSize#3, limit#7, middle#9, $i0, $i1, i#32, a#34, $i2, $i3, $i4, curBufSize#51, curBuf#57, k#61, b#63, j#65, $i5, $i6, $i7, k#96, $i8, $i9, $i10, i#140, $i11, a#151, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        boolean lastSuffix;
        int[] $r0, $r1, $r2, $r3, $r4, $r5, $r6;

        this := @this: kanzi.transform.DivSufSort;

        pa := @parameter0: int;

        first#1 := @parameter1: int;

        last := @parameter2: int;

        buf#2 := @parameter3: int;

        bufSize#3 := @parameter4: int;

        depth := @parameter5: int;

        n := @parameter6: int;

        lastSuffix := @parameter7: boolean;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lastSuffix);

        if lastSuffix != 1 goto label01;

        first#1 = first#1 + 1;

     label01:
        limit#7 = 0;

        middle#9 = last;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(bufSize#3);

        if bufSize#3 >= 1024 goto label04;

        $i0 = last - first#1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(bufSize#3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if bufSize#3 >= $i0 goto label04;

        $i1 = last - first#1;

        limit#7 = staticinvoke <kanzi.transform.DivSufSort: int ssIsqrt(int)>($i1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(bufSize#3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(limit#7);

        if bufSize#3 >= limit#7 goto label03;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(limit#7);

        if limit#7 <= 1024 goto label02;

        limit#7 = 1024;

     label02:
        middle#9 = last - limit#7;

        buf#2 = middle#9;

        bufSize#3 = limit#7;

        goto label04;

     label03:
        limit#7 = 0;

     label04:
        i#32 = 0;

        a#34 = first#1;

     label05:
        $i2 = middle#9 - a#34;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 <= 1024 goto label10;

        $i3 = a#34 + 1024;

        specialinvoke this.<kanzi.transform.DivSufSort: void ssMultiKeyIntroSort(int,int,int,int)>(pa, a#34, $i3, depth);

        $i4 = a#34 + 1024;

        curBufSize#51 = last - $i4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(curBufSize#51);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(bufSize#3);

        if curBufSize#51 <= bufSize#3 goto label06;

        curBuf#57 = a#34 + 1024;

        goto label07;

     label06:
        curBufSize#51 = bufSize#3;

        curBuf#57 = buf#2;

     label07:
        k#61 = 1024;

        b#63 = a#34;

        j#65 = i#32;

     label08:
        $i5 = j#65 & 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i5 == 0 goto label09;

        $i6 = b#63 - k#61;

        $i7 = b#63 + k#61;

        specialinvoke this.<kanzi.transform.DivSufSort: void ssSwapMerge(int,int,int,int,int,int,int)>(pa, $i6, b#63, $i7, curBuf#57, curBufSize#51, depth);

        b#63 = b#63 - k#61;

        k#61 = k#61 << 1;

        j#65 = j#65 >> 1;

        goto label08;

     label09:
        a#34 = a#34 + 1024;

        i#32 = i#32 + 1;

        goto label05;

     label10:
        specialinvoke this.<kanzi.transform.DivSufSort: void ssMultiKeyIntroSort(int,int,int,int)>(pa, a#34, middle#9, depth);

        k#96 = 1024;

     label11:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#32);

        if i#32 == 0 goto label14;

        $i8 = i#32 & 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if $i8 != 0 goto label12;

        goto label13;

     label12:
        $i9 = a#34 - k#96;

        specialinvoke this.<kanzi.transform.DivSufSort: void ssSwapMerge(int,int,int,int,int,int,int)>(pa, $i9, a#34, middle#9, buf#2, bufSize#3, depth);

        a#34 = a#34 - k#96;

     label13:
        k#96 = k#96 << 1;

        i#32 = i#32 >> 1;

        goto label11;

     label14:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(limit#7);

        if limit#7 == 0 goto label15;

        specialinvoke this.<kanzi.transform.DivSufSort: void ssMultiKeyIntroSort(int,int,int,int)>(pa, middle#9, last, depth);

        specialinvoke this.<kanzi.transform.DivSufSort: void ssInplaceMerge(int,int,int,int,int)>(pa, first#1, middle#9, last, depth);

     label15:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lastSuffix);

        if lastSuffix != 1 goto label19;

        $r0 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i10 = first#1 - 1;

        i#140 = $r0[$i10];

        $r1 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i11 = pa + i#140;

        p1 = $r1[$i11];

        p11 = n - 2;

        a#151 = first#1;

     label16:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(a#151);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(last);

        if a#151 >= last goto label18;

        $r2 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i12 = $r2[a#151];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i12);

        if $i12 < 0 goto label17;

        $r3 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i13 = $r3[a#151];

        $i14 = pa + $i13;

        $i15 = specialinvoke this.<kanzi.transform.DivSufSort: int ssCompare(int,int,int,int)>(p1, p11, $i14, depth);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i15);

        if $i15 <= 0 goto label18;

     label17:
        $r4 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i16 = a#151 - 1;

        $r5 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i17 = $r5[a#151];

        $r4[$i16] = $i17;

        a#151 = a#151 + 1;

        goto label16;

     label18:
        $r6 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i18 = a#151 - 1;

        $r6[$i18] = i#140;

     label19:
        return;
    }

    private void trSort(int, int)
    {
        kanzi.transform.DivSufSort this;
        int n, depth, t, last, $i0, $i1, $i2, isad#16, $i3, $i4, first#23, skip#25, unsorted#27, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        int[] arr;
        kanzi.transform.DivSufSort$TRBudget budget, $r0;

        this := @this: kanzi.transform.DivSufSort;

        n := @parameter0: int;

        depth := @parameter1: int;

        arr = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r0 = new kanzi.transform.DivSufSort$TRBudget;

        $i0 = staticinvoke <kanzi.transform.DivSufSort: int trIlg(int)>(n);

        $i1 = $i0 * 2;

        $i2 = $i1 / 3;

        specialinvoke $r0.<kanzi.transform.DivSufSort$TRBudget: void <init>(int,int,kanzi.transform.DivSufSort$1)>($i2, n, null);

        budget = $r0;

        isad#16 = n + depth;

     label01:
        $i3 = arr[0];

        $i4 = neg n;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i3 <= $i4 goto label11;

        first#23 = 0;

        skip#25 = 0;

        unsorted#27 = 0;

     label02:
        t = arr[first#23];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(t);

        if t >= 0 goto label03;

        first#23 = first#23 - t;

        skip#25 = skip#25 + t;

        goto label08;

     label03:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(skip#25);

        if skip#25 == 0 goto label04;

        $i5 = first#23 + skip#25;

        arr[$i5] = skip#25;

        skip#25 = 0;

     label04:
        $i6 = n + t;

        $i7 = arr[$i6];

        last = $i7 + 1;

        $i8 = last - first#23;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if $i8 <= 1 goto label06;

        budget.<kanzi.transform.DivSufSort$TRBudget: int count> = 0;

        specialinvoke this.<kanzi.transform.DivSufSort: void trIntroSort(int,int,int,int,kanzi.transform.DivSufSort$TRBudget)>(n, isad#16, first#23, last, budget);

        $i9 = budget.<kanzi.transform.DivSufSort$TRBudget: int count>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        if $i9 == 0 goto label05;

        $i10 = budget.<kanzi.transform.DivSufSort$TRBudget: int count>;

        unsorted#27 = unsorted#27 + $i10;

        goto label07;

     label05:
        skip#25 = first#23 - last;

        goto label07;

     label06:
        $i11 = last - first#23;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i11);

        if $i11 != 1 goto label07;

        skip#25 = -1;

     label07:
        first#23 = last;

     label08:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(first#23);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n);

        if first#23 < n goto label02;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(skip#25);

        if skip#25 == 0 goto label09;

        $i12 = first#23 + skip#25;

        arr[$i12] = skip#25;

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(unsorted#27);

        if unsorted#27 != 0 goto label10;

        goto label11;

     label10:
        $i13 = isad#16 - n;

        isad#16 = isad#16 + $i13;

        goto label01;

     label11:
        return;
    }

    private static int ssIsqrt(int)
    {
        int x, e, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, y#68, $i23, $i24, $i25, $i26, $i27, $i28, y#89, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38;
        int[] $r0, $r1, $r2, $r3, $r4, $r5, $r6;

        x := @parameter0: int;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(x);

        if x < 1048576 goto label01;

        return 1024;

     label01:
        $i0 = x & -65536;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 == 0 goto label03;

        $i1 = x & -16777216;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 == 0 goto label02;

        $r0 = <kanzi.transform.DivSufSort: int[] LOG_TABLE>;

        $i2 = x >> 24;

        $i3 = $i2 & 255;

        $i4 = $r0[$i3];

        $i5 = 24 + $i4;

        goto label05;

     label02:
        $r1 = <kanzi.transform.DivSufSort: int[] LOG_TABLE>;

        $i6 = x >> 16;

        $i7 = $i6 & 255;

        $i8 = $r1[$i7];

        $i5 = 16 + $i8;

        goto label05;

     label03:
        $i9 = x & 65280;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        if $i9 == 0 goto label04;

        $r2 = <kanzi.transform.DivSufSort: int[] LOG_TABLE>;

        $i10 = x >> 8;

        $i11 = $i10 & 255;

        $i12 = $r2[$i11];

        $i5 = 8 + $i12;

        goto label05;

     label04:
        $r3 = <kanzi.transform.DivSufSort: int[] LOG_TABLE>;

        $i13 = x & 255;

        $i5 = $r3[$i13];

     label05:
        e = $i5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(e);

        if e >= 8 goto label06;

        $r4 = <kanzi.transform.DivSufSort: int[] SQQ_TABLE>;

        $i14 = $r4[x];

        $i15 = $i14 >> 4;

        return $i15;

     label06:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(e);

        if e < 16 goto label08;

        $r5 = <kanzi.transform.DivSufSort: int[] SQQ_TABLE>;

        $i16 = e - 6;

        $i17 = e & 1;

        $i18 = $i16 - $i17;

        $i19 = x >> $i18;

        $i20 = $r5[$i19];

        $i21 = e >> 1;

        $i22 = $i21 - 7;

        y#68 = $i20 << $i22;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(e);

        if e < 24 goto label07;

        $i23 = y#68 + 1;

        $i24 = x / y#68;

        $i25 = $i23 + $i24;

        y#68 = $i25 >> 1;

     label07:
        $i26 = y#68 + 1;

        $i27 = x / y#68;

        $i28 = $i26 + $i27;

        y#89 = $i28 >> 1;

        goto label09;

     label08:
        $r6 = <kanzi.transform.DivSufSort: int[] SQQ_TABLE>;

        $i29 = e - 6;

        $i30 = e & 1;

        $i31 = $i29 - $i30;

        $i32 = x >> $i31;

        $i33 = $r6[$i32];

        $i34 = e >> 1;

        $i35 = 7 - $i34;

        $i36 = $i33 >> $i35;

        y#89 = $i36 + 1;

     label09:
        $i37 = y#89 * y#89;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(x);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i37);

        if x >= $i37 goto label10;

        $i38 = y#89 - 1;

        goto label11;

     label10:
        $i38 = y#89;

     label11:
        return $i38;
    }

    private static int trIlg(int)
    {
        int n, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        int[] $r0, $r1, $r2, $r3;

        n := @parameter0: int;

        $i0 = n & -65536;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 == 0 goto label2;

        $i1 = n & -16777216;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 == 0 goto label1;

        $r0 = <kanzi.transform.DivSufSort: int[] LOG_TABLE>;

        $i2 = n >> 24;

        $i3 = $i2 & 255;

        $i4 = $r0[$i3];

        $i5 = 24 + $i4;

        goto label4;

     label1:
        $r1 = <kanzi.transform.DivSufSort: int[] LOG_TABLE>;

        $i6 = n >> 16;

        $i7 = $i6 & 255;

        $i8 = $r1[$i7];

        $i5 = 16 + $i8;

        goto label4;

     label2:
        $i9 = n & 65280;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        if $i9 == 0 goto label3;

        $r2 = <kanzi.transform.DivSufSort: int[] LOG_TABLE>;

        $i10 = n >> 8;

        $i11 = $i10 & 255;

        $i12 = $r2[$i11];

        $i5 = 8 + $i12;

        goto label4;

     label3:
        $r3 = <kanzi.transform.DivSufSort: int[] LOG_TABLE>;

        $i13 = n & 255;

        $i5 = $r3[$i13];

     label4:
        return $i5;
    }

    private void ssMultiKeyIntroSort(int, int, int, int)
    {
        kanzi.transform.DivSufSort this;
        int pa, idx, first#1, last#2, depth#3, $i0, limit#8, x#10, $i1, $i2, $i3, $i4, $i5, $i6, $i7, v#60, a#64, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, a#165, $i29, $i30, $i31, $i32, v#180, b#185, $i33, $i34, $i35, $i36, $i37, a#205, $i38, $i39, $i40, $i41, $i42, c#234, $i43, $i44, $i45, $i46, $i47, d#254, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, c#338, $i63, $i64, $i65, s#350, e#352, f#356, $i66, $i67, $i68, $i69, $i70, s#376, e#378, f#382, $i71, a#392, $i72, c#398, $i73, $i74, $i75, $i76, $i77, $i78, $i79, b#421, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110;
        kanzi.transform.DivSufSort$StackElement se;
        kanzi.transform.DivSufSort$Stack $r0, $r10, $r11, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47;
        int[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r48, $r49, $r50;

        this := @this: kanzi.transform.DivSufSort;

        pa := @parameter0: int;

        first#1 := @parameter1: int;

        last#2 := @parameter2: int;

        depth#3 := @parameter3: int;

        $i0 = last#2 - first#1;

        limit#8 = staticinvoke <kanzi.transform.DivSufSort: int ssIlg(int)>($i0);

        x#10 = 0;

     label01:
        $i1 = last#2 - first#1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 > 8 goto label04;

        $i2 = last#2 - first#1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 <= 1 goto label02;

        specialinvoke this.<kanzi.transform.DivSufSort: void ssInsertionSort(int,int,int,int)>(pa, first#1, last#2, depth#3);

     label02:
        $r0 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack ssStack>;

        se = virtualinvoke $r0.<kanzi.transform.DivSufSort$Stack: kanzi.transform.DivSufSort$StackElement pop()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(se);

        if se != null goto label03;

        return;

     label03:
        first#1 = se.<kanzi.transform.DivSufSort$StackElement: int a>;

        last#2 = se.<kanzi.transform.DivSufSort$StackElement: int b>;

        depth#3 = se.<kanzi.transform.DivSufSort$StackElement: int c>;

        limit#8 = se.<kanzi.transform.DivSufSort$StackElement: int d>;

        goto label01;

     label04:
        idx = depth#3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(limit#8);

        if limit#8 != 0 goto label05;

        $i3 = last#2 - first#1;

        specialinvoke this.<kanzi.transform.DivSufSort: void ssHeapSort(int,int,int,int)>(idx, pa, first#1, $i3);

     label05:
        limit#8 = limit#8 + -1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(limit#8);

        if limit#8 >= 0 goto label14;

        $r1 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $r2 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r3 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i4 = $r3[first#1];

        $i5 = pa + $i4;

        $i6 = $r2[$i5];

        $i7 = idx + $i6;

        v#60 = $r1[$i7];

        a#64 = first#1 + 1;

     label06:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(a#64);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(last#2);

        if a#64 >= last#2 goto label09;

        $r4 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $r5 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r6 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i8 = $r6[a#64];

        $i9 = pa + $i8;

        $i10 = $r5[$i9];

        $i11 = idx + $i10;

        $i12 = $r4[$i11];

        x#10 = $i12;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(v#60);

        if $i12 == v#60 goto label08;

        $i13 = a#64 - first#1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i13);

        if $i13 <= 1 goto label07;

        goto label09;

     label07:
        v#60 = x#10;

        first#1 = a#64;

     label08:
        a#64 = a#64 + 1;

        goto label06;

     label09:
        $r7 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $r8 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r9 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i14 = $r9[first#1];

        $i15 = pa + $i14;

        $i16 = $r8[$i15];

        $i17 = idx + $i16;

        $i18 = $i17 - 1;

        $i19 = $r7[$i18];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i19);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(v#60);

        if $i19 >= v#60 goto label10;

        first#1 = specialinvoke this.<kanzi.transform.DivSufSort: int ssPartition(int,int,int,int)>(pa, first#1, a#64, depth#3);

     label10:
        $i20 = a#64 - first#1;

        $i21 = last#2 - a#64;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i20);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i21);

        if $i20 > $i21 goto label12;

        $i22 = a#64 - first#1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i22);

        if $i22 <= 1 goto label11;

        $r10 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack ssStack>;

        virtualinvoke $r10.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>(a#64, last#2, depth#3, -1, 0);

        last#2 = a#64;

        depth#3 = depth#3 + 1;

        $i23 = a#64 - first#1;

        limit#8 = staticinvoke <kanzi.transform.DivSufSort: int ssIlg(int)>($i23);

        goto label01;

     label11:
        first#1 = a#64;

        limit#8 = -1;

        goto label01;

     label12:
        $i24 = last#2 - a#64;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i24);

        if $i24 <= 1 goto label13;

        $r11 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack ssStack>;

        $i25 = depth#3 + 1;

        $i26 = a#64 - first#1;

        $i27 = staticinvoke <kanzi.transform.DivSufSort: int ssIlg(int)>($i26);

        virtualinvoke $r11.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>(first#1, a#64, $i25, $i27, 0);

        first#1 = a#64;

        limit#8 = -1;

        goto label01;

     label13:
        last#2 = a#64;

        depth#3 = depth#3 + 1;

        $i28 = a#64 - first#1;

        limit#8 = staticinvoke <kanzi.transform.DivSufSort: int ssIlg(int)>($i28);

        goto label01;

     label14:
        a#165 = specialinvoke this.<kanzi.transform.DivSufSort: int ssPivot(int,int,int,int)>(idx, pa, first#1, last#2);

        $r12 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $r13 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r14 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i29 = $r14[a#165];

        $i30 = pa + $i29;

        $i31 = $r13[$i30];

        $i32 = idx + $i31;

        v#180 = $r12[$i32];

        specialinvoke this.<kanzi.transform.DivSufSort: void swapInSA(int,int)>(first#1, a#165);

        b#185 = first#1;

     label15:
        b#185 = b#185 + 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b#185);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(last#2);

        if b#185 >= last#2 goto label16;

        $r15 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $r16 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r17 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i33 = $r17[b#185];

        $i34 = pa + $i33;

        $i35 = $r16[$i34];

        $i36 = idx + $i35;

        $i37 = $r15[$i36];

        x#10 = $i37;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i37);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(v#180);

        if $i37 == v#180 goto label15;

        goto label16;

     label16:
        a#205 = b#185;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(a#205);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(last#2);

        if a#205 >= last#2 goto label19;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(x#10);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(v#180);

        if x#10 >= v#180 goto label19;

     label17:
        b#185 = b#185 + 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b#185);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(last#2);

        if b#185 >= last#2 goto label19;

        $r18 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $r19 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r20 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i38 = $r20[b#185];

        $i39 = pa + $i38;

        $i40 = $r19[$i39];

        $i41 = idx + $i40;

        $i42 = $r18[$i41];

        x#10 = $i42;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i42);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(v#180);

        if $i42 <= v#180 goto label18;

        goto label19;

     label18:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(x#10);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(v#180);

        if x#10 != v#180 goto label17;

        specialinvoke this.<kanzi.transform.DivSufSort: void swapInSA(int,int)>(b#185, a#205);

        a#205 = a#205 + 1;

        goto label17;

     label19:
        c#234 = last#2;

     label20:
        c#234 = c#234 + -1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c#234);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b#185);

        if c#234 <= b#185 goto label21;

        $r21 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $r22 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r23 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i43 = $r23[c#234];

        $i44 = pa + $i43;

        $i45 = $r22[$i44];

        $i46 = idx + $i45;

        $i47 = $r21[$i46];

        x#10 = $i47;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i47);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(v#180);

        if $i47 == v#180 goto label20;

        goto label21;

     label21:
        d#254 = c#234;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b#185);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(d#254);

        if b#185 >= d#254 goto label24;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(x#10);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(v#180);

        if x#10 <= v#180 goto label24;

     label22:
        c#234 = c#234 + -1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c#234);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b#185);

        if c#234 <= b#185 goto label24;

        $r24 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $r25 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r26 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i48 = $r26[c#234];

        $i49 = pa + $i48;

        $i50 = $r25[$i49];

        $i51 = idx + $i50;

        $i52 = $r24[$i51];

        x#10 = $i52;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i52);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(v#180);

        if $i52 >= v#180 goto label23;

        goto label24;

     label23:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(x#10);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(v#180);

        if x#10 != v#180 goto label22;

        specialinvoke this.<kanzi.transform.DivSufSort: void swapInSA(int,int)>(c#234, d#254);

        d#254 = d#254 + -1;

        goto label22;

     label24:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b#185);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c#234);

        if b#185 >= c#234 goto label29;

        specialinvoke this.<kanzi.transform.DivSufSort: void swapInSA(int,int)>(b#185, c#234);

     label25:
        b#185 = b#185 + 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b#185);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c#234);

        if b#185 >= c#234 goto label27;

        $r27 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $r28 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r29 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i53 = $r29[b#185];

        $i54 = pa + $i53;

        $i55 = $r28[$i54];

        $i56 = idx + $i55;

        $i57 = $r27[$i56];

        x#10 = $i57;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i57);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(v#180);

        if $i57 <= v#180 goto label26;

        goto label27;

     label26:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(x#10);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(v#180);

        if x#10 != v#180 goto label25;

        specialinvoke this.<kanzi.transform.DivSufSort: void swapInSA(int,int)>(b#185, a#205);

        a#205 = a#205 + 1;

        goto label25;

     label27:
        c#234 = c#234 + -1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c#234);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b#185);

        if c#234 <= b#185 goto label24;

        $r30 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $r31 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r32 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i58 = $r32[c#234];

        $i59 = pa + $i58;

        $i60 = $r31[$i59];

        $i61 = idx + $i60;

        $i62 = $r30[$i61];

        x#10 = $i62;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i62);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(v#180);

        if $i62 >= v#180 goto label28;

        goto label24;

     label28:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(x#10);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(v#180);

        if x#10 != v#180 goto label27;

        specialinvoke this.<kanzi.transform.DivSufSort: void swapInSA(int,int)>(c#234, d#254);

        d#254 = d#254 + -1;

        goto label27;

     label29:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(a#205);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(d#254);

        if a#205 > d#254 goto label46;

        c#338 = b#185 - 1;

        $i63 = a#205 - first#1;

        $i64 = b#185 - a#205;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i63);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i64);

        if $i63 <= $i64 goto label30;

        $i65 = b#185 - a#205;

        goto label31;

     label30:
        $i65 = a#205 - first#1;

     label31:
        s#350 = $i65;

        e#352 = first#1;

        f#356 = b#185 - s#350;

     label32:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(s#350);

        if s#350 <= 0 goto label33;

        specialinvoke this.<kanzi.transform.DivSufSort: void swapInSA(int,int)>(e#352, f#356);

        s#350 = s#350 + -1;

        e#352 = e#352 + 1;

        f#356 = f#356 + 1;

        goto label32;

     label33:
        $i66 = d#254 - c#338;

        $i67 = last#2 - d#254;

        $i68 = $i67 - 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i66);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i68);

        if $i66 <= $i68 goto label34;

        $i69 = last#2 - d#254;

        $i70 = $i69 - 1;

        goto label35;

     label34:
        $i70 = d#254 - c#338;

     label35:
        s#376 = $i70;

        e#378 = b#185;

        f#382 = last#2 - s#376;

     label36:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(s#376);

        if s#376 <= 0 goto label37;

        specialinvoke this.<kanzi.transform.DivSufSort: void swapInSA(int,int)>(e#378, f#382);

        s#376 = s#376 + -1;

        e#378 = e#378 + 1;

        f#382 = f#382 + 1;

        goto label36;

     label37:
        $i71 = b#185 - a#205;

        a#392 = first#1 + $i71;

        $i72 = d#254 - c#338;

        c#398 = last#2 - $i72;

        $r33 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $r34 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r35 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i73 = $r35[a#392];

        $i74 = pa + $i73;

        $i75 = $r34[$i74];

        $i76 = idx + $i75;

        $i77 = $i76 - 1;

        $i78 = $r33[$i77];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(v#180);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i78);

        if v#180 > $i78 goto label38;

        $i79 = a#392;

        goto label39;

     label38:
        $i79 = specialinvoke this.<kanzi.transform.DivSufSort: int ssPartition(int,int,int,int)>(pa, a#392, c#398, depth#3);

     label39:
        b#421 = $i79;

        $i80 = a#392 - first#1;

        $i81 = last#2 - c#398;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i80);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i81);

        if $i80 > $i81 goto label42;

        $i82 = last#2 - c#398;

        $i83 = c#398 - b#421;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i82);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i83);

        if $i82 > $i83 goto label40;

        $r36 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack ssStack>;

        $i84 = depth#3 + 1;

        $i85 = c#398 - b#421;

        $i86 = staticinvoke <kanzi.transform.DivSufSort: int ssIlg(int)>($i85);

        virtualinvoke $r36.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>(b#421, c#398, $i84, $i86, 0);

        $r37 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack ssStack>;

        virtualinvoke $r37.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>(c#398, last#2, depth#3, limit#8, 0);

        last#2 = a#392;

        goto label45;

     label40:
        $i87 = a#392 - first#1;

        $i88 = c#398 - b#421;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i87);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i88);

        if $i87 > $i88 goto label41;

        $r38 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack ssStack>;

        virtualinvoke $r38.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>(c#398, last#2, depth#3, limit#8, 0);

        $r39 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack ssStack>;

        $i89 = depth#3 + 1;

        $i90 = c#398 - b#421;

        $i91 = staticinvoke <kanzi.transform.DivSufSort: int ssIlg(int)>($i90);

        virtualinvoke $r39.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>(b#421, c#398, $i89, $i91, 0);

        last#2 = a#392;

        goto label45;

     label41:
        $r40 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack ssStack>;

        virtualinvoke $r40.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>(c#398, last#2, depth#3, limit#8, 0);

        $r41 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack ssStack>;

        virtualinvoke $r41.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>(first#1, a#392, depth#3, limit#8, 0);

        first#1 = b#421;

        last#2 = c#398;

        depth#3 = depth#3 + 1;

        $i92 = c#398 - b#421;

        limit#8 = staticinvoke <kanzi.transform.DivSufSort: int ssIlg(int)>($i92);

        goto label45;

     label42:
        $i93 = a#392 - first#1;

        $i94 = c#398 - b#421;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i93);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i94);

        if $i93 > $i94 goto label43;

        $r42 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack ssStack>;

        $i95 = depth#3 + 1;

        $i96 = c#398 - b#421;

        $i97 = staticinvoke <kanzi.transform.DivSufSort: int ssIlg(int)>($i96);

        virtualinvoke $r42.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>(b#421, c#398, $i95, $i97, 0);

        $r43 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack ssStack>;

        virtualinvoke $r43.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>(first#1, a#392, depth#3, limit#8, 0);

        first#1 = c#398;

        goto label45;

     label43:
        $i98 = last#2 - c#398;

        $i99 = c#398 - b#421;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i98);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i99);

        if $i98 > $i99 goto label44;

        $r44 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack ssStack>;

        virtualinvoke $r44.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>(first#1, a#392, depth#3, limit#8, 0);

        $r45 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack ssStack>;

        $i100 = depth#3 + 1;

        $i101 = c#398 - b#421;

        $i102 = staticinvoke <kanzi.transform.DivSufSort: int ssIlg(int)>($i101);

        virtualinvoke $r45.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>(b#421, c#398, $i100, $i102, 0);

        first#1 = c#398;

        goto label45;

     label44:
        $r46 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack ssStack>;

        virtualinvoke $r46.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>(first#1, a#392, depth#3, limit#8, 0);

        $r47 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack ssStack>;

        virtualinvoke $r47.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>(c#398, last#2, depth#3, limit#8, 0);

        first#1 = b#421;

        last#2 = c#398;

        depth#3 = depth#3 + 1;

        $i103 = c#398 - b#421;

        limit#8 = staticinvoke <kanzi.transform.DivSufSort: int ssIlg(int)>($i103);

     label45:
        goto label49;

     label46:
        $r48 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $r49 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r50 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i104 = $r50[first#1];

        $i105 = pa + $i104;

        $i106 = $r49[$i105];

        $i107 = idx + $i106;

        $i108 = $i107 - 1;

        $i109 = $r48[$i108];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i109);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(v#180);

        if $i109 >= v#180 goto label47;

        first#1 = specialinvoke this.<kanzi.transform.DivSufSort: int ssPartition(int,int,int,int)>(pa, first#1, last#2, depth#3);

        $i110 = last#2 - first#1;

        limit#8 = staticinvoke <kanzi.transform.DivSufSort: int ssIlg(int)>($i110);

        goto label48;

     label47:
        limit#8 = limit#8 + 1;

     label48:
        depth#3 = depth#3 + 1;

     label49:
        goto label01;
    }

    private void ssSwapMerge(int, int, int, int, int, int, int)
    {
        kanzi.transform.DivSufSort this;
        int pa, buf, bufSize, depth, lm, rm, first#1, middle#2, last#3, check#7, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, len#184, m#186, half#190, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, l#245, r#247, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i70, $i71, $i72, $i75, $i77, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109;
        int[] arr, $r0, $r5;
        kanzi.transform.DivSufSort$StackElement se, se#82, se#163;
        kanzi.transform.DivSufSort$Stack $r1, $r2, $r3, $r4, $r6;
        byte next#249, $b69, $b73, $b74, $b76, $b78;

        this := @this: kanzi.transform.DivSufSort;

        pa := @parameter0: int;

        first#1 := @parameter1: int;

        middle#2 := @parameter2: int;

        last#3 := @parameter3: int;

        buf := @parameter4: int;

        bufSize := @parameter5: int;

        depth := @parameter6: int;

        arr = this.<kanzi.transform.DivSufSort: int[] sa>;

        check#7 = 0;

     label01:
        $i0 = last#3 - middle#2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(bufSize);

        if $i0 > bufSize goto label07;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(first#1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(middle#2);

        if first#1 >= middle#2 goto label02;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(middle#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(last#3);

        if middle#2 >= last#3 goto label02;

        specialinvoke this.<kanzi.transform.DivSufSort: void ssMergeBackward(int,int,int,int,int,int)>(pa, first#1, middle#2, last#3, buf, depth);

     label02:
        $i1 = check#7 & 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 != 0 goto label03;

        $i2 = check#7 & 2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 == 0 goto label04;

        $r0 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i3 = first#1 - 1;

        $i4 = $r0[$i3];

        $i5 = staticinvoke <kanzi.transform.DivSufSort: int getIndex(int)>($i4);

        $i6 = pa + $i5;

        $i7 = arr[first#1];

        $i8 = pa + $i7;

        $i9 = specialinvoke this.<kanzi.transform.DivSufSort: int ssCompare(int,int,int)>($i6, $i8, depth);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        if $i9 != 0 goto label04;

     label03:
        $i10 = arr[first#1];

        $i11 = $i10 ^ -1;

        arr[first#1] = $i11;

     label04:
        $i12 = check#7 & 4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i12);

        if $i12 == 0 goto label05;

        $i13 = last#3 - 1;

        $i14 = arr[$i13];

        $i15 = staticinvoke <kanzi.transform.DivSufSort: int getIndex(int)>($i14);

        $i16 = pa + $i15;

        $i17 = arr[last#3];

        $i18 = pa + $i17;

        $i19 = specialinvoke this.<kanzi.transform.DivSufSort: int ssCompare(int,int,int)>($i16, $i18, depth);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i19);

        if $i19 != 0 goto label05;

        $i20 = arr[last#3];

        $i21 = $i20 ^ -1;

        arr[last#3] = $i21;

     label05:
        $r1 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack mergeStack>;

        se#82 = virtualinvoke $r1.<kanzi.transform.DivSufSort$Stack: kanzi.transform.DivSufSort$StackElement pop()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(se#82);

        if se#82 != null goto label06;

        return;

     label06:
        first#1 = se#82.<kanzi.transform.DivSufSort$StackElement: int a>;

        middle#2 = se#82.<kanzi.transform.DivSufSort$StackElement: int b>;

        last#3 = se#82.<kanzi.transform.DivSufSort$StackElement: int c>;

        check#7 = se#82.<kanzi.transform.DivSufSort$StackElement: int d>;

        goto label01;

     label07:
        $i22 = middle#2 - first#1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i22);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(bufSize);

        if $i22 > bufSize goto label13;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(first#1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(middle#2);

        if first#1 >= middle#2 goto label08;

        specialinvoke this.<kanzi.transform.DivSufSort: void ssMergeForward(int,int,int,int,int,int)>(pa, first#1, middle#2, last#3, buf, depth);

     label08:
        $i23 = check#7 & 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i23);

        if $i23 != 0 goto label09;

        $i24 = check#7 & 2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i24);

        if $i24 == 0 goto label10;

        $i25 = first#1 - 1;

        $i26 = arr[$i25];

        $i27 = staticinvoke <kanzi.transform.DivSufSort: int getIndex(int)>($i26);

        $i28 = pa + $i27;

        $i29 = arr[first#1];

        $i30 = pa + $i29;

        $i31 = specialinvoke this.<kanzi.transform.DivSufSort: int ssCompare(int,int,int)>($i28, $i30, depth);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i31);

        if $i31 != 0 goto label10;

     label09:
        $i32 = arr[first#1];

        $i33 = $i32 ^ -1;

        arr[first#1] = $i33;

     label10:
        $i34 = check#7 & 4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i34);

        if $i34 == 0 goto label11;

        $i35 = last#3 - 1;

        $i36 = arr[$i35];

        $i37 = staticinvoke <kanzi.transform.DivSufSort: int getIndex(int)>($i36);

        $i38 = pa + $i37;

        $i39 = arr[last#3];

        $i40 = pa + $i39;

        $i41 = specialinvoke this.<kanzi.transform.DivSufSort: int ssCompare(int,int,int)>($i38, $i40, depth);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i41);

        if $i41 != 0 goto label11;

        $i42 = arr[last#3];

        $i43 = $i42 ^ -1;

        arr[last#3] = $i43;

     label11:
        $r2 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack mergeStack>;

        se#163 = virtualinvoke $r2.<kanzi.transform.DivSufSort$Stack: kanzi.transform.DivSufSort$StackElement pop()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(se#163);

        if se#163 != null goto label12;

        return;

     label12:
        first#1 = se#163.<kanzi.transform.DivSufSort$StackElement: int a>;

        middle#2 = se#163.<kanzi.transform.DivSufSort$StackElement: int b>;

        last#3 = se#163.<kanzi.transform.DivSufSort$StackElement: int c>;

        check#7 = se#163.<kanzi.transform.DivSufSort$StackElement: int d>;

        goto label01;

     label13:
        $i44 = middle#2 - first#1;

        $i45 = last#3 - middle#2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i44);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i45);

        if $i44 >= $i45 goto label14;

        $i46 = middle#2 - first#1;

        goto label15;

     label14:
        $i46 = last#3 - middle#2;

     label15:
        len#184 = $i46;

        m#186 = 0;

        half#190 = len#184 >> 1;

     label16:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len#184);

        if len#184 <= 0 goto label18;

        $i47 = middle#2 + m#186;

        $i48 = $i47 + half#190;

        $i49 = arr[$i48];

        $i50 = staticinvoke <kanzi.transform.DivSufSort: int getIndex(int)>($i49);

        $i51 = pa + $i50;

        $i52 = middle#2 - m#186;

        $i53 = $i52 - half#190;

        $i54 = $i53 - 1;

        $i55 = arr[$i54];

        $i56 = staticinvoke <kanzi.transform.DivSufSort: int getIndex(int)>($i55);

        $i57 = pa + $i56;

        $i58 = specialinvoke this.<kanzi.transform.DivSufSort: int ssCompare(int,int,int)>($i51, $i57, depth);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i58);

        if $i58 >= 0 goto label17;

        $i59 = half#190 + 1;

        m#186 = m#186 + $i59;

        $i60 = len#184 & 1;

        $i61 = $i60 ^ 1;

        half#190 = half#190 - $i61;

     label17:
        len#184 = half#190;

        half#190 = half#190 >> 1;

        goto label16;

     label18:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(m#186);

        if m#186 <= 0 goto label29;

        lm = middle#2 - m#186;

        rm = middle#2 + m#186;

        specialinvoke this.<kanzi.transform.DivSufSort: void ssBlockSwap(int,int,int)>(lm, middle#2, m#186);

        l#245 = middle#2;

        r#247 = l#245;

        next#249 = 0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(rm);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(last#3);

        if rm >= last#3 goto label25;

        $i62 = arr[rm];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i62);

        if $i62 >= 0 goto label22;

        $i63 = arr[rm];

        $i64 = $i63 ^ -1;

        arr[rm] = $i64;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(first#1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lm);

        if first#1 >= lm goto label21;

        l#245 = l#245 + -1;

     label19:
        $i65 = arr[l#245];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i65);

        if $i65 >= 0 goto label20;

        l#245 = l#245 + -1;

        goto label19;

     label20:
        next#249 = next#249 | 4;

     label21:
        next#249 = next#249 | 1;

        goto label25;

     label22:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(first#1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lm);

        if first#1 >= lm goto label25;

     label23:
        $i66 = arr[r#247];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i66);

        if $i66 >= 0 goto label24;

        r#247 = r#247 + 1;

        goto label23;

     label24:
        next#249 = next#249 | 2;

     label25:
        $i67 = l#245 - first#1;

        $i68 = last#3 - r#247;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i67);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i68);

        if $i67 > $i68 goto label26;

        $r3 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack mergeStack>;

        $b69 = next#249 & 3;

        $i70 = check#7 & 4;

        $i71 = $b69 | $i70;

        virtualinvoke $r3.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>(r#247, rm, last#3, $i71, 0);

        middle#2 = lm;

        last#3 = l#245;

        $i72 = check#7 & 3;

        $b73 = next#249 & 4;

        check#7 = $i72 | $b73;

        goto label28;

     label26:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(r#247);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(middle#2);

        if r#247 != middle#2 goto label27;

        $b74 = next#249 & 2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b74);

        if $b74 == 0 goto label27;

        next#249 = next#249 ^ 6;

     label27:
        $r4 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack mergeStack>;

        $i75 = check#7 & 3;

        $b76 = next#249 & 4;

        $i77 = $i75 | $b76;

        virtualinvoke $r4.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>(first#1, lm, l#245, $i77, 0);

        first#1 = r#247;

        middle#2 = rm;

        $b78 = next#249 & 3;

        $i79 = check#7 & 4;

        check#7 = $b78 | $i79;

     label28:
        goto label35;

     label29:
        $i80 = middle#2 - 1;

        $i81 = arr[$i80];

        $i82 = staticinvoke <kanzi.transform.DivSufSort: int getIndex(int)>($i81);

        $i83 = pa + $i82;

        $i84 = arr[middle#2];

        $i85 = pa + $i84;

        $i86 = specialinvoke this.<kanzi.transform.DivSufSort: int ssCompare(int,int,int)>($i83, $i85, depth);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i86);

        if $i86 != 0 goto label30;

        $i87 = arr[middle#2];

        $i88 = $i87 ^ -1;

        arr[middle#2] = $i88;

     label30:
        $i89 = check#7 & 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i89);

        if $i89 != 0 goto label31;

        $i90 = check#7 & 2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i90);

        if $i90 == 0 goto label32;

        $r5 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i91 = first#1 - 1;

        $i92 = $r5[$i91];

        $i93 = staticinvoke <kanzi.transform.DivSufSort: int getIndex(int)>($i92);

        $i94 = pa + $i93;

        $i95 = arr[first#1];

        $i96 = pa + $i95;

        $i97 = specialinvoke this.<kanzi.transform.DivSufSort: int ssCompare(int,int,int)>($i94, $i96, depth);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i97);

        if $i97 != 0 goto label32;

     label31:
        $i98 = arr[first#1];

        $i99 = $i98 ^ -1;

        arr[first#1] = $i99;

     label32:
        $i100 = check#7 & 4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i100);

        if $i100 == 0 goto label33;

        $i101 = last#3 - 1;

        $i102 = arr[$i101];

        $i103 = staticinvoke <kanzi.transform.DivSufSort: int getIndex(int)>($i102);

        $i104 = pa + $i103;

        $i105 = arr[last#3];

        $i106 = pa + $i105;

        $i107 = specialinvoke this.<kanzi.transform.DivSufSort: int ssCompare(int,int,int)>($i104, $i106, depth);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i107);

        if $i107 != 0 goto label33;

        $i108 = arr[last#3];

        $i109 = $i108 ^ -1;

        arr[last#3] = $i109;

     label33:
        $r6 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack mergeStack>;

        se = virtualinvoke $r6.<kanzi.transform.DivSufSort$Stack: kanzi.transform.DivSufSort$StackElement pop()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(se);

        if se != null goto label34;

        return;

     label34:
        first#1 = se.<kanzi.transform.DivSufSort$StackElement: int a>;

        middle#2 = se.<kanzi.transform.DivSufSort$StackElement: int b>;

        last#3 = se.<kanzi.transform.DivSufSort$StackElement: int c>;

        check#7 = se.<kanzi.transform.DivSufSort$StackElement: int d>;

     label35:
        goto label01;
    }

    private void ssInplaceMerge(int, int, int, int, int)
    {
        kanzi.transform.DivSufSort this;
        int pa, first, depth, b, q, middle#1, last#2, $i0, $i1, $i2, $i3, $i4, p#21, $i5, $i6, a#31, r#33, len#37, half#41, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        int[] arr;
        boolean x#11;

        this := @this: kanzi.transform.DivSufSort;

        pa := @parameter0: int;

        first := @parameter1: int;

        middle#1 := @parameter2: int;

        last#2 := @parameter3: int;

        depth := @parameter4: int;

        arr = this.<kanzi.transform.DivSufSort: int[] sa>;

     label01:
        $i0 = last#2 - 1;

        $i1 = arr[$i0];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 >= 0 goto label02;

        x#11 = 1;

        $i2 = last#2 - 1;

        $i3 = arr[$i2];

        $i4 = $i3 ^ -1;

        p#21 = pa + $i4;

        goto label03;

     label02:
        x#11 = 0;

        $i5 = last#2 - 1;

        $i6 = arr[$i5];

        p#21 = pa + $i6;

     label03:
        a#31 = first;

        r#33 = -1;

        len#37 = middle#1 - first;

        half#41 = len#37 >> 1;

     label04:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len#37);

        if len#37 <= 0 goto label09;

        b = a#31 + half#41;

        $i8 = arr[b];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if $i8 < 0 goto label05;

        $i9 = arr[b];

        goto label06;

     label05:
        $i10 = arr[b];

        $i9 = $i10 ^ -1;

     label06:
        $i11 = pa + $i9;

        q = specialinvoke this.<kanzi.transform.DivSufSort: int ssCompare(int,int,int)>($i11, p#21, depth);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(q);

        if q >= 0 goto label07;

        a#31 = b + 1;

        $i12 = len#37 & 1;

        $i13 = $i12 ^ 1;

        half#41 = half#41 - $i13;

        goto label08;

     label07:
        r#33 = q;

     label08:
        len#37 = half#41;

        half#41 = half#41 >> 1;

        goto label04;

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(a#31);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(middle#1);

        if a#31 >= middle#1 goto label11;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(r#33);

        if r#33 != 0 goto label10;

        $i14 = arr[a#31];

        $i15 = $i14 ^ -1;

        arr[a#31] = $i15;

     label10:
        specialinvoke this.<kanzi.transform.DivSufSort: void ssRotate(int,int,int)>(a#31, middle#1, last#2);

        $i16 = middle#1 - a#31;

        last#2 = last#2 - $i16;

        middle#1 = a#31;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(first);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(middle#1);

        if first != middle#1 goto label11;

        goto label15;

     label11:
        last#2 = last#2 + -1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(x#11);

        if x#11 == 0 goto label13;

        last#2 = last#2 + -1;

     label12:
        $i17 = arr[last#2];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i17);

        if $i17 >= 0 goto label13;

        last#2 = last#2 + -1;

        goto label12;

     label13:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(middle#1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(last#2);

        if middle#1 != last#2 goto label14;

        goto label15;

     label14:
        goto label01;

     label15:
        return;
    }

    private int ssCompare(int, int, int, int)
    {
        kanzi.transform.DivSufSort this;
        int pa, pb, p2, depth, u1n, u2n, u1#4, $i0, u2#11, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        int[] $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;

        this := @this: kanzi.transform.DivSufSort;

        pa := @parameter0: int;

        pb := @parameter1: int;

        p2 := @parameter2: int;

        depth := @parameter3: int;

        u1#4 = depth + pa;

        $r0 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i0 = $r0[p2];

        u2#11 = depth + $i0;

        u1n = pb + 2;

        $r1 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i1 = p2 + 1;

        $i2 = $r1[$i1];

        u2n = $i2 + 2;

        $i3 = u1n - u1#4;

        $i4 = u2n - u2#11;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i3 <= $i4 goto label2;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(u2#11);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(u2n);

        if u2#11 >= u2n goto label3;

        $r2 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $i5 = $r2[u1#4];

        $r3 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $i6 = $r3[u2#11];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if $i5 != $i6 goto label3;

        u1#4 = u1#4 + 1;

        u2#11 = u2#11 + 1;

        goto label1;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(u1#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(u1n);

        if u1#4 >= u1n goto label3;

        $r4 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $i7 = $r4[u1#4];

        $r5 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $i8 = $r5[u2#11];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if $i7 != $i8 goto label3;

        u1#4 = u1#4 + 1;

        u2#11 = u2#11 + 1;

        goto label2;

     label3:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(u1#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(u1n);

        if u1#4 >= u1n goto label5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(u2#11);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(u2n);

        if u2#11 >= u2n goto label4;

        $r6 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $i9 = $r6[u1#4];

        $r7 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $i10 = $r7[u2#11];

        $i11 = $i9 - $i10;

        goto label7;

     label4:
        $i11 = 1;

        goto label7;

     label5:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(u2#11);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(u2n);

        if u2#11 >= u2n goto label6;

        $i11 = -1;

        goto label7;

     label6:
        $i11 = 0;

     label7:
        return $i11;
    }

    private static int ssIlg(int)
    {
        int n, $i0, $i1, $i2, $i3, $i4, $i5;
        int[] $r0, $r1;

        n := @parameter0: int;

        $i0 = n & 65280;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 == 0 goto label1;

        $r0 = <kanzi.transform.DivSufSort: int[] LOG_TABLE>;

        $i1 = n >> 8;

        $i2 = $i1 & 255;

        $i3 = $r0[$i2];

        $i4 = 8 + $i3;

        goto label2;

     label1:
        $r1 = <kanzi.transform.DivSufSort: int[] LOG_TABLE>;

        $i5 = n & 255;

        $i4 = $r1[$i5];

     label2:
        return $i4;
    }

    private static int getIndex(int)
    {
        int a, $i0;

        a := @parameter0: int;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(a);

        if a < 0 goto label1;

        $i0 = a;

        goto label2;

     label1:
        $i0 = a ^ -1;

     label2:
        return $i0;
    }

    private void trIntroSort(int, int, int, int, kanzi.transform.DivSufSort$TRBudget)
    {
        kanzi.transform.DivSufSort this;
        int isa, incr, a, next, v, x, a, b, next, isad#1, first#2, last#3, $i0, limit#13, trlink#15, $i1, $i2, b#36, c#40, v#44, $i4, $i5, c#57, v#61, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, a#243, $i33, $i34, $i35, a#260, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, a#291, b#298, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, a#412, b#418, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, v#460, $i68, $i71, $i72, $i73, $i74, $i75, $i76, $i77, v#499, c#501, $i78, $i79, v#516, c#518, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114;
        kanzi.transform.DivSufSort$TRBudget budget;
        int[] arr, $r17;
        long res, res, $l3, $l69, $l70;
        kanzi.transform.DivSufSort$StackElement se, se, se#133, se#176, se#193, $r9, se#227, $r14, se#381, $r35, se#794, se#826, $r41;
        kanzi.transform.DivSufSort$Stack $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r15, $r16, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r36, $r37, $r38, $r39, $r40, $r42;
        boolean $z0, $z1, $z2;

        this := @this: kanzi.transform.DivSufSort;

        isa := @parameter0: int;

        isad#1 := @parameter1: int;

        first#2 := @parameter2: int;

        last#3 := @parameter3: int;

        budget := @parameter4: kanzi.transform.DivSufSort$TRBudget;

        incr = isad#1 - isa;

        arr = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i0 = last#3 - first#2;

        limit#13 = staticinvoke <kanzi.transform.DivSufSort: int trIlg(int)>($i0);

        trlink#15 = -1;

     label01:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(limit#13);

        if limit#13 >= 0 goto label38;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(limit#13);

        if limit#13 != -1 goto label15;

        $i1 = isad#1 - incr;

        $i2 = last#3 - 1;

        res = specialinvoke this.<kanzi.transform.DivSufSort: long trPartition(int,int,int,int,int)>($i1, first#2, first#2, last#3, $i2);

        $l3 = res >> 32;

        a = (int) $l3;

        b#36 = (int) res;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(a);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(last#3);

        if a >= last#3 goto label03;

        c#40 = first#2;

        v#44 = a - 1;

     label02:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c#40);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(a);

        if c#40 >= a goto label03;

        $i4 = arr[c#40];

        $i5 = isa + $i4;

        arr[$i5] = v#44;

        c#40 = c#40 + 1;

        goto label02;

     label03:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b#36);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(last#3);

        if b#36 >= last#3 goto label05;

        c#57 = a;

        v#61 = b#36 - 1;

     label04:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c#57);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b#36);

        if c#57 >= b#36 goto label05;

        $i6 = arr[c#57];

        $i7 = isa + $i6;

        arr[$i7] = v#61;

        c#57 = c#57 + 1;

        goto label04;

     label05:
        $i8 = b#36 - a;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if $i8 <= 1 goto label06;

        $r0 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        virtualinvoke $r0.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>(0, a, b#36, 0, 0);

        $r1 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        $i9 = isad#1 - incr;

        virtualinvoke $r1.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>($i9, first#2, last#3, -2, trlink#15);

        $r2 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        $i10 = virtualinvoke $r2.<kanzi.transform.DivSufSort$Stack: int size()>();

        trlink#15 = $i10 - 2;

     label06:
        $i11 = a - first#2;

        $i12 = last#3 - b#36;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i11);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i12);

        if $i11 > $i12 goto label10;

        $i13 = a - first#2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i13);

        if $i13 <= 1 goto label07;

        $r3 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        $i14 = last#3 - b#36;

        $i15 = staticinvoke <kanzi.transform.DivSufSort: int trIlg(int)>($i14);

        virtualinvoke $r3.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>(isad#1, b#36, last#3, $i15, trlink#15);

        last#3 = a;

        $i16 = a - first#2;

        limit#13 = staticinvoke <kanzi.transform.DivSufSort: int trIlg(int)>($i16);

        goto label14;

     label07:
        $i17 = last#3 - b#36;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i17);

        if $i17 <= 1 goto label08;

        first#2 = b#36;

        $i18 = last#3 - b#36;

        limit#13 = staticinvoke <kanzi.transform.DivSufSort: int trIlg(int)>($i18);

        goto label14;

     label08:
        $r4 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        se#133 = virtualinvoke $r4.<kanzi.transform.DivSufSort$Stack: kanzi.transform.DivSufSort$StackElement pop()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(se#133);

        if se#133 != null goto label09;

        return;

     label09:
        isad#1 = se#133.<kanzi.transform.DivSufSort$StackElement: int a>;

        first#2 = se#133.<kanzi.transform.DivSufSort$StackElement: int b>;

        last#3 = se#133.<kanzi.transform.DivSufSort$StackElement: int c>;

        limit#13 = se#133.<kanzi.transform.DivSufSort$StackElement: int d>;

        trlink#15 = se#133.<kanzi.transform.DivSufSort$StackElement: int e>;

        goto label14;

     label10:
        $i19 = last#3 - b#36;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i19);

        if $i19 <= 1 goto label11;

        $r5 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        $i20 = a - first#2;

        $i21 = staticinvoke <kanzi.transform.DivSufSort: int trIlg(int)>($i20);

        virtualinvoke $r5.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>(isad#1, first#2, a, $i21, trlink#15);

        first#2 = b#36;

        $i22 = last#3 - b#36;

        limit#13 = staticinvoke <kanzi.transform.DivSufSort: int trIlg(int)>($i22);

        goto label14;

     label11:
        $i23 = a - first#2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i23);

        if $i23 <= 1 goto label12;

        last#3 = a;

        $i24 = a - first#2;

        limit#13 = staticinvoke <kanzi.transform.DivSufSort: int trIlg(int)>($i24);

        goto label14;

     label12:
        $r6 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        se#176 = virtualinvoke $r6.<kanzi.transform.DivSufSort$Stack: kanzi.transform.DivSufSort$StackElement pop()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(se#176);

        if se#176 != null goto label13;

        return;

     label13:
        isad#1 = se#176.<kanzi.transform.DivSufSort$StackElement: int a>;

        first#2 = se#176.<kanzi.transform.DivSufSort$StackElement: int b>;

        last#3 = se#176.<kanzi.transform.DivSufSort$StackElement: int c>;

        limit#13 = se#176.<kanzi.transform.DivSufSort$StackElement: int d>;

        trlink#15 = se#176.<kanzi.transform.DivSufSort$StackElement: int e>;

     label14:
        goto label01;

     label15:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(limit#13);

        if limit#13 != -2 goto label20;

        $r7 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        se#193 = virtualinvoke $r7.<kanzi.transform.DivSufSort$Stack: kanzi.transform.DivSufSort$StackElement pop()>();

        $i25 = se#193.<kanzi.transform.DivSufSort$StackElement: int d>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i25);

        if $i25 != 0 goto label16;

        $i26 = se#193.<kanzi.transform.DivSufSort$StackElement: int b>;

        $i27 = se#193.<kanzi.transform.DivSufSort$StackElement: int c>;

        $i28 = isad#1 - isa;

        specialinvoke this.<kanzi.transform.DivSufSort: void trCopy(int,int,int,int,int,int)>(isa, first#2, $i26, $i27, last#3, $i28);

        goto label18;

     label16:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(trlink#15);

        if trlink#15 < 0 goto label17;

        $r8 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        $r9 = virtualinvoke $r8.<kanzi.transform.DivSufSort$Stack: kanzi.transform.DivSufSort$StackElement get(int)>(trlink#15);

        $r9.<kanzi.transform.DivSufSort$StackElement: int d> = -1;

     label17:
        $i29 = se#193.<kanzi.transform.DivSufSort$StackElement: int b>;

        $i30 = se#193.<kanzi.transform.DivSufSort$StackElement: int c>;

        $i31 = isad#1 - isa;

        specialinvoke this.<kanzi.transform.DivSufSort: void trPartialCopy(int,int,int,int,int,int)>(isa, first#2, $i29, $i30, last#3, $i31);

     label18:
        $r10 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        se#227 = virtualinvoke $r10.<kanzi.transform.DivSufSort$Stack: kanzi.transform.DivSufSort$StackElement pop()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(se#227);

        if se#227 != null goto label19;

        return;

     label19:
        isad#1 = se#227.<kanzi.transform.DivSufSort$StackElement: int a>;

        first#2 = se#227.<kanzi.transform.DivSufSort$StackElement: int b>;

        last#3 = se#227.<kanzi.transform.DivSufSort$StackElement: int c>;

        limit#13 = se#227.<kanzi.transform.DivSufSort$StackElement: int d>;

        trlink#15 = se#227.<kanzi.transform.DivSufSort$StackElement: int e>;

        goto label01;

     label20:
        $i32 = arr[first#2];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i32);

        if $i32 < 0 goto label23;

        a#243 = first#2;

     label21:
        $i33 = arr[a#243];

        $i34 = isa + $i33;

        arr[$i34] = a#243;

        a#243 = a#243 + 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(a#243);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(last#3);

        if a#243 >= last#3 goto label22;

        $i35 = arr[a#243];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i35);

        if $i35 >= 0 goto label21;

     label22:
        first#2 = a#243;

     label23:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(first#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(last#3);

        if first#2 >= last#3 goto label36;

        a#260 = first#2;

     label24:
        $i36 = arr[a#260];

        $i37 = $i36 ^ -1;

        arr[a#260] = $i37;

        a#260 = a#260 + 1;

        $i38 = arr[a#260];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i38);

        if $i38 < 0 goto label24;

        $i39 = arr[a#260];

        $i40 = isa + $i39;

        $i41 = arr[$i40];

        $i42 = arr[a#260];

        $i43 = isad#1 + $i42;

        $i44 = arr[$i43];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i41);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i44);

        if $i41 == $i44 goto label25;

        $i45 = a#260 - first#2;

        $i46 = $i45 + 1;

        $i47 = staticinvoke <kanzi.transform.DivSufSort: int trIlg(int)>($i46);

        goto label26;

     label25:
        $i47 = -1;

     label26:
        next = $i47;

        a#291 = a#260 + 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(a#291);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(last#3);

        if a#291 >= last#3 goto label28;

        v = a#291 - 1;

        b#298 = first#2;

     label27:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b#298);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(a#291);

        if b#298 >= a#291 goto label28;

        $i48 = arr[b#298];

        $i49 = isa + $i48;

        arr[$i49] = v;

        b#298 = b#298 + 1;

        goto label27;

     label28:
        $i50 = a#291 - first#2;

        $z0 = staticinvoke <kanzi.transform.DivSufSort$TRBudget: boolean access$200(kanzi.transform.DivSufSort$TRBudget,int)>(budget, $i50);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 1 goto label31;

        $i51 = a#291 - first#2;

        $i52 = last#3 - a#291;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i51);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i52);

        if $i51 > $i52 goto label29;

        $r11 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        virtualinvoke $r11.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>(isad#1, a#291, last#3, -3, trlink#15);

        isad#1 = isad#1 + incr;

        last#3 = a#291;

        limit#13 = next;

        goto label35;

     label29:
        $i53 = last#3 - a#291;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i53);

        if $i53 <= 1 goto label30;

        $r12 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        $i54 = isad#1 + incr;

        virtualinvoke $r12.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>($i54, first#2, a#291, next, trlink#15);

        first#2 = a#291;

        limit#13 = -3;

        goto label35;

     label30:
        isad#1 = isad#1 + incr;

        last#3 = a#291;

        limit#13 = next;

        goto label35;

     label31:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(trlink#15);

        if trlink#15 < 0 goto label32;

        $r13 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        $r14 = virtualinvoke $r13.<kanzi.transform.DivSufSort$Stack: kanzi.transform.DivSufSort$StackElement get(int)>(trlink#15);

        $r14.<kanzi.transform.DivSufSort$StackElement: int d> = -1;

     label32:
        $i55 = last#3 - a#291;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i55);

        if $i55 <= 1 goto label33;

        first#2 = a#291;

        limit#13 = -3;

        goto label35;

     label33:
        $r15 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        se = virtualinvoke $r15.<kanzi.transform.DivSufSort$Stack: kanzi.transform.DivSufSort$StackElement pop()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(se);

        if se != null goto label34;

        return;

     label34:
        isad#1 = se.<kanzi.transform.DivSufSort$StackElement: int a>;

        first#2 = se.<kanzi.transform.DivSufSort$StackElement: int b>;

        last#3 = se.<kanzi.transform.DivSufSort$StackElement: int c>;

        limit#13 = se.<kanzi.transform.DivSufSort$StackElement: int d>;

        trlink#15 = se.<kanzi.transform.DivSufSort$StackElement: int e>;

     label35:
        goto label01;

     label36:
        $r16 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        se#381 = virtualinvoke $r16.<kanzi.transform.DivSufSort$Stack: kanzi.transform.DivSufSort$StackElement pop()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(se#381);

        if se#381 != null goto label37;

        return;

     label37:
        isad#1 = se#381.<kanzi.transform.DivSufSort$StackElement: int a>;

        first#2 = se#381.<kanzi.transform.DivSufSort$StackElement: int b>;

        last#3 = se#381.<kanzi.transform.DivSufSort$StackElement: int c>;

        limit#13 = se#381.<kanzi.transform.DivSufSort$StackElement: int d>;

        trlink#15 = se#381.<kanzi.transform.DivSufSort$StackElement: int e>;

        goto label01;

     label38:
        $i56 = last#3 - first#2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i56);

        if $i56 > 8 goto label39;

        specialinvoke this.<kanzi.transform.DivSufSort: void trInsertionSort(int,int,int)>(isad#1, first#2, last#3);

        limit#13 = -3;

        goto label01;

     label39:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(limit#13);

        if limit#13 != 0 goto label44;

        $i57 = last#3 - first#2;

        specialinvoke this.<kanzi.transform.DivSufSort: void trHeapSort(int,int,int)>(isad#1, first#2, $i57);

        a#412 = last#3 - 1;

     label40:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(first#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(a#412);

        if first#2 >= a#412 goto label43;

        b#418 = a#412 - 1;

        $i58 = arr[a#412];

        $i59 = isad#1 + $i58;

        x = arr[$i59];

     label41:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(first#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b#418);

        if first#2 > b#418 goto label42;

        $i60 = arr[b#418];

        $i61 = isad#1 + $i60;

        $i62 = arr[$i61];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i62);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(x);

        if $i62 != x goto label42;

        $i63 = arr[b#418];

        $i64 = $i63 ^ -1;

        arr[b#418] = $i64;

        b#418 = b#418 + -1;

        goto label41;

     label42:
        a#412 = b#418;

        goto label40;

     label43:
        limit#13 = -3;

        goto label01;

     label44:
        limit#13 = limit#13 + -1;

        $r17 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i65 = staticinvoke <kanzi.transform.DivSufSort: int trPivot(int[],int,int,int)>($r17, isad#1, first#2, last#3);

        specialinvoke this.<kanzi.transform.DivSufSort: void swapInSA(int,int)>(first#2, $i65);

        $i66 = arr[first#2];

        $i67 = isad#1 + $i66;

        v#460 = arr[$i67];

        $i68 = first#2 + 1;

        res = specialinvoke this.<kanzi.transform.DivSufSort: long trPartition(int,int,int,int,int)>(isad#1, first#2, $i68, last#3, v#460);

        $l69 = res >> 32;

        a = (int) $l69;

        $l70 = res & 4294967295L;

        b = (int) $l70;

        $i71 = last#3 - first#2;

        $i72 = b - a;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i71);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i72);

        if $i71 == $i72 goto label72;

        $i73 = arr[a];

        $i74 = isa + $i73;

        $i75 = arr[$i74];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i75);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(v#460);

        if $i75 == v#460 goto label45;

        $i76 = b - a;

        $i77 = staticinvoke <kanzi.transform.DivSufSort: int trIlg(int)>($i76);

        goto label46;

     label45:
        $i77 = -1;

     label46:
        next = $i77;

        v#499 = a - 1;

        c#501 = first#2;

     label47:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c#501);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(a);

        if c#501 >= a goto label48;

        $i78 = arr[c#501];

        $i79 = isa + $i78;

        arr[$i79] = v#499;

        c#501 = c#501 + 1;

        goto label47;

     label48:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(last#3);

        if b >= last#3 goto label50;

        v#516 = b - 1;

        c#518 = a;

     label49:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c#518);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b);

        if c#518 >= b goto label50;

        $i80 = arr[c#518];

        $i81 = isa + $i80;

        arr[$i81] = v#516;

        c#518 = c#518 + 1;

        goto label49;

     label50:
        $i82 = b - a;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i82);

        if $i82 <= 1 goto label62;

        $i83 = b - a;

        $z1 = staticinvoke <kanzi.transform.DivSufSort$TRBudget: boolean access$200(kanzi.transform.DivSufSort$TRBudget,int)>(budget, $i83);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 1 goto label62;

        $i84 = a - first#2;

        $i85 = last#3 - b;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i84);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i85);

        if $i84 > $i85 goto label56;

        $i86 = last#3 - b;

        $i87 = b - a;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i86);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i87);

        if $i86 > $i87 goto label53;

        $i88 = a - first#2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i88);

        if $i88 <= 1 goto label51;

        $r18 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        $i89 = isad#1 + incr;

        virtualinvoke $r18.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>($i89, a, b, next, trlink#15);

        $r19 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        virtualinvoke $r19.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>(isad#1, b, last#3, limit#13, trlink#15);

        last#3 = a;

        goto label71;

     label51:
        $i90 = last#3 - b;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i90);

        if $i90 <= 1 goto label52;

        $r20 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        $i91 = isad#1 + incr;

        virtualinvoke $r20.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>($i91, a, b, next, trlink#15);

        first#2 = b;

        goto label71;

     label52:
        isad#1 = isad#1 + incr;

        first#2 = a;

        last#3 = b;

        limit#13 = next;

        goto label71;

     label53:
        $i92 = a - first#2;

        $i93 = b - a;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i92);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i93);

        if $i92 > $i93 goto label55;

        $i94 = a - first#2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i94);

        if $i94 <= 1 goto label54;

        $r21 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        virtualinvoke $r21.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>(isad#1, b, last#3, limit#13, trlink#15);

        $r22 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        $i95 = isad#1 + incr;

        virtualinvoke $r22.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>($i95, a, b, next, trlink#15);

        last#3 = a;

        goto label71;

     label54:
        $r23 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        virtualinvoke $r23.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>(isad#1, b, last#3, limit#13, trlink#15);

        isad#1 = isad#1 + incr;

        first#2 = a;

        last#3 = b;

        limit#13 = next;

        goto label71;

     label55:
        $r24 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        virtualinvoke $r24.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>(isad#1, b, last#3, limit#13, trlink#15);

        $r25 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        virtualinvoke $r25.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>(isad#1, first#2, a, limit#13, trlink#15);

        isad#1 = isad#1 + incr;

        first#2 = a;

        last#3 = b;

        limit#13 = next;

        goto label71;

     label56:
        $i96 = a - first#2;

        $i97 = b - a;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i96);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i97);

        if $i96 > $i97 goto label59;

        $i98 = last#3 - b;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i98);

        if $i98 <= 1 goto label57;

        $r26 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        $i99 = isad#1 + incr;

        virtualinvoke $r26.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>($i99, a, b, next, trlink#15);

        $r27 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        virtualinvoke $r27.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>(isad#1, first#2, a, limit#13, trlink#15);

        first#2 = b;

        goto label71;

     label57:
        $i100 = a - first#2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i100);

        if $i100 <= 1 goto label58;

        $r28 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        $i101 = isad#1 + incr;

        virtualinvoke $r28.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>($i101, a, b, next, trlink#15);

        last#3 = a;

        goto label71;

     label58:
        isad#1 = isad#1 + incr;

        first#2 = a;

        last#3 = b;

        limit#13 = next;

        goto label71;

     label59:
        $i102 = last#3 - b;

        $i103 = b - a;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i102);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i103);

        if $i102 > $i103 goto label61;

        $i104 = last#3 - b;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i104);

        if $i104 <= 1 goto label60;

        $r29 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        virtualinvoke $r29.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>(isad#1, first#2, a, limit#13, trlink#15);

        $r30 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        $i105 = isad#1 + incr;

        virtualinvoke $r30.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>($i105, a, b, next, trlink#15);

        first#2 = b;

        goto label71;

     label60:
        $r31 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        virtualinvoke $r31.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>(isad#1, first#2, a, limit#13, trlink#15);

        isad#1 = isad#1 + incr;

        first#2 = a;

        last#3 = b;

        limit#13 = next;

        goto label71;

     label61:
        $r32 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        virtualinvoke $r32.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>(isad#1, first#2, a, limit#13, trlink#15);

        $r33 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        virtualinvoke $r33.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>(isad#1, b, last#3, limit#13, trlink#15);

        isad#1 = isad#1 + incr;

        first#2 = a;

        last#3 = b;

        limit#13 = next;

        goto label71;

     label62:
        $i106 = b - a;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i106);

        if $i106 <= 1 goto label63;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(trlink#15);

        if trlink#15 < 0 goto label63;

        $r34 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        $r35 = virtualinvoke $r34.<kanzi.transform.DivSufSort$Stack: kanzi.transform.DivSufSort$StackElement get(int)>(trlink#15);

        $r35.<kanzi.transform.DivSufSort$StackElement: int d> = -1;

     label63:
        $i107 = a - first#2;

        $i108 = last#3 - b;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i107);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i108);

        if $i107 > $i108 goto label67;

        $i109 = a - first#2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i109);

        if $i109 <= 1 goto label64;

        $r36 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        virtualinvoke $r36.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>(isad#1, b, last#3, limit#13, trlink#15);

        last#3 = a;

        goto label71;

     label64:
        $i110 = last#3 - b;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i110);

        if $i110 <= 1 goto label65;

        first#2 = b;

        goto label71;

     label65:
        $r37 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        se#794 = virtualinvoke $r37.<kanzi.transform.DivSufSort$Stack: kanzi.transform.DivSufSort$StackElement pop()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(se#794);

        if se#794 != null goto label66;

        return;

     label66:
        isad#1 = se#794.<kanzi.transform.DivSufSort$StackElement: int a>;

        first#2 = se#794.<kanzi.transform.DivSufSort$StackElement: int b>;

        last#3 = se#794.<kanzi.transform.DivSufSort$StackElement: int c>;

        limit#13 = se#794.<kanzi.transform.DivSufSort$StackElement: int d>;

        trlink#15 = se#794.<kanzi.transform.DivSufSort$StackElement: int e>;

        goto label71;

     label67:
        $i111 = last#3 - b;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i111);

        if $i111 <= 1 goto label68;

        $r38 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        virtualinvoke $r38.<kanzi.transform.DivSufSort$Stack: void push(int,int,int,int,int)>(isad#1, first#2, a, limit#13, trlink#15);

        first#2 = b;

        goto label71;

     label68:
        $i112 = a - first#2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i112);

        if $i112 <= 1 goto label69;

        last#3 = a;

        goto label71;

     label69:
        $r39 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        se#826 = virtualinvoke $r39.<kanzi.transform.DivSufSort$Stack: kanzi.transform.DivSufSort$StackElement pop()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(se#826);

        if se#826 != null goto label70;

        return;

     label70:
        isad#1 = se#826.<kanzi.transform.DivSufSort$StackElement: int a>;

        first#2 = se#826.<kanzi.transform.DivSufSort$StackElement: int b>;

        last#3 = se#826.<kanzi.transform.DivSufSort$StackElement: int c>;

        limit#13 = se#826.<kanzi.transform.DivSufSort$StackElement: int d>;

        trlink#15 = se#826.<kanzi.transform.DivSufSort$StackElement: int e>;

     label71:
        goto label76;

     label72:
        $i113 = last#3 - first#2;

        $z2 = staticinvoke <kanzi.transform.DivSufSort$TRBudget: boolean access$200(kanzi.transform.DivSufSort$TRBudget,int)>(budget, $i113);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 1 goto label73;

        $i114 = last#3 - first#2;

        limit#13 = staticinvoke <kanzi.transform.DivSufSort: int trIlg(int)>($i114);

        isad#1 = isad#1 + incr;

        goto label76;

     label73:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(trlink#15);

        if trlink#15 < 0 goto label74;

        $r40 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        $r41 = virtualinvoke $r40.<kanzi.transform.DivSufSort$Stack: kanzi.transform.DivSufSort$StackElement get(int)>(trlink#15);

        $r41.<kanzi.transform.DivSufSort$StackElement: int d> = -1;

     label74:
        $r42 = this.<kanzi.transform.DivSufSort: kanzi.transform.DivSufSort$Stack trStack>;

        se = virtualinvoke $r42.<kanzi.transform.DivSufSort$Stack: kanzi.transform.DivSufSort$StackElement pop()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(se);

        if se != null goto label75;

        return;

     label75:
        isad#1 = se.<kanzi.transform.DivSufSort$StackElement: int a>;

        first#2 = se.<kanzi.transform.DivSufSort$StackElement: int b>;

        last#3 = se.<kanzi.transform.DivSufSort$StackElement: int c>;

        limit#13 = se.<kanzi.transform.DivSufSort$StackElement: int d>;

        trlink#15 = se.<kanzi.transform.DivSufSort$StackElement: int e>;

     label76:
        goto label01;
    }

    private static int trPivot(int[], int, int, int)
    {
        int[] arr;
        int isad, first#1, last#2, t#6, $i0, middle#12, $i1, $i2, t#28, $i3, $i4, $i5, $i6, $i7, t#47, $i8, $i9, $i10, first#60, $i11, $i12, middle#71, $i13, $i14, $i15, $i16, $i17, $i18, last#90, $i19;

        arr := @parameter0: int[];

        isad := @parameter1: int;

        first#1 := @parameter2: int;

        last#2 := @parameter3: int;

        t#6 = last#2 - first#1;

        $i0 = t#6 >> 1;

        middle#12 = first#1 + $i0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(t#6);

        if t#6 > 512 goto label2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(t#6);

        if t#6 > 32 goto label1;

        $i1 = last#2 - 1;

        $i2 = staticinvoke <kanzi.transform.DivSufSort: int trMedian3(int[],int,int,int,int)>(arr, isad, first#1, middle#12, $i1);

        return $i2;

     label1:
        t#28 = t#6 >> 2;

        $i3 = first#1 + t#28;

        $i4 = last#2 - 1;

        $i5 = $i4 - t#28;

        $i6 = last#2 - 1;

        $i7 = staticinvoke <kanzi.transform.DivSufSort: int trMedian5(int[],int,int,int,int,int,int)>(arr, isad, first#1, $i3, middle#12, $i5, $i6);

        return $i7;

     label2:
        t#47 = t#6 >> 3;

        $i8 = first#1 + t#47;

        $i9 = t#47 << 1;

        $i10 = first#1 + $i9;

        first#60 = staticinvoke <kanzi.transform.DivSufSort: int trMedian3(int[],int,int,int,int)>(arr, isad, first#1, $i8, $i10);

        $i11 = middle#12 - t#47;

        $i12 = middle#12 + t#47;

        middle#71 = staticinvoke <kanzi.transform.DivSufSort: int trMedian3(int[],int,int,int,int)>(arr, isad, $i11, middle#12, $i12);

        $i13 = last#2 - 1;

        $i14 = t#47 << 1;

        $i15 = $i13 - $i14;

        $i16 = last#2 - 1;

        $i17 = $i16 - t#47;

        $i18 = last#2 - 1;

        last#90 = staticinvoke <kanzi.transform.DivSufSort: int trMedian3(int[],int,int,int,int)>(arr, isad, $i15, $i17, $i18);

        $i19 = staticinvoke <kanzi.transform.DivSufSort: int trMedian3(int[],int,int,int,int)>(arr, isad, first#60, middle#71, last#90);

        return $i19;
    }

    private static int trMedian3(int[], int, int, int, int)
    {
        int[] arr;
        int isad, v3, t, v1#1, v2#2, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;

        arr := @parameter0: int[];

        isad := @parameter1: int;

        v1#1 := @parameter2: int;

        v2#2 := @parameter3: int;

        v3 := @parameter4: int;

        $i0 = arr[v1#1];

        $i1 = isad + $i0;

        $i2 = arr[$i1];

        $i3 = arr[v2#2];

        $i4 = isad + $i3;

        $i5 = arr[$i4];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i2 <= $i5 goto label1;

        t = v1#1;

        v1#1 = v2#2;

        v2#2 = t;

     label1:
        $i6 = arr[v2#2];

        $i7 = isad + $i6;

        $i8 = arr[$i7];

        $i9 = arr[v3];

        $i10 = isad + $i9;

        $i11 = arr[$i10];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i11);

        if $i8 <= $i11 goto label4;

        $i12 = arr[v1#1];

        $i13 = isad + $i12;

        $i14 = arr[$i13];

        $i15 = arr[v3];

        $i16 = isad + $i15;

        $i17 = arr[$i16];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i14);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i17);

        if $i14 <= $i17 goto label2;

        $i18 = v1#1;

        goto label3;

     label2:
        $i18 = v3;

     label3:
        return $i18;

     label4:
        return v2#2;
    }

    private static int trMedian5(int[], int, int, int, int, int, int)
    {
        int[] arr;
        int isad, v1#1, v2#2, v3#3, v4#4, v5#5, $i0, $i1, $i2, $i3, $i4, $i5, t#21, $i6, $i7, $i8, $i9, $i10, $i11, t#39, $i12, $i13, $i14, $i15, $i16, $i17, t1#57, v2#59, t2#62, $i18, $i19, $i20, $i21, $i22, $i23, t#80, $i24, $i25, $i26, $i27, $i28, $i29, t1#98, v1#100, t2#103, v5#106, $i30, $i31, $i32, $i33, $i34, $i35, $i36;

        arr := @parameter0: int[];

        isad := @parameter1: int;

        v1#1 := @parameter2: int;

        v2#2 := @parameter3: int;

        v3#3 := @parameter4: int;

        v4#4 := @parameter5: int;

        v5#5 := @parameter6: int;

        $i0 = arr[v2#2];

        $i1 = isad + $i0;

        $i2 = arr[$i1];

        $i3 = arr[v3#3];

        $i4 = isad + $i3;

        $i5 = arr[$i4];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i2 <= $i5 goto label1;

        t#21 = v2#2;

        v2#2 = v3#3;

        v3#3 = t#21;

     label1:
        $i6 = arr[v4#4];

        $i7 = isad + $i6;

        $i8 = arr[$i7];

        $i9 = arr[v5#5];

        $i10 = isad + $i9;

        $i11 = arr[$i10];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i11);

        if $i8 <= $i11 goto label2;

        t#39 = v4#4;

        v4#4 = v5#5;

        v5#5 = t#39;

     label2:
        $i12 = arr[v2#2];

        $i13 = isad + $i12;

        $i14 = arr[$i13];

        $i15 = arr[v4#4];

        $i16 = isad + $i15;

        $i17 = arr[$i16];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i14);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i17);

        if $i14 <= $i17 goto label3;

        t1#57 = v2#2;

        v2#59 = v4#4;

        v4#4 = t1#57;

        t2#62 = v3#3;

        v3#3 = v5#5;

        v5#5 = t2#62;

     label3:
        $i18 = arr[v1#1];

        $i19 = isad + $i18;

        $i20 = arr[$i19];

        $i21 = arr[v3#3];

        $i22 = isad + $i21;

        $i23 = arr[$i22];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i20);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i23);

        if $i20 <= $i23 goto label4;

        t#80 = v1#1;

        v1#1 = v3#3;

        v3#3 = t#80;

     label4:
        $i24 = arr[v1#1];

        $i25 = isad + $i24;

        $i26 = arr[$i25];

        $i27 = arr[v4#4];

        $i28 = isad + $i27;

        $i29 = arr[$i28];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i26);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i29);

        if $i26 <= $i29 goto label5;

        t1#98 = v1#1;

        v1#100 = v4#4;

        v4#4 = t1#98;

        t2#103 = v3#3;

        v3#3 = v5#5;

        v5#106 = t2#103;

     label5:
        $i30 = arr[v3#3];

        $i31 = isad + $i30;

        $i32 = arr[$i31];

        $i33 = arr[v4#4];

        $i34 = isad + $i33;

        $i35 = arr[$i34];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i32);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i35);

        if $i32 <= $i35 goto label6;

        $i36 = v4#4;

        goto label7;

     label6:
        $i36 = v3#3;

     label7:
        return $i36;
    }

    private void ssInsertionSort(int, int, int, int)
    {
        kanzi.transform.DivSufSort this;
        int pa, first, last, depth, t, r, i#6, $i0, j#17, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        int[] arr;

        this := @this: kanzi.transform.DivSufSort;

        pa := @parameter0: int;

        first := @parameter1: int;

        last := @parameter2: int;

        depth := @parameter3: int;

        arr = this.<kanzi.transform.DivSufSort: int[] sa>;

        i#6 = last - 2;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(first);

        if i#6 < first goto label7;

        $i0 = arr[i#6];

        t = pa + $i0;

        j#17 = i#6 + 1;

     label2:
        $i1 = arr[j#17];

        $i2 = pa + $i1;

        $i3 = specialinvoke this.<kanzi.transform.DivSufSort: int ssCompare(int,int,int)>(t, $i2, depth);

        r = $i3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 <= 0 goto label5;

     label3:
        $i4 = j#17 - 1;

        $i5 = arr[j#17];

        arr[$i4] = $i5;

        j#17 = j#17 + 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#17);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(last);

        if j#17 >= last goto label4;

        $i6 = arr[j#17];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if $i6 < 0 goto label3;

     label4:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#17);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(last);

        if j#17 < last goto label2;

        goto label5;

     label5:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(r);

        if r != 0 goto label6;

        $i7 = arr[j#17];

        $i8 = $i7 ^ -1;

        arr[j#17] = $i8;

     label6:
        $i9 = j#17 - 1;

        $i10 = t - pa;

        arr[$i9] = $i10;

        i#6 = i#6 + -1;

        goto label1;

     label7:
        return;
    }

    private void ssHeapSort(int, int, int, int)
    {
        kanzi.transform.DivSufSort this;
        int idx, pa, saIdx, size, t, m#2, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i#54, $i18, $i19, i#79, $i20, $i21, $i22;
        int[] $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        this := @this: kanzi.transform.DivSufSort;

        idx := @parameter0: int;

        pa := @parameter1: int;

        saIdx := @parameter2: int;

        size := @parameter3: int;

        m#2 = size;

        $i0 = size & 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 0 goto label1;

        m#2 = m#2 + -1;

        $r0 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $r1 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r2 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i1 = m#2 >> 1;

        $i2 = saIdx + $i1;

        $i3 = $r2[$i2];

        $i4 = pa + $i3;

        $i5 = $r1[$i4];

        $i6 = idx + $i5;

        $i7 = $r0[$i6];

        $r3 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $r4 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r5 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i8 = saIdx + m#2;

        $i9 = $r5[$i8];

        $i10 = pa + $i9;

        $i11 = $r4[$i10];

        $i12 = idx + $i11;

        $i13 = $r3[$i12];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i13);

        if $i7 >= $i13 goto label1;

        $i14 = saIdx + m#2;

        $i15 = m#2 >> 1;

        $i16 = saIdx + $i15;

        specialinvoke this.<kanzi.transform.DivSufSort: void swapInSA(int,int)>($i14, $i16);

     label1:
        $i17 = m#2 >> 1;

        i#54 = $i17 - 1;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#54);

        if i#54 < 0 goto label3;

        specialinvoke this.<kanzi.transform.DivSufSort: void ssFixDown(int,int,int,int,int)>(idx, pa, saIdx, i#54, m#2);

        i#54 = i#54 + -1;

        goto label2;

     label3:
        $i18 = size & 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i18);

        if $i18 != 0 goto label4;

        $i19 = saIdx + m#2;

        specialinvoke this.<kanzi.transform.DivSufSort: void swapInSA(int,int)>(saIdx, $i19);

        specialinvoke this.<kanzi.transform.DivSufSort: void ssFixDown(int,int,int,int,int)>(idx, pa, saIdx, 0, m#2);

     label4:
        i#79 = m#2 - 1;

     label5:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#79);

        if i#79 <= 0 goto label6;

        $r6 = this.<kanzi.transform.DivSufSort: int[] sa>;

        t = $r6[saIdx];

        $r7 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r8 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i20 = saIdx + i#79;

        $i21 = $r8[$i20];

        $r7[saIdx] = $i21;

        specialinvoke this.<kanzi.transform.DivSufSort: void ssFixDown(int,int,int,int,int)>(idx, pa, saIdx, 0, i#79);

        $r9 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i22 = saIdx + i#79;

        $r9[$i22] = t;

        i#79 = i#79 + -1;

        goto label5;

     label6:
        return;
    }

    private int ssPartition(int, int, int, int)
    {
        kanzi.transform.DivSufSort this;
        int pa, first, last, depth, d, pb, t, a#6, b#8, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        int[] arr;

        this := @this: kanzi.transform.DivSufSort;

        pa := @parameter0: int;

        first := @parameter1: int;

        last := @parameter2: int;

        depth := @parameter3: int;

        arr = this.<kanzi.transform.DivSufSort: int[] sa>;

        a#6 = first - 1;

        b#8 = last;

        d = depth - 1;

        pb = pa + 1;

     label1:
        a#6 = a#6 + 1;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(a#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b#8);

        if a#6 >= b#8 goto label3;

        $i0 = arr[a#6];

        $i1 = pa + $i0;

        $i2 = arr[$i1];

        $i3 = $i2 + d;

        $i4 = arr[a#6];

        $i5 = pb + $i4;

        $i6 = arr[$i5];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if $i3 < $i6 goto label3;

        $i7 = arr[a#6];

        $i8 = $i7 ^ -1;

        arr[a#6] = $i8;

        a#6 = a#6 + 1;

        goto label2;

     label3:
        b#8 = b#8 + -1;

     label4:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b#8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(a#6);

        if b#8 <= a#6 goto label5;

        $i9 = arr[b#8];

        $i10 = pa + $i9;

        $i11 = arr[$i10];

        $i12 = $i11 + d;

        $i13 = arr[b#8];

        $i14 = pb + $i13;

        $i15 = arr[$i14];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i15);

        if $i12 >= $i15 goto label5;

        b#8 = b#8 + -1;

        goto label4;

     label5:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b#8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(a#6);

        if b#8 > a#6 goto label6;

        goto label7;

     label6:
        $i16 = arr[b#8];

        t = $i16 ^ -1;

        $i17 = arr[a#6];

        arr[b#8] = $i17;

        arr[a#6] = t;

        goto label1;

     label7:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(first);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(a#6);

        if first >= a#6 goto label8;

        $i18 = arr[first];

        $i19 = $i18 ^ -1;

        arr[first] = $i19;

     label8:
        return a#6;
    }

    private int ssPivot(int, int, int, int)
    {
        kanzi.transform.DivSufSort this;
        int td, pa, first#1, last#2, t#6, $i0, middle#12, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, t#49, $i9, $i10, $i11, first#63, $i12, $i13, middle#75, $i14, $i15, $i16, $i17, $i18, $i19, last#95, $i20;

        this := @this: kanzi.transform.DivSufSort;

        td := @parameter0: int;

        pa := @parameter1: int;

        first#1 := @parameter2: int;

        last#2 := @parameter3: int;

        t#6 = last#2 - first#1;

        $i0 = t#6 >> 1;

        middle#12 = first#1 + $i0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(t#6);

        if t#6 > 512 goto label3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(t#6);

        if t#6 > 32 goto label1;

        $i1 = last#2 - 1;

        $i2 = specialinvoke this.<kanzi.transform.DivSufSort: int ssMedian3(int,int,int,int,int)>(td, pa, first#1, middle#12, $i1);

        goto label2;

     label1:
        $i3 = t#6 >> 2;

        $i4 = first#1 + $i3;

        $i5 = last#2 - 1;

        $i6 = t#6 >> 2;

        $i7 = $i5 - $i6;

        $i8 = last#2 - 1;

        $i2 = specialinvoke this.<kanzi.transform.DivSufSort: int ssMedian5(int,int,int,int,int,int,int)>(td, pa, first#1, $i4, middle#12, $i7, $i8);

     label2:
        return $i2;

     label3:
        t#49 = t#6 >> 3;

        $i9 = first#1 + t#49;

        $i10 = t#49 << 1;

        $i11 = first#1 + $i10;

        first#63 = specialinvoke this.<kanzi.transform.DivSufSort: int ssMedian3(int,int,int,int,int)>(td, pa, first#1, $i9, $i11);

        $i12 = middle#12 - t#49;

        $i13 = middle#12 + t#49;

        middle#75 = specialinvoke this.<kanzi.transform.DivSufSort: int ssMedian3(int,int,int,int,int)>(td, pa, $i12, middle#12, $i13);

        $i14 = last#2 - 1;

        $i15 = t#49 << 1;

        $i16 = $i14 - $i15;

        $i17 = last#2 - 1;

        $i18 = $i17 - t#49;

        $i19 = last#2 - 1;

        last#95 = specialinvoke this.<kanzi.transform.DivSufSort: int ssMedian3(int,int,int,int,int)>(td, pa, $i16, $i18, $i19);

        $i20 = specialinvoke this.<kanzi.transform.DivSufSort: int ssMedian3(int,int,int,int,int)>(td, pa, first#63, middle#75, last#95);

        return $i20;
    }

    private void swapInSA(int, int)
    {
        kanzi.transform.DivSufSort this;
        int a, b, tmp, $i0;
        int[] $r0, $r1, $r2, $r3;

        this := @this: kanzi.transform.DivSufSort;

        a := @parameter0: int;

        b := @parameter1: int;

        $r0 = this.<kanzi.transform.DivSufSort: int[] sa>;

        tmp = $r0[a];

        $r1 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r2 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i0 = $r2[b];

        $r1[a] = $i0;

        $r3 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r3[b] = tmp;

        return;
    }

    private void ssMergeBackward(int, int, int, int, int, int)
    {
        kanzi.transform.DivSufSort this;
        int pa, first, middle, last, buf, depth, bufEnd, t, r, $i0, $i1, $i2, $i3, $i4, $i5, p1#27, $i6, $i7, $i8, $i9, $i10, $i11, p2#50, $i12, $i13, a#64, b#66, c#70, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i48, $i49, $i50, $i51, $i52, a#223, $i53, $i54, $i55, $i56, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78;
        int[] arr;
        byte x#16, $b14, $b28, $b47, $b57;

        this := @this: kanzi.transform.DivSufSort;

        pa := @parameter0: int;

        first := @parameter1: int;

        middle := @parameter2: int;

        last := @parameter3: int;

        buf := @parameter4: int;

        depth := @parameter5: int;

        arr = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i0 = buf + last;

        $i1 = $i0 - middle;

        bufEnd = $i1 - 1;

        $i2 = last - middle;

        specialinvoke this.<kanzi.transform.DivSufSort: void ssBlockSwap(int,int,int)>(buf, middle, $i2);

        x#16 = 0;

        $i3 = arr[bufEnd];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 >= 0 goto label01;

        $i4 = arr[bufEnd];

        $i5 = $i4 ^ -1;

        p1#27 = pa + $i5;

        x#16 = x#16 | 1;

        goto label02;

     label01:
        $i6 = arr[bufEnd];

        p1#27 = pa + $i6;

     label02:
        $i7 = middle - 1;

        $i8 = arr[$i7];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if $i8 >= 0 goto label03;

        $i9 = middle - 1;

        $i10 = arr[$i9];

        $i11 = $i10 ^ -1;

        p2#50 = pa + $i11;

        x#16 = x#16 | 2;

        goto label04;

     label03:
        $i12 = middle - 1;

        $i13 = arr[$i12];

        p2#50 = pa + $i13;

     label04:
        a#64 = last - 1;

        b#66 = bufEnd;

        c#70 = middle - 1;

        t = arr[a#64];

     label05:
        r = specialinvoke this.<kanzi.transform.DivSufSort: int ssCompare(int,int,int)>(p1#27, p2#50, depth);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(r);

        if r <= 0 goto label10;

        $b14 = x#16 & 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b14);

        if $b14 == 0 goto label07;

     label06:
        $i15 = a#64;

        a#64 = a#64 + -1;

        $i16 = arr[b#66];

        arr[$i15] = $i16;

        $i17 = b#66;

        b#66 = b#66 + -1;

        $i18 = arr[a#64];

        arr[$i17] = $i18;

        $i19 = arr[b#66];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i19);

        if $i19 < 0 goto label06;

        x#16 = x#16 ^ 1;

     label07:
        $i20 = a#64;

        a#64 = a#64 + -1;

        $i21 = arr[b#66];

        arr[$i20] = $i21;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b#66);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(buf);

        if b#66 > buf goto label08;

        arr[buf] = t;

        goto label30;

     label08:
        $i22 = b#66;

        b#66 = b#66 + -1;

        $i23 = arr[a#64];

        arr[$i22] = $i23;

        $i24 = arr[b#66];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i24);

        if $i24 >= 0 goto label09;

        $i25 = arr[b#66];

        $i26 = $i25 ^ -1;

        p1#27 = pa + $i26;

        x#16 = x#16 | 1;

        goto label29;

     label09:
        $i27 = arr[b#66];

        p1#27 = pa + $i27;

        goto label29;

     label10:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(r);

        if r >= 0 goto label17;

        $b28 = x#16 & 2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b28);

        if $b28 == 0 goto label12;

     label11:
        $i29 = a#64;

        a#64 = a#64 + -1;

        $i30 = arr[c#70];

        arr[$i29] = $i30;

        $i31 = c#70;

        c#70 = c#70 + -1;

        $i32 = arr[a#64];

        arr[$i31] = $i32;

        $i33 = arr[c#70];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i33);

        if $i33 < 0 goto label11;

        x#16 = x#16 ^ 2;

     label12:
        $i34 = a#64;

        a#64 = a#64 + -1;

        $i35 = arr[c#70];

        arr[$i34] = $i35;

        $i36 = c#70;

        c#70 = c#70 + -1;

        $i37 = arr[a#64];

        arr[$i36] = $i37;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c#70);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(first);

        if c#70 >= first goto label15;

     label13:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(buf);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b#66);

        if buf >= b#66 goto label14;

        $i38 = a#64;

        a#64 = a#64 + -1;

        $i39 = arr[b#66];

        arr[$i38] = $i39;

        $i40 = b#66;

        b#66 = b#66 + -1;

        $i41 = arr[a#64];

        arr[$i40] = $i41;

        goto label13;

     label14:
        $i42 = arr[b#66];

        arr[a#64] = $i42;

        arr[b#66] = t;

        goto label30;

     label15:
        $i43 = arr[c#70];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i43);

        if $i43 >= 0 goto label16;

        $i44 = arr[c#70];

        $i45 = $i44 ^ -1;

        p2#50 = pa + $i45;

        x#16 = x#16 | 2;

        goto label29;

     label16:
        $i46 = arr[c#70];

        p2#50 = pa + $i46;

        goto label29;

     label17:
        $b47 = x#16 & 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b47);

        if $b47 == 0 goto label19;

     label18:
        $i48 = a#64;

        a#64 = a#64 + -1;

        $i49 = arr[b#66];

        arr[$i48] = $i49;

        $i50 = b#66;

        b#66 = b#66 + -1;

        $i51 = arr[a#64];

        arr[$i50] = $i51;

        $i52 = arr[b#66];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i52);

        if $i52 < 0 goto label18;

        x#16 = x#16 ^ 1;

     label19:
        a#223 = a#64 + -1;

        $i53 = arr[b#66];

        $i54 = $i53 ^ -1;

        arr[a#64] = $i54;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b#66);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(buf);

        if b#66 > buf goto label20;

        arr[buf] = t;

        goto label30;

     label20:
        $i55 = b#66;

        b#66 = b#66 + -1;

        $i56 = arr[a#223];

        arr[$i55] = $i56;

        $b57 = x#16 & 2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b57);

        if $b57 == 0 goto label22;

     label21:
        $i58 = a#223;

        a#223 = a#223 + -1;

        $i59 = arr[c#70];

        arr[$i58] = $i59;

        $i60 = c#70;

        c#70 = c#70 + -1;

        $i61 = arr[a#223];

        arr[$i60] = $i61;

        $i62 = arr[c#70];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i62);

        if $i62 < 0 goto label21;

        x#16 = x#16 ^ 2;

     label22:
        a#64 = a#223 + -1;

        $i63 = arr[c#70];

        arr[a#223] = $i63;

        $i64 = c#70;

        c#70 = c#70 + -1;

        $i65 = arr[a#64];

        arr[$i64] = $i65;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c#70);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(first);

        if c#70 >= first goto label25;

     label23:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(buf);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b#66);

        if buf >= b#66 goto label24;

        $i66 = a#64;

        a#64 = a#64 + -1;

        $i67 = arr[b#66];

        arr[$i66] = $i67;

        $i68 = b#66;

        b#66 = b#66 + -1;

        $i69 = arr[a#64];

        arr[$i68] = $i69;

        goto label23;

     label24:
        $i70 = arr[b#66];

        arr[a#64] = $i70;

        arr[b#66] = t;

        goto label30;

     label25:
        $i71 = arr[b#66];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i71);

        if $i71 >= 0 goto label26;

        $i72 = arr[b#66];

        $i73 = $i72 ^ -1;

        p1#27 = pa + $i73;

        x#16 = x#16 | 1;

        goto label27;

     label26:
        $i74 = arr[b#66];

        p1#27 = pa + $i74;

     label27:
        $i75 = arr[c#70];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i75);

        if $i75 >= 0 goto label28;

        $i76 = arr[c#70];

        $i77 = $i76 ^ -1;

        p2#50 = pa + $i77;

        x#16 = x#16 | 2;

        goto label29;

     label28:
        $i78 = arr[c#70];

        p2#50 = pa + $i78;

     label29:
        goto label05;

     label30:
        return;
    }

    private int ssCompare(int, int, int)
    {
        kanzi.transform.DivSufSort this;
        int p1, p2, depth, u1n, u2n, $i0, u1#7, $i1, u2#14, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        int[] $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        this := @this: kanzi.transform.DivSufSort;

        p1 := @parameter0: int;

        p2 := @parameter1: int;

        depth := @parameter2: int;

        $r0 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i0 = $r0[p1];

        u1#7 = depth + $i0;

        $r1 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i1 = $r1[p2];

        u2#14 = depth + $i1;

        $r2 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i2 = p1 + 1;

        $i3 = $r2[$i2];

        u1n = $i3 + 2;

        $r3 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i4 = p2 + 1;

        $i5 = $r3[$i4];

        u2n = $i5 + 2;

        $i6 = u1n - u1#7;

        $i7 = u2n - u2#14;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if $i6 <= $i7 goto label2;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(u2#14);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(u2n);

        if u2#14 >= u2n goto label3;

        $r4 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $i8 = $r4[u1#7];

        $r5 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $i9 = $r5[u2#14];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        if $i8 != $i9 goto label3;

        u1#7 = u1#7 + 1;

        u2#14 = u2#14 + 1;

        goto label1;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(u1#7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(u1n);

        if u1#7 >= u1n goto label3;

        $r6 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $i10 = $r6[u1#7];

        $r7 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $i11 = $r7[u2#14];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i10);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i11);

        if $i10 != $i11 goto label3;

        u1#7 = u1#7 + 1;

        u2#14 = u2#14 + 1;

        goto label2;

     label3:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(u1#7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(u1n);

        if u1#7 >= u1n goto label5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(u2#14);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(u2n);

        if u2#14 >= u2n goto label4;

        $r8 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $i12 = $r8[u1#7];

        $r9 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $i13 = $r9[u2#14];

        $i14 = $i12 - $i13;

        goto label7;

     label4:
        $i14 = 1;

        goto label7;

     label5:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(u2#14);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(u2n);

        if u2#14 >= u2n goto label6;

        $i14 = -1;

        goto label7;

     label6:
        $i14 = 0;

     label7:
        return $i14;
    }

    private void ssMergeForward(int, int, int, int, int, int)
    {
        kanzi.transform.DivSufSort this;
        int pa, first, middle, last, buf, depth, bufEnd, t, r, $i0, $i1, $i2, a#17, b#19, c#21, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38;
        int[] arr;

        this := @this: kanzi.transform.DivSufSort;

        pa := @parameter0: int;

        first := @parameter1: int;

        middle := @parameter2: int;

        last := @parameter3: int;

        buf := @parameter4: int;

        depth := @parameter5: int;

        arr = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i0 = buf + middle;

        $i1 = $i0 - first;

        bufEnd = $i1 - 1;

        $i2 = middle - first;

        specialinvoke this.<kanzi.transform.DivSufSort: void ssBlockSwap(int,int,int)>(buf, first, $i2);

        a#17 = first;

        b#19 = buf;

        c#21 = middle;

        t = arr[a#17];

     label01:
        $i3 = arr[b#19];

        $i4 = pa + $i3;

        $i5 = arr[c#21];

        $i6 = pa + $i5;

        r = specialinvoke this.<kanzi.transform.DivSufSort: int ssCompare(int,int,int)>($i4, $i6, depth);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(r);

        if r >= 0 goto label04;

     label02:
        $i7 = a#17;

        a#17 = a#17 + 1;

        $i8 = arr[b#19];

        arr[$i7] = $i8;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(bufEnd);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b#19);

        if bufEnd > b#19 goto label03;

        arr[bufEnd] = t;

        return;

     label03:
        $i9 = b#19;

        b#19 = b#19 + 1;

        $i10 = arr[a#17];

        arr[$i9] = $i10;

        $i11 = arr[b#19];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i11);

        if $i11 < 0 goto label02;

        goto label16;

     label04:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(r);

        if r <= 0 goto label09;

     label05:
        $i12 = a#17;

        a#17 = a#17 + 1;

        $i13 = arr[c#21];

        arr[$i12] = $i13;

        $i14 = c#21;

        c#21 = c#21 + 1;

        $i15 = arr[a#17];

        arr[$i14] = $i15;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(last);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c#21);

        if last > c#21 goto label08;

     label06:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b#19);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(bufEnd);

        if b#19 >= bufEnd goto label07;

        $i16 = a#17;

        a#17 = a#17 + 1;

        $i17 = arr[b#19];

        arr[$i16] = $i17;

        $i18 = b#19;

        b#19 = b#19 + 1;

        $i19 = arr[a#17];

        arr[$i18] = $i19;

        goto label06;

     label07:
        $i20 = arr[b#19];

        arr[a#17] = $i20;

        arr[b#19] = t;

        return;

     label08:
        $i21 = arr[c#21];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i21);

        if $i21 < 0 goto label05;

        goto label16;

     label09:
        $i22 = arr[c#21];

        $i23 = $i22 ^ -1;

        arr[c#21] = $i23;

     label10:
        $i24 = a#17;

        a#17 = a#17 + 1;

        $i25 = arr[b#19];

        arr[$i24] = $i25;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(bufEnd);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b#19);

        if bufEnd > b#19 goto label11;

        arr[bufEnd] = t;

        return;

     label11:
        $i26 = b#19;

        b#19 = b#19 + 1;

        $i27 = arr[a#17];

        arr[$i26] = $i27;

        $i28 = arr[b#19];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i28);

        if $i28 < 0 goto label10;

     label12:
        $i29 = a#17;

        a#17 = a#17 + 1;

        $i30 = arr[c#21];

        arr[$i29] = $i30;

        $i31 = c#21;

        c#21 = c#21 + 1;

        $i32 = arr[a#17];

        arr[$i31] = $i32;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(last);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c#21);

        if last > c#21 goto label15;

     label13:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b#19);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(bufEnd);

        if b#19 >= bufEnd goto label14;

        $i33 = a#17;

        a#17 = a#17 + 1;

        $i34 = arr[b#19];

        arr[$i33] = $i34;

        $i35 = b#19;

        b#19 = b#19 + 1;

        $i36 = arr[a#17];

        arr[$i35] = $i36;

        goto label13;

     label14:
        $i37 = arr[b#19];

        arr[a#17] = $i37;

        arr[b#19] = t;

        return;

     label15:
        $i38 = arr[c#21];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i38);

        if $i38 < 0 goto label12;

     label16:
        goto label01;
    }

    private void ssBlockSwap(int, int, int)
    {
        kanzi.transform.DivSufSort this;
        int t, a#1, b#2, n#3, $i0;
        int[] $r0, $r1, $r2, $r3;

        this := @this: kanzi.transform.DivSufSort;

        a#1 := @parameter0: int;

        b#2 := @parameter1: int;

        n#3 := @parameter2: int;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n#3);

        if n#3 <= 0 goto label2;

        $r0 = this.<kanzi.transform.DivSufSort: int[] sa>;

        t = $r0[a#1];

        $r1 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r2 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i0 = $r2[b#2];

        $r1[a#1] = $i0;

        $r3 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r3[b#2] = t;

        n#3 = n#3 + -1;

        a#1 = a#1 + 1;

        b#2 = b#2 + 1;

        goto label1;

     label2:
        return;
    }

    private void ssRotate(int, int, int)
    {
        kanzi.transform.DivSufSort this;
        int middle, first#1, last#2, l#6, r#10, a#26, b#30, t#34, $i0, $i1, $i2, $i3, $i4, a#65, b#67, t#71, $i5, $i6, $i7, $i8, $i9;
        int[] arr;

        this := @this: kanzi.transform.DivSufSort;

        first#1 := @parameter0: int;

        middle := @parameter1: int;

        last#2 := @parameter2: int;

        l#6 = middle - first#1;

        r#10 = last#2 - middle;

        arr = this.<kanzi.transform.DivSufSort: int[] sa>;

     label01:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l#6);

        if l#6 <= 0 goto label10;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(r#10);

        if r#10 <= 0 goto label10;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(r#10);

        if l#6 != r#10 goto label02;

        specialinvoke this.<kanzi.transform.DivSufSort: void ssBlockSwap(int,int,int)>(first#1, middle, l#6);

        goto label10;

     label02:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(r#10);

        if l#6 >= r#10 goto label06;

        a#26 = last#2 - 1;

        b#30 = middle - 1;

        t#34 = arr[a#26];

     label03:
        $i0 = a#26;

        a#26 = a#26 + -1;

        $i1 = arr[b#30];

        arr[$i0] = $i1;

        $i2 = b#30;

        b#30 = b#30 + -1;

        $i3 = arr[a#26];

        arr[$i2] = $i3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b#30);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(first#1);

        if b#30 >= first#1 goto label03;

        arr[a#26] = t#34;

        last#2 = a#26;

        $i4 = l#6 + 1;

        r#10 = r#10 - $i4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(r#10);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l#6);

        if r#10 > l#6 goto label04;

        goto label05;

     label04:
        a#26 = a#26 + -1;

        b#30 = middle - 1;

        t#34 = arr[a#26];

        goto label03;

     label05:
        goto label01;

     label06:
        a#65 = first#1;

        b#67 = middle;

        t#71 = arr[a#65];

     label07:
        $i5 = a#65;

        a#65 = a#65 + 1;

        $i6 = arr[b#67];

        arr[$i5] = $i6;

        $i7 = b#67;

        b#67 = b#67 + 1;

        $i8 = arr[a#65];

        arr[$i7] = $i8;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(last#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b#67);

        if last#2 > b#67 goto label07;

        arr[a#65] = t#71;

        first#1 = a#65 + 1;

        $i9 = r#10 + 1;

        l#6 = l#6 - $i9;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(r#10);

        if l#6 > r#10 goto label08;

        goto label09;

     label08:
        a#65 = a#65 + 1;

        b#67 = middle;

        t#71 = arr[a#65];

        goto label07;

     label09:
        goto label01;

     label10:
        return;
    }

    private long trPartition(int, int, int, int, int)
    {
        kanzi.transform.DivSufSort this;
        int isad, middle, v, first#1, last#2, x#4, b#6, $i0, $i1, a#21, $i2, $i3, $i4, c#47, $i5, $i6, d#62, $i7, $i8, $i9, x#79, $i10, $i11, $i12, x#103, $i13, $i14, $i15, x#122, c#134, s#138, $i16, e#147, f#151, s#159, $i17, $i18, e#170, f#174, $i19, $i20;
        int[] $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        long $l21, $l22, $l23, $l24, $l25;

        this := @this: kanzi.transform.DivSufSort;

        isad := @parameter0: int;

        first#1 := @parameter1: int;

        middle := @parameter2: int;

        last#2 := @parameter3: int;

        v := @parameter4: int;

        x#4 = 0;

        b#6 = middle;

     label01:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(last#2);

        if b#6 >= last#2 goto label03;

        $r0 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r1 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i0 = $r1[b#6];

        $i1 = isad + $i0;

        x#4 = $r0[$i1];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(x#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(v);

        if x#4 == v goto label02;

        goto label03;

     label02:
        b#6 = b#6 + 1;

        goto label01;

     label03:
        a#21 = b#6;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(a#21);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(last#2);

        if a#21 >= last#2 goto label05;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(x#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(v);

        if x#4 >= v goto label05;

     label04:
        b#6 = b#6 + 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(last#2);

        if b#6 >= last#2 goto label05;

        $r2 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r3 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i2 = $r3[b#6];

        $i3 = isad + $i2;

        $i4 = $r2[$i3];

        x#4 = $i4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(v);

        if $i4 > v goto label05;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(x#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(v);

        if x#4 != v goto label04;

        specialinvoke this.<kanzi.transform.DivSufSort: void swapInSA(int,int)>(a#21, b#6);

        a#21 = a#21 + 1;

        goto label04;

     label05:
        c#47 = last#2 - 1;

     label06:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c#47);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b#6);

        if c#47 <= b#6 goto label08;

        $r4 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r5 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i5 = $r5[c#47];

        $i6 = isad + $i5;

        x#4 = $r4[$i6];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(x#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(v);

        if x#4 == v goto label07;

        goto label08;

     label07:
        c#47 = c#47 + -1;

        goto label06;

     label08:
        d#62 = c#47;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(d#62);

        if b#6 >= d#62 goto label10;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(x#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(v);

        if x#4 <= v goto label10;

     label09:
        c#47 = c#47 + -1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c#47);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b#6);

        if c#47 <= b#6 goto label10;

        $r6 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r7 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i7 = $r7[c#47];

        $i8 = isad + $i7;

        $i9 = $r6[$i8];

        x#79 = $i9;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(v);

        if $i9 < v goto label10;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(x#79);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(v);

        if x#79 != v goto label09;

        specialinvoke this.<kanzi.transform.DivSufSort: void swapInSA(int,int)>(c#47, d#62);

        d#62 = d#62 + -1;

        goto label09;

     label10:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c#47);

        if b#6 >= c#47 goto label13;

        specialinvoke this.<kanzi.transform.DivSufSort: void swapInSA(int,int)>(b#6, c#47);

     label11:
        b#6 = b#6 + 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c#47);

        if b#6 >= c#47 goto label12;

        $r8 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r9 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i10 = $r9[b#6];

        $i11 = isad + $i10;

        $i12 = $r8[$i11];

        x#103 = $i12;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(v);

        if $i12 > v goto label12;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(x#103);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(v);

        if x#103 != v goto label11;

        specialinvoke this.<kanzi.transform.DivSufSort: void swapInSA(int,int)>(a#21, b#6);

        a#21 = a#21 + 1;

        goto label11;

     label12:
        c#47 = c#47 + -1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c#47);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b#6);

        if c#47 <= b#6 goto label10;

        $r10 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r11 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i13 = $r11[c#47];

        $i14 = isad + $i13;

        $i15 = $r10[$i14];

        x#122 = $i15;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i15);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(v);

        if $i15 < v goto label10;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(x#122);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(v);

        if x#122 != v goto label12;

        specialinvoke this.<kanzi.transform.DivSufSort: void swapInSA(int,int)>(c#47, d#62);

        d#62 = d#62 + -1;

        goto label12;

     label13:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(a#21);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(d#62);

        if a#21 > d#62 goto label20;

        c#134 = b#6 - 1;

        s#138 = a#21 - first#1;

        $i16 = b#6 - a#21;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(s#138);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i16);

        if s#138 <= $i16 goto label14;

        s#138 = b#6 - a#21;

     label14:
        e#147 = first#1;

        f#151 = b#6 - s#138;

     label15:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(s#138);

        if s#138 <= 0 goto label16;

        specialinvoke this.<kanzi.transform.DivSufSort: void swapInSA(int,int)>(e#147, f#151);

        s#138 = s#138 + -1;

        e#147 = e#147 + 1;

        f#151 = f#151 + 1;

        goto label15;

     label16:
        s#159 = d#62 - c#134;

        $i17 = last#2 - d#62;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(s#159);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i17);

        if s#159 < $i17 goto label17;

        $i18 = last#2 - d#62;

        s#159 = $i18 - 1;

     label17:
        e#170 = b#6;

        f#174 = last#2 - s#159;

     label18:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(s#159);

        if s#159 <= 0 goto label19;

        specialinvoke this.<kanzi.transform.DivSufSort: void swapInSA(int,int)>(e#170, f#174);

        s#159 = s#159 + -1;

        e#170 = e#170 + 1;

        f#174 = f#174 + 1;

        goto label18;

     label19:
        $i19 = b#6 - a#21;

        first#1 = first#1 + $i19;

        $i20 = d#62 - c#134;

        last#2 = last#2 - $i20;

     label20:
        $l21 = (long) first#1;

        $l22 = $l21 << 32;

        $l23 = (long) last#2;

        $l24 = $l23 & 4294967295L;

        $l25 = $l22 | $l24;

        return $l25;
    }

    private void trCopy(int, int, int, int, int, int)
    {
        kanzi.transform.DivSufSort this;
        int isa, first, a, b, last, depth, v, s, e, s, d#9, c#11, $i0, $i1, $i2, $i3, d#38, c#42, $i4, $i5, $i6, $i7;
        int[] arr;

        this := @this: kanzi.transform.DivSufSort;

        isa := @parameter0: int;

        first := @parameter1: int;

        a := @parameter2: int;

        b := @parameter3: int;

        last := @parameter4: int;

        depth := @parameter5: int;

        arr = this.<kanzi.transform.DivSufSort: int[] sa>;

        v = b - 1;

        d#9 = a - 1;

        c#11 = first;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c#11);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(d#9);

        if c#11 > d#9 goto label3;

        $i0 = arr[c#11];

        s = $i0 - depth;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(s);

        if s < 0 goto label2;

        $i1 = isa + s;

        $i2 = arr[$i1];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(v);

        if $i2 != v goto label2;

        d#9 = d#9 + 1;

        arr[d#9] = s;

        $i3 = isa + s;

        arr[$i3] = d#9;

     label2:
        c#11 = c#11 + 1;

        goto label1;

     label3:
        e = d#9 + 1;

        d#38 = b;

        c#42 = last - 1;

     label4:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(d#38);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(e);

        if d#38 <= e goto label6;

        $i4 = arr[c#42];

        s = $i4 - depth;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(s);

        if s < 0 goto label5;

        $i5 = isa + s;

        $i6 = arr[$i5];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(v);

        if $i6 != v goto label5;

        d#38 = d#38 + -1;

        arr[d#38] = s;

        $i7 = isa + s;

        arr[$i7] = d#38;

     label5:
        c#42 = c#42 + -1;

        goto label4;

     label6:
        return;
    }

    private void trPartialCopy(int, int, int, int, int, int)
    {
        kanzi.transform.DivSufSort this;
        int isa, first, a, b, last, depth, v, s, rank, rank, s, rank, lastRank#7, newRank#9, d#13, c#15, $i0, $i1, $i2, $i3, $i4, $i5, lastRank#50, e#52, $i6, $i7, $i8, $i9, lastRank#76, e#80, d#82, c#86, $i10, $i11, $i12, $i13, $i14, $i15;
        int[] arr;

        this := @this: kanzi.transform.DivSufSort;

        isa := @parameter0: int;

        first := @parameter1: int;

        a := @parameter2: int;

        b := @parameter3: int;

        last := @parameter4: int;

        depth := @parameter5: int;

        arr = this.<kanzi.transform.DivSufSort: int[] sa>;

        v = b - 1;

        lastRank#7 = -1;

        newRank#9 = -1;

        d#13 = a - 1;

        c#15 = first;

     label01:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c#15);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(d#13);

        if c#15 > d#13 goto label04;

        $i0 = arr[c#15];

        s = $i0 - depth;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(s);

        if s < 0 goto label03;

        $i1 = isa + s;

        $i2 = arr[$i1];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(v);

        if $i2 != v goto label03;

        d#13 = d#13 + 1;

        arr[d#13] = s;

        $i3 = isa + s;

        $i4 = $i3 + depth;

        rank = arr[$i4];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lastRank#7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(rank);

        if lastRank#7 == rank goto label02;

        lastRank#7 = rank;

        newRank#9 = d#13;

     label02:
        $i5 = isa + s;

        arr[$i5] = newRank#9;

     label03:
        c#15 = c#15 + 1;

        goto label01;

     label04:
        lastRank#50 = -1;

        e#52 = d#13;

     label05:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(first);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(e#52);

        if first > e#52 goto label08;

        $i6 = arr[e#52];

        $i7 = isa + $i6;

        rank = arr[$i7];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lastRank#50);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(rank);

        if lastRank#50 == rank goto label06;

        lastRank#50 = rank;

        newRank#9 = e#52;

     label06:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(newRank#9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(rank);

        if newRank#9 == rank goto label07;

        $i8 = arr[e#52];

        $i9 = isa + $i8;

        arr[$i9] = newRank#9;

     label07:
        e#52 = e#52 + -1;

        goto label05;

     label08:
        lastRank#76 = -1;

        e#80 = d#13 + 1;

        d#82 = b;

        c#86 = last - 1;

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(d#82);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(e#80);

        if d#82 <= e#80 goto label12;

        $i10 = arr[c#86];

        s = $i10 - depth;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(s);

        if s < 0 goto label11;

        $i11 = isa + s;

        $i12 = arr[$i11];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(v);

        if $i12 != v goto label11;

        d#82 = d#82 + -1;

        arr[d#82] = s;

        $i13 = isa + s;

        $i14 = $i13 + depth;

        rank = arr[$i14];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lastRank#76);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(rank);

        if lastRank#76 == rank goto label10;

        lastRank#76 = rank;

        newRank#9 = d#82;

     label10:
        $i15 = isa + s;

        arr[$i15] = newRank#9;

     label11:
        c#86 = c#86 + -1;

        goto label09;

     label12:
        return;
    }

    private void trInsertionSort(int, int, int)
    {
        kanzi.transform.DivSufSort this;
        int isad, first, last, t, a#6, b#12, $i0, $i1, $i2, $i3, $i4, r#29, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        int[] arr;

        this := @this: kanzi.transform.DivSufSort;

        isad := @parameter0: int;

        first := @parameter1: int;

        last := @parameter2: int;

        arr = this.<kanzi.transform.DivSufSort: int[] sa>;

        a#6 = first + 1;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(a#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(last);

        if a#6 >= last goto label8;

        b#12 = a#6 - 1;

        t = arr[a#6];

        $i0 = isad + t;

        $i1 = arr[$i0];

        $i2 = arr[b#12];

        $i3 = isad + $i2;

        $i4 = arr[$i3];

        r#29 = $i1 - $i4;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(r#29);

        if r#29 >= 0 goto label6;

     label3:
        $i5 = b#12 + 1;

        $i6 = arr[b#12];

        arr[$i5] = $i6;

        b#12 = b#12 + -1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b#12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(first);

        if b#12 < first goto label4;

        $i7 = arr[b#12];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if $i7 < 0 goto label3;

     label4:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b#12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(first);

        if b#12 >= first goto label5;

        goto label6;

     label5:
        $i8 = isad + t;

        $i9 = arr[$i8];

        $i10 = arr[b#12];

        $i11 = isad + $i10;

        $i12 = arr[$i11];

        r#29 = $i9 - $i12;

        goto label2;

     label6:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(r#29);

        if r#29 != 0 goto label7;

        $i13 = arr[b#12];

        $i14 = $i13 ^ -1;

        arr[b#12] = $i14;

     label7:
        $i15 = b#12 + 1;

        arr[$i15] = t;

        a#6 = a#6 + 1;

        goto label1;

     label8:
        return;
    }

    private void trHeapSort(int, int, int)
    {
        kanzi.transform.DivSufSort this;
        int isad, saIdx, size, t, m#4, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i#42, $i14, $i15, i#65, $i16, $i17, $i18;
        int[] arr;

        this := @this: kanzi.transform.DivSufSort;

        isad := @parameter0: int;

        saIdx := @parameter1: int;

        size := @parameter2: int;

        arr = this.<kanzi.transform.DivSufSort: int[] sa>;

        m#4 = size;

        $i0 = size & 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 0 goto label1;

        m#4 = m#4 + -1;

        $i1 = m#4 >> 1;

        $i2 = saIdx + $i1;

        $i3 = arr[$i2];

        $i4 = isad + $i3;

        $i5 = arr[$i4];

        $i6 = saIdx + m#4;

        $i7 = arr[$i6];

        $i8 = isad + $i7;

        $i9 = arr[$i8];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        if $i5 >= $i9 goto label1;

        $i10 = saIdx + m#4;

        $i11 = m#4 >> 1;

        $i12 = saIdx + $i11;

        specialinvoke this.<kanzi.transform.DivSufSort: void swapInSA(int,int)>($i10, $i12);

     label1:
        $i13 = m#4 >> 1;

        i#42 = $i13 - 1;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#42);

        if i#42 < 0 goto label3;

        specialinvoke this.<kanzi.transform.DivSufSort: void trFixDown(int,int,int,int)>(isad, saIdx, i#42, m#4);

        i#42 = i#42 + -1;

        goto label2;

     label3:
        $i14 = size & 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i14);

        if $i14 != 0 goto label4;

        $i15 = saIdx + m#4;

        specialinvoke this.<kanzi.transform.DivSufSort: void swapInSA(int,int)>(saIdx, $i15);

        specialinvoke this.<kanzi.transform.DivSufSort: void trFixDown(int,int,int,int)>(isad, saIdx, 0, m#4);

     label4:
        i#65 = m#4 - 1;

     label5:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#65);

        if i#65 <= 0 goto label6;

        t = arr[saIdx];

        $i16 = saIdx + i#65;

        $i17 = arr[$i16];

        arr[saIdx] = $i17;

        specialinvoke this.<kanzi.transform.DivSufSort: void trFixDown(int,int,int,int)>(isad, saIdx, 0, i#65);

        $i18 = saIdx + i#65;

        arr[$i18] = t;

        i#65 = i#65 + -1;

        goto label5;

     label6:
        return;
    }

    private void ssFixDown(int, int, int, int, int)
    {
        kanzi.transform.DivSufSort this;
        int idx, pa, saIdx, size, v, c, e, i#1, $i0, $i1, $i2, $i3, $i4, j#24, k#28, j#29, $i5, $i6, $i7, $i8, $i9, d#44, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        int[] arr, $r0, $r1, $r2;

        this := @this: kanzi.transform.DivSufSort;

        idx := @parameter0: int;

        pa := @parameter1: int;

        saIdx := @parameter2: int;

        i#1 := @parameter3: int;

        size := @parameter4: int;

        arr = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i0 = saIdx + i#1;

        v = arr[$i0];

        $r0 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $i1 = pa + v;

        $i2 = arr[$i1];

        $i3 = idx + $i2;

        c = $r0[$i3];

        $i4 = i#1 << 1;

        j#24 = $i4 + 1;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#24);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(size);

        if j#24 >= size goto label4;

        k#28 = j#24;

        j#29 = j#24 + 1;

        $r1 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $i5 = saIdx + k#28;

        $i6 = arr[$i5];

        $i7 = pa + $i6;

        $i8 = arr[$i7];

        $i9 = idx + $i8;

        d#44 = $r1[$i9];

        $r2 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $i10 = saIdx + j#29;

        $i11 = arr[$i10];

        $i12 = pa + $i11;

        $i13 = arr[$i12];

        $i14 = idx + $i13;

        e = $r2[$i14];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(d#44);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(e);

        if d#44 >= e goto label2;

        k#28 = j#29;

        d#44 = e;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(d#44);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c);

        if d#44 > c goto label3;

        goto label4;

     label3:
        $i15 = saIdx + i#1;

        $i16 = saIdx + k#28;

        $i17 = arr[$i16];

        arr[$i15] = $i17;

        i#1 = k#28;

        $i18 = i#1 << 1;

        j#24 = $i18 + 1;

        goto label1;

     label4:
        $i19 = i#1 + saIdx;

        arr[$i19] = v;

        return;
    }

    private int ssMedian3(int, int, int, int, int)
    {
        kanzi.transform.DivSufSort this;
        int idx, pa, v3, t, v1#1, v2#2, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30;
        int[] $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17;

        this := @this: kanzi.transform.DivSufSort;

        idx := @parameter0: int;

        pa := @parameter1: int;

        v1#1 := @parameter2: int;

        v2#2 := @parameter3: int;

        v3 := @parameter4: int;

        $r0 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $r1 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r2 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i0 = $r2[v1#1];

        $i1 = pa + $i0;

        $i2 = $r1[$i1];

        $i3 = idx + $i2;

        $i4 = $r0[$i3];

        $r3 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $r4 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r5 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i5 = $r5[v2#2];

        $i6 = pa + $i5;

        $i7 = $r4[$i6];

        $i8 = idx + $i7;

        $i9 = $r3[$i8];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        if $i4 <= $i9 goto label1;

        t = v1#1;

        v1#1 = v2#2;

        v2#2 = t;

     label1:
        $r6 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $r7 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r8 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i10 = $r8[v2#2];

        $i11 = pa + $i10;

        $i12 = $r7[$i11];

        $i13 = idx + $i12;

        $i14 = $r6[$i13];

        $r9 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $r10 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r11 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i15 = $r11[v3];

        $i16 = pa + $i15;

        $i17 = $r10[$i16];

        $i18 = idx + $i17;

        $i19 = $r9[$i18];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i14);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i19);

        if $i14 <= $i19 goto label4;

        $r12 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $r13 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r14 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i20 = $r14[v1#1];

        $i21 = pa + $i20;

        $i22 = $r13[$i21];

        $i23 = idx + $i22;

        $i24 = $r12[$i23];

        $r15 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $r16 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r17 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i25 = $r17[v3];

        $i26 = pa + $i25;

        $i27 = $r16[$i26];

        $i28 = idx + $i27;

        $i29 = $r15[$i28];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i24);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i29);

        if $i24 <= $i29 goto label2;

        $i30 = v1#1;

        goto label3;

     label2:
        $i30 = v3;

     label3:
        return $i30;

     label4:
        return v2#2;
    }

    private int ssMedian5(int, int, int, int, int, int, int)
    {
        kanzi.transform.DivSufSort this;
        int idx, pa, v1#1, v2#2, v3#3, v4#4, v5#5, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, t#35, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, t#67, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, t1#99, v2#101, t2#104, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, t#136, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, t1#168, v1#170, t2#173, v5#176, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60;
        int[] $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35;

        this := @this: kanzi.transform.DivSufSort;

        idx := @parameter0: int;

        pa := @parameter1: int;

        v1#1 := @parameter2: int;

        v2#2 := @parameter3: int;

        v3#3 := @parameter4: int;

        v4#4 := @parameter5: int;

        v5#5 := @parameter6: int;

        $r0 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $r1 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r2 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i0 = $r2[v2#2];

        $i1 = pa + $i0;

        $i2 = $r1[$i1];

        $i3 = idx + $i2;

        $i4 = $r0[$i3];

        $r3 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $r4 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r5 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i5 = $r5[v3#3];

        $i6 = pa + $i5;

        $i7 = $r4[$i6];

        $i8 = idx + $i7;

        $i9 = $r3[$i8];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        if $i4 <= $i9 goto label1;

        t#35 = v2#2;

        v2#2 = v3#3;

        v3#3 = t#35;

     label1:
        $r6 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $r7 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r8 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i10 = $r8[v4#4];

        $i11 = pa + $i10;

        $i12 = $r7[$i11];

        $i13 = idx + $i12;

        $i14 = $r6[$i13];

        $r9 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $r10 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r11 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i15 = $r11[v5#5];

        $i16 = pa + $i15;

        $i17 = $r10[$i16];

        $i18 = idx + $i17;

        $i19 = $r9[$i18];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i14);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i19);

        if $i14 <= $i19 goto label2;

        t#67 = v4#4;

        v4#4 = v5#5;

        v5#5 = t#67;

     label2:
        $r12 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $r13 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r14 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i20 = $r14[v2#2];

        $i21 = pa + $i20;

        $i22 = $r13[$i21];

        $i23 = idx + $i22;

        $i24 = $r12[$i23];

        $r15 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $r16 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r17 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i25 = $r17[v4#4];

        $i26 = pa + $i25;

        $i27 = $r16[$i26];

        $i28 = idx + $i27;

        $i29 = $r15[$i28];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i24);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i29);

        if $i24 <= $i29 goto label3;

        t1#99 = v2#2;

        v2#101 = v4#4;

        v4#4 = t1#99;

        t2#104 = v3#3;

        v3#3 = v5#5;

        v5#5 = t2#104;

     label3:
        $r18 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $r19 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r20 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i30 = $r20[v1#1];

        $i31 = pa + $i30;

        $i32 = $r19[$i31];

        $i33 = idx + $i32;

        $i34 = $r18[$i33];

        $r21 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $r22 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r23 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i35 = $r23[v3#3];

        $i36 = pa + $i35;

        $i37 = $r22[$i36];

        $i38 = idx + $i37;

        $i39 = $r21[$i38];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i34);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i39);

        if $i34 <= $i39 goto label4;

        t#136 = v1#1;

        v1#1 = v3#3;

        v3#3 = t#136;

     label4:
        $r24 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $r25 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r26 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i40 = $r26[v1#1];

        $i41 = pa + $i40;

        $i42 = $r25[$i41];

        $i43 = idx + $i42;

        $i44 = $r24[$i43];

        $r27 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $r28 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r29 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i45 = $r29[v4#4];

        $i46 = pa + $i45;

        $i47 = $r28[$i46];

        $i48 = idx + $i47;

        $i49 = $r27[$i48];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i44);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i49);

        if $i44 <= $i49 goto label5;

        t1#168 = v1#1;

        v1#170 = v4#4;

        v4#4 = t1#168;

        t2#173 = v3#3;

        v3#3 = v5#5;

        v5#176 = t2#173;

     label5:
        $r30 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $r31 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r32 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i50 = $r32[v3#3];

        $i51 = pa + $i50;

        $i52 = $r31[$i51];

        $i53 = idx + $i52;

        $i54 = $r30[$i53];

        $r33 = this.<kanzi.transform.DivSufSort: int[] buffer>;

        $r34 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $r35 = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i55 = $r35[v4#4];

        $i56 = pa + $i55;

        $i57 = $r34[$i56];

        $i58 = idx + $i57;

        $i59 = $r33[$i58];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i54);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i59);

        if $i54 <= $i59 goto label6;

        $i60 = v4#4;

        goto label7;

     label6:
        $i60 = v3#3;

     label7:
        return $i60;
    }

    private void trFixDown(int, int, int, int)
    {
        kanzi.transform.DivSufSort this;
        int isad, saIdx, size, v, c, e, i#1, $i0, $i1, $i2, j#19, k#23, j#24, $i3, $i4, $i5, d#34, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        int[] arr;

        this := @this: kanzi.transform.DivSufSort;

        isad := @parameter0: int;

        saIdx := @parameter1: int;

        i#1 := @parameter2: int;

        size := @parameter3: int;

        arr = this.<kanzi.transform.DivSufSort: int[] sa>;

        $i0 = saIdx + i#1;

        v = arr[$i0];

        $i1 = isad + v;

        c = arr[$i1];

        $i2 = i#1 << 1;

        j#19 = $i2 + 1;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#19);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(size);

        if j#19 >= size goto label4;

        k#23 = j#19;

        j#24 = j#19 + 1;

        $i3 = saIdx + k#23;

        $i4 = arr[$i3];

        $i5 = isad + $i4;

        d#34 = arr[$i5];

        $i6 = saIdx + j#24;

        $i7 = arr[$i6];

        $i8 = isad + $i7;

        e = arr[$i8];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(d#34);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(e);

        if d#34 >= e goto label2;

        k#23 = j#24;

        d#34 = e;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(d#34);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(c);

        if d#34 > c goto label3;

        goto label4;

     label3:
        $i9 = saIdx + i#1;

        $i10 = saIdx + k#23;

        $i11 = arr[$i10];

        arr[$i9] = $i11;

        i#1 = k#23;

        $i12 = i#1 << 1;

        j#19 = $i12 + 1;

        goto label1;

     label4:
        $i13 = saIdx + i#1;

        arr[$i13] = v;

        return;
    }


