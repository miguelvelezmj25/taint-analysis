    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "com/sleepycat/je/latch/SharedLatchImpl";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sleepycat.je.latch.SharedLatchImpl: boolean $assertionsDisabled> = $z1;

        return;
    }

    void <init>(boolean, com.sleepycat.je.latch.LatchContext)
    {
        com.sleepycat.je.latch.SharedLatchImpl this;
        boolean fair;
        com.sleepycat.je.latch.LatchContext context;

        this := @this: com.sleepycat.je.latch.SharedLatchImpl;

        fair := @parameter0: boolean;

        context := @parameter1: com.sleepycat.je.latch.LatchContext;

        specialinvoke this.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>(boolean)>(fair);

        this.<com.sleepycat.je.latch.SharedLatchImpl: com.sleepycat.je.latch.LatchContext context> = context;

        return;
    }

    public void release()
    {
        com.sleepycat.je.latch.SharedLatchImpl this;

        this := @this: com.sleepycat.je.latch.SharedLatchImpl;

        specialinvoke this.<com.sleepycat.je.latch.SharedLatchImpl: void doRelease(boolean)>(0);

        return;
    }

    private void doRelease(boolean)
    {
        com.sleepycat.je.latch.SharedLatchImpl this;
        boolean ifOwner, $z0, $z1, $z2, $z3;
        int $i0;
        com.sleepycat.je.latch.LatchContext $r0, $r2, $r4;
        java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock $r1;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r3;
        com.sleepycat.je.dbi.EnvironmentImpl $r5;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.lang.String $r8, $r10;
        com.sleepycat.je.EnvironmentFailureException $r11;

        this := @this: com.sleepycat.je.latch.SharedLatchImpl;

        ifOwner := @parameter0: boolean;

        $i0 = virtualinvoke this.<com.sleepycat.je.latch.SharedLatchImpl: int getReadHoldCount()>();

        if $i0 <= 0 goto label2;

        $z0 = <com.sleepycat.je.latch.LatchSupport: boolean TRACK_LATCHES>;

        if $z0 == 0 goto label1;

        $r0 = this.<com.sleepycat.je.latch.SharedLatchImpl: com.sleepycat.je.latch.LatchContext context>;

        staticinvoke <com.sleepycat.je.latch.LatchSupport: void trackRelease(com.sleepycat.je.latch.Latch,com.sleepycat.je.latch.LatchContext)>(this, $r0);

     label1:
        $r1 = virtualinvoke this.<com.sleepycat.je.latch.SharedLatchImpl: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>();

        return;

     label2:
        $z1 = virtualinvoke this.<com.sleepycat.je.latch.SharedLatchImpl: boolean isWriteLockedByCurrentThread()>();

        if $z1 == 0 goto label5;

        $z2 = <com.sleepycat.je.latch.LatchSupport: boolean CAPTURE_OWNER>;

        if $z2 == 0 goto label3;

        this.<com.sleepycat.je.latch.SharedLatchImpl: com.sleepycat.je.latch.OwnerInfo lastOwnerInfo> = null;

     label3:
        $z3 = <com.sleepycat.je.latch.LatchSupport: boolean TRACK_LATCHES>;

        if $z3 == 0 goto label4;

        $r2 = this.<com.sleepycat.je.latch.SharedLatchImpl: com.sleepycat.je.latch.LatchContext context>;

        staticinvoke <com.sleepycat.je.latch.LatchSupport: void trackRelease(com.sleepycat.je.latch.Latch,com.sleepycat.je.latch.LatchContext)>(this, $r2);

     label4:
        $r3 = virtualinvoke this.<com.sleepycat.je.latch.SharedLatchImpl: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r3.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        return;

     label5:
        if ifOwner != 0 goto label6;

        $r4 = this.<com.sleepycat.je.latch.SharedLatchImpl: com.sleepycat.je.latch.LatchContext context>;

        $r5 = interfaceinvoke $r4.<com.sleepycat.je.latch.LatchContext: com.sleepycat.je.dbi.EnvironmentImpl getEnvImplForFatalException()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Latch not held: ");

        $r8 = virtualinvoke this.<com.sleepycat.je.latch.SharedLatchImpl: java.lang.String debugString()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedState(com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String)>($r5, $r10);

        throw $r11;

     label6:
        return;
    }

    public java.lang.String debugString()
    {
        com.sleepycat.je.latch.SharedLatchImpl this;
        com.sleepycat.je.latch.LatchContext $r0;
        com.sleepycat.je.latch.OwnerInfo $r1;
        java.lang.String $r2;

        this := @this: com.sleepycat.je.latch.SharedLatchImpl;

        $r0 = this.<com.sleepycat.je.latch.SharedLatchImpl: com.sleepycat.je.latch.LatchContext context>;

        $r1 = this.<com.sleepycat.je.latch.SharedLatchImpl: com.sleepycat.je.latch.OwnerInfo lastOwnerInfo>;

        $r2 = staticinvoke <com.sleepycat.je.latch.LatchSupport: java.lang.String debugString(com.sleepycat.je.latch.Latch,com.sleepycat.je.latch.LatchContext,com.sleepycat.je.latch.OwnerInfo)>(this, $r0, $r1);

        return $r2;
    }

    public void acquireShared()
    {
        com.sleepycat.je.latch.SharedLatchImpl this;
        java.lang.InterruptedException e, $r21;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.sleepycat.je.latch.LatchContext $r0, $r8, $r17, $r19, $r23, $r25;
        com.sleepycat.je.dbi.EnvironmentImpl $r1, $r9, $r24;
        java.lang.StringBuilder $r2, $r3, $r5, $r10, $r11, $r13;
        java.lang.String $r4, $r6, $r12, $r14;
        com.sleepycat.je.EnvironmentFailureException $r7, $r15, $r20;
        int $i0, $i1;
        java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock $r16;
        long $l2;
        java.util.concurrent.TimeUnit $r18;
        com.sleepycat.je.ThreadInterruptedException $r22;
        java.lang.AssertionError $r26;

        this := @this: com.sleepycat.je.latch.SharedLatchImpl;

        $z0 = virtualinvoke this.<com.sleepycat.je.latch.SharedLatchImpl: boolean isWriteLockedByCurrentThread()>();

        if $z0 == 0 goto label1;

        $r0 = this.<com.sleepycat.je.latch.SharedLatchImpl: com.sleepycat.je.latch.LatchContext context>;

        $r1 = interfaceinvoke $r0.<com.sleepycat.je.latch.LatchContext: com.sleepycat.je.dbi.EnvironmentImpl getEnvImplForFatalException()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Latch already held exclusively: ");

        $r4 = virtualinvoke this.<com.sleepycat.je.latch.SharedLatchImpl: java.lang.String debugString()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedState(com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String)>($r1, $r6);

        throw $r7;

     label1:
        $i0 = virtualinvoke this.<com.sleepycat.je.latch.SharedLatchImpl: int getReadHoldCount()>();

        if $i0 <= 0 goto label2;

        $r8 = this.<com.sleepycat.je.latch.SharedLatchImpl: com.sleepycat.je.latch.LatchContext context>;

        $r9 = interfaceinvoke $r8.<com.sleepycat.je.latch.LatchContext: com.sleepycat.je.dbi.EnvironmentImpl getEnvImplForFatalException()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Latch already held non-exclusively: ");

        $r12 = virtualinvoke this.<com.sleepycat.je.latch.SharedLatchImpl: java.lang.String debugString()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedState(com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String)>($r9, $r14);

        throw $r15;

     label2:
        $r16 = virtualinvoke this.<com.sleepycat.je.latch.SharedLatchImpl: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        $r17 = this.<com.sleepycat.je.latch.SharedLatchImpl: com.sleepycat.je.latch.LatchContext context>;

        $i1 = interfaceinvoke $r17.<com.sleepycat.je.latch.LatchContext: int getLatchTimeoutMs()>();

        $l2 = (long) $i1;

        $r18 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $z1 = virtualinvoke $r16.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: boolean tryLock(long,java.util.concurrent.TimeUnit)>($l2, $r18);

        if $z1 != 0 goto label3;

        $r19 = this.<com.sleepycat.je.latch.SharedLatchImpl: com.sleepycat.je.latch.LatchContext context>;

        $r20 = staticinvoke <com.sleepycat.je.latch.LatchSupport: com.sleepycat.je.EnvironmentFailureException handleTimeout(com.sleepycat.je.latch.Latch,com.sleepycat.je.latch.LatchContext)>(this, $r19);

        throw $r20;

     label3:
        goto label5;

     label4:
        $r21 := @caughtexception;

        e = $r21;

        $r22 = new com.sleepycat.je.ThreadInterruptedException;

        $r23 = this.<com.sleepycat.je.latch.SharedLatchImpl: com.sleepycat.je.latch.LatchContext context>;

        $r24 = interfaceinvoke $r23.<com.sleepycat.je.latch.LatchContext: com.sleepycat.je.dbi.EnvironmentImpl getEnvImplForFatalException()>();

        specialinvoke $r22.<com.sleepycat.je.ThreadInterruptedException: void <init>(com.sleepycat.je.dbi.EnvironmentImpl,java.lang.Throwable)>($r24, e);

        throw $r22;

     label5:
        $z2 = <com.sleepycat.je.latch.LatchSupport: boolean TRACK_LATCHES>;

        if $z2 == 0 goto label6;

        $r25 = this.<com.sleepycat.je.latch.SharedLatchImpl: com.sleepycat.je.latch.LatchContext context>;

        staticinvoke <com.sleepycat.je.latch.LatchSupport: void trackAcquire(com.sleepycat.je.latch.Latch,com.sleepycat.je.latch.LatchContext)>(this, $r25);

     label6:
        $z3 = <com.sleepycat.je.latch.SharedLatchImpl: boolean $assertionsDisabled>;

        if $z3 != 0 goto label7;

        $z4 = staticinvoke <com.sleepycat.je.dbi.EnvironmentImpl: boolean maybeForceYield()>();

        if $z4 != 0 goto label7;

        $r26 = new java.lang.AssertionError;

        specialinvoke $r26.<java.lang.AssertionError: void <init>()>();

        throw $r26;

     label7:
        return;

        catch java.lang.InterruptedException from label2 to label3 with label4;
    }

    public boolean isExclusiveOwner()
    {
        com.sleepycat.je.latch.SharedLatchImpl this;
        boolean $z0;

        this := @this: com.sleepycat.je.latch.SharedLatchImpl;

        $z0 = virtualinvoke this.<com.sleepycat.je.latch.SharedLatchImpl: boolean isWriteLockedByCurrentThread()>();

        return $z0;
    }

    public void acquireExclusive()
    {
        com.sleepycat.je.latch.SharedLatchImpl this;

        this := @this: com.sleepycat.je.latch.SharedLatchImpl;

        specialinvoke this.<com.sleepycat.je.latch.SharedLatchImpl: boolean doAcquireExclusive(boolean)>(0);

        return;
    }

    private boolean doAcquireExclusive(boolean)
    {
        com.sleepycat.je.latch.SharedLatchImpl this;
        boolean noWait, $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.InterruptedException e, $r14;
        int $i0, $i1;
        com.sleepycat.je.latch.LatchContext $r0, $r10, $r12, $r16, $r18, $r20;
        com.sleepycat.je.dbi.EnvironmentImpl $r1, $r17;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r4, $r6;
        com.sleepycat.je.EnvironmentFailureException $r7, $r13;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r8, $r9;
        long $l2;
        java.util.concurrent.TimeUnit $r11;
        com.sleepycat.je.ThreadInterruptedException $r15;
        com.sleepycat.je.latch.OwnerInfo $r19;
        java.lang.AssertionError $r21;

        this := @this: com.sleepycat.je.latch.SharedLatchImpl;

        noWait := @parameter0: boolean;

        $z0 = virtualinvoke this.<com.sleepycat.je.latch.SharedLatchImpl: boolean isWriteLockedByCurrentThread()>();

        if $z0 != 0 goto label1;

        $i0 = virtualinvoke this.<com.sleepycat.je.latch.SharedLatchImpl: int getReadHoldCount()>();

        if $i0 <= 0 goto label2;

     label1:
        $r0 = this.<com.sleepycat.je.latch.SharedLatchImpl: com.sleepycat.je.latch.LatchContext context>;

        $r1 = interfaceinvoke $r0.<com.sleepycat.je.latch.LatchContext: com.sleepycat.je.dbi.EnvironmentImpl getEnvImplForFatalException()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Latch already held: ");

        $r4 = virtualinvoke this.<com.sleepycat.je.latch.SharedLatchImpl: java.lang.String debugString()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedState(com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String)>($r1, $r6);

        throw $r7;

     label2:
        if noWait == 0 goto label3;

        $r8 = virtualinvoke this.<com.sleepycat.je.latch.SharedLatchImpl: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        $z1 = virtualinvoke $r8.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: boolean tryLock()>();

        if $z1 != 0 goto label6;

        return 0;

     label3:
        $r9 = virtualinvoke this.<com.sleepycat.je.latch.SharedLatchImpl: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        $r10 = this.<com.sleepycat.je.latch.SharedLatchImpl: com.sleepycat.je.latch.LatchContext context>;

        $i1 = interfaceinvoke $r10.<com.sleepycat.je.latch.LatchContext: int getLatchTimeoutMs()>();

        $l2 = (long) $i1;

        $r11 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $z2 = virtualinvoke $r9.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: boolean tryLock(long,java.util.concurrent.TimeUnit)>($l2, $r11);

        if $z2 != 0 goto label4;

        $r12 = this.<com.sleepycat.je.latch.SharedLatchImpl: com.sleepycat.je.latch.LatchContext context>;

        $r13 = staticinvoke <com.sleepycat.je.latch.LatchSupport: com.sleepycat.je.EnvironmentFailureException handleTimeout(com.sleepycat.je.latch.Latch,com.sleepycat.je.latch.LatchContext)>(this, $r12);

        throw $r13;

     label4:
        goto label6;

     label5:
        $r14 := @caughtexception;

        e = $r14;

        $r15 = new com.sleepycat.je.ThreadInterruptedException;

        $r16 = this.<com.sleepycat.je.latch.SharedLatchImpl: com.sleepycat.je.latch.LatchContext context>;

        $r17 = interfaceinvoke $r16.<com.sleepycat.je.latch.LatchContext: com.sleepycat.je.dbi.EnvironmentImpl getEnvImplForFatalException()>();

        specialinvoke $r15.<com.sleepycat.je.ThreadInterruptedException: void <init>(com.sleepycat.je.dbi.EnvironmentImpl,java.lang.Throwable)>($r17, e);

        throw $r15;

     label6:
        $z3 = <com.sleepycat.je.latch.LatchSupport: boolean TRACK_LATCHES>;

        if $z3 == 0 goto label7;

        $r18 = this.<com.sleepycat.je.latch.SharedLatchImpl: com.sleepycat.je.latch.LatchContext context>;

        staticinvoke <com.sleepycat.je.latch.LatchSupport: void trackAcquire(com.sleepycat.je.latch.Latch,com.sleepycat.je.latch.LatchContext)>(this, $r18);

     label7:
        $z4 = <com.sleepycat.je.latch.LatchSupport: boolean CAPTURE_OWNER>;

        if $z4 == 0 goto label8;

        $r19 = new com.sleepycat.je.latch.OwnerInfo;

        $r20 = this.<com.sleepycat.je.latch.SharedLatchImpl: com.sleepycat.je.latch.LatchContext context>;

        specialinvoke $r19.<com.sleepycat.je.latch.OwnerInfo: void <init>(com.sleepycat.je.latch.LatchContext)>($r20);

        this.<com.sleepycat.je.latch.SharedLatchImpl: com.sleepycat.je.latch.OwnerInfo lastOwnerInfo> = $r19;

     label8:
        $z5 = <com.sleepycat.je.latch.SharedLatchImpl: boolean $assertionsDisabled>;

        if $z5 != 0 goto label9;

        $z6 = staticinvoke <com.sleepycat.je.dbi.EnvironmentImpl: boolean maybeForceYield()>();

        if $z6 != 0 goto label9;

        $r21 = new java.lang.AssertionError;

        specialinvoke $r21.<java.lang.AssertionError: void <init>()>();

        throw $r21;

     label9:
        return 1;

        catch java.lang.InterruptedException from label3 to label4 with label5;
    }

    public java.lang.Thread getExclusiveOwner()
    {
        com.sleepycat.je.latch.SharedLatchImpl this;
        java.lang.Thread $r0;

        this := @this: com.sleepycat.je.latch.SharedLatchImpl;

        $r0 = virtualinvoke this.<com.sleepycat.je.latch.SharedLatchImpl: java.lang.Thread getOwner()>();

        return $r0;
    }

    public boolean isOwner()
    {
        com.sleepycat.je.latch.SharedLatchImpl this;
        boolean $z0, $z1;
        int $i0;

        this := @this: com.sleepycat.je.latch.SharedLatchImpl;

        $z0 = virtualinvoke this.<com.sleepycat.je.latch.SharedLatchImpl: boolean isWriteLockedByCurrentThread()>();

        if $z0 != 0 goto label1;

        $i0 = virtualinvoke this.<com.sleepycat.je.latch.SharedLatchImpl: int getReadHoldCount()>();

        if $i0 <= 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public void releaseIfOwner()
    {
        com.sleepycat.je.latch.SharedLatchImpl this;

        this := @this: com.sleepycat.je.latch.SharedLatchImpl;

        specialinvoke this.<com.sleepycat.je.latch.SharedLatchImpl: void doRelease(boolean)>(1);

        return;
    }


