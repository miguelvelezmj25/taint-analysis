    static void <clinit>()
    {
        double $d0, $d1;

        $d0 = staticinvoke <java.lang.Math: double log(double)>(6.283185307179586);

        $d1 = -0.5 * $d0;

        <weka.estimators.UnivariateKernelEstimator: double CONST> = $d1;

        return;
    }

    public void <init>()
    {
        weka.estimators.UnivariateKernelEstimator this;
        java.util.TreeMap $r0;

        this := @this: weka.estimators.UnivariateKernelEstimator;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = new java.util.TreeMap;

        specialinvoke $r0.<java.util.TreeMap: void <init>()>();

        this.<weka.estimators.UnivariateKernelEstimator: java.util.TreeMap m_TM> = $r0;

        this.<weka.estimators.UnivariateKernelEstimator: double m_WeightedSum> = 0.0;

        this.<weka.estimators.UnivariateKernelEstimator: double m_WeightedSumSquared> = 0.0;

        this.<weka.estimators.UnivariateKernelEstimator: double m_SumOfWeights> = 0.0;

        this.<weka.estimators.UnivariateKernelEstimator: double m_Width> = 1.7976931348623157E308;

        this.<weka.estimators.UnivariateKernelEstimator: double m_Exponent> = -0.25;

        this.<weka.estimators.UnivariateKernelEstimator: double m_MinWidth> = 1.0E-6;

        this.<weka.estimators.UnivariateKernelEstimator: double m_Threshold> = 1.0E-6;

        this.<weka.estimators.UnivariateKernelEstimator: int m_NumIntervals> = 1000;

        return;
    }

    public void addValue(double, double)
    {
        weka.estimators.UnivariateKernelEstimator this;
        double value, weight, $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        java.util.TreeMap $r3, $r6, $r10, $r12;
        java.lang.Double $r4, $r7, $r8, $r11, $r13, $r15, $r16;
        java.lang.Object $r5, $r14;

        this := @this: weka.estimators.UnivariateKernelEstimator;

        value := @parameter0: double;

        weight := @parameter1: double;

        $d0 = this.<weka.estimators.UnivariateKernelEstimator: double m_WeightedSum>;

        $d1 = value * weight;

        $d2 = $d0 + $d1;

        this.<weka.estimators.UnivariateKernelEstimator: double m_WeightedSum> = $d2;

        $d3 = this.<weka.estimators.UnivariateKernelEstimator: double m_WeightedSumSquared>;

        $d4 = value * value;

        $d5 = $d4 * weight;

        $d6 = $d3 + $d5;

        this.<weka.estimators.UnivariateKernelEstimator: double m_WeightedSumSquared> = $d6;

        $d7 = this.<weka.estimators.UnivariateKernelEstimator: double m_SumOfWeights>;

        $d8 = $d7 + weight;

        this.<weka.estimators.UnivariateKernelEstimator: double m_SumOfWeights> = $d8;

        $r3 = this.<weka.estimators.UnivariateKernelEstimator: java.util.TreeMap m_TM>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(value);

        $r5 = virtualinvoke $r3.<java.util.TreeMap: java.lang.Object get(java.lang.Object)>($r4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r5);

        if $r5 != null goto label1;

        $r6 = this.<weka.estimators.UnivariateKernelEstimator: java.util.TreeMap m_TM>;

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(value);

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(weight);

        virtualinvoke $r6.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r8);

        goto label2;

     label1:
        $r10 = this.<weka.estimators.UnivariateKernelEstimator: java.util.TreeMap m_TM>;

        $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(value);

        $r12 = this.<weka.estimators.UnivariateKernelEstimator: java.util.TreeMap m_TM>;

        $r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(value);

        $r14 = virtualinvoke $r12.<java.util.TreeMap: java.lang.Object get(java.lang.Object)>($r13);

        $r15 = (java.lang.Double) $r14;

        $d9 = virtualinvoke $r15.<java.lang.Double: double doubleValue()>();

        $d10 = $d9 + weight;

        $r16 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d10);

        virtualinvoke $r10.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r16);

     label2:
        return;
    }

    public double logDensity(double)
    {
        weka.estimators.UnivariateKernelEstimator this;
        double value, $d0, $d1, $d2, $d3;
        double[] sums;
        java.util.TreeMap $r0, $r4;
        java.lang.Double $r1, $r5;
        java.util.NavigableMap $r2, $r6, $r7;
        java.util.Set $r3, $r8;

        this := @this: weka.estimators.UnivariateKernelEstimator;

        value := @parameter0: double;

        virtualinvoke this.<weka.estimators.UnivariateKernelEstimator: void updateWidth()>();

        sums = newarray (double)[2];

        sums[0] = #NaN;

        sums[1] = #NaN;

        $r0 = this.<weka.estimators.UnivariateKernelEstimator: java.util.TreeMap m_TM>;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(value);

        $r2 = virtualinvoke $r0.<java.util.TreeMap: java.util.NavigableMap tailMap(java.lang.Object,boolean)>($r1, 1);

        $r3 = interfaceinvoke $r2.<java.util.NavigableMap: java.util.Set entrySet()>();

        virtualinvoke this.<weka.estimators.UnivariateKernelEstimator: void runningSum(java.util.Set,double,double[])>($r3, value, sums);

        $r4 = this.<weka.estimators.UnivariateKernelEstimator: java.util.TreeMap m_TM>;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(value);

        $r6 = virtualinvoke $r4.<java.util.TreeMap: java.util.NavigableMap headMap(java.lang.Object,boolean)>($r5, 0);

        $r7 = interfaceinvoke $r6.<java.util.NavigableMap: java.util.NavigableMap descendingMap()>();

        $r8 = interfaceinvoke $r7.<java.util.NavigableMap: java.util.Set entrySet()>();

        virtualinvoke this.<weka.estimators.UnivariateKernelEstimator: void runningSum(java.util.Set,double,double[])>($r8, value, sums);

        $d0 = sums[0];

        $d1 = this.<weka.estimators.UnivariateKernelEstimator: double m_SumOfWeights>;

        $d2 = staticinvoke <java.lang.Math: double log(double)>($d1);

        $d3 = $d0 - $d2;

        return $d3;
    }

    public void updateWidth()
    {
        weka.estimators.UnivariateKernelEstimator this;
        double mean, $d0, $d1, $d2, $d3, $d4, $d5, $d6, variance#18, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14;
        byte $b0, $b1, $b2;

        this := @this: weka.estimators.UnivariateKernelEstimator;

        $d0 = this.<weka.estimators.UnivariateKernelEstimator: double m_SumOfWeights>;

        $b0 = $d0 cmpl 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 <= 0 goto label3;

        $d1 = this.<weka.estimators.UnivariateKernelEstimator: double m_WeightedSum>;

        $d2 = this.<weka.estimators.UnivariateKernelEstimator: double m_SumOfWeights>;

        mean = $d1 / $d2;

        $d3 = this.<weka.estimators.UnivariateKernelEstimator: double m_WeightedSumSquared>;

        $d4 = this.<weka.estimators.UnivariateKernelEstimator: double m_SumOfWeights>;

        $d5 = $d3 / $d4;

        $d6 = mean * mean;

        variance#18 = $d5 - $d6;

        $b1 = variance#18 cmpg 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 >= 0 goto label1;

        variance#18 = 0.0;

     label1:
        $d7 = staticinvoke <java.lang.Math: double sqrt(double)>(variance#18);

        $d8 = this.<weka.estimators.UnivariateKernelEstimator: double m_SumOfWeights>;

        $d9 = this.<weka.estimators.UnivariateKernelEstimator: double m_Exponent>;

        $d10 = staticinvoke <java.lang.Math: double pow(double,double)>($d8, $d9);

        $d11 = $d7 * $d10;

        this.<weka.estimators.UnivariateKernelEstimator: double m_Width> = $d11;

        $d12 = this.<weka.estimators.UnivariateKernelEstimator: double m_Width>;

        $d13 = this.<weka.estimators.UnivariateKernelEstimator: double m_MinWidth>;

        $b2 = $d12 cmpg $d13;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b2);

        if $b2 > 0 goto label2;

        $d14 = this.<weka.estimators.UnivariateKernelEstimator: double m_MinWidth>;

        this.<weka.estimators.UnivariateKernelEstimator: double m_Width> = $d14;

     label2:
        goto label4;

     label3:
        this.<weka.estimators.UnivariateKernelEstimator: double m_Width> = 1.7976931348623157E308;

     label4:
        return;
    }

    protected void runningSum(java.util.Set, double, double[])
    {
        weka.estimators.UnivariateKernelEstimator this;
        java.util.Set c;
        double value, offset, logFactor, logSumOfWeights, diff, logDensity, logWeight, $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26;
        double[] sums;
        java.util.Iterator itr;
        java.util.Map$Entry entry;
        boolean $z0;
        java.lang.Object $r0, $r1, $r3, $r5;
        java.lang.Double $r2, $r4, $r6;
        byte $b0, $b1;

        this := @this: weka.estimators.UnivariateKernelEstimator;

        c := @parameter0: java.util.Set;

        value := @parameter1: double;

        sums := @parameter2: double[];

        $d0 = <weka.estimators.UnivariateKernelEstimator: double CONST>;

        $d1 = this.<weka.estimators.UnivariateKernelEstimator: double m_Width>;

        $d2 = staticinvoke <java.lang.Math: double log(double)>($d1);

        offset = $d0 - $d2;

        $d3 = this.<weka.estimators.UnivariateKernelEstimator: double m_Threshold>;

        $d4 = staticinvoke <java.lang.Math: double log(double)>($d3);

        $d5 = this.<weka.estimators.UnivariateKernelEstimator: double m_Threshold>;

        $d6 = 1.0 - $d5;

        $d7 = staticinvoke <java.lang.Math: double log(double)>($d6);

        logFactor = $d4 - $d7;

        $d8 = this.<weka.estimators.UnivariateKernelEstimator: double m_SumOfWeights>;

        logSumOfWeights = staticinvoke <java.lang.Math: double log(double)>($d8);

        itr = interfaceinvoke c.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke itr.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        $r0 = interfaceinvoke itr.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $r0;

        $r1 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r2 = (java.lang.Double) $r1;

        $d9 = virtualinvoke $r2.<java.lang.Double: double doubleValue()>();

        $b0 = $d9 cmpl 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 <= 0 goto label2;

        $r3 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r4 = (java.lang.Double) $r3;

        $d10 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

        $d11 = $d10 - value;

        $d12 = this.<weka.estimators.UnivariateKernelEstimator: double m_Width>;

        diff = $d11 / $d12;

        $d13 = 0.5 * diff;

        $d14 = $d13 * diff;

        logDensity = offset - $d14;

        $r5 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r6 = (java.lang.Double) $r5;

        $d15 = virtualinvoke $r6.<java.lang.Double: double doubleValue()>();

        logWeight = staticinvoke <java.lang.Math: double log(double)>($d15);

        $d16 = sums[0];

        $d17 = logWeight + logDensity;

        $d18 = virtualinvoke this.<weka.estimators.UnivariateKernelEstimator: double logOfSum(double,double)>($d16, $d17);

        sums[0] = $d18;

        $d19 = sums[1];

        $d20 = virtualinvoke this.<weka.estimators.UnivariateKernelEstimator: double logOfSum(double,double)>($d19, logWeight);

        sums[1] = $d20;

        $d21 = logDensity + logSumOfWeights;

        $d22 = sums[0];

        $d23 = logFactor + $d22;

        $d24 = sums[1];

        $d25 = logDensity + $d24;

        $d26 = virtualinvoke this.<weka.estimators.UnivariateKernelEstimator: double logOfSum(double,double)>($d23, $d25);

        $b1 = $d21 cmpg $d26;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 >= 0 goto label2;

        goto label3;

     label2:
        goto label1;

     label3:
        return;
    }

    protected double logOfSum(double, double)
    {
        weka.estimators.UnivariateKernelEstimator this;
        double logOfX, logOfY, $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;
        boolean $z0, $z1;
        byte $b0;

        this := @this: weka.estimators.UnivariateKernelEstimator;

        logOfX := @parameter0: double;

        logOfY := @parameter1: double;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(logOfX);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        return logOfY;

     label1:
        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(logOfY);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        return logOfX;

     label2:
        $b0 = logOfX cmpl logOfY;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 <= 0 goto label3;

        $d0 = logOfY - logOfX;

        $d1 = staticinvoke <java.lang.Math: double exp(double)>($d0);

        $d2 = 1.0 + $d1;

        $d3 = staticinvoke <java.lang.Math: double log(double)>($d2);

        $d4 = logOfX + $d3;

        return $d4;

     label3:
        $d5 = logOfX - logOfY;

        $d6 = staticinvoke <java.lang.Math: double exp(double)>($d5);

        $d7 = 1.0 + $d6;

        $d8 = staticinvoke <java.lang.Math: double log(double)>($d7);

        $d9 = logOfY + $d8;

        return $d9;
    }


