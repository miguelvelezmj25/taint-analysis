    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        com.sleepycat.je.CursorConfig $r1, $r2, $r3, $r4, $r5, $r6;

        $r0 = class "com/sleepycat/je/Database";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sleepycat.je.Database: boolean $assertionsDisabled> = $z1;

        $r1 = <com.sleepycat.je.CursorConfig: com.sleepycat.je.CursorConfig DEFAULT>;

        $r2 = virtualinvoke $r1.<com.sleepycat.je.CursorConfig: com.sleepycat.je.CursorConfig clone()>();

        $r3 = virtualinvoke $r2.<com.sleepycat.je.CursorConfig: com.sleepycat.je.CursorConfig setNonSticky(boolean)>(1);

        <com.sleepycat.je.Database: com.sleepycat.je.CursorConfig DEFAULT_CURSOR_CONFIG> = $r3;

        $r4 = <com.sleepycat.je.CursorConfig: com.sleepycat.je.CursorConfig READ_COMMITTED>;

        $r5 = virtualinvoke $r4.<com.sleepycat.je.CursorConfig: com.sleepycat.je.CursorConfig clone()>();

        $r6 = virtualinvoke $r5.<com.sleepycat.je.CursorConfig: com.sleepycat.je.CursorConfig setNonSticky(boolean)>(1);

        <com.sleepycat.je.Database: com.sleepycat.je.CursorConfig READ_COMMITTED_CURSOR_CONFIG> = $r6;

        return;
    }

    void <init>(com.sleepycat.je.Environment)
    {
        com.sleepycat.je.Database this;
        com.sleepycat.je.Environment env;
        java.util.concurrent.atomic.AtomicInteger $r0;
        com.sleepycat.je.dbi.EnvironmentImpl $r1;
        java.util.logging.Logger $r2;

        this := @this: com.sleepycat.je.Database;

        env := @parameter0: com.sleepycat.je.Environment;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        this.<com.sleepycat.je.Database: java.util.concurrent.atomic.AtomicInteger openCursors> = $r0;

        this.<com.sleepycat.je.Database: com.sleepycat.je.Environment envHandle> = env;

        $r1 = virtualinvoke this.<com.sleepycat.je.Database: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r2 = virtualinvoke $r1.<com.sleepycat.je.dbi.EnvironmentImpl: java.util.logging.Logger getLogger()>();

        this.<com.sleepycat.je.Database: java.util.logging.Logger logger> = $r2;

        return;
    }

    com.sleepycat.je.dbi.EnvironmentImpl getEnv()
    {
        com.sleepycat.je.Database this;
        com.sleepycat.je.Environment $r0;
        com.sleepycat.je.dbi.EnvironmentImpl $r1;

        this := @this: com.sleepycat.je.Database;

        $r0 = this.<com.sleepycat.je.Database: com.sleepycat.je.Environment envHandle>;

        $r1 = virtualinvoke $r0.<com.sleepycat.je.Environment: com.sleepycat.je.dbi.EnvironmentImpl getNonNullEnvImpl()>();

        return $r1;
    }

    com.sleepycat.je.txn.HandleLocker initHandleLocker(com.sleepycat.je.dbi.EnvironmentImpl, com.sleepycat.je.txn.Locker)
    {
        com.sleepycat.je.Database this;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        com.sleepycat.je.txn.Locker openDbLocker;
        com.sleepycat.je.txn.HandleLocker $r0, $r1;

        this := @this: com.sleepycat.je.Database;

        envImpl := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        openDbLocker := @parameter1: com.sleepycat.je.txn.Locker;

        $r0 = staticinvoke <com.sleepycat.je.txn.HandleLocker: com.sleepycat.je.txn.HandleLocker createHandleLocker(com.sleepycat.je.dbi.EnvironmentImpl,com.sleepycat.je.txn.Locker)>(envImpl, openDbLocker);

        this.<com.sleepycat.je.Database: com.sleepycat.je.txn.HandleLocker handleLocker> = $r0;

        $r1 = this.<com.sleepycat.je.Database: com.sleepycat.je.txn.HandleLocker handleLocker>;

        return $r1;
    }

    void initExisting(com.sleepycat.je.Environment, com.sleepycat.je.txn.Locker, com.sleepycat.je.dbi.DatabaseImpl, java.lang.String, com.sleepycat.je.DatabaseConfig)
    {
        com.sleepycat.je.Database this;
        com.sleepycat.je.Environment env;
        com.sleepycat.je.txn.Locker locker;
        com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        java.lang.String databaseName;
        com.sleepycat.je.DatabaseConfig dbConfig;

        this := @this: com.sleepycat.je.Database;

        env := @parameter0: com.sleepycat.je.Environment;

        locker := @parameter1: com.sleepycat.je.txn.Locker;

        dbImpl := @parameter2: com.sleepycat.je.dbi.DatabaseImpl;

        databaseName := @parameter3: java.lang.String;

        dbConfig := @parameter4: com.sleepycat.je.DatabaseConfig;

        specialinvoke this.<com.sleepycat.je.Database: void validateConfigAgainstExistingDb(com.sleepycat.je.txn.Locker,java.lang.String,com.sleepycat.je.DatabaseConfig,com.sleepycat.je.dbi.DatabaseImpl)>(locker, databaseName, dbConfig, dbImpl);

        specialinvoke this.<com.sleepycat.je.Database: void init(com.sleepycat.je.Environment,com.sleepycat.je.DatabaseConfig)>(env, dbConfig);

        this.<com.sleepycat.je.Database: com.sleepycat.je.dbi.DatabaseImpl databaseImpl> = dbImpl;

        virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: void addReferringHandle(com.sleepycat.je.Database)>(this);

        return;
    }

    com.sleepycat.je.dbi.DatabaseImpl initNew(com.sleepycat.je.Environment, com.sleepycat.je.txn.Locker, java.lang.String, com.sleepycat.je.DatabaseConfig)
    {
        com.sleepycat.je.Database this;
        com.sleepycat.je.Environment env;
        com.sleepycat.je.txn.Locker locker;
        java.lang.String databaseName;
        com.sleepycat.je.DatabaseConfig dbConfig;
        com.sleepycat.je.dbi.EnvironmentImpl $r0;
        com.sleepycat.je.dbi.DbTree $r1;
        com.sleepycat.je.txn.HandleLocker $r2;
        com.sleepycat.je.dbi.DatabaseImpl $r3, $r4, $r5;

        this := @this: com.sleepycat.je.Database;

        env := @parameter0: com.sleepycat.je.Environment;

        locker := @parameter1: com.sleepycat.je.txn.Locker;

        databaseName := @parameter2: java.lang.String;

        dbConfig := @parameter3: com.sleepycat.je.DatabaseConfig;

        virtualinvoke dbConfig.<com.sleepycat.je.DatabaseConfig: void validateForNewDb()>();

        specialinvoke this.<com.sleepycat.je.Database: void init(com.sleepycat.je.Environment,com.sleepycat.je.DatabaseConfig)>(env, dbConfig);

        $r0 = virtualinvoke this.<com.sleepycat.je.Database: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r1 = virtualinvoke $r0.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.DbTree getDbTree()>();

        $r2 = this.<com.sleepycat.je.Database: com.sleepycat.je.txn.HandleLocker handleLocker>;

        $r3 = virtualinvoke $r1.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl createDb(com.sleepycat.je.txn.Locker,java.lang.String,com.sleepycat.je.DatabaseConfig,com.sleepycat.je.txn.HandleLocker)>(locker, databaseName, dbConfig, $r2);

        this.<com.sleepycat.je.Database: com.sleepycat.je.dbi.DatabaseImpl databaseImpl> = $r3;

        $r4 = this.<com.sleepycat.je.Database: com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        virtualinvoke $r4.<com.sleepycat.je.dbi.DatabaseImpl: void addReferringHandle(com.sleepycat.je.Database)>(this);

        $r5 = this.<com.sleepycat.je.Database: com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        return $r5;
    }

    boolean isWritable()
    {
        com.sleepycat.je.Database this;
        boolean $z0;

        this := @this: com.sleepycat.je.Database;

        $z0 = this.<com.sleepycat.je.Database: boolean isWritable>;

        return $z0;
    }

    com.sleepycat.je.dbi.DatabaseImpl getDbImpl()
    {
        com.sleepycat.je.Database this;
        com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        java.lang.IllegalStateException $r1;
        java.lang.StringBuilder $r2, $r3, $r5;
        com.sleepycat.je.Database$DbState $r4;
        java.lang.String $r6;

        this := @this: com.sleepycat.je.Database;

        dbImpl = this.<com.sleepycat.je.Database: com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dbImpl);

        if dbImpl == null goto label1;

        return dbImpl;

     label1:
        virtualinvoke this.<com.sleepycat.je.Database: com.sleepycat.je.dbi.DatabaseImpl checkOpen()>();

        $r1 = new java.lang.IllegalStateException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Database is closed. State=");

        $r4 = this.<com.sleepycat.je.Database: com.sleepycat.je.Database$DbState state>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r1;
    }

    void removeReferringAssociations()
    {
        com.sleepycat.je.Database this;
        com.sleepycat.je.Environment $r0;

        this := @this: com.sleepycat.je.Database;

        $r0 = this.<com.sleepycat.je.Database: com.sleepycat.je.Environment envHandle>;

        virtualinvoke $r0.<com.sleepycat.je.Environment: void removeReferringHandle(com.sleepycat.je.Database)>(this);

        return;
    }

    com.sleepycat.je.dbi.DatabaseImpl checkOpen()
    {
        com.sleepycat.je.Database this;
        int[] $r0;
        com.sleepycat.je.Database$DbState $r1, $r10;
        int $i0, $i1;
        com.sleepycat.je.dbi.DatabaseImpl $r2;
        java.lang.IllegalStateException $r3, $r4;
        com.sleepycat.je.OperationFailureException $r5, $r6, $r8;
        java.lang.String $r7;
        boolean $z0;
        java.lang.AssertionError $r9;

        this := @this: com.sleepycat.je.Database;

        $r0 = <com.sleepycat.je.Database$2: int[] $SwitchMap$com$sleepycat$je$Database$DbState>;

        $r1 = this.<com.sleepycat.je.Database: com.sleepycat.je.Database$DbState state>;

        $i0 = virtualinvoke $r1.<com.sleepycat.je.Database$DbState: int ordinal()>();

        $i1 = $r0[$i0];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label5;
        };

     label1:
        $r2 = this.<com.sleepycat.je.Database: com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        return $r2;

     label2:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Database was closed.");

        throw $r3;

     label3:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The Transaction used to open the Database was aborted.");

        throw $r4;

     label4:
        $r5 = this.<com.sleepycat.je.Database: com.sleepycat.je.OperationFailureException preemptedCause>;

        $r6 = this.<com.sleepycat.je.Database: com.sleepycat.je.OperationFailureException preemptedCause>;

        $r7 = virtualinvoke $r6.<com.sleepycat.je.OperationFailureException: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r5.<com.sleepycat.je.OperationFailureException: com.sleepycat.je.OperationFailureException wrapSelf(java.lang.String)>($r7);

        throw $r8;

     label5:
        $z0 = <com.sleepycat.je.Database: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label6;

        $r9 = new java.lang.AssertionError;

        $r10 = this.<com.sleepycat.je.Database: com.sleepycat.je.Database$DbState state>;

        specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>($r10);

        throw $r9;

     label6:
        return null;
    }

    private void init(com.sleepycat.je.Environment, com.sleepycat.je.DatabaseConfig)
    {
        com.sleepycat.je.Database this;
        com.sleepycat.je.Environment env;
        com.sleepycat.je.DatabaseConfig config, $r2, $r4;
        boolean $z0, $z1, $z2;
        com.sleepycat.je.txn.HandleLocker $r0;
        java.lang.AssertionError $r1;
        com.sleepycat.je.SecondaryAssociation $r5;
        com.sleepycat.je.Database$DbState $r6;

        this := @this: com.sleepycat.je.Database;

        env := @parameter0: com.sleepycat.je.Environment;

        config := @parameter1: com.sleepycat.je.DatabaseConfig;

        $z0 = <com.sleepycat.je.Database: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r0 = this.<com.sleepycat.je.Database: com.sleepycat.je.txn.HandleLocker handleLocker>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        this.<com.sleepycat.je.Database: com.sleepycat.je.Environment envHandle> = env;

        $r2 = virtualinvoke config.<com.sleepycat.je.DatabaseConfig: com.sleepycat.je.DatabaseConfig clone()>();

        this.<com.sleepycat.je.Database: com.sleepycat.je.DatabaseConfig configuration> = $r2;

        $r4 = this.<com.sleepycat.je.Database: com.sleepycat.je.DatabaseConfig configuration>;

        $z1 = virtualinvoke $r4.<com.sleepycat.je.DatabaseConfig: boolean getReadOnly()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        this.<com.sleepycat.je.Database: boolean isWritable> = $z2;

        $r5 = virtualinvoke this.<com.sleepycat.je.Database: com.sleepycat.je.SecondaryAssociation makeSecondaryAssociation()>();

        this.<com.sleepycat.je.Database: com.sleepycat.je.SecondaryAssociation secAssoc> = $r5;

        $r6 = <com.sleepycat.je.Database$DbState: com.sleepycat.je.Database$DbState OPEN>;

        this.<com.sleepycat.je.Database: com.sleepycat.je.Database$DbState state> = $r6;

        return;
    }

    com.sleepycat.je.SecondaryAssociation makeSecondaryAssociation()
    {
        com.sleepycat.je.Database this;
        java.util.concurrent.CopyOnWriteArraySet $r0, $r8;
        com.sleepycat.je.DatabaseConfig $r1, $r3, $r6;
        com.sleepycat.je.SecondaryAssociation $r2, $r7;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        java.util.Set $r5;
        com.sleepycat.je.Database$1 $r9;

        this := @this: com.sleepycat.je.Database;

        $r0 = new java.util.concurrent.CopyOnWriteArraySet;

        specialinvoke $r0.<java.util.concurrent.CopyOnWriteArraySet: void <init>()>();

        this.<com.sleepycat.je.Database: java.util.Collection foreignKeySecondaries> = $r0;

        $r1 = this.<com.sleepycat.je.Database: com.sleepycat.je.DatabaseConfig configuration>;

        $r2 = virtualinvoke $r1.<com.sleepycat.je.DatabaseConfig: com.sleepycat.je.SecondaryAssociation getSecondaryAssociation()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        if $r2 == null goto label2;

        $r3 = this.<com.sleepycat.je.Database: com.sleepycat.je.DatabaseConfig configuration>;

        $z0 = virtualinvoke $r3.<com.sleepycat.je.DatabaseConfig: boolean getSortedDuplicates()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Duplicates not allowed for a primary database");

        throw $r4;

     label1:
        $r5 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        this.<com.sleepycat.je.Database: java.util.Collection simpleAssocSecondaries> = $r5;

        $r6 = this.<com.sleepycat.je.Database: com.sleepycat.je.DatabaseConfig configuration>;

        $r7 = virtualinvoke $r6.<com.sleepycat.je.DatabaseConfig: com.sleepycat.je.SecondaryAssociation getSecondaryAssociation()>();

        return $r7;

     label2:
        $r8 = new java.util.concurrent.CopyOnWriteArraySet;

        specialinvoke $r8.<java.util.concurrent.CopyOnWriteArraySet: void <init>()>();

        this.<com.sleepycat.je.Database: java.util.Collection simpleAssocSecondaries> = $r8;

        $r9 = new com.sleepycat.je.Database$1;

        specialinvoke $r9.<com.sleepycat.je.Database$1: void <init>(com.sleepycat.je.Database)>(this);

        return $r9;
    }

    private void validateConfigAgainstExistingDb(com.sleepycat.je.txn.Locker, java.lang.String, com.sleepycat.je.DatabaseConfig, com.sleepycat.je.dbi.DatabaseImpl)
    {
        com.sleepycat.je.Database this;
        com.sleepycat.je.txn.Locker locker;
        java.lang.String databaseName, $r5;
        com.sleepycat.je.DatabaseConfig config;
        com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        boolean newKeyPrefixing, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, dbImplModified#53, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, dbImplModified#84, $z26, $z27;
        int newNodeMaxEntries, $i0;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl, $r0;
        com.sleepycat.je.LockConflictException e, $r6;
        java.util.Comparator $r1, $r2;
        java.util.List $r3;
        com.sleepycat.je.dbi.DbTree $r4, $r8;
        java.lang.IllegalStateException $r7;
        com.sleepycat.je.CacheMode $r9;

        this := @this: com.sleepycat.je.Database;

        locker := @parameter0: com.sleepycat.je.txn.Locker;

        databaseName := @parameter1: java.lang.String;

        config := @parameter2: com.sleepycat.je.DatabaseConfig;

        dbImpl := @parameter3: com.sleepycat.je.dbi.DatabaseImpl;

        $z0 = virtualinvoke config.<com.sleepycat.je.DatabaseConfig: boolean getUseExistingConfig()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label01;

        $z1 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: boolean getSortedDuplicates()>();

        $z2 = virtualinvoke config.<com.sleepycat.je.DatabaseConfig: boolean getSortedDuplicates()>();

        specialinvoke this.<com.sleepycat.je.Database: void validatePropertyMatches(java.lang.String,boolean,boolean)>("sortedDuplicates", $z1, $z2);

        $z3 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: boolean isTemporary()>();

        $z4 = virtualinvoke config.<com.sleepycat.je.DatabaseConfig: boolean getTemporary()>();

        specialinvoke this.<com.sleepycat.je.Database: void validatePropertyMatches(java.lang.String,boolean,boolean)>("temporary", $z3, $z4);

        $r0 = virtualinvoke this.<com.sleepycat.je.Database: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $z5 = virtualinvoke $r0.<com.sleepycat.je.dbi.EnvironmentImpl: boolean isReplicated()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label01;

        $z6 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: boolean isReplicated()>();

        $z7 = virtualinvoke config.<com.sleepycat.je.DatabaseConfig: boolean getReplicated()>();

        specialinvoke this.<com.sleepycat.je.Database: void validatePropertyMatches(java.lang.String,boolean,boolean)>("replicated", $z6, $z7);

     label01:
        $z8 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: boolean hasOpenHandles()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 == 0 goto label02;

        $z9 = virtualinvoke config.<com.sleepycat.je.DatabaseConfig: boolean getUseExistingConfig()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 != 0 goto label03;

        $z10 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: boolean isTransactional()>();

        $z11 = virtualinvoke config.<com.sleepycat.je.DatabaseConfig: boolean getTransactional()>();

        specialinvoke this.<com.sleepycat.je.Database: void validatePropertyMatches(java.lang.String,boolean,boolean)>("transactional", $z10, $z11);

        $z12 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: boolean isDurableDeferredWrite()>();

        $z13 = virtualinvoke config.<com.sleepycat.je.DatabaseConfig: boolean getDeferredWrite()>();

        specialinvoke this.<com.sleepycat.je.Database: void validatePropertyMatches(java.lang.String,boolean,boolean)>("deferredWrite", $z12, $z13);

        goto label03;

     label02:
        $z14 = virtualinvoke config.<com.sleepycat.je.DatabaseConfig: boolean getTransactional()>();

        virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: void setTransactional(boolean)>($z14);

        $z15 = virtualinvoke config.<com.sleepycat.je.DatabaseConfig: boolean getDeferredWrite()>();

        virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: void setDeferredWrite(boolean)>($z15);

        $z16 = virtualinvoke config.<com.sleepycat.je.DatabaseConfig: boolean getDeferredWrite()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z16);

        if $z16 == 0 goto label03;

        specialinvoke this.<com.sleepycat.je.Database: void mutateDeferredWriteBINDeltas(com.sleepycat.je.dbi.DatabaseImpl)>(dbImpl);

     label03:
        $z17 = virtualinvoke config.<com.sleepycat.je.DatabaseConfig: boolean getUseExistingConfig()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z17);

        if $z17 == 0 goto label04;

        return;

     label04:
        dbImplModified#53 = 0;

        $z18 = virtualinvoke config.<com.sleepycat.je.DatabaseConfig: boolean getOverrideBtreeComparator()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z18);

        if $z18 == 0 goto label05;

        $r1 = virtualinvoke config.<com.sleepycat.je.DatabaseConfig: java.util.Comparator getBtreeComparator()>();

        $z19 = virtualinvoke config.<com.sleepycat.je.DatabaseConfig: boolean getBtreeComparatorByClassName()>();

        $z20 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: boolean setBtreeComparator(java.util.Comparator,boolean)>($r1, $z19);

        dbImplModified#53 = dbImplModified#53 | $z20;

     label05:
        $z21 = virtualinvoke config.<com.sleepycat.je.DatabaseConfig: boolean getOverrideDuplicateComparator()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z21);

        if $z21 == 0 goto label06;

        $r2 = virtualinvoke config.<com.sleepycat.je.DatabaseConfig: java.util.Comparator getDuplicateComparator()>();

        $z22 = virtualinvoke config.<com.sleepycat.je.DatabaseConfig: boolean getDuplicateComparatorByClassName()>();

        $z23 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: boolean setDuplicateComparator(java.util.Comparator,boolean)>($r2, $z22);

        dbImplModified#53 = dbImplModified#53 | $z23;

     label06:
        $r3 = virtualinvoke config.<com.sleepycat.je.DatabaseConfig: java.util.List getTriggers()>();

        $z24 = virtualinvoke config.<com.sleepycat.je.DatabaseConfig: boolean getOverrideTriggers()>();

        $z25 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: boolean setTriggers(com.sleepycat.je.txn.Locker,java.lang.String,java.util.List,boolean)>(locker, databaseName, $r3, $z24);

        dbImplModified#84 = dbImplModified#53 | $z25;

        newKeyPrefixing = virtualinvoke config.<com.sleepycat.je.DatabaseConfig: boolean getKeyPrefixing()>();

        $z26 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: boolean getKeyPrefixing()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(newKeyPrefixing);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z26);

        if newKeyPrefixing == $z26 goto label08;

        dbImplModified#84 = 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(newKeyPrefixing);

        if newKeyPrefixing == 0 goto label07;

        virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: void setKeyPrefixing()>();

        goto label08;

     label07:
        virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: void clearKeyPrefixing()>();

     label08:
        newNodeMaxEntries = virtualinvoke config.<com.sleepycat.je.DatabaseConfig: int getNodeMaxEntries()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(newNodeMaxEntries);

        if newNodeMaxEntries == 0 goto label09;

        $i0 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: int getNodeMaxTreeEntries()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(newNodeMaxEntries);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if newNodeMaxEntries == $i0 goto label09;

        dbImplModified#84 = 1;

        virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: void setNodeMaxTreeEntries(int)>(newNodeMaxEntries);

     label09:
        envImpl = virtualinvoke this.<com.sleepycat.je.Database: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dbImplModified#84);

        if dbImplModified#84 == 0 goto label14;

        $z27 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: boolean isReadOnly()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z27);

        if $z27 != 0 goto label14;

     label10:
        $r4 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.DbTree getDbTree()>();

        $r5 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: java.lang.String getName()>();

        virtualinvoke $r4.<com.sleepycat.je.dbi.DbTree: void updateNameLN(com.sleepycat.je.txn.Locker,java.lang.String,com.sleepycat.je.log.DbOpReplicationContext)>(locker, $r5, null);

     label11:
        goto label13;

     label12:
        $r6 := @caughtexception;

        e = $r6;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("DatabaseConfig properties may not be updated when the database is already open; first close other open handles for this database.", e);

        throw $r7;

     label13:
        $r8 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.DbTree getDbTree()>();

        virtualinvoke $r8.<com.sleepycat.je.dbi.DbTree: void modifyDbRoot(com.sleepycat.je.dbi.DatabaseImpl)>(dbImpl);

     label14:
        $r9 = virtualinvoke config.<com.sleepycat.je.DatabaseConfig: com.sleepycat.je.CacheMode getCacheMode()>();

        virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: void setCacheMode(com.sleepycat.je.CacheMode)>($r9);

        return;

        catch com.sleepycat.je.LockConflictException from label10 to label11 with label12;
    }

    private void validatePropertyMatches(java.lang.String, boolean, boolean)
    {
        com.sleepycat.je.Database this;
        java.lang.String propName, $r11;
        boolean existingValue, newValue;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        this := @this: com.sleepycat.je.Database;

        propName := @parameter0: java.lang.String;

        existingValue := @parameter1: boolean;

        newValue := @parameter2: boolean;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(newValue);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(existingValue);

        if newValue == existingValue goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("You can\'t open a Database with a ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(propName);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" configuration of ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(newValue);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" if the underlying database was created with a ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(propName);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" setting of ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(existingValue);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r0;

     label1:
        return;
    }

    private void mutateDeferredWriteBINDeltas(com.sleepycat.je.dbi.DatabaseImpl)
    {
        com.sleepycat.je.Database this;
        com.sleepycat.je.dbi.DatabaseImpl dbImpl, $r5;
        com.sleepycat.je.evictor.OffHeapCache ohCache;
        java.util.Iterator l3;
        com.sleepycat.je.tree.IN in, child;
        com.sleepycat.je.CacheMode $r0;
        java.lang.Throwable l7, l8, $r6, $r7;
        com.sleepycat.je.dbi.EnvironmentImpl $r1, $r2;
        com.sleepycat.je.dbi.INList $r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        int $i0, i#28, $i1, $i2;

        this := @this: com.sleepycat.je.Database;

        dbImpl := @parameter0: com.sleepycat.je.dbi.DatabaseImpl;

        $r1 = virtualinvoke this.<com.sleepycat.je.Database: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        ohCache = virtualinvoke $r1.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.evictor.OffHeapCache getOffHeapCache()>();

        $r2 = virtualinvoke this.<com.sleepycat.je.Database: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r3 = virtualinvoke $r2.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.INList getInMemoryINs()>();

        l3 = virtualinvoke $r3.<com.sleepycat.je.dbi.INList: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label22;

        $r4 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        in = (com.sleepycat.je.tree.IN) $r4;

        $r5 = virtualinvoke in.<com.sleepycat.je.tree.IN: com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dbImpl);

        if $r5 == dbImpl goto label02;

        goto label01;

     label02:
        virtualinvoke in.<com.sleepycat.je.tree.IN: void latchNoUpdateLRU()>();

     label03:
        $z1 = virtualinvoke in.<com.sleepycat.je.tree.IN: boolean isBIN()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label05;

        virtualinvoke in.<com.sleepycat.je.tree.IN: void mutateToFullBIN(boolean)>(0);

     label04:
        virtualinvoke in.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        goto label01;

     label05:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(ohCache);

        if ohCache == null goto label06;

        $i0 = virtualinvoke in.<com.sleepycat.je.tree.IN: int getNormalizedLevel()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 == 2 goto label07;

     label06:
        virtualinvoke in.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        goto label01;

     label07:
        i#28 = 0;

     label08:
        $i1 = virtualinvoke in.<com.sleepycat.je.tree.IN: int getNEntries()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#28);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#28 >= $i1 goto label17;

        $i2 = virtualinvoke in.<com.sleepycat.je.tree.IN: int getOffHeapBINId(int)>(i#28);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 >= 0 goto label09;

        goto label16;

     label09:
        $r0 = <com.sleepycat.je.CacheMode: com.sleepycat.je.CacheMode UNCHANGED>;

        child = virtualinvoke in.<com.sleepycat.je.tree.IN: com.sleepycat.je.tree.IN loadIN(int,com.sleepycat.je.CacheMode)>(i#28, $r0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(child);

        if child != null goto label10;

        goto label16;

     label10:
        virtualinvoke child.<com.sleepycat.je.tree.IN: void latchNoUpdateLRU()>();

     label11:
        virtualinvoke child.<com.sleepycat.je.tree.IN: void mutateToFullBIN(boolean)>(0);

     label12:
        virtualinvoke child.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        goto label16;

     label13:
        $r6 := @caughtexception;

     label14:
        l7 = $r6;

     label15:
        virtualinvoke child.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        throw l7;

     label16:
        i#28 = i#28 + 1;

        goto label08;

     label17:
        virtualinvoke in.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        goto label21;

     label18:
        $r7 := @caughtexception;

     label19:
        l8 = $r7;

     label20:
        virtualinvoke in.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        throw l8;

     label21:
        goto label01;

     label22:
        return;

        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
        catch java.lang.Throwable from label03 to label04 with label18;
        catch java.lang.Throwable from label05 to label06 with label18;
        catch java.lang.Throwable from label07 to label17 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    public com.sleepycat.je.OperationStatus delete(com.sleepycat.je.Transaction, com.sleepycat.je.DatabaseEntry)
    {
        com.sleepycat.je.Database this;
        com.sleepycat.je.Transaction txn;
        com.sleepycat.je.DatabaseEntry key;
        com.sleepycat.je.OperationResult result;
        com.sleepycat.je.OperationStatus $r0;

        this := @this: com.sleepycat.je.Database;

        txn := @parameter0: com.sleepycat.je.Transaction;

        key := @parameter1: com.sleepycat.je.DatabaseEntry;

        result = virtualinvoke this.<com.sleepycat.je.Database: com.sleepycat.je.OperationResult delete(com.sleepycat.je.Transaction,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.WriteOptions)>(txn, key, null);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(result);

        if result != null goto label1;

        $r0 = <com.sleepycat.je.OperationStatus: com.sleepycat.je.OperationStatus NOTFOUND>;

        goto label2;

     label1:
        $r0 = <com.sleepycat.je.OperationStatus: com.sleepycat.je.OperationStatus SUCCESS>;

     label2:
        return $r0;
    }

    public com.sleepycat.je.OperationResult delete(com.sleepycat.je.Transaction, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.WriteOptions)
    {
        com.sleepycat.je.Database this;
        com.sleepycat.je.Transaction txn;
        com.sleepycat.je.DatabaseEntry key;
        com.sleepycat.je.WriteOptions options;
        com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        com.sleepycat.je.CacheMode cacheMode, $r1;
        com.sleepycat.je.txn.Locker locker;
        java.lang.Throwable l8, $r4;
        java.lang.Error E, $r7;
        java.util.logging.Level $r0;
        com.sleepycat.je.Environment $r2, $r8;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.sleepycat.je.OperationResult result#30;

        this := @this: com.sleepycat.je.Database;

        txn := @parameter0: com.sleepycat.je.Transaction;

        key := @parameter1: com.sleepycat.je.DatabaseEntry;

        options := @parameter2: com.sleepycat.je.WriteOptions;

     label01:
        virtualinvoke this.<com.sleepycat.je.Database: com.sleepycat.je.dbi.EnvironmentImpl checkEnv()>();

        dbImpl = virtualinvoke this.<com.sleepycat.je.Database: com.sleepycat.je.dbi.DatabaseImpl checkOpen()>();

        $r0 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        virtualinvoke this.<com.sleepycat.je.Database: void trace(java.util.logging.Level,java.lang.String,com.sleepycat.je.Transaction,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode)>($r0, "Database.delete", txn, key, null, null);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(options);

        if options == null goto label02;

        $r1 = virtualinvoke options.<com.sleepycat.je.WriteOptions: com.sleepycat.je.CacheMode getCacheMode()>();

        goto label03;

     label02:
        $r1 = null;

     label03:
        cacheMode = $r1;

        $r2 = this.<com.sleepycat.je.Database: com.sleepycat.je.Environment envHandle>;

        $z0 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: boolean isInternalDb()>();

        $z1 = virtualinvoke this.<com.sleepycat.je.Database: boolean isTransactional()>();

        $z2 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: boolean isReplicated()>();

        locker = staticinvoke <com.sleepycat.je.txn.LockerFactory: com.sleepycat.je.txn.Locker getWritableLocker(com.sleepycat.je.Environment,com.sleepycat.je.Transaction,boolean,boolean,boolean)>($r2, txn, $z0, $z1, $z2);

     label04:
        result#30 = virtualinvoke this.<com.sleepycat.je.Database: com.sleepycat.je.OperationResult deleteInternal(com.sleepycat.je.txn.Locker,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.CacheMode)>(locker, key, cacheMode);

     label05:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(locker);

        if locker == null goto label14;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(result#30);

        if result#30 == null goto label06;

        $z3 = 1;

        goto label07;

     label06:
        $z3 = 0;

     label07:
        virtualinvoke locker.<com.sleepycat.je.txn.Locker: void operationEnd(boolean)>($z3);

        goto label14;

     label08:
        $r4 := @caughtexception;

     label09:
        l8 = $r4;

     label10:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(locker);

        if locker == null goto label13;

        if null == null goto label11;

        $z4 = 1;

        goto label12;

     label11:
        $z4 = 0;

     label12:
        virtualinvoke locker.<com.sleepycat.je.txn.Locker: void operationEnd(boolean)>($z4);

     label13:
        throw l8;

     label14:
        return result#30;

     label15:
        $r7 := @caughtexception;

        E = $r7;

        $r8 = this.<com.sleepycat.je.Database: com.sleepycat.je.Environment envHandle>;

        virtualinvoke $r8.<com.sleepycat.je.Environment: void invalidate(java.lang.Error)>(E);

        throw E;

        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Error from label01 to label14 with label15;
    }

    com.sleepycat.je.dbi.EnvironmentImpl checkEnv()
    {
        com.sleepycat.je.Database this;
        com.sleepycat.je.Environment $r0;
        com.sleepycat.je.dbi.EnvironmentImpl $r1;

        this := @this: com.sleepycat.je.Database;

        $r0 = this.<com.sleepycat.je.Database: com.sleepycat.je.Environment envHandle>;

        $r1 = virtualinvoke $r0.<com.sleepycat.je.Environment: com.sleepycat.je.dbi.EnvironmentImpl checkOpen()>();

        return $r1;
    }

    void trace(java.util.logging.Level, java.lang.String, com.sleepycat.je.Transaction, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.LockMode)
    {
        com.sleepycat.je.Database this;
        java.util.logging.Level level;
        java.lang.String methodName, $r6, $r9, $r15;
        com.sleepycat.je.Transaction txn;
        com.sleepycat.je.DatabaseEntry key, data;
        com.sleepycat.je.LockMode lockMode;
        java.lang.StringBuilder sb, $r1, $r3, $r5, $r8, $r11;
        java.util.logging.Logger $r0, $r13;
        boolean $z0;
        long $l0;
        com.sleepycat.je.dbi.EnvironmentImpl $r14;

        this := @this: com.sleepycat.je.Database;

        level := @parameter0: java.util.logging.Level;

        methodName := @parameter1: java.lang.String;

        txn := @parameter2: com.sleepycat.je.Transaction;

        key := @parameter3: com.sleepycat.je.DatabaseEntry;

        data := @parameter4: com.sleepycat.je.DatabaseEntry;

        lockMode := @parameter5: com.sleepycat.je.LockMode;

        $r0 = this.<com.sleepycat.je.Database: java.util.logging.Logger logger>;

        $z0 = virtualinvoke $r0.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>(level);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label4;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        sb = $r1;

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(methodName);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(txn);

        if txn == null goto label1;

        $r3 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" txnId=");

        $l0 = virtualinvoke txn.<com.sleepycat.je.Transaction: long getId()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

     label1:
        $r5 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" key=");

        $r6 = virtualinvoke key.<com.sleepycat.je.DatabaseEntry: java.lang.String dumpData()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(data);

        if data == null goto label2;

        $r8 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" data=");

        $r9 = virtualinvoke data.<com.sleepycat.je.DatabaseEntry: java.lang.String dumpData()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lockMode);

        if lockMode == null goto label3;

        $r11 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lockMode=");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(lockMode);

     label3:
        $r13 = this.<com.sleepycat.je.Database: java.util.logging.Logger logger>;

        $r14 = virtualinvoke this.<com.sleepycat.je.Database: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r15 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.sleepycat.je.utilint.LoggerUtils: void logMsg(java.util.logging.Logger,com.sleepycat.je.dbi.EnvironmentImpl,java.util.logging.Level,java.lang.String)>($r13, $r14, level, $r15);

     label4:
        return;
    }

    boolean isTransactional()
    {
        com.sleepycat.je.Database this;
        com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        boolean $z0;

        this := @this: com.sleepycat.je.Database;

        dbImpl = virtualinvoke this.<com.sleepycat.je.Database: com.sleepycat.je.dbi.DatabaseImpl checkOpen()>();

        $z0 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: boolean isTransactional()>();

        return $z0;
    }

    com.sleepycat.je.OperationResult deleteInternal(com.sleepycat.je.txn.Locker, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.CacheMode)
    {
        com.sleepycat.je.Database this;
        com.sleepycat.je.txn.Locker locker;
        com.sleepycat.je.DatabaseEntry key, noData, $r0;
        com.sleepycat.je.CacheMode cacheMode;
        com.sleepycat.je.Cursor cursor, $r1;
        com.sleepycat.je.LockMode lockMode, $r2, $r3;
        com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        com.sleepycat.je.OperationResult deleteResult, l11, searchResult#27, anyResult#31;
        java.lang.Throwable l12, l7, l13, l14, l6#13, $r8, $r9, $r10, $r11;
        boolean $z0, $z1;
        com.sleepycat.je.dbi.SearchMode $r4;
        com.sleepycat.je.log.ReplicationContext $r5;
        com.sleepycat.je.dbi.GetMode $r6;
        com.sleepycat.je.dbi.EnvironmentImpl $r7;

        this := @this: com.sleepycat.je.Database;

        locker := @parameter0: com.sleepycat.je.txn.Locker;

        key := @parameter1: com.sleepycat.je.DatabaseEntry;

        cacheMode := @parameter2: com.sleepycat.je.CacheMode;

        $r0 = new com.sleepycat.je.DatabaseEntry;

        specialinvoke $r0.<com.sleepycat.je.DatabaseEntry: void <init>()>();

        noData = $r0;

        virtualinvoke noData.<com.sleepycat.je.DatabaseEntry: void setPartial(int,int,boolean)>(0, 0, 1);

        $r1 = new com.sleepycat.je.Cursor;

        specialinvoke $r1.<com.sleepycat.je.Cursor: void <init>(com.sleepycat.je.Database,com.sleepycat.je.txn.Locker,com.sleepycat.je.CursorConfig)>(this, locker, null);

        cursor = $r1;

        l6#13 = null;

     label01:
        virtualinvoke cursor.<com.sleepycat.je.Cursor: void setNonSticky(boolean)>(1);

        $r2 = <com.sleepycat.je.LockMode: com.sleepycat.je.LockMode RMW>;

        $z0 = virtualinvoke cursor.<com.sleepycat.je.Cursor: boolean isSerializableIsolation(com.sleepycat.je.LockMode)>($r2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label02;

        $r3 = <com.sleepycat.je.LockMode: com.sleepycat.je.LockMode RMW>;

        goto label03;

     label02:
        $r3 = <com.sleepycat.je.LockMode: com.sleepycat.je.LockMode READ_UNCOMMITTED_ALL>;

     label03:
        lockMode = $r3;

        $r4 = <com.sleepycat.je.dbi.SearchMode: com.sleepycat.je.dbi.SearchMode SET>;

        searchResult#27 = virtualinvoke cursor.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult search(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode,com.sleepycat.je.dbi.SearchMode,boolean)>(key, noData, lockMode, cacheMode, $r4, 0);

        dbImpl = virtualinvoke this.<com.sleepycat.je.Database: com.sleepycat.je.dbi.DatabaseImpl getDbImpl()>();

        anyResult#31 = null;

     label04:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(searchResult#27);

        if searchResult#27 == null goto label07;

        $r5 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.log.ReplicationContext getRepContext()>();

        deleteResult = virtualinvoke cursor.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult deleteInternal(com.sleepycat.je.log.ReplicationContext,com.sleepycat.je.CacheMode)>($r5, cacheMode);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(deleteResult);

        if deleteResult == null goto label05;

        anyResult#31 = deleteResult;

     label05:
        $z1 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: boolean getSortedDuplicates()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label06;

        goto label07;

     label06:
        $r6 = <com.sleepycat.je.dbi.GetMode: com.sleepycat.je.dbi.GetMode NEXT_DUP>;

        searchResult#27 = virtualinvoke cursor.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult retrieveNext(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode,com.sleepycat.je.CacheMode,com.sleepycat.je.dbi.GetMode)>(key, noData, lockMode, cacheMode, $r6);

        goto label04;

     label07:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(anyResult#31);

        if anyResult#31 != null goto label08;

        $r7 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r7.<com.sleepycat.je.dbi.EnvironmentImpl: void incDeleteFailOps(com.sleepycat.je.dbi.DatabaseImpl)>(dbImpl);

     label08:
        l11 = anyResult#31;

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(cursor);

        if cursor == null goto label14;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l6#13);

        if l6#13 == null goto label13;

     label10:
        virtualinvoke cursor.<com.sleepycat.je.Cursor: void close()>();

     label11:
        goto label14;

     label12:
        $r8 := @caughtexception;

        l12 = $r8;

        virtualinvoke l6#13.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l12);

        goto label14;

     label13:
        virtualinvoke cursor.<com.sleepycat.je.Cursor: void close()>();

     label14:
        return l11;

     label15:
        $r9 := @caughtexception;

     label16:
        l7 = $r9;

        l6#13 = l7;

        throw l7;

     label17:
        $r10 := @caughtexception;

        l13 = $r10;

     label18:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(cursor);

        if cursor == null goto label23;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l6#13);

        if l6#13 == null goto label22;

     label19:
        virtualinvoke cursor.<com.sleepycat.je.Cursor: void close()>();

     label20:
        goto label23;

     label21:
        $r11 := @caughtexception;

        l14 = $r11;

        virtualinvoke l6#13.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l14);

        goto label23;

     label22:
        virtualinvoke cursor.<com.sleepycat.je.Cursor: void close()>();

     label23:
        throw l13;

        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label01 to label09 with label15;
        catch java.lang.Throwable from label01 to label09 with label17;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label16 to label18 with label17;
    }

    public com.sleepycat.je.Environment getEnvironment()
    {
        com.sleepycat.je.Database this;
        com.sleepycat.je.Environment $r0;

        this := @this: com.sleepycat.je.Database;

        $r0 = this.<com.sleepycat.je.Database: com.sleepycat.je.Environment envHandle>;

        return $r0;
    }

    void addCursor(com.sleepycat.je.ForwardCursor)
    {
        com.sleepycat.je.Database this;
        com.sleepycat.je.ForwardCursor ignore;
        java.util.concurrent.atomic.AtomicInteger $r1;

        this := @this: com.sleepycat.je.Database;

        ignore := @parameter0: com.sleepycat.je.ForwardCursor;

        virtualinvoke this.<com.sleepycat.je.Database: com.sleepycat.je.dbi.DatabaseImpl checkOpen()>();

        $r1 = this.<com.sleepycat.je.Database: java.util.concurrent.atomic.AtomicInteger openCursors>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        return;
    }

    boolean hasSecondaryOrForeignKeyAssociations()
    {
        com.sleepycat.je.Database this;
        com.sleepycat.je.SecondaryAssociation $r0;
        boolean $z0, $z1, $z2;
        java.util.Collection $r1;

        this := @this: com.sleepycat.je.Database;

        $r0 = this.<com.sleepycat.je.Database: com.sleepycat.je.SecondaryAssociation secAssoc>;

        $z0 = interfaceinvoke $r0.<com.sleepycat.je.SecondaryAssociation: boolean isEmpty()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r1 = this.<com.sleepycat.je.Database: java.util.Collection foreignKeySecondaries>;

        $z1 = interfaceinvoke $r1.<java.util.Collection: boolean isEmpty()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    void removeCursor(com.sleepycat.je.ForwardCursor) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.Database this;
        com.sleepycat.je.ForwardCursor ignore;
        com.sleepycat.je.Database$DbState $r0, $r1;
        java.util.concurrent.atomic.AtomicInteger $r3;

        this := @this: com.sleepycat.je.Database;

        ignore := @parameter0: com.sleepycat.je.ForwardCursor;

        $r1 = this.<com.sleepycat.je.Database: com.sleepycat.je.Database$DbState state>;

        $r0 = <com.sleepycat.je.Database$DbState: com.sleepycat.je.Database$DbState PREEMPTED>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r1 == $r0 goto label1;

        virtualinvoke this.<com.sleepycat.je.Database: com.sleepycat.je.dbi.DatabaseImpl checkOpen()>();

     label1:
        $r3 = this.<com.sleepycat.je.Database: java.util.concurrent.atomic.AtomicInteger openCursors>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int getAndDecrement()>();

        return;
    }

    public com.sleepycat.je.OperationStatus put(com.sleepycat.je.Transaction, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry)
    {
        com.sleepycat.je.Database this;
        com.sleepycat.je.Transaction txn;
        com.sleepycat.je.DatabaseEntry key, data;
        com.sleepycat.je.Put $r0;
        com.sleepycat.je.OperationResult result;
        boolean $z0;
        com.sleepycat.je.OperationStatus $r1;

        this := @this: com.sleepycat.je.Database;

        txn := @parameter0: com.sleepycat.je.Transaction;

        key := @parameter1: com.sleepycat.je.DatabaseEntry;

        data := @parameter2: com.sleepycat.je.DatabaseEntry;

        $r0 = <com.sleepycat.je.Put: com.sleepycat.je.Put OVERWRITE>;

        result = virtualinvoke this.<com.sleepycat.je.Database: com.sleepycat.je.OperationResult put(com.sleepycat.je.Transaction,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.Put,com.sleepycat.je.WriteOptions)>(txn, key, data, $r0, null);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(result);

        if result == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.sleepycat.je.EnvironmentFailureException: void assertState(boolean)>($z0);

        $r1 = <com.sleepycat.je.OperationStatus: com.sleepycat.je.OperationStatus SUCCESS>;

        return $r1;
    }

    public com.sleepycat.je.OperationResult put(com.sleepycat.je.Transaction, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.Put, com.sleepycat.je.WriteOptions)
    {
        com.sleepycat.je.Database this;
        com.sleepycat.je.Transaction txn;
        com.sleepycat.je.DatabaseEntry key, data;
        com.sleepycat.je.Put putType, $r1;
        com.sleepycat.je.WriteOptions options;
        com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        com.sleepycat.je.txn.Locker locker;
        com.sleepycat.je.Cursor cursor, $r6;
        java.lang.Throwable l12, l13, l14, l10#34, $r8, l11#45, $r9, l11#50, $r10, $r11, $r13;
        java.lang.Error E, $r16;
        java.lang.IllegalArgumentException $r2;
        com.sleepycat.je.OperationResult result#11;
        java.util.logging.Level $r3;
        java.lang.String $r4;
        com.sleepycat.je.Environment $r5, $r17;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.sleepycat.je.CursorConfig $r7;

        this := @this: com.sleepycat.je.Database;

        txn := @parameter0: com.sleepycat.je.Transaction;

        key := @parameter1: com.sleepycat.je.DatabaseEntry;

        data := @parameter2: com.sleepycat.je.DatabaseEntry;

        putType := @parameter3: com.sleepycat.je.Put;

        options := @parameter4: com.sleepycat.je.WriteOptions;

     label01:
        virtualinvoke this.<com.sleepycat.je.Database: com.sleepycat.je.dbi.EnvironmentImpl checkEnv()>();

        dbImpl = virtualinvoke this.<com.sleepycat.je.Database: com.sleepycat.je.dbi.DatabaseImpl checkOpen()>();

        $r1 = <com.sleepycat.je.Put: com.sleepycat.je.Put CURRENT>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(putType);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if putType != $r1 goto label02;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("putType may not be Put.CURRENT");

        throw $r2;

     label02:
        result#11 = null;

        $r3 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(putType);

        virtualinvoke this.<com.sleepycat.je.Database: void trace(java.util.logging.Level,java.lang.String,java.lang.String,com.sleepycat.je.Transaction,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode)>($r3, "Database.put", $r4, txn, key, data, null);

        $r5 = this.<com.sleepycat.je.Database: com.sleepycat.je.Environment envHandle>;

        $z0 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: boolean isInternalDb()>();

        $z1 = virtualinvoke this.<com.sleepycat.je.Database: boolean isTransactional()>();

        $z2 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: boolean isReplicated()>();

        locker = staticinvoke <com.sleepycat.je.txn.LockerFactory: com.sleepycat.je.txn.Locker getWritableLocker(com.sleepycat.je.Environment,com.sleepycat.je.Transaction,boolean,boolean,boolean)>($r5, txn, $z0, $z1, $z2);

     label03:
        $r6 = new com.sleepycat.je.Cursor;

        $r7 = <com.sleepycat.je.Database: com.sleepycat.je.CursorConfig DEFAULT_CURSOR_CONFIG>;

        specialinvoke $r6.<com.sleepycat.je.Cursor: void <init>(com.sleepycat.je.Database,com.sleepycat.je.txn.Locker,com.sleepycat.je.CursorConfig)>(this, locker, $r7);

        cursor = $r6;

        l10#34 = null;

     label04:
        result#11 = virtualinvoke cursor.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult putInternal(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.Put,com.sleepycat.je.WriteOptions)>(key, data, putType, options);

     label05:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(cursor);

        if cursor == null goto label19;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l10#34);

        if l10#34 == null goto label09;

     label06:
        virtualinvoke cursor.<com.sleepycat.je.Cursor: void close()>();

     label07:
        goto label19;

     label08:
        $r8 := @caughtexception;

        l11#45 = $r8;

        virtualinvoke l10#34.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l11#45);

        goto label19;

     label09:
        virtualinvoke cursor.<com.sleepycat.je.Cursor: void close()>();

        goto label19;

     label10:
        $r9 := @caughtexception;

     label11:
        l11#50 = $r9;

        l10#34 = l11#50;

        throw l11#50;

     label12:
        $r10 := @caughtexception;

        l12 = $r10;

     label13:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(cursor);

        if cursor == null goto label18;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l10#34);

        if l10#34 == null goto label17;

     label14:
        virtualinvoke cursor.<com.sleepycat.je.Cursor: void close()>();

     label15:
        goto label18;

     label16:
        $r11 := @caughtexception;

        l13 = $r11;

        virtualinvoke l10#34.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l13);

        goto label18;

     label17:
        virtualinvoke cursor.<com.sleepycat.je.Cursor: void close()>();

     label18:
        throw l12;

     label19:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(result#11);

        if result#11 == null goto label20;

        $z3 = 1;

        goto label21;

     label20:
        $z3 = 0;

     label21:
        virtualinvoke locker.<com.sleepycat.je.txn.Locker: void operationEnd(boolean)>($z3);

        goto label27;

     label22:
        $r13 := @caughtexception;

     label23:
        l14 = $r13;

     label24:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(result#11);

        if result#11 == null goto label25;

        $z4 = 1;

        goto label26;

     label25:
        $z4 = 0;

     label26:
        virtualinvoke locker.<com.sleepycat.je.txn.Locker: void operationEnd(boolean)>($z4);

        throw l14;

     label27:
        return result#11;

     label28:
        $r16 := @caughtexception;

        E = $r16;

        $r17 = this.<com.sleepycat.je.Database: com.sleepycat.je.Environment envHandle>;

        virtualinvoke $r17.<com.sleepycat.je.Environment: void invalidate(java.lang.Error)>(E);

        throw E;

        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label11 to label13 with label12;
        catch java.lang.Throwable from label03 to label19 with label22;
        catch java.lang.Throwable from label23 to label24 with label22;
        catch java.lang.Error from label01 to label27 with label28;
    }

    void trace(java.util.logging.Level, java.lang.String, java.lang.String, com.sleepycat.je.Transaction, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.LockMode)
    {
        com.sleepycat.je.Database this;
        java.util.logging.Level level;
        java.lang.String methodName, getOrPutType, $r8, $r11, $r17;
        com.sleepycat.je.Transaction txn;
        com.sleepycat.je.DatabaseEntry key, data;
        com.sleepycat.je.LockMode lockMode;
        java.lang.StringBuilder sb, $r1, $r2, $r5, $r7, $r10, $r13;
        java.util.logging.Logger $r0, $r15;
        boolean $z0;
        long $l0;
        com.sleepycat.je.dbi.EnvironmentImpl $r16;

        this := @this: com.sleepycat.je.Database;

        level := @parameter0: java.util.logging.Level;

        methodName := @parameter1: java.lang.String;

        getOrPutType := @parameter2: java.lang.String;

        txn := @parameter3: com.sleepycat.je.Transaction;

        key := @parameter4: com.sleepycat.je.DatabaseEntry;

        data := @parameter5: com.sleepycat.je.DatabaseEntry;

        lockMode := @parameter6: com.sleepycat.je.LockMode;

        $r0 = this.<com.sleepycat.je.Database: java.util.logging.Logger logger>;

        $z0 = virtualinvoke $r0.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>(level);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label4;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        sb = $r1;

        $r2 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(methodName);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(getOrPutType);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(txn);

        if txn == null goto label1;

        $r5 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" txnId=");

        $l0 = virtualinvoke txn.<com.sleepycat.je.Transaction: long getId()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

     label1:
        $r7 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" key=");

        $r8 = virtualinvoke key.<com.sleepycat.je.DatabaseEntry: java.lang.String dumpData()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(data);

        if data == null goto label2;

        $r10 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" data=");

        $r11 = virtualinvoke data.<com.sleepycat.je.DatabaseEntry: java.lang.String dumpData()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lockMode);

        if lockMode == null goto label3;

        $r13 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lockMode=");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(lockMode);

     label3:
        $r15 = this.<com.sleepycat.je.Database: java.util.logging.Logger logger>;

        $r16 = virtualinvoke this.<com.sleepycat.je.Database: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r17 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.sleepycat.je.utilint.LoggerUtils: void logMsg(java.util.logging.Logger,com.sleepycat.je.dbi.EnvironmentImpl,java.util.logging.Level,java.lang.String)>($r15, $r16, level, $r17);

     label4:
        return;
    }

    public com.sleepycat.je.OperationStatus get(com.sleepycat.je.Transaction, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.LockMode)
    {
        com.sleepycat.je.Database this;
        com.sleepycat.je.Transaction txn;
        com.sleepycat.je.DatabaseEntry key, data;
        com.sleepycat.je.LockMode lockMode;
        com.sleepycat.je.Get $r0;
        com.sleepycat.je.OperationResult result;
        com.sleepycat.je.ReadOptions $r1;
        com.sleepycat.je.OperationStatus $r2;

        this := @this: com.sleepycat.je.Database;

        txn := @parameter0: com.sleepycat.je.Transaction;

        key := @parameter1: com.sleepycat.je.DatabaseEntry;

        data := @parameter2: com.sleepycat.je.DatabaseEntry;

        lockMode := @parameter3: com.sleepycat.je.LockMode;

        $r0 = <com.sleepycat.je.Get: com.sleepycat.je.Get SEARCH>;

        $r1 = staticinvoke <com.sleepycat.je.DbInternal: com.sleepycat.je.ReadOptions getReadOptions(com.sleepycat.je.LockMode)>(lockMode);

        result = virtualinvoke this.<com.sleepycat.je.Database: com.sleepycat.je.OperationResult get(com.sleepycat.je.Transaction,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.Get,com.sleepycat.je.ReadOptions)>(txn, key, data, $r0, $r1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(result);

        if result != null goto label1;

        $r2 = <com.sleepycat.je.OperationStatus: com.sleepycat.je.OperationStatus NOTFOUND>;

        goto label2;

     label1:
        $r2 = <com.sleepycat.je.OperationStatus: com.sleepycat.je.OperationStatus SUCCESS>;

     label2:
        return $r2;
    }

    public com.sleepycat.je.OperationResult get(com.sleepycat.je.Transaction, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.Get, com.sleepycat.je.ReadOptions)
    {
        com.sleepycat.je.Database this;
        com.sleepycat.je.Transaction txn;
        com.sleepycat.je.DatabaseEntry key, data;
        com.sleepycat.je.Get getType;
        com.sleepycat.je.txn.Locker locker;
        com.sleepycat.je.Cursor cursor, $r5;
        java.lang.Throwable l13, l14, l15, l11#40, $r6, l12#52, $r7, l12#57, $r8, $r9, $r11;
        java.lang.Error E, $r14;
        com.sleepycat.je.ReadOptions options#1;
        com.sleepycat.je.LockMode lockMode#10, $r4;
        java.util.logging.Level $r2;
        java.lang.String $r3;
        com.sleepycat.je.CursorConfig cursorConfig#24;
        com.sleepycat.je.OperationResult result#28;
        boolean $z0, $z1, $z2;
        com.sleepycat.je.Environment $r15;

        this := @this: com.sleepycat.je.Database;

        txn := @parameter0: com.sleepycat.je.Transaction;

        key := @parameter1: com.sleepycat.je.DatabaseEntry;

        data := @parameter2: com.sleepycat.je.DatabaseEntry;

        getType := @parameter3: com.sleepycat.je.Get;

        options#1 := @parameter4: com.sleepycat.je.ReadOptions;

     label01:
        virtualinvoke this.<com.sleepycat.je.Database: com.sleepycat.je.dbi.EnvironmentImpl checkEnv()>();

        virtualinvoke this.<com.sleepycat.je.Database: com.sleepycat.je.dbi.DatabaseImpl checkOpen()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(options#1);

        if options#1 != null goto label02;

        options#1 = <com.sleepycat.je.Cursor: com.sleepycat.je.ReadOptions DEFAULT_READ_OPTIONS>;

     label02:
        lockMode#10 = virtualinvoke options#1.<com.sleepycat.je.ReadOptions: com.sleepycat.je.LockMode getLockMode()>();

        $r2 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(getType);

        virtualinvoke this.<com.sleepycat.je.Database: void trace(java.util.logging.Level,java.lang.String,java.lang.String,com.sleepycat.je.Transaction,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode)>($r2, "Database.get", $r3, txn, key, null, lockMode#10);

        virtualinvoke this.<com.sleepycat.je.Database: void checkLockModeWithoutTxn(com.sleepycat.je.Transaction,com.sleepycat.je.LockMode)>(txn, lockMode#10);

        $r4 = <com.sleepycat.je.LockMode: com.sleepycat.je.LockMode READ_COMMITTED>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lockMode#10);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        if lockMode#10 != $r4 goto label03;

        cursorConfig#24 = <com.sleepycat.je.Database: com.sleepycat.je.CursorConfig READ_COMMITTED_CURSOR_CONFIG>;

        lockMode#10 = null;

        goto label04;

     label03:
        cursorConfig#24 = <com.sleepycat.je.Database: com.sleepycat.je.CursorConfig DEFAULT_CURSOR_CONFIG>;

     label04:
        result#28 = null;

        $z0 = virtualinvoke cursorConfig#24.<com.sleepycat.je.CursorConfig: boolean getReadCommitted()>();

        locker = staticinvoke <com.sleepycat.je.txn.LockerFactory: com.sleepycat.je.txn.Locker getReadableLocker(com.sleepycat.je.Database,com.sleepycat.je.Transaction,boolean)>(this, txn, $z0);

     label05:
        $r5 = new com.sleepycat.je.Cursor;

        specialinvoke $r5.<com.sleepycat.je.Cursor: void <init>(com.sleepycat.je.Database,com.sleepycat.je.txn.Locker,com.sleepycat.je.CursorConfig)>(this, locker, cursorConfig#24);

        cursor = $r5;

        l11#40 = null;

     label06:
        result#28 = virtualinvoke cursor.<com.sleepycat.je.Cursor: com.sleepycat.je.OperationResult getInternal(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.Get,com.sleepycat.je.ReadOptions,com.sleepycat.je.LockMode)>(key, data, getType, options#1, lockMode#10);

     label07:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(cursor);

        if cursor == null goto label21;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l11#40);

        if l11#40 == null goto label11;

     label08:
        virtualinvoke cursor.<com.sleepycat.je.Cursor: void close()>();

     label09:
        goto label21;

     label10:
        $r6 := @caughtexception;

        l12#52 = $r6;

        virtualinvoke l11#40.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l12#52);

        goto label21;

     label11:
        virtualinvoke cursor.<com.sleepycat.je.Cursor: void close()>();

        goto label21;

     label12:
        $r7 := @caughtexception;

     label13:
        l12#57 = $r7;

        l11#40 = l12#57;

        throw l12#57;

     label14:
        $r8 := @caughtexception;

        l13 = $r8;

     label15:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(cursor);

        if cursor == null goto label20;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l11#40);

        if l11#40 == null goto label19;

     label16:
        virtualinvoke cursor.<com.sleepycat.je.Cursor: void close()>();

     label17:
        goto label20;

     label18:
        $r9 := @caughtexception;

        l14 = $r9;

        virtualinvoke l11#40.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l14);

        goto label20;

     label19:
        virtualinvoke cursor.<com.sleepycat.je.Cursor: void close()>();

     label20:
        throw l13;

     label21:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(result#28);

        if result#28 == null goto label22;

        $z1 = 1;

        goto label23;

     label22:
        $z1 = 0;

     label23:
        virtualinvoke locker.<com.sleepycat.je.txn.Locker: void operationEnd(boolean)>($z1);

        goto label29;

     label24:
        $r11 := @caughtexception;

     label25:
        l15 = $r11;

     label26:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(result#28);

        if result#28 == null goto label27;

        $z2 = 1;

        goto label28;

     label27:
        $z2 = 0;

     label28:
        virtualinvoke locker.<com.sleepycat.je.txn.Locker: void operationEnd(boolean)>($z2);

        throw l15;

     label29:
        return result#28;

     label30:
        $r14 := @caughtexception;

        E = $r14;

        $r15 = this.<com.sleepycat.je.Database: com.sleepycat.je.Environment envHandle>;

        virtualinvoke $r15.<com.sleepycat.je.Environment: void invalidate(java.lang.Error)>(E);

        throw E;

        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label13 to label15 with label14;
        catch java.lang.Throwable from label05 to label21 with label24;
        catch java.lang.Throwable from label25 to label26 with label24;
        catch java.lang.Error from label01 to label29 with label30;
    }

    void checkLockModeWithoutTxn(com.sleepycat.je.Transaction, com.sleepycat.je.LockMode)
    {
        com.sleepycat.je.Database this;
        com.sleepycat.je.Transaction userTxn;
        com.sleepycat.je.LockMode lockMode, $r0;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        this := @this: com.sleepycat.je.Database;

        userTxn := @parameter0: com.sleepycat.je.Transaction;

        lockMode := @parameter1: com.sleepycat.je.LockMode;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(userTxn);

        if userTxn != null goto label1;

        $r0 = <com.sleepycat.je.LockMode: com.sleepycat.je.LockMode RMW>;

        $z0 = virtualinvoke $r0.<com.sleepycat.je.LockMode: boolean equals(java.lang.Object)>(lockMode);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(lockMode);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is meaningless and can not be specified when a null (autocommit) transaction is used. There will never be a follow on operation which will promote the lock to WRITE.");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        return;
    }

    public com.sleepycat.je.DatabaseConfig getConfig()
    {
        com.sleepycat.je.Database this;
        com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        java.lang.Error E, $r3;
        com.sleepycat.je.DatabaseConfig $r1, $r2;
        com.sleepycat.je.Environment $r4;

        this := @this: com.sleepycat.je.Database;

        virtualinvoke this.<com.sleepycat.je.Database: com.sleepycat.je.dbi.EnvironmentImpl checkEnv()>();

        dbImpl = virtualinvoke this.<com.sleepycat.je.Database: com.sleepycat.je.dbi.DatabaseImpl checkOpen()>();

     label1:
        $r1 = this.<com.sleepycat.je.Database: com.sleepycat.je.DatabaseConfig configuration>;

        $r2 = staticinvoke <com.sleepycat.je.DatabaseConfig: com.sleepycat.je.DatabaseConfig combineConfig(com.sleepycat.je.dbi.DatabaseImpl,com.sleepycat.je.DatabaseConfig)>(dbImpl, $r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        E = $r3;

        $r4 = this.<com.sleepycat.je.Database: com.sleepycat.je.Environment envHandle>;

        virtualinvoke $r4.<com.sleepycat.je.Environment: void invalidate(java.lang.Error)>(E);

        throw E;

        catch java.lang.Error from label1 to label2 with label3;
    }

    public void close()
    {
        com.sleepycat.je.Database this;
        com.sleepycat.je.Database$DbState $r0;
        java.lang.Error E, $r1;
        com.sleepycat.je.Environment $r2;

        this := @this: com.sleepycat.je.Database;

     label1:
        $r0 = <com.sleepycat.je.Database$DbState: com.sleepycat.je.Database$DbState CLOSED>;

        specialinvoke this.<com.sleepycat.je.Database: void closeInternal(boolean,boolean,com.sleepycat.je.Database$DbState,com.sleepycat.je.OperationFailureException)>(1, 1, $r0, null);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        E = $r1;

        $r2 = this.<com.sleepycat.je.Database: com.sleepycat.je.Environment envHandle>;

        virtualinvoke $r2.<com.sleepycat.je.Environment: void invalidate(java.lang.Error)>(E);

        throw E;

     label4:
        return;

        catch java.lang.Error from label1 to label2 with label3;
    }

    private void closeInternal(boolean, boolean, com.sleepycat.je.Database$DbState, com.sleepycat.je.OperationFailureException)
    {
        com.sleepycat.je.Database this;
        boolean doSyncDw, deleteTempDb;
        com.sleepycat.je.Database$DbState newState;
        com.sleepycat.je.OperationFailureException preemptedException;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        java.lang.InterruptedException e, $r2;
        java.lang.Throwable l7, l8, $r6, $r9;
        java.util.concurrent.locks.ReentrantReadWriteLock $r0, $r4, $r7;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r1, $r5, $r8;
        com.sleepycat.je.ThreadInterruptedException $r3;

        this := @this: com.sleepycat.je.Database;

        doSyncDw := @parameter0: boolean;

        deleteTempDb := @parameter1: boolean;

        newState := @parameter2: com.sleepycat.je.Database$DbState;

        preemptedException := @parameter3: com.sleepycat.je.OperationFailureException;

     label01:
        envImpl = virtualinvoke this.<com.sleepycat.je.Database: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

     label02:
        $r0 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: java.util.concurrent.locks.ReentrantReadWriteLock getSecondaryAssociationLock()>();

        $r1 = virtualinvoke $r0.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lockInterruptibly()>();

     label03:
        goto label05;

     label04:
        $r2 := @caughtexception;

        e = $r2;

        $r3 = new com.sleepycat.je.ThreadInterruptedException;

        specialinvoke $r3.<com.sleepycat.je.ThreadInterruptedException: void <init>(com.sleepycat.je.dbi.EnvironmentImpl,java.lang.Throwable)>(envImpl, e);

        throw $r3;

     label05:
        specialinvoke this.<com.sleepycat.je.Database: void closeInternalWork(boolean,boolean,com.sleepycat.je.Database$DbState,com.sleepycat.je.OperationFailureException)>(doSyncDw, deleteTempDb, newState, preemptedException);

     label06:
        $r4 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: java.util.concurrent.locks.ReentrantReadWriteLock getSecondaryAssociationLock()>();

        $r5 = virtualinvoke $r4.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r5.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        goto label10;

     label07:
        $r6 := @caughtexception;

     label08:
        l7 = $r6;

     label09:
        $r7 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: java.util.concurrent.locks.ReentrantReadWriteLock getSecondaryAssociationLock()>();

        $r8 = virtualinvoke $r7.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r8.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        throw l7;

     label10:
        virtualinvoke this.<com.sleepycat.je.Database: void minimalClose(com.sleepycat.je.Database$DbState,com.sleepycat.je.OperationFailureException)>(newState, preemptedException);

        goto label14;

     label11:
        $r9 := @caughtexception;

     label12:
        l8 = $r9;

     label13:
        virtualinvoke this.<com.sleepycat.je.Database: void minimalClose(com.sleepycat.je.Database$DbState,com.sleepycat.je.OperationFailureException)>(newState, preemptedException);

        throw l8;

     label14:
        return;

        catch java.lang.InterruptedException from label02 to label03 with label04;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label01 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    private void closeInternalWork(boolean, boolean, com.sleepycat.je.Database$DbState, com.sleepycat.je.OperationFailureException)
    {
        com.sleepycat.je.Database this, l8;
        boolean doSyncDw, deleteTempDb, $z0, $z1, $z2, $z3;
        com.sleepycat.je.Database$DbState newState, $r0, $r4, $r5, $r9, $r29, $r31;
        com.sleepycat.je.OperationFailureException preemptedException;
        java.lang.StringBuilder handleRefErrors, $r2, $r11, $r13, $r17, $r19, $r23, $r25, $r38, $r39, $r41;
        com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        java.lang.RuntimeException e, triggerException#9, $r33;
        java.lang.Throwable l11, $r36;
        java.lang.AssertionError $r1, $r6, $r8;
        com.sleepycat.je.txn.HandleLocker $r7, $r30, $r32, $r34, $r35;
        java.util.concurrent.atomic.AtomicInteger $r10, $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.util.Collection $r15, $r16, $r18, $r21, $r22, $r24;
        java.util.logging.Level $r27;
        com.sleepycat.je.dbi.DbTree $r28;
        java.lang.IllegalStateException $r37;
        java.lang.String $r40, $r42;

        this := @this: com.sleepycat.je.Database;

        doSyncDw := @parameter0: boolean;

        deleteTempDb := @parameter1: boolean;

        newState := @parameter2: com.sleepycat.je.Database$DbState;

        preemptedException := @parameter3: com.sleepycat.je.OperationFailureException;

        $z0 = <com.sleepycat.je.Database: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label01;

        $r0 = <com.sleepycat.je.Database$DbState: com.sleepycat.je.Database$DbState OPEN>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(newState);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if newState != $r0 goto label01;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label01:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        handleRefErrors = $r2;

        triggerException#9 = null;

        l8 = this;

        entermonitor this;

     label02:
        $r4 = this.<com.sleepycat.je.Database: com.sleepycat.je.Database$DbState state>;

        $r5 = <com.sleepycat.je.Database$DbState: com.sleepycat.je.Database$DbState OPEN>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r5);

        if $r4 == $r5 goto label04;

        exitmonitor l8;

     label03:
        return;

     label04:
        dbImpl = this.<com.sleepycat.je.Database: com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $z1 = <com.sleepycat.je.Database: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label05;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dbImpl);

        if dbImpl != null goto label05;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label05:
        $z2 = <com.sleepycat.je.Database: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label06;

        $r7 = this.<com.sleepycat.je.Database: com.sleepycat.je.txn.HandleLocker handleLocker>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r7);

        if $r7 != null goto label06;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label06:
        envImpl = virtualinvoke this.<com.sleepycat.je.Database: com.sleepycat.je.dbi.EnvironmentImpl checkEnv()>();

        this.<com.sleepycat.je.Database: com.sleepycat.je.Database$DbState state> = newState;

        this.<com.sleepycat.je.Database: com.sleepycat.je.OperationFailureException preemptedCause> = preemptedException;

        $r9 = <com.sleepycat.je.Database$DbState: com.sleepycat.je.Database$DbState CLOSED>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(newState);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r9);

        if newState != $r9 goto label09;

        $r10 = this.<com.sleepycat.je.Database: java.util.concurrent.atomic.AtomicInteger openCursors>;

        $i0 = virtualinvoke $r10.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 == 0 goto label07;

        $r11 = virtualinvoke handleRefErrors.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r12 = this.<com.sleepycat.je.Database: java.util.concurrent.atomic.AtomicInteger openCursors>;

        $i1 = virtualinvoke $r12.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" open cursors.");

     label07:
        $r15 = this.<com.sleepycat.je.Database: java.util.Collection simpleAssocSecondaries>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r15);

        if $r15 == null goto label08;

        $r16 = this.<com.sleepycat.je.Database: java.util.Collection simpleAssocSecondaries>;

        $i2 = interfaceinvoke $r16.<java.util.Collection: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 <= 0 goto label08;

        $r17 = virtualinvoke handleRefErrors.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r18 = this.<com.sleepycat.je.Database: java.util.Collection simpleAssocSecondaries>;

        $i3 = interfaceinvoke $r18.<java.util.Collection: int size()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" associated SecondaryDatabases.");

     label08:
        $r21 = this.<com.sleepycat.je.Database: java.util.Collection foreignKeySecondaries>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r21);

        if $r21 == null goto label09;

        $r22 = this.<com.sleepycat.je.Database: java.util.Collection foreignKeySecondaries>;

        $i4 = interfaceinvoke $r22.<java.util.Collection: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 <= 0 goto label09;

        $r23 = virtualinvoke handleRefErrors.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r24 = this.<com.sleepycat.je.Database: java.util.Collection foreignKeySecondaries>;

        $i5 = interfaceinvoke $r24.<java.util.Collection: int size()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" associated foreign key SecondaryDatabases.");

     label09:
        $r27 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        virtualinvoke this.<com.sleepycat.je.Database: void trace(java.util.logging.Level,java.lang.String,com.sleepycat.je.Transaction,java.lang.Object)>($r27, "Database.close: ", null, null);

        virtualinvoke this.<com.sleepycat.je.Database: void removeReferringAssociations()>();

        virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: void removeReferringHandle(com.sleepycat.je.Database)>(this);

        $r28 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.DbTree getDbTree()>();

        virtualinvoke $r28.<com.sleepycat.je.dbi.DbTree: void releaseDb(com.sleepycat.je.dbi.DatabaseImpl)>(dbImpl);

        $r29 = <com.sleepycat.je.Database$DbState: com.sleepycat.je.Database$DbState PREEMPTED>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(newState);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r29);

        if newState != $r29 goto label10;

        $r30 = this.<com.sleepycat.je.Database: com.sleepycat.je.txn.HandleLocker handleLocker>;

        virtualinvoke $r30.<com.sleepycat.je.txn.HandleLocker: void setOnlyAbortable(com.sleepycat.je.OperationFailureException)>(preemptedException);

     label10:
        $r31 = <com.sleepycat.je.Database$DbState: com.sleepycat.je.Database$DbState CLOSED>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(newState);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r31);

        if newState != $r31 goto label15;

        $z3 = virtualinvoke this.<com.sleepycat.je.Database: boolean isWritable()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label14;

        $i6 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: int noteWriteHandleClose()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if $i6 != 0 goto label14;

     label11:
        $r32 = this.<com.sleepycat.je.Database: com.sleepycat.je.txn.HandleLocker handleLocker>;

        staticinvoke <com.sleepycat.je.dbi.TriggerManager: void runCloseTriggers(com.sleepycat.je.txn.Locker,com.sleepycat.je.dbi.DatabaseImpl)>($r32, dbImpl);

     label12:
        goto label14;

     label13:
        $r33 := @caughtexception;

        e = $r33;

        triggerException#9 = e;

     label14:
        $r34 = this.<com.sleepycat.je.Database: com.sleepycat.je.txn.HandleLocker handleLocker>;

        virtualinvoke $r34.<com.sleepycat.je.txn.HandleLocker: void operationEnd(boolean)>(1);

        goto label16;

     label15:
        $r35 = this.<com.sleepycat.je.Database: com.sleepycat.je.txn.HandleLocker handleLocker>;

        virtualinvoke $r35.<com.sleepycat.je.txn.HandleLocker: void operationEnd(boolean)>(0);

     label16:
        exitmonitor l8;

     label17:
        goto label21;

     label18:
        $r36 := @caughtexception;

     label19:
        l11 = $r36;

        exitmonitor l8;

     label20:
        throw l11;

     label21:
        virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: void handleClosed(boolean,boolean)>(doSyncDw, deleteTempDb);

        $i7 = virtualinvoke handleRefErrors.<java.lang.StringBuilder: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if $i7 <= 0 goto label22;

        $r37 = new java.lang.IllegalStateException;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Database closed while still referenced by other handles.");

        $r40 = virtualinvoke handleRefErrors.<java.lang.StringBuilder: java.lang.String toString()>();

        $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r37.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r42);

        throw $r37;

     label22:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(triggerException#9);

        if triggerException#9 == null goto label23;

        throw triggerException#9;

     label23:
        return;

        catch java.lang.RuntimeException from label11 to label12 with label13;
        catch java.lang.Throwable from label02 to label03 with label18;
        catch java.lang.Throwable from label04 to label17 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    synchronized void minimalClose(com.sleepycat.je.Database$DbState, com.sleepycat.je.OperationFailureException)
    {
        com.sleepycat.je.Database this;
        com.sleepycat.je.Database$DbState newState, $r0, $r2, $r3;
        com.sleepycat.je.OperationFailureException preemptedException;
        boolean $z0;
        java.lang.AssertionError $r1;

        this := @this: com.sleepycat.je.Database;

        newState := @parameter0: com.sleepycat.je.Database$DbState;

        preemptedException := @parameter1: com.sleepycat.je.OperationFailureException;

        $z0 = <com.sleepycat.je.Database: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r0 = <com.sleepycat.je.Database$DbState: com.sleepycat.je.Database$DbState OPEN>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(newState);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if newState != $r0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $r2 = this.<com.sleepycat.je.Database: com.sleepycat.je.Database$DbState state>;

        $r3 = <com.sleepycat.je.Database$DbState: com.sleepycat.je.Database$DbState OPEN>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r3);

        if $r2 != $r3 goto label2;

        this.<com.sleepycat.je.Database: com.sleepycat.je.Database$DbState state> = newState;

        this.<com.sleepycat.je.Database: com.sleepycat.je.OperationFailureException preemptedCause> = preemptedException;

     label2:
        this.<com.sleepycat.je.Database: com.sleepycat.je.dbi.DatabaseImpl databaseImpl> = null;

        this.<com.sleepycat.je.Database: com.sleepycat.je.txn.HandleLocker handleLocker> = null;

        return;
    }

    void trace(java.util.logging.Level, java.lang.String, com.sleepycat.je.Transaction, java.lang.Object)
    {
        com.sleepycat.je.Database this;
        java.util.logging.Level level;
        java.lang.String methodName, $r4, $r12;
        com.sleepycat.je.Transaction txn;
        java.lang.Object config;
        java.lang.StringBuilder sb, $r1, $r3, $r6, $r8;
        java.util.logging.Logger $r0, $r10;
        boolean $z0;
        long $l0;
        com.sleepycat.je.dbi.EnvironmentImpl $r11;

        this := @this: com.sleepycat.je.Database;

        level := @parameter0: java.util.logging.Level;

        methodName := @parameter1: java.lang.String;

        txn := @parameter2: com.sleepycat.je.Transaction;

        config := @parameter3: java.lang.Object;

        $r0 = this.<com.sleepycat.je.Database: java.util.logging.Logger logger>;

        $z0 = virtualinvoke $r0.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>(level);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        sb = $r1;

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(methodName);

        $r3 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" name=");

        $r4 = virtualinvoke this.<com.sleepycat.je.Database: java.lang.String getDebugName()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(txn);

        if txn == null goto label1;

        $r6 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" txnId=");

        $l0 = virtualinvoke txn.<com.sleepycat.je.Transaction: long getId()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(config);

        if config == null goto label2;

        $r8 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" config=");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(config);

     label2:
        $r10 = this.<com.sleepycat.je.Database: java.util.logging.Logger logger>;

        $r11 = virtualinvoke this.<com.sleepycat.je.Database: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r12 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.sleepycat.je.utilint.LoggerUtils: void logMsg(java.util.logging.Logger,com.sleepycat.je.dbi.EnvironmentImpl,java.util.logging.Level,java.lang.String)>($r10, $r11, level, $r12);

     label3:
        return;
    }

    java.lang.String getDebugName()
    {
        com.sleepycat.je.Database this;
        com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        java.lang.String $r0;

        this := @this: com.sleepycat.je.Database;

        dbImpl = this.<com.sleepycat.je.Database: com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dbImpl);

        if dbImpl != null goto label1;

        $r0 = "[closed]";

        goto label2;

     label1:
        $r0 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: java.lang.String getDebugName()>();

     label2:
        return $r0;
    }

    public com.sleepycat.je.Sequence openSequence(com.sleepycat.je.Transaction, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.SequenceConfig)
    {
        com.sleepycat.je.Database this;
        com.sleepycat.je.Transaction txn;
        com.sleepycat.je.DatabaseEntry key;
        com.sleepycat.je.SequenceConfig config;
        java.lang.Error E, $r4;
        java.util.logging.Level $r2;
        com.sleepycat.je.Sequence $r3;
        com.sleepycat.je.Environment $r5;

        this := @this: com.sleepycat.je.Database;

        txn := @parameter0: com.sleepycat.je.Transaction;

        key := @parameter1: com.sleepycat.je.DatabaseEntry;

        config := @parameter2: com.sleepycat.je.SequenceConfig;

     label1:
        virtualinvoke this.<com.sleepycat.je.Database: com.sleepycat.je.dbi.EnvironmentImpl checkEnv()>();

        staticinvoke <com.sleepycat.je.utilint.DatabaseUtil: void checkForNullDbt(com.sleepycat.je.DatabaseEntry,java.lang.String,boolean)>(key, "key", 1);

        virtualinvoke this.<com.sleepycat.je.Database: com.sleepycat.je.dbi.DatabaseImpl checkOpen()>();

        $r2 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        virtualinvoke this.<com.sleepycat.je.Database: void trace(java.util.logging.Level,java.lang.String,com.sleepycat.je.Transaction,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.LockMode)>($r2, "Database.openSequence", txn, key, null, null);

        $r3 = new com.sleepycat.je.Sequence;

        specialinvoke $r3.<com.sleepycat.je.Sequence: void <init>(com.sleepycat.je.Database,com.sleepycat.je.Transaction,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.SequenceConfig)>(this, txn, key, config);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        E = $r4;

        $r5 = this.<com.sleepycat.je.Database: com.sleepycat.je.Environment envHandle>;

        virtualinvoke $r5.<com.sleepycat.je.Environment: void invalidate(java.lang.Error)>(E);

        throw E;

        catch java.lang.Error from label1 to label2 with label3;
    }

    public com.sleepycat.je.Cursor openCursor(com.sleepycat.je.Transaction, com.sleepycat.je.CursorConfig)
    {
        com.sleepycat.je.Database this;
        com.sleepycat.je.Transaction txn;
        java.lang.Error E, $r5;
        com.sleepycat.je.CursorConfig cursorConfig#1;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r2;
        java.util.logging.Level $r3;
        com.sleepycat.je.Cursor $r4;
        com.sleepycat.je.Environment $r6;

        this := @this: com.sleepycat.je.Database;

        txn := @parameter0: com.sleepycat.je.Transaction;

        cursorConfig#1 := @parameter1: com.sleepycat.je.CursorConfig;

     label1:
        virtualinvoke this.<com.sleepycat.je.Database: com.sleepycat.je.dbi.EnvironmentImpl checkEnv()>();

        virtualinvoke this.<com.sleepycat.je.Database: com.sleepycat.je.dbi.DatabaseImpl checkOpen()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(cursorConfig#1);

        if cursorConfig#1 != null goto label2;

        cursorConfig#1 = <com.sleepycat.je.CursorConfig: com.sleepycat.je.CursorConfig DEFAULT>;

     label2:
        $z0 = virtualinvoke cursorConfig#1.<com.sleepycat.je.CursorConfig: boolean getReadUncommitted()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        $z1 = virtualinvoke cursorConfig#1.<com.sleepycat.je.CursorConfig: boolean getReadCommitted()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Only one may be specified: ReadCommitted or ReadUncommitted");

        throw $r2;

     label3:
        $r3 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        virtualinvoke this.<com.sleepycat.je.Database: void trace(java.util.logging.Level,java.lang.String,com.sleepycat.je.Transaction,java.lang.Object)>($r3, "Database.openCursor", txn, cursorConfig#1);

        $r4 = virtualinvoke this.<com.sleepycat.je.Database: com.sleepycat.je.Cursor newDbcInstance(com.sleepycat.je.Transaction,com.sleepycat.je.CursorConfig)>(txn, cursorConfig#1);

     label4:
        return $r4;

     label5:
        $r5 := @caughtexception;

        E = $r5;

        $r6 = this.<com.sleepycat.je.Database: com.sleepycat.je.Environment envHandle>;

        virtualinvoke $r6.<com.sleepycat.je.Environment: void invalidate(java.lang.Error)>(E);

        throw E;

        catch java.lang.Error from label1 to label4 with label5;
    }

    com.sleepycat.je.Cursor newDbcInstance(com.sleepycat.je.Transaction, com.sleepycat.je.CursorConfig)
    {
        com.sleepycat.je.Database this;
        com.sleepycat.je.Transaction txn;
        com.sleepycat.je.CursorConfig cursorConfig;
        com.sleepycat.je.Cursor $r0;

        this := @this: com.sleepycat.je.Database;

        txn := @parameter0: com.sleepycat.je.Transaction;

        cursorConfig := @parameter1: com.sleepycat.je.CursorConfig;

        $r0 = new com.sleepycat.je.Cursor;

        specialinvoke $r0.<com.sleepycat.je.Cursor: void <init>(com.sleepycat.je.Database,com.sleepycat.je.Transaction,com.sleepycat.je.CursorConfig)>(this, txn, cursorConfig);

        return $r0;
    }

    com.sleepycat.je.SecondaryIntegrityException secondaryRefersToMissingPrimaryKey(com.sleepycat.je.txn.Locker, com.sleepycat.je.DatabaseEntry, com.sleepycat.je.DatabaseEntry, long)
    {
        com.sleepycat.je.Database this;
        com.sleepycat.je.txn.Locker locker;
        com.sleepycat.je.DatabaseEntry secKey, priKey;
        long expirationTime;
        com.sleepycat.je.SecondaryIntegrityException $r0;
        java.lang.String $r1;

        this := @this: com.sleepycat.je.Database;

        locker := @parameter0: com.sleepycat.je.txn.Locker;

        secKey := @parameter1: com.sleepycat.je.DatabaseEntry;

        priKey := @parameter2: com.sleepycat.je.DatabaseEntry;

        expirationTime := @parameter3: long;

        $r0 = new com.sleepycat.je.SecondaryIntegrityException;

        $r1 = virtualinvoke this.<com.sleepycat.je.Database: java.lang.String getDebugName()>();

        specialinvoke $r0.<com.sleepycat.je.SecondaryIntegrityException: void <init>(com.sleepycat.je.txn.Locker,java.lang.String,java.lang.String,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,long)>(locker, "Secondary refers to a missing key in the primary database", $r1, secKey, priKey, expirationTime);

        return $r0;
    }


