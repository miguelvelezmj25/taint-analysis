    void close() throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.txn.Locker this;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        this.<berkeley.com.sleepycat.je.txn.Locker: boolean isOpen> = 0;

        return;
    }

    protected void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl, boolean, boolean, long)
    {
        berkeley.com.sleepycat.je.txn.Locker this;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        boolean readUncommittedDefault, noWait;
        long mandatedId, $l0, $l1, $l2, $l3, $l5;
        berkeley.com.sleepycat.je.txn.TxnManager txnManager;
        berkeley.com.sleepycat.je.txn.LockManager $r0;
        byte $b4;
        java.lang.Thread $r1;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        envImpl := @parameter0: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        readUncommittedDefault := @parameter1: boolean;

        noWait := @parameter2: boolean;

        mandatedId := @parameter3: long;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<berkeley.com.sleepycat.je.txn.Locker: boolean isOpen> = 1;

        this.<berkeley.com.sleepycat.je.txn.Locker: boolean preemptable> = 1;

        txnManager = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.txn.TxnManager getTxnManager()>();

        $r0 = virtualinvoke txnManager.<berkeley.com.sleepycat.je.txn.TxnManager: berkeley.com.sleepycat.je.txn.LockManager getLockManager()>();

        this.<berkeley.com.sleepycat.je.txn.Locker: berkeley.com.sleepycat.je.txn.LockManager lockManager> = $r0;

        $l0 = virtualinvoke this.<berkeley.com.sleepycat.je.txn.Locker: long generateId(berkeley.com.sleepycat.je.txn.TxnManager,long)>(txnManager, mandatedId);

        this.<berkeley.com.sleepycat.je.txn.Locker: long id> = $l0;

        this.<berkeley.com.sleepycat.je.txn.Locker: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl> = envImpl;

        this.<berkeley.com.sleepycat.je.txn.Locker: boolean readUncommittedDefault> = readUncommittedDefault;

        this.<berkeley.com.sleepycat.je.txn.Locker: java.lang.Long waitingFor> = null;

        this.<berkeley.com.sleepycat.je.txn.Locker: berkeley.com.sleepycat.je.txn.LockType waitingForType> = null;

        this.<berkeley.com.sleepycat.je.txn.Locker: long waiterThreadId> = -1L;

        this.<berkeley.com.sleepycat.je.txn.Locker: boolean defaultNoWait> = noWait;

        $l1 = virtualinvoke this.<berkeley.com.sleepycat.je.txn.Locker: long getInitialLockTimeout()>();

        this.<berkeley.com.sleepycat.je.txn.Locker: long lockTimeoutMillis> = $l1;

        $l2 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: long getTxnTimeout()>();

        this.<berkeley.com.sleepycat.je.txn.Locker: long txnTimeoutMillis> = $l2;

        $l3 = this.<berkeley.com.sleepycat.je.txn.Locker: long txnTimeoutMillis>;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label1;

        $l5 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        this.<berkeley.com.sleepycat.je.txn.Locker: long txnStartMillis> = $l5;

        goto label2;

     label1:
        this.<berkeley.com.sleepycat.je.txn.Locker: long txnStartMillis> = 0L;

     label2:
        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        this.<berkeley.com.sleepycat.je.txn.Locker: java.lang.Thread thread> = $r1;

        return;
    }

    protected long getInitialLockTimeout()
    {
        berkeley.com.sleepycat.je.txn.Locker this;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        $r0 = this.<berkeley.com.sleepycat.je.txn.Locker: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $l0 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: long getLockTimeout()>();

        return $l0;
    }

    public synchronized void setLockTimeout(long)
    {
        berkeley.com.sleepycat.je.txn.Locker this;
        long timeout;
        byte $b0, $b1;
        java.lang.IllegalArgumentException $r0, $r1;
        double $d0, $d1;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        timeout := @parameter0: long;

        $b0 = timeout cmp 0L;

        if $b0 >= 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("the timeout value cannot be negative");

        throw $r0;

     label1:
        $d0 = (double) timeout;

        $d1 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, 32.0);

        $b1 = $d0 cmpl $d1;

        if $b1 <= 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("the timeout value cannot be greater than 2^32");

        throw $r1;

     label2:
        this.<berkeley.com.sleepycat.je.txn.Locker: long lockTimeoutMillis> = timeout;

        return;
    }

    void <init>()
    {
        berkeley.com.sleepycat.je.txn.Locker this;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<berkeley.com.sleepycat.je.txn.Locker: boolean isOpen> = 1;

        this.<berkeley.com.sleepycat.je.txn.Locker: boolean preemptable> = 1;

        this.<berkeley.com.sleepycat.je.txn.Locker: boolean defaultNoWait> = 0;

        return;
    }

    public void setPreemptable(boolean)
    {
        berkeley.com.sleepycat.je.txn.Locker this;
        boolean preemptable;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        preemptable := @parameter0: boolean;

        this.<berkeley.com.sleepycat.je.txn.Locker: boolean preemptable> = preemptable;

        return;
    }

    public berkeley.com.sleepycat.je.txn.LockResult nonBlockingLock(long, berkeley.com.sleepycat.je.txn.LockType, boolean, berkeley.com.sleepycat.je.dbi.DatabaseImpl)
    {
        berkeley.com.sleepycat.je.txn.Locker this, $r2;
        long lsn;
        berkeley.com.sleepycat.je.txn.LockType lockType;
        boolean jumpAheadOfWaiters;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl database;
        berkeley.com.sleepycat.je.txn.LockResult result;
        berkeley.com.sleepycat.je.txn.LockGrantType $r0, $r1;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        lsn := @parameter0: long;

        lockType := @parameter1: berkeley.com.sleepycat.je.txn.LockType;

        jumpAheadOfWaiters := @parameter2: boolean;

        database := @parameter3: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        result = virtualinvoke this.<berkeley.com.sleepycat.je.txn.Locker: berkeley.com.sleepycat.je.txn.LockResult lockInternal(long,berkeley.com.sleepycat.je.txn.LockType,boolean,boolean,berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(lsn, lockType, 1, jumpAheadOfWaiters, database);

        $r0 = virtualinvoke result.<berkeley.com.sleepycat.je.txn.LockResult: berkeley.com.sleepycat.je.txn.LockGrantType getLockGrant()>();

        $r1 = <berkeley.com.sleepycat.je.txn.LockGrantType: berkeley.com.sleepycat.je.txn.LockGrantType DENIED>;

        if $r0 == $r1 goto label1;

        $r2 = this.<berkeley.com.sleepycat.je.txn.Locker: berkeley.com.sleepycat.je.txn.Locker closingLocker>;

        virtualinvoke this.<berkeley.com.sleepycat.je.txn.Locker: void checkPreempted(berkeley.com.sleepycat.je.txn.Locker)>($r2);

     label1:
        return result;
    }

    public final void operationEnd() throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.txn.Locker this;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        virtualinvoke this.<berkeley.com.sleepycat.je.txn.Locker: void operationEnd(boolean)>(1);

        return;
    }

    public void checkPreempted(berkeley.com.sleepycat.je.txn.Locker) throws berkeley.com.sleepycat.je.OperationFailureException
    {
        berkeley.com.sleepycat.je.txn.Locker this, allowPreemptedLocker;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        allowPreemptedLocker := @parameter0: berkeley.com.sleepycat.je.txn.Locker;

        virtualinvoke this.<berkeley.com.sleepycat.je.txn.Locker: void throwIfPreempted(berkeley.com.sleepycat.je.txn.Locker)>(allowPreemptedLocker);

        return;
    }

    final void throwIfPreempted(berkeley.com.sleepycat.je.txn.Locker) throws berkeley.com.sleepycat.je.OperationFailureException
    {
        berkeley.com.sleepycat.je.txn.Locker this, allowPreemptedLocker;
        java.lang.RuntimeException $r0, $r2;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r1;
        berkeley.com.sleepycat.je.OperationFailureException $r3;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        allowPreemptedLocker := @parameter0: berkeley.com.sleepycat.je.txn.Locker;

        if this == allowPreemptedLocker goto label1;

        $r0 = this.<berkeley.com.sleepycat.je.txn.Locker: java.lang.RuntimeException preemptedCause>;

        if $r0 == null goto label1;

        $r1 = this.<berkeley.com.sleepycat.je.txn.Locker: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r2 = this.<berkeley.com.sleepycat.je.txn.Locker: java.lang.RuntimeException preemptedCause>;

        $r3 = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.OperationFailureException createLockPreemptedException(berkeley.com.sleepycat.je.txn.Locker,java.lang.Throwable)>(this, $r2);

        throw $r3;

     label1:
        return;
    }

    public synchronized long getLockTimeout()
    {
        berkeley.com.sleepycat.je.txn.Locker this;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        $l0 = this.<berkeley.com.sleepycat.je.txn.Locker: long lockTimeoutMillis>;

        return $l0;
    }

    public void addOpenedDatabase(berkeley.com.sleepycat.je.Database)
    {
        berkeley.com.sleepycat.je.txn.Locker this;
        berkeley.com.sleepycat.je.Database dbHandle;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        dbHandle := @parameter0: berkeley.com.sleepycat.je.Database;

        return;
    }

    public boolean isReplicated()
    {
        berkeley.com.sleepycat.je.txn.Locker this;
        long $l0;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        $l0 = this.<berkeley.com.sleepycat.je.txn.Locker: long id>;

        $z0 = staticinvoke <berkeley.com.sleepycat.je.txn.TxnManager: boolean isReplicatedTxn(long)>($l0);

        return $z0;
    }

    public long getId()
    {
        berkeley.com.sleepycat.je.txn.Locker this;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        $l0 = this.<berkeley.com.sleepycat.je.txn.Locker: long id>;

        return $l0;
    }

    public void openCursorHook(berkeley.com.sleepycat.je.dbi.DatabaseImpl)
    {
        berkeley.com.sleepycat.je.txn.Locker this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl dbImpl;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        dbImpl := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        return;
    }

    public berkeley.com.sleepycat.je.Transaction getTransaction()
    {
        berkeley.com.sleepycat.je.txn.Locker this;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        return null;
    }

    public boolean isReadUncommittedDefault()
    {
        berkeley.com.sleepycat.je.txn.Locker this;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        $z0 = this.<berkeley.com.sleepycat.je.txn.Locker: boolean readUncommittedDefault>;

        return $z0;
    }

    public boolean isReadOnly()
    {
        berkeley.com.sleepycat.je.txn.Locker this;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        return 0;
    }

    public boolean isLocalWrite()
    {
        berkeley.com.sleepycat.je.txn.Locker this;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        return 1;
    }

    public boolean getDefaultNoWait()
    {
        berkeley.com.sleepycat.je.txn.Locker this;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        $z0 = this.<berkeley.com.sleepycat.je.txn.Locker: boolean defaultNoWait>;

        return $z0;
    }

    void addBuddy(berkeley.com.sleepycat.je.txn.BuddyLocker)
    {
        berkeley.com.sleepycat.je.txn.Locker this;
        berkeley.com.sleepycat.je.txn.BuddyLocker buddy;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        buddy := @parameter0: berkeley.com.sleepycat.je.txn.BuddyLocker;

        return;
    }

    void setWaitingFor(java.lang.Long, berkeley.com.sleepycat.je.txn.LockType)
    {
        berkeley.com.sleepycat.je.txn.Locker this;
        java.lang.Long lsn;
        berkeley.com.sleepycat.je.txn.LockType type;
        java.lang.Thread $r0;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        lsn := @parameter0: java.lang.Long;

        type := @parameter1: berkeley.com.sleepycat.je.txn.LockType;

        this.<berkeley.com.sleepycat.je.txn.Locker: java.lang.Long waitingFor> = lsn;

        this.<berkeley.com.sleepycat.je.txn.Locker: berkeley.com.sleepycat.je.txn.LockType waitingForType> = type;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $l0 = virtualinvoke $r0.<java.lang.Thread: long getId()>();

        this.<berkeley.com.sleepycat.je.txn.Locker: long waiterThreadId> = $l0;

        return;
    }

    public synchronized long getTxnTimeout()
    {
        berkeley.com.sleepycat.je.txn.Locker this;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        $l0 = this.<berkeley.com.sleepycat.je.txn.Locker: long txnTimeoutMillis>;

        return $l0;
    }

    long getTxnStartMillis()
    {
        berkeley.com.sleepycat.je.txn.Locker this;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        $l0 = this.<berkeley.com.sleepycat.je.txn.Locker: long txnStartMillis>;

        return $l0;
    }

    void clearWaitingFor()
    {
        berkeley.com.sleepycat.je.txn.Locker this;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        this.<berkeley.com.sleepycat.je.txn.Locker: java.lang.Long waitingFor> = null;

        this.<berkeley.com.sleepycat.je.txn.Locker: berkeley.com.sleepycat.je.txn.LockType waitingForType> = null;

        this.<berkeley.com.sleepycat.je.txn.Locker: long waiterThreadId> = -1L;

        return;
    }

    public boolean getImportunate()
    {
        berkeley.com.sleepycat.je.txn.Locker this;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        return 0;
    }

    public boolean isTimedOut()
    {
        berkeley.com.sleepycat.je.txn.Locker this;
        long timeout, diff, $l1, $l2;
        byte $b0, $b3;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        timeout = virtualinvoke this.<berkeley.com.sleepycat.je.txn.Locker: long getTxnTimeout()>();

        $b0 = timeout cmp 0L;

        if $b0 == 0 goto label1;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l2 = this.<berkeley.com.sleepycat.je.txn.Locker: long txnStartMillis>;

        diff = $l1 - $l2;

        $b3 = diff cmp timeout;

        if $b3 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean sharesLocksWith(berkeley.com.sleepycat.je.txn.Locker)
    {
        berkeley.com.sleepycat.je.txn.Locker this, other;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        other := @parameter0: berkeley.com.sleepycat.je.txn.Locker;

        return 0;
    }

    void removeBuddy(berkeley.com.sleepycat.je.txn.BuddyLocker)
    {
        berkeley.com.sleepycat.je.txn.Locker this;
        berkeley.com.sleepycat.je.txn.BuddyLocker buddy;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        buddy := @parameter0: berkeley.com.sleepycat.je.txn.BuddyLocker;

        return;
    }

    public void setOnlyAbortable(berkeley.com.sleepycat.je.OperationFailureException)
    {
        berkeley.com.sleepycat.je.txn.Locker this;
        berkeley.com.sleepycat.je.OperationFailureException cause;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        cause := @parameter0: berkeley.com.sleepycat.je.OperationFailureException;

        return;
    }

    public berkeley.com.sleepycat.je.txn.LockResult lock(long, berkeley.com.sleepycat.je.txn.LockType, boolean, berkeley.com.sleepycat.je.dbi.DatabaseImpl) throws berkeley.com.sleepycat.je.LockNotAvailableException, berkeley.com.sleepycat.je.LockConflictException
    {
        berkeley.com.sleepycat.je.txn.Locker this, $r3;
        long lsn;
        berkeley.com.sleepycat.je.txn.LockType lockType;
        boolean noWait;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl database;
        berkeley.com.sleepycat.je.txn.LockResult result;
        berkeley.com.sleepycat.je.txn.LockGrantType $r0, $r1;
        berkeley.com.sleepycat.je.LockNotAvailableException $r2;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        lsn := @parameter0: long;

        lockType := @parameter1: berkeley.com.sleepycat.je.txn.LockType;

        noWait := @parameter2: boolean;

        database := @parameter3: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        result = virtualinvoke this.<berkeley.com.sleepycat.je.txn.Locker: berkeley.com.sleepycat.je.txn.LockResult lockInternal(long,berkeley.com.sleepycat.je.txn.LockType,boolean,boolean,berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(lsn, lockType, noWait, 0, database);

        $r0 = virtualinvoke result.<berkeley.com.sleepycat.je.txn.LockResult: berkeley.com.sleepycat.je.txn.LockGrantType getLockGrant()>();

        $r1 = <berkeley.com.sleepycat.je.txn.LockGrantType: berkeley.com.sleepycat.je.txn.LockGrantType DENIED>;

        if $r0 != $r1 goto label1;

        $r2 = new berkeley.com.sleepycat.je.LockNotAvailableException;

        specialinvoke $r2.<berkeley.com.sleepycat.je.LockNotAvailableException: void <init>(berkeley.com.sleepycat.je.txn.Locker,java.lang.String)>(this, "Non-blocking lock was denied.");

        throw $r2;

     label1:
        $r3 = this.<berkeley.com.sleepycat.je.txn.Locker: berkeley.com.sleepycat.je.txn.Locker closingLocker>;

        virtualinvoke this.<berkeley.com.sleepycat.je.txn.Locker: void checkPreempted(berkeley.com.sleepycat.je.txn.Locker)>($r3);

        return result;
    }

    public void addDeleteInfo(berkeley.com.sleepycat.je.tree.BIN)
    {
        berkeley.com.sleepycat.je.txn.Locker this, l2;
        berkeley.com.sleepycat.je.tree.BIN bin;
        java.lang.Long nodeId;
        java.lang.Throwable l4, $r7;
        boolean $z0, $z1;
        java.util.Map $r1, $r3, $r4;
        java.util.HashMap $r2;
        long $l0;
        berkeley.com.sleepycat.je.tree.BINReference $r5;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        bin := @parameter0: berkeley.com.sleepycat.je.tree.BIN;

        $z0 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: boolean shouldLogDelta()>();

        if $z0 == 0 goto label01;

        return;

     label01:
        l2 = this;

        entermonitor this;

     label02:
        $r1 = this.<berkeley.com.sleepycat.je.txn.Locker: java.util.Map deleteInfo>;

        if $r1 != null goto label03;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        this.<berkeley.com.sleepycat.je.txn.Locker: java.util.Map deleteInfo> = $r2;

     label03:
        $l0 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: long getNodeId()>();

        nodeId = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r3 = this.<berkeley.com.sleepycat.je.txn.Locker: java.util.Map deleteInfo>;

        $z1 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(nodeId);

        if $z1 == 0 goto label05;

        exitmonitor l2;

     label04:
        return;

     label05:
        $r4 = this.<berkeley.com.sleepycat.je.txn.Locker: java.util.Map deleteInfo>;

        $r5 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: berkeley.com.sleepycat.je.tree.BINReference createReference()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(nodeId, $r5);

        exitmonitor l2;

     label06:
        goto label10;

     label07:
        $r7 := @caughtexception;

     label08:
        l4 = $r7;

        exitmonitor l2;

     label09:
        throw l4;

     label10:
        return;

        catch java.lang.Throwable from label02 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    public void setClosingLocker(berkeley.com.sleepycat.je.txn.Locker)
    {
        berkeley.com.sleepycat.je.txn.Locker this, closingLocker;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        closingLocker := @parameter0: berkeley.com.sleepycat.je.txn.Locker;

        this.<berkeley.com.sleepycat.je.txn.Locker: berkeley.com.sleepycat.je.txn.Locker closingLocker> = closingLocker;

        return;
    }

    public boolean isRolledBack()
    {
        berkeley.com.sleepycat.je.txn.Locker this;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        return 0;
    }

    public void demoteLock(long) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.txn.Locker this;
        long lsn;
        berkeley.com.sleepycat.je.txn.LockManager $r0;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        lsn := @parameter0: long;

        $r0 = this.<berkeley.com.sleepycat.je.txn.Locker: berkeley.com.sleepycat.je.txn.LockManager lockManager>;

        virtualinvoke $r0.<berkeley.com.sleepycat.je.txn.LockManager: void demote(long,berkeley.com.sleepycat.je.txn.Locker)>(lsn, this);

        return;
    }

    public synchronized boolean releaseLock(long) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.txn.Locker this;
        long lsn;
        boolean 'ret';
        berkeley.com.sleepycat.je.txn.LockManager $r0;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        lsn := @parameter0: long;

        $r0 = this.<berkeley.com.sleepycat.je.txn.Locker: berkeley.com.sleepycat.je.txn.LockManager lockManager>;

        'ret' = virtualinvoke $r0.<berkeley.com.sleepycat.je.txn.LockManager: boolean release(long,berkeley.com.sleepycat.je.txn.Locker)>(lsn, this);

        virtualinvoke this.<berkeley.com.sleepycat.je.txn.Locker: void removeLock(long)>(lsn);

        return 'ret';
    }

    public void disallowReplicaWrite()
    {
        berkeley.com.sleepycat.je.txn.Locker this;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        return;
    }

    berkeley.com.sleepycat.je.txn.Locker getBuddy()
    {
        berkeley.com.sleepycat.je.txn.Locker this;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        return null;
    }

    public final void operationEnd(berkeley.com.sleepycat.je.OperationStatus) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.txn.Locker this;
        berkeley.com.sleepycat.je.OperationStatus status, $r1;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        status := @parameter0: berkeley.com.sleepycat.je.OperationStatus;

        $r1 = <berkeley.com.sleepycat.je.OperationStatus: berkeley.com.sleepycat.je.OperationStatus SUCCESS>;

        if status != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        virtualinvoke this.<berkeley.com.sleepycat.je.txn.Locker: void operationEnd(boolean)>($z0);

        return;
    }

    public berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnvironment()
    {
        berkeley.com.sleepycat.je.txn.Locker this;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0;

        this := @this: berkeley.com.sleepycat.je.txn.Locker;

        $r0 = this.<berkeley.com.sleepycat.je.txn.Locker: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        return $r0;
    }


