    public static weka.core.pmml.VectorDictionary getVectorDictionary(org.w3c.dom.Element, weka.core.pmml.MiningSchema) throws java.lang.Exception
    {
        org.w3c.dom.Element container, $r1;
        weka.core.pmml.MiningSchema ms;
        org.w3c.dom.NodeList vecL;
        org.w3c.dom.Node vecNode;
        weka.core.pmml.VectorDictionary vectDict#2, $r0;
        int $i0;
        short $s1;

        container := @parameter0: org.w3c.dom.Element;

        ms := @parameter1: weka.core.pmml.MiningSchema;

        vectDict#2 = null;

        vecL = interfaceinvoke container.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("VectorDictionary");

        $i0 = interfaceinvoke vecL.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label1;

        vecNode = interfaceinvoke vecL.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        $s1 = interfaceinvoke vecNode.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s1);

        if $s1 != 1 goto label1;

        $r0 = new weka.core.pmml.VectorDictionary;

        $r1 = (org.w3c.dom.Element) vecNode;

        specialinvoke $r0.<weka.core.pmml.VectorDictionary: void <init>(org.w3c.dom.Element,weka.core.pmml.MiningSchema)>($r1, ms);

        vectDict#2 = $r0;

     label1:
        return vectDict#2;
    }

    public void <init>(org.w3c.dom.Element, weka.core.pmml.MiningSchema) throws java.lang.Exception
    {
        weka.core.pmml.VectorDictionary this;
        org.w3c.dom.Element vectNode, fieldR, vecInstEl, $r5;
        weka.core.pmml.MiningSchema ms;
        org.w3c.dom.NodeList vecFieldsL, fieldRefsL, vecInstL;
        weka.core.Instances fullStructure;
        java.util.ArrayList fieldDefs, $r0, $r3;
        org.w3c.dom.Node fieldsNode, $r6, $r17;
        java.lang.String fieldName, id, $r12, $r27;
        weka.core.Attribute a, $r4;
        weka.core.pmml.FieldMetaInfo$Optype fieldOpt, $r13;
        weka.core.pmml.FieldRef fr, $r14;
        weka.core.pmml.VectorInstance temp, $r18;
        java.util.HashMap $r1;
        int $i0, i#21, $i1, i#38, $i2, $i3, i#84, $i4;
        java.lang.Exception $r2, $r7, $r16, $r22;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r23, $r24, $r25, $r26;
        boolean $z1;
        java.util.List $r15, $r19;
        java.util.Map $r20, $r28;
        java.lang.Object $r21;

        this := @this: weka.core.pmml.VectorDictionary;

        vectNode := @parameter0: org.w3c.dom.Element;

        ms := @parameter1: weka.core.pmml.MiningSchema;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        this.<weka.core.pmml.VectorDictionary: java.util.List m_vectorFields> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        this.<weka.core.pmml.VectorDictionary: java.util.Map m_vectorInstances> = $r1;

        vecFieldsL = interfaceinvoke vectNode.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("VectorFields");

        $i0 = interfaceinvoke vecFieldsL.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 0 goto label01;

        $r2 = new java.lang.Exception;

        specialinvoke $r2.<java.lang.Exception: void <init>(java.lang.String)>("[VectorDictionary] there are no VectorFields defined!!");

        throw $r2;

     label01:
        fullStructure = virtualinvoke ms.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        fieldDefs = $r3;

        i#21 = 0;

     label02:
        $i1 = virtualinvoke fullStructure.<weka.core.Instances: int numAttributes()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#21);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#21 >= $i1 goto label03;

        $r4 = virtualinvoke fullStructure.<weka.core.Instances: weka.core.Attribute attribute(int)>(i#21);

        virtualinvoke fieldDefs.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        i#21 = i#21 + 1;

        goto label02;

     label03:
        fieldsNode = interfaceinvoke vecFieldsL.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        $r5 = (org.w3c.dom.Element) fieldsNode;

        fieldRefsL = interfaceinvoke $r5.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("FieldRef");

        i#38 = 0;

     label04:
        $i2 = interfaceinvoke fieldRefsL.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#38);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#38 >= $i2 goto label08;

        $r6 = interfaceinvoke fieldRefsL.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i#38);

        fieldR = (org.w3c.dom.Element) $r6;

        fieldName = interfaceinvoke fieldR.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("field");

        a = virtualinvoke fullStructure.<weka.core.Instances: weka.core.Attribute attribute(java.lang.String)>(fieldName);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(a);

        if a != null goto label05;

        $r7 = new java.lang.Exception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[VectorDictionary] can\'t find field \'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(fieldName);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in the mining schema/derived fields!");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.Exception: void <init>(java.lang.String)>($r12);

        throw $r7;

     label05:
        $z1 = virtualinvoke a.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label06;

        $r13 = <weka.core.pmml.FieldMetaInfo$Optype: weka.core.pmml.FieldMetaInfo$Optype CONTINUOUS>;

        goto label07;

     label06:
        $r13 = <weka.core.pmml.FieldMetaInfo$Optype: weka.core.pmml.FieldMetaInfo$Optype CATEGORICAL>;

     label07:
        fieldOpt = $r13;

        $r14 = new weka.core.pmml.FieldRef;

        specialinvoke $r14.<weka.core.pmml.FieldRef: void <init>(org.w3c.dom.Element,weka.core.pmml.FieldMetaInfo$Optype,java.util.ArrayList)>(fieldR, fieldOpt, fieldDefs);

        fr = $r14;

        $r15 = this.<weka.core.pmml.VectorDictionary: java.util.List m_vectorFields>;

        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>(fr);

        i#38 = i#38 + 1;

        goto label04;

     label08:
        vecInstL = interfaceinvoke vectNode.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("VectorInstance");

        $i3 = interfaceinvoke vecInstL.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 != 0 goto label09;

        $r16 = new java.lang.Exception;

        specialinvoke $r16.<java.lang.Exception: void <init>(java.lang.String)>("[VectorDictionary] no VectorInstances defined!");

        throw $r16;

     label09:
        i#84 = 0;

     label10:
        $i4 = interfaceinvoke vecInstL.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#84);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if i#84 >= $i4 goto label12;

        $r17 = interfaceinvoke vecInstL.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i#84);

        vecInstEl = (org.w3c.dom.Element) $r17;

        $r18 = new weka.core.pmml.VectorInstance;

        $r19 = this.<weka.core.pmml.VectorDictionary: java.util.List m_vectorFields>;

        specialinvoke $r18.<weka.core.pmml.VectorInstance: void <init>(org.w3c.dom.Element,java.util.List)>(vecInstEl, $r19);

        temp = $r18;

        id = virtualinvoke temp.<weka.core.pmml.VectorInstance: java.lang.String getID()>();

        $r20 = this.<weka.core.pmml.VectorDictionary: java.util.Map m_vectorInstances>;

        $r21 = interfaceinvoke $r20.<java.util.Map: java.lang.Object get(java.lang.Object)>(id);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r21);

        if $r21 == null goto label11;

        $r22 = new java.lang.Exception;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[VectorDictionary] : There is already a vector with ID ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(id);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in the dictionary!");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.Exception: void <init>(java.lang.String)>($r27);

        throw $r22;

     label11:
        $r28 = this.<weka.core.pmml.VectorDictionary: java.util.Map m_vectorInstances>;

        interfaceinvoke $r28.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(id, temp);

        i#84 = i#84 + 1;

        goto label10;

     label12:
        return;
    }

    public weka.core.pmml.VectorInstance getVector(java.lang.String)
    {
        weka.core.pmml.VectorDictionary this;
        java.lang.String ID;
        java.util.Map $r0;
        java.lang.Object $r1;
        weka.core.pmml.VectorInstance $r2;

        this := @this: weka.core.pmml.VectorDictionary;

        ID := @parameter0: java.lang.String;

        $r0 = this.<weka.core.pmml.VectorDictionary: java.util.Map m_vectorInstances>;

        $r1 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(ID);

        $r2 = (weka.core.pmml.VectorInstance) $r1;

        return $r2;
    }


