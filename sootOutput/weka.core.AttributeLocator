    public void <init>(weka.core.Instances, int, int[])
    {
        weka.core.AttributeLocator this;
        weka.core.Instances data;
        int type;
        int[] indices;

        this := @this: weka.core.AttributeLocator;

        data := @parameter0: weka.core.Instances;

        type := @parameter1: int;

        indices := @parameter2: int[];

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<weka.core.AttributeLocator: int[] m_AllowedIndices> = null;

        this.<weka.core.AttributeLocator: java.util.BitSet m_Attributes> = null;

        this.<weka.core.AttributeLocator: java.util.ArrayList m_Locators> = null;

        this.<weka.core.AttributeLocator: int m_Type> = -1;

        this.<weka.core.AttributeLocator: weka.core.Instances m_Data> = null;

        this.<weka.core.AttributeLocator: int[] m_Indices> = null;

        this.<weka.core.AttributeLocator: int[] m_LocatorIndices> = null;

        virtualinvoke this.<weka.core.AttributeLocator: void initialize(weka.core.Instances,int,int[])>(data, type, indices);

        return;
    }

    protected void initialize(weka.core.Instances, int, int[])
    {
        weka.core.AttributeLocator this;
        weka.core.Instances data, $r0;
        int type, $i0, $i1;
        int[] indices, $r1, $r2, $r3, $r4;

        this := @this: weka.core.AttributeLocator;

        data := @parameter0: weka.core.Instances;

        type := @parameter1: int;

        indices := @parameter2: int[];

        $r0 = new weka.core.Instances;

        specialinvoke $r0.<weka.core.Instances: void <init>(weka.core.Instances,int)>(data, 0);

        this.<weka.core.AttributeLocator: weka.core.Instances m_Data> = $r0;

        this.<weka.core.AttributeLocator: int m_Type> = type;

        $i0 = lengthof indices;

        $r1 = newarray (int)[$i0];

        this.<weka.core.AttributeLocator: int[] m_AllowedIndices> = $r1;

        $r2 = this.<weka.core.AttributeLocator: int[] m_AllowedIndices>;

        $i1 = lengthof indices;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(indices, 0, $r2, 0, $i1);

        virtualinvoke this.<weka.core.AttributeLocator: void locate()>();

        $r3 = virtualinvoke this.<weka.core.AttributeLocator: int[] find(boolean)>(1);

        this.<weka.core.AttributeLocator: int[] m_Indices> = $r3;

        $r4 = virtualinvoke this.<weka.core.AttributeLocator: int[] find(boolean)>(0);

        this.<weka.core.AttributeLocator: int[] m_LocatorIndices> = $r4;

        return;
    }

    protected void locate()
    {
        weka.core.AttributeLocator this, $r8;
        java.util.BitSet $r0, $r14;
        int[] $r1, $r3, $r5, $r10, $r16;
        int $i0, i#11, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.util.ArrayList $r2, $r7, $r13;
        weka.core.Instances $r4, $r9, $r12, $r15;
        weka.core.Attribute $r6, $r11, $r17;
        boolean $z2;

        this := @this: weka.core.AttributeLocator;

        $r0 = new java.util.BitSet;

        $r1 = this.<weka.core.AttributeLocator: int[] m_AllowedIndices>;

        $i0 = lengthof $r1;

        specialinvoke $r0.<java.util.BitSet: void <init>(int)>($i0);

        this.<weka.core.AttributeLocator: java.util.BitSet m_Attributes> = $r0;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        this.<weka.core.AttributeLocator: java.util.ArrayList m_Locators> = $r2;

        i#11 = 0;

     label1:
        $r3 = this.<weka.core.AttributeLocator: int[] m_AllowedIndices>;

        $i1 = lengthof $r3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#11);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#11 >= $i1 goto label6;

        $r4 = this.<weka.core.AttributeLocator: weka.core.Instances m_Data>;

        $r5 = this.<weka.core.AttributeLocator: int[] m_AllowedIndices>;

        $i2 = $r5[i#11];

        $r6 = virtualinvoke $r4.<weka.core.Instances: weka.core.Attribute attribute(int)>($i2);

        $i3 = virtualinvoke $r6.<weka.core.Attribute: int type()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 != 4 goto label2;

        $r7 = this.<weka.core.AttributeLocator: java.util.ArrayList m_Locators>;

        $r8 = new weka.core.AttributeLocator;

        $r9 = this.<weka.core.AttributeLocator: weka.core.Instances m_Data>;

        $r10 = this.<weka.core.AttributeLocator: int[] m_AllowedIndices>;

        $i4 = $r10[i#11];

        $r11 = virtualinvoke $r9.<weka.core.Instances: weka.core.Attribute attribute(int)>($i4);

        $r12 = virtualinvoke $r11.<weka.core.Attribute: weka.core.Instances relation()>();

        $i5 = virtualinvoke this.<weka.core.AttributeLocator: int getType()>();

        specialinvoke $r8.<weka.core.AttributeLocator: void <init>(weka.core.Instances,int)>($r12, $i5);

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

        goto label3;

     label2:
        $r13 = this.<weka.core.AttributeLocator: java.util.ArrayList m_Locators>;

        virtualinvoke $r13.<java.util.ArrayList: boolean add(java.lang.Object)>(null);

     label3:
        $r14 = this.<weka.core.AttributeLocator: java.util.BitSet m_Attributes>;

        $i6 = i#11;

        $r15 = this.<weka.core.AttributeLocator: weka.core.Instances m_Data>;

        $r16 = this.<weka.core.AttributeLocator: int[] m_AllowedIndices>;

        $i7 = $r16[i#11];

        $r17 = virtualinvoke $r15.<weka.core.Instances: weka.core.Attribute attribute(int)>($i7);

        $i8 = virtualinvoke $r17.<weka.core.Attribute: int type()>();

        $i9 = virtualinvoke this.<weka.core.AttributeLocator: int getType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        if $i8 != $i9 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        virtualinvoke $r14.<java.util.BitSet: void set(int,boolean)>($i6, $z2);

        i#11 = i#11 + 1;

        goto label1;

     label6:
        return;
    }

    protected int[] find(boolean)
    {
        weka.core.AttributeLocator this;
        boolean findAtts, $z0;
        java.util.ArrayList indices, $r0, $r4, $r5;
        int[] result;
        int i#5, $i0, i#20, $i1, $i2, i#38, $i3, $i4;
        java.util.BitSet $r1, $r2;
        java.lang.Integer $r3, $r7, $r9;
        java.lang.Object $r6, $r8;

        this := @this: weka.core.AttributeLocator;

        findAtts := @parameter0: boolean;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        indices = $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(findAtts);

        if findAtts == 0 goto label3;

        i#5 = 0;

     label1:
        $r1 = this.<weka.core.AttributeLocator: java.util.BitSet m_Attributes>;

        $i0 = virtualinvoke $r1.<java.util.BitSet: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#5 >= $i0 goto label6;

        $r2 = this.<weka.core.AttributeLocator: java.util.BitSet m_Attributes>;

        $z0 = virtualinvoke $r2.<java.util.BitSet: boolean get(int)>(i#5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $r3 = new java.lang.Integer;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(i#5);

        virtualinvoke indices.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

     label2:
        i#5 = i#5 + 1;

        goto label1;

     label3:
        i#20 = 0;

     label4:
        $r4 = this.<weka.core.AttributeLocator: java.util.ArrayList m_Locators>;

        $i1 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#20);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#20 >= $i1 goto label6;

        $r5 = this.<weka.core.AttributeLocator: java.util.ArrayList m_Locators>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i#20);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r6);

        if $r6 == null goto label5;

        $r7 = new java.lang.Integer;

        specialinvoke $r7.<java.lang.Integer: void <init>(int)>(i#20);

        virtualinvoke indices.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

     label5:
        i#20 = i#20 + 1;

        goto label4;

     label6:
        $i2 = virtualinvoke indices.<java.util.ArrayList: int size()>();

        result = newarray (int)[$i2];

        i#38 = 0;

     label7:
        $i3 = virtualinvoke indices.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#38);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if i#38 >= $i3 goto label8;

        $r8 = virtualinvoke indices.<java.util.ArrayList: java.lang.Object get(int)>(i#38);

        $r9 = (java.lang.Integer) $r8;

        $i4 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        result[i#38] = $i4;

        i#38 = i#38 + 1;

        goto label7;

     label8:
        return result;
    }

    public void <init>(weka.core.Instances, int)
    {
        weka.core.AttributeLocator this;
        weka.core.Instances data;
        int type, $i0, $i1;

        this := @this: weka.core.AttributeLocator;

        data := @parameter0: weka.core.Instances;

        type := @parameter1: int;

        $i0 = virtualinvoke data.<weka.core.Instances: int numAttributes()>();

        $i1 = $i0 - 1;

        specialinvoke this.<weka.core.AttributeLocator: void <init>(weka.core.Instances,int,int,int)>(data, type, 0, $i1);

        return;
    }

    public void <init>(weka.core.Instances, int, int, int)
    {
        weka.core.AttributeLocator this;
        weka.core.Instances data;
        int type, fromIndex, toIndex, $i0, $i1, i#23, $i2, $i3;
        int[] indices;

        this := @this: weka.core.AttributeLocator;

        data := @parameter0: weka.core.Instances;

        type := @parameter1: int;

        fromIndex := @parameter2: int;

        toIndex := @parameter3: int;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<weka.core.AttributeLocator: int[] m_AllowedIndices> = null;

        this.<weka.core.AttributeLocator: java.util.BitSet m_Attributes> = null;

        this.<weka.core.AttributeLocator: java.util.ArrayList m_Locators> = null;

        this.<weka.core.AttributeLocator: int m_Type> = -1;

        this.<weka.core.AttributeLocator: weka.core.Instances m_Data> = null;

        this.<weka.core.AttributeLocator: int[] m_Indices> = null;

        this.<weka.core.AttributeLocator: int[] m_LocatorIndices> = null;

        $i0 = toIndex - fromIndex;

        $i1 = $i0 + 1;

        indices = newarray (int)[$i1];

        i#23 = 0;

     label1:
        $i2 = lengthof indices;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#23);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#23 >= $i2 goto label2;

        $i3 = fromIndex + i#23;

        indices[i#23] = $i3;

        i#23 = i#23 + 1;

        goto label1;

     label2:
        virtualinvoke this.<weka.core.AttributeLocator: void initialize(weka.core.Instances,int,int[])>(data, type, indices);

        return;
    }

    public int getType()
    {
        weka.core.AttributeLocator this;
        int $i0;

        this := @this: weka.core.AttributeLocator;

        $i0 = this.<weka.core.AttributeLocator: int m_Type>;

        return $i0;
    }

    public int[] getAllowedIndices()
    {
        weka.core.AttributeLocator this;
        int[] $r0;

        this := @this: weka.core.AttributeLocator;

        $r0 = this.<weka.core.AttributeLocator: int[] m_AllowedIndices>;

        return $r0;
    }

    public int[] getAttributeIndices()
    {
        weka.core.AttributeLocator this;
        int[] $r0;

        this := @this: weka.core.AttributeLocator;

        $r0 = this.<weka.core.AttributeLocator: int[] m_Indices>;

        return $r0;
    }

    public int[] getLocatorIndices()
    {
        weka.core.AttributeLocator this;
        int[] $r0;

        this := @this: weka.core.AttributeLocator;

        $r0 = this.<weka.core.AttributeLocator: int[] m_LocatorIndices>;

        return $r0;
    }

    public int getActualIndex(int)
    {
        weka.core.AttributeLocator this;
        int index, $i0;
        int[] $r0;

        this := @this: weka.core.AttributeLocator;

        index := @parameter0: int;

        $r0 = this.<weka.core.AttributeLocator: int[] m_AllowedIndices>;

        $i0 = $r0[index];

        return $i0;
    }

    public weka.core.AttributeLocator getLocator(int)
    {
        weka.core.AttributeLocator this, $r2;
        int index;
        java.util.ArrayList $r0;
        java.lang.Object $r1;

        this := @this: weka.core.AttributeLocator;

        index := @parameter0: int;

        $r0 = this.<weka.core.AttributeLocator: java.util.ArrayList m_Locators>;

        $r1 = virtualinvoke $r0.<java.util.ArrayList: java.lang.Object get(int)>(index);

        $r2 = (weka.core.AttributeLocator) $r1;

        return $r2;
    }


