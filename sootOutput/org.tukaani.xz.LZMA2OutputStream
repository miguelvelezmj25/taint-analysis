    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "org/tukaani/xz/LZMA2OutputStream";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.tukaani.xz.LZMA2OutputStream: boolean $assertionsDisabled> = $z1;

        return;
    }

    void <init>(org.tukaani.xz.FinishableOutputStream, org.tukaani.xz.LZMA2Options)
    {
        org.tukaani.xz.LZMA2OutputStream this;
        org.tukaani.xz.FinishableOutputStream out;
        org.tukaani.xz.LZMA2Options options;
        int dictSize, extraSizeBefore, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        byte[] presetDict, $r0;
        java.lang.NullPointerException $r1;
        java.io.DataOutputStream $r2;
        org.tukaani.xz.rangecoder.RangeEncoderToBuffer $r3, $r4;
        org.tukaani.xz.lzma.LZMAEncoder $r5, $r6;
        org.tukaani.xz.lz.LZEncoder $r7, $r8;

        this := @this: org.tukaani.xz.LZMA2OutputStream;

        out := @parameter0: org.tukaani.xz.FinishableOutputStream;

        options := @parameter1: org.tukaani.xz.LZMA2Options;

        specialinvoke this.<org.tukaani.xz.FinishableOutputStream: void <init>()>();

        $r0 = newarray (byte)[1];

        this.<org.tukaani.xz.LZMA2OutputStream: byte[] tempBuf> = $r0;

        this.<org.tukaani.xz.LZMA2OutputStream: boolean dictResetNeeded> = 1;

        this.<org.tukaani.xz.LZMA2OutputStream: boolean stateResetNeeded> = 1;

        this.<org.tukaani.xz.LZMA2OutputStream: boolean propsNeeded> = 1;

        this.<org.tukaani.xz.LZMA2OutputStream: int pendingSize> = 0;

        this.<org.tukaani.xz.LZMA2OutputStream: boolean finished> = 0;

        this.<org.tukaani.xz.LZMA2OutputStream: java.io.IOException exception> = null;

        if out != null goto label1;

        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>()>();

        throw $r1;

     label1:
        this.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.FinishableOutputStream out> = out;

        $r2 = new java.io.DataOutputStream;

        specialinvoke $r2.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(out);

        this.<org.tukaani.xz.LZMA2OutputStream: java.io.DataOutputStream outData> = $r2;

        $r3 = new org.tukaani.xz.rangecoder.RangeEncoderToBuffer;

        specialinvoke $r3.<org.tukaani.xz.rangecoder.RangeEncoderToBuffer: void <init>(int)>(65536);

        this.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.rangecoder.RangeEncoderToBuffer rc> = $r3;

        dictSize = virtualinvoke options.<org.tukaani.xz.LZMA2Options: int getDictSize()>();

        extraSizeBefore = staticinvoke <org.tukaani.xz.LZMA2OutputStream: int getExtraSizeBefore(int)>(dictSize);

        $r4 = this.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.rangecoder.RangeEncoderToBuffer rc>;

        $i0 = virtualinvoke options.<org.tukaani.xz.LZMA2Options: int getLc()>();

        $i1 = virtualinvoke options.<org.tukaani.xz.LZMA2Options: int getLp()>();

        $i2 = virtualinvoke options.<org.tukaani.xz.LZMA2Options: int getPb()>();

        $i3 = virtualinvoke options.<org.tukaani.xz.LZMA2Options: int getMode()>();

        $i4 = virtualinvoke options.<org.tukaani.xz.LZMA2Options: int getNiceLen()>();

        $i5 = virtualinvoke options.<org.tukaani.xz.LZMA2Options: int getMatchFinder()>();

        $i6 = virtualinvoke options.<org.tukaani.xz.LZMA2Options: int getDepthLimit()>();

        $r5 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.LZMAEncoder getInstance(org.tukaani.xz.rangecoder.RangeEncoder,int,int,int,int,int,int,int,int,int)>($r4, $i0, $i1, $i2, $i3, dictSize, extraSizeBefore, $i4, $i5, $i6);

        this.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.lzma.LZMAEncoder lzma> = $r5;

        $r6 = this.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.lzma.LZMAEncoder lzma>;

        $r7 = virtualinvoke $r6.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lz.LZEncoder getLZEncoder()>();

        this.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.lz.LZEncoder lz> = $r7;

        presetDict = virtualinvoke options.<org.tukaani.xz.LZMA2Options: byte[] getPresetDict()>();

        if presetDict == null goto label2;

        $i7 = lengthof presetDict;

        if $i7 <= 0 goto label2;

        $r8 = this.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.lz.LZEncoder lz>;

        virtualinvoke $r8.<org.tukaani.xz.lz.LZEncoder: void setPresetDict(int,byte[])>(dictSize, presetDict);

        this.<org.tukaani.xz.LZMA2OutputStream: boolean dictResetNeeded> = 0;

     label2:
        $i8 = virtualinvoke options.<org.tukaani.xz.LZMA2Options: int getPb()>();

        $i9 = $i8 * 5;

        $i10 = virtualinvoke options.<org.tukaani.xz.LZMA2Options: int getLp()>();

        $i11 = $i9 + $i10;

        $i12 = $i11 * 9;

        $i13 = virtualinvoke options.<org.tukaani.xz.LZMA2Options: int getLc()>();

        $i14 = $i12 + $i13;

        this.<org.tukaani.xz.LZMA2OutputStream: int props> = $i14;

        return;
    }

    private static int getExtraSizeBefore(int)
    {
        int dictSize, $i0;

        dictSize := @parameter0: int;

        if 65536 <= dictSize goto label1;

        $i0 = 65536 - dictSize;

        goto label2;

     label1:
        $i0 = 0;

     label2:
        return $i0;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        org.tukaani.xz.LZMA2OutputStream this;
        byte[] buf;
        int used, off#1, len#2, $i0, $i1, $i2, $i3, $i4;
        java.io.IOException e, $r1, $r2, $r7;
        java.lang.IndexOutOfBoundsException $r0;
        boolean $z0, $z1;
        org.tukaani.xz.XZIOException $r3;
        org.tukaani.xz.lz.LZEncoder $r4;
        org.tukaani.xz.lzma.LZMAEncoder $r6;

        this := @this: org.tukaani.xz.LZMA2OutputStream;

        buf := @parameter0: byte[];

        off#1 := @parameter1: int;

        len#2 := @parameter2: int;

        if off#1 < 0 goto label1;

        if len#2 < 0 goto label1;

        $i0 = off#1 + len#2;

        if $i0 < 0 goto label1;

        $i1 = off#1 + len#2;

        $i2 = lengthof buf;

        if $i1 <= $i2 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r0;

     label2:
        $r1 = this.<org.tukaani.xz.LZMA2OutputStream: java.io.IOException exception>;

        if $r1 == null goto label3;

        $r2 = this.<org.tukaani.xz.LZMA2OutputStream: java.io.IOException exception>;

        throw $r2;

     label3:
        $z0 = this.<org.tukaani.xz.LZMA2OutputStream: boolean finished>;

        if $z0 == 0 goto label4;

        $r3 = new org.tukaani.xz.XZIOException;

        specialinvoke $r3.<org.tukaani.xz.XZIOException: void <init>(java.lang.String)>("Stream finished or closed");

        throw $r3;

     label4:
        if len#2 <= 0 goto label6;

        $r4 = this.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.lz.LZEncoder lz>;

        used = virtualinvoke $r4.<org.tukaani.xz.lz.LZEncoder: int fillWindow(byte[],int,int)>(buf, off#1, len#2);

        off#1 = off#1 + used;

        len#2 = len#2 - used;

        $i3 = this.<org.tukaani.xz.LZMA2OutputStream: int pendingSize>;

        $i4 = $i3 + used;

        this.<org.tukaani.xz.LZMA2OutputStream: int pendingSize> = $i4;

        $r6 = this.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.lzma.LZMAEncoder lzma>;

        $z1 = virtualinvoke $r6.<org.tukaani.xz.lzma.LZMAEncoder: boolean encodeForLZMA2()>();

        if $z1 == 0 goto label5;

        specialinvoke this.<org.tukaani.xz.LZMA2OutputStream: void writeChunk()>();

     label5:
        goto label4;

     label6:
        goto label8;

     label7:
        $r7 := @caughtexception;

        e = $r7;

        this.<org.tukaani.xz.LZMA2OutputStream: java.io.IOException exception> = e;

        throw e;

     label8:
        return;

        catch java.io.IOException from label4 to label6 with label7;
    }

    private void writeChunk() throws java.io.IOException
    {
        org.tukaani.xz.LZMA2OutputStream this;
        int compressedSize, uncompressedSize#7, $i0, $i1, $i2;
        org.tukaani.xz.rangecoder.RangeEncoderToBuffer $r0, $r9;
        org.tukaani.xz.lzma.LZMAEncoder $r1, $r4, $r5, $r8;
        boolean $z0, $z1, $z2;
        java.lang.AssertionError $r2, $r3, $r6;

        this := @this: org.tukaani.xz.LZMA2OutputStream;

        $r0 = this.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.rangecoder.RangeEncoderToBuffer rc>;

        compressedSize = virtualinvoke $r0.<org.tukaani.xz.rangecoder.RangeEncoderToBuffer: int finish()>();

        $r1 = this.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.lzma.LZMAEncoder lzma>;

        uncompressedSize#7 = virtualinvoke $r1.<org.tukaani.xz.lzma.LZMAEncoder: int getUncompressedSize()>();

        $z0 = <org.tukaani.xz.LZMA2OutputStream: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if compressedSize > 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>(int)>(compressedSize);

        throw $r2;

     label1:
        $z1 = <org.tukaani.xz.LZMA2OutputStream: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if uncompressedSize#7 > 0 goto label2;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>(int)>(uncompressedSize#7);

        throw $r3;

     label2:
        $i0 = compressedSize + 2;

        if $i0 >= uncompressedSize#7 goto label3;

        specialinvoke this.<org.tukaani.xz.LZMA2OutputStream: void writeLZMA(int,int)>(uncompressedSize#7, compressedSize);

        goto label5;

     label3:
        $r4 = this.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.lzma.LZMAEncoder lzma>;

        virtualinvoke $r4.<org.tukaani.xz.lzma.LZMAEncoder: void reset()>();

        $r5 = this.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.lzma.LZMAEncoder lzma>;

        uncompressedSize#7 = virtualinvoke $r5.<org.tukaani.xz.lzma.LZMAEncoder: int getUncompressedSize()>();

        $z2 = <org.tukaani.xz.LZMA2OutputStream: boolean $assertionsDisabled>;

        if $z2 != 0 goto label4;

        if uncompressedSize#7 > 0 goto label4;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>(int)>(uncompressedSize#7);

        throw $r6;

     label4:
        specialinvoke this.<org.tukaani.xz.LZMA2OutputStream: void writeUncompressed(int)>(uncompressedSize#7);

     label5:
        $i1 = this.<org.tukaani.xz.LZMA2OutputStream: int pendingSize>;

        $i2 = $i1 - uncompressedSize#7;

        this.<org.tukaani.xz.LZMA2OutputStream: int pendingSize> = $i2;

        $r8 = this.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.lzma.LZMAEncoder lzma>;

        virtualinvoke $r8.<org.tukaani.xz.lzma.LZMAEncoder: void resetUncompressedSize()>();

        $r9 = this.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.rangecoder.RangeEncoderToBuffer rc>;

        virtualinvoke $r9.<org.tukaani.xz.rangecoder.RangeEncoderToBuffer: void reset()>();

        return;
    }

    private void writeLZMA(int, int) throws java.io.IOException
    {
        org.tukaani.xz.LZMA2OutputStream this;
        int uncompressedSize, compressedSize, $i0, $i1, control#19, $i2, $i3, $i4;
        boolean $z0, $z1, $z2, $z3;
        short control#6;
        java.io.DataOutputStream $r0, $r1, $r2, $r3;
        org.tukaani.xz.rangecoder.RangeEncoderToBuffer $r4;
        org.tukaani.xz.FinishableOutputStream $r5;

        this := @this: org.tukaani.xz.LZMA2OutputStream;

        uncompressedSize := @parameter0: int;

        compressedSize := @parameter1: int;

        $z0 = this.<org.tukaani.xz.LZMA2OutputStream: boolean propsNeeded>;

        if $z0 == 0 goto label2;

        $z1 = this.<org.tukaani.xz.LZMA2OutputStream: boolean dictResetNeeded>;

        if $z1 == 0 goto label1;

        control#6 = 224;

        goto label4;

     label1:
        control#6 = 192;

        goto label4;

     label2:
        $z2 = this.<org.tukaani.xz.LZMA2OutputStream: boolean stateResetNeeded>;

        if $z2 == 0 goto label3;

        control#6 = 160;

        goto label4;

     label3:
        control#6 = 128;

     label4:
        $i0 = uncompressedSize - 1;

        $i1 = $i0 >>> 16;

        control#19 = control#6 | $i1;

        $r0 = this.<org.tukaani.xz.LZMA2OutputStream: java.io.DataOutputStream outData>;

        virtualinvoke $r0.<java.io.DataOutputStream: void writeByte(int)>(control#19);

        $r1 = this.<org.tukaani.xz.LZMA2OutputStream: java.io.DataOutputStream outData>;

        $i2 = uncompressedSize - 1;

        virtualinvoke $r1.<java.io.DataOutputStream: void writeShort(int)>($i2);

        $r2 = this.<org.tukaani.xz.LZMA2OutputStream: java.io.DataOutputStream outData>;

        $i3 = compressedSize - 1;

        virtualinvoke $r2.<java.io.DataOutputStream: void writeShort(int)>($i3);

        $z3 = this.<org.tukaani.xz.LZMA2OutputStream: boolean propsNeeded>;

        if $z3 == 0 goto label5;

        $r3 = this.<org.tukaani.xz.LZMA2OutputStream: java.io.DataOutputStream outData>;

        $i4 = this.<org.tukaani.xz.LZMA2OutputStream: int props>;

        virtualinvoke $r3.<java.io.DataOutputStream: void writeByte(int)>($i4);

     label5:
        $r4 = this.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.rangecoder.RangeEncoderToBuffer rc>;

        $r5 = this.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.FinishableOutputStream out>;

        virtualinvoke $r4.<org.tukaani.xz.rangecoder.RangeEncoderToBuffer: void write(java.io.OutputStream)>($r5);

        this.<org.tukaani.xz.LZMA2OutputStream: boolean propsNeeded> = 0;

        this.<org.tukaani.xz.LZMA2OutputStream: boolean stateResetNeeded> = 0;

        this.<org.tukaani.xz.LZMA2OutputStream: boolean dictResetNeeded> = 0;

        return;
    }

    private void writeUncompressed(int) throws java.io.IOException
    {
        org.tukaani.xz.LZMA2OutputStream this;
        int chunkSize, uncompressedSize#1, $i1;
        java.io.DataOutputStream $r0, $r1;
        boolean $z0;
        byte $b0;
        org.tukaani.xz.lz.LZEncoder $r2;
        org.tukaani.xz.FinishableOutputStream $r3;

        this := @this: org.tukaani.xz.LZMA2OutputStream;

        uncompressedSize#1 := @parameter0: int;

     label1:
        if uncompressedSize#1 <= 0 goto label4;

        chunkSize = staticinvoke <java.lang.Math: int min(int,int)>(uncompressedSize#1, 65536);

        $r0 = this.<org.tukaani.xz.LZMA2OutputStream: java.io.DataOutputStream outData>;

        $z0 = this.<org.tukaani.xz.LZMA2OutputStream: boolean dictResetNeeded>;

        if $z0 == 0 goto label2;

        $b0 = 1;

        goto label3;

     label2:
        $b0 = 2;

     label3:
        virtualinvoke $r0.<java.io.DataOutputStream: void writeByte(int)>($b0);

        $r1 = this.<org.tukaani.xz.LZMA2OutputStream: java.io.DataOutputStream outData>;

        $i1 = chunkSize - 1;

        virtualinvoke $r1.<java.io.DataOutputStream: void writeShort(int)>($i1);

        $r2 = this.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.lz.LZEncoder lz>;

        $r3 = this.<org.tukaani.xz.LZMA2OutputStream: org.tukaani.xz.FinishableOutputStream out>;

        virtualinvoke $r2.<org.tukaani.xz.lz.LZEncoder: void copyUncompressed(java.io.OutputStream,int,int)>($r3, uncompressedSize#1, chunkSize);

        uncompressedSize#1 = uncompressedSize#1 - chunkSize;

        this.<org.tukaani.xz.LZMA2OutputStream: boolean dictResetNeeded> = 0;

        goto label1;

     label4:
        this.<org.tukaani.xz.LZMA2OutputStream: boolean stateResetNeeded> = 1;

        return;
    }


