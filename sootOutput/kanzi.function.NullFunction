    public int getMaxEncodedLength(int)
    {
        kanzi.function.NullFunction this;
        int srcLen;

        this := @this: kanzi.function.NullFunction;

        srcLen := @parameter0: int;

        return srcLen;
    }

    public boolean forward(kanzi.SliceByteArray, kanzi.SliceByteArray)
    {
        kanzi.function.NullFunction this;
        kanzi.SliceByteArray input, output;
        boolean $z0;

        this := @this: kanzi.function.NullFunction;

        input := @parameter0: kanzi.SliceByteArray;

        output := @parameter1: kanzi.SliceByteArray;

        $z0 = staticinvoke <kanzi.function.NullFunction: boolean doCopy(kanzi.SliceByteArray,kanzi.SliceByteArray)>(input, output);

        return $z0;
    }

    private static boolean doCopy(kanzi.SliceByteArray, kanzi.SliceByteArray)
    {
        kanzi.SliceByteArray input, output;
        int count, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        boolean $z0, $z1;
        byte[] $r0, $r1, $r2, $r3;

        input := @parameter0: kanzi.SliceByteArray;

        output := @parameter1: kanzi.SliceByteArray;

        $z0 = staticinvoke <kanzi.SliceByteArray: boolean isValid(kanzi.SliceByteArray)>(input);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <kanzi.SliceByteArray: boolean isValid(kanzi.SliceByteArray)>(output);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

     label1:
        return 0;

     label2:
        count = input.<kanzi.SliceByteArray: int length>;

        $i0 = output.<kanzi.SliceByteArray: int length>;

        $i1 = output.<kanzi.SliceByteArray: int index>;

        $i2 = $i0 - $i1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count);

        if $i2 >= count goto label3;

        return 0;

     label3:
        $r0 = input.<kanzi.SliceByteArray: byte[] array>;

        $r1 = output.<kanzi.SliceByteArray: byte[] array>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r0 != $r1 goto label4;

        $i3 = input.<kanzi.SliceByteArray: int index>;

        $i4 = output.<kanzi.SliceByteArray: int index>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i3 == $i4 goto label5;

     label4:
        $r2 = input.<kanzi.SliceByteArray: byte[] array>;

        $i5 = input.<kanzi.SliceByteArray: int index>;

        $r3 = output.<kanzi.SliceByteArray: byte[] array>;

        $i6 = output.<kanzi.SliceByteArray: int index>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i5, $r3, $i6, count);

     label5:
        $i7 = input.<kanzi.SliceByteArray: int index>;

        $i8 = $i7 + count;

        input.<kanzi.SliceByteArray: int index> = $i8;

        $i9 = output.<kanzi.SliceByteArray: int index>;

        $i10 = $i9 + count;

        output.<kanzi.SliceByteArray: int index> = $i10;

        return 1;
    }

    public void <init>()
    {
        kanzi.function.NullFunction this;

        this := @this: kanzi.function.NullFunction;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }


