    public void <init>(int, int, int, java.util.concurrent.ExecutorService, kanzi.IntFilter[], int)
    {
        kanzi.filter.ParallelFilter this;
        int width, height, stride, direction, $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.util.concurrent.ExecutorService pool;
        kanzi.IntFilter[] delegates, $r8, $r9;
        java.lang.IllegalArgumentException $r0, $r1, $r2, $r5, $r6, $r7;
        java.lang.NullPointerException $r3, $r4;

        this := @this: kanzi.filter.ParallelFilter;

        width := @parameter0: int;

        height := @parameter1: int;

        stride := @parameter2: int;

        pool := @parameter3: java.util.concurrent.ExecutorService;

        delegates := @parameter4: kanzi.IntFilter[];

        direction := @parameter5: int;

        specialinvoke this.<java.lang.Object: void <init>()>();

        if height >= 8 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The height must be at least 8");

        throw $r0;

     label1:
        if width >= 8 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The width must be at least 8");

        throw $r1;

     label2:
        if stride >= 8 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The stride must be at least 8");

        throw $r2;

     label3:
        if pool != null goto label4;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Invalid null pool parameter");

        throw $r3;

     label4:
        if delegates != null goto label5;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("Invalid null delegates parameter");

        throw $r4;

     label5:
        $i0 = direction & 1;

        if $i0 != 0 goto label6;

        $i1 = direction & 2;

        if $i1 != 0 goto label6;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid direction parameter (must be VERTICAL or HORIZONTAL)");

        throw $r5;

     label6:
        $i2 = direction & 1;

        if $i2 == 0 goto label7;

        $i3 = direction & 2;

        if $i3 == 0 goto label7;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid direction parameter (must be VERTICAL or HORIZONTAL)");

        throw $r6;

     label7:
        $i4 = lengthof delegates;

        if $i4 != 0 goto label8;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid empty delegates parameter");

        throw $r7;

     label8:
        this.<kanzi.filter.ParallelFilter: int width> = width;

        this.<kanzi.filter.ParallelFilter: int height> = height;

        this.<kanzi.filter.ParallelFilter: int stride> = stride;

        this.<kanzi.filter.ParallelFilter: int direction> = direction;

        $i5 = lengthof delegates;

        $r8 = newarray (kanzi.IntFilter)[$i5];

        this.<kanzi.filter.ParallelFilter: kanzi.IntFilter[] delegates> = $r8;

        $r9 = this.<kanzi.filter.ParallelFilter: kanzi.IntFilter[] delegates>;

        $i6 = lengthof delegates;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(delegates, 0, $r9, 0, $i6);

        this.<kanzi.filter.ParallelFilter: java.util.concurrent.ExecutorService pool> = pool;

        return;
    }

    public boolean apply(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.filter.ParallelFilter this;
        kanzi.SliceIntArray input, output, src, dst, $r3, $r5;
        int nbThreads, area, srcIdx, dstIdx, $i0, $i1, i#20, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;
        java.util.ArrayList filterTasks, $r1;
        java.util.List results;
        java.util.Iterator l8;
        java.util.concurrent.Future fr;
        java.lang.InterruptedException l7, $r14;
        java.util.concurrent.ExecutionException e, $r15;
        boolean $z0, $z1, res#18, $z3, $z4;
        kanzi.IntFilter[] $r0, $r2, $r8;
        int[] $r4, $r6;
        kanzi.filter.ParallelFilter$FilterTask $r7;
        kanzi.IntFilter $r9;
        java.util.concurrent.ExecutorService $r10;
        java.lang.Object $r11, $r12;
        java.lang.Boolean $r13;

        this := @this: kanzi.filter.ParallelFilter;

        input := @parameter0: kanzi.SliceIntArray;

        output := @parameter1: kanzi.SliceIntArray;

        $z0 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(input);

        if $z0 == 0 goto label01;

        $z1 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(output);

        if $z1 != 0 goto label02;

     label01:
        return 0;

     label02:
        $r0 = this.<kanzi.filter.ParallelFilter: kanzi.IntFilter[] delegates>;

        nbThreads = lengthof $r0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(nbThreads);

        filterTasks = $r1;

        $i0 = this.<kanzi.filter.ParallelFilter: int height>;

        $i1 = this.<kanzi.filter.ParallelFilter: int stride>;

        area = $i0 * $i1;

        res#18 = 1;

        i#20 = 0;

     label03:
        $r2 = this.<kanzi.filter.ParallelFilter: kanzi.IntFilter[] delegates>;

        $i2 = lengthof $r2;

        if i#20 >= $i2 goto label08;

        $i3 = this.<kanzi.filter.ParallelFilter: int direction>;

        if $i3 != 1 goto label04;

        $i4 = input.<kanzi.SliceIntArray: int index>;

        $i5 = area * i#20;

        $i6 = $i5 / nbThreads;

        $i7 = $i4 + $i6;

        goto label05;

     label04:
        $i8 = input.<kanzi.SliceIntArray: int index>;

        $i9 = this.<kanzi.filter.ParallelFilter: int width>;

        $i10 = $i9 * i#20;

        $i11 = $i10 / nbThreads;

        $i7 = $i8 + $i11;

     label05:
        srcIdx = $i7;

        $r3 = new kanzi.SliceIntArray;

        $r4 = input.<kanzi.SliceIntArray: int[] array>;

        specialinvoke $r3.<kanzi.SliceIntArray: void <init>(int[],int)>($r4, srcIdx);

        src = $r3;

        $i12 = this.<kanzi.filter.ParallelFilter: int direction>;

        if $i12 != 1 goto label06;

        $i13 = output.<kanzi.SliceIntArray: int index>;

        $i14 = area * i#20;

        $i15 = $i14 / nbThreads;

        $i16 = $i13 + $i15;

        goto label07;

     label06:
        $i17 = output.<kanzi.SliceIntArray: int index>;

        $i18 = this.<kanzi.filter.ParallelFilter: int width>;

        $i19 = $i18 * i#20;

        $i20 = $i19 / nbThreads;

        $i16 = $i17 + $i20;

     label07:
        dstIdx = $i16;

        $r5 = new kanzi.SliceIntArray;

        $r6 = output.<kanzi.SliceIntArray: int[] array>;

        specialinvoke $r5.<kanzi.SliceIntArray: void <init>(int[],int)>($r6, dstIdx);

        dst = $r5;

        $r7 = new kanzi.filter.ParallelFilter$FilterTask;

        $r8 = this.<kanzi.filter.ParallelFilter: kanzi.IntFilter[] delegates>;

        $r9 = $r8[i#20];

        specialinvoke $r7.<kanzi.filter.ParallelFilter$FilterTask: void <init>(kanzi.IntFilter,kanzi.SliceIntArray,kanzi.SliceIntArray)>($r9, src, dst);

        virtualinvoke filterTasks.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        i#20 = i#20 + 1;

        goto label03;

     label08:
        $r10 = this.<kanzi.filter.ParallelFilter: java.util.concurrent.ExecutorService pool>;

        results = interfaceinvoke $r10.<java.util.concurrent.ExecutorService: java.util.List invokeAll(java.util.Collection)>(filterTasks);

        l8 = interfaceinvoke results.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z3 = interfaceinvoke l8.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label10;

        $r11 = interfaceinvoke l8.<java.util.Iterator: java.lang.Object next()>();

        fr = (java.util.concurrent.Future) $r11;

        $r12 = interfaceinvoke fr.<java.util.concurrent.Future: java.lang.Object get()>();

        $r13 = (java.lang.Boolean) $r12;

        $z4 = virtualinvoke $r13.<java.lang.Boolean: boolean booleanValue()>();

        res#18 = res#18 & $z4;

        goto label09;

     label10:
        goto label13;

     label11:
        $r14 := @caughtexception;

        l7 = $r14;

        goto label13;

     label12:
        $r15 := @caughtexception;

        e = $r15;

        return 0;

     label13:
        return res#18;

        catch java.lang.InterruptedException from label08 to label10 with label11;
        catch java.util.concurrent.ExecutionException from label08 to label10 with label12;
    }


