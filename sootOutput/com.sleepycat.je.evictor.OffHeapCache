    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        long $l9;

        $r0 = class "com/sleepycat/je/evictor/OffHeapCache";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled> = $z1;

        $i0 = <com.sleepycat.je.dbi.MemoryBudget: int OBJECT_OVERHEAD>;

        $i1 = $i0 + 16;

        $i2 = staticinvoke <com.sleepycat.je.dbi.MemoryBudget: int longArraySize(int)>(102400);

        $i3 = $i1 + $i2;

        $i4 = staticinvoke <com.sleepycat.je.dbi.MemoryBudget: int objectArraySize(int)>(102400);

        $i5 = $i3 + $i4;

        $i6 = staticinvoke <com.sleepycat.je.dbi.MemoryBudget: int intArraySize(int)>(102400);

        $i7 = $i6 * 2;

        $i8 = $i5 + $i7;

        $l9 = (long) $i8;

        <com.sleepycat.je.evictor.OffHeapCache: long CHUNK_MEMORY_SIZE> = $l9;

        return;
    }

    public void <init>(com.sleepycat.je.dbi.EnvironmentImpl)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl, $r51;
        com.sleepycat.je.dbi.DbConfigManager configManager;
        com.sleepycat.je.evictor.OffHeapAllocatorFactory factory, $r29;
        java.lang.Throwable e, $r31;
        int corePoolSize, $i4, $i7, $i8, i#149, $i9, $i10, $i11, $i12, $i14;
        long keepAliveTime, $l0, $l1, $l3, $l5, $l6;
        boolean isShared, $z0;
        java.util.concurrent.TimeUnit $r0;
        java.util.concurrent.ArrayBlockingQueue $r1;
        java.util.concurrent.atomic.AtomicInteger $r2, $r20, $r21, $r22, $r23, $r24;
        java.util.concurrent.atomic.AtomicBoolean $r3;
        java.lang.Object $r4;
        java.util.concurrent.atomic.AtomicLong $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19;
        java.lang.Class $r25;
        java.util.logging.Logger $r26, $r52;
        com.sleepycat.je.config.LongConfigParam $r27, $r33;
        byte $b2;
        com.sleepycat.je.evictor.DummyAllocator $r28;
        com.sleepycat.je.evictor.OffHeapAllocator $r30, $r35;
        java.lang.IllegalStateException $r32;
        com.sleepycat.je.config.IntConfigParam $r34, $r43, $r44;
        com.sleepycat.je.evictor.OffHeapCache$LRUList[] $r36, $r37, $r38, $r40;
        com.sleepycat.je.evictor.OffHeapCache$LRUList $r39, $r41;
        com.sleepycat.je.config.DurationConfigParam $r42, $r45;
        java.util.concurrent.ThreadPoolExecutor $r47;
        com.sleepycat.je.utilint.StoppableThreadFactory $r49;
        com.sleepycat.je.evictor.OffHeapCache$1 $r53;
        com.sleepycat.je.config.BooleanConfigParam $r54;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        envImpl := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r2 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicInteger activePoolThreads> = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicBoolean shutdownRequested> = $r3;

        this.<com.sleepycat.je.evictor.OffHeapCache: int firstFreeListEntry> = -1;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        this.<com.sleepycat.je.evictor.OffHeapCache: java.lang.Object addRemoveEntryMutex> = $r4;

        this.<com.sleepycat.je.evictor.OffHeapCache: int nextPri1LRUList> = 0;

        this.<com.sleepycat.je.evictor.OffHeapCache: int nextPri2LRUList> = 0;

        $r5 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r5.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nAllocFailure> = $r5;

        $r6 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r6.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nAllocOverflow> = $r6;

        $r7 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r7.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nThreadUnavailable> = $r7;

        $r8 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r8.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nCriticalNodesTargeted> = $r8;

        $r9 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r9.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nNodesTargeted> = $r9;

        $r10 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r10.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nNodesEvicted> = $r10;

        $r11 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r11.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nDirtyNodesEvicted> = $r11;

        $r12 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r12.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nNodesStripped> = $r12;

        $r13 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r13.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nNodesMutated> = $r13;

        $r14 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r14.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nNodesSkipped> = $r14;

        $r15 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r15.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nLNsEvicted> = $r15;

        $r16 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r16.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nLNsLoaded> = $r16;

        $r17 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r17.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nLNsStored> = $r17;

        $r18 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r18.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nBINsLoaded> = $r18;

        $r19 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r19.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nBINsStored> = $r19;

        $r20 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r20.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicInteger cachedLNs> = $r20;

        $r21 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r21.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicInteger cachedBINs> = $r21;

        $r22 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r22.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicInteger cachedBINDeltas> = $r22;

        $r23 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r23.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicInteger totalBlocks> = $r23;

        $r24 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r24.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicInteger lruSize> = $r24;

        $r25 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $r26 = staticinvoke <com.sleepycat.je.utilint.LoggerUtils: java.util.logging.Logger getLogger(java.lang.Class)>($r25);

        this.<com.sleepycat.je.evictor.OffHeapCache: java.util.logging.Logger logger> = $r26;

        configManager = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.DbConfigManager getConfigManager()>();

        $r27 = <com.sleepycat.je.config.EnvironmentParams: com.sleepycat.je.config.LongConfigParam MAX_OFF_HEAP_MEMORY>;

        $l0 = virtualinvoke configManager.<com.sleepycat.je.dbi.DbConfigManager: long getLong(com.sleepycat.je.config.LongConfigParam)>($r27);

        this.<com.sleepycat.je.evictor.OffHeapCache: long maxMemory> = $l0;

        $l1 = this.<com.sleepycat.je.evictor.OffHeapCache: long maxMemory>;

        $b2 = $l1 cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b2);

        if $b2 != 0 goto label1;

        $r28 = <com.sleepycat.je.evictor.DummyAllocator: com.sleepycat.je.evictor.DummyAllocator INSTANCE>;

        this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapAllocator allocator> = $r28;

        goto label4;

     label1:
        $r29 = new com.sleepycat.je.evictor.OffHeapAllocatorFactory;

        specialinvoke $r29.<com.sleepycat.je.evictor.OffHeapAllocatorFactory: void <init>()>();

        factory = $r29;

        $r30 = virtualinvoke factory.<com.sleepycat.je.evictor.OffHeapAllocatorFactory: com.sleepycat.je.evictor.OffHeapAllocator getDefaultAllocator()>();

        this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapAllocator allocator> = $r30;

     label2:
        goto label4;

     label3:
        $r31 := @caughtexception;

        e = $r31;

        $r32 = new java.lang.IllegalStateException;

        specialinvoke $r32.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to create default allocator for off-heap cache", e);

        throw $r32;

     label4:
        $r33 = <com.sleepycat.je.config.EnvironmentParams: com.sleepycat.je.config.LongConfigParam OFFHEAP_EVICT_BYTES>;

        $l3 = virtualinvoke configManager.<com.sleepycat.je.dbi.DbConfigManager: long getLong(com.sleepycat.je.config.LongConfigParam)>($r33);

        this.<com.sleepycat.je.evictor.OffHeapCache: long evictBytes> = $l3;

        $r34 = <com.sleepycat.je.config.EnvironmentParams: com.sleepycat.je.config.IntConfigParam OFFHEAP_N_LRU_LISTS>;

        $i4 = virtualinvoke configManager.<com.sleepycat.je.dbi.DbConfigManager: int getInt(com.sleepycat.je.config.IntConfigParam)>($r34);

        this.<com.sleepycat.je.evictor.OffHeapCache: int numLRULists> = $i4;

        $r35 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapAllocator allocator>;

        $l5 = this.<com.sleepycat.je.evictor.OffHeapCache: long maxMemory>;

        interfaceinvoke $r35.<com.sleepycat.je.evictor.OffHeapAllocator: void setMaxBytes(long)>($l5);

        $l6 = this.<com.sleepycat.je.evictor.OffHeapCache: long maxMemory>;

        this.<com.sleepycat.je.evictor.OffHeapCache: long memoryLimit> = $l6;

        $i7 = this.<com.sleepycat.je.evictor.OffHeapCache: int numLRULists>;

        $r36 = newarray (com.sleepycat.je.evictor.OffHeapCache$LRUList)[$i7];

        this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapCache$LRUList[] pri1LRUSet> = $r36;

        $i8 = this.<com.sleepycat.je.evictor.OffHeapCache: int numLRULists>;

        $r37 = newarray (com.sleepycat.je.evictor.OffHeapCache$LRUList)[$i8];

        this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapCache$LRUList[] pri2LRUSet> = $r37;

        i#149 = 0;

     label5:
        $i9 = this.<com.sleepycat.je.evictor.OffHeapCache: int numLRULists>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#149);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        if i#149 >= $i9 goto label6;

        $r38 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapCache$LRUList[] pri1LRUSet>;

        $r39 = new com.sleepycat.je.evictor.OffHeapCache$LRUList;

        specialinvoke $r39.<com.sleepycat.je.evictor.OffHeapCache$LRUList: void <init>(com.sleepycat.je.evictor.OffHeapCache,com.sleepycat.je.evictor.OffHeapCache$1)>(this, null);

        $r38[i#149] = $r39;

        $r40 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapCache$LRUList[] pri2LRUSet>;

        $r41 = new com.sleepycat.je.evictor.OffHeapCache$LRUList;

        specialinvoke $r41.<com.sleepycat.je.evictor.OffHeapCache$LRUList: void <init>(com.sleepycat.je.evictor.OffHeapCache,com.sleepycat.je.evictor.OffHeapCache$1)>(this, null);

        $r40[i#149] = $r41;

        i#149 = i#149 + 1;

        goto label5;

     label6:
        this.<com.sleepycat.je.evictor.OffHeapCache: java.util.Map freedBlocks> = null;

        this.<com.sleepycat.je.evictor.OffHeapCache: java.util.Map prevFreedBlocks> = null;

        $r42 = <com.sleepycat.je.config.EnvironmentParams: com.sleepycat.je.config.DurationConfigParam EVICTOR_TERMINATE_TIMEOUT>;

        $i10 = virtualinvoke configManager.<com.sleepycat.je.dbi.DbConfigManager: int getDuration(com.sleepycat.je.config.DurationConfigParam)>($r42);

        this.<com.sleepycat.je.evictor.OffHeapCache: int terminateMillis> = $i10;

        $r43 = <com.sleepycat.je.config.EnvironmentParams: com.sleepycat.je.config.IntConfigParam OFFHEAP_CORE_THREADS>;

        corePoolSize = virtualinvoke configManager.<com.sleepycat.je.dbi.DbConfigManager: int getInt(com.sleepycat.je.config.IntConfigParam)>($r43);

        $r44 = <com.sleepycat.je.config.EnvironmentParams: com.sleepycat.je.config.IntConfigParam OFFHEAP_MAX_THREADS>;

        $i11 = virtualinvoke configManager.<com.sleepycat.je.dbi.DbConfigManager: int getInt(com.sleepycat.je.config.IntConfigParam)>($r44);

        this.<com.sleepycat.je.evictor.OffHeapCache: int maxPoolThreads> = $i11;

        $r45 = <com.sleepycat.je.config.EnvironmentParams: com.sleepycat.je.config.DurationConfigParam OFFHEAP_KEEP_ALIVE>;

        $i12 = virtualinvoke configManager.<com.sleepycat.je.dbi.DbConfigManager: int getDuration(com.sleepycat.je.config.DurationConfigParam)>($r45);

        keepAliveTime = (long) $i12;

        isShared = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: boolean getSharedCache()>();

        $r47 = new java.util.concurrent.ThreadPoolExecutor;

        $i14 = this.<com.sleepycat.je.evictor.OffHeapCache: int maxPoolThreads>;

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r1 = new java.util.concurrent.ArrayBlockingQueue;

        specialinvoke $r1.<java.util.concurrent.ArrayBlockingQueue: void <init>(int)>(1);

        $r49 = new com.sleepycat.je.utilint.StoppableThreadFactory;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isShared);

        if isShared == 0 goto label7;

        $r51 = null;

        goto label8;

     label7:
        $r51 = envImpl;

     label8:
        $r52 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.logging.Logger logger>;

        specialinvoke $r49.<com.sleepycat.je.utilint.StoppableThreadFactory: void <init>(com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String,java.util.logging.Logger)>($r51, "JEOffHeapEvictor", $r52);

        $r53 = new com.sleepycat.je.evictor.OffHeapCache$1;

        specialinvoke $r53.<com.sleepycat.je.evictor.OffHeapCache$1: void <init>(com.sleepycat.je.evictor.OffHeapCache)>(this);

        specialinvoke $r47.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>(corePoolSize, $i14, keepAliveTime, $r0, $r1, $r49, $r53);

        this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.ThreadPoolExecutor evictionPool> = $r47;

        $r54 = <com.sleepycat.je.config.EnvironmentParams: com.sleepycat.je.config.BooleanConfigParam ENV_RUN_OFFHEAP_EVICTOR>;

        $z0 = virtualinvoke configManager.<com.sleepycat.je.dbi.DbConfigManager: boolean getBoolean(com.sleepycat.je.config.BooleanConfigParam)>($r54);

        this.<com.sleepycat.je.evictor.OffHeapCache: boolean runEvictorThreads> = $z0;

        virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: void addConfigObserver(com.sleepycat.je.dbi.EnvConfigObserver)>(this);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public com.sleepycat.je.utilint.StatGroup loadStats(com.sleepycat.je.StatsConfig)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        com.sleepycat.je.StatsConfig config;
        com.sleepycat.je.utilint.StatGroup stats, $r0;
        com.sleepycat.je.utilint.LongStat $r1, $r4, $r7, $r10, $r13, $r16, $r19, $r22, $r25, $r28, $r31, $r34, $r37, $r40, $r43, $r55;
        com.sleepycat.je.utilint.StatDefinition $r2, $r5, $r8, $r11, $r14, $r17, $r20, $r23, $r26, $r29, $r32, $r35, $r38, $r41, $r44, $r47, $r50, $r53, $r56, $r59, $r62;
        java.util.concurrent.atomic.AtomicLong $r3, $r6, $r9, $r12, $r15, $r18, $r21, $r24, $r27, $r30, $r33, $r36, $r39, $r42, $r45, $r64, $r65, $r66, $r67, $r68, $r69, $r70, $r71, $r72, $r73, $r74, $r75, $r76, $r77, $r78;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l18;
        com.sleepycat.je.utilint.IntStat $r46, $r49, $r52, $r58, $r61;
        java.util.concurrent.atomic.AtomicInteger $r48, $r51, $r54, $r60, $r63;
        int $i15, $i16, $i17, $i19, $i20;
        com.sleepycat.je.evictor.OffHeapAllocator $r57;
        boolean $z0;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        config := @parameter0: com.sleepycat.je.StatsConfig;

        $r0 = new com.sleepycat.je.utilint.StatGroup;

        specialinvoke $r0.<com.sleepycat.je.utilint.StatGroup: void <init>(java.lang.String,java.lang.String)>("OffHeap", "Off-heap cache usage and eviction activity.");

        stats = $r0;

        $r1 = new com.sleepycat.je.utilint.LongStat;

        $r2 = <com.sleepycat.je.evictor.OffHeapStatDefinition: com.sleepycat.je.utilint.StatDefinition ALLOC_FAILURE>;

        $r3 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nAllocFailure>;

        $l0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: long get()>();

        specialinvoke $r1.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition,long)>(stats, $r2, $l0);

        $r4 = new com.sleepycat.je.utilint.LongStat;

        $r5 = <com.sleepycat.je.evictor.OffHeapStatDefinition: com.sleepycat.je.utilint.StatDefinition ALLOC_OVERFLOW>;

        $r6 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nAllocOverflow>;

        $l1 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicLong: long get()>();

        specialinvoke $r4.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition,long)>(stats, $r5, $l1);

        $r7 = new com.sleepycat.je.utilint.LongStat;

        $r8 = <com.sleepycat.je.evictor.OffHeapStatDefinition: com.sleepycat.je.utilint.StatDefinition THREAD_UNAVAILABLE>;

        $r9 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nThreadUnavailable>;

        $l2 = virtualinvoke $r9.<java.util.concurrent.atomic.AtomicLong: long get()>();

        specialinvoke $r7.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition,long)>(stats, $r8, $l2);

        $r10 = new com.sleepycat.je.utilint.LongStat;

        $r11 = <com.sleepycat.je.evictor.OffHeapStatDefinition: com.sleepycat.je.utilint.StatDefinition CRITICAL_NODES_TARGETED>;

        $r12 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nCriticalNodesTargeted>;

        $l3 = virtualinvoke $r12.<java.util.concurrent.atomic.AtomicLong: long get()>();

        specialinvoke $r10.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition,long)>(stats, $r11, $l3);

        $r13 = new com.sleepycat.je.utilint.LongStat;

        $r14 = <com.sleepycat.je.evictor.OffHeapStatDefinition: com.sleepycat.je.utilint.StatDefinition NODES_TARGETED>;

        $r15 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nNodesTargeted>;

        $l4 = virtualinvoke $r15.<java.util.concurrent.atomic.AtomicLong: long get()>();

        specialinvoke $r13.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition,long)>(stats, $r14, $l4);

        $r16 = new com.sleepycat.je.utilint.LongStat;

        $r17 = <com.sleepycat.je.evictor.OffHeapStatDefinition: com.sleepycat.je.utilint.StatDefinition NODES_EVICTED>;

        $r18 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nNodesEvicted>;

        $l5 = virtualinvoke $r18.<java.util.concurrent.atomic.AtomicLong: long get()>();

        specialinvoke $r16.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition,long)>(stats, $r17, $l5);

        $r19 = new com.sleepycat.je.utilint.LongStat;

        $r20 = <com.sleepycat.je.evictor.OffHeapStatDefinition: com.sleepycat.je.utilint.StatDefinition DIRTY_NODES_EVICTED>;

        $r21 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nDirtyNodesEvicted>;

        $l6 = virtualinvoke $r21.<java.util.concurrent.atomic.AtomicLong: long get()>();

        specialinvoke $r19.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition,long)>(stats, $r20, $l6);

        $r22 = new com.sleepycat.je.utilint.LongStat;

        $r23 = <com.sleepycat.je.evictor.OffHeapStatDefinition: com.sleepycat.je.utilint.StatDefinition NODES_STRIPPED>;

        $r24 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nNodesStripped>;

        $l7 = virtualinvoke $r24.<java.util.concurrent.atomic.AtomicLong: long get()>();

        specialinvoke $r22.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition,long)>(stats, $r23, $l7);

        $r25 = new com.sleepycat.je.utilint.LongStat;

        $r26 = <com.sleepycat.je.evictor.OffHeapStatDefinition: com.sleepycat.je.utilint.StatDefinition NODES_MUTATED>;

        $r27 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nNodesMutated>;

        $l8 = virtualinvoke $r27.<java.util.concurrent.atomic.AtomicLong: long get()>();

        specialinvoke $r25.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition,long)>(stats, $r26, $l8);

        $r28 = new com.sleepycat.je.utilint.LongStat;

        $r29 = <com.sleepycat.je.evictor.OffHeapStatDefinition: com.sleepycat.je.utilint.StatDefinition NODES_SKIPPED>;

        $r30 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nNodesSkipped>;

        $l9 = virtualinvoke $r30.<java.util.concurrent.atomic.AtomicLong: long get()>();

        specialinvoke $r28.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition,long)>(stats, $r29, $l9);

        $r31 = new com.sleepycat.je.utilint.LongStat;

        $r32 = <com.sleepycat.je.evictor.OffHeapStatDefinition: com.sleepycat.je.utilint.StatDefinition LNS_EVICTED>;

        $r33 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nLNsEvicted>;

        $l10 = virtualinvoke $r33.<java.util.concurrent.atomic.AtomicLong: long get()>();

        specialinvoke $r31.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition,long)>(stats, $r32, $l10);

        $r34 = new com.sleepycat.je.utilint.LongStat;

        $r35 = <com.sleepycat.je.evictor.OffHeapStatDefinition: com.sleepycat.je.utilint.StatDefinition LNS_LOADED>;

        $r36 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nLNsLoaded>;

        $l11 = virtualinvoke $r36.<java.util.concurrent.atomic.AtomicLong: long get()>();

        specialinvoke $r34.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition,long)>(stats, $r35, $l11);

        $r37 = new com.sleepycat.je.utilint.LongStat;

        $r38 = <com.sleepycat.je.evictor.OffHeapStatDefinition: com.sleepycat.je.utilint.StatDefinition LNS_STORED>;

        $r39 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nLNsStored>;

        $l12 = virtualinvoke $r39.<java.util.concurrent.atomic.AtomicLong: long get()>();

        specialinvoke $r37.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition,long)>(stats, $r38, $l12);

        $r40 = new com.sleepycat.je.utilint.LongStat;

        $r41 = <com.sleepycat.je.evictor.OffHeapStatDefinition: com.sleepycat.je.utilint.StatDefinition BINS_LOADED>;

        $r42 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nBINsLoaded>;

        $l13 = virtualinvoke $r42.<java.util.concurrent.atomic.AtomicLong: long get()>();

        specialinvoke $r40.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition,long)>(stats, $r41, $l13);

        $r43 = new com.sleepycat.je.utilint.LongStat;

        $r44 = <com.sleepycat.je.evictor.OffHeapStatDefinition: com.sleepycat.je.utilint.StatDefinition BINS_STORED>;

        $r45 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nBINsStored>;

        $l14 = virtualinvoke $r45.<java.util.concurrent.atomic.AtomicLong: long get()>();

        specialinvoke $r43.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition,long)>(stats, $r44, $l14);

        $r46 = new com.sleepycat.je.utilint.IntStat;

        $r47 = <com.sleepycat.je.evictor.OffHeapStatDefinition: com.sleepycat.je.utilint.StatDefinition CACHED_LNS>;

        $r48 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicInteger cachedLNs>;

        $i15 = virtualinvoke $r48.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        specialinvoke $r46.<com.sleepycat.je.utilint.IntStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition,int)>(stats, $r47, $i15);

        $r49 = new com.sleepycat.je.utilint.IntStat;

        $r50 = <com.sleepycat.je.evictor.OffHeapStatDefinition: com.sleepycat.je.utilint.StatDefinition CACHED_BINS>;

        $r51 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicInteger cachedBINs>;

        $i16 = virtualinvoke $r51.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        specialinvoke $r49.<com.sleepycat.je.utilint.IntStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition,int)>(stats, $r50, $i16);

        $r52 = new com.sleepycat.je.utilint.IntStat;

        $r53 = <com.sleepycat.je.evictor.OffHeapStatDefinition: com.sleepycat.je.utilint.StatDefinition CACHED_BIN_DELTAS>;

        $r54 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicInteger cachedBINDeltas>;

        $i17 = virtualinvoke $r54.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        specialinvoke $r52.<com.sleepycat.je.utilint.IntStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition,int)>(stats, $r53, $i17);

        $r55 = new com.sleepycat.je.utilint.LongStat;

        $r56 = <com.sleepycat.je.evictor.OffHeapStatDefinition: com.sleepycat.je.utilint.StatDefinition TOTAL_BYTES>;

        $r57 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapAllocator allocator>;

        $l18 = interfaceinvoke $r57.<com.sleepycat.je.evictor.OffHeapAllocator: long getUsedBytes()>();

        specialinvoke $r55.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition,long)>(stats, $r56, $l18);

        $r58 = new com.sleepycat.je.utilint.IntStat;

        $r59 = <com.sleepycat.je.evictor.OffHeapStatDefinition: com.sleepycat.je.utilint.StatDefinition TOTAL_BLOCKS>;

        $r60 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicInteger totalBlocks>;

        $i19 = virtualinvoke $r60.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        specialinvoke $r58.<com.sleepycat.je.utilint.IntStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition,int)>(stats, $r59, $i19);

        $r61 = new com.sleepycat.je.utilint.IntStat;

        $r62 = <com.sleepycat.je.evictor.OffHeapStatDefinition: com.sleepycat.je.utilint.StatDefinition LRU_SIZE>;

        $r63 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicInteger lruSize>;

        $i20 = virtualinvoke $r63.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        specialinvoke $r61.<com.sleepycat.je.utilint.IntStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition,int)>(stats, $r62, $i20);

        $z0 = virtualinvoke config.<com.sleepycat.je.StatsConfig: boolean getClear()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r64 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nAllocFailure>;

        virtualinvoke $r64.<java.util.concurrent.atomic.AtomicLong: void set(long)>(0L);

        $r65 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nAllocOverflow>;

        virtualinvoke $r65.<java.util.concurrent.atomic.AtomicLong: void set(long)>(0L);

        $r66 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nThreadUnavailable>;

        virtualinvoke $r66.<java.util.concurrent.atomic.AtomicLong: void set(long)>(0L);

        $r67 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nCriticalNodesTargeted>;

        virtualinvoke $r67.<java.util.concurrent.atomic.AtomicLong: void set(long)>(0L);

        $r68 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nNodesTargeted>;

        virtualinvoke $r68.<java.util.concurrent.atomic.AtomicLong: void set(long)>(0L);

        $r69 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nNodesEvicted>;

        virtualinvoke $r69.<java.util.concurrent.atomic.AtomicLong: void set(long)>(0L);

        $r70 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nDirtyNodesEvicted>;

        virtualinvoke $r70.<java.util.concurrent.atomic.AtomicLong: void set(long)>(0L);

        $r71 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nNodesStripped>;

        virtualinvoke $r71.<java.util.concurrent.atomic.AtomicLong: void set(long)>(0L);

        $r72 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nNodesMutated>;

        virtualinvoke $r72.<java.util.concurrent.atomic.AtomicLong: void set(long)>(0L);

        $r73 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nNodesSkipped>;

        virtualinvoke $r73.<java.util.concurrent.atomic.AtomicLong: void set(long)>(0L);

        $r74 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nLNsEvicted>;

        virtualinvoke $r74.<java.util.concurrent.atomic.AtomicLong: void set(long)>(0L);

        $r75 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nLNsLoaded>;

        virtualinvoke $r75.<java.util.concurrent.atomic.AtomicLong: void set(long)>(0L);

        $r76 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nLNsStored>;

        virtualinvoke $r76.<java.util.concurrent.atomic.AtomicLong: void set(long)>(0L);

        $r77 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nBINsLoaded>;

        virtualinvoke $r77.<java.util.concurrent.atomic.AtomicLong: void set(long)>(0L);

        $r78 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nBINsStored>;

        virtualinvoke $r78.<java.util.concurrent.atomic.AtomicLong: void set(long)>(0L);

     label1:
        return stats;
    }

    public void requestShutdown()
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        java.util.concurrent.atomic.AtomicBoolean $r0;
        java.util.concurrent.ThreadPoolExecutor $r1;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        $r0 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicBoolean shutdownRequested>;

        virtualinvoke $r0.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        $r1 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.ThreadPoolExecutor evictionPool>;

        virtualinvoke $r1.<java.util.concurrent.ThreadPoolExecutor: void shutdown()>();

        return;
    }

    public void doCriticalEviction(boolean)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        boolean backgroundIO, $z0, $z1;
        com.sleepycat.je.evictor.Evictor$EvictionSource $r0;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        backgroundIO := @parameter0: boolean;

        $z0 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: boolean needEviction()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: void wakeUpEvictionThreads()>();

        $z1 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: boolean needCriticalEviction()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label1;

        $r0 = <com.sleepycat.je.evictor.Evictor$EvictionSource: com.sleepycat.je.evictor.Evictor$EvictionSource CRITICAL>;

        specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: void evictBatch(com.sleepycat.je.evictor.Evictor$EvictionSource,boolean)>($r0, backgroundIO);

     label1:
        return;
    }

    private boolean needEviction()
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        boolean $z0, $z1, $z2;
        long $l0, $l2, $l4, $l5, $l6, $l7;
        byte $b1, $b3, $b8;
        com.sleepycat.je.evictor.OffHeapAllocator $r0, $r1;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        $z0 = virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: boolean isEnabled()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $l0 = this.<com.sleepycat.je.evictor.OffHeapCache: long maxMemory>;

        $b1 = $l0 cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 != 0 goto label4;

        $r0 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapAllocator allocator>;

        $l2 = interfaceinvoke $r0.<com.sleepycat.je.evictor.OffHeapAllocator: long getUsedBytes()>();

        $b3 = $l2 cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b3);

        if $b3 < 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r1 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapAllocator allocator>;

        $l4 = interfaceinvoke $r1.<com.sleepycat.je.evictor.OffHeapAllocator: long getUsedBytes()>();

        $l5 = this.<com.sleepycat.je.evictor.OffHeapCache: long evictBytes>;

        $l6 = $l4 + $l5;

        $l7 = this.<com.sleepycat.je.evictor.OffHeapCache: long memoryLimit>;

        $b8 = $l6 cmp $l7;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b8);

        if $b8 < 0 goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        return $z2;
    }

    private void wakeUpEvictionThreads()
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        boolean $z0, $z1;
        java.util.concurrent.atomic.AtomicInteger $r0;
        int $i0, $i1;
        java.util.concurrent.ThreadPoolExecutor $r1;
        com.sleepycat.je.evictor.OffHeapCache$2 $r2;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        $z0 = this.<com.sleepycat.je.evictor.OffHeapCache: boolean runEvictorThreads>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: boolean isEnabled()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

     label1:
        return;

     label2:
        $r0 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicInteger activePoolThreads>;

        $i0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i1 = this.<com.sleepycat.je.evictor.OffHeapCache: int maxPoolThreads>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i0 < $i1 goto label3;

        return;

     label3:
        $r1 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.ThreadPoolExecutor evictionPool>;

        $r2 = new com.sleepycat.je.evictor.OffHeapCache$2;

        specialinvoke $r2.<com.sleepycat.je.evictor.OffHeapCache$2: void <init>(com.sleepycat.je.evictor.OffHeapCache)>(this);

        virtualinvoke $r1.<java.util.concurrent.ThreadPoolExecutor: void execute(java.lang.Runnable)>($r2);

        return;
    }

    private boolean needCriticalEviction()
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        boolean $z0, $z1;
        long $l0, $l2, $l3;
        byte $b1, $b4;
        com.sleepycat.je.evictor.OffHeapAllocator $r0;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        $z0 = virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: boolean isEnabled()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $l0 = this.<com.sleepycat.je.evictor.OffHeapCache: long maxMemory>;

        $b1 = $l0 cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 != 0 goto label2;

        return 0;

     label2:
        $r0 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapAllocator allocator>;

        $l2 = interfaceinvoke $r0.<com.sleepycat.je.evictor.OffHeapAllocator: long getUsedBytes()>();

        $l3 = this.<com.sleepycat.je.evictor.OffHeapCache: long memoryLimit>;

        $b4 = $l2 cmp $l3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b4);

        if $b4 < 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    private void evictBatch(com.sleepycat.je.evictor.Evictor$EvictionSource, boolean)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        com.sleepycat.je.evictor.Evictor$EvictionSource source;
        boolean backgroundIO, pri2#13, $z0, $z1;
        long maxBytesToEvict, $l0, $l1, $l2, $l3, bytesEvicted#11, $l13;
        int entry, maxLruEntries#18, nLruEntries#20, $i5, $i6, $i7, $i8, lruIdx#51, $i9, $i10, $i11, $i12, lruIdx#69;
        com.sleepycat.je.evictor.OffHeapAllocator $r0;
        com.sleepycat.je.evictor.OffHeapCache$LRUList[] $r1, $r3, $r5, $r7;
        byte $b4;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        com.sleepycat.je.evictor.OffHeapCache$LRUList lru#56;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        source := @parameter0: com.sleepycat.je.evictor.Evictor$EvictionSource;

        backgroundIO := @parameter1: boolean;

        $l0 = this.<com.sleepycat.je.evictor.OffHeapCache: long evictBytes>;

        $r0 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapAllocator allocator>;

        $l1 = interfaceinvoke $r0.<com.sleepycat.je.evictor.OffHeapAllocator: long getUsedBytes()>();

        $l2 = this.<com.sleepycat.je.evictor.OffHeapCache: long memoryLimit>;

        $l3 = $l1 - $l2;

        maxBytesToEvict = $l0 + $l3;

        bytesEvicted#11 = 0L;

        pri2#13 = 0;

        $r1 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapCache$LRUList[] pri1LRUSet>;

        maxLruEntries#18 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: int getLRUSize(com.sleepycat.je.evictor.OffHeapCache$LRUList[])>($r1);

        nLruEntries#20 = 0;

     label1:
        $b4 = bytesEvicted#11 cmp maxBytesToEvict;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b4);

        if $b4 >= 0 goto label7;

        $z0 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: boolean needEviction()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label7;

        $r2 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicBoolean shutdownRequested>;

        $z1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label7;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(nLruEntries#20);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(maxLruEntries#18);

        if nLruEntries#20 < maxLruEntries#18 goto label3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(pri2#13);

        if pri2#13 == 0 goto label2;

        goto label7;

     label2:
        pri2#13 = 1;

        $r3 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapCache$LRUList[] pri2LRUSet>;

        maxLruEntries#18 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: int getLRUSize(com.sleepycat.je.evictor.OffHeapCache$LRUList[])>($r3);

        nLruEntries#20 = 0;

     label3:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(pri2#13);

        if pri2#13 == 0 goto label4;

        $i5 = this.<com.sleepycat.je.evictor.OffHeapCache: int nextPri2LRUList>;

        $i6 = $i5 + 1;

        this.<com.sleepycat.je.evictor.OffHeapCache: int nextPri2LRUList> = $i6;

        $i7 = staticinvoke <java.lang.Math: int abs(int)>($i5);

        $i8 = this.<com.sleepycat.je.evictor.OffHeapCache: int numLRULists>;

        lruIdx#51 = $i7 % $i8;

        $r5 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapCache$LRUList[] pri2LRUSet>;

        lru#56 = $r5[lruIdx#51];

        goto label5;

     label4:
        $i9 = this.<com.sleepycat.je.evictor.OffHeapCache: int nextPri1LRUList>;

        $i10 = $i9 + 1;

        this.<com.sleepycat.je.evictor.OffHeapCache: int nextPri1LRUList> = $i10;

        $i11 = staticinvoke <java.lang.Math: int abs(int)>($i9);

        $i12 = this.<com.sleepycat.je.evictor.OffHeapCache: int numLRULists>;

        lruIdx#69 = $i11 % $i12;

        $r7 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapCache$LRUList[] pri1LRUSet>;

        lru#56 = $r7[lruIdx#69];

     label5:
        entry = virtualinvoke lru#56.<com.sleepycat.je.evictor.OffHeapCache$LRUList: int removeFront()>();

        nLruEntries#20 = nLruEntries#20 + 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(entry);

        if entry >= 0 goto label6;

        goto label1;

     label6:
        $l13 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: long evictOne(com.sleepycat.je.evictor.Evictor$EvictionSource,boolean,int,com.sleepycat.je.evictor.OffHeapCache$LRUList,boolean)>(source, backgroundIO, entry, lru#56, pri2#13);

        bytesEvicted#11 = bytesEvicted#11 + $l13;

        goto label1;

     label7:
        return;
    }

    private int getLRUSize(com.sleepycat.je.evictor.OffHeapCache$LRUList[])
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        com.sleepycat.je.evictor.OffHeapCache$LRUList[] listSet, l3;
        int l4, size#2, l5#7, $i0;
        com.sleepycat.je.evictor.OffHeapCache$LRUList l;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        listSet := @parameter0: com.sleepycat.je.evictor.OffHeapCache$LRUList[];

        size#2 = 0;

        l3 = listSet;

        l4 = lengthof l3;

        l5#7 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l5#7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l4);

        if l5#7 >= l4 goto label2;

        l = l3[l5#7];

        $i0 = virtualinvoke l.<com.sleepycat.je.evictor.OffHeapCache$LRUList: int getSize()>();

        size#2 = size#2 + $i0;

        l5#7 = l5#7 + 1;

        goto label1;

     label2:
        return size#2;
    }

    private long evictOne(com.sleepycat.je.evictor.Evictor$EvictionSource, boolean, int, com.sleepycat.je.evictor.OffHeapCache$LRUList, boolean)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        com.sleepycat.je.evictor.Evictor$EvictionSource source, $r1;
        boolean backgroundIO, pri2, useChecksums, dirty, $z0, $z1, $z2, $z3, $z4;
        int entry, chunkIdx, $i2, $i5, index#77, i#79, $i8, $i9;
        com.sleepycat.je.evictor.OffHeapCache$LRUList lru;
        com.sleepycat.je.evictor.OffHeapCache$Chunk chunk;
        com.sleepycat.je.tree.IN in, $r7;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        long l10, memId, nLNBytesEvicted, nBytesEvicted, l22, l11#54, l11#65, l11#73, l11#93, l11#104, l11#115, $l13, l20#164, l20#196, l20#209;
        com.sleepycat.je.tree.BIN bin, residentBIN;
        byte checksumSize, flags, $b14, $b15, $b16, $b17;
        java.lang.Throwable l24, $r23;
        java.util.concurrent.atomic.AtomicLong $r0, $r2, $r5, $r8, $r9, $r10, $r11, $r12, $r13;
        com.sleepycat.je.evictor.OffHeapCache$Chunk[] $r3;
        com.sleepycat.je.tree.IN[] $r4, $r6;
        com.sleepycat.je.tree.Node $r14;
        java.lang.StringBuilder $r15, $r16, $r17;
        java.lang.String $r18;
        com.sleepycat.je.EnvironmentFailureException $r19;
        long[] $r20;
        byte[] $r21;
        com.sleepycat.je.dbi.DatabaseImpl $r22;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        source := @parameter0: com.sleepycat.je.evictor.Evictor$EvictionSource;

        backgroundIO := @parameter1: boolean;

        entry := @parameter2: int;

        lru := @parameter3: com.sleepycat.je.evictor.OffHeapCache$LRUList;

        pri2 := @parameter4: boolean;

        $r0 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nNodesTargeted>;

        virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        $r1 = <com.sleepycat.je.evictor.Evictor$EvictionSource: com.sleepycat.je.evictor.Evictor$EvictionSource CRITICAL>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(source);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if source != $r1 goto label01;

        $r2 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nCriticalNodesTargeted>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

     label01:
        $r3 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapCache$Chunk[] chunks>;

        $i2 = entry / 102400;

        chunk = $r3[$i2];

        chunkIdx = entry % 102400;

        $r4 = chunk.<com.sleepycat.je.evictor.OffHeapCache$Chunk: com.sleepycat.je.tree.IN[] owners>;

        in = $r4[chunkIdx];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(in);

        if in != null goto label02;

        $r5 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nNodesSkipped>;

        virtualinvoke $r5.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        return 0L;

     label02:
        envImpl = virtualinvoke in.<com.sleepycat.je.tree.IN: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke in.<com.sleepycat.je.tree.IN: void latchNoUpdateLRU()>();

     label03:
        $r6 = chunk.<com.sleepycat.je.evictor.OffHeapCache$Chunk: com.sleepycat.je.tree.IN[] owners>;

        $r7 = $r6[chunkIdx];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(in);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r7);

        if in != $r7 goto label04;

        $z0 = virtualinvoke in.<com.sleepycat.je.tree.IN: boolean getInListResident()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label06;

     label04:
        $r8 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nNodesSkipped>;

        virtualinvoke $r8.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        l10 = 0L;

     label05:
        virtualinvoke in.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        return l10;

     label06:
        $z1 = virtualinvoke in.<com.sleepycat.je.tree.IN: boolean isBIN()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label12;

        bin = (com.sleepycat.je.tree.BIN) in;

        $i5 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: int getOffHeapLruId()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(entry);

        if $i5 == entry goto label08;

        $r9 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nNodesSkipped>;

        virtualinvoke $r9.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        l11#54 = 0L;

     label07:
        virtualinvoke in.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        return l11#54;

     label08:
        $z2 = virtualinvoke lru.<com.sleepycat.je.evictor.OffHeapCache$LRUList: boolean contains(com.sleepycat.je.evictor.OffHeapCache$Chunk,int)>(chunk, chunkIdx);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label10;

        $r10 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nNodesSkipped>;

        virtualinvoke $r10.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        l11#65 = 0L;

     label09:
        virtualinvoke in.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        return l11#65;

     label10:
        l11#73 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: long stripLNsFromMainBIN(com.sleepycat.je.tree.BIN,int,boolean)>(bin, entry, pri2);

     label11:
        virtualinvoke in.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        return l11#73;

     label12:
        index#77 = -1;

        i#79 = 0;

     label13:
        $i8 = virtualinvoke in.<com.sleepycat.je.tree.IN: int getNEntries()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#79);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if i#79 >= $i8 goto label15;

        $i9 = virtualinvoke in.<com.sleepycat.je.tree.IN: int getOffHeapBINId(int)>(i#79);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(entry);

        if $i9 != entry goto label14;

        index#77 = i#79;

        goto label15;

     label14:
        i#79 = i#79 + 1;

        goto label13;

     label15:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(index#77);

        if index#77 >= 0 goto label17;

        $r11 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nNodesSkipped>;

        virtualinvoke $r11.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        l11#93 = 0L;

     label16:
        virtualinvoke in.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        return l11#93;

     label17:
        $z3 = virtualinvoke in.<com.sleepycat.je.tree.IN: boolean isOffHeapBINPri2(int)>(index#77);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(pri2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if pri2 == $z3 goto label19;

        $r12 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nNodesSkipped>;

        virtualinvoke $r12.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        l11#104 = 0L;

     label18:
        virtualinvoke in.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        return l11#104;

     label19:
        $z4 = virtualinvoke lru.<com.sleepycat.je.evictor.OffHeapCache$LRUList: boolean contains(com.sleepycat.je.evictor.OffHeapCache$Chunk,int)>(chunk, chunkIdx);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label21;

        $r13 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nNodesSkipped>;

        virtualinvoke $r13.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        l11#115 = 0L;

     label20:
        virtualinvoke in.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        return l11#115;

     label21:
        $r14 = virtualinvoke in.<com.sleepycat.je.tree.IN: com.sleepycat.je.tree.Node getTarget(int)>(index#77);

        residentBIN = (com.sleepycat.je.tree.BIN) $r14;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(residentBIN);

        if residentBIN == null goto label22;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BIN is resident in both caches, id=");

        $l13 = virtualinvoke residentBIN.<com.sleepycat.je.tree.BIN: long getNodeId()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l13);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r19 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedState(com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String)>(envImpl, $r18);

        throw $r19;

     label22:
        useChecksums = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: boolean useOffHeapChecksums()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(useChecksums);

        if useChecksums == 0 goto label23;

        $b14 = 4;

        goto label24;

     label23:
        $b14 = 0;

     label24:
        checksumSize = $b14;

        $r20 = chunk.<com.sleepycat.je.evictor.OffHeapCache$Chunk: long[] memIds>;

        memId = $r20[chunkIdx];

        $r21 = newarray (byte)[1];

        flags = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: byte getByte(long,int,byte[])>(memId, checksumSize, $r21);

        dirty = virtualinvoke in.<com.sleepycat.je.tree.IN: boolean isOffHeapBINDirty(int)>(index#77);

        nLNBytesEvicted = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: long stripLNs(int,boolean,boolean,long,com.sleepycat.je.evictor.OffHeapCache$Chunk,int,com.sleepycat.je.tree.IN,int,boolean)>(entry, pri2, dirty, memId, chunk, chunkIdx, in, index#77, backgroundIO);

        $b15 = nLNBytesEvicted cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b15);

        if $b15 <= 0 goto label26;

        l20#164 = nLNBytesEvicted;

     label25:
        virtualinvoke in.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        return l20#164;

     label26:
        $b16 = flags & 2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b16);

        if $b16 == 0 goto label28;

        $r22 = virtualinvoke in.<com.sleepycat.je.tree.IN: com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        nBytesEvicted = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: long mutateToBINDelta(com.sleepycat.je.dbi.EnvironmentImpl,com.sleepycat.je.dbi.DatabaseImpl,int,boolean,com.sleepycat.je.evictor.OffHeapCache$Chunk,int)>(envImpl, $r22, entry, pri2, chunk, chunkIdx);

        $b17 = nBytesEvicted cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b17);

        if $b17 <= 0 goto label28;

        l22 = nBytesEvicted;

     label27:
        virtualinvoke in.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        return l22;

     label28:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(pri2);

        if pri2 != 0 goto label30;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dirty);

        if dirty == 0 goto label30;

        virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: int moveBack(int,boolean)>(entry, 1);

        virtualinvoke in.<com.sleepycat.je.tree.IN: void setOffHeapBINId(int,int,boolean,boolean)>(index#77, entry, 1, 1);

        l20#196 = 0L;

     label29:
        virtualinvoke in.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        return l20#196;

     label30:
        l20#209 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: long flushAndDiscardBIN(int,boolean,boolean,long,com.sleepycat.je.tree.IN,int,boolean,boolean)>(entry, pri2, dirty, memId, in, index#77, backgroundIO, 0);

     label31:
        virtualinvoke in.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        return l20#209;

     label32:
        $r23 := @caughtexception;

     label33:
        l24 = $r23;

     label34:
        virtualinvoke in.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        throw l24;

        catch java.lang.Throwable from label03 to label05 with label32;
        catch java.lang.Throwable from label06 to label07 with label32;
        catch java.lang.Throwable from label08 to label09 with label32;
        catch java.lang.Throwable from label10 to label11 with label32;
        catch java.lang.Throwable from label12 to label16 with label32;
        catch java.lang.Throwable from label17 to label18 with label32;
        catch java.lang.Throwable from label19 to label20 with label32;
        catch java.lang.Throwable from label21 to label25 with label32;
        catch java.lang.Throwable from label26 to label27 with label32;
        catch java.lang.Throwable from label28 to label29 with label32;
        catch java.lang.Throwable from label30 to label31 with label32;
        catch java.lang.Throwable from label33 to label34 with label32;
    }

    private long stripLNsFromMainBIN(com.sleepycat.je.tree.BIN, int, boolean)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        com.sleepycat.je.tree.BIN bin;
        int entry, lnBytes, nEvicted#2, i#8, $i0, $i3, i#49, $i9;
        boolean pri2, anyNonExpired#6, $z0;
        long nBytesEvicted#4, $l1, $l4, $l6, $l10, $l11;
        byte $b2;
        com.sleepycat.je.dbi.EnvironmentImpl $r0;
        java.util.concurrent.atomic.AtomicLong $r1, $r2, $r3, $r4, $r5;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        bin := @parameter0: com.sleepycat.je.tree.BIN;

        entry := @parameter1: int;

        pri2 := @parameter2: boolean;

        nEvicted#2 = 0;

        nBytesEvicted#4 = 0L;

        anyNonExpired#6 = 0;

        i#8 = 0;

     label01:
        $i0 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: int getNEntries()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#8 >= $i0 goto label05;

        $l1 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: long getOffHeapLNId(int)>(i#8);

        $b2 = $l1 cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b2);

        if $b2 != 0 goto label02;

        goto label04;

     label02:
        $z0 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean isExpired(int)>(i#8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label03;

        $i3 = virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: int freeLN(com.sleepycat.je.tree.BIN,int)>(bin, i#8);

        $l4 = (long) $i3;

        nBytesEvicted#4 = nBytesEvicted#4 + $l4;

        nEvicted#2 = nEvicted#2 + 1;

        goto label04;

     label03:
        anyNonExpired#6 = 1;

     label04:
        i#8 = i#8 + 1;

        goto label01;

     label05:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(nEvicted#2);

        if nEvicted#2 <= 0 goto label08;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(anyNonExpired#6);

        if anyNonExpired#6 == 0 goto label06;

        virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: int moveBack(int,boolean)>(entry, pri2);

        goto label07;

     label06:
        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void setOffHeapLruId(int)>(-1);

        specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: void freeEntry(int)>(entry);

     label07:
        $r0 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r0.<com.sleepycat.je.dbi.EnvironmentImpl: void lazyCompress(com.sleepycat.je.tree.IN)>(bin);

        $r1 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nLNsEvicted>;

        $l6 = (long) nEvicted#2;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>($l6);

        $r2 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nNodesStripped>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        return nBytesEvicted#4;

     label08:
        i#49 = 0;

     label09:
        $i9 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: int getNEntries()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#49);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        if i#49 >= $i9 goto label12;

        lnBytes = virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: int freeLN(com.sleepycat.je.tree.BIN,int)>(bin, i#49);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lnBytes);

        if lnBytes != 0 goto label10;

        goto label11;

     label10:
        $l10 = (long) lnBytes;

        nBytesEvicted#4 = nBytesEvicted#4 + $l10;

        nEvicted#2 = nEvicted#2 + 1;

     label11:
        i#49 = i#49 + 1;

        goto label09;

     label12:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(nEvicted#2);

        if nEvicted#2 <= 0 goto label13;

        $r3 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nLNsEvicted>;

        $l11 = (long) nEvicted#2;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>($l11);

        $r4 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nNodesStripped>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        goto label14;

     label13:
        $r5 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nNodesSkipped>;

        virtualinvoke $r5.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

     label14:
        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void setOffHeapLruId(int)>(-1);

        specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: void freeEntry(int)>(entry);

        return nBytesEvicted#4;
    }

    private byte getByte(long, int, byte[])
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        long memId;
        int offset;
        byte[] tempBuf;
        com.sleepycat.je.evictor.OffHeapAllocator $r0;
        byte $b0;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        memId := @parameter0: long;

        offset := @parameter1: int;

        tempBuf := @parameter2: byte[];

        $r0 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapAllocator allocator>;

        interfaceinvoke $r0.<com.sleepycat.je.evictor.OffHeapAllocator: void copy(long,int,byte[],int,int)>(memId, offset, tempBuf, 0, 1);

        $b0 = tempBuf[0];

        return $b0;
    }

    private long stripLNs(int, boolean, boolean, long, com.sleepycat.je.evictor.OffHeapCache$Chunk, int, com.sleepycat.je.tree.IN, int, boolean)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        int entry, chunkIdx, index, memHeadLen, minExpiration, origNSlots, l26, newSize, $i1, $i2, bufOffset#29, bufOffset#33, $i3, nEvicted#41, i#61, $i5, $i8, $i10, $i13, $i15, $i22, l27#175, $i24, $i28, $i29, $i32, $i34, $i35, $i36, $i37, $i38;
        boolean pri2, dirty, backgroundIO, useChecksums, $z0, $z1, $z2, $z3, $z4, $z6, $z7;
        long memId, newMemId, lnMemId, newMemId, nBytesEvicted#43, $l6, $l9, $l12, nBytesEvicted#112, l27#114, $l14, nBytesEvicted#123, $l16, $l18, $l25, $l31, nBytesEvicted#238, $l33, nBytesEvicted#247, $l39, $l40;
        com.sleepycat.je.evictor.OffHeapCache$Chunk chunk;
        com.sleepycat.je.tree.IN parent;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        byte checksumSize, flags, $b0, bufOffset#25, $b4, $b7, $b11, $b17, $b23, $b30;
        byte[] headBuf, lnBuf, tempBuf, $r2;
        short lnIdsSize, $s26, $s27;
        com.sleepycat.je.tree.BIN bin;
        java.lang.Throwable l29, $r7;
        long[] lnMemIds, l25, $r6, $r16;
        com.sleepycat.je.evictor.OffHeapAllocator $r0, $r5, $r10, $r12, $r13, $r14, $r15;
        java.lang.AssertionError $r1, $r11;
        com.sleepycat.je.dbi.DatabaseImpl $r3;
        java.util.concurrent.atomic.AtomicLong $r8, $r9, $r17, $r18;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        entry := @parameter0: int;

        pri2 := @parameter1: boolean;

        dirty := @parameter2: boolean;

        memId := @parameter3: long;

        chunk := @parameter4: com.sleepycat.je.evictor.OffHeapCache$Chunk;

        chunkIdx := @parameter5: int;

        parent := @parameter6: com.sleepycat.je.tree.IN;

        index := @parameter7: int;

        backgroundIO := @parameter8: boolean;

        envImpl = virtualinvoke parent.<com.sleepycat.je.tree.IN: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        useChecksums = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: boolean useOffHeapChecksums()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(useChecksums);

        if useChecksums == 0 goto label01;

        $b0 = 4;

        goto label02;

     label01:
        $b0 = 0;

     label02:
        checksumSize = $b0;

        headBuf = newarray (byte)[23];

        $r0 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapAllocator allocator>;

        $i1 = lengthof headBuf;

        interfaceinvoke $r0.<com.sleepycat.je.evictor.OffHeapAllocator: void copy(long,int,byte[],int,int)>(memId, checksumSize, headBuf, 0, $i1);

        $i2 = lengthof headBuf;

        memHeadLen = checksumSize + $i2;

        flags = headBuf[0];

        bufOffset#25 = 17;

        minExpiration = staticinvoke <com.sleepycat.je.evictor.OffHeapCache: int getInt(byte[],int)>(headBuf, bufOffset#25);

        bufOffset#29 = bufOffset#25 + 4;

        lnIdsSize = staticinvoke <com.sleepycat.je.evictor.OffHeapCache: short getShort(byte[],int)>(headBuf, bufOffset#29);

        bufOffset#33 = bufOffset#29 + 2;

        $z0 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label03;

        $i3 = lengthof headBuf;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(bufOffset#33);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if bufOffset#33 == $i3 goto label03;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label03:
        nEvicted#41 = 0;

        nBytesEvicted#43 = 0L;

        $b4 = flags & 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b4);

        if $b4 != 0 goto label19;

        $z1 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: boolean isExpired(int,boolean)>(minExpiration, 1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label19;

        $r2 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: byte[] getMemBytes(long)>(memId);

        bin = virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.tree.BIN materializeBIN(com.sleepycat.je.dbi.EnvironmentImpl,byte[])>(envImpl, $r2);

        $r3 = virtualinvoke parent.<com.sleepycat.je.tree.IN: com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void latchNoUpdateLRU(com.sleepycat.je.dbi.DatabaseImpl)>($r3);

     label04:
        i#61 = 0;

     label05:
        $i5 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: int getNEntries()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#61);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if i#61 >= $i5 goto label08;

        $l6 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: long getOffHeapLNId(int)>(i#61);

        $b7 = $l6 cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b7);

        if $b7 == 0 goto label07;

        $z2 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean isExpired(int)>(i#61);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label06;

        goto label07;

     label06:
        $i8 = virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: int freeLN(com.sleepycat.je.tree.BIN,int)>(bin, i#61);

        $l9 = (long) $i8;

        nBytesEvicted#43 = nBytesEvicted#43 + $l9;

        nEvicted#41 = nEvicted#41 + 1;

     label07:
        i#61 = i#61 + 1;

        goto label05;

     label08:
        origNSlots = virtualinvoke bin.<com.sleepycat.je.tree.BIN: int getNEntries()>();

        $z3 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean shouldLogDelta()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label09;

        $z4 = 1;

        goto label10;

     label09:
        $z4 = 0;

     label10:
        virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean compress(boolean,com.sleepycat.je.cleaner.LocalUtilizationTracker)>($z4, null);

        $i10 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: int getNEntries()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origNSlots);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i10);

        if origNSlots != $i10 goto label11;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(nEvicted#41);

        if nEvicted#41 <= 0 goto label14;

     label11:
        $z6 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        newMemId = virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: long serializeBIN(com.sleepycat.je.tree.BIN,boolean)>(bin, $z6);

        $b11 = newMemId cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b11);

        if $b11 != 0 goto label13;

        $l12 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: long flushAndDiscardBIN(int,boolean,boolean,long,com.sleepycat.je.tree.IN,int,boolean,boolean)>(entry, pri2, dirty, memId, parent, index, backgroundIO, 1);

        nBytesEvicted#112 = nBytesEvicted#43 + $l12;

        l27#114 = nBytesEvicted#112;

     label12:
        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void releaseLatch()>();

        return l27#114;

     label13:
        $i13 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: int freeMemory(long)>(memId);

        $l14 = (long) $i13;

        nBytesEvicted#123 = nBytesEvicted#43 + $l14;

        $r5 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapAllocator allocator>;

        $i15 = interfaceinvoke $r5.<com.sleepycat.je.evictor.OffHeapAllocator: int totalSize(long)>(newMemId);

        $l16 = (long) $i15;

        nBytesEvicted#43 = nBytesEvicted#123 - $l16;

        $r6 = chunk.<com.sleepycat.je.evictor.OffHeapCache$Chunk: long[] memIds>;

        $r6[chunkIdx] = newMemId;

     label14:
        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void releaseLatch()>();

        goto label18;

     label15:
        $r7 := @caughtexception;

     label16:
        l29 = $r7;

     label17:
        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void releaseLatch()>();

        throw l29;

     label18:
        $b17 = nBytesEvicted#43 cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b17);

        if $b17 <= 0 goto label19;

        $r8 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nLNsEvicted>;

        $l18 = (long) nEvicted#41;

        virtualinvoke $r8.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>($l18);

        $r9 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nNodesStripped>;

        virtualinvoke $r9.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: int moveBack(int,boolean)>(entry, pri2);

        return nBytesEvicted#43;

     label19:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lnIdsSize);

        if lnIdsSize > 0 goto label20;

        return 0L;

     label20:
        lnBuf = newarray (byte)[lnIdsSize];

        $r10 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapAllocator allocator>;

        $i22 = lengthof lnBuf;

        interfaceinvoke $r10.<com.sleepycat.je.evictor.OffHeapAllocator: void copy(long,int,byte[],int,int)>(memId, memHeadLen, lnBuf, 0, $i22);

        lnMemIds = staticinvoke <com.sleepycat.je.evictor.OffHeapCache: long[] unpackLnMemIds(byte[],int,int)>(lnBuf, 0, lnIdsSize);

        l25 = lnMemIds;

        l26 = lengthof l25;

        l27#175 = 0;

     label21:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l27#175);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l26);

        if l27#175 >= l26 goto label24;

        lnMemId = l25[l27#175];

        $b23 = lnMemId cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b23);

        if $b23 != 0 goto label22;

        goto label23;

     label22:
        $i24 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: int freeLN(long)>(lnMemId);

        $l25 = (long) $i24;

        nBytesEvicted#43 = nBytesEvicted#43 + $l25;

        nEvicted#41 = nEvicted#41 + 1;

     label23:
        l27#175 = l27#175 + 1;

        goto label21;

     label24:
        $z7 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 != 0 goto label25;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(nEvicted#41);

        if nEvicted#41 > 0 goto label25;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label25:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lnIdsSize);

        if lnIdsSize > 100 goto label27;

        tempBuf = newarray (byte)[8];

        $s26 = neg lnIdsSize;

        $s27 = (short) $s26;

        $i28 = memHeadLen - 2;

        specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: void putShort(short,long,int,byte[])>($s27, memId, $i28, tempBuf);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(useChecksums);

        if useChecksums == 0 goto label26;

        specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: void putInt(int,long,int,byte[])>(0, memId, 0, tempBuf);

     label26:
        goto label29;

     label27:
        $r12 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapAllocator allocator>;

        $i29 = interfaceinvoke $r12.<com.sleepycat.je.evictor.OffHeapAllocator: int size(long)>(memId);

        newSize = $i29 - lnIdsSize;

        newMemId = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: long allocateMemory(com.sleepycat.je.dbi.EnvironmentImpl,int)>(envImpl, newSize);

        $b30 = newMemId cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b30);

        if $b30 != 0 goto label28;

        $l31 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: long flushAndDiscardBIN(int,boolean,boolean,long,com.sleepycat.je.tree.IN,int,boolean,boolean)>(entry, pri2, dirty, memId, parent, index, backgroundIO, 1);

        nBytesEvicted#238 = nBytesEvicted#43 + $l31;

        return nBytesEvicted#238;

     label28:
        $r13 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapAllocator allocator>;

        $i32 = interfaceinvoke $r13.<com.sleepycat.je.evictor.OffHeapAllocator: int totalSize(long)>(newMemId);

        $l33 = (long) $i32;

        nBytesEvicted#247 = nBytesEvicted#43 - $l33;

        $r14 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapAllocator allocator>;

        $i34 = lengthof headBuf;

        $i35 = $i34 - 2;

        interfaceinvoke $r14.<com.sleepycat.je.evictor.OffHeapAllocator: void copy(byte[],int,long,int,int)>(headBuf, 0, newMemId, checksumSize, $i35);

        $r15 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapAllocator allocator>;

        $i36 = memHeadLen + lnIdsSize;

        $i37 = newSize - memHeadLen;

        interfaceinvoke $r15.<com.sleepycat.je.evictor.OffHeapAllocator: void copy(long,int,long,int,int)>(memId, $i36, newMemId, memHeadLen, $i37);

        $i38 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: int freeMemory(long)>(memId);

        $l39 = (long) $i38;

        nBytesEvicted#43 = nBytesEvicted#247 + $l39;

        $r16 = chunk.<com.sleepycat.je.evictor.OffHeapCache$Chunk: long[] memIds>;

        $r16[chunkIdx] = newMemId;

     label29:
        $r17 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nLNsEvicted>;

        $l40 = (long) nEvicted#41;

        virtualinvoke $r17.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>($l40);

        $r18 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nNodesStripped>;

        virtualinvoke $r18.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: int moveBack(int,boolean)>(entry, pri2);

        return nBytesEvicted#43;

        catch java.lang.Throwable from label04 to label12 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    private long mutateToBINDelta(com.sleepycat.je.dbi.EnvironmentImpl, com.sleepycat.je.dbi.DatabaseImpl, int, boolean, com.sleepycat.je.evictor.OffHeapCache$Chunk, int)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        int entry, chunkIdx, $i3;
        boolean pri2, $z0;
        com.sleepycat.je.evictor.OffHeapCache$Chunk chunk;
        long memId, newMemId, $l0, nBytesEvicted#36, $l4, nBytesEvicted#44;
        com.sleepycat.je.tree.BIN bin;
        java.lang.Throwable l12, $r3;
        long[] $r0, $r5;
        byte[] $r1;
        byte $b1, $b2;
        java.lang.AssertionError $r2;
        com.sleepycat.je.evictor.OffHeapAllocator $r4;
        java.util.concurrent.atomic.AtomicLong $r6;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        envImpl := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        dbImpl := @parameter1: com.sleepycat.je.dbi.DatabaseImpl;

        entry := @parameter2: int;

        pri2 := @parameter3: boolean;

        chunk := @parameter4: com.sleepycat.je.evictor.OffHeapCache$Chunk;

        chunkIdx := @parameter5: int;

        $r0 = chunk.<com.sleepycat.je.evictor.OffHeapCache$Chunk: long[] memIds>;

        memId = $r0[chunkIdx];

        $r1 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: byte[] getMemBytes(long)>(memId);

        bin = virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.tree.BIN materializeBIN(com.sleepycat.je.dbi.EnvironmentImpl,byte[])>(envImpl, $r1);

        $z0 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $l0 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: long getLastFullLsn()>();

        $b1 = $l0 cmp -1L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void latchNoUpdateLRU(com.sleepycat.je.dbi.DatabaseImpl)>(dbImpl);

     label2:
        newMemId = virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: long serializeBIN(com.sleepycat.je.tree.BIN,boolean)>(bin, 1);

     label3:
        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void releaseLatch()>();

        goto label7;

     label4:
        $r3 := @caughtexception;

     label5:
        l12 = $r3;

     label6:
        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void releaseLatch()>();

        throw l12;

     label7:
        $b2 = newMemId cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b2);

        if $b2 != 0 goto label8;

        return 0L;

     label8:
        nBytesEvicted#36 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: long freeBIN(com.sleepycat.je.dbi.EnvironmentImpl,long,boolean)>(envImpl, memId, 0);

        $r4 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapAllocator allocator>;

        $i3 = interfaceinvoke $r4.<com.sleepycat.je.evictor.OffHeapAllocator: int totalSize(long)>(newMemId);

        $l4 = (long) $i3;

        nBytesEvicted#44 = nBytesEvicted#36 - $l4;

        $r5 = chunk.<com.sleepycat.je.evictor.OffHeapCache$Chunk: long[] memIds>;

        $r5[chunkIdx] = newMemId;

        $r6 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nNodesMutated>;

        virtualinvoke $r6.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: int moveBack(int,boolean)>(entry, pri2);

        return nBytesEvicted#44;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public int moveBack(int, boolean)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        int entry, lruIdx, $i0;
        boolean pri2;
        com.sleepycat.je.evictor.OffHeapCache$LRUList lru, $r1;
        com.sleepycat.je.evictor.OffHeapCache$LRUList[] $r0, $r2;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        entry := @parameter0: int;

        pri2 := @parameter1: boolean;

        $i0 = this.<com.sleepycat.je.evictor.OffHeapCache: int numLRULists>;

        lruIdx = entry % $i0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(pri2);

        if pri2 == 0 goto label1;

        $r0 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapCache$LRUList[] pri2LRUSet>;

        $r1 = $r0[lruIdx];

        goto label2;

     label1:
        $r2 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapCache$LRUList[] pri1LRUSet>;

        $r1 = $r2[lruIdx];

     label2:
        lru = $r1;

        virtualinvoke lru.<com.sleepycat.je.evictor.OffHeapCache$LRUList: void moveBack(int)>(entry);

        return entry;
    }

    private long flushAndDiscardBIN(int, boolean, boolean, long, com.sleepycat.je.tree.IN, int, boolean, boolean)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        int entry, index;
        boolean pri2, dirty, backgroundIO, freeLNs, $z0, $z1, $z2;
        long memId, lsn, $l2;
        com.sleepycat.je.tree.IN parent, $r3;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        com.sleepycat.je.log.entry.INLogEntry logEntry;
        com.sleepycat.je.log.Provisional provisional;
        java.lang.AssertionError $r0;
        com.sleepycat.je.dbi.DatabaseImpl $r1;
        java.util.concurrent.atomic.AtomicLong $r2, $r5;
        com.sleepycat.je.tree.BIN $r4;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        entry := @parameter0: int;

        pri2 := @parameter1: boolean;

        dirty := @parameter2: boolean;

        memId := @parameter3: long;

        parent := @parameter4: com.sleepycat.je.tree.IN;

        index := @parameter5: int;

        backgroundIO := @parameter6: boolean;

        freeLNs := @parameter7: boolean;

        $z0 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke parent.<com.sleepycat.je.tree.IN: boolean isLatchExclusiveOwner()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        envImpl = virtualinvoke parent.<com.sleepycat.je.tree.IN: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dirty);

        if dirty == 0 goto label2;

        logEntry = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.log.entry.INLogEntry createBINLogEntry(long,int,com.sleepycat.je.tree.IN,boolean)>(memId, entry, parent, 0);

        $r1 = virtualinvoke parent.<com.sleepycat.je.tree.IN: com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        provisional = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.log.Provisional coordinateWithCheckpoint(com.sleepycat.je.dbi.DatabaseImpl,int,com.sleepycat.je.tree.IN)>($r1, 65537, parent);

        lsn = staticinvoke <com.sleepycat.je.tree.IN: long logEntry(com.sleepycat.je.log.entry.INLogEntry,com.sleepycat.je.log.Provisional,boolean,com.sleepycat.je.tree.IN)>(logEntry, provisional, backgroundIO, parent);

        virtualinvoke parent.<com.sleepycat.je.tree.IN: void updateEntry(int,long,long,int)>(index, lsn, -1L, 0);

        $r2 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nDirtyNodesEvicted>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        $z2 = virtualinvoke logEntry.<com.sleepycat.je.log.entry.INLogEntry: boolean isPreSerialized()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label2;

        $r3 = virtualinvoke logEntry.<com.sleepycat.je.log.entry.INLogEntry: com.sleepycat.je.tree.IN getMainItem()>();

        $r4 = (com.sleepycat.je.tree.BIN) $r3;

        virtualinvoke $r4.<com.sleepycat.je.tree.BIN: void releaseLatch()>();

     label2:
        $r5 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nNodesEvicted>;

        virtualinvoke $r5.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        virtualinvoke parent.<com.sleepycat.je.tree.IN: void clearOffHeapBINId(int)>(index);

        specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: void remove(int,boolean)>(entry, pri2);

        $l2 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: long freeBIN(com.sleepycat.je.dbi.EnvironmentImpl,long,boolean)>(envImpl, memId, freeLNs);

        return $l2;
    }

    private static long[] unpackLnMemIds(byte[], int, int)
    {
        byte[] buf;
        int startOff, len, endOff, off#9, i#11, $i0, $i1, off#38, i#40, n#46;
        byte n;
        long[] ids;
        boolean $z0, $z1, $z2;
        java.lang.AssertionError $r0, $r1, $r2;
        long $l2;

        buf := @parameter0: byte[];

        startOff := @parameter1: int;

        len := @parameter2: int;

        $z0 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label01;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len);

        if len > 0 goto label01;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label01:
        endOff = startOff + len;

        off#9 = startOff;

        i#11 = 0;

     label02:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(off#9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(endOff);

        if off#9 >= endOff goto label06;

        n = buf[off#9];

        off#9 = off#9 + 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n);

        if n <= 0 goto label03;

        $i0 = n * 8;

        off#9 = off#9 + $i0;

        i#11 = i#11 + n;

        goto label05;

     label03:
        $z1 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label04;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n);

        if n < 0 goto label04;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label04:
        i#11 = i#11 - n;

     label05:
        goto label02;

     label06:
        $i1 = i#11 + 1;

        ids = newarray (long)[$i1];

        off#38 = startOff;

        i#40 = 0;

     label07:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(off#38);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(endOff);

        if off#38 >= endOff goto label12;

        n#46 = buf[off#38];

        off#38 = off#38 + 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n#46);

        if n#46 <= 0 goto label09;

     label08:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n#46);

        if n#46 <= 0 goto label11;

        $l2 = staticinvoke <com.sleepycat.je.evictor.OffHeapCache: long getLong(byte[],int)>(buf, off#38);

        ids[i#40] = $l2;

        off#38 = off#38 + 8;

        i#40 = i#40 + 1;

        n#46 = n#46 + -1;

        goto label08;

     label09:
        $z2 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label10;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n#46);

        if n#46 < 0 goto label10;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label10:
        i#40 = i#40 - n#46;

     label11:
        goto label07;

     label12:
        return ids;
    }

    private static short getShort(byte[], int)
    {
        byte[] buf;
        int offset, $i1, $i2, $i5;
        byte $b0, $b3;
        short $s4, $s6;

        buf := @parameter0: byte[];

        offset := @parameter1: int;

        $b0 = buf[offset];

        $i1 = $b0 << 8;

        $i2 = offset + 1;

        $b3 = buf[$i2];

        $s4 = $b3 & 255;

        $i5 = $i1 | $s4;

        $s6 = (short) $i5;

        return $s6;
    }

    private static int getInt(byte[], int)
    {
        byte[] buf;
        int offset, $i1, $i2, $i5, $i6, $i7, $i10, $i11, $i12, $i15;
        byte $b0, $b3, $b8, $b13;
        short $s4, $s9, $s14;

        buf := @parameter0: byte[];

        offset := @parameter1: int;

        $b0 = buf[offset];

        $i1 = $b0 << 24;

        $i2 = offset + 1;

        $b3 = buf[$i2];

        $s4 = $b3 & 255;

        $i5 = $s4 << 16;

        $i6 = $i1 | $i5;

        $i7 = offset + 2;

        $b8 = buf[$i7];

        $s9 = $b8 & 255;

        $i10 = $s9 << 8;

        $i11 = $i6 | $i10;

        $i12 = offset + 3;

        $b13 = buf[$i12];

        $s14 = $b13 & 255;

        $i15 = $i11 | $s14;

        return $i15;
    }

    private static long getLong(byte[], int)
    {
        byte[] buf;
        int offset, $i3, $i9, $i15, $i21, $i27, $i33, $i39;
        byte $b0, $b4, $b10, $b16, $b22, $b28, $b34, $b40;
        long $l1, $l2, $l5, $l6, $l7, $l8, $l11, $l12, $l13, $l14, $l17, $l18, $l19, $l20, $l23, $l24, $l25, $l26, $l29, $l30, $l31, $l32, $l35, $l36, $l37, $l38, $l41, $l42, $l43;

        buf := @parameter0: byte[];

        offset := @parameter1: int;

        $b0 = buf[offset];

        $l1 = (long) $b0;

        $l2 = $l1 << 56;

        $i3 = offset + 1;

        $b4 = buf[$i3];

        $l5 = (long) $b4;

        $l6 = $l5 & 255L;

        $l7 = $l6 << 48;

        $l8 = $l2 | $l7;

        $i9 = offset + 2;

        $b10 = buf[$i9];

        $l11 = (long) $b10;

        $l12 = $l11 & 255L;

        $l13 = $l12 << 40;

        $l14 = $l8 | $l13;

        $i15 = offset + 3;

        $b16 = buf[$i15];

        $l17 = (long) $b16;

        $l18 = $l17 & 255L;

        $l19 = $l18 << 32;

        $l20 = $l14 | $l19;

        $i21 = offset + 4;

        $b22 = buf[$i21];

        $l23 = (long) $b22;

        $l24 = $l23 & 255L;

        $l25 = $l24 << 24;

        $l26 = $l20 | $l25;

        $i27 = offset + 5;

        $b28 = buf[$i27];

        $l29 = (long) $b28;

        $l30 = $l29 & 255L;

        $l31 = $l30 << 16;

        $l32 = $l26 | $l31;

        $i33 = offset + 6;

        $b34 = buf[$i33];

        $l35 = (long) $b34;

        $l36 = $l35 & 255L;

        $l37 = $l36 << 8;

        $l38 = $l32 | $l37;

        $i39 = offset + 7;

        $b40 = buf[$i39];

        $l41 = (long) $b40;

        $l42 = $l41 & 255L;

        $l43 = $l38 | $l42;

        return $l43;
    }

    private com.sleepycat.je.log.entry.INLogEntry createBINLogEntry(long, int, com.sleepycat.je.tree.IN, boolean)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        long memId, newMemId, $l4, $l5, $l7, $l8, $l11, $l12;
        int entry, origNSlots, $i0, $i1, $i2, $i3, $i6, $i9;
        com.sleepycat.je.tree.IN parent;
        boolean preserveBINInCache, isDelta, canMutateToDelta, hasExpiredSlot, $z0, $z1, logDelta#65, $z4;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        byte[] buf;
        com.sleepycat.je.evictor.OffHeapCache$ParsedBIN pb;
        com.sleepycat.je.tree.BIN bin;
        java.nio.ByteBuffer $r1, $r4, $r8;
        com.sleepycat.je.log.LogEntryType $r2, $r5, $r9;
        com.sleepycat.je.dbi.DatabaseImpl $r6;
        byte $b10;
        com.sleepycat.je.log.entry.INLogEntry $r10, tmp$364721582, tmp$1630910214, tmp$1523182983;
        com.sleepycat.je.log.entry.BINDeltaLogEntry tmp$748970469, tmp$1925100000;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        memId := @parameter0: long;

        entry := @parameter1: int;

        parent := @parameter2: com.sleepycat.je.tree.IN;

        preserveBINInCache := @parameter3: boolean;

        envImpl = virtualinvoke parent.<com.sleepycat.je.tree.IN: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        buf = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: byte[] getMemBytes(long)>(memId);

        pb = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapCache$ParsedBIN parseBINBytes(com.sleepycat.je.dbi.EnvironmentImpl,byte[],boolean,boolean)>(envImpl, buf, 0, 0);

        $i0 = pb.<com.sleepycat.je.evictor.OffHeapCache$ParsedBIN: int flags>;

        $i1 = $i0 & 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 == 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        isDelta = $z0;

        $i2 = pb.<com.sleepycat.je.evictor.OffHeapCache$ParsedBIN: int flags>;

        $i3 = $i2 & 2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 == 0 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        canMutateToDelta = $z1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isDelta);

        if isDelta == 0 goto label05;

        tmp$748970469 = new com.sleepycat.je.log.entry.BINDeltaLogEntry;

        $r1 = pb.<com.sleepycat.je.evictor.OffHeapCache$ParsedBIN: java.nio.ByteBuffer binBytes>;

        $l4 = pb.<com.sleepycat.je.evictor.OffHeapCache$ParsedBIN: long lastFullLsn>;

        $l5 = pb.<com.sleepycat.je.evictor.OffHeapCache$ParsedBIN: long lastDeltaLsn>;

        $r2 = <com.sleepycat.je.log.LogEntryType: com.sleepycat.je.log.LogEntryType LOG_BIN_DELTA>;

        specialinvoke tmp$748970469.<com.sleepycat.je.log.entry.BINDeltaLogEntry: void <init>(java.nio.ByteBuffer,long,long,com.sleepycat.je.log.LogEntryType,com.sleepycat.je.tree.IN)>($r1, $l4, $l5, $r2, parent);

        return tmp$748970469;

     label05:
        $i6 = pb.<com.sleepycat.je.evictor.OffHeapCache$ParsedBIN: int minExpiration>;

        hasExpiredSlot = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: boolean isExpired(int,boolean)>($i6, 1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(hasExpiredSlot);

        if hasExpiredSlot != 0 goto label06;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(canMutateToDelta);

        if canMutateToDelta != 0 goto label06;

        tmp$364721582 = new com.sleepycat.je.log.entry.INLogEntry;

        $r4 = pb.<com.sleepycat.je.evictor.OffHeapCache$ParsedBIN: java.nio.ByteBuffer binBytes>;

        $l7 = pb.<com.sleepycat.je.evictor.OffHeapCache$ParsedBIN: long lastFullLsn>;

        $l8 = pb.<com.sleepycat.je.evictor.OffHeapCache$ParsedBIN: long lastDeltaLsn>;

        $r5 = <com.sleepycat.je.log.LogEntryType: com.sleepycat.je.log.LogEntryType LOG_BIN>;

        specialinvoke tmp$364721582.<com.sleepycat.je.log.entry.INLogEntry: void <init>(java.nio.ByteBuffer,long,long,com.sleepycat.je.log.LogEntryType,com.sleepycat.je.tree.IN)>($r4, $l7, $l8, $r5, parent);

        return tmp$364721582;

     label06:
        bin = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.tree.BIN materializeBIN(com.sleepycat.je.evictor.OffHeapCache$ParsedBIN,boolean)>(pb, 0);

        $r6 = virtualinvoke parent.<com.sleepycat.je.tree.IN: com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void latchNoUpdateLRU(com.sleepycat.je.dbi.DatabaseImpl)>($r6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(hasExpiredSlot);

        if hasExpiredSlot == 0 goto label10;

        origNSlots = virtualinvoke bin.<com.sleepycat.je.tree.BIN: int getNEntries()>();

        virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean compress(boolean,com.sleepycat.je.cleaner.LocalUtilizationTracker)>(0, null);

        logDelta#65 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean shouldLogDelta()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(logDelta#65);

        if logDelta#65 != 0 goto label07;

        virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean compress(boolean,com.sleepycat.je.cleaner.LocalUtilizationTracker)>(1, null);

     label07:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(preserveBINInCache);

        if preserveBINInCache == 0 goto label09;

        $i9 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: int getNEntries()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origNSlots);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        if origNSlots == $i9 goto label09;

        $z4 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        newMemId = virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: long serializeBIN(com.sleepycat.je.tree.BIN,boolean)>(bin, $z4);

        $b10 = newMemId cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b10);

        if $b10 != 0 goto label08;

        tmp$1630910214 = new com.sleepycat.je.log.entry.INLogEntry;

        $r8 = pb.<com.sleepycat.je.evictor.OffHeapCache$ParsedBIN: java.nio.ByteBuffer binBytes>;

        $l11 = pb.<com.sleepycat.je.evictor.OffHeapCache$ParsedBIN: long lastFullLsn>;

        $l12 = pb.<com.sleepycat.je.evictor.OffHeapCache$ParsedBIN: long lastDeltaLsn>;

        $r9 = <com.sleepycat.je.log.LogEntryType: com.sleepycat.je.log.LogEntryType LOG_BIN>;

        specialinvoke tmp$1630910214.<com.sleepycat.je.log.entry.INLogEntry: void <init>(java.nio.ByteBuffer,long,long,com.sleepycat.je.log.LogEntryType,com.sleepycat.je.tree.IN)>($r8, $l11, $l12, $r9, parent);

        return tmp$1630910214;

     label08:
        specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: int freeMemory(long)>(memId);

        specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: void setOwnerAndMemId(int,com.sleepycat.je.tree.IN,long)>(entry, parent, newMemId);

     label09:
        goto label11;

     label10:
        logDelta#65 = 1;

     label11:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(logDelta#65);

        if logDelta#65 == 0 goto label12;

        tmp$1925100000 = new com.sleepycat.je.log.entry.BINDeltaLogEntry;

        $r10 = tmp$1925100000;

        specialinvoke tmp$1925100000.<com.sleepycat.je.log.entry.BINDeltaLogEntry: void <init>(com.sleepycat.je.tree.BIN)>(bin);

        goto label13;

     label12:
        tmp$1523182983 = new com.sleepycat.je.log.entry.INLogEntry;

        $r10 = tmp$1523182983;

        specialinvoke tmp$1523182983.<com.sleepycat.je.log.entry.INLogEntry: void <init>(com.sleepycat.je.tree.IN)>(bin);

     label13:
        return $r10;
    }

    private void remove(int, boolean)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        int entry, lruIdx, $i0;
        boolean pri2;
        com.sleepycat.je.evictor.OffHeapCache$LRUList lru, $r1;
        com.sleepycat.je.evictor.OffHeapCache$LRUList[] $r0, $r2;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        entry := @parameter0: int;

        pri2 := @parameter1: boolean;

        $i0 = this.<com.sleepycat.je.evictor.OffHeapCache: int numLRULists>;

        lruIdx = entry % $i0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(pri2);

        if pri2 == 0 goto label1;

        $r0 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapCache$LRUList[] pri2LRUSet>;

        $r1 = $r0[lruIdx];

        goto label2;

     label1:
        $r2 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapCache$LRUList[] pri1LRUSet>;

        $r1 = $r2[lruIdx];

     label2:
        lru = $r1;

        virtualinvoke lru.<com.sleepycat.je.evictor.OffHeapCache$LRUList: void remove(int)>(entry);

        specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: void freeEntry(int)>(entry);

        return;
    }

    private long freeBIN(com.sleepycat.je.dbi.EnvironmentImpl, long, boolean)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        long memId, lnMemId, size#2, $l2, $l8, $l9;
        boolean freeLNs, useChecksums;
        com.sleepycat.je.evictor.OffHeapCache$ParsedBIN pb;
        long[] l9, $r1;
        int l10, l11#19, $i1, flags#36, $i5, $i7;
        byte checksumSize, $b0, $b3;
        byte[] $r0, $r2;
        java.util.concurrent.atomic.AtomicInteger $r3, $r4;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        envImpl := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        memId := @parameter1: long;

        freeLNs := @parameter2: boolean;

        size#2 = 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(freeLNs);

        if freeLNs == 0 goto label5;

        $r0 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: byte[] getMemBytes(long)>(memId);

        pb = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapCache$ParsedBIN parseBINBytes(com.sleepycat.je.dbi.EnvironmentImpl,byte[],boolean,boolean)>(envImpl, $r0, 0, 1);

        $r1 = pb.<com.sleepycat.je.evictor.OffHeapCache$ParsedBIN: long[] lnMemIds>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 == null goto label4;

        l9 = pb.<com.sleepycat.je.evictor.OffHeapCache$ParsedBIN: long[] lnMemIds>;

        l10 = lengthof l9;

        l11#19 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l11#19);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l10);

        if l11#19 >= l10 goto label4;

        lnMemId = l9[l11#19];

        $b0 = lnMemId cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 != 0 goto label2;

        goto label3;

     label2:
        $i1 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: int freeLN(long)>(lnMemId);

        $l2 = (long) $i1;

        size#2 = size#2 + $l2;

     label3:
        l11#19 = l11#19 + 1;

        goto label1;

     label4:
        flags#36 = pb.<com.sleepycat.je.evictor.OffHeapCache$ParsedBIN: int flags>;

        goto label8;

     label5:
        useChecksums = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: boolean useOffHeapChecksums()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(useChecksums);

        if useChecksums == 0 goto label6;

        $b3 = 4;

        goto label7;

     label6:
        $b3 = 0;

     label7:
        checksumSize = $b3;

        $r2 = newarray (byte)[1];

        flags#36 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: byte getByte(long,int,byte[])>(memId, checksumSize, $r2);

     label8:
        $r3 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicInteger cachedBINs>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        $i5 = flags#36 & 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i5 == 0 goto label9;

        $r4 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicInteger cachedBINDeltas>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

     label9:
        $i7 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: int freeMemory(long)>(memId);

        $l8 = (long) $i7;

        $l9 = size#2 + $l8;

        return $l9;
    }

    private byte[] getMemBytes(long)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        long memId;
        byte[] bytes;
        com.sleepycat.je.evictor.OffHeapAllocator $r0, $r1;
        int $i0, $i1;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        memId := @parameter0: long;

        $r0 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapAllocator allocator>;

        $i0 = interfaceinvoke $r0.<com.sleepycat.je.evictor.OffHeapAllocator: int size(long)>(memId);

        bytes = newarray (byte)[$i0];

        $r1 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapAllocator allocator>;

        $i1 = lengthof bytes;

        interfaceinvoke $r1.<com.sleepycat.je.evictor.OffHeapAllocator: void copy(long,int,byte[],int,int)>(memId, 0, bytes, 0, $i1);

        return bytes;
    }

    private com.sleepycat.je.evictor.OffHeapCache$ParsedBIN parseBINBytes(com.sleepycat.je.dbi.EnvironmentImpl, byte[], boolean, boolean)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        byte[] buf;
        boolean partialBuf, parseLNIds, useChecksums, $z0;
        byte checksumSize, flags, $b0, bufOffset#43;
        int storedChecksum, checksumValue, minExpiration, $i1, $i2, bufOffset#47, bufOffset#51, bufOffset#55, bufOffset#59, bufOffset#72, $i4, bufOffset#85, $i5, $i6;
        java.util.zip.Checksum checksum;
        long lastFullLsn, lastDeltaLsn, $l3;
        short lnIdsSize;
        java.nio.ByteBuffer byteBuf;
        java.lang.AssertionError $r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5;
        java.lang.String $r6;
        com.sleepycat.je.EnvironmentFailureException $r7;
        com.sleepycat.je.evictor.OffHeapCache$ParsedBIN $r8, $r9;
        long[] lnMemIds#79;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        envImpl := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        buf := @parameter1: byte[];

        partialBuf := @parameter2: boolean;

        parseLNIds := @parameter3: boolean;

        $z0 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(partialBuf);

        if partialBuf == 0 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(parseLNIds);

        if parseLNIds == 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        useChecksums = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: boolean useOffHeapChecksums()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(useChecksums);

        if useChecksums == 0 goto label2;

        $b0 = 4;

        goto label3;

     label2:
        $b0 = 0;

     label3:
        checksumSize = $b0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(useChecksums);

        if useChecksums == 0 goto label4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(partialBuf);

        if partialBuf != 0 goto label4;

        storedChecksum = staticinvoke <com.sleepycat.je.evictor.OffHeapCache: int getInt(byte[],int)>(buf, 0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(storedChecksum);

        if storedChecksum == 0 goto label4;

        checksum = staticinvoke <com.sleepycat.je.utilint.Adler32: java.util.zip.Checksum makeChecksum()>();

        $i1 = lengthof buf;

        $i2 = $i1 - checksumSize;

        interfaceinvoke checksum.<java.util.zip.Checksum: void update(byte[],int,int)>(buf, checksumSize, $i2);

        $l3 = interfaceinvoke checksum.<java.util.zip.Checksum: long getValue()>();

        checksumValue = (int) $l3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(storedChecksum);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(checksumValue);

        if storedChecksum == checksumValue goto label4;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Off-heap cache checksum error. Expected ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(storedChecksum);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but got ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(checksumValue);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedState(com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String)>(envImpl, $r6);

        throw $r7;

     label4:
        bufOffset#43 = checksumSize;

        flags = buf[bufOffset#43];

        bufOffset#47 = bufOffset#43 + 1;

        lastFullLsn = staticinvoke <com.sleepycat.je.evictor.OffHeapCache: long getLong(byte[],int)>(buf, bufOffset#47);

        bufOffset#51 = bufOffset#47 + 8;

        lastDeltaLsn = staticinvoke <com.sleepycat.je.evictor.OffHeapCache: long getLong(byte[],int)>(buf, bufOffset#51);

        bufOffset#55 = bufOffset#51 + 8;

        minExpiration = staticinvoke <com.sleepycat.je.evictor.OffHeapCache: int getInt(byte[],int)>(buf, bufOffset#55);

        bufOffset#59 = bufOffset#55 + 4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(partialBuf);

        if partialBuf == 0 goto label5;

        $r8 = new com.sleepycat.je.evictor.OffHeapCache$ParsedBIN;

        specialinvoke $r8.<com.sleepycat.je.evictor.OffHeapCache$ParsedBIN: void <init>(int,long[],long,long,int,java.nio.ByteBuffer)>(flags, null, lastFullLsn, lastDeltaLsn, minExpiration, null);

        return $r8;

     label5:
        lnIdsSize = staticinvoke <com.sleepycat.je.evictor.OffHeapCache: short getShort(byte[],int)>(buf, bufOffset#59);

        bufOffset#72 = bufOffset#59 + 2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lnIdsSize);

        if lnIdsSize <= 0 goto label6;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(parseLNIds);

        if parseLNIds == 0 goto label6;

        lnMemIds#79 = staticinvoke <com.sleepycat.je.evictor.OffHeapCache: long[] unpackLnMemIds(byte[],int,int)>(buf, bufOffset#72, lnIdsSize);

        goto label7;

     label6:
        lnMemIds#79 = null;

     label7:
        $i4 = staticinvoke <java.lang.Math: int abs(int)>(lnIdsSize);

        bufOffset#85 = bufOffset#72 + $i4;

        $i5 = lengthof buf;

        $i6 = $i5 - bufOffset#85;

        byteBuf = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>(buf, bufOffset#85, $i6);

        $r9 = new com.sleepycat.je.evictor.OffHeapCache$ParsedBIN;

        specialinvoke $r9.<com.sleepycat.je.evictor.OffHeapCache$ParsedBIN: void <init>(int,long[],long,long,int,java.nio.ByteBuffer)>(flags, lnMemIds#79, lastFullLsn, lastDeltaLsn, minExpiration, byteBuf);

        return $r9;
    }

    private int freeLN(long)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        long memId;
        java.util.concurrent.atomic.AtomicInteger $r0;
        int $i1;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        memId := @parameter0: long;

        $r0 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicInteger cachedLNs>;

        virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        $i1 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: int freeMemory(long)>(memId);

        return $i1;
    }

    private int freeMemory(long)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        long memId;
        java.util.concurrent.atomic.AtomicInteger $r0;
        com.sleepycat.je.evictor.OffHeapAllocator $r1;
        int $i1;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        memId := @parameter0: long;

        $r0 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicInteger totalBlocks>;

        virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        $r1 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapAllocator allocator>;

        $i1 = interfaceinvoke $r1.<com.sleepycat.je.evictor.OffHeapAllocator: int free(long)>(memId);

        return $i1;
    }

    private void freeEntry(int)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        int entry, chunkIdx, $i0, $i1;
        com.sleepycat.je.evictor.OffHeapCache$Chunk chunk;
        java.lang.Object l4, $r1;
        java.lang.Throwable l5, $r7;
        com.sleepycat.je.evictor.OffHeapCache$Chunk[] $r0;
        com.sleepycat.je.tree.IN[] $r2, $r4;
        com.sleepycat.je.tree.IN $r3;
        int[] $r5;
        java.util.concurrent.atomic.AtomicInteger $r6;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        entry := @parameter0: int;

        $r0 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapCache$Chunk[] chunks>;

        $i0 = entry / 102400;

        chunk = $r0[$i0];

        chunkIdx = entry % 102400;

        $r1 = this.<com.sleepycat.je.evictor.OffHeapCache: java.lang.Object addRemoveEntryMutex>;

        l4 = $r1;

        entermonitor $r1;

     label1:
        $r2 = chunk.<com.sleepycat.je.evictor.OffHeapCache$Chunk: com.sleepycat.je.tree.IN[] owners>;

        $r3 = $r2[chunkIdx];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r3);

        if $r3 != null goto label3;

        exitmonitor l4;

     label2:
        return;

     label3:
        $r4 = chunk.<com.sleepycat.je.evictor.OffHeapCache$Chunk: com.sleepycat.je.tree.IN[] owners>;

        $r4[chunkIdx] = null;

        $r5 = chunk.<com.sleepycat.je.evictor.OffHeapCache$Chunk: int[] next>;

        $i1 = this.<com.sleepycat.je.evictor.OffHeapCache: int firstFreeListEntry>;

        $r5[chunkIdx] = $i1;

        this.<com.sleepycat.je.evictor.OffHeapCache: int firstFreeListEntry> = entry;

        $r6 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicInteger lruSize>;

        virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        exitmonitor l4;

     label4:
        goto label8;

     label5:
        $r7 := @caughtexception;

     label6:
        l5 = $r7;

        exitmonitor l4;

     label7:
        throw l5;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    static com.sleepycat.je.evictor.OffHeapCache$Chunk[] access$000(com.sleepycat.je.evictor.OffHeapCache)
    {
        com.sleepycat.je.evictor.OffHeapCache x0;
        com.sleepycat.je.evictor.OffHeapCache$Chunk[] $r0;

        x0 := @parameter0: com.sleepycat.je.evictor.OffHeapCache;

        $r0 = x0.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapCache$Chunk[] chunks>;

        return $r0;
    }

    private com.sleepycat.je.tree.BIN materializeBIN(com.sleepycat.je.evictor.OffHeapCache$ParsedBIN, boolean)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        com.sleepycat.je.evictor.OffHeapCache$ParsedBIN pb;
        boolean asDelta, $z1, $z2;
        com.sleepycat.je.tree.BIN bin, $r0;
        long lnMemId, $l3, $l4;
        java.nio.ByteBuffer $r2;
        int $i1, $i2, $i5, $i6, i#26, $i7;
        long[] $r4, $r5, $r6;
        byte $b8;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        pb := @parameter0: com.sleepycat.je.evictor.OffHeapCache$ParsedBIN;

        asDelta := @parameter1: boolean;

        $r0 = new com.sleepycat.je.tree.BIN;

        specialinvoke $r0.<com.sleepycat.je.tree.BIN: void <init>()>();

        bin = $r0;

        $r2 = pb.<com.sleepycat.je.evictor.OffHeapCache$ParsedBIN: java.nio.ByteBuffer binBytes>;

        $i1 = pb.<com.sleepycat.je.evictor.OffHeapCache$ParsedBIN: int flags>;

        $i2 = $i1 & 8;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void materialize(java.nio.ByteBuffer,int,boolean,boolean)>($r2, 14, asDelta, $z1);

        $l3 = pb.<com.sleepycat.je.evictor.OffHeapCache$ParsedBIN: long lastFullLsn>;

        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void setLastFullLsn(long)>($l3);

        $l4 = pb.<com.sleepycat.je.evictor.OffHeapCache$ParsedBIN: long lastDeltaLsn>;

        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void setLastDeltaLsn(long)>($l4);

        $i5 = pb.<com.sleepycat.je.evictor.OffHeapCache$ParsedBIN: int flags>;

        $i6 = $i5 & 4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if $i6 == 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void setProhibitNextDelta(boolean)>($z2);

        $r4 = pb.<com.sleepycat.je.evictor.OffHeapCache$ParsedBIN: long[] lnMemIds>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        if $r4 == null goto label8;

        i#26 = 0;

     label5:
        $r5 = pb.<com.sleepycat.je.evictor.OffHeapCache$ParsedBIN: long[] lnMemIds>;

        $i7 = lengthof $r5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#26);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if i#26 >= $i7 goto label8;

        $r6 = pb.<com.sleepycat.je.evictor.OffHeapCache$ParsedBIN: long[] lnMemIds>;

        lnMemId = $r6[i#26];

        $b8 = lnMemId cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b8);

        if $b8 != 0 goto label6;

        goto label7;

     label6:
        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void setOffHeapLNId(int,long)>(i#26, lnMemId);

     label7:
        i#26 = i#26 + 1;

        goto label5;

     label8:
        return bin;
    }

    long serializeBIN(com.sleepycat.je.tree.BIN, boolean)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        com.sleepycat.je.tree.BIN bin;
        boolean asDelta, useChecksums, canMutate, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        byte checksumSize, $b0, flags#23, $b8, bufOffset#74, $b9;
        short lnIdSize;
        int memSize, checksumValue, $i1, $i2, $i3, $i4, $i5, $i6, $i7, bufOffset#79, bufOffset#84, bufOffset#89, $i12, bufOffset#95, bufOffset#99, $i13, $i14, $i15, $i16, $i18;
        long memId, $l10, $l11, $l17;
        byte[] buf;
        java.nio.ByteBuffer byteBuf;
        java.util.zip.Checksum checksum;
        java.lang.AssertionError $r0, $r1, $r2;
        com.sleepycat.je.evictor.OffHeapAllocator $r3;
        java.util.concurrent.atomic.AtomicLong $r4;
        java.util.concurrent.atomic.AtomicInteger $r5, $r6;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        bin := @parameter0: com.sleepycat.je.tree.BIN;

        asDelta := @parameter1: boolean;

        $z0 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label01;

        $z1 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean hasCachedChildren()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label01;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label01:
        $z2 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label02;

        $z3 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label02;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(asDelta);

        if asDelta != 0 goto label02;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label02:
        envImpl = virtualinvoke bin.<com.sleepycat.je.tree.BIN: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        useChecksums = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: boolean useOffHeapChecksums()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(useChecksums);

        if useChecksums == 0 goto label03;

        $b0 = 4;

        goto label04;

     label03:
        $b0 = 0;

     label04:
        checksumSize = $b0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(asDelta);

        if asDelta != 0 goto label05;

        $z4 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean canMutateToBINDelta()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label05;

        $z5 = 1;

        goto label06;

     label05:
        $z5 = 0;

     label06:
        canMutate = $z5;

        flags#23 = 0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(asDelta);

        if asDelta == 0 goto label07;

        flags#23 = flags#23 | 1;

     label07:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(canMutate);

        if canMutate == 0 goto label08;

        flags#23 = flags#23 | 2;

     label08:
        $z6 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean getProhibitNextDelta()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label09;

        flags#23 = flags#23 | 4;

     label09:
        lnIdSize = staticinvoke <com.sleepycat.je.evictor.OffHeapCache: short getPackedLnMemIdSize(com.sleepycat.je.tree.BIN)>(bin);

        $z7 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 != 0 goto label10;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(asDelta);

        if asDelta == 0 goto label10;

        $z8 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 != 0 goto label10;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lnIdSize);

        if lnIdSize == 0 goto label10;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label10:
        $i1 = checksumSize + 1;

        $i2 = $i1 + 8;

        $i3 = $i2 + 8;

        $i4 = $i3 + 4;

        $i5 = $i4 + 2;

        $i6 = $i5 + lnIdSize;

        $i7 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: int getLogSize(boolean)>(asDelta);

        memSize = $i6 + $i7;

        memId = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: long allocateMemory(com.sleepycat.je.dbi.EnvironmentImpl,int)>(envImpl, memSize);

        $b8 = memId cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b8);

        if $b8 != 0 goto label11;

        return 0L;

     label11:
        buf = newarray (byte)[memSize];

        bufOffset#74 = checksumSize;

        $b9 = (byte) flags#23;

        buf[bufOffset#74] = $b9;

        bufOffset#79 = bufOffset#74 + 1;

        $l10 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: long getLastFullLsn()>();

        staticinvoke <com.sleepycat.je.evictor.OffHeapCache: void putLong(long,byte[],int)>($l10, buf, bufOffset#79);

        bufOffset#84 = bufOffset#79 + 8;

        $l11 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: long getLastDeltaLsn()>();

        staticinvoke <com.sleepycat.je.evictor.OffHeapCache: void putLong(long,byte[],int)>($l11, buf, bufOffset#84);

        bufOffset#89 = bufOffset#84 + 8;

        $i12 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: int getMinExpiration(com.sleepycat.je.tree.BIN)>(bin);

        staticinvoke <com.sleepycat.je.evictor.OffHeapCache: void putInt(int,byte[],int)>($i12, buf, bufOffset#89);

        bufOffset#95 = bufOffset#89 + 4;

        staticinvoke <com.sleepycat.je.evictor.OffHeapCache: void putShort(short,byte[],int)>(lnIdSize, buf, bufOffset#95);

        bufOffset#99 = bufOffset#95 + 2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lnIdSize);

        if lnIdSize <= 0 goto label12;

        staticinvoke <com.sleepycat.je.evictor.OffHeapCache: void packLnMemIds(com.sleepycat.je.tree.BIN,byte[],int)>(bin, buf, bufOffset#99);

        bufOffset#99 = bufOffset#99 + lnIdSize;

     label12:
        $i13 = lengthof buf;

        $i14 = $i13 - bufOffset#99;

        byteBuf = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>(buf, bufOffset#99, $i14);

        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void serialize(java.nio.ByteBuffer,boolean,boolean)>(byteBuf, asDelta, 0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(useChecksums);

        if useChecksums == 0 goto label13;

        checksum = staticinvoke <com.sleepycat.je.utilint.Adler32: java.util.zip.Checksum makeChecksum()>();

        $i15 = lengthof buf;

        $i16 = $i15 - checksumSize;

        interfaceinvoke checksum.<java.util.zip.Checksum: void update(byte[],int,int)>(buf, checksumSize, $i16);

        $l17 = interfaceinvoke checksum.<java.util.zip.Checksum: long getValue()>();

        checksumValue = (int) $l17;

        specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: void putInt(int,long,int,byte[])>(checksumValue, memId, 0, buf);

     label13:
        $r3 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapAllocator allocator>;

        $i18 = lengthof buf;

        interfaceinvoke $r3.<com.sleepycat.je.evictor.OffHeapAllocator: void copy(byte[],int,long,int,int)>(buf, 0, memId, 0, $i18);

        $r4 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nBINsStored>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        $r5 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicInteger cachedBINs>;

        virtualinvoke $r5.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(asDelta);

        if asDelta == 0 goto label14;

        $r6 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicInteger cachedBINDeltas>;

        virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

     label14:
        return memId;
    }

    private void setOwnerAndMemId(int, com.sleepycat.je.tree.IN, long)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        int entry, chunkIdx, $i0;
        com.sleepycat.je.tree.IN owner, $r3, $r6;
        long memId;
        com.sleepycat.je.evictor.OffHeapCache$Chunk chunk;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.AssertionError $r0, $r4, $r7;
        com.sleepycat.je.evictor.OffHeapCache$Chunk[] $r1;
        com.sleepycat.je.tree.IN[] $r2, $r5, $r8;
        long[] $r9;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        entry := @parameter0: int;

        owner := @parameter1: com.sleepycat.je.tree.IN;

        memId := @parameter2: long;

        $z0 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke owner.<com.sleepycat.je.tree.IN: boolean isLatchExclusiveOwner()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $r1 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapCache$Chunk[] chunks>;

        $i0 = entry / 102400;

        chunk = $r1[$i0];

        chunkIdx = entry % 102400;

        $z2 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label2;

        $r2 = chunk.<com.sleepycat.je.evictor.OffHeapCache$Chunk: com.sleepycat.je.tree.IN[] owners>;

        $r3 = $r2[chunkIdx];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r3);

        if $r3 != null goto label2;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        $z3 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label3;

        $r5 = chunk.<com.sleepycat.je.evictor.OffHeapCache$Chunk: com.sleepycat.je.tree.IN[] owners>;

        $r6 = $r5[chunkIdx];

        $z4 = virtualinvoke $r6.<com.sleepycat.je.tree.IN: boolean isLatchExclusiveOwner()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label3;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label3:
        $r8 = chunk.<com.sleepycat.je.evictor.OffHeapCache$Chunk: com.sleepycat.je.tree.IN[] owners>;

        $r8[chunkIdx] = owner;

        $r9 = chunk.<com.sleepycat.je.evictor.OffHeapCache$Chunk: long[] memIds>;

        $r9[chunkIdx] = memId;

        return;
    }

    private static void packLnMemIds(com.sleepycat.je.tree.BIN, byte[], int)
    {
        com.sleepycat.je.tree.BIN bin;
        byte[] buf;
        long memId;
        int off#1, nOff#3, off#4, i#8, $i0, $i2, $i3;
        byte n#6, $b1;

        bin := @parameter0: com.sleepycat.je.tree.BIN;

        buf := @parameter1: byte[];

        off#1 := @parameter2: int;

        nOff#3 = off#1;

        off#4 = off#1 + 1;

        n#6 = 0;

        i#8 = 0;

     label1:
        $i0 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: int getNEntries()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#8 >= $i0 goto label8;

        memId = virtualinvoke bin.<com.sleepycat.je.tree.BIN: long getOffHeapLNId(int)>(i#8);

        $b1 = memId cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 == 0 goto label4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n#6);

        if n#6 < 0 goto label2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n#6);

        if n#6 != 127 goto label3;

     label2:
        buf[nOff#3] = n#6;

        nOff#3 = off#4;

        off#4 = off#4 + 1;

        n#6 = 0;

     label3:
        staticinvoke <com.sleepycat.je.evictor.OffHeapCache: void putLong(long,byte[],int)>(memId, buf, off#4);

        off#4 = off#4 + 8;

        $i2 = n#6 + 1;

        n#6 = (byte) $i2;

        goto label7;

     label4:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n#6);

        if n#6 > 0 goto label5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n#6);

        if n#6 != -127 goto label6;

     label5:
        buf[nOff#3] = n#6;

        nOff#3 = off#4;

        off#4 = off#4 + 1;

        n#6 = 0;

     label6:
        $i3 = n#6 - 1;

        n#6 = (byte) $i3;

     label7:
        i#8 = i#8 + 1;

        goto label1;

     label8:
        buf[nOff#3] = n#6;

        return;
    }

    private static void putShort(short, byte[], int)
    {
        short val, $s0;
        byte[] buf;
        int offset, $i2;
        byte $b1, $b3;

        val := @parameter0: short;

        buf := @parameter1: byte[];

        offset := @parameter2: int;

        $s0 = val >> 8;

        $b1 = (byte) $s0;

        buf[offset] = $b1;

        $i2 = offset + 1;

        $b3 = (byte) val;

        buf[$i2] = $b3;

        return;
    }

    private static void putInt(int, byte[], int)
    {
        int val, offset, $i0, $i2, $i3, $i5, $i6, $i8;
        byte[] buf;
        byte $b1, $b4, $b7, $b9;

        val := @parameter0: int;

        buf := @parameter1: byte[];

        offset := @parameter2: int;

        $i0 = val >> 24;

        $b1 = (byte) $i0;

        buf[offset] = $b1;

        $i2 = offset + 1;

        $i3 = val >> 16;

        $b4 = (byte) $i3;

        buf[$i2] = $b4;

        $i5 = offset + 2;

        $i6 = val >> 8;

        $b7 = (byte) $i6;

        buf[$i5] = $b7;

        $i8 = offset + 3;

        $b9 = (byte) val;

        buf[$i8] = $b9;

        return;
    }

    private static void putLong(long, byte[], int)
    {
        long val, $l0, $l4, $l8, $l12, $l16, $l20, $l24;
        byte[] buf;
        int offset, $i1, $i3, $i5, $i7, $i9, $i11, $i13, $i15, $i17, $i19, $i21, $i23, $i25, $i27, $i28;
        byte $b2, $b6, $b10, $b14, $b18, $b22, $b26, $b29;

        val := @parameter0: long;

        buf := @parameter1: byte[];

        offset := @parameter2: int;

        $l0 = val >> 56;

        $i1 = (int) $l0;

        $b2 = (byte) $i1;

        buf[offset] = $b2;

        $i3 = offset + 1;

        $l4 = val >> 48;

        $i5 = (int) $l4;

        $b6 = (byte) $i5;

        buf[$i3] = $b6;

        $i7 = offset + 2;

        $l8 = val >> 40;

        $i9 = (int) $l8;

        $b10 = (byte) $i9;

        buf[$i7] = $b10;

        $i11 = offset + 3;

        $l12 = val >> 32;

        $i13 = (int) $l12;

        $b14 = (byte) $i13;

        buf[$i11] = $b14;

        $i15 = offset + 4;

        $l16 = val >> 24;

        $i17 = (int) $l16;

        $b18 = (byte) $i17;

        buf[$i15] = $b18;

        $i19 = offset + 5;

        $l20 = val >> 16;

        $i21 = (int) $l20;

        $b22 = (byte) $i21;

        buf[$i19] = $b22;

        $i23 = offset + 6;

        $l24 = val >> 8;

        $i25 = (int) $l24;

        $b26 = (byte) $i25;

        buf[$i23] = $b26;

        $i27 = offset + 7;

        $i28 = (int) val;

        $b29 = (byte) $i28;

        buf[$i27] = $b29;

        return;
    }

    private static short getPackedLnMemIdSize(com.sleepycat.je.tree.BIN)
    {
        com.sleepycat.je.tree.BIN bin;
        boolean $z0;
        int off#5, i#9, $i0, $i3, $i4;
        byte n#7, $b2;
        long $l1;
        com.sleepycat.je.EnvironmentFailureException $r0;
        short $s5;

        bin := @parameter0: com.sleepycat.je.tree.BIN;

        $z0 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean hasOffHeapLNs()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label01;

        return 0;

     label01:
        off#5 = 1;

        n#7 = 0;

        i#9 = 0;

     label02:
        $i0 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: int getNEntries()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#9 >= $i0 goto label09;

        $l1 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: long getOffHeapLNId(int)>(i#9);

        $b2 = $l1 cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b2);

        if $b2 == 0 goto label05;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n#7);

        if n#7 < 0 goto label03;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n#7);

        if n#7 != 127 goto label04;

     label03:
        off#5 = off#5 + 1;

        n#7 = 0;

     label04:
        off#5 = off#5 + 8;

        $i3 = n#7 + 1;

        n#7 = (byte) $i3;

        goto label08;

     label05:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n#7);

        if n#7 > 0 goto label06;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n#7);

        if n#7 != -127 goto label07;

     label06:
        off#5 = off#5 + 1;

        n#7 = 0;

     label07:
        $i4 = n#7 - 1;

        n#7 = (byte) $i4;

     label08:
        i#9 = i#9 + 1;

        goto label02;

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(off#5);

        if off#5 <= 32767 goto label10;

        $r0 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedState()>();

        throw $r0;

     label10:
        $s5 = (short) off#5;

        return $s5;
    }

    private long allocateMemory(com.sleepycat.je.dbi.EnvironmentImpl, int)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        int size;
        boolean $z0, $z1;
        long memId#5, $l2, $l3, $l4, $l6;
        com.sleepycat.je.evictor.OffHeapAllocator $r0, $r10, $r13;
        java.util.concurrent.atomic.AtomicInteger $r1;
        java.lang.OutOfMemoryError $r2, e#14;
        java.util.logging.Level $r3;
        java.lang.StringBuilder $r4, $r5, $r7;
        java.lang.String $r6, $r8;
        java.util.concurrent.atomic.AtomicLong $r9, $r12;
        com.sleepycat.je.evictor.OffHeapAllocator$OffHeapOverflowException $r11, e#36;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        envImpl := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        size := @parameter1: int;

        $z0 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: boolean isValid()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        return 0L;

     label1:
        memId#5 = 0L;

     label2:
        $r0 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapAllocator allocator>;

        memId#5 = interfaceinvoke $r0.<com.sleepycat.je.evictor.OffHeapAllocator: long allocate(int)>(size);

        $r1 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicInteger totalBlocks>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

     label3:
        goto label6;

     label4:
        $r2 := @caughtexception;

        e#14 = $r2;

        $r3 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("OutOfMemoryError trying to allocate in the off-heap cache. Continuing, but more problems are likely. Allocator error: ");

        $r6 = virtualinvoke e#14.<java.lang.OutOfMemoryError: java.lang.String getMessage()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.sleepycat.je.utilint.LoggerUtils: void envLogMsg(java.util.logging.Level,com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String)>($r3, envImpl, $r8);

        $r9 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nAllocFailure>;

        virtualinvoke $r9.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        $r10 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapAllocator allocator>;

        $l2 = interfaceinvoke $r10.<com.sleepycat.je.evictor.OffHeapAllocator: long getUsedBytes()>();

        $l3 = this.<com.sleepycat.je.evictor.OffHeapCache: long evictBytes>;

        $l4 = $l2 - $l3;

        this.<com.sleepycat.je.evictor.OffHeapCache: long memoryLimit> = $l4;

        goto label6;

     label5:
        $r11 := @caughtexception;

        e#36 = $r11;

        $r12 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nAllocOverflow>;

        virtualinvoke $r12.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        $r13 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapAllocator allocator>;

        $l6 = interfaceinvoke $r13.<com.sleepycat.je.evictor.OffHeapAllocator: long getUsedBytes()>();

        this.<com.sleepycat.je.evictor.OffHeapCache: long memoryLimit> = $l6;

     label6:
        $z1 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: boolean needEviction()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label7;

        specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: void wakeUpEvictionThreads()>();

     label7:
        return memId#5;

        catch java.lang.OutOfMemoryError from label2 to label3 with label4;
        catch com.sleepycat.je.evictor.OffHeapAllocator$OffHeapOverflowException from label2 to label3 with label5;
    }

    private int getMinExpiration(com.sleepycat.je.tree.BIN)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        com.sleepycat.je.tree.BIN bin;
        int expire, minExpire#2, i#4, $i0, $i1;
        boolean $z0;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        bin := @parameter0: com.sleepycat.je.tree.BIN;

        minExpire#2 = 0;

        i#4 = 0;

     label1:
        $i0 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: int getNEntries()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#4 >= $i0 goto label5;

        expire = virtualinvoke bin.<com.sleepycat.je.tree.BIN: int getExpiration(int)>(i#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(expire);

        if expire != 0 goto label2;

        goto label4;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(minExpire#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(expire);

        if minExpire#2 > expire goto label3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(minExpire#2);

        if minExpire#2 != 0 goto label4;

     label3:
        minExpire#2 = expire;

     label4:
        i#4 = i#4 + 1;

        goto label1;

     label5:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(minExpire#2);

        if minExpire#2 != 0 goto label6;

        return 0;

     label6:
        $z0 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean isExpirationInHours()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label7;

        $i1 = minExpire#2;

        goto label8;

     label7:
        $i1 = minExpire#2 * 24;

     label8:
        return $i1;
    }

    private void putInt(int, long, int, byte[])
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        int val, offset;
        long memId;
        byte[] tempBuf;
        com.sleepycat.je.evictor.OffHeapAllocator $r0;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        val := @parameter0: int;

        memId := @parameter1: long;

        offset := @parameter2: int;

        tempBuf := @parameter3: byte[];

        staticinvoke <com.sleepycat.je.evictor.OffHeapCache: void putInt(int,byte[],int)>(val, tempBuf, 0);

        $r0 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapAllocator allocator>;

        interfaceinvoke $r0.<com.sleepycat.je.evictor.OffHeapAllocator: void copy(byte[],int,long,int,int)>(tempBuf, 0, memId, offset, 4);

        return;
    }

    public com.sleepycat.je.tree.BIN materializeBIN(com.sleepycat.je.dbi.EnvironmentImpl, byte[])
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        byte[] buf;
        com.sleepycat.je.evictor.OffHeapCache$ParsedBIN pb;
        com.sleepycat.je.tree.BIN bin;
        int $i0, $i1;
        boolean $z0;
        java.util.concurrent.atomic.AtomicLong $r2;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        envImpl := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        buf := @parameter1: byte[];

        pb = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapCache$ParsedBIN parseBINBytes(com.sleepycat.je.dbi.EnvironmentImpl,byte[],boolean,boolean)>(envImpl, buf, 0, 1);

        $i0 = pb.<com.sleepycat.je.evictor.OffHeapCache$ParsedBIN: int flags>;

        $i1 = $i0 & 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        bin = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.tree.BIN materializeBIN(com.sleepycat.je.evictor.OffHeapCache$ParsedBIN,boolean)>(pb, $z0);

        $r2 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nBINsLoaded>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        return bin;
    }

    public int freeLN(com.sleepycat.je.tree.BIN, int)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        com.sleepycat.je.tree.BIN bin;
        int index, $i1;
        long memId;
        com.sleepycat.je.tree.LN ln;
        boolean $z0, $z1;
        java.lang.AssertionError $r0;
        byte $b0;
        com.sleepycat.je.tree.Node $r1;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        bin := @parameter0: com.sleepycat.je.tree.BIN;

        index := @parameter1: int;

        $z0 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean isLatchExclusiveOwner()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        memId = virtualinvoke bin.<com.sleepycat.je.tree.BIN: long getOffHeapLNId(int)>(index);

        $b0 = memId cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 != 0 goto label2;

        return 0;

     label2:
        $r1 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: com.sleepycat.je.tree.Node getTarget(int)>(index);

        ln = (com.sleepycat.je.tree.LN) $r1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(ln);

        if ln == null goto label3;

        virtualinvoke ln.<com.sleepycat.je.tree.LN: void setFetchedCold(boolean)>(0);

     label3:
        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void setOffHeapLNId(int,long)>(index, 0L);

        $i1 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: int freeLN(long)>(memId);

        return $i1;
    }

    private void putShort(short, long, int, byte[])
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        short val;
        long memId;
        int offset;
        byte[] tempBuf;
        com.sleepycat.je.evictor.OffHeapAllocator $r0;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        val := @parameter0: short;

        memId := @parameter1: long;

        offset := @parameter2: int;

        tempBuf := @parameter3: byte[];

        staticinvoke <com.sleepycat.je.evictor.OffHeapCache: void putShort(short,byte[],int)>(val, tempBuf, 0);

        $r0 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapAllocator allocator>;

        interfaceinvoke $r0.<com.sleepycat.je.evictor.OffHeapAllocator: void copy(byte[],int,long,int,int)>(tempBuf, 0, memId, offset, 2);

        return;
    }

    public boolean isEnabled()
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        com.sleepycat.je.evictor.DummyAllocator $r0;
        com.sleepycat.je.evictor.OffHeapAllocator $r1;
        boolean $z0;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        $r1 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapAllocator allocator>;

        $r0 = <com.sleepycat.je.evictor.DummyAllocator: com.sleepycat.je.evictor.DummyAllocator INSTANCE>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r1 == $r0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static java.util.concurrent.atomic.AtomicInteger access$400(com.sleepycat.je.evictor.OffHeapCache)
    {
        com.sleepycat.je.evictor.OffHeapCache x0;
        java.util.concurrent.atomic.AtomicInteger $r0;

        x0 := @parameter0: com.sleepycat.je.evictor.OffHeapCache;

        $r0 = x0.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicInteger activePoolThreads>;

        return $r0;
    }

    static void access$500(com.sleepycat.je.evictor.OffHeapCache, com.sleepycat.je.evictor.Evictor$EvictionSource, boolean)
    {
        com.sleepycat.je.evictor.OffHeapCache x0;
        com.sleepycat.je.evictor.Evictor$EvictionSource x1;
        boolean x2;

        x0 := @parameter0: com.sleepycat.je.evictor.OffHeapCache;

        x1 := @parameter1: com.sleepycat.je.evictor.Evictor$EvictionSource;

        x2 := @parameter2: boolean;

        specialinvoke x0.<com.sleepycat.je.evictor.OffHeapCache: void evictBatch(com.sleepycat.je.evictor.Evictor$EvictionSource,boolean)>(x1, x2);

        return;
    }

    public long removeINFromMain(com.sleepycat.je.tree.IN)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        com.sleepycat.je.tree.IN in;
        int level, entry, i#19, $i0, i#65, $i2, $i3;
        com.sleepycat.je.tree.BIN bin, bin;
        java.lang.Throwable l7, $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.AssertionError $r0, $r3, $r4;
        long size#17, $l1, size#61, $l4;
        com.sleepycat.je.tree.Node $r1;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        in := @parameter0: com.sleepycat.je.tree.IN;

        $z0 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label01;

        $z1 = virtualinvoke in.<com.sleepycat.je.tree.IN: boolean isLatchExclusiveOwner()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label01;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label01:
        level = virtualinvoke in.<com.sleepycat.je.tree.IN: int getNormalizedLevel()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(level);

        if level <= 2 goto label02;

        return 0L;

     label02:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(level);

        if level != 2 goto label13;

        $z2 = virtualinvoke in.<com.sleepycat.je.tree.IN: boolean hasOffHeapBINIds()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label03;

        return 0L;

     label03:
        size#17 = 0L;

        i#19 = 0;

     label04:
        $i0 = virtualinvoke in.<com.sleepycat.je.tree.IN: int getNEntries()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#19);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#19 >= $i0 goto label12;

        $r1 = virtualinvoke in.<com.sleepycat.je.tree.IN: com.sleepycat.je.tree.Node getTarget(int)>(i#19);

        bin = (com.sleepycat.je.tree.BIN) $r1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(bin);

        if bin == null goto label05;

        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void latchNoUpdateLRU()>();

     label05:
        $l1 = virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: long freeBIN(com.sleepycat.je.tree.BIN,com.sleepycat.je.tree.IN,int)>(bin, in, i#19);

        size#17 = size#17 + $l1;

     label06:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(bin);

        if bin == null goto label11;

        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void releaseLatch()>();

        goto label11;

     label07:
        $r2 := @caughtexception;

     label08:
        l7 = $r2;

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(bin);

        if bin == null goto label10;

        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void releaseLatch()>();

     label10:
        throw l7;

     label11:
        i#19 = i#19 + 1;

        goto label04;

     label12:
        return size#17;

     label13:
        $z3 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label15;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(level);

        if level != 1 goto label14;

        $z4 = virtualinvoke in.<com.sleepycat.je.tree.IN: boolean isBIN()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label15;

     label14:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label15:
        bin = (com.sleepycat.je.tree.BIN) in;

        entry = virtualinvoke bin.<com.sleepycat.je.tree.BIN: int getOffHeapLruId()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(entry);

        if entry >= 0 goto label17;

        $z5 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 != 0 goto label16;

        $z6 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean hasOffHeapLNs()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label16;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label16:
        return 0L;

     label17:
        size#61 = 0L;

        $z7 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean hasOffHeapLNs()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 == 0 goto label19;

        i#65 = 0;

     label18:
        $i2 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: int getNEntries()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#65);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#65 >= $i2 goto label19;

        $i3 = virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: int freeLN(com.sleepycat.je.tree.BIN,int)>(bin, i#65);

        $l4 = (long) $i3;

        size#61 = size#61 + $l4;

        i#65 = i#65 + 1;

        goto label18;

     label19:
        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void setOffHeapLruId(int)>(-1);

        specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: void remove(int,boolean)>(entry, 0);

        return size#61;

        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    public long freeBIN(com.sleepycat.je.tree.BIN, com.sleepycat.je.tree.IN, int)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        com.sleepycat.je.tree.BIN bin;
        com.sleepycat.je.tree.IN parent, $r2;
        int index, entry;
        boolean pri2, $z0, $z1, $z2, $z3, $z4, $z5;
        long memId, $l1;
        java.lang.AssertionError $r0, $r1, $r3;
        com.sleepycat.je.dbi.EnvironmentImpl $r5;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        bin := @parameter0: com.sleepycat.je.tree.BIN;

        parent := @parameter1: com.sleepycat.je.tree.IN;

        index := @parameter2: int;

        $z0 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke parent.<com.sleepycat.je.tree.IN: boolean isLatchExclusiveOwner()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $z2 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(bin);

        if bin == null goto label2;

        $z3 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean isLatchExclusiveOwner()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label2;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label2:
        entry = virtualinvoke parent.<com.sleepycat.je.tree.IN: int getOffHeapBINId(int)>(index);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(entry);

        if entry >= 0 goto label3;

        return 0L;

     label3:
        $z4 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label4;

        $r2 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.tree.IN getOwner(int)>(entry);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(parent);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        if parent == $r2 goto label4;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label4:
        pri2 = virtualinvoke parent.<com.sleepycat.je.tree.IN: boolean isOffHeapBINPri2(int)>(index);

        memId = virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: long getMemId(int)>(entry);

        virtualinvoke parent.<com.sleepycat.je.tree.IN: void clearOffHeapBINId(int)>(index);

        specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: void remove(int,boolean)>(entry, pri2);

        $r5 = virtualinvoke parent.<com.sleepycat.je.tree.IN: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(bin);

        if bin != null goto label5;

        $z5 = 1;

        goto label6;

     label5:
        $z5 = 0;

     label6:
        $l1 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: long freeBIN(com.sleepycat.je.dbi.EnvironmentImpl,long,boolean)>($r5, memId, $z5);

        return $l1;
    }

    private com.sleepycat.je.tree.IN getOwner(int)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        int entry, chunkIdx, $i0;
        com.sleepycat.je.evictor.OffHeapCache$Chunk chunk;
        com.sleepycat.je.evictor.OffHeapCache$Chunk[] $r0;
        com.sleepycat.je.tree.IN[] $r1;
        com.sleepycat.je.tree.IN $r2;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        entry := @parameter0: int;

        $r0 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapCache$Chunk[] chunks>;

        $i0 = entry / 102400;

        chunk = $r0[$i0];

        chunkIdx = entry % 102400;

        $r1 = chunk.<com.sleepycat.je.evictor.OffHeapCache$Chunk: com.sleepycat.je.tree.IN[] owners>;

        $r2 = $r1[chunkIdx];

        return $r2;
    }

    public long getMemId(int)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        int entry, chunkIdx, $i0;
        com.sleepycat.je.evictor.OffHeapCache$Chunk chunk;
        com.sleepycat.je.evictor.OffHeapCache$Chunk[] $r0;
        long[] $r1;
        long $l1;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        entry := @parameter0: int;

        $r0 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapCache$Chunk[] chunks>;

        $i0 = entry / 102400;

        chunk = $r0[$i0];

        chunkIdx = entry % 102400;

        $r1 = chunk.<com.sleepycat.je.evictor.OffHeapCache$Chunk: long[] memIds>;

        $l1 = $r1[chunkIdx];

        return $l1;
    }

    public void shutdown()
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        java.util.concurrent.TimeUnit $r0;
        java.lang.InterruptedException l2, $r6;
        java.lang.Throwable l3, $r9;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        java.util.concurrent.ThreadPoolExecutor $r2, $r3, $r4, $r7, $r10;
        boolean shutdownFinished#7, shutdownFinished#14;
        int $i0;
        long $l1;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        $r1 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicBoolean shutdownRequested>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        $r2 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.ThreadPoolExecutor evictionPool>;

        virtualinvoke $r2.<java.util.concurrent.ThreadPoolExecutor: void shutdown()>();

        shutdownFinished#7 = 0;

     label1:
        $r3 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.ThreadPoolExecutor evictionPool>;

        $i0 = this.<com.sleepycat.je.evictor.OffHeapCache: int terminateMillis>;

        $l1 = (long) $i0;

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        shutdownFinished#14 = virtualinvoke $r3.<java.util.concurrent.ThreadPoolExecutor: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>($l1, $r0);

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(shutdownFinished#14);

        if shutdownFinished#14 != 0 goto label3;

        $r4 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.ThreadPoolExecutor evictionPool>;

        virtualinvoke $r4.<java.util.concurrent.ThreadPoolExecutor: java.util.List shutdownNow()>();

     label3:
        virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: long clearCache(com.sleepycat.je.dbi.EnvironmentImpl)>(null);

        this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapCache$Chunk[] chunks> = null;

        goto label8;

     label4:
        $r6 := @caughtexception;

        l2 = $r6;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(shutdownFinished#7);

        if shutdownFinished#7 != 0 goto label5;

        $r7 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.ThreadPoolExecutor evictionPool>;

        virtualinvoke $r7.<java.util.concurrent.ThreadPoolExecutor: java.util.List shutdownNow()>();

     label5:
        virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: long clearCache(com.sleepycat.je.dbi.EnvironmentImpl)>(null);

        this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapCache$Chunk[] chunks> = null;

        goto label8;

     label6:
        $r9 := @caughtexception;

        l3 = $r9;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(shutdownFinished#7);

        if shutdownFinished#7 != 0 goto label7;

        $r10 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.ThreadPoolExecutor evictionPool>;

        virtualinvoke $r10.<java.util.concurrent.ThreadPoolExecutor: java.util.List shutdownNow()>();

     label7:
        virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: long clearCache(com.sleepycat.je.dbi.EnvironmentImpl)>(null);

        this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapCache$Chunk[] chunks> = null;

        throw l3;

     label8:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label6;
    }

    public long clearCache(com.sleepycat.je.dbi.EnvironmentImpl)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        com.sleepycat.je.dbi.EnvironmentImpl matchEnv, $r1;
        com.sleepycat.je.evictor.OffHeapCache$Chunk[] myChunks, l5;
        int l6, l7#11, chunkIdx#18;
        com.sleepycat.je.evictor.OffHeapCache$Chunk chunk;
        com.sleepycat.je.tree.IN owner;
        java.lang.Throwable l11, $r2;
        long size#6, $l0;
        com.sleepycat.je.tree.IN[] $r0;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        matchEnv := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        myChunks = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapCache$Chunk[] chunks>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(myChunks);

        if myChunks != null goto label01;

        return 0L;

     label01:
        size#6 = 0L;

        l5 = myChunks;

        l6 = lengthof l5;

        l7#11 = 0;

     label02:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l7#11);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l6);

        if l7#11 >= l6 goto label13;

        chunk = l5[l7#11];

        chunkIdx#18 = 0;

     label03:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(chunkIdx#18);

        if chunkIdx#18 >= 102400 goto label12;

        $r0 = chunk.<com.sleepycat.je.evictor.OffHeapCache$Chunk: com.sleepycat.je.tree.IN[] owners>;

        owner = $r0[chunkIdx#18];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(owner);

        if owner != null goto label04;

        goto label11;

     label04:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(matchEnv);

        if matchEnv == null goto label05;

        $r1 = virtualinvoke owner.<com.sleepycat.je.tree.IN: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(matchEnv);

        if $r1 == matchEnv goto label05;

        goto label11;

     label05:
        virtualinvoke owner.<com.sleepycat.je.tree.IN: void latchNoUpdateLRU()>();

     label06:
        $l0 = virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: long removeINFromMain(com.sleepycat.je.tree.IN)>(owner);

        size#6 = size#6 + $l0;

     label07:
        virtualinvoke owner.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        goto label11;

     label08:
        $r2 := @caughtexception;

     label09:
        l11 = $r2;

     label10:
        virtualinvoke owner.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        throw l11;

     label11:
        chunkIdx#18 = chunkIdx#18 + 1;

        goto label03;

     label12:
        l7#11 = l7#11 + 1;

        goto label02;

     label13:
        return size#6;

        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void doDaemonEviction(boolean)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        boolean backgroundIO, $z0, $z1;
        com.sleepycat.je.evictor.Evictor$EvictionSource $r0;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        backgroundIO := @parameter0: boolean;

        $z0 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: boolean needEviction()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: void wakeUpEvictionThreads()>();

        $z1 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: boolean needCriticalEviction()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label1;

        $r0 = <com.sleepycat.je.evictor.Evictor$EvictionSource: com.sleepycat.je.evictor.Evictor$EvictionSource DAEMON>;

        specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: void evictBatch(com.sleepycat.je.evictor.Evictor$EvictionSource,boolean)>($r0, backgroundIO);

     label1:
        return;
    }

    public long getMaxMemory()
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        long $l0;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        $l0 = this.<com.sleepycat.je.evictor.OffHeapCache: long maxMemory>;

        return $l0;
    }

    public void doManualEvict()
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        com.sleepycat.je.evictor.Evictor$EvictionSource $r0;
        boolean $z0;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        $z0 = virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: boolean isEnabled()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r0 = <com.sleepycat.je.evictor.Evictor$EvictionSource: com.sleepycat.je.evictor.Evictor$EvictionSource MANUAL>;

        specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: void evictBatch(com.sleepycat.je.evictor.Evictor$EvictionSource,boolean)>($r0, 1);

        return;
    }

    public long getUsedMemory()
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        com.sleepycat.je.evictor.OffHeapAllocator $r0;
        long $l0;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        $r0 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapAllocator allocator>;

        $l0 = interfaceinvoke $r0.<com.sleepycat.je.evictor.OffHeapAllocator: long getUsedBytes()>();

        return $l0;
    }

    public com.sleepycat.je.log.entry.INLogEntry createBINLogEntryForCheckpoint(com.sleepycat.je.tree.IN, int)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        com.sleepycat.je.tree.IN parent, $r0;
        int index, entry;
        long memId;
        boolean $z0, $z1;
        java.lang.AssertionError $r1;
        com.sleepycat.je.log.entry.INLogEntry $r2;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        parent := @parameter0: com.sleepycat.je.tree.IN;

        index := @parameter1: int;

        entry = virtualinvoke parent.<com.sleepycat.je.tree.IN: int getOffHeapBINId(int)>(index);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(entry);

        if entry < 0 goto label1;

        $z0 = virtualinvoke parent.<com.sleepycat.je.tree.IN: boolean isOffHeapBINDirty(int)>(index);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label2;

     label1:
        return null;

     label2:
        $z1 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label3;

        $r0 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.tree.IN getOwner(int)>(entry);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(parent);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if parent == $r0 goto label3;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label3:
        memId = virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: long getMemId(int)>(entry);

        $r2 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.log.entry.INLogEntry createBINLogEntry(long,int,com.sleepycat.je.tree.IN,boolean)>(memId, entry, parent, 1);

        return $r2;
    }

    public void postBINLog(com.sleepycat.je.tree.IN, int, com.sleepycat.je.log.entry.INLogEntry, long)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        com.sleepycat.je.tree.IN parent, $r5;
        int index, entry, $i1, $i2, $i3, $i4, bufOffset#57, bufOffset#81, bufOffset#86, bufOffset#91, $i7, $i8, $i9, $i10;
        com.sleepycat.je.log.entry.INLogEntry logEntry;
        long newLsn, memId, $l6;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        boolean useChecksums, isDelta, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        byte checksumSize, $b0, flags#68, flags#76, $b5;
        com.sleepycat.je.tree.BIN bin, $r4;
        byte[] buf;
        java.lang.AssertionError $r0, $r1, $r2, $r3, $r7;
        com.sleepycat.je.evictor.OffHeapAllocator $r6, $r8;
        com.sleepycat.je.evictor.OffHeapCache$LRUList[] $r9;
        com.sleepycat.je.evictor.OffHeapCache$LRUList $r10;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        parent := @parameter0: com.sleepycat.je.tree.IN;

        index := @parameter1: int;

        logEntry := @parameter2: com.sleepycat.je.log.entry.INLogEntry;

        newLsn := @parameter3: long;

        $z0 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label01;

        $z1 = virtualinvoke parent.<com.sleepycat.je.tree.IN: boolean isLatchExclusiveOwner()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label01;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label01:
        $z2 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label02;

        $z3 = virtualinvoke parent.<com.sleepycat.je.tree.IN: boolean getInListResident()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label02;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label02:
        envImpl = virtualinvoke parent.<com.sleepycat.je.tree.IN: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        useChecksums = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: boolean useOffHeapChecksums()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(useChecksums);

        if useChecksums == 0 goto label03;

        $b0 = 4;

        goto label04;

     label03:
        $b0 = 0;

     label04:
        checksumSize = $b0;

        isDelta = virtualinvoke logEntry.<com.sleepycat.je.log.entry.INLogEntry: boolean isBINDelta()>();

        entry = virtualinvoke parent.<com.sleepycat.je.tree.IN: int getOffHeapBINId(int)>(index);

        $z4 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label05;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(entry);

        if entry >= 0 goto label05;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label05:
        $z5 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 != 0 goto label06;

        $z6 = virtualinvoke parent.<com.sleepycat.je.tree.IN: boolean isOffHeapBINDirty(int)>(index);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 != 0 goto label06;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label06:
        $z7 = virtualinvoke logEntry.<com.sleepycat.je.log.entry.INLogEntry: boolean isPreSerialized()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 == 0 goto label07;

        $r4 = null;

        goto label08;

     label07:
        $r5 = virtualinvoke logEntry.<com.sleepycat.je.log.entry.INLogEntry: com.sleepycat.je.tree.IN getMainItem()>();

        $r4 = (com.sleepycat.je.tree.BIN) $r5;

     label08:
        bin = $r4;

        memId = virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: long getMemId(int)>(entry);

        $i1 = checksumSize + 1;

        $i2 = $i1 + 8;

        $i3 = $i2 + 8;

        buf = newarray (byte)[$i3];

        $r6 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapAllocator allocator>;

        $i4 = lengthof buf;

        interfaceinvoke $r6.<com.sleepycat.je.evictor.OffHeapAllocator: void copy(long,int,byte[],int,int)>(memId, 0, buf, 0, $i4);

        bufOffset#57 = 0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(useChecksums);

        if useChecksums == 0 goto label09;

        staticinvoke <com.sleepycat.je.evictor.OffHeapCache: void putInt(int,byte[],int)>(0, buf, 0);

        bufOffset#57 = bufOffset#57 + checksumSize;

     label09:
        flags#68 = buf[bufOffset#57];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isDelta);

        if isDelta != 0 goto label10;

        flags#68 = flags#68 | 8;

     label10:
        flags#76 = flags#68 & -5;

        $b5 = (byte) flags#76;

        buf[bufOffset#57] = $b5;

        bufOffset#81 = bufOffset#57 + 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isDelta);

        if isDelta != 0 goto label11;

        staticinvoke <com.sleepycat.je.evictor.OffHeapCache: void putLong(long,byte[],int)>(newLsn, buf, bufOffset#81);

     label11:
        bufOffset#86 = bufOffset#81 + 8;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isDelta);

        if isDelta == 0 goto label12;

        $l6 = newLsn;

        goto label13;

     label12:
        $l6 = -1L;

     label13:
        staticinvoke <com.sleepycat.je.evictor.OffHeapCache: void putLong(long,byte[],int)>($l6, buf, bufOffset#86);

        bufOffset#91 = bufOffset#86 + 8;

        $z8 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 != 0 goto label14;

        $i7 = lengthof buf;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(bufOffset#91);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if bufOffset#91 == $i7 goto label14;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label14:
        $r8 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapAllocator allocator>;

        $i8 = lengthof buf;

        interfaceinvoke $r8.<com.sleepycat.je.evictor.OffHeapAllocator: void copy(byte[],int,long,int,int)>(buf, 0, memId, 0, $i8);

        $z9 = virtualinvoke parent.<com.sleepycat.je.tree.IN: boolean isOffHeapBINPri2(int)>(index);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 == 0 goto label15;

        $r9 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapCache$LRUList[] pri2LRUSet>;

        $i9 = this.<com.sleepycat.je.evictor.OffHeapCache: int numLRULists>;

        $i10 = entry % $i9;

        $r10 = $r9[$i10];

        virtualinvoke $r10.<com.sleepycat.je.evictor.OffHeapCache$LRUList: void remove(int)>(entry);

        virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: int moveBack(int,boolean)>(entry, 0);

     label15:
        virtualinvoke parent.<com.sleepycat.je.tree.IN: void setOffHeapBINId(int,int,boolean,boolean)>(index, entry, 0, 0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(bin);

        if bin == null goto label16;

        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void releaseLatch()>();

     label16:
        return;
    }

    public boolean storeEvictedBIN(com.sleepycat.je.tree.BIN, com.sleepycat.je.tree.IN, int)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        com.sleepycat.je.tree.BIN bin;
        com.sleepycat.je.tree.IN parent;
        int index, $i0, entry#59;
        com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        long memId;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        java.lang.AssertionError $r0, $r1, $r2, $r3, $r5, $r6;
        com.sleepycat.je.tree.Node $r4;
        com.sleepycat.je.dbi.DbType $r7;
        byte $b1;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        bin := @parameter0: com.sleepycat.je.tree.BIN;

        parent := @parameter1: com.sleepycat.je.tree.IN;

        index := @parameter2: int;

        $z0 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label01;

        $z1 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean isLatchExclusiveOwner()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label01;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label01:
        $z2 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label02;

        $z3 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean getInListResident()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label02;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label02:
        $z4 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label03;

        $z5 = virtualinvoke parent.<com.sleepycat.je.tree.IN: boolean isLatchExclusiveOwner()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 != 0 goto label03;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label03:
        $z6 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 != 0 goto label04;

        $z7 = virtualinvoke parent.<com.sleepycat.je.tree.IN: boolean getInListResident()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 != 0 goto label04;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label04:
        $z8 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 != 0 goto label05;

        $r4 = virtualinvoke parent.<com.sleepycat.je.tree.IN: com.sleepycat.je.tree.Node getTarget(int)>(index);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(bin);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        if bin == $r4 goto label05;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label05:
        $z9 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 != 0 goto label06;

        $i0 = virtualinvoke parent.<com.sleepycat.je.tree.IN: int getOffHeapBINId(int)>(index);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 < 0 goto label06;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label06:
        dbImpl = virtualinvoke bin.<com.sleepycat.je.tree.BIN: com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        $z10 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean getFetchedCold()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z10);

        if $z10 == 0 goto label07;

        $z11 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean getFetchedColdOffHeap()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z11);

        if $z11 != 0 goto label07;

        $z12 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean getDirty()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z12);

        if $z12 == 0 goto label08;

     label07:
        $z13 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: boolean isDeferredWriteMode()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z13);

        if $z13 != 0 goto label08;

        $r7 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.DbType getDbType()>();

        $z14 = virtualinvoke $r7.<com.sleepycat.je.dbi.DbType: boolean isInternal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z14);

        if $z14 == 0 goto label09;

     label08:
        return 0;

     label09:
        $z15 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        memId = virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: long serializeBIN(com.sleepycat.je.tree.BIN,boolean)>(bin, $z15);

        $b1 = memId cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 != 0 goto label10;

        return 0;

     label10:
        entry#59 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: int getOffHeapLruId()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(entry#59);

        if entry#59 < 0 goto label11;

        specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: void setOwnerAndMemId(int,com.sleepycat.je.tree.IN,long)>(entry#59, parent, memId);

        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void clearOffHeapLNIds()>();

        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void setOffHeapLruId(int)>(-1);

        goto label12;

     label11:
        entry#59 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: int addBack(boolean,com.sleepycat.je.tree.IN,long)>(0, parent, memId);

     label12:
        $z16 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean getDirty()>();

        virtualinvoke parent.<com.sleepycat.je.tree.IN: void setOffHeapBINId(int,int,boolean,boolean)>(index, entry#59, 0, $z16);

        return 1;
    }

    void flushAndDiscardBINChildren(com.sleepycat.je.tree.IN, boolean)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        com.sleepycat.je.tree.IN in;
        boolean backgroundIO, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        int entry, $i0, i#20, $i1;
        java.lang.AssertionError $r0, $r1, $r2;
        long $l2;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        in := @parameter0: com.sleepycat.je.tree.IN;

        backgroundIO := @parameter1: boolean;

        $z0 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke in.<com.sleepycat.je.tree.IN: boolean isLatchExclusiveOwner()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $z2 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label2;

        $z3 = virtualinvoke in.<com.sleepycat.je.tree.IN: boolean getInListResident()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label2;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label2:
        $z4 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label3;

        $i0 = virtualinvoke in.<com.sleepycat.je.tree.IN: int getNormalizedLevel()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 == 2 goto label3;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label3:
        $z5 = virtualinvoke in.<com.sleepycat.je.tree.IN: boolean hasOffHeapBINIds()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 != 0 goto label4;

        return;

     label4:
        i#20 = 0;

     label5:
        $i1 = virtualinvoke in.<com.sleepycat.je.tree.IN: int getNEntries()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#20);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#20 >= $i1 goto label8;

        entry = virtualinvoke in.<com.sleepycat.je.tree.IN: int getOffHeapBINId(int)>(i#20);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(entry);

        if entry >= 0 goto label6;

        goto label7;

     label6:
        $z6 = virtualinvoke in.<com.sleepycat.je.tree.IN: boolean isOffHeapBINPri2(int)>(i#20);

        $z7 = virtualinvoke in.<com.sleepycat.je.tree.IN: boolean isOffHeapBINDirty(int)>(i#20);

        $l2 = virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: long getMemId(int)>(entry);

        specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: long flushAndDiscardBIN(int,boolean,boolean,long,com.sleepycat.je.tree.IN,int,boolean,boolean)>(entry, $z6, $z7, $l2, in, i#20, backgroundIO, 1);

     label7:
        i#20 = i#20 + 1;

        goto label5;

     label8:
        return;
    }

    private int addBack(boolean, com.sleepycat.je.tree.IN, long)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        boolean pri2, $z0, $z1;
        com.sleepycat.je.tree.IN owner;
        long memId;
        int entry, lruIdx, $i0;
        com.sleepycat.je.evictor.OffHeapCache$LRUList lru, $r2;
        java.lang.AssertionError $r0;
        com.sleepycat.je.evictor.OffHeapCache$LRUList[] $r1, $r3;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        pri2 := @parameter0: boolean;

        owner := @parameter1: com.sleepycat.je.tree.IN;

        memId := @parameter2: long;

        $z0 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke owner.<com.sleepycat.je.tree.IN: boolean isLatchExclusiveOwner()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        entry = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: int allocateEntry()>();

        $i0 = this.<com.sleepycat.je.evictor.OffHeapCache: int numLRULists>;

        lruIdx = entry % $i0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(pri2);

        if pri2 == 0 goto label2;

        $r1 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapCache$LRUList[] pri2LRUSet>;

        $r2 = $r1[lruIdx];

        goto label3;

     label2:
        $r3 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapCache$LRUList[] pri1LRUSet>;

        $r2 = $r3[lruIdx];

     label3:
        lru = $r2;

        virtualinvoke lru.<com.sleepycat.je.evictor.OffHeapCache$LRUList: void addBack(int,com.sleepycat.je.tree.IN,long)>(entry, owner, memId);

        return entry;
    }

    private int allocateEntry()
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        java.lang.Object l1, $r0;
        int entry, chunkIdx, nOldChunks, entry, $i0, $i1, $i2, $i5, nextFree#43, nextFree#45, i#53, $i6, $i7;
        com.sleepycat.je.evictor.OffHeapCache$Chunk chunk, newChunk, $r5;
        int[] next, $r2, $r3;
        com.sleepycat.je.evictor.OffHeapCache$Chunk[] newChunks, $r1, $r6, $r7, $r8;
        java.lang.Throwable l8, $r10;
        java.util.concurrent.atomic.AtomicInteger $r4, $r9;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        $r0 = this.<com.sleepycat.je.evictor.OffHeapCache: java.lang.Object addRemoveEntryMutex>;

        l1 = $r0;

        entermonitor $r0;

     label01:
        $i0 = this.<com.sleepycat.je.evictor.OffHeapCache: int firstFreeListEntry>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 < 0 goto label03;

        entry = this.<com.sleepycat.je.evictor.OffHeapCache: int firstFreeListEntry>;

        $r1 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapCache$Chunk[] chunks>;

        $i1 = entry / 102400;

        chunk = $r1[$i1];

        chunkIdx = entry % 102400;

        $r2 = chunk.<com.sleepycat.je.evictor.OffHeapCache$Chunk: int[] next>;

        $i2 = $r2[chunkIdx];

        this.<com.sleepycat.je.evictor.OffHeapCache: int firstFreeListEntry> = $i2;

        $r3 = chunk.<com.sleepycat.je.evictor.OffHeapCache$Chunk: int[] next>;

        $r3[chunkIdx] = -2;

        $r4 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicInteger lruSize>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        exitmonitor l1;

     label02:
        return entry;

     label03:
        $r5 = new com.sleepycat.je.evictor.OffHeapCache$Chunk;

        specialinvoke $r5.<com.sleepycat.je.evictor.OffHeapCache$Chunk: void <init>()>();

        newChunk = $r5;

        next = newChunk.<com.sleepycat.je.evictor.OffHeapCache$Chunk: int[] next>;

        $r6 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapCache$Chunk[] chunks>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r6);

        if $r6 == null goto label04;

        $r7 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapCache$Chunk[] chunks>;

        $i5 = lengthof $r7;

        goto label05;

     label04:
        $i5 = 0;

     label05:
        nOldChunks = $i5;

        nextFree#43 = nOldChunks * 102400;

        nextFree#45 = nextFree#43 + 1;

        entry = nextFree#43;

        next[0] = -2;

        next[1] = -1;

        i#53 = 2;

     label06:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#53);

        if i#53 >= 102400 goto label07;

        $i6 = nextFree#45;

        nextFree#45 = nextFree#45 + 1;

        next[i#53] = $i6;

        i#53 = i#53 + 1;

        goto label06;

     label07:
        this.<com.sleepycat.je.evictor.OffHeapCache: int firstFreeListEntry> = nextFree#45;

        $i7 = nOldChunks + 1;

        newChunks = newarray (com.sleepycat.je.evictor.OffHeapCache$Chunk)[$i7];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(nOldChunks);

        if nOldChunks <= 0 goto label08;

        $r8 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapCache$Chunk[] chunks>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, newChunks, 0, nOldChunks);

     label08:
        newChunks[nOldChunks] = newChunk;

        this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapCache$Chunk[] chunks> = newChunks;

        $r9 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicInteger lruSize>;

        virtualinvoke $r9.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        exitmonitor l1;

     label09:
        return entry;

     label10:
        $r10 := @caughtexception;

     label11:
        l8 = $r10;

        exitmonitor l1;

     label12:
        throw l8;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public long loadVLSN(com.sleepycat.je.tree.BIN, int)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        com.sleepycat.je.tree.BIN bin;
        int index;
        long memId, $l1;
        com.sleepycat.je.dbi.EnvironmentImpl $r0;
        boolean $z0;
        byte $b0;
        byte[] $r1;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        bin := @parameter0: com.sleepycat.je.tree.BIN;

        index := @parameter1: int;

        $r0 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $z0 = virtualinvoke $r0.<com.sleepycat.je.dbi.EnvironmentImpl: boolean getCacheVLSN()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        return -1L;

     label1:
        memId = virtualinvoke bin.<com.sleepycat.je.tree.BIN: long getOffHeapLNId(int)>(index);

        $b0 = memId cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 != 0 goto label2;

        return -1L;

     label2:
        $r1 = newarray (byte)[8];

        $l1 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: long getLong(long,int,byte[])>(memId, 0, $r1);

        return $l1;
    }

    private long getLong(long, int, byte[])
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        long memId, $l0;
        int offset;
        byte[] tempBuf;
        com.sleepycat.je.evictor.OffHeapAllocator $r0;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        memId := @parameter0: long;

        offset := @parameter1: int;

        tempBuf := @parameter2: byte[];

        $r0 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapAllocator allocator>;

        interfaceinvoke $r0.<com.sleepycat.je.evictor.OffHeapAllocator: void copy(long,int,byte[],int,int)>(memId, offset, tempBuf, 0, 8);

        $l0 = staticinvoke <com.sleepycat.je.evictor.OffHeapCache: long getLong(byte[],int)>(tempBuf, 0);

        return $l0;
    }

    public boolean storeEvictedLN(com.sleepycat.je.tree.BIN, int, com.sleepycat.je.tree.LN)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        com.sleepycat.je.tree.BIN bin;
        int index, $i1, $i2, entry#68, entry#74;
        com.sleepycat.je.tree.LN ln;
        com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        java.lang.AssertionError $r0, $r1, $r2, $r3;
        long memId#21, memId#58;
        byte $b0, $b4;
        com.sleepycat.je.dbi.DbType $r4;
        com.sleepycat.je.dbi.EnvironmentImpl $r5;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        bin := @parameter0: com.sleepycat.je.tree.BIN;

        index := @parameter1: int;

        ln := @parameter2: com.sleepycat.je.tree.LN;

        $z0 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label01;

        $z1 = virtualinvoke ln.<com.sleepycat.je.tree.LN: boolean isDirty()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label01;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label01:
        $z2 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label02;

        $z3 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean isLatchExclusiveOwner()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label02;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label02:
        $z4 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label03;

        $z5 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean getInListResident()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 != 0 goto label03;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label03:
        dbImpl = virtualinvoke bin.<com.sleepycat.je.tree.BIN: com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        memId#21 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: long getOffHeapLNId(int)>(index);

        $b0 = memId#21 cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 == 0 goto label06;

        $z6 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 != 0 goto label04;

        $i1 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: int getOffHeapLruId()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 >= 0 goto label04;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label04:
        $z7 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean getFetchedCold()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 != 0 goto label05;

        $i2 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: int getOffHeapLruId()>();

        virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: int moveBack(int,boolean)>($i2, 0);

     label05:
        return 1;

     label06:
        $z8 = virtualinvoke ln.<com.sleepycat.je.tree.LN: boolean getFetchedCold()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 != 0 goto label07;

        $z9 = virtualinvoke ln.<com.sleepycat.je.tree.LN: boolean isDeleted()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 != 0 goto label07;

        $z10 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean isEmbeddedLN(int)>(index);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z10);

        if $z10 != 0 goto label07;

        $z11 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: boolean getSortedDuplicates()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z11);

        if $z11 != 0 goto label07;

        $z12 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: boolean isDeferredWriteMode()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z12);

        if $z12 != 0 goto label07;

        $r4 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.DbType getDbType()>();

        $z13 = virtualinvoke $r4.<com.sleepycat.je.dbi.DbType: boolean isInternal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z13);

        if $z13 == 0 goto label08;

     label07:
        return 0;

     label08:
        $r5 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        memId#58 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: long serializeLN(com.sleepycat.je.dbi.EnvironmentImpl,com.sleepycat.je.tree.LN)>($r5, ln);

        $b4 = memId#58 cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b4);

        if $b4 != 0 goto label09;

        return 0;

     label09:
        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void setOffHeapLNId(int,long)>(index, memId#58);

        entry#68 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: int getOffHeapLruId()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(entry#68);

        if entry#68 >= 0 goto label10;

        entry#74 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: int addBack(boolean,com.sleepycat.je.tree.IN,long)>(0, bin, 0L);

        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void setOffHeapLruId(int)>(entry#74);

        goto label11;

     label10:
        virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: int moveBack(int,boolean)>(entry#68, 0);

     label11:
        return 1;
    }

    private long serializeLN(com.sleepycat.je.dbi.EnvironmentImpl, com.sleepycat.je.tree.LN)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        com.sleepycat.je.tree.LN ln;
        boolean useChecksums, $z0, $z1;
        byte checksumSize, vlsnSize, $b0, $b1, $b4;
        int lnDataOffset, checksumValue, $i2, $i3, $i6, $i8;
        byte[] data, tempBuf, $r1;
        long memId, $l5, $l7;
        java.util.zip.Checksum checksum;
        java.lang.AssertionError $r0;
        com.sleepycat.je.evictor.OffHeapAllocator $r2;
        java.util.concurrent.atomic.AtomicLong $r3;
        java.util.concurrent.atomic.AtomicInteger $r4;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        envImpl := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        ln := @parameter1: com.sleepycat.je.tree.LN;

        useChecksums = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: boolean useOffHeapChecksums()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(useChecksums);

        if useChecksums == 0 goto label01;

        $b0 = 4;

        goto label02;

     label01:
        $b0 = 0;

     label02:
        checksumSize = $b0;

        $z0 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: boolean getCacheVLSN()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label03;

        $b1 = 8;

        goto label04;

     label03:
        $b1 = 0;

     label04:
        vlsnSize = $b1;

        lnDataOffset = vlsnSize + checksumSize;

        data = virtualinvoke ln.<com.sleepycat.je.tree.LN: byte[] getData()>();

        $z1 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label05;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(data);

        if data != null goto label05;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label05:
        $i2 = lengthof data;

        $i3 = lnDataOffset + $i2;

        memId = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: long allocateMemory(com.sleepycat.je.dbi.EnvironmentImpl,int)>(envImpl, $i3);

        $b4 = memId cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b4);

        if $b4 != 0 goto label06;

        return 0L;

     label06:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(vlsnSize);

        if vlsnSize > 0 goto label07;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(useChecksums);

        if useChecksums == 0 goto label08;

     label07:
        $r1 = newarray (byte)[8];

        goto label09;

     label08:
        $r1 = null;

     label09:
        tempBuf = $r1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(vlsnSize);

        if vlsnSize <= 0 goto label10;

        $l5 = virtualinvoke ln.<com.sleepycat.je.tree.LN: long getVLSNSequence()>();

        specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: void putLong(long,long,int,byte[])>($l5, memId, 0, tempBuf);

     label10:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(useChecksums);

        if useChecksums == 0 goto label11;

        checksum = staticinvoke <com.sleepycat.je.utilint.Adler32: java.util.zip.Checksum makeChecksum()>();

        $i6 = lengthof data;

        interfaceinvoke checksum.<java.util.zip.Checksum: void update(byte[],int,int)>(data, 0, $i6);

        $l7 = interfaceinvoke checksum.<java.util.zip.Checksum: long getValue()>();

        checksumValue = (int) $l7;

        specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: void putInt(int,long,int,byte[])>(checksumValue, memId, vlsnSize, tempBuf);

     label11:
        $r2 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapAllocator allocator>;

        $i8 = lengthof data;

        interfaceinvoke $r2.<com.sleepycat.je.evictor.OffHeapAllocator: void copy(byte[],int,long,int,int)>(data, 0, memId, lnDataOffset, $i8);

        $r3 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nLNsStored>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        $r4 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicInteger cachedLNs>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        return memId;
    }

    private void putLong(long, long, int, byte[])
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        long val, memId;
        int offset;
        byte[] tempBuf;
        com.sleepycat.je.evictor.OffHeapAllocator $r0;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        val := @parameter0: long;

        memId := @parameter1: long;

        offset := @parameter2: int;

        tempBuf := @parameter3: byte[];

        staticinvoke <com.sleepycat.je.evictor.OffHeapCache: void putLong(long,byte[],int)>(val, tempBuf, 0);

        $r0 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapAllocator allocator>;

        interfaceinvoke $r0.<com.sleepycat.je.evictor.OffHeapAllocator: void copy(byte[],int,long,int,int)>(tempBuf, 0, memId, offset, 8);

        return;
    }

    public com.sleepycat.je.tree.LN loadLN(com.sleepycat.je.tree.BIN, int, com.sleepycat.je.CacheMode)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        com.sleepycat.je.tree.BIN bin;
        int index, $i1, $i2, $i3, $i4;
        com.sleepycat.je.CacheMode cacheMode;
        long memId;
        com.sleepycat.je.tree.LN ln;
        boolean $z0, $z1, $z2, $z3;
        java.lang.AssertionError $r0, $r3, $r4;
        byte $b0;
        com.sleepycat.je.dbi.EnvironmentImpl $r1;
        int[] $r2;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        bin := @parameter0: com.sleepycat.je.tree.BIN;

        index := @parameter1: int;

        cacheMode := @parameter2: com.sleepycat.je.CacheMode;

        $z0 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean isLatchExclusiveOwner()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        memId = virtualinvoke bin.<com.sleepycat.je.tree.BIN: long getOffHeapLNId(int)>(index);

        $b0 = memId cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 != 0 goto label2;

        return null;

     label2:
        $r1 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        ln = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.tree.LN materializeLN(com.sleepycat.je.dbi.EnvironmentImpl,long)>($r1, memId);

        $r2 = <com.sleepycat.je.evictor.OffHeapCache$3: int[] $SwitchMap$com$sleepycat$je$CacheMode>;

        $i1 = virtualinvoke cacheMode.<com.sleepycat.je.CacheMode: int ordinal()>();

        $i2 = $r2[$i1];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        tableswitch($i2)
        {
            case 1: goto label3;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label4;
            case 5: goto label6;
            case 6: goto label6;
            default: goto label7;
        };

     label3:
        goto label8;

     label4:
        $z2 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label5;

        $i3 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: int getOffHeapLruId()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 >= 0 goto label5;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label5:
        $i4 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: int getOffHeapLruId()>();

        virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: int moveBack(int,boolean)>($i4, 0);

        goto label8;

     label6:
        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void setOffHeapLNId(int,long)>(index, 0L);

        specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: int freeLN(long)>(memId);

        goto label8;

     label7:
        $z3 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label8;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label8:
        return ln;
    }

    public void freeRedundantLN(com.sleepycat.je.tree.BIN, int, com.sleepycat.je.tree.LN, com.sleepycat.je.CacheMode)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        com.sleepycat.je.tree.BIN bin;
        int index, $i1, $i2;
        com.sleepycat.je.tree.LN ln;
        com.sleepycat.je.CacheMode cacheMode;
        long memId;
        boolean $z0, $z1, $z2, $z3;
        java.lang.AssertionError $r0, $r2;
        byte $b0;
        int[] $r1;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        bin := @parameter0: com.sleepycat.je.tree.BIN;

        index := @parameter1: int;

        ln := @parameter2: com.sleepycat.je.tree.LN;

        cacheMode := @parameter3: com.sleepycat.je.CacheMode;

        $z0 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean isLatchExclusiveOwner()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        memId = virtualinvoke bin.<com.sleepycat.je.tree.BIN: long getOffHeapLNId(int)>(index);

        $b0 = memId cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 != 0 goto label2;

        return;

     label2:
        $r1 = <com.sleepycat.je.evictor.OffHeapCache$3: int[] $SwitchMap$com$sleepycat$je$CacheMode>;

        $i1 = virtualinvoke cacheMode.<com.sleepycat.je.CacheMode: int ordinal()>();

        $i2 = $r1[$i1];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        tableswitch($i2)
        {
            case 1: goto label3;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label4;
            case 5: goto label5;
            case 6: goto label5;
            default: goto label6;
        };

     label3:
        $z2 = virtualinvoke ln.<com.sleepycat.je.tree.LN: boolean getFetchedCold()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label7;

        return;

     label4:
        return;

     label5:
        goto label7;

     label6:
        $z3 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label7;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label7:
        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void setOffHeapLNId(int,long)>(index, 0L);

        specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: int freeLN(long)>(memId);

        return;
    }

    private com.sleepycat.je.tree.LN materializeLN(com.sleepycat.je.dbi.EnvironmentImpl, long)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        long memId, $l6, $l8;
        boolean useChecksums, $z0;
        byte checksumSize, vlsnSize, $b0, $b1;
        int lnDataOffset, storedChecksum, checksumValue, $i2, $i3, $i4, $i5;
        byte[] data, tempBuf, $r2;
        java.util.zip.Checksum checksum;
        com.sleepycat.je.tree.LN ln;
        com.sleepycat.je.evictor.OffHeapAllocator $r0, $r1;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7;
        java.lang.String $r8;
        com.sleepycat.je.EnvironmentFailureException $r9;
        java.util.concurrent.atomic.AtomicLong $r10;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        envImpl := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        memId := @parameter1: long;

        useChecksums = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: boolean useOffHeapChecksums()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(useChecksums);

        if useChecksums == 0 goto label1;

        $b0 = 4;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        checksumSize = $b0;

        $z0 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: boolean getCacheVLSN()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        $b1 = 8;

        goto label4;

     label3:
        $b1 = 0;

     label4:
        vlsnSize = $b1;

        lnDataOffset = vlsnSize + checksumSize;

        $r0 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapAllocator allocator>;

        $i2 = interfaceinvoke $r0.<com.sleepycat.je.evictor.OffHeapAllocator: int size(long)>(memId);

        $i3 = $i2 - lnDataOffset;

        data = newarray (byte)[$i3];

        $r1 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapAllocator allocator>;

        $i4 = lengthof data;

        interfaceinvoke $r1.<com.sleepycat.je.evictor.OffHeapAllocator: void copy(long,int,byte[],int,int)>(memId, lnDataOffset, data, 0, $i4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(vlsnSize);

        if vlsnSize > 0 goto label5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(useChecksums);

        if useChecksums == 0 goto label6;

     label5:
        $r2 = newarray (byte)[8];

        goto label7;

     label6:
        $r2 = null;

     label7:
        tempBuf = $r2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(useChecksums);

        if useChecksums == 0 goto label8;

        storedChecksum = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: int getInt(long,int,byte[])>(memId, vlsnSize, tempBuf);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(storedChecksum);

        if storedChecksum == 0 goto label8;

        checksum = staticinvoke <com.sleepycat.je.utilint.Adler32: java.util.zip.Checksum makeChecksum()>();

        $i5 = lengthof data;

        interfaceinvoke checksum.<java.util.zip.Checksum: void update(byte[],int,int)>(data, 0, $i5);

        $l6 = interfaceinvoke checksum.<java.util.zip.Checksum: long getValue()>();

        checksumValue = (int) $l6;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(storedChecksum);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(checksumValue);

        if storedChecksum == checksumValue goto label8;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Off-heap cache checksum error. Expected ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(storedChecksum);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but got ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(checksumValue);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedState(com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String)>(envImpl, $r8);

        throw $r9;

     label8:
        $r10 = this.<com.sleepycat.je.evictor.OffHeapCache: java.util.concurrent.atomic.AtomicLong nLNsLoaded>;

        virtualinvoke $r10.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        ln = staticinvoke <com.sleepycat.je.tree.LN: com.sleepycat.je.tree.LN makeLN(com.sleepycat.je.dbi.EnvironmentImpl,byte[])>(envImpl, data);

        virtualinvoke ln.<com.sleepycat.je.tree.LN: void clearDirty()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(vlsnSize);

        if vlsnSize <= 0 goto label9;

        $l8 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: long getLong(long,int,byte[])>(memId, 0, tempBuf);

        virtualinvoke ln.<com.sleepycat.je.tree.LN: void setVLSNSequence(long)>($l8);

     label9:
        return ln;
    }

    private int getInt(long, int, byte[])
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        long memId;
        int offset, $i0;
        byte[] tempBuf;
        com.sleepycat.je.evictor.OffHeapAllocator $r0;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        memId := @parameter0: long;

        offset := @parameter1: int;

        tempBuf := @parameter2: byte[];

        $r0 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapAllocator allocator>;

        interfaceinvoke $r0.<com.sleepycat.je.evictor.OffHeapAllocator: void copy(long,int,byte[],int,int)>(memId, offset, tempBuf, 0, 4);

        $i0 = staticinvoke <com.sleepycat.je.evictor.OffHeapCache: int getInt(byte[],int)>(tempBuf, 0);

        return $i0;
    }

    public byte[] getBINBytes(com.sleepycat.je.tree.IN, int)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        com.sleepycat.je.tree.IN parent, $r1;
        int index, entry;
        boolean $z0, $z1, $z2;
        java.lang.AssertionError $r0, $r2;
        long $l0;
        byte[] $r3;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        parent := @parameter0: com.sleepycat.je.tree.IN;

        index := @parameter1: int;

        $z0 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke parent.<com.sleepycat.je.tree.IN: boolean isLatchOwner()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        entry = virtualinvoke parent.<com.sleepycat.je.tree.IN: int getOffHeapBINId(int)>(index);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(entry);

        if entry >= 0 goto label2;

        return null;

     label2:
        $z2 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label3;

        $r1 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.tree.IN getOwner(int)>(entry);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(parent);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if parent == $r1 goto label3;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label3:
        $l0 = virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: long getMemId(int)>(entry);

        $r3 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: byte[] getMemBytes(long)>($l0);

        return $r3;
    }

    public boolean storePreloadedLN(com.sleepycat.je.tree.BIN, int, com.sleepycat.je.tree.LN)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        com.sleepycat.je.tree.BIN bin;
        int index, entry#74, entry#80;
        com.sleepycat.je.tree.LN ln;
        com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        long memId, $l0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17;
        java.lang.AssertionError $r0, $r1, $r2, $r3, $r5, $r6, $r7, $r9, $r10;
        com.sleepycat.je.tree.Node $r4;
        com.sleepycat.je.dbi.DbType $r8;
        byte $b1, $b2;
        com.sleepycat.je.dbi.EnvironmentImpl $r11;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        bin := @parameter0: com.sleepycat.je.tree.BIN;

        index := @parameter1: int;

        ln := @parameter2: com.sleepycat.je.tree.LN;

        dbImpl = virtualinvoke bin.<com.sleepycat.je.tree.BIN: com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        $z0 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label01;

        $z1 = virtualinvoke ln.<com.sleepycat.je.tree.LN: boolean isDirty()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label01;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label01:
        $z2 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label02;

        $z3 = virtualinvoke ln.<com.sleepycat.je.tree.LN: boolean isDeleted()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label02;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label02:
        $z4 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label03;

        $z5 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean isLatchExclusiveOwner()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 != 0 goto label03;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label03:
        $z6 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 != 0 goto label04;

        $z7 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean isEmbeddedLN(int)>(index);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 == 0 goto label04;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label04:
        $z8 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 != 0 goto label05;

        $r4 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: com.sleepycat.je.tree.Node getTarget(int)>(index);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        if $r4 == null goto label05;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label05:
        $z9 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 != 0 goto label06;

        $z10 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: boolean getSortedDuplicates()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z10);

        if $z10 == 0 goto label06;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label06:
        $z11 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z11);

        if $z11 != 0 goto label07;

        $z12 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: boolean isDeferredWriteMode()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z12);

        if $z12 == 0 goto label07;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label07:
        $z13 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z13);

        if $z13 != 0 goto label08;

        $r8 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.DbType getDbType()>();

        $z14 = virtualinvoke $r8.<com.sleepycat.je.dbi.DbType: boolean isInternal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z14);

        if $z14 == 0 goto label08;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label08:
        $l0 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: long getOffHeapLNId(int)>(index);

        $b1 = $l0 cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 == 0 goto label10;

        $z15 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z15);

        if $z15 != 0 goto label09;

        $z16 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean getInListResident()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z16);

        if $z16 != 0 goto label09;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label09:
        return 1;

     label10:
        $r11 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        memId = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: long serializeLN(com.sleepycat.je.dbi.EnvironmentImpl,com.sleepycat.je.tree.LN)>($r11, ln);

        $b2 = memId cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b2);

        if $b2 != 0 goto label11;

        return 0;

     label11:
        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void setOffHeapLNId(int,long)>(index, memId);

        $z17 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean getInListResident()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z17);

        if $z17 != 0 goto label12;

        return 1;

     label12:
        entry#74 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: int getOffHeapLruId()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(entry#74);

        if entry#74 >= 0 goto label13;

        entry#80 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: int addBack(boolean,com.sleepycat.je.tree.IN,long)>(0, bin, 0L);

        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void setOffHeapLruId(int)>(entry#80);

        goto label14;

     label13:
        virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: int moveBack(int,boolean)>(entry#74, 0);

     label14:
        return 1;
    }

    public boolean storePreloadedBIN(com.sleepycat.je.tree.BIN, com.sleepycat.je.tree.IN, int)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        com.sleepycat.je.tree.BIN bin;
        com.sleepycat.je.tree.IN parent;
        int index, entry;
        com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        long memId;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.lang.AssertionError $r0, $r1, $r2, $r4, $r5, $r7;
        com.sleepycat.je.tree.Node $r3;
        com.sleepycat.je.dbi.DbType $r6;
        byte $b1;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        bin := @parameter0: com.sleepycat.je.tree.BIN;

        parent := @parameter1: com.sleepycat.je.tree.IN;

        index := @parameter2: int;

        $z0 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(bin);

        if bin != null goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $z1 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke parent.<com.sleepycat.je.tree.IN: boolean isLatchExclusiveOwner()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label2;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label2:
        $z3 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label3;

        $z4 = virtualinvoke parent.<com.sleepycat.je.tree.IN: boolean getInListResident()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label3;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label3:
        $z5 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 != 0 goto label4;

        $r3 = virtualinvoke parent.<com.sleepycat.je.tree.IN: com.sleepycat.je.tree.Node getTarget(int)>(index);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r3);

        if $r3 == null goto label4;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label4:
        dbImpl = virtualinvoke bin.<com.sleepycat.je.tree.BIN: com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        $z6 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 != 0 goto label5;

        $z7 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: boolean isDeferredWriteMode()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 == 0 goto label5;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label5:
        $z8 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 != 0 goto label6;

        $r6 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.DbType getDbType()>();

        $z9 = virtualinvoke $r6.<com.sleepycat.je.dbi.DbType: boolean isInternal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 == 0 goto label6;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label6:
        virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: long freeBIN(com.sleepycat.je.tree.BIN,com.sleepycat.je.tree.IN,int)>(bin, parent, index);

        $z10 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        memId = virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: long serializeBIN(com.sleepycat.je.tree.BIN,boolean)>(bin, $z10);

        $b1 = memId cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 != 0 goto label7;

        return 0;

     label7:
        entry = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: int addBack(boolean,com.sleepycat.je.tree.IN,long)>(0, parent, memId);

        $z11 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean getDirty()>();

        virtualinvoke parent.<com.sleepycat.je.tree.IN: void setOffHeapBINId(int,int,boolean,boolean)>(index, entry, 0, $z11);

        return 1;
    }

    public void postBINLoad(com.sleepycat.je.tree.IN, int, com.sleepycat.je.tree.BIN)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        com.sleepycat.je.tree.IN parent, $r6;
        int index, entry;
        com.sleepycat.je.tree.BIN bin;
        long freed;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.lang.AssertionError $r0, $r1, $r2, $r4, $r5, $r7, $r8;
        com.sleepycat.je.tree.Node $r3;
        byte $b0;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        parent := @parameter0: com.sleepycat.je.tree.IN;

        index := @parameter1: int;

        bin := @parameter2: com.sleepycat.je.tree.BIN;

        $z0 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean isLatchExclusiveOwner()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $z2 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label2;

        $z3 = virtualinvoke parent.<com.sleepycat.je.tree.IN: boolean isLatchExclusiveOwner()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label2;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label2:
        $z4 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label3;

        $z5 = virtualinvoke parent.<com.sleepycat.je.tree.IN: boolean getInListResident()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 != 0 goto label3;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label3:
        $z6 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 != 0 goto label4;

        $r3 = virtualinvoke parent.<com.sleepycat.je.tree.IN: com.sleepycat.je.tree.Node getTarget(int)>(index);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r3);

        if $r3 == null goto label4;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label4:
        entry = virtualinvoke parent.<com.sleepycat.je.tree.IN: int getOffHeapBINId(int)>(index);

        $z7 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 != 0 goto label5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(entry);

        if entry >= 0 goto label5;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label5:
        $z8 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 != 0 goto label6;

        $r6 = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.tree.IN getOwner(int)>(entry);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(parent);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r6);

        if parent == $r6 goto label6;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label6:
        $z9 = virtualinvoke parent.<com.sleepycat.je.tree.IN: boolean isOffHeapBINDirty(int)>(index);

        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void setDirty(boolean)>($z9);

        freed = virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: long freeBIN(com.sleepycat.je.tree.BIN,com.sleepycat.je.tree.IN,int)>(bin, parent, index);

        $z10 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z10);

        if $z10 != 0 goto label7;

        $b0 = freed cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 > 0 goto label7;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label7:
        virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: boolean ensureOffHeapLNsInLRU(com.sleepycat.je.tree.BIN)>(bin);

        return;
    }

    public boolean ensureOffHeapLNsInLRU(com.sleepycat.je.tree.BIN)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        com.sleepycat.je.tree.BIN bin;
        int entry, $i0;
        boolean $z0, $z1, $z2;
        java.lang.AssertionError $r0;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        bin := @parameter0: com.sleepycat.je.tree.BIN;

        $z0 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean isLatchExclusiveOwner()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $i0 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: int getOffHeapLruId()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 < 0 goto label2;

        return 1;

     label2:
        $z2 = virtualinvoke bin.<com.sleepycat.je.tree.BIN: boolean hasOffHeapLNs()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label3;

        return 0;

     label3:
        entry = specialinvoke this.<com.sleepycat.je.evictor.OffHeapCache: int addBack(boolean,com.sleepycat.je.tree.IN,long)>(0, bin, 0L);

        virtualinvoke bin.<com.sleepycat.je.tree.BIN: void setOffHeapLruId(int)>(entry);

        return 1;
    }

    public void setOwner(int, com.sleepycat.je.tree.IN)
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        int entry, chunkIdx, $i0;
        com.sleepycat.je.tree.IN owner, $r3, $r6;
        com.sleepycat.je.evictor.OffHeapCache$Chunk chunk;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.AssertionError $r0, $r4, $r7;
        com.sleepycat.je.evictor.OffHeapCache$Chunk[] $r1;
        com.sleepycat.je.tree.IN[] $r2, $r5, $r8;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        entry := @parameter0: int;

        owner := @parameter1: com.sleepycat.je.tree.IN;

        $z0 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke owner.<com.sleepycat.je.tree.IN: boolean isLatchExclusiveOwner()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $r1 = this.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.evictor.OffHeapCache$Chunk[] chunks>;

        $i0 = entry / 102400;

        chunk = $r1[$i0];

        chunkIdx = entry % 102400;

        $z2 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label2;

        $r2 = chunk.<com.sleepycat.je.evictor.OffHeapCache$Chunk: com.sleepycat.je.tree.IN[] owners>;

        $r3 = $r2[chunkIdx];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r3);

        if $r3 != null goto label2;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        $z3 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label3;

        $r5 = chunk.<com.sleepycat.je.evictor.OffHeapCache$Chunk: com.sleepycat.je.tree.IN[] owners>;

        $r6 = $r5[chunkIdx];

        $z4 = virtualinvoke $r6.<com.sleepycat.je.tree.IN: boolean isLatchExclusiveOwner()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label3;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label3:
        $r8 = chunk.<com.sleepycat.je.evictor.OffHeapCache$Chunk: com.sleepycat.je.tree.IN[] owners>;

        $r8[chunkIdx] = owner;

        return;
    }

    public boolean haveBINBytesChanged(com.sleepycat.je.tree.IN, int, byte[])
    {
        com.sleepycat.je.evictor.OffHeapCache this;
        com.sleepycat.je.tree.IN parent;
        int index;
        byte[] bytes, $r1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.AssertionError $r0;

        this := @this: com.sleepycat.je.evictor.OffHeapCache;

        parent := @parameter0: com.sleepycat.je.tree.IN;

        index := @parameter1: int;

        bytes := @parameter2: byte[];

        $z0 = <com.sleepycat.je.evictor.OffHeapCache: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke parent.<com.sleepycat.je.tree.IN: boolean isLatchOwner()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $r1 = virtualinvoke this.<com.sleepycat.je.evictor.OffHeapCache: byte[] getBINBytes(com.sleepycat.je.tree.IN,int)>(parent, index);

        $z2 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(bytes, $r1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }


