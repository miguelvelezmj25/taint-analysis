    public boolean forward(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.transform.DCT4 this;
        kanzi.SliceIntArray src, dst, $r1, $r2, $r3;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        int[] $r0;

        this := @this: kanzi.transform.DCT4;

        src := @parameter0: kanzi.SliceIntArray;

        dst := @parameter1: kanzi.SliceIntArray;

        $z0 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(src);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i0 = src.<kanzi.SliceIntArray: int length>;

        if $i0 == 16 goto label2;

        return 0;

     label2:
        if src == dst goto label4;

        $z1 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(dst);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $i1 = dst.<kanzi.SliceIntArray: int index>;

        $i2 = $i1 + 16;

        $r0 = dst.<kanzi.SliceIntArray: int[] array>;

        $i3 = lengthof $r0;

        if $i2 <= $i3 goto label4;

        return 0;

     label4:
        $r1 = this.<kanzi.transform.DCT4: kanzi.SliceIntArray data>;

        $r1.<kanzi.SliceIntArray: int index> = 0;

        $r2 = this.<kanzi.transform.DCT4: kanzi.SliceIntArray data>;

        staticinvoke <kanzi.transform.DCT4: void computeForward(kanzi.SliceIntArray,kanzi.SliceIntArray,int)>(src, $r2, 4);

        $r3 = this.<kanzi.transform.DCT4: kanzi.SliceIntArray data>;

        $i4 = this.<kanzi.transform.DCT4: int fShift>;

        $i5 = $i4 - 4;

        staticinvoke <kanzi.transform.DCT4: void computeForward(kanzi.SliceIntArray,kanzi.SliceIntArray,int)>($r3, dst, $i5);

        $i6 = src.<kanzi.SliceIntArray: int index>;

        $i7 = $i6 + 16;

        src.<kanzi.SliceIntArray: int index> = $i7;

        $i8 = dst.<kanzi.SliceIntArray: int index>;

        $i9 = $i8 + 16;

        dst.<kanzi.SliceIntArray: int index> = $i9;

        return 1;
    }

    private static void computeForward(kanzi.SliceIntArray, kanzi.SliceIntArray, int)
    {
        kanzi.SliceIntArray src, dst;
        int shift, srcIdx, dstIdx, round, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110;
        int[] input, output;

        src := @parameter0: kanzi.SliceIntArray;

        dst := @parameter1: kanzi.SliceIntArray;

        shift := @parameter2: int;

        input = src.<kanzi.SliceIntArray: int[] array>;

        output = dst.<kanzi.SliceIntArray: int[] array>;

        srcIdx = src.<kanzi.SliceIntArray: int index>;

        dstIdx = dst.<kanzi.SliceIntArray: int index>;

        $i0 = 1 << shift;

        round = $i0 >> 1;

        x0 = input[srcIdx];

        $i1 = srcIdx + 1;

        x1 = input[$i1];

        $i2 = srcIdx + 2;

        x2 = input[$i2];

        $i3 = srcIdx + 3;

        x3 = input[$i3];

        $i4 = srcIdx + 4;

        x4 = input[$i4];

        $i5 = srcIdx + 5;

        x5 = input[$i5];

        $i6 = srcIdx + 6;

        x6 = input[$i6];

        $i7 = srcIdx + 7;

        x7 = input[$i7];

        $i8 = srcIdx + 8;

        x8 = input[$i8];

        $i9 = srcIdx + 9;

        x9 = input[$i9];

        $i10 = srcIdx + 10;

        x10 = input[$i10];

        $i11 = srcIdx + 11;

        x11 = input[$i11];

        $i12 = srcIdx + 12;

        x12 = input[$i12];

        $i13 = srcIdx + 13;

        x13 = input[$i13];

        $i14 = srcIdx + 14;

        x14 = input[$i14];

        $i15 = srcIdx + 15;

        x15 = input[$i15];

        a0 = x0 + x3;

        a1 = x1 + x2;

        a2 = x0 - x3;

        a3 = x1 - x2;

        a4 = x4 + x7;

        a5 = x5 + x6;

        a6 = x4 - x7;

        a7 = x5 - x6;

        a8 = x8 + x11;

        a9 = x9 + x10;

        a10 = x8 - x11;

        a11 = x9 - x10;

        a12 = x12 + x15;

        a13 = x13 + x14;

        a14 = x12 - x15;

        a15 = x13 - x14;

        $i16 = 64 * a0;

        $i17 = 64 * a1;

        $i18 = $i16 + $i17;

        $i19 = $i18 + round;

        $i20 = $i19 >> shift;

        output[dstIdx] = $i20;

        $i21 = dstIdx + 1;

        $i22 = 64 * a4;

        $i23 = 64 * a5;

        $i24 = $i22 + $i23;

        $i25 = $i24 + round;

        $i26 = $i25 >> shift;

        output[$i21] = $i26;

        $i27 = dstIdx + 2;

        $i28 = 64 * a8;

        $i29 = 64 * a9;

        $i30 = $i28 + $i29;

        $i31 = $i30 + round;

        $i32 = $i31 >> shift;

        output[$i27] = $i32;

        $i33 = dstIdx + 3;

        $i34 = 64 * a12;

        $i35 = 64 * a13;

        $i36 = $i34 + $i35;

        $i37 = $i36 + round;

        $i38 = $i37 >> shift;

        output[$i33] = $i38;

        $i39 = dstIdx + 4;

        $i40 = 83 * a2;

        $i41 = 36 * a3;

        $i42 = $i40 + $i41;

        $i43 = $i42 + round;

        $i44 = $i43 >> shift;

        output[$i39] = $i44;

        $i45 = dstIdx + 5;

        $i46 = 83 * a6;

        $i47 = 36 * a7;

        $i48 = $i46 + $i47;

        $i49 = $i48 + round;

        $i50 = $i49 >> shift;

        output[$i45] = $i50;

        $i51 = dstIdx + 6;

        $i52 = 83 * a10;

        $i53 = 36 * a11;

        $i54 = $i52 + $i53;

        $i55 = $i54 + round;

        $i56 = $i55 >> shift;

        output[$i51] = $i56;

        $i57 = dstIdx + 7;

        $i58 = 83 * a14;

        $i59 = 36 * a15;

        $i60 = $i58 + $i59;

        $i61 = $i60 + round;

        $i62 = $i61 >> shift;

        output[$i57] = $i62;

        $i63 = dstIdx + 8;

        $i64 = 64 * a0;

        $i65 = -64 * a1;

        $i66 = $i64 + $i65;

        $i67 = $i66 + round;

        $i68 = $i67 >> shift;

        output[$i63] = $i68;

        $i69 = dstIdx + 9;

        $i70 = 64 * a4;

        $i71 = -64 * a5;

        $i72 = $i70 + $i71;

        $i73 = $i72 + round;

        $i74 = $i73 >> shift;

        output[$i69] = $i74;

        $i75 = dstIdx + 10;

        $i76 = 64 * a8;

        $i77 = -64 * a9;

        $i78 = $i76 + $i77;

        $i79 = $i78 + round;

        $i80 = $i79 >> shift;

        output[$i75] = $i80;

        $i81 = dstIdx + 11;

        $i82 = 64 * a12;

        $i83 = -64 * a13;

        $i84 = $i82 + $i83;

        $i85 = $i84 + round;

        $i86 = $i85 >> shift;

        output[$i81] = $i86;

        $i87 = dstIdx + 12;

        $i88 = 36 * a2;

        $i89 = -83 * a3;

        $i90 = $i88 + $i89;

        $i91 = $i90 + round;

        $i92 = $i91 >> shift;

        output[$i87] = $i92;

        $i93 = dstIdx + 13;

        $i94 = 36 * a6;

        $i95 = -83 * a7;

        $i96 = $i94 + $i95;

        $i97 = $i96 + round;

        $i98 = $i97 >> shift;

        output[$i93] = $i98;

        $i99 = dstIdx + 14;

        $i100 = 36 * a10;

        $i101 = -83 * a11;

        $i102 = $i100 + $i101;

        $i103 = $i102 + round;

        $i104 = $i103 >> shift;

        output[$i99] = $i104;

        $i105 = dstIdx + 15;

        $i106 = 36 * a14;

        $i107 = -83 * a15;

        $i108 = $i106 + $i107;

        $i109 = $i108 + round;

        $i110 = $i109 >> shift;

        output[$i105] = $i110;

        return;
    }

    public boolean inverse(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.transform.DCT4 this;
        kanzi.SliceIntArray src, dst, $r1, $r2, $r3;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        int[] $r0;

        this := @this: kanzi.transform.DCT4;

        src := @parameter0: kanzi.SliceIntArray;

        dst := @parameter1: kanzi.SliceIntArray;

        $z0 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(src);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i0 = src.<kanzi.SliceIntArray: int length>;

        if $i0 == 16 goto label2;

        return 0;

     label2:
        if src == dst goto label4;

        $z1 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(dst);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $i1 = dst.<kanzi.SliceIntArray: int index>;

        $i2 = $i1 + 16;

        $r0 = dst.<kanzi.SliceIntArray: int[] array>;

        $i3 = lengthof $r0;

        if $i2 <= $i3 goto label4;

        return 0;

     label4:
        $r1 = this.<kanzi.transform.DCT4: kanzi.SliceIntArray data>;

        $r1.<kanzi.SliceIntArray: int index> = 0;

        $r2 = this.<kanzi.transform.DCT4: kanzi.SliceIntArray data>;

        staticinvoke <kanzi.transform.DCT4: void computeInverse(kanzi.SliceIntArray,kanzi.SliceIntArray,int)>(src, $r2, 10);

        $r3 = this.<kanzi.transform.DCT4: kanzi.SliceIntArray data>;

        $i4 = this.<kanzi.transform.DCT4: int iShift>;

        $i5 = $i4 - 10;

        staticinvoke <kanzi.transform.DCT4: void computeInverse(kanzi.SliceIntArray,kanzi.SliceIntArray,int)>($r3, dst, $i5);

        $i6 = src.<kanzi.SliceIntArray: int index>;

        $i7 = $i6 + 16;

        src.<kanzi.SliceIntArray: int index> = $i7;

        $i8 = dst.<kanzi.SliceIntArray: int index>;

        $i9 = $i8 + 16;

        dst.<kanzi.SliceIntArray: int index> = $i9;

        return 1;
    }

    private static void computeInverse(kanzi.SliceIntArray, kanzi.SliceIntArray, int)
    {
        kanzi.SliceIntArray src, dst;
        int shift, srcIdx, dstIdx, round, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111;
        int[] input, output;

        src := @parameter0: kanzi.SliceIntArray;

        dst := @parameter1: kanzi.SliceIntArray;

        shift := @parameter2: int;

        input = src.<kanzi.SliceIntArray: int[] array>;

        output = dst.<kanzi.SliceIntArray: int[] array>;

        srcIdx = src.<kanzi.SliceIntArray: int index>;

        dstIdx = dst.<kanzi.SliceIntArray: int index>;

        $i0 = 1 << shift;

        round = $i0 >> 1;

        x0 = input[srcIdx];

        $i1 = srcIdx + 1;

        x1 = input[$i1];

        $i2 = srcIdx + 2;

        x2 = input[$i2];

        $i3 = srcIdx + 3;

        x3 = input[$i3];

        $i4 = srcIdx + 4;

        x4 = input[$i4];

        $i5 = srcIdx + 5;

        x5 = input[$i5];

        $i6 = srcIdx + 6;

        x6 = input[$i6];

        $i7 = srcIdx + 7;

        x7 = input[$i7];

        $i8 = srcIdx + 8;

        x8 = input[$i8];

        $i9 = srcIdx + 9;

        x9 = input[$i9];

        $i10 = srcIdx + 10;

        x10 = input[$i10];

        $i11 = srcIdx + 11;

        x11 = input[$i11];

        $i12 = srcIdx + 12;

        x12 = input[$i12];

        $i13 = srcIdx + 13;

        x13 = input[$i13];

        $i14 = srcIdx + 14;

        x14 = input[$i14];

        $i15 = srcIdx + 15;

        x15 = input[$i15];

        $i16 = 83 * x4;

        $i17 = 36 * x12;

        a0 = $i16 + $i17;

        $i18 = 36 * x4;

        $i19 = -83 * x12;

        a1 = $i18 + $i19;

        $i20 = 64 * x0;

        $i21 = 64 * x8;

        a2 = $i20 + $i21;

        $i22 = 64 * x0;

        $i23 = -64 * x8;

        a3 = $i22 + $i23;

        $i24 = 83 * x5;

        $i25 = 36 * x13;

        a4 = $i24 + $i25;

        $i26 = 36 * x5;

        $i27 = -83 * x13;

        a5 = $i26 + $i27;

        $i28 = 64 * x1;

        $i29 = 64 * x9;

        a6 = $i28 + $i29;

        $i30 = 64 * x1;

        $i31 = -64 * x9;

        a7 = $i30 + $i31;

        $i32 = 83 * x6;

        $i33 = 36 * x14;

        a8 = $i32 + $i33;

        $i34 = 36 * x6;

        $i35 = -83 * x14;

        a9 = $i34 + $i35;

        $i36 = 64 * x2;

        $i37 = 64 * x10;

        a10 = $i36 + $i37;

        $i38 = 64 * x2;

        $i39 = -64 * x10;

        a11 = $i38 + $i39;

        $i40 = 83 * x7;

        $i41 = 36 * x15;

        a12 = $i40 + $i41;

        $i42 = 36 * x7;

        $i43 = -83 * x15;

        a13 = $i42 + $i43;

        $i44 = 64 * x3;

        $i45 = 64 * x11;

        a14 = $i44 + $i45;

        $i46 = 64 * x3;

        $i47 = -64 * x11;

        a15 = $i46 + $i47;

        $i48 = a2 + a0;

        $i49 = $i48 + round;

        b0 = $i49 >> shift;

        $i50 = a3 + a1;

        $i51 = $i50 + round;

        b1 = $i51 >> shift;

        $i52 = a3 - a1;

        $i53 = $i52 + round;

        b2 = $i53 >> shift;

        $i54 = a2 - a0;

        $i55 = $i54 + round;

        b3 = $i55 >> shift;

        $i56 = a6 + a4;

        $i57 = $i56 + round;

        b4 = $i57 >> shift;

        $i58 = a7 + a5;

        $i59 = $i58 + round;

        b5 = $i59 >> shift;

        $i60 = a7 - a5;

        $i61 = $i60 + round;

        b6 = $i61 >> shift;

        $i62 = a6 - a4;

        $i63 = $i62 + round;

        b7 = $i63 >> shift;

        $i64 = a10 + a8;

        $i65 = $i64 + round;

        b8 = $i65 >> shift;

        $i66 = a11 + a9;

        $i67 = $i66 + round;

        b9 = $i67 >> shift;

        $i68 = a11 - a9;

        $i69 = $i68 + round;

        b10 = $i69 >> shift;

        $i70 = a10 - a8;

        $i71 = $i70 + round;

        b11 = $i71 >> shift;

        $i72 = a14 + a12;

        $i73 = $i72 + round;

        b12 = $i73 >> shift;

        $i74 = a15 + a13;

        $i75 = $i74 + round;

        b13 = $i75 >> shift;

        $i76 = a15 - a13;

        $i77 = $i76 + round;

        b14 = $i77 >> shift;

        $i78 = a14 - a12;

        $i79 = $i78 + round;

        b15 = $i79 >> shift;

        if b0 < 65536 goto label01;

        $i81 = 65536;

        goto label03;

     label01:
        if b0 > -65537 goto label02;

        $i81 = -65537;

        goto label03;

     label02:
        $i81 = b0;

     label03:
        output[dstIdx] = $i81;

        $i82 = dstIdx + 1;

        if b1 < 65536 goto label04;

        $i83 = 65536;

        goto label06;

     label04:
        if b1 > -65537 goto label05;

        $i83 = -65537;

        goto label06;

     label05:
        $i83 = b1;

     label06:
        output[$i82] = $i83;

        $i84 = dstIdx + 2;

        if b2 < 65536 goto label07;

        $i85 = 65536;

        goto label09;

     label07:
        if b2 > -65537 goto label08;

        $i85 = -65537;

        goto label09;

     label08:
        $i85 = b2;

     label09:
        output[$i84] = $i85;

        $i86 = dstIdx + 3;

        if b3 < 65536 goto label10;

        $i87 = 65536;

        goto label12;

     label10:
        if b3 > -65537 goto label11;

        $i87 = -65537;

        goto label12;

     label11:
        $i87 = b3;

     label12:
        output[$i86] = $i87;

        $i88 = dstIdx + 4;

        if b4 < 65536 goto label13;

        $i89 = 65536;

        goto label15;

     label13:
        if b4 > -65537 goto label14;

        $i89 = -65537;

        goto label15;

     label14:
        $i89 = b4;

     label15:
        output[$i88] = $i89;

        $i90 = dstIdx + 5;

        if b5 < 65536 goto label16;

        $i91 = 65536;

        goto label18;

     label16:
        if b5 > -65537 goto label17;

        $i91 = -65537;

        goto label18;

     label17:
        $i91 = b5;

     label18:
        output[$i90] = $i91;

        $i92 = dstIdx + 6;

        if b6 < 65536 goto label19;

        $i93 = 65536;

        goto label21;

     label19:
        if b6 > -65537 goto label20;

        $i93 = -65537;

        goto label21;

     label20:
        $i93 = b6;

     label21:
        output[$i92] = $i93;

        $i94 = dstIdx + 7;

        if b7 < 65536 goto label22;

        $i95 = 65536;

        goto label24;

     label22:
        if b7 > -65537 goto label23;

        $i95 = -65537;

        goto label24;

     label23:
        $i95 = b7;

     label24:
        output[$i94] = $i95;

        $i96 = dstIdx + 8;

        if b8 < 65536 goto label25;

        $i97 = 65536;

        goto label27;

     label25:
        if b8 > -65537 goto label26;

        $i97 = -65537;

        goto label27;

     label26:
        $i97 = b8;

     label27:
        output[$i96] = $i97;

        $i98 = dstIdx + 9;

        if b9 < 65536 goto label28;

        $i99 = 65536;

        goto label30;

     label28:
        if b9 > -65537 goto label29;

        $i99 = -65537;

        goto label30;

     label29:
        $i99 = b9;

     label30:
        output[$i98] = $i99;

        $i100 = dstIdx + 10;

        if b10 < 65536 goto label31;

        $i101 = 65536;

        goto label33;

     label31:
        if b10 > -65537 goto label32;

        $i101 = -65537;

        goto label33;

     label32:
        $i101 = b10;

     label33:
        output[$i100] = $i101;

        $i102 = dstIdx + 11;

        if b11 < 65536 goto label34;

        $i103 = 65536;

        goto label36;

     label34:
        if b11 > -65537 goto label35;

        $i103 = -65537;

        goto label36;

     label35:
        $i103 = b11;

     label36:
        output[$i102] = $i103;

        $i104 = dstIdx + 12;

        if b12 < 65536 goto label37;

        $i105 = 65536;

        goto label39;

     label37:
        if b12 > -65537 goto label38;

        $i105 = -65537;

        goto label39;

     label38:
        $i105 = b12;

     label39:
        output[$i104] = $i105;

        $i106 = dstIdx + 13;

        if b13 < 65536 goto label40;

        $i107 = 65536;

        goto label42;

     label40:
        if b13 > -65537 goto label41;

        $i107 = -65537;

        goto label42;

     label41:
        $i107 = b13;

     label42:
        output[$i106] = $i107;

        $i108 = dstIdx + 14;

        if b14 < 65536 goto label43;

        $i109 = 65536;

        goto label45;

     label43:
        if b14 > -65537 goto label44;

        $i109 = -65537;

        goto label45;

     label44:
        $i109 = b14;

     label45:
        output[$i108] = $i109;

        $i110 = dstIdx + 15;

        if b15 < 65536 goto label46;

        $i111 = 65536;

        goto label48;

     label46:
        if b15 > -65537 goto label47;

        $i111 = -65537;

        goto label48;

     label47:
        $i111 = b15;

     label48:
        output[$i110] = $i111;

        return;
    }


