    public void <init>(java.io.OutputStream, org.tukaani.xz.FilterEncoder[], org.tukaani.xz.check.Check) throws java.io.IOException
    {
        org.tukaani.xz.BlockOutputStream this;
        java.io.OutputStream out;
        org.tukaani.xz.FilterEncoder[] filters;
        org.tukaani.xz.check.Check check;
        java.io.ByteArrayOutputStream bufStream, $r6;
        byte[] filterProps, buf, $r0;
        org.tukaani.xz.CountingOutputStream $r1, $r2;
        int $i0, i#22, $i1, $i2, i#41, $i3, $i5, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i15, $i18;
        org.tukaani.xz.FilterEncoder $r3, $r7, $r8;
        org.tukaani.xz.FinishableOutputStream $r4, $r5;
        long $l4, $l6, $l16, $l17, $l19, $l20;
        org.tukaani.xz.UnsupportedOptionsException $r9;
        byte $b14;

        this := @this: org.tukaani.xz.BlockOutputStream;

        out := @parameter0: java.io.OutputStream;

        filters := @parameter1: org.tukaani.xz.FilterEncoder[];

        check := @parameter2: org.tukaani.xz.check.Check;

        specialinvoke this.<org.tukaani.xz.FinishableOutputStream: void <init>()>();

        $r0 = newarray (byte)[1];

        this.<org.tukaani.xz.BlockOutputStream: byte[] tempBuf> = $r0;

        this.<org.tukaani.xz.BlockOutputStream: long uncompressedSize> = 0L;

        this.<org.tukaani.xz.BlockOutputStream: java.io.OutputStream out> = out;

        this.<org.tukaani.xz.BlockOutputStream: org.tukaani.xz.check.Check check> = check;

        $r1 = new org.tukaani.xz.CountingOutputStream;

        specialinvoke $r1.<org.tukaani.xz.CountingOutputStream: void <init>(java.io.OutputStream)>(out);

        this.<org.tukaani.xz.BlockOutputStream: org.tukaani.xz.CountingOutputStream outCounted> = $r1;

        $r2 = this.<org.tukaani.xz.BlockOutputStream: org.tukaani.xz.CountingOutputStream outCounted>;

        this.<org.tukaani.xz.BlockOutputStream: org.tukaani.xz.FinishableOutputStream filterChain> = $r2;

        $i0 = lengthof filters;

        i#22 = $i0 - 1;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#22);

        if i#22 < 0 goto label2;

        $r3 = filters[i#22];

        $r4 = this.<org.tukaani.xz.BlockOutputStream: org.tukaani.xz.FinishableOutputStream filterChain>;

        $r5 = interfaceinvoke $r3.<org.tukaani.xz.FilterEncoder: org.tukaani.xz.FinishableOutputStream getOutputStream(org.tukaani.xz.FinishableOutputStream)>($r4);

        this.<org.tukaani.xz.BlockOutputStream: org.tukaani.xz.FinishableOutputStream filterChain> = $r5;

        i#22 = i#22 + -1;

        goto label1;

     label2:
        $r6 = new java.io.ByteArrayOutputStream;

        specialinvoke $r6.<java.io.ByteArrayOutputStream: void <init>()>();

        bufStream = $r6;

        virtualinvoke bufStream.<java.io.ByteArrayOutputStream: void write(int)>(0);

        $i1 = lengthof filters;

        $i2 = $i1 - 1;

        virtualinvoke bufStream.<java.io.ByteArrayOutputStream: void write(int)>($i2);

        i#41 = 0;

     label3:
        $i3 = lengthof filters;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#41);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if i#41 >= $i3 goto label4;

        $r7 = filters[i#41];

        $l4 = interfaceinvoke $r7.<org.tukaani.xz.FilterEncoder: long getFilterID()>();

        staticinvoke <org.tukaani.xz.common.EncoderUtil: void encodeVLI(java.io.OutputStream,long)>(bufStream, $l4);

        $r8 = filters[i#41];

        filterProps = interfaceinvoke $r8.<org.tukaani.xz.FilterEncoder: byte[] getFilterProps()>();

        $i5 = lengthof filterProps;

        $l6 = (long) $i5;

        staticinvoke <org.tukaani.xz.common.EncoderUtil: void encodeVLI(java.io.OutputStream,long)>(bufStream, $l6);

        virtualinvoke bufStream.<java.io.ByteArrayOutputStream: void write(byte[])>(filterProps);

        i#41 = i#41 + 1;

        goto label3;

     label4:
        $i7 = virtualinvoke bufStream.<java.io.ByteArrayOutputStream: int size()>();

        $i8 = $i7 & 3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if $i8 == 0 goto label5;

        virtualinvoke bufStream.<java.io.ByteArrayOutputStream: void write(int)>(0);

        goto label4;

     label5:
        buf = virtualinvoke bufStream.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $i9 = lengthof buf;

        $i10 = $i9 + 4;

        this.<org.tukaani.xz.BlockOutputStream: int headerSize> = $i10;

        $i11 = this.<org.tukaani.xz.BlockOutputStream: int headerSize>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i11);

        if $i11 <= 1024 goto label6;

        $r9 = new org.tukaani.xz.UnsupportedOptionsException;

        specialinvoke $r9.<org.tukaani.xz.UnsupportedOptionsException: void <init>()>();

        throw $r9;

     label6:
        $i12 = lengthof buf;

        $i13 = $i12 / 4;

        $b14 = (byte) $i13;

        buf[0] = $b14;

        virtualinvoke out.<java.io.OutputStream: void write(byte[])>(buf);

        staticinvoke <org.tukaani.xz.common.EncoderUtil: void writeCRC32(java.io.OutputStream,byte[])>(out, buf);

        $i15 = this.<org.tukaani.xz.BlockOutputStream: int headerSize>;

        $l16 = (long) $i15;

        $l17 = 9223372036854775804L - $l16;

        $i18 = virtualinvoke check.<org.tukaani.xz.check.Check: int getSize()>();

        $l19 = (long) $i18;

        $l20 = $l17 - $l19;

        this.<org.tukaani.xz.BlockOutputStream: long compressedSizeLimit> = $l20;

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        org.tukaani.xz.BlockOutputStream this;
        byte[] buf;
        int off, len;
        org.tukaani.xz.FinishableOutputStream $r0;
        org.tukaani.xz.check.Check $r1;
        long $l0, $l1, $l2;

        this := @this: org.tukaani.xz.BlockOutputStream;

        buf := @parameter0: byte[];

        off := @parameter1: int;

        len := @parameter2: int;

        $r0 = this.<org.tukaani.xz.BlockOutputStream: org.tukaani.xz.FinishableOutputStream filterChain>;

        virtualinvoke $r0.<org.tukaani.xz.FinishableOutputStream: void write(byte[],int,int)>(buf, off, len);

        $r1 = this.<org.tukaani.xz.BlockOutputStream: org.tukaani.xz.check.Check check>;

        virtualinvoke $r1.<org.tukaani.xz.check.Check: void update(byte[],int,int)>(buf, off, len);

        $l0 = this.<org.tukaani.xz.BlockOutputStream: long uncompressedSize>;

        $l1 = (long) len;

        $l2 = $l0 + $l1;

        this.<org.tukaani.xz.BlockOutputStream: long uncompressedSize> = $l2;

        specialinvoke this.<org.tukaani.xz.BlockOutputStream: void validate()>();

        return;
    }

    private void validate() throws java.io.IOException
    {
        org.tukaani.xz.BlockOutputStream this;
        long compressedSize, $l1, $l3;
        org.tukaani.xz.CountingOutputStream $r0;
        byte $b0, $b2, $b4;
        org.tukaani.xz.XZIOException $r1;

        this := @this: org.tukaani.xz.BlockOutputStream;

        $r0 = this.<org.tukaani.xz.BlockOutputStream: org.tukaani.xz.CountingOutputStream outCounted>;

        compressedSize = virtualinvoke $r0.<org.tukaani.xz.CountingOutputStream: long getSize()>();

        $b0 = compressedSize cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 < 0 goto label1;

        $l1 = this.<org.tukaani.xz.BlockOutputStream: long compressedSizeLimit>;

        $b2 = compressedSize cmp $l1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b2);

        if $b2 > 0 goto label1;

        $l3 = this.<org.tukaani.xz.BlockOutputStream: long uncompressedSize>;

        $b4 = $l3 cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b4);

        if $b4 >= 0 goto label2;

     label1:
        $r1 = new org.tukaani.xz.XZIOException;

        specialinvoke $r1.<org.tukaani.xz.XZIOException: void <init>(java.lang.String)>("XZ Stream has grown too big");

        throw $r1;

     label2:
        return;
    }


