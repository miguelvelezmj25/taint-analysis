    public void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl)
    {
        berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker this;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl env;
        java.util.HashMap $r0, $r1, $r2;

        this := @this: berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker;

        env := @parameter0: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        specialinvoke this.<berkeley.com.sleepycat.je.cleaner.BaseLocalUtilizationTracker: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.util.Map)>(env, $r0);

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        this.<berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker: java.util.Map fileSummaryLsns> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        this.<berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker: java.util.Map databaseLsns> = $r2;

        return;
    }

    public void countObsoleteUnconditional(long, berkeley.com.sleepycat.je.log.LogEntryType, int, berkeley.com.sleepycat.je.dbi.DatabaseId, boolean)
    {
        berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker this;
        long lsn;
        berkeley.com.sleepycat.je.log.LogEntryType type;
        int size;
        berkeley.com.sleepycat.je.dbi.DatabaseId dbId;
        boolean trackOffset;

        this := @this: berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker;

        lsn := @parameter0: long;

        type := @parameter1: berkeley.com.sleepycat.je.log.LogEntryType;

        size := @parameter2: int;

        dbId := @parameter3: berkeley.com.sleepycat.je.dbi.DatabaseId;

        trackOffset := @parameter4: boolean;

        virtualinvoke this.<berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker: void countObsolete(long,java.lang.Object,berkeley.com.sleepycat.je.log.LogEntryType,int,boolean,boolean,boolean,boolean)>(lsn, dbId, type, size, 1, 1, trackOffset, 0);

        return;
    }

    public boolean countObsoleteIfUncounted(long, long, berkeley.com.sleepycat.je.log.LogEntryType, int, berkeley.com.sleepycat.je.dbi.DatabaseId, boolean)
    {
        berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker this;
        long oldLsn, newLsn, $l0;
        berkeley.com.sleepycat.je.log.LogEntryType type;
        int size;
        berkeley.com.sleepycat.je.dbi.DatabaseId dbId;
        boolean trackOffset, fileUncounted, dbUncounted;
        java.lang.Long fileNum;

        this := @this: berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker;

        oldLsn := @parameter0: long;

        newLsn := @parameter1: long;

        type := @parameter2: berkeley.com.sleepycat.je.log.LogEntryType;

        size := @parameter3: int;

        dbId := @parameter4: berkeley.com.sleepycat.je.dbi.DatabaseId;

        trackOffset := @parameter5: boolean;

        $l0 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long getFileNumber(long)>(oldLsn);

        fileNum = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        fileUncounted = virtualinvoke this.<berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker: boolean isFileUncounted(java.lang.Long,long)>(fileNum, newLsn);

        dbUncounted = specialinvoke this.<berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker: boolean isDbUncounted(berkeley.com.sleepycat.je.dbi.DatabaseId,long)>(dbId, newLsn);

        virtualinvoke this.<berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker: void countObsolete(long,java.lang.Object,berkeley.com.sleepycat.je.log.LogEntryType,int,boolean,boolean,boolean,boolean)>(oldLsn, dbId, null, size, fileUncounted, dbUncounted, trackOffset, 0);

        return fileUncounted;
    }

    boolean isFileUncounted(java.lang.Long, long)
    {
        berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker this;
        java.lang.Long fileNum, $r2;
        long lsn, fsLsn;
        int cmpFsLsnToNewLsn, $i1;
        java.util.Map $r0;
        java.lang.Object $r1;
        byte $b0;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker;

        fileNum := @parameter0: java.lang.Long;

        lsn := @parameter1: long;

        $r0 = this.<berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker: java.util.Map fileSummaryLsns>;

        $r1 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(fileNum);

        $r2 = (java.lang.Long) $r1;

        fsLsn = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long longToLsn(java.lang.Long)>($r2);

        $b0 = fsLsn cmp -1L;

        if $b0 == 0 goto label1;

        $i1 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: int compareTo(long,long)>(fsLsn, lsn);

        goto label2;

     label1:
        $i1 = -1;

     label2:
        cmpFsLsnToNewLsn = $i1;

        if cmpFsLsnToNewLsn >= 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    private boolean isDbUncounted(berkeley.com.sleepycat.je.dbi.DatabaseId, long)
    {
        berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker this;
        berkeley.com.sleepycat.je.dbi.DatabaseId dbId;
        long lsn, dbLsn;
        int cmpDbLsnToLsn, $i1;
        java.util.Map $r0;
        java.lang.Object $r1;
        java.lang.Long $r2;
        byte $b0;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker;

        dbId := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseId;

        lsn := @parameter1: long;

        $r0 = this.<berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker: java.util.Map databaseLsns>;

        $r1 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(dbId);

        $r2 = (java.lang.Long) $r1;

        dbLsn = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long longToLsn(java.lang.Long)>($r2);

        $b0 = dbLsn cmp -1L;

        if $b0 == 0 goto label1;

        $i1 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: int compareTo(long,long)>(dbLsn, lsn);

        goto label2;

     label1:
        $i1 = -1;

     label2:
        cmpDbLsnToLsn = $i1;

        if cmpDbLsnToLsn >= 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public volatile void transferToUtilizationTracker(berkeley.com.sleepycat.je.cleaner.UtilizationTracker) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker this;
        berkeley.com.sleepycat.je.cleaner.UtilizationTracker l1;

        this := @this: berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker;

        l1 := @parameter0: berkeley.com.sleepycat.je.cleaner.UtilizationTracker;

        specialinvoke this.<berkeley.com.sleepycat.je.cleaner.BaseLocalUtilizationTracker: void transferToUtilizationTracker(berkeley.com.sleepycat.je.cleaner.UtilizationTracker)>(l1);

        return;
    }

    berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseKeyToDatabaseImpl(java.lang.Object) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker this;
        java.lang.Object databaseKey;
        berkeley.com.sleepycat.je.dbi.DatabaseId dbId;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0;
        berkeley.com.sleepycat.je.dbi.DbTree $r1;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r2;

        this := @this: berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker;

        databaseKey := @parameter0: java.lang.Object;

        dbId = (berkeley.com.sleepycat.je.dbi.DatabaseId) databaseKey;

        $r0 = this.<berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker: berkeley.com.sleepycat.je.dbi.EnvironmentImpl env>;

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.DbTree getDbTree()>();

        $r2 = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.DbTree: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDb(berkeley.com.sleepycat.je.dbi.DatabaseId)>(dbId);

        return $r2;
    }

    void releaseDatabaseImpl(berkeley.com.sleepycat.je.dbi.DatabaseImpl)
    {
        berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0;
        berkeley.com.sleepycat.je.dbi.DbTree $r1;

        this := @this: berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker;

        db := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = this.<berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker: berkeley.com.sleepycat.je.dbi.EnvironmentImpl env>;

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.DbTree getDbTree()>();

        virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.DbTree: void releaseDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(db);

        return;
    }

    public void saveLastLoggedFileSummaryLN(long, long)
    {
        berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker this;
        long fileNum, lsn;
        java.util.Map $r0;
        java.lang.Long $r1, $r2;

        this := @this: berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker;

        fileNum := @parameter0: long;

        lsn := @parameter1: long;

        $r0 = this.<berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker: java.util.Map fileSummaryLsns>;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(fileNum);

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(lsn);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }

    public void resetFileInfo(long)
    {
        berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker this;
        long fileNum;
        berkeley.com.sleepycat.je.cleaner.TrackedFileSummary trackedSummary;

        this := @this: berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker;

        fileNum := @parameter0: long;

        trackedSummary = virtualinvoke this.<berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker: berkeley.com.sleepycat.je.cleaner.TrackedFileSummary getTrackedFile(long)>(fileNum);

        if trackedSummary == null goto label1;

        virtualinvoke trackedSummary.<berkeley.com.sleepycat.je.cleaner.TrackedFileSummary: void reset()>();

     label1:
        return;
    }

    public void saveLastLoggedMapLN(berkeley.com.sleepycat.je.dbi.DatabaseId, long)
    {
        berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker this;
        berkeley.com.sleepycat.je.dbi.DatabaseId dbId;
        long lsn;
        java.util.Map $r0;
        java.lang.Long $r1;

        this := @this: berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker;

        dbId := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseId;

        lsn := @parameter1: long;

        $r0 = this.<berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker: java.util.Map databaseLsns>;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(lsn);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(dbId, $r1);

        return;
    }

    public void resetDbInfo(berkeley.com.sleepycat.je.dbi.DatabaseId)
    {
        berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker this;
        berkeley.com.sleepycat.je.dbi.DatabaseId dbId;

        this := @this: berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker;

        dbId := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseId;

        virtualinvoke this.<berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker: void removeDbFileSummaries(java.lang.Object)>(dbId);

        return;
    }

    public void countNewLogEntry(long, berkeley.com.sleepycat.je.log.LogEntryType, int, berkeley.com.sleepycat.je.dbi.DatabaseId)
    {
        berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker this;
        long lsn;
        berkeley.com.sleepycat.je.log.LogEntryType type;
        int size;
        berkeley.com.sleepycat.je.dbi.DatabaseId dbId;

        this := @this: berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker;

        lsn := @parameter0: long;

        type := @parameter1: berkeley.com.sleepycat.je.log.LogEntryType;

        size := @parameter2: int;

        dbId := @parameter3: berkeley.com.sleepycat.je.dbi.DatabaseId;

        virtualinvoke this.<berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker: void countNew(long,java.lang.Object,berkeley.com.sleepycat.je.log.LogEntryType,int)>(lsn, dbId, type, size);

        return;
    }


