    public void dispose()
    {
        kanzi.entropy.HuffmanEncoder this;

        this := @this: kanzi.entropy.HuffmanEncoder;

        return;
    }

    public int encode(byte[], int, int)
    {
        kanzi.entropy.HuffmanEncoder this;
        byte[] array;
        int blkptr, len, end, sz, endChunk, endChunk8, $i0, $i1, $i2, $i3, startChunk#22, $i4, $i5, $i6, $i7, i#40, i#47, $i10, $i11, $i12, $i15, $i16, $i17, $i20, $i21, $i22, $i25, $i26, $i27, $i30, $i31, $i32, $i35, $i36, $i37, $i40, $i41, $i42, $i45, $i46, i#153, $i49, $i50, i#171, val#182, $i54, $i56, val#201, $i60, $i62, val#220, $i66, $i68, val#239, $i72, $i74, val#258, $i78, $i80, val#277, $i84, $i86, val#296, $i90, $i92, val#315, $i96, i#325, val#336, $i101;
        int[] frequencies, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25;
        byte $b8, $b13, $b18, $b23, $b28, $b33, $b38, $b43, $b47, $b51, $b57, $b63, $b69, $b75, $b81, $b87, $b93, $b98;
        short $s9, $s14, $s19, $s24, $s29, $s34, $s39, $s44, $s48, $s52, $s58, $s64, $s70, $s76, $s82, $s88, $s94, $s99;
        kanzi.OutputBitStream $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26;
        long $l53, $l59, $l65, $l71, $l77, $l83, $l89, $l95, $l100;

        this := @this: kanzi.entropy.HuffmanEncoder;

        array := @parameter0: byte[];

        blkptr := @parameter1: int;

        len := @parameter2: int;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(array);

        if array == null goto label01;

        $i0 = blkptr + len;

        $i1 = lengthof array;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i0 > $i1 goto label01;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(blkptr);

        if blkptr < 0 goto label01;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len);

        if len >= 0 goto label02;

     label01:
        return -1;

     label02:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len);

        if len != 0 goto label03;

        return 0;

     label03:
        frequencies = this.<kanzi.entropy.HuffmanEncoder: int[] freqs>;

        end = blkptr + len;

        $i2 = this.<kanzi.entropy.HuffmanEncoder: int chunkSize>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 != 0 goto label04;

        $i3 = len;

        goto label05;

     label04:
        $i3 = this.<kanzi.entropy.HuffmanEncoder: int chunkSize>;

     label05:
        sz = $i3;

        startChunk#22 = blkptr;

     label06:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(startChunk#22);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(end);

        if startChunk#22 >= end goto label19;

        $i4 = startChunk#22 + sz;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(end);

        if $i4 >= end goto label07;

        $i5 = startChunk#22 + sz;

        goto label08;

     label07:
        $i5 = end;

     label08:
        endChunk = $i5;

        $i6 = endChunk - startChunk#22;

        $i7 = $i6 & -8;

        endChunk8 = $i7 + startChunk#22;

        i#40 = 0;

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#40);

        if i#40 >= 256 goto label10;

        frequencies[i#40] = 0;

        i#40 = i#40 + 1;

        goto label09;

     label10:
        i#47 = startChunk#22;

     label11:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#47);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(endChunk8);

        if i#47 >= endChunk8 goto label12;

        $b8 = array[i#47];

        $s9 = $b8 & 255;

        $i10 = frequencies[$s9];

        $i11 = $i10 + 1;

        frequencies[$s9] = $i11;

        $i12 = i#47 + 1;

        $b13 = array[$i12];

        $s14 = $b13 & 255;

        $i15 = frequencies[$s14];

        $i16 = $i15 + 1;

        frequencies[$s14] = $i16;

        $i17 = i#47 + 2;

        $b18 = array[$i17];

        $s19 = $b18 & 255;

        $i20 = frequencies[$s19];

        $i21 = $i20 + 1;

        frequencies[$s19] = $i21;

        $i22 = i#47 + 3;

        $b23 = array[$i22];

        $s24 = $b23 & 255;

        $i25 = frequencies[$s24];

        $i26 = $i25 + 1;

        frequencies[$s24] = $i26;

        $i27 = i#47 + 4;

        $b28 = array[$i27];

        $s29 = $b28 & 255;

        $i30 = frequencies[$s29];

        $i31 = $i30 + 1;

        frequencies[$s29] = $i31;

        $i32 = i#47 + 5;

        $b33 = array[$i32];

        $s34 = $b33 & 255;

        $i35 = frequencies[$s34];

        $i36 = $i35 + 1;

        frequencies[$s34] = $i36;

        $i37 = i#47 + 6;

        $b38 = array[$i37];

        $s39 = $b38 & 255;

        $i40 = frequencies[$s39];

        $i41 = $i40 + 1;

        frequencies[$s39] = $i41;

        $i42 = i#47 + 7;

        $b43 = array[$i42];

        $s44 = $b43 & 255;

        $i45 = frequencies[$s44];

        $i46 = $i45 + 1;

        frequencies[$s44] = $i46;

        i#47 = i#47 + 8;

        goto label11;

     label12:
        i#153 = endChunk8;

     label13:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#153);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(endChunk);

        if i#153 >= endChunk goto label14;

        $b47 = array[i#153];

        $s48 = $b47 & 255;

        $i49 = frequencies[$s48];

        $i50 = $i49 + 1;

        frequencies[$s48] = $i50;

        i#153 = i#153 + 1;

        goto label13;

     label14:
        virtualinvoke this.<kanzi.entropy.HuffmanEncoder: boolean updateFrequencies(int[])>(frequencies);

        i#171 = startChunk#22;

     label15:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#171);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(endChunk8);

        if i#171 >= endChunk8 goto label16;

        $r9 = this.<kanzi.entropy.HuffmanEncoder: int[] codes>;

        $b51 = array[i#171];

        $s52 = $b51 & 255;

        val#182 = $r9[$s52];

        $r10 = this.<kanzi.entropy.HuffmanEncoder: kanzi.OutputBitStream bitstream>;

        $l53 = (long) val#182;

        $i54 = val#182 >>> 24;

        interfaceinvoke $r10.<kanzi.OutputBitStream: int writeBits(long,int)>($l53, $i54);

        $r11 = this.<kanzi.entropy.HuffmanEncoder: int[] codes>;

        $i56 = i#171 + 1;

        $b57 = array[$i56];

        $s58 = $b57 & 255;

        val#201 = $r11[$s58];

        $r12 = this.<kanzi.entropy.HuffmanEncoder: kanzi.OutputBitStream bitstream>;

        $l59 = (long) val#201;

        $i60 = val#201 >>> 24;

        interfaceinvoke $r12.<kanzi.OutputBitStream: int writeBits(long,int)>($l59, $i60);

        $r13 = this.<kanzi.entropy.HuffmanEncoder: int[] codes>;

        $i62 = i#171 + 2;

        $b63 = array[$i62];

        $s64 = $b63 & 255;

        val#220 = $r13[$s64];

        $r14 = this.<kanzi.entropy.HuffmanEncoder: kanzi.OutputBitStream bitstream>;

        $l65 = (long) val#220;

        $i66 = val#220 >>> 24;

        interfaceinvoke $r14.<kanzi.OutputBitStream: int writeBits(long,int)>($l65, $i66);

        $r15 = this.<kanzi.entropy.HuffmanEncoder: int[] codes>;

        $i68 = i#171 + 3;

        $b69 = array[$i68];

        $s70 = $b69 & 255;

        val#239 = $r15[$s70];

        $r16 = this.<kanzi.entropy.HuffmanEncoder: kanzi.OutputBitStream bitstream>;

        $l71 = (long) val#239;

        $i72 = val#239 >>> 24;

        interfaceinvoke $r16.<kanzi.OutputBitStream: int writeBits(long,int)>($l71, $i72);

        $r17 = this.<kanzi.entropy.HuffmanEncoder: int[] codes>;

        $i74 = i#171 + 4;

        $b75 = array[$i74];

        $s76 = $b75 & 255;

        val#258 = $r17[$s76];

        $r18 = this.<kanzi.entropy.HuffmanEncoder: kanzi.OutputBitStream bitstream>;

        $l77 = (long) val#258;

        $i78 = val#258 >>> 24;

        interfaceinvoke $r18.<kanzi.OutputBitStream: int writeBits(long,int)>($l77, $i78);

        $r19 = this.<kanzi.entropy.HuffmanEncoder: int[] codes>;

        $i80 = i#171 + 5;

        $b81 = array[$i80];

        $s82 = $b81 & 255;

        val#277 = $r19[$s82];

        $r20 = this.<kanzi.entropy.HuffmanEncoder: kanzi.OutputBitStream bitstream>;

        $l83 = (long) val#277;

        $i84 = val#277 >>> 24;

        interfaceinvoke $r20.<kanzi.OutputBitStream: int writeBits(long,int)>($l83, $i84);

        $r21 = this.<kanzi.entropy.HuffmanEncoder: int[] codes>;

        $i86 = i#171 + 6;

        $b87 = array[$i86];

        $s88 = $b87 & 255;

        val#296 = $r21[$s88];

        $r22 = this.<kanzi.entropy.HuffmanEncoder: kanzi.OutputBitStream bitstream>;

        $l89 = (long) val#296;

        $i90 = val#296 >>> 24;

        interfaceinvoke $r22.<kanzi.OutputBitStream: int writeBits(long,int)>($l89, $i90);

        $r23 = this.<kanzi.entropy.HuffmanEncoder: int[] codes>;

        $i92 = i#171 + 7;

        $b93 = array[$i92];

        $s94 = $b93 & 255;

        val#315 = $r23[$s94];

        $r24 = this.<kanzi.entropy.HuffmanEncoder: kanzi.OutputBitStream bitstream>;

        $l95 = (long) val#315;

        $i96 = val#315 >>> 24;

        interfaceinvoke $r24.<kanzi.OutputBitStream: int writeBits(long,int)>($l95, $i96);

        i#171 = i#171 + 8;

        goto label15;

     label16:
        i#325 = endChunk8;

     label17:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#325);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(endChunk);

        if i#325 >= endChunk goto label18;

        $r25 = this.<kanzi.entropy.HuffmanEncoder: int[] codes>;

        $b98 = array[i#325];

        $s99 = $b98 & 255;

        val#336 = $r25[$s99];

        $r26 = this.<kanzi.entropy.HuffmanEncoder: kanzi.OutputBitStream bitstream>;

        $l100 = (long) val#336;

        $i101 = val#336 >>> 24;

        interfaceinvoke $r26.<kanzi.OutputBitStream: int writeBits(long,int)>($l100, $i101);

        i#325 = i#325 + 1;

        goto label17;

     label18:
        startChunk#22 = endChunk;

        goto label06;

     label19:
        return len;
    }

    public boolean updateFrequencies(int[]) throws kanzi.BitStreamException
    {
        kanzi.entropy.HuffmanEncoder this;
        int[] frequencies, $r1, $r2, $r3, $r4, $r6, $r11, $r15, $r17, $r18, $r20, $r21;
        java.lang.IllegalArgumentException e, $r7;
        kanzi.entropy.ExpGolombEncoder egenc, $r12;
        short currSize, prevSize#64, $s12;
        int r, $i0, count#7, i#9, $i1, $i2, $i3, $i4, i#66, $i6, $i7, $i9, i#95, $i11, $i13, $i14;
        short[] $r0, $r5, $r14, $r16, $r22;
        kanzi.BitStreamException $r8, $r19;
        java.lang.String $r9;
        kanzi.OutputBitStream $r10, $r13;
        byte $b8;

        this := @this: kanzi.entropy.HuffmanEncoder;

        frequencies := @parameter0: int[];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(frequencies);

        if frequencies == null goto label01;

        $i0 = lengthof frequencies;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 == 256 goto label02;

     label01:
        return 0;

     label02:
        count#7 = 0;

        i#9 = 0;

     label03:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#9);

        if i#9 >= 256 goto label05;

        $r0 = this.<kanzi.entropy.HuffmanEncoder: short[] sizes>;

        $r0[i#9] = 0;

        $r1 = this.<kanzi.entropy.HuffmanEncoder: int[] codes>;

        $r1[i#9] = 0;

        $i1 = frequencies[i#9];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 0 goto label04;

        $r2 = this.<kanzi.entropy.HuffmanEncoder: int[] ranks>;

        $i2 = count#7;

        count#7 = count#7 + 1;

        $r2[$i2] = i#9;

     label04:
        i#9 = i#9 + 1;

        goto label03;

     label05:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count#7);

        if count#7 != 1 goto label06;

        $r3 = this.<kanzi.entropy.HuffmanEncoder: int[] sranks>;

        $r4 = this.<kanzi.entropy.HuffmanEncoder: int[] ranks>;

        $i3 = $r4[0];

        $r3[0] = $i3;

        $r5 = this.<kanzi.entropy.HuffmanEncoder: short[] sizes>;

        $r6 = this.<kanzi.entropy.HuffmanEncoder: int[] ranks>;

        $i4 = $r6[0];

        $r5[$i4] = 1;

        goto label07;

     label06:
        specialinvoke this.<kanzi.entropy.HuffmanEncoder: void computeCodeLengths(int[],int)>(frequencies, count#7);

     label07:
        goto label09;

     label08:
        $r7 := @caughtexception;

        e = $r7;

        $r8 = new kanzi.BitStreamException;

        $r9 = virtualinvoke e.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        specialinvoke $r8.<kanzi.BitStreamException: void <init>(java.lang.String,int)>($r9, 3);

        throw $r8;

     label09:
        $r10 = this.<kanzi.entropy.HuffmanEncoder: kanzi.OutputBitStream bitstream>;

        $r11 = this.<kanzi.entropy.HuffmanEncoder: int[] ranks>;

        staticinvoke <kanzi.entropy.EntropyUtils: int encodeAlphabet(kanzi.OutputBitStream,int[],int)>($r10, $r11, count#7);

        $r12 = new kanzi.entropy.ExpGolombEncoder;

        $r13 = this.<kanzi.entropy.HuffmanEncoder: kanzi.OutputBitStream bitstream>;

        specialinvoke $r12.<kanzi.entropy.ExpGolombEncoder: void <init>(kanzi.OutputBitStream,boolean)>($r13, 1);

        egenc = $r12;

        prevSize#64 = 2;

        i#66 = 0;

     label10:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#66);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count#7);

        if i#66 >= count#7 goto label11;

        $r14 = this.<kanzi.entropy.HuffmanEncoder: short[] sizes>;

        $r15 = this.<kanzi.entropy.HuffmanEncoder: int[] ranks>;

        $i6 = $r15[i#66];

        currSize = $r14[$i6];

        $i7 = currSize - prevSize#64;

        $b8 = (byte) $i7;

        virtualinvoke egenc.<kanzi.entropy.ExpGolombEncoder: void encodeByte(byte)>($b8);

        prevSize#64 = currSize;

        i#66 = i#66 + 1;

        goto label10;

     label11:
        $r16 = this.<kanzi.entropy.HuffmanEncoder: short[] sizes>;

        $r17 = this.<kanzi.entropy.HuffmanEncoder: int[] codes>;

        $r18 = this.<kanzi.entropy.HuffmanEncoder: int[] sranks>;

        $i9 = staticinvoke <kanzi.entropy.HuffmanCommon: int generateCanonicalCodes(short[],int[],int[],int)>($r16, $r17, $r18, count#7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        if $i9 >= 0 goto label12;

        $r19 = new kanzi.BitStreamException;

        specialinvoke $r19.<kanzi.BitStreamException: void <init>(java.lang.String,int)>("Could not generate codes: max code length (24 bits) exceeded", 3);

        throw $r19;

     label12:
        i#95 = 0;

     label13:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#95);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count#7);

        if i#95 >= count#7 goto label14;

        $r20 = this.<kanzi.entropy.HuffmanEncoder: int[] ranks>;

        r = $r20[i#95];

        $r21 = this.<kanzi.entropy.HuffmanEncoder: int[] codes>;

        $i11 = $r21[r];

        $r22 = this.<kanzi.entropy.HuffmanEncoder: short[] sizes>;

        $s12 = $r22[r];

        $i13 = $s12 << 24;

        $i14 = $i11 | $i13;

        $r21[r] = $i14;

        i#95 = i#95 + 1;

        goto label13;

     label14:
        return 1;

        catch java.lang.IllegalArgumentException from label05 to label07 with label08;
    }

    public void <init>(kanzi.OutputBitStream) throws kanzi.BitStreamException
    {
        kanzi.entropy.HuffmanEncoder this;
        kanzi.OutputBitStream bitstream;

        this := @this: kanzi.entropy.HuffmanEncoder;

        bitstream := @parameter0: kanzi.OutputBitStream;

        specialinvoke this.<kanzi.entropy.HuffmanEncoder: void <init>(kanzi.OutputBitStream,int)>(bitstream, 65536);

        return;
    }

    private void computeCodeLengths(int[], int)
    {
        kanzi.entropy.HuffmanEncoder this;
        int[] frequencies, $r0, $r1, $r4, $r5, $r6, $r7, $r8, $r9, $r12;
        int count, i#19, $i0, $i1, i#38, $i2, $i3;
        short codeLen;
        kanzi.util.sort.QuickSort $r2;
        kanzi.entropy.HuffmanCommon$FrequencyArrayComparator $r3;
        java.lang.IllegalArgumentException $r10;
        short[] $r11;

        this := @this: kanzi.entropy.HuffmanEncoder;

        frequencies := @parameter0: int[];

        count := @parameter1: int;

        $r0 = this.<kanzi.entropy.HuffmanEncoder: int[] ranks>;

        $r1 = this.<kanzi.entropy.HuffmanEncoder: int[] sranks>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, $r1, 0, count);

        $r2 = new kanzi.util.sort.QuickSort;

        $r3 = new kanzi.entropy.HuffmanCommon$FrequencyArrayComparator;

        specialinvoke $r3.<kanzi.entropy.HuffmanCommon$FrequencyArrayComparator: void <init>(int[])>(frequencies);

        specialinvoke $r2.<kanzi.util.sort.QuickSort: void <init>(kanzi.ArrayComparator)>($r3);

        $r4 = this.<kanzi.entropy.HuffmanEncoder: int[] sranks>;

        virtualinvoke $r2.<kanzi.util.sort.QuickSort: boolean sort(int[],int,int)>($r4, 0, count);

        i#19 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#19);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count);

        if i#19 >= count goto label2;

        $r5 = this.<kanzi.entropy.HuffmanEncoder: int[] buffer>;

        $r6 = this.<kanzi.entropy.HuffmanEncoder: int[] sranks>;

        $i0 = $r6[i#19];

        $i1 = frequencies[$i0];

        $r5[i#19] = $i1;

        i#19 = i#19 + 1;

        goto label1;

     label2:
        $r7 = this.<kanzi.entropy.HuffmanEncoder: int[] buffer>;

        staticinvoke <kanzi.entropy.HuffmanEncoder: void computeInPlaceSizesPhase1(int[],int)>($r7, count);

        $r8 = this.<kanzi.entropy.HuffmanEncoder: int[] buffer>;

        staticinvoke <kanzi.entropy.HuffmanEncoder: void computeInPlaceSizesPhase2(int[],int)>($r8, count);

        i#38 = 0;

     label3:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#38);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count);

        if i#38 >= count goto label6;

        $r9 = this.<kanzi.entropy.HuffmanEncoder: int[] buffer>;

        $i2 = $r9[i#38];

        codeLen = (short) $i2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(codeLen);

        if codeLen <= 0 goto label4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(codeLen);

        if codeLen <= 24 goto label5;

     label4:
        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Could not generate codes: max code length (24 bits) exceeded");

        throw $r10;

     label5:
        $r11 = this.<kanzi.entropy.HuffmanEncoder: short[] sizes>;

        $r12 = this.<kanzi.entropy.HuffmanEncoder: int[] sranks>;

        $i3 = $r12[i#38];

        $r11[$i3] = codeLen;

        i#38 = i#38 + 1;

        goto label3;

     label6:
        return;
    }

    static void computeInPlaceSizesPhase2(int[], int)
    {
        int[] data;
        int n, internal_nodes_at_level, leaves_at_level, level_top#4, depth#6, i#8, total_nodes_at_level#10, k#13, $i0, $i1, j#28;

        data := @parameter0: int[];

        n := @parameter1: int;

        level_top#4 = n - 2;

        depth#6 = 1;

        i#8 = n;

        total_nodes_at_level#10 = 2;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#8);

        if i#8 <= 0 goto label6;

        k#13 = level_top#4;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(k#13);

        if k#13 <= 0 goto label3;

        $i0 = k#13 - 1;

        $i1 = data[$i0];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(level_top#4);

        if $i1 < level_top#4 goto label3;

        k#13 = k#13 + -1;

        goto label2;

     label3:
        internal_nodes_at_level = level_top#4 - k#13;

        leaves_at_level = total_nodes_at_level#10 - internal_nodes_at_level;

        j#28 = 0;

     label4:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#28);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(leaves_at_level);

        if j#28 >= leaves_at_level goto label5;

        i#8 = i#8 + -1;

        data[i#8] = depth#6;

        j#28 = j#28 + 1;

        goto label4;

     label5:
        total_nodes_at_level#10 = internal_nodes_at_level << 1;

        level_top#4 = k#13;

        depth#6 = depth#6 + 1;

        goto label1;

     label6:
        return;
    }

    static void computeInPlaceSizesPhase1(int[], int)
    {
        int[] data;
        int n, s#2, r#4, t#6, $i0, sum#12, i#14, $i1, $i2, $i3, $i4;

        data := @parameter0: int[];

        n := @parameter1: int;

        s#2 = 0;

        r#4 = 0;

        t#6 = 0;

     label1:
        $i0 = n - 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(t#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if t#6 >= $i0 goto label8;

        sum#12 = 0;

        i#14 = 0;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#14);

        if i#14 >= 2 goto label7;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(s#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n);

        if s#2 >= n goto label3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(r#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(t#6);

        if r#4 >= t#6 goto label4;

        $i1 = data[r#4];

        $i2 = data[s#2];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i1 >= $i2 goto label4;

     label3:
        $i3 = data[r#4];

        sum#12 = sum#12 + $i3;

        data[r#4] = t#6;

        r#4 = r#4 + 1;

        goto label6;

     label4:
        $i4 = data[s#2];

        sum#12 = sum#12 + $i4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(s#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(t#6);

        if s#2 <= t#6 goto label5;

        data[s#2] = 0;

     label5:
        s#2 = s#2 + 1;

     label6:
        i#14 = i#14 + 1;

        goto label2;

     label7:
        data[t#6] = sum#12;

        t#6 = t#6 + 1;

        goto label1;

     label8:
        return;
    }

    public void <init>(kanzi.OutputBitStream, int) throws kanzi.BitStreamException
    {
        kanzi.entropy.HuffmanEncoder this;
        kanzi.OutputBitStream bitstream;
        int chunkSize, i#40;
        java.lang.NullPointerException $r0;
        java.lang.IllegalArgumentException $r1, $r2;
        int[] $r3, $r5, $r6, $r7, $r8, $r9, $r11;
        short[] $r4, $r10;

        this := @this: kanzi.entropy.HuffmanEncoder;

        bitstream := @parameter0: kanzi.OutputBitStream;

        chunkSize := @parameter1: int;

        specialinvoke this.<java.lang.Object: void <init>()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(bitstream);

        if bitstream != null goto label1;

        $r0 = new java.lang.NullPointerException;

        specialinvoke $r0.<java.lang.NullPointerException: void <init>(java.lang.String)>("Invalid null bitstream parameter");

        throw $r0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(chunkSize);

        if chunkSize == 0 goto label2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(chunkSize);

        if chunkSize >= 1024 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The chunk size must be at least 1024");

        throw $r1;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(chunkSize);

        if chunkSize <= 1073741824 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The chunk size must be at most 2^30");

        throw $r2;

     label3:
        this.<kanzi.entropy.HuffmanEncoder: kanzi.OutputBitStream bitstream> = bitstream;

        $r3 = newarray (int)[256];

        this.<kanzi.entropy.HuffmanEncoder: int[] freqs> = $r3;

        $r4 = newarray (short)[256];

        this.<kanzi.entropy.HuffmanEncoder: short[] sizes> = $r4;

        $r5 = newarray (int)[256];

        this.<kanzi.entropy.HuffmanEncoder: int[] ranks> = $r5;

        $r6 = newarray (int)[256];

        this.<kanzi.entropy.HuffmanEncoder: int[] sranks> = $r6;

        $r7 = newarray (int)[256];

        this.<kanzi.entropy.HuffmanEncoder: int[] buffer> = $r7;

        $r8 = newarray (int)[256];

        this.<kanzi.entropy.HuffmanEncoder: int[] codes> = $r8;

        this.<kanzi.entropy.HuffmanEncoder: int chunkSize> = chunkSize;

        i#40 = 0;

     label4:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#40);

        if i#40 >= 256 goto label5;

        $r9 = this.<kanzi.entropy.HuffmanEncoder: int[] freqs>;

        $r9[i#40] = 1;

        $r10 = this.<kanzi.entropy.HuffmanEncoder: short[] sizes>;

        $r10[i#40] = 8;

        $r11 = this.<kanzi.entropy.HuffmanEncoder: int[] codes>;

        $r11[i#40] = i#40;

        i#40 = i#40 + 1;

        goto label4;

     label5:
        return;
    }


