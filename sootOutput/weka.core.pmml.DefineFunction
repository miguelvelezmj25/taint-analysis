    public void <init>(org.w3c.dom.Element, weka.core.pmml.TransformationDictionary) throws java.lang.Exception
    {
        weka.core.pmml.DefineFunction this;
        org.w3c.dom.Element container, $r7;
        weka.core.pmml.TransformationDictionary transDict;
        java.lang.String opType, $r2, $r3;
        weka.core.pmml.FieldMetaInfo$Optype[] l4;
        int l5, $i0, l6#23, i#45, $i1;
        weka.core.pmml.FieldMetaInfo$Optype o, $r1, $r11, $r14, $r15, $r17, $r18, $r20, $r21, $r22, $r23, $r25, $r26, $r28, $r29;
        org.w3c.dom.NodeList paramL;
        org.w3c.dom.Node paramN;
        weka.core.pmml.DefineFunction$ParameterField newP, $r6;
        java.util.ArrayList $r0, $r5, $r8, $r9, $r12;
        boolean $z0, $z3, $z4;
        java.lang.Exception $r4, $r19, $r30;
        short $s2;
        weka.core.Attribute $r10;
        weka.core.pmml.Expression $r13, $r16, $r24, $r27;

        this := @this: weka.core.pmml.DefineFunction;

        container := @parameter0: org.w3c.dom.Element;

        transDict := @parameter1: weka.core.pmml.TransformationDictionary;

        specialinvoke this.<weka.core.pmml.Function: void <init>()>();

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        this.<weka.core.pmml.DefineFunction: java.util.ArrayList m_parameters> = $r0;

        $r1 = <weka.core.pmml.FieldMetaInfo$Optype: weka.core.pmml.FieldMetaInfo$Optype NONE>;

        this.<weka.core.pmml.DefineFunction: weka.core.pmml.FieldMetaInfo$Optype m_optype> = $r1;

        this.<weka.core.pmml.DefineFunction: weka.core.pmml.Expression m_expression> = null;

        $r2 = interfaceinvoke container.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("name");

        this.<weka.core.pmml.DefineFunction: java.lang.String m_functionName> = $r2;

        opType = interfaceinvoke container.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("optype");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(opType);

        if opType == null goto label04;

        $i0 = virtualinvoke opType.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label04;

        l4 = staticinvoke <weka.core.pmml.FieldMetaInfo$Optype: weka.core.pmml.FieldMetaInfo$Optype[] values()>();

        l5 = lengthof l4;

        l6#23 = 0;

     label01:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l6#23);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l5);

        if l6#23 >= l5 goto label03;

        o = l4[l6#23];

        $r3 = virtualinvoke o.<weka.core.pmml.FieldMetaInfo$Optype: java.lang.String toString()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(opType);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label02;

        this.<weka.core.pmml.DefineFunction: weka.core.pmml.FieldMetaInfo$Optype m_optype> = o;

        goto label03;

     label02:
        l6#23 = l6#23 + 1;

        goto label01;

     label03:
        goto label05;

     label04:
        $r4 = new java.lang.Exception;

        specialinvoke $r4.<java.lang.Exception: void <init>(java.lang.String)>("[DefineFunction] no optype specified!!");

        throw $r4;

     label05:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        this.<weka.core.pmml.DefineFunction: java.util.ArrayList m_parameterDefs> = $r5;

        paramL = interfaceinvoke container.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("ParameterField");

        i#45 = 0;

     label06:
        $i1 = interfaceinvoke paramL.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#45);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#45 >= $i1 goto label08;

        paramN = interfaceinvoke paramL.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i#45);

        $s2 = interfaceinvoke paramN.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s2);

        if $s2 != 1 goto label07;

        $r6 = new weka.core.pmml.DefineFunction$ParameterField;

        $r7 = (org.w3c.dom.Element) paramN;

        specialinvoke $r6.<weka.core.pmml.DefineFunction$ParameterField: void <init>(weka.core.pmml.DefineFunction,org.w3c.dom.Element)>(this, $r7);

        newP = $r6;

        $r8 = this.<weka.core.pmml.DefineFunction: java.util.ArrayList m_parameters>;

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>(newP);

        $r9 = this.<weka.core.pmml.DefineFunction: java.util.ArrayList m_parameterDefs>;

        $r10 = virtualinvoke newP.<weka.core.pmml.DefineFunction$ParameterField: weka.core.Attribute getFieldAsAttribute()>();

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r10);

     label07:
        i#45 = i#45 + 1;

        goto label06;

     label08:
        $r11 = this.<weka.core.pmml.DefineFunction: weka.core.pmml.FieldMetaInfo$Optype m_optype>;

        $r12 = this.<weka.core.pmml.DefineFunction: java.util.ArrayList m_parameterDefs>;

        $r13 = staticinvoke <weka.core.pmml.Expression: weka.core.pmml.Expression getExpression(org.w3c.dom.Node,weka.core.pmml.FieldMetaInfo$Optype,java.util.ArrayList,weka.core.pmml.TransformationDictionary)>(container, $r11, $r12, transDict);

        this.<weka.core.pmml.DefineFunction: weka.core.pmml.Expression m_expression> = $r13;

        $r14 = this.<weka.core.pmml.DefineFunction: weka.core.pmml.FieldMetaInfo$Optype m_optype>;

        $r15 = <weka.core.pmml.FieldMetaInfo$Optype: weka.core.pmml.FieldMetaInfo$Optype CONTINUOUS>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r14);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r15);

        if $r14 != $r15 goto label09;

        $r16 = this.<weka.core.pmml.DefineFunction: weka.core.pmml.Expression m_expression>;

        $r17 = virtualinvoke $r16.<weka.core.pmml.Expression: weka.core.pmml.FieldMetaInfo$Optype getOptype()>();

        $r18 = this.<weka.core.pmml.DefineFunction: weka.core.pmml.FieldMetaInfo$Optype m_optype>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r17);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r18);

        if $r17 == $r18 goto label09;

        $r19 = new java.lang.Exception;

        specialinvoke $r19.<java.lang.Exception: void <init>(java.lang.String)>("[DefineFunction] optype is continuous but our Expression\'s optype is not.");

        throw $r19;

     label09:
        $r20 = this.<weka.core.pmml.DefineFunction: weka.core.pmml.FieldMetaInfo$Optype m_optype>;

        $r21 = <weka.core.pmml.FieldMetaInfo$Optype: weka.core.pmml.FieldMetaInfo$Optype CATEGORICAL>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r20);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r21);

        if $r20 == $r21 goto label10;

        $r22 = this.<weka.core.pmml.DefineFunction: weka.core.pmml.FieldMetaInfo$Optype m_optype>;

        $r23 = <weka.core.pmml.FieldMetaInfo$Optype: weka.core.pmml.FieldMetaInfo$Optype ORDINAL>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r22);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r23);

        if $r22 != $r23 goto label11;

     label10:
        $z3 = 1;

        goto label12;

     label11:
        $z3 = 0;

     label12:
        $r24 = this.<weka.core.pmml.DefineFunction: weka.core.pmml.Expression m_expression>;

        $r25 = virtualinvoke $r24.<weka.core.pmml.Expression: weka.core.pmml.FieldMetaInfo$Optype getOptype()>();

        $r26 = <weka.core.pmml.FieldMetaInfo$Optype: weka.core.pmml.FieldMetaInfo$Optype CATEGORICAL>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r25);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r26);

        if $r25 == $r26 goto label13;

        $r27 = this.<weka.core.pmml.DefineFunction: weka.core.pmml.Expression m_expression>;

        $r28 = virtualinvoke $r27.<weka.core.pmml.Expression: weka.core.pmml.FieldMetaInfo$Optype getOptype()>();

        $r29 = <weka.core.pmml.FieldMetaInfo$Optype: weka.core.pmml.FieldMetaInfo$Optype ORDINAL>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r28);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r29);

        if $r28 != $r29 goto label14;

     label13:
        $z4 = 1;

        goto label15;

     label14:
        $z4 = 0;

     label15:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z3 == $z4 goto label16;

        $r30 = new java.lang.Exception;

        specialinvoke $r30.<java.lang.Exception: void <init>(java.lang.String)>("[DefineFunction] optype is categorical/ordinal but our Expression\'s optype is not.");

        throw $r30;

     label16:
        return;
    }


