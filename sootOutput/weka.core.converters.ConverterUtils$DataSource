    public static boolean isArff(java.lang.String)
    {
        java.lang.String location, $r0, $r1, $r2, $r3, $r4, $r5;
        boolean $z0, $z1;

        location := @parameter0: java.lang.String;

        $r0 = virtualinvoke location.<java.lang.String: java.lang.String toLowerCase()>();

        $r1 = <weka.core.converters.ArffLoader: java.lang.String FILE_EXTENSION>;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r0.<java.lang.String: boolean endsWith(java.lang.String)>($r2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r3 = virtualinvoke location.<java.lang.String: java.lang.String toLowerCase()>();

        $r4 = <weka.core.converters.ArffLoader: java.lang.String FILE_EXTENSION_COMPRESSED>;

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean endsWith(java.lang.String)>($r5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public void <init>(weka.core.Instances)
    {
        weka.core.converters.ConverterUtils$DataSource this;
        weka.core.Instances inst;

        this := @this: weka.core.converters.ConverterUtils$DataSource;

        inst := @parameter0: weka.core.Instances;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<weka.core.converters.ConverterUtils$DataSource: weka.core.Instances m_BatchBuffer> = inst;

        this.<weka.core.converters.ConverterUtils$DataSource: weka.core.converters.Loader m_Loader> = null;

        this.<weka.core.converters.ConverterUtils$DataSource: java.io.File m_File> = null;

        this.<weka.core.converters.ConverterUtils$DataSource: java.net.URL m_URL> = null;

        this.<weka.core.converters.ConverterUtils$DataSource: boolean m_Incremental> = 0;

        return;
    }

    public void <init>(java.lang.String) throws java.lang.Exception
    {
        weka.core.converters.ConverterUtils$DataSource this;
        java.lang.String location, $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.net.URL $r0;
        java.io.File $r1, $r3;
        weka.core.converters.ArffLoader $r2;
        weka.core.converters.AbstractFileLoader $r4, $r5;
        weka.core.converters.Loader $r6, $r13;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;

        this := @this: weka.core.converters.ConverterUtils$DataSource;

        location := @parameter0: java.lang.String;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $z0 = virtualinvoke location.<java.lang.String: boolean startsWith(java.lang.String)>("http://");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke location.<java.lang.String: boolean startsWith(java.lang.String)>("https://");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke location.<java.lang.String: boolean startsWith(java.lang.String)>("ftp://");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke location.<java.lang.String: boolean startsWith(java.lang.String)>("file://");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label2;

     label1:
        $r0 = new java.net.URL;

        specialinvoke $r0.<java.net.URL: void <init>(java.lang.String)>(location);

        this.<weka.core.converters.ConverterUtils$DataSource: java.net.URL m_URL> = $r0;

        goto label3;

     label2:
        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(location);

        this.<weka.core.converters.ConverterUtils$DataSource: java.io.File m_File> = $r1;

     label3:
        $z4 = staticinvoke <weka.core.converters.ConverterUtils$DataSource: boolean isArff(java.lang.String)>(location);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label4;

        $r2 = new weka.core.converters.ArffLoader;

        specialinvoke $r2.<weka.core.converters.ArffLoader: void <init>()>();

        this.<weka.core.converters.ConverterUtils$DataSource: weka.core.converters.Loader m_Loader> = $r2;

        goto label7;

     label4:
        $r3 = this.<weka.core.converters.ConverterUtils$DataSource: java.io.File m_File>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r3);

        if $r3 == null goto label5;

        $r4 = staticinvoke <weka.core.converters.ConverterUtils: weka.core.converters.AbstractFileLoader getLoaderForFile(java.lang.String)>(location);

        this.<weka.core.converters.ConverterUtils$DataSource: weka.core.converters.Loader m_Loader> = $r4;

        goto label6;

     label5:
        $r5 = staticinvoke <weka.core.converters.ConverterUtils: weka.core.converters.AbstractFileLoader getURLLoaderForFile(java.lang.String)>(location);

        this.<weka.core.converters.ConverterUtils$DataSource: weka.core.converters.Loader m_Loader> = $r5;

     label6:
        $r6 = this.<weka.core.converters.ConverterUtils$DataSource: weka.core.converters.Loader m_Loader>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r6);

        if $r6 != null goto label7;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No suitable converter found for \'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(location);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'!");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label7:
        $r13 = this.<weka.core.converters.ConverterUtils$DataSource: weka.core.converters.Loader m_Loader>;

        $z5 = $r13 instanceof weka.core.converters.IncrementalConverter;

        this.<weka.core.converters.ConverterUtils$DataSource: boolean m_Incremental> = $z5;

        virtualinvoke this.<weka.core.converters.ConverterUtils$DataSource: void reset()>();

        return;
    }

    public void reset() throws java.lang.Exception
    {
        weka.core.converters.ConverterUtils$DataSource this;
        java.io.File $r0, $r3;
        weka.core.converters.Loader $r1, $r5, $r9, $r10, $r11, $r12;
        weka.core.converters.AbstractFileLoader $r2;
        java.net.URL $r4, $r7;
        weka.core.converters.URLSourcedLoader $r6;
        java.lang.String $r8;
        boolean $z0;
        weka.core.Instances $r13;

        this := @this: weka.core.converters.ConverterUtils$DataSource;

        $r0 = this.<weka.core.converters.ConverterUtils$DataSource: java.io.File m_File>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label1;

        $r1 = this.<weka.core.converters.ConverterUtils$DataSource: weka.core.converters.Loader m_Loader>;

        $r2 = (weka.core.converters.AbstractFileLoader) $r1;

        $r3 = this.<weka.core.converters.ConverterUtils$DataSource: java.io.File m_File>;

        virtualinvoke $r2.<weka.core.converters.AbstractFileLoader: void setFile(java.io.File)>($r3);

        goto label3;

     label1:
        $r4 = this.<weka.core.converters.ConverterUtils$DataSource: java.net.URL m_URL>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        if $r4 == null goto label2;

        $r5 = this.<weka.core.converters.ConverterUtils$DataSource: weka.core.converters.Loader m_Loader>;

        $r6 = (weka.core.converters.URLSourcedLoader) $r5;

        $r7 = this.<weka.core.converters.ConverterUtils$DataSource: java.net.URL m_URL>;

        $r8 = virtualinvoke $r7.<java.net.URL: java.lang.String toString()>();

        interfaceinvoke $r6.<weka.core.converters.URLSourcedLoader: void setURL(java.lang.String)>($r8);

        goto label3;

     label2:
        $r9 = this.<weka.core.converters.ConverterUtils$DataSource: weka.core.converters.Loader m_Loader>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r9);

        if $r9 == null goto label3;

        $r10 = this.<weka.core.converters.ConverterUtils$DataSource: weka.core.converters.Loader m_Loader>;

        interfaceinvoke $r10.<weka.core.converters.Loader: void reset()>();

     label3:
        this.<weka.core.converters.ConverterUtils$DataSource: int m_BatchCounter> = 0;

        this.<weka.core.converters.ConverterUtils$DataSource: weka.core.Instance m_IncrementalBuffer> = null;

        $r11 = this.<weka.core.converters.ConverterUtils$DataSource: weka.core.converters.Loader m_Loader>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r11);

        if $r11 == null goto label5;

        $z0 = virtualinvoke this.<weka.core.converters.ConverterUtils$DataSource: boolean isIncremental()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label4;

        $r12 = this.<weka.core.converters.ConverterUtils$DataSource: weka.core.converters.Loader m_Loader>;

        $r13 = interfaceinvoke $r12.<weka.core.converters.Loader: weka.core.Instances getDataSet()>();

        this.<weka.core.converters.ConverterUtils$DataSource: weka.core.Instances m_BatchBuffer> = $r13;

        goto label5;

     label4:
        this.<weka.core.converters.ConverterUtils$DataSource: weka.core.Instances m_BatchBuffer> = null;

     label5:
        return;
    }

    public boolean isIncremental()
    {
        weka.core.converters.ConverterUtils$DataSource this;
        boolean $z0;

        this := @this: weka.core.converters.ConverterUtils$DataSource;

        $z0 = this.<weka.core.converters.ConverterUtils$DataSource: boolean m_Incremental>;

        return $z0;
    }

    public weka.core.Instances getStructure() throws java.lang.Exception
    {
        weka.core.converters.ConverterUtils$DataSource this;
        weka.core.Instances $r0, $r2, $r3, $r4;
        weka.core.converters.Loader $r1;

        this := @this: weka.core.converters.ConverterUtils$DataSource;

        $r0 = this.<weka.core.converters.ConverterUtils$DataSource: weka.core.Instances m_BatchBuffer>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label1;

        $r1 = this.<weka.core.converters.ConverterUtils$DataSource: weka.core.converters.Loader m_Loader>;

        $r2 = interfaceinvoke $r1.<weka.core.converters.Loader: weka.core.Instances getStructure()>();

        return $r2;

     label1:
        $r3 = new weka.core.Instances;

        $r4 = this.<weka.core.converters.ConverterUtils$DataSource: weka.core.Instances m_BatchBuffer>;

        specialinvoke $r3.<weka.core.Instances: void <init>(weka.core.Instances,int)>($r4, 0);

        return $r3;
    }

    public weka.core.Instances getDataSet(int) throws java.lang.Exception
    {
        weka.core.converters.ConverterUtils$DataSource this;
        int classIndex;
        weka.core.Instances result;

        this := @this: weka.core.converters.ConverterUtils$DataSource;

        classIndex := @parameter0: int;

        result = virtualinvoke this.<weka.core.converters.ConverterUtils$DataSource: weka.core.Instances getDataSet()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(result);

        if result == null goto label1;

        virtualinvoke result.<weka.core.Instances: void setClassIndex(int)>(classIndex);

     label1:
        return result;
    }

    public weka.core.Instances getStructure(int) throws java.lang.Exception
    {
        weka.core.converters.ConverterUtils$DataSource this;
        int classIndex;
        weka.core.Instances result;

        this := @this: weka.core.converters.ConverterUtils$DataSource;

        classIndex := @parameter0: int;

        result = virtualinvoke this.<weka.core.converters.ConverterUtils$DataSource: weka.core.Instances getStructure()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(result);

        if result == null goto label1;

        virtualinvoke result.<weka.core.Instances: void setClassIndex(int)>(classIndex);

     label1:
        return result;
    }

    public boolean hasMoreElements(weka.core.Instances)
    {
        weka.core.converters.ConverterUtils$DataSource this;
        weka.core.Instances structure, $r5;
        java.lang.Exception e, $r4;
        boolean result#2, $z0, result#8, $z1, $z2;
        weka.core.Instance $r0, $r2, $r3;
        weka.core.converters.Loader $r1;
        int $i0, $i1;

        this := @this: weka.core.converters.ConverterUtils$DataSource;

        structure := @parameter0: weka.core.Instances;

        result#2 = 0;

        $z0 = virtualinvoke this.<weka.core.converters.ConverterUtils$DataSource: boolean isIncremental()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label6;

        $r0 = this.<weka.core.converters.ConverterUtils$DataSource: weka.core.Instance m_IncrementalBuffer>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label1;

        result#8 = 1;

        goto label9;

     label1:
        $r1 = this.<weka.core.converters.ConverterUtils$DataSource: weka.core.converters.Loader m_Loader>;

        $r2 = interfaceinvoke $r1.<weka.core.converters.Loader: weka.core.Instance getNextInstance(weka.core.Instances)>(structure);

        this.<weka.core.converters.ConverterUtils$DataSource: weka.core.Instance m_IncrementalBuffer> = $r2;

        $r3 = this.<weka.core.converters.ConverterUtils$DataSource: weka.core.Instance m_IncrementalBuffer>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r3);

        if $r3 == null goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        result#8 = $z1;

     label4:
        goto label9;

     label5:
        $r4 := @caughtexception;

        e = $r4;

        virtualinvoke e.<java.lang.Exception: void printStackTrace()>();

        result#8 = 0;

        goto label9;

     label6:
        $i0 = this.<weka.core.converters.ConverterUtils$DataSource: int m_BatchCounter>;

        $r5 = this.<weka.core.converters.ConverterUtils$DataSource: weka.core.Instances m_BatchBuffer>;

        $i1 = virtualinvoke $r5.<weka.core.Instances: int numInstances()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i0 >= $i1 goto label7;

        $z2 = 1;

        goto label8;

     label7:
        $z2 = 0;

     label8:
        result#8 = $z2;

     label9:
        return result#8;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    public weka.core.Instance nextElement(weka.core.Instances)
    {
        weka.core.converters.ConverterUtils$DataSource this;
        weka.core.Instances dataset, $r3, $r4;
        java.lang.Exception e, $r2;
        weka.core.Instance result#2, $r0;
        boolean $z0;
        weka.core.converters.Loader $r1;
        int $i0, $i1, $i2, $i3, $i4;

        this := @this: weka.core.converters.ConverterUtils$DataSource;

        dataset := @parameter0: weka.core.Instances;

        result#2 = null;

        $z0 = virtualinvoke this.<weka.core.converters.ConverterUtils$DataSource: boolean isIncremental()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label4;

        $r0 = this.<weka.core.converters.ConverterUtils$DataSource: weka.core.Instance m_IncrementalBuffer>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label1;

        result#2 = this.<weka.core.converters.ConverterUtils$DataSource: weka.core.Instance m_IncrementalBuffer>;

        this.<weka.core.converters.ConverterUtils$DataSource: weka.core.Instance m_IncrementalBuffer> = null;

        goto label5;

     label1:
        $r1 = this.<weka.core.converters.ConverterUtils$DataSource: weka.core.converters.Loader m_Loader>;

        result#2 = interfaceinvoke $r1.<weka.core.converters.Loader: weka.core.Instance getNextInstance(weka.core.Instances)>(dataset);

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        e = $r2;

        virtualinvoke e.<java.lang.Exception: void printStackTrace()>();

        result#2 = null;

        goto label5;

     label4:
        $i0 = this.<weka.core.converters.ConverterUtils$DataSource: int m_BatchCounter>;

        $r3 = this.<weka.core.converters.ConverterUtils$DataSource: weka.core.Instances m_BatchBuffer>;

        $i1 = virtualinvoke $r3.<weka.core.Instances: int numInstances()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i0 >= $i1 goto label5;

        $r4 = this.<weka.core.converters.ConverterUtils$DataSource: weka.core.Instances m_BatchBuffer>;

        $i2 = this.<weka.core.converters.ConverterUtils$DataSource: int m_BatchCounter>;

        result#2 = virtualinvoke $r4.<weka.core.Instances: weka.core.Instance instance(int)>($i2);

        $i3 = this.<weka.core.converters.ConverterUtils$DataSource: int m_BatchCounter>;

        $i4 = $i3 + 1;

        this.<weka.core.converters.ConverterUtils$DataSource: int m_BatchCounter> = $i4;

     label5:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(result#2);

        if result#2 == null goto label6;

        interfaceinvoke result#2.<weka.core.Instance: void setDataset(weka.core.Instances)>(dataset);

     label6:
        return result#2;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public weka.core.Instances getDataSet() throws java.lang.Exception
    {
        weka.core.converters.ConverterUtils$DataSource this;
        java.lang.Exception e, $r2;
        weka.core.Instances $r0, result#9;
        weka.core.converters.Loader $r1;

        this := @this: weka.core.converters.ConverterUtils$DataSource;

        virtualinvoke this.<weka.core.converters.ConverterUtils$DataSource: void reset()>();

     label1:
        $r0 = this.<weka.core.converters.ConverterUtils$DataSource: weka.core.Instances m_BatchBuffer>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label2;

        $r1 = this.<weka.core.converters.ConverterUtils$DataSource: weka.core.converters.Loader m_Loader>;

        result#9 = interfaceinvoke $r1.<weka.core.converters.Loader: weka.core.Instances getDataSet()>();

        goto label3;

     label2:
        result#9 = this.<weka.core.converters.ConverterUtils$DataSource: weka.core.Instances m_BatchBuffer>;

     label3:
        goto label5;

     label4:
        $r2 := @caughtexception;

        e = $r2;

        virtualinvoke e.<java.lang.Exception: void printStackTrace()>();

        result#9 = null;

     label5:
        return result#9;

        catch java.lang.Exception from label1 to label3 with label4;
    }


