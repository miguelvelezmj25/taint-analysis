    public boolean apply(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.filter.FastBilateralFilter this;
        kanzi.SliceIntArray input, output;
        int[] src, dst, buf1, buf2#31, $r7;
        int srcIdx, dstIdx, ds, scaledH, scaledW, len, xx, yy, ww, hh, shift, val, maxGrayIdx, end, val, colorIdx, color, scaledSize, w, endX, val, k, val2, val2, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, iOffs#87, oOffs#89, y#92, $i19, $i20, $i21, channel#109, $i22, min#117, max#119, i#121, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, i#180, jk_idx0#197, jk_idx1#199, $i35, grayRangeIdx#216, offs#220, y#226, x#233, $i36, $i37, $i38, $i39, $i40, $i41, n#296, iOffs#310, oOffs#312, y#322, $i43, $i44, $i45, x#340, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73;
        float[] wk_, jk0, jk1, $r1, $r2, $r3, $r4, jk_#204, $r6, $r8, $r9;
        kanzi.util.sampling.DecimateDownSampler sampler, $r0;
        float fmin, fmax, delta, shift_inv, delta_scale, gray, maxW, maxH, ys, kf, alpha, xs, xs, $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30;
        boolean $z0, $z1;
        float[][] $r5, $r11, $r12, $r17;

        this := @this: kanzi.filter.FastBilateralFilter;

        input := @parameter0: kanzi.SliceIntArray;

        output := @parameter1: kanzi.SliceIntArray;

        $z0 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(input);

        if $z0 == 0 goto label01;

        $z1 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(output);

        if $z1 != 0 goto label02;

     label01:
        return 0;

     label02:
        src = input.<kanzi.SliceIntArray: int[] array>;

        dst = output.<kanzi.SliceIntArray: int[] array>;

        srcIdx = input.<kanzi.SliceIntArray: int index>;

        dstIdx = output.<kanzi.SliceIntArray: int index>;

        buf1 = this.<kanzi.filter.FastBilateralFilter: int[] buffer1>;

        wk_ = this.<kanzi.filter.FastBilateralFilter: float[] wk>;

        ds = this.<kanzi.filter.FastBilateralFilter: int downSampling>;

        $i0 = this.<kanzi.filter.FastBilateralFilter: int height>;

        scaledH = $i0 >> ds;

        $i1 = this.<kanzi.filter.FastBilateralFilter: int width>;

        scaledW = $i1 >> ds;

        len = lengthof src;

        buf2#31 = src;

        if ds <= 0 goto label07;

        buf2#31 = this.<kanzi.filter.FastBilateralFilter: int[] buffer2>;

        $i2 = this.<kanzi.filter.FastBilateralFilter: int stride>;

        xx = srcIdx % $i2;

        $i3 = this.<kanzi.filter.FastBilateralFilter: int stride>;

        yy = srcIdx / $i3;

        $i4 = this.<kanzi.filter.FastBilateralFilter: int width>;

        $i5 = $i4 + xx;

        $i6 = this.<kanzi.filter.FastBilateralFilter: int stride>;

        if $i5 >= $i6 goto label03;

        $i7 = this.<kanzi.filter.FastBilateralFilter: int width>;

        goto label04;

     label03:
        $i8 = this.<kanzi.filter.FastBilateralFilter: int stride>;

        $i7 = $i8 - xx;

     label04:
        ww = $i7;

        $i9 = this.<kanzi.filter.FastBilateralFilter: int height>;

        $i10 = $i9 + yy;

        $i11 = this.<kanzi.filter.FastBilateralFilter: int stride>;

        $i12 = $i10 * $i11;

        if $i12 > len goto label05;

        $i13 = this.<kanzi.filter.FastBilateralFilter: int height>;

        goto label06;

     label05:
        $i14 = this.<kanzi.filter.FastBilateralFilter: int height>;

        $i13 = $i14 - yy;

     label06:
        hh = $i13;

        $r0 = new kanzi.util.sampling.DecimateDownSampler;

        $i15 = this.<kanzi.filter.FastBilateralFilter: int stride>;

        $i16 = 1 << ds;

        specialinvoke $r0.<kanzi.util.sampling.DecimateDownSampler: void <init>(int,int,int,int,int)>(ww, hh, $i15, srcIdx, $i16);

        sampler = $r0;

        virtualinvoke sampler.<kanzi.util.sampling.DecimateDownSampler: void subSample(int[],int[])>(src, buf2#31);

        goto label10;

     label07:
        if srcIdx != 0 goto label08;

        $i17 = this.<kanzi.filter.FastBilateralFilter: int stride>;

        $i18 = this.<kanzi.filter.FastBilateralFilter: int width>;

        if $i17 == $i18 goto label10;

     label08:
        buf2#31 = this.<kanzi.filter.FastBilateralFilter: int[] buffer2>;

        iOffs#87 = srcIdx;

        oOffs#89 = dstIdx;

        y#92 = this.<kanzi.filter.FastBilateralFilter: int height>;

     label09:
        if y#92 <= 0 goto label10;

        $i19 = this.<kanzi.filter.FastBilateralFilter: int width>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(src, iOffs#87, buf2#31, oOffs#89, $i19);

        $i20 = this.<kanzi.filter.FastBilateralFilter: int stride>;

        iOffs#87 = iOffs#87 + $i20;

        $i21 = this.<kanzi.filter.FastBilateralFilter: int width>;

        oOffs#89 = oOffs#89 + $i21;

        y#92 = y#92 + -1;

        goto label09;

     label10:
        channel#109 = 0;

     label11:
        $i22 = this.<kanzi.filter.FastBilateralFilter: int channels>;

        if channel#109 >= $i22 goto label34;

        shift = channel#109 << 3;

        min#117 = 255;

        max#119 = 0;

        i#121 = 0;

     label12:
        $i23 = lengthof buf1;

        if i#121 >= $i23 goto label13;

        $i24 = buf2#31[i#121];

        $i25 = $i24 >> shift;

        val = $i25 & 255;

        $i26 = max#119 - val;

        $i27 = $i26 >> 31;

        $i28 = max#119 - val;

        $i29 = $i27 & $i28;

        max#119 = max#119 - $i29;

        $i30 = val - min#117;

        $i31 = $i30 >> 31;

        $i32 = val - min#117;

        $i33 = $i31 & $i32;

        min#117 = min#117 + $i33;

        buf1[i#121] = val;

        i#121 = i#121 + 1;

        goto label12;

     label13:
        fmin = (float) min#117;

        fmax = (float) max#119;

        $r1 = this.<kanzi.filter.FastBilateralFilter: float[] grayscale>;

        $i34 = lengthof $r1;

        maxGrayIdx = $i34 - 1;

        $r2 = this.<kanzi.filter.FastBilateralFilter: float[] grayscale>;

        $r2[0] = fmin;

        $r3 = this.<kanzi.filter.FastBilateralFilter: float[] grayscale>;

        $r3[maxGrayIdx] = fmax;

        $f0 = fmax - fmin;

        delta = $f0 + 0.01F;

        i#180 = 1;

     label14:
        if i#180 >= maxGrayIdx goto label15;

        $r4 = this.<kanzi.filter.FastBilateralFilter: float[] grayscale>;

        $f1 = (float) min#117;

        $f2 = (float) i#180;

        $f3 = (float) maxGrayIdx;

        $f4 = delta / $f3;

        $f5 = $f2 * $f4;

        $f6 = $f1 + $f5;

        $r4[i#180] = $f6;

        i#180 = i#180 + 1;

        goto label14;

     label15:
        jk_idx0#197 = 0;

        jk_idx1#199 = 1;

        $r5 = this.<kanzi.filter.FastBilateralFilter: float[][] jk>;

        jk_#204 = $r5[0];

        $i35 = 1 << ds;

        $f7 = (float) $i35;

        shift_inv = 1.0F / $f7;

        $f8 = (float) maxGrayIdx;

        delta_scale = $f8 / delta;

        grayRangeIdx#216 = 0;

     label16:
        if grayRangeIdx#216 > maxGrayIdx goto label33;

        offs#220 = 0;

        $r6 = this.<kanzi.filter.FastBilateralFilter: float[] grayscale>;

        gray = $r6[grayRangeIdx#216];

        y#226 = 0;

     label17:
        if y#226 >= scaledH goto label20;

        end = offs#220 + scaledW;

        x#233 = offs#220;

     label18:
        if x#233 >= end goto label19;

        $i36 = buf1[x#233];

        val = $i36 & 255;

        $f9 = (float) val;

        $f10 = gray - $f9;

        $f11 = staticinvoke <java.lang.Math: float abs(float)>($f10);

        $f12 = $f11 + 0.5F;

        colorIdx = (int) $f12;

        $r7 = this.<kanzi.filter.FastBilateralFilter: int[] colors>;

        color = $r7[colorIdx];

        $i37 = color * val;

        $f13 = (float) $i37;

        jk_#204[x#233] = $f13;

        $f14 = (float) color;

        wk_[x#233] = $f14;

        x#233 = x#233 + 1;

        goto label18;

     label19:
        offs#220 = offs#220 + scaledW;

        y#226 = y#226 + 1;

        goto label17;

     label20:
        $r8 = this.<kanzi.filter.FastBilateralFilter: float[] box>;

        $i38 = this.<kanzi.filter.FastBilateralFilter: int radius>;

        $f15 = (float) $i38;

        staticinvoke <kanzi.filter.FastBilateralFilter: void gaussianRecursive(float[],float[],int,int,float)>(jk_#204, $r8, scaledW, scaledH, $f15);

        $r9 = this.<kanzi.filter.FastBilateralFilter: float[] box>;

        $i39 = this.<kanzi.filter.FastBilateralFilter: int radius>;

        $f16 = (float) $i39;

        staticinvoke <kanzi.filter.FastBilateralFilter: void gaussianRecursive(float[],float[],int,int,float)>(wk_, $r9, scaledW, scaledH, $f16);

        scaledSize = scaledW * scaledH;

        $i40 = scaledW - 2;

        maxW = (float) $i40;

        $i41 = scaledH - 2;

        maxH = (float) $i41;

        w = this.<kanzi.filter.FastBilateralFilter: int width>;

        n#296 = 0;

     label21:
        if n#296 >= scaledSize goto label22;

        $f17 = jk_#204[n#296];

        $f18 = wk_[n#296];

        $f19 = $f17 / $f18;

        jk_#204[n#296] = $f19;

        n#296 = n#296 + 1;

        goto label21;

     label22:
        if grayRangeIdx#216 == 0 goto label32;

        iOffs#310 = srcIdx;

        oOffs#312 = dstIdx;

        $r11 = this.<kanzi.filter.FastBilateralFilter: float[][] jk>;

        jk0 = $r11[jk_idx0#197];

        $r12 = this.<kanzi.filter.FastBilateralFilter: float[][] jk>;

        jk1 = $r12[jk_idx1#199];

        y#322 = 0;

     label23:
        $i43 = this.<kanzi.filter.FastBilateralFilter: int height>;

        if y#322 >= $i43 goto label31;

        $f20 = (float) y#322;

        $f21 = $f20 * shift_inv;

        ys = staticinvoke <java.lang.Math: float min(float,float)>($f21, maxH);

        $i44 = iOffs#310 + w;

        if $i44 >= len goto label24;

        $i45 = w;

        goto label25;

     label24:
        $i45 = len - iOffs#310;

     label25:
        endX = $i45;

        x#340 = 0;

     label26:
        if x#340 >= endX goto label29;

        $i46 = iOffs#310 + x#340;

        $i47 = src[$i46];

        $i48 = $i47 >> shift;

        val = $i48 & 255;

        $i49 = val - min#117;

        $f22 = (float) $i49;

        kf = $f22 * delta_scale;

        k = (int) kf;

        $i50 = grayRangeIdx#216 - 1;

        if k != $i50 goto label27;

        $i51 = k + 1;

        $f23 = (float) $i51;

        alpha = $f23 - kf;

        $f24 = (float) x#340;

        $f25 = $f24 * shift_inv;

        xs = staticinvoke <java.lang.Math: float min(float,float)>($f25, maxW);

        $f26 = staticinvoke <kanzi.filter.FastBilateralFilter: float interpolateLinearXY2(float[],float[],float,float,float,int)>(jk0, jk1, alpha, xs, ys, scaledW);

        val2 = (int) $f26;

        $i52 = oOffs#312 + x#340;

        $i53 = dst[$i52];

        $i54 = 255 << shift;

        $i55 = $i54 ^ -1;

        $i56 = $i53 & $i55;

        dst[$i52] = $i56;

        $i57 = oOffs#312 + x#340;

        $i58 = dst[$i57];

        $i59 = val2 & 255;

        $i60 = $i59 << shift;

        $i61 = $i58 | $i60;

        dst[$i57] = $i61;

        goto label28;

     label27:
        if grayRangeIdx#216 != maxGrayIdx goto label28;

        if k != grayRangeIdx#216 goto label28;

        $f27 = (float) x#340;

        $f28 = $f27 * shift_inv;

        xs = staticinvoke <java.lang.Math: float min(float,float)>($f28, maxW);

        $f29 = staticinvoke <kanzi.filter.FastBilateralFilter: float interpolateLinearXY(float[],float,float,int)>(jk1, xs, ys, scaledW);

        $f30 = $f29 + 0.5F;

        val2 = (int) $f30;

        $i62 = oOffs#312 + x#340;

        $i63 = dst[$i62];

        $i64 = 255 << shift;

        $i65 = $i64 ^ -1;

        $i66 = $i63 & $i65;

        dst[$i62] = $i66;

        $i67 = oOffs#312 + x#340;

        $i68 = dst[$i67];

        $i69 = val2 & 255;

        $i70 = $i69 << shift;

        $i71 = $i68 | $i70;

        dst[$i67] = $i71;

     label28:
        x#340 = x#340 + 1;

        goto label26;

     label29:
        $i72 = this.<kanzi.filter.FastBilateralFilter: int stride>;

        iOffs#310 = iOffs#310 + $i72;

        $i73 = this.<kanzi.filter.FastBilateralFilter: int stride>;

        oOffs#312 = oOffs#312 + $i73;

        if iOffs#310 < len goto label30;

        goto label31;

     label30:
        y#322 = y#322 + 1;

        goto label23;

     label31:
        jk_idx1#199 = jk_idx0#197;

        jk_idx0#197 = 1 - jk_idx1#199;

     label32:
        $r17 = this.<kanzi.filter.FastBilateralFilter: float[][] jk>;

        jk_#204 = $r17[jk_idx1#199];

        grayRangeIdx#216 = grayRangeIdx#216 + 1;

        goto label16;

     label33:
        channel#109 = channel#109 + 1;

        goto label11;

     label34:
        return 1;
    }

    private static void gaussianRecursive(float[], float[], int, int, float)
    {
        float[] image, temp;
        int w, h;
        float sigma, nsigma, alpha, ema, ema2, b1, b2, k, a0, a1, a2, a3, coefp, coefn, $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20;
        byte $b0;
        double $d0, $d1, $d2, $d3;

        image := @parameter0: float[];

        temp := @parameter1: float[];

        w := @parameter2: int;

        h := @parameter3: int;

        sigma := @parameter4: float;

        $b0 = sigma cmpg 0.1F;

        if $b0 >= 0 goto label1;

        $f0 = 0.1F;

        goto label2;

     label1:
        $f0 = sigma;

     label2:
        nsigma = $f0;

        alpha = 1.695F / nsigma;

        $f1 = neg alpha;

        $d0 = (double) $f1;

        $d1 = staticinvoke <java.lang.Math: double exp(double)>($d0);

        ema = (float) $d1;

        $f2 = -2.0F * alpha;

        $d2 = (double) $f2;

        $d3 = staticinvoke <java.lang.Math: double exp(double)>($d2);

        ema2 = (float) $d3;

        b1 = -2.0F * ema;

        b2 = ema2;

        $f3 = 1.0F - ema;

        $f4 = 1.0F - ema;

        $f5 = $f3 * $f4;

        $f6 = 2.0F * alpha;

        $f7 = $f6 * ema;

        $f8 = 1.0F + $f7;

        $f9 = $f8 - ema2;

        k = $f5 / $f9;

        a0 = k;

        $f10 = alpha - 1.0F;

        $f11 = k * $f10;

        a1 = $f11 * ema;

        $f12 = alpha + 1.0F;

        $f13 = k * $f12;

        a2 = $f13 * ema;

        $f14 = neg k;

        a3 = $f14 * ema2;

        $f15 = a0 + a1;

        $f16 = 1.0F + b1;

        $f17 = $f16 + b2;

        coefp = $f15 / $f17;

        $f18 = a2 + a3;

        $f19 = 1.0F + b1;

        $f20 = $f19 + b2;

        coefn = $f18 / $f20;

        staticinvoke <kanzi.filter.FastBilateralFilter: void gaussianRecursiveX(float[],float[],int,int,float,float,float,float,float,float,float,float)>(temp, image, w, h, a0, a1, a2, a3, b1, b2, coefp, coefn);

        staticinvoke <kanzi.filter.FastBilateralFilter: void gaussianRecursiveY(float[],float[],int,int,float,float,float,float,float,float,float,float)>(image, temp, w, h, a0, a1, a2, a3, b1, b2, coefp, coefn);

        return;
    }

    private static void gaussianRecursiveX(float[], float[], int, int, float, float, float, float, float, float, float, float)
    {
        float[] od, id;
        int w, h, offs#2, y#4, x#18, $i0, $i1, $i2, $i3, x#68, $i4, $i5;
        float a0, a1, a2, a3, b1, b2, coefp, coefn, xc, yc, xc, yc, xp#10, yb#14, yp#16, $f0, $f1, $f2, $f3, $f4, $f5, xn#56, xa#58, yn#62, ya#64, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13;

        od := @parameter0: float[];

        id := @parameter1: float[];

        w := @parameter2: int;

        h := @parameter3: int;

        a0 := @parameter4: float;

        a1 := @parameter5: float;

        a2 := @parameter6: float;

        a3 := @parameter7: float;

        b1 := @parameter8: float;

        b2 := @parameter9: float;

        coefp := @parameter10: float;

        coefn := @parameter11: float;

        offs#2 = 0;

        y#4 = 0;

     label1:
        if y#4 >= h goto label6;

        xp#10 = id[offs#2];

        yb#14 = coefp * xp#10;

        yp#16 = yb#14;

        x#18 = 0;

     label2:
        if x#18 >= w goto label3;

        $i0 = offs#2 + x#18;

        xc = id[$i0];

        $f0 = a0 * xc;

        $f1 = a1 * xp#10;

        $f2 = $f0 + $f1;

        $f3 = b1 * yp#16;

        $f4 = $f2 - $f3;

        $f5 = b2 * yb#14;

        yc = $f4 - $f5;

        $i1 = offs#2 + x#18;

        od[$i1] = yc;

        xp#10 = xc;

        yb#14 = yp#16;

        yp#16 = yc;

        x#18 = x#18 + 1;

        goto label2;

     label3:
        $i2 = offs#2 + w;

        $i3 = $i2 - 1;

        xn#56 = id[$i3];

        xa#58 = xn#56;

        yn#62 = coefn * xn#56;

        ya#64 = yn#62;

        x#68 = w - 1;

     label4:
        if x#68 < 0 goto label5;

        $i4 = offs#2 + x#68;

        xc = id[$i4];

        $f6 = a2 * xn#56;

        $f7 = a3 * xa#58;

        $f8 = $f6 + $f7;

        $f9 = b1 * yn#62;

        $f10 = $f8 - $f9;

        $f11 = b2 * ya#64;

        yc = $f10 - $f11;

        $i5 = offs#2 + x#68;

        $f12 = od[$i5];

        $f13 = $f12 + yc;

        od[$i5] = $f13;

        xa#58 = xn#56;

        xn#56 = xc;

        ya#64 = yn#62;

        yn#62 = yc;

        x#68 = x#68 + -1;

        goto label4;

     label5:
        offs#2 = offs#2 + w;

        y#4 = y#4 + 1;

        goto label1;

     label6:
        return;
    }

    private static void gaussianRecursiveY(float[], float[], int, int, float, float, float, float, float, float, float, float)
    {
        float[] od, id;
        int w, h, x#2, offs#6, y#18, $i0, $i1, $i2, offs#57, $i3, y#75, $i4, $i5;
        float a0, a1, a2, a3, b1, b2, coefp, coefn, xc, yc, xc, yc, xp#10, yb#14, yp#16, $f0, $f1, $f2, $f3, $f4, $f5, xn#63, xa#65, yn#69, ya#71, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13;

        od := @parameter0: float[];

        id := @parameter1: float[];

        w := @parameter2: int;

        h := @parameter3: int;

        a0 := @parameter4: float;

        a1 := @parameter5: float;

        a2 := @parameter6: float;

        a3 := @parameter7: float;

        b1 := @parameter8: float;

        b2 := @parameter9: float;

        coefp := @parameter10: float;

        coefn := @parameter11: float;

        x#2 = 0;

     label1:
        if x#2 >= w goto label6;

        offs#6 = 0;

        xp#10 = id[x#2];

        yb#14 = coefp * xp#10;

        yp#16 = yb#14;

        y#18 = 0;

     label2:
        if y#18 >= h goto label3;

        $i0 = offs#6 + x#2;

        xc = id[$i0];

        $f0 = a0 * xc;

        $f1 = a1 * xp#10;

        $f2 = $f0 + $f1;

        $f3 = b1 * yp#16;

        $f4 = $f2 - $f3;

        $f5 = b2 * yb#14;

        yc = $f4 - $f5;

        $i1 = offs#6 + x#2;

        od[$i1] = yc;

        xp#10 = xc;

        yb#14 = yp#16;

        yp#16 = yc;

        offs#6 = offs#6 + w;

        y#18 = y#18 + 1;

        goto label2;

     label3:
        $i2 = h - 1;

        offs#57 = $i2 * w;

        $i3 = offs#57 + x#2;

        xn#63 = id[$i3];

        xa#65 = xn#63;

        yn#69 = coefn * xn#63;

        ya#71 = yn#69;

        y#75 = h - 1;

     label4:
        if y#75 < 0 goto label5;

        $i4 = offs#57 + x#2;

        xc = id[$i4];

        $f6 = a2 * xn#63;

        $f7 = a3 * xa#65;

        $f8 = $f6 + $f7;

        $f9 = b1 * yn#69;

        $f10 = $f8 - $f9;

        $f11 = b2 * ya#71;

        yc = $f10 - $f11;

        $i5 = offs#57 + x#2;

        $f12 = od[$i5];

        $f13 = $f12 + yc;

        od[$i5] = $f13;

        xa#65 = xn#63;

        xn#63 = xc;

        ya#71 = yn#69;

        yn#69 = yc;

        offs#57 = offs#57 - w;

        y#75 = y#75 + -1;

        goto label4;

     label5:
        x#2 = x#2 + 1;

        goto label1;

     label6:
        return;
    }

    private static float interpolateLinearXY2(float[], float[], float, float, float, int)
    {
        float[] image1, image2;
        float alpha, x, y, dx, dy, dx1, dy1, d00, d0t, dt0, dtt, res1, res2, $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25;
        int w, x0, xt, y0, offs0, offst, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        image1 := @parameter0: float[];

        image2 := @parameter1: float[];

        alpha := @parameter2: float;

        x := @parameter3: float;

        y := @parameter4: float;

        w := @parameter5: int;

        x0 = (int) x;

        xt = x0 + 1;

        y0 = (int) y;

        $f0 = (float) x0;

        dx = x - $f0;

        $f1 = (float) y0;

        dy = y - $f1;

        dx1 = 1.0F - dx;

        dy1 = 1.0F - dy;

        d00 = dx1 * dy1;

        d0t = dx * dy1;

        dt0 = dx1 * dy;

        dtt = dx * dy;

        offs0 = y0 * w;

        offst = offs0 + w;

        $i0 = offs0 + x0;

        $f2 = image1[$i0];

        $f3 = d00 * $f2;

        $i1 = offs0 + xt;

        $f4 = image1[$i1];

        $f5 = d0t * $f4;

        $f6 = $f3 + $f5;

        $i2 = offst + x0;

        $f7 = image1[$i2];

        $f8 = dt0 * $f7;

        $f9 = $f6 + $f8;

        $i3 = offst + xt;

        $f10 = image1[$i3];

        $f11 = dtt * $f10;

        res1 = $f9 + $f11;

        $i4 = offs0 + x0;

        $f12 = image2[$i4];

        $f13 = d00 * $f12;

        $i5 = offs0 + xt;

        $f14 = image2[$i5];

        $f15 = d0t * $f14;

        $f16 = $f13 + $f15;

        $i6 = offst + x0;

        $f17 = image2[$i6];

        $f18 = dt0 * $f17;

        $f19 = $f16 + $f18;

        $i7 = offst + xt;

        $f20 = image2[$i7];

        $f21 = dtt * $f20;

        res2 = $f19 + $f21;

        $f22 = alpha * res1;

        $f23 = 1.0F - alpha;

        $f24 = $f23 * res2;

        $f25 = $f22 + $f24;

        return $f25;
    }

    private static float interpolateLinearXY(float[], float, float, int)
    {
        float[] image;
        float x, y, dx, dy, dx1, dy1, d00, d0t, dt0, dtt, $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12;
        int w, x0, xt, y0, offs0, offst, $i0, $i1, $i2, $i3;

        image := @parameter0: float[];

        x := @parameter1: float;

        y := @parameter2: float;

        w := @parameter3: int;

        x0 = (int) x;

        xt = x0 + 1;

        y0 = (int) y;

        $f0 = (float) x0;

        dx = x - $f0;

        $f1 = (float) y0;

        dy = y - $f1;

        dx1 = 1.0F - dx;

        dy1 = 1.0F - dy;

        d00 = dx1 * dy1;

        d0t = dx * dy1;

        dt0 = dx1 * dy;

        dtt = dx * dy;

        offs0 = y0 * w;

        offst = offs0 + w;

        $i0 = offs0 + x0;

        $f2 = image[$i0];

        $f3 = d00 * $f2;

        $i1 = offs0 + xt;

        $f4 = image[$i1];

        $f5 = d0t * $f4;

        $f6 = $f3 + $f5;

        $i2 = offst + x0;

        $f7 = image[$i2];

        $f8 = dt0 * $f7;

        $f9 = $f6 + $f8;

        $i3 = offst + xt;

        $f10 = image[$i3];

        $f11 = dtt * $f10;

        $f12 = $f9 + $f11;

        return $f12;
    }


