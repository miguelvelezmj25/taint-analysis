    public void <init>(java.lang.String, weka.core.Instances) throws java.lang.Exception
    {
        weka.classifiers.CostMatrix$InstanceExpression this;
        java.lang.String expression;
        weka.core.Instances dataset;
        weka.core.expressionlanguage.core.Node node;
        weka.core.expressionlanguage.weka.InstancesHelper $r0, $r1, $r4;
        weka.core.expressionlanguage.common.MacroDeclarationsCompositor $r2;
        weka.core.expressionlanguage.core.MacroDeclarations[] $r3;
        weka.core.expressionlanguage.common.MathFunctions $r5;
        weka.core.expressionlanguage.common.IfElseMacro $r6;
        weka.core.expressionlanguage.common.JavaMacro $r7;
        boolean $z0;
        java.lang.Exception $r8;
        weka.core.expressionlanguage.common.Primitives$DoubleExpression $r9;

        this := @this: weka.classifiers.CostMatrix$InstanceExpression;

        expression := @parameter0: java.lang.String;

        dataset := @parameter1: weka.core.Instances;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<weka.classifiers.CostMatrix$InstanceExpression: java.lang.String m_expression> = expression;

        $r0 = new weka.core.expressionlanguage.weka.InstancesHelper;

        specialinvoke $r0.<weka.core.expressionlanguage.weka.InstancesHelper: void <init>(weka.core.Instances)>(dataset);

        this.<weka.classifiers.CostMatrix$InstanceExpression: weka.core.expressionlanguage.weka.InstancesHelper m_instancesHelper> = $r0;

        $r1 = this.<weka.classifiers.CostMatrix$InstanceExpression: weka.core.expressionlanguage.weka.InstancesHelper m_instancesHelper>;

        $r2 = new weka.core.expressionlanguage.common.MacroDeclarationsCompositor;

        $r3 = newarray (weka.core.expressionlanguage.core.MacroDeclarations)[4];

        $r4 = this.<weka.classifiers.CostMatrix$InstanceExpression: weka.core.expressionlanguage.weka.InstancesHelper m_instancesHelper>;

        $r3[0] = $r4;

        $r5 = new weka.core.expressionlanguage.common.MathFunctions;

        specialinvoke $r5.<weka.core.expressionlanguage.common.MathFunctions: void <init>()>();

        $r3[1] = $r5;

        $r6 = new weka.core.expressionlanguage.common.IfElseMacro;

        specialinvoke $r6.<weka.core.expressionlanguage.common.IfElseMacro: void <init>()>();

        $r3[2] = $r6;

        $r7 = new weka.core.expressionlanguage.common.JavaMacro;

        specialinvoke $r7.<weka.core.expressionlanguage.common.JavaMacro: void <init>()>();

        $r3[3] = $r7;

        specialinvoke $r2.<weka.core.expressionlanguage.common.MacroDeclarationsCompositor: void <init>(weka.core.expressionlanguage.core.MacroDeclarations[])>($r3);

        node = staticinvoke <weka.core.expressionlanguage.parser.Parser: weka.core.expressionlanguage.core.Node parse(java.lang.String,weka.core.expressionlanguage.core.VariableDeclarations,weka.core.expressionlanguage.core.MacroDeclarations)>(expression, $r1, $r2);

        $z0 = node instanceof weka.core.expressionlanguage.common.Primitives$DoubleExpression;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r8 = new java.lang.Exception;

        specialinvoke $r8.<java.lang.Exception: void <init>(java.lang.String)>("Expression must be of double type!");

        throw $r8;

     label1:
        $r9 = (weka.core.expressionlanguage.common.Primitives$DoubleExpression) node;

        this.<weka.classifiers.CostMatrix$InstanceExpression: weka.core.expressionlanguage.common.Primitives$DoubleExpression m_compiledExpression> = $r9;

        return;
    }

    public double evaluate(weka.core.Instance)
    {
        weka.classifiers.CostMatrix$InstanceExpression this;
        weka.core.Instance inst;
        weka.core.expressionlanguage.weka.InstancesHelper $r0;
        weka.core.expressionlanguage.common.Primitives$DoubleExpression $r1;
        double $d0;

        this := @this: weka.classifiers.CostMatrix$InstanceExpression;

        inst := @parameter0: weka.core.Instance;

        $r0 = this.<weka.classifiers.CostMatrix$InstanceExpression: weka.core.expressionlanguage.weka.InstancesHelper m_instancesHelper>;

        virtualinvoke $r0.<weka.core.expressionlanguage.weka.InstancesHelper: void setInstance(weka.core.Instance)>(inst);

        $r1 = this.<weka.classifiers.CostMatrix$InstanceExpression: weka.core.expressionlanguage.common.Primitives$DoubleExpression m_compiledExpression>;

        $d0 = interfaceinvoke $r1.<weka.core.expressionlanguage.common.Primitives$DoubleExpression: double evaluate()>();

        return $d0;
    }

    public java.lang.String toString()
    {
        weka.classifiers.CostMatrix$InstanceExpression this;
        java.lang.String $r0;

        this := @this: weka.classifiers.CostMatrix$InstanceExpression;

        $r0 = this.<weka.classifiers.CostMatrix$InstanceExpression: java.lang.String m_expression>;

        return $r0;
    }


