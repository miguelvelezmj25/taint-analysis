    public void <init>(org.w3c.dom.Element, weka.core.pmml.MiningSchema) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.RuleSetModel$RuleSet this;
        org.w3c.dom.Element ruleSetNode, sN, $r15, $r17, $r23, $r25, $r28;
        weka.core.pmml.MiningSchema miningSchema;
        java.lang.String recordCount, nbCorrect, defaultScore, defaultConfidence, criterion, $r10, $r11, tagName#149, tagName#212;
        weka.core.Attribute classAtt, $r14;
        org.w3c.dom.NodeList selectionNL, scoreChildren, ruleChildren;
        org.w3c.dom.Node selectN, child#142, child#205;
        weka.classifiers.pmml.consumer.RuleSetModel$RuleSet$RuleSelectionMethod[] l12;
        int l13, $i0, $i1, $i2, $i3, $i4, $i5, i#92, $i6, l14#111, i#135, $i8, i#198, $i10;
        weka.classifiers.pmml.consumer.RuleSetModel$RuleSet$RuleSelectionMethod m;
        weka.classifiers.pmml.consumer.TreeModel$ScoreDistribution newDist, $r16, s#178, s#192;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, baseCount#168, $d11;
        java.util.ArrayList $r0, $r1, $r2, $r12, $r18, $r19, $r21, $r26, $r29;
        boolean $z0, $z1, $z2, $z3, $z4, $z6, $z7, $z9, $z10, $z11, $z12, $z14;
        weka.core.Instances $r3, $r13;
        java.lang.Exception $r4, $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        short $s7, $s9, $s11;
        java.util.Iterator l11#172, l11#186;
        java.lang.Object $r20, $r22;
        weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule $r24, tempRule#221;
        weka.classifiers.pmml.consumer.RuleSetModel$CompoundRule $r27, tempRule#234;

        this := @this: weka.classifiers.pmml.consumer.RuleSetModel$RuleSet;

        ruleSetNode := @parameter0: org.w3c.dom.Element;

        miningSchema := @parameter1: weka.core.pmml.MiningSchema;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $d0 = staticinvoke <weka.core.Utils: double missingValue()>();

        this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: double m_recordCount> = $d0;

        $d1 = staticinvoke <weka.core.Utils: double missingValue()>();

        this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: double m_nbCorrect> = $d1;

        $d2 = staticinvoke <weka.core.Utils: double missingValue()>();

        this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: double m_defaultPrediction> = $d2;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: java.util.ArrayList m_scoreDistributions> = $r0;

        $d3 = staticinvoke <weka.core.Utils: double missingValue()>();

        this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: double m_defaultConfidence> = $d3;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: java.util.ArrayList m_availableRuleSelectionMethods> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: java.util.ArrayList m_rules> = $r2;

        recordCount = interfaceinvoke ruleSetNode.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("recordCount");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(recordCount);

        if recordCount == null goto label01;

        $i0 = virtualinvoke recordCount.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label01;

        $d4 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(recordCount);

        this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: double m_recordCount> = $d4;

     label01:
        nbCorrect = interfaceinvoke ruleSetNode.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("nbCorrect");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(nbCorrect);

        if nbCorrect == null goto label02;

        $z0 = 1;

        goto label03;

     label02:
        $z0 = 0;

     label03:
        $i1 = virtualinvoke nbCorrect.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 0 goto label04;

        $z1 = 1;

        goto label05;

     label04:
        $z1 = 0;

     label05:
        $z2 = $z0 & $z1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label06;

        $d5 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(nbCorrect);

        this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: double m_nbCorrect> = $d5;

     label06:
        defaultScore = interfaceinvoke ruleSetNode.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("defaultScore");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(defaultScore);

        if defaultScore == null goto label10;

        $i2 = virtualinvoke defaultScore.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 <= 0 goto label10;

        this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: java.lang.String m_defaultScore> = defaultScore;

        $r3 = virtualinvoke miningSchema.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        classAtt = virtualinvoke $r3.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classAtt);

        if classAtt != null goto label07;

        $r4 = new java.lang.Exception;

        specialinvoke $r4.<java.lang.Exception: void <init>(java.lang.String)>("[RuleSet] class attribute not set!");

        throw $r4;

     label07:
        $z3 = virtualinvoke classAtt.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label08;

        $d6 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(defaultScore);

        this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: double m_defaultPrediction> = $d6;

        goto label10;

     label08:
        $i3 = virtualinvoke classAtt.<weka.core.Attribute: int indexOfValue(java.lang.String)>(defaultScore);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 >= 0 goto label09;

        $r5 = new java.lang.Exception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[RuleSet] class value ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(defaultScore);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found!");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.Exception: void <init>(java.lang.String)>($r10);

        throw $r5;

     label09:
        $i4 = virtualinvoke classAtt.<weka.core.Attribute: int indexOfValue(java.lang.String)>(defaultScore);

        $d7 = (double) $i4;

        this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: double m_defaultPrediction> = $d7;

     label10:
        defaultConfidence = interfaceinvoke ruleSetNode.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("defaultConfidence");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(defaultConfidence);

        if defaultConfidence == null goto label11;

        $i5 = virtualinvoke defaultConfidence.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i5 <= 0 goto label11;

        $d8 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(defaultConfidence);

        this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: double m_defaultConfidence> = $d8;

     label11:
        selectionNL = interfaceinvoke ruleSetNode.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("RuleSelectionMethod");

        i#92 = 0;

     label12:
        $i6 = interfaceinvoke selectionNL.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#92);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if i#92 >= $i6 goto label16;

        selectN = interfaceinvoke selectionNL.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i#92);

        $s7 = interfaceinvoke selectN.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s7);

        if $s7 != 1 goto label15;

        sN = (org.w3c.dom.Element) selectN;

        criterion = interfaceinvoke sN.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("criterion");

        l12 = staticinvoke <weka.classifiers.pmml.consumer.RuleSetModel$RuleSet$RuleSelectionMethod: weka.classifiers.pmml.consumer.RuleSetModel$RuleSet$RuleSelectionMethod[] values()>();

        l13 = lengthof l12;

        l14#111 = 0;

     label13:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l14#111);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l13);

        if l14#111 >= l13 goto label15;

        m = l12[l14#111];

        $r11 = virtualinvoke m.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet$RuleSelectionMethod: java.lang.String toString()>();

        $z4 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(criterion);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label14;

        $r12 = this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: java.util.ArrayList m_availableRuleSelectionMethods>;

        virtualinvoke $r12.<java.util.ArrayList: boolean add(java.lang.Object)>(m);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#92);

        if i#92 != 0 goto label14;

        this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: weka.classifiers.pmml.consumer.RuleSetModel$RuleSet$RuleSelectionMethod m_currentMethod> = m;

     label14:
        l14#111 = l14#111 + 1;

        goto label13;

     label15:
        i#92 = i#92 + 1;

        goto label12;

     label16:
        $r13 = virtualinvoke miningSchema.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r14 = virtualinvoke $r13.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z6 = virtualinvoke $r14.<weka.core.Attribute: boolean isNominal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label23;

        scoreChildren = interfaceinvoke ruleSetNode.<org.w3c.dom.Element: org.w3c.dom.NodeList getChildNodes()>();

        i#135 = 0;

     label17:
        $i8 = interfaceinvoke scoreChildren.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#135);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if i#135 >= $i8 goto label19;

        child#142 = interfaceinvoke scoreChildren.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i#135);

        $s9 = interfaceinvoke child#142.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s9);

        if $s9 != 1 goto label18;

        $r15 = (org.w3c.dom.Element) child#142;

        tagName#149 = interfaceinvoke $r15.<org.w3c.dom.Element: java.lang.String getTagName()>();

        $z7 = virtualinvoke tagName#149.<java.lang.String: boolean equals(java.lang.Object)>("ScoreDistribution");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 == 0 goto label18;

        $r16 = new weka.classifiers.pmml.consumer.TreeModel$ScoreDistribution;

        $r17 = (org.w3c.dom.Element) child#142;

        $d9 = this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: double m_recordCount>;

        specialinvoke $r16.<weka.classifiers.pmml.consumer.TreeModel$ScoreDistribution: void <init>(org.w3c.dom.Element,weka.core.pmml.MiningSchema,double)>($r17, miningSchema, $d9);

        newDist = $r16;

        $r18 = this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: java.util.ArrayList m_scoreDistributions>;

        virtualinvoke $r18.<java.util.ArrayList: boolean add(java.lang.Object)>(newDist);

     label18:
        i#135 = i#135 + 1;

        goto label17;

     label19:
        $d10 = this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: double m_recordCount>;

        $z9 = staticinvoke <weka.core.Utils: boolean isMissingValue(double)>($d10);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 == 0 goto label23;

        baseCount#168 = 0.0;

        $r19 = this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: java.util.ArrayList m_scoreDistributions>;

        l11#172 = virtualinvoke $r19.<java.util.ArrayList: java.util.Iterator iterator()>();

     label20:
        $z10 = interfaceinvoke l11#172.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z10);

        if $z10 == 0 goto label21;

        $r20 = interfaceinvoke l11#172.<java.util.Iterator: java.lang.Object next()>();

        s#178 = (weka.classifiers.pmml.consumer.TreeModel$ScoreDistribution) $r20;

        $d11 = virtualinvoke s#178.<weka.classifiers.pmml.consumer.TreeModel$ScoreDistribution: double getRecordCount()>();

        baseCount#168 = baseCount#168 + $d11;

        goto label20;

     label21:
        $r21 = this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: java.util.ArrayList m_scoreDistributions>;

        l11#186 = virtualinvoke $r21.<java.util.ArrayList: java.util.Iterator iterator()>();

     label22:
        $z11 = interfaceinvoke l11#186.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z11);

        if $z11 == 0 goto label23;

        $r22 = interfaceinvoke l11#186.<java.util.Iterator: java.lang.Object next()>();

        s#192 = (weka.classifiers.pmml.consumer.TreeModel$ScoreDistribution) $r22;

        virtualinvoke s#192.<weka.classifiers.pmml.consumer.TreeModel$ScoreDistribution: void deriveConfidenceValue(double)>(baseCount#168);

        goto label22;

     label23:
        ruleChildren = interfaceinvoke ruleSetNode.<org.w3c.dom.Element: org.w3c.dom.NodeList getChildNodes()>();

        i#198 = 0;

     label24:
        $i10 = interfaceinvoke ruleChildren.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#198);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i10);

        if i#198 >= $i10 goto label27;

        child#205 = interfaceinvoke ruleChildren.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i#198);

        $s11 = interfaceinvoke child#205.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s11);

        if $s11 != 1 goto label26;

        $r23 = (org.w3c.dom.Element) child#205;

        tagName#212 = interfaceinvoke $r23.<org.w3c.dom.Element: java.lang.String getTagName()>();

        $z12 = virtualinvoke tagName#212.<java.lang.String: boolean equals(java.lang.Object)>("SimpleRule");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z12);

        if $z12 == 0 goto label25;

        $r24 = new weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule;

        $r25 = (org.w3c.dom.Element) child#205;

        specialinvoke $r24.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: void <init>(org.w3c.dom.Element,weka.core.pmml.MiningSchema)>($r25, miningSchema);

        tempRule#221 = $r24;

        $r26 = this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: java.util.ArrayList m_rules>;

        virtualinvoke $r26.<java.util.ArrayList: boolean add(java.lang.Object)>(tempRule#221);

        goto label26;

     label25:
        $z14 = virtualinvoke tagName#212.<java.lang.String: boolean equals(java.lang.Object)>("CompoundRule");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z14);

        if $z14 == 0 goto label26;

        $r27 = new weka.classifiers.pmml.consumer.RuleSetModel$CompoundRule;

        $r28 = (org.w3c.dom.Element) child#205;

        specialinvoke $r27.<weka.classifiers.pmml.consumer.RuleSetModel$CompoundRule: void <init>(org.w3c.dom.Element,weka.core.pmml.MiningSchema)>($r28, miningSchema);

        tempRule#234 = $r27;

        $r29 = this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: java.util.ArrayList m_rules>;

        virtualinvoke $r29.<java.util.ArrayList: boolean add(java.lang.Object)>(tempRule#234);

     label26:
        i#198 = i#198 + 1;

        goto label24;

     label27:
        return;
    }

    protected double[] score(double[], weka.core.Attribute) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.RuleSetModel$RuleSet this;
        double[] instance, preds#7;
        weka.core.Attribute classAtt;
        java.util.ArrayList firingRules, $r0, $r1, $r32, $r33;
        weka.classifiers.pmml.consumer.RuleSetModel$Rule r;
        java.util.Iterator l8, l7, l5#16, l5#162;
        weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule s, s, $r6, best#43;
        weka.classifiers.pmml.consumer.TreeModel$ScoreDistribution s;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        int $i0, $i1, $i3, $i5, $i6, $i7, $i8;
        java.lang.Object $r2, $r5, $r9, $r20, $r34;
        weka.classifiers.pmml.consumer.RuleSetModel$RuleSet$RuleSelectionMethod $r3, $r4, $r7, $r8, $r18, $r19;
        double wMax#41, $d0, $d1, sumOfWeights#85, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20;
        java.lang.Exception $r10, $r17, $r21, $r30;
        java.lang.StringBuilder $r11, $r12, $r14, $r15, $r22, $r23, $r25, $r26;
        java.lang.String $r13, $r16, $r24, $r27;
        byte $b2, $b4;

        this := @this: weka.classifiers.pmml.consumer.RuleSetModel$RuleSet;

        instance := @parameter0: double[];

        classAtt := @parameter1: weka.core.Attribute;

        $z0 = virtualinvoke classAtt.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label01;

        preds#7 = newarray (double)[1];

        goto label02;

     label01:
        $i0 = virtualinvoke classAtt.<weka.core.Attribute: int numValues()>();

        preds#7 = newarray (double)[$i0];

     label02:
        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        firingRules = $r0;

        $r1 = this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: java.util.ArrayList m_rules>;

        l5#16 = virtualinvoke $r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke l5#16.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label04;

        $r2 = interfaceinvoke l5#16.<java.util.Iterator: java.lang.Object next()>();

        r = (weka.classifiers.pmml.consumer.RuleSetModel$Rule) $r2;

        virtualinvoke r.<weka.classifiers.pmml.consumer.RuleSetModel$Rule: void fires(double[],java.util.ArrayList)>(instance, firingRules);

        goto label03;

     label04:
        $i1 = virtualinvoke firingRules.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 0 goto label19;

        $r3 = this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: weka.classifiers.pmml.consumer.RuleSetModel$RuleSet$RuleSelectionMethod m_currentMethod>;

        $r4 = <weka.classifiers.pmml.consumer.RuleSetModel$RuleSet$RuleSelectionMethod: weka.classifiers.pmml.consumer.RuleSetModel$RuleSet$RuleSelectionMethod FIRSTHIT>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        if $r3 != $r4 goto label05;

        $r5 = virtualinvoke firingRules.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r6 = (weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule) $r5;

        preds#7 = virtualinvoke $r6.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: double[] score(double[],weka.core.Attribute)>(instance, classAtt);

        goto label25;

     label05:
        $r7 = this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: weka.classifiers.pmml.consumer.RuleSetModel$RuleSet$RuleSelectionMethod m_currentMethod>;

        $r8 = <weka.classifiers.pmml.consumer.RuleSetModel$RuleSet$RuleSelectionMethod: weka.classifiers.pmml.consumer.RuleSetModel$RuleSet$RuleSelectionMethod WEIGHTEDMAX>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r8);

        if $r7 != $r8 goto label11;

        wMax#41 = #-Infinity;

        best#43 = null;

        l8 = virtualinvoke firingRules.<java.util.ArrayList: java.util.Iterator iterator()>();

     label06:
        $z2 = interfaceinvoke l8.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label09;

        $r9 = interfaceinvoke l8.<java.util.Iterator: java.lang.Object next()>();

        s = (weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule) $r9;

        $d0 = virtualinvoke s.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: double getWeight()>();

        $z3 = staticinvoke <weka.core.Utils: boolean isMissingValue(double)>($d0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label07;

        $r10 = new java.lang.Exception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[RuleSet] Scoring criterion is WEIGHTEDMAX, but rule ");

        $r13 = virtualinvoke s.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: java.lang.String getID()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not have a weight defined!");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.Exception: void <init>(java.lang.String)>($r16);

        throw $r10;

     label07:
        $d1 = virtualinvoke s.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: double getWeight()>();

        $b2 = $d1 cmpl wMax#41;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b2);

        if $b2 <= 0 goto label08;

        wMax#41 = virtualinvoke s.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: double getWeight()>();

        best#43 = s;

     label08:
        goto label06;

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(best#43);

        if best#43 != null goto label10;

        $r17 = new java.lang.Exception;

        specialinvoke $r17.<java.lang.Exception: void <init>(java.lang.String)>("[RuleSet] Unable to determine the best rule under the WEIGHTEDMAX criterion!");

        throw $r17;

     label10:
        preds#7 = virtualinvoke best#43.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: double[] score(double[],weka.core.Attribute)>(instance, classAtt);

        goto label25;

     label11:
        $r18 = this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: weka.classifiers.pmml.consumer.RuleSetModel$RuleSet$RuleSelectionMethod m_currentMethod>;

        $r19 = <weka.classifiers.pmml.consumer.RuleSetModel$RuleSet$RuleSelectionMethod: weka.classifiers.pmml.consumer.RuleSetModel$RuleSet$RuleSelectionMethod WEIGHTEDSUM>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r18);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r19);

        if $r18 != $r19 goto label25;

        sumOfWeights#85 = 0.0;

        l7 = virtualinvoke firingRules.<java.util.ArrayList: java.util.Iterator iterator()>();

     label12:
        $z4 = interfaceinvoke l7.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label16;

        $r20 = interfaceinvoke l7.<java.util.Iterator: java.lang.Object next()>();

        s = (weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule) $r20;

        $d2 = virtualinvoke s.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: double getWeight()>();

        $z5 = staticinvoke <weka.core.Utils: boolean isMissingValue(double)>($d2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label13;

        $r21 = new java.lang.Exception;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[RuleSet] Scoring criterion is WEIGHTEDSUM, but rule ");

        $r24 = virtualinvoke s.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: java.lang.String getID()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not have a weight defined!");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.Exception: void <init>(java.lang.String)>($r27);

        throw $r21;

     label13:
        $z6 = virtualinvoke classAtt.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label14;

        $d3 = virtualinvoke s.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: double getWeight()>();

        sumOfWeights#85 = sumOfWeights#85 + $d3;

        $d4 = preds#7[0];

        $d5 = virtualinvoke s.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: double getScore()>();

        $d6 = virtualinvoke s.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: double getWeight()>();

        $d7 = $d5 * $d6;

        $d8 = $d4 + $d7;

        preds#7[0] = $d8;

        goto label15;

     label14:
        $d9 = virtualinvoke s.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: double getScore()>();

        $i3 = (int) $d9;

        $d10 = preds#7[$i3];

        $d11 = virtualinvoke s.<weka.classifiers.pmml.consumer.RuleSetModel$SimpleRule: double getWeight()>();

        $d12 = $d10 + $d11;

        preds#7[$i3] = $d12;

     label15:
        goto label12;

     label16:
        $z7 = virtualinvoke classAtt.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 == 0 goto label18;

        $b4 = sumOfWeights#85 cmpl 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b4);

        if $b4 != 0 goto label17;

        $r30 = new java.lang.Exception;

        specialinvoke $r30.<java.lang.Exception: void <init>(java.lang.String)>("[RuleSet] Sum of weights is zero!");

        throw $r30;

     label17:
        $d13 = preds#7[0];

        $d14 = $d13 / sumOfWeights#85;

        preds#7[0] = $d14;

     label18:
        goto label25;

     label19:
        $z8 = virtualinvoke classAtt.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 == 0 goto label20;

        $d15 = this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: double m_defaultPrediction>;

        preds#7[0] = $d15;

        goto label25;

     label20:
        $r32 = this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: java.util.ArrayList m_scoreDistributions>;

        $i5 = virtualinvoke $r32.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i5 <= 0 goto label23;

        $r33 = this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: java.util.ArrayList m_scoreDistributions>;

        l5#162 = virtualinvoke $r33.<java.util.ArrayList: java.util.Iterator iterator()>();

     label21:
        $z9 = interfaceinvoke l5#162.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 == 0 goto label22;

        $r34 = interfaceinvoke l5#162.<java.util.Iterator: java.lang.Object next()>();

        s = (weka.classifiers.pmml.consumer.TreeModel$ScoreDistribution) $r34;

        $i6 = virtualinvoke s.<weka.classifiers.pmml.consumer.TreeModel$ScoreDistribution: int getClassLabelIndex()>();

        $d16 = virtualinvoke s.<weka.classifiers.pmml.consumer.TreeModel$ScoreDistribution: double getConfidence()>();

        preds#7[$i6] = $d16;

        goto label21;

     label22:
        goto label25;

     label23:
        $d17 = this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: double m_defaultConfidence>;

        $z10 = staticinvoke <weka.core.Utils: boolean isMissingValue(double)>($d17);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z10);

        if $z10 != 0 goto label24;

        $d18 = this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: double m_defaultPrediction>;

        $i7 = (int) $d18;

        $d19 = this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: double m_defaultConfidence>;

        preds#7[$i7] = $d19;

        goto label25;

     label24:
        $d20 = this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: double m_defaultPrediction>;

        $i8 = (int) $d20;

        preds#7[$i8] = 1.0;

     label25:
        return preds#7;
    }

    public java.lang.String toString()
    {
        weka.classifiers.pmml.consumer.RuleSetModel$RuleSet this;
        java.lang.StringBuffer temp, $r0;
        java.util.Iterator l2;
        weka.classifiers.pmml.consumer.RuleSetModel$Rule r;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r9, $r10, $r12, $r13, $r16, $r17, $r18, $r19, $r22, $r23, $r24, $r25, $r28, $r29, $r30, $r31, $r37, $r38, $r39;
        weka.classifiers.pmml.consumer.RuleSetModel$RuleSet$RuleSelectionMethod $r3;
        java.lang.String $r6, $r8, $r11, $r14, $r20, $r26, $r32, $r40, $r42;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        boolean $z0, $z1, $z2, $z3;
        java.util.ArrayList $r35;
        java.lang.Object $r36;

        this := @this: weka.classifiers.pmml.consumer.RuleSetModel$RuleSet;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        temp = $r0;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Rule selection method: ");

        $r3 = this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: weka.classifiers.pmml.consumer.RuleSetModel$RuleSet$RuleSelectionMethod m_currentMethod>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: java.lang.String m_defaultScore>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r8);

        if $r8 == null goto label4;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Default prediction: ");

        $r11 = this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: java.lang.String m_defaultScore>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $d0 = this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: double m_recordCount>;

        $z0 = staticinvoke <weka.core.Utils: boolean isMissingValue(double)>($d0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("       recordCount: ");

        $d1 = this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: double m_recordCount>;

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

     label1:
        $d2 = this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: double m_nbCorrect>;

        $z1 = staticinvoke <weka.core.Utils: boolean isMissingValue(double)>($d2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("         nbCorrect: ");

        $d3 = this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: double m_nbCorrect>;

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d3);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

     label2:
        $d4 = this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: double m_defaultConfidence>;

        $z2 = staticinvoke <weka.core.Utils: boolean isMissingValue(double)>($d4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label3;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" defaultConfidence: ");

        $d5 = this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: double m_defaultConfidence>;

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d5);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r32);

     label3:
        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

     label4:
        $r35 = this.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: java.util.ArrayList m_rules>;

        l2 = virtualinvoke $r35.<java.util.ArrayList: java.util.Iterator iterator()>();

     label5:
        $z3 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label6;

        $r36 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        r = (weka.classifiers.pmml.consumer.RuleSetModel$Rule) $r36;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r40);

        goto label5;

     label6:
        $r42 = virtualinvoke temp.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r42;
    }


