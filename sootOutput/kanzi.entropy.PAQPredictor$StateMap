    static void <clinit>()
    {
        int[] $r0;

        $r0 = staticinvoke <kanzi.entropy.PAQPredictor$StateMap: int[] initStateMapData()>();

        <kanzi.entropy.PAQPredictor$StateMap: int[] DATA> = $r0;

        return;
    }

    private static int[] initStateMapData()
    {
        int[] array, $r0, $r1;
        int n0, n1, i#4, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

        array = newarray (int)[256];

        i#4 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#4);

        if i#4 >= 256 goto label2;

        $r0 = staticinvoke <kanzi.entropy.PAQPredictor: int[] access$000()>();

        $i0 = i#4 << 2;

        $i1 = $i0 + 2;

        n0 = $r0[$i1];

        $r1 = staticinvoke <kanzi.entropy.PAQPredictor: int[] access$000()>();

        $i2 = i#4 << 2;

        $i3 = $i2 + 3;

        n1 = $r1[$i3];

        $i4 = n1 + 1;

        $i5 = $i4 << 16;

        $i6 = n0 + n1;

        $i7 = $i6 + 3;

        $i8 = $i5 / $i7;

        array[i#4] = $i8;

        i#4 = i#4 + 1;

        goto label1;

     label2:
        return array;
    }

    void <init>()
    {
        kanzi.entropy.PAQPredictor$StateMap this;
        int[] $r0, $r1, $r2;

        this := @this: kanzi.entropy.PAQPredictor$StateMap;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = newarray (int)[256];

        this.<kanzi.entropy.PAQPredictor$StateMap: int[] data> = $r0;

        $r1 = <kanzi.entropy.PAQPredictor$StateMap: int[] DATA>;

        $r2 = this.<kanzi.entropy.PAQPredictor$StateMap: int[] data>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, 0, 256);

        return;
    }

    int get(int, int)
    {
        kanzi.entropy.PAQPredictor$StateMap this;
        int bit, nctx, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        int[] $r0, $r1, $r2;

        this := @this: kanzi.entropy.PAQPredictor$StateMap;

        bit := @parameter0: int;

        nctx := @parameter1: int;

        $r0 = this.<kanzi.entropy.PAQPredictor$StateMap: int[] data>;

        $i0 = this.<kanzi.entropy.PAQPredictor$StateMap: int ctx>;

        $i1 = $r0[$i0];

        $i2 = bit << 16;

        $r1 = this.<kanzi.entropy.PAQPredictor$StateMap: int[] data>;

        $i3 = this.<kanzi.entropy.PAQPredictor$StateMap: int ctx>;

        $i4 = $r1[$i3];

        $i5 = $i2 - $i4;

        $i6 = $i5 + 256;

        $i7 = $i6 >> 9;

        $i8 = $i1 + $i7;

        $r0[$i0] = $i8;

        this.<kanzi.entropy.PAQPredictor$StateMap: int ctx> = nctx;

        $r2 = this.<kanzi.entropy.PAQPredictor$StateMap: int[] data>;

        $i9 = $r2[nctx];

        $i10 = $i9 >>> 4;

        return $i10;
    }


