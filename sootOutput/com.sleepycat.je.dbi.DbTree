    static void <clinit>()
    {
        java.util.EnumSet set;
        java.util.Iterator l1;
        com.sleepycat.je.dbi.DbType t;
        java.lang.Class $r0;
        boolean $z0, $z1, $z2, $z3;
        com.sleepycat.je.dbi.DatabaseId $r1, $r2;
        java.util.HashMap $r3;
        int $i0;
        java.lang.Object $r4;
        java.util.Map $r5;
        java.lang.String $r6;

        $r0 = class "com/sleepycat/je/dbi/DbTree";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sleepycat.je.dbi.DbTree: boolean $assertionsDisabled> = $z1;

        $r1 = new com.sleepycat.je.dbi.DatabaseId;

        specialinvoke $r1.<com.sleepycat.je.dbi.DatabaseId: void <init>(long)>(0L);

        <com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseId ID_DB_ID> = $r1;

        $r2 = new com.sleepycat.je.dbi.DatabaseId;

        specialinvoke $r2.<com.sleepycat.je.dbi.DatabaseId: void <init>(long)>(1L);

        <com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseId NAME_DB_ID> = $r2;

        set = staticinvoke <java.util.EnumSet: java.util.EnumSet allOf(java.lang.Class)>(class "com/sleepycat/je/dbi/DbType");

        $r3 = new java.util.HashMap;

        $i0 = virtualinvoke set.<java.util.EnumSet: int size()>();

        specialinvoke $r3.<java.util.HashMap: void <init>(int)>($i0);

        <com.sleepycat.je.dbi.DbTree: java.util.Map INTERNAL_TYPES_BY_NAME> = $r3;

        l1 = virtualinvoke set.<java.util.EnumSet: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label5;

        $r4 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>();

        t = (com.sleepycat.je.dbi.DbType) $r4;

        $z3 = virtualinvoke t.<com.sleepycat.je.dbi.DbType: boolean isInternal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label4;

        $r5 = <com.sleepycat.je.dbi.DbTree: java.util.Map INTERNAL_TYPES_BY_NAME>;

        $r6 = virtualinvoke t.<com.sleepycat.je.dbi.DbType: java.lang.String getInternalName()>();

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, t);

     label4:
        goto label3;

     label5:
        return;
    }

    public void <init>(com.sleepycat.je.dbi.EnvironmentImpl, boolean, boolean) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.dbi.DbTree this;
        com.sleepycat.je.dbi.EnvironmentImpl env;
        boolean replicationIntended, preserveVLSN;
        com.sleepycat.je.DatabaseConfig idConfig, nameConfig, $r2, $r10;
        java.util.concurrent.atomic.AtomicLong $r0, $r1;
        com.sleepycat.je.dbi.DatabaseImpl $r5, $r9, $r12, $r16;
        com.sleepycat.je.dbi.DbType $r6, $r13;
        java.lang.String $r7, $r14;
        com.sleepycat.je.dbi.DatabaseId $r8, $r15;

        this := @this: com.sleepycat.je.dbi.DbTree;

        env := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        replicationIntended := @parameter1: boolean;

        preserveVLSN := @parameter2: boolean;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.EnvironmentImpl envImpl> = env;

        $r0 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(1L);

        this.<com.sleepycat.je.dbi.DbTree: java.util.concurrent.atomic.AtomicLong lastAllocatedLocalDbId> = $r0;

        $r1 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(-256L);

        this.<com.sleepycat.je.dbi.DbTree: java.util.concurrent.atomic.AtomicLong lastAllocatedReplicatedDbId> = $r1;

        $r2 = new com.sleepycat.je.DatabaseConfig;

        specialinvoke $r2.<com.sleepycat.je.DatabaseConfig: void <init>()>();

        idConfig = $r2;

        virtualinvoke idConfig.<com.sleepycat.je.DatabaseConfig: com.sleepycat.je.DatabaseConfig setReplicated(boolean)>(0);

        virtualinvoke idConfig.<com.sleepycat.je.DatabaseConfig: com.sleepycat.je.DatabaseConfig setKeyPrefixing(boolean)>(0);

        $r5 = new com.sleepycat.je.dbi.DatabaseImpl;

        $r6 = <com.sleepycat.je.dbi.DbType: com.sleepycat.je.dbi.DbType ID>;

        $r7 = virtualinvoke $r6.<com.sleepycat.je.dbi.DbType: java.lang.String getInternalName()>();

        $r8 = new com.sleepycat.je.dbi.DatabaseId;

        specialinvoke $r8.<com.sleepycat.je.dbi.DatabaseId: void <init>(long)>(0L);

        specialinvoke $r5.<com.sleepycat.je.dbi.DatabaseImpl: void <init>(com.sleepycat.je.txn.Locker,java.lang.String,com.sleepycat.je.dbi.DatabaseId,com.sleepycat.je.dbi.EnvironmentImpl,com.sleepycat.je.DatabaseConfig)>(null, $r7, $r8, env, idConfig);

        this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl idDatabase> = $r5;

        $r9 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl idDatabase>;

        virtualinvoke $r9.<com.sleepycat.je.dbi.DatabaseImpl: void clearKeyPrefixing()>();

        $r10 = new com.sleepycat.je.DatabaseConfig;

        specialinvoke $r10.<com.sleepycat.je.DatabaseConfig: void <init>()>();

        nameConfig = $r10;

        virtualinvoke nameConfig.<com.sleepycat.je.DatabaseConfig: com.sleepycat.je.DatabaseConfig setKeyPrefixing(boolean)>(0);

        $r12 = new com.sleepycat.je.dbi.DatabaseImpl;

        $r13 = <com.sleepycat.je.dbi.DbType: com.sleepycat.je.dbi.DbType NAME>;

        $r14 = virtualinvoke $r13.<com.sleepycat.je.dbi.DbType: java.lang.String getInternalName()>();

        $r15 = new com.sleepycat.je.dbi.DatabaseId;

        specialinvoke $r15.<com.sleepycat.je.dbi.DatabaseId: void <init>(long)>(1L);

        specialinvoke $r12.<com.sleepycat.je.dbi.DatabaseImpl: void <init>(com.sleepycat.je.txn.Locker,java.lang.String,com.sleepycat.je.dbi.DatabaseId,com.sleepycat.je.dbi.EnvironmentImpl,com.sleepycat.je.DatabaseConfig)>(null, $r14, $r15, env, nameConfig);

        this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl nameDatabase> = $r12;

        $r16 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl nameDatabase>;

        virtualinvoke $r16.<com.sleepycat.je.dbi.DatabaseImpl: void clearKeyPrefixing()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(replicationIntended);

        if replicationIntended == 0 goto label1;

        virtualinvoke this.<com.sleepycat.je.dbi.DbTree: void setIsReplicated()>();

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(preserveVLSN);

        if preserveVLSN == 0 goto label2;

        specialinvoke this.<com.sleepycat.je.dbi.DbTree: void setPreserveVLSN()>();

     label2:
        virtualinvoke this.<com.sleepycat.je.dbi.DbTree: void setDupsConverted()>();

        return;
    }

    void setIsReplicated()
    {
        com.sleepycat.je.dbi.DbTree this;
        byte $b0, $b1, $b2;

        this := @this: com.sleepycat.je.dbi.DbTree;

        $b0 = this.<com.sleepycat.je.dbi.DbTree: byte flags>;

        $b1 = $b0 | 1;

        $b2 = (byte) $b1;

        this.<com.sleepycat.je.dbi.DbTree: byte flags> = $b2;

        return;
    }

    private void setPreserveVLSN()
    {
        com.sleepycat.je.dbi.DbTree this;
        byte $b0, $b1, $b2;

        this := @this: com.sleepycat.je.dbi.DbTree;

        $b0 = this.<com.sleepycat.je.dbi.DbTree: byte flags>;

        $b1 = $b0 | 8;

        $b2 = (byte) $b1;

        this.<com.sleepycat.je.dbi.DbTree: byte flags> = $b2;

        return;
    }

    void setDupsConverted()
    {
        com.sleepycat.je.dbi.DbTree this;
        byte $b0, $b1, $b2;

        this := @this: com.sleepycat.je.dbi.DbTree;

        $b0 = this.<com.sleepycat.je.dbi.DbTree: byte flags>;

        $b1 = $b0 | 4;

        $b2 = (byte) $b1;

        this.<com.sleepycat.je.dbi.DbTree: byte flags> = $b2;

        return;
    }

    boolean getDupsConverted()
    {
        com.sleepycat.je.dbi.DbTree this;
        byte $b0, $b1;
        boolean $z0;

        this := @this: com.sleepycat.je.dbi.DbTree;

        $b0 = this.<com.sleepycat.je.dbi.DbTree: byte flags>;

        $b1 = $b0 & 4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public long getTreeAdminMemory()
    {
        com.sleepycat.je.dbi.DbTree this;
        com.sleepycat.je.dbi.DatabaseImpl $r0, $r1;
        long $l0, $l1, $l2;

        this := @this: com.sleepycat.je.dbi.DbTree;

        $r0 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl idDatabase>;

        $l0 = virtualinvoke $r0.<com.sleepycat.je.dbi.DatabaseImpl: long getTreeAdminMemory()>();

        $r1 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl nameDatabase>;

        $l1 = virtualinvoke $r1.<com.sleepycat.je.dbi.DatabaseImpl: long getTreeAdminMemory()>();

        $l2 = $l0 + $l1;

        return $l2;
    }

    public static boolean isReservedDbName(java.lang.String)
    {
        java.lang.String name;
        com.sleepycat.je.dbi.DbType $r0;
        boolean $z0;

        name := @parameter0: java.lang.String;

        $r0 = staticinvoke <com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DbType typeForDbName(java.lang.String)>(name);

        $z0 = virtualinvoke $r0.<com.sleepycat.je.dbi.DbType: boolean isInternal()>();

        return $z0;
    }

    public static com.sleepycat.je.dbi.DbType typeForDbName(java.lang.String)
    {
        java.lang.String dbName;
        com.sleepycat.je.dbi.DbType t, $r2;
        java.util.Map $r0;
        java.lang.Object $r1;

        dbName := @parameter0: java.lang.String;

        $r0 = <com.sleepycat.je.dbi.DbTree: java.util.Map INTERNAL_TYPES_BY_NAME>;

        $r1 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(dbName);

        t = (com.sleepycat.je.dbi.DbType) $r1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(t);

        if t == null goto label1;

        return t;

     label1:
        $r2 = <com.sleepycat.je.dbi.DbType: com.sleepycat.je.dbi.DbType USER>;

        return $r2;
    }

    public void releaseDb(com.sleepycat.je.dbi.DatabaseImpl)
    {
        com.sleepycat.je.dbi.DbTree this;
        com.sleepycat.je.dbi.DatabaseImpl db, $r0, $r1;

        this := @this: com.sleepycat.je.dbi.DbTree;

        db := @parameter0: com.sleepycat.je.dbi.DatabaseImpl;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(db);

        if db == null goto label1;

        $r0 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl idDatabase>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(db);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if db == $r0 goto label1;

        $r1 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl nameDatabase>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(db);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if db == $r1 goto label1;

        virtualinvoke db.<com.sleepycat.je.dbi.DatabaseImpl: void decrementUseCount()>();

     label1:
        return;
    }

    public com.sleepycat.je.dbi.DatabaseImpl getDb(com.sleepycat.je.txn.Locker, java.lang.String, com.sleepycat.je.txn.HandleLocker, boolean) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.dbi.DbTree this;
        com.sleepycat.je.txn.Locker nameLocker;
        java.lang.String databaseName, $r1, $r4;
        com.sleepycat.je.txn.HandleLocker handleLocker;
        boolean writeLock, $z0, $z1, found#30, $z2;
        com.sleepycat.je.DatabaseEntry keyDbt, $r8;
        com.sleepycat.je.tree.NameLN nameLN;
        java.lang.Throwable l10, $r14;
        com.sleepycat.je.dbi.DbType $r0, $r3;
        com.sleepycat.je.dbi.DatabaseImpl $r2, $r5, $r7, $r15;
        com.sleepycat.je.dbi.CursorImpl nameCursor#14, $r6;
        com.sleepycat.je.dbi.DatabaseId id#16;
        byte[] $r9;
        com.sleepycat.je.txn.LockType $r10, $r11;
        com.sleepycat.je.tree.LN $r12;
        java.lang.AssertionError $r13;

        this := @this: com.sleepycat.je.dbi.DbTree;

        nameLocker := @parameter0: com.sleepycat.je.txn.Locker;

        databaseName := @parameter1: java.lang.String;

        handleLocker := @parameter2: com.sleepycat.je.txn.HandleLocker;

        writeLock := @parameter3: boolean;

        $r0 = <com.sleepycat.je.dbi.DbType: com.sleepycat.je.dbi.DbType ID>;

        $r1 = virtualinvoke $r0.<com.sleepycat.je.dbi.DbType: java.lang.String getInternalName()>();

        $z0 = virtualinvoke databaseName.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label01;

        $r2 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl idDatabase>;

        return $r2;

     label01:
        $r3 = <com.sleepycat.je.dbi.DbType: com.sleepycat.je.dbi.DbType NAME>;

        $r4 = virtualinvoke $r3.<com.sleepycat.je.dbi.DbType: java.lang.String getInternalName()>();

        $z1 = virtualinvoke databaseName.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label02;

        $r5 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl nameDatabase>;

        return $r5;

     label02:
        nameCursor#14 = null;

        id#16 = null;

     label03:
        $r6 = new com.sleepycat.je.dbi.CursorImpl;

        $r7 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl nameDatabase>;

        specialinvoke $r6.<com.sleepycat.je.dbi.CursorImpl: void <init>(com.sleepycat.je.dbi.DatabaseImpl,com.sleepycat.je.txn.Locker)>($r7, nameLocker);

        nameCursor#14 = $r6;

        $r8 = new com.sleepycat.je.DatabaseEntry;

        $r9 = staticinvoke <com.sleepycat.utilint.StringUtils: byte[] toUTF8(java.lang.String)>(databaseName);

        specialinvoke $r8.<com.sleepycat.je.DatabaseEntry: void <init>(byte[])>($r9);

        keyDbt = $r8;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(writeLock);

        if writeLock == 0 goto label04;

        $r10 = <com.sleepycat.je.txn.LockType: com.sleepycat.je.txn.LockType WRITE>;

        found#30 = virtualinvoke nameCursor#14.<com.sleepycat.je.dbi.CursorImpl: boolean searchExact(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.txn.LockType)>(keyDbt, $r10);

        goto label05;

     label04:
        $r11 = <com.sleepycat.je.txn.LockType: com.sleepycat.je.txn.LockType READ>;

        found#30 = virtualinvoke nameCursor#14.<com.sleepycat.je.dbi.CursorImpl: boolean searchExact(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.txn.LockType)>(keyDbt, $r11);

     label05:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(found#30);

        if found#30 == 0 goto label07;

        $r12 = virtualinvoke nameCursor#14.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.LN getCurrentLN(boolean,boolean)>(1, 1);

        nameLN = (com.sleepycat.je.tree.NameLN) $r12;

        $z2 = <com.sleepycat.je.dbi.DbTree: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label06;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(nameLN);

        if nameLN != null goto label06;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label06:
        id#16 = virtualinvoke nameLN.<com.sleepycat.je.tree.NameLN: com.sleepycat.je.dbi.DatabaseId getId()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(handleLocker);

        if handleLocker == null goto label07;

        specialinvoke this.<com.sleepycat.je.dbi.DbTree: void acquireHandleLock(com.sleepycat.je.dbi.CursorImpl,com.sleepycat.je.txn.HandleLocker)>(nameCursor#14, handleLocker);

     label07:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(nameCursor#14);

        if nameCursor#14 == null goto label12;

        virtualinvoke nameCursor#14.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        virtualinvoke nameCursor#14.<com.sleepycat.je.dbi.CursorImpl: void close()>();

        goto label12;

     label08:
        $r14 := @caughtexception;

     label09:
        l10 = $r14;

     label10:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(nameCursor#14);

        if nameCursor#14 == null goto label11;

        virtualinvoke nameCursor#14.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        virtualinvoke nameCursor#14.<com.sleepycat.je.dbi.CursorImpl: void close()>();

     label11:
        throw l10;

     label12:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(id#16);

        if id#16 != null goto label13;

        return null;

     label13:
        $r15 = virtualinvoke this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl getDb(com.sleepycat.je.dbi.DatabaseId,long,java.lang.String)>(id#16, -1L, databaseName);

        return $r15;

        catch java.lang.Throwable from label03 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void acquireHandleLock(com.sleepycat.je.dbi.CursorImpl, com.sleepycat.je.txn.HandleLocker)
    {
        com.sleepycat.je.dbi.DbTree this;
        com.sleepycat.je.dbi.CursorImpl nameCursor;
        com.sleepycat.je.txn.HandleLocker handleLocker;
        long lsn;
        com.sleepycat.je.txn.LockType $r0;
        com.sleepycat.je.txn.LockResult lockResult;
        java.lang.Throwable l6, $r11;
        com.sleepycat.je.dbi.DatabaseImpl $r1;
        com.sleepycat.je.txn.LockGrantType $r2, $r3;
        com.sleepycat.je.txn.Locker $r4;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String $r7, $r9;
        com.sleepycat.je.EnvironmentFailureException $r10;

        this := @this: com.sleepycat.je.dbi.DbTree;

        nameCursor := @parameter0: com.sleepycat.je.dbi.CursorImpl;

        handleLocker := @parameter1: com.sleepycat.je.txn.HandleLocker;

        virtualinvoke nameCursor.<com.sleepycat.je.dbi.CursorImpl: void latchBIN()>();

     label1:
        lsn = virtualinvoke nameCursor.<com.sleepycat.je.dbi.CursorImpl: long getCurrentLsn()>();

        $r0 = <com.sleepycat.je.txn.LockType: com.sleepycat.je.txn.LockType READ>;

        $r1 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl nameDatabase>;

        lockResult = virtualinvoke handleLocker.<com.sleepycat.je.txn.HandleLocker: com.sleepycat.je.txn.LockResult nonBlockingLock(long,com.sleepycat.je.txn.LockType,boolean,com.sleepycat.je.dbi.DatabaseImpl)>(lsn, $r0, 1, $r1);

        $r2 = virtualinvoke lockResult.<com.sleepycat.je.txn.LockResult: com.sleepycat.je.txn.LockGrantType getLockGrant()>();

        $r3 = <com.sleepycat.je.txn.LockGrantType: com.sleepycat.je.txn.LockGrantType DENIED>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r3);

        if $r2 != $r3 goto label2;

        $r4 = virtualinvoke nameCursor.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.txn.Locker getLocker()>();

        virtualinvoke $r4.<com.sleepycat.je.txn.Locker: void checkPreempted(com.sleepycat.je.txn.Locker)>(null);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No contention is possible with HandleLocker: ");

        $r7 = staticinvoke <com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(lsn);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>($r9);

        throw $r10;

     label2:
        virtualinvoke nameCursor.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        goto label6;

     label3:
        $r11 := @caughtexception;

     label4:
        l6 = $r11;

     label5:
        virtualinvoke nameCursor.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        throw l6;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public com.sleepycat.je.dbi.DatabaseImpl getDb(com.sleepycat.je.dbi.DatabaseId, long, java.lang.String) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.dbi.DbTree this;
        com.sleepycat.je.dbi.DatabaseId dbId, $r1, $r4;
        long lockTimeout;
        java.lang.String dbNameIfAvailable;
        com.sleepycat.je.DatabaseEntry keyDbt, $r9;
        boolean found, $z0, $z1, operationOk#22, $z2, operationOk#57;
        com.sleepycat.je.tree.MapLN mapLN;
        com.sleepycat.je.LockConflictException l9, $r14;
        java.lang.Throwable l12, $r15;
        com.sleepycat.je.dbi.DatabaseImpl $r0, $r2, $r3, $r5, foundDbImpl#16, $r8;
        com.sleepycat.je.txn.BasicLocker locker#18;
        com.sleepycat.je.dbi.CursorImpl idCursor#20, $r7;
        com.sleepycat.je.dbi.EnvironmentImpl $r6;
        byte $b0;
        byte[] $r10;
        com.sleepycat.je.txn.LockType $r11;
        com.sleepycat.je.tree.LN $r12;
        java.lang.AssertionError $r13;

        this := @this: com.sleepycat.je.dbi.DbTree;

        dbId := @parameter0: com.sleepycat.je.dbi.DatabaseId;

        lockTimeout := @parameter1: long;

        dbNameIfAvailable := @parameter2: java.lang.String;

        $r0 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl idDatabase>;

        $r1 = virtualinvoke $r0.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.DatabaseId getId()>();

        $z0 = virtualinvoke dbId.<com.sleepycat.je.dbi.DatabaseId: boolean equals(java.lang.Object)>($r1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label01;

        $r2 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl idDatabase>;

        return $r2;

     label01:
        $r3 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl nameDatabase>;

        $r4 = virtualinvoke $r3.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.DatabaseId getId()>();

        $z1 = virtualinvoke dbId.<com.sleepycat.je.dbi.DatabaseId: boolean equals(java.lang.Object)>($r4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label02;

        $r5 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl nameDatabase>;

        return $r5;

     label02:
        foundDbImpl#16 = null;

     label03:
        locker#18 = null;

        idCursor#20 = null;

        operationOk#22 = 0;

     label04:
        $r6 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        locker#18 = staticinvoke <com.sleepycat.je.txn.BasicLocker: com.sleepycat.je.txn.BasicLocker createBasicLocker(com.sleepycat.je.dbi.EnvironmentImpl)>($r6);

        $b0 = lockTimeout cmp -1L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 == 0 goto label05;

        virtualinvoke locker#18.<com.sleepycat.je.txn.Locker: void setLockTimeout(long)>(lockTimeout);

     label05:
        $r7 = new com.sleepycat.je.dbi.CursorImpl;

        $r8 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl idDatabase>;

        specialinvoke $r7.<com.sleepycat.je.dbi.CursorImpl: void <init>(com.sleepycat.je.dbi.DatabaseImpl,com.sleepycat.je.txn.Locker)>($r8, locker#18);

        idCursor#20 = $r7;

        $r9 = new com.sleepycat.je.DatabaseEntry;

        $r10 = virtualinvoke dbId.<com.sleepycat.je.dbi.DatabaseId: byte[] getBytes()>();

        specialinvoke $r9.<com.sleepycat.je.DatabaseEntry: void <init>(byte[])>($r10);

        keyDbt = $r9;

        $r11 = <com.sleepycat.je.txn.LockType: com.sleepycat.je.txn.LockType READ>;

        found = virtualinvoke idCursor#20.<com.sleepycat.je.dbi.CursorImpl: boolean searchExact(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.txn.LockType)>(keyDbt, $r11);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(found);

        if found == 0 goto label07;

        $r12 = virtualinvoke idCursor#20.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.LN getCurrentLN(boolean,boolean)>(1, 1);

        mapLN = (com.sleepycat.je.tree.MapLN) $r12;

        $z2 = <com.sleepycat.je.dbi.DbTree: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label06;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(mapLN);

        if mapLN != null goto label06;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label06:
        foundDbImpl#16 = virtualinvoke mapLN.<com.sleepycat.je.tree.MapLN: com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        virtualinvoke foundDbImpl#16.<com.sleepycat.je.dbi.DatabaseImpl: void incrementUseCount()>();

     label07:
        operationOk#57 = 1;

     label08:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(idCursor#20);

        if idCursor#20 == null goto label09;

        virtualinvoke idCursor#20.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        virtualinvoke idCursor#20.<com.sleepycat.je.dbi.CursorImpl: void close()>();

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(locker#18);

        if locker#18 == null goto label20;

        virtualinvoke locker#18.<com.sleepycat.je.txn.Locker: void operationEnd(boolean)>(operationOk#57);

        goto label20;

     label10:
        $r14 := @caughtexception;

     label11:
        l9 = $r14;

     label12:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(idCursor#20);

        if idCursor#20 == null goto label13;

        virtualinvoke idCursor#20.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        virtualinvoke idCursor#20.<com.sleepycat.je.dbi.CursorImpl: void close()>();

     label13:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(locker#18);

        if locker#18 == null goto label19;

        virtualinvoke locker#18.<com.sleepycat.je.txn.Locker: void operationEnd(boolean)>(operationOk#22);

        goto label19;

     label14:
        $r15 := @caughtexception;

     label15:
        l12 = $r15;

     label16:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(idCursor#20);

        if idCursor#20 == null goto label17;

        virtualinvoke idCursor#20.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        virtualinvoke idCursor#20.<com.sleepycat.je.dbi.CursorImpl: void close()>();

     label17:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(locker#18);

        if locker#18 == null goto label18;

        virtualinvoke locker#18.<com.sleepycat.je.txn.Locker: void operationEnd(boolean)>(operationOk#22);

     label18:
        throw l12;

     label19:
        goto label03;

     label20:
        specialinvoke this.<com.sleepycat.je.dbi.DbTree: void setDebugNameForDatabaseImpl(com.sleepycat.je.dbi.DatabaseImpl,java.lang.String)>(foundDbImpl#16, dbNameIfAvailable);

        return foundDbImpl#16;

        catch com.sleepycat.je.LockConflictException from label04 to label08 with label10;
        catch java.lang.Throwable from label04 to label08 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    private void setDebugNameForDatabaseImpl(com.sleepycat.je.dbi.DatabaseImpl, java.lang.String) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.dbi.DbTree this;
        com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        java.lang.String dbName, $r2;
        com.sleepycat.je.dbi.EnvironmentImpl $r0;
        boolean $z0, $z1, $z2;
        com.sleepycat.je.dbi.DatabaseId $r1;

        this := @this: com.sleepycat.je.dbi.DbTree;

        dbImpl := @parameter0: com.sleepycat.je.dbi.DatabaseImpl;

        dbName := @parameter1: java.lang.String;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dbImpl);

        if dbImpl == null goto label2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dbName);

        if dbName == null goto label1;

        virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: void setDebugDatabaseName(java.lang.String)>(dbName);

        goto label2;

     label1:
        $r0 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $z0 = virtualinvoke $r0.<com.sleepycat.je.dbi.EnvironmentImpl: boolean isValid()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: boolean isDebugNameAvailable()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

        $z2 = specialinvoke this.<com.sleepycat.je.dbi.DbTree: boolean getFastNameLookup()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label2;

        $r1 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.DatabaseId getId()>();

        $r2 = virtualinvoke this.<com.sleepycat.je.dbi.DbTree: java.lang.String getDbName(com.sleepycat.je.dbi.DatabaseId)>($r1);

        virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: void setDebugDatabaseName(java.lang.String)>($r2);

     label2:
        return;
    }

    private boolean getFastNameLookup()
    {
        com.sleepycat.je.dbi.DbTree this;
        com.sleepycat.je.dbi.DatabaseImpl $r0;
        com.sleepycat.je.tree.Tree $r1;
        long $l0;
        byte $b1;
        boolean $z0;

        this := @this: com.sleepycat.je.dbi.DbTree;

        $r0 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl nameDatabase>;

        $r1 = virtualinvoke $r0.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.tree.Tree getTree()>();

        $l0 = virtualinvoke $r1.<com.sleepycat.je.tree.Tree: long getMaxLNs()>();

        $b1 = $l0 cmp 100L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String getDbName(com.sleepycat.je.dbi.DatabaseId) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.dbi.DbTree this;
        com.sleepycat.je.dbi.DatabaseId id, $r0, $r3;
        com.sleepycat.je.dbi.DbTree$2Traversal traversal, $r6;
        boolean $z0, $z1;
        com.sleepycat.je.dbi.DbType $r1, $r4;
        java.lang.String $r2, $r5, $r9;
        com.sleepycat.je.dbi.DatabaseImpl $r7;
        com.sleepycat.je.txn.LockType $r8;

        this := @this: com.sleepycat.je.dbi.DbTree;

        id := @parameter0: com.sleepycat.je.dbi.DatabaseId;

        $r0 = <com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseId ID_DB_ID>;

        $z0 = virtualinvoke id.<com.sleepycat.je.dbi.DatabaseId: boolean equals(java.lang.Object)>($r0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r1 = <com.sleepycat.je.dbi.DbType: com.sleepycat.je.dbi.DbType ID>;

        $r2 = virtualinvoke $r1.<com.sleepycat.je.dbi.DbType: java.lang.String getInternalName()>();

        return $r2;

     label1:
        $r3 = <com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseId NAME_DB_ID>;

        $z1 = virtualinvoke id.<com.sleepycat.je.dbi.DatabaseId: boolean equals(java.lang.Object)>($r3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        $r4 = <com.sleepycat.je.dbi.DbType: com.sleepycat.je.dbi.DbType NAME>;

        $r5 = virtualinvoke $r4.<com.sleepycat.je.dbi.DbType: java.lang.String getInternalName()>();

        return $r5;

     label2:
        $r6 = new com.sleepycat.je.dbi.DbTree$2Traversal;

        specialinvoke $r6.<com.sleepycat.je.dbi.DbTree$2Traversal: void <init>(com.sleepycat.je.dbi.DbTree,com.sleepycat.je.dbi.DatabaseId)>(this, id);

        traversal = $r6;

        $r7 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl nameDatabase>;

        $r8 = <com.sleepycat.je.txn.LockType: com.sleepycat.je.txn.LockType NONE>;

        staticinvoke <com.sleepycat.je.dbi.CursorImpl: void traverseDbWithCursor(com.sleepycat.je.dbi.DatabaseImpl,com.sleepycat.je.txn.LockType,boolean,com.sleepycat.je.dbi.CursorImpl$WithCursor)>($r7, $r8, 0, traversal);

        $r9 = traversal.<com.sleepycat.je.dbi.DbTree$2Traversal: java.lang.String name>;

        return $r9;
    }

    public void releaseDbs(java.util.Map)
    {
        com.sleepycat.je.dbi.DbTree this;
        java.util.Map dbCache;
        java.util.Iterator l2;
        com.sleepycat.je.dbi.DatabaseImpl databaseImpl;
        java.util.Collection $r0;
        boolean $z0;
        java.lang.Object $r1;

        this := @this: com.sleepycat.je.dbi.DbTree;

        dbCache := @parameter0: java.util.Map;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dbCache);

        if dbCache == null goto label2;

        $r0 = interfaceinvoke dbCache.<java.util.Map: java.util.Collection values()>();

        l2 = interfaceinvoke $r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $r1 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        databaseImpl = (com.sleepycat.je.dbi.DatabaseImpl) $r1;

        virtualinvoke this.<com.sleepycat.je.dbi.DbTree: void releaseDb(com.sleepycat.je.dbi.DatabaseImpl)>(databaseImpl);

        goto label1;

     label2:
        return;
    }

    public long getLastLocalDbId()
    {
        com.sleepycat.je.dbi.DbTree this;
        java.util.concurrent.atomic.AtomicLong $r0;
        long $l0;

        this := @this: com.sleepycat.je.dbi.DbTree;

        $r0 = this.<com.sleepycat.je.dbi.DbTree: java.util.concurrent.atomic.AtomicLong lastAllocatedLocalDbId>;

        $l0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: long get()>();

        return $l0;
    }

    public long getLastReplicatedDbId()
    {
        com.sleepycat.je.dbi.DbTree this;
        java.util.concurrent.atomic.AtomicLong $r0;
        long $l0;

        this := @this: com.sleepycat.je.dbi.DbTree;

        $r0 = this.<com.sleepycat.je.dbi.DbTree: java.util.concurrent.atomic.AtomicLong lastAllocatedReplicatedDbId>;

        $l0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: long get()>();

        return $l0;
    }

    public com.sleepycat.je.dbi.DatabaseImpl getDb(com.sleepycat.je.dbi.DatabaseId) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.dbi.DbTree this;
        com.sleepycat.je.dbi.DatabaseId dbId;
        com.sleepycat.je.dbi.DatabaseImpl $r0;

        this := @this: com.sleepycat.je.dbi.DbTree;

        dbId := @parameter0: com.sleepycat.je.dbi.DatabaseId;

        $r0 = virtualinvoke this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl getDb(com.sleepycat.je.dbi.DatabaseId,long)>(dbId, -1L);

        return $r0;
    }

    public com.sleepycat.je.dbi.DatabaseImpl getDb(com.sleepycat.je.dbi.DatabaseId, long) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.dbi.DbTree this;
        com.sleepycat.je.dbi.DatabaseId dbId;
        long lockTimeout;
        java.lang.String $r0;
        com.sleepycat.je.dbi.DatabaseImpl $r1;

        this := @this: com.sleepycat.je.dbi.DbTree;

        dbId := @parameter0: com.sleepycat.je.dbi.DatabaseId;

        lockTimeout := @parameter1: long;

        $r0 = (java.lang.String) null;

        $r1 = virtualinvoke this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl getDb(com.sleepycat.je.dbi.DatabaseId,long,java.lang.String)>(dbId, lockTimeout, $r0);

        return $r1;
    }

    public void modifyDbRoot(com.sleepycat.je.dbi.DatabaseImpl, long, boolean) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.dbi.DbTree this;
        com.sleepycat.je.dbi.DatabaseImpl db, $r12, $r25;
        long ifBeforeLsn, $l1;
        boolean mustExist, found, $z0, $z1, $z2, $z3, operationOk#27, $z4;
        com.sleepycat.je.DatabaseEntry keyDbt, $r7;
        com.sleepycat.je.tree.MapLN mapLN;
        com.sleepycat.je.dbi.DbTree$RewriteMapLN writeMapLN, $r24;
        com.sleepycat.je.LockConflictException l9, $r28;
        java.lang.Throwable l12, $r29;
        com.sleepycat.je.dbi.EnvironmentImpl $r0, $r1, $r6, $r10, $r15;
        com.sleepycat.je.dbi.DatabaseId $r2, $r3, $r4, $r5, $r8, $r19;
        byte[] $r9;
        com.sleepycat.je.txn.BasicLocker idDbLocker#23;
        com.sleepycat.je.dbi.CursorImpl cursor#25, $r11;
        com.sleepycat.je.txn.LockType $r13;
        com.sleepycat.je.EnvironmentFailureException $r14;
        com.sleepycat.je.dbi.EnvironmentFailureReason $r16;
        java.lang.StringBuilder $r17, $r18, $r20;
        java.lang.String $r21;
        byte $b0;
        int $i2;
        com.sleepycat.je.tree.LN $r22;
        java.lang.AssertionError $r23;
        com.sleepycat.je.tree.Tree $r26;

        this := @this: com.sleepycat.je.dbi.DbTree;

        db := @parameter0: com.sleepycat.je.dbi.DatabaseImpl;

        ifBeforeLsn := @parameter1: long;

        mustExist := @parameter2: boolean;

        $r0 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $z0 = virtualinvoke $r0.<com.sleepycat.je.dbi.EnvironmentImpl: boolean isReadOnly()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label01;

        $r1 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $z1 = virtualinvoke $r1.<com.sleepycat.je.dbi.EnvironmentImpl: boolean isInInit()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label01;

        return;

     label01:
        $r2 = virtualinvoke db.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.DatabaseId getId()>();

        $r3 = <com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseId ID_DB_ID>;

        $z2 = virtualinvoke $r2.<com.sleepycat.je.dbi.DatabaseId: boolean equals(java.lang.Object)>($r3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label02;

        $r4 = virtualinvoke db.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.DatabaseId getId()>();

        $r5 = <com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseId NAME_DB_ID>;

        $z3 = virtualinvoke $r4.<com.sleepycat.je.dbi.DatabaseId: boolean equals(java.lang.Object)>($r5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label03;

     label02:
        $r6 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r6.<com.sleepycat.je.dbi.EnvironmentImpl: void logMapTreeRoot()>();

        goto label23;

     label03:
        $r7 = new com.sleepycat.je.DatabaseEntry;

        $r8 = virtualinvoke db.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.DatabaseId getId()>();

        $r9 = virtualinvoke $r8.<com.sleepycat.je.dbi.DatabaseId: byte[] getBytes()>();

        specialinvoke $r7.<com.sleepycat.je.DatabaseEntry: void <init>(byte[])>($r9);

        keyDbt = $r7;

     label04:
        idDbLocker#23 = null;

        cursor#25 = null;

        operationOk#27 = 0;

     label05:
        $r10 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        idDbLocker#23 = staticinvoke <com.sleepycat.je.txn.BasicLocker: com.sleepycat.je.txn.BasicLocker createBasicLocker(com.sleepycat.je.dbi.EnvironmentImpl)>($r10);

        $r11 = new com.sleepycat.je.dbi.CursorImpl;

        $r12 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl idDatabase>;

        specialinvoke $r11.<com.sleepycat.je.dbi.CursorImpl: void <init>(com.sleepycat.je.dbi.DatabaseImpl,com.sleepycat.je.txn.Locker)>($r12, idDbLocker#23);

        cursor#25 = $r11;

        $r13 = <com.sleepycat.je.txn.LockType: com.sleepycat.je.txn.LockType WRITE>;

        found = virtualinvoke cursor#25.<com.sleepycat.je.dbi.CursorImpl: boolean searchExact(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.txn.LockType)>(keyDbt, $r13);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(found);

        if found != 0 goto label08;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(mustExist);

        if mustExist == 0 goto label06;

        $r14 = new com.sleepycat.je.EnvironmentFailureException;

        $r15 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r16 = <com.sleepycat.je.dbi.EnvironmentFailureReason: com.sleepycat.je.dbi.EnvironmentFailureReason LOG_INTEGRITY>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t find database ID: ");

        $r19 = virtualinvoke db.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.DatabaseId getId()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<com.sleepycat.je.EnvironmentFailureException: void <init>(com.sleepycat.je.dbi.EnvironmentImpl,com.sleepycat.je.dbi.EnvironmentFailureReason,java.lang.String)>($r15, $r16, $r21);

        throw $r14;

     label06:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(cursor#25);

        if cursor#25 == null goto label07;

        virtualinvoke cursor#25.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        virtualinvoke cursor#25.<com.sleepycat.je.dbi.CursorImpl: void close()>();

     label07:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(idDbLocker#23);

        if idDbLocker#23 == null goto label23;

        virtualinvoke idDbLocker#23.<com.sleepycat.je.txn.Locker: void operationEnd(boolean)>(operationOk#27);

        goto label23;

     label08:
        $b0 = ifBeforeLsn cmp -1L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 == 0 goto label09;

        $l1 = virtualinvoke cursor#25.<com.sleepycat.je.dbi.CursorImpl: long getCurrentLsn()>();

        $i2 = staticinvoke <com.sleepycat.je.utilint.DbLsn: int compareTo(long,long)>($l1, ifBeforeLsn);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 >= 0 goto label11;

     label09:
        $r22 = virtualinvoke cursor#25.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.LN getCurrentLN(boolean,boolean)>(1, 1);

        mapLN = (com.sleepycat.je.tree.MapLN) $r22;

        $z4 = <com.sleepycat.je.dbi.DbTree: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label10;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(mapLN);

        if mapLN != null goto label10;

        $r23 = new java.lang.AssertionError;

        specialinvoke $r23.<java.lang.AssertionError: void <init>()>();

        throw $r23;

     label10:
        $r24 = new com.sleepycat.je.dbi.DbTree$RewriteMapLN;

        specialinvoke $r24.<com.sleepycat.je.dbi.DbTree$RewriteMapLN: void <init>(com.sleepycat.je.dbi.CursorImpl)>(cursor#25);

        writeMapLN = $r24;

        $r25 = virtualinvoke mapLN.<com.sleepycat.je.tree.MapLN: com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        $r26 = virtualinvoke $r25.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.tree.Tree getTree()>();

        virtualinvoke $r26.<com.sleepycat.je.tree.Tree: com.sleepycat.je.tree.IN withRootLatchedExclusive(com.sleepycat.je.tree.WithRootLatched)>(writeMapLN);

        operationOk#27 = 1;

     label11:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(cursor#25);

        if cursor#25 == null goto label12;

        virtualinvoke cursor#25.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        virtualinvoke cursor#25.<com.sleepycat.je.dbi.CursorImpl: void close()>();

     label12:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(idDbLocker#23);

        if idDbLocker#23 == null goto label23;

        virtualinvoke idDbLocker#23.<com.sleepycat.je.txn.Locker: void operationEnd(boolean)>(operationOk#27);

        goto label23;

     label13:
        $r28 := @caughtexception;

     label14:
        l9 = $r28;

     label15:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(cursor#25);

        if cursor#25 == null goto label16;

        virtualinvoke cursor#25.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        virtualinvoke cursor#25.<com.sleepycat.je.dbi.CursorImpl: void close()>();

     label16:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(idDbLocker#23);

        if idDbLocker#23 == null goto label22;

        virtualinvoke idDbLocker#23.<com.sleepycat.je.txn.Locker: void operationEnd(boolean)>(operationOk#27);

        goto label22;

     label17:
        $r29 := @caughtexception;

     label18:
        l12 = $r29;

     label19:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(cursor#25);

        if cursor#25 == null goto label20;

        virtualinvoke cursor#25.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        virtualinvoke cursor#25.<com.sleepycat.je.dbi.CursorImpl: void close()>();

     label20:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(idDbLocker#23);

        if idDbLocker#23 == null goto label21;

        virtualinvoke idDbLocker#23.<com.sleepycat.je.txn.Locker: void operationEnd(boolean)>(operationOk#27);

     label21:
        throw l12;

     label22:
        goto label04;

     label23:
        return;

        catch com.sleepycat.je.LockConflictException from label05 to label06 with label13;
        catch com.sleepycat.je.LockConflictException from label08 to label11 with label13;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.lang.Throwable from label08 to label11 with label17;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    public com.sleepycat.je.dbi.DatabaseImpl getDb(com.sleepycat.je.dbi.DatabaseId, long, java.util.Map) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.dbi.DbTree this;
        com.sleepycat.je.dbi.DatabaseId dbId;
        long lockTimeout;
        java.util.Map dbCache;
        com.sleepycat.je.dbi.DatabaseImpl db, $r1;
        boolean $z0;
        java.lang.Object $r0;
        java.lang.String $r2;

        this := @this: com.sleepycat.je.dbi.DbTree;

        dbId := @parameter0: com.sleepycat.je.dbi.DatabaseId;

        lockTimeout := @parameter1: long;

        dbCache := @parameter2: java.util.Map;

        $z0 = interfaceinvoke dbCache.<java.util.Map: boolean containsKey(java.lang.Object)>(dbId);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r0 = interfaceinvoke dbCache.<java.util.Map: java.lang.Object get(java.lang.Object)>(dbId);

        $r1 = (com.sleepycat.je.dbi.DatabaseImpl) $r0;

        return $r1;

     label1:
        $r2 = (java.lang.String) null;

        db = virtualinvoke this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl getDb(com.sleepycat.je.dbi.DatabaseId,long,java.lang.String)>(dbId, lockTimeout, $r2);

        interfaceinvoke dbCache.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(dbId, db);

        return db;
    }

    public int getHighestLevel(com.sleepycat.je.dbi.DatabaseImpl) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.dbi.DbTree this;
        com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        com.sleepycat.je.dbi.DbTree$RootLevel getLevel, $r0;
        com.sleepycat.je.tree.Tree $r1;
        int $i0;

        this := @this: com.sleepycat.je.dbi.DbTree;

        dbImpl := @parameter0: com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = new com.sleepycat.je.dbi.DbTree$RootLevel;

        specialinvoke $r0.<com.sleepycat.je.dbi.DbTree$RootLevel: void <init>(com.sleepycat.je.dbi.DatabaseImpl)>(dbImpl);

        getLevel = $r0;

        $r1 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.tree.Tree getTree()>();

        virtualinvoke $r1.<com.sleepycat.je.tree.Tree: com.sleepycat.je.tree.IN withRootLatchedShared(com.sleepycat.je.tree.WithRootLatched)>(getLevel);

        $i0 = virtualinvoke getLevel.<com.sleepycat.je.dbi.DbTree$RootLevel: int getRootLevel()>();

        return $i0;
    }

    public void modifyDbRoot(com.sleepycat.je.dbi.DatabaseImpl) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.dbi.DbTree this;
        com.sleepycat.je.dbi.DatabaseImpl db;

        this := @this: com.sleepycat.je.dbi.DbTree;

        db := @parameter0: com.sleepycat.je.dbi.DatabaseImpl;

        virtualinvoke this.<com.sleepycat.je.dbi.DbTree: void modifyDbRoot(com.sleepycat.je.dbi.DatabaseImpl,long,boolean)>(db, -1L, 1);

        return;
    }

    public void close()
    {
        com.sleepycat.je.dbi.DbTree this;
        com.sleepycat.je.dbi.DatabaseImpl $r0, $r1;

        this := @this: com.sleepycat.je.dbi.DbTree;

        $r0 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl idDatabase>;

        virtualinvoke $r0.<com.sleepycat.je.dbi.DatabaseImpl: void releaseTreeAdminMemory()>();

        $r1 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl nameDatabase>;

        virtualinvoke $r1.<com.sleepycat.je.dbi.DatabaseImpl: void releaseTreeAdminMemory()>();

        return;
    }

    public void updateNameLN(com.sleepycat.je.txn.Locker, java.lang.String, com.sleepycat.je.log.DbOpReplicationContext) throws com.sleepycat.je.LockConflictException
    {
        com.sleepycat.je.dbi.DbTree this;
        com.sleepycat.je.txn.Locker locker;
        java.lang.String dbName;
        com.sleepycat.je.log.DbOpReplicationContext repContext;
        com.sleepycat.je.dbi.DbTree$NameLockResult result;
        com.sleepycat.je.dbi.DbTree$NeedRepLockerException e, $r2;
        com.sleepycat.je.dbi.CursorImpl nameCursor;
        com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        com.sleepycat.je.log.ReplicationContext useRepContext;
        com.sleepycat.je.DatabaseEntry dataDbt, $r5;
        java.lang.Throwable l9, $r8;
        boolean $z0;
        java.lang.AssertionError $r0;
        com.sleepycat.je.dbi.DbTree$1 $r1;
        com.sleepycat.je.dbi.EnvironmentImpl $r3;
        com.sleepycat.je.EnvironmentFailureException $r4;
        byte[] $r6;

        this := @this: com.sleepycat.je.dbi.DbTree;

        locker := @parameter0: com.sleepycat.je.txn.Locker;

        dbName := @parameter1: java.lang.String;

        repContext := @parameter2: com.sleepycat.je.log.DbOpReplicationContext;

        $z0 = <com.sleepycat.je.dbi.DbTree: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label01;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dbName);

        if dbName != null goto label01;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label01:
        $r1 = new com.sleepycat.je.dbi.DbTree$1;

        specialinvoke $r1.<com.sleepycat.je.dbi.DbTree$1: void <init>(com.sleepycat.je.dbi.DbTree,com.sleepycat.je.log.DbOpReplicationContext)>(this, repContext);

        result = specialinvoke this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DbTree$NameLockResult lockNameLN(com.sleepycat.je.txn.Locker,java.lang.String,java.lang.String,com.sleepycat.je.dbi.DbTree$GetRepContext)>(locker, dbName, "updateConfig", $r1);

     label02:
        goto label04;

     label03:
        $r2 := @caughtexception;

        e = $r2;

        $r3 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r4 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedException(com.sleepycat.je.dbi.EnvironmentImpl,java.lang.Exception)>($r3, e);

        throw $r4;

     label04:
        nameCursor = result.<com.sleepycat.je.dbi.DbTree$NameLockResult: com.sleepycat.je.dbi.CursorImpl nameCursor>;

        dbImpl = result.<com.sleepycat.je.dbi.DbTree$NameLockResult: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        useRepContext = result.<com.sleepycat.je.dbi.DbTree$NameLockResult: com.sleepycat.je.log.ReplicationContext repContext>;

     label05:
        $r5 = new com.sleepycat.je.DatabaseEntry;

        $r6 = newarray (byte)[0];

        specialinvoke $r5.<com.sleepycat.je.DatabaseEntry: void <init>(byte[])>($r6);

        dataDbt = $r5;

        virtualinvoke nameCursor.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.OperationResult updateCurrentRecord(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.dbi.ExpirationInfo,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.DatabaseEntry,com.sleepycat.je.log.ReplicationContext)>(null, dataDbt, null, null, null, useRepContext);

     label06:
        virtualinvoke this.<com.sleepycat.je.dbi.DbTree: void releaseDb(com.sleepycat.je.dbi.DatabaseImpl)>(dbImpl);

        virtualinvoke nameCursor.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        virtualinvoke nameCursor.<com.sleepycat.je.dbi.CursorImpl: void close()>();

        goto label10;

     label07:
        $r8 := @caughtexception;

     label08:
        l9 = $r8;

     label09:
        virtualinvoke this.<com.sleepycat.je.dbi.DbTree: void releaseDb(com.sleepycat.je.dbi.DatabaseImpl)>(dbImpl);

        virtualinvoke nameCursor.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        virtualinvoke nameCursor.<com.sleepycat.je.dbi.CursorImpl: void close()>();

        throw l9;

     label10:
        return;

        catch com.sleepycat.je.dbi.DbTree$NeedRepLockerException from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    private com.sleepycat.je.dbi.DbTree$NameLockResult lockNameLN(com.sleepycat.je.txn.Locker, java.lang.String, java.lang.String, com.sleepycat.je.dbi.DbTree$GetRepContext) throws com.sleepycat.je.DatabaseNotFoundException, com.sleepycat.je.dbi.DbTree$NeedRepLockerException
    {
        com.sleepycat.je.dbi.DbTree this;
        com.sleepycat.je.txn.Locker locker;
        java.lang.String databaseName, action, msg, $r9, $r30, $r55;
        com.sleepycat.je.dbi.DbTree$GetRepContext getRepContext;
        com.sleepycat.je.dbi.DbTree$NameLockResult result, $r0;
        com.sleepycat.je.DatabaseEntry key, $r20;
        boolean found, success#26, $z0, $z1, $z2, $z3, $z4, $z5, $z6, success#143;
        java.util.Iterator l10;
        com.sleepycat.je.Database db;
        int handleCount;
        java.lang.Throwable l12, $r60;
        com.sleepycat.je.dbi.DatabaseImpl $r1, $r2, $r10, $r14, $r19, $r42, $r45, $r56, $r61;
        com.sleepycat.je.DatabaseNotFoundException $r3, $r24;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r25, $r26, $r27, $r28, $r29, $r36, $r37, $r38, $r39, $r40, $r41, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54;
        com.sleepycat.je.log.ReplicationContext $r11, $r12;
        com.sleepycat.je.dbi.EnvironmentImpl $r13;
        com.sleepycat.je.txn.Txn $r15, $r16;
        com.sleepycat.je.dbi.DbTree$NeedRepLockerException $r17;
        com.sleepycat.je.dbi.CursorImpl $r18, $r22, $r31, $r57, $r58, $r59, $r62, $r63, $r64;
        byte[] $r21;
        com.sleepycat.je.txn.LockType $r23;
        com.sleepycat.je.tree.LN $r32;
        com.sleepycat.je.tree.NameLN $r33, $r34;
        java.lang.AssertionError $r35;
        java.util.Set $r43;
        java.lang.Object $r44;
        java.lang.IllegalStateException $r46;

        this := @this: com.sleepycat.je.dbi.DbTree;

        locker := @parameter0: com.sleepycat.je.txn.Locker;

        databaseName := @parameter1: java.lang.String;

        action := @parameter2: java.lang.String;

        getRepContext := @parameter3: com.sleepycat.je.dbi.DbTree$GetRepContext;

        $r0 = new com.sleepycat.je.dbi.DbTree$NameLockResult;

        specialinvoke $r0.<com.sleepycat.je.dbi.DbTree$NameLockResult: void <init>(com.sleepycat.je.dbi.DbTree$1)>(null);

        result = $r0;

        $r1 = virtualinvoke this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl getDb(com.sleepycat.je.txn.Locker,java.lang.String,com.sleepycat.je.txn.HandleLocker,boolean)>(locker, databaseName, null, 1);

        result.<com.sleepycat.je.dbi.DbTree$NameLockResult: com.sleepycat.je.dbi.DatabaseImpl dbImpl> = $r1;

        $r2 = result.<com.sleepycat.je.dbi.DbTree$NameLockResult: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        if $r2 != null goto label01;

        $r3 = new com.sleepycat.je.DatabaseNotFoundException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(action);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" non-existent database ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(databaseName);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<com.sleepycat.je.DatabaseNotFoundException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label01:
        success#26 = 0;

     label02:
        $r10 = result.<com.sleepycat.je.dbi.DbTree$NameLockResult: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r11 = interfaceinvoke getRepContext.<com.sleepycat.je.dbi.DbTree$GetRepContext: com.sleepycat.je.log.ReplicationContext get(com.sleepycat.je.dbi.DatabaseImpl)>($r10);

        result.<com.sleepycat.je.dbi.DbTree$NameLockResult: com.sleepycat.je.log.ReplicationContext repContext> = $r11;

        $r12 = result.<com.sleepycat.je.dbi.DbTree$NameLockResult: com.sleepycat.je.log.ReplicationContext repContext>;

        specialinvoke this.<com.sleepycat.je.dbi.DbTree: void checkReplicaWrite(com.sleepycat.je.txn.Locker,com.sleepycat.je.log.ReplicationContext)>(locker, $r12);

        $r13 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $z0 = virtualinvoke $r13.<com.sleepycat.je.dbi.EnvironmentImpl: boolean isReplicated()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label03;

        $r14 = result.<com.sleepycat.je.dbi.DbTree$NameLockResult: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $z1 = virtualinvoke $r14.<com.sleepycat.je.dbi.DatabaseImpl: boolean isReplicated()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label03;

        $r15 = virtualinvoke locker.<com.sleepycat.je.txn.Locker: com.sleepycat.je.txn.Txn getTxnLocker()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r15);

        if $r15 == null goto label03;

        $r16 = virtualinvoke locker.<com.sleepycat.je.txn.Locker: com.sleepycat.je.txn.Txn getTxnLocker()>();

        $z2 = virtualinvoke $r16.<com.sleepycat.je.txn.Txn: boolean isAutoTxn()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label03;

        $z3 = virtualinvoke locker.<com.sleepycat.je.txn.Locker: boolean isReplicated()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label03;

        $r17 = new com.sleepycat.je.dbi.DbTree$NeedRepLockerException;

        specialinvoke $r17.<com.sleepycat.je.dbi.DbTree$NeedRepLockerException: void <init>()>();

        throw $r17;

     label03:
        $r18 = new com.sleepycat.je.dbi.CursorImpl;

        $r19 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl nameDatabase>;

        specialinvoke $r18.<com.sleepycat.je.dbi.CursorImpl: void <init>(com.sleepycat.je.dbi.DatabaseImpl,com.sleepycat.je.txn.Locker)>($r19, locker);

        result.<com.sleepycat.je.dbi.DbTree$NameLockResult: com.sleepycat.je.dbi.CursorImpl nameCursor> = $r18;

        $r20 = new com.sleepycat.je.DatabaseEntry;

        $r21 = staticinvoke <com.sleepycat.utilint.StringUtils: byte[] toUTF8(java.lang.String)>(databaseName);

        specialinvoke $r20.<com.sleepycat.je.DatabaseEntry: void <init>(byte[])>($r21);

        key = $r20;

        $r22 = result.<com.sleepycat.je.dbi.DbTree$NameLockResult: com.sleepycat.je.dbi.CursorImpl nameCursor>;

        $r23 = <com.sleepycat.je.txn.LockType: com.sleepycat.je.txn.LockType WRITE>;

        found = virtualinvoke $r22.<com.sleepycat.je.dbi.CursorImpl: boolean searchExact(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.txn.LockType)>(key, $r23);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(found);

        if found != 0 goto label04;

        $r24 = new com.sleepycat.je.DatabaseNotFoundException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(action);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" non-existent database ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(databaseName);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<com.sleepycat.je.DatabaseNotFoundException: void <init>(java.lang.String)>($r30);

        throw $r24;

     label04:
        $r31 = result.<com.sleepycat.je.dbi.DbTree$NameLockResult: com.sleepycat.je.dbi.CursorImpl nameCursor>;

        $r32 = virtualinvoke $r31.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.LN getCurrentLN(boolean,boolean)>(1, 1);

        $r33 = (com.sleepycat.je.tree.NameLN) $r32;

        result.<com.sleepycat.je.dbi.DbTree$NameLockResult: com.sleepycat.je.tree.NameLN nameLN> = $r33;

        $z4 = <com.sleepycat.je.dbi.DbTree: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label05;

        $r34 = result.<com.sleepycat.je.dbi.DbTree$NameLockResult: com.sleepycat.je.tree.NameLN nameLN>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r34);

        if $r34 != null goto label05;

        $r35 = new java.lang.AssertionError;

        specialinvoke $r35.<java.lang.AssertionError: void <init>()>();

        throw $r35;

     label05:
        $z5 = virtualinvoke locker.<com.sleepycat.je.txn.Locker: boolean getImportunate()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label08;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Database ");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(databaseName);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has been forcibly closed in order to apply a replicated ");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(action);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" operation.  This Database and all associated Cursors must be closed.  All associated Transactions must be aborted.");

        msg = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        $r42 = result.<com.sleepycat.je.dbi.DbTree$NameLockResult: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r43 = virtualinvoke $r42.<com.sleepycat.je.dbi.DatabaseImpl: java.util.Set getReferringHandles()>();

        l10 = interfaceinvoke $r43.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $z6 = interfaceinvoke l10.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label07;

        $r44 = interfaceinvoke l10.<java.util.Iterator: java.lang.Object next()>();

        db = (com.sleepycat.je.Database) $r44;

        staticinvoke <com.sleepycat.je.DbInternal: void setPreempted(com.sleepycat.je.Database,java.lang.String,java.lang.String)>(db, databaseName, msg);

        goto label06;

     label07:
        goto label09;

     label08:
        $r45 = result.<com.sleepycat.je.dbi.DbTree$NameLockResult: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        handleCount = virtualinvoke $r45.<com.sleepycat.je.dbi.DatabaseImpl: int getReferringHandleCount()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(handleCount);

        if handleCount <= 0 goto label09;

        $r46 = new java.lang.IllegalStateException;

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t ");

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(action);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" database ");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(databaseName);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(handleCount);

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" open Database handles exist");

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r46.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r55);

        throw $r46;

     label09:
        success#143 = 1;

     label10:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(success#143);

        if success#143 != 0 goto label15;

        $r56 = result.<com.sleepycat.je.dbi.DbTree$NameLockResult: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        virtualinvoke this.<com.sleepycat.je.dbi.DbTree: void releaseDb(com.sleepycat.je.dbi.DatabaseImpl)>($r56);

        $r57 = result.<com.sleepycat.je.dbi.DbTree$NameLockResult: com.sleepycat.je.dbi.CursorImpl nameCursor>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r57);

        if $r57 == null goto label15;

        $r58 = result.<com.sleepycat.je.dbi.DbTree$NameLockResult: com.sleepycat.je.dbi.CursorImpl nameCursor>;

        virtualinvoke $r58.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        $r59 = result.<com.sleepycat.je.dbi.DbTree$NameLockResult: com.sleepycat.je.dbi.CursorImpl nameCursor>;

        virtualinvoke $r59.<com.sleepycat.je.dbi.CursorImpl: void close()>();

        goto label15;

     label11:
        $r60 := @caughtexception;

     label12:
        l12 = $r60;

     label13:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(success#26);

        if success#26 != 0 goto label14;

        $r61 = result.<com.sleepycat.je.dbi.DbTree$NameLockResult: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        virtualinvoke this.<com.sleepycat.je.dbi.DbTree: void releaseDb(com.sleepycat.je.dbi.DatabaseImpl)>($r61);

        $r62 = result.<com.sleepycat.je.dbi.DbTree$NameLockResult: com.sleepycat.je.dbi.CursorImpl nameCursor>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r62);

        if $r62 == null goto label14;

        $r63 = result.<com.sleepycat.je.dbi.DbTree$NameLockResult: com.sleepycat.je.dbi.CursorImpl nameCursor>;

        virtualinvoke $r63.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        $r64 = result.<com.sleepycat.je.dbi.DbTree$NameLockResult: com.sleepycat.je.dbi.CursorImpl nameCursor>;

        virtualinvoke $r64.<com.sleepycat.je.dbi.CursorImpl: void close()>();

     label14:
        throw l12;

     label15:
        return result;

        catch java.lang.Throwable from label02 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    private void checkReplicaWrite(com.sleepycat.je.txn.Locker, com.sleepycat.je.log.ReplicationContext)
    {
        com.sleepycat.je.dbi.DbTree this;
        com.sleepycat.je.txn.Locker locker;
        com.sleepycat.je.log.ReplicationContext repContext;
        boolean $z0;

        this := @this: com.sleepycat.je.dbi.DbTree;

        locker := @parameter0: com.sleepycat.je.txn.Locker;

        repContext := @parameter1: com.sleepycat.je.log.ReplicationContext;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(repContext);

        if repContext == null goto label1;

        $z0 = virtualinvoke repContext.<com.sleepycat.je.log.ReplicationContext: boolean mustGenerateVLSN()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        virtualinvoke locker.<com.sleepycat.je.txn.Locker: void disallowReplicaWrite()>();

     label1:
        return;
    }

    public com.sleepycat.je.dbi.DatabaseImpl createDb(com.sleepycat.je.txn.Locker, java.lang.String, com.sleepycat.je.DatabaseConfig, com.sleepycat.je.txn.HandleLocker) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.dbi.DbTree this;
        com.sleepycat.je.txn.Locker locker;
        java.lang.String databaseName;
        com.sleepycat.je.DatabaseConfig dbConfig;
        com.sleepycat.je.txn.HandleLocker handleLocker;
        com.sleepycat.je.dbi.DatabaseImpl $r0;

        this := @this: com.sleepycat.je.dbi.DbTree;

        locker := @parameter0: com.sleepycat.je.txn.Locker;

        databaseName := @parameter1: java.lang.String;

        dbConfig := @parameter2: com.sleepycat.je.DatabaseConfig;

        handleLocker := @parameter3: com.sleepycat.je.txn.HandleLocker;

        $r0 = specialinvoke this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl doCreateDb(com.sleepycat.je.txn.Locker,java.lang.String,com.sleepycat.je.DatabaseConfig,com.sleepycat.je.txn.HandleLocker,com.sleepycat.je.tree.NameLN,com.sleepycat.je.log.ReplicationContext)>(locker, databaseName, dbConfig, handleLocker, null, null);

        return $r0;
    }

    private com.sleepycat.je.dbi.DatabaseImpl doCreateDb(com.sleepycat.je.txn.Locker, java.lang.String, com.sleepycat.je.DatabaseConfig, com.sleepycat.je.txn.HandleLocker, com.sleepycat.je.tree.NameLN, com.sleepycat.je.log.ReplicationContext) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.dbi.DbTree this;
        com.sleepycat.je.txn.Locker nameLocker;
        java.lang.String databaseName;
        com.sleepycat.je.DatabaseConfig dbConfig;
        com.sleepycat.je.txn.HandleLocker handleLocker;
        com.sleepycat.je.tree.NameLN replicatedLN, nameLN#64, $r8;
        com.sleepycat.je.log.ReplicationContext repContext, useRepContext#47, $r15;
        java.lang.Throwable l19, $r18;
        long allocatedLocalDbId#4, allocatedRepDbId#6, $l0, $l1, $l3, $l5, $l7, $l9;
        com.sleepycat.je.dbi.DatabaseId newId#10, $r1, $r2;
        com.sleepycat.je.dbi.EnvironmentImpl $r0, $r4, $r10;
        boolean $z0, $z1;
        com.sleepycat.je.dbi.CursorImpl idCursor#31, nameCursor#33, $r6, $r11;
        com.sleepycat.je.txn.BasicLocker idDbLocker#37;
        com.sleepycat.je.dbi.DatabaseImpl $r3, newDb#45, $r7, $r12;
        com.sleepycat.je.log.entry.DbOperationType $r5;
        byte[] $r9, $r13;
        com.sleepycat.je.tree.MapLN $r14;
        byte $b2, $b4, $b6, $b8;
        java.util.concurrent.atomic.AtomicLong $r16, $r17, $r19, $r20;

        this := @this: com.sleepycat.je.dbi.DbTree;

        nameLocker := @parameter0: com.sleepycat.je.txn.Locker;

        databaseName := @parameter1: java.lang.String;

        dbConfig := @parameter2: com.sleepycat.je.DatabaseConfig;

        handleLocker := @parameter3: com.sleepycat.je.txn.HandleLocker;

        replicatedLN := @parameter4: com.sleepycat.je.tree.NameLN;

        repContext := @parameter5: com.sleepycat.je.log.ReplicationContext;

        allocatedLocalDbId#4 = 0L;

        allocatedRepDbId#6 = 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(replicatedLN);

        if replicatedLN == null goto label01;

        newId#10 = virtualinvoke replicatedLN.<com.sleepycat.je.tree.NameLN: com.sleepycat.je.dbi.DatabaseId getId()>();

        goto label03;

     label01:
        $r0 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $z0 = virtualinvoke $r0.<com.sleepycat.je.dbi.EnvironmentImpl: boolean isReplicated()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label02;

        $z1 = virtualinvoke dbConfig.<com.sleepycat.je.DatabaseConfig: boolean getReplicated()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label02;

        $r1 = new com.sleepycat.je.dbi.DatabaseId;

        $l0 = specialinvoke this.<com.sleepycat.je.dbi.DbTree: long getNextReplicatedDbId()>();

        specialinvoke $r1.<com.sleepycat.je.dbi.DatabaseId: void <init>(long)>($l0);

        newId#10 = $r1;

        allocatedRepDbId#6 = virtualinvoke newId#10.<com.sleepycat.je.dbi.DatabaseId: long getId()>();

        goto label03;

     label02:
        $r2 = new com.sleepycat.je.dbi.DatabaseId;

        $l1 = specialinvoke this.<com.sleepycat.je.dbi.DbTree: long getNextLocalDbId()>();

        specialinvoke $r2.<com.sleepycat.je.dbi.DatabaseId: void <init>(long)>($l1);

        newId#10 = $r2;

        allocatedLocalDbId#4 = virtualinvoke newId#10.<com.sleepycat.je.dbi.DatabaseId: long getId()>();

     label03:
        idCursor#31 = null;

        nameCursor#33 = null;

        idDbLocker#37 = null;

     label04:
        $r3 = new com.sleepycat.je.dbi.DatabaseImpl;

        $r4 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        specialinvoke $r3.<com.sleepycat.je.dbi.DatabaseImpl: void <init>(com.sleepycat.je.txn.Locker,java.lang.String,com.sleepycat.je.dbi.DatabaseId,com.sleepycat.je.dbi.EnvironmentImpl,com.sleepycat.je.DatabaseConfig)>(nameLocker, databaseName, newId#10, $r4, dbConfig);

        newDb#45 = $r3;

        useRepContext#47 = repContext;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(repContext);

        if repContext != null goto label05;

        $r5 = <com.sleepycat.je.log.entry.DbOperationType: com.sleepycat.je.log.entry.DbOperationType CREATE>;

        useRepContext#47 = virtualinvoke newDb#45.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.log.DbOpReplicationContext getOperationRepContext(com.sleepycat.je.log.entry.DbOperationType)>($r5);

     label05:
        specialinvoke this.<com.sleepycat.je.dbi.DbTree: void checkReplicaWrite(com.sleepycat.je.txn.Locker,com.sleepycat.je.log.ReplicationContext)>(nameLocker, useRepContext#47);

        $r6 = new com.sleepycat.je.dbi.CursorImpl;

        $r7 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl nameDatabase>;

        specialinvoke $r6.<com.sleepycat.je.dbi.CursorImpl: void <init>(com.sleepycat.je.dbi.DatabaseImpl,com.sleepycat.je.txn.Locker)>($r7, nameLocker);

        nameCursor#33 = $r6;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(replicatedLN);

        if replicatedLN == null goto label06;

        nameLN#64 = replicatedLN;

        goto label07;

     label06:
        $r8 = new com.sleepycat.je.tree.NameLN;

        specialinvoke $r8.<com.sleepycat.je.tree.NameLN: void <init>(com.sleepycat.je.dbi.DatabaseId)>(newId#10);

        nameLN#64 = $r8;

     label07:
        $r9 = staticinvoke <com.sleepycat.utilint.StringUtils: byte[] toUTF8(java.lang.String)>(databaseName);

        virtualinvoke nameCursor#33.<com.sleepycat.je.dbi.CursorImpl: boolean insertRecord(byte[],com.sleepycat.je.tree.LN,boolean,com.sleepycat.je.log.ReplicationContext)>($r9, nameLN#64, 0, useRepContext#47);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(handleLocker);

        if handleLocker == null goto label08;

        specialinvoke this.<com.sleepycat.je.dbi.DbTree: void acquireHandleLock(com.sleepycat.je.dbi.CursorImpl,com.sleepycat.je.txn.HandleLocker)>(nameCursor#33, handleLocker);

     label08:
        $r10 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        idDbLocker#37 = staticinvoke <com.sleepycat.je.txn.BasicLocker: com.sleepycat.je.txn.BasicLocker createBasicLocker(com.sleepycat.je.dbi.EnvironmentImpl)>($r10);

        $r11 = new com.sleepycat.je.dbi.CursorImpl;

        $r12 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl idDatabase>;

        specialinvoke $r11.<com.sleepycat.je.dbi.CursorImpl: void <init>(com.sleepycat.je.dbi.DatabaseImpl,com.sleepycat.je.txn.Locker)>($r12, idDbLocker#37);

        idCursor#31 = $r11;

        $r13 = virtualinvoke newId#10.<com.sleepycat.je.dbi.DatabaseId: byte[] getBytes()>();

        $r14 = new com.sleepycat.je.tree.MapLN;

        specialinvoke $r14.<com.sleepycat.je.tree.MapLN: void <init>(com.sleepycat.je.dbi.DatabaseImpl)>(newDb#45);

        $r15 = <com.sleepycat.je.log.ReplicationContext: com.sleepycat.je.log.ReplicationContext NO_REPLICATE>;

        virtualinvoke idCursor#31.<com.sleepycat.je.dbi.CursorImpl: boolean insertRecord(byte[],com.sleepycat.je.tree.LN,boolean,com.sleepycat.je.log.ReplicationContext)>($r13, $r14, 0, $r15);

        virtualinvoke newDb#45.<com.sleepycat.je.dbi.DatabaseImpl: void incrementUseCount()>();

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(idCursor#31);

        if idCursor#31 == null goto label10;

        virtualinvoke idCursor#31.<com.sleepycat.je.dbi.CursorImpl: void close()>();

     label10:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(nameCursor#33);

        if nameCursor#33 == null goto label11;

        virtualinvoke nameCursor#33.<com.sleepycat.je.dbi.CursorImpl: void close()>();

     label11:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(idDbLocker#37);

        if idDbLocker#37 == null goto label12;

        virtualinvoke idDbLocker#37.<com.sleepycat.je.txn.Locker: void operationEnd(boolean)>(1);

     label12:
        if 1 != 0 goto label22;

        $b2 = allocatedRepDbId#6 cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b2);

        if $b2 == 0 goto label13;

        $r16 = this.<com.sleepycat.je.dbi.DbTree: java.util.concurrent.atomic.AtomicLong lastAllocatedReplicatedDbId>;

        $l3 = allocatedRepDbId#6 + 1L;

        virtualinvoke $r16.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>(allocatedRepDbId#6, $l3);

     label13:
        $b4 = allocatedLocalDbId#4 cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b4);

        if $b4 == 0 goto label22;

        $r17 = this.<com.sleepycat.je.dbi.DbTree: java.util.concurrent.atomic.AtomicLong lastAllocatedLocalDbId>;

        $l5 = allocatedLocalDbId#4 - 1L;

        virtualinvoke $r17.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>(allocatedLocalDbId#4, $l5);

        goto label22;

     label14:
        $r18 := @caughtexception;

     label15:
        l19 = $r18;

     label16:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(idCursor#31);

        if idCursor#31 == null goto label17;

        virtualinvoke idCursor#31.<com.sleepycat.je.dbi.CursorImpl: void close()>();

     label17:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(nameCursor#33);

        if nameCursor#33 == null goto label18;

        virtualinvoke nameCursor#33.<com.sleepycat.je.dbi.CursorImpl: void close()>();

     label18:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(idDbLocker#37);

        if idDbLocker#37 == null goto label19;

        virtualinvoke idDbLocker#37.<com.sleepycat.je.txn.Locker: void operationEnd(boolean)>(0);

     label19:
        if 0 != 0 goto label21;

        $b6 = allocatedRepDbId#6 cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b6);

        if $b6 == 0 goto label20;

        $r19 = this.<com.sleepycat.je.dbi.DbTree: java.util.concurrent.atomic.AtomicLong lastAllocatedReplicatedDbId>;

        $l7 = allocatedRepDbId#6 + 1L;

        virtualinvoke $r19.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>(allocatedRepDbId#6, $l7);

     label20:
        $b8 = allocatedLocalDbId#4 cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b8);

        if $b8 == 0 goto label21;

        $r20 = this.<com.sleepycat.je.dbi.DbTree: java.util.concurrent.atomic.AtomicLong lastAllocatedLocalDbId>;

        $l9 = allocatedLocalDbId#4 - 1L;

        virtualinvoke $r20.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>(allocatedLocalDbId#4, $l9);

     label21:
        throw l19;

     label22:
        return newDb#45;

        catch java.lang.Throwable from label04 to label09 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    private long getNextReplicatedDbId()
    {
        com.sleepycat.je.dbi.DbTree this;
        java.util.concurrent.atomic.AtomicLong $r0;
        long $l0;

        this := @this: com.sleepycat.je.dbi.DbTree;

        $r0 = this.<com.sleepycat.je.dbi.DbTree: java.util.concurrent.atomic.AtomicLong lastAllocatedReplicatedDbId>;

        $l0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: long decrementAndGet()>();

        return $l0;
    }

    private long getNextLocalDbId()
    {
        com.sleepycat.je.dbi.DbTree this;
        java.util.concurrent.atomic.AtomicLong $r0;
        long $l0;

        this := @this: com.sleepycat.je.dbi.DbTree;

        $r0 = this.<com.sleepycat.je.dbi.DbTree: java.util.concurrent.atomic.AtomicLong lastAllocatedLocalDbId>;

        $l0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        return $l0;
    }

    public void writeToLog(java.nio.ByteBuffer)
    {
        com.sleepycat.je.dbi.DbTree this;
        java.nio.ByteBuffer logBuffer;
        java.util.concurrent.atomic.AtomicLong $r0, $r1;
        long $l0, $l1;
        com.sleepycat.je.dbi.DatabaseImpl $r2, $r3;
        byte $b2;

        this := @this: com.sleepycat.je.dbi.DbTree;

        logBuffer := @parameter0: java.nio.ByteBuffer;

        $r0 = this.<com.sleepycat.je.dbi.DbTree: java.util.concurrent.atomic.AtomicLong lastAllocatedLocalDbId>;

        $l0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: long get()>();

        staticinvoke <com.sleepycat.je.log.LogUtils: void writeLong(java.nio.ByteBuffer,long)>(logBuffer, $l0);

        $r1 = this.<com.sleepycat.je.dbi.DbTree: java.util.concurrent.atomic.AtomicLong lastAllocatedReplicatedDbId>;

        $l1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        staticinvoke <com.sleepycat.je.log.LogUtils: void writeLong(java.nio.ByteBuffer,long)>(logBuffer, $l1);

        $r2 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl idDatabase>;

        virtualinvoke $r2.<com.sleepycat.je.dbi.DatabaseImpl: void writeToLog(java.nio.ByteBuffer)>(logBuffer);

        $r3 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl nameDatabase>;

        virtualinvoke $r3.<com.sleepycat.je.dbi.DatabaseImpl: void writeToLog(java.nio.ByteBuffer)>(logBuffer);

        $b2 = this.<com.sleepycat.je.dbi.DbTree: byte flags>;

        virtualinvoke logBuffer.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b2);

        return;
    }

    public int getLogSize()
    {
        com.sleepycat.je.dbi.DbTree this;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        com.sleepycat.je.dbi.DatabaseImpl $r0, $r1;

        this := @this: com.sleepycat.je.dbi.DbTree;

        $i0 = staticinvoke <com.sleepycat.je.log.LogUtils: int getLongLogSize()>();

        $i1 = staticinvoke <com.sleepycat.je.log.LogUtils: int getLongLogSize()>();

        $i2 = $i0 + $i1;

        $r0 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl idDatabase>;

        $i3 = virtualinvoke $r0.<com.sleepycat.je.dbi.DatabaseImpl: int getLogSize()>();

        $i4 = $i2 + $i3;

        $r1 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl nameDatabase>;

        $i5 = virtualinvoke $r1.<com.sleepycat.je.dbi.DatabaseImpl: int getLogSize()>();

        $i6 = $i4 + $i5;

        $i7 = $i6 + 1;

        return $i7;
    }

    public java.util.Map getDbNamesAndIds() throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.dbi.DbTree this;
        java.util.HashMap nameMap, $r0;
        com.sleepycat.je.dbi.DbTree$3Traversal traversal, $r1;
        com.sleepycat.je.dbi.DatabaseImpl $r2;
        com.sleepycat.je.txn.LockType $r3;

        this := @this: com.sleepycat.je.dbi.DbTree;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        nameMap = $r0;

        $r1 = new com.sleepycat.je.dbi.DbTree$3Traversal;

        specialinvoke $r1.<com.sleepycat.je.dbi.DbTree$3Traversal: void <init>(com.sleepycat.je.dbi.DbTree,java.util.Map)>(this, nameMap);

        traversal = $r1;

        $r2 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl nameDatabase>;

        $r3 = <com.sleepycat.je.txn.LockType: com.sleepycat.je.txn.LockType NONE>;

        staticinvoke <com.sleepycat.je.dbi.CursorImpl: void traverseDbWithCursor(com.sleepycat.je.dbi.DatabaseImpl,com.sleepycat.je.txn.LockType,boolean,com.sleepycat.je.dbi.CursorImpl$WithCursor)>($r2, $r3, 0, traversal);

        return nameMap;
    }

    public void setLastDbId(long, long)
    {
        com.sleepycat.je.dbi.DbTree this;
        long lastReplicatedDbId, lastLocalDbId;
        java.util.concurrent.atomic.AtomicLong $r0, $r1;

        this := @this: com.sleepycat.je.dbi.DbTree;

        lastReplicatedDbId := @parameter0: long;

        lastLocalDbId := @parameter1: long;

        $r0 = this.<com.sleepycat.je.dbi.DbTree: java.util.concurrent.atomic.AtomicLong lastAllocatedReplicatedDbId>;

        virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: void set(long)>(lastReplicatedDbId);

        $r1 = this.<com.sleepycat.je.dbi.DbTree: java.util.concurrent.atomic.AtomicLong lastAllocatedLocalDbId>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void set(long)>(lastLocalDbId);

        return;
    }

    public void rebuildINListMapDb() throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.dbi.DbTree this;
        com.sleepycat.je.dbi.DatabaseImpl $r0;
        com.sleepycat.je.tree.Tree $r1;

        this := @this: com.sleepycat.je.dbi.DbTree;

        $r0 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl idDatabase>;

        $r1 = virtualinvoke $r0.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.tree.Tree getTree()>();

        virtualinvoke $r1.<com.sleepycat.je.tree.Tree: void rebuildINList()>();

        return;
    }

    void deleteMapLN(com.sleepycat.je.dbi.DatabaseId) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.dbi.DbTree this;
        com.sleepycat.je.dbi.DatabaseId id;
        boolean found, done#2, operationOk#9, $z0, $z1, operationOk#45;
        com.sleepycat.je.tree.MapLN mapLN;
        com.sleepycat.je.dbi.DatabaseImpl dbImpl, $r2;
        com.sleepycat.je.LockConflictException l6, $r10;
        java.lang.Throwable l9, $r11;
        com.sleepycat.je.txn.BasicLocker idDbLocker#5;
        com.sleepycat.je.dbi.CursorImpl idCursor#7, $r1;
        com.sleepycat.je.dbi.EnvironmentImpl $r0;
        com.sleepycat.je.DatabaseEntry $r3;
        byte[] $r4;
        com.sleepycat.je.txn.LockType $r5;
        com.sleepycat.je.tree.LN $r6;
        java.lang.AssertionError $r7;
        com.sleepycat.je.log.ReplicationContext $r8;

        this := @this: com.sleepycat.je.dbi.DbTree;

        id := @parameter0: com.sleepycat.je.dbi.DatabaseId;

        done#2 = 0;

     label01:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(done#2);

        if done#2 != 0 goto label19;

        idDbLocker#5 = null;

        idCursor#7 = null;

        operationOk#9 = 0;

     label02:
        $r0 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        idDbLocker#5 = staticinvoke <com.sleepycat.je.txn.BasicLocker: com.sleepycat.je.txn.BasicLocker createBasicLocker(com.sleepycat.je.dbi.EnvironmentImpl)>($r0);

        $r1 = new com.sleepycat.je.dbi.CursorImpl;

        $r2 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl idDatabase>;

        specialinvoke $r1.<com.sleepycat.je.dbi.CursorImpl: void <init>(com.sleepycat.je.dbi.DatabaseImpl,com.sleepycat.je.txn.Locker)>($r2, idDbLocker#5);

        idCursor#7 = $r1;

        $r3 = new com.sleepycat.je.DatabaseEntry;

        $r4 = virtualinvoke id.<com.sleepycat.je.dbi.DatabaseId: byte[] getBytes()>();

        specialinvoke $r3.<com.sleepycat.je.DatabaseEntry: void <init>(byte[])>($r4);

        $r5 = <com.sleepycat.je.txn.LockType: com.sleepycat.je.txn.LockType WRITE>;

        found = virtualinvoke idCursor#7.<com.sleepycat.je.dbi.CursorImpl: boolean searchExact(com.sleepycat.je.DatabaseEntry,com.sleepycat.je.txn.LockType)>($r3, $r5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(found);

        if found == 0 goto label05;

        $r6 = virtualinvoke idCursor#7.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.tree.LN getCurrentLN(boolean,boolean)>(1, 1);

        mapLN = (com.sleepycat.je.tree.MapLN) $r6;

        $z0 = <com.sleepycat.je.dbi.DbTree: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label03;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(mapLN);

        if mapLN != null goto label03;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label03:
        dbImpl = virtualinvoke mapLN.<com.sleepycat.je.tree.MapLN: com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        $z1 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: boolean isInUseDuringDbRemove()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label04;

        $r8 = <com.sleepycat.je.log.ReplicationContext: com.sleepycat.je.log.ReplicationContext NO_REPLICATE>;

        virtualinvoke idCursor#7.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.OperationResult deleteCurrentRecord(com.sleepycat.je.log.ReplicationContext)>($r8);

        done#2 = 1;

     label04:
        goto label06;

     label05:
        done#2 = 1;

     label06:
        operationOk#45 = 1;

     label07:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(idCursor#7);

        if idCursor#7 == null goto label08;

        virtualinvoke idCursor#7.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        virtualinvoke idCursor#7.<com.sleepycat.je.dbi.CursorImpl: void close()>();

     label08:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(idDbLocker#5);

        if idDbLocker#5 == null goto label18;

        virtualinvoke idDbLocker#5.<com.sleepycat.je.txn.Locker: void operationEnd(boolean)>(operationOk#45);

        goto label18;

     label09:
        $r10 := @caughtexception;

     label10:
        l6 = $r10;

     label11:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(idCursor#7);

        if idCursor#7 == null goto label12;

        virtualinvoke idCursor#7.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        virtualinvoke idCursor#7.<com.sleepycat.je.dbi.CursorImpl: void close()>();

     label12:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(idDbLocker#5);

        if idDbLocker#5 == null goto label18;

        virtualinvoke idDbLocker#5.<com.sleepycat.je.txn.Locker: void operationEnd(boolean)>(operationOk#9);

        goto label18;

     label13:
        $r11 := @caughtexception;

     label14:
        l9 = $r11;

     label15:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(idCursor#7);

        if idCursor#7 == null goto label16;

        virtualinvoke idCursor#7.<com.sleepycat.je.dbi.CursorImpl: void releaseBIN()>();

        virtualinvoke idCursor#7.<com.sleepycat.je.dbi.CursorImpl: void close()>();

     label16:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(idDbLocker#5);

        if idDbLocker#5 == null goto label17;

        virtualinvoke idDbLocker#5.<com.sleepycat.je.txn.Locker: void operationEnd(boolean)>(operationOk#9);

     label17:
        throw l9;

     label18:
        goto label01;

     label19:
        return;

        catch com.sleepycat.je.LockConflictException from label02 to label07 with label09;
        catch java.lang.Throwable from label02 to label07 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public com.sleepycat.je.dbi.DatabaseImpl dbRemove(com.sleepycat.je.txn.Locker, java.lang.String, com.sleepycat.je.dbi.DatabaseId) throws com.sleepycat.je.DatabaseNotFoundException, com.sleepycat.je.dbi.DbTree$NeedRepLockerException
    {
        com.sleepycat.je.dbi.DbTree this;
        com.sleepycat.je.txn.Locker locker;
        java.lang.String databaseName;
        com.sleepycat.je.dbi.DatabaseId checkId;
        com.sleepycat.je.dbi.DatabaseImpl $r0;

        this := @this: com.sleepycat.je.dbi.DbTree;

        locker := @parameter0: com.sleepycat.je.txn.Locker;

        databaseName := @parameter1: java.lang.String;

        checkId := @parameter2: com.sleepycat.je.dbi.DatabaseId;

        $r0 = specialinvoke this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl doRemoveDb(com.sleepycat.je.txn.Locker,java.lang.String,com.sleepycat.je.dbi.DatabaseId,com.sleepycat.je.log.DbOpReplicationContext)>(locker, databaseName, checkId, null);

        return $r0;
    }

    private com.sleepycat.je.dbi.DatabaseImpl doRemoveDb(com.sleepycat.je.txn.Locker, java.lang.String, com.sleepycat.je.dbi.DatabaseId, com.sleepycat.je.log.DbOpReplicationContext) throws com.sleepycat.je.DatabaseNotFoundException, com.sleepycat.je.dbi.DbTree$NeedRepLockerException
    {
        com.sleepycat.je.dbi.DbTree this;
        com.sleepycat.je.txn.Locker locker;
        java.lang.String databaseName, $r7;
        com.sleepycat.je.dbi.DatabaseId checkId, $r2;
        com.sleepycat.je.log.DbOpReplicationContext repContext;
        com.sleepycat.je.dbi.DbTree$3 $r0;
        com.sleepycat.je.dbi.DbTree$NameLockResult result;
        com.sleepycat.je.log.ReplicationContext useRepContext;
        com.sleepycat.je.dbi.DatabaseImpl l8, $r9;
        java.lang.Throwable l9, $r10;
        com.sleepycat.je.dbi.CursorImpl nameCursor#2;
        com.sleepycat.je.tree.NameLN $r1;
        boolean $z0;
        com.sleepycat.je.DatabaseNotFoundException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;

        this := @this: com.sleepycat.je.dbi.DbTree;

        locker := @parameter0: com.sleepycat.je.txn.Locker;

        databaseName := @parameter1: java.lang.String;

        checkId := @parameter2: com.sleepycat.je.dbi.DatabaseId;

        repContext := @parameter3: com.sleepycat.je.log.DbOpReplicationContext;

        nameCursor#2 = null;

        $r0 = new com.sleepycat.je.dbi.DbTree$3;

        specialinvoke $r0.<com.sleepycat.je.dbi.DbTree$3: void <init>(com.sleepycat.je.dbi.DbTree,com.sleepycat.je.log.DbOpReplicationContext)>(this, repContext);

        result = specialinvoke this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DbTree$NameLockResult lockNameLN(com.sleepycat.je.txn.Locker,java.lang.String,java.lang.String,com.sleepycat.je.dbi.DbTree$GetRepContext)>(locker, databaseName, "remove", $r0);

        useRepContext = result.<com.sleepycat.je.dbi.DbTree$NameLockResult: com.sleepycat.je.log.ReplicationContext repContext>;

     label1:
        nameCursor#2 = result.<com.sleepycat.je.dbi.DbTree$NameLockResult: com.sleepycat.je.dbi.CursorImpl nameCursor>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(checkId);

        if checkId == null goto label2;

        $r1 = result.<com.sleepycat.je.dbi.DbTree$NameLockResult: com.sleepycat.je.tree.NameLN nameLN>;

        $r2 = virtualinvoke $r1.<com.sleepycat.je.tree.NameLN: com.sleepycat.je.dbi.DatabaseId getId()>();

        $z0 = virtualinvoke checkId.<com.sleepycat.je.dbi.DatabaseId: boolean equals(java.lang.Object)>($r2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label2;

        $r3 = new com.sleepycat.je.DatabaseNotFoundException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ID mismatch: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(databaseName);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<com.sleepycat.je.DatabaseNotFoundException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label2:
        virtualinvoke nameCursor#2.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.OperationResult deleteCurrentRecord(com.sleepycat.je.log.ReplicationContext)>(useRepContext);

        $r9 = result.<com.sleepycat.je.dbi.DbTree$NameLockResult: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        virtualinvoke locker.<com.sleepycat.je.txn.Locker: void markDeleteAtTxnEnd(com.sleepycat.je.dbi.DatabaseImpl,boolean)>($r9, 1);

        l8 = result.<com.sleepycat.je.dbi.DbTree$NameLockResult: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

     label3:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(nameCursor#2);

        if nameCursor#2 == null goto label4;

        virtualinvoke nameCursor#2.<com.sleepycat.je.dbi.CursorImpl: void close()>();

     label4:
        return l8;

     label5:
        $r10 := @caughtexception;

     label6:
        l9 = $r10;

     label7:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(nameCursor#2);

        if nameCursor#2 == null goto label8;

        virtualinvoke nameCursor#2.<com.sleepycat.je.dbi.CursorImpl: void close()>();

     label8:
        throw l9;

        catch java.lang.Throwable from label1 to label3 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public com.sleepycat.je.dbi.DatabaseImpl openNonRepInternalDB(com.sleepycat.je.dbi.DbType)
    {
        com.sleepycat.je.dbi.DbTree this;
        com.sleepycat.je.dbi.DbType dbType;
        java.lang.String name;
        com.sleepycat.je.txn.Txn autoTxn;
        com.sleepycat.je.DatabaseConfig dbConfig, $r3;
        java.lang.Throwable l7, $r4;
        com.sleepycat.je.dbi.EnvironmentImpl $r0, $r2;
        com.sleepycat.je.TransactionConfig $r1;
        boolean operationOk#9, $z0;
        com.sleepycat.je.dbi.DatabaseImpl db#15, l6#37;

        this := @this: com.sleepycat.je.dbi.DbTree;

        dbType := @parameter0: com.sleepycat.je.dbi.DbType;

        name = virtualinvoke dbType.<com.sleepycat.je.dbi.DbType: java.lang.String getInternalName()>();

        $r0 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r1 = new com.sleepycat.je.TransactionConfig;

        specialinvoke $r1.<com.sleepycat.je.TransactionConfig: void <init>()>();

        autoTxn = staticinvoke <com.sleepycat.je.txn.Txn: com.sleepycat.je.txn.Txn createLocalAutoTxn(com.sleepycat.je.dbi.EnvironmentImpl,com.sleepycat.je.TransactionConfig)>($r0, $r1);

        operationOk#9 = 0;

     label1:
        db#15 = virtualinvoke this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl getDb(com.sleepycat.je.txn.Locker,java.lang.String,com.sleepycat.je.txn.HandleLocker,boolean)>(autoTxn, name, null, 0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(db#15);

        if db#15 != null goto label4;

        $r2 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $z0 = virtualinvoke $r2.<com.sleepycat.je.dbi.EnvironmentImpl: boolean isReadOnly()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

     label2:
        virtualinvoke autoTxn.<com.sleepycat.je.txn.Locker: void operationEnd(boolean)>(0);

        return null;

     label3:
        $r3 = new com.sleepycat.je.DatabaseConfig;

        specialinvoke $r3.<com.sleepycat.je.DatabaseConfig: void <init>()>();

        dbConfig = $r3;

        virtualinvoke dbConfig.<com.sleepycat.je.DatabaseConfig: com.sleepycat.je.DatabaseConfig setReplicated(boolean)>(0);

        db#15 = virtualinvoke this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl createInternalDb(com.sleepycat.je.txn.Locker,java.lang.String,com.sleepycat.je.DatabaseConfig)>(autoTxn, name, dbConfig);

     label4:
        operationOk#9 = 1;

        l6#37 = db#15;

     label5:
        virtualinvoke autoTxn.<com.sleepycat.je.txn.Locker: void operationEnd(boolean)>(1);

        return l6#37;

     label6:
        $r4 := @caughtexception;

     label7:
        l7 = $r4;

     label8:
        virtualinvoke autoTxn.<com.sleepycat.je.txn.Locker: void operationEnd(boolean)>(operationOk#9);

        throw l7;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public com.sleepycat.je.dbi.DatabaseImpl createInternalDb(com.sleepycat.je.txn.Locker, java.lang.String, com.sleepycat.je.DatabaseConfig) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.dbi.DbTree this;
        com.sleepycat.je.txn.Locker locker;
        java.lang.String databaseName;
        com.sleepycat.je.DatabaseConfig dbConfig;
        com.sleepycat.je.dbi.DatabaseImpl 'ret';

        this := @this: com.sleepycat.je.dbi.DbTree;

        locker := @parameter0: com.sleepycat.je.txn.Locker;

        databaseName := @parameter1: java.lang.String;

        dbConfig := @parameter2: com.sleepycat.je.DatabaseConfig;

        virtualinvoke dbConfig.<com.sleepycat.je.DatabaseConfig: com.sleepycat.je.DatabaseConfig setKeyPrefixing(boolean)>(0);

        'ret' = specialinvoke this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl doCreateDb(com.sleepycat.je.txn.Locker,java.lang.String,com.sleepycat.je.DatabaseConfig,com.sleepycat.je.txn.HandleLocker,com.sleepycat.je.tree.NameLN,com.sleepycat.je.log.ReplicationContext)>(locker, databaseName, dbConfig, null, null, null);

        virtualinvoke 'ret'.<com.sleepycat.je.dbi.DatabaseImpl: void clearKeyPrefixing()>();

        return 'ret';
    }

    void initExistingEnvironment(com.sleepycat.je.dbi.EnvironmentImpl) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.dbi.DbTree this;
        com.sleepycat.je.dbi.EnvironmentImpl eImpl;
        boolean $z0, $z1;
        com.sleepycat.je.dbi.DatabaseImpl $r0, $r1;

        this := @this: com.sleepycat.je.dbi.DbTree;

        eImpl := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        $z0 = virtualinvoke this.<com.sleepycat.je.dbi.DbTree: boolean isReplicated()>();

        $z1 = specialinvoke this.<com.sleepycat.je.dbi.DbTree: boolean getPreserveVLSN()>();

        virtualinvoke eImpl.<com.sleepycat.je.dbi.EnvironmentImpl: void checkRulesForExistingEnv(boolean,boolean)>($z0, $z1);

        this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.EnvironmentImpl envImpl> = eImpl;

        $r0 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl idDatabase>;

        virtualinvoke $r0.<com.sleepycat.je.dbi.DatabaseImpl: void setEnvironmentImpl(com.sleepycat.je.dbi.EnvironmentImpl)>(eImpl);

        $r1 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl nameDatabase>;

        virtualinvoke $r1.<com.sleepycat.je.dbi.DatabaseImpl: void setEnvironmentImpl(com.sleepycat.je.dbi.EnvironmentImpl)>(eImpl);

        return;
    }

    boolean isReplicated()
    {
        com.sleepycat.je.dbi.DbTree this;
        byte $b0, $b1;
        boolean $z0;

        this := @this: com.sleepycat.je.dbi.DbTree;

        $b0 = this.<com.sleepycat.je.dbi.DbTree: byte flags>;

        $b1 = $b0 & 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private boolean getPreserveVLSN()
    {
        com.sleepycat.je.dbi.DbTree this;
        byte $b0, $b1;
        boolean $z0;

        this := @this: com.sleepycat.je.dbi.DbTree;

        $b0 = this.<com.sleepycat.je.dbi.DbTree: byte flags>;

        $b1 = $b0 & 8;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    void setIsRepConverted()
    {
        com.sleepycat.je.dbi.DbTree this;
        byte $b0, $b1, $b2;

        this := @this: com.sleepycat.je.dbi.DbTree;

        $b0 = this.<com.sleepycat.je.dbi.DbTree: byte flags>;

        $b1 = $b0 | 2;

        $b2 = (byte) $b1;

        this.<com.sleepycat.je.dbi.DbTree: byte flags> = $b2;

        return;
    }

    public void optionalModifyDbRoot(com.sleepycat.je.dbi.DatabaseImpl) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.dbi.DbTree this;
        com.sleepycat.je.dbi.DatabaseImpl db;
        boolean $z0;

        this := @this: com.sleepycat.je.dbi.DbTree;

        db := @parameter0: com.sleepycat.je.dbi.DatabaseImpl;

        $z0 = virtualinvoke db.<com.sleepycat.je.dbi.DatabaseImpl: boolean isDeferredWriteMode()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        return;

     label1:
        virtualinvoke this.<com.sleepycat.je.dbi.DbTree: void modifyDbRoot(com.sleepycat.je.dbi.DatabaseImpl)>(db);

        return;
    }

    public com.sleepycat.je.dbi.DatabaseImpl dbRename(com.sleepycat.je.txn.Locker, java.lang.String, java.lang.String) throws com.sleepycat.je.DatabaseNotFoundException, com.sleepycat.je.dbi.DbTree$NeedRepLockerException
    {
        com.sleepycat.je.dbi.DbTree this;
        com.sleepycat.je.txn.Locker locker;
        java.lang.String databaseName, newName;
        com.sleepycat.je.dbi.DatabaseImpl $r0;

        this := @this: com.sleepycat.je.dbi.DbTree;

        locker := @parameter0: com.sleepycat.je.txn.Locker;

        databaseName := @parameter1: java.lang.String;

        newName := @parameter2: java.lang.String;

        $r0 = specialinvoke this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl doRenameDb(com.sleepycat.je.txn.Locker,java.lang.String,java.lang.String,com.sleepycat.je.tree.NameLN,com.sleepycat.je.log.DbOpReplicationContext)>(locker, databaseName, newName, null, null);

        return $r0;
    }

    private com.sleepycat.je.dbi.DatabaseImpl doRenameDb(com.sleepycat.je.txn.Locker, java.lang.String, java.lang.String, com.sleepycat.je.tree.NameLN, com.sleepycat.je.log.DbOpReplicationContext) throws com.sleepycat.je.DatabaseNotFoundException, com.sleepycat.je.dbi.DbTree$NeedRepLockerException
    {
        com.sleepycat.je.dbi.DbTree this;
        com.sleepycat.je.txn.Locker locker;
        java.lang.String databaseName, newName;
        com.sleepycat.je.tree.NameLN replicatedLN, useLN, $r3;
        com.sleepycat.je.log.DbOpReplicationContext repContext;
        com.sleepycat.je.dbi.DbTree$NameLockResult result;
        com.sleepycat.je.dbi.CursorImpl nameCursor;
        com.sleepycat.je.dbi.DatabaseImpl dbImpl, l11;
        com.sleepycat.je.log.ReplicationContext useRepContext, $r1;
        java.lang.Throwable l12, $r6;
        com.sleepycat.je.dbi.DbTree$2 $r0;
        com.sleepycat.je.dbi.DatabaseId $r4;
        byte[] $r5;

        this := @this: com.sleepycat.je.dbi.DbTree;

        locker := @parameter0: com.sleepycat.je.txn.Locker;

        databaseName := @parameter1: java.lang.String;

        newName := @parameter2: java.lang.String;

        replicatedLN := @parameter3: com.sleepycat.je.tree.NameLN;

        repContext := @parameter4: com.sleepycat.je.log.DbOpReplicationContext;

        $r0 = new com.sleepycat.je.dbi.DbTree$2;

        specialinvoke $r0.<com.sleepycat.je.dbi.DbTree$2: void <init>(com.sleepycat.je.dbi.DbTree,com.sleepycat.je.log.DbOpReplicationContext)>(this, repContext);

        result = specialinvoke this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DbTree$NameLockResult lockNameLN(com.sleepycat.je.txn.Locker,java.lang.String,java.lang.String,com.sleepycat.je.dbi.DbTree$GetRepContext)>(locker, databaseName, "rename", $r0);

        nameCursor = result.<com.sleepycat.je.dbi.DbTree$NameLockResult: com.sleepycat.je.dbi.CursorImpl nameCursor>;

        dbImpl = result.<com.sleepycat.je.dbi.DbTree$NameLockResult: com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        useRepContext = result.<com.sleepycat.je.dbi.DbTree$NameLockResult: com.sleepycat.je.log.ReplicationContext repContext>;

     label1:
        $r1 = <com.sleepycat.je.log.ReplicationContext: com.sleepycat.je.log.ReplicationContext NO_REPLICATE>;

        virtualinvoke nameCursor.<com.sleepycat.je.dbi.CursorImpl: com.sleepycat.je.OperationResult deleteCurrentRecord(com.sleepycat.je.log.ReplicationContext)>($r1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(replicatedLN);

        if replicatedLN == null goto label2;

        $r3 = replicatedLN;

        goto label3;

     label2:
        $r3 = new com.sleepycat.je.tree.NameLN;

        $r4 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.DatabaseId getId()>();

        specialinvoke $r3.<com.sleepycat.je.tree.NameLN: void <init>(com.sleepycat.je.dbi.DatabaseId)>($r4);

     label3:
        useLN = $r3;

        virtualinvoke nameCursor.<com.sleepycat.je.dbi.CursorImpl: void reset()>();

        $r5 = staticinvoke <com.sleepycat.utilint.StringUtils: byte[] toUTF8(java.lang.String)>(newName);

        virtualinvoke nameCursor.<com.sleepycat.je.dbi.CursorImpl: boolean insertRecord(byte[],com.sleepycat.je.tree.LN,boolean,com.sleepycat.je.log.ReplicationContext)>($r5, useLN, 0, useRepContext);

        virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: void setDebugDatabaseName(java.lang.String)>(newName);

        l11 = dbImpl;

     label4:
        virtualinvoke this.<com.sleepycat.je.dbi.DbTree: void releaseDb(com.sleepycat.je.dbi.DatabaseImpl)>(dbImpl);

        virtualinvoke nameCursor.<com.sleepycat.je.dbi.CursorImpl: void close()>();

        return l11;

     label5:
        $r6 := @caughtexception;

     label6:
        l12 = $r6;

     label7:
        virtualinvoke this.<com.sleepycat.je.dbi.DbTree: void releaseDb(com.sleepycat.je.dbi.DatabaseImpl)>(dbImpl);

        virtualinvoke nameCursor.<com.sleepycat.je.dbi.CursorImpl: void close()>();

        throw l12;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public com.sleepycat.je.dbi.DatabaseImpl getIdDatabaseImpl()
    {
        com.sleepycat.je.dbi.DbTree this;
        com.sleepycat.je.dbi.DatabaseImpl $r0;

        this := @this: com.sleepycat.je.dbi.DbTree;

        $r0 = this.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl idDatabase>;

        return $r0;
    }


