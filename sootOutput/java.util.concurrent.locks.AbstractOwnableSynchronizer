    protected void <init>()
    {
        java.util.concurrent.locks.AbstractOwnableSynchronizer l0;

        l0 := @this: java.util.concurrent.locks.AbstractOwnableSynchronizer;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        return;
    }

    protected final java.lang.Thread getExclusiveOwnerThread()
    {
        java.util.concurrent.locks.AbstractOwnableSynchronizer l0;
        java.lang.Thread $r0;

        l0 := @this: java.util.concurrent.locks.AbstractOwnableSynchronizer;

        $r0 = l0.<java.util.concurrent.locks.AbstractOwnableSynchronizer: java.lang.Thread exclusiveOwnerThread>;

        return $r0;
    }

    protected final void setExclusiveOwnerThread(java.lang.Thread)
    {
        java.util.concurrent.locks.AbstractOwnableSynchronizer l0;
        java.lang.Thread l1;

        l0 := @this: java.util.concurrent.locks.AbstractOwnableSynchronizer;

        l1 := @parameter0: java.lang.Thread;

        l0.<java.util.concurrent.locks.AbstractOwnableSynchronizer: java.lang.Thread exclusiveOwnerThread> = l1;

        return;
    }


