    public static com.sleepycat.je.log.entry.LNLogEntry create(java.lang.Class)
    {
        java.lang.Class 'cls';
        com.sleepycat.je.log.entry.LNLogEntry $r0;

        'cls' := @parameter0: java.lang.Class;

        $r0 = new com.sleepycat.je.log.entry.LNLogEntry;

        specialinvoke $r0.<com.sleepycat.je.log.entry.LNLogEntry: void <init>(java.lang.Class)>('cls');

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "com/sleepycat/je/log/entry/LNLogEntry";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sleepycat.je.log.entry.LNLogEntry: boolean $assertionsDisabled> = $z1;

        return;
    }

    void <init>(java.lang.Class)
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        java.lang.Class 'cls';
        java.lang.reflect.Constructor $r0;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        'cls' := @parameter0: java.lang.Class;

        specialinvoke this.<com.sleepycat.je.log.entry.BaseReplicableEntry: void <init>(java.lang.Class)>('cls');

        this.<com.sleepycat.je.log.entry.LNLogEntry: long abortLsn> = -1L;

        this.<com.sleepycat.je.log.entry.LNLogEntry: byte[] abortKey> = null;

        this.<com.sleepycat.je.log.entry.LNLogEntry: byte[] abortData> = null;

        this.<com.sleepycat.je.log.entry.LNLogEntry: long abortVLSN> = -1L;

        this.<com.sleepycat.je.log.entry.LNLogEntry: int abortExpiration> = 0;

        this.<com.sleepycat.je.log.entry.LNLogEntry: boolean abortExpirationInHours> = 0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>('cls');

        if 'cls' != class "com/sleepycat/je/tree/LN" goto label1;

        $r0 = staticinvoke <com.sleepycat.je.log.entry.LNLogEntry: java.lang.reflect.Constructor getNoArgsConstructor(java.lang.Class)>(class "com/sleepycat/je/tree/VersionedLN");

        this.<com.sleepycat.je.log.entry.LNLogEntry: java.lang.reflect.Constructor versionedLNConstructor> = $r0;

        goto label2;

     label1:
        this.<com.sleepycat.je.log.entry.LNLogEntry: java.lang.reflect.Constructor versionedLNConstructor> = null;

     label2:
        return;
    }

    public volatile void setLogType(com.sleepycat.je.log.LogEntryType)
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        com.sleepycat.je.log.LogEntryType l1;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        l1 := @parameter0: com.sleepycat.je.log.LogEntryType;

        specialinvoke this.<com.sleepycat.je.log.entry.BaseReplicableEntry: void setLogType(com.sleepycat.je.log.LogEntryType)>(l1);

        return;
    }

    public volatile com.sleepycat.je.log.entry.LogEntry clone()
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        com.sleepycat.je.log.entry.LogEntry $r0;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        $r0 = specialinvoke this.<com.sleepycat.je.log.entry.BaseReplicableEntry: com.sleepycat.je.log.entry.LogEntry clone()>();

        return $r0;
    }

    public volatile java.lang.Object getMainItem()
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        com.sleepycat.je.tree.LN $r0;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        $r0 = virtualinvoke this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.tree.LN getMainItem()>();

        return $r0;
    }

    public void readEntry(com.sleepycat.je.dbi.EnvironmentImpl, com.sleepycat.je.log.LogEntryHeader, java.nio.ByteBuffer)
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        com.sleepycat.je.log.LogEntryHeader header;
        java.nio.ByteBuffer entryBuffer;
        boolean keyIsLastSerializedField, $z0, $z1, $z2;
        java.lang.Class $r0;
        java.lang.AssertionError $r1;
        int $i0;
        com.sleepycat.je.log.LogEntryType $r2;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        envImpl := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        header := @parameter1: com.sleepycat.je.log.LogEntryHeader;

        entryBuffer := @parameter2: java.nio.ByteBuffer;

        $z0 = <com.sleepycat.je.log.entry.LNLogEntry: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r0 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == class "com/sleepycat/je/log/entry/LNLogEntry" goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $i0 = virtualinvoke header.<com.sleepycat.je.log.LogEntryHeader: int getVersion()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 >= 8 goto label2;

        $r2 = this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.log.LogEntryType entryType>;

        $z1 = virtualinvoke $r2.<com.sleepycat.je.log.LogEntryType: boolean isUserLNType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label3;

     label2:
        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        keyIsLastSerializedField = $z2;

        virtualinvoke this.<com.sleepycat.je.log.entry.LNLogEntry: void readBaseLNEntry(com.sleepycat.je.dbi.EnvironmentImpl,com.sleepycat.je.log.LogEntryHeader,java.nio.ByteBuffer,boolean)>(envImpl, header, entryBuffer, keyIsLastSerializedField);

        return;
    }

    final void readBaseLNEntry(com.sleepycat.je.dbi.EnvironmentImpl, com.sleepycat.je.log.LogEntryHeader, java.nio.ByteBuffer, boolean)
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        com.sleepycat.je.log.LogEntryHeader header;
        java.nio.ByteBuffer entryBuffer;
        boolean keyIsLastSerializedField, unpacked, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        int logVersion, recStartPosition, bytesWritten, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, keySize#144;
        byte $b0, $b5, $b6, $b8, $b9;
        com.sleepycat.je.tree.LN $r0, $r1, $r11, $r12, $r15;
        com.sleepycat.je.dbi.DatabaseId $r2, $r3;
        byte[] $r4, $r9, $r10, $r13;
        com.sleepycat.je.log.LogEntryType $r5;
        long $l1, $l2, $l3, $l4, $l7, $l10, $l21;
        com.sleepycat.je.txn.Txn $r7, $r8;
        com.sleepycat.je.utilint.VLSN $r14, $r16;
        com.sleepycat.je.log.entry.LNLogEntry$DupStatus $r18;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        envImpl := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        header := @parameter1: com.sleepycat.je.log.LogEntryHeader;

        entryBuffer := @parameter2: java.nio.ByteBuffer;

        keyIsLastSerializedField := @parameter3: boolean;

        specialinvoke this.<com.sleepycat.je.log.entry.LNLogEntry: void reset()>();

        logVersion = virtualinvoke header.<com.sleepycat.je.log.LogEntryHeader: int getVersion()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(logVersion);

        if logVersion >= 6 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        unpacked = $z0;

        recStartPosition = virtualinvoke entryBuffer.<java.nio.ByteBuffer: int position()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(logVersion);

        if logVersion < 12 goto label03;

        $b0 = virtualinvoke entryBuffer.<java.nio.ByteBuffer: byte get()>();

        specialinvoke this.<com.sleepycat.je.log.entry.LNLogEntry: void setFlags(byte)>($b0);

     label03:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(logVersion);

        if logVersion >= 6 goto label04;

        $r0 = virtualinvoke this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.tree.LN newLNInstance(com.sleepycat.je.dbi.EnvironmentImpl)>(envImpl);

        this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.tree.LN ln> = $r0;

        $r1 = this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.tree.LN ln>;

        virtualinvoke $r1.<com.sleepycat.je.tree.LN: void readFromLog(java.nio.ByteBuffer,int)>(entryBuffer, logVersion);

     label04:
        $r2 = new com.sleepycat.je.dbi.DatabaseId;

        specialinvoke $r2.<com.sleepycat.je.dbi.DatabaseId: void <init>()>();

        this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.dbi.DatabaseId dbId> = $r2;

        $r3 = this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.dbi.DatabaseId dbId>;

        virtualinvoke $r3.<com.sleepycat.je.dbi.DatabaseId: void readFromLog(java.nio.ByteBuffer,int)>(entryBuffer, logVersion);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(logVersion);

        if logVersion >= 6 goto label05;

        $r4 = staticinvoke <com.sleepycat.je.log.LogUtils: byte[] readByteArray(java.nio.ByteBuffer,boolean)>(entryBuffer, 1);

        this.<com.sleepycat.je.log.entry.LNLogEntry: byte[] key> = $r4;

     label05:
        $r5 = this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.log.LogEntryType entryType>;

        $z1 = virtualinvoke $r5.<com.sleepycat.je.log.LogEntryType: boolean isTransactional()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label11;

        $z2 = this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveAbortLSN>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label06;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(logVersion);

        if logVersion >= 12 goto label07;

     label06:
        $l1 = staticinvoke <com.sleepycat.je.log.LogUtils: long readLong(java.nio.ByteBuffer,boolean)>(entryBuffer, unpacked);

        this.<com.sleepycat.je.log.entry.LNLogEntry: long abortLsn> = $l1;

        $l2 = this.<com.sleepycat.je.log.entry.LNLogEntry: long abortLsn>;

        $l3 = staticinvoke <com.sleepycat.je.utilint.DbLsn: long getFileNumber(long)>($l2);

        $l4 = staticinvoke <com.sleepycat.je.utilint.DbLsn: long getFileNumber(long)>(-1L);

        $b5 = $l3 cmp $l4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b5);

        if $b5 != 0 goto label07;

        this.<com.sleepycat.je.log.entry.LNLogEntry: long abortLsn> = -1L;

     label07:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(logVersion);

        if logVersion >= 12 goto label10;

        $b6 = virtualinvoke entryBuffer.<java.nio.ByteBuffer: byte get()>();

        specialinvoke this.<com.sleepycat.je.log.entry.LNLogEntry: void setFlags(byte)>($b6);

        $l7 = this.<com.sleepycat.je.log.entry.LNLogEntry: long abortLsn>;

        $b8 = $l7 cmp -1L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b8);

        if $b8 == 0 goto label08;

        $z3 = 1;

        goto label09;

     label08:
        $z3 = 0;

     label09:
        this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveAbortLSN> = $z3;

     label10:
        $r7 = new com.sleepycat.je.txn.Txn;

        specialinvoke $r7.<com.sleepycat.je.txn.Txn: void <init>()>();

        this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.txn.Txn txn> = $r7;

        $r8 = this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.txn.Txn txn>;

        virtualinvoke $r8.<com.sleepycat.je.txn.Txn: void readFromLog(java.nio.ByteBuffer,int)>(entryBuffer, logVersion);

        goto label12;

     label11:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(logVersion);

        if logVersion != 11 goto label12;

        $b9 = virtualinvoke entryBuffer.<java.nio.ByteBuffer: byte get()>();

        specialinvoke this.<com.sleepycat.je.log.entry.LNLogEntry: void setFlags(byte)>($b9);

     label12:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(logVersion);

        if logVersion < 11 goto label15;

        $z4 = this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveAbortKey>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label13;

        $r9 = staticinvoke <com.sleepycat.je.log.LogUtils: byte[] readByteArray(java.nio.ByteBuffer,boolean)>(entryBuffer, 0);

        this.<com.sleepycat.je.log.entry.LNLogEntry: byte[] abortKey> = $r9;

     label13:
        $z5 = this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveAbortData>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label14;

        $r10 = staticinvoke <com.sleepycat.je.log.LogUtils: byte[] readByteArray(java.nio.ByteBuffer,boolean)>(entryBuffer, 0);

        this.<com.sleepycat.je.log.entry.LNLogEntry: byte[] abortData> = $r10;

     label14:
        $z6 = this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveAbortVLSN>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label15;

        $l10 = staticinvoke <com.sleepycat.je.log.LogUtils: long readPackedLong(java.nio.ByteBuffer)>(entryBuffer);

        this.<com.sleepycat.je.log.entry.LNLogEntry: long abortVLSN> = $l10;

     label15:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(logVersion);

        if logVersion < 12 goto label17;

        $z7 = this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveAbortExpiration>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 == 0 goto label16;

        $i11 = staticinvoke <com.sleepycat.je.log.LogUtils: int readPackedInt(java.nio.ByteBuffer)>(entryBuffer);

        this.<com.sleepycat.je.log.entry.LNLogEntry: int abortExpiration> = $i11;

        $i12 = this.<com.sleepycat.je.log.entry.LNLogEntry: int abortExpiration>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i12);

        if $i12 >= 0 goto label16;

        $i13 = this.<com.sleepycat.je.log.entry.LNLogEntry: int abortExpiration>;

        $i14 = neg $i13;

        this.<com.sleepycat.je.log.entry.LNLogEntry: int abortExpiration> = $i14;

        this.<com.sleepycat.je.log.entry.LNLogEntry: boolean abortExpirationInHours> = 1;

     label16:
        $z8 = this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveExpiration>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 == 0 goto label17;

        $i15 = staticinvoke <com.sleepycat.je.log.LogUtils: int readPackedInt(java.nio.ByteBuffer)>(entryBuffer);

        this.<com.sleepycat.je.log.entry.LNLogEntry: int expiration> = $i15;

        $i16 = this.<com.sleepycat.je.log.entry.LNLogEntry: int expiration>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i16);

        if $i16 >= 0 goto label17;

        $i17 = this.<com.sleepycat.je.log.entry.LNLogEntry: int expiration>;

        $i18 = neg $i17;

        this.<com.sleepycat.je.log.entry.LNLogEntry: int expiration> = $i18;

        this.<com.sleepycat.je.log.entry.LNLogEntry: boolean expirationInHours> = 1;

     label17:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(logVersion);

        if logVersion < 6 goto label20;

        $r11 = virtualinvoke this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.tree.LN newLNInstance(com.sleepycat.je.dbi.EnvironmentImpl)>(envImpl);

        this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.tree.LN ln> = $r11;

        $r12 = this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.tree.LN ln>;

        virtualinvoke $r12.<com.sleepycat.je.tree.LN: void readFromLog(java.nio.ByteBuffer,int)>(entryBuffer, logVersion);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(keyIsLastSerializedField);

        if keyIsLastSerializedField == 0 goto label18;

        $i19 = virtualinvoke entryBuffer.<java.nio.ByteBuffer: int position()>();

        bytesWritten = $i19 - recStartPosition;

        $i20 = virtualinvoke header.<com.sleepycat.je.log.LogEntryHeader: int getItemSize()>();

        keySize#144 = $i20 - bytesWritten;

        goto label19;

     label18:
        keySize#144 = staticinvoke <com.sleepycat.je.log.LogUtils: int readPackedInt(java.nio.ByteBuffer)>(entryBuffer);

     label19:
        $r13 = staticinvoke <com.sleepycat.je.log.LogUtils: byte[] readBytesNoLength(java.nio.ByteBuffer,int)>(entryBuffer, keySize#144);

        this.<com.sleepycat.je.log.entry.LNLogEntry: byte[] key> = $r13;

     label20:
        $r14 = virtualinvoke header.<com.sleepycat.je.log.LogEntryHeader: com.sleepycat.je.utilint.VLSN getVLSN()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r14);

        if $r14 == null goto label21;

        $r15 = this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.tree.LN ln>;

        $r16 = virtualinvoke header.<com.sleepycat.je.log.LogEntryHeader: com.sleepycat.je.utilint.VLSN getVLSN()>();

        $l21 = virtualinvoke $r16.<com.sleepycat.je.utilint.VLSN: long getSequence()>();

        virtualinvoke $r15.<com.sleepycat.je.tree.LN: void setVLSNSequence(long)>($l21);

     label21:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(logVersion);

        if logVersion >= 8 goto label22;

        $r18 = <com.sleepycat.je.log.entry.LNLogEntry$DupStatus: com.sleepycat.je.log.entry.LNLogEntry$DupStatus NEED_CONVERSION>;

        goto label23;

     label22:
        $r18 = <com.sleepycat.je.log.entry.LNLogEntry$DupStatus: com.sleepycat.je.log.entry.LNLogEntry$DupStatus UNKNOWN>;

     label23:
        this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.log.entry.LNLogEntry$DupStatus dupStatus> = $r18;

        return;
    }

    private void reset()
    {
        com.sleepycat.je.log.entry.LNLogEntry this;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.dbi.DatabaseId dbId> = null;

        this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.txn.Txn txn> = null;

        this.<com.sleepycat.je.log.entry.LNLogEntry: long abortLsn> = -1L;

        this.<com.sleepycat.je.log.entry.LNLogEntry: boolean abortKnownDeleted> = 0;

        this.<com.sleepycat.je.log.entry.LNLogEntry: byte[] abortKey> = null;

        this.<com.sleepycat.je.log.entry.LNLogEntry: byte[] abortData> = null;

        this.<com.sleepycat.je.log.entry.LNLogEntry: long abortVLSN> = -1L;

        this.<com.sleepycat.je.log.entry.LNLogEntry: int abortExpiration> = 0;

        this.<com.sleepycat.je.log.entry.LNLogEntry: boolean abortExpirationInHours> = 0;

        this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveAbortLSN> = 0;

        this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveAbortKey> = 0;

        this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveAbortData> = 0;

        this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveAbortVLSN> = 0;

        this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveAbortExpiration> = 0;

        this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveExpiration> = 0;

        this.<com.sleepycat.je.log.entry.LNLogEntry: boolean embeddedLN> = 0;

        this.<com.sleepycat.je.log.entry.LNLogEntry: byte[] key> = null;

        this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.tree.LN ln> = null;

        this.<com.sleepycat.je.log.entry.LNLogEntry: int expiration> = 0;

        this.<com.sleepycat.je.log.entry.LNLogEntry: boolean expirationInHours> = 0;

        this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.log.entry.LNLogEntry$DupStatus dupStatus> = null;

        return;
    }

    private void setFlags(byte)
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        byte flags, $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        flags := @parameter0: byte;

        $b0 = flags & 2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 == 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        this.<com.sleepycat.je.log.entry.LNLogEntry: boolean embeddedLN> = $z0;

        $b1 = flags & 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 == 0 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        this.<com.sleepycat.je.log.entry.LNLogEntry: boolean abortKnownDeleted> = $z1;

        $b2 = flags & 32;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b2);

        if $b2 == 0 goto label05;

        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveAbortLSN> = $z2;

        $b3 = flags & 4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b3);

        if $b3 == 0 goto label07;

        $z3 = 1;

        goto label08;

     label07:
        $z3 = 0;

     label08:
        this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveAbortKey> = $z3;

        $b4 = flags & 8;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b4);

        if $b4 == 0 goto label09;

        $z4 = 1;

        goto label10;

     label09:
        $z4 = 0;

     label10:
        this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveAbortData> = $z4;

        $b5 = flags & 16;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b5);

        if $b5 == 0 goto label11;

        $z5 = 1;

        goto label12;

     label11:
        $z5 = 0;

     label12:
        this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveAbortVLSN> = $z5;

        $b6 = flags & 64;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b6);

        if $b6 == 0 goto label13;

        $z6 = 1;

        goto label14;

     label13:
        $z6 = 0;

     label14:
        this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveAbortExpiration> = $z6;

        $b7 = flags & -128;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b7);

        if $b7 == 0 goto label15;

        $z7 = 1;

        goto label16;

     label15:
        $z7 = 0;

     label16:
        this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveExpiration> = $z7;

        return;
    }

    com.sleepycat.je.tree.LN newLNInstance(com.sleepycat.je.dbi.EnvironmentImpl)
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        java.lang.reflect.Constructor $r0, $r1;
        boolean $z0;
        com.sleepycat.je.log.Loggable $r2, $r4;
        com.sleepycat.je.tree.LN $r3, $r5;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        envImpl := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        $r0 = this.<com.sleepycat.je.log.entry.LNLogEntry: java.lang.reflect.Constructor versionedLNConstructor>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label1;

        $z0 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: boolean getPreserveVLSN()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r1 = this.<com.sleepycat.je.log.entry.LNLogEntry: java.lang.reflect.Constructor versionedLNConstructor>;

        $r2 = staticinvoke <com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.log.Loggable newInstanceOfType(java.lang.reflect.Constructor)>($r1);

        $r3 = (com.sleepycat.je.tree.LN) $r2;

        return $r3;

     label1:
        $r4 = virtualinvoke this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.log.Loggable newInstanceOfType()>();

        $r5 = (com.sleepycat.je.tree.LN) $r4;

        return $r5;
    }

    public com.sleepycat.je.tree.LN getMainItem()
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        com.sleepycat.je.tree.LN $r0;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        $r0 = this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.tree.LN ln>;

        return $r0;
    }

    public void <init>(com.sleepycat.je.log.LogEntryType, com.sleepycat.je.dbi.DatabaseId, com.sleepycat.je.txn.Txn, long, boolean, byte[], byte[], long, int, boolean, byte[], com.sleepycat.je.tree.LN, boolean, int, boolean)
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        com.sleepycat.je.log.LogEntryType entryType;
        com.sleepycat.je.dbi.DatabaseId dbId;
        com.sleepycat.je.txn.Txn txn;
        long abortLsn, abortVLSN;
        boolean abortKD, abortExpirationInHours, embeddedLN, expirationInHours, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        byte[] abortKey, abortData, key;
        int abortExpiration, expiration;
        com.sleepycat.je.tree.LN ln;
        byte $b0;
        java.lang.AssertionError $r6;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        entryType := @parameter0: com.sleepycat.je.log.LogEntryType;

        dbId := @parameter1: com.sleepycat.je.dbi.DatabaseId;

        txn := @parameter2: com.sleepycat.je.txn.Txn;

        abortLsn := @parameter3: long;

        abortKD := @parameter4: boolean;

        abortKey := @parameter5: byte[];

        abortData := @parameter6: byte[];

        abortVLSN := @parameter7: long;

        abortExpiration := @parameter8: int;

        abortExpirationInHours := @parameter9: boolean;

        key := @parameter10: byte[];

        ln := @parameter11: com.sleepycat.je.tree.LN;

        embeddedLN := @parameter12: boolean;

        expiration := @parameter13: int;

        expirationInHours := @parameter14: boolean;

        specialinvoke this.<com.sleepycat.je.log.entry.BaseReplicableEntry: void <init>()>();

        this.<com.sleepycat.je.log.entry.LNLogEntry: long abortLsn> = -1L;

        this.<com.sleepycat.je.log.entry.LNLogEntry: byte[] abortKey> = null;

        this.<com.sleepycat.je.log.entry.LNLogEntry: byte[] abortData> = null;

        this.<com.sleepycat.je.log.entry.LNLogEntry: long abortVLSN> = -1L;

        this.<com.sleepycat.je.log.entry.LNLogEntry: int abortExpiration> = 0;

        this.<com.sleepycat.je.log.entry.LNLogEntry: boolean abortExpirationInHours> = 0;

        virtualinvoke this.<com.sleepycat.je.log.entry.LNLogEntry: void setLogType(com.sleepycat.je.log.LogEntryType)>(entryType);

        this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.dbi.DatabaseId dbId> = dbId;

        this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.txn.Txn txn> = txn;

        this.<com.sleepycat.je.log.entry.LNLogEntry: long abortLsn> = abortLsn;

        this.<com.sleepycat.je.log.entry.LNLogEntry: boolean abortKnownDeleted> = abortKD;

        this.<com.sleepycat.je.log.entry.LNLogEntry: byte[] abortKey> = abortKey;

        this.<com.sleepycat.je.log.entry.LNLogEntry: byte[] abortData> = abortData;

        this.<com.sleepycat.je.log.entry.LNLogEntry: long abortVLSN> = abortVLSN;

        this.<com.sleepycat.je.log.entry.LNLogEntry: int abortExpiration> = abortExpiration;

        this.<com.sleepycat.je.log.entry.LNLogEntry: boolean abortExpirationInHours> = abortExpirationInHours;

        $b0 = abortLsn cmp -1L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 == 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveAbortLSN> = $z0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(abortKey);

        if abortKey == null goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveAbortKey> = $z1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(abortData);

        if abortData == null goto label05;

        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveAbortData> = $z2;

        $z3 = staticinvoke <com.sleepycat.je.utilint.VLSN: boolean isNull(long)>(abortVLSN);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label07;

        $z4 = 1;

        goto label08;

     label07:
        $z4 = 0;

     label08:
        this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveAbortVLSN> = $z4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(abortExpiration);

        if abortExpiration == 0 goto label09;

        $z5 = 1;

        goto label10;

     label09:
        $z5 = 0;

     label10:
        this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveAbortExpiration> = $z5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(expiration);

        if expiration == 0 goto label11;

        $z6 = 1;

        goto label12;

     label11:
        $z6 = 0;

     label12:
        this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveExpiration> = $z6;

        this.<com.sleepycat.je.log.entry.LNLogEntry: boolean embeddedLN> = embeddedLN;

        this.<com.sleepycat.je.log.entry.LNLogEntry: byte[] key> = key;

        this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.tree.LN ln> = ln;

        this.<com.sleepycat.je.log.entry.LNLogEntry: int expiration> = expiration;

        this.<com.sleepycat.je.log.entry.LNLogEntry: boolean expirationInHours> = expirationInHours;

        this.<com.sleepycat.je.log.entry.LNLogEntry: java.lang.reflect.Constructor versionedLNConstructor> = null;

        $z7 = <com.sleepycat.je.log.entry.LNLogEntry: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 != 0 goto label15;

        $z8 = virtualinvoke entryType.<com.sleepycat.je.log.LogEntryType: boolean isTransactional()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(txn);

        if txn == null goto label13;

        $z9 = 1;

        goto label14;

     label13:
        $z9 = 0;

     label14:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z8 == $z9 goto label15;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label15:
        return;
    }

    public com.sleepycat.je.dbi.DatabaseId getDbId()
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        com.sleepycat.je.dbi.DatabaseId $r0;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        $r0 = this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.dbi.DatabaseId dbId>;

        return $r0;
    }

    public void postFetchInit(com.sleepycat.je.dbi.DatabaseImpl)
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        boolean $z0;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        dbImpl := @parameter0: com.sleepycat.je.dbi.DatabaseImpl;

        $z0 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: boolean getSortedDuplicates()>();

        virtualinvoke this.<com.sleepycat.je.log.entry.LNLogEntry: void postFetchInit(boolean)>($z0);

        return;
    }

    public com.sleepycat.je.tree.LN getLN()
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        com.sleepycat.je.tree.LN $r0;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        specialinvoke this.<com.sleepycat.je.log.entry.LNLogEntry: void requireKnownDupStatus()>();

        $r0 = this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.tree.LN ln>;

        return $r0;
    }

    private void requireKnownDupStatus()
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        com.sleepycat.je.log.entry.LNLogEntry$DupStatus $r0, $r1, $r2, $r3;
        com.sleepycat.je.EnvironmentFailureException $r4;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        $r0 = this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.log.entry.LNLogEntry$DupStatus dupStatus>;

        $r1 = <com.sleepycat.je.log.entry.LNLogEntry$DupStatus: com.sleepycat.je.log.entry.LNLogEntry$DupStatus DUP_DB>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r0 == $r1 goto label1;

        $r2 = this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.log.entry.LNLogEntry$DupStatus dupStatus>;

        $r3 = <com.sleepycat.je.log.entry.LNLogEntry$DupStatus: com.sleepycat.je.log.entry.LNLogEntry$DupStatus NOT_DUP_DB>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r3);

        if $r2 == $r3 goto label1;

        $r4 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>("postFetchInit was not called");

        throw $r4;

     label1:
        return;
    }

    public void postFetchInit(boolean)
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        boolean isDupDb, needConversion, $z0;
        com.sleepycat.je.log.entry.LNLogEntry$DupStatus $r0, $r1, $r3, $r4, $r5;
        byte[] $r6;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        isDupDb := @parameter0: boolean;

        $r0 = this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.log.entry.LNLogEntry$DupStatus dupStatus>;

        $r1 = <com.sleepycat.je.log.entry.LNLogEntry$DupStatus: com.sleepycat.je.log.entry.LNLogEntry$DupStatus NEED_CONVERSION>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r0 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        needConversion = $z0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isDupDb);

        if isDupDb == 0 goto label3;

        $r3 = <com.sleepycat.je.log.entry.LNLogEntry$DupStatus: com.sleepycat.je.log.entry.LNLogEntry$DupStatus DUP_DB>;

        goto label4;

     label3:
        $r3 = <com.sleepycat.je.log.entry.LNLogEntry$DupStatus: com.sleepycat.je.log.entry.LNLogEntry$DupStatus NOT_DUP_DB>;

     label4:
        this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.log.entry.LNLogEntry$DupStatus dupStatus> = $r3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(needConversion);

        if needConversion != 0 goto label5;

        return;

     label5:
        $r4 = this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.log.entry.LNLogEntry$DupStatus dupStatus>;

        $r5 = <com.sleepycat.je.log.entry.LNLogEntry$DupStatus: com.sleepycat.je.log.entry.LNLogEntry$DupStatus NOT_DUP_DB>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r5);

        if $r4 != $r5 goto label6;

        return;

     label6:
        $r6 = virtualinvoke this.<com.sleepycat.je.log.entry.LNLogEntry: byte[] combineDupKeyData()>();

        this.<com.sleepycat.je.log.entry.LNLogEntry: byte[] key> = $r6;

        return;
    }

    byte[] combineDupKeyData()
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        boolean $z0, $z1;
        com.sleepycat.je.tree.LN $r0, $r3;
        java.lang.AssertionError $r1;
        byte[] $r2, $r4, $r5;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        $z0 = <com.sleepycat.je.log.entry.LNLogEntry: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r0 = this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.tree.LN ln>;

        $z1 = virtualinvoke $r0.<com.sleepycat.je.tree.LN: boolean isDeleted()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $r2 = this.<com.sleepycat.je.log.entry.LNLogEntry: byte[] key>;

        $r3 = this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.tree.LN ln>;

        $r4 = virtualinvoke $r3.<com.sleepycat.je.tree.LN: byte[] setEmpty()>();

        $r5 = staticinvoke <com.sleepycat.je.dbi.DupKeyData: byte[] combine(byte[],byte[])>($r2, $r4);

        return $r5;
    }

    public byte[] getKey()
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        byte[] $r0;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        specialinvoke this.<com.sleepycat.je.log.entry.LNLogEntry: void requireKnownDupStatus()>();

        $r0 = this.<com.sleepycat.je.log.entry.LNLogEntry: byte[] key>;

        return $r0;
    }

    public volatile java.lang.Object getResolvedItem(com.sleepycat.je.dbi.DatabaseImpl)
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        com.sleepycat.je.dbi.DatabaseImpl l1;
        java.lang.Object $r0;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        l1 := @parameter0: com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = specialinvoke this.<com.sleepycat.je.log.entry.BaseReplicableEntry: java.lang.Object getResolvedItem(com.sleepycat.je.dbi.DatabaseImpl)>(l1);

        return $r0;
    }

    public void postLogWork(com.sleepycat.je.log.LogEntryHeader, long, com.sleepycat.je.utilint.VLSN)
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        com.sleepycat.je.log.LogEntryHeader header;
        long justLoggedLsn, $l0;
        com.sleepycat.je.utilint.VLSN vlsn;
        com.sleepycat.je.log.LogEntryType $r0;
        boolean $z0;
        com.sleepycat.je.txn.Txn $r1;
        com.sleepycat.je.tree.LN $r2;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        header := @parameter0: com.sleepycat.je.log.LogEntryHeader;

        justLoggedLsn := @parameter1: long;

        vlsn := @parameter2: com.sleepycat.je.utilint.VLSN;

        $r0 = this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.log.LogEntryType entryType>;

        $z0 = virtualinvoke $r0.<com.sleepycat.je.log.LogEntryType: boolean isTransactional()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r1 = this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.txn.Txn txn>;

        virtualinvoke $r1.<com.sleepycat.je.txn.Txn: void addLogInfo(long)>(justLoggedLsn);

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(vlsn);

        if vlsn == null goto label2;

        $r2 = this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.tree.LN ln>;

        $l0 = virtualinvoke vlsn.<com.sleepycat.je.utilint.VLSN: long getSequence()>();

        virtualinvoke $r2.<com.sleepycat.je.tree.LN: void setVLSNSequence(long)>($l0);

     label2:
        return;
    }

    public boolean isImmediatelyObsolete(com.sleepycat.je.dbi.DatabaseImpl)
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        com.sleepycat.je.tree.LN $r0;
        boolean $z0, $z1, $z2, $z3;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        dbImpl := @parameter0: com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.tree.LN ln>;

        $z0 = virtualinvoke $r0.<com.sleepycat.je.tree.LN: boolean isDeleted()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = this.<com.sleepycat.je.log.entry.LNLogEntry: boolean embeddedLN>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: boolean isLNImmediatelyObsolete()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public volatile com.sleepycat.je.log.LogEntryType getLogType()
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        com.sleepycat.je.log.LogEntryType $r0;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        $r0 = specialinvoke this.<com.sleepycat.je.log.entry.BaseReplicableEntry: com.sleepycat.je.log.LogEntryType getLogType()>();

        return $r0;
    }

    public volatile void writeEntry(java.nio.ByteBuffer)
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        java.nio.ByteBuffer l1;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        l1 := @parameter0: java.nio.ByteBuffer;

        specialinvoke this.<com.sleepycat.je.log.entry.BaseReplicableEntry: void writeEntry(java.nio.ByteBuffer)>(l1);

        return;
    }

    public void writeEntry(java.nio.ByteBuffer, int, boolean)
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        java.nio.ByteBuffer destBuffer;
        int logVersion;
        boolean forReplication, $z0;
        java.lang.Class $r0;
        java.lang.AssertionError $r1;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        destBuffer := @parameter0: java.nio.ByteBuffer;

        logVersion := @parameter1: int;

        forReplication := @parameter2: boolean;

        $z0 = <com.sleepycat.je.log.entry.LNLogEntry: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r0 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == class "com/sleepycat/je/log/entry/LNLogEntry" goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        virtualinvoke this.<com.sleepycat.je.log.entry.LNLogEntry: void writeBaseLNEntry(java.nio.ByteBuffer,int,boolean,boolean)>(destBuffer, logVersion, 1, forReplication);

        return;
    }

    final void writeBaseLNEntry(java.nio.ByteBuffer, int, boolean, boolean)
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        java.nio.ByteBuffer destBuffer;
        int logVersion, $i10, $i11, $i12, $i13, $i14;
        boolean keyIsLastSerializedField, forReplication, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17;
        byte flags#2, $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7;
        com.sleepycat.je.log.LogEntryType $r0, $r3;
        com.sleepycat.je.dbi.DatabaseId $r2;
        long $l8, $l9;
        com.sleepycat.je.txn.Txn $r5;
        byte[] $r7, $r8, $r12, $r13;
        com.sleepycat.je.tree.LN $r11;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        destBuffer := @parameter0: java.nio.ByteBuffer;

        logVersion := @parameter1: int;

        keyIsLastSerializedField := @parameter2: boolean;

        forReplication := @parameter3: boolean;

        flags#2 = 0;

        $r0 = this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.log.LogEntryType entryType>;

        $z0 = virtualinvoke $r0.<com.sleepycat.je.log.LogEntryType: boolean isTransactional()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label03;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(logVersion);

        if logVersion < 12 goto label01;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(forReplication);

        if forReplication != 0 goto label03;

     label01:
        $z1 = this.<com.sleepycat.je.log.entry.LNLogEntry: boolean abortKnownDeleted>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label02;

        $b0 = flags#2 | 1;

        flags#2 = (byte) $b0;

     label02:
        $z2 = this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveAbortLSN>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label03;

        $b1 = flags#2 | 32;

        flags#2 = (byte) $b1;

     label03:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(forReplication);

        if forReplication != 0 goto label08;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(logVersion);

        if logVersion < 11 goto label07;

        $z3 = this.<com.sleepycat.je.log.entry.LNLogEntry: boolean embeddedLN>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label04;

        $b2 = flags#2 | 2;

        flags#2 = (byte) $b2;

     label04:
        $z4 = this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveAbortKey>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label05;

        $b3 = flags#2 | 4;

        flags#2 = (byte) $b3;

     label05:
        $z5 = this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveAbortData>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label06;

        $b4 = flags#2 | 8;

        flags#2 = (byte) $b4;

     label06:
        $z6 = this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveAbortVLSN>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label07;

        $b5 = flags#2 | 16;

        flags#2 = (byte) $b5;

     label07:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(logVersion);

        if logVersion < 12 goto label08;

        $z7 = this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveAbortExpiration>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 == 0 goto label08;

        $b6 = flags#2 | 64;

        flags#2 = (byte) $b6;

     label08:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(logVersion);

        if logVersion < 12 goto label10;

        $z8 = this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveExpiration>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 == 0 goto label09;

        $b7 = flags#2 | -128;

        flags#2 = (byte) $b7;

     label09:
        virtualinvoke destBuffer.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(flags#2);

     label10:
        $r2 = this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.dbi.DatabaseId dbId>;

        virtualinvoke $r2.<com.sleepycat.je.dbi.DatabaseId: void writeToLog(java.nio.ByteBuffer,int,boolean)>(destBuffer, logVersion, forReplication);

        $r3 = this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.log.LogEntryType entryType>;

        $z9 = virtualinvoke $r3.<com.sleepycat.je.log.LogEntryType: boolean isTransactional()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 == 0 goto label14;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(logVersion);

        if logVersion < 12 goto label11;

        $z10 = this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveAbortLSN>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z10);

        if $z10 == 0 goto label12;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(forReplication);

        if forReplication != 0 goto label12;

     label11:
        $l8 = this.<com.sleepycat.je.log.entry.LNLogEntry: long abortLsn>;

        staticinvoke <com.sleepycat.je.log.LogUtils: void writePackedLong(java.nio.ByteBuffer,long)>(destBuffer, $l8);

     label12:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(logVersion);

        if logVersion >= 12 goto label13;

        virtualinvoke destBuffer.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(flags#2);

     label13:
        $r5 = this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.txn.Txn txn>;

        virtualinvoke $r5.<com.sleepycat.je.txn.Txn: void writeToLog(java.nio.ByteBuffer,int,boolean)>(destBuffer, logVersion, forReplication);

        goto label15;

     label14:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(logVersion);

        if logVersion != 11 goto label15;

        virtualinvoke destBuffer.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(flags#2);

     label15:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(forReplication);

        if forReplication != 0 goto label21;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(logVersion);

        if logVersion < 11 goto label18;

        $z11 = this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveAbortKey>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z11);

        if $z11 == 0 goto label16;

        $r7 = this.<com.sleepycat.je.log.entry.LNLogEntry: byte[] abortKey>;

        staticinvoke <com.sleepycat.je.log.LogUtils: void writeByteArray(java.nio.ByteBuffer,byte[])>(destBuffer, $r7);

     label16:
        $z12 = this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveAbortData>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z12);

        if $z12 == 0 goto label17;

        $r8 = this.<com.sleepycat.je.log.entry.LNLogEntry: byte[] abortData>;

        staticinvoke <com.sleepycat.je.log.LogUtils: void writeByteArray(java.nio.ByteBuffer,byte[])>(destBuffer, $r8);

     label17:
        $z13 = this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveAbortVLSN>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z13);

        if $z13 == 0 goto label18;

        $l9 = this.<com.sleepycat.je.log.entry.LNLogEntry: long abortVLSN>;

        staticinvoke <com.sleepycat.je.log.LogUtils: void writePackedLong(java.nio.ByteBuffer,long)>(destBuffer, $l9);

     label18:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(logVersion);

        if logVersion < 12 goto label21;

        $z14 = this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveAbortExpiration>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z14);

        if $z14 == 0 goto label21;

        $z15 = this.<com.sleepycat.je.log.entry.LNLogEntry: boolean abortExpirationInHours>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z15);

        if $z15 == 0 goto label19;

        $i10 = this.<com.sleepycat.je.log.entry.LNLogEntry: int abortExpiration>;

        $i11 = neg $i10;

        goto label20;

     label19:
        $i11 = this.<com.sleepycat.je.log.entry.LNLogEntry: int abortExpiration>;

     label20:
        staticinvoke <com.sleepycat.je.log.LogUtils: void writePackedInt(java.nio.ByteBuffer,int)>(destBuffer, $i11);

     label21:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(logVersion);

        if logVersion < 12 goto label24;

        $z16 = this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveExpiration>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z16);

        if $z16 == 0 goto label24;

        $z17 = this.<com.sleepycat.je.log.entry.LNLogEntry: boolean expirationInHours>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z17);

        if $z17 == 0 goto label22;

        $i12 = this.<com.sleepycat.je.log.entry.LNLogEntry: int expiration>;

        $i13 = neg $i12;

        goto label23;

     label22:
        $i13 = this.<com.sleepycat.je.log.entry.LNLogEntry: int expiration>;

     label23:
        staticinvoke <com.sleepycat.je.log.LogUtils: void writePackedInt(java.nio.ByteBuffer,int)>(destBuffer, $i13);

     label24:
        $r11 = this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.tree.LN ln>;

        virtualinvoke $r11.<com.sleepycat.je.tree.LN: void writeToLog(java.nio.ByteBuffer,int,boolean)>(destBuffer, logVersion, forReplication);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(keyIsLastSerializedField);

        if keyIsLastSerializedField != 0 goto label25;

        $r12 = this.<com.sleepycat.je.log.entry.LNLogEntry: byte[] key>;

        $i14 = lengthof $r12;

        staticinvoke <com.sleepycat.je.log.LogUtils: void writePackedInt(java.nio.ByteBuffer,int)>(destBuffer, $i14);

     label25:
        $r13 = this.<com.sleepycat.je.log.entry.LNLogEntry: byte[] key>;

        staticinvoke <com.sleepycat.je.log.LogUtils: void writeBytesNoLength(java.nio.ByteBuffer,byte[])>(destBuffer, $r13);

        return;
    }

    public int getExpiration()
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        int $i0;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        $i0 = this.<com.sleepycat.je.log.entry.LNLogEntry: int expiration>;

        return $i0;
    }

    public boolean isExpirationInHours()
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        boolean $z0;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        $z0 = this.<com.sleepycat.je.log.entry.LNLogEntry: boolean expirationInHours>;

        return $z0;
    }

    public volatile int getSize()
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        int $i0;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        $i0 = specialinvoke this.<com.sleepycat.je.log.entry.BaseReplicableEntry: int getSize()>();

        return $i0;
    }

    public int getSize(int, boolean)
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        int logVersion, $i0;
        boolean forReplication, $z0;
        java.lang.Class $r0;
        java.lang.AssertionError $r1;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        logVersion := @parameter0: int;

        forReplication := @parameter1: boolean;

        $z0 = <com.sleepycat.je.log.entry.LNLogEntry: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r0 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == class "com/sleepycat/je/log/entry/LNLogEntry" goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $i0 = virtualinvoke this.<com.sleepycat.je.log.entry.LNLogEntry: int getBaseLNEntrySize(int,boolean,boolean)>(logVersion, 1, forReplication);

        return $i0;
    }

    final int getBaseLNEntrySize(int, boolean, boolean)
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        int logVersion, $i0, $i1, $i2, $i3, size#16, $i4, $i5, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;
        boolean keyIsLastSerializedField, forReplication, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        com.sleepycat.je.tree.LN $r0;
        com.sleepycat.je.dbi.DatabaseId $r1;
        byte[] $r2, $r3, $r7, $r8;
        com.sleepycat.je.log.LogEntryType $r4, $r5;
        long $l6, $l11;
        com.sleepycat.je.txn.Txn $r6;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        logVersion := @parameter0: int;

        keyIsLastSerializedField := @parameter1: boolean;

        forReplication := @parameter2: boolean;

        $r0 = this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.tree.LN ln>;

        $i0 = virtualinvoke $r0.<com.sleepycat.je.tree.LN: int getLogSize(int,boolean)>(logVersion, forReplication);

        $r1 = this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.dbi.DatabaseId dbId>;

        $i1 = virtualinvoke $r1.<com.sleepycat.je.dbi.DatabaseId: int getLogSize(int,boolean)>(logVersion, forReplication);

        $i2 = $i0 + $i1;

        $r2 = this.<com.sleepycat.je.log.entry.LNLogEntry: byte[] key>;

        $i3 = lengthof $r2;

        size#16 = $i2 + $i3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(keyIsLastSerializedField);

        if keyIsLastSerializedField != 0 goto label01;

        $r3 = this.<com.sleepycat.je.log.entry.LNLogEntry: byte[] key>;

        $i4 = lengthof $r3;

        $i5 = staticinvoke <com.sleepycat.je.log.LogUtils: int getPackedIntLogSize(int)>($i4);

        size#16 = size#16 + $i5;

     label01:
        $r4 = this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.log.LogEntryType entryType>;

        $z0 = virtualinvoke $r4.<com.sleepycat.je.log.LogEntryType: boolean isTransactional()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label02;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(logVersion);

        if logVersion < 11 goto label03;

     label02:
        size#16 = size#16 + 1;

     label03:
        $r5 = this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.log.LogEntryType entryType>;

        $z1 = virtualinvoke $r5.<com.sleepycat.je.log.LogEntryType: boolean isTransactional()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label06;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(logVersion);

        if logVersion < 12 goto label04;

        $z2 = this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveAbortLSN>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label05;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(forReplication);

        if forReplication != 0 goto label05;

     label04:
        $l6 = this.<com.sleepycat.je.log.entry.LNLogEntry: long abortLsn>;

        $i7 = staticinvoke <com.sleepycat.je.log.LogUtils: int getPackedLongLogSize(long)>($l6);

        size#16 = size#16 + $i7;

     label05:
        $r6 = this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.txn.Txn txn>;

        $i8 = virtualinvoke $r6.<com.sleepycat.je.txn.Txn: int getLogSize(int,boolean)>(logVersion, forReplication);

        size#16 = size#16 + $i8;

     label06:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(forReplication);

        if forReplication != 0 goto label12;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(logVersion);

        if logVersion < 11 goto label09;

        $z3 = this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveAbortKey>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label07;

        $r7 = this.<com.sleepycat.je.log.entry.LNLogEntry: byte[] abortKey>;

        $i9 = staticinvoke <com.sleepycat.je.log.LogUtils: int getByteArrayLogSize(byte[])>($r7);

        size#16 = size#16 + $i9;

     label07:
        $z4 = this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveAbortData>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label08;

        $r8 = this.<com.sleepycat.je.log.entry.LNLogEntry: byte[] abortData>;

        $i10 = staticinvoke <com.sleepycat.je.log.LogUtils: int getByteArrayLogSize(byte[])>($r8);

        size#16 = size#16 + $i10;

     label08:
        $z5 = this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveAbortVLSN>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label09;

        $l11 = this.<com.sleepycat.je.log.entry.LNLogEntry: long abortVLSN>;

        $i12 = staticinvoke <com.sleepycat.je.log.LogUtils: int getPackedLongLogSize(long)>($l11);

        size#16 = size#16 + $i12;

     label09:
        $z6 = this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveAbortExpiration>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label12;

        $i13 = size#16;

        $z7 = this.<com.sleepycat.je.log.entry.LNLogEntry: boolean abortExpirationInHours>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 == 0 goto label10;

        $i14 = this.<com.sleepycat.je.log.entry.LNLogEntry: int abortExpiration>;

        $i15 = neg $i14;

        goto label11;

     label10:
        $i15 = this.<com.sleepycat.je.log.entry.LNLogEntry: int abortExpiration>;

     label11:
        $i16 = staticinvoke <com.sleepycat.je.log.LogUtils: int getPackedIntLogSize(int)>($i15);

        size#16 = $i13 + $i16;

     label12:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(logVersion);

        if logVersion < 12 goto label15;

        $z8 = this.<com.sleepycat.je.log.entry.LNLogEntry: boolean haveExpiration>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 == 0 goto label15;

        $i17 = size#16;

        $z9 = this.<com.sleepycat.je.log.entry.LNLogEntry: boolean expirationInHours>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 == 0 goto label13;

        $i18 = this.<com.sleepycat.je.log.entry.LNLogEntry: int expiration>;

        $i19 = neg $i18;

        goto label14;

     label13:
        $i19 = this.<com.sleepycat.je.log.entry.LNLogEntry: int expiration>;

     label14:
        $i20 = staticinvoke <com.sleepycat.je.log.LogUtils: int getPackedIntLogSize(int)>($i19);

        size#16 = $i17 + $i20;

     label15:
        return size#16;
    }

    public long getAbortLsn()
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        long $l0;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        $l0 = this.<com.sleepycat.je.log.entry.LNLogEntry: long abortLsn>;

        return $l0;
    }

    public com.sleepycat.je.txn.Txn getUserTxn()
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        com.sleepycat.je.log.LogEntryType $r0;
        boolean $z0;
        com.sleepycat.je.txn.Txn $r1;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        $r0 = this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.log.LogEntryType entryType>;

        $z0 = virtualinvoke $r0.<com.sleepycat.je.log.LogEntryType: boolean isTransactional()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r1 = this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.txn.Txn txn>;

        return $r1;

     label1:
        return null;
    }

    public boolean getAbortKnownDeleted()
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        boolean $z0;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        $z0 = this.<com.sleepycat.je.log.entry.LNLogEntry: boolean abortKnownDeleted>;

        return $z0;
    }

    public byte[] getAbortKey()
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        byte[] $r0;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        $r0 = this.<com.sleepycat.je.log.entry.LNLogEntry: byte[] abortKey>;

        return $r0;
    }

    public byte[] getAbortData()
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        byte[] $r0;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        $r0 = this.<com.sleepycat.je.log.entry.LNLogEntry: byte[] abortData>;

        return $r0;
    }

    public long getAbortVLSN()
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        long $l0;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        $l0 = this.<com.sleepycat.je.log.entry.LNLogEntry: long abortVLSN>;

        return $l0;
    }

    public int getAbortExpiration()
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        int $i0;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        $i0 = this.<com.sleepycat.je.log.entry.LNLogEntry: int abortExpiration>;

        return $i0;
    }

    public boolean isAbortExpirationInHours()
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        boolean $z0;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        $z0 = this.<com.sleepycat.je.log.entry.LNLogEntry: boolean abortExpirationInHours>;

        return $z0;
    }

    public java.lang.Long getTxnId()
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        com.sleepycat.je.log.LogEntryType $r0;
        boolean $z0;
        com.sleepycat.je.txn.Txn $r1;
        long $l0;
        java.lang.Long $r2;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        $r0 = this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.log.LogEntryType entryType>;

        $z0 = virtualinvoke $r0.<com.sleepycat.je.log.LogEntryType: boolean isTransactional()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r1 = this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.txn.Txn txn>;

        $l0 = virtualinvoke $r1.<com.sleepycat.je.txn.Txn: long getId()>();

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r2;

     label1:
        return null;
    }

    public boolean isDeleted()
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        com.sleepycat.je.tree.LN $r0;
        boolean $z0;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        $r0 = this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.tree.LN ln>;

        $z0 = virtualinvoke $r0.<com.sleepycat.je.tree.LN: boolean isDeleted()>();

        return $z0;
    }

    public boolean isEmbeddedLN()
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        boolean $z0;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        $z0 = this.<com.sleepycat.je.log.entry.LNLogEntry: boolean embeddedLN>;

        return $z0;
    }

    public byte[] getData()
    {
        com.sleepycat.je.log.entry.LNLogEntry this;
        com.sleepycat.je.tree.LN $r0;
        byte[] $r1;

        this := @this: com.sleepycat.je.log.entry.LNLogEntry;

        $r0 = this.<com.sleepycat.je.log.entry.LNLogEntry: com.sleepycat.je.tree.LN ln>;

        $r1 = virtualinvoke $r0.<com.sleepycat.je.tree.LN: byte[] getData()>();

        return $r1;
    }


