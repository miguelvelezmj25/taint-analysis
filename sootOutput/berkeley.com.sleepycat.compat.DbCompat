    public static void setTypeBtree(berkeley.com.sleepycat.je.DatabaseConfig)
    {
        berkeley.com.sleepycat.je.DatabaseConfig dbConfig;

        dbConfig := @parameter0: berkeley.com.sleepycat.je.DatabaseConfig;

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        berkeley.com.sleepycat.je.TransactionConfig $r1, $r2, $r5;
        berkeley.com.sleepycat.je.Durability $r3;

        $r0 = class "berkeley/com/sleepycat/compat/DbCompat";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <berkeley.com.sleepycat.compat.DbCompat: boolean $assertionsDisabled> = $z1;

        <berkeley.com.sleepycat.compat.DbCompat: boolean TRANSACTION_RUNNER_PRINT_STACK_TRACES> = 1;

        $r1 = new berkeley.com.sleepycat.je.TransactionConfig;

        specialinvoke $r1.<berkeley.com.sleepycat.je.TransactionConfig: void <init>()>();

        <berkeley.com.sleepycat.compat.DbCompat: berkeley.com.sleepycat.je.TransactionConfig READ_ONLY_TXN_CONFIG> = $r1;

        $r2 = <berkeley.com.sleepycat.compat.DbCompat: berkeley.com.sleepycat.je.TransactionConfig READ_ONLY_TXN_CONFIG>;

        $r3 = <berkeley.com.sleepycat.je.Durability: berkeley.com.sleepycat.je.Durability READ_ONLY_TXN>;

        virtualinvoke $r2.<berkeley.com.sleepycat.je.TransactionConfig: berkeley.com.sleepycat.je.TransactionConfig setDurability(berkeley.com.sleepycat.je.Durability)>($r3);

        $r5 = <berkeley.com.sleepycat.compat.DbCompat: berkeley.com.sleepycat.je.TransactionConfig READ_ONLY_TXN_CONFIG>;

        virtualinvoke $r5.<berkeley.com.sleepycat.je.TransactionConfig: berkeley.com.sleepycat.je.TransactionConfig setReadCommitted(boolean)>(1);

        return;
    }

    public static berkeley.com.sleepycat.je.Database openDatabase(berkeley.com.sleepycat.je.Environment, berkeley.com.sleepycat.je.Transaction, java.lang.String, java.lang.String, berkeley.com.sleepycat.je.DatabaseConfig)
    {
        berkeley.com.sleepycat.je.Environment env;
        berkeley.com.sleepycat.je.Transaction txn;
        java.lang.String fileName, dbName;
        berkeley.com.sleepycat.je.DatabaseConfig config;
        boolean $z0;
        java.lang.AssertionError $r0;
        berkeley.com.sleepycat.je.Database $r1;
        berkeley.com.sleepycat.je.DatabaseNotFoundException $r2, e#9;
        berkeley.com.sleepycat.je.DatabaseExistsException $r3, e#12;

        env := @parameter0: berkeley.com.sleepycat.je.Environment;

        txn := @parameter1: berkeley.com.sleepycat.je.Transaction;

        fileName := @parameter2: java.lang.String;

        dbName := @parameter3: java.lang.String;

        config := @parameter4: berkeley.com.sleepycat.je.DatabaseConfig;

        $z0 = <berkeley.com.sleepycat.compat.DbCompat: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(fileName);

        if fileName == null goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $r1 = virtualinvoke env.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.Database openDatabase(berkeley.com.sleepycat.je.Transaction,java.lang.String,berkeley.com.sleepycat.je.DatabaseConfig)>(txn, dbName, config);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        e#9 = $r2;

        return null;

     label4:
        $r3 := @caughtexception;

        e#12 = $r3;

        return null;

        catch berkeley.com.sleepycat.je.DatabaseNotFoundException from label1 to label2 with label3;
        catch berkeley.com.sleepycat.je.DatabaseExistsException from label1 to label2 with label4;
    }

    public static berkeley.com.sleepycat.je.Transaction getThreadTransaction(berkeley.com.sleepycat.je.Environment) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.Environment env;
        berkeley.com.sleepycat.je.Transaction $r0;

        env := @parameter0: berkeley.com.sleepycat.je.Environment;

        $r0 = virtualinvoke env.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.Transaction getThreadTransaction()>();

        return $r0;
    }

    public static java.lang.RuntimeException unexpectedState(java.lang.String)
    {
        java.lang.String msg;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r0;

        msg := @parameter0: java.lang.String;

        $r0 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>(msg);

        return $r0;
    }

    public static java.lang.ClassLoader getClassLoader(berkeley.com.sleepycat.je.Environment)
    {
        berkeley.com.sleepycat.je.Environment env;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0;
        java.lang.ClassLoader $r1;

        env := @parameter0: berkeley.com.sleepycat.je.Environment;

        $r0 = staticinvoke <berkeley.com.sleepycat.je.DbInternal: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getNonNullEnvImpl(berkeley.com.sleepycat.je.Environment)>(env);

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: java.lang.ClassLoader getClassLoader()>();

        return $r1;
    }

    public static java.lang.RuntimeException unexpectedException(java.lang.Exception)
    {
        java.lang.Exception cause;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r0;

        cause := @parameter0: java.lang.Exception;

        $r0 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedException(java.lang.Exception)>(cause);

        return $r0;
    }

    public static boolean setImportunate(berkeley.com.sleepycat.je.Transaction, boolean)
    {
        berkeley.com.sleepycat.je.Transaction txn;
        boolean importunate, oldVal;
        berkeley.com.sleepycat.je.txn.Txn $r0, $r1;

        txn := @parameter0: berkeley.com.sleepycat.je.Transaction;

        importunate := @parameter1: boolean;

        $r0 = staticinvoke <berkeley.com.sleepycat.je.DbInternal: berkeley.com.sleepycat.je.txn.Txn getTxn(berkeley.com.sleepycat.je.Transaction)>(txn);

        oldVal = virtualinvoke $r0.<berkeley.com.sleepycat.je.txn.Txn: boolean getImportunate()>();

        $r1 = staticinvoke <berkeley.com.sleepycat.je.DbInternal: berkeley.com.sleepycat.je.txn.Txn getTxn(berkeley.com.sleepycat.je.Transaction)>(txn);

        virtualinvoke $r1.<berkeley.com.sleepycat.je.txn.Txn: void setImportunate(boolean)>(importunate);

        return oldVal;
    }

    public static boolean renameDatabase(berkeley.com.sleepycat.je.Environment, berkeley.com.sleepycat.je.Transaction, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        berkeley.com.sleepycat.je.Environment env;
        berkeley.com.sleepycat.je.Transaction txn;
        java.lang.String oldFileName, oldDbName, newFileName, newDbName;
        berkeley.com.sleepycat.je.DatabaseNotFoundException e, $r2;
        boolean $z0, $z1;
        java.lang.AssertionError $r0, $r1;

        env := @parameter0: berkeley.com.sleepycat.je.Environment;

        txn := @parameter1: berkeley.com.sleepycat.je.Transaction;

        oldFileName := @parameter2: java.lang.String;

        oldDbName := @parameter3: java.lang.String;

        newFileName := @parameter4: java.lang.String;

        newDbName := @parameter5: java.lang.String;

        $z0 = <berkeley.com.sleepycat.compat.DbCompat: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(oldFileName);

        if oldFileName == null goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $z1 = <berkeley.com.sleepycat.compat.DbCompat: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(newFileName);

        if newFileName == null goto label2;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label2:
        virtualinvoke env.<berkeley.com.sleepycat.je.Environment: void renameDatabase(berkeley.com.sleepycat.je.Transaction,java.lang.String,java.lang.String)>(txn, oldDbName, newDbName);

     label3:
        return 1;

     label4:
        $r2 := @caughtexception;

        e = $r2;

        return 0;

        catch berkeley.com.sleepycat.je.DatabaseNotFoundException from label2 to label3 with label4;
    }

    public static boolean removeDatabase(berkeley.com.sleepycat.je.Environment, berkeley.com.sleepycat.je.Transaction, java.lang.String, java.lang.String)
    {
        berkeley.com.sleepycat.je.Environment env;
        berkeley.com.sleepycat.je.Transaction txn;
        java.lang.String fileName, dbName;
        berkeley.com.sleepycat.je.DatabaseNotFoundException e, $r1;
        boolean $z0;
        java.lang.AssertionError $r0;

        env := @parameter0: berkeley.com.sleepycat.je.Environment;

        txn := @parameter1: berkeley.com.sleepycat.je.Transaction;

        fileName := @parameter2: java.lang.String;

        dbName := @parameter3: java.lang.String;

        $z0 = <berkeley.com.sleepycat.compat.DbCompat: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(fileName);

        if fileName == null goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        virtualinvoke env.<berkeley.com.sleepycat.je.Environment: void removeDatabase(berkeley.com.sleepycat.je.Transaction,java.lang.String)>(txn, dbName);

     label2:
        return 1;

     label3:
        $r1 := @caughtexception;

        e = $r1;

        return 0;

        catch berkeley.com.sleepycat.je.DatabaseNotFoundException from label1 to label2 with label3;
    }

    public static boolean getDeferredWrite(berkeley.com.sleepycat.je.DatabaseConfig)
    {
        berkeley.com.sleepycat.je.DatabaseConfig dbConfig;
        boolean $z0;

        dbConfig := @parameter0: berkeley.com.sleepycat.je.DatabaseConfig;

        $z0 = virtualinvoke dbConfig.<berkeley.com.sleepycat.je.DatabaseConfig: boolean getDeferredWrite()>();

        return $z0;
    }

    public static boolean getInitializeCDB(berkeley.com.sleepycat.je.EnvironmentConfig)
    {
        berkeley.com.sleepycat.je.EnvironmentConfig config;

        config := @parameter0: berkeley.com.sleepycat.je.EnvironmentConfig;

        return 0;
    }

    public static boolean getInitializeLocking(berkeley.com.sleepycat.je.EnvironmentConfig)
    {
        berkeley.com.sleepycat.je.EnvironmentConfig config;
        boolean $z0;

        config := @parameter0: berkeley.com.sleepycat.je.EnvironmentConfig;

        $z0 = virtualinvoke config.<berkeley.com.sleepycat.je.EnvironmentConfig: boolean getLocking()>();

        return $z0;
    }

    public static berkeley.com.sleepycat.je.SecondaryDatabase openSecondaryDatabase(berkeley.com.sleepycat.je.Environment, berkeley.com.sleepycat.je.Transaction, java.lang.String, java.lang.String, berkeley.com.sleepycat.je.Database, berkeley.com.sleepycat.je.SecondaryConfig)
    {
        berkeley.com.sleepycat.je.Environment env;
        berkeley.com.sleepycat.je.Transaction txn;
        java.lang.String fileName, dbName;
        berkeley.com.sleepycat.je.Database primaryDatabase;
        berkeley.com.sleepycat.je.SecondaryConfig config;
        boolean $z0;
        java.lang.AssertionError $r0;
        berkeley.com.sleepycat.je.SecondaryDatabase $r1;
        berkeley.com.sleepycat.je.DatabaseNotFoundException $r2, e#9;
        berkeley.com.sleepycat.je.DatabaseExistsException $r3, e#12;

        env := @parameter0: berkeley.com.sleepycat.je.Environment;

        txn := @parameter1: berkeley.com.sleepycat.je.Transaction;

        fileName := @parameter2: java.lang.String;

        dbName := @parameter3: java.lang.String;

        primaryDatabase := @parameter4: berkeley.com.sleepycat.je.Database;

        config := @parameter5: berkeley.com.sleepycat.je.SecondaryConfig;

        $z0 = <berkeley.com.sleepycat.compat.DbCompat: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(fileName);

        if fileName == null goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $r1 = virtualinvoke env.<berkeley.com.sleepycat.je.Environment: berkeley.com.sleepycat.je.SecondaryDatabase openSecondaryDatabase(berkeley.com.sleepycat.je.Transaction,java.lang.String,berkeley.com.sleepycat.je.Database,berkeley.com.sleepycat.je.SecondaryConfig)>(txn, dbName, primaryDatabase, config);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        e#9 = $r2;

        return null;

     label4:
        $r3 := @caughtexception;

        e#12 = $r3;

        return null;

        catch berkeley.com.sleepycat.je.DatabaseNotFoundException from label1 to label2 with label3;
        catch berkeley.com.sleepycat.je.DatabaseExistsException from label1 to label2 with label4;
    }

    public static java.lang.RuntimeException unexpectedException(java.lang.String, java.lang.Exception)
    {
        java.lang.String msg;
        java.lang.Exception cause;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r0;

        msg := @parameter0: java.lang.String;

        cause := @parameter1: java.lang.Exception;

        $r0 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedException(java.lang.String,java.lang.Exception)>(msg, cause);

        return $r0;
    }

    public static void setWriteCursor(berkeley.com.sleepycat.je.CursorConfig, boolean)
    {
        berkeley.com.sleepycat.je.CursorConfig config;
        boolean write;
        java.lang.UnsupportedOperationException $r0;

        config := @parameter0: berkeley.com.sleepycat.je.CursorConfig;

        write := @parameter1: boolean;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(write);

        if write == 0 goto label1;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;

     label1:
        return;
    }

    public static java.lang.RuntimeException unexpectedState()
    {
        berkeley.com.sleepycat.je.EnvironmentFailureException $r0;

        $r0 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState()>();

        return $r0;
    }


