    public void <init>()
    {
        weka.core.converters.ArffSaver this;
        int $i0;

        this := @this: weka.core.converters.ArffSaver;

        specialinvoke this.<weka.core.converters.AbstractFileSaver: void <init>()>();

        this.<weka.core.converters.ArffSaver: boolean m_CompressOutput> = 0;

        $i0 = <weka.core.AbstractInstance: int s_numericAfterDecimalPoint>;

        this.<weka.core.converters.ArffSaver: int m_MaxDecimalPlaces> = $i0;

        virtualinvoke this.<weka.core.converters.ArffSaver: void resetOptions()>();

        return;
    }

    public void resetOptions()
    {
        weka.core.converters.ArffSaver this;

        this := @this: weka.core.converters.ArffSaver;

        specialinvoke this.<weka.core.converters.AbstractFileSaver: void resetOptions()>();

        virtualinvoke this.<weka.core.converters.ArffSaver: void setFileExtension(java.lang.String)>(".arff");

        return;
    }

    public void setFile(java.io.File) throws java.io.IOException
    {
        weka.core.converters.ArffSaver this;
        java.io.File outputFile;
        java.lang.String $r0, $r1;
        boolean $z0;

        this := @this: weka.core.converters.ArffSaver;

        outputFile := @parameter0: java.io.File;

        $r0 = virtualinvoke outputFile.<java.io.File: java.lang.String getAbsolutePath()>();

        $r1 = <weka.core.converters.ArffLoader: java.lang.String FILE_EXTENSION_COMPRESSED>;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean endsWith(java.lang.String)>($r1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        virtualinvoke this.<weka.core.converters.ArffSaver: void setCompressOutput(boolean)>(1);

     label1:
        specialinvoke this.<weka.core.converters.AbstractFileSaver: void setFile(java.io.File)>(outputFile);

        return;
    }

    public void setCompressOutput(boolean)
    {
        weka.core.converters.ArffSaver this;
        boolean value;

        this := @this: weka.core.converters.ArffSaver;

        value := @parameter0: boolean;

        this.<weka.core.converters.ArffSaver: boolean m_CompressOutput> = value;

        return;
    }

    public void setDestination(java.io.OutputStream) throws java.io.IOException
    {
        weka.core.converters.ArffSaver this;
        java.io.OutputStream output;
        boolean $z0;
        java.util.zip.GZIPOutputStream $r0;

        this := @this: weka.core.converters.ArffSaver;

        output := @parameter0: java.io.OutputStream;

        $z0 = virtualinvoke this.<weka.core.converters.ArffSaver: boolean getCompressOutput()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r0 = new java.util.zip.GZIPOutputStream;

        specialinvoke $r0.<java.util.zip.GZIPOutputStream: void <init>(java.io.OutputStream)>(output);

        specialinvoke this.<weka.core.converters.AbstractFileSaver: void setDestination(java.io.OutputStream)>($r0);

        goto label2;

     label1:
        specialinvoke this.<weka.core.converters.AbstractFileSaver: void setDestination(java.io.OutputStream)>(output);

     label2:
        return;
    }

    public boolean getCompressOutput()
    {
        weka.core.converters.ArffSaver this;
        boolean $z0;

        this := @this: weka.core.converters.ArffSaver;

        $z0 = this.<weka.core.converters.ArffSaver: boolean m_CompressOutput>;

        return $z0;
    }

    public void writeBatch() throws java.io.IOException
    {
        weka.core.converters.ArffSaver this;
        weka.core.Instances data, data, header, $r0, $r6, $r12;
        java.io.IOException $r1, $r2;
        int $i0, i#27, $i1, $i2, i#55, $i3, $i4, $i5;
        java.io.File $r3;
        java.io.BufferedWriter $r4, $r11;
        java.io.PrintStream $r5, $r7;
        weka.core.Instance $r8, $r14;
        java.lang.String $r9, $r13, $r15;
        java.io.PrintWriter $r10, outW#44;

        this := @this: weka.core.converters.ArffSaver;

        $r0 = virtualinvoke this.<weka.core.converters.ArffSaver: weka.core.Instances getInstances()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("No instances to save");

        throw $r1;

     label1:
        $i0 = virtualinvoke this.<weka.core.converters.ArffSaver: int getRetrieval()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 2 goto label2;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Batch and incremental saving cannot be mixed.");

        throw $r2;

     label2:
        virtualinvoke this.<weka.core.converters.ArffSaver: void setRetrieval(int)>(1);

        virtualinvoke this.<weka.core.converters.ArffSaver: void setWriteMode(int)>(0);

        $r3 = virtualinvoke this.<weka.core.converters.ArffSaver: java.io.File retrieveFile()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r3);

        if $r3 != null goto label5;

        $r4 = virtualinvoke this.<weka.core.converters.ArffSaver: java.io.BufferedWriter getWriter()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        if $r4 != null goto label5;

        data = virtualinvoke this.<weka.core.converters.ArffSaver: weka.core.Instances getInstances()>();

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r6 = new weka.core.Instances;

        specialinvoke $r6.<weka.core.Instances: void <init>(weka.core.Instances,int)>(data, 0);

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.Object)>($r6);

        i#27 = 0;

     label3:
        $i1 = virtualinvoke data.<weka.core.Instances: int numInstances()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#27);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#27 >= $i1 goto label4;

        $r7 = <java.lang.System: java.io.PrintStream out>;

        $r8 = virtualinvoke data.<weka.core.Instances: weka.core.Instance instance(int)>(i#27);

        $i2 = this.<weka.core.converters.ArffSaver: int m_MaxDecimalPlaces>;

        $r9 = interfaceinvoke $r8.<weka.core.Instance: java.lang.String toStringMaxDecimalDigits(int)>($i2);

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r9);

        i#27 = i#27 + 1;

        goto label3;

     label4:
        virtualinvoke this.<weka.core.converters.ArffSaver: void setWriteMode(int)>(1);

        return;

     label5:
        $r10 = new java.io.PrintWriter;

        $r11 = virtualinvoke this.<weka.core.converters.ArffSaver: java.io.BufferedWriter getWriter()>();

        specialinvoke $r10.<java.io.PrintWriter: void <init>(java.io.Writer)>($r11);

        outW#44 = $r10;

        data = virtualinvoke this.<weka.core.converters.ArffSaver: weka.core.Instances getInstances()>();

        $r12 = new weka.core.Instances;

        specialinvoke $r12.<weka.core.Instances: void <init>(weka.core.Instances,int)>(data, 0);

        header = $r12;

        $r13 = virtualinvoke header.<weka.core.Instances: java.lang.String toString()>();

        virtualinvoke outW#44.<java.io.PrintWriter: void print(java.lang.String)>($r13);

        i#55 = 0;

     label6:
        $i3 = virtualinvoke data.<weka.core.Instances: int numInstances()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#55);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if i#55 >= $i3 goto label8;

        $i4 = i#55 % 1000;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 != 0 goto label7;

        virtualinvoke outW#44.<java.io.PrintWriter: void flush()>();

     label7:
        $r14 = virtualinvoke data.<weka.core.Instances: weka.core.Instance instance(int)>(i#55);

        $i5 = this.<weka.core.converters.ArffSaver: int m_MaxDecimalPlaces>;

        $r15 = interfaceinvoke $r14.<weka.core.Instance: java.lang.String toStringMaxDecimalDigits(int)>($i5);

        virtualinvoke outW#44.<java.io.PrintWriter: void println(java.lang.String)>($r15);

        i#55 = i#55 + 1;

        goto label6;

     label8:
        virtualinvoke outW#44.<java.io.PrintWriter: void flush()>();

        virtualinvoke outW#44.<java.io.PrintWriter: void close()>();

        virtualinvoke this.<weka.core.converters.ArffSaver: void setWriteMode(int)>(1);

        virtualinvoke this.<weka.core.converters.ArffSaver: void resetWriter()>();

        virtualinvoke this.<weka.core.converters.ArffSaver: void setWriteMode(int)>(2);

        return;
    }

    public weka.core.Capabilities getCapabilities()
    {
        weka.core.converters.ArffSaver this;
        weka.core.Capabilities result;
        weka.core.Capabilities$Capability $r0, $r1, $r2;

        this := @this: weka.core.converters.ArffSaver;

        result = specialinvoke this.<weka.core.converters.AbstractFileSaver: weka.core.Capabilities getCapabilities()>();

        virtualinvoke result.<weka.core.Capabilities: void enableAllAttributes()>();

        $r0 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability MISSING_VALUES>;

        virtualinvoke result.<weka.core.Capabilities: void enable(weka.core.Capabilities$Capability)>($r0);

        virtualinvoke result.<weka.core.Capabilities: void enableAllClasses()>();

        $r1 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability MISSING_CLASS_VALUES>;

        virtualinvoke result.<weka.core.Capabilities: void enable(weka.core.Capabilities$Capability)>($r1);

        $r2 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability NO_CLASS>;

        virtualinvoke result.<weka.core.Capabilities: void enable(weka.core.Capabilities$Capability)>($r2);

        return result;
    }


