    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "berkeley/com/sleepycat/je/tree/LN";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <berkeley.com.sleepycat.je.tree.LN: boolean $assertionsDisabled> = $z1;

        return;
    }

    public static void setEntry(berkeley.com.sleepycat.je.DatabaseEntry, byte[])
    {
        berkeley.com.sleepycat.je.DatabaseEntry dest;
        byte[] bytes, newdata#28;
        boolean partial;
        int off, $i0, $i1, len#11, $i2, $i3, $i4, $i5, $i6;

        dest := @parameter0: berkeley.com.sleepycat.je.DatabaseEntry;

        bytes := @parameter1: byte[];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(bytes);

        if bytes == null goto label10;

        partial = virtualinvoke dest.<berkeley.com.sleepycat.je.DatabaseEntry: boolean getPartial()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(partial);

        if partial == 0 goto label01;

        $i0 = virtualinvoke dest.<berkeley.com.sleepycat.je.DatabaseEntry: int getPartialOffset()>();

        goto label02;

     label01:
        $i0 = 0;

     label02:
        off = $i0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(partial);

        if partial == 0 goto label03;

        $i1 = virtualinvoke dest.<berkeley.com.sleepycat.je.DatabaseEntry: int getPartialLength()>();

        goto label04;

     label03:
        $i1 = lengthof bytes;

     label04:
        len#11 = $i1;

        $i2 = off + len#11;

        $i3 = lengthof bytes;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i2 <= $i3 goto label07;

        $i4 = lengthof bytes;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(off);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if off <= $i4 goto label05;

        $i5 = 0;

        goto label06;

     label05:
        $i6 = lengthof bytes;

        $i5 = $i6 - off;

     label06:
        len#11 = $i5;

     label07:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len#11);

        if len#11 != 0 goto label08;

        newdata#28 = <berkeley.com.sleepycat.je.log.LogUtils: byte[] ZERO_LENGTH_BYTE_ARRAY>;

        goto label09;

     label08:
        newdata#28 = newarray (byte)[len#11];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(bytes, off, newdata#28, 0, len#11);

     label09:
        virtualinvoke dest.<berkeley.com.sleepycat.je.DatabaseEntry: void setData(byte[])>(newdata#28);

        virtualinvoke dest.<berkeley.com.sleepycat.je.DatabaseEntry: void setOffset(int)>(0);

        virtualinvoke dest.<berkeley.com.sleepycat.je.DatabaseEntry: void setSize(int)>(len#11);

        goto label11;

     label10:
        virtualinvoke dest.<berkeley.com.sleepycat.je.DatabaseEntry: void setData(byte[])>(null);

        virtualinvoke dest.<berkeley.com.sleepycat.je.DatabaseEntry: void setOffset(int)>(0);

        virtualinvoke dest.<berkeley.com.sleepycat.je.DatabaseEntry: void setSize(int)>(0);

     label11:
        return;
    }

    void <init>(byte[])
    {
        berkeley.com.sleepycat.je.tree.LN this;
        byte[] data, $r0;
        int $i0;

        this := @this: berkeley.com.sleepycat.je.tree.LN;

        data := @parameter0: byte[];

        specialinvoke this.<berkeley.com.sleepycat.je.tree.Node: void <init>()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(data);

        if data != null goto label1;

        this.<berkeley.com.sleepycat.je.tree.LN: byte[] data> = null;

        goto label3;

     label1:
        $i0 = lengthof data;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 0 goto label2;

        $r0 = <berkeley.com.sleepycat.je.log.LogUtils: byte[] ZERO_LENGTH_BYTE_ARRAY>;

        this.<berkeley.com.sleepycat.je.tree.LN: byte[] data> = $r0;

        goto label3;

     label2:
        this.<berkeley.com.sleepycat.je.tree.LN: byte[] data> = data;

     label3:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.LN: void setDirty()>();

        return;
    }

    public void setDirty()
    {
        berkeley.com.sleepycat.je.tree.LN this;
        int $i0, $i1;

        this := @this: berkeley.com.sleepycat.je.tree.LN;

        $i0 = this.<berkeley.com.sleepycat.je.tree.LN: int flags>;

        $i1 = $i0 | -2147483648;

        this.<berkeley.com.sleepycat.je.tree.LN: int flags> = $i1;

        return;
    }

    public byte[] getData()
    {
        berkeley.com.sleepycat.je.tree.LN this;
        byte[] $r0;

        this := @this: berkeley.com.sleepycat.je.tree.LN;

        $r0 = this.<berkeley.com.sleepycat.je.tree.LN: byte[] data>;

        return $r0;
    }

    public berkeley.com.sleepycat.je.log.LogItem optionalLog(berkeley.com.sleepycat.je.dbi.EnvironmentImpl, berkeley.com.sleepycat.je.dbi.DatabaseImpl, berkeley.com.sleepycat.je.txn.Locker, berkeley.com.sleepycat.je.txn.WriteLockInfo, boolean, byte[], int, boolean, boolean, long, int, boolean, berkeley.com.sleepycat.je.log.ReplicationContext) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.tree.LN this;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        berkeley.com.sleepycat.je.txn.Locker locker;
        berkeley.com.sleepycat.je.txn.WriteLockInfo writeLockInfo;
        boolean newEmbeddedLN, newExpirationInHours, currEmbeddedLN, isInsertion, $z0;
        byte[] newKey;
        int newExpiration, currSize;
        long currLsn, $l0;
        berkeley.com.sleepycat.je.log.ReplicationContext repContext;
        berkeley.com.sleepycat.je.log.LogItem item, $r0, $r1;

        this := @this: berkeley.com.sleepycat.je.tree.LN;

        envImpl := @parameter0: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        dbImpl := @parameter1: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        locker := @parameter2: berkeley.com.sleepycat.je.txn.Locker;

        writeLockInfo := @parameter3: berkeley.com.sleepycat.je.txn.WriteLockInfo;

        newEmbeddedLN := @parameter4: boolean;

        newKey := @parameter5: byte[];

        newExpiration := @parameter6: int;

        newExpirationInHours := @parameter7: boolean;

        currEmbeddedLN := @parameter8: boolean;

        currLsn := @parameter9: long;

        currSize := @parameter10: int;

        isInsertion := @parameter11: boolean;

        repContext := @parameter12: berkeley.com.sleepycat.je.log.ReplicationContext;

        $z0 = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isDeferredWriteMode()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(currEmbeddedLN);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(newEmbeddedLN);

        if currEmbeddedLN != newEmbeddedLN goto label1;

        $r0 = new berkeley.com.sleepycat.je.log.LogItem;

        specialinvoke $r0.<berkeley.com.sleepycat.je.log.LogItem: void <init>()>();

        item = $r0;

        $l0 = specialinvoke this.<berkeley.com.sleepycat.je.tree.LN: long assignTransientLsn(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.dbi.DatabaseImpl,long,berkeley.com.sleepycat.je.txn.Locker)>(envImpl, dbImpl, currLsn, locker);

        item.<berkeley.com.sleepycat.je.log.LogItem: long lsn> = $l0;

        item.<berkeley.com.sleepycat.je.log.LogItem: int size> = -1;

        return item;

     label1:
        $r1 = specialinvoke this.<berkeley.com.sleepycat.je.tree.LN: berkeley.com.sleepycat.je.log.LogItem logInternal(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.dbi.DatabaseImpl,berkeley.com.sleepycat.je.txn.Locker,berkeley.com.sleepycat.je.txn.WriteLockInfo,boolean,byte[],int,boolean,boolean,long,int,boolean,boolean,berkeley.com.sleepycat.je.log.ReplicationContext)>(envImpl, dbImpl, locker, writeLockInfo, newEmbeddedLN, newKey, newExpiration, newExpirationInHours, currEmbeddedLN, currLsn, currSize, isInsertion, 0, repContext);

        return $r1;
    }

    public long getVLSNSequence()
    {
        berkeley.com.sleepycat.je.tree.LN this;

        this := @this: berkeley.com.sleepycat.je.tree.LN;

        return -1L;
    }

    public void setEntry(berkeley.com.sleepycat.je.DatabaseEntry)
    {
        berkeley.com.sleepycat.je.tree.LN this;
        berkeley.com.sleepycat.je.DatabaseEntry entry;
        int len;
        byte[] bytes, $r1, $r2;
        boolean $z0, $z1;
        java.lang.AssertionError $r0;

        this := @this: berkeley.com.sleepycat.je.tree.LN;

        entry := @parameter0: berkeley.com.sleepycat.je.DatabaseEntry;

        $z0 = <berkeley.com.sleepycat.je.tree.LN: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.LN: boolean isDeleted()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.tree.LN: byte[] data>;

        len = lengthof $r1;

        bytes = newarray (byte)[len];

        $r2 = this.<berkeley.com.sleepycat.je.tree.LN: byte[] data>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, bytes, 0, len);

        virtualinvoke entry.<berkeley.com.sleepycat.je.DatabaseEntry: void setData(byte[])>(bytes);

        return;
    }

    public boolean isDeleted()
    {
        berkeley.com.sleepycat.je.tree.LN this;
        byte[] $r0;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.tree.LN;

        $r0 = this.<berkeley.com.sleepycat.je.tree.LN: byte[] data>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private long assignTransientLsn(berkeley.com.sleepycat.je.dbi.EnvironmentImpl, berkeley.com.sleepycat.je.dbi.DatabaseImpl, long, berkeley.com.sleepycat.je.txn.Locker)
    {
        berkeley.com.sleepycat.je.tree.LN this;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        long oldLsn, newLsn#5;
        berkeley.com.sleepycat.je.txn.Locker locker;
        berkeley.com.sleepycat.je.txn.LockType $r0;
        berkeley.com.sleepycat.je.txn.LockResult lockResult;
        byte $b0;
        berkeley.com.sleepycat.je.dbi.NodeSequence $r1;
        boolean $z0;
        berkeley.com.sleepycat.je.txn.LockGrantType $r2, $r3;
        java.lang.AssertionError $r4;
        java.lang.String $r5;

        this := @this: berkeley.com.sleepycat.je.tree.LN;

        envImpl := @parameter0: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        dbImpl := @parameter1: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        oldLsn := @parameter2: long;

        locker := @parameter3: berkeley.com.sleepycat.je.txn.Locker;

        $b0 = oldLsn cmp -1L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 == 0 goto label1;

        newLsn#5 = oldLsn;

        goto label2;

     label1:
        $r1 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.NodeSequence getNodeSequence()>();

        newLsn#5 = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.NodeSequence: long getNextTransientLsn()>();

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(locker);

        if locker == null goto label3;

        $r0 = <berkeley.com.sleepycat.je.txn.LockType: berkeley.com.sleepycat.je.txn.LockType WRITE>;

        lockResult = virtualinvoke locker.<berkeley.com.sleepycat.je.txn.Locker: berkeley.com.sleepycat.je.txn.LockResult nonBlockingLock(long,berkeley.com.sleepycat.je.txn.LockType,boolean,berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(newLsn#5, $r0, 0, dbImpl);

        $z0 = <berkeley.com.sleepycat.je.tree.LN: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label3;

        $r2 = virtualinvoke lockResult.<berkeley.com.sleepycat.je.txn.LockResult: berkeley.com.sleepycat.je.txn.LockGrantType getLockGrant()>();

        $r3 = <berkeley.com.sleepycat.je.txn.LockGrantType: berkeley.com.sleepycat.je.txn.LockGrantType DENIED>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r3);

        if $r2 != $r3 goto label3;

        $r4 = new java.lang.AssertionError;

        $r5 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(newLsn#5);

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>($r5);

        throw $r4;

     label3:
        return newLsn#5;
    }

    private berkeley.com.sleepycat.je.log.LogItem logInternal(berkeley.com.sleepycat.je.dbi.EnvironmentImpl, berkeley.com.sleepycat.je.dbi.DatabaseImpl, berkeley.com.sleepycat.je.txn.Locker, berkeley.com.sleepycat.je.txn.WriteLockInfo, boolean, byte[], int, boolean, boolean, long, int, boolean, boolean, berkeley.com.sleepycat.je.log.ReplicationContext) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.tree.LN this;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        berkeley.com.sleepycat.je.txn.Locker locker;
        berkeley.com.sleepycat.je.txn.WriteLockInfo writeLockInfo;
        boolean newEmbeddedLN, newExpirationInHours, currEmbeddedLN, isInsertion, backgroundIO, isNamingDB, isRepLocker, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, abortKD#92, abortExpirationInHours#102, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        byte[] newKey, abortKey#94, abortData#96, $r55, $r56, $r64;
        int newExpiration, currSize, abortExpiration#100, $i4;
        long currLsn, newLsn, $l0, $l1, abortLsn#90, abortVLSN#98;
        berkeley.com.sleepycat.je.log.ReplicationContext repContext;
        berkeley.com.sleepycat.je.log.LogParams params, $r37;
        berkeley.com.sleepycat.je.txn.Txn l30, txn#88;
        java.lang.Throwable l31, e, l32, $r44, $r46, $r49;
        berkeley.com.sleepycat.je.txn.LockResult lockResult;
        java.lang.Class $r0, $r1, $r10, $r25;
        java.lang.AssertionError $r2, $r38, $r53;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r3, $r19, $r36, $r47, $r75;
        berkeley.com.sleepycat.je.dbi.DatabaseId $r4, $r5;
        java.lang.StringBuilder $r6, $r8, $r9, $r12, $r13, $r14, $r15, $r17, $r20, $r22, $r23, $r24, $r27, $r28, $r29, $r31, $r32, $r34, $r57, $r58, $r59, $r60, $r62, $r63, $r66, $r67, $r70, $r71, $r73;
        java.lang.String $r7, $r11, $r16, $r18, $r21, $r26, $r30, $r33, $r35, $r54, $r61, $r65, $r72, $r74;
        berkeley.com.sleepycat.je.log.LogEntryType entryType#112;
        berkeley.com.sleepycat.je.log.entry.LNLogEntry $r39;
        berkeley.com.sleepycat.je.log.Provisional $r41;
        byte $b2, $b3;
        berkeley.com.sleepycat.je.log.LogManager $r43, $r45;
        berkeley.com.sleepycat.je.log.LogItem item#181;
        berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason $r48;
        berkeley.com.sleepycat.je.txn.LockType $r50;
        berkeley.com.sleepycat.je.txn.LockGrantType $r51, $r52;
        berkeley.com.sleepycat.je.log.LogEntryHeader $r68;
        berkeley.com.sleepycat.je.utilint.VLSN $r69;

        this := @this: berkeley.com.sleepycat.je.tree.LN;

        envImpl := @parameter0: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        dbImpl := @parameter1: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        locker := @parameter2: berkeley.com.sleepycat.je.txn.Locker;

        writeLockInfo := @parameter3: berkeley.com.sleepycat.je.txn.WriteLockInfo;

        newEmbeddedLN := @parameter4: boolean;

        newKey := @parameter5: byte[];

        newExpiration := @parameter6: int;

        newExpirationInHours := @parameter7: boolean;

        currEmbeddedLN := @parameter8: boolean;

        currLsn := @parameter9: long;

        currSize := @parameter10: int;

        isInsertion := @parameter11: boolean;

        backgroundIO := @parameter12: boolean;

        repContext := @parameter13: berkeley.com.sleepycat.je.log.ReplicationContext;

        $z0 = <berkeley.com.sleepycat.je.tree.LN: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label01;

        $r0 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == class "berkeley/com/sleepycat/je/tree/LN" goto label01;

        $r1 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 == class "berkeley/com/sleepycat/je/tree/VersionedLN" goto label01;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(newEmbeddedLN);

        if newEmbeddedLN == 0 goto label01;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label01:
        $z1 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean isReadOnly()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label02;

        $r3 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>("Cannot log LNs in read-only env.");

        throw $r3;

     label02:
        $r4 = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.DatabaseId getId()>();

        $r5 = <berkeley.com.sleepycat.je.dbi.DbTree: berkeley.com.sleepycat.je.dbi.DatabaseId NAME_DB_ID>;

        isNamingDB = virtualinvoke $r4.<berkeley.com.sleepycat.je.dbi.DatabaseId: boolean equals(java.lang.Object)>($r5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isNamingDB);

        if isNamingDB != 0 goto label05;

        $z2 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean isReplicated()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label05;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(locker);

        if locker == null goto label05;

        $z3 = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isReplicated()>();

        $z4 = virtualinvoke locker.<berkeley.com.sleepycat.je.txn.Locker: boolean isReplicated()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z3 == $z4 goto label05;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $z5 = virtualinvoke locker.<berkeley.com.sleepycat.je.txn.Locker: boolean isReplicated()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label03;

        $r7 = "Rep txn used to write to non-rep DB";

        goto label04;

     label03:
        $r7 = "Non-rep txn used to write to rep DB";

     label04:
        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", class = ");

        $r10 = virtualinvoke locker.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", txnId = ");

        $l0 = virtualinvoke locker.<berkeley.com.sleepycat.je.txn.Locker: long getId()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", dbName = ");

        $r16 = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: java.lang.String getDebugName()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r19 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>($r18);

        throw $r19;

     label05:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isNamingDB);

        if isNamingDB != 0 goto label12;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(locker);

        if locker == null goto label06;

        $z6 = virtualinvoke locker.<berkeley.com.sleepycat.je.txn.Locker: boolean isReplicated()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label06;

        $z7 = 1;

        goto label07;

     label06:
        $z7 = 0;

     label07:
        isRepLocker = $z7;

        $z8 = virtualinvoke repContext.<berkeley.com.sleepycat.je.log.ReplicationContext: boolean inReplicationStream()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isRepLocker);

        if $z8 == isRepLocker goto label12;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isRepLocker);

        if isRepLocker == 0 goto label08;

        $r21 = "Rep txn used to write outside of rep stream";

        goto label09;

     label08:
        $r21 = "Non-rep txn used to write in rep stream";

     label09:
        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(locker);

        if locker == null goto label10;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", class = ");

        $r25 = virtualinvoke locker.<java.lang.Object: java.lang.Class getClass()>();

        $r26 = virtualinvoke $r25.<java.lang.Class: java.lang.String getName()>();

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", txnId = ");

        $l1 = virtualinvoke locker.<berkeley.com.sleepycat.je.txn.Locker: long getId()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label11;

     label10:
        $r30 = ", null locker";

     label11:
        $r31 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", dbName = ");

        $r33 = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: java.lang.String getDebugName()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        $r36 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>($r35);

        throw $r36;

     label12:
        txn#88 = null;

        abortLsn#90 = -1L;

        abortKD#92 = 0;

        abortKey#94 = null;

        abortData#96 = null;

        abortVLSN#98 = -1L;

        abortExpiration#100 = 0;

        abortExpirationInHours#102 = 0;

        $r37 = new berkeley.com.sleepycat.je.log.LogParams;

        specialinvoke $r37.<berkeley.com.sleepycat.je.log.LogParams: void <init>()>();

        params = $r37;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(locker);

        if locker == null goto label14;

        $z9 = virtualinvoke locker.<berkeley.com.sleepycat.je.txn.Locker: boolean isTransactional()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 == 0 goto label14;

        entryType#112 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.LN: berkeley.com.sleepycat.je.log.LogEntryType getLogType(boolean,boolean)>(isInsertion, 1);

        txn#88 = virtualinvoke locker.<berkeley.com.sleepycat.je.txn.Locker: berkeley.com.sleepycat.je.txn.Txn getTxnLocker()>();

        $z10 = <berkeley.com.sleepycat.je.tree.LN: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z10);

        if $z10 != 0 goto label13;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(txn#88);

        if txn#88 != null goto label13;

        $r38 = new java.lang.AssertionError;

        specialinvoke $r38.<java.lang.AssertionError: void <init>()>();

        throw $r38;

     label13:
        abortLsn#90 = virtualinvoke writeLockInfo.<berkeley.com.sleepycat.je.txn.WriteLockInfo: long getAbortLsn()>();

        abortKD#92 = virtualinvoke writeLockInfo.<berkeley.com.sleepycat.je.txn.WriteLockInfo: boolean getAbortKnownDeleted()>();

        abortKey#94 = virtualinvoke writeLockInfo.<berkeley.com.sleepycat.je.txn.WriteLockInfo: byte[] getAbortKey()>();

        abortData#96 = virtualinvoke writeLockInfo.<berkeley.com.sleepycat.je.txn.WriteLockInfo: byte[] getAbortData()>();

        abortVLSN#98 = virtualinvoke writeLockInfo.<berkeley.com.sleepycat.je.txn.WriteLockInfo: long getAbortVLSN()>();

        abortExpiration#100 = virtualinvoke writeLockInfo.<berkeley.com.sleepycat.je.txn.WriteLockInfo: int getAbortExpiration()>();

        abortExpirationInHours#102 = virtualinvoke writeLockInfo.<berkeley.com.sleepycat.je.txn.WriteLockInfo: boolean isAbortExpirationInHours()>();

        $z11 = virtualinvoke locker.<berkeley.com.sleepycat.je.txn.Locker: boolean isRolledBack()>();

        params.<berkeley.com.sleepycat.je.log.LogParams: boolean obsoleteDupsAllowed> = $z11;

        goto label15;

     label14:
        entryType#112 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.LN: berkeley.com.sleepycat.je.log.LogEntryType getLogType(boolean,boolean)>(isInsertion, 0);

     label15:
        $r39 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.LN: berkeley.com.sleepycat.je.log.entry.LNLogEntry createLogEntry(berkeley.com.sleepycat.je.log.LogEntryType,berkeley.com.sleepycat.je.dbi.DatabaseImpl,berkeley.com.sleepycat.je.txn.Txn,long,boolean,byte[],byte[],long,int,boolean,byte[],boolean,int,boolean,berkeley.com.sleepycat.je.log.ReplicationContext)>(entryType#112, dbImpl, txn#88, abortLsn#90, abortKD#92, abortKey#94, abortData#96, abortVLSN#98, abortExpiration#100, abortExpirationInHours#102, newKey, newEmbeddedLN, newExpiration, newExpirationInHours, repContext);

        params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.log.entry.LogEntry entry> = $r39;

        $z12 = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isTemporary()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z12);

        if $z12 == 0 goto label16;

        $r41 = <berkeley.com.sleepycat.je.log.Provisional: berkeley.com.sleepycat.je.log.Provisional YES>;

        goto label17;

     label16:
        $r41 = <berkeley.com.sleepycat.je.log.Provisional: berkeley.com.sleepycat.je.log.Provisional NO>;

     label17:
        params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.log.Provisional provisional> = $r41;

        $b2 = currLsn cmp abortLsn#90;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b2);

        if $b2 == 0 goto label18;

        $z13 = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isLNImmediatelyObsolete()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z13);

        if $z13 != 0 goto label18;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isInsertion);

        if isInsertion != 0 goto label18;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(currEmbeddedLN);

        if currEmbeddedLN != 0 goto label18;

        params.<berkeley.com.sleepycat.je.log.LogParams: long oldLsn> = currLsn;

        params.<berkeley.com.sleepycat.je.log.LogParams: int oldSize> = currSize;

     label18:
        params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.log.ReplicationContext repContext> = repContext;

        params.<berkeley.com.sleepycat.je.log.LogParams: boolean backgroundIO> = backgroundIO;

        params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.dbi.DatabaseImpl nodeDb> = dbImpl;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(txn#88);

        if txn#88 == null goto label19;

        $b3 = currLsn cmp abortLsn#90;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b3);

        if $b3 != 0 goto label19;

        virtualinvoke writeLockInfo.<berkeley.com.sleepycat.je.txn.WriteLockInfo: void setAbortLogSize(int)>(currSize);

     label19:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(txn#88);

        if txn#88 == null goto label26;

        l30 = txn#88;

        entermonitor txn#88;

     label20:
        $r43 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.log.LogManager getLogManager()>();

        item#181 = virtualinvoke $r43.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.LogItem log(berkeley.com.sleepycat.je.log.LogParams)>(params);

        exitmonitor l30;

     label21:
        goto label25;

     label22:
        $r44 := @caughtexception;

     label23:
        l31 = $r44;

        exitmonitor l30;

     label24:
        throw l31;

     label25:
        goto label27;

     label26:
        $r45 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.log.LogManager getLogManager()>();

        item#181 = virtualinvoke $r45.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.LogItem log(berkeley.com.sleepycat.je.log.LogParams)>(params);

     label27:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.LN: void clearDirty()>();

        goto label33;

     label28:
        $r46 := @caughtexception;

     label29:
        e = $r46;

        $z14 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean isValid()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z14);

        if $z14 == 0 goto label30;

        $r47 = new berkeley.com.sleepycat.je.EnvironmentFailureException;

        $r48 = <berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason: berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason LOG_INCOMPLETE>;

        specialinvoke $r47.<berkeley.com.sleepycat.je.EnvironmentFailureException: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason,java.lang.String,java.lang.Throwable)>(envImpl, $r48, "LN could not be logged", e);

        throw $r47;

     label30:
        throw e;

     label31:
        $r49 := @caughtexception;

        l32 = $r49;

     label32:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.LN: void clearDirty()>();

        throw l32;

     label33:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(locker);

        if locker == null goto label35;

        newLsn = item#181.<berkeley.com.sleepycat.je.log.LogItem: long lsn>;

        $r50 = <berkeley.com.sleepycat.je.txn.LockType: berkeley.com.sleepycat.je.txn.LockType WRITE>;

        lockResult = virtualinvoke locker.<berkeley.com.sleepycat.je.txn.Locker: berkeley.com.sleepycat.je.txn.LockResult nonBlockingLock(long,berkeley.com.sleepycat.je.txn.LockType,boolean,berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(newLsn, $r50, 0, dbImpl);

        $z15 = <berkeley.com.sleepycat.je.tree.LN: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z15);

        if $z15 != 0 goto label34;

        $r51 = virtualinvoke lockResult.<berkeley.com.sleepycat.je.txn.LockResult: berkeley.com.sleepycat.je.txn.LockGrantType getLockGrant()>();

        $r52 = <berkeley.com.sleepycat.je.txn.LockGrantType: berkeley.com.sleepycat.je.txn.LockGrantType DENIED>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r51);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r52);

        if $r51 != $r52 goto label34;

        $r53 = new java.lang.AssertionError;

        $r54 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(newLsn);

        specialinvoke $r53.<java.lang.AssertionError: void <init>(java.lang.Object)>($r54);

        throw $r53;

     label34:
        virtualinvoke lockResult.<berkeley.com.sleepycat.je.txn.LockResult: void copyWriteLockInfo(berkeley.com.sleepycat.je.txn.WriteLockInfo)>(writeLockInfo);

     label35:
        $z16 = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean getSortedDuplicates()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z16);

        if $z16 == 0 goto label37;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(newEmbeddedLN);

        if newEmbeddedLN != 0 goto label36;

        $r55 = this.<berkeley.com.sleepycat.je.tree.LN: byte[] data>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r55);

        if $r55 == null goto label37;

        $r56 = this.<berkeley.com.sleepycat.je.tree.LN: byte[] data>;

        $i4 = lengthof $r56;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 <= 0 goto label37;

     label36:
        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[#25288] emb=");

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(newEmbeddedLN);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" key=");

        $r61 = staticinvoke <berkeley.com.sleepycat.je.tree.Key: java.lang.String getNoFormatString(byte[])>(newKey);

        $r62 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r61);

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" data=");

        $r64 = this.<berkeley.com.sleepycat.je.tree.LN: byte[] data>;

        $r65 = staticinvoke <berkeley.com.sleepycat.je.tree.Key: java.lang.String getNoFormatString(byte[])>($r64);

        $r66 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r65);

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" vlsn=");

        $r68 = item#181.<berkeley.com.sleepycat.je.log.LogItem: berkeley.com.sleepycat.je.log.LogEntryHeader header>;

        $r69 = virtualinvoke $r68.<berkeley.com.sleepycat.je.log.LogEntryHeader: berkeley.com.sleepycat.je.utilint.VLSN getVLSN()>();

        $r70 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r69);

        $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lsn=");

        $r72 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(currLsn);

        $r73 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r72);

        $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.String toString()>();

        $r75 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String)>(envImpl, $r74);

        throw $r75;

     label37:
        return item#181;

        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label23 to label24 with label22;
        catch java.lang.Throwable from label19 to label27 with label28;
        catch java.lang.Throwable from label19 to label27 with label31;
        catch java.lang.Throwable from label29 to label32 with label31;
    }

    berkeley.com.sleepycat.je.log.entry.LNLogEntry createLogEntry(berkeley.com.sleepycat.je.log.LogEntryType, berkeley.com.sleepycat.je.dbi.DatabaseImpl, berkeley.com.sleepycat.je.txn.Txn, long, boolean, byte[], byte[], long, int, boolean, byte[], boolean, int, boolean, berkeley.com.sleepycat.je.log.ReplicationContext)
    {
        berkeley.com.sleepycat.je.tree.LN this;
        berkeley.com.sleepycat.je.log.LogEntryType entryType;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        berkeley.com.sleepycat.je.txn.Txn txn;
        long abortLsn, abortVLSN;
        boolean abortKD, abortExpirationInHours, newEmbeddedLN, newExpirationInHours;
        byte[] abortKey, abortData, newKey;
        int abortExpiration, newExpiration;
        berkeley.com.sleepycat.je.log.ReplicationContext repContext;
        berkeley.com.sleepycat.je.log.entry.LNLogEntry $r0;
        berkeley.com.sleepycat.je.dbi.DatabaseId $r1;

        this := @this: berkeley.com.sleepycat.je.tree.LN;

        entryType := @parameter0: berkeley.com.sleepycat.je.log.LogEntryType;

        dbImpl := @parameter1: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        txn := @parameter2: berkeley.com.sleepycat.je.txn.Txn;

        abortLsn := @parameter3: long;

        abortKD := @parameter4: boolean;

        abortKey := @parameter5: byte[];

        abortData := @parameter6: byte[];

        abortVLSN := @parameter7: long;

        abortExpiration := @parameter8: int;

        abortExpirationInHours := @parameter9: boolean;

        newKey := @parameter10: byte[];

        newEmbeddedLN := @parameter11: boolean;

        newExpiration := @parameter12: int;

        newExpirationInHours := @parameter13: boolean;

        repContext := @parameter14: berkeley.com.sleepycat.je.log.ReplicationContext;

        $r0 = new berkeley.com.sleepycat.je.log.entry.LNLogEntry;

        $r1 = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.DatabaseId getId()>();

        specialinvoke $r0.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: void <init>(berkeley.com.sleepycat.je.log.LogEntryType,berkeley.com.sleepycat.je.dbi.DatabaseId,berkeley.com.sleepycat.je.txn.Txn,long,boolean,byte[],byte[],long,int,boolean,byte[],berkeley.com.sleepycat.je.tree.LN,boolean,int,boolean)>(entryType, $r1, txn, abortLsn, abortKD, abortKey, abortData, abortVLSN, abortExpiration, abortExpirationInHours, newKey, this, newEmbeddedLN, newExpiration, newExpirationInHours);

        return $r0;
    }

    public void clearDirty()
    {
        berkeley.com.sleepycat.je.tree.LN this;
        int $i0, $i1;

        this := @this: berkeley.com.sleepycat.je.tree.LN;

        $i0 = this.<berkeley.com.sleepycat.je.tree.LN: int flags>;

        $i1 = $i0 & 2147483647;

        this.<berkeley.com.sleepycat.je.tree.LN: int flags> = $i1;

        return;
    }

    public static byte[] copyEntryData(berkeley.com.sleepycat.je.DatabaseEntry)
    {
        berkeley.com.sleepycat.je.DatabaseEntry entry;
        int len, $i0;
        byte[] newData, $r1, $r2;
        boolean $z0, $z1;
        java.lang.AssertionError $r0;

        entry := @parameter0: berkeley.com.sleepycat.je.DatabaseEntry;

        $z0 = <berkeley.com.sleepycat.je.tree.LN: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke entry.<berkeley.com.sleepycat.je.DatabaseEntry: boolean getPartial()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        len = virtualinvoke entry.<berkeley.com.sleepycat.je.DatabaseEntry: int getSize()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len);

        if len != 0 goto label2;

        $r1 = <berkeley.com.sleepycat.je.log.LogUtils: byte[] ZERO_LENGTH_BYTE_ARRAY>;

        goto label3;

     label2:
        $r1 = newarray (byte)[len];

     label3:
        newData = $r1;

        $r2 = virtualinvoke entry.<berkeley.com.sleepycat.je.DatabaseEntry: byte[] getData()>();

        $i0 = virtualinvoke entry.<berkeley.com.sleepycat.je.DatabaseEntry: int getOffset()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i0, newData, 0, len);

        return newData;
    }

    public static byte[] resolvePartialEntry(berkeley.com.sleepycat.je.DatabaseEntry, byte[])
    {
        berkeley.com.sleepycat.je.DatabaseEntry entry;
        byte[] foundDataBytes, newData#26, $r1;
        int dlen, doff, origlen, oldlen, len, $i0, $i1, $i2, $i3, $i4, slicelen#34, pos#44, slicelen#47, $i5, pos#58, $i6, slicelen#64, $i7;
        boolean $z0;
        java.lang.AssertionError $r0;
        byte pos#30;

        entry := @parameter0: berkeley.com.sleepycat.je.DatabaseEntry;

        foundDataBytes := @parameter1: byte[];

        $z0 = <berkeley.com.sleepycat.je.tree.LN: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(foundDataBytes);

        if foundDataBytes != null goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        dlen = virtualinvoke entry.<berkeley.com.sleepycat.je.DatabaseEntry: int getPartialLength()>();

        doff = virtualinvoke entry.<berkeley.com.sleepycat.je.DatabaseEntry: int getPartialOffset()>();

        origlen = lengthof foundDataBytes;

        $i0 = doff + dlen;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origlen);

        if $i0 <= origlen goto label2;

        $i1 = doff + dlen;

        goto label3;

     label2:
        $i1 = origlen;

     label3:
        oldlen = $i1;

        $i2 = oldlen - dlen;

        $i3 = virtualinvoke entry.<berkeley.com.sleepycat.je.DatabaseEntry: int getSize()>();

        len = $i2 + $i3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len);

        if len != 0 goto label4;

        newData#26 = <berkeley.com.sleepycat.je.log.LogUtils: byte[] ZERO_LENGTH_BYTE_ARRAY>;

        goto label5;

     label4:
        newData#26 = newarray (byte)[len];

     label5:
        pos#30 = 0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(doff);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(origlen);

        if doff >= origlen goto label6;

        $i4 = doff;

        goto label7;

     label6:
        $i4 = origlen;

     label7:
        slicelen#34 = $i4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(slicelen#34);

        if slicelen#34 <= 0 goto label8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(foundDataBytes, 0, newData#26, pos#30, slicelen#34);

     label8:
        pos#44 = pos#30 + doff;

        slicelen#47 = virtualinvoke entry.<berkeley.com.sleepycat.je.DatabaseEntry: int getSize()>();

        $r1 = virtualinvoke entry.<berkeley.com.sleepycat.je.DatabaseEntry: byte[] getData()>();

        $i5 = virtualinvoke entry.<berkeley.com.sleepycat.je.DatabaseEntry: int getOffset()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i5, newData#26, pos#44, slicelen#47);

        pos#58 = pos#44 + slicelen#47;

        $i6 = doff + dlen;

        slicelen#64 = origlen - $i6;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(slicelen#64);

        if slicelen#64 <= 0 goto label9;

        $i7 = doff + dlen;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(foundDataBytes, $i7, newData#26, pos#58, slicelen#64);

     label9:
        return newData#26;
    }

    public void addExtraMarshaledMemorySize(berkeley.com.sleepycat.je.tree.BIN)
    {
        berkeley.com.sleepycat.je.tree.LN this;
        berkeley.com.sleepycat.je.tree.BIN parentBIN;

        this := @this: berkeley.com.sleepycat.je.tree.LN;

        parentBIN := @parameter0: berkeley.com.sleepycat.je.tree.BIN;

        return;
    }

    public static berkeley.com.sleepycat.je.tree.LN makeLN(berkeley.com.sleepycat.je.dbi.EnvironmentImpl, byte[])
    {
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        byte[] dataParam;
        boolean $z0;
        berkeley.com.sleepycat.je.tree.VersionedLN $r0;
        berkeley.com.sleepycat.je.tree.LN $r1;

        envImpl := @parameter0: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        dataParam := @parameter1: byte[];

        $z0 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean getPreserveVLSN()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r0 = new berkeley.com.sleepycat.je.tree.VersionedLN;

        specialinvoke $r0.<berkeley.com.sleepycat.je.tree.VersionedLN: void <init>(byte[])>(dataParam);

        return $r0;

     label1:
        $r1 = new berkeley.com.sleepycat.je.tree.LN;

        specialinvoke $r1.<berkeley.com.sleepycat.je.tree.LN: void <init>(byte[])>(dataParam);

        return $r1;
    }

    public void delete()
    {
        berkeley.com.sleepycat.je.tree.LN this;

        this := @this: berkeley.com.sleepycat.je.tree.LN;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.LN: void makeDeleted()>();

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.LN: void setDirty()>();

        return;
    }

    public long getMemorySizeIncludedByParent()
    {
        berkeley.com.sleepycat.je.tree.LN this;
        int size#2, $i0, $i1;
        byte[] $r0, $r1;
        long $l2;

        this := @this: berkeley.com.sleepycat.je.tree.LN;

        size#2 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: int LN_OVERHEAD>;

        $r0 = this.<berkeley.com.sleepycat.je.tree.LN: byte[] data>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label1;

        $r1 = this.<berkeley.com.sleepycat.je.tree.LN: byte[] data>;

        $i0 = lengthof $r1;

        $i1 = staticinvoke <berkeley.com.sleepycat.je.dbi.MemoryBudget: int byteArraySize(int)>($i0);

        size#2 = size#2 + $i1;

     label1:
        $l2 = (long) size#2;

        return $l2;
    }

    void makeDeleted()
    {
        berkeley.com.sleepycat.je.tree.LN this;

        this := @this: berkeley.com.sleepycat.je.tree.LN;

        this.<berkeley.com.sleepycat.je.tree.LN: byte[] data> = null;

        return;
    }

    protected berkeley.com.sleepycat.je.log.LogEntryType getLogType(boolean, boolean)
    {
        berkeley.com.sleepycat.je.tree.LN this;
        boolean isInsert, isTransactional, $z0, $z1;
        java.lang.AssertionError $r0;
        berkeley.com.sleepycat.je.log.LogEntryType $r1, $r2, $r3;

        this := @this: berkeley.com.sleepycat.je.tree.LN;

        isInsert := @parameter0: boolean;

        isTransactional := @parameter1: boolean;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.LN: boolean isDeleted()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label4;

        $z1 = <berkeley.com.sleepycat.je.tree.LN: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isInsert);

        if isInsert == 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isTransactional);

        if isTransactional == 0 goto label2;

        $r1 = <berkeley.com.sleepycat.je.log.LogEntryType: berkeley.com.sleepycat.je.log.LogEntryType LOG_DEL_LN_TRANSACTIONAL>;

        goto label3;

     label2:
        $r1 = <berkeley.com.sleepycat.je.log.LogEntryType: berkeley.com.sleepycat.je.log.LogEntryType LOG_DEL_LN>;

     label3:
        return $r1;

     label4:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isInsert);

        if isInsert == 0 goto label7;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isTransactional);

        if isTransactional == 0 goto label5;

        $r2 = <berkeley.com.sleepycat.je.log.LogEntryType: berkeley.com.sleepycat.je.log.LogEntryType LOG_INS_LN_TRANSACTIONAL>;

        goto label6;

     label5:
        $r2 = <berkeley.com.sleepycat.je.log.LogEntryType: berkeley.com.sleepycat.je.log.LogEntryType LOG_INS_LN>;

     label6:
        return $r2;

     label7:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isTransactional);

        if isTransactional == 0 goto label8;

        $r3 = <berkeley.com.sleepycat.je.log.LogEntryType: berkeley.com.sleepycat.je.log.LogEntryType LOG_UPD_LN_TRANSACTIONAL>;

        goto label9;

     label8:
        $r3 = <berkeley.com.sleepycat.je.log.LogEntryType: berkeley.com.sleepycat.je.log.LogEntryType LOG_UPD_LN>;

     label9:
        return $r3;
    }

    public static void setEntry(berkeley.com.sleepycat.je.DatabaseEntry, berkeley.com.sleepycat.je.DatabaseEntry)
    {
        berkeley.com.sleepycat.je.DatabaseEntry dest, src;
        byte[] srcBytes, $r0, newdata#31;
        boolean partial;
        int off, $i0, $i1, len#14, $i2, $i3, $i4, $i5, $i6;

        dest := @parameter0: berkeley.com.sleepycat.je.DatabaseEntry;

        src := @parameter1: berkeley.com.sleepycat.je.DatabaseEntry;

        $r0 = virtualinvoke src.<berkeley.com.sleepycat.je.DatabaseEntry: byte[] getData()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label10;

        srcBytes = virtualinvoke src.<berkeley.com.sleepycat.je.DatabaseEntry: byte[] getData()>();

        partial = virtualinvoke dest.<berkeley.com.sleepycat.je.DatabaseEntry: boolean getPartial()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(partial);

        if partial == 0 goto label01;

        $i0 = virtualinvoke dest.<berkeley.com.sleepycat.je.DatabaseEntry: int getPartialOffset()>();

        goto label02;

     label01:
        $i0 = 0;

     label02:
        off = $i0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(partial);

        if partial == 0 goto label03;

        $i1 = virtualinvoke dest.<berkeley.com.sleepycat.je.DatabaseEntry: int getPartialLength()>();

        goto label04;

     label03:
        $i1 = lengthof srcBytes;

     label04:
        len#14 = $i1;

        $i2 = off + len#14;

        $i3 = lengthof srcBytes;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i2 <= $i3 goto label07;

        $i4 = lengthof srcBytes;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(off);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if off <= $i4 goto label05;

        $i5 = 0;

        goto label06;

     label05:
        $i6 = lengthof srcBytes;

        $i5 = $i6 - off;

     label06:
        len#14 = $i5;

     label07:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len#14);

        if len#14 != 0 goto label08;

        newdata#31 = <berkeley.com.sleepycat.je.log.LogUtils: byte[] ZERO_LENGTH_BYTE_ARRAY>;

        goto label09;

     label08:
        newdata#31 = newarray (byte)[len#14];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(srcBytes, off, newdata#31, 0, len#14);

     label09:
        virtualinvoke dest.<berkeley.com.sleepycat.je.DatabaseEntry: void setData(byte[])>(newdata#31);

        virtualinvoke dest.<berkeley.com.sleepycat.je.DatabaseEntry: void setOffset(int)>(0);

        virtualinvoke dest.<berkeley.com.sleepycat.je.DatabaseEntry: void setSize(int)>(len#14);

        goto label11;

     label10:
        virtualinvoke dest.<berkeley.com.sleepycat.je.DatabaseEntry: void setData(byte[])>(null);

        virtualinvoke dest.<berkeley.com.sleepycat.je.DatabaseEntry: void setOffset(int)>(0);

        virtualinvoke dest.<berkeley.com.sleepycat.je.DatabaseEntry: void setSize(int)>(0);

     label11:
        return;
    }

    public static berkeley.com.sleepycat.je.tree.LN makeLN(berkeley.com.sleepycat.je.dbi.EnvironmentImpl, berkeley.com.sleepycat.je.DatabaseEntry)
    {
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        berkeley.com.sleepycat.je.DatabaseEntry dbt;
        boolean $z0;
        berkeley.com.sleepycat.je.tree.VersionedLN $r0;
        berkeley.com.sleepycat.je.tree.LN $r1;

        envImpl := @parameter0: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        dbt := @parameter1: berkeley.com.sleepycat.je.DatabaseEntry;

        $z0 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean getPreserveVLSN()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r0 = new berkeley.com.sleepycat.je.tree.VersionedLN;

        specialinvoke $r0.<berkeley.com.sleepycat.je.tree.VersionedLN: void <init>(berkeley.com.sleepycat.je.DatabaseEntry)>(dbt);

        return $r0;

     label1:
        $r1 = new berkeley.com.sleepycat.je.tree.LN;

        specialinvoke $r1.<berkeley.com.sleepycat.je.tree.LN: void <init>(berkeley.com.sleepycat.je.DatabaseEntry)>(dbt);

        return $r1;
    }

    void <init>(berkeley.com.sleepycat.je.DatabaseEntry)
    {
        berkeley.com.sleepycat.je.tree.LN this;
        berkeley.com.sleepycat.je.DatabaseEntry dbt;
        byte[] dat;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        this := @this: berkeley.com.sleepycat.je.tree.LN;

        dbt := @parameter0: berkeley.com.sleepycat.je.DatabaseEntry;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.Node: void <init>()>();

        dat = virtualinvoke dbt.<berkeley.com.sleepycat.je.DatabaseEntry: byte[] getData()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dat);

        if dat != null goto label1;

        this.<berkeley.com.sleepycat.je.tree.LN: byte[] data> = null;

        goto label3;

     label1:
        $z0 = virtualinvoke dbt.<berkeley.com.sleepycat.je.DatabaseEntry: boolean getPartial()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke dbt.<berkeley.com.sleepycat.je.DatabaseEntry: int getOffset()>();

        $i1 = virtualinvoke dbt.<berkeley.com.sleepycat.je.DatabaseEntry: int getPartialOffset()>();

        $i2 = virtualinvoke dbt.<berkeley.com.sleepycat.je.DatabaseEntry: int getSize()>();

        $i3 = $i1 + $i2;

        $i4 = virtualinvoke dbt.<berkeley.com.sleepycat.je.DatabaseEntry: int getPartialOffset()>();

        $i5 = virtualinvoke dbt.<berkeley.com.sleepycat.je.DatabaseEntry: int getSize()>();

        specialinvoke this.<berkeley.com.sleepycat.je.tree.LN: void init(byte[],int,int,int,int)>(dat, $i0, $i3, $i4, $i5);

        goto label3;

     label2:
        $i6 = virtualinvoke dbt.<berkeley.com.sleepycat.je.DatabaseEntry: int getOffset()>();

        $i7 = virtualinvoke dbt.<berkeley.com.sleepycat.je.DatabaseEntry: int getSize()>();

        specialinvoke this.<berkeley.com.sleepycat.je.tree.LN: void init(byte[],int,int)>(dat, $i6, $i7);

     label3:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.LN: void setDirty()>();

        return;
    }

    private void init(byte[], int, int, int, int)
    {
        berkeley.com.sleepycat.je.tree.LN this;
        byte[] data, $r0, $r1, $r2;
        int off, len, doff, dlen;

        this := @this: berkeley.com.sleepycat.je.tree.LN;

        data := @parameter0: byte[];

        off := @parameter1: int;

        len := @parameter2: int;

        doff := @parameter3: int;

        dlen := @parameter4: int;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len);

        if len != 0 goto label1;

        $r0 = <berkeley.com.sleepycat.je.log.LogUtils: byte[] ZERO_LENGTH_BYTE_ARRAY>;

        this.<berkeley.com.sleepycat.je.tree.LN: byte[] data> = $r0;

        goto label2;

     label1:
        $r1 = newarray (byte)[len];

        this.<berkeley.com.sleepycat.je.tree.LN: byte[] data> = $r1;

        $r2 = this.<berkeley.com.sleepycat.je.tree.LN: byte[] data>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(data, off, $r2, doff, dlen);

     label2:
        return;
    }

    private void init(byte[], int, int)
    {
        berkeley.com.sleepycat.je.tree.LN this;
        byte[] data;
        int off, len;

        this := @this: berkeley.com.sleepycat.je.tree.LN;

        data := @parameter0: byte[];

        off := @parameter1: int;

        len := @parameter2: int;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.LN: void init(byte[],int,int,int,int)>(data, off, len, 0, len);

        return;
    }

    public void setVLSNSequence(long)
    {
        berkeley.com.sleepycat.je.tree.LN this;
        long seq;

        this := @this: berkeley.com.sleepycat.je.tree.LN;

        seq := @parameter0: long;

        return;
    }

    public void postFetchInit(berkeley.com.sleepycat.je.dbi.DatabaseImpl, long)
    {
        berkeley.com.sleepycat.je.tree.LN this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;
        long sourceLsn;

        this := @this: berkeley.com.sleepycat.je.tree.LN;

        db := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        sourceLsn := @parameter1: long;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.Node: void postFetchInit(berkeley.com.sleepycat.je.dbi.DatabaseImpl,long)>(db, sourceLsn);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.LN: void setFetchedCold(boolean)>(1);

        return;
    }

    public boolean isLN()
    {
        berkeley.com.sleepycat.je.tree.LN this;

        this := @this: berkeley.com.sleepycat.je.tree.LN;

        return 1;
    }

    void incFetchStats(berkeley.com.sleepycat.je.dbi.EnvironmentImpl, boolean)
    {
        berkeley.com.sleepycat.je.tree.LN this;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        boolean isMiss;
        berkeley.com.sleepycat.je.evictor.Evictor $r0;

        this := @this: berkeley.com.sleepycat.je.tree.LN;

        envImpl := @parameter0: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        isMiss := @parameter1: boolean;

        $r0 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.evictor.Evictor getEvictor()>();

        virtualinvoke $r0.<berkeley.com.sleepycat.je.evictor.Evictor: void incLNFetchStats(boolean)>(isMiss);

        return;
    }

    public void setFetchedCold(boolean)
    {
        berkeley.com.sleepycat.je.tree.LN this;
        boolean val;
        int $i0, $i1, $i2, $i3;

        this := @this: berkeley.com.sleepycat.je.tree.LN;

        val := @parameter0: boolean;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(val);

        if val == 0 goto label1;

        $i0 = this.<berkeley.com.sleepycat.je.tree.LN: int flags>;

        $i1 = $i0 | 1073741824;

        this.<berkeley.com.sleepycat.je.tree.LN: int flags> = $i1;

        goto label2;

     label1:
        $i2 = this.<berkeley.com.sleepycat.je.tree.LN: int flags>;

        $i3 = $i2 & -1073741825;

        this.<berkeley.com.sleepycat.je.tree.LN: int flags> = $i3;

     label2:
        return;
    }

    public boolean getFetchedCold()
    {
        berkeley.com.sleepycat.je.tree.LN this;
        int $i0, $i1;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.tree.LN;

        $i0 = this.<berkeley.com.sleepycat.je.tree.LN: int flags>;

        $i1 = $i0 & 1073741824;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void writeToLog(java.nio.ByteBuffer, int, boolean)
    {
        berkeley.com.sleepycat.je.tree.LN this;
        java.nio.ByteBuffer logBuffer;
        int logVersion, $i0;
        boolean forReplication, $z0;
        byte[] $r0, $r1;

        this := @this: berkeley.com.sleepycat.je.tree.LN;

        logBuffer := @parameter0: java.nio.ByteBuffer;

        logVersion := @parameter1: int;

        forReplication := @parameter2: boolean;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.LN: boolean isDeleted()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: void writePackedInt(java.nio.ByteBuffer,int)>(logBuffer, -1);

        goto label2;

     label1:
        $r0 = this.<berkeley.com.sleepycat.je.tree.LN: byte[] data>;

        $i0 = lengthof $r0;

        staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: void writePackedInt(java.nio.ByteBuffer,int)>(logBuffer, $i0);

        $r1 = this.<berkeley.com.sleepycat.je.tree.LN: byte[] data>;

        staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: void writeBytesNoLength(java.nio.ByteBuffer,byte[])>(logBuffer, $r1);

     label2:
        return;
    }

    public int getLogSize(int, boolean)
    {
        berkeley.com.sleepycat.je.tree.LN this;
        int logVersion, $i0, $i1;
        boolean forReplication, $z0;
        byte[] $r1;

        this := @this: berkeley.com.sleepycat.je.tree.LN;

        logVersion := @parameter0: int;

        forReplication := @parameter1: boolean;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.LN: boolean isDeleted()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $i0 = -1;

        goto label2;

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.tree.LN: byte[] data>;

        $i0 = lengthof $r1;

     label2:
        $i1 = specialinvoke this.<berkeley.com.sleepycat.je.tree.LN: int calcLogSize(int)>($i0);

        return $i1;
    }

    private int calcLogSize(int)
    {
        berkeley.com.sleepycat.je.tree.LN this;
        int dataLen, $i0, size#8, $i1, size#13;
        byte size#2;

        this := @this: berkeley.com.sleepycat.je.tree.LN;

        dataLen := @parameter0: int;

        size#2 = 0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dataLen);

        if dataLen >= 0 goto label1;

        $i0 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int getPackedIntLogSize(int)>(-1);

        size#8 = size#2 + $i0;

        goto label2;

     label1:
        $i1 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int getPackedIntLogSize(int)>(dataLen);

        size#13 = size#2 + $i1;

        size#8 = size#13 + dataLen;

     label2:
        return size#8;
    }

    public berkeley.com.sleepycat.je.log.LogEntryType getGenericLogType()
    {
        berkeley.com.sleepycat.je.tree.LN this;
        berkeley.com.sleepycat.je.log.LogEntryType $r0;

        this := @this: berkeley.com.sleepycat.je.tree.LN;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.LN: berkeley.com.sleepycat.je.log.LogEntryType getLogType(boolean,boolean)>(1, 0);

        return $r0;
    }

    public void modify(byte[])
    {
        berkeley.com.sleepycat.je.tree.LN this;
        byte[] newData;

        this := @this: berkeley.com.sleepycat.je.tree.LN;

        newData := @parameter0: byte[];

        this.<berkeley.com.sleepycat.je.tree.LN: byte[] data> = newData;

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.LN: void setDirty()>();

        return;
    }

    public java.lang.String dumpString(int, boolean)
    {
        berkeley.com.sleepycat.je.tree.LN this;
        int nSpaces, $i0, $i1;
        boolean dumpTags;
        java.lang.StringBuilder self, $r0;
        java.lang.String $r1, $r3, $r6, $r10, $r15, $r19, $r21, $r23;
        byte[] $r9, $r14;
        berkeley.com.sleepycat.je.tree.Key$DumpType $r13;

        this := @this: berkeley.com.sleepycat.je.tree.LN;

        nSpaces := @parameter0: int;

        dumpTags := @parameter1: boolean;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        self = $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dumpTags);

        if dumpTags == 0 goto label1;

        $r1 = staticinvoke <berkeley.com.sleepycat.je.tree.TreeUtils: java.lang.String indent(int)>(nSpaces);

        virtualinvoke self.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.LN: java.lang.String beginTag()>();

        virtualinvoke self.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke self.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

     label1:
        $i0 = nSpaces + 2;

        $r6 = specialinvoke this.<berkeley.com.sleepycat.je.tree.Node: java.lang.String dumpString(int,boolean)>($i0, 1);

        virtualinvoke self.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke self.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r9 = this.<berkeley.com.sleepycat.je.tree.LN: byte[] data>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r9);

        if $r9 == null goto label2;

        $i1 = nSpaces + 2;

        $r10 = staticinvoke <berkeley.com.sleepycat.je.tree.TreeUtils: java.lang.String indent(int)>($i1);

        virtualinvoke self.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke self.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<data>");

        $r13 = <berkeley.com.sleepycat.je.tree.Key: berkeley.com.sleepycat.je.tree.Key$DumpType DUMP_TYPE>;

        $r14 = this.<berkeley.com.sleepycat.je.tree.LN: byte[] data>;

        $r15 = virtualinvoke $r13.<berkeley.com.sleepycat.je.tree.Key$DumpType: java.lang.String dumpByteArray(byte[])>($r14);

        virtualinvoke self.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        virtualinvoke self.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</data>");

        virtualinvoke self.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dumpTags);

        if dumpTags == 0 goto label3;

        $r19 = staticinvoke <berkeley.com.sleepycat.je.tree.TreeUtils: java.lang.String indent(int)>(nSpaces);

        virtualinvoke self.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.LN: java.lang.String endTag()>();

        virtualinvoke self.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

     label3:
        $r23 = virtualinvoke self.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r23;
    }

    public java.lang.String beginTag()
    {
        berkeley.com.sleepycat.je.tree.LN this;

        this := @this: berkeley.com.sleepycat.je.tree.LN;

        return "<ln>";
    }

    public java.lang.String endTag()
    {
        berkeley.com.sleepycat.je.tree.LN this;

        this := @this: berkeley.com.sleepycat.je.tree.LN;

        return "</ln>";
    }

    void rebuildINList(berkeley.com.sleepycat.je.dbi.INList)
    {
        berkeley.com.sleepycat.je.tree.LN this;
        berkeley.com.sleepycat.je.dbi.INList inList;

        this := @this: berkeley.com.sleepycat.je.tree.LN;

        inList := @parameter0: berkeley.com.sleepycat.je.dbi.INList;

        return;
    }

    public boolean isDirty()
    {
        berkeley.com.sleepycat.je.tree.LN this;
        int $i0, $i1;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.tree.LN;

        $i0 = this.<berkeley.com.sleepycat.je.tree.LN: int flags>;

        $i1 = $i0 & -2147483648;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void releaseMemoryBudget()
    {
        berkeley.com.sleepycat.je.tree.LN this;

        this := @this: berkeley.com.sleepycat.je.tree.LN;

        return;
    }

    boolean isEvictable(long) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.tree.LN this;
        long lsn;

        this := @this: berkeley.com.sleepycat.je.tree.LN;

        lsn := @parameter0: long;

        return 1;
    }

    public berkeley.com.sleepycat.je.log.LogItem log(berkeley.com.sleepycat.je.dbi.EnvironmentImpl, berkeley.com.sleepycat.je.dbi.DatabaseImpl, berkeley.com.sleepycat.je.txn.Locker, berkeley.com.sleepycat.je.txn.WriteLockInfo, boolean, byte[], int, boolean, boolean, long, int, boolean, boolean, berkeley.com.sleepycat.je.log.ReplicationContext) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.tree.LN this;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        berkeley.com.sleepycat.je.txn.Locker locker;
        berkeley.com.sleepycat.je.txn.WriteLockInfo writeLockInfo;
        boolean newEmbeddedLN, newExpirationInHours, currEmbeddedLN, isInsertion, backgroundIO;
        byte[] newKey;
        int newExpiration, currSize;
        long currLsn;
        berkeley.com.sleepycat.je.log.ReplicationContext repContext;
        berkeley.com.sleepycat.je.log.LogItem $r0;

        this := @this: berkeley.com.sleepycat.je.tree.LN;

        envImpl := @parameter0: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        dbImpl := @parameter1: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        locker := @parameter2: berkeley.com.sleepycat.je.txn.Locker;

        writeLockInfo := @parameter3: berkeley.com.sleepycat.je.txn.WriteLockInfo;

        newEmbeddedLN := @parameter4: boolean;

        newKey := @parameter5: byte[];

        newExpiration := @parameter6: int;

        newExpirationInHours := @parameter7: boolean;

        currEmbeddedLN := @parameter8: boolean;

        currLsn := @parameter9: long;

        currSize := @parameter10: int;

        isInsertion := @parameter11: boolean;

        backgroundIO := @parameter12: boolean;

        repContext := @parameter13: berkeley.com.sleepycat.je.log.ReplicationContext;

        $r0 = specialinvoke this.<berkeley.com.sleepycat.je.tree.LN: berkeley.com.sleepycat.je.log.LogItem logInternal(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.dbi.DatabaseImpl,berkeley.com.sleepycat.je.txn.Locker,berkeley.com.sleepycat.je.txn.WriteLockInfo,boolean,byte[],int,boolean,boolean,long,int,boolean,boolean,berkeley.com.sleepycat.je.log.ReplicationContext)>(envImpl, dbImpl, locker, writeLockInfo, newEmbeddedLN, newKey, newExpiration, newExpirationInHours, currEmbeddedLN, currLsn, currSize, isInsertion, backgroundIO, repContext);

        return $r0;
    }


