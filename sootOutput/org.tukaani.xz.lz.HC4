    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "org/tukaani/xz/lz/HC4";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.tukaani.xz.lz.HC4: boolean $assertionsDisabled> = $z1;

        return;
    }

    void <init>(int, int, int, int, int, int)
    {
        org.tukaani.xz.lz.HC4 this;
        int dictSize, beforeSizeMin, readAheadMax, niceLen, matchLenMax, depthLimit, $i0, $i1, $i2, $i3, $i4, $i5;
        org.tukaani.xz.lz.Hash234 $r0;
        int[] $r1;
        org.tukaani.xz.lz.Matches $r2;

        this := @this: org.tukaani.xz.lz.HC4;

        dictSize := @parameter0: int;

        beforeSizeMin := @parameter1: int;

        readAheadMax := @parameter2: int;

        niceLen := @parameter3: int;

        matchLenMax := @parameter4: int;

        depthLimit := @parameter5: int;

        specialinvoke this.<org.tukaani.xz.lz.LZEncoder: void <init>(int,int,int,int,int)>(dictSize, beforeSizeMin, readAheadMax, niceLen, matchLenMax);

        this.<org.tukaani.xz.lz.HC4: int cyclicPos> = -1;

        $r0 = new org.tukaani.xz.lz.Hash234;

        specialinvoke $r0.<org.tukaani.xz.lz.Hash234: void <init>(int)>(dictSize);

        this.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Hash234 hash> = $r0;

        $i0 = dictSize + 1;

        this.<org.tukaani.xz.lz.HC4: int cyclicSize> = $i0;

        $i1 = this.<org.tukaani.xz.lz.HC4: int cyclicSize>;

        $r1 = newarray (int)[$i1];

        this.<org.tukaani.xz.lz.HC4: int[] chain> = $r1;

        $i2 = this.<org.tukaani.xz.lz.HC4: int cyclicSize>;

        this.<org.tukaani.xz.lz.HC4: int lzPos> = $i2;

        $r2 = new org.tukaani.xz.lz.Matches;

        $i3 = niceLen - 1;

        specialinvoke $r2.<org.tukaani.xz.lz.Matches: void <init>(int)>($i3);

        this.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Matches matches> = $r2;

        if depthLimit <= 0 goto label1;

        $i4 = depthLimit;

        goto label2;

     label1:
        $i5 = niceLen / 4;

        $i4 = 4 + $i5;

     label2:
        this.<org.tukaani.xz.lz.HC4: int depthLimit> = $i4;

        return;
    }

    public void skip(int)
    {
        org.tukaani.xz.lz.HC4 this;
        int len#1, $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0;
        java.lang.AssertionError $r0;
        org.tukaani.xz.lz.Hash234 $r1, $r4, $r5;
        byte[] $r2;
        int[] $r3;

        this := @this: org.tukaani.xz.lz.HC4;

        len#1 := @parameter0: int;

        $z0 = <org.tukaani.xz.lz.HC4: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if len#1 >= 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $i0 = len#1;

        len#1 = len#1 + -1;

        if $i0 <= 0 goto label2;

        $i1 = specialinvoke this.<org.tukaani.xz.lz.HC4: int movePos()>();

        if $i1 == 0 goto label1;

        $r1 = this.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Hash234 hash>;

        $r2 = this.<org.tukaani.xz.lz.HC4: byte[] buf>;

        $i2 = this.<org.tukaani.xz.lz.HC4: int readPos>;

        virtualinvoke $r1.<org.tukaani.xz.lz.Hash234: void calcHashes(byte[],int)>($r2, $i2);

        $r3 = this.<org.tukaani.xz.lz.HC4: int[] chain>;

        $i3 = this.<org.tukaani.xz.lz.HC4: int cyclicPos>;

        $r4 = this.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Hash234 hash>;

        $i4 = virtualinvoke $r4.<org.tukaani.xz.lz.Hash234: int getHash4Pos()>();

        $r3[$i3] = $i4;

        $r5 = this.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Hash234 hash>;

        $i5 = this.<org.tukaani.xz.lz.HC4: int lzPos>;

        virtualinvoke $r5.<org.tukaani.xz.lz.Hash234: void updateTables(int)>($i5);

        goto label1;

     label2:
        return;
    }

    private int movePos()
    {
        org.tukaani.xz.lz.HC4 this;
        int avail, normalizationOffset, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.tukaani.xz.lz.Hash234 $r1;
        int[] $r2;

        this := @this: org.tukaani.xz.lz.HC4;

        avail = virtualinvoke this.<org.tukaani.xz.lz.HC4: int movePos(int,int)>(4, 4);

        if avail == 0 goto label2;

        $i0 = this.<org.tukaani.xz.lz.HC4: int lzPos>;

        $i1 = $i0 + 1;

        this.<org.tukaani.xz.lz.HC4: int lzPos> = $i1;

        if $i1 != 2147483647 goto label1;

        $i2 = this.<org.tukaani.xz.lz.HC4: int cyclicSize>;

        normalizationOffset = 2147483647 - $i2;

        $r1 = this.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Hash234 hash>;

        virtualinvoke $r1.<org.tukaani.xz.lz.Hash234: void normalize(int)>(normalizationOffset);

        $r2 = this.<org.tukaani.xz.lz.HC4: int[] chain>;

        staticinvoke <org.tukaani.xz.lz.HC4: void normalize(int[],int)>($r2, normalizationOffset);

        $i3 = this.<org.tukaani.xz.lz.HC4: int lzPos>;

        $i4 = $i3 - normalizationOffset;

        this.<org.tukaani.xz.lz.HC4: int lzPos> = $i4;

     label1:
        $i5 = this.<org.tukaani.xz.lz.HC4: int cyclicPos>;

        $i6 = $i5 + 1;

        this.<org.tukaani.xz.lz.HC4: int cyclicPos> = $i6;

        $i7 = this.<org.tukaani.xz.lz.HC4: int cyclicSize>;

        if $i6 != $i7 goto label2;

        this.<org.tukaani.xz.lz.HC4: int cyclicPos> = 0;

     label2:
        return avail;
    }

    public org.tukaani.xz.lz.Matches getMatches()
    {
        org.tukaani.xz.lz.HC4 this;
        int avail, delta3, delta, matchLenLimit#6, niceLenLimit#9, $i0, $i1, $i2, delta2#33, $i3, $i4, currentMatch#43, $i5, $i6, lenBest#54, $i7, $i8, $i9, $i11, $i13, $i14, $i15, $i16, $i18, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i28, $i29, $i31, $i32, depth#158, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i45, $i46, $i48, $i49, $i51, len#211, $i53, $i54, $i55, $i57, $i58, $i60, $i61, $i62, $i63, $i64;
        org.tukaani.xz.lz.Matches $r0, $r1, $r11, $r13, $r15, $r18, $r20, $r21, $r24, $r26, $r27, $r28, $r36, $r38, $r39, $r41, $r42, $r43;
        org.tukaani.xz.lz.Hash234 $r2, $r4, $r5, $r6, $r7;
        byte[] $r3, $r9, $r10, $r16, $r17, $r22, $r23, $r30, $r31, $r32, $r33, $r34, $r35;
        int[] $r8, $r12, $r14, $r19, $r25, $r29, $r37, $r40;
        byte $b10, $b12, $b17, $b19, $b27, $b30, $b44, $b47, $b50, $b52, $b56, $b59;

        this := @this: org.tukaani.xz.lz.HC4;

        $r0 = this.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Matches matches>;

        $r0.<org.tukaani.xz.lz.Matches: int count> = 0;

        matchLenLimit#6 = this.<org.tukaani.xz.lz.HC4: int matchLenMax>;

        niceLenLimit#9 = this.<org.tukaani.xz.lz.HC4: int niceLen>;

        avail = specialinvoke this.<org.tukaani.xz.lz.HC4: int movePos()>();

        if avail >= matchLenLimit#6 goto label02;

        if avail != 0 goto label01;

        $r1 = this.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Matches matches>;

        return $r1;

     label01:
        matchLenLimit#6 = avail;

        if niceLenLimit#9 <= avail goto label02;

        niceLenLimit#9 = avail;

     label02:
        $r2 = this.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Hash234 hash>;

        $r3 = this.<org.tukaani.xz.lz.HC4: byte[] buf>;

        $i0 = this.<org.tukaani.xz.lz.HC4: int readPos>;

        virtualinvoke $r2.<org.tukaani.xz.lz.Hash234: void calcHashes(byte[],int)>($r3, $i0);

        $i1 = this.<org.tukaani.xz.lz.HC4: int lzPos>;

        $r4 = this.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Hash234 hash>;

        $i2 = virtualinvoke $r4.<org.tukaani.xz.lz.Hash234: int getHash2Pos()>();

        delta2#33 = $i1 - $i2;

        $i3 = this.<org.tukaani.xz.lz.HC4: int lzPos>;

        $r5 = this.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Hash234 hash>;

        $i4 = virtualinvoke $r5.<org.tukaani.xz.lz.Hash234: int getHash3Pos()>();

        delta3 = $i3 - $i4;

        $r6 = this.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Hash234 hash>;

        currentMatch#43 = virtualinvoke $r6.<org.tukaani.xz.lz.Hash234: int getHash4Pos()>();

        $r7 = this.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Hash234 hash>;

        $i5 = this.<org.tukaani.xz.lz.HC4: int lzPos>;

        virtualinvoke $r7.<org.tukaani.xz.lz.Hash234: void updateTables(int)>($i5);

        $r8 = this.<org.tukaani.xz.lz.HC4: int[] chain>;

        $i6 = this.<org.tukaani.xz.lz.HC4: int cyclicPos>;

        $r8[$i6] = currentMatch#43;

        lenBest#54 = 0;

        $i7 = this.<org.tukaani.xz.lz.HC4: int cyclicSize>;

        if delta2#33 >= $i7 goto label03;

        $r9 = this.<org.tukaani.xz.lz.HC4: byte[] buf>;

        $i8 = this.<org.tukaani.xz.lz.HC4: int readPos>;

        $i9 = $i8 - delta2#33;

        $b10 = $r9[$i9];

        $r10 = this.<org.tukaani.xz.lz.HC4: byte[] buf>;

        $i11 = this.<org.tukaani.xz.lz.HC4: int readPos>;

        $b12 = $r10[$i11];

        if $b10 != $b12 goto label03;

        lenBest#54 = 2;

        $r11 = this.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Matches matches>;

        $r12 = $r11.<org.tukaani.xz.lz.Matches: int[] len>;

        $r12[0] = 2;

        $r13 = this.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Matches matches>;

        $r14 = $r13.<org.tukaani.xz.lz.Matches: int[] dist>;

        $i13 = delta2#33 - 1;

        $r14[0] = $i13;

        $r15 = this.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Matches matches>;

        $r15.<org.tukaani.xz.lz.Matches: int count> = 1;

     label03:
        if delta2#33 == delta3 goto label04;

        $i14 = this.<org.tukaani.xz.lz.HC4: int cyclicSize>;

        if delta3 >= $i14 goto label04;

        $r16 = this.<org.tukaani.xz.lz.HC4: byte[] buf>;

        $i15 = this.<org.tukaani.xz.lz.HC4: int readPos>;

        $i16 = $i15 - delta3;

        $b17 = $r16[$i16];

        $r17 = this.<org.tukaani.xz.lz.HC4: byte[] buf>;

        $i18 = this.<org.tukaani.xz.lz.HC4: int readPos>;

        $b19 = $r17[$i18];

        if $b17 != $b19 goto label04;

        lenBest#54 = 3;

        $r18 = this.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Matches matches>;

        $r19 = $r18.<org.tukaani.xz.lz.Matches: int[] dist>;

        $r20 = this.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Matches matches>;

        $i20 = $r20.<org.tukaani.xz.lz.Matches: int count>;

        $i21 = $i20 + 1;

        $r20.<org.tukaani.xz.lz.Matches: int count> = $i21;

        $i22 = delta3 - 1;

        $r19[$i20] = $i22;

        delta2#33 = delta3;

     label04:
        $r21 = this.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Matches matches>;

        $i23 = $r21.<org.tukaani.xz.lz.Matches: int count>;

        if $i23 <= 0 goto label07;

     label05:
        if lenBest#54 >= matchLenLimit#6 goto label06;

        $r22 = this.<org.tukaani.xz.lz.HC4: byte[] buf>;

        $i24 = this.<org.tukaani.xz.lz.HC4: int readPos>;

        $i25 = $i24 + lenBest#54;

        $i26 = $i25 - delta2#33;

        $b27 = $r22[$i26];

        $r23 = this.<org.tukaani.xz.lz.HC4: byte[] buf>;

        $i28 = this.<org.tukaani.xz.lz.HC4: int readPos>;

        $i29 = $i28 + lenBest#54;

        $b30 = $r23[$i29];

        if $b27 != $b30 goto label06;

        lenBest#54 = lenBest#54 + 1;

        goto label05;

     label06:
        $r24 = this.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Matches matches>;

        $r25 = $r24.<org.tukaani.xz.lz.Matches: int[] len>;

        $r26 = this.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Matches matches>;

        $i31 = $r26.<org.tukaani.xz.lz.Matches: int count>;

        $i32 = $i31 - 1;

        $r25[$i32] = lenBest#54;

        if lenBest#54 < niceLenLimit#9 goto label07;

        $r27 = this.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Matches matches>;

        return $r27;

     label07:
        if lenBest#54 >= 3 goto label08;

        lenBest#54 = 3;

     label08:
        depth#158 = this.<org.tukaani.xz.lz.HC4: int depthLimit>;

     label09:
        $i33 = this.<org.tukaani.xz.lz.HC4: int lzPos>;

        delta = $i33 - currentMatch#43;

        $i34 = depth#158;

        depth#158 = depth#158 + -1;

        if $i34 == 0 goto label10;

        $i35 = this.<org.tukaani.xz.lz.HC4: int cyclicSize>;

        if delta < $i35 goto label11;

     label10:
        $r28 = this.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Matches matches>;

        return $r28;

     label11:
        $r29 = this.<org.tukaani.xz.lz.HC4: int[] chain>;

        $i36 = this.<org.tukaani.xz.lz.HC4: int cyclicPos>;

        $i37 = $i36 - delta;

        $i38 = this.<org.tukaani.xz.lz.HC4: int cyclicPos>;

        if delta <= $i38 goto label12;

        $i39 = this.<org.tukaani.xz.lz.HC4: int cyclicSize>;

        goto label13;

     label12:
        $i39 = 0;

     label13:
        $i40 = $i37 + $i39;

        currentMatch#43 = $r29[$i40];

        $r30 = this.<org.tukaani.xz.lz.HC4: byte[] buf>;

        $i41 = this.<org.tukaani.xz.lz.HC4: int readPos>;

        $i42 = $i41 + lenBest#54;

        $i43 = $i42 - delta;

        $b44 = $r30[$i43];

        $r31 = this.<org.tukaani.xz.lz.HC4: byte[] buf>;

        $i45 = this.<org.tukaani.xz.lz.HC4: int readPos>;

        $i46 = $i45 + lenBest#54;

        $b47 = $r31[$i46];

        if $b44 != $b47 goto label16;

        $r32 = this.<org.tukaani.xz.lz.HC4: byte[] buf>;

        $i48 = this.<org.tukaani.xz.lz.HC4: int readPos>;

        $i49 = $i48 - delta;

        $b50 = $r32[$i49];

        $r33 = this.<org.tukaani.xz.lz.HC4: byte[] buf>;

        $i51 = this.<org.tukaani.xz.lz.HC4: int readPos>;

        $b52 = $r33[$i51];

        if $b50 != $b52 goto label16;

        len#211 = 0;

     label14:
        len#211 = len#211 + 1;

        if len#211 >= matchLenLimit#6 goto label15;

        $r34 = this.<org.tukaani.xz.lz.HC4: byte[] buf>;

        $i53 = this.<org.tukaani.xz.lz.HC4: int readPos>;

        $i54 = $i53 + len#211;

        $i55 = $i54 - delta;

        $b56 = $r34[$i55];

        $r35 = this.<org.tukaani.xz.lz.HC4: byte[] buf>;

        $i57 = this.<org.tukaani.xz.lz.HC4: int readPos>;

        $i58 = $i57 + len#211;

        $b59 = $r35[$i58];

        if $b56 == $b59 goto label14;

        goto label15;

     label15:
        if len#211 <= lenBest#54 goto label16;

        lenBest#54 = len#211;

        $r36 = this.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Matches matches>;

        $r37 = $r36.<org.tukaani.xz.lz.Matches: int[] len>;

        $r38 = this.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Matches matches>;

        $i60 = $r38.<org.tukaani.xz.lz.Matches: int count>;

        $r37[$i60] = len#211;

        $r39 = this.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Matches matches>;

        $r40 = $r39.<org.tukaani.xz.lz.Matches: int[] dist>;

        $r41 = this.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Matches matches>;

        $i61 = $r41.<org.tukaani.xz.lz.Matches: int count>;

        $i62 = delta - 1;

        $r40[$i61] = $i62;

        $r42 = this.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Matches matches>;

        $i63 = $r42.<org.tukaani.xz.lz.Matches: int count>;

        $i64 = $i63 + 1;

        $r42.<org.tukaani.xz.lz.Matches: int count> = $i64;

        if len#211 < niceLenLimit#9 goto label16;

        $r43 = this.<org.tukaani.xz.lz.HC4: org.tukaani.xz.lz.Matches matches>;

        return $r43;

     label16:
        goto label09;
    }


