    public static berkeley.com.sleepycat.je.txn.ThreadLocker createThreadLocker(berkeley.com.sleepycat.je.dbi.EnvironmentImpl, boolean) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl env;
        boolean replicated, $z0;
        berkeley.com.sleepycat.je.txn.ThreadLocker $r0;

        env := @parameter0: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        replicated := @parameter1: boolean;

        $z0 = virtualinvoke env.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean isReplicated()>();

        if $z0 == 0 goto label1;

        if replicated == 0 goto label1;

        $r0 = virtualinvoke env.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.txn.ThreadLocker createRepThreadLocker()>();

        goto label2;

     label1:
        $r0 = new berkeley.com.sleepycat.je.txn.ThreadLocker;

        specialinvoke $r0.<berkeley.com.sleepycat.je.txn.ThreadLocker: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl)>(env);

     label2:
        return $r0;
    }

    public void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl)
    {
        berkeley.com.sleepycat.je.txn.ThreadLocker this;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl env;
        berkeley.com.sleepycat.je.txn.LockManager $r0;

        this := @this: berkeley.com.sleepycat.je.txn.ThreadLocker;

        env := @parameter0: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        specialinvoke this.<berkeley.com.sleepycat.je.txn.BasicLocker: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl)>(env);

        $r0 = this.<berkeley.com.sleepycat.je.txn.ThreadLocker: berkeley.com.sleepycat.je.txn.LockManager lockManager>;

        virtualinvoke $r0.<berkeley.com.sleepycat.je.txn.LockManager: void registerThreadLocker(berkeley.com.sleepycat.je.txn.ThreadLocker)>(this);

        return;
    }

    public void checkPreempted(berkeley.com.sleepycat.je.txn.Locker) throws berkeley.com.sleepycat.je.OperationFailureException
    {
        berkeley.com.sleepycat.je.txn.ThreadLocker this, locker;
        berkeley.com.sleepycat.je.txn.Locker allowPreemptedLocker;
        java.util.Iterator iter;
        berkeley.com.sleepycat.je.txn.LockManager $r0;
        java.lang.Thread $r1;
        boolean $z0;
        java.lang.Object $r2;

        this := @this: berkeley.com.sleepycat.je.txn.ThreadLocker;

        allowPreemptedLocker := @parameter0: berkeley.com.sleepycat.je.txn.Locker;

        $r0 = this.<berkeley.com.sleepycat.je.txn.ThreadLocker: berkeley.com.sleepycat.je.txn.LockManager lockManager>;

        $r1 = this.<berkeley.com.sleepycat.je.txn.ThreadLocker: java.lang.Thread thread>;

        iter = virtualinvoke $r0.<berkeley.com.sleepycat.je.txn.LockManager: java.util.Iterator getThreadLockers(java.lang.Thread)>($r1);

     label1:
        $z0 = interfaceinvoke iter.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke iter.<java.util.Iterator: java.lang.Object next()>();

        locker = (berkeley.com.sleepycat.je.txn.ThreadLocker) $r2;

        virtualinvoke locker.<berkeley.com.sleepycat.je.txn.ThreadLocker: void throwIfPreempted(berkeley.com.sleepycat.je.txn.Locker)>(allowPreemptedLocker);

        goto label1;

     label2:
        return;
    }

    void close()
    {
        berkeley.com.sleepycat.je.txn.ThreadLocker this;
        berkeley.com.sleepycat.je.txn.LockManager $r0;

        this := @this: berkeley.com.sleepycat.je.txn.ThreadLocker;

        specialinvoke this.<berkeley.com.sleepycat.je.txn.BasicLocker: void close()>();

        $r0 = this.<berkeley.com.sleepycat.je.txn.ThreadLocker: berkeley.com.sleepycat.je.txn.LockManager lockManager>;

        virtualinvoke $r0.<berkeley.com.sleepycat.je.txn.LockManager: void unregisterThreadLocker(berkeley.com.sleepycat.je.txn.ThreadLocker)>(this);

        return;
    }

    public berkeley.com.sleepycat.je.txn.Locker newNonTxnLocker() throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.txn.ThreadLocker this, $r0;

        this := @this: berkeley.com.sleepycat.je.txn.ThreadLocker;

        virtualinvoke this.<berkeley.com.sleepycat.je.txn.ThreadLocker: void checkState(boolean)>(0);

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.txn.ThreadLocker: berkeley.com.sleepycat.je.txn.ThreadLocker newEmptyThreadLockerClone()>();

        return $r0;
    }

    protected synchronized void checkState(boolean)
    {
        berkeley.com.sleepycat.je.txn.ThreadLocker this;
        boolean ignoreCalledByAbort, $z0;
        java.lang.Thread $r0, $r1, $r5, $r8;
        java.lang.IllegalStateException $r2;
        java.lang.StringBuilder $r3, $r4, $r6, $r7, $r9;
        java.lang.String $r10;

        this := @this: berkeley.com.sleepycat.je.txn.ThreadLocker;

        ignoreCalledByAbort := @parameter0: boolean;

        $z0 = this.<berkeley.com.sleepycat.je.txn.ThreadLocker: boolean allowMultithreadedAccess>;

        if $z0 != 0 goto label1;

        $r0 = this.<berkeley.com.sleepycat.je.txn.ThreadLocker: java.lang.Thread thread>;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        if $r0 == $r1 goto label1;

        $r2 = new java.lang.IllegalStateException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non-transactional Cursors may not be used in multiple threads; Cursor was created in ");

        $r5 = this.<berkeley.com.sleepycat.je.txn.ThreadLocker: java.lang.Thread thread>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but used in ");

        $r8 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r2;

     label1:
        return;
    }

    public berkeley.com.sleepycat.je.txn.ThreadLocker newEmptyThreadLockerClone()
    {
        berkeley.com.sleepycat.je.txn.ThreadLocker this, $r0;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r1;

        this := @this: berkeley.com.sleepycat.je.txn.ThreadLocker;

        $r0 = new berkeley.com.sleepycat.je.txn.ThreadLocker;

        $r1 = this.<berkeley.com.sleepycat.je.txn.ThreadLocker: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        specialinvoke $r0.<berkeley.com.sleepycat.je.txn.ThreadLocker: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl)>($r1);

        return $r0;
    }

    public boolean sharesLocksWith(berkeley.com.sleepycat.je.txn.Locker)
    {
        berkeley.com.sleepycat.je.txn.ThreadLocker this;
        berkeley.com.sleepycat.je.txn.Locker other;
        boolean $z0, $z1, $z2;
        java.lang.Thread $r0, $r1;

        this := @this: berkeley.com.sleepycat.je.txn.ThreadLocker;

        other := @parameter0: berkeley.com.sleepycat.je.txn.Locker;

        $z0 = specialinvoke this.<berkeley.com.sleepycat.je.txn.BasicLocker: boolean sharesLocksWith(berkeley.com.sleepycat.je.txn.Locker)>(other);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = other instanceof berkeley.com.sleepycat.je.txn.ThreadLocker;

        if $z1 == 0 goto label4;

        $r0 = this.<berkeley.com.sleepycat.je.txn.ThreadLocker: java.lang.Thread thread>;

        $r1 = other.<berkeley.com.sleepycat.je.txn.Locker: java.lang.Thread thread>;

        if $r0 != $r1 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;

     label4:
        return 0;
    }


