    public static void traceLazily(com.sleepycat.je.dbi.EnvironmentImpl, java.lang.String)
    {
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        java.lang.String message;
        com.sleepycat.je.log.entry.TraceLogEntry $r0;
        com.sleepycat.je.log.Trace $r1;
        boolean $z0;
        com.sleepycat.je.log.LogManager $r2;
        com.sleepycat.je.log.ReplicationContext $r3;

        envImpl := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        message := @parameter1: java.lang.String;

        $z0 = staticinvoke <com.sleepycat.je.log.Trace: boolean isWritePermitted(com.sleepycat.je.dbi.EnvironmentImpl)>(envImpl);

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.log.LogManager getLogManager()>();

        $r0 = new com.sleepycat.je.log.entry.TraceLogEntry;

        $r1 = new com.sleepycat.je.log.Trace;

        specialinvoke $r1.<com.sleepycat.je.log.Trace: void <init>(java.lang.String)>(message);

        specialinvoke $r0.<com.sleepycat.je.log.entry.TraceLogEntry: void <init>(com.sleepycat.je.log.Trace)>($r1);

        $r3 = <com.sleepycat.je.log.ReplicationContext: com.sleepycat.je.log.ReplicationContext NO_REPLICATE>;

        virtualinvoke $r2.<com.sleepycat.je.log.LogManager: void logLazily(com.sleepycat.je.log.entry.LogEntry,com.sleepycat.je.log.ReplicationContext)>($r0, $r3);

     label1:
        return;
    }

    public static void trace(com.sleepycat.je.dbi.EnvironmentImpl, java.lang.String)
    {
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        java.lang.String message;
        com.sleepycat.je.log.Trace $r0;

        envImpl := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        message := @parameter1: java.lang.String;

        $r0 = new com.sleepycat.je.log.Trace;

        specialinvoke $r0.<com.sleepycat.je.log.Trace: void <init>(java.lang.String)>(message);

        staticinvoke <com.sleepycat.je.log.Trace: long trace(com.sleepycat.je.dbi.EnvironmentImpl,com.sleepycat.je.log.Trace)>(envImpl, $r0);

        return;
    }

    private static boolean isWritePermitted(com.sleepycat.je.dbi.EnvironmentImpl)
    {
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        boolean $z0, $z1, $z2;

        envImpl := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        if envImpl == null goto label1;

        $z0 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: boolean isReadOnly()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: boolean mayNotWrite()>();

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: boolean isDbLoggingDisabled()>();

        if $z2 == 0 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public static long trace(com.sleepycat.je.dbi.EnvironmentImpl, com.sleepycat.je.log.Trace)
    {
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        com.sleepycat.je.log.Trace traceMsg;
        com.sleepycat.je.log.entry.TraceLogEntry $r0;
        boolean $z0;
        com.sleepycat.je.log.LogManager $r1;
        com.sleepycat.je.log.ReplicationContext $r2;
        long $l0;

        envImpl := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        traceMsg := @parameter1: com.sleepycat.je.log.Trace;

        $z0 = staticinvoke <com.sleepycat.je.log.Trace: boolean isWritePermitted(com.sleepycat.je.dbi.EnvironmentImpl)>(envImpl);

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.log.LogManager getLogManager()>();

        $r0 = new com.sleepycat.je.log.entry.TraceLogEntry;

        specialinvoke $r0.<com.sleepycat.je.log.entry.TraceLogEntry: void <init>(com.sleepycat.je.log.Trace)>(traceMsg);

        $r2 = <com.sleepycat.je.log.ReplicationContext: com.sleepycat.je.log.ReplicationContext NO_REPLICATE>;

        $l0 = virtualinvoke $r1.<com.sleepycat.je.log.LogManager: long log(com.sleepycat.je.log.entry.LogEntry,com.sleepycat.je.log.ReplicationContext)>($r0, $r2);

        return $l0;

     label1:
        return -1L;
    }

    public void <init>(java.lang.String)
    {
        com.sleepycat.je.log.Trace this;
        java.lang.String msg;
        com.sleepycat.je.utilint.Timestamp $r0;

        this := @this: com.sleepycat.je.log.Trace;

        msg := @parameter0: java.lang.String;

        specialinvoke this.<com.sleepycat.je.log.BasicVersionedWriteLoggable: void <init>()>();

        $r0 = specialinvoke this.<com.sleepycat.je.log.Trace: com.sleepycat.je.utilint.Timestamp getCurrentTimestamp()>();

        this.<com.sleepycat.je.log.Trace: com.sleepycat.je.utilint.Timestamp time> = $r0;

        this.<com.sleepycat.je.log.Trace: java.lang.String msg> = msg;

        return;
    }

    private com.sleepycat.je.utilint.Timestamp getCurrentTimestamp()
    {
        com.sleepycat.je.log.Trace this;
        java.util.Calendar cal;
        com.sleepycat.je.utilint.Timestamp $r0;
        java.util.Date $r1;
        long $l0;

        this := @this: com.sleepycat.je.log.Trace;

        cal = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r0 = new com.sleepycat.je.utilint.Timestamp;

        $r1 = virtualinvoke cal.<java.util.Calendar: java.util.Date getTime()>();

        $l0 = virtualinvoke $r1.<java.util.Date: long getTime()>();

        specialinvoke $r0.<com.sleepycat.je.utilint.Timestamp: void <init>(long)>($l0);

        return $r0;
    }

    public void writeToLog(java.nio.ByteBuffer, int, boolean)
    {
        com.sleepycat.je.log.Trace this;
        java.nio.ByteBuffer logBuffer;
        int logVersion;
        boolean forReplication;
        com.sleepycat.je.utilint.Timestamp $r0;
        java.lang.String $r1;

        this := @this: com.sleepycat.je.log.Trace;

        logBuffer := @parameter0: java.nio.ByteBuffer;

        logVersion := @parameter1: int;

        forReplication := @parameter2: boolean;

        $r0 = this.<com.sleepycat.je.log.Trace: com.sleepycat.je.utilint.Timestamp time>;

        staticinvoke <com.sleepycat.je.log.LogUtils: void writeTimestamp(java.nio.ByteBuffer,com.sleepycat.je.utilint.Timestamp)>(logBuffer, $r0);

        $r1 = this.<com.sleepycat.je.log.Trace: java.lang.String msg>;

        staticinvoke <com.sleepycat.je.log.LogUtils: void writeString(java.nio.ByteBuffer,java.lang.String)>(logBuffer, $r1);

        return;
    }

    public int getLogSize(int, boolean)
    {
        com.sleepycat.je.log.Trace this;
        int logVersion, $i0, $i1, $i2;
        boolean forReplication;
        com.sleepycat.je.utilint.Timestamp $r0;
        java.lang.String $r1;

        this := @this: com.sleepycat.je.log.Trace;

        logVersion := @parameter0: int;

        forReplication := @parameter1: boolean;

        $r0 = this.<com.sleepycat.je.log.Trace: com.sleepycat.je.utilint.Timestamp time>;

        $i0 = staticinvoke <com.sleepycat.je.log.LogUtils: int getTimestampLogSize(com.sleepycat.je.utilint.Timestamp)>($r0);

        $r1 = this.<com.sleepycat.je.log.Trace: java.lang.String msg>;

        $i1 = staticinvoke <com.sleepycat.je.log.LogUtils: int getStringLogSize(java.lang.String)>($r1);

        $i2 = $i0 + $i1;

        return $i2;
    }


