    public java.lang.String toString()
    {
        weka.classifiers.rules.JRip$NumericAntd this;
        java.lang.String symbol, $r0, $r3, $r6, $r8;
        double $d0, $d1;
        int $i0;
        java.lang.StringBuilder $r1, $r4, $r5, $r7;
        weka.core.Attribute $r2;

        this := @this: weka.classifiers.rules.JRip$NumericAntd;

        $d0 = this.<weka.classifiers.rules.JRip$NumericAntd: double value>;

        $i0 = (int) $d0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 0 goto label1;

        $r0 = " <= ";

        goto label2;

     label1:
        $r0 = " >= ";

     label2:
        symbol = $r0;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = this.<weka.classifiers.rules.JRip$NumericAntd: weka.core.Attribute att>;

        $r3 = virtualinvoke $r2.<weka.core.Attribute: java.lang.String name()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(symbol);

        $d1 = this.<weka.classifiers.rules.JRip$NumericAntd: double splitPoint>;

        $r6 = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int)>($d1, 6);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public void <init>(weka.classifiers.rules.JRip, weka.core.Attribute)
    {
        weka.classifiers.rules.JRip$NumericAntd this;
        weka.classifiers.rules.JRip this$0;
        weka.core.Attribute a;

        this := @this: weka.classifiers.rules.JRip$NumericAntd;

        this$0 := @parameter0: weka.classifiers.rules.JRip;

        a := @parameter1: weka.core.Attribute;

        this.<weka.classifiers.rules.JRip$NumericAntd: weka.classifiers.rules.JRip this$0> = this$0;

        specialinvoke this.<weka.classifiers.rules.JRip$Antd: void <init>(weka.classifiers.rules.JRip,weka.core.Attribute)>(this$0, a);

        this.<weka.classifiers.rules.JRip$NumericAntd: double splitPoint> = #NaN;

        return;
    }

    public weka.core.Instances[] splitData(weka.core.Instances, double, double)
    {
        weka.classifiers.rules.JRip$NumericAntd this;
        weka.core.Instances insts, data, $r13, $r14;
        double defAcRt, cl, fstAccuRate, sndAccuRate, fstInfoGain, sndInfoGain, fstCover#16, sndCover#18, fstAccu#20, sndAccu#22, $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, infoGain#136, accRate#138, accurate#140, coverage#142, $d19, $d20, $d21, $d22, $d23, $d24;
        weka.core.Instance inst, inst#34, $r2, $r4, $r6, inst#87, $r8, $r9, $r12;
        weka.core.Instances[] splitData;
        int total#4, split#6, prev#8, finalSplit#10, x#27, $i0, $i1, y#81, $i5, y#173, $i6;
        weka.core.Attribute $r0, $r1, $r3, $r5, $r7, $r10;
        boolean $z0, $z1, $z2, isFirst#134, $z3;
        byte $b2, $b3, $b4;

        this := @this: weka.classifiers.rules.JRip$NumericAntd;

        insts := @parameter0: weka.core.Instances;

        defAcRt := @parameter1: double;

        cl := @parameter2: double;

        data = insts;

        total#4 = virtualinvoke data.<weka.core.Instances: int numInstances()>();

        split#6 = 1;

        prev#8 = 0;

        finalSplit#10 = split#6;

        this.<weka.classifiers.rules.JRip$NumericAntd: double maxInfoGain> = 0.0;

        this.<weka.classifiers.rules.JRip$NumericAntd: double value> = 0.0;

        fstCover#16 = 0.0;

        sndCover#18 = 0.0;

        fstAccu#20 = 0.0;

        sndAccu#22 = 0.0;

        $r0 = this.<weka.classifiers.rules.JRip$NumericAntd: weka.core.Attribute att>;

        virtualinvoke data.<weka.core.Instances: void sort(weka.core.Attribute)>($r0);

        x#27 = 0;

     label01:
        $i0 = virtualinvoke data.<weka.core.Instances: int numInstances()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(x#27);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if x#27 >= $i0 goto label04;

        inst#34 = virtualinvoke data.<weka.core.Instances: weka.core.Instance instance(int)>(x#27);

        $r1 = this.<weka.classifiers.rules.JRip$NumericAntd: weka.core.Attribute att>;

        $z0 = interfaceinvoke inst#34.<weka.core.Instance: boolean isMissing(weka.core.Attribute)>($r1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label02;

        total#4 = x#27;

        goto label04;

     label02:
        $d0 = interfaceinvoke inst#34.<weka.core.Instance: double weight()>();

        sndCover#18 = sndCover#18 + $d0;

        $d1 = interfaceinvoke inst#34.<weka.core.Instance: double classValue()>();

        $z1 = staticinvoke <weka.core.Utils: boolean eq(double,double)>($d1, cl);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label03;

        $d2 = interfaceinvoke inst#34.<weka.core.Instance: double weight()>();

        sndAccu#22 = sndAccu#22 + $d2;

     label03:
        x#27 = x#27 + 1;

        goto label01;

     label04:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(total#4);

        if total#4 != 0 goto label05;

        return null;

     label05:
        $i1 = total#4 - 1;

        $r2 = virtualinvoke data.<weka.core.Instances: weka.core.Instance instance(int)>($i1);

        $r3 = this.<weka.classifiers.rules.JRip$NumericAntd: weka.core.Attribute att>;

        $d3 = interfaceinvoke $r2.<weka.core.Instance: double value(weka.core.Attribute)>($r3);

        this.<weka.classifiers.rules.JRip$NumericAntd: double splitPoint> = $d3;

     label06:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(split#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(total#4);

        if split#6 > total#4 goto label22;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(split#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(total#4);

        if split#6 == total#4 goto label07;

        $r4 = virtualinvoke data.<weka.core.Instances: weka.core.Instance instance(int)>(split#6);

        $r5 = this.<weka.classifiers.rules.JRip$NumericAntd: weka.core.Attribute att>;

        $d4 = interfaceinvoke $r4.<weka.core.Instance: double value(weka.core.Attribute)>($r5);

        $r6 = virtualinvoke data.<weka.core.Instances: weka.core.Instance instance(int)>(prev#8);

        $r7 = this.<weka.classifiers.rules.JRip$NumericAntd: weka.core.Attribute att>;

        $d5 = interfaceinvoke $r6.<weka.core.Instance: double value(weka.core.Attribute)>($r7);

        $b2 = $d4 cmpl $d5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b2);

        if $b2 <= 0 goto label21;

     label07:
        y#81 = prev#8;

     label08:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(y#81);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(split#6);

        if y#81 >= split#6 goto label10;

        inst#87 = virtualinvoke data.<weka.core.Instances: weka.core.Instance instance(int)>(y#81);

        $d6 = interfaceinvoke inst#87.<weka.core.Instance: double weight()>();

        fstCover#16 = fstCover#16 + $d6;

        $r8 = virtualinvoke data.<weka.core.Instances: weka.core.Instance instance(int)>(y#81);

        $d7 = interfaceinvoke $r8.<weka.core.Instance: double classValue()>();

        $z2 = staticinvoke <weka.core.Utils: boolean eq(double,double)>($d7, cl);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label09;

        $d8 = interfaceinvoke inst#87.<weka.core.Instance: double weight()>();

        fstAccu#20 = fstAccu#20 + $d8;

     label09:
        y#81 = y#81 + 1;

        goto label08;

     label10:
        $d9 = fstAccu#20 + 1.0;

        $d10 = fstCover#16 + 1.0;

        fstAccuRate = $d9 / $d10;

        $d11 = sndAccu#22 + 1.0;

        $d12 = sndCover#18 + 1.0;

        sndAccuRate = $d11 / $d12;

        $d13 = staticinvoke <weka.core.Utils: double log2(double)>(fstAccuRate);

        $d14 = staticinvoke <weka.core.Utils: double log2(double)>(defAcRt);

        $d15 = $d13 - $d14;

        fstInfoGain = fstAccu#20 * $d15;

        $d16 = staticinvoke <weka.core.Utils: double log2(double)>(sndAccuRate);

        $d17 = staticinvoke <weka.core.Utils: double log2(double)>(defAcRt);

        $d18 = $d16 - $d17;

        sndInfoGain = sndAccu#22 * $d18;

        $b3 = fstInfoGain cmpl sndInfoGain;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b3);

        if $b3 <= 0 goto label11;

        isFirst#134 = 1;

        infoGain#136 = fstInfoGain;

        accRate#138 = fstAccuRate;

        accurate#140 = fstAccu#20;

        coverage#142 = fstCover#16;

        goto label12;

     label11:
        isFirst#134 = 0;

        infoGain#136 = sndInfoGain;

        accRate#138 = sndAccuRate;

        accurate#140 = sndAccu#22;

        coverage#142 = sndCover#18;

     label12:
        $d19 = this.<weka.classifiers.rules.JRip$NumericAntd: double maxInfoGain>;

        $b4 = infoGain#136 cmpl $d19;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b4);

        if $b4 <= 0 goto label17;

        $r9 = virtualinvoke data.<weka.core.Instances: weka.core.Instance instance(int)>(prev#8);

        $r10 = this.<weka.classifiers.rules.JRip$NumericAntd: weka.core.Attribute att>;

        $d20 = interfaceinvoke $r9.<weka.core.Instance: double value(weka.core.Attribute)>($r10);

        this.<weka.classifiers.rules.JRip$NumericAntd: double splitPoint> = $d20;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isFirst#134);

        if isFirst#134 == 0 goto label13;

        $d21 = 0.0;

        goto label14;

     label13:
        $d21 = 1.0;

     label14:
        this.<weka.classifiers.rules.JRip$NumericAntd: double value> = $d21;

        this.<weka.classifiers.rules.JRip$NumericAntd: double accuRate> = accRate#138;

        this.<weka.classifiers.rules.JRip$NumericAntd: double accu> = accurate#140;

        this.<weka.classifiers.rules.JRip$NumericAntd: double cover> = coverage#142;

        this.<weka.classifiers.rules.JRip$NumericAntd: double maxInfoGain> = infoGain#136;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isFirst#134);

        if isFirst#134 == 0 goto label15;

        $i5 = split#6;

        goto label16;

     label15:
        $i5 = prev#8;

     label16:
        finalSplit#10 = $i5;

     label17:
        y#173 = prev#8;

     label18:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(y#173);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(split#6);

        if y#173 >= split#6 goto label20;

        inst = virtualinvoke data.<weka.core.Instances: weka.core.Instance instance(int)>(y#173);

        $d22 = interfaceinvoke inst.<weka.core.Instance: double weight()>();

        sndCover#18 = sndCover#18 - $d22;

        $r12 = virtualinvoke data.<weka.core.Instances: weka.core.Instance instance(int)>(y#173);

        $d23 = interfaceinvoke $r12.<weka.core.Instance: double classValue()>();

        $z3 = staticinvoke <weka.core.Utils: boolean eq(double,double)>($d23, cl);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label19;

        $d24 = interfaceinvoke inst.<weka.core.Instance: double weight()>();

        sndAccu#22 = sndAccu#22 - $d24;

     label19:
        y#173 = y#173 + 1;

        goto label18;

     label20:
        prev#8 = split#6;

     label21:
        split#6 = split#6 + 1;

        goto label06;

     label22:
        splitData = newarray (weka.core.Instances)[2];

        $r13 = new weka.core.Instances;

        specialinvoke $r13.<weka.core.Instances: void <init>(weka.core.Instances,int,int)>(data, 0, finalSplit#10);

        splitData[0] = $r13;

        $r14 = new weka.core.Instances;

        $i6 = total#4 - finalSplit#10;

        specialinvoke $r14.<weka.core.Instances: void <init>(weka.core.Instances,int,int)>(data, finalSplit#10, $i6);

        splitData[1] = $r14;

        return splitData;
    }


