    static void <clinit>()
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4;
        java.lang.String $r2, $r5;
        java.util.ArrayList $r6;

        <weka.core.xml.XMLSerialization: boolean DEBUG> = 0;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<!DOCTYPE object\n[\n   <!ELEMENT object (#PCDATA|object)*>\n   <!ATTLIST object name      CDATA #REQUIRED>\n   <!ATTLIST object class     CDATA #REQUIRED>\n   <!ATTLIST object primitive CDATA \"no\">\n   <!ATTLIST object array     CDATA \"no\">   <!-- the dimensions of the array; no=0, yes=1 -->\n   <!ATTLIST object null      CDATA \"no\">\n   <!ATTLIST object version   CDATA \"");

        $r2 = <weka.core.Version: java.lang.String VERSION>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\">\n]\n>");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        <weka.core.xml.XMLSerialization: java.lang.String DOCTYPE> = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        <weka.core.xml.XMLSerialization: java.util.List SUPPRESS_PROPERTY_WARNINGS> = $r6;

        return;
    }

    public void <init>() throws java.lang.Exception
    {
        weka.core.xml.XMLSerialization this;

        this := @this: weka.core.xml.XMLSerialization;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<weka.core.xml.XMLSerialization: org.w3c.dom.Element m_CurrentNode> = null;

        this.<weka.core.xml.XMLSerialization: weka.core.xml.XMLDocument m_Document> = null;

        this.<weka.core.xml.XMLSerialization: weka.core.xml.PropertyHandler m_Properties> = null;

        this.<weka.core.xml.XMLSerialization: weka.core.xml.XMLSerializationMethodHandler m_CustomMethods> = null;

        this.<weka.core.xml.XMLSerialization: java.util.Hashtable m_ClassnameOverride> = null;

        virtualinvoke this.<weka.core.xml.XMLSerialization: void clear()>();

        return;
    }

    public void clear() throws java.lang.Exception
    {
        weka.core.xml.XMLSerialization this;
        weka.core.xml.XMLDocument $r0, $r1, $r2;
        java.lang.String $r3, $r10, $r12;
        weka.core.xml.PropertyHandler $r5;
        weka.core.xml.XMLSerializationMethodHandler $r6;
        java.util.Hashtable $r7, $r8;
        java.lang.Class $r9;

        this := @this: weka.core.xml.XMLSerialization;

        $r0 = new weka.core.xml.XMLDocument;

        specialinvoke $r0.<weka.core.xml.XMLDocument: void <init>()>();

        this.<weka.core.xml.XMLSerialization: weka.core.xml.XMLDocument m_Document> = $r0;

        $r1 = this.<weka.core.xml.XMLSerialization: weka.core.xml.XMLDocument m_Document>;

        virtualinvoke $r1.<weka.core.xml.XMLDocument: void setValidating(boolean)>(1);

        $r2 = this.<weka.core.xml.XMLSerialization: weka.core.xml.XMLDocument m_Document>;

        $r3 = <weka.core.xml.XMLSerialization: java.lang.String DOCTYPE>;

        virtualinvoke $r2.<weka.core.xml.XMLDocument: org.w3c.dom.Document newDocument(java.lang.String,java.lang.String)>($r3, "object");

        $r5 = new weka.core.xml.PropertyHandler;

        specialinvoke $r5.<weka.core.xml.PropertyHandler: void <init>()>();

        this.<weka.core.xml.XMLSerialization: weka.core.xml.PropertyHandler m_Properties> = $r5;

        $r6 = new weka.core.xml.XMLSerializationMethodHandler;

        specialinvoke $r6.<weka.core.xml.XMLSerializationMethodHandler: void <init>(java.lang.Object)>(this);

        this.<weka.core.xml.XMLSerialization: weka.core.xml.XMLSerializationMethodHandler m_CustomMethods> = $r6;

        $r7 = new java.util.Hashtable;

        specialinvoke $r7.<java.util.Hashtable: void <init>()>();

        this.<weka.core.xml.XMLSerialization: java.util.Hashtable m_ClassnameOverride> = $r7;

        $r8 = this.<weka.core.xml.XMLSerialization: java.util.Hashtable m_ClassnameOverride>;

        $r9 = class "java/io/File";

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r8.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "java/io/File", $r10);

        $r12 = <weka.core.Version: java.lang.String VERSION>;

        specialinvoke this.<weka.core.xml.XMLSerialization: void setVersion(java.lang.String)>($r12);

        this.<weka.core.xml.XMLSerialization: org.w3c.dom.Element m_CurrentNode> = null;

        return;
    }

    private void setVersion(java.lang.String)
    {
        weka.core.xml.XMLSerialization this;
        java.lang.String version;
        org.w3c.dom.Document doc;
        weka.core.xml.XMLDocument $r0;
        org.w3c.dom.Element $r1;

        this := @this: weka.core.xml.XMLSerialization;

        version := @parameter0: java.lang.String;

        $r0 = this.<weka.core.xml.XMLSerialization: weka.core.xml.XMLDocument m_Document>;

        doc = virtualinvoke $r0.<weka.core.xml.XMLDocument: org.w3c.dom.Document getDocument()>();

        $r1 = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        interfaceinvoke $r1.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("version", version);

        return;
    }

    public void write(java.io.OutputStream, java.lang.Object) throws java.lang.Exception
    {
        weka.core.xml.XMLSerialization this;
        java.io.OutputStream stream;
        java.lang.Object o;
        weka.core.xml.XMLDocument $r0;

        this := @this: weka.core.xml.XMLSerialization;

        stream := @parameter0: java.io.OutputStream;

        o := @parameter1: java.lang.Object;

        $r0 = virtualinvoke this.<weka.core.xml.XMLSerialization: weka.core.xml.XMLDocument toXML(java.lang.Object)>(o);

        virtualinvoke $r0.<weka.core.xml.XMLDocument: void write(java.io.OutputStream)>(stream);

        return;
    }

    public weka.core.xml.XMLDocument toXML(java.lang.Object) throws java.lang.Exception
    {
        weka.core.xml.XMLSerialization this;
        java.lang.Object o, $r0;
        weka.core.xml.XMLDocument $r2;

        this := @this: weka.core.xml.XMLSerialization;

        o := @parameter0: java.lang.Object;

        virtualinvoke this.<weka.core.xml.XMLSerialization: void clear()>();

        $r0 = virtualinvoke this.<weka.core.xml.XMLSerialization: java.lang.Object writePreProcess(java.lang.Object)>(o);

        virtualinvoke this.<weka.core.xml.XMLSerialization: org.w3c.dom.Element invokeWriteToXML(org.w3c.dom.Element,java.lang.Object,java.lang.String)>(null, $r0, "__root__");

        virtualinvoke this.<weka.core.xml.XMLSerialization: void writePostProcess(java.lang.Object)>(o);

        $r2 = this.<weka.core.xml.XMLSerialization: weka.core.xml.XMLDocument m_Document>;

        return $r2;
    }

    protected java.lang.Object writePreProcess(java.lang.Object) throws java.lang.Exception
    {
        weka.core.xml.XMLSerialization this;
        java.lang.Object o;

        this := @this: weka.core.xml.XMLSerialization;

        o := @parameter0: java.lang.Object;

        return o;
    }

    protected org.w3c.dom.Element invokeWriteToXML(org.w3c.dom.Element, java.lang.Object, java.lang.String) throws java.lang.Exception
    {
        weka.core.xml.XMLSerialization this;
        org.w3c.dom.Element parent, node#70, $r14, $r18;
        java.lang.Object o, $r12;
        java.lang.String name, $r19, $r21, $r26;
        boolean array, useDefault#6, $z0, $z1, $z2, $z3;
        java.lang.Class[] methodClasses;
        java.lang.Object[] methodArgs;
        java.lang.Exception e, $r13, $r28;
        java.lang.reflect.Method method#4;
        java.lang.Class $r0, $r5, $r8, $r11;
        weka.core.xml.XMLSerializationMethodHandler $r1, $r3, $r6, $r9;
        weka.core.xml.MethodHandler $r2, $r4, $r7, $r10;
        java.io.PrintStream $r15, $r22;
        java.lang.StringBuilder $r16, $r17, $r20, $r23, $r24, $r25;
        java.lang.Throwable $r27;

        this := @this: weka.core.xml.XMLSerialization;

        parent := @parameter0: org.w3c.dom.Element;

        o := @parameter1: java.lang.Object;

        name := @parameter2: java.lang.String;

        method#4 = null;

        useDefault#6 = 0;

        this.<weka.core.xml.XMLSerialization: org.w3c.dom.Element m_CurrentNode> = parent;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(o);

        if o != null goto label01;

        useDefault#6 = 1;

     label01:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(useDefault#6);

        if useDefault#6 != 0 goto label07;

        $r0 = virtualinvoke o.<java.lang.Object: java.lang.Class getClass()>();

        array = virtualinvoke $r0.<java.lang.Class: boolean isArray()>();

        $r1 = this.<weka.core.xml.XMLSerialization: weka.core.xml.XMLSerializationMethodHandler m_CustomMethods>;

        $r2 = virtualinvoke $r1.<weka.core.xml.XMLSerializationMethodHandler: weka.core.xml.MethodHandler write()>();

        $z0 = virtualinvoke $r2.<weka.core.xml.MethodHandler: boolean contains(java.lang.String)>(name);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label02;

        $r3 = this.<weka.core.xml.XMLSerialization: weka.core.xml.XMLSerializationMethodHandler m_CustomMethods>;

        $r4 = virtualinvoke $r3.<weka.core.xml.XMLSerializationMethodHandler: weka.core.xml.MethodHandler write()>();

        $r5 = virtualinvoke o.<java.lang.Object: java.lang.Class getClass()>();

        method#4 = virtualinvoke $r4.<weka.core.xml.MethodHandler: java.lang.reflect.Method get(java.lang.Class)>($r5);

        goto label04;

     label02:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(array);

        if array != 0 goto label03;

        $r6 = this.<weka.core.xml.XMLSerialization: weka.core.xml.XMLSerializationMethodHandler m_CustomMethods>;

        $r7 = virtualinvoke $r6.<weka.core.xml.XMLSerializationMethodHandler: weka.core.xml.MethodHandler write()>();

        $r8 = virtualinvoke o.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke $r7.<weka.core.xml.MethodHandler: boolean contains(java.lang.Class)>($r8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label03;

        $r9 = this.<weka.core.xml.XMLSerialization: weka.core.xml.XMLSerializationMethodHandler m_CustomMethods>;

        $r10 = virtualinvoke $r9.<weka.core.xml.XMLSerializationMethodHandler: weka.core.xml.MethodHandler write()>();

        $r11 = virtualinvoke o.<java.lang.Object: java.lang.Class getClass()>();

        method#4 = virtualinvoke $r10.<weka.core.xml.MethodHandler: java.lang.reflect.Method get(java.lang.Class)>($r11);

        goto label04;

     label03:
        method#4 = null;

     label04:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(method#4);

        if method#4 != null goto label05;

        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        useDefault#6 = $z2;

     label07:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(useDefault#6);

        if useDefault#6 != 0 goto label08;

        methodClasses = newarray (java.lang.Class)[3];

        methodClasses[0] = class "org/w3c/dom/Element";

        methodClasses[1] = class "java/lang/Object";

        methodClasses[2] = class "java/lang/String";

        methodArgs = newarray (java.lang.Object)[3];

        methodArgs[0] = parent;

        methodArgs[1] = o;

        methodArgs[2] = name;

        $r12 = virtualinvoke method#4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(this, methodArgs);

        node#70 = (org.w3c.dom.Element) $r12;

        goto label09;

     label08:
        node#70 = virtualinvoke this.<weka.core.xml.XMLSerialization: org.w3c.dom.Element writeToXML(org.w3c.dom.Element,java.lang.Object,java.lang.String)>(parent, o, name);

     label09:
        goto label13;

     label10:
        $r13 := @caughtexception;

        e = $r13;

        $z3 = <weka.core.xml.XMLSerialization: boolean DEBUG>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label11;

        virtualinvoke e.<java.lang.Exception: void printStackTrace()>();

     label11:
        $r14 = this.<weka.core.xml.XMLSerialization: org.w3c.dom.Element m_CurrentNode>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r14);

        if $r14 == null goto label12;

        $r15 = <java.lang.System: java.io.PrintStream out>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Happened near: ");

        $r18 = this.<weka.core.xml.XMLSerialization: org.w3c.dom.Element m_CurrentNode>;

        $r19 = virtualinvoke this.<weka.core.xml.XMLSerialization: java.lang.String getPath(org.w3c.dom.Element)>($r18);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r21);

        this.<weka.core.xml.XMLSerialization: org.w3c.dom.Element m_CurrentNode> = null;

     label12:
        $r22 = <java.lang.System: java.io.PrintStream out>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PROBLEM (write): ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>($r26);

        $r27 = virtualinvoke e.<java.lang.Exception: java.lang.Throwable fillInStackTrace()>();

        $r28 = (java.lang.Exception) $r27;

        throw $r28;

     label13:
        return node#70;

        catch java.lang.Exception from label01 to label09 with label10;
    }

    protected void writePostProcess(java.lang.Object) throws java.lang.Exception
    {
        weka.core.xml.XMLSerialization this;
        java.lang.Object o;

        this := @this: weka.core.xml.XMLSerialization;

        o := @parameter0: java.lang.Object;

        return;
    }

    public org.w3c.dom.Element writeToXML(org.w3c.dom.Element, java.lang.Object, java.lang.String) throws java.lang.Exception
    {
        weka.core.xml.XMLSerialization this;
        org.w3c.dom.Element parent, node#22, node#104;
        java.lang.Object o, member, obj#25, $r17, $r31, $r49;
        java.lang.String name, memberName, $r4, classname#38, $r9, $r14, $r15, $r16, classname#93, $r18, $r20, $r22, tmpStr#138, $r23, $r24, $r25, $r26, tmpStr#155, $r27, $r28, tmpStr#166, $r32, $r36, $r40, $r43, $r47;
        java.util.Hashtable memberlist;
        java.util.Enumeration enm;
        java.lang.reflect.Method method;
        boolean $z0, $z1, primitive#43, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.lang.Throwable $r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r35, $r37, $r38, $r39, $r42, $r44, $r45, $r46;
        int array#27, i#107, $i0, $i1;
        java.lang.Class $r5, $r6, $r7, $r8, $r10, $r11, $r12, $r13;
        java.beans.PropertyDescriptor desc#45, desc#229;
        org.w3c.dom.Document $r19, $r29;
        org.w3c.dom.Text $r21, $r30;
        weka.core.xml.PropertyHandler $r33, $r34, $r41, $r48;
        java.lang.Object[] $r50;

        this := @this: weka.core.xml.XMLSerialization;

        parent := @parameter0: org.w3c.dom.Element;

        o := @parameter1: java.lang.Object;

        name := @parameter2: java.lang.String;

        $z0 = <weka.core.xml.XMLSerialization: boolean DEBUG>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label01;

        $r0 = new java.lang.Throwable;

        specialinvoke $r0.<java.lang.Throwable: void <init>()>();

        virtualinvoke this.<weka.core.xml.XMLSerialization: void trace(java.lang.Throwable,java.lang.String)>($r0, name);

     label01:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(o);

        if o != null goto label02;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(null);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        node#22 = virtualinvoke this.<weka.core.xml.XMLSerialization: org.w3c.dom.Element addElement(org.w3c.dom.Element,java.lang.String,java.lang.String,boolean,int,boolean)>(parent, name, $r4, 0, 0, 1);

        return node#22;

     label02:
        obj#25 = null;

        array#27 = 0;

        $r5 = virtualinvoke o.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke $r5.<java.lang.Class: boolean isArray()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label03;

        array#27 = staticinvoke <weka.core.Utils: int getArrayDimensions(java.lang.Object)>(o);

     label03:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(array#27);

        if array#27 <= 0 goto label04;

        $r6 = virtualinvoke o.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = staticinvoke <weka.core.Utils: java.lang.Class getArrayClass(java.lang.Class)>($r6);

        classname#38 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke o.<java.lang.Object: java.lang.Class getClass()>();

        primitive#43 = virtualinvoke this.<weka.core.xml.XMLSerialization: boolean isPrimitiveArray(java.lang.Class)>($r8);

        goto label09;

     label04:
        desc#45 = null;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(parent);

        if parent == null goto label05;

        $r9 = interfaceinvoke parent.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("class");

        desc#45 = virtualinvoke this.<weka.core.xml.XMLSerialization: java.beans.PropertyDescriptor determineDescriptor(java.lang.String,java.lang.String)>($r9, name);

     label05:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(desc#45);

        if desc#45 == null goto label06;

        $r10 = virtualinvoke desc#45.<java.beans.PropertyDescriptor: java.lang.Class getPropertyType()>();

        primitive#43 = virtualinvoke $r10.<java.lang.Class: boolean isPrimitive()>();

        goto label07;

     label06:
        $r11 = virtualinvoke o.<java.lang.Object: java.lang.Class getClass()>();

        primitive#43 = virtualinvoke $r11.<java.lang.Class: boolean isPrimitive()>();

     label07:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(primitive#43);

        if primitive#43 == 0 goto label08;

        $r12 = virtualinvoke desc#45.<java.beans.PropertyDescriptor: java.lang.Class getPropertyType()>();

        classname#38 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        goto label09;

     label08:
        obj#25 = o;

        $r13 = virtualinvoke o.<java.lang.Object: java.lang.Class getClass()>();

        classname#38 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(parent);

        if parent == null goto label10;

        $r14 = interfaceinvoke parent.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("array");

        $z2 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>("");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label10;

        $r15 = interfaceinvoke parent.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("array");

        $z3 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("no");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label10;

        $r16 = interfaceinvoke parent.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("primitive");

        $z4 = virtualinvoke this.<weka.core.xml.XMLSerialization: boolean stringToBoolean(java.lang.String)>($r16);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label10;

        primitive#43 = 1;

        classname#38 = interfaceinvoke parent.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("class");

        obj#25 = null;

     label10:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(obj#25);

        if obj#25 == null goto label11;

        classname#93 = virtualinvoke this.<weka.core.xml.XMLSerialization: java.lang.String overrideClassname(java.lang.Object)>(obj#25);

        goto label12;

     label11:
        classname#93 = virtualinvoke this.<weka.core.xml.XMLSerialization: java.lang.String overrideClassname(java.lang.String)>(classname#38);

     label12:
        node#104 = virtualinvoke this.<weka.core.xml.XMLSerialization: org.w3c.dom.Element addElement(org.w3c.dom.Element,java.lang.String,java.lang.String,boolean,int)>(parent, name, classname#93, primitive#43, array#27);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(array#27);

        if array#27 <= 0 goto label14;

        i#107 = 0;

     label13:
        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(o);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#107);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#107 >= $i0 goto label21;

        $r17 = staticinvoke <java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>(o, i#107);

        $r18 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i#107);

        virtualinvoke this.<weka.core.xml.XMLSerialization: org.w3c.dom.Element invokeWriteToXML(org.w3c.dom.Element,java.lang.Object,java.lang.String)>(node#104, $r17, $r18);

        i#107 = i#107 + 1;

        goto label13;

     label14:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(primitive#43);

        if primitive#43 == 0 goto label15;

        $r19 = interfaceinvoke node#104.<org.w3c.dom.Element: org.w3c.dom.Document getOwnerDocument()>();

        $r20 = virtualinvoke o.<java.lang.Object: java.lang.String toString()>();

        $r21 = interfaceinvoke $r19.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>($r20);

        interfaceinvoke node#104.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r21);

        goto label21;

     label15:
        memberlist = virtualinvoke this.<weka.core.xml.XMLSerialization: java.util.Hashtable getDescriptors(java.lang.Object)>(o);

        $i1 = virtualinvoke memberlist.<java.util.Hashtable: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 != 0 goto label17;

        $r22 = virtualinvoke o.<java.lang.Object: java.lang.String toString()>();

        $z5 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>("");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 != 0 goto label21;

        tmpStr#138 = virtualinvoke o.<java.lang.Object: java.lang.String toString()>();

        $r23 = virtualinvoke tmpStr#138.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("&", "&amp;");

        $r24 = virtualinvoke $r23.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\"", "&quot;");

        $r25 = virtualinvoke $r24.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\'", "&apos;");

        $r26 = virtualinvoke $r25.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("<", "&lt;");

        tmpStr#155 = virtualinvoke $r26.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(">", "&gt;");

        $r27 = virtualinvoke tmpStr#155.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\n", "&#10;");

        $r28 = virtualinvoke $r27.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\r", "&#13;");

        tmpStr#166 = virtualinvoke $r28.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\t", "&#9;");

        $z6 = o instanceof java.io.File;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label16;

        tmpStr#166 = virtualinvoke tmpStr#166.<java.lang.String: java.lang.String replace(char,char)>(92, 47);

     label16:
        $r29 = interfaceinvoke node#104.<org.w3c.dom.Element: org.w3c.dom.Document getOwnerDocument()>();

        $r30 = interfaceinvoke $r29.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>(tmpStr#166);

        interfaceinvoke node#104.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r30);

        goto label21;

     label17:
        enm = virtualinvoke memberlist.<java.util.Hashtable: java.util.Enumeration keys()>();

     label18:
        $z7 = interfaceinvoke enm.<java.util.Enumeration: boolean hasMoreElements()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 == 0 goto label21;

        $r31 = interfaceinvoke enm.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r32 = (java.lang.String) $r31;

        memberName = virtualinvoke $r32.<java.lang.String: java.lang.String toString()>();

        $r33 = this.<weka.core.xml.XMLSerialization: weka.core.xml.PropertyHandler m_Properties>;

        $z8 = virtualinvoke $r33.<weka.core.xml.PropertyHandler: boolean isIgnored(java.lang.String)>(memberName);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 != 0 goto label18;

        $r34 = this.<weka.core.xml.XMLSerialization: weka.core.xml.PropertyHandler m_Properties>;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke this.<weka.core.xml.XMLSerialization: java.lang.String getPath(org.w3c.dom.Element)>(node#104);

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(memberName);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        $z9 = virtualinvoke $r34.<weka.core.xml.PropertyHandler: boolean isIgnored(java.lang.String)>($r40);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 != 0 goto label18;

        $r41 = this.<weka.core.xml.XMLSerialization: weka.core.xml.PropertyHandler m_Properties>;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke this.<weka.core.xml.XMLSerialization: java.lang.String getPath(org.w3c.dom.Element)>(node#104);

        $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(memberName);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        $z10 = virtualinvoke $r41.<weka.core.xml.PropertyHandler: boolean isIgnored(java.lang.Object,java.lang.String)>(o, $r47);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z10);

        if $z10 == 0 goto label19;

        goto label18;

     label19:
        $r48 = this.<weka.core.xml.XMLSerialization: weka.core.xml.PropertyHandler m_Properties>;

        $z11 = virtualinvoke $r48.<weka.core.xml.PropertyHandler: boolean isAllowed(java.lang.Object,java.lang.String)>(o, memberName);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z11);

        if $z11 != 0 goto label20;

        goto label18;

     label20:
        $r49 = virtualinvoke memberlist.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(memberName);

        desc#229 = (java.beans.PropertyDescriptor) $r49;

        method = virtualinvoke desc#229.<java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>();

        $r50 = (java.lang.Object[]) null;

        member = virtualinvoke method.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(o, $r50);

        virtualinvoke this.<weka.core.xml.XMLSerialization: org.w3c.dom.Element invokeWriteToXML(org.w3c.dom.Element,java.lang.Object,java.lang.String)>(node#104, member, memberName);

        goto label18;

     label21:
        return node#104;
    }

    protected java.lang.String getPath(org.w3c.dom.Element)
    {
        weka.core.xml.XMLSerialization this;
        org.w3c.dom.Element node#1;
        java.lang.String result#5, $r4;
        org.w3c.dom.Node $r0, $r2;
        org.w3c.dom.Document $r1;
        java.lang.StringBuilder $r3, $r5, $r6, $r7;

        this := @this: weka.core.xml.XMLSerialization;

        node#1 := @parameter0: org.w3c.dom.Element;

        result#5 = interfaceinvoke node#1.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("name");

     label1:
        $r0 = interfaceinvoke node#1.<org.w3c.dom.Element: org.w3c.dom.Node getParentNode()>();

        $r1 = interfaceinvoke node#1.<org.w3c.dom.Element: org.w3c.dom.Document getOwnerDocument()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r0 == $r1 goto label2;

        $r2 = interfaceinvoke node#1.<org.w3c.dom.Element: org.w3c.dom.Node getParentNode()>();

        node#1 = (org.w3c.dom.Element) $r2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = interfaceinvoke node#1.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("name");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(result#5);

        result#5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;

     label2:
        return result#5;
    }

    protected void trace(java.lang.Throwable, java.lang.String)
    {
        weka.core.xml.XMLSerialization this;
        java.lang.Throwable t;
        java.lang.String msg, $r9;
        boolean $z0;
        java.lang.StackTraceElement[] $r0, $r4;
        int $i0;
        java.io.PrintStream $r1;
        java.lang.StringBuilder $r2, $r3, $r6, $r7, $r8;
        java.lang.StackTraceElement $r5;

        this := @this: weka.core.xml.XMLSerialization;

        t := @parameter0: java.lang.Throwable;

        msg := @parameter1: java.lang.String;

        $z0 = <weka.core.xml.XMLSerialization: boolean DEBUG>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r0 = virtualinvoke t.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        $i0 = lengthof $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("trace: ");

        $r4 = virtualinvoke t.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        $r5 = $r4[0];

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(msg);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r9);

     label1:
        return;
    }

    protected org.w3c.dom.Element addElement(org.w3c.dom.Element, java.lang.String, java.lang.String, boolean, int, boolean)
    {
        weka.core.xml.XMLSerialization this;
        org.w3c.dom.Element parent, result#6, $r4, $r11;
        java.lang.String name, classname, $r6, $r7, $r8, $r10, $r14, $r15, $r16;
        boolean primitive, isnull, $z0, $z1, $z2, $z3, $z4;
        int array;
        weka.core.xml.XMLDocument $r0, $r2;
        org.w3c.dom.Document $r1, $r3;
        org.w3c.dom.Node $r5;

        this := @this: weka.core.xml.XMLSerialization;

        parent := @parameter0: org.w3c.dom.Element;

        name := @parameter1: java.lang.String;

        classname := @parameter2: java.lang.String;

        primitive := @parameter3: boolean;

        array := @parameter4: int;

        isnull := @parameter5: boolean;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(parent);

        if parent != null goto label01;

        $r0 = this.<weka.core.xml.XMLSerialization: weka.core.xml.XMLDocument m_Document>;

        $r1 = virtualinvoke $r0.<weka.core.xml.XMLDocument: org.w3c.dom.Document getDocument()>();

        result#6 = interfaceinvoke $r1.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        goto label02;

     label01:
        $r2 = this.<weka.core.xml.XMLSerialization: weka.core.xml.XMLDocument m_Document>;

        $r3 = virtualinvoke $r2.<weka.core.xml.XMLDocument: org.w3c.dom.Document getDocument()>();

        $r4 = interfaceinvoke $r3.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>("object");

        $r5 = interfaceinvoke parent.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r4);

        result#6 = (org.w3c.dom.Element) $r5;

     label02:
        interfaceinvoke result#6.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("name", name);

        interfaceinvoke result#6.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("class", classname);

        $r6 = virtualinvoke this.<weka.core.xml.XMLSerialization: java.lang.String booleanToString(boolean)>(primitive);

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("no");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label03;

        $r7 = virtualinvoke this.<weka.core.xml.XMLSerialization: java.lang.String booleanToString(boolean)>(primitive);

        interfaceinvoke result#6.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("primitive", $r7);

     label03:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(array);

        if array <= 1 goto label04;

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(array);

        interfaceinvoke result#6.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("array", $r8);

        goto label09;

     label04:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(array);

        if array != 1 goto label05;

        $z1 = 1;

        goto label06;

     label05:
        $z1 = 0;

     label06:
        $r10 = virtualinvoke this.<weka.core.xml.XMLSerialization: java.lang.String booleanToString(boolean)>($z1);

        $z2 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("no");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label09;

        $r11 = result#6;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(array);

        if array != 1 goto label07;

        $z3 = 1;

        goto label08;

     label07:
        $z3 = 0;

     label08:
        $r14 = virtualinvoke this.<weka.core.xml.XMLSerialization: java.lang.String booleanToString(boolean)>($z3);

        interfaceinvoke $r11.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("array", $r14);

     label09:
        $r15 = virtualinvoke this.<weka.core.xml.XMLSerialization: java.lang.String booleanToString(boolean)>(isnull);

        $z4 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("no");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label10;

        $r16 = virtualinvoke this.<weka.core.xml.XMLSerialization: java.lang.String booleanToString(boolean)>(isnull);

        interfaceinvoke result#6.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>("null", $r16);

     label10:
        return result#6;
    }

    protected boolean isPrimitiveArray(java.lang.Class)
    {
        weka.core.xml.XMLSerialization this;
        java.lang.Class c, $r0, $r1, $r2;
        boolean $z0, $z1, $z2;

        this := @this: weka.core.xml.XMLSerialization;

        c := @parameter0: java.lang.Class;

        $r0 = virtualinvoke c.<java.lang.Class: java.lang.Class getComponentType()>();

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean isArray()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke c.<java.lang.Class: java.lang.Class getComponentType()>();

        $z1 = virtualinvoke this.<weka.core.xml.XMLSerialization: boolean isPrimitiveArray(java.lang.Class)>($r1);

        return $z1;

     label1:
        $r2 = virtualinvoke c.<java.lang.Class: java.lang.Class getComponentType()>();

        $z2 = virtualinvoke $r2.<java.lang.Class: boolean isPrimitive()>();

        return $z2;
    }

    protected java.beans.PropertyDescriptor determineDescriptor(java.lang.String, java.lang.String)
    {
        weka.core.xml.XMLSerialization this;
        java.lang.String className, displayName;
        java.beans.PropertyDescriptor $r0, result#6;
        java.lang.Class $r1;
        java.lang.Exception $r2;

        this := @this: weka.core.xml.XMLSerialization;

        className := @parameter0: java.lang.String;

        displayName := @parameter1: java.lang.String;

     label1:
        $r0 = new java.beans.PropertyDescriptor;

        $r1 = staticinvoke <weka.core.WekaPackageClassLoaderManager: java.lang.Class forName(java.lang.String)>(className);

        specialinvoke $r0.<java.beans.PropertyDescriptor: void <init>(java.lang.String,java.lang.Class)>(displayName, $r1);

        result#6 = $r0;

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        result#6 = null;

     label4:
        return result#6;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected boolean stringToBoolean(java.lang.String)
    {
        weka.core.xml.XMLSerialization this;
        java.lang.String s, $r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i0;

        this := @this: weka.core.xml.XMLSerialization;

        s := @parameter0: java.lang.String;

        $z0 = virtualinvoke s.<java.lang.String: boolean equals(java.lang.Object)>("");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $z1 = virtualinvoke s.<java.lang.String: boolean equals(java.lang.Object)>("yes");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = virtualinvoke s.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        $r0 = virtualinvoke s.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("[0-9]*", "");

        $z3 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label6;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(s);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 == 0 goto label4;

        $z4 = 1;

        goto label5;

     label4:
        $z4 = 0;

     label5:
        return $z4;

     label6:
        return 0;
    }

    protected java.lang.String overrideClassname(java.lang.Object)
    {
        weka.core.xml.XMLSerialization this;
        java.lang.Object o, $r2, $r4;
        java.util.Enumeration enm;
        java.lang.Class currentCls, $r0;
        java.lang.String result#4;
        java.util.Hashtable $r1, $r3;
        boolean $z0, $z1;

        this := @this: weka.core.xml.XMLSerialization;

        o := @parameter0: java.lang.Object;

        $r0 = virtualinvoke o.<java.lang.Object: java.lang.Class getClass()>();

        result#4 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r1 = this.<weka.core.xml.XMLSerialization: java.util.Hashtable m_ClassnameOverride>;

        enm = virtualinvoke $r1.<java.util.Hashtable: java.util.Enumeration keys()>();

     label1:
        $z0 = interfaceinvoke enm.<java.util.Enumeration: boolean hasMoreElements()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke enm.<java.util.Enumeration: java.lang.Object nextElement()>();

        currentCls = (java.lang.Class) $r2;

        $z1 = virtualinvoke currentCls.<java.lang.Class: boolean isInstance(java.lang.Object)>(o);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label1;

        $r3 = this.<weka.core.xml.XMLSerialization: java.util.Hashtable m_ClassnameOverride>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(currentCls);

        result#4 = (java.lang.String) $r4;

        goto label2;

     label2:
        return result#4;
    }

    protected java.lang.String overrideClassname(java.lang.String)
    {
        weka.core.xml.XMLSerialization this;
        java.lang.String classname, result#2, $r2;
        java.util.Enumeration enm;
        java.lang.Class currentCls;
        java.util.Hashtable $r0, $r3;
        boolean $z0, $z1;
        java.lang.Object $r1, $r4;

        this := @this: weka.core.xml.XMLSerialization;

        classname := @parameter0: java.lang.String;

        result#2 = classname;

        $r0 = this.<weka.core.xml.XMLSerialization: java.util.Hashtable m_ClassnameOverride>;

        enm = virtualinvoke $r0.<java.util.Hashtable: java.util.Enumeration keys()>();

     label1:
        $z0 = interfaceinvoke enm.<java.util.Enumeration: boolean hasMoreElements()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $r1 = interfaceinvoke enm.<java.util.Enumeration: java.lang.Object nextElement()>();

        currentCls = (java.lang.Class) $r1;

        $r2 = virtualinvoke currentCls.<java.lang.Class: java.lang.String getName()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(classname);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label1;

        $r3 = this.<weka.core.xml.XMLSerialization: java.util.Hashtable m_ClassnameOverride>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(currentCls);

        result#2 = (java.lang.String) $r4;

        goto label2;

     label2:
        return result#2;
    }

    protected org.w3c.dom.Element addElement(org.w3c.dom.Element, java.lang.String, java.lang.String, boolean, int)
    {
        weka.core.xml.XMLSerialization this;
        org.w3c.dom.Element parent, $r0;
        java.lang.String name, classname;
        boolean primitive;
        int array;

        this := @this: weka.core.xml.XMLSerialization;

        parent := @parameter0: org.w3c.dom.Element;

        name := @parameter1: java.lang.String;

        classname := @parameter2: java.lang.String;

        primitive := @parameter3: boolean;

        array := @parameter4: int;

        $r0 = virtualinvoke this.<weka.core.xml.XMLSerialization: org.w3c.dom.Element addElement(org.w3c.dom.Element,java.lang.String,java.lang.String,boolean,int,boolean)>(parent, name, classname, primitive, array, 0);

        return $r0;
    }

    protected java.util.Hashtable getDescriptors(java.lang.Object) throws java.lang.Exception
    {
        weka.core.xml.XMLSerialization this;
        java.lang.Object o;
        java.util.Hashtable result, $r0;
        java.beans.BeanInfo info;
        java.beans.PropertyDescriptor[] desc;
        java.lang.Class $r1;
        int i#9, $i0;
        java.beans.PropertyDescriptor $r2, $r4, $r7, $r10, $r13, $r15, $r17;
        java.lang.reflect.Method $r3, $r5;
        weka.core.xml.PropertyHandler $r6, $r9, $r12;
        java.lang.String $r8, $r11, $r14, $r16;
        boolean $z0, $z1, $z2;

        this := @this: weka.core.xml.XMLSerialization;

        o := @parameter0: java.lang.Object;

        $r0 = new java.util.Hashtable;

        specialinvoke $r0.<java.util.Hashtable: void <init>()>();

        result = $r0;

        $r1 = virtualinvoke o.<java.lang.Object: java.lang.Class getClass()>();

        info = staticinvoke <java.beans.Introspector: java.beans.BeanInfo getBeanInfo(java.lang.Class)>($r1);

        desc = interfaceinvoke info.<java.beans.BeanInfo: java.beans.PropertyDescriptor[] getPropertyDescriptors()>();

        i#9 = 0;

     label1:
        $i0 = lengthof desc;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#9 >= $i0 goto label6;

        $r2 = desc[i#9];

        $r3 = virtualinvoke $r2.<java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r3);

        if $r3 == null goto label5;

        $r4 = desc[i#9];

        $r5 = virtualinvoke $r4.<java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r5);

        if $r5 == null goto label5;

        $r6 = this.<weka.core.xml.XMLSerialization: weka.core.xml.PropertyHandler m_Properties>;

        $r7 = desc[i#9];

        $r8 = virtualinvoke $r7.<java.beans.PropertyDescriptor: java.lang.String getDisplayName()>();

        $z0 = virtualinvoke $r6.<weka.core.xml.PropertyHandler: boolean isIgnored(java.lang.String)>($r8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        goto label5;

     label2:
        $r9 = this.<weka.core.xml.XMLSerialization: weka.core.xml.PropertyHandler m_Properties>;

        $r10 = desc[i#9];

        $r11 = virtualinvoke $r10.<java.beans.PropertyDescriptor: java.lang.String getDisplayName()>();

        $z1 = virtualinvoke $r9.<weka.core.xml.PropertyHandler: boolean isIgnored(java.lang.Object,java.lang.String)>(o, $r11);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label3;

        goto label5;

     label3:
        $r12 = this.<weka.core.xml.XMLSerialization: weka.core.xml.PropertyHandler m_Properties>;

        $r13 = desc[i#9];

        $r14 = virtualinvoke $r13.<java.beans.PropertyDescriptor: java.lang.String getDisplayName()>();

        $z2 = virtualinvoke $r12.<weka.core.xml.PropertyHandler: boolean isAllowed(java.lang.Object,java.lang.String)>(o, $r14);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label4;

        goto label5;

     label4:
        $r15 = desc[i#9];

        $r16 = virtualinvoke $r15.<java.beans.PropertyDescriptor: java.lang.String getDisplayName()>();

        $r17 = desc[i#9];

        virtualinvoke result.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r17);

     label5:
        i#9 = i#9 + 1;

        goto label1;

     label6:
        return result;
    }

    protected java.lang.String booleanToString(boolean)
    {
        weka.core.xml.XMLSerialization this;
        boolean b;

        this := @this: weka.core.xml.XMLSerialization;

        b := @parameter0: boolean;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(b);

        if b == 0 goto label1;

        return "yes";

     label1:
        return "no";
    }

    public java.lang.Object read(java.lang.String) throws java.lang.Exception
    {
        weka.core.xml.XMLSerialization this;
        java.lang.String xml;
        weka.core.xml.XMLDocument $r0;
        org.w3c.dom.Document $r1;
        java.lang.Object $r2;

        this := @this: weka.core.xml.XMLSerialization;

        xml := @parameter0: java.lang.String;

        $r0 = this.<weka.core.xml.XMLSerialization: weka.core.xml.XMLDocument m_Document>;

        $r1 = virtualinvoke $r0.<weka.core.xml.XMLDocument: org.w3c.dom.Document read(java.lang.String)>(xml);

        $r2 = virtualinvoke this.<weka.core.xml.XMLSerialization: java.lang.Object fromXML(org.w3c.dom.Document)>($r1);

        return $r2;
    }

    public java.lang.Object fromXML(org.w3c.dom.Document) throws java.lang.Exception
    {
        weka.core.xml.XMLSerialization this;
        org.w3c.dom.Document document, $r11, $r13;
        org.w3c.dom.Element $r0, $r5, $r14;
        java.lang.String $r1, $r6, $r9;
        boolean $z0;
        java.lang.Exception $r2;
        java.lang.StringBuilder $r3, $r4, $r7, $r8;
        weka.core.xml.XMLDocument $r10, $r12;
        java.lang.Object $r15, $r16;

        this := @this: weka.core.xml.XMLSerialization;

        document := @parameter0: org.w3c.dom.Document;

        $r0 = interfaceinvoke document.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        $r1 = interfaceinvoke $r0.<org.w3c.dom.Element: java.lang.String getNodeName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("object");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.Exception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected \'object\' as root element, but found \'");

        $r5 = interfaceinvoke document.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        $r6 = interfaceinvoke $r5.<org.w3c.dom.Element: java.lang.String getNodeName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'!");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.Exception: void <init>(java.lang.String)>($r9);

        throw $r2;

     label1:
        $r10 = this.<weka.core.xml.XMLSerialization: weka.core.xml.XMLDocument m_Document>;

        $r11 = virtualinvoke this.<weka.core.xml.XMLSerialization: org.w3c.dom.Document readPreProcess(org.w3c.dom.Document)>(document);

        virtualinvoke $r10.<weka.core.xml.XMLDocument: void setDocument(org.w3c.dom.Document)>($r11);

        specialinvoke this.<weka.core.xml.XMLSerialization: void checkVersion()>();

        $r12 = this.<weka.core.xml.XMLSerialization: weka.core.xml.XMLDocument m_Document>;

        $r13 = virtualinvoke $r12.<weka.core.xml.XMLDocument: org.w3c.dom.Document getDocument()>();

        $r14 = interfaceinvoke $r13.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        $r15 = virtualinvoke this.<weka.core.xml.XMLSerialization: java.lang.Object invokeReadFromXML(org.w3c.dom.Element)>($r14);

        $r16 = virtualinvoke this.<weka.core.xml.XMLSerialization: java.lang.Object readPostProcess(java.lang.Object)>($r15);

        return $r16;
    }

    protected org.w3c.dom.Document readPreProcess(org.w3c.dom.Document) throws java.lang.Exception
    {
        weka.core.xml.XMLSerialization this;
        org.w3c.dom.Document document;

        this := @this: weka.core.xml.XMLSerialization;

        document := @parameter0: org.w3c.dom.Document;

        return document;
    }

    private void checkVersion()
    {
        weka.core.xml.XMLSerialization this;
        weka.core.Version version, $r0;
        java.lang.String versionStr, $r7, $r10, $r16, $r19;
        boolean $z0, $z1, $z2, $z3;
        java.io.PrintStream $r1, $r2, $r11;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r8, $r9, $r12, $r13, $r14, $r15, $r17, $r18;

        this := @this: weka.core.xml.XMLSerialization;

        $z0 = this.<weka.core.xml.XMLSerialization: boolean m_suppressWarnings>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r0 = new weka.core.Version;

        specialinvoke $r0.<weka.core.Version: void <init>()>();

        version = $r0;

        versionStr = virtualinvoke this.<weka.core.xml.XMLSerialization: java.lang.String getVersion()>();

        $z1 = virtualinvoke versionStr.<java.lang.String: boolean equals(java.lang.Object)>("");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("WARNING: has no version!");

        goto label4;

     label2:
        $z2 = virtualinvoke version.<weka.core.Version: boolean isOlder(java.lang.String)>(versionStr);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label3;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WARNING: loading a newer version (");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(versionStr);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > ");

        $r7 = <weka.core.Version: java.lang.String VERSION>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")!");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r10);

        goto label4;

     label3:
        $z3 = virtualinvoke version.<weka.core.Version: boolean isNewer(java.lang.String)>(versionStr);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label4;

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NOTE: loading an older version (");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(versionStr);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" < ");

        $r16 = <weka.core.Version: java.lang.String VERSION>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")!");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r19);

     label4:
        return;
    }

    protected java.lang.Object invokeReadFromXML(org.w3c.dom.Element) throws java.lang.Exception
    {
        weka.core.xml.XMLSerialization this;
        org.w3c.dom.Element node, $r19, $r23;
        boolean array, useDefault#2, $z0, $z1, $z2, $z3, $z4;
        java.lang.Class[] methodClasses;
        java.lang.Object[] methodArgs;
        java.lang.Throwable e, $r18, $r33;
        java.lang.reflect.Method method#4;
        java.lang.String $r0, $r1, $r4, $r7, $r10, $r14, $r24, $r26, $r30, $r32;
        weka.core.xml.XMLSerializationMethodHandler $r2, $r5, $r8, $r12;
        weka.core.xml.MethodHandler $r3, $r6, $r9, $r13;
        java.lang.Class $r11, $r15;
        java.lang.Object $r16, $r17;
        java.io.PrintStream $r20, $r27;
        java.lang.StringBuilder $r22, $r25, $r29, $r31, tmp$303016788, tmp$152174714;
        java.lang.Exception $r34, tmp$1832996904, tmp$640708831;

        this := @this: weka.core.xml.XMLSerialization;

        node := @parameter0: org.w3c.dom.Element;

        useDefault#2 = 0;

        method#4 = null;

        this.<weka.core.xml.XMLSerialization: org.w3c.dom.Element m_CurrentNode> = node;

     label01:
        $r0 = interfaceinvoke node.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("null");

        $z0 = virtualinvoke this.<weka.core.xml.XMLSerialization: boolean stringToBoolean(java.lang.String)>($r0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label02;

        useDefault#2 = 1;

     label02:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(useDefault#2);

        if useDefault#2 != 0 goto label08;

        $r1 = interfaceinvoke node.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("array");

        array = virtualinvoke this.<weka.core.xml.XMLSerialization: boolean stringToBoolean(java.lang.String)>($r1);

        $r2 = this.<weka.core.xml.XMLSerialization: weka.core.xml.XMLSerializationMethodHandler m_CustomMethods>;

        $r3 = virtualinvoke $r2.<weka.core.xml.XMLSerializationMethodHandler: weka.core.xml.MethodHandler read()>();

        $r4 = interfaceinvoke node.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("name");

        $z1 = virtualinvoke $r3.<weka.core.xml.MethodHandler: boolean contains(java.lang.String)>($r4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label03;

        $r5 = this.<weka.core.xml.XMLSerialization: weka.core.xml.XMLSerializationMethodHandler m_CustomMethods>;

        $r6 = virtualinvoke $r5.<weka.core.xml.XMLSerializationMethodHandler: weka.core.xml.MethodHandler read()>();

        $r7 = interfaceinvoke node.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("name");

        method#4 = virtualinvoke $r6.<weka.core.xml.MethodHandler: java.lang.reflect.Method get(java.lang.String)>($r7);

        goto label05;

     label03:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(array);

        if array != 0 goto label04;

        $r8 = this.<weka.core.xml.XMLSerialization: weka.core.xml.XMLSerializationMethodHandler m_CustomMethods>;

        $r9 = virtualinvoke $r8.<weka.core.xml.XMLSerializationMethodHandler: weka.core.xml.MethodHandler read()>();

        $r10 = interfaceinvoke node.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("class");

        $r11 = virtualinvoke this.<weka.core.xml.XMLSerialization: java.lang.Class determineClass(java.lang.String)>($r10);

        $z2 = virtualinvoke $r9.<weka.core.xml.MethodHandler: boolean contains(java.lang.Class)>($r11);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label04;

        $r12 = this.<weka.core.xml.XMLSerialization: weka.core.xml.XMLSerializationMethodHandler m_CustomMethods>;

        $r13 = virtualinvoke $r12.<weka.core.xml.XMLSerializationMethodHandler: weka.core.xml.MethodHandler read()>();

        $r14 = interfaceinvoke node.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("class");

        $r15 = virtualinvoke this.<weka.core.xml.XMLSerialization: java.lang.Class determineClass(java.lang.String)>($r14);

        method#4 = virtualinvoke $r13.<weka.core.xml.MethodHandler: java.lang.reflect.Method get(java.lang.Class)>($r15);

        goto label05;

     label04:
        method#4 = null;

     label05:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(method#4);

        if method#4 != null goto label06;

        $z3 = 1;

        goto label07;

     label06:
        $z3 = 0;

     label07:
        useDefault#2 = $z3;

     label08:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(useDefault#2);

        if useDefault#2 != 0 goto label10;

        methodClasses = newarray (java.lang.Class)[1];

        methodClasses[0] = class "org/w3c/dom/Element";

        methodArgs = newarray (java.lang.Object)[1];

        methodArgs[0] = node;

        $r16 = virtualinvoke method#4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(this, methodArgs);

     label09:
        return $r16;

     label10:
        $r17 = virtualinvoke this.<weka.core.xml.XMLSerialization: java.lang.Object readFromXML(org.w3c.dom.Element)>(node);

     label11:
        return $r17;

     label12:
        $r18 := @caughtexception;

        e = $r18;

        $z4 = <weka.core.xml.XMLSerialization: boolean DEBUG>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label13;

        tmp$1832996904 = (java.lang.Exception) e;

        virtualinvoke tmp$1832996904.<java.lang.Exception: void printStackTrace()>();

     label13:
        $r19 = this.<weka.core.xml.XMLSerialization: org.w3c.dom.Element m_CurrentNode>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r19);

        if $r19 == null goto label14;

        $r20 = <java.lang.System: java.io.PrintStream out>;

        tmp$303016788 = new java.lang.StringBuilder;

        specialinvoke tmp$303016788.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke tmp$303016788.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Happened near: ");

        $r23 = this.<weka.core.xml.XMLSerialization: org.w3c.dom.Element m_CurrentNode>;

        $r24 = virtualinvoke this.<weka.core.xml.XMLSerialization: java.lang.String getPath(org.w3c.dom.Element)>($r23);

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>($r26);

        this.<weka.core.xml.XMLSerialization: org.w3c.dom.Element m_CurrentNode> = null;

     label14:
        $r27 = <java.lang.System: java.io.PrintStream out>;

        tmp$152174714 = new java.lang.StringBuilder;

        specialinvoke tmp$152174714.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke tmp$152174714.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PROBLEM (read): ");

        $r30 = interfaceinvoke node.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("name");

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r27.<java.io.PrintStream: void println(java.lang.String)>($r32);

        tmp$640708831 = (java.lang.Exception) e;

        $r33 = virtualinvoke tmp$640708831.<java.lang.Exception: java.lang.Throwable fillInStackTrace()>();

        $r34 = (java.lang.Exception) $r33;

        throw $r34;

        catch java.lang.Exception from label01 to label09 with label12;
        catch java.lang.Exception from label10 to label11 with label12;
    }

    protected java.lang.Object readPostProcess(java.lang.Object) throws java.lang.Exception
    {
        weka.core.xml.XMLSerialization this;
        java.lang.Object o;

        this := @this: weka.core.xml.XMLSerialization;

        o := @parameter0: java.lang.Object;

        return o;
    }

    protected java.lang.Class determineClass(java.lang.String) throws java.lang.Exception
    {
        weka.core.xml.XMLSerialization this;
        java.lang.String name, $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15;
        java.lang.Class $r0, result#6, $r2, $r4, $r6, $r8, $r10, $r12, $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;

        this := @this: weka.core.xml.XMLSerialization;

        name := @parameter0: java.lang.String;

        $r0 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        result#6 = <java.lang.Boolean: java.lang.Class TYPE>;

        goto label9;

     label1:
        $r2 = <java.lang.Byte: java.lang.Class TYPE>;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $z1 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        result#6 = <java.lang.Byte: java.lang.Class TYPE>;

        goto label9;

     label2:
        $r4 = <java.lang.Character: java.lang.Class TYPE>;

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $z2 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label3;

        result#6 = <java.lang.Character: java.lang.Class TYPE>;

        goto label9;

     label3:
        $r6 = <java.lang.Double: java.lang.Class TYPE>;

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $z3 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label4;

        result#6 = <java.lang.Double: java.lang.Class TYPE>;

        goto label9;

     label4:
        $r8 = <java.lang.Float: java.lang.Class TYPE>;

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $z4 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label5;

        result#6 = <java.lang.Float: java.lang.Class TYPE>;

        goto label9;

     label5:
        $r10 = <java.lang.Integer: java.lang.Class TYPE>;

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $z5 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label6;

        result#6 = <java.lang.Integer: java.lang.Class TYPE>;

        goto label9;

     label6:
        $r12 = <java.lang.Long: java.lang.Class TYPE>;

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        $z6 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label7;

        result#6 = <java.lang.Long: java.lang.Class TYPE>;

        goto label9;

     label7:
        $r14 = <java.lang.Short: java.lang.Class TYPE>;

        $r15 = virtualinvoke $r14.<java.lang.Class: java.lang.String getName()>();

        $z7 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 == 0 goto label8;

        result#6 = <java.lang.Short: java.lang.Class TYPE>;

        goto label9;

     label8:
        result#6 = staticinvoke <weka.core.WekaPackageClassLoaderManager: java.lang.Class forName(java.lang.String)>(name);

     label9:
        return result#6;
    }

    public java.lang.Object readFromXML(org.w3c.dom.Element) throws java.lang.Exception
    {
        weka.core.xml.XMLSerialization this;
        org.w3c.dom.Element node, child, $r19;
        java.lang.String name, classname, $r1, $r2, $r3, $r4, $r7, $r9, $r17;
        boolean primitive, array, isnull, $z0;
        java.util.Vector children;
        java.lang.Class 'cls';
        java.lang.Class[] methodClasses;
        java.lang.Object[] methodArgs;
        java.lang.reflect.Constructor constructor;
        java.lang.Throwable $r0;
        int[] $r5;
        java.lang.Object result#46, $r6, $r8, $r18;
        int i#48, $i0, $i1, $i2, i#105, $i3;
        java.lang.Exception $r10, $r11;
        java.io.PrintStream $r12;
        java.lang.StringBuilder $r13, $r14, $r15, $r16;

        this := @this: weka.core.xml.XMLSerialization;

        node := @parameter0: org.w3c.dom.Element;

        $z0 = <weka.core.xml.XMLSerialization: boolean DEBUG>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label01;

        $r0 = new java.lang.Throwable;

        specialinvoke $r0.<java.lang.Throwable: void <init>()>();

        $r1 = interfaceinvoke node.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("name");

        virtualinvoke this.<weka.core.xml.XMLSerialization: void trace(java.lang.Throwable,java.lang.String)>($r0, $r1);

     label01:
        this.<weka.core.xml.XMLSerialization: org.w3c.dom.Element m_CurrentNode> = node;

        name = interfaceinvoke node.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("name");

        classname = interfaceinvoke node.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("class");

        $r2 = interfaceinvoke node.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("primitive");

        primitive = virtualinvoke this.<weka.core.xml.XMLSerialization: boolean stringToBoolean(java.lang.String)>($r2);

        $r3 = interfaceinvoke node.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("array");

        array = virtualinvoke this.<weka.core.xml.XMLSerialization: boolean stringToBoolean(java.lang.String)>($r3);

        $r4 = interfaceinvoke node.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("null");

        isnull = virtualinvoke this.<weka.core.xml.XMLSerialization: boolean stringToBoolean(java.lang.String)>($r4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isnull);

        if isnull == 0 goto label02;

        return null;

     label02:
        children = staticinvoke <weka.core.xml.XMLDocument: java.util.Vector getChildTags(org.w3c.dom.Node)>(node);

        'cls' = virtualinvoke this.<weka.core.xml.XMLSerialization: java.lang.Class determineClass(java.lang.String)>(classname);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(array);

        if array == 0 goto label04;

        $r5 = virtualinvoke this.<weka.core.xml.XMLSerialization: int[] getArrayDimensions(org.w3c.dom.Element)>(node);

        result#46 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>('cls', $r5);

        i#48 = 0;

     label03:
        $i0 = virtualinvoke children.<java.util.Vector: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#48);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#48 >= $i0 goto label15;

        $r6 = virtualinvoke children.<java.util.Vector: java.lang.Object get(int)>(i#48);

        child = (org.w3c.dom.Element) $r6;

        $r7 = interfaceinvoke child.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("name");

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7);

        $r8 = virtualinvoke this.<weka.core.xml.XMLSerialization: java.lang.Object invokeReadFromXML(org.w3c.dom.Element)>(child);

        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>(result#46, $i1, $r8);

        i#48 = i#48 + 1;

        goto label03;

     label04:
        $i2 = virtualinvoke children.<java.util.Vector: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 != 0 goto label13;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(primitive);

        if primitive == 0 goto label05;

        result#46 = virtualinvoke this.<weka.core.xml.XMLSerialization: java.lang.Object getPrimitive(org.w3c.dom.Element)>(node);

        goto label15;

     label05:
        methodClasses = newarray (java.lang.Class)[1];

        methodClasses[0] = class "java/lang/String";

        methodArgs = newarray (java.lang.Object)[1];

        $r9 = staticinvoke <weka.core.xml.XMLDocument: java.lang.String getContent(org.w3c.dom.Element)>(node);

        methodArgs[0] = $r9;

     label06:
        constructor = virtualinvoke 'cls'.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(methodClasses);

        result#46 = virtualinvoke constructor.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(methodArgs);

     label07:
        goto label15;

     label08:
        $r10 := @caughtexception;

     label09:
        result#46 = virtualinvoke 'cls'.<java.lang.Class: java.lang.Object newInstance()>();

     label10:
        goto label12;

     label11:
        $r11 := @caughtexception;

        result#46 = null;

        $r12 = <java.lang.System: java.io.PrintStream out>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ERROR: Can\'t instantiate \'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(classname);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'!");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r17);

     label12:
        goto label15;

     label13:
        result#46 = virtualinvoke 'cls'.<java.lang.Class: java.lang.Object newInstance()>();

        i#105 = 0;

     label14:
        $i3 = virtualinvoke children.<java.util.Vector: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#105);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if i#105 >= $i3 goto label15;

        $r18 = virtualinvoke children.<java.util.Vector: java.lang.Object get(int)>(i#105);

        $r19 = (org.w3c.dom.Element) $r18;

        result#46 = virtualinvoke this.<weka.core.xml.XMLSerialization: java.lang.Object readFromXML(java.lang.Object,java.lang.String,org.w3c.dom.Element)>(result#46, name, $r19);

        i#105 = i#105 + 1;

        goto label14;

     label15:
        return result#46;

        catch java.lang.Exception from label06 to label07 with label08;
        catch java.lang.Exception from label09 to label10 with label11;
    }

    protected int[] getArrayDimensions(org.w3c.dom.Element)
    {
        weka.core.xml.XMLSerialization this;
        org.w3c.dom.Element node, $r3;
        java.util.Vector tmpVector, children#8, $r1;
        int[] tmp, result#49;
        java.lang.String $r0;
        boolean $z0;
        int $i0, $i1, i#26, $i2, $i3, $i4, i#51, $i5, $i6, $i7, $i8, $i9;
        java.lang.Object $r2, $r7;
        java.lang.Integer $r4, $r5, $r6, $r8;

        this := @this: weka.core.xml.XMLSerialization;

        node := @parameter0: org.w3c.dom.Element;

        $r0 = interfaceinvoke node.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("array");

        $z0 = virtualinvoke this.<weka.core.xml.XMLSerialization: boolean stringToBoolean(java.lang.String)>($r0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        children#8 = staticinvoke <weka.core.xml.XMLDocument: java.util.Vector getChildTags(org.w3c.dom.Node)>(node);

        goto label2;

     label1:
        children#8 = null;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(children#8);

        if children#8 == null goto label8;

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>()>();

        tmpVector = $r1;

        $i0 = virtualinvoke children#8.<java.util.Vector: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label5;

        $r2 = virtualinvoke children#8.<java.util.Vector: java.lang.Object get(int)>(0);

        $r3 = (org.w3c.dom.Element) $r2;

        tmp = virtualinvoke this.<weka.core.xml.XMLSerialization: int[] getArrayDimensions(org.w3c.dom.Element)>($r3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(tmp);

        if tmp == null goto label4;

        $i1 = lengthof tmp;

        i#26 = $i1 - 1;

     label3:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#26);

        if i#26 < 0 goto label4;

        $r4 = new java.lang.Integer;

        $i2 = tmp[i#26];

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>($i2);

        virtualinvoke tmpVector.<java.util.Vector: boolean add(java.lang.Object)>($r4);

        i#26 = i#26 + -1;

        goto label3;

     label4:
        $r5 = new java.lang.Integer;

        $i3 = virtualinvoke children#8.<java.util.Vector: int size()>();

        specialinvoke $r5.<java.lang.Integer: void <init>(int)>($i3);

        virtualinvoke tmpVector.<java.util.Vector: void add(int,java.lang.Object)>(0, $r5);

        goto label6;

     label5:
        $r6 = new java.lang.Integer;

        specialinvoke $r6.<java.lang.Integer: void <init>(int)>(0);

        virtualinvoke tmpVector.<java.util.Vector: boolean add(java.lang.Object)>($r6);

     label6:
        $i4 = virtualinvoke tmpVector.<java.util.Vector: int size()>();

        result#49 = newarray (int)[$i4];

        i#51 = 0;

     label7:
        $i5 = lengthof result#49;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#51);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if i#51 >= $i5 goto label9;

        $i6 = virtualinvoke tmpVector.<java.util.Vector: int size()>();

        $i7 = $i6 - i#51;

        $i8 = $i7 - 1;

        $r7 = virtualinvoke tmpVector.<java.util.Vector: java.lang.Object get(int)>($i8);

        $r8 = (java.lang.Integer) $r7;

        $i9 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        result#49[i#51] = $i9;

        i#51 = i#51 + 1;

        goto label7;

     label8:
        result#49 = null;

     label9:
        return result#49;
    }

    protected java.lang.Object getPrimitive(org.w3c.dom.Element) throws java.lang.Exception
    {
        weka.core.xml.XMLSerialization this;
        org.w3c.dom.Element node;
        java.lang.Class 'cls', $r1, $r4, $r7, $r10, $r13, $r16, $r19, $r22;
        java.lang.Object tmpResult, result;
        java.lang.String $r0, $r3, $r6, $r9, $r12, $r15, $r18, $r21, $r24, $r28, $r31;
        java.lang.Boolean $r2;
        java.lang.Byte $r5;
        java.lang.Character $r8;
        char $c0;
        java.lang.Double $r11;
        java.lang.Float $r14;
        java.lang.Integer $r17;
        java.lang.Long $r20;
        java.lang.Short $r23;
        java.lang.Exception $r25;
        java.lang.StringBuilder $r26, $r27, $r29, $r30;

        this := @this: weka.core.xml.XMLSerialization;

        node := @parameter0: org.w3c.dom.Element;

        $r0 = interfaceinvoke node.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("class");

        'cls' = virtualinvoke this.<weka.core.xml.XMLSerialization: java.lang.Class determineClass(java.lang.String)>($r0);

        tmpResult = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>('cls', 1);

        $r1 = <java.lang.Boolean: java.lang.Class TYPE>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>('cls');

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if 'cls' != $r1 goto label1;

        $r2 = new java.lang.Boolean;

        $r3 = staticinvoke <weka.core.xml.XMLDocument: java.lang.String getContent(org.w3c.dom.Element)>(node);

        specialinvoke $r2.<java.lang.Boolean: void <init>(java.lang.String)>($r3);

        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>(tmpResult, 0, $r2);

        goto label9;

     label1:
        $r4 = <java.lang.Byte: java.lang.Class TYPE>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>('cls');

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        if 'cls' != $r4 goto label2;

        $r5 = new java.lang.Byte;

        $r6 = staticinvoke <weka.core.xml.XMLDocument: java.lang.String getContent(org.w3c.dom.Element)>(node);

        specialinvoke $r5.<java.lang.Byte: void <init>(java.lang.String)>($r6);

        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>(tmpResult, 0, $r5);

        goto label9;

     label2:
        $r7 = <java.lang.Character: java.lang.Class TYPE>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>('cls');

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r7);

        if 'cls' != $r7 goto label3;

        $r8 = new java.lang.Character;

        $r9 = staticinvoke <weka.core.xml.XMLDocument: java.lang.String getContent(org.w3c.dom.Element)>(node);

        $c0 = virtualinvoke $r9.<java.lang.String: char charAt(int)>(0);

        specialinvoke $r8.<java.lang.Character: void <init>(char)>($c0);

        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>(tmpResult, 0, $r8);

        goto label9;

     label3:
        $r10 = <java.lang.Double: java.lang.Class TYPE>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>('cls');

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r10);

        if 'cls' != $r10 goto label4;

        $r11 = new java.lang.Double;

        $r12 = staticinvoke <weka.core.xml.XMLDocument: java.lang.String getContent(org.w3c.dom.Element)>(node);

        specialinvoke $r11.<java.lang.Double: void <init>(java.lang.String)>($r12);

        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>(tmpResult, 0, $r11);

        goto label9;

     label4:
        $r13 = <java.lang.Float: java.lang.Class TYPE>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>('cls');

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r13);

        if 'cls' != $r13 goto label5;

        $r14 = new java.lang.Float;

        $r15 = staticinvoke <weka.core.xml.XMLDocument: java.lang.String getContent(org.w3c.dom.Element)>(node);

        specialinvoke $r14.<java.lang.Float: void <init>(java.lang.String)>($r15);

        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>(tmpResult, 0, $r14);

        goto label9;

     label5:
        $r16 = <java.lang.Integer: java.lang.Class TYPE>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>('cls');

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r16);

        if 'cls' != $r16 goto label6;

        $r17 = new java.lang.Integer;

        $r18 = staticinvoke <weka.core.xml.XMLDocument: java.lang.String getContent(org.w3c.dom.Element)>(node);

        specialinvoke $r17.<java.lang.Integer: void <init>(java.lang.String)>($r18);

        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>(tmpResult, 0, $r17);

        goto label9;

     label6:
        $r19 = <java.lang.Long: java.lang.Class TYPE>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>('cls');

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r19);

        if 'cls' != $r19 goto label7;

        $r20 = new java.lang.Long;

        $r21 = staticinvoke <weka.core.xml.XMLDocument: java.lang.String getContent(org.w3c.dom.Element)>(node);

        specialinvoke $r20.<java.lang.Long: void <init>(java.lang.String)>($r21);

        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>(tmpResult, 0, $r20);

        goto label9;

     label7:
        $r22 = <java.lang.Short: java.lang.Class TYPE>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>('cls');

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r22);

        if 'cls' != $r22 goto label8;

        $r23 = new java.lang.Short;

        $r24 = staticinvoke <weka.core.xml.XMLDocument: java.lang.String getContent(org.w3c.dom.Element)>(node);

        specialinvoke $r23.<java.lang.Short: void <init>(java.lang.String)>($r24);

        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>(tmpResult, 0, $r23);

        goto label9;

     label8:
        $r25 = new java.lang.Exception;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot get primitive for class \'");

        $r28 = virtualinvoke 'cls'.<java.lang.Class: java.lang.String getName()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'!");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.Exception: void <init>(java.lang.String)>($r31);

        throw $r25;

     label9:
        result = staticinvoke <java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>(tmpResult, 0);

        return result;
    }

    public java.lang.Object readFromXML(java.lang.Object, java.lang.String, org.w3c.dom.Element) throws java.lang.Exception
    {
        weka.core.xml.XMLSerialization this;
        java.lang.Object o, result, tmpResult, $r5;
        java.lang.String name, methodName, $r1, $r3, $r13, $r21, $r31, $r34;
        org.w3c.dom.Element child;
        java.util.Hashtable descriptors;
        java.beans.PropertyDescriptor descriptor;
        java.lang.reflect.Method method;
        java.lang.Object[] methodArgs;
        java.lang.Class paramClass;
        java.lang.Exception ex, $r24;
        weka.core.xml.PropertyHandler $r0, $r2, $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        weka.core.xml.XMLSerializationMethodHandler $r6;
        weka.core.xml.MethodHandler $r7;
        java.util.List $r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r15, $r16, $r17, $r18, $r19, $r20, $r26, $r27, $r28, $r29, $r32, $r33;
        java.io.PrintStream $r14, $r25;
        java.lang.Class[] $r22;
        int $i0;
        java.lang.Throwable $r30;

        this := @this: weka.core.xml.XMLSerialization;

        o := @parameter0: java.lang.Object;

        name := @parameter1: java.lang.String;

        child := @parameter2: org.w3c.dom.Element;

        result = o;

        descriptors = virtualinvoke this.<weka.core.xml.XMLSerialization: java.util.Hashtable getDescriptors(java.lang.Object)>(result);

        methodName = interfaceinvoke child.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("name");

        $r0 = this.<weka.core.xml.XMLSerialization: weka.core.xml.PropertyHandler m_Properties>;

        $r1 = virtualinvoke this.<weka.core.xml.XMLSerialization: java.lang.String getPath(org.w3c.dom.Element)>(child);

        $z0 = virtualinvoke $r0.<weka.core.xml.PropertyHandler: boolean isIgnored(java.lang.String)>($r1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label01;

        return result;

     label01:
        $r2 = this.<weka.core.xml.XMLSerialization: weka.core.xml.PropertyHandler m_Properties>;

        $r3 = virtualinvoke this.<weka.core.xml.XMLSerialization: java.lang.String getPath(org.w3c.dom.Element)>(child);

        $z1 = virtualinvoke $r2.<weka.core.xml.PropertyHandler: boolean isIgnored(java.lang.Object,java.lang.String)>(result, $r3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label02;

        return result;

     label02:
        $r4 = this.<weka.core.xml.XMLSerialization: weka.core.xml.PropertyHandler m_Properties>;

        $z2 = virtualinvoke $r4.<weka.core.xml.PropertyHandler: boolean isAllowed(java.lang.Object,java.lang.String)>(result, methodName);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label03;

        return result;

     label03:
        $r5 = virtualinvoke descriptors.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(methodName);

        descriptor = (java.beans.PropertyDescriptor) $r5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(descriptor);

        if descriptor != null goto label05;

        $r6 = this.<weka.core.xml.XMLSerialization: weka.core.xml.XMLSerializationMethodHandler m_CustomMethods>;

        $r7 = virtualinvoke $r6.<weka.core.xml.XMLSerializationMethodHandler: weka.core.xml.MethodHandler read()>();

        $z3 = virtualinvoke $r7.<weka.core.xml.MethodHandler: boolean contains(java.lang.String)>(methodName);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label04;

        $r8 = <weka.core.xml.XMLSerialization: java.util.List SUPPRESS_PROPERTY_WARNINGS>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(methodName);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $z4 = interfaceinvoke $r8.<java.util.List: boolean contains(java.lang.Object)>($r13);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label04;

        $r14 = <java.lang.System: java.io.PrintStream out>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WARNING: unknown property \'");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(methodName);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'!");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>($r21);

     label04:
        return result;

     label05:
        method = virtualinvoke descriptor.<java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>();

        methodArgs = newarray (java.lang.Object)[1];

        tmpResult = virtualinvoke this.<weka.core.xml.XMLSerialization: java.lang.Object invokeReadFromXML(org.w3c.dom.Element)>(child);

        $r22 = virtualinvoke method.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        paramClass = $r22[0];

        $z5 = virtualinvoke paramClass.<java.lang.Class: boolean isArray()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label07;

        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(tmpResult);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 0 goto label06;

        return result;

     label06:
        methodArgs[0] = tmpResult;

        goto label08;

     label07:
        methodArgs[0] = tmpResult;

     label08:
        virtualinvoke method.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(result, methodArgs);

     label09:
        goto label11;

     label10:
        $r24 := @caughtexception;

        ex = $r24;

        $r25 = <java.lang.System: java.io.PrintStream err>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Warning: error invoking method: ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(methodName);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r30 = virtualinvoke ex.<java.lang.Exception: java.lang.Throwable getCause()>();

        $r31 = virtualinvoke $r30.<java.lang.Throwable: java.lang.String getMessage()>();

        $r32 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r25.<java.io.PrintStream: void println(java.lang.String)>($r34);

     label11:
        return result;

        catch java.lang.Exception from label08 to label09 with label10;
    }

    public java.lang.String getVersion()
    {
        weka.core.xml.XMLSerialization this;
        org.w3c.dom.Document doc;
        java.lang.String result;
        weka.core.xml.XMLDocument $r0;
        org.w3c.dom.Element $r1;

        this := @this: weka.core.xml.XMLSerialization;

        $r0 = this.<weka.core.xml.XMLSerialization: weka.core.xml.XMLDocument m_Document>;

        doc = virtualinvoke $r0.<weka.core.xml.XMLDocument: org.w3c.dom.Document getDocument()>();

        $r1 = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        result = interfaceinvoke $r1.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("version");

        return result;
    }


