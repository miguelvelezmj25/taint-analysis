    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        boolean $z0, $z1;
        java.lang.String $r2;

        $r0 = class "berkeley/com/sleepycat/je/log/LogBufferPool";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <berkeley.com.sleepycat.je.log.LogBufferPool: boolean $assertionsDisabled> = $z1;

        $r1 = class "berkeley/com/sleepycat/je/log/LogBufferPool";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        <berkeley.com.sleepycat.je.log.LogBufferPool: java.lang.String DEBUG_NAME> = $r2;

        return;
    }

    void <init>(berkeley.com.sleepycat.je.log.FileManager, berkeley.com.sleepycat.je.dbi.EnvironmentImpl) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.log.LogBufferPool this;
        berkeley.com.sleepycat.je.log.FileManager fileManager;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        berkeley.com.sleepycat.je.dbi.DbConfigManager configManager;
        java.lang.StringBuilder $r0, $r2, $r3;
        java.lang.String $r1, $r4;
        berkeley.com.sleepycat.je.latch.Latch $r5;
        boolean $z0;
        java.util.LinkedList $r6;
        java.lang.Object $r7;
        berkeley.com.sleepycat.je.log.LogBuffer $r8;
        berkeley.com.sleepycat.je.utilint.StatGroup $r9, $r11, $r14, $r17, $r20, $r23;
        berkeley.com.sleepycat.je.utilint.AtomicLongStat $r10, $r13;
        berkeley.com.sleepycat.je.utilint.StatDefinition $r12, $r15, $r18, $r21, $r24;
        berkeley.com.sleepycat.je.utilint.IntStat $r16;
        berkeley.com.sleepycat.je.utilint.LongStat $r19, $r22;

        this := @this: berkeley.com.sleepycat.je.log.LogBufferPool;

        fileManager := @parameter0: berkeley.com.sleepycat.je.log.FileManager;

        envImpl := @parameter1: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl> = null;

        this.<berkeley.com.sleepycat.je.log.LogBufferPool: int dirtyStart> = -1;

        this.<berkeley.com.sleepycat.je.log.LogBufferPool: int dirtyEnd> = -1;

        this.<berkeley.com.sleepycat.je.log.LogBufferPool: long minBufferLsn> = 0L;

        this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.log.FileManager fileManager> = fileManager;

        this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl> = envImpl;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = <berkeley.com.sleepycat.je.log.LogBufferPool: java.lang.String DEBUG_NAME>;

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_FullLatch");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = staticinvoke <berkeley.com.sleepycat.je.latch.LatchFactory: berkeley.com.sleepycat.je.latch.Latch createExclusiveLatch(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String,boolean)>(envImpl, $r4, 1);

        this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.latch.Latch bufferPoolLatch> = $r5;

        configManager = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.DbConfigManager getConfigManager()>();

        $z0 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean isMemOnly()>();

        this.<berkeley.com.sleepycat.je.log.LogBufferPool: boolean runInMemory> = $z0;

        virtualinvoke this.<berkeley.com.sleepycat.je.log.LogBufferPool: void reset(berkeley.com.sleepycat.je.dbi.DbConfigManager)>(configManager);

        $r6 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: java.util.LinkedList bufferPool>;

        $r7 = virtualinvoke $r6.<java.util.LinkedList: java.lang.Object getFirst()>();

        $r8 = (berkeley.com.sleepycat.je.log.LogBuffer) $r7;

        this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.log.LogBuffer currentWriteBuffer> = $r8;

        this.<berkeley.com.sleepycat.je.log.LogBufferPool: int currentWriteBufferIndex> = 0;

        $r9 = new berkeley.com.sleepycat.je.utilint.StatGroup;

        specialinvoke $r9.<berkeley.com.sleepycat.je.utilint.StatGroup: void <init>(java.lang.String,java.lang.String)>("LogBufferPool", "LogBufferPool statistics");

        this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.utilint.StatGroup stats> = $r9;

        $r10 = new berkeley.com.sleepycat.je.utilint.AtomicLongStat;

        $r11 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.utilint.StatGroup stats>;

        $r12 = <berkeley.com.sleepycat.je.log.LogStatDefinition: berkeley.com.sleepycat.je.utilint.StatDefinition LBFP_NOT_RESIDENT>;

        specialinvoke $r10.<berkeley.com.sleepycat.je.utilint.AtomicLongStat: void <init>(berkeley.com.sleepycat.je.utilint.StatGroup,berkeley.com.sleepycat.je.utilint.StatDefinition)>($r11, $r12);

        this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.utilint.AtomicLongStat nNotResident> = $r10;

        $r13 = new berkeley.com.sleepycat.je.utilint.AtomicLongStat;

        $r14 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.utilint.StatGroup stats>;

        $r15 = <berkeley.com.sleepycat.je.log.LogStatDefinition: berkeley.com.sleepycat.je.utilint.StatDefinition LBFP_MISS>;

        specialinvoke $r13.<berkeley.com.sleepycat.je.utilint.AtomicLongStat: void <init>(berkeley.com.sleepycat.je.utilint.StatGroup,berkeley.com.sleepycat.je.utilint.StatDefinition)>($r14, $r15);

        this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.utilint.AtomicLongStat nCacheMiss> = $r13;

        $r16 = new berkeley.com.sleepycat.je.utilint.IntStat;

        $r17 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.utilint.StatGroup stats>;

        $r18 = <berkeley.com.sleepycat.je.log.LogStatDefinition: berkeley.com.sleepycat.je.utilint.StatDefinition LBFP_LOG_BUFFERS>;

        specialinvoke $r16.<berkeley.com.sleepycat.je.utilint.IntStat: void <init>(berkeley.com.sleepycat.je.utilint.StatGroup,berkeley.com.sleepycat.je.utilint.StatDefinition)>($r17, $r18);

        this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.utilint.IntStat logBuffers> = $r16;

        $r19 = new berkeley.com.sleepycat.je.utilint.LongStat;

        $r20 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.utilint.StatGroup stats>;

        $r21 = <berkeley.com.sleepycat.je.log.LogStatDefinition: berkeley.com.sleepycat.je.utilint.StatDefinition LBFP_BUFFER_BYTES>;

        specialinvoke $r19.<berkeley.com.sleepycat.je.utilint.LongStat: void <init>(berkeley.com.sleepycat.je.utilint.StatGroup,berkeley.com.sleepycat.je.utilint.StatDefinition)>($r20, $r21);

        this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.utilint.LongStat nBufferBytes> = $r19;

        $r22 = new berkeley.com.sleepycat.je.utilint.LongStat;

        $r23 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.utilint.StatGroup stats>;

        $r24 = <berkeley.com.sleepycat.je.log.LogStatDefinition: berkeley.com.sleepycat.je.utilint.StatDefinition LBFP_NO_FREE_BUFFER>;

        specialinvoke $r22.<berkeley.com.sleepycat.je.utilint.LongStat: void <init>(berkeley.com.sleepycat.je.utilint.StatGroup,berkeley.com.sleepycat.je.utilint.StatDefinition)>($r23, $r24);

        this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.utilint.LongStat nNoFreeBuffer> = $r22;

        return;
    }

    void reset(berkeley.com.sleepycat.je.dbi.DbConfigManager) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.log.LogBufferPool this;
        berkeley.com.sleepycat.je.dbi.DbConfigManager configManager;
        long logBufferBudget, logFileSize;
        java.util.LinkedList newPool, $r0, $r6, $r10;
        boolean $z0, $z1;
        berkeley.com.sleepycat.je.log.LogBuffer $r1, $r7, $r12;
        berkeley.com.sleepycat.je.config.IntConfigParam $r2;
        int numBuffers#13, $i0, newBufferSize#25, $i1, newBufferSize#30, i#37;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r3, $r8;
        berkeley.com.sleepycat.je.dbi.MemoryBudget $r4;
        berkeley.com.sleepycat.je.config.LongConfigParam $r5;
        berkeley.com.sleepycat.je.latch.Latch $r9, $r13;
        java.lang.Object $r11;

        this := @this: berkeley.com.sleepycat.je.log.LogBufferPool;

        configManager := @parameter0: berkeley.com.sleepycat.je.dbi.DbConfigManager;

        $z0 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: boolean runInMemory>;

        if $z0 == 0 goto label1;

        $r0 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: java.util.LinkedList bufferPool>;

        if $r0 == null goto label1;

        return;

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.log.LogBuffer currentWriteBuffer>;

        if $r1 == null goto label2;

        virtualinvoke this.<berkeley.com.sleepycat.je.log.LogBufferPool: void bumpAndWriteDirty(int,boolean)>(0, 1);

     label2:
        $r2 = <berkeley.com.sleepycat.je.config.EnvironmentParams: berkeley.com.sleepycat.je.config.IntConfigParam NUM_LOG_BUFFERS>;

        numBuffers#13 = virtualinvoke configManager.<berkeley.com.sleepycat.je.dbi.DbConfigManager: int getInt(berkeley.com.sleepycat.je.config.IntConfigParam)>($r2);

        $r3 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r4 = virtualinvoke $r3.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.MemoryBudget getMemoryBudget()>();

        logBufferBudget = virtualinvoke $r4.<berkeley.com.sleepycat.je.dbi.MemoryBudget: long getLogBufferBudget()>();

        $r5 = <berkeley.com.sleepycat.je.config.EnvironmentParams: berkeley.com.sleepycat.je.config.LongConfigParam LOG_FILE_MAX>;

        logFileSize = virtualinvoke configManager.<berkeley.com.sleepycat.je.dbi.DbConfigManager: long getLong(berkeley.com.sleepycat.je.config.LongConfigParam)>($r5);

        $i0 = (int) logBufferBudget;

        newBufferSize#25 = $i0 / numBuffers#13;

        $i1 = (int) logFileSize;

        newBufferSize#30 = staticinvoke <java.lang.Math: int min(int,int)>(newBufferSize#25, $i1);

        $r6 = new java.util.LinkedList;

        specialinvoke $r6.<java.util.LinkedList: void <init>()>();

        newPool = $r6;

        $z1 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: boolean runInMemory>;

        if $z1 == 0 goto label3;

        numBuffers#13 = 1;

     label3:
        i#37 = 0;

     label4:
        if i#37 >= numBuffers#13 goto label5;

        $r7 = new berkeley.com.sleepycat.je.log.LogBuffer;

        $r8 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        specialinvoke $r7.<berkeley.com.sleepycat.je.log.LogBuffer: void <init>(int,berkeley.com.sleepycat.je.dbi.EnvironmentImpl)>(newBufferSize#30, $r8);

        virtualinvoke newPool.<java.util.LinkedList: boolean add(java.lang.Object)>($r7);

        i#37 = i#37 + 1;

        goto label4;

     label5:
        $r9 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.latch.Latch bufferPoolLatch>;

        interfaceinvoke $r9.<berkeley.com.sleepycat.je.latch.Latch: void acquireExclusive()>();

        this.<berkeley.com.sleepycat.je.log.LogBufferPool: java.util.LinkedList bufferPool> = newPool;

        this.<berkeley.com.sleepycat.je.log.LogBufferPool: int nLogBuffers> = numBuffers#13;

        this.<berkeley.com.sleepycat.je.log.LogBufferPool: int logBufferSize> = newBufferSize#30;

        $r10 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: java.util.LinkedList bufferPool>;

        $r11 = virtualinvoke $r10.<java.util.LinkedList: java.lang.Object getFirst()>();

        $r12 = (berkeley.com.sleepycat.je.log.LogBuffer) $r11;

        this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.log.LogBuffer currentWriteBuffer> = $r12;

        this.<berkeley.com.sleepycat.je.log.LogBufferPool: int currentWriteBufferIndex> = 0;

        $r13 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.latch.Latch bufferPoolLatch>;

        interfaceinvoke $r13.<berkeley.com.sleepycat.je.latch.Latch: void release()>();

        return;
    }

    void bumpAndWriteDirty(int, boolean)
    {
        berkeley.com.sleepycat.je.log.LogBufferPool this;
        int sizeNeeded;
        boolean flushWriteQueue, $z0, $z1;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r1;

        this := @this: berkeley.com.sleepycat.je.log.LogBufferPool;

        sizeNeeded := @parameter0: int;

        flushWriteQueue := @parameter1: boolean;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.log.LogBufferPool: boolean bumpCurrent(int)>(sizeNeeded);

        if $z0 != 0 goto label2;

        virtualinvoke this.<berkeley.com.sleepycat.je.log.LogBufferPool: void writeDirty(boolean)>(flushWriteQueue);

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.log.LogBufferPool: boolean bumpCurrent(int)>(sizeNeeded);

        if $z1 == 0 goto label1;

        virtualinvoke this.<berkeley.com.sleepycat.je.log.LogBufferPool: void writeDirty(boolean)>(flushWriteQueue);

        goto label3;

     label1:
        $r0 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r1 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String)>($r0, "No free log buffers.");

        throw $r1;

     label2:
        virtualinvoke this.<berkeley.com.sleepycat.je.log.LogBufferPool: void writeDirty(boolean)>(flushWriteQueue);

     label3:
        return;
    }

    boolean bumpCurrent(int)
    {
        berkeley.com.sleepycat.je.log.LogBufferPool this;
        int sizeNeeded, bufferSize, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        berkeley.com.sleepycat.je.log.LogBuffer latchedBuffer, nextToUse, newInitialBuffer, $r1, $r2, $r4, $r7;
        boolean l4, l5, l3#13, $z0, l3#60;
        java.lang.Throwable l6, $r17;
        berkeley.com.sleepycat.je.latch.Latch $r0, $r3, $r9, $r11, $r16, $r18;
        long $l0;
        byte $b1;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r5;
        java.util.LinkedList $r6, $r8, $r12, $r14;
        berkeley.com.sleepycat.je.utilint.LongStat $r10;
        java.lang.Object $r13, $r15;

        this := @this: berkeley.com.sleepycat.je.log.LogBufferPool;

        sizeNeeded := @parameter0: int;

        $r0 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.latch.Latch bufferPoolLatch>;

        interfaceinvoke $r0.<berkeley.com.sleepycat.je.latch.Latch: void acquireExclusive()>();

        $r1 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.log.LogBuffer currentWriteBuffer>;

        virtualinvoke $r1.<berkeley.com.sleepycat.je.log.LogBuffer: void latchForWrite()>();

        latchedBuffer = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.log.LogBuffer currentWriteBuffer>;

     label01:
        $r2 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.log.LogBuffer currentWriteBuffer>;

        $l0 = virtualinvoke $r2.<berkeley.com.sleepycat.je.log.LogBuffer: long getFirstLsn()>();

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label03;

     label02:
        virtualinvoke latchedBuffer.<berkeley.com.sleepycat.je.log.LogBuffer: void release()>();

        $r3 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.latch.Latch bufferPoolLatch>;

        interfaceinvoke $r3.<berkeley.com.sleepycat.je.latch.Latch: void releaseIfOwner()>();

        return 1;

     label03:
        $z0 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: boolean runInMemory>;

        if $z0 == 0 goto label07;

        $i2 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: int logBufferSize>;

        if $i2 <= sizeNeeded goto label04;

        $i3 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: int logBufferSize>;

        goto label05;

     label04:
        $i3 = sizeNeeded;

     label05:
        bufferSize = $i3;

        $r4 = new berkeley.com.sleepycat.je.log.LogBuffer;

        $r5 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        specialinvoke $r4.<berkeley.com.sleepycat.je.log.LogBuffer: void <init>(int,berkeley.com.sleepycat.je.dbi.EnvironmentImpl)>(bufferSize, $r5);

        this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.log.LogBuffer currentWriteBuffer> = $r4;

        $r6 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: java.util.LinkedList bufferPool>;

        $r7 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.log.LogBuffer currentWriteBuffer>;

        virtualinvoke $r6.<java.util.LinkedList: boolean add(java.lang.Object)>($r7);

        $r8 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: java.util.LinkedList bufferPool>;

        $i4 = virtualinvoke $r8.<java.util.LinkedList: int size()>();

        $i5 = $i4 - 1;

        this.<berkeley.com.sleepycat.je.log.LogBufferPool: int currentWriteBufferIndex> = $i5;

     label06:
        virtualinvoke latchedBuffer.<berkeley.com.sleepycat.je.log.LogBuffer: void release()>();

        $r9 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.latch.Latch bufferPoolLatch>;

        interfaceinvoke $r9.<berkeley.com.sleepycat.je.latch.Latch: void releaseIfOwner()>();

        return 1;

     label07:
        $i6 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: int dirtyStart>;

        if $i6 >= 0 goto label08;

        $i7 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: int currentWriteBufferIndex>;

        this.<berkeley.com.sleepycat.je.log.LogBufferPool: int dirtyStart> = $i7;

        goto label10;

     label08:
        $i8 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: int currentWriteBufferIndex>;

        $i9 = specialinvoke this.<berkeley.com.sleepycat.je.log.LogBufferPool: int getNextSlot(int)>($i8);

        $i10 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: int dirtyStart>;

        if $i9 != $i10 goto label10;

        $r10 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.utilint.LongStat nNoFreeBuffer>;

        virtualinvoke $r10.<berkeley.com.sleepycat.je.utilint.LongStat: void increment()>();

     label09:
        virtualinvoke latchedBuffer.<berkeley.com.sleepycat.je.log.LogBuffer: void release()>();

        $r11 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.latch.Latch bufferPoolLatch>;

        interfaceinvoke $r11.<berkeley.com.sleepycat.je.latch.Latch: void releaseIfOwner()>();

        return 0;

     label10:
        $i11 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: int currentWriteBufferIndex>;

        this.<berkeley.com.sleepycat.je.log.LogBufferPool: int dirtyEnd> = $i11;

        $i12 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: int currentWriteBufferIndex>;

        $i13 = specialinvoke this.<berkeley.com.sleepycat.je.log.LogBufferPool: int getNextSlot(int)>($i12);

        this.<berkeley.com.sleepycat.je.log.LogBufferPool: int currentWriteBufferIndex> = $i13;

        $r12 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: java.util.LinkedList bufferPool>;

        $i14 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: int currentWriteBufferIndex>;

        $r13 = virtualinvoke $r12.<java.util.LinkedList: java.lang.Object get(int)>($i14);

        nextToUse = (berkeley.com.sleepycat.je.log.LogBuffer) $r13;

        $r14 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: java.util.LinkedList bufferPool>;

        $i15 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: int currentWriteBufferIndex>;

        $i16 = specialinvoke this.<berkeley.com.sleepycat.je.log.LogBufferPool: int getNextSlot(int)>($i15);

        $r15 = virtualinvoke $r14.<java.util.LinkedList: java.lang.Object get(int)>($i16);

        newInitialBuffer = (berkeley.com.sleepycat.je.log.LogBuffer) $r15;

        virtualinvoke nextToUse.<berkeley.com.sleepycat.je.log.LogBuffer: void reinit()>();

        this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.log.LogBuffer currentWriteBuffer> = nextToUse;

        specialinvoke this.<berkeley.com.sleepycat.je.log.LogBufferPool: void updateMinBufferLsn(berkeley.com.sleepycat.je.log.LogBuffer)>(newInitialBuffer);

     label11:
        virtualinvoke latchedBuffer.<berkeley.com.sleepycat.je.log.LogBuffer: void release()>();

        $r16 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.latch.Latch bufferPoolLatch>;

        interfaceinvoke $r16.<berkeley.com.sleepycat.je.latch.Latch: void releaseIfOwner()>();

        return 1;

     label12:
        $r17 := @caughtexception;

     label13:
        l6 = $r17;

     label14:
        virtualinvoke latchedBuffer.<berkeley.com.sleepycat.je.log.LogBuffer: void release()>();

        $r18 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.latch.Latch bufferPoolLatch>;

        interfaceinvoke $r18.<berkeley.com.sleepycat.je.latch.Latch: void releaseIfOwner()>();

        throw l6;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label06 with label12;
        catch java.lang.Throwable from label07 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    void writeDirty(boolean)
    {
        berkeley.com.sleepycat.je.log.LogBufferPool this;
        boolean flushWriteQueue, process#8;
        berkeley.com.sleepycat.je.log.LogBuffer lb;
        java.lang.Throwable l4, l5, $r4, $r6;
        berkeley.com.sleepycat.je.latch.Latch $r0, $r1, $r5, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.util.LinkedList $r2;
        java.lang.Object $r3;

        this := @this: berkeley.com.sleepycat.je.log.LogBufferPool;

        flushWriteQueue := @parameter0: boolean;

        $r0 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.latch.Latch bufferPoolLatch>;

        interfaceinvoke $r0.<berkeley.com.sleepycat.je.latch.Latch: void acquireExclusive()>();

     label01:
        $i0 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: int dirtyStart>;

        if $i0 >= 0 goto label03;

     label02:
        $r1 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.latch.Latch bufferPoolLatch>;

        interfaceinvoke $r1.<berkeley.com.sleepycat.je.latch.Latch: void releaseIfOwner()>();

        return;

     label03:
        process#8 = 1;

     label04:
        $r2 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: java.util.LinkedList bufferPool>;

        $i1 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: int dirtyStart>;

        $r3 = virtualinvoke $r2.<java.util.LinkedList: java.lang.Object get(int)>($i1);

        lb = (berkeley.com.sleepycat.je.log.LogBuffer) $r3;

        virtualinvoke lb.<berkeley.com.sleepycat.je.log.LogBuffer: void waitForZeroAndLatch()>();

     label05:
        specialinvoke this.<berkeley.com.sleepycat.je.log.LogBufferPool: void writeBufferToFile(berkeley.com.sleepycat.je.log.LogBuffer,boolean)>(lb, flushWriteQueue);

     label06:
        virtualinvoke lb.<berkeley.com.sleepycat.je.log.LogBuffer: void release()>();

        goto label10;

     label07:
        $r4 := @caughtexception;

     label08:
        l4 = $r4;

     label09:
        virtualinvoke lb.<berkeley.com.sleepycat.je.log.LogBuffer: void release()>();

        throw l4;

     label10:
        $i2 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: int dirtyStart>;

        $i3 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: int dirtyEnd>;

        if $i2 != $i3 goto label11;

        process#8 = 0;

        goto label12;

     label11:
        $i4 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: int dirtyStart>;

        $i5 = specialinvoke this.<berkeley.com.sleepycat.je.log.LogBufferPool: int getNextSlot(int)>($i4);

        this.<berkeley.com.sleepycat.je.log.LogBufferPool: int dirtyStart> = $i5;

     label12:
        if process#8 != 0 goto label04;

        this.<berkeley.com.sleepycat.je.log.LogBufferPool: int dirtyStart> = -1;

        this.<berkeley.com.sleepycat.je.log.LogBufferPool: int dirtyEnd> = -1;

     label13:
        $r5 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.latch.Latch bufferPoolLatch>;

        interfaceinvoke $r5.<berkeley.com.sleepycat.je.latch.Latch: void releaseIfOwner()>();

        goto label17;

     label14:
        $r6 := @caughtexception;

     label15:
        l5 = $r6;

     label16:
        $r7 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.latch.Latch bufferPoolLatch>;

        interfaceinvoke $r7.<berkeley.com.sleepycat.je.latch.Latch: void releaseIfOwner()>();

        throw l5;

     label17:
        return;

        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    private void writeBufferToFile(berkeley.com.sleepycat.je.log.LogBuffer, boolean)
    {
        berkeley.com.sleepycat.je.log.LogBufferPool this;
        berkeley.com.sleepycat.je.log.LogBuffer latchedBuffer;
        boolean flushWriteQueue, $z0, $z1, $z2, $z3, $z4;
        java.nio.ByteBuffer currentByteBuffer;
        int savePosition, saveLimit;
        java.lang.Throwable t, l7, $r3, $r20;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0, $r6, $r8, $r11, $r14, $r17;
        berkeley.com.sleepycat.je.log.FileManager $r2;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r7, $r9, $r10, $r16, $r19;
        java.lang.Error $r12, $r13;
        java.lang.Exception $r15;
        java.lang.String $r18;

        this := @this: berkeley.com.sleepycat.je.log.LogBufferPool;

        latchedBuffer := @parameter0: berkeley.com.sleepycat.je.log.LogBuffer;

        flushWriteQueue := @parameter1: boolean;

        $z0 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: boolean runInMemory>;

        if $z0 == 0 goto label01;

        return;

     label01:
        $r0 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void checkIfInvalid()>();

     label02:
        currentByteBuffer = virtualinvoke latchedBuffer.<berkeley.com.sleepycat.je.log.LogBuffer: java.nio.ByteBuffer getDataBuffer()>();

        savePosition = virtualinvoke currentByteBuffer.<java.nio.ByteBuffer: int position()>();

        saveLimit = virtualinvoke currentByteBuffer.<java.nio.ByteBuffer: int limit()>();

        virtualinvoke currentByteBuffer.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

     label03:
        $r2 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.log.FileManager fileManager>;

        virtualinvoke $r2.<berkeley.com.sleepycat.je.log.FileManager: void writeLogBuffer(berkeley.com.sleepycat.je.log.LogBuffer,boolean)>(latchedBuffer, flushWriteQueue);

     label04:
        goto label10;

     label05:
        $r3 := @caughtexception;

        t = $r3;

        virtualinvoke currentByteBuffer.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(savePosition);

        virtualinvoke currentByteBuffer.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(saveLimit);

        $z1 = t instanceof berkeley.com.sleepycat.je.EnvironmentFailureException;

        if $z1 == 0 goto label07;

        $r6 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $z2 = virtualinvoke $r6.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean isValid()>();

        if $z2 != 0 goto label06;

        $r7 = (berkeley.com.sleepycat.je.EnvironmentFailureException) t;

        throw $r7;

     label06:
        $r8 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r9 = (berkeley.com.sleepycat.je.EnvironmentFailureException) t;

        $r10 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedException(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.Exception)>($r8, $r9);

        throw $r10;

     label07:
        $z3 = t instanceof java.lang.Error;

        if $z3 == 0 goto label08;

        $r11 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r12 = (java.lang.Error) t;

        virtualinvoke $r11.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void invalidate(java.lang.Error)>($r12);

        $r13 = (java.lang.Error) t;

        throw $r13;

     label08:
        $z4 = t instanceof java.lang.Exception;

        if $z4 == 0 goto label09;

        $r14 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r15 = (java.lang.Exception) t;

        $r16 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedException(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.Exception)>($r14, $r15);

        throw $r16;

     label09:
        $r17 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r18 = virtualinvoke t.<java.lang.Throwable: java.lang.String getMessage()>();

        $r19 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedException(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String,java.lang.Exception)>($r17, $r18, null);

        throw $r19;

     label10:
        virtualinvoke latchedBuffer.<berkeley.com.sleepycat.je.log.LogBuffer: void release()>();

        goto label14;

     label11:
        $r20 := @caughtexception;

     label12:
        l7 = $r20;

     label13:
        virtualinvoke latchedBuffer.<berkeley.com.sleepycat.je.log.LogBuffer: void release()>();

        throw l7;

     label14:
        return;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label02 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    private int getNextSlot(int)
    {
        berkeley.com.sleepycat.je.log.LogBufferPool this;
        int slotNumber#1, $i0, $i1, slotNumber#13, $i2;
        boolean $z0, $z1;
        berkeley.com.sleepycat.je.latch.Latch $r0;
        java.lang.AssertionError $r1;
        java.util.LinkedList $r2;

        this := @this: berkeley.com.sleepycat.je.log.LogBufferPool;

        slotNumber#1 := @parameter0: int;

        $z0 = <berkeley.com.sleepycat.je.log.LogBufferPool: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r0 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.latch.Latch bufferPoolLatch>;

        $z1 = interfaceinvoke $r0.<berkeley.com.sleepycat.je.latch.Latch: boolean isExclusiveOwner()>();

        if $z1 != 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $r2 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: java.util.LinkedList bufferPool>;

        $i0 = virtualinvoke $r2.<java.util.LinkedList: int size()>();

        $i1 = $i0 - 1;

        if slotNumber#1 >= $i1 goto label2;

        slotNumber#13 = slotNumber#1 + 1;

        $i2 = slotNumber#13;

        goto label3;

     label2:
        $i2 = 0;

     label3:
        return $i2;
    }

    private void updateMinBufferLsn(berkeley.com.sleepycat.je.log.LogBuffer)
    {
        berkeley.com.sleepycat.je.log.LogBufferPool this;
        berkeley.com.sleepycat.je.log.LogBuffer newInitialBuffer;
        long newMinLsn;
        byte $b0;

        this := @this: berkeley.com.sleepycat.je.log.LogBufferPool;

        newInitialBuffer := @parameter0: berkeley.com.sleepycat.je.log.LogBuffer;

        newMinLsn = virtualinvoke newInitialBuffer.<berkeley.com.sleepycat.je.log.LogBuffer: long getFirstLsn()>();

        $b0 = newMinLsn cmp -1L;

        if $b0 == 0 goto label1;

        this.<berkeley.com.sleepycat.je.log.LogBufferPool: long minBufferLsn> = newMinLsn;

     label1:
        return;
    }

    public long getNCacheMiss()
    {
        berkeley.com.sleepycat.je.log.LogBufferPool this;
        berkeley.com.sleepycat.je.utilint.AtomicLongStat $r0;
        java.lang.Long $r1;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.log.LogBufferPool;

        $r0 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.utilint.AtomicLongStat nCacheMiss>;

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.utilint.AtomicLongStat: java.lang.Long get()>();

        $l0 = virtualinvoke $r1.<java.lang.Long: long longValue()>();

        return $l0;
    }

    berkeley.com.sleepycat.je.log.LogBuffer getWriteBuffer(int, boolean) throws java.io.IOException, berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.log.LogBufferPool this;
        int sizeNeeded;
        boolean flippedFile, $z0, $z1, $z2, $z3;
        berkeley.com.sleepycat.je.log.FileManager $r0;
        berkeley.com.sleepycat.je.log.LogBuffer $r1, $r2, $r3;

        this := @this: berkeley.com.sleepycat.je.log.LogBufferPool;

        sizeNeeded := @parameter0: int;

        flippedFile := @parameter1: boolean;

        if flippedFile == 0 goto label1;

        virtualinvoke this.<berkeley.com.sleepycat.je.log.LogBufferPool: void bumpAndWriteDirty(int,boolean)>(sizeNeeded, 1);

        $z0 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: boolean runInMemory>;

        if $z0 != 0 goto label3;

        $r0 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.log.FileManager fileManager>;

        virtualinvoke $r0.<berkeley.com.sleepycat.je.log.FileManager: void syncLogEndAndFinishFile()>();

        goto label3;

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.log.LogBuffer currentWriteBuffer>;

        $z1 = virtualinvoke $r1.<berkeley.com.sleepycat.je.log.LogBuffer: boolean hasRoom(int)>(sizeNeeded);

        if $z1 != 0 goto label3;

        $z2 = virtualinvoke this.<berkeley.com.sleepycat.je.log.LogBufferPool: boolean bumpCurrent(int)>(sizeNeeded);

        if $z2 == 0 goto label2;

        $r2 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.log.LogBuffer currentWriteBuffer>;

        $z3 = virtualinvoke $r2.<berkeley.com.sleepycat.je.log.LogBuffer: boolean hasRoom(int)>(sizeNeeded);

        if $z3 != 0 goto label3;

     label2:
        virtualinvoke this.<berkeley.com.sleepycat.je.log.LogBufferPool: void bumpAndWriteDirty(int,boolean)>(sizeNeeded, 0);

     label3:
        $r3 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.log.LogBuffer currentWriteBuffer>;

        return $r3;
    }

    berkeley.com.sleepycat.je.utilint.StatGroup loadStats(berkeley.com.sleepycat.je.StatsConfig) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.log.LogBufferPool this;
        berkeley.com.sleepycat.je.StatsConfig config;
        berkeley.com.sleepycat.je.utilint.IntStat $r0;
        int $i0, $i1, $i3;
        java.lang.Integer $r1;
        berkeley.com.sleepycat.je.utilint.LongStat $r2;
        long $l2, $l4, $l5;
        java.lang.Long $r3;
        berkeley.com.sleepycat.je.utilint.StatGroup $r4, $r5;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.log.LogBufferPool;

        config := @parameter0: berkeley.com.sleepycat.je.StatsConfig;

        $r0 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.utilint.IntStat logBuffers>;

        $i0 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: int nLogBuffers>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke $r0.<berkeley.com.sleepycat.je.utilint.IntStat: void set(java.lang.Integer)>($r1);

        $r2 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.utilint.LongStat nBufferBytes>;

        $i1 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: int nLogBuffers>;

        $l2 = (long) $i1;

        $i3 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: int logBufferSize>;

        $l4 = (long) $i3;

        $l5 = $l2 * $l4;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5);

        virtualinvoke $r2.<berkeley.com.sleepycat.je.utilint.LongStat: void set(java.lang.Long)>($r3);

        $r4 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.utilint.StatGroup stats>;

        $z0 = virtualinvoke config.<berkeley.com.sleepycat.je.StatsConfig: boolean getClear()>();

        $r5 = virtualinvoke $r4.<berkeley.com.sleepycat.je.utilint.StatGroup: berkeley.com.sleepycat.je.utilint.StatGroup cloneGroup(boolean)>($z0);

        return $r5;
    }

    final int getLogBufferSize()
    {
        berkeley.com.sleepycat.je.log.LogBufferPool this;
        int $i0;

        this := @this: berkeley.com.sleepycat.je.log.LogBufferPool;

        $i0 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: int logBufferSize>;

        return $i0;
    }

    berkeley.com.sleepycat.je.log.LogBuffer getReadBufferByLsn(long) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.log.LogBufferPool this;
        long lsn, $l0;
        berkeley.com.sleepycat.je.log.LogBuffer l, l5;
        java.lang.Throwable l6, $r8;
        berkeley.com.sleepycat.je.utilint.AtomicLongStat $r0, $r1, $r6;
        int $i1;
        berkeley.com.sleepycat.je.latch.Latch $r2, $r5, $r7, $r9;
        java.util.LinkedList $r3;
        java.util.Iterator l3#15;
        boolean $z0, $z1;
        java.lang.Object $r4;

        this := @this: berkeley.com.sleepycat.je.log.LogBufferPool;

        lsn := @parameter0: long;

        $r0 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.utilint.AtomicLongStat nNotResident>;

        virtualinvoke $r0.<berkeley.com.sleepycat.je.utilint.AtomicLongStat: void increment()>();

        $l0 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: long minBufferLsn>;

        $i1 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: int compareTo(long,long)>(lsn, $l0);

        if $i1 >= 0 goto label01;

        $r1 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.utilint.AtomicLongStat nCacheMiss>;

        virtualinvoke $r1.<berkeley.com.sleepycat.je.utilint.AtomicLongStat: void increment()>();

        return null;

     label01:
        $r2 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.latch.Latch bufferPoolLatch>;

        interfaceinvoke $r2.<berkeley.com.sleepycat.je.latch.Latch: void acquireExclusive()>();

     label02:
        $r3 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: java.util.LinkedList bufferPool>;

        l3#15 = virtualinvoke $r3.<java.util.LinkedList: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke l3#15.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r4 = interfaceinvoke l3#15.<java.util.Iterator: java.lang.Object next()>();

        l = (berkeley.com.sleepycat.je.log.LogBuffer) $r4;

        $z1 = virtualinvoke l.<berkeley.com.sleepycat.je.log.LogBuffer: boolean containsLsn(long)>(lsn);

        if $z1 == 0 goto label05;

        l5 = l;

     label04:
        $r5 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.latch.Latch bufferPoolLatch>;

        interfaceinvoke $r5.<berkeley.com.sleepycat.je.latch.Latch: void releaseIfOwner()>();

        return l5;

     label05:
        goto label03;

     label06:
        $r6 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.utilint.AtomicLongStat nCacheMiss>;

        virtualinvoke $r6.<berkeley.com.sleepycat.je.utilint.AtomicLongStat: void increment()>();

     label07:
        $r7 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.latch.Latch bufferPoolLatch>;

        interfaceinvoke $r7.<berkeley.com.sleepycat.je.latch.Latch: void releaseIfOwner()>();

        return null;

     label08:
        $r8 := @caughtexception;

     label09:
        l6 = $r8;

     label10:
        $r9 = this.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.latch.Latch bufferPoolLatch>;

        interfaceinvoke $r9.<berkeley.com.sleepycat.je.latch.Latch: void releaseIfOwner()>();

        throw l6;

        catch java.lang.Throwable from label02 to label04 with label08;
        catch java.lang.Throwable from label05 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }


