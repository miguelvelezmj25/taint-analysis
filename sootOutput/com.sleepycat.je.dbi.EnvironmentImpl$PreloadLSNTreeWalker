    public void walk() throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.dbi.EnvironmentImpl$PreloadLSNTreeWalker this;
        int nDbs, nDbsLatched#5, i#7, i#26, i#39;
        java.lang.Exception e, $r3;
        java.lang.Throwable l5, $r8;
        com.sleepycat.je.dbi.DatabaseImpl dbImpl, dbImpl#14, dbImpl#32;
        com.sleepycat.je.dbi.DatabaseImpl[] $r0, $r1, $r6, $r9;
        com.sleepycat.je.tree.Tree $r2, $r7, $r10;
        com.sleepycat.je.dbi.EnvironmentImpl $r4;
        com.sleepycat.je.EnvironmentFailureException $r5;

        this := @this: com.sleepycat.je.dbi.EnvironmentImpl$PreloadLSNTreeWalker;

        $r0 = this.<com.sleepycat.je.dbi.EnvironmentImpl$PreloadLSNTreeWalker: com.sleepycat.je.dbi.DatabaseImpl[] dbImpls>;

        nDbs = lengthof $r0;

        nDbsLatched#5 = 0;

     label01:
        i#7 = 0;

     label02:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(nDbs);

        if i#7 >= nDbs goto label03;

        $r1 = this.<com.sleepycat.je.dbi.EnvironmentImpl$PreloadLSNTreeWalker: com.sleepycat.je.dbi.DatabaseImpl[] dbImpls>;

        dbImpl#14 = $r1[i#7];

        $r2 = virtualinvoke dbImpl#14.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.tree.Tree getTree()>();

        virtualinvoke $r2.<com.sleepycat.je.tree.Tree: void latchRootLatchExclusive()>();

        nDbsLatched#5 = nDbsLatched#5 + 1;

        i#7 = i#7 + 1;

        goto label02;

     label03:
        goto label05;

     label04:
        $r3 := @caughtexception;

        e = $r3;

        $r4 = this.<com.sleepycat.je.dbi.EnvironmentImpl$PreloadLSNTreeWalker: com.sleepycat.je.dbi.EnvironmentImpl this$0>;

        $r5 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedException(com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String,java.lang.Exception)>($r4, "Couldn\'t latch all DatabaseImpls during preload", e);

        throw $r5;

     label05:
        virtualinvoke this.<com.sleepycat.je.dbi.EnvironmentImpl$PreloadLSNTreeWalker: void walkInternal()>();

     label06:
        i#26 = nDbsLatched#5 - 1;

     label07:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#26);

        if i#26 < 0 goto label08;

        $r6 = this.<com.sleepycat.je.dbi.EnvironmentImpl$PreloadLSNTreeWalker: com.sleepycat.je.dbi.DatabaseImpl[] dbImpls>;

        dbImpl#32 = $r6[i#26];

        $r7 = virtualinvoke dbImpl#32.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.tree.Tree getTree()>();

        virtualinvoke $r7.<com.sleepycat.je.tree.Tree: void releaseRootLatch()>();

        i#26 = i#26 + -1;

        goto label07;

     label08:
        goto label14;

     label09:
        $r8 := @caughtexception;

     label10:
        l5 = $r8;

     label11:
        i#39 = nDbsLatched#5 - 1;

     label12:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#39);

        if i#39 < 0 goto label13;

        $r9 = this.<com.sleepycat.je.dbi.EnvironmentImpl$PreloadLSNTreeWalker: com.sleepycat.je.dbi.DatabaseImpl[] dbImpls>;

        dbImpl = $r9[i#39];

        $r10 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.tree.Tree getTree()>();

        virtualinvoke $r10.<com.sleepycat.je.tree.Tree: void releaseRootLatch()>();

        i#39 = i#39 + -1;

        goto label12;

     label13:
        throw l5;

     label14:
        return;

        catch java.lang.Exception from label01 to label03 with label04;
        catch java.lang.Throwable from label01 to label06 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    protected boolean fetchAndInsertIntoTree()
    {
        com.sleepycat.je.dbi.EnvironmentImpl$PreloadLSNTreeWalker this;

        this := @this: com.sleepycat.je.dbi.EnvironmentImpl$PreloadLSNTreeWalker;

        return 1;
    }

    com.sleepycat.je.tree.IN getRootIN(com.sleepycat.je.dbi.DatabaseImpl, long)
    {
        com.sleepycat.je.dbi.EnvironmentImpl$PreloadLSNTreeWalker this;
        com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        long rootLsn;
        com.sleepycat.je.CacheMode $r0;
        com.sleepycat.je.tree.Tree $r1;
        com.sleepycat.je.tree.IN $r2;

        this := @this: com.sleepycat.je.dbi.EnvironmentImpl$PreloadLSNTreeWalker;

        dbImpl := @parameter0: com.sleepycat.je.dbi.DatabaseImpl;

        rootLsn := @parameter1: long;

        $r1 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.tree.Tree getTree()>();

        $r0 = <com.sleepycat.je.CacheMode: com.sleepycat.je.CacheMode UNCHANGED>;

        $r2 = virtualinvoke $r1.<com.sleepycat.je.tree.Tree: com.sleepycat.je.tree.IN getRootINRootAlreadyLatched(com.sleepycat.je.CacheMode,boolean)>($r0, 0);

        return $r2;
    }

    void <init>(com.sleepycat.je.dbi.EnvironmentImpl, com.sleepycat.je.dbi.DatabaseImpl[], long[], boolean, com.sleepycat.je.dbi.SortedLSNTreeWalker$TreeNodeProcessor, com.sleepycat.je.PreloadConfig) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.dbi.EnvironmentImpl$PreloadLSNTreeWalker this;
        com.sleepycat.je.dbi.EnvironmentImpl l1;
        com.sleepycat.je.dbi.DatabaseImpl[] dbs;
        long[] rootLsns;
        boolean useOffHeapCache, $z0;
        com.sleepycat.je.dbi.SortedLSNTreeWalker$TreeNodeProcessor callback;
        com.sleepycat.je.PreloadConfig conf;
        long $l0, $l1;

        this := @this: com.sleepycat.je.dbi.EnvironmentImpl$PreloadLSNTreeWalker;

        l1 := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        dbs := @parameter1: com.sleepycat.je.dbi.DatabaseImpl[];

        rootLsns := @parameter2: long[];

        useOffHeapCache := @parameter3: boolean;

        callback := @parameter4: com.sleepycat.je.dbi.SortedLSNTreeWalker$TreeNodeProcessor;

        conf := @parameter5: com.sleepycat.je.PreloadConfig;

        this.<com.sleepycat.je.dbi.EnvironmentImpl$PreloadLSNTreeWalker: com.sleepycat.je.dbi.EnvironmentImpl this$0> = l1;

        specialinvoke this.<com.sleepycat.je.dbi.SortedLSNTreeWalker: void <init>(com.sleepycat.je.dbi.DatabaseImpl[],boolean,long[],com.sleepycat.je.dbi.SortedLSNTreeWalker$TreeNodeProcessor,java.util.List,com.sleepycat.je.dbi.SortedLSNTreeWalker$ExceptionPredicate)>(dbs, 0, rootLsns, callback, null, null);

        $z0 = virtualinvoke conf.<com.sleepycat.je.PreloadConfig: boolean getLoadLNs()>();

        this.<com.sleepycat.je.dbi.EnvironmentImpl$PreloadLSNTreeWalker: boolean accumulateLNs> = $z0;

        this.<com.sleepycat.je.dbi.EnvironmentImpl$PreloadLSNTreeWalker: boolean preloadIntoOffHeapCache> = useOffHeapCache;

        $l0 = virtualinvoke conf.<com.sleepycat.je.PreloadConfig: long getLSNBatchSize()>();

        virtualinvoke this.<com.sleepycat.je.dbi.EnvironmentImpl$PreloadLSNTreeWalker: void setLSNBatchSize(long)>($l0);

        $l1 = virtualinvoke conf.<com.sleepycat.je.PreloadConfig: long getInternalMemoryLimit()>();

        virtualinvoke this.<com.sleepycat.je.dbi.EnvironmentImpl$PreloadLSNTreeWalker: void setInternalMemoryLimit(long)>($l1);

        return;
    }


