    static void <clinit>()
    {
        java.util.HashMap $r0;
        java.util.Map $r1, $r4, $r7, $r10, $r13, $r16, $r19, $r22, $r25, $r28, $r31;
        weka.core.expressionlanguage.common.MathFunctions$DoubleUnaryMacro $r2, $r5, $r8, $r11, $r14, $r17, $r20, $r23, $r26, $r29;
        weka.core.expressionlanguage.common.MathFunctions$PowMacro $r32;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <weka.core.expressionlanguage.common.MathFunctions: java.util.Map macros> = $r0;

        $r1 = <weka.core.expressionlanguage.common.MathFunctions: java.util.Map macros>;

        $r2 = new weka.core.expressionlanguage.common.MathFunctions$DoubleUnaryMacro;

        specialinvoke $r2.<weka.core.expressionlanguage.common.MathFunctions$DoubleUnaryMacro: void <init>(java.lang.Class)>(class "weka/core/expressionlanguage/common/MathFunctions$AbsFunction");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("abs", $r2);

        $r4 = <weka.core.expressionlanguage.common.MathFunctions: java.util.Map macros>;

        $r5 = new weka.core.expressionlanguage.common.MathFunctions$DoubleUnaryMacro;

        specialinvoke $r5.<weka.core.expressionlanguage.common.MathFunctions$DoubleUnaryMacro: void <init>(java.lang.Class)>(class "weka/core/expressionlanguage/common/MathFunctions$SqrtFunction");

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sqrt", $r5);

        $r7 = <weka.core.expressionlanguage.common.MathFunctions: java.util.Map macros>;

        $r8 = new weka.core.expressionlanguage.common.MathFunctions$DoubleUnaryMacro;

        specialinvoke $r8.<weka.core.expressionlanguage.common.MathFunctions$DoubleUnaryMacro: void <init>(java.lang.Class)>(class "weka/core/expressionlanguage/common/MathFunctions$LogFunction");

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("log", $r8);

        $r10 = <weka.core.expressionlanguage.common.MathFunctions: java.util.Map macros>;

        $r11 = new weka.core.expressionlanguage.common.MathFunctions$DoubleUnaryMacro;

        specialinvoke $r11.<weka.core.expressionlanguage.common.MathFunctions$DoubleUnaryMacro: void <init>(java.lang.Class)>(class "weka/core/expressionlanguage/common/MathFunctions$ExpFunction");

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("exp", $r11);

        $r13 = <weka.core.expressionlanguage.common.MathFunctions: java.util.Map macros>;

        $r14 = new weka.core.expressionlanguage.common.MathFunctions$DoubleUnaryMacro;

        specialinvoke $r14.<weka.core.expressionlanguage.common.MathFunctions$DoubleUnaryMacro: void <init>(java.lang.Class)>(class "weka/core/expressionlanguage/common/MathFunctions$SinFunction");

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sin", $r14);

        $r16 = <weka.core.expressionlanguage.common.MathFunctions: java.util.Map macros>;

        $r17 = new weka.core.expressionlanguage.common.MathFunctions$DoubleUnaryMacro;

        specialinvoke $r17.<weka.core.expressionlanguage.common.MathFunctions$DoubleUnaryMacro: void <init>(java.lang.Class)>(class "weka/core/expressionlanguage/common/MathFunctions$CosFunction");

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cos", $r17);

        $r19 = <weka.core.expressionlanguage.common.MathFunctions: java.util.Map macros>;

        $r20 = new weka.core.expressionlanguage.common.MathFunctions$DoubleUnaryMacro;

        specialinvoke $r20.<weka.core.expressionlanguage.common.MathFunctions$DoubleUnaryMacro: void <init>(java.lang.Class)>(class "weka/core/expressionlanguage/common/MathFunctions$TanFunction");

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tan", $r20);

        $r22 = <weka.core.expressionlanguage.common.MathFunctions: java.util.Map macros>;

        $r23 = new weka.core.expressionlanguage.common.MathFunctions$DoubleUnaryMacro;

        specialinvoke $r23.<weka.core.expressionlanguage.common.MathFunctions$DoubleUnaryMacro: void <init>(java.lang.Class)>(class "weka/core/expressionlanguage/common/MathFunctions$RintFunction");

        interfaceinvoke $r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("rint", $r23);

        $r25 = <weka.core.expressionlanguage.common.MathFunctions: java.util.Map macros>;

        $r26 = new weka.core.expressionlanguage.common.MathFunctions$DoubleUnaryMacro;

        specialinvoke $r26.<weka.core.expressionlanguage.common.MathFunctions$DoubleUnaryMacro: void <init>(java.lang.Class)>(class "weka/core/expressionlanguage/common/MathFunctions$FloorFunction");

        interfaceinvoke $r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("floor", $r26);

        $r28 = <weka.core.expressionlanguage.common.MathFunctions: java.util.Map macros>;

        $r29 = new weka.core.expressionlanguage.common.MathFunctions$DoubleUnaryMacro;

        specialinvoke $r29.<weka.core.expressionlanguage.common.MathFunctions$DoubleUnaryMacro: void <init>(java.lang.Class)>(class "weka/core/expressionlanguage/common/MathFunctions$CeilFunction");

        interfaceinvoke $r28.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ceil", $r29);

        $r31 = <weka.core.expressionlanguage.common.MathFunctions: java.util.Map macros>;

        $r32 = new weka.core.expressionlanguage.common.MathFunctions$PowMacro;

        specialinvoke $r32.<weka.core.expressionlanguage.common.MathFunctions$PowMacro: void <init>(weka.core.expressionlanguage.common.MathFunctions$1)>(null);

        interfaceinvoke $r31.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pow", $r32);

        return;
    }

    public void <init>()
    {
        weka.core.expressionlanguage.common.MathFunctions this;

        this := @this: weka.core.expressionlanguage.common.MathFunctions;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }


