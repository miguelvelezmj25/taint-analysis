    static void <clinit>()
    {
        java.io.ObjectStreamField[] $r0;

        staticinvoke <java.lang.Class: void registerNatives()>();

        <java.lang.Class: boolean useCaches> = 1;

        $r0 = newarray (java.io.ObjectStreamField)[0];

        <java.lang.Class: java.io.ObjectStreamField[] serialPersistentFields> = $r0;

        <java.lang.Class: boolean initted> = 0;

        return;
    }

    public boolean desiredAssertionStatus()
    {
        java.lang.Class l0;
        java.lang.ClassLoader l1;
        java.lang.Object l2, $r0;
        java.lang.Throwable l3, $r3;
        boolean $z0, $z1, $z2;
        java.util.Map $r1;
        java.lang.String $r2;

        l0 := @this: java.lang.Class;

        l1 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if l1 != null goto label1;

        $z0 = staticinvoke <java.lang.Class: boolean desiredAssertionStatus0(java.lang.Class)>(l0);

        return $z0;

     label1:
        $r0 = l1.<java.lang.ClassLoader: java.lang.Object assertionLock>;

        l2 = $r0;

        entermonitor $r0;

     label2:
        $r1 = l1.<java.lang.ClassLoader: java.util.Map classAssertionStatus>;

        if $r1 == null goto label4;

        $r2 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>();

        $z1 = virtualinvoke l1.<java.lang.ClassLoader: boolean desiredAssertionStatus(java.lang.String)>($r2);

        exitmonitor l2;

     label3:
        return $z1;

     label4:
        exitmonitor l2;

     label5:
        goto label9;

     label6:
        $r3 := @caughtexception;

     label7:
        l3 = $r3;

        exitmonitor l2;

     label8:
        throw l3;

     label9:
        $z2 = staticinvoke <java.lang.Class: boolean desiredAssertionStatus0(java.lang.Class)>(l0);

        return $z2;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public java.lang.ClassLoader getClassLoader()
    {
        java.lang.Class l0, $r0;
        java.lang.ClassLoader l1;
        java.lang.SecurityManager l2;

        l0 := @this: java.lang.Class;

        l1 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>();

        if l1 != null goto label1;

        return null;

     label1:
        l2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if l2 == null goto label2;

        $r0 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();

        staticinvoke <java.lang.ClassLoader: void checkClassLoaderPermission(java.lang.ClassLoader,java.lang.Class)>(l1, $r0);

     label2:
        return l1;
    }

    public java.lang.String getName()
    {
        java.lang.Class l0;
        java.lang.String l1#3, $r0;

        l0 := @this: java.lang.Class;

        l1#3 = l0.<java.lang.Class: java.lang.String name>;

        if l1#3 != null goto label1;

        $r0 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>();

        l1#3 = $r0;

        l0.<java.lang.Class: java.lang.String name> = $r0;

     label1:
        return l1#3;
    }

    java.lang.ClassLoader getClassLoader0()
    {
        java.lang.Class l0;
        java.lang.ClassLoader $r0;

        l0 := @this: java.lang.Class;

        $r0 = l0.<java.lang.Class: java.lang.ClassLoader classLoader>;

        return $r0;
    }

    public java.lang.Class[] getInterfaces()
    {
        java.lang.Class l0;
        java.lang.Class$ReflectionData l1;
        java.lang.Class[] $r0, l2#8, $r2;
        java.lang.Object $r1;

        l0 := @this: java.lang.Class;

        l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>();

        if l1 != null goto label1;

        $r0 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>();

        return $r0;

     label1:
        l2#8 = l1.<java.lang.Class$ReflectionData: java.lang.Class[] interfaces>;

        if l2#8 != null goto label2;

        l2#8 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>();

        l1.<java.lang.Class$ReflectionData: java.lang.Class[] interfaces> = l2#8;

     label2:
        $r1 = virtualinvoke l2#8.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (java.lang.Class[]) $r1;

        return $r2;
    }

    private java.lang.Class$ReflectionData reflectionData()
    {
        java.lang.Class l0;
        java.lang.ref.SoftReference l1;
        int l2, $i0;
        java.lang.Class$ReflectionData l3, $r1, $r2;
        boolean $z0;
        java.lang.Object $r0;

        l0 := @this: java.lang.Class;

        l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>;

        l2 = l0.<java.lang.Class: int classRedefinedCount>;

        $z0 = <java.lang.Class: boolean useCaches>;

        if $z0 == 0 goto label1;

        if l1 == null goto label1;

        $r0 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>();

        $r1 = (java.lang.Class$ReflectionData) $r0;

        l3 = $r1;

        if $r1 == null goto label1;

        $i0 = l3.<java.lang.Class$ReflectionData: int redefinedCount>;

        if $i0 != l2 goto label1;

        return l3;

     label1:
        $r2 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2);

        return $r2;
    }

    private java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference, int)
    {
        java.lang.Class l0;
        java.lang.ref.SoftReference l1#1, $r1;
        int l2#2, $i0;
        boolean $z0, $z1;
        java.lang.Class$ReflectionData $r0, l3#8, $r3, l3#23;
        java.lang.Object $r2;

        l0 := @this: java.lang.Class;

        l1#1 := @parameter0: java.lang.ref.SoftReference;

        l2#2 := @parameter1: int;

        $z0 = <java.lang.Class: boolean useCaches>;

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r0 = new java.lang.Class$ReflectionData;

        specialinvoke $r0.<java.lang.Class$ReflectionData: void <init>(int)>(l2#2);

        l3#8 = $r0;

        $r1 = new java.lang.ref.SoftReference;

        specialinvoke $r1.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(l3#8);

        $z1 = staticinvoke <java.lang.Class$Atomic: boolean casReflectionData(java.lang.Class,java.lang.ref.SoftReference,java.lang.ref.SoftReference)>(l0, l1#1, $r1);

        if $z1 == 0 goto label2;

        return l3#8;

     label2:
        l1#1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>;

        l2#2 = l0.<java.lang.Class: int classRedefinedCount>;

        if l1#1 == null goto label3;

        $r2 = virtualinvoke l1#1.<java.lang.ref.SoftReference: java.lang.Object get()>();

        $r3 = (java.lang.Class$ReflectionData) $r2;

        l3#23 = $r3;

        if $r3 == null goto label3;

        $i0 = l3#23.<java.lang.Class$ReflectionData: int redefinedCount>;

        if $i0 != l2#2 goto label3;

        return l3#23;

     label3:
        goto label1;
    }

    public static java.lang.Class forName(java.lang.String) throws java.lang.ClassNotFoundException
    {
        java.lang.String l0;
        java.lang.Class l1, $r1;
        java.lang.ClassLoader $r0;

        l0 := @parameter0: java.lang.String;

        l1 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();

        $r0 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getClassLoader(java.lang.Class)>(l1);

        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName0(java.lang.String,boolean,java.lang.ClassLoader,java.lang.Class)>(l0, 1, $r0, l1);

        return $r1;
    }

    public static java.lang.Class forName(java.lang.String, boolean, java.lang.ClassLoader) throws java.lang.ClassNotFoundException
    {
        java.lang.String l0;
        boolean l1, $z0, $z1;
        java.lang.ClassLoader l2, l5;
        java.lang.SecurityManager l4;
        java.lang.Class l3#2, $r1;
        java.lang.RuntimePermission $r0;

        l0 := @parameter0: java.lang.String;

        l1 := @parameter1: boolean;

        l2 := @parameter2: java.lang.ClassLoader;

        l3#2 = null;

        l4 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if l4 == null goto label1;

        l3#2 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();

        $z0 = staticinvoke <sun.misc.VM: boolean isSystemDomainLoader(java.lang.ClassLoader)>(l2);

        if $z0 == 0 goto label1;

        l5 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getClassLoader(java.lang.Class)>(l3#2);

        $z1 = staticinvoke <sun.misc.VM: boolean isSystemDomainLoader(java.lang.ClassLoader)>(l5);

        if $z1 != 0 goto label1;

        $r0 = <sun.security.util.SecurityConstants: java.lang.RuntimePermission GET_CLASSLOADER_PERMISSION>;

        virtualinvoke l4.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r0);

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName0(java.lang.String,boolean,java.lang.ClassLoader,java.lang.Class)>(l0, 1, l2, l3#2);

        return $r1;
    }

    public transient java.lang.reflect.Constructor getConstructor(java.lang.Class[]) throws java.lang.NoSuchMethodException, java.lang.SecurityException
    {
        java.lang.Class l0, $r0;
        java.lang.Class[] l1;
        java.lang.reflect.Constructor $r1;

        l0 := @this: java.lang.Class;

        l1 := @parameter0: java.lang.Class[];

        $r0 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();

        specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $r0, 1);

        $r1 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 0);

        return $r1;
    }

    private void checkMemberAccess(int, java.lang.Class, boolean)
    {
        java.lang.Class l0, l2;
        int l1;
        boolean l3;
        java.lang.SecurityManager l4;
        java.lang.ClassLoader l5, l6;
        java.lang.RuntimePermission $r0;

        l0 := @this: java.lang.Class;

        l1 := @parameter0: int;

        l2 := @parameter1: java.lang.Class;

        l3 := @parameter2: boolean;

        l4 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if l4 == null goto label2;

        l5 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getClassLoader(java.lang.Class)>(l2);

        l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>();

        if l1 == 0 goto label1;

        if l5 == l6 goto label1;

        $r0 = <sun.security.util.SecurityConstants: java.lang.RuntimePermission CHECK_MEMBER_ACCESS_PERMISSION>;

        virtualinvoke l4.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r0);

     label1:
        specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, 1);

     label2:
        return;
    }

    private java.lang.reflect.Constructor getConstructor0(java.lang.Class[], int) throws java.lang.NoSuchMethodException
    {
        java.lang.Class l0;
        java.lang.Class[] l1, $r1;
        int l2, l5, l6#9;
        java.lang.reflect.Constructor[] l3, l4;
        java.lang.reflect.Constructor l7, $r3;
        boolean $z0, $z1;
        sun.reflect.ReflectionFactory $r2;
        java.lang.NoSuchMethodException $r4;
        java.lang.StringBuilder $r5, $r7, $r8, $r10;
        java.lang.String $r6, $r9, $r11;

        l0 := @this: java.lang.Class;

        l1 := @parameter0: java.lang.Class[];

        l2 := @parameter1: int;

        if l2 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>($z0);

        l4 = l3;

        l5 = lengthof l4;

        l6#9 = 0;

     label3:
        if l6#9 >= l5 goto label5;

        l7 = l4[l6#9];

        $r1 = virtualinvoke l7.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $z1 = staticinvoke <java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>(l1, $r1);

        if $z1 == 0 goto label4;

        $r2 = staticinvoke <java.lang.Class: sun.reflect.ReflectionFactory getReflectionFactory()>();

        $r3 = virtualinvoke $r2.<sun.reflect.ReflectionFactory: java.lang.reflect.Constructor copyConstructor(java.lang.reflect.Constructor)>(l7);

        return $r3;

     label4:
        l6#9 = l6#9 + 1;

        goto label3;

     label5:
        $r4 = new java.lang.NoSuchMethodException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".<init>");

        $r9 = staticinvoke <java.lang.Class: java.lang.String argumentTypesToString(java.lang.Class[])>(l1);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.NoSuchMethodException: void <init>(java.lang.String)>($r11);

        throw $r4;
    }

    private static java.lang.String argumentTypesToString(java.lang.Class[])
    {
        java.lang.Class[] l0;
        java.lang.StringBuilder l1, $r0;
        java.lang.Class l3;
        int l2#8, $i0;
        java.lang.String $r4, $r7;

        l0 := @parameter0: java.lang.Class[];

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        l1 = $r0;

        virtualinvoke l1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        if l0 == null goto label5;

        l2#8 = 0;

     label1:
        $i0 = lengthof l0;

        if l2#8 >= $i0 goto label5;

        if l2#8 <= 0 goto label2;

        virtualinvoke l1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        l3 = l0[l2#8];

        if l3 != null goto label3;

        $r4 = "null";

        goto label4;

     label3:
        $r4 = virtualinvoke l3.<java.lang.Class: java.lang.String getName()>();

     label4:
        virtualinvoke l1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        l2#8 = l2#8 + 1;

        goto label1;

     label5:
        virtualinvoke l1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke l1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    private static sun.reflect.ReflectionFactory getReflectionFactory()
    {
        sun.reflect.ReflectionFactory $r0, $r3, $r4;
        sun.reflect.ReflectionFactory$GetReflectionFactoryAction $r1;
        java.lang.Object $r2;

        $r0 = <java.lang.Class: sun.reflect.ReflectionFactory reflectionFactory>;

        if $r0 != null goto label1;

        $r1 = new sun.reflect.ReflectionFactory$GetReflectionFactoryAction;

        specialinvoke $r1.<sun.reflect.ReflectionFactory$GetReflectionFactoryAction: void <init>()>();

        $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1);

        $r3 = (sun.reflect.ReflectionFactory) $r2;

        <java.lang.Class: sun.reflect.ReflectionFactory reflectionFactory> = $r3;

     label1:
        $r4 = <java.lang.Class: sun.reflect.ReflectionFactory reflectionFactory>;

        return $r4;
    }

    private static boolean arrayContentsEq(java.lang.Object[], java.lang.Object[])
    {
        java.lang.Object[] l0, l1;
        int $i0, $i1, $i2, $i3, l2#16, $i4;
        boolean $z0, $z1;
        java.lang.Object $r0, $r1;

        l0 := @parameter0: java.lang.Object[];

        l1 := @parameter1: java.lang.Object[];

        if l0 != null goto label04;

        if l1 == null goto label01;

        $i0 = lengthof l1;

        if $i0 != 0 goto label02;

     label01:
        $z0 = 1;

        goto label03;

     label02:
        $z0 = 0;

     label03:
        return $z0;

     label04:
        if l1 != null goto label07;

        $i1 = lengthof l0;

        if $i1 != 0 goto label05;

        $z1 = 1;

        goto label06;

     label05:
        $z1 = 0;

     label06:
        return $z1;

     label07:
        $i2 = lengthof l0;

        $i3 = lengthof l1;

        if $i2 == $i3 goto label08;

        return 0;

     label08:
        l2#16 = 0;

     label09:
        $i4 = lengthof l0;

        if l2#16 >= $i4 goto label11;

        $r0 = l0[l2#16];

        $r1 = l1[l2#16];

        if $r0 == $r1 goto label10;

        return 0;

     label10:
        l2#16 = l2#16 + 1;

        goto label09;

     label11:
        return 1;
    }

    private java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)
    {
        java.lang.Class l0;
        boolean l1, $z0;
        java.lang.Class$ReflectionData l3;
        java.lang.reflect.Constructor[] l4, $r0, l2#8, $r1, l2#17;

        l0 := @this: java.lang.Class;

        l1 := @parameter0: boolean;

        staticinvoke <java.lang.Class: void checkInitted()>();

        l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>();

        if l3 == null goto label3;

        if l1 == 0 goto label1;

        $r0 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] publicConstructors>;

        goto label2;

     label1:
        $r0 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors>;

     label2:
        l2#8 = $r0;

        if l2#8 == null goto label3;

        return l2#8;

     label3:
        $z0 = virtualinvoke l0.<java.lang.Class: boolean isInterface()>();

        if $z0 == 0 goto label4;

        $r1 = newarray (java.lang.reflect.Constructor)[0];

        l4 = (java.lang.reflect.Constructor[]) $r1;

        l2#17 = l4;

        goto label5;

     label4:
        l2#17 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors0(boolean)>(l1);

     label5:
        if l3 == null goto label7;

        if l1 == 0 goto label6;

        l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] publicConstructors> = l2#17;

        goto label7;

     label6:
        l3.<java.lang.Class$ReflectionData: java.lang.reflect.Constructor[] declaredConstructors> = l2#17;

     label7:
        return l2#17;
    }

    private static void checkInitted()
    {
        boolean $z0;
        java.lang.Class$3 $r0;

        $z0 = <java.lang.Class: boolean initted>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r0 = new java.lang.Class$3;

        specialinvoke $r0.<java.lang.Class$3: void <init>()>();

        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);

        return;
    }

    private void checkPackageAccess(java.lang.ClassLoader, boolean)
    {
        java.lang.Class l0;
        java.lang.ClassLoader l1, l4;
        boolean l2, $z0, $z1, $z2, $z3;
        java.lang.SecurityManager l3;
        java.lang.String l5, l7;
        int l6;
        java.lang.Class[] $r0;

        l0 := @this: java.lang.Class;

        l1 := @parameter0: java.lang.ClassLoader;

        l2 := @parameter1: boolean;

        l3 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if l3 == null goto label3;

        l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>();

        $z0 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean needsPackageAccessCheck(java.lang.ClassLoader,java.lang.ClassLoader)>(l1, l4);

        if $z0 == 0 goto label2;

        l5 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>();

        l6 = virtualinvoke l5.<java.lang.String: int lastIndexOf(int)>(46);

        if l6 == -1 goto label2;

        l7 = virtualinvoke l5.<java.lang.String: java.lang.String substring(int,int)>(0, l6);

        $z1 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0);

        if $z1 == 0 goto label1;

        $z2 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(l0);

        if $z2 == 0 goto label2;

     label1:
        virtualinvoke l3.<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>(l7);

     label2:
        $z3 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0);

        if $z3 == 0 goto label3;

        $r0 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        staticinvoke <sun.reflect.misc.ReflectUtil: void checkProxyPackageAccess(java.lang.ClassLoader,java.lang.Class[])>(l1, $r0);

     label3:
        return;
    }

    public boolean isEnum()
    {
        java.lang.Class l0, $r0;
        int $i0, $i1;
        boolean $z0;

        l0 := @this: java.lang.Class;

        $i0 = virtualinvoke l0.<java.lang.Class: int getModifiers()>();

        $i1 = $i0 & 16384;

        if $i1 == 0 goto label1;

        $r0 = virtualinvoke l0.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r0 != class "java/lang/Enum" goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Class getEnclosingClass() throws java.lang.SecurityException
    {
        java.lang.Class l0, l3, l2#6, $r1;
        java.lang.Class$EnclosingMethodInfo l1;
        java.lang.InternalError $r0;
        java.lang.ClassLoader $r2;

        l0 := @this: java.lang.Class;

        l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>();

        if l1 != null goto label1;

        l2#6 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>();

        goto label4;

     label1:
        l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>();

        if l3 == l0 goto label2;

        if l3 != null goto label3;

     label2:
        $r0 = new java.lang.InternalError;

        specialinvoke $r0.<java.lang.InternalError: void <init>(java.lang.String)>("Malformed enclosing method information");

        throw $r0;

     label3:
        l2#6 = l3;

     label4:
        if l2#6 == null goto label5;

        $r1 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();

        $r2 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getClassLoader(java.lang.Class)>($r1);

        specialinvoke l2#6.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>($r2, 1);

     label5:
        return l2#6;
    }

    public transient java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[]) throws java.lang.NoSuchMethodException, java.lang.SecurityException
    {
        java.lang.Class l0, $r0;
        java.lang.Class[] l1;
        java.lang.reflect.Constructor $r1;

        l0 := @this: java.lang.Class;

        l1 := @parameter0: java.lang.Class[];

        $r0 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();

        specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $r0, 1);

        $r1 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>(l1, 1);

        return $r1;
    }

    private java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()
    {
        java.lang.Class l0;
        java.lang.Object[] l1;
        java.lang.Class$EnclosingMethodInfo $r0;

        l0 := @this: java.lang.Class;

        l1 = specialinvoke l0.<java.lang.Class: java.lang.Object[] getEnclosingMethod0()>();

        if l1 != null goto label1;

        return null;

     label1:
        $r0 = new java.lang.Class$EnclosingMethodInfo;

        specialinvoke $r0.<java.lang.Class$EnclosingMethodInfo: void <init>(java.lang.Object[],java.lang.Class$1)>(l1, null);

        return $r0;
    }

    public java.lang.Class getDeclaringClass() throws java.lang.SecurityException
    {
        java.lang.Class l0, l1, $r0;
        java.lang.ClassLoader $r1;

        l0 := @this: java.lang.Class;

        l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>();

        if l1 == null goto label1;

        $r0 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();

        $r1 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getClassLoader(java.lang.Class)>($r0);

        specialinvoke l1.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>($r1, 1);

     label1:
        return l1;
    }

    public java.lang.Object[] getEnumConstants()
    {
        java.lang.Class l0;
        java.lang.Object[] l1, $r1;
        java.lang.Object $r0;

        l0 := @this: java.lang.Class;

        l1 = virtualinvoke l0.<java.lang.Class: java.lang.Object[] getEnumConstantsShared()>();

        if l1 == null goto label1;

        $r0 = virtualinvoke l1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (java.lang.Object[]) $r0;

        goto label2;

     label1:
        $r1 = null;

     label2:
        return $r1;
    }

    java.lang.Object[] getEnumConstantsShared()
    {
        java.lang.Class l0;
        java.lang.Object[] l2, $r0, $r4, $r6, $r8;
        boolean $z0;
        java.lang.Class[] $r1;
        java.lang.reflect.Method l1#11;
        java.lang.Class$4 $r2;
        java.lang.Object $r5;
        java.lang.Throwable $r7, l1#26;

        l0 := @this: java.lang.Class;

        $r0 = l0.<java.lang.Class: java.lang.Object[] enumConstants>;

        if $r0 != null goto label4;

        $z0 = virtualinvoke l0.<java.lang.Class: boolean isEnum()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = newarray (java.lang.Class)[0];

        l1#11 = virtualinvoke l0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("values", $r1);

        $r2 = new java.lang.Class$4;

        specialinvoke $r2.<java.lang.Class$4: void <init>(java.lang.Class,java.lang.reflect.Method)>(l0, l1#11);

        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r2);

        $r4 = newarray (java.lang.Object)[0];

        $r5 = virtualinvoke l1#11.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r4);

        $r6 = (java.lang.Object[]) $r5;

        l2 = (java.lang.Object[]) $r6;

        l0.<java.lang.Class: java.lang.Object[] enumConstants> = l2;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        return null;

     label4:
        $r8 = l0.<java.lang.Class: java.lang.Object[] enumConstants>;

        return $r8;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label3;
    }

    public transient java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[]) throws java.lang.NoSuchMethodException, java.lang.SecurityException
    {
        java.lang.Class l0, $r0;
        java.lang.String l1, $r3, $r7, $r9;
        java.lang.Class[] l2;
        java.lang.reflect.Method l3;
        java.lang.NoSuchMethodException $r1;
        java.lang.StringBuilder $r2, $r4, $r5, $r6, $r8;

        l0 := @this: java.lang.Class;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: java.lang.Class[];

        $r0 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();

        specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(0, $r0, 1);

        l3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method getMethod0(java.lang.String,java.lang.Class[],boolean)>("values", l2, 1);

        if l3 != null goto label1;

        $r1 = new java.lang.NoSuchMethodException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("values");

        $r7 = staticinvoke <java.lang.Class: java.lang.String argumentTypesToString(java.lang.Class[])>(l2);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.NoSuchMethodException: void <init>(java.lang.String)>($r9);

        throw $r1;

     label1:
        return l3;
    }

    private java.lang.reflect.Method getMethod0(java.lang.String, java.lang.Class[], boolean)
    {
        java.lang.Class l0;
        java.lang.String l1;
        java.lang.Class[] l2;
        boolean l3;
        java.lang.Class$MethodArray l4, $r0;
        java.lang.reflect.Method l5, $r1;

        l0 := @this: java.lang.Class;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: java.lang.Class[];

        l3 := @parameter2: boolean;

        $r0 = new java.lang.Class$MethodArray;

        specialinvoke $r0.<java.lang.Class$MethodArray: void <init>(int)>(2);

        l4 = $r0;

        l5 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method privateGetMethodRecursive(java.lang.String,java.lang.Class[],boolean,java.lang.Class$MethodArray)>(l1, l2, 1, l4);

        if l5 == null goto label1;

        return l5;

     label1:
        virtualinvoke l4.<java.lang.Class$MethodArray: void removeLessSpecifics()>();

        $r1 = virtualinvoke l4.<java.lang.Class$MethodArray: java.lang.reflect.Method getFirst()>();

        return $r1;
    }

    private java.lang.reflect.Method privateGetMethodRecursive(java.lang.String, java.lang.Class[], boolean, java.lang.Class$MethodArray)
    {
        java.lang.Class l0, l10, l6#18;
        java.lang.String l1;
        java.lang.Class[] l2, l7, l6#30;
        boolean l3, $z0, $z1;
        java.lang.Class$MethodArray l4;
        int l8, $i0, l9#35;
        java.lang.reflect.Method[] $r0;
        java.lang.reflect.Method $r1, l5#8, $r2, l5#26, $r3, l5#47;

        l0 := @this: java.lang.Class;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: java.lang.Class[];

        l3 := @parameter2: boolean;

        l4 := @parameter3: java.lang.Class$MethodArray;

        $r0 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(1);

        $r1 = staticinvoke <java.lang.Class: java.lang.reflect.Method searchMethods(java.lang.reflect.Method[],java.lang.String,java.lang.Class[])>($r0, l1, l2);

        l5#8 = $r1;

        if $r1 == null goto label2;

        goto label1;

     label1:
        return l5#8;

     label2:
        $z1 = virtualinvoke l0.<java.lang.Class: boolean isInterface()>();

        if $z1 != 0 goto label3;

        l6#18 = virtualinvoke l0.<java.lang.Class: java.lang.Class getSuperclass()>();

        if l6#18 == null goto label3;

        $r2 = specialinvoke l6#18.<java.lang.Class: java.lang.reflect.Method getMethod0(java.lang.String,java.lang.Class[],boolean)>(l1, l2, 1);

        l5#26 = $r2;

        if $r2 == null goto label3;

        return l5#26;

     label3:
        l6#30 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        l7 = l6#30;

        l8 = lengthof l7;

        l9#35 = 0;

     label4:
        if l9#35 >= l8 goto label6;

        l10 = l7[l9#35];

        $r3 = specialinvoke l10.<java.lang.Class: java.lang.reflect.Method getMethod0(java.lang.String,java.lang.Class[],boolean)>(l1, l2, 0);

        l5#47 = $r3;

        if $r3 == null goto label5;

        virtualinvoke l4.<java.lang.Class$MethodArray: void add(java.lang.reflect.Method)>(l5#47);

     label5:
        l9#35 = l9#35 + 1;

        goto label4;

     label6:
        return null;
    }

    private static java.lang.reflect.Method searchMethods(java.lang.reflect.Method[], java.lang.String, java.lang.Class[])
    {
        java.lang.reflect.Method[] l0;
        java.lang.String l1, l4, $r0;
        java.lang.Class[] l2, $r1;
        java.lang.reflect.Method l6, l3#2, $r4;
        int l5#6, $i0;
        boolean $z0, $z1;
        java.lang.Class $r2, $r3;
        sun.reflect.ReflectionFactory $r5;

        l0 := @parameter0: java.lang.reflect.Method[];

        l1 := @parameter1: java.lang.String;

        l2 := @parameter2: java.lang.Class[];

        l3#2 = null;

        l4 = virtualinvoke l1.<java.lang.String: java.lang.String intern()>();

        l5#6 = 0;

     label1:
        $i0 = lengthof l0;

        if l5#6 >= $i0 goto label4;

        l6 = l0[l5#6];

        $r0 = virtualinvoke l6.<java.lang.reflect.Method: java.lang.String getName()>();

        if $r0 != l4 goto label3;

        $r1 = virtualinvoke l6.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $z0 = staticinvoke <java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>(l2, $r1);

        if $z0 == 0 goto label3;

        if l3#2 == null goto label2;

        $r2 = virtualinvoke l3#2.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r3 = virtualinvoke l6.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $z1 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r3);

        if $z1 == 0 goto label3;

     label2:
        l3#2 = l6;

     label3:
        l5#6 = l5#6 + 1;

        goto label1;

     label4:
        if l3#2 != null goto label5;

        $r4 = l3#2;

        goto label6;

     label5:
        $r5 = staticinvoke <java.lang.Class: sun.reflect.ReflectionFactory getReflectionFactory()>();

        $r4 = virtualinvoke $r5.<sun.reflect.ReflectionFactory: java.lang.reflect.Method copyMethod(java.lang.reflect.Method)>(l3#2);

     label6:
        return $r4;
    }

    private java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)
    {
        java.lang.Class l0;
        boolean l1;
        java.lang.Class$ReflectionData l3;
        java.lang.reflect.Method[] $r0, l2#8, $r1, l2#15;

        l0 := @this: java.lang.Class;

        l1 := @parameter0: boolean;

        staticinvoke <java.lang.Class: void checkInitted()>();

        l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>();

        if l3 == null goto label2;

        $r0 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Method[] declaredPublicMethods>;

        goto label1;

     label1:
        l2#8 = $r0;

        if l2#8 == null goto label2;

        return l2#8;

     label2:
        $r1 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods0(boolean)>(1);

        l2#15 = staticinvoke <sun.reflect.Reflection: java.lang.reflect.Method[] filterMethods(java.lang.Class,java.lang.reflect.Method[])>(l0, $r1);

        if l3 == null goto label3;

        l3.<java.lang.Class$ReflectionData: java.lang.reflect.Method[] declaredPublicMethods> = l2#15;

        goto label3;

     label3:
        return l2#15;
    }

    public java.lang.reflect.Field getDeclaredField(java.lang.String) throws java.lang.NoSuchFieldException, java.lang.SecurityException
    {
        java.lang.Class l0, $r0;
        java.lang.String l1;
        java.lang.reflect.Field l2;
        java.lang.reflect.Field[] $r1;
        java.lang.NoSuchFieldException $r2;

        l0 := @this: java.lang.Class;

        l1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();

        specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $r0, 1);

        $r1 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Field[] privateGetDeclaredFields(boolean)>(0);

        l2 = staticinvoke <java.lang.Class: java.lang.reflect.Field searchFields(java.lang.reflect.Field[],java.lang.String)>($r1, l1);

        if l2 != null goto label1;

        $r2 = new java.lang.NoSuchFieldException;

        specialinvoke $r2.<java.lang.NoSuchFieldException: void <init>(java.lang.String)>(l1);

        throw $r2;

     label1:
        return l2;
    }

    public java.lang.reflect.Field[] getDeclaredFields() throws java.lang.SecurityException
    {
        java.lang.Class l0, $r0;
        java.lang.reflect.Field[] $r1, $r2;

        l0 := @this: java.lang.Class;

        $r0 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();

        specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $r0, 1);

        $r1 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Field[] privateGetDeclaredFields(boolean)>(0);

        $r2 = staticinvoke <java.lang.Class: java.lang.reflect.Field[] copyFields(java.lang.reflect.Field[])>($r1);

        return $r2;
    }

    private static java.lang.reflect.Field searchFields(java.lang.reflect.Field[], java.lang.String)
    {
        java.lang.reflect.Field[] l0;
        java.lang.String l1, l2, $r1;
        int l3#4, $i0;
        java.lang.reflect.Field $r0, $r3, $r4;
        sun.reflect.ReflectionFactory $r2;

        l0 := @parameter0: java.lang.reflect.Field[];

        l1 := @parameter1: java.lang.String;

        l2 = virtualinvoke l1.<java.lang.String: java.lang.String intern()>();

        l3#4 = 0;

     label1:
        $i0 = lengthof l0;

        if l3#4 >= $i0 goto label3;

        $r0 = l0[l3#4];

        $r1 = virtualinvoke $r0.<java.lang.reflect.Field: java.lang.String getName()>();

        if $r1 != l2 goto label2;

        $r2 = staticinvoke <java.lang.Class: sun.reflect.ReflectionFactory getReflectionFactory()>();

        $r3 = l0[l3#4];

        $r4 = virtualinvoke $r2.<sun.reflect.ReflectionFactory: java.lang.reflect.Field copyField(java.lang.reflect.Field)>($r3);

        return $r4;

     label2:
        l3#4 = l3#4 + 1;

        goto label1;

     label3:
        return null;
    }

    private static java.lang.reflect.Field[] copyFields(java.lang.reflect.Field[])
    {
        java.lang.reflect.Field[] l0, l1;
        sun.reflect.ReflectionFactory l2;
        int $i0, l3#6, $i1;
        java.lang.reflect.Field $r0, $r1;

        l0 := @parameter0: java.lang.reflect.Field[];

        $i0 = lengthof l0;

        l1 = newarray (java.lang.reflect.Field)[$i0];

        l2 = staticinvoke <java.lang.Class: sun.reflect.ReflectionFactory getReflectionFactory()>();

        l3#6 = 0;

     label1:
        $i1 = lengthof l0;

        if l3#6 >= $i1 goto label2;

        $r0 = l0[l3#6];

        $r1 = virtualinvoke l2.<sun.reflect.ReflectionFactory: java.lang.reflect.Field copyField(java.lang.reflect.Field)>($r0);

        l1[l3#6] = $r1;

        l3#6 = l3#6 + 1;

        goto label1;

     label2:
        return l1;
    }

    private java.lang.reflect.Field[] privateGetDeclaredFields(boolean)
    {
        java.lang.Class l0;
        boolean l1;
        java.lang.Class$ReflectionData l3;
        java.lang.reflect.Field[] $r0, l2#8, $r1, l2#15;

        l0 := @this: java.lang.Class;

        l1 := @parameter0: boolean;

        staticinvoke <java.lang.Class: void checkInitted()>();

        l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>();

        if l3 == null goto label2;

        goto label1;

     label1:
        $r0 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Field[] declaredFields>;

        l2#8 = $r0;

        if l2#8 == null goto label2;

        return l2#8;

     label2:
        $r1 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields0(boolean)>(0);

        l2#15 = staticinvoke <sun.reflect.Reflection: java.lang.reflect.Field[] filterFields(java.lang.Class,java.lang.reflect.Field[])>(l0, $r1);

        if l3 == null goto label4;

        goto label3;

     label3:
        l3.<java.lang.Class$ReflectionData: java.lang.reflect.Field[] declaredFields> = l2#15;

     label4:
        return l2#15;
    }


