    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        berkeley.com.sleepycat.je.tree.SplitRequiredException $r1;

        $r0 = class "berkeley/com/sleepycat/je/tree/Tree";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <berkeley.com.sleepycat.je.tree.Tree: boolean $assertionsDisabled> = $z1;

        $r1 = new berkeley.com.sleepycat.je.tree.SplitRequiredException;

        specialinvoke $r1.<berkeley.com.sleepycat.je.tree.SplitRequiredException: void <init>()>();

        <berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.SplitRequiredException splitRequiredException> = $r1;

        return;
    }

    public void <init>(berkeley.com.sleepycat.je.dbi.DatabaseImpl)
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl database;
        java.lang.ThreadLocal $r0;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        database := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = new java.lang.ThreadLocal;

        specialinvoke $r0.<java.lang.ThreadLocal: void <init>()>();

        this.<berkeley.com.sleepycat.je.tree.Tree: java.lang.ThreadLocal treeStatsAccumulatorTL> = $r0;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.Tree: void init(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(database);

        virtualinvoke this.<berkeley.com.sleepycat.je.tree.Tree: void setDatabase(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(database);

        return;
    }

    private void init(berkeley.com.sleepycat.je.dbi.DatabaseImpl)
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl database;
        berkeley.com.sleepycat.je.utilint.StatGroup $r0, $r2, $r5;
        berkeley.com.sleepycat.je.utilint.LongStat $r1;
        berkeley.com.sleepycat.je.utilint.StatDefinition $r3, $r6;
        berkeley.com.sleepycat.je.utilint.IntStat $r4;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        database := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.ChildReference root> = null;

        this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.dbi.DatabaseImpl database> = database;

        $r0 = new berkeley.com.sleepycat.je.utilint.StatGroup;

        specialinvoke $r0.<berkeley.com.sleepycat.je.utilint.StatGroup: void <init>(java.lang.String,java.lang.String)>("BTree", "Composition of btree, types and counts of nodes.");

        this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.utilint.StatGroup stats> = $r0;

        $r1 = new berkeley.com.sleepycat.je.utilint.LongStat;

        $r2 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.utilint.StatGroup stats>;

        $r3 = <berkeley.com.sleepycat.je.dbi.BTreeStatDefinition: berkeley.com.sleepycat.je.utilint.StatDefinition BTREE_RELATCHES_REQUIRED>;

        specialinvoke $r1.<berkeley.com.sleepycat.je.utilint.LongStat: void <init>(berkeley.com.sleepycat.je.utilint.StatGroup,berkeley.com.sleepycat.je.utilint.StatDefinition)>($r2, $r3);

        this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.utilint.LongStat relatchesRequired> = $r1;

        $r4 = new berkeley.com.sleepycat.je.utilint.IntStat;

        $r5 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.utilint.StatGroup stats>;

        $r6 = <berkeley.com.sleepycat.je.dbi.BTreeStatDefinition: berkeley.com.sleepycat.je.utilint.StatDefinition BTREE_ROOT_SPLITS>;

        specialinvoke $r4.<berkeley.com.sleepycat.je.utilint.IntStat: void <init>(berkeley.com.sleepycat.je.utilint.StatGroup,berkeley.com.sleepycat.je.utilint.StatDefinition)>($r5, $r6);

        this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.utilint.IntStat rootSplits> = $r4;

        return;
    }

    public void setDatabase(berkeley.com.sleepycat.je.dbi.DatabaseImpl)
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl database;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        berkeley.com.sleepycat.je.tree.Tree$1 latchContext, $r0;
        berkeley.com.sleepycat.je.latch.SharedLatch $r1;
        int $i0;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        database := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.dbi.DatabaseImpl database> = database;

        envImpl = virtualinvoke database.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r0 = new berkeley.com.sleepycat.je.tree.Tree$1;

        specialinvoke $r0.<berkeley.com.sleepycat.je.tree.Tree$1: void <init>(berkeley.com.sleepycat.je.tree.Tree,berkeley.com.sleepycat.je.dbi.EnvironmentImpl)>(this, envImpl);

        latchContext = $r0;

        $r1 = staticinvoke <berkeley.com.sleepycat.je.latch.LatchFactory: berkeley.com.sleepycat.je.latch.SharedLatch createSharedLatch(berkeley.com.sleepycat.je.latch.LatchContext,boolean)>(latchContext, 0);

        this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch> = $r1;

        $i0 = virtualinvoke database.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: int getNodeMaxTreeEntries()>();

        this.<berkeley.com.sleepycat.je.tree.Tree: int maxTreeEntriesPerNode> = $i0;

        return;
    }

    public long getMaxLNs()
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        berkeley.com.sleepycat.je.tree.IN rootIN;
        int levels, topLevelSlots, $i0, $i1, $i2;
        java.lang.Throwable l4, $r5;
        berkeley.com.sleepycat.je.latch.SharedLatch $r0, $r4, $r6;
        berkeley.com.sleepycat.je.tree.ChildReference $r1;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r2, $r7;
        berkeley.com.sleepycat.je.tree.Node $r3;
        double $d0, $d1, $d2, $d3, $d4;
        long $l3;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        $r0 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch>;

        interfaceinvoke $r0.<berkeley.com.sleepycat.je.latch.SharedLatch: void acquireShared()>();

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.ChildReference root>;

        $r2 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.dbi.DatabaseImpl database>;

        $r3 = virtualinvoke $r1.<berkeley.com.sleepycat.je.tree.ChildReference: berkeley.com.sleepycat.je.tree.Node fetchTarget(berkeley.com.sleepycat.je.dbi.DatabaseImpl,berkeley.com.sleepycat.je.tree.IN)>($r2, null);

        rootIN = (berkeley.com.sleepycat.je.tree.IN) $r3;

        $i0 = virtualinvoke rootIN.<berkeley.com.sleepycat.je.tree.IN: int getLevel()>();

        levels = $i0 & 65535;

        topLevelSlots = virtualinvoke rootIN.<berkeley.com.sleepycat.je.tree.IN: int getNEntries()>();

     label2:
        $r4 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch>;

        interfaceinvoke $r4.<berkeley.com.sleepycat.je.latch.SharedLatch: void release()>();

        goto label6;

     label3:
        $r5 := @caughtexception;

     label4:
        l4 = $r5;

     label5:
        $r6 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch>;

        interfaceinvoke $r6.<berkeley.com.sleepycat.je.latch.SharedLatch: void release()>();

        throw l4;

     label6:
        $d0 = (double) topLevelSlots;

        $r7 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.dbi.DatabaseImpl database>;

        $i1 = virtualinvoke $r7.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: int getNodeMaxTreeEntries()>();

        $d1 = (double) $i1;

        $i2 = levels - 1;

        $d2 = (double) $i2;

        $d3 = staticinvoke <java.lang.Math: double pow(double,double)>($d1, $d2);

        $d4 = $d0 * $d3;

        $l3 = (long) $d4;

        return $l3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public berkeley.com.sleepycat.je.tree.IN withRootLatchedExclusive(berkeley.com.sleepycat.je.tree.WithRootLatched) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        berkeley.com.sleepycat.je.tree.WithRootLatched wrl;
        berkeley.com.sleepycat.je.tree.IN l2;
        java.lang.Throwable l3, $r3;
        berkeley.com.sleepycat.je.latch.SharedLatch $r0, $r2, $r4;
        berkeley.com.sleepycat.je.tree.ChildReference $r1;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        wrl := @parameter0: berkeley.com.sleepycat.je.tree.WithRootLatched;

     label1:
        $r0 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch>;

        interfaceinvoke $r0.<berkeley.com.sleepycat.je.latch.SharedLatch: void acquireExclusive()>();

        $r1 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.ChildReference root>;

        l2 = interfaceinvoke wrl.<berkeley.com.sleepycat.je.tree.WithRootLatched: berkeley.com.sleepycat.je.tree.IN doWork(berkeley.com.sleepycat.je.tree.ChildReference)>($r1);

     label2:
        $r2 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch>;

        interfaceinvoke $r2.<berkeley.com.sleepycat.je.latch.SharedLatch: void release()>();

        return l2;

     label3:
        $r3 := @caughtexception;

        l3 = $r3;

        $r4 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch>;

        interfaceinvoke $r4.<berkeley.com.sleepycat.je.latch.SharedLatch: void release()>();

        throw l3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public berkeley.com.sleepycat.je.tree.SearchResult getParentINForChildIN(long, byte[], int, int, boolean, boolean, berkeley.com.sleepycat.je.CacheMode, java.util.List) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        long targetNodeId, $l1, $l9, $l10, $l19;
        byte[] targetKey;
        int targetLevel, exclusiveLevel, $i0, $i3, $i4, $i5, $i6, $i7, $i8, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i21;
        boolean requireExactMatch, doFetch, $z1, $z2, $z3, success#50, $z4, $z5, $z7, $z8, $z10, $z11, $z12, $z13, success#192, $z14, $z15, $z16, $z17, $z18, $z19, $z20;
        berkeley.com.sleepycat.je.CacheMode cacheMode;
        java.util.List trackingList;
        berkeley.com.sleepycat.je.tree.SearchResult result, $r2;
        java.lang.Throwable l15, $r21;
        berkeley.com.sleepycat.je.utilint.TestHook $r0, $r14, $r16;
        java.lang.AssertionError $r1, $r3, $r4, $r11, $r12, $r15, $r17, $r18, $r20, $r24;
        berkeley.com.sleepycat.je.tree.IN rootIN#17, parent#46, child#48, rootIN#58, rootIN#123, $r22, $r23;
        byte $b2, $b20;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        berkeley.com.sleepycat.je.tree.TrackingInfo $r13;
        berkeley.com.sleepycat.je.tree.Node $r19;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        targetNodeId := @parameter0: long;

        targetKey := @parameter1: byte[];

        targetLevel := @parameter2: int;

        exclusiveLevel := @parameter3: int;

        requireExactMatch := @parameter4: boolean;

        doFetch := @parameter5: boolean;

        cacheMode := @parameter6: berkeley.com.sleepycat.je.CacheMode;

        trackingList := @parameter7: java.util.List;

        $r0 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.utilint.TestHook getParentINHook>;

        staticinvoke <berkeley.com.sleepycat.je.utilint.TestHookExecute: boolean doHookIfSet(berkeley.com.sleepycat.je.utilint.TestHook)>($r0);

        $z1 = <berkeley.com.sleepycat.je.tree.Tree: boolean $assertionsDisabled>;

        if $z1 != 0 goto label01;

        if doFetch != 0 goto label01;

        $i0 = exclusiveLevel & 65535;

        if $i0 >= 2 goto label01;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label01:
        $r2 = new berkeley.com.sleepycat.je.tree.SearchResult;

        specialinvoke $r2.<berkeley.com.sleepycat.je.tree.SearchResult: void <init>()>();

        result = $r2;

        rootIN#17 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.IN getRootIN(berkeley.com.sleepycat.je.CacheMode)>(cacheMode);

        if rootIN#17 != null goto label02;

        return result;

     label02:
        $z2 = <berkeley.com.sleepycat.je.tree.Tree: boolean $assertionsDisabled>;

        if $z2 != 0 goto label03;

        $l1 = virtualinvoke rootIN#17.<berkeley.com.sleepycat.je.tree.IN: long getNodeId()>();

        $b2 = $l1 cmp targetNodeId;

        if $b2 != 0 goto label03;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label03:
        $z3 = <berkeley.com.sleepycat.je.tree.Tree: boolean $assertionsDisabled>;

        if $z3 != 0 goto label04;

        $i3 = virtualinvoke rootIN#17.<berkeley.com.sleepycat.je.tree.IN: int getLevel()>();

        if $i3 >= exclusiveLevel goto label04;

        $r4 = new java.lang.AssertionError;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rootLevel=");

        $i4 = virtualinvoke rootIN#17.<berkeley.com.sleepycat.je.tree.IN: int getLevel()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" exLevel=");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(exclusiveLevel);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>($r10);

        throw $r4;

     label04:
        parent#46 = rootIN#17;

        child#48 = null;

     label05:
        $i5 = virtualinvoke rootIN#17.<berkeley.com.sleepycat.je.tree.IN: int getLevel()>();

        if $i5 > exclusiveLevel goto label07;

        virtualinvoke rootIN#17.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        rootIN#58 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.IN getRootINLatchedExclusive(berkeley.com.sleepycat.je.CacheMode)>(cacheMode);

        $z4 = <berkeley.com.sleepycat.je.tree.Tree: boolean $assertionsDisabled>;

        if $z4 != 0 goto label06;

        if rootIN#58 != null goto label06;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label06:
        parent#46 = rootIN#58;

     label07:
        $z5 = <berkeley.com.sleepycat.je.tree.Tree: boolean $assertionsDisabled>;

        if $z5 != 0 goto label08;

        $i6 = virtualinvoke parent#46.<berkeley.com.sleepycat.je.tree.IN: int getNEntries()>();

        if $i6 > 0 goto label08;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label08:
        $i7 = virtualinvoke parent#46.<berkeley.com.sleepycat.je.tree.IN: int findEntry(byte[],boolean,boolean)>(targetKey, 0, 0);

        result.<berkeley.com.sleepycat.je.tree.SearchResult: int index> = $i7;

        if trackingList == null goto label09;

        $r13 = new berkeley.com.sleepycat.je.tree.TrackingInfo;

        $i8 = result.<berkeley.com.sleepycat.je.tree.SearchResult: int index>;

        $l9 = virtualinvoke parent#46.<berkeley.com.sleepycat.je.tree.IN: long getLsn(int)>($i8);

        $l10 = virtualinvoke parent#46.<berkeley.com.sleepycat.je.tree.IN: long getNodeId()>();

        $i11 = virtualinvoke parent#46.<berkeley.com.sleepycat.je.tree.IN: int getNEntries()>();

        $i12 = result.<berkeley.com.sleepycat.je.tree.SearchResult: int index>;

        specialinvoke $r13.<berkeley.com.sleepycat.je.tree.TrackingInfo: void <init>(long,long,int,int)>($l9, $l10, $i11, $i12);

        interfaceinvoke trackingList.<java.util.List: boolean add(java.lang.Object)>($r13);

     label09:
        $z7 = <berkeley.com.sleepycat.je.tree.Tree: boolean $assertionsDisabled>;

        if $z7 != 0 goto label10;

        $r14 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.utilint.TestHook searchHook>;

        $z8 = staticinvoke <berkeley.com.sleepycat.je.utilint.TestHookExecute: boolean doHookIfSet(berkeley.com.sleepycat.je.utilint.TestHook)>($r14);

        if $z8 != 0 goto label10;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label10:
        if targetLevel <= 0 goto label11;

        $i13 = virtualinvoke parent#46.<berkeley.com.sleepycat.je.tree.IN: int getLevel()>();

        $i14 = targetLevel + 1;

        if $i13 != $i14 goto label11;

        result.<berkeley.com.sleepycat.je.tree.SearchResult: boolean exactParentFound> = 1;

        result.<berkeley.com.sleepycat.je.tree.SearchResult: berkeley.com.sleepycat.je.tree.IN parent> = parent#46;

        goto label27;

     label11:
        if doFetch == 0 goto label15;

        child#48 = virtualinvoke parent#46.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN fetchINWithNoLatch(berkeley.com.sleepycat.je.tree.SearchResult,byte[],berkeley.com.sleepycat.je.CacheMode)>(result, targetKey, cacheMode);

        if child#48 != null goto label17;

        if trackingList == null goto label12;

        interfaceinvoke trackingList.<java.util.List: void clear()>();

     label12:
        virtualinvoke result.<berkeley.com.sleepycat.je.tree.SearchResult: void reset()>();

        $r16 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.utilint.TestHook fetchINHook>;

        staticinvoke <berkeley.com.sleepycat.je.utilint.TestHookExecute: boolean doHookIfSet(berkeley.com.sleepycat.je.utilint.TestHook,java.lang.Object)>($r16, child#48);

        rootIN#123 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.IN getRootIN(berkeley.com.sleepycat.je.CacheMode)>(cacheMode);

        $z10 = <berkeley.com.sleepycat.je.tree.Tree: boolean $assertionsDisabled>;

        if $z10 != 0 goto label13;

        if rootIN#123 != null goto label13;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();

        throw $r17;

     label13:
        $i15 = virtualinvoke rootIN#123.<berkeley.com.sleepycat.je.tree.IN: int getLevel()>();

        if $i15 > exclusiveLevel goto label14;

        virtualinvoke rootIN#123.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        rootIN#123 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.IN getRootINLatchedExclusive(berkeley.com.sleepycat.je.CacheMode)>(cacheMode);

        $z11 = <berkeley.com.sleepycat.je.tree.Tree: boolean $assertionsDisabled>;

        if $z11 != 0 goto label14;

        if rootIN#123 != null goto label14;

        $r18 = new java.lang.AssertionError;

        specialinvoke $r18.<java.lang.AssertionError: void <init>()>();

        throw $r18;

     label14:
        parent#46 = rootIN#123;

        goto label07;

     label15:
        $i16 = virtualinvoke parent#46.<berkeley.com.sleepycat.je.tree.IN: int getNormalizedLevel()>();

        if $i16 != 2 goto label16;

        $i17 = result.<berkeley.com.sleepycat.je.tree.SearchResult: int index>;

        child#48 = virtualinvoke parent#46.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN loadIN(int,berkeley.com.sleepycat.je.CacheMode)>($i17, cacheMode);

        goto label17;

     label16:
        $i18 = result.<berkeley.com.sleepycat.je.tree.SearchResult: int index>;

        $r19 = virtualinvoke parent#46.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.Node getTarget(int)>($i18);

        child#48 = (berkeley.com.sleepycat.je.tree.IN) $r19;

     label17:
        $z12 = <berkeley.com.sleepycat.je.tree.Tree: boolean $assertionsDisabled>;

        if $z12 != 0 goto label18;

        if child#48 != null goto label18;

        if doFetch == 0 goto label18;

        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();

        throw $r20;

     label18:
        if child#48 != null goto label21;

        if requireExactMatch == 0 goto label19;

        virtualinvoke parent#46.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        goto label20;

     label19:
        result.<berkeley.com.sleepycat.je.tree.SearchResult: berkeley.com.sleepycat.je.tree.IN parent> = parent#46;

     label20:
        result.<berkeley.com.sleepycat.je.tree.SearchResult: boolean childNotResident> = 1;

        goto label27;

     label21:
        $l19 = virtualinvoke child#48.<berkeley.com.sleepycat.je.tree.IN: long getNodeId()>();

        $b20 = $l19 cmp targetNodeId;

        if $b20 != 0 goto label22;

        result.<berkeley.com.sleepycat.je.tree.SearchResult: boolean exactParentFound> = 1;

        result.<berkeley.com.sleepycat.je.tree.SearchResult: berkeley.com.sleepycat.je.tree.IN parent> = parent#46;

        goto label27;

     label22:
        $z13 = virtualinvoke child#48.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z13 == 0 goto label24;

        if requireExactMatch == 0 goto label23;

        virtualinvoke parent#46.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        goto label27;

     label23:
        result.<berkeley.com.sleepycat.je.tree.SearchResult: berkeley.com.sleepycat.je.tree.IN parent> = parent#46;

        goto label27;

     label24:
        $i21 = virtualinvoke child#48.<berkeley.com.sleepycat.je.tree.IN: int getLevel()>();

        if $i21 > exclusiveLevel goto label25;

        staticinvoke <berkeley.com.sleepycat.je.tree.Tree: void latchChild(berkeley.com.sleepycat.je.tree.IN,berkeley.com.sleepycat.je.tree.IN,berkeley.com.sleepycat.je.CacheMode)>(parent#46, child#48, cacheMode);

        goto label26;

     label25:
        staticinvoke <berkeley.com.sleepycat.je.tree.Tree: void latchChildShared(berkeley.com.sleepycat.je.tree.IN,berkeley.com.sleepycat.je.tree.IN,berkeley.com.sleepycat.je.CacheMode)>(parent#46, child#48, cacheMode);

     label26:
        virtualinvoke parent#46.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        parent#46 = child#48;

        child#48 = null;

        goto label07;

     label27:
        goto label33;

     label28:
        $r21 := @caughtexception;

     label29:
        l15 = $r21;

     label30:
        $z16 = virtualinvoke parent#46.<berkeley.com.sleepycat.je.tree.IN: boolean isLatchOwner()>();

        if $z16 == 0 goto label31;

        virtualinvoke parent#46.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label31:
        if child#48 == null goto label32;

        $z17 = virtualinvoke child#48.<berkeley.com.sleepycat.je.tree.IN: boolean isLatchOwner()>();

        if $z17 == 0 goto label32;

        virtualinvoke child#48.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label32:
        throw l15;

     label33:
        $r22 = result.<berkeley.com.sleepycat.je.tree.SearchResult: berkeley.com.sleepycat.je.tree.IN parent>;

        if $r22 == null goto label36;

        $z18 = <berkeley.com.sleepycat.je.latch.LatchSupport: boolean TRACK_LATCHES>;

        if $z18 == 0 goto label34;

        staticinvoke <berkeley.com.sleepycat.je.latch.LatchSupport: void expectBtreeLatchesHeld(int)>(1);

     label34:
        $z19 = <berkeley.com.sleepycat.je.tree.Tree: boolean $assertionsDisabled>;

        if $z19 != 0 goto label36;

        if doFetch != 0 goto label35;

        if requireExactMatch == 0 goto label36;

     label35:
        $r23 = result.<berkeley.com.sleepycat.je.tree.SearchResult: berkeley.com.sleepycat.je.tree.IN parent>;

        $z20 = virtualinvoke $r23.<berkeley.com.sleepycat.je.tree.IN: boolean isLatchOwner()>();

        if $z20 != 0 goto label36;

        $r24 = new java.lang.AssertionError;

        specialinvoke $r24.<java.lang.AssertionError: void <init>()>();

        throw $r24;

     label36:
        return result;

        catch java.lang.Throwable from label05 to label27 with label28;
        catch java.lang.Throwable from label29 to label30 with label28;
    }

    private static void latchChildShared(berkeley.com.sleepycat.je.tree.IN, berkeley.com.sleepycat.je.tree.IN, berkeley.com.sleepycat.je.CacheMode)
    {
        berkeley.com.sleepycat.je.tree.IN parent, child, $r0;
        berkeley.com.sleepycat.je.CacheMode cacheMode;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r1;

        parent := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        child := @parameter1: berkeley.com.sleepycat.je.tree.IN;

        cacheMode := @parameter2: berkeley.com.sleepycat.je.CacheMode;

        virtualinvoke child.<berkeley.com.sleepycat.je.tree.IN: void latchShared(berkeley.com.sleepycat.je.CacheMode)>(cacheMode);

        $r0 = virtualinvoke child.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getParent()>();

        if $r0 == parent goto label1;

        $r1 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState()>();

        throw $r1;

     label1:
        return;
    }

    private static void latchChild(berkeley.com.sleepycat.je.tree.IN, berkeley.com.sleepycat.je.tree.IN, berkeley.com.sleepycat.je.CacheMode)
    {
        berkeley.com.sleepycat.je.tree.IN parent, child, $r0;
        berkeley.com.sleepycat.je.CacheMode cacheMode;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r1;

        parent := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        child := @parameter1: berkeley.com.sleepycat.je.tree.IN;

        cacheMode := @parameter2: berkeley.com.sleepycat.je.CacheMode;

        virtualinvoke child.<berkeley.com.sleepycat.je.tree.IN: void latch(berkeley.com.sleepycat.je.CacheMode)>(cacheMode);

        $r0 = virtualinvoke child.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN getParent()>();

        if $r0 == parent goto label1;

        $r1 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState()>();

        throw $r1;

     label1:
        return;
    }

    public berkeley.com.sleepycat.je.tree.IN getRootIN(berkeley.com.sleepycat.je.CacheMode) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        berkeley.com.sleepycat.je.CacheMode cacheMode;
        berkeley.com.sleepycat.je.tree.IN $r0;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        cacheMode := @parameter0: berkeley.com.sleepycat.je.CacheMode;

        $r0 = specialinvoke this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.IN getRootINInternal(berkeley.com.sleepycat.je.CacheMode,boolean)>(cacheMode, 0);

        return $r0;
    }

    public berkeley.com.sleepycat.je.tree.IN getRootINLatchedExclusive(berkeley.com.sleepycat.je.CacheMode) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        berkeley.com.sleepycat.je.CacheMode cacheMode;
        berkeley.com.sleepycat.je.tree.IN $r0;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        cacheMode := @parameter0: berkeley.com.sleepycat.je.CacheMode;

        $r0 = specialinvoke this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.IN getRootINInternal(berkeley.com.sleepycat.je.CacheMode,boolean)>(cacheMode, 1);

        return $r0;
    }

    private berkeley.com.sleepycat.je.tree.IN getRootINInternal(berkeley.com.sleepycat.je.CacheMode, boolean) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        berkeley.com.sleepycat.je.CacheMode cacheMode;
        boolean exclusive;
        berkeley.com.sleepycat.je.tree.IN l3;
        java.lang.Throwable l4, $r2;
        berkeley.com.sleepycat.je.latch.SharedLatch $r0, $r1, $r3;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        cacheMode := @parameter0: berkeley.com.sleepycat.je.CacheMode;

        exclusive := @parameter1: boolean;

        $r0 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch>;

        interfaceinvoke $r0.<berkeley.com.sleepycat.je.latch.SharedLatch: void acquireShared()>();

     label1:
        l3 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.IN getRootINRootAlreadyLatched(berkeley.com.sleepycat.je.CacheMode,boolean)>(cacheMode, exclusive);

     label2:
        $r1 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch>;

        interfaceinvoke $r1.<berkeley.com.sleepycat.je.latch.SharedLatch: void release()>();

        return l3;

     label3:
        $r2 := @caughtexception;

     label4:
        l4 = $r2;

     label5:
        $r3 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch>;

        interfaceinvoke $r3.<berkeley.com.sleepycat.je.latch.SharedLatch: void release()>();

        throw l4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public berkeley.com.sleepycat.je.tree.IN getRootINRootAlreadyLatched(berkeley.com.sleepycat.je.CacheMode, boolean)
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        berkeley.com.sleepycat.je.CacheMode cacheMode;
        boolean exclusive, $z0;
        berkeley.com.sleepycat.je.tree.IN rootIN;
        berkeley.com.sleepycat.je.tree.ChildReference $r0;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r1;
        berkeley.com.sleepycat.je.tree.Node $r2;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        cacheMode := @parameter0: berkeley.com.sleepycat.je.CacheMode;

        exclusive := @parameter1: boolean;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.Tree: boolean rootExists()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r0 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.ChildReference root>;

        $r1 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.dbi.DatabaseImpl database>;

        $r2 = virtualinvoke $r0.<berkeley.com.sleepycat.je.tree.ChildReference: berkeley.com.sleepycat.je.tree.Node fetchTarget(berkeley.com.sleepycat.je.dbi.DatabaseImpl,berkeley.com.sleepycat.je.tree.IN)>($r1, null);

        rootIN = (berkeley.com.sleepycat.je.tree.IN) $r2;

        if exclusive == 0 goto label2;

        virtualinvoke rootIN.<berkeley.com.sleepycat.je.tree.IN: void latch(berkeley.com.sleepycat.je.CacheMode)>(cacheMode);

        goto label3;

     label2:
        virtualinvoke rootIN.<berkeley.com.sleepycat.je.tree.IN: void latchShared(berkeley.com.sleepycat.je.CacheMode)>(cacheMode);

     label3:
        return rootIN;
    }

    public boolean rootExists()
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        berkeley.com.sleepycat.je.tree.ChildReference $r0, $r1, $r3;
        berkeley.com.sleepycat.je.tree.Node $r2;
        long $l0;
        byte $b1;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        $r0 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.ChildReference root>;

        if $r0 != null goto label1;

        return 0;

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.ChildReference root>;

        $r2 = virtualinvoke $r1.<berkeley.com.sleepycat.je.tree.ChildReference: berkeley.com.sleepycat.je.tree.Node getTarget()>();

        if $r2 != null goto label2;

        $r3 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.ChildReference root>;

        $l0 = virtualinvoke $r3.<berkeley.com.sleepycat.je.tree.ChildReference: long getLsn()>();

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label2;

        return 0;

     label2:
        return 1;
    }

    public boolean getParentBINForChildLN(berkeley.com.sleepycat.je.tree.TreeLocation, byte[], boolean, boolean, berkeley.com.sleepycat.je.CacheMode) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        berkeley.com.sleepycat.je.tree.TreeLocation location;
        byte[] key;
        boolean splitsAllowed, blindDeltaOps, match, $z0, $z1, $z2, $z4;
        berkeley.com.sleepycat.je.CacheMode cacheMode;
        java.lang.RuntimeException e, $r0;
        berkeley.com.sleepycat.je.tree.BIN bin#8;
        int index#22, $i0, index#31, $i2, $i3, $i4;
        long $l1;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        location := @parameter0: berkeley.com.sleepycat.je.tree.TreeLocation;

        key := @parameter1: byte[];

        splitsAllowed := @parameter2: boolean;

        blindDeltaOps := @parameter3: boolean;

        cacheMode := @parameter4: berkeley.com.sleepycat.je.CacheMode;

        virtualinvoke location.<berkeley.com.sleepycat.je.tree.TreeLocation: void reset()>();

        if splitsAllowed == 0 goto label01;

        bin#8 = specialinvoke this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.BIN searchSplitsAllowed(byte[],berkeley.com.sleepycat.je.CacheMode,java.util.Comparator)>(key, cacheMode, null);

        goto label02;

     label01:
        bin#8 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.BIN search(byte[],berkeley.com.sleepycat.je.CacheMode)>(key, cacheMode);

     label02:
        if bin#8 != null goto label03;

        return 0;

     label03:
        location.<berkeley.com.sleepycat.je.tree.TreeLocation: berkeley.com.sleepycat.je.tree.BIN bin> = bin#8;

        index#22 = virtualinvoke bin#8.<berkeley.com.sleepycat.je.tree.BIN: int findEntry(byte[],boolean,boolean)>(key, 1, 0);

        if index#22 < 0 goto label04;

        $i0 = index#22 & 65536;

        if $i0 == 0 goto label04;

        $z0 = 1;

        goto label05;

     label04:
        $z0 = 0;

     label05:
        match = $z0;

        index#31 = index#22 & -65537;

        location.<berkeley.com.sleepycat.je.tree.TreeLocation: int index> = index#31;

        location.<berkeley.com.sleepycat.je.tree.TreeLocation: byte[] lnKey> = key;

        if match == 0 goto label07;

        $l1 = virtualinvoke bin#8.<berkeley.com.sleepycat.je.tree.BIN: long getLsn(int)>(index#31);

        location.<berkeley.com.sleepycat.je.tree.TreeLocation: long childLsn> = $l1;

        $i2 = virtualinvoke bin#8.<berkeley.com.sleepycat.je.tree.BIN: int getLastLoggedSize(int)>(index#31);

        location.<berkeley.com.sleepycat.je.tree.TreeLocation: int childLoggedSize> = $i2;

        $z1 = virtualinvoke bin#8.<berkeley.com.sleepycat.je.tree.BIN: boolean isEntryKnownDeleted(int)>(index#31);

        location.<berkeley.com.sleepycat.je.tree.TreeLocation: boolean isKD> = $z1;

        $z2 = virtualinvoke bin#8.<berkeley.com.sleepycat.je.tree.BIN: boolean isEmbeddedLN(int)>(index#31);

        location.<berkeley.com.sleepycat.je.tree.TreeLocation: boolean isEmbedded> = $z2;

     label06:
        return 1;

     label07:
        $z4 = virtualinvoke bin#8.<berkeley.com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        if $z4 == 0 goto label09;

        if blindDeltaOps == 0 goto label08;

        $i3 = virtualinvoke bin#8.<berkeley.com.sleepycat.je.tree.BIN: int getNEntries()>();

        $i4 = virtualinvoke bin#8.<berkeley.com.sleepycat.je.tree.BIN: int getMaxEntries()>();

        if $i3 < $i4 goto label09;

     label08:
        virtualinvoke bin#8.<berkeley.com.sleepycat.je.tree.BIN: void mutateToFullBIN(boolean)>(splitsAllowed);

        virtualinvoke location.<berkeley.com.sleepycat.je.tree.TreeLocation: void reset()>();

        goto label03;

     label09:
        return 0;

     label10:
        $r0 := @caughtexception;

        e = $r0;

        virtualinvoke bin#8.<berkeley.com.sleepycat.je.tree.BIN: void releaseLatch()>();

        location.<berkeley.com.sleepycat.je.tree.TreeLocation: berkeley.com.sleepycat.je.tree.BIN bin> = null;

        throw e;

        catch java.lang.RuntimeException from label03 to label06 with label10;
        catch java.lang.RuntimeException from label07 to label09 with label10;
    }

    private berkeley.com.sleepycat.je.tree.BIN searchSplitsAllowed(byte[], berkeley.com.sleepycat.je.CacheMode, java.util.Comparator)
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        byte[] key;
        berkeley.com.sleepycat.je.CacheMode cacheMode;
        java.util.Comparator comparator;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl env, $r22;
        java.lang.Throwable l10, $r17;
        berkeley.com.sleepycat.je.tree.BIN insertTarget#2;
        berkeley.com.sleepycat.je.latch.SharedLatch $r0, $r1, $r5, $r6, $r7, $r11, $r15, $r16, $r18;
        boolean rootLatched#7, rootINLatched#9, $z0, $z1, $z2, $z3, $z4, $z5;
        berkeley.com.sleepycat.je.tree.IN rootIN#13;
        berkeley.com.sleepycat.je.tree.ChildReference $r2, $r8;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r3, $r9, $r12, $r14, $r21;
        berkeley.com.sleepycat.je.tree.Node $r4, $r10;
        berkeley.com.sleepycat.je.dbi.DbTree $r13;
        java.lang.AssertionError $r19;
        berkeley.com.sleepycat.je.utilint.LongStat $r20;
        berkeley.com.sleepycat.je.tree.SplitRequiredException $r23;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        key := @parameter0: byte[];

        cacheMode := @parameter1: berkeley.com.sleepycat.je.CacheMode;

        comparator := @parameter2: java.util.Comparator;

        insertTarget#2 = null;

     label01:
        if insertTarget#2 != null goto label25;

        $r0 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch>;

        interfaceinvoke $r0.<berkeley.com.sleepycat.je.latch.SharedLatch: void acquireShared()>();

        rootLatched#7 = 1;

        rootIN#13 = null;

     label02:
        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.Tree: boolean rootExists()>();

        if $z0 != 0 goto label05;

     label03:
        goto label04;

     label04:
        $r1 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch>;

        interfaceinvoke $r1.<berkeley.com.sleepycat.je.latch.SharedLatch: void release()>();

        return null;

     label05:
        $r2 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.ChildReference root>;

        $r3 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.dbi.DatabaseImpl database>;

        $r4 = virtualinvoke $r2.<berkeley.com.sleepycat.je.tree.ChildReference: berkeley.com.sleepycat.je.tree.Node fetchTarget(berkeley.com.sleepycat.je.dbi.DatabaseImpl,berkeley.com.sleepycat.je.tree.IN)>($r3, null);

        rootIN#13 = (berkeley.com.sleepycat.je.tree.IN) $r4;

        $z1 = virtualinvoke rootIN#13.<berkeley.com.sleepycat.je.tree.IN: boolean needsSplitting()>();

        if $z1 == 0 goto label11;

        $r5 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch>;

        interfaceinvoke $r5.<berkeley.com.sleepycat.je.latch.SharedLatch: void release()>();

        $r6 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch>;

        interfaceinvoke $r6.<berkeley.com.sleepycat.je.latch.SharedLatch: void acquireExclusive()>();

        $z2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.Tree: boolean rootExists()>();

        if $z2 != 0 goto label08;

     label06:
        goto label07;

     label07:
        $r7 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch>;

        interfaceinvoke $r7.<berkeley.com.sleepycat.je.latch.SharedLatch: void release()>();

        return null;

     label08:
        $r8 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.ChildReference root>;

        $r9 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.dbi.DatabaseImpl database>;

        $r10 = virtualinvoke $r8.<berkeley.com.sleepycat.je.tree.ChildReference: berkeley.com.sleepycat.je.tree.Node fetchTarget(berkeley.com.sleepycat.je.dbi.DatabaseImpl,berkeley.com.sleepycat.je.tree.IN)>($r9, null);

        rootIN#13 = (berkeley.com.sleepycat.je.tree.IN) $r10;

        $z3 = virtualinvoke rootIN#13.<berkeley.com.sleepycat.je.tree.IN: boolean needsSplitting()>();

        if $z3 == 0 goto label11;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.Tree: void splitRoot(berkeley.com.sleepycat.je.CacheMode)>(cacheMode);

        $r11 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch>;

        interfaceinvoke $r11.<berkeley.com.sleepycat.je.latch.SharedLatch: void release()>();

        rootLatched#7 = 0;

        $r12 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.dbi.DatabaseImpl database>;

        env = virtualinvoke $r12.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r13 = virtualinvoke env.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.DbTree getDbTree()>();

        $r14 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.dbi.DatabaseImpl database>;

        virtualinvoke $r13.<berkeley.com.sleepycat.je.dbi.DbTree: void optionalModifyDbRoot(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>($r14);

     label09:
        goto label10;

     label10:
        goto label01;

     label11:
        virtualinvoke rootIN#13.<berkeley.com.sleepycat.je.tree.IN: void latchShared(berkeley.com.sleepycat.je.CacheMode)>(cacheMode);

     label12:
        goto label13;

     label13:
        $r16 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch>;

        interfaceinvoke $r16.<berkeley.com.sleepycat.je.latch.SharedLatch: void release()>();

        goto label19;

     label14:
        $r17 := @caughtexception;

     label15:
        l10 = $r17;

     label16:
        goto label17;

     label17:
        if rootLatched#7 == 0 goto label18;

        $r18 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch>;

        interfaceinvoke $r18.<berkeley.com.sleepycat.je.latch.SharedLatch: void release()>();

     label18:
        throw l10;

     label19:
        $z4 = <berkeley.com.sleepycat.je.tree.Tree: boolean $assertionsDisabled>;

        if $z4 != 0 goto label20;

        goto label20;

     label20:
        insertTarget#2 = specialinvoke this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.BIN searchSplitsAllowed(berkeley.com.sleepycat.je.tree.IN,byte[],berkeley.com.sleepycat.je.CacheMode,java.util.Comparator)>(rootIN#13, key, cacheMode, null);

        if insertTarget#2 != null goto label22;

        $z5 = <berkeley.com.sleepycat.je.latch.LatchSupport: boolean TRACK_LATCHES>;

        if $z5 == 0 goto label21;

        staticinvoke <berkeley.com.sleepycat.je.latch.LatchSupport: void expectBtreeLatchesHeld(int)>(0);

     label21:
        $r20 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.utilint.LongStat relatchesRequired>;

        virtualinvoke $r20.<berkeley.com.sleepycat.je.utilint.LongStat: void increment()>();

        $r21 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.dbi.DatabaseImpl database>;

        $r22 = virtualinvoke $r21.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r22.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void incRelatchesRequired()>();

     label22:
        goto label24;

     label23:
        $r23 := @caughtexception;

        goto label01;

     label24:
        goto label01;

     label25:
        return insertTarget#2;

        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
        catch berkeley.com.sleepycat.je.tree.SplitRequiredException from label19 to label22 with label23;
    }

    public berkeley.com.sleepycat.je.tree.BIN search(byte[], berkeley.com.sleepycat.je.CacheMode)
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        byte[] key;
        berkeley.com.sleepycat.je.CacheMode cacheMode;
        berkeley.com.sleepycat.je.tree.Tree$SearchType $r0;
        berkeley.com.sleepycat.je.tree.BIN $r1;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        key := @parameter0: byte[];

        cacheMode := @parameter1: berkeley.com.sleepycat.je.CacheMode;

        $r0 = <berkeley.com.sleepycat.je.tree.Tree$SearchType: berkeley.com.sleepycat.je.tree.Tree$SearchType NORMAL>;

        $r1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.BIN search(byte[],berkeley.com.sleepycat.je.tree.Tree$SearchType,berkeley.com.sleepycat.je.tree.BINBoundary,berkeley.com.sleepycat.je.CacheMode,java.util.Comparator)>(key, $r0, null, cacheMode, null);

        return $r1;
    }

    public berkeley.com.sleepycat.je.tree.BIN search(byte[], berkeley.com.sleepycat.je.tree.Tree$SearchType, berkeley.com.sleepycat.je.tree.BINBoundary, berkeley.com.sleepycat.je.CacheMode, java.util.Comparator)
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        byte[] key;
        berkeley.com.sleepycat.je.tree.Tree$SearchType searchType, $r0, $r1, $r4, $r5, $r6;
        berkeley.com.sleepycat.je.tree.BINBoundary binBoundary;
        berkeley.com.sleepycat.je.CacheMode cacheMode;
        java.util.Comparator comparator;
        berkeley.com.sleepycat.je.tree.IN rootIN, parent#22, child#24;
        berkeley.com.sleepycat.je.tree.TreeWalkerStatsAccumulator treeStatsAccumulator;
        berkeley.com.sleepycat.je.tree.BIN l12;
        java.lang.Exception e, e, $r14, $r18;
        java.lang.Throwable l14, $r17;
        boolean $z0, success#20, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.AssertionError $r2, $r12, $r13;
        int $i0, index#42, $i1, $i2, $i3;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r3, $r11;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r10;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r15, $r19;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r16, $r20;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        key := @parameter0: byte[];

        searchType := @parameter1: berkeley.com.sleepycat.je.tree.Tree$SearchType;

        binBoundary := @parameter2: berkeley.com.sleepycat.je.tree.BINBoundary;

        cacheMode := @parameter3: berkeley.com.sleepycat.je.CacheMode;

        comparator := @parameter4: java.util.Comparator;

        rootIN = virtualinvoke this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.IN getRootIN(berkeley.com.sleepycat.je.CacheMode)>(cacheMode);

        if rootIN != null goto label01;

        return null;

     label01:
        $z0 = <berkeley.com.sleepycat.je.tree.Tree: boolean $assertionsDisabled>;

        if $z0 != 0 goto label03;

        $r0 = <berkeley.com.sleepycat.je.tree.Tree$SearchType: berkeley.com.sleepycat.je.tree.Tree$SearchType LEFT>;

        if searchType == $r0 goto label02;

        $r1 = <berkeley.com.sleepycat.je.tree.Tree$SearchType: berkeley.com.sleepycat.je.tree.Tree$SearchType RIGHT>;

        if searchType != $r1 goto label03;

     label02:
        if key == null goto label03;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label03:
        if binBoundary == null goto label04;

        binBoundary.<berkeley.com.sleepycat.je.tree.BINBoundary: boolean isLastBin> = 1;

        binBoundary.<berkeley.com.sleepycat.je.tree.BINBoundary: boolean isFirstBin> = 1;

     label04:
        success#20 = 0;

        parent#22 = rootIN;

        child#24 = null;

        treeStatsAccumulator = specialinvoke this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.TreeWalkerStatsAccumulator getTreeStatsAccumulator()>();

     label05:
        if treeStatsAccumulator == null goto label06;

        virtualinvoke parent#22.<berkeley.com.sleepycat.je.tree.IN: void accumulateStats(berkeley.com.sleepycat.je.tree.TreeWalkerStatsAccumulator)>(treeStatsAccumulator);

     label06:
        $i0 = virtualinvoke parent#22.<berkeley.com.sleepycat.je.tree.IN: int getNEntries()>();

        if $i0 != 0 goto label07;

        $r3 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>("Upper IN with 0 entries");

        throw $r3;

     label07:
        $r4 = <berkeley.com.sleepycat.je.tree.Tree$SearchType: berkeley.com.sleepycat.je.tree.Tree$SearchType NORMAL>;

        if searchType != $r4 goto label08;

        index#42 = virtualinvoke parent#22.<berkeley.com.sleepycat.je.tree.IN: int findEntry(byte[],boolean,boolean,java.util.Comparator)>(key, 0, 0, comparator);

        goto label11;

     label08:
        $r5 = <berkeley.com.sleepycat.je.tree.Tree$SearchType: berkeley.com.sleepycat.je.tree.Tree$SearchType LEFT>;

        if searchType != $r5 goto label09;

        index#42 = 0;

        goto label11;

     label09:
        $r6 = <berkeley.com.sleepycat.je.tree.Tree$SearchType: berkeley.com.sleepycat.je.tree.Tree$SearchType RIGHT>;

        if searchType != $r6 goto label10;

        $i1 = virtualinvoke parent#22.<berkeley.com.sleepycat.je.tree.IN: int getNEntries()>();

        index#42 = $i1 - 1;

        goto label11;

     label10:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid value of searchType: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(searchType);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>($r10);

        throw $r11;

     label11:
        $z1 = <berkeley.com.sleepycat.je.tree.Tree: boolean $assertionsDisabled>;

        if $z1 != 0 goto label12;

        if index#42 >= 0 goto label12;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label12:
        if binBoundary == null goto label14;

        $i2 = virtualinvoke parent#22.<berkeley.com.sleepycat.je.tree.IN: int getNEntries()>();

        $i3 = $i2 - 1;

        if index#42 == $i3 goto label13;

        binBoundary.<berkeley.com.sleepycat.je.tree.BINBoundary: boolean isLastBin> = 0;

     label13:
        if index#42 == 0 goto label14;

        binBoundary.<berkeley.com.sleepycat.je.tree.BINBoundary: boolean isFirstBin> = 0;

     label14:
        child#24 = virtualinvoke parent#22.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN fetchINWithNoLatch(int,byte[],berkeley.com.sleepycat.je.CacheMode)>(index#42, key, cacheMode);

        if child#24 != null goto label16;

        parent#22 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.IN getRootIN(berkeley.com.sleepycat.je.CacheMode)>(cacheMode);

        $z2 = <berkeley.com.sleepycat.je.tree.Tree: boolean $assertionsDisabled>;

        if $z2 != 0 goto label15;

        if parent#22 != null goto label15;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label15:
        if treeStatsAccumulator == null goto label18;

        virtualinvoke parent#22.<berkeley.com.sleepycat.je.tree.IN: void accumulateStats(berkeley.com.sleepycat.je.tree.TreeWalkerStatsAccumulator)>(treeStatsAccumulator);

        goto label18;

     label16:
        staticinvoke <berkeley.com.sleepycat.je.tree.Tree: void latchChildShared(berkeley.com.sleepycat.je.tree.IN,berkeley.com.sleepycat.je.tree.IN,berkeley.com.sleepycat.je.CacheMode)>(parent#22, child#24, cacheMode);

        if treeStatsAccumulator == null goto label17;

        virtualinvoke child#24.<berkeley.com.sleepycat.je.tree.IN: void accumulateStats(berkeley.com.sleepycat.je.tree.TreeWalkerStatsAccumulator)>(treeStatsAccumulator);

     label17:
        virtualinvoke parent#22.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        parent#22 = child#24;

        child#24 = null;

     label18:
        $z3 = virtualinvoke parent#22.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z3 == 0 goto label06;

        success#20 = 1;

        l12 = (berkeley.com.sleepycat.je.tree.BIN) parent#22;

     label19:
        goto label20;

     label20:
        return l12;

     label21:
        $r17 := @caughtexception;

     label22:
        l14 = $r17;

     label23:
        if success#20 != 0 goto label28;

     label24:
        if child#24 == null goto label25;

        $z6 = virtualinvoke child#24.<berkeley.com.sleepycat.je.tree.IN: boolean isLatchOwner()>();

        if $z6 == 0 goto label25;

        virtualinvoke child#24.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label25:
        if parent#22 == child#24 goto label26;

        $z7 = virtualinvoke parent#22.<berkeley.com.sleepycat.je.tree.IN: boolean isLatchOwner()>();

        if $z7 == 0 goto label26;

        virtualinvoke parent#22.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label26:
        goto label28;

     label27:
        $r18 := @caughtexception;

        e = $r18;

        $r19 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.dbi.DatabaseImpl database>;

        $r20 = virtualinvoke $r19.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: void traceAndLogException(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r20, "Tree", "searchSubTreeInternal", "", e);

     label28:
        throw l14;

        catch java.lang.Throwable from label05 to label19 with label21;
        catch java.lang.Exception from label24 to label26 with label27;
        catch java.lang.Throwable from label22 to label23 with label21;
    }

    private berkeley.com.sleepycat.je.tree.TreeWalkerStatsAccumulator getTreeStatsAccumulator()
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        int $i0;
        java.lang.ThreadLocal $r0;
        java.lang.Object $r1;
        berkeley.com.sleepycat.je.tree.TreeWalkerStatsAccumulator $r2;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        $i0 = staticinvoke <berkeley.com.sleepycat.je.dbi.EnvironmentImpl: int getThreadLocalReferenceCount()>();

        if $i0 <= 0 goto label1;

        $r0 = this.<berkeley.com.sleepycat.je.tree.Tree: java.lang.ThreadLocal treeStatsAccumulatorTL>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r2 = (berkeley.com.sleepycat.je.tree.TreeWalkerStatsAccumulator) $r1;

        return $r2;

     label1:
        return null;
    }

    private void splitRoot(berkeley.com.sleepycat.je.CacheMode) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        berkeley.com.sleepycat.je.CacheMode cacheMode;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl env;
        berkeley.com.sleepycat.je.dbi.INList inMemoryINs;
        byte[] rootIdKey;
        boolean inserted, $z0;
        java.lang.Throwable l13, l14, $r7, $r12;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r0, $r2, $r5, $r10;
        berkeley.com.sleepycat.je.tree.ChildReference $r1, $r8, $r9, $r11;
        berkeley.com.sleepycat.je.tree.Node $r3;
        berkeley.com.sleepycat.je.tree.IN curRoot#15, newRoot#23, $r4;
        int $i0, $i1, $i2, $i3;
        long curRootLsn#49, logLsn#61, $l4;
        java.lang.AssertionError $r6;
        berkeley.com.sleepycat.je.utilint.IntStat $r13;
        java.util.logging.Level $r14;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        cacheMode := @parameter0: berkeley.com.sleepycat.je.CacheMode;

        $r0 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.dbi.DatabaseImpl database>;

        env = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        inMemoryINs = virtualinvoke env.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.INList getInMemoryINs()>();

        $r1 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.ChildReference root>;

        $r2 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.dbi.DatabaseImpl database>;

        $r3 = virtualinvoke $r1.<berkeley.com.sleepycat.je.tree.ChildReference: berkeley.com.sleepycat.je.tree.Node fetchTarget(berkeley.com.sleepycat.je.dbi.DatabaseImpl,berkeley.com.sleepycat.je.tree.IN)>($r2, null);

        curRoot#15 = (berkeley.com.sleepycat.je.tree.IN) $r3;

        virtualinvoke curRoot#15.<berkeley.com.sleepycat.je.tree.IN: void latch(berkeley.com.sleepycat.je.CacheMode)>(cacheMode);

        newRoot#23 = null;

     label01:
        rootIdKey = virtualinvoke curRoot#15.<berkeley.com.sleepycat.je.tree.IN: byte[] getKey(int)>(0);

        $r4 = new berkeley.com.sleepycat.je.tree.IN;

        $r5 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.dbi.DatabaseImpl database>;

        $i0 = this.<berkeley.com.sleepycat.je.tree.Tree: int maxTreeEntriesPerNode>;

        $i1 = virtualinvoke curRoot#15.<berkeley.com.sleepycat.je.tree.IN: int getLevel()>();

        $i2 = $i1 + 1;

        specialinvoke $r4.<berkeley.com.sleepycat.je.tree.IN: void <init>(berkeley.com.sleepycat.je.dbi.DatabaseImpl,byte[],int,int)>($r5, rootIdKey, $i0, $i2);

        newRoot#23 = $r4;

        virtualinvoke newRoot#23.<berkeley.com.sleepycat.je.tree.IN: void latch(berkeley.com.sleepycat.je.CacheMode)>(cacheMode);

        virtualinvoke newRoot#23.<berkeley.com.sleepycat.je.tree.IN: void setIsRoot(boolean)>(1);

        virtualinvoke curRoot#15.<berkeley.com.sleepycat.je.tree.IN: void setIsRoot(boolean)>(0);

     label02:
        curRootLsn#49 = virtualinvoke curRoot#15.<berkeley.com.sleepycat.je.tree.IN: long optionalLogProvisional(berkeley.com.sleepycat.je.tree.IN)>(newRoot#23);

        inserted = virtualinvoke newRoot#23.<berkeley.com.sleepycat.je.tree.IN: boolean insertEntry(berkeley.com.sleepycat.je.tree.Node,byte[],long)>(curRoot#15, rootIdKey, curRootLsn#49);

        $z0 = <berkeley.com.sleepycat.je.tree.Tree: boolean $assertionsDisabled>;

        if $z0 != 0 goto label03;

        if inserted != 0 goto label03;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label03:
        logLsn#61 = virtualinvoke newRoot#23.<berkeley.com.sleepycat.je.tree.IN: long optionalLog()>();

     label04:
        goto label08;

     label05:
        $r7 := @caughtexception;

     label06:
        l13 = $r7;

     label07:
        virtualinvoke curRoot#15.<berkeley.com.sleepycat.je.tree.IN: void setIsRoot(boolean)>(1);

        throw l13;

     label08:
        virtualinvoke inMemoryINs.<berkeley.com.sleepycat.je.dbi.INList: void add(berkeley.com.sleepycat.je.tree.IN)>(newRoot#23);

        $r8 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.ChildReference root>;

        virtualinvoke $r8.<berkeley.com.sleepycat.je.tree.ChildReference: void setTarget(berkeley.com.sleepycat.je.tree.Node)>(newRoot#23);

        $r9 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.ChildReference root>;

        $r10 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.dbi.DatabaseImpl database>;

        virtualinvoke $r9.<berkeley.com.sleepycat.je.tree.ChildReference: void updateLsnAfterOptionalLog(berkeley.com.sleepycat.je.dbi.DatabaseImpl,long)>($r10, logLsn#61);

        $i3 = this.<berkeley.com.sleepycat.je.tree.Tree: int maxTreeEntriesPerNode>;

        virtualinvoke curRoot#15.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN split(berkeley.com.sleepycat.je.tree.IN,int,berkeley.com.sleepycat.je.tree.IN,int)>(newRoot#23, 0, null, $i3);

        $r11 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.ChildReference root>;

        $l4 = virtualinvoke newRoot#23.<berkeley.com.sleepycat.je.tree.IN: long getLastLoggedLsn()>();

        virtualinvoke $r11.<berkeley.com.sleepycat.je.tree.ChildReference: void setLsn(long)>($l4);

     label09:
        virtualinvoke newRoot#23.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        virtualinvoke curRoot#15.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        goto label13;

     label10:
        $r12 := @caughtexception;

     label11:
        l14 = $r12;

     label12:
        virtualinvoke newRoot#23.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        virtualinvoke curRoot#15.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        throw l14;

     label13:
        $r13 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.utilint.IntStat rootSplits>;

        virtualinvoke $r13.<berkeley.com.sleepycat.je.utilint.IntStat: void increment()>();

        $r14 = <java.util.logging.Level: java.util.logging.Level FINE>;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.Tree: void traceSplitRoot(java.util.logging.Level,java.lang.String,berkeley.com.sleepycat.je.tree.IN,long,berkeley.com.sleepycat.je.tree.IN,long)>($r14, "RootSplit:", newRoot#23, logLsn#61, curRoot#15, curRootLsn#49);

        return;

        catch java.lang.Throwable from label02 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private berkeley.com.sleepycat.je.tree.BIN searchSplitsAllowed(berkeley.com.sleepycat.je.tree.IN, byte[], berkeley.com.sleepycat.je.CacheMode, java.util.Comparator) throws berkeley.com.sleepycat.je.tree.SplitRequiredException
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        byte[] key;
        berkeley.com.sleepycat.je.CacheMode cacheMode;
        java.util.Comparator comparator;
        int index, $i0;
        java.lang.Throwable l10, $r10;
        berkeley.com.sleepycat.je.tree.IN rootIN#1, parent#12, child#14, rootIN#75;
        boolean $z0, $z1, $z2, success#16, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17;
        java.lang.AssertionError $r0, $r3, $r7, $r8;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r1, $r2, $r9;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r4;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r5;
        berkeley.com.sleepycat.je.utilint.TestHook $r6;
        berkeley.com.sleepycat.je.tree.BIN l9#94;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        rootIN#1 := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        key := @parameter1: byte[];

        cacheMode := @parameter2: berkeley.com.sleepycat.je.CacheMode;

        comparator := @parameter3: java.util.Comparator;

        $z0 = <berkeley.com.sleepycat.je.tree.Tree: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $z1 = virtualinvoke rootIN#1.<berkeley.com.sleepycat.je.tree.IN: boolean isLatchOwner()>();

        if $z1 != 0 goto label01;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label01:
        $z2 = virtualinvoke rootIN#1.<berkeley.com.sleepycat.je.tree.IN: boolean isRoot()>();

        if $z2 != 0 goto label02;

        $r1 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>("A null or non-root IN was given as the parent");

        throw $r1;

     label02:
        parent#12 = rootIN#1;

        child#14 = null;

        success#16 = 0;

     label03:
        $i0 = virtualinvoke parent#12.<berkeley.com.sleepycat.je.tree.IN: int getNEntries()>();

        if $i0 != 0 goto label04;

        $r2 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>("Found upper IN with 0 entries");

        throw $r2;

     label04:
        index = virtualinvoke parent#12.<berkeley.com.sleepycat.je.tree.IN: int findEntry(byte[],boolean,boolean,java.util.Comparator)>(key, 0, 0, null);

        $z3 = <berkeley.com.sleepycat.je.tree.Tree: boolean $assertionsDisabled>;

        if $z3 != 0 goto label05;

        if index >= 0 goto label05;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label05:
        child#14 = virtualinvoke parent#12.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN fetchINWithNoLatch(int,byte[],berkeley.com.sleepycat.je.CacheMode)>(index, key, cacheMode);

        if child#14 != null goto label09;

     label06:
        if child#14 == null goto label07;

        $z4 = virtualinvoke child#14.<berkeley.com.sleepycat.je.tree.IN: boolean isLatchOwner()>();

        if $z4 == 0 goto label07;

        virtualinvoke child#14.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label07:
        if parent#12 == child#14 goto label08;

        $z5 = virtualinvoke parent#12.<berkeley.com.sleepycat.je.tree.IN: boolean isLatchOwner()>();

        if $z5 == 0 goto label08;

        virtualinvoke parent#12.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label08:
        return null;

     label09:
        staticinvoke <berkeley.com.sleepycat.je.tree.Tree: void latchChildShared(berkeley.com.sleepycat.je.tree.IN,berkeley.com.sleepycat.je.tree.IN,berkeley.com.sleepycat.je.CacheMode)>(parent#12, child#14, cacheMode);

        $z6 = virtualinvoke child#14.<berkeley.com.sleepycat.je.tree.IN: boolean needsSplitting()>();

        if $z6 == 0 goto label12;

        virtualinvoke child#14.<berkeley.com.sleepycat.je.tree.IN: void mutateToFullBIN(boolean)>(0);

        $r4 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.dbi.DatabaseImpl database>;

        $r5 = virtualinvoke $r4.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r5.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void lazyCompress(berkeley.com.sleepycat.je.tree.IN,boolean)>(child#14, 1);

        $z7 = virtualinvoke child#14.<berkeley.com.sleepycat.je.tree.IN: boolean needsSplitting()>();

        if $z7 == 0 goto label12;

        virtualinvoke child#14.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        virtualinvoke parent#12.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        $z8 = <berkeley.com.sleepycat.je.tree.Tree: boolean $assertionsDisabled>;

        if $z8 != 0 goto label10;

        $r6 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.utilint.TestHook waitHook>;

        $z9 = staticinvoke <berkeley.com.sleepycat.je.utilint.TestHookExecute: boolean doHookIfSet(berkeley.com.sleepycat.je.utilint.TestHook)>($r6);

        if $z9 != 0 goto label10;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label10:
        rootIN#75 = specialinvoke this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.IN forceSplit(byte[],berkeley.com.sleepycat.je.CacheMode)>(key, cacheMode);

        parent#12 = rootIN#75;

        $z10 = <berkeley.com.sleepycat.je.tree.Tree: boolean $assertionsDisabled>;

        if $z10 != 0 goto label11;

        $z11 = virtualinvoke rootIN#75.<berkeley.com.sleepycat.je.tree.IN: boolean isLatchOwner()>();

        if $z11 != 0 goto label11;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label11:
        $z12 = virtualinvoke rootIN#75.<berkeley.com.sleepycat.je.tree.IN: boolean isRoot()>();

        if $z12 != 0 goto label13;

        $r9 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>("A null or non-root IN was given as the parent");

        throw $r9;

     label12:
        virtualinvoke parent#12.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        parent#12 = child#14;

        child#14 = null;

     label13:
        $z13 = virtualinvoke parent#12.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z13 == 0 goto label03;

        success#16 = 1;

        l9#94 = (berkeley.com.sleepycat.je.tree.BIN) parent#12;

     label14:
        goto label15;

     label15:
        return l9#94;

     label16:
        $r10 := @caughtexception;

     label17:
        l10 = $r10;

     label18:
        if success#16 != 0 goto label20;

        if child#14 == null goto label19;

        $z16 = virtualinvoke child#14.<berkeley.com.sleepycat.je.tree.IN: boolean isLatchOwner()>();

        if $z16 == 0 goto label19;

        virtualinvoke child#14.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label19:
        if parent#12 == child#14 goto label20;

        $z17 = virtualinvoke parent#12.<berkeley.com.sleepycat.je.tree.IN: boolean isLatchOwner()>();

        if $z17 == 0 goto label20;

        virtualinvoke parent#12.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label20:
        throw l10;

        catch java.lang.Throwable from label03 to label06 with label16;
        catch java.lang.Throwable from label09 to label14 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    private berkeley.com.sleepycat.je.tree.IN forceSplit(byte[], berkeley.com.sleepycat.je.CacheMode) throws berkeley.com.sleepycat.je.DatabaseException, berkeley.com.sleepycat.je.tree.SplitRequiredException
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        byte[] key;
        berkeley.com.sleepycat.je.CacheMode cacheMode;
        java.util.ArrayList nodeLadder, $r0;
        berkeley.com.sleepycat.je.tree.Tree$SplitInfo info, info, info, $r8, $r11;
        berkeley.com.sleepycat.je.tree.IN grandParent, child#8, rootIN#10, parent#23, parent#87, $r12, $r20, $r24;
        long newRootLsn, lastParentForSplit#72, $l7, $l8, newChildLsn#139;
        java.util.Iterator l11, l21;
        java.lang.Throwable l20, $r22;
        boolean allLeftSideDescent#4, allRightSideDescent#6, success#14, $z0, $z1, $z3, startedSplits#70, $z4, $z5, $z6, success#160, $z7, $z8;
        berkeley.com.sleepycat.je.latch.SharedLatch $r1, $r21, $r25;
        berkeley.com.sleepycat.je.tree.ChildReference $r2, $r15, $r17;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r3, $r16, $r18;
        berkeley.com.sleepycat.je.tree.Node $r4;
        berkeley.com.sleepycat.je.tree.SplitRequiredException $r5;
        int $i0, index#38, $i1, $i2, $i3, i#77, index#90, $i4, $i5, $i6;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r6;
        java.lang.AssertionError $r7;
        java.lang.Object $r9, $r10, $r19, $r23;
        byte $b9;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        key := @parameter0: byte[];

        cacheMode := @parameter1: berkeley.com.sleepycat.je.CacheMode;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        nodeLadder = $r0;

        allLeftSideDescent#4 = 1;

        allRightSideDescent#6 = 1;

        child#8 = null;

        rootIN#10 = null;

        $r1 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch>;

        interfaceinvoke $r1.<berkeley.com.sleepycat.je.latch.SharedLatch: void acquireExclusive()>();

     label01:
        $r2 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.ChildReference root>;

        $r3 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.dbi.DatabaseImpl database>;

        $r4 = virtualinvoke $r2.<berkeley.com.sleepycat.je.tree.ChildReference: berkeley.com.sleepycat.je.tree.Node fetchTarget(berkeley.com.sleepycat.je.dbi.DatabaseImpl,berkeley.com.sleepycat.je.tree.IN)>($r3, null);

        rootIN#10 = (berkeley.com.sleepycat.je.tree.IN) $r4;

        parent#23 = rootIN#10;

        virtualinvoke parent#23.<berkeley.com.sleepycat.je.tree.IN: void latch(berkeley.com.sleepycat.je.CacheMode)>(cacheMode);

        $z0 = virtualinvoke rootIN#10.<berkeley.com.sleepycat.je.tree.IN: boolean needsSplitting()>();

        if $z0 == 0 goto label02;

        $r5 = <berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.SplitRequiredException splitRequiredException>;

        throw $r5;

     label02:
        $i0 = virtualinvoke parent#23.<berkeley.com.sleepycat.je.tree.IN: int getNEntries()>();

        if $i0 != 0 goto label03;

        $r6 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>("Found upper IN with 0 entries");

        throw $r6;

     label03:
        index#38 = virtualinvoke parent#23.<berkeley.com.sleepycat.je.tree.IN: int findEntry(byte[],boolean,boolean)>(key, 0, 0);

        $z1 = <berkeley.com.sleepycat.je.tree.Tree: boolean $assertionsDisabled>;

        if $z1 != 0 goto label04;

        if index#38 >= 0 goto label04;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label04:
        if index#38 == 0 goto label05;

        allLeftSideDescent#4 = 0;

     label05:
        $i1 = virtualinvoke parent#23.<berkeley.com.sleepycat.je.tree.IN: int getNEntries()>();

        $i2 = $i1 - 1;

        if index#38 == $i2 goto label06;

        allRightSideDescent#6 = 0;

     label06:
        child#8 = virtualinvoke parent#23.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN loadIN(int,berkeley.com.sleepycat.je.CacheMode)>(index#38, cacheMode);

        if child#8 != null goto label07;

        goto label08;

     label07:
        staticinvoke <berkeley.com.sleepycat.je.tree.Tree: void latchChild(berkeley.com.sleepycat.je.tree.IN,berkeley.com.sleepycat.je.tree.IN,berkeley.com.sleepycat.je.CacheMode)>(parent#23, child#8, cacheMode);

        $r8 = new berkeley.com.sleepycat.je.tree.Tree$SplitInfo;

        specialinvoke $r8.<berkeley.com.sleepycat.je.tree.Tree$SplitInfo: void <init>(berkeley.com.sleepycat.je.tree.IN,berkeley.com.sleepycat.je.tree.IN,int)>(parent#23, child#8, index#38);

        virtualinvoke nodeLadder.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

        parent#23 = child#8;

        $z3 = virtualinvoke parent#23.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z3 == 0 goto label02;

     label08:
        startedSplits#70 = 0;

        lastParentForSplit#72 = -1L;

        $i3 = virtualinvoke nodeLadder.<java.util.ArrayList: int size()>();

        i#77 = $i3 - 1;

     label09:
        if i#77 < 0 goto label20;

        $r9 = virtualinvoke nodeLadder.<java.util.ArrayList: java.lang.Object get(int)>(i#77);

        info = (berkeley.com.sleepycat.je.tree.Tree$SplitInfo) $r9;

        child#8 = info.<berkeley.com.sleepycat.je.tree.Tree$SplitInfo: berkeley.com.sleepycat.je.tree.IN child>;

        parent#87 = info.<berkeley.com.sleepycat.je.tree.Tree$SplitInfo: berkeley.com.sleepycat.je.tree.IN parent>;

        index#90 = info.<berkeley.com.sleepycat.je.tree.Tree$SplitInfo: int index>;

        $z4 = virtualinvoke child#8.<berkeley.com.sleepycat.je.tree.IN: boolean needsSplitting()>();

        if $z4 == 0 goto label16;

        virtualinvoke child#8.<berkeley.com.sleepycat.je.tree.IN: void mutateToFullBIN(boolean)>(0);

        if i#77 <= 0 goto label10;

        $i4 = i#77 - 1;

        $r10 = virtualinvoke nodeLadder.<java.util.ArrayList: java.lang.Object get(int)>($i4);

        $r11 = (berkeley.com.sleepycat.je.tree.Tree$SplitInfo) $r10;

        $r12 = $r11.<berkeley.com.sleepycat.je.tree.Tree$SplitInfo: berkeley.com.sleepycat.je.tree.IN parent>;

        goto label11;

     label10:
        $r12 = null;

     label11:
        grandParent = $r12;

        if allLeftSideDescent#4 != 0 goto label12;

        if allRightSideDescent#6 == 0 goto label13;

     label12:
        $i5 = this.<berkeley.com.sleepycat.je.tree.Tree: int maxTreeEntriesPerNode>;

        virtualinvoke child#8.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN splitSpecial(berkeley.com.sleepycat.je.tree.IN,int,berkeley.com.sleepycat.je.tree.IN,int,byte[],boolean)>(parent#87, index#90, grandParent, $i5, key, allLeftSideDescent#4);

        goto label14;

     label13:
        $i6 = this.<berkeley.com.sleepycat.je.tree.Tree: int maxTreeEntriesPerNode>;

        virtualinvoke child#8.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN split(berkeley.com.sleepycat.je.tree.IN,int,berkeley.com.sleepycat.je.tree.IN,int)>(parent#87, index#90, grandParent, $i6);

     label14:
        lastParentForSplit#72 = virtualinvoke parent#87.<berkeley.com.sleepycat.je.tree.IN: long getNodeId()>();

        startedSplits#70 = 1;

        $z5 = virtualinvoke parent#87.<berkeley.com.sleepycat.je.tree.IN: boolean isRoot()>();

        if $z5 == 0 goto label15;

        $r15 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.ChildReference root>;

        $r16 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.dbi.DatabaseImpl database>;

        $l7 = virtualinvoke parent#87.<berkeley.com.sleepycat.je.tree.IN: long getLastLoggedLsn()>();

        virtualinvoke $r15.<berkeley.com.sleepycat.je.tree.ChildReference: void updateLsnAfterOptionalLog(berkeley.com.sleepycat.je.dbi.DatabaseImpl,long)>($r16, $l7);

     label15:
        goto label19;

     label16:
        if startedSplits#70 == 0 goto label19;

        $l8 = virtualinvoke child#8.<berkeley.com.sleepycat.je.tree.IN: long getNodeId()>();

        $b9 = lastParentForSplit#72 cmp $l8;

        if $b9 != 0 goto label17;

        newChildLsn#139 = virtualinvoke child#8.<berkeley.com.sleepycat.je.tree.IN: long getLastLoggedLsn()>();

        goto label18;

     label17:
        newChildLsn#139 = virtualinvoke child#8.<berkeley.com.sleepycat.je.tree.IN: long optionalLogProvisional(berkeley.com.sleepycat.je.tree.IN)>(parent#87);

     label18:
        virtualinvoke parent#87.<berkeley.com.sleepycat.je.tree.IN: void updateEntry(int,long,long,int)>(index#90, newChildLsn#139, -1L, 0);

        $z6 = virtualinvoke parent#87.<berkeley.com.sleepycat.je.tree.IN: boolean isRoot()>();

        if $z6 == 0 goto label19;

        newRootLsn = virtualinvoke parent#87.<berkeley.com.sleepycat.je.tree.IN: long optionalLog()>();

        $r17 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.ChildReference root>;

        $r18 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.dbi.DatabaseImpl database>;

        virtualinvoke $r17.<berkeley.com.sleepycat.je.tree.ChildReference: void updateLsnAfterOptionalLog(berkeley.com.sleepycat.je.dbi.DatabaseImpl,long)>($r18, newRootLsn);

     label19:
        virtualinvoke child#8.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        child#8 = null;

        i#77 = i#77 + -1;

        goto label09;

     label20:
        goto label21;

     label21:
        $r21 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch>;

        interfaceinvoke $r21.<berkeley.com.sleepycat.je.latch.SharedLatch: void release()>();

        goto label29;

     label22:
        $r22 := @caughtexception;

     label23:
        l20 = $r22;

     label24:
        if child#8 == null goto label25;

        virtualinvoke child#8.<berkeley.com.sleepycat.je.tree.IN: void releaseLatchIfOwner()>();

     label25:
        l21 = virtualinvoke nodeLadder.<java.util.ArrayList: java.util.Iterator iterator()>();

     label26:
        $z8 = interfaceinvoke l21.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label27;

        $r23 = interfaceinvoke l21.<java.util.Iterator: java.lang.Object next()>();

        info = (berkeley.com.sleepycat.je.tree.Tree$SplitInfo) $r23;

        $r24 = info.<berkeley.com.sleepycat.je.tree.Tree$SplitInfo: berkeley.com.sleepycat.je.tree.IN child>;

        virtualinvoke $r24.<berkeley.com.sleepycat.je.tree.IN: void releaseLatchIfOwner()>();

        goto label26;

     label27:
        if rootIN#10 == null goto label28;

        virtualinvoke rootIN#10.<berkeley.com.sleepycat.je.tree.IN: void releaseLatchIfOwner()>();

     label28:
        $r25 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch>;

        interfaceinvoke $r25.<berkeley.com.sleepycat.je.latch.SharedLatch: void release()>();

        throw l20;

     label29:
        return rootIN#10;

        catch java.lang.Throwable from label01 to label20 with label22;
        catch java.lang.Throwable from label23 to label24 with label22;
    }

    private void traceSplitRoot(java.util.logging.Level, java.lang.String, berkeley.com.sleepycat.je.tree.IN, long, berkeley.com.sleepycat.je.tree.IN, long)
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        java.util.logging.Level level;
        java.lang.String splitType, $r7, $r12, $r16;
        berkeley.com.sleepycat.je.tree.IN newRoot, oldRoot;
        long newRootLsn, oldRootLsn, $l0, $l1;
        java.util.logging.Logger logger;
        java.lang.StringBuilder sb, $r2, $r4, $r6, $r9, $r11;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r0, $r14;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r1, $r15;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        level := @parameter0: java.util.logging.Level;

        splitType := @parameter1: java.lang.String;

        newRoot := @parameter2: berkeley.com.sleepycat.je.tree.IN;

        newRootLsn := @parameter3: long;

        oldRoot := @parameter4: berkeley.com.sleepycat.je.tree.IN;

        oldRootLsn := @parameter5: long;

        $r0 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.dbi.DatabaseImpl database>;

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        logger = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: java.util.logging.Logger getLogger()>();

        $z0 = virtualinvoke logger.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>(level);

        if $z0 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        sb = $r2;

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RootSplit:");

        $r4 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" newRoot=");

        $l0 = virtualinvoke newRoot.<berkeley.com.sleepycat.je.tree.IN: long getNodeId()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r6 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" newRootLsn=");

        $r7 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(newRootLsn);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" oldRoot=");

        $l1 = virtualinvoke oldRoot.<berkeley.com.sleepycat.je.tree.IN: long getNodeId()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r11 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" oldRootLsn=");

        $r12 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(oldRootLsn);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.dbi.DatabaseImpl database>;

        $r15 = virtualinvoke $r14.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r16 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: void logMsg(java.util.logging.Logger,berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.util.logging.Level,java.lang.String)>(logger, $r15, level, $r16);

     label1:
        return;
    }

    public berkeley.com.sleepycat.je.tree.BIN findBinForInsert(byte[], berkeley.com.sleepycat.je.CacheMode)
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        byte[] key, $r10;
        berkeley.com.sleepycat.je.CacheMode cacheMode;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl env;
        berkeley.com.sleepycat.je.dbi.INList inMemoryINs;
        berkeley.com.sleepycat.je.tree.IN rootIN, $r5;
        boolean insertOk, rootLatchIsHeld#2, $z0, $z1, $z2, $z3, $z4;
        java.lang.Throwable l11, $r16;
        berkeley.com.sleepycat.je.latch.SharedLatch $r0, $r1, $r2, $r3, $r13, $r14, $r15, $r17;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r4, $r6, $r8;
        int $i0, $i1;
        berkeley.com.sleepycat.je.tree.BIN $r7, bin#44;
        long logLsn#50, logLsn#62;
        java.lang.AssertionError $r9, $r19;
        berkeley.com.sleepycat.je.tree.ChildReference $r11;
        berkeley.com.sleepycat.je.evictor.Evictor $r12;
        berkeley.com.sleepycat.je.utilint.TestHook $r18;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        key := @parameter0: byte[];

        cacheMode := @parameter1: berkeley.com.sleepycat.je.CacheMode;

        rootLatchIsHeld#2 = 0;

     label01:
        rootLatchIsHeld#2 = 1;

        $r0 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch>;

        interfaceinvoke $r0.<berkeley.com.sleepycat.je.latch.SharedLatch: void acquireShared()>();

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.Tree: boolean rootExists()>();

        if $z0 != 0 goto label04;

        $r1 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch>;

        interfaceinvoke $r1.<berkeley.com.sleepycat.je.latch.SharedLatch: void release()>();

        $r2 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch>;

        interfaceinvoke $r2.<berkeley.com.sleepycat.je.latch.SharedLatch: void acquireExclusive()>();

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.Tree: boolean rootExists()>();

        if $z1 == 0 goto label02;

        $r3 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch>;

        interfaceinvoke $r3.<berkeley.com.sleepycat.je.latch.SharedLatch: void release()>();

        rootLatchIsHeld#2 = 0;

        goto label01;

     label02:
        $r4 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.dbi.DatabaseImpl database>;

        env = virtualinvoke $r4.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        inMemoryINs = virtualinvoke env.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.INList getInMemoryINs()>();

        $r5 = new berkeley.com.sleepycat.je.tree.IN;

        $r6 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.dbi.DatabaseImpl database>;

        $i0 = this.<berkeley.com.sleepycat.je.tree.Tree: int maxTreeEntriesPerNode>;

        specialinvoke $r5.<berkeley.com.sleepycat.je.tree.IN: void <init>(berkeley.com.sleepycat.je.dbi.DatabaseImpl,byte[],int,int)>($r6, key, $i0, 2);

        rootIN = $r5;

        virtualinvoke rootIN.<berkeley.com.sleepycat.je.tree.IN: void setIsRoot(boolean)>(1);

        virtualinvoke rootIN.<berkeley.com.sleepycat.je.tree.IN: void latch(berkeley.com.sleepycat.je.CacheMode)>(cacheMode);

        $r7 = new berkeley.com.sleepycat.je.tree.BIN;

        $r8 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.dbi.DatabaseImpl database>;

        $i1 = this.<berkeley.com.sleepycat.je.tree.Tree: int maxTreeEntriesPerNode>;

        specialinvoke $r7.<berkeley.com.sleepycat.je.tree.BIN: void <init>(berkeley.com.sleepycat.je.dbi.DatabaseImpl,byte[],int,int)>($r8, key, $i1, 1);

        bin#44 = $r7;

        virtualinvoke bin#44.<berkeley.com.sleepycat.je.tree.BIN: void latch(berkeley.com.sleepycat.je.CacheMode)>(cacheMode);

        logLsn#50 = virtualinvoke bin#44.<berkeley.com.sleepycat.je.tree.BIN: long optionalLogProvisionalNoCompress(berkeley.com.sleepycat.je.tree.IN)>(rootIN);

        insertOk = virtualinvoke rootIN.<berkeley.com.sleepycat.je.tree.IN: boolean insertEntry(berkeley.com.sleepycat.je.tree.Node,byte[],long)>(bin#44, key, logLsn#50);

        $z2 = <berkeley.com.sleepycat.je.tree.Tree: boolean $assertionsDisabled>;

        if $z2 != 0 goto label03;

        if insertOk != 0 goto label03;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label03:
        logLsn#62 = virtualinvoke rootIN.<berkeley.com.sleepycat.je.tree.IN: long optionalLog()>();

        virtualinvoke rootIN.<berkeley.com.sleepycat.je.tree.IN: void setDirty(boolean)>(1);

        $r10 = newarray (byte)[0];

        $r11 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.ChildReference makeRootChildReference(berkeley.com.sleepycat.je.tree.Node,byte[],long)>(rootIN, $r10, logLsn#62);

        this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.ChildReference root> = $r11;

        virtualinvoke rootIN.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        virtualinvoke inMemoryINs.<berkeley.com.sleepycat.je.dbi.INList: void add(berkeley.com.sleepycat.je.tree.IN)>(bin#44);

        virtualinvoke inMemoryINs.<berkeley.com.sleepycat.je.dbi.INList: void add(berkeley.com.sleepycat.je.tree.IN)>(rootIN);

        $r12 = virtualinvoke env.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.evictor.Evictor getEvictor()>();

        virtualinvoke $r12.<berkeley.com.sleepycat.je.evictor.Evictor: void addBack(berkeley.com.sleepycat.je.tree.IN)>(bin#44);

        $r13 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch>;

        interfaceinvoke $r13.<berkeley.com.sleepycat.je.latch.SharedLatch: void release()>();

        rootLatchIsHeld#2 = 0;

        goto label05;

     label04:
        $r14 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch>;

        interfaceinvoke $r14.<berkeley.com.sleepycat.je.latch.SharedLatch: void release()>();

        rootLatchIsHeld#2 = 0;

        bin#44 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.BIN searchSplitsAllowed(byte[],berkeley.com.sleepycat.je.CacheMode)>(key, cacheMode);

        if bin#44 != null goto label05;

        goto label01;

     label05:
        if rootLatchIsHeld#2 == 0 goto label10;

        $r15 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch>;

        interfaceinvoke $r15.<berkeley.com.sleepycat.je.latch.SharedLatch: void release()>();

        goto label10;

     label06:
        $r16 := @caughtexception;

     label07:
        l11 = $r16;

     label08:
        if rootLatchIsHeld#2 == 0 goto label09;

        $r17 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch>;

        interfaceinvoke $r17.<berkeley.com.sleepycat.je.latch.SharedLatch: void release()>();

     label09:
        throw l11;

     label10:
        $z3 = <berkeley.com.sleepycat.je.tree.Tree: boolean $assertionsDisabled>;

        if $z3 != 0 goto label11;

        $r18 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.utilint.TestHook ckptHook>;

        $z4 = staticinvoke <berkeley.com.sleepycat.je.utilint.TestHookExecute: boolean doHookIfSet(berkeley.com.sleepycat.je.utilint.TestHook)>($r18);

        if $z4 != 0 goto label11;

        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();

        throw $r19;

     label11:
        return bin#44;

        catch java.lang.Throwable from label01 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
    }

    public berkeley.com.sleepycat.je.tree.ChildReference makeRootChildReference(berkeley.com.sleepycat.je.tree.Node, byte[], long)
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        berkeley.com.sleepycat.je.tree.Node target;
        byte[] key;
        long lsn;
        berkeley.com.sleepycat.je.tree.Tree$RootChildReference $r0;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        target := @parameter0: berkeley.com.sleepycat.je.tree.Node;

        key := @parameter1: byte[];

        lsn := @parameter2: long;

        $r0 = new berkeley.com.sleepycat.je.tree.Tree$RootChildReference;

        specialinvoke $r0.<berkeley.com.sleepycat.je.tree.Tree$RootChildReference: void <init>(berkeley.com.sleepycat.je.tree.Tree,berkeley.com.sleepycat.je.tree.Node,byte[],long,berkeley.com.sleepycat.je.tree.Tree$1)>(this, target, key, lsn, null);

        return $r0;
    }

    public berkeley.com.sleepycat.je.tree.BIN searchSplitsAllowed(byte[], berkeley.com.sleepycat.je.CacheMode)
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        byte[] key;
        berkeley.com.sleepycat.je.CacheMode cacheMode;
        berkeley.com.sleepycat.je.tree.BIN $r0;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        key := @parameter0: byte[];

        cacheMode := @parameter1: berkeley.com.sleepycat.je.CacheMode;

        $r0 = specialinvoke this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.BIN searchSplitsAllowed(byte[],berkeley.com.sleepycat.je.CacheMode,java.util.Comparator)>(key, cacheMode, null);

        return $r0;
    }

    public berkeley.com.sleepycat.je.tree.BIN getNextBin(berkeley.com.sleepycat.je.tree.BIN, berkeley.com.sleepycat.je.CacheMode) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        berkeley.com.sleepycat.je.tree.BIN bin, $r1;
        berkeley.com.sleepycat.je.CacheMode cacheMode;
        berkeley.com.sleepycat.je.tree.IN $r0;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        bin := @parameter0: berkeley.com.sleepycat.je.tree.BIN;

        cacheMode := @parameter1: berkeley.com.sleepycat.je.CacheMode;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.IN getNextIN(berkeley.com.sleepycat.je.tree.IN,boolean,boolean,berkeley.com.sleepycat.je.CacheMode)>(bin, 1, 0, cacheMode);

        $r1 = (berkeley.com.sleepycat.je.tree.BIN) $r0;

        return $r1;
    }

    public berkeley.com.sleepycat.je.tree.BIN getPrevBin(berkeley.com.sleepycat.je.tree.BIN, berkeley.com.sleepycat.je.CacheMode) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        berkeley.com.sleepycat.je.tree.BIN bin, $r1;
        berkeley.com.sleepycat.je.CacheMode cacheMode;
        berkeley.com.sleepycat.je.tree.IN $r0;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        bin := @parameter0: berkeley.com.sleepycat.je.tree.BIN;

        cacheMode := @parameter1: berkeley.com.sleepycat.je.CacheMode;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.IN getNextIN(berkeley.com.sleepycat.je.tree.IN,boolean,boolean,berkeley.com.sleepycat.je.CacheMode)>(bin, 0, 0, cacheMode);

        $r1 = (berkeley.com.sleepycat.je.tree.BIN) $r0;

        return $r1;
    }

    public berkeley.com.sleepycat.je.tree.IN getNextIN(berkeley.com.sleepycat.je.tree.IN, boolean, boolean, berkeley.com.sleepycat.je.CacheMode)
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        berkeley.com.sleepycat.je.tree.IN prevIn, 'ret', curr#28, parent#32, nextIN#34, l17#117, $r4, l17#153;
        boolean forward, latchShared, $z0, $z1, $z2, currIsLatched#30, nextINIsLatched#36, normalExit#38, $z3, $z4, $z5, $z6, $z7, moreEntriesThisIn#83, $z8, $z9, $z10, $z11, $z12, $z13;
        berkeley.com.sleepycat.je.CacheMode cacheMode;
        int targetLevel, $i0, $i1, $i2, index#76, index#78, $i3, $i4, $i5;
        berkeley.com.sleepycat.je.tree.SearchResult result;
        berkeley.com.sleepycat.je.tree.TreeWalkerStatsAccumulator treeStatsAccumulator;
        java.lang.Throwable l18, $r11;
        java.lang.AssertionError $r0, $r2;
        byte[] searchKey#14;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r1, $r10;
        berkeley.com.sleepycat.je.tree.Tree$SearchType $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        prevIn := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        forward := @parameter1: boolean;

        latchShared := @parameter2: boolean;

        cacheMode := @parameter3: berkeley.com.sleepycat.je.CacheMode;

        $z0 = <berkeley.com.sleepycat.je.tree.Tree: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $z1 = virtualinvoke prevIn.<berkeley.com.sleepycat.je.tree.IN: boolean isLatchOwner()>();

        if $z1 != 0 goto label01;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label01:
        $z2 = <berkeley.com.sleepycat.je.latch.LatchSupport: boolean TRACK_LATCHES>;

        if $z2 == 0 goto label02;

        staticinvoke <berkeley.com.sleepycat.je.latch.LatchSupport: void expectBtreeLatchesHeld(int)>(1);

     label02:
        virtualinvoke prevIn.<berkeley.com.sleepycat.je.tree.IN: void mutateToFullBIN(boolean)>(0);

        $i0 = virtualinvoke prevIn.<berkeley.com.sleepycat.je.tree.IN: int getNEntries()>();

        if $i0 != 0 goto label03;

        searchKey#14 = virtualinvoke prevIn.<berkeley.com.sleepycat.je.tree.IN: byte[] getIdentifierKey()>();

        goto label05;

     label03:
        if forward == 0 goto label04;

        $i1 = virtualinvoke prevIn.<berkeley.com.sleepycat.je.tree.IN: int getNEntries()>();

        $i2 = $i1 - 1;

        searchKey#14 = virtualinvoke prevIn.<berkeley.com.sleepycat.je.tree.IN: byte[] getKey(int)>($i2);

        goto label05;

     label04:
        searchKey#14 = virtualinvoke prevIn.<berkeley.com.sleepycat.je.tree.IN: byte[] getKey(int)>(0);

     label05:
        targetLevel = virtualinvoke prevIn.<berkeley.com.sleepycat.je.tree.IN: int getLevel()>();

        curr#28 = prevIn;

        currIsLatched#30 = 0;

        parent#32 = null;

        nextIN#34 = null;

        nextINIsLatched#36 = 0;

        normalExit#38 = 0;

     label06:
        currIsLatched#30 = 0;

        $z3 = virtualinvoke curr#28.<berkeley.com.sleepycat.je.tree.IN: boolean isRoot()>();

        if $z3 == 0 goto label09;

        virtualinvoke curr#28.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        $z4 = <berkeley.com.sleepycat.je.latch.LatchSupport: boolean TRACK_LATCHES>;

        if $z4 == 0 goto label07;

        staticinvoke <berkeley.com.sleepycat.je.latch.LatchSupport: void expectBtreeLatchesHeld(int)>(0);

     label07:
        goto label08;

     label08:
        return null;

     label09:
        result = virtualinvoke this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.SearchResult getParentINForChildIN(berkeley.com.sleepycat.je.tree.IN,boolean,boolean,berkeley.com.sleepycat.je.CacheMode)>(curr#28, 0, 1, cacheMode);

        $z5 = result.<berkeley.com.sleepycat.je.tree.SearchResult: boolean exactParentFound>;

        if $z5 == 0 goto label11;

        $z6 = <berkeley.com.sleepycat.je.latch.LatchSupport: boolean TRACK_LATCHES>;

        if $z6 == 0 goto label10;

        staticinvoke <berkeley.com.sleepycat.je.latch.LatchSupport: void expectBtreeLatchesHeld(int)>(1);

     label10:
        parent#32 = result.<berkeley.com.sleepycat.je.tree.SearchResult: berkeley.com.sleepycat.je.tree.IN parent>;

        goto label12;

     label11:
        $r1 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>("Failed to find parent for IN");

        throw $r1;

     label12:
        index#76 = virtualinvoke parent#32.<berkeley.com.sleepycat.je.tree.IN: int findEntry(byte[],boolean,boolean)>(searchKey#14, 0, 0);

        if forward == 0 goto label15;

        index#78 = index#76 + 1;

        $i3 = virtualinvoke parent#32.<berkeley.com.sleepycat.je.tree.IN: int getNEntries()>();

        if index#78 >= $i3 goto label13;

        $z7 = 1;

        goto label14;

     label13:
        $z7 = 0;

     label14:
        moreEntriesThisIn#83 = $z7;

        goto label18;

     label15:
        if index#76 <= 0 goto label16;

        $z8 = 1;

        goto label17;

     label16:
        $z8 = 0;

     label17:
        moreEntriesThisIn#83 = $z8;

        index#78 = index#76 + -1;

     label18:
        if moreEntriesThisIn#83 == 0 goto label33;

        nextIN#34 = virtualinvoke parent#32.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN fetchIN(int,berkeley.com.sleepycat.je.CacheMode)>(index#78, cacheMode);

        $z9 = <berkeley.com.sleepycat.je.latch.LatchSupport: boolean TRACK_LATCHES>;

        if $z9 == 0 goto label19;

        staticinvoke <berkeley.com.sleepycat.je.latch.LatchSupport: void expectBtreeLatchesHeld(int)>(1);

     label19:
        $i4 = virtualinvoke nextIN#34.<berkeley.com.sleepycat.je.tree.IN: int getLevel()>();

        if $i4 != targetLevel goto label25;

        goto label20;

     label20:
        staticinvoke <berkeley.com.sleepycat.je.tree.Tree: void latchChild(berkeley.com.sleepycat.je.tree.IN,berkeley.com.sleepycat.je.tree.IN,berkeley.com.sleepycat.je.CacheMode)>(parent#32, nextIN#34, cacheMode);

        nextINIsLatched#36 = 1;

        virtualinvoke nextIN#34.<berkeley.com.sleepycat.je.tree.IN: void mutateToFullBIN(boolean)>(0);

        virtualinvoke parent#32.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        parent#32 = null;

        treeStatsAccumulator = specialinvoke this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.TreeWalkerStatsAccumulator getTreeStatsAccumulator()>();

        if treeStatsAccumulator == null goto label21;

        virtualinvoke nextIN#34.<berkeley.com.sleepycat.je.tree.IN: void accumulateStats(berkeley.com.sleepycat.je.tree.TreeWalkerStatsAccumulator)>(treeStatsAccumulator);

     label21:
        $z10 = <berkeley.com.sleepycat.je.latch.LatchSupport: boolean TRACK_LATCHES>;

        if $z10 == 0 goto label22;

        staticinvoke <berkeley.com.sleepycat.je.latch.LatchSupport: void expectBtreeLatchesHeld(int)>(1);

     label22:
        normalExit#38 = 1;

        l17#117 = nextIN#34;

     label23:
        goto label24;

     label24:
        return l17#117;

     label25:
        $z11 = <berkeley.com.sleepycat.je.tree.Tree: boolean $assertionsDisabled>;

        if $z11 != 0 goto label26;

        $z12 = virtualinvoke nextIN#34.<berkeley.com.sleepycat.je.tree.IN: boolean isUpperIN()>();

        if $z12 != 0 goto label26;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label26:
        virtualinvoke nextIN#34.<berkeley.com.sleepycat.je.tree.IN: void latch(berkeley.com.sleepycat.je.CacheMode)>(cacheMode);

        nextINIsLatched#36 = 1;

        virtualinvoke parent#32.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        parent#32 = null;

        nextINIsLatched#36 = 0;

        $r4 = nextIN#34;

        if forward == 0 goto label27;

        $r5 = <berkeley.com.sleepycat.je.tree.Tree$SearchType: berkeley.com.sleepycat.je.tree.Tree$SearchType LEFT>;

        goto label28;

     label27:
        $r5 = <berkeley.com.sleepycat.je.tree.Tree$SearchType: berkeley.com.sleepycat.je.tree.Tree$SearchType RIGHT>;

     label28:
        'ret' = specialinvoke this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.IN searchSubTree(berkeley.com.sleepycat.je.tree.IN,byte[],berkeley.com.sleepycat.je.tree.Tree$SearchType,int,boolean,berkeley.com.sleepycat.je.CacheMode,java.util.Comparator)>($r4, null, $r5, targetLevel, 0, cacheMode, null);

        $z13 = <berkeley.com.sleepycat.je.latch.LatchSupport: boolean TRACK_LATCHES>;

        if $z13 == 0 goto label29;

        staticinvoke <berkeley.com.sleepycat.je.latch.LatchSupport: void expectBtreeLatchesHeld(int)>(1);

     label29:
        $i5 = virtualinvoke 'ret'.<berkeley.com.sleepycat.je.tree.IN: int getLevel()>();

        if $i5 != targetLevel goto label32;

        normalExit#38 = 1;

        l17#153 = 'ret';

     label30:
        goto label31;

     label31:
        return l17#153;

     label32:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("subtree did not have a IN at level ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(targetLevel);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>($r9);

        throw $r10;

     label33:
        curr#28 = parent#32;

        currIsLatched#30 = 1;

        parent#32 = null;

        goto label06;

     label34:
        $r11 := @caughtexception;

        l18 = $r11;

     label35:
        if normalExit#38 != 0 goto label38;

        if curr#28 == null goto label36;

        if currIsLatched#30 == 0 goto label36;

        virtualinvoke curr#28.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label36:
        if parent#32 == null goto label37;

        virtualinvoke parent#32.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label37:
        if nextIN#34 == null goto label38;

        if nextINIsLatched#36 == 0 goto label38;

        virtualinvoke nextIN#34.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label38:
        throw l18;

        catch java.lang.Throwable from label06 to label07 with label34;
        catch java.lang.Throwable from label09 to label23 with label34;
        catch java.lang.Throwable from label25 to label30 with label34;
        catch java.lang.Throwable from label32 to label35 with label34;
    }

    public berkeley.com.sleepycat.je.tree.SearchResult getParentINForChildIN(berkeley.com.sleepycat.je.tree.IN, boolean, boolean, berkeley.com.sleepycat.je.CacheMode) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        berkeley.com.sleepycat.je.tree.IN child;
        boolean useTargetLevel, doFetch;
        berkeley.com.sleepycat.je.CacheMode cacheMode;
        berkeley.com.sleepycat.je.tree.SearchResult $r0;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        child := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        useTargetLevel := @parameter1: boolean;

        doFetch := @parameter2: boolean;

        cacheMode := @parameter3: berkeley.com.sleepycat.je.CacheMode;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.SearchResult getParentINForChildIN(berkeley.com.sleepycat.je.tree.IN,boolean,boolean,berkeley.com.sleepycat.je.CacheMode,java.util.List)>(child, useTargetLevel, doFetch, cacheMode, null);

        return $r0;
    }

    private berkeley.com.sleepycat.je.tree.IN searchSubTree(berkeley.com.sleepycat.je.tree.IN, byte[], berkeley.com.sleepycat.je.tree.Tree$SearchType, int, boolean, berkeley.com.sleepycat.je.CacheMode, java.util.Comparator)
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        byte[] key;
        berkeley.com.sleepycat.je.tree.Tree$SearchType searchType, $r1, $r2, $r7, $r8, $r9;
        int targetLevel, $i0, index#61, $i1, $i2, $i3;
        boolean latchShared, $z0, $z1, $z2, $z3, $z4, $z5, $z6, success#28, childIsLatched#36, grandParentIsLatched#38, $z7, $z8, doGrandparentLatching#42, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17;
        berkeley.com.sleepycat.je.CacheMode cacheMode, $r20;
        java.util.Comparator comparator;
        berkeley.com.sleepycat.je.tree.TreeWalkerStatsAccumulator treeStatsAccumulator;
        berkeley.com.sleepycat.je.tree.IN l17, parent#1, subtreeRoot#30, child#32, grandParent#34;
        java.lang.Exception e, e, $r21, $r25;
        java.lang.Throwable l19, $r24;
        java.lang.AssertionError $r0, $r4, $r5, $r6, $r15, $r17, $r18, $r19;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r3, $r14;
        java.lang.StringBuilder $r10, $r11, $r12;
        java.lang.String $r13;
        berkeley.com.sleepycat.je.tree.Node $r16;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r22, $r26;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r23, $r27;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        parent#1 := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        key := @parameter1: byte[];

        searchType := @parameter2: berkeley.com.sleepycat.je.tree.Tree$SearchType;

        targetLevel := @parameter3: int;

        latchShared := @parameter4: boolean;

        cacheMode := @parameter5: berkeley.com.sleepycat.je.CacheMode;

        comparator := @parameter6: java.util.Comparator;

        $z0 = <berkeley.com.sleepycat.je.tree.Tree: boolean $assertionsDisabled>;

        if $z0 != 0 goto label02;

        if parent#1 == null goto label01;

        $z1 = virtualinvoke parent#1.<berkeley.com.sleepycat.je.tree.IN: boolean isRoot()>();

        if $z1 != 0 goto label02;

        $z2 = virtualinvoke parent#1.<berkeley.com.sleepycat.je.tree.IN: boolean isLatchExclusiveOwner()>();

        if $z2 != 0 goto label02;

     label01:
        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label02:
        $r1 = <berkeley.com.sleepycat.je.tree.Tree$SearchType: berkeley.com.sleepycat.je.tree.Tree$SearchType LEFT>;

        if searchType == $r1 goto label03;

        $r2 = <berkeley.com.sleepycat.je.tree.Tree$SearchType: berkeley.com.sleepycat.je.tree.Tree$SearchType RIGHT>;

        if searchType != $r2 goto label04;

     label03:
        goto label04;

     label04:
        $z3 = <berkeley.com.sleepycat.je.tree.Tree: boolean $assertionsDisabled>;

        if $z3 != 0 goto label05;

        $z4 = virtualinvoke parent#1.<berkeley.com.sleepycat.je.tree.IN: boolean isUpperIN()>();

        if $z4 != 0 goto label05;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label05:
        $z5 = <berkeley.com.sleepycat.je.tree.Tree: boolean $assertionsDisabled>;

        if $z5 != 0 goto label06;

        $z6 = virtualinvoke parent#1.<berkeley.com.sleepycat.je.tree.IN: boolean isLatchOwner()>();

        if $z6 != 0 goto label06;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label06:
        success#28 = 0;

        subtreeRoot#30 = parent#1;

        child#32 = null;

        grandParent#34 = null;

        childIsLatched#36 = 0;

        grandParentIsLatched#38 = 0;

        $z7 = virtualinvoke parent#1.<berkeley.com.sleepycat.je.tree.IN: boolean isLatchExclusiveOwner()>();

        if $z7 != 0 goto label07;

        $z8 = 1;

        goto label08;

     label07:
        $z8 = 0;

     label08:
        doGrandparentLatching#42 = $z8;

        treeStatsAccumulator = specialinvoke this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.TreeWalkerStatsAccumulator getTreeStatsAccumulator()>();

     label09:
        if treeStatsAccumulator == null goto label10;

        virtualinvoke parent#1.<berkeley.com.sleepycat.je.tree.IN: void accumulateStats(berkeley.com.sleepycat.je.tree.TreeWalkerStatsAccumulator)>(treeStatsAccumulator);

     label10:
        $z9 = <berkeley.com.sleepycat.je.tree.Tree: boolean $assertionsDisabled>;

        if $z9 != 0 goto label11;

        $i0 = virtualinvoke parent#1.<berkeley.com.sleepycat.je.tree.IN: int getNEntries()>();

        if $i0 > 0 goto label11;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label11:
        $r7 = <berkeley.com.sleepycat.je.tree.Tree$SearchType: berkeley.com.sleepycat.je.tree.Tree$SearchType NORMAL>;

        if searchType != $r7 goto label12;

        index#61 = virtualinvoke parent#1.<berkeley.com.sleepycat.je.tree.IN: int findEntry(byte[],boolean,boolean,java.util.Comparator)>(null, 0, 0, null);

        goto label15;

     label12:
        $r8 = <berkeley.com.sleepycat.je.tree.Tree$SearchType: berkeley.com.sleepycat.je.tree.Tree$SearchType LEFT>;

        if searchType != $r8 goto label13;

        index#61 = 0;

        goto label15;

     label13:
        $r9 = <berkeley.com.sleepycat.je.tree.Tree$SearchType: berkeley.com.sleepycat.je.tree.Tree$SearchType RIGHT>;

        if searchType != $r9 goto label14;

        $i1 = virtualinvoke parent#1.<berkeley.com.sleepycat.je.tree.IN: int getNEntries()>();

        index#61 = $i1 - 1;

        goto label15;

     label14:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid value of searchType: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(searchType);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>($r13);

        throw $r14;

     label15:
        $z10 = <berkeley.com.sleepycat.je.tree.Tree: boolean $assertionsDisabled>;

        if $z10 != 0 goto label16;

        if index#61 >= 0 goto label16;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label16:
        $r16 = virtualinvoke parent#1.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.Node getTarget(int)>(index#61);

        child#32 = (berkeley.com.sleepycat.je.tree.IN) $r16;

        if child#32 != null goto label22;

        if doGrandparentLatching#42 == 0 goto label22;

        if parent#1 == subtreeRoot#30 goto label18;

        $z11 = <berkeley.com.sleepycat.je.tree.Tree: boolean $assertionsDisabled>;

        if $z11 != 0 goto label17;

        $z12 = virtualinvoke parent#1.<berkeley.com.sleepycat.je.tree.IN: boolean isLatchExclusiveOwner()>();

        if $z12 == 0 goto label17;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();

        throw $r17;

     label17:
        virtualinvoke parent#1.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        virtualinvoke parent#1.<berkeley.com.sleepycat.je.tree.IN: void latch(berkeley.com.sleepycat.je.CacheMode)>(cacheMode);

        virtualinvoke grandParent#34.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        grandParentIsLatched#38 = 0;

        grandParent#34 = null;

        doGrandparentLatching#42 = 0;

        goto label21;

     label18:
        $z13 = virtualinvoke parent#1.<berkeley.com.sleepycat.je.tree.IN: boolean isRoot()>();

        if $z13 == 0 goto label21;

        $z14 = virtualinvoke parent#1.<berkeley.com.sleepycat.je.tree.IN: boolean isLatchExclusiveOwner()>();

        if $z14 != 0 goto label21;

        virtualinvoke parent#1.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        subtreeRoot#30 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.IN getRootINLatchedExclusive(berkeley.com.sleepycat.je.CacheMode)>(cacheMode);

        parent#1 = subtreeRoot#30;

        $z15 = <berkeley.com.sleepycat.je.tree.Tree: boolean $assertionsDisabled>;

        if $z15 != 0 goto label19;

        if parent#1 != null goto label19;

        $r18 = new java.lang.AssertionError;

        specialinvoke $r18.<java.lang.AssertionError: void <init>()>();

        throw $r18;

     label19:
        $z16 = <berkeley.com.sleepycat.je.tree.Tree: boolean $assertionsDisabled>;

        if $z16 != 0 goto label20;

        if grandParent#34 == null goto label20;

        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();

        throw $r19;

     label20:
        doGrandparentLatching#42 = 0;

        goto label32;

     label21:
        child#32 = virtualinvoke parent#1.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN fetchIN(int,berkeley.com.sleepycat.je.CacheMode)>(index#61, cacheMode);

        goto label23;

     label22:
        if child#32 != null goto label23;

        $r20 = <berkeley.com.sleepycat.je.CacheMode: berkeley.com.sleepycat.je.CacheMode UNCHANGED>;

        child#32 = virtualinvoke parent#1.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.IN fetchIN(int,berkeley.com.sleepycat.je.CacheMode)>(index#61, $r20);

     label23:
        if grandParent#34 == null goto label24;

        virtualinvoke grandParent#34.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        grandParentIsLatched#38 = 0;

     label24:
        $i2 = virtualinvoke child#32.<berkeley.com.sleepycat.je.tree.IN: int getLevel()>();

        if $i2 != targetLevel goto label26;

        goto label25;

     label25:
        virtualinvoke child#32.<berkeley.com.sleepycat.je.tree.IN: void latch(berkeley.com.sleepycat.je.CacheMode)>(cacheMode);

        goto label28;

     label26:
        if doGrandparentLatching#42 == 0 goto label27;

        goto label28;

     label27:
        staticinvoke <berkeley.com.sleepycat.je.tree.Tree: void latchChild(berkeley.com.sleepycat.je.tree.IN,berkeley.com.sleepycat.je.tree.IN,berkeley.com.sleepycat.je.CacheMode)>(parent#1, child#32, cacheMode);

     label28:
        childIsLatched#36 = 1;

        virtualinvoke child#32.<berkeley.com.sleepycat.je.tree.IN: void mutateToFullBIN(boolean)>(0);

        if treeStatsAccumulator == null goto label29;

        virtualinvoke child#32.<berkeley.com.sleepycat.je.tree.IN: void accumulateStats(berkeley.com.sleepycat.je.tree.TreeWalkerStatsAccumulator)>(treeStatsAccumulator);

     label29:
        if doGrandparentLatching#42 == 0 goto label30;

        grandParent#34 = parent#1;

        grandParentIsLatched#38 = 1;

        goto label31;

     label30:
        virtualinvoke parent#1.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label31:
        parent#1 = child#32;

     label32:
        $z17 = virtualinvoke parent#1.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z17 != 0 goto label33;

        $i3 = virtualinvoke parent#1.<berkeley.com.sleepycat.je.tree.IN: int getLevel()>();

        if $i3 != targetLevel goto label09;

     label33:
        success#28 = 1;

        l17 = child#32;

     label34:
        goto label35;

     label35:
        if grandParent#34 == null goto label36;

        if grandParentIsLatched#38 == 0 goto label36;

        virtualinvoke grandParent#34.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label36:
        return l17;

     label37:
        $r24 := @caughtexception;

     label38:
        l19 = $r24;

     label39:
        if success#28 != 0 goto label44;

     label40:
        if child#32 == null goto label41;

        if childIsLatched#36 == 0 goto label41;

        virtualinvoke child#32.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label41:
        if parent#1 == child#32 goto label42;

        virtualinvoke parent#1.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label42:
        goto label44;

     label43:
        $r25 := @caughtexception;

        e = $r25;

        $r26 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.dbi.DatabaseImpl database>;

        $r27 = virtualinvoke $r26.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: void traceAndLogException(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r27, "Tree", "searchSubTreeInternal", "", e);

     label44:
        if grandParent#34 == null goto label45;

        if grandParentIsLatched#38 == 0 goto label45;

        virtualinvoke grandParent#34.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label45:
        throw l19;

        catch java.lang.Throwable from label09 to label34 with label37;
        catch java.lang.Exception from label40 to label42 with label43;
        catch java.lang.Throwable from label38 to label39 with label37;
    }

    public berkeley.com.sleepycat.je.tree.SearchResult getParentINForChildIN(berkeley.com.sleepycat.je.tree.IN, boolean, boolean, berkeley.com.sleepycat.je.CacheMode, java.util.List) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        berkeley.com.sleepycat.je.tree.IN child;
        boolean useTargetLevel, doFetch, requireExactMatch, $z0, $z1;
        berkeley.com.sleepycat.je.CacheMode cacheMode;
        java.util.List trackingList;
        long targetId;
        byte[] targetKey;
        int targetLevel, exclusiveLevel, $i0, $i1;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r0;
        java.lang.AssertionError $r1;
        berkeley.com.sleepycat.je.tree.SearchResult $r2;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        child := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        useTargetLevel := @parameter1: boolean;

        doFetch := @parameter2: boolean;

        cacheMode := @parameter3: berkeley.com.sleepycat.je.CacheMode;

        trackingList := @parameter4: java.util.List;

        if child != null goto label1;

        $r0 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>("getParentINForChildIN given null child node");

        throw $r0;

     label1:
        $z0 = <berkeley.com.sleepycat.je.tree.Tree: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke child.<berkeley.com.sleepycat.je.tree.IN: boolean isLatchOwner()>();

        if $z1 != 0 goto label2;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label2:
        targetId = virtualinvoke child.<berkeley.com.sleepycat.je.tree.IN: long getNodeId()>();

        targetKey = virtualinvoke child.<berkeley.com.sleepycat.je.tree.IN: byte[] getIdentifierKey()>();

        if useTargetLevel == 0 goto label3;

        $i0 = virtualinvoke child.<berkeley.com.sleepycat.je.tree.IN: int getLevel()>();

        goto label4;

     label3:
        $i0 = -1;

     label4:
        targetLevel = $i0;

        $i1 = virtualinvoke child.<berkeley.com.sleepycat.je.tree.IN: int getLevel()>();

        exclusiveLevel = $i1 + 1;

        virtualinvoke child.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        $r2 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.SearchResult getParentINForChildIN(long,byte[],int,int,boolean,boolean,berkeley.com.sleepycat.je.CacheMode,java.util.List)>(targetId, targetKey, targetLevel, exclusiveLevel, 1, doFetch, cacheMode, null);

        return $r2;
    }

    public berkeley.com.sleepycat.je.tree.BIN getLastNode(berkeley.com.sleepycat.je.CacheMode) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        berkeley.com.sleepycat.je.CacheMode cacheMode;
        berkeley.com.sleepycat.je.tree.Tree$SearchType $r0;
        berkeley.com.sleepycat.je.tree.BIN bin;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        cacheMode := @parameter0: berkeley.com.sleepycat.je.CacheMode;

        $r0 = <berkeley.com.sleepycat.je.tree.Tree$SearchType: berkeley.com.sleepycat.je.tree.Tree$SearchType RIGHT>;

        bin = virtualinvoke this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.BIN search(byte[],berkeley.com.sleepycat.je.tree.Tree$SearchType,berkeley.com.sleepycat.je.tree.BINBoundary,berkeley.com.sleepycat.je.CacheMode,java.util.Comparator)>(null, $r0, null, cacheMode, null);

        if bin == null goto label1;

        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void mutateToFullBIN(boolean)>(0);

     label1:
        return bin;
    }

    public berkeley.com.sleepycat.je.tree.BIN getFirstNode(berkeley.com.sleepycat.je.CacheMode) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        berkeley.com.sleepycat.je.CacheMode cacheMode;
        berkeley.com.sleepycat.je.tree.Tree$SearchType $r0;
        berkeley.com.sleepycat.je.tree.BIN bin;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        cacheMode := @parameter0: berkeley.com.sleepycat.je.CacheMode;

        $r0 = <berkeley.com.sleepycat.je.tree.Tree$SearchType: berkeley.com.sleepycat.je.tree.Tree$SearchType LEFT>;

        bin = virtualinvoke this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.BIN search(byte[],berkeley.com.sleepycat.je.tree.Tree$SearchType,berkeley.com.sleepycat.je.tree.BINBoundary,berkeley.com.sleepycat.je.CacheMode,java.util.Comparator)>(null, $r0, null, cacheMode, null);

        if bin == null goto label1;

        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void mutateToFullBIN(boolean)>(0);

     label1:
        return bin;
    }

    public void writeToLog(java.nio.ByteBuffer)
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        java.nio.ByteBuffer logBuffer;
        byte booleans;
        berkeley.com.sleepycat.je.tree.ChildReference $r0, $r2, $r3;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        logBuffer := @parameter0: java.nio.ByteBuffer;

        $r0 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.ChildReference root>;

        if $r0 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        booleans = (byte) $z0;

        virtualinvoke logBuffer.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(booleans);

        $r2 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.ChildReference root>;

        if $r2 == null goto label3;

        $r3 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.ChildReference root>;

        virtualinvoke $r3.<berkeley.com.sleepycat.je.tree.ChildReference: void writeToLog(java.nio.ByteBuffer)>(logBuffer);

     label3:
        return;
    }

    public int getLogSize()
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        int size#2, $i0;
        berkeley.com.sleepycat.je.tree.ChildReference $r0, $r1;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        size#2 = 1;

        $r0 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.ChildReference root>;

        if $r0 == null goto label1;

        $r1 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.ChildReference root>;

        $i0 = virtualinvoke $r1.<berkeley.com.sleepycat.je.tree.ChildReference: int getLogSize()>();

        size#2 = 1 + $i0;

     label1:
        return size#2;
    }

    public long getRootLsn()
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        berkeley.com.sleepycat.je.tree.ChildReference $r0, $r1;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        $r0 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.ChildReference root>;

        if $r0 != null goto label1;

        return -1L;

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.ChildReference root>;

        $l0 = virtualinvoke $r1.<berkeley.com.sleepycat.je.tree.ChildReference: long getLsn()>();

        return $l0;
    }

    public void rebuildINList() throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        berkeley.com.sleepycat.je.dbi.INList inMemoryList;
        berkeley.com.sleepycat.je.tree.Node rootIN;
        java.lang.Throwable l3, $r6;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r0;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r1;
        berkeley.com.sleepycat.je.tree.ChildReference $r2, $r4;
        berkeley.com.sleepycat.je.latch.SharedLatch $r3, $r5, $r7;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        $r0 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.dbi.DatabaseImpl database>;

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        inMemoryList = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.INList getInMemoryINs()>();

        $r2 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.ChildReference root>;

        if $r2 == null goto label4;

        $r3 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch>;

        interfaceinvoke $r3.<berkeley.com.sleepycat.je.latch.SharedLatch: void acquireShared()>();

     label1:
        $r4 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.ChildReference root>;

        rootIN = virtualinvoke $r4.<berkeley.com.sleepycat.je.tree.ChildReference: berkeley.com.sleepycat.je.tree.Node getTarget()>();

        if rootIN == null goto label2;

        virtualinvoke rootIN.<berkeley.com.sleepycat.je.tree.Node: void rebuildINList(berkeley.com.sleepycat.je.dbi.INList)>(inMemoryList);

     label2:
        $r5 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch>;

        interfaceinvoke $r5.<berkeley.com.sleepycat.je.latch.SharedLatch: void release()>();

        goto label4;

     label3:
        $r6 := @caughtexception;

        l3 = $r6;

        $r7 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch>;

        interfaceinvoke $r7.<berkeley.com.sleepycat.je.latch.SharedLatch: void release()>();

        throw l3;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public berkeley.com.sleepycat.je.tree.IN getResidentRootIN(boolean) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        boolean latched, $z0;
        berkeley.com.sleepycat.je.CacheMode $r0;
        berkeley.com.sleepycat.je.tree.IN rootIN#2;
        berkeley.com.sleepycat.je.tree.ChildReference $r1;
        berkeley.com.sleepycat.je.tree.Node $r2;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        latched := @parameter0: boolean;

        rootIN#2 = null;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.Tree: boolean rootExists()>();

        if $z0 == 0 goto label1;

        $r1 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.ChildReference root>;

        $r2 = virtualinvoke $r1.<berkeley.com.sleepycat.je.tree.ChildReference: berkeley.com.sleepycat.je.tree.Node getTarget()>();

        rootIN#2 = (berkeley.com.sleepycat.je.tree.IN) $r2;

        if rootIN#2 == null goto label1;

        if latched == 0 goto label1;

        $r0 = <berkeley.com.sleepycat.je.CacheMode: berkeley.com.sleepycat.je.CacheMode UNCHANGED>;

        virtualinvoke rootIN#2.<berkeley.com.sleepycat.je.tree.IN: void latchShared(berkeley.com.sleepycat.je.CacheMode)>($r0);

     label1:
        return rootIN#2;
    }

    public berkeley.com.sleepycat.je.tree.IN withRootLatchedShared(berkeley.com.sleepycat.je.tree.WithRootLatched) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        berkeley.com.sleepycat.je.tree.WithRootLatched wrl;
        berkeley.com.sleepycat.je.tree.IN l2;
        java.lang.Throwable l3, $r3;
        berkeley.com.sleepycat.je.latch.SharedLatch $r0, $r2, $r4;
        berkeley.com.sleepycat.je.tree.ChildReference $r1;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        wrl := @parameter0: berkeley.com.sleepycat.je.tree.WithRootLatched;

     label1:
        $r0 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch>;

        interfaceinvoke $r0.<berkeley.com.sleepycat.je.latch.SharedLatch: void acquireShared()>();

        $r1 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.ChildReference root>;

        l2 = interfaceinvoke wrl.<berkeley.com.sleepycat.je.tree.WithRootLatched: berkeley.com.sleepycat.je.tree.IN doWork(berkeley.com.sleepycat.je.tree.ChildReference)>($r1);

     label2:
        $r2 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch>;

        interfaceinvoke $r2.<berkeley.com.sleepycat.je.latch.SharedLatch: void release()>();

        return l2;

     label3:
        $r3 := @caughtexception;

        l3 = $r3;

        $r4 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch>;

        interfaceinvoke $r4.<berkeley.com.sleepycat.je.latch.SharedLatch: void release()>();

        throw l3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    static berkeley.com.sleepycat.je.tree.ChildReference access$100(berkeley.com.sleepycat.je.tree.Tree)
    {
        berkeley.com.sleepycat.je.tree.Tree x0;
        berkeley.com.sleepycat.je.tree.ChildReference $r0;

        x0 := @parameter0: berkeley.com.sleepycat.je.tree.Tree;

        $r0 = x0.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.ChildReference root>;

        return $r0;
    }

    static berkeley.com.sleepycat.je.latch.SharedLatch access$000(berkeley.com.sleepycat.je.tree.Tree)
    {
        berkeley.com.sleepycat.je.tree.Tree x0;
        berkeley.com.sleepycat.je.latch.SharedLatch $r0;

        x0 := @parameter0: berkeley.com.sleepycat.je.tree.Tree;

        $r0 = x0.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch>;

        return $r0;
    }

    public void setRoot(berkeley.com.sleepycat.je.tree.ChildReference, boolean)
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        berkeley.com.sleepycat.je.tree.ChildReference newRoot;
        boolean notLatched, $z0, $z1;
        berkeley.com.sleepycat.je.latch.SharedLatch $r0;
        java.lang.AssertionError $r1;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        newRoot := @parameter0: berkeley.com.sleepycat.je.tree.ChildReference;

        notLatched := @parameter1: boolean;

        $z0 = <berkeley.com.sleepycat.je.tree.Tree: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if notLatched != 0 goto label1;

        $r0 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch>;

        $z1 = interfaceinvoke $r0.<berkeley.com.sleepycat.je.latch.SharedLatch: boolean isExclusiveOwner()>();

        if $z1 != 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.ChildReference root> = newRoot;

        return;
    }

    public void releaseRootLatch() throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        berkeley.com.sleepycat.je.latch.SharedLatch $r0;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        $r0 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch>;

        interfaceinvoke $r0.<berkeley.com.sleepycat.je.latch.SharedLatch: void release()>();

        return;
    }

    public void latchRootLatchExclusive() throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        berkeley.com.sleepycat.je.latch.SharedLatch $r0;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        $r0 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.latch.SharedLatch rootLatch>;

        interfaceinvoke $r0.<berkeley.com.sleepycat.je.latch.SharedLatch: void acquireExclusive()>();

        return;
    }

    static berkeley.com.sleepycat.je.dbi.DatabaseImpl access$200(berkeley.com.sleepycat.je.tree.Tree)
    {
        berkeley.com.sleepycat.je.tree.Tree x0;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r0;

        x0 := @parameter0: berkeley.com.sleepycat.je.tree.Tree;

        $r0 = x0.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.dbi.DatabaseImpl database>;

        return $r0;
    }

    public boolean isRootResident()
    {
        berkeley.com.sleepycat.je.tree.Tree this;
        berkeley.com.sleepycat.je.tree.ChildReference $r0, $r1;
        berkeley.com.sleepycat.je.tree.Node $r2;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.tree.Tree;

        $r0 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.ChildReference root>;

        if $r0 == null goto label1;

        $r1 = this.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.ChildReference root>;

        $r2 = virtualinvoke $r1.<berkeley.com.sleepycat.je.tree.ChildReference: berkeley.com.sleepycat.je.tree.Node getTarget()>();

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }


