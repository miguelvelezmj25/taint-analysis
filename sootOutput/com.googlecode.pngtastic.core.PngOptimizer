    public void <init>(java.lang.String)
    {
        com.googlecode.pngtastic.core.PngOptimizer this;
        java.lang.String logLevel;
        java.util.ArrayList $r0;

        this := @this: com.googlecode.pngtastic.core.PngOptimizer;

        logLevel := @parameter0: java.lang.String;

        specialinvoke this.<com.googlecode.pngtastic.core.PngProcessor: void <init>(java.lang.String)>(logLevel);

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        this.<com.googlecode.pngtastic.core.PngOptimizer: java.util.List results> = $r0;

        this.<com.googlecode.pngtastic.core.PngOptimizer: boolean generateDataUriCss> = 0;

        return;
    }

    public void setCompressor(java.lang.String, java.lang.Integer)
    {
        com.googlecode.pngtastic.core.PngOptimizer this;
        java.lang.String compressor, $r0;
        java.lang.Integer iterations;
        boolean $z0, $z1, $z2, $z3;
        com.googlecode.pngtastic.core.processing.ZopfliCompressionHandler $r1, $r3;
        com.googlecode.pngtastic.core.Logger $r2, $r4;
        int $i0;

        this := @this: com.googlecode.pngtastic.core.PngOptimizer;

        compressor := @parameter0: java.lang.String;

        iterations := @parameter1: java.lang.Integer;

        $r0 = "zopfli";

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>(compressor);

        $z1 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision1(boolean)>($z0);

        if $z1 == 0 goto label4;

        if iterations == null goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        $z2 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision1(boolean)>($z3);

        if $z2 == 0 goto label3;

        $r3 = new com.googlecode.pngtastic.core.processing.ZopfliCompressionHandler;

        $r4 = this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.Logger log>;

        $i0 = virtualinvoke iterations.<java.lang.Integer: int intValue()>();

        specialinvoke $r3.<com.googlecode.pngtastic.core.processing.ZopfliCompressionHandler: void <init>(com.googlecode.pngtastic.core.Logger,int)>($r4, $i0);

        this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.processing.PngCompressionHandler pngCompressionHandler> = $r3;

        goto label4;

     label3:
        $r1 = new com.googlecode.pngtastic.core.processing.ZopfliCompressionHandler;

        $r2 = this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.Logger log>;

        specialinvoke $r1.<com.googlecode.pngtastic.core.processing.ZopfliCompressionHandler: void <init>(com.googlecode.pngtastic.core.Logger)>($r2);

        this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.processing.PngCompressionHandler pngCompressionHandler> = $r1;

     label4:
        return;
    }

    public void optimize(com.googlecode.pngtastic.core.PngImage, java.lang.String, boolean, java.lang.Integer) throws java.io.IOException
    {
        com.googlecode.pngtastic.core.PngOptimizer this;
        com.googlecode.pngtastic.core.PngImage image, optimized;
        java.lang.String outputFileName, $r5;
        boolean removeGamma;
        java.lang.Integer compressionLevel;
        java.io.ByteArrayOutputStream optimizedBytes, $r2;
        long optimizedSize, originalFileSize;
        java.io.File originalFile, $r4;
        byte[] optimalBytes, $r6;
        java.lang.Object[] $r0;
        com.googlecode.pngtastic.core.Logger $r1;
        java.io.DataOutputStream $r3;
        int $i0;
        byte $b1;

        this := @this: com.googlecode.pngtastic.core.PngOptimizer;

        image := @parameter0: com.googlecode.pngtastic.core.PngImage;

        outputFileName := @parameter1: java.lang.String;

        removeGamma := @parameter2: boolean;

        compressionLevel := @parameter3: java.lang.Integer;

        $r1 = this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.Logger log>;

        $r0 = newarray (java.lang.Object)[0];

        virtualinvoke $r1.<com.googlecode.pngtastic.core.Logger: void debug(java.lang.String,java.lang.Object[])>("=== OPTIMIZING ===", $r0);

        staticinvoke <java.lang.System: long currentTimeMillis()>();

        optimized = virtualinvoke this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.PngImage optimize(com.googlecode.pngtastic.core.PngImage,boolean,java.lang.Integer)>(image, removeGamma, compressionLevel);

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>();

        optimizedBytes = $r2;

        $r3 = virtualinvoke optimized.<com.googlecode.pngtastic.core.PngImage: java.io.DataOutputStream writeDataOutputStream(java.io.OutputStream)>(optimizedBytes);

        $i0 = virtualinvoke $r3.<java.io.DataOutputStream: int size()>();

        optimizedSize = (long) $i0;

        $r4 = new java.io.File;

        $r5 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: java.lang.String getFileName()>();

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>($r5);

        originalFile = $r4;

        originalFileSize = virtualinvoke originalFile.<java.io.File: long length()>();

        $b1 = optimizedSize cmp originalFileSize;

        if $b1 >= 0 goto label1;

        $r6 = virtualinvoke optimizedBytes.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        goto label2;

     label1:
        $r6 = specialinvoke this.<com.googlecode.pngtastic.core.PngOptimizer: byte[] getFileBytes(java.io.File,long)>(originalFile, originalFileSize);

     label2:
        optimalBytes = $r6;

        virtualinvoke optimized.<com.googlecode.pngtastic.core.PngImage: java.io.File export(java.lang.String,byte[])>(outputFileName, optimalBytes);

        return;
    }

    public java.util.List getResults()
    {
        com.googlecode.pngtastic.core.PngOptimizer this;
        java.util.List $r0;

        this := @this: com.googlecode.pngtastic.core.PngOptimizer;

        $r0 = this.<com.googlecode.pngtastic.core.PngOptimizer: java.util.List results>;

        return $r0;
    }

    public long getTotalSavings()
    {
        com.googlecode.pngtastic.core.PngOptimizer this;
        java.util.Iterator l3;
        com.googlecode.pngtastic.core.PngOptimizer$OptimizerResult result;
        java.util.List $r0;
        boolean $z0;
        java.lang.Object $r1;
        long $l0, $l1, $l2, totalSavings#1;

        this := @this: com.googlecode.pngtastic.core.PngOptimizer;

        totalSavings#1 = 0L;

        $r0 = this.<com.googlecode.pngtastic.core.PngOptimizer: java.util.List results>;

        l3 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r1 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        result = (com.googlecode.pngtastic.core.PngOptimizer$OptimizerResult) $r1;

        $l0 = virtualinvoke result.<com.googlecode.pngtastic.core.PngOptimizer$OptimizerResult: long getOriginalFileSize()>();

        $l1 = virtualinvoke result.<com.googlecode.pngtastic.core.PngOptimizer$OptimizerResult: long getOptimizedFileSize()>();

        $l2 = $l0 - $l1;

        totalSavings#1 = totalSavings#1 + $l2;

        goto label1;

     label2:
        return totalSavings#1;
    }

    public com.googlecode.pngtastic.core.PngImage optimize(com.googlecode.pngtastic.core.PngImage, boolean, java.lang.Integer) throws java.io.IOException
    {
        com.googlecode.pngtastic.core.PngOptimizer this;
        com.googlecode.pngtastic.core.PngImage image, result, $r0;
        boolean removeGamma, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        java.lang.Integer compressionLevel, $r11, $r12, $r13;
        java.util.Iterator itChunks, scanlines#17;
        com.googlecode.pngtastic.core.processing.PngByteArrayOutputStream inflatedImageData, $r38;
        int scanlineLength, $i2, $i5, $i7, $i9, $i10, $i11, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i22, $i24, $i25, $i26, deflatedImageData#7, scanlines#8, $i27;
        java.util.List originalScanlines, $r2, $r37, $r45, scanlines#14, scanlines#21, bytes#34;
        java.util.HashMap filteredScanlines, $r3;
        java.io.DataOutputStream data, $r27;
        com.googlecode.pngtastic.core.PngChunk newChunk, $r14, $r17, $r23, $r29, chunk#4, scanlines#26, $r46;
        short $s0, $s6;
        com.googlecode.pngtastic.core.Logger $r1, $r8, $r41;
        long $l1, $l3, $l4, $l8, $l21, $l23;
        float $f0, $f1;
        double $d0, $d1;
        java.util.Set $r4;
        com.googlecode.pngtastic.core.processing.PngFilterHandler $r5, $r42;
        com.googlecode.pngtastic.core.processing.PngCompressionHandler $r6, $r35;
        java.lang.Object[] $r7, $r40;
        byte[] $r10, $r16, $r19, $r20, $r28, $r30, $r31, deflatedImageData#16, scanlines#19, filterType#22;
        java.lang.String $r15, $r18, $r21, $r24, $r32, $r33;
        java.lang.Object $r22, $r25, $r34, $r36, $r39;
        java.io.ByteArrayOutputStream $r26, bytes#32;
        com.googlecode.pngtastic.core.processing.PngInterlaceHandler $r44;
        com.googlecode.pngtastic.core.PngFilterType[] bestFilterType#6;
        com.googlecode.pngtastic.core.PngFilterType filterType#13, bestFilterType#15, bestFilterType#25;
        java.util.Map$Entry filterType#18;

        this := @this: com.googlecode.pngtastic.core.PngOptimizer;

        image := @parameter0: com.googlecode.pngtastic.core.PngImage;

        removeGamma := @parameter1: boolean;

        compressionLevel := @parameter2: java.lang.Integer;

        $s0 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: short getInterlace()>();

        if $s0 != 1 goto label01;

        $i26 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: int getSampleBitCount()>();

        if $i26 >= 8 goto label01;

        $z7 = 1;

        goto label02;

     label01:
        $z7 = 0;

     label02:
        $z8 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision1(boolean)>($z7);

        if $z8 == 0 goto label03;

        return image;

     label03:
        $r0 = new com.googlecode.pngtastic.core.PngImage;

        $r1 = this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.Logger log>;

        specialinvoke $r0.<com.googlecode.pngtastic.core.PngImage: void <init>(com.googlecode.pngtastic.core.Logger)>($r1);

        result = $r0;

        virtualinvoke result.<com.googlecode.pngtastic.core.PngImage: void setInterlace(short)>(0);

        $r2 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: java.util.List getChunks()>();

        itChunks = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        chunk#4 = virtualinvoke this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.PngChunk processHeadChunks(com.googlecode.pngtastic.core.PngImage,boolean,java.util.Iterator)>(result, removeGamma, itChunks);

        inflatedImageData = virtualinvoke this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.processing.PngByteArrayOutputStream getInflatedImageData(com.googlecode.pngtastic.core.PngChunk,java.util.Iterator)>(chunk#4, itChunks);

        $l1 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: long getWidth()>();

        $i2 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: int getSampleBitCount()>();

        $l3 = (long) $i2;

        $l4 = $l1 * $l3;

        $f0 = (float) $l4;

        $f1 = $f0 / 8.0F;

        $d0 = (double) $f1;

        $d1 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $i5 = (int) $d1;

        scanlineLength = $i5 + 1;

        $s6 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: short getInterlace()>();

        if $s6 != 1 goto label04;

        $r44 = this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.processing.PngInterlaceHandler pngInterlaceHandler>;

        $l21 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: long getWidth()>();

        $i22 = (int) $l21;

        $l23 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: long getHeight()>();

        $i24 = (int) $l23;

        $i25 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: int getSampleBitCount()>();

        $r45 = interfaceinvoke $r44.<com.googlecode.pngtastic.core.processing.PngInterlaceHandler: java.util.List deInterlace(int,int,int,com.googlecode.pngtastic.core.processing.PngByteArrayOutputStream)>($i22, $i24, $i25, inflatedImageData);

        goto label05;

     label04:
        $i7 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: int getSampleBitCount()>();

        $l8 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: long getHeight()>();

        $r45 = virtualinvoke this.<com.googlecode.pngtastic.core.PngOptimizer: java.util.List getScanlines(com.googlecode.pngtastic.core.processing.PngByteArrayOutputStream,int,int,long)>(inflatedImageData, $i7, scanlineLength, $l8);

     label05:
        originalScanlines = $r45;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        filteredScanlines = $r3;

        bestFilterType#6 = staticinvoke <com.googlecode.pngtastic.core.PngFilterType: com.googlecode.pngtastic.core.PngFilterType[] standardValues()>();

        deflatedImageData#7 = lengthof bestFilterType#6;

        scanlines#8 = 0;

     label06:
        if scanlines#8 >= deflatedImageData#7 goto label07;

        filterType#13 = bestFilterType#6[scanlines#8];

        $r41 = this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.Logger log>;

        $r40 = newarray (java.lang.Object)[1];

        $r40[0] = filterType#13;

        virtualinvoke $r41.<com.googlecode.pngtastic.core.Logger: void debug(java.lang.String,java.lang.Object[])>("Applying filter: %s", $r40);

        scanlines#14 = specialinvoke this.<com.googlecode.pngtastic.core.PngOptimizer: java.util.List copyScanlines(java.util.List)>(originalScanlines);

        $r42 = this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.processing.PngFilterHandler pngFilterHandler>;

        $i20 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: int getSampleBitCount()>();

        interfaceinvoke $r42.<com.googlecode.pngtastic.core.processing.PngFilterHandler: void applyFiltering(com.googlecode.pngtastic.core.PngFilterType,java.util.List,int)>(filterType#13, scanlines#14, $i20);

        interfaceinvoke filteredScanlines.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(filterType#13, scanlines#14);

        scanlines#8 = scanlines#8 + 1;

        goto label06;

     label07:
        bestFilterType#15 = null;

        deflatedImageData#16 = null;

        $r4 = interfaceinvoke filteredScanlines.<java.util.Map: java.util.Set entrySet()>();

        scanlines#17 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label08:
        $z0 = interfaceinvoke scanlines#17.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r34 = interfaceinvoke scanlines#17.<java.util.Iterator: java.lang.Object next()>();

        filterType#18 = (java.util.Map$Entry) $r34;

        $r35 = this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.processing.PngCompressionHandler pngCompressionHandler>;

        $r36 = interfaceinvoke filterType#18.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r37 = (java.util.List) $r36;

        $r38 = specialinvoke this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.processing.PngByteArrayOutputStream serialize(java.util.List)>($r37);

        scanlines#19 = interfaceinvoke $r35.<com.googlecode.pngtastic.core.processing.PngCompressionHandler: byte[] deflate(com.googlecode.pngtastic.core.processing.PngByteArrayOutputStream,java.lang.Integer,boolean)>($r38, compressionLevel, 1);

        if deflatedImageData#16 == null goto label09;

        $i19 = lengthof scanlines#19;

        $i18 = lengthof deflatedImageData#16;

        if $i19 >= $i18 goto label10;

     label09:
        $z9 = 1;

        goto label11;

     label10:
        $z9 = 0;

     label11:
        $z6 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision1(boolean)>($z9);

        if $z6 == 0 goto label12;

        deflatedImageData#16 = scanlines#19;

        $r39 = interfaceinvoke filterType#18.<java.util.Map$Entry: java.lang.Object getKey()>();

        bestFilterType#15 = (com.googlecode.pngtastic.core.PngFilterType) $r39;

     label12:
        goto label08;

     label13:
        scanlines#21 = specialinvoke this.<com.googlecode.pngtastic.core.PngOptimizer: java.util.List copyScanlines(java.util.List)>(originalScanlines);

        $r5 = this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.processing.PngFilterHandler pngFilterHandler>;

        $i9 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: int getSampleBitCount()>();

        interfaceinvoke $r5.<com.googlecode.pngtastic.core.processing.PngFilterHandler: void applyAdaptiveFiltering(com.googlecode.pngtastic.core.processing.PngByteArrayOutputStream,java.util.List,java.util.Map,int)>(inflatedImageData, scanlines#21, filteredScanlines, $i9);

        $r6 = this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.processing.PngCompressionHandler pngCompressionHandler>;

        filterType#22 = interfaceinvoke $r6.<com.googlecode.pngtastic.core.processing.PngCompressionHandler: byte[] deflate(com.googlecode.pngtastic.core.processing.PngByteArrayOutputStream,java.lang.Integer,boolean)>(inflatedImageData, compressionLevel, 1);

        $r8 = this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.Logger log>;

        $r7 = newarray (java.lang.Object)[4];

        $r10 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: byte[] getImageData()>();

        $i10 = lengthof $r10;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        $r7[0] = $r11;

        $i11 = lengthof filterType#22;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11);

        $r7[1] = $r12;

        $r7[2] = bestFilterType#15;

        if deflatedImageData#16 != null goto label14;

        $i27 = 0;

        goto label15;

     label14:
        $i27 = lengthof deflatedImageData#16;

     label15:
        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i27);

        $r7[3] = $r13;

        virtualinvoke $r8.<com.googlecode.pngtastic.core.Logger: void debug(java.lang.String,java.lang.Object[])>("Original=%d, Adaptive=%d, %s=%d", $r7);

        if deflatedImageData#16 == null goto label16;

        $i17 = lengthof filterType#22;

        $i16 = lengthof deflatedImageData#16;

        if $i17 >= $i16 goto label17;

     label16:
        $z10 = 1;

        goto label18;

     label17:
        $z10 = 0;

     label18:
        $z1 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision1(boolean)>($z10);

        if $z1 == 0 goto label19;

        deflatedImageData#16 = filterType#22;

        bestFilterType#25 = <com.googlecode.pngtastic.core.PngFilterType: com.googlecode.pngtastic.core.PngFilterType ADAPTIVE>;

     label19:
        $r14 = new com.googlecode.pngtastic.core.PngChunk;

        $r15 = "IDAT";

        $r16 = virtualinvoke $r15.<java.lang.String: byte[] getBytes()>();

        specialinvoke $r14.<com.googlecode.pngtastic.core.PngChunk: void <init>(byte[],byte[])>($r16, deflatedImageData#16);

        scanlines#26 = $r14;

        virtualinvoke result.<com.googlecode.pngtastic.core.PngImage: void addChunk(com.googlecode.pngtastic.core.PngChunk)>(scanlines#26);

     label20:
        if chunk#4 == null goto label26;

        $z3 = virtualinvoke chunk#4.<com.googlecode.pngtastic.core.PngChunk: boolean isCritical()>();

        if $z3 == 0 goto label21;

        $r32 = "IDAT";

        $r33 = virtualinvoke chunk#4.<com.googlecode.pngtastic.core.PngChunk: java.lang.String getTypeString()>();

        $z5 = virtualinvoke $r32.<java.lang.String: boolean equals(java.lang.Object)>($r33);

        if $z5 != 0 goto label21;

        $z11 = 1;

        goto label22;

     label21:
        $z11 = 0;

     label22:
        $z12 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision1(boolean)>($z11);

        if $z12 == 0 goto label23;

        $r26 = new java.io.ByteArrayOutputStream;

        $i15 = virtualinvoke chunk#4.<com.googlecode.pngtastic.core.PngChunk: int getLength()>();

        specialinvoke $r26.<java.io.ByteArrayOutputStream: void <init>(int)>($i15);

        bytes#32 = $r26;

        $r27 = new java.io.DataOutputStream;

        specialinvoke $r27.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(bytes#32);

        data = $r27;

        $r28 = virtualinvoke chunk#4.<com.googlecode.pngtastic.core.PngChunk: byte[] getData()>();

        virtualinvoke data.<java.io.DataOutputStream: void write(byte[])>($r28);

        virtualinvoke data.<java.io.DataOutputStream: void close()>();

        $r29 = new com.googlecode.pngtastic.core.PngChunk;

        $r30 = virtualinvoke chunk#4.<com.googlecode.pngtastic.core.PngChunk: byte[] getType()>();

        $r31 = virtualinvoke bytes#32.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r29.<com.googlecode.pngtastic.core.PngChunk: void <init>(byte[],byte[])>($r30, $r31);

        newChunk = $r29;

        virtualinvoke result.<com.googlecode.pngtastic.core.PngImage: void addChunk(com.googlecode.pngtastic.core.PngChunk)>(newChunk);

     label23:
        $z4 = interfaceinvoke itChunks.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label24;

        $r25 = interfaceinvoke itChunks.<java.util.Iterator: java.lang.Object next()>();

        $r46 = (com.googlecode.pngtastic.core.PngChunk) $r25;

        goto label25;

     label24:
        $r46 = null;

     label25:
        chunk#4 = $r46;

        goto label20;

     label26:
        bytes#34 = virtualinvoke result.<com.googlecode.pngtastic.core.PngImage: java.util.List getChunks()>();

        if bytes#34 == null goto label27;

        $r21 = "IEND";

        $i13 = interfaceinvoke bytes#34.<java.util.List: int size()>();

        $i14 = $i13 - 1;

        $r22 = interfaceinvoke bytes#34.<java.util.List: java.lang.Object get(int)>($i14);

        $r23 = (com.googlecode.pngtastic.core.PngChunk) $r22;

        $r24 = virtualinvoke $r23.<com.googlecode.pngtastic.core.PngChunk: java.lang.String getTypeString()>();

        $z2 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>($r24);

        if $z2 != 0 goto label27;

        $z13 = 1;

        goto label28;

     label27:
        $z13 = 0;

     label28:
        $z14 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision1(boolean)>($z13);

        if $z14 == 0 goto label29;

        $r17 = new com.googlecode.pngtastic.core.PngChunk;

        $r18 = "IEND";

        $r19 = virtualinvoke $r18.<java.lang.String: byte[] getBytes()>();

        $r20 = newarray (byte)[0];

        specialinvoke $r17.<com.googlecode.pngtastic.core.PngChunk: void <init>(byte[],byte[])>($r19, $r20);

        virtualinvoke result.<com.googlecode.pngtastic.core.PngImage: void addChunk(com.googlecode.pngtastic.core.PngChunk)>($r17);

     label29:
        return result;
    }

    private byte[] getFileBytes(java.io.File, long) throws java.io.IOException
    {
        com.googlecode.pngtastic.core.PngOptimizer this;
        java.io.File originalFile;
        long originalFileSize;
        java.nio.ByteBuffer buffer;
        java.lang.Throwable l6, $r3;
        int $i0;
        java.io.FileInputStream $r0, ins#1;
        java.nio.channels.FileChannel $r1;
        boolean $z0, $z1, $z2, $z3;
        byte[] $r2;

        this := @this: com.googlecode.pngtastic.core.PngOptimizer;

        originalFile := @parameter0: java.io.File;

        originalFileSize := @parameter1: long;

        $i0 = (int) originalFileSize;

        buffer = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i0);

        ins#1 = null;

     label01:
        $r0 = new java.io.FileInputStream;

        specialinvoke $r0.<java.io.FileInputStream: void <init>(java.io.File)>(originalFile);

        ins#1 = $r0;

        $r1 = virtualinvoke ins#1.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>();

        virtualinvoke $r1.<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer)>(buffer);

     label02:
        if ins#1 == null goto label03;

        $z2 = 1;

        goto label04;

     label03:
        $z2 = 0;

     label04:
        $z0 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision1(boolean)>($z2);

        if $z0 == 0 goto label10;

        virtualinvoke ins#1.<java.io.FileInputStream: void close()>();

        goto label10;

     label05:
        $r3 := @caughtexception;

        l6 = $r3;

     label06:
        if ins#1 == null goto label07;

        $z3 = 1;

        goto label08;

     label07:
        $z3 = 0;

     label08:
        $z1 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision1(boolean)>($z3);

        if $z1 == 0 goto label09;

        virtualinvoke ins#1.<java.io.FileInputStream: void close()>();

     label09:
        throw l6;

     label10:
        $r2 = virtualinvoke buffer.<java.nio.ByteBuffer: byte[] array()>();

        return $r2;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
    }

    private java.util.List copyScanlines(java.util.List)
    {
        com.googlecode.pngtastic.core.PngOptimizer this;
        java.util.List original;
        java.util.ArrayList copy, $r0;
        java.util.Iterator l3;
        byte[] scanline;
        int $i0;
        boolean $z0;
        java.lang.Object $r1, $r2;

        this := @this: com.googlecode.pngtastic.core.PngOptimizer;

        original := @parameter0: java.util.List;

        $r0 = new java.util.ArrayList;

        $i0 = interfaceinvoke original.<java.util.List: int size()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        copy = $r0;

        l3 = interfaceinvoke original.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r1 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        scanline = (byte[]) $r1;

        $r2 = virtualinvoke scanline.<java.lang.Object: java.lang.Object clone()>();

        interfaceinvoke copy.<java.util.List: boolean add(java.lang.Object)>($r2);

        goto label1;

     label2:
        return copy;
    }

    private com.googlecode.pngtastic.core.processing.PngByteArrayOutputStream serialize(java.util.List)
    {
        com.googlecode.pngtastic.core.PngOptimizer this;
        java.util.List scanlines;
        int scanlineLength, offset, $i0, $i1, $i2, i#1;
        byte[] imageData, scanline, $r1;
        java.lang.Object $r0, $r3;
        com.googlecode.pngtastic.core.processing.PngByteArrayOutputStream $r2;

        this := @this: com.googlecode.pngtastic.core.PngOptimizer;

        scanlines := @parameter0: java.util.List;

        $r0 = interfaceinvoke scanlines.<java.util.List: java.lang.Object get(int)>(0);

        $r1 = (byte[]) $r0;

        scanlineLength = lengthof $r1;

        $i0 = interfaceinvoke scanlines.<java.util.List: int size()>();

        $i1 = scanlineLength * $i0;

        imageData = newarray (byte)[$i1];

        i#1 = 0;

     label1:
        $i2 = interfaceinvoke scanlines.<java.util.List: int size()>();

        if i#1 >= $i2 goto label2;

        offset = i#1 * scanlineLength;

        $r3 = interfaceinvoke scanlines.<java.util.List: java.lang.Object get(int)>(i#1);

        scanline = (byte[]) $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(scanline, 0, imageData, offset, scanlineLength);

        i#1 = i#1 + 1;

        goto label1;

     label2:
        $r2 = new com.googlecode.pngtastic.core.processing.PngByteArrayOutputStream;

        specialinvoke $r2.<com.googlecode.pngtastic.core.processing.PngByteArrayOutputStream: void <init>(byte[])>(imageData);

        return $r2;
    }


