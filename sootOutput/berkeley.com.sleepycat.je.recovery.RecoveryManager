    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "berkeley/com/sleepycat/je/recovery/RecoveryManager";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <berkeley.com.sleepycat.je.recovery.RecoveryManager: boolean $assertionsDisabled> = $z1;

        return;
    }

    public berkeley.com.sleepycat.je.recovery.RecoveryInfo recover(boolean) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.recovery.RecoveryManager this;
        boolean readOnly, singular, $z0, forceCheckpoint#15, $z1, $z2, $z3, $z4, $z6;
        berkeley.com.sleepycat.je.log.FileManager fileManager;
        berkeley.com.sleepycat.je.dbi.DbConfigManager configManager, $r43;
        java.lang.String endOfLogMsg, $r10, $r35, $r39, $r41;
        int ptSize;
        berkeley.com.sleepycat.je.EnvironmentConfig envConfig;
        berkeley.com.sleepycat.je.CheckpointConfig config, $r76;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l7, $l8;
        java.io.IOException e, $r98;
        java.lang.Throwable l8, $r103;
        berkeley.com.sleepycat.je.dbi.StartupTracker $r0, $r44, $r46, $r50, $r53, $r55, $r57, $r61, $r66, $r79, $r81, $r84, $r90, $r96, $r104;
        berkeley.com.sleepycat.je.dbi.StartupTracker$Phase $r1, $r45, $r51, $r54, $r56, $r62, $r67, $r82, $r85, $r91, $r97, $r105;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r2, $r3, $r12, $r13, $r15, $r18, $r20, $r22, $r24, $r25, $r26, $r28, $r31, $r42, $r48, $r59, $r64, $r69, $r71, $r73, $r83, $r86, $r92, $r99, $r101;
        berkeley.com.sleepycat.je.config.BooleanConfigParam $r4, $r5;
        java.lang.StringBuilder $r7, $r8, $r11, $r33, $r34, $r36, $r37, $r38, $r40;
        berkeley.com.sleepycat.je.recovery.RecoveryInfo $r9, $r16, $r72, $r75, $r94, $r95, $r106;
        berkeley.com.sleepycat.je.log.LogManager $r14, $r74;
        java.util.logging.Logger $r17, $r30;
        java.util.logging.Level $r19, $r32;
        berkeley.com.sleepycat.je.dbi.INList $r21;
        berkeley.com.sleepycat.je.evictor.Evictor $r23, $r27;
        java.util.Map $r29;
        berkeley.com.sleepycat.je.RecoveryProgress $r47, $r58, $r80;
        berkeley.com.sleepycat.je.cleaner.UtilizationProfile $r49;
        berkeley.com.sleepycat.je.dbi.StartupTracker$Counter $r52, $r63;
        berkeley.com.sleepycat.je.cleaner.ExpirationProfile $r60;
        berkeley.com.sleepycat.je.ProgressListener $r65;
        berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker $r68;
        berkeley.com.sleepycat.je.cleaner.UtilizationTracker $r70;
        byte $b6;
        berkeley.com.sleepycat.je.recovery.Checkpointer $r87, $r93;
        berkeley.com.sleepycat.je.StatsConfig $r88;
        berkeley.com.sleepycat.je.utilint.StatGroup $r89;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r100;
        berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason $r102;

        this := @this: berkeley.com.sleepycat.je.recovery.RecoveryManager;

        readOnly := @parameter0: boolean;

        $r0 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r1 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase TOTAL_RECOVERY>;

        virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.StartupTracker: void start(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>($r1);

     label01:
        $r2 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        fileManager = virtualinvoke $r2.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.log.FileManager getFileManager()>();

        $r3 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        configManager = virtualinvoke $r3.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.DbConfigManager getConfigManager()>();

        $r4 = <berkeley.com.sleepycat.je.config.EnvironmentParams: berkeley.com.sleepycat.je.config.BooleanConfigParam ENV_RECOVERY_FORCE_NEW_FILE>;

        $z0 = virtualinvoke configManager.<berkeley.com.sleepycat.je.dbi.DbConfigManager: boolean getBoolean(berkeley.com.sleepycat.je.config.BooleanConfigParam)>($r4);

        if $z0 == 0 goto label02;

        virtualinvoke fileManager.<berkeley.com.sleepycat.je.log.FileManager: void forceNewLogFile()>();

        forceCheckpoint#15 = 1;

        goto label03;

     label02:
        $r5 = <berkeley.com.sleepycat.je.config.EnvironmentParams: berkeley.com.sleepycat.je.config.BooleanConfigParam ENV_RECOVERY_FORCE_CHECKPOINT>;

        forceCheckpoint#15 = virtualinvoke configManager.<berkeley.com.sleepycat.je.dbi.DbConfigManager: boolean getBoolean(berkeley.com.sleepycat.je.config.BooleanConfigParam)>($r5);

     label03:
        $z1 = virtualinvoke fileManager.<berkeley.com.sleepycat.je.log.FileManager: boolean filesExist()>();

        if $z1 == 0 goto label04;

        virtualinvoke fileManager.<berkeley.com.sleepycat.je.log.FileManager: java.lang.Long[] getAllFileNumbers()>();

        specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: void findEndOfLog(boolean)>(readOnly);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Recovery underway, valid end of log = ");

        $r9 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l1 = $r9.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long nextAvailableLsn>;

        $r10 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>($l1);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        endOfLogMsg = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        staticinvoke <berkeley.com.sleepycat.je.log.Trace: void traceLazily(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String)>($r12, endOfLogMsg);

        specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: void findLastCheckpoint()>();

        $r13 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r14 = virtualinvoke $r13.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.log.LogManager getLogManager()>();

        $l2 = virtualinvoke fileManager.<berkeley.com.sleepycat.je.log.FileManager: long getLastUsedLsn()>();

        virtualinvoke $r14.<berkeley.com.sleepycat.je.log.LogManager: void setLastLsnAtRecovery(long)>($l2);

        $r15 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r16 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l3 = $r16.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long useRootLsn>;

        virtualinvoke $r15.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void readMapTreeFromLog(long)>($l3);

        specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: void buildTree()>();

        goto label07;

     label04:
        $r17 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.logging.Logger logger>;

        $r18 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r19 = <java.util.logging.Level: java.util.logging.Level CONFIG>;

        staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: void logMsg(java.util.logging.Logger,berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.util.logging.Level,java.lang.String)>($r17, $r18, $r19, "Recovery w/no files.");

        $r20 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r21 = virtualinvoke $r20.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.INList getInMemoryINs()>();

        virtualinvoke $r21.<berkeley.com.sleepycat.je.dbi.INList: void enable()>();

        $r22 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r23 = virtualinvoke $r22.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.evictor.Evictor getEvictor()>();

        virtualinvoke $r23.<berkeley.com.sleepycat.je.evictor.Evictor: void setEnabled(boolean)>(1);

        if readOnly != 0 goto label05;

        $r24 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r24.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void logMapTreeRoot()>();

     label05:
        $r25 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $z2 = virtualinvoke $r25.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean getSharedCache()>();

        if $z2 == 0 goto label06;

        $r26 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r27 = virtualinvoke $r26.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.evictor.Evictor getEvictor()>();

        $r28 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r27.<berkeley.com.sleepycat.je.evictor.Evictor: void addEnvironment(berkeley.com.sleepycat.je.dbi.EnvironmentImpl)>($r28);

     label06:
        forceCheckpoint#15 = 1;

     label07:
        $r29 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.Map preparedTxns>;

        ptSize = interfaceinvoke $r29.<java.util.Map: int size()>();

        if ptSize <= 0 goto label14;

        if ptSize != 1 goto label08;

        $z3 = 1;

        goto label09;

     label08:
        $z3 = 0;

     label09:
        singular = $z3;

        $r30 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.logging.Logger logger>;

        $r31 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r32 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("There ");

        if singular == 0 goto label10;

        $r35 = "is ";

        goto label11;

     label10:
        $r35 = "are ";

     label11:
        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(ptSize);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" prepared but unfinished ");

        if singular == 0 goto label12;

        $r39 = "txn.";

        goto label13;

     label12:
        $r39 = "txns.";

     label13:
        $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: void logMsg(java.util.logging.Logger,berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.util.logging.Level,java.lang.String)>($r30, $r31, $r32, $r41);

        this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.Map preparedTxns> = null;

     label14:
        $r42 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r43 = virtualinvoke $r42.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.DbConfigManager getConfigManager()>();

        envConfig = virtualinvoke $r43.<berkeley.com.sleepycat.je.dbi.DbConfigManager: berkeley.com.sleepycat.je.EnvironmentConfig getEnvironmentConfig()>();

        $z4 = staticinvoke <berkeley.com.sleepycat.je.DbInternal: boolean getCreateUP(berkeley.com.sleepycat.je.EnvironmentConfig)>(envConfig);

        if $z4 == 0 goto label15;

        $r44 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r45 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase POPULATE_UP>;

        virtualinvoke $r44.<berkeley.com.sleepycat.je.dbi.StartupTracker: void start(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>($r45);

        $r46 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r47 = <berkeley.com.sleepycat.je.RecoveryProgress: berkeley.com.sleepycat.je.RecoveryProgress POPULATE_UTILIZATION_PROFILE>;

        virtualinvoke $r46.<berkeley.com.sleepycat.je.dbi.StartupTracker: void setProgress(berkeley.com.sleepycat.je.RecoveryProgress)>($r47);

        $r48 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r49 = virtualinvoke $r48.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.cleaner.UtilizationProfile getUtilizationProfile()>();

        $r50 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r51 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase POPULATE_UP>;

        $r52 = virtualinvoke $r50.<berkeley.com.sleepycat.je.dbi.StartupTracker: berkeley.com.sleepycat.je.dbi.StartupTracker$Counter getCounter(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>($r51);

        virtualinvoke $r49.<berkeley.com.sleepycat.je.cleaner.UtilizationProfile: boolean populateCache(berkeley.com.sleepycat.je.dbi.StartupTracker$Counter)>($r52);

        $r53 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r54 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase POPULATE_UP>;

        virtualinvoke $r53.<berkeley.com.sleepycat.je.dbi.StartupTracker: void stop(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>($r54);

     label15:
        $z6 = staticinvoke <berkeley.com.sleepycat.je.DbInternal: boolean getCreateEP(berkeley.com.sleepycat.je.EnvironmentConfig)>(envConfig);

        if $z6 == 0 goto label16;

        $r55 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r56 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase POPULATE_EP>;

        virtualinvoke $r55.<berkeley.com.sleepycat.je.dbi.StartupTracker: void start(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>($r56);

        $r57 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r58 = <berkeley.com.sleepycat.je.RecoveryProgress: berkeley.com.sleepycat.je.RecoveryProgress POPULATE_EXPIRATION_PROFILE>;

        virtualinvoke $r57.<berkeley.com.sleepycat.je.dbi.StartupTracker: void setProgress(berkeley.com.sleepycat.je.RecoveryProgress)>($r58);

        $r59 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r60 = virtualinvoke $r59.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.cleaner.ExpirationProfile getExpirationProfile()>();

        $r61 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r62 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase POPULATE_EP>;

        $r63 = virtualinvoke $r61.<berkeley.com.sleepycat.je.dbi.StartupTracker: berkeley.com.sleepycat.je.dbi.StartupTracker$Counter getCounter(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>($r62);

        $r64 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r65 = virtualinvoke $r64.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.ProgressListener getRecoveryProgressListener()>();

        virtualinvoke $r60.<berkeley.com.sleepycat.je.cleaner.ExpirationProfile: void populateCache(berkeley.com.sleepycat.je.dbi.StartupTracker$Counter,berkeley.com.sleepycat.je.ProgressListener)>($r63, $r65);

        $r66 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r67 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase POPULATE_EP>;

        virtualinvoke $r66.<berkeley.com.sleepycat.je.dbi.StartupTracker: void stop(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>($r67);

     label16:
        $r68 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker tracker>;

        $r69 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r70 = virtualinvoke $r69.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.cleaner.UtilizationTracker getUtilizationTracker()>();

        virtualinvoke $r68.<berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker: void transferToUtilizationTracker(berkeley.com.sleepycat.je.cleaner.UtilizationTracker)>($r70);

        specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: void removeTempDbs()>();

        specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: void deleteMapLNs()>();

        $r71 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r72 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        virtualinvoke $r71.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void preRecoveryCheckpointInit(berkeley.com.sleepycat.je.recovery.RecoveryInfo)>($r72);

        if readOnly != 0 goto label18;

        $r73 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r74 = virtualinvoke $r73.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.log.LogManager getLogManager()>();

        $l4 = virtualinvoke $r74.<berkeley.com.sleepycat.je.log.LogManager: long getLastLsnAtRecovery()>();

        $r75 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l5 = $r75.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long checkpointEndLsn>;

        $b6 = $l4 cmp $l5;

        if $b6 != 0 goto label17;

        if forceCheckpoint#15 == 0 goto label18;

     label17:
        $r76 = new berkeley.com.sleepycat.je.CheckpointConfig;

        specialinvoke $r76.<berkeley.com.sleepycat.je.CheckpointConfig: void <init>()>();

        config = $r76;

        virtualinvoke config.<berkeley.com.sleepycat.je.CheckpointConfig: berkeley.com.sleepycat.je.CheckpointConfig setForce(boolean)>(1);

        virtualinvoke config.<berkeley.com.sleepycat.je.CheckpointConfig: berkeley.com.sleepycat.je.CheckpointConfig setMinimizeRecoveryTime(boolean)>(1);

        $r79 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r80 = <berkeley.com.sleepycat.je.RecoveryProgress: berkeley.com.sleepycat.je.RecoveryProgress CKPT>;

        virtualinvoke $r79.<berkeley.com.sleepycat.je.dbi.StartupTracker: void setProgress(berkeley.com.sleepycat.je.RecoveryProgress)>($r80);

        $r81 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r82 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase CKPT>;

        virtualinvoke $r81.<berkeley.com.sleepycat.je.dbi.StartupTracker: void start(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>($r82);

        $r83 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r83.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void invokeCheckpoint(berkeley.com.sleepycat.je.CheckpointConfig,java.lang.String)>(config, "recovery");

        $r84 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r85 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase CKPT>;

        $r86 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r87 = virtualinvoke $r86.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.recovery.Checkpointer getCheckpointer()>();

        $r88 = <berkeley.com.sleepycat.je.StatsConfig: berkeley.com.sleepycat.je.StatsConfig DEFAULT>;

        $r89 = virtualinvoke $r87.<berkeley.com.sleepycat.je.recovery.Checkpointer: berkeley.com.sleepycat.je.utilint.StatGroup loadStats(berkeley.com.sleepycat.je.StatsConfig)>($r88);

        virtualinvoke $r84.<berkeley.com.sleepycat.je.dbi.StartupTracker: void setStats(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase,berkeley.com.sleepycat.je.utilint.StatGroup)>($r85, $r89);

        $r90 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r91 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase CKPT>;

        virtualinvoke $r90.<berkeley.com.sleepycat.je.dbi.StartupTracker: void stop(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>($r91);

        goto label19;

     label18:
        $r92 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r93 = virtualinvoke $r92.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.recovery.Checkpointer getCheckpointer()>();

        $r94 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l7 = $r94.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long checkpointStartLsn>;

        $r95 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l8 = $r95.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long checkpointEndLsn>;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        virtualinvoke $r93.<berkeley.com.sleepycat.je.recovery.Checkpointer: void initIntervals(long,long,long)>($l7, $l8, $l0);

     label19:
        $r96 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r97 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase TOTAL_RECOVERY>;

        virtualinvoke $r96.<berkeley.com.sleepycat.je.dbi.StartupTracker: void stop(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>($r97);

        goto label24;

     label20:
        $r98 := @caughtexception;

     label21:
        e = $r98;

        $r99 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: void traceAndLogException(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r99, "RecoveryManager", "recover", "Couldn\'t recover", e);

        $r100 = new berkeley.com.sleepycat.je.EnvironmentFailureException;

        $r101 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r102 = <berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason: berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason LOG_READ>;

        specialinvoke $r100.<berkeley.com.sleepycat.je.EnvironmentFailureException: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason,java.lang.Throwable)>($r101, $r102, e);

        throw $r100;

     label22:
        $r103 := @caughtexception;

        l8 = $r103;

     label23:
        $r104 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r105 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase TOTAL_RECOVERY>;

        virtualinvoke $r104.<berkeley.com.sleepycat.je.dbi.StartupTracker: void stop(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>($r105);

        throw l8;

     label24:
        $r106 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        return $r106;

        catch java.io.IOException from label01 to label19 with label20;
        catch java.lang.Throwable from label01 to label19 with label22;
        catch java.lang.Throwable from label21 to label23 with label22;
    }

    private void findEndOfLog(boolean) throws java.io.IOException, berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.recovery.RecoveryManager this;
        boolean readOnly, $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        berkeley.com.sleepycat.je.dbi.StartupTracker$Counter counter;
        berkeley.com.sleepycat.je.log.LastFileReader reader, $r6;
        berkeley.com.sleepycat.je.log.LogEntryType type, $r8, $r11, $r14, $r16, $r19;
        berkeley.com.sleepycat.je.dbi.StartupTracker $r0, $r2, $r4, $r37;
        berkeley.com.sleepycat.je.dbi.StartupTracker$Phase $r1, $r5, $r38;
        berkeley.com.sleepycat.je.RecoveryProgress $r3;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r7, $r17, $r20, $r33;
        int $i0;
        berkeley.com.sleepycat.je.recovery.RecoveryInfo $r9, $r10, $r12, $r13, $r15, $r31, $r32, $r35, $r36;
        long $l1, $l2, $l4, $l5, $l6, $l7, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16;
        byte $b3, $b8;
        berkeley.com.sleepycat.je.log.FileManager $r18, $r34;
        berkeley.com.sleepycat.je.log.entry.RestoreRequired $r21;
        java.lang.AssertionError $r22;
        java.lang.StringBuilder $r23, $r24, $r26, $r27, $r29;
        java.lang.String $r25, $r28, $r30;

        this := @this: berkeley.com.sleepycat.je.recovery.RecoveryManager;

        readOnly := @parameter0: boolean;

        $r0 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r1 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase FIND_END_OF_LOG>;

        virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.StartupTracker: void start(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>($r1);

        $r2 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r3 = <berkeley.com.sleepycat.je.RecoveryProgress: berkeley.com.sleepycat.je.RecoveryProgress FIND_END_OF_LOG>;

        virtualinvoke $r2.<berkeley.com.sleepycat.je.dbi.StartupTracker: void setProgress(berkeley.com.sleepycat.je.RecoveryProgress)>($r3);

        $r4 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r5 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase FIND_END_OF_LOG>;

        counter = virtualinvoke $r4.<berkeley.com.sleepycat.je.dbi.StartupTracker: berkeley.com.sleepycat.je.dbi.StartupTracker$Counter getCounter(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>($r5);

        $r6 = new berkeley.com.sleepycat.je.log.LastFileReader;

        $r7 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $i0 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: int readBufferSize>;

        specialinvoke $r6.<berkeley.com.sleepycat.je.log.LastFileReader: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,int)>($r7, $i0);

        reader = $r6;

     label1:
        $z0 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LastFileReader: boolean readNextEntry()>();

        if $z0 == 0 goto label7;

        virtualinvoke counter.<berkeley.com.sleepycat.je.dbi.StartupTracker$Counter: void incNumRead()>();

        virtualinvoke counter.<berkeley.com.sleepycat.je.dbi.StartupTracker$Counter: void incNumProcessed()>();

        type = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LastFileReader: berkeley.com.sleepycat.je.log.LogEntryType getEntryType()>();

        $r8 = <berkeley.com.sleepycat.je.log.LogEntryType: berkeley.com.sleepycat.je.log.LogEntryType LOG_CKPT_END>;

        $z1 = virtualinvoke $r8.<berkeley.com.sleepycat.je.log.LogEntryType: boolean equals(java.lang.Object)>(type);

        if $z1 == 0 goto label2;

        $r9 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l1 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LastFileReader: long getLastLsn()>();

        $r9.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long checkpointEndLsn> = $l1;

        $r10 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $r10.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long partialCheckpointStartLsn> = -1L;

        goto label6;

     label2:
        $r11 = <berkeley.com.sleepycat.je.log.LogEntryType: berkeley.com.sleepycat.je.log.LogEntryType LOG_CKPT_START>;

        $z2 = virtualinvoke $r11.<berkeley.com.sleepycat.je.log.LogEntryType: boolean equals(java.lang.Object)>(type);

        if $z2 == 0 goto label3;

        $r12 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l2 = $r12.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long partialCheckpointStartLsn>;

        $b3 = $l2 cmp -1L;

        if $b3 != 0 goto label6;

        $r13 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l4 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LastFileReader: long getLastLsn()>();

        $r13.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long partialCheckpointStartLsn> = $l4;

        goto label6;

     label3:
        $r14 = <berkeley.com.sleepycat.je.log.LogEntryType: berkeley.com.sleepycat.je.log.LogEntryType LOG_DBTREE>;

        $z3 = virtualinvoke $r14.<berkeley.com.sleepycat.je.log.LogEntryType: boolean equals(java.lang.Object)>(type);

        if $z3 == 0 goto label4;

        $r15 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l5 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LastFileReader: long getLastLsn()>();

        $r15.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long useRootLsn> = $l5;

        goto label6;

     label4:
        $r16 = <berkeley.com.sleepycat.je.log.LogEntryType: berkeley.com.sleepycat.je.log.LogEntryType LOG_IMMUTABLE_FILE>;

        $z4 = virtualinvoke $r16.<berkeley.com.sleepycat.je.log.LogEntryType: boolean equals(java.lang.Object)>(type);

        if $z4 == 0 goto label5;

        $r17 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r18 = virtualinvoke $r17.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.log.FileManager getFileManager()>();

        virtualinvoke $r18.<berkeley.com.sleepycat.je.log.FileManager: void forceNewLogFile()>();

        goto label6;

     label5:
        $r19 = <berkeley.com.sleepycat.je.log.LogEntryType: berkeley.com.sleepycat.je.log.LogEntryType LOG_RESTORE_REQUIRED>;

        $z5 = virtualinvoke $r19.<berkeley.com.sleepycat.je.log.LogEntryType: boolean equals(java.lang.Object)>(type);

        if $z5 == 0 goto label6;

        $r20 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r21 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LastFileReader: berkeley.com.sleepycat.je.log.entry.RestoreRequired getRestoreRequired()>();

        virtualinvoke $r20.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void handleRestoreRequired(berkeley.com.sleepycat.je.log.entry.RestoreRequired)>($r21);

     label6:
        goto label1;

     label7:
        $z6 = <berkeley.com.sleepycat.je.recovery.RecoveryManager: boolean $assertionsDisabled>;

        if $z6 != 0 goto label8;

        $l6 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LastFileReader: long getLastValidLsn()>();

        $l7 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LastFileReader: long getEndOfLog()>();

        $b8 = $l6 cmp $l7;

        if $b8 != 0 goto label8;

        $r22 = new java.lang.AssertionError;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lastUsed=");

        $l9 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LastFileReader: long getLastValidLsn()>();

        $r25 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>($l9);

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" end=");

        $l10 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LastFileReader: long getEndOfLog()>();

        $r28 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>($l10);

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.AssertionError: void <init>(java.lang.Object)>($r30);

        throw $r22;

     label8:
        if readOnly != 0 goto label9;

        virtualinvoke reader.<berkeley.com.sleepycat.je.log.LastFileReader: void setEndOfFile()>();

     label9:
        $r31 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l11 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LastFileReader: long getLastValidLsn()>();

        $r31.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long lastUsedLsn> = $l11;

        $r32 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l12 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LastFileReader: long getEndOfLog()>();

        $r32.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long nextAvailableLsn> = $l12;

        $l13 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LastFileReader: long getNRepeatIteratorReads()>();

        virtualinvoke counter.<berkeley.com.sleepycat.je.dbi.StartupTracker$Counter: void setRepeatIteratorReads(long)>($l13);

        $r33 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r34 = virtualinvoke $r33.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.log.FileManager getFileManager()>();

        $r35 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l14 = $r35.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long nextAvailableLsn>;

        $r36 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l15 = $r36.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long lastUsedLsn>;

        $l16 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LastFileReader: long getPrevOffset()>();

        virtualinvoke $r34.<berkeley.com.sleepycat.je.log.FileManager: void setLastPosition(long,long,long)>($l14, $l15, $l16);

        $r37 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r38 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase FIND_END_OF_LOG>;

        virtualinvoke $r37.<berkeley.com.sleepycat.je.dbi.StartupTracker: void stop(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>($r38);

        return;
    }

    private void findLastCheckpoint() throws java.io.IOException, berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.recovery.RecoveryManager this;
        berkeley.com.sleepycat.je.dbi.StartupTracker$Counter counter;
        berkeley.com.sleepycat.je.log.CheckpointFileReader searcher, $r7;
        berkeley.com.sleepycat.je.recovery.CheckpointEnd checkpointEnd, $r22;
        berkeley.com.sleepycat.je.dbi.StartupTracker $r0, $r2, $r4, $r32;
        berkeley.com.sleepycat.je.dbi.StartupTracker$Phase $r1, $r5, $r33;
        berkeley.com.sleepycat.je.RecoveryProgress $r3;
        berkeley.com.sleepycat.je.recovery.RecoveryInfo $r6, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r20, $r23, $r24, $r25, $r26, $r27, $r31, $r34;
        long $l0, $l3, $l4, $l5, $l6, $l7, $l9, $l10, $l11, $l13, $l14, $l15, $l16, $l18, $l20, $l21, $l22, $l23;
        byte $b1, $b8, $b12, $b17, $b19, $b24;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r8, $r18, $r28, $r36;
        int $i2;
        boolean $z0, $z1, $z2, $z3;
        berkeley.com.sleepycat.je.log.LogManager $r19;
        java.lang.Object $r21;
        berkeley.com.sleepycat.je.recovery.Checkpointer $r29;
        berkeley.com.sleepycat.je.recovery.RollbackTracker $r30;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r35;
        berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason $r37;

        this := @this: berkeley.com.sleepycat.je.recovery.RecoveryManager;

        $r0 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r1 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase FIND_LAST_CKPT>;

        virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.StartupTracker: void start(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>($r1);

        $r2 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r3 = <berkeley.com.sleepycat.je.RecoveryProgress: berkeley.com.sleepycat.je.RecoveryProgress FIND_LAST_CKPT>;

        virtualinvoke $r2.<berkeley.com.sleepycat.je.dbi.StartupTracker: void setProgress(berkeley.com.sleepycat.je.RecoveryProgress)>($r3);

        $r4 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r5 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase FIND_LAST_CKPT>;

        counter = virtualinvoke $r4.<berkeley.com.sleepycat.je.dbi.StartupTracker: berkeley.com.sleepycat.je.dbi.StartupTracker$Counter getCounter(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>($r5);

        $r6 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l0 = $r6.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long checkpointEndLsn>;

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label5;

        $r7 = new berkeley.com.sleepycat.je.log.CheckpointFileReader;

        $r8 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $i2 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: int readBufferSize>;

        $r9 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l3 = $r9.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long lastUsedLsn>;

        $r10 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l4 = $r10.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long nextAvailableLsn>;

        specialinvoke $r7.<berkeley.com.sleepycat.je.log.CheckpointFileReader: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,int,boolean,long,long,long)>($r8, $i2, 0, $l3, -1L, $l4);

        searcher = $r7;

     label1:
        $z0 = virtualinvoke searcher.<berkeley.com.sleepycat.je.log.CheckpointFileReader: boolean readNextEntry()>();

        if $z0 == 0 goto label4;

        virtualinvoke counter.<berkeley.com.sleepycat.je.dbi.StartupTracker$Counter: void incNumRead()>();

        virtualinvoke counter.<berkeley.com.sleepycat.je.dbi.StartupTracker$Counter: void incNumProcessed()>();

        $z1 = virtualinvoke searcher.<berkeley.com.sleepycat.je.log.CheckpointFileReader: boolean isCheckpointEnd()>();

        if $z1 == 0 goto label2;

        $r11 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l5 = virtualinvoke searcher.<berkeley.com.sleepycat.je.log.CheckpointFileReader: long getLastLsn()>();

        $r11.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long checkpointEndLsn> = $l5;

        goto label4;

     label2:
        $z2 = virtualinvoke searcher.<berkeley.com.sleepycat.je.log.CheckpointFileReader: boolean isCheckpointStart()>();

        if $z2 == 0 goto label3;

        $r12 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l6 = virtualinvoke searcher.<berkeley.com.sleepycat.je.log.CheckpointFileReader: long getLastLsn()>();

        $r12.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long partialCheckpointStartLsn> = $l6;

        goto label1;

     label3:
        $z3 = virtualinvoke searcher.<berkeley.com.sleepycat.je.log.CheckpointFileReader: boolean isDbTree()>();

        if $z3 == 0 goto label1;

        $r13 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l7 = $r13.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long useRootLsn>;

        $b8 = $l7 cmp -1L;

        if $b8 != 0 goto label1;

        $r14 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l9 = virtualinvoke searcher.<berkeley.com.sleepycat.je.log.CheckpointFileReader: long getLastLsn()>();

        $r14.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long useRootLsn> = $l9;

        goto label1;

     label4:
        $l10 = virtualinvoke searcher.<berkeley.com.sleepycat.je.log.CheckpointFileReader: long getNRepeatIteratorReads()>();

        virtualinvoke counter.<berkeley.com.sleepycat.je.dbi.StartupTracker$Counter: void setRepeatIteratorReads(long)>($l10);

     label5:
        $r15 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l11 = $r15.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long checkpointEndLsn>;

        $b12 = $l11 cmp -1L;

        if $b12 != 0 goto label6;

        $r16 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $r16.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long checkpointStartLsn> = -1L;

        $r17 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $r17.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long firstActiveLsn> = -1L;

        goto label8;

     label6:
        $r18 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r19 = virtualinvoke $r18.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.log.LogManager getLogManager()>();

        $r20 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l13 = $r20.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long checkpointEndLsn>;

        $r21 = virtualinvoke $r19.<berkeley.com.sleepycat.je.log.LogManager: java.lang.Object getEntry(long)>($l13);

        $r22 = (berkeley.com.sleepycat.je.recovery.CheckpointEnd) $r21;

        checkpointEnd = (berkeley.com.sleepycat.je.recovery.CheckpointEnd) $r22;

        $r23 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $r23.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: berkeley.com.sleepycat.je.recovery.CheckpointEnd checkpointEnd> = checkpointEnd;

        $r24 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l14 = virtualinvoke checkpointEnd.<berkeley.com.sleepycat.je.recovery.CheckpointEnd: long getCheckpointStartLsn()>();

        $r24.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long checkpointStartLsn> = $l14;

        $r25 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l15 = virtualinvoke checkpointEnd.<berkeley.com.sleepycat.je.recovery.CheckpointEnd: long getFirstActiveLsn()>();

        $r25.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long firstActiveLsn> = $l15;

        $l16 = virtualinvoke checkpointEnd.<berkeley.com.sleepycat.je.recovery.CheckpointEnd: long getRootLsn()>();

        $b17 = $l16 cmp -1L;

        if $b17 == 0 goto label7;

        $r26 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l18 = $r26.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long useRootLsn>;

        $b19 = $l18 cmp -1L;

        if $b19 != 0 goto label7;

        $r27 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l20 = virtualinvoke checkpointEnd.<berkeley.com.sleepycat.je.recovery.CheckpointEnd: long getRootLsn()>();

        $r27.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long useRootLsn> = $l20;

     label7:
        $r28 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r29 = virtualinvoke $r28.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.recovery.Checkpointer getCheckpointer()>();

        $l21 = virtualinvoke checkpointEnd.<berkeley.com.sleepycat.je.recovery.CheckpointEnd: long getId()>();

        virtualinvoke $r29.<berkeley.com.sleepycat.je.recovery.Checkpointer: void setCheckpointId(long)>($l21);

     label8:
        $r30 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RollbackTracker rollbackTracker>;

        $r31 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l22 = $r31.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long checkpointStartLsn>;

        virtualinvoke $r30.<berkeley.com.sleepycat.je.recovery.RollbackTracker: void setCheckpointStart(long)>($l22);

        $r32 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r33 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase FIND_LAST_CKPT>;

        virtualinvoke $r32.<berkeley.com.sleepycat.je.dbi.StartupTracker: void stop(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>($r33);

        $r34 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l23 = $r34.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long useRootLsn>;

        $b24 = $l23 cmp -1L;

        if $b24 != 0 goto label9;

        $r35 = new berkeley.com.sleepycat.je.EnvironmentFailureException;

        $r36 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r37 = <berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason: berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason LOG_INTEGRITY>;

        specialinvoke $r35.<berkeley.com.sleepycat.je.EnvironmentFailureException: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason,java.lang.String)>($r36, $r37, "This environment\'s log file has no root. Since the root is the first entry written into a log at environment creation, this should only happen if the initial creation of the environment was never checkpointed or synced. Please move aside the existing log files to allow the creation of a new environment");

        throw $r35;

     label9:
        return;
    }

    private void buildTree() throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.recovery.RecoveryManager this;
        java.util.HashSet mapLNSet, lnSet, $r10, $r47;
        java.lang.Throwable l5, $r72;
        berkeley.com.sleepycat.je.dbi.StartupTracker $r0, $r6, $r8, $r16, $r19, $r24, $r26, $r29, $r32, $r43, $r45, $r51, $r54, $r56, $r58, $r64, $r67, $r70, $r73;
        berkeley.com.sleepycat.je.dbi.StartupTracker$Phase $r1, $r2, $r3, $r7, $r17, $r20, $r25, $r30, $r33, $r34, $r35, $r44, $r52, $r55, $r57, $r65, $r68, $r71, $r74;
        berkeley.com.sleepycat.je.RecoveryProgress $r4, $r5, $r9, $r27, $r36, $r37, $r46, $r59;
        berkeley.com.sleepycat.je.log.LogEntryType $r11, $r12, $r13, $r14, $r15, $r28, entryType#102, $r50, entryType#137, $r62, $r63;
        berkeley.com.sleepycat.je.dbi.StartupTracker$Counter $r18, $r31, $r53, $r66;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r21, $r38, $r39, $r41, $r42;
        berkeley.com.sleepycat.je.log.FileManager $r22;
        berkeley.com.sleepycat.je.recovery.RecoveryInfo $r23;
        long $l0;
        boolean $z6, $z7, $z8, $z9, $z12, $z13, $z14;
        berkeley.com.sleepycat.je.evictor.Evictor $r40;
        java.util.Set $r48, $r60;
        java.util.Iterator l3#96, l3#131;
        java.lang.Object $r49, $r61;
        berkeley.com.sleepycat.je.recovery.RollbackTracker $r69;

        this := @this: berkeley.com.sleepycat.je.recovery.RecoveryManager;

        $r0 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r1 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase BUILD_TREE>;

        virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.StartupTracker: void start(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>($r1);

     label01:
        $r2 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase READ_MAP_INS>;

        $r3 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase REDO_MAP_INS>;

        $r4 = <berkeley.com.sleepycat.je.RecoveryProgress: berkeley.com.sleepycat.je.RecoveryProgress READ_DBMAP_INFO>;

        $r5 = <berkeley.com.sleepycat.je.RecoveryProgress: berkeley.com.sleepycat.je.RecoveryProgress REDO_DBMAP_INFO>;

        specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: void buildINs(boolean,berkeley.com.sleepycat.je.dbi.StartupTracker$Phase,berkeley.com.sleepycat.je.dbi.StartupTracker$Phase,berkeley.com.sleepycat.je.RecoveryProgress,berkeley.com.sleepycat.je.RecoveryProgress)>(1, $r2, $r3, $r4, $r5);

        $r6 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r7 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase UNDO_MAP_LNS>;

        virtualinvoke $r6.<berkeley.com.sleepycat.je.dbi.StartupTracker: void start(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>($r7);

        $r8 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r9 = <berkeley.com.sleepycat.je.RecoveryProgress: berkeley.com.sleepycat.je.RecoveryProgress UNDO_DBMAP_RECORDS>;

        virtualinvoke $r8.<berkeley.com.sleepycat.je.dbi.StartupTracker: void setProgress(berkeley.com.sleepycat.je.RecoveryProgress)>($r9);

        $r10 = new java.util.HashSet;

        specialinvoke $r10.<java.util.HashSet: void <init>()>();

        mapLNSet = $r10;

        $r11 = <berkeley.com.sleepycat.je.log.LogEntryType: berkeley.com.sleepycat.je.log.LogEntryType LOG_TXN_COMMIT>;

        interfaceinvoke mapLNSet.<java.util.Set: boolean add(java.lang.Object)>($r11);

        $r12 = <berkeley.com.sleepycat.je.log.LogEntryType: berkeley.com.sleepycat.je.log.LogEntryType LOG_TXN_ABORT>;

        interfaceinvoke mapLNSet.<java.util.Set: boolean add(java.lang.Object)>($r12);

        $r13 = <berkeley.com.sleepycat.je.log.LogEntryType: berkeley.com.sleepycat.je.log.LogEntryType LOG_TXN_PREPARE>;

        interfaceinvoke mapLNSet.<java.util.Set: boolean add(java.lang.Object)>($r13);

        $r14 = <berkeley.com.sleepycat.je.log.LogEntryType: berkeley.com.sleepycat.je.log.LogEntryType LOG_ROLLBACK_START>;

        interfaceinvoke mapLNSet.<java.util.Set: boolean add(java.lang.Object)>($r14);

        $r15 = <berkeley.com.sleepycat.je.log.LogEntryType: berkeley.com.sleepycat.je.log.LogEntryType LOG_ROLLBACK_END>;

        interfaceinvoke mapLNSet.<java.util.Set: boolean add(java.lang.Object)>($r15);

        $r16 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r17 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase UNDO_MAP_LNS>;

        $r18 = virtualinvoke $r16.<berkeley.com.sleepycat.je.dbi.StartupTracker: berkeley.com.sleepycat.je.dbi.StartupTracker$Counter getCounter(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>($r17);

        specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: void undoLNs(java.util.Set,boolean,berkeley.com.sleepycat.je.dbi.StartupTracker$Counter)>(mapLNSet, 1, $r18);

        $r19 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r20 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase UNDO_MAP_LNS>;

        virtualinvoke $r19.<berkeley.com.sleepycat.je.dbi.StartupTracker: void stop(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>($r20);

        $r21 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r22 = virtualinvoke $r21.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.log.FileManager getFileManager()>();

        $r23 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l0 = $r23.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long firstActiveLsn>;

        virtualinvoke $r22.<berkeley.com.sleepycat.je.log.FileManager: void startFileCacheWarmer(long)>($l0);

        $r24 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r25 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase REDO_MAP_LNS>;

        virtualinvoke $r24.<berkeley.com.sleepycat.je.dbi.StartupTracker: void start(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>($r25);

        $r26 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r27 = <berkeley.com.sleepycat.je.RecoveryProgress: berkeley.com.sleepycat.je.RecoveryProgress REDO_DBMAP_RECORDS>;

        virtualinvoke $r26.<berkeley.com.sleepycat.je.dbi.StartupTracker: void setProgress(berkeley.com.sleepycat.je.RecoveryProgress)>($r27);

        interfaceinvoke mapLNSet.<java.util.Set: void clear()>();

        $r28 = <berkeley.com.sleepycat.je.log.LogEntryType: berkeley.com.sleepycat.je.log.LogEntryType LOG_MAPLN>;

        interfaceinvoke mapLNSet.<java.util.Set: boolean add(java.lang.Object)>($r28);

        $r29 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r30 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase REDO_MAP_LNS>;

        $r31 = virtualinvoke $r29.<berkeley.com.sleepycat.je.dbi.StartupTracker: berkeley.com.sleepycat.je.dbi.StartupTracker$Counter getCounter(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>($r30);

        specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: void redoLNs(java.util.Set,berkeley.com.sleepycat.je.dbi.StartupTracker$Counter)>(mapLNSet, $r31);

        $r32 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r33 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase REDO_MAP_LNS>;

        virtualinvoke $r32.<berkeley.com.sleepycat.je.dbi.StartupTracker: void stop(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>($r33);

        specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: void checkLogVersion8UpgradeViolations()>();

        $r34 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase READ_INS>;

        $r35 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase REDO_INS>;

        $r36 = <berkeley.com.sleepycat.je.RecoveryProgress: berkeley.com.sleepycat.je.RecoveryProgress READ_DATA_INFO>;

        $r37 = <berkeley.com.sleepycat.je.RecoveryProgress: berkeley.com.sleepycat.je.RecoveryProgress REDO_DATA_INFO>;

        specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: void buildINs(boolean,berkeley.com.sleepycat.je.dbi.StartupTracker$Phase,berkeley.com.sleepycat.je.dbi.StartupTracker$Phase,berkeley.com.sleepycat.je.RecoveryProgress,berkeley.com.sleepycat.je.RecoveryProgress)>(0, $r34, $r35, $r36, $r37);

        specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: void buildINList()>();

        $r38 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $z6 = virtualinvoke $r38.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean getSharedCache()>();

        if $z6 == 0 goto label02;

        $r39 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r40 = virtualinvoke $r39.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.evictor.Evictor getEvictor()>();

        $r41 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r40.<berkeley.com.sleepycat.je.evictor.Evictor: void addEnvironment(berkeley.com.sleepycat.je.dbi.EnvironmentImpl)>($r41);

     label02:
        $r42 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r42.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void invokeEvictor()>();

        $r43 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r44 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase UNDO_LNS>;

        virtualinvoke $r43.<berkeley.com.sleepycat.je.dbi.StartupTracker: void start(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>($r44);

        $r45 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r46 = <berkeley.com.sleepycat.je.RecoveryProgress: berkeley.com.sleepycat.je.RecoveryProgress UNDO_DATA_RECORDS>;

        virtualinvoke $r45.<berkeley.com.sleepycat.je.dbi.StartupTracker: void setProgress(berkeley.com.sleepycat.je.RecoveryProgress)>($r46);

        $r47 = new java.util.HashSet;

        specialinvoke $r47.<java.util.HashSet: void <init>()>();

        lnSet = $r47;

        $r48 = staticinvoke <berkeley.com.sleepycat.je.log.LogEntryType: java.util.Set getAllTypes()>();

        l3#96 = interfaceinvoke $r48.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        $z7 = interfaceinvoke l3#96.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label05;

        $r49 = interfaceinvoke l3#96.<java.util.Iterator: java.lang.Object next()>();

        entryType#102 = (berkeley.com.sleepycat.je.log.LogEntryType) $r49;

        $z8 = virtualinvoke entryType#102.<berkeley.com.sleepycat.je.log.LogEntryType: boolean isUserLNType()>();

        if $z8 == 0 goto label04;

        $z9 = virtualinvoke entryType#102.<berkeley.com.sleepycat.je.log.LogEntryType: boolean isTransactional()>();

        if $z9 == 0 goto label04;

        interfaceinvoke lnSet.<java.util.Set: boolean add(java.lang.Object)>(entryType#102);

     label04:
        goto label03;

     label05:
        $r50 = <berkeley.com.sleepycat.je.log.LogEntryType: berkeley.com.sleepycat.je.log.LogEntryType LOG_NAMELN_TRANSACTIONAL>;

        interfaceinvoke lnSet.<java.util.Set: boolean add(java.lang.Object)>($r50);

        $r51 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r52 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase UNDO_LNS>;

        $r53 = virtualinvoke $r51.<berkeley.com.sleepycat.je.dbi.StartupTracker: berkeley.com.sleepycat.je.dbi.StartupTracker$Counter getCounter(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>($r52);

        specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: void undoLNs(java.util.Set,boolean,berkeley.com.sleepycat.je.dbi.StartupTracker$Counter)>(lnSet, 0, $r53);

        $r54 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r55 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase UNDO_LNS>;

        virtualinvoke $r54.<berkeley.com.sleepycat.je.dbi.StartupTracker: void stop(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>($r55);

        $r56 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r57 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase REDO_LNS>;

        virtualinvoke $r56.<berkeley.com.sleepycat.je.dbi.StartupTracker: void start(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>($r57);

        $r58 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r59 = <berkeley.com.sleepycat.je.RecoveryProgress: berkeley.com.sleepycat.je.RecoveryProgress REDO_DATA_RECORDS>;

        virtualinvoke $r58.<berkeley.com.sleepycat.je.dbi.StartupTracker: void setProgress(berkeley.com.sleepycat.je.RecoveryProgress)>($r59);

        $r60 = staticinvoke <berkeley.com.sleepycat.je.log.LogEntryType: java.util.Set getAllTypes()>();

        l3#131 = interfaceinvoke $r60.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $z12 = interfaceinvoke l3#131.<java.util.Iterator: boolean hasNext()>();

        if $z12 == 0 goto label08;

        $r61 = interfaceinvoke l3#131.<java.util.Iterator: java.lang.Object next()>();

        entryType#137 = (berkeley.com.sleepycat.je.log.LogEntryType) $r61;

        $z13 = virtualinvoke entryType#137.<berkeley.com.sleepycat.je.log.LogEntryType: boolean isUserLNType()>();

        if $z13 == 0 goto label07;

        $z14 = virtualinvoke entryType#137.<berkeley.com.sleepycat.je.log.LogEntryType: boolean isTransactional()>();

        if $z14 != 0 goto label07;

        interfaceinvoke lnSet.<java.util.Set: boolean add(java.lang.Object)>(entryType#137);

     label07:
        goto label06;

     label08:
        $r62 = <berkeley.com.sleepycat.je.log.LogEntryType: berkeley.com.sleepycat.je.log.LogEntryType LOG_NAMELN>;

        interfaceinvoke lnSet.<java.util.Set: boolean add(java.lang.Object)>($r62);

        $r63 = <berkeley.com.sleepycat.je.log.LogEntryType: berkeley.com.sleepycat.je.log.LogEntryType LOG_FILESUMMARYLN>;

        interfaceinvoke lnSet.<java.util.Set: boolean add(java.lang.Object)>($r63);

        $r64 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r65 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase REDO_LNS>;

        $r66 = virtualinvoke $r64.<berkeley.com.sleepycat.je.dbi.StartupTracker: berkeley.com.sleepycat.je.dbi.StartupTracker$Counter getCounter(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>($r65);

        specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: void redoLNs(java.util.Set,berkeley.com.sleepycat.je.dbi.StartupTracker$Counter)>(lnSet, $r66);

        $r67 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r68 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase REDO_LNS>;

        virtualinvoke $r67.<berkeley.com.sleepycat.je.dbi.StartupTracker: void stop(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>($r68);

        $r69 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RollbackTracker rollbackTracker>;

        virtualinvoke $r69.<berkeley.com.sleepycat.je.recovery.RollbackTracker: void recoveryEndFsyncInvisible()>();

     label09:
        $r70 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r71 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase BUILD_TREE>;

        virtualinvoke $r70.<berkeley.com.sleepycat.je.dbi.StartupTracker: void stop(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>($r71);

        goto label13;

     label10:
        $r72 := @caughtexception;

     label11:
        l5 = $r72;

     label12:
        $r73 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r74 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase BUILD_TREE>;

        virtualinvoke $r73.<berkeley.com.sleepycat.je.dbi.StartupTracker: void stop(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>($r74);

        throw l5;

     label13:
        return;

        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private void removeTempDbs() throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.recovery.RecoveryManager this;
        berkeley.com.sleepycat.je.dbi.StartupTracker$Counter counter;
        berkeley.com.sleepycat.je.dbi.DbTree dbMapTree, $r12;
        berkeley.com.sleepycat.je.txn.BasicLocker locker;
        java.util.Iterator removeDbs;
        berkeley.com.sleepycat.je.dbi.DatabaseId dbId, $r14;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;
        java.lang.Error E, $r23;
        java.lang.Throwable l9, $r25;
        berkeley.com.sleepycat.je.dbi.StartupTracker $r0, $r2, $r4, $r21, $r26;
        berkeley.com.sleepycat.je.dbi.StartupTracker$Phase $r1, $r5, $r22, $r27;
        berkeley.com.sleepycat.je.RecoveryProgress $r3;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r6, $r7, $r11, $r17, $r24;
        boolean operationOk#19, $z0, $z1, $z2, $z3, operationOk#64;
        java.util.Set $r8;
        java.lang.Object $r9;
        java.lang.AssertionError $r10;
        java.lang.String $r13;
        berkeley.com.sleepycat.je.dbi.DbTree$NeedRepLockerException $r16, e#53;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r18, $r20;
        berkeley.com.sleepycat.je.DatabaseNotFoundException $r19, e#59;

        this := @this: berkeley.com.sleepycat.je.recovery.RecoveryManager;

        $r0 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r1 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase REMOVE_TEMP_DBS>;

        virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.StartupTracker: void start(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>($r1);

        $r2 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r3 = <berkeley.com.sleepycat.je.RecoveryProgress: berkeley.com.sleepycat.je.RecoveryProgress REMOVE_TEMP_DBS>;

        virtualinvoke $r2.<berkeley.com.sleepycat.je.dbi.StartupTracker: void setProgress(berkeley.com.sleepycat.je.RecoveryProgress)>($r3);

        $r4 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r5 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase REMOVE_TEMP_DBS>;

        counter = virtualinvoke $r4.<berkeley.com.sleepycat.je.dbi.StartupTracker: berkeley.com.sleepycat.je.dbi.StartupTracker$Counter getCounter(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>($r5);

        $r6 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        dbMapTree = virtualinvoke $r6.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.DbTree getDbTree()>();

        $r7 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        locker = staticinvoke <berkeley.com.sleepycat.je.txn.BasicLocker: berkeley.com.sleepycat.je.txn.BasicLocker createBasicLocker(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,boolean)>($r7, 0);

        operationOk#19 = 0;

     label01:
        $r8 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.Set tempDbIds>;

        removeDbs = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke removeDbs.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        virtualinvoke counter.<berkeley.com.sleepycat.je.dbi.StartupTracker$Counter: void incNumRead()>();

        $r9 = interfaceinvoke removeDbs.<java.util.Iterator: java.lang.Object next()>();

        dbId = (berkeley.com.sleepycat.je.dbi.DatabaseId) $r9;

        db = virtualinvoke dbMapTree.<berkeley.com.sleepycat.je.dbi.DbTree: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDb(berkeley.com.sleepycat.je.dbi.DatabaseId)>(dbId);

        virtualinvoke dbMapTree.<berkeley.com.sleepycat.je.dbi.DbTree: void releaseDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(db);

        if db == null goto label09;

        $z1 = <berkeley.com.sleepycat.je.recovery.RecoveryManager: boolean $assertionsDisabled>;

        if $z1 != 0 goto label03;

        $z2 = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isTemporary()>();

        if $z2 != 0 goto label03;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label03:
        $z3 = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isDeleted()>();

        if $z3 != 0 goto label08;

     label04:
        virtualinvoke counter.<berkeley.com.sleepycat.je.dbi.StartupTracker$Counter: void incNumProcessed()>();

        $r11 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r12 = virtualinvoke $r11.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.DbTree getDbTree()>();

        $r13 = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: java.lang.String getName()>();

        $r14 = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.DatabaseId getId()>();

        virtualinvoke $r12.<berkeley.com.sleepycat.je.dbi.DbTree: berkeley.com.sleepycat.je.dbi.DatabaseImpl dbRemove(berkeley.com.sleepycat.je.txn.Locker,java.lang.String,berkeley.com.sleepycat.je.dbi.DatabaseId)>(locker, $r13, $r14);

     label05:
        goto label09;

     label06:
        $r16 := @caughtexception;

        e#53 = $r16;

        $r17 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r18 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedException(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.Exception)>($r17, e#53);

        throw $r18;

     label07:
        $r19 := @caughtexception;

        e#59 = $r19;

        $r20 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedException(java.lang.Exception)>(e#59);

        throw $r20;

     label08:
        virtualinvoke counter.<berkeley.com.sleepycat.je.dbi.StartupTracker$Counter: void incNumDeleted()>();

     label09:
        goto label02;

     label10:
        operationOk#64 = 1;

     label11:
        virtualinvoke locker.<berkeley.com.sleepycat.je.txn.BasicLocker: void operationEnd(boolean)>(operationOk#64);

        $r21 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r22 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase REMOVE_TEMP_DBS>;

        virtualinvoke $r21.<berkeley.com.sleepycat.je.dbi.StartupTracker: void stop(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>($r22);

        goto label16;

     label12:
        $r23 := @caughtexception;

     label13:
        E = $r23;

        $r24 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r24.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void invalidate(java.lang.Error)>(E);

        throw E;

     label14:
        $r25 := @caughtexception;

        l9 = $r25;

     label15:
        virtualinvoke locker.<berkeley.com.sleepycat.je.txn.BasicLocker: void operationEnd(boolean)>(operationOk#19);

        $r26 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r27 = <berkeley.com.sleepycat.je.dbi.StartupTracker$Phase: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase REMOVE_TEMP_DBS>;

        virtualinvoke $r26.<berkeley.com.sleepycat.je.dbi.StartupTracker: void stop(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>($r27);

        throw l9;

     label16:
        return;

        catch berkeley.com.sleepycat.je.dbi.DbTree$NeedRepLockerException from label04 to label05 with label06;
        catch berkeley.com.sleepycat.je.DatabaseNotFoundException from label04 to label05 with label07;
        catch java.lang.Error from label01 to label11 with label12;
        catch java.lang.Throwable from label01 to label11 with label14;
        catch java.lang.Throwable from label13 to label15 with label14;
    }

    private void deleteMapLNs()
    {
        berkeley.com.sleepycat.je.recovery.RecoveryManager this;
        java.util.Iterator l1;
        berkeley.com.sleepycat.je.dbi.DatabaseId id;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        java.util.Set $r0;
        boolean $z0;
        java.lang.Object $r1;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r2;
        berkeley.com.sleepycat.je.dbi.DbTree $r3;

        this := @this: berkeley.com.sleepycat.je.recovery.RecoveryManager;

        $r0 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.Set expectDeletedMapLNs>;

        l1 = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r1 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>();

        id = (berkeley.com.sleepycat.je.dbi.DatabaseId) $r1;

        $r2 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r3 = virtualinvoke $r2.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.DbTree getDbTree()>();

        dbImpl = virtualinvoke $r3.<berkeley.com.sleepycat.je.dbi.DbTree: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDb(berkeley.com.sleepycat.je.dbi.DatabaseId)>(id);

        if dbImpl != null goto label2;

        goto label1;

     label2:
        virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: void finishDeleteProcessing()>();

        goto label1;

     label3:
        return;
    }

    private void buildINs(boolean, berkeley.com.sleepycat.je.dbi.StartupTracker$Phase, berkeley.com.sleepycat.je.dbi.StartupTracker$Phase, berkeley.com.sleepycat.je.RecoveryProgress, berkeley.com.sleepycat.je.RecoveryProgress) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.recovery.RecoveryManager this;
        boolean mappingTree;
        berkeley.com.sleepycat.je.dbi.StartupTracker$Phase phaseA, phaseB;
        berkeley.com.sleepycat.je.RecoveryProgress progressA, progressB;
        berkeley.com.sleepycat.je.dbi.StartupTracker $r0, $r1, $r2, $r4, $r6, $r7, $r8, $r9, $r11;
        berkeley.com.sleepycat.je.dbi.StartupTracker$Counter $r3, $r5, $r10;

        this := @this: berkeley.com.sleepycat.je.recovery.RecoveryManager;

        mappingTree := @parameter0: boolean;

        phaseA := @parameter1: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase;

        phaseB := @parameter2: berkeley.com.sleepycat.je.dbi.StartupTracker$Phase;

        progressA := @parameter3: berkeley.com.sleepycat.je.RecoveryProgress;

        progressB := @parameter4: berkeley.com.sleepycat.je.RecoveryProgress;

        $r0 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.StartupTracker: void start(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>(phaseA);

        $r1 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.StartupTracker: void setProgress(berkeley.com.sleepycat.je.RecoveryProgress)>(progressA);

        if mappingTree == 0 goto label1;

        $r2 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r3 = virtualinvoke $r2.<berkeley.com.sleepycat.je.dbi.StartupTracker: berkeley.com.sleepycat.je.dbi.StartupTracker$Counter getCounter(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>(phaseA);

        specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: void readRootINsAndTrackIds(berkeley.com.sleepycat.je.dbi.StartupTracker$Counter)>($r3);

        goto label2;

     label1:
        $r4 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r5 = virtualinvoke $r4.<berkeley.com.sleepycat.je.dbi.StartupTracker: berkeley.com.sleepycat.je.dbi.StartupTracker$Counter getCounter(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>(phaseA);

        specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: void readRootINs(berkeley.com.sleepycat.je.dbi.StartupTracker$Counter)>($r5);

     label2:
        $r6 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        virtualinvoke $r6.<berkeley.com.sleepycat.je.dbi.StartupTracker: void stop(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>(phaseA);

        $r7 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        virtualinvoke $r7.<berkeley.com.sleepycat.je.dbi.StartupTracker: void start(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>(phaseB);

        $r8 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        virtualinvoke $r8.<berkeley.com.sleepycat.je.dbi.StartupTracker: void setProgress(berkeley.com.sleepycat.je.RecoveryProgress)>(progressB);

        $r9 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r10 = virtualinvoke $r9.<berkeley.com.sleepycat.je.dbi.StartupTracker: berkeley.com.sleepycat.je.dbi.StartupTracker$Counter getCounter(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>(phaseB);

        specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: void readNonRootINs(boolean,berkeley.com.sleepycat.je.dbi.StartupTracker$Counter)>(mappingTree, $r10);

        $r11 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        virtualinvoke $r11.<berkeley.com.sleepycat.je.dbi.StartupTracker: void stop(berkeley.com.sleepycat.je.dbi.StartupTracker$Phase)>(phaseB);

        return;
    }

    private void undoLNs(java.util.Set, boolean, berkeley.com.sleepycat.je.dbi.StartupTracker$Counter) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.recovery.RecoveryManager this;
        java.util.Set logTypes, $r14, $r16, $r18;
        boolean firstUndoPass, $z0, $z1, $z2, $z3, $z4, $z6, $z8, $z9, $z11, $z12, $z13;
        berkeley.com.sleepycat.je.dbi.StartupTracker$Counter counter;
        long firstActiveLsn, lastUsedLsn, endOfFileLsn, $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15;
        berkeley.com.sleepycat.je.log.LNFileReader reader, $r3;
        java.util.Iterator l11;
        berkeley.com.sleepycat.je.log.LogEntryType lt;
        berkeley.com.sleepycat.je.dbi.DbTree dbMapTree;
        berkeley.com.sleepycat.je.recovery.RollbackTracker$Scanner rollbackScanner;
        java.lang.Long txnId, $r15, $r17, $r19, $r22, $r23;
        java.lang.RuntimeException e, $r39;
        berkeley.com.sleepycat.je.recovery.RecoveryInfo $r0, $r1, $r2, $r5;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r4, $r7, $r31;
        int $i0;
        java.lang.Object $r6, $r13, $r26, $r29;
        berkeley.com.sleepycat.je.recovery.RollbackTracker $r8, $r9, $r20, $r25, $r28, $r38;
        berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker $r10;
        java.util.Map $r11, $r12, $r21;
        berkeley.com.sleepycat.je.txn.RollbackStart $r27;
        berkeley.com.sleepycat.je.txn.RollbackEnd $r30;
        java.lang.StringBuilder $r32, $r33, $r35;
        java.lang.String $r34, $r36;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r37;

        this := @this: berkeley.com.sleepycat.je.recovery.RecoveryManager;

        logTypes := @parameter0: java.util.Set;

        firstUndoPass := @parameter1: boolean;

        counter := @parameter2: berkeley.com.sleepycat.je.dbi.StartupTracker$Counter;

        $r0 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        firstActiveLsn = $r0.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long firstActiveLsn>;

        $r1 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        lastUsedLsn = $r1.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long lastUsedLsn>;

        $r2 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        endOfFileLsn = $r2.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long nextAvailableLsn>;

        $r3 = new berkeley.com.sleepycat.je.log.LNFileReader;

        $r4 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $i0 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: int readBufferSize>;

        $r5 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l1 = $r5.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long checkpointEndLsn>;

        specialinvoke $r3.<berkeley.com.sleepycat.je.log.LNFileReader: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,int,long,boolean,long,long,java.lang.Long,long)>($r4, $i0, lastUsedLsn, 0, endOfFileLsn, firstActiveLsn, null, $l1);

        reader = $r3;

        l11 = interfaceinvoke logTypes.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke l11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $r6 = interfaceinvoke l11.<java.util.Iterator: java.lang.Object next()>();

        lt = (berkeley.com.sleepycat.je.log.LogEntryType) $r6;

        virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: void addTargetType(berkeley.com.sleepycat.je.log.LogEntryType)>(lt);

        goto label01;

     label02:
        $r7 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        dbMapTree = virtualinvoke $r7.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.DbTree getDbTree()>();

        $r8 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RollbackTracker rollbackTracker>;

        virtualinvoke $r8.<berkeley.com.sleepycat.je.recovery.RollbackTracker: void setFirstPass(boolean)>(firstUndoPass);

        $r9 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RollbackTracker rollbackTracker>;

        rollbackScanner = virtualinvoke $r9.<berkeley.com.sleepycat.je.recovery.RollbackTracker: berkeley.com.sleepycat.je.recovery.RollbackTracker$Scanner getScanner()>();

     label03:
        $z1 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: boolean readNextEntry()>();

        if $z1 == 0 goto label15;

        virtualinvoke counter.<berkeley.com.sleepycat.je.dbi.StartupTracker$Counter: void incNumRead()>();

        $z2 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: boolean isLN()>();

        if $z2 == 0 goto label09;

        txnId = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: java.lang.Long getTxnId()>();

        if txnId != null goto label04;

        goto label03;

     label04:
        $l2 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: long getLastLsn()>();

        $l3 = virtualinvoke txnId.<java.lang.Long: long longValue()>();

        $z3 = virtualinvoke rollbackScanner.<berkeley.com.sleepycat.je.recovery.RollbackTracker$Scanner: boolean positionAndCheck(long,long)>($l2, $l3);

        if $z3 == 0 goto label05;

        $r10 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker tracker>;

        virtualinvoke rollbackScanner.<berkeley.com.sleepycat.je.recovery.RollbackTracker$Scanner: void rollback(java.lang.Long,berkeley.com.sleepycat.je.log.LNFileReader,berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker)>(txnId, reader, $r10);

        goto label03;

     label05:
        $r11 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.Map committedTxnIds>;

        $z4 = interfaceinvoke $r11.<java.util.Map: boolean containsKey(java.lang.Object)>(txnId);

        if $z4 == 0 goto label06;

        goto label03;

     label06:
        $r12 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.Map preparedTxns>;

        $r13 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(txnId);

        if $r13 == null goto label07;

        $r14 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.Set resurrectedLsns>;

        $l4 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: long getLastLsn()>();

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        interfaceinvoke $r14.<java.util.Set: boolean add(java.lang.Object)>($r15);

        goto label03;

     label07:
        $z6 = specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: boolean isReplicatedUncommittedLN(berkeley.com.sleepycat.je.log.LNFileReader,java.lang.Long)>(reader, txnId);

        if $z6 == 0 goto label08;

        $l5 = virtualinvoke txnId.<java.lang.Long: long longValue()>();

        specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: void createReplayTxn(long)>($l5);

        $r16 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.Set resurrectedLsns>;

        $l6 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: long getLastLsn()>();

        $r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

        interfaceinvoke $r16.<java.util.Set: boolean add(java.lang.Object)>($r17);

        goto label03;

     label08:
        specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: void undoUncommittedLN(berkeley.com.sleepycat.je.log.LNFileReader,berkeley.com.sleepycat.je.dbi.DbTree)>(reader, dbMapTree);

        virtualinvoke counter.<berkeley.com.sleepycat.je.dbi.StartupTracker$Counter: void incNumProcessed()>();

        goto label03;

     label09:
        $z8 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: boolean isPrepare()>();

        if $z8 == 0 goto label10;

        specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: void handlePrepare(berkeley.com.sleepycat.je.log.LNFileReader)>(reader);

        virtualinvoke counter.<berkeley.com.sleepycat.je.dbi.StartupTracker$Counter: void incNumAux()>();

        goto label03;

     label10:
        $z9 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: boolean isAbort()>();

        if $z9 == 0 goto label11;

        $r18 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.Set abortedTxnIds>;

        $l7 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: long getTxnAbortId()>();

        $r19 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l7);

        interfaceinvoke $r18.<java.util.Set: boolean add(java.lang.Object)>($r19);

        virtualinvoke counter.<berkeley.com.sleepycat.je.dbi.StartupTracker$Counter: void incNumAux()>();

        goto label03;

     label11:
        $z11 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: boolean isCommit()>();

        if $z11 == 0 goto label12;

        $r20 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RollbackTracker rollbackTracker>;

        $l8 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: long getLastLsn()>();

        $l9 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: long getTxnCommitId()>();

        virtualinvoke $r20.<berkeley.com.sleepycat.je.recovery.RollbackTracker: void checkCommit(long,long)>($l8, $l9);

        $r21 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.Map committedTxnIds>;

        $l10 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: long getTxnCommitId()>();

        $r22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l10);

        $l11 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: long getLastLsn()>();

        $r23 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l11);

        interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, $r23);

        virtualinvoke counter.<berkeley.com.sleepycat.je.dbi.StartupTracker$Counter: void incNumAux()>();

        goto label03;

     label12:
        $z12 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: boolean isRollbackStart()>();

        if $z12 == 0 goto label13;

        $r25 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RollbackTracker rollbackTracker>;

        $r26 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: java.lang.Object getMainItem()>();

        $r27 = (berkeley.com.sleepycat.je.txn.RollbackStart) $r26;

        $l12 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: long getLastLsn()>();

        virtualinvoke $r25.<berkeley.com.sleepycat.je.recovery.RollbackTracker: void register(berkeley.com.sleepycat.je.txn.RollbackStart,long)>($r27, $l12);

        virtualinvoke counter.<berkeley.com.sleepycat.je.dbi.StartupTracker$Counter: void incNumAux()>();

        goto label03;

     label13:
        $z13 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: boolean isRollbackEnd()>();

        if $z13 == 0 goto label14;

        $r28 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RollbackTracker rollbackTracker>;

        $r29 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: java.lang.Object getMainItem()>();

        $r30 = (berkeley.com.sleepycat.je.txn.RollbackEnd) $r29;

        $l13 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: long getLastLsn()>();

        virtualinvoke $r28.<berkeley.com.sleepycat.je.recovery.RollbackTracker: void register(berkeley.com.sleepycat.je.txn.RollbackEnd,long)>($r30, $l13);

        virtualinvoke counter.<berkeley.com.sleepycat.je.dbi.StartupTracker$Counter: void incNumAux()>();

        goto label03;

     label14:
        $r31 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LNreader should not have picked up type ");

        $r34 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: java.lang.String dumpCurrentHeader()>();

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        $r37 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String)>($r31, $r36);

        throw $r37;

     label15:
        $l14 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: long getNRepeatIteratorReads()>();

        virtualinvoke counter.<berkeley.com.sleepycat.je.dbi.StartupTracker$Counter: void setRepeatIteratorReads(long)>($l14);

        $r38 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RollbackTracker rollbackTracker>;

        virtualinvoke $r38.<berkeley.com.sleepycat.je.recovery.RollbackTracker: void singlePassSetInvisible()>();

     label16:
        goto label18;

     label17:
        $r39 := @caughtexception;

        e = $r39;

        $l15 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: long getLastLsn()>();

        specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: void traceAndThrowException(long,java.lang.String,java.lang.Exception)>($l15, "undoLNs", e);

     label18:
        return;

        catch java.lang.RuntimeException from label03 to label16 with label17;
    }

    private void redoLNs(java.util.Set, berkeley.com.sleepycat.je.dbi.StartupTracker$Counter) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.recovery.RecoveryManager this;
        java.util.Set lnTypes;
        berkeley.com.sleepycat.je.dbi.StartupTracker$Counter counter;
        long endOfFileLsn, firstActiveLsn, logrecLsn, $l1, $l3, $l4;
        berkeley.com.sleepycat.je.log.LNFileReader reader, $r2;
        java.util.Iterator l8;
        berkeley.com.sleepycat.je.log.LogEntryType lt;
        berkeley.com.sleepycat.je.dbi.DbTree dbMapTree;
        berkeley.com.sleepycat.je.tree.TreeLocation location, $r7;
        berkeley.com.sleepycat.je.recovery.RecoveryManager$RedoEligible eligible;
        berkeley.com.sleepycat.je.dbi.DatabaseId dbId;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;
        berkeley.com.sleepycat.je.log.entry.LNLogEntry logrec;
        java.lang.Throwable l16, $r10;
        java.lang.Exception e, $r11;
        berkeley.com.sleepycat.je.recovery.RecoveryInfo $r0, $r1, $r4;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r3, $r6, $r8;
        int $i0, $i2;
        boolean $z0, $z1, $z2;
        java.lang.Object $r5;
        berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker $r9;

        this := @this: berkeley.com.sleepycat.je.recovery.RecoveryManager;

        lnTypes := @parameter0: java.util.Set;

        counter := @parameter1: berkeley.com.sleepycat.je.dbi.StartupTracker$Counter;

        $r0 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        endOfFileLsn = $r0.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long nextAvailableLsn>;

        $r1 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        firstActiveLsn = $r1.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long firstActiveLsn>;

        $r2 = new berkeley.com.sleepycat.je.log.LNFileReader;

        $r3 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $i0 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: int readBufferSize>;

        $r4 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l1 = $r4.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long checkpointEndLsn>;

        specialinvoke $r2.<berkeley.com.sleepycat.je.log.LNFileReader: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,int,long,boolean,long,long,java.lang.Long,long)>($r3, $i0, firstActiveLsn, 1, -1L, endOfFileLsn, null, $l1);

        reader = $r2;

        l8 = interfaceinvoke lnTypes.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke l8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $r5 = interfaceinvoke l8.<java.util.Iterator: java.lang.Object next()>();

        lt = (berkeley.com.sleepycat.je.log.LogEntryType) $r5;

        virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: void addTargetType(berkeley.com.sleepycat.je.log.LogEntryType)>(lt);

        goto label01;

     label02:
        $r6 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        dbMapTree = virtualinvoke $r6.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.DbTree getDbTree()>();

        $r7 = new berkeley.com.sleepycat.je.tree.TreeLocation;

        specialinvoke $r7.<berkeley.com.sleepycat.je.tree.TreeLocation: void <init>()>();

        location = $r7;

     label03:
        $z1 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: boolean readNextEntry()>();

        if $z1 == 0 goto label11;

        virtualinvoke counter.<berkeley.com.sleepycat.je.dbi.StartupTracker$Counter: void incNumRead()>();

        eligible = specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryManager$RedoEligible eligibleForRedo(berkeley.com.sleepycat.je.log.LNFileReader)>(reader);

        $z2 = eligible.<berkeley.com.sleepycat.je.recovery.RecoveryManager$RedoEligible: boolean isEligible>;

        if $z2 != 0 goto label04;

        goto label03;

     label04:
        $r8 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r8.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void invokeEvictor()>();

        dbId = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: berkeley.com.sleepycat.je.dbi.DatabaseId getDatabaseId()>();

        db = virtualinvoke dbMapTree.<berkeley.com.sleepycat.je.dbi.DbTree: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDb(berkeley.com.sleepycat.je.dbi.DatabaseId)>(dbId);

        logrecLsn = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: long getLastLsn()>();

        if db != null goto label05;

        virtualinvoke counter.<berkeley.com.sleepycat.je.dbi.StartupTracker$Counter: void incNumDeleted()>();

        $r9 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker tracker>;

        $i2 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: int getLastEntrySize()>();

        virtualinvoke $r9.<berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker: boolean countObsoleteIfUncounted(long,long,berkeley.com.sleepycat.je.log.LogEntryType,int,berkeley.com.sleepycat.je.dbi.DatabaseId,boolean)>(logrecLsn, logrecLsn, null, $i2, dbId, 0);

        goto label03;

     label05:
        logrec = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: berkeley.com.sleepycat.je.log.entry.LNLogEntry getLNLogEntry()>();

        virtualinvoke logrec.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: void postFetchInit(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(db);

        virtualinvoke counter.<berkeley.com.sleepycat.je.dbi.StartupTracker$Counter: void incNumProcessed()>();

        specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: void redoOneLN(berkeley.com.sleepycat.je.log.LNFileReader,berkeley.com.sleepycat.je.log.entry.LNLogEntry,long,berkeley.com.sleepycat.je.dbi.DatabaseId,berkeley.com.sleepycat.je.dbi.DatabaseImpl,berkeley.com.sleepycat.je.recovery.RecoveryManager$RedoEligible,berkeley.com.sleepycat.je.tree.TreeLocation)>(reader, logrec, logrecLsn, dbId, db, eligible, location);

     label06:
        virtualinvoke dbMapTree.<berkeley.com.sleepycat.je.dbi.DbTree: void releaseDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(db);

        goto label10;

     label07:
        $r10 := @caughtexception;

     label08:
        l16 = $r10;

     label09:
        virtualinvoke dbMapTree.<berkeley.com.sleepycat.je.dbi.DbTree: void releaseDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(db);

        throw l16;

     label10:
        goto label03;

     label11:
        $l3 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: long getNRepeatIteratorReads()>();

        virtualinvoke counter.<berkeley.com.sleepycat.je.dbi.StartupTracker$Counter: void setRepeatIteratorReads(long)>($l3);

     label12:
        goto label14;

     label13:
        $r11 := @caughtexception;

        e = $r11;

        $l4 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: long getLastLsn()>();

        specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: void traceAndThrowException(long,java.lang.String,java.lang.Exception)>($l4, "redoLns", e);

     label14:
        return;

        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Exception from label03 to label12 with label13;
    }

    private void checkLogVersion8UpgradeViolations() throws berkeley.com.sleepycat.je.EnvironmentFailureException
    {
        berkeley.com.sleepycat.je.recovery.RecoveryManager this;
        java.util.Iterator l2;
        berkeley.com.sleepycat.je.dbi.DatabaseId dbId;
        berkeley.com.sleepycat.je.dbi.DbTree dbTree;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;
        java.lang.Throwable l6, $r3;
        boolean v8Deltas, v8DupNodes#2, $z0, $z1, $z2;
        java.lang.String illegalEntries, $r5, $r10, $r13;
        java.util.Set $r0;
        java.lang.Object $r1;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r2, $r9;
        java.util.concurrent.atomic.AtomicBoolean $r4;
        java.lang.StringBuilder $r6, $r7, $r8, $r11, $r12;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r14;

        this := @this: berkeley.com.sleepycat.je.recovery.RecoveryManager;

        v8DupNodes#2 = 0;

        $r0 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.Set logVersion8UpgradeDbs>;

        l2 = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r1 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        dbId = (berkeley.com.sleepycat.je.dbi.DatabaseId) $r1;

        $r2 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        dbTree = virtualinvoke $r2.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.DbTree getDbTree()>();

        db = virtualinvoke dbTree.<berkeley.com.sleepycat.je.dbi.DbTree: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDb(berkeley.com.sleepycat.je.dbi.DatabaseId)>(dbId);

     label02:
        if db != null goto label04;

     label03:
        virtualinvoke dbTree.<berkeley.com.sleepycat.je.dbi.DbTree: void releaseDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(db);

        goto label01;

     label04:
        $z1 = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean getSortedDuplicates()>();

        if $z1 == 0 goto label06;

        v8DupNodes#2 = 1;

     label05:
        virtualinvoke dbTree.<berkeley.com.sleepycat.je.dbi.DbTree: void releaseDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(db);

        goto label11;

     label06:
        virtualinvoke dbTree.<berkeley.com.sleepycat.je.dbi.DbTree: void releaseDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(db);

        goto label10;

     label07:
        $r3 := @caughtexception;

     label08:
        l6 = $r3;

     label09:
        virtualinvoke dbTree.<berkeley.com.sleepycat.je.dbi.DbTree: void releaseDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(db);

        throw l6;

     label10:
        goto label01;

     label11:
        $r4 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.concurrent.atomic.AtomicBoolean logVersion8UpgradeDeltas>;

        v8Deltas = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if v8DupNodes#2 != 0 goto label12;

        if v8Deltas == 0 goto label17;

     label12:
        if v8DupNodes#2 == 0 goto label13;

        $r5 = "JE 4.1 duplicate DB entries";

        goto label14;

     label13:
        $r5 = "JE 4.1 BINDeltas";

     label14:
        illegalEntries = $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(illegalEntries);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" were found in the recovery interval. Before upgrading to JE 5.0, the following utility must be run using JE 4.1 (4.1.20 or later): ");

        $r9 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $z2 = virtualinvoke $r9.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean isReplicated()>();

        if $z2 == 0 goto label15;

        $r10 = "DbRepPreUpgrade_4_1 ";

        goto label16;

     label15:
        $r10 = "DbPreUpgrade_4_1 ";

     label16:
        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". See the change log.");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>($r13);

        throw $r14;

     label17:
        return;

        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    private void buildINList() throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.recovery.RecoveryManager this;
        java.util.Iterator iter;
        berkeley.com.sleepycat.je.dbi.DatabaseId dbId, $r8;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;
        java.lang.Throwable l4, $r14;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0, $r2, $r4, $r9, $r12, $r15;
        berkeley.com.sleepycat.je.dbi.INList $r1;
        berkeley.com.sleepycat.je.evictor.Evictor $r3;
        berkeley.com.sleepycat.je.dbi.DbTree $r5, $r10, $r13, $r16;
        java.util.Set $r6;
        boolean $z0, $z1, $z2;
        java.lang.Object $r7;
        berkeley.com.sleepycat.je.tree.Tree $r11;

        this := @this: berkeley.com.sleepycat.je.recovery.RecoveryManager;

        $r0 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.INList getInMemoryINs()>();

        virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.INList: void enable()>();

        $r2 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r3 = virtualinvoke $r2.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.evictor.Evictor getEvictor()>();

        virtualinvoke $r3.<berkeley.com.sleepycat.je.evictor.Evictor: void setEnabled(boolean)>(1);

        $r4 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r5 = virtualinvoke $r4.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.DbTree getDbTree()>();

        virtualinvoke $r5.<berkeley.com.sleepycat.je.dbi.DbTree: void rebuildINListMapDb()>();

        $r6 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.Set inListBuildDbIds>;

        iter = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke iter.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r7 = interfaceinvoke iter.<java.util.Iterator: java.lang.Object next()>();

        dbId = (berkeley.com.sleepycat.je.dbi.DatabaseId) $r7;

        $r8 = <berkeley.com.sleepycat.je.dbi.DbTree: berkeley.com.sleepycat.je.dbi.DatabaseId ID_DB_ID>;

        $z1 = virtualinvoke dbId.<berkeley.com.sleepycat.je.dbi.DatabaseId: boolean equals(java.lang.Object)>($r8);

        if $z1 != 0 goto label7;

        $r9 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r10 = virtualinvoke $r9.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.DbTree getDbTree()>();

        db = virtualinvoke $r10.<berkeley.com.sleepycat.je.dbi.DbTree: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDb(berkeley.com.sleepycat.je.dbi.DatabaseId)>(dbId);

     label2:
        if db == null goto label3;

        $z2 = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isTemporary()>();

        if $z2 != 0 goto label3;

        $r11 = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.tree.Tree getTree()>();

        virtualinvoke $r11.<berkeley.com.sleepycat.je.tree.Tree: void rebuildINList()>();

     label3:
        $r12 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r13 = virtualinvoke $r12.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.DbTree getDbTree()>();

        virtualinvoke $r13.<berkeley.com.sleepycat.je.dbi.DbTree: void releaseDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(db);

        goto label7;

     label4:
        $r14 := @caughtexception;

     label5:
        l4 = $r14;

     label6:
        $r15 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r16 = virtualinvoke $r15.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.DbTree getDbTree()>();

        virtualinvoke $r16.<berkeley.com.sleepycat.je.dbi.DbTree: void releaseDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(db);

        throw l4;

     label7:
        goto label1;

     label8:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private berkeley.com.sleepycat.je.recovery.RecoveryManager$RedoEligible eligibleForRedo(berkeley.com.sleepycat.je.log.LNFileReader)
    {
        berkeley.com.sleepycat.je.recovery.RecoveryManager this;
        berkeley.com.sleepycat.je.log.LNFileReader reader;
        boolean afterCheckpointStart, $z0, $z1, $z2;
        java.lang.Long txnId, commitLongLsn;
        berkeley.com.sleepycat.je.txn.Txn preparedTxn, replayTxn;
        berkeley.com.sleepycat.je.recovery.RecoveryManager$RedoEligible $r0, $r1, $r9, $r10, $r11, $r14, $r15;
        berkeley.com.sleepycat.je.recovery.RecoveryInfo $r2, $r3, $r6;
        long $l0, $l2, $l3, $l5;
        byte $b1;
        int $i4;
        java.util.Map $r4, $r7, $r12;
        java.lang.Object $r5, $r8, $r13;

        this := @this: berkeley.com.sleepycat.je.recovery.RecoveryManager;

        reader := @parameter0: berkeley.com.sleepycat.je.log.LNFileReader;

        $z0 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: boolean isLN()>();

        if $z0 != 0 goto label1;

        $r0 = <berkeley.com.sleepycat.je.recovery.RecoveryManager$RedoEligible: berkeley.com.sleepycat.je.recovery.RecoveryManager$RedoEligible NOT>;

        return $r0;

     label1:
        $z1 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: boolean isInvisible()>();

        if $z1 == 0 goto label2;

        $r1 = <berkeley.com.sleepycat.je.recovery.RecoveryManager$RedoEligible: berkeley.com.sleepycat.je.recovery.RecoveryManager$RedoEligible NOT>;

        return $r1;

     label2:
        $r2 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l0 = $r2.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long checkpointStartLsn>;

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label3;

        $z2 = 1;

        goto label5;

     label3:
        $l2 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: long getLastLsn()>();

        $r3 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l3 = $r3.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long checkpointStartLsn>;

        $i4 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: int compareTo(long,long)>($l2, $l3);

        if $i4 < 0 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        afterCheckpointStart = $z2;

        txnId = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: java.lang.Long getTxnId()>();

        $r4 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.Map preparedTxns>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(txnId);

        preparedTxn = (berkeley.com.sleepycat.je.txn.Txn) $r5;

        $r6 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $r7 = $r6.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: java.util.Map replayTxns>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(txnId);

        replayTxn = (berkeley.com.sleepycat.je.txn.Txn) $r8;

        if preparedTxn == null goto label6;

        $r9 = new berkeley.com.sleepycat.je.recovery.RecoveryManager$RedoEligible;

        specialinvoke $r9.<berkeley.com.sleepycat.je.recovery.RecoveryManager$RedoEligible: void <init>(berkeley.com.sleepycat.je.txn.Txn)>(preparedTxn);

        return $r9;

     label6:
        if replayTxn == null goto label7;

        $r10 = new berkeley.com.sleepycat.je.recovery.RecoveryManager$RedoEligible;

        specialinvoke $r10.<berkeley.com.sleepycat.je.recovery.RecoveryManager$RedoEligible: void <init>(berkeley.com.sleepycat.je.txn.Txn)>(replayTxn);

        return $r10;

     label7:
        if afterCheckpointStart == 0 goto label9;

        if txnId != null goto label8;

        $r11 = <berkeley.com.sleepycat.je.recovery.RecoveryManager$RedoEligible: berkeley.com.sleepycat.je.recovery.RecoveryManager$RedoEligible ELIGIBLE_NON_TXNAL>;

        return $r11;

     label8:
        $r12 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.Map committedTxnIds>;

        $r13 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(txnId);

        commitLongLsn = (java.lang.Long) $r13;

        if commitLongLsn == null goto label9;

        $r14 = new berkeley.com.sleepycat.je.recovery.RecoveryManager$RedoEligible;

        $l5 = virtualinvoke commitLongLsn.<java.lang.Long: long longValue()>();

        specialinvoke $r14.<berkeley.com.sleepycat.je.recovery.RecoveryManager$RedoEligible: void <init>(long)>($l5);

        return $r14;

     label9:
        $r15 = <berkeley.com.sleepycat.je.recovery.RecoveryManager$RedoEligible: berkeley.com.sleepycat.je.recovery.RecoveryManager$RedoEligible NOT>;

        return $r15;
    }

    private void redoOneLN(berkeley.com.sleepycat.je.log.LNFileReader, berkeley.com.sleepycat.je.log.entry.LNLogEntry, long, berkeley.com.sleepycat.je.dbi.DatabaseId, berkeley.com.sleepycat.je.dbi.DatabaseImpl, berkeley.com.sleepycat.je.recovery.RecoveryManager$RedoEligible, berkeley.com.sleepycat.je.tree.TreeLocation) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.recovery.RecoveryManager this;
        berkeley.com.sleepycat.je.log.LNFileReader reader;
        berkeley.com.sleepycat.je.log.entry.LNLogEntry logrec;
        long logrecLsn, treeLsn, $l5;
        berkeley.com.sleepycat.je.dbi.DatabaseId dbId, truncateId, $r6, $r15;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db, $r3, $r5, $r7;
        berkeley.com.sleepycat.je.recovery.RecoveryManager$RedoEligible eligible;
        berkeley.com.sleepycat.je.tree.TreeLocation location;
        int logrecSize, $i0, $i1, $i3, $i4;
        berkeley.com.sleepycat.je.tree.LN ln, $r13;
        berkeley.com.sleepycat.je.log.entry.NameLNLogEntry nameLNEntry;
        berkeley.com.sleepycat.je.tree.NameLN nameLN;
        berkeley.com.sleepycat.je.txn.Txn $r0, $r1, $r9;
        java.util.Set $r2, $r4, $r14, $r17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, treeLsnIsImmediatelyObsolete#85, $z6, $z7, $z8, $z9;
        berkeley.com.sleepycat.je.tree.MapLN mapLN#33;
        berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker $r8;
        int[] $r10;
        berkeley.com.sleepycat.je.log.entry.DbOperationType $r11;
        java.lang.AssertionError $r12, $r16;
        byte $b2;

        this := @this: berkeley.com.sleepycat.je.recovery.RecoveryManager;

        reader := @parameter0: berkeley.com.sleepycat.je.log.LNFileReader;

        logrec := @parameter1: berkeley.com.sleepycat.je.log.entry.LNLogEntry;

        logrecLsn := @parameter2: long;

        dbId := @parameter3: berkeley.com.sleepycat.je.dbi.DatabaseId;

        db := @parameter4: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        eligible := @parameter5: berkeley.com.sleepycat.je.recovery.RecoveryManager$RedoEligible;

        location := @parameter6: berkeley.com.sleepycat.je.tree.TreeLocation;

        logrecSize = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: int getLastEntrySize()>();

        ln = virtualinvoke logrec.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: berkeley.com.sleepycat.je.tree.LN getLN()>();

        virtualinvoke ln.<berkeley.com.sleepycat.je.tree.LN: void postFetchInit(berkeley.com.sleepycat.je.dbi.DatabaseImpl,long)>(db, logrecLsn);

        $r0 = eligible.<berkeley.com.sleepycat.je.recovery.RecoveryManager$RedoEligible: berkeley.com.sleepycat.je.txn.Txn resurrectTxn>;

        if $r0 == null goto label01;

        $r1 = eligible.<berkeley.com.sleepycat.je.recovery.RecoveryManager$RedoEligible: berkeley.com.sleepycat.je.txn.Txn resurrectTxn>;

        specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: void relock(berkeley.com.sleepycat.je.txn.Txn,long,berkeley.com.sleepycat.je.log.entry.LNLogEntry,berkeley.com.sleepycat.je.dbi.DatabaseImpl)>($r1, logrecLsn, logrec, db);

     label01:
        treeLsn = specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: long redo(berkeley.com.sleepycat.je.dbi.DatabaseImpl,berkeley.com.sleepycat.je.tree.TreeLocation,berkeley.com.sleepycat.je.log.entry.LNLogEntry,long,int,berkeley.com.sleepycat.je.recovery.RecoveryManager$RedoEligible)>(db, location, logrec, logrecLsn, logrecSize, eligible);

        $r2 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.Set inListBuildDbIds>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(dbId);

        $z0 = ln instanceof berkeley.com.sleepycat.je.tree.MapLN;

        if $z0 == 0 goto label03;

        mapLN#33 = (berkeley.com.sleepycat.je.tree.MapLN) ln;

        $r3 = virtualinvoke mapLN#33.<berkeley.com.sleepycat.je.tree.MapLN: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        $z1 = virtualinvoke $r3.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isTemporary()>();

        if $z1 == 0 goto label02;

        $r4 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.Set tempDbIds>;

        $r5 = virtualinvoke mapLN#33.<berkeley.com.sleepycat.je.tree.MapLN: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        $r6 = virtualinvoke $r5.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.DatabaseId getId()>();

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r6);

     label02:
        $z2 = virtualinvoke mapLN#33.<berkeley.com.sleepycat.je.tree.MapLN: boolean isDeleted()>();

        if $z2 == 0 goto label03;

        $r7 = virtualinvoke mapLN#33.<berkeley.com.sleepycat.je.tree.MapLN: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        $r8 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker tracker>;

        virtualinvoke $r7.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: void countObsoleteDb(berkeley.com.sleepycat.je.cleaner.BaseUtilizationTracker,long)>($r8, logrecLsn);

     label03:
        $r9 = eligible.<berkeley.com.sleepycat.je.recovery.RecoveryManager$RedoEligible: berkeley.com.sleepycat.je.txn.Txn resurrectTxn>;

        if $r9 != null goto label08;

        nameLNEntry = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: berkeley.com.sleepycat.je.log.entry.NameLNLogEntry getNameLNLogEntry()>();

        if nameLNEntry == null goto label08;

        $r10 = <berkeley.com.sleepycat.je.recovery.RecoveryManager$1: int[] $SwitchMap$berkeley$com$sleepycat$je$log$entry$DbOperationType>;

        $r11 = virtualinvoke nameLNEntry.<berkeley.com.sleepycat.je.log.entry.NameLNLogEntry: berkeley.com.sleepycat.je.log.entry.DbOperationType getOperationType()>();

        $i0 = virtualinvoke $r11.<berkeley.com.sleepycat.je.log.entry.DbOperationType: int ordinal()>();

        $i1 = $r10[$i0];

        lookupswitch($i1)
        {
            case 1: goto label04;
            case 2: goto label06;
            default: goto label08;
        };

     label04:
        $z3 = <berkeley.com.sleepycat.je.recovery.RecoveryManager: boolean $assertionsDisabled>;

        if $z3 != 0 goto label05;

        $z4 = virtualinvoke nameLNEntry.<berkeley.com.sleepycat.je.log.entry.NameLNLogEntry: boolean isDeleted()>();

        if $z4 != 0 goto label05;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label05:
        $r13 = virtualinvoke nameLNEntry.<berkeley.com.sleepycat.je.log.entry.NameLNLogEntry: berkeley.com.sleepycat.je.tree.LN getLN()>();

        nameLN = (berkeley.com.sleepycat.je.tree.NameLN) $r13;

        $r14 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.Set expectDeletedMapLNs>;

        $r15 = virtualinvoke nameLN.<berkeley.com.sleepycat.je.tree.NameLN: berkeley.com.sleepycat.je.dbi.DatabaseId getId()>();

        interfaceinvoke $r14.<java.util.Set: boolean add(java.lang.Object)>($r15);

        goto label08;

     label06:
        truncateId = virtualinvoke nameLNEntry.<berkeley.com.sleepycat.je.log.entry.NameLNLogEntry: berkeley.com.sleepycat.je.dbi.DatabaseId getTruncateOldDbId()>();

        $z5 = <berkeley.com.sleepycat.je.recovery.RecoveryManager: boolean $assertionsDisabled>;

        if $z5 != 0 goto label07;

        if truncateId != null goto label07;

        $r16 = new java.lang.AssertionError;

        specialinvoke $r16.<java.lang.AssertionError: void <init>()>();

        throw $r16;

     label07:
        $r17 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.Set expectDeletedMapLNs>;

        interfaceinvoke $r17.<java.util.Set: boolean add(java.lang.Object)>(truncateId);

        goto label08;

     label08:
        treeLsnIsImmediatelyObsolete#85 = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isLNImmediatelyObsolete()>();

        if treeLsnIsImmediatelyObsolete#85 != 0 goto label12;

        $b2 = treeLsn cmp -1L;

        if $b2 == 0 goto label12;

        $z6 = location.<berkeley.com.sleepycat.je.tree.TreeLocation: boolean isEmbedded>;

        if $z6 != 0 goto label09;

        $z7 = location.<berkeley.com.sleepycat.je.tree.TreeLocation: boolean isKD>;

        if $z7 == 0 goto label10;

     label09:
        $z8 = 1;

        goto label11;

     label10:
        $z8 = 0;

     label11:
        treeLsnIsImmediatelyObsolete#85 = $z8;

     label12:
        $i3 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: int getLastEntrySize()>();

        $i4 = location.<berkeley.com.sleepycat.je.tree.TreeLocation: int childLoggedSize>;

        $l5 = eligible.<berkeley.com.sleepycat.je.recovery.RecoveryManager$RedoEligible: long commitLsn>;

        $z9 = virtualinvoke eligible.<berkeley.com.sleepycat.je.recovery.RecoveryManager$RedoEligible: boolean isCommitted()>();

        specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: void redoUtilizationInfo(berkeley.com.sleepycat.je.log.entry.LNLogEntry,int,long,long,boolean,int,long,boolean,berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(logrec, $i3, logrecLsn, treeLsn, treeLsnIsImmediatelyObsolete#85, $i4, $l5, $z9, db);

        return;
    }

    private void traceAndThrowException(long, java.lang.String, java.lang.Exception) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.recovery.RecoveryManager this;
        long badLsn;
        java.lang.String method, badLsnString, $r4, $r11;
        java.lang.Exception originalException;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0, $r6;
        java.lang.StringBuilder $r1, $r2, $r3, $r8, $r9, $r10;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r5;
        berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason $r7;

        this := @this: berkeley.com.sleepycat.je.recovery.RecoveryManager;

        badLsn := @parameter0: long;

        method := @parameter1: java.lang.String;

        originalException := @parameter2: java.lang.Exception;

        badLsnString = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(badLsn);

        $r0 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("last LSN = ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(badLsnString);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: void traceAndLogException(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r0, "RecoveryManager", method, $r4, originalException);

        $r5 = new berkeley.com.sleepycat.je.EnvironmentFailureException;

        $r6 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r7 = <berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason: berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason LOG_INTEGRITY>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("last LSN=");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(badLsnString);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<berkeley.com.sleepycat.je.EnvironmentFailureException: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason,java.lang.String,java.lang.Throwable)>($r6, $r7, $r11, originalException);

        throw $r5;
    }

    private void relock(berkeley.com.sleepycat.je.txn.Txn, long, berkeley.com.sleepycat.je.log.entry.LNLogEntry, berkeley.com.sleepycat.je.dbi.DatabaseImpl) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.recovery.RecoveryManager this;
        berkeley.com.sleepycat.je.txn.Txn txn;
        long logLsn, $l0, $l1, $l2, $l3, $l5, $l6;
        berkeley.com.sleepycat.je.log.entry.LNLogEntry logrec;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;
        berkeley.com.sleepycat.je.txn.LockResult result;
        berkeley.com.sleepycat.je.txn.WriteLockInfo wli;
        berkeley.com.sleepycat.je.txn.LockType $r0;
        berkeley.com.sleepycat.je.txn.LockGrantType $r1, $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r8, $r9, $r11, $r16, $r17, $r18, $r19, $r21, $r22, $r24;
        java.lang.String $r7, $r10, $r12, $r20, $r23, $r25;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r13, $r26;
        boolean $z0, $z1;
        byte[] $r14, $r15;
        int $i4;

        this := @this: berkeley.com.sleepycat.je.recovery.RecoveryManager;

        txn := @parameter0: berkeley.com.sleepycat.je.txn.Txn;

        logLsn := @parameter1: long;

        logrec := @parameter2: berkeley.com.sleepycat.je.log.entry.LNLogEntry;

        db := @parameter3: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        virtualinvoke txn.<berkeley.com.sleepycat.je.txn.Txn: void addLogInfo(long)>(logLsn);

        $r0 = <berkeley.com.sleepycat.je.txn.LockType: berkeley.com.sleepycat.je.txn.LockType WRITE>;

        result = virtualinvoke txn.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.txn.LockResult nonBlockingLock(long,berkeley.com.sleepycat.je.txn.LockType,boolean,berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(logLsn, $r0, 0, db);

        $r1 = virtualinvoke result.<berkeley.com.sleepycat.je.txn.LockResult: berkeley.com.sleepycat.je.txn.LockGrantType getLockGrant()>();

        $r2 = <berkeley.com.sleepycat.je.txn.LockGrantType: berkeley.com.sleepycat.je.txn.LockGrantType DENIED>;

        if $r1 != $r2 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resurrected lock denied txn=");

        $l0 = virtualinvoke txn.<berkeley.com.sleepycat.je.txn.Txn: long getId()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" logLsn=");

        $r7 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(logLsn);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" abortLsn=");

        $l1 = virtualinvoke logrec.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: long getAbortLsn()>();

        $r10 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>($l1);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>($r12);

        throw $r13;

     label1:
        $l2 = virtualinvoke logrec.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: long getAbortLsn()>();

        $z0 = virtualinvoke logrec.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: boolean getAbortKnownDeleted()>();

        $r14 = virtualinvoke logrec.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: byte[] getAbortKey()>();

        $r15 = virtualinvoke logrec.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: byte[] getAbortData()>();

        $l3 = virtualinvoke logrec.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: long getAbortVLSN()>();

        $i4 = virtualinvoke logrec.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: int getAbortExpiration()>();

        $z1 = virtualinvoke logrec.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: boolean isAbortExpirationInHours()>();

        virtualinvoke result.<berkeley.com.sleepycat.je.txn.LockResult: void setAbortInfo(long,boolean,byte[],byte[],long,int,boolean,berkeley.com.sleepycat.je.dbi.DatabaseImpl)>($l2, $z0, $r14, $r15, $l3, $i4, $z1, db);

        wli = virtualinvoke result.<berkeley.com.sleepycat.je.txn.LockResult: berkeley.com.sleepycat.je.txn.WriteLockInfo getWriteLockInfo()>();

        if wli != null goto label2;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resurrected lock has no write info txn=");

        $l5 = virtualinvoke txn.<berkeley.com.sleepycat.je.txn.Txn: long getId()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" logLsn=");

        $r20 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(logLsn);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" abortLsn=");

        $l6 = virtualinvoke logrec.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: long getAbortLsn()>();

        $r23 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>($l6);

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        $r26 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>($r25);

        throw $r26;

     label2:
        virtualinvoke wli.<berkeley.com.sleepycat.je.txn.WriteLockInfo: void setAbortLogSize(int)>(0);

        return;
    }

    private long redo(berkeley.com.sleepycat.je.dbi.DatabaseImpl, berkeley.com.sleepycat.je.tree.TreeLocation, berkeley.com.sleepycat.je.log.entry.LNLogEntry, long, int, berkeley.com.sleepycat.je.recovery.RecoveryManager$RedoEligible) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.recovery.RecoveryManager this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;
        berkeley.com.sleepycat.je.tree.TreeLocation location;
        berkeley.com.sleepycat.je.log.entry.LNLogEntry logrec;
        long logrecLsn, logrecVLSN, abortLsn, l29, l31, treeLsn#35, $l1, $l9, $l11;
        int logrecSize, expiration, lsnCmp, $i2, index#95, $i4, $i6, index#199, $i7, index#210, index#242, $i8, index#253, $i10, $i12;
        berkeley.com.sleepycat.je.recovery.RecoveryManager$RedoEligible eligible;
        berkeley.com.sleepycat.je.dbi.DbConfigManager configManager;
        berkeley.com.sleepycat.je.log.LogEntryType logrecType, $r2, $r3;
        berkeley.com.sleepycat.je.tree.LN logrecLN;
        boolean isDeletion, abortKD, expirationInHours, blindInsertions, found#2, foundNotKD#4, replaced#6, inserted#8, success#10, $z0, $z1, $z2, $z3, $z4, $z5, found#63, $z6, $z7, redoKD#109, redoPD#111, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20;
        byte[] logrecKey, logrecData;
        berkeley.com.sleepycat.je.tree.BIN bin, $r6, $r7, $r8, $r10, $r20, $r21, $r23, $r25, $r26, $r28;
        java.lang.Throwable l34, $r24;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0;
        berkeley.com.sleepycat.je.config.BooleanConfigParam $r1;
        byte $b0, $b3, $b5;
        berkeley.com.sleepycat.je.tree.Tree $r4;
        berkeley.com.sleepycat.je.CacheMode $r5;
        java.util.logging.Logger $r9, $r22, $r27;
        berkeley.com.sleepycat.je.txn.Txn $r11, $r17;
        java.lang.AssertionError $r12, $r13, $r14, $r15, $r16, $r18, $r19;

        this := @this: berkeley.com.sleepycat.je.recovery.RecoveryManager;

        db := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        location := @parameter1: berkeley.com.sleepycat.je.tree.TreeLocation;

        logrec := @parameter2: berkeley.com.sleepycat.je.log.entry.LNLogEntry;

        logrecLsn := @parameter3: long;

        logrecSize := @parameter4: int;

        eligible := @parameter5: berkeley.com.sleepycat.je.recovery.RecoveryManager$RedoEligible;

        found#2 = 0;

        foundNotKD#4 = 0;

        replaced#6 = 0;

        inserted#8 = 0;

        success#10 = 0;

        $r0 = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        configManager = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.DbConfigManager getConfigManager()>();

        logrecType = virtualinvoke logrec.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: berkeley.com.sleepycat.je.log.LogEntryType getLogType()>();

        logrecLN = virtualinvoke logrec.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: berkeley.com.sleepycat.je.tree.LN getLN()>();

        logrecVLSN = virtualinvoke logrecLN.<berkeley.com.sleepycat.je.tree.LN: long getVLSNSequence()>();

        isDeletion = virtualinvoke logrecLN.<berkeley.com.sleepycat.je.tree.LN: boolean isDeleted()>();

        logrecKey = virtualinvoke logrec.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: byte[] getKey()>();

        logrecData = virtualinvoke logrec.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: byte[] getEmbeddedData()>();

        abortLsn = virtualinvoke logrec.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: long getAbortLsn()>();

        abortKD = virtualinvoke logrec.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: boolean getAbortKnownDeleted()>();

        expiration = virtualinvoke logrec.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: int getExpiration()>();

        expirationInHours = virtualinvoke logrec.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: boolean isExpirationInHours()>();

        treeLsn#35 = -1L;

        $r1 = <berkeley.com.sleepycat.je.config.EnvironmentParams: berkeley.com.sleepycat.je.config.BooleanConfigParam BIN_DELTA_BLIND_OPS>;

        $z0 = virtualinvoke configManager.<berkeley.com.sleepycat.je.dbi.DbConfigManager: boolean getBoolean(berkeley.com.sleepycat.je.config.BooleanConfigParam)>($r1);

        if $z0 == 0 goto label03;

        $z1 = virtualinvoke eligible.<berkeley.com.sleepycat.je.recovery.RecoveryManager$RedoEligible: boolean isCommitted()>();

        if $z1 == 0 goto label03;

        $z2 = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isLNImmediatelyObsolete()>();

        if $z2 != 0 goto label02;

        $b0 = abortLsn cmp -1L;

        if $b0 == 0 goto label01;

        if abortKD == 0 goto label03;

     label01:
        $r2 = <berkeley.com.sleepycat.je.log.LogEntryType: berkeley.com.sleepycat.je.log.LogEntryType LOG_INS_LN_TRANSACTIONAL>;

        $z3 = virtualinvoke logrecType.<berkeley.com.sleepycat.je.log.LogEntryType: boolean equals(java.lang.Object)>($r2);

        if $z3 != 0 goto label02;

        $r3 = <berkeley.com.sleepycat.je.log.LogEntryType: berkeley.com.sleepycat.je.log.LogEntryType LOG_INS_LN>;

        $z4 = virtualinvoke logrecType.<berkeley.com.sleepycat.je.log.LogEntryType: boolean equals(java.lang.Object)>($r3);

        if $z4 == 0 goto label03;

     label02:
        $z5 = 1;

        goto label04;

     label03:
        $z5 = 0;

     label04:
        blindInsertions = $z5;

     label05:
        virtualinvoke location.<berkeley.com.sleepycat.je.tree.TreeLocation: void reset()>();

        $r4 = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.tree.Tree getTree()>();

        $r5 = <berkeley.com.sleepycat.je.CacheMode: berkeley.com.sleepycat.je.CacheMode DEFAULT>;

        found#63 = virtualinvoke $r4.<berkeley.com.sleepycat.je.tree.Tree: boolean getParentBINForChildLN(berkeley.com.sleepycat.je.tree.TreeLocation,byte[],boolean,boolean,berkeley.com.sleepycat.je.CacheMode)>(location, logrecKey, 1, blindInsertions, $r5);

        if found#63 != 0 goto label08;

        $r6 = location.<berkeley.com.sleepycat.je.tree.TreeLocation: berkeley.com.sleepycat.je.tree.BIN bin>;

        if $r6 != null goto label08;

        success#10 = 1;

        l29 = -1L;

     label06:
        $r7 = location.<berkeley.com.sleepycat.je.tree.TreeLocation: berkeley.com.sleepycat.je.tree.BIN bin>;

        if $r7 == null goto label07;

        $r8 = location.<berkeley.com.sleepycat.je.tree.TreeLocation: berkeley.com.sleepycat.je.tree.BIN bin>;

        virtualinvoke $r8.<berkeley.com.sleepycat.je.tree.BIN: void releaseLatch()>();

     label07:
        $r9 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.logging.Logger logger>;

        $r10 = location.<berkeley.com.sleepycat.je.tree.TreeLocation: berkeley.com.sleepycat.je.tree.BIN bin>;

        $l1 = location.<berkeley.com.sleepycat.je.tree.TreeLocation: long childLsn>;

        $i2 = location.<berkeley.com.sleepycat.je.tree.TreeLocation: int index>;

        staticinvoke <berkeley.com.sleepycat.je.recovery.RecoveryManager: void trace(java.util.logging.Logger,berkeley.com.sleepycat.je.dbi.DatabaseImpl,java.lang.String,boolean,berkeley.com.sleepycat.je.tree.Node,long,berkeley.com.sleepycat.je.tree.IN,boolean,boolean,boolean,long,long,int)>($r9, db, "LNRedo:", success#10, logrecLN, logrecLsn, $r10, foundNotKD#4, replaced#6, inserted#8, $l1, -1L, $i2);

        return l29;

     label08:
        bin = location.<berkeley.com.sleepycat.je.tree.TreeLocation: berkeley.com.sleepycat.je.tree.BIN bin>;

        index#95 = location.<berkeley.com.sleepycat.je.tree.TreeLocation: int index>;

        if found#63 == 0 goto label09;

        $z6 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: boolean isEntryKnownDeleted(int)>(index#95);

        if $z6 != 0 goto label09;

        $z7 = 1;

        goto label10;

     label09:
        $z7 = 0;

     label10:
        foundNotKD#4 = $z7;

        if foundNotKD#4 == 0 goto label18;

        treeLsn#35 = location.<berkeley.com.sleepycat.je.tree.TreeLocation: long childLsn>;

        lsnCmp = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: int compareTo(long,long)>(logrecLsn, treeLsn#35);

        if lsnCmp < 0 goto label17;

        redoKD#109 = 0;

        redoPD#111 = 0;

        if isDeletion == 0 goto label12;

        $r11 = eligible.<berkeley.com.sleepycat.je.recovery.RecoveryManager$RedoEligible: berkeley.com.sleepycat.je.txn.Txn resurrectTxn>;

        if $r11 == null goto label11;

        redoPD#111 = 1;

        goto label12;

     label11:
        redoKD#109 = 1;

     label12:
        if lsnCmp <= 0 goto label13;

        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void recoverRecord(int,long,boolean,boolean,byte[],byte[],long,int,int,boolean)>(index#95, logrecLsn, redoKD#109, redoPD#111, logrecKey, logrecData, logrecVLSN, logrecSize, expiration, expirationInHours);

        replaced#6 = 1;

        goto label16;

     label13:
        if isDeletion == 0 goto label16;

        if redoKD#109 == 0 goto label14;

        $z8 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: boolean isEntryKnownDeleted(int)>(index#95);

        if $z8 != 0 goto label16;

        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void setKnownDeleted(int)>(index#95);

        goto label16;

     label14:
        $z9 = <berkeley.com.sleepycat.je.recovery.RecoveryManager: boolean $assertionsDisabled>;

        if $z9 != 0 goto label15;

        $z10 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: boolean isEntryPendingDeleted(int)>(index#95);

        if $z10 != 0 goto label15;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label15:
        $z11 = <berkeley.com.sleepycat.je.recovery.RecoveryManager: boolean $assertionsDisabled>;

        if $z11 != 0 goto label16;

        $z12 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: boolean isEntryKnownDeleted(int)>(index#95);

        if $z12 == 0 goto label16;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label16:
        if isDeletion == 0 goto label17;

        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void queueSlotDeletion(int)>(index#95);

     label17:
        goto label28;

     label18:
        if found#63 == 0 goto label21;

        treeLsn#35 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: long getLsn(int)>(index#95);

        if isDeletion != 0 goto label20;

        $b3 = treeLsn#35 cmp -1L;

        if $b3 == 0 goto label19;

        $i4 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: int compareTo(long,long)>(logrecLsn, treeLsn#35);

        if $i4 <= 0 goto label28;

     label19:
        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void recoverRecord(int,long,boolean,boolean,byte[],byte[],long,int,int,boolean)>(index#95, logrecLsn, 0, 0, logrecKey, logrecData, logrecVLSN, logrecSize, expiration, expirationInHours);

        inserted#8 = 1;

        goto label28;

     label20:
        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void queueSlotDeletion(int)>(index#95);

        $z13 = <berkeley.com.sleepycat.je.recovery.RecoveryManager: boolean $assertionsDisabled>;

        if $z13 != 0 goto label28;

        $b5 = treeLsn#35 cmp -1L;

        if $b5 == 0 goto label28;

        $i6 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: int compareTo(long,long)>(logrecLsn, treeLsn#35);

        if $i6 <= 0 goto label28;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label21:
        $z14 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        if $z14 == 0 goto label26;

        $z15 = <berkeley.com.sleepycat.je.recovery.RecoveryManager: boolean $assertionsDisabled>;

        if $z15 != 0 goto label22;

        if blindInsertions != 0 goto label22;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label22:
        index#199 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: int insertEntry1(berkeley.com.sleepycat.je.tree.Node,byte[],byte[],long,boolean)>(null, logrecKey, logrecData, logrecLsn, 1);

        $z16 = <berkeley.com.sleepycat.je.recovery.RecoveryManager: boolean $assertionsDisabled>;

        if $z16 != 0 goto label23;

        $i7 = index#199 & 131072;

        if $i7 != 0 goto label23;

        $r16 = new java.lang.AssertionError;

        specialinvoke $r16.<java.lang.AssertionError: void <init>()>();

        throw $r16;

     label23:
        inserted#8 = 1;

        index#210 = index#199 & -131073;

        location.<berkeley.com.sleepycat.je.tree.TreeLocation: int index> = index#210;

        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void setLastLoggedSize(int,int)>(index#210, logrecSize);

        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void setExpiration(int,int,boolean)>(index#210, expiration, expirationInHours);

        $z17 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: boolean isEmbeddedLN(int)>(index#210);

        if $z17 == 0 goto label24;

        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void setCachedVLSN(int,long)>(index#210, logrecVLSN);

     label24:
        if isDeletion == 0 goto label28;

        $z18 = <berkeley.com.sleepycat.je.recovery.RecoveryManager: boolean $assertionsDisabled>;

        if $z18 != 0 goto label25;

        $r17 = eligible.<berkeley.com.sleepycat.je.recovery.RecoveryManager$RedoEligible: berkeley.com.sleepycat.je.txn.Txn resurrectTxn>;

        if $r17 == null goto label25;

        $r18 = new java.lang.AssertionError;

        specialinvoke $r18.<java.lang.AssertionError: void <init>()>();

        throw $r18;

     label25:
        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void setKnownDeleted(int)>(index#210);

        goto label28;

     label26:
        if isDeletion != 0 goto label28;

        index#242 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: int insertEntry1(berkeley.com.sleepycat.je.tree.Node,byte[],byte[],long,boolean)>(null, logrecKey, logrecData, logrecLsn, 0);

        $z19 = <berkeley.com.sleepycat.je.recovery.RecoveryManager: boolean $assertionsDisabled>;

        if $z19 != 0 goto label27;

        $i8 = index#242 & 131072;

        if $i8 != 0 goto label27;

        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();

        throw $r19;

     label27:
        inserted#8 = 1;

        index#253 = index#242 & -131073;

        location.<berkeley.com.sleepycat.je.tree.TreeLocation: int index> = index#253;

        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void setLastLoggedSize(int,int)>(index#253, logrecSize);

        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void setExpiration(int,int,boolean)>(index#253, expiration, expirationInHours);

        $z20 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: boolean isEmbeddedLN(int)>(index#253);

        if $z20 == 0 goto label28;

        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void setCachedVLSN(int,long)>(index#253, logrecVLSN);

     label28:
        virtualinvoke logrecLN.<berkeley.com.sleepycat.je.tree.LN: void releaseMemoryBudget()>();

        success#10 = 1;

        l31 = treeLsn#35;

     label29:
        $r20 = location.<berkeley.com.sleepycat.je.tree.TreeLocation: berkeley.com.sleepycat.je.tree.BIN bin>;

        if $r20 == null goto label30;

        $r21 = location.<berkeley.com.sleepycat.je.tree.TreeLocation: berkeley.com.sleepycat.je.tree.BIN bin>;

        virtualinvoke $r21.<berkeley.com.sleepycat.je.tree.BIN: void releaseLatch()>();

     label30:
        $r22 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.logging.Logger logger>;

        $r23 = location.<berkeley.com.sleepycat.je.tree.TreeLocation: berkeley.com.sleepycat.je.tree.BIN bin>;

        $l9 = location.<berkeley.com.sleepycat.je.tree.TreeLocation: long childLsn>;

        $i10 = location.<berkeley.com.sleepycat.je.tree.TreeLocation: int index>;

        staticinvoke <berkeley.com.sleepycat.je.recovery.RecoveryManager: void trace(java.util.logging.Logger,berkeley.com.sleepycat.je.dbi.DatabaseImpl,java.lang.String,boolean,berkeley.com.sleepycat.je.tree.Node,long,berkeley.com.sleepycat.je.tree.IN,boolean,boolean,boolean,long,long,int)>($r22, db, "LNRedo:", success#10, logrecLN, logrecLsn, $r23, foundNotKD#4, replaced#6, inserted#8, $l9, -1L, $i10);

        return l31;

     label31:
        $r24 := @caughtexception;

     label32:
        l34 = $r24;

     label33:
        $r25 = location.<berkeley.com.sleepycat.je.tree.TreeLocation: berkeley.com.sleepycat.je.tree.BIN bin>;

        if $r25 == null goto label34;

        $r26 = location.<berkeley.com.sleepycat.je.tree.TreeLocation: berkeley.com.sleepycat.je.tree.BIN bin>;

        virtualinvoke $r26.<berkeley.com.sleepycat.je.tree.BIN: void releaseLatch()>();

     label34:
        $r27 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.logging.Logger logger>;

        $r28 = location.<berkeley.com.sleepycat.je.tree.TreeLocation: berkeley.com.sleepycat.je.tree.BIN bin>;

        $l11 = location.<berkeley.com.sleepycat.je.tree.TreeLocation: long childLsn>;

        $i12 = location.<berkeley.com.sleepycat.je.tree.TreeLocation: int index>;

        staticinvoke <berkeley.com.sleepycat.je.recovery.RecoveryManager: void trace(java.util.logging.Logger,berkeley.com.sleepycat.je.dbi.DatabaseImpl,java.lang.String,boolean,berkeley.com.sleepycat.je.tree.Node,long,berkeley.com.sleepycat.je.tree.IN,boolean,boolean,boolean,long,long,int)>($r27, db, "LNRedo:", success#10, logrecLN, logrecLsn, $r28, foundNotKD#4, replaced#6, inserted#8, $l11, -1L, $i12);

        throw l34;

        catch java.lang.Throwable from label05 to label06 with label31;
        catch java.lang.Throwable from label08 to label29 with label31;
        catch java.lang.Throwable from label32 to label33 with label31;
    }

    private void redoUtilizationInfo(berkeley.com.sleepycat.je.log.entry.LNLogEntry, int, long, long, boolean, int, long, boolean, berkeley.com.sleepycat.je.dbi.DatabaseImpl)
    {
        berkeley.com.sleepycat.je.recovery.RecoveryManager this;
        berkeley.com.sleepycat.je.log.entry.LNLogEntry logrec;
        int logrecSize, treeLNLoggedSize, cmpLogLsnToTreeLsn, $i3, $i4, $i8, $i10;
        long logrecLsn, treeLsn, commitLsn, abortLsn, $l9;
        boolean treeLsnIsImmediatelyObsolete, isCommitted, abortKD, $z0, $z1, $z2, $z3, $z4;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;
        berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker $r0, $r2, $r6, $r10;
        berkeley.com.sleepycat.je.dbi.DatabaseId $r1, $r3, $r7, $r11;
        byte $b0, $b5, $b6, $b7;
        java.util.Set $r4;
        java.lang.Long $r5;
        byte[] $r8;
        berkeley.com.sleepycat.je.recovery.RecoveryInfo $r9;

        this := @this: berkeley.com.sleepycat.je.recovery.RecoveryManager;

        logrec := @parameter0: berkeley.com.sleepycat.je.log.entry.LNLogEntry;

        logrecSize := @parameter1: int;

        logrecLsn := @parameter2: long;

        treeLsn := @parameter3: long;

        treeLsnIsImmediatelyObsolete := @parameter4: boolean;

        treeLNLoggedSize := @parameter5: int;

        commitLsn := @parameter6: long;

        isCommitted := @parameter7: boolean;

        db := @parameter8: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        $z0 = virtualinvoke logrec.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: boolean isImmediatelyObsolete(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(db);

        if $z0 == 0 goto label1;

        $r0 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker tracker>;

        $r1 = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.DatabaseId getId()>();

        virtualinvoke $r0.<berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker: boolean countObsoleteIfUncounted(long,long,berkeley.com.sleepycat.je.log.LogEntryType,int,berkeley.com.sleepycat.je.dbi.DatabaseId,boolean)>(logrecLsn, logrecLsn, null, logrecSize, $r1, 0);

     label1:
        $z1 = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isLNImmediatelyObsolete()>();

        if $z1 == 0 goto label2;

        return;

     label2:
        $b0 = treeLsn cmp -1L;

        if $b0 == 0 goto label6;

        cmpLogLsnToTreeLsn = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: int compareTo(long,long)>(logrecLsn, treeLsn);

        if cmpLogLsnToTreeLsn >= 0 goto label5;

        $z2 = virtualinvoke logrec.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: boolean isImmediatelyObsolete(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(db);

        if $z2 != 0 goto label6;

        $r2 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker tracker>;

        $i3 = staticinvoke <berkeley.com.sleepycat.je.recovery.RecoveryManager: int fetchLNSize(berkeley.com.sleepycat.je.dbi.DatabaseImpl,int,long)>(db, logrecSize, logrecLsn);

        $r3 = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.DatabaseId getId()>();

        $r4 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.Set resurrectedLsns>;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(treeLsn);

        $z3 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>($r5);

        if $z3 != 0 goto label3;

        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        virtualinvoke $r2.<berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker: boolean countObsoleteIfUncounted(long,long,berkeley.com.sleepycat.je.log.LogEntryType,int,berkeley.com.sleepycat.je.dbi.DatabaseId,boolean)>(logrecLsn, treeLsn, null, $i3, $r3, $z4);

        goto label6;

     label5:
        if cmpLogLsnToTreeLsn <= 0 goto label6;

        if treeLsnIsImmediatelyObsolete != 0 goto label6;

        $r6 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker tracker>;

        $i4 = staticinvoke <berkeley.com.sleepycat.je.recovery.RecoveryManager: int fetchLNSize(berkeley.com.sleepycat.je.dbi.DatabaseImpl,int,long)>(db, treeLNLoggedSize, treeLsn);

        $r7 = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.DatabaseId getId()>();

        virtualinvoke $r6.<berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker: boolean countObsoleteIfUncounted(long,long,berkeley.com.sleepycat.je.log.LogEntryType,int,berkeley.com.sleepycat.je.dbi.DatabaseId,boolean)>(treeLsn, logrecLsn, null, $i4, $r7, isCommitted);

     label6:
        abortLsn = virtualinvoke logrec.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: long getAbortLsn()>();

        abortKD = virtualinvoke logrec.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: boolean getAbortKnownDeleted()>();

        $b5 = commitLsn cmp -1L;

        if $b5 == 0 goto label8;

        $b6 = abortLsn cmp -1L;

        if $b6 == 0 goto label8;

        if abortKD != 0 goto label8;

        $r8 = virtualinvoke logrec.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: byte[] getAbortData()>();

        if $r8 != null goto label8;

        $b7 = treeLsn cmp -1L;

        if $b7 == 0 goto label7;

        $i8 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: int compareTo(long,long)>(logrecLsn, treeLsn);

        if $i8 > 0 goto label8;

        $r9 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l9 = $r9.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long checkpointStartLsn>;

        $i10 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: int compareTo(long,long)>(abortLsn, $l9);

        if $i10 >= 0 goto label8;

     label7:
        $r10 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker tracker>;

        $r11 = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.DatabaseId getId()>();

        virtualinvoke $r10.<berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker: boolean countObsoleteIfUncounted(long,long,berkeley.com.sleepycat.je.log.LogEntryType,int,berkeley.com.sleepycat.je.dbi.DatabaseId,boolean)>(abortLsn, commitLsn, null, 0, $r11, 1);

     label8:
        return;
    }

    private static void trace(java.util.logging.Logger, berkeley.com.sleepycat.je.dbi.DatabaseImpl, java.lang.String, boolean, berkeley.com.sleepycat.je.tree.Node, long, berkeley.com.sleepycat.je.tree.IN, boolean, boolean, boolean, long, long, int)
    {
        java.util.logging.Logger logger;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl database;
        java.lang.String debugType;
        boolean success, found, replaced, inserted;
        berkeley.com.sleepycat.je.tree.Node node;
        long logLsn, replacedLsn, abortLsn;
        berkeley.com.sleepycat.je.tree.IN parent;
        int index;
        java.util.logging.Level $r0;

        logger := @parameter0: java.util.logging.Logger;

        database := @parameter1: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        debugType := @parameter2: java.lang.String;

        success := @parameter3: boolean;

        node := @parameter4: berkeley.com.sleepycat.je.tree.Node;

        logLsn := @parameter5: long;

        parent := @parameter6: berkeley.com.sleepycat.je.tree.IN;

        found := @parameter7: boolean;

        replaced := @parameter8: boolean;

        inserted := @parameter9: boolean;

        replacedLsn := @parameter10: long;

        abortLsn := @parameter11: long;

        index := @parameter12: int;

        $r0 = <java.util.logging.Level: java.util.logging.Level FINE>;

        staticinvoke <berkeley.com.sleepycat.je.recovery.RecoveryManager: void trace(java.util.logging.Logger,java.util.logging.Level,berkeley.com.sleepycat.je.dbi.DatabaseImpl,java.lang.String,boolean,berkeley.com.sleepycat.je.tree.Node,long,berkeley.com.sleepycat.je.tree.IN,boolean,boolean,boolean,long,long,int)>(logger, $r0, database, debugType, success, node, logLsn, parent, found, replaced, inserted, replacedLsn, abortLsn, index);

        return;
    }

    private static int fetchLNSize(berkeley.com.sleepycat.je.dbi.DatabaseImpl, int, long) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;
        int size, $i0;
        long lsn;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        berkeley.com.sleepycat.je.log.LogEntryHeader header;
        java.io.FileNotFoundException l5, $r3;
        berkeley.com.sleepycat.je.cleaner.Cleaner $r0;
        boolean $z0;
        berkeley.com.sleepycat.je.log.LogManager $r1;
        berkeley.com.sleepycat.je.log.WholeEntry $r2;

        db := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        size := @parameter1: int;

        lsn := @parameter2: long;

        if size == 0 goto label1;

        return size;

     label1:
        envImpl = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r0 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.cleaner.Cleaner getCleaner()>();

        $z0 = virtualinvoke $r0.<berkeley.com.sleepycat.je.cleaner.Cleaner: boolean getFetchObsoleteSize(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(db);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r1 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.log.LogManager getLogManager()>();

        $r2 = virtualinvoke $r1.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.WholeEntry getWholeLogEntry(long)>(lsn);

        header = virtualinvoke $r2.<berkeley.com.sleepycat.je.log.WholeEntry: berkeley.com.sleepycat.je.log.LogEntryHeader getHeader()>();

        $i0 = virtualinvoke header.<berkeley.com.sleepycat.je.log.LogEntryHeader: int getEntrySize()>();

     label3:
        return $i0;

     label4:
        $r3 := @caughtexception;

        l5 = $r3;

        return 0;

        catch java.io.FileNotFoundException from label2 to label3 with label4;
    }

    private static void trace(java.util.logging.Logger, java.util.logging.Level, berkeley.com.sleepycat.je.dbi.DatabaseImpl, java.lang.String, boolean, berkeley.com.sleepycat.je.tree.Node, long, berkeley.com.sleepycat.je.tree.IN, boolean, boolean, boolean, long, long, int)
    {
        java.util.logging.Logger logger;
        java.util.logging.Level level, useLevel#2, $r26;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl database;
        java.lang.String debugType, $r8, $r19, $r22, $r28, $r30;
        boolean success, found, replaced, inserted, $z0, $z1, $z2;
        berkeley.com.sleepycat.je.tree.Node node;
        long logLsn, replacedLsn, abortLsn, $l0, $l1;
        berkeley.com.sleepycat.je.tree.IN parent, $r5;
        int index;
        java.lang.StringBuilder sb, $r0, $r2, $r10, $r24;
        byte $b2, $b3;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r27, $r29;

        logger := @parameter0: java.util.logging.Logger;

        level := @parameter1: java.util.logging.Level;

        database := @parameter2: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        debugType := @parameter3: java.lang.String;

        success := @parameter4: boolean;

        node := @parameter5: berkeley.com.sleepycat.je.tree.Node;

        logLsn := @parameter6: long;

        parent := @parameter7: berkeley.com.sleepycat.je.tree.IN;

        found := @parameter8: boolean;

        replaced := @parameter9: boolean;

        inserted := @parameter10: boolean;

        replacedLsn := @parameter11: long;

        abortLsn := @parameter12: long;

        index := @parameter13: int;

        useLevel#2 = level;

        if success != 0 goto label1;

        useLevel#2 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

     label1:
        $z0 = virtualinvoke logger.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>(useLevel#2);

        if $z0 == 0 goto label7;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        sb = $r0;

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(debugType);

        $r2 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" success=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(success);

        $z1 = node instanceof berkeley.com.sleepycat.je.tree.IN;

        if $z1 == 0 goto label2;

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" node=");

        $r5 = (berkeley.com.sleepycat.je.tree.IN) node;

        $l0 = virtualinvoke $r5.<berkeley.com.sleepycat.je.tree.IN: long getNodeId()>();

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

     label2:
        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lsn=");

        $r8 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(logLsn);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        if parent == null goto label3;

        $r10 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" parent=");

        $l1 = virtualinvoke parent.<berkeley.com.sleepycat.je.tree.IN: long getNodeId()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

     label3:
        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" found=");

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(found);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" replaced=");

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(replaced);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" inserted=");

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(inserted);

        $b2 = replacedLsn cmp -1L;

        if $b2 == 0 goto label4;

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" replacedLsn=");

        $r19 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(replacedLsn);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

     label4:
        $b3 = abortLsn cmp -1L;

        if $b3 == 0 goto label5;

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" abortLsn=");

        $r22 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(abortLsn);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

     label5:
        $r24 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" index=");

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(index);

        $r26 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $z2 = virtualinvoke useLevel#2.<java.util.logging.Level: boolean equals(java.lang.Object)>($r26);

        if $z2 == 0 goto label6;

        $r27 = virtualinvoke database.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r28 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: void traceAndLog(java.util.logging.Logger,berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.util.logging.Level,java.lang.String)>(logger, $r27, useLevel#2, $r28);

        goto label7;

     label6:
        $r29 = virtualinvoke database.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r30 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: void logMsg(java.util.logging.Logger,berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.util.logging.Level,java.lang.String)>(logger, $r29, useLevel#2, $r30);

     label7:
        return;
    }

    private boolean isReplicatedUncommittedLN(berkeley.com.sleepycat.je.log.LNFileReader, java.lang.Long)
    {
        berkeley.com.sleepycat.je.recovery.RecoveryManager this;
        berkeley.com.sleepycat.je.log.LNFileReader reader;
        java.lang.Long txnId;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0;
        boolean $z0, $z1, $z2;
        java.util.Set $r1;

        this := @this: berkeley.com.sleepycat.je.recovery.RecoveryManager;

        reader := @parameter0: berkeley.com.sleepycat.je.log.LNFileReader;

        txnId := @parameter1: java.lang.Long;

        $r0 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $z0 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean isReplicated()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.Set abortedTxnIds>;

        $z1 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>(txnId);

        if $z1 == 0 goto label2;

        return 0;

     label2:
        $z2 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: boolean entryIsReplicated()>();

        if $z2 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    private void createReplayTxn(long) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.recovery.RecoveryManager this;
        long txnId;
        berkeley.com.sleepycat.je.recovery.RecoveryInfo $r0, $r4;
        java.util.Map $r1, $r5;
        java.lang.Long $r2, $r6;
        java.lang.Object $r3;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r7;
        berkeley.com.sleepycat.je.txn.Txn $r8;

        this := @this: berkeley.com.sleepycat.je.recovery.RecoveryManager;

        txnId := @parameter0: long;

        $r0 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $r1 = $r0.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: java.util.Map replayTxns>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(txnId);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        if $r3 != null goto label1;

        $r4 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $r5 = $r4.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: java.util.Map replayTxns>;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(txnId);

        $r7 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r8 = virtualinvoke $r7.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.txn.Txn createReplayTxn(long)>(txnId);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r8);

     label1:
        return;
    }

    private void undoUncommittedLN(berkeley.com.sleepycat.je.log.LNFileReader, berkeley.com.sleepycat.je.dbi.DbTree) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.recovery.RecoveryManager this;
        berkeley.com.sleepycat.je.log.LNFileReader reader;
        berkeley.com.sleepycat.je.dbi.DbTree dbMapTree;
        berkeley.com.sleepycat.je.dbi.DatabaseId dbId, $r6;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db, $r3, $r5;
        berkeley.com.sleepycat.je.log.entry.LNLogEntry lnEntry;
        berkeley.com.sleepycat.je.tree.LN ln;
        berkeley.com.sleepycat.je.tree.TreeLocation location, $r1;
        long logLsn;
        berkeley.com.sleepycat.je.tree.MapLN mapLN;
        java.lang.Throwable l11, $r7;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0;
        int $i0;
        java.util.Set $r2, $r4;
        boolean $z1, $z2;

        this := @this: berkeley.com.sleepycat.je.recovery.RecoveryManager;

        reader := @parameter0: berkeley.com.sleepycat.je.log.LNFileReader;

        dbMapTree := @parameter1: berkeley.com.sleepycat.je.dbi.DbTree;

        $r0 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void invokeEvictor()>();

        dbId = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: berkeley.com.sleepycat.je.dbi.DatabaseId getDatabaseId()>();

        db = virtualinvoke dbMapTree.<berkeley.com.sleepycat.je.dbi.DbTree: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDb(berkeley.com.sleepycat.je.dbi.DatabaseId)>(dbId);

        if db != null goto label1;

        return;

     label1:
        lnEntry = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: berkeley.com.sleepycat.je.log.entry.LNLogEntry getLNLogEntry()>();

        virtualinvoke lnEntry.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: void postFetchInit(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(db);

        ln = virtualinvoke lnEntry.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: berkeley.com.sleepycat.je.tree.LN getLN()>();

        $r1 = new berkeley.com.sleepycat.je.tree.TreeLocation;

        specialinvoke $r1.<berkeley.com.sleepycat.je.tree.TreeLocation: void <init>()>();

        location = $r1;

        logLsn = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: long getLastLsn()>();

     label2:
        virtualinvoke ln.<berkeley.com.sleepycat.je.tree.LN: void postFetchInit(berkeley.com.sleepycat.je.dbi.DatabaseImpl,long)>(db, logLsn);

        specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: void recoveryUndo(berkeley.com.sleepycat.je.tree.TreeLocation,berkeley.com.sleepycat.je.dbi.DatabaseImpl,berkeley.com.sleepycat.je.log.entry.LNLogEntry,long)>(location, db, lnEntry, logLsn);

        $i0 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: int getLastEntrySize()>();

        specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: void undoUtilizationInfo(berkeley.com.sleepycat.je.log.entry.LNLogEntry,berkeley.com.sleepycat.je.dbi.DatabaseImpl,long,int)>(lnEntry, db, logLsn, $i0);

        $r2 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.Set inListBuildDbIds>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(dbId);

        $z1 = ln instanceof berkeley.com.sleepycat.je.tree.MapLN;

        if $z1 == 0 goto label3;

        mapLN = (berkeley.com.sleepycat.je.tree.MapLN) ln;

        $r3 = virtualinvoke mapLN.<berkeley.com.sleepycat.je.tree.MapLN: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        $z2 = virtualinvoke $r3.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isTemporary()>();

        if $z2 == 0 goto label3;

        $r4 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.Set tempDbIds>;

        $r5 = virtualinvoke mapLN.<berkeley.com.sleepycat.je.tree.MapLN: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        $r6 = virtualinvoke $r5.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.DatabaseId getId()>();

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r6);

     label3:
        virtualinvoke dbMapTree.<berkeley.com.sleepycat.je.dbi.DbTree: void releaseDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(db);

        goto label7;

     label4:
        $r7 := @caughtexception;

     label5:
        l11 = $r7;

     label6:
        virtualinvoke dbMapTree.<berkeley.com.sleepycat.je.dbi.DbTree: void releaseDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(db);

        throw l11;

     label7:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void handlePrepare(berkeley.com.sleepycat.je.log.LNFileReader) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.recovery.RecoveryManager this;
        berkeley.com.sleepycat.je.log.LNFileReader reader;
        long prepareId, $l0;
        java.lang.Long prepareIdL;
        berkeley.com.sleepycat.je.TransactionConfig txnConf, $r2;
        berkeley.com.sleepycat.je.txn.PreparedTxn preparedTxn;
        java.util.Map $r0, $r4;
        boolean $z0, $z1;
        java.util.Set $r1;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r3, $r6, $r10;
        berkeley.com.sleepycat.je.txn.TxnManager $r7;
        javax.transaction.xa.Xid $r8, $r16;
        java.util.logging.Logger $r9;
        java.util.logging.Level $r11;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r17;
        java.lang.String $r18;

        this := @this: berkeley.com.sleepycat.je.recovery.RecoveryManager;

        reader := @parameter0: berkeley.com.sleepycat.je.log.LNFileReader;

        prepareId = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: long getTxnPrepareId()>();

        prepareIdL = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(prepareId);

        $r0 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.Map committedTxnIds>;

        $z0 = interfaceinvoke $r0.<java.util.Map: boolean containsKey(java.lang.Object)>(prepareIdL);

        if $z0 != 0 goto label1;

        $r1 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.Set abortedTxnIds>;

        $z1 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>(prepareIdL);

        if $z1 != 0 goto label1;

        $r2 = new berkeley.com.sleepycat.je.TransactionConfig;

        specialinvoke $r2.<berkeley.com.sleepycat.je.TransactionConfig: void <init>()>();

        txnConf = $r2;

        $r3 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        preparedTxn = staticinvoke <berkeley.com.sleepycat.je.txn.PreparedTxn: berkeley.com.sleepycat.je.txn.PreparedTxn createPreparedTxn(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.TransactionConfig,long)>($r3, txnConf, prepareId);

        virtualinvoke preparedTxn.<berkeley.com.sleepycat.je.txn.PreparedTxn: void setLockTimeout(long)>(0L);

        $r4 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.Map preparedTxns>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(prepareIdL, preparedTxn);

        virtualinvoke preparedTxn.<berkeley.com.sleepycat.je.txn.PreparedTxn: void setPrepared(boolean)>(1);

        $r6 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r7 = virtualinvoke $r6.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.txn.TxnManager getTxnManager()>();

        $r8 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: javax.transaction.xa.Xid getTxnPrepareXid()>();

        virtualinvoke $r7.<berkeley.com.sleepycat.je.txn.TxnManager: void registerXATxn(javax.transaction.xa.Xid,berkeley.com.sleepycat.je.txn.Txn,boolean)>($r8, preparedTxn, 1);

        $r9 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.logging.Logger logger>;

        $r10 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r11 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found unfinished prepare record: id: ");

        $l0 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: long getTxnPrepareId()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Xid: ");

        $r16 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.LNFileReader: javax.transaction.xa.Xid getTxnPrepareXid()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: void logMsg(java.util.logging.Logger,berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.util.logging.Level,java.lang.String)>($r9, $r10, $r11, $r18);

     label1:
        return;
    }

    private void recoveryUndo(berkeley.com.sleepycat.je.tree.TreeLocation, berkeley.com.sleepycat.je.dbi.DatabaseImpl, berkeley.com.sleepycat.je.log.entry.LNLogEntry, long)
    {
        berkeley.com.sleepycat.je.recovery.RecoveryManager this;
        berkeley.com.sleepycat.je.tree.TreeLocation location;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;
        berkeley.com.sleepycat.je.log.entry.LNLogEntry lnEntry;
        long logLsn, $l0, $l1;
        java.util.logging.Level $r0;
        java.util.logging.Logger $r1;
        boolean $z0, $z1;
        byte[] $r2, $r3;
        int $i2;

        this := @this: berkeley.com.sleepycat.je.recovery.RecoveryManager;

        location := @parameter0: berkeley.com.sleepycat.je.tree.TreeLocation;

        db := @parameter1: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        lnEntry := @parameter2: berkeley.com.sleepycat.je.log.entry.LNLogEntry;

        logLsn := @parameter3: long;

        $r1 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.logging.Logger logger>;

        $r0 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $l0 = virtualinvoke lnEntry.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: long getAbortLsn()>();

        $z0 = virtualinvoke lnEntry.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: boolean getAbortKnownDeleted()>();

        $r2 = virtualinvoke lnEntry.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: byte[] getAbortKey()>();

        $r3 = virtualinvoke lnEntry.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: byte[] getAbortData()>();

        $l1 = virtualinvoke lnEntry.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: long getAbortVLSN()>();

        $i2 = virtualinvoke lnEntry.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: int getAbortExpiration()>();

        $z1 = virtualinvoke lnEntry.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: boolean isAbortExpirationInHours()>();

        staticinvoke <berkeley.com.sleepycat.je.recovery.RecoveryManager: void undo(java.util.logging.Logger,java.util.logging.Level,berkeley.com.sleepycat.je.tree.TreeLocation,berkeley.com.sleepycat.je.dbi.DatabaseImpl,berkeley.com.sleepycat.je.log.entry.LNLogEntry,long,long,boolean,boolean,byte[],byte[],long,int,boolean)>($r1, $r0, location, db, lnEntry, logLsn, $l0, $z0, 0, $r2, $r3, $l1, $i2, $z1);

        return;
    }

    private void undoUtilizationInfo(berkeley.com.sleepycat.je.log.entry.LNLogEntry, berkeley.com.sleepycat.je.dbi.DatabaseImpl, long, int)
    {
        berkeley.com.sleepycat.je.recovery.RecoveryManager this;
        berkeley.com.sleepycat.je.log.entry.LNLogEntry logrec;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;
        long logrecLsn;
        int logrecSize;
        boolean $z0;
        berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker $r0, $r2;
        berkeley.com.sleepycat.je.dbi.DatabaseId $r1, $r3;

        this := @this: berkeley.com.sleepycat.je.recovery.RecoveryManager;

        logrec := @parameter0: berkeley.com.sleepycat.je.log.entry.LNLogEntry;

        db := @parameter1: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        logrecLsn := @parameter2: long;

        logrecSize := @parameter3: int;

        $z0 = virtualinvoke logrec.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: boolean isImmediatelyObsolete(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(db);

        if $z0 == 0 goto label1;

        $r0 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker tracker>;

        $r1 = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.DatabaseId getId()>();

        virtualinvoke $r0.<berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker: boolean countObsoleteIfUncounted(long,long,berkeley.com.sleepycat.je.log.LogEntryType,int,berkeley.com.sleepycat.je.dbi.DatabaseId,boolean)>(logrecLsn, logrecLsn, null, logrecSize, $r1, 0);

        goto label2;

     label1:
        $r2 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker tracker>;

        $r3 = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.DatabaseId getId()>();

        virtualinvoke $r2.<berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker: void countObsoleteUnconditional(long,berkeley.com.sleepycat.je.log.LogEntryType,int,berkeley.com.sleepycat.je.dbi.DatabaseId,boolean)>(logrecLsn, null, logrecSize, $r3, 1);

     label2:
        return;
    }

    private static void undo(java.util.logging.Logger, java.util.logging.Level, berkeley.com.sleepycat.je.tree.TreeLocation, berkeley.com.sleepycat.je.dbi.DatabaseImpl, berkeley.com.sleepycat.je.log.entry.LNLogEntry, long, long, boolean, boolean, byte[], byte[], long, int, boolean) throws berkeley.com.sleepycat.je.DatabaseException
    {
        java.util.logging.Logger logger;
        java.util.logging.Level traceLevel;
        berkeley.com.sleepycat.je.tree.TreeLocation location;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;
        berkeley.com.sleepycat.je.log.entry.LNLogEntry lnEntry;
        long logLsn, revertLsn, revertVLSN, slotLsn, $l1, $l5, $l7;
        boolean revertKD, revertPD, revertExpirationInHours, updateEntry, found#2, replaced#4, success#6, $z0, $z1, $z2, $z3, success#54, $z4, $z5, success#107;
        byte[] revertKey, revertData, $r1;
        int revertExpiration, slotIdx, $i2, $i3, revertLogrecSize#83, $i6, $i8;
        berkeley.com.sleepycat.je.tree.BIN bin, $r11, $r12, $r14, $r15, $r16, $r18, $r20, $r21, $r23;
        java.lang.Throwable l26, $r19;
        berkeley.com.sleepycat.je.tree.Tree $r0;
        berkeley.com.sleepycat.je.CacheMode $r2;
        byte $b0, $b4;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r9;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r10;
        berkeley.com.sleepycat.je.tree.LN $r13, $r17, $r22;

        logger := @parameter0: java.util.logging.Logger;

        traceLevel := @parameter1: java.util.logging.Level;

        location := @parameter2: berkeley.com.sleepycat.je.tree.TreeLocation;

        db := @parameter3: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        lnEntry := @parameter4: berkeley.com.sleepycat.je.log.entry.LNLogEntry;

        logLsn := @parameter5: long;

        revertLsn := @parameter6: long;

        revertKD := @parameter7: boolean;

        revertPD := @parameter8: boolean;

        revertKey := @parameter9: byte[];

        revertData := @parameter10: byte[];

        revertVLSN := @parameter11: long;

        revertExpiration := @parameter12: int;

        revertExpirationInHours := @parameter13: boolean;

        found#2 = 0;

        replaced#4 = 0;

        success#6 = 0;

     label01:
        virtualinvoke location.<berkeley.com.sleepycat.je.tree.TreeLocation: void reset()>();

        $r0 = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.tree.Tree getTree()>();

        $r1 = virtualinvoke lnEntry.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: byte[] getKey()>();

        $r2 = <berkeley.com.sleepycat.je.CacheMode: berkeley.com.sleepycat.je.CacheMode DEFAULT>;

        found#2 = virtualinvoke $r0.<berkeley.com.sleepycat.je.tree.Tree: boolean getParentBINForChildLN(berkeley.com.sleepycat.je.tree.TreeLocation,byte[],boolean,boolean,berkeley.com.sleepycat.je.CacheMode)>(location, $r1, 0, 0, $r2);

        if found#2 == 0 goto label09;

        bin = location.<berkeley.com.sleepycat.je.tree.TreeLocation: berkeley.com.sleepycat.je.tree.BIN bin>;

        slotIdx = location.<berkeley.com.sleepycat.je.tree.TreeLocation: int index>;

        slotLsn = location.<berkeley.com.sleepycat.je.tree.TreeLocation: long childLsn>;

        $b0 = slotLsn cmp -1L;

        if $b0 != 0 goto label05;

        $z0 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: boolean isEntryKnownDeleted(int)>(slotIdx);

        if $z0 != 0 goto label02;

        $z1 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: boolean isEntryPendingDeleted(int)>(slotIdx);

        if $z1 != 0 goto label02;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(location);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has a NULL_LSN but the slot is not empty. KD=");

        $z2 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: boolean isEntryKnownDeleted(int)>(slotIdx);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" PD=");

        $z3 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: boolean isEntryPendingDeleted(int)>(slotIdx);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>($r9);

        throw $r10;

     label02:
        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void queueSlotDeletion(int)>(slotIdx);

        success#54 = 1;

     label03:
        $r11 = location.<berkeley.com.sleepycat.je.tree.TreeLocation: berkeley.com.sleepycat.je.tree.BIN bin>;

        if $r11 == null goto label04;

        $r12 = location.<berkeley.com.sleepycat.je.tree.TreeLocation: berkeley.com.sleepycat.je.tree.BIN bin>;

        virtualinvoke $r12.<berkeley.com.sleepycat.je.tree.BIN: void releaseLatch()>();

     label04:
        $r13 = virtualinvoke lnEntry.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: berkeley.com.sleepycat.je.tree.LN getLN()>();

        $r14 = location.<berkeley.com.sleepycat.je.tree.TreeLocation: berkeley.com.sleepycat.je.tree.BIN bin>;

        $l1 = location.<berkeley.com.sleepycat.je.tree.TreeLocation: long childLsn>;

        $i2 = location.<berkeley.com.sleepycat.je.tree.TreeLocation: int index>;

        staticinvoke <berkeley.com.sleepycat.je.recovery.RecoveryManager: void trace(java.util.logging.Logger,java.util.logging.Level,berkeley.com.sleepycat.je.dbi.DatabaseImpl,java.lang.String,boolean,berkeley.com.sleepycat.je.tree.Node,long,berkeley.com.sleepycat.je.tree.IN,boolean,boolean,boolean,long,long,int)>(logger, traceLevel, db, "LNUndo", success#54, $r13, logLsn, $r14, found#2, replaced#4, 0, $l1, revertLsn, $i2);

        return;

     label05:
        $i3 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: int compareTo(long,long)>(logLsn, slotLsn);

        if $i3 != 0 goto label06;

        $z4 = 1;

        goto label07;

     label06:
        $z4 = 0;

     label07:
        updateEntry = $z4;

        if updateEntry == 0 goto label09;

        revertLogrecSize#83 = 0;

        $b4 = revertLsn cmp -1L;

        if $b4 == 0 goto label08;

        $z5 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: boolean isEmbeddedLN(int)>(slotIdx);

        if $z5 != 0 goto label08;

        if revertData != null goto label08;

        revertLogrecSize#83 = staticinvoke <berkeley.com.sleepycat.je.recovery.RecoveryManager: int fetchLNSize(berkeley.com.sleepycat.je.dbi.DatabaseImpl,int,long)>(db, 0, revertLsn);

     label08:
        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void recoverRecord(int,long,boolean,boolean,byte[],byte[],long,int,int,boolean)>(slotIdx, revertLsn, revertKD, revertPD, revertKey, revertData, revertVLSN, revertLogrecSize#83, revertExpiration, revertExpirationInHours);

        replaced#4 = 1;

     label09:
        success#107 = 1;

     label10:
        $r15 = location.<berkeley.com.sleepycat.je.tree.TreeLocation: berkeley.com.sleepycat.je.tree.BIN bin>;

        if $r15 == null goto label11;

        $r16 = location.<berkeley.com.sleepycat.je.tree.TreeLocation: berkeley.com.sleepycat.je.tree.BIN bin>;

        virtualinvoke $r16.<berkeley.com.sleepycat.je.tree.BIN: void releaseLatch()>();

     label11:
        $r17 = virtualinvoke lnEntry.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: berkeley.com.sleepycat.je.tree.LN getLN()>();

        $r18 = location.<berkeley.com.sleepycat.je.tree.TreeLocation: berkeley.com.sleepycat.je.tree.BIN bin>;

        $l5 = location.<berkeley.com.sleepycat.je.tree.TreeLocation: long childLsn>;

        $i6 = location.<berkeley.com.sleepycat.je.tree.TreeLocation: int index>;

        staticinvoke <berkeley.com.sleepycat.je.recovery.RecoveryManager: void trace(java.util.logging.Logger,java.util.logging.Level,berkeley.com.sleepycat.je.dbi.DatabaseImpl,java.lang.String,boolean,berkeley.com.sleepycat.je.tree.Node,long,berkeley.com.sleepycat.je.tree.IN,boolean,boolean,boolean,long,long,int)>(logger, traceLevel, db, "LNUndo", success#107, $r17, logLsn, $r18, found#2, replaced#4, 0, $l5, revertLsn, $i6);

        goto label16;

     label12:
        $r19 := @caughtexception;

     label13:
        l26 = $r19;

     label14:
        $r20 = location.<berkeley.com.sleepycat.je.tree.TreeLocation: berkeley.com.sleepycat.je.tree.BIN bin>;

        if $r20 == null goto label15;

        $r21 = location.<berkeley.com.sleepycat.je.tree.TreeLocation: berkeley.com.sleepycat.je.tree.BIN bin>;

        virtualinvoke $r21.<berkeley.com.sleepycat.je.tree.BIN: void releaseLatch()>();

     label15:
        $r22 = virtualinvoke lnEntry.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: berkeley.com.sleepycat.je.tree.LN getLN()>();

        $r23 = location.<berkeley.com.sleepycat.je.tree.TreeLocation: berkeley.com.sleepycat.je.tree.BIN bin>;

        $l7 = location.<berkeley.com.sleepycat.je.tree.TreeLocation: long childLsn>;

        $i8 = location.<berkeley.com.sleepycat.je.tree.TreeLocation: int index>;

        staticinvoke <berkeley.com.sleepycat.je.recovery.RecoveryManager: void trace(java.util.logging.Logger,java.util.logging.Level,berkeley.com.sleepycat.je.dbi.DatabaseImpl,java.lang.String,boolean,berkeley.com.sleepycat.je.tree.Node,long,berkeley.com.sleepycat.je.tree.IN,boolean,boolean,boolean,long,long,int)>(logger, traceLevel, db, "LNUndo", success#6, $r22, logLsn, $r23, found#2, replaced#4, 0, $l7, revertLsn, $i8);

        throw l26;

     label16:
        return;

        catch java.lang.Throwable from label01 to label03 with label12;
        catch java.lang.Throwable from label05 to label10 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    private void readRootINsAndTrackIds(berkeley.com.sleepycat.je.dbi.StartupTracker$Counter) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.recovery.RecoveryManager this;
        berkeley.com.sleepycat.je.dbi.StartupTracker$Counter counter;
        berkeley.com.sleepycat.je.log.INFileReader reader, $r0;
        berkeley.com.sleepycat.je.dbi.DbTree dbMapTree, $r41;
        berkeley.com.sleepycat.je.dbi.DatabaseId dbId, $r11;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;
        java.lang.Throwable l6, $r14;
        berkeley.com.sleepycat.je.recovery.CheckpointEnd ckptEnd, $r22;
        java.lang.Exception e, $r50;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r1, $r10, $r36, $r40, $r44;
        int $i0;
        berkeley.com.sleepycat.je.recovery.RecoveryInfo $r2, $r3, $r4, $r5, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r38, $r39, $r42, $r43, $r46, $r47, $r48;
        long $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l15, $l16, $l17, $l19, $l20, $l21, $l23, $l24, $l25, $l27, $l28, $l29, $l31, $l32, $l33, $l35, $l36, $l37, $l38, $l39, $l40, $l41, $l42;
        berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker $r6;
        java.util.Set $r7;
        java.util.concurrent.atomic.AtomicBoolean $r8;
        berkeley.com.sleepycat.je.log.LogEntryType $r9;
        boolean $z0, $z1, $z2, $z3;
        java.lang.AssertionError $r12;
        berkeley.com.sleepycat.je.tree.IN $r13;
        byte $b14, $b18, $b22, $b26, $b30, $b34;
        berkeley.com.sleepycat.je.dbi.NodeSequence $r37;
        berkeley.com.sleepycat.je.txn.TxnManager $r45;
        berkeley.com.sleepycat.je.recovery.VLSNRecoveryProxy $r49;

        this := @this: berkeley.com.sleepycat.je.recovery.RecoveryManager;

        counter := @parameter0: berkeley.com.sleepycat.je.dbi.StartupTracker$Counter;

        $r0 = new berkeley.com.sleepycat.je.log.INFileReader;

        $r1 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $i0 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: int readBufferSize>;

        $r2 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l1 = $r2.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long checkpointStartLsn>;

        $r3 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l2 = $r3.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long nextAvailableLsn>;

        $r4 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l3 = $r4.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long partialCheckpointStartLsn>;

        $r5 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l4 = $r5.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long checkpointEndLsn>;

        $r6 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker tracker>;

        $r7 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.Set logVersion8UpgradeDbs>;

        $r8 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.concurrent.atomic.AtomicBoolean logVersion8UpgradeDeltas>;

        specialinvoke $r0.<berkeley.com.sleepycat.je.log.INFileReader: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,int,long,long,boolean,long,long,berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker,java.util.Set,java.util.concurrent.atomic.AtomicBoolean)>($r1, $i0, $l1, $l2, 1, $l3, $l4, $r6, $r7, $r8);

        reader = $r0;

        $r9 = <berkeley.com.sleepycat.je.log.LogEntryType: berkeley.com.sleepycat.je.log.LogEntryType LOG_IN>;

        virtualinvoke reader.<berkeley.com.sleepycat.je.log.INFileReader: void addTargetType(berkeley.com.sleepycat.je.log.LogEntryType)>($r9);

        virtualinvoke reader.<berkeley.com.sleepycat.je.log.INFileReader: void setAlwaysValidateChecksum(boolean)>(1);

     label01:
        $r10 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        dbMapTree = virtualinvoke $r10.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.DbTree getDbTree()>();

     label02:
        $z0 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.INFileReader: boolean readNextEntry()>();

        if $z0 == 0 goto label12;

        virtualinvoke counter.<berkeley.com.sleepycat.je.dbi.StartupTracker$Counter: void incNumRead()>();

        dbId = virtualinvoke reader.<berkeley.com.sleepycat.je.log.INFileReader: berkeley.com.sleepycat.je.dbi.DatabaseId getDatabaseId()>();

        $r11 = <berkeley.com.sleepycat.je.dbi.DbTree: berkeley.com.sleepycat.je.dbi.DatabaseId ID_DB_ID>;

        $z1 = virtualinvoke dbId.<berkeley.com.sleepycat.je.dbi.DatabaseId: boolean equals(java.lang.Object)>($r11);

        if $z1 != 0 goto label03;

        goto label02;

     label03:
        db = virtualinvoke dbMapTree.<berkeley.com.sleepycat.je.dbi.DbTree: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDb(berkeley.com.sleepycat.je.dbi.DatabaseId)>(dbId);

        $z2 = <berkeley.com.sleepycat.je.recovery.RecoveryManager: boolean $assertionsDisabled>;

        if $z2 != 0 goto label04;

        if db != null goto label04;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label04:
        $r13 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.INFileReader: berkeley.com.sleepycat.je.tree.IN getIN(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(db);

        $z3 = virtualinvoke $r13.<berkeley.com.sleepycat.je.tree.IN: boolean isRoot()>();

        if $z3 != 0 goto label06;

     label05:
        virtualinvoke dbMapTree.<berkeley.com.sleepycat.je.dbi.DbTree: void releaseDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(db);

        goto label02;

     label06:
        specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: void replayOneIN(berkeley.com.sleepycat.je.log.INFileReader,berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(reader, db);

        virtualinvoke counter.<berkeley.com.sleepycat.je.dbi.StartupTracker$Counter: void incNumProcessed()>();

     label07:
        virtualinvoke dbMapTree.<berkeley.com.sleepycat.je.dbi.DbTree: void releaseDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(db);

        goto label11;

     label08:
        $r14 := @caughtexception;

     label09:
        l6 = $r14;

     label10:
        virtualinvoke dbMapTree.<berkeley.com.sleepycat.je.dbi.DbTree: void releaseDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(db);

        throw l6;

     label11:
        goto label02;

     label12:
        $l5 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.INFileReader: long getNRepeatIteratorReads()>();

        virtualinvoke counter.<berkeley.com.sleepycat.je.dbi.StartupTracker$Counter: void setRepeatIteratorReads(long)>($l5);

        $r15 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l6 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.INFileReader: long getMinReplicatedNodeId()>();

        $r15.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long useMinReplicatedNodeId> = $l6;

        $r16 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l7 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.INFileReader: long getMaxNodeId()>();

        $r16.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long useMaxNodeId> = $l7;

        $r17 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l8 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.INFileReader: long getMinReplicatedDbId()>();

        $r17.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long useMinReplicatedDbId> = $l8;

        $r18 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l9 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.INFileReader: long getMaxDbId()>();

        $r18.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long useMaxDbId> = $l9;

        $r19 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l10 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.INFileReader: long getMinReplicatedTxnId()>();

        $r19.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long useMinReplicatedTxnId> = $l10;

        $r20 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l11 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.INFileReader: long getMaxTxnId()>();

        $r20.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long useMaxTxnId> = $l11;

        $r21 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $r22 = $r21.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: berkeley.com.sleepycat.je.recovery.CheckpointEnd checkpointEnd>;

        if $r22 == null goto label18;

        $r23 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        ckptEnd = $r23.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: berkeley.com.sleepycat.je.recovery.CheckpointEnd checkpointEnd>;

        $r24 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l12 = $r24.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long useMinReplicatedNodeId>;

        $l13 = virtualinvoke ckptEnd.<berkeley.com.sleepycat.je.recovery.CheckpointEnd: long getLastReplicatedNodeId()>();

        $b14 = $l12 cmp $l13;

        if $b14 <= 0 goto label13;

        $r25 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l15 = virtualinvoke ckptEnd.<berkeley.com.sleepycat.je.recovery.CheckpointEnd: long getLastReplicatedNodeId()>();

        $r25.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long useMinReplicatedNodeId> = $l15;

     label13:
        $r26 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l16 = $r26.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long useMaxNodeId>;

        $l17 = virtualinvoke ckptEnd.<berkeley.com.sleepycat.je.recovery.CheckpointEnd: long getLastLocalNodeId()>();

        $b18 = $l16 cmp $l17;

        if $b18 >= 0 goto label14;

        $r27 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l19 = virtualinvoke ckptEnd.<berkeley.com.sleepycat.je.recovery.CheckpointEnd: long getLastLocalNodeId()>();

        $r27.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long useMaxNodeId> = $l19;

     label14:
        $r28 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l20 = $r28.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long useMinReplicatedDbId>;

        $l21 = virtualinvoke ckptEnd.<berkeley.com.sleepycat.je.recovery.CheckpointEnd: long getLastReplicatedDbId()>();

        $b22 = $l20 cmp $l21;

        if $b22 <= 0 goto label15;

        $r29 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l23 = virtualinvoke ckptEnd.<berkeley.com.sleepycat.je.recovery.CheckpointEnd: long getLastReplicatedDbId()>();

        $r29.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long useMinReplicatedDbId> = $l23;

     label15:
        $r30 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l24 = $r30.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long useMaxDbId>;

        $l25 = virtualinvoke ckptEnd.<berkeley.com.sleepycat.je.recovery.CheckpointEnd: long getLastLocalDbId()>();

        $b26 = $l24 cmp $l25;

        if $b26 >= 0 goto label16;

        $r31 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l27 = virtualinvoke ckptEnd.<berkeley.com.sleepycat.je.recovery.CheckpointEnd: long getLastLocalDbId()>();

        $r31.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long useMaxDbId> = $l27;

     label16:
        $r32 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l28 = $r32.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long useMinReplicatedTxnId>;

        $l29 = virtualinvoke ckptEnd.<berkeley.com.sleepycat.je.recovery.CheckpointEnd: long getLastReplicatedTxnId()>();

        $b30 = $l28 cmp $l29;

        if $b30 <= 0 goto label17;

        $r33 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l31 = virtualinvoke ckptEnd.<berkeley.com.sleepycat.je.recovery.CheckpointEnd: long getLastReplicatedTxnId()>();

        $r33.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long useMinReplicatedTxnId> = $l31;

     label17:
        $r34 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l32 = $r34.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long useMaxTxnId>;

        $l33 = virtualinvoke ckptEnd.<berkeley.com.sleepycat.je.recovery.CheckpointEnd: long getLastLocalTxnId()>();

        $b34 = $l32 cmp $l33;

        if $b34 >= 0 goto label18;

        $r35 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l35 = virtualinvoke ckptEnd.<berkeley.com.sleepycat.je.recovery.CheckpointEnd: long getLastLocalTxnId()>();

        $r35.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long useMaxTxnId> = $l35;

     label18:
        $r36 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r37 = virtualinvoke $r36.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.NodeSequence getNodeSequence()>();

        $r38 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l36 = $r38.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long useMinReplicatedNodeId>;

        $r39 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l37 = $r39.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long useMaxNodeId>;

        virtualinvoke $r37.<berkeley.com.sleepycat.je.dbi.NodeSequence: void setLastNodeId(long,long)>($l36, $l37);

        $r40 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r41 = virtualinvoke $r40.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.DbTree getDbTree()>();

        $r42 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l38 = $r42.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long useMinReplicatedDbId>;

        $r43 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l39 = $r43.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long useMaxDbId>;

        virtualinvoke $r41.<berkeley.com.sleepycat.je.dbi.DbTree: void setLastDbId(long,long)>($l38, $l39);

        $r44 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r45 = virtualinvoke $r44.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.txn.TxnManager getTxnManager()>();

        $r46 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l40 = $r46.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long useMinReplicatedTxnId>;

        $r47 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l41 = $r47.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long useMaxTxnId>;

        virtualinvoke $r45.<berkeley.com.sleepycat.je.txn.TxnManager: void setLastTxnId(long,long)>($l40, $l41);

        $r48 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $r49 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.INFileReader: berkeley.com.sleepycat.je.recovery.VLSNRecoveryProxy getVLSNProxy()>();

        $r48.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: berkeley.com.sleepycat.je.recovery.VLSNRecoveryProxy vlsnProxy> = $r49;

     label19:
        goto label21;

     label20:
        $r50 := @caughtexception;

        e = $r50;

        $l42 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.INFileReader: long getLastLsn()>();

        specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: void traceAndThrowException(long,java.lang.String,java.lang.Exception)>($l42, "readMapIns", e);

     label21:
        return;

        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Exception from label01 to label19 with label20;
    }

    private void readRootINs(berkeley.com.sleepycat.je.dbi.StartupTracker$Counter) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.recovery.RecoveryManager this;
        berkeley.com.sleepycat.je.dbi.StartupTracker$Counter counter;
        berkeley.com.sleepycat.je.log.INFileReader reader, $r0;
        berkeley.com.sleepycat.je.dbi.DbTree dbMapTree;
        berkeley.com.sleepycat.je.dbi.DatabaseId dbId, $r8;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;
        java.lang.Throwable l6, $r10;
        java.lang.Exception e, $r11;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r1, $r7;
        int $i0;
        berkeley.com.sleepycat.je.recovery.RecoveryInfo $r2, $r3, $r4, $r5;
        long $l1, $l2, $l3, $l4, $l5, $l6;
        berkeley.com.sleepycat.je.log.LogEntryType $r6;
        boolean $z0, $z1, $z2;
        berkeley.com.sleepycat.je.tree.IN $r9;

        this := @this: berkeley.com.sleepycat.je.recovery.RecoveryManager;

        counter := @parameter0: berkeley.com.sleepycat.je.dbi.StartupTracker$Counter;

        $r0 = new berkeley.com.sleepycat.je.log.INFileReader;

        $r1 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $i0 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: int readBufferSize>;

        $r2 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l1 = $r2.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long checkpointStartLsn>;

        $r3 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l2 = $r3.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long nextAvailableLsn>;

        $r4 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l3 = $r4.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long partialCheckpointStartLsn>;

        $r5 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l4 = $r5.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long checkpointEndLsn>;

        specialinvoke $r0.<berkeley.com.sleepycat.je.log.INFileReader: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,int,long,long,boolean,long,long,berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker)>($r1, $i0, $l1, $l2, 0, $l3, $l4, null);

        reader = $r0;

        $r6 = <berkeley.com.sleepycat.je.log.LogEntryType: berkeley.com.sleepycat.je.log.LogEntryType LOG_IN>;

        virtualinvoke reader.<berkeley.com.sleepycat.je.log.INFileReader: void addTargetType(berkeley.com.sleepycat.je.log.LogEntryType)>($r6);

     label01:
        $r7 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        dbMapTree = virtualinvoke $r7.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.DbTree getDbTree()>();

     label02:
        $z0 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.INFileReader: boolean readNextEntry()>();

        if $z0 == 0 goto label12;

        virtualinvoke counter.<berkeley.com.sleepycat.je.dbi.StartupTracker$Counter: void incNumRead()>();

        dbId = virtualinvoke reader.<berkeley.com.sleepycat.je.log.INFileReader: berkeley.com.sleepycat.je.dbi.DatabaseId getDatabaseId()>();

        $r8 = <berkeley.com.sleepycat.je.dbi.DbTree: berkeley.com.sleepycat.je.dbi.DatabaseId ID_DB_ID>;

        $z1 = virtualinvoke dbId.<berkeley.com.sleepycat.je.dbi.DatabaseId: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label03;

        goto label02;

     label03:
        db = virtualinvoke dbMapTree.<berkeley.com.sleepycat.je.dbi.DbTree: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDb(berkeley.com.sleepycat.je.dbi.DatabaseId)>(dbId);

        if db != null goto label04;

        virtualinvoke counter.<berkeley.com.sleepycat.je.dbi.StartupTracker$Counter: void incNumDeleted()>();

        goto label02;

     label04:
        $r9 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.INFileReader: berkeley.com.sleepycat.je.tree.IN getIN(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(db);

        $z2 = virtualinvoke $r9.<berkeley.com.sleepycat.je.tree.IN: boolean isRoot()>();

        if $z2 != 0 goto label06;

     label05:
        virtualinvoke dbMapTree.<berkeley.com.sleepycat.je.dbi.DbTree: void releaseDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(db);

        goto label02;

     label06:
        specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: void replayOneIN(berkeley.com.sleepycat.je.log.INFileReader,berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(reader, db);

        virtualinvoke counter.<berkeley.com.sleepycat.je.dbi.StartupTracker$Counter: void incNumProcessed()>();

     label07:
        virtualinvoke dbMapTree.<berkeley.com.sleepycat.je.dbi.DbTree: void releaseDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(db);

        goto label11;

     label08:
        $r10 := @caughtexception;

     label09:
        l6 = $r10;

     label10:
        virtualinvoke dbMapTree.<berkeley.com.sleepycat.je.dbi.DbTree: void releaseDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(db);

        throw l6;

     label11:
        goto label02;

     label12:
        $l5 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.INFileReader: long getNRepeatIteratorReads()>();

        virtualinvoke counter.<berkeley.com.sleepycat.je.dbi.StartupTracker$Counter: void setRepeatIteratorReads(long)>($l5);

     label13:
        goto label15;

     label14:
        $r11 := @caughtexception;

        e = $r11;

        $l6 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.INFileReader: long getLastLsn()>();

        specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: void traceAndThrowException(long,java.lang.String,java.lang.Exception)>($l6, "readNonMapIns", e);

     label15:
        return;

        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Exception from label01 to label13 with label14;
    }

    private void readNonRootINs(boolean, berkeley.com.sleepycat.je.dbi.StartupTracker$Counter) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.recovery.RecoveryManager this;
        boolean mappingTree, $z0, $z1, $z2;
        berkeley.com.sleepycat.je.dbi.StartupTracker$Counter counter;
        berkeley.com.sleepycat.je.log.INFileReader reader, $r0;
        berkeley.com.sleepycat.je.dbi.DbTree dbMapTree;
        berkeley.com.sleepycat.je.dbi.DatabaseId dbId, $r11;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;
        java.lang.Throwable l7, $r13;
        java.lang.Exception e, $r14;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r1, $r10;
        int $i0;
        berkeley.com.sleepycat.je.recovery.RecoveryInfo $r2, $r3, $r4, $r5;
        long $l1, $l2, $l3, $l4, $l5, $l6;
        berkeley.com.sleepycat.je.log.LogEntryType $r6, $r7, $r8, $r9;
        berkeley.com.sleepycat.je.tree.IN $r12;

        this := @this: berkeley.com.sleepycat.je.recovery.RecoveryManager;

        mappingTree := @parameter0: boolean;

        counter := @parameter1: berkeley.com.sleepycat.je.dbi.StartupTracker$Counter;

        $r0 = new berkeley.com.sleepycat.je.log.INFileReader;

        $r1 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $i0 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: int readBufferSize>;

        $r2 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l1 = $r2.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long checkpointStartLsn>;

        $r3 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l2 = $r3.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long nextAvailableLsn>;

        $r4 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l3 = $r4.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long partialCheckpointStartLsn>;

        $r5 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        $l4 = $r5.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: long checkpointEndLsn>;

        specialinvoke $r0.<berkeley.com.sleepycat.je.log.INFileReader: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,int,long,long,boolean,long,long,berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker)>($r1, $i0, $l1, $l2, 0, $l3, $l4, null);

        reader = $r0;

        $r6 = <berkeley.com.sleepycat.je.log.LogEntryType: berkeley.com.sleepycat.je.log.LogEntryType LOG_IN>;

        virtualinvoke reader.<berkeley.com.sleepycat.je.log.INFileReader: void addTargetType(berkeley.com.sleepycat.je.log.LogEntryType)>($r6);

        $r7 = <berkeley.com.sleepycat.je.log.LogEntryType: berkeley.com.sleepycat.je.log.LogEntryType LOG_BIN>;

        virtualinvoke reader.<berkeley.com.sleepycat.je.log.INFileReader: void addTargetType(berkeley.com.sleepycat.je.log.LogEntryType)>($r7);

        $r8 = <berkeley.com.sleepycat.je.log.LogEntryType: berkeley.com.sleepycat.je.log.LogEntryType LOG_BIN_DELTA>;

        virtualinvoke reader.<berkeley.com.sleepycat.je.log.INFileReader: void addTargetType(berkeley.com.sleepycat.je.log.LogEntryType)>($r8);

        $r9 = <berkeley.com.sleepycat.je.log.LogEntryType: berkeley.com.sleepycat.je.log.LogEntryType LOG_OLD_BIN_DELTA>;

        virtualinvoke reader.<berkeley.com.sleepycat.je.log.INFileReader: void addTargetType(berkeley.com.sleepycat.je.log.LogEntryType)>($r9);

     label01:
        $r10 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        dbMapTree = virtualinvoke $r10.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.DbTree getDbTree()>();

     label02:
        $z0 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.INFileReader: boolean readNextEntry()>();

        if $z0 == 0 goto label12;

        virtualinvoke counter.<berkeley.com.sleepycat.je.dbi.StartupTracker$Counter: void incNumRead()>();

        dbId = virtualinvoke reader.<berkeley.com.sleepycat.je.log.INFileReader: berkeley.com.sleepycat.je.dbi.DatabaseId getDatabaseId()>();

        $r11 = <berkeley.com.sleepycat.je.dbi.DbTree: berkeley.com.sleepycat.je.dbi.DatabaseId ID_DB_ID>;

        $z1 = virtualinvoke dbId.<berkeley.com.sleepycat.je.dbi.DatabaseId: boolean equals(java.lang.Object)>($r11);

        if mappingTree == $z1 goto label03;

        goto label02;

     label03:
        db = virtualinvoke dbMapTree.<berkeley.com.sleepycat.je.dbi.DbTree: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDb(berkeley.com.sleepycat.je.dbi.DatabaseId)>(dbId);

        if db != null goto label04;

        virtualinvoke counter.<berkeley.com.sleepycat.je.dbi.StartupTracker$Counter: void incNumDeleted()>();

        goto label02;

     label04:
        $r12 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.INFileReader: berkeley.com.sleepycat.je.tree.IN getIN(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(db);

        $z2 = virtualinvoke $r12.<berkeley.com.sleepycat.je.tree.IN: boolean isRoot()>();

        if $z2 == 0 goto label06;

     label05:
        virtualinvoke dbMapTree.<berkeley.com.sleepycat.je.dbi.DbTree: void releaseDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(db);

        goto label02;

     label06:
        specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: void replayOneIN(berkeley.com.sleepycat.je.log.INFileReader,berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(reader, db);

        virtualinvoke counter.<berkeley.com.sleepycat.je.dbi.StartupTracker$Counter: void incNumProcessed()>();

     label07:
        virtualinvoke dbMapTree.<berkeley.com.sleepycat.je.dbi.DbTree: void releaseDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(db);

        goto label11;

     label08:
        $r13 := @caughtexception;

     label09:
        l7 = $r13;

     label10:
        virtualinvoke dbMapTree.<berkeley.com.sleepycat.je.dbi.DbTree: void releaseDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(db);

        throw l7;

     label11:
        goto label02;

     label12:
        $l5 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.INFileReader: long getNRepeatIteratorReads()>();

        virtualinvoke counter.<berkeley.com.sleepycat.je.dbi.StartupTracker$Counter: void setRepeatIteratorReads(long)>($l5);

     label13:
        goto label15;

     label14:
        $r14 := @caughtexception;

        e = $r14;

        $l6 = virtualinvoke reader.<berkeley.com.sleepycat.je.log.INFileReader: long getLastLsn()>();

        specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: void traceAndThrowException(long,java.lang.String,java.lang.Exception)>($l6, "readNonMapIns", e);

     label15:
        return;

        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Exception from label01 to label13 with label14;
    }

    private void replayOneIN(berkeley.com.sleepycat.je.log.INFileReader, berkeley.com.sleepycat.je.dbi.DatabaseImpl) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.recovery.RecoveryManager this;
        berkeley.com.sleepycat.je.log.INFileReader reader;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;
        long logLsn;
        berkeley.com.sleepycat.je.tree.IN in;
        java.util.Set $r0;
        berkeley.com.sleepycat.je.dbi.DatabaseId $r1;

        this := @this: berkeley.com.sleepycat.je.recovery.RecoveryManager;

        reader := @parameter0: berkeley.com.sleepycat.je.log.INFileReader;

        db := @parameter1: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        logLsn = virtualinvoke reader.<berkeley.com.sleepycat.je.log.INFileReader: long getLastLsn()>();

        in = virtualinvoke reader.<berkeley.com.sleepycat.je.log.INFileReader: berkeley.com.sleepycat.je.tree.IN getIN(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(db);

        virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: void postRecoveryInit(berkeley.com.sleepycat.je.dbi.DatabaseImpl,long)>(db, logLsn);

        virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: void latch()>();

        specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: void recoverIN(berkeley.com.sleepycat.je.dbi.DatabaseImpl,berkeley.com.sleepycat.je.tree.IN,long)>(db, in, logLsn);

        $r0 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.Set inListBuildDbIds>;

        $r1 = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.DatabaseId getId()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r1);

        return;
    }

    private void recoverIN(berkeley.com.sleepycat.je.dbi.DatabaseImpl, berkeley.com.sleepycat.je.tree.IN, long) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.recovery.RecoveryManager this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;
        berkeley.com.sleepycat.je.tree.IN inFromLog;
        long logLsn, $l0, $l1;
        java.lang.String trace, $r3, $r7, $r13, $r17, $r23, $r25, $r29, $r33;
        java.lang.Throwable l8, $r26;
        java.util.ArrayList trackingList#2, $r0;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r6, $r11, $r12, $r14, $r15, $r16, $r21, $r22, $r24, $r27, $r28, $r30, $r31, $r32;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r8, e#32, $r18;
        java.lang.Exception $r9, e#35;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r10, $r19;
        berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason $r20;

        this := @this: berkeley.com.sleepycat.je.recovery.RecoveryManager;

        db := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        inFromLog := @parameter1: berkeley.com.sleepycat.je.tree.IN;

        logLsn := @parameter2: long;

        trackingList#2 = null;

     label01:
        $z0 = virtualinvoke inFromLog.<berkeley.com.sleepycat.je.tree.IN: boolean isRoot()>();

        if $z0 == 0 goto label02;

        specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: void recoverRootIN(berkeley.com.sleepycat.je.dbi.DatabaseImpl,berkeley.com.sleepycat.je.tree.IN,long)>(db, inFromLog, logLsn);

        goto label03;

     label02:
        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        trackingList#2 = $r0;

        specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: void recoverChildIN(berkeley.com.sleepycat.je.dbi.DatabaseImpl,berkeley.com.sleepycat.je.tree.IN,long,java.util.List)>(db, inFromLog, logLsn, trackingList#2);

     label03:
        $z1 = <berkeley.com.sleepycat.je.latch.LatchSupport: boolean TRACK_LATCHES>;

        if $z1 == 0 goto label10;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LSN = ");

        $r3 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String toString(long)>(logLsn);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" inFromLog = ");

        $l0 = virtualinvoke inFromLog.<berkeley.com.sleepycat.je.tree.IN: long getNodeId()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <berkeley.com.sleepycat.je.latch.LatchSupport: void expectBtreeLatchesHeld(int,java.lang.String)>(0, $r7);

        goto label10;

     label04:
        $r8 := @caughtexception;

     label05:
        e#32 = $r8;

        throw e#32;

     label06:
        $r9 := @caughtexception;

        e#35 = $r9;

        trace = specialinvoke this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.lang.String printTrackList(java.util.List)>(trackingList#2);

        $r10 = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lsnFromLog: ");

        $r13 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(logLsn);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(trace);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: void traceAndLogException(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r10, "RecoveryManager", "recoverIN", $r17, e#35);

        $r18 = new berkeley.com.sleepycat.je.EnvironmentFailureException;

        $r19 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r20 = <berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason: berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason LOG_INTEGRITY>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lsnFromLog=");

        $r23 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(logLsn);

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<berkeley.com.sleepycat.je.EnvironmentFailureException: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason,java.lang.String,java.lang.Throwable)>($r19, $r20, $r25, e#35);

        throw $r18;

     label07:
        $r26 := @caughtexception;

        l8 = $r26;

     label08:
        $z2 = <berkeley.com.sleepycat.je.latch.LatchSupport: boolean TRACK_LATCHES>;

        if $z2 == 0 goto label09;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LSN = ");

        $r29 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String toString(long)>(logLsn);

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" inFromLog = ");

        $l1 = virtualinvoke inFromLog.<berkeley.com.sleepycat.je.tree.IN: long getNodeId()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <berkeley.com.sleepycat.je.latch.LatchSupport: void expectBtreeLatchesHeld(int,java.lang.String)>(0, $r33);

     label09:
        throw l8;

     label10:
        return;

        catch berkeley.com.sleepycat.je.EnvironmentFailureException from label01 to label03 with label04;
        catch java.lang.Exception from label01 to label03 with label06;
        catch java.lang.Throwable from label01 to label03 with label07;
        catch java.lang.Throwable from label05 to label08 with label07;
    }

    private void recoverRootIN(berkeley.com.sleepycat.je.dbi.DatabaseImpl, berkeley.com.sleepycat.je.tree.IN, long) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.recovery.RecoveryManager this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;
        berkeley.com.sleepycat.je.tree.IN inFromLog;
        long lsn, $l0, $l1;
        berkeley.com.sleepycat.je.tree.Tree tree;
        berkeley.com.sleepycat.je.recovery.RecoveryManager$RootUpdater rootUpdater, $r0;
        java.lang.Exception e, $r3;
        java.lang.Throwable l9, $r12;
        boolean success#2, $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.logging.Logger $r2, $r13;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r4;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r5;
        berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason $r6;
        java.lang.StringBuilder $r7, $r8, $r10;
        java.lang.String $r9, $r11;

        this := @this: berkeley.com.sleepycat.je.recovery.RecoveryManager;

        db := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        inFromLog := @parameter1: berkeley.com.sleepycat.je.tree.IN;

        lsn := @parameter2: long;

        success#2 = 1;

        tree = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.tree.Tree getTree()>();

        $r0 = new berkeley.com.sleepycat.je.recovery.RecoveryManager$RootUpdater;

        specialinvoke $r0.<berkeley.com.sleepycat.je.recovery.RecoveryManager$RootUpdater: void <init>(berkeley.com.sleepycat.je.tree.Tree,berkeley.com.sleepycat.je.tree.IN,long)>(tree, inFromLog, lsn);

        rootUpdater = $r0;

     label1:
        virtualinvoke tree.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.IN withRootLatchedExclusive(berkeley.com.sleepycat.je.tree.WithRootLatched)>(rootUpdater);

        $z0 = virtualinvoke rootUpdater.<berkeley.com.sleepycat.je.recovery.RecoveryManager$RootUpdater: boolean updateDone()>();

        if $z0 == 0 goto label2;

        virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: void setDirty()>();

     label2:
        $z1 = virtualinvoke rootUpdater.<berkeley.com.sleepycat.je.recovery.RecoveryManager$RootUpdater: boolean getInFromLogIsLatched()>();

        if $z1 == 0 goto label3;

        virtualinvoke inFromLog.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label3:
        $r2 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.logging.Logger logger>;

        $z2 = virtualinvoke rootUpdater.<berkeley.com.sleepycat.je.recovery.RecoveryManager$RootUpdater: boolean getReplaced()>();

        $z3 = virtualinvoke rootUpdater.<berkeley.com.sleepycat.je.recovery.RecoveryManager$RootUpdater: boolean getInserted()>();

        $l0 = virtualinvoke rootUpdater.<berkeley.com.sleepycat.je.recovery.RecoveryManager$RootUpdater: long getOriginalLsn()>();

        staticinvoke <berkeley.com.sleepycat.je.recovery.RecoveryManager: void trace(java.util.logging.Logger,berkeley.com.sleepycat.je.dbi.DatabaseImpl,java.lang.String,boolean,berkeley.com.sleepycat.je.tree.Node,long,berkeley.com.sleepycat.je.tree.IN,boolean,boolean,boolean,long,long,int)>($r2, db, "RootRecover:", success#2, inFromLog, lsn, null, 1, $z2, $z3, $l0, -1L, -1);

        goto label9;

     label4:
        $r3 := @caughtexception;

     label5:
        e = $r3;

        success#2 = 0;

        $r4 = new berkeley.com.sleepycat.je.EnvironmentFailureException;

        $r5 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r6 = <berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason: berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason LOG_INTEGRITY>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lsnFromLog=");

        $r9 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(lsn);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<berkeley.com.sleepycat.je.EnvironmentFailureException: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason,java.lang.String,java.lang.Throwable)>($r5, $r6, $r11, e);

        throw $r4;

     label6:
        $r12 := @caughtexception;

        l9 = $r12;

     label7:
        $z4 = virtualinvoke rootUpdater.<berkeley.com.sleepycat.je.recovery.RecoveryManager$RootUpdater: boolean getInFromLogIsLatched()>();

        if $z4 == 0 goto label8;

        virtualinvoke inFromLog.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label8:
        $r13 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.logging.Logger logger>;

        $z5 = virtualinvoke rootUpdater.<berkeley.com.sleepycat.je.recovery.RecoveryManager$RootUpdater: boolean getReplaced()>();

        $z6 = virtualinvoke rootUpdater.<berkeley.com.sleepycat.je.recovery.RecoveryManager$RootUpdater: boolean getInserted()>();

        $l1 = virtualinvoke rootUpdater.<berkeley.com.sleepycat.je.recovery.RecoveryManager$RootUpdater: long getOriginalLsn()>();

        staticinvoke <berkeley.com.sleepycat.je.recovery.RecoveryManager: void trace(java.util.logging.Logger,berkeley.com.sleepycat.je.dbi.DatabaseImpl,java.lang.String,boolean,berkeley.com.sleepycat.je.tree.Node,long,berkeley.com.sleepycat.je.tree.IN,boolean,boolean,boolean,long,long,int)>($r13, db, "RootRecover:", success#2, inFromLog, lsn, null, 1, $z5, $z6, $l1, -1L, -1);

        throw l9;

     label9:
        return;

        catch java.lang.Exception from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label5 to label7 with label6;
    }

    private void recoverChildIN(berkeley.com.sleepycat.je.dbi.DatabaseImpl, berkeley.com.sleepycat.je.tree.IN, long, java.util.List) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.recovery.RecoveryManager this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;
        berkeley.com.sleepycat.je.tree.IN inFromLog, parent, $r3, $r4, $r5, $r7, $r11, $r13, $r14, $r16, $r18, $r19, $r21;
        long logLsn, targetNodeId, treeLsn#5, $l3, $l5;
        java.util.List trackingList;
        boolean inserted, replaced#3, finished#7, finished#33, $z0, $z1, $z2, $z3, $z4, finished#97, $z5, $z6;
        byte[] targetKey;
        int exclusiveLevel, idx, $i0, $i1, $i2, $i7, $i8, $i9;
        java.lang.Throwable l18, $r17;
        berkeley.com.sleepycat.je.tree.SearchResult $r0, result#10;
        berkeley.com.sleepycat.je.tree.Tree $r1;
        berkeley.com.sleepycat.je.CacheMode $r2;
        java.util.logging.Logger $r6, $r15, $r20;
        java.lang.AssertionError $r8, $r9, $r12;
        berkeley.com.sleepycat.je.tree.Node $r10;
        byte $b4, $b6;

        this := @this: berkeley.com.sleepycat.je.recovery.RecoveryManager;

        db := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        inFromLog := @parameter1: berkeley.com.sleepycat.je.tree.IN;

        logLsn := @parameter2: long;

        trackingList := @parameter3: java.util.List;

        inserted = 0;

        replaced#3 = 0;

        treeLsn#5 = -1L;

        finished#7 = 0;

        $r0 = new berkeley.com.sleepycat.je.tree.SearchResult;

        specialinvoke $r0.<berkeley.com.sleepycat.je.tree.SearchResult: void <init>()>();

        result#10 = $r0;

     label01:
        targetNodeId = virtualinvoke inFromLog.<berkeley.com.sleepycat.je.tree.IN: long getNodeId()>();

        targetKey = virtualinvoke inFromLog.<berkeley.com.sleepycat.je.tree.IN: byte[] getIdentifierKey()>();

        $i0 = virtualinvoke inFromLog.<berkeley.com.sleepycat.je.tree.IN: int getLevel()>();

        exclusiveLevel = $i0 + 1;

        virtualinvoke inFromLog.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        $r1 = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.tree.Tree getTree()>();

        $r2 = <berkeley.com.sleepycat.je.CacheMode: berkeley.com.sleepycat.je.CacheMode UNCHANGED>;

        result#10 = virtualinvoke $r1.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.SearchResult getParentINForChildIN(long,byte[],int,int,boolean,boolean,berkeley.com.sleepycat.je.CacheMode,java.util.List)>(targetNodeId, targetKey, -1, exclusiveLevel, 1, 1, $r2, trackingList);

        $r3 = result#10.<berkeley.com.sleepycat.je.tree.SearchResult: berkeley.com.sleepycat.je.tree.IN parent>;

        if $r3 != null goto label04;

        finished#33 = 1;

     label02:
        $r4 = result#10.<berkeley.com.sleepycat.je.tree.SearchResult: berkeley.com.sleepycat.je.tree.IN parent>;

        if $r4 == null goto label03;

        $r5 = result#10.<berkeley.com.sleepycat.je.tree.SearchResult: berkeley.com.sleepycat.je.tree.IN parent>;

        virtualinvoke $r5.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label03:
        $r6 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.logging.Logger logger>;

        $r7 = result#10.<berkeley.com.sleepycat.je.tree.SearchResult: berkeley.com.sleepycat.je.tree.IN parent>;

        $z0 = result#10.<berkeley.com.sleepycat.je.tree.SearchResult: boolean exactParentFound>;

        $i1 = result#10.<berkeley.com.sleepycat.je.tree.SearchResult: int index>;

        staticinvoke <berkeley.com.sleepycat.je.recovery.RecoveryManager: void trace(java.util.logging.Logger,berkeley.com.sleepycat.je.dbi.DatabaseImpl,java.lang.String,boolean,berkeley.com.sleepycat.je.tree.Node,long,berkeley.com.sleepycat.je.tree.IN,boolean,boolean,boolean,long,long,int)>($r6, db, "INRecover:", finished#33, inFromLog, logLsn, $r7, $z0, replaced#3, inserted, treeLsn#5, -1L, $i1);

        return;

     label04:
        parent = result#10.<berkeley.com.sleepycat.je.tree.SearchResult: berkeley.com.sleepycat.je.tree.IN parent>;

        idx = result#10.<berkeley.com.sleepycat.je.tree.SearchResult: int index>;

        $z1 = <berkeley.com.sleepycat.je.recovery.RecoveryManager: boolean $assertionsDisabled>;

        if $z1 != 0 goto label05;

        $z2 = result#10.<berkeley.com.sleepycat.je.tree.SearchResult: boolean exactParentFound>;

        if $z2 != 0 goto label05;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label05:
        $z3 = <berkeley.com.sleepycat.je.recovery.RecoveryManager: boolean $assertionsDisabled>;

        if $z3 != 0 goto label06;

        $i2 = result#10.<berkeley.com.sleepycat.je.tree.SearchResult: int index>;

        if $i2 >= 0 goto label06;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label06:
        $z4 = <berkeley.com.sleepycat.je.recovery.RecoveryManager: boolean $assertionsDisabled>;

        if $z4 != 0 goto label07;

        $r10 = virtualinvoke parent.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.Node getTarget(int)>(idx);

        $r11 = (berkeley.com.sleepycat.je.tree.IN) $r10;

        $l3 = virtualinvoke $r11.<berkeley.com.sleepycat.je.tree.IN: long getNodeId()>();

        $b4 = targetNodeId cmp $l3;

        if $b4 == 0 goto label07;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label07:
        $l5 = virtualinvoke parent.<berkeley.com.sleepycat.je.tree.IN: long getLsn(int)>(idx);

        $b6 = $l5 cmp logLsn;

        if $b6 != 0 goto label08;

        goto label09;

     label08:
        treeLsn#5 = virtualinvoke parent.<berkeley.com.sleepycat.je.tree.IN: long getLsn(int)>(idx);

        $i7 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: int compareTo(long,long)>(treeLsn#5, logLsn);

        if $i7 >= 0 goto label09;

        virtualinvoke parent.<berkeley.com.sleepycat.je.tree.IN: void recoverIN(int,berkeley.com.sleepycat.je.tree.Node,long,int)>(idx, inFromLog, logLsn, 0);

        replaced#3 = 1;

     label09:
        finished#97 = 1;

     label10:
        $r13 = result#10.<berkeley.com.sleepycat.je.tree.SearchResult: berkeley.com.sleepycat.je.tree.IN parent>;

        if $r13 == null goto label11;

        $r14 = result#10.<berkeley.com.sleepycat.je.tree.SearchResult: berkeley.com.sleepycat.je.tree.IN parent>;

        virtualinvoke $r14.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label11:
        $r15 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.logging.Logger logger>;

        $r16 = result#10.<berkeley.com.sleepycat.je.tree.SearchResult: berkeley.com.sleepycat.je.tree.IN parent>;

        $z5 = result#10.<berkeley.com.sleepycat.je.tree.SearchResult: boolean exactParentFound>;

        $i8 = result#10.<berkeley.com.sleepycat.je.tree.SearchResult: int index>;

        staticinvoke <berkeley.com.sleepycat.je.recovery.RecoveryManager: void trace(java.util.logging.Logger,berkeley.com.sleepycat.je.dbi.DatabaseImpl,java.lang.String,boolean,berkeley.com.sleepycat.je.tree.Node,long,berkeley.com.sleepycat.je.tree.IN,boolean,boolean,boolean,long,long,int)>($r15, db, "INRecover:", finished#97, inFromLog, logLsn, $r16, $z5, replaced#3, inserted, treeLsn#5, -1L, $i8);

        goto label16;

     label12:
        $r17 := @caughtexception;

     label13:
        l18 = $r17;

     label14:
        $r18 = result#10.<berkeley.com.sleepycat.je.tree.SearchResult: berkeley.com.sleepycat.je.tree.IN parent>;

        if $r18 == null goto label15;

        $r19 = result#10.<berkeley.com.sleepycat.je.tree.SearchResult: berkeley.com.sleepycat.je.tree.IN parent>;

        virtualinvoke $r19.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label15:
        $r20 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.logging.Logger logger>;

        $r21 = result#10.<berkeley.com.sleepycat.je.tree.SearchResult: berkeley.com.sleepycat.je.tree.IN parent>;

        $z6 = result#10.<berkeley.com.sleepycat.je.tree.SearchResult: boolean exactParentFound>;

        $i9 = result#10.<berkeley.com.sleepycat.je.tree.SearchResult: int index>;

        staticinvoke <berkeley.com.sleepycat.je.recovery.RecoveryManager: void trace(java.util.logging.Logger,berkeley.com.sleepycat.je.dbi.DatabaseImpl,java.lang.String,boolean,berkeley.com.sleepycat.je.tree.Node,long,berkeley.com.sleepycat.je.tree.IN,boolean,boolean,boolean,long,long,int)>($r20, db, "INRecover:", finished#7, inFromLog, logLsn, $r21, $z6, replaced#3, inserted, treeLsn#5, -1L, $i9);

        throw l18;

     label16:
        return;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label04 to label10 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    private java.lang.String printTrackList(java.util.List)
    {
        berkeley.com.sleepycat.je.recovery.RecoveryManager this;
        java.util.List trackingList;
        java.lang.StringBuilder sb, $r0;
        java.util.Iterator iter;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.String $r6;

        this := @this: berkeley.com.sleepycat.je.recovery.RecoveryManager;

        trackingList := @parameter0: java.util.List;

        if trackingList == null goto label3;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        sb = $r0;

        iter = interfaceinvoke trackingList.<java.util.List: java.util.Iterator iterator()>();

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trace list:");

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

     label1:
        $z0 = interfaceinvoke iter.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke iter.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        goto label1;

     label2:
        $r6 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;

     label3:
        return null;
    }

    public void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.recovery.RecoveryManager this;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl env, $r12, $r16;
        berkeley.com.sleepycat.je.dbi.DbConfigManager cm;
        berkeley.com.sleepycat.je.config.IntConfigParam $r0;
        int $i0;
        java.util.HashMap $r1, $r3;
        java.util.HashSet $r2, $r4, $r5, $r6, $r7, $r14;
        berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker $r8;
        java.lang.Class $r9;
        java.util.logging.Logger $r10;
        berkeley.com.sleepycat.je.recovery.RollbackTracker $r11;
        berkeley.com.sleepycat.je.recovery.RecoveryInfo $r13, $r19;
        java.util.concurrent.atomic.AtomicBoolean $r15;
        berkeley.com.sleepycat.je.dbi.StartupTracker $r17, $r18;

        this := @this: berkeley.com.sleepycat.je.recovery.RecoveryManager;

        env := @parameter0: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl> = env;

        cm = virtualinvoke env.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.DbConfigManager getConfigManager()>();

        $r0 = <berkeley.com.sleepycat.je.config.EnvironmentParams: berkeley.com.sleepycat.je.config.IntConfigParam LOG_ITERATOR_READ_SIZE>;

        $i0 = virtualinvoke cm.<berkeley.com.sleepycat.je.dbi.DbConfigManager: int getInt(berkeley.com.sleepycat.je.config.IntConfigParam)>($r0);

        this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: int readBufferSize> = $i0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.Map committedTxnIds> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.Set abortedTxnIds> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.Map preparedTxns> = $r3;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.Set resurrectedLsns> = $r4;

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.Set inListBuildDbIds> = $r5;

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.Set tempDbIds> = $r6;

        $r7 = new java.util.HashSet;

        specialinvoke $r7.<java.util.HashSet: void <init>()>();

        this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.Set expectDeletedMapLNs> = $r7;

        $r8 = new berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker;

        specialinvoke $r8.<berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl)>(env);

        this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.cleaner.RecoveryUtilizationTracker tracker> = $r8;

        $r9 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: java.util.logging.Logger getLogger(java.lang.Class)>($r9);

        this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.logging.Logger logger> = $r10;

        $r11 = new berkeley.com.sleepycat.je.recovery.RollbackTracker;

        $r12 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        specialinvoke $r11.<berkeley.com.sleepycat.je.recovery.RollbackTracker: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl)>($r12);

        this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RollbackTracker rollbackTracker> = $r11;

        $r13 = new berkeley.com.sleepycat.je.recovery.RecoveryInfo;

        specialinvoke $r13.<berkeley.com.sleepycat.je.recovery.RecoveryInfo: void <init>()>();

        this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info> = $r13;

        $r14 = new java.util.HashSet;

        specialinvoke $r14.<java.util.HashSet: void <init>()>();

        this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.Set logVersion8UpgradeDbs> = $r14;

        $r15 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r15.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: java.util.concurrent.atomic.AtomicBoolean logVersion8UpgradeDeltas> = $r15;

        $r16 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r17 = virtualinvoke $r16.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.StartupTracker getStartupTracker()>();

        this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker> = $r17;

        $r18 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.dbi.StartupTracker startupTracker>;

        $r19 = this.<berkeley.com.sleepycat.je.recovery.RecoveryManager: berkeley.com.sleepycat.je.recovery.RecoveryInfo info>;

        virtualinvoke $r18.<berkeley.com.sleepycat.je.dbi.StartupTracker: void setRecoveryInfo(berkeley.com.sleepycat.je.recovery.RecoveryInfo)>($r19);

        return;
    }

    public static void abortUndo(java.util.logging.Logger, java.util.logging.Level, berkeley.com.sleepycat.je.tree.TreeLocation, berkeley.com.sleepycat.je.dbi.DatabaseImpl, berkeley.com.sleepycat.je.log.entry.LNLogEntry, long)
    {
        java.util.logging.Logger logger;
        java.util.logging.Level traceLevel;
        berkeley.com.sleepycat.je.tree.TreeLocation location;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;
        berkeley.com.sleepycat.je.log.entry.LNLogEntry lnEntry;
        long logLsn, $l0, $l1;
        boolean $z0, $z1;
        byte[] $r0, $r1;
        int $i2;

        logger := @parameter0: java.util.logging.Logger;

        traceLevel := @parameter1: java.util.logging.Level;

        location := @parameter2: berkeley.com.sleepycat.je.tree.TreeLocation;

        db := @parameter3: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        lnEntry := @parameter4: berkeley.com.sleepycat.je.log.entry.LNLogEntry;

        logLsn := @parameter5: long;

        $l0 = virtualinvoke lnEntry.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: long getAbortLsn()>();

        $z0 = virtualinvoke lnEntry.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: boolean getAbortKnownDeleted()>();

        $r0 = virtualinvoke lnEntry.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: byte[] getAbortKey()>();

        $r1 = virtualinvoke lnEntry.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: byte[] getAbortData()>();

        $l1 = virtualinvoke lnEntry.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: long getAbortVLSN()>();

        $i2 = virtualinvoke lnEntry.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: int getAbortExpiration()>();

        $z1 = virtualinvoke lnEntry.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: boolean isAbortExpirationInHours()>();

        staticinvoke <berkeley.com.sleepycat.je.recovery.RecoveryManager: void undo(java.util.logging.Logger,java.util.logging.Level,berkeley.com.sleepycat.je.tree.TreeLocation,berkeley.com.sleepycat.je.dbi.DatabaseImpl,berkeley.com.sleepycat.je.log.entry.LNLogEntry,long,long,boolean,boolean,byte[],byte[],long,int,boolean)>(logger, traceLevel, location, db, lnEntry, logLsn, $l0, $z0, 0, $r0, $r1, $l1, $i2, $z1);

        return;
    }

    public static void rollbackUndo(java.util.logging.Logger, java.util.logging.Level, berkeley.com.sleepycat.je.tree.TreeLocation, berkeley.com.sleepycat.je.dbi.DatabaseImpl, berkeley.com.sleepycat.je.log.entry.LNLogEntry, long, berkeley.com.sleepycat.je.txn.TxnChain$RevertInfo)
    {
        java.util.logging.Logger logger;
        java.util.logging.Level traceLevel;
        berkeley.com.sleepycat.je.tree.TreeLocation location;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;
        berkeley.com.sleepycat.je.log.entry.LNLogEntry lnEntry;
        long undoLsn, $l0, $l1;
        berkeley.com.sleepycat.je.txn.TxnChain$RevertInfo revertTo;
        boolean $z0, $z1, $z2;
        byte[] $r0, $r1;
        int $i2;

        logger := @parameter0: java.util.logging.Logger;

        traceLevel := @parameter1: java.util.logging.Level;

        location := @parameter2: berkeley.com.sleepycat.je.tree.TreeLocation;

        db := @parameter3: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        lnEntry := @parameter4: berkeley.com.sleepycat.je.log.entry.LNLogEntry;

        undoLsn := @parameter5: long;

        revertTo := @parameter6: berkeley.com.sleepycat.je.txn.TxnChain$RevertInfo;

        $l0 = revertTo.<berkeley.com.sleepycat.je.txn.TxnChain$RevertInfo: long revertLsn>;

        $z0 = revertTo.<berkeley.com.sleepycat.je.txn.TxnChain$RevertInfo: boolean revertKD>;

        $z1 = revertTo.<berkeley.com.sleepycat.je.txn.TxnChain$RevertInfo: boolean revertPD>;

        $r0 = revertTo.<berkeley.com.sleepycat.je.txn.TxnChain$RevertInfo: byte[] revertKey>;

        $r1 = revertTo.<berkeley.com.sleepycat.je.txn.TxnChain$RevertInfo: byte[] revertData>;

        $l1 = revertTo.<berkeley.com.sleepycat.je.txn.TxnChain$RevertInfo: long revertVLSN>;

        $i2 = revertTo.<berkeley.com.sleepycat.je.txn.TxnChain$RevertInfo: int revertExpiration>;

        $z2 = revertTo.<berkeley.com.sleepycat.je.txn.TxnChain$RevertInfo: boolean revertExpirationInHours>;

        staticinvoke <berkeley.com.sleepycat.je.recovery.RecoveryManager: void undo(java.util.logging.Logger,java.util.logging.Level,berkeley.com.sleepycat.je.tree.TreeLocation,berkeley.com.sleepycat.je.dbi.DatabaseImpl,berkeley.com.sleepycat.je.log.entry.LNLogEntry,long,long,boolean,boolean,byte[],byte[],long,int,boolean)>(logger, traceLevel, location, db, lnEntry, undoLsn, $l0, $z0, $z1, $r0, $r1, $l1, $i2, $z2);

        return;
    }


