    void <init>(org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder, org.tukaani.xz.lzma.LZMAEncoder$1)
    {
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder this;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder x0;
        org.tukaani.xz.lzma.LZMAEncoder$1 x1;

        this := @this: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder;

        x0 := @parameter0: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder;

        x1 := @parameter1: org.tukaani.xz.lzma.LZMAEncoder$1;

        specialinvoke this.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: void <init>(org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder)>(x0);

        return;
    }

    private void <init>(org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder)
    {
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder this;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder l1;

        this := @this: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder;

        l1 := @parameter0: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder;

        this.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder this$1> = l1;

        specialinvoke this.<org.tukaani.xz.lzma.LZMACoder$LiteralCoder$LiteralSubcoder: void <init>(org.tukaani.xz.lzma.LZMACoder$LiteralCoder)>(l1);

        return;
    }

    int getMatchedPrice(int, int)
    {
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder this;
        int matchBit, subencoderIndex, bit, symbol#1, matchByte#2, price#4, offset#6, symbol#10, $i0, $i1, $i2, $i4, $i5, $i6;
        short[] $r0;
        short $s3;

        this := @this: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder;

        symbol#1 := @parameter0: int;

        matchByte#2 := @parameter1: int;

        price#4 = 0;

        offset#6 = 256;

        symbol#10 = symbol#1 | 256;

     label1:
        matchByte#2 = matchByte#2 << 1;

        matchBit = matchByte#2 & offset#6;

        $i0 = offset#6 + matchBit;

        $i1 = symbol#10 >>> 8;

        subencoderIndex = $i0 + $i1;

        $i2 = symbol#10 >>> 7;

        bit = $i2 & 1;

        $r0 = this.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: short[] probs>;

        $s3 = $r0[subencoderIndex];

        $i4 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitPrice(int,int)>($s3, bit);

        price#4 = price#4 + $i4;

        symbol#10 = symbol#10 << 1;

        $i5 = matchByte#2 ^ symbol#10;

        $i6 = $i5 ^ -1;

        offset#6 = offset#6 & $i6;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(symbol#10);

        if symbol#10 < 65536 goto label1;

        return price#4;
    }

    int getNormalPrice(int)
    {
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder this;
        int subencoderIndex, bit, symbol#1, price#3, symbol#7, $i0, $i2;
        short[] $r0;
        short $s1;

        this := @this: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder;

        symbol#1 := @parameter0: int;

        price#3 = 0;

        symbol#7 = symbol#1 | 256;

     label1:
        subencoderIndex = symbol#7 >>> 8;

        $i0 = symbol#7 >>> 7;

        bit = $i0 & 1;

        $r0 = this.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: short[] probs>;

        $s1 = $r0[subencoderIndex];

        $i2 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitPrice(int,int)>($s1, bit);

        price#3 = price#3 + $i2;

        symbol#7 = symbol#7 << 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(symbol#7);

        if symbol#7 < 65536 goto label1;

        return price#3;
    }

    void encode() throws java.io.IOException
    {
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder this;
        int subencoderIndex, bit, matchBit, subencoderIndex, bit, $i0, $i1, symbol#12, $i2, $i3, $i4, $i5, $i6, matchByte#57, offset#59, $i7, $i8, $i9, $i10, $i11;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder $r0, $r3, $r5, $r8, $r12, $r15, $r18, $r20, $r24;
        org.tukaani.xz.lzma.LZMAEncoder $r1, $r4, $r6, $r9, $r13, $r16, $r19, $r21, $r25;
        org.tukaani.xz.lz.LZEncoder $r2, $r14;
        org.tukaani.xz.lzma.State $r7, $r26;
        boolean $z0;
        org.tukaani.xz.rangecoder.RangeEncoder $r10, $r22;
        short[] $r11, $r23;
        int[] $r17;

        this := @this: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder;

        $r0 = this.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder this$1>;

        $r1 = $r0.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $r2 = $r1.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lz.LZEncoder lz>;

        $r3 = this.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder this$1>;

        $r4 = $r3.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $i0 = $r4.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead>;

        $i1 = virtualinvoke $r2.<org.tukaani.xz.lz.LZEncoder: int getByte(int)>($i0);

        symbol#12 = $i1 | 256;

        $r5 = this.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder this$1>;

        $r6 = $r5.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $r7 = $r6.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.State state>;

        $z0 = virtualinvoke $r7.<org.tukaani.xz.lzma.State: boolean isLiteral()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

     label1:
        subencoderIndex = symbol#12 >>> 8;

        $i2 = symbol#12 >>> 7;

        bit = $i2 & 1;

        $r8 = this.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder this$1>;

        $r9 = $r8.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $r10 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder access$100(org.tukaani.xz.lzma.LZMAEncoder)>($r9);

        $r11 = this.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: short[] probs>;

        virtualinvoke $r10.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBit(short[],int,int)>($r11, subencoderIndex, bit);

        symbol#12 = symbol#12 << 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(symbol#12);

        if symbol#12 < 65536 goto label1;

        goto label4;

     label2:
        $r12 = this.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder this$1>;

        $r13 = $r12.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $r14 = $r13.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lz.LZEncoder lz>;

        $r15 = this.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder this$1>;

        $r16 = $r15.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $r17 = $r16.<org.tukaani.xz.lzma.LZMAEncoder: int[] reps>;

        $i3 = $r17[0];

        $i4 = $i3 + 1;

        $r18 = this.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder this$1>;

        $r19 = $r18.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $i5 = $r19.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead>;

        $i6 = $i4 + $i5;

        matchByte#57 = virtualinvoke $r14.<org.tukaani.xz.lz.LZEncoder: int getByte(int)>($i6);

        offset#59 = 256;

     label3:
        matchByte#57 = matchByte#57 << 1;

        matchBit = matchByte#57 & offset#59;

        $i7 = offset#59 + matchBit;

        $i8 = symbol#12 >>> 8;

        subencoderIndex = $i7 + $i8;

        $i9 = symbol#12 >>> 7;

        bit = $i9 & 1;

        $r20 = this.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder this$1>;

        $r21 = $r20.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $r22 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder access$100(org.tukaani.xz.lzma.LZMAEncoder)>($r21);

        $r23 = this.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: short[] probs>;

        virtualinvoke $r22.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBit(short[],int,int)>($r23, subencoderIndex, bit);

        symbol#12 = symbol#12 << 1;

        $i10 = matchByte#57 ^ symbol#12;

        $i11 = $i10 ^ -1;

        offset#59 = offset#59 & $i11;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(symbol#12);

        if symbol#12 < 65536 goto label3;

     label4:
        $r24 = this.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder$LiteralSubencoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder this$1>;

        $r25 = $r24.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: org.tukaani.xz.lzma.LZMAEncoder this$0>;

        $r26 = $r25.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r26.<org.tukaani.xz.lzma.State: void updateLiteral()>();

        return;
    }


