    public void <init>(org.w3c.dom.Element, weka.core.Instances, weka.core.pmml.MiningSchema) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.SupportVectorMachineModel this;
        org.w3c.dom.Element model, $r29;
        weka.core.Instances dataDictionary, $r8;
        weka.core.pmml.MiningSchema miningSchema, $r7, $r30;
        java.lang.String fn, modelName, algoName, svmRep, altTargetCat, thresholdS, classificationMethodS, $r4, $r14, $r15;
        int altTargetInd, $i0, $i1, $i2, $i3, $i4, $i5, $i6, i#136, $i7, $i8;
        org.w3c.dom.NodeList machineL;
        org.w3c.dom.Node machine;
        weka.classifiers.pmml.consumer.SupportVectorMachineModel$SupportVectorMachine newMach, $r28;
        weka.classifiers.pmml.consumer.NeuralNetwork$MiningFunction $r0, $r5;
        weka.classifiers.pmml.consumer.SupportVectorMachineModel$classificationMethod $r1, $r16, $r17;
        java.util.ArrayList $r2;
        weka.classifiers.pmml.consumer.SupportVectorMachineModel$SVM_representation $r3, $r6, $r18, $r19, $r23, $r24, $r32;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        weka.core.Attribute $r9;
        java.lang.Exception $r10, $r26, $r27;
        java.lang.StringBuilder $r11, $r12, $r13;
        double $d0;
        weka.core.pmml.VectorDictionary $r20, $r31;
        weka.gui.Logger $r21, $r33;
        weka.classifiers.pmml.consumer.SupportVectorMachineModel$Kernel $r22, $r25;
        java.util.List $r34;

        this := @this: weka.classifiers.pmml.consumer.SupportVectorMachineModel;

        model := @parameter0: org.w3c.dom.Element;

        dataDictionary := @parameter1: weka.core.Instances;

        miningSchema := @parameter2: weka.core.pmml.MiningSchema;

        specialinvoke this.<weka.classifiers.pmml.consumer.PMMLClassifier: void <init>(weka.core.Instances,weka.core.pmml.MiningSchema)>(dataDictionary, miningSchema);

        $r0 = <weka.classifiers.pmml.consumer.NeuralNetwork$MiningFunction: weka.classifiers.pmml.consumer.NeuralNetwork$MiningFunction CLASSIFICATION>;

        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.classifiers.pmml.consumer.NeuralNetwork$MiningFunction m_functionType> = $r0;

        $r1 = <weka.classifiers.pmml.consumer.SupportVectorMachineModel$classificationMethod: weka.classifiers.pmml.consumer.SupportVectorMachineModel$classificationMethod NONE>;

        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.classifiers.pmml.consumer.SupportVectorMachineModel$classificationMethod m_classificationMethod> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: java.util.List m_machines> = $r2;

        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: int m_alternateBinaryTargetCategory> = -1;

        $r3 = <weka.classifiers.pmml.consumer.SupportVectorMachineModel$SVM_representation: weka.classifiers.pmml.consumer.SupportVectorMachineModel$SVM_representation SUPPORT_VECTORS>;

        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.classifiers.pmml.consumer.SupportVectorMachineModel$SVM_representation m_svmRepresentation> = $r3;

        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: double m_threshold> = 0.0;

        $r4 = virtualinvoke this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: java.lang.String getPMMLVersion()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("3.2");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label01;

     label01:
        fn = interfaceinvoke model.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("functionName");

        $z1 = virtualinvoke fn.<java.lang.String: boolean equals(java.lang.Object)>("regression");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label02;

        $r5 = <weka.classifiers.pmml.consumer.NeuralNetwork$MiningFunction: weka.classifiers.pmml.consumer.NeuralNetwork$MiningFunction REGRESSION>;

        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.classifiers.pmml.consumer.NeuralNetwork$MiningFunction m_functionType> = $r5;

     label02:
        modelName = interfaceinvoke model.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("modelName");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(modelName);

        if modelName == null goto label03;

        $i0 = virtualinvoke modelName.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label03;

        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: java.lang.String m_modelName> = modelName;

     label03:
        algoName = interfaceinvoke model.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("algorithmName");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(algoName);

        if algoName == null goto label04;

        $i1 = virtualinvoke algoName.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 0 goto label04;

        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: java.lang.String m_algorithmName> = algoName;

     label04:
        svmRep = interfaceinvoke model.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("svmRepresentation");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(svmRep);

        if svmRep == null goto label05;

        $i2 = virtualinvoke svmRep.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 <= 0 goto label05;

        $z2 = virtualinvoke svmRep.<java.lang.String: boolean equals(java.lang.Object)>("Coefficients");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label05;

        $r6 = <weka.classifiers.pmml.consumer.SupportVectorMachineModel$SVM_representation: weka.classifiers.pmml.consumer.SupportVectorMachineModel$SVM_representation COEFFICIENTS>;

        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.classifiers.pmml.consumer.SupportVectorMachineModel$SVM_representation m_svmRepresentation> = $r6;

     label05:
        altTargetCat = interfaceinvoke model.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("alternateBinaryTargetCategory");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(altTargetCat);

        if altTargetCat == null goto label07;

        $i3 = virtualinvoke altTargetCat.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 <= 0 goto label07;

        $r7 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.core.pmml.MiningSchema m_miningSchema>;

        $r8 = virtualinvoke $r7.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r9 = virtualinvoke $r8.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        altTargetInd = virtualinvoke $r9.<weka.core.Attribute: int indexOfValue(java.lang.String)>(altTargetCat);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(altTargetInd);

        if altTargetInd >= 0 goto label06;

        $r10 = new java.lang.Exception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[SupportVectorMachineModel] can\'t find alternate target value ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(altTargetCat);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.Exception: void <init>(java.lang.String)>($r14);

        throw $r10;

     label06:
        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: int m_alternateBinaryTargetCategory> = altTargetInd;

     label07:
        thresholdS = interfaceinvoke model.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("threshold");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(thresholdS);

        if thresholdS == null goto label08;

        $i4 = virtualinvoke thresholdS.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 <= 0 goto label08;

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(thresholdS);

        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: double m_threshold> = $d0;

     label08:
        $r15 = virtualinvoke this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: java.lang.String getPMMLVersion()>();

        $z3 = virtualinvoke $r15.<java.lang.String: boolean startsWith(java.lang.String)>("4.");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label09;

        $r16 = <weka.classifiers.pmml.consumer.SupportVectorMachineModel$classificationMethod: weka.classifiers.pmml.consumer.SupportVectorMachineModel$classificationMethod ONE_AGAINST_ALL>;

        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.classifiers.pmml.consumer.SupportVectorMachineModel$classificationMethod m_classificationMethod> = $r16;

     label09:
        classificationMethodS = interfaceinvoke model.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("classificationMethod");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classificationMethodS);

        if classificationMethodS == null goto label10;

        $i5 = virtualinvoke classificationMethodS.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i5 <= 0 goto label10;

        $z4 = virtualinvoke classificationMethodS.<java.lang.String: boolean equals(java.lang.Object)>("OneAgainstOne");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label10;

        $r17 = <weka.classifiers.pmml.consumer.SupportVectorMachineModel$classificationMethod: weka.classifiers.pmml.consumer.SupportVectorMachineModel$classificationMethod ONE_AGAINST_ONE>;

        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.classifiers.pmml.consumer.SupportVectorMachineModel$classificationMethod m_classificationMethod> = $r17;

     label10:
        $r18 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.classifiers.pmml.consumer.SupportVectorMachineModel$SVM_representation m_svmRepresentation>;

        $r19 = <weka.classifiers.pmml.consumer.SupportVectorMachineModel$SVM_representation: weka.classifiers.pmml.consumer.SupportVectorMachineModel$SVM_representation SUPPORT_VECTORS>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r18);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r19);

        if $r18 != $r19 goto label11;

        $r20 = staticinvoke <weka.core.pmml.VectorDictionary: weka.core.pmml.VectorDictionary getVectorDictionary(org.w3c.dom.Element,weka.core.pmml.MiningSchema)>(model, miningSchema);

        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.core.pmml.VectorDictionary m_vectorDictionary> = $r20;

     label11:
        $r21 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.gui.Logger m_log>;

        $r22 = staticinvoke <weka.classifiers.pmml.consumer.SupportVectorMachineModel$Kernel: weka.classifiers.pmml.consumer.SupportVectorMachineModel$Kernel getKernel(org.w3c.dom.Element,weka.gui.Logger)>(model, $r21);

        this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.classifiers.pmml.consumer.SupportVectorMachineModel$Kernel m_kernel> = $r22;

        $r23 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.classifiers.pmml.consumer.SupportVectorMachineModel$SVM_representation m_svmRepresentation>;

        $r24 = <weka.classifiers.pmml.consumer.SupportVectorMachineModel$SVM_representation: weka.classifiers.pmml.consumer.SupportVectorMachineModel$SVM_representation COEFFICIENTS>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r23);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r24);

        if $r23 != $r24 goto label12;

        $r25 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.classifiers.pmml.consumer.SupportVectorMachineModel$Kernel m_kernel>;

        $z5 = $r25 instanceof weka.classifiers.pmml.consumer.SupportVectorMachineModel$LinearKernel;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 != 0 goto label12;

        $r26 = new java.lang.Exception;

        specialinvoke $r26.<java.lang.Exception: void <init>(java.lang.String)>("[SupportVectorMachineModel] representation is coefficients, but kernel is not linear!");

        throw $r26;

     label12:
        machineL = interfaceinvoke model.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("SupportVectorMachine");

        $i6 = interfaceinvoke machineL.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if $i6 != 0 goto label13;

        $r27 = new java.lang.Exception;

        specialinvoke $r27.<java.lang.Exception: void <init>(java.lang.String)>("[SupportVectorMachineModel] No binary SVMs defined in model file!");

        throw $r27;

     label13:
        i#136 = 0;

     label14:
        $i7 = interfaceinvoke machineL.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#136);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if i#136 >= $i7 goto label15;

        machine = interfaceinvoke machineL.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i#136);

        $r28 = new weka.classifiers.pmml.consumer.SupportVectorMachineModel$SupportVectorMachine;

        $r29 = (org.w3c.dom.Element) machine;

        $r30 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.core.pmml.MiningSchema m_miningSchema>;

        $r31 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.core.pmml.VectorDictionary m_vectorDictionary>;

        $r32 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.classifiers.pmml.consumer.SupportVectorMachineModel$SVM_representation m_svmRepresentation>;

        $i8 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: int m_alternateBinaryTargetCategory>;

        $r33 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.gui.Logger m_log>;

        specialinvoke $r28.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$SupportVectorMachine: void <init>(org.w3c.dom.Element,weka.core.pmml.MiningSchema,weka.core.pmml.VectorDictionary,weka.classifiers.pmml.consumer.SupportVectorMachineModel$SVM_representation,int,weka.gui.Logger)>($r29, $r30, $r31, $r32, $i8, $r33);

        newMach = $r28;

        $r34 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: java.util.List m_machines>;

        interfaceinvoke $r34.<java.util.List: boolean add(java.lang.Object)>(newMach);

        i#136 = i#136 + 1;

        goto label14;

     label15:
        return;
    }

    public double[] distributionForInstance(weka.core.Instance) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.SupportVectorMachineModel this;
        weka.core.Instance inst;
        double[] incoming, preds#15;
        java.lang.String message, $r20, $r35;
        weka.core.pmml.TargetMetaInfo targetData;
        weka.core.Instances miningSchemaI, $r0, $r2, $r5, $r10, $r15, $r18, $r26, $r30, $r44;
        java.util.Iterator l5;
        weka.classifiers.pmml.consumer.SupportVectorMachineModel$SupportVectorMachine m;
        int minI, $i0, i#23, $i1, i#39, $i2, $i3, i#106, $i4, $i5, $i6, $i7, $i8, unset#168, i#170, $i9, $i12;
        boolean $z0, $z1, hasMissing#37, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        weka.core.pmml.MiningSchema $r1, $r4, $r8, $r9, $r11, $r14, $r17, $r25, $r28, $r29, $r32, $r43;
        weka.core.Attribute $r3, $r6, $r16, $r19, $r27, $r31, $r33, $r34, $r45;
        weka.core.pmml.MappingInfo $r7;
        double $d0, $d1, $d2, $d3, $d4, total#166, $d5, $d6, $d7;
        java.lang.StringBuilder $r12, $r13, $r21;
        weka.gui.Logger $r22, $r24;
        java.io.PrintStream $r23;
        java.util.List $r36, $r48;
        java.lang.Object $r37;
        weka.classifiers.pmml.consumer.SupportVectorMachineModel$Kernel $r38;
        weka.core.pmml.VectorDictionary $r39;
        weka.classifiers.pmml.consumer.SupportVectorMachineModel$classificationMethod $r40, $r41, $r42, $r46, $r47;
        byte $b10, $b11;
        java.lang.Exception $r49;

        this := @this: weka.classifiers.pmml.consumer.SupportVectorMachineModel;

        inst := @parameter0: weka.core.Instance;

        $z0 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: boolean m_initialized>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label01;

        $r0 = interfaceinvoke inst.<weka.core.Instance: weka.core.Instances dataset()>();

        virtualinvoke this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: void mapToMiningSchema(weka.core.Instances)>($r0);

     label01:
        $r1 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.core.pmml.MiningSchema m_miningSchema>;

        $r2 = virtualinvoke $r1.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r3 = virtualinvoke $r2.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z1 = virtualinvoke $r3.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label02;

        preds#15 = newarray (double)[1];

        goto label04;

     label02:
        $r4 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.core.pmml.MiningSchema m_miningSchema>;

        $r5 = virtualinvoke $r4.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r6 = virtualinvoke $r5.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $i0 = virtualinvoke $r6.<weka.core.Attribute: int numValues()>();

        preds#15 = newarray (double)[$i0];

        i#23 = 0;

     label03:
        $i1 = lengthof preds#15;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#23);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#23 >= $i1 goto label04;

        preds#15[i#23] = -1.0;

        i#23 = i#23 + 1;

        goto label03;

     label04:
        $r7 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.core.pmml.MappingInfo m_fieldsMap>;

        $r8 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.core.pmml.MiningSchema m_miningSchema>;

        incoming = virtualinvoke $r7.<weka.core.pmml.MappingInfo: double[] instanceToSchema(weka.core.Instance,weka.core.pmml.MiningSchema)>(inst, $r8);

        hasMissing#37 = 0;

        i#39 = 0;

     label05:
        $i2 = lengthof incoming;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#39);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#39 >= $i2 goto label07;

        $r9 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.core.pmml.MiningSchema m_miningSchema>;

        $r10 = virtualinvoke $r9.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $i3 = virtualinvoke $r10.<weka.core.Instances: int classIndex()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#39);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if i#39 == $i3 goto label06;

        $d0 = incoming[i#39];

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label06;

        hasMissing#37 = 1;

        goto label07;

     label06:
        i#39 = i#39 + 1;

        goto label05;

     label07:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(hasMissing#37);

        if hasMissing#37 == 0 goto label18;

        $r11 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.core.pmml.MiningSchema m_miningSchema>;

        $z3 = virtualinvoke $r11.<weka.core.pmml.MiningSchema: boolean hasTargetMetaData()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label14;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[SupportVectorMachineModel] WARNING: Instance to predict has missing value(s) but there is no missing value handling meta data and no prior probabilities/default value to fall back to. No prediction will be made (");

        $r14 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.core.pmml.MiningSchema m_miningSchema>;

        $r15 = virtualinvoke $r14.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r16 = virtualinvoke $r15.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z4 = virtualinvoke $r16.<weka.core.Attribute: boolean isNominal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label08;

        $r17 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.core.pmml.MiningSchema m_miningSchema>;

        $r18 = virtualinvoke $r17.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r19 = virtualinvoke $r18.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z5 = virtualinvoke $r19.<weka.core.Attribute: boolean isString()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label09;

     label08:
        $r20 = "zero probabilities output).";

        goto label10;

     label09:
        $r20 = "NaN output).";

     label10:
        $r21 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        message = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.gui.Logger m_log>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r22);

        if $r22 != null goto label11;

        $r23 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>(message);

        goto label12;

     label11:
        $r24 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.gui.Logger m_log>;

        interfaceinvoke $r24.<weka.gui.Logger: void logMessage(java.lang.String)>(message);

     label12:
        $r25 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.core.pmml.MiningSchema m_miningSchema>;

        $r26 = virtualinvoke $r25.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r27 = virtualinvoke $r26.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z6 = virtualinvoke $r27.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label13;

        $d1 = staticinvoke <weka.core.Utils: double missingValue()>();

        preds#15[0] = $d1;

     label13:
        return preds#15;

     label14:
        $r28 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.core.pmml.MiningSchema m_miningSchema>;

        targetData = virtualinvoke $r28.<weka.core.pmml.MiningSchema: weka.core.pmml.TargetMetaInfo getTargetMetaData()>();

        $r29 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.core.pmml.MiningSchema m_miningSchema>;

        $r30 = virtualinvoke $r29.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r31 = virtualinvoke $r30.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z7 = virtualinvoke $r31.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 == 0 goto label15;

        $d2 = virtualinvoke targetData.<weka.core.pmml.TargetMetaInfo: double getDefaultValue()>();

        preds#15[0] = $d2;

        goto label17;

     label15:
        $r32 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.core.pmml.MiningSchema m_miningSchema>;

        miningSchemaI = virtualinvoke $r32.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        i#106 = 0;

     label16:
        $r33 = virtualinvoke miningSchemaI.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $i4 = virtualinvoke $r33.<weka.core.Attribute: int numValues()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#106);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if i#106 >= $i4 goto label17;

        $r34 = virtualinvoke miningSchemaI.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $r35 = virtualinvoke $r34.<weka.core.Attribute: java.lang.String value(int)>(i#106);

        $d3 = virtualinvoke targetData.<weka.core.pmml.TargetMetaInfo: double getPriorProbability(java.lang.String)>($r35);

        preds#15[i#106] = $d3;

        i#106 = i#106 + 1;

        goto label16;

     label17:
        return preds#15;

     label18:
        $r36 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: java.util.List m_machines>;

        l5 = interfaceinvoke $r36.<java.util.List: java.util.Iterator iterator()>();

     label19:
        $z8 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 == 0 goto label20;

        $r37 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        m = (weka.classifiers.pmml.consumer.SupportVectorMachineModel$SupportVectorMachine) $r37;

        $r38 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.classifiers.pmml.consumer.SupportVectorMachineModel$Kernel m_kernel>;

        $r39 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.core.pmml.VectorDictionary m_vectorDictionary>;

        $r40 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.classifiers.pmml.consumer.SupportVectorMachineModel$classificationMethod m_classificationMethod>;

        $d4 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: double m_threshold>;

        virtualinvoke m.<weka.classifiers.pmml.consumer.SupportVectorMachineModel$SupportVectorMachine: void distributionForInstance(double[],weka.classifiers.pmml.consumer.SupportVectorMachineModel$Kernel,weka.core.pmml.VectorDictionary,double[],weka.classifiers.pmml.consumer.SupportVectorMachineModel$classificationMethod,double)>(incoming, $r38, $r39, preds#15, $r40, $d4);

        goto label19;

     label20:
        $r41 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.classifiers.pmml.consumer.SupportVectorMachineModel$classificationMethod m_classificationMethod>;

        $r42 = <weka.classifiers.pmml.consumer.SupportVectorMachineModel$classificationMethod: weka.classifiers.pmml.consumer.SupportVectorMachineModel$classificationMethod NONE>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r41);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r42);

        if $r41 == $r42 goto label21;

        $r43 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.core.pmml.MiningSchema m_miningSchema>;

        $r44 = virtualinvoke $r43.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r45 = virtualinvoke $r44.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z9 = virtualinvoke $r45.<weka.core.Attribute: boolean isNominal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 == 0 goto label21;

        $r46 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.classifiers.pmml.consumer.SupportVectorMachineModel$classificationMethod m_classificationMethod>;

        $r47 = <weka.classifiers.pmml.consumer.SupportVectorMachineModel$classificationMethod: weka.classifiers.pmml.consumer.SupportVectorMachineModel$classificationMethod ONE_AGAINST_ALL>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r46);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r47);

        if $r46 != $r47 goto label21;

        minI = staticinvoke <weka.core.Utils: int minIndex(double[])>(preds#15);

        $i5 = lengthof preds#15;

        preds#15 = newarray (double)[$i5];

        preds#15[minI] = 1.0;

     label21:
        $r48 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: java.util.List m_machines>;

        $i6 = interfaceinvoke $r48.<java.util.List: int size()>();

        $i7 = lengthof preds#15;

        $i8 = $i7 - 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if $i6 != $i8 goto label27;

        total#166 = 0.0;

        unset#168 = -1;

        i#170 = 0;

     label22:
        $i9 = lengthof preds#15;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#170);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        if i#170 >= $i9 goto label25;

        $d5 = preds#15[i#170];

        $b10 = $d5 cmpl -1.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b10);

        if $b10 == 0 goto label23;

        $d6 = preds#15[i#170];

        total#166 = total#166 + $d6;

        goto label24;

     label23:
        unset#168 = i#170;

     label24:
        i#170 = i#170 + 1;

        goto label22;

     label25:
        $b11 = total#166 cmpl 1.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b11);

        if $b11 <= 0 goto label26;

        $r49 = new java.lang.Exception;

        specialinvoke $r49.<java.lang.Exception: void <init>(java.lang.String)>("[SupportVectorMachineModel] total of probabilities is greater than 1!");

        throw $r49;

     label26:
        $d7 = 1.0 - total#166;

        preds#15[unset#168] = $d7;

     label27:
        $i12 = lengthof preds#15;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i12);

        if $i12 <= 1 goto label28;

        staticinvoke <weka.core.Utils: void normalize(double[])>(preds#15);

     label28:
        return preds#15;
    }

    public java.lang.String toString()
    {
        weka.classifiers.pmml.consumer.SupportVectorMachineModel this;
        java.lang.StringBuffer temp, $r0;
        java.util.Iterator l2;
        weka.classifiers.pmml.consumer.SupportVectorMachineModel$SupportVectorMachine v;
        java.lang.StringBuilder $r1, $r2, $r4, $r8, $r9, $r11, $r32, $r33, $r34;
        java.lang.String $r3, $r5, $r7, $r10, $r12, $r35, $r37;
        boolean $z0, $z1;
        weka.core.pmml.MiningSchema $r16;
        weka.classifiers.pmml.consumer.SupportVectorMachineModel$Kernel $r19;
        weka.classifiers.pmml.consumer.SupportVectorMachineModel$classificationMethod $r22, $r23, $r25, $r26;
        java.util.List $r30;
        java.lang.Object $r31;

        this := @this: weka.classifiers.pmml.consumer.SupportVectorMachineModel;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        temp = $r0;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PMML version ");

        $r3 = virtualinvoke this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: java.lang.String getPMMLVersion()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: java.lang.String getCreatorApplication()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("?");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nApplication: ");

        $r10 = virtualinvoke this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: java.lang.String getCreatorApplication()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

     label1:
        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\nPMML Model: Support Vector Machine Model");

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\n");

        $r16 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.core.pmml.MiningSchema m_miningSchema>;

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r16);

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Kernel: \n\t");

        $r19 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.classifiers.pmml.consumer.SupportVectorMachineModel$Kernel m_kernel>;

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r19);

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r22 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.classifiers.pmml.consumer.SupportVectorMachineModel$classificationMethod m_classificationMethod>;

        $r23 = <weka.classifiers.pmml.consumer.SupportVectorMachineModel$classificationMethod: weka.classifiers.pmml.consumer.SupportVectorMachineModel$classificationMethod NONE>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r22);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r23);

        if $r22 == $r23 goto label4;

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Multi-class classifcation using ");

        $r25 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: weka.classifiers.pmml.consumer.SupportVectorMachineModel$classificationMethod m_classificationMethod>;

        $r26 = <weka.classifiers.pmml.consumer.SupportVectorMachineModel$classificationMethod: weka.classifiers.pmml.consumer.SupportVectorMachineModel$classificationMethod ONE_AGAINST_ALL>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r25);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r26);

        if $r25 != $r26 goto label2;

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("one-against-all");

        goto label3;

     label2:
        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("one-against-one");

     label3:
        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\n");

     label4:
        $r30 = this.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: java.util.List m_machines>;

        l2 = interfaceinvoke $r30.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label6;

        $r31 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        v = (weka.classifiers.pmml.consumer.SupportVectorMachineModel$SupportVectorMachine) $r31;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r35);

        goto label5;

     label6:
        $r37 = virtualinvoke temp.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r37;
    }


