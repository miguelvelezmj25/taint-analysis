    public void <init>(org.unix4j.sort.util.sort.TrimBlanksStringComparator$Mode, java.util.Comparator)
    {
        org.unix4j.sort.util.sort.TrimBlanksStringComparator this;
        org.unix4j.sort.util.sort.TrimBlanksStringComparator$Mode mode;
        java.util.Comparator comparator;

        this := @this: org.unix4j.sort.util.sort.TrimBlanksStringComparator;

        mode := @parameter0: org.unix4j.sort.util.sort.TrimBlanksStringComparator$Mode;

        comparator := @parameter1: java.util.Comparator;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<org.unix4j.sort.util.sort.TrimBlanksStringComparator: org.unix4j.sort.util.sort.TrimBlanksStringComparator$Mode mode> = mode;

        this.<org.unix4j.sort.util.sort.TrimBlanksStringComparator: java.util.Comparator comparator> = comparator;

        return;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.unix4j.sort.util.sort.TrimBlanksStringComparator this;
        java.lang.Object l1, l2;
        java.lang.String $r0, $r1;
        int $i0;

        this := @this: org.unix4j.sort.util.sort.TrimBlanksStringComparator;

        l1 := @parameter0: java.lang.Object;

        l2 := @parameter1: java.lang.Object;

        $r0 = (java.lang.String) l1;

        $r1 = (java.lang.String) l2;

        $i0 = virtualinvoke this.<org.unix4j.sort.util.sort.TrimBlanksStringComparator: int compare(java.lang.String,java.lang.String)>($r0, $r1);

        return $i0;
    }

    public int compare(java.lang.String, java.lang.String)
    {
        org.unix4j.sort.util.sort.TrimBlanksStringComparator this;
        java.lang.String s1, s2;
        int start1, end1, start2, end2, $i0;
        java.util.Comparator $r0;
        java.lang.CharSequence $r1, $r2;

        this := @this: org.unix4j.sort.util.sort.TrimBlanksStringComparator;

        s1 := @parameter0: java.lang.String;

        s2 := @parameter1: java.lang.String;

        start1 = specialinvoke this.<org.unix4j.sort.util.sort.TrimBlanksStringComparator: int findStart(java.lang.String)>(s1);

        end1 = specialinvoke this.<org.unix4j.sort.util.sort.TrimBlanksStringComparator: int findEnd(java.lang.String)>(s1);

        start2 = specialinvoke this.<org.unix4j.sort.util.sort.TrimBlanksStringComparator: int findStart(java.lang.String)>(s2);

        end2 = specialinvoke this.<org.unix4j.sort.util.sort.TrimBlanksStringComparator: int findEnd(java.lang.String)>(s2);

        $r0 = this.<org.unix4j.sort.util.sort.TrimBlanksStringComparator: java.util.Comparator comparator>;

        $r1 = virtualinvoke s1.<java.lang.String: java.lang.CharSequence subSequence(int,int)>(start1, end1);

        $r2 = virtualinvoke s2.<java.lang.String: java.lang.CharSequence subSequence(int,int)>(start2, end2);

        $i0 = interfaceinvoke $r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r1, $r2);

        return $i0;
    }

    private int findStart(java.lang.String)
    {
        org.unix4j.sort.util.sort.TrimBlanksStringComparator this;
        java.lang.String s;
        org.unix4j.sort.util.sort.TrimBlanksStringComparator$Mode $r0, $r1;
        int $i0;

        this := @this: org.unix4j.sort.util.sort.TrimBlanksStringComparator;

        s := @parameter0: java.lang.String;

        $r1 = this.<org.unix4j.sort.util.sort.TrimBlanksStringComparator: org.unix4j.sort.util.sort.TrimBlanksStringComparator$Mode mode>;

        $r0 = <org.unix4j.sort.util.sort.TrimBlanksStringComparator$Mode: org.unix4j.sort.util.sort.TrimBlanksStringComparator$Mode Trailing>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r1 != $r0 goto label1;

        return 0;

     label1:
        $i0 = staticinvoke <org.unix4j.sort.util.sort.TrimBlanksStringComparator: int findStartTrimBlanks(java.lang.CharSequence)>(s);

        return $i0;
    }

    private int findEnd(java.lang.String)
    {
        org.unix4j.sort.util.sort.TrimBlanksStringComparator this;
        java.lang.String s;
        org.unix4j.sort.util.sort.TrimBlanksStringComparator$Mode $r0, $r1;
        int $i0, $i1;

        this := @this: org.unix4j.sort.util.sort.TrimBlanksStringComparator;

        s := @parameter0: java.lang.String;

        $r1 = this.<org.unix4j.sort.util.sort.TrimBlanksStringComparator: org.unix4j.sort.util.sort.TrimBlanksStringComparator$Mode mode>;

        $r0 = <org.unix4j.sort.util.sort.TrimBlanksStringComparator$Mode: org.unix4j.sort.util.sort.TrimBlanksStringComparator$Mode Leading>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r1 != $r0 goto label1;

        $i0 = virtualinvoke s.<java.lang.String: int length()>();

        return $i0;

     label1:
        $i1 = staticinvoke <org.unix4j.sort.util.sort.TrimBlanksStringComparator: int findEndTrimBlanks(java.lang.CharSequence)>(s);

        return $i1;
    }

    static int findStartTrimBlanks(java.lang.CharSequence)
    {
        java.lang.CharSequence s;
        int len, i#4;
        char ch;

        s := @parameter0: java.lang.CharSequence;

        len = interfaceinvoke s.<java.lang.CharSequence: int length()>();

        i#4 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len);

        if i#4 >= len goto label3;

        ch = interfaceinvoke s.<java.lang.CharSequence: char charAt(int)>(i#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(ch);

        if ch == 32 goto label2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(ch);

        if ch == 9 goto label2;

        return i#4;

     label2:
        i#4 = i#4 + 1;

        goto label1;

     label3:
        return len;
    }

    static int findEndTrimBlanks(java.lang.CharSequence)
    {
        java.lang.CharSequence s;
        char ch;
        int i#3, $i0;

        s := @parameter0: java.lang.CharSequence;

        i#3 = interfaceinvoke s.<java.lang.CharSequence: int length()>();

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#3);

        if i#3 <= 0 goto label3;

        $i0 = i#3 - 1;

        ch = interfaceinvoke s.<java.lang.CharSequence: char charAt(int)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(ch);

        if ch == 32 goto label2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(ch);

        if ch == 9 goto label2;

        return i#3;

     label2:
        i#3 = i#3 + -1;

        goto label1;

     label3:
        return 0;
    }


