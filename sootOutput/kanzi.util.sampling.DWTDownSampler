    public boolean supportsScalingFactor(int)
    {
        kanzi.util.sampling.DWTDownSampler this;
        int factor;
        boolean $z0;

        this := @this: kanzi.util.sampling.DWTDownSampler;

        factor := @parameter0: int;

        if factor != 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void subSample(int[], int[])
    {
        kanzi.util.sampling.DWTDownSampler this;
        int[] input, output;
        kanzi.SliceIntArray src, dst, $r0, $r1;
        int sh, h, w, adjust, offs#15, $i0, $i1, j#30, $i2, i#38, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i#90, $i20, i#99, $i21, $i22;
        kanzi.IntTransform $r2;

        this := @this: kanzi.util.sampling.DWTDownSampler;

        input := @parameter0: int[];

        output := @parameter1: int[];

        $r0 = new kanzi.SliceIntArray;

        specialinvoke $r0.<kanzi.SliceIntArray: void <init>(int[],int)>(input, 0);

        src = $r0;

        $r1 = new kanzi.SliceIntArray;

        specialinvoke $r1.<kanzi.SliceIntArray: void <init>(int[],int)>(output, 0);

        dst = $r1;

        $r2 = this.<kanzi.util.sampling.DWTDownSampler: kanzi.IntTransform dwt>;

        interfaceinvoke $r2.<kanzi.IntTransform: boolean forward(kanzi.SliceIntArray,kanzi.SliceIntArray)>(src, dst);

        offs#15 = 0;

        sh = this.<kanzi.util.sampling.DWTDownSampler: int shift>;

        h = this.<kanzi.util.sampling.DWTDownSampler: int height>;

        w = this.<kanzi.util.sampling.DWTDownSampler: int width>;

        if sh > 1 goto label01;

        $i0 = 0;

        goto label02;

     label01:
        $i1 = 1 << sh;

        $i0 = $i1 >> 1;

     label02:
        adjust = $i0;

        j#30 = 0;

     label03:
        if j#30 >= h goto label14;

        $i2 = j#30 + j#30;

        if $i2 >= h goto label11;

        i#38 = 0;

     label04:
        $i3 = i#38 + i#38;

        if $i3 >= w goto label08;

        $i4 = offs#15 + i#38;

        $i5 = output[$i4];

        if $i5 < adjust goto label05;

        $i6 = offs#15 + i#38;

        $i7 = offs#15 + i#38;

        $i8 = output[$i7];

        $i9 = $i8 + adjust;

        $i10 = $i9 >> sh;

        output[$i6] = $i10;

        goto label07;

     label05:
        $i11 = offs#15 + i#38;

        $i12 = output[$i11];

        $i13 = neg adjust;

        if $i12 > $i13 goto label06;

        $i14 = offs#15 + i#38;

        $i15 = offs#15 + i#38;

        $i16 = output[$i15];

        $i17 = $i16 - adjust;

        $i18 = $i17 >> sh;

        output[$i14] = $i18;

        goto label07;

     label06:
        $i19 = offs#15 + i#38;

        output[$i19] = 0;

     label07:
        i#38 = i#38 + 1;

        goto label04;

     label08:
        i#90 = w / 2;

     label09:
        if i#90 >= w goto label10;

        $i20 = offs#15 + i#90;

        output[$i20] = 0;

        i#90 = i#90 + 1;

        goto label09;

     label10:
        goto label13;

     label11:
        i#99 = 0;

     label12:
        if i#99 >= w goto label13;

        $i21 = offs#15 + i#99;

        output[$i21] = 0;

        i#99 = i#99 + 1;

        goto label12;

     label13:
        $i22 = this.<kanzi.util.sampling.DWTDownSampler: int stride>;

        offs#15 = offs#15 + $i22;

        j#30 = j#30 + 1;

        goto label03;

     label14:
        return;
    }

    public void subSampleHorizontal(int[], int[])
    {
        kanzi.util.sampling.DWTDownSampler this;
        int[] input, output;
        java.lang.UnsupportedOperationException $r0;

        this := @this: kanzi.util.sampling.DWTDownSampler;

        input := @parameter0: int[];

        output := @parameter1: int[];

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Not supported yet.");

        throw $r0;
    }


