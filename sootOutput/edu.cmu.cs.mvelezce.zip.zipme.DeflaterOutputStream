    public void <init>(java.io.OutputStream, edu.cmu.cs.mvelezce.zip.zipme.Deflater, int)
    {
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterOutputStream this;
        java.io.OutputStream out;
        edu.cmu.cs.mvelezce.zip.zipme.Deflater defl;
        int bufsize;
        java.lang.IllegalArgumentException $r0;
        byte[] $r1;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.DeflaterOutputStream;

        out := @parameter0: java.io.OutputStream;

        defl := @parameter1: edu.cmu.cs.mvelezce.zip.zipme.Deflater;

        bufsize := @parameter2: int;

        specialinvoke this.<java.io.OutputStream: void <init>()>();

        this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterOutputStream: java.io.OutputStream out> = out;

        if bufsize > 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("bufsize <= 0");

        throw $r0;

     label1:
        $r1 = newarray (byte)[bufsize];

        this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterOutputStream: byte[] buf> = $r1;

        this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterOutputStream: edu.cmu.cs.mvelezce.zip.zipme.Deflater def> = defl;

        return;
    }

    public void finish() throws java.io.IOException
    {
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterOutputStream this;
        int len, $i0;
        edu.cmu.cs.mvelezce.zip.zipme.Deflater $r0, $r1, $r2, $r7;
        boolean $z0, $z1;
        byte[] $r3, $r4, $r6;
        java.io.OutputStream $r5, $r9;
        java.lang.Error $r8;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.DeflaterOutputStream;

        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterOutputStream: edu.cmu.cs.mvelezce.zip.zipme.Deflater def>;

        virtualinvoke $r0.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: void finish()>();

     label1:
        $r1 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterOutputStream: edu.cmu.cs.mvelezce.zip.zipme.Deflater def>;

        $z0 = virtualinvoke $r1.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: boolean finished()>();

        if $z0 != 0 goto label3;

        $r2 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterOutputStream: edu.cmu.cs.mvelezce.zip.zipme.Deflater def>;

        $r3 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterOutputStream: byte[] buf>;

        $r4 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterOutputStream: byte[] buf>;

        $i0 = lengthof $r4;

        len = virtualinvoke $r2.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: int deflate(byte[],int,int)>($r3, 0, $i0);

        if len > 0 goto label2;

        goto label3;

     label2:
        $r5 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterOutputStream: java.io.OutputStream out>;

        $r6 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterOutputStream: byte[] buf>;

        virtualinvoke $r5.<java.io.OutputStream: void write(byte[],int,int)>($r6, 0, len);

        goto label1;

     label3:
        $r7 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterOutputStream: edu.cmu.cs.mvelezce.zip.zipme.Deflater def>;

        $z1 = virtualinvoke $r7.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: boolean finished()>();

        if $z1 != 0 goto label4;

        $r8 = new java.lang.Error;

        specialinvoke $r8.<java.lang.Error: void <init>(java.lang.String)>("Can\'t deflate all input?");

        throw $r8;

     label4:
        $r9 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterOutputStream: java.io.OutputStream out>;

        virtualinvoke $r9.<java.io.OutputStream: void flush()>();

        return;
    }

    public void <init>(java.io.OutputStream, edu.cmu.cs.mvelezce.zip.zipme.Deflater)
    {
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterOutputStream this;
        java.io.OutputStream out;
        edu.cmu.cs.mvelezce.zip.zipme.Deflater defl;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.DeflaterOutputStream;

        out := @parameter0: java.io.OutputStream;

        defl := @parameter1: edu.cmu.cs.mvelezce.zip.zipme.Deflater;

        specialinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterOutputStream: void <init>(java.io.OutputStream,edu.cmu.cs.mvelezce.zip.zipme.Deflater,int)>(out, defl, 4096);

        return;
    }

    public void close() throws java.io.IOException
    {
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterOutputStream this;
        java.io.OutputStream $r0;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.DeflaterOutputStream;

        virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterOutputStream: void finish()>();

        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterOutputStream: java.io.OutputStream out>;

        virtualinvoke $r0.<java.io.OutputStream: void close()>();

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterOutputStream this;
        byte[] buf;
        int off, len;
        edu.cmu.cs.mvelezce.zip.zipme.Deflater $r0;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.DeflaterOutputStream;

        buf := @parameter0: byte[];

        off := @parameter1: int;

        len := @parameter2: int;

        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterOutputStream: edu.cmu.cs.mvelezce.zip.zipme.Deflater def>;

        virtualinvoke $r0.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: void setInput(byte[],int,int)>(buf, off, len);

        virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterOutputStream: void deflate()>();

        return;
    }

    protected void deflate() throws java.io.IOException
    {
        edu.cmu.cs.mvelezce.zip.zipme.DeflaterOutputStream this;
        int len, $i0;
        edu.cmu.cs.mvelezce.zip.zipme.Deflater $r0, $r1, $r6;
        boolean $z0, $z1;
        byte[] $r2, $r3, $r5;
        java.io.OutputStream $r4;
        java.lang.Error $r7;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.DeflaterOutputStream;

     label1:
        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterOutputStream: edu.cmu.cs.mvelezce.zip.zipme.Deflater def>;

        $z0 = virtualinvoke $r0.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: boolean needsInput()>();

        if $z0 != 0 goto label3;

        $r1 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterOutputStream: edu.cmu.cs.mvelezce.zip.zipme.Deflater def>;

        $r2 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterOutputStream: byte[] buf>;

        $r3 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterOutputStream: byte[] buf>;

        $i0 = lengthof $r3;

        len = virtualinvoke $r1.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: int deflate(byte[],int,int)>($r2, 0, $i0);

        if len > 0 goto label2;

        goto label3;

     label2:
        $r4 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterOutputStream: java.io.OutputStream out>;

        $r5 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterOutputStream: byte[] buf>;

        virtualinvoke $r4.<java.io.OutputStream: void write(byte[],int,int)>($r5, 0, len);

        goto label1;

     label3:
        $r6 = this.<edu.cmu.cs.mvelezce.zip.zipme.DeflaterOutputStream: edu.cmu.cs.mvelezce.zip.zipme.Deflater def>;

        $z1 = virtualinvoke $r6.<edu.cmu.cs.mvelezce.zip.zipme.Deflater: boolean needsInput()>();

        if $z1 != 0 goto label4;

        $r7 = new java.lang.Error;

        specialinvoke $r7.<java.lang.Error: void <init>(java.lang.String)>("Can\'t deflate all input?");

        throw $r7;

     label4:
        return;
    }


