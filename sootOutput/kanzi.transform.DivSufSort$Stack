    void <init>(int)
    {
        kanzi.transform.DivSufSort$Stack this;
        int size, i#6;
        kanzi.transform.DivSufSort$StackElement $r0;
        kanzi.transform.DivSufSort$StackElement[] $r1, $r2;

        this := @this: kanzi.transform.DivSufSort$Stack;

        size := @parameter0: int;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r1 = newarray (kanzi.transform.DivSufSort$StackElement)[size];

        this.<kanzi.transform.DivSufSort$Stack: kanzi.transform.DivSufSort$StackElement[] array> = $r1;

        i#6 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(size);

        if i#6 >= size goto label2;

        $r2 = this.<kanzi.transform.DivSufSort$Stack: kanzi.transform.DivSufSort$StackElement[] array>;

        $r0 = new kanzi.transform.DivSufSort$StackElement;

        specialinvoke $r0.<kanzi.transform.DivSufSort$StackElement: void <init>(kanzi.transform.DivSufSort$1)>(null);

        $r2[i#6] = $r0;

        i#6 = i#6 + 1;

        goto label1;

     label2:
        return;
    }

    static int access$002(kanzi.transform.DivSufSort$Stack, int)
    {
        kanzi.transform.DivSufSort$Stack x0;
        int x1;

        x0 := @parameter0: kanzi.transform.DivSufSort$Stack;

        x1 := @parameter1: int;

        x0.<kanzi.transform.DivSufSort$Stack: int index> = x1;

        return x1;
    }

    kanzi.transform.DivSufSort$StackElement pop()
    {
        kanzi.transform.DivSufSort$Stack this;
        int $i0, $i1, $i2;
        kanzi.transform.DivSufSort$StackElement $r0;
        kanzi.transform.DivSufSort$StackElement[] $r1;

        this := @this: kanzi.transform.DivSufSort$Stack;

        $i0 = this.<kanzi.transform.DivSufSort$Stack: int index>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 0 goto label1;

        $r0 = null;

        goto label2;

     label1:
        $r1 = this.<kanzi.transform.DivSufSort$Stack: kanzi.transform.DivSufSort$StackElement[] array>;

        $i1 = this.<kanzi.transform.DivSufSort$Stack: int index>;

        $i2 = $i1 - 1;

        this.<kanzi.transform.DivSufSort$Stack: int index> = $i2;

        $r0 = $r1[$i2];

     label2:
        return $r0;
    }

    void push(int, int, int, int, int)
    {
        kanzi.transform.DivSufSort$Stack this;
        int a, b, c, d, e, $i0, $i1, $i2;
        kanzi.transform.DivSufSort$StackElement elt;
        kanzi.transform.DivSufSort$StackElement[] $r0;

        this := @this: kanzi.transform.DivSufSort$Stack;

        a := @parameter0: int;

        b := @parameter1: int;

        c := @parameter2: int;

        d := @parameter3: int;

        e := @parameter4: int;

        $r0 = this.<kanzi.transform.DivSufSort$Stack: kanzi.transform.DivSufSort$StackElement[] array>;

        $i0 = this.<kanzi.transform.DivSufSort$Stack: int index>;

        elt = $r0[$i0];

        elt.<kanzi.transform.DivSufSort$StackElement: int a> = a;

        elt.<kanzi.transform.DivSufSort$StackElement: int b> = b;

        elt.<kanzi.transform.DivSufSort$StackElement: int c> = c;

        elt.<kanzi.transform.DivSufSort$StackElement: int d> = d;

        elt.<kanzi.transform.DivSufSort$StackElement: int e> = e;

        $i1 = this.<kanzi.transform.DivSufSort$Stack: int index>;

        $i2 = $i1 + 1;

        this.<kanzi.transform.DivSufSort$Stack: int index> = $i2;

        return;
    }

    int size()
    {
        kanzi.transform.DivSufSort$Stack this;
        int $i0;

        this := @this: kanzi.transform.DivSufSort$Stack;

        $i0 = this.<kanzi.transform.DivSufSort$Stack: int index>;

        return $i0;
    }

    kanzi.transform.DivSufSort$StackElement get(int)
    {
        kanzi.transform.DivSufSort$Stack this;
        int idx;
        kanzi.transform.DivSufSort$StackElement[] $r0;
        kanzi.transform.DivSufSort$StackElement $r1;

        this := @this: kanzi.transform.DivSufSort$Stack;

        idx := @parameter0: int;

        $r0 = this.<kanzi.transform.DivSufSort$Stack: kanzi.transform.DivSufSort$StackElement[] array>;

        $r1 = $r0[idx];

        return $r1;
    }


