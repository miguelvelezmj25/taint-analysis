    static void <clinit>()
    {
        tool.dconvert.arg.RoundingHandler$Strategy $r0;
        java.util.HashSet $r1;
        tool.dconvert.arg.EPlatform[] $r2;
        tool.dconvert.arg.EPlatform $r3, $r4;
        java.util.List $r5;
        tool.dconvert.arg.EOutputCompressionMode $r6;
        tool.dconvert.arg.EScaleMode $r7;
        tool.dconvert.arg.EScalingAlgorithm $r8, $r9;

        $r0 = <tool.dconvert.arg.RoundingHandler$Strategy: tool.dconvert.arg.RoundingHandler$Strategy ROUND_HALF_UP>;

        <tool.dconvert.arg.Arguments: tool.dconvert.arg.RoundingHandler$Strategy DEFAULT_ROUNDING_STRATEGY> = $r0;

        $r1 = new java.util.HashSet;

        $r2 = newarray (tool.dconvert.arg.EPlatform)[2];

        $r3 = <tool.dconvert.arg.EPlatform: tool.dconvert.arg.EPlatform ANDROID>;

        $r2[0] = $r3;

        $r4 = <tool.dconvert.arg.EPlatform: tool.dconvert.arg.EPlatform IOS>;

        $r2[1] = $r4;

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        specialinvoke $r1.<java.util.HashSet: void <init>(java.util.Collection)>($r5);

        <tool.dconvert.arg.Arguments: java.util.Set DEFAULT_PLATFORM> = $r1;

        $r6 = <tool.dconvert.arg.EOutputCompressionMode: tool.dconvert.arg.EOutputCompressionMode SAME_AS_INPUT_PREF_PNG>;

        <tool.dconvert.arg.Arguments: tool.dconvert.arg.EOutputCompressionMode DEFAULT_OUT_COMPRESSION> = $r6;

        $r7 = <tool.dconvert.arg.EScaleMode: tool.dconvert.arg.EScaleMode FACTOR>;

        <tool.dconvert.arg.Arguments: tool.dconvert.arg.EScaleMode DEFAULT_SCALE_TYPE> = $r7;

        $r8 = <tool.dconvert.arg.EScalingAlgorithm: tool.dconvert.arg.EScalingAlgorithm LANCZOS3>;

        <tool.dconvert.arg.Arguments: tool.dconvert.arg.EScalingAlgorithm DEFAULT_UPSCALING_QUALITY> = $r8;

        $r9 = <tool.dconvert.arg.EScalingAlgorithm: tool.dconvert.arg.EScalingAlgorithm LANCZOS3>;

        <tool.dconvert.arg.Arguments: tool.dconvert.arg.EScalingAlgorithm DEFAULT_DOWNSCALING_QUALITY> = $r9;

        return;
    }

    public static tool.dconvert.arg.ImageType getImageType(java.io.File)
    {
        java.io.File srcFile;
        java.lang.String extension, l2, $r13;
        byte l3#5;
        int $i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        tool.dconvert.arg.ImageType $r0, $r1, $r2, $r3, $r4, $r5, $r6;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12;

        srcFile := @parameter0: java.io.File;

        extension = staticinvoke <tool.dconvert.util.MiscUtil: java.lang.String getFileExtensionLowerCase(java.io.File)>(srcFile);

        l2 = extension;

        l3#5 = -1;

        $i0 = virtualinvoke l2.<java.lang.String: int hashCode()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        lookupswitch($i0)
        {
            case 97669: goto label09;
            case 102340: goto label08;
            case 105441: goto label01;
            case 111145: goto label03;
            case 111297: goto label07;
            case 114276: goto label04;
            case 114833: goto label05;
            case 3268712: goto label02;
            case 3559925: goto label06;
            default: goto label10;
        };

     label01:
        $z0 = virtualinvoke l2.<java.lang.String: boolean equals(java.lang.Object)>("jpg");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label10;

        l3#5 = 0;

        goto label10;

     label02:
        $z1 = virtualinvoke l2.<java.lang.String: boolean equals(java.lang.Object)>("jpeg");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label10;

        l3#5 = 1;

        goto label10;

     label03:
        $z2 = virtualinvoke l2.<java.lang.String: boolean equals(java.lang.Object)>("png");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label10;

        l3#5 = 2;

        goto label10;

     label04:
        $z3 = virtualinvoke l2.<java.lang.String: boolean equals(java.lang.Object)>("svg");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label10;

        l3#5 = 3;

        goto label10;

     label05:
        $z4 = virtualinvoke l2.<java.lang.String: boolean equals(java.lang.Object)>("tif");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label10;

        l3#5 = 4;

        goto label10;

     label06:
        $z5 = virtualinvoke l2.<java.lang.String: boolean equals(java.lang.Object)>("tiff");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label10;

        l3#5 = 5;

        goto label10;

     label07:
        $z6 = virtualinvoke l2.<java.lang.String: boolean equals(java.lang.Object)>("psd");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label10;

        l3#5 = 6;

        goto label10;

     label08:
        $z7 = virtualinvoke l2.<java.lang.String: boolean equals(java.lang.Object)>("gif");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 == 0 goto label10;

        l3#5 = 7;

        goto label10;

     label09:
        $z8 = virtualinvoke l2.<java.lang.String: boolean equals(java.lang.Object)>("bmp");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 == 0 goto label10;

        l3#5 = 8;

     label10:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3#5);

        tableswitch(l3#5)
        {
            case 0: goto label11;
            case 1: goto label11;
            case 2: goto label12;
            case 3: goto label13;
            case 4: goto label14;
            case 5: goto label14;
            case 6: goto label15;
            case 7: goto label16;
            case 8: goto label17;
            default: goto label18;
        };

     label11:
        $r0 = <tool.dconvert.arg.ImageType: tool.dconvert.arg.ImageType JPG>;

        return $r0;

     label12:
        $r1 = <tool.dconvert.arg.ImageType: tool.dconvert.arg.ImageType PNG>;

        return $r1;

     label13:
        $r2 = <tool.dconvert.arg.ImageType: tool.dconvert.arg.ImageType SVG>;

        return $r2;

     label14:
        $r3 = <tool.dconvert.arg.ImageType: tool.dconvert.arg.ImageType TIFF>;

        return $r3;

     label15:
        $r4 = <tool.dconvert.arg.ImageType: tool.dconvert.arg.ImageType PSD>;

        return $r4;

     label16:
        $r5 = <tool.dconvert.arg.ImageType: tool.dconvert.arg.ImageType GIF>;

        return $r5;

     label17:
        $r6 = <tool.dconvert.arg.ImageType: tool.dconvert.arg.ImageType BMP>;

        return $r6;

     label18:
        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown file extension ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(extension);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in srcFile ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(srcFile);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r7;
    }

    public static java.util.List getOutCompressionForType(tool.dconvert.arg.EOutputCompressionMode, tool.dconvert.arg.ImageType)
    {
        tool.dconvert.arg.EOutputCompressionMode type;
        tool.dconvert.arg.ImageType imageType;
        java.util.ArrayList list, $r0;
        int[] $r1;
        int $i0, $i1;
        tool.dconvert.arg.ImageType$ECompression $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        type := @parameter0: tool.dconvert.arg.EOutputCompressionMode;

        imageType := @parameter1: tool.dconvert.arg.ImageType;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(2);

        list = $r0;

        $r1 = <tool.dconvert.arg.Arguments$1: int[] $SwitchMap$tool$dconvert$arg$EOutputCompressionMode>;

        $i0 = virtualinvoke type.<tool.dconvert.arg.EOutputCompressionMode: int ordinal()>();

        $i1 = $r1[$i0];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            case 6: goto label6;
            case 7: goto label7;
            default: goto label7;
        };

     label1:
        $r2 = <tool.dconvert.arg.ImageType$ECompression: tool.dconvert.arg.ImageType$ECompression GIF>;

        interfaceinvoke list.<java.util.List: boolean add(java.lang.Object)>($r2);

        goto label8;

     label2:
        $r3 = <tool.dconvert.arg.ImageType$ECompression: tool.dconvert.arg.ImageType$ECompression PNG>;

        interfaceinvoke list.<java.util.List: boolean add(java.lang.Object)>($r3);

        goto label8;

     label3:
        $r4 = <tool.dconvert.arg.ImageType$ECompression: tool.dconvert.arg.ImageType$ECompression JPG>;

        interfaceinvoke list.<java.util.List: boolean add(java.lang.Object)>($r4);

        goto label8;

     label4:
        $r5 = <tool.dconvert.arg.ImageType$ECompression: tool.dconvert.arg.ImageType$ECompression JPG>;

        interfaceinvoke list.<java.util.List: boolean add(java.lang.Object)>($r5);

        $r6 = <tool.dconvert.arg.ImageType$ECompression: tool.dconvert.arg.ImageType$ECompression PNG>;

        interfaceinvoke list.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label8;

     label5:
        $r7 = <tool.dconvert.arg.ImageType$ECompression: tool.dconvert.arg.ImageType$ECompression BMP>;

        interfaceinvoke list.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label8;

     label6:
        $r8 = imageType.<tool.dconvert.arg.ImageType: tool.dconvert.arg.ImageType$ECompression outCompressionCompat>;

        interfaceinvoke list.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label8;

     label7:
        $r9 = imageType.<tool.dconvert.arg.ImageType: tool.dconvert.arg.ImageType$ECompression outCompressionStrict>;

        interfaceinvoke list.<java.util.List: boolean add(java.lang.Object)>($r9);

     label8:
        return list;
    }

    public void <init>(java.io.File, java.io.File, float, java.util.Set, tool.dconvert.arg.EOutputCompressionMode, tool.dconvert.arg.EScaleMode, tool.dconvert.arg.EScalingAlgorithm, tool.dconvert.arg.EScalingAlgorithm, float, int, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, tool.dconvert.arg.RoundingHandler$Strategy, boolean, boolean)
    {
        tool.dconvert.arg.Arguments this;
        java.io.File src, dst, file;
        float scale, compressionQuality;
        java.util.Set platform, supportedFileTypes;
        tool.dconvert.arg.EOutputCompressionMode outputCompressionMode;
        tool.dconvert.arg.EScaleMode scaleMode;
        tool.dconvert.arg.EScalingAlgorithm downScalingAlgorithm, upScalingAlgorithm;
        int threadCount, l29, l30#65;
        boolean skipExistingFiles, skipUpscaling, verboseLog, includeAndroidLdpiTvdpi, haltOnError, createMipMapInsteadOfDrawableDir, iosCreateImagesetFolders, enablePngCrush, enableMozJpeg, postConvertWebp, enableAntiAliasing, dryRun, keepUnoptimizedFilesPostProcessor, guiAdvancedOptions, clearDirBeforeConvert, $z0, $z1, $z3;
        tool.dconvert.arg.RoundingHandler$Strategy roundingHandler;
        java.io.File[] l28;
        java.lang.String extension, $r2;
        java.util.ArrayList $r0;
        java.util.List $r1, $r3;

        this := @this: tool.dconvert.arg.Arguments;

        src := @parameter0: java.io.File;

        dst := @parameter1: java.io.File;

        scale := @parameter2: float;

        platform := @parameter3: java.util.Set;

        outputCompressionMode := @parameter4: tool.dconvert.arg.EOutputCompressionMode;

        scaleMode := @parameter5: tool.dconvert.arg.EScaleMode;

        downScalingAlgorithm := @parameter6: tool.dconvert.arg.EScalingAlgorithm;

        upScalingAlgorithm := @parameter7: tool.dconvert.arg.EScalingAlgorithm;

        compressionQuality := @parameter8: float;

        threadCount := @parameter9: int;

        skipExistingFiles := @parameter10: boolean;

        skipUpscaling := @parameter11: boolean;

        verboseLog := @parameter12: boolean;

        includeAndroidLdpiTvdpi := @parameter13: boolean;

        haltOnError := @parameter14: boolean;

        createMipMapInsteadOfDrawableDir := @parameter15: boolean;

        iosCreateImagesetFolders := @parameter16: boolean;

        enablePngCrush := @parameter17: boolean;

        enableMozJpeg := @parameter18: boolean;

        postConvertWebp := @parameter19: boolean;

        enableAntiAliasing := @parameter20: boolean;

        dryRun := @parameter21: boolean;

        keepUnoptimizedFilesPostProcessor := @parameter22: boolean;

        roundingHandler := @parameter23: tool.dconvert.arg.RoundingHandler$Strategy;

        guiAdvancedOptions := @parameter24: boolean;

        clearDirBeforeConvert := @parameter25: boolean;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<tool.dconvert.arg.Arguments: java.io.File dst> = dst;

        this.<tool.dconvert.arg.Arguments: java.io.File src> = src;

        this.<tool.dconvert.arg.Arguments: float scale> = scale;

        this.<tool.dconvert.arg.Arguments: java.util.Set platform> = platform;

        this.<tool.dconvert.arg.Arguments: tool.dconvert.arg.EOutputCompressionMode outputCompressionMode> = outputCompressionMode;

        this.<tool.dconvert.arg.Arguments: tool.dconvert.arg.EScaleMode scaleMode> = scaleMode;

        this.<tool.dconvert.arg.Arguments: tool.dconvert.arg.EScalingAlgorithm downScalingAlgorithm> = downScalingAlgorithm;

        this.<tool.dconvert.arg.Arguments: tool.dconvert.arg.EScalingAlgorithm upScalingAlgorithm> = upScalingAlgorithm;

        this.<tool.dconvert.arg.Arguments: float compressionQuality> = compressionQuality;

        this.<tool.dconvert.arg.Arguments: int threadCount> = threadCount;

        this.<tool.dconvert.arg.Arguments: boolean skipExistingFiles> = skipExistingFiles;

        this.<tool.dconvert.arg.Arguments: boolean skipUpscaling> = skipUpscaling;

        this.<tool.dconvert.arg.Arguments: boolean verboseLog> = verboseLog;

        this.<tool.dconvert.arg.Arguments: boolean includeAndroidLdpiTvdpi> = includeAndroidLdpiTvdpi;

        this.<tool.dconvert.arg.Arguments: boolean haltOnError> = haltOnError;

        this.<tool.dconvert.arg.Arguments: boolean createMipMapInsteadOfDrawableDir> = createMipMapInsteadOfDrawableDir;

        this.<tool.dconvert.arg.Arguments: boolean iosCreateImagesetFolders> = iosCreateImagesetFolders;

        this.<tool.dconvert.arg.Arguments: boolean enablePngCrush> = enablePngCrush;

        this.<tool.dconvert.arg.Arguments: boolean enableMozJpeg> = enableMozJpeg;

        this.<tool.dconvert.arg.Arguments: boolean postConvertWebp> = postConvertWebp;

        this.<tool.dconvert.arg.Arguments: boolean enableAntiAliasing> = enableAntiAliasing;

        this.<tool.dconvert.arg.Arguments: boolean dryRun> = dryRun;

        this.<tool.dconvert.arg.Arguments: boolean keepUnoptimizedFilesPostProcessor> = keepUnoptimizedFilesPostProcessor;

        this.<tool.dconvert.arg.Arguments: tool.dconvert.arg.RoundingHandler$Strategy roundingHandler> = roundingHandler;

        this.<tool.dconvert.arg.Arguments: boolean guiAdvancedOptions> = guiAdvancedOptions;

        this.<tool.dconvert.arg.Arguments: boolean clearDirBeforeConvert> = clearDirBeforeConvert;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        this.<tool.dconvert.arg.Arguments: java.util.List filesToProcess> = $r0;

        supportedFileTypes = staticinvoke <tool.dconvert.arg.Arguments: java.util.Set getSupportedFileTypes()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(src);

        if src == null goto label4;

        $z0 = virtualinvoke src.<java.io.File: boolean isDirectory()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label4;

        l28 = virtualinvoke src.<java.io.File: java.io.File[] listFiles()>();

        l29 = lengthof l28;

        l30#65 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l30#65);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l29);

        if l30#65 >= l29 goto label3;

        file = l28[l30#65];

        extension = staticinvoke <tool.dconvert.util.MiscUtil: java.lang.String getFileExtensionLowerCase(java.io.File)>(file);

        $z1 = interfaceinvoke supportedFileTypes.<java.util.Set: boolean contains(java.lang.Object)>(extension);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        $r1 = this.<tool.dconvert.arg.Arguments: java.util.List filesToProcess>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(file);

     label2:
        l30#65 = l30#65 + 1;

        goto label1;

     label3:
        goto label5;

     label4:
        $r2 = staticinvoke <tool.dconvert.util.MiscUtil: java.lang.String getFileExtensionLowerCase(java.io.File)>(src);

        $z3 = interfaceinvoke supportedFileTypes.<java.util.Set: boolean contains(java.lang.Object)>($r2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label5;

        $r3 = this.<tool.dconvert.arg.Arguments: java.util.List filesToProcess>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(src);

     label5:
        return;
    }

    public static java.util.Set getSupportedFileTypes()
    {
        java.util.HashSet set, $r0;
        tool.dconvert.arg.ImageType[] l1;
        int l2, l3#7;
        tool.dconvert.arg.ImageType imageType;
        boolean $z0;
        java.lang.String[] $r1;
        java.util.List $r2;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        set = $r0;

        l1 = staticinvoke <tool.dconvert.arg.ImageType: tool.dconvert.arg.ImageType[] values()>();

        l2 = lengthof l1;

        l3#7 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3#7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l2);

        if l3#7 >= l2 goto label3;

        imageType = l1[l3#7];

        $z0 = imageType.<tool.dconvert.arg.ImageType: boolean supportRead>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $r1 = imageType.<tool.dconvert.arg.ImageType: java.lang.String[] extensions>;

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        interfaceinvoke set.<java.util.Set: boolean addAll(java.util.Collection)>($r2);

     label2:
        l3#7 = l3#7 + 1;

        goto label1;

     label3:
        return set;
    }

    public double round(double)
    {
        tool.dconvert.arg.Arguments this;
        double raw, $d0;
        tool.dconvert.arg.RoundingHandler $r0;
        tool.dconvert.arg.RoundingHandler$Strategy $r1;
        long $l0;

        this := @this: tool.dconvert.arg.Arguments;

        raw := @parameter0: double;

        $r0 = new tool.dconvert.arg.RoundingHandler;

        $r1 = this.<tool.dconvert.arg.Arguments: tool.dconvert.arg.RoundingHandler$Strategy roundingHandler>;

        specialinvoke $r0.<tool.dconvert.arg.RoundingHandler: void <init>(tool.dconvert.arg.RoundingHandler$Strategy)>($r1);

        $l0 = virtualinvoke $r0.<tool.dconvert.arg.RoundingHandler: long round(double)>(raw);

        $d0 = (double) $l0;

        return $d0;
    }


