    public void resetOptions()
    {
        weka.core.converters.AbstractSaver this;

        this := @this: weka.core.converters.AbstractSaver;

        this.<weka.core.converters.AbstractSaver: weka.core.Instances m_instances> = null;

        this.<weka.core.converters.AbstractSaver: int m_writeMode> = 1;

        return;
    }

    public void <init>()
    {
        weka.core.converters.AbstractSaver this;

        this := @this: weka.core.converters.AbstractSaver;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<weka.core.converters.AbstractSaver: boolean m_DoNotCheckCapabilities> = 0;

        return;
    }

    public weka.core.Instances getInstances()
    {
        weka.core.converters.AbstractSaver this;
        weka.core.Instances $r0;

        this := @this: weka.core.converters.AbstractSaver;

        $r0 = this.<weka.core.converters.AbstractSaver: weka.core.Instances m_instances>;

        return $r0;
    }

    protected int getRetrieval()
    {
        weka.core.converters.AbstractSaver this;
        int $i0;

        this := @this: weka.core.converters.AbstractSaver;

        $i0 = this.<weka.core.converters.AbstractSaver: int m_retrieval>;

        return $i0;
    }

    public void setRetrieval(int)
    {
        weka.core.converters.AbstractSaver this;
        int mode;

        this := @this: weka.core.converters.AbstractSaver;

        mode := @parameter0: int;

        this.<weka.core.converters.AbstractSaver: int m_retrieval> = mode;

        return;
    }

    protected void setWriteMode(int)
    {
        weka.core.converters.AbstractSaver this;
        int mode;

        this := @this: weka.core.converters.AbstractSaver;

        mode := @parameter0: int;

        this.<weka.core.converters.AbstractSaver: int m_writeMode> = mode;

        return;
    }

    public void setInstances(weka.core.Instances)
    {
        weka.core.converters.AbstractSaver this;
        weka.core.Instances instances;
        weka.core.Capabilities cap;
        boolean $z0;
        java.lang.IllegalArgumentException $r0;
        java.lang.Exception $r1;
        int $i0, $i1;

        this := @this: weka.core.converters.AbstractSaver;

        instances := @parameter0: weka.core.Instances;

        cap = virtualinvoke this.<weka.core.converters.AbstractSaver: weka.core.Capabilities getCapabilities()>();

        $z0 = virtualinvoke cap.<weka.core.Capabilities: boolean test(weka.core.Instances)>(instances);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = virtualinvoke cap.<weka.core.Capabilities: java.lang.Exception getFailReason()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r1);

        throw $r0;

     label1:
        $i0 = this.<weka.core.converters.AbstractSaver: int m_retrieval>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 2 goto label2;

        $i1 = virtualinvoke this.<weka.core.converters.AbstractSaver: int setStructure(weka.core.Instances)>(instances);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 != 2 goto label3;

        virtualinvoke this.<weka.core.converters.AbstractSaver: void cancel()>();

        goto label3;

     label2:
        this.<weka.core.converters.AbstractSaver: weka.core.Instances m_instances> = instances;

     label3:
        return;
    }

    public int setStructure(weka.core.Instances)
    {
        weka.core.converters.AbstractSaver this;
        weka.core.Instances headerInfo, $r2;
        weka.core.Capabilities cap;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r0;
        java.lang.Exception $r1;
        int $i0, $i1, $i2, $i3;
        java.io.PrintStream $r3;

        this := @this: weka.core.converters.AbstractSaver;

        headerInfo := @parameter0: weka.core.Instances;

        cap = virtualinvoke this.<weka.core.converters.AbstractSaver: weka.core.Capabilities getCapabilities()>();

        $z0 = virtualinvoke cap.<weka.core.Capabilities: boolean test(weka.core.Instances)>(headerInfo);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = virtualinvoke cap.<weka.core.Capabilities: java.lang.Exception getFailReason()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r1);

        throw $r0;

     label1:
        $i0 = this.<weka.core.converters.AbstractSaver: int m_writeMode>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 1 goto label2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(headerInfo);

        if headerInfo == null goto label2;

        this.<weka.core.converters.AbstractSaver: weka.core.Instances m_instances> = headerInfo;

        this.<weka.core.converters.AbstractSaver: int m_writeMode> = 3;

        goto label5;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(headerInfo);

        if headerInfo == null goto label3;

        $i1 = this.<weka.core.converters.AbstractSaver: int m_writeMode>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 != 3 goto label3;

        $r2 = this.<weka.core.converters.AbstractSaver: weka.core.Instances m_instances>;

        $z1 = virtualinvoke headerInfo.<weka.core.Instances: boolean equalHeaders(weka.core.Instances)>($r2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label5;

     label3:
        this.<weka.core.converters.AbstractSaver: weka.core.Instances m_instances> = null;

        $i2 = this.<weka.core.converters.AbstractSaver: int m_writeMode>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 == 1 goto label4;

        $r3 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("A structure cannot be set up during an active incremental saving process.");

     label4:
        this.<weka.core.converters.AbstractSaver: int m_writeMode> = 2;

     label5:
        $i3 = this.<weka.core.converters.AbstractSaver: int m_writeMode>;

        return $i3;
    }

    public int getWriteMode()
    {
        weka.core.converters.AbstractSaver this;
        int $i0;

        this := @this: weka.core.converters.AbstractSaver;

        $i0 = this.<weka.core.converters.AbstractSaver: int m_writeMode>;

        return $i0;
    }

    public weka.core.Capabilities getCapabilities()
    {
        weka.core.converters.AbstractSaver this;
        weka.core.Capabilities result, $r0;

        this := @this: weka.core.converters.AbstractSaver;

        $r0 = new weka.core.Capabilities;

        specialinvoke $r0.<weka.core.Capabilities: void <init>(weka.core.CapabilitiesHandler)>(this);

        result = $r0;

        virtualinvoke result.<weka.core.Capabilities: void setMinimumNumberInstances(int)>(0);

        return result;
    }

    public boolean getDoNotCheckCapabilities()
    {
        weka.core.converters.AbstractSaver this;
        boolean $z0;

        this := @this: weka.core.converters.AbstractSaver;

        $z0 = this.<weka.core.converters.AbstractSaver: boolean m_DoNotCheckCapabilities>;

        return $z0;
    }


