    public boolean add(java.lang.Object)
    {
        java.util.Collections$SetFromMap l0;
        java.lang.Object l1, $r2;
        java.lang.Boolean $r0;
        java.util.Map $r1;
        boolean $z0;

        l0 := @this: java.util.Collections$SetFromMap;

        l1 := @parameter0: java.lang.Object;

        $r1 = l0.<java.util.Collections$SetFromMap: java.util.Map m>;

        $r0 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(l1, $r0);

        if $r2 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    void <init>(java.util.Map)
    {
        java.util.Collections$SetFromMap l0;
        java.util.Map l1;
        boolean $z0;
        java.lang.IllegalArgumentException $r0;
        java.util.Set $r1;

        l0 := @this: java.util.Collections$SetFromMap;

        l1 := @parameter0: java.util.Map;

        specialinvoke l0.<java.util.AbstractSet: void <init>()>();

        $z0 = interfaceinvoke l1.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Map is non-empty");

        throw $r0;

     label1:
        l0.<java.util.Collections$SetFromMap: java.util.Map m> = l1;

        $r1 = interfaceinvoke l1.<java.util.Map: java.util.Set keySet()>();

        l0.<java.util.Collections$SetFromMap: java.util.Set s> = $r1;

        return;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.Collections$SetFromMap l0;
        java.lang.Object l1;
        java.util.Map $r0;
        boolean $z0;

        l0 := @this: java.util.Collections$SetFromMap;

        l1 := @parameter0: java.lang.Object;

        $r0 = l0.<java.util.Collections$SetFromMap: java.util.Map m>;

        $z0 = interfaceinvoke $r0.<java.util.Map: boolean containsKey(java.lang.Object)>(l1);

        return $z0;
    }


