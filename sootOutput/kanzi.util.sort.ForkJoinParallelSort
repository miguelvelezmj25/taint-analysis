    public boolean sort(int[], int, int)
    {
        kanzi.util.sort.ForkJoinParallelSort this;
        int[] array;
        int idx, len;
        kanzi.util.sort.ForkJoinParallelSort$SortTask $r0;
        java.util.concurrent.RejectedExecutionException e, $r3;
        java.util.concurrent.ForkJoinPool $r1;

        this := @this: kanzi.util.sort.ForkJoinParallelSort;

        array := @parameter0: int[];

        idx := @parameter1: int;

        len := @parameter2: int;

     label1:
        $r1 = this.<kanzi.util.sort.ForkJoinParallelSort: java.util.concurrent.ForkJoinPool pool>;

        $r0 = new kanzi.util.sort.ForkJoinParallelSort$SortTask;

        specialinvoke $r0.<kanzi.util.sort.ForkJoinParallelSort$SortTask: void <init>(int[],int,int)>(array, idx, len);

        virtualinvoke $r1.<java.util.concurrent.ForkJoinPool: java.lang.Object invoke(java.util.concurrent.ForkJoinTask)>($r0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        e = $r3;

        return 0;

     label4:
        return 1;

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
    }


