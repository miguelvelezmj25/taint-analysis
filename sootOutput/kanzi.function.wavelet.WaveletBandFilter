    public boolean forward(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.function.wavelet.WaveletBandFilter this;
        kanzi.SliceIntArray source, destination;
        int[] src, dst, $r0, $r2, $r3, $r4;
        int w0, h0, start, w, len, idx, x, y, srcIdx#3, dstIdx#6, $i0, $i1, $i2, $i3, $i4, j#32, offset#34, i#38, $i5, $i6, $i7, $i8, $i9, $i10, $i11, count#65, $i12, $i13, i#81, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25;
        kanzi.function.wavelet.WaveletBandScanner sc, $r1;

        this := @this: kanzi.function.wavelet.WaveletBandFilter;

        source := @parameter0: kanzi.SliceIntArray;

        destination := @parameter1: kanzi.SliceIntArray;

        srcIdx#3 = source.<kanzi.SliceIntArray: int index>;

        dstIdx#6 = destination.<kanzi.SliceIntArray: int index>;

        src = source.<kanzi.SliceIntArray: int[] array>;

        dst = destination.<kanzi.SliceIntArray: int[] array>;

        $i0 = this.<kanzi.function.wavelet.WaveletBandFilter: int width>;

        $i1 = this.<kanzi.function.wavelet.WaveletBandFilter: int levels>;

        w0 = $i0 >> $i1;

        $i2 = this.<kanzi.function.wavelet.WaveletBandFilter: int height>;

        $i3 = this.<kanzi.function.wavelet.WaveletBandFilter: int levels>;

        h0 = $i2 >> $i3;

        $r0 = this.<kanzi.function.wavelet.WaveletBandFilter: int[] quantizers>;

        virtualinvoke this.<kanzi.function.wavelet.WaveletBandFilter: void quantize(int[],int,int[])>(src, srcIdx#3, $r0);

        $i4 = this.<kanzi.function.wavelet.WaveletBandFilter: int minClusterSize>;

        if $i4 <= 0 goto label01;

        virtualinvoke this.<kanzi.function.wavelet.WaveletBandFilter: void filter(int[],int)>(src, srcIdx#3);

     label01:
        j#32 = 0;

        offset#34 = srcIdx#3;

     label02:
        if j#32 >= h0 goto label05;

        i#38 = 0;

     label03:
        if i#38 >= w0 goto label04;

        $i5 = dstIdx#6;

        dstIdx#6 = dstIdx#6 + 1;

        $i6 = offset#34 + i#38;

        $i7 = src[$i6];

        dst[$i5] = $i7;

        i#38 = i#38 + 1;

        goto label03;

     label04:
        $i8 = this.<kanzi.function.wavelet.WaveletBandFilter: int width>;

        offset#34 = offset#34 + $i8;

        j#32 = j#32 + 1;

        goto label02;

     label05:
        start = srcIdx#3;

        $r1 = new kanzi.function.wavelet.WaveletBandScanner;

        $i9 = this.<kanzi.function.wavelet.WaveletBandFilter: int width>;

        $i10 = this.<kanzi.function.wavelet.WaveletBandFilter: int height>;

        $i11 = this.<kanzi.function.wavelet.WaveletBandFilter: int levels>;

        specialinvoke $r1.<kanzi.function.wavelet.WaveletBandScanner: void <init>(int,int,int,int)>($i9, $i10, 7, $i11);

        sc = $r1;

        w = this.<kanzi.function.wavelet.WaveletBandFilter: int width>;

        count#65 = 0;

     label06:
        $i12 = virtualinvoke sc.<kanzi.function.wavelet.WaveletBandScanner: int getSize()>();

        if count#65 >= $i12 goto label12;

        $r2 = this.<kanzi.function.wavelet.WaveletBandFilter: int[] buffer>;

        $r3 = this.<kanzi.function.wavelet.WaveletBandFilter: int[] buffer>;

        $i13 = lengthof $r3;

        len = virtualinvoke sc.<kanzi.function.wavelet.WaveletBandScanner: int getIndexes(int[],int,int)>($r2, $i13, count#65);

        count#65 = count#65 + len;

        i#81 = 0;

     label07:
        if i#81 >= len goto label11;

        $r4 = this.<kanzi.function.wavelet.WaveletBandFilter: int[] buffer>;

        $i14 = $r4[i#81];

        idx = start + $i14;

        $i15 = src[idx];

        if $i15 == 127 goto label08;

        $i16 = dstIdx#6;

        dstIdx#6 = dstIdx#6 + 1;

        $i17 = src[idx];

        dst[$i16] = $i17;

        goto label10;

     label08:
        $i18 = idx % w;

        x = $i18 >> 1;

        $i19 = idx / w;

        y = $i19 >> 1;

        if x >= w0 goto label09;

        if y >= h0 goto label09;

        $i20 = dstIdx#6;

        dstIdx#6 = dstIdx#6 + 1;

        dst[$i20] = 127;

        goto label10;

     label09:
        $i21 = y * w;

        $i22 = start + $i21;

        $i23 = $i22 + x;

        $i24 = src[$i23];

        if $i24 == 127 goto label10;

        $i25 = dstIdx#6;

        dstIdx#6 = dstIdx#6 + 1;

        dst[$i25] = 127;

     label10:
        i#81 = i#81 + 1;

        srcIdx#3 = srcIdx#3 + 1;

        goto label07;

     label11:
        goto label06;

     label12:
        source.<kanzi.SliceIntArray: int index> = srcIdx#3;

        destination.<kanzi.SliceIntArray: int index> = dstIdx#6;

        return 1;
    }

    protected void quantize(int[], int, int[])
    {
        kanzi.function.wavelet.WaveletBandFilter this;
        int[] block, qt, indexes, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r9, $r10;
        int srcIdx, w, w0, h0, end, q0, q1, adjust, val, diff, len, val, processed, idx, $i0, $i1, $i2, $i3, $i4, $i5, $i6, levelSize#26, max#31, $i7, offset#38, j#42, $i8, val#50, $i9, $i10, $i11, val#60, $i12, minErr#76, bestQ#78, q#80, err#84, offset#89, j#93, $i13, $i14, $i15, scaled#107, $i16, $i17, $i18, max#143, i#145, $i19, $i20, val#155, $i21, $i22, $i23, val#165, $i25, $i26, $i27, $i28, i#184, $i29, $i30, $i31, $i32, $i33, $i34, quant#211, adjust#215, j#217, offset#219, i#223, $i35, $i36, $i37, $i38, $i39, $i40, $i41, buffSize#255, $i42, startHHBand#261, levelWritten#263, level#264, quant#268, count#270, $i43, adjust#286, n#288, $i44, val#300, $i45, $i46, $i48, $i49, $i50, $i51, $i52, $i53;
        kanzi.function.wavelet.WaveletBandScanner sc, $r0;
        boolean $z0;
        byte level#207;

        this := @this: kanzi.function.wavelet.WaveletBandFilter;

        block := @parameter0: int[];

        srcIdx := @parameter1: int;

        qt := @parameter2: int[];

        $r0 = new kanzi.function.wavelet.WaveletBandScanner;

        $i0 = this.<kanzi.function.wavelet.WaveletBandFilter: int width>;

        $i1 = this.<kanzi.function.wavelet.WaveletBandFilter: int height>;

        $i2 = this.<kanzi.function.wavelet.WaveletBandFilter: int levels>;

        specialinvoke $r0.<kanzi.function.wavelet.WaveletBandScanner: void <init>(int,int,int,int)>($i0, $i1, 7, $i2);

        sc = $r0;

        w = this.<kanzi.function.wavelet.WaveletBandFilter: int width>;

        $i3 = this.<kanzi.function.wavelet.WaveletBandFilter: int levels>;

        w0 = w >> $i3;

        $i4 = this.<kanzi.function.wavelet.WaveletBandFilter: int height>;

        $i5 = this.<kanzi.function.wavelet.WaveletBandFilter: int levels>;

        h0 = $i4 >> $i5;

        $i6 = 3 * w0;

        levelSize#26 = $i6 * h0;

        $z0 = this.<kanzi.function.wavelet.WaveletBandFilter: boolean setQuantizers>;

        if $z0 != 1 goto label26;

        max#31 = 0;

        $i7 = w * h0;

        end = srcIdx + $i7;

        offset#38 = srcIdx;

     label01:
        if offset#38 >= end goto label05;

        j#42 = 0;

     label02:
        if j#42 >= w0 goto label04;

        $i8 = offset#38 + j#42;

        val#50 = block[$i8];

        $i9 = val#50 >> 31;

        $i10 = val#50 + $i9;

        $i11 = val#50 >> 31;

        val#60 = $i10 ^ $i11;

        if val#60 <= max#31 goto label03;

        max#31 = val#60;

     label03:
        j#42 = j#42 + 1;

        goto label02;

     label04:
        offset#38 = offset#38 + w;

        goto label01;

     label05:
        q0 = max#31 >> 9;

        $i12 = q0 >> 3;

        q1 = q0 + $i12;

        minErr#76 = 2147483647;

        bestQ#78 = q0;

        q#80 = q0;

     label06:
        if q#80 > q1 goto label18;

        err#84 = 0;

        adjust = q#80 >> 1;

        offset#89 = srcIdx;

     label07:
        if offset#89 >= end goto label16;

        j#93 = 0;

     label08:
        if j#93 >= w0 goto label15;

        $i13 = offset#89 + j#93;

        val = block[$i13];

        if q#80 != 0 goto label09;

        $i14 = val;

        goto label10;

     label09:
        $i15 = val + adjust;

        $i14 = $i15 / q#80;

     label10:
        scaled#107 = $i14;

        if scaled#107 <= 127 goto label11;

        scaled#107 = 127;

     label11:
        $i16 = q#80 * scaled#107;

        diff = val - $i16;

        $i17 = err#84;

        if diff < 0 goto label12;

        $i18 = diff;

        goto label13;

     label12:
        $i18 = neg diff;

     label13:
        err#84 = $i17 + $i18;

        if err#84 <= minErr#76 goto label14;

        goto label15;

     label14:
        j#93 = j#93 + 1;

        goto label08;

     label15:
        offset#89 = offset#89 + w;

        goto label07;

     label16:
        if err#84 >= minErr#76 goto label17;

        minErr#76 = err#84;

        bestQ#78 = q#80;

     label17:
        q#80 = q#80 + 1;

        goto label06;

     label18:
        $r1 = this.<kanzi.function.wavelet.WaveletBandFilter: int[] quantizers>;

        $r1[0] = bestQ#78;

        indexes = newarray (int)[levelSize#26];

        len = virtualinvoke sc.<kanzi.function.wavelet.WaveletBandScanner: int getBandIndexes(int[],int,int,int)>(indexes, w0, h0, 0);

        max#143 = 0;

        i#145 = 0;

     label19:
        if i#145 >= len goto label21;

        $i19 = indexes[i#145];

        $i20 = srcIdx + $i19;

        val#155 = block[$i20];

        $i21 = val#155 >> 31;

        $i22 = val#155 + $i21;

        $i23 = val#155 >> 31;

        val#165 = $i22 ^ $i23;

        if val#165 <= max#143 goto label20;

        max#143 = val#165;

     label20:
        i#145 = i#145 + 1;

        goto label19;

     label21:
        $r2 = this.<kanzi.function.wavelet.WaveletBandFilter: int[] quantizers>;

        $i25 = max#143 >> 8;

        $i26 = $i25 + 1;

        if $i26 >= 18 goto label22;

        $i27 = max#143 >> 8;

        $i28 = $i27 + 1;

        goto label23;

     label22:
        $i28 = 18;

     label23:
        $r2[1] = $i28;

        i#184 = 2;

     label24:
        $r3 = this.<kanzi.function.wavelet.WaveletBandFilter: int[] quantizers>;

        $i29 = lengthof $r3;

        if i#184 >= $i29 goto label25;

        $r4 = this.<kanzi.function.wavelet.WaveletBandFilter: int[] quantizers>;

        $r5 = this.<kanzi.function.wavelet.WaveletBandFilter: int[] quantizers>;

        $i30 = i#184 - 1;

        $i31 = $r5[$i30];

        $i32 = $i31 * 17;

        $i33 = $i32 + 2;

        $i34 = $i33 >> 4;

        $r4[i#184] = $i34;

        i#184 = i#184 + 1;

        goto label24;

     label25:
        this.<kanzi.function.wavelet.WaveletBandFilter: boolean setQuantizers> = 0;

     label26:
        level#207 = 0;

        quant#211 = qt[level#207];

        adjust#215 = quant#211 >> 1;

        j#217 = 0;

        offset#219 = srcIdx;

     label27:
        if j#217 >= h0 goto label32;

        i#223 = 0;

     label28:
        if i#223 >= w0 goto label31;

        $i35 = offset#219 + i#223;

        val = block[$i35];

        if val <= 0 goto label29;

        $i36 = offset#219 + i#223;

        $i37 = val + adjust#215;

        $i38 = $i37 / quant#211;

        block[$i36] = $i38;

        goto label30;

     label29:
        if val >= 0 goto label30;

        $i39 = offset#219 + i#223;

        $i40 = val - adjust#215;

        $i41 = $i40 / quant#211;

        block[$i39] = $i41;

     label30:
        i#223 = i#223 + 1;

        goto label28;

     label31:
        j#217 = j#217 + 1;

        offset#219 = offset#219 + w;

        goto label27;

     label32:
        buffSize#255 = levelSize#26;

        $i42 = levelSize#26 + levelSize#26;

        startHHBand#261 = $i42 / 3;

        levelWritten#263 = 0;

        level#264 = level#207 + 1;

        quant#268 = qt[level#264];

        count#270 = 0;

     label33:
        $i43 = virtualinvoke sc.<kanzi.function.wavelet.WaveletBandScanner: int getSize()>();

        if count#270 >= $i43 goto label43;

        $r6 = this.<kanzi.function.wavelet.WaveletBandFilter: int[] buffer>;

        processed = virtualinvoke sc.<kanzi.function.wavelet.WaveletBandScanner: int getIndexes(int[],int,int)>($r6, buffSize#255, count#270);

        count#270 = count#270 + processed;

        adjust#286 = quant#268 >> 1;

        n#288 = 0;

     label34:
        if n#288 >= processed goto label40;

        $r7 = this.<kanzi.function.wavelet.WaveletBandFilter: int[] buffer>;

        $i44 = $r7[n#288];

        idx = srcIdx + $i44;

        val#300 = block[idx];

        if val#300 <= 0 goto label35;

        $i45 = val#300 + adjust#286;

        val#300 = $i45 / quant#268;

        goto label36;

     label35:
        if val#300 >= 0 goto label36;

        $i46 = val#300 - adjust#286;

        val#300 = $i46 / quant#268;

     label36:
        if val#300 == 127 goto label37;

        $i48 = val#300;

        goto label38;

     label37:
        $i48 = val#300 - 1;

     label38:
        block[idx] = $i48;

        $i49 = levelWritten#263 + n#288;

        if $i49 != startHHBand#261 goto label39;

        $i50 = quant#268 * 9;

        quant#268 = $i50 >> 3;

        adjust#286 = quant#268 >> 1;

     label39:
        n#288 = n#288 + 1;

        goto label34;

     label40:
        levelWritten#263 = levelWritten#263 + processed;

        if levelWritten#263 != levelSize#26 goto label41;

        levelSize#26 = levelSize#26 << 2;

        levelWritten#263 = 0;

        level#264 = level#264 + 1;

        $i51 = levelSize#26 + levelSize#26;

        startHHBand#261 = $i51 / 3;

        $i52 = lengthof qt;

        if level#264 >= $i52 goto label41;

        quant#268 = qt[level#264];

     label41:
        buffSize#255 = levelSize#26 - levelWritten#263;

        $r9 = this.<kanzi.function.wavelet.WaveletBandFilter: int[] buffer>;

        $i53 = lengthof $r9;

        if buffSize#255 <= $i53 goto label42;

        $r10 = this.<kanzi.function.wavelet.WaveletBandFilter: int[] buffer>;

        buffSize#255 = lengthof $r10;

     label42:
        goto label33;

     label43:
        return;
    }

    protected void filter(int[], int)
    {
        kanzi.function.wavelet.WaveletBandFilter this;
        int[] block;
        int srcIdx, endi, endj, w0, h0, w1, h1, parentOffset, widthLLBand, heightLLBand, halfW, halfH, $i0, $i1, $i2, $i3, $i4, $i5, offset#26, j#28, $i6, $i7, $i8, i#42, val#50, $i9, $i10, idx#57, $i11, $i12, $i13, $i14, $i15, $i16, idx#75, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, idx#101, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, j#147, i#151, $i37, $i38;
        kanzi.function.wavelet.WaveletBandFilter$Context ctx, $r0;

        this := @this: kanzi.function.wavelet.WaveletBandFilter;

        block := @parameter0: int[];

        srcIdx := @parameter1: int;

        $i0 = this.<kanzi.function.wavelet.WaveletBandFilter: int width>;

        endi = $i0 - 1;

        $i1 = this.<kanzi.function.wavelet.WaveletBandFilter: int height>;

        endj = $i1 - 1;

        $i2 = this.<kanzi.function.wavelet.WaveletBandFilter: int width>;

        $i3 = this.<kanzi.function.wavelet.WaveletBandFilter: int levels>;

        w0 = $i2 >> $i3;

        $i4 = this.<kanzi.function.wavelet.WaveletBandFilter: int height>;

        $i5 = this.<kanzi.function.wavelet.WaveletBandFilter: int levels>;

        h0 = $i4 >> $i5;

        w1 = w0 << 1;

        h1 = h0 << 1;

        offset#26 = 0;

        j#28 = 1;

     label01:
        if j#28 >= endj goto label15;

        $i6 = this.<kanzi.function.wavelet.WaveletBandFilter: int width>;

        offset#26 = offset#26 + $i6;

        $i7 = j#28 >> 1;

        $i8 = this.<kanzi.function.wavelet.WaveletBandFilter: int width>;

        parentOffset = $i7 * $i8;

        i#42 = 1;

     label02:
        if i#42 >= endi goto label14;

        if j#28 >= h0 goto label03;

        if i#42 >= w0 goto label03;

        goto label13;

     label03:
        val#50 = 0;

        $i9 = this.<kanzi.function.wavelet.WaveletBandFilter: int width>;

        $i10 = offset#26 - $i9;

        idx#57 = $i10 + i#42;

        $i11 = idx#57 - 1;

        $i12 = block[$i11];

        if $i12 == 0 goto label04;

        val#50 = val#50 + 1;

     label04:
        $i13 = block[idx#57];

        if $i13 == 0 goto label05;

        val#50 = val#50 + 1;

     label05:
        $i14 = idx#57 + 1;

        $i15 = block[$i14];

        if $i15 == 0 goto label06;

        val#50 = val#50 + 1;

     label06:
        $i16 = this.<kanzi.function.wavelet.WaveletBandFilter: int width>;

        idx#75 = idx#57 + $i16;

        if j#28 < h1 goto label07;

        if i#42 < w1 goto label07;

        $i17 = i#42 >> 1;

        $i18 = parentOffset + $i17;

        $i19 = block[$i18];

        if $i19 != 0 goto label07;

        val#50 = val#50 + -2;

     label07:
        $i20 = idx#75 - 1;

        $i21 = block[$i20];

        if $i21 == 0 goto label08;

        val#50 = val#50 + 1;

     label08:
        $i22 = idx#75 + 1;

        $i23 = block[$i22];

        if $i23 == 0 goto label09;

        val#50 = val#50 + 1;

     label09:
        $i24 = this.<kanzi.function.wavelet.WaveletBandFilter: int width>;

        idx#101 = idx#75 + $i24;

        $i25 = idx#101 - 1;

        $i26 = block[$i25];

        if $i26 == 0 goto label10;

        val#50 = val#50 + 1;

     label10:
        $i27 = block[idx#101];

        if $i27 == 0 goto label11;

        val#50 = val#50 + 1;

     label11:
        $i28 = idx#101 + 1;

        $i29 = block[$i28];

        if $i29 == 0 goto label12;

        val#50 = val#50 + 1;

     label12:
        if val#50 > 2 goto label13;

        $i30 = offset#26 + i#42;

        block[$i30] = 0;

     label13:
        i#42 = i#42 + 1;

        goto label02;

     label14:
        j#28 = j#28 + 1;

        goto label01;

     label15:
        $i31 = this.<kanzi.function.wavelet.WaveletBandFilter: int width>;

        $i32 = this.<kanzi.function.wavelet.WaveletBandFilter: int levels>;

        widthLLBand = $i31 >> $i32;

        $i33 = this.<kanzi.function.wavelet.WaveletBandFilter: int height>;

        $i34 = this.<kanzi.function.wavelet.WaveletBandFilter: int levels>;

        heightLLBand = $i33 >> $i34;

        halfW = widthLLBand >> 1;

        halfH = heightLLBand >> 1;

        $r0 = new kanzi.function.wavelet.WaveletBandFilter$Context;

        $i35 = this.<kanzi.function.wavelet.WaveletBandFilter: int width>;

        $i36 = this.<kanzi.function.wavelet.WaveletBandFilter: int height>;

        specialinvoke $r0.<kanzi.function.wavelet.WaveletBandFilter$Context: void <init>(int[],int,int,int)>(block, srcIdx, $i35, $i36);

        ctx = $r0;

        j#147 = 0;

     label16:
        if j#147 >= heightLLBand goto label21;

        i#151 = 0;

     label17:
        if i#151 >= widthLLBand goto label20;

        if i#151 >= halfW goto label18;

        if j#147 >= halfH goto label18;

        goto label19;

     label18:
        $i37 = i#151 + i#151;

        ctx.<kanzi.function.wavelet.WaveletBandFilter$Context: int x> = $i37;

        $i38 = j#147 + j#147;

        ctx.<kanzi.function.wavelet.WaveletBandFilter$Context: int y> = $i38;

        staticinvoke <kanzi.function.wavelet.WaveletBandFilter: boolean findDescendants(kanzi.function.wavelet.WaveletBandFilter$Context)>(ctx);

     label19:
        i#151 = i#151 + 1;

        goto label17;

     label20:
        j#147 = j#147 + 1;

        goto label16;

     label21:
        return;
    }

    private static boolean findDescendants(kanzi.function.wavelet.WaveletBandFilter$Context)
    {
        kanzi.function.wavelet.WaveletBandFilter$Context ctx;
        int[] block;
        int i2, j2, x#3, y#6, $i0, $i1, $i2, $i3, offset#18, leaves#20, x#24, y#28, j#30, $i4, i#36, k#38, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, offset2#68, leaves2#70, jj#78, $i15, ii#84, kk#86, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26;
        boolean $z0, $z1;

        ctx := @parameter0: kanzi.function.wavelet.WaveletBandFilter$Context;

        x#3 = ctx.<kanzi.function.wavelet.WaveletBandFilter$Context: int x>;

        y#6 = ctx.<kanzi.function.wavelet.WaveletBandFilter$Context: int y>;

        block = ctx.<kanzi.function.wavelet.WaveletBandFilter$Context: int[] block>;

        $i0 = ctx.<kanzi.function.wavelet.WaveletBandFilter$Context: int srcIdx>;

        $i1 = ctx.<kanzi.function.wavelet.WaveletBandFilter$Context: int width>;

        $i2 = y#6 * $i1;

        $i3 = $i0 + $i2;

        offset#18 = $i3 + x#3;

        leaves#20 = 0;

        x#24 = x#3 << 1;

        y#28 = y#6 << 1;

        j#30 = y#28;

     label01:
        $i4 = y#28 + 2;

        if j#30 > $i4 goto label13;

        i#36 = x#24;

        k#38 = 0;

     label02:
        $i5 = x#24 + 2;

        if i#36 > $i5 goto label12;

        $i6 = ctx.<kanzi.function.wavelet.WaveletBandFilter$Context: int width>;

        if i#36 >= $i6 goto label03;

        $i7 = ctx.<kanzi.function.wavelet.WaveletBandFilter$Context: int height>;

        if j#30 < $i7 goto label04;

     label03:
        $i8 = offset#18 + k#38;

        $i9 = block[$i8];

        if $i9 != 0 goto label11;

        $i10 = offset#18 + k#38;

        block[$i10] = 127;

        leaves#20 = leaves#20 + 1;

        goto label11;

     label04:
        $i11 = ctx.<kanzi.function.wavelet.WaveletBandFilter$Context: int srcIdx>;

        $i12 = ctx.<kanzi.function.wavelet.WaveletBandFilter$Context: int width>;

        $i13 = j#30 * $i12;

        $i14 = $i11 + $i13;

        offset2#68 = $i14 + i#36;

        leaves2#70 = 0;

        i2 = i#36 << 1;

        j2 = j#30 << 1;

        jj#78 = j2;

     label05:
        $i15 = j2 + 2;

        if jj#78 > $i15 goto label10;

        ii#84 = i2;

        kk#86 = 0;

     label06:
        $i16 = i2 + 2;

        if ii#84 > $i16 goto label09;

        ctx.<kanzi.function.wavelet.WaveletBandFilter$Context: int x> = ii#84;

        ctx.<kanzi.function.wavelet.WaveletBandFilter$Context: int y> = jj#78;

        $i17 = ctx.<kanzi.function.wavelet.WaveletBandFilter$Context: int width>;

        if ii#84 >= $i17 goto label07;

        $i18 = ctx.<kanzi.function.wavelet.WaveletBandFilter$Context: int height>;

        if jj#78 >= $i18 goto label07;

        $z0 = staticinvoke <kanzi.function.wavelet.WaveletBandFilter: boolean findDescendants(kanzi.function.wavelet.WaveletBandFilter$Context)>(ctx);

        if $z0 != 0 goto label08;

     label07:
        $i19 = offset2#68 + kk#86;

        $i20 = block[$i19];

        if $i20 != 0 goto label08;

        $i21 = offset2#68 + kk#86;

        block[$i21] = 127;

        leaves2#70 = leaves2#70 + 1;

     label08:
        ii#84 = ii#84 + 2;

        kk#86 = kk#86 + 1;

        goto label06;

     label09:
        $i22 = ctx.<kanzi.function.wavelet.WaveletBandFilter$Context: int width>;

        offset2#68 = offset2#68 + $i22;

        jj#78 = jj#78 + 2;

        goto label05;

     label10:
        if leaves2#70 != 4 goto label11;

        $i23 = offset#18 + k#38;

        $i24 = block[$i23];

        if $i24 != 0 goto label11;

        $i25 = offset#18 + k#38;

        block[$i25] = 127;

        leaves#20 = leaves#20 + 1;

     label11:
        i#36 = i#36 + 2;

        k#38 = k#38 + 1;

        goto label02;

     label12:
        $i26 = ctx.<kanzi.function.wavelet.WaveletBandFilter$Context: int width>;

        offset#18 = offset#18 + $i26;

        j#30 = j#30 + 2;

        goto label01;

     label13:
        if leaves#20 == 4 goto label14;

        $z1 = 1;

        goto label15;

     label14:
        $z1 = 0;

     label15:
        return $z1;
    }

    public boolean inverse(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.function.wavelet.WaveletBandFilter this;
        kanzi.SliceIntArray source, destination;
        int[] src, dst, $r0, $r1, $r3, $r4, $r5, $r6, $r7, $r8;
        int end8, w, w0, h, h0, end, start, processed, x, y, srcIdx#3, dstIdx#6, $i0, i#16, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i#58, $i8, quant#69, $i9, $i10, $i11, offset#88, i#92, $i12, $i13, $i14, $i15, levelSize#113, buffSize#115, $i16, startHHBand#121, levelRead#123, level#125, quant#130, $i17, $i18, $i19, count#140, $i20, i#154, $i21, idx#163, $i22, $i23, $i24, $i25, $i26, idx#196, $i27, idx#208, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35;
        kanzi.function.wavelet.WaveletBandScanner sc, $r2;

        this := @this: kanzi.function.wavelet.WaveletBandFilter;

        source := @parameter0: kanzi.SliceIntArray;

        destination := @parameter1: kanzi.SliceIntArray;

        srcIdx#3 = source.<kanzi.SliceIntArray: int index>;

        dstIdx#6 = destination.<kanzi.SliceIntArray: int index>;

        src = source.<kanzi.SliceIntArray: int[] array>;

        dst = destination.<kanzi.SliceIntArray: int[] array>;

        $i0 = destination.<kanzi.SliceIntArray: int index>;

        end8 = $i0 & -8;

        i#16 = 0;

     label01:
        if i#16 >= end8 goto label02;

        dst[i#16] = 0;

        $i1 = i#16 + 1;

        dst[$i1] = 0;

        $i2 = i#16 + 2;

        dst[$i2] = 0;

        $i3 = i#16 + 3;

        dst[$i3] = 0;

        $i4 = i#16 + 4;

        dst[$i4] = 0;

        $i5 = i#16 + 5;

        dst[$i5] = 0;

        $i6 = i#16 + 6;

        dst[$i6] = 0;

        $i7 = i#16 + 7;

        dst[$i7] = 0;

        i#16 = i#16 + 8;

        goto label01;

     label02:
        i#58 = end8;

     label03:
        $i8 = lengthof dst;

        if i#58 >= $i8 goto label04;

        dst[i#58] = 0;

        i#58 = i#58 + 1;

        goto label03;

     label04:
        $r0 = this.<kanzi.function.wavelet.WaveletBandFilter: int[] quantizers>;

        quant#69 = $r0[0];

        w = this.<kanzi.function.wavelet.WaveletBandFilter: int width>;

        $i9 = this.<kanzi.function.wavelet.WaveletBandFilter: int levels>;

        w0 = w >> $i9;

        h = this.<kanzi.function.wavelet.WaveletBandFilter: int height>;

        $i10 = this.<kanzi.function.wavelet.WaveletBandFilter: int levels>;

        h0 = h >> $i10;

        $i11 = w * h0;

        end = dstIdx#6 + $i11;

        offset#88 = dstIdx#6;

     label05:
        if offset#88 >= end goto label08;

        i#92 = 0;

     label06:
        if i#92 >= w0 goto label07;

        $i12 = offset#88 + i#92;

        $i13 = src[srcIdx#3];

        $i14 = $i13 * quant#69;

        dst[$i12] = $i14;

        i#92 = i#92 + 1;

        srcIdx#3 = srcIdx#3 + 1;

        goto label06;

     label07:
        offset#88 = offset#88 + w;

        goto label05;

     label08:
        start = dstIdx#6;

        $i15 = 3 * w0;

        levelSize#113 = $i15 * h0;

        buffSize#115 = levelSize#113;

        $i16 = levelSize#113 + levelSize#113;

        startHHBand#121 = $i16 / 3;

        levelRead#123 = 0;

        level#125 = 1;

        $r1 = this.<kanzi.function.wavelet.WaveletBandFilter: int[] quantizers>;

        quant#130 = $r1[level#125];

        $r2 = new kanzi.function.wavelet.WaveletBandScanner;

        $i17 = this.<kanzi.function.wavelet.WaveletBandFilter: int width>;

        $i18 = this.<kanzi.function.wavelet.WaveletBandFilter: int height>;

        $i19 = this.<kanzi.function.wavelet.WaveletBandFilter: int levels>;

        specialinvoke $r2.<kanzi.function.wavelet.WaveletBandScanner: void <init>(int,int,int,int)>($i17, $i18, 7, $i19);

        sc = $r2;

        count#140 = 0;

     label09:
        $i20 = virtualinvoke sc.<kanzi.function.wavelet.WaveletBandScanner: int getSize()>();

        if count#140 >= $i20 goto label19;

        $r3 = this.<kanzi.function.wavelet.WaveletBandFilter: int[] buffer>;

        processed = virtualinvoke sc.<kanzi.function.wavelet.WaveletBandScanner: int getIndexes(int[],int,int)>($r3, buffSize#115, count#140);

        count#140 = count#140 + processed;

        i#154 = 0;

     label10:
        if i#154 >= processed goto label16;

        $r4 = this.<kanzi.function.wavelet.WaveletBandFilter: int[] buffer>;

        $i21 = $r4[i#154];

        idx#163 = start + $i21;

        $i22 = dst[idx#163];

        if $i22 == 127 goto label11;

        $i23 = src[srcIdx#3];

        if $i23 != 127 goto label13;

     label11:
        $i24 = dst[idx#163];

        if $i24 == 127 goto label12;

        srcIdx#3 = srcIdx#3 + 1;

     label12:
        dst[idx#163] = 0;

        $i25 = idx#163 % w;

        x = $i25 << 1;

        $i26 = idx#163 / w;

        y = $i26 << 1;

        if x >= w goto label15;

        if y >= h goto label15;

        idx#196 = idx#163 << 1;

        dst[idx#196] = 127;

        $i27 = idx#196 + 1;

        dst[$i27] = 127;

        idx#208 = idx#196 + w;

        dst[idx#208] = 127;

        $i28 = idx#208 + 1;

        dst[$i28] = 127;

        goto label15;

     label13:
        $i29 = levelRead#123 + i#154;

        if $i29 != startHHBand#121 goto label14;

        $i30 = quant#130 * 9;

        quant#130 = $i30 >> 3;

     label14:
        $i31 = src[srcIdx#3];

        $i32 = $i31 * quant#130;

        dst[idx#163] = $i32;

        srcIdx#3 = srcIdx#3 + 1;

     label15:
        i#154 = i#154 + 1;

        dstIdx#6 = dstIdx#6 + 1;

        goto label10;

     label16:
        levelRead#123 = levelRead#123 + processed;

        if levelRead#123 != levelSize#113 goto label17;

        levelSize#113 = levelSize#113 << 2;

        levelRead#123 = 0;

        level#125 = level#125 + 1;

        $i33 = levelSize#113 + levelSize#113;

        startHHBand#121 = $i33 / 3;

        $r5 = this.<kanzi.function.wavelet.WaveletBandFilter: int[] quantizers>;

        $i34 = lengthof $r5;

        if level#125 >= $i34 goto label17;

        $r6 = this.<kanzi.function.wavelet.WaveletBandFilter: int[] quantizers>;

        quant#130 = $r6[level#125];

     label17:
        buffSize#115 = levelSize#113 - levelRead#123;

        $r7 = this.<kanzi.function.wavelet.WaveletBandFilter: int[] buffer>;

        $i35 = lengthof $r7;

        if buffSize#115 <= $i35 goto label18;

        $r8 = this.<kanzi.function.wavelet.WaveletBandFilter: int[] buffer>;

        buffSize#115 = lengthof $r8;

     label18:
        goto label09;

     label19:
        source.<kanzi.SliceIntArray: int index> = srcIdx#3;

        destination.<kanzi.SliceIntArray: int index> = dstIdx#6;

        return 1;
    }


