    public volatile java.lang.Object call() throws java.lang.Exception
    {
        kanzi.filter.ParallelFilter$FilterTask this;
        java.lang.Boolean $r0;

        this := @this: kanzi.filter.ParallelFilter$FilterTask;

        $r0 = virtualinvoke this.<kanzi.filter.ParallelFilter$FilterTask: java.lang.Boolean call()>();

        return $r0;
    }

    public java.lang.Boolean call()
    {
        kanzi.filter.ParallelFilter$FilterTask this;
        kanzi.IntFilter $r0;
        kanzi.SliceIntArray $r1, $r2;
        boolean $z0;
        java.lang.Boolean $r3;

        this := @this: kanzi.filter.ParallelFilter$FilterTask;

        $r0 = this.<kanzi.filter.ParallelFilter$FilterTask: kanzi.IntFilter filter>;

        $r1 = this.<kanzi.filter.ParallelFilter$FilterTask: kanzi.SliceIntArray src>;

        $r2 = this.<kanzi.filter.ParallelFilter$FilterTask: kanzi.SliceIntArray dst>;

        $z0 = interfaceinvoke $r0.<kanzi.IntFilter: boolean apply(kanzi.SliceIntArray,kanzi.SliceIntArray)>($r1, $r2);

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r3;
    }

    public void <init>(kanzi.IntFilter, kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.filter.ParallelFilter$FilterTask this;
        kanzi.IntFilter filter;
        kanzi.SliceIntArray src, dst;

        this := @this: kanzi.filter.ParallelFilter$FilterTask;

        filter := @parameter0: kanzi.IntFilter;

        src := @parameter1: kanzi.SliceIntArray;

        dst := @parameter2: kanzi.SliceIntArray;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<kanzi.filter.ParallelFilter$FilterTask: kanzi.IntFilter filter> = filter;

        this.<kanzi.filter.ParallelFilter$FilterTask: kanzi.SliceIntArray src> = src;

        this.<kanzi.filter.ParallelFilter$FilterTask: kanzi.SliceIntArray dst> = dst;

        return;
    }


