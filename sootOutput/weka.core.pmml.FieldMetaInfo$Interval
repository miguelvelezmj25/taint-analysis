    protected void <init>(org.w3c.dom.Element) throws java.lang.Exception
    {
        weka.core.pmml.FieldMetaInfo$Interval this;
        org.w3c.dom.Element interval;
        java.lang.String leftM, rightM, closure, $r6;
        java.lang.IllegalArgumentException ex, ex, $r1, $r3;
        weka.core.pmml.FieldMetaInfo$Interval$Closure[] l5;
        int l6, $i0, l7#41;
        weka.core.pmml.FieldMetaInfo$Interval$Closure c, $r0;
        double $d0, $d1;
        java.lang.Exception $r2, $r4, $r5;
        boolean $z0;

        this := @this: weka.core.pmml.FieldMetaInfo$Interval;

        interval := @parameter0: org.w3c.dom.Element;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<weka.core.pmml.FieldMetaInfo$Interval: double m_leftMargin> = #-Infinity;

        this.<weka.core.pmml.FieldMetaInfo$Interval: double m_rightMargin> = #Infinity;

        $r0 = <weka.core.pmml.FieldMetaInfo$Interval$Closure: weka.core.pmml.FieldMetaInfo$Interval$Closure OPENOPEN>;

        this.<weka.core.pmml.FieldMetaInfo$Interval: weka.core.pmml.FieldMetaInfo$Interval$Closure m_closure> = $r0;

        leftM = interfaceinvoke interval.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("leftMargin");

     label01:
        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(leftM);

        this.<weka.core.pmml.FieldMetaInfo$Interval: double m_leftMargin> = $d0;

     label02:
        goto label04;

     label03:
        $r1 := @caughtexception;

        ex = $r1;

        $r2 = new java.lang.Exception;

        specialinvoke $r2.<java.lang.Exception: void <init>(java.lang.String)>("[Interval] Can\'t parse left margin as a number");

        throw $r2;

     label04:
        rightM = interfaceinvoke interval.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("rightMargin");

     label05:
        $d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(rightM);

        this.<weka.core.pmml.FieldMetaInfo$Interval: double m_rightMargin> = $d1;

     label06:
        goto label08;

     label07:
        $r3 := @caughtexception;

        ex = $r3;

        $r4 = new java.lang.Exception;

        specialinvoke $r4.<java.lang.Exception: void <init>(java.lang.String)>("[Interval] Can\'t parse right margin as a number");

        throw $r4;

     label08:
        closure = interfaceinvoke interval.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("closure");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(closure);

        if closure == null goto label09;

        $i0 = virtualinvoke closure.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 0 goto label10;

     label09:
        $r5 = new java.lang.Exception;

        specialinvoke $r5.<java.lang.Exception: void <init>(java.lang.String)>("[Interval] No closure specified!");

        throw $r5;

     label10:
        l5 = staticinvoke <weka.core.pmml.FieldMetaInfo$Interval$Closure: weka.core.pmml.FieldMetaInfo$Interval$Closure[] values()>();

        l6 = lengthof l5;

        l7#41 = 0;

     label11:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l7#41);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l6);

        if l7#41 >= l6 goto label13;

        c = l5[l7#41];

        $r6 = virtualinvoke c.<weka.core.pmml.FieldMetaInfo$Interval$Closure: java.lang.String toString()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(closure);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label12;

        this.<weka.core.pmml.FieldMetaInfo$Interval: weka.core.pmml.FieldMetaInfo$Interval$Closure m_closure> = c;

        goto label13;

     label12:
        l7#41 = l7#41 + 1;

        goto label11;

     label13:
        return;

        catch java.lang.IllegalArgumentException from label01 to label02 with label03;
        catch java.lang.IllegalArgumentException from label05 to label06 with label07;
    }


