    public void setCompressor(java.lang.String, java.lang.Integer)
    {
        com.googlecode.pngtastic.core.PngOptimizer this;
        java.lang.String compressor, $r0;
        java.lang.Integer iterations;
        boolean $z0;
        com.googlecode.pngtastic.core.processing.ZopfliCompressionHandler $r1, $r3;
        com.googlecode.pngtastic.core.Logger $r2, $r4;
        int $i0;

        this := @this: com.googlecode.pngtastic.core.PngOptimizer;

        compressor := @parameter0: java.lang.String;

        iterations := @parameter1: java.lang.Integer;

        $r0 = "zopfli";

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>(compressor);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(iterations);

        if iterations == null goto label1;

        $r1 = new com.googlecode.pngtastic.core.processing.ZopfliCompressionHandler;

        $r2 = this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.Logger log>;

        $i0 = virtualinvoke iterations.<java.lang.Integer: int intValue()>();

        specialinvoke $r1.<com.googlecode.pngtastic.core.processing.ZopfliCompressionHandler: void <init>(com.googlecode.pngtastic.core.Logger,int)>($r2, $i0);

        this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.processing.PngCompressionHandler pngCompressionHandler> = $r1;

        goto label2;

     label1:
        $r3 = new com.googlecode.pngtastic.core.processing.ZopfliCompressionHandler;

        $r4 = this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.Logger log>;

        specialinvoke $r3.<com.googlecode.pngtastic.core.processing.ZopfliCompressionHandler: void <init>(com.googlecode.pngtastic.core.Logger)>($r4);

        this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.processing.PngCompressionHandler pngCompressionHandler> = $r3;

     label2:
        return;
    }

    public void optimize(com.googlecode.pngtastic.core.PngImage, java.lang.String, boolean, java.lang.Integer) throws java.io.IOException
    {
        com.googlecode.pngtastic.core.PngOptimizer this;
        com.googlecode.pngtastic.core.PngImage image, optimized;
        java.lang.String outputFileName, dataUri, $r5, $r14, $r26, $r29;
        boolean removeGamma, $z0;
        java.lang.Integer compressionLevel;
        long start, optimizedSize, originalFileSize, optimizedFileSize, time, fileSizeDifference, $l2, $l4, $l5, $l6, $l7;
        java.io.ByteArrayOutputStream optimizedBytes, $r2;
        java.io.File originalFile, exported, $r4;
        byte[] optimalBytes, $r6;
        com.googlecode.pngtastic.core.Logger $r0, $r7, $r11, $r15, $r18;
        java.lang.Object[] $r1, $r8, $r12, $r16, $r19;
        java.io.DataOutputStream $r3;
        int $i0;
        byte $b1, $b3;
        java.lang.Long $r9, $r10, $r13, $r17, $r22, $r23, $r24;
        float $f0, $f1, $f2, $f3, $f4;
        java.lang.Float $r20, $r21;
        com.googlecode.pngtastic.core.processing.PngCompressionHandler $r25;
        java.util.List $r27;
        com.googlecode.pngtastic.core.PngOptimizer$OptimizerResult $r28;

        this := @this: com.googlecode.pngtastic.core.PngOptimizer;

        image := @parameter0: com.googlecode.pngtastic.core.PngImage;

        outputFileName := @parameter1: java.lang.String;

        removeGamma := @parameter2: boolean;

        compressionLevel := @parameter3: java.lang.Integer;

        $r0 = this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.Logger log>;

        $r1 = newarray (java.lang.Object)[0];

        virtualinvoke $r0.<com.googlecode.pngtastic.core.Logger: void debug(java.lang.String,java.lang.Object[])>("=== OPTIMIZING ===", $r1);

        start = staticinvoke <java.lang.System: long currentTimeMillis()>();

        optimized = virtualinvoke this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.PngImage optimize(com.googlecode.pngtastic.core.PngImage,boolean,java.lang.Integer)>(image, removeGamma, compressionLevel);

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>();

        optimizedBytes = $r2;

        $r3 = virtualinvoke optimized.<com.googlecode.pngtastic.core.PngImage: java.io.DataOutputStream writeDataOutputStream(java.io.OutputStream)>(optimizedBytes);

        $i0 = virtualinvoke $r3.<java.io.DataOutputStream: int size()>();

        optimizedSize = (long) $i0;

        $r4 = new java.io.File;

        $r5 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: java.lang.String getFileName()>();

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>($r5);

        originalFile = $r4;

        originalFileSize = virtualinvoke originalFile.<java.io.File: long length()>();

        $b1 = optimizedSize cmp originalFileSize;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 >= 0 goto label1;

        $r6 = virtualinvoke optimizedBytes.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        goto label2;

     label1:
        $r6 = specialinvoke this.<com.googlecode.pngtastic.core.PngOptimizer: byte[] getFileBytes(java.io.File,long)>(originalFile, originalFileSize);

     label2:
        optimalBytes = $r6;

        exported = virtualinvoke optimized.<com.googlecode.pngtastic.core.PngImage: java.io.File export(java.lang.String,byte[])>(outputFileName, optimalBytes);

        optimizedFileSize = virtualinvoke exported.<java.io.File: long length()>();

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        time = $l2 - start;

        $r7 = this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.Logger log>;

        $r8 = newarray (java.lang.Object)[2];

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(time);

        $r8[0] = $r9;

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(optimizedSize);

        $r8[1] = $r10;

        virtualinvoke $r7.<com.googlecode.pngtastic.core.Logger: void debug(java.lang.String,java.lang.Object[])>("Optimized in %d milliseconds, size %d", $r8);

        $r11 = this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.Logger log>;

        $r12 = newarray (java.lang.Object)[2];

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(originalFileSize);

        $r12[0] = $r13;

        $r14 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: java.lang.String getFileName()>();

        $r12[1] = $r14;

        virtualinvoke $r11.<com.googlecode.pngtastic.core.Logger: void debug(java.lang.String,java.lang.Object[])>("Original length in bytes: %d (%s)", $r12);

        $r15 = this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.Logger log>;

        $r16 = newarray (java.lang.Object)[2];

        $r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(optimizedFileSize);

        $r16[0] = $r17;

        $r16[1] = outputFileName;

        virtualinvoke $r15.<com.googlecode.pngtastic.core.Logger: void debug(java.lang.String,java.lang.Object[])>("Final length in bytes: %d (%s)", $r16);

        $b3 = optimizedFileSize cmp originalFileSize;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b3);

        if $b3 > 0 goto label3;

        $l4 = originalFileSize - optimizedFileSize;

        goto label4;

     label3:
        $l5 = optimizedFileSize - originalFileSize;

        $l4 = neg $l5;

     label4:
        fileSizeDifference = $l4;

        $r18 = this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.Logger log>;

        $r19 = newarray (java.lang.Object)[5];

        $f0 = (float) fileSizeDifference;

        $f1 = (float) originalFileSize;

        $r20 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1);

        $f2 = virtualinvoke $r20.<java.lang.Float: float floatValue()>();

        $f3 = $f0 / $f2;

        $f4 = $f3 * 100.0F;

        $r21 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f4);

        $r19[0] = $r21;

        $r22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(originalFileSize);

        $r19[1] = $r22;

        $r23 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(optimizedFileSize);

        $r19[2] = $r23;

        $r24 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(fileSizeDifference);

        $r19[3] = $r24;

        $r19[4] = outputFileName;

        virtualinvoke $r18.<com.googlecode.pngtastic.core.Logger: void info(java.lang.String,java.lang.Object[])>("%5.2f%% :%6dB ->%6dB (%5dB saved) - %s", $r19);

        $z0 = this.<com.googlecode.pngtastic.core.PngOptimizer: boolean generateDataUriCss>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label5;

        $r25 = this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.processing.PngCompressionHandler pngCompressionHandler>;

        $r26 = interfaceinvoke $r25.<com.googlecode.pngtastic.core.processing.PngCompressionHandler: java.lang.String encodeBytes(byte[])>(optimalBytes);

        goto label6;

     label5:
        $r26 = null;

     label6:
        dataUri = $r26;

        $r27 = this.<com.googlecode.pngtastic.core.PngOptimizer: java.util.List results>;

        $r28 = new com.googlecode.pngtastic.core.PngOptimizer$OptimizerResult;

        $r29 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: java.lang.String getFileName()>();

        $l6 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: long getWidth()>();

        $l7 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: long getHeight()>();

        specialinvoke $r28.<com.googlecode.pngtastic.core.PngOptimizer$OptimizerResult: void <init>(java.lang.String,long,long,long,long,java.lang.String)>($r29, originalFileSize, optimizedFileSize, $l6, $l7, dataUri);

        interfaceinvoke $r27.<java.util.List: boolean add(java.lang.Object)>($r28);

        return;
    }

    public java.util.List getResults()
    {
        com.googlecode.pngtastic.core.PngOptimizer this;
        java.util.List $r0;

        this := @this: com.googlecode.pngtastic.core.PngOptimizer;

        $r0 = this.<com.googlecode.pngtastic.core.PngOptimizer: java.util.List results>;

        return $r0;
    }

    public long getTotalSavings()
    {
        com.googlecode.pngtastic.core.PngOptimizer this;
        java.util.Iterator l3;
        com.googlecode.pngtastic.core.PngOptimizer$OptimizerResult result;
        long totalSavings#2, $l0, $l1, $l2;
        java.util.List $r0;
        boolean $z0;
        java.lang.Object $r1;

        this := @this: com.googlecode.pngtastic.core.PngOptimizer;

        totalSavings#2 = 0L;

        $r0 = this.<com.googlecode.pngtastic.core.PngOptimizer: java.util.List results>;

        l3 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $r1 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        result = (com.googlecode.pngtastic.core.PngOptimizer$OptimizerResult) $r1;

        $l0 = virtualinvoke result.<com.googlecode.pngtastic.core.PngOptimizer$OptimizerResult: long getOriginalFileSize()>();

        $l1 = virtualinvoke result.<com.googlecode.pngtastic.core.PngOptimizer$OptimizerResult: long getOptimizedFileSize()>();

        $l2 = $l0 - $l1;

        totalSavings#2 = totalSavings#2 + $l2;

        goto label1;

     label2:
        return totalSavings#2;
    }

    public com.googlecode.pngtastic.core.PngImage optimize(com.googlecode.pngtastic.core.PngImage, boolean, java.lang.Integer) throws java.io.IOException
    {
        com.googlecode.pngtastic.core.PngOptimizer this;
        com.googlecode.pngtastic.core.PngImage image, result, $r0;
        boolean removeGamma, $z0, $z1, $z2, $z3, $z4;
        java.lang.Integer compressionLevel, $r23, $r24, $r26;
        java.util.Iterator itChunks, l13#103;
        com.googlecode.pngtastic.core.processing.PngByteArrayOutputStream inflatedImageData, $r15;
        int scanlineLength, l12, $i1, $i3, $i6, $i9, $i11, $i12, $i13, l13#69, $i15, $i16, $i17, $i18, $i19, $i20, $i22, $i23, $i24, $i25, $i26, $i27;
        java.util.List originalScanlines, scanlines, scanlines, chunks, $r2, $r4, $r14;
        java.util.HashMap filteredScanlines, $r5;
        com.googlecode.pngtastic.core.PngFilterType[] l11;
        com.googlecode.pngtastic.core.PngFilterType filterType, bestFilterType#97, bestFilterType#176;
        java.util.Map$Entry entry;
        byte[] imageResult, adaptiveImageData, deflatedImageData#99, $r22, $r29, $r34, $r36, $r37, $r46, $r47;
        com.googlecode.pngtastic.core.PngChunk imageChunk, newChunk, chunk#22, $r27, $r35, $r39, $r42, $r44;
        java.io.ByteArrayOutputStream bytes, $r32;
        java.io.DataOutputStream data, $r33;
        short $s0, $s7;
        com.googlecode.pngtastic.core.Logger $r1, $r6, $r19;
        long $l2, $l4, $l5, $l8, $l10, $l14;
        float $f0, $f1;
        double $d0, $d1;
        com.googlecode.pngtastic.core.processing.PngInterlaceHandler $r3;
        java.lang.Object[] $r7, $r21;
        com.googlecode.pngtastic.core.processing.PngFilterHandler $r8, $r17;
        java.util.Set $r10;
        java.lang.Object $r11, $r13, $r16, $r38, $r41;
        com.googlecode.pngtastic.core.processing.PngCompressionHandler $r12, $r18;
        java.lang.String $r28, $r30, $r31, $r40, $r43, $r45;

        this := @this: com.googlecode.pngtastic.core.PngOptimizer;

        image := @parameter0: com.googlecode.pngtastic.core.PngImage;

        removeGamma := @parameter1: boolean;

        compressionLevel := @parameter2: java.lang.Integer;

        $s0 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: short getInterlace()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s0);

        if $s0 != 1 goto label01;

        $i1 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: int getSampleBitCount()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 >= 8 goto label01;

        return image;

     label01:
        $r0 = new com.googlecode.pngtastic.core.PngImage;

        $r1 = this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.Logger log>;

        specialinvoke $r0.<com.googlecode.pngtastic.core.PngImage: void <init>(com.googlecode.pngtastic.core.Logger)>($r1);

        result = $r0;

        virtualinvoke result.<com.googlecode.pngtastic.core.PngImage: void setInterlace(short)>(0);

        $r2 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: java.util.List getChunks()>();

        itChunks = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        chunk#22 = virtualinvoke this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.PngChunk processHeadChunks(com.googlecode.pngtastic.core.PngImage,boolean,java.util.Iterator)>(result, removeGamma, itChunks);

        inflatedImageData = virtualinvoke this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.processing.PngByteArrayOutputStream getInflatedImageData(com.googlecode.pngtastic.core.PngChunk,java.util.Iterator)>(chunk#22, itChunks);

        $l2 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: long getWidth()>();

        $i3 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: int getSampleBitCount()>();

        $l4 = (long) $i3;

        $l5 = $l2 * $l4;

        $f0 = (float) $l5;

        $f1 = $f0 / 8.0F;

        $d0 = (double) $f1;

        $d1 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $i6 = (int) $d1;

        scanlineLength = $i6 + 1;

        $s7 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: short getInterlace()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s7);

        if $s7 != 1 goto label02;

        $r3 = this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.processing.PngInterlaceHandler pngInterlaceHandler>;

        $l8 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: long getWidth()>();

        $i9 = (int) $l8;

        $l10 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: long getHeight()>();

        $i11 = (int) $l10;

        $i12 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: int getSampleBitCount()>();

        $r4 = interfaceinvoke $r3.<com.googlecode.pngtastic.core.processing.PngInterlaceHandler: java.util.List deInterlace(int,int,int,com.googlecode.pngtastic.core.processing.PngByteArrayOutputStream)>($i9, $i11, $i12, inflatedImageData);

        goto label03;

     label02:
        $i13 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: int getSampleBitCount()>();

        $l14 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: long getHeight()>();

        $r4 = virtualinvoke this.<com.googlecode.pngtastic.core.PngOptimizer: java.util.List getScanlines(com.googlecode.pngtastic.core.processing.PngByteArrayOutputStream,int,int,long)>(inflatedImageData, $i13, scanlineLength, $l14);

     label03:
        originalScanlines = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        filteredScanlines = $r5;

        l11 = staticinvoke <com.googlecode.pngtastic.core.PngFilterType: com.googlecode.pngtastic.core.PngFilterType[] standardValues()>();

        l12 = lengthof l11;

        l13#69 = 0;

     label04:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l12);

        if l13#69 >= l12 goto label05;

        filterType = l11[l13#69];

        $r6 = this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.Logger log>;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = filterType;

        virtualinvoke $r6.<com.googlecode.pngtastic.core.Logger: void debug(java.lang.String,java.lang.Object[])>("Applying filter: %s", $r7);

        scanlines = specialinvoke this.<com.googlecode.pngtastic.core.PngOptimizer: java.util.List copyScanlines(java.util.List)>(originalScanlines);

        $r8 = this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.processing.PngFilterHandler pngFilterHandler>;

        $i15 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: int getSampleBitCount()>();

        interfaceinvoke $r8.<com.googlecode.pngtastic.core.processing.PngFilterHandler: void applyFiltering(com.googlecode.pngtastic.core.PngFilterType,java.util.List,int)>(filterType, scanlines, $i15);

        interfaceinvoke filteredScanlines.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(filterType, scanlines);

        l13#69 = l13#69 + 1;

        goto label04;

     label05:
        bestFilterType#97 = null;

        deflatedImageData#99 = null;

        $r10 = interfaceinvoke filteredScanlines.<java.util.Map: java.util.Set entrySet()>();

        l13#103 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke l13#103.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label09;

        $r11 = interfaceinvoke l13#103.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $r11;

        $r12 = this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.processing.PngCompressionHandler pngCompressionHandler>;

        $r13 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r14 = (java.util.List) $r13;

        $r15 = specialinvoke this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.processing.PngByteArrayOutputStream serialize(java.util.List)>($r14);

        imageResult = interfaceinvoke $r12.<com.googlecode.pngtastic.core.processing.PngCompressionHandler: byte[] deflate(com.googlecode.pngtastic.core.processing.PngByteArrayOutputStream,java.lang.Integer,boolean)>($r15, compressionLevel, 0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(deflatedImageData#99);

        if deflatedImageData#99 == null goto label07;

        $i16 = lengthof imageResult;

        $i17 = lengthof deflatedImageData#99;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i17);

        if $i16 >= $i17 goto label08;

     label07:
        deflatedImageData#99 = imageResult;

        $r16 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        bestFilterType#97 = (com.googlecode.pngtastic.core.PngFilterType) $r16;

     label08:
        goto label06;

     label09:
        scanlines = specialinvoke this.<com.googlecode.pngtastic.core.PngOptimizer: java.util.List copyScanlines(java.util.List)>(originalScanlines);

        $r17 = this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.processing.PngFilterHandler pngFilterHandler>;

        $i18 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: int getSampleBitCount()>();

        interfaceinvoke $r17.<com.googlecode.pngtastic.core.processing.PngFilterHandler: void applyAdaptiveFiltering(com.googlecode.pngtastic.core.processing.PngByteArrayOutputStream,java.util.List,java.util.Map,int)>(inflatedImageData, scanlines, filteredScanlines, $i18);

        $r18 = this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.processing.PngCompressionHandler pngCompressionHandler>;

        adaptiveImageData = interfaceinvoke $r18.<com.googlecode.pngtastic.core.processing.PngCompressionHandler: byte[] deflate(com.googlecode.pngtastic.core.processing.PngByteArrayOutputStream,java.lang.Integer,boolean)>(inflatedImageData, compressionLevel, 0);

        $r19 = this.<com.googlecode.pngtastic.core.PngOptimizer: com.googlecode.pngtastic.core.Logger log>;

        $r21 = newarray (java.lang.Object)[4];

        $r22 = virtualinvoke image.<com.googlecode.pngtastic.core.PngImage: byte[] getImageData()>();

        $i19 = lengthof $r22;

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i19);

        $r21[0] = $r23;

        $i20 = lengthof adaptiveImageData;

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i20);

        $r21[1] = $r24;

        $r21[2] = bestFilterType#97;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(deflatedImageData#99);

        if deflatedImageData#99 != null goto label10;

        $i22 = 0;

        goto label11;

     label10:
        $i22 = lengthof deflatedImageData#99;

     label11:
        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i22);

        $r21[3] = $r26;

        virtualinvoke $r19.<com.googlecode.pngtastic.core.Logger: void debug(java.lang.String,java.lang.Object[])>("Original=%d, Adaptive=%d, %s=%d", $r21);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(deflatedImageData#99);

        if deflatedImageData#99 == null goto label12;

        $i23 = lengthof adaptiveImageData;

        $i24 = lengthof deflatedImageData#99;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i24);

        if $i23 >= $i24 goto label13;

     label12:
        deflatedImageData#99 = adaptiveImageData;

        bestFilterType#176 = <com.googlecode.pngtastic.core.PngFilterType: com.googlecode.pngtastic.core.PngFilterType ADAPTIVE>;

     label13:
        $r27 = new com.googlecode.pngtastic.core.PngChunk;

        $r28 = "IDAT";

        $r29 = virtualinvoke $r28.<java.lang.String: byte[] getBytes()>();

        specialinvoke $r27.<com.googlecode.pngtastic.core.PngChunk: void <init>(byte[],byte[])>($r29, deflatedImageData#99);

        imageChunk = $r27;

        virtualinvoke result.<com.googlecode.pngtastic.core.PngImage: void addChunk(com.googlecode.pngtastic.core.PngChunk)>(imageChunk);

     label14:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(chunk#22);

        if chunk#22 == null goto label18;

        $z1 = virtualinvoke chunk#22.<com.googlecode.pngtastic.core.PngChunk: boolean isCritical()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label15;

        $r30 = "IDAT";

        $r31 = virtualinvoke chunk#22.<com.googlecode.pngtastic.core.PngChunk: java.lang.String getTypeString()>();

        $z2 = virtualinvoke $r30.<java.lang.String: boolean equals(java.lang.Object)>($r31);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label15;

        $r32 = new java.io.ByteArrayOutputStream;

        $i25 = virtualinvoke chunk#22.<com.googlecode.pngtastic.core.PngChunk: int getLength()>();

        specialinvoke $r32.<java.io.ByteArrayOutputStream: void <init>(int)>($i25);

        bytes = $r32;

        $r33 = new java.io.DataOutputStream;

        specialinvoke $r33.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(bytes);

        data = $r33;

        $r34 = virtualinvoke chunk#22.<com.googlecode.pngtastic.core.PngChunk: byte[] getData()>();

        virtualinvoke data.<java.io.DataOutputStream: void write(byte[])>($r34);

        virtualinvoke data.<java.io.DataOutputStream: void close()>();

        $r35 = new com.googlecode.pngtastic.core.PngChunk;

        $r36 = virtualinvoke chunk#22.<com.googlecode.pngtastic.core.PngChunk: byte[] getType()>();

        $r37 = virtualinvoke bytes.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r35.<com.googlecode.pngtastic.core.PngChunk: void <init>(byte[],byte[])>($r36, $r37);

        newChunk = $r35;

        virtualinvoke result.<com.googlecode.pngtastic.core.PngImage: void addChunk(com.googlecode.pngtastic.core.PngChunk)>(newChunk);

     label15:
        $z3 = interfaceinvoke itChunks.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label16;

        $r38 = interfaceinvoke itChunks.<java.util.Iterator: java.lang.Object next()>();

        $r39 = (com.googlecode.pngtastic.core.PngChunk) $r38;

        goto label17;

     label16:
        $r39 = null;

     label17:
        chunk#22 = $r39;

        goto label14;

     label18:
        chunks = virtualinvoke result.<com.googlecode.pngtastic.core.PngImage: java.util.List getChunks()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(chunks);

        if chunks == null goto label19;

        $r40 = "IEND";

        $i26 = interfaceinvoke chunks.<java.util.List: int size()>();

        $i27 = $i26 - 1;

        $r41 = interfaceinvoke chunks.<java.util.List: java.lang.Object get(int)>($i27);

        $r42 = (com.googlecode.pngtastic.core.PngChunk) $r41;

        $r43 = virtualinvoke $r42.<com.googlecode.pngtastic.core.PngChunk: java.lang.String getTypeString()>();

        $z4 = virtualinvoke $r40.<java.lang.String: boolean equals(java.lang.Object)>($r43);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label19;

        $r44 = new com.googlecode.pngtastic.core.PngChunk;

        $r45 = "IEND";

        $r46 = virtualinvoke $r45.<java.lang.String: byte[] getBytes()>();

        $r47 = newarray (byte)[0];

        specialinvoke $r44.<com.googlecode.pngtastic.core.PngChunk: void <init>(byte[],byte[])>($r46, $r47);

        virtualinvoke result.<com.googlecode.pngtastic.core.PngImage: void addChunk(com.googlecode.pngtastic.core.PngChunk)>($r44);

     label19:
        return result;
    }

    private byte[] getFileBytes(java.io.File, long) throws java.io.IOException
    {
        com.googlecode.pngtastic.core.PngOptimizer this;
        java.io.File originalFile;
        long originalFileSize;
        java.nio.ByteBuffer buffer;
        java.lang.Throwable l6, $r2;
        int $i0;
        java.io.FileInputStream ins#5, $r0;
        java.nio.channels.FileChannel $r1;
        byte[] $r3;

        this := @this: com.googlecode.pngtastic.core.PngOptimizer;

        originalFile := @parameter0: java.io.File;

        originalFileSize := @parameter1: long;

        $i0 = (int) originalFileSize;

        buffer = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i0);

        ins#5 = null;

     label1:
        nop;

        $r0 = new java.io.FileInputStream;

        specialinvoke $r0.<java.io.FileInputStream: void <init>(java.io.File)>(originalFile);

        ins#5 = $r0;

        $r1 = virtualinvoke ins#5.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>();

        virtualinvoke $r1.<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer)>(buffer);

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(ins#5);

        if ins#5 == null goto label7;

        virtualinvoke ins#5.<java.io.FileInputStream: void close()>();

        goto label7;

     label3:
        $r2 := @caughtexception;

     label4:
        nop;

        l6 = $r2;

     label5:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(ins#5);

        if ins#5 == null goto label6;

        virtualinvoke ins#5.<java.io.FileInputStream: void close()>();

     label6:
        throw l6;

     label7:
        $r3 = virtualinvoke buffer.<java.nio.ByteBuffer: byte[] array()>();

        return $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private java.util.List copyScanlines(java.util.List)
    {
        com.googlecode.pngtastic.core.PngOptimizer this;
        java.util.List original;
        java.util.ArrayList copy, $r0;
        java.util.Iterator l3;
        byte[] scanline;
        int $i0;
        boolean $z0;
        java.lang.Object $r1, $r2;

        this := @this: com.googlecode.pngtastic.core.PngOptimizer;

        original := @parameter0: java.util.List;

        $r0 = new java.util.ArrayList;

        $i0 = interfaceinvoke original.<java.util.List: int size()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        copy = $r0;

        l3 = interfaceinvoke original.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $r1 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        scanline = (byte[]) $r1;

        $r2 = virtualinvoke scanline.<java.lang.Object: java.lang.Object clone()>();

        interfaceinvoke copy.<java.util.List: boolean add(java.lang.Object)>($r2);

        goto label1;

     label2:
        return copy;
    }

    private com.googlecode.pngtastic.core.processing.PngByteArrayOutputStream serialize(java.util.List)
    {
        com.googlecode.pngtastic.core.PngOptimizer this;
        java.util.List scanlines;
        int scanlineLength, offset, $i0, $i1, i#12, $i2;
        byte[] imageData, scanline, $r1;
        java.lang.Object $r0, $r2;
        com.googlecode.pngtastic.core.processing.PngByteArrayOutputStream $r3;

        this := @this: com.googlecode.pngtastic.core.PngOptimizer;

        scanlines := @parameter0: java.util.List;

        $r0 = interfaceinvoke scanlines.<java.util.List: java.lang.Object get(int)>(0);

        $r1 = (byte[]) $r0;

        scanlineLength = lengthof $r1;

        $i0 = interfaceinvoke scanlines.<java.util.List: int size()>();

        $i1 = scanlineLength * $i0;

        imageData = newarray (byte)[$i1];

        i#12 = 0;

     label1:
        $i2 = interfaceinvoke scanlines.<java.util.List: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#12 >= $i2 goto label2;

        offset = i#12 * scanlineLength;

        $r2 = interfaceinvoke scanlines.<java.util.List: java.lang.Object get(int)>(i#12);

        scanline = (byte[]) $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(scanline, 0, imageData, offset, scanlineLength);

        i#12 = i#12 + 1;

        goto label1;

     label2:
        $r3 = new com.googlecode.pngtastic.core.processing.PngByteArrayOutputStream;

        specialinvoke $r3.<com.googlecode.pngtastic.core.processing.PngByteArrayOutputStream: void <init>(byte[])>(imageData);

        return $r3;
    }

    public void <init>(java.lang.String)
    {
        com.googlecode.pngtastic.core.PngOptimizer this;
        java.lang.String logLevel;
        java.util.ArrayList $r0;

        this := @this: com.googlecode.pngtastic.core.PngOptimizer;

        logLevel := @parameter0: java.lang.String;

        specialinvoke this.<com.googlecode.pngtastic.core.PngProcessor: void <init>(java.lang.String)>(logLevel);

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        this.<com.googlecode.pngtastic.core.PngOptimizer: java.util.List results> = $r0;

        this.<com.googlecode.pngtastic.core.PngOptimizer: boolean generateDataUriCss> = 0;

        return;
    }


