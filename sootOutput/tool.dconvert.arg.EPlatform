    public static java.util.Set getAll()
    {
        java.util.HashSet temp, $r1;
        tool.dconvert.arg.EPlatform[] l1, $r2;
        int l2, $i0, l3#10;
        tool.dconvert.arg.EPlatform ePlatform;
        java.util.Set $r0, $r3, $r4;

        $r0 = <tool.dconvert.arg.EPlatform: java.util.Set ALL>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label3;

        $r1 = new java.util.HashSet;

        $r2 = staticinvoke <tool.dconvert.arg.EPlatform: tool.dconvert.arg.EPlatform[] values()>();

        $i0 = lengthof $r2;

        specialinvoke $r1.<java.util.HashSet: void <init>(int)>($i0);

        temp = $r1;

        l1 = staticinvoke <tool.dconvert.arg.EPlatform: tool.dconvert.arg.EPlatform[] values()>();

        l2 = lengthof l1;

        l3#10 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3#10);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l2);

        if l3#10 >= l2 goto label2;

        ePlatform = l1[l3#10];

        interfaceinvoke temp.<java.util.Set: boolean add(java.lang.Object)>(ePlatform);

        l3#10 = l3#10 + 1;

        goto label1;

     label2:
        $r3 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(temp);

        <tool.dconvert.arg.EPlatform: java.util.Set ALL> = $r3;

     label3:
        $r4 = <tool.dconvert.arg.EPlatform: java.util.Set ALL>;

        return $r4;
    }

    static void <clinit>()
    {
        tool.dconvert.arg.EPlatform $r0, $r2, $r4, $r6, $r9, $r10, $r11, $r12;
        tool.dconvert.converters.AndroidConverter $r1;
        tool.dconvert.converters.IOSConverter $r3;
        tool.dconvert.converters.WindowsConverter $r5;
        tool.dconvert.converters.WebConverter $r7;
        tool.dconvert.arg.EPlatform[] $r8;

        $r0 = new tool.dconvert.arg.EPlatform;

        $r1 = new tool.dconvert.converters.AndroidConverter;

        specialinvoke $r1.<tool.dconvert.converters.AndroidConverter: void <init>()>();

        specialinvoke $r0.<tool.dconvert.arg.EPlatform: void <init>(java.lang.String,int,tool.dconvert.converters.IPlatformConverter)>("ANDROID", 0, $r1);

        <tool.dconvert.arg.EPlatform: tool.dconvert.arg.EPlatform ANDROID> = $r0;

        $r2 = new tool.dconvert.arg.EPlatform;

        $r3 = new tool.dconvert.converters.IOSConverter;

        specialinvoke $r3.<tool.dconvert.converters.IOSConverter: void <init>()>();

        specialinvoke $r2.<tool.dconvert.arg.EPlatform: void <init>(java.lang.String,int,tool.dconvert.converters.IPlatformConverter)>("IOS", 1, $r3);

        <tool.dconvert.arg.EPlatform: tool.dconvert.arg.EPlatform IOS> = $r2;

        $r4 = new tool.dconvert.arg.EPlatform;

        $r5 = new tool.dconvert.converters.WindowsConverter;

        specialinvoke $r5.<tool.dconvert.converters.WindowsConverter: void <init>()>();

        specialinvoke $r4.<tool.dconvert.arg.EPlatform: void <init>(java.lang.String,int,tool.dconvert.converters.IPlatformConverter)>("WINDOWS", 2, $r5);

        <tool.dconvert.arg.EPlatform: tool.dconvert.arg.EPlatform WINDOWS> = $r4;

        $r6 = new tool.dconvert.arg.EPlatform;

        $r7 = new tool.dconvert.converters.WebConverter;

        specialinvoke $r7.<tool.dconvert.converters.WebConverter: void <init>()>();

        specialinvoke $r6.<tool.dconvert.arg.EPlatform: void <init>(java.lang.String,int,tool.dconvert.converters.IPlatformConverter)>("WEB", 3, $r7);

        <tool.dconvert.arg.EPlatform: tool.dconvert.arg.EPlatform WEB> = $r6;

        $r8 = newarray (tool.dconvert.arg.EPlatform)[4];

        $r9 = <tool.dconvert.arg.EPlatform: tool.dconvert.arg.EPlatform ANDROID>;

        $r8[0] = $r9;

        $r10 = <tool.dconvert.arg.EPlatform: tool.dconvert.arg.EPlatform IOS>;

        $r8[1] = $r10;

        $r11 = <tool.dconvert.arg.EPlatform: tool.dconvert.arg.EPlatform WINDOWS>;

        $r8[2] = $r11;

        $r12 = <tool.dconvert.arg.EPlatform: tool.dconvert.arg.EPlatform WEB>;

        $r8[3] = $r12;

        <tool.dconvert.arg.EPlatform: tool.dconvert.arg.EPlatform[] $VALUES> = $r8;

        return;
    }

    public static tool.dconvert.arg.EPlatform[] values()
    {
        tool.dconvert.arg.EPlatform[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <tool.dconvert.arg.EPlatform: tool.dconvert.arg.EPlatform[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (tool.dconvert.arg.EPlatform[]) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int, tool.dconvert.converters.IPlatformConverter)
    {
        tool.dconvert.arg.EPlatform this;
        java.lang.String l1;
        int l2;
        tool.dconvert.converters.IPlatformConverter converter;

        this := @this: tool.dconvert.arg.EPlatform;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: int;

        converter := @parameter2: tool.dconvert.converters.IPlatformConverter;

        specialinvoke this.<java.lang.Enum: void <init>(java.lang.String,int)>(l1, l2);

        this.<tool.dconvert.arg.EPlatform: tool.dconvert.converters.IPlatformConverter converter> = converter;

        return;
    }


