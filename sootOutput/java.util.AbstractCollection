    protected void <init>()
    {
        java.util.AbstractCollection l0;

        l0 := @this: java.util.AbstractCollection;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object[] toArray()
    {
        java.util.AbstractCollection l0;
        java.lang.Object[] l1, $r0, $r2;
        java.util.Iterator l2;
        int $i0, l3#7, $i1;
        boolean $z0, $z1;
        java.lang.Object $r1;

        l0 := @this: java.util.AbstractCollection;

        $i0 = virtualinvoke l0.<java.util.AbstractCollection: int size()>();

        l1 = newarray (java.lang.Object)[$i0];

        l2 = virtualinvoke l0.<java.util.AbstractCollection: java.util.Iterator iterator()>();

        l3#7 = 0;

     label1:
        $i1 = lengthof l1;

        if l3#7 >= $i1 goto label3;

        $z0 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        $r0 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(l1, l3#7);

        return $r0;

     label2:
        $r1 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        l1[l3#7] = $r1;

        l3#7 = l3#7 + 1;

        goto label1;

     label3:
        $z1 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r2 = staticinvoke <java.util.AbstractCollection: java.lang.Object[] finishToArray(java.lang.Object[],java.util.Iterator)>(l1, l2);

        goto label5;

     label4:
        $r2 = l1;

     label5:
        return $r2;
    }

    private static java.lang.Object[] finishToArray(java.lang.Object[], java.util.Iterator)
    {
        java.util.Iterator l1;
        int l3, l2#4, $i0, $i1, l4#18, $i2, $i3, $i4, $i5;
        java.lang.Object[] l0#1, $r1;
        boolean $z0;
        java.lang.Object $r0;

        l0#1 := @parameter0: java.lang.Object[];

        l1 := @parameter1: java.util.Iterator;

        l2#4 = lengthof l0#1;

     label1:
        $z0 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        l3 = lengthof l0#1;

        if l2#4 != l3 goto label3;

        $i0 = l3 >> 1;

        $i1 = l3 + $i0;

        l4#18 = $i1 + 1;

        $i2 = l4#18 - 2147483639;

        if $i2 <= 0 goto label2;

        $i3 = l3 + 1;

        l4#18 = staticinvoke <java.util.AbstractCollection: int hugeCapacity(int)>($i3);

     label2:
        l0#1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(l0#1, l4#18);

     label3:
        $i4 = l2#4;

        l2#4 = l2#4 + 1;

        $r0 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>();

        l0#1[$i4] = $r0;

        goto label1;

     label4:
        $i5 = lengthof l0#1;

        if l2#4 != $i5 goto label5;

        $r1 = l0#1;

        goto label6;

     label5:
        $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(l0#1, l2#4);

     label6:
        return $r1;
    }

    private static int hugeCapacity(int)
    {
        int l0, $i0;
        java.lang.OutOfMemoryError $r0;

        l0 := @parameter0: int;

        if l0 >= 0 goto label1;

        $r0 = new java.lang.OutOfMemoryError;

        specialinvoke $r0.<java.lang.OutOfMemoryError: void <init>(java.lang.String)>("Required array size too large");

        throw $r0;

     label1:
        if l0 <= 2147483639 goto label2;

        $i0 = 2147483647;

        goto label3;

     label2:
        $i0 = 2147483639;

     label3:
        return $i0;
    }


