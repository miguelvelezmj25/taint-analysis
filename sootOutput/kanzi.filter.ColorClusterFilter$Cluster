    boolean computeCentroid()
    {
        kanzi.filter.ColorClusterFilter$Cluster this;
        int r, g, b, newCentroidX, newCentroidY, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;

        this := @this: kanzi.filter.ColorClusterFilter$Cluster;

        $i0 = this.<kanzi.filter.ColorClusterFilter$Cluster: int items>;

        if $i0 != 0 goto label1;

        return 0;

     label1:
        $i1 = this.<kanzi.filter.ColorClusterFilter$Cluster: int sumR>;

        $i2 = this.<kanzi.filter.ColorClusterFilter$Cluster: int items>;

        r = $i1 / $i2;

        $i3 = this.<kanzi.filter.ColorClusterFilter$Cluster: int sumG>;

        $i4 = this.<kanzi.filter.ColorClusterFilter$Cluster: int items>;

        g = $i3 / $i4;

        $i5 = this.<kanzi.filter.ColorClusterFilter$Cluster: int sumB>;

        $i6 = this.<kanzi.filter.ColorClusterFilter$Cluster: int items>;

        b = $i5 / $i6;

        $i7 = this.<kanzi.filter.ColorClusterFilter$Cluster: int sumX>;

        $i8 = this.<kanzi.filter.ColorClusterFilter$Cluster: int items>;

        newCentroidX = $i7 / $i8;

        $i9 = this.<kanzi.filter.ColorClusterFilter$Cluster: int sumY>;

        $i10 = this.<kanzi.filter.ColorClusterFilter$Cluster: int items>;

        newCentroidY = $i9 / $i10;

        virtualinvoke this.<kanzi.filter.ColorClusterFilter$Cluster: void reset()>();

        $i11 = this.<kanzi.filter.ColorClusterFilter$Cluster: int centroidR>;

        if r != $i11 goto label2;

        $i12 = this.<kanzi.filter.ColorClusterFilter$Cluster: int centroidG>;

        if g != $i12 goto label2;

        $i13 = this.<kanzi.filter.ColorClusterFilter$Cluster: int centroidB>;

        if b != $i13 goto label2;

        $i14 = this.<kanzi.filter.ColorClusterFilter$Cluster: int centroidX>;

        if newCentroidX != $i14 goto label2;

        $i15 = this.<kanzi.filter.ColorClusterFilter$Cluster: int centroidY>;

        if newCentroidY == $i15 goto label3;

     label2:
        this.<kanzi.filter.ColorClusterFilter$Cluster: int centroidR> = r;

        this.<kanzi.filter.ColorClusterFilter$Cluster: int centroidG> = g;

        this.<kanzi.filter.ColorClusterFilter$Cluster: int centroidB> = b;

        this.<kanzi.filter.ColorClusterFilter$Cluster: int centroidX> = newCentroidX;

        this.<kanzi.filter.ColorClusterFilter$Cluster: int centroidY> = newCentroidY;

        return 1;

     label3:
        return 0;
    }

    void reset()
    {
        kanzi.filter.ColorClusterFilter$Cluster this;

        this := @this: kanzi.filter.ColorClusterFilter$Cluster;

        this.<kanzi.filter.ColorClusterFilter$Cluster: int items> = 0;

        this.<kanzi.filter.ColorClusterFilter$Cluster: int sumR> = 0;

        this.<kanzi.filter.ColorClusterFilter$Cluster: int sumG> = 0;

        this.<kanzi.filter.ColorClusterFilter$Cluster: int sumB> = 0;

        this.<kanzi.filter.ColorClusterFilter$Cluster: int sumX> = 0;

        this.<kanzi.filter.ColorClusterFilter$Cluster: int sumY> = 0;

        return;
    }


