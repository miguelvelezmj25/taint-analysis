    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "com/sleepycat/je/tree/ChildReference";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sleepycat.je.tree.ChildReference: boolean $assertionsDisabled> = $z1;

        return;
    }

    public void <init>(com.sleepycat.je.tree.Node, byte[], long)
    {
        com.sleepycat.je.tree.ChildReference this;
        com.sleepycat.je.tree.Node target;
        byte[] key;
        long lsn;

        this := @this: com.sleepycat.je.tree.ChildReference;

        target := @parameter0: com.sleepycat.je.tree.Node;

        key := @parameter1: byte[];

        lsn := @parameter2: long;

        specialinvoke this.<java.lang.Object: void <init>()>();

        specialinvoke this.<com.sleepycat.je.tree.ChildReference: void init(com.sleepycat.je.tree.Node,byte[],long,int)>(target, key, lsn, 2);

        return;
    }

    private void init(com.sleepycat.je.tree.Node, byte[], long, int)
    {
        com.sleepycat.je.tree.ChildReference this;
        com.sleepycat.je.tree.Node target;
        byte[] key;
        long lsn;
        int state;
        byte $b0;

        this := @this: com.sleepycat.je.tree.ChildReference;

        target := @parameter0: com.sleepycat.je.tree.Node;

        key := @parameter1: byte[];

        lsn := @parameter2: long;

        state := @parameter3: int;

        this.<com.sleepycat.je.tree.ChildReference: com.sleepycat.je.tree.Node target> = target;

        this.<com.sleepycat.je.tree.ChildReference: byte[] key> = key;

        this.<com.sleepycat.je.tree.ChildReference: long lsn> = lsn;

        $b0 = (byte) 2;

        this.<com.sleepycat.je.tree.ChildReference: byte state> = $b0;

        return;
    }

    public void writeToLog(java.nio.ByteBuffer)
    {
        com.sleepycat.je.tree.ChildReference this;
        java.nio.ByteBuffer logBuffer;
        byte[] $r0;
        long $l0;
        byte $b1, $b2, $b3, $b4;

        this := @this: com.sleepycat.je.tree.ChildReference;

        logBuffer := @parameter0: java.nio.ByteBuffer;

        $r0 = this.<com.sleepycat.je.tree.ChildReference: byte[] key>;

        staticinvoke <com.sleepycat.je.log.LogUtils: void writeByteArray(java.nio.ByteBuffer,byte[])>(logBuffer, $r0);

        $l0 = this.<com.sleepycat.je.tree.ChildReference: long lsn>;

        staticinvoke <com.sleepycat.je.log.LogUtils: void writePackedLong(java.nio.ByteBuffer,long)>(logBuffer, $l0);

        $b1 = this.<com.sleepycat.je.tree.ChildReference: byte state>;

        virtualinvoke logBuffer.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b1);

        $b2 = this.<com.sleepycat.je.tree.ChildReference: byte state>;

        $b3 = $b2 & -3;

        $b4 = (byte) $b3;

        this.<com.sleepycat.je.tree.ChildReference: byte state> = $b4;

        return;
    }

    public int getLogSize()
    {
        com.sleepycat.je.tree.ChildReference this;
        byte[] $r0;
        int $i0, $i2, $i3, $i4;
        long $l1;

        this := @this: com.sleepycat.je.tree.ChildReference;

        $r0 = this.<com.sleepycat.je.tree.ChildReference: byte[] key>;

        $i0 = staticinvoke <com.sleepycat.je.log.LogUtils: int getByteArrayLogSize(byte[])>($r0);

        $l1 = this.<com.sleepycat.je.tree.ChildReference: long lsn>;

        $i2 = staticinvoke <com.sleepycat.je.log.LogUtils: int getPackedLongLogSize(long)>($l1);

        $i3 = $i0 + $i2;

        $i4 = $i3 + 1;

        return $i4;
    }

    public long getLsn()
    {
        com.sleepycat.je.tree.ChildReference this;
        long $l0;

        this := @this: com.sleepycat.je.tree.ChildReference;

        $l0 = this.<com.sleepycat.je.tree.ChildReference: long lsn>;

        return $l0;
    }

    public com.sleepycat.je.tree.Node getTarget()
    {
        com.sleepycat.je.tree.ChildReference this;
        com.sleepycat.je.tree.Node $r0;

        this := @this: com.sleepycat.je.tree.ChildReference;

        $r0 = this.<com.sleepycat.je.tree.ChildReference: com.sleepycat.je.tree.Node target>;

        return $r0;
    }

    public com.sleepycat.je.tree.Node fetchTarget(com.sleepycat.je.dbi.DatabaseImpl, com.sleepycat.je.tree.IN) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.tree.ChildReference this;
        com.sleepycat.je.dbi.DatabaseImpl database;
        com.sleepycat.je.tree.IN parent, in;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        com.sleepycat.je.tree.Node node, $r0, $r7, $r20;
        long $l0, $l2, $l4, $l5, $l6, $l8, $l10;
        byte $b1, $b3, $b7, $b9, $b11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.String $r1, $r11, $r12, $r14, $r18, $r19;
        com.sleepycat.je.EnvironmentFailureException $r2, $r9, $r13, e#74, $r16;
        com.sleepycat.je.log.LogManager $r3;
        java.lang.Object $r4;
        java.lang.AssertionError $r5, $r6;
        java.io.FileNotFoundException $r8, e#54;
        com.sleepycat.je.dbi.EnvironmentFailureReason $r10, $r17;
        java.lang.RuntimeException $r15, e#86;

        this := @this: com.sleepycat.je.tree.ChildReference;

        database := @parameter0: com.sleepycat.je.dbi.DatabaseImpl;

        parent := @parameter1: com.sleepycat.je.tree.IN;

        $r0 = this.<com.sleepycat.je.tree.ChildReference: com.sleepycat.je.tree.Node target>;

        if $r0 != null goto label11;

        $l0 = this.<com.sleepycat.je.tree.ChildReference: long lsn>;

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label02;

        $z0 = virtualinvoke this.<com.sleepycat.je.tree.ChildReference: boolean isKnownDeleted()>();

        if $z0 != 0 goto label01;

        $l2 = this.<com.sleepycat.je.tree.ChildReference: long lsn>;

        $b3 = this.<com.sleepycat.je.tree.ChildReference: byte state>;

        $r1 = staticinvoke <com.sleepycat.je.tree.IN: java.lang.String makeFetchErrorMsg(java.lang.String,com.sleepycat.je.tree.IN,long,byte,long)>("NULL_LSN without KnownDeleted", null, $l2, $b3, 0L);

        $r2 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>($r1);

        throw $r2;

     label01:
        return null;

     label02:
        envImpl = virtualinvoke database.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

     label03:
        $r3 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.log.LogManager getLogManager()>();

        $l4 = this.<com.sleepycat.je.tree.ChildReference: long lsn>;

        $r4 = virtualinvoke $r3.<com.sleepycat.je.log.LogManager: java.lang.Object getEntry(long)>($l4);

        node = (com.sleepycat.je.tree.Node) $r4;

        $z1 = <com.sleepycat.je.tree.ChildReference: boolean $assertionsDisabled>;

        if $z1 != 0 goto label04;

        $z2 = virtualinvoke node.<com.sleepycat.je.tree.Node: boolean isIN()>();

        if $z2 != 0 goto label04;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label04:
        $z3 = <com.sleepycat.je.tree.ChildReference: boolean $assertionsDisabled>;

        if $z3 != 0 goto label05;

        $z4 = virtualinvoke node.<com.sleepycat.je.tree.Node: boolean isBINDelta()>();

        if $z4 == 0 goto label05;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label05:
        in = (com.sleepycat.je.tree.IN) node;

        virtualinvoke in.<com.sleepycat.je.tree.IN: void latchNoUpdateLRU(com.sleepycat.je.dbi.DatabaseImpl)>(database);

        $l5 = this.<com.sleepycat.je.tree.ChildReference: long lsn>;

        virtualinvoke node.<com.sleepycat.je.tree.Node: void postFetchInit(com.sleepycat.je.dbi.DatabaseImpl,long)>(database, $l5);

        this.<com.sleepycat.je.tree.ChildReference: com.sleepycat.je.tree.Node target> = node;

        virtualinvoke in.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        goto label06;

     label06:
        goto label11;

     label07:
        $r8 := @caughtexception;

        e#54 = $r8;

        $z5 = virtualinvoke this.<com.sleepycat.je.tree.ChildReference: boolean isKnownDeleted()>();

        if $z5 != 0 goto label08;

        $z6 = specialinvoke this.<com.sleepycat.je.tree.ChildReference: boolean isPendingDeleted()>();

        if $z6 != 0 goto label08;

        $r9 = new com.sleepycat.je.EnvironmentFailureException;

        $r10 = <com.sleepycat.je.dbi.EnvironmentFailureReason: com.sleepycat.je.dbi.EnvironmentFailureReason LOG_FILE_NOT_FOUND>;

        $r11 = virtualinvoke e#54.<java.io.FileNotFoundException: java.lang.String toString()>();

        $l6 = this.<com.sleepycat.je.tree.ChildReference: long lsn>;

        $b7 = this.<com.sleepycat.je.tree.ChildReference: byte state>;

        $r12 = staticinvoke <com.sleepycat.je.tree.IN: java.lang.String makeFetchErrorMsg(java.lang.String,com.sleepycat.je.tree.IN,long,byte,long)>($r11, null, $l6, $b7, 0L);

        specialinvoke $r9.<com.sleepycat.je.EnvironmentFailureException: void <init>(com.sleepycat.je.dbi.EnvironmentImpl,com.sleepycat.je.dbi.EnvironmentFailureReason,java.lang.String,java.lang.Throwable)>(envImpl, $r10, $r12, e#54);

        throw $r9;

     label08:
        goto label11;

     label09:
        $r13 := @caughtexception;

        e#74 = $r13;

        $l8 = this.<com.sleepycat.je.tree.ChildReference: long lsn>;

        $b9 = this.<com.sleepycat.je.tree.ChildReference: byte state>;

        $r14 = staticinvoke <com.sleepycat.je.tree.IN: java.lang.String makeFetchErrorMsg(java.lang.String,com.sleepycat.je.tree.IN,long,byte,long)>(null, null, $l8, $b9, 0L);

        virtualinvoke e#74.<com.sleepycat.je.EnvironmentFailureException: void addErrorMessage(java.lang.String)>($r14);

        throw e#74;

     label10:
        $r15 := @caughtexception;

        e#86 = $r15;

        $r16 = new com.sleepycat.je.EnvironmentFailureException;

        $r17 = <com.sleepycat.je.dbi.EnvironmentFailureReason: com.sleepycat.je.dbi.EnvironmentFailureReason LOG_INTEGRITY>;

        $r18 = virtualinvoke e#86.<java.lang.RuntimeException: java.lang.String toString()>();

        $l10 = this.<com.sleepycat.je.tree.ChildReference: long lsn>;

        $b11 = this.<com.sleepycat.je.tree.ChildReference: byte state>;

        $r19 = staticinvoke <com.sleepycat.je.tree.IN: java.lang.String makeFetchErrorMsg(java.lang.String,com.sleepycat.je.tree.IN,long,byte,long)>($r18, null, $l10, $b11, 0L);

        specialinvoke $r16.<com.sleepycat.je.EnvironmentFailureException: void <init>(com.sleepycat.je.dbi.EnvironmentImpl,com.sleepycat.je.dbi.EnvironmentFailureReason,java.lang.String,java.lang.Throwable)>(envImpl, $r17, $r19, e#86);

        throw $r16;

     label11:
        $r20 = this.<com.sleepycat.je.tree.ChildReference: com.sleepycat.je.tree.Node target>;

        return $r20;

        catch java.io.FileNotFoundException from label03 to label06 with label07;
        catch com.sleepycat.je.EnvironmentFailureException from label03 to label06 with label09;
        catch java.lang.RuntimeException from label03 to label06 with label10;
    }

    public boolean isKnownDeleted()
    {
        com.sleepycat.je.tree.ChildReference this;
        byte $b0, $b1;
        boolean $z0;

        this := @this: com.sleepycat.je.tree.ChildReference;

        $b0 = this.<com.sleepycat.je.tree.ChildReference: byte state>;

        $b1 = $b0 & 1;

        if $b1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private boolean isPendingDeleted()
    {
        com.sleepycat.je.tree.ChildReference this;
        byte $b0, $b1;
        boolean $z0;

        this := @this: com.sleepycat.je.tree.ChildReference;

        $b0 = this.<com.sleepycat.je.tree.ChildReference: byte state>;

        $b1 = $b0 & 8;

        if $b1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    void updateLsnAfterOptionalLog(com.sleepycat.je.dbi.DatabaseImpl, long)
    {
        com.sleepycat.je.tree.ChildReference this;
        com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        long lsn;
        byte $b0;
        boolean $z0;

        this := @this: com.sleepycat.je.tree.ChildReference;

        dbImpl := @parameter0: com.sleepycat.je.dbi.DatabaseImpl;

        lsn := @parameter1: long;

        $b0 = lsn cmp -1L;

        if $b0 != 0 goto label1;

        $z0 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: boolean isDeferredWriteMode()>();

        if $z0 == 0 goto label1;

        virtualinvoke this.<com.sleepycat.je.tree.ChildReference: void setDirty()>();

        goto label2;

     label1:
        virtualinvoke this.<com.sleepycat.je.tree.ChildReference: void setLsn(long)>(lsn);

     label2:
        return;
    }

    public void setLsn(long)
    {
        com.sleepycat.je.tree.ChildReference this;
        long lsn;

        this := @this: com.sleepycat.je.tree.ChildReference;

        lsn := @parameter0: long;

        this.<com.sleepycat.je.tree.ChildReference: long lsn> = lsn;

        virtualinvoke this.<com.sleepycat.je.tree.ChildReference: void setDirty()>();

        return;
    }

    void setDirty()
    {
        com.sleepycat.je.tree.ChildReference this;
        byte $b0, $b1, $b2;

        this := @this: com.sleepycat.je.tree.ChildReference;

        $b0 = this.<com.sleepycat.je.tree.ChildReference: byte state>;

        $b1 = $b0 | 2;

        $b2 = (byte) $b1;

        this.<com.sleepycat.je.tree.ChildReference: byte state> = $b2;

        return;
    }

    public void setTarget(com.sleepycat.je.tree.Node)
    {
        com.sleepycat.je.tree.ChildReference this;
        com.sleepycat.je.tree.Node target;

        this := @this: com.sleepycat.je.tree.ChildReference;

        target := @parameter0: com.sleepycat.je.tree.Node;

        this.<com.sleepycat.je.tree.ChildReference: com.sleepycat.je.tree.Node target> = target;

        return;
    }

    public void clearTarget()
    {
        com.sleepycat.je.tree.ChildReference this;

        this := @this: com.sleepycat.je.tree.ChildReference;

        this.<com.sleepycat.je.tree.ChildReference: com.sleepycat.je.tree.Node target> = null;

        return;
    }


