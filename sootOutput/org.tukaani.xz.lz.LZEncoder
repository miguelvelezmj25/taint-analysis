    public static org.tukaani.xz.lz.LZEncoder getInstance(int, int, int, int, int, int, int)
    {
        int dictSize, extraSizeBefore, extraSizeAfter, niceLen, matchLenMax, mf, depthLimit;
        org.tukaani.xz.lz.HC4 $r0;
        org.tukaani.xz.lz.BT4 $r1;
        java.lang.IllegalArgumentException $r2;

        dictSize := @parameter0: int;

        extraSizeBefore := @parameter1: int;

        extraSizeAfter := @parameter2: int;

        niceLen := @parameter3: int;

        matchLenMax := @parameter4: int;

        mf := @parameter5: int;

        depthLimit := @parameter6: int;

        lookupswitch(mf)
        {
            case 4: goto label1;
            case 20: goto label2;
            default: goto label3;
        };

     label1:
        $r0 = new org.tukaani.xz.lz.HC4;

        specialinvoke $r0.<org.tukaani.xz.lz.HC4: void <init>(int,int,int,int,int,int)>(dictSize, extraSizeBefore, extraSizeAfter, niceLen, matchLenMax, depthLimit);

        return $r0;

     label2:
        $r1 = new org.tukaani.xz.lz.BT4;

        specialinvoke $r1.<org.tukaani.xz.lz.BT4: void <init>(int,int,int,int,int,int)>(dictSize, extraSizeBefore, extraSizeAfter, niceLen, matchLenMax, depthLimit);

        return $r1;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "org/tukaani/xz/lz/LZEncoder";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.tukaani.xz.lz.LZEncoder: boolean $assertionsDisabled> = $z1;

        return;
    }

    void <init>(int, int, int, int, int)
    {
        org.tukaani.xz.lz.LZEncoder this;
        int dictSize, extraSizeBefore, extraSizeAfter, niceLen, matchLenMax, $i0, $i1, $i2;
        byte[] $r0;

        this := @this: org.tukaani.xz.lz.LZEncoder;

        dictSize := @parameter0: int;

        extraSizeBefore := @parameter1: int;

        extraSizeAfter := @parameter2: int;

        niceLen := @parameter3: int;

        matchLenMax := @parameter4: int;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<org.tukaani.xz.lz.LZEncoder: int readPos> = -1;

        this.<org.tukaani.xz.lz.LZEncoder: int readLimit> = -1;

        this.<org.tukaani.xz.lz.LZEncoder: boolean finishing> = 0;

        this.<org.tukaani.xz.lz.LZEncoder: int writePos> = 0;

        this.<org.tukaani.xz.lz.LZEncoder: int pendingSize> = 0;

        $i0 = staticinvoke <org.tukaani.xz.lz.LZEncoder: int getBufSize(int,int,int,int)>(dictSize, extraSizeBefore, extraSizeAfter, matchLenMax);

        $r0 = newarray (byte)[$i0];

        this.<org.tukaani.xz.lz.LZEncoder: byte[] buf> = $r0;

        $i1 = extraSizeBefore + dictSize;

        this.<org.tukaani.xz.lz.LZEncoder: int keepSizeBefore> = $i1;

        $i2 = extraSizeAfter + matchLenMax;

        this.<org.tukaani.xz.lz.LZEncoder: int keepSizeAfter> = $i2;

        this.<org.tukaani.xz.lz.LZEncoder: int matchLenMax> = matchLenMax;

        this.<org.tukaani.xz.lz.LZEncoder: int niceLen> = niceLen;

        return;
    }

    private static int getBufSize(int, int, int, int)
    {
        int dictSize, extraSizeBefore, extraSizeAfter, matchLenMax, keepSizeBefore, keepSizeAfter, reserveSize, $i0, $i1, $i2, $i3;

        dictSize := @parameter0: int;

        extraSizeBefore := @parameter1: int;

        extraSizeAfter := @parameter2: int;

        matchLenMax := @parameter3: int;

        keepSizeBefore = extraSizeBefore + dictSize;

        keepSizeAfter = extraSizeAfter + matchLenMax;

        $i0 = dictSize / 2;

        $i1 = $i0 + 262144;

        reserveSize = staticinvoke <java.lang.Math: int min(int,int)>($i1, 536870912);

        $i2 = keepSizeBefore + keepSizeAfter;

        $i3 = $i2 + reserveSize;

        return $i3;
    }

    public void setPresetDict(int, byte[])
    {
        org.tukaani.xz.lz.LZEncoder this;
        int dictSize, copySize, offset, $i0, $i1, $i2, $i3, $i4;
        byte[] presetDict, $r2;
        boolean $z0, $z1, $z2;
        java.lang.AssertionError $r0, $r1;

        this := @this: org.tukaani.xz.lz.LZEncoder;

        dictSize := @parameter0: int;

        presetDict := @parameter1: byte[];

        $z0 = <org.tukaani.xz.lz.LZEncoder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<org.tukaani.xz.lz.LZEncoder: boolean isStarted()>();

        if $z1 == 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $z2 = <org.tukaani.xz.lz.LZEncoder: boolean $assertionsDisabled>;

        if $z2 != 0 goto label2;

        $i0 = this.<org.tukaani.xz.lz.LZEncoder: int writePos>;

        if $i0 == 0 goto label2;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label2:
        if presetDict == null goto label3;

        $i1 = lengthof presetDict;

        copySize = staticinvoke <java.lang.Math: int min(int,int)>($i1, dictSize);

        $i2 = lengthof presetDict;

        offset = $i2 - copySize;

        $r2 = this.<org.tukaani.xz.lz.LZEncoder: byte[] buf>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(presetDict, offset, $r2, 0, copySize);

        $i3 = this.<org.tukaani.xz.lz.LZEncoder: int writePos>;

        $i4 = $i3 + copySize;

        this.<org.tukaani.xz.lz.LZEncoder: int writePos> = $i4;

        virtualinvoke this.<org.tukaani.xz.lz.LZEncoder: void skip(int)>(copySize);

     label3:
        return;
    }

    public boolean isStarted()
    {
        org.tukaani.xz.lz.LZEncoder this;
        int $i0;
        boolean $z0;

        this := @this: org.tukaani.xz.lz.LZEncoder;

        $i0 = this.<org.tukaani.xz.lz.LZEncoder: int readPos>;

        if $i0 == -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static void normalize(int[], int)
    {
        int[] positions;
        int normalizationOffset, i#2, $i0, $i1, $i3, $i4;

        positions := @parameter0: int[];

        normalizationOffset := @parameter1: int;

        i#2 = 0;

     label1:
        $i0 = lengthof positions;

        if i#2 >= $i0 goto label4;

        $i1 = positions[i#2];

        if $i1 > normalizationOffset goto label2;

        positions[i#2] = 0;

        goto label3;

     label2:
        $i3 = positions[i#2];

        $i4 = $i3 - normalizationOffset;

        positions[i#2] = $i4;

     label3:
        i#2 = i#2 + 1;

        goto label1;

     label4:
        return;
    }

    int movePos(int, int)
    {
        org.tukaani.xz.lz.LZEncoder this;
        int requiredForFlushing, requiredForFinishing, $i0, $i1, $i2, $i3, avail#16, $i4, $i5;
        boolean $z0, $z1;
        java.lang.AssertionError $r0;

        this := @this: org.tukaani.xz.lz.LZEncoder;

        requiredForFlushing := @parameter0: int;

        requiredForFinishing := @parameter1: int;

        $z0 = <org.tukaani.xz.lz.LZEncoder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if requiredForFlushing >= requiredForFinishing goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $i0 = this.<org.tukaani.xz.lz.LZEncoder: int readPos>;

        $i1 = $i0 + 1;

        this.<org.tukaani.xz.lz.LZEncoder: int readPos> = $i1;

        $i2 = this.<org.tukaani.xz.lz.LZEncoder: int writePos>;

        $i3 = this.<org.tukaani.xz.lz.LZEncoder: int readPos>;

        avail#16 = $i2 - $i3;

        if avail#16 >= requiredForFlushing goto label3;

        if avail#16 < requiredForFinishing goto label2;

        $z1 = this.<org.tukaani.xz.lz.LZEncoder: boolean finishing>;

        if $z1 != 0 goto label3;

     label2:
        $i4 = this.<org.tukaani.xz.lz.LZEncoder: int pendingSize>;

        $i5 = $i4 + 1;

        this.<org.tukaani.xz.lz.LZEncoder: int pendingSize> = $i5;

        avail#16 = 0;

     label3:
        return avail#16;
    }

    public void copyUncompressed(java.io.OutputStream, int, int) throws java.io.IOException
    {
        org.tukaani.xz.lz.LZEncoder this;
        java.io.OutputStream out;
        int backward, len, $i0, $i1, $i2;
        byte[] $r0;

        this := @this: org.tukaani.xz.lz.LZEncoder;

        out := @parameter0: java.io.OutputStream;

        backward := @parameter1: int;

        len := @parameter2: int;

        $r0 = this.<org.tukaani.xz.lz.LZEncoder: byte[] buf>;

        $i0 = this.<org.tukaani.xz.lz.LZEncoder: int readPos>;

        $i1 = $i0 + 1;

        $i2 = $i1 - backward;

        virtualinvoke out.<java.io.OutputStream: void write(byte[],int,int)>($r0, $i2, len);

        return;
    }

    public int getByte(int, int)
    {
        org.tukaani.xz.lz.LZEncoder this;
        int forward, backward, $i0, $i1, $i2;
        byte[] $r0;
        byte $b3;
        short $s4;

        this := @this: org.tukaani.xz.lz.LZEncoder;

        forward := @parameter0: int;

        backward := @parameter1: int;

        $r0 = this.<org.tukaani.xz.lz.LZEncoder: byte[] buf>;

        $i0 = this.<org.tukaani.xz.lz.LZEncoder: int readPos>;

        $i1 = $i0 + forward;

        $i2 = $i1 - backward;

        $b3 = $r0[$i2];

        $s4 = $b3 & 255;

        return $s4;
    }

    public int getByte(int)
    {
        org.tukaani.xz.lz.LZEncoder this;
        int backward, $i0, $i1;
        byte[] $r0;
        byte $b2;
        short $s3;

        this := @this: org.tukaani.xz.lz.LZEncoder;

        backward := @parameter0: int;

        $r0 = this.<org.tukaani.xz.lz.LZEncoder: byte[] buf>;

        $i0 = this.<org.tukaani.xz.lz.LZEncoder: int readPos>;

        $i1 = $i0 - backward;

        $b2 = $r0[$i1];

        $s3 = $b2 & 255;

        return $s3;
    }

    public int getMatchLen(int, int, int)
    {
        org.tukaani.xz.lz.LZEncoder this;
        int forward, dist, lenLimit, curPos, backPos, $i0, $i1, len#11, $i2, $i4;
        byte[] $r0, $r1;
        byte $b3, $b5;

        this := @this: org.tukaani.xz.lz.LZEncoder;

        forward := @parameter0: int;

        dist := @parameter1: int;

        lenLimit := @parameter2: int;

        $i0 = this.<org.tukaani.xz.lz.LZEncoder: int readPos>;

        curPos = $i0 + forward;

        $i1 = curPos - dist;

        backPos = $i1 - 1;

        len#11 = 0;

     label1:
        if len#11 >= lenLimit goto label2;

        $r0 = this.<org.tukaani.xz.lz.LZEncoder: byte[] buf>;

        $i2 = curPos + len#11;

        $b3 = $r0[$i2];

        $r1 = this.<org.tukaani.xz.lz.LZEncoder: byte[] buf>;

        $i4 = backPos + len#11;

        $b5 = $r1[$i4];

        if $b3 != $b5 goto label2;

        len#11 = len#11 + 1;

        goto label1;

     label2:
        return len#11;
    }

    public int getMatchLen(int, int)
    {
        org.tukaani.xz.lz.LZEncoder this;
        int dist, lenLimit, backPos, $i0, $i1, len#8, $i2, $i3, $i5;
        byte[] $r0, $r1;
        byte $b4, $b6;

        this := @this: org.tukaani.xz.lz.LZEncoder;

        dist := @parameter0: int;

        lenLimit := @parameter1: int;

        $i0 = this.<org.tukaani.xz.lz.LZEncoder: int readPos>;

        $i1 = $i0 - dist;

        backPos = $i1 - 1;

        len#8 = 0;

     label1:
        if len#8 >= lenLimit goto label2;

        $r0 = this.<org.tukaani.xz.lz.LZEncoder: byte[] buf>;

        $i2 = this.<org.tukaani.xz.lz.LZEncoder: int readPos>;

        $i3 = $i2 + len#8;

        $b4 = $r0[$i3];

        $r1 = this.<org.tukaani.xz.lz.LZEncoder: byte[] buf>;

        $i5 = backPos + len#8;

        $b6 = $r1[$i5];

        if $b4 != $b6 goto label2;

        len#8 = len#8 + 1;

        goto label1;

     label2:
        return len#8;
    }

    public boolean verifyMatches(org.tukaani.xz.lz.Matches)
    {
        org.tukaani.xz.lz.LZEncoder this;
        org.tukaani.xz.lz.Matches matches;
        int lenLimit, $i0, $i1, i#7, $i2, $i3, $i4, $i5;
        int[] $r0, $r1;

        this := @this: org.tukaani.xz.lz.LZEncoder;

        matches := @parameter0: org.tukaani.xz.lz.Matches;

        $i0 = virtualinvoke this.<org.tukaani.xz.lz.LZEncoder: int getAvail()>();

        $i1 = this.<org.tukaani.xz.lz.LZEncoder: int matchLenMax>;

        lenLimit = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        i#7 = 0;

     label1:
        $i2 = matches.<org.tukaani.xz.lz.Matches: int count>;

        if i#7 >= $i2 goto label3;

        $r0 = matches.<org.tukaani.xz.lz.Matches: int[] dist>;

        $i3 = $r0[i#7];

        $i4 = virtualinvoke this.<org.tukaani.xz.lz.LZEncoder: int getMatchLen(int,int)>($i3, lenLimit);

        $r1 = matches.<org.tukaani.xz.lz.Matches: int[] len>;

        $i5 = $r1[i#7];

        if $i4 == $i5 goto label2;

        return 0;

     label2:
        i#7 = i#7 + 1;

        goto label1;

     label3:
        return 1;
    }

    public int getAvail()
    {
        org.tukaani.xz.lz.LZEncoder this;
        boolean $z0, $z1;
        java.lang.AssertionError $r0;
        int $i0, $i1, $i2;

        this := @this: org.tukaani.xz.lz.LZEncoder;

        $z0 = <org.tukaani.xz.lz.LZEncoder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke this.<org.tukaani.xz.lz.LZEncoder: boolean isStarted()>();

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $i0 = this.<org.tukaani.xz.lz.LZEncoder: int writePos>;

        $i1 = this.<org.tukaani.xz.lz.LZEncoder: int readPos>;

        $i2 = $i0 - $i1;

        return $i2;
    }

    public int getPos()
    {
        org.tukaani.xz.lz.LZEncoder this;
        int $i0;

        this := @this: org.tukaani.xz.lz.LZEncoder;

        $i0 = this.<org.tukaani.xz.lz.LZEncoder: int readPos>;

        return $i0;
    }

    public boolean hasEnoughData(int)
    {
        org.tukaani.xz.lz.LZEncoder this;
        int alreadyReadLen, $i0, $i1, $i2;
        boolean $z0;

        this := @this: org.tukaani.xz.lz.LZEncoder;

        alreadyReadLen := @parameter0: int;

        $i0 = this.<org.tukaani.xz.lz.LZEncoder: int readPos>;

        $i1 = $i0 - alreadyReadLen;

        $i2 = this.<org.tukaani.xz.lz.LZEncoder: int readLimit>;

        if $i1 >= $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int fillWindow(byte[], int, int)
    {
        org.tukaani.xz.lz.LZEncoder this;
        byte[] in, $r1, $r2, $r3, $r4;
        int off, len#1, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        boolean $z0, $z1;
        java.lang.AssertionError $r0;

        this := @this: org.tukaani.xz.lz.LZEncoder;

        in := @parameter0: byte[];

        off := @parameter1: int;

        len#1 := @parameter2: int;

        $z0 = <org.tukaani.xz.lz.LZEncoder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = this.<org.tukaani.xz.lz.LZEncoder: boolean finishing>;

        if $z1 == 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $i0 = this.<org.tukaani.xz.lz.LZEncoder: int readPos>;

        $r1 = this.<org.tukaani.xz.lz.LZEncoder: byte[] buf>;

        $i1 = lengthof $r1;

        $i2 = this.<org.tukaani.xz.lz.LZEncoder: int keepSizeAfter>;

        $i3 = $i1 - $i2;

        if $i0 < $i3 goto label2;

        specialinvoke this.<org.tukaani.xz.lz.LZEncoder: void moveWindow()>();

     label2:
        $r2 = this.<org.tukaani.xz.lz.LZEncoder: byte[] buf>;

        $i4 = lengthof $r2;

        $i5 = this.<org.tukaani.xz.lz.LZEncoder: int writePos>;

        $i6 = $i4 - $i5;

        if len#1 <= $i6 goto label3;

        $r3 = this.<org.tukaani.xz.lz.LZEncoder: byte[] buf>;

        $i7 = lengthof $r3;

        $i8 = this.<org.tukaani.xz.lz.LZEncoder: int writePos>;

        len#1 = $i7 - $i8;

     label3:
        $r4 = this.<org.tukaani.xz.lz.LZEncoder: byte[] buf>;

        $i9 = this.<org.tukaani.xz.lz.LZEncoder: int writePos>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(in, off, $r4, $i9, len#1);

        $i10 = this.<org.tukaani.xz.lz.LZEncoder: int writePos>;

        $i11 = $i10 + len#1;

        this.<org.tukaani.xz.lz.LZEncoder: int writePos> = $i11;

        $i12 = this.<org.tukaani.xz.lz.LZEncoder: int writePos>;

        $i13 = this.<org.tukaani.xz.lz.LZEncoder: int keepSizeAfter>;

        if $i12 < $i13 goto label4;

        $i14 = this.<org.tukaani.xz.lz.LZEncoder: int writePos>;

        $i15 = this.<org.tukaani.xz.lz.LZEncoder: int keepSizeAfter>;

        $i16 = $i14 - $i15;

        this.<org.tukaani.xz.lz.LZEncoder: int readLimit> = $i16;

     label4:
        specialinvoke this.<org.tukaani.xz.lz.LZEncoder: void processPendingBytes()>();

        return len#1;
    }

    private void moveWindow()
    {
        org.tukaani.xz.lz.LZEncoder this;
        int moveOffset, moveSize, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        byte[] $r0, $r1;

        this := @this: org.tukaani.xz.lz.LZEncoder;

        $i0 = this.<org.tukaani.xz.lz.LZEncoder: int readPos>;

        $i1 = $i0 + 1;

        $i2 = this.<org.tukaani.xz.lz.LZEncoder: int keepSizeBefore>;

        $i3 = $i1 - $i2;

        moveOffset = $i3 & -16;

        $i4 = this.<org.tukaani.xz.lz.LZEncoder: int writePos>;

        moveSize = $i4 - moveOffset;

        $r0 = this.<org.tukaani.xz.lz.LZEncoder: byte[] buf>;

        $r1 = this.<org.tukaani.xz.lz.LZEncoder: byte[] buf>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, moveOffset, $r1, 0, moveSize);

        $i5 = this.<org.tukaani.xz.lz.LZEncoder: int readPos>;

        $i6 = $i5 - moveOffset;

        this.<org.tukaani.xz.lz.LZEncoder: int readPos> = $i6;

        $i7 = this.<org.tukaani.xz.lz.LZEncoder: int readLimit>;

        $i8 = $i7 - moveOffset;

        this.<org.tukaani.xz.lz.LZEncoder: int readLimit> = $i8;

        $i9 = this.<org.tukaani.xz.lz.LZEncoder: int writePos>;

        $i10 = $i9 - moveOffset;

        this.<org.tukaani.xz.lz.LZEncoder: int writePos> = $i10;

        return;
    }

    private void processPendingBytes()
    {
        org.tukaani.xz.lz.LZEncoder this;
        int oldPendingSize, $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0;
        java.lang.AssertionError $r1;

        this := @this: org.tukaani.xz.lz.LZEncoder;

        $i0 = this.<org.tukaani.xz.lz.LZEncoder: int pendingSize>;

        if $i0 <= 0 goto label1;

        $i1 = this.<org.tukaani.xz.lz.LZEncoder: int readPos>;

        $i2 = this.<org.tukaani.xz.lz.LZEncoder: int readLimit>;

        if $i1 >= $i2 goto label1;

        $i3 = this.<org.tukaani.xz.lz.LZEncoder: int readPos>;

        $i4 = this.<org.tukaani.xz.lz.LZEncoder: int pendingSize>;

        $i5 = $i3 - $i4;

        this.<org.tukaani.xz.lz.LZEncoder: int readPos> = $i5;

        oldPendingSize = this.<org.tukaani.xz.lz.LZEncoder: int pendingSize>;

        this.<org.tukaani.xz.lz.LZEncoder: int pendingSize> = 0;

        virtualinvoke this.<org.tukaani.xz.lz.LZEncoder: void skip(int)>(oldPendingSize);

        $z0 = <org.tukaani.xz.lz.LZEncoder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i6 = this.<org.tukaani.xz.lz.LZEncoder: int pendingSize>;

        if $i6 < oldPendingSize goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        return;
    }


