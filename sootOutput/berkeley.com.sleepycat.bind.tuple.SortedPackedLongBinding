    public static void longToEntry(long, berkeley.com.sleepycat.je.DatabaseEntry)
    {
        long val;
        berkeley.com.sleepycat.je.DatabaseEntry entry;
        berkeley.com.sleepycat.bind.tuple.TupleOutput $r0, $r1;

        val := @parameter0: long;

        entry := @parameter1: berkeley.com.sleepycat.je.DatabaseEntry;

        $r0 = staticinvoke <berkeley.com.sleepycat.bind.tuple.SortedPackedLongBinding: berkeley.com.sleepycat.bind.tuple.TupleOutput sizedOutput()>();

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.bind.tuple.TupleOutput: berkeley.com.sleepycat.bind.tuple.TupleOutput writeSortedPackedLong(long)>(val);

        staticinvoke <berkeley.com.sleepycat.bind.tuple.SortedPackedLongBinding: void outputToEntry(berkeley.com.sleepycat.bind.tuple.TupleOutput,berkeley.com.sleepycat.je.DatabaseEntry)>($r1, entry);

        return;
    }

    private static berkeley.com.sleepycat.bind.tuple.TupleOutput sizedOutput()
    {
        berkeley.com.sleepycat.bind.tuple.TupleOutput $r0;
        byte[] $r1;

        $r0 = new berkeley.com.sleepycat.bind.tuple.TupleOutput;

        $r1 = newarray (byte)[9];

        specialinvoke $r0.<berkeley.com.sleepycat.bind.tuple.TupleOutput: void <init>(byte[])>($r1);

        return $r0;
    }

    public static java.lang.Long entryToLong(berkeley.com.sleepycat.je.DatabaseEntry)
    {
        berkeley.com.sleepycat.je.DatabaseEntry entry;
        berkeley.com.sleepycat.bind.tuple.TupleInput $r0;
        long $l0;
        java.lang.Long $r1;

        entry := @parameter0: berkeley.com.sleepycat.je.DatabaseEntry;

        $r0 = staticinvoke <berkeley.com.sleepycat.bind.tuple.SortedPackedLongBinding: berkeley.com.sleepycat.bind.tuple.TupleInput entryToInput(berkeley.com.sleepycat.je.DatabaseEntry)>(entry);

        $l0 = virtualinvoke $r0.<berkeley.com.sleepycat.bind.tuple.TupleInput: long readSortedPackedLong()>();

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r1;
    }


