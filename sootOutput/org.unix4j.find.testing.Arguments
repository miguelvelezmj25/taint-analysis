    static void <clinit>()
    {
        org.unix4j.find.testing.RoundingHandler$Strategy $r0;
        java.util.HashSet $r1;
        org.unix4j.find.testing.EPlatform[] $r2;
        org.unix4j.find.testing.EPlatform $r3, $r4;
        java.util.List $r5;
        org.unix4j.find.testing.EOutputCompressionMode $r6;
        org.unix4j.find.testing.EScaleMode $r7;
        org.unix4j.find.testing.EScalingAlgorithm $r8, $r9;

        $r0 = <org.unix4j.find.testing.RoundingHandler$Strategy: org.unix4j.find.testing.RoundingHandler$Strategy ROUND_HALF_UP>;

        <org.unix4j.find.testing.Arguments: org.unix4j.find.testing.RoundingHandler$Strategy DEFAULT_ROUNDING_STRATEGY> = $r0;

        $r1 = new java.util.HashSet;

        $r2 = newarray (org.unix4j.find.testing.EPlatform)[2];

        $r3 = <org.unix4j.find.testing.EPlatform: org.unix4j.find.testing.EPlatform ANDROID>;

        $r2[0] = $r3;

        $r4 = <org.unix4j.find.testing.EPlatform: org.unix4j.find.testing.EPlatform IOS>;

        $r2[1] = $r4;

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        specialinvoke $r1.<java.util.HashSet: void <init>(java.util.Collection)>($r5);

        <org.unix4j.find.testing.Arguments: java.util.Set DEFAULT_PLATFORM> = $r1;

        $r6 = <org.unix4j.find.testing.EOutputCompressionMode: org.unix4j.find.testing.EOutputCompressionMode SAME_AS_INPUT_PREF_PNG>;

        <org.unix4j.find.testing.Arguments: org.unix4j.find.testing.EOutputCompressionMode DEFAULT_OUT_COMPRESSION> = $r6;

        $r7 = <org.unix4j.find.testing.EScaleMode: org.unix4j.find.testing.EScaleMode FACTOR>;

        <org.unix4j.find.testing.Arguments: org.unix4j.find.testing.EScaleMode DEFAULT_SCALE_TYPE> = $r7;

        $r8 = <org.unix4j.find.testing.EScalingAlgorithm: org.unix4j.find.testing.EScalingAlgorithm LANCZOS3>;

        <org.unix4j.find.testing.Arguments: org.unix4j.find.testing.EScalingAlgorithm DEFAULT_UPSCALING_QUALITY> = $r8;

        $r9 = <org.unix4j.find.testing.EScalingAlgorithm: org.unix4j.find.testing.EScalingAlgorithm LANCZOS3>;

        <org.unix4j.find.testing.Arguments: org.unix4j.find.testing.EScalingAlgorithm DEFAULT_DOWNSCALING_QUALITY> = $r9;

        return;
    }

    public void <init>(java.io.File, java.io.File, float, java.util.Set, org.unix4j.find.testing.EOutputCompressionMode, org.unix4j.find.testing.EScaleMode, org.unix4j.find.testing.EScalingAlgorithm, org.unix4j.find.testing.EScalingAlgorithm, float, int, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, org.unix4j.find.testing.RoundingHandler$Strategy, boolean, boolean)
    {
        org.unix4j.find.testing.Arguments this;
        java.io.File src, dst, file;
        float scale, compressionQuality;
        java.util.Set platform, supportedFileTypes;
        org.unix4j.find.testing.EOutputCompressionMode outputCompressionMode;
        org.unix4j.find.testing.EScaleMode scaleMode;
        org.unix4j.find.testing.EScalingAlgorithm downScalingAlgorithm, upScalingAlgorithm;
        int threadCount, l29, l30#65;
        boolean skipExistingFiles, skipUpscaling, verboseLog, includeAndroidLdpiTvdpi, haltOnError, createMipMapInsteadOfDrawableDir, iosCreateImagesetFolders, enablePngCrush, enableMozJpeg, postConvertWebp, enableAntiAliasing, dryRun, keepUnoptimizedFilesPostProcessor, guiAdvancedOptions, clearDirBeforeConvert, $z0, $z1, $z3;
        org.unix4j.find.testing.RoundingHandler$Strategy roundingHandler;
        java.io.File[] l28;
        java.lang.String extension, $r2;
        java.util.ArrayList $r0;
        java.util.List $r1, $r3;

        this := @this: org.unix4j.find.testing.Arguments;

        src := @parameter0: java.io.File;

        dst := @parameter1: java.io.File;

        scale := @parameter2: float;

        platform := @parameter3: java.util.Set;

        outputCompressionMode := @parameter4: org.unix4j.find.testing.EOutputCompressionMode;

        scaleMode := @parameter5: org.unix4j.find.testing.EScaleMode;

        downScalingAlgorithm := @parameter6: org.unix4j.find.testing.EScalingAlgorithm;

        upScalingAlgorithm := @parameter7: org.unix4j.find.testing.EScalingAlgorithm;

        compressionQuality := @parameter8: float;

        threadCount := @parameter9: int;

        skipExistingFiles := @parameter10: boolean;

        skipUpscaling := @parameter11: boolean;

        verboseLog := @parameter12: boolean;

        includeAndroidLdpiTvdpi := @parameter13: boolean;

        haltOnError := @parameter14: boolean;

        createMipMapInsteadOfDrawableDir := @parameter15: boolean;

        iosCreateImagesetFolders := @parameter16: boolean;

        enablePngCrush := @parameter17: boolean;

        enableMozJpeg := @parameter18: boolean;

        postConvertWebp := @parameter19: boolean;

        enableAntiAliasing := @parameter20: boolean;

        dryRun := @parameter21: boolean;

        keepUnoptimizedFilesPostProcessor := @parameter22: boolean;

        roundingHandler := @parameter23: org.unix4j.find.testing.RoundingHandler$Strategy;

        guiAdvancedOptions := @parameter24: boolean;

        clearDirBeforeConvert := @parameter25: boolean;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<org.unix4j.find.testing.Arguments: java.io.File dst> = dst;

        this.<org.unix4j.find.testing.Arguments: java.io.File src> = src;

        this.<org.unix4j.find.testing.Arguments: float scale> = scale;

        this.<org.unix4j.find.testing.Arguments: java.util.Set platform> = platform;

        this.<org.unix4j.find.testing.Arguments: org.unix4j.find.testing.EOutputCompressionMode outputCompressionMode> = outputCompressionMode;

        this.<org.unix4j.find.testing.Arguments: org.unix4j.find.testing.EScaleMode scaleMode> = scaleMode;

        this.<org.unix4j.find.testing.Arguments: org.unix4j.find.testing.EScalingAlgorithm downScalingAlgorithm> = downScalingAlgorithm;

        this.<org.unix4j.find.testing.Arguments: org.unix4j.find.testing.EScalingAlgorithm upScalingAlgorithm> = upScalingAlgorithm;

        this.<org.unix4j.find.testing.Arguments: float compressionQuality> = compressionQuality;

        this.<org.unix4j.find.testing.Arguments: int threadCount> = threadCount;

        this.<org.unix4j.find.testing.Arguments: boolean skipExistingFiles> = skipExistingFiles;

        this.<org.unix4j.find.testing.Arguments: boolean skipUpscaling> = skipUpscaling;

        this.<org.unix4j.find.testing.Arguments: boolean verboseLog> = verboseLog;

        this.<org.unix4j.find.testing.Arguments: boolean includeAndroidLdpiTvdpi> = includeAndroidLdpiTvdpi;

        this.<org.unix4j.find.testing.Arguments: boolean haltOnError> = haltOnError;

        this.<org.unix4j.find.testing.Arguments: boolean createMipMapInsteadOfDrawableDir> = createMipMapInsteadOfDrawableDir;

        this.<org.unix4j.find.testing.Arguments: boolean iosCreateImagesetFolders> = iosCreateImagesetFolders;

        this.<org.unix4j.find.testing.Arguments: boolean enablePngCrush> = enablePngCrush;

        this.<org.unix4j.find.testing.Arguments: boolean enableMozJpeg> = enableMozJpeg;

        this.<org.unix4j.find.testing.Arguments: boolean postConvertWebp> = postConvertWebp;

        this.<org.unix4j.find.testing.Arguments: boolean enableAntiAliasing> = enableAntiAliasing;

        this.<org.unix4j.find.testing.Arguments: boolean dryRun> = dryRun;

        this.<org.unix4j.find.testing.Arguments: boolean keepUnoptimizedFilesPostProcessor> = keepUnoptimizedFilesPostProcessor;

        this.<org.unix4j.find.testing.Arguments: org.unix4j.find.testing.RoundingHandler$Strategy roundingHandler> = roundingHandler;

        this.<org.unix4j.find.testing.Arguments: boolean guiAdvancedOptions> = guiAdvancedOptions;

        this.<org.unix4j.find.testing.Arguments: boolean clearDirBeforeConvert> = clearDirBeforeConvert;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        this.<org.unix4j.find.testing.Arguments: java.util.List filesToProcess> = $r0;

        supportedFileTypes = staticinvoke <org.unix4j.find.testing.Arguments: java.util.Set getSupportedFileTypes()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(src);

        if src == null goto label4;

        $z0 = virtualinvoke src.<java.io.File: boolean isDirectory()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label4;

        l28 = virtualinvoke src.<java.io.File: java.io.File[] listFiles()>();

        l29 = lengthof l28;

        l30#65 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l30#65);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l29);

        if l30#65 >= l29 goto label3;

        file = l28[l30#65];

        extension = staticinvoke <org.unix4j.find.testing.MiscUtil: java.lang.String getFileExtensionLowerCase(java.io.File)>(file);

        $z1 = interfaceinvoke supportedFileTypes.<java.util.Set: boolean contains(java.lang.Object)>(extension);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        $r1 = this.<org.unix4j.find.testing.Arguments: java.util.List filesToProcess>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(file);

     label2:
        l30#65 = l30#65 + 1;

        goto label1;

     label3:
        goto label5;

     label4:
        $r2 = staticinvoke <org.unix4j.find.testing.MiscUtil: java.lang.String getFileExtensionLowerCase(java.io.File)>(src);

        $z3 = interfaceinvoke supportedFileTypes.<java.util.Set: boolean contains(java.lang.Object)>($r2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label5;

        $r3 = this.<org.unix4j.find.testing.Arguments: java.util.List filesToProcess>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(src);

     label5:
        return;
    }

    public static java.util.Set getSupportedFileTypes()
    {
        java.util.HashSet set, $r0;
        org.unix4j.find.testing.ImageType[] l1;
        int l2, l3#7;
        org.unix4j.find.testing.ImageType imageType;
        boolean $z0;
        java.lang.String[] $r1;
        java.util.List $r2;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        set = $r0;

        l1 = staticinvoke <org.unix4j.find.testing.ImageType: org.unix4j.find.testing.ImageType[] values()>();

        l2 = lengthof l1;

        l3#7 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3#7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l2);

        if l3#7 >= l2 goto label3;

        imageType = l1[l3#7];

        $z0 = imageType.<org.unix4j.find.testing.ImageType: boolean supportRead>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $r1 = imageType.<org.unix4j.find.testing.ImageType: java.lang.String[] extensions>;

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        interfaceinvoke set.<java.util.Set: boolean addAll(java.util.Collection)>($r2);

     label2:
        l3#7 = l3#7 + 1;

        goto label1;

     label3:
        return set;
    }


