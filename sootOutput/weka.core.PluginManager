    static void <clinit>()
    {
        java.util.HashMap $r0, $r2, $r3;
        java.util.HashSet $r1;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <weka.core.PluginManager: java.util.Map PLUGINS> = $r0;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        <weka.core.PluginManager: java.util.Set DISABLED> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        <weka.core.PluginManager: java.util.Map RESOURCES> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        <weka.core.PluginManager: java.util.Map RESOURCE_OWNER_PACKAGE> = $r3;

        return;
    }

    public static java.lang.Object getPluginInstance(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        java.lang.String interfaceType, name, concreteImpl, $r10, $r21;
        java.util.Map pluginsOfInterfaceType, $r0, $r2, $r4, $r11;
        java.lang.Object $r1, $r3, $r12, $r13, $r22, plugin#47;
        int $i0;
        java.lang.Exception $r5, $r14;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r15, $r16, $r17, $r18, $r19, $r20;
        java.util.Set $r23;
        boolean $z0;
        java.lang.Class $r24;

        interfaceType := @parameter0: java.lang.String;

        name := @parameter1: java.lang.String;

        $r0 = <weka.core.PluginManager: java.util.Map PLUGINS>;

        $r1 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(interfaceType);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 == null goto label1;

        $r2 = <weka.core.PluginManager: java.util.Map PLUGINS>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(interfaceType);

        $r4 = (java.util.Map) $r3;

        $i0 = interfaceinvoke $r4.<java.util.Map: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 0 goto label2;

     label1:
        $r5 = new java.lang.Exception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No plugins of interface type: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(interfaceType);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" available!!");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.Exception: void <init>(java.lang.String)>($r10);

        throw $r5;

     label2:
        $r11 = <weka.core.PluginManager: java.util.Map PLUGINS>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(interfaceType);

        pluginsOfInterfaceType = (java.util.Map) $r12;

        $r13 = interfaceinvoke pluginsOfInterfaceType.<java.util.Map: java.lang.Object get(java.lang.Object)>(name);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r13);

        if $r13 != null goto label3;

        $r14 = new java.lang.Exception;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t find named plugin \'");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' of type \'");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(interfaceType);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'!");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.Exception: void <init>(java.lang.String)>($r21);

        throw $r14;

     label3:
        $r22 = interfaceinvoke pluginsOfInterfaceType.<java.util.Map: java.lang.Object get(java.lang.Object)>(name);

        concreteImpl = (java.lang.String) $r22;

        plugin#47 = null;

        $r23 = <weka.core.PluginManager: java.util.Set DISABLED>;

        $z0 = interfaceinvoke $r23.<java.util.Set: boolean contains(java.lang.Object)>(concreteImpl);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label4;

        $r24 = staticinvoke <weka.core.WekaPackageClassLoaderManager: java.lang.Class forName(java.lang.String)>(concreteImpl);

        plugin#47 = virtualinvoke $r24.<java.lang.Class: java.lang.Object newInstance()>();

     label4:
        return plugin#47;
    }

    public static java.util.Set getPluginNamesOfType(java.lang.String)
    {
        java.lang.String interfaceName, s, impl;
        java.util.Set match, $r11;
        java.util.LinkedHashSet result, $r5;
        java.util.Iterator l3;
        java.util.Map $r0, $r2, $r4, $r7, $r9;
        java.lang.Object $r1, $r3, $r6, $r8, $r10;
        boolean $z0, $z1;

        interfaceName := @parameter0: java.lang.String;

        $r0 = <weka.core.PluginManager: java.util.Map PLUGINS>;

        $r1 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(interfaceName);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 == null goto label4;

        $r2 = <weka.core.PluginManager: java.util.Map PLUGINS>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(interfaceName);

        $r4 = (java.util.Map) $r3;

        match = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>();

        $r5 = new java.util.LinkedHashSet;

        specialinvoke $r5.<java.util.LinkedHashSet: void <init>()>();

        result = $r5;

        l3 = interfaceinvoke match.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        s = (java.lang.String) $r6;

        $r7 = <weka.core.PluginManager: java.util.Map PLUGINS>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(interfaceName);

        $r9 = (java.util.Map) $r8;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(s);

        impl = (java.lang.String) $r10;

        $r11 = <weka.core.PluginManager: java.util.Set DISABLED>;

        $z1 = interfaceinvoke $r11.<java.util.Set: boolean contains(java.lang.Object)>(impl);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

        interfaceinvoke result.<java.util.Set: boolean add(java.lang.Object)>(s);

     label2:
        goto label1;

     label3:
        return result;

     label4:
        return null;
    }

    public static synchronized void addFromProperties(java.util.Properties) throws java.lang.Exception
    {
        java.util.Properties props;

        props := @parameter0: java.util.Properties;

        staticinvoke <weka.core.PluginManager: void addFromProperties(java.util.Properties,boolean)>(props, 0);

        return;
    }

    public static synchronized void addFromProperties(java.util.Properties, boolean) throws java.lang.Exception
    {
        java.util.Properties props;
        boolean maintainInsertionOrder;

        props := @parameter0: java.util.Properties;

        maintainInsertionOrder := @parameter1: boolean;

        staticinvoke <weka.core.PluginManager: void addFromProperties(java.lang.String,java.util.Properties,boolean)>(null, props, maintainInsertionOrder);

        return;
    }

    public static synchronized void addToDisabledList(java.util.List)
    {
        java.util.List classnames;
        java.util.Iterator l1;
        java.lang.String s;
        boolean $z0;
        java.lang.Object $r0;

        classnames := @parameter0: java.util.List;

        l1 = interfaceinvoke classnames.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $r0 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>();

        s = (java.lang.String) $r0;

        staticinvoke <weka.core.PluginManager: void addToDisabledList(java.lang.String)>(s);

        goto label1;

     label2:
        return;
    }

    public static synchronized void addFromProperties(java.io.InputStream, boolean) throws java.lang.Exception
    {
        java.io.InputStream propsStream;
        boolean maintainInsertionOrder;

        propsStream := @parameter0: java.io.InputStream;

        maintainInsertionOrder := @parameter1: boolean;

        staticinvoke <weka.core.PluginManager: void addFromProperties(java.lang.String,java.io.InputStream,boolean)>(null, propsStream, maintainInsertionOrder);

        return;
    }

    public static synchronized void addFromProperties(java.lang.String, java.util.Properties, boolean) throws java.lang.Exception
    {
        java.lang.String packageName, baseType, implementations, impl#32, impl#35, name#37, $r1;
        java.util.Properties props;
        boolean maintainInsertionOrder, $z0, $z1;
        java.util.Enumeration keys;
        java.lang.String[] parts, l7;
        int l8, $i0, l9#26, $i2, $i3, $i4;
        java.lang.Object $r0;
        char $c1;

        packageName := @parameter0: java.lang.String;

        props := @parameter1: java.util.Properties;

        maintainInsertionOrder := @parameter2: boolean;

        keys = virtualinvoke props.<java.util.Properties: java.util.Enumeration propertyNames()>();

     label1:
        $z0 = interfaceinvoke keys.<java.util.Enumeration: boolean hasMoreElements()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label6;

        $r0 = interfaceinvoke keys.<java.util.Enumeration: java.lang.Object nextElement()>();

        baseType = (java.lang.String) $r0;

        implementations = virtualinvoke props.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(baseType);

        $z1 = virtualinvoke baseType.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("*resources*");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        staticinvoke <weka.core.PluginManager: void addPluginResourcesFromProperty(java.lang.String,java.lang.String)>(packageName, implementations);

        goto label5;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(implementations);

        if implementations == null goto label5;

        $i0 = virtualinvoke implementations.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label5;

        parts = virtualinvoke implementations.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        l7 = parts;

        l8 = lengthof l7;

        l9#26 = 0;

     label3:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l9#26);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l8);

        if l9#26 >= l8 goto label5;

        impl#32 = l7[l9#26];

        impl#35 = virtualinvoke impl#32.<java.lang.String: java.lang.String trim()>();

        name#37 = impl#35;

        $c1 = virtualinvoke impl#35.<java.lang.String: char charAt(int)>(0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($c1);

        if $c1 != 91 goto label4;

        $i2 = virtualinvoke impl#35.<java.lang.String: int indexOf(int)>(93);

        name#37 = virtualinvoke impl#35.<java.lang.String: java.lang.String substring(int,int)>(1, $i2);

        $i3 = virtualinvoke impl#35.<java.lang.String: int indexOf(int)>(93);

        $i4 = $i3 + 1;

        impl#35 = virtualinvoke impl#35.<java.lang.String: java.lang.String substring(int)>($i4);

     label4:
        $r1 = virtualinvoke name#37.<java.lang.String: java.lang.String trim()>();

        staticinvoke <weka.core.PluginManager: void addPlugin(java.lang.String,java.lang.String,java.lang.String,boolean)>(baseType, $r1, impl#35, maintainInsertionOrder);

        l9#26 = l9#26 + 1;

        goto label3;

     label5:
        goto label1;

     label6:
        return;
    }

    public static synchronized void addToDisabledList(java.lang.String)
    {
        java.lang.String classname;
        java.util.Set $r0;

        classname := @parameter0: java.lang.String;

        $r0 = <weka.core.PluginManager: java.util.Set DISABLED>;

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(classname);

        return;
    }

    public static synchronized void addFromProperties(java.lang.String, java.io.InputStream, boolean) throws java.lang.Exception
    {
        java.lang.String packageName;
        boolean maintainInsertionOrder;
        java.util.Properties expProps, $r0;
        java.io.InputStream propsStream#1;

        packageName := @parameter0: java.lang.String;

        propsStream#1 := @parameter1: java.io.InputStream;

        maintainInsertionOrder := @parameter2: boolean;

        $r0 = new java.util.Properties;

        specialinvoke $r0.<java.util.Properties: void <init>()>();

        expProps = $r0;

        virtualinvoke expProps.<java.util.Properties: void load(java.io.InputStream)>(propsStream#1);

        virtualinvoke propsStream#1.<java.io.InputStream: void close()>();

        staticinvoke <weka.core.PluginManager: void addFromProperties(java.lang.String,java.util.Properties,boolean)>(packageName, expProps, maintainInsertionOrder);

        return;
    }

    public static void addPlugin(java.lang.String, java.lang.String, java.lang.String, boolean)
    {
        java.lang.String interfaceName, name, concreteType;
        boolean maintainInsertionOrder;
        java.lang.Object pluginsOfInterfaceType, $r1, $r2, $r7;
        java.util.Map $r0, $r4, $r6, $r8, tmp$757896747;
        java.util.LinkedHashMap tmp$295844643;
        java.util.TreeMap tmp$1623364633;

        interfaceName := @parameter0: java.lang.String;

        name := @parameter1: java.lang.String;

        concreteType := @parameter2: java.lang.String;

        maintainInsertionOrder := @parameter3: boolean;

        $r0 = <weka.core.PluginManager: java.util.Map PLUGINS>;

        $r1 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(interfaceName);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 != null goto label3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(maintainInsertionOrder);

        if maintainInsertionOrder == 0 goto label1;

        tmp$295844643 = new java.util.LinkedHashMap;

        $r2 = tmp$295844643;

        specialinvoke tmp$295844643.<java.util.LinkedHashMap: void <init>()>();

        goto label2;

     label1:
        tmp$1623364633 = new java.util.TreeMap;

        $r2 = tmp$1623364633;

        specialinvoke tmp$1623364633.<java.util.TreeMap: void <init>()>();

     label2:
        pluginsOfInterfaceType = $r2;

        tmp$757896747 = (java.util.Map) pluginsOfInterfaceType;

        interfaceinvoke tmp$757896747.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(name, concreteType);

        $r4 = <weka.core.PluginManager: java.util.Map PLUGINS>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(interfaceName, pluginsOfInterfaceType);

        goto label4;

     label3:
        $r6 = <weka.core.PluginManager: java.util.Map PLUGINS>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(interfaceName);

        $r8 = (java.util.Map) $r7;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(name, concreteType);

     label4:
        return;
    }

    protected static synchronized void addPluginResourcesFromProperty(java.lang.String, java.lang.String)
    {
        java.lang.String packageName, resourceList, groupID, resourceDesc, resourcePath, r#14, r#17, $r4, $r5, r#39, $r10, $r11, $r12, $r13, $r18;
        java.lang.String[] resources, l3, rParts;
        int l4, l5#8, $i0, $i1, $i2, $i3;
        boolean $z0, $z1;
        java.io.PrintStream $r0, $r6, $r14;
        java.lang.StringBuilder $r1, $r2, $r3, $r7, $r8, $r9, $r15, $r16, $r17;

        packageName := @parameter0: java.lang.String;

        resourceList := @parameter1: java.lang.String;

        resources = virtualinvoke resourceList.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        l3 = resources;

        l4 = lengthof l3;

        l5#8 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l5#8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l4);

        if l5#8 >= l4 goto label8;

        r#14 = l3[l5#8];

        r#17 = virtualinvoke r#14.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke r#17.<java.lang.String: boolean startsWith(java.lang.String)>("[");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r#17.<java.lang.String: boolean endsWith(java.lang.String)>("]");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label3;

     label2:
        $r0 = <java.lang.System: java.io.PrintStream err>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[PluginManager] Malformed resource in: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(resourceList);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>($r4);

        goto label7;

     label3:
        $r5 = virtualinvoke r#17.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("[", "");

        r#39 = virtualinvoke $r5.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("]", "");

        rParts = virtualinvoke r#39.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\|");

        $i0 = lengthof rParts;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 == 3 goto label4;

        $r6 = <java.lang.System: java.io.PrintStream err>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[PluginManager] Was expecting 3 pipe separated parts in resource spec: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r#39);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r10);

        goto label7;

     label4:
        $r11 = rParts[0];

        groupID = virtualinvoke $r11.<java.lang.String: java.lang.String trim()>();

        $r12 = rParts[1];

        resourceDesc = virtualinvoke $r12.<java.lang.String: java.lang.String trim()>();

        $r13 = rParts[2];

        resourcePath = virtualinvoke $r13.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke groupID.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 == 0 goto label5;

        $i2 = virtualinvoke resourceDesc.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 == 0 goto label5;

        $i3 = virtualinvoke resourcePath.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 != 0 goto label6;

     label5:
        $r14 = <java.lang.System: java.io.PrintStream err>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[PluginManager] Empty part in resource spec: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r#39);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>($r18);

        goto label7;

     label6:
        staticinvoke <weka.core.PluginManager: void addPluginResource(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(packageName, groupID, resourceDesc, resourcePath);

     label7:
        l5#8 = l5#8 + 1;

        goto label1;

     label8:
        return;
    }

    public static synchronized void addPluginResource(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String packageName, resourceGroupID, resourceDescription, resourcePath, $r11;
        java.util.Map $r0, $r3, $r6, tmp$1229430216;
        java.lang.Object $r1, groupMap#5;
        int $i0;
        java.lang.StringBuilder $r8, $r9, $r10, tmp$1828600851;
        java.util.LinkedHashMap tmp$1017158039;

        packageName := @parameter0: java.lang.String;

        resourceGroupID := @parameter1: java.lang.String;

        resourceDescription := @parameter2: java.lang.String;

        resourcePath := @parameter3: java.lang.String;

        $r0 = <weka.core.PluginManager: java.util.Map RESOURCES>;

        $r1 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(resourceGroupID);

        groupMap#5 = (java.util.Map) $r1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(groupMap#5);

        if groupMap#5 != null goto label1;

        tmp$1017158039 = new java.util.LinkedHashMap;

        specialinvoke tmp$1017158039.<java.util.LinkedHashMap: void <init>()>();

        groupMap#5 = tmp$1017158039;

        $r3 = <weka.core.PluginManager: java.util.Map RESOURCES>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(resourceGroupID, groupMap#5);

     label1:
        tmp$1229430216 = (java.util.Map) groupMap#5;

        interfaceinvoke tmp$1229430216.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(resourceDescription, resourcePath);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(packageName);

        if packageName == null goto label2;

        $i0 = virtualinvoke packageName.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label2;

        $r6 = <weka.core.PluginManager: java.util.Map RESOURCE_OWNER_PACKAGE>;

        tmp$1828600851 = new java.lang.StringBuilder;

        specialinvoke tmp$1828600851.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke tmp$1828600851.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(resourceGroupID);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(resourceDescription);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, packageName);

     label2:
        return;
    }

    public static synchronized void addFromProperties(java.lang.String, java.io.File) throws java.lang.Exception
    {
        java.lang.String packageName;
        java.io.File propsFile;

        packageName := @parameter0: java.lang.String;

        propsFile := @parameter1: java.io.File;

        staticinvoke <weka.core.PluginManager: void addFromProperties(java.lang.String,java.io.File,boolean)>(packageName, propsFile, 0);

        return;
    }

    public static synchronized void addFromProperties(java.lang.String, java.io.File, boolean) throws java.lang.Exception
    {
        java.lang.String packageName;
        java.io.File propsFile;
        boolean maintainInsertionOrder;
        java.io.BufferedInputStream bi, $r0;
        java.io.FileInputStream $r1;

        packageName := @parameter0: java.lang.String;

        propsFile := @parameter1: java.io.File;

        maintainInsertionOrder := @parameter2: boolean;

        $r0 = new java.io.BufferedInputStream;

        $r1 = new java.io.FileInputStream;

        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>(propsFile);

        specialinvoke $r0.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r1);

        bi = $r0;

        staticinvoke <weka.core.PluginManager: void addFromProperties(java.lang.String,java.io.InputStream,boolean)>(packageName, bi, maintainInsertionOrder);

        return;
    }

    public static void addPlugin(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String interfaceName, name, concreteType;

        interfaceName := @parameter0: java.lang.String;

        name := @parameter1: java.lang.String;

        concreteType := @parameter2: java.lang.String;

        staticinvoke <weka.core.PluginManager: void addPlugin(java.lang.String,java.lang.String,java.lang.String,boolean)>(interfaceName, name, concreteType, 0);

        return;
    }


