    public static long makeLsn(long, int)
    {
        long fileNumber, $l0, $l1, $l2, $l3, $l4;
        int fileOffset;

        fileNumber := @parameter0: long;

        fileOffset := @parameter1: int;

        $l0 = (long) fileOffset;

        $l1 = $l0 & 4294967295L;

        $l2 = fileNumber & 4294967295L;

        $l3 = $l2 << 32;

        $l4 = $l1 | $l3;

        return $l4;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "berkeley/com/sleepycat/je/utilint/DbLsn";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <berkeley.com.sleepycat.je.utilint.DbLsn: boolean $assertionsDisabled> = $z1;

        return;
    }

    public static java.lang.String getNoFormatString(long)
    {
        long lsn, $l0, $l1;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r6;
        java.lang.String $r2, $r5, $r7;

        lsn := @parameter0: long;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0x");

        $l0 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long getFileNumber(long)>(lsn);

        $r2 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/0x");

        $l1 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long getFileOffset(long)>(lsn);

        $r5 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l1);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public static long getFileOffset(long)
    {
        long lsn, $l0;

        lsn := @parameter0: long;

        $l0 = lsn & 4294967295L;

        return $l0;
    }

    public static long getFileNumber(long)
    {
        long lsn, $l0, $l1;

        lsn := @parameter0: long;

        $l0 = lsn >> 32;

        $l1 = $l0 & 4294967295L;

        return $l1;
    }

    public static long makeLsn(long, long)
    {
        long fileNumber, fileOffset, $l0, $l1, $l2, $l3;

        fileNumber := @parameter0: long;

        fileOffset := @parameter1: long;

        $l0 = fileOffset & 4294967295L;

        $l1 = fileNumber & 4294967295L;

        $l2 = $l1 << 32;

        $l3 = $l0 | $l2;

        return $l3;
    }

    public static int compareTo(long, long)
    {
        long lsn1, lsn2, fileNumber1, fileNumber2, $l3, $l4;
        byte $b0, $b1, $b2;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r6;
        java.lang.String $r2, $r5, $r7;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r8;
        int $i5, $i6;

        lsn1 := @parameter0: long;

        lsn2 := @parameter1: long;

        $b0 = lsn1 cmp -1L;

        if $b0 == 0 goto label1;

        $b1 = lsn2 cmp -1L;

        if $b1 != 0 goto label2;

     label1:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NULL_LSN lsn1=");

        $r2 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(lsn1);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lsn2=");

        $r5 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(lsn2);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>($r7);

        throw $r8;

     label2:
        fileNumber1 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long getFileNumber(long)>(lsn1);

        fileNumber2 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long getFileNumber(long)>(lsn2);

        $b2 = fileNumber1 cmp fileNumber2;

        if $b2 != 0 goto label3;

        $l3 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long getFileOffset(long)>(lsn1);

        $l4 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long getFileOffset(long)>(lsn2);

        $i5 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: int compareLong(long,long)>($l3, $l4);

        return $i5;

     label3:
        $i6 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: int compareLong(long,long)>(fileNumber1, fileNumber2);

        return $i6;
    }

    private static int compareLong(long, long)
    {
        long l1, l2;
        byte $b0, $b1;

        l1 := @parameter0: long;

        l2 := @parameter1: long;

        $b0 = l1 cmp l2;

        if $b0 >= 0 goto label1;

        return -1;

     label1:
        $b1 = l1 cmp l2;

        if $b1 <= 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public static java.lang.String toString(long)
    {
        long lsn, $l0, $l1;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r6, $r7;
        java.lang.String $r2, $r5, $r8;

        lsn := @parameter0: long;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<DbLsn val=\"0x");

        $l0 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long getFileNumber(long)>(lsn);

        $r2 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/0x");

        $l1 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long getFileOffset(long)>(lsn);

        $r5 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l1);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"/>");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public static boolean isTransientOrNull(long)
    {
        long lsn;
        byte $b0;
        boolean $z0, $z1;

        lsn := @parameter0: long;

        $b0 = lsn cmp -1L;

        if $b0 == 0 goto label1;

        $z0 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: boolean isTransient(long)>(lsn);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public static boolean isTransient(long)
    {
        long lsn, $l0;
        byte $b1;
        boolean $z0;

        lsn := @parameter0: long;

        $l0 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long getFileNumber(long)>(lsn);

        $b1 = $l0 cmp 4294967295L;

        if $b1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static long longToLsn(java.lang.Long)
    {
        java.lang.Long lsn;
        long $l0;

        lsn := @parameter0: java.lang.Long;

        if lsn != null goto label1;

        return -1L;

     label1:
        $l0 = virtualinvoke lsn.<java.lang.Long: long longValue()>();

        return $l0;
    }

    public static long getNoCleaningDistance(long, long, long)
    {
        long thisLsn, logFileSize, myFile, otherFile, otherLsn#1, diff#3, $l3, $l4, $l5, diff#26, $l7, $l8;
        boolean $z0;
        byte $b0, $b1, $b2, $b6;
        java.lang.AssertionError $r0;

        thisLsn := @parameter0: long;

        otherLsn#1 := @parameter1: long;

        logFileSize := @parameter2: long;

        $z0 = <berkeley.com.sleepycat.je.utilint.DbLsn: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $b0 = thisLsn cmp -1L;

        if $b0 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        myFile = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long getFileNumber(long)>(thisLsn);

        $b1 = otherLsn#1 cmp -1L;

        if $b1 != 0 goto label2;

        otherLsn#1 = 0L;

     label2:
        otherFile = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long getFileNumber(long)>(otherLsn#1);

        $b2 = myFile cmp otherFile;

        if $b2 != 0 goto label3;

        $l3 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long getFileOffset(long)>(thisLsn);

        $l4 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long getFileOffset(long)>(otherLsn#1);

        $l5 = $l3 - $l4;

        diff#26 = staticinvoke <java.lang.Math: long abs(long)>($l5);

        goto label5;

     label3:
        $b6 = myFile cmp otherFile;

        if $b6 <= 0 goto label4;

        $l7 = myFile - otherFile;

        diff#26 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long calcDiff(long,long,long,long)>($l7, logFileSize, thisLsn, otherLsn#1);

        goto label5;

     label4:
        $l8 = otherFile - myFile;

        diff#26 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long calcDiff(long,long,long,long)>($l8, logFileSize, otherLsn#1, thisLsn);

     label5:
        return diff#26;
    }

    private static long calcDiff(long, long, long, long)
    {
        long fileDistance, logFileSize, laterLsn, earlierLsn, diff#4, $l0, diff#9, $l1, diff#14;

        fileDistance := @parameter0: long;

        logFileSize := @parameter1: long;

        laterLsn := @parameter2: long;

        earlierLsn := @parameter3: long;

        diff#4 = fileDistance * logFileSize;

        $l0 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long getFileOffset(long)>(laterLsn);

        diff#9 = diff#4 + $l0;

        $l1 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long getFileOffset(long)>(earlierLsn);

        diff#14 = diff#9 - $l1;

        return diff#14;
    }

    public static java.lang.String dumpString(long, int)
    {
        long lsn;
        int nSpaces;
        java.lang.StringBuilder sb, $r0;
        java.lang.String $r1, $r3, $r5;

        lsn := @parameter0: long;

        nSpaces := @parameter1: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        sb = $r0;

        $r1 = staticinvoke <berkeley.com.sleepycat.je.tree.TreeUtils: java.lang.String indent(int)>(nSpaces);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String toString(long)>(lsn);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static long getTrueDistance(long, long, berkeley.com.sleepycat.je.log.FileManager)
    {
        long thisLsn, otherLsn, file1, file2, lsn1#5, lsn2#7, $l1, $l2, dist#19, $l4, $l5;
        berkeley.com.sleepycat.je.log.FileManager fileManager;
        java.lang.Long[] fileNums;
        int idx1, idx2, $i0, i#35;
        java.lang.String path;
        byte $b3;
        java.lang.Long $r0, $r1, $r2;
        java.io.File $r3;

        thisLsn := @parameter0: long;

        otherLsn := @parameter1: long;

        fileManager := @parameter2: berkeley.com.sleepycat.je.log.FileManager;

        $i0 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: int compareTo(long,long)>(thisLsn, otherLsn);

        if $i0 >= 0 goto label1;

        lsn1#5 = thisLsn;

        lsn2#7 = otherLsn;

        goto label2;

     label1:
        lsn1#5 = otherLsn;

        lsn2#7 = thisLsn;

     label2:
        file1 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long getFileNumber(long)>(lsn1#5);

        file2 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long getFileNumber(long)>(lsn2#7);

        $l1 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long getFileOffset(long)>(lsn2#7);

        $l2 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long getFileOffset(long)>(lsn1#5);

        dist#19 = $l1 - $l2;

        $b3 = file1 cmp file2;

        if $b3 != 0 goto label3;

        return dist#19;

     label3:
        fileNums = virtualinvoke fileManager.<berkeley.com.sleepycat.je.log.FileManager: java.lang.Long[] getAllFileNumbers()>();

        $r0 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(file1);

        idx1 = staticinvoke <java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object)>(fileNums, $r0);

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(file2);

        idx2 = staticinvoke <java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object)>(fileNums, $r1);

        i#35 = idx1;

     label4:
        if i#35 >= idx2 goto label5;

        $r2 = fileNums[i#35];

        $l4 = virtualinvoke $r2.<java.lang.Long: long longValue()>();

        path = virtualinvoke fileManager.<berkeley.com.sleepycat.je.log.FileManager: java.lang.String getFullFileName(long)>($l4);

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>(path);

        $l5 = virtualinvoke $r3.<java.io.File: long length()>();

        dist#19 = dist#19 + $l5;

        i#35 = i#35 + 1;

        goto label4;

     label5:
        return dist#19;
    }

    public static long makeTransientLsn(long)
    {
        long fileOffset, $l0;

        fileOffset := @parameter0: long;

        $l0 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long makeLsn(long,long)>(4294967295L, fileOffset);

        return $l0;
    }


