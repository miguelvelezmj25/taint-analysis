    public void <init>()
    {
        java.lang.AssertionError l0;

        l0 := @this: java.lang.AssertionError;

        specialinvoke l0.<java.lang.Error: void <init>()>();

        return;
    }

    public void <init>(java.lang.Object)
    {
        java.lang.AssertionError l0;
        java.lang.Object l1;
        java.lang.String $r0;
        boolean $z0;
        java.lang.Throwable $r1;

        l0 := @this: java.lang.AssertionError;

        l1 := @parameter0: java.lang.Object;

        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(l1);

        specialinvoke l0.<java.lang.AssertionError: void <init>(java.lang.String)>($r0);

        $z0 = l1 instanceof java.lang.Throwable;

        if $z0 == 0 goto label1;

        $r1 = (java.lang.Throwable) l1;

        virtualinvoke l0.<java.lang.AssertionError: java.lang.Throwable initCause(java.lang.Throwable)>($r1);

     label1:
        return;
    }

    private void <init>(java.lang.String)
    {
        java.lang.AssertionError l0;
        java.lang.String l1;

        l0 := @this: java.lang.AssertionError;

        l1 := @parameter0: java.lang.String;

        specialinvoke l0.<java.lang.Error: void <init>(java.lang.String)>(l1);

        return;
    }

    public void <init>(int)
    {
        java.lang.AssertionError l0;
        int l1;
        java.lang.String $r0;

        l0 := @this: java.lang.AssertionError;

        l1 := @parameter0: int;

        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(l1);

        specialinvoke l0.<java.lang.AssertionError: void <init>(java.lang.String)>($r0);

        return;
    }

    public void <init>(long)
    {
        java.lang.AssertionError l0;
        long l1;
        java.lang.String $r0;

        l0 := @this: java.lang.AssertionError;

        l1 := @parameter0: long;

        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l1);

        specialinvoke l0.<java.lang.AssertionError: void <init>(java.lang.String)>($r0);

        return;
    }


