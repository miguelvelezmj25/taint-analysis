    public static weka.classifiers.evaluation.output.prediction.AbstractOutput fromCommandline(java.lang.String)
    {
        java.lang.String cmdline, classname;
        java.lang.String[] options;
        java.lang.Exception e, $r1;
        java.lang.Object $r0;
        weka.classifiers.evaluation.output.prediction.AbstractOutput result#14;

        cmdline := @parameter0: java.lang.String;

     label1:
        options = staticinvoke <weka.core.Utils: java.lang.String[] splitOptions(java.lang.String)>(cmdline);

        classname = options[0];

        options[0] = "";

        $r0 = staticinvoke <weka.core.Utils: java.lang.Object forName(java.lang.Class,java.lang.String,java.lang.String[])>(class "weka/classifiers/evaluation/output/prediction/AbstractOutput", classname, options);

        result#14 = (weka.classifiers.evaluation.output.prediction.AbstractOutput) $r0;

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        e = $r1;

        result#14 = null;

     label4:
        return result#14;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void <init>()
    {
        weka.classifiers.evaluation.output.prediction.AbstractOutput this;
        java.io.File $r0;
        java.lang.StringBuffer $r1;

        this := @this: weka.classifiers.evaluation.output.prediction.AbstractOutput;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: weka.core.Instances m_Header> = null;

        this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: boolean m_OutputDistribution> = 0;

        this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: weka.core.Range m_Attributes> = null;

        this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: java.lang.StringBuffer m_Buffer> = null;

        this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: int m_NumDecimals> = 3;

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(".");

        this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: java.io.File m_OutputFile> = $r0;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: java.lang.StringBuffer m_FileBuffer> = $r1;

        this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: boolean m_SuppressOutput> = 0;

        return;
    }

    public void setHeader(weka.core.Instances)
    {
        weka.classifiers.evaluation.output.prediction.AbstractOutput this;
        weka.core.Instances value, $r0;

        this := @this: weka.classifiers.evaluation.output.prediction.AbstractOutput;

        value := @parameter0: weka.core.Instances;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(value);

        if value == null goto label1;

        $r0 = new weka.core.Instances;

        specialinvoke $r0.<weka.core.Instances: void <init>(weka.core.Instances,int)>(value, 0);

        this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: weka.core.Instances m_Header> = $r0;

     label1:
        return;
    }

    public void setAttributes(java.lang.String)
    {
        weka.classifiers.evaluation.output.prediction.AbstractOutput this;
        java.lang.String value;
        int $i0;
        weka.core.Range $r0;

        this := @this: weka.classifiers.evaluation.output.prediction.AbstractOutput;

        value := @parameter0: java.lang.String;

        $i0 = virtualinvoke value.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 0 goto label1;

        this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: weka.core.Range m_Attributes> = null;

        goto label2;

     label1:
        $r0 = new weka.core.Range;

        specialinvoke $r0.<weka.core.Range: void <init>(java.lang.String)>(value);

        this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: weka.core.Range m_Attributes> = $r0;

     label2:
        return;
    }

    public void setOutputDistribution(boolean)
    {
        weka.classifiers.evaluation.output.prediction.AbstractOutput this;
        boolean value;

        this := @this: weka.classifiers.evaluation.output.prediction.AbstractOutput;

        value := @parameter0: boolean;

        this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: boolean m_OutputDistribution> = value;

        return;
    }

    public void setBuffer(java.lang.StringBuffer)
    {
        weka.classifiers.evaluation.output.prediction.AbstractOutput this;
        java.lang.StringBuffer value;

        this := @this: weka.classifiers.evaluation.output.prediction.AbstractOutput;

        value := @parameter0: java.lang.StringBuffer;

        this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: java.lang.StringBuffer m_Buffer> = value;

        return;
    }

    public void print(weka.classifiers.Classifier, weka.core.converters.ConverterUtils$DataSource) throws java.lang.Exception
    {
        weka.classifiers.evaluation.output.prediction.AbstractOutput this;
        weka.classifiers.Classifier classifier;
        weka.core.converters.ConverterUtils$DataSource testset;

        this := @this: weka.classifiers.evaluation.output.prediction.AbstractOutput;

        classifier := @parameter0: weka.classifiers.Classifier;

        testset := @parameter1: weka.core.converters.ConverterUtils$DataSource;

        virtualinvoke this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: void printHeader()>();

        virtualinvoke this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: void printClassifications(weka.classifiers.Classifier,weka.core.converters.ConverterUtils$DataSource)>(classifier, testset);

        virtualinvoke this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: void printFooter()>();

        return;
    }

    public void printHeader()
    {
        weka.classifiers.evaluation.output.prediction.AbstractOutput this;
        java.lang.String error, $r0;
        java.lang.IllegalStateException $r1;

        this := @this: weka.classifiers.evaluation.output.prediction.AbstractOutput;

        $r0 = virtualinvoke this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: java.lang.String checkHeader()>();

        error = $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>(error);

        throw $r1;

     label1:
        virtualinvoke this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: void doPrintHeader()>();

        return;
    }

    public void printClassifications(weka.classifiers.Classifier, weka.core.converters.ConverterUtils$DataSource) throws java.lang.Exception
    {
        weka.classifiers.evaluation.output.prediction.AbstractOutput this;
        weka.classifiers.Classifier classifier;
        weka.core.converters.ConverterUtils$DataSource testset;
        double[][] predictions;
        weka.core.Instance inst, $r4;
        int i#2, $i0, i#20, $i1, $i2;
        boolean $z0, $z1, $z2;
        weka.core.BatchPredictor $r0, $r2;
        weka.core.Instances $r1, test#14, $r5, test#37;
        double[] $r3;

        this := @this: weka.classifiers.evaluation.output.prediction.AbstractOutput;

        classifier := @parameter0: weka.classifiers.Classifier;

        testset := @parameter1: weka.core.converters.ConverterUtils$DataSource;

        i#2 = 0;

        virtualinvoke testset.<weka.core.converters.ConverterUtils$DataSource: void reset()>();

        $z0 = classifier instanceof weka.core.BatchPredictor;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        $r0 = (weka.core.BatchPredictor) classifier;

        $z1 = interfaceinvoke $r0.<weka.core.BatchPredictor: boolean implementsMoreEfficientBatchPrediction()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label3;

        $r1 = this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: weka.core.Instances m_Header>;

        $i0 = virtualinvoke $r1.<weka.core.Instances: int classIndex()>();

        test#14 = virtualinvoke testset.<weka.core.converters.ConverterUtils$DataSource: weka.core.Instances getDataSet(int)>($i0);

        $r2 = (weka.core.BatchPredictor) classifier;

        predictions = interfaceinvoke $r2.<weka.core.BatchPredictor: double[][] distributionsForInstances(weka.core.Instances)>(test#14);

        i#20 = 0;

     label1:
        $i1 = virtualinvoke test#14.<weka.core.Instances: int numInstances()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#20);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#20 >= $i1 goto label2;

        $r3 = predictions[i#20];

        $r4 = virtualinvoke test#14.<weka.core.Instances: weka.core.Instance instance(int)>(i#20);

        virtualinvoke this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: void printClassification(double[],weka.core.Instance,int)>($r3, $r4, i#20);

        i#20 = i#20 + 1;

        goto label1;

     label2:
        goto label5;

     label3:
        $r5 = this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: weka.core.Instances m_Header>;

        $i2 = virtualinvoke $r5.<weka.core.Instances: int classIndex()>();

        test#37 = virtualinvoke testset.<weka.core.converters.ConverterUtils$DataSource: weka.core.Instances getStructure(int)>($i2);

     label4:
        $z2 = virtualinvoke testset.<weka.core.converters.ConverterUtils$DataSource: boolean hasMoreElements(weka.core.Instances)>(test#37);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label5;

        inst = virtualinvoke testset.<weka.core.converters.ConverterUtils$DataSource: weka.core.Instance nextElement(weka.core.Instances)>(test#37);

        virtualinvoke this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: void doPrintClassification(weka.classifiers.Classifier,weka.core.Instance,int)>(classifier, inst, i#2);

        i#2 = i#2 + 1;

        goto label4;

     label5:
        return;
    }

    public void printFooter() throws java.lang.Exception
    {
        weka.classifiers.evaluation.output.prediction.AbstractOutput this;
        java.lang.String error, $r0, $r7;
        java.io.BufferedWriter writer, $r3;
        java.lang.Exception e, $r8;
        weka.core.WekaException $r1;
        java.io.File $r2, $r5;
        boolean $z0;
        java.io.FileWriter $r4;
        java.lang.StringBuffer $r6;

        this := @this: weka.classifiers.evaluation.output.prediction.AbstractOutput;

        $r0 = virtualinvoke this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: java.lang.String checkBasic()>();

        error = $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label1;

        $r1 = new weka.core.WekaException;

        specialinvoke $r1.<weka.core.WekaException: void <init>(java.lang.String)>(error);

        throw $r1;

     label1:
        virtualinvoke this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: void doPrintFooter()>();

        $r2 = this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: java.io.File m_OutputFile>;

        $z0 = virtualinvoke $r2.<java.io.File: boolean isDirectory()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label5;

     label2:
        $r3 = new java.io.BufferedWriter;

        $r4 = new java.io.FileWriter;

        $r5 = this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: java.io.File m_OutputFile>;

        specialinvoke $r4.<java.io.FileWriter: void <init>(java.io.File)>($r5);

        specialinvoke $r3.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r4);

        writer = $r3;

        $r6 = this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: java.lang.StringBuffer m_FileBuffer>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke writer.<java.io.BufferedWriter: void write(java.lang.String)>($r7);

        virtualinvoke writer.<java.io.BufferedWriter: void newLine()>();

        virtualinvoke writer.<java.io.BufferedWriter: void flush()>();

        virtualinvoke writer.<java.io.BufferedWriter: void close()>();

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        e = $r8;

        virtualinvoke e.<java.lang.Exception: void printStackTrace()>();

     label5:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    protected java.lang.String checkBasic()
    {
        weka.classifiers.evaluation.output.prediction.AbstractOutput this;
        java.lang.StringBuffer $r0;
        weka.core.Instances $r1, $r4;
        weka.core.Range $r2, $r3;
        int $i0, $i1;

        this := @this: weka.classifiers.evaluation.output.prediction.AbstractOutput;

        $r0 = this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: java.lang.StringBuffer m_Buffer>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label1;

        return "Buffer is null!";

     label1:
        $r1 = this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: weka.core.Instances m_Header>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 != null goto label2;

        return "No dataset structure provided!";

     label2:
        $r2 = this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: weka.core.Range m_Attributes>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        if $r2 == null goto label3;

        $r3 = this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: weka.core.Range m_Attributes>;

        $r4 = this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: weka.core.Instances m_Header>;

        $i0 = virtualinvoke $r4.<weka.core.Instances: int numAttributes()>();

        $i1 = $i0 - 1;

        virtualinvoke $r3.<weka.core.Range: void setUpper(int)>($i1);

     label3:
        return null;
    }

    public void printClassification(double[], weka.core.Instance, int) throws java.lang.Exception
    {
        weka.classifiers.evaluation.output.prediction.AbstractOutput this;
        double[] dist;
        weka.core.Instance inst;
        int index;
        java.lang.String error, $r0;
        weka.core.WekaException $r1;

        this := @this: weka.classifiers.evaluation.output.prediction.AbstractOutput;

        dist := @parameter0: double[];

        inst := @parameter1: weka.core.Instance;

        index := @parameter2: int;

        $r0 = virtualinvoke this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: java.lang.String checkBasic()>();

        error = $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label1;

        $r1 = new weka.core.WekaException;

        specialinvoke $r1.<weka.core.WekaException: void <init>(java.lang.String)>(error);

        throw $r1;

     label1:
        virtualinvoke this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: void doPrintClassification(double[],weka.core.Instance,int)>(dist, inst, index);

        return;
    }

    protected void append(java.lang.String)
    {
        weka.classifiers.evaluation.output.prediction.AbstractOutput this;
        java.lang.String s;
        boolean $z0, $z1;
        java.lang.StringBuffer $r0, $r3;
        java.io.File $r2;

        this := @this: weka.classifiers.evaluation.output.prediction.AbstractOutput;

        s := @parameter0: java.lang.String;

        $z0 = virtualinvoke this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: boolean generatesOutput()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r0 = this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: java.lang.StringBuffer m_Buffer>;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(s);

     label1:
        $r2 = this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: java.io.File m_OutputFile>;

        $z1 = virtualinvoke $r2.<java.io.File: boolean isDirectory()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

        $r3 = this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: java.lang.StringBuffer m_FileBuffer>;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(s);

     label2:
        return;
    }

    public boolean generatesOutput()
    {
        weka.classifiers.evaluation.output.prediction.AbstractOutput this;
        java.io.File $r0, $r1;
        boolean $z0, $z1, $z2, $z3;

        this := @this: weka.classifiers.evaluation.output.prediction.AbstractOutput;

        $r0 = this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: java.io.File m_OutputFile>;

        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r1 = this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: java.io.File m_OutputFile>;

        $z1 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

        $z2 = this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: boolean m_SuppressOutput>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    protected java.lang.String checkHeader()
    {
        weka.classifiers.evaluation.output.prediction.AbstractOutput this;
        java.lang.String $r0;

        this := @this: weka.classifiers.evaluation.output.prediction.AbstractOutput;

        $r0 = virtualinvoke this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: java.lang.String checkBasic()>();

        return $r0;
    }

    public void printClassification(weka.classifiers.Classifier, weka.core.Instance, int) throws java.lang.Exception
    {
        weka.classifiers.evaluation.output.prediction.AbstractOutput this;
        weka.classifiers.Classifier classifier;
        weka.core.Instance inst;
        int index;
        java.lang.String error, $r0;
        weka.core.WekaException $r1;

        this := @this: weka.classifiers.evaluation.output.prediction.AbstractOutput;

        classifier := @parameter0: weka.classifiers.Classifier;

        inst := @parameter1: weka.core.Instance;

        index := @parameter2: int;

        $r0 = virtualinvoke this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: java.lang.String checkBasic()>();

        error = $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label1;

        $r1 = new weka.core.WekaException;

        specialinvoke $r1.<weka.core.WekaException: void <init>(java.lang.String)>(error);

        throw $r1;

     label1:
        virtualinvoke this.<weka.classifiers.evaluation.output.prediction.AbstractOutput: void doPrintClassification(weka.classifiers.Classifier,weka.core.Instance,int)>(classifier, inst, index);

        return;
    }


