    public void <init>(tool.dconvert.DConvert$HandlerCallback, float, java.lang.StringBuilder, float, java.util.List, tool.dconvert.arg.Arguments, java.util.concurrent.CountDownLatch, long)
    {
        tool.dconvert.WorkerHandlerCallBack this;
        tool.dconvert.DConvert$HandlerCallback handlerCallback;
        float convertPercentage, postProcessPercentage;
        java.lang.StringBuilder logStringBuilder;
        java.util.List postProcessors;
        tool.dconvert.arg.Arguments args;
        java.util.concurrent.CountDownLatch mainLatch;
        long beginMs;

        this := @this: tool.dconvert.WorkerHandlerCallBack;

        handlerCallback := @parameter0: tool.dconvert.DConvert$HandlerCallback;

        convertPercentage := @parameter1: float;

        logStringBuilder := @parameter2: java.lang.StringBuilder;

        postProcessPercentage := @parameter3: float;

        postProcessors := @parameter4: java.util.List;

        args := @parameter5: tool.dconvert.arg.Arguments;

        mainLatch := @parameter6: java.util.concurrent.CountDownLatch;

        beginMs := @parameter7: long;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<tool.dconvert.WorkerHandlerCallBack: tool.dconvert.DConvert$HandlerCallback handlerCallback> = handlerCallback;

        this.<tool.dconvert.WorkerHandlerCallBack: float convertPercentage> = convertPercentage;

        this.<tool.dconvert.WorkerHandlerCallBack: java.lang.StringBuilder logStringBuilder> = logStringBuilder;

        this.<tool.dconvert.WorkerHandlerCallBack: float postProcessPercentage> = postProcessPercentage;

        this.<tool.dconvert.WorkerHandlerCallBack: java.util.List postProcessors> = postProcessors;

        this.<tool.dconvert.WorkerHandlerCallBack: tool.dconvert.arg.Arguments args> = args;

        this.<tool.dconvert.WorkerHandlerCallBack: java.util.concurrent.CountDownLatch mainLatch> = mainLatch;

        this.<tool.dconvert.WorkerHandlerCallBack: long beginMs> = beginMs;

        return;
    }

    public void onFinished(int, java.util.List, java.lang.StringBuilder, java.util.List, boolean)
    {
        tool.dconvert.WorkerHandlerCallBack this;
        int finishedJobsConverters;
        java.util.List outFiles, exceptionsConverters, $r7;
        java.lang.StringBuilder logConverters, $r0, $r4;
        boolean haltedDuringProcessConverters;
        tool.dconvert.WorkerHandlerCallBack2 myWorkerHandlerCallBack, $r2;
        tool.dconvert.WorkerHandler wh, $r6;
        tool.dconvert.DConvert$HandlerCallback $r3;
        float $f0, $f1;
        java.util.concurrent.CountDownLatch $r5;
        long $l0;
        tool.dconvert.arg.Arguments $r8;

        this := @this: tool.dconvert.WorkerHandlerCallBack;

        finishedJobsConverters := @parameter0: int;

        outFiles := @parameter1: java.util.List;

        logConverters := @parameter2: java.lang.StringBuilder;

        exceptionsConverters := @parameter3: java.util.List;

        haltedDuringProcessConverters := @parameter4: boolean;

        $r0 = this.<tool.dconvert.WorkerHandlerCallBack: java.lang.StringBuilder logStringBuilder>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(logConverters);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(haltedDuringProcessConverters);

        if haltedDuringProcessConverters == 0 goto label1;

        specialinvoke this.<tool.dconvert.WorkerHandlerCallBack: void informFinished(int,java.util.List,boolean)>(finishedJobsConverters, exceptionsConverters, 1);

        goto label2;

     label1:
        $r2 = new tool.dconvert.WorkerHandlerCallBack2;

        $r3 = this.<tool.dconvert.WorkerHandlerCallBack: tool.dconvert.DConvert$HandlerCallback handlerCallback>;

        $f0 = this.<tool.dconvert.WorkerHandlerCallBack: float convertPercentage>;

        $r4 = this.<tool.dconvert.WorkerHandlerCallBack: java.lang.StringBuilder logStringBuilder>;

        $f1 = this.<tool.dconvert.WorkerHandlerCallBack: float postProcessPercentage>;

        $r5 = this.<tool.dconvert.WorkerHandlerCallBack: java.util.concurrent.CountDownLatch mainLatch>;

        $l0 = this.<tool.dconvert.WorkerHandlerCallBack: long beginMs>;

        specialinvoke $r2.<tool.dconvert.WorkerHandlerCallBack2: void <init>(tool.dconvert.DConvert$HandlerCallback,float,java.lang.StringBuilder,float,java.util.List,int,java.util.concurrent.CountDownLatch,long)>($r3, $f0, $r4, $f1, exceptionsConverters, finishedJobsConverters, $r5, $l0);

        myWorkerHandlerCallBack = $r2;

        $r6 = new tool.dconvert.WorkerHandler;

        $r7 = this.<tool.dconvert.WorkerHandlerCallBack: java.util.List postProcessors>;

        $r8 = this.<tool.dconvert.WorkerHandlerCallBack: tool.dconvert.arg.Arguments args>;

        specialinvoke $r6.<tool.dconvert.WorkerHandler: void <init>(java.util.List,tool.dconvert.arg.Arguments,tool.dconvert.WorkerHandler$Callback)>($r7, $r8, myWorkerHandlerCallBack);

        wh = $r6;

        virtualinvoke wh.<tool.dconvert.WorkerHandler: void start(java.util.List)>(outFiles);

     label2:
        return;
    }

    private void informFinished(int, java.util.List, boolean)
    {
        tool.dconvert.WorkerHandlerCallBack this;
        int finishedJobs;
        java.util.List exceptions;
        boolean haltedDuringProcess, $z0;
        java.util.Iterator l4;
        java.lang.Exception exception;
        tool.dconvert.DConvert$HandlerCallback $r0, $r8;
        java.util.concurrent.CountDownLatch $r1, $r2;
        java.lang.Object $r3;
        java.lang.StringBuilder $r4, $r6, $r9;
        java.lang.String $r5, $r10, $r11;
        long $l0, $l1, $l2;

        this := @this: tool.dconvert.WorkerHandlerCallBack;

        finishedJobs := @parameter0: int;

        exceptions := @parameter1: java.util.List;

        haltedDuringProcess := @parameter2: boolean;

        staticinvoke <java.lang.System: void gc()>();

        specialinvoke this.<tool.dconvert.WorkerHandlerCallBack: void printTrace()>();

        $r0 = this.<tool.dconvert.WorkerHandlerCallBack: tool.dconvert.DConvert$HandlerCallback handlerCallback>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label4;

        $r1 = this.<tool.dconvert.WorkerHandlerCallBack: java.util.concurrent.CountDownLatch mainLatch>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 == null goto label1;

        $r2 = this.<tool.dconvert.WorkerHandlerCallBack: java.util.concurrent.CountDownLatch mainLatch>;

        virtualinvoke $r2.<java.util.concurrent.CountDownLatch: void countDown()>();

     label1:
        l4 = interfaceinvoke exceptions.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        exception = (java.lang.Exception) $r3;

        $r4 = this.<tool.dconvert.WorkerHandlerCallBack: java.lang.StringBuilder logStringBuilder>;

        $r5 = staticinvoke <tool.dconvert.util.MiscUtil: java.lang.String getStackTrace(java.lang.Throwable)>(exception);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        goto label2;

     label3:
        $r8 = this.<tool.dconvert.WorkerHandlerCallBack: tool.dconvert.DConvert$HandlerCallback handlerCallback>;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l1 = this.<tool.dconvert.WorkerHandlerCallBack: long beginMs>;

        $l2 = $l0 - $l1;

        $r9 = this.<tool.dconvert.WorkerHandlerCallBack: java.lang.StringBuilder logStringBuilder>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String trim()>();

        interfaceinvoke $r8.<tool.dconvert.DConvert$HandlerCallback: void onFinished(int,java.util.List,long,boolean,java.lang.String)>(finishedJobs, exceptions, $l2, haltedDuringProcess, $r11);

     label4:
        return;
    }

    private void printTrace()
    {
        tool.dconvert.WorkerHandlerCallBack this;

        this := @this: tool.dconvert.WorkerHandlerCallBack;

        return;
    }

    public void onProgress(float)
    {
        tool.dconvert.WorkerHandlerCallBack this;
        float percent, $f0, $f1;
        tool.dconvert.DConvert$HandlerCallback $r0;

        this := @this: tool.dconvert.WorkerHandlerCallBack;

        percent := @parameter0: float;

        $r0 = this.<tool.dconvert.WorkerHandlerCallBack: tool.dconvert.DConvert$HandlerCallback handlerCallback>;

        $f0 = this.<tool.dconvert.WorkerHandlerCallBack: float convertPercentage>;

        $f1 = $f0 * percent;

        interfaceinvoke $r0.<tool.dconvert.DConvert$HandlerCallback: void onProgress(float)>($f1);

        return;
    }


