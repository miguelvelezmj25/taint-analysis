    boolean hasCycle()
    {
        berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker this;
        berkeley.com.sleepycat.je.txn.Locker $r0;
        java.lang.Long $r1;
        berkeley.com.sleepycat.je.txn.LockType $r2;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker;

        virtualinvoke this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: void getOwnerAndWaitersForRootLocker()>();

        $r0 = this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: berkeley.com.sleepycat.je.txn.Locker rootLocker>;

        $r1 = this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: java.lang.Long lsn>;

        $r2 = this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: berkeley.com.sleepycat.je.txn.LockType rootLocktype>;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: boolean hasCycleInternal(berkeley.com.sleepycat.je.txn.Locker,java.lang.Long,berkeley.com.sleepycat.je.txn.LockType,berkeley.com.sleepycat.je.txn.LockType)>($r0, $r1, $r2, null);

        return $z0;
    }

    boolean hasTrueDeadlock()
    {
        berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker this;
        java.util.Iterator l1;
        berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker$CycleNode cn;
        berkeley.com.sleepycat.je.txn.Lock lock, realtimeLock;
        java.lang.Long lsn;
        int lockTableIndex;
        berkeley.com.sleepycat.je.latch.Latch l7, $r5;
        java.util.Map lockTable;
        java.lang.Throwable l9, $r9;
        java.util.List $r0;
        boolean $z0;
        java.lang.Object $r1, $r8;
        berkeley.com.sleepycat.je.txn.LockManager $r2, $r3, $r6;
        berkeley.com.sleepycat.je.latch.Latch[] $r4;
        java.util.Map[] $r7;

        this := @this: berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker;

        $r0 = this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: java.util.List cycle>;

        l1 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label9;

        $r1 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>();

        cn = (berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker$CycleNode) $r1;

        lock = staticinvoke <berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker$CycleNode: berkeley.com.sleepycat.je.txn.Lock access$500(berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker$CycleNode)>(cn);

        lsn = staticinvoke <berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker$CycleNode: java.lang.Long access$700(berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker$CycleNode)>(cn);

        $r2 = this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: berkeley.com.sleepycat.je.txn.LockManager this$0>;

        lockTableIndex = virtualinvoke $r2.<berkeley.com.sleepycat.je.txn.LockManager: int getLockTableIndex(java.lang.Long)>(lsn);

        $r3 = this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: berkeley.com.sleepycat.je.txn.LockManager this$0>;

        $r4 = $r3.<berkeley.com.sleepycat.je.txn.LockManager: berkeley.com.sleepycat.je.latch.Latch[] lockTableLatches>;

        $r5 = $r4[lockTableIndex];

        l7 = $r5;

        entermonitor $r5;

     label2:
        $r6 = this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: berkeley.com.sleepycat.je.txn.LockManager this$0>;

        $r7 = staticinvoke <berkeley.com.sleepycat.je.txn.LockManager: java.util.Map[] access$600(berkeley.com.sleepycat.je.txn.LockManager)>($r6);

        lockTable = $r7[lockTableIndex];

        $r8 = interfaceinvoke lockTable.<java.util.Map: java.lang.Object get(java.lang.Object)>(lsn);

        realtimeLock = (berkeley.com.sleepycat.je.txn.Lock) $r8;

        exitmonitor l7;

     label3:
        goto label7;

     label4:
        $r9 := @caughtexception;

     label5:
        l9 = $r9;

        exitmonitor l7;

     label6:
        throw l9;

     label7:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(realtimeLock);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lock);

        if realtimeLock == lock goto label8;

        return 0;

     label8:
        goto label1;

     label9:
        return 1;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    berkeley.com.sleepycat.je.txn.Locker chooseTargetedLocker()
    {
        berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker this;
        berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker$CycleNode[] cycleNodeArray, $r1;
        berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker$CycleNodeComparator cnc, $r3;
        java.util.List $r0;
        java.lang.Object[] $r2;
        int $i0;
        berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker$CycleNode $r4;
        berkeley.com.sleepycat.je.txn.Locker $r5;

        this := @this: berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker;

        $r0 = this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: java.util.List cycle>;

        $r1 = newarray (berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker$CycleNode)[0];

        $r2 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r1);

        cycleNodeArray = (berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker$CycleNode[]) $r2;

        $r3 = new berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker$CycleNodeComparator;

        specialinvoke $r3.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker$CycleNodeComparator: void <init>(berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker)>(this);

        cnc = $r3;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(cycleNodeArray, cnc);

        $i0 = virtualinvoke this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: int getTargetedLockerIndex()>();

        $r4 = cycleNodeArray[$i0];

        $r5 = staticinvoke <berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker$CycleNode: berkeley.com.sleepycat.je.txn.Locker access$400(berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker$CycleNode)>($r4);

        return $r5;
    }

    int getTargetedLockerIndex()
    {
        berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker this;
        java.util.Iterator l4;
        berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker$CycleNode cn;
        long sum#2, $l1, $l2, $l3, $l4;
        int nLockers#4, $i0, $i5;
        java.util.List $r0;
        boolean $z0;
        java.lang.Object $r1;
        berkeley.com.sleepycat.je.txn.Lock $r2;

        this := @this: berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker;

        sum#2 = 0L;

        nLockers#4 = 0;

        $r0 = this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: java.util.List cycle>;

        l4 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $r1 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        cn = (berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker$CycleNode) $r1;

        $r2 = staticinvoke <berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker$CycleNode: berkeley.com.sleepycat.je.txn.Lock access$500(berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker$CycleNode)>(cn);

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r2);

        $l1 = (long) $i0;

        sum#2 = sum#2 + $l1;

        nLockers#4 = nLockers#4 + 1;

        goto label1;

     label2:
        $l2 = staticinvoke <java.lang.Math: long abs(long)>(sum#2);

        $l3 = (long) nLockers#4;

        $l4 = $l2 % $l3;

        $i5 = (int) $l4;

        return $i5;
    }

    void getOwnerAndWaitersForRootLocker()
    {
        berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker this;
        int lockTableIndex;
        berkeley.com.sleepycat.je.latch.Latch l2, $r4;
        java.util.Set localOwners;
        java.util.List localWaiters;
        java.lang.Throwable l5, $r9;
        berkeley.com.sleepycat.je.txn.LockManager $r0, $r2, $r5, $r7;
        java.lang.Long $r1, $r6, $r8;
        berkeley.com.sleepycat.je.latch.Latch[] $r3;

        this := @this: berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker;

        $r0 = this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: berkeley.com.sleepycat.je.txn.LockManager this$0>;

        $r1 = this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: java.lang.Long lsn>;

        lockTableIndex = virtualinvoke $r0.<berkeley.com.sleepycat.je.txn.LockManager: int getLockTableIndex(java.lang.Long)>($r1);

        $r2 = this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: berkeley.com.sleepycat.je.txn.LockManager this$0>;

        $r3 = $r2.<berkeley.com.sleepycat.je.txn.LockManager: berkeley.com.sleepycat.je.latch.Latch[] lockTableLatches>;

        $r4 = $r3[lockTableIndex];

        l2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: berkeley.com.sleepycat.je.txn.LockManager this$0>;

        $r6 = this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: java.lang.Long lsn>;

        localOwners = virtualinvoke $r5.<berkeley.com.sleepycat.je.txn.LockManager: java.util.Set getOwnersInternal(java.lang.Long,int)>($r6, lockTableIndex);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(localOwners);

        if localOwners == null goto label2;

        this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: java.util.Set ownersForRootLock> = localOwners;

     label2:
        $r7 = this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: berkeley.com.sleepycat.je.txn.LockManager this$0>;

        $r8 = this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: java.lang.Long lsn>;

        localWaiters = virtualinvoke $r7.<berkeley.com.sleepycat.je.txn.LockManager: java.util.List getWaitersInternal(java.lang.Long,int)>($r8, lockTableIndex);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(localWaiters);

        if localWaiters == null goto label3;

        this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: java.util.List waitersForRootLock> = localWaiters;

     label3:
        exitmonitor l2;

     label4:
        goto label8;

     label5:
        $r9 := @caughtexception;

     label6:
        l5 = $r9;

        exitmonitor l2;

     label7:
        throw l5;

     label8:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    boolean hasCycleInternal(berkeley.com.sleepycat.je.txn.Locker, java.lang.Long, berkeley.com.sleepycat.je.txn.LockType, berkeley.com.sleepycat.je.txn.LockType)
    {
        berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker this;
        berkeley.com.sleepycat.je.txn.Locker checkedLocker, locker, $r13, $r18;
        java.lang.Long lsn, waitsFor;
        berkeley.com.sleepycat.je.txn.LockType requestLocktype, ownLockType, ownType, requestType;
        int lockTableIndex, index#71, $i0;
        berkeley.com.sleepycat.je.latch.Latch l8, $r3;
        java.util.Map lockTable;
        berkeley.com.sleepycat.je.txn.Lock checkedLock;
        java.util.Set ownersForCheckedLock;
        java.lang.Throwable l10, $r9;
        berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker$CycleNode cn, $r10, $r17;
        java.util.Iterator l9;
        berkeley.com.sleepycat.je.txn.LockInfo info;
        berkeley.com.sleepycat.je.txn.LockManager $r0, $r1, $r4, $r5, $r8;
        berkeley.com.sleepycat.je.latch.Latch[] $r2;
        boolean $z0, $z3, $z4;
        java.util.Map[] $r6;
        java.lang.Object $r7, $r12, $r16;
        java.util.List $r11, $r14, $r15, $r19, $r20, $r21;

        this := @this: berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker;

        checkedLocker := @parameter0: berkeley.com.sleepycat.je.txn.Locker;

        lsn := @parameter1: java.lang.Long;

        requestLocktype := @parameter2: berkeley.com.sleepycat.je.txn.LockType;

        ownLockType := @parameter3: berkeley.com.sleepycat.je.txn.LockType;

        $r0 = this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: berkeley.com.sleepycat.je.txn.LockManager this$0>;

        lockTableIndex = virtualinvoke $r0.<berkeley.com.sleepycat.je.txn.LockManager: int getLockTableIndex(java.lang.Long)>(lsn);

        $r1 = this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: berkeley.com.sleepycat.je.txn.LockManager this$0>;

        $r2 = $r1.<berkeley.com.sleepycat.je.txn.LockManager: berkeley.com.sleepycat.je.latch.Latch[] lockTableLatches>;

        $r3 = $r2[lockTableIndex];

        l8 = $r3;

        entermonitor $r3;

     label01:
        $r4 = this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: berkeley.com.sleepycat.je.txn.LockManager this$0>;

        $z0 = virtualinvoke $r4.<berkeley.com.sleepycat.je.txn.LockManager: boolean isOwnerInternal(java.lang.Long,berkeley.com.sleepycat.je.txn.Locker,berkeley.com.sleepycat.je.txn.LockType,int)>(lsn, checkedLocker, requestLocktype, lockTableIndex);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label03;

        exitmonitor l8;

     label02:
        return 0;

     label03:
        $r5 = this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: berkeley.com.sleepycat.je.txn.LockManager this$0>;

        $r6 = staticinvoke <berkeley.com.sleepycat.je.txn.LockManager: java.util.Map[] access$600(berkeley.com.sleepycat.je.txn.LockManager)>($r5);

        lockTable = $r6[lockTableIndex];

        $r7 = interfaceinvoke lockTable.<java.util.Map: java.lang.Object get(java.lang.Object)>(lsn);

        checkedLock = (berkeley.com.sleepycat.je.txn.Lock) $r7;

        $r8 = this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: berkeley.com.sleepycat.je.txn.LockManager this$0>;

        ownersForCheckedLock = virtualinvoke $r8.<berkeley.com.sleepycat.je.txn.LockManager: java.util.Set getOwnersInternal(java.lang.Long,int)>(lsn, lockTableIndex);

        exitmonitor l8;

     label04:
        goto label08;

     label05:
        $r9 := @caughtexception;

     label06:
        l10 = $r9;

        exitmonitor l8;

     label07:
        throw l10;

     label08:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(ownersForCheckedLock);

        if ownersForCheckedLock != null goto label09;

        return 0;

     label09:
        $r10 = new berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker$CycleNode;

        specialinvoke $r10.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker$CycleNode: void <init>(berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker,berkeley.com.sleepycat.je.txn.Locker,java.lang.Long,berkeley.com.sleepycat.je.txn.Lock,berkeley.com.sleepycat.je.txn.LockType,berkeley.com.sleepycat.je.txn.LockType)>(this, checkedLocker, lsn, checkedLock, requestLocktype, ownLockType);

        cn = $r10;

        $r11 = this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: java.util.List cycle>;

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>(cn);

        l9 = interfaceinvoke ownersForCheckedLock.<java.util.Set: java.util.Iterator iterator()>();

     label10:
        $z3 = interfaceinvoke l9.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label16;

        $r12 = interfaceinvoke l9.<java.util.Iterator: java.lang.Object next()>();

        info = (berkeley.com.sleepycat.je.txn.LockInfo) $r12;

        locker = virtualinvoke info.<berkeley.com.sleepycat.je.txn.LockInfo: berkeley.com.sleepycat.je.txn.Locker getLocker()>();

        ownType = virtualinvoke info.<berkeley.com.sleepycat.je.txn.LockInfo: berkeley.com.sleepycat.je.txn.LockType getLockType()>();

        waitsFor = virtualinvoke locker.<berkeley.com.sleepycat.je.txn.Locker: java.lang.Long getWaitingFor()>();

        requestType = virtualinvoke locker.<berkeley.com.sleepycat.je.txn.Locker: berkeley.com.sleepycat.je.txn.LockType getWaitingForType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(locker);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(checkedLocker);

        if locker == checkedLocker goto label15;

        $r13 = this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: berkeley.com.sleepycat.je.txn.Locker rootLocker>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(locker);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r13);

        if locker != $r13 goto label11;

        return 1;

     label11:
        index#71 = 0;

     label12:
        $r14 = this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: java.util.List cycle>;

        $i0 = interfaceinvoke $r14.<java.util.List: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(index#71);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if index#71 >= $i0 goto label14;

        $r15 = this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: java.util.List cycle>;

        $r16 = interfaceinvoke $r15.<java.util.List: java.lang.Object get(int)>(index#71);

        $r17 = (berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker$CycleNode) $r16;

        $r18 = staticinvoke <berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker$CycleNode: berkeley.com.sleepycat.je.txn.Locker access$400(berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker$CycleNode)>($r17);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r18);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(locker);

        if $r18 != locker goto label13;

        $r19 = this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: java.util.List cycle>;

        $r20 = interfaceinvoke $r19.<java.util.List: java.util.List subList(int,int)>(0, index#71);

        interfaceinvoke $r20.<java.util.List: void clear()>();

        return 1;

     label13:
        index#71 = index#71 + 1;

        goto label12;

     label14:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(waitsFor);

        if waitsFor == null goto label15;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(requestType);

        if requestType == null goto label15;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(ownType);

        if ownType == null goto label15;

        $z4 = virtualinvoke this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: boolean hasCycleInternal(berkeley.com.sleepycat.je.txn.Locker,java.lang.Long,berkeley.com.sleepycat.je.txn.LockType,berkeley.com.sleepycat.je.txn.LockType)>(locker, waitsFor, requestType, ownType);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label15;

        return 1;

     label15:
        goto label10;

     label16:
        $r21 = this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: java.util.List cycle>;

        interfaceinvoke $r21.<java.util.List: boolean remove(java.lang.Object)>(cn);

        return 0;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
    }

    void <init>(berkeley.com.sleepycat.je.txn.LockManager, berkeley.com.sleepycat.je.txn.Locker, java.lang.Long, berkeley.com.sleepycat.je.txn.LockType)
    {
        berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker this;
        berkeley.com.sleepycat.je.txn.LockManager l1;
        berkeley.com.sleepycat.je.txn.Locker locker;
        java.lang.Long lsn;
        berkeley.com.sleepycat.je.txn.LockType locktype;
        java.util.ArrayList $r0;

        this := @this: berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker;

        l1 := @parameter0: berkeley.com.sleepycat.je.txn.LockManager;

        locker := @parameter1: berkeley.com.sleepycat.je.txn.Locker;

        lsn := @parameter2: java.lang.Long;

        locktype := @parameter3: berkeley.com.sleepycat.je.txn.LockType;

        this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: berkeley.com.sleepycat.je.txn.LockManager this$0> = l1;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: java.util.List cycle> = $r0;

        this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: berkeley.com.sleepycat.je.txn.Locker rootLocker> = locker;

        this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: java.lang.Long lsn> = lsn;

        this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: berkeley.com.sleepycat.je.txn.LockType rootLocktype> = locktype;

        return;
    }

    java.util.Set getOwnersForRootLock()
    {
        berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker this;
        java.util.Set $r0;

        this := @this: berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker;

        $r0 = this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: java.util.Set ownersForRootLock>;

        return $r0;
    }

    java.util.List getWaitersForRootLock()
    {
        berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker this;
        java.util.List $r0;

        this := @this: berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker;

        $r0 = this.<berkeley.com.sleepycat.je.txn.LockManager$DeadlockChecker: java.util.List waitersForRootLock>;

        return $r0;
    }


