    public void <init>(weka.classifiers.trees.j48.ModelSelection, double, int)
    {
        weka.classifiers.rules.part.MakeDecList this;
        weka.classifiers.trees.j48.ModelSelection toSelectLocModel;
        double cf;
        int minNum;

        this := @this: weka.classifiers.rules.part.MakeDecList;

        toSelectLocModel := @parameter0: weka.classifiers.trees.j48.ModelSelection;

        cf := @parameter1: double;

        minNum := @parameter2: int;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<weka.classifiers.rules.part.MakeDecList: double CF> = 0.25;

        this.<weka.classifiers.rules.part.MakeDecList: int numSetS> = 3;

        this.<weka.classifiers.rules.part.MakeDecList: boolean reducedErrorPruning> = 0;

        this.<weka.classifiers.rules.part.MakeDecList: boolean unpruned> = 0;

        this.<weka.classifiers.rules.part.MakeDecList: int m_seed> = 1;

        this.<weka.classifiers.rules.part.MakeDecList: weka.classifiers.trees.j48.ModelSelection toSelectModeL> = toSelectLocModel;

        this.<weka.classifiers.rules.part.MakeDecList: double CF> = cf;

        this.<weka.classifiers.rules.part.MakeDecList: boolean reducedErrorPruning> = 0;

        this.<weka.classifiers.rules.part.MakeDecList: boolean unpruned> = 0;

        this.<weka.classifiers.rules.part.MakeDecList: int minNumObj> = minNum;

        return;
    }

    public void <init>(weka.classifiers.trees.j48.ModelSelection, int, int, int)
    {
        weka.classifiers.rules.part.MakeDecList this;
        weka.classifiers.trees.j48.ModelSelection toSelectLocModel;
        int num, minNum, seed;

        this := @this: weka.classifiers.rules.part.MakeDecList;

        toSelectLocModel := @parameter0: weka.classifiers.trees.j48.ModelSelection;

        num := @parameter1: int;

        minNum := @parameter2: int;

        seed := @parameter3: int;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<weka.classifiers.rules.part.MakeDecList: double CF> = 0.25;

        this.<weka.classifiers.rules.part.MakeDecList: int numSetS> = 3;

        this.<weka.classifiers.rules.part.MakeDecList: boolean reducedErrorPruning> = 0;

        this.<weka.classifiers.rules.part.MakeDecList: boolean unpruned> = 0;

        this.<weka.classifiers.rules.part.MakeDecList: int m_seed> = 1;

        this.<weka.classifiers.rules.part.MakeDecList: weka.classifiers.trees.j48.ModelSelection toSelectModeL> = toSelectLocModel;

        this.<weka.classifiers.rules.part.MakeDecList: int numSetS> = num;

        this.<weka.classifiers.rules.part.MakeDecList: boolean reducedErrorPruning> = 1;

        this.<weka.classifiers.rules.part.MakeDecList: boolean unpruned> = 0;

        this.<weka.classifiers.rules.part.MakeDecList: int minNumObj> = minNum;

        this.<weka.classifiers.rules.part.MakeDecList: int m_seed> = seed;

        return;
    }

    public void <init>(weka.classifiers.trees.j48.ModelSelection, int)
    {
        weka.classifiers.rules.part.MakeDecList this;
        weka.classifiers.trees.j48.ModelSelection toSelectLocModel;
        int minNum;

        this := @this: weka.classifiers.rules.part.MakeDecList;

        toSelectLocModel := @parameter0: weka.classifiers.trees.j48.ModelSelection;

        minNum := @parameter1: int;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<weka.classifiers.rules.part.MakeDecList: double CF> = 0.25;

        this.<weka.classifiers.rules.part.MakeDecList: int numSetS> = 3;

        this.<weka.classifiers.rules.part.MakeDecList: boolean reducedErrorPruning> = 0;

        this.<weka.classifiers.rules.part.MakeDecList: boolean unpruned> = 0;

        this.<weka.classifiers.rules.part.MakeDecList: int m_seed> = 1;

        this.<weka.classifiers.rules.part.MakeDecList: weka.classifiers.trees.j48.ModelSelection toSelectModeL> = toSelectLocModel;

        this.<weka.classifiers.rules.part.MakeDecList: boolean reducedErrorPruning> = 0;

        this.<weka.classifiers.rules.part.MakeDecList: boolean unpruned> = 1;

        this.<weka.classifiers.rules.part.MakeDecList: int minNumObj> = minNum;

        return;
    }

    public void buildClassifier(weka.core.Instances) throws java.lang.Exception
    {
        weka.classifiers.rules.part.MakeDecList this;
        java.util.Random random, $r3;
        weka.core.Instances newGrowData, newPruneData, data#1, $r1, data#8, oldGrowData#36, oldPruneData#45, $r12, $r14;
        weka.core.Capabilities $r0;
        java.util.Vector $r2, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z8, $z9, $z10, $z11;
        int $i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        long $l1;
        double $d0, $d1, currentWeight#104, $d2, $d3, $d4, currentWeight#141, $d5, $d6, $d7;
        weka.classifiers.rules.part.ClassifierDecList $r4, currentRule#61;
        weka.classifiers.trees.j48.ModelSelection $r5, $r7, $r10;
        weka.classifiers.rules.part.PruneableDecList $r6, $r8;
        weka.classifiers.rules.part.C45PruneableDecList $r9, $r11;
        java.util.Enumeration enu#94, enu#131;
        java.lang.Object $r13, $r15;
        weka.core.Instance instance#100, instance#137;

        this := @this: weka.classifiers.rules.part.MakeDecList;

        data#1 := @parameter0: weka.core.Instances;

        $r0 = virtualinvoke this.<weka.classifiers.rules.part.MakeDecList: weka.core.Capabilities getCapabilities()>();

        virtualinvoke $r0.<weka.core.Capabilities: void testWithFail(weka.core.Instances)>(data#1);

        $r1 = new weka.core.Instances;

        specialinvoke $r1.<weka.core.Instances: void <init>(weka.core.Instances)>(data#1);

        data#8 = $r1;

        virtualinvoke data#8.<weka.core.Instances: void deleteWithMissingClass()>();

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        this.<weka.classifiers.rules.part.MakeDecList: java.util.Vector theRules> = $r2;

        $z0 = this.<weka.classifiers.rules.part.MakeDecList: boolean reducedErrorPruning>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label01;

        $z1 = this.<weka.classifiers.rules.part.MakeDecList: boolean unpruned>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label01;

        $r3 = new java.util.Random;

        $i0 = this.<weka.classifiers.rules.part.MakeDecList: int m_seed>;

        $l1 = (long) $i0;

        specialinvoke $r3.<java.util.Random: void <init>(long)>($l1);

        random = $r3;

        virtualinvoke data#8.<weka.core.Instances: void randomize(java.util.Random)>(random);

        $i2 = this.<weka.classifiers.rules.part.MakeDecList: int numSetS>;

        virtualinvoke data#8.<weka.core.Instances: void stratify(int)>($i2);

        $i3 = this.<weka.classifiers.rules.part.MakeDecList: int numSetS>;

        $i4 = this.<weka.classifiers.rules.part.MakeDecList: int numSetS>;

        $i5 = $i4 - 1;

        oldGrowData#36 = virtualinvoke data#8.<weka.core.Instances: weka.core.Instances trainCV(int,int,java.util.Random)>($i3, $i5, random);

        $i6 = this.<weka.classifiers.rules.part.MakeDecList: int numSetS>;

        $i7 = this.<weka.classifiers.rules.part.MakeDecList: int numSetS>;

        $i8 = $i7 - 1;

        oldPruneData#45 = virtualinvoke data#8.<weka.core.Instances: weka.core.Instances testCV(int,int)>($i6, $i8);

        goto label02;

     label01:
        oldGrowData#36 = data#8;

        oldPruneData#45 = null;

     label02:
        $i9 = virtualinvoke oldGrowData#36.<weka.core.Instances: int numInstances()>();

        $d0 = (double) $i9;

        $z2 = staticinvoke <weka.core.Utils: boolean gr(double,double)>($d0, 0.0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label13;

        $z3 = this.<weka.classifiers.rules.part.MakeDecList: boolean unpruned>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label03;

        $r4 = new weka.classifiers.rules.part.ClassifierDecList;

        $r5 = this.<weka.classifiers.rules.part.MakeDecList: weka.classifiers.trees.j48.ModelSelection toSelectModeL>;

        $i10 = this.<weka.classifiers.rules.part.MakeDecList: int minNumObj>;

        specialinvoke $r4.<weka.classifiers.rules.part.ClassifierDecList: void <init>(weka.classifiers.trees.j48.ModelSelection,int)>($r5, $i10);

        currentRule#61 = $r4;

        virtualinvoke currentRule#61.<weka.classifiers.rules.part.ClassifierDecList: void buildRule(weka.core.Instances)>(oldGrowData#36);

        goto label05;

     label03:
        $z4 = this.<weka.classifiers.rules.part.MakeDecList: boolean reducedErrorPruning>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label04;

        $r6 = new weka.classifiers.rules.part.PruneableDecList;

        $r7 = this.<weka.classifiers.rules.part.MakeDecList: weka.classifiers.trees.j48.ModelSelection toSelectModeL>;

        $i11 = this.<weka.classifiers.rules.part.MakeDecList: int minNumObj>;

        specialinvoke $r6.<weka.classifiers.rules.part.PruneableDecList: void <init>(weka.classifiers.trees.j48.ModelSelection,int)>($r7, $i11);

        currentRule#61 = $r6;

        $r8 = (weka.classifiers.rules.part.PruneableDecList) currentRule#61;

        virtualinvoke $r8.<weka.classifiers.rules.part.PruneableDecList: void buildRule(weka.core.Instances,weka.core.Instances)>(oldGrowData#36, oldPruneData#45);

        goto label05;

     label04:
        $r9 = new weka.classifiers.rules.part.C45PruneableDecList;

        $r10 = this.<weka.classifiers.rules.part.MakeDecList: weka.classifiers.trees.j48.ModelSelection toSelectModeL>;

        $d1 = this.<weka.classifiers.rules.part.MakeDecList: double CF>;

        $i12 = this.<weka.classifiers.rules.part.MakeDecList: int minNumObj>;

        specialinvoke $r9.<weka.classifiers.rules.part.C45PruneableDecList: void <init>(weka.classifiers.trees.j48.ModelSelection,double,int)>($r10, $d1, $i12);

        currentRule#61 = $r9;

        $r11 = (weka.classifiers.rules.part.C45PruneableDecList) currentRule#61;

        virtualinvoke $r11.<weka.classifiers.rules.part.C45PruneableDecList: void buildRule(weka.core.Instances)>(oldGrowData#36);

     label05:
        $r12 = new weka.core.Instances;

        $i13 = virtualinvoke oldGrowData#36.<weka.core.Instances: int numInstances()>();

        specialinvoke $r12.<weka.core.Instances: void <init>(weka.core.Instances,int)>(oldGrowData#36, $i13);

        newGrowData = $r12;

        enu#94 = virtualinvoke oldGrowData#36.<weka.core.Instances: java.util.Enumeration enumerateInstances()>();

     label06:
        $z5 = interfaceinvoke enu#94.<java.util.Enumeration: boolean hasMoreElements()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label08;

        $r13 = interfaceinvoke enu#94.<java.util.Enumeration: java.lang.Object nextElement()>();

        instance#100 = (weka.core.Instance) $r13;

        currentWeight#104 = virtualinvoke currentRule#61.<weka.classifiers.rules.part.ClassifierDecList: double weight(weka.core.Instance)>(instance#100);

        $z6 = staticinvoke <weka.core.Utils: boolean sm(double,double)>(currentWeight#104, 1.0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label07;

        $d2 = interfaceinvoke instance#100.<weka.core.Instance: double weight()>();

        $d3 = 1.0 - currentWeight#104;

        $d4 = $d2 * $d3;

        interfaceinvoke instance#100.<weka.core.Instance: void setWeight(double)>($d4);

        virtualinvoke newGrowData.<weka.core.Instances: boolean add(weka.core.Instance)>(instance#100);

     label07:
        goto label06;

     label08:
        virtualinvoke newGrowData.<weka.core.Instances: void compactify()>();

        oldGrowData#36 = newGrowData;

        $z8 = this.<weka.classifiers.rules.part.MakeDecList: boolean reducedErrorPruning>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 == 0 goto label12;

        $z9 = this.<weka.classifiers.rules.part.MakeDecList: boolean unpruned>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 != 0 goto label12;

        $r14 = new weka.core.Instances;

        $i14 = virtualinvoke oldPruneData#45.<weka.core.Instances: int numInstances()>();

        specialinvoke $r14.<weka.core.Instances: void <init>(weka.core.Instances,int)>(oldPruneData#45, $i14);

        newPruneData = $r14;

        enu#131 = virtualinvoke oldPruneData#45.<weka.core.Instances: java.util.Enumeration enumerateInstances()>();

     label09:
        $z10 = interfaceinvoke enu#131.<java.util.Enumeration: boolean hasMoreElements()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z10);

        if $z10 == 0 goto label11;

        $r15 = interfaceinvoke enu#131.<java.util.Enumeration: java.lang.Object nextElement()>();

        instance#137 = (weka.core.Instance) $r15;

        currentWeight#141 = virtualinvoke currentRule#61.<weka.classifiers.rules.part.ClassifierDecList: double weight(weka.core.Instance)>(instance#137);

        $z11 = staticinvoke <weka.core.Utils: boolean sm(double,double)>(currentWeight#141, 1.0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z11);

        if $z11 == 0 goto label10;

        $d5 = interfaceinvoke instance#137.<weka.core.Instance: double weight()>();

        $d6 = 1.0 - currentWeight#141;

        $d7 = $d5 * $d6;

        interfaceinvoke instance#137.<weka.core.Instance: void setWeight(double)>($d7);

        virtualinvoke newPruneData.<weka.core.Instances: boolean add(weka.core.Instance)>(instance#137);

     label10:
        goto label09;

     label11:
        virtualinvoke newPruneData.<weka.core.Instances: void compactify()>();

        oldPruneData#45 = newPruneData;

     label12:
        $r16 = this.<weka.classifiers.rules.part.MakeDecList: java.util.Vector theRules>;

        virtualinvoke $r16.<java.util.Vector: void addElement(java.lang.Object)>(currentRule#61);

        goto label02;

     label13:
        return;
    }

    public weka.core.Capabilities getCapabilities()
    {
        weka.classifiers.rules.part.MakeDecList this;
        weka.core.Capabilities result, $r0;
        weka.core.Capabilities$Capability $r1, $r2, $r3, $r4, $r5, $r6;

        this := @this: weka.classifiers.rules.part.MakeDecList;

        $r0 = new weka.core.Capabilities;

        specialinvoke $r0.<weka.core.Capabilities: void <init>(weka.core.CapabilitiesHandler)>(this);

        result = $r0;

        virtualinvoke result.<weka.core.Capabilities: void disableAll()>();

        $r1 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability NOMINAL_ATTRIBUTES>;

        virtualinvoke result.<weka.core.Capabilities: void enable(weka.core.Capabilities$Capability)>($r1);

        $r2 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability NUMERIC_ATTRIBUTES>;

        virtualinvoke result.<weka.core.Capabilities: void enable(weka.core.Capabilities$Capability)>($r2);

        $r3 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability DATE_ATTRIBUTES>;

        virtualinvoke result.<weka.core.Capabilities: void enable(weka.core.Capabilities$Capability)>($r3);

        $r4 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability MISSING_VALUES>;

        virtualinvoke result.<weka.core.Capabilities: void enable(weka.core.Capabilities$Capability)>($r4);

        $r5 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability NOMINAL_CLASS>;

        virtualinvoke result.<weka.core.Capabilities: void enable(weka.core.Capabilities$Capability)>($r5);

        $r6 = <weka.core.Capabilities$Capability: weka.core.Capabilities$Capability MISSING_CLASS_VALUES>;

        virtualinvoke result.<weka.core.Capabilities: void enable(weka.core.Capabilities$Capability)>($r6);

        return result;
    }

    public double[] distributionForInstance(weka.core.Instance) throws java.lang.Exception
    {
        weka.classifiers.rules.part.MakeDecList this;
        weka.core.Instance instance;
        double[] sumProbs, currentProbs#30;
        double currentWeight, weight#4, $d0, $d1, $d2, $d3, $d4;
        int $i0, i#9, j#32, $i1;
        boolean $z0, $z1;
        java.util.Vector $r0, $r3;
        java.lang.Object $r1, $r4;
        weka.classifiers.rules.part.ClassifierDecList $r2, $r5;

        this := @this: weka.classifiers.rules.part.MakeDecList;

        instance := @parameter0: weka.core.Instance;

        weight#4 = 1.0;

        $i0 = interfaceinvoke instance.<weka.core.Instance: int numClasses()>();

        sumProbs = newarray (double)[$i0];

        i#9 = 0;

     label1:
        $z0 = staticinvoke <weka.core.Utils: boolean gr(double,double)>(weight#4, 0.0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label5;

        $r0 = this.<weka.classifiers.rules.part.MakeDecList: java.util.Vector theRules>;

        $r1 = virtualinvoke $r0.<java.util.Vector: java.lang.Object elementAt(int)>(i#9);

        $r2 = (weka.classifiers.rules.part.ClassifierDecList) $r1;

        currentWeight = virtualinvoke $r2.<weka.classifiers.rules.part.ClassifierDecList: double weight(weka.core.Instance)>(instance);

        $z1 = staticinvoke <weka.core.Utils: boolean gr(double,double)>(currentWeight, 0.0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label4;

        $r3 = this.<weka.classifiers.rules.part.MakeDecList: java.util.Vector theRules>;

        $r4 = virtualinvoke $r3.<java.util.Vector: java.lang.Object elementAt(int)>(i#9);

        $r5 = (weka.classifiers.rules.part.ClassifierDecList) $r4;

        currentProbs#30 = virtualinvoke $r5.<weka.classifiers.rules.part.ClassifierDecList: double[] distributionForInstance(weka.core.Instance)>(instance);

        j#32 = 0;

     label2:
        $i1 = lengthof sumProbs;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#32);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if j#32 >= $i1 goto label3;

        $d0 = sumProbs[j#32];

        $d1 = currentProbs#30[j#32];

        $d2 = weight#4 * $d1;

        $d3 = $d0 + $d2;

        sumProbs[j#32] = $d3;

        j#32 = j#32 + 1;

        goto label2;

     label3:
        $d4 = 1.0 - currentWeight;

        weight#4 = weight#4 * $d4;

     label4:
        i#9 = i#9 + 1;

        goto label1;

     label5:
        return sumProbs;
    }

    public java.lang.String toString()
    {
        weka.classifiers.rules.part.MakeDecList this;
        java.lang.StringBuffer text, $r0;
        int i#4, $i0, $i1;
        java.util.Vector $r1, $r3, $r11;
        java.lang.StringBuilder $r2, $r5, $r6, $r9, $r10, $r12, $r13;
        java.lang.Object $r4;
        java.lang.String $r7, $r14, $r16;

        this := @this: weka.classifiers.rules.part.MakeDecList;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        text = $r0;

        i#4 = 0;

     label1:
        $r1 = this.<weka.classifiers.rules.part.MakeDecList: java.util.Vector theRules>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#4 >= $i0 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = this.<weka.classifiers.rules.part.MakeDecList: java.util.Vector theRules>;

        $r4 = virtualinvoke $r3.<java.util.Vector: java.lang.Object elementAt(int)>(i#4);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        i#4 = i#4 + 1;

        goto label1;

     label2:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Number of Rules  : \t");

        $r11 = this.<weka.classifiers.rules.part.MakeDecList: java.util.Vector theRules>;

        $i1 = virtualinvoke $r11.<java.util.Vector: int size()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke text.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r16;
    }


