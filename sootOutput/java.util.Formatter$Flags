    static void <clinit>()
    {
        java.util.Formatter$Flags $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        $r0 = new java.util.Formatter$Flags;

        specialinvoke $r0.<java.util.Formatter$Flags: void <init>(int)>(0);

        <java.util.Formatter$Flags: java.util.Formatter$Flags NONE> = $r0;

        $r1 = new java.util.Formatter$Flags;

        specialinvoke $r1.<java.util.Formatter$Flags: void <init>(int)>(1);

        <java.util.Formatter$Flags: java.util.Formatter$Flags LEFT_JUSTIFY> = $r1;

        $r2 = new java.util.Formatter$Flags;

        specialinvoke $r2.<java.util.Formatter$Flags: void <init>(int)>(2);

        <java.util.Formatter$Flags: java.util.Formatter$Flags UPPERCASE> = $r2;

        $r3 = new java.util.Formatter$Flags;

        specialinvoke $r3.<java.util.Formatter$Flags: void <init>(int)>(4);

        <java.util.Formatter$Flags: java.util.Formatter$Flags ALTERNATE> = $r3;

        $r4 = new java.util.Formatter$Flags;

        specialinvoke $r4.<java.util.Formatter$Flags: void <init>(int)>(8);

        <java.util.Formatter$Flags: java.util.Formatter$Flags PLUS> = $r4;

        $r5 = new java.util.Formatter$Flags;

        specialinvoke $r5.<java.util.Formatter$Flags: void <init>(int)>(16);

        <java.util.Formatter$Flags: java.util.Formatter$Flags LEADING_SPACE> = $r5;

        $r6 = new java.util.Formatter$Flags;

        specialinvoke $r6.<java.util.Formatter$Flags: void <init>(int)>(32);

        <java.util.Formatter$Flags: java.util.Formatter$Flags ZERO_PAD> = $r6;

        $r7 = new java.util.Formatter$Flags;

        specialinvoke $r7.<java.util.Formatter$Flags: void <init>(int)>(64);

        <java.util.Formatter$Flags: java.util.Formatter$Flags GROUP> = $r7;

        $r8 = new java.util.Formatter$Flags;

        specialinvoke $r8.<java.util.Formatter$Flags: void <init>(int)>(128);

        <java.util.Formatter$Flags: java.util.Formatter$Flags PARENTHESES> = $r8;

        $r9 = new java.util.Formatter$Flags;

        specialinvoke $r9.<java.util.Formatter$Flags: void <init>(int)>(256);

        <java.util.Formatter$Flags: java.util.Formatter$Flags PREVIOUS> = $r9;

        return;
    }

    static java.util.Formatter$Flags access$100(java.util.Formatter$Flags, java.util.Formatter$Flags)
    {
        java.util.Formatter$Flags l0, l1, $r0;

        l0 := @parameter0: java.util.Formatter$Flags;

        l1 := @parameter1: java.util.Formatter$Flags;

        $r0 = specialinvoke l0.<java.util.Formatter$Flags: java.util.Formatter$Flags add(java.util.Formatter$Flags)>(l1);

        return $r0;
    }

    private void <init>(int)
    {
        java.util.Formatter$Flags l0;
        int l1;

        l0 := @this: java.util.Formatter$Flags;

        l1 := @parameter0: int;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        l0.<java.util.Formatter$Flags: int flags> = l1;

        return;
    }

    public static java.util.Formatter$Flags parse(java.lang.String)
    {
        java.lang.String l0, $r2;
        char[] l1;
        java.util.Formatter$Flags l2, l4, $r0;
        int l3#7, $i0;
        char $c1;
        boolean $z0;
        java.util.DuplicateFormatFlagsException $r1;

        l0 := @parameter0: java.lang.String;

        l1 = virtualinvoke l0.<java.lang.String: char[] toCharArray()>();

        $r0 = new java.util.Formatter$Flags;

        specialinvoke $r0.<java.util.Formatter$Flags: void <init>(int)>(0);

        l2 = $r0;

        l3#7 = 0;

     label1:
        $i0 = lengthof l1;

        if l3#7 >= $i0 goto label3;

        $c1 = l1[l3#7];

        l4 = staticinvoke <java.util.Formatter$Flags: java.util.Formatter$Flags parse(char)>($c1);

        $z0 = virtualinvoke l2.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>(l4);

        if $z0 == 0 goto label2;

        $r1 = new java.util.DuplicateFormatFlagsException;

        $r2 = virtualinvoke l4.<java.util.Formatter$Flags: java.lang.String toString()>();

        specialinvoke $r1.<java.util.DuplicateFormatFlagsException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label2:
        specialinvoke l2.<java.util.Formatter$Flags: java.util.Formatter$Flags add(java.util.Formatter$Flags)>(l4);

        l3#7 = l3#7 + 1;

        goto label1;

     label3:
        return l2;
    }

    private static java.util.Formatter$Flags parse(char)
    {
        char l0;
        java.util.Formatter$Flags $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        java.util.UnknownFormatFlagsException $r8;
        java.lang.String $r9;

        l0 := @parameter0: char;

        tableswitch(l0)
        {
            case 32: goto label4;
            case 33: goto label9;
            case 34: goto label9;
            case 35: goto label2;
            case 36: goto label9;
            case 37: goto label9;
            case 38: goto label9;
            case 39: goto label9;
            case 40: goto label7;
            case 41: goto label9;
            case 42: goto label9;
            case 43: goto label3;
            case 44: goto label6;
            case 45: goto label1;
            case 46: goto label9;
            case 47: goto label9;
            case 48: goto label5;
            case 49: goto label9;
            case 50: goto label9;
            case 51: goto label9;
            case 52: goto label9;
            case 53: goto label9;
            case 54: goto label9;
            case 55: goto label9;
            case 56: goto label9;
            case 57: goto label9;
            case 58: goto label9;
            case 59: goto label9;
            case 60: goto label8;
            default: goto label9;
        };

     label1:
        $r0 = <java.util.Formatter$Flags: java.util.Formatter$Flags LEFT_JUSTIFY>;

        return $r0;

     label2:
        $r1 = <java.util.Formatter$Flags: java.util.Formatter$Flags ALTERNATE>;

        return $r1;

     label3:
        $r2 = <java.util.Formatter$Flags: java.util.Formatter$Flags PLUS>;

        return $r2;

     label4:
        $r3 = <java.util.Formatter$Flags: java.util.Formatter$Flags LEADING_SPACE>;

        return $r3;

     label5:
        $r4 = <java.util.Formatter$Flags: java.util.Formatter$Flags ZERO_PAD>;

        return $r4;

     label6:
        $r5 = <java.util.Formatter$Flags: java.util.Formatter$Flags GROUP>;

        return $r5;

     label7:
        $r6 = <java.util.Formatter$Flags: java.util.Formatter$Flags PARENTHESES>;

        return $r6;

     label8:
        $r7 = <java.util.Formatter$Flags: java.util.Formatter$Flags PREVIOUS>;

        return $r7;

     label9:
        $r8 = new java.util.UnknownFormatFlagsException;

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(l0);

        specialinvoke $r8.<java.util.UnknownFormatFlagsException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    public java.lang.String toString()
    {
        java.util.Formatter$Flags l0, $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17;
        java.lang.StringBuilder l1, $r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.String $r19;

        l0 := @this: java.util.Formatter$Flags;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        l1 = $r0;

        $r1 = <java.util.Formatter$Flags: java.util.Formatter$Flags LEFT_JUSTIFY>;

        $z0 = virtualinvoke l0.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r1);

        if $z0 == 0 goto label1;

        virtualinvoke l1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

     label1:
        $r3 = <java.util.Formatter$Flags: java.util.Formatter$Flags UPPERCASE>;

        $z1 = virtualinvoke l0.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r3);

        if $z1 == 0 goto label2;

        virtualinvoke l1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(94);

     label2:
        $r5 = <java.util.Formatter$Flags: java.util.Formatter$Flags ALTERNATE>;

        $z2 = virtualinvoke l0.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r5);

        if $z2 == 0 goto label3;

        virtualinvoke l1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(35);

     label3:
        $r7 = <java.util.Formatter$Flags: java.util.Formatter$Flags PLUS>;

        $z3 = virtualinvoke l0.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r7);

        if $z3 == 0 goto label4;

        virtualinvoke l1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(43);

     label4:
        $r9 = <java.util.Formatter$Flags: java.util.Formatter$Flags LEADING_SPACE>;

        $z4 = virtualinvoke l0.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r9);

        if $z4 == 0 goto label5;

        virtualinvoke l1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label5:
        $r11 = <java.util.Formatter$Flags: java.util.Formatter$Flags ZERO_PAD>;

        $z5 = virtualinvoke l0.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r11);

        if $z5 == 0 goto label6;

        virtualinvoke l1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

     label6:
        $r13 = <java.util.Formatter$Flags: java.util.Formatter$Flags GROUP>;

        $z6 = virtualinvoke l0.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r13);

        if $z6 == 0 goto label7;

        virtualinvoke l1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label7:
        $r15 = <java.util.Formatter$Flags: java.util.Formatter$Flags PARENTHESES>;

        $z7 = virtualinvoke l0.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r15);

        if $z7 == 0 goto label8;

        virtualinvoke l1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

     label8:
        $r17 = <java.util.Formatter$Flags: java.util.Formatter$Flags PREVIOUS>;

        $z8 = virtualinvoke l0.<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>($r17);

        if $z8 == 0 goto label9;

        virtualinvoke l1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(60);

     label9:
        $r19 = virtualinvoke l1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r19;
    }

    public boolean contains(java.util.Formatter$Flags)
    {
        java.util.Formatter$Flags l0, l1;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        l0 := @this: java.util.Formatter$Flags;

        l1 := @parameter0: java.util.Formatter$Flags;

        $i0 = l0.<java.util.Formatter$Flags: int flags>;

        $i1 = virtualinvoke l1.<java.util.Formatter$Flags: int valueOf()>();

        $i2 = $i0 & $i1;

        $i3 = virtualinvoke l1.<java.util.Formatter$Flags: int valueOf()>();

        if $i2 != $i3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int valueOf()
    {
        java.util.Formatter$Flags l0;
        int $i0;

        l0 := @this: java.util.Formatter$Flags;

        $i0 = l0.<java.util.Formatter$Flags: int flags>;

        return $i0;
    }

    private java.util.Formatter$Flags add(java.util.Formatter$Flags)
    {
        java.util.Formatter$Flags l0, l1;
        int $i0, $i1, $i2;

        l0 := @this: java.util.Formatter$Flags;

        l1 := @parameter0: java.util.Formatter$Flags;

        $i0 = l0.<java.util.Formatter$Flags: int flags>;

        $i1 = virtualinvoke l1.<java.util.Formatter$Flags: int valueOf()>();

        $i2 = $i0 | $i1;

        l0.<java.util.Formatter$Flags: int flags> = $i2;

        return l0;
    }

    public java.util.Formatter$Flags dup()
    {
        java.util.Formatter$Flags l0, $r0;
        int $i0;

        l0 := @this: java.util.Formatter$Flags;

        $r0 = new java.util.Formatter$Flags;

        $i0 = l0.<java.util.Formatter$Flags: int flags>;

        specialinvoke $r0.<java.util.Formatter$Flags: void <init>(int)>($i0);

        return $r0;
    }

    public java.util.Formatter$Flags remove(java.util.Formatter$Flags)
    {
        java.util.Formatter$Flags l0, l1;
        int $i0, $i1, $i2, $i3;

        l0 := @this: java.util.Formatter$Flags;

        l1 := @parameter0: java.util.Formatter$Flags;

        $i0 = l0.<java.util.Formatter$Flags: int flags>;

        $i1 = virtualinvoke l1.<java.util.Formatter$Flags: int valueOf()>();

        $i2 = $i1 ^ -1;

        $i3 = $i0 & $i2;

        l0.<java.util.Formatter$Flags: int flags> = $i3;

        return l0;
    }


