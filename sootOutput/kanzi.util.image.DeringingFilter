    public boolean apply(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.util.image.DeringingFilter this;
        kanzi.SliceIntArray input, output;
        int x0, y0, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, y#34, $i9, x#39, $i10, $i11, $i12, $i13, $i14, $i15;
        boolean $z0, $z1;
        int[] $r0, $r1, $r2, $r3, $r4;

        this := @this: kanzi.util.image.DeringingFilter;

        input := @parameter0: kanzi.SliceIntArray;

        output := @parameter1: kanzi.SliceIntArray;

        $z0 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(input);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(output);

        if $z1 != 0 goto label2;

     label1:
        return 0;

     label2:
        $r0 = input.<kanzi.SliceIntArray: int[] array>;

        $r1 = output.<kanzi.SliceIntArray: int[] array>;

        if $r0 == $r1 goto label3;

        $r2 = input.<kanzi.SliceIntArray: int[] array>;

        $i0 = input.<kanzi.SliceIntArray: int index>;

        $r3 = output.<kanzi.SliceIntArray: int[] array>;

        $i1 = output.<kanzi.SliceIntArray: int index>;

        $i2 = this.<kanzi.util.image.DeringingFilter: int stride>;

        $i3 = this.<kanzi.util.image.DeringingFilter: int height>;

        $i4 = $i2 * $i3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i0, $r3, $i1, $i4);

     label3:
        $i5 = output.<kanzi.SliceIntArray: int index>;

        $i6 = this.<kanzi.util.image.DeringingFilter: int stride>;

        x0 = $i5 % $i6;

        $i7 = output.<kanzi.SliceIntArray: int index>;

        $i8 = this.<kanzi.util.image.DeringingFilter: int stride>;

        y0 = $i7 / $i8;

        y#34 = 0;

     label4:
        $i9 = this.<kanzi.util.image.DeringingFilter: int height>;

        if y#34 >= $i9 goto label7;

        x#39 = 0;

     label5:
        $i10 = this.<kanzi.util.image.DeringingFilter: int width>;

        if x#39 >= $i10 goto label6;

        $r4 = output.<kanzi.SliceIntArray: int[] array>;

        $i11 = x#39 + x0;

        $i12 = y#34 + y0;

        $i13 = this.<kanzi.util.image.DeringingFilter: int step>;

        virtualinvoke this.<kanzi.util.image.DeringingFilter: boolean apply(int[],int,int,int,int)>($r4, $i11, $i12, $i13, 3);

        $i14 = this.<kanzi.util.image.DeringingFilter: int step>;

        x#39 = x#39 + $i14;

        goto label5;

     label6:
        $i15 = this.<kanzi.util.image.DeringingFilter: int step>;

        y#34 = y#34 + $i15;

        goto label4;

     label7:
        return 1;
    }

    public boolean apply(int[], int, int, int, int)
    {
        kanzi.util.image.DeringingFilter this;
        int[] frame, $r0, $r2, $r3;
        int x, y, blockDim, strength, $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        kanzi.util.image.ImageUtils$Direction dir;
        kanzi.util.image.ImageUtils $r1;

        this := @this: kanzi.util.image.DeringingFilter;

        frame := @parameter0: int[];

        x := @parameter1: int;

        y := @parameter2: int;

        blockDim := @parameter3: int;

        strength := @parameter4: int;

        if strength < 0 goto label1;

        $r0 = <kanzi.util.image.DeringingFilter: int[] THRESHOLDS>;

        $i0 = lengthof $r0;

        if strength < $i0 goto label2;

     label1:
        return 0;

     label2:
        $i1 = blockDim - 1;

        $i2 = blockDim & $i1;

        if $i2 != 0 goto label3;

        if blockDim < 4 goto label3;

        if blockDim <= 64 goto label4;

     label3:
        return 0;

     label4:
        if strength != 0 goto label5;

        return 1;

     label5:
        $r1 = new kanzi.util.image.ImageUtils;

        $i3 = this.<kanzi.util.image.DeringingFilter: int width>;

        $i4 = this.<kanzi.util.image.DeringingFilter: int height>;

        specialinvoke $r1.<kanzi.util.image.ImageUtils: void <init>(int,int)>($i3, $i4);

        dir = virtualinvoke $r1.<kanzi.util.image.ImageUtils: kanzi.util.image.ImageUtils$Direction computeDirection(int[],int,int,int)>(frame, x, y, blockDim);

        $r2 = <kanzi.util.image.DeringingFilter: int[] THRESHOLDS>;

        $i5 = $r2[strength];

        specialinvoke this.<kanzi.util.image.DeringingFilter: void applyDirectional(int[],int,int,int,kanzi.util.image.ImageUtils$Direction,int)>(frame, x, y, blockDim, dir, $i5);

        $r3 = <kanzi.util.image.DeringingFilter: int[] THRESHOLDS>;

        $i6 = $r3[strength];

        specialinvoke this.<kanzi.util.image.DeringingFilter: void applyAntiDirectional(int[],int,int,int,kanzi.util.image.ImageUtils$Direction,int)>(frame, x, y, blockDim, dir, $i6);

        return 1;
    }

    private void applyDirectional(int[], int, int, int, kanzi.util.image.ImageUtils$Direction, int)
    {
        kanzi.util.image.DeringingFilter this;
        int[] frame, $r0, $r1, $r2, $r3;
        int x, y, blockDim, threshold, st, dXEven, dXOdd, dYEven, dYOdd, delta03, delta02, delta01, delta13, delta12, delta11, start, endj, endi, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, j#109, i#113, sum#117, offs#121, $i33, pix#127, $i34, $i35, $i36, p0#137, $i37, $i38, $i39, p1#147, $i40, $i41, $i42, $i43, $i44, $i45, $i46, p0#177, $i47, $i48, $i49, p1#187, $i50, $i51, $i52, $i53, $i54, $i55, $i56, p0#217, $i57, $i58, $i59, p1#227, $i60, $i61, $i62, $i63, $i64, $i65, $i66, sum#260, offs#264, $i67, pix#270, $i68, $i69, $i70, p0#280, $i71, $i72, $i73, p1#290, $i74, $i75, $i76, $i77, $i78, $i79, $i80, p0#320, $i81, $i82, $i83, p1#330, $i84, $i85, $i86, $i87, $i88, $i89, $i90, p0#360, $i91, $i92, $i93, p1#370, $i94, $i95, $i96, $i97, $i98, $i99, $i100;
        kanzi.util.image.ImageUtils$Direction dir;

        this := @this: kanzi.util.image.DeringingFilter;

        frame := @parameter0: int[];

        x := @parameter1: int;

        y := @parameter2: int;

        blockDim := @parameter3: int;

        dir := @parameter4: kanzi.util.image.ImageUtils$Direction;

        threshold := @parameter5: int;

        if x < 3 goto label01;

        $i0 = x + blockDim;

        $i1 = $i0 + 3;

        $i2 = this.<kanzi.util.image.DeringingFilter: int width>;

        if $i1 >= $i2 goto label01;

        if y < 3 goto label01;

        $i3 = y + blockDim;

        $i4 = $i3 + 3;

        $i5 = this.<kanzi.util.image.DeringingFilter: int height>;

        if $i4 < $i5 goto label02;

     label01:
        return;

     label02:
        st = this.<kanzi.util.image.DeringingFilter: int stride>;

        $r0 = <kanzi.util.image.ImageUtils: int[] DIR_INC_XY>;

        $i6 = virtualinvoke dir.<kanzi.util.image.ImageUtils$Direction: int ordinal()>();

        $i7 = $i6 << 2;

        dXEven = $r0[$i7];

        $r1 = <kanzi.util.image.ImageUtils: int[] DIR_INC_XY>;

        $i8 = virtualinvoke dir.<kanzi.util.image.ImageUtils$Direction: int ordinal()>();

        $i9 = $i8 << 2;

        $i10 = $i9 + 2;

        dXOdd = $r1[$i10];

        $r2 = <kanzi.util.image.ImageUtils: int[] DIR_INC_XY>;

        $i11 = virtualinvoke dir.<kanzi.util.image.ImageUtils$Direction: int ordinal()>();

        $i12 = $i11 << 2;

        $i13 = $i12 + 1;

        $i14 = $r2[$i13];

        dYEven = $i14 * st;

        $r3 = <kanzi.util.image.ImageUtils: int[] DIR_INC_XY>;

        $i15 = virtualinvoke dir.<kanzi.util.image.ImageUtils$Direction: int ordinal()>();

        $i16 = $i15 << 2;

        $i17 = $i16 + 3;

        $i18 = $r3[$i17];

        dYOdd = $i18 * st;

        $i19 = 2 * dXEven;

        $i20 = dXOdd + $i19;

        $i21 = $i20 + dYOdd;

        $i22 = 2 * dYEven;

        delta03 = $i21 + $i22;

        $i23 = dXOdd + dXEven;

        $i24 = $i23 + dYOdd;

        delta02 = $i24 + dYEven;

        delta01 = dXEven + dYEven;

        $i25 = 2 * dXOdd;

        $i26 = dXEven + $i25;

        $i27 = $i26 + dYEven;

        $i28 = 2 * dYOdd;

        delta13 = $i27 + $i28;

        $i29 = dXEven + dXOdd;

        $i30 = $i29 + dYEven;

        delta12 = $i30 + dYOdd;

        delta11 = dXOdd + dYOdd;

        $i31 = y * st;

        start = $i31 + x;

        $i32 = st * blockDim;

        endj = start + $i32;

        endi = blockDim;

        j#109 = start;

     label03:
        if j#109 >= endj goto label19;

        i#113 = 0;

     label04:
        if i#113 >= endi goto label18;

        sum#117 = 0;

        offs#121 = j#109 + i#113;

        $i33 = frame[offs#121];

        pix#127 = $i33 & 255;

        $i34 = offs#121 + delta03;

        $i35 = frame[$i34];

        $i36 = $i35 & 255;

        p0#137 = $i36 - pix#127;

        $i37 = offs#121 - delta03;

        $i38 = frame[$i37];

        $i39 = $i38 & 255;

        p1#147 = $i39 - pix#127;

        if p0#137 >= threshold goto label05;

        $i40 = neg p0#137;

        if $i40 >= threshold goto label05;

        $i41 = 4 * p0#137;

        sum#117 = sum#117 + $i41;

     label05:
        if p1#147 >= threshold goto label06;

        $i42 = neg p1#147;

        if $i42 >= threshold goto label06;

        $i43 = 4 * p1#147;

        sum#117 = sum#117 + $i43;

     label06:
        $i44 = offs#121 + delta02;

        $i45 = frame[$i44];

        $i46 = $i45 & 255;

        p0#177 = $i46 - pix#127;

        $i47 = offs#121 - delta02;

        $i48 = frame[$i47];

        $i49 = $i48 & 255;

        p1#187 = $i49 - pix#127;

        if p0#177 >= threshold goto label07;

        $i50 = neg p0#177;

        if $i50 >= threshold goto label07;

        $i51 = 5 * p0#177;

        sum#117 = sum#117 + $i51;

     label07:
        if p1#187 >= threshold goto label08;

        $i52 = neg p1#187;

        if $i52 >= threshold goto label08;

        $i53 = 5 * p1#187;

        sum#117 = sum#117 + $i53;

     label08:
        $i54 = offs#121 + delta01;

        $i55 = frame[$i54];

        $i56 = $i55 & 255;

        p0#217 = $i56 - pix#127;

        $i57 = offs#121 - delta01;

        $i58 = frame[$i57];

        $i59 = $i58 & 255;

        p1#227 = $i59 - pix#127;

        if p0#217 >= threshold goto label09;

        $i60 = neg p0#217;

        if $i60 >= threshold goto label09;

        $i61 = 7 * p0#217;

        sum#117 = sum#117 + $i61;

     label09:
        if p1#227 >= threshold goto label10;

        $i62 = neg p1#227;

        if $i62 >= threshold goto label10;

        $i63 = 7 * p1#227;

        sum#117 = sum#117 + $i63;

     label10:
        $i64 = sum#117 + 0;

        $i65 = $i64 >> 5;

        $i66 = pix#127 + $i65;

        frame[offs#121] = $i66;

        i#113 = i#113 + 1;

        if i#113 >= endi goto label17;

        sum#260 = 0;

        offs#264 = j#109 + i#113;

        $i67 = frame[offs#264];

        pix#270 = $i67 & 255;

        $i68 = offs#264 + delta13;

        $i69 = frame[$i68];

        $i70 = $i69 & 255;

        p0#280 = $i70 - pix#270;

        $i71 = offs#264 - delta13;

        $i72 = frame[$i71];

        $i73 = $i72 & 255;

        p1#290 = $i73 - pix#270;

        if p0#280 >= threshold goto label11;

        $i74 = neg p0#280;

        if $i74 >= threshold goto label11;

        $i75 = 4 * p0#280;

        sum#260 = sum#260 + $i75;

     label11:
        if p1#290 >= threshold goto label12;

        $i76 = neg p1#290;

        if $i76 >= threshold goto label12;

        $i77 = 4 * p1#290;

        sum#260 = sum#260 + $i77;

     label12:
        $i78 = offs#264 + delta12;

        $i79 = frame[$i78];

        $i80 = $i79 & 255;

        p0#320 = $i80 - pix#270;

        $i81 = offs#264 - delta12;

        $i82 = frame[$i81];

        $i83 = $i82 & 255;

        p1#330 = $i83 - pix#270;

        if p0#320 >= threshold goto label13;

        $i84 = neg p0#320;

        if $i84 >= threshold goto label13;

        $i85 = 5 * p0#320;

        sum#260 = sum#260 + $i85;

     label13:
        if p1#330 >= threshold goto label14;

        $i86 = neg p1#330;

        if $i86 >= threshold goto label14;

        $i87 = 5 * p1#330;

        sum#260 = sum#260 + $i87;

     label14:
        $i88 = offs#264 + delta11;

        $i89 = frame[$i88];

        $i90 = $i89 & 255;

        p0#360 = $i90 - pix#270;

        $i91 = offs#264 - delta11;

        $i92 = frame[$i91];

        $i93 = $i92 & 255;

        p1#370 = $i93 - pix#270;

        if p0#360 >= threshold goto label15;

        $i94 = neg p0#360;

        if $i94 >= threshold goto label15;

        $i95 = 7 * p0#360;

        sum#260 = sum#260 + $i95;

     label15:
        if p1#370 >= threshold goto label16;

        $i96 = neg p1#370;

        if $i96 >= threshold goto label16;

        $i97 = 7 * p1#370;

        sum#260 = sum#260 + $i97;

     label16:
        $i98 = sum#260 + 0;

        $i99 = $i98 >> 5;

        $i100 = pix#270 + $i99;

        frame[offs#264] = $i100;

        i#113 = i#113 + 1;

     label17:
        goto label04;

     label18:
        j#109 = j#109 + st;

        goto label03;

     label19:
        return;
    }

    private void applyAntiDirectional(int[], int, int, int, kanzi.util.image.ImageUtils$Direction, int)
    {
        kanzi.util.image.DeringingFilter this;
        int[] frame;
        int x, y, blockDim, st, start, endj, endi, delta, offs, pix, threshold#1, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, threshold#38, $i9, $i10, $i11, j#45, i#49, sum#53, $i12, $i13, $i14, $i15, $i16, p0#73, $i17, $i18, $i19, $i20, p1#85, $i21, $i22, $i23, $i24, $i25, p0#111, $i26, $i27, $i28, p1#121, $i29, $i30, $i31, $i32, $i33, $i34;
        kanzi.util.image.ImageUtils$Direction dir, $r0;

        this := @this: kanzi.util.image.DeringingFilter;

        frame := @parameter0: int[];

        x := @parameter1: int;

        y := @parameter2: int;

        blockDim := @parameter3: int;

        dir := @parameter4: kanzi.util.image.ImageUtils$Direction;

        threshold#1 := @parameter5: int;

        if x < 2 goto label01;

        $i0 = x + blockDim;

        $i1 = $i0 + 2;

        $i2 = this.<kanzi.util.image.DeringingFilter: int width>;

        if $i1 >= $i2 goto label01;

        if y < 2 goto label01;

        $i3 = y + blockDim;

        $i4 = $i3 + 2;

        $i5 = this.<kanzi.util.image.DeringingFilter: int height>;

        if $i4 < $i5 goto label02;

     label01:
        return;

     label02:
        st = this.<kanzi.util.image.DeringingFilter: int stride>;

        $i6 = y * st;

        start = $i6 + x;

        $i7 = st * blockDim;

        endj = start + $i7;

        endi = blockDim;

        $i8 = threshold#1 * 3;

        threshold#38 = $i8 >> 2;

        $i9 = virtualinvoke dir.<kanzi.util.image.ImageUtils$Direction: int ordinal()>();

        $r0 = <kanzi.util.image.ImageUtils$Direction: kanzi.util.image.ImageUtils$Direction VERTICAL>;

        $i10 = virtualinvoke $r0.<kanzi.util.image.ImageUtils$Direction: int ordinal()>();

        if $i9 >= $i10 goto label03;

        $i11 = st;

        goto label04;

     label03:
        $i11 = 1;

     label04:
        delta = $i11;

        j#45 = start;

     label05:
        if j#45 >= endj goto label12;

        i#49 = 0;

     label06:
        if i#49 >= endi goto label11;

        sum#53 = 0;

        offs = j#45 + i#49;

        $i12 = frame[offs];

        pix = $i12 & 255;

        $i13 = offs + delta;

        $i14 = $i13 + delta;

        $i15 = frame[$i14];

        $i16 = $i15 & 255;

        p0#73 = $i16 - pix;

        $i17 = offs - delta;

        $i18 = $i17 - delta;

        $i19 = frame[$i18];

        $i20 = $i19 & 255;

        p1#85 = $i20 - pix;

        if p0#73 >= threshold#38 goto label07;

        $i21 = neg p0#73;

        if $i21 >= threshold#38 goto label07;

        sum#53 = sum#53 + p0#73;

     label07:
        if p1#85 >= threshold#38 goto label08;

        $i22 = neg p1#85;

        if $i22 >= threshold#38 goto label08;

        sum#53 = sum#53 + p1#85;

     label08:
        $i23 = offs + delta;

        $i24 = frame[$i23];

        $i25 = $i24 & 255;

        p0#111 = $i25 - pix;

        $i26 = offs - delta;

        $i27 = frame[$i26];

        $i28 = $i27 & 255;

        p1#121 = $i28 - pix;

        if p0#111 >= threshold#38 goto label09;

        $i29 = neg p0#111;

        if $i29 >= threshold#38 goto label09;

        sum#53 = sum#53 + p0#111;

     label09:
        if p1#121 >= threshold#38 goto label10;

        $i30 = neg p1#121;

        if $i30 >= threshold#38 goto label10;

        sum#53 = sum#53 + p1#121;

     label10:
        $i31 = 3 * sum#53;

        $i32 = $i31 + 8;

        $i33 = $i32 >> 4;

        $i34 = pix + $i33;

        frame[offs] = $i34;

        i#49 = i#49 + 1;

        goto label06;

     label11:
        j#45 = j#45 + st;

        goto label05;

     label12:
        return;
    }


