    public boolean forward(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.transform.DCT8 this;
        kanzi.SliceIntArray src, dst, $r1, $r2, $r3;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        int[] $r0;

        this := @this: kanzi.transform.DCT8;

        src := @parameter0: kanzi.SliceIntArray;

        dst := @parameter1: kanzi.SliceIntArray;

        $z0 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(src);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i0 = src.<kanzi.SliceIntArray: int length>;

        if $i0 == 64 goto label2;

        return 0;

     label2:
        if src == dst goto label4;

        $z1 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(dst);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $i1 = dst.<kanzi.SliceIntArray: int index>;

        $i2 = $i1 + 64;

        $r0 = dst.<kanzi.SliceIntArray: int[] array>;

        $i3 = lengthof $r0;

        if $i2 <= $i3 goto label4;

        return 0;

     label4:
        $r1 = this.<kanzi.transform.DCT8: kanzi.SliceIntArray data>;

        $r1.<kanzi.SliceIntArray: int index> = 0;

        $r2 = this.<kanzi.transform.DCT8: kanzi.SliceIntArray data>;

        staticinvoke <kanzi.transform.DCT8: void computeForward(kanzi.SliceIntArray,kanzi.SliceIntArray,int)>(src, $r2, 5);

        $r3 = this.<kanzi.transform.DCT8: kanzi.SliceIntArray data>;

        $i4 = this.<kanzi.transform.DCT8: int fShift>;

        $i5 = $i4 - 5;

        staticinvoke <kanzi.transform.DCT8: void computeForward(kanzi.SliceIntArray,kanzi.SliceIntArray,int)>($r3, dst, $i5);

        $i6 = src.<kanzi.SliceIntArray: int index>;

        $i7 = $i6 + 64;

        src.<kanzi.SliceIntArray: int index> = $i7;

        $i8 = dst.<kanzi.SliceIntArray: int index>;

        $i9 = $i8 + 64;

        dst.<kanzi.SliceIntArray: int index> = $i9;

        return 1;
    }

    private static void computeForward(kanzi.SliceIntArray, kanzi.SliceIntArray, int)
    {
        kanzi.SliceIntArray src, dst;
        int shift, srcIdx, dstIdx, round, si, x0, x1, x2, x3, x4, x5, x6, x7, a0, a1, a2, a3, a4, a5, a6, a7, b0, b1, b2, b3, di, $i0, i#15, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71;
        int[] input, output;

        src := @parameter0: kanzi.SliceIntArray;

        dst := @parameter1: kanzi.SliceIntArray;

        shift := @parameter2: int;

        input = src.<kanzi.SliceIntArray: int[] array>;

        output = dst.<kanzi.SliceIntArray: int[] array>;

        srcIdx = src.<kanzi.SliceIntArray: int index>;

        dstIdx = dst.<kanzi.SliceIntArray: int index>;

        $i0 = 1 << shift;

        round = $i0 >> 1;

        i#15 = 0;

     label1:
        if i#15 >= 8 goto label2;

        $i1 = i#15 << 3;

        si = srcIdx + $i1;

        x0 = input[si];

        $i2 = si + 1;

        x1 = input[$i2];

        $i3 = si + 2;

        x2 = input[$i3];

        $i4 = si + 3;

        x3 = input[$i4];

        $i5 = si + 4;

        x4 = input[$i5];

        $i6 = si + 5;

        x5 = input[$i6];

        $i7 = si + 6;

        x6 = input[$i7];

        $i8 = si + 7;

        x7 = input[$i8];

        a0 = x0 + x7;

        a1 = x1 + x6;

        a2 = x0 - x7;

        a3 = x1 - x6;

        a4 = x2 + x5;

        a5 = x3 + x4;

        a6 = x2 - x5;

        a7 = x3 - x4;

        b0 = a0 + a5;

        b1 = a1 + a4;

        b2 = a0 - a5;

        b3 = a1 - a4;

        di = dstIdx + i#15;

        $i9 = 64 * b0;

        $i10 = 64 * b1;

        $i11 = $i9 + $i10;

        $i12 = $i11 + round;

        $i13 = $i12 >> shift;

        output[di] = $i13;

        $i14 = di + 8;

        $i15 = 89 * a2;

        $i16 = 75 * a3;

        $i17 = $i15 + $i16;

        $i18 = 50 * a6;

        $i19 = $i17 + $i18;

        $i20 = 18 * a7;

        $i21 = $i19 + $i20;

        $i22 = $i21 + round;

        $i23 = $i22 >> shift;

        output[$i14] = $i23;

        $i24 = di + 16;

        $i25 = 83 * b2;

        $i26 = 36 * b3;

        $i27 = $i25 + $i26;

        $i28 = $i27 + round;

        $i29 = $i28 >> shift;

        output[$i24] = $i29;

        $i30 = di + 24;

        $i31 = 75 * a2;

        $i32 = -18 * a3;

        $i33 = $i31 + $i32;

        $i34 = -89 * a6;

        $i35 = $i33 + $i34;

        $i36 = -50 * a7;

        $i37 = $i35 + $i36;

        $i38 = $i37 + round;

        $i39 = $i38 >> shift;

        output[$i30] = $i39;

        $i40 = di + 32;

        $i41 = 64 * b0;

        $i42 = -64 * b1;

        $i43 = $i41 + $i42;

        $i44 = $i43 + round;

        $i45 = $i44 >> shift;

        output[$i40] = $i45;

        $i46 = di + 40;

        $i47 = 50 * a2;

        $i48 = -89 * a3;

        $i49 = $i47 + $i48;

        $i50 = 18 * a6;

        $i51 = $i49 + $i50;

        $i52 = 75 * a7;

        $i53 = $i51 + $i52;

        $i54 = $i53 + round;

        $i55 = $i54 >> shift;

        output[$i46] = $i55;

        $i56 = di + 48;

        $i57 = 36 * b2;

        $i58 = -83 * b3;

        $i59 = $i57 + $i58;

        $i60 = $i59 + round;

        $i61 = $i60 >> shift;

        output[$i56] = $i61;

        $i62 = di + 56;

        $i63 = 18 * a2;

        $i64 = -50 * a3;

        $i65 = $i63 + $i64;

        $i66 = 75 * a6;

        $i67 = $i65 + $i66;

        $i68 = -89 * a7;

        $i69 = $i67 + $i68;

        $i70 = $i69 + round;

        $i71 = $i70 >> shift;

        output[$i62] = $i71;

        i#15 = i#15 + 1;

        goto label1;

     label2:
        return;
    }

    public boolean inverse(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.transform.DCT8 this;
        kanzi.SliceIntArray src, dst, $r1, $r2, $r3;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        int[] $r0;

        this := @this: kanzi.transform.DCT8;

        src := @parameter0: kanzi.SliceIntArray;

        dst := @parameter1: kanzi.SliceIntArray;

        $z0 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(src);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i0 = src.<kanzi.SliceIntArray: int length>;

        if $i0 == 64 goto label2;

        return 0;

     label2:
        if src == dst goto label4;

        $z1 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(dst);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $i1 = dst.<kanzi.SliceIntArray: int index>;

        $i2 = $i1 + 64;

        $r0 = dst.<kanzi.SliceIntArray: int[] array>;

        $i3 = lengthof $r0;

        if $i2 <= $i3 goto label4;

        return 0;

     label4:
        $r1 = this.<kanzi.transform.DCT8: kanzi.SliceIntArray data>;

        $r1.<kanzi.SliceIntArray: int index> = 0;

        $r2 = this.<kanzi.transform.DCT8: kanzi.SliceIntArray data>;

        staticinvoke <kanzi.transform.DCT8: void computeInverse(kanzi.SliceIntArray,kanzi.SliceIntArray,int)>(src, $r2, 10);

        $r3 = this.<kanzi.transform.DCT8: kanzi.SliceIntArray data>;

        $i4 = this.<kanzi.transform.DCT8: int iShift>;

        $i5 = $i4 - 10;

        staticinvoke <kanzi.transform.DCT8: void computeInverse(kanzi.SliceIntArray,kanzi.SliceIntArray,int)>($r3, dst, $i5);

        $i6 = src.<kanzi.SliceIntArray: int index>;

        $i7 = $i6 + 64;

        src.<kanzi.SliceIntArray: int index> = $i7;

        $i8 = dst.<kanzi.SliceIntArray: int index>;

        $i9 = $i8 + 64;

        dst.<kanzi.SliceIntArray: int index> = $i9;

        return 1;
    }

    private static void computeInverse(kanzi.SliceIntArray, kanzi.SliceIntArray, int)
    {
        kanzi.SliceIntArray src, dst;
        int shift, srcIdx, dstIdx, round, si, x0, x1, x2, x3, x4, x5, x6, x7, a0, a1, a2, a3, a4, a5, a6, a7, b0, b1, b2, b3, c0, c1, c2, c3, c4, c5, c6, c7, di, $i0, i#15, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72;
        int[] input, output;

        src := @parameter0: kanzi.SliceIntArray;

        dst := @parameter1: kanzi.SliceIntArray;

        shift := @parameter2: int;

        input = src.<kanzi.SliceIntArray: int[] array>;

        output = dst.<kanzi.SliceIntArray: int[] array>;

        srcIdx = src.<kanzi.SliceIntArray: int index>;

        dstIdx = dst.<kanzi.SliceIntArray: int index>;

        $i0 = 1 << shift;

        round = $i0 >> 1;

        i#15 = 0;

     label01:
        if i#15 >= 8 goto label26;

        si = srcIdx + i#15;

        x0 = input[si];

        $i1 = si + 8;

        x1 = input[$i1];

        $i2 = si + 16;

        x2 = input[$i2];

        $i3 = si + 24;

        x3 = input[$i3];

        $i4 = si + 32;

        x4 = input[$i4];

        $i5 = si + 40;

        x5 = input[$i5];

        $i6 = si + 48;

        x6 = input[$i6];

        $i7 = si + 56;

        x7 = input[$i7];

        $i8 = 89 * x1;

        $i9 = 75 * x3;

        $i10 = $i8 + $i9;

        $i11 = 50 * x5;

        $i12 = $i10 + $i11;

        $i13 = 18 * x7;

        a0 = $i12 + $i13;

        $i14 = 75 * x1;

        $i15 = -18 * x3;

        $i16 = $i14 + $i15;

        $i17 = -89 * x5;

        $i18 = $i16 + $i17;

        $i19 = -50 * x7;

        a1 = $i18 + $i19;

        $i20 = 50 * x1;

        $i21 = -89 * x3;

        $i22 = $i20 + $i21;

        $i23 = 18 * x5;

        $i24 = $i22 + $i23;

        $i25 = 75 * x7;

        a2 = $i24 + $i25;

        $i26 = 18 * x1;

        $i27 = -50 * x3;

        $i28 = $i26 + $i27;

        $i29 = 75 * x5;

        $i30 = $i28 + $i29;

        $i31 = -89 * x7;

        a3 = $i30 + $i31;

        $i32 = 83 * x2;

        $i33 = 36 * x6;

        a4 = $i32 + $i33;

        $i34 = 36 * x2;

        $i35 = -83 * x6;

        a5 = $i34 + $i35;

        $i36 = 64 * x0;

        $i37 = 64 * x4;

        a6 = $i36 + $i37;

        $i38 = 64 * x0;

        $i39 = -64 * x4;

        a7 = $i38 + $i39;

        b0 = a6 + a4;

        b1 = a7 + a5;

        b2 = a6 - a4;

        b3 = a7 - a5;

        $i40 = b0 + a0;

        $i41 = $i40 + round;

        c0 = $i41 >> shift;

        $i42 = b1 + a1;

        $i43 = $i42 + round;

        c1 = $i43 >> shift;

        $i44 = b3 + a2;

        $i45 = $i44 + round;

        c2 = $i45 >> shift;

        $i46 = b2 + a3;

        $i47 = $i46 + round;

        c3 = $i47 >> shift;

        $i48 = b2 - a3;

        $i49 = $i48 + round;

        c4 = $i49 >> shift;

        $i50 = b3 - a2;

        $i51 = $i50 + round;

        c5 = $i51 >> shift;

        $i52 = b1 - a1;

        $i53 = $i52 + round;

        c6 = $i53 >> shift;

        $i54 = b0 - a0;

        $i55 = $i54 + round;

        c7 = $i55 >> shift;

        $i56 = i#15 << 3;

        di = dstIdx + $i56;

        if c0 < 65536 goto label02;

        $i58 = 65536;

        goto label04;

     label02:
        if c0 > -65537 goto label03;

        $i58 = -65537;

        goto label04;

     label03:
        $i58 = c0;

     label04:
        output[di] = $i58;

        $i59 = di + 1;

        if c1 < 65536 goto label05;

        $i60 = 65536;

        goto label07;

     label05:
        if c1 > -65537 goto label06;

        $i60 = -65537;

        goto label07;

     label06:
        $i60 = c1;

     label07:
        output[$i59] = $i60;

        $i61 = di + 2;

        if c2 < 65536 goto label08;

        $i62 = 65536;

        goto label10;

     label08:
        if c2 > -65537 goto label09;

        $i62 = -65537;

        goto label10;

     label09:
        $i62 = c2;

     label10:
        output[$i61] = $i62;

        $i63 = di + 3;

        if c3 < 65536 goto label11;

        $i64 = 65536;

        goto label13;

     label11:
        if c3 > -65537 goto label12;

        $i64 = -65537;

        goto label13;

     label12:
        $i64 = c3;

     label13:
        output[$i63] = $i64;

        $i65 = di + 4;

        if c4 < 65536 goto label14;

        $i66 = 65536;

        goto label16;

     label14:
        if c4 > -65537 goto label15;

        $i66 = -65537;

        goto label16;

     label15:
        $i66 = c4;

     label16:
        output[$i65] = $i66;

        $i67 = di + 5;

        if c5 < 65536 goto label17;

        $i68 = 65536;

        goto label19;

     label17:
        if c5 > -65537 goto label18;

        $i68 = -65537;

        goto label19;

     label18:
        $i68 = c5;

     label19:
        output[$i67] = $i68;

        $i69 = di + 6;

        if c6 < 65536 goto label20;

        $i70 = 65536;

        goto label22;

     label20:
        if c6 > -65537 goto label21;

        $i70 = -65537;

        goto label22;

     label21:
        $i70 = c6;

     label22:
        output[$i69] = $i70;

        $i71 = di + 7;

        if c7 < 65536 goto label23;

        $i72 = 65536;

        goto label25;

     label23:
        if c7 > -65537 goto label24;

        $i72 = -65537;

        goto label25;

     label24:
        $i72 = c7;

     label25:
        output[$i71] = $i72;

        i#15 = i#15 + 1;

        goto label01;

     label26:
        return;
    }


