    public static void writeCRC32(java.io.OutputStream, byte[]) throws java.io.IOException
    {
        java.io.OutputStream out;
        byte[] buf;
        java.util.zip.CRC32 crc32, $r0;
        long value, $l1;
        int i#8, $i0, $i2;
        byte $b3;

        out := @parameter0: java.io.OutputStream;

        buf := @parameter1: byte[];

        $r0 = new java.util.zip.CRC32;

        specialinvoke $r0.<java.util.zip.CRC32: void <init>()>();

        crc32 = $r0;

        virtualinvoke crc32.<java.util.zip.CRC32: void update(byte[])>(buf);

        value = virtualinvoke crc32.<java.util.zip.CRC32: long getValue()>();

        i#8 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#8);

        if i#8 >= 4 goto label2;

        $i0 = i#8 * 8;

        $l1 = value >>> $i0;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        virtualinvoke out.<java.io.OutputStream: void write(int)>($b3);

        i#8 = i#8 + 1;

        goto label1;

     label2:
        return;
    }

    public static void encodeVLI(java.io.OutputStream, long) throws java.io.IOException
    {
        java.io.OutputStream out;
        long num#1, $l1;
        byte $b0, $b3, $b5;
        int $i2, $i4;

        out := @parameter0: java.io.OutputStream;

        num#1 := @parameter1: long;

     label1:
        $b0 = num#1 cmp 128L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 < 0 goto label2;

        $l1 = num#1 | 128L;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        virtualinvoke out.<java.io.OutputStream: void write(int)>($b3);

        num#1 = num#1 >>> 7;

        goto label1;

     label2:
        $i4 = (int) num#1;

        $b5 = (byte) $i4;

        virtualinvoke out.<java.io.OutputStream: void write(int)>($b5);

        return;
    }


