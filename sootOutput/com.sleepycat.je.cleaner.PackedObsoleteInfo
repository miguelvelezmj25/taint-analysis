    public void <init>()
    {
        com.sleepycat.je.cleaner.PackedObsoleteInfo this;

        this := @this: com.sleepycat.je.cleaner.PackedObsoleteInfo;

        specialinvoke this.<com.sleepycat.bind.tuple.TupleOutput: void <init>()>();

        return;
    }

    public int getMemorySize()
    {
        com.sleepycat.je.cleaner.PackedObsoleteInfo this;
        int $i0;

        this := @this: com.sleepycat.je.cleaner.PackedObsoleteInfo;

        $i0 = staticinvoke <com.sleepycat.je.dbi.MemoryBudget: int tupleOutputSize(com.sleepycat.bind.tuple.TupleOutput)>(this);

        return $i0;
    }

    public void addObsoleteInfo(long)
    {
        com.sleepycat.je.cleaner.PackedObsoleteInfo this;
        long obsoleteLsn, $l0, $l1;

        this := @this: com.sleepycat.je.cleaner.PackedObsoleteInfo;

        obsoleteLsn := @parameter0: long;

        $l0 = staticinvoke <com.sleepycat.je.utilint.DbLsn: long getFileNumber(long)>(obsoleteLsn);

        virtualinvoke this.<com.sleepycat.je.cleaner.PackedObsoleteInfo: com.sleepycat.bind.tuple.TupleOutput writePackedLong(long)>($l0);

        $l1 = staticinvoke <com.sleepycat.je.utilint.DbLsn: long getFileOffset(long)>(obsoleteLsn);

        virtualinvoke this.<com.sleepycat.je.cleaner.PackedObsoleteInfo: com.sleepycat.bind.tuple.TupleOutput writePackedLong(long)>($l1);

        return;
    }

    public void copyObsoleteInfo(com.sleepycat.je.cleaner.PackedObsoleteInfo)
    {
        com.sleepycat.je.cleaner.PackedObsoleteInfo this, other;
        byte[] $r0;
        int $i0, $i1;

        this := @this: com.sleepycat.je.cleaner.PackedObsoleteInfo;

        other := @parameter0: com.sleepycat.je.cleaner.PackedObsoleteInfo;

        $r0 = virtualinvoke other.<com.sleepycat.je.cleaner.PackedObsoleteInfo: byte[] getBufferBytes()>();

        $i0 = 0;

        $i1 = virtualinvoke other.<com.sleepycat.je.cleaner.PackedObsoleteInfo: int getBufferLength()>();

        virtualinvoke this.<com.sleepycat.je.cleaner.PackedObsoleteInfo: void writeFast(byte[],int,int)>($r0, 0, $i1);

        return;
    }

    public void countObsoleteInfo(com.sleepycat.je.cleaner.UtilizationTracker, com.sleepycat.je.dbi.DatabaseImpl)
    {
        com.sleepycat.je.cleaner.PackedObsoleteInfo this;
        com.sleepycat.je.cleaner.UtilizationTracker tracker;
        com.sleepycat.je.dbi.DatabaseImpl nodeDb;
        com.sleepycat.bind.tuple.TupleInput in, $r0;
        long fileNumber, fileOffset, $l1;
        int $i0;
        com.sleepycat.je.log.LogEntryType $r1;

        this := @this: com.sleepycat.je.cleaner.PackedObsoleteInfo;

        tracker := @parameter0: com.sleepycat.je.cleaner.UtilizationTracker;

        nodeDb := @parameter1: com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = new com.sleepycat.bind.tuple.TupleInput;

        specialinvoke $r0.<com.sleepycat.bind.tuple.TupleInput: void <init>(com.sleepycat.bind.tuple.TupleOutput)>(this);

        in = $r0;

     label1:
        $i0 = virtualinvoke in.<com.sleepycat.bind.tuple.TupleInput: int available()>();

        if $i0 <= 0 goto label2;

        fileNumber = virtualinvoke in.<com.sleepycat.bind.tuple.TupleInput: long readPackedLong()>();

        fileOffset = virtualinvoke in.<com.sleepycat.bind.tuple.TupleInput: long readPackedLong()>();

        $l1 = staticinvoke <com.sleepycat.je.utilint.DbLsn: long makeLsn(long,long)>(fileNumber, fileOffset);

        $r1 = <com.sleepycat.je.log.LogEntryType: com.sleepycat.je.log.LogEntryType LOG_IN>;

        virtualinvoke tracker.<com.sleepycat.je.cleaner.UtilizationTracker: void countObsoleteNode(long,com.sleepycat.je.log.LogEntryType,int,com.sleepycat.je.dbi.DatabaseImpl)>($l1, $r1, 0, nodeDb);

        goto label1;

     label2:
        return;
    }


