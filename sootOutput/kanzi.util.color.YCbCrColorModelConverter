    public void <init>(int, int, int, int)
    {
        kanzi.util.color.YCbCrColorModelConverter this;
        int width, height, rgbOffset, stride;

        this := @this: kanzi.util.color.YCbCrColorModelConverter;

        width := @parameter0: int;

        height := @parameter1: int;

        rgbOffset := @parameter2: int;

        stride := @parameter3: int;

        specialinvoke this.<kanzi.util.color.YCbCrColorModelConverter: void <init>(int,int,int,int,kanzi.util.sampling.DownSampler,kanzi.util.sampling.UpSampler)>(width, height, rgbOffset, stride, null, null);

        return;
    }

    public void <init>(int, int, int, int, kanzi.util.sampling.DownSampler, kanzi.util.sampling.UpSampler)
    {
        kanzi.util.color.YCbCrColorModelConverter this;
        int width, height, rgbOffset, stride, $i0, $i1, $i2;
        kanzi.util.sampling.DownSampler downSampler;
        kanzi.util.sampling.UpSampler upSampler;
        java.lang.IllegalArgumentException $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        boolean $z0, $z1;

        this := @this: kanzi.util.color.YCbCrColorModelConverter;

        width := @parameter0: int;

        height := @parameter1: int;

        rgbOffset := @parameter2: int;

        stride := @parameter3: int;

        downSampler := @parameter4: kanzi.util.sampling.DownSampler;

        upSampler := @parameter5: kanzi.util.sampling.UpSampler;

        specialinvoke this.<java.lang.Object: void <init>()>();

        if height >= 8 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The height must be at least 8");

        throw $r0;

     label1:
        if width >= 8 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The width must be at least 8");

        throw $r1;

     label2:
        if stride >= 8 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The stride must be at least 8");

        throw $r2;

     label3:
        $i0 = height & 7;

        if $i0 == 0 goto label4;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The height must be a multiple of 8");

        throw $r3;

     label4:
        $i1 = width & 7;

        if $i1 == 0 goto label5;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The width must be a multiple of 8");

        throw $r4;

     label5:
        $i2 = stride & 7;

        if $i2 == 0 goto label6;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The stride must be a multiple of 8");

        throw $r5;

     label6:
        if downSampler == null goto label7;

        $z0 = interfaceinvoke downSampler.<kanzi.util.sampling.DownSampler: boolean supportsScalingFactor(int)>(2);

        if $z0 != 0 goto label7;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The provided down sampler does not support a scaling of 1/2");

        throw $r6;

     label7:
        if upSampler == null goto label8;

        $z1 = interfaceinvoke upSampler.<kanzi.util.sampling.UpSampler: boolean supportsScalingFactor(int)>(2);

        if $z1 != 0 goto label8;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The provided up sampler does not support a scaling of 2");

        throw $r7;

     label8:
        this.<kanzi.util.color.YCbCrColorModelConverter: int height> = height;

        this.<kanzi.util.color.YCbCrColorModelConverter: int width> = width;

        this.<kanzi.util.color.YCbCrColorModelConverter: int offset> = rgbOffset;

        this.<kanzi.util.color.YCbCrColorModelConverter: int stride> = stride;

        this.<kanzi.util.color.YCbCrColorModelConverter: kanzi.util.sampling.UpSampler upSampler> = upSampler;

        this.<kanzi.util.color.YCbCrColorModelConverter: kanzi.util.sampling.DownSampler downSampler> = downSampler;

        return;
    }

    public boolean convertRGBtoYUV(int[], int[], int[], int[], kanzi.ColorModelType)
    {
        kanzi.util.color.YCbCrColorModelConverter this;
        int[] rgb, y, u, v;
        kanzi.ColorModelType type, $r0, $r1, $r2;
        boolean $z0, $z1, $z2;

        this := @this: kanzi.util.color.YCbCrColorModelConverter;

        rgb := @parameter0: int[];

        y := @parameter1: int[];

        u := @parameter2: int[];

        v := @parameter3: int[];

        type := @parameter4: kanzi.ColorModelType;

        $r0 = <kanzi.ColorModelType: kanzi.ColorModelType YUV444>;

        if type != $r0 goto label1;

        $z0 = specialinvoke this.<kanzi.util.color.YCbCrColorModelConverter: boolean convertRGBtoYUV444(int[],int[],int[],int[])>(rgb, y, u, v);

        return $z0;

     label1:
        $r1 = <kanzi.ColorModelType: kanzi.ColorModelType YUV420>;

        if type != $r1 goto label2;

        $z1 = specialinvoke this.<kanzi.util.color.YCbCrColorModelConverter: boolean convertRGBtoYUV420(int[],int[],int[],int[])>(rgb, y, u, v);

        return $z1;

     label2:
        $r2 = <kanzi.ColorModelType: kanzi.ColorModelType YUV422>;

        if type != $r2 goto label3;

        $z2 = specialinvoke this.<kanzi.util.color.YCbCrColorModelConverter: boolean convertRGBtoYUV422(int[],int[],int[],int[])>(rgb, y, u, v);

        return $z2;

     label3:
        return 0;
    }

    private boolean convertRGBtoYUV444(int[], int[], int[], int[])
    {
        kanzi.util.color.YCbCrColorModelConverter this;
        int[] rgb, y, u, v;
        int end, rgbVal, r, g, b, yVal, uVal, vVal, startLine#3, startLine2#5, j#7, $i0, $i1, k#16, i#18, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26;

        this := @this: kanzi.util.color.YCbCrColorModelConverter;

        rgb := @parameter0: int[];

        y := @parameter1: int[];

        u := @parameter2: int[];

        v := @parameter3: int[];

        startLine#3 = this.<kanzi.util.color.YCbCrColorModelConverter: int offset>;

        startLine2#5 = 0;

        j#7 = 0;

     label1:
        $i0 = this.<kanzi.util.color.YCbCrColorModelConverter: int height>;

        if j#7 >= $i0 goto label4;

        $i1 = this.<kanzi.util.color.YCbCrColorModelConverter: int width>;

        end = startLine#3 + $i1;

        k#16 = startLine#3;

        i#18 = startLine2#5;

     label2:
        if k#16 >= end goto label3;

        $i2 = k#16;

        k#16 = k#16 + 1;

        rgbVal = rgb[$i2];

        $i3 = rgbVal >> 16;

        r = $i3 & 255;

        $i4 = rgbVal >> 8;

        g = $i4 & 255;

        b = rgbVal & 255;

        $i5 = 19595 * r;

        $i6 = 38470 * g;

        $i7 = $i5 + $i6;

        $i8 = 7471 * b;

        yVal = $i7 + $i8;

        $i9 = -11056 * r;

        $i10 = 21712 * g;

        $i11 = $i9 - $i10;

        $i12 = 32768 * b;

        uVal = $i11 + $i12;

        $i13 = 32768 * r;

        $i14 = 27440 * g;

        $i15 = $i13 - $i14;

        $i16 = 5328 * b;

        vVal = $i15 - $i16;

        $i17 = yVal + 32768;

        $i18 = $i17 >> 16;

        y[i#18] = $i18;

        $i19 = uVal + 32768;

        $i20 = $i19 >> 16;

        $i21 = $i20 + 128;

        u[i#18] = $i21;

        $i22 = vVal + 32768;

        $i23 = $i22 >> 16;

        $i24 = $i23 + 128;

        v[i#18] = $i24;

        i#18 = i#18 + 1;

        goto label2;

     label3:
        $i25 = this.<kanzi.util.color.YCbCrColorModelConverter: int width>;

        startLine2#5 = startLine2#5 + $i25;

        $i26 = this.<kanzi.util.color.YCbCrColorModelConverter: int stride>;

        startLine#3 = startLine#3 + $i26;

        j#7 = j#7 + 1;

        goto label1;

     label4:
        return 1;
    }

    private boolean convertRGBtoYUV420(int[], int[], int[], int[])
    {
        kanzi.util.color.YCbCrColorModelConverter this;
        int[] rgb, y, u, v;
        boolean res;
        int rgbOffs, nextLine, val0, yVal0, uVal0, vVal0, val1, yVal1, val2, yVal2, val3, yVal3, startLine#18, offs#20, $i0, j#27, $i1, i#34, $i2, $i3, $i4, $i5, r#50, $i6, g#56, b#60, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, r#115, $i25, g#121, b#125, $i26, $i27, $i28, $i29, $i30, $i31, $i32, i#146, $i33, $i34, $i35, r#159, $i36, g#165, b#169, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, r#202, $i47, g#208, b#212, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61;
        kanzi.util.sampling.DownSampler $r0, $r1, $r2;

        this := @this: kanzi.util.color.YCbCrColorModelConverter;

        rgb := @parameter0: int[];

        y := @parameter1: int[];

        u := @parameter2: int[];

        v := @parameter3: int[];

        $r0 = this.<kanzi.util.color.YCbCrColorModelConverter: kanzi.util.sampling.DownSampler downSampler>;

        if $r0 == null goto label1;

        res = specialinvoke this.<kanzi.util.color.YCbCrColorModelConverter: boolean convertRGBtoYUV444(int[],int[],int[],int[])>(rgb, y, u, v);

        $r1 = this.<kanzi.util.color.YCbCrColorModelConverter: kanzi.util.sampling.DownSampler downSampler>;

        interfaceinvoke $r1.<kanzi.util.sampling.DownSampler: void subSample(int[],int[])>(u, u);

        $r2 = this.<kanzi.util.color.YCbCrColorModelConverter: kanzi.util.sampling.DownSampler downSampler>;

        interfaceinvoke $r2.<kanzi.util.sampling.DownSampler: void subSample(int[],int[])>(v, v);

        return res;

     label1:
        startLine#18 = 0;

        offs#20 = 0;

        rgbOffs = this.<kanzi.util.color.YCbCrColorModelConverter: int offset>;

        $i0 = this.<kanzi.util.color.YCbCrColorModelConverter: int height>;

        j#27 = $i0 - 1;

     label2:
        if j#27 < 0 goto label5;

        $i1 = this.<kanzi.util.color.YCbCrColorModelConverter: int stride>;

        nextLine = startLine#18 + $i1;

        i#34 = 0;

     label3:
        $i2 = this.<kanzi.util.color.YCbCrColorModelConverter: int width>;

        if i#34 >= $i2 goto label4;

        $i3 = startLine#18 + rgbOffs;

        $i4 = $i3 + i#34;

        val0 = rgb[$i4];

        $i5 = val0 >> 16;

        r#50 = $i5 & 255;

        $i6 = val0 >> 8;

        g#56 = $i6 & 255;

        b#60 = val0 & 255;

        $i7 = 19595 * r#50;

        $i8 = 38470 * g#56;

        $i9 = $i7 + $i8;

        $i10 = 7471 * b#60;

        yVal0 = $i9 + $i10;

        $i11 = -11056 * r#50;

        $i12 = 21712 * g#56;

        $i13 = $i11 - $i12;

        $i14 = 32768 * b#60;

        uVal0 = $i13 + $i14;

        $i15 = 32768 * r#50;

        $i16 = 27440 * g#56;

        $i17 = $i15 - $i16;

        $i18 = 5328 * b#60;

        vVal0 = $i17 - $i18;

        $i19 = startLine#18 + i#34;

        $i20 = yVal0 + 32768;

        $i21 = $i20 >> 16;

        y[$i19] = $i21;

        $i22 = nextLine + rgbOffs;

        $i23 = $i22 + i#34;

        val1 = rgb[$i23];

        $i24 = val1 >> 16;

        r#115 = $i24 & 255;

        $i25 = val1 >> 8;

        g#121 = $i25 & 255;

        b#125 = val1 & 255;

        $i26 = 19595 * r#115;

        $i27 = 38470 * g#121;

        $i28 = $i26 + $i27;

        $i29 = 7471 * b#125;

        yVal1 = $i28 + $i29;

        $i30 = nextLine + i#34;

        $i31 = yVal1 + 32768;

        $i32 = $i31 >> 16;

        y[$i30] = $i32;

        i#146 = i#34 + 1;

        $i33 = startLine#18 + rgbOffs;

        $i34 = $i33 + i#146;

        val2 = rgb[$i34];

        $i35 = val2 >> 16;

        r#159 = $i35 & 255;

        $i36 = val2 >> 8;

        g#165 = $i36 & 255;

        b#169 = val2 & 255;

        $i37 = 19595 * r#159;

        $i38 = 38470 * g#165;

        $i39 = $i37 + $i38;

        $i40 = 7471 * b#169;

        yVal2 = $i39 + $i40;

        $i41 = startLine#18 + i#146;

        $i42 = yVal2 + 32768;

        $i43 = $i42 >> 16;

        y[$i41] = $i43;

        $i44 = nextLine + rgbOffs;

        $i45 = $i44 + i#146;

        val3 = rgb[$i45];

        $i46 = val3 >> 16;

        r#202 = $i46 & 255;

        $i47 = val3 >> 8;

        g#208 = $i47 & 255;

        b#212 = val3 & 255;

        $i48 = 19595 * r#202;

        $i49 = 38470 * g#208;

        $i50 = $i48 + $i49;

        $i51 = 7471 * b#212;

        yVal3 = $i50 + $i51;

        $i52 = nextLine + i#146;

        $i53 = yVal3 + 32768;

        $i54 = $i53 >> 16;

        y[$i52] = $i54;

        i#34 = i#146 + 1;

        $i55 = uVal0 + 32768;

        $i56 = $i55 >> 16;

        $i57 = $i56 + 128;

        u[offs#20] = $i57;

        $i58 = vVal0 + 32768;

        $i59 = $i58 >> 16;

        $i60 = $i59 + 128;

        v[offs#20] = $i60;

        offs#20 = offs#20 + 1;

        goto label3;

     label4:
        $i61 = this.<kanzi.util.color.YCbCrColorModelConverter: int stride>;

        startLine#18 = nextLine + $i61;

        j#27 = j#27 + -2;

        goto label2;

     label5:
        return 1;
    }

    private boolean convertRGBtoYUV422(int[], int[], int[], int[])
    {
        kanzi.util.color.YCbCrColorModelConverter this;
        int[] rgb, y, u, v;
        boolean res;
        int half, end, yVal1, uVal1, vVal1, yVal2, iOffs#19, oOffs#21, $i0, j#27, $i1, $i2, k#36, i#38, k#43, rgbVal#45, $i3, r#51, $i4, g#57, b#61, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, rgbVal#98, $i17, r#104, $i18, g#110, b#114, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36;
        kanzi.util.sampling.DownSampler $r0, $r1, $r2;

        this := @this: kanzi.util.color.YCbCrColorModelConverter;

        rgb := @parameter0: int[];

        y := @parameter1: int[];

        u := @parameter2: int[];

        v := @parameter3: int[];

        $r0 = this.<kanzi.util.color.YCbCrColorModelConverter: kanzi.util.sampling.DownSampler downSampler>;

        if $r0 == null goto label1;

        res = specialinvoke this.<kanzi.util.color.YCbCrColorModelConverter: boolean convertRGBtoYUV444(int[],int[],int[],int[])>(rgb, y, u, v);

        $r1 = this.<kanzi.util.color.YCbCrColorModelConverter: kanzi.util.sampling.DownSampler downSampler>;

        interfaceinvoke $r1.<kanzi.util.sampling.DownSampler: void subSampleHorizontal(int[],int[])>(u, u);

        $r2 = this.<kanzi.util.color.YCbCrColorModelConverter: kanzi.util.sampling.DownSampler downSampler>;

        interfaceinvoke $r2.<kanzi.util.sampling.DownSampler: void subSampleHorizontal(int[],int[])>(v, v);

        return res;

     label1:
        iOffs#19 = this.<kanzi.util.color.YCbCrColorModelConverter: int offset>;

        oOffs#21 = 0;

        $i0 = this.<kanzi.util.color.YCbCrColorModelConverter: int width>;

        half = $i0 >> 1;

        j#27 = 0;

     label2:
        $i1 = this.<kanzi.util.color.YCbCrColorModelConverter: int height>;

        if j#27 >= $i1 goto label5;

        $i2 = this.<kanzi.util.color.YCbCrColorModelConverter: int width>;

        end = iOffs#19 + $i2;

        k#36 = iOffs#19;

        i#38 = oOffs#21;

     label3:
        if k#36 >= end goto label4;

        k#43 = k#36 + 1;

        rgbVal#45 = rgb[k#36];

        $i3 = rgbVal#45 >> 16;

        r#51 = $i3 & 255;

        $i4 = rgbVal#45 >> 8;

        g#57 = $i4 & 255;

        b#61 = rgbVal#45 & 255;

        $i5 = 19595 * r#51;

        $i6 = 38470 * g#57;

        $i7 = $i5 + $i6;

        $i8 = 7471 * b#61;

        yVal1 = $i7 + $i8;

        $i9 = -11056 * r#51;

        $i10 = 21712 * g#57;

        $i11 = $i9 - $i10;

        $i12 = 32768 * b#61;

        uVal1 = $i11 + $i12;

        $i13 = 32768 * r#51;

        $i14 = 27440 * g#57;

        $i15 = $i13 - $i14;

        $i16 = 5328 * b#61;

        vVal1 = $i15 - $i16;

        k#36 = k#43 + 1;

        rgbVal#98 = rgb[k#43];

        $i17 = rgbVal#98 >> 16;

        r#104 = $i17 & 255;

        $i18 = rgbVal#98 >> 8;

        g#110 = $i18 & 255;

        b#114 = rgbVal#98 & 255;

        $i19 = 19595 * r#104;

        $i20 = 38470 * g#110;

        $i21 = $i19 + $i20;

        $i22 = 7471 * b#114;

        yVal2 = $i21 + $i22;

        $i23 = uVal1 + 32768;

        $i24 = $i23 >> 16;

        $i25 = $i24 + 128;

        u[i#38] = $i25;

        $i26 = vVal1 + 32768;

        $i27 = $i26 >> 16;

        $i28 = $i27 + 128;

        v[i#38] = $i28;

        $i29 = i#38 + i#38;

        $i30 = yVal1 + 32768;

        $i31 = $i30 >> 16;

        y[$i29] = $i31;

        $i32 = i#38 + i#38;

        $i33 = $i32 + 1;

        $i34 = yVal2 + 32768;

        $i35 = $i34 >> 16;

        y[$i33] = $i35;

        i#38 = i#38 + 1;

        goto label3;

     label4:
        oOffs#21 = oOffs#21 + half;

        $i36 = this.<kanzi.util.color.YCbCrColorModelConverter: int stride>;

        iOffs#19 = iOffs#19 + $i36;

        j#27 = j#27 + 1;

        goto label2;

     label5:
        return 1;
    }


