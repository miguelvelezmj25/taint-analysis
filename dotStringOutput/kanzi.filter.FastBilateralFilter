digraph apply {
"this := @this: kanzi.filter.FastBilateralFilter {1139407327}" -> "input := @parameter0: kanzi.SliceIntArray {720545335}";
"input := @parameter0: kanzi.SliceIntArray {720545335}" -> "output := @parameter1: kanzi.SliceIntArray {1856599363}";
"output := @parameter1: kanzi.SliceIntArray {1856599363}" -> "$z0 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(input) {1210535308}";
"$z0 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(input) {1210535308}" -> "if $z0 == 0 goto return 0 {1837181606}";
"if $z0 == 0 goto return 0 {1837181606}" -> "$z1 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(output) {885713553}";
"if $z0 == 0 goto return 0 {1837181606}" -> "return 0 {2360544}";
"$z1 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(output) {885713553}" -> "if $z1 != 0 goto src = input.<kanzi.SliceIntArray: int[] array> {1190365865}";
"if $z1 != 0 goto src = input.<kanzi.SliceIntArray: int[] array> {1190365865}" -> "return 0 {2360544}";
"if $z1 != 0 goto src = input.<kanzi.SliceIntArray: int[] array> {1190365865}" -> "src = input.<kanzi.SliceIntArray: int[] array> {563818815}";
"src = input.<kanzi.SliceIntArray: int[] array> {563818815}" -> "dst = output.<kanzi.SliceIntArray: int[] array> {549153284}";
"dst = output.<kanzi.SliceIntArray: int[] array> {549153284}" -> "srcIdx = input.<kanzi.SliceIntArray: int index> {532229730}";
"srcIdx = input.<kanzi.SliceIntArray: int index> {532229730}" -> "dstIdx = output.<kanzi.SliceIntArray: int index> {364970317}";
"dstIdx = output.<kanzi.SliceIntArray: int index> {364970317}" -> "buf1 = this.<kanzi.filter.FastBilateralFilter: int[] buffer1> {1699723411}";
"buf1 = this.<kanzi.filter.FastBilateralFilter: int[] buffer1> {1699723411}" -> "wk_ = this.<kanzi.filter.FastBilateralFilter: float[] wk> {1194584802}";
"wk_ = this.<kanzi.filter.FastBilateralFilter: float[] wk> {1194584802}" -> "ds = this.<kanzi.filter.FastBilateralFilter: int downSampling> {1864520845}";
"ds = this.<kanzi.filter.FastBilateralFilter: int downSampling> {1864520845}" -> "$i0 = this.<kanzi.filter.FastBilateralFilter: int height> {1483586952}";
"$i0 = this.<kanzi.filter.FastBilateralFilter: int height> {1483586952}" -> "scaledH = $i0 >> ds {1675694207}";
"scaledH = $i0 >> ds {1675694207}" -> "$i1 = this.<kanzi.filter.FastBilateralFilter: int width> {1935937944}";
"$i1 = this.<kanzi.filter.FastBilateralFilter: int width> {1935937944}" -> "scaledW = $i1 >> ds {1442381082}";
"scaledW = $i1 >> ds {1442381082}" -> "len = lengthof src {2025460381}";
"len = lengthof src {2025460381}" -> "buf2#31 = src {1062756699}";
"buf2#31 = src {1062756699}" -> "if ds <= 0 goto (branch) {505000575}";
"if ds <= 0 goto (branch) {505000575}" -> "buf2#31 = this.<kanzi.filter.FastBilateralFilter: int[] buffer2> {1954993759}";
"if ds <= 0 goto (branch) {505000575}" -> "if srcIdx != 0 goto buf2#31 = this.<kanzi.filter.FastBilateralFilter: int[] buffer2> {1245997702}";
"buf2#31 = this.<kanzi.filter.FastBilateralFilter: int[] buffer2> {1954993759}" -> "$i2 = this.<kanzi.filter.FastBilateralFilter: int stride> {751823361}";
"$i2 = this.<kanzi.filter.FastBilateralFilter: int stride> {751823361}" -> "xx = srcIdx % $i2 {1362372030}";
"xx = srcIdx % $i2 {1362372030}" -> "$i3 = this.<kanzi.filter.FastBilateralFilter: int stride> {1664162653}";
"$i3 = this.<kanzi.filter.FastBilateralFilter: int stride> {1664162653}" -> "yy = srcIdx / $i3 {196071213}";
"yy = srcIdx / $i3 {196071213}" -> "$i4 = this.<kanzi.filter.FastBilateralFilter: int width> {897094632}";
"$i4 = this.<kanzi.filter.FastBilateralFilter: int width> {897094632}" -> "$i5 = $i4 + xx {236987935}";
"$i5 = $i4 + xx {236987935}" -> "$i6 = this.<kanzi.filter.FastBilateralFilter: int stride> {1638985572}";
"$i6 = this.<kanzi.filter.FastBilateralFilter: int stride> {1638985572}" -> "if $i5 >= $i6 goto $i8 = this.<kanzi.filter.FastBilateralFilter: int stride> {9816007}";
"if $i5 >= $i6 goto $i8 = this.<kanzi.filter.FastBilateralFilter: int stride> {9816007}" -> "$i7 = this.<kanzi.filter.FastBilateralFilter: int width> {700507439}";
"if $i5 >= $i6 goto $i8 = this.<kanzi.filter.FastBilateralFilter: int stride> {9816007}" -> "$i8 = this.<kanzi.filter.FastBilateralFilter: int stride> {1047879417}";
"$i7 = this.<kanzi.filter.FastBilateralFilter: int width> {700507439}" -> "goto [?= ww = $i7] {1332606140}";
"goto [?= ww = $i7] {1332606140}" -> "ww = $i7 {13316428}";
"$i8 = this.<kanzi.filter.FastBilateralFilter: int stride> {1047879417}" -> "$i7 = $i8 - xx {811262763}";
"$i7 = $i8 - xx {811262763}" -> "ww = $i7 {13316428}";
"ww = $i7 {13316428}" -> "$i9 = this.<kanzi.filter.FastBilateralFilter: int height> {1714459255}";
"$i9 = this.<kanzi.filter.FastBilateralFilter: int height> {1714459255}" -> "$i10 = $i9 + yy {1110776454}";
"$i10 = $i9 + yy {1110776454}" -> "$i11 = this.<kanzi.filter.FastBilateralFilter: int stride> {43288448}";
"$i11 = this.<kanzi.filter.FastBilateralFilter: int stride> {43288448}" -> "$i12 = $i10 * $i11 {1904577733}";
"$i12 = $i10 * $i11 {1904577733}" -> "if $i12 > len goto $i14 = this.<kanzi.filter.FastBilateralFilter: int height> {1401271125}";
"if $i12 > len goto $i14 = this.<kanzi.filter.FastBilateralFilter: int height> {1401271125}" -> "$i13 = this.<kanzi.filter.FastBilateralFilter: int height> {683003890}";
"if $i12 > len goto $i14 = this.<kanzi.filter.FastBilateralFilter: int height> {1401271125}" -> "$i14 = this.<kanzi.filter.FastBilateralFilter: int height> {376055818}";
"$i13 = this.<kanzi.filter.FastBilateralFilter: int height> {683003890}" -> "goto [?= hh = $i13] {1100521260}";
"goto [?= hh = $i13] {1100521260}" -> "hh = $i13 {566200295}";
"$i14 = this.<kanzi.filter.FastBilateralFilter: int height> {376055818}" -> "$i13 = $i14 - yy {356660157}";
"$i13 = $i14 - yy {356660157}" -> "hh = $i13 {566200295}";
"hh = $i13 {566200295}" -> "$r0 = new kanzi.util.sampling.DecimateDownSampler {80191829}";
"$r0 = new kanzi.util.sampling.DecimateDownSampler {80191829}" -> "$i15 = this.<kanzi.filter.FastBilateralFilter: int stride> {984606875}";
"$i15 = this.<kanzi.filter.FastBilateralFilter: int stride> {984606875}" -> "$i16 = 1 << ds {982998588}";
"$i16 = 1 << ds {982998588}" -> "specialinvoke $r0.<kanzi.util.sampling.DecimateDownSampler: void <init>(int,int,int,int,int)>(ww, hh, $i15, srcIdx, $i16) {1784715016}";
"specialinvoke $r0.<kanzi.util.sampling.DecimateDownSampler: void <init>(int,int,int,int,int)>(ww, hh, $i15, srcIdx, $i16) {1784715016}" -> "sampler = $r0 {1056854792}";
"sampler = $r0 {1056854792}" -> "virtualinvoke sampler.<kanzi.util.sampling.DecimateDownSampler: void subSample(int[],int[])>(src, buf2#31) {1564567259}";
"virtualinvoke sampler.<kanzi.util.sampling.DecimateDownSampler: void subSample(int[],int[])>(src, buf2#31) {1564567259}" -> "goto [?= channel#109 = 0] {658617090}";
"goto [?= channel#109 = 0] {658617090}" -> "channel#109 = 0 {1584743738}";
"if srcIdx != 0 goto buf2#31 = this.<kanzi.filter.FastBilateralFilter: int[] buffer2> {1245997702}" -> "$i17 = this.<kanzi.filter.FastBilateralFilter: int stride> {907465606}";
"if srcIdx != 0 goto buf2#31 = this.<kanzi.filter.FastBilateralFilter: int[] buffer2> {1245997702}" -> "buf2#31 = this.<kanzi.filter.FastBilateralFilter: int[] buffer2> {84414303}";
"$i17 = this.<kanzi.filter.FastBilateralFilter: int stride> {907465606}" -> "$i18 = this.<kanzi.filter.FastBilateralFilter: int width> {401692985}";
"$i18 = this.<kanzi.filter.FastBilateralFilter: int width> {401692985}" -> "if $i17 == $i18 goto channel#109 = 0 {653269390}";
"if $i17 == $i18 goto channel#109 = 0 {653269390}" -> "buf2#31 = this.<kanzi.filter.FastBilateralFilter: int[] buffer2> {84414303}";
"if $i17 == $i18 goto channel#109 = 0 {653269390}" -> "channel#109 = 0 {1584743738}";
"buf2#31 = this.<kanzi.filter.FastBilateralFilter: int[] buffer2> {84414303}" -> "iOffs#87 = srcIdx {600532098}";
"iOffs#87 = srcIdx {600532098}" -> "oOffs#89 = dstIdx {1733266109}";
"oOffs#89 = dstIdx {1733266109}" -> "y#92 = this.<kanzi.filter.FastBilateralFilter: int height> {795057763}";
"y#92 = this.<kanzi.filter.FastBilateralFilter: int height> {795057763}" -> "if y#92 <= 0 goto channel#109 = 0 {323912779}";
"if y#92 <= 0 goto channel#109 = 0 {323912779}" -> "$i19 = this.<kanzi.filter.FastBilateralFilter: int width> {1979715055}";
"if y#92 <= 0 goto channel#109 = 0 {323912779}" -> "channel#109 = 0 {1584743738}";
"$i19 = this.<kanzi.filter.FastBilateralFilter: int width> {1979715055}" -> "staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(src, iOffs#87, buf2#31, oOffs#89, $i19) {1839732345}";
"staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(src, iOffs#87, buf2#31, oOffs#89, $i19) {1839732345}" -> "$i20 = this.<kanzi.filter.FastBilateralFilter: int stride> {1927526421}";
"$i20 = this.<kanzi.filter.FastBilateralFilter: int stride> {1927526421}" -> "iOffs#87 = iOffs#87 + $i20 {1850570210}";
"iOffs#87 = iOffs#87 + $i20 {1850570210}" -> "$i21 = this.<kanzi.filter.FastBilateralFilter: int width> {612685592}";
"$i21 = this.<kanzi.filter.FastBilateralFilter: int width> {612685592}" -> "oOffs#89 = oOffs#89 + $i21 {723476034}";
"oOffs#89 = oOffs#89 + $i21 {723476034}" -> "y#92 = y#92 + -1 {788976343}";
"y#92 = y#92 + -1 {788976343}" -> "goto [?= (branch)] {767097912}";
"goto [?= (branch)] {767097912}" -> "if y#92 <= 0 goto channel#109 = 0 {323912779}";
"channel#109 = 0 {1584743738}" -> "$i22 = this.<kanzi.filter.FastBilateralFilter: int channels> {12618345}";
"$i22 = this.<kanzi.filter.FastBilateralFilter: int channels> {12618345}" -> "if channel#109 >= $i22 goto return 1 {1961378782}";
"if channel#109 >= $i22 goto return 1 {1961378782}" -> "shift = channel#109 << 3 {438449622}";
"if channel#109 >= $i22 goto return 1 {1961378782}" -> "return 1 {135324819}";
"shift = channel#109 << 3 {438449622}" -> "min#117 = 255 {148047826}";
"min#117 = 255 {148047826}" -> "max#119 = 0 {1745922360}";
"max#119 = 0 {1745922360}" -> "i#121 = 0 {2109568510}";
"i#121 = 0 {2109568510}" -> "$i23 = lengthof buf1 {1761094112}";
"$i23 = lengthof buf1 {1761094112}" -> "if i#121 >= $i23 goto fmin = (float) min#117 {2130486148}";
"if i#121 >= $i23 goto fmin = (float) min#117 {2130486148}" -> "$i24 = buf2#31[i#121] {15668113}";
"if i#121 >= $i23 goto fmin = (float) min#117 {2130486148}" -> "fmin = (float) min#117 {619414331}";
"$i24 = buf2#31[i#121] {15668113}" -> "$i25 = $i24 >> shift {1145718151}";
"$i25 = $i24 >> shift {1145718151}" -> "val = $i25 & 255 {923666221}";
"val = $i25 & 255 {923666221}" -> "$i26 = max#119 - val {110851026}";
"$i26 = max#119 - val {110851026}" -> "$i27 = $i26 >> 31 {32758889}";
"$i27 = $i26 >> 31 {32758889}" -> "$i28 = max#119 - val {477239650}";
"$i28 = max#119 - val {477239650}" -> "$i29 = $i27 & $i28 {58560017}";
"$i29 = $i27 & $i28 {58560017}" -> "max#119 = max#119 - $i29 {420976058}";
"max#119 = max#119 - $i29 {420976058}" -> "$i30 = val - min#117 {1903400095}";
"$i30 = val - min#117 {1903400095}" -> "$i31 = $i30 >> 31 {237218495}";
"$i31 = $i30 >> 31 {237218495}" -> "$i32 = val - min#117 {885050214}";
"$i32 = val - min#117 {885050214}" -> "$i33 = $i31 & $i32 {656795923}";
"$i33 = $i31 & $i32 {656795923}" -> "min#117 = min#117 + $i33 {524382581}";
"min#117 = min#117 + $i33 {524382581}" -> "buf1[i#121] = val {1478070572}";
"buf1[i#121] = val {1478070572}" -> "i#121 = i#121 + 1 {890036285}";
"i#121 = i#121 + 1 {890036285}" -> "goto [?= $i23 = lengthof buf1] {2022856368}";
"goto [?= $i23 = lengthof buf1] {2022856368}" -> "$i23 = lengthof buf1 {1761094112}";
"fmin = (float) min#117 {619414331}" -> "fmax = (float) max#119 {374571757}";
"fmax = (float) max#119 {374571757}" -> "$r1 = this.<kanzi.filter.FastBilateralFilter: float[] grayscale> {2048064367}";
"$r1 = this.<kanzi.filter.FastBilateralFilter: float[] grayscale> {2048064367}" -> "$i34 = lengthof $r1 {1574836589}";
"$i34 = lengthof $r1 {1574836589}" -> "maxGrayIdx = $i34 - 1 {698989985}";
"maxGrayIdx = $i34 - 1 {698989985}" -> "$r2 = this.<kanzi.filter.FastBilateralFilter: float[] grayscale> {1040847299}";
"$r2 = this.<kanzi.filter.FastBilateralFilter: float[] grayscale> {1040847299}" -> "$r2[0] = fmin {1077325327}";
"$r2[0] = fmin {1077325327}" -> "$r3 = this.<kanzi.filter.FastBilateralFilter: float[] grayscale> {1561297163}";
"$r3 = this.<kanzi.filter.FastBilateralFilter: float[] grayscale> {1561297163}" -> "$r3[maxGrayIdx] = fmax {2002622886}";
"$r3[maxGrayIdx] = fmax {2002622886}" -> "$f0 = fmax - fmin {1063967387}";
"$f0 = fmax - fmin {1063967387}" -> "delta = $f0 + 0.01F {707199399}";
"delta = $f0 + 0.01F {707199399}" -> "i#180 = 1 {943835348}";
"i#180 = 1 {943835348}" -> "if i#180 >= maxGrayIdx goto jk_idx0#197 = 0 {1268606305}";
"if i#180 >= maxGrayIdx goto jk_idx0#197 = 0 {1268606305}" -> "$r4 = this.<kanzi.filter.FastBilateralFilter: float[] grayscale> {424926101}";
"if i#180 >= maxGrayIdx goto jk_idx0#197 = 0 {1268606305}" -> "jk_idx0#197 = 0 {2055982341}";
"$r4 = this.<kanzi.filter.FastBilateralFilter: float[] grayscale> {424926101}" -> "$f1 = (float) min#117 {2028081677}";
"$f1 = (float) min#117 {2028081677}" -> "$f2 = (float) i#180 {2118985643}";
"$f2 = (float) i#180 {2118985643}" -> "$f3 = (float) maxGrayIdx {698394693}";
"$f3 = (float) maxGrayIdx {698394693}" -> "$f4 = delta / $f3 {1044882085}";
"$f4 = delta / $f3 {1044882085}" -> "$f5 = $f2 * $f4 {1810474907}";
"$f5 = $f2 * $f4 {1810474907}" -> "$f6 = $f1 + $f5 {114279700}";
"$f6 = $f1 + $f5 {114279700}" -> "$r4[i#180] = $f6 {704751368}";
"$r4[i#180] = $f6 {704751368}" -> "i#180 = i#180 + 1 {701528679}";
"i#180 = i#180 + 1 {701528679}" -> "goto [?= (branch)] {254002617}";
"goto [?= (branch)] {254002617}" -> "if i#180 >= maxGrayIdx goto jk_idx0#197 = 0 {1268606305}";
"jk_idx0#197 = 0 {2055982341}" -> "jk_idx1#199 = 1 {987483483}";
"jk_idx1#199 = 1 {987483483}" -> "$r5 = this.<kanzi.filter.FastBilateralFilter: float[][] jk> {1405785346}";
"$r5 = this.<kanzi.filter.FastBilateralFilter: float[][] jk> {1405785346}" -> "jk_#204 = $r5[0] {1364228733}";
"jk_#204 = $r5[0] {1364228733}" -> "$i35 = 1 << ds {813925878}";
"$i35 = 1 << ds {813925878}" -> "$f7 = (float) $i35 {684817512}";
"$f7 = (float) $i35 {684817512}" -> "shift_inv = 1.0F / $f7 {1236028978}";
"shift_inv = 1.0F / $f7 {1236028978}" -> "$f8 = (float) maxGrayIdx {796486739}";
"$f8 = (float) maxGrayIdx {796486739}" -> "delta_scale = $f8 / delta {1676852053}";
"delta_scale = $f8 / delta {1676852053}" -> "grayRangeIdx#216 = 0 {367847408}";
"grayRangeIdx#216 = 0 {367847408}" -> "if grayRangeIdx#216 > maxGrayIdx goto channel#109 = channel#109 + 1 {1556290058}";
"if grayRangeIdx#216 > maxGrayIdx goto channel#109 = channel#109 + 1 {1556290058}" -> "offs#220 = 0 {1252644890}";
"if grayRangeIdx#216 > maxGrayIdx goto channel#109 = channel#109 + 1 {1556290058}" -> "channel#109 = channel#109 + 1 {720015132}";
"offs#220 = 0 {1252644890}" -> "$r6 = this.<kanzi.filter.FastBilateralFilter: float[] grayscale> {890195544}";
"$r6 = this.<kanzi.filter.FastBilateralFilter: float[] grayscale> {890195544}" -> "gray = $r6[grayRangeIdx#216] {1880600635}";
"gray = $r6[grayRangeIdx#216] {1880600635}" -> "y#226 = 0 {181205961}";
"y#226 = 0 {181205961}" -> "if y#226 >= scaledH goto $r8 = this.<kanzi.filter.FastBilateralFilter: float[] box> {1542420374}";
"if y#226 >= scaledH goto $r8 = this.<kanzi.filter.FastBilateralFilter: float[] box> {1542420374}" -> "end = offs#220 + scaledW {1232024391}";
"if y#226 >= scaledH goto $r8 = this.<kanzi.filter.FastBilateralFilter: float[] box> {1542420374}" -> "$r8 = this.<kanzi.filter.FastBilateralFilter: float[] box> {527311685}";
"end = offs#220 + scaledW {1232024391}" -> "x#233 = offs#220 {1334510311}";
"x#233 = offs#220 {1334510311}" -> "if x#233 >= end goto offs#220 = offs#220 + scaledW {1562460993}";
"if x#233 >= end goto offs#220 = offs#220 + scaledW {1562460993}" -> "$i36 = buf1[x#233] {1292265815}";
"if x#233 >= end goto offs#220 = offs#220 + scaledW {1562460993}" -> "offs#220 = offs#220 + scaledW {1104649919}";
"$i36 = buf1[x#233] {1292265815}" -> "val = $i36 & 255 {236922356}";
"val = $i36 & 255 {236922356}" -> "$f9 = (float) val {969040436}";
"$f9 = (float) val {969040436}" -> "$f10 = gray - $f9 {1317392509}";
"$f10 = gray - $f9 {1317392509}" -> "$f11 = staticinvoke <java.lang.Math: float abs(float)>($f10) {1261558062}";
"$f11 = staticinvoke <java.lang.Math: float abs(float)>($f10) {1261558062}" -> "$f12 = $f11 + 0.5F {1318122552}";
"$f12 = $f11 + 0.5F {1318122552}" -> "colorIdx = (int) $f12 {1086576685}";
"colorIdx = (int) $f12 {1086576685}" -> "$r7 = this.<kanzi.filter.FastBilateralFilter: int[] colors> {298325002}";
"$r7 = this.<kanzi.filter.FastBilateralFilter: int[] colors> {298325002}" -> "color = $r7[colorIdx] {2116766252}";
"color = $r7[colorIdx] {2116766252}" -> "$i37 = color * val {1188583782}";
"$i37 = color * val {1188583782}" -> "$f13 = (float) $i37 {1895420693}";
"$f13 = (float) $i37 {1895420693}" -> "jk_#204[x#233] = $f13 {1768674939}";
"jk_#204[x#233] = $f13 {1768674939}" -> "$f14 = (float) color {724563361}";
"$f14 = (float) color {724563361}" -> "wk_[x#233] = $f14 {1330009555}";
"wk_[x#233] = $f14 {1330009555}" -> "x#233 = x#233 + 1 {342955644}";
"x#233 = x#233 + 1 {342955644}" -> "goto [?= (branch)] {162436862}";
"goto [?= (branch)] {162436862}" -> "if x#233 >= end goto offs#220 = offs#220 + scaledW {1562460993}";
"offs#220 = offs#220 + scaledW {1104649919}" -> "y#226 = y#226 + 1 {1534192194}";
"y#226 = y#226 + 1 {1534192194}" -> "goto [?= (branch)] {367250428}";
"goto [?= (branch)] {367250428}" -> "if y#226 >= scaledH goto $r8 = this.<kanzi.filter.FastBilateralFilter: float[] box> {1542420374}";
"$r8 = this.<kanzi.filter.FastBilateralFilter: float[] box> {527311685}" -> "$i38 = this.<kanzi.filter.FastBilateralFilter: int radius> {2106318705}";
"$i38 = this.<kanzi.filter.FastBilateralFilter: int radius> {2106318705}" -> "$f15 = (float) $i38 {607157728}";
"$f15 = (float) $i38 {607157728}" -> "staticinvoke <kanzi.filter.FastBilateralFilter: void gaussianRecursive(float[],float[],int,int,float)>(jk_#204, $r8, scaledW, scaledH, $f15) {839084770}";
"staticinvoke <kanzi.filter.FastBilateralFilter: void gaussianRecursive(float[],float[],int,int,float)>(jk_#204, $r8, scaledW, scaledH, $f15) {839084770}" -> "$r9 = this.<kanzi.filter.FastBilateralFilter: float[] box> {682992756}";
"$r9 = this.<kanzi.filter.FastBilateralFilter: float[] box> {682992756}" -> "$i39 = this.<kanzi.filter.FastBilateralFilter: int radius> {1042767230}";
"$i39 = this.<kanzi.filter.FastBilateralFilter: int radius> {1042767230}" -> "$f16 = (float) $i39 {2077598223}";
"$f16 = (float) $i39 {2077598223}" -> "staticinvoke <kanzi.filter.FastBilateralFilter: void gaussianRecursive(float[],float[],int,int,float)>(wk_, $r9, scaledW, scaledH, $f16) {370240871}";
"staticinvoke <kanzi.filter.FastBilateralFilter: void gaussianRecursive(float[],float[],int,int,float)>(wk_, $r9, scaledW, scaledH, $f16) {370240871}" -> "scaledSize = scaledW * scaledH {325945129}";
"scaledSize = scaledW * scaledH {325945129}" -> "$i40 = scaledW - 2 {665732438}";
"$i40 = scaledW - 2 {665732438}" -> "maxW = (float) $i40 {1641331621}";
"maxW = (float) $i40 {1641331621}" -> "$i41 = scaledH - 2 {724426967}";
"$i41 = scaledH - 2 {724426967}" -> "maxH = (float) $i41 {271044461}";
"maxH = (float) $i41 {271044461}" -> "w = this.<kanzi.filter.FastBilateralFilter: int width> {344302005}";
"w = this.<kanzi.filter.FastBilateralFilter: int width> {344302005}" -> "n#296 = 0 {2060387365}";
"n#296 = 0 {2060387365}" -> "if n#296 >= scaledSize goto (branch) {1849400264}";
"if n#296 >= scaledSize goto (branch) {1849400264}" -> "$f17 = jk_#204[n#296] {1472220173}";
"if n#296 >= scaledSize goto (branch) {1849400264}" -> "if grayRangeIdx#216 == 0 goto $r17 = this.<kanzi.filter.FastBilateralFilter: float[][] jk> {1243607437}";
"$f17 = jk_#204[n#296] {1472220173}" -> "$f18 = wk_[n#296] {1079349004}";
"$f18 = wk_[n#296] {1079349004}" -> "$f19 = $f17 / $f18 {362808111}";
"$f19 = $f17 / $f18 {362808111}" -> "jk_#204[n#296] = $f19 {246074280}";
"jk_#204[n#296] = $f19 {246074280}" -> "n#296 = n#296 + 1 {1801290439}";
"n#296 = n#296 + 1 {1801290439}" -> "goto [?= (branch)] {127683919}";
"goto [?= (branch)] {127683919}" -> "if n#296 >= scaledSize goto (branch) {1849400264}";
"if grayRangeIdx#216 == 0 goto $r17 = this.<kanzi.filter.FastBilateralFilter: float[][] jk> {1243607437}" -> "iOffs#310 = srcIdx {1050269260}";
"if grayRangeIdx#216 == 0 goto $r17 = this.<kanzi.filter.FastBilateralFilter: float[][] jk> {1243607437}" -> "$r17 = this.<kanzi.filter.FastBilateralFilter: float[][] jk> {1818950784}";
"iOffs#310 = srcIdx {1050269260}" -> "oOffs#312 = dstIdx {1879137832}";
"oOffs#312 = dstIdx {1879137832}" -> "$r11 = this.<kanzi.filter.FastBilateralFilter: float[][] jk> {1967963585}";
"$r11 = this.<kanzi.filter.FastBilateralFilter: float[][] jk> {1967963585}" -> "jk0 = $r11[jk_idx0#197] {833931071}";
"jk0 = $r11[jk_idx0#197] {833931071}" -> "$r12 = this.<kanzi.filter.FastBilateralFilter: float[][] jk> {485460333}";
"$r12 = this.<kanzi.filter.FastBilateralFilter: float[][] jk> {485460333}" -> "jk1 = $r12[jk_idx1#199] {517867930}";
"jk1 = $r12[jk_idx1#199] {517867930}" -> "y#322 = 0 {1890946035}";
"y#322 = 0 {1890946035}" -> "$i43 = this.<kanzi.filter.FastBilateralFilter: int height> {1003537375}";
"$i43 = this.<kanzi.filter.FastBilateralFilter: int height> {1003537375}" -> "if y#322 >= $i43 goto jk_idx1#199 = jk_idx0#197 {1743138117}";
"if y#322 >= $i43 goto jk_idx1#199 = jk_idx0#197 {1743138117}" -> "$f20 = (float) y#322 {989322176}";
"if y#322 >= $i43 goto jk_idx1#199 = jk_idx0#197 {1743138117}" -> "jk_idx1#199 = jk_idx0#197 {896067485}";
"$f20 = (float) y#322 {989322176}" -> "$f21 = $f20 * shift_inv {1373544666}";
"$f21 = $f20 * shift_inv {1373544666}" -> "ys = staticinvoke <java.lang.Math: float min(float,float)>($f21, maxH) {857156145}";
"ys = staticinvoke <java.lang.Math: float min(float,float)>($f21, maxH) {857156145}" -> "$i44 = iOffs#310 + w {324533307}";
"$i44 = iOffs#310 + w {324533307}" -> "if $i44 >= len goto $i45 = len - iOffs#310 {1089937481}";
"if $i44 >= len goto $i45 = len - iOffs#310 {1089937481}" -> "$i45 = w {956667011}";
"if $i44 >= len goto $i45 = len - iOffs#310 {1089937481}" -> "$i45 = len - iOffs#310 {950762456}";
"$i45 = w {956667011}" -> "goto [?= endX = $i45] {354353596}";
"goto [?= endX = $i45] {354353596}" -> "endX = $i45 {531324049}";
"$i45 = len - iOffs#310 {950762456}" -> "endX = $i45 {531324049}";
"endX = $i45 {531324049}" -> "x#340 = 0 {1513577837}";
"x#340 = 0 {1513577837}" -> "if x#340 >= endX goto $i72 = this.<kanzi.filter.FastBilateralFilter: int stride> {1254442627}";
"if x#340 >= endX goto $i72 = this.<kanzi.filter.FastBilateralFilter: int stride> {1254442627}" -> "$i46 = iOffs#310 + x#340 {1470529028}";
"if x#340 >= endX goto $i72 = this.<kanzi.filter.FastBilateralFilter: int stride> {1254442627}" -> "$i72 = this.<kanzi.filter.FastBilateralFilter: int stride> {1433209729}";
"$i46 = iOffs#310 + x#340 {1470529028}" -> "$i47 = src[$i46] {806098909}";
"$i47 = src[$i46] {806098909}" -> "$i48 = $i47 >> shift {347643204}";
"$i48 = $i47 >> shift {347643204}" -> "val = $i48 & 255 {273568787}";
"val = $i48 & 255 {273568787}" -> "$i49 = val - min#117 {2004980463}";
"$i49 = val - min#117 {2004980463}" -> "$f22 = (float) $i49 {353218240}";
"$f22 = (float) $i49 {353218240}" -> "kf = $f22 * delta_scale {780744618}";
"kf = $f22 * delta_scale {780744618}" -> "k = (int) kf {1336538921}";
"k = (int) kf {1336538921}" -> "$i50 = grayRangeIdx#216 - 1 {1598420950}";
"$i50 = grayRangeIdx#216 - 1 {1598420950}" -> "if k != $i50 goto (branch) {1044255368}";
"if k != $i50 goto (branch) {1044255368}" -> "$i51 = k + 1 {1942109680}";
"if k != $i50 goto (branch) {1044255368}" -> "if grayRangeIdx#216 != maxGrayIdx goto x#340 = x#340 + 1 {147903995}";
"$i51 = k + 1 {1942109680}" -> "$f23 = (float) $i51 {1025956690}";
"$f23 = (float) $i51 {1025956690}" -> "alpha = $f23 - kf {1335038277}";
"alpha = $f23 - kf {1335038277}" -> "$f24 = (float) x#340 {1892486486}";
"$f24 = (float) x#340 {1892486486}" -> "$f25 = $f24 * shift_inv {1181752698}";
"$f25 = $f24 * shift_inv {1181752698}" -> "xs = staticinvoke <java.lang.Math: float min(float,float)>($f25, maxW) {794130354}";
"xs = staticinvoke <java.lang.Math: float min(float,float)>($f25, maxW) {794130354}" -> "$f26 = staticinvoke <kanzi.filter.FastBilateralFilter: float interpolateLinearXY2(float[],float[],float,float,float,int)>(jk0, jk1, alpha, xs, ys, scaledW) {453750016}";
"$f26 = staticinvoke <kanzi.filter.FastBilateralFilter: float interpolateLinearXY2(float[],float[],float,float,float,int)>(jk0, jk1, alpha, xs, ys, scaledW) {453750016}" -> "val2 = (int) $f26 {1074005181}";
"val2 = (int) $f26 {1074005181}" -> "$i52 = oOffs#312 + x#340 {627373355}";
"$i52 = oOffs#312 + x#340 {627373355}" -> "$i53 = dst[$i52] {867384136}";
"$i53 = dst[$i52] {867384136}" -> "$i54 = 255 << shift {1236164164}";
"$i54 = 255 << shift {1236164164}" -> "$i55 = $i54 ^ -1 {816796938}";
"$i55 = $i54 ^ -1 {816796938}" -> "$i56 = $i53 & $i55 {1976503437}";
"$i56 = $i53 & $i55 {1976503437}" -> "dst[$i52] = $i56 {1311256590}";
"dst[$i52] = $i56 {1311256590}" -> "$i57 = oOffs#312 + x#340 {254416700}";
"$i57 = oOffs#312 + x#340 {254416700}" -> "$i58 = dst[$i57] {1116439970}";
"$i58 = dst[$i57] {1116439970}" -> "$i59 = val2 & 255 {2054166020}";
"$i59 = val2 & 255 {2054166020}" -> "$i60 = $i59 << shift {1189347829}";
"$i60 = $i59 << shift {1189347829}" -> "$i61 = $i58 | $i60 {476294539}";
"$i61 = $i58 | $i60 {476294539}" -> "dst[$i57] = $i61 {1717131317}";
"dst[$i57] = $i61 {1717131317}" -> "goto [?= x#340 = x#340 + 1] {1139219777}";
"goto [?= x#340 = x#340 + 1] {1139219777}" -> "x#340 = x#340 + 1 {1013191766}";
"if grayRangeIdx#216 != maxGrayIdx goto x#340 = x#340 + 1 {147903995}" -> "if k != grayRangeIdx#216 goto x#340 = x#340 + 1 {86559972}";
"if grayRangeIdx#216 != maxGrayIdx goto x#340 = x#340 + 1 {147903995}" -> "x#340 = x#340 + 1 {1013191766}";
"if k != grayRangeIdx#216 goto x#340 = x#340 + 1 {86559972}" -> "$f27 = (float) x#340 {1323239453}";
"if k != grayRangeIdx#216 goto x#340 = x#340 + 1 {86559972}" -> "x#340 = x#340 + 1 {1013191766}";
"$f27 = (float) x#340 {1323239453}" -> "$f28 = $f27 * shift_inv {263612562}";
"$f28 = $f27 * shift_inv {263612562}" -> "xs = staticinvoke <java.lang.Math: float min(float,float)>($f28, maxW) {1493908616}";
"xs = staticinvoke <java.lang.Math: float min(float,float)>($f28, maxW) {1493908616}" -> "$f29 = staticinvoke <kanzi.filter.FastBilateralFilter: float interpolateLinearXY(float[],float,float,int)>(jk1, xs, ys, scaledW) {772614656}";
"$f29 = staticinvoke <kanzi.filter.FastBilateralFilter: float interpolateLinearXY(float[],float,float,int)>(jk1, xs, ys, scaledW) {772614656}" -> "$f30 = $f29 + 0.5F {956839004}";
"$f30 = $f29 + 0.5F {956839004}" -> "val2 = (int) $f30 {2134136140}";
"val2 = (int) $f30 {2134136140}" -> "$i62 = oOffs#312 + x#340 {1319879887}";
"$i62 = oOffs#312 + x#340 {1319879887}" -> "$i63 = dst[$i62] {1291401242}";
"$i63 = dst[$i62] {1291401242}" -> "$i64 = 255 << shift {300616037}";
"$i64 = 255 << shift {300616037}" -> "$i65 = $i64 ^ -1 {1749556070}";
"$i65 = $i64 ^ -1 {1749556070}" -> "$i66 = $i63 & $i65 {37237608}";
"$i66 = $i63 & $i65 {37237608}" -> "dst[$i62] = $i66 {1272029803}";
"dst[$i62] = $i66 {1272029803}" -> "$i67 = oOffs#312 + x#340 {1277622181}";
"$i67 = oOffs#312 + x#340 {1277622181}" -> "$i68 = dst[$i67] {629556845}";
"$i68 = dst[$i67] {629556845}" -> "$i69 = val2 & 255 {206244907}";
"$i69 = val2 & 255 {206244907}" -> "$i70 = $i69 << shift {1976891397}";
"$i70 = $i69 << shift {1976891397}" -> "$i71 = $i68 | $i70 {1058250969}";
"$i71 = $i68 | $i70 {1058250969}" -> "dst[$i67] = $i71 {1802357060}";
"dst[$i67] = $i71 {1802357060}" -> "x#340 = x#340 + 1 {1013191766}";
"x#340 = x#340 + 1 {1013191766}" -> "goto [?= (branch)] {1856161551}";
"goto [?= (branch)] {1856161551}" -> "if x#340 >= endX goto $i72 = this.<kanzi.filter.FastBilateralFilter: int stride> {1254442627}";
"$i72 = this.<kanzi.filter.FastBilateralFilter: int stride> {1433209729}" -> "iOffs#310 = iOffs#310 + $i72 {1279322272}";
"iOffs#310 = iOffs#310 + $i72 {1279322272}" -> "$i73 = this.<kanzi.filter.FastBilateralFilter: int stride> {1467270878}";
"$i73 = this.<kanzi.filter.FastBilateralFilter: int stride> {1467270878}" -> "oOffs#312 = oOffs#312 + $i73 {509273342}";
"oOffs#312 = oOffs#312 + $i73 {509273342}" -> "if iOffs#310 < len goto y#322 = y#322 + 1 {2081360004}";
"if iOffs#310 < len goto y#322 = y#322 + 1 {2081360004}" -> "goto [?= jk_idx1#199 = jk_idx0#197] {893091567}";
"if iOffs#310 < len goto y#322 = y#322 + 1 {2081360004}" -> "y#322 = y#322 + 1 {1881707553}";
"goto [?= jk_idx1#199 = jk_idx0#197] {893091567}" -> "jk_idx1#199 = jk_idx0#197 {896067485}";
"y#322 = y#322 + 1 {1881707553}" -> "goto [?= $i43 = this.<kanzi.filter.FastBilateralFilter: int height>] {1594187329}";
"goto [?= $i43 = this.<kanzi.filter.FastBilateralFilter: int height>] {1594187329}" -> "$i43 = this.<kanzi.filter.FastBilateralFilter: int height> {1003537375}";
"jk_idx1#199 = jk_idx0#197 {896067485}" -> "jk_idx0#197 = 1 - jk_idx1#199 {209791791}";
"jk_idx0#197 = 1 - jk_idx1#199 {209791791}" -> "$r17 = this.<kanzi.filter.FastBilateralFilter: float[][] jk> {1818950784}";
"$r17 = this.<kanzi.filter.FastBilateralFilter: float[][] jk> {1818950784}" -> "jk_#204 = $r17[jk_idx1#199] {2023310733}";
"jk_#204 = $r17[jk_idx1#199] {2023310733}" -> "grayRangeIdx#216 = grayRangeIdx#216 + 1 {1126967522}";
"grayRangeIdx#216 = grayRangeIdx#216 + 1 {1126967522}" -> "goto [?= (branch)] {1924663238}";
"goto [?= (branch)] {1924663238}" -> "if grayRangeIdx#216 > maxGrayIdx goto channel#109 = channel#109 + 1 {1556290058}";
"channel#109 = channel#109 + 1 {720015132}" -> "goto [?= $i22 = this.<kanzi.filter.FastBilateralFilter: int channels>] {409801441}";
"goto [?= $i22 = this.<kanzi.filter.FastBilateralFilter: int channels>] {409801441}" -> "$i22 = this.<kanzi.filter.FastBilateralFilter: int channels> {12618345}";
}

digraph gaussianRecursive {
"image := @parameter0: float[] {1979932078}" -> "temp := @parameter1: float[] {344346007}";
"temp := @parameter1: float[] {344346007}" -> "w := @parameter2: int {190194133}";
"w := @parameter2: int {190194133}" -> "h := @parameter3: int {1773509906}";
"h := @parameter3: int {1773509906}" -> "sigma := @parameter4: float {322337632}";
"sigma := @parameter4: float {322337632}" -> "$b0 = sigma cmpg 0.1F {1755300552}";
"$b0 = sigma cmpg 0.1F {1755300552}" -> "if $b0 >= 0 goto $f0 = sigma {2129328617}";
"if $b0 >= 0 goto $f0 = sigma {2129328617}" -> "$f0 = 0.1F {1711001799}";
"if $b0 >= 0 goto $f0 = sigma {2129328617}" -> "$f0 = sigma {605896386}";
"$f0 = 0.1F {1711001799}" -> "goto [?= nsigma = $f0] {839005128}";
"goto [?= nsigma = $f0] {839005128}" -> "nsigma = $f0 {911686292}";
"$f0 = sigma {605896386}" -> "nsigma = $f0 {911686292}";
"nsigma = $f0 {911686292}" -> "alpha = 1.695F / nsigma {67607587}";
"alpha = 1.695F / nsigma {67607587}" -> "$f1 = neg alpha {143243249}";
"$f1 = neg alpha {143243249}" -> "$d0 = (double) $f1 {1136103931}";
"$d0 = (double) $f1 {1136103931}" -> "$d1 = staticinvoke <java.lang.Math: double exp(double)>($d0) {2070539050}";
"$d1 = staticinvoke <java.lang.Math: double exp(double)>($d0) {2070539050}" -> "ema = (float) $d1 {1267599085}";
"ema = (float) $d1 {1267599085}" -> "$f2 = -2.0F * alpha {580588398}";
"$f2 = -2.0F * alpha {580588398}" -> "$d2 = (double) $f2 {421118142}";
"$d2 = (double) $f2 {421118142}" -> "$d3 = staticinvoke <java.lang.Math: double exp(double)>($d2) {848823676}";
"$d3 = staticinvoke <java.lang.Math: double exp(double)>($d2) {848823676}" -> "ema2 = (float) $d3 {1522394200}";
"ema2 = (float) $d3 {1522394200}" -> "b1 = -2.0F * ema {2039982054}";
"b1 = -2.0F * ema {2039982054}" -> "b2 = ema2 {332388673}";
"b2 = ema2 {332388673}" -> "$f3 = 1.0F - ema {949362649}";
"$f3 = 1.0F - ema {949362649}" -> "$f4 = 1.0F - ema {2105597340}";
"$f4 = 1.0F - ema {2105597340}" -> "$f5 = $f3 * $f4 {1589594739}";
"$f5 = $f3 * $f4 {1589594739}" -> "$f6 = 2.0F * alpha {1068028056}";
"$f6 = 2.0F * alpha {1068028056}" -> "$f7 = $f6 * ema {2121899066}";
"$f7 = $f6 * ema {2121899066}" -> "$f8 = 1.0F + $f7 {2052835842}";
"$f8 = 1.0F + $f7 {2052835842}" -> "$f9 = $f8 - ema2 {224853322}";
"$f9 = $f8 - ema2 {224853322}" -> "k = $f5 / $f9 {1867996397}";
"k = $f5 / $f9 {1867996397}" -> "a0 = k {262515525}";
"a0 = k {262515525}" -> "$f10 = alpha - 1.0F {334813010}";
"$f10 = alpha - 1.0F {334813010}" -> "$f11 = k * $f10 {1218218026}";
"$f11 = k * $f10 {1218218026}" -> "a1 = $f11 * ema {1812610497}";
"a1 = $f11 * ema {1812610497}" -> "$f12 = alpha + 1.0F {1999767895}";
"$f12 = alpha + 1.0F {1999767895}" -> "$f13 = k * $f12 {1373842962}";
"$f13 = k * $f12 {1373842962}" -> "a2 = $f13 * ema {2051308540}";
"a2 = $f13 * ema {2051308540}" -> "$f14 = neg k {1749625120}";
"$f14 = neg k {1749625120}" -> "a3 = $f14 * ema2 {1898794276}";
"a3 = $f14 * ema2 {1898794276}" -> "$f15 = a0 + a1 {189490876}";
"$f15 = a0 + a1 {189490876}" -> "$f16 = 1.0F + b1 {2134496432}";
"$f16 = 1.0F + b1 {2134496432}" -> "$f17 = $f16 + b2 {499476669}";
"$f17 = $f16 + b2 {499476669}" -> "coefp = $f15 / $f17 {882211131}";
"coefp = $f15 / $f17 {882211131}" -> "$f18 = a2 + a3 {1569049690}";
"$f18 = a2 + a3 {1569049690}" -> "$f19 = 1.0F + b1 {1195886900}";
"$f19 = 1.0F + b1 {1195886900}" -> "$f20 = $f19 + b2 {1194693578}";
"$f20 = $f19 + b2 {1194693578}" -> "coefn = $f18 / $f20 {1226942438}";
"coefn = $f18 / $f20 {1226942438}" -> "staticinvoke <kanzi.filter.FastBilateralFilter: void gaussianRecursiveX(float[],float[],int,int,float,float,float,float,float,float,float,float)>(temp, image, w, h, a0, a1, a2, a3, b1, b2, coefp, coefn) {857182945}";
"staticinvoke <kanzi.filter.FastBilateralFilter: void gaussianRecursiveX(float[],float[],int,int,float,float,float,float,float,float,float,float)>(temp, image, w, h, a0, a1, a2, a3, b1, b2, coefp, coefn) {857182945}" -> "staticinvoke <kanzi.filter.FastBilateralFilter: void gaussianRecursiveY(float[],float[],int,int,float,float,float,float,float,float,float,float)>(image, temp, w, h, a0, a1, a2, a3, b1, b2, coefp, coefn) {1860969}";
"staticinvoke <kanzi.filter.FastBilateralFilter: void gaussianRecursiveY(float[],float[],int,int,float,float,float,float,float,float,float,float)>(image, temp, w, h, a0, a1, a2, a3, b1, b2, coefp, coefn) {1860969}" -> "return {2026445618}";
}

digraph gaussianRecursiveX {
"od := @parameter0: float[] {779415114}" -> "id := @parameter1: float[] {1465117198}";
"id := @parameter1: float[] {1465117198}" -> "w := @parameter2: int {981328165}";
"w := @parameter2: int {981328165}" -> "h := @parameter3: int {1289722642}";
"h := @parameter3: int {1289722642}" -> "a0 := @parameter4: float {944773827}";
"a0 := @parameter4: float {944773827}" -> "a1 := @parameter5: float {751248616}";
"a1 := @parameter5: float {751248616}" -> "a2 := @parameter6: float {1958525826}";
"a2 := @parameter6: float {1958525826}" -> "a3 := @parameter7: float {2097107972}";
"a3 := @parameter7: float {2097107972}" -> "b1 := @parameter8: float {820449021}";
"b1 := @parameter8: float {820449021}" -> "b2 := @parameter9: float {157732954}";
"b2 := @parameter9: float {157732954}" -> "coefp := @parameter10: float {376462503}";
"coefp := @parameter10: float {376462503}" -> "coefn := @parameter11: float {1504894369}";
"coefn := @parameter11: float {1504894369}" -> "offs#2 = 0 {1915776871}";
"offs#2 = 0 {1915776871}" -> "y#4 = 0 {1403861894}";
"y#4 = 0 {1403861894}" -> "if y#4 >= h goto return {648941611}";
"if y#4 >= h goto return {648941611}" -> "xp#10 = id[offs#2] {1899525549}";
"if y#4 >= h goto return {648941611}" -> "return {2060436606}";
"xp#10 = id[offs#2] {1899525549}" -> "yb#14 = coefp * xp#10 {615689111}";
"yb#14 = coefp * xp#10 {615689111}" -> "yp#16 = yb#14 {1280393126}";
"yp#16 = yb#14 {1280393126}" -> "x#18 = 0 {2043523564}";
"x#18 = 0 {2043523564}" -> "if x#18 >= w goto $i2 = offs#2 + w {1244828900}";
"if x#18 >= w goto $i2 = offs#2 + w {1244828900}" -> "$i0 = offs#2 + x#18 {934085557}";
"if x#18 >= w goto $i2 = offs#2 + w {1244828900}" -> "$i2 = offs#2 + w {680675252}";
"$i0 = offs#2 + x#18 {934085557}" -> "xc = id[$i0] {1334463515}";
"xc = id[$i0] {1334463515}" -> "$f0 = a0 * xc {2034945707}";
"$f0 = a0 * xc {2034945707}" -> "$f1 = a1 * xp#10 {1304052149}";
"$f1 = a1 * xp#10 {1304052149}" -> "$f2 = $f0 + $f1 {1646981439}";
"$f2 = $f0 + $f1 {1646981439}" -> "$f3 = b1 * yp#16 {5474592}";
"$f3 = b1 * yp#16 {5474592}" -> "$f4 = $f2 - $f3 {902116124}";
"$f4 = $f2 - $f3 {902116124}" -> "$f5 = b2 * yb#14 {874174894}";
"$f5 = b2 * yb#14 {874174894}" -> "yc = $f4 - $f5 {419911045}";
"yc = $f4 - $f5 {419911045}" -> "$i1 = offs#2 + x#18 {923592234}";
"$i1 = offs#2 + x#18 {923592234}" -> "od[$i1] = yc {1899669790}";
"od[$i1] = yc {1899669790}" -> "xp#10 = xc {351572182}";
"xp#10 = xc {351572182}" -> "yb#14 = yp#16 {1620704608}";
"yb#14 = yp#16 {1620704608}" -> "yp#16 = yc {1557160453}";
"yp#16 = yc {1557160453}" -> "x#18 = x#18 + 1 {1724972319}";
"x#18 = x#18 + 1 {1724972319}" -> "goto [?= (branch)] {1234009688}";
"goto [?= (branch)] {1234009688}" -> "if x#18 >= w goto $i2 = offs#2 + w {1244828900}";
"$i2 = offs#2 + w {680675252}" -> "$i3 = $i2 - 1 {189287859}";
"$i3 = $i2 - 1 {189287859}" -> "xn#56 = id[$i3] {1220722626}";
"xn#56 = id[$i3] {1220722626}" -> "xa#58 = xn#56 {294976906}";
"xa#58 = xn#56 {294976906}" -> "yn#62 = coefn * xn#56 {1353991533}";
"yn#62 = coefn * xn#56 {1353991533}" -> "ya#64 = yn#62 {1100799335}";
"ya#64 = yn#62 {1100799335}" -> "x#68 = w - 1 {1439135829}";
"x#68 = w - 1 {1439135829}" -> "if x#68 < 0 goto offs#2 = offs#2 + w {849255867}";
"if x#68 < 0 goto offs#2 = offs#2 + w {849255867}" -> "$i4 = offs#2 + x#68 {942016559}";
"if x#68 < 0 goto offs#2 = offs#2 + w {849255867}" -> "offs#2 = offs#2 + w {1047592718}";
"$i4 = offs#2 + x#68 {942016559}" -> "xc = id[$i4] {1866848982}";
"xc = id[$i4] {1866848982}" -> "$f6 = a2 * xn#56 {170206273}";
"$f6 = a2 * xn#56 {170206273}" -> "$f7 = a3 * xa#58 {281335848}";
"$f7 = a3 * xa#58 {281335848}" -> "$f8 = $f6 + $f7 {870379869}";
"$f8 = $f6 + $f7 {870379869}" -> "$f9 = b1 * yn#62 {2013262959}";
"$f9 = b1 * yn#62 {2013262959}" -> "$f10 = $f8 - $f9 {1134660052}";
"$f10 = $f8 - $f9 {1134660052}" -> "$f11 = b2 * ya#64 {283565493}";
"$f11 = b2 * ya#64 {283565493}" -> "yc = $f10 - $f11 {1906720401}";
"yc = $f10 - $f11 {1906720401}" -> "$i5 = offs#2 + x#68 {1919254160}";
"$i5 = offs#2 + x#68 {1919254160}" -> "$f12 = od[$i5] {1407058413}";
"$f12 = od[$i5] {1407058413}" -> "$f13 = $f12 + yc {1784080921}";
"$f13 = $f12 + yc {1784080921}" -> "od[$i5] = $f13 {1401387237}";
"od[$i5] = $f13 {1401387237}" -> "xa#58 = xn#56 {1556303187}";
"xa#58 = xn#56 {1556303187}" -> "xn#56 = xc {1764778598}";
"xn#56 = xc {1764778598}" -> "ya#64 = yn#62 {1898209900}";
"ya#64 = yn#62 {1898209900}" -> "yn#62 = yc {1495332355}";
"yn#62 = yc {1495332355}" -> "x#68 = x#68 + -1 {910456500}";
"x#68 = x#68 + -1 {910456500}" -> "goto [?= (branch)] {1679901970}";
"goto [?= (branch)] {1679901970}" -> "if x#68 < 0 goto offs#2 = offs#2 + w {849255867}";
"offs#2 = offs#2 + w {1047592718}" -> "y#4 = y#4 + 1 {1315015374}";
"y#4 = y#4 + 1 {1315015374}" -> "goto [?= (branch)] {327151275}";
"goto [?= (branch)] {327151275}" -> "if y#4 >= h goto return {648941611}";
}

digraph gaussianRecursiveY {
"od := @parameter0: float[] {841754940}" -> "id := @parameter1: float[] {1881754604}";
"id := @parameter1: float[] {1881754604}" -> "w := @parameter2: int {1564666637}";
"w := @parameter2: int {1564666637}" -> "h := @parameter3: int {1437784715}";
"h := @parameter3: int {1437784715}" -> "a0 := @parameter4: float {856417624}";
"a0 := @parameter4: float {856417624}" -> "a1 := @parameter5: float {1797139206}";
"a1 := @parameter5: float {1797139206}" -> "a2 := @parameter6: float {632677441}";
"a2 := @parameter6: float {632677441}" -> "a3 := @parameter7: float {1232389789}";
"a3 := @parameter7: float {1232389789}" -> "b1 := @parameter8: float {1297608069}";
"b1 := @parameter8: float {1297608069}" -> "b2 := @parameter9: float {902307596}";
"b2 := @parameter9: float {902307596}" -> "coefp := @parameter10: float {1420708350}";
"coefp := @parameter10: float {1420708350}" -> "coefn := @parameter11: float {1085954214}";
"coefn := @parameter11: float {1085954214}" -> "x#2 = 0 {575596446}";
"x#2 = 0 {575596446}" -> "if x#2 >= w goto return {1142242207}";
"if x#2 >= w goto return {1142242207}" -> "offs#6 = 0 {1981106290}";
"if x#2 >= w goto return {1142242207}" -> "return {918504622}";
"offs#6 = 0 {1981106290}" -> "xp#10 = id[x#2] {63763808}";
"xp#10 = id[x#2] {63763808}" -> "yb#14 = coefp * xp#10 {1385057531}";
"yb#14 = coefp * xp#10 {1385057531}" -> "yp#16 = yb#14 {1272794831}";
"yp#16 = yb#14 {1272794831}" -> "y#18 = 0 {1187798519}";
"y#18 = 0 {1187798519}" -> "if y#18 >= h goto $i2 = h - 1 {606386755}";
"if y#18 >= h goto $i2 = h - 1 {606386755}" -> "$i0 = offs#6 + x#2 {290441680}";
"if y#18 >= h goto $i2 = h - 1 {606386755}" -> "$i2 = h - 1 {1960935104}";
"$i0 = offs#6 + x#2 {290441680}" -> "xc = id[$i0] {1809814372}";
"xc = id[$i0] {1809814372}" -> "$f0 = a0 * xc {2102857967}";
"$f0 = a0 * xc {2102857967}" -> "$f1 = a1 * xp#10 {1714307972}";
"$f1 = a1 * xp#10 {1714307972}" -> "$f2 = $f0 + $f1 {591128518}";
"$f2 = $f0 + $f1 {591128518}" -> "$f3 = b1 * yp#16 {1108780312}";
"$f3 = b1 * yp#16 {1108780312}" -> "$f4 = $f2 - $f3 {1055883083}";
"$f4 = $f2 - $f3 {1055883083}" -> "$f5 = b2 * yb#14 {1082274206}";
"$f5 = b2 * yb#14 {1082274206}" -> "yc = $f4 - $f5 {1464470966}";
"yc = $f4 - $f5 {1464470966}" -> "$i1 = offs#6 + x#2 {1201453474}";
"$i1 = offs#6 + x#2 {1201453474}" -> "od[$i1] = yc {384097240}";
"od[$i1] = yc {384097240}" -> "xp#10 = xc {358026526}";
"xp#10 = xc {358026526}" -> "yb#14 = yp#16 {1136542204}";
"yb#14 = yp#16 {1136542204}" -> "yp#16 = yc {2122793344}";
"yp#16 = yc {2122793344}" -> "offs#6 = offs#6 + w {620503701}";
"offs#6 = offs#6 + w {620503701}" -> "y#18 = y#18 + 1 {129729651}";
"y#18 = y#18 + 1 {129729651}" -> "goto [?= (branch)] {358709151}";
"goto [?= (branch)] {358709151}" -> "if y#18 >= h goto $i2 = h - 1 {606386755}";
"$i2 = h - 1 {1960935104}" -> "offs#57 = $i2 * w {1155234014}";
"offs#57 = $i2 * w {1155234014}" -> "$i3 = offs#57 + x#2 {2141463515}";
"$i3 = offs#57 + x#2 {2141463515}" -> "xn#63 = id[$i3] {180611562}";
"xn#63 = id[$i3] {180611562}" -> "xa#65 = xn#63 {752553671}";
"xa#65 = xn#63 {752553671}" -> "yn#69 = coefn * xn#63 {1539912740}";
"yn#69 = coefn * xn#63 {1539912740}" -> "ya#71 = yn#69 {876292223}";
"ya#71 = yn#69 {876292223}" -> "y#75 = h - 1 {752925520}";
"y#75 = h - 1 {752925520}" -> "if y#75 < 0 goto x#2 = x#2 + 1 {1863845502}";
"if y#75 < 0 goto x#2 = x#2 + 1 {1863845502}" -> "$i4 = offs#57 + x#2 {1340057553}";
"if y#75 < 0 goto x#2 = x#2 + 1 {1863845502}" -> "x#2 = x#2 + 1 {1310620510}";
"$i4 = offs#57 + x#2 {1340057553}" -> "xc = id[$i4] {1167128297}";
"xc = id[$i4] {1167128297}" -> "$f6 = a2 * xn#63 {637109461}";
"$f6 = a2 * xn#63 {637109461}" -> "$f7 = a3 * xa#65 {1955017186}";
"$f7 = a3 * xa#65 {1955017186}" -> "$f8 = $f6 + $f7 {498195595}";
"$f8 = $f6 + $f7 {498195595}" -> "$f9 = b1 * yn#69 {2086861674}";
"$f9 = b1 * yn#69 {2086861674}" -> "$f10 = $f8 - $f9 {1873028585}";
"$f10 = $f8 - $f9 {1873028585}" -> "$f11 = b2 * ya#71 {172481422}";
"$f11 = b2 * ya#71 {172481422}" -> "yc = $f10 - $f11 {787977506}";
"yc = $f10 - $f11 {787977506}" -> "$i5 = offs#57 + x#2 {144761011}";
"$i5 = offs#57 + x#2 {144761011}" -> "$f12 = od[$i5] {65817753}";
"$f12 = od[$i5] {65817753}" -> "$f13 = $f12 + yc {928146073}";
"$f13 = $f12 + yc {928146073}" -> "od[$i5] = $f13 {254436457}";
"od[$i5] = $f13 {254436457}" -> "xa#65 = xn#63 {1430569558}";
"xa#65 = xn#63 {1430569558}" -> "xn#63 = xc {762515372}";
"xn#63 = xc {762515372}" -> "ya#71 = yn#69 {732711751}";
"ya#71 = yn#69 {732711751}" -> "yn#69 = yc {1582788109}";
"yn#69 = yc {1582788109}" -> "offs#57 = offs#57 - w {1793193108}";
"offs#57 = offs#57 - w {1793193108}" -> "y#75 = y#75 + -1 {1458142890}";
"y#75 = y#75 + -1 {1458142890}" -> "goto [?= (branch)] {1594846280}";
"goto [?= (branch)] {1594846280}" -> "if y#75 < 0 goto x#2 = x#2 + 1 {1863845502}";
"x#2 = x#2 + 1 {1310620510}" -> "goto [?= (branch)] {733901661}";
"goto [?= (branch)] {733901661}" -> "if x#2 >= w goto return {1142242207}";
}

digraph interpolateLinearXY2 {
"image1 := @parameter0: float[] {992418979}" -> "image2 := @parameter1: float[] {200026965}";
"image2 := @parameter1: float[] {200026965}" -> "alpha := @parameter2: float {424653809}";
"alpha := @parameter2: float {424653809}" -> "x := @parameter3: float {1579537913}";
"x := @parameter3: float {1579537913}" -> "y := @parameter4: float {1405502416}";
"y := @parameter4: float {1405502416}" -> "w := @parameter5: int {1485562260}";
"w := @parameter5: int {1485562260}" -> "x0 = (int) x {652669925}";
"x0 = (int) x {652669925}" -> "xt = x0 + 1 {310528324}";
"xt = x0 + 1 {310528324}" -> "y0 = (int) y {956787054}";
"y0 = (int) y {956787054}" -> "$f0 = (float) x0 {853230706}";
"$f0 = (float) x0 {853230706}" -> "dx = x - $f0 {1091445628}";
"dx = x - $f0 {1091445628}" -> "$f1 = (float) y0 {232957461}";
"$f1 = (float) y0 {232957461}" -> "dy = y - $f1 {524201006}";
"dy = y - $f1 {524201006}" -> "dx1 = 1.0F - dx {1394690459}";
"dx1 = 1.0F - dx {1394690459}" -> "dy1 = 1.0F - dy {1452287341}";
"dy1 = 1.0F - dy {1452287341}" -> "d00 = dx1 * dy1 {1065837776}";
"d00 = dx1 * dy1 {1065837776}" -> "d0t = dx * dy1 {2121725735}";
"d0t = dx * dy1 {2121725735}" -> "dt0 = dx1 * dy {1684102177}";
"dt0 = dx1 * dy {1684102177}" -> "dtt = dx * dy {131559283}";
"dtt = dx * dy {131559283}" -> "offs0 = y0 * w {1464684515}";
"offs0 = y0 * w {1464684515}" -> "offst = offs0 + w {2128452879}";
"offst = offs0 + w {2128452879}" -> "$i0 = offs0 + x0 {2055895648}";
"$i0 = offs0 + x0 {2055895648}" -> "$f2 = image1[$i0] {1566929415}";
"$f2 = image1[$i0] {1566929415}" -> "$f3 = d00 * $f2 {1164751768}";
"$f3 = d00 * $f2 {1164751768}" -> "$i1 = offs0 + xt {1180039532}";
"$i1 = offs0 + xt {1180039532}" -> "$f4 = image1[$i1] {773799180}";
"$f4 = image1[$i1] {773799180}" -> "$f5 = d0t * $f4 {1651533766}";
"$f5 = d0t * $f4 {1651533766}" -> "$f6 = $f3 + $f5 {214629227}";
"$f6 = $f3 + $f5 {214629227}" -> "$i2 = offst + x0 {36175168}";
"$i2 = offst + x0 {36175168}" -> "$f7 = image1[$i2] {1522396198}";
"$f7 = image1[$i2] {1522396198}" -> "$f8 = dt0 * $f7 {460273694}";
"$f8 = dt0 * $f7 {460273694}" -> "$f9 = $f6 + $f8 {1421620074}";
"$f9 = $f6 + $f8 {1421620074}" -> "$i3 = offst + xt {41231667}";
"$i3 = offst + xt {41231667}" -> "$f10 = image1[$i3] {1988147314}";
"$f10 = image1[$i3] {1988147314}" -> "$f11 = dtt * $f10 {190052371}";
"$f11 = dtt * $f10 {190052371}" -> "res1 = $f9 + $f11 {166512453}";
"res1 = $f9 + $f11 {166512453}" -> "$i4 = offs0 + x0 {577480660}";
"$i4 = offs0 + x0 {577480660}" -> "$f12 = image2[$i4] {1472286274}";
"$f12 = image2[$i4] {1472286274}" -> "$f13 = d00 * $f12 {2002467600}";
"$f13 = d00 * $f12 {2002467600}" -> "$i5 = offs0 + xt {1555281043}";
"$i5 = offs0 + xt {1555281043}" -> "$f14 = image2[$i5] {1343428743}";
"$f14 = image2[$i5] {1343428743}" -> "$f15 = d0t * $f14 {1989218657}";
"$f15 = d0t * $f14 {1989218657}" -> "$f16 = $f13 + $f15 {401573301}";
"$f16 = $f13 + $f15 {401573301}" -> "$i6 = offst + x0 {279865653}";
"$i6 = offst + x0 {279865653}" -> "$f17 = image2[$i6] {1009268830}";
"$f17 = image2[$i6] {1009268830}" -> "$f18 = dt0 * $f17 {1318153721}";
"$f18 = dt0 * $f17 {1318153721}" -> "$f19 = $f16 + $f18 {406446202}";
"$f19 = $f16 + $f18 {406446202}" -> "$i7 = offst + xt {24690514}";
"$i7 = offst + xt {24690514}" -> "$f20 = image2[$i7] {1346403901}";
"$f20 = image2[$i7] {1346403901}" -> "$f21 = dtt * $f20 {503333231}";
"$f21 = dtt * $f20 {503333231}" -> "res2 = $f19 + $f21 {2015878097}";
"res2 = $f19 + $f21 {2015878097}" -> "$f22 = alpha * res1 {352543457}";
"$f22 = alpha * res1 {352543457}" -> "$f23 = 1.0F - alpha {1966459685}";
"$f23 = 1.0F - alpha {1966459685}" -> "$f24 = $f23 * res2 {1324354684}";
"$f24 = $f23 * res2 {1324354684}" -> "$f25 = $f22 + $f24 {588278425}";
"$f25 = $f22 + $f24 {588278425}" -> "return $f25 {2024272189}";
}

digraph interpolateLinearXY {
"image := @parameter0: float[] {276961362}" -> "x := @parameter1: float {981150067}";
"x := @parameter1: float {981150067}" -> "y := @parameter2: float {1592606313}";
"y := @parameter2: float {1592606313}" -> "w := @parameter3: int {1139105718}";
"w := @parameter3: int {1139105718}" -> "x0 = (int) x {1521239649}";
"x0 = (int) x {1521239649}" -> "xt = x0 + 1 {443837515}";
"xt = x0 + 1 {443837515}" -> "y0 = (int) y {1027751434}";
"y0 = (int) y {1027751434}" -> "$f0 = (float) x0 {799758445}";
"$f0 = (float) x0 {799758445}" -> "dx = x - $f0 {508076140}";
"dx = x - $f0 {508076140}" -> "$f1 = (float) y0 {796093822}";
"$f1 = (float) y0 {796093822}" -> "dy = y - $f1 {1900292012}";
"dy = y - $f1 {1900292012}" -> "dx1 = 1.0F - dx {541817104}";
"dx1 = 1.0F - dx {541817104}" -> "dy1 = 1.0F - dy {169302510}";
"dy1 = 1.0F - dy {169302510}" -> "d00 = dx1 * dy1 {1817225718}";
"d00 = dx1 * dy1 {1817225718}" -> "d0t = dx * dy1 {86659283}";
"d0t = dx * dy1 {86659283}" -> "dt0 = dx1 * dy {1065989938}";
"dt0 = dx1 * dy {1065989938}" -> "dtt = dx * dy {1067429637}";
"dtt = dx * dy {1067429637}" -> "offs0 = y0 * w {1060374616}";
"offs0 = y0 * w {1060374616}" -> "offst = offs0 + w {1879593202}";
"offst = offs0 + w {1879593202}" -> "$i0 = offs0 + x0 {993423402}";
"$i0 = offs0 + x0 {993423402}" -> "$f2 = image[$i0] {989800468}";
"$f2 = image[$i0] {989800468}" -> "$f3 = d00 * $f2 {1807061235}";
"$f3 = d00 * $f2 {1807061235}" -> "$i1 = offs0 + xt {1281293178}";
"$i1 = offs0 + xt {1281293178}" -> "$f4 = image[$i1] {1396719238}";
"$f4 = image[$i1] {1396719238}" -> "$f5 = d0t * $f4 {577577114}";
"$f5 = d0t * $f4 {577577114}" -> "$f6 = $f3 + $f5 {593040434}";
"$f6 = $f3 + $f5 {593040434}" -> "$i2 = offst + x0 {1325571988}";
"$i2 = offst + x0 {1325571988}" -> "$f7 = image[$i2] {234740879}";
"$f7 = image[$i2] {234740879}" -> "$f8 = dt0 * $f7 {276722849}";
"$f8 = dt0 * $f7 {276722849}" -> "$f9 = $f6 + $f8 {2105197633}";
"$f9 = $f6 + $f8 {2105197633}" -> "$i3 = offst + xt {1396548168}";
"$i3 = offst + xt {1396548168}" -> "$f10 = image[$i3] {1005427585}";
"$f10 = image[$i3] {1005427585}" -> "$f11 = dtt * $f10 {1977093068}";
"$f11 = dtt * $f10 {1977093068}" -> "$f12 = $f9 + $f11 {204149753}";
"$f12 = $f9 + $f11 {204149753}" -> "return $f12 {842715094}";
}


