    public void dispose()
    {
        kanzi.entropy.HuffmanDecoder this;

        this := @this: kanzi.entropy.HuffmanDecoder;

        return;
    }

    public void <init>(kanzi.InputBitStream) throws kanzi.BitStreamException
    {
        kanzi.entropy.HuffmanDecoder this;
        kanzi.InputBitStream bitstream;

        this := @this: kanzi.entropy.HuffmanDecoder;

        bitstream := @parameter0: kanzi.InputBitStream;

        specialinvoke this.<kanzi.entropy.HuffmanDecoder: void <init>(kanzi.InputBitStream,int)>(bitstream, 65536);

        return;
    }

    public void <init>(kanzi.InputBitStream, int) throws kanzi.BitStreamException
    {
        kanzi.entropy.HuffmanDecoder this;
        kanzi.InputBitStream bitstream;
        int chunkSize, i#42;
        java.lang.NullPointerException $r0;
        java.lang.IllegalArgumentException $r1, $r2;
        short[] $r3, $r9;
        int[] $r4, $r5, $r6, $r7, $r8, $r10;

        this := @this: kanzi.entropy.HuffmanDecoder;

        bitstream := @parameter0: kanzi.InputBitStream;

        chunkSize := @parameter1: int;

        specialinvoke this.<java.lang.Object: void <init>()>();

        if bitstream != null goto label1;

        $r0 = new java.lang.NullPointerException;

        specialinvoke $r0.<java.lang.NullPointerException: void <init>(java.lang.String)>("Invalid null bitstream parameter");

        throw $r0;

     label1:
        if chunkSize == 0 goto label2;

        if chunkSize >= 1024 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The chunk size must be at least 1024");

        throw $r1;

     label2:
        if chunkSize <= 1073741824 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The chunk size must be at most 2^30");

        throw $r2;

     label3:
        this.<kanzi.entropy.HuffmanDecoder: kanzi.InputBitStream bitstream> = bitstream;

        $r3 = newarray (short)[256];

        this.<kanzi.entropy.HuffmanDecoder: short[] sizes> = $r3;

        $r4 = newarray (int)[256];

        this.<kanzi.entropy.HuffmanDecoder: int[] ranks> = $r4;

        $r5 = newarray (int)[256];

        this.<kanzi.entropy.HuffmanDecoder: int[] codes> = $r5;

        $r6 = newarray (int)[4096];

        this.<kanzi.entropy.HuffmanDecoder: int[] fdTable> = $r6;

        $r7 = newarray (int)[256];

        this.<kanzi.entropy.HuffmanDecoder: int[] sdTable> = $r7;

        $r8 = newarray (int)[25];

        this.<kanzi.entropy.HuffmanDecoder: int[] sdtIndexes> = $r8;

        this.<kanzi.entropy.HuffmanDecoder: int chunkSize> = chunkSize;

        this.<kanzi.entropy.HuffmanDecoder: int minCodeLen> = 8;

        i#42 = 0;

     label4:
        if i#42 >= 256 goto label5;

        $r9 = this.<kanzi.entropy.HuffmanDecoder: short[] sizes>;

        $r9[i#42] = 8;

        $r10 = this.<kanzi.entropy.HuffmanDecoder: int[] codes>;

        $r10[i#42] = i#42;

        i#42 = i#42 + 1;

        goto label4;

     label5:
        return;
    }

    public int decode(byte[], int, int)
    {
        kanzi.entropy.HuffmanDecoder this;
        byte[] array;
        int blkptr, len, sz, end, endChunk, endChunk1, $i0, $i1, $i2, $i3, $i4, startChunk#20, $i5, $i6, $i7, endPaddingSize#35, $i8, $i9, $i10, $i11, $i12, i#54, $i14, $i16, $i18, $i20, $i22, $i24, $i26;
        byte $b13, $b15, $b17, $b19, $b21, $b23, $b25, $b27, $b28;

        this := @this: kanzi.entropy.HuffmanDecoder;

        array := @parameter0: byte[];

        blkptr := @parameter1: int;

        len := @parameter2: int;

        if array == null goto label01;

        $i0 = blkptr + len;

        $i1 = lengthof array;

        if $i0 > $i1 goto label01;

        if blkptr < 0 goto label01;

        if len >= 0 goto label02;

     label01:
        return -1;

     label02:
        if len != 0 goto label03;

        return 0;

     label03:
        $i2 = this.<kanzi.entropy.HuffmanDecoder: int minCodeLen>;

        if $i2 != 0 goto label04;

        return -1;

     label04:
        $i3 = this.<kanzi.entropy.HuffmanDecoder: int chunkSize>;

        if $i3 != 0 goto label05;

        $i4 = len;

        goto label06;

     label05:
        $i4 = this.<kanzi.entropy.HuffmanDecoder: int chunkSize>;

     label06:
        sz = $i4;

        startChunk#20 = blkptr;

        end = blkptr + len;

     label07:
        if startChunk#20 >= end goto label15;

        $i5 = virtualinvoke this.<kanzi.entropy.HuffmanDecoder: int readLengths()>();

        if $i5 > 0 goto label08;

        $i6 = startChunk#20 - blkptr;

        return $i6;

     label08:
        $i7 = this.<kanzi.entropy.HuffmanDecoder: int minCodeLen>;

        endPaddingSize#35 = 64 / $i7;

        $i8 = this.<kanzi.entropy.HuffmanDecoder: int minCodeLen>;

        $i9 = $i8 * endPaddingSize#35;

        if $i9 == 64 goto label09;

        endPaddingSize#35 = endPaddingSize#35 + 1;

     label09:
        $i10 = startChunk#20 + sz;

        if $i10 >= end goto label10;

        $i11 = startChunk#20 + sz;

        goto label11;

     label10:
        $i11 = end;

     label11:
        endChunk = $i11;

        $i12 = endChunk - endPaddingSize#35;

        endChunk1 = $i12 & -8;

        i#54 = startChunk#20;

     label12:
        if i#54 >= endChunk1 goto label13;

        $b13 = specialinvoke this.<kanzi.entropy.HuffmanDecoder: byte fastDecodeByte()>();

        array[i#54] = $b13;

        $i14 = i#54 + 1;

        $b15 = specialinvoke this.<kanzi.entropy.HuffmanDecoder: byte fastDecodeByte()>();

        array[$i14] = $b15;

        $i16 = i#54 + 2;

        $b17 = specialinvoke this.<kanzi.entropy.HuffmanDecoder: byte fastDecodeByte()>();

        array[$i16] = $b17;

        $i18 = i#54 + 3;

        $b19 = specialinvoke this.<kanzi.entropy.HuffmanDecoder: byte fastDecodeByte()>();

        array[$i18] = $b19;

        $i20 = i#54 + 4;

        $b21 = specialinvoke this.<kanzi.entropy.HuffmanDecoder: byte fastDecodeByte()>();

        array[$i20] = $b21;

        $i22 = i#54 + 5;

        $b23 = specialinvoke this.<kanzi.entropy.HuffmanDecoder: byte fastDecodeByte()>();

        array[$i22] = $b23;

        $i24 = i#54 + 6;

        $b25 = specialinvoke this.<kanzi.entropy.HuffmanDecoder: byte fastDecodeByte()>();

        array[$i24] = $b25;

        $i26 = i#54 + 7;

        $b27 = specialinvoke this.<kanzi.entropy.HuffmanDecoder: byte fastDecodeByte()>();

        array[$i26] = $b27;

        i#54 = i#54 + 8;

        goto label12;

     label13:
        if i#54 >= endChunk goto label14;

        $b28 = specialinvoke this.<kanzi.entropy.HuffmanDecoder: byte slowDecodeByte(int,int)>(0, 0);

        array[i#54] = $b28;

        i#54 = i#54 + 1;

        goto label13;

     label14:
        startChunk#20 = endChunk;

        goto label07;

     label15:
        return len;
    }

    public int readLengths() throws kanzi.BitStreamException
    {
        kanzi.entropy.HuffmanDecoder this;
        int count, r, currSize, prevSize#14, i#16, $i0, $i2, $i4;
        kanzi.entropy.ExpGolombDecoder egdec, $r2;
        kanzi.InputBitStream $r0, $r3;
        int[] $r1, $r4, $r5, $r11, $r28, $r29;
        kanzi.BitStreamException $r6, $r12, $r19, $r30;
        java.lang.StringBuilder $r7, $r8, $r9, $r13, $r14, $r15, $r16, $r17, $r20, $r21, $r22, $r23, $r24;
        java.lang.String $r10, $r18, $r25;
        byte $b1;
        short[] $r26, $r27;
        short $s3;

        this := @this: kanzi.entropy.HuffmanDecoder;

        $r0 = this.<kanzi.entropy.HuffmanDecoder: kanzi.InputBitStream bitstream>;

        $r1 = this.<kanzi.entropy.HuffmanDecoder: int[] ranks>;

        count = staticinvoke <kanzi.entropy.EntropyUtils: int decodeAlphabet(kanzi.InputBitStream,int[])>($r0, $r1);

        $r2 = new kanzi.entropy.ExpGolombDecoder;

        $r3 = this.<kanzi.entropy.HuffmanDecoder: kanzi.InputBitStream bitstream>;

        specialinvoke $r2.<kanzi.entropy.ExpGolombDecoder: void <init>(kanzi.InputBitStream,boolean)>($r3, 1);

        egdec = $r2;

        this.<kanzi.entropy.HuffmanDecoder: int minCodeLen> = 24;

        prevSize#14 = 2;

        i#16 = 0;

     label1:
        if i#16 >= count goto label7;

        $r4 = this.<kanzi.entropy.HuffmanDecoder: int[] ranks>;

        r = $r4[i#16];

        if r < 0 goto label2;

        $r5 = this.<kanzi.entropy.HuffmanDecoder: int[] codes>;

        $i0 = lengthof $r5;

        if r < $i0 goto label3;

     label2:
        $r6 = new kanzi.BitStreamException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid bitstream: incorrect Huffman symbol ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(r);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<kanzi.BitStreamException: void <init>(java.lang.String,int)>($r10, 3);

        throw $r6;

     label3:
        $r11 = this.<kanzi.entropy.HuffmanDecoder: int[] codes>;

        $r11[r] = 0;

        $b1 = virtualinvoke egdec.<kanzi.entropy.ExpGolombDecoder: byte decodeByte()>();

        currSize = prevSize#14 + $b1;

        if currSize > 0 goto label4;

        $r12 = new kanzi.BitStreamException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid bitstream: incorrect size ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(currSize);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for Huffman symbol ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(r);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<kanzi.BitStreamException: void <init>(java.lang.String,int)>($r18, 3);

        throw $r12;

     label4:
        if currSize <= 24 goto label5;

        $r19 = new kanzi.BitStreamException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid bitstream: incorrect max size ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(currSize);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for Huffman symbol ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(r);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<kanzi.BitStreamException: void <init>(java.lang.String,int)>($r25, 3);

        throw $r19;

     label5:
        $i2 = this.<kanzi.entropy.HuffmanDecoder: int minCodeLen>;

        if $i2 <= currSize goto label6;

        this.<kanzi.entropy.HuffmanDecoder: int minCodeLen> = currSize;

     label6:
        $r26 = this.<kanzi.entropy.HuffmanDecoder: short[] sizes>;

        $s3 = (short) currSize;

        $r26[r] = $s3;

        prevSize#14 = currSize;

        i#16 = i#16 + 1;

        goto label1;

     label7:
        if count != 0 goto label8;

        return 0;

     label8:
        $r27 = this.<kanzi.entropy.HuffmanDecoder: short[] sizes>;

        $r28 = this.<kanzi.entropy.HuffmanDecoder: int[] codes>;

        $r29 = this.<kanzi.entropy.HuffmanDecoder: int[] ranks>;

        $i4 = staticinvoke <kanzi.entropy.HuffmanCommon: int generateCanonicalCodes(short[],int[],int[],int)>($r27, $r28, $r29, count);

        if $i4 >= 0 goto label9;

        $r30 = new kanzi.BitStreamException;

        specialinvoke $r30.<kanzi.BitStreamException: void <init>(java.lang.String,int)>("Could not generate codes: max code length (24 bits) exceeded", 3);

        throw $r30;

     label9:
        specialinvoke this.<kanzi.entropy.HuffmanDecoder: void buildDecodingTables(int)>(count);

        return count;
    }

    private void buildDecodingTables(int)
    {
        kanzi.entropy.HuffmanDecoder this;
        int count, r, code, val, $i0, i#6, $i1, i#17, $i2, i#28, i#37, $i4, $i6, $i7, idx#82, $i8, $i9, end#90, $i10, $i11;
        int[] $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r10, $r12, $r13;
        short len#35, $s3, $s5;
        short[] $r8, $r9, $r11;

        this := @this: kanzi.entropy.HuffmanDecoder;

        count := @parameter0: int;

        $r0 = this.<kanzi.entropy.HuffmanDecoder: int[] fdTable>;

        $i0 = lengthof $r0;

        i#6 = $i0 - 1;

     label01:
        if i#6 < 0 goto label02;

        $r1 = this.<kanzi.entropy.HuffmanDecoder: int[] fdTable>;

        $r1[i#6] = 0;

        i#6 = i#6 + -1;

        goto label01;

     label02:
        $r2 = this.<kanzi.entropy.HuffmanDecoder: int[] sdTable>;

        $i1 = lengthof $r2;

        i#17 = $i1 - 1;

     label03:
        if i#17 < 0 goto label04;

        $r3 = this.<kanzi.entropy.HuffmanDecoder: int[] sdTable>;

        $r3[i#17] = 0;

        i#17 = i#17 + -1;

        goto label03;

     label04:
        $r4 = this.<kanzi.entropy.HuffmanDecoder: int[] sdtIndexes>;

        $i2 = lengthof $r4;

        i#28 = $i2 - 1;

     label05:
        if i#28 < 0 goto label06;

        $r5 = this.<kanzi.entropy.HuffmanDecoder: int[] sdtIndexes>;

        $r5[i#28] = 2147483647;

        i#28 = i#28 + -1;

        goto label05;

     label06:
        len#35 = 0;

        i#37 = 0;

     label07:
        if i#37 >= count goto label12;

        $r6 = this.<kanzi.entropy.HuffmanDecoder: int[] ranks>;

        r = $r6[i#37];

        $r7 = this.<kanzi.entropy.HuffmanDecoder: int[] codes>;

        code = $r7[r];

        $r8 = this.<kanzi.entropy.HuffmanDecoder: short[] sizes>;

        $s3 = $r8[r];

        if $s3 <= len#35 goto label08;

        $r9 = this.<kanzi.entropy.HuffmanDecoder: short[] sizes>;

        len#35 = $r9[r];

        $r10 = this.<kanzi.entropy.HuffmanDecoder: int[] sdtIndexes>;

        $i4 = i#37 - code;

        $r10[len#35] = $i4;

     label08:
        $r11 = this.<kanzi.entropy.HuffmanDecoder: short[] sizes>;

        $s5 = $r11[r];

        $i6 = $s5 << 8;

        val = $i6 | r;

        $r12 = this.<kanzi.entropy.HuffmanDecoder: int[] sdTable>;

        $r12[i#37] = val;

        if len#35 >= 12 goto label09;

        $i7 = 12 - len#35;

        idx#82 = code << $i7;

        $i8 = 12 - len#35;

        $i9 = 1 << $i8;

        end#90 = idx#82 + $i9;

        goto label10;

     label09:
        $i10 = len#35 - 12;

        idx#82 = code >>> $i10;

        end#90 = idx#82 + 1;

     label10:
        if idx#82 >= end#90 goto label11;

        $r13 = this.<kanzi.entropy.HuffmanDecoder: int[] fdTable>;

        $i11 = idx#82;

        idx#82 = idx#82 + 1;

        $r13[$i11] = val;

        goto label10;

     label11:
        i#37 = i#37 + 1;

        goto label07;

     label12:
        return;
    }

    private byte fastDecodeByte()
    {
        kanzi.entropy.HuffmanDecoder this;
        long read, mask, $l6, $l7, $l10, $l11, $l12, $l15;
        int idx, val, $i0, $i1, $i2, $i3, $i4, $i5, $i8, $i9, $i13, $i14, $i16, $i17, $i18, $i20, $i21, $i22;
        kanzi.InputBitStream $r0;
        int[] $r1;
        byte $b19, $b23;

        this := @this: kanzi.entropy.HuffmanDecoder;

        $i0 = this.<kanzi.entropy.HuffmanDecoder: int bits>;

        if $i0 >= 12 goto label1;

        $r0 = this.<kanzi.entropy.HuffmanDecoder: kanzi.InputBitStream bitstream>;

        $i1 = this.<kanzi.entropy.HuffmanDecoder: int bits>;

        $i2 = 64 - $i1;

        read = interfaceinvoke $r0.<kanzi.InputBitStream: long readBits(int)>($i2);

        $i3 = this.<kanzi.entropy.HuffmanDecoder: int bits>;

        $i4 = 1 << $i3;

        $i5 = $i4 - 1;

        mask = (long) $i5;

        $l6 = this.<kanzi.entropy.HuffmanDecoder: long state>;

        $l7 = $l6 & mask;

        $i8 = this.<kanzi.entropy.HuffmanDecoder: int bits>;

        $i9 = neg $i8;

        $l10 = $l7 << $i9;

        $l11 = $l10 | read;

        this.<kanzi.entropy.HuffmanDecoder: long state> = $l11;

        this.<kanzi.entropy.HuffmanDecoder: int bits> = 64;

     label1:
        $l12 = this.<kanzi.entropy.HuffmanDecoder: long state>;

        $i13 = this.<kanzi.entropy.HuffmanDecoder: int bits>;

        $i14 = $i13 - 12;

        $l15 = $l12 >>> $i14;

        $i16 = (int) $l15;

        idx = $i16 & 4095;

        $r1 = this.<kanzi.entropy.HuffmanDecoder: int[] fdTable>;

        val = $r1[idx];

        if val <= 3327 goto label2;

        $i17 = this.<kanzi.entropy.HuffmanDecoder: int bits>;

        $i18 = $i17 - 12;

        this.<kanzi.entropy.HuffmanDecoder: int bits> = $i18;

        $b19 = specialinvoke this.<kanzi.entropy.HuffmanDecoder: byte slowDecodeByte(int,int)>(idx, 12);

        return $b19;

     label2:
        $i20 = this.<kanzi.entropy.HuffmanDecoder: int bits>;

        $i21 = val >>> 8;

        $i22 = $i20 - $i21;

        this.<kanzi.entropy.HuffmanDecoder: int bits> = $i22;

        $b23 = (byte) val;

        return $b23;
    }

    private byte slowDecodeByte(int, int)
    {
        kanzi.entropy.HuffmanDecoder this;
        int idx, code#1, codeLen#2, code#8, $i0, $i1, $i2, $i3, $i6, $i10, $i11, $i12, $i13, $i14;
        kanzi.InputBitStream $r0;
        long $l4, $l5, $l7, $l8, $l9;
        int[] $r2, $r3, $r4;
        byte $b15;
        kanzi.BitStreamException $r5;

        this := @this: kanzi.entropy.HuffmanDecoder;

        code#1 := @parameter0: int;

        codeLen#2 := @parameter1: int;

     label1:
        if codeLen#2 >= 24 goto label6;

        codeLen#2 = codeLen#2 + 1;

        code#8 = code#1 << 1;

        $i0 = this.<kanzi.entropy.HuffmanDecoder: int bits>;

        if $i0 != 0 goto label2;

        $r0 = this.<kanzi.entropy.HuffmanDecoder: kanzi.InputBitStream bitstream>;

        $i1 = interfaceinvoke $r0.<kanzi.InputBitStream: int readBit()>();

        code#1 = code#8 | $i1;

        goto label3;

     label2:
        $i2 = this.<kanzi.entropy.HuffmanDecoder: int bits>;

        $i3 = $i2 - 1;

        this.<kanzi.entropy.HuffmanDecoder: int bits> = $i3;

        $l4 = (long) code#8;

        $l5 = this.<kanzi.entropy.HuffmanDecoder: long state>;

        $i6 = this.<kanzi.entropy.HuffmanDecoder: int bits>;

        $l7 = $l5 >>> $i6;

        $l8 = $l7 & 1L;

        $l9 = $l4 | $l8;

        code#1 = (int) $l9;

     label3:
        $r2 = this.<kanzi.entropy.HuffmanDecoder: int[] sdtIndexes>;

        idx = $r2[codeLen#2];

        if idx != 2147483647 goto label4;

        goto label1;

     label4:
        $r3 = this.<kanzi.entropy.HuffmanDecoder: int[] sdTable>;

        $i10 = idx + code#1;

        $i11 = $r3[$i10];

        $i12 = $i11 >>> 8;

        if $i12 != codeLen#2 goto label5;

        $r4 = this.<kanzi.entropy.HuffmanDecoder: int[] sdTable>;

        $i13 = idx + code#1;

        $i14 = $r4[$i13];

        $b15 = (byte) $i14;

        return $b15;

     label5:
        goto label1;

     label6:
        $r5 = new kanzi.BitStreamException;

        specialinvoke $r5.<kanzi.BitStreamException: void <init>(java.lang.String,int)>("Invalid bitstream: incorrect Huffman code", 3);

        throw $r5;
    }


