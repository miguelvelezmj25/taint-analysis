    public static weka.core.pmml.PMMLModel getPMMLModel(java.lang.String) throws java.lang.Exception
    {
        java.lang.String filename;
        weka.core.pmml.PMMLModel $r0;

        filename := @parameter0: java.lang.String;

        $r0 = staticinvoke <weka.core.pmml.PMMLFactory: weka.core.pmml.PMMLModel getPMMLModel(java.lang.String,weka.gui.Logger)>(filename, null);

        return $r0;
    }

    public static weka.core.pmml.PMMLModel getPMMLModel(java.lang.String, weka.gui.Logger) throws java.lang.Exception
    {
        java.lang.String filename;
        weka.gui.Logger log;
        java.io.File $r0;
        weka.core.pmml.PMMLModel $r1;

        filename := @parameter0: java.lang.String;

        log := @parameter1: weka.gui.Logger;

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(filename);

        $r1 = staticinvoke <weka.core.pmml.PMMLFactory: weka.core.pmml.PMMLModel getPMMLModel(java.io.File,weka.gui.Logger)>($r0, log);

        return $r1;
    }

    public static weka.core.pmml.PMMLModel getPMMLModel(java.io.File, weka.gui.Logger) throws java.lang.Exception
    {
        java.io.File file;
        weka.gui.Logger log;
        java.io.FileInputStream $r0;
        java.io.BufferedInputStream $r1;
        weka.core.pmml.PMMLModel $r2;

        file := @parameter0: java.io.File;

        log := @parameter1: weka.gui.Logger;

        $r1 = new java.io.BufferedInputStream;

        $r0 = new java.io.FileInputStream;

        specialinvoke $r0.<java.io.FileInputStream: void <init>(java.io.File)>(file);

        specialinvoke $r1.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r0);

        $r2 = staticinvoke <weka.core.pmml.PMMLFactory: weka.core.pmml.PMMLModel getPMMLModel(java.io.InputStream,weka.gui.Logger)>($r1, log);

        return $r2;
    }

    public static weka.core.pmml.PMMLModel getPMMLModel(java.io.InputStream, weka.gui.Logger) throws java.lang.Exception
    {
        java.io.InputStream stream;
        weka.gui.Logger log;
        javax.xml.parsers.DocumentBuilderFactory dbf;
        javax.xml.parsers.DocumentBuilder db;
        org.w3c.dom.Document doc;
        weka.core.Instances dataDictionary;
        weka.core.pmml.TransformationDictionary transDict;
        weka.core.pmml.PMMLFactory$ModelType modelType, $r2;
        org.w3c.dom.Element model, $r0;
        weka.core.pmml.MiningSchema ms, $r4;
        weka.core.pmml.PMMLModel theModel;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;
        java.lang.Exception $r3;

        stream := @parameter0: java.io.InputStream;

        log := @parameter1: weka.gui.Logger;

        dbf = staticinvoke <javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>();

        db = virtualinvoke dbf.<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>();

        doc = virtualinvoke db.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.io.InputStream)>(stream);

        virtualinvoke stream.<java.io.InputStream: void close()>();

        $r0 = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        interfaceinvoke $r0.<org.w3c.dom.Element: void normalize()>();

        $z0 = staticinvoke <weka.core.pmml.PMMLFactory: boolean isPMML(org.w3c.dom.Document)>(doc);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("[PMMLFactory] Source is not a PMML file!!");

        throw $r1;

     label1:
        dataDictionary = staticinvoke <weka.core.pmml.PMMLFactory: weka.core.Instances getDataDictionaryAsInstances(org.w3c.dom.Document)>(doc);

        transDict = staticinvoke <weka.core.pmml.PMMLFactory: weka.core.pmml.TransformationDictionary getTransformationDictionary(org.w3c.dom.Document,weka.core.Instances)>(doc, dataDictionary);

        modelType = staticinvoke <weka.core.pmml.PMMLFactory: weka.core.pmml.PMMLFactory$ModelType getModelType(org.w3c.dom.Document)>(doc);

        $r2 = <weka.core.pmml.PMMLFactory$ModelType: weka.core.pmml.PMMLFactory$ModelType UNKNOWN_MODEL>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(modelType);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        if modelType != $r2 goto label2;

        $r3 = new java.lang.Exception;

        specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String)>("Unsupported PMML model type");

        throw $r3;

     label2:
        model = staticinvoke <weka.core.pmml.PMMLFactory: org.w3c.dom.Element getModelElement(org.w3c.dom.Document,weka.core.pmml.PMMLFactory$ModelType)>(doc, modelType);

        $r4 = new weka.core.pmml.MiningSchema;

        specialinvoke $r4.<weka.core.pmml.MiningSchema: void <init>(org.w3c.dom.Element,weka.core.Instances,weka.core.pmml.TransformationDictionary)>(model, dataDictionary, transDict);

        ms = $r4;

        theModel = staticinvoke <weka.core.pmml.PMMLFactory: weka.core.pmml.PMMLModel getModelInstance(org.w3c.dom.Document,weka.core.pmml.PMMLFactory$ModelType,org.w3c.dom.Element,weka.core.Instances,weka.core.pmml.MiningSchema)>(doc, modelType, model, dataDictionary, ms);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(log);

        if log == null goto label3;

        interfaceinvoke theModel.<weka.core.pmml.PMMLModel: void setLog(weka.gui.Logger)>(log);

     label3:
        return theModel;
    }

    protected static weka.core.pmml.PMMLModel getModelInstance(org.w3c.dom.Document, weka.core.pmml.PMMLFactory$ModelType, org.w3c.dom.Element, weka.core.Instances, weka.core.pmml.MiningSchema) throws java.lang.Exception
    {
        org.w3c.dom.Document doc;
        weka.core.pmml.PMMLFactory$ModelType modelType;
        org.w3c.dom.Element model;
        weka.core.Instances dataDictionary;
        weka.core.pmml.MiningSchema miningSchema;
        int[] $r0;
        int $i0, $i1;
        weka.classifiers.pmml.consumer.Regression $r1;
        weka.classifiers.pmml.consumer.PMMLClassifier pmmlM#12;
        weka.classifiers.pmml.consumer.GeneralRegression $r2;
        weka.classifiers.pmml.consumer.NeuralNetwork $r3;
        weka.classifiers.pmml.consumer.TreeModel $r4;
        weka.classifiers.pmml.consumer.RuleSetModel $r5;
        weka.classifiers.pmml.consumer.SupportVectorMachineModel $r6;
        java.lang.Exception $r7;

        doc := @parameter0: org.w3c.dom.Document;

        modelType := @parameter1: weka.core.pmml.PMMLFactory$ModelType;

        model := @parameter2: org.w3c.dom.Element;

        dataDictionary := @parameter3: weka.core.Instances;

        miningSchema := @parameter4: weka.core.pmml.MiningSchema;

        $r0 = <weka.core.pmml.PMMLFactory$1: int[] $SwitchMap$weka$core$pmml$PMMLFactory$ModelType>;

        $i0 = virtualinvoke modelType.<weka.core.pmml.PMMLFactory$ModelType: int ordinal()>();

        $i1 = $r0[$i0];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            case 6: goto label6;
            default: goto label7;
        };

     label1:
        $r1 = new weka.classifiers.pmml.consumer.Regression;

        specialinvoke $r1.<weka.classifiers.pmml.consumer.Regression: void <init>(org.w3c.dom.Element,weka.core.Instances,weka.core.pmml.MiningSchema)>(model, dataDictionary, miningSchema);

        pmmlM#12 = $r1;

        goto label8;

     label2:
        $r2 = new weka.classifiers.pmml.consumer.GeneralRegression;

        specialinvoke $r2.<weka.classifiers.pmml.consumer.GeneralRegression: void <init>(org.w3c.dom.Element,weka.core.Instances,weka.core.pmml.MiningSchema)>(model, dataDictionary, miningSchema);

        pmmlM#12 = $r2;

        goto label8;

     label3:
        $r3 = new weka.classifiers.pmml.consumer.NeuralNetwork;

        specialinvoke $r3.<weka.classifiers.pmml.consumer.NeuralNetwork: void <init>(org.w3c.dom.Element,weka.core.Instances,weka.core.pmml.MiningSchema)>(model, dataDictionary, miningSchema);

        pmmlM#12 = $r3;

        goto label8;

     label4:
        $r4 = new weka.classifiers.pmml.consumer.TreeModel;

        specialinvoke $r4.<weka.classifiers.pmml.consumer.TreeModel: void <init>(org.w3c.dom.Element,weka.core.Instances,weka.core.pmml.MiningSchema)>(model, dataDictionary, miningSchema);

        pmmlM#12 = $r4;

        goto label8;

     label5:
        $r5 = new weka.classifiers.pmml.consumer.RuleSetModel;

        specialinvoke $r5.<weka.classifiers.pmml.consumer.RuleSetModel: void <init>(org.w3c.dom.Element,weka.core.Instances,weka.core.pmml.MiningSchema)>(model, dataDictionary, miningSchema);

        pmmlM#12 = $r5;

        goto label8;

     label6:
        $r6 = new weka.classifiers.pmml.consumer.SupportVectorMachineModel;

        specialinvoke $r6.<weka.classifiers.pmml.consumer.SupportVectorMachineModel: void <init>(org.w3c.dom.Element,weka.core.Instances,weka.core.pmml.MiningSchema)>(model, dataDictionary, miningSchema);

        pmmlM#12 = $r6;

        goto label8;

     label7:
        $r7 = new java.lang.Exception;

        specialinvoke $r7.<java.lang.Exception: void <init>(java.lang.String)>("[PMMLFactory] Unknown model type!!");

        throw $r7;

     label8:
        interfaceinvoke pmmlM#12.<weka.core.pmml.PMMLModel: void setPMMLVersion(org.w3c.dom.Document)>(doc);

        interfaceinvoke pmmlM#12.<weka.core.pmml.PMMLModel: void setCreatorApplication(org.w3c.dom.Document)>(doc);

        return pmmlM#12;
    }

    protected static org.w3c.dom.Element getModelElement(org.w3c.dom.Document, weka.core.pmml.PMMLFactory$ModelType) throws java.lang.Exception
    {
        org.w3c.dom.Document doc;
        weka.core.pmml.PMMLFactory$ModelType modelType;
        org.w3c.dom.Node modelNode;
        org.w3c.dom.Element model#4;
        int[] $r0;
        int $i0, $i1, $i2;
        org.w3c.dom.NodeList temp#12;
        java.lang.Exception $r1;
        short $s3;

        doc := @parameter0: org.w3c.dom.Document;

        modelType := @parameter1: weka.core.pmml.PMMLFactory$ModelType;

        model#4 = null;

        $r0 = <weka.core.pmml.PMMLFactory$1: int[] $SwitchMap$weka$core$pmml$PMMLFactory$ModelType>;

        $i0 = virtualinvoke modelType.<weka.core.pmml.PMMLFactory$ModelType: int ordinal()>();

        $i1 = $r0[$i0];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            case 6: goto label6;
            default: goto label7;
        };

     label1:
        temp#12 = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("RegressionModel");

        goto label8;

     label2:
        temp#12 = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("GeneralRegressionModel");

        goto label8;

     label3:
        temp#12 = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("NeuralNetwork");

        goto label8;

     label4:
        temp#12 = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("TreeModel");

        goto label8;

     label5:
        temp#12 = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("RuleSetModel");

        goto label8;

     label6:
        temp#12 = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("SupportVectorMachineModel");

        goto label8;

     label7:
        $r1 = new java.lang.Exception;

        specialinvoke $r1.<java.lang.Exception: void <init>(java.lang.String)>("[PMMLFactory] unknown/unsupported model type.");

        throw $r1;

     label8:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(temp#12);

        if temp#12 == null goto label9;

        $i2 = interfaceinvoke temp#12.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 <= 0 goto label9;

        modelNode = interfaceinvoke temp#12.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        $s3 = interfaceinvoke modelNode.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s3);

        if $s3 != 1 goto label9;

        model#4 = (org.w3c.dom.Element) modelNode;

     label9:
        return model#4;
    }

    protected static weka.core.pmml.PMMLFactory$ModelType getModelType(org.w3c.dom.Document)
    {
        org.w3c.dom.Document doc;
        org.w3c.dom.NodeList temp#4, temp#11, temp#18, temp#25, temp#32, temp#39;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        weka.core.pmml.PMMLFactory$ModelType $r0, $r1, $r2, $r3, $r4, $r5, $r6;

        doc := @parameter0: org.w3c.dom.Document;

        temp#4 = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("RegressionModel");

        $i0 = interfaceinvoke temp#4.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label1;

        $r0 = <weka.core.pmml.PMMLFactory$ModelType: weka.core.pmml.PMMLFactory$ModelType REGRESSION_MODEL>;

        return $r0;

     label1:
        temp#11 = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("GeneralRegressionModel");

        $i1 = interfaceinvoke temp#11.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 0 goto label2;

        $r1 = <weka.core.pmml.PMMLFactory$ModelType: weka.core.pmml.PMMLFactory$ModelType GENERAL_REGRESSION_MODEL>;

        return $r1;

     label2:
        temp#18 = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("NeuralNetwork");

        $i2 = interfaceinvoke temp#18.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 <= 0 goto label3;

        $r2 = <weka.core.pmml.PMMLFactory$ModelType: weka.core.pmml.PMMLFactory$ModelType NEURAL_NETWORK_MODEL>;

        return $r2;

     label3:
        temp#25 = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("TreeModel");

        $i3 = interfaceinvoke temp#25.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 <= 0 goto label4;

        $r3 = <weka.core.pmml.PMMLFactory$ModelType: weka.core.pmml.PMMLFactory$ModelType TREE_MODEL>;

        return $r3;

     label4:
        temp#32 = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("RuleSetModel");

        $i4 = interfaceinvoke temp#32.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 <= 0 goto label5;

        $r4 = <weka.core.pmml.PMMLFactory$ModelType: weka.core.pmml.PMMLFactory$ModelType RULESET_MODEL>;

        return $r4;

     label5:
        temp#39 = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("SupportVectorMachineModel");

        $i5 = interfaceinvoke temp#39.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i5 <= 0 goto label6;

        $r5 = <weka.core.pmml.PMMLFactory$ModelType: weka.core.pmml.PMMLFactory$ModelType SVM_MODEL>;

        return $r5;

     label6:
        $r6 = <weka.core.pmml.PMMLFactory$ModelType: weka.core.pmml.PMMLFactory$ModelType UNKNOWN_MODEL>;

        return $r6;
    }

    protected static weka.core.pmml.TransformationDictionary getTransformationDictionary(org.w3c.dom.Document, weka.core.Instances) throws java.lang.Exception
    {
        org.w3c.dom.Document doc;
        weka.core.Instances dataDictionary;
        org.w3c.dom.NodeList transL;
        org.w3c.dom.Node transNode;
        weka.core.pmml.TransformationDictionary transDict#2, $r0;
        int $i0;
        short $s1;
        org.w3c.dom.Element $r1;

        doc := @parameter0: org.w3c.dom.Document;

        dataDictionary := @parameter1: weka.core.Instances;

        transDict#2 = null;

        transL = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("TransformationDictionary");

        $i0 = interfaceinvoke transL.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label1;

        transNode = interfaceinvoke transL.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        $s1 = interfaceinvoke transNode.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s1);

        if $s1 != 1 goto label1;

        $r0 = new weka.core.pmml.TransformationDictionary;

        $r1 = (org.w3c.dom.Element) transNode;

        specialinvoke $r0.<weka.core.pmml.TransformationDictionary: void <init>(org.w3c.dom.Element,weka.core.Instances)>($r1, dataDictionary);

        transDict#2 = $r0;

     label1:
        return transDict#2;
    }

    protected static weka.core.Instances getDataDictionaryAsInstances(org.w3c.dom.Document) throws java.lang.Exception
    {
        org.w3c.dom.Document doc;
        java.util.ArrayList attInfo, valueVector, $r0, $r3;
        org.w3c.dom.NodeList dataDictionary, valueList;
        org.w3c.dom.Node dataField, val;
        org.w3c.dom.Element dataFieldEl, $r4, $r5;
        java.lang.String name, type, property, value, $r12;
        weka.core.Instances insts, $r13;
        int i#7, $i0, $i2, j#56, $i3, $i5;
        short $s1, $s4;
        boolean $z0, $z1, $z2, $z3;
        weka.core.Attribute $r1, tempAtt#35, $r2, $r6;
        java.lang.Exception $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;

        doc := @parameter0: org.w3c.dom.Document;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        attInfo = $r0;

        dataDictionary = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("DataField");

        i#7 = 0;

     label01:
        $i0 = interfaceinvoke dataDictionary.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#7 >= $i0 goto label14;

        dataField = interfaceinvoke dataDictionary.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i#7);

        $s1 = interfaceinvoke dataField.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s1);

        if $s1 != 1 goto label13;

        dataFieldEl = (org.w3c.dom.Element) dataField;

        name = interfaceinvoke dataFieldEl.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("name");

        type = interfaceinvoke dataFieldEl.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("optype");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(name);

        if name == null goto label13;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(type);

        if type == null goto label13;

        $z0 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("continuous");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label02;

        $r1 = new weka.core.Attribute;

        specialinvoke $r1.<weka.core.Attribute: void <init>(java.lang.String)>(name);

        tempAtt#35 = $r1;

        goto label12;

     label02:
        $z1 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("categorical");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label03;

        $z2 = virtualinvoke type.<java.lang.String: boolean equals(java.lang.Object)>("ordinal");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label11;

     label03:
        valueList = interfaceinvoke dataFieldEl.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("Value");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(valueList);

        if valueList == null goto label04;

        $i2 = interfaceinvoke valueList.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 != 0 goto label05;

     label04:
        $r2 = new weka.core.Attribute;

        specialinvoke $r2.<weka.core.Attribute: void <init>(java.lang.String,java.util.List)>(name, null);

        tempAtt#35 = $r2;

        goto label10;

     label05:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        valueVector = $r3;

        j#56 = 0;

     label06:
        $i3 = interfaceinvoke valueList.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#56);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if j#56 >= $i3 goto label09;

        val = interfaceinvoke valueList.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(j#56);

        $s4 = interfaceinvoke val.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s4);

        if $s4 != 1 goto label08;

        $r4 = (org.w3c.dom.Element) val;

        property = interfaceinvoke $r4.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("property");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(property);

        if property == null goto label07;

        $i5 = virtualinvoke property.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i5 == 0 goto label07;

        $z3 = virtualinvoke property.<java.lang.String: boolean equals(java.lang.Object)>("valid");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label08;

     label07:
        $r5 = (org.w3c.dom.Element) val;

        value = interfaceinvoke $r5.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("value");

        virtualinvoke valueVector.<java.util.ArrayList: boolean add(java.lang.Object)>(value);

     label08:
        j#56 = j#56 + 1;

        goto label06;

     label09:
        $r6 = new weka.core.Attribute;

        specialinvoke $r6.<weka.core.Attribute: void <init>(java.lang.String,java.util.List)>(name, valueVector);

        tempAtt#35 = $r6;

     label10:
        goto label12;

     label11:
        $r7 = new java.lang.Exception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[PMMLFactory] can\'t handle ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(type);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("attributes.");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.Exception: void <init>(java.lang.String)>($r12);

        throw $r7;

     label12:
        virtualinvoke attInfo.<java.util.ArrayList: boolean add(java.lang.Object)>(tempAtt#35);

     label13:
        i#7 = i#7 + 1;

        goto label01;

     label14:
        $r13 = new weka.core.Instances;

        specialinvoke $r13.<weka.core.Instances: void <init>(java.lang.String,java.util.ArrayList,int)>("dataDictionary", attInfo, 0);

        insts = $r13;

        return insts;
    }

    private static boolean isPMML(org.w3c.dom.Document)
    {
        org.w3c.dom.Document doc;
        org.w3c.dom.NodeList tempL;
        int $i0;

        doc := @parameter0: org.w3c.dom.Document;

        tempL = interfaceinvoke doc.<org.w3c.dom.Document: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("PMML");

        $i0 = interfaceinvoke tempL.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }


