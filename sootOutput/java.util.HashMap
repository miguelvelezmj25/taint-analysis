    public void <init>()
    {
        java.util.HashMap l0;

        l0 := @this: java.util.HashMap;

        specialinvoke l0.<java.util.AbstractMap: void <init>()>();

        l0.<java.util.HashMap: float loadFactor> = 0.75F;

        return;
    }

    public void <init>(int)
    {
        java.util.HashMap l0;
        int l1;

        l0 := @this: java.util.HashMap;

        l1 := @parameter0: int;

        specialinvoke l0.<java.util.HashMap: void <init>(int,float)>(l1, 0.75F);

        return;
    }

    public void <init>(int, float)
    {
        java.util.HashMap l0;
        float l2;
        int l1#1, $i1;
        java.lang.IllegalArgumentException $r0, $r5;
        java.lang.StringBuilder $r1, $r2, $r3, $r6, $r7, $r8;
        java.lang.String $r4, $r9;
        byte $b0;
        boolean $z0;

        l0 := @this: java.util.HashMap;

        l1#1 := @parameter0: int;

        l2 := @parameter1: float;

        specialinvoke l0.<java.util.AbstractMap: void <init>()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l1#1);

        if l1#1 >= 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal initial capacity: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l1#1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l1#1);

        if l1#1 <= 1073741824 goto label2;

        l1#1 = 1073741824;

     label2:
        $b0 = l2 cmpg 0.0F;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 <= 0 goto label3;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(l2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label4;

     label3:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal load factor: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(l2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label4:
        l0.<java.util.HashMap: float loadFactor> = l2;

        $i1 = staticinvoke <java.util.HashMap: int tableSizeFor(int)>(l1#1);

        l0.<java.util.HashMap: int threshold> = $i1;

        return;
    }

    static final int tableSizeFor(int)
    {
        int l0, l1#4, $i0, l1#10, $i1, l1#16, $i2, l1#22, $i3, l1#28, $i4, l1#34, $i5;

        l0 := @parameter0: int;

        l1#4 = l0 - 1;

        $i0 = l1#4 >>> 1;

        l1#10 = l1#4 | $i0;

        $i1 = l1#10 >>> 2;

        l1#16 = l1#10 | $i1;

        $i2 = l1#16 >>> 4;

        l1#22 = l1#16 | $i2;

        $i3 = l1#22 >>> 8;

        l1#28 = l1#22 | $i3;

        $i4 = l1#28 >>> 16;

        l1#34 = l1#28 | $i4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l1#34);

        if l1#34 >= 0 goto label1;

        $i5 = 1;

        goto label3;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l1#34);

        if l1#34 < 1073741824 goto label2;

        $i5 = 1073741824;

        goto label3;

     label2:
        $i5 = l1#34 + 1;

     label3:
        return $i5;
    }


