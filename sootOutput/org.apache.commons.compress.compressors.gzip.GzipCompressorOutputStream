    public void <init>(java.io.OutputStream, org.apache.commons.compress.compressors.gzip.GzipParameters) throws java.io.IOException
    {
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream this;
        java.io.OutputStream out;
        org.apache.commons.compress.compressors.gzip.GzipParameters parameters;
        byte[] $r0;
        java.util.zip.CRC32 $r1;
        java.util.zip.Deflater $r2;
        int $i0;

        this := @this: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;

        out := @parameter0: java.io.OutputStream;

        parameters := @parameter1: org.apache.commons.compress.compressors.gzip.GzipParameters;

        specialinvoke this.<org.apache.commons.compress.compressors.CompressorOutputStream: void <init>()>();

        $r0 = newarray (byte)[512];

        this.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: byte[] deflateBuffer> = $r0;

        $r1 = new java.util.zip.CRC32;

        specialinvoke $r1.<java.util.zip.CRC32: void <init>()>();

        this.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: java.util.zip.CRC32 crc> = $r1;

        this.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: java.io.OutputStream out> = out;

        $r2 = new java.util.zip.Deflater;

        $i0 = virtualinvoke parameters.<org.apache.commons.compress.compressors.gzip.GzipParameters: int getCompressionLevel()>();

        specialinvoke $r2.<java.util.zip.Deflater: void <init>(int,boolean)>($i0, 1);

        this.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: java.util.zip.Deflater deflater> = $r2;

        specialinvoke this.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: void writeHeader(org.apache.commons.compress.compressors.gzip.GzipParameters)>(parameters);

        return;
    }

    private void writeHeader(org.apache.commons.compress.compressors.gzip.GzipParameters) throws java.io.IOException
    {
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream this;
        org.apache.commons.compress.compressors.gzip.GzipParameters parameters;
        java.lang.String filename, comment;
        java.nio.ByteBuffer buffer;
        int compressionLevel, $i6, $i7;
        java.nio.ByteOrder $r0;
        byte $b0, $b1, $b2, $b3, $b8;
        long $l4, $l5;
        java.io.OutputStream $r11, $r13, $r15, $r16, $r18;
        byte[] $r12, $r14, $r17;

        this := @this: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;

        parameters := @parameter0: org.apache.commons.compress.compressors.gzip.GzipParameters;

        filename = virtualinvoke parameters.<org.apache.commons.compress.compressors.gzip.GzipParameters: java.lang.String getFilename()>();

        comment = virtualinvoke parameters.<org.apache.commons.compress.compressors.gzip.GzipParameters: java.lang.String getComment()>();

        buffer = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(10);

        $r0 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        virtualinvoke buffer.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r0);

        virtualinvoke buffer.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>(-29921);

        virtualinvoke buffer.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(filename);

        if filename == null goto label1;

        $b0 = 8;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(comment);

        if comment == null goto label3;

        $b1 = 16;

        goto label4;

     label3:
        $b1 = 0;

     label4:
        $b2 = $b0 | $b1;

        $b3 = (byte) $b2;

        virtualinvoke buffer.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b3);

        $l4 = virtualinvoke parameters.<org.apache.commons.compress.compressors.gzip.GzipParameters: long getModificationTime()>();

        $l5 = $l4 / 1000L;

        $i6 = (int) $l5;

        virtualinvoke buffer.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i6);

        compressionLevel = virtualinvoke parameters.<org.apache.commons.compress.compressors.gzip.GzipParameters: int getCompressionLevel()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(compressionLevel);

        if compressionLevel != 9 goto label5;

        virtualinvoke buffer.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(2);

        goto label7;

     label5:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(compressionLevel);

        if compressionLevel != 1 goto label6;

        virtualinvoke buffer.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(4);

        goto label7;

     label6:
        virtualinvoke buffer.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(0);

     label7:
        $i7 = virtualinvoke parameters.<org.apache.commons.compress.compressors.gzip.GzipParameters: int getOperatingSystem()>();

        $b8 = (byte) $i7;

        virtualinvoke buffer.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b8);

        $r11 = this.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: java.io.OutputStream out>;

        $r12 = virtualinvoke buffer.<java.nio.ByteBuffer: byte[] array()>();

        virtualinvoke $r11.<java.io.OutputStream: void write(byte[])>($r12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(filename);

        if filename == null goto label8;

        $r13 = this.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: java.io.OutputStream out>;

        $r14 = virtualinvoke filename.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        virtualinvoke $r13.<java.io.OutputStream: void write(byte[])>($r14);

        $r15 = this.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: java.io.OutputStream out>;

        virtualinvoke $r15.<java.io.OutputStream: void write(int)>(0);

     label8:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(comment);

        if comment == null goto label9;

        $r16 = this.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: java.io.OutputStream out>;

        $r17 = virtualinvoke comment.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        virtualinvoke $r16.<java.io.OutputStream: void write(byte[])>($r17);

        $r18 = this.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: java.io.OutputStream out>;

        virtualinvoke $r18.<java.io.OutputStream: void write(int)>(0);

     label9:
        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream this;
        byte[] buffer;
        int offset, length;
        java.util.zip.Deflater $r0, $r2, $r3;
        boolean $z0, $z1;
        java.io.IOException $r1;
        java.util.zip.CRC32 $r4;

        this := @this: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;

        buffer := @parameter0: byte[];

        offset := @parameter1: int;

        length := @parameter2: int;

        $r0 = this.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: java.util.zip.Deflater deflater>;

        $z0 = virtualinvoke $r0.<java.util.zip.Deflater: boolean finished()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Cannot write more data, the end of the compressed data stream has been reached");

        throw $r1;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(length);

        if length <= 0 goto label4;

        $r2 = this.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: java.util.zip.Deflater deflater>;

        virtualinvoke $r2.<java.util.zip.Deflater: void setInput(byte[],int,int)>(buffer, offset, length);

     label2:
        $r3 = this.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: java.util.zip.Deflater deflater>;

        $z1 = virtualinvoke $r3.<java.util.zip.Deflater: boolean needsInput()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label3;

        specialinvoke this.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: void deflate()>();

        goto label2;

     label3:
        $r4 = this.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: java.util.zip.CRC32 crc>;

        virtualinvoke $r4.<java.util.zip.CRC32: void update(byte[],int,int)>(buffer, offset, length);

     label4:
        return;
    }

    private void deflate() throws java.io.IOException
    {
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream this;
        int length, $i0;
        java.util.zip.Deflater $r0;
        byte[] $r1, $r2, $r4;
        java.io.OutputStream $r3;

        this := @this: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;

        $r0 = this.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: java.util.zip.Deflater deflater>;

        $r1 = this.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: byte[] deflateBuffer>;

        $r2 = this.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: byte[] deflateBuffer>;

        $i0 = lengthof $r2;

        length = virtualinvoke $r0.<java.util.zip.Deflater: int deflate(byte[],int,int)>($r1, 0, $i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(length);

        if length <= 0 goto label1;

        $r3 = this.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: java.io.OutputStream out>;

        $r4 = this.<org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream: byte[] deflateBuffer>;

        virtualinvoke $r3.<java.io.OutputStream: void write(byte[],int,int)>($r4, 0, length);

     label1:
        return;
    }


