    static void <clinit>()
    {
        int[] $r0, $r1, $r2, $r3;

        $r0 = newarray (int)[29];

        $r0[0] = 3;

        $r0[1] = 4;

        $r0[2] = 5;

        $r0[3] = 6;

        $r0[4] = 7;

        $r0[5] = 8;

        $r0[6] = 9;

        $r0[7] = 10;

        $r0[8] = 11;

        $r0[9] = 13;

        $r0[10] = 15;

        $r0[11] = 17;

        $r0[12] = 19;

        $r0[13] = 23;

        $r0[14] = 27;

        $r0[15] = 31;

        $r0[16] = 35;

        $r0[17] = 43;

        $r0[18] = 51;

        $r0[19] = 59;

        $r0[20] = 67;

        $r0[21] = 83;

        $r0[22] = 99;

        $r0[23] = 115;

        $r0[24] = 131;

        $r0[25] = 163;

        $r0[26] = 195;

        $r0[27] = 227;

        $r0[28] = 258;

        <edu.cmu.cs.mvelezce.zip.zipme.Inflater: int[] CPLENS> = $r0;

        $r1 = newarray (int)[29];

        $r1[0] = 0;

        $r1[1] = 0;

        $r1[2] = 0;

        $r1[3] = 0;

        $r1[4] = 0;

        $r1[5] = 0;

        $r1[6] = 0;

        $r1[7] = 0;

        $r1[8] = 1;

        $r1[9] = 1;

        $r1[10] = 1;

        $r1[11] = 1;

        $r1[12] = 2;

        $r1[13] = 2;

        $r1[14] = 2;

        $r1[15] = 2;

        $r1[16] = 3;

        $r1[17] = 3;

        $r1[18] = 3;

        $r1[19] = 3;

        $r1[20] = 4;

        $r1[21] = 4;

        $r1[22] = 4;

        $r1[23] = 4;

        $r1[24] = 5;

        $r1[25] = 5;

        $r1[26] = 5;

        $r1[27] = 5;

        $r1[28] = 0;

        <edu.cmu.cs.mvelezce.zip.zipme.Inflater: int[] CPLEXT> = $r1;

        $r2 = newarray (int)[30];

        $r2[0] = 1;

        $r2[1] = 2;

        $r2[2] = 3;

        $r2[3] = 4;

        $r2[4] = 5;

        $r2[5] = 7;

        $r2[6] = 9;

        $r2[7] = 13;

        $r2[8] = 17;

        $r2[9] = 25;

        $r2[10] = 33;

        $r2[11] = 49;

        $r2[12] = 65;

        $r2[13] = 97;

        $r2[14] = 129;

        $r2[15] = 193;

        $r2[16] = 257;

        $r2[17] = 385;

        $r2[18] = 513;

        $r2[19] = 769;

        $r2[20] = 1025;

        $r2[21] = 1537;

        $r2[22] = 2049;

        $r2[23] = 3073;

        $r2[24] = 4097;

        $r2[25] = 6145;

        $r2[26] = 8193;

        $r2[27] = 12289;

        $r2[28] = 16385;

        $r2[29] = 24577;

        <edu.cmu.cs.mvelezce.zip.zipme.Inflater: int[] CPDIST> = $r2;

        $r3 = newarray (int)[30];

        $r3[0] = 0;

        $r3[1] = 0;

        $r3[2] = 0;

        $r3[3] = 0;

        $r3[4] = 1;

        $r3[5] = 1;

        $r3[6] = 2;

        $r3[7] = 2;

        $r3[8] = 3;

        $r3[9] = 3;

        $r3[10] = 4;

        $r3[11] = 4;

        $r3[12] = 5;

        $r3[13] = 5;

        $r3[14] = 6;

        $r3[15] = 6;

        $r3[16] = 7;

        $r3[17] = 7;

        $r3[18] = 8;

        $r3[19] = 8;

        $r3[20] = 9;

        $r3[21] = 9;

        $r3[22] = 10;

        $r3[23] = 10;

        $r3[24] = 11;

        $r3[25] = 11;

        $r3[26] = 12;

        $r3[27] = 12;

        $r3[28] = 13;

        $r3[29] = 13;

        <edu.cmu.cs.mvelezce.zip.zipme.Inflater: int[] CPDEXT> = $r3;

        return;
    }

    public void <init>(boolean)
    {
        edu.cmu.cs.mvelezce.zip.zipme.Inflater this;
        boolean nowrap;
        edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator $r0;
        edu.cmu.cs.mvelezce.zip.zipme.OutputWindow $r1;
        byte $b0;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Inflater;

        nowrap := @parameter0: boolean;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: boolean nowrap> = nowrap;

        virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: void hook32()>();

        $r0 = new edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator;

        specialinvoke $r0.<edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator: void <init>()>();

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator input> = $r0;

        $r1 = new edu.cmu.cs.mvelezce.zip.zipme.OutputWindow;

        specialinvoke $r1.<edu.cmu.cs.mvelezce.zip.zipme.OutputWindow: void <init>()>();

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.OutputWindow outputWindow> = $r1;

        if nowrap == 0 goto label1;

        $b0 = 2;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int mode> = $b0;

        return;
    }

    protected void hook32()
    {
        edu.cmu.cs.mvelezce.zip.zipme.Inflater this;
        boolean $z0, $z1;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Inflater;

        $z0 = <edu.cmu.cs.mvelezce.zip.ZipMain: boolean FEATUREAdlerThreeTwoChecksum>;

        $z1 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z0);

        if $z1 == 0 goto label1;

        virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: void hook32__role__Adler32Checksum()>();

        goto label2;

     label1:
        virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: void hook32__before__Adler32Checksum()>();

     label2:
        return;
    }

    protected void hook32__role__Adler32Checksum()
    {
        edu.cmu.cs.mvelezce.zip.zipme.Inflater this;
        edu.cmu.cs.mvelezce.zip.zipme.Adler32 $r0;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Inflater;

        $r0 = new edu.cmu.cs.mvelezce.zip.zipme.Adler32;

        specialinvoke $r0.<edu.cmu.cs.mvelezce.zip.zipme.Adler32: void <init>()>();

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.Adler32 adler> = $r0;

        virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: void hook32__before__Adler32Checksum()>();

        return;
    }

    protected void hook32__before__Adler32Checksum()
    {
        edu.cmu.cs.mvelezce.zip.zipme.Inflater this;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Inflater;

        return;
    }

    public int getTotalOut()
    {
        edu.cmu.cs.mvelezce.zip.zipme.Inflater this;
        long $l0;
        int $i1;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Inflater;

        $l0 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: long totalOut>;

        $i1 = (int) $l0;

        return $i1;
    }

    public int getRemaining()
    {
        edu.cmu.cs.mvelezce.zip.zipme.Inflater this;
        edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator $r0;
        int $i0;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Inflater;

        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator input>;

        $i0 = virtualinvoke $r0.<edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator: int getAvailableBytes()>();

        return $i0;
    }

    public boolean finished()
    {
        edu.cmu.cs.mvelezce.zip.zipme.Inflater this;
        int $i0, $i1;
        edu.cmu.cs.mvelezce.zip.zipme.OutputWindow $r0;
        boolean $z0;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Inflater;

        $i0 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int mode>;

        if $i0 != 12 goto label1;

        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.OutputWindow outputWindow>;

        $i1 = virtualinvoke $r0.<edu.cmu.cs.mvelezce.zip.zipme.OutputWindow: int getAvailable()>();

        if $i1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setInput(byte[], int, int)
    {
        edu.cmu.cs.mvelezce.zip.zipme.Inflater this;
        byte[] buf;
        int off, len;
        edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator $r0;
        long $l0, $l1, $l2;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Inflater;

        buf := @parameter0: byte[];

        off := @parameter1: int;

        len := @parameter2: int;

        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator input>;

        virtualinvoke $r0.<edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator: void setInput(byte[],int,int)>(buf, off, len);

        $l0 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: long totalIn>;

        $l1 = (long) len;

        $l2 = $l0 + $l1;

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: long totalIn> = $l2;

        return;
    }

    public boolean needsInput()
    {
        edu.cmu.cs.mvelezce.zip.zipme.Inflater this;
        edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator $r0;
        boolean $z0;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Inflater;

        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator input>;

        $z0 = virtualinvoke $r0.<edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator: boolean needsInput()>();

        return $z0;
    }

    public boolean needsDictionary()
    {
        edu.cmu.cs.mvelezce.zip.zipme.Inflater this;
        int $i0, $i1;
        boolean $z0;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Inflater;

        $i0 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int mode>;

        if $i0 != 1 goto label1;

        $i1 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int neededBits>;

        if $i1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int inflate(byte[], int, int) throws edu.cmu.cs.mvelezce.zip.zipme.DataFormatException
    {
        edu.cmu.cs.mvelezce.zip.zipme.Inflater this;
        byte[] buf;
        int more, off#1, len#2, $i0, $i1, $i2, count#23, $i3, $i7, $i8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.ArrayIndexOutOfBoundsException $r0;
        edu.cmu.cs.mvelezce.zip.zipme.OutputWindow $r1, $r3;
        long $l4, $l5, $l6;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Inflater;

        buf := @parameter0: byte[];

        off#1 := @parameter1: int;

        len#2 := @parameter2: int;

        if len#2 != 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        $z1 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z0);

        if $z1 == 0 goto label03;

        return 0;

     label03:
        if 0 > off#1 goto label04;

        $i0 = off#1 + len#2;

        if off#1 > $i0 goto label04;

        $i1 = off#1 + len#2;

        $i2 = lengthof buf;

        if $i1 <= $i2 goto label05;

     label04:
        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        $z3 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z2);

        if $z3 == 0 goto label07;

        $r0 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r0;

     label07:
        count#23 = 0;

     label08:
        $i3 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int mode>;

        if $i3 == 11 goto label09;

        $z4 = 1;

        goto label10;

     label09:
        $z4 = 0;

     label10:
        $z5 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z4);

        if $z5 == 0 goto label13;

        $r1 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.OutputWindow outputWindow>;

        more = virtualinvoke $r1.<edu.cmu.cs.mvelezce.zip.zipme.OutputWindow: int copyOutput(byte[],int,int)>(buf, off#1, len#2);

        virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: void hook33(byte[],int,int)>(buf, off#1, more);

        off#1 = off#1 + more;

        count#23 = count#23 + more;

        $l4 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: long totalOut>;

        $l5 = (long) more;

        $l6 = $l4 + $l5;

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: long totalOut> = $l6;

        len#2 = len#2 - more;

        if len#2 != 0 goto label11;

        $z6 = 1;

        goto label12;

     label11:
        $z6 = 0;

     label12:
        $z7 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z6);

        if $z7 == 0 goto label13;

        return count#23;

     label13:
        $z8 = specialinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: boolean decode()>();

        if $z8 != 0 goto label08;

        $r3 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.OutputWindow outputWindow>;

        $i7 = virtualinvoke $r3.<edu.cmu.cs.mvelezce.zip.zipme.OutputWindow: int getAvailable()>();

        if $i7 <= 0 goto label14;

        $i8 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int mode>;

        if $i8 != 11 goto label08;

     label14:
        return count#23;
    }

    protected void hook33(byte[], int, int) throws edu.cmu.cs.mvelezce.zip.zipme.DataFormatException
    {
        edu.cmu.cs.mvelezce.zip.zipme.Inflater this;
        byte[] buf;
        int off, more;
        boolean $z0, $z1;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Inflater;

        buf := @parameter0: byte[];

        off := @parameter1: int;

        more := @parameter2: int;

        $z0 = <edu.cmu.cs.mvelezce.zip.ZipMain: boolean FEATUREAdlerThreeTwoChecksum>;

        $z1 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z0);

        if $z1 == 0 goto label1;

        virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: void hook33__role__Adler32Checksum(byte[],int,int)>(buf, off, more);

        goto label2;

     label1:
        virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: void hook33__before__Adler32Checksum(byte[],int,int)>(buf, off, more);

     label2:
        return;
    }

    private boolean decode() throws edu.cmu.cs.mvelezce.zip.zipme.DataFormatException
    {
        edu.cmu.cs.mvelezce.zip.zipme.Inflater this;
        int type, nlen, more, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24;
        edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator $r0, $r1, $r2, $r3, $r12, $r13, $r14, $r15, $r18, $r20, $r22;
        edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree $r4, $r5, $r24, $r26;
        edu.cmu.cs.mvelezce.zip.zipme.InflaterDynHeader $r6, $r21, $r23, $r25;
        edu.cmu.cs.mvelezce.zip.zipme.DataFormatException $r7, $r16;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.String $r11;
        edu.cmu.cs.mvelezce.zip.zipme.OutputWindow $r17;
        java.lang.IllegalStateException $r27;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Inflater;

        $i0 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int mode>;

        tableswitch($i0)
        {
            case 0: goto label01;
            case 1: goto label02;
            case 2: goto label04;
            case 3: goto label18;
            case 4: goto label22;
            case 5: goto label29;
            case 6: goto label35;
            case 7: goto label39;
            case 8: goto label39;
            case 9: goto label39;
            case 10: goto label39;
            case 11: goto label03;
            case 12: goto label40;
            default: goto label41;
        };

     label01:
        $z0 = specialinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: boolean decodeHeader()>();

        return $z0;

     label02:
        $z1 = specialinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: boolean decodeDict()>();

        return $z1;

     label03:
        $z2 = specialinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: boolean decodeChksum()>();

        return $z2;

     label04:
        $z3 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: boolean isLastBlock>;

        $z4 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z3);

        if $z4 == 0 goto label06;

        $z5 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: boolean nowrap>;

        $z6 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z5);

        if $z6 == 0 goto label05;

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int mode> = 12;

        return 0;

     label05:
        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator input>;

        virtualinvoke $r0.<edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator: void skipToByteBoundary()>();

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int neededBits> = 32;

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int mode> = 11;

        return 1;

     label06:
        $r1 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator input>;

        type = virtualinvoke $r1.<edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator: int peekBits(int)>(3);

        if type >= 0 goto label07;

        $z7 = 1;

        goto label08;

     label07:
        $z7 = 0;

     label08:
        $z8 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z7);

        if $z8 == 0 goto label09;

        return 0;

     label09:
        $r2 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator input>;

        virtualinvoke $r2.<edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator: void dropBits(int)>(3);

        $i1 = type & 1;

        if $i1 == 0 goto label10;

        $z9 = 1;

        goto label11;

     label10:
        $z9 = 0;

     label11:
        $z10 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z9);

        if $z10 == 0 goto label12;

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: boolean isLastBlock> = 1;

     label12:
        $i2 = type >> 1;

        tableswitch($i2)
        {
            case 0: goto label13;
            case 1: goto label14;
            case 2: goto label15;
            default: goto label16;
        };

     label13:
        $r3 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator input>;

        virtualinvoke $r3.<edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator: void skipToByteBoundary()>();

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int mode> = 3;

        goto label17;

     label14:
        $r4 = <edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree: edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree defLitLenTree>;

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree litlenTree> = $r4;

        $r5 = <edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree: edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree defDistTree>;

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree distTree> = $r5;

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int mode> = 7;

        goto label17;

     label15:
        $r6 = new edu.cmu.cs.mvelezce.zip.zipme.InflaterDynHeader;

        specialinvoke $r6.<edu.cmu.cs.mvelezce.zip.zipme.InflaterDynHeader: void <init>()>();

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.InflaterDynHeader dynHeader> = $r6;

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int mode> = 6;

        goto label17;

     label16:
        $r7 = new edu.cmu.cs.mvelezce.zip.zipme.DataFormatException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown block type ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(type);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<edu.cmu.cs.mvelezce.zip.zipme.DataFormatException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label17:
        return 1;

     label18:
        $r12 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator input>;

        $i3 = virtualinvoke $r12.<edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator: int peekBits(int)>(16);

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int uncomprLen> = $i3;

        if $i3 >= 0 goto label19;

        $z11 = 1;

        goto label20;

     label19:
        $z11 = 0;

     label20:
        $z12 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z11);

        if $z12 == 0 goto label21;

        return 0;

     label21:
        $r13 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator input>;

        virtualinvoke $r13.<edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator: void dropBits(int)>(16);

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int mode> = 4;

     label22:
        $r14 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator input>;

        nlen = virtualinvoke $r14.<edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator: int peekBits(int)>(16);

        if nlen >= 0 goto label23;

        $z13 = 1;

        goto label24;

     label23:
        $z13 = 0;

     label24:
        $z14 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z13);

        if $z14 == 0 goto label25;

        return 0;

     label25:
        $r15 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator input>;

        virtualinvoke $r15.<edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator: void dropBits(int)>(16);

        $i4 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int uncomprLen>;

        $i5 = $i4 ^ 65535;

        if nlen == $i5 goto label26;

        $z15 = 1;

        goto label27;

     label26:
        $z15 = 0;

     label27:
        $z16 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z15);

        if $z16 == 0 goto label28;

        $r16 = new edu.cmu.cs.mvelezce.zip.zipme.DataFormatException;

        specialinvoke $r16.<edu.cmu.cs.mvelezce.zip.zipme.DataFormatException: void <init>(java.lang.String)>("broken uncompressed block");

        throw $r16;

     label28:
        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int mode> = 5;

     label29:
        $r17 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.OutputWindow outputWindow>;

        $r18 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator input>;

        $i6 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int uncomprLen>;

        more = virtualinvoke $r17.<edu.cmu.cs.mvelezce.zip.zipme.OutputWindow: int copyStored(edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator,int)>($r18, $i6);

        $i7 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int uncomprLen>;

        $i8 = $i7 - more;

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int uncomprLen> = $i8;

        $i9 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int uncomprLen>;

        if $i9 != 0 goto label30;

        $z17 = 1;

        goto label31;

     label30:
        $z17 = 0;

     label31:
        $z18 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z17);

        if $z18 == 0 goto label32;

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int mode> = 2;

        return 1;

     label32:
        $r20 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator input>;

        $z19 = virtualinvoke $r20.<edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator: boolean needsInput()>();

        if $z19 != 0 goto label33;

        $z20 = 1;

        goto label34;

     label33:
        $z20 = 0;

     label34:
        return $z20;

     label35:
        $r21 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.InflaterDynHeader dynHeader>;

        $r22 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator input>;

        $z21 = virtualinvoke $r21.<edu.cmu.cs.mvelezce.zip.zipme.InflaterDynHeader: boolean decode(edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator)>($r22);

        if $z21 != 0 goto label36;

        $z22 = 1;

        goto label37;

     label36:
        $z22 = 0;

     label37:
        $z23 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z22);

        if $z23 == 0 goto label38;

        return 0;

     label38:
        $r23 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.InflaterDynHeader dynHeader>;

        $r24 = virtualinvoke $r23.<edu.cmu.cs.mvelezce.zip.zipme.InflaterDynHeader: edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree buildLitLenTree()>();

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree litlenTree> = $r24;

        $r25 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.InflaterDynHeader dynHeader>;

        $r26 = virtualinvoke $r25.<edu.cmu.cs.mvelezce.zip.zipme.InflaterDynHeader: edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree buildDistTree()>();

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree distTree> = $r26;

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int mode> = 7;

     label39:
        $z24 = specialinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: boolean decodeHuffman()>();

        return $z24;

     label40:
        return 0;

     label41:
        $r27 = new java.lang.IllegalStateException;

        specialinvoke $r27.<java.lang.IllegalStateException: void <init>()>();

        throw $r27;
    }

    private boolean decodeHeader() throws edu.cmu.cs.mvelezce.zip.zipme.DataFormatException
    {
        edu.cmu.cs.mvelezce.zip.zipme.Inflater this;
        edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator $r0, $r1;
        int header#5, $i0, $i1, $i2, header#22, $i3, $i4, $i5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        edu.cmu.cs.mvelezce.zip.zipme.DataFormatException $r2, $r3;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Inflater;

        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator input>;

        header#5 = virtualinvoke $r0.<edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator: int peekBits(int)>(16);

        if header#5 >= 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        $z1 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z0);

        if $z1 == 0 goto label03;

        return 0;

     label03:
        $r1 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator input>;

        virtualinvoke $r1.<edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator: void dropBits(int)>(16);

        $i0 = header#5 << 8;

        $i1 = header#5 >> 8;

        $i2 = $i0 | $i1;

        header#22 = $i2 & 65535;

        $i3 = header#22 % 31;

        if $i3 == 0 goto label04;

        $z2 = 1;

        goto label05;

     label04:
        $z2 = 0;

     label05:
        $z3 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z2);

        if $z3 == 0 goto label06;

        $r2 = new edu.cmu.cs.mvelezce.zip.zipme.DataFormatException;

        specialinvoke $r2.<edu.cmu.cs.mvelezce.zip.zipme.DataFormatException: void <init>(java.lang.String)>("Header checksum illegal");

        throw $r2;

     label06:
        $i4 = header#22 & 3840;

        if $i4 == 2048 goto label07;

        $z4 = 1;

        goto label08;

     label07:
        $z4 = 0;

     label08:
        $z5 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z4);

        if $z5 == 0 goto label09;

        $r3 = new edu.cmu.cs.mvelezce.zip.zipme.DataFormatException;

        specialinvoke $r3.<edu.cmu.cs.mvelezce.zip.zipme.DataFormatException: void <init>(java.lang.String)>("Compression Method unknown");

        throw $r3;

     label09:
        $i5 = header#22 & 32;

        if $i5 != 0 goto label10;

        $z6 = 1;

        goto label11;

     label10:
        $z6 = 0;

     label11:
        $z7 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z6);

        if $z7 == 0 goto label12;

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int mode> = 2;

        goto label13;

     label12:
        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int mode> = 1;

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int neededBits> = 32;

     label13:
        return 1;
    }

    private boolean decodeDict()
    {
        edu.cmu.cs.mvelezce.zip.zipme.Inflater this;
        int dictByte, $i0, $i1, $i2, $i3, $i4, $i5;
        edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator $r0, $r1;
        boolean $z0, $z1;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Inflater;

     label1:
        $i0 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int neededBits>;

        if $i0 <= 0 goto label5;

        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator input>;

        dictByte = virtualinvoke $r0.<edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator: int peekBits(int)>(8);

        if dictByte >= 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        $z1 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z0);

        if $z1 == 0 goto label4;

        return 0;

     label4:
        $r1 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator input>;

        virtualinvoke $r1.<edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator: void dropBits(int)>(8);

        $i1 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int readAdler>;

        $i2 = $i1 << 8;

        $i3 = $i2 | dictByte;

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int readAdler> = $i3;

        $i4 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int neededBits>;

        $i5 = $i4 - 8;

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int neededBits> = $i5;

        goto label1;

     label5:
        return 0;
    }

    private boolean decodeChksum() throws edu.cmu.cs.mvelezce.zip.zipme.DataFormatException
    {
        edu.cmu.cs.mvelezce.zip.zipme.Inflater this;
        int chkByte, $i0, $i1, $i2, $i3, $i4, $i5;
        edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator $r0, $r1;
        boolean $z0, $z1;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Inflater;

     label1:
        $i0 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int neededBits>;

        if $i0 <= 0 goto label5;

        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator input>;

        chkByte = virtualinvoke $r0.<edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator: int peekBits(int)>(8);

        if chkByte >= 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        $z1 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z0);

        if $z1 == 0 goto label4;

        return 0;

     label4:
        $r1 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator input>;

        virtualinvoke $r1.<edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator: void dropBits(int)>(8);

        $i1 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int readAdler>;

        $i2 = $i1 << 8;

        $i3 = $i2 | chkByte;

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int readAdler> = $i3;

        $i4 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int neededBits>;

        $i5 = $i4 - 8;

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int neededBits> = $i5;

        goto label1;

     label5:
        virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: void hook35()>();

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int mode> = 12;

        return 0;
    }

    private boolean decodeHuffman() throws edu.cmu.cs.mvelezce.zip.zipme.DataFormatException
    {
        edu.cmu.cs.mvelezce.zip.zipme.Inflater this;
        edu.cmu.cs.mvelezce.zip.zipme.OutputWindow $r0, $r3, $r20;
        int free#4, $i0, $i1, symbol#15, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i#69, $i9, $i10, $i11, symbol#90, $i12, $i13, $i14, $i15, i#119, $i16, $i17, $i18, $i19, $i20, $i21;
        edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree $r1, $r11;
        edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator $r2, $r8, $r9, $r12, $r17, $r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15;
        int[] $r4, $r5, $r13, $r14;
        java.lang.ArrayIndexOutOfBoundsException $r6, ex#54, $r15, ex#104;
        edu.cmu.cs.mvelezce.zip.zipme.DataFormatException $r7, $r16;
        java.lang.IllegalStateException $r21;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Inflater;

        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.OutputWindow outputWindow>;

        free#4 = virtualinvoke $r0.<edu.cmu.cs.mvelezce.zip.zipme.OutputWindow: int getFreeSpace()>();

     label01:
        if free#4 < 258 goto label35;

        $i0 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int mode>;

        tableswitch($i0)
        {
            case 7: goto label02;
            case 8: goto label14;
            case 9: goto label21;
            case 10: goto label27;
            default: goto label34;
        };

     label02:
        $r1 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree litlenTree>;

        $r2 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator input>;

        $i1 = virtualinvoke $r1.<edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree: int getSymbol(edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator)>($r2);

        symbol#15 = $i1;

        $i2 = $i1 & -256;

        if $i2 != 0 goto label05;

        $r3 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.OutputWindow outputWindow>;

        virtualinvoke $r3.<edu.cmu.cs.mvelezce.zip.zipme.OutputWindow: void write(int)>(symbol#15);

        free#4 = free#4 + -1;

        if free#4 >= 258 goto label03;

        $z0 = 1;

        goto label04;

     label03:
        $z0 = 0;

     label04:
        $z1 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z0);

        if $z1 == 0 goto label02;

        return 1;

     label05:
        if symbol#15 >= 257 goto label06;

        $z2 = 1;

        goto label07;

     label06:
        $z2 = 0;

     label07:
        $z3 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z2);

        if $z3 == 0 goto label11;

        if symbol#15 >= 0 goto label08;

        $z4 = 1;

        goto label09;

     label08:
        $z4 = 0;

     label09:
        $z5 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z4);

        if $z5 == 0 goto label10;

        return 0;

     label10:
        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree distTree> = null;

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree litlenTree> = null;

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int mode> = 2;

        return 1;

     label11:
        $r4 = <edu.cmu.cs.mvelezce.zip.zipme.Inflater: int[] CPLENS>;

        $i3 = symbol#15 - 257;

        $i4 = $r4[$i3];

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int repLength> = $i4;

        $r5 = <edu.cmu.cs.mvelezce.zip.zipme.Inflater: int[] CPLEXT>;

        $i5 = symbol#15 - 257;

        $i6 = $r5[$i5];

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int neededBits> = $i6;

     label12:
        goto label14;

     label13:
        $r6 := @caughtexception;

        ex#54 = $r6;

        $r7 = new edu.cmu.cs.mvelezce.zip.zipme.DataFormatException;

        specialinvoke $r7.<edu.cmu.cs.mvelezce.zip.zipme.DataFormatException: void <init>(java.lang.String)>("Illegal rep length code");

        throw $r7;

     label14:
        $i7 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int neededBits>;

        if $i7 <= 0 goto label15;

        $z6 = 1;

        goto label16;

     label15:
        $z6 = 0;

     label16:
        $z7 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z6);

        if $z7 == 0 goto label20;

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int mode> = 8;

        $r8 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator input>;

        $i8 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int neededBits>;

        i#69 = virtualinvoke $r8.<edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator: int peekBits(int)>($i8);

        if i#69 >= 0 goto label17;

        $z8 = 1;

        goto label18;

     label17:
        $z8 = 0;

     label18:
        $z9 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z8);

        if $z9 == 0 goto label19;

        return 0;

     label19:
        $r9 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator input>;

        $i9 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int neededBits>;

        virtualinvoke $r9.<edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator: void dropBits(int)>($i9);

        $i10 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int repLength>;

        $i11 = $i10 + i#69;

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int repLength> = $i11;

     label20:
        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int mode> = 9;

     label21:
        $r11 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree distTree>;

        $r12 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator input>;

        symbol#90 = virtualinvoke $r11.<edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree: int getSymbol(edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator)>($r12);

        if symbol#90 >= 0 goto label22;

        $z10 = 1;

        goto label23;

     label22:
        $z10 = 0;

     label23:
        $z11 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z10);

        if $z11 == 0 goto label24;

        return 0;

     label24:
        $r13 = <edu.cmu.cs.mvelezce.zip.zipme.Inflater: int[] CPDIST>;

        $i12 = $r13[symbol#90];

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int repDist> = $i12;

        $r14 = <edu.cmu.cs.mvelezce.zip.zipme.Inflater: int[] CPDEXT>;

        $i13 = $r14[symbol#90];

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int neededBits> = $i13;

     label25:
        goto label27;

     label26:
        $r15 := @caughtexception;

        ex#104 = $r15;

        $r16 = new edu.cmu.cs.mvelezce.zip.zipme.DataFormatException;

        specialinvoke $r16.<edu.cmu.cs.mvelezce.zip.zipme.DataFormatException: void <init>(java.lang.String)>("Illegal rep dist code");

        throw $r16;

     label27:
        $i14 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int neededBits>;

        if $i14 <= 0 goto label28;

        $z12 = 1;

        goto label29;

     label28:
        $z12 = 0;

     label29:
        $z13 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z12);

        if $z13 == 0 goto label33;

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int mode> = 10;

        $r17 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator input>;

        $i15 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int neededBits>;

        i#119 = virtualinvoke $r17.<edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator: int peekBits(int)>($i15);

        if i#119 >= 0 goto label30;

        $z14 = 1;

        goto label31;

     label30:
        $z14 = 0;

     label31:
        $z15 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z14);

        if $z15 == 0 goto label32;

        return 0;

     label32:
        $r18 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator input>;

        $i16 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int neededBits>;

        virtualinvoke $r18.<edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator: void dropBits(int)>($i16);

        $i17 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int repDist>;

        $i18 = $i17 + i#119;

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int repDist> = $i18;

     label33:
        $r20 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.OutputWindow outputWindow>;

        $i19 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int repLength>;

        $i20 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int repDist>;

        virtualinvoke $r20.<edu.cmu.cs.mvelezce.zip.zipme.OutputWindow: void repeat(int,int)>($i19, $i20);

        $i21 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int repLength>;

        free#4 = free#4 - $i21;

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int mode> = 7;

        goto label01;

     label34:
        $r21 = new java.lang.IllegalStateException;

        specialinvoke $r21.<java.lang.IllegalStateException: void <init>()>();

        throw $r21;

     label35:
        return 1;

        catch java.lang.ArrayIndexOutOfBoundsException from label11 to label12 with label13;
        catch java.lang.ArrayIndexOutOfBoundsException from label24 to label25 with label26;
    }

    protected void hook35() throws edu.cmu.cs.mvelezce.zip.zipme.DataFormatException
    {
        edu.cmu.cs.mvelezce.zip.zipme.Inflater this;
        boolean $z0, $z1;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Inflater;

        $z0 = <edu.cmu.cs.mvelezce.zip.ZipMain: boolean FEATUREAdlerThreeTwoChecksum>;

        $z1 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z0);

        if $z1 == 0 goto label1;

        virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: void hook35__role__Adler32Checksum()>();

        goto label2;

     label1:
        virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: void hook35__before__Adler32Checksum()>();

     label2:
        return;
    }

    protected void hook35__role__Adler32Checksum() throws edu.cmu.cs.mvelezce.zip.zipme.DataFormatException
    {
        edu.cmu.cs.mvelezce.zip.zipme.Inflater this;
        edu.cmu.cs.mvelezce.zip.zipme.Adler32 $r0, $r4;
        long $l0, $l3;
        int $i1, $i2, $i4, $i5;
        boolean $z0, $z1;
        edu.cmu.cs.mvelezce.zip.zipme.DataFormatException $r1;
        java.lang.StringBuilder $r2, $r3, $r6, $r7, $r9;
        java.lang.String $r5, $r8, $r10;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Inflater;

        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.Adler32 adler>;

        $l0 = virtualinvoke $r0.<edu.cmu.cs.mvelezce.zip.zipme.Adler32: long getValue()>();

        $i1 = (int) $l0;

        $i2 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int readAdler>;

        if $i1 == $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $z1 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z0);

        if $z1 == 0 goto label3;

        $r1 = new edu.cmu.cs.mvelezce.zip.zipme.DataFormatException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Adler chksum doesn\'t match: ");

        $r4 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.Adler32 adler>;

        $l3 = virtualinvoke $r4.<edu.cmu.cs.mvelezce.zip.zipme.Adler32: long getValue()>();

        $i4 = (int) $l3;

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i4);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" vs. ");

        $i5 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int readAdler>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i5);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<edu.cmu.cs.mvelezce.zip.zipme.DataFormatException: void <init>(java.lang.String)>($r10);

        throw $r1;

     label3:
        virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: void hook35__before__Adler32Checksum()>();

        return;
    }

    protected void hook35__before__Adler32Checksum() throws edu.cmu.cs.mvelezce.zip.zipme.DataFormatException
    {
        edu.cmu.cs.mvelezce.zip.zipme.Inflater this;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Inflater;

        return;
    }

    protected void hook33__role__Adler32Checksum(byte[], int, int) throws edu.cmu.cs.mvelezce.zip.zipme.DataFormatException
    {
        edu.cmu.cs.mvelezce.zip.zipme.Inflater this;
        byte[] buf;
        int off, more;
        edu.cmu.cs.mvelezce.zip.zipme.Adler32 $r0;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Inflater;

        buf := @parameter0: byte[];

        off := @parameter1: int;

        more := @parameter2: int;

        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.Adler32 adler>;

        virtualinvoke $r0.<edu.cmu.cs.mvelezce.zip.zipme.Adler32: void update(byte[],int,int)>(buf, off, more);

        virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: void hook33__before__Adler32Checksum(byte[],int,int)>(buf, off, more);

        return;
    }

    protected void hook33__before__Adler32Checksum(byte[], int, int) throws edu.cmu.cs.mvelezce.zip.zipme.DataFormatException
    {
        edu.cmu.cs.mvelezce.zip.zipme.Inflater this;
        byte[] buf;
        int off, more;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Inflater;

        buf := @parameter0: byte[];

        off := @parameter1: int;

        more := @parameter2: int;

        return;
    }

    public void reset()
    {
        edu.cmu.cs.mvelezce.zip.zipme.Inflater this;
        boolean $z0, $z1;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Inflater;

        $z0 = <edu.cmu.cs.mvelezce.zip.ZipMain: boolean FEATUREAdlerThreeTwoChecksum>;

        $z1 = staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: boolean getDecision(boolean)>($z0);

        if $z1 == 0 goto label1;

        virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: void reset__role__Adler32Checksum()>();

        goto label2;

     label1:
        virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: void reset__before__Adler32Checksum()>();

     label2:
        return;
    }

    public void reset__role__Adler32Checksum()
    {
        edu.cmu.cs.mvelezce.zip.zipme.Inflater this;
        edu.cmu.cs.mvelezce.zip.zipme.Adler32 $r0;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Inflater;

        virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: void reset__before__Adler32Checksum()>();

        $r0 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.Adler32 adler>;

        virtualinvoke $r0.<edu.cmu.cs.mvelezce.zip.zipme.Adler32: void reset()>();

        return;
    }

    public void reset__before__Adler32Checksum()
    {
        edu.cmu.cs.mvelezce.zip.zipme.Inflater this;
        boolean $z0;
        byte $b1;
        edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator $r1;
        edu.cmu.cs.mvelezce.zip.zipme.OutputWindow $r2;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Inflater;

        $z0 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: boolean nowrap>;

        if $z0 == 0 goto label1;

        $b1 = 2;

        goto label2;

     label1:
        $b1 = 0;

     label2:
        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int mode> = $b1;

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: long totalOut> = 0L;

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: long totalIn> = 0L;

        $r1 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator input>;

        virtualinvoke $r1.<edu.cmu.cs.mvelezce.zip.zipme.StreamManipulator: void reset()>();

        $r2 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.OutputWindow outputWindow>;

        virtualinvoke $r2.<edu.cmu.cs.mvelezce.zip.zipme.OutputWindow: void reset()>();

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.InflaterDynHeader dynHeader> = null;

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree litlenTree> = null;

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: edu.cmu.cs.mvelezce.zip.zipme.InflaterHuffmanTree distTree> = null;

        this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: boolean isLastBlock> = 0;

        return;
    }

    public int getTotalIn()
    {
        edu.cmu.cs.mvelezce.zip.zipme.Inflater this;
        long $l0, $l2, $l3;
        int $i1, $i4;

        this := @this: edu.cmu.cs.mvelezce.zip.zipme.Inflater;

        $l0 = this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: long totalIn>;

        $i1 = virtualinvoke this.<edu.cmu.cs.mvelezce.zip.zipme.Inflater: int getRemaining()>();

        $l2 = (long) $i1;

        $l3 = $l0 - $l2;

        $i4 = (int) $l3;

        return $i4;
    }


