    public java.lang.String getSeperator()
    {
        weka.gui.HierarchyPropertyParser this;
        java.lang.String $r0;

        this := @this: weka.gui.HierarchyPropertyParser;

        $r0 = this.<weka.gui.HierarchyPropertyParser: java.lang.String m_Seperator>;

        return $r0;
    }

    public void <init>()
    {
        weka.gui.HierarchyPropertyParser this;
        weka.gui.HierarchyPropertyParser$TreeNode $r0, $r1, $r2;
        java.util.Vector $r3;

        this := @this: weka.gui.HierarchyPropertyParser;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<weka.gui.HierarchyPropertyParser: java.lang.String m_Seperator> = ".";

        this.<weka.gui.HierarchyPropertyParser: int m_Depth> = 0;

        $r0 = new weka.gui.HierarchyPropertyParser$TreeNode;

        specialinvoke $r0.<weka.gui.HierarchyPropertyParser$TreeNode: void <init>(weka.gui.HierarchyPropertyParser,weka.gui.HierarchyPropertyParser$1)>(this, null);

        this.<weka.gui.HierarchyPropertyParser: weka.gui.HierarchyPropertyParser$TreeNode m_Root> = $r0;

        $r1 = this.<weka.gui.HierarchyPropertyParser: weka.gui.HierarchyPropertyParser$TreeNode m_Root>;

        $r1.<weka.gui.HierarchyPropertyParser$TreeNode: weka.gui.HierarchyPropertyParser$TreeNode parent> = null;

        $r2 = this.<weka.gui.HierarchyPropertyParser: weka.gui.HierarchyPropertyParser$TreeNode m_Root>;

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>()>();

        $r2.<weka.gui.HierarchyPropertyParser$TreeNode: java.util.Vector children> = $r3;

        virtualinvoke this.<weka.gui.HierarchyPropertyParser: void goToRoot()>();

        return;
    }

    public synchronized void goToRoot()
    {
        weka.gui.HierarchyPropertyParser this;
        weka.gui.HierarchyPropertyParser$TreeNode $r0;

        this := @this: weka.gui.HierarchyPropertyParser;

        $r0 = this.<weka.gui.HierarchyPropertyParser: weka.gui.HierarchyPropertyParser$TreeNode m_Root>;

        this.<weka.gui.HierarchyPropertyParser: weka.gui.HierarchyPropertyParser$TreeNode m_Current> = $r0;

        return;
    }

    public void build(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        weka.gui.HierarchyPropertyParser this;
        java.lang.String p, delim, property, $r1;
        java.util.StringTokenizer st, $r0;
        boolean $z0, $z1;
        java.lang.Exception $r2;

        this := @this: weka.gui.HierarchyPropertyParser;

        p := @parameter0: java.lang.String;

        delim := @parameter1: java.lang.String;

        $r0 = new java.util.StringTokenizer;

        specialinvoke $r0.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(p, delim);

        st = $r0;

     label1:
        $z0 = virtualinvoke st.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        $r1 = virtualinvoke st.<java.util.StringTokenizer: java.lang.String nextToken()>();

        property = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        $z1 = virtualinvoke this.<weka.gui.HierarchyPropertyParser: boolean isHierachic(java.lang.String)>(property);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

        $r2 = new java.lang.Exception;

        specialinvoke $r2.<java.lang.Exception: void <init>(java.lang.String)>("The given property is not inhierachy structure with seperators!");

        throw $r2;

     label2:
        virtualinvoke this.<weka.gui.HierarchyPropertyParser: void add(java.lang.String)>(property);

        goto label1;

     label3:
        virtualinvoke this.<weka.gui.HierarchyPropertyParser: void goToRoot()>();

        return;
    }

    public boolean isHierachic(java.lang.String)
    {
        weka.gui.HierarchyPropertyParser this;
        java.lang.String string, $r0;
        int index, $i0, $i1;

        this := @this: weka.gui.HierarchyPropertyParser;

        string := @parameter0: java.lang.String;

        $r0 = this.<weka.gui.HierarchyPropertyParser: java.lang.String m_Seperator>;

        index = virtualinvoke string.<java.lang.String: int indexOf(java.lang.String)>($r0);

        $i0 = virtualinvoke string.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(index);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if index == $i1 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(index);

        if index != -1 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public synchronized void add(java.lang.String)
    {
        weka.gui.HierarchyPropertyParser this;
        java.lang.String property, $r1, $r3;
        java.lang.String[] values;
        weka.gui.HierarchyPropertyParser$TreeNode $r0, $r2, $r4;

        this := @this: weka.gui.HierarchyPropertyParser;

        property := @parameter0: java.lang.String;

        values = virtualinvoke this.<weka.gui.HierarchyPropertyParser: java.lang.String[] tokenize(java.lang.String)>(property);

        $r0 = this.<weka.gui.HierarchyPropertyParser: weka.gui.HierarchyPropertyParser$TreeNode m_Root>;

        $r1 = $r0.<weka.gui.HierarchyPropertyParser$TreeNode: java.lang.String value>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 != null goto label1;

        $r2 = this.<weka.gui.HierarchyPropertyParser: weka.gui.HierarchyPropertyParser$TreeNode m_Root>;

        $r3 = values[0];

        $r2.<weka.gui.HierarchyPropertyParser$TreeNode: java.lang.String value> = $r3;

     label1:
        $r4 = this.<weka.gui.HierarchyPropertyParser: weka.gui.HierarchyPropertyParser$TreeNode m_Root>;

        specialinvoke this.<weka.gui.HierarchyPropertyParser: void buildBranch(weka.gui.HierarchyPropertyParser$TreeNode,java.lang.String[],int)>($r4, values, 1);

        return;
    }

    public java.lang.String[] tokenize(java.lang.String)
    {
        weka.gui.HierarchyPropertyParser this;
        java.lang.String rawString, $r2, $r3, $r5;
        java.util.Vector result, $r0;
        java.util.StringTokenizer tk, $r1;
        java.lang.String[] newStrings;
        boolean $z0;
        int $i0, i#17, $i1;
        java.lang.Object $r4;

        this := @this: weka.gui.HierarchyPropertyParser;

        rawString := @parameter0: java.lang.String;

        $r0 = new java.util.Vector;

        specialinvoke $r0.<java.util.Vector: void <init>()>();

        result = $r0;

        $r1 = new java.util.StringTokenizer;

        $r2 = this.<weka.gui.HierarchyPropertyParser: java.lang.String m_Seperator>;

        specialinvoke $r1.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(rawString, $r2);

        tk = $r1;

     label1:
        $z0 = virtualinvoke tk.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke tk.<java.util.StringTokenizer: java.lang.String nextToken()>();

        virtualinvoke result.<java.util.Vector: void addElement(java.lang.Object)>($r3);

        goto label1;

     label2:
        $i0 = virtualinvoke result.<java.util.Vector: int size()>();

        newStrings = newarray (java.lang.String)[$i0];

        i#17 = 0;

     label3:
        $i1 = virtualinvoke result.<java.util.Vector: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#17);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#17 >= $i1 goto label4;

        $r4 = virtualinvoke result.<java.util.Vector: java.lang.Object elementAt(int)>(i#17);

        $r5 = (java.lang.String) $r4;

        newStrings[i#17] = $r5;

        i#17 = i#17 + 1;

        goto label3;

     label4:
        return newStrings;
    }

    private void buildBranch(weka.gui.HierarchyPropertyParser$TreeNode, java.lang.String[], int)
    {
        weka.gui.HierarchyPropertyParser this;
        weka.gui.HierarchyPropertyParser$TreeNode parent, newParent, added, $r4, $r7;
        java.lang.String[] values;
        int lvl, index, $i0, $i1, $i2, $i3, $i4, $i5;
        java.util.Vector kids, $r2, $r3, $r6;
        java.lang.String $r0, $r5, $r9, $r11, $r13, $r15, $r16;
        java.lang.Object $r1;
        java.lang.StringBuilder $r8, $r10, $r12, $r14;

        this := @this: weka.gui.HierarchyPropertyParser;

        parent := @parameter0: weka.gui.HierarchyPropertyParser$TreeNode;

        values := @parameter1: java.lang.String[];

        lvl := @parameter2: int;

        $i0 = lengthof values;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lvl);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if lvl != $i0 goto label1;

        parent.<weka.gui.HierarchyPropertyParser$TreeNode: java.util.Vector children> = null;

        return;

     label1:
        $i1 = this.<weka.gui.HierarchyPropertyParser: int m_Depth>;

        $i2 = $i1 - 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lvl);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if lvl <= $i2 goto label2;

        $i3 = lvl + 1;

        this.<weka.gui.HierarchyPropertyParser: int m_Depth> = $i3;

     label2:
        kids = parent.<weka.gui.HierarchyPropertyParser$TreeNode: java.util.Vector children>;

        $r0 = values[lvl];

        index = virtualinvoke this.<weka.gui.HierarchyPropertyParser: int search(java.util.Vector,java.lang.String)>(kids, $r0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(index);

        if index == -1 goto label4;

        $r1 = virtualinvoke kids.<java.util.Vector: java.lang.Object elementAt(int)>(index);

        newParent = (weka.gui.HierarchyPropertyParser$TreeNode) $r1;

        $r2 = newParent.<weka.gui.HierarchyPropertyParser$TreeNode: java.util.Vector children>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        if $r2 != null goto label3;

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>()>();

        newParent.<weka.gui.HierarchyPropertyParser$TreeNode: java.util.Vector children> = $r3;

     label3:
        $i4 = lvl + 1;

        specialinvoke this.<weka.gui.HierarchyPropertyParser: void buildBranch(weka.gui.HierarchyPropertyParser$TreeNode,java.lang.String[],int)>(newParent, values, $i4);

        goto label7;

     label4:
        $r4 = new weka.gui.HierarchyPropertyParser$TreeNode;

        specialinvoke $r4.<weka.gui.HierarchyPropertyParser$TreeNode: void <init>(weka.gui.HierarchyPropertyParser,weka.gui.HierarchyPropertyParser$1)>(this, null);

        added = $r4;

        added.<weka.gui.HierarchyPropertyParser$TreeNode: weka.gui.HierarchyPropertyParser$TreeNode parent> = parent;

        $r5 = values[lvl];

        added.<weka.gui.HierarchyPropertyParser$TreeNode: java.lang.String value> = $r5;

        $r6 = new java.util.Vector;

        specialinvoke $r6.<java.util.Vector: void <init>()>();

        added.<weka.gui.HierarchyPropertyParser$TreeNode: java.util.Vector children> = $r6;

        added.<weka.gui.HierarchyPropertyParser$TreeNode: int level> = lvl;

        $r7 = this.<weka.gui.HierarchyPropertyParser: weka.gui.HierarchyPropertyParser$TreeNode m_Root>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(parent);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r7);

        if parent == $r7 goto label5;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = parent.<weka.gui.HierarchyPropertyParser$TreeNode: java.lang.String context>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = this.<weka.gui.HierarchyPropertyParser: java.lang.String m_Seperator>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = parent.<weka.gui.HierarchyPropertyParser$TreeNode: java.lang.String value>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        added.<weka.gui.HierarchyPropertyParser$TreeNode: java.lang.String context> = $r15;

        goto label6;

     label5:
        $r16 = parent.<weka.gui.HierarchyPropertyParser$TreeNode: java.lang.String value>;

        added.<weka.gui.HierarchyPropertyParser$TreeNode: java.lang.String context> = $r16;

     label6:
        virtualinvoke kids.<java.util.Vector: void addElement(java.lang.Object)>(added);

        $i5 = lvl + 1;

        specialinvoke this.<weka.gui.HierarchyPropertyParser: void buildBranch(weka.gui.HierarchyPropertyParser$TreeNode,java.lang.String[],int)>(added, values, $i5);

     label7:
        return;
    }

    public int search(java.util.Vector, java.lang.String)
    {
        weka.gui.HierarchyPropertyParser this;
        java.util.Vector vct;
        java.lang.String target, $r2;
        int i#4, $i0;
        java.lang.Object $r0;
        weka.gui.HierarchyPropertyParser$TreeNode $r1;
        boolean $z0;

        this := @this: weka.gui.HierarchyPropertyParser;

        vct := @parameter0: java.util.Vector;

        target := @parameter1: java.lang.String;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(vct);

        if vct != null goto label1;

        return -1;

     label1:
        i#4 = 0;

     label2:
        $i0 = virtualinvoke vct.<java.util.Vector: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#4 >= $i0 goto label4;

        $r0 = virtualinvoke vct.<java.util.Vector: java.lang.Object elementAt(int)>(i#4);

        $r1 = (weka.gui.HierarchyPropertyParser$TreeNode) $r0;

        $r2 = $r1.<weka.gui.HierarchyPropertyParser$TreeNode: java.lang.String value>;

        $z0 = virtualinvoke target.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        return i#4;

     label3:
        i#4 = i#4 + 1;

        goto label2;

     label4:
        return -1;
    }


