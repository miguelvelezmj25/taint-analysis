    public void <init>(java.io.Reader, int, boolean) throws java.io.IOException
    {
        weka.core.converters.ArffLoader$ArffReader this;
        java.io.Reader reader;
        int capacity;
        boolean batch;
        java.lang.IllegalArgumentException $r0;
        java.io.StreamTokenizer $r1;

        this := @this: weka.core.converters.ArffLoader$ArffReader;

        reader := @parameter0: java.io.Reader;

        capacity := @parameter1: int;

        batch := @parameter2: boolean;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<weka.core.converters.ArffLoader$ArffReader: boolean m_batchMode> = 1;

        this.<weka.core.converters.ArffLoader$ArffReader: boolean m_retainStringValues> = 0;

        this.<weka.core.converters.ArffLoader$ArffReader: boolean m_batchMode> = batch;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(batch);

        if batch == 0 goto label1;

        this.<weka.core.converters.ArffLoader$ArffReader: boolean m_retainStringValues> = 1;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(capacity);

        if capacity >= 0 goto label2;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Capacity has to be positive!");

        throw $r0;

     label2:
        $r1 = new java.io.StreamTokenizer;

        specialinvoke $r1.<java.io.StreamTokenizer: void <init>(java.io.Reader)>(reader);

        this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer> = $r1;

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void initTokenizer()>();

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void readHeader(int)>(capacity);

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void initBuffers()>();

        return;
    }

    protected void initTokenizer()
    {
        weka.core.converters.ArffLoader$ArffReader this;
        java.util.Iterator l1;
        java.lang.String e, $r3, $r5, $r6;
        java.io.StreamTokenizer $r0, $r1, $r2, $r4, $r7, $r8, $r13, $r14, $r15, $r16, $r17, $r18;
        char $c0, $c1, $c3;
        java.util.List $r9, $r10, $r11;
        int $i2;
        boolean $z0;
        java.lang.Object $r12;

        this := @this: weka.core.converters.ArffLoader$ArffReader;

        $r0 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        virtualinvoke $r0.<java.io.StreamTokenizer: void resetSyntax()>();

        $r1 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        virtualinvoke $r1.<java.io.StreamTokenizer: void whitespaceChars(int,int)>(0, 32);

        $r2 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        virtualinvoke $r2.<java.io.StreamTokenizer: void wordChars(int,int)>(33, 255);

        $r3 = this.<weka.core.converters.ArffLoader$ArffReader: java.lang.String m_fieldSeparator>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r3);

        if $r3 == null goto label1;

        $r4 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $r5 = this.<weka.core.converters.ArffLoader$ArffReader: java.lang.String m_fieldSeparator>;

        $c0 = virtualinvoke $r5.<java.lang.String: char charAt(int)>(0);

        $r6 = this.<weka.core.converters.ArffLoader$ArffReader: java.lang.String m_fieldSeparator>;

        $c1 = virtualinvoke $r6.<java.lang.String: char charAt(int)>(0);

        virtualinvoke $r4.<java.io.StreamTokenizer: void whitespaceChars(int,int)>($c0, $c1);

        goto label2;

     label1:
        $r7 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        virtualinvoke $r7.<java.io.StreamTokenizer: void whitespaceChars(int,int)>(44, 44);

     label2:
        $r8 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        virtualinvoke $r8.<java.io.StreamTokenizer: void commentChar(int)>(37);

        $r9 = this.<weka.core.converters.ArffLoader$ArffReader: java.util.List m_enclosures>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r9);

        if $r9 == null goto label5;

        $r10 = this.<weka.core.converters.ArffLoader$ArffReader: java.util.List m_enclosures>;

        $i2 = interfaceinvoke $r10.<java.util.List: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 <= 0 goto label5;

        $r11 = this.<weka.core.converters.ArffLoader$ArffReader: java.util.List m_enclosures>;

        l1 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label4;

        $r12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>();

        e = (java.lang.String) $r12;

        $r13 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $c3 = virtualinvoke e.<java.lang.String: char charAt(int)>(0);

        virtualinvoke $r13.<java.io.StreamTokenizer: void quoteChar(int)>($c3);

        goto label3;

     label4:
        goto label6;

     label5:
        $r14 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        virtualinvoke $r14.<java.io.StreamTokenizer: void quoteChar(int)>(34);

        $r15 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        virtualinvoke $r15.<java.io.StreamTokenizer: void quoteChar(int)>(39);

     label6:
        $r16 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        virtualinvoke $r16.<java.io.StreamTokenizer: void ordinaryChar(int)>(123);

        $r17 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        virtualinvoke $r17.<java.io.StreamTokenizer: void ordinaryChar(int)>(125);

        $r18 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        virtualinvoke $r18.<java.io.StreamTokenizer: void eolIsSignificant(boolean)>(1);

        return;
    }

    protected void readHeader(int) throws java.io.IOException
    {
        weka.core.converters.ArffLoader$ArffReader this;
        int capacity, $i0, $i1, $i2;
        java.lang.String relationName#4, $r1, $r3, $r7, $r9, $r10, $r12;
        java.io.StreamTokenizer $r0, $r2, $r4, $r6, $r8, $r11;
        boolean $z0, $z1, $z2;
        java.util.ArrayList $r5, attributes#27;
        weka.core.Instances $r13;

        this := @this: weka.core.converters.ArffLoader$ArffReader;

        capacity := @parameter0: int;

        this.<weka.core.converters.ArffLoader$ArffReader: int m_Lines> = 0;

        relationName#4 = "";

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void getFirstToken()>();

        $r0 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $i0 = $r0.<java.io.StreamTokenizer: int ttype>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != -1 goto label1;

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void errorMessage(java.lang.String)>("premature end of file");

     label1:
        $r1 = "@relation";

        $r2 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $r3 = $r2.<java.io.StreamTokenizer: java.lang.String sval>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void getNextToken()>();

        $r4 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        relationName#4 = $r4.<java.io.StreamTokenizer: java.lang.String sval>;

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void getLastToken(boolean)>(0);

        goto label3;

     label2:
        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void errorMessage(java.lang.String)>("keyword @relation expected");

     label3:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        attributes#27 = $r5;

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void getFirstToken()>();

        $r6 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $i1 = $r6.<java.io.StreamTokenizer: int ttype>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 != -1 goto label4;

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void errorMessage(java.lang.String)>("premature end of file");

     label4:
        $r7 = "@attribute";

        $r8 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $r9 = $r8.<java.io.StreamTokenizer: java.lang.String sval>;

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label5;

        attributes#27 = virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: java.util.ArrayList parseAttribute(java.util.ArrayList)>(attributes#27);

        goto label4;

     label5:
        $r10 = "@data";

        $r11 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $r12 = $r11.<java.io.StreamTokenizer: java.lang.String sval>;

        $z2 = virtualinvoke $r10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label6;

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void errorMessage(java.lang.String)>("keyword @data expected");

     label6:
        $i2 = virtualinvoke attributes#27.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 != 0 goto label7;

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void errorMessage(java.lang.String)>("no attributes declared");

     label7:
        $r13 = new weka.core.Instances;

        specialinvoke $r13.<weka.core.Instances: void <init>(java.lang.String,java.util.ArrayList,int)>(relationName#4, attributes#27, capacity);

        this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances m_Data> = $r13;

        return;
    }

    protected void initBuffers()
    {
        weka.core.converters.ArffLoader$ArffReader this;
        weka.core.Instances $r0, $r2, $r5, $r6, $r7;
        int $i0, $i1, i#17, $i2;
        double[] $r1;
        int[] $r3;
        java.util.ArrayList $r4;
        boolean $z0, $z1;
        weka.core.Attribute $r8;
        java.util.List $r9;
        java.lang.Integer $r10;

        this := @this: weka.core.converters.ArffLoader$ArffReader;

        $r0 = this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances m_Data>;

        $i0 = virtualinvoke $r0.<weka.core.Instances: int numAttributes()>();

        $r1 = newarray (double)[$i0];

        this.<weka.core.converters.ArffLoader$ArffReader: double[] m_ValueBuffer> = $r1;

        $r2 = this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances m_Data>;

        $i1 = virtualinvoke $r2.<weka.core.Instances: int numAttributes()>();

        $r3 = newarray (int)[$i1];

        this.<weka.core.converters.ArffLoader$ArffReader: int[] m_IndicesBuffer> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        this.<weka.core.converters.ArffLoader$ArffReader: java.util.List m_stringAttIndices> = $r4;

        $r5 = this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances m_Data>;

        $z0 = virtualinvoke $r5.<weka.core.Instances: boolean checkForStringAttributes()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        i#17 = 0;

     label1:
        $r6 = this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances m_Data>;

        $i2 = virtualinvoke $r6.<weka.core.Instances: int numAttributes()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#17);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#17 >= $i2 goto label3;

        $r7 = this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances m_Data>;

        $r8 = virtualinvoke $r7.<weka.core.Instances: weka.core.Attribute attribute(int)>(i#17);

        $z1 = virtualinvoke $r8.<weka.core.Attribute: boolean isString()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        $r9 = this.<weka.core.converters.ArffLoader$ArffReader: java.util.List m_stringAttIndices>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i#17);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r10);

     label2:
        i#17 = i#17 + 1;

        goto label1;

     label3:
        return;
    }

    protected void getFirstToken() throws java.io.IOException
    {
        weka.core.converters.ArffLoader$ArffReader this;
        java.io.StreamTokenizer $r0, $r1, $r2, $r3, $r4, $r5, $r7;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r6;
        boolean $z0;

        this := @this: weka.core.converters.ArffLoader$ArffReader;

     label1:
        $r0 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $i0 = virtualinvoke $r0.<java.io.StreamTokenizer: int nextToken()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 10 goto label2;

        goto label1;

     label2:
        $r1 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $i1 = $r1.<java.io.StreamTokenizer: int ttype>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 == 39 goto label3;

        $r2 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $i2 = $r2.<java.io.StreamTokenizer: int ttype>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 != 34 goto label4;

     label3:
        $r3 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $r3.<java.io.StreamTokenizer: int ttype> = -3;

        goto label5;

     label4:
        $r4 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $i3 = $r4.<java.io.StreamTokenizer: int ttype>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 != -3 goto label5;

        $r5 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $r6 = $r5.<java.io.StreamTokenizer: java.lang.String sval>;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("?");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label5;

        $r7 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $r7.<java.io.StreamTokenizer: int ttype> = 63;

     label5:
        return;
    }

    protected void errorMessage(java.lang.String) throws java.io.IOException
    {
        weka.core.converters.ArffLoader$ArffReader this;
        java.lang.String msg, $r4, str#12, $r6, $r10;
        int line, $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r0, $r1, $r2, $r5, $r7, $r8, $r9;
        java.io.StreamTokenizer $r3;
        java.io.IOException $r11;

        this := @this: weka.core.converters.ArffLoader$ArffReader;

        msg := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(msg);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", read ");

        $r3 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $r4 = virtualinvoke $r3.<java.io.StreamTokenizer: java.lang.String toString()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        str#12 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = this.<weka.core.converters.ArffLoader$ArffReader: int m_Lines>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label1;

        $r6 = virtualinvoke str#12.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(".* line ", "");

        line = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" line ");

        $i1 = this.<weka.core.converters.ArffLoader$ArffReader: int m_Lines>;

        $i2 = $i1 + line;

        $i3 = $i2 - 1;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        str#12 = virtualinvoke str#12.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(" line .*", $r10);

     label1:
        $r11 = new java.io.IOException;

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>(str#12);

        throw $r11;
    }

    protected void getNextToken() throws java.io.IOException
    {
        weka.core.converters.ArffLoader$ArffReader this;
        java.io.StreamTokenizer $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r8;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r7;
        boolean $z0;

        this := @this: weka.core.converters.ArffLoader$ArffReader;

        $r0 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $i0 = virtualinvoke $r0.<java.io.StreamTokenizer: int nextToken()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 10 goto label1;

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void errorMessage(java.lang.String)>("premature end of line");

     label1:
        $r1 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $i1 = $r1.<java.io.StreamTokenizer: int ttype>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 != -1 goto label2;

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void errorMessage(java.lang.String)>("premature end of file");

        goto label5;

     label2:
        $r2 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $i2 = $r2.<java.io.StreamTokenizer: int ttype>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 == 39 goto label3;

        $r3 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $i3 = $r3.<java.io.StreamTokenizer: int ttype>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 != 34 goto label4;

     label3:
        $r4 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $r4.<java.io.StreamTokenizer: int ttype> = -3;

        goto label5;

     label4:
        $r5 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $i4 = $r5.<java.io.StreamTokenizer: int ttype>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 != -3 goto label5;

        $r6 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $r7 = $r6.<java.io.StreamTokenizer: java.lang.String sval>;

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("?");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label5;

        $r8 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $r8.<java.io.StreamTokenizer: int ttype> = 63;

     label5:
        return;
    }

    protected void getLastToken(boolean) throws java.io.IOException
    {
        weka.core.converters.ArffLoader$ArffReader this;
        boolean endOfFileOk;
        java.io.StreamTokenizer $r0, $r1;
        int $i0, $i1;

        this := @this: weka.core.converters.ArffLoader$ArffReader;

        endOfFileOk := @parameter0: boolean;

        $r0 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $i0 = virtualinvoke $r0.<java.io.StreamTokenizer: int nextToken()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 == 10 goto label2;

        $r1 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $i1 = $r1.<java.io.StreamTokenizer: int ttype>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 != -1 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(endOfFileOk);

        if endOfFileOk != 0 goto label2;

     label1:
        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void errorMessage(java.lang.String)>("end of line expected");

     label2:
        return;
    }

    protected java.util.ArrayList parseAttribute(java.util.ArrayList) throws java.io.IOException
    {
        weka.core.converters.ArffLoader$ArffReader this;
        java.lang.String attributeName, $r3, $r5, $r7, $r10, $r14, format#55, $r23, $r26, $r28, $r29, $r31, $r33, $r39, $r45, $r54;
        java.util.ArrayList atts, attributeValues, attributes#1, $r12, $r24, attributes#97, $r48;
        weka.core.Instances relation, $r46;
        java.io.StreamTokenizer $r0, $r1, $r2, $r4, $r6, $r9, $r13, $r15, $r16, $r17, $r18, $r19, $r20, $r22, $r25, $r27, $r30, $r32, $r49, $r50, $r51, $r52, $r53, $r56;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        boolean $z0, $z1, $z2, $z4, $z6, $z8, $z9, $z10, $z11;
        weka.core.Attribute $r8, $r11, $r21, $r47, $r55;
        java.lang.StringBuilder $r34, $r35, $r36, $r37, $r38, $r40, $r41, $r42, $r43, $r44;

        this := @this: weka.core.converters.ArffLoader$ArffReader;

        attributes#1 := @parameter0: java.util.ArrayList;

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void getNextToken()>();

        $r0 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        attributeName = $r0.<java.io.StreamTokenizer: java.lang.String sval>;

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void getNextToken()>();

        $r1 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $i0 = $r1.<java.io.StreamTokenizer: int ttype>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != -3 goto label13;

        $r2 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $r3 = $r2.<java.io.StreamTokenizer: java.lang.String sval>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("real");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label01;

        $r4 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $r5 = $r4.<java.io.StreamTokenizer: java.lang.String sval>;

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("integer");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label01;

        $r6 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $r7 = $r6.<java.io.StreamTokenizer: java.lang.String sval>;

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("numeric");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label02;

     label01:
        $r8 = new weka.core.Attribute;

        $i1 = virtualinvoke attributes#1.<java.util.ArrayList: int size()>();

        specialinvoke $r8.<weka.core.Attribute: void <init>(java.lang.String,int)>(attributeName, $i1);

        virtualinvoke attributes#1.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void readTillEOL()>();

        goto label17;

     label02:
        $r9 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $r10 = $r9.<java.io.StreamTokenizer: java.lang.String sval>;

        $z4 = virtualinvoke $r10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("string");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label03;

        $r11 = new weka.core.Attribute;

        $r12 = (java.util.ArrayList) null;

        $i2 = virtualinvoke attributes#1.<java.util.ArrayList: int size()>();

        specialinvoke $r11.<weka.core.Attribute: void <init>(java.lang.String,java.util.List,int)>(attributeName, $r12, $i2);

        virtualinvoke attributes#1.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void readTillEOL()>();

        goto label17;

     label03:
        $r13 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $r14 = $r13.<java.io.StreamTokenizer: java.lang.String sval>;

        $z6 = virtualinvoke $r14.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("date");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label07;

        format#55 = null;

        $r15 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $i3 = virtualinvoke $r15.<java.io.StreamTokenizer: int nextToken()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 == 10 goto label05;

        $r16 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $i4 = $r16.<java.io.StreamTokenizer: int ttype>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 == -3 goto label04;

        $r17 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $i5 = $r17.<java.io.StreamTokenizer: int ttype>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i5 == 39 goto label04;

        $r18 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $i6 = $r18.<java.io.StreamTokenizer: int ttype>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if $i6 == 34 goto label04;

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void errorMessage(java.lang.String)>("not a valid date format");

     label04:
        $r19 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        format#55 = $r19.<java.io.StreamTokenizer: java.lang.String sval>;

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void readTillEOL()>();

        goto label06;

     label05:
        $r20 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        virtualinvoke $r20.<java.io.StreamTokenizer: void pushBack()>();

     label06:
        $r21 = new weka.core.Attribute;

        $i7 = virtualinvoke attributes#1.<java.util.ArrayList: int size()>();

        specialinvoke $r21.<weka.core.Attribute: void <init>(java.lang.String,java.lang.String,int)>(attributeName, format#55, $i7);

        virtualinvoke attributes#1.<java.util.ArrayList: boolean add(java.lang.Object)>($r21);

        goto label17;

     label07:
        $r22 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $r23 = $r22.<java.io.StreamTokenizer: java.lang.String sval>;

        $z8 = virtualinvoke $r23.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("relational");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 == 0 goto label12;

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void readTillEOL()>();

        atts = attributes#1;

        $r24 = new java.util.ArrayList;

        specialinvoke $r24.<java.util.ArrayList: void <init>()>();

        attributes#97 = $r24;

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void getFirstToken()>();

        $r25 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $i8 = $r25.<java.io.StreamTokenizer: int ttype>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if $i8 != -1 goto label08;

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void errorMessage(java.lang.String)>("premature end of file");

     label08:
        $r26 = "@attribute";

        $r27 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $r28 = $r27.<java.io.StreamTokenizer: java.lang.String sval>;

        $z9 = virtualinvoke $r26.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r28);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 == 0 goto label09;

        attributes#97 = virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: java.util.ArrayList parseAttribute(java.util.ArrayList)>(attributes#97);

        goto label08;

     label09:
        $r29 = "@end";

        $r30 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $r31 = $r30.<java.io.StreamTokenizer: java.lang.String sval>;

        $z10 = virtualinvoke $r29.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r31);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z10);

        if $z10 == 0 goto label10;

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void getNextToken()>();

        $r32 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $r33 = $r32.<java.io.StreamTokenizer: java.lang.String sval>;

        $z11 = virtualinvoke attributeName.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r33);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z11);

        if $z11 != 0 goto label11;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("declaration of subrelation ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(attributeName);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be terminated by @end ");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(attributeName);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void errorMessage(java.lang.String)>($r39);

        goto label11;

     label10:
        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("declaration of subrelation ");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(attributeName);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be terminated by @end ");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(attributeName);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void errorMessage(java.lang.String)>($r45);

        goto label08;

     label11:
        $r46 = new weka.core.Instances;

        specialinvoke $r46.<weka.core.Instances: void <init>(java.lang.String,java.util.ArrayList,int)>(attributeName, attributes#97, 0);

        relation = $r46;

        attributes#1 = atts;

        $r47 = new weka.core.Attribute;

        $i9 = virtualinvoke attributes#1.<java.util.ArrayList: int size()>();

        specialinvoke $r47.<weka.core.Attribute: void <init>(java.lang.String,weka.core.Instances,int)>(attributeName, relation, $i9);

        virtualinvoke attributes#1.<java.util.ArrayList: boolean add(java.lang.Object)>($r47);

        goto label17;

     label12:
        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void errorMessage(java.lang.String)>("no valid attribute type or invalid enumeration");

        goto label17;

     label13:
        $r48 = new java.util.ArrayList;

        specialinvoke $r48.<java.util.ArrayList: void <init>()>();

        attributeValues = $r48;

        $r49 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        virtualinvoke $r49.<java.io.StreamTokenizer: void pushBack()>();

        $r50 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $i10 = virtualinvoke $r50.<java.io.StreamTokenizer: int nextToken()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i10);

        if $i10 == 123 goto label14;

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void errorMessage(java.lang.String)>("{ expected at beginning of enumeration");

     label14:
        $r51 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $i11 = virtualinvoke $r51.<java.io.StreamTokenizer: int nextToken()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i11);

        if $i11 == 125 goto label16;

        $r52 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $i12 = $r52.<java.io.StreamTokenizer: int ttype>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i12);

        if $i12 != 10 goto label15;

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void errorMessage(java.lang.String)>("} expected at end of enumeration");

        goto label14;

     label15:
        $r53 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $r54 = $r53.<java.io.StreamTokenizer: java.lang.String sval>;

        virtualinvoke attributeValues.<java.util.ArrayList: boolean add(java.lang.Object)>($r54);

        goto label14;

     label16:
        $r55 = new weka.core.Attribute;

        $i13 = virtualinvoke attributes#1.<java.util.ArrayList: int size()>();

        specialinvoke $r55.<weka.core.Attribute: void <init>(java.lang.String,java.util.List,int)>(attributeName, attributeValues, $i13);

        virtualinvoke attributes#1.<java.util.ArrayList: boolean add(java.lang.Object)>($r55);

     label17:
        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void getLastToken(boolean)>(0);

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void getFirstToken()>();

        $r56 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $i14 = $r56.<java.io.StreamTokenizer: int ttype>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i14);

        if $i14 != -1 goto label18;

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void errorMessage(java.lang.String)>("premature end of file");

     label18:
        return attributes#1;
    }

    protected void readTillEOL() throws java.io.IOException
    {
        weka.core.converters.ArffLoader$ArffReader this;
        java.io.StreamTokenizer $r0, $r1;
        int $i0;

        this := @this: weka.core.converters.ArffLoader$ArffReader;

     label1:
        $r0 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $i0 = virtualinvoke $r0.<java.io.StreamTokenizer: int nextToken()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 == 10 goto label2;

        goto label1;

     label2:
        $r1 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        virtualinvoke $r1.<java.io.StreamTokenizer: void pushBack()>();

        return;
    }

    public weka.core.Instances getStructure()
    {
        weka.core.converters.ArffLoader$ArffReader this;
        weka.core.Instances $r0, $r1;

        this := @this: weka.core.converters.ArffLoader$ArffReader;

        $r0 = new weka.core.Instances;

        $r1 = this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances m_Data>;

        specialinvoke $r0.<weka.core.Instances: void <init>(weka.core.Instances,int)>($r1, 0);

        return $r0;
    }

    public void setRetainStringValues(boolean)
    {
        weka.core.converters.ArffLoader$ArffReader this;
        boolean retain;

        this := @this: weka.core.converters.ArffLoader$ArffReader;

        retain := @parameter0: boolean;

        this.<weka.core.converters.ArffLoader$ArffReader: boolean m_retainStringValues> = retain;

        return;
    }

    public weka.core.Instance readInstance(weka.core.Instances) throws java.io.IOException
    {
        weka.core.converters.ArffLoader$ArffReader this;
        weka.core.Instances structure;
        weka.core.Instance $r0;

        this := @this: weka.core.converters.ArffLoader$ArffReader;

        structure := @parameter0: weka.core.Instances;

        $r0 = virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instance readInstance(weka.core.Instances,boolean)>(structure, 1);

        return $r0;
    }

    public weka.core.Instance readInstance(weka.core.Instances, boolean) throws java.io.IOException
    {
        weka.core.converters.ArffLoader$ArffReader this;
        weka.core.Instances structure;
        boolean flag;
        weka.core.Instance $r0;

        this := @this: weka.core.converters.ArffLoader$ArffReader;

        structure := @parameter0: weka.core.Instances;

        flag := @parameter1: boolean;

        $r0 = virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instance getInstance(weka.core.Instances,boolean)>(structure, flag);

        return $r0;
    }

    protected weka.core.Instance getInstance(weka.core.Instances, boolean) throws java.io.IOException
    {
        weka.core.converters.ArffLoader$ArffReader this;
        weka.core.Instances structure, $r0;
        boolean flag;
        int $i0, $i1, $i2;
        java.io.StreamTokenizer $r1, $r2;
        weka.core.Instance $r3, $r4;

        this := @this: weka.core.converters.ArffLoader$ArffReader;

        structure := @parameter0: weka.core.Instances;

        flag := @parameter1: boolean;

        this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances m_Data> = structure;

        $r0 = this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances m_Data>;

        $i0 = virtualinvoke $r0.<weka.core.Instances: int numAttributes()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 0 goto label1;

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void errorMessage(java.lang.String)>("no header information available");

     label1:
        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void getFirstToken()>();

        $r1 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $i1 = $r1.<java.io.StreamTokenizer: int ttype>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 != -1 goto label2;

        return null;

     label2:
        $r2 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $i2 = $r2.<java.io.StreamTokenizer: int ttype>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 != 123 goto label3;

        $r3 = virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instance getInstanceSparse(boolean)>(flag);

        return $r3;

     label3:
        $r4 = virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instance getInstanceFull(boolean)>(flag);

        return $r4;
    }

    protected weka.core.Instance getInstanceSparse(boolean) throws java.io.IOException
    {
        weka.core.converters.ArffLoader$ArffReader this, arff, $r60;
        boolean flag, $z0, $z1, $z2, $z3, $z4;
        int valIndex, numValues#2, maxIndex#4, i#12, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i17, $i18, $i19, $i20, $i21, $i22, $i23;
        weka.core.Instances data, $r2, $r16, $r21, $r24, $r36, $r42, $r48, $r64, $r67, $r70, $r89, $r90;
        double[] tempValues, $r19, $r29, $r30, $r35, $r41, $r47, $r69, $r86;
        int[] tempIndices, $r8, $r13, $r14, $r15, $r17, $r22, $r25, $r37, $r43, $r49, $r65, $r71, $r83, $r87;
        weka.core.SparseInstance inst, $r88;
        java.util.List $r0, $r1, $r3;
        java.lang.Object $r4;
        java.lang.Integer $r5, $r11;
        weka.core.Attribute $r6, $r23, $r26, $r38, $r44, $r50, $r66, $r72;
        java.io.StreamTokenizer $r7, $r9, $r18, $r20, $r27, $r31, $r39, $r45, $r51, $r56, $r62;
        java.lang.String $r10, $r28, $r32, $r40, $r46, $r52, $r57, $r59, $r63, $r76, $r80, $r85;
        java.lang.NumberFormatException $r12, e#41, $r34, e#120;
        double $d0, $d1, $d2, $d3, $d4, $d5, weight#243;
        java.lang.Double $r33;
        java.text.ParseException $r53, e#172;
        java.lang.StringBuilder $r54, $r55, $r58, $r75, $r77, $r78, $r79, $r81, $r82, $r84;
        java.io.StringReader $r61;
        java.lang.String[] $r68;
        java.lang.Exception $r73, e#217;
        java.io.IOException $r74;

        this := @this: weka.core.converters.ArffLoader$ArffReader;

        flag := @parameter0: boolean;

        numValues#2 = 0;

        maxIndex#4 = -1;

        $z0 = this.<weka.core.converters.ArffLoader$ArffReader: boolean m_batchMode>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label02;

        $z1 = this.<weka.core.converters.ArffLoader$ArffReader: boolean m_retainStringValues>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label02;

        $r0 = this.<weka.core.converters.ArffLoader$ArffReader: java.util.List m_stringAttIndices>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label02;

        i#12 = 0;

     label01:
        $r1 = this.<weka.core.converters.ArffLoader$ArffReader: java.util.List m_stringAttIndices>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#12 >= $i0 goto label02;

        $r2 = this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances m_Data>;

        $r3 = this.<weka.core.converters.ArffLoader$ArffReader: java.util.List m_stringAttIndices>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i#12);

        $r5 = (java.lang.Integer) $r4;

        $i1 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        $r6 = virtualinvoke $r2.<weka.core.Instances: weka.core.Attribute attribute(int)>($i1);

        virtualinvoke $r6.<weka.core.Attribute: void setStringValue(java.lang.String)>(null);

        i#12 = i#12 + 1;

        goto label01;

     label02:
        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void getIndex()>();

        $r7 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $i2 = $r7.<java.io.StreamTokenizer: int ttype>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 != 125 goto label03;

        goto label28;

     label03:
        $r8 = this.<weka.core.converters.ArffLoader$ArffReader: int[] m_IndicesBuffer>;

        $r9 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $r10 = $r9.<java.io.StreamTokenizer: java.lang.String sval>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r10);

        $i3 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

        $r8[numValues#2] = $i3;

     label04:
        goto label06;

     label05:
        $r12 := @caughtexception;

        e#41 = $r12;

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void errorMessage(java.lang.String)>("index number expected");

     label06:
        $r13 = this.<weka.core.converters.ArffLoader$ArffReader: int[] m_IndicesBuffer>;

        $i4 = $r13[numValues#2];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(maxIndex#4);

        if $i4 > maxIndex#4 goto label07;

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void errorMessage(java.lang.String)>("indices have to be ordered");

     label07:
        $r14 = this.<weka.core.converters.ArffLoader$ArffReader: int[] m_IndicesBuffer>;

        $i5 = $r14[numValues#2];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i5 < 0 goto label08;

        $r15 = this.<weka.core.converters.ArffLoader$ArffReader: int[] m_IndicesBuffer>;

        $i6 = $r15[numValues#2];

        $r16 = this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances m_Data>;

        $i7 = virtualinvoke $r16.<weka.core.Instances: int numAttributes()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if $i6 < $i7 goto label09;

     label08:
        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void errorMessage(java.lang.String)>("index out of bounds");

     label09:
        $r17 = this.<weka.core.converters.ArffLoader$ArffReader: int[] m_IndicesBuffer>;

        maxIndex#4 = $r17[numValues#2];

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void getNextToken()>();

        $r18 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $i8 = $r18.<java.io.StreamTokenizer: int ttype>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if $i8 != 63 goto label10;

        $r19 = this.<weka.core.converters.ArffLoader$ArffReader: double[] m_ValueBuffer>;

        $d0 = staticinvoke <weka.core.Utils: double missingValue()>();

        $r19[numValues#2] = $d0;

        goto label27;

     label10:
        $r20 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $i9 = $r20.<java.io.StreamTokenizer: int ttype>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        if $i9 == -3 goto label11;

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void errorMessage(java.lang.String)>("not a valid value");

     label11:
        $r21 = this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances m_Data>;

        $r22 = this.<weka.core.converters.ArffLoader$ArffReader: int[] m_IndicesBuffer>;

        $i10 = $r22[numValues#2];

        $r23 = virtualinvoke $r21.<weka.core.Instances: weka.core.Attribute attribute(int)>($i10);

        $i11 = virtualinvoke $r23.<weka.core.Attribute: int type()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i11);

        tableswitch($i11)
        {
            case 0: goto label14;
            case 1: goto label12;
            case 2: goto label17;
            case 3: goto label20;
            case 4: goto label23;
            default: goto label26;
        };

     label12:
        $r24 = this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances m_Data>;

        $r25 = this.<weka.core.converters.ArffLoader$ArffReader: int[] m_IndicesBuffer>;

        $i12 = $r25[numValues#2];

        $r26 = virtualinvoke $r24.<weka.core.Instances: weka.core.Attribute attribute(int)>($i12);

        $r27 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $r28 = $r27.<java.io.StreamTokenizer: java.lang.String sval>;

        valIndex = virtualinvoke $r26.<weka.core.Attribute: int indexOfValue(java.lang.String)>($r28);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(valIndex);

        if valIndex != -1 goto label13;

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void errorMessage(java.lang.String)>("nominal value not declared in header");

     label13:
        $r29 = this.<weka.core.converters.ArffLoader$ArffReader: double[] m_ValueBuffer>;

        $d1 = (double) valIndex;

        $r29[numValues#2] = $d1;

        goto label27;

     label14:
        $r30 = this.<weka.core.converters.ArffLoader$ArffReader: double[] m_ValueBuffer>;

        $r31 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $r32 = $r31.<java.io.StreamTokenizer: java.lang.String sval>;

        $r33 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>($r32);

        $d2 = virtualinvoke $r33.<java.lang.Double: double doubleValue()>();

        $r30[numValues#2] = $d2;

     label15:
        goto label27;

     label16:
        $r34 := @caughtexception;

        e#120 = $r34;

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void errorMessage(java.lang.String)>("number expected");

        goto label27;

     label17:
        $z2 = this.<weka.core.converters.ArffLoader$ArffReader: boolean m_batchMode>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label18;

        $z3 = this.<weka.core.converters.ArffLoader$ArffReader: boolean m_retainStringValues>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label19;

     label18:
        $r35 = this.<weka.core.converters.ArffLoader$ArffReader: double[] m_ValueBuffer>;

        $r36 = this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances m_Data>;

        $r37 = this.<weka.core.converters.ArffLoader$ArffReader: int[] m_IndicesBuffer>;

        $i13 = $r37[numValues#2];

        $r38 = virtualinvoke $r36.<weka.core.Instances: weka.core.Attribute attribute(int)>($i13);

        $r39 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $r40 = $r39.<java.io.StreamTokenizer: java.lang.String sval>;

        $i14 = virtualinvoke $r38.<weka.core.Attribute: int addStringValue(java.lang.String)>($r40);

        $d3 = (double) $i14;

        $r35[numValues#2] = $d3;

        goto label27;

     label19:
        $r41 = this.<weka.core.converters.ArffLoader$ArffReader: double[] m_ValueBuffer>;

        $r41[numValues#2] = 0.0;

        $r42 = this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances m_Data>;

        $r43 = this.<weka.core.converters.ArffLoader$ArffReader: int[] m_IndicesBuffer>;

        $i15 = $r43[numValues#2];

        $r44 = virtualinvoke $r42.<weka.core.Instances: weka.core.Attribute attribute(int)>($i15);

        $r45 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $r46 = $r45.<java.io.StreamTokenizer: java.lang.String sval>;

        virtualinvoke $r44.<weka.core.Attribute: int addStringValue(java.lang.String)>($r46);

        goto label27;

     label20:
        $r47 = this.<weka.core.converters.ArffLoader$ArffReader: double[] m_ValueBuffer>;

        $r48 = this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances m_Data>;

        $r49 = this.<weka.core.converters.ArffLoader$ArffReader: int[] m_IndicesBuffer>;

        $i17 = $r49[numValues#2];

        $r50 = virtualinvoke $r48.<weka.core.Instances: weka.core.Attribute attribute(int)>($i17);

        $r51 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $r52 = $r51.<java.io.StreamTokenizer: java.lang.String sval>;

        $d4 = virtualinvoke $r50.<weka.core.Attribute: double parseDate(java.lang.String)>($r52);

        $r47[numValues#2] = $d4;

     label21:
        goto label27;

     label22:
        $r53 := @caughtexception;

        e#172 = $r53;

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unparseable date: ");

        $r56 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $r57 = $r56.<java.io.StreamTokenizer: java.lang.String sval>;

        $r58 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r57);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void errorMessage(java.lang.String)>($r59);

        goto label27;

     label23:
        $r60 = new weka.core.converters.ArffLoader$ArffReader;

        $r61 = new java.io.StringReader;

        $r62 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $r63 = $r62.<java.io.StreamTokenizer: java.lang.String sval>;

        specialinvoke $r61.<java.io.StringReader: void <init>(java.lang.String)>($r63);

        $r64 = this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances m_Data>;

        $r65 = this.<weka.core.converters.ArffLoader$ArffReader: int[] m_IndicesBuffer>;

        $i18 = $r65[numValues#2];

        $r66 = virtualinvoke $r64.<weka.core.Instances: weka.core.Attribute attribute(int)>($i18);

        $r67 = virtualinvoke $r66.<weka.core.Attribute: weka.core.Instances relation()>();

        $r68 = newarray (java.lang.String)[0];

        specialinvoke $r60.<weka.core.converters.ArffLoader$ArffReader: void <init>(java.io.Reader,weka.core.Instances,int,java.lang.String[])>($r61, $r67, 0, $r68);

        arff = $r60;

        data = virtualinvoke arff.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances getData()>();

        $r69 = this.<weka.core.converters.ArffLoader$ArffReader: double[] m_ValueBuffer>;

        $r70 = this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances m_Data>;

        $r71 = this.<weka.core.converters.ArffLoader$ArffReader: int[] m_IndicesBuffer>;

        $i19 = $r71[numValues#2];

        $r72 = virtualinvoke $r70.<weka.core.Instances: weka.core.Attribute attribute(int)>($i19);

        $i20 = virtualinvoke $r72.<weka.core.Attribute: int addRelation(weka.core.Instances)>(data);

        $d5 = (double) $i20;

        $r69[numValues#2] = $d5;

     label24:
        goto label27;

     label25:
        $r73 := @caughtexception;

        e#217 = $r73;

        $r74 = new java.io.IOException;

        $r75 = new java.lang.StringBuilder;

        specialinvoke $r75.<java.lang.StringBuilder: void <init>()>();

        $r76 = virtualinvoke e#217.<java.lang.Exception: java.lang.String toString()>();

        $r77 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r76);

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of line ");

        $i21 = virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: int getLineNo()>();

        $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i21);

        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r74.<java.io.IOException: void <init>(java.lang.String)>($r80);

        throw $r74;

     label26:
        $r81 = new java.lang.StringBuilder;

        specialinvoke $r81.<java.lang.StringBuilder: void <init>()>();

        $r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown attribute type in column ");

        $r83 = this.<weka.core.converters.ArffLoader$ArffReader: int[] m_IndicesBuffer>;

        $i22 = $r83[numValues#2];

        $r84 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i22);

        $r85 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void errorMessage(java.lang.String)>($r85);

     label27:
        numValues#2 = numValues#2 + 1;

        goto label02;

     label28:
        weight#243 = 1.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(flag);

        if flag == 0 goto label30;

        weight#243 = virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: double getInstanceWeight()>();

        $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>(weight#243);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label29;

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void getLastToken(boolean)>(1);

        goto label30;

     label29:
        weight#243 = 1.0;

     label30:
        tempValues = newarray (double)[numValues#2];

        tempIndices = newarray (int)[numValues#2];

        $r86 = this.<weka.core.converters.ArffLoader$ArffReader: double[] m_ValueBuffer>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r86, 0, tempValues, 0, numValues#2);

        $r87 = this.<weka.core.converters.ArffLoader$ArffReader: int[] m_IndicesBuffer>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r87, 0, tempIndices, 0, numValues#2);

        $r88 = new weka.core.SparseInstance;

        $r89 = this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances m_Data>;

        $i23 = virtualinvoke $r89.<weka.core.Instances: int numAttributes()>();

        specialinvoke $r88.<weka.core.SparseInstance: void <init>(double,double[],int[],int)>(weight#243, tempValues, tempIndices, $i23);

        inst = $r88;

        $r90 = this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances m_Data>;

        interfaceinvoke inst.<weka.core.Instance: void setDataset(weka.core.Instances)>($r90);

        return inst;

        catch java.lang.NumberFormatException from label03 to label04 with label05;
        catch java.lang.NumberFormatException from label14 to label15 with label16;
        catch java.text.ParseException from label20 to label21 with label22;
        catch java.lang.Exception from label23 to label24 with label25;
    }

    protected weka.core.Instance getInstanceFull(boolean) throws java.io.IOException
    {
        weka.core.converters.ArffLoader$ArffReader this, arff, $r33;
        boolean flag, $z0, $z1, $z2;
        double[] instance;
        int index, $i0, i#6, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        weka.core.Instances data, $r0, $r1, $r4, $r6, $r14, $r18, $r22, $r37, $r39, $r41, $r56;
        weka.core.DenseInstance inst, $r55;
        java.io.StreamTokenizer $r2, $r3, $r8, $r10, $r16, $r20, $r24, $r29, $r35;
        double $d0, $d1, $d2, $d3, $d4, $d5, weight#155;
        weka.core.Attribute $r5, $r7, $r15, $r19, $r23, $r38, $r42;
        java.lang.String $r9, $r11, $r17, $r21, $r25, $r30, $r32, $r36, $r46, $r50, $r54;
        java.lang.Double $r12;
        java.lang.NumberFormatException $r13, e#55;
        java.text.ParseException $r26, e#94;
        java.lang.StringBuilder $r27, $r28, $r31, $r45, $r47, $r48, $r49, $r51, $r52, $r53;
        java.io.StringReader $r34;
        java.lang.String[] $r40;
        java.lang.Exception $r43, e#132;
        java.io.IOException $r44;

        this := @this: weka.core.converters.ArffLoader$ArffReader;

        flag := @parameter0: boolean;

        $r0 = this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances m_Data>;

        $i0 = virtualinvoke $r0.<weka.core.Instances: int numAttributes()>();

        instance = newarray (double)[$i0];

        i#6 = 0;

     label01:
        $r1 = this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances m_Data>;

        $i1 = virtualinvoke $r1.<weka.core.Instances: int numAttributes()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#6 >= $i1 goto label21;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#6);

        if i#6 <= 0 goto label02;

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void getNextToken()>();

     label02:
        $r2 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $i2 = $r2.<java.io.StreamTokenizer: int ttype>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 != 63 goto label03;

        $d0 = staticinvoke <weka.core.Utils: double missingValue()>();

        instance[i#6] = $d0;

        goto label20;

     label03:
        $r3 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $i3 = $r3.<java.io.StreamTokenizer: int ttype>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 == -3 goto label04;

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void errorMessage(java.lang.String)>("not a valid value");

     label04:
        $r4 = this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances m_Data>;

        $r5 = virtualinvoke $r4.<weka.core.Instances: weka.core.Attribute attribute(int)>(i#6);

        $i4 = virtualinvoke $r5.<weka.core.Attribute: int type()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        tableswitch($i4)
        {
            case 0: goto label07;
            case 1: goto label05;
            case 2: goto label10;
            case 3: goto label13;
            case 4: goto label16;
            default: goto label19;
        };

     label05:
        $r6 = this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances m_Data>;

        $r7 = virtualinvoke $r6.<weka.core.Instances: weka.core.Attribute attribute(int)>(i#6);

        $r8 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $r9 = $r8.<java.io.StreamTokenizer: java.lang.String sval>;

        index = virtualinvoke $r7.<weka.core.Attribute: int indexOfValue(java.lang.String)>($r9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(index);

        if index != -1 goto label06;

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void errorMessage(java.lang.String)>("nominal value not declared in header");

     label06:
        $d1 = (double) index;

        instance[i#6] = $d1;

        goto label20;

     label07:
        $r10 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $r11 = $r10.<java.io.StreamTokenizer: java.lang.String sval>;

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>($r11);

        $d2 = virtualinvoke $r12.<java.lang.Double: double doubleValue()>();

        instance[i#6] = $d2;

     label08:
        goto label20;

     label09:
        $r13 := @caughtexception;

        e#55 = $r13;

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void errorMessage(java.lang.String)>("number expected");

        goto label20;

     label10:
        $z0 = this.<weka.core.converters.ArffLoader$ArffReader: boolean m_batchMode>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label11;

        $z1 = this.<weka.core.converters.ArffLoader$ArffReader: boolean m_retainStringValues>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label12;

     label11:
        $r14 = this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances m_Data>;

        $r15 = virtualinvoke $r14.<weka.core.Instances: weka.core.Attribute attribute(int)>(i#6);

        $r16 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $r17 = $r16.<java.io.StreamTokenizer: java.lang.String sval>;

        $i5 = virtualinvoke $r15.<weka.core.Attribute: int addStringValue(java.lang.String)>($r17);

        $d3 = (double) $i5;

        instance[i#6] = $d3;

        goto label20;

     label12:
        instance[i#6] = 0.0;

        $r18 = this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances m_Data>;

        $r19 = virtualinvoke $r18.<weka.core.Instances: weka.core.Attribute attribute(int)>(i#6);

        $r20 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $r21 = $r20.<java.io.StreamTokenizer: java.lang.String sval>;

        virtualinvoke $r19.<weka.core.Attribute: void setStringValue(java.lang.String)>($r21);

        goto label20;

     label13:
        $r22 = this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances m_Data>;

        $r23 = virtualinvoke $r22.<weka.core.Instances: weka.core.Attribute attribute(int)>(i#6);

        $r24 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $r25 = $r24.<java.io.StreamTokenizer: java.lang.String sval>;

        $d4 = virtualinvoke $r23.<weka.core.Attribute: double parseDate(java.lang.String)>($r25);

        instance[i#6] = $d4;

     label14:
        goto label20;

     label15:
        $r26 := @caughtexception;

        e#94 = $r26;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unparseable date: ");

        $r29 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $r30 = $r29.<java.io.StreamTokenizer: java.lang.String sval>;

        $r31 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void errorMessage(java.lang.String)>($r32);

        goto label20;

     label16:
        $r33 = new weka.core.converters.ArffLoader$ArffReader;

        $r34 = new java.io.StringReader;

        $r35 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $r36 = $r35.<java.io.StreamTokenizer: java.lang.String sval>;

        specialinvoke $r34.<java.io.StringReader: void <init>(java.lang.String)>($r36);

        $r37 = this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances m_Data>;

        $r38 = virtualinvoke $r37.<weka.core.Instances: weka.core.Attribute attribute(int)>(i#6);

        $r39 = virtualinvoke $r38.<weka.core.Attribute: weka.core.Instances relation()>();

        $r40 = newarray (java.lang.String)[0];

        specialinvoke $r33.<weka.core.converters.ArffLoader$ArffReader: void <init>(java.io.Reader,weka.core.Instances,int,java.lang.String[])>($r34, $r39, 0, $r40);

        arff = $r33;

        data = virtualinvoke arff.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances getData()>();

        $r41 = this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances m_Data>;

        $r42 = virtualinvoke $r41.<weka.core.Instances: weka.core.Attribute attribute(int)>(i#6);

        $i6 = virtualinvoke $r42.<weka.core.Attribute: int addRelation(weka.core.Instances)>(data);

        $d5 = (double) $i6;

        instance[i#6] = $d5;

     label17:
        goto label20;

     label18:
        $r43 := @caughtexception;

        e#132 = $r43;

        $r44 = new java.io.IOException;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r46 = virtualinvoke e#132.<java.lang.Exception: java.lang.String toString()>();

        $r47 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of line ");

        $i7 = virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: int getLineNo()>();

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r44.<java.io.IOException: void <init>(java.lang.String)>($r50);

        throw $r44;

     label19:
        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown attribute type in column ");

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i#6);

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void errorMessage(java.lang.String)>($r54);

     label20:
        i#6 = i#6 + 1;

        goto label01;

     label21:
        weight#155 = 1.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(flag);

        if flag == 0 goto label23;

        weight#155 = virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: double getInstanceWeight()>();

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(weight#155);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label22;

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void getLastToken(boolean)>(1);

        goto label23;

     label22:
        weight#155 = 1.0;

     label23:
        $r55 = new weka.core.DenseInstance;

        specialinvoke $r55.<weka.core.DenseInstance: void <init>(double,double[])>(weight#155, instance);

        inst = $r55;

        $r56 = this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances m_Data>;

        interfaceinvoke inst.<weka.core.Instance: void setDataset(weka.core.Instances)>($r56);

        return inst;

        catch java.lang.NumberFormatException from label07 to label08 with label09;
        catch java.text.ParseException from label13 to label14 with label15;
        catch java.lang.Exception from label16 to label17 with label18;
    }

    public weka.core.Instances getData()
    {
        weka.core.converters.ArffLoader$ArffReader this;
        weka.core.Instances $r0;

        this := @this: weka.core.converters.ArffLoader$ArffReader;

        $r0 = this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances m_Data>;

        return $r0;
    }

    public transient void <init>(java.io.Reader, weka.core.Instances, int, java.lang.String[]) throws java.io.IOException
    {
        weka.core.converters.ArffLoader$ArffReader this;
        java.io.Reader reader;
        weka.core.Instances template, $r0, $r2;
        int lines;
        java.lang.String[] fieldSepAndEnclosures;
        weka.core.Instance inst, $r1;

        this := @this: weka.core.converters.ArffLoader$ArffReader;

        reader := @parameter0: java.io.Reader;

        template := @parameter1: weka.core.Instances;

        lines := @parameter2: int;

        fieldSepAndEnclosures := @parameter3: java.lang.String[];

        specialinvoke this.<weka.core.converters.ArffLoader$ArffReader: void <init>(java.io.Reader,weka.core.Instances,int,int,boolean,java.lang.String[])>(reader, template, lines, 100, 1, fieldSepAndEnclosures);

     label1:
        $r0 = this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances m_Data>;

        $r1 = virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instance readInstance(weka.core.Instances)>($r0);

        inst = $r1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 == null goto label2;

        $r2 = this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances m_Data>;

        virtualinvoke $r2.<weka.core.Instances: boolean add(weka.core.Instance)>(inst);

        goto label1;

     label2:
        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void compactify()>();

        return;
    }

    public transient void <init>(java.io.Reader, weka.core.Instances, int, int, boolean, java.lang.String[]) throws java.io.IOException
    {
        weka.core.converters.ArffLoader$ArffReader this;
        java.io.Reader reader;
        weka.core.Instances template, $r10;
        int lines, capacity, $i0, $i1, $i2, i#32, $i3, $i4, $i5;
        boolean batch;
        java.lang.String[] fieldSepAndEnclosures;
        java.lang.String $r0, $r1, $r2, $r4, $r5, $r7;
        java.util.ArrayList $r3;
        java.util.List $r6, $r8;
        java.io.StreamTokenizer $r9;

        this := @this: weka.core.converters.ArffLoader$ArffReader;

        reader := @parameter0: java.io.Reader;

        template := @parameter1: weka.core.Instances;

        lines := @parameter2: int;

        capacity := @parameter3: int;

        batch := @parameter4: boolean;

        fieldSepAndEnclosures := @parameter5: java.lang.String[];

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<weka.core.converters.ArffLoader$ArffReader: boolean m_batchMode> = 1;

        this.<weka.core.converters.ArffLoader$ArffReader: boolean m_retainStringValues> = 0;

        this.<weka.core.converters.ArffLoader$ArffReader: boolean m_batchMode> = batch;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(batch);

        if batch == 0 goto label1;

        this.<weka.core.converters.ArffLoader$ArffReader: boolean m_retainStringValues> = 1;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(fieldSepAndEnclosures);

        if fieldSepAndEnclosures == null goto label6;

        $i0 = lengthof fieldSepAndEnclosures;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label6;

        $r0 = fieldSepAndEnclosures[0];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label2;

        $r1 = fieldSepAndEnclosures[0];

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 0 goto label2;

        $r2 = fieldSepAndEnclosures[0];

        this.<weka.core.converters.ArffLoader$ArffReader: java.lang.String m_fieldSeparator> = $r2;

     label2:
        $i2 = lengthof fieldSepAndEnclosures;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 <= 1 goto label6;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        this.<weka.core.converters.ArffLoader$ArffReader: java.util.List m_enclosures> = $r3;

        i#32 = 1;

     label3:
        $i3 = lengthof fieldSepAndEnclosures;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#32);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if i#32 >= $i3 goto label5;

        $r4 = fieldSepAndEnclosures[i#32];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        if $r4 == null goto label4;

        $r5 = fieldSepAndEnclosures[i#32];

        $i4 = virtualinvoke $r5.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 <= 0 goto label4;

        $r6 = this.<weka.core.converters.ArffLoader$ArffReader: java.util.List m_enclosures>;

        $r7 = fieldSepAndEnclosures[i#32];

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r7);

     label4:
        i#32 = i#32 + 1;

        goto label3;

     label5:
        $r8 = this.<weka.core.converters.ArffLoader$ArffReader: java.util.List m_enclosures>;

        $i5 = interfaceinvoke $r8.<java.util.List: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i5 != 0 goto label6;

        this.<weka.core.converters.ArffLoader$ArffReader: java.util.List m_enclosures> = null;

     label6:
        this.<weka.core.converters.ArffLoader$ArffReader: int m_Lines> = lines;

        $r9 = new java.io.StreamTokenizer;

        specialinvoke $r9.<java.io.StreamTokenizer: void <init>(java.io.Reader)>(reader);

        this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer> = $r9;

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void initTokenizer()>();

        $r10 = new weka.core.Instances;

        specialinvoke $r10.<weka.core.Instances: void <init>(weka.core.Instances,int)>(template, capacity);

        this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances m_Data> = $r10;

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void initBuffers()>();

        return;
    }

    protected void compactify()
    {
        weka.core.converters.ArffLoader$ArffReader this;
        weka.core.Instances $r0, $r1;

        this := @this: weka.core.converters.ArffLoader$ArffReader;

        $r0 = this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances m_Data>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label1;

        $r1 = this.<weka.core.converters.ArffLoader$ArffReader: weka.core.Instances m_Data>;

        virtualinvoke $r1.<weka.core.Instances: void compactify()>();

     label1:
        return;
    }

    public int getLineNo()
    {
        weka.core.converters.ArffLoader$ArffReader this;
        int $i0, $i1, $i2;
        java.io.StreamTokenizer $r0;

        this := @this: weka.core.converters.ArffLoader$ArffReader;

        $i0 = this.<weka.core.converters.ArffLoader$ArffReader: int m_Lines>;

        $r0 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $i1 = virtualinvoke $r0.<java.io.StreamTokenizer: int lineno()>();

        $i2 = $i0 + $i1;

        return $i2;
    }

    protected double getInstanceWeight() throws java.io.IOException
    {
        weka.core.converters.ArffLoader$ArffReader this;
        java.lang.String weightS;
        java.lang.NumberFormatException e, $r6;
        double weight#2;
        java.io.StreamTokenizer $r0, $r1, $r2, $r3, $r4, $r5, $r7, $r8;
        int $i1, $i2, $i3, $i6;

        this := @this: weka.core.converters.ArffLoader$ArffReader;

        weight#2 = #NaN;

        $r0 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        virtualinvoke $r0.<java.io.StreamTokenizer: int nextToken()>();

        $r1 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $i1 = $r1.<java.io.StreamTokenizer: int ttype>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 == 10 goto label1;

        $r2 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $i2 = $r2.<java.io.StreamTokenizer: int ttype>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 != -1 goto label2;

     label1:
        return weight#2;

     label2:
        $r3 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $i3 = $r3.<java.io.StreamTokenizer: int ttype>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 != 123 goto label7;

        $r4 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        virtualinvoke $r4.<java.io.StreamTokenizer: int nextToken()>();

        $r5 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        weightS = $r5.<java.io.StreamTokenizer: java.lang.String sval>;

     label3:
        weight#2 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(weightS);

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

        e = $r6;

        return weight#2;

     label6:
        $r7 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        virtualinvoke $r7.<java.io.StreamTokenizer: int nextToken()>();

        $r8 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $i6 = $r8.<java.io.StreamTokenizer: int ttype>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if $i6 == 125 goto label7;

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void errorMessage(java.lang.String)>("Problem reading instance weight");

     label7:
        return weight#2;

        catch java.lang.NumberFormatException from label3 to label4 with label5;
    }

    protected void getIndex() throws java.io.IOException
    {
        weka.core.converters.ArffLoader$ArffReader this;
        java.io.StreamTokenizer $r0, $r1;
        int $i0, $i1;

        this := @this: weka.core.converters.ArffLoader$ArffReader;

        $r0 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $i0 = virtualinvoke $r0.<java.io.StreamTokenizer: int nextToken()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 10 goto label1;

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void errorMessage(java.lang.String)>("premature end of line");

     label1:
        $r1 = this.<weka.core.converters.ArffLoader$ArffReader: java.io.StreamTokenizer m_Tokenizer>;

        $i1 = $r1.<java.io.StreamTokenizer: int ttype>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 != -1 goto label2;

        virtualinvoke this.<weka.core.converters.ArffLoader$ArffReader: void errorMessage(java.lang.String)>("premature end of file");

     label2:
        return;
    }


