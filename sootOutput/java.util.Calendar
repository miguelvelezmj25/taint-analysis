    public static java.util.Calendar getInstance(java.util.Locale)
    {
        java.util.Locale l0;
        java.util.TimeZone $r0;
        java.util.Calendar $r1;

        l0 := @parameter0: java.util.Locale;

        $r0 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        $r1 = staticinvoke <java.util.Calendar: java.util.Calendar createCalendar(java.util.TimeZone,java.util.Locale)>($r0, l0);

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        java.util.concurrent.ConcurrentHashMap $r1;
        java.lang.String[] $r2;

        $r0 = class "java/util/Calendar";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <java.util.Calendar: boolean $assertionsDisabled> = $z1;

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>(3);

        <java.util.Calendar: java.util.concurrent.ConcurrentMap cachedLocaleData> = $r1;

        $r2 = newarray (java.lang.String)[17];

        $r2[0] = "ERA";

        $r2[1] = "YEAR";

        $r2[2] = "MONTH";

        $r2[3] = "WEEK_OF_YEAR";

        $r2[4] = "WEEK_OF_MONTH";

        $r2[5] = "DAY_OF_MONTH";

        $r2[6] = "DAY_OF_YEAR";

        $r2[7] = "DAY_OF_WEEK";

        $r2[8] = "DAY_OF_WEEK_IN_MONTH";

        $r2[9] = "AM_PM";

        $r2[10] = "HOUR";

        $r2[11] = "HOUR_OF_DAY";

        $r2[12] = "MINUTE";

        $r2[13] = "SECOND";

        $r2[14] = "MILLISECOND";

        $r2[15] = "ZONE_OFFSET";

        $r2[16] = "DST_OFFSET";

        <java.util.Calendar: java.lang.String[] FIELD_NAME> = $r2;

        return;
    }

    private static java.util.Calendar createCalendar(java.util.TimeZone, java.util.Locale)
    {
        java.util.TimeZone l0;
        java.util.Locale l1;
        sun.util.spi.CalendarProvider l2;
        java.lang.String l4, l5, $r6, $r7, $r9, $r10, $r11;
        sun.util.locale.provider.LocaleProviderAdapter $r0;
        java.util.Calendar $r1, tmp$2145680241;
        java.lang.IllegalArgumentException $r2, l3#11;
        java.lang.Object l3#13;
        boolean $z0, $z1, $z2, $z3;
        byte l6#22;
        int $i0;
        sun.util.BuddhistCalendar tmp$1550043428, tmp$1051346034;
        java.util.JapaneseImperialCalendar tmp$1223292062, tmp$984329887;
        java.util.GregorianCalendar tmp$824967721, tmp$1866557542;

        l0 := @parameter0: java.util.TimeZone;

        l1 := @parameter1: java.util.Locale;

        $r0 = staticinvoke <sun.util.locale.provider.LocaleProviderAdapter: sun.util.locale.provider.LocaleProviderAdapter getAdapter(java.lang.Class,java.util.Locale)>(class "sun/util/spi/CalendarProvider", l1);

        l2 = virtualinvoke $r0.<sun.util.locale.provider.LocaleProviderAdapter: sun.util.spi.CalendarProvider getCalendarProvider()>();

        if l2 == null goto label04;

     label01:
        $r1 = virtualinvoke l2.<sun.util.spi.CalendarProvider: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)>(l0, l1);

     label02:
        return $r1;

     label03:
        $r2 := @caughtexception;

     label04:
        l3#13 = null;

        $z0 = virtualinvoke l1.<java.util.Locale: boolean hasExtensions()>();

        if $z0 == 0 goto label12;

        l4 = virtualinvoke l1.<java.util.Locale: java.lang.String getUnicodeLocaleType(java.lang.String)>("ca");

        if l4 == null goto label12;

        l5 = l4;

        l6#22 = -1;

        $i0 = virtualinvoke l5.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case -1581060683: goto label05;
            case -752730191: goto label06;
            case 283776265: goto label07;
            default: goto label08;
        };

     label05:
        $z1 = virtualinvoke l5.<java.lang.String: boolean equals(java.lang.Object)>("buddhist");

        if $z1 == 0 goto label08;

        l6#22 = 0;

        goto label08;

     label06:
        $z2 = virtualinvoke l5.<java.lang.String: boolean equals(java.lang.Object)>("japanese");

        if $z2 == 0 goto label08;

        l6#22 = 1;

        goto label08;

     label07:
        $z3 = virtualinvoke l5.<java.lang.String: boolean equals(java.lang.Object)>("gregory");

        if $z3 == 0 goto label08;

        l6#22 = 2;

     label08:
        tableswitch(l6#22)
        {
            case 0: goto label09;
            case 1: goto label10;
            case 2: goto label11;
            default: goto label12;
        };

     label09:
        tmp$1550043428 = new sun.util.BuddhistCalendar;

        specialinvoke tmp$1550043428.<sun.util.BuddhistCalendar: void <init>(java.util.TimeZone,java.util.Locale)>(l0, l1);

        l3#13 = tmp$1550043428;

        goto label12;

     label10:
        tmp$1223292062 = new java.util.JapaneseImperialCalendar;

        specialinvoke tmp$1223292062.<java.util.JapaneseImperialCalendar: void <init>(java.util.TimeZone,java.util.Locale)>(l0, l1);

        l3#13 = tmp$1223292062;

        goto label12;

     label11:
        tmp$824967721 = new java.util.GregorianCalendar;

        specialinvoke tmp$824967721.<java.util.GregorianCalendar: void <init>(java.util.TimeZone,java.util.Locale)>(l0, l1);

        l3#13 = tmp$824967721;

     label12:
        if l3#13 != null goto label15;

        $r6 = virtualinvoke l1.<java.util.Locale: java.lang.String getLanguage()>();

        if $r6 != "th" goto label13;

        $r7 = virtualinvoke l1.<java.util.Locale: java.lang.String getCountry()>();

        if $r7 != "TH" goto label13;

        tmp$1051346034 = new sun.util.BuddhistCalendar;

        specialinvoke tmp$1051346034.<sun.util.BuddhistCalendar: void <init>(java.util.TimeZone,java.util.Locale)>(l0, l1);

        l3#13 = tmp$1051346034;

        goto label15;

     label13:
        $r9 = virtualinvoke l1.<java.util.Locale: java.lang.String getVariant()>();

        if $r9 != "JP" goto label14;

        $r10 = virtualinvoke l1.<java.util.Locale: java.lang.String getLanguage()>();

        if $r10 != "ja" goto label14;

        $r11 = virtualinvoke l1.<java.util.Locale: java.lang.String getCountry()>();

        if $r11 != "JP" goto label14;

        tmp$984329887 = new java.util.JapaneseImperialCalendar;

        specialinvoke tmp$984329887.<java.util.JapaneseImperialCalendar: void <init>(java.util.TimeZone,java.util.Locale)>(l0, l1);

        l3#13 = tmp$984329887;

        goto label15;

     label14:
        tmp$1866557542 = new java.util.GregorianCalendar;

        specialinvoke tmp$1866557542.<java.util.GregorianCalendar: void <init>(java.util.TimeZone,java.util.Locale)>(l0, l1);

        l3#13 = tmp$1866557542;

     label15:
        tmp$2145680241 = (java.util.Calendar) l3#13;

        return tmp$2145680241;

        catch java.lang.IllegalArgumentException from label01 to label02 with label03;
    }

    protected void <init>(java.util.TimeZone, java.util.Locale)
    {
        java.util.Calendar l0;
        java.util.TimeZone l1;
        java.util.Locale l2;
        int[] $r0, $r2;
        boolean[] $r1;

        l0 := @this: java.util.Calendar;

        l1 := @parameter0: java.util.TimeZone;

        l2 := @parameter1: java.util.Locale;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        l0.<java.util.Calendar: boolean lenient> = 1;

        l0.<java.util.Calendar: boolean sharedZone> = 0;

        l0.<java.util.Calendar: int nextStamp> = 2;

        l0.<java.util.Calendar: int serialVersionOnStream> = 1;

        $r0 = newarray (int)[17];

        l0.<java.util.Calendar: int[] fields> = $r0;

        $r1 = newarray (boolean)[17];

        l0.<java.util.Calendar: boolean[] isSet> = $r1;

        $r2 = newarray (int)[17];

        l0.<java.util.Calendar: int[] stamp> = $r2;

        l0.<java.util.Calendar: java.util.TimeZone zone> = l1;

        specialinvoke l0.<java.util.Calendar: void setWeekCountData(java.util.Locale)>(l2);

        return;
    }

    public void setTimeInMillis(long)
    {
        java.util.Calendar l0;
        long l1, $l0;
        byte $b1;
        boolean $z1, $z2, $z3, $z4, $z5;
        java.util.TimeZone $r0, $r1;
        sun.util.calendar.ZoneInfo $r2;

        l0 := @this: java.util.Calendar;

        l1 := @parameter0: long;

        $l0 = l0.<java.util.Calendar: long time>;

        $b1 = $l0 cmp l1;

        if $b1 != 0 goto label1;

        $z1 = l0.<java.util.Calendar: boolean isTimeSet>;

        if $z1 == 0 goto label1;

        $z2 = l0.<java.util.Calendar: boolean areFieldsSet>;

        if $z2 == 0 goto label1;

        $z3 = l0.<java.util.Calendar: boolean areAllFieldsSet>;

        if $z3 == 0 goto label1;

        $r0 = l0.<java.util.Calendar: java.util.TimeZone zone>;

        $z4 = $r0 instanceof sun.util.calendar.ZoneInfo;

        if $z4 == 0 goto label1;

        $r1 = l0.<java.util.Calendar: java.util.TimeZone zone>;

        $r2 = (sun.util.calendar.ZoneInfo) $r1;

        $z5 = virtualinvoke $r2.<sun.util.calendar.ZoneInfo: boolean isDirty()>();

        if $z5 != 0 goto label1;

        return;

     label1:
        l0.<java.util.Calendar: long time> = l1;

        l0.<java.util.Calendar: boolean isTimeSet> = 1;

        l0.<java.util.Calendar: boolean areFieldsSet> = 0;

        virtualinvoke l0.<java.util.Calendar: void computeFields()>();

        l0.<java.util.Calendar: boolean areFieldsSet> = 1;

        l0.<java.util.Calendar: boolean areAllFieldsSet> = 1;

        return;
    }

    final boolean isPartiallyNormalized()
    {
        java.util.Calendar l0;
        boolean $z0, $z1, $z2;

        l0 := @this: java.util.Calendar;

        $z0 = l0.<java.util.Calendar: boolean areFieldsSet>;

        if $z0 == 0 goto label1;

        $z1 = l0.<java.util.Calendar: boolean areAllFieldsSet>;

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    final int getSetStateFields()
    {
        java.util.Calendar l0;
        int l1#2, l2#4, $i0, $i1, $i2;
        int[] $r0, $r1;

        l0 := @this: java.util.Calendar;

        l1#2 = 0;

        l2#4 = 0;

     label1:
        $r0 = l0.<java.util.Calendar: int[] fields>;

        $i0 = lengthof $r0;

        if l2#4 >= $i0 goto label3;

        $r1 = l0.<java.util.Calendar: int[] stamp>;

        $i1 = $r1[l2#4];

        if $i1 == 0 goto label2;

        $i2 = 1 << l2#4;

        l1#2 = l1#2 | $i2;

     label2:
        l2#4 = l2#4 + 1;

        goto label1;

     label3:
        return l1#2;
    }

    final void setFieldsComputed(int)
    {
        java.util.Calendar l0;
        int l1#1, l2#5, $i0, l2#24, $i1, $i2;
        int[] $r0, $r1, $r3, $r4;
        boolean[] $r2, $r5, $r6;
        boolean $z1, $z2;

        l0 := @this: java.util.Calendar;

        l1#1 := @parameter0: int;

        if l1#1 != 131071 goto label3;

        l2#5 = 0;

     label1:
        $r0 = l0.<java.util.Calendar: int[] fields>;

        $i0 = lengthof $r0;

        if l2#5 >= $i0 goto label2;

        $r1 = l0.<java.util.Calendar: int[] stamp>;

        $r1[l2#5] = 1;

        $r2 = l0.<java.util.Calendar: boolean[] isSet>;

        $r2[l2#5] = 1;

        l2#5 = l2#5 + 1;

        goto label1;

     label2:
        l0.<java.util.Calendar: boolean areAllFieldsSet> = 1;

        l0.<java.util.Calendar: boolean areFieldsSet> = 1;

        goto label7;

     label3:
        l2#24 = 0;

     label4:
        $r3 = l0.<java.util.Calendar: int[] fields>;

        $i1 = lengthof $r3;

        if l2#24 >= $i1 goto label7;

        $i2 = l1#1 & 1;

        if $i2 != 1 goto label5;

        $r4 = l0.<java.util.Calendar: int[] stamp>;

        $r4[l2#24] = 1;

        $r5 = l0.<java.util.Calendar: boolean[] isSet>;

        $r5[l2#24] = 1;

        goto label6;

     label5:
        $z1 = l0.<java.util.Calendar: boolean areAllFieldsSet>;

        if $z1 == 0 goto label6;

        $r6 = l0.<java.util.Calendar: boolean[] isSet>;

        $z2 = $r6[l2#24];

        if $z2 != 0 goto label6;

        l0.<java.util.Calendar: boolean areAllFieldsSet> = 0;

     label6:
        l1#1 = l1#1 >>> 1;

        l2#24 = l2#24 + 1;

        goto label4;

     label7:
        return;
    }

    static boolean isFieldSet(int, int)
    {
        int l0, l1, $i0, $i1;
        boolean $z0;

        l0 := @parameter0: int;

        l1 := @parameter1: int;

        $i0 = 1 << l1;

        $i1 = l0 & $i0;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    java.util.TimeZone getZone()
    {
        java.util.Calendar l0;
        java.util.TimeZone $r0;

        l0 := @this: java.util.Calendar;

        $r0 = l0.<java.util.Calendar: java.util.TimeZone zone>;

        return $r0;
    }

    protected final int internalGet(int)
    {
        java.util.Calendar l0;
        int l1, $i0;
        int[] $r0;

        l0 := @this: java.util.Calendar;

        l1 := @parameter0: int;

        $r0 = l0.<java.util.Calendar: int[] fields>;

        $i0 = $r0[l1];

        return $i0;
    }

    final void internalSet(int, int)
    {
        java.util.Calendar l0;
        int l1, l2;
        int[] $r0;

        l0 := @this: java.util.Calendar;

        l1 := @parameter0: int;

        l2 := @parameter1: int;

        $r0 = l0.<java.util.Calendar: int[] fields>;

        $r0[l1] = l2;

        return;
    }

    public int getFirstDayOfWeek()
    {
        java.util.Calendar l0;
        int $i0;

        l0 := @this: java.util.Calendar;

        $i0 = l0.<java.util.Calendar: int firstDayOfWeek>;

        return $i0;
    }

    public int getMinimalDaysInFirstWeek()
    {
        java.util.Calendar l0;
        int $i0;

        l0 := @this: java.util.Calendar;

        $i0 = l0.<java.util.Calendar: int minimalDaysInFirstWeek>;

        return $i0;
    }

    private void setWeekCountData(java.util.Locale)
    {
        java.util.Calendar l0;
        java.util.Locale l1;
        java.util.concurrent.ConcurrentMap $r0, $r2;
        java.lang.Object $r1;
        int[] l2#5;
        int $i0, $i1, $i2, $i3;

        l0 := @this: java.util.Calendar;

        l1 := @parameter0: java.util.Locale;

        $r0 = <java.util.Calendar: java.util.concurrent.ConcurrentMap cachedLocaleData>;

        $r1 = interfaceinvoke $r0.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(l1);

        l2#5 = (int[]) $r1;

        if l2#5 != null goto label1;

        l2#5 = newarray (int)[2];

        $i0 = staticinvoke <sun.util.locale.provider.CalendarDataUtility: int retrieveFirstDayOfWeek(java.util.Locale)>(l1);

        l2#5[0] = $i0;

        $i1 = staticinvoke <sun.util.locale.provider.CalendarDataUtility: int retrieveMinimalDaysInFirstWeek(java.util.Locale)>(l1);

        l2#5[1] = $i1;

        $r2 = <java.util.Calendar: java.util.concurrent.ConcurrentMap cachedLocaleData>;

        interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(l1, l2#5);

     label1:
        $i2 = l2#5[0];

        l0.<java.util.Calendar: int firstDayOfWeek> = $i2;

        $i3 = l2#5[1];

        l0.<java.util.Calendar: int minimalDaysInFirstWeek> = $i3;

        return;
    }

    public final void setTime(java.util.Date)
    {
        java.util.Calendar l0;
        java.util.Date l1;
        long $l0;

        l0 := @this: java.util.Calendar;

        l1 := @parameter0: java.util.Date;

        $l0 = virtualinvoke l1.<java.util.Date: long getTime()>();

        virtualinvoke l0.<java.util.Calendar: void setTimeInMillis(long)>($l0);

        return;
    }

    public void setLenient(boolean)
    {
        java.util.Calendar l0;
        boolean l1;

        l0 := @this: java.util.Calendar;

        l1 := @parameter0: boolean;

        l0.<java.util.Calendar: boolean lenient> = 1;

        return;
    }

    public long getTimeInMillis()
    {
        java.util.Calendar l0;
        boolean $z0;
        long $l0;

        l0 := @this: java.util.Calendar;

        $z0 = l0.<java.util.Calendar: boolean isTimeSet>;

        if $z0 != 0 goto label1;

        specialinvoke l0.<java.util.Calendar: void updateTime()>();

     label1:
        $l0 = l0.<java.util.Calendar: long time>;

        return $l0;
    }

    public int get(int)
    {
        java.util.Calendar l0;
        int l1, $i0;

        l0 := @this: java.util.Calendar;

        l1 := @parameter0: int;

        virtualinvoke l0.<java.util.Calendar: void complete()>();

        $i0 = virtualinvoke l0.<java.util.Calendar: int internalGet(int)>(l1);

        return $i0;
    }

    public java.util.TimeZone getTimeZone()
    {
        java.util.Calendar l0;
        boolean $z0;
        java.util.TimeZone $r0, $r2, $r3;
        java.lang.Object $r1;

        l0 := @this: java.util.Calendar;

        $z0 = l0.<java.util.Calendar: boolean sharedZone>;

        if $z0 == 0 goto label1;

        $r0 = l0.<java.util.Calendar: java.util.TimeZone zone>;

        $r1 = virtualinvoke $r0.<java.util.TimeZone: java.lang.Object clone()>();

        $r2 = (java.util.TimeZone) $r1;

        l0.<java.util.Calendar: java.util.TimeZone zone> = $r2;

        l0.<java.util.Calendar: boolean sharedZone> = 0;

     label1:
        $r3 = l0.<java.util.Calendar: java.util.TimeZone zone>;

        return $r3;
    }

    protected void complete()
    {
        java.util.Calendar l0;
        boolean $z1, $z2, $z3;

        l0 := @this: java.util.Calendar;

        $z1 = l0.<java.util.Calendar: boolean isTimeSet>;

        if $z1 != 0 goto label1;

        specialinvoke l0.<java.util.Calendar: void updateTime()>();

     label1:
        $z2 = l0.<java.util.Calendar: boolean areFieldsSet>;

        if $z2 == 0 goto label2;

        $z3 = l0.<java.util.Calendar: boolean areAllFieldsSet>;

        if $z3 != 0 goto label3;

     label2:
        virtualinvoke l0.<java.util.Calendar: void computeFields()>();

        l0.<java.util.Calendar: boolean areFieldsSet> = 1;

        l0.<java.util.Calendar: boolean areAllFieldsSet> = 1;

     label3:
        return;
    }

    private void updateTime()
    {
        java.util.Calendar l0;

        l0 := @this: java.util.Calendar;

        virtualinvoke l0.<java.util.Calendar: void computeTime()>();

        l0.<java.util.Calendar: boolean isTimeSet> = 1;

        return;
    }

    static java.lang.String getFieldName(int)
    {
        int l0;
        java.lang.String[] $r0;
        java.lang.String $r1;

        l0 := @parameter0: int;

        $r0 = <java.util.Calendar: java.lang.String[] FIELD_NAME>;

        $r1 = $r0[l0];

        return $r1;
    }

    public boolean isLenient()
    {
        java.util.Calendar l0;
        boolean $z0;

        l0 := @this: java.util.Calendar;

        $z0 = l0.<java.util.Calendar: boolean lenient>;

        return $z0;
    }

    final boolean isExternallySet(int)
    {
        java.util.Calendar l0;
        int l1, $i0;
        int[] $r0;
        boolean $z0;

        l0 := @this: java.util.Calendar;

        l1 := @parameter0: int;

        $r0 = l0.<java.util.Calendar: int[] stamp>;

        $i0 = $r0[l1];

        if $i0 < 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    final int selectFields()
    {
        java.util.Calendar l0;
        int l2, l3, l7, l10, l11, $i0, l4#22, $i1, l5#29, $i2, l6#36, $i3, l8#47, l9#49, $i4, $i5, $i7, $i8, $i9, $i10, l1#110, $i11, $i12, $i13, $i14, $i15, $i16, l9#201, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24;
        short l1#2;
        int[] $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r16, $r17, $r19, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32;
        boolean $z0, $z1, $z2, $z3;
        java.lang.AssertionError $r15, $r18, $r20, $r21;

        l0 := @this: java.util.Calendar;

        l1#2 = 2;

        $r0 = l0.<java.util.Calendar: int[] stamp>;

        $i0 = $r0[0];

        if $i0 == 0 goto label01;

        l1#2 = 3;

     label01:
        $r1 = l0.<java.util.Calendar: int[] stamp>;

        l2 = $r1[7];

        $r2 = l0.<java.util.Calendar: int[] stamp>;

        l3 = $r2[2];

        $r3 = l0.<java.util.Calendar: int[] stamp>;

        l4#22 = $r3[5];

        $r4 = l0.<java.util.Calendar: int[] stamp>;

        $i1 = $r4[4];

        l5#29 = staticinvoke <java.util.Calendar: int aggregateStamp(int,int)>($i1, l2);

        $r5 = l0.<java.util.Calendar: int[] stamp>;

        $i2 = $r5[8];

        l6#36 = staticinvoke <java.util.Calendar: int aggregateStamp(int,int)>($i2, l2);

        $r6 = l0.<java.util.Calendar: int[] stamp>;

        l7 = $r6[6];

        $r7 = l0.<java.util.Calendar: int[] stamp>;

        $i3 = $r7[3];

        l8#47 = staticinvoke <java.util.Calendar: int aggregateStamp(int,int)>($i3, l2);

        l9#49 = l4#22;

        if l5#29 <= l9#49 goto label02;

        l9#49 = l5#29;

     label02:
        if l6#36 <= l9#49 goto label03;

        l9#49 = l6#36;

     label03:
        if l7 <= l9#49 goto label04;

        l9#49 = l7;

     label04:
        if l8#47 <= l9#49 goto label05;

        l9#49 = l8#47;

     label05:
        if l9#49 != 0 goto label06;

        $r8 = l0.<java.util.Calendar: int[] stamp>;

        l5#29 = $r8[4];

        $r9 = l0.<java.util.Calendar: int[] stamp>;

        $i4 = $r9[8];

        l6#36 = staticinvoke <java.lang.Math: int max(int,int)>($i4, l2);

        $r10 = l0.<java.util.Calendar: int[] stamp>;

        l8#47 = $r10[3];

        $i5 = staticinvoke <java.lang.Math: int max(int,int)>(l5#29, l6#36);

        l9#49 = staticinvoke <java.lang.Math: int max(int,int)>($i5, l8#47);

        if l9#49 != 0 goto label06;

        l4#22 = l3;

        l9#49 = l3;

     label06:
        if l9#49 == l4#22 goto label08;

        if l9#49 != l5#29 goto label07;

        $r11 = l0.<java.util.Calendar: int[] stamp>;

        $i7 = $r11[4];

        $r12 = l0.<java.util.Calendar: int[] stamp>;

        $i8 = $r12[3];

        if $i7 >= $i8 goto label08;

     label07:
        if l9#49 != l6#36 goto label16;

        $r13 = l0.<java.util.Calendar: int[] stamp>;

        $i9 = $r13[8];

        $r14 = l0.<java.util.Calendar: int[] stamp>;

        $i10 = $r14[3];

        if $i9 < $i10 goto label16;

     label08:
        l1#110 = l1#2 | 4;

        if l9#49 != l4#22 goto label09;

        l1#110 = l1#110 | 32;

        goto label21;

     label09:
        $z0 = <java.util.Calendar: boolean $assertionsDisabled>;

        if $z0 != 0 goto label10;

        if l9#49 == l5#29 goto label10;

        if l9#49 == l6#36 goto label10;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label10:
        if l2 == 0 goto label11;

        l1#110 = l1#110 | 128;

     label11:
        if l5#29 != l6#36 goto label13;

        $r16 = l0.<java.util.Calendar: int[] stamp>;

        $i11 = $r16[4];

        $r17 = l0.<java.util.Calendar: int[] stamp>;

        $i12 = $r17[8];

        if $i11 < $i12 goto label12;

        l1#110 = l1#110 | 16;

        goto label21;

     label12:
        l1#110 = l1#110 | 256;

        goto label21;

     label13:
        if l9#49 != l5#29 goto label14;

        l1#110 = l1#110 | 16;

        goto label21;

     label14:
        $z1 = <java.util.Calendar: boolean $assertionsDisabled>;

        if $z1 != 0 goto label15;

        if l9#49 == l6#36 goto label15;

        $r18 = new java.lang.AssertionError;

        specialinvoke $r18.<java.lang.AssertionError: void <init>()>();

        throw $r18;

     label15:
        $r19 = l0.<java.util.Calendar: int[] stamp>;

        $i13 = $r19[8];

        if $i13 == 0 goto label21;

        l1#110 = l1#110 | 256;

        goto label21;

     label16:
        $z2 = <java.util.Calendar: boolean $assertionsDisabled>;

        if $z2 != 0 goto label17;

        if l9#49 == l7 goto label17;

        if l9#49 == l8#47 goto label17;

        if l9#49 == 0 goto label17;

        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();

        throw $r20;

     label17:
        if l9#49 != l7 goto label18;

        l1#110 = l1#2 | 64;

        goto label21;

     label18:
        $z3 = <java.util.Calendar: boolean $assertionsDisabled>;

        if $z3 != 0 goto label19;

        if l9#49 == l8#47 goto label19;

        $r21 = new java.lang.AssertionError;

        specialinvoke $r21.<java.lang.AssertionError: void <init>()>();

        throw $r21;

     label19:
        if l2 == 0 goto label20;

        l1#2 = l1#2 | 128;

     label20:
        l1#110 = l1#2 | 8;

     label21:
        $r22 = l0.<java.util.Calendar: int[] stamp>;

        l10 = $r22[11];

        $r23 = l0.<java.util.Calendar: int[] stamp>;

        $i14 = $r23[10];

        $r24 = l0.<java.util.Calendar: int[] stamp>;

        $i15 = $r24[9];

        l11 = staticinvoke <java.util.Calendar: int aggregateStamp(int,int)>($i14, $i15);

        if l11 <= l10 goto label22;

        $i16 = l11;

        goto label23;

     label22:
        $i16 = l10;

     label23:
        l9#201 = $i16;

        if l9#201 != 0 goto label24;

        $r25 = l0.<java.util.Calendar: int[] stamp>;

        $i17 = $r25[10];

        $r26 = l0.<java.util.Calendar: int[] stamp>;

        $i18 = $r26[9];

        l9#201 = staticinvoke <java.lang.Math: int max(int,int)>($i17, $i18);

     label24:
        if l9#201 == 0 goto label26;

        if l9#201 != l10 goto label25;

        l1#110 = l1#110 | 2048;

        goto label26;

     label25:
        l1#110 = l1#110 | 1024;

        $r27 = l0.<java.util.Calendar: int[] stamp>;

        $i19 = $r27[9];

        if $i19 == 0 goto label26;

        l1#110 = l1#110 | 512;

     label26:
        $r28 = l0.<java.util.Calendar: int[] stamp>;

        $i20 = $r28[12];

        if $i20 == 0 goto label27;

        l1#110 = l1#110 | 4096;

     label27:
        $r29 = l0.<java.util.Calendar: int[] stamp>;

        $i21 = $r29[13];

        if $i21 == 0 goto label28;

        l1#110 = l1#110 | 8192;

     label28:
        $r30 = l0.<java.util.Calendar: int[] stamp>;

        $i22 = $r30[14];

        if $i22 == 0 goto label29;

        l1#110 = l1#110 | 16384;

     label29:
        $r31 = l0.<java.util.Calendar: int[] stamp>;

        $i23 = $r31[15];

        if $i23 < 2 goto label30;

        l1#110 = l1#110 | 32768;

     label30:
        $r32 = l0.<java.util.Calendar: int[] stamp>;

        $i24 = $r32[16];

        if $i24 < 2 goto label31;

        l1#110 = l1#110 | 65536;

     label31:
        return l1#110;
    }

    public final boolean isSet(int)
    {
        java.util.Calendar l0;
        int l1, $i0;
        int[] $r0;
        boolean $z0;

        l0 := @this: java.util.Calendar;

        l1 := @parameter0: int;

        $r0 = l0.<java.util.Calendar: int[] stamp>;

        $i0 = $r0[l1];

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    final void setFieldsNormalized(int)
    {
        java.util.Calendar l0;
        int l1#1, l2#5, $i1, $i2;
        int[] $r0, $r1, $r2;
        boolean[] $r3;

        l0 := @this: java.util.Calendar;

        l1#1 := @parameter0: int;

        if l1#1 == 131071 goto label3;

        l2#5 = 0;

     label1:
        $r0 = l0.<java.util.Calendar: int[] fields>;

        $i1 = lengthof $r0;

        if l2#5 >= $i1 goto label3;

        $i2 = l1#1 & 1;

        if $i2 != 0 goto label2;

        $r1 = l0.<java.util.Calendar: int[] stamp>;

        $r2 = l0.<java.util.Calendar: int[] fields>;

        $r2[l2#5] = 0;

        $r1[l2#5] = 0;

        $r3 = l0.<java.util.Calendar: boolean[] isSet>;

        $r3[l2#5] = 0;

     label2:
        l1#1 = l1#1 >> 1;

        l2#5 = l2#5 + 1;

        goto label1;

     label3:
        l0.<java.util.Calendar: boolean areFieldsSet> = 1;

        l0.<java.util.Calendar: boolean areAllFieldsSet> = 0;

        return;
    }

    private static int aggregateStamp(int, int)
    {
        int l0, l1, $i0;

        l0 := @parameter0: int;

        l1 := @parameter1: int;

        if l0 == 0 goto label1;

        if l1 != 0 goto label2;

     label1:
        return 0;

     label2:
        if l0 <= l1 goto label3;

        $i0 = l0;

        goto label4;

     label3:
        $i0 = l1;

     label4:
        return $i0;
    }

    public java.lang.Object clone()
    {
        java.util.Calendar l0, l1#4;
        java.lang.Object $r0, $r11;
        int[] $r1, $r3, $r4, $r5, $r6, $r7;
        boolean[] $r2, $r8, $r9;
        int l2#15, $i0, $i1;
        boolean $z0;
        java.util.TimeZone $r10, $r12;
        java.lang.CloneNotSupportedException $r14, l1#46;
        java.lang.InternalError $r15;

        l0 := @this: java.util.Calendar;

     label1:
        $r0 = specialinvoke l0.<java.lang.Object: java.lang.Object clone()>();

        l1#4 = (java.util.Calendar) $r0;

        $r1 = newarray (int)[17];

        l1#4.<java.util.Calendar: int[] fields> = $r1;

        $r2 = newarray (boolean)[17];

        l1#4.<java.util.Calendar: boolean[] isSet> = $r2;

        $r3 = newarray (int)[17];

        l1#4.<java.util.Calendar: int[] stamp> = $r3;

        l2#15 = 0;

     label2:
        if l2#15 >= 17 goto label3;

        $r4 = l1#4.<java.util.Calendar: int[] fields>;

        $r5 = l0.<java.util.Calendar: int[] fields>;

        $i0 = $r5[l2#15];

        $r4[l2#15] = $i0;

        $r6 = l1#4.<java.util.Calendar: int[] stamp>;

        $r7 = l0.<java.util.Calendar: int[] stamp>;

        $i1 = $r7[l2#15];

        $r6[l2#15] = $i1;

        $r8 = l1#4.<java.util.Calendar: boolean[] isSet>;

        $r9 = l0.<java.util.Calendar: boolean[] isSet>;

        $z0 = $r9[l2#15];

        $r8[l2#15] = $z0;

        l2#15 = l2#15 + 1;

        goto label2;

     label3:
        $r10 = l0.<java.util.Calendar: java.util.TimeZone zone>;

        $r11 = virtualinvoke $r10.<java.util.TimeZone: java.lang.Object clone()>();

        $r12 = (java.util.TimeZone) $r11;

        l1#4.<java.util.Calendar: java.util.TimeZone zone> = $r12;

     label4:
        return l1#4;

     label5:
        $r14 := @caughtexception;

        l1#46 = $r14;

        $r15 = new java.lang.InternalError;

        specialinvoke $r15.<java.lang.InternalError: void <init>(java.lang.Throwable)>(l1#46);

        throw $r15;

        catch java.lang.CloneNotSupportedException from label1 to label4 with label5;
    }

    final boolean isFullyNormalized()
    {
        java.util.Calendar l0;
        boolean $z0, $z1, $z2;

        l0 := @this: java.util.Calendar;

        $z0 = l0.<java.util.Calendar: boolean areFieldsSet>;

        if $z0 == 0 goto label1;

        $z1 = l0.<java.util.Calendar: boolean areAllFieldsSet>;

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public void set(int, int)
    {
        java.util.Calendar l0;
        int l1, l2, $i0, $i1, $i2;
        boolean $z0, $z1;
        boolean[] $r0;
        int[] $r1;

        l0 := @this: java.util.Calendar;

        l1 := @parameter0: int;

        l2 := @parameter1: int;

        $z0 = l0.<java.util.Calendar: boolean areFieldsSet>;

        if $z0 == 0 goto label1;

        $z1 = l0.<java.util.Calendar: boolean areAllFieldsSet>;

        if $z1 != 0 goto label1;

        virtualinvoke l0.<java.util.Calendar: void computeFields()>();

     label1:
        virtualinvoke l0.<java.util.Calendar: void internalSet(int,int)>(l1, l2);

        l0.<java.util.Calendar: boolean isTimeSet> = 0;

        l0.<java.util.Calendar: boolean areFieldsSet> = 0;

        $r0 = l0.<java.util.Calendar: boolean[] isSet>;

        $r0[l1] = 1;

        $r1 = l0.<java.util.Calendar: int[] stamp>;

        $i0 = l0.<java.util.Calendar: int nextStamp>;

        $i1 = $i0 + 1;

        l0.<java.util.Calendar: int nextStamp> = $i1;

        $r1[l1] = $i0;

        $i2 = l0.<java.util.Calendar: int nextStamp>;

        if $i2 != 2147483647 goto label2;

        specialinvoke l0.<java.util.Calendar: void adjustStamp()>();

     label2:
        return;
    }

    private void adjustStamp()
    {
        java.util.Calendar l0;
        int l5, l1#2, l2#4, l3#6, l4#8, $i0, l4#30, $i1, $i2;
        int[] $r0, $r1, $r2, $r3, $r4;

        l0 := @this: java.util.Calendar;

        l1#2 = 2;

        l2#4 = 2;

     label01:
        l3#6 = 2147483647;

        l4#8 = 0;

     label02:
        $r0 = l0.<java.util.Calendar: int[] stamp>;

        $i0 = lengthof $r0;

        if l4#8 >= $i0 goto label05;

        $r1 = l0.<java.util.Calendar: int[] stamp>;

        l5 = $r1[l4#8];

        if l5 < l2#4 goto label03;

        if l3#6 <= l5 goto label03;

        l3#6 = l5;

     label03:
        if l1#2 >= l5 goto label04;

        l1#2 = l5;

     label04:
        l4#8 = l4#8 + 1;

        goto label02;

     label05:
        if l1#2 == l3#6 goto label06;

        if l3#6 != 2147483647 goto label06;

        goto label11;

     label06:
        l4#30 = 0;

     label07:
        $r2 = l0.<java.util.Calendar: int[] stamp>;

        $i1 = lengthof $r2;

        if l4#30 >= $i1 goto label09;

        $r3 = l0.<java.util.Calendar: int[] stamp>;

        $i2 = $r3[l4#30];

        if $i2 != l3#6 goto label08;

        $r4 = l0.<java.util.Calendar: int[] stamp>;

        $r4[l4#30] = l2#4;

     label08:
        l4#30 = l4#30 + 1;

        goto label07;

     label09:
        l2#4 = l2#4 + 1;

        if l3#6 != l1#2 goto label10;

        goto label11;

     label10:
        goto label01;

     label11:
        l0.<java.util.Calendar: int nextStamp> = l2#4;

        return;
    }

    public void setTimeZone(java.util.TimeZone)
    {
        java.util.Calendar l0;
        java.util.TimeZone l1;

        l0 := @this: java.util.Calendar;

        l1 := @parameter0: java.util.TimeZone;

        l0.<java.util.Calendar: java.util.TimeZone zone> = l1;

        l0.<java.util.Calendar: boolean sharedZone> = 0;

        l0.<java.util.Calendar: boolean areFieldsSet> = 0;

        l0.<java.util.Calendar: boolean areAllFieldsSet> = 0;

        return;
    }


