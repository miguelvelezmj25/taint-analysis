    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "org/tukaani/xz/lzma/LZMAEncoderNormal";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.tukaani.xz.lzma.LZMAEncoderNormal: boolean $assertionsDisabled> = $z1;

        return;
    }

    void <init>(org.tukaani.xz.rangecoder.RangeEncoder, int, int, int, int, int, int, int, int)
    {
        org.tukaani.xz.lzma.LZMAEncoderNormal this;
        org.tukaani.xz.rangecoder.RangeEncoder rc;
        int lc, lp, pb, dictSize, extraSizeBefore, niceLen, mf, depthLimit, $i0, i#31;
        org.tukaani.xz.lz.LZEncoder $r0;
        org.tukaani.xz.lzma.Optimum[] $r1, $r4;
        int[] $r2;
        org.tukaani.xz.lzma.State $r3;
        org.tukaani.xz.lzma.Optimum $r5;

        this := @this: org.tukaani.xz.lzma.LZMAEncoderNormal;

        rc := @parameter0: org.tukaani.xz.rangecoder.RangeEncoder;

        lc := @parameter1: int;

        lp := @parameter2: int;

        pb := @parameter3: int;

        dictSize := @parameter4: int;

        extraSizeBefore := @parameter5: int;

        niceLen := @parameter6: int;

        mf := @parameter7: int;

        depthLimit := @parameter8: int;

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>(extraSizeBefore, 4096);

        $r0 = staticinvoke <org.tukaani.xz.lz.LZEncoder: org.tukaani.xz.lz.LZEncoder getInstance(int,int,int,int,int,int,int)>(dictSize, $i0, 4096, niceLen, 273, mf, depthLimit);

        specialinvoke this.<org.tukaani.xz.lzma.LZMAEncoder: void <init>(org.tukaani.xz.rangecoder.RangeEncoder,org.tukaani.xz.lz.LZEncoder,int,int,int,int,int)>(rc, $r0, lc, lp, pb, dictSize, niceLen);

        $r1 = newarray (org.tukaani.xz.lzma.Optimum)[4096];

        this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts> = $r1;

        $r2 = newarray (int)[4];

        this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int[] repLens> = $r2;

        $r3 = new org.tukaani.xz.lzma.State;

        specialinvoke $r3.<org.tukaani.xz.lzma.State: void <init>()>();

        this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State nextState> = $r3;

        this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur> = 0;

        this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd> = 0;

        i#31 = 0;

     label1:
        if i#31 >= 4096 goto label2;

        $r4 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r5 = new org.tukaani.xz.lzma.Optimum;

        specialinvoke $r5.<org.tukaani.xz.lzma.Optimum: void <init>()>();

        $r4[i#31] = $r5;

        i#31 = i#31 + 1;

        goto label1;

     label2:
        return;
    }

    public void reset()
    {
        org.tukaani.xz.lzma.LZMAEncoderNormal this;

        this := @this: org.tukaani.xz.lzma.LZMAEncoderNormal;

        this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur> = 0;

        this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd> = 0;

        specialinvoke this.<org.tukaani.xz.lzma.LZMAEncoder: void reset()>();

        return;
    }

    int getNextSymbol()
    {
        org.tukaani.xz.lzma.LZMAEncoderNormal this;
        int len, curByte, matchByte, prevByte, literalPrice, shortRepPrice, longRepPrice, price, normalMatchPrice, dist, price, startLen, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, avail#53, repBest#58, rep#60, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, mainLen#112, $i23, $i24, $i25, $i26, $i27, mainDist#136, $i28, $i29, $i30, $i31, $i32, $i33, pos#175, $i34, posState#180, anyMatchPrice#206, anyRepPrice#212, $i35, $i36, $i37, $i38, $i39, $i40, $i41, i#278, rep#286, repLen#293, $i42, $i43, $i44, $i45, len#333, i#342, $i46, $i47, $i48, $i49, $i50, $i51, avail#390, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, posState#422, $i61, $i62, $i63, $i64, anyMatchPrice#440, $i65, anyRepPrice#450, $i66, $i67;
        org.tukaani.xz.lzma.Optimum[] $r0, $r2, $r4, $r34, $r39, $r41, $r45, $r47, $r52, $r55, $r60, $r62, $r70, $r72, $r84, $r86, $r89;
        org.tukaani.xz.lzma.Optimum $r1, $r3, $r5, $r35, $r40, $r42, $r46, $r48, $r53, $r56, $r61, $r63, $r71, $r73, $r85, $r87, $r90;
        boolean $z0, mainDist#114, $z1;
        java.lang.AssertionError $r6, $r44;
        org.tukaani.xz.lz.Matches $r7, $r19, $r20, $r22, $r23, $r25, $r66, $r68, $r74, $r76, $r79, $r80, $r81, $r83, $r92;
        org.tukaani.xz.lz.LZEncoder $r8, $r10, $r26, $r27, $r30, $r31, $r77;
        int[] $r9, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r21, $r24, $r28, $r29, $r43, $r51, $r54, $r57, $r64, $r67, $r69, $r75, $r82;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder $r32;
        org.tukaani.xz.lzma.State $r33, $r36, $r37, $r38, $r49, $r50, $r58, $r65, $r88, $r91;
        org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder $r59;

        this := @this: org.tukaani.xz.lzma.LZMAEncoderNormal;

        $i0 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i1 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd>;

        if $i0 >= $i1 goto label01;

        $r0 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i2 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r1 = $r0[$i2];

        $i3 = $r1.<org.tukaani.xz.lzma.Optimum: int optPrev>;

        $i4 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        len = $i3 - $i4;

        $r2 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i5 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r3 = $r2[$i5];

        $i6 = $r3.<org.tukaani.xz.lzma.Optimum: int optPrev>;

        this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur> = $i6;

        $r4 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i7 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r5 = $r4[$i7];

        $i8 = $r5.<org.tukaani.xz.lzma.Optimum: int backPrev>;

        this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int back> = $i8;

        return len;

     label01:
        $z0 = <org.tukaani.xz.lzma.LZMAEncoderNormal: boolean $assertionsDisabled>;

        if $z0 != 0 goto label02;

        $i9 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i10 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd>;

        if $i9 == $i10 goto label02;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label02:
        this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur> = 0;

        this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd> = 0;

        this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int back> = -1;

        $i11 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int readAhead>;

        if $i11 != -1 goto label03;

        $r7 = virtualinvoke this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches getMatches()>();

        this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches> = $r7;

     label03:
        $r8 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        $i12 = virtualinvoke $r8.<org.tukaani.xz.lz.LZEncoder: int getAvail()>();

        avail#53 = staticinvoke <java.lang.Math: int min(int,int)>($i12, 273);

        if avail#53 >= 2 goto label04;

        return 1;

     label04:
        repBest#58 = 0;

        rep#60 = 0;

     label05:
        if rep#60 >= 4 goto label08;

        $r9 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int[] repLens>;

        $r10 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        $r11 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int[] reps>;

        $i13 = $r11[rep#60];

        $i14 = virtualinvoke $r10.<org.tukaani.xz.lz.LZEncoder: int getMatchLen(int,int)>($i13, avail#53);

        $r9[rep#60] = $i14;

        $r12 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int[] repLens>;

        $i15 = $r12[rep#60];

        if $i15 >= 2 goto label06;

        $r13 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int[] repLens>;

        $r13[rep#60] = 0;

        goto label07;

     label06:
        $r14 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int[] repLens>;

        $i16 = $r14[rep#60];

        $r15 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int[] repLens>;

        $i17 = $r15[repBest#58];

        if $i16 <= $i17 goto label07;

        repBest#58 = rep#60;

     label07:
        rep#60 = rep#60 + 1;

        goto label05;

     label08:
        $r16 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int[] repLens>;

        $i18 = $r16[repBest#58];

        $i19 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int niceLen>;

        if $i18 < $i19 goto label09;

        this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int back> = repBest#58;

        $r17 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int[] repLens>;

        $i20 = $r17[repBest#58];

        $i21 = $i20 - 1;

        virtualinvoke this.<org.tukaani.xz.lzma.LZMAEncoderNormal: void skip(int)>($i21);

        $r18 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int[] repLens>;

        $i22 = $r18[repBest#58];

        return $i22;

     label09:
        mainLen#112 = 0;

        mainDist#114 = 0;

        $r19 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $i23 = $r19.<org.tukaani.xz.lz.Matches: int count>;

        if $i23 <= 0 goto label10;

        $r20 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $r21 = $r20.<org.tukaani.xz.lz.Matches: int[] len>;

        $r22 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $i24 = $r22.<org.tukaani.xz.lz.Matches: int count>;

        $i25 = $i24 - 1;

        mainLen#112 = $r21[$i25];

        $r23 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $r24 = $r23.<org.tukaani.xz.lz.Matches: int[] dist>;

        $r25 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $i26 = $r25.<org.tukaani.xz.lz.Matches: int count>;

        $i27 = $i26 - 1;

        mainDist#136 = $r24[$i27];

        $i28 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int niceLen>;

        if mainLen#112 < $i28 goto label10;

        $i29 = mainDist#136 + 4;

        this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int back> = $i29;

        $i30 = mainLen#112 - 1;

        virtualinvoke this.<org.tukaani.xz.lzma.LZMAEncoderNormal: void skip(int)>($i30);

        return mainLen#112;

     label10:
        $r26 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        curByte = virtualinvoke $r26.<org.tukaani.xz.lz.LZEncoder: int getByte(int)>(0);

        $r27 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        $r28 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int[] reps>;

        $i31 = $r28[0];

        $i32 = $i31 + 1;

        matchByte = virtualinvoke $r27.<org.tukaani.xz.lz.LZEncoder: int getByte(int)>($i32);

        if mainLen#112 >= 2 goto label11;

        if curByte == matchByte goto label11;

        $r29 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int[] repLens>;

        $i33 = $r29[repBest#58];

        if $i33 >= 2 goto label11;

        return 1;

     label11:
        $r30 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        pos#175 = virtualinvoke $r30.<org.tukaani.xz.lz.LZEncoder: int getPos()>();

        $i34 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int posMask>;

        posState#180 = pos#175 & $i34;

        $r31 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        prevByte = virtualinvoke $r31.<org.tukaani.xz.lz.LZEncoder: int getByte(int)>(1);

        $r32 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder literalEncoder>;

        $r33 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State state>;

        literalPrice = virtualinvoke $r32.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: int getPrice(int,int,int,int,org.tukaani.xz.lzma.State)>(curByte, matchByte, prevByte, pos#175, $r33);

        $r34 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r35 = $r34[1];

        virtualinvoke $r35.<org.tukaani.xz.lzma.Optimum: void set1(int,int,int)>(literalPrice, 0, -1);

        $r36 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State state>;

        anyMatchPrice#206 = virtualinvoke this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int getAnyMatchPrice(org.tukaani.xz.lzma.State,int)>($r36, posState#180);

        $r37 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State state>;

        anyRepPrice#212 = virtualinvoke this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int getAnyRepPrice(int,org.tukaani.xz.lzma.State)>(anyMatchPrice#206, $r37);

        if matchByte != curByte goto label12;

        $r38 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State state>;

        shortRepPrice = virtualinvoke this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int getShortRepPrice(int,org.tukaani.xz.lzma.State,int)>(anyRepPrice#212, $r38, posState#180);

        $r39 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r40 = $r39[1];

        $i35 = $r40.<org.tukaani.xz.lzma.Optimum: int price>;

        if shortRepPrice >= $i35 goto label12;

        $r41 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r42 = $r41[1];

        virtualinvoke $r42.<org.tukaani.xz.lzma.Optimum: void set1(int,int,int)>(shortRepPrice, 0, 0);

     label12:
        $r43 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int[] repLens>;

        $i36 = $r43[repBest#58];

        $i37 = staticinvoke <java.lang.Math: int max(int,int)>(mainLen#112, $i36);

        this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd> = $i37;

        $i38 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd>;

        if $i38 >= 2 goto label14;

        $z1 = <org.tukaani.xz.lzma.LZMAEncoderNormal: boolean $assertionsDisabled>;

        if $z1 != 0 goto label13;

        $i39 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd>;

        if $i39 == 0 goto label13;

        $r44 = new java.lang.AssertionError;

        $i40 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd>;

        specialinvoke $r44.<java.lang.AssertionError: void <init>(int)>($i40);

        throw $r44;

     label13:
        $r45 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r46 = $r45[1];

        $i41 = $r46.<org.tukaani.xz.lzma.Optimum: int backPrev>;

        this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int back> = $i41;

        return 1;

     label14:
        virtualinvoke this.<org.tukaani.xz.lzma.LZMAEncoderNormal: void updatePrices()>();

        $r47 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r48 = $r47[0];

        $r49 = $r48.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        $r50 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r49.<org.tukaani.xz.lzma.State: void set(org.tukaani.xz.lzma.State)>($r50);

        $r51 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int[] reps>;

        $r52 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r53 = $r52[0];

        $r54 = $r53.<org.tukaani.xz.lzma.Optimum: int[] reps>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r51, 0, $r54, 0, 4);

        i#278 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd>;

     label15:
        if i#278 < 2 goto label16;

        $r55 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r56 = $r55[i#278];

        virtualinvoke $r56.<org.tukaani.xz.lzma.Optimum: void reset()>();

        i#278 = i#278 + -1;

        goto label15;

     label16:
        rep#286 = 0;

     label17:
        if rep#286 >= 4 goto label22;

        $r57 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int[] repLens>;

        repLen#293 = $r57[rep#286];

        if repLen#293 >= 2 goto label18;

        goto label21;

     label18:
        $r58 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State state>;

        longRepPrice = virtualinvoke this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int getLongRepPrice(int,int,org.tukaani.xz.lzma.State,int)>(anyRepPrice#212, rep#286, $r58, posState#180);

     label19:
        $r59 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder repLenEncoder>;

        $i42 = virtualinvoke $r59.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: int getPrice(int,int)>(repLen#293, posState#180);

        price = longRepPrice + $i42;

        $r60 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r61 = $r60[repLen#293];

        $i43 = $r61.<org.tukaani.xz.lzma.Optimum: int price>;

        if price >= $i43 goto label20;

        $r62 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r63 = $r62[repLen#293];

        virtualinvoke $r63.<org.tukaani.xz.lzma.Optimum: void set1(int,int,int)>(price, 0, rep#286);

     label20:
        repLen#293 = repLen#293 + -1;

        if repLen#293 >= 2 goto label19;

     label21:
        rep#286 = rep#286 + 1;

        goto label17;

     label22:
        $r64 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int[] repLens>;

        $i44 = $r64[0];

        $i45 = $i44 + 1;

        len#333 = staticinvoke <java.lang.Math: int max(int,int)>($i45, 2);

        if len#333 > mainLen#112 goto label27;

        $r65 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State state>;

        normalMatchPrice = virtualinvoke this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int getNormalMatchPrice(int,org.tukaani.xz.lzma.State)>(anyMatchPrice#206, $r65);

        i#342 = 0;

     label23:
        $r66 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $r67 = $r66.<org.tukaani.xz.lz.Matches: int[] len>;

        $i46 = $r67[i#342];

        if len#333 <= $i46 goto label24;

        i#342 = i#342 + 1;

        goto label23;

     label24:
        $r68 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $r69 = $r68.<org.tukaani.xz.lz.Matches: int[] dist>;

        dist = $r69[i#342];

        price = virtualinvoke this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int getMatchAndLenPrice(int,int,int,int)>(normalMatchPrice, dist, len#333, posState#180);

        $r70 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r71 = $r70[len#333];

        $i47 = $r71.<org.tukaani.xz.lzma.Optimum: int price>;

        if price >= $i47 goto label25;

        $r72 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r73 = $r72[len#333];

        $i48 = dist + 4;

        virtualinvoke $r73.<org.tukaani.xz.lzma.Optimum: void set1(int,int,int)>(price, 0, $i48);

     label25:
        $r74 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $r75 = $r74.<org.tukaani.xz.lz.Matches: int[] len>;

        $i49 = $r75[i#342];

        if len#333 != $i49 goto label26;

        i#342 = i#342 + 1;

        $r76 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $i50 = $r76.<org.tukaani.xz.lz.Matches: int count>;

        if i#342 != $i50 goto label26;

        goto label27;

     label26:
        len#333 = len#333 + 1;

        goto label24;

     label27:
        $r77 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        $i51 = virtualinvoke $r77.<org.tukaani.xz.lz.LZEncoder: int getAvail()>();

        avail#390 = staticinvoke <java.lang.Math: int min(int,int)>($i51, 4095);

     label28:
        $i52 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i53 = $i52 + 1;

        this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur> = $i53;

        $i54 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd>;

        if $i53 >= $i54 goto label31;

        $r79 = virtualinvoke this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches getMatches()>();

        this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches> = $r79;

        $r80 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $i55 = $r80.<org.tukaani.xz.lz.Matches: int count>;

        if $i55 <= 0 goto label29;

        $r81 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $r82 = $r81.<org.tukaani.xz.lz.Matches: int[] len>;

        $r83 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $i56 = $r83.<org.tukaani.xz.lz.Matches: int count>;

        $i57 = $i56 - 1;

        $i58 = $r82[$i57];

        $i59 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int niceLen>;

        if $i58 < $i59 goto label29;

        goto label31;

     label29:
        avail#390 = avail#390 + -1;

        pos#175 = pos#175 + 1;

        $i60 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int posMask>;

        posState#422 = pos#175 & $i60;

        specialinvoke this.<org.tukaani.xz.lzma.LZMAEncoderNormal: void updateOptStateAndReps()>();

        $r84 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i61 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r85 = $r84[$i61];

        $i62 = $r85.<org.tukaani.xz.lzma.Optimum: int price>;

        $r86 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i63 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r87 = $r86[$i63];

        $r88 = $r87.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        $i64 = virtualinvoke this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int getAnyMatchPrice(org.tukaani.xz.lzma.State,int)>($r88, posState#422);

        anyMatchPrice#440 = $i62 + $i64;

        $r89 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i65 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r90 = $r89[$i65];

        $r91 = $r90.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        anyRepPrice#450 = virtualinvoke this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int getAnyRepPrice(int,org.tukaani.xz.lzma.State)>(anyMatchPrice#440, $r91);

        specialinvoke this.<org.tukaani.xz.lzma.LZMAEncoderNormal: void calc1BytePrices(int,int,int,int)>(pos#175, posState#422, avail#390, anyRepPrice#450);

        if avail#390 < 2 goto label28;

        startLen = specialinvoke this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int calcLongRepPrices(int,int,int,int)>(pos#175, posState#422, avail#390, anyRepPrice#450);

        $r92 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $i66 = $r92.<org.tukaani.xz.lz.Matches: int count>;

        if $i66 <= 0 goto label30;

        specialinvoke this.<org.tukaani.xz.lzma.LZMAEncoderNormal: void calcNormalMatchPrices(int,int,int,int,int)>(pos#175, posState#422, avail#390, anyMatchPrice#440, startLen);

     label30:
        goto label28;

     label31:
        $i67 = specialinvoke this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int convertOpts()>();

        return $i67;
    }

    private void updateOptStateAndReps()
    {
        org.tukaani.xz.lzma.LZMAEncoderNormal this;
        org.tukaani.xz.lzma.Optimum[] $r0, $r3, $r5, $r7, $r10, $r11, $r15, $r17, $r20, $r23, $r26, $r29, $r32, $r35, $r38, $r40, $r43, $r45, $r48, $r51, $r54, $r57, $r59, $r61, $r63, $r65, $r68, $r70, $r73, $r76, $r79, $r82, $r85, $r88, $r91, $r94, $r97, $r100;
        int $i0, optPrev#7, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, back#166, $i29, $i30, $i31, $i32, $i33, $i34, rep#210, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42;
        org.tukaani.xz.lzma.Optimum $r1, $r4, $r6, $r8, $r12, $r13, $r16, $r18, $r21, $r24, $r27, $r30, $r33, $r36, $r39, $r41, $r44, $r46, $r49, $r52, $r55, $r58, $r60, $r62, $r64, $r66, $r69, $r71, $r74, $r77, $r80, $r83, $r86, $r89, $r92, $r95, $r98, $r101;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.AssertionError $r2, $r42;
        org.tukaani.xz.lzma.State $r9, $r14, $r19, $r22, $r25, $r28, $r31, $r34, $r37, $r47, $r50, $r67, $r72, $r75;
        int[] $r53, $r56, $r78, $r81, $r84, $r87, $r90, $r93, $r96, $r99, $r102;

        this := @this: org.tukaani.xz.lzma.LZMAEncoderNormal;

        $r0 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i0 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r1 = $r0[$i0];

        optPrev#7 = $r1.<org.tukaani.xz.lzma.Optimum: int optPrev>;

        $z0 = <org.tukaani.xz.lzma.LZMAEncoderNormal: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $i1 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        if optPrev#7 < $i1 goto label01;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label01:
        $r3 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i2 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r4 = $r3[$i2];

        $z1 = $r4.<org.tukaani.xz.lzma.Optimum: boolean prev1IsLiteral>;

        if $z1 == 0 goto label05;

        optPrev#7 = optPrev#7 + -1;

        $r5 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i3 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r6 = $r5[$i3];

        $z2 = $r6.<org.tukaani.xz.lzma.Optimum: boolean hasPrev2>;

        if $z2 == 0 goto label03;

        $r7 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i4 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r8 = $r7[$i4];

        $r9 = $r8.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        $r10 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r11 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i5 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r12 = $r11[$i5];

        $i6 = $r12.<org.tukaani.xz.lzma.Optimum: int optPrev2>;

        $r13 = $r10[$i6];

        $r14 = $r13.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r9.<org.tukaani.xz.lzma.State: void set(org.tukaani.xz.lzma.State)>($r14);

        $r15 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i7 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r16 = $r15[$i7];

        $i8 = $r16.<org.tukaani.xz.lzma.Optimum: int backPrev2>;

        if $i8 >= 4 goto label02;

        $r17 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i9 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r18 = $r17[$i9];

        $r19 = $r18.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r19.<org.tukaani.xz.lzma.State: void updateLongRep()>();

        goto label04;

     label02:
        $r20 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i10 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r21 = $r20[$i10];

        $r22 = $r21.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r22.<org.tukaani.xz.lzma.State: void updateMatch()>();

        goto label04;

     label03:
        $r23 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i11 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r24 = $r23[$i11];

        $r25 = $r24.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        $r26 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r27 = $r26[optPrev#7];

        $r28 = $r27.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r25.<org.tukaani.xz.lzma.State: void set(org.tukaani.xz.lzma.State)>($r28);

     label04:
        $r29 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i12 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r30 = $r29[$i12];

        $r31 = $r30.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r31.<org.tukaani.xz.lzma.State: void updateLiteral()>();

        goto label06;

     label05:
        $r32 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i13 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r33 = $r32[$i13];

        $r34 = $r33.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        $r35 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r36 = $r35[optPrev#7];

        $r37 = $r36.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r34.<org.tukaani.xz.lzma.State: void set(org.tukaani.xz.lzma.State)>($r37);

     label06:
        $i14 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i15 = $i14 - 1;

        if optPrev#7 != $i15 goto label10;

        $z3 = <org.tukaani.xz.lzma.LZMAEncoderNormal: boolean $assertionsDisabled>;

        if $z3 != 0 goto label07;

        $r38 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i16 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r39 = $r38[$i16];

        $i17 = $r39.<org.tukaani.xz.lzma.Optimum: int backPrev>;

        if $i17 == 0 goto label07;

        $r40 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i18 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r41 = $r40[$i18];

        $i19 = $r41.<org.tukaani.xz.lzma.Optimum: int backPrev>;

        if $i19 == -1 goto label07;

        $r42 = new java.lang.AssertionError;

        specialinvoke $r42.<java.lang.AssertionError: void <init>()>();

        throw $r42;

     label07:
        $r43 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i20 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r44 = $r43[$i20];

        $i21 = $r44.<org.tukaani.xz.lzma.Optimum: int backPrev>;

        if $i21 != 0 goto label08;

        $r45 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i22 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r46 = $r45[$i22];

        $r47 = $r46.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r47.<org.tukaani.xz.lzma.State: void updateShortRep()>();

        goto label09;

     label08:
        $r48 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i23 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r49 = $r48[$i23];

        $r50 = $r49.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r50.<org.tukaani.xz.lzma.State: void updateLiteral()>();

     label09:
        $r51 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r52 = $r51[optPrev#7];

        $r53 = $r52.<org.tukaani.xz.lzma.Optimum: int[] reps>;

        $r54 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i24 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r55 = $r54[$i24];

        $r56 = $r55.<org.tukaani.xz.lzma.Optimum: int[] reps>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r53, 0, $r56, 0, 4);

        goto label18;

     label10:
        $r57 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i25 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r58 = $r57[$i25];

        $z4 = $r58.<org.tukaani.xz.lzma.Optimum: boolean prev1IsLiteral>;

        if $z4 == 0 goto label11;

        $r59 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i26 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r60 = $r59[$i26];

        $z5 = $r60.<org.tukaani.xz.lzma.Optimum: boolean hasPrev2>;

        if $z5 == 0 goto label11;

        $r61 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i27 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r62 = $r61[$i27];

        optPrev#7 = $r62.<org.tukaani.xz.lzma.Optimum: int optPrev2>;

        $r63 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i28 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r64 = $r63[$i28];

        back#166 = $r64.<org.tukaani.xz.lzma.Optimum: int backPrev2>;

        $r65 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i29 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r66 = $r65[$i29];

        $r67 = $r66.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r67.<org.tukaani.xz.lzma.State: void updateLongRep()>();

        goto label13;

     label11:
        $r68 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i30 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r69 = $r68[$i30];

        back#166 = $r69.<org.tukaani.xz.lzma.Optimum: int backPrev>;

        if back#166 >= 4 goto label12;

        $r70 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i31 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r71 = $r70[$i31];

        $r72 = $r71.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r72.<org.tukaani.xz.lzma.State: void updateLongRep()>();

        goto label13;

     label12:
        $r73 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i32 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r74 = $r73[$i32];

        $r75 = $r74.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r75.<org.tukaani.xz.lzma.State: void updateMatch()>();

     label13:
        if back#166 >= 4 goto label17;

        $r76 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i33 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r77 = $r76[$i33];

        $r78 = $r77.<org.tukaani.xz.lzma.Optimum: int[] reps>;

        $r79 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r80 = $r79[optPrev#7];

        $r81 = $r80.<org.tukaani.xz.lzma.Optimum: int[] reps>;

        $i34 = $r81[back#166];

        $r78[0] = $i34;

        rep#210 = 1;

     label14:
        if rep#210 > back#166 goto label15;

        $r82 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i35 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r83 = $r82[$i35];

        $r84 = $r83.<org.tukaani.xz.lzma.Optimum: int[] reps>;

        $r85 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r86 = $r85[optPrev#7];

        $r87 = $r86.<org.tukaani.xz.lzma.Optimum: int[] reps>;

        $i36 = rep#210 - 1;

        $i37 = $r87[$i36];

        $r84[rep#210] = $i37;

        rep#210 = rep#210 + 1;

        goto label14;

     label15:
        if rep#210 >= 4 goto label16;

        $r88 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i38 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r89 = $r88[$i38];

        $r90 = $r89.<org.tukaani.xz.lzma.Optimum: int[] reps>;

        $r91 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r92 = $r91[optPrev#7];

        $r93 = $r92.<org.tukaani.xz.lzma.Optimum: int[] reps>;

        $i39 = $r93[rep#210];

        $r90[rep#210] = $i39;

        rep#210 = rep#210 + 1;

        goto label15;

     label16:
        goto label18;

     label17:
        $r94 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i40 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r95 = $r94[$i40];

        $r96 = $r95.<org.tukaani.xz.lzma.Optimum: int[] reps>;

        $i41 = back#166 - 4;

        $r96[0] = $i41;

        $r97 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r98 = $r97[optPrev#7];

        $r99 = $r98.<org.tukaani.xz.lzma.Optimum: int[] reps>;

        $r100 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i42 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r101 = $r100[$i42];

        $r102 = $r101.<org.tukaani.xz.lzma.Optimum: int[] reps>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r99, 0, $r102, 1, 3);

     label18:
        return;
    }

    private void calc1BytePrices(int, int, int, int)
    {
        org.tukaani.xz.lzma.LZMAEncoderNormal this;
        int pos, posState, avail, anyRepPrice, curByte, matchByte, literalPrice, shortRepPrice, lenLimit, len, nextPosState, price, i, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42;
        boolean nextIsByte#2;
        org.tukaani.xz.lz.LZEncoder $r0, $r1, $r8, $r27;
        org.tukaani.xz.lzma.Optimum[] $r2, $r5, $r9, $r12, $r14, $r16, $r18, $r20, $r23, $r25, $r28, $r32, $r37, $r40, $r42;
        org.tukaani.xz.lzma.Optimum $r3, $r6, $r10, $r13, $r15, $r17, $r19, $r21, $r24, $r26, $r29, $r33, $r39, $r41, $r43;
        int[] $r4, $r30;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder $r7;
        org.tukaani.xz.lzma.State $r11, $r22, $r31, $r34, $r35, $r36;

        this := @this: org.tukaani.xz.lzma.LZMAEncoderNormal;

        pos := @parameter0: int;

        posState := @parameter1: int;

        avail := @parameter2: int;

        anyRepPrice := @parameter3: int;

        nextIsByte#2 = 0;

        $r0 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        curByte = virtualinvoke $r0.<org.tukaani.xz.lz.LZEncoder: int getByte(int)>(0);

        $r1 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        $r2 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i0 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r3 = $r2[$i0];

        $r4 = $r3.<org.tukaani.xz.lzma.Optimum: int[] reps>;

        $i1 = $r4[0];

        $i2 = $i1 + 1;

        matchByte = virtualinvoke $r1.<org.tukaani.xz.lz.LZEncoder: int getByte(int)>($i2);

        $r5 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i3 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r6 = $r5[$i3];

        $i4 = $r6.<org.tukaani.xz.lzma.Optimum: int price>;

        $r7 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder literalEncoder>;

        $r8 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        $i5 = virtualinvoke $r8.<org.tukaani.xz.lz.LZEncoder: int getByte(int)>(1);

        $r9 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i6 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r10 = $r9[$i6];

        $r11 = $r10.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        $i7 = virtualinvoke $r7.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: int getPrice(int,int,int,int,org.tukaani.xz.lzma.State)>(curByte, matchByte, $i5, pos, $r11);

        literalPrice = $i4 + $i7;

        $r12 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i8 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i9 = $i8 + 1;

        $r13 = $r12[$i9];

        $i10 = $r13.<org.tukaani.xz.lzma.Optimum: int price>;

        if literalPrice >= $i10 goto label1;

        $r14 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i11 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i12 = $i11 + 1;

        $r15 = $r14[$i12];

        $i13 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        virtualinvoke $r15.<org.tukaani.xz.lzma.Optimum: void set1(int,int,int)>(literalPrice, $i13, -1);

        nextIsByte#2 = 1;

     label1:
        if matchByte != curByte goto label3;

        $r16 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i14 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i15 = $i14 + 1;

        $r17 = $r16[$i15];

        $i16 = $r17.<org.tukaani.xz.lzma.Optimum: int optPrev>;

        $i17 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        if $i16 == $i17 goto label2;

        $r18 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i18 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i19 = $i18 + 1;

        $r19 = $r18[$i19];

        $i20 = $r19.<org.tukaani.xz.lzma.Optimum: int backPrev>;

        if $i20 == 0 goto label3;

     label2:
        $r20 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i21 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r21 = $r20[$i21];

        $r22 = $r21.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        shortRepPrice = virtualinvoke this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int getShortRepPrice(int,org.tukaani.xz.lzma.State,int)>(anyRepPrice, $r22, posState);

        $r23 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i22 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i23 = $i22 + 1;

        $r24 = $r23[$i23];

        $i24 = $r24.<org.tukaani.xz.lzma.Optimum: int price>;

        if shortRepPrice > $i24 goto label3;

        $r25 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i25 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i26 = $i25 + 1;

        $r26 = $r25[$i26];

        $i27 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        virtualinvoke $r26.<org.tukaani.xz.lzma.Optimum: void set1(int,int,int)>(shortRepPrice, $i27, 0);

        nextIsByte#2 = 1;

     label3:
        if nextIsByte#2 != 0 goto label6;

        if matchByte == curByte goto label6;

        if avail <= 2 goto label6;

        $i28 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int niceLen>;

        $i29 = avail - 1;

        lenLimit = staticinvoke <java.lang.Math: int min(int,int)>($i28, $i29);

        $r27 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        $r28 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i30 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r29 = $r28[$i30];

        $r30 = $r29.<org.tukaani.xz.lzma.Optimum: int[] reps>;

        $i31 = $r30[0];

        len = virtualinvoke $r27.<org.tukaani.xz.lz.LZEncoder: int getMatchLen(int,int,int)>(1, $i31, lenLimit);

        if len < 2 goto label6;

        $r31 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State nextState>;

        $r32 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i32 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r33 = $r32[$i32];

        $r34 = $r33.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r31.<org.tukaani.xz.lzma.State: void set(org.tukaani.xz.lzma.State)>($r34);

        $r35 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State nextState>;

        virtualinvoke $r35.<org.tukaani.xz.lzma.State: void updateLiteral()>();

        $i33 = pos + 1;

        $i34 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int posMask>;

        nextPosState = $i33 & $i34;

        $r36 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State nextState>;

        $i35 = virtualinvoke this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int getLongRepAndLenPrice(int,int,org.tukaani.xz.lzma.State,int)>(0, len, $r36, nextPosState);

        price = literalPrice + $i35;

        $i36 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i37 = $i36 + 1;

        i = $i37 + len;

     label4:
        $i38 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd>;

        if $i38 >= i goto label5;

        $r37 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i39 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd>;

        $i40 = $i39 + 1;

        this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd> = $i40;

        $r39 = $r37[$i40];

        virtualinvoke $r39.<org.tukaani.xz.lzma.Optimum: void reset()>();

        goto label4;

     label5:
        $r40 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r41 = $r40[i];

        $i41 = $r41.<org.tukaani.xz.lzma.Optimum: int price>;

        if price >= $i41 goto label6;

        $r42 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r43 = $r42[i];

        $i42 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        virtualinvoke $r43.<org.tukaani.xz.lzma.Optimum: void set2(int,int,int)>(price, $i42, 0);

     label6:
        return;
    }

    private int calcLongRepPrices(int, int, int, int)
    {
        org.tukaani.xz.lzma.LZMAEncoderNormal this;
        int pos, posState, avail, anyRepPrice, lenLimit, len, longRepPrice, price, len2Limit, len2, curByte, matchByte, prevByte, nextPosState, i, startLen#2, $i0, rep#8, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i#54, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, price#120, $i23, $i24, $i25, price#158, $i26, $i27, $i28, $i29, price#178, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37;
        org.tukaani.xz.lz.LZEncoder $r0, $r15, $r25, $r26, $r27;
        org.tukaani.xz.lzma.Optimum[] $r1, $r4, $r7, $r11, $r13, $r16, $r21, $r32, $r35, $r37;
        org.tukaani.xz.lzma.Optimum $r2, $r6, $r8, $r12, $r14, $r17, $r22, $r34, $r36, $r38;
        int[] $r3, $r18;
        org.tukaani.xz.lzma.State $r9, $r20, $r23, $r24, $r29, $r30, $r31;
        org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder $r10, $r19;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder $r28;

        this := @this: org.tukaani.xz.lzma.LZMAEncoderNormal;

        pos := @parameter0: int;

        posState := @parameter1: int;

        avail := @parameter2: int;

        anyRepPrice := @parameter3: int;

        startLen#2 = 2;

        $i0 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int niceLen>;

        lenLimit = staticinvoke <java.lang.Math: int min(int,int)>(avail, $i0);

        rep#8 = 0;

     label01:
        if rep#8 >= 4 goto label11;

        $r0 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        $r1 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i1 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r2 = $r1[$i1];

        $r3 = $r2.<org.tukaani.xz.lzma.Optimum: int[] reps>;

        $i2 = $r3[rep#8];

        len = virtualinvoke $r0.<org.tukaani.xz.lz.LZEncoder: int getMatchLen(int,int)>($i2, lenLimit);

        if len >= 2 goto label02;

        goto label10;

     label02:
        $i3 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd>;

        $i4 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i5 = $i4 + len;

        if $i3 >= $i5 goto label03;

        $r4 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i6 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd>;

        $i7 = $i6 + 1;

        this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd> = $i7;

        $r6 = $r4[$i7];

        virtualinvoke $r6.<org.tukaani.xz.lzma.Optimum: void reset()>();

        goto label02;

     label03:
        $r7 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i8 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r8 = $r7[$i8];

        $r9 = $r8.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        longRepPrice = virtualinvoke this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int getLongRepPrice(int,int,org.tukaani.xz.lzma.State,int)>(anyRepPrice, rep#8, $r9, posState);

        i#54 = len;

     label04:
        if i#54 < 2 goto label06;

        $r10 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder repLenEncoder>;

        $i9 = virtualinvoke $r10.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: int getPrice(int,int)>(i#54, posState);

        price = longRepPrice + $i9;

        $r11 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i10 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i11 = $i10 + i#54;

        $r12 = $r11[$i11];

        $i12 = $r12.<org.tukaani.xz.lzma.Optimum: int price>;

        if price >= $i12 goto label05;

        $r13 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i13 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i14 = $i13 + i#54;

        $r14 = $r13[$i14];

        $i15 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        virtualinvoke $r14.<org.tukaani.xz.lzma.Optimum: void set1(int,int,int)>(price, $i15, rep#8);

     label05:
        i#54 = i#54 + -1;

        goto label04;

     label06:
        if rep#8 != 0 goto label07;

        startLen#2 = len + 1;

     label07:
        $i16 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int niceLen>;

        $i17 = avail - len;

        $i18 = $i17 - 1;

        len2Limit = staticinvoke <java.lang.Math: int min(int,int)>($i16, $i18);

        $r15 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        $i19 = len + 1;

        $r16 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i20 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r17 = $r16[$i20];

        $r18 = $r17.<org.tukaani.xz.lzma.Optimum: int[] reps>;

        $i21 = $r18[rep#8];

        len2 = virtualinvoke $r15.<org.tukaani.xz.lz.LZEncoder: int getMatchLen(int,int,int)>($i19, $i21, len2Limit);

        if len2 < 2 goto label10;

        $r19 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder repLenEncoder>;

        $i22 = virtualinvoke $r19.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: int getPrice(int,int)>(len, posState);

        price#120 = longRepPrice + $i22;

        $r20 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State nextState>;

        $r21 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i23 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r22 = $r21[$i23];

        $r23 = $r22.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r20.<org.tukaani.xz.lzma.State: void set(org.tukaani.xz.lzma.State)>($r23);

        $r24 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State nextState>;

        virtualinvoke $r24.<org.tukaani.xz.lzma.State: void updateLongRep()>();

        $r25 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        curByte = virtualinvoke $r25.<org.tukaani.xz.lz.LZEncoder: int getByte(int,int)>(len, 0);

        $r26 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        matchByte = virtualinvoke $r26.<org.tukaani.xz.lz.LZEncoder: int getByte(int)>(0);

        $r27 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        prevByte = virtualinvoke $r27.<org.tukaani.xz.lz.LZEncoder: int getByte(int,int)>(len, 1);

        $r28 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder literalEncoder>;

        $i24 = pos + len;

        $r29 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State nextState>;

        $i25 = virtualinvoke $r28.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: int getPrice(int,int,int,int,org.tukaani.xz.lzma.State)>(curByte, matchByte, prevByte, $i24, $r29);

        price#158 = price#120 + $i25;

        $r30 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State nextState>;

        virtualinvoke $r30.<org.tukaani.xz.lzma.State: void updateLiteral()>();

        $i26 = pos + len;

        $i27 = $i26 + 1;

        $i28 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int posMask>;

        nextPosState = $i27 & $i28;

        $r31 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State nextState>;

        $i29 = virtualinvoke this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int getLongRepAndLenPrice(int,int,org.tukaani.xz.lzma.State,int)>(0, len2, $r31, nextPosState);

        price#178 = price#158 + $i29;

        $i30 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i31 = $i30 + len;

        $i32 = $i31 + 1;

        i = $i32 + len2;

     label08:
        $i33 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd>;

        if $i33 >= i goto label09;

        $r32 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i34 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd>;

        $i35 = $i34 + 1;

        this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd> = $i35;

        $r34 = $r32[$i35];

        virtualinvoke $r34.<org.tukaani.xz.lzma.Optimum: void reset()>();

        goto label08;

     label09:
        $r35 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r36 = $r35[i];

        $i36 = $r36.<org.tukaani.xz.lzma.Optimum: int price>;

        if price#178 >= $i36 goto label10;

        $r37 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r38 = $r37[i];

        $i37 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        virtualinvoke $r38.<org.tukaani.xz.lzma.Optimum: void set3(int,int,int,int,int)>(price#178, $i37, rep#8, len, 0);

     label10:
        rep#8 = rep#8 + 1;

        goto label01;

     label11:
        return startLen#2;
    }

    private void calcNormalMatchPrices(int, int, int, int, int)
    {
        org.tukaani.xz.lzma.LZMAEncoderNormal this;
        int pos, posState, avail, anyMatchPrice, startLen, normalMatchPrice, dist, matchAndLenPrice, len2Limit, len2, curByte, matchByte, prevByte, nextPosState, i, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, match#86, $i21, len#94, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, price#189, $i37, $i38, $i39, $i40, price#209, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50;
        org.tukaani.xz.lz.Matches $r0, $r2, $r3, $r4, $r6, $r7, $r8, $r10, $r11, $r13, $r14, $r16, $r23, $r25, $r31, $r53;
        int[] $r1, $r5, $r9, $r12, $r15, $r24, $r26, $r32;
        org.tukaani.xz.lzma.Optimum[] $r17, $r20, $r27, $r29, $r35, $r46, $r49, $r51;
        org.tukaani.xz.lzma.Optimum $r19, $r21, $r28, $r30, $r36, $r48, $r50, $r52;
        org.tukaani.xz.lzma.State $r22, $r34, $r37, $r38, $r43, $r44, $r45;
        org.tukaani.xz.lz.LZEncoder $r33, $r39, $r40, $r41;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder $r42;

        this := @this: org.tukaani.xz.lzma.LZMAEncoderNormal;

        pos := @parameter0: int;

        posState := @parameter1: int;

        avail := @parameter2: int;

        anyMatchPrice := @parameter3: int;

        startLen := @parameter4: int;

        $r0 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $r1 = $r0.<org.tukaani.xz.lz.Matches: int[] len>;

        $r2 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $i0 = $r2.<org.tukaani.xz.lz.Matches: int count>;

        $i1 = $i0 - 1;

        $i2 = $r1[$i1];

        if $i2 <= avail goto label03;

        $r3 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $r3.<org.tukaani.xz.lz.Matches: int count> = 0;

     label01:
        $r4 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $r5 = $r4.<org.tukaani.xz.lz.Matches: int[] len>;

        $r6 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $i3 = $r6.<org.tukaani.xz.lz.Matches: int count>;

        $i4 = $r5[$i3];

        if $i4 >= avail goto label02;

        $r7 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $i5 = $r7.<org.tukaani.xz.lz.Matches: int count>;

        $i6 = $i5 + 1;

        $r7.<org.tukaani.xz.lz.Matches: int count> = $i6;

        goto label01;

     label02:
        $r8 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $r9 = $r8.<org.tukaani.xz.lz.Matches: int[] len>;

        $r10 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $i7 = $r10.<org.tukaani.xz.lz.Matches: int count>;

        $i8 = $i7 + 1;

        $r10.<org.tukaani.xz.lz.Matches: int count> = $i8;

        $r9[$i7] = avail;

     label03:
        $r11 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $r12 = $r11.<org.tukaani.xz.lz.Matches: int[] len>;

        $r13 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $i9 = $r13.<org.tukaani.xz.lz.Matches: int count>;

        $i10 = $i9 - 1;

        $i11 = $r12[$i10];

        if $i11 >= startLen goto label04;

        return;

     label04:
        $i12 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd>;

        $i13 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r14 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $r15 = $r14.<org.tukaani.xz.lz.Matches: int[] len>;

        $r16 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $i14 = $r16.<org.tukaani.xz.lz.Matches: int count>;

        $i15 = $i14 - 1;

        $i16 = $r15[$i15];

        $i17 = $i13 + $i16;

        if $i12 >= $i17 goto label05;

        $r17 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i18 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd>;

        $i19 = $i18 + 1;

        this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd> = $i19;

        $r19 = $r17[$i19];

        virtualinvoke $r19.<org.tukaani.xz.lzma.Optimum: void reset()>();

        goto label04;

     label05:
        $r20 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i20 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r21 = $r20[$i20];

        $r22 = $r21.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        normalMatchPrice = virtualinvoke this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int getNormalMatchPrice(int,org.tukaani.xz.lzma.State)>(anyMatchPrice, $r22);

        match#86 = 0;

     label06:
        $r23 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $r24 = $r23.<org.tukaani.xz.lz.Matches: int[] len>;

        $i21 = $r24[match#86];

        if startLen <= $i21 goto label07;

        match#86 = match#86 + 1;

        goto label06;

     label07:
        len#94 = startLen;

     label08:
        $r25 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $r26 = $r25.<org.tukaani.xz.lz.Matches: int[] dist>;

        dist = $r26[match#86];

        matchAndLenPrice = virtualinvoke this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int getMatchAndLenPrice(int,int,int,int)>(normalMatchPrice, dist, len#94, posState);

        $r27 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i22 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i23 = $i22 + len#94;

        $r28 = $r27[$i23];

        $i24 = $r28.<org.tukaani.xz.lzma.Optimum: int price>;

        if matchAndLenPrice >= $i24 goto label09;

        $r29 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i25 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i26 = $i25 + len#94;

        $r30 = $r29[$i26];

        $i27 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i28 = dist + 4;

        virtualinvoke $r30.<org.tukaani.xz.lzma.Optimum: void set1(int,int,int)>(matchAndLenPrice, $i27, $i28);

     label09:
        $r31 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $r32 = $r31.<org.tukaani.xz.lz.Matches: int[] len>;

        $i29 = $r32[match#86];

        if len#94 == $i29 goto label10;

        goto label14;

     label10:
        $i30 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int niceLen>;

        $i31 = avail - len#94;

        $i32 = $i31 - 1;

        len2Limit = staticinvoke <java.lang.Math: int min(int,int)>($i30, $i32);

        $r33 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        $i33 = len#94 + 1;

        len2 = virtualinvoke $r33.<org.tukaani.xz.lz.LZEncoder: int getMatchLen(int,int,int)>($i33, dist, len2Limit);

        if len2 < 2 goto label13;

        $r34 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State nextState>;

        $r35 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i34 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r36 = $r35[$i34];

        $r37 = $r36.<org.tukaani.xz.lzma.Optimum: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r34.<org.tukaani.xz.lzma.State: void set(org.tukaani.xz.lzma.State)>($r37);

        $r38 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State nextState>;

        virtualinvoke $r38.<org.tukaani.xz.lzma.State: void updateMatch()>();

        $r39 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        curByte = virtualinvoke $r39.<org.tukaani.xz.lz.LZEncoder: int getByte(int,int)>(len#94, 0);

        $r40 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        matchByte = virtualinvoke $r40.<org.tukaani.xz.lz.LZEncoder: int getByte(int)>(0);

        $r41 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.LZEncoder lz>;

        prevByte = virtualinvoke $r41.<org.tukaani.xz.lz.LZEncoder: int getByte(int,int)>(len#94, 1);

        $r42 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder literalEncoder>;

        $i35 = pos + len#94;

        $r43 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State nextState>;

        $i36 = virtualinvoke $r42.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: int getPrice(int,int,int,int,org.tukaani.xz.lzma.State)>(curByte, matchByte, prevByte, $i35, $r43);

        price#189 = matchAndLenPrice + $i36;

        $r44 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State nextState>;

        virtualinvoke $r44.<org.tukaani.xz.lzma.State: void updateLiteral()>();

        $i37 = pos + len#94;

        $i38 = $i37 + 1;

        $i39 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int posMask>;

        nextPosState = $i38 & $i39;

        $r45 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.State nextState>;

        $i40 = virtualinvoke this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int getLongRepAndLenPrice(int,int,org.tukaani.xz.lzma.State,int)>(0, len2, $r45, nextPosState);

        price#209 = price#189 + $i40;

        $i41 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i42 = $i41 + len#94;

        $i43 = $i42 + 1;

        i = $i43 + len2;

     label11:
        $i44 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd>;

        if $i44 >= i goto label12;

        $r46 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i45 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd>;

        $i46 = $i45 + 1;

        this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd> = $i46;

        $r48 = $r46[$i46];

        virtualinvoke $r48.<org.tukaani.xz.lzma.Optimum: void reset()>();

        goto label11;

     label12:
        $r49 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r50 = $r49[i];

        $i47 = $r50.<org.tukaani.xz.lzma.Optimum: int price>;

        if price#209 >= $i47 goto label13;

        $r51 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r52 = $r51[i];

        $i48 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $i49 = dist + 4;

        virtualinvoke $r52.<org.tukaani.xz.lzma.Optimum: void set3(int,int,int,int,int)>(price#209, $i48, $i49, len#94, 0);

     label13:
        match#86 = match#86 + 1;

        $r53 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lz.Matches matches>;

        $i50 = $r53.<org.tukaani.xz.lz.Matches: int count>;

        if match#86 != $i50 goto label14;

        goto label15;

     label14:
        len#94 = len#94 + 1;

        goto label08;

     label15:
        return;
    }

    private int convertOpts()
    {
        org.tukaani.xz.lzma.LZMAEncoderNormal this;
        org.tukaani.xz.lzma.Optimum opt, $r1, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18;
        int temp, $i0, $i1, optPrev#10, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        org.tukaani.xz.lzma.Optimum[] $r0, $r2, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17;
        boolean $z0, $z1;

        this := @this: org.tukaani.xz.lzma.LZMAEncoderNormal;

        $i0 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optEnd> = $i0;

        $r0 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i1 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r1 = $r0[$i1];

        optPrev#10 = $r1.<org.tukaani.xz.lzma.Optimum: int optPrev>;

     label1:
        $r2 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i2 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        opt = $r2[$i2];

        $z0 = opt.<org.tukaani.xz.lzma.Optimum: boolean prev1IsLiteral>;

        if $z0 == 0 goto label2;

        $r3 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r4 = $r3[optPrev#10];

        $i3 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r4.<org.tukaani.xz.lzma.Optimum: int optPrev> = $i3;

        $r5 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r6 = $r5[optPrev#10];

        $r6.<org.tukaani.xz.lzma.Optimum: int backPrev> = -1;

        $i4 = optPrev#10;

        optPrev#10 = optPrev#10 + -1;

        this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur> = $i4;

        $z1 = opt.<org.tukaani.xz.lzma.Optimum: boolean hasPrev2>;

        if $z1 == 0 goto label2;

        $r7 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r8 = $r7[optPrev#10];

        $i5 = optPrev#10 + 1;

        $r8.<org.tukaani.xz.lzma.Optimum: int optPrev> = $i5;

        $r9 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r10 = $r9[optPrev#10];

        $i6 = opt.<org.tukaani.xz.lzma.Optimum: int backPrev2>;

        $r10.<org.tukaani.xz.lzma.Optimum: int backPrev> = $i6;

        this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur> = optPrev#10;

        optPrev#10 = opt.<org.tukaani.xz.lzma.Optimum: int optPrev2>;

     label2:
        $r11 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r12 = $r11[optPrev#10];

        temp = $r12.<org.tukaani.xz.lzma.Optimum: int optPrev>;

        $r13 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r14 = $r13[optPrev#10];

        $i7 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r14.<org.tukaani.xz.lzma.Optimum: int optPrev> = $i7;

        this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur> = optPrev#10;

        optPrev#10 = temp;

        $i8 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        if $i8 > 0 goto label1;

        $r15 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $r16 = $r15[0];

        $i9 = $r16.<org.tukaani.xz.lzma.Optimum: int optPrev>;

        this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur> = $i9;

        $r17 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: org.tukaani.xz.lzma.Optimum[] opts>;

        $i10 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        $r18 = $r17[$i10];

        $i11 = $r18.<org.tukaani.xz.lzma.Optimum: int backPrev>;

        this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int back> = $i11;

        $i12 = this.<org.tukaani.xz.lzma.LZMAEncoderNormal: int optCur>;

        return $i12;
    }


