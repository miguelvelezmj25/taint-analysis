    static void <clinit>()
    {
        weka.core.packageManagement.VersionPackageConstraint$VersionComparison$1 $r0;
        weka.core.packageManagement.VersionPackageConstraint$VersionComparison$2 $r1;
        weka.core.packageManagement.VersionPackageConstraint$VersionComparison$3 $r2;
        weka.core.packageManagement.VersionPackageConstraint$VersionComparison$4 $r3;
        weka.core.packageManagement.VersionPackageConstraint$VersionComparison$5 $r4;
        weka.core.packageManagement.VersionPackageConstraint$VersionComparison[] $r5;
        weka.core.packageManagement.VersionPackageConstraint$VersionComparison $r6, $r7, $r8, $r9, $r10;

        $r0 = new weka.core.packageManagement.VersionPackageConstraint$VersionComparison$1;

        specialinvoke $r0.<weka.core.packageManagement.VersionPackageConstraint$VersionComparison$1: void <init>(java.lang.String,int,java.lang.String)>("EQUAL", 0, "=");

        <weka.core.packageManagement.VersionPackageConstraint$VersionComparison: weka.core.packageManagement.VersionPackageConstraint$VersionComparison EQUAL> = $r0;

        $r1 = new weka.core.packageManagement.VersionPackageConstraint$VersionComparison$2;

        specialinvoke $r1.<weka.core.packageManagement.VersionPackageConstraint$VersionComparison$2: void <init>(java.lang.String,int,java.lang.String)>("GREATERTHAN", 1, ">");

        <weka.core.packageManagement.VersionPackageConstraint$VersionComparison: weka.core.packageManagement.VersionPackageConstraint$VersionComparison GREATERTHAN> = $r1;

        $r2 = new weka.core.packageManagement.VersionPackageConstraint$VersionComparison$3;

        specialinvoke $r2.<weka.core.packageManagement.VersionPackageConstraint$VersionComparison$3: void <init>(java.lang.String,int,java.lang.String)>("GREATERTHANOREQUAL", 2, ">=");

        <weka.core.packageManagement.VersionPackageConstraint$VersionComparison: weka.core.packageManagement.VersionPackageConstraint$VersionComparison GREATERTHANOREQUAL> = $r2;

        $r3 = new weka.core.packageManagement.VersionPackageConstraint$VersionComparison$4;

        specialinvoke $r3.<weka.core.packageManagement.VersionPackageConstraint$VersionComparison$4: void <init>(java.lang.String,int,java.lang.String)>("LESSTHAN", 3, "<");

        <weka.core.packageManagement.VersionPackageConstraint$VersionComparison: weka.core.packageManagement.VersionPackageConstraint$VersionComparison LESSTHAN> = $r3;

        $r4 = new weka.core.packageManagement.VersionPackageConstraint$VersionComparison$5;

        specialinvoke $r4.<weka.core.packageManagement.VersionPackageConstraint$VersionComparison$5: void <init>(java.lang.String,int,java.lang.String)>("LESSTHANOREQUAL", 4, "<=");

        <weka.core.packageManagement.VersionPackageConstraint$VersionComparison: weka.core.packageManagement.VersionPackageConstraint$VersionComparison LESSTHANOREQUAL> = $r4;

        $r5 = newarray (weka.core.packageManagement.VersionPackageConstraint$VersionComparison)[5];

        $r6 = <weka.core.packageManagement.VersionPackageConstraint$VersionComparison: weka.core.packageManagement.VersionPackageConstraint$VersionComparison EQUAL>;

        $r5[0] = $r6;

        $r7 = <weka.core.packageManagement.VersionPackageConstraint$VersionComparison: weka.core.packageManagement.VersionPackageConstraint$VersionComparison GREATERTHAN>;

        $r5[1] = $r7;

        $r8 = <weka.core.packageManagement.VersionPackageConstraint$VersionComparison: weka.core.packageManagement.VersionPackageConstraint$VersionComparison GREATERTHANOREQUAL>;

        $r5[2] = $r8;

        $r9 = <weka.core.packageManagement.VersionPackageConstraint$VersionComparison: weka.core.packageManagement.VersionPackageConstraint$VersionComparison LESSTHAN>;

        $r5[3] = $r9;

        $r10 = <weka.core.packageManagement.VersionPackageConstraint$VersionComparison: weka.core.packageManagement.VersionPackageConstraint$VersionComparison LESSTHANOREQUAL>;

        $r5[4] = $r10;

        <weka.core.packageManagement.VersionPackageConstraint$VersionComparison: weka.core.packageManagement.VersionPackageConstraint$VersionComparison[] $VALUES> = $r5;

        return;
    }

    public static weka.core.packageManagement.VersionPackageConstraint$VersionComparison[] values()
    {
        weka.core.packageManagement.VersionPackageConstraint$VersionComparison[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <weka.core.packageManagement.VersionPackageConstraint$VersionComparison: weka.core.packageManagement.VersionPackageConstraint$VersionComparison[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (weka.core.packageManagement.VersionPackageConstraint$VersionComparison[]) $r1;

        return $r2;
    }

    void <init>(java.lang.String, int, java.lang.String, weka.core.packageManagement.VersionPackageConstraint$1)
    {
        weka.core.packageManagement.VersionPackageConstraint$VersionComparison this;
        java.lang.String x0, x2;
        int x1;
        weka.core.packageManagement.VersionPackageConstraint$1 x3;

        this := @this: weka.core.packageManagement.VersionPackageConstraint$VersionComparison;

        x0 := @parameter0: java.lang.String;

        x1 := @parameter1: int;

        x2 := @parameter2: java.lang.String;

        x3 := @parameter3: weka.core.packageManagement.VersionPackageConstraint$1;

        specialinvoke this.<weka.core.packageManagement.VersionPackageConstraint$VersionComparison: void <init>(java.lang.String,int,java.lang.String)>(x0, x1, x2);

        return;
    }

    private void <init>(java.lang.String, int, java.lang.String)
    {
        weka.core.packageManagement.VersionPackageConstraint$VersionComparison this;
        java.lang.String l1, name;
        int l2;

        this := @this: weka.core.packageManagement.VersionPackageConstraint$VersionComparison;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: int;

        name := @parameter2: java.lang.String;

        specialinvoke this.<java.lang.Enum: void <init>(java.lang.String,int)>(l1, l2);

        this.<weka.core.packageManagement.VersionPackageConstraint$VersionComparison: java.lang.String m_stringVal> = name;

        return;
    }

    public java.lang.String toString()
    {
        weka.core.packageManagement.VersionPackageConstraint$VersionComparison this;
        java.lang.String $r0;

        this := @this: weka.core.packageManagement.VersionPackageConstraint$VersionComparison;

        $r0 = this.<weka.core.packageManagement.VersionPackageConstraint$VersionComparison: java.lang.String m_stringVal>;

        return $r0;
    }


