    public void <init>()
    {
        java.lang.StringBuilder l0;

        l0 := @this: java.lang.StringBuilder;

        specialinvoke l0.<java.lang.AbstractStringBuilder: void <init>(int)>(16);

        return;
    }

    public java.lang.StringBuilder append(java.lang.String)
    {
        java.lang.StringBuilder l0;
        java.lang.String l1;

        l0 := @this: java.lang.StringBuilder;

        l1 := @parameter0: java.lang.String;

        specialinvoke l0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.String)>(l1);

        return l0;
    }

    public java.lang.StringBuilder append(int)
    {
        java.lang.StringBuilder l0;
        int l1;

        l0 := @this: java.lang.StringBuilder;

        l1 := @parameter0: int;

        specialinvoke l0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(int)>(l1);

        return l0;
    }

    public volatile java.lang.AbstractStringBuilder append(java.lang.String)
    {
        java.lang.StringBuilder l0, $r0;
        java.lang.String l1;

        l0 := @this: java.lang.StringBuilder;

        l1 := @parameter0: java.lang.String;

        $r0 = virtualinvoke l0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(l1);

        return $r0;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder l0;
        java.lang.String $r0;
        char[] $r1;
        int $i0;

        l0 := @this: java.lang.StringBuilder;

        $r0 = new java.lang.String;

        $r1 = l0.<java.lang.StringBuilder: char[] value>;

        $i0 = l0.<java.lang.StringBuilder: int count>;

        specialinvoke $r0.<java.lang.String: void <init>(char[],int,int)>($r1, 0, $i0);

        return $r0;
    }

    public java.lang.StringBuilder append(char)
    {
        java.lang.StringBuilder l0;
        char l1;

        l0 := @this: java.lang.StringBuilder;

        l1 := @parameter0: char;

        specialinvoke l0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(char)>(l1);

        return l0;
    }

    public void <init>(java.lang.String)
    {
        java.lang.StringBuilder l0;
        java.lang.String l1;
        int $i0, $i1;

        l0 := @this: java.lang.StringBuilder;

        l1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke l1.<java.lang.String: int length()>();

        $i1 = $i0 + 16;

        specialinvoke l0.<java.lang.AbstractStringBuilder: void <init>(int)>($i1);

        virtualinvoke l0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(l1);

        return;
    }

    public java.lang.StringBuilder append(java.lang.Object)
    {
        java.lang.StringBuilder l0, $r1;
        java.lang.Object l1;
        java.lang.String $r0;

        l0 := @this: java.lang.StringBuilder;

        l1 := @parameter0: java.lang.Object;

        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(l1);

        $r1 = virtualinvoke l0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        return $r1;
    }

    public java.lang.StringBuilder append(float)
    {
        java.lang.StringBuilder l0;
        float l1;

        l0 := @this: java.lang.StringBuilder;

        l1 := @parameter0: float;

        specialinvoke l0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(float)>(l1);

        return l0;
    }

    public java.lang.StringBuilder append(long)
    {
        java.lang.StringBuilder l0;
        long l1;

        l0 := @this: java.lang.StringBuilder;

        l1 := @parameter0: long;

        specialinvoke l0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(long)>(l1);

        return l0;
    }

    public void <init>(int)
    {
        java.lang.StringBuilder l0;
        int l1;

        l0 := @this: java.lang.StringBuilder;

        l1 := @parameter0: int;

        specialinvoke l0.<java.lang.AbstractStringBuilder: void <init>(int)>(l1);

        return;
    }

    public java.lang.StringBuilder append(char[], int, int)
    {
        java.lang.StringBuilder l0;
        char[] l1;
        int l2, l3;

        l0 := @this: java.lang.StringBuilder;

        l1 := @parameter0: char[];

        l2 := @parameter1: int;

        l3 := @parameter2: int;

        specialinvoke l0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(char[],int,int)>(l1, l2, l3);

        return l0;
    }

    public java.lang.StringBuilder append(char[])
    {
        java.lang.StringBuilder l0;
        char[] l1;

        l0 := @this: java.lang.StringBuilder;

        l1 := @parameter0: char[];

        specialinvoke l0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(char[])>(l1);

        return l0;
    }

    public java.lang.StringBuilder append(java.lang.CharSequence)
    {
        java.lang.StringBuilder l0;
        java.lang.CharSequence l1;

        l0 := @this: java.lang.StringBuilder;

        l1 := @parameter0: java.lang.CharSequence;

        specialinvoke l0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.CharSequence)>(l1);

        return l0;
    }

    public volatile java.lang.AbstractStringBuilder append(java.lang.CharSequence, int, int)
    {
        java.lang.StringBuilder l0, $r0;
        java.lang.CharSequence l1;
        int l2, l3;

        l0 := @this: java.lang.StringBuilder;

        l1 := @parameter0: java.lang.CharSequence;

        l2 := @parameter1: int;

        l3 := @parameter2: int;

        $r0 = virtualinvoke l0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(l1, l2, l3);

        return $r0;
    }

    public java.lang.StringBuilder append(java.lang.CharSequence, int, int)
    {
        java.lang.StringBuilder l0;
        java.lang.CharSequence l1;
        int l2, l3;

        l0 := @this: java.lang.StringBuilder;

        l1 := @parameter0: java.lang.CharSequence;

        l2 := @parameter1: int;

        l3 := @parameter2: int;

        specialinvoke l0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.CharSequence,int,int)>(l1, l2, l3);

        return l0;
    }

    public volatile int length()
    {
        java.lang.StringBuilder l0;
        int $i0;

        l0 := @this: java.lang.StringBuilder;

        $i0 = specialinvoke l0.<java.lang.AbstractStringBuilder: int length()>();

        return $i0;
    }

    public java.lang.StringBuilder insert(int, char)
    {
        java.lang.StringBuilder l0;
        int l1;
        char l2;

        l0 := @this: java.lang.StringBuilder;

        l1 := @parameter0: int;

        l2 := @parameter1: char;

        specialinvoke l0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder insert(int,char)>(l1, l2);

        return l0;
    }

    public volatile char charAt(int)
    {
        java.lang.StringBuilder l0;
        int l1;
        char $c0;

        l0 := @this: java.lang.StringBuilder;

        l1 := @parameter0: int;

        $c0 = specialinvoke l0.<java.lang.AbstractStringBuilder: char charAt(int)>(l1);

        return $c0;
    }

    public volatile void getChars(int, int, char[], int)
    {
        java.lang.StringBuilder l0;
        int l1, l2, l4;
        char[] l3;

        l0 := @this: java.lang.StringBuilder;

        l1 := @parameter0: int;

        l2 := @parameter1: int;

        l3 := @parameter2: char[];

        l4 := @parameter3: int;

        specialinvoke l0.<java.lang.AbstractStringBuilder: void getChars(int,int,char[],int)>(l1, l2, l3, l4);

        return;
    }

    public volatile java.lang.Appendable append(char) throws java.io.IOException
    {
        java.lang.StringBuilder l0, $r0;
        char l1;

        l0 := @this: java.lang.StringBuilder;

        l1 := @parameter0: char;

        $r0 = virtualinvoke l0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(l1);

        return $r0;
    }

    public volatile java.lang.Appendable append(java.lang.CharSequence) throws java.io.IOException
    {
        java.lang.StringBuilder l0, $r0;
        java.lang.CharSequence l1;

        l0 := @this: java.lang.StringBuilder;

        l1 := @parameter0: java.lang.CharSequence;

        $r0 = virtualinvoke l0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(l1);

        return $r0;
    }


