    static long access$000(int, int)
    {
        int x0, x1;
        long $l0;

        x0 := @parameter0: int;

        x1 := @parameter1: int;

        $l0 = staticinvoke <berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: long calculateMemorySize(int,int)>(x0, x1);

        return $l0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "berkeley/com/sleepycat/je/tree/INKeyRep";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: boolean $assertionsDisabled> = $z1;

        return;
    }

    private static long calculateMemorySize(int, int)
    {
        int maxKeys, maxKeySize, $i0, $i1, $i2, $i3, $i4;
        long $l5;

        maxKeys := @parameter0: int;

        maxKeySize := @parameter1: int;

        $i0 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: int MAX_KEY_SIZE_KEYVALS_OVERHEAD>;

        $i1 = maxKeySize + 1;

        $i2 = maxKeys * $i1;

        $i3 = staticinvoke <berkeley.com.sleepycat.je.dbi.MemoryBudget: int byteArraySize(int)>($i2);

        $i4 = $i0 + $i3;

        $l5 = (long) $i4;

        return $l5;
    }

    public berkeley.com.sleepycat.je.tree.INKeyRep set(int, byte[], berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize this;
        int idx, slotOff#5, $i1, $i3, $i4, slotOff#32, $i6;
        byte[] key, $r0, $r2, $r3;
        berkeley.com.sleepycat.je.tree.IN parent;
        berkeley.com.sleepycat.je.tree.INKeyRep$Default newRep;
        short $s0, $s2;
        berkeley.com.sleepycat.je.tree.INKeyRep $r1;
        byte $b5;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize;

        idx := @parameter0: int;

        key := @parameter1: byte[];

        parent := @parameter2: berkeley.com.sleepycat.je.tree.IN;

        $s0 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: short fixedKeyLen>;

        slotOff#5 = idx * $s0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(key);

        if key != null goto label1;

        $r0 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: byte[] keys>;

        $r0[slotOff#5] = 127;

        return this;

     label1:
        $i1 = lengthof key;

        $s2 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: short fixedKeyLen>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s2);

        if $i1 < $s2 goto label2;

        newRep = specialinvoke this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: berkeley.com.sleepycat.je.tree.INKeyRep$Default expandToDefaultRep(berkeley.com.sleepycat.je.tree.IN)>(parent);

        $r1 = virtualinvoke newRep.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: berkeley.com.sleepycat.je.tree.INKeyRep set(int,byte[],berkeley.com.sleepycat.je.tree.IN)>(idx, key, parent);

        return $r1;

     label2:
        $r2 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: byte[] keys>;

        $i3 = lengthof key;

        $i4 = $i3 + -128;

        $b5 = (byte) $i4;

        $r2[slotOff#5] = $b5;

        slotOff#32 = slotOff#5 + 1;

        $r3 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: byte[] keys>;

        $i6 = lengthof key;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(key, 0, $r3, slotOff#32, $i6);

        return this;
    }

    private berkeley.com.sleepycat.je.tree.INKeyRep$Default expandToDefaultRep(berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize this;
        berkeley.com.sleepycat.je.tree.IN parent;
        int capacity, i#7;
        berkeley.com.sleepycat.je.tree.INKeyRep$Default newRep, $r0;
        byte[] k;
        berkeley.com.sleepycat.je.tree.INKeyRep rep;
        boolean $z0;
        java.lang.AssertionError $r1;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize;

        parent := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        capacity = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: int length()>();

        $r0 = new berkeley.com.sleepycat.je.tree.INKeyRep$Default;

        specialinvoke $r0.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: void <init>(int)>(capacity);

        newRep = $r0;

        i#7 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(capacity);

        if i#7 >= capacity goto label3;

        k = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: byte[] get(int)>(i#7);

        rep = virtualinvoke newRep.<berkeley.com.sleepycat.je.tree.INKeyRep$Default: berkeley.com.sleepycat.je.tree.INKeyRep set(int,byte[],berkeley.com.sleepycat.je.tree.IN)>(i#7, k, parent);

        $z0 = <berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(rep);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(newRep);

        if rep == newRep goto label2;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label2:
        i#7 = i#7 + 1;

        goto label1;

     label3:
        virtualinvoke this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: void noteRepChange(berkeley.com.sleepycat.je.tree.INArrayRep,berkeley.com.sleepycat.je.tree.IN)>(newRep, parent);

        return newRep;
    }

    public int length()
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize this;
        byte[] $r0;
        int $i0, $i2;
        short $s1;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize;

        $r0 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: byte[] keys>;

        $i0 = lengthof $r0;

        $s1 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: short fixedKeyLen>;

        $i2 = $i0 / $s1;

        return $i2;
    }

    public byte[] get(int)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize this;
        int idx, slotLen, slotOff#5, slotOff#18;
        byte[] info, $r0, $r1, $r2;
        short $s0;
        byte $b1, $b2;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize;

        idx := @parameter0: int;

        $s0 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: short fixedKeyLen>;

        slotOff#5 = idx * $s0;

        $r0 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: byte[] keys>;

        $b1 = $r0[slotOff#5];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 != 127 goto label1;

        return null;

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: byte[] keys>;

        $b2 = $r1[slotOff#5];

        slotLen = $b2 - -128;

        slotOff#18 = slotOff#5 + 1;

        info = newarray (byte)[slotLen];

        $r2 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: byte[] keys>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, slotOff#18, info, 0, slotLen);

        return info;
    }

    public void <init>(int, short)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize this;
        int nodeMaxEntries, $i0, $i3, i#19;
        short maxKeyLen, $s1, $s2;
        berkeley.com.sleepycat.je.tree.INKeyRep rep;
        boolean $z0, $z1;
        java.lang.AssertionError $r0, $r2;
        byte[] $r1;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize;

        nodeMaxEntries := @parameter0: int;

        maxKeyLen := @parameter1: short;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.INKeyRep: void <init>()>();

        $z0 = <berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(maxKeyLen);

        if maxKeyLen < 255 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $i0 = maxKeyLen + 1;

        $s1 = (short) $i0;

        this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: short fixedKeyLen> = $s1;

        $s2 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: short fixedKeyLen>;

        $i3 = $s2 * nodeMaxEntries;

        $r1 = newarray (byte)[$i3];

        this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: byte[] keys> = $r1;

        i#19 = 0;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#19);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(nodeMaxEntries);

        if i#19 >= nodeMaxEntries goto label4;

        rep = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: berkeley.com.sleepycat.je.tree.INKeyRep set(int,byte[],berkeley.com.sleepycat.je.tree.IN)>(i#19, null, null);

        $z1 = <berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(rep);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(this);

        if rep == this goto label3;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label3:
        i#19 = i#19 + 1;

        goto label2;

     label4:
        return;
    }

    public long calculateMemorySize()
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize this;
        int $i0, $i1, $i2, $i3;
        byte[] $r0;
        long $l4;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize;

        $i0 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: int MAX_KEY_SIZE_KEYVALS_OVERHEAD>;

        $r0 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: byte[] keys>;

        $i1 = lengthof $r0;

        $i2 = staticinvoke <berkeley.com.sleepycat.je.dbi.MemoryBudget: int byteArraySize(int)>($i1);

        $i3 = $i0 + $i2;

        $l4 = (long) $i3;

        return $l4;
    }

    void updateCacheStats(boolean, berkeley.com.sleepycat.je.evictor.Evictor)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize this;
        boolean increment;
        berkeley.com.sleepycat.je.evictor.Evictor evictor;
        java.util.concurrent.atomic.AtomicLong $r0, $r1;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize;

        increment := @parameter0: boolean;

        evictor := @parameter1: berkeley.com.sleepycat.je.evictor.Evictor;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(increment);

        if increment == 0 goto label1;

        $r0 = virtualinvoke evictor.<berkeley.com.sleepycat.je.evictor.Evictor: java.util.concurrent.atomic.AtomicLong getNINCompactKey()>();

        virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        goto label2;

     label1:
        $r1 = virtualinvoke evictor.<berkeley.com.sleepycat.je.evictor.Evictor: java.util.concurrent.atomic.AtomicLong getNINCompactKey()>();

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long decrementAndGet()>();

     label2:
        return;
    }

    public volatile java.lang.Object compact(berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize this;
        berkeley.com.sleepycat.je.tree.IN l1;
        berkeley.com.sleepycat.je.tree.INKeyRep $r0;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize;

        l1 := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: berkeley.com.sleepycat.je.tree.INKeyRep compact(berkeley.com.sleepycat.je.tree.IN)>(l1);

        return $r0;
    }

    public berkeley.com.sleepycat.je.tree.INKeyRep compact(berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize this;
        berkeley.com.sleepycat.je.tree.IN parent;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize;

        parent := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        return this;
    }

    public volatile java.lang.Object copy(int, int, int, berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize this;
        int l1, l2, l3;
        berkeley.com.sleepycat.je.tree.IN l4;
        berkeley.com.sleepycat.je.tree.INKeyRep $r0;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize;

        l1 := @parameter0: int;

        l2 := @parameter1: int;

        l3 := @parameter2: int;

        l4 := @parameter3: berkeley.com.sleepycat.je.tree.IN;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: berkeley.com.sleepycat.je.tree.INKeyRep copy(int,int,int,berkeley.com.sleepycat.je.tree.IN)>(l1, l2, l3, l4);

        return $r0;
    }

    public berkeley.com.sleepycat.je.tree.INKeyRep copy(int, int, int, berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize this;
        int 'from', 'to', n, $i1, $i3, $i5;
        berkeley.com.sleepycat.je.tree.IN parent;
        byte[] $r0, $r1;
        short $s0, $s2, $s4;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize;

        'from' := @parameter0: int;

        'to' := @parameter1: int;

        n := @parameter2: int;

        parent := @parameter3: berkeley.com.sleepycat.je.tree.IN;

        $r0 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: byte[] keys>;

        $s0 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: short fixedKeyLen>;

        $i1 = 'from' * $s0;

        $r1 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: byte[] keys>;

        $s2 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: short fixedKeyLen>;

        $i3 = 'to' * $s2;

        $s4 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: short fixedKeyLen>;

        $i5 = n * $s4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i1, $r1, $i3, $i5);

        return this;
    }

    public volatile java.lang.Object set(int, java.lang.Object, berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize this;
        int l1;
        java.lang.Object l2;
        berkeley.com.sleepycat.je.tree.IN l3;
        byte[] $r0;
        berkeley.com.sleepycat.je.tree.INKeyRep $r1;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize;

        l1 := @parameter0: int;

        l2 := @parameter1: java.lang.Object;

        l3 := @parameter2: berkeley.com.sleepycat.je.tree.IN;

        $r0 = (byte[]) l2;

        $r1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: berkeley.com.sleepycat.je.tree.INKeyRep set(int,byte[],berkeley.com.sleepycat.je.tree.IN)>(l1, $r0, l3);

        return $r1;
    }

    public volatile java.lang.Object get(int)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize this;
        int l1;
        byte[] $r0;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize;

        l1 := @parameter0: int;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: byte[] get(int)>(l1);

        return $r0;
    }

    public boolean accountsForKeyByteMemUsage()
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize this;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize;

        return 1;
    }

    public volatile java.lang.Object getType()
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize this;
        berkeley.com.sleepycat.je.tree.INKeyRep$Type $r0;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: berkeley.com.sleepycat.je.tree.INKeyRep$Type getType()>();

        return $r0;
    }

    public berkeley.com.sleepycat.je.tree.INKeyRep$Type getType()
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize this;
        berkeley.com.sleepycat.je.tree.INKeyRep$Type $r0;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize;

        $r0 = <berkeley.com.sleepycat.je.tree.INKeyRep$Type: berkeley.com.sleepycat.je.tree.INKeyRep$Type MAX_KEY_SIZE>;

        return $r0;
    }

    public volatile java.lang.Object resize(int)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize this;
        int l1;
        berkeley.com.sleepycat.je.tree.INKeyRep $r0;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize;

        l1 := @parameter0: int;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: berkeley.com.sleepycat.je.tree.INKeyRep resize(int)>(l1);

        return $r0;
    }

    public berkeley.com.sleepycat.je.tree.INKeyRep resize(int)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize this, $r0;
        int capacity, $i1;
        byte[] $r1, $r2;
        short $s0, $s2;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize;

        capacity := @parameter0: int;

        $r0 = new berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize;

        $r1 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: byte[] keys>;

        $s0 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: short fixedKeyLen>;

        $i1 = capacity * $s0;

        $r2 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>($r1, 0, $i1);

        $s2 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: short fixedKeyLen>;

        specialinvoke $r0.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: void <init>(byte[],short)>($r2, $s2);

        return $r0;
    }

    private void <init>(byte[], short)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize this;
        byte[] keys;
        short fixedKeyLen;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize;

        keys := @parameter0: byte[];

        fixedKeyLen := @parameter1: short;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.INKeyRep: void <init>()>();

        this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: byte[] keys> = keys;

        this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: short fixedKeyLen> = fixedKeyLen;

        return;
    }

    public byte[] getFullKey(byte[], int, boolean)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize this;
        byte[] prefix, key, $r0, $r1, $r3, $r4, $r5;
        int idx, slotLen, prefixLen, $i0, slotOff#12, slotOff#29, suffixLen#38, $i4;
        boolean embeddedData, $z0;
        short $s1;
        byte $b2, $b3;
        java.lang.AssertionError $r2;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize;

        prefix := @parameter0: byte[];

        idx := @parameter1: int;

        embeddedData := @parameter2: boolean;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(prefix);

        if prefix == null goto label1;

        $i0 = lengthof prefix;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 0 goto label2;

     label1:
        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: byte[] getKey(int,boolean)>(idx, embeddedData);

        return $r0;

     label2:
        $s1 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: short fixedKeyLen>;

        slotOff#12 = idx * $s1;

        $r1 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: byte[] keys>;

        $b2 = $r1[slotOff#12];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b2);

        if $b2 != 127 goto label4;

        $z0 = <berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(embeddedData);

        if embeddedData == 0 goto label3;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label3:
        return prefix;

     label4:
        $r3 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: byte[] keys>;

        $b3 = $r3[slotOff#12];

        slotLen = $b3 - -128;

        slotOff#29 = slotOff#12 + 1;

        prefixLen = lengthof prefix;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(embeddedData);

        if embeddedData == 0 goto label5;

        $r4 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: byte[] keys>;

        suffixLen#38 = staticinvoke <berkeley.com.sleepycat.je.dbi.DupKeyData: int getKeyLength(byte[],int,int)>($r4, slotOff#29, slotLen);

        goto label6;

     label5:
        suffixLen#38 = slotLen;

     label6:
        $i4 = suffixLen#38 + prefixLen;

        key = newarray (byte)[$i4];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(prefix, 0, key, 0, prefixLen);

        $r5 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: byte[] keys>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, slotOff#29, key, prefixLen, suffixLen#38);

        return key;
    }

    public byte[] getKey(int, boolean)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize this;
        int idx, slotLen, slotOff#5, slotOff#22;
        boolean embeddedData, $z0;
        byte[] key, $r0, $r2, $r3, $r4, $r5, $r6;
        short $s0;
        byte $b1, $b2;
        java.lang.AssertionError $r1;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize;

        idx := @parameter0: int;

        embeddedData := @parameter1: boolean;

        $s0 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: short fixedKeyLen>;

        slotOff#5 = idx * $s0;

        $r0 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: byte[] keys>;

        $b1 = $r0[slotOff#5];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 != 127 goto label2;

        $z0 = <berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(embeddedData);

        if embeddedData == 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $r2 = <berkeley.com.sleepycat.je.tree.Key: byte[] EMPTY_KEY>;

        return $r2;

     label2:
        $r3 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: byte[] keys>;

        $b2 = $r3[slotOff#5];

        slotLen = $b2 - -128;

        slotOff#22 = slotOff#5 + 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(embeddedData);

        if embeddedData == 0 goto label3;

        $r4 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: byte[] keys>;

        $r5 = staticinvoke <berkeley.com.sleepycat.je.dbi.DupKeyData: byte[] getKey(byte[],int,int)>($r4, slotOff#22, slotLen);

        return $r5;

     label3:
        key = newarray (byte)[slotLen];

        $r6 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: byte[] keys>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, slotOff#22, key, 0, slotLen);

        return key;
    }

    public int compareKeys(byte[], byte[], int, boolean, java.util.Comparator)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize this;
        byte[] searchKey, prefix, myKey;
        int idx, searchKeyOff, searchKeyLen, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, cmp#36, $i8, $i9, $i10;
        boolean embeddedData, cmp#12;
        java.util.Comparator comparator;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize;

        searchKey := @parameter0: byte[];

        prefix := @parameter1: byte[];

        idx := @parameter2: int;

        embeddedData := @parameter3: boolean;

        comparator := @parameter4: java.util.Comparator;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(comparator);

        if comparator == null goto label1;

        myKey = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: byte[] getFullKey(byte[],int,boolean)>(prefix, idx, embeddedData);

        $i0 = staticinvoke <berkeley.com.sleepycat.je.tree.Key: int compareKeys(byte[],byte[],java.util.Comparator)>(searchKey, myKey, comparator);

        return $i0;

     label1:
        cmp#12 = 0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(prefix);

        if prefix == null goto label2;

        $i1 = lengthof prefix;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 != 0 goto label3;

     label2:
        $i2 = lengthof searchKey;

        $i3 = specialinvoke this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: int compareSuffixes(byte[],int,int,int,boolean)>(searchKey, 0, $i2, idx, embeddedData);

        return $i3;

     label3:
        $i4 = lengthof searchKey;

        $i5 = lengthof prefix;

        $i6 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i5);

        $i7 = lengthof prefix;

        cmp#36 = staticinvoke <berkeley.com.sleepycat.je.tree.Key: int compareUnsignedBytes(byte[],int,int,byte[],int,int)>(searchKey, 0, $i6, prefix, 0, $i7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(cmp#36);

        if cmp#36 != 0 goto label4;

        searchKeyOff = lengthof prefix;

        $i8 = lengthof searchKey;

        $i9 = lengthof prefix;

        searchKeyLen = $i8 - $i9;

        $i10 = specialinvoke this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: int compareSuffixes(byte[],int,int,int,boolean)>(searchKey, searchKeyOff, searchKeyLen, idx, embeddedData);

        return $i10;

     label4:
        return cmp#36;
    }

    private int compareSuffixes(byte[], int, int, int, boolean)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize this;
        byte[] searchKey, $r0, $r1, $r2, $r4;
        int searchKeyOff, searchKeyLen, idx, myKeyOff#5, myKeyLen#7, myKeyOff#19, $i3;
        boolean embeddedData, $z0;
        short $s0;
        byte $b1, $b2;
        java.lang.AssertionError $r3;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize;

        searchKey := @parameter0: byte[];

        searchKeyOff := @parameter1: int;

        searchKeyLen := @parameter2: int;

        idx := @parameter3: int;

        embeddedData := @parameter4: boolean;

        $s0 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: short fixedKeyLen>;

        myKeyOff#5 = idx * $s0;

        myKeyLen#7 = 0;

        $r0 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: byte[] keys>;

        $b1 = $r0[myKeyOff#5];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 == 127 goto label1;

        $r1 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: byte[] keys>;

        $b2 = $r1[myKeyOff#5];

        myKeyLen#7 = $b2 - -128;

        myKeyOff#19 = myKeyOff#5 + 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(embeddedData);

        if embeddedData == 0 goto label3;

        $r2 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: byte[] keys>;

        myKeyLen#7 = staticinvoke <berkeley.com.sleepycat.je.dbi.DupKeyData: int getKeyLength(byte[],int,int)>($r2, myKeyOff#19, myKeyLen#7);

        goto label3;

     label1:
        $z0 = <berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(embeddedData);

        if embeddedData == 0 goto label2;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        myKeyOff#19 = myKeyOff#5 + 1;

     label3:
        $r4 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: byte[] keys>;

        $i3 = staticinvoke <berkeley.com.sleepycat.je.tree.Key: int compareUnsignedBytes(byte[],int,int,byte[],int,int)>(searchKey, searchKeyOff, searchKeyLen, $r4, myKeyOff#19, myKeyLen#7);

        return $i3;
    }

    public berkeley.com.sleepycat.je.tree.INKeyRep set(int, byte[], byte[], berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize this;
        int idx, $i0;
        byte[] key, data, twoPartKey;
        berkeley.com.sleepycat.je.tree.IN parent;
        berkeley.com.sleepycat.je.tree.INKeyRep $r0, $r1;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize;

        idx := @parameter0: int;

        key := @parameter1: byte[];

        data := @parameter2: byte[];

        parent := @parameter3: berkeley.com.sleepycat.je.tree.IN;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(data);

        if data == null goto label1;

        $i0 = lengthof data;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 0 goto label2;

     label1:
        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: berkeley.com.sleepycat.je.tree.INKeyRep set(int,byte[],berkeley.com.sleepycat.je.tree.IN)>(idx, key, parent);

        return $r0;

     label2:
        twoPartKey = staticinvoke <berkeley.com.sleepycat.je.dbi.DupKeyData: byte[] combine(byte[],byte[])>(key, data);

        $r1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: berkeley.com.sleepycat.je.tree.INKeyRep set(int,byte[],berkeley.com.sleepycat.je.tree.IN)>(idx, twoPartKey, parent);

        return $r1;
    }

    public berkeley.com.sleepycat.je.tree.INKeyRep setData(int, byte[], berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize this;
        int idx;
        byte[] data, $r0;
        berkeley.com.sleepycat.je.tree.IN parent;
        berkeley.com.sleepycat.je.tree.INKeyRep $r1;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize;

        idx := @parameter0: int;

        data := @parameter1: byte[];

        parent := @parameter2: berkeley.com.sleepycat.je.tree.IN;

        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: byte[] getKey(int,boolean)>(idx, 1);

        $r1 = virtualinvoke this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: berkeley.com.sleepycat.je.tree.INKeyRep set(int,byte[],byte[],berkeley.com.sleepycat.je.tree.IN)>(idx, $r0, data, parent);

        return $r1;
    }

    public byte[] getData(int)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize this;
        int idx, slotLen, slotOff#5, slotOff#20;
        short $s0;
        boolean $z0;
        byte[] $r0, $r2, $r3, $r4;
        byte $b1, $b2;
        java.lang.AssertionError $r1;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize;

        idx := @parameter0: int;

        $s0 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: short fixedKeyLen>;

        slotOff#5 = idx * $s0;

        $z0 = <berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r0 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: byte[] keys>;

        $b1 = $r0[slotOff#5];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 != 127 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $r2 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: byte[] keys>;

        $b2 = $r2[slotOff#5];

        slotLen = $b2 - -128;

        slotOff#20 = slotOff#5 + 1;

        $r3 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: byte[] keys>;

        $r4 = staticinvoke <berkeley.com.sleepycat.je.dbi.DupKeyData: byte[] getData(byte[],int,int)>($r3, slotOff#20, slotLen);

        return $r4;
    }

    public int size(int)
    {
        berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize this;
        int idx, slotOff, $i3;
        short $s0;
        boolean $z0;
        byte[] $r0, $r2;
        byte $b1, $b2;
        java.lang.AssertionError $r1;

        this := @this: berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize;

        idx := @parameter0: int;

        $s0 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: short fixedKeyLen>;

        slotOff = idx * $s0;

        $z0 = <berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r0 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: byte[] keys>;

        $b1 = $r0[slotOff];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 != 127 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $r2 = this.<berkeley.com.sleepycat.je.tree.INKeyRep$MaxKeySize: byte[] keys>;

        $b2 = $r2[slotOff];

        $i3 = $b2 - -128;

        return $i3;
    }


