    protected void <init>(org.w3c.dom.Element) throws java.lang.Exception
    {
        weka.core.pmml.TargetMetaInfo this;
        org.w3c.dom.Element target, valueE;
        java.lang.String min, max, rsc, rsf, cstI, valueName, displayValue, prior, defaultV, $r6, $r8, $r13, $r15, $r20, $r22, $r27, $r29, $r49, $r64, $r66;
        java.lang.IllegalArgumentException ex, ex, ex, ex, ex, ex, $r2, $r9, $r16, $r23, $r43, $r59;
        org.w3c.dom.NodeList vals;
        org.w3c.dom.Node value;
        java.util.ArrayList $r0, $r1, $r39, $r40, $r41;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i#117, $i7, $i9, $i10, $i11, $i12;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        java.lang.Exception $r3, $r10, $r17, $r24, $r35, $r44, $r45, $r54, $r60, $r61;
        java.lang.StringBuilder $r4, $r5, $r7, $r11, $r12, $r14, $r18, $r19, $r21, $r25, $r26, $r28, $r46, $r47, $r48, $r62, $r63, $r65;
        double[] $r30, $r42, $r58;
        short $s8;
        weka.core.pmml.FieldMetaInfo$Optype $r31, $r32, $r33, $r34, $r36, $r37, $r38, $r50, $r51, $r52, $r53, $r55, $r56, $r57;

        this := @this: weka.core.pmml.TargetMetaInfo;

        target := @parameter0: org.w3c.dom.Element;

        specialinvoke this.<weka.core.pmml.FieldMetaInfo: void <init>(org.w3c.dom.Element)>(target);

        this.<weka.core.pmml.TargetMetaInfo: double m_min> = #NaN;

        this.<weka.core.pmml.TargetMetaInfo: double m_max> = #NaN;

        this.<weka.core.pmml.TargetMetaInfo: double m_rescaleConstant> = 0.0;

        this.<weka.core.pmml.TargetMetaInfo: double m_rescaleFactor> = 1.0;

        this.<weka.core.pmml.TargetMetaInfo: java.lang.String m_castInteger> = "";

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        this.<weka.core.pmml.TargetMetaInfo: java.util.ArrayList m_values> = $r0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        this.<weka.core.pmml.TargetMetaInfo: java.util.ArrayList m_displayValues> = $r1;

        min = interfaceinvoke target.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("min");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(min);

        if min == null goto label04;

        $i0 = virtualinvoke min.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label04;

     label01:
        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(min);

        this.<weka.core.pmml.TargetMetaInfo: double m_min> = $d0;

     label02:
        goto label04;

     label03:
        $r2 := @caughtexception;

        ex = $r2;

        $r3 = new java.lang.Exception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[TargetMetaInfo] can\'t parse min value for target field ");

        $r6 = this.<weka.core.pmml.TargetMetaInfo: java.lang.String m_fieldName>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String)>($r8);

        throw $r3;

     label04:
        max = interfaceinvoke target.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("max");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(max);

        if max == null goto label08;

        $i1 = virtualinvoke max.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 0 goto label08;

     label05:
        $d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(max);

        this.<weka.core.pmml.TargetMetaInfo: double m_max> = $d1;

     label06:
        goto label08;

     label07:
        $r9 := @caughtexception;

        ex = $r9;

        $r10 = new java.lang.Exception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[TargetMetaInfo] can\'t parse max value for target field ");

        $r13 = this.<weka.core.pmml.TargetMetaInfo: java.lang.String m_fieldName>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.Exception: void <init>(java.lang.String)>($r15);

        throw $r10;

     label08:
        rsc = interfaceinvoke target.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("rescaleConstant");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(rsc);

        if rsc == null goto label12;

        $i2 = virtualinvoke rsc.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 <= 0 goto label12;

     label09:
        $d2 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(rsc);

        this.<weka.core.pmml.TargetMetaInfo: double m_rescaleConstant> = $d2;

     label10:
        goto label12;

     label11:
        $r16 := @caughtexception;

        ex = $r16;

        $r17 = new java.lang.Exception;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[TargetMetaInfo] can\'t parse rescale constant value for target field ");

        $r20 = this.<weka.core.pmml.TargetMetaInfo: java.lang.String m_fieldName>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.Exception: void <init>(java.lang.String)>($r22);

        throw $r17;

     label12:
        rsf = interfaceinvoke target.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("rescaleFactor");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(rsf);

        if rsf == null goto label16;

        $i3 = virtualinvoke rsf.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 <= 0 goto label16;

     label13:
        $d3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(rsf);

        this.<weka.core.pmml.TargetMetaInfo: double m_rescaleFactor> = $d3;

     label14:
        goto label16;

     label15:
        $r23 := @caughtexception;

        ex = $r23;

        $r24 = new java.lang.Exception;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[TargetMetaInfo] can\'t parse rescale factor value for target field ");

        $r27 = this.<weka.core.pmml.TargetMetaInfo: java.lang.String m_fieldName>;

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.Exception: void <init>(java.lang.String)>($r29);

        throw $r24;

     label16:
        cstI = interfaceinvoke target.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("castInteger");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(cstI);

        if cstI == null goto label17;

        $i4 = virtualinvoke cstI.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 <= 0 goto label17;

        this.<weka.core.pmml.TargetMetaInfo: java.lang.String m_castInteger> = cstI;

     label17:
        vals = interfaceinvoke target.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("TargetValue");

        $i5 = interfaceinvoke vals.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i5 <= 0 goto label36;

        $i6 = interfaceinvoke vals.<org.w3c.dom.NodeList: int getLength()>();

        $r30 = newarray (double)[$i6];

        this.<weka.core.pmml.TargetMetaInfo: double[] m_defaultValueOrPriorProbs> = $r30;

        i#117 = 0;

     label18:
        $i7 = interfaceinvoke vals.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#117);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if i#117 >= $i7 goto label36;

        value = interfaceinvoke vals.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i#117);

        $s8 = interfaceinvoke value.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s8);

        if $s8 != 1 goto label35;

        valueE = (org.w3c.dom.Element) value;

        valueName = interfaceinvoke valueE.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("value");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(valueName);

        if valueName == null goto label28;

        $i9 = virtualinvoke valueName.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        if $i9 <= 0 goto label28;

        $r31 = this.<weka.core.pmml.TargetMetaInfo: weka.core.pmml.FieldMetaInfo$Optype m_optype>;

        $r32 = <weka.core.pmml.FieldMetaInfo$Optype: weka.core.pmml.FieldMetaInfo$Optype CATEGORICAL>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r31);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r32);

        if $r31 == $r32 goto label19;

        $r33 = this.<weka.core.pmml.TargetMetaInfo: weka.core.pmml.FieldMetaInfo$Optype m_optype>;

        $r34 = <weka.core.pmml.FieldMetaInfo$Optype: weka.core.pmml.FieldMetaInfo$Optype NONE>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r33);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r34);

        if $r33 == $r34 goto label19;

        $r35 = new java.lang.Exception;

        specialinvoke $r35.<java.lang.Exception: void <init>(java.lang.String)>("[TargetMetaInfo] TargetValue element has categorical value but optype is not categorical!");

        throw $r35;

     label19:
        $r36 = this.<weka.core.pmml.TargetMetaInfo: weka.core.pmml.FieldMetaInfo$Optype m_optype>;

        $r37 = <weka.core.pmml.FieldMetaInfo$Optype: weka.core.pmml.FieldMetaInfo$Optype NONE>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r36);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r37);

        if $r36 != $r37 goto label20;

        $r38 = <weka.core.pmml.FieldMetaInfo$Optype: weka.core.pmml.FieldMetaInfo$Optype CATEGORICAL>;

        this.<weka.core.pmml.TargetMetaInfo: weka.core.pmml.FieldMetaInfo$Optype m_optype> = $r38;

     label20:
        $r39 = this.<weka.core.pmml.TargetMetaInfo: java.util.ArrayList m_values>;

        virtualinvoke $r39.<java.util.ArrayList: boolean add(java.lang.Object)>(valueName);

        displayValue = interfaceinvoke valueE.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("displayValue");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(displayValue);

        if displayValue == null goto label21;

        $i10 = virtualinvoke displayValue.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i10);

        if $i10 <= 0 goto label21;

        $r40 = this.<weka.core.pmml.TargetMetaInfo: java.util.ArrayList m_displayValues>;

        virtualinvoke $r40.<java.util.ArrayList: boolean add(java.lang.Object)>(displayValue);

        goto label22;

     label21:
        $r41 = this.<weka.core.pmml.TargetMetaInfo: java.util.ArrayList m_displayValues>;

        virtualinvoke $r41.<java.util.ArrayList: boolean add(java.lang.Object)>(valueName);

     label22:
        prior = interfaceinvoke valueE.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("priorProbability");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(prior);

        if prior == null goto label26;

        $i11 = virtualinvoke prior.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i11);

        if $i11 <= 0 goto label26;

     label23:
        $r42 = this.<weka.core.pmml.TargetMetaInfo: double[] m_defaultValueOrPriorProbs>;

        $d4 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(prior);

        $r42[i#117] = $d4;

     label24:
        goto label27;

     label25:
        $r43 := @caughtexception;

        ex = $r43;

        $r44 = new java.lang.Exception;

        specialinvoke $r44.<java.lang.Exception: void <init>(java.lang.String)>("[TargetMetaInfo] Can\'t parse probability from TargetValue element.");

        throw $r44;

     label26:
        $r45 = new java.lang.Exception;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[TargetMetaInfo] No prior probability defined for value ");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(valueName);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r45.<java.lang.Exception: void <init>(java.lang.String)>($r49);

        throw $r45;

     label27:
        goto label35;

     label28:
        $r50 = this.<weka.core.pmml.TargetMetaInfo: weka.core.pmml.FieldMetaInfo$Optype m_optype>;

        $r51 = <weka.core.pmml.FieldMetaInfo$Optype: weka.core.pmml.FieldMetaInfo$Optype CONTINUOUS>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r50);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r51);

        if $r50 == $r51 goto label29;

        $r52 = this.<weka.core.pmml.TargetMetaInfo: weka.core.pmml.FieldMetaInfo$Optype m_optype>;

        $r53 = <weka.core.pmml.FieldMetaInfo$Optype: weka.core.pmml.FieldMetaInfo$Optype NONE>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r52);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r53);

        if $r52 == $r53 goto label29;

        $r54 = new java.lang.Exception;

        specialinvoke $r54.<java.lang.Exception: void <init>(java.lang.String)>("[TargetMetaInfo] TargetValue element has continuous value but optype is not continuous!");

        throw $r54;

     label29:
        $r55 = this.<weka.core.pmml.TargetMetaInfo: weka.core.pmml.FieldMetaInfo$Optype m_optype>;

        $r56 = <weka.core.pmml.FieldMetaInfo$Optype: weka.core.pmml.FieldMetaInfo$Optype NONE>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r55);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r56);

        if $r55 != $r56 goto label30;

        $r57 = <weka.core.pmml.FieldMetaInfo$Optype: weka.core.pmml.FieldMetaInfo$Optype CONTINUOUS>;

        this.<weka.core.pmml.TargetMetaInfo: weka.core.pmml.FieldMetaInfo$Optype m_optype> = $r57;

     label30:
        defaultV = interfaceinvoke valueE.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("defaultValue");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(defaultV);

        if defaultV == null goto label34;

        $i12 = virtualinvoke defaultV.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i12);

        if $i12 <= 0 goto label34;

     label31:
        $r58 = this.<weka.core.pmml.TargetMetaInfo: double[] m_defaultValueOrPriorProbs>;

        $d5 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(defaultV);

        $r58[i#117] = $d5;

     label32:
        goto label35;

     label33:
        $r59 := @caughtexception;

        ex = $r59;

        $r60 = new java.lang.Exception;

        specialinvoke $r60.<java.lang.Exception: void <init>(java.lang.String)>("[TargetMetaInfo] Can\'t parse default value from TargetValue element.");

        throw $r60;

     label34:
        $r61 = new java.lang.Exception;

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[TargetMetaInfo] No default value defined for target ");

        $r64 = this.<weka.core.pmml.TargetMetaInfo: java.lang.String m_fieldName>;

        $r65 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r64);

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r61.<java.lang.Exception: void <init>(java.lang.String)>($r66);

        throw $r61;

     label35:
        i#117 = i#117 + 1;

        goto label18;

     label36:
        return;

        catch java.lang.IllegalArgumentException from label01 to label02 with label03;
        catch java.lang.IllegalArgumentException from label05 to label06 with label07;
        catch java.lang.IllegalArgumentException from label09 to label10 with label11;
        catch java.lang.IllegalArgumentException from label13 to label14 with label15;
        catch java.lang.IllegalArgumentException from label23 to label24 with label25;
        catch java.lang.IllegalArgumentException from label31 to label32 with label33;
    }

    public java.util.ArrayList getValues()
    {
        weka.core.pmml.TargetMetaInfo this;
        java.util.ArrayList $r0, $r1;

        this := @this: weka.core.pmml.TargetMetaInfo;

        $r0 = new java.util.ArrayList;

        $r1 = this.<weka.core.pmml.TargetMetaInfo: java.util.ArrayList m_values>;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r1);

        return $r0;
    }

    public double applyMinMaxRescaleCast(double) throws java.lang.Exception
    {
        weka.core.pmml.TargetMetaInfo this;
        double prediction#1, $d0, $d1, $d2, $d3, $d4, prediction#30, $d5, prediction#35;
        weka.core.pmml.FieldMetaInfo$Optype $r0, $r1;
        java.lang.Exception $r2, $r7;
        boolean $z0, $z1, $z2, $z3, $z4;
        byte $b0, $b1;
        java.lang.String $r3, $r4, $r5, $r6, $r10, $r12;
        int $i2;
        long $l3;
        java.lang.StringBuilder $r8, $r9, $r11;

        this := @this: weka.core.pmml.TargetMetaInfo;

        prediction#1 := @parameter0: double;

        $r0 = this.<weka.core.pmml.TargetMetaInfo: weka.core.pmml.FieldMetaInfo$Optype m_optype>;

        $r1 = <weka.core.pmml.FieldMetaInfo$Optype: weka.core.pmml.FieldMetaInfo$Optype CONTINUOUS>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r0 == $r1 goto label1;

        $r2 = new java.lang.Exception;

        specialinvoke $r2.<java.lang.Exception: void <init>(java.lang.String)>("[TargetMetaInfo] target must be continuous!");

        throw $r2;

     label1:
        $d0 = this.<weka.core.pmml.TargetMetaInfo: double m_min>;

        $z0 = staticinvoke <weka.core.Utils: boolean isMissingValue(double)>($d0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label2;

        $d1 = this.<weka.core.pmml.TargetMetaInfo: double m_min>;

        $b0 = prediction#1 cmpg $d1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 >= 0 goto label2;

        prediction#1 = this.<weka.core.pmml.TargetMetaInfo: double m_min>;

     label2:
        $d2 = this.<weka.core.pmml.TargetMetaInfo: double m_max>;

        $z1 = staticinvoke <weka.core.Utils: boolean isMissingValue(double)>($d2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label3;

        $d3 = this.<weka.core.pmml.TargetMetaInfo: double m_max>;

        $b1 = prediction#1 cmpl $d3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 <= 0 goto label3;

        prediction#1 = this.<weka.core.pmml.TargetMetaInfo: double m_max>;

     label3:
        $d4 = this.<weka.core.pmml.TargetMetaInfo: double m_rescaleFactor>;

        prediction#30 = prediction#1 * $d4;

        $d5 = this.<weka.core.pmml.TargetMetaInfo: double m_rescaleConstant>;

        prediction#35 = prediction#30 + $d5;

        $r3 = this.<weka.core.pmml.TargetMetaInfo: java.lang.String m_castInteger>;

        $i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 <= 0 goto label7;

        $r4 = this.<weka.core.pmml.TargetMetaInfo: java.lang.String m_castInteger>;

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("round");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label4;

        $l3 = staticinvoke <java.lang.Math: long round(double)>(prediction#35);

        prediction#35 = (double) $l3;

        goto label7;

     label4:
        $r5 = this.<weka.core.pmml.TargetMetaInfo: java.lang.String m_castInteger>;

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("ceiling");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label5;

        prediction#35 = staticinvoke <java.lang.Math: double ceil(double)>(prediction#35);

        goto label7;

     label5:
        $r6 = this.<weka.core.pmml.TargetMetaInfo: java.lang.String m_castInteger>;

        $z4 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("floor");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label6;

        prediction#35 = staticinvoke <java.lang.Math: double floor(double)>(prediction#35);

        goto label7;

     label6:
        $r7 = new java.lang.Exception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[TargetMetaInfo] unknown castInteger value ");

        $r10 = this.<weka.core.pmml.TargetMetaInfo: java.lang.String m_castInteger>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.Exception: void <init>(java.lang.String)>($r12);

        throw $r7;

     label7:
        return prediction#35;
    }

    public double getDefaultValue() throws java.lang.Exception
    {
        weka.core.pmml.TargetMetaInfo this;
        double[] $r0, $r2;
        java.lang.Exception $r1;
        double $d0;

        this := @this: weka.core.pmml.TargetMetaInfo;

        $r0 = this.<weka.core.pmml.TargetMetaInfo: double[] m_defaultValueOrPriorProbs>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label1;

        $r1 = new java.lang.Exception;

        specialinvoke $r1.<java.lang.Exception: void <init>(java.lang.String)>("[TargetMetaInfo] no TargetValues defined (getPriorProbability)");

        throw $r1;

     label1:
        $r2 = this.<weka.core.pmml.TargetMetaInfo: double[] m_defaultValueOrPriorProbs>;

        $d0 = $r2[0];

        return $d0;
    }

    public double getPriorProbability(java.lang.String) throws java.lang.Exception
    {
        weka.core.pmml.TargetMetaInfo this;
        java.lang.String value, $r11;
        double[] $r0, $r5;
        java.lang.Exception $r1, $r6;
        double result#7;
        boolean found#9, $z0;
        int i#11, $i0;
        java.util.ArrayList $r2, $r3;
        java.lang.Object $r4;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;

        this := @this: weka.core.pmml.TargetMetaInfo;

        value := @parameter0: java.lang.String;

        $r0 = this.<weka.core.pmml.TargetMetaInfo: double[] m_defaultValueOrPriorProbs>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label1;

        $r1 = new java.lang.Exception;

        specialinvoke $r1.<java.lang.Exception: void <init>(java.lang.String)>("[TargetMetaInfo] no TargetValues defined (getPriorProbability)");

        throw $r1;

     label1:
        result#7 = #NaN;

        found#9 = 0;

        i#11 = 0;

     label2:
        $r2 = this.<weka.core.pmml.TargetMetaInfo: java.util.ArrayList m_values>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#11);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#11 >= $i0 goto label4;

        $r3 = this.<weka.core.pmml.TargetMetaInfo: java.util.ArrayList m_values>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i#11);

        $z0 = virtualinvoke value.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        found#9 = 1;

        $r5 = this.<weka.core.pmml.TargetMetaInfo: double[] m_defaultValueOrPriorProbs>;

        result#7 = $r5[i#11];

        goto label4;

     label3:
        i#11 = i#11 + 1;

        goto label2;

     label4:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(found#9);

        if found#9 != 0 goto label5;

        $r6 = new java.lang.Exception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[TargetMetaInfo] couldn\'t find value ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(value);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(getPriorProbability)");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.Exception: void <init>(java.lang.String)>($r11);

        throw $r6;

     label5:
        return result#7;
    }


