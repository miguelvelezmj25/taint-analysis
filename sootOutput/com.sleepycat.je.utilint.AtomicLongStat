    public void <init>(com.sleepycat.je.utilint.StatGroup, com.sleepycat.je.utilint.StatDefinition)
    {
        com.sleepycat.je.utilint.AtomicLongStat this;
        com.sleepycat.je.utilint.StatGroup group;
        com.sleepycat.je.utilint.StatDefinition definition;
        java.util.concurrent.atomic.AtomicLong $r0;

        this := @this: com.sleepycat.je.utilint.AtomicLongStat;

        group := @parameter0: com.sleepycat.je.utilint.StatGroup;

        definition := @parameter1: com.sleepycat.je.utilint.StatDefinition;

        specialinvoke this.<com.sleepycat.je.utilint.Stat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition)>(group, definition);

        $r0 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        this.<com.sleepycat.je.utilint.AtomicLongStat: java.util.concurrent.atomic.AtomicLong counter> = $r0;

        return;
    }

    public java.lang.Long get()
    {
        com.sleepycat.je.utilint.AtomicLongStat this;
        java.util.concurrent.atomic.AtomicLong $r0;
        long $l0;
        java.lang.Long $r1;

        this := @this: com.sleepycat.je.utilint.AtomicLongStat;

        $r0 = this.<com.sleepycat.je.utilint.AtomicLongStat: java.util.concurrent.atomic.AtomicLong counter>;

        $l0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r1;
    }

    public void increment()
    {
        com.sleepycat.je.utilint.AtomicLongStat this;
        java.util.concurrent.atomic.AtomicLong $r0;

        this := @this: com.sleepycat.je.utilint.AtomicLongStat;

        $r0 = this.<com.sleepycat.je.utilint.AtomicLongStat: java.util.concurrent.atomic.AtomicLong counter>;

        virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        return;
    }

    public void add(long)
    {
        com.sleepycat.je.utilint.AtomicLongStat this;
        long count;
        java.util.concurrent.atomic.AtomicLong $r0;

        this := @this: com.sleepycat.je.utilint.AtomicLongStat;

        count := @parameter0: long;

        $r0 = this.<com.sleepycat.je.utilint.AtomicLongStat: java.util.concurrent.atomic.AtomicLong counter>;

        virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(count);

        return;
    }


