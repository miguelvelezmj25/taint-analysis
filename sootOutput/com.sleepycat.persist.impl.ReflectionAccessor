    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        com.sleepycat.persist.impl.ReflectionAccessor$FieldAccess[] $r1;

        $r0 = class "com/sleepycat/persist/impl/ReflectionAccessor";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sleepycat.persist.impl.ReflectionAccessor: boolean $assertionsDisabled> = $z1;

        $r1 = newarray (com.sleepycat.persist.impl.ReflectionAccessor$FieldAccess)[0];

        <com.sleepycat.persist.impl.ReflectionAccessor: com.sleepycat.persist.impl.ReflectionAccessor$FieldAccess[] EMPTY_KEYS> = $r1;

        return;
    }

    void <init>(com.sleepycat.persist.impl.Catalog, java.lang.Class, java.util.List)
    {
        com.sleepycat.persist.impl.ReflectionAccessor this;
        com.sleepycat.persist.impl.Catalog catalog;
        java.lang.Class type;
        java.util.List fieldInfos;
        com.sleepycat.persist.impl.ReflectionAccessor$FieldAccess[] $r0, $r1;

        this := @this: com.sleepycat.persist.impl.ReflectionAccessor;

        catalog := @parameter0: com.sleepycat.persist.impl.Catalog;

        type := @parameter1: java.lang.Class;

        fieldInfos := @parameter2: java.util.List;

        specialinvoke this.<com.sleepycat.persist.impl.ReflectionAccessor: void <init>(java.lang.Class,com.sleepycat.persist.impl.Accessor)>(type, null);

        this.<com.sleepycat.persist.impl.ReflectionAccessor: com.sleepycat.persist.impl.ReflectionAccessor$FieldAccess priKey> = null;

        $r0 = <com.sleepycat.persist.impl.ReflectionAccessor: com.sleepycat.persist.impl.ReflectionAccessor$FieldAccess[] EMPTY_KEYS>;

        this.<com.sleepycat.persist.impl.ReflectionAccessor: com.sleepycat.persist.impl.ReflectionAccessor$FieldAccess[] secKeys> = $r0;

        $r1 = specialinvoke this.<com.sleepycat.persist.impl.ReflectionAccessor: com.sleepycat.persist.impl.ReflectionAccessor$FieldAccess[] getFields(com.sleepycat.persist.impl.Catalog,java.util.List,boolean)>(catalog, fieldInfos, 1);

        this.<com.sleepycat.persist.impl.ReflectionAccessor: com.sleepycat.persist.impl.ReflectionAccessor$FieldAccess[] nonKeys> = $r1;

        return;
    }

    private void <init>(java.lang.Class, com.sleepycat.persist.impl.Accessor)
    {
        com.sleepycat.persist.impl.ReflectionAccessor this;
        java.lang.Class type;
        com.sleepycat.persist.impl.Accessor superAccessor;
        java.lang.NoSuchMethodException e, $r2;
        java.lang.Class[] $r0;
        java.lang.reflect.Constructor $r1, $r5, $r6;
        java.lang.String $r3, $r8, $r11;
        java.lang.RuntimeException $r4;
        int $i0, $i1;
        boolean $z0, $z1;
        java.lang.StringBuilder $r7, $r9, $r10;

        this := @this: com.sleepycat.persist.impl.ReflectionAccessor;

        type := @parameter0: java.lang.Class;

        superAccessor := @parameter1: com.sleepycat.persist.impl.Accessor;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<com.sleepycat.persist.impl.ReflectionAccessor: java.lang.Class type> = type;

        this.<com.sleepycat.persist.impl.ReflectionAccessor: com.sleepycat.persist.impl.Accessor superAccessor> = superAccessor;

     label1:
        $r0 = newarray (java.lang.Class)[0];

        $r1 = virtualinvoke type.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r0);

        this.<com.sleepycat.persist.impl.ReflectionAccessor: java.lang.reflect.Constructor constructor> = $r1;

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        e = $r2;

        $r3 = virtualinvoke type.<java.lang.Class: java.lang.String getName()>();

        $r4 = staticinvoke <com.sleepycat.compat.DbCompat: java.lang.RuntimeException unexpectedState(java.lang.String)>($r3);

        throw $r4;

     label4:
        $i0 = virtualinvoke type.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z0 == 0 goto label5;

        $r5 = this.<com.sleepycat.persist.impl.ReflectionAccessor: java.lang.reflect.Constructor constructor>;

        $i1 = virtualinvoke $r5.<java.lang.reflect.Constructor: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i1);

        if $z1 != 0 goto label6;

     label5:
        $r6 = this.<com.sleepycat.persist.impl.ReflectionAccessor: java.lang.reflect.Constructor constructor>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke type.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("()");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke this.<com.sleepycat.persist.impl.ReflectionAccessor: void setAccessible(java.lang.reflect.AccessibleObject,java.lang.String)>($r6, $r11);

     label6:
        return;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    private com.sleepycat.persist.impl.ReflectionAccessor$FieldAccess[] getFields(com.sleepycat.persist.impl.Catalog, java.util.List, boolean)
    {
        com.sleepycat.persist.impl.ReflectionAccessor this;
        com.sleepycat.persist.impl.Catalog catalog;
        java.util.List fieldInfos;
        boolean isRequiredKeyField, $z0;
        com.sleepycat.persist.impl.ReflectionAccessor$FieldAccess[] fields;
        java.util.Iterator l6;
        com.sleepycat.persist.impl.FieldInfo info;
        int index#2, $i0;
        java.lang.Object $r0;
        com.sleepycat.persist.impl.ReflectionAccessor$FieldAccess $r1;

        this := @this: com.sleepycat.persist.impl.ReflectionAccessor;

        catalog := @parameter0: com.sleepycat.persist.impl.Catalog;

        fieldInfos := @parameter1: java.util.List;

        isRequiredKeyField := @parameter2: boolean;

        index#2 = 0;

        $i0 = interfaceinvoke fieldInfos.<java.util.List: int size()>();

        fields = newarray (com.sleepycat.persist.impl.ReflectionAccessor$FieldAccess)[$i0];

        l6 = interfaceinvoke fieldInfos.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r0 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>();

        info = (com.sleepycat.persist.impl.FieldInfo) $r0;

        $r1 = specialinvoke this.<com.sleepycat.persist.impl.ReflectionAccessor: com.sleepycat.persist.impl.ReflectionAccessor$FieldAccess getField(com.sleepycat.persist.impl.Catalog,com.sleepycat.persist.impl.FieldInfo,boolean)>(catalog, info, isRequiredKeyField);

        fields[index#2] = $r1;

        index#2 = index#2 + 1;

        goto label1;

     label2:
        return fields;
    }

    private com.sleepycat.persist.impl.ReflectionAccessor$FieldAccess getField(com.sleepycat.persist.impl.Catalog, com.sleepycat.persist.impl.FieldInfo, boolean)
    {
        com.sleepycat.persist.impl.ReflectionAccessor this;
        com.sleepycat.persist.impl.Catalog catalog;
        com.sleepycat.persist.impl.FieldInfo fieldInfo;
        boolean isRequiredKeyField, $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.reflect.Field field;
        java.lang.NoSuchFieldException e, $r2;
        java.lang.Class fieldCls, $r0, $r4;
        com.sleepycat.persist.impl.Format format, $r9;
        java.lang.String $r1, $r5, $r8, $r11;
        java.lang.RuntimeException $r3;
        int $i0, $i1;
        java.lang.AssertionError $r6, $r12;
        com.sleepycat.persist.impl.ReflectionAccessor$PrimitiveAccess $r7;
        com.sleepycat.persist.impl.SimpleFormat $r10;
        com.sleepycat.persist.impl.ReflectionAccessor$KeyObjectAccess $r13;
        com.sleepycat.persist.impl.ReflectionAccessor$StringAccess $r14;
        com.sleepycat.persist.impl.ReflectionAccessor$ObjectAccess $r15;

        this := @this: com.sleepycat.persist.impl.ReflectionAccessor;

        catalog := @parameter0: com.sleepycat.persist.impl.Catalog;

        fieldInfo := @parameter1: com.sleepycat.persist.impl.FieldInfo;

        isRequiredKeyField := @parameter2: boolean;

     label01:
        $r0 = this.<com.sleepycat.persist.impl.ReflectionAccessor: java.lang.Class type>;

        $r1 = virtualinvoke fieldInfo.<com.sleepycat.persist.impl.FieldInfo: java.lang.String getName()>();

        field = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>($r1);

     label02:
        goto label04;

     label03:
        $r2 := @caughtexception;

        e = $r2;

        $r3 = staticinvoke <com.sleepycat.compat.DbCompat: java.lang.RuntimeException unexpectedException(java.lang.Exception)>(e);

        throw $r3;

     label04:
        $r4 = this.<com.sleepycat.persist.impl.ReflectionAccessor: java.lang.Class type>;

        $i0 = virtualinvoke $r4.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z0 == 0 goto label05;

        $i1 = virtualinvoke field.<java.lang.reflect.Field: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i1);

        if $z1 != 0 goto label06;

     label05:
        $r5 = virtualinvoke field.<java.lang.reflect.Field: java.lang.String getName()>();

        specialinvoke this.<com.sleepycat.persist.impl.ReflectionAccessor: void setAccessible(java.lang.reflect.AccessibleObject,java.lang.String)>(field, $r5);

     label06:
        fieldCls = virtualinvoke field.<java.lang.reflect.Field: java.lang.Class getType()>();

        $z2 = virtualinvoke fieldCls.<java.lang.Class: boolean isPrimitive()>();

        if $z2 == 0 goto label08;

        $z3 = <com.sleepycat.persist.impl.ReflectionAccessor: boolean $assertionsDisabled>;

        if $z3 != 0 goto label07;

        $z4 = staticinvoke <com.sleepycat.persist.impl.SimpleCatalog: boolean isSimpleType(java.lang.Class)>(fieldCls);

        if $z4 != 0 goto label07;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label07:
        $r7 = new com.sleepycat.persist.impl.ReflectionAccessor$PrimitiveAccess;

        $r8 = virtualinvoke fieldCls.<java.lang.Class: java.lang.String getName()>();

        $r9 = interfaceinvoke catalog.<com.sleepycat.persist.impl.Catalog: com.sleepycat.persist.impl.Format getFormat(java.lang.String)>($r8);

        $r10 = (com.sleepycat.persist.impl.SimpleFormat) $r9;

        specialinvoke $r7.<com.sleepycat.persist.impl.ReflectionAccessor$PrimitiveAccess: void <init>(java.lang.reflect.Field,com.sleepycat.persist.impl.SimpleFormat)>(field, $r10);

        return $r7;

     label08:
        if isRequiredKeyField == 0 goto label10;

        $r11 = virtualinvoke fieldInfo.<com.sleepycat.persist.impl.FieldInfo: java.lang.String getClassName()>();

        format = interfaceinvoke catalog.<com.sleepycat.persist.impl.Catalog: com.sleepycat.persist.impl.Format getFormat(java.lang.String)>($r11);

        $z5 = <com.sleepycat.persist.impl.ReflectionAccessor: boolean $assertionsDisabled>;

        if $z5 != 0 goto label09;

        if format != null goto label09;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label09:
        $r13 = new com.sleepycat.persist.impl.ReflectionAccessor$KeyObjectAccess;

        specialinvoke $r13.<com.sleepycat.persist.impl.ReflectionAccessor$KeyObjectAccess: void <init>(java.lang.reflect.Field,com.sleepycat.persist.impl.Format)>(field, format);

        return $r13;

     label10:
        if fieldCls != class "java/lang/String" goto label11;

        $r14 = new com.sleepycat.persist.impl.ReflectionAccessor$StringAccess;

        specialinvoke $r14.<com.sleepycat.persist.impl.ReflectionAccessor$StringAccess: void <init>(java.lang.reflect.Field)>(field);

        return $r14;

     label11:
        $r15 = new com.sleepycat.persist.impl.ReflectionAccessor$ObjectAccess;

        specialinvoke $r15.<com.sleepycat.persist.impl.ReflectionAccessor$ObjectAccess: void <init>(java.lang.reflect.Field)>(field);

        return $r15;

        catch java.lang.NoSuchFieldException from label01 to label02 with label03;
    }

    private void setAccessible(java.lang.reflect.AccessibleObject, java.lang.String)
    {
        com.sleepycat.persist.impl.ReflectionAccessor this;
        java.lang.reflect.AccessibleObject object;
        java.lang.String memberName, $r5, $r10;
        java.lang.SecurityException e, $r0;
        java.lang.IllegalStateException $r1;
        java.lang.StringBuilder $r2, $r3, $r6, $r7, $r8, $r9;
        java.lang.Class $r4;

        this := @this: com.sleepycat.persist.impl.ReflectionAccessor;

        object := @parameter0: java.lang.reflect.AccessibleObject;

        memberName := @parameter1: java.lang.String;

     label1:
        virtualinvoke object.<java.lang.reflect.AccessibleObject: void setAccessible(boolean)>(1);

     label2:
        goto label4;

     label3:
        $r0 := @caughtexception;

        e = $r0;

        $r1 = new java.lang.IllegalStateException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to access non-public member: ");

        $r4 = this.<com.sleepycat.persist.impl.ReflectionAccessor: java.lang.Class type>;

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(memberName);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Please configure the Java Security Manager setting:  ReflectPermission suppressAccessChecks");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r10, e);

        throw $r1;

     label4:
        return;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    public void readCompositeKeyFields(java.lang.Object, com.sleepycat.persist.impl.EntityInput) throws com.sleepycat.persist.impl.RefreshException
    {
        com.sleepycat.persist.impl.ReflectionAccessor this;
        java.lang.Object o;
        com.sleepycat.persist.impl.EntityInput input;
        java.lang.IllegalAccessException e, $r3;
        int i#2, $i0;
        com.sleepycat.persist.impl.ReflectionAccessor$FieldAccess[] $r0, $r1;
        com.sleepycat.persist.impl.ReflectionAccessor$FieldAccess $r2;
        java.lang.RuntimeException $r4;

        this := @this: com.sleepycat.persist.impl.ReflectionAccessor;

        o := @parameter0: java.lang.Object;

        input := @parameter1: com.sleepycat.persist.impl.EntityInput;

     label1:
        i#2 = 0;

     label2:
        $r0 = this.<com.sleepycat.persist.impl.ReflectionAccessor: com.sleepycat.persist.impl.ReflectionAccessor$FieldAccess[] nonKeys>;

        $i0 = lengthof $r0;

        if i#2 >= $i0 goto label3;

        $r1 = this.<com.sleepycat.persist.impl.ReflectionAccessor: com.sleepycat.persist.impl.ReflectionAccessor$FieldAccess[] nonKeys>;

        $r2 = $r1[i#2];

        virtualinvoke $r2.<com.sleepycat.persist.impl.ReflectionAccessor$FieldAccess: void read(java.lang.Object,com.sleepycat.persist.impl.EntityInput)>(o, input);

        i#2 = i#2 + 1;

        goto label2;

     label3:
        goto label5;

     label4:
        $r3 := @caughtexception;

        e = $r3;

        $r4 = staticinvoke <com.sleepycat.compat.DbCompat: java.lang.RuntimeException unexpectedException(java.lang.Exception)>(e);

        throw $r4;

     label5:
        return;

        catch java.lang.IllegalAccessException from label1 to label3 with label4;
    }

    public java.lang.Object newInstance()
    {
        com.sleepycat.persist.impl.ReflectionAccessor this;
        java.lang.reflect.Constructor $r0;
        java.lang.Object[] $r1;
        java.lang.Object $r2;
        java.lang.IllegalAccessException $r3, e#7;
        java.lang.RuntimeException $r4, $r6, $r8;
        java.lang.InstantiationException $r5, e#11;
        java.lang.reflect.InvocationTargetException $r7, e#15;

        this := @this: com.sleepycat.persist.impl.ReflectionAccessor;

     label1:
        $r0 = this.<com.sleepycat.persist.impl.ReflectionAccessor: java.lang.reflect.Constructor constructor>;

        $r1 = newarray (java.lang.Object)[0];

        $r2 = virtualinvoke $r0.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        e#7 = $r3;

        $r4 = staticinvoke <com.sleepycat.compat.DbCompat: java.lang.RuntimeException unexpectedException(java.lang.Exception)>(e#7);

        throw $r4;

     label4:
        $r5 := @caughtexception;

        e#11 = $r5;

        $r6 = staticinvoke <com.sleepycat.compat.DbCompat: java.lang.RuntimeException unexpectedException(java.lang.Exception)>(e#11);

        throw $r6;

     label5:
        $r7 := @caughtexception;

        e#15 = $r7;

        $r8 = staticinvoke <com.sleepycat.compat.DbCompat: java.lang.RuntimeException unexpectedException(java.lang.Exception)>(e#15);

        throw $r8;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.InstantiationException from label1 to label2 with label4;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label5;
    }


