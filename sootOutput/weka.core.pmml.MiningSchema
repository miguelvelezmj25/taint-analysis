    public void <init>(org.w3c.dom.Element, weka.core.Instances, weka.core.pmml.TransformationDictionary) throws java.lang.Exception
    {
        weka.core.pmml.MiningSchema this;
        org.w3c.dom.Element model, miningFieldEl, $r43;
        weka.core.Instances dataDictionary, $r19, $r22, $r32, $r35, $r38, $r39, $r40, $r44, $r45, $r48;
        weka.core.pmml.TransformationDictionary transDict, $r23, $r33, $r34;
        java.util.ArrayList attInfo, transDerived, newStructure, targetVals, $r0, $r1, $r2, $r11, $r20, $r24, $r25, $r26, $r29, $r36;
        org.w3c.dom.NodeList fieldList, targetsList;
        org.w3c.dom.Node miningField, te;
        weka.core.pmml.MiningFieldMetaInfo mfi, m, m, $r3;
        weka.core.Attribute miningAtt, classAtt, $r28, $r31, $r46;
        java.util.Iterator l8, l9#109, l9#122, l9#148;
        int classIndex#18, addedCount#20, i#22, $i0, $i2, $i3, $i5, $i6, i#204, $i7;
        short $s1, $s4;
        weka.core.pmml.MiningFieldMetaInfo$Usage $r4, $r5, $r6, $r7, $r9, $r10;
        java.lang.String $r8, $r15, $r18, $r50;
        java.lang.Exception $r12, $r41;
        java.lang.StringBuilder $r13, $r14, $r16, $r17;
        boolean $z2, $z4, $z6, $z8, $z9;
        java.lang.Object $r21, $r27, $r30, $r37, $r49;
        weka.core.pmml.DerivedFieldMetaInfo d#128, d#154;
        weka.core.pmml.TargetMetaInfo $r42, $r47;

        this := @this: weka.core.pmml.MiningSchema;

        model := @parameter0: org.w3c.dom.Element;

        dataDictionary := @parameter1: weka.core.Instances;

        transDict := @parameter2: weka.core.pmml.TransformationDictionary;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        this.<weka.core.pmml.MiningSchema: java.util.ArrayList m_miningMeta> = $r0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        this.<weka.core.pmml.MiningSchema: java.util.ArrayList m_derivedMeta> = $r1;

        this.<weka.core.pmml.MiningSchema: weka.core.pmml.TransformationDictionary m_transformationDictionary> = null;

        this.<weka.core.pmml.MiningSchema: weka.core.pmml.TargetMetaInfo m_targetMetaInfo> = null;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        attInfo = $r2;

        fieldList = interfaceinvoke model.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("MiningField");

        classIndex#18 = -1;

        addedCount#20 = 0;

        i#22 = 0;

     label01:
        $i0 = interfaceinvoke fieldList.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#22);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#22 >= $i0 goto label06;

        miningField = interfaceinvoke fieldList.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i#22);

        $s1 = interfaceinvoke miningField.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s1);

        if $s1 != 1 goto label05;

        miningFieldEl = (org.w3c.dom.Element) miningField;

        $r3 = new weka.core.pmml.MiningFieldMetaInfo;

        specialinvoke $r3.<weka.core.pmml.MiningFieldMetaInfo: void <init>(org.w3c.dom.Element)>(miningFieldEl);

        mfi = $r3;

        $r4 = virtualinvoke mfi.<weka.core.pmml.MiningFieldMetaInfo: weka.core.pmml.MiningFieldMetaInfo$Usage getUsageType()>();

        $r5 = <weka.core.pmml.MiningFieldMetaInfo$Usage: weka.core.pmml.MiningFieldMetaInfo$Usage ACTIVE>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r5);

        if $r4 == $r5 goto label02;

        $r6 = virtualinvoke mfi.<weka.core.pmml.MiningFieldMetaInfo: weka.core.pmml.MiningFieldMetaInfo$Usage getUsageType()>();

        $r7 = <weka.core.pmml.MiningFieldMetaInfo$Usage: weka.core.pmml.MiningFieldMetaInfo$Usage PREDICTED>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r7);

        if $r6 != $r7 goto label05;

     label02:
        $r8 = virtualinvoke mfi.<weka.core.pmml.MiningFieldMetaInfo: java.lang.String getName()>();

        miningAtt = virtualinvoke dataDictionary.<weka.core.Instances: weka.core.Attribute attribute(java.lang.String)>($r8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(miningAtt);

        if miningAtt == null goto label04;

        virtualinvoke mfi.<weka.core.pmml.MiningFieldMetaInfo: void setIndex(int)>(addedCount#20);

        virtualinvoke attInfo.<java.util.ArrayList: boolean add(java.lang.Object)>(miningAtt);

        addedCount#20 = addedCount#20 + 1;

        $r9 = virtualinvoke mfi.<weka.core.pmml.MiningFieldMetaInfo: weka.core.pmml.MiningFieldMetaInfo$Usage getUsageType()>();

        $r10 = <weka.core.pmml.MiningFieldMetaInfo$Usage: weka.core.pmml.MiningFieldMetaInfo$Usage PREDICTED>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r10);

        if $r9 != $r10 goto label03;

        classIndex#18 = addedCount#20 - 1;

     label03:
        $r11 = this.<weka.core.pmml.MiningSchema: java.util.ArrayList m_miningMeta>;

        virtualinvoke $r11.<java.util.ArrayList: boolean add(java.lang.Object)>(mfi);

        goto label05;

     label04:
        $r12 = new java.lang.Exception;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t find mining field: ");

        $r15 = virtualinvoke mfi.<weka.core.pmml.MiningFieldMetaInfo: java.lang.String getName()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in the data dictionary.");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.Exception: void <init>(java.lang.String)>($r18);

        throw $r12;

     label05:
        i#22 = i#22 + 1;

        goto label01;

     label06:
        $r19 = new weka.core.Instances;

        specialinvoke $r19.<weka.core.Instances: void <init>(java.lang.String,java.util.ArrayList,int)>("miningSchema", attInfo, 0);

        this.<weka.core.pmml.MiningSchema: weka.core.Instances m_miningSchemaInstancesStructure> = $r19;

        $r20 = this.<weka.core.pmml.MiningSchema: java.util.ArrayList m_miningMeta>;

        l8 = virtualinvoke $r20.<java.util.ArrayList: java.util.Iterator iterator()>();

     label07:
        $z2 = interfaceinvoke l8.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label08;

        $r21 = interfaceinvoke l8.<java.util.Iterator: java.lang.Object next()>();

        m = (weka.core.pmml.MiningFieldMetaInfo) $r21;

        $r22 = this.<weka.core.pmml.MiningSchema: weka.core.Instances m_miningSchemaInstancesStructure>;

        virtualinvoke m.<weka.core.pmml.MiningFieldMetaInfo: void setMiningSchemaInstances(weka.core.Instances)>($r22);

        goto label07;

     label08:
        this.<weka.core.pmml.MiningSchema: weka.core.pmml.TransformationDictionary m_transformationDictionary> = transDict;

        $r23 = this.<weka.core.pmml.MiningSchema: weka.core.pmml.TransformationDictionary m_transformationDictionary>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r23);

        if $r23 == null goto label09;

        transDerived = virtualinvoke transDict.<weka.core.pmml.TransformationDictionary: java.util.ArrayList getDerivedFields()>();

        $r24 = this.<weka.core.pmml.MiningSchema: java.util.ArrayList m_derivedMeta>;

        virtualinvoke $r24.<java.util.ArrayList: boolean addAll(java.util.Collection)>(transDerived);

     label09:
        specialinvoke this.<weka.core.pmml.MiningSchema: void getLocalTransformations(org.w3c.dom.Element)>(model);

        $r25 = new java.util.ArrayList;

        specialinvoke $r25.<java.util.ArrayList: void <init>()>();

        newStructure = $r25;

        $r26 = this.<weka.core.pmml.MiningSchema: java.util.ArrayList m_miningMeta>;

        l9#109 = virtualinvoke $r26.<java.util.ArrayList: java.util.Iterator iterator()>();

     label10:
        $z4 = interfaceinvoke l9#109.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label11;

        $r27 = interfaceinvoke l9#109.<java.util.Iterator: java.lang.Object next()>();

        m = (weka.core.pmml.MiningFieldMetaInfo) $r27;

        $r28 = virtualinvoke m.<weka.core.pmml.MiningFieldMetaInfo: weka.core.Attribute getFieldAsAttribute()>();

        virtualinvoke newStructure.<java.util.ArrayList: boolean add(java.lang.Object)>($r28);

        goto label10;

     label11:
        $r29 = this.<weka.core.pmml.MiningSchema: java.util.ArrayList m_derivedMeta>;

        l9#122 = virtualinvoke $r29.<java.util.ArrayList: java.util.Iterator iterator()>();

     label12:
        $z6 = interfaceinvoke l9#122.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 == 0 goto label13;

        $r30 = interfaceinvoke l9#122.<java.util.Iterator: java.lang.Object next()>();

        d#128 = (weka.core.pmml.DerivedFieldMetaInfo) $r30;

        $r31 = virtualinvoke d#128.<weka.core.pmml.DerivedFieldMetaInfo: weka.core.Attribute getFieldAsAttribute()>();

        virtualinvoke newStructure.<java.util.ArrayList: boolean add(java.lang.Object)>($r31);

        goto label12;

     label13:
        $r32 = new weka.core.Instances;

        specialinvoke $r32.<weka.core.Instances: void <init>(java.lang.String,java.util.ArrayList,int)>("FieldStructure", newStructure, 0);

        this.<weka.core.pmml.MiningSchema: weka.core.Instances m_fieldInstancesStructure> = $r32;

        $r33 = this.<weka.core.pmml.MiningSchema: weka.core.pmml.TransformationDictionary m_transformationDictionary>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r33);

        if $r33 == null goto label14;

        $r34 = this.<weka.core.pmml.MiningSchema: weka.core.pmml.TransformationDictionary m_transformationDictionary>;

        $r35 = this.<weka.core.pmml.MiningSchema: weka.core.Instances m_fieldInstancesStructure>;

        virtualinvoke $r34.<weka.core.pmml.TransformationDictionary: void setFieldDefsForDerivedFields(weka.core.Instances)>($r35);

     label14:
        $r36 = this.<weka.core.pmml.MiningSchema: java.util.ArrayList m_derivedMeta>;

        l9#148 = virtualinvoke $r36.<java.util.ArrayList: java.util.Iterator iterator()>();

     label15:
        $z8 = interfaceinvoke l9#148.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 == 0 goto label16;

        $r37 = interfaceinvoke l9#148.<java.util.Iterator: java.lang.Object next()>();

        d#154 = (weka.core.pmml.DerivedFieldMetaInfo) $r37;

        $r38 = this.<weka.core.pmml.MiningSchema: weka.core.Instances m_fieldInstancesStructure>;

        virtualinvoke d#154.<weka.core.pmml.DerivedFieldMetaInfo: void setFieldDefs(weka.core.Instances)>($r38);

        goto label15;

     label16:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classIndex#18);

        if classIndex#18 == -1 goto label17;

        $r39 = this.<weka.core.pmml.MiningSchema: weka.core.Instances m_fieldInstancesStructure>;

        virtualinvoke $r39.<weka.core.Instances: void setClassIndex(int)>(classIndex#18);

        $r40 = this.<weka.core.pmml.MiningSchema: weka.core.Instances m_miningSchemaInstancesStructure>;

        virtualinvoke $r40.<weka.core.Instances: void setClassIndex(int)>(classIndex#18);

     label17:
        targetsList = interfaceinvoke model.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("Targets");

        $i2 = interfaceinvoke targetsList.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 <= 0 goto label20;

        $i3 = interfaceinvoke targetsList.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 <= 1 goto label18;

        $r41 = new java.lang.Exception;

        specialinvoke $r41.<java.lang.Exception: void <init>(java.lang.String)>("[MiningSchema] Can only handle a single Target");

        throw $r41;

     label18:
        te = interfaceinvoke targetsList.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        $s4 = interfaceinvoke te.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s4);

        if $s4 != 1 goto label20;

        $r42 = new weka.core.pmml.TargetMetaInfo;

        $r43 = (org.w3c.dom.Element) te;

        specialinvoke $r42.<weka.core.pmml.TargetMetaInfo: void <init>(org.w3c.dom.Element)>($r43);

        this.<weka.core.pmml.MiningSchema: weka.core.pmml.TargetMetaInfo m_targetMetaInfo> = $r42;

        $r44 = this.<weka.core.pmml.MiningSchema: weka.core.Instances m_fieldInstancesStructure>;

        $i5 = virtualinvoke $r44.<weka.core.Instances: int classIndex()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i5 < 0 goto label20;

        $r45 = this.<weka.core.pmml.MiningSchema: weka.core.Instances m_fieldInstancesStructure>;

        $r46 = virtualinvoke $r45.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z9 = virtualinvoke $r46.<weka.core.Attribute: boolean isString()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 == 0 goto label20;

        $r47 = this.<weka.core.pmml.MiningSchema: weka.core.pmml.TargetMetaInfo m_targetMetaInfo>;

        targetVals = virtualinvoke $r47.<weka.core.pmml.TargetMetaInfo: java.util.ArrayList getValues()>();

        $i6 = virtualinvoke targetVals.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if $i6 <= 0 goto label20;

        $r48 = this.<weka.core.pmml.MiningSchema: weka.core.Instances m_fieldInstancesStructure>;

        classAtt = virtualinvoke $r48.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        i#204 = 0;

     label19:
        $i7 = virtualinvoke targetVals.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#204);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if i#204 >= $i7 goto label20;

        $r49 = virtualinvoke targetVals.<java.util.ArrayList: java.lang.Object get(int)>(i#204);

        $r50 = (java.lang.String) $r49;

        virtualinvoke classAtt.<weka.core.Attribute: int addStringValue(java.lang.String)>($r50);

        i#204 = i#204 + 1;

        goto label19;

     label20:
        return;
    }

    private void getLocalTransformations(org.w3c.dom.Element) throws java.lang.Exception
    {
        weka.core.pmml.MiningSchema this;
        org.w3c.dom.Element model, localT, $r2;
        org.w3c.dom.NodeList temp, localDerivedL;
        org.w3c.dom.Node localDerived, $r0;
        weka.core.pmml.DerivedFieldMetaInfo d, $r1;
        int $i0, i#14, $i1;
        short $s2;
        weka.core.pmml.TransformationDictionary $r3;
        java.util.ArrayList $r4;

        this := @this: weka.core.pmml.MiningSchema;

        model := @parameter0: org.w3c.dom.Element;

        temp = interfaceinvoke model.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("LocalTransformations");

        $i0 = interfaceinvoke temp.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label3;

        $r0 = interfaceinvoke temp.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        localT = (org.w3c.dom.Element) $r0;

        localDerivedL = interfaceinvoke localT.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("DerivedField");

        i#14 = 0;

     label1:
        $i1 = interfaceinvoke localDerivedL.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#14);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#14 >= $i1 goto label3;

        localDerived = interfaceinvoke localDerivedL.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i#14);

        $s2 = interfaceinvoke localDerived.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s2);

        if $s2 != 1 goto label2;

        $r1 = new weka.core.pmml.DerivedFieldMetaInfo;

        $r2 = (org.w3c.dom.Element) localDerived;

        $r3 = this.<weka.core.pmml.MiningSchema: weka.core.pmml.TransformationDictionary m_transformationDictionary>;

        specialinvoke $r1.<weka.core.pmml.DerivedFieldMetaInfo: void <init>(org.w3c.dom.Element,java.util.ArrayList,weka.core.pmml.TransformationDictionary)>($r2, null, $r3);

        d = $r1;

        $r4 = this.<weka.core.pmml.MiningSchema: java.util.ArrayList m_derivedMeta>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(d);

     label2:
        i#14 = i#14 + 1;

        goto label1;

     label3:
        return;
    }

    public weka.core.Instances getFieldsAsInstances()
    {
        weka.core.pmml.MiningSchema this;
        weka.core.Instances $r0;

        this := @this: weka.core.pmml.MiningSchema;

        $r0 = this.<weka.core.pmml.MiningSchema: weka.core.Instances m_fieldInstancesStructure>;

        return $r0;
    }

    public weka.core.Instances getMiningSchemaAsInstances()
    {
        weka.core.pmml.MiningSchema this;
        weka.core.Instances $r0;

        this := @this: weka.core.pmml.MiningSchema;

        $r0 = this.<weka.core.pmml.MiningSchema: weka.core.Instances m_miningSchemaInstancesStructure>;

        return $r0;
    }

    public weka.core.pmml.TargetMetaInfo getTargetMetaData()
    {
        weka.core.pmml.MiningSchema this;
        weka.core.pmml.TargetMetaInfo $r0;

        this := @this: weka.core.pmml.MiningSchema;

        $r0 = this.<weka.core.pmml.MiningSchema: weka.core.pmml.TargetMetaInfo m_targetMetaInfo>;

        return $r0;
    }

    public boolean hasTargetMetaData()
    {
        weka.core.pmml.MiningSchema this;
        weka.core.pmml.TargetMetaInfo $r0;
        boolean $z0;

        this := @this: weka.core.pmml.MiningSchema;

        $r0 = this.<weka.core.pmml.MiningSchema: weka.core.pmml.TargetMetaInfo m_targetMetaInfo>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String toString()
    {
        weka.core.pmml.MiningSchema this;
        java.lang.StringBuffer temp, $r0;
        weka.core.pmml.MiningFieldMetaInfo m;
        weka.core.pmml.DerivedFieldMetaInfo d;
        weka.core.pmml.TransformationDictionary $r1, $r2;
        java.util.ArrayList $r5, $r12, $r14;
        java.util.Iterator l2#15, l2#39;
        boolean $z0, $z1;
        java.lang.Object $r6, $r15;
        java.lang.StringBuilder $r7, $r8, $r9, $r16, $r17, $r18;
        java.lang.String $r10, $r19, $r22;
        int $i0;

        this := @this: weka.core.pmml.MiningSchema;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        temp = $r0;

        $r1 = this.<weka.core.pmml.MiningSchema: weka.core.pmml.TransformationDictionary m_transformationDictionary>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 == null goto label1;

        $r2 = this.<weka.core.pmml.MiningSchema: weka.core.pmml.TransformationDictionary m_transformationDictionary>;

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r2);

     label1:
        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Mining schema:\n\n");

        $r5 = this.<weka.core.pmml.MiningSchema: java.util.ArrayList m_miningMeta>;

        l2#15 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke l2#15.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke l2#15.<java.util.Iterator: java.lang.Object next()>();

        m = (weka.core.pmml.MiningFieldMetaInfo) $r6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(m);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        goto label2;

     label3:
        $r12 = this.<weka.core.pmml.MiningSchema: java.util.ArrayList m_derivedMeta>;

        $i0 = virtualinvoke $r12.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label5;

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\nDerived fields:\n\n");

        $r14 = this.<weka.core.pmml.MiningSchema: java.util.ArrayList m_derivedMeta>;

        l2#39 = virtualinvoke $r14.<java.util.ArrayList: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke l2#39.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label5;

        $r15 = interfaceinvoke l2#39.<java.util.Iterator: java.lang.Object next()>();

        d = (weka.core.pmml.DerivedFieldMetaInfo) $r15;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(d);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

        goto label4;

     label5:
        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r22 = virtualinvoke temp.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r22;
    }

    public void applyMissingAndOutlierTreatments(double[]) throws java.lang.Exception
    {
        weka.core.pmml.MiningSchema this;
        double[] values;
        weka.core.pmml.MiningFieldMetaInfo mfi;
        int i#2, $i0;
        java.util.ArrayList $r0, $r1;
        java.lang.Object $r2;
        double $d0, $d1, $d2, $d3;

        this := @this: weka.core.pmml.MiningSchema;

        values := @parameter0: double[];

        i#2 = 0;

     label1:
        $r0 = this.<weka.core.pmml.MiningSchema: java.util.ArrayList m_miningMeta>;

        $i0 = virtualinvoke $r0.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#2 >= $i0 goto label2;

        $r1 = this.<weka.core.pmml.MiningSchema: java.util.ArrayList m_miningMeta>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>(i#2);

        mfi = (weka.core.pmml.MiningFieldMetaInfo) $r2;

        $d0 = values[i#2];

        $d1 = virtualinvoke mfi.<weka.core.pmml.MiningFieldMetaInfo: double applyMissingValueTreatment(double)>($d0);

        values[i#2] = $d1;

        $d2 = values[i#2];

        $d3 = virtualinvoke mfi.<weka.core.pmml.MiningFieldMetaInfo: double applyOutlierTreatment(double)>($d2);

        values[i#2] = $d3;

        i#2 = i#2 + 1;

        goto label1;

     label2:
        return;
    }

    public java.util.ArrayList getDerivedFields()
    {
        weka.core.pmml.MiningSchema this;
        java.util.ArrayList $r0;

        this := @this: weka.core.pmml.MiningSchema;

        $r0 = this.<weka.core.pmml.MiningSchema: java.util.ArrayList m_derivedMeta>;

        return $r0;
    }

    public void convertNumericAttToNominal(int, java.util.ArrayList)
    {
        weka.core.pmml.MiningSchema this;
        int index, i#13, $i0, i#25, $i1, $i2, $i3;
        java.util.ArrayList newVals, newValues, attInfo, $r2, $r4;
        weka.core.Instances miningSchemaI, newI, $r7, $r8, $r9;
        weka.core.Attribute tempA, newAtt, $r0, $r5;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;
        java.lang.Object $r3;
        java.lang.String $r6;

        this := @this: weka.core.pmml.MiningSchema;

        index := @parameter0: int;

        newVals := @parameter1: java.util.ArrayList;

        miningSchemaI = virtualinvoke this.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r0 = virtualinvoke miningSchemaI.<weka.core.Instances: weka.core.Attribute attribute(int)>(index);

        $z0 = virtualinvoke $r0.<weka.core.Attribute: boolean isNominal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("[MiningSchema] convertNumericAttToNominal: attribute is already nominal!");

        throw $r1;

     label1:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        newValues = $r2;

        i#13 = 0;

     label2:
        $i0 = virtualinvoke newVals.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#13);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#13 >= $i0 goto label3;

        $r3 = virtualinvoke newVals.<java.util.ArrayList: java.lang.Object get(int)>(i#13);

        virtualinvoke newValues.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        i#13 = i#13 + 1;

        goto label2;

     label3:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        attInfo = $r4;

        i#25 = 0;

     label4:
        $i1 = virtualinvoke miningSchemaI.<weka.core.Instances: int numAttributes()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#25);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#25 >= $i1 goto label7;

        tempA = virtualinvoke miningSchemaI.<weka.core.Instances: weka.core.Attribute attribute(int)>(i#25);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#25);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(index);

        if i#25 != index goto label5;

        $r5 = new weka.core.Attribute;

        $r6 = virtualinvoke tempA.<weka.core.Attribute: java.lang.String name()>();

        specialinvoke $r5.<weka.core.Attribute: void <init>(java.lang.String,java.util.List)>($r6, newValues);

        newAtt = $r5;

        virtualinvoke attInfo.<java.util.ArrayList: boolean add(java.lang.Object)>(newAtt);

        goto label6;

     label5:
        virtualinvoke attInfo.<java.util.ArrayList: boolean add(java.lang.Object)>(tempA);

     label6:
        i#25 = i#25 + 1;

        goto label4;

     label7:
        $r7 = new weka.core.Instances;

        specialinvoke $r7.<weka.core.Instances: void <init>(java.lang.String,java.util.ArrayList,int)>("miningSchema", attInfo, 0);

        newI = $r7;

        $r8 = this.<weka.core.pmml.MiningSchema: weka.core.Instances m_fieldInstancesStructure>;

        $i2 = virtualinvoke $r8.<weka.core.Instances: int classIndex()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 < 0 goto label8;

        $r9 = this.<weka.core.pmml.MiningSchema: weka.core.Instances m_fieldInstancesStructure>;

        $i3 = virtualinvoke $r9.<weka.core.Instances: int classIndex()>();

        virtualinvoke newI.<weka.core.Instances: void setClassIndex(int)>($i3);

     label8:
        this.<weka.core.pmml.MiningSchema: weka.core.Instances m_fieldInstancesStructure> = newI;

        return;
    }

    public weka.core.pmml.TransformationDictionary getTransformationDictionary()
    {
        weka.core.pmml.MiningSchema this;
        weka.core.pmml.TransformationDictionary $r0;

        this := @this: weka.core.pmml.MiningSchema;

        $r0 = this.<weka.core.pmml.MiningSchema: weka.core.pmml.TransformationDictionary m_transformationDictionary>;

        return $r0;
    }


