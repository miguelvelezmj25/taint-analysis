    public static void log(weka.core.logging.Logger$Level, java.lang.String)
    {
        weka.core.logging.Logger$Level level, $r1, $r2, $r3;
        java.lang.String msg, $r4, $r5, $r6;
        weka.core.logging.Logger logger, l5;
        java.lang.String[] location;
        java.lang.Throwable l6, $r7;
        boolean log#6;
        int $i0, $i1, $i2;

        level := @parameter0: weka.core.logging.Logger$Level;

        msg := @parameter1: java.lang.String;

        logger = staticinvoke <weka.core.logging.Logger: weka.core.logging.Logger getSingleton()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(logger);

        if logger != null goto label01;

        return;

     label01:
        l5 = logger;

        entermonitor logger;

     label02:
        log#6 = 0;

        $r1 = virtualinvoke logger.<weka.core.logging.Logger: weka.core.logging.Logger$Level getMinLevel()>();

        $r2 = <weka.core.logging.Logger$Level: weka.core.logging.Logger$Level ALL>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        if $r1 != $r2 goto label03;

        log#6 = 1;

        goto label04;

     label03:
        $i0 = virtualinvoke level.<weka.core.logging.Logger$Level: int getOrder()>();

        $r3 = virtualinvoke logger.<weka.core.logging.Logger: weka.core.logging.Logger$Level getMinLevel()>();

        $i1 = virtualinvoke $r3.<weka.core.logging.Logger$Level: int getOrder()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i0 < $i1 goto label04;

        log#6 = 1;

     label04:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(log#6);

        if log#6 != 0 goto label06;

        exitmonitor l5;

     label05:
        return;

     label06:
        location = staticinvoke <weka.core.logging.Logger: java.lang.String[] getLocation()>();

        $r4 = location[0];

        $r5 = location[1];

        $r6 = location[2];

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

        virtualinvoke logger.<weka.core.logging.Logger: void doLog(weka.core.logging.Logger$Level,java.lang.String,java.lang.String,java.lang.String,int)>(level, msg, $r4, $r5, $i2);

        exitmonitor l5;

     label07:
        goto label11;

     label08:
        $r7 := @caughtexception;

     label09:
        l6 = $r7;

        exitmonitor l5;

     label10:
        throw l6;

     label11:
        return;

        catch java.lang.Throwable from label02 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    static void <clinit>()
    {
        java.lang.Exception e, $r1;
        java.util.Properties $r0, $r7;
        java.io.PrintStream $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

     label1:
        $r0 = staticinvoke <weka.core.Utils: java.util.Properties readProperties(java.lang.String)>("weka/core/logging/Logging.props");

        <weka.core.logging.Logger: java.util.Properties m_Properties> = $r0;

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        e = $r1;

        $r2 = <java.lang.System: java.io.PrintStream err>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error reading the logging properties \'weka/core/logging/Logging.props\': ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(e);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6);

        $r7 = new java.util.Properties;

        specialinvoke $r7.<java.util.Properties: void <init>()>();

        <weka.core.logging.Logger: java.util.Properties m_Properties> = $r7;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected static java.lang.String[] getLocation()
    {
        java.lang.String[] result;
        java.lang.Throwable t, $r0;
        java.lang.StackTraceElement[] trace;
        int i#10, $i0, $i1;
        java.lang.StackTraceElement $r2, $r6, $r10, $r12, $r16;
        java.lang.String $r3, $r5, $r7, $r9, $r11, $r13, $r18;
        java.lang.Class $r4, $r8;
        boolean $z0, $z1;
        java.lang.StringBuilder $r14, $r15, $r17;

        result = newarray (java.lang.String)[3];

        $r0 = new java.lang.Throwable;

        specialinvoke $r0.<java.lang.Throwable: void <init>()>();

        t = $r0;

        virtualinvoke t.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>();

        trace = virtualinvoke t.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        i#10 = 0;

     label1:
        $i0 = lengthof trace;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#10);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#10 >= $i0 goto label5;

        $r2 = trace[i#10];

        $r3 = virtualinvoke $r2.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $r4 = class "weka/core/logging/Logger";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        goto label4;

     label2:
        $r6 = trace[i#10];

        $r7 = virtualinvoke $r6.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $r8 = class "weka/gui/LogPanel";

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label3;

        goto label4;

     label3:
        $r10 = trace[i#10];

        $r11 = virtualinvoke $r10.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        result[0] = $r11;

        $r12 = trace[i#10];

        $r13 = virtualinvoke $r12.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        result[1] = $r13;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r16 = trace[i#10];

        $i1 = virtualinvoke $r16.<java.lang.StackTraceElement: int getLineNumber()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        result[2] = $r18;

        goto label5;

     label4:
        i#10 = i#10 + 1;

        goto label1;

     label5:
        return result;
    }

    public static weka.core.logging.Logger getSingleton()
    {
        java.lang.String classname, $r3, $r10;
        java.lang.Exception e, $r7;
        weka.core.logging.Logger $r0, $r6, $r11;
        java.util.Properties $r1, $r9;
        java.lang.Class $r2, $r4;
        java.lang.Object $r5;
        java.text.SimpleDateFormat $r8;

        $r0 = <weka.core.logging.Logger: weka.core.logging.Logger m_Singleton>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label5;

        $r1 = <weka.core.logging.Logger: java.util.Properties m_Properties>;

        $r2 = class "weka/core/logging/ConsoleLogger";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        classname = virtualinvoke $r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("weka.core.logging.Logger", $r3);

     label1:
        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(classname);

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.Object newInstance()>();

        $r6 = (weka.core.logging.Logger) $r5;

        <weka.core.logging.Logger: weka.core.logging.Logger m_Singleton> = $r6;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        e = $r7;

        virtualinvoke e.<java.lang.Exception: void printStackTrace()>();

     label4:
        $r8 = new java.text.SimpleDateFormat;

        $r9 = <weka.core.logging.Logger: java.util.Properties m_Properties>;

        $r10 = virtualinvoke $r9.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("weka.core.logging.DateFormat", "yyyy-MM-dd HH:mm:ss");

        specialinvoke $r8.<java.text.SimpleDateFormat: void <init>(java.lang.String)>($r10);

        <weka.core.logging.Logger: java.text.SimpleDateFormat m_DateFormat> = $r8;

     label5:
        $r11 = <weka.core.logging.Logger: weka.core.logging.Logger m_Singleton>;

        return $r11;

        catch java.lang.Exception from label1 to label2 with label3;
    }


