    public static int getDistSlot(int)
    {
        int dist, n#6, i#8, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;

        dist := @parameter0: int;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dist);

        if dist > 4 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dist);

        if dist < 0 goto label1;

        return dist;

     label1:
        n#6 = dist;

        i#8 = 31;

        $i0 = n#6 & -65536;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 0 goto label2;

        n#6 = n#6 << 16;

        i#8 = 15;

     label2:
        $i1 = n#6 & -16777216;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 != 0 goto label3;

        n#6 = n#6 << 8;

        i#8 = i#8 + -8;

     label3:
        $i2 = n#6 & -268435456;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 != 0 goto label4;

        n#6 = n#6 << 4;

        i#8 = i#8 + -4;

     label4:
        $i3 = n#6 & -1073741824;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 != 0 goto label5;

        n#6 = n#6 << 2;

        i#8 = i#8 + -2;

     label5:
        $i4 = n#6 & -2147483648;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 != 0 goto label6;

        i#8 = i#8 + -1;

     label6:
        $i5 = i#8 << 1;

        $i6 = i#8 - 1;

        $i7 = dist >>> $i6;

        $i8 = $i7 & 1;

        $i9 = $i5 + $i8;

        return $i9;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "org/tukaani/xz/lzma/LZMAEncoder";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.tukaani.xz.lzma.LZMAEncoder: boolean $assertionsDisabled> = $z1;

        return;
    }

    public static org.tukaani.xz.lzma.LZMAEncoder getInstance(org.tukaani.xz.rangecoder.RangeEncoder, int, int, int, int, int, int, int, int, int)
    {
        org.tukaani.xz.rangecoder.RangeEncoder rc;
        int lc, lp, pb, mode, dictSize, extraSizeBefore, niceLen, mf, depthLimit;
        org.tukaani.xz.lzma.LZMAEncoderFast $r0;
        org.tukaani.xz.lzma.LZMAEncoderNormal $r1;
        java.lang.IllegalArgumentException $r2;

        rc := @parameter0: org.tukaani.xz.rangecoder.RangeEncoder;

        lc := @parameter1: int;

        lp := @parameter2: int;

        pb := @parameter3: int;

        mode := @parameter4: int;

        dictSize := @parameter5: int;

        extraSizeBefore := @parameter6: int;

        niceLen := @parameter7: int;

        mf := @parameter8: int;

        depthLimit := @parameter9: int;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(mode);

        lookupswitch(mode)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        $r0 = new org.tukaani.xz.lzma.LZMAEncoderFast;

        specialinvoke $r0.<org.tukaani.xz.lzma.LZMAEncoderFast: void <init>(org.tukaani.xz.rangecoder.RangeEncoder,int,int,int,int,int,int,int,int)>(rc, lc, lp, pb, dictSize, extraSizeBefore, niceLen, mf, depthLimit);

        return $r0;

     label2:
        $r1 = new org.tukaani.xz.lzma.LZMAEncoderNormal;

        specialinvoke $r1.<org.tukaani.xz.lzma.LZMAEncoderNormal: void <init>(org.tukaani.xz.rangecoder.RangeEncoder,int,int,int,int,int,int,int,int)>(rc, lc, lp, pb, dictSize, extraSizeBefore, niceLen, mf, depthLimit);

        return $r1;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;
    }

    void <init>(org.tukaani.xz.rangecoder.RangeEncoder, org.tukaani.xz.lz.LZEncoder, int, int, int, int, int)
    {
        org.tukaani.xz.lzma.LZMAEncoder this;
        org.tukaani.xz.rangecoder.RangeEncoder rc;
        org.tukaani.xz.lz.LZEncoder lz;
        int lc, lp, pb, dictSize, niceLen, $i0, $i1, $i2, $i3;
        int[][] $r0, $r5;
        int[] $r1;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder $r2;
        org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder $r3, $r4;

        this := @this: org.tukaani.xz.lzma.LZMAEncoder;

        rc := @parameter0: org.tukaani.xz.rangecoder.RangeEncoder;

        lz := @parameter1: org.tukaani.xz.lz.LZEncoder;

        lc := @parameter2: int;

        lp := @parameter3: int;

        pb := @parameter4: int;

        dictSize := @parameter5: int;

        niceLen := @parameter6: int;

        specialinvoke this.<org.tukaani.xz.lzma.LZMACoder: void <init>(int)>(pb);

        $r0 = newmultiarray (int)[4][128];

        this.<org.tukaani.xz.lzma.LZMAEncoder: int[][] fullDistPrices> = $r0;

        $r1 = newarray (int)[16];

        this.<org.tukaani.xz.lzma.LZMAEncoder: int[] alignPrices> = $r1;

        this.<org.tukaani.xz.lzma.LZMAEncoder: int back> = 0;

        this.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead> = -1;

        this.<org.tukaani.xz.lzma.LZMAEncoder: int distPriceCount> = 0;

        this.<org.tukaani.xz.lzma.LZMAEncoder: int alignPriceCount> = 0;

        this.<org.tukaani.xz.lzma.LZMAEncoder: int uncompressedSize> = 0;

        this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder rc> = rc;

        this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lz.LZEncoder lz> = lz;

        this.<org.tukaani.xz.lzma.LZMAEncoder: int niceLen> = niceLen;

        $r2 = new org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder;

        specialinvoke $r2.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: void <init>(org.tukaani.xz.lzma.LZMAEncoder,int,int)>(this, lc, lp);

        this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder literalEncoder> = $r2;

        $r3 = new org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder;

        specialinvoke $r3.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: void <init>(org.tukaani.xz.lzma.LZMAEncoder,int,int)>(this, pb, niceLen);

        this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder matchLenEncoder> = $r3;

        $r4 = new org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder;

        specialinvoke $r4.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: void <init>(org.tukaani.xz.lzma.LZMAEncoder,int,int)>(this, pb, niceLen);

        this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder repLenEncoder> = $r4;

        $i0 = dictSize - 1;

        $i1 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder: int getDistSlot(int)>($i0);

        $i2 = $i1 + 1;

        this.<org.tukaani.xz.lzma.LZMAEncoder: int distSlotPricesSize> = $i2;

        $i3 = this.<org.tukaani.xz.lzma.LZMAEncoder: int distSlotPricesSize>;

        $r5 = newmultiarray (int)[4][$i3];

        this.<org.tukaani.xz.lzma.LZMAEncoder: int[][] distSlotPrices> = $r5;

        virtualinvoke this.<org.tukaani.xz.lzma.LZMAEncoder: void reset()>();

        return;
    }

    public void reset()
    {
        org.tukaani.xz.lzma.LZMAEncoder this;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder $r0;
        org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder $r1, $r2;
        int $i0, $i1, $i2, $i3;

        this := @this: org.tukaani.xz.lzma.LZMAEncoder;

        specialinvoke this.<org.tukaani.xz.lzma.LZMACoder: void reset()>();

        $r0 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder literalEncoder>;

        virtualinvoke $r0.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: void reset()>();

        $r1 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder matchLenEncoder>;

        virtualinvoke $r1.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: void reset()>();

        $r2 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder repLenEncoder>;

        virtualinvoke $r2.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: void reset()>();

        this.<org.tukaani.xz.lzma.LZMAEncoder: int distPriceCount> = 0;

        this.<org.tukaani.xz.lzma.LZMAEncoder: int alignPriceCount> = 0;

        $i0 = this.<org.tukaani.xz.lzma.LZMAEncoder: int uncompressedSize>;

        $i1 = this.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead>;

        $i2 = $i1 + 1;

        $i3 = $i0 + $i2;

        this.<org.tukaani.xz.lzma.LZMAEncoder: int uncompressedSize> = $i3;

        this.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead> = -1;

        return;
    }

    public org.tukaani.xz.lz.LZEncoder getLZEncoder()
    {
        org.tukaani.xz.lzma.LZMAEncoder this;
        org.tukaani.xz.lz.LZEncoder $r0;

        this := @this: org.tukaani.xz.lzma.LZMAEncoder;

        $r0 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lz.LZEncoder lz>;

        return $r0;
    }

    public void resetUncompressedSize()
    {
        org.tukaani.xz.lzma.LZMAEncoder this;

        this := @this: org.tukaani.xz.lzma.LZMAEncoder;

        this.<org.tukaani.xz.lzma.LZMAEncoder: int uncompressedSize> = 0;

        return;
    }

    public int getUncompressedSize()
    {
        org.tukaani.xz.lzma.LZMAEncoder this;
        int $i0;

        this := @this: org.tukaani.xz.lzma.LZMAEncoder;

        $i0 = this.<org.tukaani.xz.lzma.LZMAEncoder: int uncompressedSize>;

        return $i0;
    }

    public boolean encodeForLZMA2()
    {
        org.tukaani.xz.lzma.LZMAEncoder this;
        java.lang.Throwable e, $r2;
        org.tukaani.xz.lz.LZEncoder $r0;
        boolean $z0, $z1, $z3;
        int $i0, $i1;
        org.tukaani.xz.rangecoder.RangeEncoder $r1;
        java.lang.Error $r3;

        this := @this: org.tukaani.xz.lzma.LZMAEncoder;

     label1:
        nop;

        $r0 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lz.LZEncoder lz>;

        $z0 = virtualinvoke $r0.<org.tukaani.xz.lz.LZEncoder: boolean isStarted()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label3;

        $z1 = specialinvoke this.<org.tukaani.xz.lzma.LZMAEncoder: boolean encodeInit()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label3;

     label2:
        return 0;

     label3:
        nop;

        $i0 = this.<org.tukaani.xz.lzma.LZMAEncoder: int uncompressedSize>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 > 2096879 goto label5;

        $r1 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder rc>;

        $i1 = virtualinvoke $r1.<org.tukaani.xz.rangecoder.RangeEncoder: int getPendingSize()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 > 65510 goto label5;

        $z3 = specialinvoke this.<org.tukaani.xz.lzma.LZMAEncoder: boolean encodeSymbol()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label3;

     label4:
        return 0;

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

        e = $r2;

        $r3 = new java.lang.Error;

        specialinvoke $r3.<java.lang.Error: void <init>()>();

        throw $r3;

     label7:
        return 1;

        catch java.io.IOException from label1 to label2 with label6;
        catch java.io.IOException from label3 to label4 with label6;
    }

    private boolean encodeInit() throws java.io.IOException
    {
        org.tukaani.xz.lzma.LZMAEncoder this;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.AssertionError $r0, $r8, $r10;
        org.tukaani.xz.lz.LZEncoder $r1;
        org.tukaani.xz.rangecoder.RangeEncoder $r2;
        short[][] $r3;
        org.tukaani.xz.lzma.State $r4;
        short[] $r5;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder $r6;

        this := @this: org.tukaani.xz.lzma.LZMAEncoder;

        $z0 = <org.tukaani.xz.lzma.LZMAEncoder: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $i0 = this.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 == -1 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $r1 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lz.LZEncoder lz>;

        $z1 = virtualinvoke $r1.<org.tukaani.xz.lz.LZEncoder: boolean hasEnoughData(int)>(0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        virtualinvoke this.<org.tukaani.xz.lzma.LZMAEncoder: void skip(int)>(1);

        $r2 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder rc>;

        $r3 = this.<org.tukaani.xz.lzma.LZMAEncoder: short[][] isMatch>;

        $r4 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.State state>;

        $i1 = virtualinvoke $r4.<org.tukaani.xz.lzma.State: int get()>();

        $r5 = $r3[$i1];

        virtualinvoke $r2.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBit(short[],int,int)>($r5, 0, 0);

        $r6 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder literalEncoder>;

        virtualinvoke $r6.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: void encodeInit()>();

        $i2 = this.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead>;

        $i3 = $i2 - 1;

        this.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead> = $i3;

        $z2 = <org.tukaani.xz.lzma.LZMAEncoder: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label3;

        $i4 = this.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 == -1 goto label3;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label3:
        $i5 = this.<org.tukaani.xz.lzma.LZMAEncoder: int uncompressedSize>;

        $i6 = $i5 + 1;

        this.<org.tukaani.xz.lzma.LZMAEncoder: int uncompressedSize> = $i6;

        $z3 = <org.tukaani.xz.lzma.LZMAEncoder: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label4;

        $i7 = this.<org.tukaani.xz.lzma.LZMAEncoder: int uncompressedSize>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if $i7 == 1 goto label4;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label4:
        return 1;
    }

    private boolean encodeSymbol() throws java.io.IOException
    {
        org.tukaani.xz.lzma.LZMAEncoder this;
        int len, posState, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29;
        org.tukaani.xz.lz.LZEncoder $r0, $r2, $r13, $r19;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.AssertionError $r1, $r3, $r15, $r20;
        org.tukaani.xz.rangecoder.RangeEncoder $r4, $r9, $r16, $r21;
        short[][] $r5, $r10;
        org.tukaani.xz.lzma.State $r6, $r11, $r18, $r23;
        short[] $r7, $r12, $r17, $r22;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder $r8;
        int[] $r14;

        this := @this: org.tukaani.xz.lzma.LZMAEncoder;

        $r0 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lz.LZEncoder lz>;

        $i0 = this.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead>;

        $i1 = $i0 + 1;

        $z0 = virtualinvoke $r0.<org.tukaani.xz.lz.LZEncoder: boolean hasEnoughData(int)>($i1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        len = virtualinvoke this.<org.tukaani.xz.lzma.LZMAEncoder: int getNextSymbol()>();

        $z1 = <org.tukaani.xz.lzma.LZMAEncoder: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

        $i2 = this.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 >= 0 goto label2;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label2:
        $r2 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lz.LZEncoder lz>;

        $i3 = virtualinvoke $r2.<org.tukaani.xz.lz.LZEncoder: int getPos()>();

        $i4 = this.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead>;

        $i5 = $i3 - $i4;

        $i6 = this.<org.tukaani.xz.lzma.LZMAEncoder: int posMask>;

        posState = $i5 & $i6;

        $i7 = this.<org.tukaani.xz.lzma.LZMAEncoder: int back>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if $i7 != -1 goto label4;

        $z2 = <org.tukaani.xz.lzma.LZMAEncoder: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len);

        if len == 1 goto label3;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label3:
        $r4 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder rc>;

        $r5 = this.<org.tukaani.xz.lzma.LZMAEncoder: short[][] isMatch>;

        $r6 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.State state>;

        $i8 = virtualinvoke $r6.<org.tukaani.xz.lzma.State: int get()>();

        $r7 = $r5[$i8];

        virtualinvoke $r4.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBit(short[],int,int)>($r7, posState, 0);

        $r8 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder literalEncoder>;

        virtualinvoke $r8.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: void encode()>();

        goto label8;

     label4:
        $r9 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder rc>;

        $r10 = this.<org.tukaani.xz.lzma.LZMAEncoder: short[][] isMatch>;

        $r11 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.State state>;

        $i9 = virtualinvoke $r11.<org.tukaani.xz.lzma.State: int get()>();

        $r12 = $r10[$i9];

        virtualinvoke $r9.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBit(short[],int,int)>($r12, posState, 1);

        $i10 = this.<org.tukaani.xz.lzma.LZMAEncoder: int back>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i10);

        if $i10 >= 4 goto label6;

        $z3 = <org.tukaani.xz.lzma.LZMAEncoder: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label5;

        $r13 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lz.LZEncoder lz>;

        $i11 = this.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead>;

        $i12 = neg $i11;

        $r14 = this.<org.tukaani.xz.lzma.LZMAEncoder: int[] reps>;

        $i13 = this.<org.tukaani.xz.lzma.LZMAEncoder: int back>;

        $i14 = $r14[$i13];

        $i15 = virtualinvoke $r13.<org.tukaani.xz.lz.LZEncoder: int getMatchLen(int,int,int)>($i12, $i14, len);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i15);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len);

        if $i15 == len goto label5;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label5:
        $r16 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder rc>;

        $r17 = this.<org.tukaani.xz.lzma.LZMAEncoder: short[] isRep>;

        $r18 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.State state>;

        $i16 = virtualinvoke $r18.<org.tukaani.xz.lzma.State: int get()>();

        virtualinvoke $r16.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBit(short[],int,int)>($r17, $i16, 1);

        $i17 = this.<org.tukaani.xz.lzma.LZMAEncoder: int back>;

        specialinvoke this.<org.tukaani.xz.lzma.LZMAEncoder: void encodeRepMatch(int,int,int)>($i17, len, posState);

        goto label8;

     label6:
        $z4 = <org.tukaani.xz.lzma.LZMAEncoder: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label7;

        $r19 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lz.LZEncoder lz>;

        $i18 = this.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead>;

        $i19 = neg $i18;

        $i20 = this.<org.tukaani.xz.lzma.LZMAEncoder: int back>;

        $i21 = $i20 - 4;

        $i22 = virtualinvoke $r19.<org.tukaani.xz.lz.LZEncoder: int getMatchLen(int,int,int)>($i19, $i21, len);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i22);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len);

        if $i22 == len goto label7;

        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();

        throw $r20;

     label7:
        $r21 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder rc>;

        $r22 = this.<org.tukaani.xz.lzma.LZMAEncoder: short[] isRep>;

        $r23 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.State state>;

        $i23 = virtualinvoke $r23.<org.tukaani.xz.lzma.State: int get()>();

        virtualinvoke $r21.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBit(short[],int,int)>($r22, $i23, 0);

        $i24 = this.<org.tukaani.xz.lzma.LZMAEncoder: int back>;

        $i25 = $i24 - 4;

        specialinvoke this.<org.tukaani.xz.lzma.LZMAEncoder: void encodeMatch(int,int,int)>($i25, len, posState);

     label8:
        $i26 = this.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead>;

        $i27 = $i26 - len;

        this.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead> = $i27;

        $i28 = this.<org.tukaani.xz.lzma.LZMAEncoder: int uncompressedSize>;

        $i29 = $i28 + len;

        this.<org.tukaani.xz.lzma.LZMAEncoder: int uncompressedSize> = $i29;

        return 1;
    }

    private void encodeRepMatch(int, int, int) throws java.io.IOException
    {
        org.tukaani.xz.lzma.LZMAEncoder this;
        int rep, len, posState, dist, $i0, $i1, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        org.tukaani.xz.rangecoder.RangeEncoder $r0, $r3, $r8, $r11, $r14, $r17;
        short[] $r1, $r6, $r9, $r12, $r15, $r18;
        org.tukaani.xz.lzma.State $r2, $r5, $r10, $r13, $r16, $r19, $r27, $r29;
        short[][] $r4;
        byte $b3;
        int[] $r7, $r20, $r21, $r22, $r23, $r24, $r25, $r26;
        org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder $r28;

        this := @this: org.tukaani.xz.lzma.LZMAEncoder;

        rep := @parameter0: int;

        len := @parameter1: int;

        posState := @parameter2: int;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(rep);

        if rep != 0 goto label3;

        $r0 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder rc>;

        $r1 = this.<org.tukaani.xz.lzma.LZMAEncoder: short[] isRep0>;

        $r2 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.State state>;

        $i0 = virtualinvoke $r2.<org.tukaani.xz.lzma.State: int get()>();

        virtualinvoke $r0.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBit(short[],int,int)>($r1, $i0, 0);

        $r3 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder rc>;

        $r4 = this.<org.tukaani.xz.lzma.LZMAEncoder: short[][] isRep0Long>;

        $r5 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.State state>;

        $i1 = virtualinvoke $r5.<org.tukaani.xz.lzma.State: int get()>();

        $r6 = $r4[$i1];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len);

        if len != 1 goto label1;

        $b3 = 0;

        goto label2;

     label1:
        $b3 = 1;

     label2:
        virtualinvoke $r3.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBit(short[],int,int)>($r6, posState, $b3);

        goto label7;

     label3:
        $r7 = this.<org.tukaani.xz.lzma.LZMAEncoder: int[] reps>;

        dist = $r7[rep];

        $r8 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder rc>;

        $r9 = this.<org.tukaani.xz.lzma.LZMAEncoder: short[] isRep0>;

        $r10 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.State state>;

        $i4 = virtualinvoke $r10.<org.tukaani.xz.lzma.State: int get()>();

        virtualinvoke $r8.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBit(short[],int,int)>($r9, $i4, 1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(rep);

        if rep != 1 goto label4;

        $r11 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder rc>;

        $r12 = this.<org.tukaani.xz.lzma.LZMAEncoder: short[] isRep1>;

        $r13 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.State state>;

        $i5 = virtualinvoke $r13.<org.tukaani.xz.lzma.State: int get()>();

        virtualinvoke $r11.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBit(short[],int,int)>($r12, $i5, 0);

        goto label6;

     label4:
        $r14 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder rc>;

        $r15 = this.<org.tukaani.xz.lzma.LZMAEncoder: short[] isRep1>;

        $r16 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.State state>;

        $i6 = virtualinvoke $r16.<org.tukaani.xz.lzma.State: int get()>();

        virtualinvoke $r14.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBit(short[],int,int)>($r15, $i6, 1);

        $r17 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder rc>;

        $r18 = this.<org.tukaani.xz.lzma.LZMAEncoder: short[] isRep2>;

        $r19 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.State state>;

        $i7 = virtualinvoke $r19.<org.tukaani.xz.lzma.State: int get()>();

        $i8 = rep - 2;

        virtualinvoke $r17.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBit(short[],int,int)>($r18, $i7, $i8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(rep);

        if rep != 3 goto label5;

        $r20 = this.<org.tukaani.xz.lzma.LZMAEncoder: int[] reps>;

        $r21 = this.<org.tukaani.xz.lzma.LZMAEncoder: int[] reps>;

        $i9 = $r21[2];

        $r20[3] = $i9;

     label5:
        $r22 = this.<org.tukaani.xz.lzma.LZMAEncoder: int[] reps>;

        $r23 = this.<org.tukaani.xz.lzma.LZMAEncoder: int[] reps>;

        $i10 = $r23[1];

        $r22[2] = $i10;

     label6:
        $r24 = this.<org.tukaani.xz.lzma.LZMAEncoder: int[] reps>;

        $r25 = this.<org.tukaani.xz.lzma.LZMAEncoder: int[] reps>;

        $i11 = $r25[0];

        $r24[1] = $i11;

        $r26 = this.<org.tukaani.xz.lzma.LZMAEncoder: int[] reps>;

        $r26[0] = dist;

     label7:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len);

        if len != 1 goto label8;

        $r27 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r27.<org.tukaani.xz.lzma.State: void updateShortRep()>();

        goto label9;

     label8:
        $r28 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder repLenEncoder>;

        virtualinvoke $r28.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: void encode(int,int)>(len, posState);

        $r29 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r29.<org.tukaani.xz.lzma.State: void updateLongRep()>();

     label9:
        return;
    }

    private void encodeMatch(int, int, int) throws java.io.IOException
    {
        org.tukaani.xz.lzma.LZMAEncoder this;
        int dist, len, posState, distSlot, footerBits, base, distReduced, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        org.tukaani.xz.lzma.State $r0;
        org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder $r1;
        org.tukaani.xz.rangecoder.RangeEncoder $r2, $r5, $r8, $r9;
        short[][] $r3, $r6;
        short[] $r4, $r7, $r10;
        int[] $r12, $r13, $r14, $r15, $r16, $r17, $r18;

        this := @this: org.tukaani.xz.lzma.LZMAEncoder;

        dist := @parameter0: int;

        len := @parameter1: int;

        posState := @parameter2: int;

        $r0 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r0.<org.tukaani.xz.lzma.State: void updateMatch()>();

        $r1 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder matchLenEncoder>;

        virtualinvoke $r1.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: void encode(int,int)>(len, posState);

        distSlot = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder: int getDistSlot(int)>(dist);

        $r2 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder rc>;

        $r3 = this.<org.tukaani.xz.lzma.LZMAEncoder: short[][] distSlots>;

        $i0 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder: int getDistState(int)>(len);

        $r4 = $r3[$i0];

        virtualinvoke $r2.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBitTree(short[],int)>($r4, distSlot);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(distSlot);

        if distSlot < 4 goto label2;

        $i1 = distSlot >>> 1;

        footerBits = $i1 - 1;

        $i2 = distSlot & 1;

        $i3 = 2 | $i2;

        base = $i3 << footerBits;

        distReduced = dist - base;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(distSlot);

        if distSlot >= 14 goto label1;

        $r5 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder rc>;

        $r6 = this.<org.tukaani.xz.lzma.LZMAEncoder: short[][] distSpecial>;

        $i4 = distSlot - 4;

        $r7 = $r6[$i4];

        virtualinvoke $r5.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeReverseBitTree(short[],int)>($r7, distReduced);

        goto label2;

     label1:
        $r8 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder rc>;

        $i5 = distReduced >>> 4;

        $i6 = footerBits - 4;

        virtualinvoke $r8.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeDirectBits(int,int)>($i5, $i6);

        $r9 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder rc>;

        $r10 = this.<org.tukaani.xz.lzma.LZMAEncoder: short[] distAlign>;

        $i7 = distReduced & 15;

        virtualinvoke $r9.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeReverseBitTree(short[],int)>($r10, $i7);

        $i8 = this.<org.tukaani.xz.lzma.LZMAEncoder: int alignPriceCount>;

        $i9 = $i8 - 1;

        this.<org.tukaani.xz.lzma.LZMAEncoder: int alignPriceCount> = $i9;

     label2:
        $r12 = this.<org.tukaani.xz.lzma.LZMAEncoder: int[] reps>;

        $r13 = this.<org.tukaani.xz.lzma.LZMAEncoder: int[] reps>;

        $i10 = $r13[2];

        $r12[3] = $i10;

        $r14 = this.<org.tukaani.xz.lzma.LZMAEncoder: int[] reps>;

        $r15 = this.<org.tukaani.xz.lzma.LZMAEncoder: int[] reps>;

        $i11 = $r15[1];

        $r14[2] = $i11;

        $r16 = this.<org.tukaani.xz.lzma.LZMAEncoder: int[] reps>;

        $r17 = this.<org.tukaani.xz.lzma.LZMAEncoder: int[] reps>;

        $i12 = $r17[0];

        $r16[1] = $i12;

        $r18 = this.<org.tukaani.xz.lzma.LZMAEncoder: int[] reps>;

        $r18[0] = dist;

        $i13 = this.<org.tukaani.xz.lzma.LZMAEncoder: int distPriceCount>;

        $i14 = $i13 - 1;

        this.<org.tukaani.xz.lzma.LZMAEncoder: int distPriceCount> = $i14;

        return;
    }

    org.tukaani.xz.lz.Matches getMatches()
    {
        org.tukaani.xz.lzma.LZMAEncoder this;
        org.tukaani.xz.lz.Matches matches;
        int $i0, $i1;
        org.tukaani.xz.lz.LZEncoder $r1, $r2;
        boolean $z0, $z1;
        java.lang.AssertionError $r3;

        this := @this: org.tukaani.xz.lzma.LZMAEncoder;

        $i0 = this.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead>;

        $i1 = $i0 + 1;

        this.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead> = $i1;

        $r1 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lz.LZEncoder lz>;

        matches = virtualinvoke $r1.<org.tukaani.xz.lz.LZEncoder: org.tukaani.xz.lz.Matches getMatches()>();

        $z0 = <org.tukaani.xz.lzma.LZMAEncoder: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r2 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lz.LZEncoder lz>;

        $z1 = virtualinvoke $r2.<org.tukaani.xz.lz.LZEncoder: boolean verifyMatches(org.tukaani.xz.lz.Matches)>(matches);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        return matches;
    }

    void skip(int)
    {
        org.tukaani.xz.lzma.LZMAEncoder this;
        int len, $i0, $i1;
        org.tukaani.xz.lz.LZEncoder $r1;

        this := @this: org.tukaani.xz.lzma.LZMAEncoder;

        len := @parameter0: int;

        $i0 = this.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead>;

        $i1 = $i0 + len;

        this.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead> = $i1;

        $r1 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lz.LZEncoder lz>;

        virtualinvoke $r1.<org.tukaani.xz.lz.LZEncoder: void skip(int)>(len);

        return;
    }

    int getAnyMatchPrice(org.tukaani.xz.lzma.State, int)
    {
        org.tukaani.xz.lzma.LZMAEncoder this;
        org.tukaani.xz.lzma.State state;
        int posState, $i0, $i2;
        short[][] $r0;
        short[] $r1;
        short $s1;

        this := @this: org.tukaani.xz.lzma.LZMAEncoder;

        state := @parameter0: org.tukaani.xz.lzma.State;

        posState := @parameter1: int;

        $r0 = this.<org.tukaani.xz.lzma.LZMAEncoder: short[][] isMatch>;

        $i0 = virtualinvoke state.<org.tukaani.xz.lzma.State: int get()>();

        $r1 = $r0[$i0];

        $s1 = $r1[posState];

        $i2 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitPrice(int,int)>($s1, 1);

        return $i2;
    }

    int getAnyRepPrice(int, org.tukaani.xz.lzma.State)
    {
        org.tukaani.xz.lzma.LZMAEncoder this;
        int anyMatchPrice, $i0, $i2, $i3;
        org.tukaani.xz.lzma.State state;
        short[] $r0;
        short $s1;

        this := @this: org.tukaani.xz.lzma.LZMAEncoder;

        anyMatchPrice := @parameter0: int;

        state := @parameter1: org.tukaani.xz.lzma.State;

        $r0 = this.<org.tukaani.xz.lzma.LZMAEncoder: short[] isRep>;

        $i0 = virtualinvoke state.<org.tukaani.xz.lzma.State: int get()>();

        $s1 = $r0[$i0];

        $i2 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitPrice(int,int)>($s1, 1);

        $i3 = anyMatchPrice + $i2;

        return $i3;
    }

    int getShortRepPrice(int, org.tukaani.xz.lzma.State, int)
    {
        org.tukaani.xz.lzma.LZMAEncoder this;
        int anyRepPrice, posState, $i0, $i2, $i3, $i4, $i6, $i7;
        org.tukaani.xz.lzma.State state;
        short[] $r0, $r2;
        short $s1, $s5;
        short[][] $r1;

        this := @this: org.tukaani.xz.lzma.LZMAEncoder;

        anyRepPrice := @parameter0: int;

        state := @parameter1: org.tukaani.xz.lzma.State;

        posState := @parameter2: int;

        $r0 = this.<org.tukaani.xz.lzma.LZMAEncoder: short[] isRep0>;

        $i0 = virtualinvoke state.<org.tukaani.xz.lzma.State: int get()>();

        $s1 = $r0[$i0];

        $i2 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitPrice(int,int)>($s1, 0);

        $i3 = anyRepPrice + $i2;

        $r1 = this.<org.tukaani.xz.lzma.LZMAEncoder: short[][] isRep0Long>;

        $i4 = virtualinvoke state.<org.tukaani.xz.lzma.State: int get()>();

        $r2 = $r1[$i4];

        $s5 = $r2[posState];

        $i6 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitPrice(int,int)>($s5, 0);

        $i7 = $i3 + $i6;

        return $i7;
    }

    void updatePrices()
    {
        org.tukaani.xz.lzma.LZMAEncoder this;
        int $i0, $i1;
        org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder $r0, $r1;

        this := @this: org.tukaani.xz.lzma.LZMAEncoder;

        $i0 = this.<org.tukaani.xz.lzma.LZMAEncoder: int distPriceCount>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 > 0 goto label1;

        specialinvoke this.<org.tukaani.xz.lzma.LZMAEncoder: void updateDistPrices()>();

     label1:
        $i1 = this.<org.tukaani.xz.lzma.LZMAEncoder: int alignPriceCount>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 > 0 goto label2;

        specialinvoke this.<org.tukaani.xz.lzma.LZMAEncoder: void updateAlignPrices()>();

     label2:
        $r0 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder matchLenEncoder>;

        virtualinvoke $r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: void updatePrices()>();

        $r1 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder repLenEncoder>;

        virtualinvoke $r1.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: void updatePrices()>();

        return;
    }

    int getLongRepPrice(int, int, org.tukaani.xz.lzma.State, int)
    {
        org.tukaani.xz.lzma.LZMAEncoder this;
        int anyRepPrice, rep, posState, price#2, $i0, $i2, $i3, $i5, $i6, price#23, $i7, $i9, price#33, $i10, $i12, $i13, $i15, $i16, $i18, $i19, $i20;
        org.tukaani.xz.lzma.State state;
        short[] $r0, $r2, $r3, $r4, $r5, $r6;
        short $s1, $s4, $s8, $s11, $s14, $s17;
        short[][] $r1;

        this := @this: org.tukaani.xz.lzma.LZMAEncoder;

        anyRepPrice := @parameter0: int;

        rep := @parameter1: int;

        state := @parameter2: org.tukaani.xz.lzma.State;

        posState := @parameter3: int;

        price#2 = anyRepPrice;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(rep);

        if rep != 0 goto label1;

        $r0 = this.<org.tukaani.xz.lzma.LZMAEncoder: short[] isRep0>;

        $i0 = virtualinvoke state.<org.tukaani.xz.lzma.State: int get()>();

        $s1 = $r0[$i0];

        $i2 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitPrice(int,int)>($s1, 0);

        $r1 = this.<org.tukaani.xz.lzma.LZMAEncoder: short[][] isRep0Long>;

        $i3 = virtualinvoke state.<org.tukaani.xz.lzma.State: int get()>();

        $r2 = $r1[$i3];

        $s4 = $r2[posState];

        $i5 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitPrice(int,int)>($s4, 1);

        $i6 = $i2 + $i5;

        price#23 = price#2 + $i6;

        goto label3;

     label1:
        $r3 = this.<org.tukaani.xz.lzma.LZMAEncoder: short[] isRep0>;

        $i7 = virtualinvoke state.<org.tukaani.xz.lzma.State: int get()>();

        $s8 = $r3[$i7];

        $i9 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitPrice(int,int)>($s8, 1);

        price#33 = price#2 + $i9;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(rep);

        if rep != 1 goto label2;

        $r4 = this.<org.tukaani.xz.lzma.LZMAEncoder: short[] isRep1>;

        $i10 = virtualinvoke state.<org.tukaani.xz.lzma.State: int get()>();

        $s11 = $r4[$i10];

        $i12 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitPrice(int,int)>($s11, 0);

        price#23 = price#33 + $i12;

        goto label3;

     label2:
        $r5 = this.<org.tukaani.xz.lzma.LZMAEncoder: short[] isRep1>;

        $i13 = virtualinvoke state.<org.tukaani.xz.lzma.State: int get()>();

        $s14 = $r5[$i13];

        $i15 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitPrice(int,int)>($s14, 1);

        $r6 = this.<org.tukaani.xz.lzma.LZMAEncoder: short[] isRep2>;

        $i16 = virtualinvoke state.<org.tukaani.xz.lzma.State: int get()>();

        $s17 = $r6[$i16];

        $i18 = rep - 2;

        $i19 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitPrice(int,int)>($s17, $i18);

        $i20 = $i15 + $i19;

        price#23 = price#33 + $i20;

     label3:
        return price#23;
    }

    int getNormalMatchPrice(int, org.tukaani.xz.lzma.State)
    {
        org.tukaani.xz.lzma.LZMAEncoder this;
        int anyMatchPrice, $i0, $i2, $i3;
        org.tukaani.xz.lzma.State state;
        short[] $r0;
        short $s1;

        this := @this: org.tukaani.xz.lzma.LZMAEncoder;

        anyMatchPrice := @parameter0: int;

        state := @parameter1: org.tukaani.xz.lzma.State;

        $r0 = this.<org.tukaani.xz.lzma.LZMAEncoder: short[] isRep>;

        $i0 = virtualinvoke state.<org.tukaani.xz.lzma.State: int get()>();

        $s1 = $r0[$i0];

        $i2 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitPrice(int,int)>($s1, 0);

        $i3 = anyMatchPrice + $i2;

        return $i3;
    }

    int getMatchAndLenPrice(int, int, int, int)
    {
        org.tukaani.xz.lzma.LZMAEncoder this;
        int normalMatchPrice, dist, len, posState, distState, distSlot, $i0, price#8, $i1, price#21, $i2, $i3, $i4, $i5;
        org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder $r0;
        int[][] $r1, $r3;
        int[] $r2, $r4, $r5;

        this := @this: org.tukaani.xz.lzma.LZMAEncoder;

        normalMatchPrice := @parameter0: int;

        dist := @parameter1: int;

        len := @parameter2: int;

        posState := @parameter3: int;

        $r0 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder matchLenEncoder>;

        $i0 = virtualinvoke $r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: int getPrice(int,int)>(len, posState);

        price#8 = normalMatchPrice + $i0;

        distState = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder: int getDistState(int)>(len);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dist);

        if dist >= 128 goto label1;

        $r1 = this.<org.tukaani.xz.lzma.LZMAEncoder: int[][] fullDistPrices>;

        $r2 = $r1[distState];

        $i1 = $r2[dist];

        price#21 = price#8 + $i1;

        goto label2;

     label1:
        distSlot = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder: int getDistSlot(int)>(dist);

        $r3 = this.<org.tukaani.xz.lzma.LZMAEncoder: int[][] distSlotPrices>;

        $r4 = $r3[distState];

        $i2 = $r4[distSlot];

        $r5 = this.<org.tukaani.xz.lzma.LZMAEncoder: int[] alignPrices>;

        $i3 = dist & 15;

        $i4 = $r5[$i3];

        $i5 = $i2 + $i4;

        price#21 = price#8 + $i5;

     label2:
        return price#21;
    }

    int getLongRepAndLenPrice(int, int, org.tukaani.xz.lzma.State, int)
    {
        org.tukaani.xz.lzma.LZMAEncoder this;
        int rep, len, posState, anyMatchPrice, anyRepPrice, longRepPrice, $i0, $i1;
        org.tukaani.xz.lzma.State state;
        org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder $r0;

        this := @this: org.tukaani.xz.lzma.LZMAEncoder;

        rep := @parameter0: int;

        len := @parameter1: int;

        state := @parameter2: org.tukaani.xz.lzma.State;

        posState := @parameter3: int;

        anyMatchPrice = virtualinvoke this.<org.tukaani.xz.lzma.LZMAEncoder: int getAnyMatchPrice(org.tukaani.xz.lzma.State,int)>(state, posState);

        anyRepPrice = virtualinvoke this.<org.tukaani.xz.lzma.LZMAEncoder: int getAnyRepPrice(int,org.tukaani.xz.lzma.State)>(anyMatchPrice, state);

        longRepPrice = virtualinvoke this.<org.tukaani.xz.lzma.LZMAEncoder: int getLongRepPrice(int,int,org.tukaani.xz.lzma.State,int)>(anyRepPrice, rep, state, posState);

        $r0 = this.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder repLenEncoder>;

        $i0 = virtualinvoke $r0.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: int getPrice(int,int)>(len, posState);

        $i1 = longRepPrice + $i0;

        return $i1;
    }

    private void updateDistPrices()
    {
        org.tukaani.xz.lzma.LZMAEncoder this;
        int count, footerBits, base, limit, distReduced, price, distState#4, distSlot#8, $i0, $i1, distSlot#24, $i2, $i3, $i4, $i6, $i7, $i8, dist#47, $i9, dist#62, distSlot#64, $i10, $i11, $i12, $i13, i#87, $i14, distState#102, $i15, $i16;
        int[][] $r0, $r4, $r6, $r8, $r14, $r16;
        int[] $r1, $r5, $r7, $r9, $r15, $r17;
        short[][] $r2, $r10, $r12;
        short[] $r3, $r11, $r13;
        boolean $z0;
        java.lang.AssertionError $r18;

        this := @this: org.tukaani.xz.lzma.LZMAEncoder;

        this.<org.tukaani.xz.lzma.LZMAEncoder: int distPriceCount> = 128;

        distState#4 = 0;

     label01:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(distState#4);

        if distState#4 >= 4 goto label08;

        distSlot#8 = 0;

     label02:
        $i0 = this.<org.tukaani.xz.lzma.LZMAEncoder: int distSlotPricesSize>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(distSlot#8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if distSlot#8 >= $i0 goto label03;

        $r0 = this.<org.tukaani.xz.lzma.LZMAEncoder: int[][] distSlotPrices>;

        $r1 = $r0[distState#4];

        $r2 = this.<org.tukaani.xz.lzma.LZMAEncoder: short[][] distSlots>;

        $r3 = $r2[distState#4];

        $i1 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitTreePrice(short[],int)>($r3, distSlot#8);

        $r1[distSlot#8] = $i1;

        distSlot#8 = distSlot#8 + 1;

        goto label02;

     label03:
        distSlot#24 = 14;

     label04:
        $i2 = this.<org.tukaani.xz.lzma.LZMAEncoder: int distSlotPricesSize>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(distSlot#24);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if distSlot#24 >= $i2 goto label05;

        $i3 = distSlot#24 >>> 1;

        $i4 = $i3 - 1;

        count = $i4 - 4;

        $r4 = this.<org.tukaani.xz.lzma.LZMAEncoder: int[][] distSlotPrices>;

        $r5 = $r4[distState#4];

        $i6 = $r5[distSlot#24];

        $i7 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getDirectBitsPrice(int)>(count);

        $i8 = $i6 + $i7;

        $r5[distSlot#24] = $i8;

        distSlot#24 = distSlot#24 + 1;

        goto label04;

     label05:
        dist#47 = 0;

     label06:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dist#47);

        if dist#47 >= 4 goto label07;

        $r6 = this.<org.tukaani.xz.lzma.LZMAEncoder: int[][] fullDistPrices>;

        $r7 = $r6[distState#4];

        $r8 = this.<org.tukaani.xz.lzma.LZMAEncoder: int[][] distSlotPrices>;

        $r9 = $r8[distState#4];

        $i9 = $r9[dist#47];

        $r7[dist#47] = $i9;

        dist#47 = dist#47 + 1;

        goto label06;

     label07:
        distState#4 = distState#4 + 1;

        goto label01;

     label08:
        dist#62 = 4;

        distSlot#64 = 4;

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(distSlot#64);

        if distSlot#64 >= 14 goto label14;

        $i10 = distSlot#64 >>> 1;

        footerBits = $i10 - 1;

        $i11 = distSlot#64 & 1;

        $i12 = 2 | $i11;

        base = $i12 << footerBits;

        $r10 = this.<org.tukaani.xz.lzma.LZMAEncoder: short[][] distSpecial>;

        $i13 = distSlot#64 - 4;

        $r11 = $r10[$i13];

        limit = lengthof $r11;

        i#87 = 0;

     label10:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#87);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(limit);

        if i#87 >= limit goto label13;

        distReduced = dist#62 - base;

        $r12 = this.<org.tukaani.xz.lzma.LZMAEncoder: short[][] distSpecial>;

        $i14 = distSlot#64 - 4;

        $r13 = $r12[$i14];

        price = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getReverseBitTreePrice(short[],int)>($r13, distReduced);

        distState#102 = 0;

     label11:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(distState#102);

        if distState#102 >= 4 goto label12;

        $r14 = this.<org.tukaani.xz.lzma.LZMAEncoder: int[][] fullDistPrices>;

        $r15 = $r14[distState#102];

        $r16 = this.<org.tukaani.xz.lzma.LZMAEncoder: int[][] distSlotPrices>;

        $r17 = $r16[distState#102];

        $i15 = $r17[distSlot#64];

        $i16 = $i15 + price;

        $r15[dist#62] = $i16;

        distState#102 = distState#102 + 1;

        goto label11;

     label12:
        dist#62 = dist#62 + 1;

        i#87 = i#87 + 1;

        goto label10;

     label13:
        distSlot#64 = distSlot#64 + 1;

        goto label09;

     label14:
        $z0 = <org.tukaani.xz.lzma.LZMAEncoder: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label15;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dist#62);

        if dist#62 == 128 goto label15;

        $r18 = new java.lang.AssertionError;

        specialinvoke $r18.<java.lang.AssertionError: void <init>()>();

        throw $r18;

     label15:
        return;
    }

    private void updateAlignPrices()
    {
        org.tukaani.xz.lzma.LZMAEncoder this;
        int i#4, $i0;
        int[] $r0;
        short[] $r1;

        this := @this: org.tukaani.xz.lzma.LZMAEncoder;

        this.<org.tukaani.xz.lzma.LZMAEncoder: int alignPriceCount> = 16;

        i#4 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#4);

        if i#4 >= 16 goto label2;

        $r0 = this.<org.tukaani.xz.lzma.LZMAEncoder: int[] alignPrices>;

        $r1 = this.<org.tukaani.xz.lzma.LZMAEncoder: short[] distAlign>;

        $i0 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getReverseBitTreePrice(short[],int)>($r1, i#4);

        $r0[i#4] = $i0;

        i#4 = i#4 + 1;

        goto label1;

     label2:
        return;
    }

    static org.tukaani.xz.rangecoder.RangeEncoder access$100(org.tukaani.xz.lzma.LZMAEncoder)
    {
        org.tukaani.xz.lzma.LZMAEncoder x0;
        org.tukaani.xz.rangecoder.RangeEncoder $r0;

        x0 := @parameter0: org.tukaani.xz.lzma.LZMAEncoder;

        $r0 = x0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder rc>;

        return $r0;
    }


