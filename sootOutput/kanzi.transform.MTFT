    public boolean forward(kanzi.SliceByteArray, kanzi.SliceByteArray)
    {
        kanzi.transform.MTFT this;
        kanzi.SliceByteArray src, dst;
        int count, srcIdx, dstIdx, $i0, $i1, $i2, $i3, i#45, $i4, $i5, idx#72, ii#74, $i7, $i9, $i12, $i14, $i15, $i17, $i18, $i19, $i20, $i21, $i22;
        byte[] input, output, $r0, $r1, $r2, $r6, $r22;
        byte current, listIdx, previous#43, $b8, $b10;
        boolean $z0, $z1;
        kanzi.transform.MTFT$Payload $r3, $r5, p#70, $r9, $r10, $r11, $r12, $r14, $r15, $r18, $r20, $r21;
        kanzi.transform.MTFT$Payload[] $r4, $r7, $r13, $r16, $r17, $r19;
        short $s6, $s11;
        int[] $r8, $r23, $r24, $r25;

        this := @this: kanzi.transform.MTFT;

        src := @parameter0: kanzi.SliceByteArray;

        dst := @parameter1: kanzi.SliceByteArray;

        $z0 = staticinvoke <kanzi.SliceByteArray: boolean isValid(kanzi.SliceByteArray)>(src);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label01;

        $z1 = staticinvoke <kanzi.SliceByteArray: boolean isValid(kanzi.SliceByteArray)>(dst);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label02;

     label01:
        return 0;

     label02:
        $r0 = src.<kanzi.SliceByteArray: byte[] array>;

        $r1 = dst.<kanzi.SliceByteArray: byte[] array>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r0 != $r1 goto label03;

        return 0;

     label03:
        count = src.<kanzi.SliceByteArray: int length>;

        $i0 = dst.<kanzi.SliceByteArray: int length>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count);

        if $i0 >= count goto label04;

        return 0;

     label04:
        $i1 = dst.<kanzi.SliceByteArray: int index>;

        $i2 = $i1 + count;

        $r2 = dst.<kanzi.SliceByteArray: byte[] array>;

        $i3 = lengthof $r2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i2 <= $i3 goto label05;

        return 0;

     label05:
        $r3 = this.<kanzi.transform.MTFT: kanzi.transform.MTFT$Payload anchor>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r3);

        if $r3 != null goto label06;

        specialinvoke this.<kanzi.transform.MTFT: void initLists()>();

        goto label07;

     label06:
        specialinvoke this.<kanzi.transform.MTFT: void balanceLists(boolean)>(1);

     label07:
        input = src.<kanzi.SliceByteArray: byte[] array>;

        output = dst.<kanzi.SliceByteArray: byte[] array>;

        srcIdx = src.<kanzi.SliceByteArray: int index>;

        dstIdx = dst.<kanzi.SliceByteArray: int index>;

        $r4 = this.<kanzi.transform.MTFT: kanzi.transform.MTFT$Payload[] heads>;

        $r5 = $r4[0];

        previous#43 = $r5.<kanzi.transform.MTFT$Payload: byte value>;

        i#45 = 0;

     label08:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#45);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count);

        if i#45 >= count goto label17;

        $i4 = srcIdx + i#45;

        current = input[$i4];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(current);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(previous#43);

        if current != previous#43 goto label09;

        $i5 = dstIdx + i#45;

        output[$i5] = 0;

        goto label16;

     label09:
        $r6 = this.<kanzi.transform.MTFT: byte[] buckets>;

        $s6 = current & 255;

        listIdx = $r6[$s6];

        $r7 = this.<kanzi.transform.MTFT: kanzi.transform.MTFT$Payload[] heads>;

        p#70 = $r7[listIdx];

        idx#72 = 0;

        ii#74 = 0;

     label10:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(ii#74);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(listIdx);

        if ii#74 >= listIdx goto label11;

        $r8 = this.<kanzi.transform.MTFT: int[] lengths>;

        $i7 = $r8[ii#74];

        idx#72 = idx#72 + $i7;

        ii#74 = ii#74 + 1;

        goto label10;

     label11:
        $b8 = p#70.<kanzi.transform.MTFT$Payload: byte value>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(current);

        if $b8 == current goto label12;

        p#70 = p#70.<kanzi.transform.MTFT$Payload: kanzi.transform.MTFT$Payload next>;

        idx#72 = idx#72 + 1;

        goto label11;

     label12:
        $i9 = dstIdx + i#45;

        $b10 = (byte) idx#72;

        output[$i9] = $b10;

        $r9 = p#70.<kanzi.transform.MTFT$Payload: kanzi.transform.MTFT$Payload previous>;

        $r10 = p#70.<kanzi.transform.MTFT$Payload: kanzi.transform.MTFT$Payload next>;

        $r9.<kanzi.transform.MTFT$Payload: kanzi.transform.MTFT$Payload next> = $r10;

        $r11 = p#70.<kanzi.transform.MTFT$Payload: kanzi.transform.MTFT$Payload next>;

        $r12 = p#70.<kanzi.transform.MTFT$Payload: kanzi.transform.MTFT$Payload previous>;

        $r11.<kanzi.transform.MTFT$Payload: kanzi.transform.MTFT$Payload previous> = $r12;

        $r13 = this.<kanzi.transform.MTFT: kanzi.transform.MTFT$Payload[] heads>;

        $r14 = $r13[0];

        p#70.<kanzi.transform.MTFT$Payload: kanzi.transform.MTFT$Payload next> = $r14;

        $r15 = p#70.<kanzi.transform.MTFT$Payload: kanzi.transform.MTFT$Payload next>;

        $r15.<kanzi.transform.MTFT$Payload: kanzi.transform.MTFT$Payload previous> = p#70;

        $r16 = this.<kanzi.transform.MTFT: kanzi.transform.MTFT$Payload[] heads>;

        $r16[0] = p#70;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(listIdx);

        if listIdx == 0 goto label15;

        $r17 = this.<kanzi.transform.MTFT: kanzi.transform.MTFT$Payload[] heads>;

        $r18 = $r17[listIdx];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(p#70);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r18);

        if p#70 != $r18 goto label13;

        $r19 = this.<kanzi.transform.MTFT: kanzi.transform.MTFT$Payload[] heads>;

        $r20 = p#70.<kanzi.transform.MTFT$Payload: kanzi.transform.MTFT$Payload previous>;

        $r21 = $r20.<kanzi.transform.MTFT$Payload: kanzi.transform.MTFT$Payload next>;

        $r19[listIdx] = $r21;

     label13:
        $r22 = this.<kanzi.transform.MTFT: byte[] buckets>;

        $s11 = current & 255;

        $r22[$s11] = 0;

        $r23 = this.<kanzi.transform.MTFT: int[] lengths>;

        $i12 = $r23[0];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i12);

        if $i12 < 64 goto label14;

        specialinvoke this.<kanzi.transform.MTFT: void balanceLists(boolean)>(0);

        goto label15;

     label14:
        $r24 = this.<kanzi.transform.MTFT: int[] lengths>;

        $i14 = $r24[listIdx];

        $i15 = $i14 - 1;

        $r24[listIdx] = $i15;

        $r25 = this.<kanzi.transform.MTFT: int[] lengths>;

        $i17 = $r25[0];

        $i18 = $i17 + 1;

        $r25[0] = $i18;

     label15:
        previous#43 = current;

     label16:
        i#45 = i#45 + 1;

        goto label08;

     label17:
        $i19 = src.<kanzi.SliceByteArray: int index>;

        $i20 = $i19 + count;

        src.<kanzi.SliceByteArray: int index> = $i20;

        $i21 = dst.<kanzi.SliceByteArray: int index>;

        $i22 = $i21 + count;

        dst.<kanzi.SliceByteArray: int index> = $i22;

        return 1;
    }

    public void <init>()
    {
        kanzi.transform.MTFT this;
        kanzi.transform.MTFT$Payload[] $r0;
        int[] $r1;
        byte[] $r2;

        this := @this: kanzi.transform.MTFT;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = newarray (kanzi.transform.MTFT$Payload)[16];

        this.<kanzi.transform.MTFT: kanzi.transform.MTFT$Payload[] heads> = $r0;

        $r1 = newarray (int)[16];

        this.<kanzi.transform.MTFT: int[] lengths> = $r1;

        $r2 = newarray (byte)[256];

        this.<kanzi.transform.MTFT: byte[] buckets> = $r2;

        return;
    }

    private void initLists()
    {
        kanzi.transform.MTFT this;
        kanzi.transform.MTFT$Payload[] buf, $r1, $r5;
        kanzi.transform.MTFT$Payload $r0, previous#11, $r4, $r6, $r9, $r10, $r11, $r12, $r13;
        int[] $r2, $r7;
        byte[] $r3, $r8;
        byte listIdx#25, $b0;
        int i#27, $i1, $i2, $i3;

        this := @this: kanzi.transform.MTFT;

        buf = newarray (kanzi.transform.MTFT$Payload)[257];

        $r0 = new kanzi.transform.MTFT$Payload;

        specialinvoke $r0.<kanzi.transform.MTFT$Payload: void <init>(byte)>(0);

        buf[0] = $r0;

        previous#11 = buf[0];

        $r1 = this.<kanzi.transform.MTFT: kanzi.transform.MTFT$Payload[] heads>;

        $r1[0] = previous#11;

        $r2 = this.<kanzi.transform.MTFT: int[] lengths>;

        $r2[0] = 1;

        $r3 = this.<kanzi.transform.MTFT: byte[] buckets>;

        $r3[0] = 0;

        listIdx#25 = 0;

        i#27 = 1;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#27);

        if i#27 >= 256 goto label3;

        $r4 = new kanzi.transform.MTFT$Payload;

        $b0 = (byte) i#27;

        specialinvoke $r4.<kanzi.transform.MTFT$Payload: void <init>(byte)>($b0);

        buf[i#27] = $r4;

        $i1 = i#27 - 1;

        $i2 = $i1 % 17;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 != 0 goto label2;

        $i3 = listIdx#25 + 1;

        listIdx#25 = (byte) $i3;

        $r5 = this.<kanzi.transform.MTFT: kanzi.transform.MTFT$Payload[] heads>;

        $r6 = buf[i#27];

        $r5[listIdx#25] = $r6;

        $r7 = this.<kanzi.transform.MTFT: int[] lengths>;

        $r7[listIdx#25] = 17;

     label2:
        $r8 = this.<kanzi.transform.MTFT: byte[] buckets>;

        $r8[i#27] = listIdx#25;

        $r9 = buf[i#27];

        previous#11.<kanzi.transform.MTFT$Payload: kanzi.transform.MTFT$Payload next> = $r9;

        $r10 = buf[i#27];

        $r10.<kanzi.transform.MTFT$Payload: kanzi.transform.MTFT$Payload previous> = previous#11;

        previous#11 = buf[i#27];

        i#27 = i#27 + 1;

        goto label1;

     label3:
        $r11 = new kanzi.transform.MTFT$Payload;

        specialinvoke $r11.<kanzi.transform.MTFT$Payload: void <init>(byte)>(0);

        buf[256] = $r11;

        $r12 = buf[256];

        this.<kanzi.transform.MTFT: kanzi.transform.MTFT$Payload anchor> = $r12;

        $r13 = this.<kanzi.transform.MTFT: kanzi.transform.MTFT$Payload anchor>;

        previous#11.<kanzi.transform.MTFT$Payload: kanzi.transform.MTFT$Payload next> = $r13;

        return;
    }

    private void balanceLists(boolean)
    {
        kanzi.transform.MTFT this;
        boolean resetValues;
        int[] $r0, $r7;
        kanzi.transform.MTFT$Payload[] $r1, $r3, $r6;
        kanzi.transform.MTFT$Payload $r2, p#10, $r4;
        byte val#12, listIdx#25, $b1;
        byte[] $r5, $r8;
        int n#37, $i0, $i3;
        short $s2;

        this := @this: kanzi.transform.MTFT;

        resetValues := @parameter0: boolean;

        $r0 = this.<kanzi.transform.MTFT: int[] lengths>;

        $r0[0] = 1;

        $r1 = this.<kanzi.transform.MTFT: kanzi.transform.MTFT$Payload[] heads>;

        $r2 = $r1[0];

        p#10 = $r2.<kanzi.transform.MTFT$Payload: kanzi.transform.MTFT$Payload next>;

        val#12 = 0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(resetValues);

        if resetValues != 1 goto label1;

        $r3 = this.<kanzi.transform.MTFT: kanzi.transform.MTFT$Payload[] heads>;

        $r4 = $r3[0];

        $r4.<kanzi.transform.MTFT$Payload: byte value> = 0;

        $r5 = this.<kanzi.transform.MTFT: byte[] buckets>;

        $r5[0] = 0;

     label1:
        listIdx#25 = 1;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(listIdx#25);

        if listIdx#25 >= 16 goto label6;

        $r6 = this.<kanzi.transform.MTFT: kanzi.transform.MTFT$Payload[] heads>;

        $r6[listIdx#25] = p#10;

        $r7 = this.<kanzi.transform.MTFT: int[] lengths>;

        $r7[listIdx#25] = 17;

        n#37 = 0;

     label3:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n#37);

        if n#37 >= 17 goto label5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(resetValues);

        if resetValues != 1 goto label4;

        $i0 = val#12 + 1;

        val#12 = (byte) $i0;

        p#10.<kanzi.transform.MTFT$Payload: byte value> = val#12;

     label4:
        $r8 = this.<kanzi.transform.MTFT: byte[] buckets>;

        $b1 = p#10.<kanzi.transform.MTFT$Payload: byte value>;

        $s2 = $b1 & 255;

        $r8[$s2] = listIdx#25;

        p#10 = p#10.<kanzi.transform.MTFT$Payload: kanzi.transform.MTFT$Payload next>;

        n#37 = n#37 + 1;

        goto label3;

     label5:
        $i3 = listIdx#25 + 1;

        listIdx#25 = (byte) $i3;

        goto label2;

     label6:
        return;
    }


