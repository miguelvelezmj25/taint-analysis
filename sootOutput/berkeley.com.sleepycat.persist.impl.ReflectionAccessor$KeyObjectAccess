    void <init>(java.lang.reflect.Field, berkeley.com.sleepycat.persist.impl.Format)
    {
        berkeley.com.sleepycat.persist.impl.ReflectionAccessor$KeyObjectAccess this;
        java.lang.reflect.Field field;
        berkeley.com.sleepycat.persist.impl.Format format;

        this := @this: berkeley.com.sleepycat.persist.impl.ReflectionAccessor$KeyObjectAccess;

        field := @parameter0: java.lang.reflect.Field;

        format := @parameter1: berkeley.com.sleepycat.persist.impl.Format;

        specialinvoke this.<berkeley.com.sleepycat.persist.impl.ReflectionAccessor$FieldAccess: void <init>(java.lang.reflect.Field)>(field);

        this.<berkeley.com.sleepycat.persist.impl.ReflectionAccessor$KeyObjectAccess: berkeley.com.sleepycat.persist.impl.Format format> = format;

        return;
    }

    void read(java.lang.Object, berkeley.com.sleepycat.persist.impl.EntityInput) throws java.lang.IllegalAccessException, berkeley.com.sleepycat.persist.impl.RefreshException
    {
        berkeley.com.sleepycat.persist.impl.ReflectionAccessor$KeyObjectAccess this;
        java.lang.Object o, $r2;
        berkeley.com.sleepycat.persist.impl.EntityInput in;
        java.lang.reflect.Field $r0;
        berkeley.com.sleepycat.persist.impl.Format $r1;

        this := @this: berkeley.com.sleepycat.persist.impl.ReflectionAccessor$KeyObjectAccess;

        o := @parameter0: java.lang.Object;

        in := @parameter1: berkeley.com.sleepycat.persist.impl.EntityInput;

        $r0 = this.<berkeley.com.sleepycat.persist.impl.ReflectionAccessor$KeyObjectAccess: java.lang.reflect.Field field>;

        $r1 = this.<berkeley.com.sleepycat.persist.impl.ReflectionAccessor$KeyObjectAccess: berkeley.com.sleepycat.persist.impl.Format format>;

        $r2 = interfaceinvoke in.<berkeley.com.sleepycat.persist.impl.EntityInput: java.lang.Object readKeyObject(berkeley.com.sleepycat.persist.impl.Format)>($r1);

        virtualinvoke $r0.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(o, $r2);

        return;
    }


