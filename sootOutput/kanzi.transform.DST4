    public boolean forward(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.transform.DST4 this;
        kanzi.SliceIntArray src, dst, $r1, $r2, $r3;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        int[] $r0;

        this := @this: kanzi.transform.DST4;

        src := @parameter0: kanzi.SliceIntArray;

        dst := @parameter1: kanzi.SliceIntArray;

        $z0 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(src);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i0 = src.<kanzi.SliceIntArray: int length>;

        if $i0 == 16 goto label2;

        return 0;

     label2:
        if src == dst goto label4;

        $z1 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(dst);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $i1 = dst.<kanzi.SliceIntArray: int index>;

        $i2 = $i1 + 16;

        $r0 = dst.<kanzi.SliceIntArray: int[] array>;

        $i3 = lengthof $r0;

        if $i2 <= $i3 goto label4;

        return 0;

     label4:
        $r1 = this.<kanzi.transform.DST4: kanzi.SliceIntArray data>;

        $r1.<kanzi.SliceIntArray: int index> = 0;

        $r2 = this.<kanzi.transform.DST4: kanzi.SliceIntArray data>;

        staticinvoke <kanzi.transform.DST4: void computeForward(kanzi.SliceIntArray,kanzi.SliceIntArray,int)>(src, $r2, 4);

        $r3 = this.<kanzi.transform.DST4: kanzi.SliceIntArray data>;

        $i4 = this.<kanzi.transform.DST4: int fShift>;

        $i5 = $i4 - 4;

        staticinvoke <kanzi.transform.DST4: void computeForward(kanzi.SliceIntArray,kanzi.SliceIntArray,int)>($r3, dst, $i5);

        $i6 = src.<kanzi.SliceIntArray: int index>;

        $i7 = $i6 + 16;

        src.<kanzi.SliceIntArray: int index> = $i7;

        $i8 = dst.<kanzi.SliceIntArray: int index>;

        $i9 = $i8 + 16;

        dst.<kanzi.SliceIntArray: int index> = $i9;

        return 1;
    }

    private static void computeForward(kanzi.SliceIntArray, kanzi.SliceIntArray, int)
    {
        kanzi.SliceIntArray src, dst;
        int shift, srcIdx, dstIdx, round, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122;
        int[] input, output;

        src := @parameter0: kanzi.SliceIntArray;

        dst := @parameter1: kanzi.SliceIntArray;

        shift := @parameter2: int;

        input = src.<kanzi.SliceIntArray: int[] array>;

        output = dst.<kanzi.SliceIntArray: int[] array>;

        srcIdx = src.<kanzi.SliceIntArray: int index>;

        dstIdx = dst.<kanzi.SliceIntArray: int index>;

        $i0 = 1 << shift;

        round = $i0 >> 1;

        x0 = input[srcIdx];

        $i1 = srcIdx + 1;

        x1 = input[$i1];

        $i2 = srcIdx + 2;

        x2 = input[$i2];

        $i3 = srcIdx + 3;

        x3 = input[$i3];

        $i4 = srcIdx + 4;

        x4 = input[$i4];

        $i5 = srcIdx + 5;

        x5 = input[$i5];

        $i6 = srcIdx + 6;

        x6 = input[$i6];

        $i7 = srcIdx + 7;

        x7 = input[$i7];

        $i8 = srcIdx + 8;

        x8 = input[$i8];

        $i9 = srcIdx + 9;

        x9 = input[$i9];

        $i10 = srcIdx + 10;

        x10 = input[$i10];

        $i11 = srcIdx + 11;

        x11 = input[$i11];

        $i12 = srcIdx + 12;

        x12 = input[$i12];

        $i13 = srcIdx + 13;

        x13 = input[$i13];

        $i14 = srcIdx + 14;

        x14 = input[$i14];

        $i15 = srcIdx + 15;

        x15 = input[$i15];

        a0 = x0 + x3;

        a1 = x1 + x3;

        a2 = x0 - x1;

        a3 = 74 * x2;

        a4 = x4 + x7;

        a5 = x5 + x7;

        a6 = x4 - x5;

        a7 = 74 * x6;

        a8 = x8 + x11;

        a9 = x9 + x11;

        a10 = x8 - x9;

        a11 = 74 * x10;

        a12 = x12 + x15;

        a13 = x13 + x15;

        a14 = x12 - x13;

        a15 = 74 * x14;

        $i16 = 29 * a0;

        $i17 = 55 * a1;

        $i18 = $i16 + $i17;

        $i19 = $i18 + a3;

        $i20 = $i19 + round;

        $i21 = $i20 >> shift;

        output[dstIdx] = $i21;

        $i22 = dstIdx + 1;

        $i23 = 29 * a4;

        $i24 = 55 * a5;

        $i25 = $i23 + $i24;

        $i26 = $i25 + a7;

        $i27 = $i26 + round;

        $i28 = $i27 >> shift;

        output[$i22] = $i28;

        $i29 = dstIdx + 2;

        $i30 = 29 * a8;

        $i31 = 55 * a9;

        $i32 = $i30 + $i31;

        $i33 = $i32 + a11;

        $i34 = $i33 + round;

        $i35 = $i34 >> shift;

        output[$i29] = $i35;

        $i36 = dstIdx + 3;

        $i37 = 29 * a12;

        $i38 = 55 * a13;

        $i39 = $i37 + $i38;

        $i40 = $i39 + a15;

        $i41 = $i40 + round;

        $i42 = $i41 >> shift;

        output[$i36] = $i42;

        $i43 = dstIdx + 4;

        $i44 = x0 + x1;

        $i45 = $i44 - x3;

        $i46 = 74 * $i45;

        $i47 = $i46 + round;

        $i48 = $i47 >> shift;

        output[$i43] = $i48;

        $i49 = dstIdx + 5;

        $i50 = x4 + x5;

        $i51 = $i50 - x7;

        $i52 = 74 * $i51;

        $i53 = $i52 + round;

        $i54 = $i53 >> shift;

        output[$i49] = $i54;

        $i55 = dstIdx + 6;

        $i56 = x8 + x9;

        $i57 = $i56 - x11;

        $i58 = 74 * $i57;

        $i59 = $i58 + round;

        $i60 = $i59 >> shift;

        output[$i55] = $i60;

        $i61 = dstIdx + 7;

        $i62 = x12 + x13;

        $i63 = $i62 - x15;

        $i64 = 74 * $i63;

        $i65 = $i64 + round;

        $i66 = $i65 >> shift;

        output[$i61] = $i66;

        $i67 = dstIdx + 8;

        $i68 = 29 * a2;

        $i69 = 55 * a0;

        $i70 = $i68 + $i69;

        $i71 = $i70 - a3;

        $i72 = $i71 + round;

        $i73 = $i72 >> shift;

        output[$i67] = $i73;

        $i74 = dstIdx + 9;

        $i75 = 29 * a6;

        $i76 = 55 * a4;

        $i77 = $i75 + $i76;

        $i78 = $i77 - a7;

        $i79 = $i78 + round;

        $i80 = $i79 >> shift;

        output[$i74] = $i80;

        $i81 = dstIdx + 10;

        $i82 = 29 * a10;

        $i83 = 55 * a8;

        $i84 = $i82 + $i83;

        $i85 = $i84 - a11;

        $i86 = $i85 + round;

        $i87 = $i86 >> shift;

        output[$i81] = $i87;

        $i88 = dstIdx + 11;

        $i89 = 29 * a14;

        $i90 = 55 * a12;

        $i91 = $i89 + $i90;

        $i92 = $i91 - a15;

        $i93 = $i92 + round;

        $i94 = $i93 >> shift;

        output[$i88] = $i94;

        $i95 = dstIdx + 12;

        $i96 = 55 * a2;

        $i97 = 29 * a1;

        $i98 = $i96 - $i97;

        $i99 = $i98 + a3;

        $i100 = $i99 + round;

        $i101 = $i100 >> shift;

        output[$i95] = $i101;

        $i102 = dstIdx + 13;

        $i103 = 55 * a6;

        $i104 = 29 * a5;

        $i105 = $i103 - $i104;

        $i106 = $i105 + a7;

        $i107 = $i106 + round;

        $i108 = $i107 >> shift;

        output[$i102] = $i108;

        $i109 = dstIdx + 14;

        $i110 = 55 * a10;

        $i111 = 29 * a9;

        $i112 = $i110 - $i111;

        $i113 = $i112 + a11;

        $i114 = $i113 + round;

        $i115 = $i114 >> shift;

        output[$i109] = $i115;

        $i116 = dstIdx + 15;

        $i117 = 55 * a14;

        $i118 = 29 * a13;

        $i119 = $i117 - $i118;

        $i120 = $i119 + a15;

        $i121 = $i120 + round;

        $i122 = $i121 >> shift;

        output[$i116] = $i122;

        return;
    }

    public boolean inverse(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.transform.DST4 this;
        kanzi.SliceIntArray src, dst, $r1, $r2, $r3;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        int[] $r0;

        this := @this: kanzi.transform.DST4;

        src := @parameter0: kanzi.SliceIntArray;

        dst := @parameter1: kanzi.SliceIntArray;

        $z0 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(src);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i0 = src.<kanzi.SliceIntArray: int length>;

        if $i0 == 16 goto label2;

        return 0;

     label2:
        if src == dst goto label4;

        $z1 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(dst);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $i1 = dst.<kanzi.SliceIntArray: int index>;

        $i2 = $i1 + 16;

        $r0 = dst.<kanzi.SliceIntArray: int[] array>;

        $i3 = lengthof $r0;

        if $i2 <= $i3 goto label4;

        return 0;

     label4:
        $r1 = this.<kanzi.transform.DST4: kanzi.SliceIntArray data>;

        $r1.<kanzi.SliceIntArray: int index> = 0;

        $r2 = this.<kanzi.transform.DST4: kanzi.SliceIntArray data>;

        staticinvoke <kanzi.transform.DST4: void computeInverse(kanzi.SliceIntArray,kanzi.SliceIntArray,int)>(src, $r2, 10);

        $r3 = this.<kanzi.transform.DST4: kanzi.SliceIntArray data>;

        $i4 = this.<kanzi.transform.DST4: int iShift>;

        $i5 = $i4 - 10;

        staticinvoke <kanzi.transform.DST4: void computeInverse(kanzi.SliceIntArray,kanzi.SliceIntArray,int)>($r3, dst, $i5);

        $i6 = src.<kanzi.SliceIntArray: int index>;

        $i7 = $i6 + 16;

        src.<kanzi.SliceIntArray: int index> = $i7;

        $i8 = dst.<kanzi.SliceIntArray: int index>;

        $i9 = $i8 + 16;

        dst.<kanzi.SliceIntArray: int index> = $i9;

        return 1;
    }

    private static void computeInverse(kanzi.SliceIntArray, kanzi.SliceIntArray, int)
    {
        kanzi.SliceIntArray src, dst;
        int shift, srcIdx, dstIdx, round, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123;
        int[] input, output;

        src := @parameter0: kanzi.SliceIntArray;

        dst := @parameter1: kanzi.SliceIntArray;

        shift := @parameter2: int;

        input = src.<kanzi.SliceIntArray: int[] array>;

        output = dst.<kanzi.SliceIntArray: int[] array>;

        srcIdx = src.<kanzi.SliceIntArray: int index>;

        dstIdx = dst.<kanzi.SliceIntArray: int index>;

        $i0 = 1 << shift;

        round = $i0 >> 1;

        x0 = input[srcIdx];

        $i1 = srcIdx + 1;

        x1 = input[$i1];

        $i2 = srcIdx + 2;

        x2 = input[$i2];

        $i3 = srcIdx + 3;

        x3 = input[$i3];

        $i4 = srcIdx + 4;

        x4 = input[$i4];

        $i5 = srcIdx + 5;

        x5 = input[$i5];

        $i6 = srcIdx + 6;

        x6 = input[$i6];

        $i7 = srcIdx + 7;

        x7 = input[$i7];

        $i8 = srcIdx + 8;

        x8 = input[$i8];

        $i9 = srcIdx + 9;

        x9 = input[$i9];

        $i10 = srcIdx + 10;

        x10 = input[$i10];

        $i11 = srcIdx + 11;

        x11 = input[$i11];

        $i12 = srcIdx + 12;

        x12 = input[$i12];

        $i13 = srcIdx + 13;

        x13 = input[$i13];

        $i14 = srcIdx + 14;

        x14 = input[$i14];

        $i15 = srcIdx + 15;

        x15 = input[$i15];

        a0 = x0 + x8;

        a1 = x8 + x12;

        a2 = x0 - x12;

        a3 = 74 * x4;

        a4 = x1 + x9;

        a5 = x9 + x13;

        a6 = x1 - x13;

        a7 = 74 * x5;

        a8 = x2 + x10;

        a9 = x10 + x14;

        a10 = x2 - x14;

        a11 = 74 * x6;

        a12 = x3 + x11;

        a13 = x11 + x15;

        a14 = x3 - x15;

        a15 = 74 * x7;

        $i16 = 29 * a0;

        $i17 = 55 * a1;

        $i18 = $i16 + $i17;

        $i19 = $i18 + a3;

        $i20 = $i19 + round;

        b0 = $i20 >> shift;

        $i21 = 55 * a2;

        $i22 = 29 * a1;

        $i23 = $i21 - $i22;

        $i24 = $i23 + a3;

        $i25 = $i24 + round;

        b1 = $i25 >> shift;

        $i26 = x0 - x8;

        $i27 = $i26 + x12;

        $i28 = 74 * $i27;

        $i29 = $i28 + round;

        b2 = $i29 >> shift;

        $i30 = 55 * a0;

        $i31 = 29 * a2;

        $i32 = $i30 + $i31;

        $i33 = $i32 - a3;

        $i34 = $i33 + round;

        b3 = $i34 >> shift;

        $i35 = 29 * a4;

        $i36 = 55 * a5;

        $i37 = $i35 + $i36;

        $i38 = $i37 + a7;

        $i39 = $i38 + round;

        b4 = $i39 >> shift;

        $i40 = 55 * a6;

        $i41 = 29 * a5;

        $i42 = $i40 - $i41;

        $i43 = $i42 + a7;

        $i44 = $i43 + round;

        b5 = $i44 >> shift;

        $i45 = x1 - x9;

        $i46 = $i45 + x13;

        $i47 = 74 * $i46;

        $i48 = $i47 + round;

        b6 = $i48 >> shift;

        $i49 = 55 * a4;

        $i50 = 29 * a6;

        $i51 = $i49 + $i50;

        $i52 = $i51 - a7;

        $i53 = $i52 + round;

        b7 = $i53 >> shift;

        $i54 = 29 * a8;

        $i55 = 55 * a9;

        $i56 = $i54 + $i55;

        $i57 = $i56 + a11;

        $i58 = $i57 + round;

        b8 = $i58 >> shift;

        $i59 = 55 * a10;

        $i60 = 29 * a9;

        $i61 = $i59 - $i60;

        $i62 = $i61 + a11;

        $i63 = $i62 + round;

        b9 = $i63 >> shift;

        $i64 = x2 - x10;

        $i65 = $i64 + x14;

        $i66 = 74 * $i65;

        $i67 = $i66 + round;

        b10 = $i67 >> shift;

        $i68 = 55 * a8;

        $i69 = 29 * a10;

        $i70 = $i68 + $i69;

        $i71 = $i70 - a11;

        $i72 = $i71 + round;

        b11 = $i72 >> shift;

        $i73 = 29 * a12;

        $i74 = 55 * a13;

        $i75 = $i73 + $i74;

        $i76 = $i75 + a15;

        $i77 = $i76 + round;

        b12 = $i77 >> shift;

        $i78 = 55 * a14;

        $i79 = 29 * a13;

        $i80 = $i78 - $i79;

        $i81 = $i80 + a15;

        $i82 = $i81 + round;

        b13 = $i82 >> shift;

        $i83 = x3 - x11;

        $i84 = $i83 + x15;

        $i85 = 74 * $i84;

        $i86 = $i85 + round;

        b14 = $i86 >> shift;

        $i87 = 55 * a12;

        $i88 = 29 * a14;

        $i89 = $i87 + $i88;

        $i90 = $i89 - a15;

        $i91 = $i90 + round;

        b15 = $i91 >> shift;

        if b0 < 65536 goto label01;

        $i93 = 65536;

        goto label03;

     label01:
        if b0 > -65537 goto label02;

        $i93 = -65537;

        goto label03;

     label02:
        $i93 = b0;

     label03:
        output[dstIdx] = $i93;

        $i94 = dstIdx + 1;

        if b1 < 65536 goto label04;

        $i95 = 65536;

        goto label06;

     label04:
        if b1 > -65537 goto label05;

        $i95 = -65537;

        goto label06;

     label05:
        $i95 = b1;

     label06:
        output[$i94] = $i95;

        $i96 = dstIdx + 2;

        if b2 < 65536 goto label07;

        $i97 = 65536;

        goto label09;

     label07:
        if b2 > -65537 goto label08;

        $i97 = -65537;

        goto label09;

     label08:
        $i97 = b2;

     label09:
        output[$i96] = $i97;

        $i98 = dstIdx + 3;

        if b3 < 65536 goto label10;

        $i99 = 65536;

        goto label12;

     label10:
        if b3 > -65537 goto label11;

        $i99 = -65537;

        goto label12;

     label11:
        $i99 = b3;

     label12:
        output[$i98] = $i99;

        $i100 = dstIdx + 4;

        if b4 < 65536 goto label13;

        $i101 = 65536;

        goto label15;

     label13:
        if b4 > -65537 goto label14;

        $i101 = -65537;

        goto label15;

     label14:
        $i101 = b4;

     label15:
        output[$i100] = $i101;

        $i102 = dstIdx + 5;

        if b5 < 65536 goto label16;

        $i103 = 65536;

        goto label18;

     label16:
        if b5 > -65537 goto label17;

        $i103 = -65537;

        goto label18;

     label17:
        $i103 = b5;

     label18:
        output[$i102] = $i103;

        $i104 = dstIdx + 6;

        if b6 < 65536 goto label19;

        $i105 = 65536;

        goto label21;

     label19:
        if b6 > -65537 goto label20;

        $i105 = -65537;

        goto label21;

     label20:
        $i105 = b6;

     label21:
        output[$i104] = $i105;

        $i106 = dstIdx + 7;

        if b7 < 65536 goto label22;

        $i107 = 65536;

        goto label24;

     label22:
        if b7 > -65537 goto label23;

        $i107 = -65537;

        goto label24;

     label23:
        $i107 = b7;

     label24:
        output[$i106] = $i107;

        $i108 = dstIdx + 8;

        if b8 < 65536 goto label25;

        $i109 = 65536;

        goto label27;

     label25:
        if b8 > -65537 goto label26;

        $i109 = -65537;

        goto label27;

     label26:
        $i109 = b8;

     label27:
        output[$i108] = $i109;

        $i110 = dstIdx + 9;

        if b9 < 65536 goto label28;

        $i111 = 65536;

        goto label30;

     label28:
        if b9 > -65537 goto label29;

        $i111 = -65537;

        goto label30;

     label29:
        $i111 = b9;

     label30:
        output[$i110] = $i111;

        $i112 = dstIdx + 10;

        if b10 < 65536 goto label31;

        $i113 = 65536;

        goto label33;

     label31:
        if b10 > -65537 goto label32;

        $i113 = -65537;

        goto label33;

     label32:
        $i113 = b10;

     label33:
        output[$i112] = $i113;

        $i114 = dstIdx + 11;

        if b11 < 65536 goto label34;

        $i115 = 65536;

        goto label36;

     label34:
        if b11 > -65537 goto label35;

        $i115 = -65537;

        goto label36;

     label35:
        $i115 = b11;

     label36:
        output[$i114] = $i115;

        $i116 = dstIdx + 12;

        if b12 < 65536 goto label37;

        $i117 = 65536;

        goto label39;

     label37:
        if b12 > -65537 goto label38;

        $i117 = -65537;

        goto label39;

     label38:
        $i117 = b12;

     label39:
        output[$i116] = $i117;

        $i118 = dstIdx + 13;

        if b13 < 65536 goto label40;

        $i119 = 65536;

        goto label42;

     label40:
        if b13 > -65537 goto label41;

        $i119 = -65537;

        goto label42;

     label41:
        $i119 = b13;

     label42:
        output[$i118] = $i119;

        $i120 = dstIdx + 14;

        if b14 < 65536 goto label43;

        $i121 = 65536;

        goto label45;

     label43:
        if b14 > -65537 goto label44;

        $i121 = -65537;

        goto label45;

     label44:
        $i121 = b14;

     label45:
        output[$i120] = $i121;

        $i122 = dstIdx + 15;

        if b15 < 65536 goto label46;

        $i123 = 65536;

        goto label48;

     label46:
        if b15 > -65537 goto label47;

        $i123 = -65537;

        goto label48;

     label47:
        $i123 = b15;

     label48:
        output[$i122] = $i123;

        return;
    }


