    static void <clinit>()
    {
        weka.classifiers.pmml.consumer.Regression$Normalization $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        weka.classifiers.pmml.consumer.Regression$Normalization[] $r9;

        $r0 = new weka.classifiers.pmml.consumer.Regression$Normalization;

        specialinvoke $r0.<weka.classifiers.pmml.consumer.Regression$Normalization: void <init>(java.lang.String,int)>("NONE", 0);

        <weka.classifiers.pmml.consumer.Regression$Normalization: weka.classifiers.pmml.consumer.Regression$Normalization NONE> = $r0;

        $r1 = new weka.classifiers.pmml.consumer.Regression$Normalization;

        specialinvoke $r1.<weka.classifiers.pmml.consumer.Regression$Normalization: void <init>(java.lang.String,int)>("SIMPLEMAX", 1);

        <weka.classifiers.pmml.consumer.Regression$Normalization: weka.classifiers.pmml.consumer.Regression$Normalization SIMPLEMAX> = $r1;

        $r2 = new weka.classifiers.pmml.consumer.Regression$Normalization;

        specialinvoke $r2.<weka.classifiers.pmml.consumer.Regression$Normalization: void <init>(java.lang.String,int)>("SOFTMAX", 2);

        <weka.classifiers.pmml.consumer.Regression$Normalization: weka.classifiers.pmml.consumer.Regression$Normalization SOFTMAX> = $r2;

        $r3 = new weka.classifiers.pmml.consumer.Regression$Normalization;

        specialinvoke $r3.<weka.classifiers.pmml.consumer.Regression$Normalization: void <init>(java.lang.String,int)>("LOGIT", 3);

        <weka.classifiers.pmml.consumer.Regression$Normalization: weka.classifiers.pmml.consumer.Regression$Normalization LOGIT> = $r3;

        $r4 = new weka.classifiers.pmml.consumer.Regression$Normalization;

        specialinvoke $r4.<weka.classifiers.pmml.consumer.Regression$Normalization: void <init>(java.lang.String,int)>("PROBIT", 4);

        <weka.classifiers.pmml.consumer.Regression$Normalization: weka.classifiers.pmml.consumer.Regression$Normalization PROBIT> = $r4;

        $r5 = new weka.classifiers.pmml.consumer.Regression$Normalization;

        specialinvoke $r5.<weka.classifiers.pmml.consumer.Regression$Normalization: void <init>(java.lang.String,int)>("CLOGLOG", 5);

        <weka.classifiers.pmml.consumer.Regression$Normalization: weka.classifiers.pmml.consumer.Regression$Normalization CLOGLOG> = $r5;

        $r6 = new weka.classifiers.pmml.consumer.Regression$Normalization;

        specialinvoke $r6.<weka.classifiers.pmml.consumer.Regression$Normalization: void <init>(java.lang.String,int)>("EXP", 6);

        <weka.classifiers.pmml.consumer.Regression$Normalization: weka.classifiers.pmml.consumer.Regression$Normalization EXP> = $r6;

        $r7 = new weka.classifiers.pmml.consumer.Regression$Normalization;

        specialinvoke $r7.<weka.classifiers.pmml.consumer.Regression$Normalization: void <init>(java.lang.String,int)>("LOGLOG", 7);

        <weka.classifiers.pmml.consumer.Regression$Normalization: weka.classifiers.pmml.consumer.Regression$Normalization LOGLOG> = $r7;

        $r8 = new weka.classifiers.pmml.consumer.Regression$Normalization;

        specialinvoke $r8.<weka.classifiers.pmml.consumer.Regression$Normalization: void <init>(java.lang.String,int)>("CAUCHIT", 8);

        <weka.classifiers.pmml.consumer.Regression$Normalization: weka.classifiers.pmml.consumer.Regression$Normalization CAUCHIT> = $r8;

        $r9 = newarray (weka.classifiers.pmml.consumer.Regression$Normalization)[9];

        $r10 = <weka.classifiers.pmml.consumer.Regression$Normalization: weka.classifiers.pmml.consumer.Regression$Normalization NONE>;

        $r9[0] = $r10;

        $r11 = <weka.classifiers.pmml.consumer.Regression$Normalization: weka.classifiers.pmml.consumer.Regression$Normalization SIMPLEMAX>;

        $r9[1] = $r11;

        $r12 = <weka.classifiers.pmml.consumer.Regression$Normalization: weka.classifiers.pmml.consumer.Regression$Normalization SOFTMAX>;

        $r9[2] = $r12;

        $r13 = <weka.classifiers.pmml.consumer.Regression$Normalization: weka.classifiers.pmml.consumer.Regression$Normalization LOGIT>;

        $r9[3] = $r13;

        $r14 = <weka.classifiers.pmml.consumer.Regression$Normalization: weka.classifiers.pmml.consumer.Regression$Normalization PROBIT>;

        $r9[4] = $r14;

        $r15 = <weka.classifiers.pmml.consumer.Regression$Normalization: weka.classifiers.pmml.consumer.Regression$Normalization CLOGLOG>;

        $r9[5] = $r15;

        $r16 = <weka.classifiers.pmml.consumer.Regression$Normalization: weka.classifiers.pmml.consumer.Regression$Normalization EXP>;

        $r9[6] = $r16;

        $r17 = <weka.classifiers.pmml.consumer.Regression$Normalization: weka.classifiers.pmml.consumer.Regression$Normalization LOGLOG>;

        $r9[7] = $r17;

        $r18 = <weka.classifiers.pmml.consumer.Regression$Normalization: weka.classifiers.pmml.consumer.Regression$Normalization CAUCHIT>;

        $r9[8] = $r18;

        <weka.classifiers.pmml.consumer.Regression$Normalization: weka.classifiers.pmml.consumer.Regression$Normalization[] $VALUES> = $r9;

        return;
    }

    private void <init>(java.lang.String, int)
    {
        weka.classifiers.pmml.consumer.Regression$Normalization this;
        java.lang.String l1;
        int l2;

        this := @this: weka.classifiers.pmml.consumer.Regression$Normalization;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: int;

        specialinvoke this.<java.lang.Enum: void <init>(java.lang.String,int)>(l1, l2);

        return;
    }

    public static weka.classifiers.pmml.consumer.Regression$Normalization[] values()
    {
        weka.classifiers.pmml.consumer.Regression$Normalization[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <weka.classifiers.pmml.consumer.Regression$Normalization: weka.classifiers.pmml.consumer.Regression$Normalization[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (weka.classifiers.pmml.consumer.Regression$Normalization[]) $r1;

        return $r2;
    }


