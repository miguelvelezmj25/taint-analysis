    public boolean forward(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.transform.WHT32 this;
        kanzi.SliceIntArray src, dst;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3, $i4;
        int[] $r0;

        this := @this: kanzi.transform.WHT32;

        src := @parameter0: kanzi.SliceIntArray;

        dst := @parameter1: kanzi.SliceIntArray;

        $z0 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(src);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i0 = src.<kanzi.SliceIntArray: int length>;

        if $i0 == 1024 goto label2;

        return 0;

     label2:
        if src == dst goto label4;

        $z1 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(dst);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $i1 = dst.<kanzi.SliceIntArray: int index>;

        $i2 = $i1 + 1024;

        $r0 = dst.<kanzi.SliceIntArray: int[] array>;

        $i3 = lengthof $r0;

        if $i2 <= $i3 goto label4;

        return 0;

     label4:
        $i4 = this.<kanzi.transform.WHT32: int fScale>;

        $z2 = specialinvoke this.<kanzi.transform.WHT32: boolean compute(kanzi.SliceIntArray,kanzi.SliceIntArray,int)>(src, dst, $i4);

        return $z2;
    }

    private boolean compute(kanzi.SliceIntArray, kanzi.SliceIntArray, int)
    {
        kanzi.transform.WHT32 this;
        kanzi.SliceIntArray src, dst;
        int shift, $i0, $i1, $i2, $i3, $i4, $i5;
        int[] $r0, $r1, $r2, $r3;

        this := @this: kanzi.transform.WHT32;

        src := @parameter0: kanzi.SliceIntArray;

        dst := @parameter1: kanzi.SliceIntArray;

        shift := @parameter2: int;

        $r0 = src.<kanzi.SliceIntArray: int[] array>;

        $i0 = src.<kanzi.SliceIntArray: int index>;

        $r1 = this.<kanzi.transform.WHT32: int[] data>;

        staticinvoke <kanzi.transform.WHT32: void processRows(int[],int,int[])>($r0, $i0, $r1);

        $r2 = this.<kanzi.transform.WHT32: int[] data>;

        $r3 = dst.<kanzi.SliceIntArray: int[] array>;

        $i1 = dst.<kanzi.SliceIntArray: int index>;

        staticinvoke <kanzi.transform.WHT32: void processColumns(int[],int[],int,int)>($r2, $r3, $i1, shift);

        $i2 = src.<kanzi.SliceIntArray: int index>;

        $i3 = $i2 + 1024;

        src.<kanzi.SliceIntArray: int index> = $i3;

        $i4 = dst.<kanzi.SliceIntArray: int index>;

        $i5 = $i4 + 1024;

        dst.<kanzi.SliceIntArray: int index> = $i5;

        return 1;
    }

    private static void processRows(int[], int, int[])
    {
        int[] input, buffer;
        int srcIdx, si, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, dataptr#2, i#4, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, a0#171, a1#175, a2#179, a3#183, a4#187, a5#191, a6#195, a7#199, a8#203, a9#207, a10#211, a11#215, a12#219, a13#223, a14#227, a15#231, a16#235, a17#239, a18#243, a19#247, a20#251, a21#255, a22#259, a23#263, a24#267, a25#271, a26#275, a27#279, a28#283, a29#287, a30#291, a31#295, b0#299, b1#303, b2#307, b3#311, b4#315, b5#319, b6#323, b7#327, b8#331, b9#335, b10#339, b11#343, b12#347, b13#351, b14#355, b15#359, b16#363, b17#367, b18#371, b19#375, b20#379, b21#383, b22#387, b23#391, b24#395, b25#399, b26#403, b27#407, b28#411, b29#415, b30#419, b31#423, a0#427, a1#431, a2#435, a3#439, a4#443, a5#447, a6#451, a7#455, a8#459, a9#463, a10#467, a11#471, a12#475, a13#479, a14#483, a15#487, a16#491, a17#495, a18#499, a19#503, a20#507, a21#511, a22#515, a23#519, a24#523, a25#527, a26#531, a27#535, a28#539, a29#543, a30#547, a31#551, b0#555, b1#559, b2#563, b3#567, b4#571, b5#575, b6#579, b7#583, b8#587, b9#591, b10#595, b11#599, b12#603, b13#607, b14#611, b15#615, b16#619, b17#623, b18#627, b19#631, b20#635, b21#639, b22#643, b23#647, b24#651, b25#655, b26#659, b27#663, b28#667, b29#671, b30#675, b31#679, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93;

        input := @parameter0: int[];

        srcIdx := @parameter1: int;

        buffer := @parameter2: int[];

        dataptr#2 = 0;

        i#4 = 0;

     label1:
        if i#4 >= 1024 goto label2;

        si = srcIdx + i#4;

        x0 = input[si];

        $i0 = si + 1;

        x1 = input[$i0];

        $i1 = si + 2;

        x2 = input[$i1];

        $i2 = si + 3;

        x3 = input[$i2];

        $i3 = si + 4;

        x4 = input[$i3];

        $i4 = si + 5;

        x5 = input[$i4];

        $i5 = si + 6;

        x6 = input[$i5];

        $i6 = si + 7;

        x7 = input[$i6];

        $i7 = si + 8;

        x8 = input[$i7];

        $i8 = si + 9;

        x9 = input[$i8];

        $i9 = si + 10;

        x10 = input[$i9];

        $i10 = si + 11;

        x11 = input[$i10];

        $i11 = si + 12;

        x12 = input[$i11];

        $i12 = si + 13;

        x13 = input[$i12];

        $i13 = si + 14;

        x14 = input[$i13];

        $i14 = si + 15;

        x15 = input[$i14];

        $i15 = si + 16;

        x16 = input[$i15];

        $i16 = si + 17;

        x17 = input[$i16];

        $i17 = si + 18;

        x18 = input[$i17];

        $i18 = si + 19;

        x19 = input[$i18];

        $i19 = si + 20;

        x20 = input[$i19];

        $i20 = si + 21;

        x21 = input[$i20];

        $i21 = si + 22;

        x22 = input[$i21];

        $i22 = si + 23;

        x23 = input[$i22];

        $i23 = si + 24;

        x24 = input[$i23];

        $i24 = si + 25;

        x25 = input[$i24];

        $i25 = si + 26;

        x26 = input[$i25];

        $i26 = si + 27;

        x27 = input[$i26];

        $i27 = si + 28;

        x28 = input[$i27];

        $i28 = si + 29;

        x29 = input[$i28];

        $i29 = si + 30;

        x30 = input[$i29];

        $i30 = si + 31;

        x31 = input[$i30];

        a0#171 = x0 + x1;

        a1#175 = x2 + x3;

        a2#179 = x4 + x5;

        a3#183 = x6 + x7;

        a4#187 = x8 + x9;

        a5#191 = x10 + x11;

        a6#195 = x12 + x13;

        a7#199 = x14 + x15;

        a8#203 = x16 + x17;

        a9#207 = x18 + x19;

        a10#211 = x20 + x21;

        a11#215 = x22 + x23;

        a12#219 = x24 + x25;

        a13#223 = x26 + x27;

        a14#227 = x28 + x29;

        a15#231 = x30 + x31;

        a16#235 = x0 - x1;

        a17#239 = x2 - x3;

        a18#243 = x4 - x5;

        a19#247 = x6 - x7;

        a20#251 = x8 - x9;

        a21#255 = x10 - x11;

        a22#259 = x12 - x13;

        a23#263 = x14 - x15;

        a24#267 = x16 - x17;

        a25#271 = x18 - x19;

        a26#275 = x20 - x21;

        a27#279 = x22 - x23;

        a28#283 = x24 - x25;

        a29#287 = x26 - x27;

        a30#291 = x28 - x29;

        a31#295 = x30 - x31;

        b0#299 = a0#171 + a1#175;

        b1#303 = a2#179 + a3#183;

        b2#307 = a4#187 + a5#191;

        b3#311 = a6#195 + a7#199;

        b4#315 = a8#203 + a9#207;

        b5#319 = a10#211 + a11#215;

        b6#323 = a12#219 + a13#223;

        b7#327 = a14#227 + a15#231;

        b8#331 = a16#235 + a17#239;

        b9#335 = a18#243 + a19#247;

        b10#339 = a20#251 + a21#255;

        b11#343 = a22#259 + a23#263;

        b12#347 = a24#267 + a25#271;

        b13#351 = a26#275 + a27#279;

        b14#355 = a28#283 + a29#287;

        b15#359 = a30#291 + a31#295;

        b16#363 = a0#171 - a1#175;

        b17#367 = a2#179 - a3#183;

        b18#371 = a4#187 - a5#191;

        b19#375 = a6#195 - a7#199;

        b20#379 = a8#203 - a9#207;

        b21#383 = a10#211 - a11#215;

        b22#387 = a12#219 - a13#223;

        b23#391 = a14#227 - a15#231;

        b24#395 = a16#235 - a17#239;

        b25#399 = a18#243 - a19#247;

        b26#403 = a20#251 - a21#255;

        b27#407 = a22#259 - a23#263;

        b28#411 = a24#267 - a25#271;

        b29#415 = a26#275 - a27#279;

        b30#419 = a28#283 - a29#287;

        b31#423 = a30#291 - a31#295;

        a0#427 = b0#299 + b1#303;

        a1#431 = b2#307 + b3#311;

        a2#435 = b4#315 + b5#319;

        a3#439 = b6#323 + b7#327;

        a4#443 = b8#331 + b9#335;

        a5#447 = b10#339 + b11#343;

        a6#451 = b12#347 + b13#351;

        a7#455 = b14#355 + b15#359;

        a8#459 = b16#363 + b17#367;

        a9#463 = b18#371 + b19#375;

        a10#467 = b20#379 + b21#383;

        a11#471 = b22#387 + b23#391;

        a12#475 = b24#395 + b25#399;

        a13#479 = b26#403 + b27#407;

        a14#483 = b28#411 + b29#415;

        a15#487 = b30#419 + b31#423;

        a16#491 = b0#299 - b1#303;

        a17#495 = b2#307 - b3#311;

        a18#499 = b4#315 - b5#319;

        a19#503 = b6#323 - b7#327;

        a20#507 = b8#331 - b9#335;

        a21#511 = b10#339 - b11#343;

        a22#515 = b12#347 - b13#351;

        a23#519 = b14#355 - b15#359;

        a24#523 = b16#363 - b17#367;

        a25#527 = b18#371 - b19#375;

        a26#531 = b20#379 - b21#383;

        a27#535 = b22#387 - b23#391;

        a28#539 = b24#395 - b25#399;

        a29#543 = b26#403 - b27#407;

        a30#547 = b28#411 - b29#415;

        a31#551 = b30#419 - b31#423;

        b0#555 = a0#427 + a1#431;

        b1#559 = a2#435 + a3#439;

        b2#563 = a4#443 + a5#447;

        b3#567 = a6#451 + a7#455;

        b4#571 = a8#459 + a9#463;

        b5#575 = a10#467 + a11#471;

        b6#579 = a12#475 + a13#479;

        b7#583 = a14#483 + a15#487;

        b8#587 = a16#491 + a17#495;

        b9#591 = a18#499 + a19#503;

        b10#595 = a20#507 + a21#511;

        b11#599 = a22#515 + a23#519;

        b12#603 = a24#523 + a25#527;

        b13#607 = a26#531 + a27#535;

        b14#611 = a28#539 + a29#543;

        b15#615 = a30#547 + a31#551;

        b16#619 = a0#427 - a1#431;

        b17#623 = a2#435 - a3#439;

        b18#627 = a4#443 - a5#447;

        b19#631 = a6#451 - a7#455;

        b20#635 = a8#459 - a9#463;

        b21#639 = a10#467 - a11#471;

        b22#643 = a12#475 - a13#479;

        b23#647 = a14#483 - a15#487;

        b24#651 = a16#491 - a17#495;

        b25#655 = a18#499 - a19#503;

        b26#659 = a20#507 - a21#511;

        b27#663 = a22#515 - a23#519;

        b28#667 = a24#523 - a25#527;

        b29#671 = a26#531 - a27#535;

        b30#675 = a28#539 - a29#543;

        b31#679 = a30#547 - a31#551;

        $i31 = b0#555 + b1#559;

        buffer[dataptr#2] = $i31;

        $i32 = dataptr#2 + 1;

        $i33 = b2#563 + b3#567;

        buffer[$i32] = $i33;

        $i34 = dataptr#2 + 2;

        $i35 = b4#571 + b5#575;

        buffer[$i34] = $i35;

        $i36 = dataptr#2 + 3;

        $i37 = b6#579 + b7#583;

        buffer[$i36] = $i37;

        $i38 = dataptr#2 + 4;

        $i39 = b8#587 + b9#591;

        buffer[$i38] = $i39;

        $i40 = dataptr#2 + 5;

        $i41 = b10#595 + b11#599;

        buffer[$i40] = $i41;

        $i42 = dataptr#2 + 6;

        $i43 = b12#603 + b13#607;

        buffer[$i42] = $i43;

        $i44 = dataptr#2 + 7;

        $i45 = b14#611 + b15#615;

        buffer[$i44] = $i45;

        $i46 = dataptr#2 + 8;

        $i47 = b16#619 + b17#623;

        buffer[$i46] = $i47;

        $i48 = dataptr#2 + 9;

        $i49 = b18#627 + b19#631;

        buffer[$i48] = $i49;

        $i50 = dataptr#2 + 10;

        $i51 = b20#635 + b21#639;

        buffer[$i50] = $i51;

        $i52 = dataptr#2 + 11;

        $i53 = b22#643 + b23#647;

        buffer[$i52] = $i53;

        $i54 = dataptr#2 + 12;

        $i55 = b24#651 + b25#655;

        buffer[$i54] = $i55;

        $i56 = dataptr#2 + 13;

        $i57 = b26#659 + b27#663;

        buffer[$i56] = $i57;

        $i58 = dataptr#2 + 14;

        $i59 = b28#667 + b29#671;

        buffer[$i58] = $i59;

        $i60 = dataptr#2 + 15;

        $i61 = b30#675 + b31#679;

        buffer[$i60] = $i61;

        $i62 = dataptr#2 + 16;

        $i63 = b0#555 - b1#559;

        buffer[$i62] = $i63;

        $i64 = dataptr#2 + 17;

        $i65 = b2#563 - b3#567;

        buffer[$i64] = $i65;

        $i66 = dataptr#2 + 18;

        $i67 = b4#571 - b5#575;

        buffer[$i66] = $i67;

        $i68 = dataptr#2 + 19;

        $i69 = b6#579 - b7#583;

        buffer[$i68] = $i69;

        $i70 = dataptr#2 + 20;

        $i71 = b8#587 - b9#591;

        buffer[$i70] = $i71;

        $i72 = dataptr#2 + 21;

        $i73 = b10#595 - b11#599;

        buffer[$i72] = $i73;

        $i74 = dataptr#2 + 22;

        $i75 = b12#603 - b13#607;

        buffer[$i74] = $i75;

        $i76 = dataptr#2 + 23;

        $i77 = b14#611 - b15#615;

        buffer[$i76] = $i77;

        $i78 = dataptr#2 + 24;

        $i79 = b16#619 - b17#623;

        buffer[$i78] = $i79;

        $i80 = dataptr#2 + 25;

        $i81 = b18#627 - b19#631;

        buffer[$i80] = $i81;

        $i82 = dataptr#2 + 26;

        $i83 = b20#635 - b21#639;

        buffer[$i82] = $i83;

        $i84 = dataptr#2 + 27;

        $i85 = b22#643 - b23#647;

        buffer[$i84] = $i85;

        $i86 = dataptr#2 + 28;

        $i87 = b24#651 - b25#655;

        buffer[$i86] = $i87;

        $i88 = dataptr#2 + 29;

        $i89 = b26#659 - b27#663;

        buffer[$i88] = $i89;

        $i90 = dataptr#2 + 30;

        $i91 = b28#667 - b29#671;

        buffer[$i90] = $i91;

        $i92 = dataptr#2 + 31;

        $i93 = b30#675 - b31#679;

        buffer[$i92] = $i93;

        dataptr#2 = dataptr#2 + 32;

        i#4 = i#4 + 32;

        goto label1;

     label2:
        return;
    }

    private static void processColumns(int[], int[], int, int)
    {
        int[] buffer, output;
        int dstIdx, shift, adjust, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, di, dataptr#2, $i0, i#9, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, a0#173, a1#177, a2#181, a3#185, a4#189, a5#193, a6#197, a7#201, a8#205, a9#209, a10#213, a11#217, a12#221, a13#225, a14#229, a15#233, a16#237, a17#241, a18#245, a19#249, a20#253, a21#257, a22#261, a23#265, a24#269, a25#273, a26#277, a27#281, a28#285, a29#289, a30#293, a31#297, b0#301, b1#305, b2#309, b3#313, b4#317, b5#321, b6#325, b7#329, b8#333, b9#337, b10#341, b11#345, b12#349, b13#353, b14#357, b15#361, b16#365, b17#369, b18#373, b19#377, b20#381, b21#385, b22#389, b23#393, b24#397, b25#401, b26#405, b27#409, b28#413, b29#417, b30#421, b31#425, a0#429, a1#433, a2#437, a3#441, a4#445, a5#449, a6#453, a7#457, a8#461, a9#465, a10#469, a11#473, a12#477, a13#481, a14#485, a15#489, a16#493, a17#497, a18#501, a19#505, a20#509, a21#513, a22#517, a23#521, a24#525, a25#529, a26#533, a27#537, a28#541, a29#545, a30#549, a31#553, b0#557, b1#561, b2#565, b3#569, b4#573, b5#577, b6#581, b7#585, b8#589, b9#593, b10#597, b11#601, b12#605, b13#609, b14#613, b15#617, b16#621, b17#625, b18#629, b19#633, b20#637, b21#641, b22#645, b23#649, b24#653, b25#657, b26#661, b27#665, b28#669, b29#673, b30#677, b31#681, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $i155, $i156, $i157, $i158;

        buffer := @parameter0: int[];

        output := @parameter1: int[];

        dstIdx := @parameter2: int;

        shift := @parameter3: int;

        dataptr#2 = 0;

        $i0 = 1 << shift;

        adjust = $i0 >> 1;

        i#9 = 0;

     label1:
        if i#9 >= 32 goto label2;

        x0 = buffer[dataptr#2];

        $i1 = dataptr#2 + 32;

        x1 = buffer[$i1];

        $i2 = dataptr#2 + 64;

        x2 = buffer[$i2];

        $i3 = dataptr#2 + 96;

        x3 = buffer[$i3];

        $i4 = dataptr#2 + 128;

        x4 = buffer[$i4];

        $i5 = dataptr#2 + 160;

        x5 = buffer[$i5];

        $i6 = dataptr#2 + 192;

        x6 = buffer[$i6];

        $i7 = dataptr#2 + 224;

        x7 = buffer[$i7];

        $i8 = dataptr#2 + 256;

        x8 = buffer[$i8];

        $i9 = dataptr#2 + 288;

        x9 = buffer[$i9];

        $i10 = dataptr#2 + 320;

        x10 = buffer[$i10];

        $i11 = dataptr#2 + 352;

        x11 = buffer[$i11];

        $i12 = dataptr#2 + 384;

        x12 = buffer[$i12];

        $i13 = dataptr#2 + 416;

        x13 = buffer[$i13];

        $i14 = dataptr#2 + 448;

        x14 = buffer[$i14];

        $i15 = dataptr#2 + 480;

        x15 = buffer[$i15];

        $i16 = dataptr#2 + 512;

        x16 = buffer[$i16];

        $i17 = dataptr#2 + 544;

        x17 = buffer[$i17];

        $i18 = dataptr#2 + 576;

        x18 = buffer[$i18];

        $i19 = dataptr#2 + 608;

        x19 = buffer[$i19];

        $i20 = dataptr#2 + 640;

        x20 = buffer[$i20];

        $i21 = dataptr#2 + 672;

        x21 = buffer[$i21];

        $i22 = dataptr#2 + 704;

        x22 = buffer[$i22];

        $i23 = dataptr#2 + 736;

        x23 = buffer[$i23];

        $i24 = dataptr#2 + 768;

        x24 = buffer[$i24];

        $i25 = dataptr#2 + 800;

        x25 = buffer[$i25];

        $i26 = dataptr#2 + 832;

        x26 = buffer[$i26];

        $i27 = dataptr#2 + 864;

        x27 = buffer[$i27];

        $i28 = dataptr#2 + 896;

        x28 = buffer[$i28];

        $i29 = dataptr#2 + 928;

        x29 = buffer[$i29];

        $i30 = dataptr#2 + 960;

        x30 = buffer[$i30];

        $i31 = dataptr#2 + 992;

        x31 = buffer[$i31];

        a0#173 = x0 + x1;

        a1#177 = x2 + x3;

        a2#181 = x4 + x5;

        a3#185 = x6 + x7;

        a4#189 = x8 + x9;

        a5#193 = x10 + x11;

        a6#197 = x12 + x13;

        a7#201 = x14 + x15;

        a8#205 = x16 + x17;

        a9#209 = x18 + x19;

        a10#213 = x20 + x21;

        a11#217 = x22 + x23;

        a12#221 = x24 + x25;

        a13#225 = x26 + x27;

        a14#229 = x28 + x29;

        a15#233 = x30 + x31;

        a16#237 = x0 - x1;

        a17#241 = x2 - x3;

        a18#245 = x4 - x5;

        a19#249 = x6 - x7;

        a20#253 = x8 - x9;

        a21#257 = x10 - x11;

        a22#261 = x12 - x13;

        a23#265 = x14 - x15;

        a24#269 = x16 - x17;

        a25#273 = x18 - x19;

        a26#277 = x20 - x21;

        a27#281 = x22 - x23;

        a28#285 = x24 - x25;

        a29#289 = x26 - x27;

        a30#293 = x28 - x29;

        a31#297 = x30 - x31;

        b0#301 = a0#173 + a1#177;

        b1#305 = a2#181 + a3#185;

        b2#309 = a4#189 + a5#193;

        b3#313 = a6#197 + a7#201;

        b4#317 = a8#205 + a9#209;

        b5#321 = a10#213 + a11#217;

        b6#325 = a12#221 + a13#225;

        b7#329 = a14#229 + a15#233;

        b8#333 = a16#237 + a17#241;

        b9#337 = a18#245 + a19#249;

        b10#341 = a20#253 + a21#257;

        b11#345 = a22#261 + a23#265;

        b12#349 = a24#269 + a25#273;

        b13#353 = a26#277 + a27#281;

        b14#357 = a28#285 + a29#289;

        b15#361 = a30#293 + a31#297;

        b16#365 = a0#173 - a1#177;

        b17#369 = a2#181 - a3#185;

        b18#373 = a4#189 - a5#193;

        b19#377 = a6#197 - a7#201;

        b20#381 = a8#205 - a9#209;

        b21#385 = a10#213 - a11#217;

        b22#389 = a12#221 - a13#225;

        b23#393 = a14#229 - a15#233;

        b24#397 = a16#237 - a17#241;

        b25#401 = a18#245 - a19#249;

        b26#405 = a20#253 - a21#257;

        b27#409 = a22#261 - a23#265;

        b28#413 = a24#269 - a25#273;

        b29#417 = a26#277 - a27#281;

        b30#421 = a28#285 - a29#289;

        b31#425 = a30#293 - a31#297;

        a0#429 = b0#301 + b1#305;

        a1#433 = b2#309 + b3#313;

        a2#437 = b4#317 + b5#321;

        a3#441 = b6#325 + b7#329;

        a4#445 = b8#333 + b9#337;

        a5#449 = b10#341 + b11#345;

        a6#453 = b12#349 + b13#353;

        a7#457 = b14#357 + b15#361;

        a8#461 = b16#365 + b17#369;

        a9#465 = b18#373 + b19#377;

        a10#469 = b20#381 + b21#385;

        a11#473 = b22#389 + b23#393;

        a12#477 = b24#397 + b25#401;

        a13#481 = b26#405 + b27#409;

        a14#485 = b28#413 + b29#417;

        a15#489 = b30#421 + b31#425;

        a16#493 = b0#301 - b1#305;

        a17#497 = b2#309 - b3#313;

        a18#501 = b4#317 - b5#321;

        a19#505 = b6#325 - b7#329;

        a20#509 = b8#333 - b9#337;

        a21#513 = b10#341 - b11#345;

        a22#517 = b12#349 - b13#353;

        a23#521 = b14#357 - b15#361;

        a24#525 = b16#365 - b17#369;

        a25#529 = b18#373 - b19#377;

        a26#533 = b20#381 - b21#385;

        a27#537 = b22#389 - b23#393;

        a28#541 = b24#397 - b25#401;

        a29#545 = b26#405 - b27#409;

        a30#549 = b28#413 - b29#417;

        a31#553 = b30#421 - b31#425;

        b0#557 = a0#429 + a1#433;

        b1#561 = a2#437 + a3#441;

        b2#565 = a4#445 + a5#449;

        b3#569 = a6#453 + a7#457;

        b4#573 = a8#461 + a9#465;

        b5#577 = a10#469 + a11#473;

        b6#581 = a12#477 + a13#481;

        b7#585 = a14#485 + a15#489;

        b8#589 = a16#493 + a17#497;

        b9#593 = a18#501 + a19#505;

        b10#597 = a20#509 + a21#513;

        b11#601 = a22#517 + a23#521;

        b12#605 = a24#525 + a25#529;

        b13#609 = a26#533 + a27#537;

        b14#613 = a28#541 + a29#545;

        b15#617 = a30#549 + a31#553;

        b16#621 = a0#429 - a1#433;

        b17#625 = a2#437 - a3#441;

        b18#629 = a4#445 - a5#449;

        b19#633 = a6#453 - a7#457;

        b20#637 = a8#461 - a9#465;

        b21#641 = a10#469 - a11#473;

        b22#645 = a12#477 - a13#481;

        b23#649 = a14#485 - a15#489;

        b24#653 = a16#493 - a17#497;

        b25#657 = a18#501 - a19#505;

        b26#661 = a20#509 - a21#513;

        b27#665 = a22#517 - a23#521;

        b28#669 = a24#525 - a25#529;

        b29#673 = a26#533 - a27#537;

        b30#677 = a28#541 - a29#545;

        b31#681 = a30#549 - a31#553;

        di = dstIdx + i#9;

        $i32 = b0#557 + b1#561;

        $i33 = $i32 + adjust;

        $i34 = $i33 >> shift;

        output[di] = $i34;

        $i35 = di + 32;

        $i36 = b2#565 + b3#569;

        $i37 = $i36 + adjust;

        $i38 = $i37 >> shift;

        output[$i35] = $i38;

        $i39 = di + 64;

        $i40 = b4#573 + b5#577;

        $i41 = $i40 + adjust;

        $i42 = $i41 >> shift;

        output[$i39] = $i42;

        $i43 = di + 96;

        $i44 = b6#581 + b7#585;

        $i45 = $i44 + adjust;

        $i46 = $i45 >> shift;

        output[$i43] = $i46;

        $i47 = di + 128;

        $i48 = b8#589 + b9#593;

        $i49 = $i48 + adjust;

        $i50 = $i49 >> shift;

        output[$i47] = $i50;

        $i51 = di + 160;

        $i52 = b10#597 + b11#601;

        $i53 = $i52 + adjust;

        $i54 = $i53 >> shift;

        output[$i51] = $i54;

        $i55 = di + 192;

        $i56 = b12#605 + b13#609;

        $i57 = $i56 + adjust;

        $i58 = $i57 >> shift;

        output[$i55] = $i58;

        $i59 = di + 224;

        $i60 = b14#613 + b15#617;

        $i61 = $i60 + adjust;

        $i62 = $i61 >> shift;

        output[$i59] = $i62;

        $i63 = di + 256;

        $i64 = b16#621 + b17#625;

        $i65 = $i64 + adjust;

        $i66 = $i65 >> shift;

        output[$i63] = $i66;

        $i67 = di + 288;

        $i68 = b18#629 + b19#633;

        $i69 = $i68 + adjust;

        $i70 = $i69 >> shift;

        output[$i67] = $i70;

        $i71 = di + 320;

        $i72 = b20#637 + b21#641;

        $i73 = $i72 + adjust;

        $i74 = $i73 >> shift;

        output[$i71] = $i74;

        $i75 = di + 352;

        $i76 = b22#645 + b23#649;

        $i77 = $i76 + adjust;

        $i78 = $i77 >> shift;

        output[$i75] = $i78;

        $i79 = di + 384;

        $i80 = b24#653 + b25#657;

        $i81 = $i80 + adjust;

        $i82 = $i81 >> shift;

        output[$i79] = $i82;

        $i83 = di + 416;

        $i84 = b26#661 + b27#665;

        $i85 = $i84 + adjust;

        $i86 = $i85 >> shift;

        output[$i83] = $i86;

        $i87 = di + 448;

        $i88 = b28#669 + b29#673;

        $i89 = $i88 + adjust;

        $i90 = $i89 >> shift;

        output[$i87] = $i90;

        $i91 = di + 480;

        $i92 = b30#677 + b31#681;

        $i93 = $i92 + adjust;

        $i94 = $i93 >> shift;

        output[$i91] = $i94;

        $i95 = di + 512;

        $i96 = b0#557 - b1#561;

        $i97 = $i96 + adjust;

        $i98 = $i97 >> shift;

        output[$i95] = $i98;

        $i99 = di + 544;

        $i100 = b2#565 - b3#569;

        $i101 = $i100 + adjust;

        $i102 = $i101 >> shift;

        output[$i99] = $i102;

        $i103 = di + 576;

        $i104 = b4#573 - b5#577;

        $i105 = $i104 + adjust;

        $i106 = $i105 >> shift;

        output[$i103] = $i106;

        $i107 = di + 608;

        $i108 = b6#581 - b7#585;

        $i109 = $i108 + adjust;

        $i110 = $i109 >> shift;

        output[$i107] = $i110;

        $i111 = di + 640;

        $i112 = b8#589 - b9#593;

        $i113 = $i112 + adjust;

        $i114 = $i113 >> shift;

        output[$i111] = $i114;

        $i115 = di + 672;

        $i116 = b10#597 - b11#601;

        $i117 = $i116 + adjust;

        $i118 = $i117 >> shift;

        output[$i115] = $i118;

        $i119 = di + 704;

        $i120 = b12#605 - b13#609;

        $i121 = $i120 + adjust;

        $i122 = $i121 >> shift;

        output[$i119] = $i122;

        $i123 = di + 736;

        $i124 = b14#613 - b15#617;

        $i125 = $i124 + adjust;

        $i126 = $i125 >> shift;

        output[$i123] = $i126;

        $i127 = di + 768;

        $i128 = b16#621 - b17#625;

        $i129 = $i128 + adjust;

        $i130 = $i129 >> shift;

        output[$i127] = $i130;

        $i131 = di + 800;

        $i132 = b18#629 - b19#633;

        $i133 = $i132 + adjust;

        $i134 = $i133 >> shift;

        output[$i131] = $i134;

        $i135 = di + 832;

        $i136 = b20#637 - b21#641;

        $i137 = $i136 + adjust;

        $i138 = $i137 >> shift;

        output[$i135] = $i138;

        $i139 = di + 864;

        $i140 = b22#645 - b23#649;

        $i141 = $i140 + adjust;

        $i142 = $i141 >> shift;

        output[$i139] = $i142;

        $i143 = di + 896;

        $i144 = b24#653 - b25#657;

        $i145 = $i144 + adjust;

        $i146 = $i145 >> shift;

        output[$i143] = $i146;

        $i147 = di + 928;

        $i148 = b26#661 - b27#665;

        $i149 = $i148 + adjust;

        $i150 = $i149 >> shift;

        output[$i147] = $i150;

        $i151 = di + 960;

        $i152 = b28#669 - b29#673;

        $i153 = $i152 + adjust;

        $i154 = $i153 >> shift;

        output[$i151] = $i154;

        $i155 = di + 992;

        $i156 = b30#677 - b31#681;

        $i157 = $i156 + adjust;

        $i158 = $i157 >> shift;

        output[$i155] = $i158;

        dataptr#2 = dataptr#2 + 1;

        i#9 = i#9 + 1;

        goto label1;

     label2:
        return;
    }

    public boolean inverse(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.transform.WHT32 this;
        kanzi.SliceIntArray src, dst;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3, $i4;
        int[] $r0;

        this := @this: kanzi.transform.WHT32;

        src := @parameter0: kanzi.SliceIntArray;

        dst := @parameter1: kanzi.SliceIntArray;

        $z0 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(src);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i0 = src.<kanzi.SliceIntArray: int length>;

        if $i0 == 1024 goto label2;

        return 0;

     label2:
        if src == dst goto label4;

        $z1 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(dst);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $i1 = dst.<kanzi.SliceIntArray: int index>;

        $i2 = $i1 + 1024;

        $r0 = dst.<kanzi.SliceIntArray: int[] array>;

        $i3 = lengthof $r0;

        if $i2 <= $i3 goto label4;

        return 0;

     label4:
        $i4 = this.<kanzi.transform.WHT32: int iScale>;

        $z2 = specialinvoke this.<kanzi.transform.WHT32: boolean compute(kanzi.SliceIntArray,kanzi.SliceIntArray,int)>(src, dst, $i4);

        return $z2;
    }


