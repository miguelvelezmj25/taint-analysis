    public void <init>(int, boolean)
    {
        kanzi.util.QuadTreeGenerator this;
        int minNodeDim;
        boolean isRGB;

        this := @this: kanzi.util.QuadTreeGenerator;

        minNodeDim := @parameter0: int;

        isRGB := @parameter1: boolean;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<kanzi.util.QuadTreeGenerator: int minNodeDim> = minNodeDim;

        this.<kanzi.util.QuadTreeGenerator: boolean isRGB> = isRGB;

        return;
    }

    public static kanzi.util.QuadTreeGenerator$Node getNode(kanzi.util.QuadTreeGenerator$Node, int, int, int, int, boolean)
    {
        kanzi.util.QuadTreeGenerator$Node parent, $r0;
        int x, y, w, h;
        boolean isRGB;

        parent := @parameter0: kanzi.util.QuadTreeGenerator$Node;

        x := @parameter1: int;

        y := @parameter2: int;

        w := @parameter3: int;

        h := @parameter4: int;

        isRGB := @parameter5: boolean;

        $r0 = new kanzi.util.QuadTreeGenerator$Node;

        specialinvoke $r0.<kanzi.util.QuadTreeGenerator$Node: void <init>(kanzi.util.QuadTreeGenerator$Node,int,int,int,int,boolean,kanzi.util.QuadTreeGenerator$1)>(parent, x, y, w, h, isRGB, null);

        return $r0;
    }

    public java.util.Collection decomposeNodes(java.util.Collection, int[], int, int)
    {
        kanzi.util.QuadTreeGenerator this;
        java.util.Collection list, $r1;
        int[] input;
        int nbNodes, stride, $i0, $i1;
        java.lang.IllegalArgumentException $r0;

        this := @this: kanzi.util.QuadTreeGenerator;

        list := @parameter0: java.util.Collection;

        input := @parameter1: int[];

        nbNodes := @parameter2: int;

        stride := @parameter3: int;

        $i0 = interfaceinvoke list.<java.util.Collection: int size()>();

        if nbNodes >= $i0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The target number of nodes must be at least list.size()");

        throw $r0;

     label1:
        $i1 = interfaceinvoke list.<java.util.Collection: int size()>();

        if nbNodes != $i1 goto label2;

        return list;

     label2:
        $r1 = virtualinvoke this.<kanzi.util.QuadTreeGenerator: java.util.Collection decompose(java.util.Collection,int[],int,int,int)>(list, input, nbNodes, -1, stride);

        return $r1;
    }

    protected java.util.Collection decompose(java.util.Collection, int[], int, int, int)
    {
        kanzi.util.QuadTreeGenerator this;
        java.util.Collection list;
        int[] input;
        int nbNodes, variance, stride, pw, ph, px, py, cw, ch, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22;
        java.util.TreeSet processed, nodes, $r0, $r1;
        java.util.Iterator l8;
        kanzi.util.QuadTreeGenerator$Node node, parent, node1, node2, node3, node4;
        boolean $z0, $z5, $z6, $z7, $z8;
        java.lang.Object $r2, $r3;

        this := @this: kanzi.util.QuadTreeGenerator;

        list := @parameter0: java.util.Collection;

        input := @parameter1: int[];

        nbNodes := @parameter2: int;

        variance := @parameter3: int;

        stride := @parameter4: int;

        if list != null goto label01;

        return null;

     label01:
        $r0 = new java.util.TreeSet;

        specialinvoke $r0.<java.util.TreeSet: void <init>()>();

        processed = $r0;

        $r1 = new java.util.TreeSet;

        specialinvoke $r1.<java.util.TreeSet: void <init>()>();

        nodes = $r1;

        l8 = interfaceinvoke list.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke l8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r2 = interfaceinvoke l8.<java.util.Iterator: java.lang.Object next()>();

        node = (kanzi.util.QuadTreeGenerator$Node) $r2;

        $i0 = node.<kanzi.util.QuadTreeGenerator$Node: int w>;

        $i1 = this.<kanzi.util.QuadTreeGenerator: int minNodeDim>;

        if $i0 <= $i1 goto label03;

        $i2 = node.<kanzi.util.QuadTreeGenerator$Node: int h>;

        $i3 = this.<kanzi.util.QuadTreeGenerator: int minNodeDim>;

        if $i2 > $i3 goto label04;

     label03:
        virtualinvoke processed.<java.util.TreeSet: boolean add(java.lang.Object)>(node);

        goto label05;

     label04:
        virtualinvoke nodes.<java.util.TreeSet: boolean add(java.lang.Object)>(node);

     label05:
        goto label02;

     label06:
        $i4 = virtualinvoke nodes.<java.util.TreeSet: int size()>();

        if $i4 <= 0 goto label11;

        if nbNodes < 0 goto label07;

        $i5 = virtualinvoke processed.<java.util.TreeSet: int size()>();

        $i6 = virtualinvoke nodes.<java.util.TreeSet: int size()>();

        $i7 = $i5 + $i6;

        if $i7 >= nbNodes goto label11;

     label07:
        $r3 = virtualinvoke nodes.<java.util.TreeSet: java.lang.Object pollFirst()>();

        parent = (kanzi.util.QuadTreeGenerator$Node) $r3;

        $i8 = parent.<kanzi.util.QuadTreeGenerator$Node: int w>;

        $i9 = this.<kanzi.util.QuadTreeGenerator: int minNodeDim>;

        if $i8 <= $i9 goto label08;

        $i10 = parent.<kanzi.util.QuadTreeGenerator$Node: int h>;

        $i11 = this.<kanzi.util.QuadTreeGenerator: int minNodeDim>;

        if $i10 > $i11 goto label09;

     label08:
        virtualinvoke processed.<java.util.TreeSet: boolean add(java.lang.Object)>(parent);

        goto label06;

     label09:
        if variance < 0 goto label10;

        $i12 = parent.<kanzi.util.QuadTreeGenerator$Node: int variance>;

        if $i12 > variance goto label10;

        virtualinvoke processed.<java.util.TreeSet: boolean add(java.lang.Object)>(parent);

        goto label06;

     label10:
        pw = parent.<kanzi.util.QuadTreeGenerator$Node: int w>;

        ph = parent.<kanzi.util.QuadTreeGenerator$Node: int h>;

        px = parent.<kanzi.util.QuadTreeGenerator$Node: int x>;

        py = parent.<kanzi.util.QuadTreeGenerator$Node: int y>;

        $i13 = pw + 1;

        cw = $i13 >> 1;

        $i14 = ph + 1;

        ch = $i14 >> 1;

        $z5 = this.<kanzi.util.QuadTreeGenerator: boolean isRGB>;

        node1 = staticinvoke <kanzi.util.QuadTreeGenerator: kanzi.util.QuadTreeGenerator$Node getNode(kanzi.util.QuadTreeGenerator$Node,int,int,int,int,boolean)>(parent, px, py, cw, ch, $z5);

        $i15 = px + pw;

        $i16 = $i15 - cw;

        $z6 = this.<kanzi.util.QuadTreeGenerator: boolean isRGB>;

        node2 = staticinvoke <kanzi.util.QuadTreeGenerator: kanzi.util.QuadTreeGenerator$Node getNode(kanzi.util.QuadTreeGenerator$Node,int,int,int,int,boolean)>(parent, $i16, py, cw, ch, $z6);

        $i17 = py + ph;

        $i18 = $i17 - ch;

        $z7 = this.<kanzi.util.QuadTreeGenerator: boolean isRGB>;

        node3 = staticinvoke <kanzi.util.QuadTreeGenerator: kanzi.util.QuadTreeGenerator$Node getNode(kanzi.util.QuadTreeGenerator$Node,int,int,int,int,boolean)>(parent, px, $i18, cw, ch, $z7);

        $i19 = px + pw;

        $i20 = $i19 - cw;

        $i21 = py + ph;

        $i22 = $i21 - ch;

        $z8 = this.<kanzi.util.QuadTreeGenerator: boolean isRGB>;

        node4 = staticinvoke <kanzi.util.QuadTreeGenerator: kanzi.util.QuadTreeGenerator$Node getNode(kanzi.util.QuadTreeGenerator$Node,int,int,int,int,boolean)>(parent, $i20, $i22, cw, ch, $z8);

        virtualinvoke node1.<kanzi.util.QuadTreeGenerator$Node: int computeVariance(int[],int)>(input, stride);

        virtualinvoke node2.<kanzi.util.QuadTreeGenerator$Node: int computeVariance(int[],int)>(input, stride);

        virtualinvoke node3.<kanzi.util.QuadTreeGenerator$Node: int computeVariance(int[],int)>(input, stride);

        virtualinvoke node4.<kanzi.util.QuadTreeGenerator$Node: int computeVariance(int[],int)>(input, stride);

        virtualinvoke nodes.<java.util.TreeSet: boolean add(java.lang.Object)>(node1);

        virtualinvoke nodes.<java.util.TreeSet: boolean add(java.lang.Object)>(node2);

        virtualinvoke nodes.<java.util.TreeSet: boolean add(java.lang.Object)>(node3);

        virtualinvoke nodes.<java.util.TreeSet: boolean add(java.lang.Object)>(node4);

        goto label06;

     label11:
        virtualinvoke nodes.<java.util.TreeSet: boolean addAll(java.util.Collection)>(processed);

        interfaceinvoke list.<java.util.Collection: void clear()>();

        interfaceinvoke list.<java.util.Collection: boolean addAll(java.util.Collection)>(nodes);

        return list;
    }


