    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "com/sleepycat/je/dbi/INList";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sleepycat.je.dbi.INList: boolean $assertionsDisabled> = $z1;

        return;
    }

    void <init>(com.sleepycat.je.dbi.EnvironmentImpl)
    {
        com.sleepycat.je.dbi.INList this;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        java.util.concurrent.ConcurrentHashMap $r0;

        this := @this: com.sleepycat.je.dbi.INList;

        envImpl := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        specialinvoke this.<java.lang.Object: void <init>()>();

        specialinvoke this.<com.sleepycat.je.dbi.INList: void init(com.sleepycat.je.dbi.EnvironmentImpl)>(envImpl);

        $r0 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        this.<com.sleepycat.je.dbi.INList: java.util.concurrent.ConcurrentMap ins> = $r0;

        this.<com.sleepycat.je.dbi.INList: boolean enabled> = 0;

        return;
    }

    private void init(com.sleepycat.je.dbi.EnvironmentImpl)
    {
        com.sleepycat.je.dbi.INList this;
        com.sleepycat.je.dbi.EnvironmentImpl environmentImpl;
        java.util.concurrent.atomic.AtomicLong $r0, $r1, $r2, $r3;

        this := @this: com.sleepycat.je.dbi.INList;

        environmentImpl := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        this.<com.sleepycat.je.dbi.INList: com.sleepycat.je.dbi.EnvironmentImpl envImpl> = environmentImpl;

        this.<com.sleepycat.je.dbi.INList: boolean recalcInProgress> = 0;

        this.<com.sleepycat.je.dbi.INList: boolean recalcToggle> = 0;

        this.<com.sleepycat.je.dbi.INList: boolean recalcConsistent> = 1;

        $r0 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        this.<com.sleepycat.je.dbi.INList: java.util.concurrent.atomic.AtomicLong recalcTotal> = $r0;

        $r1 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        this.<com.sleepycat.je.dbi.INList: java.util.concurrent.atomic.AtomicLong nCachedUpperINs> = $r1;

        $r2 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        this.<com.sleepycat.je.dbi.INList: java.util.concurrent.atomic.AtomicLong nCachedBINs> = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        this.<com.sleepycat.je.dbi.INList: java.util.concurrent.atomic.AtomicLong nCachedBINDeltas> = $r3;

        return;
    }

    public com.sleepycat.je.utilint.StatGroup loadStats()
    {
        com.sleepycat.je.dbi.INList this;
        com.sleepycat.je.utilint.StatGroup stats, $r0;
        long istat, bstat, bdstat;
        java.util.concurrent.atomic.AtomicLong $r1, $r2, $r3;
        com.sleepycat.je.utilint.LongStat $r4, $r6, $r8;
        com.sleepycat.je.utilint.StatDefinition $r5, $r7, $r9;

        this := @this: com.sleepycat.je.dbi.INList;

        $r0 = new com.sleepycat.je.utilint.StatGroup;

        specialinvoke $r0.<com.sleepycat.je.utilint.StatGroup: void <init>(java.lang.String,java.lang.String)>("Cache", "Current size, allocations, and eviction activity.");

        stats = $r0;

        $r1 = this.<com.sleepycat.je.dbi.INList: java.util.concurrent.atomic.AtomicLong nCachedUpperINs>;

        istat = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $r2 = this.<com.sleepycat.je.dbi.INList: java.util.concurrent.atomic.AtomicLong nCachedBINs>;

        bstat = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $r3 = this.<com.sleepycat.je.dbi.INList: java.util.concurrent.atomic.AtomicLong nCachedBINDeltas>;

        bdstat = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $r4 = new com.sleepycat.je.utilint.LongStat;

        $r5 = <com.sleepycat.je.evictor.EvictorStatDefinition: com.sleepycat.je.utilint.StatDefinition CACHED_UPPER_INS>;

        specialinvoke $r4.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition,long)>(stats, $r5, istat);

        $r6 = new com.sleepycat.je.utilint.LongStat;

        $r7 = <com.sleepycat.je.evictor.EvictorStatDefinition: com.sleepycat.je.utilint.StatDefinition CACHED_BINS>;

        specialinvoke $r6.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition,long)>(stats, $r7, bstat);

        $r8 = new com.sleepycat.je.utilint.LongStat;

        $r9 = <com.sleepycat.je.evictor.EvictorStatDefinition: com.sleepycat.je.utilint.StatDefinition CACHED_BIN_DELTAS>;

        specialinvoke $r8.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition,long)>(stats, $r9, bdstat);

        return stats;
    }

    public java.util.Iterator iterator()
    {
        com.sleepycat.je.dbi.INList this;
        com.sleepycat.je.dbi.INList$Iter $r0;

        this := @this: com.sleepycat.je.dbi.INList;

        $r0 = new com.sleepycat.je.dbi.INList$Iter;

        specialinvoke $r0.<com.sleepycat.je.dbi.INList$Iter: void <init>(com.sleepycat.je.dbi.INList,com.sleepycat.je.dbi.INList$1)>(this, null);

        return $r0;
    }

    static java.util.concurrent.ConcurrentMap access$100(com.sleepycat.je.dbi.INList)
    {
        com.sleepycat.je.dbi.INList x0;
        java.util.concurrent.ConcurrentMap $r0;

        x0 := @parameter0: com.sleepycat.je.dbi.INList;

        $r0 = x0.<com.sleepycat.je.dbi.INList: java.util.concurrent.ConcurrentMap ins>;

        return $r0;
    }

    public void remove(com.sleepycat.je.tree.IN)
    {
        com.sleepycat.je.dbi.INList this;
        com.sleepycat.je.tree.IN in;
        boolean removed, $z0, $z1;
        long delta, $l0;
        java.lang.AssertionError $r0;
        com.sleepycat.je.dbi.EnvironmentImpl $r1;
        com.sleepycat.je.dbi.MemoryBudget $r2;

        this := @this: com.sleepycat.je.dbi.INList;

        in := @parameter0: com.sleepycat.je.tree.IN;

        $z0 = this.<com.sleepycat.je.dbi.INList: boolean enabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        return;

     label1:
        removed = specialinvoke this.<com.sleepycat.je.dbi.INList: boolean removeInternal(com.sleepycat.je.tree.IN)>(in);

        $z1 = <com.sleepycat.je.dbi.INList: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(removed);

        if removed != 0 goto label2;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label2:
        $l0 = virtualinvoke in.<com.sleepycat.je.tree.IN: long getBudgetedMemorySize()>();

        delta = 0L - $l0;

        specialinvoke this.<com.sleepycat.je.dbi.INList: void memRecalcRemove(com.sleepycat.je.tree.IN,long)>(in, delta);

        $r1 = this.<com.sleepycat.je.dbi.INList: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r2 = virtualinvoke $r1.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.MemoryBudget getMemoryBudget()>();

        virtualinvoke $r2.<com.sleepycat.je.dbi.MemoryBudget: void updateTreeMemoryUsage(long)>(delta);

        return;
    }

    private boolean removeInternal(com.sleepycat.je.tree.IN)
    {
        com.sleepycat.je.dbi.INList this;
        com.sleepycat.je.tree.IN in, oldValue;
        com.sleepycat.je.evictor.Evictor evictor;
        java.lang.Throwable l4, $r7;
        boolean $z0, $z1, latchAcquired#19, $z2, $z3;
        java.util.concurrent.atomic.AtomicLong $r0, $r1, $r2;
        com.sleepycat.je.dbi.EnvironmentImpl $r3, $r5;
        com.sleepycat.je.CacheMode $r4;
        com.sleepycat.je.evictor.OffHeapCache $r6;
        java.util.concurrent.ConcurrentMap $r8;
        java.lang.Object $r9;

        this := @this: com.sleepycat.je.dbi.INList;

        in := @parameter0: com.sleepycat.je.tree.IN;

        $z0 = virtualinvoke in.<com.sleepycat.je.tree.IN: boolean isBIN()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label01;

        $r0 = this.<com.sleepycat.je.dbi.INList: java.util.concurrent.atomic.AtomicLong nCachedBINs>;

        virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: long decrementAndGet()>();

        $z1 = virtualinvoke in.<com.sleepycat.je.tree.IN: boolean isBINDelta(boolean)>(0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label02;

        $r1 = this.<com.sleepycat.je.dbi.INList: java.util.concurrent.atomic.AtomicLong nCachedBINDeltas>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long decrementAndGet()>();

        goto label02;

     label01:
        $r2 = this.<com.sleepycat.je.dbi.INList: java.util.concurrent.atomic.AtomicLong nCachedUpperINs>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: long decrementAndGet()>();

     label02:
        $r3 = this.<com.sleepycat.je.dbi.INList: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        evictor = virtualinvoke $r3.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.evictor.Evictor getEvictor()>();

        latchAcquired#19 = 0;

        $z2 = virtualinvoke in.<com.sleepycat.je.tree.IN: boolean isLatchOwner()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label03;

        $r4 = <com.sleepycat.je.CacheMode: com.sleepycat.je.CacheMode UNCHANGED>;

        virtualinvoke in.<com.sleepycat.je.tree.IN: void latch(com.sleepycat.je.CacheMode)>($r4);

        latchAcquired#19 = 1;

     label03:
        virtualinvoke evictor.<com.sleepycat.je.evictor.Evictor: void remove(com.sleepycat.je.tree.IN)>(in);

        virtualinvoke in.<com.sleepycat.je.tree.IN: void setInListResident(boolean)>(0);

        $r5 = this.<com.sleepycat.je.dbi.INList: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r6 = virtualinvoke $r5.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.evictor.OffHeapCache getOffHeapCache()>();

        virtualinvoke $r6.<com.sleepycat.je.evictor.OffHeapCache: long removeINFromMain(com.sleepycat.je.tree.IN)>(in);

     label04:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(latchAcquired#19);

        if latchAcquired#19 == 0 goto label09;

        virtualinvoke in.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        goto label09;

     label05:
        $r7 := @caughtexception;

     label06:
        l4 = $r7;

     label07:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(latchAcquired#19);

        if latchAcquired#19 == 0 goto label08;

        virtualinvoke in.<com.sleepycat.je.tree.IN: void releaseLatch()>();

     label08:
        throw l4;

     label09:
        $r8 = this.<com.sleepycat.je.dbi.INList: java.util.concurrent.ConcurrentMap ins>;

        $r9 = interfaceinvoke $r8.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>(in);

        oldValue = (com.sleepycat.je.tree.IN) $r9;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(oldValue);

        if oldValue == null goto label10;

        $z3 = 1;

        goto label11;

     label10:
        $z3 = 0;

     label11:
        return $z3;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
    }

    private void memRecalcRemove(com.sleepycat.je.tree.IN, long)
    {
        com.sleepycat.je.dbi.INList this;
        com.sleepycat.je.tree.IN in;
        long delta;

        this := @this: com.sleepycat.je.dbi.INList;

        in := @parameter0: com.sleepycat.je.tree.IN;

        delta := @parameter1: long;

        virtualinvoke this.<com.sleepycat.je.dbi.INList: void memRecalcUpdate(com.sleepycat.je.tree.IN,long)>(in, delta);

        return;
    }

    public void memRecalcUpdate(com.sleepycat.je.tree.IN, long)
    {
        com.sleepycat.je.dbi.INList this;
        com.sleepycat.je.tree.IN in;
        long delta;
        boolean $z0, $z1, $z2, $z3;
        java.util.concurrent.atomic.AtomicLong $r0;

        this := @this: com.sleepycat.je.dbi.INList;

        in := @parameter0: com.sleepycat.je.tree.IN;

        delta := @parameter1: long;

        $z0 = this.<com.sleepycat.je.dbi.INList: boolean recalcInProgress>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $z1 = this.<com.sleepycat.je.dbi.INList: boolean recalcConsistent>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label1;

        $z2 = this.<com.sleepycat.je.dbi.INList: boolean recalcToggle>;

        $z3 = virtualinvoke in.<com.sleepycat.je.tree.IN: boolean getRecalcToggle()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z2 != $z3 goto label1;

        $r0 = this.<com.sleepycat.je.dbi.INList: java.util.concurrent.atomic.AtomicLong recalcTotal>;

        virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(delta);

     label1:
        return;
    }

    public void memRecalcBegin()
    {
        com.sleepycat.je.dbi.INList this;
        java.util.concurrent.atomic.AtomicLong $r0;
        boolean $z0, $z1;

        this := @this: com.sleepycat.je.dbi.INList;

        $r0 = this.<com.sleepycat.je.dbi.INList: java.util.concurrent.atomic.AtomicLong recalcTotal>;

        virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: void set(long)>(0L);

        this.<com.sleepycat.je.dbi.INList: boolean recalcInProgress> = 1;

        $z0 = this.<com.sleepycat.je.dbi.INList: boolean recalcToggle>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        this.<com.sleepycat.je.dbi.INList: boolean recalcToggle> = $z1;

        return;
    }

    public void memRecalcIterate(com.sleepycat.je.tree.IN)
    {
        com.sleepycat.je.dbi.INList this;
        com.sleepycat.je.tree.IN in;
        long delta;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.AssertionError $r0;
        java.util.concurrent.atomic.AtomicLong $r1;

        this := @this: com.sleepycat.je.dbi.INList;

        in := @parameter0: com.sleepycat.je.tree.IN;

        $z0 = <com.sleepycat.je.dbi.INList: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = this.<com.sleepycat.je.dbi.INList: boolean recalcInProgress>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $z2 = this.<com.sleepycat.je.dbi.INList: boolean recalcConsistent>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label2;

        $z3 = this.<com.sleepycat.je.dbi.INList: boolean recalcToggle>;

        $z4 = virtualinvoke in.<com.sleepycat.je.tree.IN: boolean getRecalcToggle()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z3 == $z4 goto label2;

        delta = virtualinvoke in.<com.sleepycat.je.tree.IN: long resetAndGetMemorySize()>();

        $r1 = this.<com.sleepycat.je.dbi.INList: java.util.concurrent.atomic.AtomicLong recalcTotal>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(delta);

     label2:
        $z5 = this.<com.sleepycat.je.dbi.INList: boolean recalcToggle>;

        virtualinvoke in.<com.sleepycat.je.tree.IN: void setRecalcToggle(boolean)>($z5);

        return;
    }

    public void memRecalcEnd(boolean)
    {
        com.sleepycat.je.dbi.INList this;
        boolean completed, $z0, $z1, $z2;
        java.lang.AssertionError $r0;
        com.sleepycat.je.dbi.EnvironmentImpl $r1;
        com.sleepycat.je.dbi.MemoryBudget $r2;
        java.util.concurrent.atomic.AtomicLong $r3;
        long $l0;

        this := @this: com.sleepycat.je.dbi.INList;

        completed := @parameter0: boolean;

        $z0 = <com.sleepycat.je.dbi.INList: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = this.<com.sleepycat.je.dbi.INList: boolean recalcInProgress>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(completed);

        if completed == 0 goto label2;

        $z2 = this.<com.sleepycat.je.dbi.INList: boolean recalcConsistent>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label2;

        $r1 = this.<com.sleepycat.je.dbi.INList: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r2 = virtualinvoke $r1.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.MemoryBudget getMemoryBudget()>();

        $r3 = this.<com.sleepycat.je.dbi.INList: java.util.concurrent.atomic.AtomicLong recalcTotal>;

        $l0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: long get()>();

        virtualinvoke $r2.<com.sleepycat.je.dbi.MemoryBudget: void refreshTreeMemoryUsage(long)>($l0);

     label2:
        this.<com.sleepycat.je.dbi.INList: boolean recalcInProgress> = 0;

        this.<com.sleepycat.je.dbi.INList: boolean recalcConsistent> = completed;

        return;
    }

    public void clear()
    {
        com.sleepycat.je.dbi.INList this;
        com.sleepycat.je.dbi.MemoryBudget mb;
        java.util.concurrent.ConcurrentMap $r0;
        java.util.concurrent.atomic.AtomicLong $r1, $r2, $r3;
        com.sleepycat.je.dbi.EnvironmentImpl $r4;

        this := @this: com.sleepycat.je.dbi.INList;

        $r0 = this.<com.sleepycat.je.dbi.INList: java.util.concurrent.ConcurrentMap ins>;

        interfaceinvoke $r0.<java.util.concurrent.ConcurrentMap: void clear()>();

        $r1 = this.<com.sleepycat.je.dbi.INList: java.util.concurrent.atomic.AtomicLong nCachedUpperINs>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void set(long)>(0L);

        $r2 = this.<com.sleepycat.je.dbi.INList: java.util.concurrent.atomic.AtomicLong nCachedBINs>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: void set(long)>(0L);

        $r3 = this.<com.sleepycat.je.dbi.INList: java.util.concurrent.atomic.AtomicLong nCachedBINDeltas>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: void set(long)>(0L);

        $r4 = this.<com.sleepycat.je.dbi.INList: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        mb = virtualinvoke $r4.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.MemoryBudget getMemoryBudget()>();

        virtualinvoke mb.<com.sleepycat.je.dbi.MemoryBudget: void refreshTreeMemoryUsage(long)>(0L);

        virtualinvoke mb.<com.sleepycat.je.dbi.MemoryBudget: void refreshTreeAdminMemoryUsage(long)>(0L);

        return;
    }

    public void enable()
    {
        com.sleepycat.je.dbi.INList this;
        boolean $z0, $z1, $z2, $z3;
        java.util.concurrent.ConcurrentMap $r0;
        java.lang.AssertionError $r1, $r2;

        this := @this: com.sleepycat.je.dbi.INList;

        $z0 = <com.sleepycat.je.dbi.INList: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r0 = this.<com.sleepycat.je.dbi.INList: java.util.concurrent.ConcurrentMap ins>;

        $z1 = interfaceinvoke $r0.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $z2 = <com.sleepycat.je.dbi.INList: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label2;

        $z3 = this.<com.sleepycat.je.dbi.INList: boolean enabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label2;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label2:
        this.<com.sleepycat.je.dbi.INList: boolean enabled> = 1;

        return;
    }

    static boolean access$200(com.sleepycat.je.dbi.INList, com.sleepycat.je.tree.IN)
    {
        com.sleepycat.je.dbi.INList x0;
        com.sleepycat.je.tree.IN x1;
        boolean $z0;

        x0 := @parameter0: com.sleepycat.je.dbi.INList;

        x1 := @parameter1: com.sleepycat.je.tree.IN;

        $z0 = specialinvoke x0.<com.sleepycat.je.dbi.INList: boolean removeInternal(com.sleepycat.je.tree.IN)>(x1);

        return $z0;
    }

    public void add(com.sleepycat.je.tree.IN)
    {
        com.sleepycat.je.dbi.INList this;
        com.sleepycat.je.tree.IN in, oldValue;
        long size, $l3, $l5;
        boolean $z0, $z1, $z2;
        java.util.concurrent.atomic.AtomicLong $r0, $r1, $r2;
        java.util.concurrent.ConcurrentMap $r3;
        java.lang.Object $r4;
        com.sleepycat.je.dbi.EnvironmentImpl $r5, $r27;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r11, $r12, $r15, $r16, $r17, $r18, $r20, $r21, $r24;
        com.sleepycat.je.dbi.DatabaseImpl $r10, $r13, $r19, $r22;
        int $i4, $i6;
        java.lang.String $r14, $r23, $r25;
        com.sleepycat.je.EnvironmentFailureException $r26;
        com.sleepycat.je.dbi.MemoryBudget $r28;

        this := @this: com.sleepycat.je.dbi.INList;

        in := @parameter0: com.sleepycat.je.tree.IN;

        $z0 = this.<com.sleepycat.je.dbi.INList: boolean enabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        return;

     label1:
        $z1 = virtualinvoke in.<com.sleepycat.je.tree.IN: boolean isBIN()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        $r0 = this.<com.sleepycat.je.dbi.INList: java.util.concurrent.atomic.AtomicLong nCachedBINs>;

        virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        $z2 = virtualinvoke in.<com.sleepycat.je.tree.IN: boolean isBINDelta(boolean)>(0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label3;

        $r1 = this.<com.sleepycat.je.dbi.INList: java.util.concurrent.atomic.AtomicLong nCachedBINDeltas>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        goto label3;

     label2:
        $r2 = this.<com.sleepycat.je.dbi.INList: java.util.concurrent.atomic.AtomicLong nCachedUpperINs>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

     label3:
        $r3 = this.<com.sleepycat.je.dbi.INList: java.util.concurrent.ConcurrentMap ins>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(in, in);

        oldValue = (com.sleepycat.je.tree.IN) $r4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(oldValue);

        if oldValue == null goto label4;

        $r5 = this.<com.sleepycat.je.dbi.INList: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed adding new IN node=");

        $l3 = virtualinvoke in.<com.sleepycat.je.tree.IN: long getNodeId()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" dbIdentity=");

        $r10 = virtualinvoke in.<com.sleepycat.je.tree.IN: com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        $i4 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r10);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" db=");

        $r13 = virtualinvoke in.<com.sleepycat.je.tree.IN: com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        $r14 = virtualinvoke $r13.<com.sleepycat.je.dbi.DatabaseImpl: java.lang.String dumpString(int)>(0);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nExisting IN node=");

        $l5 = virtualinvoke oldValue.<com.sleepycat.je.tree.IN: long getNodeId()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" dbIdentity=");

        $r19 = virtualinvoke oldValue.<com.sleepycat.je.tree.IN: com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        $i6 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r19);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" db=");

        $r22 = virtualinvoke oldValue.<com.sleepycat.je.tree.IN: com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        $r23 = virtualinvoke $r22.<com.sleepycat.je.dbi.DatabaseImpl: java.lang.String dumpString(int)>(0);

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        $r26 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedState(com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String)>($r5, $r25);

        throw $r26;

     label4:
        size = virtualinvoke in.<com.sleepycat.je.tree.IN: long getBudgetedMemorySize()>();

        specialinvoke this.<com.sleepycat.je.dbi.INList: void memRecalcAdd(com.sleepycat.je.tree.IN,long)>(in, size);

        $r27 = this.<com.sleepycat.je.dbi.INList: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r28 = virtualinvoke $r27.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.MemoryBudget getMemoryBudget()>();

        virtualinvoke $r28.<com.sleepycat.je.dbi.MemoryBudget: void updateTreeMemoryUsage(long)>(size);

        virtualinvoke in.<com.sleepycat.je.tree.IN: void setInListResident(boolean)>(1);

        return;
    }

    private void memRecalcAdd(com.sleepycat.je.tree.IN, long)
    {
        com.sleepycat.je.dbi.INList this;
        com.sleepycat.je.tree.IN in;
        long size;
        boolean $z0, $z1, $z2;
        java.util.concurrent.atomic.AtomicLong $r0;

        this := @this: com.sleepycat.je.dbi.INList;

        in := @parameter0: com.sleepycat.je.tree.IN;

        size := @parameter1: long;

        $z0 = this.<com.sleepycat.je.dbi.INList: boolean recalcInProgress>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $z1 = this.<com.sleepycat.je.dbi.INList: boolean recalcConsistent>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label1;

        $r0 = this.<com.sleepycat.je.dbi.INList: java.util.concurrent.atomic.AtomicLong recalcTotal>;

        virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(size);

     label1:
        $z2 = this.<com.sleepycat.je.dbi.INList: boolean recalcToggle>;

        virtualinvoke in.<com.sleepycat.je.tree.IN: void setRecalcToggle(boolean)>($z2);

        return;
    }

    public void updateBINDeltaStat(int)
    {
        com.sleepycat.je.dbi.INList this;
        int incr;
        java.util.concurrent.atomic.AtomicLong $r0;
        long $l0;

        this := @this: com.sleepycat.je.dbi.INList;

        incr := @parameter0: int;

        $r0 = this.<com.sleepycat.je.dbi.INList: java.util.concurrent.atomic.AtomicLong nCachedBINDeltas>;

        $l0 = (long) incr;

        virtualinvoke $r0.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>($l0);

        return;
    }

    public boolean isEnabled()
    {
        com.sleepycat.je.dbi.INList this;
        boolean $z0;

        this := @this: com.sleepycat.je.dbi.INList;

        $z0 = this.<com.sleepycat.je.dbi.INList: boolean enabled>;

        return $z0;
    }


