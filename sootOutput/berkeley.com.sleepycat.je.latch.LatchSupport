    static void trackRelease(berkeley.com.sleepycat.je.latch.Latch, berkeley.com.sleepycat.je.latch.LatchContext)
    {
        berkeley.com.sleepycat.je.latch.Latch latch;
        berkeley.com.sleepycat.je.latch.LatchContext context;
        berkeley.com.sleepycat.je.latch.LatchTable latchTable;
        boolean $z0;
        java.lang.StringBuilder $r0, $r1, $r3;
        java.lang.String $r2, $r4;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r5;

        latch := @parameter0: berkeley.com.sleepycat.je.latch.Latch;

        context := @parameter1: berkeley.com.sleepycat.je.latch.LatchContext;

        latchTable = interfaceinvoke context.<berkeley.com.sleepycat.je.latch.LatchContext: berkeley.com.sleepycat.je.latch.LatchTable getLatchTable()>();

        if latchTable != null goto label1;

        return;

     label1:
        $z0 = virtualinvoke latchTable.<berkeley.com.sleepycat.je.latch.LatchTable: boolean remove(java.lang.Object)>(latch);

        if $z0 != 0 goto label2;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Latch not held.");

        $r2 = interfaceinvoke latch.<berkeley.com.sleepycat.je.latch.Latch: java.lang.String debugString()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>($r4);

        throw $r5;

     label2:
        return;
    }

    static void <clinit>()
    {
        boolean $z0, $z1, $z2, $z3;
        berkeley.com.sleepycat.je.latch.LatchTable $r0, $r1;
        berkeley.com.sleepycat.je.latch.LatchSupport$1 $r2;

        $z0 = <berkeley.com.sleepycat.je.utilint.DatabaseUtil: boolean TEST>;

        <berkeley.com.sleepycat.je.latch.LatchSupport: boolean TRACK_LATCHES> = $z0;

        $z1 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("JE_CAPTURE_LATCH_OWNER");

        <berkeley.com.sleepycat.je.latch.LatchSupport: boolean CAPTURE_OWNER> = $z1;

        $z2 = <berkeley.com.sleepycat.je.latch.LatchSupport: boolean TRACK_LATCHES>;

        if $z2 == 0 goto label1;

        $r0 = new berkeley.com.sleepycat.je.latch.LatchTable;

        specialinvoke $r0.<berkeley.com.sleepycat.je.latch.LatchTable: void <init>()>();

        goto label2;

     label1:
        $r0 = null;

     label2:
        <berkeley.com.sleepycat.je.latch.LatchSupport: berkeley.com.sleepycat.je.latch.LatchTable btreeLatchTable> = $r0;

        $z3 = <berkeley.com.sleepycat.je.latch.LatchSupport: boolean TRACK_LATCHES>;

        if $z3 == 0 goto label3;

        $r1 = new berkeley.com.sleepycat.je.latch.LatchTable;

        specialinvoke $r1.<berkeley.com.sleepycat.je.latch.LatchTable: void <init>()>();

        goto label4;

     label3:
        $r1 = null;

     label4:
        <berkeley.com.sleepycat.je.latch.LatchSupport: berkeley.com.sleepycat.je.latch.LatchTable otherLatchTable> = $r1;

        $r2 = new berkeley.com.sleepycat.je.latch.LatchSupport$1;

        specialinvoke $r2.<berkeley.com.sleepycat.je.latch.LatchSupport$1: void <init>()>();

        <berkeley.com.sleepycat.je.latch.LatchSupport: berkeley.com.sleepycat.je.latch.LatchContext DUMMY_LATCH_CONTEXT> = $r2;

        return;
    }

    static java.lang.String debugString(berkeley.com.sleepycat.je.latch.Latch, berkeley.com.sleepycat.je.latch.LatchContext, berkeley.com.sleepycat.je.latch.OwnerInfo)
    {
        berkeley.com.sleepycat.je.latch.Latch latch;
        berkeley.com.sleepycat.je.latch.LatchContext context;
        berkeley.com.sleepycat.je.latch.OwnerInfo lastOwnerInfo;
        java.lang.StringBuilder builder, $r0;
        berkeley.com.sleepycat.je.latch.LatchTable latchTable;
        java.lang.Thread ownerThread, $r4;
        java.lang.String $r1, $r9, $r15;
        long $l0;
        boolean $z0;

        latch := @parameter0: berkeley.com.sleepycat.je.latch.Latch;

        context := @parameter1: berkeley.com.sleepycat.je.latch.LatchContext;

        lastOwnerInfo := @parameter2: berkeley.com.sleepycat.je.latch.OwnerInfo;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(int)>(500);

        builder = $r0;

        $r1 = interfaceinvoke context.<berkeley.com.sleepycat.je.latch.LatchContext: java.lang.String getLatchName()>();

        virtualinvoke builder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke builder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" currentThread: ");

        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke builder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        virtualinvoke builder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" currentTime: ");

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        virtualinvoke builder.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $z0 = <berkeley.com.sleepycat.je.latch.LatchSupport: boolean TRACK_LATCHES>;

        if $z0 == 0 goto label1;

        latchTable = interfaceinvoke context.<berkeley.com.sleepycat.je.latch.LatchContext: berkeley.com.sleepycat.je.latch.LatchTable getLatchTable()>();

        if latchTable == null goto label1;

        virtualinvoke builder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" allLatchesHeld: (");

        $r9 = virtualinvoke latchTable.<berkeley.com.sleepycat.je.latch.LatchTable: java.lang.String latchesHeldToString()>();

        virtualinvoke builder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke builder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

     label1:
        virtualinvoke builder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" exclusiveOwner: ");

        ownerThread = interfaceinvoke latch.<berkeley.com.sleepycat.je.latch.Latch: java.lang.Thread getExclusiveOwner()>();

        if ownerThread == null goto label2;

        virtualinvoke builder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(ownerThread);

        if lastOwnerInfo == null goto label3;

        virtualinvoke lastOwnerInfo.<berkeley.com.sleepycat.je.latch.OwnerInfo: void toString(java.lang.StringBuilder)>(builder);

        goto label3;

     label2:
        virtualinvoke builder.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-none-");

     label3:
        $r15 = virtualinvoke builder.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r15;
    }

    static void trackAcquire(berkeley.com.sleepycat.je.latch.Latch, berkeley.com.sleepycat.je.latch.LatchContext)
    {
        berkeley.com.sleepycat.je.latch.Latch latch;
        berkeley.com.sleepycat.je.latch.LatchContext context;
        berkeley.com.sleepycat.je.latch.LatchTable latchTable;
        boolean $z0;
        java.lang.StringBuilder $r0, $r1, $r3;
        java.lang.String $r2, $r4;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r5;

        latch := @parameter0: berkeley.com.sleepycat.je.latch.Latch;

        context := @parameter1: berkeley.com.sleepycat.je.latch.LatchContext;

        latchTable = interfaceinvoke context.<berkeley.com.sleepycat.je.latch.LatchContext: berkeley.com.sleepycat.je.latch.LatchTable getLatchTable()>();

        if latchTable != null goto label1;

        return;

     label1:
        $z0 = virtualinvoke latchTable.<berkeley.com.sleepycat.je.latch.LatchTable: boolean add(java.lang.Object)>(latch);

        if $z0 != 0 goto label2;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Latch already held.");

        $r2 = interfaceinvoke latch.<berkeley.com.sleepycat.je.latch.Latch: java.lang.String debugString()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>($r4);

        throw $r5;

     label2:
        return;
    }

    static berkeley.com.sleepycat.je.EnvironmentFailureException handleTimeout(berkeley.com.sleepycat.je.latch.Latch, berkeley.com.sleepycat.je.latch.LatchContext)
    {
        berkeley.com.sleepycat.je.latch.Latch latch;
        berkeley.com.sleepycat.je.latch.LatchContext context;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        java.util.logging.Logger logger;
        java.lang.String msg, $r4, $r9;
        java.util.logging.Level $r0, $r5;
        java.lang.StringBuilder $r1, $r2, $r3, $r6, $r7, $r8;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r10;

        latch := @parameter0: berkeley.com.sleepycat.je.latch.Latch;

        context := @parameter1: berkeley.com.sleepycat.je.latch.LatchContext;

        envImpl = interfaceinvoke context.<berkeley.com.sleepycat.je.latch.LatchContext: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnvImplForFatalException()>();

        logger = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: java.util.logging.Logger getLogger()>();

        msg = interfaceinvoke latch.<berkeley.com.sleepycat.je.latch.Latch: java.lang.String debugString()>();

        $r0 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Thread dump follows for latch timeout: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(msg);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: void logMsg(java.util.logging.Logger,berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.util.logging.Level,java.lang.String)>(logger, envImpl, $r0, $r4);

        $r5 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: void fullThreadDump(java.util.logging.Logger,berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.util.logging.Level)>(logger, envImpl, $r5);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Latch timeout. ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(msg);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String)>(envImpl, $r9);

        return $r10;
    }

    public static void expectBtreeLatchesHeld(int, java.lang.String)
    {
        int expectNLatches, nHeld;
        java.lang.String msg, $r4, $r5;
        berkeley.com.sleepycat.je.latch.LatchTable $r0;
        java.lang.Object[] $r1;
        java.lang.Integer $r2, $r3;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r6;

        expectNLatches := @parameter0: int;

        msg := @parameter1: java.lang.String;

        $r0 = <berkeley.com.sleepycat.je.latch.LatchSupport: berkeley.com.sleepycat.je.latch.LatchTable btreeLatchTable>;

        nHeld = virtualinvoke $r0.<berkeley.com.sleepycat.je.latch.LatchTable: int nLatchesHeld()>();

        if nHeld != expectNLatches goto label1;

        return;

     label1:
        $r1 = newarray (java.lang.Object)[4];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(expectNLatches);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(nHeld);

        $r1[1] = $r3;

        $r1[2] = msg;

        $r4 = staticinvoke <berkeley.com.sleepycat.je.latch.LatchSupport: java.lang.String btreeLatchesHeldToString()>();

        $r1[3] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Expected %d Btree latches held but got %d. %s\nLatch table: %s\n", $r1);

        $r6 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>($r5);

        throw $r6;
    }

    public static java.lang.String btreeLatchesHeldToString()
    {
        berkeley.com.sleepycat.je.latch.LatchTable $r0;
        java.lang.String $r1;

        $r0 = <berkeley.com.sleepycat.je.latch.LatchSupport: berkeley.com.sleepycat.je.latch.LatchTable btreeLatchTable>;

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.latch.LatchTable: java.lang.String latchesHeldToString()>();

        return $r1;
    }

    public static void expectBtreeLatchesHeld(int)
    {
        int expectNLatches;

        expectNLatches := @parameter0: int;

        staticinvoke <berkeley.com.sleepycat.je.latch.LatchSupport: void expectBtreeLatchesHeld(int,java.lang.String)>(expectNLatches, "");

        return;
    }

    public static void clear()
    {
        boolean $z0;
        berkeley.com.sleepycat.je.latch.LatchTable $r0, $r1;

        $z0 = <berkeley.com.sleepycat.je.latch.LatchSupport: boolean TRACK_LATCHES>;

        if $z0 == 0 goto label1;

        $r0 = <berkeley.com.sleepycat.je.latch.LatchSupport: berkeley.com.sleepycat.je.latch.LatchTable btreeLatchTable>;

        virtualinvoke $r0.<berkeley.com.sleepycat.je.latch.LatchTable: void clear()>();

        $r1 = <berkeley.com.sleepycat.je.latch.LatchSupport: berkeley.com.sleepycat.je.latch.LatchTable otherLatchTable>;

        virtualinvoke $r1.<berkeley.com.sleepycat.je.latch.LatchTable: void clear()>();

     label1:
        return;
    }

    public static int nBtreeLatchesHeld()
    {
        berkeley.com.sleepycat.je.latch.LatchTable $r0;
        int $i0;

        $r0 = <berkeley.com.sleepycat.je.latch.LatchSupport: berkeley.com.sleepycat.je.latch.LatchTable btreeLatchTable>;

        $i0 = virtualinvoke $r0.<berkeley.com.sleepycat.je.latch.LatchTable: int nLatchesHeld()>();

        return $i0;
    }


