    public void <init>()
    {
        weka.classifiers.trees.j48.ClassifierSplitModel this;

        this := @this: weka.classifiers.trees.j48.ClassifierSplitModel;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public final weka.classifiers.trees.j48.Distribution distribution()
    {
        weka.classifiers.trees.j48.ClassifierSplitModel this;
        weka.classifiers.trees.j48.Distribution $r0;

        this := @this: weka.classifiers.trees.j48.ClassifierSplitModel;

        $r0 = this.<weka.classifiers.trees.j48.ClassifierSplitModel: weka.classifiers.trees.j48.Distribution m_distribution>;

        return $r0;
    }

    public final int numSubsets()
    {
        weka.classifiers.trees.j48.ClassifierSplitModel this;
        int $i0;

        this := @this: weka.classifiers.trees.j48.ClassifierSplitModel;

        $i0 = this.<weka.classifiers.trees.j48.ClassifierSplitModel: int m_numSubsets>;

        return $i0;
    }

    public final weka.core.Instances[] split(weka.core.Instances) throws java.lang.Exception
    {
        weka.classifiers.trees.j48.ClassifierSplitModel this;
        weka.core.Instances data, $r3, $r5, $r6, $r7;
        int[] subsetSize;
        java.util.Iterator l3, l4;
        weka.core.Instance instance, instance, $r8;
        int subset, subset, $i0, $i2, $i3, j#27, $i4, $i6, $i7, $i8, j#47, $i9, $i10, j#78, $i11;
        double[] weights, weights;
        weka.core.Instances[] instances;
        boolean $z0, $z1, $z2, $z4;
        java.lang.Object $r0, $r4;
        double $d0, $d1, $d2, $d3, $d4;

        this := @this: weka.classifiers.trees.j48.ClassifierSplitModel;

        data := @parameter0: weka.core.Instances;

        $i0 = this.<weka.classifiers.trees.j48.ClassifierSplitModel: int m_numSubsets>;

        subsetSize = newarray (int)[$i0];

        l3 = virtualinvoke data.<weka.core.Instances: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label06;

        $r0 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        instance = (weka.core.Instance) $r0;

        subset = virtualinvoke this.<weka.classifiers.trees.j48.ClassifierSplitModel: int whichSubset(weka.core.Instance)>(instance);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(subset);

        if subset <= -1 goto label02;

        $i2 = subsetSize[subset];

        $i3 = $i2 + 1;

        subsetSize[subset] = $i3;

        goto label05;

     label02:
        weights = virtualinvoke this.<weka.classifiers.trees.j48.ClassifierSplitModel: double[] weights(weka.core.Instance)>(instance);

        j#27 = 0;

     label03:
        $i4 = this.<weka.classifiers.trees.j48.ClassifierSplitModel: int m_numSubsets>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#27);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if j#27 >= $i4 goto label05;

        $d0 = weights[j#27];

        $z1 = staticinvoke <weka.core.Utils: boolean gr(double,double)>($d0, 0.0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label04;

        $i6 = subsetSize[j#27];

        $i7 = $i6 + 1;

        subsetSize[j#27] = $i7;

     label04:
        j#27 = j#27 + 1;

        goto label03;

     label05:
        goto label01;

     label06:
        $i8 = this.<weka.classifiers.trees.j48.ClassifierSplitModel: int m_numSubsets>;

        instances = newarray (weka.core.Instances)[$i8];

        j#47 = 0;

     label07:
        $i9 = this.<weka.classifiers.trees.j48.ClassifierSplitModel: int m_numSubsets>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#47);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        if j#47 >= $i9 goto label08;

        $r3 = new weka.core.Instances;

        $i10 = subsetSize[j#47];

        specialinvoke $r3.<weka.core.Instances: void <init>(weka.core.Instances,int)>(data, $i10);

        instances[j#47] = $r3;

        j#47 = j#47 + 1;

        goto label07;

     label08:
        l4 = virtualinvoke data.<weka.core.Instances: java.util.Iterator iterator()>();

     label09:
        $z2 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label14;

        $r4 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        instance = (weka.core.Instance) $r4;

        subset = virtualinvoke this.<weka.classifiers.trees.j48.ClassifierSplitModel: int whichSubset(weka.core.Instance)>(instance);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(subset);

        if subset <= -1 goto label10;

        $r5 = instances[subset];

        virtualinvoke $r5.<weka.core.Instances: boolean add(weka.core.Instance)>(instance);

        goto label13;

     label10:
        weights = virtualinvoke this.<weka.classifiers.trees.j48.ClassifierSplitModel: double[] weights(weka.core.Instance)>(instance);

        j#78 = 0;

     label11:
        $i11 = this.<weka.classifiers.trees.j48.ClassifierSplitModel: int m_numSubsets>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#78);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i11);

        if j#78 >= $i11 goto label13;

        $d1 = weights[j#78];

        $z4 = staticinvoke <weka.core.Utils: boolean gr(double,double)>($d1, 0.0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label12;

        $r6 = instances[j#78];

        virtualinvoke $r6.<weka.core.Instances: boolean add(weka.core.Instance)>(instance);

        $r7 = instances[j#78];

        $r8 = virtualinvoke $r7.<weka.core.Instances: weka.core.Instance lastInstance()>();

        $d2 = weights[j#78];

        $d3 = interfaceinvoke instance.<weka.core.Instance: double weight()>();

        $d4 = $d2 * $d3;

        interfaceinvoke $r8.<weka.core.Instance: void setWeight(double)>($d4);

     label12:
        j#78 = j#78 + 1;

        goto label11;

     label13:
        goto label09;

     label14:
        return instances;
    }

    public final boolean checkModel()
    {
        weka.classifiers.trees.j48.ClassifierSplitModel this;
        int $i0;

        this := @this: weka.classifiers.trees.j48.ClassifierSplitModel;

        $i0 = this.<weka.classifiers.trees.j48.ClassifierSplitModel: int m_numSubsets>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }


