    static void <clinit>()
    {
        org.unix4j.sort.util.sort.ScientificNumberStringComparator $r0;

        $r0 = new org.unix4j.sort.util.sort.ScientificNumberStringComparator;

        specialinvoke $r0.<org.unix4j.sort.util.sort.ScientificNumberStringComparator: void <init>()>();

        <org.unix4j.sort.util.sort.ScientificNumberStringComparator: org.unix4j.sort.util.sort.ScientificNumberStringComparator INSTANCE> = $r0;

        return;
    }

    private void <init>()
    {
        org.unix4j.sort.util.sort.ScientificNumberStringComparator this;

        this := @this: org.unix4j.sort.util.sort.ScientificNumberStringComparator;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.unix4j.sort.util.sort.ScientificNumberStringComparator this;
        java.lang.Object l1, l2;
        java.lang.CharSequence $r0, $r1;
        int $i0;

        this := @this: org.unix4j.sort.util.sort.ScientificNumberStringComparator;

        l1 := @parameter0: java.lang.Object;

        l2 := @parameter1: java.lang.Object;

        $r0 = (java.lang.CharSequence) l1;

        $r1 = (java.lang.CharSequence) l2;

        $i0 = virtualinvoke this.<org.unix4j.sort.util.sort.ScientificNumberStringComparator: int compare(java.lang.CharSequence,java.lang.CharSequence)>($r0, $r1);

        return $i0;
    }

    public int compare(java.lang.CharSequence, java.lang.CharSequence)
    {
        org.unix4j.sort.util.sort.ScientificNumberStringComparator this;
        java.lang.CharSequence s1, s2, $r0, $r1;
        int start1, end1, start2, end2, $i0, $i1;
        java.lang.String str1, str2, $r2, $r3;
        double dbl1, dbl2;
        boolean isNan1, isNan2, isNonDouble1, isNonDouble2, $z0, $z1, $z2, $z3;

        this := @this: org.unix4j.sort.util.sort.ScientificNumberStringComparator;

        s1 := @parameter0: java.lang.CharSequence;

        s2 := @parameter1: java.lang.CharSequence;

        start1 = staticinvoke <org.unix4j.sort.util.StringUtil: int findStartTrimWhitespace(java.lang.CharSequence)>(s1);

        end1 = staticinvoke <org.unix4j.sort.util.StringUtil: int findEndTrimWhitespace(java.lang.CharSequence)>(s1);

        start2 = staticinvoke <org.unix4j.sort.util.StringUtil: int findStartTrimWhitespace(java.lang.CharSequence)>(s2);

        end2 = staticinvoke <org.unix4j.sort.util.StringUtil: int findEndTrimWhitespace(java.lang.CharSequence)>(s2);

        $r0 = interfaceinvoke s1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(start1, end1);

        str1 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.String toString()>();

        $r1 = interfaceinvoke s2.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(start2, end2);

        str2 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.String toString()>();

        dbl1 = staticinvoke <org.unix4j.sort.util.sort.ScientificNumberStringComparator: double parseDouble(java.lang.String)>(str1);

        dbl2 = staticinvoke <org.unix4j.sort.util.sort.ScientificNumberStringComparator: double parseDouble(java.lang.String)>(str2);

        isNan1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(dbl1);

        isNan2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(dbl2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isNan1);

        if isNan1 != 0 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isNan2);

        if isNan2 == 0 goto label8;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isNan1);

        if isNan1 == 0 goto label2;

        $r2 = "NaN";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(str1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        isNonDouble1 = $z1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isNan2);

        if isNan2 == 0 goto label4;

        $r3 = "NaN";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(str2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        isNonDouble2 = $z3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isNonDouble1);

        if isNonDouble1 == 0 goto label6;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isNonDouble2);

        if isNonDouble2 == 0 goto label6;

        $i0 = virtualinvoke str1.<java.lang.String: int compareTo(java.lang.String)>(str2);

        return $i0;

     label6:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isNonDouble1);

        if isNonDouble1 == 0 goto label7;

        return -1;

     label7:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isNonDouble2);

        if isNonDouble2 == 0 goto label8;

        return 1;

     label8:
        $i1 = staticinvoke <java.lang.Double: int compare(double,double)>(dbl1, dbl2);

        return $i1;
    }

    private static double parseDouble(java.lang.String)
    {
        java.lang.String s;
        java.lang.NumberFormatException e, $r0;
        double $d0;

        s := @parameter0: java.lang.String;

     label1:
        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(s);

     label2:
        return $d0;

     label3:
        $r0 := @caughtexception;

        e = $r0;

        return #NaN;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }


