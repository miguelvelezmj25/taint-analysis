    static void <clinit>()
    {
        byte[] $r0;

        $r0 = newarray (byte)[0];

        <kanzi.io.CompressedOutputStream: byte[] EMPTY_BYTE_ARRAY> = $r0;

        return;
    }

    public void <init>(java.io.OutputStream, int, boolean, java.util.concurrent.ExecutorService, int, java.lang.String, java.lang.String)
    {
        kanzi.io.CompressedOutputStream this;
        java.io.OutputStream os;
        int blockSize, jobs, bufferSize, $i0, $i3, $i4, $i5, $i6, $i7, $i8, i#58, $i9;
        boolean checksum;
        java.util.concurrent.ExecutorService pool;
        java.lang.String codec, transform;
        kanzi.bitstream.DefaultOutputBitStream $r0;
        kanzi.entropy.EntropyCodecFactory $r1;
        short $s1, $s2;
        kanzi.io.ByteFunctionFactory $r2;
        kanzi.util.hash.XXHash32 $r4;
        kanzi.SliceByteArray $r6, $r13;
        byte[] $r7, $r14;
        kanzi.SliceByteArray[] $r8, $r11, $r12;
        java.util.concurrent.atomic.AtomicBoolean $r9, $r10;
        java.util.concurrent.atomic.AtomicInteger $r15;
        java.util.ArrayList $r16;

        this := @this: kanzi.io.CompressedOutputStream;

        os := @parameter0: java.io.OutputStream;

        blockSize := @parameter1: int;

        checksum := @parameter2: boolean;

        pool := @parameter3: java.util.concurrent.ExecutorService;

        jobs := @parameter4: int;

        codec := @parameter5: java.lang.String;

        transform := @parameter6: java.lang.String;

        specialinvoke this.<java.io.OutputStream: void <init>()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(blockSize);

        if blockSize > 65536 goto label1;

        $i0 = blockSize;

        goto label2;

     label1:
        $i0 = 65536;

     label2:
        bufferSize = $i0;

        $r0 = new kanzi.bitstream.DefaultOutputBitStream;

        specialinvoke $r0.<kanzi.bitstream.DefaultOutputBitStream: void <init>(java.io.OutputStream,int)>(os, bufferSize);

        this.<kanzi.io.CompressedOutputStream: kanzi.OutputBitStream obs> = $r0;

        $r1 = new kanzi.entropy.EntropyCodecFactory;

        specialinvoke $r1.<kanzi.entropy.EntropyCodecFactory: void <init>()>();

        $s1 = virtualinvoke $r1.<kanzi.entropy.EntropyCodecFactory: short getType(java.lang.String)>(codec);

        this.<kanzi.io.CompressedOutputStream: short entropyType> = $s1;

        $r2 = new kanzi.io.ByteFunctionFactory;

        specialinvoke $r2.<kanzi.io.ByteFunctionFactory: void <init>()>();

        $s2 = virtualinvoke $r2.<kanzi.io.ByteFunctionFactory: short getType(java.lang.String)>(transform);

        this.<kanzi.io.CompressedOutputStream: short transformType> = $s2;

        this.<kanzi.io.CompressedOutputStream: int blockSize> = blockSize;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(checksum);

        if checksum != 1 goto label3;

        $r4 = new kanzi.util.hash.XXHash32;

        specialinvoke $r4.<kanzi.util.hash.XXHash32: void <init>(int)>(1262571098);

        goto label4;

     label3:
        $r4 = null;

     label4:
        this.<kanzi.io.CompressedOutputStream: kanzi.util.hash.XXHash32 hasher> = $r4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(jobs);

        if jobs != 0 goto label5;

        $i3 = 1;

        goto label6;

     label5:
        $i3 = jobs;

     label6:
        this.<kanzi.io.CompressedOutputStream: int jobs> = $i3;

        this.<kanzi.io.CompressedOutputStream: java.util.concurrent.ExecutorService pool> = pool;

        $r6 = new kanzi.SliceByteArray;

        $i4 = this.<kanzi.io.CompressedOutputStream: int blockSize>;

        $i5 = this.<kanzi.io.CompressedOutputStream: int jobs>;

        $i6 = $i4 * $i5;

        $r7 = newarray (byte)[$i6];

        specialinvoke $r6.<kanzi.SliceByteArray: void <init>(byte[],int)>($r7, 0);

        this.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa> = $r6;

        $i7 = this.<kanzi.io.CompressedOutputStream: int jobs>;

        $i8 = 2 * $i7;

        $r8 = newarray (kanzi.SliceByteArray)[$i8];

        this.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray[] buffers> = $r8;

        $r9 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r9.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        this.<kanzi.io.CompressedOutputStream: java.util.concurrent.atomic.AtomicBoolean closed> = $r9;

        $r10 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r10.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        this.<kanzi.io.CompressedOutputStream: java.util.concurrent.atomic.AtomicBoolean initialized> = $r10;

        i#58 = 0;

     label7:
        $r11 = this.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray[] buffers>;

        $i9 = lengthof $r11;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#58);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        if i#58 >= $i9 goto label8;

        $r12 = this.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray[] buffers>;

        $r13 = new kanzi.SliceByteArray;

        $r14 = <kanzi.io.CompressedOutputStream: byte[] EMPTY_BYTE_ARRAY>;

        specialinvoke $r13.<kanzi.SliceByteArray: void <init>(byte[],int)>($r14, 0);

        $r12[i#58] = $r13;

        i#58 = i#58 + 1;

        goto label7;

     label8:
        $r15 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r15.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        this.<kanzi.io.CompressedOutputStream: java.util.concurrent.atomic.AtomicInteger blockId> = $r15;

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>(int)>(10);

        this.<kanzi.io.CompressedOutputStream: java.util.List listeners> = $r16;

        return;
    }

    public long getWritten()
    {
        kanzi.io.CompressedOutputStream this;
        kanzi.OutputBitStream $r0;
        long $l0, $l1, $l2;

        this := @this: kanzi.io.CompressedOutputStream;

        $r0 = this.<kanzi.io.CompressedOutputStream: kanzi.OutputBitStream obs>;

        $l0 = interfaceinvoke $r0.<kanzi.OutputBitStream: long written()>();

        $l1 = $l0 + 7L;

        $l2 = $l1 >> 3;

        return $l2;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        kanzi.io.CompressedOutputStream this;
        byte[] data, $r8;
        int len, lenChunk, off#1, $i0, $i1, remaining#20, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.IndexOutOfBoundsException $r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;
        kanzi.io.IOException $r2;
        kanzi.SliceByteArray $r3, $r4, $r5, $r6, $r7, $r9, $r10;
        byte $b11;

        this := @this: kanzi.io.CompressedOutputStream;

        data := @parameter0: byte[];

        off#1 := @parameter1: int;

        len := @parameter2: int;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(off#1);

        if off#1 < 0 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(len);

        if len < 0 goto label1;

        $i0 = len + off#1;

        $i1 = lengthof data;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i0 <= $i1 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r0;

     label2:
        $r1 = this.<kanzi.io.CompressedOutputStream: java.util.concurrent.atomic.AtomicBoolean closed>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 1 goto label3;

        $r2 = new kanzi.io.IOException;

        specialinvoke $r2.<kanzi.io.IOException: void <init>(java.lang.String,int)>("Stream closed", -12);

        throw $r2;

     label3:
        remaining#20 = len;

     label4:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(remaining#20);

        if remaining#20 <= 0 goto label8;

        $r3 = this.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $i2 = $r3.<kanzi.SliceByteArray: int index>;

        $i3 = $i2 + remaining#20;

        $r4 = this.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $i4 = $r4.<kanzi.SliceByteArray: int length>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i3 >= $i4 goto label5;

        $i5 = remaining#20;

        goto label6;

     label5:
        $r5 = this.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $i6 = $r5.<kanzi.SliceByteArray: int length>;

        $r6 = this.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $i7 = $r6.<kanzi.SliceByteArray: int index>;

        $i5 = $i6 - $i7;

     label6:
        lenChunk = $i5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lenChunk);

        if lenChunk <= 0 goto label7;

        $r7 = this.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $r8 = $r7.<kanzi.SliceByteArray: byte[] array>;

        $r9 = this.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $i8 = $r9.<kanzi.SliceByteArray: int index>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(data, off#1, $r8, $i8, lenChunk);

        $r10 = this.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $i9 = $r10.<kanzi.SliceByteArray: int index>;

        $i10 = $i9 + lenChunk;

        $r10.<kanzi.SliceByteArray: int index> = $i10;

        off#1 = off#1 + lenChunk;

        remaining#20 = remaining#20 - lenChunk;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(remaining#20);

        if remaining#20 != 0 goto label7;

        goto label8;

     label7:
        $b11 = data[off#1];

        virtualinvoke this.<kanzi.io.CompressedOutputStream: void write(int)>($b11);

        off#1 = off#1 + 1;

        remaining#20 = remaining#20 + -1;

        goto label4;

     label8:
        return;
    }

    public void write(int) throws java.io.IOException
    {
        kanzi.io.CompressedOutputStream this;
        int b, $i0, $i1, $i2, $i3;
        kanzi.SliceByteArray $r0, $r1, $r2, $r4;
        byte[] $r3;
        byte $b4;
        kanzi.BitStreamException $r5, e#22;
        kanzi.io.IOException $r6, $r8, e#29, $r10, $r12;
        java.lang.String $r7, $r13;
        java.lang.ArrayIndexOutOfBoundsException $r9, e#32;
        java.lang.Exception $r11, e#38;

        this := @this: kanzi.io.CompressedOutputStream;

        b := @parameter0: int;

     label1:
        $r0 = this.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $i0 = $r0.<kanzi.SliceByteArray: int index>;

        $r1 = this.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $i1 = $r1.<kanzi.SliceByteArray: int length>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i0 < $i1 goto label2;

        specialinvoke this.<kanzi.io.CompressedOutputStream: void processBlock()>();

     label2:
        $r2 = this.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $r3 = $r2.<kanzi.SliceByteArray: byte[] array>;

        $r4 = this.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $i2 = $r4.<kanzi.SliceByteArray: int index>;

        $i3 = $i2 + 1;

        $r4.<kanzi.SliceByteArray: int index> = $i3;

        $b4 = (byte) b;

        $r3[$i2] = $b4;

     label3:
        goto label8;

     label4:
        $r5 := @caughtexception;

        e#22 = $r5;

        $r6 = new kanzi.io.IOException;

        $r7 = virtualinvoke e#22.<kanzi.BitStreamException: java.lang.String getMessage()>();

        specialinvoke $r6.<kanzi.io.IOException: void <init>(java.lang.String,int)>($r7, -11);

        throw $r6;

     label5:
        $r8 := @caughtexception;

        e#29 = $r8;

        throw e#29;

     label6:
        $r9 := @caughtexception;

        e#32 = $r9;

        $r10 = new kanzi.io.IOException;

        specialinvoke $r10.<kanzi.io.IOException: void <init>(java.lang.String,int)>("Stream closed", -11);

        throw $r10;

     label7:
        $r11 := @caughtexception;

        e#38 = $r11;

        $r12 = new kanzi.io.IOException;

        $r13 = virtualinvoke e#38.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r12.<kanzi.io.IOException: void <init>(java.lang.String,int)>($r13, -127);

        throw $r12;

     label8:
        return;

        catch kanzi.BitStreamException from label1 to label3 with label4;
        catch kanzi.io.IOException from label1 to label3 with label5;
        catch java.lang.ArrayIndexOutOfBoundsException from label1 to label3 with label6;
        catch java.lang.Exception from label1 to label3 with label7;
    }

    private void processBlock() throws java.io.IOException
    {
        kanzi.io.CompressedOutputStream this;
        kanzi.Listener[] blockListeners, $r4;
        int dataLength, firstBlockId, sz, errorCode, $i0, $i1, $i2, jobId#31, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33;
        java.util.ArrayList tasks, $r8;
        kanzi.io.CompressedOutputStream$EncodingTask task, $r30;
        kanzi.io.CompressedOutputStream$Status status, status;
        java.util.Iterator l5;
        java.util.concurrent.Future result;
        kanzi.SliceByteArray $r0, $r6, $r7, $r10, $r11, $r13, $r15, $r17, $r20, $r23, $r24, $r26, $r28, $r32, $r34, $r38, $r50;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0, $z2, $z3;
        java.util.List $r2, $r3, $r45;
        java.lang.Object[] $r5;
        java.util.concurrent.atomic.AtomicInteger $r9, $r37;
        kanzi.SliceByteArray[] $r12, $r14, $r16, $r19, $r22, $r27, $r31, $r33;
        byte[] $r18, $r21, $r25, $r29;
        short $s21, $s22;
        kanzi.OutputBitStream $r35;
        kanzi.util.hash.XXHash32 $r36;
        java.lang.Object $r39, $r41, $r46, $r47;
        java.util.concurrent.Callable $r40;
        kanzi.io.IOException $r42, $r48, $r51, e#189, $r54;
        java.lang.String $r43, $r49, $r55;
        java.util.concurrent.ExecutorService $r44;
        java.lang.Exception $r52, e#192;
        kanzi.BitStreamException $r53;

        this := @this: kanzi.io.CompressedOutputStream;

        $r0 = this.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $i0 = $r0.<kanzi.SliceByteArray: int index>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 0 goto label01;

        return;

     label01:
        $r1 = this.<kanzi.io.CompressedOutputStream: java.util.concurrent.atomic.AtomicBoolean initialized>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean getAndSet(boolean)>(1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label02;

        virtualinvoke this.<kanzi.io.CompressedOutputStream: void writeHeader()>();

     label02:
        $r2 = this.<kanzi.io.CompressedOutputStream: java.util.List listeners>;

        $r3 = this.<kanzi.io.CompressedOutputStream: java.util.List listeners>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r4 = newarray (kanzi.Listener)[$i1];

        $r5 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        blockListeners = (kanzi.Listener[]) $r5;

        $r6 = this.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        dataLength = $r6.<kanzi.SliceByteArray: int index>;

        $r7 = this.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $r7.<kanzi.SliceByteArray: int index> = 0;

        $r8 = new java.util.ArrayList;

        $i2 = this.<kanzi.io.CompressedOutputStream: int jobs>;

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>($i2);

        tasks = $r8;

        $r9 = this.<kanzi.io.CompressedOutputStream: java.util.concurrent.atomic.AtomicInteger blockId>;

        firstBlockId = virtualinvoke $r9.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        jobId#31 = 0;

     label03:
        $i3 = this.<kanzi.io.CompressedOutputStream: int jobs>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(jobId#31);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if jobId#31 >= $i3 goto label08;

        $r10 = this.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $i4 = $r10.<kanzi.SliceByteArray: int index>;

        $i5 = this.<kanzi.io.CompressedOutputStream: int blockSize>;

        $i6 = $i4 + $i5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dataLength);

        if $i6 <= dataLength goto label04;

        $r11 = this.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $i7 = $r11.<kanzi.SliceByteArray: int index>;

        $i8 = dataLength - $i7;

        goto label05;

     label04:
        $i8 = this.<kanzi.io.CompressedOutputStream: int blockSize>;

     label05:
        sz = $i8;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(sz);

        if sz != 0 goto label06;

        goto label08;

     label06:
        $r12 = this.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray[] buffers>;

        $i9 = 2 * jobId#31;

        $r13 = $r12[$i9];

        $r13.<kanzi.SliceByteArray: int index> = 0;

        $r14 = this.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray[] buffers>;

        $i10 = 2 * jobId#31;

        $i11 = $i10 + 1;

        $r15 = $r14[$i11];

        $r15.<kanzi.SliceByteArray: int index> = 0;

        $r16 = this.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray[] buffers>;

        $i12 = 2 * jobId#31;

        $r17 = $r16[$i12];

        $r18 = $r17.<kanzi.SliceByteArray: byte[] array>;

        $i13 = lengthof $r18;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i13);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(sz);

        if $i13 >= sz goto label07;

        $r19 = this.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray[] buffers>;

        $i14 = 2 * jobId#31;

        $r20 = $r19[$i14];

        $r21 = newarray (byte)[sz];

        $r20.<kanzi.SliceByteArray: byte[] array> = $r21;

        $r22 = this.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray[] buffers>;

        $i15 = 2 * jobId#31;

        $r23 = $r22[$i15];

        $r23.<kanzi.SliceByteArray: int length> = sz;

     label07:
        $r24 = this.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $r25 = $r24.<kanzi.SliceByteArray: byte[] array>;

        $r26 = this.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $i16 = $r26.<kanzi.SliceByteArray: int index>;

        $r27 = this.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray[] buffers>;

        $i17 = 2 * jobId#31;

        $r28 = $r27[$i17];

        $r29 = $r28.<kanzi.SliceByteArray: byte[] array>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r25, $i16, $r29, 0, sz);

        $r30 = new kanzi.io.CompressedOutputStream$EncodingTask;

        $r31 = this.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray[] buffers>;

        $i18 = 2 * jobId#31;

        $r32 = $r31[$i18];

        $r33 = this.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray[] buffers>;

        $i19 = 2 * jobId#31;

        $i20 = $i19 + 1;

        $r34 = $r33[$i20];

        $s21 = this.<kanzi.io.CompressedOutputStream: short transformType>;

        $s22 = this.<kanzi.io.CompressedOutputStream: short entropyType>;

        $i23 = firstBlockId + jobId#31;

        $i24 = $i23 + 1;

        $r35 = this.<kanzi.io.CompressedOutputStream: kanzi.OutputBitStream obs>;

        $r36 = this.<kanzi.io.CompressedOutputStream: kanzi.util.hash.XXHash32 hasher>;

        $r37 = this.<kanzi.io.CompressedOutputStream: java.util.concurrent.atomic.AtomicInteger blockId>;

        $i25 = this.<kanzi.io.CompressedOutputStream: int blockSize>;

        specialinvoke $r30.<kanzi.io.CompressedOutputStream$EncodingTask: void <init>(kanzi.SliceByteArray,kanzi.SliceByteArray,int,short,short,int,kanzi.OutputBitStream,kanzi.util.hash.XXHash32,java.util.concurrent.atomic.AtomicInteger,kanzi.Listener[],int)>($r32, $r34, sz, $s21, $s22, $i24, $r35, $r36, $r37, blockListeners, $i25);

        task = $r30;

        interfaceinvoke tasks.<java.util.List: boolean add(java.lang.Object)>(task);

        $r38 = this.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $i26 = $r38.<kanzi.SliceByteArray: int index>;

        $i27 = $i26 + sz;

        $r38.<kanzi.SliceByteArray: int index> = $i27;

        jobId#31 = jobId#31 + 1;

        goto label03;

     label08:
        $i28 = this.<kanzi.io.CompressedOutputStream: int jobs>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i28);

        if $i28 != 1 goto label10;

        $r39 = interfaceinvoke tasks.<java.util.List: java.lang.Object get(int)>(0);

        $r40 = (java.util.concurrent.Callable) $r39;

        $r41 = interfaceinvoke $r40.<java.util.concurrent.Callable: java.lang.Object call()>();

        status = (kanzi.io.CompressedOutputStream$Status) $r41;

        $i29 = status.<kanzi.io.CompressedOutputStream$Status: int error>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i29);

        if $i29 == 0 goto label09;

        $r42 = new kanzi.io.IOException;

        $r43 = status.<kanzi.io.CompressedOutputStream$Status: java.lang.String msg>;

        $i30 = status.<kanzi.io.CompressedOutputStream$Status: int error>;

        specialinvoke $r42.<kanzi.io.IOException: void <init>(java.lang.String,int)>($r43, $i30);

        throw $r42;

     label09:
        goto label13;

     label10:
        $r44 = this.<kanzi.io.CompressedOutputStream: java.util.concurrent.ExecutorService pool>;

        $r45 = interfaceinvoke $r44.<java.util.concurrent.ExecutorService: java.util.List invokeAll(java.util.Collection)>(tasks);

        l5 = interfaceinvoke $r45.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z2 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label13;

        $r46 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        result = (java.util.concurrent.Future) $r46;

        $r47 = interfaceinvoke result.<java.util.concurrent.Future: java.lang.Object get()>();

        status = (kanzi.io.CompressedOutputStream$Status) $r47;

        $i31 = status.<kanzi.io.CompressedOutputStream$Status: int error>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i31);

        if $i31 == 0 goto label12;

        $r48 = new kanzi.io.IOException;

        $r49 = status.<kanzi.io.CompressedOutputStream$Status: java.lang.String msg>;

        $i32 = status.<kanzi.io.CompressedOutputStream$Status: int error>;

        specialinvoke $r48.<kanzi.io.IOException: void <init>(java.lang.String,int)>($r49, $i32);

        throw $r48;

     label12:
        goto label11;

     label13:
        $r50 = this.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $r50.<kanzi.SliceByteArray: int index> = 0;

     label14:
        goto label19;

     label15:
        $r51 := @caughtexception;

        e#189 = $r51;

        throw e#189;

     label16:
        $r52 := @caughtexception;

        e#192 = $r52;

        $z3 = e#192 instanceof kanzi.BitStreamException;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label17;

        $r53 = (kanzi.BitStreamException) e#192;

        $i33 = virtualinvoke $r53.<kanzi.BitStreamException: int getErrorCode()>();

        goto label18;

     label17:
        $i33 = -127;

     label18:
        errorCode = $i33;

        $r54 = new kanzi.io.IOException;

        $r55 = virtualinvoke e#192.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r54.<kanzi.io.IOException: void <init>(java.lang.String,int)>($r55, errorCode);

        throw $r54;

     label19:
        return;

        catch kanzi.io.IOException from label02 to label14 with label15;
        catch java.lang.Exception from label02 to label14 with label16;
    }

    protected void writeHeader() throws java.io.IOException
    {
        kanzi.io.CompressedOutputStream this;
        kanzi.OutputBitStream $r0, $r2, $r4, $r7, $r9, $r11, $r13;
        int $i0, $i1, $i3, $i6, $i9, $i10, $i11, $i13, $i14;
        kanzi.io.IOException $r1, $r3, $r6, $r8, $r10, $r12, $r14;
        kanzi.util.hash.XXHash32 $r5;
        long $l2, $l5, $l8, $l12;
        short $s4, $s7;

        this := @this: kanzi.io.CompressedOutputStream;

        $r0 = this.<kanzi.io.CompressedOutputStream: kanzi.OutputBitStream obs>;

        $i0 = interfaceinvoke $r0.<kanzi.OutputBitStream: int writeBits(long,int)>(1262571098L, 32);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 == 32 goto label1;

        $r1 = new kanzi.io.IOException;

        specialinvoke $r1.<kanzi.io.IOException: void <init>(java.lang.String,int)>("Cannot write bitstream type to header", -12);

        throw $r1;

     label1:
        $r2 = this.<kanzi.io.CompressedOutputStream: kanzi.OutputBitStream obs>;

        $i1 = interfaceinvoke $r2.<kanzi.OutputBitStream: int writeBits(long,int)>(4L, 7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 == 7 goto label2;

        $r3 = new kanzi.io.IOException;

        specialinvoke $r3.<kanzi.io.IOException: void <init>(java.lang.String,int)>("Cannot write bitstream version to header", -12);

        throw $r3;

     label2:
        $r4 = this.<kanzi.io.CompressedOutputStream: kanzi.OutputBitStream obs>;

        $r5 = this.<kanzi.io.CompressedOutputStream: kanzi.util.hash.XXHash32 hasher>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r5);

        if $r5 == null goto label3;

        $l2 = 1L;

        goto label4;

     label3:
        $l2 = 0L;

     label4:
        $i3 = interfaceinvoke $r4.<kanzi.OutputBitStream: int writeBits(long,int)>($l2, 1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 == 1 goto label5;

        $r6 = new kanzi.io.IOException;

        specialinvoke $r6.<kanzi.io.IOException: void <init>(java.lang.String,int)>("Cannot write checksum to header", -12);

        throw $r6;

     label5:
        $r7 = this.<kanzi.io.CompressedOutputStream: kanzi.OutputBitStream obs>;

        $s4 = this.<kanzi.io.CompressedOutputStream: short entropyType>;

        $l5 = (long) $s4;

        $i6 = interfaceinvoke $r7.<kanzi.OutputBitStream: int writeBits(long,int)>($l5, 5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if $i6 == 5 goto label6;

        $r8 = new kanzi.io.IOException;

        specialinvoke $r8.<kanzi.io.IOException: void <init>(java.lang.String,int)>("Cannot write entropy type to header", -12);

        throw $r8;

     label6:
        $r9 = this.<kanzi.io.CompressedOutputStream: kanzi.OutputBitStream obs>;

        $s7 = this.<kanzi.io.CompressedOutputStream: short transformType>;

        $l8 = (long) $s7;

        $i9 = interfaceinvoke $r9.<kanzi.OutputBitStream: int writeBits(long,int)>($l8, 16);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        if $i9 == 16 goto label7;

        $r10 = new kanzi.io.IOException;

        specialinvoke $r10.<kanzi.io.IOException: void <init>(java.lang.String,int)>("Cannot write transform types to header", -12);

        throw $r10;

     label7:
        $r11 = this.<kanzi.io.CompressedOutputStream: kanzi.OutputBitStream obs>;

        $i10 = this.<kanzi.io.CompressedOutputStream: int blockSize>;

        $i11 = $i10 >>> 4;

        $l12 = (long) $i11;

        $i13 = interfaceinvoke $r11.<kanzi.OutputBitStream: int writeBits(long,int)>($l12, 26);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i13);

        if $i13 == 26 goto label8;

        $r12 = new kanzi.io.IOException;

        specialinvoke $r12.<kanzi.io.IOException: void <init>(java.lang.String,int)>("Cannot write block size to header", -12);

        throw $r12;

     label8:
        $r13 = this.<kanzi.io.CompressedOutputStream: kanzi.OutputBitStream obs>;

        $i14 = interfaceinvoke $r13.<kanzi.OutputBitStream: int writeBits(long,int)>(0L, 9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i14);

        if $i14 == 9 goto label9;

        $r14 = new kanzi.io.IOException;

        specialinvoke $r14.<kanzi.io.IOException: void <init>(java.lang.String,int)>("Cannot write reserved bits to header", -12);

        throw $r14;

     label9:
        return;
    }

    public boolean addListener(kanzi.Listener)
    {
        kanzi.io.CompressedOutputStream this;
        kanzi.Listener bl;
        java.util.List $r0;
        boolean $z0;

        this := @this: kanzi.io.CompressedOutputStream;

        bl := @parameter0: kanzi.Listener;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(bl);

        if bl == null goto label1;

        $r0 = this.<kanzi.io.CompressedOutputStream: java.util.List listeners>;

        $z0 = interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(bl);

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void close() throws java.io.IOException
    {
        kanzi.io.CompressedOutputStream this;
        kanzi.BitStreamException e, $r5;
        byte[] $r0, $r10;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;
        kanzi.SliceByteArray $r2, $r9, $r11, $r12, $r15;
        int $i0, $i2, i#36, $i3;
        kanzi.OutputBitStream $r3, $r4;
        kanzi.io.IOException $r6;
        java.lang.String $r7;
        java.util.List $r8;
        kanzi.SliceByteArray[] $r13, $r14;

        this := @this: kanzi.io.CompressedOutputStream;

        $r1 = this.<kanzi.io.CompressedOutputStream: java.util.concurrent.atomic.AtomicBoolean closed>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean getAndSet(boolean)>(1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 1 goto label1;

        return;

     label1:
        $r2 = this.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $i0 = $r2.<kanzi.SliceByteArray: int index>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label2;

        specialinvoke this.<kanzi.io.CompressedOutputStream: void processBlock()>();

     label2:
        $r3 = this.<kanzi.io.CompressedOutputStream: kanzi.OutputBitStream obs>;

        interfaceinvoke $r3.<kanzi.OutputBitStream: int writeBits(long,int)>(128L, 8);

        $r4 = this.<kanzi.io.CompressedOutputStream: kanzi.OutputBitStream obs>;

        interfaceinvoke $r4.<kanzi.OutputBitStream: void close()>();

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        e = $r5;

        $r6 = new kanzi.io.IOException;

        $r7 = virtualinvoke e.<kanzi.BitStreamException: java.lang.String getMessage()>();

        $i2 = virtualinvoke e.<kanzi.BitStreamException: int getErrorCode()>();

        specialinvoke $r6.<kanzi.io.IOException: void <init>(java.lang.String,int)>($r7, $i2);

        throw $r6;

     label5:
        $r8 = this.<kanzi.io.CompressedOutputStream: java.util.List listeners>;

        interfaceinvoke $r8.<java.util.List: void clear()>();

        $r9 = this.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $r10 = <kanzi.io.CompressedOutputStream: byte[] EMPTY_BYTE_ARRAY>;

        $r9.<kanzi.SliceByteArray: byte[] array> = $r10;

        $r11 = this.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $r11.<kanzi.SliceByteArray: int length> = 0;

        $r12 = this.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray sa>;

        $r12.<kanzi.SliceByteArray: int index> = -1;

        i#36 = 0;

     label6:
        $r13 = this.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray[] buffers>;

        $i3 = lengthof $r13;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#36);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if i#36 >= $i3 goto label7;

        $r14 = this.<kanzi.io.CompressedOutputStream: kanzi.SliceByteArray[] buffers>;

        $r15 = new kanzi.SliceByteArray;

        $r0 = <kanzi.io.CompressedOutputStream: byte[] EMPTY_BYTE_ARRAY>;

        specialinvoke $r15.<kanzi.SliceByteArray: void <init>(byte[],int)>($r0, 0);

        $r14[i#36] = $r15;

        i#36 = i#36 + 1;

        goto label6;

     label7:
        return;

        catch kanzi.BitStreamException from label2 to label3 with label4;
    }


