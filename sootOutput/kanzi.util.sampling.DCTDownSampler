    public boolean supportsScalingFactor(int)
    {
        kanzi.util.sampling.DCTDownSampler this;
        int factor;
        boolean $z0;

        this := @this: kanzi.util.sampling.DCTDownSampler;

        factor := @parameter0: int;

        if factor != 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void subSample(int[], int[])
    {
        kanzi.util.sampling.DCTDownSampler this;
        int[] input, output, buf1, buf2, $r3;
        int h, w, st, count, step, stStep, count4, idx, val, offs#3, $i0, $i1, y#36, x#40, n#44, iOffs#46, j#48, i#52, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, i#143, i#150, $i25, $i26, $i27, $i28, oOffs#179, n#181, j#183, $i29, i#189, $i30, $i31, $i32, $i33, $i34, $i35;
        kanzi.SliceIntArray src, dst, $r0, $r1;
        kanzi.IntTransform $r2, $r4;

        this := @this: kanzi.util.sampling.DCTDownSampler;

        input := @parameter0: int[];

        output := @parameter1: int[];

        offs#3 = this.<kanzi.util.sampling.DCTDownSampler: int offset>;

        h = this.<kanzi.util.sampling.DCTDownSampler: int height>;

        w = this.<kanzi.util.sampling.DCTDownSampler: int width>;

        st = this.<kanzi.util.sampling.DCTDownSampler: int stride>;

        buf1 = this.<kanzi.util.sampling.DCTDownSampler: int[] buffer1>;

        buf2 = this.<kanzi.util.sampling.DCTDownSampler: int[] buffer2>;

        $i0 = this.<kanzi.util.sampling.DCTDownSampler: int dim>;

        $i1 = this.<kanzi.util.sampling.DCTDownSampler: int dim>;

        count = $i0 * $i1;

        $r0 = new kanzi.SliceIntArray;

        specialinvoke $r0.<kanzi.SliceIntArray: void <init>(int[],int)>(buf1, 0);

        src = $r0;

        $r1 = new kanzi.SliceIntArray;

        specialinvoke $r1.<kanzi.SliceIntArray: void <init>(int[],int)>(buf2, 0);

        dst = $r1;

        step = this.<kanzi.util.sampling.DCTDownSampler: int dim>;

        stStep = st * step;

        count4 = count >> 2;

        y#36 = 0;

     label01:
        if y#36 >= h goto label18;

        x#40 = 0;

     label02:
        if x#40 >= w goto label17;

        n#44 = 0;

        iOffs#46 = offs#3;

        j#48 = 0;

     label03:
        if j#48 >= step goto label06;

        i#52 = 0;

     label04:
        if i#52 >= step goto label05;

        $i2 = iOffs#46 + x#40;

        idx = $i2 + i#52;

        $i3 = input[idx];

        buf1[n#44] = $i3;

        $i4 = n#44 + 1;

        $i5 = idx + 1;

        $i6 = input[$i5];

        buf1[$i4] = $i6;

        $i7 = n#44 + 2;

        $i8 = idx + 2;

        $i9 = input[$i8];

        buf1[$i7] = $i9;

        $i10 = n#44 + 3;

        $i11 = idx + 3;

        $i12 = input[$i11];

        buf1[$i10] = $i12;

        $i13 = n#44 + 4;

        $i14 = idx + 4;

        $i15 = input[$i14];

        buf1[$i13] = $i15;

        $i16 = n#44 + 5;

        $i17 = idx + 5;

        $i18 = input[$i17];

        buf1[$i16] = $i18;

        $i19 = n#44 + 6;

        $i20 = idx + 6;

        $i21 = input[$i20];

        buf1[$i19] = $i21;

        $i22 = n#44 + 7;

        $i23 = idx + 7;

        $i24 = input[$i23];

        buf1[$i22] = $i24;

        n#44 = n#44 + 8;

        i#52 = i#52 + 8;

        goto label04;

     label05:
        iOffs#46 = iOffs#46 + st;

        j#48 = j#48 + 1;

        goto label03;

     label06:
        src.<kanzi.SliceIntArray: int index> = 0;

        dst.<kanzi.SliceIntArray: int index> = 0;

        src.<kanzi.SliceIntArray: int length> = count;

        $r2 = this.<kanzi.util.sampling.DCTDownSampler: kanzi.IntTransform fdct>;

        interfaceinvoke $r2.<kanzi.IntTransform: boolean forward(kanzi.SliceIntArray,kanzi.SliceIntArray)>(src, dst);

        i#143 = count4;

     label07:
        if i#143 >= count goto label08;

        buf1[i#143] = 0;

        i#143 = i#143 + 1;

        goto label07;

     label08:
        i#150 = 0;

     label09:
        if i#150 >= count4 goto label10;

        $r3 = this.<kanzi.util.sampling.DCTDownSampler: int[] scan>;

        $i25 = $r3[i#150];

        $i26 = buf2[$i25];

        buf1[i#150] = $i26;

        i#150 = i#150 + 1;

        goto label09;

     label10:
        src.<kanzi.SliceIntArray: int index> = 0;

        dst.<kanzi.SliceIntArray: int index> = 0;

        src.<kanzi.SliceIntArray: int length> = count4;

        $r4 = this.<kanzi.util.sampling.DCTDownSampler: kanzi.IntTransform idct>;

        interfaceinvoke $r4.<kanzi.IntTransform: boolean inverse(kanzi.SliceIntArray,kanzi.SliceIntArray)>(src, dst);

        $i27 = offs#3 >> 2;

        $i28 = x#40 >> 1;

        oOffs#179 = $i27 + $i28;

        n#181 = 0;

        j#183 = 0;

     label11:
        $i29 = j#183 + j#183;

        if $i29 >= step goto label16;

        i#189 = 0;

     label12:
        $i30 = i#189 + i#189;

        if $i30 >= step goto label15;

        val = buf2[n#181];

        $i31 = oOffs#179 + i#189;

        if val < 255 goto label13;

        $i32 = 255;

        goto label14;

     label13:
        $i33 = val >> 31;

        $i34 = $i33 ^ -1;

        $i32 = val & $i34;

     label14:
        output[$i31] = $i32;

        i#189 = i#189 + 1;

        n#181 = n#181 + 1;

        goto label12;

     label15:
        $i35 = st >> 1;

        oOffs#179 = oOffs#179 + $i35;

        j#183 = j#183 + 1;

        goto label11;

     label16:
        x#40 = x#40 + step;

        goto label02;

     label17:
        offs#3 = offs#3 + stStep;

        y#36 = y#36 + step;

        goto label01;

     label18:
        return;
    }

    public void subSampleHorizontal(int[], int[])
    {
        kanzi.util.sampling.DCTDownSampler this;
        int[] input, output;
        java.lang.UnsupportedOperationException $r0;

        this := @this: kanzi.util.sampling.DCTDownSampler;

        input := @parameter0: int[];

        output := @parameter1: int[];

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Not supported.");

        throw $r0;
    }


