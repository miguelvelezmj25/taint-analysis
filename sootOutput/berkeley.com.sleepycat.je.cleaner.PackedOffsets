    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "berkeley/com/sleepycat/je/cleaner/PackedOffsets";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <berkeley.com.sleepycat.je.cleaner.PackedOffsets: boolean $assertionsDisabled> = $z1;

        return;
    }

    public void <init>()
    {
        berkeley.com.sleepycat.je.cleaner.PackedOffsets this;
        boolean $z0;
        int $i0;
        java.lang.AssertionError $r0;

        this := @this: berkeley.com.sleepycat.je.cleaner.PackedOffsets;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $z0 = <berkeley.com.sleepycat.je.cleaner.PackedOffsets: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $i0 = virtualinvoke this.<berkeley.com.sleepycat.je.cleaner.PackedOffsets: int getExtraMemorySize()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 == 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        return;
    }

    public int getExtraMemorySize()
    {
        berkeley.com.sleepycat.je.cleaner.PackedOffsets this;
        short[] $r0, $r1;
        int $i0, $i1;

        this := @this: berkeley.com.sleepycat.je.cleaner.PackedOffsets;

        $r0 = this.<berkeley.com.sleepycat.je.cleaner.PackedOffsets: short[] data>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label1;

        $r1 = this.<berkeley.com.sleepycat.je.cleaner.PackedOffsets: short[] data>;

        $i0 = lengthof $r1;

        $i1 = staticinvoke <berkeley.com.sleepycat.je.dbi.MemoryBudget: int shortArraySize(int)>($i0);

        return $i1;

     label1:
        return 0;
    }

    public void pack(long[])
    {
        berkeley.com.sleepycat.je.cleaner.PackedOffsets this;
        long[] offsets;
        short[] newData, $r0, $r1;
        long val, priorVal#10, $l3;
        int $i0, $i1, dataIndex#8, i#12, $i2, $i4;

        this := @this: berkeley.com.sleepycat.je.cleaner.PackedOffsets;

        offsets := @parameter0: long[];

        $i0 = lengthof offsets;

        $i1 = $i0 * 3;

        newData = newarray (short)[$i1];

        staticinvoke <java.util.Arrays: void sort(long[])>(offsets);

        dataIndex#8 = 0;

        priorVal#10 = 0L;

        i#12 = 0;

     label1:
        $i2 = lengthof offsets;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#12 >= $i2 goto label2;

        val = offsets[i#12];

        $l3 = val - priorVal#10;

        dataIndex#8 = specialinvoke this.<berkeley.com.sleepycat.je.cleaner.PackedOffsets: int append(short[],int,long)>(newData, dataIndex#8, $l3);

        priorVal#10 = val;

        i#12 = i#12 + 1;

        goto label1;

     label2:
        $r0 = newarray (short)[dataIndex#8];

        this.<berkeley.com.sleepycat.je.cleaner.PackedOffsets: short[] data> = $r0;

        $r1 = this.<berkeley.com.sleepycat.je.cleaner.PackedOffsets: short[] data>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(newData, 0, $r1, 0, dataIndex#8);

        $i4 = lengthof offsets;

        this.<berkeley.com.sleepycat.je.cleaner.PackedOffsets: int size> = $i4;

        return;
    }

    private int append(short[], int, long)
    {
        berkeley.com.sleepycat.je.cleaner.PackedOffsets this;
        short[] 'to';
        short s, $s6;
        int index#1, $i2, $i4, $i5, index#27;
        long val#2, $l1;
        boolean $z0;
        byte $b0, $b3;
        java.lang.AssertionError $r0;

        this := @this: berkeley.com.sleepycat.je.cleaner.PackedOffsets;

        'to' := @parameter0: short[];

        index#1 := @parameter1: int;

        val#2 := @parameter2: long;

        $z0 = <berkeley.com.sleepycat.je.cleaner.PackedOffsets: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $b0 = val#2 cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 >= 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $l1 = val#2 & 32767L;

        $i2 = (int) $l1;

        s = (short) $i2;

        val#2 = val#2 >>> 15;

        $b3 = val#2 cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b3);

        if $b3 <= 0 goto label2;

        $i4 = index#1;

        index#1 = index#1 + 1;

        $i5 = -1 - s;

        $s6 = (short) $i5;

        'to'[$i4] = $s6;

        goto label3;

     label2:
        index#27 = index#1 + 1;

        'to'[index#1] = s;

        goto label4;

     label3:
        goto label1;

     label4:
        return index#27;
    }

    public void writeToLog(java.nio.ByteBuffer)
    {
        berkeley.com.sleepycat.je.cleaner.PackedOffsets this;
        java.nio.ByteBuffer buf;
        int $i0, $i1, i#11, $i2;
        short[] $r0, $r1, $r2, $r3;
        short $s3;

        this := @this: berkeley.com.sleepycat.je.cleaner.PackedOffsets;

        buf := @parameter0: java.nio.ByteBuffer;

        $i0 = this.<berkeley.com.sleepycat.je.cleaner.PackedOffsets: int size>;

        staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: void writePackedInt(java.nio.ByteBuffer,int)>(buf, $i0);

        $r0 = this.<berkeley.com.sleepycat.je.cleaner.PackedOffsets: short[] data>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label3;

        $r1 = this.<berkeley.com.sleepycat.je.cleaner.PackedOffsets: short[] data>;

        $i1 = lengthof $r1;

        staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: void writePackedInt(java.nio.ByteBuffer,int)>(buf, $i1);

        i#11 = 0;

     label1:
        $r2 = this.<berkeley.com.sleepycat.je.cleaner.PackedOffsets: short[] data>;

        $i2 = lengthof $r2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#11);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#11 >= $i2 goto label2;

        $r3 = this.<berkeley.com.sleepycat.je.cleaner.PackedOffsets: short[] data>;

        $s3 = $r3[i#11];

        staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: void writeShort(java.nio.ByteBuffer,short)>(buf, $s3);

        i#11 = i#11 + 1;

        goto label1;

     label2:
        goto label4;

     label3:
        staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: void writePackedInt(java.nio.ByteBuffer,int)>(buf, 0);

     label4:
        return;
    }

    public int getLogSize()
    {
        berkeley.com.sleepycat.je.cleaner.PackedOffsets this;
        int len, $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        short[] $r0, $r1;

        this := @this: berkeley.com.sleepycat.je.cleaner.PackedOffsets;

        $r0 = this.<berkeley.com.sleepycat.je.cleaner.PackedOffsets: short[] data>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label1;

        $r1 = this.<berkeley.com.sleepycat.je.cleaner.PackedOffsets: short[] data>;

        $i0 = lengthof $r1;

        goto label2;

     label1:
        $i0 = 0;

     label2:
        len = $i0;

        $i1 = this.<berkeley.com.sleepycat.je.cleaner.PackedOffsets: int size>;

        $i2 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int getPackedIntLogSize(int)>($i1);

        $i3 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int getPackedIntLogSize(int)>(len);

        $i4 = $i2 + $i3;

        $i5 = len * 2;

        $i6 = $i4 + $i5;

        return $i6;
    }

    berkeley.com.sleepycat.je.cleaner.PackedOffsets$Iterator iterator()
    {
        berkeley.com.sleepycat.je.cleaner.PackedOffsets this;
        berkeley.com.sleepycat.je.cleaner.PackedOffsets$Iterator $r0;

        this := @this: berkeley.com.sleepycat.je.cleaner.PackedOffsets;

        $r0 = new berkeley.com.sleepycat.je.cleaner.PackedOffsets$Iterator;

        specialinvoke $r0.<berkeley.com.sleepycat.je.cleaner.PackedOffsets$Iterator: void <init>(berkeley.com.sleepycat.je.cleaner.PackedOffsets,berkeley.com.sleepycat.je.cleaner.PackedOffsets$1)>(this, null);

        return $r0;
    }

    static short[] access$100(berkeley.com.sleepycat.je.cleaner.PackedOffsets)
    {
        berkeley.com.sleepycat.je.cleaner.PackedOffsets x0;
        short[] $r0;

        x0 := @parameter0: berkeley.com.sleepycat.je.cleaner.PackedOffsets;

        $r0 = x0.<berkeley.com.sleepycat.je.cleaner.PackedOffsets: short[] data>;

        return $r0;
    }

    long[] toArray()
    {
        berkeley.com.sleepycat.je.cleaner.PackedOffsets this;
        long[] offsets;
        berkeley.com.sleepycat.je.cleaner.PackedOffsets$Iterator iter;
        int $i0, index#5, $i1, $i3;
        boolean $z0, $z1;
        long $l2;
        java.lang.AssertionError $r0;

        this := @this: berkeley.com.sleepycat.je.cleaner.PackedOffsets;

        $i0 = this.<berkeley.com.sleepycat.je.cleaner.PackedOffsets: int size>;

        offsets = newarray (long)[$i0];

        index#5 = 0;

        iter = virtualinvoke this.<berkeley.com.sleepycat.je.cleaner.PackedOffsets: berkeley.com.sleepycat.je.cleaner.PackedOffsets$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke iter.<berkeley.com.sleepycat.je.cleaner.PackedOffsets$Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $i1 = index#5;

        index#5 = index#5 + 1;

        $l2 = virtualinvoke iter.<berkeley.com.sleepycat.je.cleaner.PackedOffsets$Iterator: long next()>();

        offsets[$i1] = $l2;

        goto label1;

     label2:
        $z1 = <berkeley.com.sleepycat.je.cleaner.PackedOffsets: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label3;

        $i3 = this.<berkeley.com.sleepycat.je.cleaner.PackedOffsets: int size>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(index#5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if index#5 == $i3 goto label3;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label3:
        return offsets;
    }

    public java.lang.String toString()
    {
        berkeley.com.sleepycat.je.cleaner.PackedOffsets this;
        java.lang.StringBuilder buf, $r0;
        java.lang.String $r1;

        this := @this: berkeley.com.sleepycat.je.cleaner.PackedOffsets;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        buf = $r0;

        virtualinvoke this.<berkeley.com.sleepycat.je.cleaner.PackedOffsets: void dumpLog(java.lang.StringBuilder,boolean)>(buf, 1);

        $r1 = virtualinvoke buf.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    public void dumpLog(java.lang.StringBuilder, boolean)
    {
        berkeley.com.sleepycat.je.cleaner.PackedOffsets this;
        java.lang.StringBuilder buf;
        boolean verbose, $z0;
        berkeley.com.sleepycat.je.cleaner.PackedOffsets$Iterator i;
        int $i0, $i1;
        long $l2;
        java.lang.String $r4;

        this := @this: berkeley.com.sleepycat.je.cleaner.PackedOffsets;

        buf := @parameter0: java.lang.StringBuilder;

        verbose := @parameter1: boolean;

        $i0 = this.<berkeley.com.sleepycat.je.cleaner.PackedOffsets: int size>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label3;

        i = virtualinvoke this.<berkeley.com.sleepycat.je.cleaner.PackedOffsets: berkeley.com.sleepycat.je.cleaner.PackedOffsets$Iterator iterator()>();

        virtualinvoke buf.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<offsets size=\"");

        $i1 = this.<berkeley.com.sleepycat.je.cleaner.PackedOffsets: int size>;

        virtualinvoke buf.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke buf.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\">");

     label1:
        $z0 = virtualinvoke i.<berkeley.com.sleepycat.je.cleaner.PackedOffsets$Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        virtualinvoke buf.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0x");

        $l2 = virtualinvoke i.<berkeley.com.sleepycat.je.cleaner.PackedOffsets$Iterator: long next()>();

        $r4 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l2);

        virtualinvoke buf.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke buf.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        goto label1;

     label2:
        virtualinvoke buf.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</offsets>");

        goto label4;

     label3:
        virtualinvoke buf.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<offsets size=\"0\"/>");

     label4:
        return;
    }


