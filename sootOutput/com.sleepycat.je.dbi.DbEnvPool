    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        com.sleepycat.je.dbi.DbEnvPool $r1;

        $r0 = class "com/sleepycat/je/dbi/DbEnvPool";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sleepycat.je.dbi.DbEnvPool: boolean $assertionsDisabled> = $z1;

        $r1 = new com.sleepycat.je.dbi.DbEnvPool;

        specialinvoke $r1.<com.sleepycat.je.dbi.DbEnvPool: void <init>()>();

        <com.sleepycat.je.dbi.DbEnvPool: com.sleepycat.je.dbi.DbEnvPool pool> = $r1;

        return;
    }

    public static com.sleepycat.je.dbi.DbEnvPool getInstance()
    {
        com.sleepycat.je.dbi.DbEnvPool $r0;

        $r0 = <com.sleepycat.je.dbi.DbEnvPool: com.sleepycat.je.dbi.DbEnvPool pool>;

        return $r0;
    }

    public com.sleepycat.je.dbi.EnvironmentImpl getEnvironment(java.io.File, com.sleepycat.je.EnvironmentConfig, boolean, com.sleepycat.je.dbi.RepConfigProxy) throws com.sleepycat.je.EnvironmentNotFoundException, com.sleepycat.je.EnvironmentLockedException
    {
        com.sleepycat.je.dbi.DbEnvPool this, l7, l13, l8#95, l8#107;
        java.io.File envHome;
        com.sleepycat.je.EnvironmentConfig config;
        boolean checkImmutableParams, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        com.sleepycat.je.dbi.RepConfigProxy repConfigProxy;
        com.sleepycat.je.dbi.EnvironmentImpl sharedCacheEnv, envImpl#16, $r12, $r13;
        java.lang.Throwable l9, l10, l11, l12, l14, $r16, $r19, $r23, $r24, $r28;
        java.lang.String environmentKey#10, $r8, $r10;
        java.util.Map $r1, $r15, $r21, $r26;
        java.lang.Object $r2;
        java.lang.UnsupportedOperationException $r3, $r4, $r5;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.util.Properties $r11;
        java.lang.AssertionError $r14;
        com.sleepycat.je.utilint.TestHook $r17;
        java.util.Set $r22, $r27;

        this := @this: com.sleepycat.je.dbi.DbEnvPool;

        envHome := @parameter0: java.io.File;

        config := @parameter1: com.sleepycat.je.EnvironmentConfig;

        checkImmutableParams := @parameter2: boolean;

        repConfigProxy := @parameter3: com.sleepycat.je.dbi.RepConfigProxy;

        l7 = this;

        entermonitor this;

     label01:
        environmentKey#10 = virtualinvoke this.<com.sleepycat.je.dbi.DbEnvPool: java.lang.String getEnvironmentMapKey(java.io.File)>(envHome);

        $r1 = this.<com.sleepycat.je.dbi.DbEnvPool: java.util.Map envs>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(environmentKey#10);

        envImpl#16 = (com.sleepycat.je.dbi.EnvironmentImpl) $r2;

        if envImpl#16 == null goto label06;

        $z0 = virtualinvoke envImpl#16.<com.sleepycat.je.dbi.EnvironmentImpl: boolean isReplicated()>();

        if $z0 != 0 goto label02;

        if repConfigProxy == null goto label02;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This environment was previously opened as a standalone environment. It cannot be re-opened for replication.");

        throw $r3;

     label02:
        $z1 = virtualinvoke envImpl#16.<com.sleepycat.je.dbi.EnvironmentImpl: boolean isReplicated()>();

        if $z1 == 0 goto label03;

        if repConfigProxy != null goto label03;

        $z2 = virtualinvoke config.<com.sleepycat.je.EnvironmentConfig: boolean getReadOnly()>();

        if $z2 != 0 goto label03;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This environment was previously opened for replication. It cannot be re-opened in read/write mode for standalone operation.");

        throw $r4;

     label03:
        $z3 = virtualinvoke envImpl#16.<com.sleepycat.je.dbi.EnvironmentImpl: boolean isArbiter()>();

        if $z3 == 0 goto label04;

        $r5 = new java.lang.UnsupportedOperationException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("An Arbiter is currently using this directory. ");

        $r8 = virtualinvoke envHome.<java.io.File: java.lang.String getAbsolutePath()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label04:
        virtualinvoke envImpl#16.<com.sleepycat.je.dbi.EnvironmentImpl: void checkIfInvalid()>();

        if checkImmutableParams == 0 goto label05;

        $r11 = staticinvoke <com.sleepycat.je.DbInternal: java.util.Properties getProps(com.sleepycat.je.EnvironmentMutableConfig)>(config);

        virtualinvoke envImpl#16.<com.sleepycat.je.dbi.EnvironmentImpl: void checkImmutablePropsForEquality(java.util.Properties)>($r11);

     label05:
        virtualinvoke envImpl#16.<com.sleepycat.je.dbi.EnvironmentImpl: void incOpenCount()>();

        goto label12;

     label06:
        $z4 = virtualinvoke config.<com.sleepycat.je.EnvironmentConfig: boolean getSharedCache()>();

        if $z4 == 0 goto label07;

        $r12 = specialinvoke this.<com.sleepycat.je.dbi.DbEnvPool: com.sleepycat.je.dbi.EnvironmentImpl getAnySharedCacheEnv()>();

        goto label08;

     label07:
        $r12 = null;

     label08:
        sharedCacheEnv = $r12;

        if repConfigProxy != null goto label09;

        $r13 = new com.sleepycat.je.dbi.EnvironmentImpl;

        specialinvoke $r13.<com.sleepycat.je.dbi.EnvironmentImpl: void <init>(java.io.File,com.sleepycat.je.EnvironmentConfig,com.sleepycat.je.dbi.EnvironmentImpl)>(envHome, config, sharedCacheEnv);

        goto label10;

     label09:
        $r13 = specialinvoke this.<com.sleepycat.je.dbi.DbEnvPool: com.sleepycat.je.dbi.EnvironmentImpl loadRepImpl(java.io.File,com.sleepycat.je.EnvironmentConfig,com.sleepycat.je.dbi.EnvironmentImpl,com.sleepycat.je.dbi.RepConfigProxy)>(envHome, config, sharedCacheEnv, repConfigProxy);

     label10:
        envImpl#16 = $r13;

        $z5 = <com.sleepycat.je.dbi.DbEnvPool: boolean $assertionsDisabled>;

        if $z5 != 0 goto label11;

        $z6 = virtualinvoke config.<com.sleepycat.je.EnvironmentConfig: boolean getSharedCache()>();

        $z7 = virtualinvoke envImpl#16.<com.sleepycat.je.dbi.EnvironmentImpl: boolean getSharedCache()>();

        if $z6 == $z7 goto label11;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label11:
        virtualinvoke envImpl#16.<com.sleepycat.je.dbi.EnvironmentImpl: void incOpenCount()>();

        $r15 = this.<com.sleepycat.je.dbi.DbEnvPool: java.util.Map envs>;

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(environmentKey#10, envImpl#16);

        specialinvoke this.<com.sleepycat.je.dbi.DbEnvPool: void addToSharedCacheEnvs(com.sleepycat.je.dbi.EnvironmentImpl)>(envImpl#16);

     label12:
        exitmonitor l7;

     label13:
        goto label17;

     label14:
        $r16 := @caughtexception;

     label15:
        l9 = $r16;

        exitmonitor l7;

     label16:
        throw l9;

     label17:
        $r17 = this.<com.sleepycat.je.dbi.DbEnvPool: com.sleepycat.je.utilint.TestHook beforeFinishInitHook>;

        staticinvoke <com.sleepycat.je.utilint.TestHookExecute: boolean doHookIfSet(com.sleepycat.je.utilint.TestHook,java.lang.Object)>($r17, envImpl#16);

     label18:
        $z8 = virtualinvoke envImpl#16.<com.sleepycat.je.dbi.EnvironmentImpl: boolean finishInit(com.sleepycat.je.EnvironmentConfig)>(config);

        if $z8 == 0 goto label24;

        l8#95 = this;

        entermonitor this;

     label19:
        specialinvoke this.<com.sleepycat.je.dbi.DbEnvPool: void finishAdditionOfSharedCacheEnv(com.sleepycat.je.dbi.EnvironmentImpl)>(envImpl#16);

        exitmonitor l8#95;

     label20:
        goto label24;

     label21:
        $r19 := @caughtexception;

     label22:
        l10 = $r19;

        exitmonitor l8#95;

     label23:
        throw l10;

     label24:
        goto label34;

     label25:
        $r24 := @caughtexception;

     label26:
        l12 = $r24;

     label27:
        l13 = this;

        entermonitor this;

     label28:
        $r26 = this.<com.sleepycat.je.dbi.DbEnvPool: java.util.Map envs>;

        interfaceinvoke $r26.<java.util.Map: java.lang.Object remove(java.lang.Object)>(environmentKey#10);

        $r27 = this.<com.sleepycat.je.dbi.DbEnvPool: java.util.Set sharedCacheEnvs>;

        interfaceinvoke $r27.<java.util.Set: boolean remove(java.lang.Object)>(envImpl#16);

        exitmonitor l13;

     label29:
        goto label33;

     label30:
        $r28 := @caughtexception;

     label31:
        l14 = $r28;

        exitmonitor l13;

     label32:
        throw l14;

     label33:
        throw l12;

     label34:
        return envImpl#16;

        catch java.lang.Throwable from label01 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label22 to label23 with label21;
        catch java.lang.Throwable from label18 to label24 with label25;
        catch java.lang.Throwable from label28 to label29 with label30;
        catch java.lang.Throwable from label31 to label32 with label30;
        catch java.lang.Throwable from label26 to label27 with label25;
    }

    public synchronized int getNSharedCacheEnvironments()
    {
        com.sleepycat.je.dbi.DbEnvPool this;
        java.util.Set $r0;
        int $i0;

        this := @this: com.sleepycat.je.dbi.DbEnvPool;

        $r0 = this.<com.sleepycat.je.dbi.DbEnvPool: java.util.Set sharedCacheEnvs>;

        $i0 = interfaceinvoke $r0.<java.util.Set: int size()>();

        return $i0;
    }

    java.lang.String getEnvironmentMapKey(java.io.File) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.dbi.DbEnvPool this;
        java.io.File file;
        java.io.IOException e, $r1;
        java.lang.String $r0;
        com.sleepycat.je.EnvironmentFailureException $r2;

        this := @this: com.sleepycat.je.dbi.DbEnvPool;

        file := @parameter0: java.io.File;

     label1:
        $r0 = virtualinvoke file.<java.io.File: java.lang.String getCanonicalPath()>();

     label2:
        return $r0;

     label3:
        $r1 := @caughtexception;

        e = $r1;

        $r2 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedException(java.lang.Exception)>(e);

        throw $r2;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private com.sleepycat.je.dbi.EnvironmentImpl getAnySharedCacheEnv()
    {
        com.sleepycat.je.dbi.DbEnvPool this;
        java.util.Iterator iter;
        java.util.Set $r0;
        boolean $z0;
        java.lang.Object $r1;
        com.sleepycat.je.dbi.EnvironmentImpl $r2;

        this := @this: com.sleepycat.je.dbi.DbEnvPool;

        $r0 = this.<com.sleepycat.je.dbi.DbEnvPool: java.util.Set sharedCacheEnvs>;

        iter = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke iter.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r1 = interfaceinvoke iter.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (com.sleepycat.je.dbi.EnvironmentImpl) $r1;

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    private com.sleepycat.je.dbi.EnvironmentImpl loadRepImpl(java.io.File, com.sleepycat.je.EnvironmentConfig, com.sleepycat.je.dbi.EnvironmentImpl, com.sleepycat.je.dbi.RepConfigProxy) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.dbi.DbEnvPool this;
        java.io.File envHome;
        com.sleepycat.je.EnvironmentConfig config;
        com.sleepycat.je.dbi.EnvironmentImpl sharedCacheEnv, $r8;
        com.sleepycat.je.dbi.RepConfigProxy repConfigProxy;
        java.lang.String repClassName, envImplName, repProxy;
        java.lang.Class repClass, $r1, $r2, $r3, $r4;
        java.lang.Class[] $r0;
        java.lang.reflect.Constructor $r5;
        java.lang.Object[] $r6;
        java.lang.Object $r7;
        java.lang.reflect.InvocationTargetException $r9, e#43;
        java.lang.Throwable $r10, $r11;
        boolean $z0;
        java.lang.RuntimeException $r12;
        com.sleepycat.je.EnvironmentFailureException $r13, $r15;
        java.lang.Exception $r14, e#53;

        this := @this: com.sleepycat.je.dbi.DbEnvPool;

        envHome := @parameter0: java.io.File;

        config := @parameter1: com.sleepycat.je.EnvironmentConfig;

        sharedCacheEnv := @parameter2: com.sleepycat.je.dbi.EnvironmentImpl;

        repConfigProxy := @parameter3: com.sleepycat.je.dbi.RepConfigProxy;

     label1:
        repClass = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.sleepycat.je.rep.impl.RepImpl");

        $r0 = newarray (java.lang.Class)[4];

        $r1 = virtualinvoke envHome.<java.lang.Object: java.lang.Class getClass()>();

        $r0[0] = $r1;

        $r2 = virtualinvoke config.<java.lang.Object: java.lang.Class getClass()>();

        $r0[1] = $r2;

        $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.sleepycat.je.dbi.EnvironmentImpl");

        $r0[2] = $r3;

        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.sleepycat.je.dbi.RepConfigProxy");

        $r0[3] = $r4;

        $r5 = virtualinvoke repClass.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r0);

        $r6 = newarray (java.lang.Object)[4];

        $r6[0] = envHome;

        $r6[1] = config;

        $r6[2] = sharedCacheEnv;

        $r6[3] = repConfigProxy;

        $r7 = virtualinvoke $r5.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r6);

        $r8 = (com.sleepycat.je.dbi.EnvironmentImpl) $r7;

     label2:
        return $r8;

     label3:
        $r9 := @caughtexception;

        e#43 = $r9;

        $r10 = virtualinvoke e#43.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        $z0 = $r10 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label4;

        $r11 = virtualinvoke e#43.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        $r12 = (java.lang.RuntimeException) $r11;

        throw $r12;

     label4:
        $r13 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedException(java.lang.Exception)>(e#43);

        throw $r13;

     label5:
        $r14 := @caughtexception;

        e#53 = $r14;

        $r15 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedException(java.lang.Exception)>(e#53);

        throw $r15;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label5;
    }

    private void addToSharedCacheEnvs(com.sleepycat.je.dbi.EnvironmentImpl) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.dbi.DbEnvPool this;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        boolean $z0, $z1;
        java.util.Set $r0, $r2;
        com.sleepycat.je.EnvironmentFailureException $r1;

        this := @this: com.sleepycat.je.dbi.DbEnvPool;

        envImpl := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        $z0 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: boolean getSharedCache()>();

        if $z0 == 0 goto label2;

        $r0 = this.<com.sleepycat.je.dbi.DbEnvPool: java.util.Set sharedCacheEnvs>;

        $z1 = interfaceinvoke $r0.<java.util.Set: boolean contains(java.lang.Object)>(envImpl);

        if $z1 == 0 goto label1;

        $r1 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedState()>();

        throw $r1;

     label1:
        $r2 = this.<com.sleepycat.je.dbi.DbEnvPool: java.util.Set sharedCacheEnvs>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(envImpl);

     label2:
        return;
    }

    private void finishAdditionOfSharedCacheEnv(com.sleepycat.je.dbi.EnvironmentImpl) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.dbi.DbEnvPool this;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        boolean $z0, $z1, $z2, $z3;
        java.util.Set $r0;
        com.sleepycat.je.EnvironmentFailureException $r1;
        com.sleepycat.je.evictor.Evictor $r2;
        java.lang.AssertionError $r3;

        this := @this: com.sleepycat.je.dbi.DbEnvPool;

        envImpl := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        $z0 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: boolean getSharedCache()>();

        if $z0 == 0 goto label3;

        $r0 = this.<com.sleepycat.je.dbi.DbEnvPool: java.util.Set sharedCacheEnvs>;

        $z1 = interfaceinvoke $r0.<java.util.Set: boolean contains(java.lang.Object)>(envImpl);

        if $z1 != 0 goto label1;

        $r1 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedState()>();

        throw $r1;

     label1:
        $z2 = <com.sleepycat.je.dbi.DbEnvPool: boolean $assertionsDisabled>;

        if $z2 != 0 goto label2;

        $r2 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.evictor.Evictor getEvictor()>();

        $z3 = virtualinvoke $r2.<com.sleepycat.je.evictor.Evictor: boolean checkEnv(com.sleepycat.je.dbi.EnvironmentImpl)>(envImpl);

        if $z3 != 0 goto label2;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        specialinvoke this.<com.sleepycat.je.dbi.DbEnvPool: void resetSharedCache(long,com.sleepycat.je.dbi.EnvironmentImpl)>(-1L, envImpl);

     label3:
        return;
    }

    private void resetSharedCache(long, com.sleepycat.je.dbi.EnvironmentImpl) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.dbi.DbEnvPool this;
        long newMaxMemory;
        com.sleepycat.je.dbi.EnvironmentImpl skipEnv, envImpl;
        java.util.Iterator l4;
        java.util.Set $r0;
        boolean $z0, $z1;
        java.lang.Object $r1;
        com.sleepycat.je.dbi.MemoryBudget $r2;
        com.sleepycat.je.dbi.DbConfigManager $r3;

        this := @this: com.sleepycat.je.dbi.DbEnvPool;

        newMaxMemory := @parameter0: long;

        skipEnv := @parameter1: com.sleepycat.je.dbi.EnvironmentImpl;

        $r0 = this.<com.sleepycat.je.dbi.DbEnvPool: java.util.Set sharedCacheEnvs>;

        l4 = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r1 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        envImpl = (com.sleepycat.je.dbi.EnvironmentImpl) $r1;

        if envImpl == skipEnv goto label2;

        $z1 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: boolean isValid()>();

        if $z1 == 0 goto label2;

        $r2 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.MemoryBudget getMemoryBudget()>();

        $r3 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.DbConfigManager getConfigManager()>();

        virtualinvoke $r2.<com.sleepycat.je.dbi.MemoryBudget: void reset(long,boolean,com.sleepycat.je.dbi.DbConfigManager)>(-1L, 0, $r3);

     label2:
        goto label1;

     label3:
        return;
    }

    private void <init>()
    {
        com.sleepycat.je.dbi.DbEnvPool this;
        java.util.HashMap $r0;
        java.util.HashSet $r1;

        this := @this: com.sleepycat.je.dbi.DbEnvPool;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        this.<com.sleepycat.je.dbi.DbEnvPool: java.util.Map envs> = $r0;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        this.<com.sleepycat.je.dbi.DbEnvPool: java.util.Set sharedCacheEnvs> = $r1;

        return;
    }

    synchronized void closeEnvironment(com.sleepycat.je.dbi.EnvironmentImpl, boolean, boolean)
    {
        com.sleepycat.je.dbi.DbEnvPool this;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl, l4;
        boolean doCheckpoint, isAbnormalClose, $z0;
        java.lang.Throwable l5, l6, $r1, $r2;

        this := @this: com.sleepycat.je.dbi.DbEnvPool;

        envImpl := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        doCheckpoint := @parameter1: boolean;

        isAbnormalClose := @parameter2: boolean;

        l4 = envImpl;

        entermonitor envImpl;

     label01:
        $z0 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: boolean decOpenCount()>();

        if $z0 == 0 goto label07;

     label02:
        virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: void doClose(boolean,boolean)>(1, 0);

     label03:
        specialinvoke this.<com.sleepycat.je.dbi.DbEnvPool: void removeEnvironment(com.sleepycat.je.dbi.EnvironmentImpl)>(envImpl);

        goto label07;

     label04:
        $r1 := @caughtexception;

     label05:
        l5 = $r1;

     label06:
        specialinvoke this.<com.sleepycat.je.dbi.DbEnvPool: void removeEnvironment(com.sleepycat.je.dbi.EnvironmentImpl)>(envImpl);

        throw l5;

     label07:
        exitmonitor l4;

     label08:
        goto label12;

     label09:
        $r2 := @caughtexception;

     label10:
        l6 = $r2;

        exitmonitor l4;

     label11:
        throw l6;

     label12:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label05 to label06 with label04;
        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private void removeEnvironment(com.sleepycat.je.dbi.EnvironmentImpl)
    {
        com.sleepycat.je.dbi.DbEnvPool this;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        java.lang.String environmentKey;
        boolean found, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.io.File $r0;
        java.util.Map $r1, $r12;
        java.lang.Object $r2;
        java.util.Set $r3, $r7;
        java.lang.AssertionError $r4, $r6, $r11;
        com.sleepycat.je.evictor.Evictor $r5, $r8;
        com.sleepycat.je.evictor.OffHeapCache $r9;
        com.sleepycat.je.dbi.MemoryBudget $r10;

        this := @this: com.sleepycat.je.dbi.DbEnvPool;

        envImpl := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        $r0 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: java.io.File getEnvironmentHome()>();

        environmentKey = virtualinvoke this.<com.sleepycat.je.dbi.DbEnvPool: java.lang.String getEnvironmentMapKey(java.io.File)>($r0);

        $r1 = this.<com.sleepycat.je.dbi.DbEnvPool: java.util.Map envs>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>(environmentKey);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        found = $z0;

        $r3 = this.<com.sleepycat.je.dbi.DbEnvPool: java.util.Set sharedCacheEnvs>;

        $z1 = interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>(envImpl);

        if $z1 == 0 goto label7;

        $z2 = <com.sleepycat.je.dbi.DbEnvPool: boolean $assertionsDisabled>;

        if $z2 != 0 goto label4;

        if found == 0 goto label3;

        $z3 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: boolean getSharedCache()>();

        if $z3 != 0 goto label4;

     label3:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label4:
        $z4 = <com.sleepycat.je.dbi.DbEnvPool: boolean $assertionsDisabled>;

        if $z4 != 0 goto label5;

        $r5 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.evictor.Evictor getEvictor()>();

        $z5 = virtualinvoke $r5.<com.sleepycat.je.evictor.Evictor: boolean checkEnv(com.sleepycat.je.dbi.EnvironmentImpl)>(envImpl);

        if $z5 == 0 goto label5;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label5:
        $r7 = this.<com.sleepycat.je.dbi.DbEnvPool: java.util.Set sharedCacheEnvs>;

        $z6 = interfaceinvoke $r7.<java.util.Set: boolean isEmpty()>();

        if $z6 == 0 goto label6;

        $r8 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.evictor.Evictor getEvictor()>();

        virtualinvoke $r8.<com.sleepycat.je.evictor.Evictor: void shutdown()>();

        $r9 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.evictor.OffHeapCache getOffHeapCache()>();

        virtualinvoke $r9.<com.sleepycat.je.evictor.OffHeapCache: void shutdown()>();

        goto label8;

     label6:
        $r10 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.MemoryBudget getMemoryBudget()>();

        virtualinvoke $r10.<com.sleepycat.je.dbi.MemoryBudget: void subtractCacheUsage()>();

        specialinvoke this.<com.sleepycat.je.dbi.DbEnvPool: void resetSharedCache(long,com.sleepycat.je.dbi.EnvironmentImpl)>(-1L, null);

        goto label8;

     label7:
        $z7 = <com.sleepycat.je.dbi.DbEnvPool: boolean $assertionsDisabled>;

        if $z7 != 0 goto label8;

        if found == 0 goto label8;

        $z8 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: boolean getSharedCache()>();

        if $z8 == 0 goto label8;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label8:
        $r12 = this.<com.sleepycat.je.dbi.DbEnvPool: java.util.Map envs>;

        $z9 = interfaceinvoke $r12.<java.util.Map: boolean isEmpty()>();

        if $z9 == 0 goto label9;

        staticinvoke <com.sleepycat.je.latch.LatchSupport: void clear()>();

     label9:
        return;
    }

    synchronized void closeEnvironmentAfterInvalid(com.sleepycat.je.dbi.EnvironmentImpl) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.dbi.DbEnvPool this;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        java.lang.Throwable l2, $r0;

        this := @this: com.sleepycat.je.dbi.DbEnvPool;

        envImpl := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

     label1:
        virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: void doCloseAfterInvalid()>();

     label2:
        specialinvoke this.<com.sleepycat.je.dbi.DbEnvPool: void removeEnvironment(com.sleepycat.je.dbi.EnvironmentImpl)>(envImpl);

        goto label4;

     label3:
        $r0 := @caughtexception;

        l2 = $r0;

        specialinvoke this.<com.sleepycat.je.dbi.DbEnvPool: void removeEnvironment(com.sleepycat.je.dbi.EnvironmentImpl)>(envImpl);

        throw l2;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }


