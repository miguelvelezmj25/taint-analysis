    static void <clinit>()
    {
        return;
    }

    public void <init>()
    {
        weka.core.ClassCache this;

        this := @this: weka.core.ClassCache;

        specialinvoke this.<java.lang.Object: void <init>()>();

        virtualinvoke this.<weka.core.ClassCache: void initializeNew()>();

        return;
    }

    protected void initializeNew()
    {
        weka.core.ClassCache this;
        weka.core.WekaPackageClassLoaderManager wcl;
        java.net.URL[] sysOrWekaCP, l3;
        java.net.URL url;
        java.lang.String part, cl;
        java.util.Set classes;
        java.util.Hashtable $r0;
        int l4#9, l5#11;
        java.util.Iterator l4#25;
        boolean $z0;
        java.lang.Object $r1;

        this := @this: weka.core.ClassCache;

        $r0 = new java.util.Hashtable;

        specialinvoke $r0.<java.util.Hashtable: void <init>()>();

        this.<weka.core.ClassCache: java.util.Hashtable m_Cache> = $r0;

        wcl = staticinvoke <weka.core.WekaPackageClassLoaderManager: weka.core.WekaPackageClassLoaderManager getWekaPackageClassLoaderManager()>();

        sysOrWekaCP = virtualinvoke wcl.<weka.core.WekaPackageClassLoaderManager: java.net.URL[] getWekaClassloaderClasspathEntries()>();

        l3 = sysOrWekaCP;

        l4#9 = lengthof l3;

        l5#11 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l5#11);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l4#9);

        if l5#11 >= l4#9 goto label2;

        url = l3[l5#11];

        part = virtualinvoke url.<java.net.URL: java.lang.String toString()>();

        virtualinvoke this.<weka.core.ClassCache: void initFromClasspathPart(java.lang.String)>(part);

        l5#11 = l5#11 + 1;

        goto label1;

     label2:
        classes = virtualinvoke wcl.<weka.core.WekaPackageClassLoaderManager: java.util.Set getPackageJarFileClasses()>();

        l4#25 = interfaceinvoke classes.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke l4#25.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label4;

        $r1 = interfaceinvoke l4#25.<java.util.Iterator: java.lang.Object next()>();

        cl = (java.lang.String) $r1;

        virtualinvoke this.<weka.core.ClassCache: boolean add(java.lang.String)>(cl);

        goto label3;

     label4:
        return;
    }

    protected void initFromClasspathPart(java.lang.String)
    {
        weka.core.ClassCache this;
        java.net.URISyntaxException e, $r2;
        java.lang.String part#1, $r7, $r13;
        java.io.File file#3, $r0, $r8;
        boolean $z0, $z1, $z2;
        java.net.URI $r1;
        java.io.PrintStream $r3, $r9;
        java.lang.StringBuilder $r4, $r5, $r6, $r10, $r11, $r12;

        this := @this: weka.core.ClassCache;

        part#1 := @parameter0: java.lang.String;

        file#3 = null;

        $z0 = virtualinvoke part#1.<java.lang.String: boolean startsWith(java.lang.String)>("file:");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label4;

        part#1 = virtualinvoke part#1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(" ", "%20");

     label1:
        $r0 = new java.io.File;

        $r1 = new java.net.URI;

        specialinvoke $r1.<java.net.URI: void <init>(java.lang.String)>(part#1);

        specialinvoke $r0.<java.io.File: void <init>(java.net.URI)>($r1);

        file#3 = $r0;

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        e = $r2;

        $r3 = <java.lang.System: java.io.PrintStream err>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to generate URI: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(part#1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r7);

        virtualinvoke e.<java.net.URISyntaxException: void printStackTrace()>();

        goto label5;

     label4:
        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>(part#1);

        file#3 = $r8;

     label5:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(file#3);

        if file#3 != null goto label6;

        $r9 = <java.lang.System: java.io.PrintStream err>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Skipping: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(part#1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r13);

        return;

     label6:
        $z1 = virtualinvoke file#3.<java.io.File: boolean isDirectory()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label7;

        virtualinvoke this.<weka.core.ClassCache: void initFromDir(java.io.File)>(file#3);

        goto label8;

     label7:
        $z2 = virtualinvoke file#3.<java.io.File: boolean exists()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label8;

        virtualinvoke this.<weka.core.ClassCache: void initFromJar(java.io.File)>(file#3);

     label8:
        return;

        catch java.net.URISyntaxException from label1 to label2 with label3;
    }

    public boolean add(java.lang.String)
    {
        weka.core.ClassCache this;
        java.lang.String pkgname, classname#1, classname#4;
        java.util.HashSet $r0, names;
        java.util.Hashtable $r1, $r2, $r4;
        boolean $z0, $z1;
        java.lang.Object $r5;

        this := @this: weka.core.ClassCache;

        classname#1 := @parameter0: java.lang.String;

        classname#4 = staticinvoke <weka.core.ClassCache: java.lang.String cleanUp(java.lang.String)>(classname#1);

        pkgname = staticinvoke <weka.core.ClassCache: java.lang.String extractPackage(java.lang.String)>(classname#4);

        $r1 = this.<weka.core.ClassCache: java.util.Hashtable m_Cache>;

        $z0 = virtualinvoke $r1.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(pkgname);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r2 = this.<weka.core.ClassCache: java.util.Hashtable m_Cache>;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(pkgname, $r0);

     label1:
        $r4 = this.<weka.core.ClassCache: java.util.Hashtable m_Cache>;

        $r5 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(pkgname);

        names = (java.util.HashSet) $r5;

        $z1 = virtualinvoke names.<java.util.HashSet: boolean add(java.lang.Object)>(classname#4);

        return $z1;
    }

    public static java.lang.String extractPackage(java.lang.String)
    {
        java.lang.String classname, $r0;
        int $i0, $i1;

        classname := @parameter0: java.lang.String;

        $i0 = virtualinvoke classname.<java.lang.String: int indexOf(java.lang.String)>(".");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= -1 goto label1;

        $i1 = virtualinvoke classname.<java.lang.String: int lastIndexOf(java.lang.String)>(".");

        $r0 = virtualinvoke classname.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        return $r0;

     label1:
        return "DEFAULT";
    }

    public static java.lang.String cleanUp(java.lang.String)
    {
        java.lang.String classname, result#2;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        classname := @parameter0: java.lang.String;

        result#2 = classname;

        $i0 = virtualinvoke result#2.<java.lang.String: int indexOf(java.lang.String)>("/");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= -1 goto label1;

        result#2 = virtualinvoke result#2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("/", ".");

     label1:
        $i1 = virtualinvoke result#2.<java.lang.String: int indexOf(java.lang.String)>("\\");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= -1 goto label2;

        result#2 = virtualinvoke result#2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\\", ".");

     label2:
        $z0 = virtualinvoke result#2.<java.lang.String: boolean endsWith(java.lang.String)>(".class");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        $i2 = virtualinvoke result#2.<java.lang.String: int length()>();

        $i3 = $i2 - 6;

        result#2 = virtualinvoke result#2.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

     label3:
        return result#2;
    }

    protected void initFromDir(java.io.File)
    {
        weka.core.ClassCache this;
        java.io.File dir;

        this := @this: weka.core.ClassCache;

        dir := @parameter0: java.io.File;

        virtualinvoke this.<weka.core.ClassCache: void initFromDir(java.lang.String,java.io.File)>(null, dir);

        return;
    }

    protected void initFromJar(java.io.File)
    {
        weka.core.ClassCache this;
        java.io.File file;
        java.util.jar.JarFile jar, $r5;
        java.util.Enumeration enm;
        java.util.jar.JarEntry entry;
        java.lang.Exception e, $r10;
        boolean $z0, $z1, $z2;
        java.io.PrintStream $r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4, $r7, $r8;
        java.lang.Object $r6;
        java.util.jar.Manifest $r9;

        this := @this: weka.core.ClassCache;

        file := @parameter0: java.io.File;

        $z0 = virtualinvoke file.<java.io.File: boolean exists()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Jar does not exist: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(file);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>($r4);

        return;

     label1:
        $r5 = new java.util.jar.JarFile;

        specialinvoke $r5.<java.util.jar.JarFile: void <init>(java.io.File)>(file);

        jar = $r5;

        enm = virtualinvoke jar.<java.util.jar.JarFile: java.util.Enumeration entries()>();

     label2:
        $z1 = interfaceinvoke enm.<java.util.Enumeration: boolean hasMoreElements()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label3;

        $r6 = interfaceinvoke enm.<java.util.Enumeration: java.lang.Object nextElement()>();

        entry = (java.util.jar.JarEntry) $r6;

        $r7 = virtualinvoke entry.<java.util.jar.JarEntry: java.lang.String getName()>();

        $z2 = virtualinvoke $r7.<java.lang.String: boolean endsWith(java.lang.String)>(".class");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label2;

        $r8 = virtualinvoke entry.<java.util.jar.JarEntry: java.lang.String getName()>();

        virtualinvoke this.<weka.core.ClassCache: boolean add(java.lang.String)>($r8);

        goto label2;

     label3:
        $r9 = virtualinvoke jar.<java.util.jar.JarFile: java.util.jar.Manifest getManifest()>();

        virtualinvoke this.<weka.core.ClassCache: void initFromManifest(java.util.jar.Manifest)>($r9);

     label4:
        goto label6;

     label5:
        $r10 := @caughtexception;

        e = $r10;

        virtualinvoke e.<java.lang.Exception: void printStackTrace()>();

     label6:
        return;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    protected void initFromManifest(java.util.jar.Manifest)
    {
        weka.core.ClassCache this;
        java.util.jar.Manifest manifest;
        java.util.jar.Attributes atts;
        java.lang.String cp, part, $r0, $r1;
        java.lang.String[] parts, l5;
        int l6, l7#15, $i0;
        boolean $z0;

        this := @this: weka.core.ClassCache;

        manifest := @parameter0: java.util.jar.Manifest;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(manifest);

        if manifest != null goto label1;

        return;

     label1:
        atts = virtualinvoke manifest.<java.util.jar.Manifest: java.util.jar.Attributes getMainAttributes()>();

        cp = virtualinvoke atts.<java.util.jar.Attributes: java.lang.String getValue(java.lang.String)>("Class-Path");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(cp);

        if cp != null goto label2;

        return;

     label2:
        parts = virtualinvoke cp.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");

        l5 = parts;

        l6 = lengthof l5;

        l7#15 = 0;

     label3:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l7#15);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l6);

        if l7#15 >= l6 goto label6;

        part = l5[l7#15];

        $r0 = virtualinvoke part.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 0 goto label4;

        return;

     label4:
        $r1 = virtualinvoke part.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>(".jar");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label5;

        virtualinvoke this.<weka.core.ClassCache: void initFromClasspathPart(java.lang.String)>(part);

     label5:
        l7#15 = l7#15 + 1;

        goto label3;

     label6:
        return;
    }

    protected void initFromDir(java.lang.String, java.io.File)
    {
        weka.core.ClassCache this;
        java.lang.String prefix, $r1, $r5, $r7, $r9, $r13, $r15;
        java.io.File dir, file#18, file#53;
        weka.core.ClassCache$ClassFileFilter $r0;
        java.io.File[] files#5, l4#7, files#40, l4#42;
        int l5#10, l6#12, l5#45, l6#47;
        java.lang.StringBuilder $r2, $r3, $r4, $r6, $r10, $r11, $r12, $r14;
        weka.core.ClassCache$DirectoryFilter $r8;

        this := @this: weka.core.ClassCache;

        prefix := @parameter0: java.lang.String;

        dir := @parameter1: java.io.File;

        $r0 = new weka.core.ClassCache$ClassFileFilter;

        specialinvoke $r0.<weka.core.ClassCache$ClassFileFilter: void <init>()>();

        files#5 = virtualinvoke dir.<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>($r0);

        l4#7 = files#5;

        l5#10 = lengthof l4#7;

        l6#12 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l6#12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l5#10);

        if l6#12 >= l5#10 goto label4;

        file#18 = l4#7[l6#12];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(prefix);

        if prefix != null goto label2;

        $r1 = virtualinvoke file#18.<java.io.File: java.lang.String getName()>();

        virtualinvoke this.<weka.core.ClassCache: boolean add(java.lang.String)>($r1);

        goto label3;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(prefix);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r5 = virtualinvoke file#18.<java.io.File: java.lang.String getName()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke this.<weka.core.ClassCache: boolean add(java.lang.String)>($r7);

     label3:
        l6#12 = l6#12 + 1;

        goto label1;

     label4:
        $r8 = new weka.core.ClassCache$DirectoryFilter;

        specialinvoke $r8.<weka.core.ClassCache$DirectoryFilter: void <init>()>();

        files#40 = virtualinvoke dir.<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>($r8);

        l4#42 = files#40;

        l5#45 = lengthof l4#42;

        l6#47 = 0;

     label5:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l6#47);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l5#45);

        if l6#47 >= l5#45 goto label8;

        file#53 = l4#42[l6#47];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(prefix);

        if prefix != null goto label6;

        $r9 = virtualinvoke file#53.<java.io.File: java.lang.String getName()>();

        virtualinvoke this.<weka.core.ClassCache: void initFromDir(java.lang.String,java.io.File)>($r9, file#53);

        goto label7;

     label6:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(prefix);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r13 = virtualinvoke file#53.<java.io.File: java.lang.String getName()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke this.<weka.core.ClassCache: void initFromDir(java.lang.String,java.io.File)>($r15, file#53);

     label7:
        l6#47 = l6#47 + 1;

        goto label5;

     label8:
        return;
    }

    public java.util.ArrayList find(java.lang.String)
    {
        weka.core.ClassCache this;
        java.lang.String matchText, name;
        java.util.ArrayList result, $r0;
        java.util.Enumeration packages;
        java.util.Iterator names;
        java.util.Hashtable $r1, $r2;
        boolean $z0, $z1, $z2;
        java.lang.Object $r3, $r4, $r6;
        java.util.HashSet $r5;
        int $i0;

        this := @this: weka.core.ClassCache;

        matchText := @parameter0: java.lang.String;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        result = $r0;

        $r1 = this.<weka.core.ClassCache: java.util.Hashtable m_Cache>;

        packages = virtualinvoke $r1.<java.util.Hashtable: java.util.Enumeration keys()>();

     label1:
        $z0 = interfaceinvoke packages.<java.util.Enumeration: boolean hasMoreElements()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        $r2 = this.<weka.core.ClassCache: java.util.Hashtable m_Cache>;

        $r3 = interfaceinvoke packages.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r4 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (java.util.HashSet) $r4;

        names = virtualinvoke $r5.<java.util.HashSet: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke names.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label1;

        $r6 = interfaceinvoke names.<java.util.Iterator: java.lang.Object next()>();

        name = (java.lang.String) $r6;

        $z2 = virtualinvoke name.<java.lang.String: boolean contains(java.lang.CharSequence)>(matchText);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label2;

        virtualinvoke result.<java.util.ArrayList: boolean add(java.lang.Object)>(name);

        goto label2;

     label3:
        $i0 = virtualinvoke result.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 1 goto label4;

        staticinvoke <java.util.Collections: void sort(java.util.List)>(result);

     label4:
        return result;
    }

    public boolean remove(java.lang.String)
    {
        weka.core.ClassCache this;
        java.lang.String pkgname, classname#1, classname#4;
        java.util.HashSet names;
        java.util.Hashtable $r0;
        java.lang.Object $r1;
        boolean $z0;

        this := @this: weka.core.ClassCache;

        classname#1 := @parameter0: java.lang.String;

        classname#4 = staticinvoke <weka.core.ClassCache: java.lang.String cleanUp(java.lang.String)>(classname#1);

        pkgname = staticinvoke <weka.core.ClassCache: java.lang.String extractPackage(java.lang.String)>(classname#4);

        $r0 = this.<weka.core.ClassCache: java.util.Hashtable m_Cache>;

        $r1 = virtualinvoke $r0.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(pkgname);

        names = (java.util.HashSet) $r1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(names);

        if names == null goto label1;

        $z0 = virtualinvoke names.<java.util.HashSet: boolean remove(java.lang.Object)>(classname#4);

        return $z0;

     label1:
        return 0;
    }

    public java.util.HashSet getClassnames(java.lang.String)
    {
        weka.core.ClassCache this;
        java.lang.String pkgname;
        java.util.Hashtable $r0, $r1;
        boolean $z0;
        java.lang.Object $r2;
        java.util.HashSet $r3, $r4;

        this := @this: weka.core.ClassCache;

        pkgname := @parameter0: java.lang.String;

        $r0 = this.<weka.core.ClassCache: java.util.Hashtable m_Cache>;

        $z0 = virtualinvoke $r0.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(pkgname);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r1 = this.<weka.core.ClassCache: java.util.Hashtable m_Cache>;

        $r2 = virtualinvoke $r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(pkgname);

        $r3 = (java.util.HashSet) $r2;

        return $r3;

     label1:
        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        return $r4;
    }


