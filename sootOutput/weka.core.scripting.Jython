    public static java.lang.Object deserialize(java.io.InputStream)
    {
        java.io.InputStream in;
        java.lang.Class 'cls';
        java.lang.Class[] paramTypes, $r0, $r2;
        java.lang.reflect.Constructor constr;
        java.lang.Object[] arglist, $r1, $r3;
        java.lang.Object obj, result#2;
        java.lang.Exception e, $r4;

        in := @parameter0: java.io.InputStream;

        result#2 = null;

     label1:
        'cls' = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.python.util.PythonObjectInputStream");

        $r0 = newarray (java.lang.Class)[1];

        $r0[0] = class "java/io/InputStream";

        paramTypes = $r0;

        constr = virtualinvoke 'cls'.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(paramTypes);

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = in;

        arglist = $r1;

        obj = virtualinvoke constr.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(arglist);

        $r2 = newarray (java.lang.Class)[0];

        $r3 = newarray (java.lang.Object)[0];

        result#2 = staticinvoke <weka.core.scripting.Jython: java.lang.Object invoke(java.lang.Object,java.lang.String,java.lang.Class[],java.lang.Object[])>(obj, "readObject", $r2, $r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        e = $r4;

        virtualinvoke e.<java.lang.Exception: void printStackTrace()>();

     label4:
        return result#2;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Exception e, $r1;

        <weka.core.scripting.Jython: boolean m_Present> = 0;

     label1:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.python.util.PythonInterpreter");

        <weka.core.scripting.Jython: boolean m_Present> = 1;

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        e = $r1;

        <weka.core.scripting.Jython: boolean m_Present> = 0;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static java.lang.Object invoke(java.lang.Object, java.lang.String, java.lang.Class[], java.lang.Object[])
    {
        java.lang.Object o, result#12;
        java.lang.String methodName;
        java.lang.Class[] paramClasses;
        java.lang.Object[] paramValues;
        java.lang.reflect.Method m;
        java.lang.Exception e, $r1;
        java.lang.Class $r0;

        o := @parameter0: java.lang.Object;

        methodName := @parameter1: java.lang.String;

        paramClasses := @parameter2: java.lang.Class[];

        paramValues := @parameter3: java.lang.Object[];

     label1:
        $r0 = virtualinvoke o.<java.lang.Object: java.lang.Class getClass()>();

        m = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(methodName, paramClasses);

        result#12 = virtualinvoke m.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(o, paramValues);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        e = $r1;

        virtualinvoke e.<java.lang.Exception: void printStackTrace()>();

        result#12 = null;

     label4:
        return result#12;

        catch java.lang.Exception from label1 to label2 with label3;
    }


