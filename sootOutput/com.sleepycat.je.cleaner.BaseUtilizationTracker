    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "com/sleepycat/je/cleaner/BaseUtilizationTracker";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sleepycat.je.cleaner.BaseUtilizationTracker: boolean $assertionsDisabled> = $z1;

        return;
    }

    void <init>(com.sleepycat.je.dbi.EnvironmentImpl, com.sleepycat.je.cleaner.Cleaner)
    {
        com.sleepycat.je.cleaner.BaseUtilizationTracker this;
        com.sleepycat.je.dbi.EnvironmentImpl env;
        com.sleepycat.je.cleaner.Cleaner cleaner;
        boolean $z0;
        java.lang.AssertionError $r0;
        java.util.HashMap $r1;

        this := @this: com.sleepycat.je.cleaner.BaseUtilizationTracker;

        env := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        cleaner := @parameter1: com.sleepycat.je.cleaner.Cleaner;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $z0 = <com.sleepycat.je.cleaner.BaseUtilizationTracker: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(cleaner);

        if cleaner != null goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        this.<com.sleepycat.je.cleaner.BaseUtilizationTracker: com.sleepycat.je.dbi.EnvironmentImpl env> = env;

        this.<com.sleepycat.je.cleaner.BaseUtilizationTracker: com.sleepycat.je.cleaner.Cleaner cleaner> = cleaner;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        this.<com.sleepycat.je.cleaner.BaseUtilizationTracker: java.util.Map fileSummaries> = $r1;

        this.<com.sleepycat.je.cleaner.BaseUtilizationTracker: long activeFile> = -1L;

        return;
    }

    final void countObsolete(long, java.lang.Object, com.sleepycat.je.log.LogEntryType, int, boolean, boolean, boolean, boolean)
    {
        com.sleepycat.je.cleaner.BaseUtilizationTracker this;
        long lsn, fileNum, offset;
        java.lang.Object databaseKey;
        com.sleepycat.je.log.LogEntryType type;
        int size, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        boolean countPerFile, countPerDb, trackOffset, checkDupOffsets, isLN, $z0, $z1, $z2, $z3, $z4;
        com.sleepycat.je.cleaner.TrackedFileSummary fileSummary;
        com.sleepycat.je.cleaner.DbFileSummary dbFileSummary;
        java.lang.AssertionError $r0, $r5, $r6, $r18;
        byte $b8;
        java.lang.StringBuilder $r7, $r8, $r10, $r11, $r12;
        java.lang.String $r9, $r13;

        this := @this: com.sleepycat.je.cleaner.BaseUtilizationTracker;

        lsn := @parameter0: long;

        databaseKey := @parameter1: java.lang.Object;

        type := @parameter2: com.sleepycat.je.log.LogEntryType;

        size := @parameter3: int;

        countPerFile := @parameter4: boolean;

        countPerDb := @parameter5: boolean;

        trackOffset := @parameter6: boolean;

        checkDupOffsets := @parameter7: boolean;

        $z0 = <com.sleepycat.je.cleaner.BaseUtilizationTracker: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <com.sleepycat.je.cleaner.BaseUtilizationTracker: boolean trackObsoleteInfo(com.sleepycat.je.log.LogEntryType)>(type);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        isLN = staticinvoke <com.sleepycat.je.cleaner.BaseUtilizationTracker: boolean isLNType(com.sleepycat.je.log.LogEntryType)>(type);

        fileNum = staticinvoke <com.sleepycat.je.utilint.DbLsn: long getFileNumber(long)>(lsn);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(countPerFile);

        if countPerFile == 0 goto label4;

        fileSummary = virtualinvoke this.<com.sleepycat.je.cleaner.BaseUtilizationTracker: com.sleepycat.je.cleaner.TrackedFileSummary getFileSummary(long)>(fileNum);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isLN);

        if isLN == 0 goto label2;

        $i0 = fileSummary.<com.sleepycat.je.cleaner.TrackedFileSummary: int obsoleteLNCount>;

        $i1 = $i0 + 1;

        fileSummary.<com.sleepycat.je.cleaner.TrackedFileSummary: int obsoleteLNCount> = $i1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(size);

        if size <= 0 goto label3;

        $i2 = fileSummary.<com.sleepycat.je.cleaner.TrackedFileSummary: int obsoleteLNSize>;

        $i3 = $i2 + size;

        fileSummary.<com.sleepycat.je.cleaner.TrackedFileSummary: int obsoleteLNSize> = $i3;

        $i4 = fileSummary.<com.sleepycat.je.cleaner.TrackedFileSummary: int obsoleteLNSizeCounted>;

        $i5 = $i4 + 1;

        fileSummary.<com.sleepycat.je.cleaner.TrackedFileSummary: int obsoleteLNSizeCounted> = $i5;

        goto label3;

     label2:
        $i6 = fileSummary.<com.sleepycat.je.cleaner.TrackedFileSummary: int obsoleteINCount>;

        $i7 = $i6 + 1;

        fileSummary.<com.sleepycat.je.cleaner.TrackedFileSummary: int obsoleteINCount> = $i7;

        $z2 = <com.sleepycat.je.cleaner.BaseUtilizationTracker: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(size);

        if size == 0 goto label3;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label3:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(trackOffset);

        if trackOffset == 0 goto label4;

        offset = staticinvoke <com.sleepycat.je.utilint.DbLsn: long getFileOffset(long)>(lsn);

        $b8 = offset cmp 0L;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b8);

        if $b8 == 0 goto label4;

        virtualinvoke fileSummary.<com.sleepycat.je.cleaner.TrackedFileSummary: void trackObsolete(long,boolean)>(offset, checkDupOffsets);

     label4:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(countPerDb);

        if countPerDb == 0 goto label7;

        $z3 = <com.sleepycat.je.cleaner.BaseUtilizationTracker: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(databaseKey);

        if databaseKey != null goto label5;

        $r6 = new java.lang.AssertionError;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No DB for lsn=");

        $r9 = staticinvoke <com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(lsn);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" type: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(type);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>($r13);

        throw $r6;

     label5:
        dbFileSummary = virtualinvoke this.<com.sleepycat.je.cleaner.BaseUtilizationTracker: com.sleepycat.je.cleaner.DbFileSummary getDbFileSummary(java.lang.Object,long)>(databaseKey, fileNum);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dbFileSummary);

        if dbFileSummary == null goto label7;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isLN);

        if isLN == 0 goto label6;

        $i9 = dbFileSummary.<com.sleepycat.je.cleaner.DbFileSummary: int obsoleteLNCount>;

        $i10 = $i9 + 1;

        dbFileSummary.<com.sleepycat.je.cleaner.DbFileSummary: int obsoleteLNCount> = $i10;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(size);

        if size <= 0 goto label7;

        $i11 = dbFileSummary.<com.sleepycat.je.cleaner.DbFileSummary: int obsoleteLNSize>;

        $i12 = $i11 + size;

        dbFileSummary.<com.sleepycat.je.cleaner.DbFileSummary: int obsoleteLNSize> = $i12;

        $i13 = dbFileSummary.<com.sleepycat.je.cleaner.DbFileSummary: int obsoleteLNSizeCounted>;

        $i14 = $i13 + 1;

        dbFileSummary.<com.sleepycat.je.cleaner.DbFileSummary: int obsoleteLNSizeCounted> = $i14;

        goto label7;

     label6:
        $i15 = dbFileSummary.<com.sleepycat.je.cleaner.DbFileSummary: int obsoleteINCount>;

        $i16 = $i15 + 1;

        dbFileSummary.<com.sleepycat.je.cleaner.DbFileSummary: int obsoleteINCount> = $i16;

        $z4 = <com.sleepycat.je.cleaner.BaseUtilizationTracker: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label7;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(size);

        if size == 0 goto label7;

        $r18 = new java.lang.AssertionError;

        specialinvoke $r18.<java.lang.AssertionError: void <init>()>();

        throw $r18;

     label7:
        return;
    }

    public static boolean isLNType(com.sleepycat.je.log.LogEntryType)
    {
        com.sleepycat.je.log.LogEntryType type;
        boolean $z0, $z1;

        type := @parameter0: com.sleepycat.je.log.LogEntryType;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(type);

        if type == null goto label1;

        $z0 = virtualinvoke type.<com.sleepycat.je.log.LogEntryType: boolean isLNType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public static boolean trackObsoleteInfo(com.sleepycat.je.log.LogEntryType)
    {
        com.sleepycat.je.log.LogEntryType type, $r0, $r1;
        boolean $z0, $z1, $z2, $z3;

        type := @parameter0: com.sleepycat.je.log.LogEntryType;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(type);

        if type == null goto label1;

        $z0 = virtualinvoke type.<com.sleepycat.je.log.LogEntryType: boolean isNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r0 = <com.sleepycat.je.log.LogEntryType: com.sleepycat.je.log.LogEntryType LOG_BIN_DELTA>;

        $z1 = virtualinvoke type.<com.sleepycat.je.log.LogEntryType: boolean equals(java.lang.Object)>($r0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label1;

        $r1 = <com.sleepycat.je.log.LogEntryType: com.sleepycat.je.log.LogEntryType LOG_OLD_BIN_DELTA>;

        $z2 = virtualinvoke type.<com.sleepycat.je.log.LogEntryType: boolean equals(java.lang.Object)>($r1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    com.sleepycat.je.cleaner.TrackedFileSummary getFileSummary(long)
    {
        com.sleepycat.je.cleaner.BaseUtilizationTracker this;
        long fileNum, $l0;
        java.lang.Long fileNumLong;
        java.util.HashMap newFiles, $r4;
        byte $b1;
        java.util.Map $r0, $r5;
        java.lang.Object $r1;
        com.sleepycat.je.cleaner.TrackedFileSummary file#14, $r2;
        com.sleepycat.je.cleaner.Cleaner $r3;
        boolean $z0;

        this := @this: com.sleepycat.je.cleaner.BaseUtilizationTracker;

        fileNum := @parameter0: long;

        $l0 = this.<com.sleepycat.je.cleaner.BaseUtilizationTracker: long activeFile>;

        $b1 = $l0 cmp fileNum;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 >= 0 goto label1;

        this.<com.sleepycat.je.cleaner.BaseUtilizationTracker: long activeFile> = fileNum;

     label1:
        fileNumLong = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(fileNum);

        $r0 = this.<com.sleepycat.je.cleaner.BaseUtilizationTracker: java.util.Map fileSummaries>;

        $r1 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(fileNumLong);

        file#14 = (com.sleepycat.je.cleaner.TrackedFileSummary) $r1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(file#14);

        if file#14 != null goto label2;

        $r2 = new com.sleepycat.je.cleaner.TrackedFileSummary;

        $r3 = this.<com.sleepycat.je.cleaner.BaseUtilizationTracker: com.sleepycat.je.cleaner.Cleaner cleaner>;

        $z0 = $r3.<com.sleepycat.je.cleaner.Cleaner: boolean trackDetail>;

        specialinvoke $r2.<com.sleepycat.je.cleaner.TrackedFileSummary: void <init>(com.sleepycat.je.cleaner.BaseUtilizationTracker,long,boolean)>(this, fileNum, $z0);

        file#14 = $r2;

        $r4 = new java.util.HashMap;

        $r5 = this.<com.sleepycat.je.cleaner.BaseUtilizationTracker: java.util.Map fileSummaries>;

        specialinvoke $r4.<java.util.HashMap: void <init>(java.util.Map)>($r5);

        newFiles = $r4;

        interfaceinvoke newFiles.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fileNumLong, file#14);

        this.<com.sleepycat.je.cleaner.BaseUtilizationTracker: java.util.Map fileSummaries> = newFiles;

     label2:
        return file#14;
    }

    public java.util.Collection getTrackedFiles()
    {
        com.sleepycat.je.cleaner.BaseUtilizationTracker this;
        java.util.Map $r0;
        java.util.Collection $r1;

        this := @this: com.sleepycat.je.cleaner.BaseUtilizationTracker;

        $r0 = this.<com.sleepycat.je.cleaner.BaseUtilizationTracker: java.util.Map fileSummaries>;

        $r1 = interfaceinvoke $r0.<java.util.Map: java.util.Collection values()>();

        return $r1;
    }

    final void countNew(long, java.lang.Object, com.sleepycat.je.log.LogEntryType, int)
    {
        com.sleepycat.je.cleaner.BaseUtilizationTracker this;
        long lsn, fileNum;
        java.lang.Object databaseKey;
        com.sleepycat.je.log.LogEntryType type;
        int size, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;
        com.sleepycat.je.cleaner.TrackedFileSummary fileSummary;
        boolean isLN, $z0, $z1, $z2;
        com.sleepycat.je.cleaner.DbFileSummary dbFileSummary;
        java.lang.AssertionError $r0, $r3;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r9;
        java.lang.String $r6, $r10;

        this := @this: com.sleepycat.je.cleaner.BaseUtilizationTracker;

        lsn := @parameter0: long;

        databaseKey := @parameter1: java.lang.Object;

        type := @parameter2: com.sleepycat.je.log.LogEntryType;

        size := @parameter3: int;

        $z0 = <com.sleepycat.je.cleaner.BaseUtilizationTracker: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(type);

        if type != null goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        fileNum = staticinvoke <com.sleepycat.je.utilint.DbLsn: long getFileNumber(long)>(lsn);

        fileSummary = virtualinvoke this.<com.sleepycat.je.cleaner.BaseUtilizationTracker: com.sleepycat.je.cleaner.TrackedFileSummary getFileSummary(long)>(fileNum);

        $i0 = fileSummary.<com.sleepycat.je.cleaner.FileSummary: int totalCount>;

        $i1 = $i0 + 1;

        fileSummary.<com.sleepycat.je.cleaner.FileSummary: int totalCount> = $i1;

        $i2 = fileSummary.<com.sleepycat.je.cleaner.FileSummary: int totalSize>;

        $i3 = $i2 + size;

        fileSummary.<com.sleepycat.je.cleaner.FileSummary: int totalSize> = $i3;

        isLN = staticinvoke <com.sleepycat.je.cleaner.BaseUtilizationTracker: boolean isLNType(com.sleepycat.je.log.LogEntryType)>(type);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isLN);

        if isLN == 0 goto label2;

        $i4 = fileSummary.<com.sleepycat.je.cleaner.FileSummary: int maxLNSize>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(size);

        if $i4 >= size goto label2;

        fileSummary.<com.sleepycat.je.cleaner.FileSummary: int maxLNSize> = size;

     label2:
        $z1 = staticinvoke <com.sleepycat.je.cleaner.BaseUtilizationTracker: boolean trackObsoleteInfo(com.sleepycat.je.log.LogEntryType)>(type);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label5;

        $z2 = <com.sleepycat.je.cleaner.BaseUtilizationTracker: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(databaseKey);

        if databaseKey != null goto label3;

        $r3 = new java.lang.AssertionError;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No DB for lsn=");

        $r6 = staticinvoke <com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(lsn);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" type: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(type);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>($r10);

        throw $r3;

     label3:
        dbFileSummary = virtualinvoke this.<com.sleepycat.je.cleaner.BaseUtilizationTracker: com.sleepycat.je.cleaner.DbFileSummary getDbFileSummary(java.lang.Object,long)>(databaseKey, fileNum);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isLN);

        if isLN == 0 goto label4;

        $i5 = fileSummary.<com.sleepycat.je.cleaner.FileSummary: int totalLNCount>;

        $i6 = $i5 + 1;

        fileSummary.<com.sleepycat.je.cleaner.FileSummary: int totalLNCount> = $i6;

        $i7 = fileSummary.<com.sleepycat.je.cleaner.FileSummary: int totalLNSize>;

        $i8 = $i7 + size;

        fileSummary.<com.sleepycat.je.cleaner.FileSummary: int totalLNSize> = $i8;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dbFileSummary);

        if dbFileSummary == null goto label5;

        $i9 = dbFileSummary.<com.sleepycat.je.cleaner.DbFileSummary: int totalLNCount>;

        $i10 = $i9 + 1;

        dbFileSummary.<com.sleepycat.je.cleaner.DbFileSummary: int totalLNCount> = $i10;

        $i11 = dbFileSummary.<com.sleepycat.je.cleaner.DbFileSummary: int totalLNSize>;

        $i12 = $i11 + size;

        dbFileSummary.<com.sleepycat.je.cleaner.DbFileSummary: int totalLNSize> = $i12;

        goto label5;

     label4:
        $i13 = fileSummary.<com.sleepycat.je.cleaner.FileSummary: int totalINCount>;

        $i14 = $i13 + 1;

        fileSummary.<com.sleepycat.je.cleaner.FileSummary: int totalINCount> = $i14;

        $i15 = fileSummary.<com.sleepycat.je.cleaner.FileSummary: int totalINSize>;

        $i16 = $i15 + size;

        fileSummary.<com.sleepycat.je.cleaner.FileSummary: int totalINSize> = $i16;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dbFileSummary);

        if dbFileSummary == null goto label5;

        $i17 = dbFileSummary.<com.sleepycat.je.cleaner.DbFileSummary: int totalINCount>;

        $i18 = $i17 + 1;

        dbFileSummary.<com.sleepycat.je.cleaner.DbFileSummary: int totalINCount> = $i18;

        $i19 = dbFileSummary.<com.sleepycat.je.cleaner.DbFileSummary: int totalINSize>;

        $i20 = $i19 + size;

        dbFileSummary.<com.sleepycat.je.cleaner.DbFileSummary: int totalINSize> = $i20;

     label5:
        return;
    }

    public com.sleepycat.je.cleaner.TrackedFileSummary getTrackedFile(long)
    {
        com.sleepycat.je.cleaner.BaseUtilizationTracker this;
        long fileNum;
        java.util.Map $r0;
        java.lang.Long $r1;
        java.lang.Object $r2;
        com.sleepycat.je.cleaner.TrackedFileSummary $r3;

        this := @this: com.sleepycat.je.cleaner.BaseUtilizationTracker;

        fileNum := @parameter0: long;

        $r0 = this.<com.sleepycat.je.cleaner.BaseUtilizationTracker: java.util.Map fileSummaries>;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(fileNum);

        $r2 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r3 = (com.sleepycat.je.cleaner.TrackedFileSummary) $r2;

        return $r3;
    }

    void close()
    {
        com.sleepycat.je.cleaner.BaseUtilizationTracker this;
        java.util.Iterator l1;
        com.sleepycat.je.cleaner.TrackedFileSummary t;
        java.util.Map $r0;
        java.util.Collection $r1;
        boolean $z0;
        java.lang.Object $r2;

        this := @this: com.sleepycat.je.cleaner.BaseUtilizationTracker;

        $r0 = this.<com.sleepycat.je.cleaner.BaseUtilizationTracker: java.util.Map fileSummaries>;

        $r1 = interfaceinvoke $r0.<java.util.Map: java.util.Collection values()>();

        l1 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>();

        t = (com.sleepycat.je.cleaner.TrackedFileSummary) $r2;

        virtualinvoke t.<com.sleepycat.je.cleaner.TrackedFileSummary: void close()>();

        goto label1;

     label2:
        return;
    }

    public void countObsoleteDb(com.sleepycat.je.cleaner.DbFileSummaryMap, long)
    {
        com.sleepycat.je.cleaner.BaseUtilizationTracker this;
        com.sleepycat.je.cleaner.DbFileSummaryMap dbFileSummaries;
        long mapLnLsn, $l0;
        java.util.Iterator l4;
        java.util.Map$Entry entry;
        java.lang.Long fileNum;
        com.sleepycat.je.cleaner.DbFileSummary dbFileSummary;
        com.sleepycat.je.cleaner.TrackedFileSummary fileSummary;
        int lnObsoleteCount, lnObsoleteSize, inObsoleteCount, lnObsoleteSizeCounted, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        java.util.Set $r0;
        boolean $z0, $z1;
        java.lang.Object $r1, $r2, $r3;

        this := @this: com.sleepycat.je.cleaner.BaseUtilizationTracker;

        dbFileSummaries := @parameter0: com.sleepycat.je.cleaner.DbFileSummaryMap;

        mapLnLsn := @parameter1: long;

        $r0 = virtualinvoke dbFileSummaries.<com.sleepycat.je.cleaner.DbFileSummaryMap: java.util.Set entrySet()>();

        l4 = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        $r1 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $r1;

        $r2 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        fileNum = (java.lang.Long) $r2;

        $z1 = virtualinvoke this.<com.sleepycat.je.cleaner.BaseUtilizationTracker: boolean isFileUncounted(java.lang.Long,long)>(fileNum, mapLnLsn);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        $r3 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        dbFileSummary = (com.sleepycat.je.cleaner.DbFileSummary) $r3;

        $l0 = virtualinvoke fileNum.<java.lang.Long: long longValue()>();

        fileSummary = virtualinvoke this.<com.sleepycat.je.cleaner.BaseUtilizationTracker: com.sleepycat.je.cleaner.TrackedFileSummary getFileSummary(long)>($l0);

        $i1 = dbFileSummary.<com.sleepycat.je.cleaner.DbFileSummary: int totalLNCount>;

        $i2 = dbFileSummary.<com.sleepycat.je.cleaner.DbFileSummary: int obsoleteLNCount>;

        lnObsoleteCount = $i1 - $i2;

        $i3 = dbFileSummary.<com.sleepycat.je.cleaner.DbFileSummary: int totalLNSize>;

        $i4 = dbFileSummary.<com.sleepycat.je.cleaner.DbFileSummary: int obsoleteLNSize>;

        lnObsoleteSize = $i3 - $i4;

        $i5 = dbFileSummary.<com.sleepycat.je.cleaner.DbFileSummary: int totalINCount>;

        $i6 = dbFileSummary.<com.sleepycat.je.cleaner.DbFileSummary: int obsoleteINCount>;

        inObsoleteCount = $i5 - $i6;

        $i7 = fileSummary.<com.sleepycat.je.cleaner.TrackedFileSummary: int obsoleteLNCount>;

        $i8 = $i7 + lnObsoleteCount;

        fileSummary.<com.sleepycat.je.cleaner.TrackedFileSummary: int obsoleteLNCount> = $i8;

        $i9 = fileSummary.<com.sleepycat.je.cleaner.TrackedFileSummary: int obsoleteLNSize>;

        $i10 = $i9 + lnObsoleteSize;

        fileSummary.<com.sleepycat.je.cleaner.TrackedFileSummary: int obsoleteLNSize> = $i10;

        $i11 = fileSummary.<com.sleepycat.je.cleaner.TrackedFileSummary: int obsoleteINCount>;

        $i12 = $i11 + inObsoleteCount;

        fileSummary.<com.sleepycat.je.cleaner.TrackedFileSummary: int obsoleteINCount> = $i12;

        $i13 = dbFileSummary.<com.sleepycat.je.cleaner.DbFileSummary: int obsoleteLNCount>;

        $i14 = dbFileSummary.<com.sleepycat.je.cleaner.DbFileSummary: int obsoleteLNSizeCounted>;

        $i15 = $i13 - $i14;

        lnObsoleteSizeCounted = lnObsoleteCount + $i15;

        $i16 = fileSummary.<com.sleepycat.je.cleaner.TrackedFileSummary: int obsoleteLNSizeCounted>;

        $i17 = $i16 + lnObsoleteSizeCounted;

        fileSummary.<com.sleepycat.je.cleaner.TrackedFileSummary: int obsoleteLNSizeCounted> = $i17;

     label2:
        goto label1;

     label3:
        return;
    }

    boolean isFileUncounted(java.lang.Long, long)
    {
        com.sleepycat.je.cleaner.BaseUtilizationTracker this;
        java.lang.Long fileNum;
        long lsn;

        this := @this: com.sleepycat.je.cleaner.BaseUtilizationTracker;

        fileNum := @parameter0: java.lang.Long;

        lsn := @parameter1: long;

        return 1;
    }

    void resetFile(com.sleepycat.je.cleaner.TrackedFileSummary)
    {
        com.sleepycat.je.cleaner.BaseUtilizationTracker this;
        com.sleepycat.je.cleaner.TrackedFileSummary fileSummary;
        java.util.HashMap newFiles, $r0;
        long $l0, $l1, $l3;
        byte $b2;
        boolean $z0;
        java.util.Map $r1;
        java.lang.Long $r2;

        this := @this: com.sleepycat.je.cleaner.BaseUtilizationTracker;

        fileSummary := @parameter0: com.sleepycat.je.cleaner.TrackedFileSummary;

        $l0 = virtualinvoke fileSummary.<com.sleepycat.je.cleaner.TrackedFileSummary: long getFileNumber()>();

        $l1 = this.<com.sleepycat.je.cleaner.BaseUtilizationTracker: long activeFile>;

        $b2 = $l0 cmp $l1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b2);

        if $b2 >= 0 goto label1;

        $z0 = virtualinvoke fileSummary.<com.sleepycat.je.cleaner.TrackedFileSummary: boolean getAllowFlush()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r0 = new java.util.HashMap;

        $r1 = this.<com.sleepycat.je.cleaner.BaseUtilizationTracker: java.util.Map fileSummaries>;

        specialinvoke $r0.<java.util.HashMap: void <init>(java.util.Map)>($r1);

        newFiles = $r0;

        $l3 = virtualinvoke fileSummary.<com.sleepycat.je.cleaner.TrackedFileSummary: long getFileNumber()>();

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        interfaceinvoke newFiles.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r2);

        this.<com.sleepycat.je.cleaner.BaseUtilizationTracker: java.util.Map fileSummaries> = newFiles;

     label1:
        return;
    }


