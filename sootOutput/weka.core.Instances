    public void <init>(java.lang.String, java.util.ArrayList, int)
    {
        weka.core.Instances this;
        java.lang.String name, $r3, $r6, $r9, $r11, $r15, $r17, $r22;
        java.util.ArrayList attInfo, $r25;
        int capacity, $i0, $i1, $i2, $i3, i#65, $i4;
        java.util.HashSet names, $r0;
        java.lang.StringBuffer nonUniqueNames, $r1;
        java.util.Iterator l6;
        weka.core.Attribute att, $r19, $r21;
        boolean $z0, $z1;
        java.lang.Object $r2;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r13, $r14, $r16;
        java.lang.IllegalArgumentException $r12;
        java.util.HashMap $r18, $r20;
        double $d0, $d1;
        java.lang.Integer $r23;

        this := @this: weka.core.Instances;

        name := @parameter0: java.lang.String;

        attInfo := @parameter1: java.util.ArrayList;

        capacity := @parameter2: int;

        specialinvoke this.<java.util.AbstractList: void <init>()>();

        this.<weka.core.Instances: int m_Lines> = 0;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        names = $r0;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        nonUniqueNames = $r1;

        l6 = virtualinvoke attInfo.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>();

        att = (weka.core.Attribute) $r2;

        $r3 = virtualinvoke att.<weka.core.Attribute: java.lang.String name()>();

        $z1 = virtualinvoke names.<java.util.HashSet: boolean contains(java.lang.Object)>($r3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r6 = virtualinvoke att.<weka.core.Attribute: java.lang.String name()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke nonUniqueNames.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

     label2:
        $r11 = virtualinvoke att.<weka.core.Attribute: java.lang.String name()>();

        virtualinvoke names.<java.util.HashSet: boolean add(java.lang.Object)>($r11);

        goto label1;

     label3:
        $i0 = virtualinvoke names.<java.util.HashSet: int size()>();

        $i1 = virtualinvoke attInfo.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i0 == $i1 goto label4;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attribute names are not unique! Causes: ");

        $r15 = virtualinvoke nonUniqueNames.<java.lang.StringBuffer: java.lang.String toString()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r12;

     label4:
        virtualinvoke names.<java.util.HashSet: void clear()>();

        this.<weka.core.Instances: java.lang.String m_RelationName> = name;

        this.<weka.core.Instances: int m_ClassIndex> = -1;

        this.<weka.core.Instances: java.util.ArrayList m_Attributes> = attInfo;

        $r18 = new java.util.HashMap;

        $i2 = virtualinvoke this.<weka.core.Instances: int numAttributes()>();

        $d0 = (double) $i2;

        $d1 = $d0 / 0.75;

        $i3 = (int) $d1;

        specialinvoke $r18.<java.util.HashMap: void <init>(int)>($i3);

        this.<weka.core.Instances: java.util.HashMap m_NamesToAttributeIndices> = $r18;

        i#65 = 0;

     label5:
        $i4 = virtualinvoke this.<weka.core.Instances: int numAttributes()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#65);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if i#65 >= $i4 goto label6;

        $r19 = virtualinvoke this.<weka.core.Instances: weka.core.Attribute attribute(int)>(i#65);

        virtualinvoke $r19.<weka.core.Attribute: void setIndex(int)>(i#65);

        $r20 = this.<weka.core.Instances: java.util.HashMap m_NamesToAttributeIndices>;

        $r21 = virtualinvoke this.<weka.core.Instances: weka.core.Attribute attribute(int)>(i#65);

        $r22 = virtualinvoke $r21.<weka.core.Attribute: java.lang.String name()>();

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i#65);

        virtualinvoke $r20.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, $r23);

        i#65 = i#65 + 1;

        goto label5;

     label6:
        $r25 = new java.util.ArrayList;

        specialinvoke $r25.<java.util.ArrayList: void <init>(int)>(capacity);

        this.<weka.core.Instances: java.util.ArrayList m_Instances> = $r25;

        return;
    }

    public int numAttributes()
    {
        weka.core.Instances this;
        java.util.ArrayList $r0;
        int $i0;

        this := @this: weka.core.Instances;

        $r0 = this.<weka.core.Instances: java.util.ArrayList m_Attributes>;

        $i0 = virtualinvoke $r0.<java.util.ArrayList: int size()>();

        return $i0;
    }

    public weka.core.Attribute attribute(int)
    {
        weka.core.Instances this;
        int index;
        java.util.ArrayList $r0;
        java.lang.Object $r1;
        weka.core.Attribute $r2;

        this := @this: weka.core.Instances;

        index := @parameter0: int;

        $r0 = this.<weka.core.Instances: java.util.ArrayList m_Attributes>;

        $r1 = virtualinvoke $r0.<java.util.ArrayList: java.lang.Object get(int)>(index);

        $r2 = (weka.core.Attribute) $r1;

        return $r2;
    }

    public weka.core.Attribute attribute(java.lang.String)
    {
        weka.core.Instances this;
        java.lang.String name;
        java.lang.Integer index;
        java.util.HashMap $r0;
        java.lang.Object $r1;
        int $i0;
        weka.core.Attribute $r2;

        this := @this: weka.core.Instances;

        name := @parameter0: java.lang.String;

        $r0 = this.<weka.core.Instances: java.util.HashMap m_NamesToAttributeIndices>;

        $r1 = virtualinvoke $r0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(name);

        index = (java.lang.Integer) $r1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(index);

        if index == null goto label1;

        $i0 = virtualinvoke index.<java.lang.Integer: int intValue()>();

        $r2 = virtualinvoke this.<weka.core.Instances: weka.core.Attribute attribute(int)>($i0);

        return $r2;

     label1:
        return null;
    }

    public weka.core.Attribute classAttribute()
    {
        weka.core.Instances this;
        int $i0, $i1;
        weka.core.UnassignedClassException $r0;
        weka.core.Attribute $r1;

        this := @this: weka.core.Instances;

        $i0 = this.<weka.core.Instances: int m_ClassIndex>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 >= 0 goto label1;

        $r0 = new weka.core.UnassignedClassException;

        specialinvoke $r0.<weka.core.UnassignedClassException: void <init>(java.lang.String)>("Class index is negative (not set)!");

        throw $r0;

     label1:
        $i1 = this.<weka.core.Instances: int m_ClassIndex>;

        $r1 = virtualinvoke this.<weka.core.Instances: weka.core.Attribute attribute(int)>($i1);

        return $r1;
    }

    public int classIndex()
    {
        weka.core.Instances this;
        int $i0;

        this := @this: weka.core.Instances;

        $i0 = this.<weka.core.Instances: int m_ClassIndex>;

        return $i0;
    }

    public void setClassIndex(int)
    {
        weka.core.Instances this;
        int classIndex, $i0;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        this := @this: weka.core.Instances;

        classIndex := @parameter0: int;

        $i0 = virtualinvoke this.<weka.core.Instances: int numAttributes()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classIndex);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if classIndex < $i0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid class index: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(classIndex);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label1:
        this.<weka.core.Instances: int m_ClassIndex> = classIndex;

        return;
    }

    public java.lang.String toString()
    {
        weka.core.Instances this;
        java.lang.StringBuffer text, $r0, $r1, $r2, $r5, $r8, $r10, $r11;
        java.lang.String $r3, $r4, $r13, $r15;
        int i#15, $i0;
        weka.core.Attribute $r7;

        this := @this: weka.core.Instances;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        text = $r0;

        $r1 = virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("@relation");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r3 = this.<weka.core.Instances: java.lang.String m_RelationName>;

        $r4 = staticinvoke <weka.core.Utils: java.lang.String quote(java.lang.String)>($r3);

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\n");

        i#15 = 0;

     label1:
        $i0 = virtualinvoke this.<weka.core.Instances: int numAttributes()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#15);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#15 >= $i0 goto label2;

        $r7 = virtualinvoke this.<weka.core.Instances: weka.core.Attribute attribute(int)>(i#15);

        $r8 = virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r7);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        i#15 = i#15 + 1;

        goto label1;

     label2:
        $r10 = virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("@data");

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r13 = virtualinvoke this.<weka.core.Instances: java.lang.String stringWithoutHeader()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke text.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r15;
    }

    protected java.lang.String stringWithoutHeader()
    {
        weka.core.Instances this;
        java.lang.StringBuffer text, $r0;
        int i#4, $i0, $i1, $i2;
        weka.core.Instance $r1;
        java.lang.String $r4;

        this := @this: weka.core.Instances;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        text = $r0;

        i#4 = 0;

     label1:
        $i0 = virtualinvoke this.<weka.core.Instances: int numInstances()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#4 >= $i0 goto label3;

        $r1 = virtualinvoke this.<weka.core.Instances: weka.core.Instance instance(int)>(i#4);

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r1);

        $i1 = virtualinvoke this.<weka.core.Instances: int numInstances()>();

        $i2 = $i1 - 1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#4 >= $i2 goto label2;

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

     label2:
        i#4 = i#4 + 1;

        goto label1;

     label3:
        $r4 = virtualinvoke text.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public int numInstances()
    {
        weka.core.Instances this;
        java.util.ArrayList $r0;
        int $i0;

        this := @this: weka.core.Instances;

        $r0 = this.<weka.core.Instances: java.util.ArrayList m_Instances>;

        $i0 = virtualinvoke $r0.<java.util.ArrayList: int size()>();

        return $i0;
    }

    public weka.core.Instance instance(int)
    {
        weka.core.Instances this;
        int index;
        java.util.ArrayList $r0;
        java.lang.Object $r1;
        weka.core.Instance $r2;

        this := @this: weka.core.Instances;

        index := @parameter0: int;

        $r0 = this.<weka.core.Instances: java.util.ArrayList m_Instances>;

        $r1 = virtualinvoke $r0.<java.util.ArrayList: java.lang.Object get(int)>(index);

        $r2 = (weka.core.Instance) $r1;

        return $r2;
    }

    public void <init>(weka.core.Instances, int)
    {
        weka.core.Instances this, dataset;
        int capacity;

        this := @this: weka.core.Instances;

        dataset := @parameter0: weka.core.Instances;

        capacity := @parameter1: int;

        specialinvoke this.<java.util.AbstractList: void <init>()>();

        this.<weka.core.Instances: int m_Lines> = 0;

        virtualinvoke this.<weka.core.Instances: void initialize(weka.core.Instances,int)>(dataset, capacity);

        return;
    }

    protected void initialize(weka.core.Instances, int)
    {
        weka.core.Instances this, dataset;
        int capacity#1, $i0;
        java.lang.String $r0;
        java.util.ArrayList $r1, $r3;
        java.util.HashMap $r2;

        this := @this: weka.core.Instances;

        dataset := @parameter0: weka.core.Instances;

        capacity#1 := @parameter1: int;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(capacity#1);

        if capacity#1 >= 0 goto label1;

        capacity#1 = 0;

     label1:
        $i0 = dataset.<weka.core.Instances: int m_ClassIndex>;

        this.<weka.core.Instances: int m_ClassIndex> = $i0;

        $r0 = dataset.<weka.core.Instances: java.lang.String m_RelationName>;

        this.<weka.core.Instances: java.lang.String m_RelationName> = $r0;

        $r1 = dataset.<weka.core.Instances: java.util.ArrayList m_Attributes>;

        this.<weka.core.Instances: java.util.ArrayList m_Attributes> = $r1;

        $r2 = dataset.<weka.core.Instances: java.util.HashMap m_NamesToAttributeIndices>;

        this.<weka.core.Instances: java.util.HashMap m_NamesToAttributeIndices> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(capacity#1);

        this.<weka.core.Instances: java.util.ArrayList m_Instances> = $r3;

        return;
    }

    public boolean add(weka.core.Instance)
    {
        weka.core.Instances this;
        weka.core.Instance instance, newInstance;
        java.lang.Object $r0;
        java.util.ArrayList $r1;

        this := @this: weka.core.Instances;

        instance := @parameter0: weka.core.Instance;

        $r0 = interfaceinvoke instance.<weka.core.Instance: java.lang.Object copy()>();

        newInstance = (weka.core.Instance) $r0;

        interfaceinvoke newInstance.<weka.core.Instance: void setDataset(weka.core.Instances)>(this);

        $r1 = this.<weka.core.Instances: java.util.ArrayList m_Instances>;

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>(newInstance);

        return 1;
    }

    public boolean equalHeaders(weka.core.Instances)
    {
        weka.core.Instances this, dataset;
        java.lang.String $r0;
        boolean $z0;

        this := @this: weka.core.Instances;

        dataset := @parameter0: weka.core.Instances;

        $r0 = virtualinvoke this.<weka.core.Instances: java.lang.String equalHeadersMsg(weka.core.Instances)>(dataset);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String equalHeadersMsg(weka.core.Instances)
    {
        weka.core.Instances this, dataset;
        java.lang.String msg, $r5, $r15, $r24;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i#44, $i10, $i11;
        java.lang.StringBuilder $r0, $r1, $r2, $r3, $r4, $r8, $r9, $r11, $r12, $r14, $r19, $r20, $r21, $r22, $r23;
        java.util.ArrayList $r6, $r7, $r10, $r13, $r16;
        weka.core.Attribute $r17, $r18;

        this := @this: weka.core.Instances;

        dataset := @parameter0: weka.core.Instances;

        $i0 = this.<weka.core.Instances: int m_ClassIndex>;

        $i1 = dataset.<weka.core.Instances: int m_ClassIndex>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i0 == $i1 goto label1;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class index differ: ");

        $i2 = this.<weka.core.Instances: int m_ClassIndex>;

        $i3 = $i2 + 1;

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ");

        $i4 = dataset.<weka.core.Instances: int m_ClassIndex>;

        $i5 = $i4 + 1;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;

     label1:
        $r6 = this.<weka.core.Instances: java.util.ArrayList m_Attributes>;

        $i6 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        $r7 = dataset.<weka.core.Instances: java.util.ArrayList m_Attributes>;

        $i7 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if $i6 == $i7 goto label2;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Different number of attributes: ");

        $r10 = this.<weka.core.Instances: java.util.ArrayList m_Attributes>;

        $i8 = virtualinvoke $r10.<java.util.ArrayList: int size()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ");

        $r13 = dataset.<weka.core.Instances: java.util.ArrayList m_Attributes>;

        $i9 = virtualinvoke $r13.<java.util.ArrayList: int size()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r15;

     label2:
        i#44 = 0;

     label3:
        $r16 = this.<weka.core.Instances: java.util.ArrayList m_Attributes>;

        $i10 = virtualinvoke $r16.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#44);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i10);

        if i#44 >= $i10 goto label5;

        $r17 = virtualinvoke this.<weka.core.Instances: weka.core.Attribute attribute(int)>(i#44);

        $r18 = virtualinvoke dataset.<weka.core.Instances: weka.core.Attribute attribute(int)>(i#44);

        msg = virtualinvoke $r17.<weka.core.Attribute: java.lang.String equalsMsg(java.lang.Object)>($r18);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(msg);

        if msg == null goto label4;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attributes differ at position ");

        $i11 = i#44 + 1;

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":\n");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(msg);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r24;

     label4:
        i#44 = i#44 + 1;

        goto label3;

     label5:
        return null;
    }

    public int numClasses()
    {
        weka.core.Instances this;
        int $i0, $i1;
        weka.core.UnassignedClassException $r0;
        weka.core.Attribute $r1, $r2;
        boolean $z0;

        this := @this: weka.core.Instances;

        $i0 = this.<weka.core.Instances: int m_ClassIndex>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 >= 0 goto label1;

        $r0 = new weka.core.UnassignedClassException;

        specialinvoke $r0.<weka.core.UnassignedClassException: void <init>(java.lang.String)>("Class index is negative (not set)!");

        throw $r0;

     label1:
        $r1 = virtualinvoke this.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z0 = virtualinvoke $r1.<weka.core.Attribute: boolean isNominal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label2;

        return 1;

     label2:
        $r2 = virtualinvoke this.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $i1 = virtualinvoke $r2.<weka.core.Attribute: int numValues()>();

        return $i1;
    }

    public java.lang.String relationName()
    {
        weka.core.Instances this;
        java.lang.String $r0;

        this := @this: weka.core.Instances;

        $r0 = this.<weka.core.Instances: java.lang.String m_RelationName>;

        return $r0;
    }

    public double[] attributeToDoubleArray(int)
    {
        weka.core.Instances this;
        int index, $i0, i#5, $i1;
        double[] result;
        weka.core.Instance $r0;
        double $d0;

        this := @this: weka.core.Instances;

        index := @parameter0: int;

        $i0 = virtualinvoke this.<weka.core.Instances: int numInstances()>();

        result = newarray (double)[$i0];

        i#5 = 0;

     label1:
        $i1 = lengthof result;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#5 >= $i1 goto label2;

        $r0 = virtualinvoke this.<weka.core.Instances: weka.core.Instance instance(int)>(i#5);

        $d0 = interfaceinvoke $r0.<weka.core.Instance: double value(int)>(index);

        result[i#5] = $d0;

        i#5 = i#5 + 1;

        goto label1;

     label2:
        return result;
    }

    public void randomize(java.util.Random)
    {
        weka.core.Instances this;
        java.util.Random random;
        int $i0, j#5, $i1, $i2;

        this := @this: weka.core.Instances;

        random := @parameter0: java.util.Random;

        $i0 = virtualinvoke this.<weka.core.Instances: int numInstances()>();

        j#5 = $i0 - 1;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#5);

        if j#5 <= 0 goto label2;

        $i1 = j#5 + 1;

        $i2 = virtualinvoke random.<java.util.Random: int nextInt(int)>($i1);

        virtualinvoke this.<weka.core.Instances: void swap(int,int)>(j#5, $i2);

        j#5 = j#5 + -1;

        goto label1;

     label2:
        return;
    }

    public void stratify(int)
    {
        weka.core.Instances this;
        int numFolds, $i0, index#15, $i1, $i2, j#25, $i3;
        weka.core.Instance instance1, instance2;
        java.lang.IllegalArgumentException $r0;
        weka.core.UnassignedClassException $r1;
        weka.core.Attribute $r2;
        boolean $z0, $z1, $z2;
        double $d0, $d1;
        byte $b4;

        this := @this: weka.core.Instances;

        numFolds := @parameter0: int;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(numFolds);

        if numFolds > 1 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Number of folds must be greater than 1");

        throw $r0;

     label1:
        $i0 = this.<weka.core.Instances: int m_ClassIndex>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 >= 0 goto label2;

        $r1 = new weka.core.UnassignedClassException;

        specialinvoke $r1.<weka.core.UnassignedClassException: void <init>(java.lang.String)>("Class index is negative (not set)!");

        throw $r1;

     label2:
        $r2 = virtualinvoke this.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z0 = virtualinvoke $r2.<weka.core.Attribute: boolean isNominal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label9;

        index#15 = 1;

     label3:
        $i1 = virtualinvoke this.<weka.core.Instances: int numInstances()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(index#15);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if index#15 >= $i1 goto label8;

        $i2 = index#15 - 1;

        instance1 = virtualinvoke this.<weka.core.Instances: weka.core.Instance instance(int)>($i2);

        j#25 = index#15;

     label4:
        $i3 = virtualinvoke this.<weka.core.Instances: int numInstances()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#25);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if j#25 >= $i3 goto label7;

        instance2 = virtualinvoke this.<weka.core.Instances: weka.core.Instance instance(int)>(j#25);

        $d0 = interfaceinvoke instance1.<weka.core.Instance: double classValue()>();

        $d1 = interfaceinvoke instance2.<weka.core.Instance: double classValue()>();

        $b4 = $d0 cmpl $d1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b4);

        if $b4 == 0 goto label5;

        $z1 = interfaceinvoke instance1.<weka.core.Instance: boolean classIsMissing()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label6;

        $z2 = interfaceinvoke instance2.<weka.core.Instance: boolean classIsMissing()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label6;

     label5:
        virtualinvoke this.<weka.core.Instances: void swap(int,int)>(index#15, j#25);

        index#15 = index#15 + 1;

     label6:
        j#25 = j#25 + 1;

        goto label4;

     label7:
        index#15 = index#15 + 1;

        goto label3;

     label8:
        virtualinvoke this.<weka.core.Instances: void stratStep(int)>(numFolds);

     label9:
        return;
    }

    public weka.core.Instances trainCV(int, int, java.util.Random)
    {
        weka.core.Instances this, train;
        int numFolds, numFold;
        java.util.Random random;

        this := @this: weka.core.Instances;

        numFolds := @parameter0: int;

        numFold := @parameter1: int;

        random := @parameter2: java.util.Random;

        train = virtualinvoke this.<weka.core.Instances: weka.core.Instances trainCV(int,int)>(numFolds, numFold);

        virtualinvoke train.<weka.core.Instances: void randomize(java.util.Random)>(random);

        return train;
    }

    public weka.core.Instances testCV(int, int)
    {
        weka.core.Instances this, test, $r2;
        int numFolds, numFold, first, $i0, $i1, numInstForFold#16, $i2, $i3, offset#23, $i4, $i5, $i6, $i7;
        java.lang.IllegalArgumentException $r0, $r1;

        this := @this: weka.core.Instances;

        numFolds := @parameter0: int;

        numFold := @parameter1: int;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(numFolds);

        if numFolds >= 2 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Number of folds must be at least 2!");

        throw $r0;

     label1:
        $i0 = virtualinvoke this.<weka.core.Instances: int numInstances()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(numFolds);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if numFolds <= $i0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t have more folds than instances!");

        throw $r1;

     label2:
        $i1 = virtualinvoke this.<weka.core.Instances: int numInstances()>();

        numInstForFold#16 = $i1 / numFolds;

        $i2 = virtualinvoke this.<weka.core.Instances: int numInstances()>();

        $i3 = $i2 % numFolds;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(numFold);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if numFold >= $i3 goto label3;

        numInstForFold#16 = numInstForFold#16 + 1;

        offset#23 = numFold;

        goto label4;

     label3:
        $i4 = virtualinvoke this.<weka.core.Instances: int numInstances()>();

        offset#23 = $i4 % numFolds;

     label4:
        $r2 = new weka.core.Instances;

        specialinvoke $r2.<weka.core.Instances: void <init>(weka.core.Instances,int)>(this, numInstForFold#16);

        test = $r2;

        $i5 = virtualinvoke this.<weka.core.Instances: int numInstances()>();

        $i6 = $i5 / numFolds;

        $i7 = numFold * $i6;

        first = $i7 + offset#23;

        virtualinvoke this.<weka.core.Instances: void copyInstances(int,weka.core.Instances,int)>(first, test, numInstForFold#16);

        return test;
    }

    protected void copyInstances(int, weka.core.Instances, int)
    {
        weka.core.Instances this, dest;
        int 'from', num, i#2, $i0;
        weka.core.Instance $r0;

        this := @this: weka.core.Instances;

        'from' := @parameter0: int;

        dest := @parameter1: weka.core.Instances;

        num := @parameter2: int;

        i#2 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(num);

        if i#2 >= num goto label2;

        $i0 = 'from' + i#2;

        $r0 = virtualinvoke this.<weka.core.Instances: weka.core.Instance instance(int)>($i0);

        virtualinvoke dest.<weka.core.Instances: boolean add(weka.core.Instance)>($r0);

        i#2 = i#2 + 1;

        goto label1;

     label2:
        return;
    }

    public weka.core.Instances trainCV(int, int)
    {
        weka.core.Instances this, train, $r2;
        int numFolds, numFold, first, $i0, $i1, numInstForFold#16, $i2, $i3, offset#23, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        java.lang.IllegalArgumentException $r0, $r1;

        this := @this: weka.core.Instances;

        numFolds := @parameter0: int;

        numFold := @parameter1: int;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(numFolds);

        if numFolds >= 2 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Number of folds must be at least 2!");

        throw $r0;

     label1:
        $i0 = virtualinvoke this.<weka.core.Instances: int numInstances()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(numFolds);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if numFolds <= $i0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t have more folds than instances!");

        throw $r1;

     label2:
        $i1 = virtualinvoke this.<weka.core.Instances: int numInstances()>();

        numInstForFold#16 = $i1 / numFolds;

        $i2 = virtualinvoke this.<weka.core.Instances: int numInstances()>();

        $i3 = $i2 % numFolds;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(numFold);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if numFold >= $i3 goto label3;

        numInstForFold#16 = numInstForFold#16 + 1;

        offset#23 = numFold;

        goto label4;

     label3:
        $i4 = virtualinvoke this.<weka.core.Instances: int numInstances()>();

        offset#23 = $i4 % numFolds;

     label4:
        $r2 = new weka.core.Instances;

        $i5 = virtualinvoke this.<weka.core.Instances: int numInstances()>();

        $i6 = $i5 - numInstForFold#16;

        specialinvoke $r2.<weka.core.Instances: void <init>(weka.core.Instances,int)>(this, $i6);

        train = $r2;

        $i7 = virtualinvoke this.<weka.core.Instances: int numInstances()>();

        $i8 = $i7 / numFolds;

        $i9 = numFold * $i8;

        first = $i9 + offset#23;

        virtualinvoke this.<weka.core.Instances: void copyInstances(int,weka.core.Instances,int)>(0, train, first);

        $i10 = first + numInstForFold#16;

        $i11 = virtualinvoke this.<weka.core.Instances: int numInstances()>();

        $i12 = $i11 - first;

        $i13 = $i12 - numInstForFold#16;

        virtualinvoke this.<weka.core.Instances: void copyInstances(int,weka.core.Instances,int)>($i10, train, $i13);

        return train;
    }

    public void swap(int, int)
    {
        weka.core.Instances this;
        int i, j;
        weka.core.Instance in;
        java.util.ArrayList $r0, $r2, $r3, $r6;
        java.lang.Object $r1, $r4;

        this := @this: weka.core.Instances;

        i := @parameter0: int;

        j := @parameter1: int;

        $r0 = this.<weka.core.Instances: java.util.ArrayList m_Instances>;

        $r1 = virtualinvoke $r0.<java.util.ArrayList: java.lang.Object get(int)>(i);

        in = (weka.core.Instance) $r1;

        $r2 = this.<weka.core.Instances: java.util.ArrayList m_Instances>;

        $r3 = this.<weka.core.Instances: java.util.ArrayList m_Instances>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(j);

        virtualinvoke $r2.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>(i, $r4);

        $r6 = this.<weka.core.Instances: java.util.ArrayList m_Instances>;

        virtualinvoke $r6.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>(j, in);

        return;
    }

    protected void stratStep(int)
    {
        weka.core.Instances this;
        int numFolds, $i0, start#7, $i1, $i2, j#13, $i3;
        java.util.ArrayList newVec, $r0, $r1;
        weka.core.Instance $r2;

        this := @this: weka.core.Instances;

        numFolds := @parameter0: int;

        $r0 = new java.util.ArrayList;

        $r1 = this.<weka.core.Instances: java.util.ArrayList m_Instances>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        newVec = $r0;

        start#7 = 0;

     label1:
        $i1 = virtualinvoke newVec.<java.util.ArrayList: int size()>();

        $i2 = virtualinvoke this.<weka.core.Instances: int numInstances()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i1 >= $i2 goto label4;

        j#13 = start#7;

     label2:
        $i3 = virtualinvoke this.<weka.core.Instances: int numInstances()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#13);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if j#13 >= $i3 goto label3;

        $r2 = virtualinvoke this.<weka.core.Instances: weka.core.Instance instance(int)>(j#13);

        virtualinvoke newVec.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        j#13 = j#13 + numFolds;

        goto label2;

     label3:
        start#7 = start#7 + 1;

        goto label1;

     label4:
        this.<weka.core.Instances: java.util.ArrayList m_Instances> = newVec;

        return;
    }

    public void <init>(weka.core.Instances)
    {
        weka.core.Instances this, dataset;
        int $i0, $i1;

        this := @this: weka.core.Instances;

        dataset := @parameter0: weka.core.Instances;

        $i0 = virtualinvoke dataset.<weka.core.Instances: int numInstances()>();

        specialinvoke this.<weka.core.Instances: void <init>(weka.core.Instances,int)>(dataset, $i0);

        $i1 = virtualinvoke dataset.<weka.core.Instances: int numInstances()>();

        virtualinvoke dataset.<weka.core.Instances: void copyInstances(int,weka.core.Instances,int)>(0, this, $i1);

        return;
    }

    public void <init>(weka.core.Instances, int, int)
    {
        weka.core.Instances this, source;
        int first, toCopy, $i0, $i1;
        java.lang.IllegalArgumentException $r0;

        this := @this: weka.core.Instances;

        source := @parameter0: weka.core.Instances;

        first := @parameter1: int;

        toCopy := @parameter2: int;

        specialinvoke this.<weka.core.Instances: void <init>(weka.core.Instances,int)>(source, toCopy);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(first);

        if first < 0 goto label1;

        $i0 = first + toCopy;

        $i1 = virtualinvoke source.<weka.core.Instances: int numInstances()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i0 <= $i1 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameters first and/or toCopy out of range");

        throw $r0;

     label2:
        virtualinvoke source.<weka.core.Instances: void copyInstances(int,weka.core.Instances,int)>(first, this, toCopy);

        return;
    }

    public boolean checkForStringAttributes()
    {
        weka.core.Instances this;
        boolean $z0;

        this := @this: weka.core.Instances;

        $z0 = virtualinvoke this.<weka.core.Instances: boolean checkForAttributeType(int)>(2);

        return $z0;
    }

    public boolean checkForAttributeType(int)
    {
        weka.core.Instances this;
        int attType, i#2, $i0, $i1, $i2;
        java.util.ArrayList $r0;
        weka.core.Attribute $r1;

        this := @this: weka.core.Instances;

        attType := @parameter0: int;

        i#2 = 0;

     label1:
        $r0 = this.<weka.core.Instances: java.util.ArrayList m_Attributes>;

        $i0 = virtualinvoke $r0.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#2 >= $i0 goto label2;

        $i1 = i#2;

        i#2 = i#2 + 1;

        $r1 = virtualinvoke this.<weka.core.Instances: weka.core.Attribute attribute(int)>($i1);

        $i2 = virtualinvoke $r1.<weka.core.Attribute: int type()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(attType);

        if $i2 != attType goto label1;

        return 1;

     label2:
        return 0;
    }

    public java.util.Enumeration enumerateAttributes()
    {
        weka.core.Instances this;
        weka.core.WekaEnumeration $r0;
        java.util.ArrayList $r1;
        int $i0;

        this := @this: weka.core.Instances;

        $r0 = new weka.core.WekaEnumeration;

        $r1 = this.<weka.core.Instances: java.util.ArrayList m_Attributes>;

        $i0 = this.<weka.core.Instances: int m_ClassIndex>;

        specialinvoke $r0.<weka.core.WekaEnumeration: void <init>(java.util.List,int)>($r1, $i0);

        return $r0;
    }

    public int numDistinctValues(weka.core.Attribute)
    {
        weka.core.Instances this;
        weka.core.Attribute att;
        int $i0, $i1;

        this := @this: weka.core.Instances;

        att := @parameter0: weka.core.Attribute;

        $i0 = virtualinvoke att.<weka.core.Attribute: int index()>();

        $i1 = virtualinvoke this.<weka.core.Instances: int numDistinctValues(int)>($i0);

        return $i1;
    }

    public int numDistinctValues(int)
    {
        weka.core.Instances this;
        int attIndex, $i0, $i1, $i2;
        java.util.HashSet set, $r0;
        java.util.Iterator l3;
        weka.core.Instance current;
        double key;
        boolean $z0, $z1;
        java.lang.Object $r1;
        java.lang.Double $r2;

        this := @this: weka.core.Instances;

        attIndex := @parameter0: int;

        $r0 = new java.util.HashSet;

        $i0 = virtualinvoke this.<weka.core.Instances: int numInstances()>();

        $i1 = 2 * $i0;

        specialinvoke $r0.<java.util.HashSet: void <init>(int)>($i1);

        set = $r0;

        l3 = virtualinvoke this.<weka.core.Instances: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        $r1 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        current = (weka.core.Instance) $r1;

        key = interfaceinvoke current.<weka.core.Instance: double value(int)>(attIndex);

        $z1 = staticinvoke <weka.core.Utils: boolean isMissingValue(double)>(key);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(key);

        virtualinvoke set.<java.util.HashSet: boolean add(java.lang.Object)>($r2);

     label2:
        goto label1;

     label3:
        $i2 = virtualinvoke set.<java.util.HashSet: int size()>();

        return $i2;
    }

    public void deleteWithMissingClass()
    {
        weka.core.Instances this;
        int $i0, $i1;
        weka.core.UnassignedClassException $r0;

        this := @this: weka.core.Instances;

        $i0 = this.<weka.core.Instances: int m_ClassIndex>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 >= 0 goto label1;

        $r0 = new weka.core.UnassignedClassException;

        specialinvoke $r0.<weka.core.UnassignedClassException: void <init>(java.lang.String)>("Class index is negative (not set)!");

        throw $r0;

     label1:
        $i1 = this.<weka.core.Instances: int m_ClassIndex>;

        virtualinvoke this.<weka.core.Instances: void deleteWithMissing(int)>($i1);

        return;
    }

    public java.util.Random getRandomNumberGenerator(long)
    {
        weka.core.Instances this;
        long seed, $l3, $l4;
        java.util.Random r, $r0;
        int $i0, $i1, $i2;
        weka.core.Instance $r1;
        java.lang.String $r2;

        this := @this: weka.core.Instances;

        seed := @parameter0: long;

        $r0 = new java.util.Random;

        specialinvoke $r0.<java.util.Random: void <init>(long)>(seed);

        r = $r0;

        $i0 = virtualinvoke this.<weka.core.Instances: int numInstances()>();

        $i1 = virtualinvoke r.<java.util.Random: int nextInt(int)>($i0);

        $r1 = virtualinvoke this.<weka.core.Instances: weka.core.Instance instance(int)>($i1);

        $r2 = interfaceinvoke $r1.<weka.core.Instance: java.lang.String toStringNoWeight()>();

        $i2 = virtualinvoke $r2.<java.lang.String: int hashCode()>();

        $l3 = (long) $i2;

        $l4 = $l3 + seed;

        virtualinvoke r.<java.util.Random: void setSeed(long)>($l4);

        return r;
    }

    public void deleteWithMissing(int)
    {
        weka.core.Instances this;
        int attIndex, $i0, i#6, $i1;
        java.util.ArrayList newInstances, $r0;
        weka.core.Instance $r1, $r2;
        boolean $z0;

        this := @this: weka.core.Instances;

        attIndex := @parameter0: int;

        $r0 = new java.util.ArrayList;

        $i0 = virtualinvoke this.<weka.core.Instances: int numInstances()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        newInstances = $r0;

        i#6 = 0;

     label1:
        $i1 = virtualinvoke this.<weka.core.Instances: int numInstances()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#6 >= $i1 goto label3;

        $r1 = virtualinvoke this.<weka.core.Instances: weka.core.Instance instance(int)>(i#6);

        $z0 = interfaceinvoke $r1.<weka.core.Instance: boolean isMissing(int)>(attIndex);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label2;

        $r2 = virtualinvoke this.<weka.core.Instances: weka.core.Instance instance(int)>(i#6);

        virtualinvoke newInstances.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

     label2:
        i#6 = i#6 + 1;

        goto label1;

     label3:
        this.<weka.core.Instances: java.util.ArrayList m_Instances> = newInstances;

        return;
    }

    public double sumOfWeights()
    {
        weka.core.Instances this;
        double sum#2, $d0;
        int i#4, $i0;
        weka.core.Instance $r0;

        this := @this: weka.core.Instances;

        sum#2 = 0.0;

        i#4 = 0;

     label1:
        $i0 = virtualinvoke this.<weka.core.Instances: int numInstances()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#4 >= $i0 goto label2;

        $r0 = virtualinvoke this.<weka.core.Instances: weka.core.Instance instance(int)>(i#4);

        $d0 = interfaceinvoke $r0.<weka.core.Instance: double weight()>();

        sum#2 = sum#2 + $d0;

        i#4 = i#4 + 1;

        goto label1;

     label2:
        return sum#2;
    }

    public void sort(weka.core.Attribute)
    {
        weka.core.Instances this;
        weka.core.Attribute att;
        int $i0;

        this := @this: weka.core.Instances;

        att := @parameter0: weka.core.Attribute;

        $i0 = virtualinvoke att.<weka.core.Attribute: int index()>();

        virtualinvoke this.<weka.core.Instances: void sort(int)>($i0);

        return;
    }

    public void sort(int)
    {
        weka.core.Instances this;
        int attIndex, $i0, $i1, i#12, $i2, i#36, $i3, $i4;
        double[] vals;
        weka.core.Instance[] backup;
        weka.core.Instance inst, $r2;
        double val;
        int[] sortOrder;
        weka.core.Attribute $r0;
        boolean $z0, $z1;
        java.util.ArrayList $r1;

        this := @this: weka.core.Instances;

        attIndex := @parameter0: int;

        $r0 = virtualinvoke this.<weka.core.Instances: weka.core.Attribute attribute(int)>(attIndex);

        $z0 = virtualinvoke $r0.<weka.core.Attribute: boolean isNominal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label7;

        $i0 = virtualinvoke this.<weka.core.Instances: int numInstances()>();

        vals = newarray (double)[$i0];

        $i1 = lengthof vals;

        backup = newarray (weka.core.Instance)[$i1];

        i#12 = 0;

     label1:
        $i2 = lengthof vals;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#12 >= $i2 goto label4;

        inst = virtualinvoke this.<weka.core.Instances: weka.core.Instance instance(int)>(i#12);

        backup[i#12] = inst;

        val = interfaceinvoke inst.<weka.core.Instance: double value(int)>(attIndex);

        $z1 = staticinvoke <weka.core.Utils: boolean isMissingValue(double)>(val);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        vals[i#12] = 1.7976931348623157E308;

        goto label3;

     label2:
        vals[i#12] = val;

     label3:
        i#12 = i#12 + 1;

        goto label1;

     label4:
        sortOrder = staticinvoke <weka.core.Utils: int[] sortWithNoMissingValues(double[])>(vals);

        i#36 = 0;

     label5:
        $i3 = lengthof vals;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#36);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if i#36 >= $i3 goto label6;

        $r1 = this.<weka.core.Instances: java.util.ArrayList m_Instances>;

        $i4 = sortOrder[i#36];

        $r2 = backup[$i4];

        virtualinvoke $r1.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>(i#36, $r2);

        i#36 = i#36 + 1;

        goto label5;

     label6:
        goto label8;

     label7:
        virtualinvoke this.<weka.core.Instances: void sortBasedOnNominalAttribute(int)>(attIndex);

     label8:
        return;
    }

    protected void sortBasedOnNominalAttribute(int)
    {
        weka.core.Instances this;
        int attIndex, l8, $i0, $i1, j#10, $i2, $i3, $i4, $i5, $i6, start#38, i#40, $i7, $i8, l9#56, $i9, $i10, $i11, $i12;
        int[] counts, indices;
        weka.core.Instance[] backup, l7;
        java.util.Iterator l5;
        weka.core.Instance inst, inst;
        weka.core.Attribute $r0;
        boolean $z0, $z1, $z2;
        java.lang.Object $r1;
        double $d0, $d1;
        java.util.ArrayList $r3, $r6;

        this := @this: weka.core.Instances;

        attIndex := @parameter0: int;

        $r0 = virtualinvoke this.<weka.core.Instances: weka.core.Attribute attribute(int)>(attIndex);

        $i0 = virtualinvoke $r0.<weka.core.Attribute: int numValues()>();

        counts = newarray (int)[$i0];

        $i1 = virtualinvoke this.<weka.core.Instances: int numInstances()>();

        backup = newarray (weka.core.Instance)[$i1];

        j#10 = 0;

        l5 = virtualinvoke this.<weka.core.Instances: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        $r1 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        inst = (weka.core.Instance) $r1;

        $i2 = j#10;

        j#10 = j#10 + 1;

        backup[$i2] = inst;

        $z1 = interfaceinvoke inst.<weka.core.Instance: boolean isMissing(int)>(attIndex);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label2;

        $d0 = interfaceinvoke inst.<weka.core.Instance: double value(int)>(attIndex);

        $i3 = (int) $d0;

        $i4 = counts[$i3];

        $i5 = $i4 + 1;

        counts[$i3] = $i5;

     label2:
        goto label1;

     label3:
        $i6 = lengthof counts;

        indices = newarray (int)[$i6];

        start#38 = 0;

        i#40 = 0;

     label4:
        $i7 = lengthof counts;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#40);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if i#40 >= $i7 goto label5;

        indices[i#40] = start#38;

        $i8 = counts[i#40];

        start#38 = start#38 + $i8;

        i#40 = i#40 + 1;

        goto label4;

     label5:
        l7 = backup;

        l8 = lengthof l7;

        l9#56 = 0;

     label6:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l9#56);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l8);

        if l9#56 >= l8 goto label9;

        inst = l7[l9#56];

        $z2 = interfaceinvoke inst.<weka.core.Instance: boolean isMissing(int)>(attIndex);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label7;

        $r3 = this.<weka.core.Instances: java.util.ArrayList m_Instances>;

        $d1 = interfaceinvoke inst.<weka.core.Instance: double value(int)>(attIndex);

        $i9 = (int) $d1;

        $i10 = indices[$i9];

        $i11 = $i10 + 1;

        indices[$i9] = $i11;

        virtualinvoke $r3.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>($i10, inst);

        goto label8;

     label7:
        $r6 = this.<weka.core.Instances: java.util.ArrayList m_Instances>;

        $i12 = start#38;

        start#38 = start#38 + 1;

        virtualinvoke $r6.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>($i12, inst);

     label8:
        l9#56 = l9#56 + 1;

        goto label6;

     label9:
        return;
    }

    public weka.core.Instances stringFreeStructure()
    {
        weka.core.Instances this, result, $r8, $r9, $r10, $r16;
        java.util.ArrayList newAtts, atts, $r0, $r1, $r11;
        java.util.Iterator l2, l3;
        weka.core.Attribute att, att, $r3, $r6;
        boolean $z0, $z3;
        java.lang.Object $r2, $r12, $r13, $r14;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r4, $r7;
        java.util.List $r5;

        this := @this: weka.core.Instances;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        newAtts = $r0;

        $r1 = this.<weka.core.Instances: java.util.ArrayList m_Attributes>;

        l2 = virtualinvoke $r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        att = (weka.core.Attribute) $r2;

        $i0 = virtualinvoke att.<weka.core.Attribute: int type()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 2 goto label2;

        $r3 = new weka.core.Attribute;

        $r4 = virtualinvoke att.<weka.core.Attribute: java.lang.String name()>();

        $r5 = (java.util.List) null;

        $i1 = virtualinvoke att.<weka.core.Attribute: int index()>();

        specialinvoke $r3.<weka.core.Attribute: void <init>(java.lang.String,java.util.List,int)>($r4, $r5, $i1);

        virtualinvoke newAtts.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        goto label3;

     label2:
        $i2 = virtualinvoke att.<weka.core.Attribute: int type()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 != 4 goto label3;

        $r6 = new weka.core.Attribute;

        $r7 = virtualinvoke att.<weka.core.Attribute: java.lang.String name()>();

        $r8 = new weka.core.Instances;

        $r9 = virtualinvoke att.<weka.core.Attribute: weka.core.Instances relation()>();

        specialinvoke $r8.<weka.core.Instances: void <init>(weka.core.Instances,int)>($r9, 0);

        $i3 = virtualinvoke att.<weka.core.Attribute: int index()>();

        specialinvoke $r6.<weka.core.Attribute: void <init>(java.lang.String,weka.core.Instances,int)>($r7, $r8, $i3);

        virtualinvoke newAtts.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

     label3:
        goto label1;

     label4:
        $i4 = virtualinvoke newAtts.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 != 0 goto label5;

        $r10 = new weka.core.Instances;

        specialinvoke $r10.<weka.core.Instances: void <init>(weka.core.Instances,int)>(this, 0);

        return $r10;

     label5:
        $r11 = this.<weka.core.Instances: java.util.ArrayList m_Attributes>;

        $r12 = virtualinvoke $r11.<java.util.ArrayList: java.lang.Object clone()>();

        $r13 = staticinvoke <weka.core.Utils: java.lang.Object cast(java.lang.Object)>($r12);

        atts = (java.util.ArrayList) $r13;

        l3 = virtualinvoke newAtts.<java.util.ArrayList: java.util.Iterator iterator()>();

     label6:
        $z3 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label7;

        $r14 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        att = (weka.core.Attribute) $r14;

        $i5 = virtualinvoke att.<weka.core.Attribute: int index()>();

        virtualinvoke atts.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>($i5, att);

        goto label6;

     label7:
        $r16 = new weka.core.Instances;

        specialinvoke $r16.<weka.core.Instances: void <init>(weka.core.Instances,int)>(this, 0);

        result = $r16;

        result.<weka.core.Instances: java.util.ArrayList m_Attributes> = atts;

        return result;
    }

    public void setRelationName(java.lang.String)
    {
        weka.core.Instances this;
        java.lang.String newName;

        this := @this: weka.core.Instances;

        newName := @parameter0: java.lang.String;

        this.<weka.core.Instances: java.lang.String m_RelationName> = newName;

        return;
    }

    public void setClass(weka.core.Attribute)
    {
        weka.core.Instances this;
        weka.core.Attribute att;
        int $i0;

        this := @this: weka.core.Instances;

        att := @parameter0: weka.core.Attribute;

        $i0 = virtualinvoke att.<weka.core.Attribute: int index()>();

        this.<weka.core.Instances: int m_ClassIndex> = $i0;

        return;
    }

    public void delete()
    {
        weka.core.Instances this;
        java.util.ArrayList $r0;

        this := @this: weka.core.Instances;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        this.<weka.core.Instances: java.util.ArrayList m_Instances> = $r0;

        return;
    }

    public void compactify()
    {
        weka.core.Instances this;
        java.util.ArrayList $r0;

        this := @this: weka.core.Instances;

        $r0 = this.<weka.core.Instances: java.util.ArrayList m_Instances>;

        virtualinvoke $r0.<java.util.ArrayList: void trimToSize()>();

        return;
    }


