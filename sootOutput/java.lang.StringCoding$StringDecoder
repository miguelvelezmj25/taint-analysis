    void <init>(java.nio.charset.Charset, java.lang.String, java.lang.StringCoding$1)
    {
        java.lang.StringCoding$StringDecoder l0;
        java.nio.charset.Charset l1;
        java.lang.String l2;
        java.lang.StringCoding$1 l3;

        l0 := @this: java.lang.StringCoding$StringDecoder;

        l1 := @parameter0: java.nio.charset.Charset;

        l2 := @parameter1: java.lang.String;

        l3 := @parameter2: java.lang.StringCoding$1;

        specialinvoke l0.<java.lang.StringCoding$StringDecoder: void <init>(java.nio.charset.Charset,java.lang.String)>(l1, l2);

        return;
    }

    private void <init>(java.nio.charset.Charset, java.lang.String)
    {
        java.lang.StringCoding$StringDecoder l0;
        java.nio.charset.Charset l1;
        java.lang.String l2;
        java.nio.charset.CharsetDecoder $r0, $r2, $r4;
        java.nio.charset.CodingErrorAction $r1, $r3;
        java.lang.Class $r6;
        java.lang.ClassLoader $r7;
        boolean $z0;

        l0 := @this: java.lang.StringCoding$StringDecoder;

        l1 := @parameter0: java.nio.charset.Charset;

        l2 := @parameter1: java.lang.String;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        l0.<java.lang.StringCoding$StringDecoder: java.lang.String requestedCharsetName> = l2;

        l0.<java.lang.StringCoding$StringDecoder: java.nio.charset.Charset cs> = l1;

        $r0 = virtualinvoke l1.<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>();

        $r1 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;

        $r2 = virtualinvoke $r0.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)>($r1);

        $r3 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;

        $r4 = virtualinvoke $r2.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>($r3);

        l0.<java.lang.StringCoding$StringDecoder: java.nio.charset.CharsetDecoder cd> = $r4;

        $r6 = virtualinvoke l1.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>();

        if $r7 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        l0.<java.lang.StringCoding$StringDecoder: boolean isTrusted> = $z0;

        return;
    }

    final java.lang.String requestedCharsetName()
    {
        java.lang.StringCoding$StringDecoder l0;
        java.lang.String $r0;

        l0 := @this: java.lang.StringCoding$StringDecoder;

        $r0 = l0.<java.lang.StringCoding$StringDecoder: java.lang.String requestedCharsetName>;

        return $r0;
    }

    java.lang.String charsetName()
    {
        java.lang.StringCoding$StringDecoder l0;
        java.nio.charset.Charset $r0, $r1, $r4;
        boolean $z0;
        sun.nio.cs.HistoricallyNamedCharset $r2;
        java.lang.String $r3, $r5;

        l0 := @this: java.lang.StringCoding$StringDecoder;

        $r0 = l0.<java.lang.StringCoding$StringDecoder: java.nio.charset.Charset cs>;

        $z0 = $r0 instanceof sun.nio.cs.HistoricallyNamedCharset;

        if $z0 == 0 goto label1;

        $r1 = l0.<java.lang.StringCoding$StringDecoder: java.nio.charset.Charset cs>;

        $r2 = (sun.nio.cs.HistoricallyNamedCharset) $r1;

        $r3 = interfaceinvoke $r2.<sun.nio.cs.HistoricallyNamedCharset: java.lang.String historicalName()>();

        return $r3;

     label1:
        $r4 = l0.<java.lang.StringCoding$StringDecoder: java.nio.charset.Charset cs>;

        $r5 = virtualinvoke $r4.<java.nio.charset.Charset: java.lang.String name()>();

        return $r5;
    }

    char[] decode(byte[], int, int)
    {
        java.lang.StringCoding$StringDecoder l0;
        byte[] l1;
        int l2, l3, l4, l6#20, $i0;
        char[] l5, $r5, $r13;
        java.nio.CharBuffer l7;
        java.nio.charset.CharsetDecoder $r0, $r1, $r2, $r6, $r8, $r9;
        float $f0;
        boolean $z0, $z1, $z2, $z3, $z4;
        sun.nio.cs.ArrayDecoder $r3;
        java.nio.charset.Charset $r4, $r12;
        java.nio.ByteBuffer l6#35;
        java.nio.charset.CoderResult l8#44, l8#52;
        java.nio.charset.CharacterCodingException $r10, l8#57;
        java.lang.Error $r11;

        l0 := @this: java.lang.StringCoding$StringDecoder;

        l1 := @parameter0: byte[];

        l2 := @parameter1: int;

        l3 := @parameter2: int;

        $r0 = l0.<java.lang.StringCoding$StringDecoder: java.nio.charset.CharsetDecoder cd>;

        $f0 = virtualinvoke $r0.<java.nio.charset.CharsetDecoder: float maxCharsPerByte()>();

        l4 = staticinvoke <java.lang.StringCoding: int access$000(int,float)>(l3, $f0);

        l5 = newarray (char)[l4];

        if l3 != 0 goto label1;

        return l5;

     label1:
        $r1 = l0.<java.lang.StringCoding$StringDecoder: java.nio.charset.CharsetDecoder cd>;

        $z0 = $r1 instanceof sun.nio.cs.ArrayDecoder;

        if $z0 == 0 goto label2;

        $r2 = l0.<java.lang.StringCoding$StringDecoder: java.nio.charset.CharsetDecoder cd>;

        $r3 = (sun.nio.cs.ArrayDecoder) $r2;

        l6#20 = interfaceinvoke $r3.<sun.nio.cs.ArrayDecoder: int decode(byte[],int,int,char[])>(l1, l2, l3, l5);

        $r4 = l0.<java.lang.StringCoding$StringDecoder: java.nio.charset.Charset cs>;

        $z1 = l0.<java.lang.StringCoding$StringDecoder: boolean isTrusted>;

        $r5 = staticinvoke <java.lang.StringCoding: char[] access$100(char[],int,java.nio.charset.Charset,boolean)>(l5, l6#20, $r4, $z1);

        return $r5;

     label2:
        $r6 = l0.<java.lang.StringCoding$StringDecoder: java.nio.charset.CharsetDecoder cd>;

        virtualinvoke $r6.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder reset()>();

        l6#35 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>(l1, l2, l3);

        l7 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(char[])>(l5);

     label3:
        $r8 = l0.<java.lang.StringCoding$StringDecoder: java.nio.charset.CharsetDecoder cd>;

        l8#44 = virtualinvoke $r8.<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)>(l6#35, l7, 1);

        $z2 = virtualinvoke l8#44.<java.nio.charset.CoderResult: boolean isUnderflow()>();

        if $z2 != 0 goto label4;

        virtualinvoke l8#44.<java.nio.charset.CoderResult: void throwException()>();

     label4:
        $r9 = l0.<java.lang.StringCoding$StringDecoder: java.nio.charset.CharsetDecoder cd>;

        l8#52 = virtualinvoke $r9.<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult flush(java.nio.CharBuffer)>(l7);

        $z3 = virtualinvoke l8#52.<java.nio.charset.CoderResult: boolean isUnderflow()>();

        if $z3 != 0 goto label5;

        virtualinvoke l8#52.<java.nio.charset.CoderResult: void throwException()>();

     label5:
        goto label7;

     label6:
        $r10 := @caughtexception;

        l8#57 = $r10;

        $r11 = new java.lang.Error;

        specialinvoke $r11.<java.lang.Error: void <init>(java.lang.Throwable)>(l8#57);

        throw $r11;

     label7:
        $i0 = virtualinvoke l7.<java.nio.CharBuffer: int position()>();

        $r12 = l0.<java.lang.StringCoding$StringDecoder: java.nio.charset.Charset cs>;

        $z4 = l0.<java.lang.StringCoding$StringDecoder: boolean isTrusted>;

        $r13 = staticinvoke <java.lang.StringCoding: char[] access$100(char[],int,java.nio.charset.Charset,boolean)>(l5, $i0, $r12, $z4);

        return $r13;

        catch java.nio.charset.CharacterCodingException from label3 to label5 with label6;
    }


