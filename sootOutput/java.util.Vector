    public void <init>()
    {
        java.util.Vector l0;

        l0 := @this: java.util.Vector;

        specialinvoke l0.<java.util.Vector: void <init>(int)>(10);

        return;
    }

    public void <init>(int)
    {
        java.util.Vector l0;
        int l1;

        l0 := @this: java.util.Vector;

        l1 := @parameter0: int;

        specialinvoke l0.<java.util.Vector: void <init>(int,int)>(l1, 0);

        return;
    }

    public void <init>(int, int)
    {
        java.util.Vector l0;
        int l1, l2;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;
        java.lang.Object[] $r5;

        l0 := @this: java.util.Vector;

        l1 := @parameter0: int;

        l2 := @parameter1: int;

        specialinvoke l0.<java.util.AbstractList: void <init>()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l1);

        if l1 >= 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal Capacity: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(l1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label1:
        $r5 = newarray (java.lang.Object)[l1];

        l0.<java.util.Vector: java.lang.Object[] elementData> = $r5;

        l0.<java.util.Vector: int capacityIncrement> = l2;

        return;
    }


