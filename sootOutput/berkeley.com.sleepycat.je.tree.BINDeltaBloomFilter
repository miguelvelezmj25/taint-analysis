    public static void writeToLog(byte[], java.nio.ByteBuffer)
    {
        byte[] bf;
        java.nio.ByteBuffer buffer;

        bf := @parameter0: byte[];

        buffer := @parameter1: java.nio.ByteBuffer;

        staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: void writeByteArray(java.nio.ByteBuffer,byte[])>(buffer, bf);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "berkeley/com/sleepycat/je/tree/BINDeltaBloomFilter";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter: boolean $assertionsDisabled> = $z1;

        return;
    }

    public static void add(byte[], byte[], berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter$HashContext)
    {
        byte[] bf, key;
        berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter$HashContext hc;
        int[] l3;
        int l4, idx, l5#8;

        bf := @parameter0: byte[];

        key := @parameter1: byte[];

        hc := @parameter2: berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter$HashContext;

        staticinvoke <berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter: void hash(byte[],byte[],berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter$HashContext)>(bf, key, hc);

        l3 = hc.<berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter$HashContext: int[] hashes>;

        l4 = lengthof l3;

        l5#8 = 0;

     label1:
        if l5#8 >= l4 goto label2;

        idx = l3[l5#8];

        staticinvoke <berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter: void setBit(byte[],int)>(bf, idx);

        l5#8 = l5#8 + 1;

        goto label1;

     label2:
        return;
    }

    public static int getByteSize(int)
    {
        int numKeys, nbits, $i0, $i1;
        boolean $z0;
        java.lang.AssertionError $r0;

        numKeys := @parameter0: int;

        $z0 = <berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if numKeys > 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        nbits = numKeys * 8;

        $i0 = nbits + 7;

        $i1 = $i0 / 8;

        return $i1;
    }

    private static void setBit(byte[], int)
    {
        byte[] bf;
        int idx, $i0, $i2, $i3, $i4;
        byte $b1, $b5;

        bf := @parameter0: byte[];

        idx := @parameter1: int;

        $i0 = idx / 8;

        $b1 = bf[$i0];

        $i2 = idx % 8;

        $i3 = 1 << $i2;

        $i4 = $b1 | $i3;

        $b5 = (byte) $i4;

        bf[$i0] = $b5;

        return;
    }

    private static void hash(byte[], byte[], berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter$HashContext)
    {
        byte[] bf, key;
        berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter$HashContext hc;
        int numBits, $i0, $i3, hash#23, $i4, $i5, hash#35, $i6, $i7, hash#47, $i8, $i9, $i10, $i15, $i16, $i21, $i22, $i27;
        boolean $z0;
        int[] $r0, $r4, $r5, $r6, $r7, $r9, $r11;
        java.lang.AssertionError $r1;
        java.util.Random $r2, $r3, $r8, $r10, $r12;
        long $l1, $l2, $l11, $l12, $l13, $l14, $l17, $l18, $l19, $l20, $l23, $l24, $l25, $l26;

        bf := @parameter0: byte[];

        key := @parameter1: byte[];

        hc := @parameter2: berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter$HashContext;

        $z0 = <berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r0 = hc.<berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter$HashContext: int[] hashes>;

        $i0 = lengthof $r0;

        if $i0 == 3 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $r2 = hc.<berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter$HashContext: java.util.Random rng>;

        $l1 = hc.<berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter$HashContext: long initFNVvalue>;

        $l2 = staticinvoke <berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter: long hashFNV(byte[],long)>(key, $l1);

        virtualinvoke $r2.<java.util.Random: void setSeed(long)>($l2);

        $i3 = lengthof bf;

        numBits = $i3 * 8;

        if numBits > 1024 goto label2;

        $r3 = hc.<berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter$HashContext: java.util.Random rng>;

        hash#23 = virtualinvoke $r3.<java.util.Random: int nextInt()>();

        $r4 = hc.<berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter$HashContext: int[] hashes>;

        $i4 = hash#23 & 1023;

        $i5 = $i4 % numBits;

        $r4[0] = $i5;

        hash#35 = hash#23 >> 10;

        $r5 = hc.<berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter$HashContext: int[] hashes>;

        $i6 = hash#35 & 1023;

        $i7 = $i6 % numBits;

        $r5[1] = $i7;

        hash#47 = hash#35 >> 10;

        $r6 = hc.<berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter$HashContext: int[] hashes>;

        $i8 = hash#47 & 1023;

        $i9 = $i8 % numBits;

        $r6[2] = $i9;

        goto label3;

     label2:
        $r7 = hc.<berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter$HashContext: int[] hashes>;

        $r8 = hc.<berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter$HashContext: java.util.Random rng>;

        $i10 = virtualinvoke $r8.<java.util.Random: int nextInt()>();

        $l11 = (long) $i10;

        $l12 = $l11 & 4294967295L;

        $l13 = (long) numBits;

        $l14 = $l12 % $l13;

        $i15 = (int) $l14;

        $r7[0] = $i15;

        $r9 = hc.<berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter$HashContext: int[] hashes>;

        $r10 = hc.<berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter$HashContext: java.util.Random rng>;

        $i16 = virtualinvoke $r10.<java.util.Random: int nextInt()>();

        $l17 = (long) $i16;

        $l18 = $l17 & 4294967295L;

        $l19 = (long) numBits;

        $l20 = $l18 % $l19;

        $i21 = (int) $l20;

        $r9[1] = $i21;

        $r11 = hc.<berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter$HashContext: int[] hashes>;

        $r12 = hc.<berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter$HashContext: java.util.Random rng>;

        $i22 = virtualinvoke $r12.<java.util.Random: int nextInt()>();

        $l23 = (long) $i22;

        $l24 = $l23 & 4294967295L;

        $l25 = (long) numBits;

        $l26 = $l24 % $l25;

        $i27 = (int) $l26;

        $r11[2] = $i27;

     label3:
        return;
    }

    private static long hashFNV(byte[], long)
    {
        byte[] key, l5;
        long initValue, hash#2, $l0, hash#18, $l1;
        int l6, l7#7;
        byte b;

        key := @parameter0: byte[];

        initValue := @parameter1: long;

        hash#2 = initValue;

        l5 = key;

        l6 = lengthof l5;

        l7#7 = 0;

     label1:
        if l7#7 >= l6 goto label2;

        b = l5[l7#7];

        $l0 = hash#2 * 16777619L;

        hash#18 = $l0 & -1L;

        $l1 = (long) b;

        hash#2 = hash#18 ^ $l1;

        l7#7 = l7#7 + 1;

        goto label1;

     label2:
        return hash#2;
    }

    static long access$000(byte[], long)
    {
        byte[] x0;
        long x1, $l0;

        x0 := @parameter0: byte[];

        x1 := @parameter1: long;

        $l0 = staticinvoke <berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter: long hashFNV(byte[],long)>(x0, x1);

        return $l0;
    }

    public static int getLogSize(int)
    {
        int numKeys, nbytes, $i0, $i1;

        numKeys := @parameter0: int;

        nbytes = staticinvoke <berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter: int getByteSize(int)>(numKeys);

        $i0 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int getPackedIntLogSize(int)>(nbytes);

        $i1 = $i0 + nbytes;

        return $i1;
    }

    public static int getLogSize(byte[])
    {
        byte[] bf;
        int $i0;

        bf := @parameter0: byte[];

        $i0 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int getByteArrayLogSize(byte[])>(bf);

        return $i0;
    }

    public static byte[] readFromLog(java.nio.ByteBuffer, int)
    {
        java.nio.ByteBuffer buffer;
        int entryVersion;
        byte[] $r0;

        buffer := @parameter0: java.nio.ByteBuffer;

        entryVersion := @parameter1: int;

        $r0 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: byte[] readByteArray(java.nio.ByteBuffer,boolean)>(buffer, 0);

        return $r0;
    }

    static int getMemorySize(byte[])
    {
        byte[] bf;
        int $i0, $i1;

        bf := @parameter0: byte[];

        $i0 = lengthof bf;

        $i1 = staticinvoke <berkeley.com.sleepycat.je.dbi.MemoryBudget: int byteArraySize(int)>($i0);

        return $i1;
    }

    static boolean contains(byte[], byte[])
    {
        byte[] bf, key;
        berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter$HashContext hc, $r0;
        int[] l3;
        int l4, idx, l5#10;
        boolean $z0;

        bf := @parameter0: byte[];

        key := @parameter1: byte[];

        $r0 = new berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter$HashContext;

        specialinvoke $r0.<berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter$HashContext: void <init>()>();

        hc = $r0;

        staticinvoke <berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter: void hash(byte[],byte[],berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter$HashContext)>(bf, key, hc);

        l3 = hc.<berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter$HashContext: int[] hashes>;

        l4 = lengthof l3;

        l5#10 = 0;

     label1:
        if l5#10 >= l4 goto label3;

        idx = l3[l5#10];

        $z0 = staticinvoke <berkeley.com.sleepycat.je.tree.BINDeltaBloomFilter: boolean getBit(byte[],int)>(bf, idx);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        l5#10 = l5#10 + 1;

        goto label1;

     label3:
        return 1;
    }

    private static boolean getBit(byte[], int)
    {
        byte[] bf;
        int idx, $i0, $i2, $i3, $i4;
        byte $b1;
        boolean $z0;

        bf := @parameter0: byte[];

        idx := @parameter1: int;

        $i0 = idx / 8;

        $b1 = bf[$i0];

        $i2 = idx % 8;

        $i3 = 1 << $i2;

        $i4 = $b1 & $i3;

        if $i4 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }


