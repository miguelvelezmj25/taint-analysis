    public boolean verifyCRC(long)
    {
        com.googlecode.pngtastic.core.PngChunk this;
        long crc, $l0;
        byte $b1;
        boolean $z0;

        this := @this: com.googlecode.pngtastic.core.PngChunk;

        crc := @parameter0: long;

        $l0 = virtualinvoke this.<com.googlecode.pngtastic.core.PngChunk: long getCRC()>();

        $b1 = $l0 cmp crc;

        if $b1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String getTypeString()
    {
        com.googlecode.pngtastic.core.PngChunk this;
        java.io.UnsupportedEncodingException e, $r2;
        java.lang.String $r0;
        byte[] $r1;

        this := @this: com.googlecode.pngtastic.core.PngChunk;

     label1:
        $r0 = new java.lang.String;

        $r1 = this.<com.googlecode.pngtastic.core.PngChunk: byte[] type>;

        specialinvoke $r0.<java.lang.String: void <init>(byte[],java.lang.String)>($r1, "UTF8");

     label2:
        return $r0;

     label3:
        $r2 := @caughtexception;

        e = $r2;

        return "";

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public long getCRC()
    {
        com.googlecode.pngtastic.core.PngChunk this;
        java.util.zip.CRC32 crc32, $r0;
        byte[] $r1, $r2;
        long $l0;

        this := @this: com.googlecode.pngtastic.core.PngChunk;

        $r0 = new java.util.zip.CRC32;

        specialinvoke $r0.<java.util.zip.CRC32: void <init>()>();

        crc32 = $r0;

        $r1 = this.<com.googlecode.pngtastic.core.PngChunk: byte[] type>;

        virtualinvoke crc32.<java.util.zip.CRC32: void update(byte[])>($r1);

        $r2 = this.<com.googlecode.pngtastic.core.PngChunk: byte[] data>;

        virtualinvoke crc32.<java.util.zip.CRC32: void update(byte[])>($r2);

        $l0 = virtualinvoke crc32.<java.util.zip.CRC32: long getValue()>();

        return $l0;
    }

    public void <init>(byte[], byte[])
    {
        com.googlecode.pngtastic.core.PngChunk this;
        byte[] type, data;

        this := @this: com.googlecode.pngtastic.core.PngChunk;

        type := @parameter0: byte[];

        data := @parameter1: byte[];

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<com.googlecode.pngtastic.core.PngChunk: byte[] type> = type;

        this.<com.googlecode.pngtastic.core.PngChunk: byte[] data> = data;

        return;
    }

    public long getWidth()
    {
        com.googlecode.pngtastic.core.PngChunk this;
        long $l0;

        this := @this: com.googlecode.pngtastic.core.PngChunk;

        $l0 = virtualinvoke this.<com.googlecode.pngtastic.core.PngChunk: long getUnsignedInt(int)>(0);

        return $l0;
    }

    public long getHeight()
    {
        com.googlecode.pngtastic.core.PngChunk this;
        long $l0;

        this := @this: com.googlecode.pngtastic.core.PngChunk;

        $l0 = virtualinvoke this.<com.googlecode.pngtastic.core.PngChunk: long getUnsignedInt(int)>(4);

        return $l0;
    }

    public short getBitDepth()
    {
        com.googlecode.pngtastic.core.PngChunk this;
        short $s0;

        this := @this: com.googlecode.pngtastic.core.PngChunk;

        $s0 = virtualinvoke this.<com.googlecode.pngtastic.core.PngChunk: short getUnsignedByte(int)>(8);

        return $s0;
    }

    public short getColorType()
    {
        com.googlecode.pngtastic.core.PngChunk this;
        short $s0;

        this := @this: com.googlecode.pngtastic.core.PngChunk;

        $s0 = virtualinvoke this.<com.googlecode.pngtastic.core.PngChunk: short getUnsignedByte(int)>(9);

        return $s0;
    }

    public short getInterlace()
    {
        com.googlecode.pngtastic.core.PngChunk this;
        short $s0;

        this := @this: com.googlecode.pngtastic.core.PngChunk;

        $s0 = virtualinvoke this.<com.googlecode.pngtastic.core.PngChunk: short getUnsignedByte(int)>(12);

        return $s0;
    }

    public short getUnsignedByte(int)
    {
        com.googlecode.pngtastic.core.PngChunk this;
        int offset;
        byte[] $r0;
        byte $b0;
        short $s1, $s2;

        this := @this: com.googlecode.pngtastic.core.PngChunk;

        offset := @parameter0: int;

        $r0 = this.<com.googlecode.pngtastic.core.PngChunk: byte[] data>;

        $b0 = $r0[offset];

        $s1 = $b0 & 255;

        $s2 = (short) $s1;

        return $s2;
    }

    public long getUnsignedInt(int)
    {
        com.googlecode.pngtastic.core.PngChunk this;
        int offset, $i0, $i2, $i3, $i5, i#2;
        byte[] $r0;
        byte $b1;
        short $s4;
        long $l6, value#1;

        this := @this: com.googlecode.pngtastic.core.PngChunk;

        offset := @parameter0: int;

        value#1 = 0L;

        i#2 = 0;

     label1:
        if i#2 >= 4 goto label2;

        $r0 = this.<com.googlecode.pngtastic.core.PngChunk: byte[] data>;

        $i0 = offset + i#2;

        $b1 = $r0[$i0];

        $s4 = $b1 & 255;

        $i2 = 3 - i#2;

        $i3 = $i2 * 8;

        $i5 = $s4 << $i3;

        $l6 = (long) $i5;

        value#1 = value#1 + $l6;

        i#2 = i#2 + 1;

        goto label1;

     label2:
        return value#1;
    }

    public void setInterlace(byte)
    {
        com.googlecode.pngtastic.core.PngChunk this;
        byte interlace;
        byte[] $r0;

        this := @this: com.googlecode.pngtastic.core.PngChunk;

        interlace := @parameter0: byte;

        $r0 = this.<com.googlecode.pngtastic.core.PngChunk: byte[] data>;

        $r0[12] = interlace;

        return;
    }


