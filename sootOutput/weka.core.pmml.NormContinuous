    public void <init>(org.w3c.dom.Element, weka.core.pmml.FieldMetaInfo$Optype, java.util.ArrayList) throws java.lang.Exception
    {
        weka.core.pmml.NormContinuous this;
        org.w3c.dom.Element normCont, lnE;
        weka.core.pmml.FieldMetaInfo$Optype opType, $r1;
        java.util.ArrayList fieldDefs;
        java.lang.String mapMissing, outliers, orig, norm, $r3, $r4;
        weka.core.pmml.MiningFieldMetaInfo$Outlier[] l6;
        int l7, $i0, $i1, l8#38, $i2, $i3, $i4, i#68, $i5;
        weka.core.pmml.MiningFieldMetaInfo$Outlier o, $r0;
        org.w3c.dom.NodeList lnL;
        org.w3c.dom.Node lnN;
        java.lang.Exception $r2, $r5;
        double $d0, $d1, $d2;
        boolean $z0;
        double[] $r6, $r7, $r8, $r9;
        short $s6;

        this := @this: weka.core.pmml.NormContinuous;

        normCont := @parameter0: org.w3c.dom.Element;

        opType := @parameter1: weka.core.pmml.FieldMetaInfo$Optype;

        fieldDefs := @parameter2: java.util.ArrayList;

        specialinvoke this.<weka.core.pmml.Expression: void <init>(weka.core.pmml.FieldMetaInfo$Optype,java.util.ArrayList)>(opType, fieldDefs);

        this.<weka.core.pmml.NormContinuous: boolean m_mapMissingDefined> = 0;

        $r0 = <weka.core.pmml.MiningFieldMetaInfo$Outlier: weka.core.pmml.MiningFieldMetaInfo$Outlier ASIS>;

        this.<weka.core.pmml.NormContinuous: weka.core.pmml.MiningFieldMetaInfo$Outlier m_outlierTreatmentMethod> = $r0;

        $r1 = <weka.core.pmml.FieldMetaInfo$Optype: weka.core.pmml.FieldMetaInfo$Optype CONTINUOUS>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(opType);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if opType == $r1 goto label01;

        $r2 = new java.lang.Exception;

        specialinvoke $r2.<java.lang.Exception: void <init>(java.lang.String)>("[NormContinuous] can only have a continuous optype");

        throw $r2;

     label01:
        $r3 = interfaceinvoke normCont.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("field");

        this.<weka.core.pmml.NormContinuous: java.lang.String m_fieldName> = $r3;

        mapMissing = interfaceinvoke normCont.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("mapMissingTo");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(mapMissing);

        if mapMissing == null goto label02;

        $i0 = virtualinvoke mapMissing.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label02;

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(mapMissing);

        this.<weka.core.pmml.NormContinuous: double m_mapMissingTo> = $d0;

        this.<weka.core.pmml.NormContinuous: boolean m_mapMissingDefined> = 1;

     label02:
        outliers = interfaceinvoke normCont.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("outliers");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(outliers);

        if outliers == null goto label05;

        $i1 = virtualinvoke outliers.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 0 goto label05;

        l6 = staticinvoke <weka.core.pmml.MiningFieldMetaInfo$Outlier: weka.core.pmml.MiningFieldMetaInfo$Outlier[] values()>();

        l7 = lengthof l6;

        l8#38 = 0;

     label03:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l8#38);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l7);

        if l8#38 >= l7 goto label05;

        o = l6[l8#38];

        $r4 = virtualinvoke o.<weka.core.pmml.MiningFieldMetaInfo$Outlier: java.lang.String toString()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(outliers);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label04;

        this.<weka.core.pmml.NormContinuous: weka.core.pmml.MiningFieldMetaInfo$Outlier m_outlierTreatmentMethod> = o;

        goto label05;

     label04:
        l8#38 = l8#38 + 1;

        goto label03;

     label05:
        lnL = interfaceinvoke normCont.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("LinearNorm");

        $i2 = interfaceinvoke lnL.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 >= 2 goto label06;

        $r5 = new java.lang.Exception;

        specialinvoke $r5.<java.lang.Exception: void <init>(java.lang.String)>("[NormContinuous] Must be at least 2 LinearNorm elements!");

        throw $r5;

     label06:
        $i3 = interfaceinvoke lnL.<org.w3c.dom.NodeList: int getLength()>();

        $r6 = newarray (double)[$i3];

        this.<weka.core.pmml.NormContinuous: double[] m_linearNormOrig> = $r6;

        $i4 = interfaceinvoke lnL.<org.w3c.dom.NodeList: int getLength()>();

        $r7 = newarray (double)[$i4];

        this.<weka.core.pmml.NormContinuous: double[] m_linearNormNorm> = $r7;

        i#68 = 0;

     label07:
        $i5 = interfaceinvoke lnL.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#68);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if i#68 >= $i5 goto label09;

        lnN = interfaceinvoke lnL.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i#68);

        $s6 = interfaceinvoke lnN.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s6);

        if $s6 != 1 goto label08;

        lnE = (org.w3c.dom.Element) lnN;

        orig = interfaceinvoke lnE.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("orig");

        $r8 = this.<weka.core.pmml.NormContinuous: double[] m_linearNormOrig>;

        $d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(orig);

        $r8[i#68] = $d1;

        norm = interfaceinvoke lnE.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("norm");

        $r9 = this.<weka.core.pmml.NormContinuous: double[] m_linearNormNorm>;

        $d2 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(norm);

        $r9[i#68] = $d2;

     label08:
        i#68 = i#68 + 1;

        goto label07;

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(fieldDefs);

        if fieldDefs == null goto label10;

        specialinvoke this.<weka.core.pmml.NormContinuous: void setUpField()>();

     label10:
        return;
    }

    private void setUpField() throws java.lang.Exception
    {
        weka.core.pmml.NormContinuous this;
        weka.core.Attribute field;
        java.util.ArrayList $r0, $r9;
        java.lang.String $r1, $r5, $r8, $r14, $r17;
        int $i0, $i1, $i2;
        java.lang.Exception $r2, $r11;
        java.lang.StringBuilder $r3, $r4, $r6, $r7, $r12, $r13, $r15, $r16;
        java.lang.Object $r10;
        boolean $z0;

        this := @this: weka.core.pmml.NormContinuous;

        this.<weka.core.pmml.NormContinuous: int m_fieldIndex> = -1;

        $r0 = this.<weka.core.pmml.NormContinuous: java.util.ArrayList m_fieldDefs>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label2;

        $r1 = this.<weka.core.pmml.NormContinuous: java.lang.String m_fieldName>;

        $i0 = virtualinvoke this.<weka.core.pmml.NormContinuous: int getFieldDefIndex(java.lang.String)>($r1);

        this.<weka.core.pmml.NormContinuous: int m_fieldIndex> = $i0;

        $i1 = this.<weka.core.pmml.NormContinuous: int m_fieldIndex>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 >= 0 goto label1;

        $r2 = new java.lang.Exception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[NormContinuous] Can\'t find field ");

        $r5 = this.<weka.core.pmml.NormContinuous: java.lang.String m_fieldName>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in the supplied field definitions.");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.Exception: void <init>(java.lang.String)>($r8);

        throw $r2;

     label1:
        $r9 = this.<weka.core.pmml.NormContinuous: java.util.ArrayList m_fieldDefs>;

        $i2 = this.<weka.core.pmml.NormContinuous: int m_fieldIndex>;

        $r10 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        field = (weka.core.Attribute) $r10;

        $z0 = virtualinvoke field.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label2;

        $r11 = new java.lang.Exception;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[NormContinuous] reference field ");

        $r14 = this.<weka.core.pmml.NormContinuous: java.lang.String m_fieldName>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be continuous.");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.Exception: void <init>(java.lang.String)>($r17);

        throw $r11;

     label2:
        return;
    }

    public double getResultInverse(double[])
    {
        weka.core.pmml.NormContinuous this;
        double[] incoming, a, b;
        double $d0;

        this := @this: weka.core.pmml.NormContinuous;

        incoming := @parameter0: double[];

        a = this.<weka.core.pmml.NormContinuous: double[] m_linearNormNorm>;

        b = this.<weka.core.pmml.NormContinuous: double[] m_linearNormOrig>;

        $d0 = specialinvoke this.<weka.core.pmml.NormContinuous: double computeNorm(double[],double[],double[])>(a, b, incoming);

        return $d0;
    }

    private double computeNorm(double[], double[], double[])
    {
        weka.core.pmml.NormContinuous this;
        double[] a, b, incoming;
        double x, slope, offset, slope, offset, result#2, $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, result#144, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33;
        int length, $i0, $i1, $i2, $i4, $i5, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i#130, $i14, $i16, $i17, $i18, $i19;
        boolean $z0, $z1;
        byte $b3, $b6, $b15;
        weka.core.pmml.MiningFieldMetaInfo$Outlier $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;

        this := @this: weka.core.pmml.NormContinuous;

        a := @parameter0: double[];

        b := @parameter1: double[];

        incoming := @parameter2: double[];

        result#2 = 0.0;

        $i0 = this.<weka.core.pmml.NormContinuous: int m_fieldIndex>;

        $d0 = incoming[$i0];

        $z0 = staticinvoke <weka.core.Utils: boolean isMissingValue(double)>($d0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label02;

        $z1 = this.<weka.core.pmml.NormContinuous: boolean m_mapMissingDefined>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label01;

        result#2 = this.<weka.core.pmml.NormContinuous: double m_mapMissingTo>;

        goto label12;

     label01:
        $i1 = this.<weka.core.pmml.NormContinuous: int m_fieldIndex>;

        result#2 = incoming[$i1];

        goto label12;

     label02:
        $i2 = this.<weka.core.pmml.NormContinuous: int m_fieldIndex>;

        x = incoming[$i2];

        $d1 = a[0];

        $b3 = x cmpg $d1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b3);

        if $b3 >= 0 goto label05;

        $r0 = this.<weka.core.pmml.NormContinuous: weka.core.pmml.MiningFieldMetaInfo$Outlier m_outlierTreatmentMethod>;

        $r1 = <weka.core.pmml.MiningFieldMetaInfo$Outlier: weka.core.pmml.MiningFieldMetaInfo$Outlier ASIS>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r0 != $r1 goto label03;

        $d2 = b[1];

        $d3 = b[0];

        $d4 = $d2 - $d3;

        $d5 = a[1];

        $d6 = a[0];

        $d7 = $d5 - $d6;

        slope = $d4 / $d7;

        $d8 = b[0];

        $d9 = a[0];

        $d10 = slope * $d9;

        offset = $d8 - $d10;

        $d11 = slope * x;

        result#2 = $d11 + offset;

        goto label12;

     label03:
        $r2 = this.<weka.core.pmml.NormContinuous: weka.core.pmml.MiningFieldMetaInfo$Outlier m_outlierTreatmentMethod>;

        $r3 = <weka.core.pmml.MiningFieldMetaInfo$Outlier: weka.core.pmml.MiningFieldMetaInfo$Outlier ASEXTREMEVALUES>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r3);

        if $r2 != $r3 goto label04;

        result#2 = b[0];

        goto label12;

     label04:
        result#2 = this.<weka.core.pmml.NormContinuous: double m_mapMissingTo>;

        goto label12;

     label05:
        $i4 = lengthof a;

        $i5 = $i4 - 1;

        $d12 = a[$i5];

        $b6 = x cmpl $d12;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b6);

        if $b6 <= 0 goto label09;

        length = lengthof a;

        $r4 = this.<weka.core.pmml.NormContinuous: weka.core.pmml.MiningFieldMetaInfo$Outlier m_outlierTreatmentMethod>;

        $r5 = <weka.core.pmml.MiningFieldMetaInfo$Outlier: weka.core.pmml.MiningFieldMetaInfo$Outlier ASIS>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r5);

        if $r4 != $r5 goto label06;

        $i7 = length - 1;

        $d13 = b[$i7];

        $i8 = length - 2;

        $d14 = b[$i8];

        $d15 = $d13 - $d14;

        $i9 = length - 1;

        $d16 = a[$i9];

        $i10 = length - 2;

        $d17 = a[$i10];

        $d18 = $d16 - $d17;

        slope = $d15 / $d18;

        $i11 = length - 1;

        $d19 = b[$i11];

        $i12 = length - 1;

        $d20 = a[$i12];

        $d21 = slope * $d20;

        offset = $d19 - $d21;

        $d22 = slope * x;

        result#2 = $d22 + offset;

        goto label08;

     label06:
        $r6 = this.<weka.core.pmml.NormContinuous: weka.core.pmml.MiningFieldMetaInfo$Outlier m_outlierTreatmentMethod>;

        $r7 = <weka.core.pmml.MiningFieldMetaInfo$Outlier: weka.core.pmml.MiningFieldMetaInfo$Outlier ASEXTREMEVALUES>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r7);

        if $r6 != $r7 goto label07;

        $i13 = length - 1;

        result#2 = b[$i13];

        goto label08;

     label07:
        result#2 = this.<weka.core.pmml.NormContinuous: double m_mapMissingTo>;

     label08:
        goto label12;

     label09:
        i#130 = 1;

     label10:
        $i14 = lengthof a;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#130);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i14);

        if i#130 >= $i14 goto label12;

        $d23 = a[i#130];

        $b15 = x cmpg $d23;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b15);

        if $b15 > 0 goto label11;

        $i16 = i#130 - 1;

        result#144 = b[$i16];

        $i17 = i#130 - 1;

        $d24 = a[$i17];

        $d25 = x - $d24;

        $d26 = a[i#130];

        $i18 = i#130 - 1;

        $d27 = a[$i18];

        $d28 = $d26 - $d27;

        $d29 = $d25 / $d28;

        $d30 = b[i#130];

        $i19 = i#130 - 1;

        $d31 = b[$i19];

        $d32 = $d30 - $d31;

        $d33 = $d29 * $d32;

        result#2 = result#144 + $d33;

        goto label12;

     label11:
        i#130 = i#130 + 1;

        goto label10;

     label12:
        return result#2;
    }

    public double getResult(double[]) throws java.lang.Exception
    {
        weka.core.pmml.NormContinuous this;
        double[] incoming, a, b;
        double $d0;

        this := @this: weka.core.pmml.NormContinuous;

        incoming := @parameter0: double[];

        a = this.<weka.core.pmml.NormContinuous: double[] m_linearNormOrig>;

        b = this.<weka.core.pmml.NormContinuous: double[] m_linearNormNorm>;

        $d0 = specialinvoke this.<weka.core.pmml.NormContinuous: double computeNorm(double[],double[],double[])>(a, b, incoming);

        return $d0;
    }


