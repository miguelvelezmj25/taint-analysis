    public void <init>(org.prevayler.foundation.network.OldNetworkImpl, java.lang.String, int) throws java.io.IOException
    {
        org.prevayler.implementation.replication.ClientPublisher this;
        org.prevayler.foundation.network.OldNetworkImpl network;
        java.lang.String serverIpAddress;
        int serverPort;
        org.prevayler.implementation.clock.BrokenClock $r0;
        java.lang.Object $r1, $r2;
        java.io.PrintStream $r3;
        org.prevayler.foundation.network.ObjectSocket $r4;

        this := @this: org.prevayler.implementation.replication.ClientPublisher;

        network := @parameter0: org.prevayler.foundation.network.OldNetworkImpl;

        serverIpAddress := @parameter1: java.lang.String;

        serverPort := @parameter2: int;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = new org.prevayler.implementation.clock.BrokenClock;

        specialinvoke $r0.<org.prevayler.implementation.clock.BrokenClock: void <init>()>();

        this.<org.prevayler.implementation.replication.ClientPublisher: org.prevayler.implementation.clock.BrokenClock _clock> = $r0;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        this.<org.prevayler.implementation.replication.ClientPublisher: java.lang.Object _upToDateMonitor> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        this.<org.prevayler.implementation.replication.ClientPublisher: java.lang.Object _myCapsuleMonitor> = $r2;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("The replication logic is still under development.");

        $r4 = virtualinvoke network.<org.prevayler.foundation.network.OldNetworkImpl: org.prevayler.foundation.network.ObjectSocket openSocket(java.lang.String,int)>(serverIpAddress, serverPort);

        this.<org.prevayler.implementation.replication.ClientPublisher: org.prevayler.foundation.network.ObjectSocket _server> = $r4;

        specialinvoke this.<org.prevayler.implementation.replication.ClientPublisher: void startListening()>();

        return;
    }

    private void startListening()
    {
        org.prevayler.implementation.replication.ClientPublisher this;
        org.prevayler.implementation.replication.ClientPublisher$1 listener, $r0;

        this := @this: org.prevayler.implementation.replication.ClientPublisher;

        $r0 = new org.prevayler.implementation.replication.ClientPublisher$1;

        specialinvoke $r0.<org.prevayler.implementation.replication.ClientPublisher$1: void <init>(org.prevayler.implementation.replication.ClientPublisher)>(this);

        listener = $r0;

        virtualinvoke listener.<java.lang.Thread: void setDaemon(boolean)>(1);

        virtualinvoke listener.<java.lang.Thread: void start()>();

        return;
    }

    static void access$000(org.prevayler.implementation.replication.ClientPublisher) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.prevayler.implementation.replication.ClientPublisher x0;

        x0 := @parameter0: org.prevayler.implementation.replication.ClientPublisher;

        specialinvoke x0.<org.prevayler.implementation.replication.ClientPublisher: void receiveTransactionFromServer()>();

        return;
    }

    public synchronized void publish(org.prevayler.implementation.Capsule)
    {
        org.prevayler.implementation.replication.ClientPublisher this;
        org.prevayler.implementation.Capsule capsule;
        java.lang.Object l2, $r2, $r5;
        java.io.IOException iox, $r4;
        java.lang.Throwable l4, $r6;
        org.prevayler.implementation.publishing.TransactionSubscriber $r0;
        java.lang.IllegalStateException $r1;
        org.prevayler.foundation.network.ObjectSocket $r3;

        this := @this: org.prevayler.implementation.replication.ClientPublisher;

        capsule := @parameter0: org.prevayler.implementation.Capsule;

        $r0 = this.<org.prevayler.implementation.replication.ClientPublisher: org.prevayler.implementation.publishing.TransactionSubscriber _subscriber>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label01;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("To publish a transaction, this ClientPublisher needs a registered subscriber.");

        throw $r1;

     label01:
        $r2 = this.<org.prevayler.implementation.replication.ClientPublisher: java.lang.Object _myCapsuleMonitor>;

        l2 = $r2;

        entermonitor $r2;

     label02:
        this.<org.prevayler.implementation.replication.ClientPublisher: org.prevayler.implementation.Capsule _myCapsule> = capsule;

     label03:
        $r3 = this.<org.prevayler.implementation.replication.ClientPublisher: org.prevayler.foundation.network.ObjectSocket _server>;

        interfaceinvoke $r3.<org.prevayler.foundation.network.ObjectSocket: void writeObject(java.lang.Object)>(capsule);

     label04:
        goto label07;

     label05:
        $r4 := @caughtexception;

        iox = $r4;

        virtualinvoke iox.<java.io.IOException: void printStackTrace()>();

     label06:
        staticinvoke <java.lang.Thread: void yield()>();

        goto label06;

     label07:
        $r5 = this.<org.prevayler.implementation.replication.ClientPublisher: java.lang.Object _myCapsuleMonitor>;

        staticinvoke <org.prevayler.implementation.replication.ClientPublisher: void wait(java.lang.Object)>($r5);

        specialinvoke this.<org.prevayler.implementation.replication.ClientPublisher: void throwEventualErrors()>();

        exitmonitor l2;

     label08:
        goto label12;

     label09:
        $r6 := @caughtexception;

     label10:
        l4 = $r6;

        exitmonitor l2;

     label11:
        throw l4;

     label12:
        return;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.lang.Throwable from label02 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private static void wait(java.lang.Object)
    {
        java.lang.Object monitor;
        java.lang.InterruptedException ix, $r0;
        java.lang.RuntimeException $r1;

        monitor := @parameter0: java.lang.Object;

     label1:
        virtualinvoke monitor.<java.lang.Object: void wait()>();

     label2:
        goto label4;

     label3:
        $r0 := @caughtexception;

        ix = $r0;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unexpected InterruptedException.");

        throw $r1;

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    private void throwEventualErrors() throws java.lang.RuntimeException, java.lang.Error
    {
        org.prevayler.implementation.replication.ClientPublisher this;
        java.lang.Throwable l1, $r4;
        java.lang.RuntimeException $r0, $r1;
        java.lang.Error $r2, $r3;

        this := @this: org.prevayler.implementation.replication.ClientPublisher;

     label1:
        $r0 = this.<org.prevayler.implementation.replication.ClientPublisher: java.lang.RuntimeException _myTransactionRuntimeException>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label2;

        $r1 = this.<org.prevayler.implementation.replication.ClientPublisher: java.lang.RuntimeException _myTransactionRuntimeException>;

        throw $r1;

     label2:
        $r2 = this.<org.prevayler.implementation.replication.ClientPublisher: java.lang.Error _myTransactionError>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r2);

        if $r2 == null goto label3;

        $r3 = this.<org.prevayler.implementation.replication.ClientPublisher: java.lang.Error _myTransactionError>;

        throw $r3;

     label3:
        this.<org.prevayler.implementation.replication.ClientPublisher: java.lang.RuntimeException _myTransactionRuntimeException> = null;

        this.<org.prevayler.implementation.replication.ClientPublisher: java.lang.Error _myTransactionError> = null;

        goto label5;

     label4:
        $r4 := @caughtexception;

        l1 = $r4;

        this.<org.prevayler.implementation.replication.ClientPublisher: java.lang.RuntimeException _myTransactionRuntimeException> = null;

        this.<org.prevayler.implementation.replication.ClientPublisher: java.lang.Error _myTransactionError> = null;

        throw l1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    private void receiveTransactionFromServer() throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.prevayler.implementation.replication.ClientPublisher this;
        java.lang.Object transactionCandidate, l2, $r1, $r2;
        java.lang.Throwable l3, $r3;
        java.util.Date clockTick, timestamp;
        org.prevayler.implementation.TransactionTimestamp transactionTimestamp, $r10, $r13;
        long systemVersion;
        org.prevayler.foundation.network.ObjectSocket $r0;
        boolean $z0, $z1, $z2, $z3;
        org.prevayler.implementation.clock.BrokenClock $r4, $r7;
        java.lang.RuntimeException $r5;
        java.lang.Error $r6;
        org.prevayler.implementation.Capsule $r8, $r11, $r14;
        org.prevayler.implementation.publishing.TransactionSubscriber $r9, $r12;

        this := @this: org.prevayler.implementation.replication.ClientPublisher;

        $r0 = this.<org.prevayler.implementation.replication.ClientPublisher: org.prevayler.foundation.network.ObjectSocket _server>;

        transactionCandidate = interfaceinvoke $r0.<org.prevayler.foundation.network.ObjectSocket: java.lang.Object readObject()>();

        $z0 = virtualinvoke transactionCandidate.<java.lang.Object: boolean equals(java.lang.Object)>("SubscriberUpToDate");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label07;

        $r1 = this.<org.prevayler.implementation.replication.ClientPublisher: java.lang.Object _upToDateMonitor>;

        l2 = $r1;

        entermonitor $r1;

     label01:
        $r2 = this.<org.prevayler.implementation.replication.ClientPublisher: java.lang.Object _upToDateMonitor>;

        virtualinvoke $r2.<java.lang.Object: void notify()>();

        exitmonitor l2;

     label02:
        goto label06;

     label03:
        $r3 := @caughtexception;

     label04:
        l3 = $r3;

        exitmonitor l2;

     label05:
        throw l3;

     label06:
        return;

     label07:
        $z1 = transactionCandidate instanceof java.util.Date;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label08;

        clockTick = (java.util.Date) transactionCandidate;

        $r4 = this.<org.prevayler.implementation.replication.ClientPublisher: org.prevayler.implementation.clock.BrokenClock _clock>;

        virtualinvoke $r4.<org.prevayler.implementation.clock.BrokenClock: void advanceTo(java.util.Date)>(clockTick);

        return;

     label08:
        $z2 = transactionCandidate instanceof java.lang.RuntimeException;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label09;

        $r5 = (java.lang.RuntimeException) transactionCandidate;

        this.<org.prevayler.implementation.replication.ClientPublisher: java.lang.RuntimeException _myTransactionRuntimeException> = $r5;

        specialinvoke this.<org.prevayler.implementation.replication.ClientPublisher: void notifyMyTransactionMonitor()>();

        return;

     label09:
        $z3 = transactionCandidate instanceof java.lang.Error;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label10;

        $r6 = (java.lang.Error) transactionCandidate;

        this.<org.prevayler.implementation.replication.ClientPublisher: java.lang.Error _myTransactionError> = $r6;

        specialinvoke this.<org.prevayler.implementation.replication.ClientPublisher: void notifyMyTransactionMonitor()>();

        return;

     label10:
        transactionTimestamp = (org.prevayler.implementation.TransactionTimestamp) transactionCandidate;

        timestamp = virtualinvoke transactionTimestamp.<org.prevayler.implementation.TransactionTimestamp: java.util.Date executionTime()>();

        systemVersion = virtualinvoke transactionTimestamp.<org.prevayler.implementation.TransactionTimestamp: long systemVersion()>();

        $r7 = this.<org.prevayler.implementation.replication.ClientPublisher: org.prevayler.implementation.clock.BrokenClock _clock>;

        virtualinvoke $r7.<org.prevayler.implementation.clock.BrokenClock: void advanceTo(java.util.Date)>(timestamp);

        $r8 = virtualinvoke transactionTimestamp.<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.Capsule capsule()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r8);

        if $r8 != null goto label11;

        $r9 = this.<org.prevayler.implementation.replication.ClientPublisher: org.prevayler.implementation.publishing.TransactionSubscriber _subscriber>;

        $r10 = new org.prevayler.implementation.TransactionTimestamp;

        $r11 = this.<org.prevayler.implementation.replication.ClientPublisher: org.prevayler.implementation.Capsule _myCapsule>;

        specialinvoke $r10.<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,java.util.Date)>($r11, systemVersion, timestamp);

        interfaceinvoke $r9.<org.prevayler.implementation.publishing.TransactionSubscriber: void receive(org.prevayler.implementation.TransactionTimestamp)>($r10);

        specialinvoke this.<org.prevayler.implementation.replication.ClientPublisher: void notifyMyTransactionMonitor()>();

        return;

     label11:
        $r12 = this.<org.prevayler.implementation.replication.ClientPublisher: org.prevayler.implementation.publishing.TransactionSubscriber _subscriber>;

        $r13 = new org.prevayler.implementation.TransactionTimestamp;

        $r14 = virtualinvoke transactionTimestamp.<org.prevayler.implementation.TransactionTimestamp: org.prevayler.implementation.Capsule capsule()>();

        specialinvoke $r13.<org.prevayler.implementation.TransactionTimestamp: void <init>(org.prevayler.implementation.Capsule,long,java.util.Date)>($r14, systemVersion, timestamp);

        interfaceinvoke $r12.<org.prevayler.implementation.publishing.TransactionSubscriber: void receive(org.prevayler.implementation.TransactionTimestamp)>($r13);

        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label04 to label05 with label03;
    }

    private void notifyMyTransactionMonitor()
    {
        org.prevayler.implementation.replication.ClientPublisher this;
        java.lang.Object l1, $r0, $r1;
        java.lang.Throwable l2, $r2;

        this := @this: org.prevayler.implementation.replication.ClientPublisher;

        $r0 = this.<org.prevayler.implementation.replication.ClientPublisher: java.lang.Object _myCapsuleMonitor>;

        l1 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<org.prevayler.implementation.replication.ClientPublisher: java.lang.Object _myCapsuleMonitor>;

        virtualinvoke $r1.<java.lang.Object: void notify()>();

        exitmonitor l1;

     label2:
        goto label6;

     label3:
        $r2 := @caughtexception;

     label4:
        l2 = $r2;

        exitmonitor l1;

     label5:
        throw l2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public org.prevayler.Clock clock()
    {
        org.prevayler.implementation.replication.ClientPublisher this;
        org.prevayler.implementation.clock.BrokenClock $r0;

        this := @this: org.prevayler.implementation.replication.ClientPublisher;

        $r0 = this.<org.prevayler.implementation.replication.ClientPublisher: org.prevayler.implementation.clock.BrokenClock _clock>;

        return $r0;
    }

    public synchronized void subscribe(org.prevayler.implementation.publishing.TransactionSubscriber, long) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.prevayler.implementation.replication.ClientPublisher this;
        org.prevayler.implementation.publishing.TransactionSubscriber subscriber, $r0;
        long initialTransaction;
        java.lang.Object l4, $r2, $r5;
        java.lang.Throwable l5, $r6;
        java.lang.UnsupportedOperationException $r1;
        org.prevayler.foundation.network.ObjectSocket $r3;
        java.lang.Long $r4;

        this := @this: org.prevayler.implementation.replication.ClientPublisher;

        subscriber := @parameter0: org.prevayler.implementation.publishing.TransactionSubscriber;

        initialTransaction := @parameter1: long;

        $r0 = this.<org.prevayler.implementation.replication.ClientPublisher: org.prevayler.implementation.publishing.TransactionSubscriber _subscriber>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 == null goto label1;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("The current implementation can only support one subscriber. Future implementations will support more.");

        throw $r1;

     label1:
        this.<org.prevayler.implementation.replication.ClientPublisher: org.prevayler.implementation.publishing.TransactionSubscriber _subscriber> = subscriber;

        $r2 = this.<org.prevayler.implementation.replication.ClientPublisher: java.lang.Object _upToDateMonitor>;

        l4 = $r2;

        entermonitor $r2;

     label2:
        $r3 = this.<org.prevayler.implementation.replication.ClientPublisher: org.prevayler.foundation.network.ObjectSocket _server>;

        $r4 = new java.lang.Long;

        specialinvoke $r4.<java.lang.Long: void <init>(long)>(initialTransaction);

        interfaceinvoke $r3.<org.prevayler.foundation.network.ObjectSocket: void writeObject(java.lang.Object)>($r4);

        $r5 = this.<org.prevayler.implementation.replication.ClientPublisher: java.lang.Object _upToDateMonitor>;

        staticinvoke <org.prevayler.implementation.replication.ClientPublisher: void wait(java.lang.Object)>($r5);

        exitmonitor l4;

     label3:
        goto label7;

     label4:
        $r6 := @caughtexception;

     label5:
        l5 = $r6;

        exitmonitor l4;

     label6:
        throw l5;

     label7:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }


