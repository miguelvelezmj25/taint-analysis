    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "berkeley/com/sleepycat/je/tree/MapLN";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <berkeley.com.sleepycat.je.tree.MapLN: boolean $assertionsDisabled> = $z1;

        return;
    }

    public void <init>(berkeley.com.sleepycat.je.dbi.DatabaseImpl)
    {
        berkeley.com.sleepycat.je.tree.MapLN this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;
        byte[] $r0;

        this := @this: berkeley.com.sleepycat.je.tree.MapLN;

        db := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = newarray (byte)[0];

        specialinvoke this.<berkeley.com.sleepycat.je.tree.LN: void <init>(byte[])>($r0);

        this.<berkeley.com.sleepycat.je.tree.MapLN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl> = db;

        this.<berkeley.com.sleepycat.je.tree.MapLN: boolean deleted> = 0;

        return;
    }

    public boolean isDeleted()
    {
        berkeley.com.sleepycat.je.tree.MapLN this;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.tree.MapLN;

        $z0 = this.<berkeley.com.sleepycat.je.tree.MapLN: boolean deleted>;

        return $z0;
    }

    protected berkeley.com.sleepycat.je.log.LogEntryType getLogType(boolean, boolean)
    {
        berkeley.com.sleepycat.je.tree.MapLN this;
        boolean isInsert, isTransactional, $z0;
        java.lang.AssertionError $r0;
        berkeley.com.sleepycat.je.log.LogEntryType $r1;

        this := @this: berkeley.com.sleepycat.je.tree.MapLN;

        isInsert := @parameter0: boolean;

        isTransactional := @parameter1: boolean;

        $z0 = <berkeley.com.sleepycat.je.tree.MapLN: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isTransactional);

        if isTransactional == 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $r1 = <berkeley.com.sleepycat.je.log.LogEntryType: berkeley.com.sleepycat.je.log.LogEntryType LOG_MAPLN>;

        return $r1;
    }

    public void writeToLog(java.nio.ByteBuffer, int, boolean)
    {
        berkeley.com.sleepycat.je.tree.MapLN this;
        java.nio.ByteBuffer logBuffer;
        int logVersion;
        boolean forReplication, $z0, $z1;
        byte booleans;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r0;

        this := @this: berkeley.com.sleepycat.je.tree.MapLN;

        logBuffer := @parameter0: java.nio.ByteBuffer;

        logVersion := @parameter1: int;

        forReplication := @parameter2: boolean;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.LN: void writeToLog(java.nio.ByteBuffer,int,boolean)>(logBuffer, logVersion, forReplication);

        $r0 = this.<berkeley.com.sleepycat.je.tree.MapLN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: void writeToLog(java.nio.ByteBuffer)>(logBuffer);

        $z0 = this.<berkeley.com.sleepycat.je.tree.MapLN: boolean deleted>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        booleans = (byte) $z1;

        virtualinvoke logBuffer.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(booleans);

        return;
    }

    public int getLogSize(int, boolean)
    {
        berkeley.com.sleepycat.je.tree.MapLN this;
        int logVersion, $i0, $i1, $i2, $i3;
        boolean forReplication;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r0;

        this := @this: berkeley.com.sleepycat.je.tree.MapLN;

        logVersion := @parameter0: int;

        forReplication := @parameter1: boolean;

        $i0 = specialinvoke this.<berkeley.com.sleepycat.je.tree.LN: int getLogSize(int,boolean)>(logVersion, forReplication);

        $r0 = this.<berkeley.com.sleepycat.je.tree.MapLN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $i1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: int getLogSize()>();

        $i2 = $i0 + $i1;

        $i3 = $i2 + 1;

        return $i3;
    }

    public long getMemorySizeIncludedByParent()
    {
        berkeley.com.sleepycat.je.tree.MapLN this;
        int $i0;
        long $l1;

        this := @this: berkeley.com.sleepycat.je.tree.MapLN;

        $i0 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: int MAPLN_OVERHEAD>;

        $l1 = (long) $i0;

        return $l1;
    }

    void makeDeleted()
    {
        berkeley.com.sleepycat.je.tree.MapLN this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r0;
        berkeley.com.sleepycat.je.tree.Tree $r1;

        this := @this: berkeley.com.sleepycat.je.tree.MapLN;

        this.<berkeley.com.sleepycat.je.tree.MapLN: boolean deleted> = 1;

        $r0 = this.<berkeley.com.sleepycat.je.tree.MapLN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.tree.Tree getTree()>();

        virtualinvoke $r1.<berkeley.com.sleepycat.je.tree.Tree: void setRoot(berkeley.com.sleepycat.je.tree.ChildReference,boolean)>(null, 1);

        return;
    }

    public void postFetchInit(berkeley.com.sleepycat.je.dbi.DatabaseImpl, long)
    {
        berkeley.com.sleepycat.je.tree.MapLN this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db, $r0;
        long sourceLsn;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r1;

        this := @this: berkeley.com.sleepycat.je.tree.MapLN;

        db := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        sourceLsn := @parameter1: long;

        specialinvoke this.<berkeley.com.sleepycat.je.tree.LN: void postFetchInit(berkeley.com.sleepycat.je.dbi.DatabaseImpl,long)>(db, sourceLsn);

        $r0 = this.<berkeley.com.sleepycat.je.tree.MapLN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $r1 = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: void setEnvironmentImpl(berkeley.com.sleepycat.je.dbi.EnvironmentImpl)>($r1);

        return;
    }

    public java.lang.String dumpString(int, boolean)
    {
        berkeley.com.sleepycat.je.tree.MapLN this;
        int nSpaces;
        boolean dumpTags, $z0;
        java.lang.StringBuilder sb, $r0, $r6;
        java.lang.String $r1, $r4, $r7, $r12, $r14;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r11;

        this := @this: berkeley.com.sleepycat.je.tree.MapLN;

        nSpaces := @parameter0: int;

        dumpTags := @parameter1: boolean;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        sb = $r0;

        $r1 = specialinvoke this.<berkeley.com.sleepycat.je.tree.LN: java.lang.String dumpString(int,boolean)>(nSpaces, dumpTags);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r4 = staticinvoke <berkeley.com.sleepycat.je.tree.TreeUtils: java.lang.String indent(int)>(nSpaces);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<deleted val=\"");

        $z0 = this.<berkeley.com.sleepycat.je.tree.MapLN: boolean deleted>;

        $r7 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\">");

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r11 = this.<berkeley.com.sleepycat.je.tree.MapLN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $r12 = virtualinvoke $r11.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: java.lang.String dumpString(int)>(nSpaces);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;
    }

    public java.lang.String beginTag()
    {
        berkeley.com.sleepycat.je.tree.MapLN this;

        this := @this: berkeley.com.sleepycat.je.tree.MapLN;

        return "<mapLN>";
    }

    public java.lang.String endTag()
    {
        berkeley.com.sleepycat.je.tree.MapLN this;

        this := @this: berkeley.com.sleepycat.je.tree.MapLN;

        return "</mapLN>";
    }

    public berkeley.com.sleepycat.je.dbi.DatabaseImpl getDatabase()
    {
        berkeley.com.sleepycat.je.tree.MapLN this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r0;

        this := @this: berkeley.com.sleepycat.je.tree.MapLN;

        $r0 = this.<berkeley.com.sleepycat.je.tree.MapLN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        return $r0;
    }

    public boolean isDirty()
    {
        berkeley.com.sleepycat.je.tree.MapLN this;
        boolean $z0, $z1, $z2;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r0;

        this := @this: berkeley.com.sleepycat.je.tree.MapLN;

        $z0 = specialinvoke this.<berkeley.com.sleepycat.je.tree.LN: boolean isDirty()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r0 = this.<berkeley.com.sleepycat.je.tree.MapLN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $z1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isDirty()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public void releaseMemoryBudget()
    {
        berkeley.com.sleepycat.je.tree.MapLN this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r0;

        this := @this: berkeley.com.sleepycat.je.tree.MapLN;

        $r0 = this.<berkeley.com.sleepycat.je.tree.MapLN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: void releaseTreeAdminMemory()>();

        return;
    }

    boolean isEvictable(long) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.tree.MapLN this;
        long lsn;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        berkeley.com.sleepycat.je.txn.BasicLocker locker;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl idDatabaseImpl, $r1;
        berkeley.com.sleepycat.je.txn.LockType $r0;
        berkeley.com.sleepycat.je.txn.LockResult lockResult;
        java.lang.Throwable l8, $r5;
        boolean evictable#2, $z0;
        berkeley.com.sleepycat.je.dbi.DbTree $r2;
        berkeley.com.sleepycat.je.txn.LockGrantType $r3, $r4;

        this := @this: berkeley.com.sleepycat.je.tree.MapLN;

        lsn := @parameter0: long;

        evictable#2 = 0;

        $r1 = this.<berkeley.com.sleepycat.je.tree.MapLN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        envImpl = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        locker = staticinvoke <berkeley.com.sleepycat.je.txn.BasicLocker: berkeley.com.sleepycat.je.txn.BasicLocker createBasicLocker(berkeley.com.sleepycat.je.dbi.EnvironmentImpl)>(envImpl);

        $r2 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.DbTree getDbTree()>();

        idDatabaseImpl = virtualinvoke $r2.<berkeley.com.sleepycat.je.dbi.DbTree: berkeley.com.sleepycat.je.dbi.DatabaseImpl getIdDatabaseImpl()>();

     label1:
        $r0 = <berkeley.com.sleepycat.je.txn.LockType: berkeley.com.sleepycat.je.txn.LockType WRITE>;

        lockResult = virtualinvoke locker.<berkeley.com.sleepycat.je.txn.BasicLocker: berkeley.com.sleepycat.je.txn.LockResult nonBlockingLock(long,berkeley.com.sleepycat.je.txn.LockType,boolean,berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(lsn, $r0, 0, idDatabaseImpl);

        $r3 = virtualinvoke lockResult.<berkeley.com.sleepycat.je.txn.LockResult: berkeley.com.sleepycat.je.txn.LockGrantType getLockGrant()>();

        $r4 = <berkeley.com.sleepycat.je.txn.LockGrantType: berkeley.com.sleepycat.je.txn.LockGrantType DENIED>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r4);

        if $r3 == $r4 goto label2;

        $z0 = specialinvoke this.<berkeley.com.sleepycat.je.tree.MapLN: boolean isEvictableInexact()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        evictable#2 = 1;

     label2:
        virtualinvoke locker.<berkeley.com.sleepycat.je.txn.BasicLocker: void operationEnd()>();

        goto label6;

     label3:
        $r5 := @caughtexception;

     label4:
        l8 = $r5;

     label5:
        virtualinvoke locker.<berkeley.com.sleepycat.je.txn.BasicLocker: void operationEnd()>();

        throw l8;

     label6:
        return evictable#2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private boolean isEvictableInexact()
    {
        berkeley.com.sleepycat.je.tree.MapLN this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r0, $r2, $r3;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r1;
        boolean $z0, $z1, $z2, $z3;
        berkeley.com.sleepycat.je.tree.Tree $r4;

        this := @this: berkeley.com.sleepycat.je.tree.MapLN;

        $r0 = this.<berkeley.com.sleepycat.je.tree.MapLN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $z0 = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean getDbEviction()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r2 = this.<berkeley.com.sleepycat.je.tree.MapLN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $z1 = virtualinvoke $r2.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isInUse()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label1;

        $r3 = this.<berkeley.com.sleepycat.je.tree.MapLN: berkeley.com.sleepycat.je.dbi.DatabaseImpl databaseImpl>;

        $r4 = virtualinvoke $r3.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.tree.Tree getTree()>();

        $z2 = virtualinvoke $r4.<berkeley.com.sleepycat.je.tree.Tree: boolean isRootResident()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }


