    static void <clinit>()
    {
        java.lang.Exception l0, $r4;
        sun.misc.Unsafe $r0, $r1;
        java.lang.Class $r2;
        java.lang.reflect.Field $r3;
        long $l0;
        java.lang.Error $r5;

        $r0 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.atomic.AtomicInteger: sun.misc.Unsafe unsafe> = $r0;

     label1:
        $r1 = <java.util.concurrent.atomic.AtomicInteger: sun.misc.Unsafe unsafe>;

        $r2 = class "java/util/concurrent/atomic/AtomicInteger";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("value");

        $l0 = virtualinvoke $r1.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r3);

        <java.util.concurrent.atomic.AtomicInteger: long valueOffset> = $l0;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        l0 = $r4;

        $r5 = new java.lang.Error;

        specialinvoke $r5.<java.lang.Error: void <init>(java.lang.Throwable)>(l0);

        throw $r5;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void <init>()
    {
        java.util.concurrent.atomic.AtomicInteger l0;

        l0 := @this: java.util.concurrent.atomic.AtomicInteger;

        specialinvoke l0.<java.lang.Number: void <init>()>();

        return;
    }

    public final int getAndAdd(int)
    {
        java.util.concurrent.atomic.AtomicInteger l0;
        int l1, $i1;
        long $l0;
        sun.misc.Unsafe $r0;

        l0 := @this: java.util.concurrent.atomic.AtomicInteger;

        l1 := @parameter0: int;

        $r0 = <java.util.concurrent.atomic.AtomicInteger: sun.misc.Unsafe unsafe>;

        $l0 = <java.util.concurrent.atomic.AtomicInteger: long valueOffset>;

        $i1 = virtualinvoke $r0.<sun.misc.Unsafe: int getAndAddInt(java.lang.Object,long,int)>(l0, $l0, 1640531527);

        return $i1;
    }

    public final int addAndGet(int)
    {
        java.util.concurrent.atomic.AtomicInteger l0;
        int l1, $i1, $i2;
        long $l0;
        sun.misc.Unsafe $r0;

        l0 := @this: java.util.concurrent.atomic.AtomicInteger;

        l1 := @parameter0: int;

        $r0 = <java.util.concurrent.atomic.AtomicInteger: sun.misc.Unsafe unsafe>;

        $l0 = <java.util.concurrent.atomic.AtomicInteger: long valueOffset>;

        $i1 = virtualinvoke $r0.<sun.misc.Unsafe: int getAndAddInt(java.lang.Object,long,int)>(l0, $l0, -1640531527);

        $i2 = $i1 + -1640531527;

        return $i2;
    }


