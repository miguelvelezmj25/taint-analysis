    static java.util.LinkedList unmarshallTriggers(java.lang.String, byte[][], java.lang.ClassLoader)
    {
        java.lang.String dbName, $r5;
        byte[][] triggerBytes;
        java.lang.ClassLoader loader;
        java.util.LinkedList triggers, $r0;
        berkeley.com.sleepycat.je.trigger.Trigger trigger;
        int i#6, $i0;
        byte[] $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.Object $r6;

        dbName := @parameter0: java.lang.String;

        triggerBytes := @parameter1: byte[][];

        loader := @parameter2: java.lang.ClassLoader;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(triggerBytes);

        if triggerBytes != null goto label1;

        return null;

     label1:
        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>()>();

        triggers = $r0;

        i#6 = 0;

     label2:
        $i0 = lengthof triggerBytes;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#6 >= $i0 goto label3;

        $r1 = triggerBytes[i#6];

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("trigger:");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i#6);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <berkeley.com.sleepycat.je.dbi.DatabaseImpl: java.lang.Object bytesToObject(byte[],java.lang.String,java.lang.ClassLoader)>($r1, $r5, loader);

        trigger = (berkeley.com.sleepycat.je.trigger.Trigger) $r6;

        interfaceinvoke trigger.<berkeley.com.sleepycat.je.trigger.Trigger: berkeley.com.sleepycat.je.trigger.Trigger setDatabaseName(java.lang.String)>(dbName);

        virtualinvoke triggers.<java.util.LinkedList: boolean add(java.lang.Object)>(trigger);

        i#6 = i#6 + 1;

        goto label2;

     label3:
        return triggers;
    }

    static byte[][] readTriggers(java.nio.ByteBuffer, int)
    {
        java.nio.ByteBuffer logBuffer;
        int entryVersion, triggerCount, i#9, $i0;
        byte[][] triggerBytes, $r0;
        byte[] $r1;

        logBuffer := @parameter0: java.nio.ByteBuffer;

        entryVersion := @parameter1: int;

        triggerCount = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int readPackedInt(java.nio.ByteBuffer)>(logBuffer);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(triggerCount);

        if triggerCount != 0 goto label1;

        $r0 = (byte[][]) null;

        return $r0;

     label1:
        triggerBytes = newarray (byte[])[triggerCount];

        i#9 = 0;

     label2:
        $i0 = lengthof triggerBytes;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#9 >= $i0 goto label3;

        $r1 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: byte[] readByteArray(java.nio.ByteBuffer,boolean)>(logBuffer, 0);

        triggerBytes[i#9] = $r1;

        i#9 = i#9 + 1;

        goto label2;

     label3:
        return triggerBytes;
    }

    static void writeTriggers(java.nio.ByteBuffer, byte[][])
    {
        java.nio.ByteBuffer logBuffer;
        byte[][] triggerBytes, l2;
        int l3, $i0, l4#11;
        byte[] triggerByte;

        logBuffer := @parameter0: java.nio.ByteBuffer;

        triggerBytes := @parameter1: byte[][];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(triggerBytes);

        if triggerBytes != null goto label1;

        staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: void writePackedInt(java.nio.ByteBuffer,int)>(logBuffer, 0);

        goto label3;

     label1:
        $i0 = lengthof triggerBytes;

        staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: void writePackedInt(java.nio.ByteBuffer,int)>(logBuffer, $i0);

        l2 = triggerBytes;

        l3 = lengthof l2;

        l4#11 = 0;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l4#11);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3);

        if l4#11 >= l3 goto label3;

        triggerByte = l2[l4#11];

        staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: void writeByteArray(java.nio.ByteBuffer,byte[])>(logBuffer, triggerByte);

        l4#11 = l4#11 + 1;

        goto label2;

     label3:
        return;
    }

    static int logSize(byte[][])
    {
        byte[][] triggerBytes, l2;
        int l3, $i0, $i1, size#7, l4#12, $i2;
        byte[] trigger;

        triggerBytes := @parameter0: byte[][];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(triggerBytes);

        if triggerBytes != null goto label1;

        $i0 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int getPackedIntLogSize(int)>(0);

        return $i0;

     label1:
        $i1 = lengthof triggerBytes;

        size#7 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int getPackedIntLogSize(int)>($i1);

        l2 = triggerBytes;

        l3 = lengthof l2;

        l4#12 = 0;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l4#12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3);

        if l4#12 >= l3 goto label3;

        trigger = l2[l4#12];

        $i2 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int getByteArrayLogSize(byte[])>(trigger);

        size#7 = size#7 + $i2;

        l4#12 = l4#12 + 1;

        goto label2;

     label3:
        return size#7;
    }


