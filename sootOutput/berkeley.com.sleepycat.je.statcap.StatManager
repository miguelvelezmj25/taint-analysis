    public void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl)
    {
        berkeley.com.sleepycat.je.statcap.StatManager this;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl env;
        berkeley.com.sleepycat.je.statcap.StatManager$SDef[] $r0, $r1;
        java.util.HashMap $r2;
        berkeley.com.sleepycat.je.statcap.StatManager$UpdateMinMax $r3;

        this := @this: berkeley.com.sleepycat.je.statcap.StatManager;

        env := @parameter0: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        this.<berkeley.com.sleepycat.je.statcap.StatManager: java.util.Map statContextMap> = $r2;

        $r3 = new berkeley.com.sleepycat.je.statcap.StatManager$UpdateMinMax;

        $r0 = <berkeley.com.sleepycat.je.statcap.StatCaptureDefinitions: berkeley.com.sleepycat.je.statcap.StatManager$SDef[] minStats>;

        $r1 = <berkeley.com.sleepycat.je.statcap.StatCaptureDefinitions: berkeley.com.sleepycat.je.statcap.StatManager$SDef[] maxStats>;

        specialinvoke $r3.<berkeley.com.sleepycat.je.statcap.StatManager$UpdateMinMax: void <init>(berkeley.com.sleepycat.je.statcap.StatManager,berkeley.com.sleepycat.je.statcap.StatManager$SDef[],berkeley.com.sleepycat.je.statcap.StatManager$SDef[])>(this, $r0, $r1);

        this.<berkeley.com.sleepycat.je.statcap.StatManager: berkeley.com.sleepycat.je.statcap.StatManager$UpdateMinMax updateMinMaxStat> = $r3;

        this.<berkeley.com.sleepycat.je.statcap.StatManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl env> = env;

        return;
    }

    public synchronized java.lang.Integer registerStatContext()
    {
        berkeley.com.sleepycat.je.statcap.StatManager this;
        berkeley.com.sleepycat.je.statcap.StatManager$StatContext sctx, $r0;
        java.util.Iterator l3;
        java.lang.Integer key, newkey;
        int max#5, $i0, $i1;
        java.util.Map $r1, $r4;
        java.util.Set $r2;
        boolean $z0;
        java.lang.Object $r3;

        this := @this: berkeley.com.sleepycat.je.statcap.StatManager;

        $r0 = new berkeley.com.sleepycat.je.statcap.StatManager$StatContext;

        specialinvoke $r0.<berkeley.com.sleepycat.je.statcap.StatManager$StatContext: void <init>(berkeley.com.sleepycat.je.statcap.StatManager,java.util.Map)>(this, null);

        sctx = $r0;

        max#5 = 0;

        $r1 = this.<berkeley.com.sleepycat.je.statcap.StatManager: java.util.Map statContextMap>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        l3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        key = (java.lang.Integer) $r3;

        $i0 = virtualinvoke key.<java.lang.Integer: int intValue()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(max#5);

        if $i0 <= max#5 goto label2;

        max#5 = virtualinvoke key.<java.lang.Integer: int intValue()>();

     label2:
        goto label1;

     label3:
        $i1 = max#5 + 1;

        newkey = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r4 = this.<berkeley.com.sleepycat.je.statcap.StatManager: java.util.Map statContextMap>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(newkey, sctx);

        return newkey;
    }

    public synchronized berkeley.com.sleepycat.je.EnvironmentStats loadStats(berkeley.com.sleepycat.je.StatsConfig, java.lang.Integer)
    {
        berkeley.com.sleepycat.je.statcap.StatManager this;
        berkeley.com.sleepycat.je.StatsConfig config;
        java.lang.Integer contextKey;
        berkeley.com.sleepycat.je.statcap.StatManager$StatContext sc, context#36, context#54;
        berkeley.com.sleepycat.je.EnvironmentStats curstats, intervalStats#22, $r16;
        java.util.Map cur, base, $r0, $r4, $r7, $r9, $r10, $r13, $r14, $r15, $r17;
        java.lang.Object $r1, $r6, $r12;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r2;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r3;
        boolean $z0, $z1, $z2;
        java.util.Collection $r5, $r11;
        java.util.Iterator l8#30, l8#48;
        berkeley.com.sleepycat.je.statcap.StatManager$UpdateMinMax $r8;

        this := @this: berkeley.com.sleepycat.je.statcap.StatManager;

        config := @parameter0: berkeley.com.sleepycat.je.StatsConfig;

        contextKey := @parameter1: java.lang.Integer;

        $r0 = this.<berkeley.com.sleepycat.je.statcap.StatManager: java.util.Map statContextMap>;

        $r1 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(contextKey);

        sc = (berkeley.com.sleepycat.je.statcap.StatManager$StatContext) $r1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(sc);

        if sc != null goto label01;

        $r2 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>("Internal error stat context is not registered");

        throw $r2;

     label01:
        $r3 = this.<berkeley.com.sleepycat.je.statcap.StatManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl env>;

        curstats = virtualinvoke $r3.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.EnvironmentStats loadStatsInternal(berkeley.com.sleepycat.je.StatsConfig)>(config);

        cur = virtualinvoke curstats.<berkeley.com.sleepycat.je.EnvironmentStats: java.util.Map getStatGroupsMap()>();

        base = virtualinvoke sc.<berkeley.com.sleepycat.je.statcap.StatManager$StatContext: java.util.Map getBase()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(base);

        if base == null goto label02;

        intervalStats#22 = specialinvoke this.<berkeley.com.sleepycat.je.statcap.StatManager: berkeley.com.sleepycat.je.EnvironmentStats computeIntervalStats(java.util.Map,java.util.Map)>(cur, base);

        goto label03;

     label02:
        intervalStats#22 = curstats;

     label03:
        $z0 = virtualinvoke config.<berkeley.com.sleepycat.je.StatsConfig: boolean getClear()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label11;

        $r4 = this.<berkeley.com.sleepycat.je.statcap.StatManager: java.util.Map statContextMap>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>();

        l8#30 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label04:
        $z1 = interfaceinvoke l8#30.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label06;

        $r6 = interfaceinvoke l8#30.<java.util.Iterator: java.lang.Object next()>();

        context#36 = (berkeley.com.sleepycat.je.statcap.StatManager$StatContext) $r6;

        $r7 = virtualinvoke context#36.<berkeley.com.sleepycat.je.statcap.StatManager$StatContext: java.util.Map getBase()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r7);

        if $r7 == null goto label05;

        $r8 = this.<berkeley.com.sleepycat.je.statcap.StatManager: berkeley.com.sleepycat.je.statcap.StatManager$UpdateMinMax updateMinMaxStat>;

        $r9 = virtualinvoke context#36.<berkeley.com.sleepycat.je.statcap.StatManager$StatContext: java.util.Map getBase()>();

        virtualinvoke $r8.<berkeley.com.sleepycat.je.statcap.StatManager$UpdateMinMax: void updateBase(java.util.Map,java.util.Map)>($r9, cur);

     label05:
        goto label04;

     label06:
        $r10 = this.<berkeley.com.sleepycat.je.statcap.StatManager: java.util.Map statContextMap>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.util.Collection values()>();

        l8#48 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();

     label07:
        $z2 = interfaceinvoke l8#48.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label11;

        $r12 = interfaceinvoke l8#48.<java.util.Iterator: java.lang.Object next()>();

        context#54 = (berkeley.com.sleepycat.je.statcap.StatManager$StatContext) $r12;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(context#54);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(sc);

        if context#54 != sc goto label08;

        virtualinvoke context#54.<berkeley.com.sleepycat.je.statcap.StatManager$StatContext: void setBase(java.util.Map)>(null);

        goto label10;

     label08:
        $r13 = virtualinvoke context#54.<berkeley.com.sleepycat.je.statcap.StatManager$StatContext: java.util.Map getBase()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r13);

        if $r13 != null goto label09;

        $r14 = virtualinvoke this.<berkeley.com.sleepycat.je.statcap.StatManager: java.util.Map cloneAndNegate(java.util.Map)>(cur);

        virtualinvoke context#54.<berkeley.com.sleepycat.je.statcap.StatManager$StatContext: void setBase(java.util.Map)>($r14);

        goto label10;

     label09:
        $r15 = virtualinvoke context#54.<berkeley.com.sleepycat.je.statcap.StatManager$StatContext: java.util.Map getBase()>();

        $r16 = specialinvoke this.<berkeley.com.sleepycat.je.statcap.StatManager: berkeley.com.sleepycat.je.EnvironmentStats computeIntervalStats(java.util.Map,java.util.Map)>($r15, cur);

        $r17 = virtualinvoke $r16.<berkeley.com.sleepycat.je.EnvironmentStats: java.util.Map getStatGroupsMap()>();

        virtualinvoke context#54.<berkeley.com.sleepycat.je.statcap.StatManager$StatContext: void setBase(java.util.Map)>($r17);

     label10:
        goto label07;

     label11:
        return intervalStats#22;
    }

    private berkeley.com.sleepycat.je.EnvironmentStats computeIntervalStats(java.util.Map, java.util.Map)
    {
        berkeley.com.sleepycat.je.statcap.StatManager this;
        java.util.Map current, base;
        berkeley.com.sleepycat.je.EnvironmentStats envStats, $r0;
        java.util.Iterator l4;
        berkeley.com.sleepycat.je.utilint.StatGroup cg, bg, $r5;
        java.util.Collection $r1;
        boolean $z0;
        java.lang.Object $r2, $r4;
        java.lang.String $r3;

        this := @this: berkeley.com.sleepycat.je.statcap.StatManager;

        current := @parameter0: java.util.Map;

        base := @parameter1: java.util.Map;

        $r0 = new berkeley.com.sleepycat.je.EnvironmentStats;

        specialinvoke $r0.<berkeley.com.sleepycat.je.EnvironmentStats: void <init>()>();

        envStats = $r0;

        $r1 = interfaceinvoke current.<java.util.Map: java.util.Collection values()>();

        l4 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        cg = (berkeley.com.sleepycat.je.utilint.StatGroup) $r2;

        $r3 = virtualinvoke cg.<berkeley.com.sleepycat.je.utilint.StatGroup: java.lang.String getName()>();

        $r4 = interfaceinvoke base.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        bg = (berkeley.com.sleepycat.je.utilint.StatGroup) $r4;

        $r5 = virtualinvoke cg.<berkeley.com.sleepycat.je.utilint.StatGroup: berkeley.com.sleepycat.je.utilint.StatGroup computeInterval(berkeley.com.sleepycat.je.utilint.StatGroup)>(bg);

        virtualinvoke envStats.<berkeley.com.sleepycat.je.EnvironmentStats: void setStatGroup(berkeley.com.sleepycat.je.utilint.StatGroup)>($r5);

        goto label1;

     label2:
        return envStats;
    }

    protected java.util.Map cloneAndNegate(java.util.Map)
    {
        berkeley.com.sleepycat.je.statcap.StatManager this;
        java.util.Map in;
        java.util.HashMap retval, $r0;
        java.util.Iterator l3;
        java.util.Map$Entry e;
        berkeley.com.sleepycat.je.utilint.StatGroup negatedGroup, $r4;
        java.util.Set $r1;
        boolean $z0;
        java.lang.Object $r2, $r3, $r5;

        this := @this: berkeley.com.sleepycat.je.statcap.StatManager;

        in := @parameter0: java.util.Map;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        retval = $r0;

        $r1 = interfaceinvoke in.<java.util.Map: java.util.Set entrySet()>();

        l3 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        e = (java.util.Map$Entry) $r2;

        $r3 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r4 = (berkeley.com.sleepycat.je.utilint.StatGroup) $r3;

        negatedGroup = virtualinvoke $r4.<berkeley.com.sleepycat.je.utilint.StatGroup: berkeley.com.sleepycat.je.utilint.StatGroup cloneGroup(boolean)>(0);

        virtualinvoke negatedGroup.<berkeley.com.sleepycat.je.utilint.StatGroup: void negate()>();

        $r5 = interfaceinvoke e.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke retval.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, negatedGroup);

        goto label1;

     label2:
        return retval;
    }


