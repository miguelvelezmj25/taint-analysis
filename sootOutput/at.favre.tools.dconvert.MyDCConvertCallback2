    public void <init>(at.favre.tools.dconvert.DConvert$HandlerCallback, float, float, java.util.List, java.lang.StringBuilder, int, at.favre.tools.dconvert.DConvert)
    {
        at.favre.tools.dconvert.MyDCConvertCallback2 this;
        at.favre.tools.dconvert.DConvert$HandlerCallback handlerCallback;
        float convertPercentage, postProcessPercentage;
        java.util.List exceptionsConverters;
        java.lang.StringBuilder logStringBuilder;
        int finishedJobsConverters;
        at.favre.tools.dconvert.DConvert dConvert;

        this := @this: at.favre.tools.dconvert.MyDCConvertCallback2;

        handlerCallback := @parameter0: at.favre.tools.dconvert.DConvert$HandlerCallback;

        convertPercentage := @parameter1: float;

        postProcessPercentage := @parameter2: float;

        exceptionsConverters := @parameter3: java.util.List;

        logStringBuilder := @parameter4: java.lang.StringBuilder;

        finishedJobsConverters := @parameter5: int;

        dConvert := @parameter6: at.favre.tools.dconvert.DConvert;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<at.favre.tools.dconvert.MyDCConvertCallback2: at.favre.tools.dconvert.DConvert$HandlerCallback handlerCallback> = handlerCallback;

        this.<at.favre.tools.dconvert.MyDCConvertCallback2: float convertPercentage> = convertPercentage;

        this.<at.favre.tools.dconvert.MyDCConvertCallback2: float postProcessPercentage> = postProcessPercentage;

        this.<at.favre.tools.dconvert.MyDCConvertCallback2: java.util.List exceptionsConverters> = exceptionsConverters;

        this.<at.favre.tools.dconvert.MyDCConvertCallback2: java.lang.StringBuilder logStringBuilder> = logStringBuilder;

        this.<at.favre.tools.dconvert.MyDCConvertCallback2: int finishedJobsConverters> = finishedJobsConverters;

        this.<at.favre.tools.dconvert.MyDCConvertCallback2: at.favre.tools.dconvert.DConvert dConvert> = dConvert;

        return;
    }

    public void onFinished(int, java.util.List, java.lang.StringBuilder, java.util.List, boolean)
    {
        at.favre.tools.dconvert.MyDCConvertCallback2 this;
        int finishedJobsPostProcessors, $i0, $i1;
        java.util.List outFiles, exceptions, $r0, $r4;
        java.lang.StringBuilder log, $r1;
        boolean haltedDuringProcess;
        at.favre.tools.dconvert.DConvert $r3;

        this := @this: at.favre.tools.dconvert.MyDCConvertCallback2;

        finishedJobsPostProcessors := @parameter0: int;

        outFiles := @parameter1: java.util.List;

        log := @parameter2: java.lang.StringBuilder;

        exceptions := @parameter3: java.util.List;

        haltedDuringProcess := @parameter4: boolean;

        $r0 = this.<at.favre.tools.dconvert.MyDCConvertCallback2: java.util.List exceptionsConverters>;

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>(exceptions);

        $r1 = this.<at.favre.tools.dconvert.MyDCConvertCallback2: java.lang.StringBuilder logStringBuilder>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(log);

        $r3 = this.<at.favre.tools.dconvert.MyDCConvertCallback2: at.favre.tools.dconvert.DConvert dConvert>;

        $i0 = this.<at.favre.tools.dconvert.MyDCConvertCallback2: int finishedJobsConverters>;

        $i1 = finishedJobsPostProcessors + $i0;

        $r4 = this.<at.favre.tools.dconvert.MyDCConvertCallback2: java.util.List exceptionsConverters>;

        virtualinvoke $r3.<at.favre.tools.dconvert.DConvert: void informFinished(int,java.util.List,boolean)>($i1, $r4, haltedDuringProcess);

        return;
    }

    public void onProgress(float)
    {
        at.favre.tools.dconvert.MyDCConvertCallback2 this;
        float percent, $f0, $f1, $f2, $f3;
        at.favre.tools.dconvert.DConvert$HandlerCallback $r0;

        this := @this: at.favre.tools.dconvert.MyDCConvertCallback2;

        percent := @parameter0: float;

        $r0 = this.<at.favre.tools.dconvert.MyDCConvertCallback2: at.favre.tools.dconvert.DConvert$HandlerCallback handlerCallback>;

        $f0 = this.<at.favre.tools.dconvert.MyDCConvertCallback2: float convertPercentage>;

        $f1 = this.<at.favre.tools.dconvert.MyDCConvertCallback2: float postProcessPercentage>;

        $f2 = $f1 * percent;

        $f3 = $f0 + $f2;

        interfaceinvoke $r0.<at.favre.tools.dconvert.DConvert$HandlerCallback: void onProgress(float)>($f3);

        return;
    }


