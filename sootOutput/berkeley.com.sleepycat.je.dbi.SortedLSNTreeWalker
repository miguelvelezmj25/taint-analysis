    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "berkeley/com/sleepycat/je/dbi/SortedLSNTreeWalker";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: boolean $assertionsDisabled> = $z1;

        return;
    }

    void walkInternal()
    {
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker this;
        berkeley.com.sleepycat.je.dbi.LSNAccumulator pendingLSNs;
        int i#4, $i0;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl[] $r0, $r1;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r2;
        long[] $r3;
        long $l1;

        this := @this: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker;

        pendingLSNs = specialinvoke this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: berkeley.com.sleepycat.je.dbi.LSNAccumulator createLSNAccumulator()>();

        i#4 = 0;

     label1:
        $r0 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: berkeley.com.sleepycat.je.dbi.DatabaseImpl[] dbImpls>;

        $i0 = lengthof $r0;

        if i#4 >= $i0 goto label2;

        $r1 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: berkeley.com.sleepycat.je.dbi.DatabaseImpl[] dbImpls>;

        $r2 = $r1[i#4];

        $r3 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: long[] rootLsns>;

        $l1 = $r3[i#4];

        specialinvoke this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: void processRootLSN(berkeley.com.sleepycat.je.dbi.DatabaseImpl,berkeley.com.sleepycat.je.dbi.LSNAccumulator,long)>($r2, pendingLSNs, $l1);

        i#4 = i#4 + 1;

        goto label1;

     label2:
        specialinvoke this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: void processAccumulatedLSNs(berkeley.com.sleepycat.je.dbi.LSNAccumulator)>(pendingLSNs);

        return;
    }

    private berkeley.com.sleepycat.je.dbi.LSNAccumulator createLSNAccumulator()
    {
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker this;
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$1 $r0;

        this := @this: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker;

        $r0 = new berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$1;

        specialinvoke $r0.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$1: void <init>(berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker)>(this);

        return $r0;
    }

    private void processRootLSN(berkeley.com.sleepycat.je.dbi.DatabaseImpl, berkeley.com.sleepycat.je.dbi.LSNAccumulator, long)
    {
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        berkeley.com.sleepycat.je.dbi.LSNAccumulator pendingLSNs;
        long rootLsn;
        berkeley.com.sleepycat.je.tree.IN root;
        java.lang.Throwable l6, $r0;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker;

        dbImpl := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        pendingLSNs := @parameter1: berkeley.com.sleepycat.je.dbi.LSNAccumulator;

        rootLsn := @parameter2: long;

        root = specialinvoke this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: berkeley.com.sleepycat.je.tree.IN getOrFetchRootIN(berkeley.com.sleepycat.je.dbi.DatabaseImpl,long)>(dbImpl, rootLsn);

        if root == null goto label6;

     label1:
        specialinvoke this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: void accumulateLSNs(berkeley.com.sleepycat.je.tree.IN,berkeley.com.sleepycat.je.dbi.LSNAccumulator,berkeley.com.sleepycat.je.tree.IN,int)>(root, pendingLSNs, null, -1);

     label2:
        specialinvoke this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: void releaseRootIN(berkeley.com.sleepycat.je.tree.IN)>(root);

        goto label6;

     label3:
        $r0 := @caughtexception;

     label4:
        l6 = $r0;

     label5:
        specialinvoke this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: void releaseRootIN(berkeley.com.sleepycat.je.tree.IN)>(root);

        throw l6;

     label6:
        $z0 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: boolean setDbState>;

        if $z0 == 0 goto label7;

        virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: void finishedINListHarvest()>();

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void processAccumulatedLSNs(berkeley.com.sleepycat.je.dbi.LSNAccumulator)
    {
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker this;
        long[] currentLSNs, l3;
        int l4, l5#12;
        long lsn;
        berkeley.com.sleepycat.je.dbi.LSNAccumulator pendingLSNs#1;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker;

        pendingLSNs#1 := @parameter0: berkeley.com.sleepycat.je.dbi.LSNAccumulator;

     label1:
        $z0 = virtualinvoke pendingLSNs#1.<berkeley.com.sleepycat.je.dbi.LSNAccumulator: boolean isEmpty()>();

        if $z0 != 0 goto label4;

        currentLSNs = virtualinvoke pendingLSNs#1.<berkeley.com.sleepycat.je.dbi.LSNAccumulator: long[] getAndSortPendingLSNs()>();

        pendingLSNs#1 = specialinvoke this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: berkeley.com.sleepycat.je.dbi.LSNAccumulator createLSNAccumulator()>();

        l3 = currentLSNs;

        l4 = lengthof l3;

        l5#12 = 0;

     label2:
        if l5#12 >= l4 goto label3;

        lsn = l3[l5#12];

        specialinvoke this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: void fetchAndProcessLSN(long,berkeley.com.sleepycat.je.dbi.LSNAccumulator)>(lsn, pendingLSNs#1);

        l5#12 = l5#12 + 1;

        goto label2;

     label3:
        goto label1;

     label4:
        return;
    }

    static void access$000(berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker, long)
    {
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker x0;
        long x1;

        x0 := @parameter0: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker;

        x1 := @parameter1: long;

        specialinvoke x0.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: void incInternalMemoryUsage(long)>(x1);

        return;
    }

    private void fetchAndProcessLSN(long, berkeley.com.sleepycat.je.dbi.LSNAccumulator)
    {
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker this;
        long lsn;
        berkeley.com.sleepycat.je.dbi.LSNAccumulator pendingLSNs;
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$FetchResult result;
        boolean isIN;
        java.lang.Throwable l7, $r11;
        berkeley.com.sleepycat.je.DatabaseEntry $r0, $r1, $r8;
        berkeley.com.sleepycat.je.tree.Node $r2, $r3, $r5, $r7;
        berkeley.com.sleepycat.je.tree.IN in#18, $r10;
        berkeley.com.sleepycat.je.CacheMode $r4;
        berkeley.com.sleepycat.je.log.LogEntryType $r6;
        byte[] $r9;
        int $i0, $i1;

        this := @this: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker;

        lsn := @parameter0: long;

        pendingLSNs := @parameter1: berkeley.com.sleepycat.je.dbi.LSNAccumulator;

        $r0 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: berkeley.com.sleepycat.je.DatabaseEntry lnKeyEntry>;

        virtualinvoke $r0.<berkeley.com.sleepycat.je.DatabaseEntry: void setData(byte[])>(null);

        $r1 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: berkeley.com.sleepycat.je.DatabaseEntry lnKeyEntry>;

        result = specialinvoke this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$FetchResult fetchLSNHandleExceptions(long,berkeley.com.sleepycat.je.DatabaseEntry,berkeley.com.sleepycat.je.dbi.LSNAccumulator)>(lsn, $r1, pendingLSNs);

        if result != null goto label1;

        return;

     label1:
        $r2 = result.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$FetchResult: berkeley.com.sleepycat.je.tree.Node node>;

        isIN = virtualinvoke $r2.<berkeley.com.sleepycat.je.tree.Node: boolean isIN()>();

        if isIN == 0 goto label2;

        $r3 = result.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$FetchResult: berkeley.com.sleepycat.je.tree.Node node>;

        in#18 = (berkeley.com.sleepycat.je.tree.IN) $r3;

        $r4 = <berkeley.com.sleepycat.je.CacheMode: berkeley.com.sleepycat.je.CacheMode UNCHANGED>;

        virtualinvoke in#18.<berkeley.com.sleepycat.je.tree.IN: void latch(berkeley.com.sleepycat.je.CacheMode)>($r4);

        goto label3;

     label2:
        in#18 = null;

     label3:
        $r5 = result.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$FetchResult: berkeley.com.sleepycat.je.tree.Node node>;

        $r6 = virtualinvoke $r5.<berkeley.com.sleepycat.je.tree.Node: berkeley.com.sleepycat.je.log.LogEntryType getGenericLogType()>();

        $r7 = result.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$FetchResult: berkeley.com.sleepycat.je.tree.Node node>;

        $r8 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: berkeley.com.sleepycat.je.DatabaseEntry lnKeyEntry>;

        $r9 = virtualinvoke $r8.<berkeley.com.sleepycat.je.DatabaseEntry: byte[] getData()>();

        $i0 = result.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$FetchResult: int lastLoggedSize>;

        specialinvoke this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: void callProcessLSNHandleExceptions(long,berkeley.com.sleepycat.je.log.LogEntryType,berkeley.com.sleepycat.je.tree.Node,byte[],int)>(lsn, $r6, $r7, $r9, $i0);

        if isIN == 0 goto label4;

        $r10 = result.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$FetchResult: berkeley.com.sleepycat.je.tree.IN ohBinParent>;

        $i1 = result.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$FetchResult: int ohBinIndex>;

        specialinvoke this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: void accumulateLSNs(berkeley.com.sleepycat.je.tree.IN,berkeley.com.sleepycat.je.dbi.LSNAccumulator,berkeley.com.sleepycat.je.tree.IN,int)>(in#18, pendingLSNs, $r10, $i1);

     label4:
        if isIN == 0 goto label9;

        virtualinvoke in#18.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        goto label9;

     label5:
        $r11 := @caughtexception;

     label6:
        l7 = $r11;

     label7:
        if isIN == 0 goto label8;

        virtualinvoke in#18.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label8:
        throw l7;

     label9:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$FetchResult fetchLSNHandleExceptions(long, berkeley.com.sleepycat.je.DatabaseEntry, berkeley.com.sleepycat.je.dbi.LSNAccumulator)
    {
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker this;
        long lsn;
        berkeley.com.sleepycat.je.DatabaseEntry lnKeyEntry;
        berkeley.com.sleepycat.je.dbi.LSNAccumulator pendingLSNs;
        berkeley.com.sleepycat.je.DatabaseException e, dbe#2, $r1;
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$FetchResult $r0;
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$ExceptionPredicate $r2, $r3;
        boolean $z0;
        java.util.List $r4, $r5;

        this := @this: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker;

        lsn := @parameter0: long;

        lnKeyEntry := @parameter1: berkeley.com.sleepycat.je.DatabaseEntry;

        pendingLSNs := @parameter2: berkeley.com.sleepycat.je.dbi.LSNAccumulator;

        dbe#2 = null;

     label1:
        $r0 = specialinvoke this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$FetchResult fetchLSN(long,berkeley.com.sleepycat.je.DatabaseEntry,berkeley.com.sleepycat.je.dbi.LSNAccumulator)>(lsn, lnKeyEntry, pendingLSNs);

     label2:
        return $r0;

     label3:
        $r1 := @caughtexception;

        e = $r1;

        $r2 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$ExceptionPredicate excPredicate>;

        if $r2 == null goto label4;

        $r3 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$ExceptionPredicate excPredicate>;

        $z0 = interfaceinvoke $r3.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$ExceptionPredicate: boolean ignoreException(java.lang.Exception)>(e);

        if $z0 != 0 goto label5;

     label4:
        dbe#2 = e;

     label5:
        if dbe#2 == null goto label7;

        $r4 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: java.util.List savedExceptions>;

        if $r4 == null goto label6;

        $r5 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: java.util.List savedExceptions>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(dbe#2);

        goto label7;

     label6:
        throw dbe#2;

     label7:
        return null;

        catch berkeley.com.sleepycat.je.DatabaseException from label1 to label2 with label3;
    }

    private void callProcessLSNHandleExceptions(long, berkeley.com.sleepycat.je.log.LogEntryType, berkeley.com.sleepycat.je.tree.Node, byte[], int)
    {
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker this;
        long childLSN;
        berkeley.com.sleepycat.je.log.LogEntryType childType;
        berkeley.com.sleepycat.je.tree.Node theNode;
        byte[] lnKey;
        int lastLoggedSize;
        java.lang.Object dbe#2;
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$TreeNodeProcessor $r0;
        java.io.FileNotFoundException $r1, e#9;
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$ExceptionPredicate $r2, $r3, $r8, $r9;
        boolean $z0, $z1;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r5;
        berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason $r6;
        berkeley.com.sleepycat.je.DatabaseException $r7, e#23;
        java.util.List $r10, $r11;
        berkeley.com.sleepycat.je.EnvironmentFailureException tmp$1208401532;
        java.lang.Throwable tmp$477694833;

        this := @this: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker;

        childLSN := @parameter0: long;

        childType := @parameter1: berkeley.com.sleepycat.je.log.LogEntryType;

        theNode := @parameter2: berkeley.com.sleepycat.je.tree.Node;

        lnKey := @parameter3: byte[];

        lastLoggedSize := @parameter4: int;

        dbe#2 = null;

     label01:
        $r0 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$TreeNodeProcessor callback>;

        interfaceinvoke $r0.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$TreeNodeProcessor: void processLSN(long,berkeley.com.sleepycat.je.log.LogEntryType,berkeley.com.sleepycat.je.tree.Node,byte[],int)>(childLSN, childType, theNode, lnKey, lastLoggedSize);

     label02:
        goto label08;

     label03:
        $r1 := @caughtexception;

        e#9 = $r1;

        $r2 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$ExceptionPredicate excPredicate>;

        if $r2 == null goto label04;

        $r3 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$ExceptionPredicate excPredicate>;

        $z0 = interfaceinvoke $r3.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$ExceptionPredicate: boolean ignoreException(java.lang.Exception)>(e#9);

        if $z0 != 0 goto label05;

     label04:
        tmp$1208401532 = new berkeley.com.sleepycat.je.EnvironmentFailureException;

        $r5 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r6 = <berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason: berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason LOG_FILE_NOT_FOUND>;

        specialinvoke tmp$1208401532.<berkeley.com.sleepycat.je.EnvironmentFailureException: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason,java.lang.Throwable)>($r5, $r6, e#9);

        dbe#2 = tmp$1208401532;

     label05:
        goto label08;

     label06:
        $r7 := @caughtexception;

        e#23 = $r7;

        $r8 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$ExceptionPredicate excPredicate>;

        if $r8 == null goto label07;

        $r9 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$ExceptionPredicate excPredicate>;

        $z1 = interfaceinvoke $r9.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$ExceptionPredicate: boolean ignoreException(java.lang.Exception)>(e#23);

        if $z1 != 0 goto label08;

     label07:
        dbe#2 = e#23;

     label08:
        if dbe#2 == null goto label10;

        $r10 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: java.util.List savedExceptions>;

        if $r10 == null goto label09;

        $r11 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: java.util.List savedExceptions>;

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>(dbe#2);

        goto label10;

     label09:
        tmp$477694833 = (java.lang.Throwable) dbe#2;

        throw tmp$477694833;

     label10:
        return;

        catch java.io.FileNotFoundException from label01 to label02 with label03;
        catch berkeley.com.sleepycat.je.DatabaseException from label01 to label02 with label06;
    }

    private void accumulateLSNs(berkeley.com.sleepycat.je.tree.IN, berkeley.com.sleepycat.je.dbi.LSNAccumulator, berkeley.com.sleepycat.je.tree.IN, int)
    {
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker this;
        berkeley.com.sleepycat.je.tree.IN parent, ohBinParent;
        berkeley.com.sleepycat.je.dbi.LSNAccumulator pendingLSNs;
        int ohBinIndex, i#31, $i0, $i3, $i4, $i7, $i10, $i11, $i15;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;
        boolean dups, accumulateChildren, childCached, internalMemoryExceeded, $z0, allChildrenAreLNs#10, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, isLatched#110, $z14, $z15, $z16, $z17, isLatched#184, $z18, $z19, $z20;
        berkeley.com.sleepycat.je.tree.BIN parentBin, bin, delta, $r0, child#104;
        berkeley.com.sleepycat.je.evictor.OffHeapCache ohCache;
        long lsn, $l1, fullLsn#121, fullLsn#197, $l12, $l13, $l16, $l17;
        byte[] lnKey, $r2, $r7;
        java.lang.Throwable l21, l22, $r10, $r12;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r1, $r6;
        berkeley.com.sleepycat.je.tree.Node child#41;
        byte $b2, $b5, $b6, $b8, $b9, $b14, $b18;
        java.lang.AssertionError $r3, $r5, $r8, $r9, $r11;
        berkeley.com.sleepycat.je.CacheMode $r4;
        berkeley.com.sleepycat.je.tree.LN child#77;
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$TreeNodeProcessor $r13;

        this := @this: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker;

        parent := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        pendingLSNs := @parameter1: berkeley.com.sleepycat.je.dbi.LSNAccumulator;

        ohBinParent := @parameter2: berkeley.com.sleepycat.je.tree.IN;

        ohBinIndex := @parameter3: int;

        db = virtualinvoke parent.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        dups = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean getSortedDuplicates()>();

        if dups == 0 goto label01;

        $z0 = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean getDupsConverted()>();

        if $z0 == 0 goto label02;

     label01:
        allChildrenAreLNs#10 = virtualinvoke parent.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        goto label05;

     label02:
        $z1 = virtualinvoke parent.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z1 == 0 goto label03;

        $z2 = virtualinvoke parent.<berkeley.com.sleepycat.je.tree.IN: boolean containsDuplicates()>();

        if $z2 == 0 goto label03;

        $z3 = 1;

        goto label04;

     label03:
        $z3 = 0;

     label04:
        allChildrenAreLNs#10 = $z3;

     label05:
        if allChildrenAreLNs#10 == 0 goto label07;

        if dups == 0 goto label06;

        $z4 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: boolean accumulateDupLNs>;

        if $z4 == 0 goto label08;

        goto label07;

     label06:
        $z5 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: boolean accumulateLNs>;

        if $z5 == 0 goto label08;

     label07:
        $z6 = 1;

        goto label09;

     label08:
        $z6 = 0;

     label09:
        accumulateChildren = $z6;

        $z7 = virtualinvoke parent.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z7 == 0 goto label10;

        $r0 = (berkeley.com.sleepycat.je.tree.BIN) parent;

        goto label11;

     label10:
        $r0 = null;

     label11:
        parentBin = $r0;

        $r1 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        ohCache = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.evictor.OffHeapCache getOffHeapCache()>();

        i#31 = 0;

     label12:
        $i0 = virtualinvoke parent.<berkeley.com.sleepycat.je.tree.IN: int getNEntries()>();

        if i#31 >= $i0 goto label52;

        lsn = virtualinvoke parent.<berkeley.com.sleepycat.je.tree.IN: long getLsn(int)>(i#31);

        child#41 = virtualinvoke parent.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.Node getTarget(int)>(i#31);

        if child#41 == null goto label13;

        $z8 = 1;

        goto label14;

     label13:
        $z8 = 0;

     label14:
        childCached = $z8;

        if allChildrenAreLNs#10 != 0 goto label15;

        if childCached == 0 goto label16;

        $z9 = virtualinvoke child#41.<berkeley.com.sleepycat.je.tree.Node: boolean isLN()>();

        if $z9 == 0 goto label16;

     label15:
        $r2 = virtualinvoke parent.<berkeley.com.sleepycat.je.tree.IN: byte[] getKey(int)>(i#31);

        goto label17;

     label16:
        $r2 = null;

     label17:
        lnKey = $r2;

        if parentBin == null goto label18;

        $z10 = virtualinvoke parentBin.<berkeley.com.sleepycat.je.tree.BIN: boolean isDefunct(int)>(i#31);

        if $z10 == 0 goto label18;

        specialinvoke this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: void processDirtyLN(berkeley.com.sleepycat.je.tree.Node,long,byte[])>(child#41, lsn, lnKey);

        goto label46;

     label18:
        if childCached != 0 goto label21;

        if parentBin == null goto label21;

        $l1 = virtualinvoke parentBin.<berkeley.com.sleepycat.je.tree.BIN: long getOffHeapLNId(int)>(i#31);

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label21;

        $z11 = <berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: boolean $assertionsDisabled>;

        if $z11 != 0 goto label19;

        $z12 = virtualinvoke parent.<berkeley.com.sleepycat.je.tree.IN: boolean isEmbeddedLN(int)>(i#31);

        if $z12 == 0 goto label19;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label19:
        $r4 = <berkeley.com.sleepycat.je.CacheMode: berkeley.com.sleepycat.je.CacheMode UNCHANGED>;

        child#77 = virtualinvoke ohCache.<berkeley.com.sleepycat.je.evictor.OffHeapCache: berkeley.com.sleepycat.je.tree.LN loadLN(berkeley.com.sleepycat.je.tree.BIN,int,berkeley.com.sleepycat.je.CacheMode)>(parentBin, i#31, $r4);

        $z13 = <berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: boolean $assertionsDisabled>;

        if $z13 != 0 goto label20;

        if child#77 != null goto label20;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label20:
        $i3 = virtualinvoke parent.<berkeley.com.sleepycat.je.tree.IN: int getLastLoggedSize(int)>(i#31);

        specialinvoke this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: void processChild(long,berkeley.com.sleepycat.je.tree.Node,byte[],int,berkeley.com.sleepycat.je.dbi.LSNAccumulator,berkeley.com.sleepycat.je.tree.IN,int)>(lsn, child#77, lnKey, $i3, pendingLSNs, null, -1);

        goto label46;

     label21:
        if childCached != 0 goto label32;

        $i4 = virtualinvoke parent.<berkeley.com.sleepycat.je.tree.IN: int getOffHeapBINId(int)>(i#31);

        if $i4 < 0 goto label32;

        $r6 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r7 = virtualinvoke ohCache.<berkeley.com.sleepycat.je.evictor.OffHeapCache: byte[] getBINBytes(berkeley.com.sleepycat.je.tree.IN,int)>(parent, i#31);

        child#104 = virtualinvoke ohCache.<berkeley.com.sleepycat.je.evictor.OffHeapCache: berkeley.com.sleepycat.je.tree.BIN materializeBIN(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,byte[])>($r6, $r7);

        bin = (berkeley.com.sleepycat.je.tree.BIN) child#104;

        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void latchNoUpdateLRU(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(db);

        isLatched#110 = 1;

     label22:
        $z14 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: boolean isBINDelta()>();

        if $z14 == 0 goto label25;

        $z15 = <berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: boolean $assertionsDisabled>;

        if $z15 != 0 goto label23;

        $b5 = lsn cmp -1L;

        if $b5 != 0 goto label23;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label23:
        fullLsn#121 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: long getLastFullLsn()>();

        $z16 = <berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: boolean $assertionsDisabled>;

        if $z16 != 0 goto label24;

        $b6 = fullLsn#121 cmp -1L;

        if $b6 != 0 goto label24;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label24:
        virtualinvoke pendingLSNs.<berkeley.com.sleepycat.je.dbi.LSNAccumulator: void add(long)>(fullLsn#121);

        specialinvoke this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: void addToLsnINMap(long,berkeley.com.sleepycat.je.tree.IN,int,java.lang.Object,long)>(fullLsn#121, parent, i#31, bin, lsn);

        goto label26;

     label25:
        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void releaseLatch()>();

        isLatched#110 = 0;

        $i7 = virtualinvoke parent.<berkeley.com.sleepycat.je.tree.IN: int getLastLoggedSize(int)>(i#31);

        specialinvoke this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: void processChild(long,berkeley.com.sleepycat.je.tree.Node,byte[],int,berkeley.com.sleepycat.je.dbi.LSNAccumulator,berkeley.com.sleepycat.je.tree.IN,int)>(lsn, bin, lnKey, $i7, pendingLSNs, parent, i#31);

     label26:
        if isLatched#110 == 0 goto label31;

        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void releaseLatch()>();

        goto label31;

     label27:
        $r10 := @caughtexception;

     label28:
        l21 = $r10;

     label29:
        if isLatched#110 == 0 goto label30;

        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.BIN: void releaseLatch()>();

     label30:
        throw l21;

     label31:
        goto label46;

     label32:
        if accumulateChildren == 0 goto label35;

        if childCached != 0 goto label35;

        $b8 = lsn cmp -1L;

        if $b8 == 0 goto label35;

        $z17 = virtualinvoke parent.<berkeley.com.sleepycat.je.tree.IN: boolean isEmbeddedLN(int)>(i#31);

        if $z17 != 0 goto label34;

        virtualinvoke pendingLSNs.<berkeley.com.sleepycat.je.dbi.LSNAccumulator: void add(long)>(lsn);

        if ohBinParent == null goto label33;

        specialinvoke this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: void addToLsnINMap(long,berkeley.com.sleepycat.je.tree.IN,int)>(lsn, ohBinParent, ohBinIndex);

        goto label46;

     label33:
        specialinvoke this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: void addToLsnINMap(long,berkeley.com.sleepycat.je.tree.IN,int)>(lsn, parent, i#31);

        goto label46;

     label34:
        specialinvoke this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: void processChild(long,berkeley.com.sleepycat.je.tree.Node,byte[],int,berkeley.com.sleepycat.je.dbi.LSNAccumulator,berkeley.com.sleepycat.je.tree.IN,int)>(-1L, null, lnKey, 0, pendingLSNs, null, -1);

        goto label46;

     label35:
        if childCached == 0 goto label45;

        virtualinvoke child#41.<berkeley.com.sleepycat.je.tree.Node: void latchShared()>();

        isLatched#184 = 1;

     label36:
        $z18 = virtualinvoke child#41.<berkeley.com.sleepycat.je.tree.Node: boolean isBINDelta()>();

        if $z18 == 0 goto label38;

        $z19 = <berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: boolean $assertionsDisabled>;

        if $z19 != 0 goto label37;

        $b9 = lsn cmp -1L;

        if $b9 != 0 goto label37;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label37:
        delta = (berkeley.com.sleepycat.je.tree.BIN) child#41;

        fullLsn#197 = virtualinvoke delta.<berkeley.com.sleepycat.je.tree.BIN: long getLastFullLsn()>();

        virtualinvoke pendingLSNs.<berkeley.com.sleepycat.je.dbi.LSNAccumulator: void add(long)>(fullLsn#197);

        specialinvoke this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: void addToLsnINMap(long,berkeley.com.sleepycat.je.tree.IN,int,java.lang.Object,long)>(fullLsn#197, parent, i#31, delta, lsn);

        goto label39;

     label38:
        virtualinvoke child#41.<berkeley.com.sleepycat.je.tree.Node: void releaseLatch()>();

        isLatched#184 = 0;

        $i10 = virtualinvoke parent.<berkeley.com.sleepycat.je.tree.IN: int getLastLoggedSize(int)>(i#31);

        specialinvoke this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: void processChild(long,berkeley.com.sleepycat.je.tree.Node,byte[],int,berkeley.com.sleepycat.je.dbi.LSNAccumulator,berkeley.com.sleepycat.je.tree.IN,int)>(lsn, child#41, lnKey, $i10, pendingLSNs, null, -1);

     label39:
        if isLatched#184 == 0 goto label44;

        virtualinvoke child#41.<berkeley.com.sleepycat.je.tree.Node: void releaseLatch()>();

        goto label44;

     label40:
        $r12 := @caughtexception;

     label41:
        l22 = $r12;

     label42:
        if isLatched#184 == 0 goto label43;

        virtualinvoke child#41.<berkeley.com.sleepycat.je.tree.Node: void releaseLatch()>();

     label43:
        throw l22;

     label44:
        goto label46;

     label45:
        $i11 = virtualinvoke parent.<berkeley.com.sleepycat.je.tree.IN: int getLastLoggedSize(int)>(i#31);

        specialinvoke this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: void processChild(long,berkeley.com.sleepycat.je.tree.Node,byte[],int,berkeley.com.sleepycat.je.dbi.LSNAccumulator,berkeley.com.sleepycat.je.tree.IN,int)>(lsn, null, lnKey, $i11, pendingLSNs, null, -1);

     label46:
        $l12 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: long internalMemoryUsage>;

        $l13 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: long internalMemoryLimit>;

        $b14 = $l12 cmp $l13;

        if $b14 <= 0 goto label47;

        $z20 = 1;

        goto label48;

     label47:
        $z20 = 0;

     label48:
        internalMemoryExceeded = $z20;

        $i15 = virtualinvoke pendingLSNs.<berkeley.com.sleepycat.je.dbi.LSNAccumulator: int getNTotalEntries()>();

        $l16 = (long) $i15;

        $l17 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: long lsnBatchSize>;

        $b18 = $l16 cmp $l17;

        if $b18 > 0 goto label49;

        if internalMemoryExceeded == 0 goto label51;

     label49:
        if internalMemoryExceeded == 0 goto label50;

        $r13 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$TreeNodeProcessor callback>;

        interfaceinvoke $r13.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$TreeNodeProcessor: void noteMemoryExceeded()>();

     label50:
        specialinvoke this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: void processAccumulatedLSNs(berkeley.com.sleepycat.je.dbi.LSNAccumulator)>(pendingLSNs);

        virtualinvoke pendingLSNs.<berkeley.com.sleepycat.je.dbi.LSNAccumulator: void clear()>();

     label51:
        i#31 = i#31 + 1;

        goto label12;

     label52:
        return;

        catch java.lang.Throwable from label22 to label26 with label27;
        catch java.lang.Throwable from label28 to label29 with label27;
        catch java.lang.Throwable from label36 to label39 with label40;
        catch java.lang.Throwable from label41 to label42 with label40;
    }

    private void processDirtyLN(berkeley.com.sleepycat.je.tree.Node, long, byte[])
    {
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker this;
        berkeley.com.sleepycat.je.tree.Node node;
        long lsn;
        byte[] lnKey;
        berkeley.com.sleepycat.je.tree.LN ln;
        boolean $z0, $z1;
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$TreeNodeProcessor $r0;

        this := @this: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker;

        node := @parameter0: berkeley.com.sleepycat.je.tree.Node;

        lsn := @parameter1: long;

        lnKey := @parameter2: byte[];

        if node == null goto label1;

        $z0 = virtualinvoke node.<berkeley.com.sleepycat.je.tree.Node: boolean isLN()>();

        if $z0 == 0 goto label1;

        ln = (berkeley.com.sleepycat.je.tree.LN) node;

        $z1 = virtualinvoke ln.<berkeley.com.sleepycat.je.tree.LN: boolean isDirty()>();

        if $z1 == 0 goto label1;

        $r0 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$TreeNodeProcessor callback>;

        interfaceinvoke $r0.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$TreeNodeProcessor: void processDirtyDeletedLN(long,berkeley.com.sleepycat.je.tree.LN,byte[])>(lsn, ln, lnKey);

     label1:
        return;
    }

    private void processChild(long, berkeley.com.sleepycat.je.tree.Node, byte[], int, berkeley.com.sleepycat.je.dbi.LSNAccumulator, berkeley.com.sleepycat.je.tree.IN, int)
    {
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker this;
        long lsn;
        berkeley.com.sleepycat.je.tree.Node child;
        byte[] lnKey;
        int lastLoggedSize, ohBinIndex;
        berkeley.com.sleepycat.je.dbi.LSNAccumulator pendingLSNs;
        berkeley.com.sleepycat.je.tree.IN ohBinParent, nodeAsIN;
        boolean childCached, $z0, $z1;
        java.lang.Throwable l11, $r3;
        berkeley.com.sleepycat.je.log.LogEntryType $r1;
        berkeley.com.sleepycat.je.CacheMode $r2;

        this := @this: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker;

        lsn := @parameter0: long;

        child := @parameter1: berkeley.com.sleepycat.je.tree.Node;

        lnKey := @parameter2: byte[];

        lastLoggedSize := @parameter3: int;

        pendingLSNs := @parameter4: berkeley.com.sleepycat.je.dbi.LSNAccumulator;

        ohBinParent := @parameter5: berkeley.com.sleepycat.je.tree.IN;

        ohBinIndex := @parameter6: int;

        if child == null goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        childCached = $z0;

        if childCached != 0 goto label03;

        $r1 = <berkeley.com.sleepycat.je.log.LogEntryType: berkeley.com.sleepycat.je.log.LogEntryType LOG_INS_LN>;

        goto label04;

     label03:
        $r1 = virtualinvoke child.<berkeley.com.sleepycat.je.tree.Node: berkeley.com.sleepycat.je.log.LogEntryType getGenericLogType()>();

     label04:
        specialinvoke this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: void callProcessLSNHandleExceptions(long,berkeley.com.sleepycat.je.log.LogEntryType,berkeley.com.sleepycat.je.tree.Node,byte[],int)>(lsn, $r1, child, lnKey, lastLoggedSize);

        if childCached == 0 goto label10;

        $z1 = virtualinvoke child.<berkeley.com.sleepycat.je.tree.Node: boolean isIN()>();

        if $z1 == 0 goto label10;

        nodeAsIN = (berkeley.com.sleepycat.je.tree.IN) child;

     label05:
        $r2 = <berkeley.com.sleepycat.je.CacheMode: berkeley.com.sleepycat.je.CacheMode UNCHANGED>;

        virtualinvoke nodeAsIN.<berkeley.com.sleepycat.je.tree.IN: void latch(berkeley.com.sleepycat.je.CacheMode)>($r2);

        specialinvoke this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: void accumulateLSNs(berkeley.com.sleepycat.je.tree.IN,berkeley.com.sleepycat.je.dbi.LSNAccumulator,berkeley.com.sleepycat.je.tree.IN,int)>(nodeAsIN, pendingLSNs, ohBinParent, ohBinIndex);

     label06:
        virtualinvoke nodeAsIN.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        goto label10;

     label07:
        $r3 := @caughtexception;

     label08:
        l11 = $r3;

     label09:
        virtualinvoke nodeAsIN.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        throw l11;

     label10:
        return;

        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    private void addToLsnINMap(long, berkeley.com.sleepycat.je.tree.IN, int, java.lang.Object, long)
    {
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker this;
        long lsn, deltaLsn;
        berkeley.com.sleepycat.je.tree.IN in;
        int index;
        java.lang.Object delta;
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$DeltaINEntry $r0;

        this := @this: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker;

        lsn := @parameter0: long;

        in := @parameter1: berkeley.com.sleepycat.je.tree.IN;

        index := @parameter2: int;

        delta := @parameter3: java.lang.Object;

        deltaLsn := @parameter4: long;

        $r0 = new berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$DeltaINEntry;

        specialinvoke $r0.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$DeltaINEntry: void <init>(berkeley.com.sleepycat.je.tree.IN,int,java.lang.Object,long)>(in, index, delta, deltaLsn);

        specialinvoke this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: void addEntryToLsnMap(long,berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$INEntry)>(lsn, $r0);

        return;
    }

    private void addToLsnINMap(long, berkeley.com.sleepycat.je.tree.IN, int)
    {
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker this;
        long lsn;
        berkeley.com.sleepycat.je.tree.IN in;
        int index;
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$INEntry $r0;

        this := @this: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker;

        lsn := @parameter0: long;

        in := @parameter1: berkeley.com.sleepycat.je.tree.IN;

        index := @parameter2: int;

        $r0 = new berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$INEntry;

        specialinvoke $r0.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$INEntry: void <init>(berkeley.com.sleepycat.je.tree.IN,int)>(in, index);

        specialinvoke this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: void addEntryToLsnMap(long,berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$INEntry)>(lsn, $r0);

        return;
    }

    private void addEntryToLsnMap(long, berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$INEntry)
    {
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker this;
        long lsn, $l0;
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$INEntry inEntry;
        java.util.Map $r0;
        java.lang.Long $r1;
        java.lang.Object $r2;

        this := @this: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker;

        lsn := @parameter0: long;

        inEntry := @parameter1: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$INEntry;

        $r0 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: java.util.Map lsnINMap>;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(lsn);

        $r2 = interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, inEntry);

        if $r2 != null goto label1;

        $l0 = virtualinvoke inEntry.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$INEntry: long getMemorySize()>();

        specialinvoke this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: void incInternalMemoryUsage(long)>($l0);

     label1:
        return;
    }

    private void incInternalMemoryUsage(long)
    {
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker this;
        long increment, $l0, $l1;

        this := @this: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker;

        increment := @parameter0: long;

        $l0 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: long internalMemoryUsage>;

        $l1 = $l0 + increment;

        this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: long internalMemoryUsage> = $l1;

        return;
    }

    private berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$FetchResult fetchLSN(long, berkeley.com.sleepycat.je.DatabaseEntry, berkeley.com.sleepycat.je.dbi.LSNAccumulator)
    {
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker this;
        long lsn, $l0, $l1, $l4, $l6, $l8, $l9, $l12, fullLsn#241, fullLsn#268, lastLoggedLsn#300, $l14, $l16, $l18, $l19;
        berkeley.com.sleepycat.je.DatabaseEntry lnKeyEntry;
        berkeley.com.sleepycat.je.dbi.LSNAccumulator pendingLSNs;
        berkeley.com.sleepycat.je.log.LogManager logManager;
        berkeley.com.sleepycat.je.evictor.OffHeapCache ohCache;
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$INEntry inEntry;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl dbImpl, $r45;
        berkeley.com.sleepycat.je.tree.Node residentNode, 'ret';
        java.lang.Object deltaObject, $r4, $r34, $r35;
        boolean isOffHeapBinInTree, storeOffHeap, $z0, $z1, $z2, isLnInOffHeapBin#57, $z3, $z4, mutateResidentDeltaToFullBIN#145, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31;
        berkeley.com.sleepycat.je.tree.BIN ohBin, delta, bin, retBin, $r9, $r12, fullBIN#310, delta#313, fullBIN#354, delta#374;
        berkeley.com.sleepycat.je.log.WholeEntry wholeEntry;
        java.io.FileNotFoundException e, $r13;
        java.lang.String msg, $r6, $r15, $r31;
        berkeley.com.sleepycat.je.log.entry.LogEntry entry;
        int lastLoggedSize, index#28, ohBinIndex#32, $i2, foundIndex#70, i#72, $i3, $i11, retOhBinIndex#397;
        berkeley.com.sleepycat.je.log.entry.BINDeltaLogEntry deltaEntry;
        berkeley.com.sleepycat.je.tree.OldBINDelta delta, delta#359;
        berkeley.com.sleepycat.je.log.entry.LNLogEntry lnEntry;
        berkeley.com.sleepycat.je.tree.IN retIn, retIn, in#25, ohBinParent#30, in1ToUnlatch#34, in2ToUnlatch#36, $r33, retOhBinParent#395, $r49;
        berkeley.com.sleepycat.je.dbi.MemoryBudget memBudget;
        berkeley.com.sleepycat.je.tree.LN retLn, $r50;
        java.lang.Throwable l33, l34, $r44, $r52;
        berkeley.com.sleepycat.je.CacheMode mode, $r46;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0, $r1, $r7, $r29, $r41, $r47;
        java.util.Map $r2;
        java.lang.Long $r3;
        java.lang.AssertionError $r5, $r38, $r39, $r40, $r42, $r43;
        byte[] lnKey#44, $r8, $r10;
        byte $b5, $b7, $b10, $b13, $b15, $b17, $b20;
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$FetchResult $r11, l21#163, $r36, l29#325, $r37, l29#343, $r51, l29#517;
        java.lang.StringBuilder $r14, $r16, $r17, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27;
        berkeley.com.sleepycat.je.dbi.DatabaseId $r18;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r28;
        berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason $r30;
        berkeley.com.sleepycat.je.log.LogEntryHeader $r32;
        berkeley.com.sleepycat.je.evictor.Evictor $r48;

        this := @this: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker;

        lsn := @parameter0: long;

        lnKeyEntry := @parameter1: berkeley.com.sleepycat.je.DatabaseEntry;

        pendingLSNs := @parameter2: berkeley.com.sleepycat.je.dbi.LSNAccumulator;

        $r0 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        logManager = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.log.LogManager getLogManager()>();

        $r1 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        ohCache = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.evictor.OffHeapCache getOffHeapCache()>();

        $r2 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: java.util.Map lsnINMap>;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(lsn);

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r3);

        inEntry = (berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$INEntry) $r4;

        $z0 = <berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: boolean $assertionsDisabled>;

        if $z0 != 0 goto label001;

        if inEntry != null goto label001;

        $r5 = new java.lang.AssertionError;

        $r6 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(lsn);

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>($r6);

        throw $r5;

     label001:
        $l0 = virtualinvoke inEntry.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$INEntry: long getMemorySize()>();

        $l1 = neg $l0;

        specialinvoke this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: void incInternalMemoryUsage(long)>($l1);

        in#25 = inEntry.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$INEntry: berkeley.com.sleepycat.je.tree.IN in>;

        index#28 = inEntry.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$INEntry: int index>;

        ohBinParent#30 = null;

        ohBinIndex#32 = -1;

        in1ToUnlatch#34 = null;

        in2ToUnlatch#36 = null;

        $z1 = virtualinvoke in#25.<berkeley.com.sleepycat.je.tree.IN: boolean isLatchExclusiveOwner()>();

        if $z1 != 0 goto label002;

        virtualinvoke in#25.<berkeley.com.sleepycat.je.tree.IN: void latch()>();

        in1ToUnlatch#34 = in#25;

     label002:
        dbImpl = virtualinvoke in#25.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        lnKey#44 = null;

        residentNode = virtualinvoke in#25.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.Node getTarget(int)>(index#28);

        if residentNode == null goto label003;

        virtualinvoke residentNode.<berkeley.com.sleepycat.je.tree.Node: void latch()>();

     label003:
        deltaObject = virtualinvoke inEntry.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$INEntry: java.lang.Object getDelta()>();

        $i2 = virtualinvoke in#25.<berkeley.com.sleepycat.je.tree.IN: int getOffHeapBINId(int)>(index#28);

        if $i2 < 0 goto label004;

        $z2 = 1;

        goto label005;

     label004:
        $z2 = 0;

     label005:
        isOffHeapBinInTree = $z2;

        isLnInOffHeapBin#57 = 0;

        if isOffHeapBinInTree == 0 goto label014;

        if deltaObject != null goto label014;

        isLnInOffHeapBin#57 = 1;

        $r7 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r8 = virtualinvoke ohCache.<berkeley.com.sleepycat.je.evictor.OffHeapCache: byte[] getBINBytes(berkeley.com.sleepycat.je.tree.IN,int)>(in#25, index#28);

        ohBin = virtualinvoke ohCache.<berkeley.com.sleepycat.je.evictor.OffHeapCache: berkeley.com.sleepycat.je.tree.BIN materializeBIN(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,byte[])>($r7, $r8);

        foundIndex#70 = -1;

        i#72 = 0;

     label006:
        $i3 = virtualinvoke ohBin.<berkeley.com.sleepycat.je.tree.BIN: int getNEntries()>();

        if i#72 >= $i3 goto label008;

        $l4 = virtualinvoke ohBin.<berkeley.com.sleepycat.je.tree.BIN: long getLsn(int)>(i#72);

        $b5 = $l4 cmp lsn;

        if $b5 != 0 goto label007;

        foundIndex#70 = i#72;

        goto label008;

     label007:
        i#72 = i#72 + 1;

        goto label006;

     label008:
        if foundIndex#70 != -1 goto label013;

     label009:
        if residentNode == null goto label010;

        virtualinvoke residentNode.<berkeley.com.sleepycat.je.tree.Node: void releaseLatch()>();

     label010:
        if in1ToUnlatch#34 == null goto label011;

        virtualinvoke in1ToUnlatch#34.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label011:
        if null == null goto label012;

        virtualinvoke in2ToUnlatch#36.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label012:
        return null;

     label013:
        ohBinParent#30 = in#25;

        ohBinIndex#32 = index#28;

        in#25 = ohBin;

        index#28 = foundIndex#70;

        virtualinvoke in#25.<berkeley.com.sleepycat.je.tree.IN: void latchNoUpdateLRU(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(dbImpl);

        in2ToUnlatch#36 = in#25;

     label014:
        $z3 = virtualinvoke in#25.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z3 == 0 goto label019;

        $r9 = (berkeley.com.sleepycat.je.tree.BIN) in#25;

        $z4 = virtualinvoke $r9.<berkeley.com.sleepycat.je.tree.BIN: boolean isDefunct(int)>(index#28);

        if $z4 == 0 goto label019;

     label015:
        if residentNode == null goto label016;

        virtualinvoke residentNode.<berkeley.com.sleepycat.je.tree.Node: void releaseLatch()>();

     label016:
        if in1ToUnlatch#34 == null goto label017;

        virtualinvoke in1ToUnlatch#34.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label017:
        if in2ToUnlatch#36 == null goto label018;

        virtualinvoke in2ToUnlatch#36.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label018:
        return null;

     label019:
        if deltaObject != null goto label024;

        $l6 = virtualinvoke in#25.<berkeley.com.sleepycat.je.tree.IN: long getLsn(int)>(index#28);

        $b7 = $l6 cmp lsn;

        if $b7 == 0 goto label029;

     label020:
        if residentNode == null goto label021;

        virtualinvoke residentNode.<berkeley.com.sleepycat.je.tree.Node: void releaseLatch()>();

     label021:
        if in1ToUnlatch#34 == null goto label022;

        virtualinvoke in1ToUnlatch#34.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label022:
        if in2ToUnlatch#36 == null goto label023;

        virtualinvoke in2ToUnlatch#36.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label023:
        return null;

     label024:
        $l8 = virtualinvoke in#25.<berkeley.com.sleepycat.je.tree.IN: long getLsn(int)>(index#28);

        $l9 = virtualinvoke inEntry.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$INEntry: long getDeltaLsn()>();

        $b10 = $l8 cmp $l9;

        if $b10 == 0 goto label029;

     label025:
        if residentNode == null goto label026;

        virtualinvoke residentNode.<berkeley.com.sleepycat.je.tree.Node: void releaseLatch()>();

     label026:
        if in1ToUnlatch#34 == null goto label027;

        virtualinvoke in1ToUnlatch#34.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label027:
        if in2ToUnlatch#36 == null goto label028;

        virtualinvoke in2ToUnlatch#36.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label028:
        return null;

     label029:
        mutateResidentDeltaToFullBIN#145 = 0;

        if residentNode == null goto label041;

        $z5 = virtualinvoke residentNode.<berkeley.com.sleepycat.je.tree.Node: boolean isBINDelta()>();

        if $z5 != 0 goto label035;

        $z6 = virtualinvoke residentNode.<berkeley.com.sleepycat.je.tree.Node: boolean isLN()>();

        if $z6 == 0 goto label030;

        $r10 = virtualinvoke in#25.<berkeley.com.sleepycat.je.tree.IN: byte[] getKey(int)>(index#28);

        virtualinvoke lnKeyEntry.<berkeley.com.sleepycat.je.DatabaseEntry: void setData(byte[])>($r10);

     label030:
        $r11 = new berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$FetchResult;

        $i11 = virtualinvoke in#25.<berkeley.com.sleepycat.je.tree.IN: int getLastLoggedSize(int)>(index#28);

        specialinvoke $r11.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$FetchResult: void <init>(berkeley.com.sleepycat.je.tree.Node,int,berkeley.com.sleepycat.je.tree.IN,int)>(residentNode, $i11, null, -1);

        l21#163 = $r11;

     label031:
        if residentNode == null goto label032;

        virtualinvoke residentNode.<berkeley.com.sleepycat.je.tree.Node: void releaseLatch()>();

     label032:
        if in1ToUnlatch#34 == null goto label033;

        virtualinvoke in1ToUnlatch#34.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label033:
        if in2ToUnlatch#36 == null goto label034;

        virtualinvoke in2ToUnlatch#36.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label034:
        return l21#163;

     label035:
        $r12 = (berkeley.com.sleepycat.je.tree.BIN) residentNode;

        $l12 = virtualinvoke $r12.<berkeley.com.sleepycat.je.tree.BIN: long getLastFullLsn()>();

        $b13 = $l12 cmp lsn;

        if $b13 == 0 goto label040;

     label036:
        if residentNode == null goto label037;

        virtualinvoke residentNode.<berkeley.com.sleepycat.je.tree.Node: void releaseLatch()>();

     label037:
        if in1ToUnlatch#34 == null goto label038;

        virtualinvoke in1ToUnlatch#34.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label038:
        if in2ToUnlatch#36 == null goto label039;

        virtualinvoke in2ToUnlatch#36.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label039:
        return null;

     label040:
        mutateResidentDeltaToFullBIN#145 = 1;

     label041:
        wholeEntry = virtualinvoke logManager.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.WholeEntry getWholeLogEntry(long)>(lsn);

     label042:
        goto label050;

     label043:
        $r13 := @caughtexception;

        e = $r13;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $z7 = virtualinvoke this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: boolean fetchAndInsertIntoTree()>();

        if $z7 == 0 goto label044;

        $r15 = "Preload failed";

        goto label045;

     label044:
        $r15 = "SortedLSNTreeWalker failed";

     label045:
        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" dbId=");

        $r18 = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.DatabaseId getId()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isOffHeapBinInTree=");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(isOffHeapBinInTree);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isLnInOffHeapBin=");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(isLnInOffHeapBin#57);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" deltaObject=");

        if deltaObject == null goto label046;

        $z8 = 1;

        goto label047;

     label046:
        $z8 = 0;

     label047:
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z8);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" residentNode=");

        if residentNode == null goto label048;

        $z9 = 1;

        goto label049;

     label048:
        $z9 = 0;

     label049:
        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z9);

        msg = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        $r28 = new berkeley.com.sleepycat.je.EnvironmentFailureException;

        $r29 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r30 = <berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason: berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason LOG_FILE_NOT_FOUND>;

        $r31 = virtualinvoke in#25.<berkeley.com.sleepycat.je.tree.IN: java.lang.String makeFetchErrorMsg(java.lang.String,long,int)>(msg, lsn, index#28);

        specialinvoke $r28.<berkeley.com.sleepycat.je.EnvironmentFailureException: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason,java.lang.String,java.lang.Throwable)>($r29, $r30, $r31, e);

        throw $r28;

     label050:
        entry = virtualinvoke wholeEntry.<berkeley.com.sleepycat.je.log.WholeEntry: berkeley.com.sleepycat.je.log.entry.LogEntry getEntry()>();

        $r32 = virtualinvoke wholeEntry.<berkeley.com.sleepycat.je.log.WholeEntry: berkeley.com.sleepycat.je.log.LogEntryHeader getHeader()>();

        lastLoggedSize = virtualinvoke $r32.<berkeley.com.sleepycat.je.log.LogEntryHeader: int getEntrySize()>();

        $z10 = entry instanceof berkeley.com.sleepycat.je.log.entry.BINDeltaLogEntry;

        if $z10 == 0 goto label055;

        deltaEntry = (berkeley.com.sleepycat.je.log.entry.BINDeltaLogEntry) entry;

        fullLsn#241 = virtualinvoke deltaEntry.<berkeley.com.sleepycat.je.log.entry.BINDeltaLogEntry: long getPrevFullLsn()>();

        $r33 = virtualinvoke deltaEntry.<berkeley.com.sleepycat.je.log.entry.BINDeltaLogEntry: berkeley.com.sleepycat.je.tree.IN getMainItem()>();

        delta = (berkeley.com.sleepycat.je.tree.BIN) $r33;

        virtualinvoke pendingLSNs.<berkeley.com.sleepycat.je.dbi.LSNAccumulator: void add(long)>(fullLsn#241);

        specialinvoke this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: void addToLsnINMap(long,berkeley.com.sleepycat.je.tree.IN,int,java.lang.Object,long)>(fullLsn#241, in#25, index#28, delta, lsn);

     label051:
        if residentNode == null goto label052;

        virtualinvoke residentNode.<berkeley.com.sleepycat.je.tree.Node: void releaseLatch()>();

     label052:
        if in1ToUnlatch#34 == null goto label053;

        virtualinvoke in1ToUnlatch#34.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label053:
        if in2ToUnlatch#36 == null goto label054;

        virtualinvoke in2ToUnlatch#36.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label054:
        return null;

     label055:
        $z11 = entry instanceof berkeley.com.sleepycat.je.log.entry.OldBINDeltaLogEntry;

        if $z11 == 0 goto label060;

        $r34 = interfaceinvoke entry.<berkeley.com.sleepycat.je.log.entry.LogEntry: java.lang.Object getMainItem()>();

        delta = (berkeley.com.sleepycat.je.tree.OldBINDelta) $r34;

        fullLsn#268 = virtualinvoke delta.<berkeley.com.sleepycat.je.tree.OldBINDelta: long getLastFullLsn()>();

        virtualinvoke pendingLSNs.<berkeley.com.sleepycat.je.dbi.LSNAccumulator: void add(long)>(fullLsn#268);

        specialinvoke this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: void addToLsnINMap(long,berkeley.com.sleepycat.je.tree.IN,int,java.lang.Object,long)>(fullLsn#268, in#25, index#28, delta, lsn);

     label056:
        if residentNode == null goto label057;

        virtualinvoke residentNode.<berkeley.com.sleepycat.je.tree.Node: void releaseLatch()>();

     label057:
        if in1ToUnlatch#34 == null goto label058;

        virtualinvoke in1ToUnlatch#34.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label058:
        if in2ToUnlatch#36 == null goto label059;

        virtualinvoke in2ToUnlatch#36.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label059:
        return null;

     label060:
        $z12 = entry instanceof berkeley.com.sleepycat.je.log.entry.LNLogEntry;

        if $z12 == 0 goto label061;

        lnEntry = (berkeley.com.sleepycat.je.log.entry.LNLogEntry) entry;

        virtualinvoke lnEntry.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: void postFetchInit(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(dbImpl);

        lnKey#44 = virtualinvoke lnEntry.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: byte[] getKey()>();

        virtualinvoke lnKeyEntry.<berkeley.com.sleepycat.je.DatabaseEntry: void setData(byte[])>(lnKey#44);

     label061:
        $r35 = interfaceinvoke entry.<berkeley.com.sleepycat.je.log.entry.LogEntry: java.lang.Object getResolvedItem(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(dbImpl);

        'ret' = (berkeley.com.sleepycat.je.tree.Node) $r35;

        lastLoggedLsn#300 = lsn;

        $z13 = virtualinvoke 'ret'.<berkeley.com.sleepycat.je.tree.Node: boolean isIN()>();

        if $z13 == 0 goto label062;

        retIn = (berkeley.com.sleepycat.je.tree.IN) 'ret';

        virtualinvoke retIn.<berkeley.com.sleepycat.je.tree.IN: void setDatabase(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(dbImpl);

     label062:
        if mutateResidentDeltaToFullBIN#145 == 0 goto label072;

        fullBIN#310 = (berkeley.com.sleepycat.je.tree.BIN) 'ret';

        delta#313 = (berkeley.com.sleepycat.je.tree.BIN) residentNode;

        $z14 = virtualinvoke this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: boolean fetchAndInsertIntoTree()>();

        if $z14 == 0 goto label067;

        virtualinvoke delta#313.<berkeley.com.sleepycat.je.tree.BIN: void mutateToFullBIN(berkeley.com.sleepycat.je.tree.BIN,boolean)>(fullBIN#310, 0);

        $r36 = new berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$FetchResult;

        specialinvoke $r36.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$FetchResult: void <init>(berkeley.com.sleepycat.je.tree.Node,int,berkeley.com.sleepycat.je.tree.IN,int)>(residentNode, lastLoggedSize, ohBinParent#30, ohBinIndex#32);

        l29#325 = $r36;

     label063:
        if residentNode == null goto label064;

        virtualinvoke residentNode.<berkeley.com.sleepycat.je.tree.Node: void releaseLatch()>();

     label064:
        if in1ToUnlatch#34 == null goto label065;

        virtualinvoke in1ToUnlatch#34.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label065:
        if in2ToUnlatch#36 == null goto label066;

        virtualinvoke in2ToUnlatch#36.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label066:
        return l29#325;

     label067:
        virtualinvoke delta#313.<berkeley.com.sleepycat.je.tree.BIN: void reconstituteBIN(berkeley.com.sleepycat.je.dbi.DatabaseImpl,berkeley.com.sleepycat.je.tree.BIN,boolean)>(dbImpl, fullBIN#310, 0);

        $r37 = new berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$FetchResult;

        specialinvoke $r37.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$FetchResult: void <init>(berkeley.com.sleepycat.je.tree.Node,int,berkeley.com.sleepycat.je.tree.IN,int)>('ret', lastLoggedSize, ohBinParent#30, ohBinIndex#32);

        l29#343 = $r37;

     label068:
        if residentNode == null goto label069;

        virtualinvoke residentNode.<berkeley.com.sleepycat.je.tree.Node: void releaseLatch()>();

     label069:
        if in1ToUnlatch#34 == null goto label070;

        virtualinvoke in1ToUnlatch#34.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label070:
        if in2ToUnlatch#36 == null goto label071;

        virtualinvoke in2ToUnlatch#36.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label071:
        return l29#343;

     label072:
        if deltaObject == null goto label076;

        fullBIN#354 = (berkeley.com.sleepycat.je.tree.BIN) 'ret';

        $z15 = deltaObject instanceof berkeley.com.sleepycat.je.tree.OldBINDelta;

        if $z15 == 0 goto label074;

        delta#359 = (berkeley.com.sleepycat.je.tree.OldBINDelta) deltaObject;

        $z16 = <berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: boolean $assertionsDisabled>;

        if $z16 != 0 goto label073;

        $l14 = virtualinvoke delta#359.<berkeley.com.sleepycat.je.tree.OldBINDelta: long getLastFullLsn()>();

        $b15 = lsn cmp $l14;

        if $b15 == 0 goto label073;

        $r38 = new java.lang.AssertionError;

        specialinvoke $r38.<java.lang.AssertionError: void <init>()>();

        throw $r38;

     label073:
        virtualinvoke delta#359.<berkeley.com.sleepycat.je.tree.OldBINDelta: void reconstituteBIN(berkeley.com.sleepycat.je.dbi.DatabaseImpl,berkeley.com.sleepycat.je.tree.BIN)>(dbImpl, fullBIN#354);

        lastLoggedLsn#300 = virtualinvoke inEntry.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$INEntry: long getDeltaLsn()>();

        goto label076;

     label074:
        delta#374 = (berkeley.com.sleepycat.je.tree.BIN) deltaObject;

        $z17 = <berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: boolean $assertionsDisabled>;

        if $z17 != 0 goto label075;

        $l16 = virtualinvoke delta#374.<berkeley.com.sleepycat.je.tree.BIN: long getLastFullLsn()>();

        $b17 = lsn cmp $l16;

        if $b17 == 0 goto label075;

        $r39 = new java.lang.AssertionError;

        specialinvoke $r39.<java.lang.AssertionError: void <init>()>();

        throw $r39;

     label075:
        virtualinvoke delta#374.<berkeley.com.sleepycat.je.tree.BIN: void reconstituteBIN(berkeley.com.sleepycat.je.dbi.DatabaseImpl,berkeley.com.sleepycat.je.tree.BIN,boolean)>(dbImpl, fullBIN#354, 0);

        lastLoggedLsn#300 = virtualinvoke inEntry.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$INEntry: long getDeltaLsn()>();

     label076:
        $z18 = <berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: boolean $assertionsDisabled>;

        if $z18 != 0 goto label077;

        $z19 = virtualinvoke 'ret'.<berkeley.com.sleepycat.je.tree.Node: boolean isBINDelta(boolean)>(0);

        if $z19 == 0 goto label077;

        $r40 = new java.lang.AssertionError;

        specialinvoke $r40.<java.lang.AssertionError: void <init>()>();

        throw $r40;

     label077:
        retOhBinParent#395 = null;

        retOhBinIndex#397 = -1;

        $z20 = virtualinvoke this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: boolean fetchAndInsertIntoTree()>();

        if $z20 == 0 goto label101;

        virtualinvoke in#25.<berkeley.com.sleepycat.je.tree.IN: void setLastLoggedSize(int,int)>(index#28, lastLoggedSize);

        $r41 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        memBudget = virtualinvoke $r41.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.MemoryBudget getMemoryBudget()>();

        $z21 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: boolean preloadIntoOffHeapCache>;

        if $z21 == 0 goto label078;

        $l18 = virtualinvoke memBudget.<berkeley.com.sleepycat.je.dbi.MemoryBudget: long getCacheMemoryUsage()>();

        $l19 = virtualinvoke memBudget.<berkeley.com.sleepycat.je.dbi.MemoryBudget: long getMaxMemory()>();

        $b20 = $l18 cmp $l19;

        if $b20 <= 0 goto label078;

        $z22 = 1;

        goto label079;

     label078:
        $z22 = 0;

     label079:
        storeOffHeap = $z22;

        if isOffHeapBinInTree != 0 goto label080;

        if storeOffHeap == 0 goto label096;

        $z23 = virtualinvoke 'ret'.<berkeley.com.sleepycat.je.tree.Node: boolean isUpperIN()>();

        if $z23 != 0 goto label096;

     label080:
        $z24 = virtualinvoke 'ret'.<berkeley.com.sleepycat.je.tree.Node: boolean isLN()>();

        if $z24 == 0 goto label083;

        bin = (berkeley.com.sleepycat.je.tree.BIN) in#25;

        retLn = (berkeley.com.sleepycat.je.tree.LN) 'ret';

        virtualinvoke ohCache.<berkeley.com.sleepycat.je.evictor.OffHeapCache: boolean storePreloadedLN(berkeley.com.sleepycat.je.tree.BIN,int,berkeley.com.sleepycat.je.tree.LN)>(bin, index#28, retLn);

        if isOffHeapBinInTree == 0 goto label082;

        $z25 = <berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: boolean $assertionsDisabled>;

        if $z25 != 0 goto label081;

        if isLnInOffHeapBin#57 != 0 goto label081;

        $r42 = new java.lang.AssertionError;

        specialinvoke $r42.<java.lang.AssertionError: void <init>()>();

        throw $r42;

     label081:
        virtualinvoke ohCache.<berkeley.com.sleepycat.je.evictor.OffHeapCache: boolean storePreloadedBIN(berkeley.com.sleepycat.je.tree.BIN,berkeley.com.sleepycat.je.tree.IN,int)>(bin, ohBinParent#30, ohBinIndex#32);

     label082:
        goto label099;

     label083:
        $z26 = <berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: boolean $assertionsDisabled>;

        if $z26 != 0 goto label084;

        if isLnInOffHeapBin#57 == 0 goto label084;

        $r43 = new java.lang.AssertionError;

        specialinvoke $r43.<java.lang.AssertionError: void <init>()>();

        throw $r43;

     label084:
        retBin = (berkeley.com.sleepycat.je.tree.BIN) 'ret';

        virtualinvoke retBin.<berkeley.com.sleepycat.je.tree.BIN: void latchNoUpdateLRU(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(dbImpl);

        virtualinvoke retBin.<berkeley.com.sleepycat.je.tree.BIN: void setLastLoggedLsn(long)>(lsn);

     label085:
        $z27 = virtualinvoke ohCache.<berkeley.com.sleepycat.je.evictor.OffHeapCache: boolean storePreloadedBIN(berkeley.com.sleepycat.je.tree.BIN,berkeley.com.sleepycat.je.tree.IN,int)>(retBin, in#25, index#28);

        if $z27 != 0 goto label091;

     label086:
        virtualinvoke retBin.<berkeley.com.sleepycat.je.tree.BIN: void releaseLatch()>();

     label087:
        if residentNode == null goto label088;

        virtualinvoke residentNode.<berkeley.com.sleepycat.je.tree.Node: void releaseLatch()>();

     label088:
        if in1ToUnlatch#34 == null goto label089;

        virtualinvoke in1ToUnlatch#34.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label089:
        if in2ToUnlatch#36 == null goto label090;

        virtualinvoke in2ToUnlatch#36.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label090:
        return null;

     label091:
        virtualinvoke retBin.<berkeley.com.sleepycat.je.tree.BIN: void releaseLatch()>();

        goto label095;

     label092:
        $r44 := @caughtexception;

     label093:
        l33 = $r44;

     label094:
        virtualinvoke retBin.<berkeley.com.sleepycat.je.tree.BIN: void releaseLatch()>();

        throw l33;

     label095:
        retOhBinParent#395 = in#25;

        retOhBinIndex#397 = index#28;

        goto label099;

     label096:
        $z28 = virtualinvoke 'ret'.<berkeley.com.sleepycat.je.tree.Node: boolean isIN()>();

        if $z28 == 0 goto label097;

        retIn = (berkeley.com.sleepycat.je.tree.IN) 'ret';

        virtualinvoke retIn.<berkeley.com.sleepycat.je.tree.IN: void latchNoUpdateLRU(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(dbImpl);

        virtualinvoke 'ret'.<berkeley.com.sleepycat.je.tree.Node: void postFetchInit(berkeley.com.sleepycat.je.dbi.DatabaseImpl,long)>(dbImpl, lastLoggedLsn#300);

        virtualinvoke in#25.<berkeley.com.sleepycat.je.tree.IN: void attachNode(int,berkeley.com.sleepycat.je.tree.Node,byte[])>(index#28, 'ret', lnKey#44);

        virtualinvoke retIn.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        goto label098;

     label097:
        virtualinvoke 'ret'.<berkeley.com.sleepycat.je.tree.Node: void postFetchInit(berkeley.com.sleepycat.je.dbi.DatabaseImpl,long)>(dbImpl, lastLoggedLsn#300);

        virtualinvoke in#25.<berkeley.com.sleepycat.je.tree.IN: void attachNode(int,berkeley.com.sleepycat.je.tree.Node,byte[])>(index#28, 'ret', lnKey#44);

     label098:
        $z29 = virtualinvoke in#25.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z29 == 0 goto label099;

        $r45 = virtualinvoke in#25.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        mode = virtualinvoke $r45.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.CacheMode getDefaultCacheMode()>();

        $r46 = <berkeley.com.sleepycat.je.CacheMode: berkeley.com.sleepycat.je.CacheMode EVICT_LN>;

        if mode == $r46 goto label099;

        $r47 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r48 = virtualinvoke $r47.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.evictor.Evictor getEvictor()>();

        virtualinvoke $r48.<berkeley.com.sleepycat.je.evictor.Evictor: void moveToPri1LRU(berkeley.com.sleepycat.je.tree.IN)>(in#25);

     label099:
        $z30 = virtualinvoke 'ret'.<berkeley.com.sleepycat.je.tree.Node: boolean isIN()>();

        if $z30 == 0 goto label100;

        $r49 = (berkeley.com.sleepycat.je.tree.IN) 'ret';

        virtualinvoke $r49.<berkeley.com.sleepycat.je.tree.IN: void setFetchedCold(boolean)>(0);

        goto label101;

     label100:
        $z31 = virtualinvoke 'ret'.<berkeley.com.sleepycat.je.tree.Node: boolean isLN()>();

        if $z31 == 0 goto label101;

        $r50 = (berkeley.com.sleepycat.je.tree.LN) 'ret';

        virtualinvoke $r50.<berkeley.com.sleepycat.je.tree.LN: void setFetchedCold(boolean)>(0);

     label101:
        $r51 = new berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$FetchResult;

        specialinvoke $r51.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$FetchResult: void <init>(berkeley.com.sleepycat.je.tree.Node,int,berkeley.com.sleepycat.je.tree.IN,int)>('ret', lastLoggedSize, retOhBinParent#395, retOhBinIndex#397);

        l29#517 = $r51;

     label102:
        if residentNode == null goto label103;

        virtualinvoke residentNode.<berkeley.com.sleepycat.je.tree.Node: void releaseLatch()>();

     label103:
        if in1ToUnlatch#34 == null goto label104;

        virtualinvoke in1ToUnlatch#34.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label104:
        if in2ToUnlatch#36 == null goto label105;

        virtualinvoke in2ToUnlatch#36.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label105:
        return l29#517;

     label106:
        $r52 := @caughtexception;

     label107:
        l34 = $r52;

     label108:
        if residentNode == null goto label109;

        virtualinvoke residentNode.<berkeley.com.sleepycat.je.tree.Node: void releaseLatch()>();

     label109:
        if in1ToUnlatch#34 == null goto label110;

        virtualinvoke in1ToUnlatch#34.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label110:
        if in2ToUnlatch#36 == null goto label111;

        virtualinvoke in2ToUnlatch#36.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label111:
        throw l34;

        catch java.io.FileNotFoundException from label041 to label042 with label043;
        catch java.lang.Throwable from label085 to label086 with label092;
        catch java.lang.Throwable from label093 to label094 with label092;
        catch java.lang.Throwable from label003 to label009 with label106;
        catch java.lang.Throwable from label013 to label015 with label106;
        catch java.lang.Throwable from label019 to label020 with label106;
        catch java.lang.Throwable from label024 to label025 with label106;
        catch java.lang.Throwable from label029 to label031 with label106;
        catch java.lang.Throwable from label035 to label036 with label106;
        catch java.lang.Throwable from label040 to label051 with label106;
        catch java.lang.Throwable from label055 to label056 with label106;
        catch java.lang.Throwable from label060 to label063 with label106;
        catch java.lang.Throwable from label067 to label068 with label106;
        catch java.lang.Throwable from label072 to label087 with label106;
        catch java.lang.Throwable from label091 to label102 with label106;
        catch java.lang.Throwable from label107 to label108 with label106;
    }

    private berkeley.com.sleepycat.je.tree.IN getOrFetchRootIN(berkeley.com.sleepycat.je.dbi.DatabaseImpl, long)
    {
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        long rootLsn;
        berkeley.com.sleepycat.je.tree.IN root, $r0;
        byte $b0;

        this := @this: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker;

        dbImpl := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        rootLsn := @parameter1: long;

        root = virtualinvoke this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: berkeley.com.sleepycat.je.tree.IN getResidentRootIN(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(dbImpl);

        if root == null goto label1;

        return root;

     label1:
        $b0 = rootLsn cmp -1L;

        if $b0 != 0 goto label2;

        return null;

     label2:
        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: berkeley.com.sleepycat.je.tree.IN getRootIN(berkeley.com.sleepycat.je.dbi.DatabaseImpl,long)>(dbImpl, rootLsn);

        return $r0;
    }

    private void releaseRootIN(berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker this;
        berkeley.com.sleepycat.je.tree.IN root;

        this := @this: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker;

        root := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        virtualinvoke root.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        return;
    }

    berkeley.com.sleepycat.je.tree.IN getResidentRootIN(berkeley.com.sleepycat.je.dbi.DatabaseImpl)
    {
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        berkeley.com.sleepycat.je.tree.Tree $r0;
        berkeley.com.sleepycat.je.tree.IN $r1;

        this := @this: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker;

        dbImpl := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.tree.Tree getTree()>();

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.tree.Tree: berkeley.com.sleepycat.je.tree.IN getResidentRootIN(boolean)>(1);

        return $r1;
    }

    public void <init>(berkeley.com.sleepycat.je.dbi.DatabaseImpl[], boolean, long[], berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$TreeNodeProcessor, java.util.List, berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$ExceptionPredicate)
    {
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl[] dbImpls, l7;
        boolean setDbState;
        long[] rootLsns;
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$TreeNodeProcessor callback;
        java.util.List savedExceptions;
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$ExceptionPredicate excPredicate;
        int l8, $i0, l9#35;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl di, $r3;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl ei, $r4, $r11;
        berkeley.com.sleepycat.je.DatabaseEntry $r0;
        java.util.HashMap $r1;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r2, $r10;
        java.lang.StringBuilder $r5, $r6, $r8, $r13, $r14, $r16, $r17;
        java.lang.String $r7, $r9, $r15, $r18;
        java.lang.IllegalArgumentException $r12;

        this := @this: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker;

        dbImpls := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl[];

        setDbState := @parameter1: boolean;

        rootLsns := @parameter2: long[];

        callback := @parameter3: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$TreeNodeProcessor;

        savedExceptions := @parameter4: java.util.List;

        excPredicate := @parameter5: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$ExceptionPredicate;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: long internalMemoryLimit> = 9223372036854775807L;

        this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: boolean accumulateLNs> = 0;

        this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: boolean preloadIntoOffHeapCache> = 0;

        this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: boolean accumulateDupLNs> = 0;

        this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: long lsnBatchSize> = 9223372036854775807L;

        $r0 = new berkeley.com.sleepycat.je.DatabaseEntry;

        specialinvoke $r0.<berkeley.com.sleepycat.je.DatabaseEntry: void <init>()>();

        this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: berkeley.com.sleepycat.je.DatabaseEntry lnKeyEntry> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: java.util.Map lsnINMap> = $r1;

        if dbImpls == null goto label1;

        $i0 = lengthof dbImpls;

        if $i0 >= 1 goto label2;

     label1:
        $r2 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>("DatabaseImpls array is null or 0-length for SortedLSNTreeWalker");

        throw $r2;

     label2:
        this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: berkeley.com.sleepycat.je.dbi.DatabaseImpl[] dbImpls> = dbImpls;

        $r3 = dbImpls[0];

        $r4 = virtualinvoke $r3.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl> = $r4;

        l7 = dbImpls;

        l8 = lengthof l7;

        l9#35 = 0;

     label3:
        if l9#35 >= l8 goto label6;

        di = l7[l9#35];

        ei = virtualinvoke di.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        if ei != null goto label4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("environmentImpl is null for target db ");

        $r7 = virtualinvoke di.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: java.lang.String getDebugName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>($r9);

        throw $r10;

     label4:
        $r11 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        if ei == $r11 goto label5;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Environment.preload() must be called with Databases which are all in the same Environment. (");

        $r15 = virtualinvoke di.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: java.lang.String getDebugName()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r12;

     label5:
        l9#35 = l9#35 + 1;

        goto label3;

     label6:
        this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: boolean setDbState> = setDbState;

        this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: long[] rootLsns> = rootLsns;

        this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$TreeNodeProcessor callback> = callback;

        this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: java.util.List savedExceptions> = savedExceptions;

        this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker$ExceptionPredicate excPredicate> = excPredicate;

        return;
    }

    void setLSNBatchSize(long)
    {
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker this;
        long lsnBatchSize;

        this := @this: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker;

        lsnBatchSize := @parameter0: long;

        this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: long lsnBatchSize> = lsnBatchSize;

        return;
    }

    void setInternalMemoryLimit(long)
    {
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker this;
        long internalMemoryLimit;

        this := @this: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker;

        internalMemoryLimit := @parameter0: long;

        this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: long internalMemoryLimit> = internalMemoryLimit;

        return;
    }

    public void walk()
    {
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker this;

        this := @this: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker;

        virtualinvoke this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: void walkInternal()>();

        return;
    }

    protected boolean fetchAndInsertIntoTree()
    {
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker this;

        this := @this: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker;

        return 0;
    }

    berkeley.com.sleepycat.je.tree.IN getRootIN(berkeley.com.sleepycat.je.dbi.DatabaseImpl, long)
    {
        berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        long rootLsn;
        berkeley.com.sleepycat.je.tree.IN root;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0;
        berkeley.com.sleepycat.je.log.LogManager $r1;
        java.lang.Object $r2;
        berkeley.com.sleepycat.je.CacheMode $r3;

        this := @this: berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker;

        dbImpl := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        rootLsn := @parameter1: long;

        $r0 = this.<berkeley.com.sleepycat.je.dbi.SortedLSNTreeWalker: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.log.LogManager getLogManager()>();

        $r2 = virtualinvoke $r1.<berkeley.com.sleepycat.je.log.LogManager: java.lang.Object getEntryHandleFileNotFound(long)>(rootLsn);

        root = (berkeley.com.sleepycat.je.tree.IN) $r2;

        if root != null goto label1;

        return null;

     label1:
        virtualinvoke root.<berkeley.com.sleepycat.je.tree.IN: void setDatabase(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(dbImpl);

        $r3 = <berkeley.com.sleepycat.je.CacheMode: berkeley.com.sleepycat.je.CacheMode DEFAULT>;

        virtualinvoke root.<berkeley.com.sleepycat.je.tree.IN: void latchShared(berkeley.com.sleepycat.je.CacheMode)>($r3);

        return root;
    }


