    public static int min(int, int)
    {
        int l0, l1, $i0;

        l0 := @parameter0: int;

        l1 := @parameter1: int;

        if l0 > l1 goto label1;

        $i0 = l0;

        goto label2;

     label1:
        $i0 = l1;

     label2:
        return $i0;
    }

    public static int max(int, int)
    {
        int l0, l1, $i0;

        l0 := @parameter0: int;

        l1 := @parameter1: int;

        if l0 < l1 goto label1;

        $i0 = l0;

        goto label2;

     label1:
        $i0 = l1;

     label2:
        return $i0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        int $i0;
        long $l1, $l2;
        double $d0, $d1;

        $r0 = class "java/lang/Math";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <java.lang.Math: boolean $assertionsDisabled> = $z1;

        $i0 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(-0.0F);

        $l1 = (long) $i0;

        <java.lang.Math: long negativeZeroFloatBits> = $l1;

        $l2 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(-0.0);

        <java.lang.Math: long negativeZeroDoubleBits> = $l2;

        $d0 = staticinvoke <java.lang.Math: double powerOfTwoD(int)>(512);

        <java.lang.Math: double twoToTheDoubleScaleUp> = $d0;

        $d1 = staticinvoke <java.lang.Math: double powerOfTwoD(int)>(-512);

        <java.lang.Math: double twoToTheDoubleScaleDown> = $d1;

        return;
    }

    static double powerOfTwoD(int)
    {
        int l0;
        boolean $z0;
        java.lang.AssertionError $r0;
        long $l0, $l1, $l2, $l3;
        double $d0;

        l0 := @parameter0: int;

        $z0 = <java.lang.Math: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if l0 < -1022 goto label1;

        if l0 <= 1023 goto label2;

     label1:
        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label2:
        $l0 = (long) l0;

        $l1 = $l0 + 1023L;

        $l2 = $l1 << 52;

        $l3 = $l2 & 9218868437227405312L;

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l3);

        return $d0;
    }

    public static double ceil(double)
    {
        double l0, $d0;

        l0 := @parameter0: double;

        $d0 = staticinvoke <java.lang.StrictMath: double ceil(double)>(l0);

        return $d0;
    }

    public static int getExponent(double)
    {
        double l0;
        long $l0, $l1, $l2, $l3;
        int $i4;

        l0 := @parameter0: double;

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(l0);

        $l1 = $l0 & 9218868437227405312L;

        $l2 = $l1 >> 52;

        $l3 = $l2 - 1023L;

        $i4 = (int) $l3;

        return $i4;
    }

    public static float min(float, float)
    {
        float l0, l1, $f0;
        long $l0, $l5;
        byte $b1, $b2, $b3, $b6, $b7;
        int $i4;

        l0 := @parameter0: float;

        l1 := @parameter1: float;

        $b1 = l0 cmpl l0;

        if $b1 == 0 goto label1;

        return l0;

     label1:
        $b2 = l0 cmpl 0.0F;

        if $b2 != 0 goto label2;

        $b3 = 1;

        goto label2;

     label2:
        $b7 = l0 cmpg 2.14748365E9F;

        if $b7 > 0 goto label3;

        $f0 = l0;

        goto label4;

     label3:
        $f0 = 2.14748365E9F;

     label4:
        return $f0;
    }

    public static double abs(double)
    {
        double l0, $d0;
        byte $b0;

        l0 := @parameter0: double;

        $b0 = l0 cmpg 0.0;

        if $b0 > 0 goto label1;

        $d0 = 0.0 - l0;

        goto label2;

     label1:
        $d0 = l0;

     label2:
        return $d0;
    }

    public static long abs(long)
    {
        long l0, $l1;
        byte $b0;

        l0 := @parameter0: long;

        $b0 = l0 cmp 0L;

        if $b0 >= 0 goto label1;

        $l1 = neg l0;

        goto label2;

     label1:
        $l1 = l0;

     label2:
        return $l1;
    }

    public static double scalb(double, int)
    {
        int l8, l2#2, l2#13, $i0, $i1, $i2, l4#35, l2#44;
        double l0#1, l6#8, l6#17, $d0, l0#40;
        boolean l4#4, l5#6;
        short l5#15;

        l0#1 := @parameter0: double;

        l2#2 := @parameter1: int;

        goto label1;

     label1:
        l2#13 = staticinvoke <java.lang.Math: int min(int,int)>(54, 2099);

        l5#15 = 512;

        l6#17 = <java.lang.Math: double twoToTheDoubleScaleUp>;

        $i0 = l2#13 >> 8;

        l8 = $i0 >>> 23;

        $i1 = l2#13 + l8;

        $i2 = $i1 & 511;

        l4#35 = $i2 - l8;

        $d0 = staticinvoke <java.lang.Math: double powerOfTwoD(int)>(l4#35);

        l0#40 = 1.0 * $d0;

        l2#44 = l2#13 - l4#35;

     label2:
        if l2#44 == 0 goto label3;

        l0#40 = l0#40 * l6#17;

        l2#44 = l2#44 - l5#15;

        goto label2;

     label3:
        return l0#40;
    }

    public static double copySign(double, double)
    {
        double l0, l2, $d0;
        long $l0, $l1, $l2, $l3, $l4;

        l0 := @parameter0: double;

        l2 := @parameter1: double;

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(l2);

        $l1 = $l0 & -9223372036854775808L;

        $l2 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(1.0);

        $l3 = $l2 & 9223372036854775807L;

        $l4 = $l1 | $l3;

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l4);

        return $d0;
    }


