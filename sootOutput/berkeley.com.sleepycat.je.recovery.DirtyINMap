    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "berkeley/com/sleepycat/je/recovery/DirtyINMap";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <berkeley.com.sleepycat.je.recovery.DirtyINMap: boolean $assertionsDisabled> = $z1;

        return;
    }

    void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl)
    {
        berkeley.com.sleepycat.je.recovery.DirtyINMap this;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        java.util.TreeMap $r0;
        java.util.HashSet $r1;
        java.util.IdentityHashMap $r2;
        berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState $r3;

        this := @this: berkeley.com.sleepycat.je.recovery.DirtyINMap;

        envImpl := @parameter0: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl> = envImpl;

        $r0 = new java.util.TreeMap;

        specialinvoke $r0.<java.util.TreeMap: void <init>()>();

        this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: java.util.SortedMap levelMap> = $r0;

        this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: int numEntries> = 0;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: java.util.Set mapLNsToFlush> = $r1;

        $r2 = new java.util.IdentityHashMap;

        specialinvoke $r2.<java.util.IdentityHashMap: void <init>()>();

        this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: java.util.Map highestFlushLevels> = $r2;

        $r3 = <berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState: berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState NONE>;

        this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState ckptState> = $r3;

        return;
    }

    synchronized void reset()
    {
        berkeley.com.sleepycat.je.recovery.DirtyINMap this;
        java.util.SortedMap $r0;
        java.util.Set $r1;
        java.util.Map $r2;
        berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState $r3;

        this := @this: berkeley.com.sleepycat.je.recovery.DirtyINMap;

        specialinvoke this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: void removeCostFromMemoryBudget()>();

        $r0 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: java.util.SortedMap levelMap>;

        interfaceinvoke $r0.<java.util.SortedMap: void clear()>();

        $r1 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: java.util.Set mapLNsToFlush>;

        interfaceinvoke $r1.<java.util.Set: void clear()>();

        $r2 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: java.util.Map highestFlushLevels>;

        interfaceinvoke $r2.<java.util.Map: void clear()>();

        this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: int numEntries> = 0;

        $r3 = <berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState: berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState NONE>;

        this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState ckptState> = $r3;

        return;
    }

    private synchronized void removeCostFromMemoryBudget()
    {
        berkeley.com.sleepycat.je.recovery.DirtyINMap this;
        berkeley.com.sleepycat.je.dbi.MemoryBudget mb;
        long cost, $l1, $l3, $l4;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0;
        int $i0, $i2;

        this := @this: berkeley.com.sleepycat.je.recovery.DirtyINMap;

        $r0 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        mb = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.MemoryBudget getMemoryBudget()>();

        $i0 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: int numEntries>;

        $l1 = (long) $i0;

        $i2 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: int CHECKPOINT_REFERENCE_SIZE>;

        $l3 = (long) $i2;

        cost = $l1 * $l3;

        $l4 = 0L - cost;

        virtualinvoke mb.<berkeley.com.sleepycat.je.dbi.MemoryBudget: void updateAdminMemoryUsage(long)>($l4);

        return;
    }

    void flushRoot(long)
    {
        berkeley.com.sleepycat.je.recovery.DirtyINMap this;
        long checkpointStart;
        berkeley.com.sleepycat.je.dbi.DbTree dbTree;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0, $r5;
        berkeley.com.sleepycat.je.dbi.DatabaseId $r1, $r3;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r2, $r4;
        boolean $z0, $z1;

        this := @this: berkeley.com.sleepycat.je.recovery.DirtyINMap;

        checkpointStart := @parameter0: long;

        $r0 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        dbTree = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.DbTree getDbTree()>();

        $r1 = <berkeley.com.sleepycat.je.dbi.DbTree: berkeley.com.sleepycat.je.dbi.DatabaseId ID_DB_ID>;

        $r2 = virtualinvoke dbTree.<berkeley.com.sleepycat.je.dbi.DbTree: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDb(berkeley.com.sleepycat.je.dbi.DatabaseId)>($r1);

        $z0 = virtualinvoke $r2.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isCheckpointNeeded()>();

        if $z0 != 0 goto label1;

        $r3 = <berkeley.com.sleepycat.je.dbi.DbTree: berkeley.com.sleepycat.je.dbi.DatabaseId NAME_DB_ID>;

        $r4 = virtualinvoke dbTree.<berkeley.com.sleepycat.je.dbi.DbTree: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDb(berkeley.com.sleepycat.je.dbi.DatabaseId)>($r3);

        $z1 = virtualinvoke $r4.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isCheckpointNeeded()>();

        if $z1 == 0 goto label2;

     label1:
        $r5 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r5.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void logMapTreeRoot(long)>(checkpointStart);

     label2:
        return;
    }

    void flushMapLNs(long)
    {
        berkeley.com.sleepycat.je.recovery.DirtyINMap this, l4;
        long checkpointStart;
        berkeley.com.sleepycat.je.dbi.DbTree dbTree;
        berkeley.com.sleepycat.je.dbi.DatabaseId dbId;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;
        java.lang.Throwable l8, $r8, l5#22, $r11;
        boolean $z0, $z1, $z2, $z3, $z4;
        berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState $r1, $r2;
        java.lang.AssertionError $r3;
        java.util.Set $r4, $r6, $r7;
        java.util.HashSet mapLNsCopy#13, $r5;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r9;
        java.util.Iterator l5#31;
        java.lang.Object $r10;

        this := @this: berkeley.com.sleepycat.je.recovery.DirtyINMap;

        checkpointStart := @parameter0: long;

        l4 = this;

        entermonitor this;

     label01:
        $z0 = <berkeley.com.sleepycat.je.recovery.DirtyINMap: boolean $assertionsDisabled>;

        if $z0 != 0 goto label02;

        $r1 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState ckptState>;

        $r2 = <berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState: berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState DIRTY_MAP_INCOMPLETE>;

        if $r1 != $r2 goto label02;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label02:
        $r4 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: java.util.Set mapLNsToFlush>;

        $z1 = interfaceinvoke $r4.<java.util.Set: boolean isEmpty()>();

        if $z1 == 0 goto label03;

        mapLNsCopy#13 = null;

        goto label04;

     label03:
        $r5 = new java.util.HashSet;

        $r6 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: java.util.Set mapLNsToFlush>;

        specialinvoke $r5.<java.util.HashSet: void <init>(java.util.Collection)>($r6);

        mapLNsCopy#13 = $r5;

        $r7 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: java.util.Set mapLNsToFlush>;

        interfaceinvoke $r7.<java.util.Set: void clear()>();

     label04:
        exitmonitor l4;

     label05:
        goto label09;

     label06:
        $r8 := @caughtexception;

     label07:
        l5#22 = $r8;

        exitmonitor l4;

     label08:
        throw l5#22;

     label09:
        if mapLNsCopy#13 == null goto label17;

        $r9 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        dbTree = virtualinvoke $r9.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.DbTree getDbTree()>();

        l5#31 = interfaceinvoke mapLNsCopy#13.<java.util.Set: java.util.Iterator iterator()>();

     label10:
        $z2 = interfaceinvoke l5#31.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label17;

        $r10 = interfaceinvoke l5#31.<java.util.Iterator: java.lang.Object next()>();

        dbId = (berkeley.com.sleepycat.je.dbi.DatabaseId) $r10;

        db = virtualinvoke dbTree.<berkeley.com.sleepycat.je.dbi.DbTree: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDb(berkeley.com.sleepycat.je.dbi.DatabaseId)>(dbId);

     label11:
        if db == null goto label12;

        $z3 = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isDeleted()>();

        if $z3 != 0 goto label12;

        $z4 = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isCheckpointNeeded()>();

        if $z4 == 0 goto label12;

        virtualinvoke dbTree.<berkeley.com.sleepycat.je.dbi.DbTree: void modifyDbRoot(berkeley.com.sleepycat.je.dbi.DatabaseImpl,long,boolean)>(db, checkpointStart, 1);

     label12:
        virtualinvoke dbTree.<berkeley.com.sleepycat.je.dbi.DbTree: void releaseDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(db);

        goto label16;

     label13:
        $r11 := @caughtexception;

     label14:
        l8 = $r11;

     label15:
        virtualinvoke dbTree.<berkeley.com.sleepycat.je.dbi.DbTree: void releaseDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(db);

        throw l8;

     label16:
        goto label10;

     label17:
        return;

        catch java.lang.Throwable from label01 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    synchronized int getNumLevels()
    {
        berkeley.com.sleepycat.je.recovery.DirtyINMap this;
        java.util.SortedMap $r0;
        int $i0;

        this := @this: berkeley.com.sleepycat.je.recovery.DirtyINMap;

        $r0 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: java.util.SortedMap levelMap>;

        $i0 = interfaceinvoke $r0.<java.util.SortedMap: int size()>();

        return $i0;
    }

    synchronized java.lang.Integer getLowestLevelSet()
    {
        berkeley.com.sleepycat.je.recovery.DirtyINMap this;
        java.util.SortedMap $r0;
        java.lang.Object $r1;
        java.lang.Integer $r2;

        this := @this: berkeley.com.sleepycat.je.recovery.DirtyINMap;

        $r0 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: java.util.SortedMap levelMap>;

        $r1 = interfaceinvoke $r0.<java.util.SortedMap: java.lang.Object firstKey()>();

        $r2 = (java.lang.Integer) $r1;

        return $r2;
    }

    synchronized berkeley.com.sleepycat.je.recovery.Checkpointer$CheckpointReference removeNextNode(java.lang.Integer)
    {
        berkeley.com.sleepycat.je.recovery.DirtyINMap this;
        java.lang.Integer level;
        berkeley.com.sleepycat.je.utilint.Pair pairOfMaps;
        java.util.Iterator iter;
        berkeley.com.sleepycat.je.recovery.Checkpointer$CheckpointReference ref;
        java.util.SortedMap $r0;
        java.lang.Object $r1, $r2, $r4, $r5, $r7, $r10, $r12;
        java.util.Map $r3, map#15, $r6;
        boolean $z0, $z1, $z2, $z3;
        java.util.Set $r8;
        java.lang.AssertionError $r9;
        java.util.Map$Entry $r11;

        this := @this: berkeley.com.sleepycat.je.recovery.DirtyINMap;

        level := @parameter0: java.lang.Integer;

        $r0 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: java.util.SortedMap levelMap>;

        $r1 = interfaceinvoke $r0.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>(level);

        pairOfMaps = (berkeley.com.sleepycat.je.utilint.Pair) $r1;

        if pairOfMaps != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke pairOfMaps.<berkeley.com.sleepycat.je.utilint.Pair: java.lang.Object first()>();

        $r3 = (java.util.Map) $r2;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r4 = virtualinvoke pairOfMaps.<berkeley.com.sleepycat.je.utilint.Pair: java.lang.Object first()>();

        map#15 = (java.util.Map) $r4;

        goto label4;

     label2:
        $r5 = virtualinvoke pairOfMaps.<berkeley.com.sleepycat.je.utilint.Pair: java.lang.Object second()>();

        $r6 = (java.util.Map) $r5;

        $z1 = interfaceinvoke $r6.<java.util.Map: boolean isEmpty()>();

        if $z1 != 0 goto label3;

        $r7 = virtualinvoke pairOfMaps.<berkeley.com.sleepycat.je.utilint.Pair: java.lang.Object second()>();

        map#15 = (java.util.Map) $r7;

        goto label4;

     label3:
        return null;

     label4:
        $r8 = interfaceinvoke map#15.<java.util.Map: java.util.Set entrySet()>();

        iter = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

        $z2 = <berkeley.com.sleepycat.je.recovery.DirtyINMap: boolean $assertionsDisabled>;

        if $z2 != 0 goto label5;

        $z3 = interfaceinvoke iter.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label5;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label5:
        $r10 = interfaceinvoke iter.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (java.util.Map$Entry) $r10;

        $r12 = interfaceinvoke $r11.<java.util.Map$Entry: java.lang.Object getValue()>();

        ref = (berkeley.com.sleepycat.je.recovery.Checkpointer$CheckpointReference) $r12;

        interfaceinvoke iter.<java.util.Iterator: void remove()>();

        return ref;
    }

    synchronized int getHighestFlushLevel(berkeley.com.sleepycat.je.dbi.DatabaseImpl)
    {
        berkeley.com.sleepycat.je.recovery.DirtyINMap this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;
        java.lang.Integer val;
        boolean $z0;
        berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState $r0, $r1;
        java.lang.AssertionError $r2;
        java.util.Map $r3;
        java.lang.Object $r4;
        int $i0;

        this := @this: berkeley.com.sleepycat.je.recovery.DirtyINMap;

        db := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        $z0 = <berkeley.com.sleepycat.je.recovery.DirtyINMap: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r0 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState ckptState>;

        $r1 = <berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState: berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState DIRTY_MAP_INCOMPLETE>;

        if $r0 != $r1 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $r3 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: java.util.Map highestFlushLevels>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(db);

        val = (java.lang.Integer) $r4;

        if val == null goto label2;

        $i0 = virtualinvoke val.<java.lang.Integer: int intValue()>();

        goto label3;

     label2:
        $i0 = -1;

     label3:
        return $i0;
    }

    synchronized void removeLevel(java.lang.Integer)
    {
        berkeley.com.sleepycat.je.recovery.DirtyINMap this;
        java.lang.Integer level;
        java.util.SortedMap $r0;

        this := @this: berkeley.com.sleepycat.je.recovery.DirtyINMap;

        level := @parameter0: java.lang.Integer;

        $r0 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: java.util.SortedMap levelMap>;

        interfaceinvoke $r0.<java.util.SortedMap: java.lang.Object remove(java.lang.Object)>(level);

        return;
    }

    synchronized void addIN(berkeley.com.sleepycat.je.tree.IN, int, boolean, boolean)
    {
        berkeley.com.sleepycat.je.recovery.DirtyINMap this;
        berkeley.com.sleepycat.je.tree.IN in;
        int index, $i0, $i1, $i2, $i3, $i6, $i7, $i8;
        boolean updateFlushLevels, updateMemoryBudget, isRoot#15, isBin#21, $z0, added#82, $z1, $z2, $z3, $z4;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;
        berkeley.com.sleepycat.je.recovery.Checkpointer$CheckpointReference ref, tmp$1481273805;
        berkeley.com.sleepycat.je.dbi.MemoryBudget mb;
        java.lang.Integer level#7;
        long lsn#11, nodeId#13, $l9;
        byte[] idKey#19;
        java.util.SortedMap $r0, $r7;
        java.lang.Object $r1, $r2, lsnMap#45, $r3, nodeMap#49, $r12, $r16;
        berkeley.com.sleepycat.je.utilint.Pair pairOfMaps#40, pairOfMaps#58, tmp$1461278895;
        berkeley.com.sleepycat.je.dbi.DatabaseId $r10;
        byte $b4, $b5;
        java.lang.Long $r11, $r15;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r18;
        java.util.TreeMap tmp$911468400, tmp$1200771074;
        java.lang.AssertionError tmp$2032976245, tmp$379281106;
        java.util.Map tmp$1033916376, tmp$1802817892;

        this := @this: berkeley.com.sleepycat.je.recovery.DirtyINMap;

        in := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        index := @parameter1: int;

        updateFlushLevels := @parameter2: boolean;

        updateMemoryBudget := @parameter3: boolean;

        if index < 0 goto label01;

        $i0 = virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: int getLevel()>();

        $i1 = $i0 - 1;

        level#7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        lsn#11 = virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: long getLsn(int)>(index);

        nodeId#13 = -1L;

        isRoot#15 = 0;

        idKey#19 = virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: byte[] getKey(int)>(index);

        isBin#21 = 1;

        goto label02;

     label01:
        $i2 = virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: int getLevel()>();

        level#7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        lsn#11 = virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: long getLastLoggedLsn()>();

        nodeId#13 = virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: long getNodeId()>();

        isRoot#15 = virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: boolean isRoot()>();

        idKey#19 = virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: byte[] getIdentifierKey()>();

        isBin#21 = virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

     label02:
        $r0 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: java.util.SortedMap levelMap>;

        $r1 = interfaceinvoke $r0.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>(level#7);

        pairOfMaps#40 = (berkeley.com.sleepycat.je.utilint.Pair) $r1;

        if pairOfMaps#40 == null goto label03;

        $r2 = virtualinvoke pairOfMaps#40.<berkeley.com.sleepycat.je.utilint.Pair: java.lang.Object first()>();

        lsnMap#45 = (java.util.Map) $r2;

        $r3 = virtualinvoke pairOfMaps#40.<berkeley.com.sleepycat.je.utilint.Pair: java.lang.Object second()>();

        nodeMap#49 = (java.util.Map) $r3;

        goto label04;

     label03:
        tmp$911468400 = new java.util.TreeMap;

        specialinvoke tmp$911468400.<java.util.TreeMap: void <init>()>();

        lsnMap#45 = tmp$911468400;

        tmp$1200771074 = new java.util.TreeMap;

        specialinvoke tmp$1200771074.<java.util.TreeMap: void <init>()>();

        nodeMap#49 = tmp$1200771074;

        tmp$1461278895 = new berkeley.com.sleepycat.je.utilint.Pair;

        specialinvoke tmp$1461278895.<berkeley.com.sleepycat.je.utilint.Pair: void <init>(java.lang.Object,java.lang.Object)>(lsnMap#45, nodeMap#49);

        pairOfMaps#58 = tmp$1461278895;

        $r7 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: java.util.SortedMap levelMap>;

        interfaceinvoke $r7.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(level#7, pairOfMaps#58);

     label04:
        db = virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        tmp$1481273805 = new berkeley.com.sleepycat.je.recovery.Checkpointer$CheckpointReference;

        $r10 = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.DatabaseId getId()>();

        $i3 = virtualinvoke level#7.<java.lang.Integer: int intValue()>();

        specialinvoke tmp$1481273805.<berkeley.com.sleepycat.je.recovery.Checkpointer$CheckpointReference: void <init>(berkeley.com.sleepycat.je.dbi.DatabaseId,long,int,boolean,byte[],long)>($r10, nodeId#13, $i3, isRoot#15, idKey#19, lsn#11);

        ref = tmp$1481273805;

        $b4 = lsn#11 cmp -1L;

        if $b4 == 0 goto label07;

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(lsn#11);

        tmp$1033916376 = (java.util.Map) lsnMap#45;

        $r12 = interfaceinvoke tmp$1033916376.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, ref);

        if $r12 != null goto label05;

        $z0 = 1;

        goto label06;

     label05:
        $z0 = 0;

     label06:
        added#82 = $z0;

        goto label12;

     label07:
        $z1 = <berkeley.com.sleepycat.je.recovery.DirtyINMap: boolean $assertionsDisabled>;

        if $z1 != 0 goto label08;

        $b5 = nodeId#13 cmp 0L;

        if $b5 >= 0 goto label08;

        tmp$2032976245 = new java.lang.AssertionError;

        specialinvoke tmp$2032976245.<java.lang.AssertionError: void <init>()>();

        throw tmp$2032976245;

     label08:
        $z2 = <berkeley.com.sleepycat.je.recovery.DirtyINMap: boolean $assertionsDisabled>;

        if $z2 != 0 goto label09;

        $z3 = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isDeferredWriteMode()>();

        if $z3 != 0 goto label09;

        tmp$379281106 = new java.lang.AssertionError;

        specialinvoke tmp$379281106.<java.lang.AssertionError: void <init>()>();

        throw tmp$379281106;

     label09:
        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(nodeId#13);

        tmp$1802817892 = (java.util.Map) nodeMap#49;

        $r16 = interfaceinvoke tmp$1802817892.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, ref);

        if $r16 != null goto label10;

        $z4 = 1;

        goto label11;

     label10:
        $z4 = 0;

     label11:
        added#82 = $z4;

     label12:
        if added#82 != 0 goto label13;

        return;

     label13:
        $i6 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: int numEntries>;

        $i7 = $i6 + 1;

        this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: int numEntries> = $i7;

        if updateFlushLevels == 0 goto label14;

        specialinvoke this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: void updateFlushLevels(java.lang.Integer,berkeley.com.sleepycat.je.dbi.DatabaseImpl,boolean,boolean)>(level#7, db, isBin#21, isRoot#15);

     label14:
        if updateMemoryBudget == 0 goto label15;

        $r18 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        mb = virtualinvoke $r18.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.MemoryBudget getMemoryBudget()>();

        $i8 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: int CHECKPOINT_REFERENCE_SIZE>;

        $l9 = (long) $i8;

        virtualinvoke mb.<berkeley.com.sleepycat.je.dbi.MemoryBudget: void updateAdminMemoryUsage(long)>($l9);

     label15:
        return;
    }

    synchronized berkeley.com.sleepycat.je.recovery.Checkpointer$CheckpointReference removeNode(int, long, long)
    {
        berkeley.com.sleepycat.je.recovery.DirtyINMap this;
        int level;
        long lsn, nodeId;
        berkeley.com.sleepycat.je.utilint.Pair pairOfMaps;
        java.util.Map lsnMap, nodeMap;
        java.util.SortedMap $r0;
        java.lang.Integer $r1;
        java.lang.Object $r2, $r3, $r4, $r6, $r8;
        byte $b0, $b1;
        java.lang.Long $r5, $r7;
        berkeley.com.sleepycat.je.recovery.Checkpointer$CheckpointReference ref#23, ref#34;

        this := @this: berkeley.com.sleepycat.je.recovery.DirtyINMap;

        level := @parameter0: int;

        lsn := @parameter1: long;

        nodeId := @parameter2: long;

        $r0 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: java.util.SortedMap levelMap>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(level);

        $r2 = interfaceinvoke $r0.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>($r1);

        pairOfMaps = (berkeley.com.sleepycat.je.utilint.Pair) $r2;

        if pairOfMaps != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke pairOfMaps.<berkeley.com.sleepycat.je.utilint.Pair: java.lang.Object first()>();

        lsnMap = (java.util.Map) $r3;

        $r4 = virtualinvoke pairOfMaps.<berkeley.com.sleepycat.je.utilint.Pair: java.lang.Object second()>();

        nodeMap = (java.util.Map) $r4;

        $b0 = lsn cmp -1L;

        if $b0 == 0 goto label2;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(lsn);

        $r6 = interfaceinvoke lsnMap.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r5);

        ref#23 = (berkeley.com.sleepycat.je.recovery.Checkpointer$CheckpointReference) $r6;

        if ref#23 == null goto label2;

        return ref#23;

     label2:
        $b1 = nodeId cmp 0L;

        if $b1 < 0 goto label3;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(nodeId);

        $r8 = interfaceinvoke nodeMap.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r7);

        ref#34 = (berkeley.com.sleepycat.je.recovery.Checkpointer$CheckpointReference) $r8;

        if ref#34 == null goto label3;

        return ref#34;

     label3:
        return null;
    }

    private void updateFlushLevels(java.lang.Integer, berkeley.com.sleepycat.je.dbi.DatabaseImpl, boolean, boolean)
    {
        berkeley.com.sleepycat.je.recovery.DirtyINMap this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;
        boolean isBIN, isRoot, $z0, $z1, $z2, $z3;
        java.lang.Integer highestLevelSeen, level#1;
        java.util.Map $r0, $r1, $r3, $r5;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r4;

        this := @this: berkeley.com.sleepycat.je.recovery.DirtyINMap;

        level#1 := @parameter0: java.lang.Integer;

        db := @parameter1: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        isBIN := @parameter2: boolean;

        isRoot := @parameter3: boolean;

        $z0 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: boolean ckptFlushAll>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isDurableDeferredWrite()>();

        if $z1 == 0 goto label2;

     label1:
        $r0 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: java.util.Map highestFlushLevels>;

        $z2 = interfaceinvoke $r0.<java.util.Map: boolean containsKey(java.lang.Object)>(db);

        if $z2 != 0 goto label6;

        $r1 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: java.util.Map highestFlushLevels>;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(db, null);

        goto label6;

     label2:
        $z3 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: boolean ckptFlushExtraLevel>;

        if $z3 != 0 goto label3;

        if isBIN == 0 goto label4;

     label3:
        if isRoot != 0 goto label4;

        $i0 = virtualinvoke level#1.<java.lang.Integer: int intValue()>();

        $i1 = $i0 + 1;

        level#1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

     label4:
        $r3 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: java.util.Map highestFlushLevels>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(db);

        highestLevelSeen = (java.lang.Integer) $r4;

        if highestLevelSeen == null goto label5;

        $i2 = virtualinvoke level#1.<java.lang.Integer: int intValue()>();

        $i3 = virtualinvoke highestLevelSeen.<java.lang.Integer: int intValue()>();

        if $i2 <= $i3 goto label6;

     label5:
        $r5 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: java.util.Map highestFlushLevels>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(db, level#1);

     label6:
        return;
    }

    void selectDirtyINsForCheckpoint()
    {
        berkeley.com.sleepycat.je.recovery.DirtyINMap this, l4, l5#103, l5#126;
        berkeley.com.sleepycat.je.dbi.INList inMemINs;
        java.util.Iterator l3, l5#63, l5#87, l6#107;
        berkeley.com.sleepycat.je.tree.IN in;
        java.util.HashMap maxFlushDbs, $r9;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db, $r22;
        java.lang.Throwable l7, l8, l9, $r6, l5#40, $r8, l6#51, $r17, $r32, $r35;
        berkeley.com.sleepycat.je.dbi.DbTree dbTree;
        java.util.Map$Entry entry, entry;
        boolean $z0, completed#12, $z1, $z2, $z3, $z4, completed#47, $z6, $z7, $z8;
        berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState $r0, $r1, $r34;
        java.lang.AssertionError $r2;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r3, $r18;
        java.lang.Object $r4, $r13, $r15, $r20, $r21, $r27, $r29, $r30;
        berkeley.com.sleepycat.je.CacheMode $r5;
        berkeley.com.sleepycat.je.utilint.TestHook $r7;
        java.util.Map $r11, $r14, $r28;
        java.util.Set $r12, $r19, $r26;
        int $i0;
        java.lang.Integer $r23;

        this := @this: berkeley.com.sleepycat.je.recovery.DirtyINMap;

        $z0 = <berkeley.com.sleepycat.je.recovery.DirtyINMap: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $r0 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState ckptState>;

        $r1 = <berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState: berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState DIRTY_MAP_INCOMPLETE>;

        if $r0 == $r1 goto label01;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label01:
        $r3 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        inMemINs = virtualinvoke $r3.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.INList getInMemoryINs()>();

        virtualinvoke inMemINs.<berkeley.com.sleepycat.je.dbi.INList: void memRecalcBegin()>();

        completed#12 = 0;

     label02:
        l3 = virtualinvoke inMemINs.<berkeley.com.sleepycat.je.dbi.INList: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label13;

        $r4 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        in = (berkeley.com.sleepycat.je.tree.IN) $r4;

        $r5 = <berkeley.com.sleepycat.je.CacheMode: berkeley.com.sleepycat.je.CacheMode UNCHANGED>;

        virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: void latchShared(berkeley.com.sleepycat.je.CacheMode)>($r5);

     label04:
        $z2 = virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: boolean getInListResident()>();

        if $z2 != 0 goto label06;

     label05:
        virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        goto label03;

     label06:
        virtualinvoke inMemINs.<berkeley.com.sleepycat.je.dbi.INList: void memRecalcIterate(berkeley.com.sleepycat.je.tree.IN)>(in);

        $z3 = virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: boolean getDirty()>();

        if $z3 == 0 goto label07;

        $z4 = virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z4 != 0 goto label07;

        virtualinvoke this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: void selectForCheckpoint(berkeley.com.sleepycat.je.tree.IN,int)>(in, -1);

     label07:
        specialinvoke this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: void selectDirtyBINChildrenForCheckpoint(berkeley.com.sleepycat.je.tree.IN)>(in);

        specialinvoke this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: void saveMapLNsToFlush(berkeley.com.sleepycat.je.tree.IN)>(in);

     label08:
        virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        goto label12;

     label09:
        $r6 := @caughtexception;

     label10:
        l5#40 = $r6;

     label11:
        virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        throw l5#40;

     label12:
        $r7 = <berkeley.com.sleepycat.je.recovery.Checkpointer: berkeley.com.sleepycat.je.utilint.TestHook examineINForCheckpointHook>;

        staticinvoke <berkeley.com.sleepycat.je.utilint.TestHookExecute: boolean doHookIfSet(berkeley.com.sleepycat.je.utilint.TestHook,java.lang.Object)>($r7, in);

        goto label03;

     label13:
        completed#47 = 1;

     label14:
        virtualinvoke inMemINs.<berkeley.com.sleepycat.je.dbi.INList: void memRecalcEnd(boolean)>(completed#47);

        goto label18;

     label15:
        $r8 := @caughtexception;

     label16:
        l6#51 = $r8;

     label17:
        virtualinvoke inMemINs.<berkeley.com.sleepycat.je.dbi.INList: void memRecalcEnd(boolean)>(completed#12);

        throw l6#51;

     label18:
        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        maxFlushDbs = $r9;

        l4 = this;

        entermonitor this;

     label19:
        $r11 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: java.util.Map highestFlushLevels>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.util.Set keySet()>();

        l5#63 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

     label20:
        $z6 = interfaceinvoke l5#63.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label22;

        $r13 = interfaceinvoke l5#63.<java.util.Iterator: java.lang.Object next()>();

        db = (berkeley.com.sleepycat.je.dbi.DatabaseImpl) $r13;

        $r14 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: java.util.Map highestFlushLevels>;

        $r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>(db);

        if $r15 != null goto label21;

        interfaceinvoke maxFlushDbs.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(db, null);

     label21:
        goto label20;

     label22:
        exitmonitor l4;

     label23:
        goto label27;

     label24:
        $r17 := @caughtexception;

     label25:
        l7 = $r17;

        exitmonitor l4;

     label26:
        throw l7;

     label27:
        $r18 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        dbTree = virtualinvoke $r18.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.DbTree getDbTree()>();

        $r19 = interfaceinvoke maxFlushDbs.<java.util.Map: java.util.Set entrySet()>();

        l5#87 = interfaceinvoke $r19.<java.util.Set: java.util.Iterator iterator()>();

     label28:
        $z7 = interfaceinvoke l5#87.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label29;

        $r20 = interfaceinvoke l5#87.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $r20;

        $r21 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r22 = (berkeley.com.sleepycat.je.dbi.DatabaseImpl) $r21;

        $i0 = virtualinvoke dbTree.<berkeley.com.sleepycat.je.dbi.DbTree: int getHighestLevel(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>($r22);

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>($r23);

        goto label28;

     label29:
        l5#103 = this;

        entermonitor this;

     label30:
        $r26 = interfaceinvoke maxFlushDbs.<java.util.Map: java.util.Set entrySet()>();

        l6#107 = interfaceinvoke $r26.<java.util.Set: java.util.Iterator iterator()>();

     label31:
        $z8 = interfaceinvoke l6#107.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label32;

        $r27 = interfaceinvoke l6#107.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $r27;

        $r28 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: java.util.Map highestFlushLevels>;

        $r29 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r30 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r28.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r29, $r30);

        goto label31;

     label32:
        exitmonitor l5#103;

     label33:
        goto label37;

     label34:
        $r32 := @caughtexception;

     label35:
        l8 = $r32;

        exitmonitor l5#103;

     label36:
        throw l8;

     label37:
        l5#126 = this;

        entermonitor this;

     label38:
        specialinvoke this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: void addCostToMemoryBudget()>();

        $r34 = <berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState: berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState DIRTY_MAP_COMPLETE>;

        this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState ckptState> = $r34;

        exitmonitor l5#126;

     label39:
        goto label43;

     label40:
        $r35 := @caughtexception;

     label41:
        l9 = $r35;

        exitmonitor l5#126;

     label42:
        throw l9;

     label43:
        return;

        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label02 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
        catch java.lang.Throwable from label19 to label23 with label24;
        catch java.lang.Throwable from label25 to label26 with label24;
        catch java.lang.Throwable from label30 to label33 with label34;
        catch java.lang.Throwable from label35 to label36 with label34;
        catch java.lang.Throwable from label38 to label39 with label40;
        catch java.lang.Throwable from label41 to label42 with label40;
    }

    synchronized void selectForCheckpoint(berkeley.com.sleepycat.je.tree.IN, int)
    {
        berkeley.com.sleepycat.je.recovery.DirtyINMap this;
        berkeley.com.sleepycat.je.tree.IN in;
        int index;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;
        berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState $r0, $r1;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.recovery.DirtyINMap;

        in := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        index := @parameter1: int;

        $r0 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState ckptState>;

        $r1 = <berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState: berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState DIRTY_MAP_INCOMPLETE>;

        if $r0 == $r1 goto label1;

        return;

     label1:
        db = virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        $z0 = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isTemporary()>();

        if $z0 == 0 goto label2;

        return;

     label2:
        virtualinvoke this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: void addIN(berkeley.com.sleepycat.je.tree.IN,int,boolean,boolean)>(in, index, 1, 0);

        return;
    }

    private void selectDirtyBINChildrenForCheckpoint(berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.recovery.DirtyINMap this;
        berkeley.com.sleepycat.je.tree.IN in, bin;
        boolean latchBinHere, $z0, $z1, $z2, $z3;
        java.lang.Throwable l5, $r2;
        int $i0, i#5, $i1;
        berkeley.com.sleepycat.je.tree.Node $r0;
        berkeley.com.sleepycat.je.CacheMode $r1;

        this := @this: berkeley.com.sleepycat.je.recovery.DirtyINMap;

        in := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        $i0 = virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: int getNormalizedLevel()>();

        if $i0 == 2 goto label01;

        return;

     label01:
        i#5 = 0;

     label02:
        $i1 = virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: int getNEntries()>();

        if i#5 >= $i1 goto label14;

        $r0 = virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.Node getTarget(int)>(i#5);

        bin = (berkeley.com.sleepycat.je.tree.IN) $r0;

        if bin == null goto label12;

        $z0 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.IN: boolean isLatchOwner()>();

        if $z0 != 0 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        latchBinHere = $z1;

        if latchBinHere == 0 goto label05;

        $r1 = <berkeley.com.sleepycat.je.CacheMode: berkeley.com.sleepycat.je.CacheMode UNCHANGED>;

        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.IN: void latchShared(berkeley.com.sleepycat.je.CacheMode)>($r1);

     label05:
        $z2 = virtualinvoke bin.<berkeley.com.sleepycat.je.tree.IN: boolean getDirty()>();

        if $z2 == 0 goto label06;

        virtualinvoke this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: void selectForCheckpoint(berkeley.com.sleepycat.je.tree.IN,int)>(bin, -1);

     label06:
        if latchBinHere == 0 goto label11;

        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        goto label11;

     label07:
        $r2 := @caughtexception;

     label08:
        l5 = $r2;

     label09:
        if latchBinHere == 0 goto label10;

        virtualinvoke bin.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

     label10:
        throw l5;

     label11:
        goto label13;

     label12:
        $z3 = virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: boolean isOffHeapBINDirty(int)>(i#5);

        if $z3 == 0 goto label13;

        virtualinvoke this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: void selectForCheckpoint(berkeley.com.sleepycat.je.tree.IN,int)>(in, i#5);

     label13:
        i#5 = i#5 + 1;

        goto label02;

     label14:
        return;

        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    private synchronized void saveMapLNsToFlush(berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.recovery.DirtyINMap this;
        berkeley.com.sleepycat.je.tree.IN in;
        berkeley.com.sleepycat.je.tree.MapLN ln;
        boolean $z0, $z1, $z2;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r0, $r4, $r6;
        berkeley.com.sleepycat.je.dbi.DatabaseId $r1, $r2, $r7;
        int i#9, $i0;
        berkeley.com.sleepycat.je.tree.Node $r3;
        java.util.Set $r5;

        this := @this: berkeley.com.sleepycat.je.recovery.DirtyINMap;

        in := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        $z0 = virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: boolean isBIN()>();

        if $z0 == 0 goto label3;

        $r0 = virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.DatabaseId getId()>();

        $r2 = <berkeley.com.sleepycat.je.dbi.DbTree: berkeley.com.sleepycat.je.dbi.DatabaseId ID_DB_ID>;

        $z1 = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.DatabaseId: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label3;

        i#9 = 0;

     label1:
        $i0 = virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: int getNEntries()>();

        if i#9 >= $i0 goto label3;

        $r3 = virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.tree.Node getTarget(int)>(i#9);

        ln = (berkeley.com.sleepycat.je.tree.MapLN) $r3;

        if ln == null goto label2;

        $r4 = virtualinvoke ln.<berkeley.com.sleepycat.je.tree.MapLN: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        $z2 = virtualinvoke $r4.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isCheckpointNeeded()>();

        if $z2 == 0 goto label2;

        $r5 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: java.util.Set mapLNsToFlush>;

        $r6 = virtualinvoke ln.<berkeley.com.sleepycat.je.tree.MapLN: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        $r7 = virtualinvoke $r6.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.DatabaseId getId()>();

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>($r7);

     label2:
        i#9 = i#9 + 1;

        goto label1;

     label3:
        return;
    }

    private synchronized void addCostToMemoryBudget()
    {
        berkeley.com.sleepycat.je.recovery.DirtyINMap this;
        berkeley.com.sleepycat.je.dbi.MemoryBudget mb;
        long cost, $l1, $l3;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0;
        int $i0, $i2;

        this := @this: berkeley.com.sleepycat.je.recovery.DirtyINMap;

        $r0 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        mb = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.MemoryBudget getMemoryBudget()>();

        $i0 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: int numEntries>;

        $l1 = (long) $i0;

        $i2 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: int CHECKPOINT_REFERENCE_SIZE>;

        $l3 = (long) $i2;

        cost = $l1 * $l3;

        virtualinvoke mb.<berkeley.com.sleepycat.je.dbi.MemoryBudget: void updateAdminMemoryUsage(long)>(cost);

        return;
    }

    synchronized void beginCheckpoint(boolean, boolean)
    {
        berkeley.com.sleepycat.je.recovery.DirtyINMap this;
        boolean flushAll, flushExtraLevel, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.SortedMap $r0;
        java.lang.AssertionError $r1, $r3, $r5, $r6, $r9;
        java.util.Set $r2;
        java.util.Map $r4;
        int $i0;
        berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState $r7, $r8, $r10;

        this := @this: berkeley.com.sleepycat.je.recovery.DirtyINMap;

        flushAll := @parameter0: boolean;

        flushExtraLevel := @parameter1: boolean;

        $z0 = <berkeley.com.sleepycat.je.recovery.DirtyINMap: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r0 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: java.util.SortedMap levelMap>;

        $z1 = interfaceinvoke $r0.<java.util.SortedMap: boolean isEmpty()>();

        if $z1 != 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $z2 = <berkeley.com.sleepycat.je.recovery.DirtyINMap: boolean $assertionsDisabled>;

        if $z2 != 0 goto label2;

        $r2 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: java.util.Set mapLNsToFlush>;

        $z3 = interfaceinvoke $r2.<java.util.Set: boolean isEmpty()>();

        if $z3 != 0 goto label2;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        $z4 = <berkeley.com.sleepycat.je.recovery.DirtyINMap: boolean $assertionsDisabled>;

        if $z4 != 0 goto label3;

        $r4 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: java.util.Map highestFlushLevels>;

        $z5 = interfaceinvoke $r4.<java.util.Map: boolean isEmpty()>();

        if $z5 != 0 goto label3;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label3:
        $z6 = <berkeley.com.sleepycat.je.recovery.DirtyINMap: boolean $assertionsDisabled>;

        if $z6 != 0 goto label4;

        $i0 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: int numEntries>;

        if $i0 == 0 goto label4;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label4:
        $z7 = <berkeley.com.sleepycat.je.recovery.DirtyINMap: boolean $assertionsDisabled>;

        if $z7 != 0 goto label5;

        $r7 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState ckptState>;

        $r8 = <berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState: berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState NONE>;

        if $r7 == $r8 goto label5;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label5:
        $r10 = <berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState: berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState DIRTY_MAP_INCOMPLETE>;

        this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState ckptState> = $r10;

        this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: boolean ckptFlushAll> = flushAll;

        this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: boolean ckptFlushExtraLevel> = flushExtraLevel;

        return;
    }

    void selectDirtyINsForDbSync(berkeley.com.sleepycat.je.dbi.DatabaseImpl)
    {
        berkeley.com.sleepycat.je.recovery.DirtyINMap this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        berkeley.com.sleepycat.je.dbi.DatabaseId dbId, $r6;
        java.util.Iterator l3;
        berkeley.com.sleepycat.je.tree.IN in;
        java.lang.Throwable l5, $r8;
        boolean $z0, $z1, $z2, $z3, $z4;
        berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState $r0, $r1;
        java.lang.AssertionError $r2;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r3, $r10;
        berkeley.com.sleepycat.je.dbi.INList $r4;
        java.lang.Object $r5;
        berkeley.com.sleepycat.je.CacheMode $r7;
        java.util.Map $r9;
        berkeley.com.sleepycat.je.dbi.DbTree $r11;
        int $i0;
        java.lang.Integer $r12;

        this := @this: berkeley.com.sleepycat.je.recovery.DirtyINMap;

        dbImpl := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        $z0 = <berkeley.com.sleepycat.je.recovery.DirtyINMap: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r0 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState ckptState>;

        $r1 = <berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState: berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState NONE>;

        if $r0 == $r1 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        dbId = virtualinvoke dbImpl.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.DatabaseId getId()>();

        $r3 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r4 = virtualinvoke $r3.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.INList getInMemoryINs()>();

        l3 = virtualinvoke $r4.<berkeley.com.sleepycat.je.dbi.INList: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label9;

        $r5 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        in = (berkeley.com.sleepycat.je.tree.IN) $r5;

        $r6 = virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: berkeley.com.sleepycat.je.dbi.DatabaseId getDatabaseId()>();

        $z2 = virtualinvoke $r6.<berkeley.com.sleepycat.je.dbi.DatabaseId: boolean equals(java.lang.Object)>(dbId);

        if $z2 == 0 goto label8;

        $r7 = <berkeley.com.sleepycat.je.CacheMode: berkeley.com.sleepycat.je.CacheMode UNCHANGED>;

        virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: void latch(berkeley.com.sleepycat.je.CacheMode)>($r7);

     label3:
        $z3 = virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: boolean getInListResident()>();

        if $z3 == 0 goto label4;

        $z4 = virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: boolean getDirty()>();

        if $z4 == 0 goto label4;

        virtualinvoke this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: void addIN(berkeley.com.sleepycat.je.tree.IN,int,boolean,boolean)>(in, -1, 0, 0);

     label4:
        virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        goto label8;

     label5:
        $r8 := @caughtexception;

     label6:
        l5 = $r8;

     label7:
        virtualinvoke in.<berkeley.com.sleepycat.je.tree.IN: void releaseLatch()>();

        throw l5;

     label8:
        goto label2;

     label9:
        $r9 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: java.util.Map highestFlushLevels>;

        $r10 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r11 = virtualinvoke $r10.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.DbTree getDbTree()>();

        $i0 = virtualinvoke $r11.<berkeley.com.sleepycat.je.dbi.DbTree: int getHighestLevel(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(dbImpl);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(dbImpl, $r12);

        specialinvoke this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: void addCostToMemoryBudget()>();

        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    synchronized int getNumEntries()
    {
        berkeley.com.sleepycat.je.recovery.DirtyINMap this;
        int $i0;

        this := @this: berkeley.com.sleepycat.je.recovery.DirtyINMap;

        $i0 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: int numEntries>;

        return $i0;
    }

    synchronized berkeley.com.sleepycat.je.log.Provisional coordinateEvictionWithCheckpoint(berkeley.com.sleepycat.je.dbi.DatabaseImpl, int, berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.recovery.DirtyINMap this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;
        int targetLevel, $i0;
        berkeley.com.sleepycat.je.tree.IN parent;
        berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState $r0, $r1, $r3, $r4, $r6, $r7;
        boolean $z0;
        berkeley.com.sleepycat.je.log.Provisional $r2, $r5, $r8, $r9;

        this := @this: berkeley.com.sleepycat.je.recovery.DirtyINMap;

        db := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        targetLevel := @parameter1: int;

        parent := @parameter2: berkeley.com.sleepycat.je.tree.IN;

        $r0 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState ckptState>;

        $r1 = <berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState: berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState DIRTY_MAP_INCOMPLETE>;

        if $r0 != $r1 goto label1;

        if parent == null goto label1;

        virtualinvoke this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: void selectForCheckpoint(berkeley.com.sleepycat.je.tree.IN,int)>(parent, -1);

        specialinvoke this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: void saveMapLNsToFlush(berkeley.com.sleepycat.je.tree.IN)>(parent);

     label1:
        $z0 = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isDeferredWriteMode()>();

        if $z0 == 0 goto label2;

        $r2 = <berkeley.com.sleepycat.je.log.Provisional: berkeley.com.sleepycat.je.log.Provisional YES>;

        return $r2;

     label2:
        $r3 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState ckptState>;

        $r4 = <berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState: berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState DIRTY_MAP_INCOMPLETE>;

        if $r3 != $r4 goto label3;

        if parent == null goto label3;

        $r5 = <berkeley.com.sleepycat.je.log.Provisional: berkeley.com.sleepycat.je.log.Provisional YES>;

        return $r5;

     label3:
        $r6 = this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState ckptState>;

        $r7 = <berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState: berkeley.com.sleepycat.je.recovery.DirtyINMap$CkptState DIRTY_MAP_COMPLETE>;

        if $r6 != $r7 goto label4;

        $i0 = virtualinvoke this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: int getHighestFlushLevel(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(db);

        if targetLevel >= $i0 goto label4;

        $r8 = <berkeley.com.sleepycat.je.log.Provisional: berkeley.com.sleepycat.je.log.Provisional YES>;

        return $r8;

     label4:
        $r9 = <berkeley.com.sleepycat.je.log.Provisional: berkeley.com.sleepycat.je.log.Provisional NO>;

        return $r9;
    }

    void coordinateSplitWithCheckpoint(berkeley.com.sleepycat.je.tree.IN)
    {
        berkeley.com.sleepycat.je.recovery.DirtyINMap this;
        berkeley.com.sleepycat.je.tree.IN newSibling;
        boolean $z0, $z1;
        java.lang.AssertionError $r0;

        this := @this: berkeley.com.sleepycat.je.recovery.DirtyINMap;

        newSibling := @parameter0: berkeley.com.sleepycat.je.tree.IN;

        $z0 = <berkeley.com.sleepycat.je.recovery.DirtyINMap: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke newSibling.<berkeley.com.sleepycat.je.tree.IN: boolean isLatchExclusiveOwner()>();

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        specialinvoke this.<berkeley.com.sleepycat.je.recovery.DirtyINMap: void selectDirtyBINChildrenForCheckpoint(berkeley.com.sleepycat.je.tree.IN)>(newSibling);

        return;
    }


