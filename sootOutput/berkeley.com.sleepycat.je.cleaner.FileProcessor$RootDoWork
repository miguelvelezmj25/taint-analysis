    void <init>(berkeley.com.sleepycat.je.dbi.DatabaseImpl, berkeley.com.sleepycat.je.tree.IN, long)
    {
        berkeley.com.sleepycat.je.cleaner.FileProcessor$RootDoWork this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;
        berkeley.com.sleepycat.je.tree.IN inClone;
        long logLsn;

        this := @this: berkeley.com.sleepycat.je.cleaner.FileProcessor$RootDoWork;

        db := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        inClone := @parameter1: berkeley.com.sleepycat.je.tree.IN;

        logLsn := @parameter2: long;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<berkeley.com.sleepycat.je.cleaner.FileProcessor$RootDoWork: berkeley.com.sleepycat.je.dbi.DatabaseImpl db> = db;

        this.<berkeley.com.sleepycat.je.cleaner.FileProcessor$RootDoWork: berkeley.com.sleepycat.je.tree.IN inClone> = inClone;

        this.<berkeley.com.sleepycat.je.cleaner.FileProcessor$RootDoWork: long logLsn> = logLsn;

        return;
    }

    public berkeley.com.sleepycat.je.tree.IN doWork(berkeley.com.sleepycat.je.tree.ChildReference)
    {
        berkeley.com.sleepycat.je.cleaner.FileProcessor$RootDoWork this;
        berkeley.com.sleepycat.je.tree.ChildReference root;
        berkeley.com.sleepycat.je.tree.IN rootIN, $r2, $r3;
        long $l0, $l2, $l3, $l5, $l6;
        byte $b1, $b4;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r0, $r4;
        berkeley.com.sleepycat.je.tree.Node $r1, $r5;
        int $i7;
        berkeley.com.sleepycat.je.CacheMode $r6;

        this := @this: berkeley.com.sleepycat.je.cleaner.FileProcessor$RootDoWork;

        root := @parameter0: berkeley.com.sleepycat.je.tree.ChildReference;

        if root == null goto label1;

        $l0 = virtualinvoke root.<berkeley.com.sleepycat.je.tree.ChildReference: long getLsn()>();

        $b1 = $l0 cmp -1L;

        if $b1 == 0 goto label1;

        $r0 = this.<berkeley.com.sleepycat.je.cleaner.FileProcessor$RootDoWork: berkeley.com.sleepycat.je.dbi.DatabaseImpl db>;

        $r1 = virtualinvoke root.<berkeley.com.sleepycat.je.tree.ChildReference: berkeley.com.sleepycat.je.tree.Node fetchTarget(berkeley.com.sleepycat.je.dbi.DatabaseImpl,berkeley.com.sleepycat.je.tree.IN)>($r0, null);

        $r2 = (berkeley.com.sleepycat.je.tree.IN) $r1;

        $l2 = virtualinvoke $r2.<berkeley.com.sleepycat.je.tree.IN: long getNodeId()>();

        $r3 = this.<berkeley.com.sleepycat.je.cleaner.FileProcessor$RootDoWork: berkeley.com.sleepycat.je.tree.IN inClone>;

        $l3 = virtualinvoke $r3.<berkeley.com.sleepycat.je.tree.IN: long getNodeId()>();

        $b4 = $l2 cmp $l3;

        if $b4 == 0 goto label2;

     label1:
        return null;

     label2:
        $l5 = virtualinvoke root.<berkeley.com.sleepycat.je.tree.ChildReference: long getLsn()>();

        $l6 = this.<berkeley.com.sleepycat.je.cleaner.FileProcessor$RootDoWork: long logLsn>;

        $i7 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: int compareTo(long,long)>($l5, $l6);

        if $i7 > 0 goto label3;

        $r4 = this.<berkeley.com.sleepycat.je.cleaner.FileProcessor$RootDoWork: berkeley.com.sleepycat.je.dbi.DatabaseImpl db>;

        $r5 = virtualinvoke root.<berkeley.com.sleepycat.je.tree.ChildReference: berkeley.com.sleepycat.je.tree.Node fetchTarget(berkeley.com.sleepycat.je.dbi.DatabaseImpl,berkeley.com.sleepycat.je.tree.IN)>($r4, null);

        rootIN = (berkeley.com.sleepycat.je.tree.IN) $r5;

        $r6 = <berkeley.com.sleepycat.je.cleaner.Cleaner: berkeley.com.sleepycat.je.CacheMode UPDATE_GENERATION>;

        virtualinvoke rootIN.<berkeley.com.sleepycat.je.tree.IN: void latch(berkeley.com.sleepycat.je.CacheMode)>($r6);

        return rootIN;

     label3:
        return null;
    }


