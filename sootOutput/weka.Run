    public static java.util.List findSchemeMatch(java.lang.Class, java.lang.String, boolean, boolean)
    {
        java.lang.Class classType, $r5;
        java.lang.String schemeToFind, $r2, $r4;
        boolean matchAnywhere, notJustRunnables, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.util.ArrayList matches, prunedMatches, $r0;
        java.lang.Object scheme, $r1, $r3, $r6;
        java.lang.Exception l7, $r7;
        int i#6, $i0;

        classType := @parameter0: java.lang.Class;

        schemeToFind := @parameter1: java.lang.String;

        matchAnywhere := @parameter2: boolean;

        notJustRunnables := @parameter3: boolean;

        staticinvoke <weka.core.ClassDiscovery: void clearCache()>();

        matches = staticinvoke <weka.core.ClassDiscovery: java.util.ArrayList find(java.lang.String)>(schemeToFind);

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        prunedMatches = $r0;

        i#6 = 0;

     label1:
        $i0 = virtualinvoke matches.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#6 >= $i0 goto label8;

        $r1 = virtualinvoke matches.<java.util.ArrayList: java.lang.Object get(int)>(i#6);

        $r2 = (java.lang.String) $r1;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean endsWith(java.lang.String)>(schemeToFind);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(matchAnywhere);

        if matchAnywhere == 0 goto label7;

     label2:
        $r3 = virtualinvoke matches.<java.util.ArrayList: java.lang.Object get(int)>(i#6);

        $r4 = (java.lang.String) $r3;

        scheme = staticinvoke <weka.core.WekaPackageClassLoaderManager: java.lang.Object objectForName(java.lang.String)>($r4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classType);

        if classType == null goto label3;

        $r5 = virtualinvoke scheme.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke classType.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label5;

     label3:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(notJustRunnables);

        if notJustRunnables != 0 goto label4;

        $z2 = scheme instanceof weka.classifiers.Classifier;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label4;

        $z3 = scheme instanceof weka.clusterers.Clusterer;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label4;

        $z4 = scheme instanceof weka.associations.Associator;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label4;

        $z5 = scheme instanceof weka.attributeSelection.ASEvaluation;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 != 0 goto label4;

        $z6 = scheme instanceof weka.filters.Filter;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 != 0 goto label4;

        $z7 = scheme instanceof weka.core.converters.AbstractFileLoader;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 != 0 goto label4;

        $z8 = scheme instanceof weka.core.converters.AbstractFileSaver;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 != 0 goto label4;

        $z9 = scheme instanceof weka.datagenerators.DataGenerator;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 != 0 goto label4;

        $z10 = scheme instanceof weka.core.CommandlineRunnable;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z10);

        if $z10 == 0 goto label5;

     label4:
        $r6 = virtualinvoke matches.<java.util.ArrayList: java.lang.Object get(int)>(i#6);

        virtualinvoke prunedMatches.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

     label5:
        goto label7;

     label6:
        $r7 := @caughtexception;

        l7 = $r7;

     label7:
        i#6 = i#6 + 1;

        goto label1;

     label8:
        return prunedMatches;

        catch java.lang.Exception from label2 to label5 with label6;
    }


