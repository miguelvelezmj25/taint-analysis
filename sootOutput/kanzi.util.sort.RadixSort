    public boolean sort(int[], int, int)
    {
        kanzi.util.sort.RadixSort this;
        int[] input, $r3, $r6, $r8;
        int blkptr, len, end, length, bSize, mask, digits, shift, value, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, j#38, pass#49, $i10, j#57, $i11, $i12, $i13, $i14, $i15, $i16, j#89, idx#91;
        kanzi.util.sort.RadixSort$LinkedQueue queue, $r2, $r11;
        kanzi.util.sort.RadixSort$LinkedQueue[] $r0, $r1, $r5, $r10;

        this := @this: kanzi.util.sort.RadixSort;

        input := @parameter0: int[];

        blkptr := @parameter1: int;

        len := @parameter2: int;

        if blkptr < 0 goto label01;

        if len <= 0 goto label01;

        $i0 = blkptr + len;

        $i1 = lengthof input;

        if $i0 <= $i1 goto label02;

     label01:
        return 0;

     label02:
        if len != 1 goto label03;

        return 1;

     label03:
        end = blkptr + len;

        $r0 = this.<kanzi.util.sort.RadixSort: kanzi.util.sort.RadixSort$LinkedQueue[] queues>;

        length = lengthof $r0;

        bSize = this.<kanzi.util.sort.RadixSort: int bufferSize>;

        mask = this.<kanzi.util.sort.RadixSort: int maskRadix>;

        $i2 = this.<kanzi.util.sort.RadixSort: int logMaxValue>;

        if $i2 >= 0 goto label04;

        $i3 = this.<kanzi.util.sort.RadixSort: int bitsRadix>;

        $i4 = 32 / $i3;

        goto label05;

     label04:
        $i5 = this.<kanzi.util.sort.RadixSort: int logMaxValue>;

        $i6 = this.<kanzi.util.sort.RadixSort: int bitsRadix>;

        $i7 = $i5 + $i6;

        $i8 = $i7 - 1;

        $i9 = this.<kanzi.util.sort.RadixSort: int bitsRadix>;

        $i4 = $i8 / $i9;

     label05:
        digits = $i4;

        j#38 = 0;

     label06:
        if j#38 >= length goto label07;

        $r1 = this.<kanzi.util.sort.RadixSort: kanzi.util.sort.RadixSort$LinkedQueue[] queues>;

        $r2 = $r1[j#38];

        $r3 = (int[]) null;

        virtualinvoke $r2.<kanzi.util.sort.RadixSort$LinkedQueue: int[] store(int[])>($r3);

        j#38 = j#38 + 1;

        goto label06;

     label07:
        pass#49 = 0;

     label08:
        if pass#49 >= digits goto label14;

        $i10 = this.<kanzi.util.sort.RadixSort: int bitsRadix>;

        shift = pass#49 * $i10;

        j#57 = blkptr;

     label09:
        if j#57 >= end goto label11;

        value = input[j#57];

        $r5 = this.<kanzi.util.sort.RadixSort: kanzi.util.sort.RadixSort$LinkedQueue[] queues>;

        $i11 = value >> shift;

        $i12 = $i11 & mask;

        queue = $r5[$i12];

        $r6 = queue.<kanzi.util.sort.RadixSort$LinkedQueue: int[] intBuffer>;

        $i13 = queue.<kanzi.util.sort.RadixSort$LinkedQueue: int index>;

        $r6[$i13] = value;

        $i14 = queue.<kanzi.util.sort.RadixSort$LinkedQueue: int index>;

        $i15 = $i14 + 1;

        queue.<kanzi.util.sort.RadixSort$LinkedQueue: int index> = $i15;

        $i16 = queue.<kanzi.util.sort.RadixSort$LinkedQueue: int index>;

        if $i16 != bSize goto label10;

        $r8 = queue.<kanzi.util.sort.RadixSort$LinkedQueue: int[] intBuffer>;

        virtualinvoke queue.<kanzi.util.sort.RadixSort$LinkedQueue: int[] store(int[])>($r8);

     label10:
        j#57 = j#57 + 1;

        goto label09;

     label11:
        j#89 = 0;

        idx#91 = blkptr;

     label12:
        if j#89 >= length goto label13;

        $r10 = this.<kanzi.util.sort.RadixSort: kanzi.util.sort.RadixSort$LinkedQueue[] queues>;

        $r11 = $r10[j#89];

        idx#91 = virtualinvoke $r11.<kanzi.util.sort.RadixSort$LinkedQueue: int retrieve(int[],int)>(input, idx#91);

        j#89 = j#89 + 1;

        goto label12;

     label13:
        pass#49 = pass#49 + 1;

        goto label08;

     label14:
        staticinvoke <kanzi.util.sort.RadixSort$LinkedQueue: void clear()>();

        return 1;
    }


