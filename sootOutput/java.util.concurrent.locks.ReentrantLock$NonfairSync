    void <init>()
    {
        java.util.concurrent.locks.ReentrantLock$NonfairSync l0;

        l0 := @this: java.util.concurrent.locks.ReentrantLock$NonfairSync;

        specialinvoke l0.<java.util.concurrent.locks.ReentrantLock$Sync: void <init>()>();

        return;
    }

    final void lock()
    {
        java.util.concurrent.locks.ReentrantLock$NonfairSync l0;
        boolean $z0;
        java.lang.Thread $r0;

        l0 := @this: java.util.concurrent.locks.ReentrantLock$NonfairSync;

        $z0 = virtualinvoke l0.<java.util.concurrent.locks.ReentrantLock$NonfairSync: boolean compareAndSetState(int,int)>(0, 1);

        if $z0 == 0 goto label1;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke l0.<java.util.concurrent.locks.ReentrantLock$NonfairSync: void setExclusiveOwnerThread(java.lang.Thread)>($r0);

        goto label2;

     label1:
        virtualinvoke l0.<java.util.concurrent.locks.ReentrantLock$NonfairSync: void acquire(int)>(1);

     label2:
        return;
    }

    protected final boolean tryAcquire(int)
    {
        java.util.concurrent.locks.ReentrantLock$NonfairSync l0;
        int l1;
        boolean $z0;

        l0 := @this: java.util.concurrent.locks.ReentrantLock$NonfairSync;

        l1 := @parameter0: int;

        $z0 = virtualinvoke l0.<java.util.concurrent.locks.ReentrantLock$NonfairSync: boolean nonfairTryAcquire(int)>(l1);

        return $z0;
    }


