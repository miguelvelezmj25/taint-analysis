    public java.lang.AbstractStringBuilder append(java.lang.String)
    {
        java.lang.AbstractStringBuilder l0, $r0;
        java.lang.String l1;
        int l2, $i0, $i1, $i2, $i3, $i4;
        char[] $r1;

        l0 := @this: java.lang.AbstractStringBuilder;

        l1 := @parameter0: java.lang.String;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l1);

        if l1 != null goto label1;

        $r0 = specialinvoke l0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder appendNull()>();

        return $r0;

     label1:
        l2 = virtualinvoke l1.<java.lang.String: int length()>();

        $i0 = l0.<java.lang.AbstractStringBuilder: int count>;

        $i1 = $i0 + l2;

        specialinvoke l0.<java.lang.AbstractStringBuilder: void ensureCapacityInternal(int)>($i1);

        $r1 = l0.<java.lang.AbstractStringBuilder: char[] value>;

        $i2 = l0.<java.lang.AbstractStringBuilder: int count>;

        virtualinvoke l1.<java.lang.String: void getChars(int,int,char[],int)>(0, l2, $r1, $i2);

        $i3 = l0.<java.lang.AbstractStringBuilder: int count>;

        $i4 = $i3 + l2;

        l0.<java.lang.AbstractStringBuilder: int count> = $i4;

        return l0;
    }

    public java.lang.AbstractStringBuilder append(int)
    {
        java.lang.AbstractStringBuilder l0;
        int l1, l2, l3, $i0, $i1, $i2, $i3;
        char[] $r1;

        l0 := @this: java.lang.AbstractStringBuilder;

        l1 := @parameter0: int;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l1);

        if l1 != -2147483648 goto label1;

        virtualinvoke l0.<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.String)>("-2147483648");

        return l0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l1);

        if l1 >= 0 goto label2;

        $i0 = neg l1;

        $i1 = staticinvoke <java.lang.Integer: int stringSize(int)>($i0);

        $i2 = $i1 + 1;

        goto label3;

     label2:
        $i2 = staticinvoke <java.lang.Integer: int stringSize(int)>(l1);

     label3:
        l2 = $i2;

        $i3 = l0.<java.lang.AbstractStringBuilder: int count>;

        l3 = $i3 + l2;

        specialinvoke l0.<java.lang.AbstractStringBuilder: void ensureCapacityInternal(int)>(l3);

        $r1 = l0.<java.lang.AbstractStringBuilder: char[] value>;

        staticinvoke <java.lang.Integer: void getChars(int,int,char[])>(l1, l3, $r1);

        l0.<java.lang.AbstractStringBuilder: int count> = l3;

        return l0;
    }

    private void ensureCapacityInternal(int)
    {
        java.lang.AbstractStringBuilder l0;
        int l1, $i0, $i1, $i2;
        char[] $r0, $r1, $r2;

        l0 := @this: java.lang.AbstractStringBuilder;

        l1 := @parameter0: int;

        $r0 = l0.<java.lang.AbstractStringBuilder: char[] value>;

        $i0 = lengthof $r0;

        $i1 = l1 - $i0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 0 goto label1;

        $r1 = l0.<java.lang.AbstractStringBuilder: char[] value>;

        $i2 = specialinvoke l0.<java.lang.AbstractStringBuilder: int newCapacity(int)>(l1);

        $r2 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>($r1, $i2);

        l0.<java.lang.AbstractStringBuilder: char[] value> = $r2;

     label1:
        return;
    }

    private int newCapacity(int)
    {
        java.lang.AbstractStringBuilder l0;
        int l1, $i0, $i1, l2#8, $i2, $i3, $i4;
        char[] $r0;

        l0 := @this: java.lang.AbstractStringBuilder;

        l1 := @parameter0: int;

        $r0 = l0.<java.lang.AbstractStringBuilder: char[] value>;

        $i0 = lengthof $r0;

        $i1 = $i0 << 1;

        l2#8 = $i1 + 2;

        $i2 = l2#8 - l1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 >= 0 goto label1;

        l2#8 = l1;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l2#8);

        if l2#8 <= 0 goto label2;

        $i3 = 2147483639 - l2#8;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 >= 0 goto label3;

     label2:
        $i4 = specialinvoke l0.<java.lang.AbstractStringBuilder: int hugeCapacity(int)>(l1);

        goto label4;

     label3:
        $i4 = l2#8;

     label4:
        return $i4;
    }

    private int hugeCapacity(int)
    {
        java.lang.AbstractStringBuilder l0;
        int l1, $i0, $i1;
        java.lang.OutOfMemoryError $r0;

        l0 := @this: java.lang.AbstractStringBuilder;

        l1 := @parameter0: int;

        $i0 = 2147483647 - l1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 >= 0 goto label1;

        $r0 = new java.lang.OutOfMemoryError;

        specialinvoke $r0.<java.lang.OutOfMemoryError: void <init>()>();

        throw $r0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l1);

        if l1 <= 2147483639 goto label2;

        $i1 = l1;

        goto label3;

     label2:
        $i1 = 2147483639;

     label3:
        return $i1;
    }

    private java.lang.AbstractStringBuilder appendNull()
    {
        java.lang.AbstractStringBuilder l0;
        char[] l2;
        int l1#3, $i0, l1#12, l1#16, l1#20, l1#24;

        l0 := @this: java.lang.AbstractStringBuilder;

        l1#3 = l0.<java.lang.AbstractStringBuilder: int count>;

        $i0 = l1#3 + 4;

        specialinvoke l0.<java.lang.AbstractStringBuilder: void ensureCapacityInternal(int)>($i0);

        l2 = l0.<java.lang.AbstractStringBuilder: char[] value>;

        l1#12 = l1#3 + 1;

        l2[l1#3] = 110;

        l1#16 = l1#12 + 1;

        l2[l1#12] = 117;

        l1#20 = l1#16 + 1;

        l2[l1#16] = 108;

        l1#24 = l1#20 + 1;

        l2[l1#20] = 108;

        l0.<java.lang.AbstractStringBuilder: int count> = l1#24;

        return l0;
    }

    void <init>(int)
    {
        java.lang.AbstractStringBuilder l0;
        int l1;
        char[] $r0;

        l0 := @this: java.lang.AbstractStringBuilder;

        l1 := @parameter0: int;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        $r0 = newarray (char)[l1];

        l0.<java.lang.AbstractStringBuilder: char[] value> = $r0;

        return;
    }

    public java.lang.AbstractStringBuilder append(char)
    {
        java.lang.AbstractStringBuilder l0;
        char l1;
        int $i0, $i1, $i2, $i3;
        char[] $r0;

        l0 := @this: java.lang.AbstractStringBuilder;

        l1 := @parameter0: char;

        $i0 = l0.<java.lang.AbstractStringBuilder: int count>;

        $i1 = $i0 + 1;

        specialinvoke l0.<java.lang.AbstractStringBuilder: void ensureCapacityInternal(int)>($i1);

        $r0 = l0.<java.lang.AbstractStringBuilder: char[] value>;

        $i2 = l0.<java.lang.AbstractStringBuilder: int count>;

        $i3 = $i2 + 1;

        l0.<java.lang.AbstractStringBuilder: int count> = $i3;

        $r0[$i2] = l1;

        return l0;
    }

    public java.lang.AbstractStringBuilder append(float)
    {
        java.lang.AbstractStringBuilder l0;
        float l1;

        l0 := @this: java.lang.AbstractStringBuilder;

        l1 := @parameter0: float;

        staticinvoke <sun.misc.FloatingDecimal: void appendTo(float,java.lang.Appendable)>(l1, l0);

        return l0;
    }


