    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        boolean $z0, $z1;
        java.lang.String $r2;

        $r0 = class "com/sleepycat/je/log/LogBuffer";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sleepycat.je.log.LogBuffer: boolean $assertionsDisabled> = $z1;

        $r1 = class "com/sleepycat/je/log/LogBuffer";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        <com.sleepycat.je.log.LogBuffer: java.lang.String DEBUG_NAME> = $r2;

        return;
    }

    void <init>(int, com.sleepycat.je.dbi.EnvironmentImpl) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.log.LogBuffer this;
        int capacity;
        com.sleepycat.je.dbi.EnvironmentImpl env;
        java.util.concurrent.atomic.AtomicInteger $r0;
        byte[] $r1, $r2;
        java.nio.ByteBuffer $r3;
        java.lang.String $r4;
        com.sleepycat.je.latch.Latch $r5;

        this := @this: com.sleepycat.je.log.LogBuffer;

        capacity := @parameter0: int;

        env := @parameter1: com.sleepycat.je.dbi.EnvironmentImpl;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        this.<com.sleepycat.je.log.LogBuffer: java.util.concurrent.atomic.AtomicInteger writePinCount> = $r0;

        $r1 = newarray (byte)[capacity];

        this.<com.sleepycat.je.log.LogBuffer: byte[] data> = $r1;

        $r2 = this.<com.sleepycat.je.log.LogBuffer: byte[] data>;

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r2);

        this.<com.sleepycat.je.log.LogBuffer: java.nio.ByteBuffer buffer> = $r3;

        $r4 = <com.sleepycat.je.log.LogBuffer: java.lang.String DEBUG_NAME>;

        $r5 = staticinvoke <com.sleepycat.je.latch.LatchFactory: com.sleepycat.je.latch.Latch createExclusiveLatch(com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String,boolean)>(env, $r4, 0);

        this.<com.sleepycat.je.log.LogBuffer: com.sleepycat.je.latch.Latch readLatch> = $r5;

        this.<com.sleepycat.je.log.LogBuffer: com.sleepycat.je.dbi.EnvironmentImpl env> = env;

        virtualinvoke this.<com.sleepycat.je.log.LogBuffer: void reinit()>();

        return;
    }

    void reinit() throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.log.LogBuffer this;
        com.sleepycat.je.latch.Latch $r0, $r4;
        java.nio.ByteBuffer $r1;
        java.util.concurrent.atomic.AtomicInteger $r3;

        this := @this: com.sleepycat.je.log.LogBuffer;

        $r0 = this.<com.sleepycat.je.log.LogBuffer: com.sleepycat.je.latch.Latch readLatch>;

        interfaceinvoke $r0.<com.sleepycat.je.latch.Latch: void acquireExclusive()>();

        $r1 = this.<com.sleepycat.je.log.LogBuffer: java.nio.ByteBuffer buffer>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        this.<com.sleepycat.je.log.LogBuffer: long firstLsn> = -1L;

        this.<com.sleepycat.je.log.LogBuffer: long lastLsn> = -1L;

        this.<com.sleepycat.je.log.LogBuffer: boolean rewriteAllowed> = 0;

        $r3 = this.<com.sleepycat.je.log.LogBuffer: java.util.concurrent.atomic.AtomicInteger writePinCount>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: void set(int)>(0);

        $r4 = this.<com.sleepycat.je.log.LogBuffer: com.sleepycat.je.latch.Latch readLatch>;

        interfaceinvoke $r4.<com.sleepycat.je.latch.Latch: void release()>();

        return;
    }

    public long getFirstLsn()
    {
        com.sleepycat.je.log.LogBuffer this;
        long $l0;

        this := @this: com.sleepycat.je.log.LogBuffer;

        $l0 = this.<com.sleepycat.je.log.LogBuffer: long firstLsn>;

        return $l0;
    }

    public void release()
    {
        com.sleepycat.je.log.LogBuffer this;
        com.sleepycat.je.latch.Latch $r0;

        this := @this: com.sleepycat.je.log.LogBuffer;

        $r0 = this.<com.sleepycat.je.log.LogBuffer: com.sleepycat.je.latch.Latch readLatch>;

        interfaceinvoke $r0.<com.sleepycat.je.latch.Latch: void releaseIfOwner()>();

        return;
    }

    public void latchForWrite() throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.log.LogBuffer this;
        com.sleepycat.je.latch.Latch $r0;

        this := @this: com.sleepycat.je.log.LogBuffer;

        $r0 = this.<com.sleepycat.je.log.LogBuffer: com.sleepycat.je.latch.Latch readLatch>;

        interfaceinvoke $r0.<com.sleepycat.je.latch.Latch: void acquireExclusive()>();

        return;
    }

    void <init>(java.nio.ByteBuffer, long)
    {
        com.sleepycat.je.log.LogBuffer this;
        java.nio.ByteBuffer buffer;
        long firstLsn;
        java.util.concurrent.atomic.AtomicInteger $r0;

        this := @this: com.sleepycat.je.log.LogBuffer;

        buffer := @parameter0: java.nio.ByteBuffer;

        firstLsn := @parameter1: long;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        this.<com.sleepycat.je.log.LogBuffer: java.util.concurrent.atomic.AtomicInteger writePinCount> = $r0;

        this.<com.sleepycat.je.log.LogBuffer: java.nio.ByteBuffer buffer> = buffer;

        this.<com.sleepycat.je.log.LogBuffer: long firstLsn> = firstLsn;

        this.<com.sleepycat.je.log.LogBuffer: long lastLsn> = firstLsn;

        this.<com.sleepycat.je.log.LogBuffer: boolean rewriteAllowed> = 0;

        return;
    }

    public java.nio.ByteBuffer getDataBuffer()
    {
        com.sleepycat.je.log.LogBuffer this;
        java.nio.ByteBuffer $r0;

        this := @this: com.sleepycat.je.log.LogBuffer;

        $r0 = this.<com.sleepycat.je.log.LogBuffer: java.nio.ByteBuffer buffer>;

        return $r0;
    }

    boolean getRewriteAllowed()
    {
        com.sleepycat.je.log.LogBuffer this;
        boolean $z0;

        this := @this: com.sleepycat.je.log.LogBuffer;

        $z0 = this.<com.sleepycat.je.log.LogBuffer: boolean rewriteAllowed>;

        return $z0;
    }

    boolean hasRoom(int)
    {
        com.sleepycat.je.log.LogBuffer this;
        int numBytes, $i0, $i1, $i2;
        java.nio.ByteBuffer $r0, $r1;
        boolean $z0;

        this := @this: com.sleepycat.je.log.LogBuffer;

        numBytes := @parameter0: int;

        $r0 = this.<com.sleepycat.je.log.LogBuffer: java.nio.ByteBuffer buffer>;

        $i0 = virtualinvoke $r0.<java.nio.ByteBuffer: int capacity()>();

        $r1 = this.<com.sleepycat.je.log.LogBuffer: java.nio.ByteBuffer buffer>;

        $i1 = virtualinvoke $r1.<java.nio.ByteBuffer: int position()>();

        $i2 = $i0 - $i1;

        if numBytes > $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public com.sleepycat.je.log.LogBufferSegment allocate(int)
    {
        com.sleepycat.je.log.LogBuffer this;
        int size, $i0, $i1, $i2;
        java.nio.ByteBuffer buf, $r3, $r4, $r5;
        boolean $z0, $z1, $z2;
        com.sleepycat.je.latch.Latch $r0;
        java.lang.AssertionError $r1;
        byte[] $r2;
        java.util.concurrent.atomic.AtomicInteger $r7;
        com.sleepycat.je.log.LogBufferSegment $r8;

        this := @this: com.sleepycat.je.log.LogBuffer;

        size := @parameter0: int;

        $z0 = <com.sleepycat.je.log.LogBuffer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r0 = this.<com.sleepycat.je.log.LogBuffer: com.sleepycat.je.latch.Latch readLatch>;

        $z1 = interfaceinvoke $r0.<com.sleepycat.je.latch.Latch: boolean isExclusiveOwner()>();

        if $z1 != 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $z2 = virtualinvoke this.<com.sleepycat.je.log.LogBuffer: boolean hasRoom(int)>(size);

        if $z2 == 0 goto label2;

        $r2 = this.<com.sleepycat.je.log.LogBuffer: byte[] data>;

        $r3 = this.<com.sleepycat.je.log.LogBuffer: java.nio.ByteBuffer buffer>;

        $i0 = virtualinvoke $r3.<java.nio.ByteBuffer: int position()>();

        buf = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>($r2, $i0, size);

        $r4 = this.<com.sleepycat.je.log.LogBuffer: java.nio.ByteBuffer buffer>;

        $r5 = this.<com.sleepycat.je.log.LogBuffer: java.nio.ByteBuffer buffer>;

        $i1 = virtualinvoke $r5.<java.nio.ByteBuffer: int position()>();

        $i2 = $i1 + size;

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i2);

        $r7 = this.<com.sleepycat.je.log.LogBuffer: java.util.concurrent.atomic.AtomicInteger writePinCount>;

        virtualinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        $r8 = new com.sleepycat.je.log.LogBufferSegment;

        specialinvoke $r8.<com.sleepycat.je.log.LogBufferSegment: void <init>(com.sleepycat.je.log.LogBuffer,java.nio.ByteBuffer)>(this, buf);

        return $r8;

     label2:
        return null;
    }

    void registerLsn(long)
    {
        com.sleepycat.je.log.LogBuffer this;
        long lsn, $l0, $l2, $l4, $l5;
        boolean $z0, $z1, $z2;
        com.sleepycat.je.latch.Latch $r0;
        java.lang.AssertionError $r1, $r2;
        byte $b1, $b6;
        int $i3;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7;
        java.lang.String $r8;

        this := @this: com.sleepycat.je.log.LogBuffer;

        lsn := @parameter0: long;

        $z0 = <com.sleepycat.je.log.LogBuffer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r0 = this.<com.sleepycat.je.log.LogBuffer: com.sleepycat.je.latch.Latch readLatch>;

        $z1 = interfaceinvoke $r0.<com.sleepycat.je.latch.Latch: boolean isExclusiveOwner()>();

        if $z1 != 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $l0 = this.<com.sleepycat.je.log.LogBuffer: long lastLsn>;

        $b1 = $l0 cmp -1L;

        if $b1 == 0 goto label2;

        $z2 = <com.sleepycat.je.log.LogBuffer: boolean $assertionsDisabled>;

        if $z2 != 0 goto label2;

        $l2 = this.<com.sleepycat.je.log.LogBuffer: long lastLsn>;

        $i3 = staticinvoke <com.sleepycat.je.utilint.DbLsn: int compareTo(long,long)>(lsn, $l2);

        if $i3 > 0 goto label2;

        $r2 = new java.lang.AssertionError;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lsn=");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(lsn);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lastlsn=");

        $l4 = this.<com.sleepycat.je.log.LogBuffer: long lastLsn>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r8);

        throw $r2;

     label2:
        this.<com.sleepycat.je.log.LogBuffer: long lastLsn> = lsn;

        $l5 = this.<com.sleepycat.je.log.LogBuffer: long firstLsn>;

        $b6 = $l5 cmp -1L;

        if $b6 != 0 goto label3;

        this.<com.sleepycat.je.log.LogBuffer: long firstLsn> = lsn;

     label3:
        return;
    }

    public void free()
    {
        com.sleepycat.je.log.LogBuffer this;
        java.util.concurrent.atomic.AtomicInteger $r0;

        this := @this: com.sleepycat.je.log.LogBuffer;

        $r0 = this.<com.sleepycat.je.log.LogBuffer: java.util.concurrent.atomic.AtomicInteger writePinCount>;

        virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        return;
    }


