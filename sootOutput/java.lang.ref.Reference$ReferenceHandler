    static void <clinit>()
    {
        staticinvoke <java.lang.ref.Reference$ReferenceHandler: void ensureClassInitialized(java.lang.Class)>(class "java/lang/InterruptedException");

        staticinvoke <java.lang.ref.Reference$ReferenceHandler: void ensureClassInitialized(java.lang.Class)>(class "sun/misc/Cleaner");

        return;
    }

    private static void ensureClassInitialized(java.lang.Class)
    {
        java.lang.Class l0;
        java.lang.ClassNotFoundException l1, $r3;
        java.lang.String $r0, $r5;
        java.lang.ClassLoader $r1;
        java.lang.NoClassDefFoundError $r4;
        java.lang.Throwable $r6;
        java.lang.Error $r7;

        l0 := @parameter0: java.lang.Class;

     label1:
        $r0 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>();

        $r1 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r0, 1, $r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        l1 = $r3;

        $r4 = new java.lang.NoClassDefFoundError;

        $r5 = virtualinvoke l1.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r4.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r5);

        $r6 = virtualinvoke $r4.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>(l1);

        $r7 = (java.lang.Error) $r6;

        throw $r7;

     label4:
        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public void run()
    {
        java.lang.ref.Reference$ReferenceHandler l0;

        l0 := @this: java.lang.ref.Reference$ReferenceHandler;

     label1:
        staticinvoke <java.lang.ref.Reference: boolean tryHandlePending(boolean)>(1);

        goto label1;
    }

    void <init>(java.lang.ThreadGroup, java.lang.String)
    {
        java.lang.ref.Reference$ReferenceHandler l0;
        java.lang.ThreadGroup l1;
        java.lang.String l2;

        l0 := @this: java.lang.ref.Reference$ReferenceHandler;

        l1 := @parameter0: java.lang.ThreadGroup;

        l2 := @parameter1: java.lang.String;

        specialinvoke l0.<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>(l1, l2);

        return;
    }


