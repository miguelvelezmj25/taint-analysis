    static boolean isSet()
    {
        java.security.Policy$PolicyInfo l0;
        java.util.concurrent.atomic.AtomicReference $r0;
        java.lang.Object $r1;
        java.security.Policy $r2;
        boolean $z0, $z1;

        $r0 = <java.security.Policy: java.util.concurrent.atomic.AtomicReference policy>;

        $r1 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        l0 = (java.security.Policy$PolicyInfo) $r1;

        $r2 = l0.<java.security.Policy$PolicyInfo: java.security.Policy policy>;

        if $r2 == null goto label1;

        $z0 = l0.<java.security.Policy$PolicyInfo: boolean initialized>;

        if $z0 != 1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    static void <clinit>()
    {
        java.security.Policy$PolicyInfo $r0;
        java.security.Policy$UnsupportedEmptyCollection $r1;
        java.util.concurrent.atomic.AtomicReference $r2;
        sun.security.util.Debug $r3;

        $r1 = new java.security.Policy$UnsupportedEmptyCollection;

        specialinvoke $r1.<java.security.Policy$UnsupportedEmptyCollection: void <init>()>();

        <java.security.Policy: java.security.PermissionCollection UNSUPPORTED_EMPTY_COLLECTION> = $r1;

        $r2 = new java.util.concurrent.atomic.AtomicReference;

        $r0 = new java.security.Policy$PolicyInfo;

        specialinvoke $r0.<java.security.Policy$PolicyInfo: void <init>(java.security.Policy,boolean)>(null, 0);

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>($r0);

        <java.security.Policy: java.util.concurrent.atomic.AtomicReference policy> = $r2;

        $r3 = staticinvoke <sun.security.util.Debug: sun.security.util.Debug getInstance(java.lang.String)>("policy");

        <java.security.Policy: sun.security.util.Debug debug> = $r3;

        return;
    }


