    public void buildDecList(weka.core.Instances, boolean) throws java.lang.Exception
    {
        weka.classifiers.rules.part.C45PruneableDecList this;
        boolean leaf, $z0, $z1, $z2, $z3, $z4;
        double sumOfWeights;
        weka.classifiers.trees.j48.NoSplit noSplit, $r0;
        weka.core.Instances[] localInstances;
        weka.core.Instances data#1, $r12, $r15;
        weka.classifiers.trees.j48.Distribution $r1;
        weka.classifiers.trees.j48.ModelSelection $r2;
        weka.classifiers.trees.j48.ClassifierSplitModel $r3, $r4, $r5, $r6;
        int $i0, $i1, i#45, ind#48, j#52, $i2, $i3, j#104, $i4, $i5, $i6, $i7;
        weka.classifiers.rules.part.ClassifierDecList[] $r7, $r8, $r9, $r11, $r14, $r17, $r18, $r20, $r21, $r23, $r25;
        weka.classifiers.rules.part.ClassifierDecList $r10, $r13, $r16, $r19, $r22, $r24;

        this := @this: weka.classifiers.rules.part.C45PruneableDecList;

        data#1 := @parameter0: weka.core.Instances;

        leaf := @parameter1: boolean;

        this.<weka.classifiers.rules.part.C45PruneableDecList: weka.core.Instances m_train> = null;

        this.<weka.classifiers.rules.part.C45PruneableDecList: weka.classifiers.trees.j48.Distribution m_test> = null;

        this.<weka.classifiers.rules.part.C45PruneableDecList: boolean m_isLeaf> = 0;

        this.<weka.classifiers.rules.part.C45PruneableDecList: boolean m_isEmpty> = 0;

        this.<weka.classifiers.rules.part.C45PruneableDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons> = null;

        this.<weka.classifiers.rules.part.C45PruneableDecList: int indeX> = 0;

        sumOfWeights = virtualinvoke data#1.<weka.core.Instances: double sumOfWeights()>();

        $r0 = new weka.classifiers.trees.j48.NoSplit;

        $r1 = new weka.classifiers.trees.j48.Distribution;

        specialinvoke $r1.<weka.classifiers.trees.j48.Distribution: void <init>(weka.core.Instances)>(data#1);

        specialinvoke $r0.<weka.classifiers.trees.j48.NoSplit: void <init>(weka.classifiers.trees.j48.Distribution)>($r1);

        noSplit = $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(leaf);

        if leaf == 0 goto label01;

        this.<weka.classifiers.rules.part.C45PruneableDecList: weka.classifiers.trees.j48.ClassifierSplitModel m_localModel> = noSplit;

        goto label02;

     label01:
        $r2 = this.<weka.classifiers.rules.part.C45PruneableDecList: weka.classifiers.trees.j48.ModelSelection m_toSelectModel>;

        $r3 = virtualinvoke $r2.<weka.classifiers.trees.j48.ModelSelection: weka.classifiers.trees.j48.ClassifierSplitModel selectModel(weka.core.Instances)>(data#1);

        this.<weka.classifiers.rules.part.C45PruneableDecList: weka.classifiers.trees.j48.ClassifierSplitModel m_localModel> = $r3;

     label02:
        $r4 = this.<weka.classifiers.rules.part.C45PruneableDecList: weka.classifiers.trees.j48.ClassifierSplitModel m_localModel>;

        $i0 = virtualinvoke $r4.<weka.classifiers.trees.j48.ClassifierSplitModel: int numSubsets()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 1 goto label15;

        $r5 = this.<weka.classifiers.rules.part.C45PruneableDecList: weka.classifiers.trees.j48.ClassifierSplitModel m_localModel>;

        localInstances = virtualinvoke $r5.<weka.classifiers.trees.j48.ClassifierSplitModel: weka.core.Instances[] split(weka.core.Instances)>(data#1);

        $r6 = this.<weka.classifiers.rules.part.C45PruneableDecList: weka.classifiers.trees.j48.ClassifierSplitModel m_localModel>;

        $i1 = virtualinvoke $r6.<weka.classifiers.trees.j48.ClassifierSplitModel: int numSubsets()>();

        $r7 = newarray (weka.classifiers.rules.part.ClassifierDecList)[$i1];

        this.<weka.classifiers.rules.part.C45PruneableDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons> = $r7;

        i#45 = 0;

     label03:
        i#45 = i#45 + 1;

        ind#48 = virtualinvoke this.<weka.classifiers.rules.part.C45PruneableDecList: int chooseIndex()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(ind#48);

        if ind#48 != -1 goto label09;

        j#52 = 0;

     label04:
        $r8 = this.<weka.classifiers.rules.part.C45PruneableDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons>;

        $i2 = lengthof $r8;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#52);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if j#52 >= $i2 goto label06;

        $r9 = this.<weka.classifiers.rules.part.C45PruneableDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons>;

        $r10 = $r9[j#52];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r10);

        if $r10 != null goto label05;

        $r11 = this.<weka.classifiers.rules.part.C45PruneableDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons>;

        $r12 = localInstances[j#52];

        $r13 = virtualinvoke this.<weka.classifiers.rules.part.C45PruneableDecList: weka.classifiers.rules.part.ClassifierDecList getNewDecList(weka.core.Instances,boolean)>($r12, 1);

        $r11[j#52] = $r13;

     label05:
        j#52 = j#52 + 1;

        goto label04;

     label06:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#45);

        if i#45 >= 2 goto label08;

        this.<weka.classifiers.rules.part.C45PruneableDecList: weka.classifiers.trees.j48.ClassifierSplitModel m_localModel> = noSplit;

        this.<weka.classifiers.rules.part.C45PruneableDecList: boolean m_isLeaf> = 1;

        this.<weka.classifiers.rules.part.C45PruneableDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons> = null;

        $z0 = staticinvoke <weka.core.Utils: boolean eq(double,double)>(sumOfWeights, 0.0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label07;

        this.<weka.classifiers.rules.part.C45PruneableDecList: boolean m_isEmpty> = 1;

     label07:
        return;

     label08:
        goto label10;

     label09:
        $r14 = this.<weka.classifiers.rules.part.C45PruneableDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons>;

        $r15 = localInstances[ind#48];

        $r16 = virtualinvoke this.<weka.classifiers.rules.part.C45PruneableDecList: weka.classifiers.rules.part.ClassifierDecList getNewDecList(weka.core.Instances,boolean)>($r15, 0);

        $r14[ind#48] = $r16;

        $r17 = this.<weka.classifiers.rules.part.C45PruneableDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons>;

        $i3 = lengthof $r17;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#45);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if i#45 >= $i3 goto label10;

        $r18 = this.<weka.classifiers.rules.part.C45PruneableDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons>;

        $r19 = $r18[ind#48];

        $z1 = $r19.<weka.classifiers.rules.part.ClassifierDecList: boolean m_isLeaf>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label03;

     label10:
        j#104 = 0;

     label11:
        $r20 = this.<weka.classifiers.rules.part.C45PruneableDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons>;

        $i4 = lengthof $r20;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#104);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if j#104 >= $i4 goto label13;

        $r21 = this.<weka.classifiers.rules.part.C45PruneableDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons>;

        $r22 = $r21[j#104];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r22);

        if $r22 == null goto label13;

        $r23 = this.<weka.classifiers.rules.part.C45PruneableDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons>;

        $r24 = $r23[j#104];

        $z2 = $r24.<weka.classifiers.rules.part.ClassifierDecList: boolean m_isLeaf>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label12;

        goto label13;

     label12:
        j#104 = j#104 + 1;

        goto label11;

     label13:
        $r25 = this.<weka.classifiers.rules.part.C45PruneableDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons>;

        $i5 = lengthof $r25;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#104);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if j#104 != $i5 goto label14;

        virtualinvoke this.<weka.classifiers.rules.part.C45PruneableDecList: void pruneEnd()>();

        $z3 = this.<weka.classifiers.rules.part.C45PruneableDecList: boolean m_isLeaf>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label16;

        $i6 = virtualinvoke this.<weka.classifiers.rules.part.C45PruneableDecList: int chooseLastIndex()>();

        this.<weka.classifiers.rules.part.C45PruneableDecList: int indeX> = $i6;

        goto label16;

     label14:
        $i7 = virtualinvoke this.<weka.classifiers.rules.part.C45PruneableDecList: int chooseLastIndex()>();

        this.<weka.classifiers.rules.part.C45PruneableDecList: int indeX> = $i7;

        goto label16;

     label15:
        this.<weka.classifiers.rules.part.C45PruneableDecList: boolean m_isLeaf> = 1;

        $z4 = staticinvoke <weka.core.Utils: boolean eq(double,double)>(sumOfWeights, 0.0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label16;

        this.<weka.classifiers.rules.part.C45PruneableDecList: boolean m_isEmpty> = 1;

     label16:
        return;
    }

    protected weka.classifiers.rules.part.ClassifierDecList getNewDecList(weka.core.Instances, boolean) throws java.lang.Exception
    {
        weka.classifiers.rules.part.C45PruneableDecList this, newDecList, $r0;
        weka.core.Instances data;
        boolean leaf;
        weka.classifiers.trees.j48.ModelSelection $r1;
        double $d0;
        int $i0;

        this := @this: weka.classifiers.rules.part.C45PruneableDecList;

        data := @parameter0: weka.core.Instances;

        leaf := @parameter1: boolean;

        $r0 = new weka.classifiers.rules.part.C45PruneableDecList;

        $r1 = this.<weka.classifiers.rules.part.C45PruneableDecList: weka.classifiers.trees.j48.ModelSelection m_toSelectModel>;

        $d0 = this.<weka.classifiers.rules.part.C45PruneableDecList: double CF>;

        $i0 = this.<weka.classifiers.rules.part.C45PruneableDecList: int m_minNumObj>;

        specialinvoke $r0.<weka.classifiers.rules.part.C45PruneableDecList: void <init>(weka.classifiers.trees.j48.ModelSelection,double,int)>($r1, $d0, $i0);

        newDecList = $r0;

        virtualinvoke newDecList.<weka.classifiers.rules.part.C45PruneableDecList: void buildDecList(weka.core.Instances,boolean)>(data, leaf);

        return newDecList;
    }

    protected void pruneEnd()
    {
        weka.classifiers.rules.part.C45PruneableDecList this;
        double errorsTree, errorsLeaf, $d0;
        boolean $z0;
        weka.classifiers.trees.j48.NoSplit $r0;
        weka.classifiers.trees.j48.ClassifierSplitModel $r1;
        weka.classifiers.trees.j48.Distribution $r2;

        this := @this: weka.classifiers.rules.part.C45PruneableDecList;

        errorsTree = specialinvoke this.<weka.classifiers.rules.part.C45PruneableDecList: double getEstimatedErrorsForTree()>();

        errorsLeaf = virtualinvoke this.<weka.classifiers.rules.part.C45PruneableDecList: double getEstimatedErrorsForLeaf()>();

        $d0 = errorsTree + 0.1;

        $z0 = staticinvoke <weka.core.Utils: boolean smOrEq(double,double)>(errorsLeaf, $d0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        this.<weka.classifiers.rules.part.C45PruneableDecList: boolean m_isLeaf> = 1;

        this.<weka.classifiers.rules.part.C45PruneableDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons> = null;

        $r0 = new weka.classifiers.trees.j48.NoSplit;

        $r1 = virtualinvoke this.<weka.classifiers.rules.part.C45PruneableDecList: weka.classifiers.trees.j48.ClassifierSplitModel localModel()>();

        $r2 = virtualinvoke $r1.<weka.classifiers.trees.j48.ClassifierSplitModel: weka.classifiers.trees.j48.Distribution distribution()>();

        specialinvoke $r0.<weka.classifiers.trees.j48.NoSplit: void <init>(weka.classifiers.trees.j48.Distribution)>($r2);

        this.<weka.classifiers.rules.part.C45PruneableDecList: weka.classifiers.trees.j48.ClassifierSplitModel m_localModel> = $r0;

     label1:
        return;
    }

    private double getEstimatedErrorsForTree()
    {
        weka.classifiers.rules.part.C45PruneableDecList this, $r5;
        boolean $z0, $z1;
        double $d0, error#6, $d1, $d2;
        int i#8, $i0;
        weka.classifiers.rules.part.ClassifierDecList[] $r0;
        weka.classifiers.rules.part.ClassifierDecList $r1, $r4;
        weka.classifiers.trees.j48.ClassifierSplitModel $r2;
        weka.classifiers.trees.j48.Distribution $r3;

        this := @this: weka.classifiers.rules.part.C45PruneableDecList;

        $z0 = this.<weka.classifiers.rules.part.C45PruneableDecList: boolean m_isLeaf>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $d0 = virtualinvoke this.<weka.classifiers.rules.part.C45PruneableDecList: double getEstimatedErrorsForLeaf()>();

        return $d0;

     label1:
        error#6 = 0.0;

        i#8 = 0;

     label2:
        $r0 = this.<weka.classifiers.rules.part.C45PruneableDecList: weka.classifiers.rules.part.ClassifierDecList[] m_sons>;

        $i0 = lengthof $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#8 >= $i0 goto label4;

        $r1 = virtualinvoke this.<weka.classifiers.rules.part.C45PruneableDecList: weka.classifiers.rules.part.ClassifierDecList son(int)>(i#8);

        $r2 = virtualinvoke $r1.<weka.classifiers.rules.part.ClassifierDecList: weka.classifiers.trees.j48.ClassifierSplitModel localModel()>();

        $r3 = virtualinvoke $r2.<weka.classifiers.trees.j48.ClassifierSplitModel: weka.classifiers.trees.j48.Distribution distribution()>();

        $d1 = virtualinvoke $r3.<weka.classifiers.trees.j48.Distribution: double total()>();

        $z1 = staticinvoke <weka.core.Utils: boolean eq(double,double)>($d1, 0.0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label3;

        $r4 = virtualinvoke this.<weka.classifiers.rules.part.C45PruneableDecList: weka.classifiers.rules.part.ClassifierDecList son(int)>(i#8);

        $r5 = (weka.classifiers.rules.part.C45PruneableDecList) $r4;

        $d2 = specialinvoke $r5.<weka.classifiers.rules.part.C45PruneableDecList: double getEstimatedErrorsForTree()>();

        error#6 = error#6 + $d2;

     label3:
        i#8 = i#8 + 1;

        goto label2;

     label4:
        return error#6;
    }

    public double getEstimatedErrorsForLeaf()
    {
        weka.classifiers.rules.part.C45PruneableDecList this;
        double errors, $d0, $d1, $d2, $d3;
        weka.classifiers.trees.j48.ClassifierSplitModel $r0, $r2;
        weka.classifiers.trees.j48.Distribution $r1, $r3;
        float $f0;

        this := @this: weka.classifiers.rules.part.C45PruneableDecList;

        $r0 = virtualinvoke this.<weka.classifiers.rules.part.C45PruneableDecList: weka.classifiers.trees.j48.ClassifierSplitModel localModel()>();

        $r1 = virtualinvoke $r0.<weka.classifiers.trees.j48.ClassifierSplitModel: weka.classifiers.trees.j48.Distribution distribution()>();

        errors = virtualinvoke $r1.<weka.classifiers.trees.j48.Distribution: double numIncorrect()>();

        $r2 = virtualinvoke this.<weka.classifiers.rules.part.C45PruneableDecList: weka.classifiers.trees.j48.ClassifierSplitModel localModel()>();

        $r3 = virtualinvoke $r2.<weka.classifiers.trees.j48.ClassifierSplitModel: weka.classifiers.trees.j48.Distribution distribution()>();

        $d0 = virtualinvoke $r3.<weka.classifiers.trees.j48.Distribution: double total()>();

        $d1 = this.<weka.classifiers.rules.part.C45PruneableDecList: double CF>;

        $f0 = (float) $d1;

        $d2 = staticinvoke <weka.classifiers.trees.j48.Stats: double addErrs(double,double,float)>($d0, errors, $f0);

        $d3 = errors + $d2;

        return $d3;
    }

    public void <init>(weka.classifiers.trees.j48.ModelSelection, double, int) throws java.lang.Exception
    {
        weka.classifiers.rules.part.C45PruneableDecList this;
        weka.classifiers.trees.j48.ModelSelection toSelectLocModel;
        double cf;
        int minNum;

        this := @this: weka.classifiers.rules.part.C45PruneableDecList;

        toSelectLocModel := @parameter0: weka.classifiers.trees.j48.ModelSelection;

        cf := @parameter1: double;

        minNum := @parameter2: int;

        specialinvoke this.<weka.classifiers.rules.part.ClassifierDecList: void <init>(weka.classifiers.trees.j48.ModelSelection,int)>(toSelectLocModel, minNum);

        this.<weka.classifiers.rules.part.C45PruneableDecList: double CF> = 0.25;

        this.<weka.classifiers.rules.part.C45PruneableDecList: double CF> = cf;

        return;
    }


