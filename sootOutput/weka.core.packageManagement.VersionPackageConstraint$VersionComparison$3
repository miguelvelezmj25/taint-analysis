    void <init>(java.lang.String, int, java.lang.String)
    {
        weka.core.packageManagement.VersionPackageConstraint$VersionComparison$3 this;
        java.lang.String l1, name;
        int l2;

        this := @this: weka.core.packageManagement.VersionPackageConstraint$VersionComparison$3;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: int;

        name := @parameter2: java.lang.String;

        specialinvoke this.<weka.core.packageManagement.VersionPackageConstraint$VersionComparison: void <init>(java.lang.String,int,java.lang.String,weka.core.packageManagement.VersionPackageConstraint$1)>(l1, l2, name, null);

        return;
    }

    boolean compatibleWith(weka.core.packageManagement.VersionPackageConstraint$VersionComparison)
    {
        weka.core.packageManagement.VersionPackageConstraint$VersionComparison$3 this;
        weka.core.packageManagement.VersionPackageConstraint$VersionComparison v, $r0, $r1;

        this := @this: weka.core.packageManagement.VersionPackageConstraint$VersionComparison$3;

        v := @parameter0: weka.core.packageManagement.VersionPackageConstraint$VersionComparison;

        $r0 = <weka.core.packageManagement.VersionPackageConstraint$VersionComparison: weka.core.packageManagement.VersionPackageConstraint$VersionComparison LESSTHAN>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(v);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if v == $r0 goto label1;

        $r1 = <weka.core.packageManagement.VersionPackageConstraint$VersionComparison: weka.core.packageManagement.VersionPackageConstraint$VersionComparison LESSTHANOREQUAL>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(v);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if v != $r1 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }


