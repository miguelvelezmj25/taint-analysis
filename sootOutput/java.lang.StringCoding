    static char[] decode(java.lang.String, byte[], int, int) throws java.io.UnsupportedEncodingException
    {
        java.lang.String l0, l5, $r2, $r3, $r4;
        byte[] l1;
        int l2, l3;
        java.lang.ThreadLocal $r0, $r8;
        java.lang.Object $r1;
        java.lang.StringCoding$StringDecoder l4#4, $r5;
        boolean $z0, $z1;
        java.nio.charset.Charset l6#19;
        java.nio.charset.IllegalCharsetNameException $r6, l6#26;
        java.io.UnsupportedEncodingException $r7;
        char[] $r9;

        l0 := @parameter0: java.lang.String;

        l1 := @parameter1: byte[];

        l2 := @parameter2: int;

        l3 := @parameter3: int;

        $r0 = <java.lang.StringCoding: java.lang.ThreadLocal decoder>;

        $r1 = staticinvoke <java.lang.StringCoding: java.lang.Object deref(java.lang.ThreadLocal)>($r0);

        l4#4 = (java.lang.StringCoding$StringDecoder) $r1;

        goto label1;

     label1:
        $r2 = "UTF8";

        l5 = $r2;

        if l4#4 == null goto label2;

        $r3 = virtualinvoke l4#4.<java.lang.StringCoding$StringDecoder: java.lang.String requestedCharsetName()>();

        $z0 = virtualinvoke l5.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label8;

        $r4 = virtualinvoke l4#4.<java.lang.StringCoding$StringDecoder: java.lang.String charsetName()>();

        $z1 = virtualinvoke l5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label8;

     label2:
        l4#4 = null;

     label3:
        l6#19 = staticinvoke <java.lang.StringCoding: java.nio.charset.Charset lookupCharset(java.lang.String)>(l5);

        if l6#19 == null goto label4;

        $r5 = new java.lang.StringCoding$StringDecoder;

        specialinvoke $r5.<java.lang.StringCoding$StringDecoder: void <init>(java.nio.charset.Charset,java.lang.String,java.lang.StringCoding$1)>(l6#19, l5, null);

        l4#4 = $r5;

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

     label6:
        if l4#4 != null goto label7;

        $r7 = new java.io.UnsupportedEncodingException;

        specialinvoke $r7.<java.io.UnsupportedEncodingException: void <init>(java.lang.String)>(l5);

        throw $r7;

     label7:
        $r8 = <java.lang.StringCoding: java.lang.ThreadLocal decoder>;

        staticinvoke <java.lang.StringCoding: void set(java.lang.ThreadLocal,java.lang.Object)>($r8, l4#4);

     label8:
        $r9 = virtualinvoke l4#4.<java.lang.StringCoding$StringDecoder: char[] decode(byte[],int,int)>(l1, 0, l3);

        return $r9;

        catch java.nio.charset.IllegalCharsetNameException from label3 to label4 with label5;
    }

    static void <clinit>()
    {
        java.lang.ThreadLocal $r0, $r1;

        $r0 = new java.lang.ThreadLocal;

        specialinvoke $r0.<java.lang.ThreadLocal: void <init>()>();

        <java.lang.StringCoding: java.lang.ThreadLocal decoder> = $r0;

        $r1 = new java.lang.ThreadLocal;

        specialinvoke $r1.<java.lang.ThreadLocal: void <init>()>();

        <java.lang.StringCoding: java.lang.ThreadLocal encoder> = $r1;

        <java.lang.StringCoding: boolean warnUnsupportedCharset> = 1;

        return;
    }

    private static void set(java.lang.ThreadLocal, java.lang.Object)
    {
        java.lang.ThreadLocal l0;
        java.lang.Object l1;
        java.lang.ref.SoftReference $r0;

        l0 := @parameter0: java.lang.ThreadLocal;

        l1 := @parameter1: java.lang.Object;

        $r0 = new java.lang.ref.SoftReference;

        specialinvoke $r0.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(l1);

        virtualinvoke l0.<java.lang.ThreadLocal: void set(java.lang.Object)>($r0);

        return;
    }

    private static java.nio.charset.Charset lookupCharset(java.lang.String)
    {
        java.lang.String l0;
        java.nio.charset.UnsupportedCharsetException l1, $r1;
        boolean $z0;
        java.nio.charset.Charset $r0;
        java.lang.Error $r2;

        l0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <java.nio.charset.Charset: boolean isSupported(java.lang.String)>(l0);

        if $z0 == 0 goto label4;

     label1:
        $r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(l0);

     label2:
        return $r0;

     label3:
        $r1 := @caughtexception;

        l1 = $r1;

        $r2 = new java.lang.Error;

        specialinvoke $r2.<java.lang.Error: void <init>(java.lang.Throwable)>(l1);

        throw $r2;

     label4:
        return null;

        catch java.nio.charset.UnsupportedCharsetException from label1 to label2 with label3;
    }

    private static java.lang.Object deref(java.lang.ThreadLocal)
    {
        java.lang.ThreadLocal l0;
        java.lang.ref.SoftReference l1;
        java.lang.Object $r0, $r1;

        l0 := @parameter0: java.lang.ThreadLocal;

        $r0 = virtualinvoke l0.<java.lang.ThreadLocal: java.lang.Object get()>();

        l1 = (java.lang.ref.SoftReference) $r0;

        if l1 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>();

        return $r1;
    }

    static char[] access$100(char[], int, java.nio.charset.Charset, boolean)
    {
        char[] l0, $r0;
        int l1;
        java.nio.charset.Charset l2;
        boolean l3;

        l0 := @parameter0: char[];

        l1 := @parameter1: int;

        l2 := @parameter2: java.nio.charset.Charset;

        l3 := @parameter3: boolean;

        $r0 = staticinvoke <java.lang.StringCoding: char[] safeTrim(char[],int,java.nio.charset.Charset,boolean)>(l0, l1, l2, l3);

        return $r0;
    }

    static int access$000(int, float)
    {
        int l0, $i0;
        float l1;

        l0 := @parameter0: int;

        l1 := @parameter1: float;

        $i0 = staticinvoke <java.lang.StringCoding: int scale(int,float)>(l0, l1);

        return $i0;
    }

    private static char[] safeTrim(char[], int, java.nio.charset.Charset, boolean)
    {
        char[] l0, $r1;
        int l1, $i0;
        java.nio.charset.Charset l2;
        boolean l3;
        java.lang.SecurityManager $r0;

        l0 := @parameter0: char[];

        l1 := @parameter1: int;

        l2 := @parameter2: java.nio.charset.Charset;

        l3 := @parameter3: boolean;

        $i0 = lengthof l0;

        if l1 != $i0 goto label2;

        if l3 != 0 goto label1;

        $r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r0 != null goto label2;

     label1:
        return l0;

     label2:
        $r1 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l0, l1);

        return $r1;
    }

    private static int scale(int, float)
    {
        int l0, $i0;
        float l1;
        double $d0, $d1, $d2;

        l0 := @parameter0: int;

        l1 := @parameter1: float;

        $d0 = (double) l0;

        $d1 = (double) l1;

        $d2 = $d0 * $d1;

        $i0 = (int) $d2;

        return $i0;
    }


