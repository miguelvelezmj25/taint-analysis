    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "com/sleepycat/je/tree/Tree";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sleepycat.je.tree.Tree$RootChildReference: boolean $assertionsDisabled> = $z1;

        return;
    }

    void <init>(com.sleepycat.je.tree.Tree, com.sleepycat.je.tree.Node, byte[], long, com.sleepycat.je.tree.Tree$1)
    {
        com.sleepycat.je.tree.Tree$RootChildReference this;
        com.sleepycat.je.tree.Tree x0;
        com.sleepycat.je.tree.Node x1;
        byte[] x2;
        long x3;
        com.sleepycat.je.tree.Tree$1 x4;

        this := @this: com.sleepycat.je.tree.Tree$RootChildReference;

        x0 := @parameter0: com.sleepycat.je.tree.Tree;

        x1 := @parameter1: com.sleepycat.je.tree.Node;

        x2 := @parameter2: byte[];

        x3 := @parameter3: long;

        x4 := @parameter4: com.sleepycat.je.tree.Tree$1;

        specialinvoke this.<com.sleepycat.je.tree.Tree$RootChildReference: void <init>(com.sleepycat.je.tree.Tree,com.sleepycat.je.tree.Node,byte[],long)>(x0, x1, x2, x3);

        return;
    }

    private void <init>(com.sleepycat.je.tree.Tree, com.sleepycat.je.tree.Node, byte[], long)
    {
        com.sleepycat.je.tree.Tree$RootChildReference this;
        com.sleepycat.je.tree.Tree l1;
        com.sleepycat.je.tree.Node target;
        byte[] key;
        long lsn;

        this := @this: com.sleepycat.je.tree.Tree$RootChildReference;

        l1 := @parameter0: com.sleepycat.je.tree.Tree;

        target := @parameter1: com.sleepycat.je.tree.Node;

        key := @parameter2: byte[];

        lsn := @parameter3: long;

        this.<com.sleepycat.je.tree.Tree$RootChildReference: com.sleepycat.je.tree.Tree this$0> = l1;

        specialinvoke this.<com.sleepycat.je.tree.ChildReference: void <init>(com.sleepycat.je.tree.Node,byte[],long)>(target, key, lsn);

        return;
    }

    public com.sleepycat.je.tree.Node fetchTarget(com.sleepycat.je.dbi.DatabaseImpl, com.sleepycat.je.tree.IN) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.tree.Tree$RootChildReference this;
        com.sleepycat.je.dbi.DatabaseImpl database;
        com.sleepycat.je.tree.IN in;
        com.sleepycat.je.tree.Node $r0, $r16;
        com.sleepycat.je.tree.Tree $r1, $r3, $r5, $r7;
        com.sleepycat.je.latch.SharedLatch $r2, $r4, $r6;
        boolean $z0;
        com.sleepycat.je.tree.ChildReference $r8;
        com.sleepycat.je.dbi.EnvironmentImpl $r9;
        java.lang.StringBuilder $r10, $r11, $r13;
        com.sleepycat.je.dbi.DatabaseId $r12;
        java.lang.String $r14;
        com.sleepycat.je.EnvironmentFailureException $r15;

        this := @this: com.sleepycat.je.tree.Tree$RootChildReference;

        database := @parameter0: com.sleepycat.je.dbi.DatabaseImpl;

        in := @parameter1: com.sleepycat.je.tree.IN;

        $r0 = virtualinvoke this.<com.sleepycat.je.tree.Tree$RootChildReference: com.sleepycat.je.tree.Node getTarget()>();

        if $r0 != null goto label1;

        $r1 = this.<com.sleepycat.je.tree.Tree$RootChildReference: com.sleepycat.je.tree.Tree this$0>;

        $r2 = staticinvoke <com.sleepycat.je.tree.Tree: com.sleepycat.je.latch.SharedLatch access$000(com.sleepycat.je.tree.Tree)>($r1);

        $z0 = interfaceinvoke $r2.<com.sleepycat.je.latch.SharedLatch: boolean isExclusiveOwner()>();

        if $z0 != 0 goto label1;

        $r3 = this.<com.sleepycat.je.tree.Tree$RootChildReference: com.sleepycat.je.tree.Tree this$0>;

        $r4 = staticinvoke <com.sleepycat.je.tree.Tree: com.sleepycat.je.latch.SharedLatch access$000(com.sleepycat.je.tree.Tree)>($r3);

        interfaceinvoke $r4.<com.sleepycat.je.latch.SharedLatch: void release()>();

        $r5 = this.<com.sleepycat.je.tree.Tree$RootChildReference: com.sleepycat.je.tree.Tree this$0>;

        $r6 = staticinvoke <com.sleepycat.je.tree.Tree: com.sleepycat.je.latch.SharedLatch access$000(com.sleepycat.je.tree.Tree)>($r5);

        interfaceinvoke $r6.<com.sleepycat.je.latch.SharedLatch: void acquireExclusive()>();

        $r7 = this.<com.sleepycat.je.tree.Tree$RootChildReference: com.sleepycat.je.tree.Tree this$0>;

        $r8 = staticinvoke <com.sleepycat.je.tree.Tree: com.sleepycat.je.tree.ChildReference access$100(com.sleepycat.je.tree.Tree)>($r7);

        if this == $r8 goto label1;

        $r9 = virtualinvoke database.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Root changed while unlatched, dbId=");

        $r12 = virtualinvoke database.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.DatabaseId getId()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedState(com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String)>($r9, $r14);

        throw $r15;

     label1:
        $r16 = specialinvoke this.<com.sleepycat.je.tree.ChildReference: com.sleepycat.je.tree.Node fetchTarget(com.sleepycat.je.dbi.DatabaseImpl,com.sleepycat.je.tree.IN)>(database, in);

        return $r16;
    }

    void updateLsnAfterOptionalLog(com.sleepycat.je.dbi.DatabaseImpl, long)
    {
        com.sleepycat.je.tree.Tree$RootChildReference this;
        com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        long lsn;
        boolean $z0, $z1;
        com.sleepycat.je.tree.Tree $r0;
        com.sleepycat.je.latch.SharedLatch $r1;
        java.lang.AssertionError $r2;

        this := @this: com.sleepycat.je.tree.Tree$RootChildReference;

        dbImpl := @parameter0: com.sleepycat.je.dbi.DatabaseImpl;

        lsn := @parameter1: long;

        $z0 = <com.sleepycat.je.tree.Tree$RootChildReference: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r0 = this.<com.sleepycat.je.tree.Tree$RootChildReference: com.sleepycat.je.tree.Tree this$0>;

        $r1 = staticinvoke <com.sleepycat.je.tree.Tree: com.sleepycat.je.latch.SharedLatch access$000(com.sleepycat.je.tree.Tree)>($r0);

        $z1 = interfaceinvoke $r1.<com.sleepycat.je.latch.SharedLatch: boolean isExclusiveOwner()>();

        if $z1 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        specialinvoke this.<com.sleepycat.je.tree.ChildReference: void updateLsnAfterOptionalLog(com.sleepycat.je.dbi.DatabaseImpl,long)>(dbImpl, lsn);

        return;
    }

    void setDirty()
    {
        com.sleepycat.je.tree.Tree$RootChildReference this;
        com.sleepycat.je.tree.Tree $r0;
        com.sleepycat.je.dbi.DatabaseImpl $r1;

        this := @this: com.sleepycat.je.tree.Tree$RootChildReference;

        specialinvoke this.<com.sleepycat.je.tree.ChildReference: void setDirty()>();

        $r0 = this.<com.sleepycat.je.tree.Tree$RootChildReference: com.sleepycat.je.tree.Tree this$0>;

        $r1 = staticinvoke <com.sleepycat.je.tree.Tree: com.sleepycat.je.dbi.DatabaseImpl access$200(com.sleepycat.je.tree.Tree)>($r0);

        virtualinvoke $r1.<com.sleepycat.je.dbi.DatabaseImpl: void setDirty()>();

        return;
    }

    public void setLsn(long)
    {
        com.sleepycat.je.tree.Tree$RootChildReference this;
        long lsn;
        boolean $z0, $z1;
        com.sleepycat.je.tree.Tree $r0;
        com.sleepycat.je.latch.SharedLatch $r1;
        java.lang.AssertionError $r2;

        this := @this: com.sleepycat.je.tree.Tree$RootChildReference;

        lsn := @parameter0: long;

        $z0 = <com.sleepycat.je.tree.Tree$RootChildReference: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r0 = this.<com.sleepycat.je.tree.Tree$RootChildReference: com.sleepycat.je.tree.Tree this$0>;

        $r1 = staticinvoke <com.sleepycat.je.tree.Tree: com.sleepycat.je.latch.SharedLatch access$000(com.sleepycat.je.tree.Tree)>($r0);

        $z1 = interfaceinvoke $r1.<com.sleepycat.je.latch.SharedLatch: boolean isExclusiveOwner()>();

        if $z1 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        specialinvoke this.<com.sleepycat.je.tree.ChildReference: void setLsn(long)>(lsn);

        return;
    }

    public void setTarget(com.sleepycat.je.tree.Node)
    {
        com.sleepycat.je.tree.Tree$RootChildReference this;
        com.sleepycat.je.tree.Node target;
        boolean $z0, $z1;
        com.sleepycat.je.tree.Tree $r0;
        com.sleepycat.je.latch.SharedLatch $r1;
        java.lang.AssertionError $r2;

        this := @this: com.sleepycat.je.tree.Tree$RootChildReference;

        target := @parameter0: com.sleepycat.je.tree.Node;

        $z0 = <com.sleepycat.je.tree.Tree$RootChildReference: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r0 = this.<com.sleepycat.je.tree.Tree$RootChildReference: com.sleepycat.je.tree.Tree this$0>;

        $r1 = staticinvoke <com.sleepycat.je.tree.Tree: com.sleepycat.je.latch.SharedLatch access$000(com.sleepycat.je.tree.Tree)>($r0);

        $z1 = interfaceinvoke $r1.<com.sleepycat.je.latch.SharedLatch: boolean isExclusiveOwner()>();

        if $z1 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        specialinvoke this.<com.sleepycat.je.tree.ChildReference: void setTarget(com.sleepycat.je.tree.Node)>(target);

        return;
    }

    public void clearTarget()
    {
        com.sleepycat.je.tree.Tree$RootChildReference this;
        boolean $z0, $z1;
        com.sleepycat.je.tree.Tree $r0;
        com.sleepycat.je.latch.SharedLatch $r1;
        java.lang.AssertionError $r2;

        this := @this: com.sleepycat.je.tree.Tree$RootChildReference;

        $z0 = <com.sleepycat.je.tree.Tree$RootChildReference: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r0 = this.<com.sleepycat.je.tree.Tree$RootChildReference: com.sleepycat.je.tree.Tree this$0>;

        $r1 = staticinvoke <com.sleepycat.je.tree.Tree: com.sleepycat.je.latch.SharedLatch access$000(com.sleepycat.je.tree.Tree)>($r0);

        $z1 = interfaceinvoke $r1.<com.sleepycat.je.latch.SharedLatch: boolean isExclusiveOwner()>();

        if $z1 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        specialinvoke this.<com.sleepycat.je.tree.ChildReference: void clearTarget()>();

        return;
    }


