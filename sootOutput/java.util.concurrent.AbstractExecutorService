    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "java/util/concurrent/AbstractExecutorService";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <java.util.concurrent.AbstractExecutorService: boolean $assertionsDisabled> = $z1;

        return;
    }

    public java.util.List invokeAll(java.util.Collection) throws java.lang.InterruptedException
    {
        java.util.concurrent.AbstractExecutorService l0;
        java.util.Collection l1;
        java.util.ArrayList l2, $r1, l4#50;
        java.lang.Throwable l8, $r9;
        int l10, $i0, l4#29, l5#32, l5#53, l6#56, l9#69;
        java.lang.NullPointerException $r0;
        boolean l3#9, $z0, $z2;
        java.util.Iterator l4#12;
        java.lang.Object $r2, $r3, $r7, $r10;
        java.util.concurrent.Callable l5#18;
        java.util.concurrent.RunnableFuture l6#22;
        java.util.concurrent.Future l6#39, $r8, $r11;
        java.util.concurrent.CancellationException $r5, l7#45;
        java.util.concurrent.ExecutionException $r6, l7#47;

        l0 := @this: java.util.concurrent.AbstractExecutorService;

        l1 := @parameter0: java.util.Collection;

        if l1 != null goto label01;

        $r0 = new java.lang.NullPointerException;

        specialinvoke $r0.<java.lang.NullPointerException: void <init>()>();

        throw $r0;

     label01:
        $r1 = new java.util.ArrayList;

        $i0 = interfaceinvoke l1.<java.util.Collection: int size()>();

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i0);

        l2 = $r1;

        l3#9 = 0;

     label02:
        l4#12 = interfaceinvoke l1.<java.util.Collection: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke l4#12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r2 = interfaceinvoke l4#12.<java.util.Iterator: java.lang.Object next()>();

        l5#18 = (java.util.concurrent.Callable) $r2;

        l6#22 = virtualinvoke l0.<java.util.concurrent.AbstractExecutorService: java.util.concurrent.RunnableFuture newTaskFor(java.util.concurrent.Callable)>(l5#18);

        virtualinvoke l2.<java.util.ArrayList: boolean add(java.lang.Object)>(l6#22);

        virtualinvoke l0.<java.util.concurrent.AbstractExecutorService: void execute(java.lang.Runnable)>(l6#22);

        goto label03;

     label04:
        l4#29 = 0;

        l5#32 = virtualinvoke l2.<java.util.ArrayList: int size()>();

     label05:
        if l4#29 >= l5#32 goto label11;

        $r3 = virtualinvoke l2.<java.util.ArrayList: java.lang.Object get(int)>(l4#29);

        l6#39 = (java.util.concurrent.Future) $r3;

        $z2 = interfaceinvoke l6#39.<java.util.concurrent.Future: boolean isDone()>();

        if $z2 != 0 goto label10;

     label06:
        interfaceinvoke l6#39.<java.util.concurrent.Future: java.lang.Object get()>();

     label07:
        goto label10;

     label08:
        $r5 := @caughtexception;

        l7#45 = $r5;

        goto label10;

     label09:
        $r6 := @caughtexception;

        l7#47 = $r6;

     label10:
        l4#29 = l4#29 + 1;

        goto label05;

     label11:
        l3#9 = 1;

        l4#50 = l2;

     label12:
        if l3#9 != 0 goto label14;

        l5#53 = 0;

        l6#56 = virtualinvoke l2.<java.util.ArrayList: int size()>();

     label13:
        if l5#53 >= l6#56 goto label14;

        $r7 = virtualinvoke l2.<java.util.ArrayList: java.lang.Object get(int)>(l5#53);

        $r8 = (java.util.concurrent.Future) $r7;

        interfaceinvoke $r8.<java.util.concurrent.Future: boolean cancel(boolean)>(1);

        l5#53 = l5#53 + 1;

        goto label13;

     label14:
        return l4#50;

     label15:
        $r9 := @caughtexception;

     label16:
        l8 = $r9;

     label17:
        if l3#9 != 0 goto label19;

        l9#69 = 0;

        l10 = virtualinvoke l2.<java.util.ArrayList: int size()>();

     label18:
        if l9#69 >= l10 goto label19;

        $r10 = virtualinvoke l2.<java.util.ArrayList: java.lang.Object get(int)>(l9#69);

        $r11 = (java.util.concurrent.Future) $r10;

        interfaceinvoke $r11.<java.util.concurrent.Future: boolean cancel(boolean)>(1);

        l9#69 = l9#69 + 1;

        goto label18;

     label19:
        throw l8;

        catch java.util.concurrent.CancellationException from label06 to label07 with label08;
        catch java.util.concurrent.ExecutionException from label06 to label07 with label09;
        catch java.lang.Throwable from label02 to label12 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    protected java.util.concurrent.RunnableFuture newTaskFor(java.util.concurrent.Callable)
    {
        java.util.concurrent.AbstractExecutorService l0;
        java.util.concurrent.Callable l1;
        java.util.concurrent.FutureTask $r0;

        l0 := @this: java.util.concurrent.AbstractExecutorService;

        l1 := @parameter0: java.util.concurrent.Callable;

        $r0 = new java.util.concurrent.FutureTask;

        specialinvoke $r0.<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>(l1);

        return $r0;
    }

    public void <init>()
    {
        java.util.concurrent.AbstractExecutorService l0;

        l0 := @this: java.util.concurrent.AbstractExecutorService;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        return;
    }


