    void <init>(at.favre.tools.dconvert.DConvert$1, java.util.List, int)
    {
        at.favre.tools.dconvert.DConvert$1$1 this;
        at.favre.tools.dconvert.DConvert$1 this$1;
        java.util.List l2;
        int l3;

        this := @this: at.favre.tools.dconvert.DConvert$1$1;

        this$1 := @parameter0: at.favre.tools.dconvert.DConvert$1;

        l2 := @parameter1: java.util.List;

        l3 := @parameter2: int;

        this.<at.favre.tools.dconvert.DConvert$1$1: at.favre.tools.dconvert.DConvert$1 this$1> = this$1;

        this.<at.favre.tools.dconvert.DConvert$1$1: java.util.List val$exceptionsConverters> = l2;

        this.<at.favre.tools.dconvert.DConvert$1$1: int val$finishedJobsConverters> = l3;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public void onFinished(int, java.util.List, java.lang.StringBuilder, java.util.List, boolean)
    {
        at.favre.tools.dconvert.DConvert$1$1 this;
        int finishedJobsPostProcessors, $i0, $i1;
        java.util.List outFiles, exceptions, $r0, $r7;
        java.lang.StringBuilder log, $r3;
        boolean haltedDuringProcess;
        at.favre.tools.dconvert.DConvert$1 $r1, $r5;
        at.favre.tools.dconvert.DConvert $r2, $r6;

        this := @this: at.favre.tools.dconvert.DConvert$1$1;

        finishedJobsPostProcessors := @parameter0: int;

        outFiles := @parameter1: java.util.List;

        log := @parameter2: java.lang.StringBuilder;

        exceptions := @parameter3: java.util.List;

        haltedDuringProcess := @parameter4: boolean;

        $r0 = this.<at.favre.tools.dconvert.DConvert$1$1: java.util.List val$exceptionsConverters>;

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>(exceptions);

        $r1 = this.<at.favre.tools.dconvert.DConvert$1$1: at.favre.tools.dconvert.DConvert$1 this$1>;

        $r2 = $r1.<at.favre.tools.dconvert.DConvert$1: at.favre.tools.dconvert.DConvert this$0>;

        $r3 = staticinvoke <at.favre.tools.dconvert.DConvert: java.lang.StringBuilder access$100(at.favre.tools.dconvert.DConvert)>($r2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(log);

        $r5 = this.<at.favre.tools.dconvert.DConvert$1$1: at.favre.tools.dconvert.DConvert$1 this$1>;

        $r6 = $r5.<at.favre.tools.dconvert.DConvert$1: at.favre.tools.dconvert.DConvert this$0>;

        $i0 = this.<at.favre.tools.dconvert.DConvert$1$1: int val$finishedJobsConverters>;

        $i1 = finishedJobsPostProcessors + $i0;

        $r7 = this.<at.favre.tools.dconvert.DConvert$1$1: java.util.List val$exceptionsConverters>;

        virtualinvoke $r6.<at.favre.tools.dconvert.DConvert: void informFinished(int,java.util.List,boolean)>($i1, $r7, haltedDuringProcess);

        return;
    }

    public void onProgress(float)
    {
        at.favre.tools.dconvert.DConvert$1$1 this;
        float percent, $f0, $f1, $f2, $f3;
        at.favre.tools.dconvert.DConvert$1 $r0, $r3, $r4;
        at.favre.tools.dconvert.DConvert $r1;
        at.favre.tools.dconvert.DConvert$HandlerCallback $r2;

        this := @this: at.favre.tools.dconvert.DConvert$1$1;

        percent := @parameter0: float;

        $r0 = this.<at.favre.tools.dconvert.DConvert$1$1: at.favre.tools.dconvert.DConvert$1 this$1>;

        $r1 = $r0.<at.favre.tools.dconvert.DConvert$1: at.favre.tools.dconvert.DConvert this$0>;

        $r2 = staticinvoke <at.favre.tools.dconvert.DConvert: at.favre.tools.dconvert.DConvert$HandlerCallback access$000(at.favre.tools.dconvert.DConvert)>($r1);

        $r3 = this.<at.favre.tools.dconvert.DConvert$1$1: at.favre.tools.dconvert.DConvert$1 this$1>;

        $f0 = $r3.<at.favre.tools.dconvert.DConvert$1: float val$convertPercentage>;

        $r4 = this.<at.favre.tools.dconvert.DConvert$1$1: at.favre.tools.dconvert.DConvert$1 this$1>;

        $f1 = $r4.<at.favre.tools.dconvert.DConvert$1: float val$postProcessPercentage>;

        $f2 = $f1 * percent;

        $f3 = $f0 + $f2;

        interfaceinvoke $r2.<at.favre.tools.dconvert.DConvert$HandlerCallback: void onProgress(float)>($f3);

        return;
    }


