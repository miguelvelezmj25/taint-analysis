    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("%(\\d+\\$)?([-#+ 0,(\\<]*)?(\\d+)?(\\.\\d+)?([tT])?([a-zA-Z%])");

        <java.util.Formatter: java.util.regex.Pattern fsPattern> = $r0;

        return;
    }

    public void <init>()
    {
        java.util.Formatter l0;
        java.lang.StringBuilder $r0;
        java.util.Locale$Category $r1;
        java.util.Locale $r2;

        l0 := @this: java.util.Formatter;

        $r1 = <java.util.Locale$Category: java.util.Locale$Category FORMAT>;

        $r2 = staticinvoke <java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>($r1);

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        specialinvoke l0.<java.util.Formatter: void <init>(java.util.Locale,java.lang.Appendable)>($r2, $r0);

        return;
    }

    public transient java.util.Formatter format(java.lang.String, java.lang.Object[])
    {
        java.util.Formatter l0, $r1;
        java.lang.String l1;
        java.lang.Object[] l2;
        java.util.Locale $r0;

        l0 := @this: java.util.Formatter;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: java.lang.Object[];

        $r0 = l0.<java.util.Formatter: java.util.Locale l>;

        $r1 = virtualinvoke l0.<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>($r0, l1, l2);

        return $r1;
    }

    public transient java.util.Formatter format(java.util.Locale, java.lang.String, java.lang.Object[])
    {
        java.util.Formatter l0;
        java.util.Locale l1;
        java.lang.String l2, $r1, $r5, $r9;
        java.lang.Object[] l3;
        java.util.Formatter$FormatString[] l6;
        java.util.Formatter$FormatString l8;
        int l9, l4#3, l5#5, l7#10, $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.io.IOException l10, $r12;
        java.util.MissingFormatArgumentException $r0, $r4, $r8;
        java.lang.Object $r3, $r7, $r11;

        l0 := @this: java.util.Formatter;

        l1 := @parameter0: java.util.Locale;

        l2 := @parameter1: java.lang.String;

        l3 := @parameter2: java.lang.Object[];

        specialinvoke l0.<java.util.Formatter: void ensureOpen()>();

        l4#3 = -1;

        l5#5 = -1;

        l6 = specialinvoke l0.<java.util.Formatter: java.util.Formatter$FormatString[] parse(java.lang.String)>(l2);

        l7#10 = 0;

     label01:
        $i0 = lengthof l6;

        if l7#10 >= $i0 goto label20;

        l8 = l6[l7#10];

        l9 = interfaceinvoke l8.<java.util.Formatter$FormatString: int index()>();

     label02:
        tableswitch(l9)
        {
            case -2: goto label03;
            case -1: goto label04;
            case 0: goto label09;
            default: goto label13;
        };

     label03:
        interfaceinvoke l8.<java.util.Formatter$FormatString: void print(java.lang.Object,java.util.Locale)>(null, l1);

        goto label17;

     label04:
        if l4#3 < 0 goto label05;

        if l3 == null goto label06;

        $i1 = lengthof l3;

        $i2 = $i1 - 1;

        if l4#3 <= $i2 goto label06;

     label05:
        $r0 = new java.util.MissingFormatArgumentException;

        $r1 = interfaceinvoke l8.<java.util.Formatter$FormatString: java.lang.String toString()>();

        specialinvoke $r0.<java.util.MissingFormatArgumentException: void <init>(java.lang.String)>($r1);

        throw $r0;

     label06:
        if l3 != null goto label07;

        $r3 = null;

        goto label08;

     label07:
        $r3 = l3[l4#3];

     label08:
        interfaceinvoke l8.<java.util.Formatter$FormatString: void print(java.lang.Object,java.util.Locale)>($r3, l1);

        goto label17;

     label09:
        l5#5 = l5#5 + 1;

        l4#3 = l5#5;

        if l3 == null goto label10;

        $i3 = lengthof l3;

        $i4 = $i3 - 1;

        if l5#5 <= $i4 goto label10;

        $r4 = new java.util.MissingFormatArgumentException;

        $r5 = interfaceinvoke l8.<java.util.Formatter$FormatString: java.lang.String toString()>();

        specialinvoke $r4.<java.util.MissingFormatArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label10:
        if l3 != null goto label11;

        $r7 = null;

        goto label12;

     label11:
        $r7 = l3[l5#5];

     label12:
        interfaceinvoke l8.<java.util.Formatter$FormatString: void print(java.lang.Object,java.util.Locale)>($r7, l1);

        goto label17;

     label13:
        l4#3 = l9 - 1;

        if l3 == null goto label14;

        $i5 = lengthof l3;

        $i6 = $i5 - 1;

        if l4#3 <= $i6 goto label14;

        $r8 = new java.util.MissingFormatArgumentException;

        $r9 = interfaceinvoke l8.<java.util.Formatter$FormatString: java.lang.String toString()>();

        specialinvoke $r8.<java.util.MissingFormatArgumentException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label14:
        if l3 != null goto label15;

        $r11 = null;

        goto label16;

     label15:
        $r11 = l3[l4#3];

     label16:
        interfaceinvoke l8.<java.util.Formatter$FormatString: void print(java.lang.Object,java.util.Locale)>($r11, l1);

     label17:
        goto label19;

     label18:
        $r12 := @caughtexception;

        l10 = $r12;

        l0.<java.util.Formatter: java.io.IOException lastException> = l10;

     label19:
        l7#10 = l7#10 + 1;

        goto label01;

     label20:
        return l0;

        catch java.io.IOException from label02 to label17 with label18;
    }

    private void ensureOpen()
    {
        java.util.Formatter l0;
        java.lang.Appendable $r0;
        java.util.FormatterClosedException $r1;

        l0 := @this: java.util.Formatter;

        $r0 = l0.<java.util.Formatter: java.lang.Appendable a>;

        if $r0 != null goto label1;

        $r1 = new java.util.FormatterClosedException;

        specialinvoke $r1.<java.util.FormatterClosedException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    private java.util.Formatter$FormatString[] parse(java.lang.String)
    {
        java.util.Formatter l0;
        java.lang.String l1, $r3, $r6;
        java.util.ArrayList l2, $r0;
        java.util.regex.Matcher l3;
        int l5, l4#7, $i0, $i1, $i2, $i3;
        java.util.regex.Pattern $r1;
        boolean $z0;
        java.util.Formatter$FixedString $r2, $r5;
        java.util.Formatter$FormatSpecifier $r4;
        java.util.Formatter$FormatString[] $r7, $r9;
        java.lang.Object[] $r8;

        l0 := @this: java.util.Formatter;

        l1 := @parameter0: java.lang.String;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        l2 = $r0;

        $r1 = <java.util.Formatter: java.util.regex.Pattern fsPattern>;

        l3 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l1);

        l4#7 = 0;

        l5 = virtualinvoke l1.<java.lang.String: int length()>();

     label1:
        if l4#7 >= l5 goto label4;

        $z0 = virtualinvoke l3.<java.util.regex.Matcher: boolean find(int)>(l4#7);

        if $z0 == 0 goto label3;

        $i0 = virtualinvoke l3.<java.util.regex.Matcher: int start()>();

        if $i0 == l4#7 goto label2;

        $i1 = virtualinvoke l3.<java.util.regex.Matcher: int start()>();

        staticinvoke <java.util.Formatter: void checkText(java.lang.String,int,int)>(l1, l4#7, $i1);

        $r2 = new java.util.Formatter$FixedString;

        $i2 = virtualinvoke l3.<java.util.regex.Matcher: int start()>();

        $r3 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int,int)>(l4#7, $i2);

        specialinvoke $r2.<java.util.Formatter$FixedString: void <init>(java.util.Formatter,java.lang.String)>(l0, $r3);

        virtualinvoke l2.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

     label2:
        $r4 = new java.util.Formatter$FormatSpecifier;

        specialinvoke $r4.<java.util.Formatter$FormatSpecifier: void <init>(java.util.Formatter,java.util.regex.Matcher)>(l0, l3);

        virtualinvoke l2.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        l4#7 = virtualinvoke l3.<java.util.regex.Matcher: int end()>();

        goto label1;

     label3:
        staticinvoke <java.util.Formatter: void checkText(java.lang.String,int,int)>(l1, l4#7, l5);

        $r5 = new java.util.Formatter$FixedString;

        $r6 = virtualinvoke l1.<java.lang.String: java.lang.String substring(int)>(l4#7);

        specialinvoke $r5.<java.util.Formatter$FixedString: void <init>(java.util.Formatter,java.lang.String)>(l0, $r6);

        virtualinvoke l2.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        goto label4;

     label4:
        $i3 = virtualinvoke l2.<java.util.ArrayList: int size()>();

        $r7 = newarray (java.util.Formatter$FormatString)[$i3];

        $r8 = virtualinvoke l2.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        $r9 = (java.util.Formatter$FormatString[]) $r8;

        return $r9;
    }

    private static void checkText(java.lang.String, int, int)
    {
        java.lang.String l0, $r1;
        int l1, l2, l3#2, $i1, $i3;
        char l4, $c0, $c2;
        java.util.UnknownFormatConversionException $r0;

        l0 := @parameter0: java.lang.String;

        l1 := @parameter1: int;

        l2 := @parameter2: int;

        l3#2 = l1;

     label1:
        if l3#2 >= l2 goto label5;

        $c0 = virtualinvoke l0.<java.lang.String: char charAt(int)>(l3#2);

        if $c0 != 37 goto label4;

        $i1 = l2 - 1;

        if l3#2 != $i1 goto label2;

        $c2 = 37;

        goto label3;

     label2:
        $i3 = l3#2 + 1;

        $c2 = virtualinvoke l0.<java.lang.String: char charAt(int)>($i3);

     label3:
        l4 = $c2;

        $r0 = new java.util.UnknownFormatConversionException;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(l4);

        specialinvoke $r0.<java.util.UnknownFormatConversionException: void <init>(java.lang.String)>($r1);

        throw $r0;

     label4:
        l3#2 = l3#2 + 1;

        goto label1;

     label5:
        return;
    }

    public java.lang.String toString()
    {
        java.util.Formatter l0;
        java.lang.Appendable $r0;
        java.lang.String $r1;

        l0 := @this: java.util.Formatter;

        specialinvoke l0.<java.util.Formatter: void ensureOpen()>();

        $r0 = l0.<java.util.Formatter: java.lang.Appendable a>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    private void <init>(java.util.Locale, java.lang.Appendable)
    {
        java.util.Formatter l0;
        java.util.Locale l1;
        java.lang.Appendable l2;
        char $c0;

        l0 := @this: java.util.Formatter;

        l1 := @parameter0: java.util.Locale;

        l2 := @parameter1: java.lang.Appendable;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        l0.<java.util.Formatter: java.lang.Appendable a> = l2;

        l0.<java.util.Formatter: java.util.Locale l> = l1;

        $c0 = staticinvoke <java.util.Formatter: char getZero(java.util.Locale)>(l1);

        l0.<java.util.Formatter: char zero> = $c0;

        return;
    }

    private static char getZero(java.util.Locale)
    {
        java.util.Locale l0, $r0;
        java.text.DecimalFormatSymbols l1;
        boolean $z0;
        char $c0;

        l0 := @parameter0: java.util.Locale;

        if l0 == null goto label1;

        $r0 = <java.util.Locale: java.util.Locale US>;

        $z0 = virtualinvoke l0.<java.util.Locale: boolean equals(java.lang.Object)>($r0);

        if $z0 != 0 goto label1;

        l1 = staticinvoke <java.text.DecimalFormatSymbols: java.text.DecimalFormatSymbols getInstance(java.util.Locale)>(l0);

        $c0 = virtualinvoke l1.<java.text.DecimalFormatSymbols: char getZeroDigit()>();

        return $c0;

     label1:
        return 48;
    }

    static java.lang.Appendable access$000(java.util.Formatter)
    {
        java.util.Formatter l0;
        java.lang.Appendable $r0;

        l0 := @parameter0: java.util.Formatter;

        $r0 = l0.<java.util.Formatter: java.lang.Appendable a>;

        return $r0;
    }

    public void <init>(java.lang.Appendable, java.util.Locale)
    {
        java.util.Formatter l0;
        java.lang.Appendable l1, $r0;
        java.util.Locale l2;

        l0 := @this: java.util.Formatter;

        l1 := @parameter0: java.lang.Appendable;

        l2 := @parameter1: java.util.Locale;

        $r0 = staticinvoke <java.util.Formatter: java.lang.Appendable nonNullAppendable(java.lang.Appendable)>(l1);

        specialinvoke l0.<java.util.Formatter: void <init>(java.util.Locale,java.lang.Appendable)>(l2, $r0);

        return;
    }

    private static final java.lang.Appendable nonNullAppendable(java.lang.Appendable)
    {
        java.lang.Appendable l0;
        java.lang.StringBuilder $r0;

        l0 := @parameter0: java.lang.Appendable;

        if l0 != null goto label1;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        return $r0;

     label1:
        return l0;
    }

    public java.util.Locale locale()
    {
        java.util.Formatter l0;
        java.util.Locale $r0;

        l0 := @this: java.util.Formatter;

        specialinvoke l0.<java.util.Formatter: void ensureOpen()>();

        $r0 = l0.<java.util.Formatter: java.util.Locale l>;

        return $r0;
    }

    public java.lang.Appendable out()
    {
        java.util.Formatter l0;
        java.lang.Appendable $r0;

        l0 := @this: java.util.Formatter;

        specialinvoke l0.<java.util.Formatter: void ensureOpen()>();

        $r0 = l0.<java.util.Formatter: java.lang.Appendable a>;

        return $r0;
    }

    static char access$300(java.util.Formatter)
    {
        java.util.Formatter l0;
        char $c0;

        l0 := @parameter0: java.util.Formatter;

        $c0 = l0.<java.util.Formatter: char zero>;

        return $c0;
    }

    static double access$200()
    {
        double $d0;

        $d0 = <java.util.Formatter: double scaleUp>;

        return $d0;
    }

    static double access$202(double)
    {
        double l0;

        l0 := @parameter0: double;

        <java.util.Formatter: double scaleUp> = l0;

        return l0;
    }


