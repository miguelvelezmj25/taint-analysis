    public boolean forward(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.transform.WHT4 this;
        kanzi.SliceIntArray src, dst;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3, $i4;
        int[] $r0;

        this := @this: kanzi.transform.WHT4;

        src := @parameter0: kanzi.SliceIntArray;

        dst := @parameter1: kanzi.SliceIntArray;

        $z0 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(src);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i0 = src.<kanzi.SliceIntArray: int length>;

        if $i0 == 16 goto label2;

        return 0;

     label2:
        if src == dst goto label4;

        $z1 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(dst);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $i1 = dst.<kanzi.SliceIntArray: int index>;

        $i2 = $i1 + 16;

        $r0 = dst.<kanzi.SliceIntArray: int[] array>;

        $i3 = lengthof $r0;

        if $i2 <= $i3 goto label4;

        return 0;

     label4:
        $i4 = this.<kanzi.transform.WHT4: int fScale>;

        $z2 = staticinvoke <kanzi.transform.WHT4: boolean compute(kanzi.SliceIntArray,kanzi.SliceIntArray,int)>(src, dst, $i4);

        return $z2;
    }

    private static boolean compute(kanzi.SliceIntArray, kanzi.SliceIntArray, int)
    {
        kanzi.SliceIntArray src, dst;
        int shift, srcIdx, dstIdx, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, adjust, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82;
        int[] input, output;

        src := @parameter0: kanzi.SliceIntArray;

        dst := @parameter1: kanzi.SliceIntArray;

        shift := @parameter2: int;

        input = src.<kanzi.SliceIntArray: int[] array>;

        output = dst.<kanzi.SliceIntArray: int[] array>;

        srcIdx = src.<kanzi.SliceIntArray: int index>;

        dstIdx = dst.<kanzi.SliceIntArray: int index>;

        x0 = input[srcIdx];

        $i0 = srcIdx + 1;

        x1 = input[$i0];

        $i1 = srcIdx + 2;

        x2 = input[$i1];

        $i2 = srcIdx + 3;

        x3 = input[$i2];

        $i3 = srcIdx + 4;

        x4 = input[$i3];

        $i4 = srcIdx + 5;

        x5 = input[$i4];

        $i5 = srcIdx + 6;

        x6 = input[$i5];

        $i6 = srcIdx + 7;

        x7 = input[$i6];

        $i7 = srcIdx + 8;

        x8 = input[$i7];

        $i8 = srcIdx + 9;

        x9 = input[$i8];

        $i9 = srcIdx + 10;

        x10 = input[$i9];

        $i10 = srcIdx + 11;

        x11 = input[$i10];

        $i11 = srcIdx + 12;

        x12 = input[$i11];

        $i12 = srcIdx + 13;

        x13 = input[$i12];

        $i13 = srcIdx + 14;

        x14 = input[$i13];

        $i14 = srcIdx + 15;

        x15 = input[$i14];

        a0 = x0 + x1;

        a1 = x2 + x3;

        a2 = x0 - x1;

        a3 = x2 - x3;

        a4 = x4 + x5;

        a5 = x6 + x7;

        a6 = x4 - x5;

        a7 = x6 - x7;

        a8 = x8 + x9;

        a9 = x10 + x11;

        a10 = x8 - x9;

        a11 = x10 - x11;

        a12 = x12 + x13;

        a13 = x14 + x15;

        a14 = x12 - x13;

        a15 = x14 - x15;

        b0 = a0 + a1;

        b1 = a2 + a3;

        b2 = a0 - a1;

        b3 = a2 - a3;

        b4 = a4 + a5;

        b5 = a6 + a7;

        b6 = a4 - a5;

        b7 = a6 - a7;

        b8 = a8 + a9;

        b9 = a10 + a11;

        b10 = a8 - a9;

        b11 = a10 - a11;

        b12 = a12 + a13;

        b13 = a14 + a15;

        b14 = a12 - a13;

        b15 = a14 - a15;

        a0 = b0 + b4;

        a1 = b8 + b12;

        a2 = b0 - b4;

        a3 = b8 - b12;

        a4 = b1 + b5;

        a5 = b9 + b13;

        a6 = b1 - b5;

        a7 = b9 - b13;

        a8 = b2 + b6;

        a9 = b10 + b14;

        a10 = b2 - b6;

        a11 = b10 - b14;

        a12 = b3 + b7;

        a13 = b11 + b15;

        a14 = b3 - b7;

        a15 = b11 - b15;

        $i15 = 1 << shift;

        adjust = $i15 >> 1;

        $i16 = a0 + a1;

        $i17 = $i16 + adjust;

        $i18 = $i17 >> shift;

        output[dstIdx] = $i18;

        $i19 = dstIdx + 4;

        $i20 = a2 + a3;

        $i21 = $i20 + adjust;

        $i22 = $i21 >> shift;

        output[$i19] = $i22;

        $i23 = dstIdx + 8;

        $i24 = a0 - a1;

        $i25 = $i24 + adjust;

        $i26 = $i25 >> shift;

        output[$i23] = $i26;

        $i27 = dstIdx + 12;

        $i28 = a2 - a3;

        $i29 = $i28 + adjust;

        $i30 = $i29 >> shift;

        output[$i27] = $i30;

        $i31 = dstIdx + 1;

        $i32 = a4 + a5;

        $i33 = $i32 + adjust;

        $i34 = $i33 >> shift;

        output[$i31] = $i34;

        $i35 = dstIdx + 5;

        $i36 = a6 + a7;

        $i37 = $i36 + adjust;

        $i38 = $i37 >> shift;

        output[$i35] = $i38;

        $i39 = dstIdx + 9;

        $i40 = a4 - a5;

        $i41 = $i40 + adjust;

        $i42 = $i41 >> shift;

        output[$i39] = $i42;

        $i43 = dstIdx + 13;

        $i44 = a6 - a7;

        $i45 = $i44 + adjust;

        $i46 = $i45 >> shift;

        output[$i43] = $i46;

        $i47 = dstIdx + 2;

        $i48 = a8 + a9;

        $i49 = $i48 + adjust;

        $i50 = $i49 >> shift;

        output[$i47] = $i50;

        $i51 = dstIdx + 6;

        $i52 = a10 + a11;

        $i53 = $i52 + adjust;

        $i54 = $i53 >> shift;

        output[$i51] = $i54;

        $i55 = dstIdx + 10;

        $i56 = a8 - a9;

        $i57 = $i56 + adjust;

        $i58 = $i57 >> shift;

        output[$i55] = $i58;

        $i59 = dstIdx + 14;

        $i60 = a10 - a11;

        $i61 = $i60 + adjust;

        $i62 = $i61 >> shift;

        output[$i59] = $i62;

        $i63 = dstIdx + 3;

        $i64 = a12 + a13;

        $i65 = $i64 + adjust;

        $i66 = $i65 >> shift;

        output[$i63] = $i66;

        $i67 = dstIdx + 7;

        $i68 = a14 + a15;

        $i69 = $i68 + adjust;

        $i70 = $i69 >> shift;

        output[$i67] = $i70;

        $i71 = dstIdx + 11;

        $i72 = a12 - a13;

        $i73 = $i72 + adjust;

        $i74 = $i73 >> shift;

        output[$i71] = $i74;

        $i75 = dstIdx + 15;

        $i76 = a14 - a15;

        $i77 = $i76 + adjust;

        $i78 = $i77 >> shift;

        output[$i75] = $i78;

        $i79 = src.<kanzi.SliceIntArray: int index>;

        $i80 = $i79 + 16;

        src.<kanzi.SliceIntArray: int index> = $i80;

        $i81 = dst.<kanzi.SliceIntArray: int index>;

        $i82 = $i81 + 16;

        dst.<kanzi.SliceIntArray: int index> = $i82;

        return 1;
    }

    public boolean inverse(kanzi.SliceIntArray, kanzi.SliceIntArray)
    {
        kanzi.transform.WHT4 this;
        kanzi.SliceIntArray src, dst;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3, $i4;
        int[] $r0;

        this := @this: kanzi.transform.WHT4;

        src := @parameter0: kanzi.SliceIntArray;

        dst := @parameter1: kanzi.SliceIntArray;

        $z0 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(src);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i0 = src.<kanzi.SliceIntArray: int length>;

        if $i0 == 16 goto label2;

        return 0;

     label2:
        if src == dst goto label4;

        $z1 = staticinvoke <kanzi.SliceIntArray: boolean isValid(kanzi.SliceIntArray)>(dst);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $i1 = dst.<kanzi.SliceIntArray: int index>;

        $i2 = $i1 + 16;

        $r0 = dst.<kanzi.SliceIntArray: int[] array>;

        $i3 = lengthof $r0;

        if $i2 <= $i3 goto label4;

        return 0;

     label4:
        $i4 = this.<kanzi.transform.WHT4: int iScale>;

        $z2 = staticinvoke <kanzi.transform.WHT4: boolean compute(kanzi.SliceIntArray,kanzi.SliceIntArray,int)>(src, dst, $i4);

        return $z2;
    }


